{"nodes":[{"pos":[12,60],"content":"pointer_to_unary_function Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"pointer_to_unary_function Class | Microsoft Docs","pos":[0,48]}]},{"pos":[810,841],"content":"pointer_to_unary_function Class","linkify":"pointer_to_unary_function Class","nodes":[{"content":"pointer_to_unary_function Class","pos":[0,31]}]},{"content":"Converts a unary function pointer into an adaptable unary function.","pos":[842,909]},{"pos":[918,924],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1169,1179],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The binary function to be converted.","pos":[1194,1230]},{"content":"The object that the <bpt id=\"p1\">*</bpt><ph id=\"ph1\">\\*</ph>pfunc<ept id=\"p1\">*</ept> is called on.","pos":[1247,1290],"source":" The object that the *\\*pfunc* is called on."},{"pos":[1299,1311],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The template class stores a copy of <bpt id=\"p1\">**</bpt>pfunc<ept id=\"p1\">**</ept>.","pos":[1315,1361],"source":"The template class stores a copy of **pfunc**."},{"content":"It defines its member function <ph id=\"ph1\">`operator()`</ph> as returning (<ph id=\"ph2\">\\*</ph> <bpt id=\"p1\">**</bpt>pfunc<ept id=\"p1\">**</ept>)(_ <bpt id=\"p2\">*</bpt>Left<ept id=\"p2\">*</ept>).","pos":[1362,1444],"source":" It defines its member function `operator()` as returning (\\* **pfunc**)(_ *Left*)."},{"pos":[1453,1460],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A unary function pointer is a function object and may be passed to any Standard Template Library algorithm that is expecting a unary function as a parameter, but it is not adaptable.","pos":[1464,1646]},{"content":"To use it with an adaptor, such as binding a value to it or using it with a negator, it must be supplied with the nested types <bpt id=\"p1\">**</bpt>argument_type<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>result_type<ept id=\"p2\">**</ept> that make such an adaptation possible.","pos":[1647,1850],"source":" To use it with an adaptor, such as binding a value to it or using it with a negator, it must be supplied with the nested types **argument_type** and **result_type** that make such an adaptation possible."},{"content":"The conversion by <ph id=\"ph1\">`pointer_to_unary_function`</ph> allows the function adaptors to work with binary function pointers.","pos":[1851,1964],"source":" The conversion by `pointer_to_unary_function` allows the function adaptors to work with binary function pointers."},{"pos":[1973,1980],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The constructor of <ph id=\"ph1\">`pointer_to_unary_function`</ph> is rarely used directly.","pos":[1984,2055],"source":"The constructor of `pointer_to_unary_function` is rarely used directly."},{"content":"See the helper function <bpt id=\"p1\">[</bpt>ptr_fun<ept id=\"p1\">](../standard-library/functional-functions.md#ptr_fun_function)</ept> for an example of how to declare and use the <ph id=\"ph1\">`pointer_to_unary_function`</ph> adaptor predicate.","pos":[2056,2243],"source":" See the helper function [ptr_fun](../standard-library/functional-functions.md#ptr_fun_function) for an example of how to declare and use the `pointer_to_unary_function` adaptor predicate."},{"pos":[2252,2264],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2268,2293],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>functional&gt;","source":"**Header:** \\<functional>"},{"pos":[2300,2318],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[2327,2335],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2339,2426],"content":"<bpt id=\"p1\">[</bpt>C++ Standard Library Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-reference.md)</ept>","source":"[C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)"}],"content":"---\ntitle: \"pointer_to_unary_function Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"xfunctional/std::pointer_to_unary_function\"\n  - \"pointer_to_unary_function\"\n  - \"std.pointer_to_unary_function\"\n  - \"std::pointer_to_unary_function\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"pointer_to_unary_function function\"\n  - \"pointer_to_unary_function class\"\nms.assetid: 05600207-b916-4759-beca-6b6facd2d6f6\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# pointer_to_unary_function Class\nConverts a unary function pointer into an adaptable unary function.  \n  \n## Syntax  \n  \n```\ntemplate <class Arg, class Result>\nclass pointer_to_unary_function\n    : public unary_function<Arg, Result>\n{\npublic:\n    explicit pointer_to_unary_function(Result(*pfunc)(Arg));\n    Result operator()(Arg left) const;\n};\n```  \n  \n#### Parameters  \n `pfunc`  \n The binary function to be converted.  \n  \n `left`  \n The object that the *\\*pfunc* is called on.  \n  \n## Return Value  \n The template class stores a copy of **pfunc**. It defines its member function `operator()` as returning (\\* **pfunc**)(_ *Left*).  \n  \n## Remarks  \n A unary function pointer is a function object and may be passed to any Standard Template Library algorithm that is expecting a unary function as a parameter, but it is not adaptable. To use it with an adaptor, such as binding a value to it or using it with a negator, it must be supplied with the nested types **argument_type** and **result_type** that make such an adaptation possible. The conversion by `pointer_to_unary_function` allows the function adaptors to work with binary function pointers.  \n  \n## Example  \n The constructor of `pointer_to_unary_function` is rarely used directly. See the helper function [ptr_fun](../standard-library/functional-functions.md#ptr_fun_function) for an example of how to declare and use the `pointer_to_unary_function` adaptor predicate.  \n  \n## Requirements  \n **Header:** \\<functional>  \n  \n **Namespace:** std  \n  \n## See Also  \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}