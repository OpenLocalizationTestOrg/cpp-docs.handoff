{"nodes":[{"pos":[12,64],"content":"CDynamicParameterAccessor::SetParam | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CDynamicParameterAccessor::SetParam | Microsoft Docs","pos":[0,52]}]},{"content":"CDynamicParameterAccessor::SetParam","pos":[936,971]},{"content":"Sets the parameter buffer using the specified (non-string) data.","pos":[972,1036]},{"content":"Syntax","pos":[1045,1051]},{"content":"Parameters","pos":[1382,1392]},{"content":"A templated parameter that is the data type.","pos":[1407,1451]},{"content":"[in] The parameter number (offset from 1).","pos":[1470,1512]},{"content":"Parameter 0 is reserved for return values.","pos":[1513,1555]},{"content":"The parameter number is the index of the parameter based on its order in the SQL or stored procedure call.","pos":[1556,1662]},{"content":"For example:","pos":[1663,1675]},{"pos":[1693,1713],"content":"NVC_OLEDB_Consumer#8"},{"content":"[in] The parameter name.","pos":[1813,1837]},{"content":"[in] The pointer to the memory containing the data to be written to the buffer.","pos":[1855,1934]},{"content":"status","pos":[1942,1948]},{"content":"[in] The <ph id=\"ph1\">`DBSTATUS`</ph> column status.","pos":[1953,1987],"source":" [in] The `DBSTATUS` column status."},{"content":"For information on <ph id=\"ph1\">`DBSTATUS`</ph> values, see <bpt id=\"p1\">[</bpt>Status<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/ms722617.aspx)</ept> in the <bpt id=\"p2\">*</bpt>OLE DB Programmer's Reference<ept id=\"p2\">*</ept>, or search for <ph id=\"ph2\">`DBSTATUS`</ph> in oledb.h.","pos":[1988,2171],"source":" For information on `DBSTATUS` values, see [Status](https://msdn.microsoft.com/en-us/library/ms722617.aspx) in the *OLE DB Programmer's Reference*, or search for `DBSTATUS` in oledb.h."},{"content":"Return Value","pos":[2180,2192]},{"pos":[2196,2248],"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> on success or <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> on failure.","source":"Returns **true** on success or **false** on failure."},{"content":"Use <ph id=\"ph1\">`SetParam`</ph> to set nonstring parameter data in the buffer.","pos":[2255,2316],"source":"Use `SetParam` to set nonstring parameter data in the buffer."},{"content":"Use <bpt id=\"p1\">[</bpt>SetParamString<ept id=\"p1\">](../../data/oledb/cdynamicparameteraccessor-setparamstring.md)</ept> to set string parameter data in the buffer.","pos":[2317,2443],"source":" Use [SetParamString](../../data/oledb/cdynamicparameteraccessor-setparamstring.md) to set string parameter data in the buffer."},{"content":"Requirements","pos":[2452,2464]},{"pos":[2468,2490],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atldbcli.h","source":"**Header:** atldbcli.h"},{"content":"See Also","pos":[2499,2507]},{"content":"CDynamicParameterAccessor Class","pos":[2512,2543]}],"content":"---\ntitle: \"CDynamicParameterAccessor::SetParam | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"ATL::CDynamicParameterAccessor::SetParam\"\n  - \"ATL::CDynamicParameterAccessor::SetParam<ctype>\"\n  - \"CDynamicParameterAccessor.SetParam\"\n  - \"ATL.CDynamicParameterAccessor.SetParam\"\n  - \"SetParam\"\n  - \"CDynamicParameterAccessor:SetParam\"\n  - \"CDynamicParameterAccessor::SetParam<ctype>\"\n  - \"CDynamicParameterAccessor::SetParam\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"SetParam method\"\nms.assetid: e2349220-545c-46ad-90da-9113ac52551a\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CDynamicParameterAccessor::SetParam\nSets the parameter buffer using the specified (non-string) data.  \n  \n## Syntax  \n  \n```  \n  \n      template < class   \n      ctype >  \nbool SetParam(  \n   DBORDINAL nParam,  \n   const ctype* pData,  \n   DBSTATUS status = DBSTATUS_S_OK  \n) throw( );  \ntemplate < class ctype >  \nbool SetParam(  \n   TCHAR* pParamName,  \n   const ctype* pData,  \n   DBSTATUS status = DBSTATUS_S_OK  \n) throw( );  \n```  \n  \n#### Parameters  \n `ctype`  \n A templated parameter that is the data type.  \n  \n `nParam`  \n [in] The parameter number (offset from 1). Parameter 0 is reserved for return values. The parameter number is the index of the parameter based on its order in the SQL or stored procedure call. For example:  \n  \n [!code-cpp[NVC_OLEDB_Consumer#8](../../data/oledb/codesnippet/cpp/cdynamicparameteraccessor-setparam_1.cpp)]  \n  \n `pParamName`  \n [in] The parameter name.  \n  \n `pData`  \n [in] The pointer to the memory containing the data to be written to the buffer.  \n  \n *status*  \n [in] The `DBSTATUS` column status. For information on `DBSTATUS` values, see [Status](https://msdn.microsoft.com/en-us/library/ms722617.aspx) in the *OLE DB Programmer's Reference*, or search for `DBSTATUS` in oledb.h.  \n  \n## Return Value  \n Returns **true** on success or **false** on failure.  \n  \n Use `SetParam` to set nonstring parameter data in the buffer. Use [SetParamString](../../data/oledb/cdynamicparameteraccessor-setparamstring.md) to set string parameter data in the buffer.  \n  \n## Requirements  \n **Header:** atldbcli.h  \n  \n## See Also  \n [CDynamicParameterAccessor Class](../../data/oledb/cdynamicparameteraccessor-class.md)"}