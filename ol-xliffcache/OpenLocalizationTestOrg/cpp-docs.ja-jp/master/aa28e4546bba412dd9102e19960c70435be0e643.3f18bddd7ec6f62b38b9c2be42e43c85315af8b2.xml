{"nodes":[{"pos":[12,52],"content":"fegetround, fesetround2 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"fegetround, fesetround2 | Microsoft Docs","pos":[0,40]}]},{"content":"fegetround, fesetround","pos":[1045,1067]},{"content":"Gets or sets the current floating-point rounding mode.","pos":[1068,1122]},{"content":"Syntax","pos":[1131,1137]},{"content":"Parameters","pos":[1234,1244]},{"content":"The rounding mode to set, as one of the floating-point rounding macros.","pos":[1264,1335]},{"content":"If the value is not equal to one of the floating-point rounding macros, the rounding mode is not changed.","pos":[1336,1441]},{"content":"Return Value","pos":[1450,1462]},{"content":"On success, <ph id=\"ph1\">`fegetround`</ph> returns the rounding mode as one of the floating point rounding macro values.","pos":[1466,1568],"source":"On success, `fegetround` returns the rounding mode as one of the floating point rounding macro values."},{"content":"It returns a negative value if the current rounding mode can't be determined.","pos":[1569,1646]},{"content":"On success, <ph id=\"ph1\">`fesetround`</ph> returns 0.","pos":[1653,1688],"source":"On success, `fesetround` returns 0."},{"content":"Otherwise, a non-zero value is returned.","pos":[1689,1729]},{"content":"Remarks","pos":[1738,1745]},{"content":"Floating-point operations can use one of several rounding modes.","pos":[1749,1813]},{"content":"These control which direction the results of floating-point operations are rounded toward when the results are stored.","pos":[1814,1932]},{"content":"These are the names and behaviors of the floating-point rounding macros defined in <ph id=\"ph1\">\\&lt;</ph>fenv.h&gt;:","pos":[1933,2026],"source":" These are the names and behaviors of the floating-point rounding macros defined in \\<fenv.h>:"},{"content":"Macro","pos":[2033,2038]},{"content":"Description","pos":[2039,2050]},{"content":"FE_DOWNWARD","pos":[2089,2100]},{"content":"Round towards negative infinity.","pos":[2101,2133]},{"content":"FE_TONEAREST","pos":[2138,2150]},{"content":"Round towards the nearest.","pos":[2151,2177]},{"content":"FE_TOWARDZERO","pos":[2182,2195]},{"content":"Round towards zero.","pos":[2196,2215]},{"content":"FE_UPWARD","pos":[2220,2229]},{"content":"Round towards positive infinity.","pos":[2230,2262]},{"content":"The default behavior of FE_TONEAREST is to round results midway between representable values toward the nearest value with an even (0) least significant bit.","pos":[2270,2427]},{"content":"The current rounding mode affects these operations:","pos":[2434,2485]},{"content":"String conversions.","pos":[2495,2514]},{"content":"The results of floating-point arithmetic operators outside of constant expressions.","pos":[2524,2607]},{"pos":[2617,2680],"content":"The library rounding functions, such as <ph id=\"ph1\">`rint`</ph> and <ph id=\"ph2\">`nearbyint`</ph>.","source":"The library rounding functions, such as `rint` and `nearbyint`."},{"content":"Return values from standard library mathematical functions.","pos":[2690,2749]},{"content":"The current rounding mode does not affect these operations:","pos":[2756,2815]},{"pos":[2825,2886],"content":"The <ph id=\"ph1\">`trunc`</ph>, <ph id=\"ph2\">`ceil`</ph>, <ph id=\"ph3\">`floor`</ph>, and <ph id=\"ph4\">`lround`</ph> library functions.","source":"The `trunc`, `ceil`, `floor`, and `lround` library functions."},{"content":"Floating-point to integer implicit casts and conversions, which always round towards zero.","pos":[2896,2986]},{"content":"The results of floating-point arithmetic operators in constant expressions, which always round to the nearest value.","pos":[2996,3112]},{"content":"To use these functions, you must turn off floating-point optimizations that could prevent access by using the <ph id=\"ph1\">`#pragma fenv_access(on)`</ph> directive prior to the call.","pos":[3119,3283],"source":"To use these functions, you must turn off floating-point optimizations that could prevent access by using the `#pragma fenv_access(on)` directive prior to the call."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>fenv_access<ept id=\"p1\">](../../preprocessor/fenv-access.md)</ept>.","pos":[3284,3359],"source":" For more information, see [fenv_access](../../preprocessor/fenv-access.md)."},{"content":"Requirements","pos":[3368,3380]},{"content":"Function","pos":[3387,3395]},{"content":"C header","pos":[3396,3404]},{"content":"C++ header","pos":[3405,3415]},{"pos":[3485,3486],"content":","},{"content":"fenv.h&gt;","pos":[3517,3524],"source":"fenv.h>"},{"content":"cfenv&gt;","pos":[3527,3533],"source":"cfenv>"},{"pos":[3541,3645],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"See Also","pos":[3654,3662]},{"content":"Alphabetical Function Reference","pos":[3667,3698]},{"content":"nearbyint, nearbyintf, nearbyintl","pos":[3779,3812]},{"content":"rint, rintf, rintl","pos":[3890,3908]},{"content":"lrint, lrintf, lrintl, llrint, llrintf, llrintl","pos":[3970,4017]}],"content":"---\ntitle: \"fegetround, fesetround2 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"cpp\"\n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"fegetround\"\n  - \"fesetround\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-runtime-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"fegetround\"\n  - \"fesetround\"\n  - \"fenv/fegetround\"\n  - \"fenv/fesetround\"\ndev_langs: \n  - \"C\"\n  - \"C++\"\nhelpviewer_keywords: \n  - \"fegetround function\"\n  - \"fesetround function\"\nms.assetid: 596af00b-be2f-4f57-b2f5-460485f9ff0b\ncaps.latest.revision: 6\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# fegetround, fesetround\nGets or sets the current floating-point rounding mode.  \n  \n## Syntax  \n  \n```  \nint fegetround(void);  \n  \nint fesetround(  \n   int round_mode  \n);   \n```  \n  \n#### Parameters  \n `round_mode`  \n The rounding mode to set, as one of the floating-point rounding macros. If the value is not equal to one of the floating-point rounding macros, the rounding mode is not changed.  \n  \n## Return Value  \n On success, `fegetround` returns the rounding mode as one of the floating point rounding macro values. It returns a negative value if the current rounding mode can't be determined.  \n  \n On success, `fesetround` returns 0. Otherwise, a non-zero value is returned.  \n  \n## Remarks  \n Floating-point operations can use one of several rounding modes. These control which direction the results of floating-point operations are rounded toward when the results are stored. These are the names and behaviors of the floating-point rounding macros defined in \\<fenv.h>:  \n  \n|Macro|Description|  \n|-----------|-----------------|  \n|FE_DOWNWARD|Round towards negative infinity.|  \n|FE_TONEAREST|Round towards the nearest.|  \n|FE_TOWARDZERO|Round towards zero.|  \n|FE_UPWARD|Round towards positive infinity.|  \n  \n The default behavior of FE_TONEAREST is to round results midway between representable values toward the nearest value with an even (0) least significant bit.  \n  \n The current rounding mode affects these operations:  \n  \n-   String conversions.  \n  \n-   The results of floating-point arithmetic operators outside of constant expressions.  \n  \n-   The library rounding functions, such as `rint` and `nearbyint`.  \n  \n-   Return values from standard library mathematical functions.  \n  \n The current rounding mode does not affect these operations:  \n  \n-   The `trunc`, `ceil`, `floor`, and `lround` library functions.  \n  \n-   Floating-point to integer implicit casts and conversions, which always round towards zero.  \n  \n-   The results of floating-point arithmetic operators in constant expressions, which always round to the nearest value.  \n  \n To use these functions, you must turn off floating-point optimizations that could prevent access by using the `#pragma fenv_access(on)` directive prior to the call. For more information, see [fenv_access](../../preprocessor/fenv-access.md).  \n  \n## Requirements  \n  \n|Function|C header|C++ header|  \n|--------------|--------------|------------------|  \n|`fegetround`,                `fesetround`|\\<fenv.h>|\\<cfenv>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## See Also  \n [Alphabetical Function Reference](../../c-runtime-library/reference/crt-alphabetical-function-reference.md)   \n [nearbyint, nearbyintf, nearbyintl](../../c-runtime-library/reference/nearbyint-nearbyintf-nearbyintl1.md)   \n [rint, rintf, rintl](../../c-runtime-library/reference/rint-rintf-rintl.md)   \n [lrint, lrintf, lrintl, llrint, llrintf, llrintl](../../c-runtime-library/reference/lrint-lrintf-lrintl-llrint-llrintf-llrintl.md)"}