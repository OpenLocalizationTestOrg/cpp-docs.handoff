{"nodes":[{"pos":[12,41],"content":"thread Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"thread Class | Microsoft Docs","pos":[0,29]}]},{"content":"thread Class","pos":[561,573]},{"content":"Defines an object that's used to observe and manage a thread of execution within an application.","pos":[574,670]},{"content":"Syntax","pos":[679,685]},{"content":"Remarks","pos":[721,728]},{"content":"You can use a <ph id=\"ph1\">`thread`</ph> object to observe and manage a thread of execution within an application.","pos":[732,828],"source":"You can use a `thread` object to observe and manage a thread of execution within an application."},{"content":"A thread object that's created by using the default constructor is not associated with any thread of execution.","pos":[829,940]},{"content":"A thread object that's constructed by using a callable object creates a new thread of execution and calls the callable object in that thread.","pos":[941,1082]},{"content":"Thread objects can be moved but not copied.","pos":[1083,1126]},{"content":"Therefore, a thread of execution can be associated with only one thread object.","pos":[1127,1206]},{"content":"Every thread of execution has a unique identifier of type <ph id=\"ph1\">`thread::id`</ph>.","pos":[1213,1284],"source":"Every thread of execution has a unique identifier of type `thread::id`."},{"content":"The function <ph id=\"ph1\">`this_thread::get_id`</ph> returns the identifier of the calling thread.","pos":[1285,1365],"source":" The function `this_thread::get_id` returns the identifier of the calling thread."},{"content":"The member function <ph id=\"ph1\">`thread::get_id`</ph> returns the identifier of the thread that's managed by a thread object.","pos":[1366,1474],"source":" The member function `thread::get_id` returns the identifier of the thread that's managed by a thread object."},{"content":"For a default-constructed thread object, the <ph id=\"ph1\">`thread::get_id`</ph> method returns an object that has a value that's the same for all default-constructed thread objects and different from the value that's returned by <ph id=\"ph2\">`this_thread::get_id`</ph> for any thread of execution that could be joined at the time of the call.","pos":[1475,1781],"source":" For a default-constructed thread object, the `thread::get_id` method returns an object that has a value that's the same for all default-constructed thread objects and different from the value that's returned by `this_thread::get_id` for any thread of execution that could be joined at the time of the call."},{"content":"Members","pos":[1790,1797]},{"content":"Public Classes","pos":[1807,1821]},{"content":"Name","pos":[1828,1832]},{"content":"Description","pos":[1833,1844]},{"content":"thread::id Class","pos":[1883,1899]},{"content":"Uniquely identifies the associated thread.","pos":[1920,1962]},{"content":"Public Constructors","pos":[1973,1992]},{"content":"Name","pos":[1999,2003]},{"content":"Description","pos":[2004,2015]},{"content":"thread::thread Constructor","pos":[2054,2080]},{"pos":[2111,2140],"content":"Constructs a <ph id=\"ph1\">`thread`</ph> object.","source":"Constructs a `thread` object."},{"content":"Public Methods","pos":[2151,2165]},{"content":"Name","pos":[2172,2176]},{"content":"Description","pos":[2177,2188]},{"content":"thread::detach Method","pos":[2227,2248]},{"pos":[2274,2330],"content":"Detaches the associated thread from the <ph id=\"ph1\">`thread`</ph> object.","source":"Detaches the associated thread from the `thread` object."},{"content":"thread::get_id Method","pos":[2336,2357]},{"content":"Returns the unique identifier of the associated thread.","pos":[2383,2438]},{"content":"thread::hardware_concurrency Method","pos":[2444,2479]},{"content":"Static.","pos":[2519,2526]},{"content":"Returns an estimate of the number of hardware thread contexts.","pos":[2527,2589]},{"content":"thread::join Method","pos":[2595,2614]},{"content":"Blocks until the associated thread completes.","pos":[2638,2683]},{"content":"thread::joinable Method","pos":[2689,2712]},{"content":"Specifies whether the associated thread is joinable.","pos":[2740,2792]},{"content":"thread::native_handle Method","pos":[2798,2826]},{"content":"Returns the implementation-specific type that represents the thread handle.","pos":[2859,2934]},{"content":"thread::swap Method","pos":[2940,2959]},{"pos":[2983,3039],"content":"Swaps the object state with a specified <ph id=\"ph1\">`thread`</ph> object.","source":"Swaps the object state with a specified `thread` object."},{"content":"Public Operators","pos":[3050,3066]},{"content":"Name","pos":[3073,3077]},{"content":"Description","pos":[3078,3089]},{"content":"thread::operator=","pos":[3128,3145]},{"pos":[3169,3222],"content":"Associates a thread with the current <ph id=\"ph1\">`thread`</ph> object.","source":"Associates a thread with the current `thread` object."},{"content":"Requirements","pos":[3232,3244]},{"pos":[3248,3266],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> thread","source":"**Header:** thread"},{"pos":[3273,3291],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[3339,3360],"content":"thread::detach Method"},{"content":"Detaches the associated thread.","pos":[3364,3395]},{"content":"The operating system becomes responsible for releasing thread resources on termination.","pos":[3396,3483]},{"content":"Remarks","pos":[3521,3528]},{"pos":[3532,3642],"content":"After a call to <ph id=\"ph1\">`detach`</ph>, subsequent calls to <bpt id=\"p1\">[</bpt>get_id<ept id=\"p1\">](#thread__get_id_method)</ept> return <bpt id=\"p2\">[</bpt>id<ept id=\"p2\">](#thread__id_class)</ept>.","source":"After a call to `detach`, subsequent calls to [get_id](#thread__get_id_method) return [id](#thread__id_class)."},{"pos":[3649,3847],"content":"If the thread that's associated with the calling object is not joinable, the function throws a <bpt id=\"p1\">[</bpt>system_error<ept id=\"p1\">](../standard-library/system-error-class.md)</ept> that has an error code of <ph id=\"ph1\">`invalid_argument`</ph>.","source":"If the thread that's associated with the calling object is not joinable, the function throws a [system_error](../standard-library/system-error-class.md) that has an error code of `invalid_argument`."},{"pos":[3854,4003],"content":"If the thread that's associated with the calling object is invalid, the function throws a <ph id=\"ph1\">`system_error`</ph> that has an error code of <ph id=\"ph2\">`no_such_process`</ph>.","source":"If the thread that's associated with the calling object is invalid, the function throws a `system_error` that has an error code of `no_such_process`."},{"pos":[4051,4072],"content":"thread::get_id Method"},{"content":"Returns a unique identifier for the associated thread.","pos":[4076,4130]},{"content":"Return Value","pos":[4181,4193]},{"pos":[4197,4347],"content":"A <bpt id=\"p1\">[</bpt>thread::id<ept id=\"p1\">](#thread__id_class)</ept> object that uniquely identifies the associated thread, or <ph id=\"ph1\">`thread::id()`</ph> if no thread is associated with the object.","source":"A [thread::id](#thread__id_class) object that uniquely identifies the associated thread, or `thread::id()` if no thread is associated with the object."},{"pos":[4409,4444],"content":"thread::hardware_concurrency Method"},{"content":"Static method that returns an estimate of the number of hardware thread contexts.","pos":[4448,4529]},{"content":"Return Value","pos":[4605,4617]},{"content":"An estimate of the number of hardware thread contexts.","pos":[4621,4675]},{"content":"If the value cannot be computed or is not well defined, this method returns 0.","pos":[4676,4754]},{"pos":[4797,4813],"content":"thread::id Class"},{"content":"Provides a unique identifier for each thread of execution in the process.","pos":[4817,4890]},{"content":"Remarks","pos":[4954,4961]},{"pos":[4965,5086],"content":"The default constructor creates an object that does not compare equal to the <ph id=\"ph1\">`thread::id`</ph> object for any existing thread.","source":"The default constructor creates an object that does not compare equal to the `thread::id` object for any existing thread."},{"pos":[5093,5152],"content":"All default-constructed <ph id=\"ph1\">`thread::id`</ph> objects compare equal.","source":"All default-constructed `thread::id` objects compare equal."},{"pos":[5198,5217],"content":"thread::join Method"},{"content":"Blocks until the thread of execution that's associated with the calling object completes.","pos":[5221,5310]},{"content":"Remarks","pos":[5346,5353]},{"pos":[5357,5657],"content":"If the call succeeds, subsequent calls to <bpt id=\"p1\">[</bpt>get_id<ept id=\"p1\">](#thread__get_id_method)</ept> for the calling object return a default <bpt id=\"p2\">[</bpt>thread::id<ept id=\"p2\">](#thread__id_class)</ept> that does not compare equal to the <ph id=\"ph1\">`thread::id`</ph> of any existing thread; if the call does not succeed, the value that's returned by <ph id=\"ph2\">`get_id`</ph> is unchanged.","source":"If the call succeeds, subsequent calls to [get_id](#thread__get_id_method) for the calling object return a default [thread::id](#thread__id_class) that does not compare equal to the `thread::id` of any existing thread; if the call does not succeed, the value that's returned by `get_id` is unchanged."},{"pos":[5707,5730],"content":"thread::joinable Method"},{"pos":[5734,5788],"content":"Specifies whether the associated thread is <bpt id=\"p1\">*</bpt>joinable<ept id=\"p1\">*</ept>.","source":"Specifies whether the associated thread is *joinable*."},{"content":"Return Value","pos":[5843,5855]},{"pos":[5866,5925],"content":"if the associated thread is <bpt id=\"p1\">*</bpt>joinable<ept id=\"p1\">*</ept>; otherwise, <ph id=\"ph1\">`false`</ph>.","source":" if the associated thread is *joinable*; otherwise, `false`."},{"content":"Remarks","pos":[5935,5942]},{"pos":[5946,5998],"content":"A thread object is <bpt id=\"p1\">*</bpt>joinable<ept id=\"p1\">*</ept> if <ph id=\"ph1\">`get_id() != id()`</ph>.","source":"A thread object is *joinable* if `get_id() != id()`."},{"pos":[6053,6081],"content":"thread::native_handle Method"},{"content":"Returns the implementation-specific type that represents the thread handle.","pos":[6085,6160]},{"content":"The thread handle can be used in implementation-specific ways.","pos":[6161,6223]},{"content":"Return Value","pos":[6282,6294]},{"pos":[6319,6374],"content":"is defined as a Win32 <ph id=\"ph1\">`HANDLE`</ph> that's cast as <ph id=\"ph2\">`void *`</ph>.","source":" is defined as a Win32 `HANDLE` that's cast as `void *`."},{"pos":[6420,6437],"content":"thread::operator="},{"content":"Associates the thread of a specified object with the current object.","pos":[6441,6509]},{"content":"Parameters","pos":[6576,6586]},{"content":"A <ph id=\"ph1\">`thread`</ph> object.","pos":[6601,6619],"source":" A `thread` object."},{"content":"Return Value","pos":[6629,6641]},{"content":"Remarks","pos":[6662,6669]},{"content":"The method calls detach if the calling object is joinable.","pos":[6673,6731]},{"pos":[6738,6815],"content":"After the association is made, <ph id=\"ph1\">`Other`</ph> is set to a default-constructed state.","source":"After the association is made, `Other` is set to a default-constructed state."},{"pos":[6861,6880],"content":"thread::swap Method"},{"pos":[6884,6948],"content":"Swaps the object state with that of a specified <ph id=\"ph1\">`thread`</ph> object.","source":"Swaps the object state with that of a specified `thread` object."},{"content":"Parameters","pos":[7006,7016]},{"content":"A <ph id=\"ph1\">`thread`</ph> object.","pos":[7031,7049],"source":" A `thread` object."},{"pos":[7102,7128],"content":"thread::thread Constructor"},{"pos":[7132,7161],"content":"Constructs a <ph id=\"ph1\">`thread`</ph> object.","source":"Constructs a `thread` object."},{"content":"Parameters","pos":[7310,7320]},{"content":"An application-defined function to be executed by the thread.","pos":[7331,7392]},{"content":"A list of arguments to be passed to <ph id=\"ph1\">`F`</ph>.","pos":[7406,7446],"source":" A list of arguments to be passed to `F`."},{"content":"An existing <ph id=\"ph1\">`thread`</ph> object.","pos":[7464,7492],"source":" An existing `thread` object."},{"content":"Remarks","pos":[7502,7509]},{"content":"The first constructor constructs an object that's not associated with a thread of execution.","pos":[7513,7605]},{"content":"The value that's returned by a call to <ph id=\"ph1\">`get_id`</ph> for the constructed object is <ph id=\"ph2\">`thread::id()`</ph>.","pos":[7606,7699],"source":" The value that's returned by a call to `get_id` for the constructed object is `thread::id()`."},{"content":"The second constructor constructs an object that's associated with a new thread of execution and executes the pseudo-function <ph id=\"ph1\">`INVOKE`</ph> that's defined in <bpt id=\"p1\">[</bpt><ph id=\"ph2\">\\&lt;</ph>functional&gt;<ept id=\"p1\">](../standard-library/functional.md)</ept>.","pos":[7706,7910],"source":"The second constructor constructs an object that's associated with a new thread of execution and executes the pseudo-function `INVOKE` that's defined in [\\<functional>](../standard-library/functional.md)."},{"content":"If not enough resources are available to start a new thread, the function throws a <bpt id=\"p1\">[</bpt>system_error<ept id=\"p1\">](../standard-library/system-error-class.md)</ept> object that has an error code of <ph id=\"ph1\">`resource_unavailable_try_again`</ph>.","pos":[7911,8118],"source":" If not enough resources are available to start a new thread, the function throws a [system_error](../standard-library/system-error-class.md) object that has an error code of `resource_unavailable_try_again`."},{"content":"If the call to <ph id=\"ph1\">`F`</ph> terminates with an uncaught exception, <bpt id=\"p1\">[</bpt>terminate<ept id=\"p1\">](../standard-library/exception-functions.md#terminate)</ept> is called.","pos":[8119,8253],"source":" If the call to `F` terminates with an uncaught exception, [terminate](../standard-library/exception-functions.md#terminate) is called."},{"content":"The third constructor constructs an object that's associated with the thread that's associated with <ph id=\"ph1\">`Other`</ph>.","pos":[8260,8368],"source":"The third constructor constructs an object that's associated with the thread that's associated with `Other`."},{"content":"is then set to a default-constructed state.","pos":[8377,8420]},{"content":"See Also","pos":[8429,8437]},{"content":"Header Files Reference","pos":[8442,8464]},{"content":"thread&gt;","pos":[8531,8538],"source":"thread>"}],"content":"---\ntitle: \"thread Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"thread/std::thread\"\ndev_langs: \n  - \"C++\"\nms.assetid: df249bc7-ff81-4ff9-a6d6-5e3d9a8f56a1\ncaps.latest.revision: 16\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# thread Class\nDefines an object that's used to observe and manage a thread of execution within an application.  \n  \n## Syntax  \n  \n```\nclass thread;\n```  \n  \n## Remarks  \n You can use a `thread` object to observe and manage a thread of execution within an application. A thread object that's created by using the default constructor is not associated with any thread of execution. A thread object that's constructed by using a callable object creates a new thread of execution and calls the callable object in that thread. Thread objects can be moved but not copied. Therefore, a thread of execution can be associated with only one thread object.  \n  \n Every thread of execution has a unique identifier of type `thread::id`. The function `this_thread::get_id` returns the identifier of the calling thread. The member function `thread::get_id` returns the identifier of the thread that's managed by a thread object. For a default-constructed thread object, the `thread::get_id` method returns an object that has a value that's the same for all default-constructed thread objects and different from the value that's returned by `this_thread::get_id` for any thread of execution that could be joined at the time of the call.  \n  \n## Members  \n  \n### Public Classes  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[thread::id Class](#thread__id_class)|Uniquely identifies the associated thread.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[thread::thread Constructor](#thread__thread_constructor)|Constructs a `thread` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[thread::detach Method](#thread__detach_method)|Detaches the associated thread from the `thread` object.|  \n|[thread::get_id Method](#thread__get_id_method)|Returns the unique identifier of the associated thread.|  \n|[thread::hardware_concurrency Method](#thread__hardware_concurrency_method)|Static. Returns an estimate of the number of hardware thread contexts.|  \n|[thread::join Method](#thread__join_method)|Blocks until the associated thread completes.|  \n|[thread::joinable Method](#thread__joinable_method)|Specifies whether the associated thread is joinable.|  \n|[thread::native_handle Method](#thread__native_handle_method)|Returns the implementation-specific type that represents the thread handle.|  \n|[thread::swap Method](#thread__swap_method)|Swaps the object state with a specified `thread` object.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[thread::operator=](#thread__operator_eq)|Associates a thread with the current `thread` object.|  \n  \n## Requirements  \n **Header:** thread  \n  \n **Namespace:** std  \n  \n##  <a name=\"thread__detach_method\"></a>  thread::detach Method  \n Detaches the associated thread. The operating system becomes responsible for releasing thread resources on termination.  \n  \n```\nvoid detach();\n```  \n  \n### Remarks  \n After a call to `detach`, subsequent calls to [get_id](#thread__get_id_method) return [id](#thread__id_class).  \n  \n If the thread that's associated with the calling object is not joinable, the function throws a [system_error](../standard-library/system-error-class.md) that has an error code of `invalid_argument`.  \n  \n If the thread that's associated with the calling object is invalid, the function throws a `system_error` that has an error code of `no_such_process`.  \n  \n##  <a name=\"thread__get_id_method\"></a>  thread::get_id Method  \n Returns a unique identifier for the associated thread.  \n  \n```\nid get_id() const noexcept;\n```  \n  \n### Return Value  \n A [thread::id](#thread__id_class) object that uniquely identifies the associated thread, or `thread::id()` if no thread is associated with the object.  \n  \n##  <a name=\"thread__hardware_concurrency_method\"></a>  thread::hardware_concurrency Method  \n Static method that returns an estimate of the number of hardware thread contexts.  \n  \n```\nstatic unsigned int hardware_concurrency() noexcept;\n```  \n  \n### Return Value  \n An estimate of the number of hardware thread contexts. If the value cannot be computed or is not well defined, this method returns 0.  \n  \n##  <a name=\"thread__id_class\"></a>  thread::id Class  \n Provides a unique identifier for each thread of execution in the process.  \n  \n```\nclass thread::id {\n    id() noexcept;\n};\n```  \n  \n### Remarks  \n The default constructor creates an object that does not compare equal to the `thread::id` object for any existing thread.  \n  \n All default-constructed `thread::id` objects compare equal.  \n  \n##  <a name=\"thread__join_method\"></a>  thread::join Method  \n Blocks until the thread of execution that's associated with the calling object completes.  \n  \n```\nvoid join();\n```  \n  \n### Remarks  \n If the call succeeds, subsequent calls to [get_id](#thread__get_id_method) for the calling object return a default [thread::id](#thread__id_class) that does not compare equal to the `thread::id` of any existing thread; if the call does not succeed, the value that's returned by `get_id` is unchanged.  \n  \n##  <a name=\"thread__joinable_method\"></a>  thread::joinable Method  \n Specifies whether the associated thread is *joinable*.  \n  \n```\nbool joinable() const noexcept;\n```  \n  \n### Return Value  \n `true` if the associated thread is *joinable*; otherwise, `false`.  \n  \n### Remarks  \n A thread object is *joinable* if `get_id() != id()`.  \n  \n##  <a name=\"thread__native_handle_method\"></a>  thread::native_handle Method  \n Returns the implementation-specific type that represents the thread handle. The thread handle can be used in implementation-specific ways.  \n  \n```\nnative_handle_type native_handle();\n```  \n  \n### Return Value  \n `native_handle_type` is defined as a Win32 `HANDLE` that's cast as `void *`.  \n  \n##  <a name=\"thread__operator_eq\"></a>  thread::operator=  \n Associates the thread of a specified object with the current object.  \n  \n```\nthread& operator=(thread&& Other) noexcept;\n```  \n  \n### Parameters  \n `Other`  \n A `thread` object.  \n  \n### Return Value  \n `*this`  \n  \n### Remarks  \n The method calls detach if the calling object is joinable.  \n  \n After the association is made, `Other` is set to a default-constructed state.  \n  \n##  <a name=\"thread__swap_method\"></a>  thread::swap Method  \n Swaps the object state with that of a specified `thread` object.  \n  \n```\nvoid swap(thread& Other) noexcept;\n```  \n  \n### Parameters  \n `Other`  \n A `thread` object.  \n  \n##  <a name=\"thread__thread_constructor\"></a>  thread::thread Constructor  \n Constructs a `thread` object.  \n  \n```\nthread() noexcept;\ntemplate <class Fn, class... Args>\nexplicit thread(Fn&& F, Args&&... A);\n\nthread(thread&& Other) noexcept;\n```  \n  \n### Parameters  \n `F`  \n An application-defined function to be executed by the thread.  \n  \n `A`  \n A list of arguments to be passed to `F`.  \n  \n `Other`  \n An existing `thread` object.  \n  \n### Remarks  \n The first constructor constructs an object that's not associated with a thread of execution. The value that's returned by a call to `get_id` for the constructed object is `thread::id()`.  \n  \n The second constructor constructs an object that's associated with a new thread of execution and executes the pseudo-function `INVOKE` that's defined in [\\<functional>](../standard-library/functional.md). If not enough resources are available to start a new thread, the function throws a [system_error](../standard-library/system-error-class.md) object that has an error code of `resource_unavailable_try_again`. If the call to `F` terminates with an uncaught exception, [terminate](../standard-library/exception-functions.md#terminate) is called.  \n  \n The third constructor constructs an object that's associated with the thread that's associated with `Other`. `Other` is then set to a default-constructed state.  \n  \n## See Also  \n [Header Files Reference](../standard-library/cpp-standard-library-header-files.md)   \n [\\<thread>](../standard-library/thread.md)\n\n\n\n"}