{"nodes":[{"pos":[12,62],"content":"CDynamicStringAccessor::SetString | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CDynamicStringAccessor::SetString | Microsoft Docs","pos":[0,50]}]},{"content":"CDynamicStringAccessor::SetString","pos":[681,714]},{"content":"Sets the specified column data as a string.","pos":[715,758]},{"content":"Syntax","pos":[767,773]},{"content":"Parameters","pos":[1049,1059]},{"content":"[in] The column number.","pos":[1076,1099]},{"content":"Column numbers start with 1.","pos":[1100,1128]},{"content":"The special value of 0 refers to the bookmark column, if any.","pos":[1129,1190]},{"content":"[in] A pointer to a character string that contains the column name.","pos":[1214,1281]},{"content":"[in] A pointer to the string data to be written to the specified column.","pos":[1298,1370]},{"content":"Return Value","pos":[1379,1391]},{"content":"A pointer to the string value to which to set the specified column.","pos":[1395,1462]},{"content":"The value is of type <ph id=\"ph1\">`BaseType`</ph>, which will be <ph id=\"ph2\">`CHAR`</ph> or <ph id=\"ph3\">`WCHAR`</ph> depending on whether <ph id=\"ph4\">`_UNICODE`</ph> is defined or not.","pos":[1463,1578],"source":" The value is of type `BaseType`, which will be `CHAR` or `WCHAR` depending on whether `_UNICODE` is defined or not."},{"content":"Remarks","pos":[1587,1594]},{"content":"The second override form takes the column name as an ANSI string and the third override form takes the column name as a Unicode string.","pos":[1598,1733]},{"content":"If <ph id=\"ph1\">`_SECURE_ATL`</ph> is defined to have a nonzero value, a runtime assertion failure will be generated if the input <ph id=\"ph2\">`data`</ph> string is longer than the maximum allowable length of the referenced data column.","pos":[1740,1940],"source":"If `_SECURE_ATL` is defined to have a nonzero value, a runtime assertion failure will be generated if the input `data` string is longer than the maximum allowable length of the referenced data column."},{"content":"Otherwise, the input string will be truncated if it is longer than the maximum allowable length.","pos":[1941,2037]},{"content":"Requirements","pos":[2046,2058]},{"pos":[2062,2084],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atldbcli.h","source":"**Header:** atldbcli.h"},{"content":"See Also","pos":[2093,2101]},{"content":"CDynamicStringAccessor Class","pos":[2106,2134]}],"content":"---\ntitle: \"CDynamicStringAccessor::SetString | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"CDynamicStringAccessor::SetString\"\n  - \"CDynamicStringAccessor.SetString\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"SetString method\"\nms.assetid: 94846d8b-4c1b-47fe-acdc-1752981cee25\ncaps.latest.revision: 13\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CDynamicStringAccessor::SetString\nSets the specified column data as a string.  \n  \n## Syntax  \n  \n```  \nHRESULT SetString(  \n   DBORDINAL nColumn,  \n   BaseType* data  \n) throw( );  \nHRESULT SetString(  \n   const CHAR* pColumnName,  \n   BaseType* data  \n) throw( );  \nHRESULT SetString(  \n   const WCHAR* pColumnName,  \n   BaseType* data  \n) throw( );  \n```  \n  \n#### Parameters  \n `nColumn`  \n [in] The column number. Column numbers start with 1. The special value of 0 refers to the bookmark column, if any.  \n  \n `pColumnName`  \n [in] A pointer to a character string that contains the column name.  \n  \n `data`  \n [in] A pointer to the string data to be written to the specified column.  \n  \n## Return Value  \n A pointer to the string value to which to set the specified column. The value is of type `BaseType`, which will be `CHAR` or `WCHAR` depending on whether `_UNICODE` is defined or not.  \n  \n## Remarks  \n The second override form takes the column name as an ANSI string and the third override form takes the column name as a Unicode string.  \n  \n If `_SECURE_ATL` is defined to have a nonzero value, a runtime assertion failure will be generated if the input `data` string is longer than the maximum allowable length of the referenced data column. Otherwise, the input string will be truncated if it is longer than the maximum allowable length.  \n  \n## Requirements  \n **Header:** atldbcli.h  \n  \n## See Also  \n [CDynamicStringAccessor Class](../../data/oledb/cdynamicstringaccessor-class.md)"}