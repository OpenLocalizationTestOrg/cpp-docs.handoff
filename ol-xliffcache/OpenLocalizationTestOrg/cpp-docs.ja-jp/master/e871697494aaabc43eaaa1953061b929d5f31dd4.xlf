<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e871697494aaabc43eaaa1953061b929d5f31dd4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\using-cpp-library-headers.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9773dac9e0aeaae276974d761bcf691c1e11b467</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f89b83b32d51d288d2681e94588e974b95549371</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using C++ Library Headers | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using C++ Library Headers</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You include the contents of a standard header by naming it in an include directive.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can include the standard headers in any order, a standard header more than once, or two or more standard headers that define the same macro or the same type.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Do not include a standard header within a declaration.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Do not define macros that have the same names as keywords before you include a standard header.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A C++ library header includes any other C++ library headers it needs to define needed types.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>(Always include explicitly any C++ library headers needed in a translation unit, however, lest you guess wrong about its actual dependencies.) A Standard C header never includes another standard header.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A standard header declares or defines only the entities described for it in this document.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Every function in the library is declared in a standard header.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Unlike in Standard C, the standard header never provides a masking macro with the same name as the function that masks the function declaration and achieves the same effect.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information on masking macros, see <bpt id="p1">[</bpt>C++ Library Conventions<ept id="p1">](../standard-library/cpp-library-conventions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>All names other than <ph id="ph1">`operator delete`</ph> and <ph id="ph2">`operator new`</ph> in the C++ library headers are defined in the <ph id="ph3">`std`</ph> namespace, or in a namespace nested within the <ph id="ph4">`std`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You refer to the name <ph id="ph1">`cin`</ph>, for example, as <ph id="ph2">`std::cin`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Note, however, that macro names are not subject to namespace qualification, so you always write <ph id="ph1">`__STD_COMPLEX`</ph> without a namespace qualifier.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In some translation environments, including a C++ library header may hoist external names declared in the <ph id="ph1">`std`</ph> namespace into the global namespace as well, with individual <ph id="ph2">`using`</ph> declarations for each of the names.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Otherwise, the header does <bpt id="p1">*</bpt>not<ept id="p1">*</ept> introduce any library names into the current namespace.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The C++ Standard requires that the C Standard headers declare all external names in namespace <ph id="ph1">`std`</ph>, then hoist them into the global namespace with individual <ph id="ph2">`using`</ph> declarations for each of the names.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>But in some translation environments the C Standard headers include no namespace declarations, declaring all names directly in the global namespace.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Thus, the most portable way to deal with namespaces is to follow two rules:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To assuredly declare in namespace <ph id="ph1">`std`</ph> an external name that is traditionally declared in <ph id="ph2">\&lt;</ph>stdlib.h&gt;, for example, include the header <ph id="ph3">\&lt;</ph>cstdlib&gt;.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Know that the name might also be declared in the global namespace.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To assuredly declare in the global namespace an external name declared in <ph id="ph1">\&lt;</ph>stdlib.h&gt;, include the header <ph id="ph2">\&lt;</ph>stdlib.h&gt; directly.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Know that the name might also be declared in namespace <ph id="ph1">`std`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Thus, if you want to call <ph id="ph1">`std::abort`</ph> to cause abnormal termination, you should include <ph id="ph2">\&lt;</ph>cstdlib&gt;.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you want to call <ph id="ph1">`abort`</ph>, you should include <ph id="ph2">\&lt;</ph>stdlib.h&gt;.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Alternatively, you can write the declaration:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>which brings all library names into the current namespace.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If you write this declaration immediately after all include directives, you hoist the names into the global namespace.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can subsequently ignore namespace considerations in the remainder of the translation unit.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You also avoid most differences across different translation environments.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Unless specifically indicated otherwise, you may not define names in the <ph id="ph1">`std`</ph> namespace, or in a namespace nested within the <ph id="ph2">`std`</ph> namespace, within your program.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>STL Overview</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>