{"nodes":[{"pos":[12,83],"content":"3.2.4 omp_unset_lock and omp_unset_nest_lock Functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"3.2.4 omp_unset_lock and omp_unset_nest_lock Functions | Microsoft Docs","pos":[0,71]}]},{"content":"3.2.4 omp_unset_lock and omp_unset_nest_lock Functions","pos":[563,617]},{"content":"These functions provide the means of releasing ownership of a lock.","pos":[618,685]},{"content":"The format is as follows:","pos":[686,711]},{"content":"The argument to each of these functions must point to an initialized lock variable owned by the thread executing the function.","pos":[844,970]},{"content":"The behavior is undefined if the thread does not own that lock.","pos":[971,1034]},{"pos":[1041,1160],"content":"For a simple lock, the <ph id=\"ph1\">`omp_unset_lock`</ph> function releases the thread executing the function from ownership of the lock.","source":"For a simple lock, the `omp_unset_lock` function releases the thread executing the function from ownership of the lock."},{"pos":[1167,1358],"content":"For a nestable lock, the <ph id=\"ph1\">`omp_unset_nest_lock`</ph> function decrements the nesting count, and releases the thread executing the function from ownership of the lock if the resulting count is zero.","source":"For a nestable lock, the `omp_unset_nest_lock` function decrements the nesting count, and releases the thread executing the function from ownership of the lock if the resulting count is zero."}],"content":"---\ntitle: \"3.2.4 omp_unset_lock and omp_unset_nest_lock Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: 5357e43e-a7c0-41d7-b529-3f7d15da8b11\ncaps.latest.revision: 6\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# 3.2.4 omp_unset_lock and omp_unset_nest_lock Functions\nThese functions provide the means of releasing ownership of a lock. The format is as follows:  \n  \n```  \n#include <omp.h>  \nvoid omp_unset_lock(omp_lock_t *lock);  \nvoid omp_unset_nest_lock(omp_nest_lock_t *lock);  \n```  \n  \n The argument to each of these functions must point to an initialized lock variable owned by the thread executing the function. The behavior is undefined if the thread does not own that lock.  \n  \n For a simple lock, the `omp_unset_lock` function releases the thread executing the function from ownership of the lock.  \n  \n For a nestable lock, the `omp_unset_nest_lock` function decrements the nesting count, and releases the thread executing the function from ownership of the lock if the resulting count is zero."}