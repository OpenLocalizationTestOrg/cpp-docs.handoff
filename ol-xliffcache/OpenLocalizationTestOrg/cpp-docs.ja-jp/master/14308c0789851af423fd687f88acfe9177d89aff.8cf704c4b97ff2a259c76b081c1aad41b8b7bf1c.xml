{"nodes":[{"pos":[12,53],"content":"&lt;vector&gt; operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>vector<ph id=\"ph2\">&amp;gt;</ph> operators | Microsoft Docs","pos":[0,41],"source":"&lt;vector&gt; operators | Microsoft Docs"}]},{"pos":[256,280],"content":"&lt;vector&gt; operators","linkify":"&lt;vector&gt; operators","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>vector<ph id=\"ph2\">&amp;gt;</ph> operators","pos":[0,24],"source":"&lt;vector&gt; operators"}]},{"pos":[299,326],"content":"<bpt id=\"p1\">[</bpt>operator!=<ept id=\"p1\">](#operator_neq)</ept>","source":"[operator!=](#operator_neq)"},{"pos":[327,356],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;gt;</ph><ept id=\"p1\">](#operator_gt_)</ept>","source":"[operator&gt;](#operator_gt_)"},{"pos":[357,390],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">=</ph><ept id=\"p1\">](#operator_gt__eq)</ept>","source":"[operator&gt;=](#operator_gt__eq)"},{"pos":[395,424],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;lt;</ph><ept id=\"p1\">](#operator_lt_)</ept>","source":"[operator&lt;](#operator_lt_)"},{"pos":[425,458],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">=</ph><ept id=\"p1\">](#operator_lt__eq)</ept>","source":"[operator&lt;=](#operator_lt__eq)"},{"pos":[459,488],"content":"<bpt id=\"p1\">[</bpt>operator==<ept id=\"p1\">](#operator_eq_eq)</ept>","source":"[operator==](#operator_eq_eq)"},{"pos":[499,538],"content":"<bpt id=\"p1\">&lt;a name=\"operator_neq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator!=","linkify":"<a name=\"operator_neq\"></a>  operator!=","source":"<a name=\"operator_neq\"></a>  operator!="},{"content":"Tests if the object on the left side of the operator is not equal to the object on the right side.","pos":[542,640]},{"pos":[757,767],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <bpt id=\"p1\">**</bpt>vector<ept id=\"p1\">**</ept>.","pos":[782,811],"source":" An object of type **vector**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>vector<ept id=\"p1\">**</ept>.","pos":[830,859],"source":" An object of type **vector**."},{"pos":[869,881],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[885,959],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the vectors are not equal; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if the vectors are equal.","source":"**true** if the vectors are not equal; **false** if the vectors are equal."},{"pos":[969,976],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Two vectors are equal if they have the same number of elements and their respective elements have the same values.","pos":[980,1094]},{"content":"Otherwise, they are unequal.","pos":[1095,1123]},{"pos":[1133,1140],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1553,1594],"content":"<bpt id=\"p1\">&lt;a name=\"operator_lt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;lt;</ph>","linkify":"<a name=\"operator_lt_\"></a>  operator&lt;","source":"<a name=\"operator_lt_\"></a>  operator&lt;"},{"content":"Tests if the object on the left side of the operator is less than the object on the right side.","pos":[1598,1693]},{"pos":[1809,1819],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <bpt id=\"p1\">**</bpt>vector<ept id=\"p1\">**</ept>.","pos":[1834,1863],"source":" An object of type **vector**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>vector<ept id=\"p1\">**</ept>.","pos":[1882,1911],"source":" An object of type **vector**."},{"pos":[1921,1933],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1937,2072],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the vector on the left side of the operator is less than the vector on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the vector on the left side of the operator is less than the vector on the right side of the operator; otherwise **false**."},{"pos":[2082,2089],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2626,2671],"content":"<bpt id=\"p1\">&lt;a name=\"operator_lt__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">=</ph>","linkify":"<a name=\"operator_lt__eq\"></a>  operator&lt;=","source":"<a name=\"operator_lt__eq\"></a>  operator&lt;="},{"content":"Tests if the object on the left side of the operator is less than or equal to the object on the right side.","pos":[2675,2782]},{"pos":[2899,2909],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <bpt id=\"p1\">**</bpt>vector<ept id=\"p1\">**</ept>.","pos":[2924,2953],"source":" An object of type **vector**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>vector<ept id=\"p1\">**</ept>.","pos":[2972,3001],"source":" An object of type **vector**."},{"pos":[3011,3023],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3027,3174],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the vector on the left side of the operator is less than or equal to the vector on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the vector on the left side of the operator is less than or equal to the vector on the right side of the operator; otherwise **false**."},{"pos":[3184,3191],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3752,3793],"content":"<bpt id=\"p1\">&lt;a name=\"operator_eq_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator==","linkify":"<a name=\"operator_eq_eq\"></a>  operator==","source":"<a name=\"operator_eq_eq\"></a>  operator=="},{"content":"Tests if the object on the left side of the operator is equal to the object on the right side.","pos":[3797,3891]},{"pos":[4008,4018],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <bpt id=\"p1\">**</bpt>vector<ept id=\"p1\">**</ept>.","pos":[4033,4062],"source":" An object of type **vector**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>vector<ept id=\"p1\">**</ept>.","pos":[4081,4110],"source":" An object of type **vector**."},{"pos":[4120,4132],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4136,4270],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the vector on the left side of the operator is equal to the vector on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the vector on the left side of the operator is equal to the vector on the right side of the operator; otherwise **false**."},{"pos":[4280,4287],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Two vectors are equal if they have the same number of elements and their respective elements have the same values.","pos":[4291,4405]},{"content":"Otherwise, they are unequal.","pos":[4406,4434]},{"pos":[4444,4451],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4857,4898],"content":"<bpt id=\"p1\">&lt;a name=\"operator_gt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;gt;</ph>","linkify":"<a name=\"operator_gt_\"></a>  operator&gt;","source":"<a name=\"operator_gt_\"></a>  operator&gt;"},{"content":"Tests if the object on the left side of the operator is greater than the object on the right side.","pos":[4902,5000]},{"pos":[5116,5126],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <bpt id=\"p1\">**</bpt>vector<ept id=\"p1\">**</ept>.","pos":[5141,5170],"source":" An object of type **vector**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>vector<ept id=\"p1\">**</ept>.","pos":[5189,5218],"source":" An object of type **vector**."},{"pos":[5228,5240],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5244,5382],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the vector on the left side of the operator is greater than the vector on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the vector on the left side of the operator is greater than the vector on the right side of the operator; otherwise **false**."},{"pos":[5392,5399],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5969,6014],"content":"<bpt id=\"p1\">&lt;a name=\"operator_gt__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">=</ph>","linkify":"<a name=\"operator_gt__eq\"></a>  operator&gt;=","source":"<a name=\"operator_gt__eq\"></a>  operator&gt;="},{"content":"Tests if the object on the left side of the operator is greater than or equal to the object on the right side.","pos":[6018,6128]},{"pos":[6245,6255],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <bpt id=\"p1\">**</bpt>vector<ept id=\"p1\">**</ept>.","pos":[6270,6299],"source":" An object of type **vector**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>vector<ept id=\"p1\">**</ept>.","pos":[6318,6347],"source":" An object of type **vector**."},{"pos":[6357,6369],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6373,6521],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the vector on the left side of the operator is greater than or equal to the vector on the right side of the vector; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the vector on the left side of the operator is greater than or equal to the vector on the right side of the vector; otherwise **false**."},{"pos":[6531,6538],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7127,7135],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[7139,7181],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>vector&gt;<ept id=\"p1\">](../standard-library/vector.md)</ept>","source":"[\\<vector>](../standard-library/vector.md)"}],"content":"---\ntitle: \"&lt;vector&gt; operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 1d14f312-6f59-4ec7-88ae-95f89a558823\ncaps.latest.revision: 13\nmanager: \"ghogen\"\n---\n# &lt;vector&gt; operators\n||||  \n|-|-|-|  \n|[operator!=](#operator_neq)|[operator&gt;](#operator_gt_)|[operator&gt;=](#operator_gt__eq)|  \n|[operator&lt;](#operator_lt_)|[operator&lt;=](#operator_lt__eq)|[operator==](#operator_eq_eq)|  \n  \n##  <a name=\"operator_neq\"></a>  operator!=  \n Tests if the object on the left side of the operator is not equal to the object on the right side.  \n  \n```  \nbool operator!=(const vector<Type, Allocator>& left, const vector<Type, Allocator>& right);\n```  \n  \n### Parameters  \n ` left`  \n An object of type **vector**.  \n  \n ` right`  \n An object of type **vector**.  \n  \n### Return Value  \n **true** if the vectors are not equal; **false** if the vectors are equal.  \n  \n### Remarks  \n Two vectors are equal if they have the same number of elements and their respective elements have the same values. Otherwise, they are unequal.  \n  \n### Example  \n  \n```cpp  \n// vector_op_ne.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )   \n{  \n   using namespace std;   \n  \n   vector <int> v1, v2;  \n   v1.push_back( 1 );  \n     v2.push_back( 2 );  \n  \n   if ( v1 != v2 )  \n      cout << \"Vectors not equal.\" << endl;  \n   else  \n      cout << \"Vectors equal.\" << endl;  \n}  \n```  \n  \n```Output  \nVectors not equal.  \n```  \n  \n##  <a name=\"operator_lt_\"></a>  operator&lt;  \n Tests if the object on the left side of the operator is less than the object on the right side.  \n  \n```  \nbool operator<(const vector<Type, Allocator>& left, const vector<Type, Allocator>& right);\n```  \n  \n### Parameters  \n ` left`  \n An object of type **vector**.  \n  \n ` right`  \n An object of type **vector**.  \n  \n### Return Value  \n **true** if the vector on the left side of the operator is less than the vector on the right side of the operator; otherwise **false**.  \n  \n### Example  \n  \n```cpp  \n// vector_op_lt.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;   \n  \n   vector <int> v1, v2;  \n   v1.push_back( 1 );  \n   v1.push_back( 2 );  \n   v1.push_back( 4 );  \n  \n   v2.push_back( 1 );  \n   v2.push_back( 3 );  \n  \n   if ( v1 < v2 )  \n      cout << \"Vector v1 is less than vector v2.\" << endl;  \n   else  \n      cout << \"Vector v1 is not less than vector v2.\" << endl;  \n}  \n```  \n  \n```Output  \nVector v1 is less than vector v2.  \n```  \n  \n##  <a name=\"operator_lt__eq\"></a>  operator&lt;=  \n Tests if the object on the left side of the operator is less than or equal to the object on the right side.  \n  \n```  \nbool operator<=(const vector<Type, Allocator>& left, const vector<Type, Allocator>& right);\n```  \n  \n### Parameters  \n ` left`  \n An object of type **vector**.  \n  \n ` right`  \n An object of type **vector**.  \n  \n### Return Value  \n **true** if the vector on the left side of the operator is less than or equal to the vector on the right side of the operator; otherwise **false**.  \n  \n### Example  \n  \n```cpp  \n// vector_op_le.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;   \n  \n   vector <int> v1, v2;  \n   v1.push_back( 1 );  \n   v1.push_back( 2 );  \n   v1.push_back( 4 );  \n  \n   v2.push_back( 1 );  \n   v2.push_back( 3 );  \n  \n   if ( v1 <= v2 )  \n      cout << \"Vector v1 is less than or equal to vector v2.\" << endl;  \n   else  \n      cout << \"Vector v1 is greater than vector v2.\" << endl;  \n}  \n```  \n  \n```Output  \nVector v1 is less than or equal to vector v2.  \n```  \n  \n##  <a name=\"operator_eq_eq\"></a>  operator==  \n Tests if the object on the left side of the operator is equal to the object on the right side.  \n  \n```  \nbool operator==(const vector<Type, Allocator>& left, const vector<Type, Allocator>& right);\n```  \n  \n### Parameters  \n ` left`  \n An object of type **vector**.  \n  \n ` right`  \n An object of type **vector**.  \n  \n### Return Value  \n **true** if the vector on the left side of the operator is equal to the vector on the right side of the operator; otherwise **false**.  \n  \n### Remarks  \n Two vectors are equal if they have the same number of elements and their respective elements have the same values. Otherwise, they are unequal.  \n  \n### Example  \n  \n```cpp  \n// vector_op_eq.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;   \n  \n   vector <int> v1, v2;  \n   v1.push_back( 1 );  \n   v2.push_back( 1 );  \n  \n   if ( v1 == v2 )  \n      cout << \"Vectors equal.\" << endl;  \n   else  \n      cout << \"Vectors not equal.\" << endl;  \n}  \n```  \n  \n```Output  \nVectors equal.  \n```  \n  \n##  <a name=\"operator_gt_\"></a>  operator&gt;  \n Tests if the object on the left side of the operator is greater than the object on the right side.  \n  \n```  \nbool operator>(const vector<Type, Allocator>& left, const vector<Type, Allocator>& right);\n```  \n  \n### Parameters  \n ` left`  \n An object of type **vector**.  \n  \n ` right`  \n An object of type **vector**.  \n  \n### Return Value  \n **true** if the vector on the left side of the operator is greater than the vector on the right side of the operator; otherwise **false**.  \n  \n### Example  \n  \n```cpp  \n// vector_op_gt.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;   \n  \n   vector <int> v1, v2;  \n   v1.push_back( 1 );  \n   v1.push_back( 3 );  \n   v1.push_back( 1 );  \n  \n   v2.push_back( 1 );  \n   v2.push_back( 2 );  \n   v2.push_back( 2 );  \n  \n   if ( v1 > v2 )  \n      cout << \"Vector v1 is greater than vector v2.\" << endl;  \n   else  \n      cout << \"Vector v1 is not greater than vector v2.\" << endl;  \n}  \n```  \n  \n```Output  \nVector v1 is greater than vector v2.  \n```  \n  \n##  <a name=\"operator_gt__eq\"></a>  operator&gt;=  \n Tests if the object on the left side of the operator is greater than or equal to the object on the right side.  \n  \n```  \nbool operator>=(const vector<Type, Allocator>& left, const vector<Type, Allocator>& right);\n```  \n  \n### Parameters  \n ` left`  \n An object of type **vector**.  \n  \n ` right`  \n An object of type **vector**.  \n  \n### Return Value  \n **true** if the vector on the left side of the operator is greater than or equal to the vector on the right side of the vector; otherwise **false**.  \n  \n### Example  \n  \n```cpp  \n// vector_op_ge.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;   \n  \n   vector <int> v1, v2;  \n   v1.push_back( 1 );  \n   v1.push_back( 3 );  \n   v1.push_back( 1 );  \n  \n     v2.push_back( 1 );  \n   v2.push_back( 2 );  \n   v2.push_back( 2 );  \n  \n   if ( v1 >= v2 )  \n      cout << \"Vector v1 is greater than or equal to vector v2.\" << endl;  \n   else  \n      cout << \"Vector v1 is less than vector v2.\" << endl;  \n}  \n```  \n  \n```Output  \nVector v1 is greater than or equal to vector v2.  \n```  \n  \n## See Also  \n [\\<vector>](../standard-library/vector.md)\n\n"}