{"nodes":[{"pos":[12,55],"content":"Mutable Data Members (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Mutable Data Members (C++) | Microsoft Docs","pos":[0,43]}]},{"content":"Mutable Data Members (C++)","pos":[642,668]},{"content":"This keyword can only be applied to non-static and non-const data members of a class.","pos":[669,754]},{"content":"If a data member is declared <ph id=\"ph1\">`mutable`</ph>, then it is legal to assign a value to this data member from a <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> member function.","pos":[755,883],"source":" If a data member is declared `mutable`, then it is legal to assign a value to this data member from a **const** member function."},{"content":"Syntax","pos":[892,898]},{"content":"Remarks","pos":[964,971]},{"pos":[975,1185],"content":"For example, the following code will compile without error because <ph id=\"ph1\">`m_accessCount`</ph> has been declared to be <ph id=\"ph2\">`mutable`</ph>, and therefore can be modified by <ph id=\"ph3\">`GetFlag`</ph> even though <ph id=\"ph4\">`GetFlag`</ph> is a const member function.","source":"For example, the following code will compile without error because `m_accessCount` has been declared to be `mutable`, and therefore can be modified by `GetFlag` even though `GetFlag` is a const member function."},{"content":"See Also","pos":[1428,1436]},{"content":"Keywords","pos":[1441,1449]}],"content":"---\ntitle: \"Mutable Data Members (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"mutable_cpp\"\n  - \"mutable\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"mutable keyword [C++]\"\nms.assetid: ebe89746-3d36-43a8-8d69-f426af23f551\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Mutable Data Members (C++)\nThis keyword can only be applied to non-static and non-const data members of a class. If a data member is declared `mutable`, then it is legal to assign a value to this data member from a **const** member function.  \n  \n## Syntax  \n  \n```  \n  \nmutable member-variable-declaration;  \n```  \n  \n## Remarks  \n For example, the following code will compile without error because `m_accessCount` has been declared to be `mutable`, and therefore can be modified by `GetFlag` even though `GetFlag` is a const member function.  \n  \n```  \n// mutable.cpp  \nclass X  \n{  \npublic:  \n   bool GetFlag() const  \n   {  \n      m_accessCount++;  \n      return m_flag;  \n   }  \nprivate:  \n   bool m_flag;  \n   mutable int m_accessCount;  \n};  \n  \nint main()  \n{  \n}  \n```  \n  \n## See Also  \n [Keywords](../cpp/keywords-cpp.md)"}