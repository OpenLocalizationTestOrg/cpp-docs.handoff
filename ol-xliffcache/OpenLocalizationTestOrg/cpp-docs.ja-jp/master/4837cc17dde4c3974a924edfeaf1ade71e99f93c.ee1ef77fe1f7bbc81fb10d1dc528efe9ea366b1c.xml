{"nodes":[{"pos":[12,88],"content":"Initializing classes and structs without constructors (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Initializing classes and structs without constructors (C++) | Microsoft Docs","pos":[0,76]}]},{"content":"Initializing classes and structs without constructors (C++)","pos":[579,638]},{"content":"It is not always necessary to define a constructor for a class, especially ones that are relatively simple.","pos":[639,746]},{"content":"Users can initialize objects of a class or struct by using uniform initialization, as shown in the following example:","pos":[747,864]},{"content":"Note that when a class or struct has no constructor, you provide the list elements in the order that the members are declared in the class.","pos":[1863,2002]},{"content":"If the class has a constructor, provide the elements in the order of the parameters.","pos":[2003,2087]},{"content":"See Also","pos":[2096,2104]},{"content":"Classes and Structs","pos":[2109,2128]},{"content":"Constructors","pos":[2170,2182]}],"content":"---\ntitle: \"Initializing classes and structs without constructors (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nms.assetid: 3e55c3d6-1c6b-4084-b9e5-221b151402f4\ncaps.latest.revision: 3\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Initializing classes and structs without constructors (C++)\nIt is not always necessary to define a constructor for a class, especially ones that are relatively simple. Users can initialize objects of a class or struct by using uniform initialization, as shown in the following example:  \n  \n```  \n#include \"stdafx.h\"  \n#include <Windows.h>  \n  \n// No constructor  \nstruct TempData  \n{  \n    int StationId;  \n    time_t time;  \n    double current;  \n    double maxTemp;  \n    double minTemp;  \n};  \n  \n// Has a constructor  \nstruct TempData2  \n{  \n    TempData2(double minimum, double maximum, double cur, int id, time_t t) :  \n       minTemp(minimum), maxTemp(maximum), current(cur), stationId(id), time(t) {}  \n    int stationId;  \n    time_t time;  \n    double current;  \n    double maxTemp;  \n    double minTemp;  \n};  \n  \nint main()  \n{  \n    // Member initialization (in order of declaration):  \n    TempData td{ 45978, GetCurrentTime(), 28.9, 37.0, 16.7 };  \n  \n    // Default initialization = {0,0,0,0,0}  \n    TempData td_default{};  \n  \n    //Error C4700 uninitialized local variable  \n    TempData td_noInit;  \n  \n    // Member declaration (in order of ctor parameters)  \n    TempData2 td2{ 16.7, 37.0, 28.9, 45978, GetCurrentTime() };  \n  \n    return 0;  \n}  \n  \n```  \n  \n Note that when a class or struct has no constructor, you provide the list elements in the order that the members are declared in the class. If the class has a constructor, provide the elements in the order of the parameters.  \n  \n## See Also  \n [Classes and Structs](../cpp/classes-and-structs-cpp.md)   \n [Constructors](../cpp/constructors-cpp.md)"}