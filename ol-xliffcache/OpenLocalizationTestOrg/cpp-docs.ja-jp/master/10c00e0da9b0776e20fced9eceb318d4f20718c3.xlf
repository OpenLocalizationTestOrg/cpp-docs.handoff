<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">10c00e0da9b0776e20fced9eceb318d4f20718c3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\adding-an-event-atl-tutorial-part-5.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">761d9b09b53859e05e0f853ced3d21fd229a75f4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8cb7be86a7dbcc036dd7fa1bab7f2751c1c3d04b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Adding an Event (ATL Tutorial, Part 5) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Adding an Event (ATL Tutorial, Part 5)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In this step, you will add a <ph id="ph1">`ClickIn`</ph> and a <ph id="ph2">`ClickOut`</ph> event to your ATL control.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You will fire the <ph id="ph1">`ClickIn`</ph> event if the user clicks within the polygon and fire <ph id="ph2">`ClickOut`</ph> if the user clicks outside.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The tasks to add an event are as follows:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Adding the <ph id="ph1">`ClickIn`</ph> and <ph id="ph2">`ClickOut`</ph> methods</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Generating the Type Library</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Implementing the Connection Point Interfaces</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Adding the ClickIn and ClickOut Methods</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When you created the ATL control in step 2, you selected the <bpt id="p1">**</bpt>Connection points<ept id="p1">**</ept> check box.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This created the <ph id="ph1">`_IPolyCtlEvents`</ph> interface in the Polygon.idl file.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Note that the interface name starts with an underscore.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This is a convention to indicate that the interface is an internal interface.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Thus, programs that allow you to browse COM objects can choose not to display the interface to the user.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Also note that selecting <bpt id="p1">**</bpt>Connection points<ept id="p1">**</ept> added the following line in the Polygon.idl file to indicate that <ph id="ph1">`_IPolyCtlEvents`</ph> is the default source interface:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The source attribute indicates that the control is the source of the notifications, so it will call this interface on the container.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Now add the <ph id="ph1">`ClickIn`</ph> and <ph id="ph2">`ClickOut`</ph> methods to the <ph id="ph3">`_IPolyCtlEvents`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To add the ClickIn and ClickOut methods</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In Class View, expand Polygon and PolygonLib to display _IPolyCtlEvents.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Right-click _IPolyCtlEvents.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>On the shortcut menu, click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>Add Method<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Select a <bpt id="p1">**</bpt>Return Type<ept id="p1">**</ept> of <ph id="ph1">`void`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Enter <ph id="ph1">`ClickIn`</ph> in the <bpt id="p1">**</bpt>Method name<ept id="p1">**</ept> box.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Under <bpt id="p1">**</bpt>Parameter attributes<ept id="p1">**</ept>, select the <bpt id="p2">**</bpt>in<ept id="p2">**</ept> box.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Select a <bpt id="p1">**</bpt>Parameter type<ept id="p1">**</ept> of <ph id="ph1">`LONG`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`x`</ph> as the <bpt id="p1">**</bpt>Parameter name<ept id="p1">**</ept>, and click <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Repeat steps 5 through 7, this time for a <bpt id="p1">**</bpt>Parameter name<ept id="p1">**</ept> of <ph id="ph1">`y`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Next<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`method ClickIn`</ph> as the <bpt id="p1">**</bpt>helpstring<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Finish<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Repeat the steps above to define a <ph id="ph1">`ClickOut`</ph> method with the same <ph id="ph2">`LONG`</ph> parameters <ph id="ph3">`x`</ph> and <ph id="ph4">`y`</ph>, the same <bpt id="p1">**</bpt>Parameter attributes<ept id="p1">**</ept> and the same <ph id="ph5">`void`</ph> return type.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Check the Polygon.idl file to see that the code was added to the <ph id="ph1">`_IPolyCtlEvents`</ph> dispinterface.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_IPolyCtlEvents`</ph> dispinterface in your Polygon.idl file should now look like this:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#56</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ClickIn`</ph> and <ph id="ph2">`ClickOut`</ph> methods take the x and y coordinates of the clicked point as parameters.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Generating the Type Library</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Generate the type library at this point, because the Connection Point Wizard will use it to obtain the information it needs to construct a connection point interface and a connection point container interface for your control.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To generate the type library</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Rebuild your project.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Right-click the Polygon.idl file in Solution Explorer and click <bpt id="p1">**</bpt>Compile<ept id="p1">**</ept> on the shortcut menu.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This will create the Polygon.tlb file, which is your type library.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The Polygon.tlb file is not visible from Solution Explorer, because it is a binary file and cannot be viewed or edited directly.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Implementing the Connection Point Interfaces</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Implement a connection point interface and a connection point container interface for your control.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In COM, events are implemented through the mechanism of connection points.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To receive events from a COM object, a container establishes an advisory connection to the connection point that the COM object implements.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Because a COM object can have multiple connection points, the COM object also implements a connection point container interface.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Through this interface, the container can determine which connection points are supported.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The interface that implements a connection point is called <ph id="ph1">`IConnectionPoint`</ph>, and the interface that implements a connection point container is called <ph id="ph2">`IConnectionPointContainer`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To help implement <ph id="ph1">`IConnectionPoint`</ph>, you will use the Implement Connection Point Wizard.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This wizard generates the <ph id="ph1">`IConnectionPoint`</ph> interface by reading your type library and implementing a function for each event that can be fired.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To use the Implement Connection Point Wizard</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In Class View, right-click your control's implementation class <ph id="ph1">`CPolyCtl`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>On the shortcut menu, click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>Add Connection Point<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Select <ph id="ph1">`_IPolyCtlEvents`</ph> from the <bpt id="p1">**</bpt>Source Interfaces<ept id="p1">**</ept> list and double-click it to add it to the <bpt id="p2">**</bpt>Implement connection points<ept id="p2">**</ept> column.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Finish<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A proxy class for the connection point will be generated, in this case,  <ph id="ph1">`CProxy_IPolyCtlEvents`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If you look at the generated _IPolyCtlEvents_CP.h file in Solution Explorer, you will see that it has a class called <ph id="ph1">`CProxy_IPolyCtlEvents`</ph> that derives from <ph id="ph2">`IConnectionPointImpl`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>_IPolyCtlEvents_CP.h also defines the two methods <ph id="ph1">`Fire_ClickIn`</ph> and <ph id="ph2">`Fire_ClickOut`</ph>, which take the two coordinate parameters.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You call these methods when you want to fire an event from your control.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The wizard also added <ph id="ph1">`CProxy_PolyEvents`</ph> and <ph id="ph2">`IConnectionPointContainerImpl`</ph> to your control's multiple inheritance list.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The wizard also exposed <ph id="ph1">`IConnectionPointContainer`</ph> for you by adding appropriate entries to the COM map.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You are finished implementing the code to support events.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Now, add some code to fire the events at the appropriate moment.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Remember, you are going to fire a <ph id="ph1">`ClickIn`</ph> or <ph id="ph2">`ClickOut`</ph> event when the user clicks the left mouse button in the control.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>To find out when the user clicks the button, add a handler for the <ph id="ph1">`WM_LBUTTONDOWN`</ph> message.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>To add a handler for the WM_LBUTTONDOWN message</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In Class View, right-click the CPolyCtl class and click <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> on the shortcut menu.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> window, click the <bpt id="p2">**</bpt>Messages<ept id="p2">**</ept> icon and then click <ph id="ph1">`WM_LBUTTONDOWN`</ph> from the list on the left.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>From the drop-down list that appears, click <bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>Add&gt; OnLButtonDown<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OnLButtonDown`</ph> handler declaration will be added to PolyCtl.h, and the handler implementation will be added to PolyCtl.cpp.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Next, modify the handler.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>To modify the OnLButtonDown method</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Change the code which comprises the <ph id="ph1">`OnLButtonDown`</ph> method in PolyCtl.cpp (deleting any code placed by the wizard) so that it looks like this:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#57</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This code makes use of the points calculated in the <ph id="ph1">`OnDraw`</ph> function to create a region that detects the user's mouse clicks with the call to <ph id="ph2">`PtInRegion`</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`uMsg`</ph> parameter is the ID of the Windows message being handled.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This allows you to have one function that handles a range of messages.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`wParam`</ph> and the <ph id="ph2">`lParam`</ph> parameters are the standard values for the message being handled.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The parameter bHandled allows you to specify whether the function handled the message or not.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>By default, the value is set to <ph id="ph1">`TRUE`</ph> to indicate that the function handled the message, but you can set it to <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This will cause ATL to continue looking for another message handler function to send the message to.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Building and Testing the Control</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Now try out your events.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Build the control and start the ActiveX Control Test Container again.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This time, view the event log window.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>To route events to the output window, click <bpt id="p1">**</bpt>Logging<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>Options<ept id="p2">**</ept> menu and select <bpt id="p3">**</bpt>Log to output window<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Insert the control and try clicking in the window.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">`ClickIn`</ph> is fired if you click within the filled polygon, and <ph id="ph2">`ClickOut`</ph> is fired when you click outside of it.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Next, you will add a property page.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to Step 4<ept id="p1">](../atl/changing-the-drawing-code-atl-tutorial-part-4.md)</ept> &amp;#124; <bpt id="p2">[</bpt>On to Step 6<ept id="p2">](../atl/adding-a-property-page-atl-tutorial-part-6.md)</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Tutorial</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>