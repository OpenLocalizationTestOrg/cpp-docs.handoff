<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5629f7e38829e85da47e449d1a47780497e9be65</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\regex-token-iterator-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9f8443ea2bd5ef2142c6c1c7e025dba0148e6c3f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">93b1485257f4707caa7e4f94e8cb2511a697e42a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>regex_token_iterator Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>regex_token_iterator Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Iterator class for submatches.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The iterator type for submatches.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The type of elements to match.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Traits class for elements.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The template class describes a constant forward iterator object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Conceptually, it holds a <ph id="ph1">`regex_iterator`</ph> object that it uses to search for regular expression matches in a character sequence.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It extracts objects of type <ph id="ph1">`sub_match&lt;BidIt&gt;`</ph> representing the submatches identified by the index values in the stored vector <ph id="ph2">`subs`</ph> for each regular expression match.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>An index value of -1 designates the character sequence beginning immediately after the end of the previous regular expression match, or beginning at the start of the character sequence if there was no previous regular expression match, and extending to but not including the first character of the current regular expression match, or to the end of the character sequence if there is no current match.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Any other index value <ph id="ph1">`idx`</ph> designates the contents of the capture group held in <ph id="ph2">`it.match[idx]`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>regex&gt;</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>regex_token_iterator::difference_type</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The type of an iterator difference.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The type is a synonym for <ph id="ph1">`std::ptrdiff_t`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>regex_token_iterator::iterator_category</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The type of the iterator category.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The type is a synonym for <ph id="ph1">`std::forward_iterator_tag`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>regex_token_iterator::operator!=</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Compares iterators for inequality.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The iterator to compare to.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The member function returns <ph id="ph1">`!(*this == right)`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>regex_token_iterator::operator*</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Accesses the designated submatch.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The member function returns a <ph id="ph1">`sub_match&lt;BidIt&gt;`</ph> object representing the capture group identified by the index value <ph id="ph2">`subs[pos]`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>regex_token_iterator::operator++</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Increments the iterator.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If the stored iterator <ph id="ph1">`it`</ph> is an end-of-sequence iterator the first operator sets the stored value <ph id="ph2">`pos`</ph> to the value of <ph id="ph3">`subs.size()`</ph> (thus making an end-of-sequence iterator).</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Otherwise the operator increments the stored value <ph id="ph1">`pos`</ph>; if the result is equal to the value <ph id="ph2">`subs.size()`</ph> it sets the stored value <ph id="ph3">`pos`</ph> to zero and increments the stored iterator <ph id="ph4">`it`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If incrementing the stored iterator leaves it unequal to an end-of-sequence iterator the operator does nothing further.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Otherwise, if the end of the preceding match was at the end of the character sequence the operator sets the stored value of <ph id="ph1">`pos`</ph> to <ph id="ph2">`subs.size()`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Otherwise, the operator repeatedly increments the stored value <ph id="ph1">`pos`</ph> until <ph id="ph2">`pos == subs.size()`</ph> or <ph id="ph3">`subs[pos] == -1`</ph> (thus ensuring that the next dereference of the iterator will return the tail of the character sequence if one of the index values is -1).</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In all cases the operator returns the object.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The second operator makes a copy of the object, increments the object, then returns the copy.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>regex_token_iterator::operator==</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Compares iterators for equality.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>right</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The iterator to compare to.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The member function returns <ph id="ph1">`it == right.it &amp;&amp; subs == right.subs &amp;&amp; pos == right.pos`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>regex_token_iterator::operator-</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Accesses the designated submatch.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The member function returns a pointer to a <ph id="ph1">`sub_match&lt;BidIt&gt;`</ph> object representing the capture group identified by the index value <ph id="ph2">`subs[pos]`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>regex_token_iterator::pointer</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The type of a pointer to a match.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The type is a synonym for <ph id="ph1">`sub_match&lt;BidIt&gt;*`</ph>, where <ph id="ph2">`BidIt`</ph> is the template parameter.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>regex_token_iterator::reference</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The type of a reference to a submatch.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The type is a synonym for <ph id="ph1">`sub_match&lt;BidIt&gt;&amp;`</ph>, where <ph id="ph2">`BidIt`</ph> is the template parameter.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>regex_token_iterator::regex_token_iterator</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Constructs the iterator.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Beginning of sequence to match.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>End of sequence to match.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Regular expression for matches.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Flags for matches.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The first constructor constructs an end-of-sequence iterator.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The second constructor constructs an object whose stored iterator <ph id="ph1">`it`</ph> is initialized to <ph id="ph2">`regex_iterator&lt;BidIt, Elem, RXtraits&gt;(first, last, re, f)`</ph>, whose stored vector <ph id="ph3">`subs`</ph> holds exactly one integer, with value <ph id="ph4">`submatch`</ph>, and whose stored value <ph id="ph5">`pos`</ph> is zero.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Note: the resulting object extracts the submatch identified by the index value <ph id="ph1">`submatch`</ph> for each successful regular expression match.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The third constructor constructs an object whose stored iterator <ph id="ph1">`it`</ph> is initialized to <ph id="ph2">`regex_iterator&lt;BidIt, Elem, RXtraits&gt;(first, last, re, f)`</ph>, whose stored vector <ph id="ph3">`subs`</ph> holds a copy of the constructor argument <ph id="ph4">`submatches`</ph>, and whose stored value <ph id="ph5">`pos`</ph> is zero.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The fourth constructor constructs an object whose stored iterator <ph id="ph1">`it`</ph> is initialized to <ph id="ph2">`regex_iterator&lt;BidIt, Elem, RXtraits&gt;(first, last, re, f)`</ph>, whose stored vector <ph id="ph3">`subs`</ph> holds the <ph id="ph4">`N`</ph> values pointed to by the constructor argument <ph id="ph5">`submatches`</ph>, and whose stored value <ph id="ph6">`pos`</ph> is zero.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>regex_token_iterator::regex_type</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The type of the regular expression to match.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The typedef is a synonym for <ph id="ph1">`basic_regex&lt;Elem, RXtraits&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>regex_token_iterator::value_type</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The type of a submatch.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The type is a synonym for <ph id="ph1">`sub_match&lt;BidIt&gt;`</ph>, where <ph id="ph2">`BidIt`</ph> is the template parameter.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>regex&gt;</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>regex_token_iterator</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>regex_iterator Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>