{"nodes":[{"pos":[12,61],"content":"Parsing C Command-Line Arguments | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Parsing C Command-Line Arguments | Microsoft Docs","pos":[0,49]}]},{"content":"Parsing C Command-Line Arguments","pos":[763,795]},{"content":"Microsoft Specific","pos":[798,816]},{"content":"Microsoft C startup code uses the following rules when interpreting arguments given on the operating system command line:","pos":[825,946]},{"content":"Arguments are delimited by white space, which is either a space or a tab.","pos":[956,1029]},{"content":"A string surrounded by double quotation marks is interpreted as a single argument, regardless of white space contained within.","pos":[1039,1165]},{"content":"A quoted string can be embedded in an argument.","pos":[1166,1213]},{"content":"Note that the caret (<bpt id=\"p1\">**</bpt><ph id=\"ph1\">^</ph><ept id=\"p1\">**</ept>) is not recognized as an escape character or delimiter.","pos":[1214,1296],"source":" Note that the caret (**^**) is not recognized as an escape character or delimiter."},{"pos":[1306,1422],"content":"A double quotation mark preceded by a backslash, <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\\\</ph>\"<ept id=\"p1\">**</ept>, is interpreted as a literal double quotation mark (<bpt id=\"p2\">**</bpt>\"<ept id=\"p2\">**</ept>).","source":"A double quotation mark preceded by a backslash, **\\\\\"**, is interpreted as a literal double quotation mark (**\"**)."},{"content":"Backslashes are interpreted literally, unless they immediately precede a double quotation mark.","pos":[1432,1527]},{"pos":[1537,1785],"content":"If an even number of backslashes is followed by a double quotation mark, then one backslash (<bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\\\</ph><ept id=\"p1\">**</ept>) is placed in the <ph id=\"ph2\">`argv`</ph> array for every pair of backslashes (<bpt id=\"p2\">**</bpt><ph id=\"ph3\">\\\\\\\\</ph><ept id=\"p2\">**</ept>), and the double quotation mark (<bpt id=\"p3\">**</bpt>\"<ept id=\"p3\">**</ept>) is interpreted as a string delimiter.","source":"If an even number of backslashes is followed by a double quotation mark, then one backslash (**\\\\**) is placed in the `argv` array for every pair of backslashes (**\\\\\\\\**), and the double quotation mark (**\"**) is interpreted as a string delimiter."},{"pos":[1795,2132],"content":"If an odd number of backslashes is followed by a double quotation mark, then one backslash (<bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\\\</ph><ept id=\"p1\">**</ept>) is placed in the <ph id=\"ph2\">`argv`</ph> array for every pair of backslashes (<bpt id=\"p2\">**</bpt><ph id=\"ph3\">\\\\\\\\</ph><ept id=\"p2\">**</ept>) and the double quotation mark is interpreted as an escape sequence by the remaining backslash, causing a literal double quotation mark (<bpt id=\"p3\">**</bpt>\"<ept id=\"p3\">**</ept>) to be placed in <ph id=\"ph4\">`argv`</ph>.","source":"If an odd number of backslashes is followed by a double quotation mark, then one backslash (**\\\\**) is placed in the `argv` array for every pair of backslashes (**\\\\\\\\**) and the double quotation mark is interpreted as an escape sequence by the remaining backslash, causing a literal double quotation mark (**\"**) to be placed in `argv`."},{"content":"This list illustrates the rules above by showing the interpreted result passed to <ph id=\"ph1\">`argv`</ph> for several examples of command-line arguments.","pos":[2139,2275],"source":"This list illustrates the rules above by showing the interpreted result passed to `argv` for several examples of command-line arguments."},{"content":"The output listed in the second, third, and fourth columns is from the ARGS.C program that follows the list.","pos":[2276,2384]},{"content":"Command-Line Input","pos":[2391,2409]},{"content":"argv[1]","pos":[2410,2417]},{"content":"argv[2]","pos":[2418,2425]},{"content":"argv[3]","pos":[2426,2433]},{"content":"Example","pos":[2703,2710]},{"content":"Code","pos":[2720,2724]},{"content":"Comments","pos":[3557,3565]},{"content":"One example of output from this program is:","pos":[3569,3612]},{"content":"END Microsoft Specific","pos":[3923,3945]},{"content":"See Also","pos":[3956,3964]},{"content":"main Function and Program Execution","pos":[3969,4004]}],"content":"---\ntitle: \"Parsing C Command-Line Arguments | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"quotation marks, command-line arguments\"\n  - \"double quotation marks\"\n  - \"command line, parsing\"\n  - \"parsing, command-line arguments\"\n  - \"startup code, parsing command-line arguments\"\nms.assetid: ffce8037-2811-45c4-8db4-1ed787859c80\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Parsing C Command-Line Arguments\n**Microsoft Specific**  \n  \n Microsoft C startup code uses the following rules when interpreting arguments given on the operating system command line:  \n  \n-   Arguments are delimited by white space, which is either a space or a tab.  \n  \n-   A string surrounded by double quotation marks is interpreted as a single argument, regardless of white space contained within. A quoted string can be embedded in an argument. Note that the caret (**^**) is not recognized as an escape character or delimiter.  \n  \n-   A double quotation mark preceded by a backslash, **\\\\\"**, is interpreted as a literal double quotation mark (**\"**).  \n  \n-   Backslashes are interpreted literally, unless they immediately precede a double quotation mark.  \n  \n-   If an even number of backslashes is followed by a double quotation mark, then one backslash (**\\\\**) is placed in the `argv` array for every pair of backslashes (**\\\\\\\\**), and the double quotation mark (**\"**) is interpreted as a string delimiter.  \n  \n-   If an odd number of backslashes is followed by a double quotation mark, then one backslash (**\\\\**) is placed in the `argv` array for every pair of backslashes (**\\\\\\\\**) and the double quotation mark is interpreted as an escape sequence by the remaining backslash, causing a literal double quotation mark (**\"**) to be placed in `argv`.  \n  \n This list illustrates the rules above by showing the interpreted result passed to `argv` for several examples of command-line arguments. The output listed in the second, third, and fourth columns is from the ARGS.C program that follows the list.  \n  \n|Command-Line Input|argv[1]|argv[2]|argv[3]|  \n|-------------------------|---------------|---------------|---------------|  \n|`\"a b c\" d e`|`a b c`|`d`|`e`|  \n|`\"ab\\\"c\" \"\\\\\" d`|`ab\"c`|`\\`|`d`|  \n|`a\\\\\\b d\"e f\"g h`|`a\\\\\\b`|`de fg`|`h`|  \n|`a\\\\\\\"b c d`|`a\\\"b`|`c`|`d`|  \n|`a\\\\\\\\\"b c\" d e`|`a\\\\b c`|`d`|`e`|  \n  \n## Example  \n  \n### Code  \n  \n```  \n// Parsing_C_Commandline_args.c  \n// ARGS.C illustrates the following variables used for accessing  \n// command-line arguments and environment variables:  \n// argc  argv  envp  \n//  \n  \n#include <stdio.h>  \n  \nint main( int argc, // Number of strings in array argv  \n char *argv[],      // Array of command-line argument strings  \n char **envp )      // Array of environment variable strings  \n{  \n    int count;  \n  \n    // Display each command-line argument.  \n    printf_s( \"\\nCommand-line arguments:\\n\" );  \n    for( count = 0; count < argc; count++ )  \n        printf_s( \"  argv[%d]   %s\\n\", count, argv[count] );  \n  \n    // Display each environment variable.  \n    printf_s( \"\\nEnvironment variables:\\n\" );  \n    while( *envp != NULL )  \n        printf_s( \"  %s\\n\", *(envp++) );  \n  \n    return;  \n}  \n```  \n  \n## Comments  \n One example of output from this program is:  \n  \n```  \nCommand-line arguments:  \n  argv[0]   C:\\MSC\\TEST.EXE  \n  \nEnvironment variables:  \n  COMSPEC=C:\\NT\\SYSTEM32\\CMD.EXE  \n  \n  PATH=c:\\nt;c:\\binb;c:\\binr;c:\\nt\\system32;c:\\word;c:\\help;c:\\msc;c:\\;  \n  PROMPT=[$p]   \n  TEMP=c:\\tmp  \n  TMP=c:\\tmp  \n  EDITORS=c:\\binr  \n  WINDIR=c:\\nt        \n```  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [main Function and Program Execution](../c-language/main-function-and-program-execution.md)"}