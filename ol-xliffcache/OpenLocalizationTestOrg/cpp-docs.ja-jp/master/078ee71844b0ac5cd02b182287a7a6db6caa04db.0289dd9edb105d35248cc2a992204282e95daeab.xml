{"nodes":[{"pos":[12,47],"content":"unary_negate Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"unary_negate Class | Microsoft Docs","pos":[0,35]}]},{"pos":[691,709],"content":"unary_negate Class","linkify":"unary_negate Class","nodes":[{"content":"unary_negate Class","pos":[0,18]}]},{"content":"A template class providing a member function that negates the return value of a specified unary function.","pos":[710,815]},{"pos":[824,830],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1105,1115],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The unary function to be negated.","pos":[1129,1162]},{"content":"The operand of the unary function to be negated.","pos":[1179,1227]},{"pos":[1236,1248],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The negation of the unary function.","pos":[1252,1287]},{"pos":[1296,1303],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template class stores a copy of a unary function object _ <bpt id=\"p1\">*</bpt>Func.<ept id=\"p1\">*</ept>","pos":[1307,1376],"source":"The template class stores a copy of a unary function object _ *Func.*"},{"content":"It defines its member function <ph id=\"ph1\">`operator()`</ph> as returning <bpt id=\"p1\">**</bpt>!<ept id=\"p1\">**</ept><ph id=\"ph2\">\\_</ph>","pos":[1377,1441],"source":" It defines its member function `operator()` as returning **!**\\_"},{"content":"<bpt id=\"p1\">*</bpt>Func(left).<ept id=\"p1\">*</ept>","pos":[1442,1455],"source":"*Func(left).*"},{"content":"The constructor of <ph id=\"ph1\">`unary_negate`</ph> is rarely used directly.","pos":[1462,1520],"source":"The constructor of `unary_negate` is rarely used directly."},{"content":"The helper function <bpt id=\"p1\">[</bpt>not1<ept id=\"p1\">](../standard-library/functional-functions.md#not1_function)</ept> provides an easier way to declare and use the <bpt id=\"p2\">**</bpt>unary_negator<ept id=\"p2\">**</ept> adaptor predicate.","pos":[1521,1689],"source":" The helper function [not1](../standard-library/functional-functions.md#not1_function) provides an easier way to declare and use the **unary_negator** adaptor predicate."},{"pos":[1698,1705],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3179,3191],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3195,3220],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>functional&gt;","source":"**Header:** \\<functional>"},{"pos":[3227,3245],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[3254,3262],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept><ph id=\"ph1\"> </ph>","pos":[3266,3376],"source":"[Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C++ Standard Library Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-reference.md)</ept>","pos":[3379,3467],"source":" [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)"}],"content":"---\ntitle: \"unary_negate Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"unary_negate\"\n  - \"std::unary_negate\"\n  - \"std.unary_negate\"\n  - \"xfunctional/std::unary_negate\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"unary_negate class\"\nms.assetid: e3b86eec-3205-49b9-ab83-f55225af4e0c\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# unary_negate Class\nA template class providing a member function that negates the return value of a specified unary function.  \n  \n## Syntax  \n  \n```\ntemplate <class Predicate>\nclass unary_negate\n    : public unaryFunction<typename Predicate::argument_type, bool>\n{\npublic:\n    explicit unary_negate(const Predicate& Func);\n    bool operator()(const typename Predicate::argument_type& left) const;\n};\n```  \n  \n#### Parameters  \n `Func`  \n The unary function to be negated.  \n  \n `left`  \n The operand of the unary function to be negated.  \n  \n## Return Value  \n The negation of the unary function.  \n  \n## Remarks  \n The template class stores a copy of a unary function object _ *Func.* It defines its member function `operator()` as returning **!**\\_ *Func(left).*  \n  \n The constructor of `unary_negate` is rarely used directly. The helper function [not1](../standard-library/functional-functions.md#not1_function) provides an easier way to declare and use the **unary_negator** adaptor predicate.  \n  \n## Example  \n  \n```cpp  \n// functional_unary_negate.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <functional>  \n#include <algorithm>  \n#include <iostream>  \n  \nusing namespace std;  \n  \nint main()  \n{  \n    vector<int> v1;  \n    vector<int>::iterator Iter;  \n  \n    int i;  \n    for (i = 0; i <= 7; i++)  \n    {  \n        v1.push_back(5 * i);  \n    }  \n  \n    cout << \"The vector v1 = ( \";  \n    for (Iter = v1.begin(); Iter != v1.end(); Iter++)  \n        cout << *Iter << \" \";  \n    cout << \")\" << endl;  \n  \n    vector<int>::iterator::difference_type result1;  \n    // Count the elements greater than 10  \n    result1 = count_if(v1.begin(), v1.end(), bind2nd(greater<int>(), 10));  \n    cout << \"The number of elements in v1 greater than 10 is: \"  \n         << result1 << \".\" << endl;  \n  \n    vector<int>::iterator::difference_type result2;  \n    // Use the negator to count the elements less than or equal to 10  \n    result2 = count_if(v1.begin(), v1.end(),  \n        unary_negate<binder2nd <greater<int> > >(bind2nd(greater<int>(),10)));  \n  \n    // The following helper function not1 also works for the above line  \n    // not1(bind2nd(greater<int>(), 10)));  \n  \n    cout << \"The number of elements in v1 not greater than 10 is: \"  \n         << result2 << \".\" << endl;  \n}  \n/* Output:  \nThe vector v1 = ( 0 5 10 15 20 25 30 35 )  \nThe number of elements in v1 greater than 10 is: 5.  \nThe number of elements in v1 not greater than 10 is: 3.  \n*/  \n```  \n  \n## Requirements  \n **Header:** \\<functional>  \n  \n **Namespace:** std  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}