{"nodes":[{"pos":[12,46],"content":"ANSI C Compliance | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ANSI C Compliance | Microsoft Docs","pos":[0,34]}]},{"content":"ANSI C Compliance","pos":[860,877]},{"content":"The naming convention for all Microsoft-specific identifiers in the run-time system (such as functions, macros, constants, variables, and type definitions) is ANSI-compliant.","pos":[878,1052]},{"content":"In this documentation, any run-time function that follows the ANSI/ISO C standards is noted as being ANSI compatible.","pos":[1053,1170]},{"content":"ANSI-compliant applications should only use these ANSI compatible functions.","pos":[1171,1247]},{"content":"The names of Microsoft-specific functions and global variables begin with a single underscore.","pos":[1254,1348]},{"content":"These names can be overridden only locally, within the scope of your code.","pos":[1349,1423]},{"content":"For example, when you include Microsoft run-time header files, you can still locally override the Microsoft-specific function named <ph id=\"ph1\">`_open`</ph> by declaring a local variable of the same name.","pos":[1424,1611],"source":" For example, when you include Microsoft run-time header files, you can still locally override the Microsoft-specific function named `_open` by declaring a local variable of the same name."},{"content":"However, you cannot use this name for your own global function or global variable.","pos":[1612,1694]},{"content":"The names of Microsoft-specific macros and manifest constants begin with two underscores, or with a single leading underscore immediately followed by an uppercase letter.","pos":[1701,1871]},{"content":"The scope of these identifiers is absolute.","pos":[1872,1915]},{"content":"For example, you cannot use the Microsoft-specific identifier <bpt id=\"p1\">**</bpt>_UPPER<ept id=\"p1\">**</ept> for this reason.","pos":[1916,2005],"source":" For example, you cannot use the Microsoft-specific identifier **_UPPER** for this reason."},{"content":"See Also","pos":[2014,2022]},{"content":"Compatibility","pos":[2027,2040]}],"content":"---\ntitle: \"ANSI C Compliance | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"Ansi\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"underscores, leading\"\n  - \"compatibility [C++], ANSI C\"\n  - \"compliance with ANSI C\"\n  - \"conventions [C++], Microsoft extensions\"\n  - \"underscores\"\n  - \"naming conventions [C++], Microsoft library\"\n  - \"ANSI [C++], C standard\"\n  - \"Microsoft extensions naming conventions\"\nms.assetid: 6be271bf-eecf-491a-a928-0ee2dd60e3b9\ncaps.latest.revision: 6\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ANSI C Compliance\nThe naming convention for all Microsoft-specific identifiers in the run-time system (such as functions, macros, constants, variables, and type definitions) is ANSI-compliant. In this documentation, any run-time function that follows the ANSI/ISO C standards is noted as being ANSI compatible. ANSI-compliant applications should only use these ANSI compatible functions.  \n  \n The names of Microsoft-specific functions and global variables begin with a single underscore. These names can be overridden only locally, within the scope of your code. For example, when you include Microsoft run-time header files, you can still locally override the Microsoft-specific function named `_open` by declaring a local variable of the same name. However, you cannot use this name for your own global function or global variable.  \n  \n The names of Microsoft-specific macros and manifest constants begin with two underscores, or with a single leading underscore immediately followed by an uppercase letter. The scope of these identifiers is absolute. For example, you cannot use the Microsoft-specific identifier **_UPPER** for this reason.  \n  \n## See Also  \n [Compatibility](../c-runtime-library/compatibility.md)"}