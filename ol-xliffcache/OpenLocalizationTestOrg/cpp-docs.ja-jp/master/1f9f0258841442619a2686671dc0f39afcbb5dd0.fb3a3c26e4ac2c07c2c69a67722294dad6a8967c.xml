{"nodes":[{"pos":[12,46],"content":"memmove, wmemmove | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"memmove, wmemmove | Microsoft Docs","pos":[0,34]}]},{"content":"memmove, wmemmove","pos":[931,948]},{"content":"Moves one buffer to another.","pos":[949,977]},{"content":"More secure versions of these functions are available; see <bpt id=\"p1\">[</bpt>memmove_s, wmemmove_s<ept id=\"p1\">](../../c-runtime-library/reference/memmove-s-wmemmove-s.md)</ept>.","pos":[978,1120],"source":" More secure versions of these functions are available; see [memmove_s, wmemmove_s](../../c-runtime-library/reference/memmove-s-wmemmove-s.md)."},{"content":"Syntax","pos":[1129,1135]},{"content":"Parameters","pos":[1330,1340]},{"content":"Destination object.","pos":[1354,1373]},{"content":"Source object.","pos":[1389,1403]},{"content":"Number of bytes (<ph id=\"ph1\">`memmove`</ph>) or characters (<ph id=\"ph2\">`wmemmove`</ph>) to copy.","pos":[1421,1484],"source":" Number of bytes (`memmove`) or characters (`wmemmove`) to copy."},{"content":"Return Value","pos":[1493,1505]},{"pos":[1509,1531],"content":"The value of <ph id=\"ph1\">`dest`</ph><bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>","source":"The value of `dest`*.*"},{"content":"Remarks","pos":[1540,1547]},{"content":"Copies <ph id=\"ph1\">`count`</ph> bytes (<ph id=\"ph2\">`memmove`</ph>) or characters (<ph id=\"ph3\">`wmemmove`</ph>) from <ph id=\"ph4\">`src`</ph> to <ph id=\"ph5\">`dest`</ph><bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>","pos":[1551,1634],"source":"Copies `count` bytes (`memmove`) or characters (`wmemmove`) from `src` to `dest`*.*"},{"content":"If some regions of the source area and the destination overlap, both functions ensure that the original source bytes in the overlapping region are copied before being overwritten.","pos":[1635,1814]},{"content":"<bpt id=\"p1\">**</bpt>Security Note<ept id=\"p1\">**</ept> Make sure that the destination buffer is the same size or larger than the source buffer.","pos":[1821,1927],"source":"**Security Note** Make sure that the destination buffer is the same size or larger than the source buffer."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Avoiding Buffer Overruns<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms717795)</ept>.","pos":[1928,2041],"source":" For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795)."},{"pos":[2048,2276],"content":"The <ph id=\"ph1\">`memmove`</ph> and <ph id=\"ph2\">`wmemmove`</ph> functions will only be deprecated if the constant <ph id=\"ph3\">`_CRT_SECURE_DEPRECATE_MEMORY`</ph> is defined prior to the inclusion statement in order for the functions to be deprecated, such as in the example below:","source":"The `memmove` and `wmemmove` functions will only be deprecated if the constant `_CRT_SECURE_DEPRECATE_MEMORY` is defined prior to the inclusion statement in order for the functions to be deprecated, such as in the example below:"},{"content":"Requirements","pos":[2426,2438]},{"content":"Routine","pos":[2445,2452]},{"content":"Required header","pos":[2453,2468]},{"content":"string.h&gt;","pos":[2525,2534],"source":"string.h>"},{"content":"wchar.h&gt;","pos":[2552,2560],"source":"wchar.h>"},{"pos":[2568,2692],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[2701,2708]},{"content":".NET Framework Equivalent","pos":[3405,3430]},{"content":"System::Buffer::BlockCopy","pos":[3435,3460]},{"content":"See Also","pos":[3541,3549]},{"content":"Buffer Manipulation","pos":[3554,3573]},{"content":"_memccpy","pos":[3628,3636]},{"content":"memcpy, wmemcpy","pos":[3689,3704]},{"content":"strcpy, wcscpy, _mbscpy","pos":[3764,3787]},{"content":"strncpy, _strncpy_l, wcsncpy, _wcsncpy_l, _mbsncpy, _mbsncpy_l","pos":[3853,3915]}],"content":"---\ntitle: \"memmove, wmemmove | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"memmove\"\n  - \"wmemmove\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"memmove\"\n  - \"wmemmove\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"wmemmove function\"\n  - \"memmove function\"\nms.assetid: 3a906114-9cf3-40d7-bd99-ee452004f218\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# memmove, wmemmove\nMoves one buffer to another. More secure versions of these functions are available; see [memmove_s, wmemmove_s](../../c-runtime-library/reference/memmove-s-wmemmove-s.md).  \n  \n## Syntax  \n  \n```  \nvoid *memmove(  \n   void *dest,  \n   const void *src,  \n   size_t count   \n);  \nwchar_t *wmemmove(  \n   wchar_t *dest,  \n   const wchar_t *src,  \n   size_t count  \n);  \n```  \n  \n#### Parameters  \n `dest`  \n Destination object.  \n  \n `src`  \n Source object.  \n  \n `count`  \n Number of bytes (`memmove`) or characters (`wmemmove`) to copy.  \n  \n## Return Value  \n The value of `dest`*.*  \n  \n## Remarks  \n Copies `count` bytes (`memmove`) or characters (`wmemmove`) from `src` to `dest`*.* If some regions of the source area and the destination overlap, both functions ensure that the original source bytes in the overlapping region are copied before being overwritten.  \n  \n **Security Note** Make sure that the destination buffer is the same size or larger than the source buffer. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).  \n  \n The `memmove` and `wmemmove` functions will only be deprecated if the constant `_CRT_SECURE_DEPRECATE_MEMORY` is defined prior to the inclusion statement in order for the functions to be deprecated, such as in the example below:  \n  \n```  \n#define _CRT_SECURE_DEPRECATE_MEMORY  \n#include <string.h>  \nor  \n#define _CRT_SECURE_DEPRECATE_MEMORY  \n#include <wchar.h>  \n```  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`memmove`|\\<string.h>|  \n|`wmemmove`|\\<wchar.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_memcpy.c  \n// Illustrate overlapping copy: memmove  \n// always handles it correctly; memcpy may handle  \n// it correctly.  \n//  \n  \n#include <memory.h>  \n#include <string.h>  \n#include <stdio.h>  \n  \nchar str1[7] = \"aabbcc\";  \n  \nint main( void )  \n{  \n   printf( \"The string: %s\\n\", str1 );  \n   memcpy( str1 + 2, str1, 4 );  \n   printf( \"New string: %s\\n\", str1 );  \n  \n   strcpy_s( str1, sizeof(str1), \"aabbcc\" );   // reset string  \n  \n   printf( \"The string: %s\\n\", str1 );  \n   memmove( str1 + 2, str1, 4 );  \n   printf( \"New string: %s\\n\", str1 );  \n}  \n```  \n  \n```Output  \nThe string: aabbcc  \nNew string: aaaabb  \nThe string: aabbcc  \nNew string: aaaabb  \n```  \n  \n## .NET Framework Equivalent  \n [System::Buffer::BlockCopy](https://msdn.microsoft.com/en-us/library/system.buffer.blockcopy.aspx)  \n  \n## See Also  \n [Buffer Manipulation](../../c-runtime-library/buffer-manipulation.md)   \n [_memccpy](../../c-runtime-library/reference/memccpy.md)   \n [memcpy, wmemcpy](../../c-runtime-library/reference/memcpy-wmemcpy.md)   \n [strcpy, wcscpy, _mbscpy](../../c-runtime-library/reference/strcpy-wcscpy-mbscpy.md)   \n [strncpy, _strncpy_l, wcsncpy, _wcsncpy_l, _mbsncpy, _mbsncpy_l](../../c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l.md)"}