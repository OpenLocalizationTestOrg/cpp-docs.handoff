{"nodes":[{"pos":[12,75],"content":"fscanf_s, _fscanf_s_l, fwscanf_s, _fwscanf_s_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"fscanf_s, _fscanf_s_l, fwscanf_s, _fwscanf_s_l | Microsoft Docs","pos":[0,63]}]},{"content":"fscanf_s, _fscanf_s_l, fwscanf_s, _fwscanf_s_l","pos":[1427,1473]},{"content":"Reads formatted data from a stream.","pos":[1474,1509]},{"content":"These versions of <bpt id=\"p1\">[</bpt>fscanf, _fscanf_l, fwscanf, _fwscanf_l<ept id=\"p1\">](../../c-runtime-library/reference/fscanf-fscanf-l-fwscanf-fwscanf-l.md)</ept> have security enhancements, as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1510,1773],"source":" These versions of [fscanf, _fscanf_l, fwscanf, _fwscanf_l](../../c-runtime-library/reference/fscanf-fscanf-l-fwscanf-fwscanf-l.md) have security enhancements, as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"content":"Syntax","pos":[1782,1788]},{"content":"Parameters","pos":[2224,2234]},{"content":"Pointer to <ph id=\"ph1\">`FILE`</ph> structure.","pos":[2250,2278],"source":" Pointer to `FILE` structure."},{"content":"Format-control string.","pos":[2297,2319]},{"content":"Optional arguments.","pos":[2340,2359]},{"content":"The locale to use.","pos":[2378,2396]},{"content":"Return Value","pos":[2405,2417]},{"content":"Each of these functions returns the number of fields that are successfully converted and assigned; the return value does not include fields that were read but not assigned.","pos":[2421,2593]},{"content":"A return value of 0 indicates that no fields were assigned.","pos":[2594,2653]},{"content":"If an error occurs, or if the end of the file stream is reached before the first conversion, the return value is <ph id=\"ph1\">`EOF`</ph> for <ph id=\"ph2\">`fscanf_s`</ph> and <ph id=\"ph3\">`fwscanf_s`</ph>.","pos":[2654,2804],"source":" If an error occurs, or if the end of the file stream is reached before the first conversion, the return value is `EOF` for `fscanf_s` and `fwscanf_s`."},{"content":"These functions validate their parameters.","pos":[2811,2853]},{"content":"If <ph id=\"ph1\">`stream`</ph> is an invalid file pointer, or <ph id=\"ph2\">`format`</ph> is a null pointer, these functions invoke the invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2854,3067],"source":" If `stream` is an invalid file pointer, or `format` is a null pointer, these functions invoke the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions return <ph id=\"ph1\">`EOF`</ph> and set <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`EINVAL`</ph>.","pos":[3068,3162],"source":" If execution is allowed to continue, these functions return `EOF` and set `errno` to `EINVAL`."},{"content":"Remarks","pos":[3171,3178]},{"content":"The <ph id=\"ph1\">`fscanf_s`</ph> function reads data from the current position of <ph id=\"ph2\">`stream`</ph> into the locations that are given by <ph id=\"ph3\">`argument`</ph> (if any).","pos":[3182,3312],"source":"The `fscanf_s` function reads data from the current position of `stream` into the locations that are given by `argument` (if any)."},{"content":"Each <ph id=\"ph1\">`argument`</ph> must be a pointer to a variable of a type that corresponds to a type specifier in <ph id=\"ph2\">`format`</ph>.","pos":[3313,3420],"source":" Each `argument` must be a pointer to a variable of a type that corresponds to a type specifier in `format`."},{"content":"controls the interpretation of the input fields and has the same form and function as the <ph id=\"ph1\">`format`</ph> argument for <ph id=\"ph2\">`scanf_s`</ph>; see <bpt id=\"p1\">[</bpt>Format Specification Fields: scanf and wscanf Functions<ept id=\"p1\">](../../c-runtime-library/format-specification-fields-scanf-and-wscanf-functions.md)</ept> for a description of <ph id=\"ph3\">`format`</ph>.","pos":[3430,3728],"source":" controls the interpretation of the input fields and has the same form and function as the `format` argument for `scanf_s`; see [Format Specification Fields: scanf and wscanf Functions](../../c-runtime-library/format-specification-fields-scanf-and-wscanf-functions.md) for a description of `format`."},{"content":"is a wide-character version of <ph id=\"ph1\">`fscanf_s`</ph>; the format argument to <ph id=\"ph2\">`fwscanf_s`</ph> is a wide-character string.","pos":[3742,3847],"source":" is a wide-character version of `fscanf_s`; the format argument to `fwscanf_s` is a wide-character string."},{"content":"These functions behave identically if the stream is opened in ANSI mode.","pos":[3848,3920]},{"content":"doesn't currently support input from a UNICODE stream.","pos":[3932,3986]},{"content":"The main difference between the more secure functions (that have the <ph id=\"ph1\">`_s`</ph> suffix) and the other versions is that the more secure functions require the size in characters of each <ph id=\"ph2\">`c`</ph>, <ph id=\"ph3\">`C`</ph>, <ph id=\"ph4\">`s`</ph>, <ph id=\"ph5\">`S`</ph>, and <ph id=\"ph6\">`[`</ph> type field to be passed as an argument immediately following the variable.","pos":[3993,4273],"source":"The main difference between the more secure functions (that have the `_s` suffix) and the other versions is that the more secure functions require the size in characters of each `c`, `C`, `s`, `S`, and `[` type field to be passed as an argument immediately following the variable."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>scanf_s, _scanf_s_l, wscanf_s, _wscanf_s_l<ept id=\"p1\">](../../c-runtime-library/reference/scanf-s-scanf-s-l-wscanf-s-wscanf-s-l.md)</ept> and <bpt id=\"p2\">[</bpt>scanf Width Specification<ept id=\"p2\">](../../c-runtime-library/scanf-width-specification.md)</ept>.","pos":[4274,4507],"source":" For more information, see [scanf_s, _scanf_s_l, wscanf_s, _wscanf_s_l](../../c-runtime-library/reference/scanf-s-scanf-s-l-wscanf-s-wscanf-s-l.md) and [scanf Width Specification](../../c-runtime-library/scanf-width-specification.md)."},{"pos":[4515,4581],"content":"[!NOTE]\n The size parameter is of type `unsigned`, not `size_t`.","leadings":["","> "],"nodes":[{"content":"The size parameter is of type <ph id=\"ph1\">`unsigned`</ph>, not <ph id=\"ph2\">`size_t`</ph>.","pos":[9,64],"source":" The size parameter is of type `unsigned`, not `size_t`."}]},{"pos":[4588,4756],"content":"The versions of these functions that have the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter that's passed in instead of the current thread locale.","source":"The versions of these functions that have the `_l` suffix are identical except that they use the locale parameter that's passed in instead of the current thread locale."},{"content":"Generic-Text Routine Mappings","pos":[4766,4795]},{"content":"TCHAR.H routine","pos":[4802,4817]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[4818,4846],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[4847,4860]},{"content":"_UNICODE defined","pos":[4861,4877]},{"content":"Requirements","pos":[5108,5120]},{"content":"Function","pos":[5127,5135]},{"content":"Required header","pos":[5136,5151]},{"pos":[5207,5208],"content":","},{"content":"stdio.h&gt;","pos":[5225,5233],"source":"stdio.h>"},{"pos":[5249,5250],"content":","},{"content":"stdio.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[5268,5290],"source":"stdio.h> or \\<wchar.h>"},{"pos":[5298,5402],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"Example","pos":[5411,5418]},{"content":".NET Framework Equivalent","pos":[6527,6552]},{"content":"<bpt id=\"p1\">[</bpt>System::IO::StreamReader::ReadLine<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.io.streamreader.readline.aspx)</ept>.","pos":[6556,6672],"source":"[System::IO::StreamReader::ReadLine](https://msdn.microsoft.com/en-us/library/system.io.streamreader.readline.aspx)."},{"content":"See also <ph id=\"ph1\">`Parse`</ph> methods, such as <bpt id=\"p1\">[</bpt>System::Double::Parse<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.double.parse.aspx)</ept>.","pos":[6673,6798],"source":" See also `Parse` methods, such as [System::Double::Parse](https://msdn.microsoft.com/en-us/library/system.double.parse.aspx)."},{"content":"See Also","pos":[6807,6815]},{"content":"Stream I/O","pos":[6820,6830]},{"content":"_cscanf_s, _cscanf_s_l, _cwscanf_s, _cwscanf_s_l","pos":[6876,6924]},{"content":"fprintf_s, _fprintf_s_l, fwprintf_s, _fwprintf_s_l","pos":[7011,7061]},{"content":"scanf_s, _scanf_s_l, wscanf_s, _wscanf_s_l","pos":[7152,7194]},{"content":"sscanf_s, _sscanf_s_l, swscanf_s, _swscanf_s_l","pos":[7277,7323]},{"content":"fscanf, _fscanf_l, fwscanf, _fwscanf_l","pos":[7410,7448]}],"content":"---\ntitle: \"fscanf_s, _fscanf_s_l, fwscanf_s, _fwscanf_s_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"fwscanf_s\"\n  - \"_fscanf_s_l\"\n  - \"_fwscanf_s_l\"\n  - \"fscanf_s\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_fwscanf_s_l\"\n  - \"_fscanf_s_l\"\n  - \"fscanf_s\"\n  - \"_ftscanf_s_l\"\n  - \"_ftscanf_s\"\n  - \"fwscanf_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"formatted data [C++], reading from streams\"\n  - \"_ftscanf_s_l function\"\n  - \"_fscanf_s_l function\"\n  - \"ftscanf_s function\"\n  - \"fwscanf_s function\"\n  - \"_ftscanf_s function\"\n  - \"data [CRT], reading from streams\"\n  - \"_fwscanf_s_l function\"\n  - \"fscanf_s function\"\n  - \"fwscanf_s_l function\"\n  - \"ftscanf_s_l function\"\n  - \"streams [C++], reading formatted data from\"\n  - \"fscanf_s_l function\"\nms.assetid: b6e88194-714b-4322-be82-1cc0b343fe01\ncaps.latest.revision: 28\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# fscanf_s, _fscanf_s_l, fwscanf_s, _fwscanf_s_l\nReads formatted data from a stream. These versions of [fscanf, _fscanf_l, fwscanf, _fwscanf_l](../../c-runtime-library/reference/fscanf-fscanf-l-fwscanf-fwscanf-l.md) have security enhancements, as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nint fscanf_s(   \n   FILE *stream,  \n   const char *format [,  \n   argument ]...   \n);  \nint _fscanf_s_l(   \n   FILE *stream,  \n   const char *format,  \n   locale_t locale [,  \n   argument ]...   \n);  \nint fwscanf_s(   \n   FILE *stream,  \n   const wchar_t *format [,  \n   argument ]...   \n);  \nint _fwscanf_s_l(   \n   FILE *stream,  \n   const wchar_t *format,  \n   locale_t locale [,  \n   argument ]...   \n);  \n```  \n  \n#### Parameters  \n `stream`  \n Pointer to `FILE` structure.  \n  \n `format`  \n Format-control string.  \n  \n `argument`  \n Optional arguments.  \n  \n `locale`  \n The locale to use.  \n  \n## Return Value  \n Each of these functions returns the number of fields that are successfully converted and assigned; the return value does not include fields that were read but not assigned. A return value of 0 indicates that no fields were assigned. If an error occurs, or if the end of the file stream is reached before the first conversion, the return value is `EOF` for `fscanf_s` and `fwscanf_s`.  \n  \n These functions validate their parameters. If `stream` is an invalid file pointer, or `format` is a null pointer, these functions invoke the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions return `EOF` and set `errno` to `EINVAL`.  \n  \n## Remarks  \n The `fscanf_s` function reads data from the current position of `stream` into the locations that are given by `argument` (if any). Each `argument` must be a pointer to a variable of a type that corresponds to a type specifier in `format`. `format` controls the interpretation of the input fields and has the same form and function as the `format` argument for `scanf_s`; see [Format Specification Fields: scanf and wscanf Functions](../../c-runtime-library/format-specification-fields-scanf-and-wscanf-functions.md) for a description of `format`.  `fwscanf_s` is a wide-character version of `fscanf_s`; the format argument to `fwscanf_s` is a wide-character string. These functions behave identically if the stream is opened in ANSI mode. `fscanf_s` doesn't currently support input from a UNICODE stream.  \n  \n The main difference between the more secure functions (that have the `_s` suffix) and the other versions is that the more secure functions require the size in characters of each `c`, `C`, `s`, `S`, and `[` type field to be passed as an argument immediately following the variable. For more information, see [scanf_s, _scanf_s_l, wscanf_s, _wscanf_s_l](../../c-runtime-library/reference/scanf-s-scanf-s-l-wscanf-s-wscanf-s-l.md) and [scanf Width Specification](../../c-runtime-library/scanf-width-specification.md).  \n  \n> [!NOTE]\n>  The size parameter is of type `unsigned`, not `size_t`.  \n  \n The versions of these functions that have the `_l` suffix are identical except that they use the locale parameter that's passed in instead of the current thread locale.  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_ftscanf_s`|`fscanf_s`|`fscanf_s`|`fwscanf_s`|  \n|`_ftscanf_s_l`|`_fscanf_s_l`|`_fscanf_s_l`|`_fwscanf_s_l`|  \n  \n## Requirements  \n  \n|Function|Required header|  \n|--------------|---------------------|  \n|`fscanf_s`, `_fscanf_s_l`|\\<stdio.h>|  \n|`fwscanf_s`, `_fwscanf_s_l`|\\<stdio.h> or \\<wchar.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n// crt_fscanf_s.c  \n// This program writes formatted  \n// data to a file. It then uses fscanf to  \n// read the various data back from the file.  \n  \n#include <stdio.h>  \n#include <stdlib.h>  \n  \nFILE *stream;  \n  \nint main( void )  \n{  \n   long l;  \n   float fp;  \n   char s[81];  \n   char c;  \n  \n   errno_t err = fopen_s( &stream, \"fscanf.out\", \"w+\" );  \n   if( err )  \n      printf_s( \"The file fscanf.out was not opened\\n\" );  \n   else  \n   {  \n      fprintf_s( stream, \"%s %ld %f%c\", \"a-string\",   \n               65000, 3.14159, 'x' );  \n      // Set pointer to beginning of file:  \n      fseek( stream, 0L, SEEK_SET );  \n  \n      // Read data back from file:  \n      fscanf_s( stream, \"%s\", s, _countof(s) );  \n      fscanf_s( stream, \"%ld\", &l );  \n  \n      fscanf_s( stream, \"%f\", &fp );  \n      fscanf_s( stream, \"%c\", &c, 1 );  \n  \n      // Output data read:  \n      printf( \"%s\\n\", s );  \n      printf( \"%ld\\n\", l );  \n      printf( \"%f\\n\", fp );  \n      printf( \"%c\\n\", c );  \n  \n      fclose( stream );  \n   }  \n}  \n```  \n  \n```Output  \na-string  \n65000  \n3.141590  \nx  \n```  \n  \n## .NET Framework Equivalent  \n [System::IO::StreamReader::ReadLine](https://msdn.microsoft.com/en-us/library/system.io.streamreader.readline.aspx). See also `Parse` methods, such as [System::Double::Parse](https://msdn.microsoft.com/en-us/library/system.double.parse.aspx).  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [_cscanf_s, _cscanf_s_l, _cwscanf_s, _cwscanf_s_l](../../c-runtime-library/reference/cscanf-s-cscanf-s-l-cwscanf-s-cwscanf-s-l.md)   \n [fprintf_s, _fprintf_s_l, fwprintf_s, _fwprintf_s_l](../../c-runtime-library/reference/fprintf-s-fprintf-s-l-fwprintf-s-fwprintf-s-l.md)   \n [scanf_s, _scanf_s_l, wscanf_s, _wscanf_s_l](../../c-runtime-library/reference/scanf-s-scanf-s-l-wscanf-s-wscanf-s-l.md)   \n [sscanf_s, _sscanf_s_l, swscanf_s, _swscanf_s_l](../../c-runtime-library/reference/sscanf-s-sscanf-s-l-swscanf-s-swscanf-s-l.md)   \n [fscanf, _fscanf_l, fwscanf, _fwscanf_l](../../c-runtime-library/reference/fscanf-fscanf-l-fwscanf-fwscanf-l.md)"}