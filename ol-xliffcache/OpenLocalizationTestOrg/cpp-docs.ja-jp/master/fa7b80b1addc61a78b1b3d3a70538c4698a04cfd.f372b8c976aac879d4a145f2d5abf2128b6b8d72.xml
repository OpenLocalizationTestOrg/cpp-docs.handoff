{"nodes":[{"pos":[12,81],"content":"TN064: Apartment-Model Threading in ActiveX Controls | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"TN064: Apartment-Model Threading in ActiveX Controls | Microsoft Docs","pos":[0,69]}]},{"content":"TN064: Apartment-Model Threading in ActiveX Controls","pos":[771,823]},{"pos":[826,1141],"content":"[!NOTE]\n The following technical note has not been updated since it was first included in the online documentation. As a result, some procedures and topics might be out of date or incorrect. For the latest information, it is recommended that you search for the topic of interest in the online documentation index.","leadings":["","> "],"nodes":[{"content":" The following technical note has not been updated since it was first included in the online documentation. As a result, some procedures and topics might be out of date or incorrect. For the latest information, it is recommended that you search for the topic of interest in the online documentation index.","pos":[8,313],"nodes":[{"content":"The following technical note has not been updated since it was first included in the online documentation.","pos":[1,107]},{"content":"As a result, some procedures and topics might be out of date or incorrect.","pos":[108,182]},{"content":"For the latest information, it is recommended that you search for the topic of interest in the online documentation index.","pos":[183,305]}]}]},{"content":"This technical note explains how to enable apartment-model threading in an ActiveX control.","pos":[1148,1239]},{"content":"Note that apartment-model threading is only supported in Visual C++ versions 4.2 or later.","pos":[1240,1330]},{"content":"What Is Apartment-Model Threading","pos":[1339,1372]},{"content":"The apartment model is an approach to supporting embedded objects, such as ActiveX controls, within a multithreaded container application.","pos":[1376,1514]},{"content":"Although the application may have multiple threads, each instance of an embedded object will be assigned to one \"apartment,\" which will execute on only one thread.","pos":[1515,1678]},{"content":"In other words, all calls into an instance of a control will happen on the same thread.","pos":[1679,1766]},{"content":"However, different instances of the same type of control may be assigned to different apartments.","pos":[1773,1870]},{"content":"So, if multiple instances of a control share any data in common (for example, static or global data), then access to this shared data will need to be protected by a synchronization object, such as a critical section.","pos":[1871,2087]},{"pos":[2094,2280],"content":"For complete details on the apartment threading model, please see <bpt id=\"p1\">[</bpt>Processes and Threads<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms684841)</ept> in the <bpt id=\"p2\">*</bpt>OLE Programmer's Reference<ept id=\"p2\">*</ept>.","source":"For complete details on the apartment threading model, please see [Processes and Threads](http://msdn.microsoft.com/library/windows/desktop/ms684841) in the *OLE Programmer's Reference*."},{"content":"Why Support Apartment-Model Threading","pos":[2289,2326]},{"content":"Controls that support apartment-model threading can be used in multithreaded container applications that also support the apartment model.","pos":[2330,2468]},{"content":"If you do not enable apartment-model threading, you will limit the potential set of containers in which your control could be used.","pos":[2469,2600]},{"content":"Enabling apartment-model threading is easy for most controls, particularly if they have little or no shared data.","pos":[2607,2720]},{"content":"Protecting Shared Data","pos":[2729,2751]},{"content":"If your control uses shared data, such as a static member variable, access to that data should be protected with a critical section to prevent more than one thread from modifying the data at the same time.","pos":[2755,2960]},{"content":"To set up a critical section for this purpose, declare a static member variable of class <ph id=\"ph1\">`CCriticalSection`</ph> in your control's class.","pos":[2961,3093],"source":" To set up a critical section for this purpose, declare a static member variable of class `CCriticalSection` in your control's class."},{"content":"Use the <ph id=\"ph1\">`Lock`</ph> and <bpt id=\"p1\">**</bpt>Unlock<ept id=\"p1\">**</ept> member functions of this critical section object wherever your code accesses the shared data.","pos":[3094,3217],"source":" Use the `Lock` and **Unlock** member functions of this critical section object wherever your code accesses the shared data."},{"content":"Consider, for example, a control class that needs to maintain a string that is shared by all instances.","pos":[3224,3327]},{"content":"This string can be maintained in a static member variable and protected by a critical section.","pos":[3328,3422]},{"content":"The control's class declaration would contain the following:","pos":[3423,3483]},{"content":"The implementation for the class would include definitions for these variables:","pos":[3636,3715]},{"pos":[3819,3906],"content":"Access to the <ph id=\"ph1\">`_strShared`</ph> static member can then be protected by the critical section:","source":"Access to the `_strShared` static member can then be protected by the critical section:"},{"content":"Registering an Apartment-Model-Aware Control","pos":[4080,4124]},{"content":"Controls that support apartment-model threading should indicate this capability in the registry, by adding the named value \"ThreadingModel\" with a value of \"Apartment\" in their class ID registry entry under the <bpt id=\"p1\">*</bpt>class id<ept id=\"p1\">*</ept><ph id=\"ph1\">\\\\</ph><bpt id=\"p2\">**</bpt>InprocServer32<ept id=\"p2\">**</ept> key.","pos":[4128,4374],"source":"Controls that support apartment-model threading should indicate this capability in the registry, by adding the named value \"ThreadingModel\" with a value of \"Apartment\" in their class ID registry entry under the *class id*\\\\**InprocServer32** key."},{"content":"To cause this key to be automatically registered for your control, pass the <ph id=\"ph1\">`afxRegApartmentThreading`</ph> flag in the sixth parameter to <ph id=\"ph2\">`AfxOleRegisterControlClass`</ph>:","pos":[4375,4538],"source":" To cause this key to be automatically registered for your control, pass the `afxRegApartmentThreading` flag in the sixth parameter to `AfxOleRegisterControlClass`:"},{"content":"If your control project was generated by ControlWizard in Visual C++ version 4.1 or later, this flag will already be present in your code.","pos":[4966,5104]},{"content":"No changes are necessary to register the threading model.","pos":[5105,5162]},{"content":"If your project was generated by an earlier version of ControlWizard, your existing code will have a Boolean value as the sixth parameter.","pos":[5169,5307]},{"content":"If the existing parameter is TRUE, change it to <ph id=\"ph1\">`afxRegInsertable | afxRegApartmentThreading`</ph>.","pos":[5308,5402],"source":" If the existing parameter is TRUE, change it to `afxRegInsertable | afxRegApartmentThreading`."},{"content":"If the existing parameter is FALSE, change it to <ph id=\"ph1\">`afxRegApartmentThreading`</ph>.","pos":[5403,5479],"source":" If the existing parameter is FALSE, change it to `afxRegApartmentThreading`."},{"pos":[5486,5622],"content":"If your control does not follow the rules for apartment-model threading, you must not pass <ph id=\"ph1\">`afxRegApartmentThreading`</ph> in this parameter.","source":"If your control does not follow the rules for apartment-model threading, you must not pass `afxRegApartmentThreading` in this parameter."},{"content":"See Also","pos":[5631,5639]},{"content":"Technical Notes by Number","pos":[5644,5669]},{"content":"Technical Notes by Category","pos":[5713,5740]}],"content":"---\ntitle: \"TN064: Apartment-Model Threading in ActiveX Controls | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"vc.controls.activex\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"OLE controls, container support\"\n  - \"containers [C++], multithreaded\"\n  - \"TN064\"\n  - \"multithread container\"\n  - \"apartment model threading\"\nms.assetid: b2ab4c88-6954-48e2-9a74-01d4a60df073\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# TN064: Apartment-Model Threading in ActiveX Controls\n> [!NOTE]\n>  The following technical note has not been updated since it was first included in the online documentation. As a result, some procedures and topics might be out of date or incorrect. For the latest information, it is recommended that you search for the topic of interest in the online documentation index.  \n  \n This technical note explains how to enable apartment-model threading in an ActiveX control. Note that apartment-model threading is only supported in Visual C++ versions 4.2 or later.  \n  \n## What Is Apartment-Model Threading  \n The apartment model is an approach to supporting embedded objects, such as ActiveX controls, within a multithreaded container application. Although the application may have multiple threads, each instance of an embedded object will be assigned to one \"apartment,\" which will execute on only one thread. In other words, all calls into an instance of a control will happen on the same thread.  \n  \n However, different instances of the same type of control may be assigned to different apartments. So, if multiple instances of a control share any data in common (for example, static or global data), then access to this shared data will need to be protected by a synchronization object, such as a critical section.  \n  \n For complete details on the apartment threading model, please see [Processes and Threads](http://msdn.microsoft.com/library/windows/desktop/ms684841) in the *OLE Programmer's Reference*.  \n  \n## Why Support Apartment-Model Threading  \n Controls that support apartment-model threading can be used in multithreaded container applications that also support the apartment model. If you do not enable apartment-model threading, you will limit the potential set of containers in which your control could be used.  \n  \n Enabling apartment-model threading is easy for most controls, particularly if they have little or no shared data.  \n  \n## Protecting Shared Data  \n If your control uses shared data, such as a static member variable, access to that data should be protected with a critical section to prevent more than one thread from modifying the data at the same time. To set up a critical section for this purpose, declare a static member variable of class `CCriticalSection` in your control's class. Use the `Lock` and **Unlock** member functions of this critical section object wherever your code accesses the shared data.  \n  \n Consider, for example, a control class that needs to maintain a string that is shared by all instances. This string can be maintained in a static member variable and protected by a critical section. The control's class declaration would contain the following:  \n  \n```  \nclass CSampleCtrl : public COleControl  \n{  \n ...  \n    static CString _strShared;  \n    static CCriticalSection _critSect;  \n};  \n```  \n  \n The implementation for the class would include definitions for these variables:  \n  \n```  \nint CString CSampleCtrl::_strShared;  \nCCriticalSection CSampleCtrl::_critSect;  \n```  \n  \n Access to the `_strShared` static member can then be protected by the critical section:  \n  \n```  \nvoid CSampleCtrl::SomeMethod()  \n{  \n    _critSect.Lock();\nif (_strShared.Empty())  \n    _strShared = \"<text>\";  \n    _critSect.Unlock();\n\n ...  \n}  \n```  \n  \n## Registering an Apartment-Model-Aware Control  \n Controls that support apartment-model threading should indicate this capability in the registry, by adding the named value \"ThreadingModel\" with a value of \"Apartment\" in their class ID registry entry under the *class id*\\\\**InprocServer32** key. To cause this key to be automatically registered for your control, pass the `afxRegApartmentThreading` flag in the sixth parameter to `AfxOleRegisterControlClass`:  \n  \n```  \nBOOL CSampleCtrl::CSampleCtrlFactory::UpdateRegistry(BOOL bRegister)  \n{  \n    if (bRegister)  \n    return AfxOleRegisterControlClass(\n    AfxGetInstanceHandle(), \n    m_clsid, \n    m_lpszProgID, \n    IDS_SAMPLE, \n    IDB_SAMPLE, \n    afxRegApartmentThreading, \n    _dwSampleOleMisc, \n    _tlid, \n    _wVerMajor, \n    _wVerMinor);\n\n else  \n    return AfxOleUnregisterClass(m_clsid,\n    m_lpszProgID);\n\n}  \n```  \n  \n If your control project was generated by ControlWizard in Visual C++ version 4.1 or later, this flag will already be present in your code. No changes are necessary to register the threading model.  \n  \n If your project was generated by an earlier version of ControlWizard, your existing code will have a Boolean value as the sixth parameter. If the existing parameter is TRUE, change it to `afxRegInsertable | afxRegApartmentThreading`. If the existing parameter is FALSE, change it to `afxRegApartmentThreading`.  \n  \n If your control does not follow the rules for apartment-model threading, you must not pass `afxRegApartmentThreading` in this parameter.  \n  \n## See Also  \n [Technical Notes by Number](../mfc/technical-notes-by-number.md)   \n [Technical Notes by Category](../mfc/technical-notes-by-category.md)\n\n"}