{"nodes":[{"pos":[12,51],"content":"list::splice (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"list::splice (STL-CLR) | Microsoft Docs","pos":[0,39]}]},{"content":"list::splice (STL/CLR)","pos":[627,649]},{"content":"Restitch links between nodes.","pos":[650,679]},{"content":"Syntax","pos":[688,694]},{"content":"Parameters","pos":[932,942]},{"content":"first","pos":[946,951]},{"content":"Beginning of range to splice.","pos":[955,984]},{"content":"last","pos":[991,995]},{"content":"End of range to splice.","pos":[999,1022]},{"content":"right","pos":[1029,1034]},{"content":"Container to splice from.","pos":[1038,1063]},{"content":"where","pos":[1070,1075]},{"content":"Where in container to splice before.","pos":[1079,1115]},{"content":"Remarks","pos":[1124,1131]},{"content":"The first member function inserts the sequence controlled by <ph id=\"ph1\">`right`</ph> before the element in the controlled sequence pointed to by <ph id=\"ph2\">`where`</ph>.","pos":[1135,1272],"source":"The first member function inserts the sequence controlled by `right` before the element in the controlled sequence pointed to by `where`."},{"content":"It also removes all elements from <ph id=\"ph1\">`right`</ph>.","pos":[1273,1315],"source":" It also removes all elements from `right`."},{"content":"(<ph id=\"ph1\">`%``right`</ph> must not equal <ph id=\"ph2\">`this`</ph>.) You use it to splice all of one list into another.","pos":[1316,1402],"source":" (`%``right` must not equal `this`.) You use it to splice all of one list into another."},{"content":"The second member function removes the element pointed to by <ph id=\"ph1\">`first`</ph> in the sequence controlled by <ph id=\"ph2\">`right`</ph> and inserts it before the element in the controlled sequence pointed to by <ph id=\"ph3\">`where`</ph>.","pos":[1409,1599],"source":"The second member function removes the element pointed to by `first` in the sequence controlled by `right` and inserts it before the element in the controlled sequence pointed to by `where`."},{"content":"(If <ph id=\"ph1\">`where`</ph> <ph id=\"ph2\">`==`</ph> <ph id=\"ph3\">`first`</ph> <ph id=\"ph4\">`||`</ph> <ph id=\"ph5\">`where`</ph> <ph id=\"ph6\">`== ++``first`</ph>, no change occurs.) You use it to splice a single element of one list into another.","pos":[1600,1736],"source":" (If `where` `==` `first` `||` `where` `== ++``first`, no change occurs.) You use it to splice a single element of one list into another."},{"content":"The third member function inserts the subrange designated by <ph id=\"ph1\">`[``first``,`</ph> <ph id=\"ph2\">`last``)`</ph> from the sequence controlled by <ph id=\"ph3\">`right`</ph> before the element in the controlled sequence pointed to by <ph id=\"ph4\">`where`</ph>.","pos":[1743,1936],"source":"The third member function inserts the subrange designated by `[``first``,` `last``)` from the sequence controlled by `right` before the element in the controlled sequence pointed to by `where`."},{"content":"It also removes the original subrange from the sequence controlled by <ph id=\"ph1\">`right`</ph>.","pos":[1937,2015],"source":" It also removes the original subrange from the sequence controlled by `right`."},{"content":"(If <ph id=\"ph1\">`right`</ph> <ph id=\"ph2\">`==`</ph> <ph id=\"ph3\">`this`</ph>, the range <ph id=\"ph4\">`[``first``,`</ph> <ph id=\"ph5\">`last``)`</ph> must not include the element pointed to by <ph id=\"ph6\">`where`</ph>.) You use it to splice a subsequence of zero or more elements from one list into another.","pos":[2016,2215],"source":" (If `right` `==` `this`, the range `[``first``,` `last``)` must not include the element pointed to by `where`.) You use it to splice a subsequence of zero or more elements from one list into another."},{"content":"Example","pos":[2224,2231]},{"content":"Requirements","pos":[3648,3660]},{"pos":[3664,3690],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/list&gt;","source":"**Header:** \\<cliext/list>"},{"pos":[3697,3718],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[3727,3735]},{"content":"list (STL/CLR)","pos":[3740,3754]},{"content":"list::assign (STL/CLR)","pos":[3788,3810]},{"content":"list::insert (STL/CLR)","pos":[3851,3873]},{"content":"list::merge (STL/CLR)","pos":[3914,3935]}],"content":"---\ntitle: \"list::splice (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::list::splice\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"splice member [STL/CLR]\"\nms.assetid: ebc424b9-8341-4a88-b101-86d56324f5ac\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# list::splice (STL/CLR)\nRestitch links between nodes.  \n  \n## Syntax  \n  \n```  \nvoid splice(iterator where, list<Value>% right);  \nvoid splice(iterator where, list<Value>% right,  \n    iterator first);  \nvoid splice(iterator where, list<Value>% right,  \n    iterator first, iterator last);  \n```  \n  \n#### Parameters  \n first  \n Beginning of range to splice.  \n  \n last  \n End of range to splice.  \n  \n right  \n Container to splice from.  \n  \n where  \n Where in container to splice before.  \n  \n## Remarks  \n The first member function inserts the sequence controlled by `right` before the element in the controlled sequence pointed to by `where`. It also removes all elements from `right`. (`%``right` must not equal `this`.) You use it to splice all of one list into another.  \n  \n The second member function removes the element pointed to by `first` in the sequence controlled by `right` and inserts it before the element in the controlled sequence pointed to by `where`. (If `where` `==` `first` `||` `where` `== ++``first`, no change occurs.) You use it to splice a single element of one list into another.  \n  \n The third member function inserts the subrange designated by `[``first``,` `last``)` from the sequence controlled by `right` before the element in the controlled sequence pointed to by `where`. It also removes the original subrange from the sequence controlled by `right`. (If `right` `==` `this`, the range `[``first``,` `last``)` must not include the element pointed to by `where`.) You use it to splice a subsequence of zero or more elements from one list into another.  \n  \n## Example  \n  \n```  \n// cliext_list_splice.cpp   \n// compile with: /clr   \n#include <cliext/list>   \n  \nint main()   \n    {   \n    cliext::list<wchar_t> c1;   \n    c1.push_back(L'a');   \n    c1.push_back(L'b');   \n    c1.push_back(L'c');   \n  \n// display initial contents \" a b c\"   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// splice to a new list   \n    cliext::list<wchar_t> c2;   \n    c2.splice(c2.begin(), c1);   \n    System::Console::WriteLine(\"c1.size() = {0}\", c1.size());   \n    for each (wchar_t elem in c2)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// return one element   \n    c1.splice(c1.end(), c2, c2.begin());   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n    for each (wchar_t elem in c2)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// return remaining elements   \n    c1.splice(c1.begin(), c2, c2.begin(), c2.end());   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n    System::Console::WriteLine(\"c2.size() = {0}\", c2.size());   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n a b c  \nc1.size() = 0  \n a b c  \n a  \n b c  \n b c a  \nc2.size() = 0  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/list>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [list (STL/CLR)](../dotnet/list-stl-clr.md)   \n [list::assign (STL/CLR)](../dotnet/list-assign-stl-clr.md)   \n [list::insert (STL/CLR)](../dotnet/list-insert-stl-clr.md)   \n [list::merge (STL/CLR)](../dotnet/list-merge-stl-clr.md)"}