{"nodes":[{"pos":[12,54],"content":"CString Exception Cleanup | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CString Exception Cleanup | Microsoft Docs","pos":[0,42]}]},{"content":"CString Exception Cleanup","pos":[632,657]},{"content":"In previous versions of MFC, it was important that you clean up <bpt id=\"p1\">[</bpt>CString<ept id=\"p1\">](../atl-mfc-shared/reference/cstringt-class.md)</ept> objects after use.","pos":[658,797],"source":"In previous versions of MFC, it was important that you clean up [CString](../atl-mfc-shared/reference/cstringt-class.md) objects after use."},{"content":"With MFC version 3.0 and later, explicit cleanup is no longer necessary.","pos":[798,870]},{"content":"Under the C++ exception handling mechanism that MFC now uses, you do not have to worry about cleanup after an exception.","pos":[877,997]},{"content":"For a description of how C++ \"unwinds\" the stack after an exception is caught, see <bpt id=\"p1\">[</bpt>the try, catch, and throw statements<ept id=\"p1\">](../cpp/try-throw-and-catch-statements-cpp.md)</ept>.","pos":[998,1166],"source":" For a description of how C++ \"unwinds\" the stack after an exception is caught, see [the try, catch, and throw statements](../cpp/try-throw-and-catch-statements-cpp.md)."},{"content":"Even if you use the MFC <bpt id=\"p1\">**</bpt>TRY<ept id=\"p1\">**</ept><ph id=\"ph1\">/</ph><bpt id=\"p2\">**</bpt>CATCH<ept id=\"p2\">**</ept> macros instead of the C++ keywords <bpt id=\"p3\">**</bpt>try<ept id=\"p3\">**</ept> and <bpt id=\"p4\">**</bpt>catch<ept id=\"p4\">**</ept>, MFC uses the C++ exception mechanism underneath, so you still do not need to clean up explicitly.","pos":[1167,1364],"source":" Even if you use the MFC **TRY**/**CATCH** macros instead of the C++ keywords **try** and **catch**, MFC uses the C++ exception mechanism underneath, so you still do not need to clean up explicitly."},{"content":"See Also","pos":[1373,1381]},{"content":"Strings (ATL/MFC)","pos":[1386,1403]},{"content":"Exception Handling","pos":[1448,1466]}],"content":"---\ntitle: \"CString Exception Cleanup | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CString objects, exceptions\"\n  - \"exception handling, cleanup code\"\nms.assetid: 28b9ce70-be63-4a0d-92a8-44bbfbc95e83\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CString Exception Cleanup\nIn previous versions of MFC, it was important that you clean up [CString](../atl-mfc-shared/reference/cstringt-class.md) objects after use. With MFC version 3.0 and later, explicit cleanup is no longer necessary.  \n  \n Under the C++ exception handling mechanism that MFC now uses, you do not have to worry about cleanup after an exception. For a description of how C++ \"unwinds\" the stack after an exception is caught, see [the try, catch, and throw statements](../cpp/try-throw-and-catch-statements-cpp.md). Even if you use the MFC **TRY**/**CATCH** macros instead of the C++ keywords **try** and **catch**, MFC uses the C++ exception mechanism underneath, so you still do not need to clean up explicitly.  \n  \n## See Also  \n [Strings (ATL/MFC)](../atl-mfc-shared/strings-atl-mfc.md)   \n [Exception Handling](../mfc/exception-handling-in-mfc.md)\n\n"}