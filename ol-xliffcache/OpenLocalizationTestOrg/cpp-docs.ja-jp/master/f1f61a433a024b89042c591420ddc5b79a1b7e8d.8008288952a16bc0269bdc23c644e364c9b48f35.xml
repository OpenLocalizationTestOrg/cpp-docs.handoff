{"nodes":[{"pos":[12,47],"content":"acos, acosf, acosl | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"acos, acosf, acosl | Microsoft Docs","pos":[0,35]}]},{"pos":[1085,1103],"content":"acos, acosf, acosl","linkify":"acos, acosf, acosl","nodes":[{"content":"acos, acosf, acosl","pos":[0,18]}]},{"content":"Calculates the arccosine.","pos":[1104,1129]},{"pos":[1138,1144],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1390,1400],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Value between –1 and 1, for which to calculate the arccosine (the inverse cosine).","pos":[1411,1493]},{"pos":[1502,1514],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1518,1595],"content":"The <ph id=\"ph1\">`acos`</ph> function returns the arccosine of <ph id=\"ph2\">`x`</ph> in the range 0 to π radians.","source":"The `acos` function returns the arccosine of `x` in the range 0 to π radians."},{"pos":[1602,1685],"content":"By default, if <ph id=\"ph1\">`x`</ph> is less than –1 or greater than 1, <ph id=\"ph2\">`acos`</ph> returns an indefinite.","source":"By default, if `x` is less than –1 or greater than 1, `acos` returns an indefinite."},{"content":"Input","pos":[1692,1697]},{"content":"SEH Exception","pos":[1698,1711]},{"content":"Matherr Exception","pos":[1712,1729]},{"content":"± ∞","pos":[1794,1797]},{"content":"± QNAN,IND","pos":[1822,1832]},{"content":"none","pos":[1833,1837]},{"content":"&amp;#124;x&amp;#124;&gt;1","pos":[1852,1867],"source":"&#124;x&#124;>1"},{"pos":[1897,1904],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Because C++ allows overloading, you can call overloads of <ph id=\"ph1\">`acos`</ph> that take and return <ph id=\"ph2\">`float`</ph> and <ph id=\"ph3\">`long double`</ph> types.","pos":[1908,2026],"source":"Because C++ allows overloading, you can call overloads of `acos` that take and return `float` and `long double` types."},{"content":"In a C program, <ph id=\"ph1\">`acos`</ph> always takes and returns a <ph id=\"ph2\">`double`</ph>.","pos":[2027,2086],"source":" In a C program, `acos` always takes and returns a `double`."},{"pos":[2095,2107],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[2114,2121]},{"content":"Required header","pos":[2122,2137]},{"content":"Optional headers","pos":[2138,2154]},{"pos":[2222,2246],"content":"<ph id=\"ph1\">`acos`</ph>, <ph id=\"ph2\">`acosf`</ph>, <ph id=\"ph3\">`acosl`</ph>","source":"`acos`, `acosf`, `acosl`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>math.h&gt;","pos":[2247,2256],"source":"\\<math.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>errno.h&gt;","pos":[2257,2267],"source":"\\<errno.h>"},{"pos":[2277,2284],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This program prompts for a value in the range -1 to 1.","pos":[2288,2342]},{"content":"Input values outside this range produce <ph id=\"ph1\">`_DOMAIN`</ph> error messages.","pos":[2343,2408],"source":" Input values outside this range produce `_DOMAIN` error messages."},{"content":"If a valid value is entered, the program prints the arcsine and the arccosine of that value.","pos":[2409,2501]},{"pos":[3455,3480],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[3484,3568],"content":"<bpt id=\"p1\">[</bpt>System::Math::Acos<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.math.acos.aspx)</ept>","source":"[System::Math::Acos](https://msdn.microsoft.com/en-us/library/system.math.acos.aspx)"},{"pos":[3577,3585],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Floating-Point Support<ept id=\"p1\">](../../c-runtime-library/floating-point-support.md)</ept><ph id=\"ph1\"> </ph>","pos":[3589,3665],"source":"[Floating-Point Support](../../c-runtime-library/floating-point-support.md) "},{"content":"<bpt id=\"p1\"> [</bpt>asin, asinf, asinl<ept id=\"p1\">](../../c-runtime-library/reference/asin-asinf-asinl.md)</ept><ph id=\"ph1\"> </ph>","pos":[3668,3745],"source":" [asin, asinf, asinl](../../c-runtime-library/reference/asin-asinf-asinl.md) "},{"content":"<bpt id=\"p1\"> [</bpt>atan, atanf, atanl, atan2, atan2f, atan2l<ept id=\"p1\">](../../c-runtime-library/reference/atan-atanf-atanl-atan2-atan2f-atan2l.md)</ept><ph id=\"ph1\"> </ph>","pos":[3748,3868],"source":" [atan, atanf, atanl, atan2, atan2f, atan2l](../../c-runtime-library/reference/atan-atanf-atanl-atan2-atan2f-atan2l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>cos, cosf, cosl, cosh, coshf, coshl<ept id=\"p1\">](../../c-runtime-library/reference/cos-cosf-cosl-cosh-coshf-coshl.md)</ept><ph id=\"ph1\"> </ph>","pos":[3871,3979],"source":" [cos, cosf, cosl, cosh, coshf, coshl](../../c-runtime-library/reference/cos-cosf-cosl-cosh-coshf-coshl.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_matherr<ept id=\"p1\">](../../c-runtime-library/reference/matherr.md)</ept><ph id=\"ph1\"> </ph>","pos":[3982,4040],"source":" [_matherr](../../c-runtime-library/reference/matherr.md) "},{"content":"<bpt id=\"p1\"> [</bpt>sin, sinf, sinl, sinh, sinhf, sinhl<ept id=\"p1\">](../../c-runtime-library/reference/sin-sinf-sinl-sinh-sinhf-sinhl.md)</ept><ph id=\"ph1\"> </ph>","pos":[4043,4151],"source":" [sin, sinf, sinl, sinh, sinhf, sinhl](../../c-runtime-library/reference/sin-sinf-sinl-sinh-sinhf-sinhl.md) "},{"content":"<bpt id=\"p1\"> [</bpt>tan, tanf, tanl, tanh, tanhf, tanhl<ept id=\"p1\">](../../c-runtime-library/reference/tan-tanf-tanl-tanh-tanhf-tanhl.md)</ept>","pos":[4154,4261],"source":" [tan, tanf, tanl, tanh, tanhf, tanhl](../../c-runtime-library/reference/tan-tanf-tanl-tanh-tanhf-tanhl.md)"}],"content":"---\ntitle: \"acos, acosf, acosl | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"acosf\"\n  - \"acos\"\n  - \"acosl\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-math-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"acos\"\n  - \"acosl\"\n  - \"acosf\"\n  - \"math/acosf\"\n  - \"math/acosl\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"acos function\"\n  - \"acosl function\"\n  - \"acosf function\"\n  - \"trigonometric functions\"\n  - \"arccosine function\"\nms.assetid: 00b89c48-8faf-4824-aa95-fa4349a4975d\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# acos, acosf, acosl\nCalculates the arccosine.  \n  \n## Syntax  \n  \n```  \ndouble acos(   \n   double x   \n);  \nfloat acos(  \n   float x   \n);   // C++ only  \nlong double acos(  \n   long double x  \n);   // C++ only  \nfloat acosf(  \n   float x   \n);  \nlong double acosl(  \n   long double x  \n);  \n```  \n  \n#### Parameters  \n `x`  \n Value between –1 and 1, for which to calculate the arccosine (the inverse cosine).  \n  \n## Return Value  \n The `acos` function returns the arccosine of `x` in the range 0 to π radians.  \n  \n By default, if `x` is less than –1 or greater than 1, `acos` returns an indefinite.  \n  \n|Input|SEH Exception|Matherr Exception|  \n|-----------|-------------------|-----------------------|  \n|± ∞|`INVALID`|`_DOMAIN`|  \n|± QNAN,IND|none|`_DOMAIN`|  \n|&#124;x&#124;>1|`INVALID`|`_DOMAIN`|  \n  \n## Remarks  \n Because C++ allows overloading, you can call overloads of `acos` that take and return `float` and `long double` types. In a C program, `acos` always takes and returns a `double`.  \n  \n## Requirements  \n  \n|Routine|Required header|Optional headers|  \n|-------------|---------------------|----------------------|  \n|`acos`, `acosf`, `acosl`|\\<math.h>|\\<errno.h>|  \n  \n## Example  \n This program prompts for a value in the range -1 to 1. Input values outside this range produce `_DOMAIN` error messages. If a valid value is entered, the program prints the arcsine and the arccosine of that value.  \n  \n```  \n// crt_asincos.c  \n// arguments: 0  \n  \n#include <math.h>  \n#include <stdio.h>  \n#include <stdlib.h>  \n#include <errno.h>  \n  \nint main( int ac, char* av[] )  \n{  \n    double  x,  \n            y;  \n    errno_t err;   \n  \n    // argument checking  \n    if (ac != 2)  \n    {  \n        fprintf_s( stderr, \"Usage: %s <number between -1 and 1>\\n\",  \n                   av[0]);  \n        return 1;  \n    }  \n  \n    // Convert argument into a double value  \n    if ((err = sscanf_s( av[1], \"%lf\", &x )) != 1)  \n    {  \n        fprintf_s( stderr, \"Error converting argument into \",  \n                   \"double value.\\n\");  \n        return 1;  \n    }  \n  \n    // Arcsine of X  \n    y = asin( x );  \n    printf_s( \"Arcsine of %f = %f\\n\", x, y );  \n  \n    // Arccosine of X  \n    y = acos( x );  \n    printf_s( \"Arccosine of %f = %f\\n\", x, y );  \n}  \n```  \n  \n```Output  \nArcsine of 0.000000 = 0.000000  \nArccosine of 0.000000 = 1.570796  \n```  \n  \n## .NET Framework Equivalent  \n [System::Math::Acos](https://msdn.microsoft.com/en-us/library/system.math.acos.aspx)  \n  \n## See Also  \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [asin, asinf, asinl](../../c-runtime-library/reference/asin-asinf-asinl.md)   \n [atan, atanf, atanl, atan2, atan2f, atan2l](../../c-runtime-library/reference/atan-atanf-atanl-atan2-atan2f-atan2l.md)   \n [cos, cosf, cosl, cosh, coshf, coshl](../../c-runtime-library/reference/cos-cosf-cosl-cosh-coshf-coshl.md)   \n [_matherr](../../c-runtime-library/reference/matherr.md)   \n [sin, sinf, sinl, sinh, sinhf, sinhl](../../c-runtime-library/reference/sin-sinf-sinl-sinh-sinhf-sinhl.md)   \n [tan, tanf, tanl, tanh, tanhf, tanhl](../../c-runtime-library/reference/tan-tanf-tanl-tanh-tanhf-tanhl.md)"}