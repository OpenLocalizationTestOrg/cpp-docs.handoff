<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cb6b8670033ca6cd6c2a8121a62c7dbb3038c353</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\declspec.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">194737261a8eef16ed67b56a3e32fb2eecf6e593</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5d13d91b68839a5151a5437d8c7bf4cb32c0d229</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>__declspec | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>__declspec</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The extended attribute syntax for specifying storage-class information uses the <ph id="ph1">`__declspec`</ph> keyword, which specifies that an instance of a given type is to be stored with a Microsoft-specific storage-class attribute listed below.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Examples of other storage-class modifiers include the <ph id="ph1">`static`</ph> and <ph id="ph2">`extern`</ph> keywords.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>However, these keywords are part of the ANSI specification of the C and C++ languages, and as such are not covered by extended attribute syntax.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The extended attribute syntax simplifies and standardizes Microsoft-specific extensions to the C and C++ languages.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Grammar</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>decl-specifier<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>extended-decl-modifier-seq</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>extended-decl-modifier-seq<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>extended-decl-modifier<ept id="p1">*</ept>opt</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>extended-decl-modifier extended-decl-modifier-seq</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>extended-decl-modifier<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>segname</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>segname</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>{<ph id="ph1">`get=`</ph><bpt id="p1">*</bpt>get_func_name<ept id="p1">*</ept>&amp;#124;<ph id="ph2">`,put=`</ph><bpt id="p2">*</bpt>put_func_name<ept id="p2">*</ept>}</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>ComObjectGUID</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>White space separates the declaration modifier sequence.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Examples appear in later sections.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Extended attribute grammar supports these Microsoft-specific storage-class attributes: <bpt id="p1">[</bpt>align<ept id="p1">](../cpp/align-cpp.md)</ept>, <bpt id="p2">[</bpt>allocate<ept id="p2">](../cpp/allocate.md)</ept>, <bpt id="p3">[</bpt>appdomain<ept id="p3">](../cpp/appdomain.md)</ept>, <bpt id="p4">[</bpt>code_seg<ept id="p4">](../cpp/code-seg-declspec.md)</ept>, <bpt id="p5">[</bpt>deprecated<ept id="p5">](../cpp/deprecated-cpp.md)</ept>, <bpt id="p6">[</bpt>dllexport<ept id="p6">](../cpp/dllexport-dllimport.md)</ept>, <bpt id="p7">[</bpt>dllimport<ept id="p7">](../cpp/dllexport-dllimport.md)</ept>, <bpt id="p8">[</bpt>jitintrinsic<ept id="p8">](../cpp/jitintrinsic.md)</ept>, <bpt id="p9">[</bpt>naked<ept id="p9">](../cpp/naked-cpp.md)</ept>, <bpt id="p10">[</bpt>noalias<ept id="p10">](../cpp/noalias.md)</ept>, <bpt id="p11">[</bpt>noinline<ept id="p11">](../cpp/noinline.md)</ept>, <bpt id="p12">[</bpt>noreturn<ept id="p12">](../cpp/noreturn.md)</ept>, <bpt id="p13">[</bpt>nothrow<ept id="p13">](../cpp/nothrow-cpp.md)</ept>, <bpt id="p14">[</bpt>novtable<ept id="p14">](../cpp/novtable.md)</ept>, <bpt id="p15">[</bpt>process<ept id="p15">](../cpp/process.md)</ept>, <bpt id="p16">[</bpt>restrict<ept id="p16">](../cpp/restrict.md)</ept>, <bpt id="p17">[</bpt>safebuffers<ept id="p17">](../cpp/safebuffers.md)</ept>, <bpt id="p18">[</bpt>selectany<ept id="p18">](../cpp/selectany.md)</ept>, and <bpt id="p19">[</bpt>thread<ept id="p19">](../cpp/thread.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It also supports these COM-object attributes: <bpt id="p1">[</bpt>property<ept id="p1">](../cpp/property-cpp.md)</ept> and <bpt id="p2">[</bpt>uuid<ept id="p2">](../cpp/uuid-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`code_seg`</ph>, <ph id="ph2">`dllexport`</ph>, <ph id="ph3">`dllimport`</ph>, <ph id="ph4">`naked`</ph>, <ph id="ph5">`noalias`</ph>, <ph id="ph6">`nothrow`</ph>, <ph id="ph7">`property`</ph>, <ph id="ph8">`restrict`</ph>, <ph id="ph9">`selectany`</ph>, <ph id="ph10">`thread`</ph>, and <ph id="ph11">`uuid`</ph> storage-class attributes are properties only of the declaration of the object or function to which they are applied.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`thread`</ph> attribute affects data and objects only.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`naked`</ph> attribute affects functions only.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dllimport`</ph> and <ph id="ph2">`dllexport`</ph> attributes affect functions, data, and objects.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`property`</ph>, <ph id="ph2">`selectany`</ph>, and <ph id="ph3">`uuid`</ph> attributes affect COM objects.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`__declspec`</ph> keywords should be placed at the beginning of a simple declaration.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The compiler ignores, without warning, any <ph id="ph1">`__declspec`</ph> keywords placed after * or &amp; and in front of the variable identifier in a declaration.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`__declspec`</ph> attribute specified in the beginning of a user-defined type declaration applies to the variable of that type.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In this case, the attribute applies to <ph id="ph1">`varX`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`__declspec`</ph> attribute placed after the <ph id="ph2">`class`</ph> or <ph id="ph3">`struct`</ph> keyword applies to the user-defined type.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In this case, the attribute applies to <ph id="ph1">`X`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The general guideline for using the <ph id="ph1">`__declspec`</ph> attribute for simple declarations is as follows:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>decl-specifier-seq<ept id="p1">*</ept> should contain, among other things, a base type (e.g. <ph id="ph1">`int`</ph>, <ph id="ph2">`float`</ph>, a <ph id="ph3">`typedef`</ph>, or a class name), a storage class (e.g. <ph id="ph4">`static`</ph>, <ph id="ph5">`extern`</ph>), or the <ph id="ph6">`__declspec`</ph> extension.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>init-declarator-list<ept id="p1">*</ept> should contain, among other things, the pointer part of declarations.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following code declares an integer thread local variable and initializes it with a value:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>C Extended Storage-Class Attributes</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>