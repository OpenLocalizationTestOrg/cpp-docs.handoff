{"nodes":[{"pos":[12,66],"content":"localtime, _localtime32, _localtime64 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"localtime, _localtime32, _localtime64 | Microsoft Docs","pos":[0,54]}]},{"content":"localtime, _localtime32, _localtime64","pos":[1192,1229]},{"content":"Convert a time value and correct for the local time zone.","pos":[1230,1287]},{"content":"More secure versions of these functions are available; see <bpt id=\"p1\">[</bpt>localtime_s, _localtime32_s, _localtime64_s<ept id=\"p1\">](../../c-runtime-library/reference/localtime-s-localtime32-s-localtime64-s.md)</ept>.","pos":[1288,1471],"source":" More secure versions of these functions are available; see [localtime_s, _localtime32_s, _localtime64_s](../../c-runtime-library/reference/localtime-s-localtime32-s-localtime64-s.md)."},{"content":"Syntax","pos":[1480,1486]},{"content":"Parameters","pos":[1690,1700]},{"content":"Pointer to stored time.","pos":[1715,1738]},{"content":"Return Value","pos":[1747,1759]},{"pos":[1763,1853],"content":"Return a pointer to the structure result, or <ph id=\"ph1\">`NULL`</ph> if the date passed to the function is:","source":"Return a pointer to the structure result, or `NULL` if the date passed to the function is:"},{"content":"Before midnight, January 1, 1970.","pos":[1863,1896]},{"pos":[1906,1977],"content":"After 03:14:07, January 19, 2038, UTC (using <ph id=\"ph1\">`_time32`</ph> and <ph id=\"ph2\">`time32_t`</ph>).","source":"After 03:14:07, January 19, 2038, UTC (using `_time32` and `time32_t`)."},{"pos":[1987,2061],"content":"After 23:59:59, December 31, 3000, UTC (using <ph id=\"ph1\">`_time64`</ph> and <ph id=\"ph2\">`__time64_t`</ph>).","source":"After 23:59:59, December 31, 3000, UTC (using `_time64` and `__time64_t`)."},{"pos":[2082,2305],"content":", which uses the <ph id=\"ph1\">`__time64_t`</ph> structure, allows dates to be expressed up through 23:59:59, December 31, 3000, coordinated universal time (UTC), whereas <ph id=\"ph2\">`_localtime32`</ph> represents dates through 23:59:59 January 18, 2038, UTC.","source":", which uses the `__time64_t` structure, allows dates to be expressed up through 23:59:59, December 31, 3000, coordinated universal time (UTC), whereas `_localtime32` represents dates through 23:59:59 January 18, 2038, UTC."},{"content":"is an inline function which evaluates to <ph id=\"ph1\">`_localtime64`</ph>, and <ph id=\"ph2\">`time_t`</ph> is equivalent to <ph id=\"ph3\">`__time64_t`</ph>.","pos":[2324,2424],"source":" is an inline function which evaluates to `_localtime64`, and `time_t` is equivalent to `__time64_t`."},{"content":"If you need to force the compiler to interpret <ph id=\"ph1\">`time_t`</ph>as the old 32-bit <ph id=\"ph2\">`time_t`</ph>, you can define <ph id=\"ph3\">`_USE_32BIT_TIME_T`</ph>.","pos":[2425,2543],"source":" If you need to force the compiler to interpret `time_t`as the old 32-bit `time_t`, you can define `_USE_32BIT_TIME_T`."},{"content":"Doing this will cause <ph id=\"ph1\">`localtime`</ph> to evaluate to <ph id=\"ph2\">`_localtime32`</ph>.","pos":[2544,2608],"source":" Doing this will cause `localtime` to evaluate to `_localtime32`."},{"content":"This is not recommended because your application may fail after January 18, 2038, and it is not allowed on 64-bit platforms.","pos":[2609,2733]},{"pos":[2740,2875],"content":"The fields of the structure type <bpt id=\"p1\">[</bpt>tm<ept id=\"p1\">](../../c-runtime-library/standard-types.md)</ept> store the following values, each of which is an <ph id=\"ph1\">`int`</ph>:","source":"The fields of the structure type [tm](../../c-runtime-library/standard-types.md) store the following values, each of which is an `int`:"},{"pos":[2882,2924],"content":"`tm_sec`  \nSeconds after minute (0 – 59).","leadings":[""," "],"nodes":[{"content":"Seconds after minute (0 – 59).","pos":[11,41]}]},{"pos":[2931,2971],"content":"`tm_min`  \nMinutes after hour (0 – 59).","leadings":[""," "],"nodes":[{"content":"Minutes after hour (0 – 59).","pos":[11,39]}]},{"pos":[2978,3021],"content":"`tm_hour`  \nHours after midnight (0 – 23).","leadings":[""," "],"nodes":[{"content":"Hours after midnight (0 – 23).","pos":[12,42]}]},{"pos":[3028,3063],"content":"`tm_mday`  \nDay of month (1 – 31).","leadings":[""," "],"nodes":[{"content":"Day of month (1 – 31).","pos":[12,34]}]},{"pos":[3070,3110],"content":"`tm_mon`  \nMonth (0 – 11; January = 0).","leadings":[""," "],"nodes":[{"content":"Month (0 – 11; January = 0).","pos":[11,39]}]},{"pos":[3117,3161],"content":"`tm_year`  \nYear (current year minus 1900).","leadings":[""," "],"nodes":[{"content":"Year (current year minus 1900).","pos":[12,43]}]},{"pos":[3168,3213],"content":"`tm_wday`  \nDay of week (0 – 6; Sunday = 0).","leadings":[""," "],"nodes":[{"content":"Day of week (0 – 6; Sunday = 0).","pos":[12,44]}]},{"pos":[3220,3270],"content":"`tm_yday`  \nDay of year (0 – 365; January 1 = 0).","leadings":[""," "],"nodes":[{"content":"Day of year (0 – 365; January 1 = 0).","pos":[12,49]}]},{"pos":[3277,3623],"content":"`tm_isdst`  \nPositive value if daylight saving time is in effect; 0 if daylight saving time is not in effect; negative value if status of daylight saving time is unknown. If the `TZ` environment variable is set, the C run-time library assumes rules appropriate to the United States for implementing the calculation of daylight-saving time (DST).","leadings":[""," "],"nodes":[{"content":"Positive value if daylight saving time is in effect; 0 if daylight saving time is not in effect; negative value if status of daylight saving time is unknown. If the `TZ` environment variable is set, the C run-time library assumes rules appropriate to the United States for implementing the calculation of daylight-saving time (DST).","pos":[13,345],"nodes":[{"content":"Positive value if daylight saving time is in effect; 0 if daylight saving time is not in effect; negative value if status of daylight saving time is unknown.","pos":[0,157]},{"content":"If the <ph id=\"ph1\">`TZ`</ph> environment variable is set, the C run-time library assumes rules appropriate to the United States for implementing the calculation of daylight-saving time (DST).","pos":[158,332],"source":" If the `TZ` environment variable is set, the C run-time library assumes rules appropriate to the United States for implementing the calculation of daylight-saving time (DST)."}]}]},{"content":"Remarks","pos":[3632,3639]},{"content":"The <ph id=\"ph1\">`localtime`</ph> function converts a time stored as a <bpt id=\"p1\">[</bpt>time_t<ept id=\"p1\">](../../c-runtime-library/standard-types.md)</ept> value and stores the result in a structure of type <ph id=\"ph2\">`tm`</ph>.","pos":[3643,3804],"source":"The `localtime` function converts a time stored as a [time_t](../../c-runtime-library/standard-types.md) value and stores the result in a structure of type `tm`."},{"content":"The <ph id=\"ph1\">`long`</ph> value <ph id=\"ph2\">`timer`</ph> represents the seconds elapsed since midnight (00:00:00), January 1, 1970, UTC.","pos":[3805,3909],"source":" The `long` value `timer` represents the seconds elapsed since midnight (00:00:00), January 1, 1970, UTC."},{"content":"This value is usually obtained from the <ph id=\"ph1\">`time`</ph> function.","pos":[3910,3966],"source":" This value is usually obtained from the `time` function."},{"content":"Both the 32-bit and 64-bit versions of <ph id=\"ph1\">`gmtime`</ph>, <ph id=\"ph2\">`mktime`</ph>, <ph id=\"ph3\">`mkgmtime`</ph>, and <ph id=\"ph4\">`localtime`</ph> all use a single <ph id=\"ph5\">`tm`</ph> structure per thread for the conversion.","pos":[3973,4122],"source":"Both the 32-bit and 64-bit versions of `gmtime`, `mktime`, `mkgmtime`, and `localtime` all use a single `tm` structure per thread for the conversion."},{"content":"Each call to one of these routines destroys the result of the previous call.","pos":[4123,4199]},{"content":"corrects for the local time zone if the user first sets the global environment variable <ph id=\"ph1\">`TZ`</ph>.","pos":[4218,4311],"source":" corrects for the local time zone if the user first sets the global environment variable `TZ`."},{"content":"When <ph id=\"ph1\">`TZ`</ph> is set, three other environment variables (<ph id=\"ph2\">`_timezone`</ph>, <ph id=\"ph3\">`_daylight`</ph>, and <ph id=\"ph4\">`_tzname`</ph>) are automatically set as well.","pos":[4312,4436],"source":" When `TZ` is set, three other environment variables (`_timezone`, `_daylight`, and `_tzname`) are automatically set as well."},{"content":"If the <ph id=\"ph1\">`TZ`</ph> variable is not set, <ph id=\"ph2\">`localtime`</ph> attempts to use the time zone information specified in the Date/Time application in Control Panel.","pos":[4437,4580],"source":" If the `TZ` variable is not set, `localtime` attempts to use the time zone information specified in the Date/Time application in Control Panel."},{"content":"If this information cannot be obtained, PST8PDT, which signifies the Pacific Time Zone, is used by default.","pos":[4581,4688]},{"content":"See <bpt id=\"p1\">[</bpt>_tzset<ept id=\"p1\">](../../c-runtime-library/reference/tzset.md)</ept> for a description of these variables.","pos":[4689,4783],"source":" See [_tzset](../../c-runtime-library/reference/tzset.md) for a description of these variables."},{"content":"is a Microsoft extension and not part of the ANSI standard definition of <ph id=\"ph1\">`localtime`</ph>.","pos":[4789,4874],"source":" is a Microsoft extension and not part of the ANSI standard definition of `localtime`."},{"pos":[4882,4982],"content":"[!NOTE]\n The target environment should try to determine whether daylight saving time is in effect.","leadings":["","> "],"nodes":[{"content":"The target environment should try to determine whether daylight saving time is in effect.","pos":[9,98]}]},{"content":"These functions validate their parameters.","pos":[4989,5031]},{"content":"If <ph id=\"ph1\">`timer`</ph> is a null pointer, or if the timer value is negative, these functions invoke an invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[5032,5238],"source":" If `timer` is a null pointer, or if the timer value is negative, these functions invoke an invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, the functions return <ph id=\"ph1\">`NULL`</ph> and set <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`EINVAL`</ph>.","pos":[5239,5332],"source":" If execution is allowed to continue, the functions return `NULL` and set `errno` to `EINVAL`."},{"content":"Requirements","pos":[5341,5353]},{"content":"Routine","pos":[5360,5367]},{"content":"Required header","pos":[5368,5383]},{"content":"time.h&gt;","pos":[5442,5449],"source":"time.h>"},{"content":"time.h&gt;","pos":[5471,5478],"source":"time.h>"},{"content":"time.h&gt;","pos":[5500,5507],"source":"time.h>"},{"pos":[5515,5639],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[5648,5655]},{"content":".NET Framework Equivalent","pos":[7038,7063]},{"content":"System::DateTime::ToLocalTime","pos":[7068,7097]},{"content":"See Also","pos":[7182,7190]},{"content":"Time Management","pos":[7195,7210]},{"content":"asctime, _wasctime","pos":[7261,7279]},{"content":"ctime, _ctime32, _ctime64, _wctime, _wctime32, _wctime64","pos":[7341,7397]},{"content":"_ftime, _ftime32, _ftime64","pos":[7489,7515]},{"content":"gmtime, _gmtime32, _gmtime64","pos":[7582,7610]},{"content":"localtime_s, _localtime32_s, _localtime64_s","pos":[7680,7723]},{"content":"time, _time32, _time64","pos":[7808,7830]},{"content":"_tzset","pos":[7894,7900]}],"content":"---\ntitle: \"localtime, _localtime32, _localtime64 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_localtime64\"\n  - \"_localtime32\"\n  - \"localtime\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-time-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"localtime64\"\n  - \"_localtime64\"\n  - \"localtime32\"\n  - \"localtime\"\n  - \"_localtime32\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"localtime32 function\"\n  - \"_localtime32 function\"\n  - \"_localtime64 function\"\n  - \"localtime64 function\"\n  - \"localtime function\"\n  - \"time, converting values\"\nms.assetid: 4260ec3d-43ee-4538-b998-402a282bb9b8\ncaps.latest.revision: 28\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# localtime, _localtime32, _localtime64\nConvert a time value and correct for the local time zone. More secure versions of these functions are available; see [localtime_s, _localtime32_s, _localtime64_s](../../c-runtime-library/reference/localtime-s-localtime32-s-localtime64-s.md).  \n  \n## Syntax  \n  \n```  \nstruct tm *localtime(  \n   const time_t *timer   \n);  \nstruct tm *_localtime32(  \n   const __time32_t *timer  \n);  \nstruct tm *_localtime64(  \n   const __time64_t *timer   \n);  \n```  \n  \n#### Parameters  \n `timer`  \n Pointer to stored time.  \n  \n## Return Value  \n Return a pointer to the structure result, or `NULL` if the date passed to the function is:  \n  \n-   Before midnight, January 1, 1970.  \n  \n-   After 03:14:07, January 19, 2038, UTC (using `_time32` and `time32_t`).  \n  \n-   After 23:59:59, December 31, 3000, UTC (using `_time64` and `__time64_t`).  \n  \n `_localtime64`, which uses the `__time64_t` structure, allows dates to be expressed up through 23:59:59, December 31, 3000, coordinated universal time (UTC), whereas `_localtime32` represents dates through 23:59:59 January 18, 2038, UTC.  \n  \n `localtime` is an inline function which evaluates to `_localtime64`, and `time_t` is equivalent to `__time64_t`. If you need to force the compiler to interpret `time_t`as the old 32-bit `time_t`, you can define `_USE_32BIT_TIME_T`. Doing this will cause `localtime` to evaluate to `_localtime32`. This is not recommended because your application may fail after January 18, 2038, and it is not allowed on 64-bit platforms.  \n  \n The fields of the structure type [tm](../../c-runtime-library/standard-types.md) store the following values, each of which is an `int`:  \n  \n `tm_sec`  \n Seconds after minute (0 – 59).  \n  \n `tm_min`  \n Minutes after hour (0 – 59).  \n  \n `tm_hour`  \n Hours after midnight (0 – 23).  \n  \n `tm_mday`  \n Day of month (1 – 31).  \n  \n `tm_mon`  \n Month (0 – 11; January = 0).  \n  \n `tm_year`  \n Year (current year minus 1900).  \n  \n `tm_wday`  \n Day of week (0 – 6; Sunday = 0).  \n  \n `tm_yday`  \n Day of year (0 – 365; January 1 = 0).  \n  \n `tm_isdst`  \n Positive value if daylight saving time is in effect; 0 if daylight saving time is not in effect; negative value if status of daylight saving time is unknown. If the `TZ` environment variable is set, the C run-time library assumes rules appropriate to the United States for implementing the calculation of daylight-saving time (DST).  \n  \n## Remarks  \n The `localtime` function converts a time stored as a [time_t](../../c-runtime-library/standard-types.md) value and stores the result in a structure of type `tm`. The `long` value `timer` represents the seconds elapsed since midnight (00:00:00), January 1, 1970, UTC. This value is usually obtained from the `time` function.  \n  \n Both the 32-bit and 64-bit versions of `gmtime`, `mktime`, `mkgmtime`, and `localtime` all use a single `tm` structure per thread for the conversion. Each call to one of these routines destroys the result of the previous call.  \n  \n `localtime` corrects for the local time zone if the user first sets the global environment variable `TZ`. When `TZ` is set, three other environment variables (`_timezone`, `_daylight`, and `_tzname`) are automatically set as well. If the `TZ` variable is not set, `localtime` attempts to use the time zone information specified in the Date/Time application in Control Panel. If this information cannot be obtained, PST8PDT, which signifies the Pacific Time Zone, is used by default. See [_tzset](../../c-runtime-library/reference/tzset.md) for a description of these variables. `TZ` is a Microsoft extension and not part of the ANSI standard definition of `localtime`.  \n  \n> [!NOTE]\n>  The target environment should try to determine whether daylight saving time is in effect.  \n  \n These functions validate their parameters. If `timer` is a null pointer, or if the timer value is negative, these functions invoke an invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, the functions return `NULL` and set `errno` to `EINVAL`.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`localtime`|\\<time.h>|  \n|`_localtime32`|\\<time.h>|  \n|`_localtime64`|\\<time.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_localtime.cpp  \n// compile with: /W3  \n/* This program uses _time64 to get the current time   \n * and then uses localtime64() to convert this time to a structure   \n * representing the local time. The program converts the result   \n * from a 24-hour clock to a 12-hour clock and determines the   \n * proper extension (AM or PM).  \n */  \n  \n#include <stdio.h>  \n#include <string.h>  \n#include <time.h>  \n  \nint main( void )  \n{  \n        struct tm *newtime;  \n        char am_pm[] = \"AM\";  \n        __time64_t long_time;  \n  \n        _time64( &long_time );           // Get time as 64-bit integer.  \n                                         // Convert to local time.  \n        newtime = _localtime64( &long_time ); // C4996  \n        // Note: _localtime64 deprecated; consider _localetime64_s  \n  \n        if( newtime->tm_hour > 12 )        // Set up extension.  \n                strcpy_s( am_pm, sizeof(am_pm), \"PM\" );  \n        if( newtime->tm_hour > 12 )        // Convert from 24-hour  \n                newtime->tm_hour -= 12;    //   to 12-hour clock.  \n        if( newtime->tm_hour == 0 )        // Set hour to 12 if midnight.  \n                newtime->tm_hour = 12;  \n  \n        char buff[30];  \n        asctime_s( buff, sizeof(buff), newtime );  \n        printf( \"%.19s %s\\n\", buff, am_pm );  \n}  \n```  \n  \n```Output  \nTue Feb 12 10:05:58 AM  \n```  \n  \n## .NET Framework Equivalent  \n [System::DateTime::ToLocalTime](https://msdn.microsoft.com/en-us/library/system.datetime.tolocaltime.aspx)  \n  \n## See Also  \n [Time Management](../../c-runtime-library/time-management.md)   \n [asctime, _wasctime](../../c-runtime-library/reference/asctime-wasctime.md)   \n [ctime, _ctime32, _ctime64, _wctime, _wctime32, _wctime64](../../c-runtime-library/reference/ctime-ctime32-ctime64-wctime-wctime32-wctime64.md)   \n [_ftime, _ftime32, _ftime64](../../c-runtime-library/reference/ftime-ftime32-ftime64.md)   \n [gmtime, _gmtime32, _gmtime64](../../c-runtime-library/reference/gmtime-gmtime32-gmtime64.md)   \n [localtime_s, _localtime32_s, _localtime64_s](../../c-runtime-library/reference/localtime-s-localtime32-s-localtime64-s.md)   \n [time, _time32, _time64](../../c-runtime-library/reference/time-time32-time64.md)   \n [_tzset](../../c-runtime-library/reference/tzset.md)"}