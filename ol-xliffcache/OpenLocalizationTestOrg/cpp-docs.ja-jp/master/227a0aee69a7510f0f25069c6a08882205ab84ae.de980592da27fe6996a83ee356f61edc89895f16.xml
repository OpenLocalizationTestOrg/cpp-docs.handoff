{"nodes":[{"pos":[12,56],"content":"CMFCToolBarMenuButton Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMFCToolBarMenuButton Class | Microsoft Docs","pos":[0,44]}]},{"pos":[637,664],"content":"CMFCToolBarMenuButton Class","linkify":"CMFCToolBarMenuButton Class","nodes":[{"content":"CMFCToolBarMenuButton Class","pos":[0,27]}]},{"content":"A toolbar button that contains a pop-up menu.","pos":[665,710]},{"pos":[719,725],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[806,813],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[823,842],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[849,853]},{"content":"Description","pos":[854,865]},{"pos":[903,996],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::CMFCToolBarMenuButton<ept id=\"p1\">](#cmfctoolbarmenubutton__cmfctoolbarmenubutton)</ept>","source":"[CMFCToolBarMenuButton::CMFCToolBarMenuButton](#cmfctoolbarmenubutton__cmfctoolbarmenubutton)"},{"pos":[997,1041],"content":"Constructs a <ph id=\"ph1\">`CMFCToolBarMenuButton`</ph> object.","source":"Constructs a `CMFCToolBarMenuButton` object."},{"pos":[1052,1066],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1073,1077]},{"content":"Description","pos":[1078,1089]},{"pos":[1127,1200],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::CompareWith<ept id=\"p1\">](#cmfctoolbarmenubutton__comparewith)</ept>","source":"[CMFCToolBarMenuButton::CompareWith](#cmfctoolbarmenubutton__comparewith)"},{"content":"Compares this instance with the provided <ph id=\"ph1\">`CMFCToolBarButton`</ph> object.","pos":[1201,1269],"source":"Compares this instance with the provided `CMFCToolBarButton` object."},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::CompareWith<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__comparewith)</ept>.)","pos":[1270,1394],"source":" (Overrides [CMFCToolBarButton::CompareWith](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__comparewith).)"},{"pos":[1399,1466],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::CopyFrom<ept id=\"p1\">](#cmfctoolbarmenubutton__copyfrom)</ept>","source":"[CMFCToolBarMenuButton::CopyFrom](#cmfctoolbarmenubutton__copyfrom)"},{"content":"Copies the properties of another toolbar button to the current button.","pos":[1467,1537]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::CopyFrom<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__copyfrom)</ept>.)","pos":[1538,1656],"source":" (Overrides [CMFCToolBarButton::CopyFrom](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__copyfrom).)"},{"pos":[1661,1740],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::CreateFromMenu<ept id=\"p1\">](#cmfctoolbarmenubutton__createfrommenu)</ept>","source":"[CMFCToolBarMenuButton::CreateFromMenu](#cmfctoolbarmenubutton__createfrommenu)"},{"content":"Initializes the toolbar menu from a Windows menu handle.","pos":[1741,1797]},{"pos":[1802,1873],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::CreateMenu<ept id=\"p1\">](#cmfctoolbarmenubutton__createmenu)</ept>","source":"[CMFCToolBarMenuButton::CreateMenu](#cmfctoolbarmenubutton__createmenu)"},{"content":"Creates a Windows menu that consists of the commands in the toolbar menu.","pos":[1874,1947]},{"content":"Returns a handle to the Windows menu.","pos":[1948,1985]},{"pos":[1990,2071],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::CreatePopupMenu<ept id=\"p1\">](#cmfctoolbarmenubutton__createpopupmenu)</ept>","source":"[CMFCToolBarMenuButton::CreatePopupMenu](#cmfctoolbarmenubutton__createpopupmenu)"},{"pos":[2072,2198],"content":"Creates a pop-up menu object ( <bpt id=\"p1\">[</bpt>CMFCPopupMenu Class<ept id=\"p1\">](../../mfc/reference/cmfcpopupmenu-class.md)</ept>) to display the toolbar menu.","source":"Creates a pop-up menu object ( [CMFCPopupMenu Class](../../mfc/reference/cmfcpopupmenu-class.md)) to display the toolbar menu."},{"pos":[2203,2294],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::EnableQuickCustomize<ept id=\"p1\">](#cmfctoolbarmenubutton__enablequickcustomize)</ept>","source":"[CMFCToolBarMenuButton::EnableQuickCustomize](#cmfctoolbarmenubutton__enablequickcustomize)"},{"pos":[2300,2373],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::GetCommands<ept id=\"p1\">](#cmfctoolbarmenubutton__getcommands)</ept>","source":"[CMFCToolBarMenuButton::GetCommands](#cmfctoolbarmenubutton__getcommands)"},{"content":"Gives read-only access to the list of commands in the toolbar menu.","pos":[2374,2441]},{"pos":[2446,2521],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::GetImageRect<ept id=\"p1\">](#cmfctoolbarmenubutton__getimagerect)</ept>","source":"[CMFCToolBarMenuButton::GetImageRect](#cmfctoolbarmenubutton__getimagerect)"},{"content":"Retrieves the bounding rectangle for the button image.","pos":[2522,2576]},{"pos":[2581,2660],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::GetPaletteRows<ept id=\"p1\">](#cmfctoolbarmenubutton__getpaletterows)</ept>","source":"[CMFCToolBarMenuButton::GetPaletteRows](#cmfctoolbarmenubutton__getpaletterows)"},{"content":"Returns the number of rows in the pop-up menu when the menu is in palette mode.","pos":[2661,2740]},{"pos":[2745,2820],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::GetPopupMenu<ept id=\"p1\">](#cmfctoolbarmenubutton__getpopupmenu)</ept>","source":"[CMFCToolBarMenuButton::GetPopupMenu](#cmfctoolbarmenubutton__getpopupmenu)"},{"content":"Returns a pointer to the pop-up menu object that is associated with the button.","pos":[2821,2900]},{"pos":[2905,2974],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::HasButton<ept id=\"p1\">](#cmfctoolbarmenubutton__hasbutton)</ept>","source":"[CMFCToolBarMenuButton::HasButton](#cmfctoolbarmenubutton__hasbutton)"},{"pos":[2980,3057],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::HaveHotBorder<ept id=\"p1\">](#cmfctoolbarmenubutton__havehotborder)</ept>","source":"[CMFCToolBarMenuButton::HaveHotBorder](#cmfctoolbarmenubutton__havehotborder)"},{"content":"Determines whether a border of the button is displayed when a user selects the button.","pos":[3058,3144]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::HaveHotBorder<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__havehotborder)</ept>.)","pos":[3145,3273],"source":" (Overrides [CMFCToolBarButton::HaveHotBorder](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__havehotborder).)"},{"pos":[3278,3345],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::IsBorder<ept id=\"p1\">](#cmfctoolbarmenubutton__isborder)</ept>","source":"[CMFCToolBarMenuButton::IsBorder](#cmfctoolbarmenubutton__isborder)"},{"pos":[3351,3432],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::IsClickedOnMenu<ept id=\"p1\">](#cmfctoolbarmenubutton__isclickedonmenu)</ept>","source":"[CMFCToolBarMenuButton::IsClickedOnMenu](#cmfctoolbarmenubutton__isclickedonmenu)"},{"pos":[3438,3515],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::IsDroppedDown<ept id=\"p1\">](#cmfctoolbarmenubutton__isdroppeddown)</ept>","source":"[CMFCToolBarMenuButton::IsDroppedDown](#cmfctoolbarmenubutton__isdroppeddown)"},{"content":"Determines whether the pop-up menu is displayed.","pos":[3516,3564]},{"pos":[3569,3656],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::IsEmptyMenuAllowed<ept id=\"p1\">](#cmfctoolbarmenubutton__isemptymenuallowed)</ept>","source":"[CMFCToolBarMenuButton::IsEmptyMenuAllowed](#cmfctoolbarmenubutton__isemptymenuallowed)"},{"content":"Called by the framework to determine whether a user can open a submenu from the selected menu item.","pos":[3657,3756]},{"pos":[3761,3834],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::IsExclusive<ept id=\"p1\">](#cmfctoolbarmenubutton__isexclusive)</ept>","source":"[CMFCToolBarMenuButton::IsExclusive](#cmfctoolbarmenubutton__isexclusive)"},{"content":"Determines whether the button is in exclusive mode, that is, whether the pop-up menu remains open even when the user moves the pointer over another toolbar or button.","pos":[3835,4001]},{"pos":[4006,4091],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::IsMenuPaletteMode<ept id=\"p1\">](#cmfctoolbarmenubutton__ismenupalettemode)</ept>","source":"[CMFCToolBarMenuButton::IsMenuPaletteMode](#cmfctoolbarmenubutton__ismenupalettemode)"},{"content":"Determines whether the pop-up menu is in palette mode.","pos":[4092,4146]},{"pos":[4151,4224],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::IsQuickMode<ept id=\"p1\">](#cmfctoolbarmenubutton__isquickmode)</ept>","source":"[CMFCToolBarMenuButton::IsQuickMode](#cmfctoolbarmenubutton__isquickmode)"},{"pos":[4230,4307],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::IsTearOffMenu<ept id=\"p1\">](#cmfctoolbarmenubutton__istearoffmenu)</ept>","source":"[CMFCToolBarMenuButton::IsTearOffMenu](#cmfctoolbarmenubutton__istearoffmenu)"},{"content":"Determines whether the pop-up menu has a tear-off bar.","pos":[4308,4362]},{"pos":[4367,4462],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::OnAfterCreatePopupMenu<ept id=\"p1\">](#cmfctoolbarmenubutton__onaftercreatepopupmenu)</ept>","source":"[CMFCToolBarMenuButton::OnAfterCreatePopupMenu](#cmfctoolbarmenubutton__onaftercreatepopupmenu)"},{"pos":[4468,4543],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::OnBeforeDrag<ept id=\"p1\">](#cmfctoolbarmenubutton__onbeforedrag)</ept>","source":"[CMFCToolBarMenuButton::OnBeforeDrag](#cmfctoolbarmenubutton__onbeforedrag)"},{"content":"Specifies whether the button can be dragged.","pos":[4544,4588]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnBeforeDrag<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onbeforedrag)</ept>.)","pos":[4589,4715],"source":" (Overrides [CMFCToolBarButton::OnBeforeDrag](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onbeforedrag).)"},{"pos":[4720,4801],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::OnCalculateSize<ept id=\"p1\">](#cmfctoolbarmenubutton__oncalculatesize)</ept>","source":"[CMFCToolBarMenuButton::OnCalculateSize](#cmfctoolbarmenubutton__oncalculatesize)"},{"content":"Called by the framework to calculate the size of the button for the specified device context and docking state.","pos":[4802,4913]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnCalculateSize<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__oncalculatesize)</ept>.)","pos":[4914,5046],"source":" (Overrides [CMFCToolBarButton::OnCalculateSize](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__oncalculatesize).)"},{"pos":[5051,5126],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::OnCancelMode<ept id=\"p1\">](#cmfctoolbarmenubutton__oncancelmode)</ept>","source":"[CMFCToolBarMenuButton::OnCancelMode](#cmfctoolbarmenubutton__oncancelmode)"},{"content":"Called by the framework to handle the <bpt id=\"p1\">[</bpt>WM_CANCELMODE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632615)</ept> message.","pos":[5127,5249],"source":"Called by the framework to handle the [WM_CANCELMODE](http://msdn.microsoft.com/library/windows/desktop/ms632615) message."},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnCancelMode<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__oncancelmode)</ept>.)","pos":[5250,5376],"source":" (Overrides [CMFCToolBarButton::OnCancelMode](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__oncancelmode).)"},{"pos":[5381,5466],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::OnChangeParentWnd<ept id=\"p1\">](#cmfctoolbarmenubutton__onchangeparentwnd)</ept>","source":"[CMFCToolBarMenuButton::OnChangeParentWnd](#cmfctoolbarmenubutton__onchangeparentwnd)"},{"content":"Called by the framework when the button is inserted into a new toolbar.","pos":[5467,5538]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnChangeParentWnd<ept id=\"p1\">](cmfctoolbarbutton-class.md#cmfctoolbarbutton__onchangeparentwnd)</ept>.)","pos":[5539,5655],"source":" (Overrides [CMFCToolBarButton::OnChangeParentWnd](cmfctoolbarbutton-class.md#cmfctoolbarbutton__onchangeparentwnd).)"},{"pos":[5660,5725],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::OnClick<ept id=\"p1\">](#cmfctoolbarmenubutton__onclick)</ept>","source":"[CMFCToolBarMenuButton::OnClick](#cmfctoolbarmenubutton__onclick)"},{"content":"Called by the framework when the user clicks the mouse button.","pos":[5726,5788]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnClick<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onclick)</ept>.)","pos":[5789,5905],"source":" (Overrides [CMFCToolBarButton::OnClick](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onclick).)"},{"pos":[5910,5991],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::OnClickMenuItem<ept id=\"p1\">](#cmfctoolbarmenubutton__onclickmenuitem)</ept>","source":"[CMFCToolBarMenuButton::OnClickMenuItem](#cmfctoolbarmenubutton__onclickmenuitem)"},{"content":"Called by the framework when the user selects an item in the pop-up menu.","pos":[5992,6065]},{"pos":[6070,6147],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::OnContextHelp<ept id=\"p1\">](#cmfctoolbarmenubutton__oncontexthelp)</ept>","source":"[CMFCToolBarMenuButton::OnContextHelp](#cmfctoolbarmenubutton__oncontexthelp)"},{"content":"Called by the framework when the parent toolbar handles a <ph id=\"ph1\">`WM_HELPHITTEST`</ph> message.","pos":[6148,6231],"source":"Called by the framework when the parent toolbar handles a `WM_HELPHITTEST` message."},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnContextHelp<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__oncontexthelp)</ept>.)","pos":[6232,6360],"source":" (Overrides [CMFCToolBarButton::OnContextHelp](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__oncontexthelp).)"},{"pos":[6365,6428],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::OnDraw<ept id=\"p1\">](#cmfctoolbarmenubutton__ondraw)</ept>","source":"[CMFCToolBarMenuButton::OnDraw](#cmfctoolbarmenubutton__ondraw)"},{"content":"Called by the framework to draw the button by using the specified styles and options.","pos":[6429,6514]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnDraw<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__ondraw)</ept>.)","pos":[6515,6629],"source":" (Overrides [CMFCToolBarButton::OnDraw](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__ondraw).)"},{"pos":[6634,6727],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::OnDrawOnCustomizeList<ept id=\"p1\">](#cmfctoolbarmenubutton__ondrawoncustomizelist)</ept>","source":"[CMFCToolBarMenuButton::OnDrawOnCustomizeList](#cmfctoolbarmenubutton__ondrawoncustomizelist)"},{"content":"Called by the framework to draw the button in the <bpt id=\"p1\">**</bpt>Commands<ept id=\"p1\">**</ept> pane of the <bpt id=\"p2\">**</bpt>Customize<ept id=\"p2\">**</ept> dialog box.","pos":[6728,6828],"source":"Called by the framework to draw the button in the **Commands** pane of the **Customize** dialog box."},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnDrawOnCustomizeList<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__ondrawoncustomizelist)</ept>.)","pos":[6829,6973],"source":" (Overrides [CMFCToolBarButton::OnDrawOnCustomizeList](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__ondrawoncustomizelist).)"},{"pos":[6978,7055],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::OpenPopupMenu<ept id=\"p1\">](#cmfctoolbarmenubutton__openpopupmenu)</ept>","source":"[CMFCToolBarMenuButton::OpenPopupMenu](#cmfctoolbarmenubutton__openpopupmenu)"},{"content":"Called by the framework when the user opens the pop-up menu.","pos":[7056,7116]},{"pos":[7121,7210],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::ResetImageToDefault<ept id=\"p1\">](#cmfctoolbarmenubutton__resetimagetodefault)</ept>","source":"[CMFCToolBarMenuButton::ResetImageToDefault](#cmfctoolbarmenubutton__resetimagetodefault)"},{"content":"Sets to the default value the image that is associated with the button.","pos":[7211,7282]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::ResetImageToDefault<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__resetimagetodefault)</ept>.)","pos":[7283,7423],"source":" (Overrides [CMFCToolBarButton::ResetImageToDefault](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__resetimagetodefault).)"},{"pos":[7428,7503],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::SaveBarState<ept id=\"p1\">](#cmfctoolbarmenubutton__savebarstate)</ept>","source":"[CMFCToolBarMenuButton::SaveBarState](#cmfctoolbarmenubutton__savebarstate)"},{"content":"Saves the state of the toolbar button.","pos":[7504,7542]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::SaveBarState<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__savebarstate)</ept>.)","pos":[7543,7669],"source":" (Overrides [CMFCToolBarButton::SaveBarState](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__savebarstate).)"},{"pos":[7674,7743],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::Serialize<ept id=\"p1\">](#cmfctoolbarmenubutton__serialize)</ept>","source":"[CMFCToolBarMenuButton::Serialize](#cmfctoolbarmenubutton__serialize)"},{"content":"Reads this object from an archive or writes it to an archive.","pos":[7744,7805]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::Serialize<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__serialize)</ept>.)","pos":[7806,7926],"source":" (Overrides [CMFCToolBarButton::Serialize](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__serialize).)"},{"pos":[7931,8002],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::SetACCData<ept id=\"p1\">](#cmfctoolbarmenubutton__setaccdata)</ept>","source":"[CMFCToolBarMenuButton::SetACCData](#cmfctoolbarmenubutton__setaccdata)"},{"content":"Populates the provided <ph id=\"ph1\">`CAccessibilityData`</ph> object with accessibility data from the toolbar button.","pos":[8003,8102],"source":"Populates the provided `CAccessibilityData` object with accessibility data from the toolbar button."},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::SetACCData<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__setaccdata)</ept>.)","pos":[8103,8225],"source":" (Overrides [CMFCToolBarButton::SetACCData](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__setaccdata).)"},{"pos":[8230,8303],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::SetMenuOnly<ept id=\"p1\">](#cmfctoolbarmenubutton__setmenuonly)</ept>","source":"[CMFCToolBarMenuButton::SetMenuOnly](#cmfctoolbarmenubutton__setmenuonly)"},{"content":"Specifies whether the button can be added to a toolbar.","pos":[8304,8359]},{"pos":[8364,8451],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::SetMenuPaletteMode<ept id=\"p1\">](#cmfctoolbarmenubutton__setmenupalettemode)</ept>","source":"[CMFCToolBarMenuButton::SetMenuPaletteMode](#cmfctoolbarmenubutton__setmenupalettemode)"},{"content":"Specifies whether the pop-up menu is in palette mode.","pos":[8452,8505]},{"pos":[8510,8587],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::SetMessageWnd<ept id=\"p1\">](#cmfctoolbarmenubutton__setmessagewnd)</ept>","source":"[CMFCToolBarMenuButton::SetMessageWnd](#cmfctoolbarmenubutton__setmessagewnd)"},{"pos":[8593,8660],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::SetRadio<ept id=\"p1\">](#cmfctoolbarmenubutton__setradio)</ept>","source":"[CMFCToolBarMenuButton::SetRadio](#cmfctoolbarmenubutton__setradio)"},{"content":"Forces the toolbar menu button to display an icon indicating that it is selected.","pos":[8661,8742]},{"pos":[8747,8818],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::SetTearOff<ept id=\"p1\">](#cmfctoolbarmenubutton__settearoff)</ept>","source":"[CMFCToolBarMenuButton::SetTearOff](#cmfctoolbarmenubutton__settearoff)"},{"content":"Specifies a tear-off bar ID for the pop-up menu.","pos":[8819,8867]},{"pos":[8878,8895],"content":"Protected Methods","linkify":"Protected Methods","nodes":[{"content":"Protected Methods","pos":[0,17]}]},{"content":"Name","pos":[8902,8906]},{"content":"Description","pos":[8907,8918]},{"pos":[8956,9039],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::DrawDocumentIcon<ept id=\"p1\">](#cmfctoolbarmenubutton__drawdocumenticon)</ept>","source":"[CMFCToolBarMenuButton::DrawDocumentIcon](#cmfctoolbarmenubutton__drawdocumenticon)"},{"content":"Draws an icon on the menu button.","pos":[9040,9073]},{"pos":[9084,9096],"content":"Data Members","linkify":"Data Members","nodes":[{"content":"Data Members","pos":[0,12]}]},{"content":"Name","pos":[9103,9107]},{"content":"Description","pos":[9108,9119]},{"pos":[9157,9252],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::m_bAlwaysCallOwnerDraw<ept id=\"p1\">](#cmfctoolbarmenubutton__m_balwayscallownerdraw)</ept>","source":"[CMFCToolBarMenuButton::m_bAlwaysCallOwnerDraw](#cmfctoolbarmenubutton__m_balwayscallownerdraw)"},{"pos":[9253,9416],"content":"If <ph id=\"ph1\">`TRUE`</ph>, the framework always calls <bpt id=\"p1\">[</bpt>CFrameWndEx::OnDrawMenuImage<ept id=\"p1\">](../../mfc/reference/cframewndex-class.md#cframewndex__ondrawmenuimage)</ept> when a button is drawn.","source":"If `TRUE`, the framework always calls [CFrameWndEx::OnDrawMenuImage](../../mfc/reference/cframewndex-class.md#cframewndex__ondrawmenuimage) when a button is drawn."},{"pos":[9426,9433],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A <ph id=\"ph1\">`CMFCToolBarMenuButton`</ph> can appear as a menu, a menu item that has a sub-menu, a button that either executes a command or displays a menu, or a button that displays only a menu.","pos":[9437,9616],"source":"A `CMFCToolBarMenuButton` can appear as a menu, a menu item that has a sub-menu, a button that either executes a command or displays a menu, or a button that displays only a menu."},{"content":"You determine the behavior and appearance of the menu button by specifying parameters such as the image, text, menu handle, and command ID that is associated with the button in the constructor <ph id=\"ph1\">`CMFCToolbarMenuButton::CMFCToolbarMenuButton`</ph>.","pos":[9617,9857],"source":" You determine the behavior and appearance of the menu button by specifying parameters such as the image, text, menu handle, and command ID that is associated with the button in the constructor `CMFCToolbarMenuButton::CMFCToolbarMenuButton`."},{"content":"A custom class derived from the <ph id=\"ph1\">`CMFCToolbarMenuButton`</ph> class must use the <bpt id=\"p1\">[</bpt>DECLARE_SERIAL<ept id=\"p1\">](run-time-object-model-services.md#declare_serial)</ept> macro.","pos":[9864,10012],"source":"A custom class derived from the `CMFCToolbarMenuButton` class must use the [DECLARE_SERIAL](run-time-object-model-services.md#declare_serial) macro."},{"content":"The <bpt id=\"p1\">[</bpt>DECLARE_DYNCREATE<ept id=\"p1\">](run-time-object-model-services.md#declare_dyncreate)</ept> macro generates an error when the application closes.","pos":[10013,10143],"source":" The [DECLARE_DYNCREATE](run-time-object-model-services.md#declare_dyncreate) macro generates an error when the application closes."},{"pos":[10152,10159],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates how to configure a <ph id=\"ph1\">`CMFCToolBarMenuButton`</ph> object.","pos":[10163,10248],"source":"The following example demonstrates how to configure a `CMFCToolBarMenuButton` object."},{"content":"The code illustrates how to specify that the drop-down menu is in palette mode, and specify the ID for the tear-off bar that is created when the user drags the menu button off of a menu bar.","pos":[10249,10439]},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>Word Pad sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[10440,10520],"source":" This code snippet is part of the [Word Pad sample](../../visual-cpp-samples.md)."},{"pos":[10527,10629],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_WordPad#10<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cmfctoolbarmenubutton-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_WordPad#10](../../mfc/reference/codesnippet/cpp/cmfctoolbarmenubutton-class_1.cpp)]"},{"pos":[10638,10659],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[10663,10690],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](cobject-class.md)</ept>","source":"[CObject](cobject-class.md)"},{"pos":[10697,10764],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarButton<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept>","source":"[CMFCToolBarButton](../../mfc/reference/cmfctoolbarbutton-class.md)"},{"pos":[10771,10846],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton<ept id=\"p1\">](../../mfc/reference/cmfctoolbarmenubutton-class.md)</ept>","source":"[CMFCToolBarMenuButton](../../mfc/reference/cmfctoolbarmenubutton-class.md)"},{"pos":[10855,10867],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[10871,10905],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxtoolbarmenubutton.h","source":"**Header:** afxtoolbarmenubutton.h"},{"pos":[10915,11020],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__cmfctoolbarmenubutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::CMFCToolBarMenuButton","linkify":"<a name=\"cmfctoolbarmenubutton__cmfctoolbarmenubutton\"></a>  CMFCToolBarMenuButton::CMFCToolBarMenuButton","source":"<a name=\"cmfctoolbarmenubutton__cmfctoolbarmenubutton\"></a>  CMFCToolBarMenuButton::CMFCToolBarMenuButton"},{"pos":[11024,11068],"content":"Constructs a <ph id=\"ph1\">`CMFCToolBarMenuButton`</ph> object.","source":"Constructs a `CMFCToolBarMenuButton` object."},{"pos":[11317,11327],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`src`</ph>","pos":[11331,11341],"source":"[in] `src`"},{"content":"An existing <ph id=\"ph1\">`CMFCToolBarMenuButton`</ph> object to be copied into this <ph id=\"ph2\">`CMFCToolBarMenuButton`</ph> object.","pos":[11345,11442],"source":" An existing `CMFCToolBarMenuButton` object to be copied into this `CMFCToolBarMenuButton` object."},{"content":"[in] <ph id=\"ph1\">`uiID`</ph>","pos":[11449,11460],"source":"[in] `uiID`"},{"content":"The ID of the command to execute when a user clicks the button; or ( <ph id=\"ph1\">`UINT`</ph>)-1 for a menu button that does not directly execute a command.","pos":[11464,11602],"source":" The ID of the command to execute when a user clicks the button; or ( `UINT`)-1 for a menu button that does not directly execute a command."},{"content":"[in] <ph id=\"ph1\">`hMenu`</ph>","pos":[11609,11621],"source":"[in] `hMenu`"},{"content":"A handle to a menu; or <ph id=\"ph1\">`NULL`</ph> if the button does not have a menu.","pos":[11625,11690],"source":" A handle to a menu; or `NULL` if the button does not have a menu."},{"content":"[in] <ph id=\"ph1\">`iImage`</ph>","pos":[11697,11710],"source":"[in] `iImage`"},{"content":"Index of the image for the button; or -1 if this button does not have an icon or uses the icon for the command specified by <ph id=\"ph1\">`uiID`</ph>.","pos":[11714,11845],"source":" Index of the image for the button; or -1 if this button does not have an icon or uses the icon for the command specified by `uiID`."},{"content":"The index is the same for each <ph id=\"ph1\">`CMFCToolBarImages`</ph> object in your application.","pos":[11846,11924],"source":" The index is the same for each `CMFCToolBarImages` object in your application."},{"content":"[in] <ph id=\"ph1\">`lpszText`</ph>","pos":[11931,11946],"source":"[in] `lpszText`"},{"content":"The text of the toolbar menu button.","pos":[11950,11986]},{"content":"[in] <ph id=\"ph1\">`bUserButton`</ph>","pos":[11993,12011],"source":"[in] `bUserButton`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if the button displays a user-defined image; <ph id=\"ph2\">`FALSE`</ph> if the button displays a predefined image associated with the command specified by <ph id=\"ph3\">`uiID`</ph>.","pos":[12014,12165],"source":" `TRUE` if the button displays a user-defined image; `FALSE` if the button displays a predefined image associated with the command specified by `uiID`."},{"pos":[12175,12182],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If <ph id=\"ph1\">`uiID`</ph> is a valid command ID, the button performs that command when the user clicks it.","pos":[12186,12276],"source":"If `uiID` is a valid command ID, the button performs that command when the user clicks it."},{"content":"If <ph id=\"ph1\">`hMenu`</ph> is a valid menu handle, the button provides a drop-down menu when it appears in a toolbar or a submenu when it appears in a menu.","pos":[12277,12417],"source":" If `hMenu` is a valid menu handle, the button provides a drop-down menu when it appears in a toolbar or a submenu when it appears in a menu."},{"content":"If both <ph id=\"ph1\">`uiID`</ph> and <ph id=\"ph2\">`hMenu`</ph> are valid, the button is a split-button with a portion that will perform the command when the user clicks on it and a portion with a down arrow that will drop-down a menu when the user clicks on it.","pos":[12418,12643],"source":" If both `uiID` and `hMenu` are valid, the button is a split-button with a portion that will perform the command when the user clicks on it and a portion with a down arrow that will drop-down a menu when the user clicks on it."},{"content":"However, if <ph id=\"ph1\">`hMenu`</ph> is valid, a user will not be able to click the button to perform a command when the button is inserted into a menu.","pos":[12644,12779],"source":" However, if `hMenu` is valid, a user will not be able to click the button to perform a command when the button is inserted into a menu."},{"pos":[12789,12796],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates how to construct an object of the <ph id=\"ph1\">`CMFCToolBarMenuButton`</ph> class.","pos":[12800,12899],"source":"The following example demonstrates how to construct an object of the `CMFCToolBarMenuButton` class."},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>Word Pad sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[12900,12980],"source":" This code snippet is part of the [Word Pad sample](../../visual-cpp-samples.md)."},{"pos":[12987,13088],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_WordPad#9<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cmfctoolbarmenubutton-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_WordPad#9](../../mfc/reference/codesnippet/cpp/cmfctoolbarmenubutton-class_2.cpp)]"},{"pos":[13098,13183],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__comparewith\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::CompareWith","linkify":"<a name=\"cmfctoolbarmenubutton__comparewith\"></a>  CMFCToolBarMenuButton::CompareWith","source":"<a name=\"cmfctoolbarmenubutton__comparewith\"></a>  CMFCToolBarMenuButton::CompareWith"},{"pos":[13378,13388],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[13392,13404],"content":"[in] <ph id=\"ph1\">`other`</ph>","source":"[in] `other`"},{"pos":[13414,13426],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[13436,13443],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[13453,13532],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__copyfrom\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::CopyFrom","linkify":"<a name=\"cmfctoolbarmenubutton__copyfrom\"></a>  CMFCToolBarMenuButton::CopyFrom","source":"<a name=\"cmfctoolbarmenubutton__copyfrom\"></a>  CMFCToolBarMenuButton::CopyFrom"},{"pos":[13713,13723],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[13727,13737],"content":"[in] <ph id=\"ph1\">`src`</ph>","source":"[in] `src`"},{"pos":[13747,13754],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[13764,13855],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__createfrommenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::CreateFromMenu","linkify":"<a name=\"cmfctoolbarmenubutton__createfrommenu\"></a>  CMFCToolBarMenuButton::CreateFromMenu","source":"<a name=\"cmfctoolbarmenubutton__createfrommenu\"></a>  CMFCToolBarMenuButton::CreateFromMenu"},{"content":"Initializes the toolbar menu from a Windows menu handle.","pos":[13859,13915]},{"pos":[13982,13992],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`hMenu`</ph>","pos":[13996,14008],"source":"[in] `hMenu`"},{"content":"A handle to a menu.","pos":[14012,14031]},{"pos":[14041,14048],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A toolbar menu button can display a drop-down submenu.","pos":[14052,14106]},{"content":"The framework calls this method to initialize the commands in the submenu from a menu.","pos":[14113,14199]},{"pos":[14209,14292],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__createmenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::CreateMenu","linkify":"<a name=\"cmfctoolbarmenubutton__createmenu\"></a>  CMFCToolBarMenuButton::CreateMenu","source":"<a name=\"cmfctoolbarmenubutton__createmenu\"></a>  CMFCToolBarMenuButton::CreateMenu"},{"content":"Creates a menu that consists of the commands in the toolbar menu.","pos":[14296,14361]},{"content":"Returns a handle to the menu.","pos":[14362,14391]},{"pos":[14453,14465],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A handle to the menu if success.","pos":[14469,14501]},{"content":"<ph id=\"ph1\">`NULL`</ph> if the list of commands associated with the toolbar menu button is empty.","pos":[14502,14582],"source":"`NULL` if the list of commands associated with the toolbar menu button is empty."},{"pos":[14592,14599],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can override this method in a derived class to customize the way the menu is generated.","pos":[14603,14694]},{"pos":[14704,14797],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__createpopupmenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::CreatePopupMenu","linkify":"<a name=\"cmfctoolbarmenubutton__createpopupmenu\"></a>  CMFCToolBarMenuButton::CreatePopupMenu","source":"<a name=\"cmfctoolbarmenubutton__createpopupmenu\"></a>  CMFCToolBarMenuButton::CreatePopupMenu"},{"pos":[14801,14862],"content":"Creates a <ph id=\"ph1\">`CMFCPopupMenu`</ph> object to display the toolbar menu.","source":"Creates a `CMFCPopupMenu` object to display the toolbar menu."},{"pos":[14929,14941],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[14945,15056],"content":"A pointer to a <ph id=\"ph1\">`CMFCPopupMenu`</ph> object that displays the drop-down menu associated with the toolbar menu button.","source":"A pointer to a `CMFCPopupMenu` object that displays the drop-down menu associated with the toolbar menu button."},{"pos":[15066,15073],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called by the framework to prepare the display of the drop-down menu associated with the button.","pos":[15077,15188]},{"content":"The default implementation just constructs and returns a new <ph id=\"ph1\">`CMFCPopupMenu`</ph> object.","pos":[15195,15279],"source":"The default implementation just constructs and returns a new `CMFCPopupMenu` object."},{"content":"Override this method if you want to use a derived type of <bpt id=\"p1\">[</bpt>CMFCPopupMenu Class<ept id=\"p1\">](cmfcpopupmenu-class.md)</ept> or to perform additional initialization.","pos":[15280,15424],"source":" Override this method if you want to use a derived type of [CMFCPopupMenu Class](cmfcpopupmenu-class.md) or to perform additional initialization."},{"pos":[15434,15529],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__drawdocumenticon\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::DrawDocumentIcon","linkify":"<a name=\"cmfctoolbarmenubutton__drawdocumenticon\"></a>  CMFCToolBarMenuButton::DrawDocumentIcon","source":"<a name=\"cmfctoolbarmenubutton__drawdocumenticon\"></a>  CMFCToolBarMenuButton::DrawDocumentIcon"},{"content":"Draws a document icon on the menu button.","pos":[15533,15574]},{"pos":[15686,15696],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[15700,15710],"source":"[in] `pDC`"},{"content":"A pointer to the device context.","pos":[15714,15746]},{"content":"[in] <ph id=\"ph1\">`rectImage`</ph>","pos":[15753,15769],"source":"[in] `rectImage`"},{"content":"Coordinates of the image bounding rectangle.","pos":[15773,15817]},{"content":"[in] <ph id=\"ph1\">`hIcon`</ph>","pos":[15824,15836],"source":"[in] `hIcon`"},{"content":"A handle to the icon.","pos":[15840,15861]},{"pos":[15871,15878],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[15882,15995],"content":"This method takes a document icon and draws it on the menu button, centered in the area specified by <ph id=\"ph1\">`rectImage`</ph>.","source":"This method takes a document icon and draws it on the menu button, centered in the area specified by `rectImage`."},{"pos":[16005,16108],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__enablequickcustomize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::EnableQuickCustomize","linkify":"<a name=\"cmfctoolbarmenubutton__enablequickcustomize\"></a>  CMFCToolBarMenuButton::EnableQuickCustomize","source":"<a name=\"cmfctoolbarmenubutton__enablequickcustomize\"></a>  CMFCToolBarMenuButton::EnableQuickCustomize"},{"pos":[16265,16272],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[16282,16363],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__hasbutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::HasButton","linkify":"<a name=\"cmfctoolbarmenubutton__hasbutton\"></a>  CMFCToolBarMenuButton::HasButton","source":"<a name=\"cmfctoolbarmenubutton__hasbutton\"></a>  CMFCToolBarMenuButton::HasButton"},{"pos":[16526,16538],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16548,16555],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[16565,16654],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__havehotborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::HaveHotBorder","linkify":"<a name=\"cmfctoolbarmenubutton__havehotborder\"></a>  CMFCToolBarMenuButton::HaveHotBorder","source":"<a name=\"cmfctoolbarmenubutton__havehotborder\"></a>  CMFCToolBarMenuButton::HaveHotBorder"},{"pos":[16821,16833],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16843,16850],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[16860,16939],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__isborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::IsBorder","linkify":"<a name=\"cmfctoolbarmenubutton__isborder\"></a>  CMFCToolBarMenuButton::IsBorder","source":"<a name=\"cmfctoolbarmenubutton__isborder\"></a>  CMFCToolBarMenuButton::IsBorder"},{"pos":[17101,17113],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17123,17130],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17140,17233],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__isclickedonmenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::IsClickedOnMenu","linkify":"<a name=\"cmfctoolbarmenubutton__isclickedonmenu\"></a>  CMFCToolBarMenuButton::IsClickedOnMenu","source":"<a name=\"cmfctoolbarmenubutton__isclickedonmenu\"></a>  CMFCToolBarMenuButton::IsClickedOnMenu"},{"pos":[17394,17406],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17416,17423],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17433,17518],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__isquickmode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::IsQuickMode","linkify":"<a name=\"cmfctoolbarmenubutton__isquickmode\"></a>  CMFCToolBarMenuButton::IsQuickMode","source":"<a name=\"cmfctoolbarmenubutton__isquickmode\"></a>  CMFCToolBarMenuButton::IsQuickMode"},{"pos":[17666,17678],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17688,17695],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17705,17790],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__getcommands\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::GetCommands","linkify":"<a name=\"cmfctoolbarmenubutton__getcommands\"></a>  CMFCToolBarMenuButton::GetCommands","source":"<a name=\"cmfctoolbarmenubutton__getcommands\"></a>  CMFCToolBarMenuButton::GetCommands"},{"content":"Gives read-only access to the list of commands in the toolbar menu.","pos":[17794,17861]},{"pos":[17925,17937],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17941,18139],"content":"A const reference to a <bpt id=\"p1\">[</bpt>CObList Class<ept id=\"p1\">](../../mfc/reference/coblist-class.md)</ept> object, which contains a collection of <bpt id=\"p2\">[</bpt>CMFCToolBarButton Class<ept id=\"p2\">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept> objects.","source":"A const reference to a [CObList Class](../../mfc/reference/coblist-class.md) object, which contains a collection of [CMFCToolBarButton Class](../../mfc/reference/cmfctoolbarbutton-class.md) objects."},{"pos":[18149,18156],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A toolbar menu button can display a submenu.","pos":[18160,18204]},{"content":"You can provide the list of commands in the submenu in the constructor or in <bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::CreateFromMenu<ept id=\"p1\">](#cmfctoolbarmenubutton__createfrommenu)</ept> as a handle to a menu ( <ph id=\"ph1\">`HMENU`</ph>).","pos":[18205,18395],"source":" You can provide the list of commands in the submenu in the constructor or in [CMFCToolBarMenuButton::CreateFromMenu](#cmfctoolbarmenubutton__createfrommenu) as a handle to a menu ( `HMENU`)."},{"content":"The menu is converted to a list of objects that are derived from <bpt id=\"p1\">[</bpt>CMFCToolBarButton Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept> and stored in the internal <ph id=\"ph1\">`CObList`</ph> object.","pos":[18396,18579],"source":" The menu is converted to a list of objects that are derived from [CMFCToolBarButton Class](../../mfc/reference/cmfctoolbarbutton-class.md) and stored in the internal `CObList` object."},{"content":"You can access this list by calling this method.","pos":[18580,18628]},{"pos":[18638,18725],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__getimagerect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::GetImageRect","linkify":"<a name=\"cmfctoolbarmenubutton__getimagerect\"></a>  CMFCToolBarMenuButton::GetImageRect","source":"<a name=\"cmfctoolbarmenubutton__getimagerect\"></a>  CMFCToolBarMenuButton::GetImageRect"},{"content":"Retrieves the bounding rectangle for the button image.","pos":[18729,18783]},{"pos":[18845,18855],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] <ph id=\"ph1\">`rectImage`</ph>","pos":[18859,18876],"source":"[out] `rectImage`"},{"content":"A reference to a <ph id=\"ph1\">`CRect`</ph> object that receives the coordinates of the image bounding rectangle.","pos":[18880,18974],"source":" A reference to a `CRect` object that receives the coordinates of the image bounding rectangle."},{"pos":[18984,19075],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__getpaletterows\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::GetPaletteRows","linkify":"<a name=\"cmfctoolbarmenubutton__getpaletterows\"></a>  CMFCToolBarMenuButton::GetPaletteRows","source":"<a name=\"cmfctoolbarmenubutton__getpaletterows\"></a>  CMFCToolBarMenuButton::GetPaletteRows"},{"content":"Returns the number of rows in the drop-down menu when the menu is in palette mode.","pos":[19079,19161]},{"pos":[19217,19229],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of rows in the palette.","pos":[19233,19267]},{"pos":[19277,19284],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When the menu button is set to palette mode, menu items will appear in multiple columns with only a limited number of rows.","pos":[19288,19411]},{"content":"Call this method to obtain the number of rows.","pos":[19412,19458]},{"content":"You can enable or disable palette mode and specify the number of rows using <bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::SetMenuPaletteMode<ept id=\"p1\">](#cmfctoolbarmenubutton__setmenupalettemode)</ept>.","pos":[19459,19623],"source":" You can enable or disable palette mode and specify the number of rows using [CMFCToolBarMenuButton::SetMenuPaletteMode](#cmfctoolbarmenubutton__setmenupalettemode)."},{"pos":[19633,19720],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__getpopupmenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::GetPopupMenu","linkify":"<a name=\"cmfctoolbarmenubutton__getpopupmenu\"></a>  CMFCToolBarMenuButton::GetPopupMenu","source":"<a name=\"cmfctoolbarmenubutton__getpopupmenu\"></a>  CMFCToolBarMenuButton::GetPopupMenu"},{"pos":[19724,19871],"content":"Returns a pointer to the <bpt id=\"p1\">[</bpt>CMFCPopupMenu Class<ept id=\"p1\">](../../mfc/reference/cmfcpopupmenu-class.md)</ept> object that represents the drop-down menu of the button.","source":"Returns a pointer to the [CMFCPopupMenu Class](../../mfc/reference/cmfcpopupmenu-class.md) object that represents the drop-down menu of the button."},{"pos":[19936,19948],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19952,20155],"content":"A pointer to a <bpt id=\"p1\">[</bpt>CMFCPopupMenu Class<ept id=\"p1\">](../../mfc/reference/cmfcpopupmenu-class.md)</ept> object that was created when the framework drew the submenu of the toolbar menu button; <ph id=\"ph1\">`NULL`</ph> if no submenu is displayed.","source":"A pointer to a [CMFCPopupMenu Class](../../mfc/reference/cmfcpopupmenu-class.md) object that was created when the framework drew the submenu of the toolbar menu button; `NULL` if no submenu is displayed."},{"pos":[20165,20172],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When a toolbar menu button displays a drop-down menu, the button creates a <bpt id=\"p1\">[</bpt>CMFCPopupMenu Class<ept id=\"p1\">](../../mfc/reference/cmfcpopupmenu-class.md)</ept> object to represent the menu.","pos":[20176,20346],"source":"When a toolbar menu button displays a drop-down menu, the button creates a [CMFCPopupMenu Class](../../mfc/reference/cmfcpopupmenu-class.md) object to represent the menu."},{"content":"Call this method to obtain a pointer to the <ph id=\"ph1\">`CMFCPopupMenu`</ph> object.","pos":[20347,20414],"source":" Call this method to obtain a pointer to the `CMFCPopupMenu` object."},{"content":"You should not store the returned pointer, because it is temporary and becomes invalid when the user closes the drop-down menu.","pos":[20415,20542]},{"pos":[20552,20641],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__isdroppeddown\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::IsDroppedDown","linkify":"<a name=\"cmfctoolbarmenubutton__isdroppeddown\"></a>  CMFCToolBarMenuButton::IsDroppedDown","source":"<a name=\"cmfctoolbarmenubutton__isdroppeddown\"></a>  CMFCToolBarMenuButton::IsDroppedDown"},{"content":"Indicates whether the pop-up menu is currently displayed.","pos":[20645,20702]},{"pos":[20766,20778],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20782,20856],"content":"<ph id=\"ph1\">`TRUE`</ph> if the toolbar menu button displays its submenu; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the toolbar menu button displays its submenu; otherwise `FALSE`."},{"pos":[20866,20965],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__isemptymenuallowed\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::IsEmptyMenuAllowed","linkify":"<a name=\"cmfctoolbarmenubutton__isemptymenuallowed\"></a>  CMFCToolBarMenuButton::IsEmptyMenuAllowed","source":"<a name=\"cmfctoolbarmenubutton__isemptymenuallowed\"></a>  CMFCToolBarMenuButton::IsEmptyMenuAllowed"},{"content":"Specifies whether menu items shows empty submenus.","pos":[20969,21019]},{"pos":[21088,21100],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[21104,21232],"content":"<ph id=\"ph1\">`TRUE`</ph> if the framework opens a submenu from the currently selected menu item even when the submenu is empty; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the framework opens a submenu from the currently selected menu item even when the submenu is empty; otherwise `FALSE`."},{"pos":[21242,21249],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method when a user tries to open the submenu from the currently selected menu item.","pos":[21253,21361]},{"content":"If the submenu is empty and <ph id=\"ph1\">`IsEmptyMenuAllowed`</ph> returns <ph id=\"ph2\">`FALSE`</ph>, the submenu will not open.","pos":[21362,21454],"source":" If the submenu is empty and `IsEmptyMenuAllowed` returns `FALSE`, the submenu will not open."},{"content":"The default implementation returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[21461,21504],"source":"The default implementation returns `FALSE`."},{"content":"Override this method to customize this behavior.","pos":[21505,21553]},{"pos":[21563,21648],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__isexclusive\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::IsExclusive","linkify":"<a name=\"cmfctoolbarmenubutton__isexclusive\"></a>  CMFCToolBarMenuButton::IsExclusive","source":"<a name=\"cmfctoolbarmenubutton__isexclusive\"></a>  CMFCToolBarMenuButton::IsExclusive"},{"content":"Indicates whether the button is in exclusive mode.","pos":[21652,21702]},{"pos":[21764,21776],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[21780,21849],"content":"<ph id=\"ph1\">`TRUE`</ph> if the button is working in exclusive mode; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the button is working in exclusive mode; otherwise `FALSE`."},{"pos":[21859,21866],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When a user opens a popup menu for a button and then moves the mouse pointer over another toolbar or menu button, the popup menu closes unless the button is in exclusive mode.","pos":[21870,22045]},{"content":"The default implementation always returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[22052,22102],"source":"The default implementation always returns `FALSE`."},{"content":"Override this method in a derived class if you want to turn on exclusive mode.","pos":[22103,22181]},{"pos":[22191,22288],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__ismenupalettemode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::IsMenuPaletteMode","linkify":"<a name=\"cmfctoolbarmenubutton__ismenupalettemode\"></a>  CMFCToolBarMenuButton::IsMenuPaletteMode","source":"<a name=\"cmfctoolbarmenubutton__ismenupalettemode\"></a>  CMFCToolBarMenuButton::IsMenuPaletteMode"},{"content":"Determines whether the drop-down menu is in palette mode.","pos":[22292,22349]},{"pos":[22409,22421],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22425,22482],"content":"<ph id=\"ph1\">`TRUE`</ph> if the palette mode is enabled, otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the palette mode is enabled, otherwise `FALSE`."},{"pos":[22492,22499],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When the menu button is set to palette mode, menu items appear in multiple columns with only a limited number of rows.","pos":[22503,22621]},{"content":"Call this method to obtain the number of rows.","pos":[22622,22668]},{"content":"You can enable or disable the palette mode by calling <bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::SetMenuPaletteMode<ept id=\"p1\">](#cmfctoolbarmenubutton__setmenupalettemode)</ept>.","pos":[22669,22811],"source":" You can enable or disable the palette mode by calling [CMFCToolBarMenuButton::SetMenuPaletteMode](#cmfctoolbarmenubutton__setmenupalettemode)."},{"pos":[22821,22910],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__istearoffmenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::IsTearOffMenu","linkify":"<a name=\"cmfctoolbarmenubutton__istearoffmenu\"></a>  CMFCToolBarMenuButton::IsTearOffMenu","source":"<a name=\"cmfctoolbarmenubutton__istearoffmenu\"></a>  CMFCToolBarMenuButton::IsTearOffMenu"},{"content":"Indicates whether the drop-down menu has a tear-off bar.","pos":[22914,22970]},{"pos":[23034,23046],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23050,23122],"content":"<ph id=\"ph1\">`TRUE`</ph> if the toolbar menu button has a tear-off bar; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the toolbar menu button has a tear-off bar; otherwise `FALSE`."},{"pos":[23132,23139],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[23143,23280],"content":"To enable the tear-off feature and set the tear-off bar ID, call <bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton::SetTearOff<ept id=\"p1\">](#cmfctoolbarmenubutton__settearoff)</ept>.","source":"To enable the tear-off feature and set the tear-off bar ID, call [CMFCToolBarMenuButton::SetTearOff](#cmfctoolbarmenubutton__settearoff)."},{"pos":[23290,23397],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__m_balwayscallownerdraw\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::m_bAlwaysCallOwnerDraw","linkify":"<a name=\"cmfctoolbarmenubutton__m_balwayscallownerdraw\"></a>  CMFCToolBarMenuButton::m_bAlwaysCallOwnerDraw","source":"<a name=\"cmfctoolbarmenubutton__m_balwayscallownerdraw\"></a>  CMFCToolBarMenuButton::m_bAlwaysCallOwnerDraw"},{"pos":[23401,23571],"content":"Specifies whether the framework always calls <bpt id=\"p1\">[</bpt>CFrameWndEx::OnDrawMenuImage<ept id=\"p1\">](../../mfc/reference/cframewndex-class.md#cframewndex__ondrawmenuimage)</ept> when a button is drawn.","source":"Specifies whether the framework always calls [CFrameWndEx::OnDrawMenuImage](../../mfc/reference/cframewndex-class.md#cframewndex__ondrawmenuimage) when a button is drawn."},{"pos":[23634,23641],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this member variable is set to <ph id=\"ph1\">`TRUE`</ph>, the button always calls <bpt id=\"p1\">[</bpt>CFrameWndEx::OnDrawMenuImage<ept id=\"p1\">](../../mfc/reference/cframewndex-class.md#cframewndex__ondrawmenuimage)</ept> method to display the image on the button.","pos":[23645,23857],"source":"When this member variable is set to `TRUE`, the button always calls [CFrameWndEx::OnDrawMenuImage](../../mfc/reference/cframewndex-class.md#cframewndex__ondrawmenuimage) method to display the image on the button."},{"content":"When <ph id=\"ph1\">`m_bAlwaysCallOwnerDraw`</ph> is <ph id=\"ph2\">`FALSE`</ph>, the button itself draws the image if the image is predefined.","pos":[23858,23961],"source":" When `m_bAlwaysCallOwnerDraw` is `FALSE`, the button itself draws the image if the image is predefined."},{"content":"Otherwise, it calls <ph id=\"ph1\">`OnDrawMenuImage`</ph>.","pos":[23962,24000],"source":" Otherwise, it calls `OnDrawMenuImage`."},{"pos":[24010,24117],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__onaftercreatepopupmenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::OnAfterCreatePopupMenu","linkify":"<a name=\"cmfctoolbarmenubutton__onaftercreatepopupmenu\"></a>  CMFCToolBarMenuButton::OnAfterCreatePopupMenu","source":"<a name=\"cmfctoolbarmenubutton__onaftercreatepopupmenu\"></a>  CMFCToolBarMenuButton::OnAfterCreatePopupMenu"},{"pos":[24284,24291],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[24301,24388],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__onbeforedrag\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::OnBeforeDrag","linkify":"<a name=\"cmfctoolbarmenubutton__onbeforedrag\"></a>  CMFCToolBarMenuButton::OnBeforeDrag","source":"<a name=\"cmfctoolbarmenubutton__onbeforedrag\"></a>  CMFCToolBarMenuButton::OnBeforeDrag"},{"pos":[24554,24566],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24576,24583],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[24593,24686],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__oncalculatesize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::OnCalculateSize","linkify":"<a name=\"cmfctoolbarmenubutton__oncalculatesize\"></a>  CMFCToolBarMenuButton::OnCalculateSize","source":"<a name=\"cmfctoolbarmenubutton__oncalculatesize\"></a>  CMFCToolBarMenuButton::OnCalculateSize"},{"pos":[24909,24919],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[24923,24933],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`sizeDefault`</ph>","pos":[24937,24955],"source":" [in] `sizeDefault`"},{"content":"[in] <ph id=\"ph1\">`bHorz`</ph>","pos":[24959,24971],"source":" [in] `bHorz`"},{"pos":[24981,24993],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[25003,25010],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[25020,25107],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__oncancelmode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::OnCancelMode","linkify":"<a name=\"cmfctoolbarmenubutton__oncancelmode\"></a>  CMFCToolBarMenuButton::OnCancelMode","source":"<a name=\"cmfctoolbarmenubutton__oncancelmode\"></a>  CMFCToolBarMenuButton::OnCancelMode"},{"pos":[25264,25271],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[25281,25378],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__onchangeparentwnd\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::OnChangeParentWnd","linkify":"<a name=\"cmfctoolbarmenubutton__onchangeparentwnd\"></a>  CMFCToolBarMenuButton::OnChangeParentWnd","source":"<a name=\"cmfctoolbarmenubutton__onchangeparentwnd\"></a>  CMFCToolBarMenuButton::OnChangeParentWnd"},{"pos":[25556,25566],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[25570,25587],"content":"[in] <ph id=\"ph1\">`pWndParent`</ph>","source":"[in] `pWndParent`"},{"pos":[25597,25604],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[25614,25691],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__onclick\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::OnClick","linkify":"<a name=\"cmfctoolbarmenubutton__onclick\"></a>  CMFCToolBarMenuButton::OnClick","source":"<a name=\"cmfctoolbarmenubutton__onclick\"></a>  CMFCToolBarMenuButton::OnClick"},{"pos":[25884,25894],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pWnd`</ph>","pos":[25898,25909],"source":"[in] `pWnd`"},{"content":"[in] <ph id=\"ph1\">`bDelay`</ph>","pos":[25913,25926],"source":" [in] `bDelay`"},{"pos":[25936,25948],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[25958,25965],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[25975,26068],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__onclickmenuitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::OnClickMenuItem","linkify":"<a name=\"cmfctoolbarmenubutton__onclickmenuitem\"></a>  CMFCToolBarMenuButton::OnClickMenuItem","source":"<a name=\"cmfctoolbarmenubutton__onclickmenuitem\"></a>  CMFCToolBarMenuButton::OnClickMenuItem"},{"content":"Called by the framework when the user selects an item in the drop-down menu.","pos":[26072,26148]},{"pos":[26205,26217],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`FALSE`</ph> if the framework should continue the default menu item processing; otherwise <ph id=\"ph2\">`TRUE`</ph>.","pos":[26221,26313],"source":"`FALSE` if the framework should continue the default menu item processing; otherwise `TRUE`."},{"content":"The default implementation always returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[26314,26364],"source":" The default implementation always returns `FALSE`."},{"pos":[26374,26381],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When the user clicks a menu item, the framework executes a command that is associated with that item.","pos":[26385,26486]},{"content":"To customize the menu item processing, override <ph id=\"ph1\">`OnClickMenuItem`</ph> in a class derived from <ph id=\"ph2\">`CMFCToolBarMenuButton`</ph> class.","pos":[26493,26613],"source":"To customize the menu item processing, override `OnClickMenuItem` in a class derived from `CMFCToolBarMenuButton` class."},{"content":"You must also override <bpt id=\"p1\">[</bpt>CFrameWndEx::OnShowPopupMenu<ept id=\"p1\">](../../mfc/reference/cframewndex-class.md#cframewndex__onshowpopupmenu)</ept> and replace the menu buttons that require special processing with instances of the derived class.","pos":[26614,26836],"source":" You must also override [CFrameWndEx::OnShowPopupMenu](../../mfc/reference/cframewndex-class.md#cframewndex__onshowpopupmenu) and replace the menu buttons that require special processing with instances of the derived class."},{"pos":[26846,26935],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__oncontexthelp\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::OnContextHelp","linkify":"<a name=\"cmfctoolbarmenubutton__oncontexthelp\"></a>  CMFCToolBarMenuButton::OnContextHelp","source":"<a name=\"cmfctoolbarmenubutton__oncontexthelp\"></a>  CMFCToolBarMenuButton::OnContextHelp"},{"pos":[27103,27113],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[27117,27128],"content":"[in] <ph id=\"ph1\">`pWnd`</ph>","source":"[in] `pWnd`"},{"pos":[27138,27150],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[27160,27167],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[27177,27252],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__ondraw\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::OnDraw","linkify":"<a name=\"cmfctoolbarmenubutton__ondraw\"></a>  CMFCToolBarMenuButton::OnDraw","source":"<a name=\"cmfctoolbarmenubutton__ondraw\"></a>  CMFCToolBarMenuButton::OnDraw"},{"pos":[27637,27647],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[27651,27661],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[27665,27676],"source":" [in] `rect`"},{"content":"[in] <ph id=\"ph1\">`pImages`</ph>","pos":[27680,27694],"source":" [in] `pImages`"},{"content":"[in] <ph id=\"ph1\">`bHorz`</ph>","pos":[27698,27710],"source":" [in] `bHorz`"},{"content":"[in] <ph id=\"ph1\">`bCustomizeMode`</ph>","pos":[27714,27735],"source":" [in] `bCustomizeMode`"},{"content":"[in] <ph id=\"ph1\">`bHighlight`</ph>","pos":[27739,27756],"source":" [in] `bHighlight`"},{"content":"[in] <ph id=\"ph1\">`bDrawBorder`</ph>","pos":[27760,27778],"source":" [in] `bDrawBorder`"},{"content":"[in] <ph id=\"ph1\">`bGrayDisabledButtons`</ph>","pos":[27782,27809],"source":" [in] `bGrayDisabledButtons`"},{"pos":[27819,27826],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[27836,27941],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__ondrawoncustomizelist\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::OnDrawOnCustomizeList","linkify":"<a name=\"cmfctoolbarmenubutton__ondrawoncustomizelist\"></a>  CMFCToolBarMenuButton::OnDrawOnCustomizeList","source":"<a name=\"cmfctoolbarmenubutton__ondrawoncustomizelist\"></a>  CMFCToolBarMenuButton::OnDrawOnCustomizeList"},{"pos":[28166,28176],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[28180,28190],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[28194,28205],"source":" [in] `rect`"},{"content":"[in] <ph id=\"ph1\">`bSelected`</ph>","pos":[28209,28225],"source":" [in] `bSelected`"},{"pos":[28235,28247],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[28257,28264],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[28274,28363],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__openpopupmenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::OpenPopupMenu","linkify":"<a name=\"cmfctoolbarmenubutton__openpopupmenu\"></a>  CMFCToolBarMenuButton::OpenPopupMenu","source":"<a name=\"cmfctoolbarmenubutton__openpopupmenu\"></a>  CMFCToolBarMenuButton::OpenPopupMenu"},{"content":"Called by the framework when the user opens the drop-down menu of a toolbar menu button.","pos":[28367,28455]},{"pos":[28525,28535],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pWnd`</ph>","pos":[28539,28550],"source":"[in] `pWnd`"},{"content":"Specifies the window that receives the drop-down menu commands.","pos":[28554,28617]},{"content":"It can be <ph id=\"ph1\">`NULL`</ph> only if the toolbar menu button has a parent window.","pos":[28618,28687],"source":" It can be `NULL` only if the toolbar menu button has a parent window."},{"pos":[28697,28709],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[28713,28855],"content":"<ph id=\"ph1\">`TRUE`</ph> when a <bpt id=\"p1\">[</bpt>CMFCPopupMenu Class<ept id=\"p1\">](../../mfc/reference/cmfcpopupmenu-class.md)</ept> object was created and opened successfully; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` when a [CMFCPopupMenu Class](../../mfc/reference/cmfcpopupmenu-class.md) object was created and opened successfully; otherwise `FALSE`."},{"pos":[28865,28872],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function is called by the framework when the user opens a drop-down menu from a toolbar menu button.","pos":[28876,28981]},{"pos":[28991,29092],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__resetimagetodefault\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::ResetImageToDefault","linkify":"<a name=\"cmfctoolbarmenubutton__resetimagetodefault\"></a>  CMFCToolBarMenuButton::ResetImageToDefault","source":"<a name=\"cmfctoolbarmenubutton__resetimagetodefault\"></a>  CMFCToolBarMenuButton::ResetImageToDefault"},{"pos":[29256,29263],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[29273,29360],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__savebarstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::SaveBarState","linkify":"<a name=\"cmfctoolbarmenubutton__savebarstate\"></a>  CMFCToolBarMenuButton::SaveBarState","source":"<a name=\"cmfctoolbarmenubutton__savebarstate\"></a>  CMFCToolBarMenuButton::SaveBarState"},{"pos":[29517,29524],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method when it creates a toolbar button as the result of a drag-and-drop operation.","pos":[29528,29636]},{"content":"This method calls the <bpt id=\"p1\">[</bpt>CMFCPopupMenu::SaveState<ept id=\"p1\">](../../mfc/reference/cmfcpopupmenu-class.md#cmfcpopupmenu__savestate)</ept> method of the top-level pop-up menu, which causes the parent button of the pop-up menu to recreate its menu.","pos":[29637,29863],"source":" This method calls the [CMFCPopupMenu::SaveState](../../mfc/reference/cmfcpopupmenu-class.md#cmfcpopupmenu__savestate) method of the top-level pop-up menu, which causes the parent button of the pop-up menu to recreate its menu."},{"pos":[29873,29954],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__serialize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::Serialize","linkify":"<a name=\"cmfctoolbarmenubutton__serialize\"></a>  CMFCToolBarMenuButton::Serialize","source":"<a name=\"cmfctoolbarmenubutton__serialize\"></a>  CMFCToolBarMenuButton::Serialize"},{"pos":[30120,30130],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[30134,30143],"content":"[in] <ph id=\"ph1\">`ar`</ph>","source":"[in] `ar`"},{"pos":[30153,30160],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[30170,30253],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__setaccdata\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::SetACCData","linkify":"<a name=\"cmfctoolbarmenubutton__setaccdata\"></a>  CMFCToolBarMenuButton::SetACCData","source":"<a name=\"cmfctoolbarmenubutton__setaccdata\"></a>  CMFCToolBarMenuButton::SetACCData"},{"content":"Sets the accessibility data for the ribbon element.","pos":[30257,30308]},{"pos":[30410,30420],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The parent window for the ribbon element.","pos":[30437,30478]},{"content":"The accessibility data for the ribbon element.","pos":[30495,30541]},{"pos":[30551,30563],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[30567,30589],"content":"Always returns <ph id=\"ph1\">`TRUE`</ph>.","source":"Always returns `TRUE`."},{"pos":[30599,30606],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default this method sets the accessibility data for the ribbon element and always returns <ph id=\"ph1\">`TRUE`</ph>.","pos":[30610,30710],"source":"By default this method sets the accessibility data for the ribbon element and always returns `TRUE`."},{"content":"Override this method to set the accessibility data and return a value that indicates success or failure.","pos":[30711,30815]},{"pos":[30825,30910],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__setmenuonly\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::SetMenuOnly","linkify":"<a name=\"cmfctoolbarmenubutton__setmenuonly\"></a>  CMFCToolBarMenuButton::SetMenuOnly","source":"<a name=\"cmfctoolbarmenubutton__setmenuonly\"></a>  CMFCToolBarMenuButton::SetMenuOnly"},{"content":"Specifies whether the button is drawn as a menu button or a split button when it has both a valid command ID and a submenu.","pos":[30914,31037]},{"pos":[31096,31106],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bMenuOnly`</ph>","pos":[31110,31126],"source":"[in] `bMenuOnly`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to show this button as a menu button when it has both a valid command ID and a submenu, <ph id=\"ph2\">`FALSE`</ph> to show this button as a split button when it has both a valid command ID and a submenu.","pos":[31129,31321],"source":" `TRUE` to show this button as a menu button when it has both a valid command ID and a submenu, `FALSE` to show this button as a split button when it has both a valid command ID and a submenu."},{"pos":[31331,31338],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when a toolbar menu button has both a submenu and a command ID, the menu appears to be a split button that has a main button and an attached down arrow button.","pos":[31342,31512]},{"content":"If you call this method and <ph id=\"ph1\">`bMenuOnly`</ph> is <ph id=\"ph2\">`TRUE`</ph>, the button instead appears to be a single menu button with a down arrow in the button.","pos":[31513,31650],"source":" If you call this method and `bMenuOnly` is `TRUE`, the button instead appears to be a single menu button with a down arrow in the button."},{"content":"When the user clicks the arrow in either mode, the submenu opens, and when the user clicks the non-arrow part of the button in either mode the framework executes the command .","pos":[31651,31826]},{"pos":[31836,31935],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__setmenupalettemode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::SetMenuPaletteMode","linkify":"<a name=\"cmfctoolbarmenubutton__setmenupalettemode\"></a>  CMFCToolBarMenuButton::SetMenuPaletteMode","source":"<a name=\"cmfctoolbarmenubutton__setmenupalettemode\"></a>  CMFCToolBarMenuButton::SetMenuPaletteMode"},{"content":"Specifies whether the drop-down menu is in palette mode.","pos":[31939,31995]},{"pos":[32104,32114],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bMenuPaletteMode`</ph>","pos":[32118,32141],"source":"[in] `bMenuPaletteMode`"},{"content":"Specifies whether the drop-down menu is in palette mode.","pos":[32145,32201]},{"content":"[in] <ph id=\"ph1\">`nPaletteRows`</ph>","pos":[32208,32227],"source":"[in] `nPaletteRows`"},{"content":"Number of rows in palette.","pos":[32231,32257]},{"pos":[32267,32274],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In the palette mode, all menu items are displayed as a multicolumn palette.","pos":[32278,32353]},{"content":"You specify the number of rows by using <ph id=\"ph1\">`nPaletteRows`</ph>.","pos":[32354,32409],"source":" You specify the number of rows by using `nPaletteRows`."},{"pos":[32419,32508],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__setmessagewnd\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::SetMessageWnd","linkify":"<a name=\"cmfctoolbarmenubutton__setmessagewnd\"></a>  CMFCToolBarMenuButton::SetMessageWnd","source":"<a name=\"cmfctoolbarmenubutton__setmessagewnd\"></a>  CMFCToolBarMenuButton::SetMessageWnd"},{"pos":[32675,32685],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[32689,32707],"content":"[in] <ph id=\"ph1\">`pWndMessage`</ph>","source":"[in] `pWndMessage`"},{"pos":[32717,32724],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[32734,32813],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__setradio\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::SetRadio","linkify":"<a name=\"cmfctoolbarmenubutton__setradio\"></a>  CMFCToolBarMenuButton::SetRadio","source":"<a name=\"cmfctoolbarmenubutton__setradio\"></a>  CMFCToolBarMenuButton::SetRadio"},{"content":"Sets the toolbar menu button to display a radio button style icon when it is checked.","pos":[32817,32902]},{"pos":[32952,32959],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When the menu button is drawn while it is checked, it calls <bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawMenuCheck<ept id=\"p1\">](../../mfc/reference/cmfcvisualmanager-class.md#cmfcvisualmanager__ondrawmenucheck)</ept> to draw a checkmark icon.","pos":[32963,33168],"source":"When the menu button is drawn while it is checked, it calls [CMFCVisualManager::OnDrawMenuCheck](../../mfc/reference/cmfcvisualmanager-class.md#cmfcvisualmanager__ondrawmenucheck) to draw a checkmark icon."},{"content":"By default, <ph id=\"ph1\">`OnDrawMenuCheck`</ph> requests that the current visual manager draws a checkbox style checkmark on the menu button.","pos":[33169,33292],"source":" By default, `OnDrawMenuCheck` requests that the current visual manager draws a checkbox style checkmark on the menu button."},{"content":"After you call this method, the current visual manager instead draws a radio button style checkmark on the menu button.","pos":[33293,33412]},{"content":"This change cannot be undone.","pos":[33413,33442]},{"content":"When you call this method and the menu button is currently being displayed, it will refresh.","pos":[33449,33541]},{"pos":[33551,33634],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarmenubutton__settearoff\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarMenuButton::SetTearOff","linkify":"<a name=\"cmfctoolbarmenubutton__settearoff\"></a>  CMFCToolBarMenuButton::SetTearOff","source":"<a name=\"cmfctoolbarmenubutton__settearoff\"></a>  CMFCToolBarMenuButton::SetTearOff"},{"content":"Specifies the ID of the tear-off bar for the drop-down menu.","pos":[33638,33698]},{"pos":[33762,33772],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`uiBarID`</ph>","pos":[33776,33790],"source":"[in] `uiBarID`"},{"content":"Specifies a new tear-off bar ID.","pos":[33794,33826]},{"pos":[33836,33843],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to specify the ID for the tear-off bar that is created when the user drags the menu button off of a menu bar.","pos":[33847,33973]},{"content":"If the <ph id=\"ph1\">`uiBarID`</ph> parameter is 0, the user cannot tear off the menu button.","pos":[33974,34048],"source":" If the `uiBarID` parameter is 0, the user cannot tear off the menu button."},{"pos":[34055,34218],"content":"Call <bpt id=\"p1\">[</bpt>CWinAppEx::EnableTearOffMenus<ept id=\"p1\">](../../mfc/reference/cwinappex-class.md#cwinappex__enabletearoffmenus)</ept> to enable the tear-off menu feature in your application.","source":"Call [CWinAppEx::EnableTearOffMenus](../../mfc/reference/cwinappex-class.md#cwinappex__enabletearoffmenus) to enable the tear-off menu feature in your application."},{"pos":[34227,34235],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[34239,34287],"source":"[Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Classes<ept id=\"p1\">](../../mfc/reference/mfc-classes.md)</ept><ph id=\"ph1\"> </ph>","pos":[34290,34337],"source":" [Classes](../../mfc/reference/mfc-classes.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CMFCToolBarButton Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[34340,34415],"source":" [CMFCToolBarButton Class](../../mfc/reference/cmfctoolbarbutton-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CMFCToolBar Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[34418,34481],"source":" [CMFCToolBar Class](../../mfc/reference/cmfctoolbar-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CMFCPopupMenu Class<ept id=\"p1\">](../../mfc/reference/cmfcpopupmenu-class.md)</ept>","pos":[34484,34550],"source":" [CMFCPopupMenu Class](../../mfc/reference/cmfcpopupmenu-class.md)"}],"content":"---\ntitle: \"CMFCToolBarMenuButton Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMFCToolBarMenuButton\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CMFCToolBarMenuButton class\"\nms.assetid: cfa50176-7e4b-4527-9904-86a1b48fc1bc\ncaps.latest.revision: 31\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMFCToolBarMenuButton Class\nA toolbar button that contains a pop-up menu.  \n  \n## Syntax  \n  \n```  \nclass CMFCToolBarMenuButton : public CMFCToolBarButton  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCToolBarMenuButton::CMFCToolBarMenuButton](#cmfctoolbarmenubutton__cmfctoolbarmenubutton)|Constructs a `CMFCToolBarMenuButton` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCToolBarMenuButton::CompareWith](#cmfctoolbarmenubutton__comparewith)|Compares this instance with the provided `CMFCToolBarButton` object. (Overrides [CMFCToolBarButton::CompareWith](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__comparewith).)|  \n|[CMFCToolBarMenuButton::CopyFrom](#cmfctoolbarmenubutton__copyfrom)|Copies the properties of another toolbar button to the current button. (Overrides [CMFCToolBarButton::CopyFrom](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__copyfrom).)|  \n|[CMFCToolBarMenuButton::CreateFromMenu](#cmfctoolbarmenubutton__createfrommenu)|Initializes the toolbar menu from a Windows menu handle.|  \n|[CMFCToolBarMenuButton::CreateMenu](#cmfctoolbarmenubutton__createmenu)|Creates a Windows menu that consists of the commands in the toolbar menu. Returns a handle to the Windows menu.|  \n|[CMFCToolBarMenuButton::CreatePopupMenu](#cmfctoolbarmenubutton__createpopupmenu)|Creates a pop-up menu object ( [CMFCPopupMenu Class](../../mfc/reference/cmfcpopupmenu-class.md)) to display the toolbar menu.|  \n|[CMFCToolBarMenuButton::EnableQuickCustomize](#cmfctoolbarmenubutton__enablequickcustomize)||  \n|[CMFCToolBarMenuButton::GetCommands](#cmfctoolbarmenubutton__getcommands)|Gives read-only access to the list of commands in the toolbar menu.|  \n|[CMFCToolBarMenuButton::GetImageRect](#cmfctoolbarmenubutton__getimagerect)|Retrieves the bounding rectangle for the button image.|  \n|[CMFCToolBarMenuButton::GetPaletteRows](#cmfctoolbarmenubutton__getpaletterows)|Returns the number of rows in the pop-up menu when the menu is in palette mode.|  \n|[CMFCToolBarMenuButton::GetPopupMenu](#cmfctoolbarmenubutton__getpopupmenu)|Returns a pointer to the pop-up menu object that is associated with the button.|  \n|[CMFCToolBarMenuButton::HasButton](#cmfctoolbarmenubutton__hasbutton)||  \n|[CMFCToolBarMenuButton::HaveHotBorder](#cmfctoolbarmenubutton__havehotborder)|Determines whether a border of the button is displayed when a user selects the button. (Overrides [CMFCToolBarButton::HaveHotBorder](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__havehotborder).)|  \n|[CMFCToolBarMenuButton::IsBorder](#cmfctoolbarmenubutton__isborder)||  \n|[CMFCToolBarMenuButton::IsClickedOnMenu](#cmfctoolbarmenubutton__isclickedonmenu)||  \n|[CMFCToolBarMenuButton::IsDroppedDown](#cmfctoolbarmenubutton__isdroppeddown)|Determines whether the pop-up menu is displayed.|  \n|[CMFCToolBarMenuButton::IsEmptyMenuAllowed](#cmfctoolbarmenubutton__isemptymenuallowed)|Called by the framework to determine whether a user can open a submenu from the selected menu item.|  \n|[CMFCToolBarMenuButton::IsExclusive](#cmfctoolbarmenubutton__isexclusive)|Determines whether the button is in exclusive mode, that is, whether the pop-up menu remains open even when the user moves the pointer over another toolbar or button.|  \n|[CMFCToolBarMenuButton::IsMenuPaletteMode](#cmfctoolbarmenubutton__ismenupalettemode)|Determines whether the pop-up menu is in palette mode.|  \n|[CMFCToolBarMenuButton::IsQuickMode](#cmfctoolbarmenubutton__isquickmode)||  \n|[CMFCToolBarMenuButton::IsTearOffMenu](#cmfctoolbarmenubutton__istearoffmenu)|Determines whether the pop-up menu has a tear-off bar.|  \n|[CMFCToolBarMenuButton::OnAfterCreatePopupMenu](#cmfctoolbarmenubutton__onaftercreatepopupmenu)||  \n|[CMFCToolBarMenuButton::OnBeforeDrag](#cmfctoolbarmenubutton__onbeforedrag)|Specifies whether the button can be dragged. (Overrides [CMFCToolBarButton::OnBeforeDrag](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onbeforedrag).)|  \n|[CMFCToolBarMenuButton::OnCalculateSize](#cmfctoolbarmenubutton__oncalculatesize)|Called by the framework to calculate the size of the button for the specified device context and docking state. (Overrides [CMFCToolBarButton::OnCalculateSize](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__oncalculatesize).)|  \n|[CMFCToolBarMenuButton::OnCancelMode](#cmfctoolbarmenubutton__oncancelmode)|Called by the framework to handle the [WM_CANCELMODE](http://msdn.microsoft.com/library/windows/desktop/ms632615) message. (Overrides [CMFCToolBarButton::OnCancelMode](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__oncancelmode).)|  \n|[CMFCToolBarMenuButton::OnChangeParentWnd](#cmfctoolbarmenubutton__onchangeparentwnd)|Called by the framework when the button is inserted into a new toolbar. (Overrides [CMFCToolBarButton::OnChangeParentWnd](cmfctoolbarbutton-class.md#cmfctoolbarbutton__onchangeparentwnd).)|  \n|[CMFCToolBarMenuButton::OnClick](#cmfctoolbarmenubutton__onclick)|Called by the framework when the user clicks the mouse button. (Overrides [CMFCToolBarButton::OnClick](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onclick).)|  \n|[CMFCToolBarMenuButton::OnClickMenuItem](#cmfctoolbarmenubutton__onclickmenuitem)|Called by the framework when the user selects an item in the pop-up menu.|  \n|[CMFCToolBarMenuButton::OnContextHelp](#cmfctoolbarmenubutton__oncontexthelp)|Called by the framework when the parent toolbar handles a `WM_HELPHITTEST` message. (Overrides [CMFCToolBarButton::OnContextHelp](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__oncontexthelp).)|  \n|[CMFCToolBarMenuButton::OnDraw](#cmfctoolbarmenubutton__ondraw)|Called by the framework to draw the button by using the specified styles and options. (Overrides [CMFCToolBarButton::OnDraw](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__ondraw).)|  \n|[CMFCToolBarMenuButton::OnDrawOnCustomizeList](#cmfctoolbarmenubutton__ondrawoncustomizelist)|Called by the framework to draw the button in the **Commands** pane of the **Customize** dialog box. (Overrides [CMFCToolBarButton::OnDrawOnCustomizeList](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__ondrawoncustomizelist).)|  \n|[CMFCToolBarMenuButton::OpenPopupMenu](#cmfctoolbarmenubutton__openpopupmenu)|Called by the framework when the user opens the pop-up menu.|  \n|[CMFCToolBarMenuButton::ResetImageToDefault](#cmfctoolbarmenubutton__resetimagetodefault)|Sets to the default value the image that is associated with the button. (Overrides [CMFCToolBarButton::ResetImageToDefault](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__resetimagetodefault).)|  \n|[CMFCToolBarMenuButton::SaveBarState](#cmfctoolbarmenubutton__savebarstate)|Saves the state of the toolbar button. (Overrides [CMFCToolBarButton::SaveBarState](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__savebarstate).)|  \n|[CMFCToolBarMenuButton::Serialize](#cmfctoolbarmenubutton__serialize)|Reads this object from an archive or writes it to an archive. (Overrides [CMFCToolBarButton::Serialize](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__serialize).)|  \n|[CMFCToolBarMenuButton::SetACCData](#cmfctoolbarmenubutton__setaccdata)|Populates the provided `CAccessibilityData` object with accessibility data from the toolbar button. (Overrides [CMFCToolBarButton::SetACCData](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__setaccdata).)|  \n|[CMFCToolBarMenuButton::SetMenuOnly](#cmfctoolbarmenubutton__setmenuonly)|Specifies whether the button can be added to a toolbar.|  \n|[CMFCToolBarMenuButton::SetMenuPaletteMode](#cmfctoolbarmenubutton__setmenupalettemode)|Specifies whether the pop-up menu is in palette mode.|  \n|[CMFCToolBarMenuButton::SetMessageWnd](#cmfctoolbarmenubutton__setmessagewnd)||  \n|[CMFCToolBarMenuButton::SetRadio](#cmfctoolbarmenubutton__setradio)|Forces the toolbar menu button to display an icon indicating that it is selected.|  \n|[CMFCToolBarMenuButton::SetTearOff](#cmfctoolbarmenubutton__settearoff)|Specifies a tear-off bar ID for the pop-up menu.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCToolBarMenuButton::DrawDocumentIcon](#cmfctoolbarmenubutton__drawdocumenticon)|Draws an icon on the menu button.|  \n  \n### Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCToolBarMenuButton::m_bAlwaysCallOwnerDraw](#cmfctoolbarmenubutton__m_balwayscallownerdraw)|If `TRUE`, the framework always calls [CFrameWndEx::OnDrawMenuImage](../../mfc/reference/cframewndex-class.md#cframewndex__ondrawmenuimage) when a button is drawn.|  \n  \n## Remarks  \n A `CMFCToolBarMenuButton` can appear as a menu, a menu item that has a sub-menu, a button that either executes a command or displays a menu, or a button that displays only a menu. You determine the behavior and appearance of the menu button by specifying parameters such as the image, text, menu handle, and command ID that is associated with the button in the constructor `CMFCToolbarMenuButton::CMFCToolbarMenuButton`.  \n  \n A custom class derived from the `CMFCToolbarMenuButton` class must use the [DECLARE_SERIAL](run-time-object-model-services.md#declare_serial) macro. The [DECLARE_DYNCREATE](run-time-object-model-services.md#declare_dyncreate) macro generates an error when the application closes.  \n  \n## Example  \n The following example demonstrates how to configure a `CMFCToolBarMenuButton` object. The code illustrates how to specify that the drop-down menu is in palette mode, and specify the ID for the tear-off bar that is created when the user drags the menu button off of a menu bar. This code snippet is part of the [Word Pad sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_WordPad#10](../../mfc/reference/codesnippet/cpp/cmfctoolbarmenubutton-class_1.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](cobject-class.md)  \n  \n [CMFCToolBarButton](../../mfc/reference/cmfctoolbarbutton-class.md)  \n  \n [CMFCToolBarMenuButton](../../mfc/reference/cmfctoolbarmenubutton-class.md)  \n  \n## Requirements  \n **Header:** afxtoolbarmenubutton.h  \n  \n##  <a name=\"cmfctoolbarmenubutton__cmfctoolbarmenubutton\"></a>  CMFCToolBarMenuButton::CMFCToolBarMenuButton  \n Constructs a `CMFCToolBarMenuButton` object.  \n  \n```  \nCMFCToolBarMenuButton();\n\nCMFCToolBarMenuButton(\n    const CMFCToolBarMenuButton& src);\n\nCMFCToolBarMenuButton(\n    UINT uiID,  \n    HMENU hMenu,  \n    int iImage,  \n    LPCTSTR lpszText=NULL,  \n    BOOL bUserButton=FALSE);\n```  \n  \n### Parameters  \n [in] `src`  \n An existing `CMFCToolBarMenuButton` object to be copied into this `CMFCToolBarMenuButton` object.  \n  \n [in] `uiID`  \n The ID of the command to execute when a user clicks the button; or ( `UINT`)-1 for a menu button that does not directly execute a command.  \n  \n [in] `hMenu`  \n A handle to a menu; or `NULL` if the button does not have a menu.  \n  \n [in] `iImage`  \n Index of the image for the button; or -1 if this button does not have an icon or uses the icon for the command specified by `uiID`. The index is the same for each `CMFCToolBarImages` object in your application.  \n  \n [in] `lpszText`  \n The text of the toolbar menu button.  \n  \n [in] `bUserButton`  \n `TRUE` if the button displays a user-defined image; `FALSE` if the button displays a predefined image associated with the command specified by `uiID`.  \n  \n### Remarks  \n If `uiID` is a valid command ID, the button performs that command when the user clicks it. If `hMenu` is a valid menu handle, the button provides a drop-down menu when it appears in a toolbar or a submenu when it appears in a menu. If both `uiID` and `hMenu` are valid, the button is a split-button with a portion that will perform the command when the user clicks on it and a portion with a down arrow that will drop-down a menu when the user clicks on it. However, if `hMenu` is valid, a user will not be able to click the button to perform a command when the button is inserted into a menu.  \n  \n### Example  \n The following example demonstrates how to construct an object of the `CMFCToolBarMenuButton` class. This code snippet is part of the [Word Pad sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_WordPad#9](../../mfc/reference/codesnippet/cpp/cmfctoolbarmenubutton-class_2.cpp)]  \n  \n##  <a name=\"cmfctoolbarmenubutton__comparewith\"></a>  CMFCToolBarMenuButton::CompareWith  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL CompareWith(const CMFCToolBarButton& other) const;\n\n \n```  \n  \n### Parameters  \n [in] `other`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarmenubutton__copyfrom\"></a>  CMFCToolBarMenuButton::CopyFrom  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void CopyFrom(const CMFCToolBarButton& src);\n```  \n  \n### Parameters  \n [in] `src`  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarmenubutton__createfrommenu\"></a>  CMFCToolBarMenuButton::CreateFromMenu  \n Initializes the toolbar menu from a Windows menu handle.  \n  \n```  \nvirtual void CreateFromMenu(HMENU hMenu);\n```  \n  \n### Parameters  \n [in] `hMenu`  \n A handle to a menu.  \n  \n### Remarks  \n A toolbar menu button can display a drop-down submenu.  \n  \n The framework calls this method to initialize the commands in the submenu from a menu.  \n  \n##  <a name=\"cmfctoolbarmenubutton__createmenu\"></a>  CMFCToolBarMenuButton::CreateMenu  \n Creates a menu that consists of the commands in the toolbar menu. Returns a handle to the menu.  \n  \n```  \nvirtual HMENU CreateMenu() const;\n\n \n```  \n  \n### Return Value  \n A handle to the menu if success. `NULL` if the list of commands associated with the toolbar menu button is empty.  \n  \n### Remarks  \n You can override this method in a derived class to customize the way the menu is generated.  \n  \n##  <a name=\"cmfctoolbarmenubutton__createpopupmenu\"></a>  CMFCToolBarMenuButton::CreatePopupMenu  \n Creates a `CMFCPopupMenu` object to display the toolbar menu.  \n  \n```  \nvirtual CMFCPopupMenu* CreatePopupMenu();\n```  \n  \n### Return Value  \n A pointer to a `CMFCPopupMenu` object that displays the drop-down menu associated with the toolbar menu button.  \n  \n### Remarks  \n This method is called by the framework to prepare the display of the drop-down menu associated with the button.  \n  \n The default implementation just constructs and returns a new `CMFCPopupMenu` object. Override this method if you want to use a derived type of [CMFCPopupMenu Class](cmfcpopupmenu-class.md) or to perform additional initialization.  \n  \n##  <a name=\"cmfctoolbarmenubutton__drawdocumenticon\"></a>  CMFCToolBarMenuButton::DrawDocumentIcon  \n Draws a document icon on the menu button.  \n  \n```  \nvoid DrawDocumentIcon(\n    CDC* pDC,  \n    const CRect& rectImage,  \n    HICON hIcon);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to the device context.  \n  \n [in] `rectImage`  \n Coordinates of the image bounding rectangle.  \n  \n [in] `hIcon`  \n A handle to the icon.  \n  \n### Remarks  \n This method takes a document icon and draws it on the menu button, centered in the area specified by `rectImage`.  \n  \n##  <a name=\"cmfctoolbarmenubutton__enablequickcustomize\"></a>  CMFCToolBarMenuButton::EnableQuickCustomize  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid EnableQuickCustomize();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarmenubutton__hasbutton\"></a>  CMFCToolBarMenuButton::HasButton  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL HasButton() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarmenubutton__havehotborder\"></a>  CMFCToolBarMenuButton::HaveHotBorder  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL HaveHotBorder() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarmenubutton__isborder\"></a>  CMFCToolBarMenuButton::IsBorder  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL IsBorder() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarmenubutton__isclickedonmenu\"></a>  CMFCToolBarMenuButton::IsClickedOnMenu  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsClickedOnMenu() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarmenubutton__isquickmode\"></a>  CMFCToolBarMenuButton::IsQuickMode  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsQuickMode();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarmenubutton__getcommands\"></a>  CMFCToolBarMenuButton::GetCommands  \n Gives read-only access to the list of commands in the toolbar menu.  \n  \n```  \nconst CObList& GetCommands() const;\n\n \n```  \n  \n### Return Value  \n A const reference to a [CObList Class](../../mfc/reference/coblist-class.md) object, which contains a collection of [CMFCToolBarButton Class](../../mfc/reference/cmfctoolbarbutton-class.md) objects.  \n  \n### Remarks  \n A toolbar menu button can display a submenu. You can provide the list of commands in the submenu in the constructor or in [CMFCToolBarMenuButton::CreateFromMenu](#cmfctoolbarmenubutton__createfrommenu) as a handle to a menu ( `HMENU`). The menu is converted to a list of objects that are derived from [CMFCToolBarButton Class](../../mfc/reference/cmfctoolbarbutton-class.md) and stored in the internal `CObList` object. You can access this list by calling this method.  \n  \n##  <a name=\"cmfctoolbarmenubutton__getimagerect\"></a>  CMFCToolBarMenuButton::GetImageRect  \n Retrieves the bounding rectangle for the button image.  \n  \n```  \nvoid GetImageRect(CRect& rectImage);\n```  \n  \n### Parameters  \n [out] `rectImage`  \n A reference to a `CRect` object that receives the coordinates of the image bounding rectangle.  \n  \n##  <a name=\"cmfctoolbarmenubutton__getpaletterows\"></a>  CMFCToolBarMenuButton::GetPaletteRows  \n Returns the number of rows in the drop-down menu when the menu is in palette mode.  \n  \n```  \nint GetPaletteRows() const;\n\n \n```  \n  \n### Return Value  \n The number of rows in the palette.  \n  \n### Remarks  \n When the menu button is set to palette mode, menu items will appear in multiple columns with only a limited number of rows. Call this method to obtain the number of rows. You can enable or disable palette mode and specify the number of rows using [CMFCToolBarMenuButton::SetMenuPaletteMode](#cmfctoolbarmenubutton__setmenupalettemode).  \n  \n##  <a name=\"cmfctoolbarmenubutton__getpopupmenu\"></a>  CMFCToolBarMenuButton::GetPopupMenu  \n Returns a pointer to the [CMFCPopupMenu Class](../../mfc/reference/cmfcpopupmenu-class.md) object that represents the drop-down menu of the button.  \n  \n```  \nCMFCPopupMenu* GetPopupMenu() const;\n\n \n```  \n  \n### Return Value  \n A pointer to a [CMFCPopupMenu Class](../../mfc/reference/cmfcpopupmenu-class.md) object that was created when the framework drew the submenu of the toolbar menu button; `NULL` if no submenu is displayed.  \n  \n### Remarks  \n When a toolbar menu button displays a drop-down menu, the button creates a [CMFCPopupMenu Class](../../mfc/reference/cmfcpopupmenu-class.md) object to represent the menu. Call this method to obtain a pointer to the `CMFCPopupMenu` object. You should not store the returned pointer, because it is temporary and becomes invalid when the user closes the drop-down menu.  \n  \n##  <a name=\"cmfctoolbarmenubutton__isdroppeddown\"></a>  CMFCToolBarMenuButton::IsDroppedDown  \n Indicates whether the pop-up menu is currently displayed.  \n  \n```  \nvirtual BOOL IsDroppedDown() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the toolbar menu button displays its submenu; otherwise `FALSE`.  \n  \n##  <a name=\"cmfctoolbarmenubutton__isemptymenuallowed\"></a>  CMFCToolBarMenuButton::IsEmptyMenuAllowed  \n Specifies whether menu items shows empty submenus.  \n  \n```  \nvirtual BOOL IsEmptyMenuAllowed() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the framework opens a submenu from the currently selected menu item even when the submenu is empty; otherwise `FALSE`.  \n  \n### Remarks  \n The framework calls this method when a user tries to open the submenu from the currently selected menu item. If the submenu is empty and `IsEmptyMenuAllowed` returns `FALSE`, the submenu will not open.  \n  \n The default implementation returns `FALSE`. Override this method to customize this behavior.  \n  \n##  <a name=\"cmfctoolbarmenubutton__isexclusive\"></a>  CMFCToolBarMenuButton::IsExclusive  \n Indicates whether the button is in exclusive mode.  \n  \n```  \nvirtual BOOL IsExclusive() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the button is working in exclusive mode; otherwise `FALSE`.  \n  \n### Remarks  \n When a user opens a popup menu for a button and then moves the mouse pointer over another toolbar or menu button, the popup menu closes unless the button is in exclusive mode.  \n  \n The default implementation always returns `FALSE`. Override this method in a derived class if you want to turn on exclusive mode.  \n  \n##  <a name=\"cmfctoolbarmenubutton__ismenupalettemode\"></a>  CMFCToolBarMenuButton::IsMenuPaletteMode  \n Determines whether the drop-down menu is in palette mode.  \n  \n```  \nBOOL IsMenuPaletteMode() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the palette mode is enabled, otherwise `FALSE`.  \n  \n### Remarks  \n When the menu button is set to palette mode, menu items appear in multiple columns with only a limited number of rows. Call this method to obtain the number of rows. You can enable or disable the palette mode by calling [CMFCToolBarMenuButton::SetMenuPaletteMode](#cmfctoolbarmenubutton__setmenupalettemode).  \n  \n##  <a name=\"cmfctoolbarmenubutton__istearoffmenu\"></a>  CMFCToolBarMenuButton::IsTearOffMenu  \n Indicates whether the drop-down menu has a tear-off bar.  \n  \n```  \nvirtual BOOL IsTearOffMenu() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the toolbar menu button has a tear-off bar; otherwise `FALSE`.  \n  \n### Remarks  \n To enable the tear-off feature and set the tear-off bar ID, call [CMFCToolBarMenuButton::SetTearOff](#cmfctoolbarmenubutton__settearoff).  \n  \n##  <a name=\"cmfctoolbarmenubutton__m_balwayscallownerdraw\"></a>  CMFCToolBarMenuButton::m_bAlwaysCallOwnerDraw  \n Specifies whether the framework always calls [CFrameWndEx::OnDrawMenuImage](../../mfc/reference/cframewndex-class.md#cframewndex__ondrawmenuimage) when a button is drawn.  \n  \n```  \nstatic BOOL m_bAlwaysCallOwnerDraw;  \n```  \n  \n### Remarks  \n When this member variable is set to `TRUE`, the button always calls [CFrameWndEx::OnDrawMenuImage](../../mfc/reference/cframewndex-class.md#cframewndex__ondrawmenuimage) method to display the image on the button. When `m_bAlwaysCallOwnerDraw` is `FALSE`, the button itself draws the image if the image is predefined. Otherwise, it calls `OnDrawMenuImage`.  \n  \n##  <a name=\"cmfctoolbarmenubutton__onaftercreatepopupmenu\"></a>  CMFCToolBarMenuButton::OnAfterCreatePopupMenu  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnAfterCreatePopupMenu();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarmenubutton__onbeforedrag\"></a>  CMFCToolBarMenuButton::OnBeforeDrag  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL OnBeforeDrag() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarmenubutton__oncalculatesize\"></a>  CMFCToolBarMenuButton::OnCalculateSize  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual SIZE OnCalculateSize(\n    CDC* pDC,  \n    const CSize& sizeDefault,  \n    BOOL bHorz);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `sizeDefault`  \n [in] `bHorz`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarmenubutton__oncancelmode\"></a>  CMFCToolBarMenuButton::OnCancelMode  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnCancelMode();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarmenubutton__onchangeparentwnd\"></a>  CMFCToolBarMenuButton::OnChangeParentWnd  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnChangeParentWnd(CWnd* pWndParent);\n```  \n  \n### Parameters  \n [in] `pWndParent`  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarmenubutton__onclick\"></a>  CMFCToolBarMenuButton::OnClick  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL OnClick(\n    CWnd* pWnd,  \n    BOOL bDelay = TRUE);\n```  \n  \n### Parameters  \n [in] `pWnd`  \n [in] `bDelay`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarmenubutton__onclickmenuitem\"></a>  CMFCToolBarMenuButton::OnClickMenuItem  \n Called by the framework when the user selects an item in the drop-down menu.  \n  \n```  \nvirtual BOOL OnClickMenuItem();\n```  \n  \n### Return Value  \n `FALSE` if the framework should continue the default menu item processing; otherwise `TRUE`. The default implementation always returns `FALSE`.  \n  \n### Remarks  \n When the user clicks a menu item, the framework executes a command that is associated with that item.  \n  \n To customize the menu item processing, override `OnClickMenuItem` in a class derived from `CMFCToolBarMenuButton` class. You must also override [CFrameWndEx::OnShowPopupMenu](../../mfc/reference/cframewndex-class.md#cframewndex__onshowpopupmenu) and replace the menu buttons that require special processing with instances of the derived class.  \n  \n##  <a name=\"cmfctoolbarmenubutton__oncontexthelp\"></a>  CMFCToolBarMenuButton::OnContextHelp  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL OnContextHelp(CWnd* pWnd);\n```  \n  \n### Parameters  \n [in] `pWnd`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarmenubutton__ondraw\"></a>  CMFCToolBarMenuButton::OnDraw  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDraw(\n    CDC* pDC,  \n    const CRect& rect,  \n    CMFCToolBarImages* pImages,  \n    BOOL bHorz = TRUE,  \n    BOOL bCustomizeMode = FALSE,  \n    BOOL bHighlight = FALSE,  \n    BOOL bDrawBorder = TRUE,  \n    BOOL bGrayDisabledButtons = TRUE);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `rect`  \n [in] `pImages`  \n [in] `bHorz`  \n [in] `bCustomizeMode`  \n [in] `bHighlight`  \n [in] `bDrawBorder`  \n [in] `bGrayDisabledButtons`  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarmenubutton__ondrawoncustomizelist\"></a>  CMFCToolBarMenuButton::OnDrawOnCustomizeList  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual int OnDrawOnCustomizeList(\n    CDC* pDC,  \n    const CRect& rect,  \n    BOOL bSelected);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `rect`  \n [in] `bSelected`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarmenubutton__openpopupmenu\"></a>  CMFCToolBarMenuButton::OpenPopupMenu  \n Called by the framework when the user opens the drop-down menu of a toolbar menu button.  \n  \n```  \nvirtual BOOL OpenPopupMenu(CWnd* pWnd=NULL);\n```  \n  \n### Parameters  \n [in] `pWnd`  \n Specifies the window that receives the drop-down menu commands. It can be `NULL` only if the toolbar menu button has a parent window.  \n  \n### Return Value  \n `TRUE` when a [CMFCPopupMenu Class](../../mfc/reference/cmfcpopupmenu-class.md) object was created and opened successfully; otherwise `FALSE`.  \n  \n### Remarks  \n This function is called by the framework when the user opens a drop-down menu from a toolbar menu button.  \n  \n##  <a name=\"cmfctoolbarmenubutton__resetimagetodefault\"></a>  CMFCToolBarMenuButton::ResetImageToDefault  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void ResetImageToDefault();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarmenubutton__savebarstate\"></a>  CMFCToolBarMenuButton::SaveBarState  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void SaveBarState();\n```  \n  \n### Remarks  \n The framework calls this method when it creates a toolbar button as the result of a drag-and-drop operation. This method calls the [CMFCPopupMenu::SaveState](../../mfc/reference/cmfcpopupmenu-class.md#cmfcpopupmenu__savestate) method of the top-level pop-up menu, which causes the parent button of the pop-up menu to recreate its menu.  \n  \n##  <a name=\"cmfctoolbarmenubutton__serialize\"></a>  CMFCToolBarMenuButton::Serialize  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void Serialize(CArchive& ar);\n```  \n  \n### Parameters  \n [in] `ar`  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarmenubutton__setaccdata\"></a>  CMFCToolBarMenuButton::SetACCData  \n Sets the accessibility data for the ribbon element.  \n  \n```  \nvirtual BOOL SetACCData(\n    CWnd* pParent,  \n    CAccessibilityData& data);\n```  \n  \n### Parameters  \n `pParent`  \n The parent window for the ribbon element.  \n  \n `data`  \n The accessibility data for the ribbon element.  \n  \n### Return Value  \n Always returns `TRUE`.  \n  \n### Remarks  \n By default this method sets the accessibility data for the ribbon element and always returns `TRUE`. Override this method to set the accessibility data and return a value that indicates success or failure.  \n  \n##  <a name=\"cmfctoolbarmenubutton__setmenuonly\"></a>  CMFCToolBarMenuButton::SetMenuOnly  \n Specifies whether the button is drawn as a menu button or a split button when it has both a valid command ID and a submenu.  \n  \n```  \nvoid SetMenuOnly(BOOL bMenuOnly);\n```  \n  \n### Parameters  \n [in] `bMenuOnly`  \n `TRUE` to show this button as a menu button when it has both a valid command ID and a submenu, `FALSE` to show this button as a split button when it has both a valid command ID and a submenu.  \n  \n### Remarks  \n Typically, when a toolbar menu button has both a submenu and a command ID, the menu appears to be a split button that has a main button and an attached down arrow button. If you call this method and `bMenuOnly` is `TRUE`, the button instead appears to be a single menu button with a down arrow in the button. When the user clicks the arrow in either mode, the submenu opens, and when the user clicks the non-arrow part of the button in either mode the framework executes the command .  \n  \n##  <a name=\"cmfctoolbarmenubutton__setmenupalettemode\"></a>  CMFCToolBarMenuButton::SetMenuPaletteMode  \n Specifies whether the drop-down menu is in palette mode.  \n  \n```  \nvoid SetMenuPaletteMode(\n    BOOL bMenuPaletteMode=TRUE,  \n    int nPaletteRows=1);\n```  \n  \n### Parameters  \n [in] `bMenuPaletteMode`  \n Specifies whether the drop-down menu is in palette mode.  \n  \n [in] `nPaletteRows`  \n Number of rows in palette.  \n  \n### Remarks  \n In the palette mode, all menu items are displayed as a multicolumn palette. You specify the number of rows by using `nPaletteRows`.  \n  \n##  <a name=\"cmfctoolbarmenubutton__setmessagewnd\"></a>  CMFCToolBarMenuButton::SetMessageWnd  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetMessageWnd(CWnd* pWndMessage);\n```  \n  \n### Parameters  \n [in] `pWndMessage`  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarmenubutton__setradio\"></a>  CMFCToolBarMenuButton::SetRadio  \n Sets the toolbar menu button to display a radio button style icon when it is checked.  \n  \n```  \nvirtual void SetRadio();\n```  \n  \n### Remarks  \n When the menu button is drawn while it is checked, it calls [CMFCVisualManager::OnDrawMenuCheck](../../mfc/reference/cmfcvisualmanager-class.md#cmfcvisualmanager__ondrawmenucheck) to draw a checkmark icon. By default, `OnDrawMenuCheck` requests that the current visual manager draws a checkbox style checkmark on the menu button. After you call this method, the current visual manager instead draws a radio button style checkmark on the menu button. This change cannot be undone.  \n  \n When you call this method and the menu button is currently being displayed, it will refresh.  \n  \n##  <a name=\"cmfctoolbarmenubutton__settearoff\"></a>  CMFCToolBarMenuButton::SetTearOff  \n Specifies the ID of the tear-off bar for the drop-down menu.  \n  \n```  \nvirtual void SetTearOff(UINT uiBarID);\n```  \n  \n### Parameters  \n [in] `uiBarID`  \n Specifies a new tear-off bar ID.  \n  \n### Remarks  \n Call this method to specify the ID for the tear-off bar that is created when the user drags the menu button off of a menu bar. If the `uiBarID` parameter is 0, the user cannot tear off the menu button.  \n  \n Call [CWinAppEx::EnableTearOffMenus](../../mfc/reference/cwinappex-class.md#cwinappex__enabletearoffmenus) to enable the tear-off menu feature in your application.  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CMFCToolBarButton Class](../../mfc/reference/cmfctoolbarbutton-class.md)   \n [CMFCToolBar Class](../../mfc/reference/cmfctoolbar-class.md)   \n [CMFCPopupMenu Class](../../mfc/reference/cmfcpopupmenu-class.md)"}