{"nodes":[{"pos":[12,60],"content":"uniform_real_distribution Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"uniform_real_distribution Class | Microsoft Docs","pos":[0,48]}]},{"pos":[851,882],"content":"uniform_real_distribution Class","linkify":"uniform_real_distribution Class","nodes":[{"content":"uniform_real_distribution Class","pos":[0,31]}]},{"content":"Generates a uniform (every value is equally probable) floating-point distribution  within an output range that is inclusive-exclusive.","pos":[883,1017]},{"pos":[1026,1032],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1751,1761],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The floating-point result type, defaults to <ph id=\"ph1\">`double`</ph>.","pos":[1779,1832],"source":" The floating-point result type, defaults to `double`."},{"content":"For possible types, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","pos":[1833,1900],"source":" For possible types, see [\\<random>](../standard-library/random.md)."},{"pos":[1909,1916],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template class describes an inclusive-exclusive distribution that produces values of a user-specified integral floating point type with a distribution so that every value is equally probable.","pos":[1920,2115]},{"content":"The following table links to articles about individual members.","pos":[2116,2179]},{"pos":[2203,2312],"content":"<bpt id=\"p1\">[</bpt>uniform_real_distribution::uniform_real_distribution<ept id=\"p1\">](#uniform_real_distribution__uniform_real_distribution)</ept>","source":"[uniform_real_distribution::uniform_real_distribution](#uniform_real_distribution__uniform_real_distribution)"},{"pos":[2454,2533],"content":"<bpt id=\"p1\">[</bpt>uniform_real_distribution::param_type<ept id=\"p1\">](#uniform_real_distribution__param_type)</ept>","source":"[uniform_real_distribution::param_type](#uniform_real_distribution__param_type)"},{"content":"The property member <ph id=\"ph1\">`a()`</ph> returns the currently stored minimum bound of the distribution, while <ph id=\"ph2\">`b()`</ph> returns the currently stored maximum bound.","pos":[2541,2686],"source":"The property member `a()` returns the currently stored minimum bound of the distribution, while `b()` returns the currently stored maximum bound."},{"content":"For this distribution class, these minimum and maximum values are the same as those returned by the common property functions <ph id=\"ph1\">`min()`</ph> and <ph id=\"ph2\">`max()`</ph> described in the <bpt id=\"p1\">[</bpt><ph id=\"ph3\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept> topic.","pos":[2687,2899],"source":" For this distribution class, these minimum and maximum values are the same as those returned by the common property functions `min()` and `max()` described in the [\\<random>](../standard-library/random.md) topic."},{"pos":[2906,3020],"content":"For more information about distribution classes and their members, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","source":"For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md)."},{"pos":[3029,3036],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4694,4700],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[5546,5558],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[5562,5583],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>random&gt;","source":"**Header:** \\<random>"},{"pos":[5590,5608],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[5618,5739],"content":"<bpt id=\"p1\">&lt;a name=\"uniform_real_distribution__uniform_real_distribution\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  uniform_real_distribution::uniform_real_distribution","linkify":"<a name=\"uniform_real_distribution__uniform_real_distribution\"></a>  uniform_real_distribution::uniform_real_distribution","source":"<a name=\"uniform_real_distribution__uniform_real_distribution\"></a>  uniform_real_distribution::uniform_real_distribution"},{"content":"Constructs the distribution.","pos":[5743,5771]},{"pos":[5931,5941],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The lower bound for random values, inclusive.","pos":[5952,5997]},{"content":"The upper bound for random values, exclusive.","pos":[6011,6056]},{"content":"The parameter structure used to construct the distribution.","pos":[6073,6132]},{"pos":[6142,6149],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6153,6178],"content":"<bpt id=\"p1\">**</bpt>Precondition:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`a &lt; b`</ph>","source":"**Precondition:** `a < b`"},{"pos":[6185,6318],"content":"The first constructor constructs an object whose stored <ph id=\"ph1\">`a`</ph> value holds the value <ph id=\"ph2\">`a`</ph> and whose stored <ph id=\"ph3\">`b`</ph> value holds the value <ph id=\"ph4\">`b`</ph>.","source":"The first constructor constructs an object whose stored `a` value holds the value `a` and whose stored `b` value holds the value `b`."},{"content":"The second constructor constructs an object whose stored parameters are initialized from <ph id=\"ph1\">`parm`</ph>.","pos":[6325,6421],"source":"The second constructor constructs an object whose stored parameters are initialized from `parm`."},{"content":"You can obtain and set the current parameters of an existing distribution by calling the <ph id=\"ph1\">`param()`</ph> member function.","pos":[6422,6537],"source":" You can obtain and set the current parameters of an existing distribution by calling the `param()` member function."},{"pos":[6547,6638],"content":"<bpt id=\"p1\">&lt;a name=\"uniform_real_distribution__param_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  uniform_real_distribution::param_type","linkify":"<a name=\"uniform_real_distribution__param_type\"></a>  uniform_real_distribution::param_type","source":"<a name=\"uniform_real_distribution__param_type\"></a>  uniform_real_distribution::param_type"},{"content":"Stores all the parameters of the distribution.","pos":[6642,6688]},{"pos":[7018,7028],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[7032,7139],"content":"See parent topic <bpt id=\"p1\">[</bpt>uniform_real_distribution Class<ept id=\"p1\">](../standard-library/uniform-real-distribution-class.md)</ept>.","source":"See parent topic [uniform_real_distribution Class](../standard-library/uniform-real-distribution-class.md)."},{"pos":[7149,7156],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7160,7185],"content":"<bpt id=\"p1\">**</bpt>Precondition:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`a &lt; b`</ph>","source":"**Precondition:** `a < b`"},{"pos":[7192,7435],"content":"This structure can be passed to the distribution's class constructor at instantiation, to the <ph id=\"ph1\">`param()`</ph> member function to set the stored parameters of an existing distribution, and to <ph id=\"ph2\">`operator()`</ph> to be used in place of the stored parameters.","source":"This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters."},{"pos":[7444,7452],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[7456,7498],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>","source":"[\\<random>](../standard-library/random.md)"}],"content":"---\ntitle: \"uniform_real_distribution Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"tr1::uniform_real_distribution\"\n  - \"std::tr1::uniform_real_distribution\"\n  - \"random/std::tr1::uniform_real_distribution\"\n  - \"uniform_real_distribution\"\n  - \"std.tr1.uniform_real_distribution\"\n  - \"tr1.uniform_real_distribution\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"uniform_real_distribution class\"\nms.assetid: 5cf906fd-0319-4984-b21b-98425cd7532d\ncaps.latest.revision: 18\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# uniform_real_distribution Class\nGenerates a uniform (every value is equally probable) floating-point distribution  within an output range that is inclusive-exclusive.  \n  \n## Syntax  \n```  \nclass uniform_real_distribution {\npublic:\n    // types \n    typedef RealType result_type;\n    struct param_type;\n    // constructors and reset functions \n    explicit uniform_real_distribution(RealType a = 0.0, RealType b = 1.0);\n    explicit uniform_real_distribution(const param_type& parm);\n    void reset();\n    // generating functions template <class URNG>  \n    result_type operator()(URNG& gen);\n    template <class URNG>\n    result_type operator()(URNG& gen, const param_type& parm);\n    // property functions result_type a() const;\n    result_type b() const;\n    param_type param() const;\n    void param(const param_type& parm);\n    result_type min() const;\n    result_type max() const;\n};\n ``` \n#### Parameters  \n `RealType`  \n The floating-point result type, defaults to `double`. For possible types, see [\\<random>](../standard-library/random.md).  \n  \n## Remarks  \n The template class describes an inclusive-exclusive distribution that produces values of a user-specified integral floating point type with a distribution so that every value is equally probable. The following table links to articles about individual members.  \n  \n||||  \n|-|-|-|  \n|[uniform_real_distribution::uniform_real_distribution](#uniform_real_distribution__uniform_real_distribution)|`uniform_real_distribution::a`|`uniform_real_distribution::param`|  \n|`uniform_real_distribution::operator()`|`uniform_real_distribution::b`|[uniform_real_distribution::param_type](#uniform_real_distribution__param_type)|  \n  \n The property member `a()` returns the currently stored minimum bound of the distribution, while `b()` returns the currently stored maximum bound. For this distribution class, these minimum and maximum values are the same as those returned by the common property functions `min()` and `max()` described in the [\\<random>](../standard-library/random.md) topic.  \n  \n For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md).  \n  \n## Example  \n  \n```cpp  \n// compile with: /EHsc /W4  \n#include <random>   \n#include <iostream>  \n#include <iomanip>  \n#include <string>  \n#include <map>  \n  \nvoid test(const double a, const double b, const int s) {  \n  \n    // uncomment to use a non-deterministic seed  \n    //    std::random_device rd;  \n    //    std::mt19937 gen(rd());  \n    std::mt19937 gen(1729);  \n  \n    std::uniform_real_distribution<> distr(a,b);  \n  \n    std::cout << \"lower bound == \" << distr.a() << std::endl;  \n    std::cout << \"upper bound == \" << distr.b() << std::endl;  \n  \n    // generate the distribution as a histogram  \n    std::map<double, int> histogram;  \n    for (int i = 0; i < s; ++i) {  \n        ++histogram[distr(gen)];  \n    }  \n  \n    // print results  \n    std::cout << \"Distribution for \" << s << \" samples:\" << std::endl;  \n    int counter = 0;  \n    for (const auto& elem : histogram) {  \n        std::cout << std::fixed << std::setw(11) << ++counter << \": \"   \n            << std::setprecision(10) << elem.first << std::endl;  \n    }  \n    std::cout << std::endl;  \n}  \n  \nint main()  \n{  \n    double a_dist = 1.0;  \n    double b_dist = 1.5;  \n  \n    int samples = 10;  \n  \n    std::cout << \"Use CTRL-Z to bypass data entry and run using default values.\" << std::endl;  \n    std::cout << \"Enter a floating point value for the lower bound of the distribution: \";  \n    std::cin >> a_dist;  \n    std::cout << \"Enter a floating point value for the upper bound of the distribution: \";  \n    std::cin >> b_dist;  \n    std::cout << \"Enter an integer value for the sample count: \";  \n    std::cin >> samples;  \n  \n    test(a_dist, b_dist, samples);  \n}  \n  \n```  \n  \n## Output  \n  \n```Output  \nUse CTRL-Z to bypass data entry and run using default values.Enter a floating point value for the lower bound of the distribution: .5Enter a floating point value for the upper bound of the distribution: 1Enter an integer value for the sample count: 20lower bound == 0.5upper bound == 1Distribution for 20 samples:          1: 0.5144304741          2: 0.6003997192          3: 0.6060792968          4: 0.6270416650          5: 0.6295091197          6: 0.6437749373          7: 0.6513740058          8: 0.7062379346          9: 0.7117609406         10: 0.7206888566         11: 0.7423223702         12: 0.7826033033         13: 0.8112872958         14: 0.8440467608         15: 0.8461254641         16: 0.8598305065         17: 0.8640874069         18: 0.8770968361         19: 0.9397858282         20: 0.9804645012  \n```  \n  \n## Requirements  \n **Header:** \\<random>  \n  \n **Namespace:** std  \n  \n##  <a name=\"uniform_real_distribution__uniform_real_distribution\"></a>  uniform_real_distribution::uniform_real_distribution  \n Constructs the distribution.  \n  \n```  \nexplicit uniform_real_distribution(RealType a = 0.0, RealType b = 1.0);\n\n \nexplicit uniform_real_distribution(const param_type& parm);\n```  \n  \n### Parameters  \n `a`  \n The lower bound for random values, inclusive.  \n  \n `b`  \n The upper bound for random values, exclusive.  \n  \n `parm`  \n The parameter structure used to construct the distribution.  \n  \n### Remarks  \n **Precondition:** `a < b`  \n  \n The first constructor constructs an object whose stored `a` value holds the value `a` and whose stored `b` value holds the value `b`.  \n  \n The second constructor constructs an object whose stored parameters are initialized from `parm`. You can obtain and set the current parameters of an existing distribution by calling the `param()` member function.  \n  \n##  <a name=\"uniform_real_distribution__param_type\"></a>  uniform_real_distribution::param_type  \n Stores all the parameters of the distribution.  \n```cpp  \nstruct param_type {  \n   typedef uniform_real_distribution<RealType> distribution_type;  \n   param_type(RealType a = 0.0, RealType b = 1.0);\n   RealType a() const;\n   RealType b() const;\n   .....  \n   bool operator==(const param_type& right) const;\n   bool operator!=(const param_type& right) const;\n   };  \n```  \n### Parameters  \n See parent topic [uniform_real_distribution Class](../standard-library/uniform-real-distribution-class.md).  \n  \n### Remarks  \n **Precondition:** `a < b`  \n  \n This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters.  \n  \n## See Also  \n [\\<random>](../standard-library/random.md)\n\n\n\n"}