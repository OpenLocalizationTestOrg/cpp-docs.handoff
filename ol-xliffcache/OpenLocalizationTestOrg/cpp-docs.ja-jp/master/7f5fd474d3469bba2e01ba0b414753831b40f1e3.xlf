<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7f5fd474d3469bba2e01ba0b414753831b40f1e3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\reference\single-assignment-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">215c419b8ec7dea68e0b29afdfa9971302569e08</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a9d955c493559ac1fdd089956e187bdc07391b55</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>single_assignment Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>single_assignment Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`single_assignment`</ph> messaging block is a multi-target, multi-source, ordered <ph id="ph2">`propagator_block`</ph> capable of storing a single, write-once <ph id="ph3">`message`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The payload type of the message stored and propagated by the buffer.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>single_assignment::single_assignment Constructor</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Overloaded.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`single_assignment`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>single_assignment::~single_assignment Destructor</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Destroys the <ph id="ph1">`single_assignment`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>single_assignment::has_value Method</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Checks whether this <ph id="ph1">`single_assignment`</ph> messaging block has been initialized with a value yet.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>single_assignment::value Method</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Gets a reference to the current payload of the message being stored in the <ph id="ph1">`single_assignment`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Protected Methods</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>single_assignment::accept_message Method</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Accepts a message that was offered by this <ph id="ph1">`single_assignment`</ph> messaging block, returning a copy of the message to the caller.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>single_assignment::consume_message Method</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Consumes a message previously offered by the <ph id="ph1">`single_assignment`</ph> and reserved by the target, returning a copy of the message to the caller.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>single_assignment::link_target_notification Method</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A callback that notifies that a new target has been linked to this <ph id="ph1">`single_assignment`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>single_assignment::propagate_message Method</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Asynchronously passes a message from an <ph id="ph1">`ISource`</ph> block to this <ph id="ph2">`single_assignment`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>It is invoked by the <ph id="ph1">`propagate`</ph> method, when called by a source block.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>single_assignment::propagate_to_any_targets Method</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Places the <ph id="ph1">`message``_PMessage`</ph> in this <ph id="ph2">`single_assignment`</ph> messaging block and offers it to all of the linked targets.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>single_assignment::release_message Method</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Releases a previous message reservation.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>source_block::release_message<ept id="p1">](source-block-class.md#release_message)</ept>.)</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>single_assignment::reserve_message Method</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Reserves a message previously offered by this <ph id="ph1">`single_assignment`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>source_block::reserve_message<ept id="p1">](source-block-class.md#reserve_message)</ept>.)</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>single_assignment::resume_propagation Method</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Resumes propagation after a reservation has been released.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>source_block::resume_propagation<ept id="p1">](source-block-class.md#resume_propagation)</ept>.)</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>single_assignment::send_message Method</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Synchronously passes a message from an <ph id="ph1">`ISource`</ph> block to this <ph id="ph2">`single_assignment`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>It is invoked by the <ph id="ph1">`send`</ph> method, when called by a source block.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`single_assignment`</ph> messaging block propagates out copies of its message to each target.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Asynchronous Message Blocks<ept id="p1">](../../../parallel/concrt/asynchronous-message-blocks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>ISource</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>ITarget</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>source_block</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>propagator_block</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> agents.h</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> concurrency</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>single_assignment::accept_message Method</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Accepts a message that was offered by this <ph id="ph1">`single_assignment`</ph> messaging block, returning a copy of the message to the caller.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`runtime_object_identity`</ph> of the offered <ph id="ph2">`message`</ph> object.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A pointer to the <ph id="ph1">`message`</ph> object that the caller now has ownership of.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`single_assignment`</ph> messaging block returns copies of the message to its targets, rather than transferring ownership of the currently held message.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>single_assignment::consume_message Method</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Consumes a message previously offered by the <ph id="ph1">`single_assignment`</ph> and reserved by the target, returning a copy of the message to the caller.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`runtime_object_identity`</ph> of the <ph id="ph2">`message`</ph> object being consumed.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A pointer to the <ph id="ph1">`message`</ph> object that the caller now has ownership of.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Similar to <ph id="ph1">`accept`</ph>, but is always preceded by a call to <ph id="ph2">`reserve`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>single_assignment::has_value Method</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Checks whether this <ph id="ph1">`single_assignment`</ph> messaging block has been initialized with a value yet.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>if the block has received a value, <ph id="ph1">`false`</ph> otherwise.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>single_assignment::link_target_notification Method</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A callback that notifies that a new target has been linked to this <ph id="ph1">`single_assignment`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>A pointer to the newly linked target.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>single_assignment::propagate_message Method</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Asynchronously passes a message from an <ph id="ph1">`ISource`</ph> block to this <ph id="ph2">`single_assignment`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>It is invoked by the <ph id="ph1">`propagate`</ph> method, when called by a source block.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A pointer to the <ph id="ph1">`message`</ph> object.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>A pointer to the source block offering the message.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>message_status<ept id="p1">](concurrency-namespace-enums.md)</ept> indication of what the target decided to do with the message.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>single_assignment::propagate_to_any_targets Method</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Places the <ph id="ph1">`message``_PMessage`</ph> in this <ph id="ph2">`single_assignment`</ph> messaging block and offers it to all of the linked targets.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`message`</ph> that this <ph id="ph2">`single_assignment`</ph> messaging block has taken ownership of.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>single_assignment::release_message Method</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Releases a previous message reservation.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`runtime_object_identity`</ph> of the <ph id="ph2">`message`</ph> object being released.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>single_assignment::reserve_message Method</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Reserves a message previously offered by this <ph id="ph1">`single_assignment`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`runtime_object_identity`</ph> of the <ph id="ph2">`message`</ph> object being reserved.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>if the message was successfully reserved, <ph id="ph1">`false`</ph> otherwise.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>After <ph id="ph1">`reserve`</ph> is called, if it returns <ph id="ph2">`true`</ph>, either <ph id="ph3">`consume`</ph> or <ph id="ph4">`release`</ph> must be called to either take or release ownership of the message.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>single_assignment::resume_propagation Method</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Resumes propagation after a reservation has been released.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>single_assignment::send_message Method</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Synchronously passes a message from an <ph id="ph1">`ISource`</ph> block to this <ph id="ph2">`single_assignment`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>It is invoked by the <ph id="ph1">`send`</ph> method, when called by a source block.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>A pointer to the <ph id="ph1">`message`</ph> object.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>A pointer to the source block offering the message.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>message_status<ept id="p1">](concurrency-namespace-enums.md)</ept> indication of what the target decided to do with the message.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>single_assignment::single_assignment Constructor</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`single_assignment`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>A filter function which determines whether offered messages should be accepted.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Scheduler`</ph> object within which the propagation task for the <ph id="ph2">`single_assignment`</ph> messaging block is scheduled.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ScheduleGroup`</ph> object within which the propagation task for the <ph id="ph2">`single_assignment`</ph> messaging block is scheduled.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Scheduler`</ph> object used is implied by the schedule group.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The runtime uses the default scheduler if you do not specify the <ph id="ph1">`_PScheduler`</ph> or <ph id="ph2">`_PScheduleGroup`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The type <ph id="ph1">`filter_method`</ph> is a functor with signature <ph id="ph2">`bool (T const &amp;)`</ph> which is invoked by this <ph id="ph3">`single_assignment`</ph> messaging block to determine whether or not it should accept an offered message.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>single_assignment::~single_assignment Destructor</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Destroys the <ph id="ph1">`single_assignment`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>single_assignment::value Method</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Gets a reference to the current payload of the message being stored in the <ph id="ph1">`single_assignment`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The payload of the stored message.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>This method will wait until a message arrives if no message is currently stored in the <ph id="ph1">`single_assignment`</ph> messaging block.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>concurrency Namespace</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>overwrite_buffer Class</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>unbounded_buffer Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>