{"nodes":[{"pos":[12,97],"content":"strtok_s, _strtok_s_l, wcstok_s, _wcstok_s_l, _mbstok_s, _mbstok_s_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"strtok_s, _strtok_s_l, wcstok_s, _wcstok_s_l, _mbstok_s, _mbstok_s_l | Microsoft Docs","pos":[0,85]}]},{"content":"strtok_s, _strtok_s_l, wcstok_s, _wcstok_s_l, _mbstok_s, _mbstok_s_l","pos":[1564,1632]},{"content":"Finds the next token in a string, by using the current locale or a locale that's passed in.","pos":[1633,1724]},{"content":"These versions of <bpt id=\"p1\">[</bpt>strtok, _strtok_l, wcstok, _wcstok_l, _mbstok, _mbstok_l<ept id=\"p1\">](../../c-runtime-library/reference/strtok-strtok-l-wcstok-wcstok-l-mbstok-mbstok-l.md)</ept> have security enhancements, as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1725,2020],"source":" These versions of [strtok, _strtok_l, wcstok, _wcstok_l, _mbstok, _mbstok_l](../../c-runtime-library/reference/strtok-strtok-l-wcstok-wcstok-l-mbstok-mbstok-l.md) have security enhancements, as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"pos":[2028,2269],"content":"[!IMPORTANT]\n `_mbstok_s` and `_mbstok_s_l` cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" and `_mbstok_s_l` cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[25,239],"nodes":[{"content":"and <ph id=\"ph1\">`_mbstok_s_l`</ph> cannot be used in applications that execute in the Windows Runtime.","pos":[1,86],"source":" and `_mbstok_s_l` cannot be used in applications that execute in the Windows Runtime."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[87,214],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"content":"Syntax","pos":[2278,2284]},{"content":"Parameters","pos":[2984,2994]},{"content":"String containing token or tokens.","pos":[3012,3046]},{"content":"Set of delimiter characters.","pos":[3069,3097]},{"content":"Used to store position information between calls to","pos":[3117,3168]},{"content":"Locale to use.","pos":[3198,3212]},{"content":"Return Value","pos":[3221,3233]},{"content":"Returns a pointer to the next token found in <ph id=\"ph1\">`strToken`</ph>.","pos":[3237,3293],"source":"Returns a pointer to the next token found in `strToken`."},{"content":"They return <ph id=\"ph1\">`NULL`</ph> when no more tokens are found.","pos":[3294,3343],"source":" They return `NULL` when no more tokens are found."},{"content":"Each call modifies <ph id=\"ph1\">`strToken`</ph> by substituting a <ph id=\"ph2\">`NULL`</ph> character for the first delimiter that occurs after the returned token.","pos":[3344,3470],"source":" Each call modifies `strToken` by substituting a `NULL` character for the first delimiter that occurs after the returned token."},{"content":"Error Conditions","pos":[3480,3496]},{"content":"Return value","pos":[3537,3549]},{"content":"any","pos":[3658,3661]},{"content":"pointer to a null pointer","pos":[3662,3687]},{"content":"any","pos":[3708,3711]},{"content":"any","pos":[3719,3722]},{"content":"any","pos":[3743,3746]},{"content":"any","pos":[3747,3750]},{"pos":[3781,3876],"content":"If <ph id=\"ph1\">`strToken`</ph> is <ph id=\"ph2\">`NULL`</ph> but context is a pointer to a valid context pointer, there is no error.","source":"If `strToken` is `NULL` but context is a pointer to a valid context pointer, there is no error."},{"content":"Remarks","pos":[3885,3892]},{"content":"The <ph id=\"ph1\">`strtok_s`</ph> function finds the next token in <ph id=\"ph2\">`strToken`</ph>.","pos":[3896,3955],"source":"The `strtok_s` function finds the next token in `strToken`."},{"content":"The set of characters in <ph id=\"ph1\">`strDelimit`</ph> specifies possible delimiters of the token to be found in <ph id=\"ph2\">`strToken`</ph> on the current call.","pos":[3956,4083],"source":" The set of characters in `strDelimit` specifies possible delimiters of the token to be found in `strToken` on the current call."},{"content":"and <ph id=\"ph1\">`_mbstok_s`</ph>are wide-character and multibyte-character versions of <ph id=\"ph2\">`strtok_s`</ph>.","pos":[4095,4176],"source":" and `_mbstok_s`are wide-character and multibyte-character versions of `strtok_s`."},{"content":"The arguments and return values of <ph id=\"ph1\">`wcstok_s`</ph> and <ph id=\"ph2\">`_wcstok_s_l`</ph> are wide-character strings; those of <ph id=\"ph3\">`_mbstok_s`</ph> and <ph id=\"ph4\">`_mbstok_s_l`</ph> are multibyte-character strings.","pos":[4177,4340],"source":" The arguments and return values of `wcstok_s` and `_wcstok_s_l` are wide-character strings; those of `_mbstok_s` and `_mbstok_s_l` are multibyte-character strings."},{"content":"These three functions behave identically otherwise.","pos":[4341,4392]},{"content":"This function validates its parameters.","pos":[4399,4438]},{"content":"If an error condition occurs, as in the Error Conditions table, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[4439,4633],"source":" If an error condition occurs, as in the Error Conditions table, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and return <ph id=\"ph3\">`NULL`</ph>.","pos":[4634,4729],"source":" If execution is allowed to continue, these functions set `errno` to `EINVAL` and return `NULL`."},{"content":"Generic-Text Routine Mappings","pos":[4739,4768]},{"content":"TCHAR.H routine","pos":[4775,4790]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[4791,4819],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[4820,4833]},{"content":"_UNICODE defined","pos":[4834,4850]},{"content":"On the first call to <ph id=\"ph1\">`strtok_s`</ph> the function skips leading delimiters and returns a pointer to the first token in <ph id=\"ph2\">`strToken`</ph>, terminating the token with a null character.","pos":[5076,5246],"source":"On the first call to `strtok_s` the function skips leading delimiters and returns a pointer to the first token in `strToken`, terminating the token with a null character."},{"content":"More tokens can be broken out of the remainder of <ph id=\"ph1\">`strToken`</ph> by a series of calls to <ph id=\"ph2\">`strtok_s`</ph>.","pos":[5247,5343],"source":" More tokens can be broken out of the remainder of `strToken` by a series of calls to `strtok_s`."},{"content":"Each call to <ph id=\"ph1\">`strtok_s`</ph> modifies <ph id=\"ph2\">`strToken`</ph> by inserting a null character after the token returned by that call.","pos":[5344,5456],"source":" Each call to `strtok_s` modifies `strToken` by inserting a null character after the token returned by that call."},{"content":"The <ph id=\"ph1\">`context`</ph> pointer keeps track of which string is being read and where in the string the next token is to be read.","pos":[5457,5574],"source":" The `context` pointer keeps track of which string is being read and where in the string the next token is to be read."},{"content":"To read the next token from <ph id=\"ph1\">`strToken`</ph>, call <ph id=\"ph2\">`strtok_s`</ph> with a <ph id=\"ph3\">`NULL`</ph> value for the <ph id=\"ph4\">`strToken`</ph> argument, and pass the same <ph id=\"ph5\">`context`</ph> parameter.","pos":[5575,5718],"source":" To read the next token from `strToken`, call `strtok_s` with a `NULL` value for the `strToken` argument, and pass the same `context` parameter."},{"content":"The <ph id=\"ph1\">`NULL`</ph> <ph id=\"ph2\">`strToken`</ph> argument causes <ph id=\"ph3\">`strtok_s`</ph> to search for the next token in the modified <ph id=\"ph4\">`strToken`</ph>.","pos":[5719,5824],"source":" The `NULL` `strToken` argument causes `strtok_s` to search for the next token in the modified `strToken`."},{"content":"The <ph id=\"ph1\">`strDelimit`</ph> argument can take any value from one call to the next so that the set of delimiters may vary.","pos":[5825,5935],"source":" The `strDelimit` argument can take any value from one call to the next so that the set of delimiters may vary."},{"pos":[5942,6106],"content":"Since the <ph id=\"ph1\">`context`</ph> parameter supersedes the static buffers used in <ph id=\"ph2\">`strtok`</ph> and <ph id=\"ph3\">`_strtok_l`</ph>, it is possible to parse two strings simultaneously in the same thread.","source":"Since the `context` parameter supersedes the static buffers used in `strtok` and `_strtok_l`, it is possible to parse two strings simultaneously in the same thread."},{"content":"The output value is affected by the setting of the <ph id=\"ph1\">`LC_CTYPE`</ph> category setting of the locale; see <bpt id=\"p1\">[</bpt>setlocale<ept id=\"p1\">](../../c-runtime-library/reference/setlocale-wsetlocale.md)</ept> for more information.","pos":[6113,6303],"source":"The output value is affected by the setting of the `LC_CTYPE` category setting of the locale; see [setlocale](../../c-runtime-library/reference/setlocale-wsetlocale.md) for more information."},{"content":"The versions of these functions without the <ph id=\"ph1\">`_l`</ph> suffix use the current locale for this locale-dependent behavior; the versions with the <ph id=\"ph2\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead.","pos":[6304,6527],"source":" The versions of these functions without the `_l` suffix use the current locale for this locale-dependent behavior; the versions with the `_l` suffix are identical except that they use the locale parameter passed in instead."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Locale<ept id=\"p1\">](../../c-runtime-library/locale.md)</ept>.","pos":[6528,6598],"source":" For more information, see [Locale](../../c-runtime-library/locale.md)."},{"content":"Requirements","pos":[6607,6619]},{"content":"Routine","pos":[6626,6633]},{"content":"Required header","pos":[6634,6649]},{"content":"string.h&gt;","pos":[6707,6716],"source":"string.h>"},{"content":"string.h&gt;","pos":[6737,6746],"source":"string.h>"},{"content":"string.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[6791,6814],"source":"string.h> or \\<wchar.h>"},{"content":"mbstring.h&gt;","pos":[6860,6871],"source":"mbstring.h>"},{"pos":[6879,6983],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"Example","pos":[6992,6999]},{"content":".NET Framework Equivalent","pos":[8415,8440]},{"content":"Not applicable.","pos":[8444,8459]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[8460,8507],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[8508,8633],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[8642,8650]},{"content":"String Manipulation","pos":[8655,8674]},{"content":"Locale","pos":[8733,8739]},{"content":"Interpretation of Multibyte-Character Sequences","pos":[8781,8828]},{"content":"strcspn, wcscspn, _mbscspn, _mbscspn_l","pos":[8911,8949]},{"content":"strspn, wcsspn, _mbsspn, _mbsspn_l","pos":[9028,9062]}],"content":"---\ntitle: \"strtok_s, _strtok_s_l, wcstok_s, _wcstok_s_l, _mbstok_s, _mbstok_s_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_wcstok_s_l\"\n  - \"_mbstok_s_l\"\n  - \"_mbstok_s\"\n  - \"strtok_s\"\n  - \"wcstok_s\"\n  - \"_strtok_s_l\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-multibyte-l1-1-0.dll\"\n  - \"api-ms-win-crt-string-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_tcstok_s_l\"\n  - \"_wcstok_s_l\"\n  - \"_tcstok_s\"\n  - \"_mbstok_s_l\"\n  - \"strtok_s\"\n  - \"wcstok_s\"\n  - \"_mbstok_s\"\n  - \"_strtok_s_l\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_strtok_s_l function\"\n  - \"_mbstok_s_l function\"\n  - \"strings [C++], searching\"\n  - \"mbstok_s_l function\"\n  - \"wcstok_s_l function\"\n  - \"_wcstok_s_l function\"\n  - \"_tcstok_s function\"\n  - \"_tcstok_s_l function\"\n  - \"strtok_s_l function\"\n  - \"wcstok_s function\"\n  - \"tokens, finding in strings\"\n  - \"mbstok_s function\"\n  - \"_mbstok_s function\"\n  - \"strtok_s function\"\nms.assetid: 7696c972-f83b-4617-8c82-95973e9fdb46\ncaps.latest.revision: 28\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# strtok_s, _strtok_s_l, wcstok_s, _wcstok_s_l, _mbstok_s, _mbstok_s_l\nFinds the next token in a string, by using the current locale or a locale that's passed in. These versions of [strtok, _strtok_l, wcstok, _wcstok_l, _mbstok, _mbstok_l](../../c-runtime-library/reference/strtok-strtok-l-wcstok-wcstok-l-mbstok-mbstok-l.md) have security enhancements, as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n> [!IMPORTANT]\n>  `_mbstok_s` and `_mbstok_s_l` cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \n  \n      char *strtok_s(  \nchar *strToken,  \nconst char *strDelimit,  \n   char **context  \n);  \nchar *_strtok_s_l(  \nchar *strToken,  \nconst char *strDelimit,  \n   char **context,  \n_locale_tlocale  \n);  \nwchar_t *wcstok_s(  \nwchar_t *strToken,  \nconst wchar_t *strDelimit,   \n   wchar_t**context  \n);  \nwchar_t *_wcstok_s_l(  \nwchar_t *strToken,  \nconst wchar_t *strDelimit,   \n   wchar_t**context,  \n_locale_tlocale  \n);  \nunsigned char *_mbstok_s(  \nunsigned char*strToken,  \nconst unsigned char *strDelimit,   \n   char **context  \n);  \nunsigned char *_mbstok_s(  \nunsigned char*strToken,  \nconst unsigned char *strDelimit,   \n   char **context,  \n_locale_tlocale  \n);  \n```  \n  \n#### Parameters  \n `strToken`  \n String containing token or tokens.  \n  \n `strDelimit`  \n Set of delimiter characters.  \n  \n `context`  \n Used to store position information between calls to `strtok_s`  \n  \n `locale`  \n Locale to use.  \n  \n## Return Value  \n Returns a pointer to the next token found in `strToken`. They return `NULL` when no more tokens are found. Each call modifies `strToken` by substituting a `NULL` character for the first delimiter that occurs after the returned token.  \n  \n### Error Conditions  \n  \n|`strToken`|`strDelimit`|`context`|Return value|`errno`|  \n|----------------|------------------|---------------|------------------|-------------|  \n|`NULL`|any|pointer to a null pointer|`NULL`|`EINVAL`|  \n|any|`NULL`|any|`NULL`|`EINVAL`|  \n|any|any|`NULL`|`NULL`|`EINVAL`|  \n  \n If `strToken` is `NULL` but context is a pointer to a valid context pointer, there is no error.  \n  \n## Remarks  \n The `strtok_s` function finds the next token in `strToken`. The set of characters in `strDelimit` specifies possible delimiters of the token to be found in `strToken` on the current call. `wcstok_s` and `_mbstok_s`are wide-character and multibyte-character versions of `strtok_s`. The arguments and return values of `wcstok_s` and `_wcstok_s_l` are wide-character strings; those of `_mbstok_s` and `_mbstok_s_l` are multibyte-character strings. These three functions behave identically otherwise.  \n  \n This function validates its parameters. If an error condition occurs, as in the Error Conditions table, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions set `errno` to `EINVAL` and return `NULL`.  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_tcstok_s`|`strtok_s`|`_mbstok_s`|`wcstok_s`|  \n|`_tcstok_s_l`|`_strtok_s_l`|`_mbstok_s_l`|`_wcstok_s_l`|  \n  \n On the first call to `strtok_s` the function skips leading delimiters and returns a pointer to the first token in `strToken`, terminating the token with a null character. More tokens can be broken out of the remainder of `strToken` by a series of calls to `strtok_s`. Each call to `strtok_s` modifies `strToken` by inserting a null character after the token returned by that call. The `context` pointer keeps track of which string is being read and where in the string the next token is to be read. To read the next token from `strToken`, call `strtok_s` with a `NULL` value for the `strToken` argument, and pass the same `context` parameter. The `NULL` `strToken` argument causes `strtok_s` to search for the next token in the modified `strToken`. The `strDelimit` argument can take any value from one call to the next so that the set of delimiters may vary.  \n  \n Since the `context` parameter supersedes the static buffers used in `strtok` and `_strtok_l`, it is possible to parse two strings simultaneously in the same thread.  \n  \n The output value is affected by the setting of the `LC_CTYPE` category setting of the locale; see [setlocale](../../c-runtime-library/reference/setlocale-wsetlocale.md) for more information. The versions of these functions without the `_l` suffix use the current locale for this locale-dependent behavior; the versions with the `_l` suffix are identical except that they use the locale parameter passed in instead. For more information, see [Locale](../../c-runtime-library/locale.md).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`strtok_s`|\\<string.h>|  \n|`_strtok_s_l`|\\<string.h>|  \n|`wcstok_s,`<br /><br /> `_wcstok_s_l`|\\<string.h> or \\<wchar.h>|  \n|`_mbstok_s,`<br /><br /> `_mbstok_s_l`|\\<mbstring.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n// crt_strtok_s.c  \n// In this program, a loop uses strtok_s  \n// to print all the tokens (separated by commas  \n// or blanks) in two strings at the same time.  \n//  \n  \n#include <string.h>  \n#include <stdio.h>  \n  \nchar string1[] =  \n    \"A string\\tof ,,tokens\\nand some  more tokens\";  \nchar string2[] =  \n    \"Another string\\n\\tparsed at the same time.\";  \nchar seps[]   = \" ,\\t\\n\";  \nchar *token1 = NULL;  \nchar *token2 = NULL;  \nchar *next_token1 = NULL;  \nchar *next_token2 = NULL;  \n  \nint main( void )  \n{  \n    printf( \"Tokens:\\n\" );  \n  \n    // Establish string and get the first token:  \n    token1 = strtok_s( string1, seps, &next_token1);  \n    token2 = strtok_s ( string2, seps, &next_token2);  \n  \n    // While there are tokens in \"string1\" or \"string2\"  \n    while ((token1 != NULL) || (token2 != NULL))  \n    {  \n        // Get next token:  \n        if (token1 != NULL)  \n        {  \n            printf( \" %s\\n\", token1 );  \n            token1 = strtok_s( NULL, seps, &next_token1);  \n        }  \n        if (token2 != NULL)  \n        {  \n            printf(\"        %s\\n\", token2 );  \n            token2 = strtok_s (NULL, seps, &next_token2);  \n        }  \n    }  \n}  \n```  \n  \n```Output  \nTokens:  \n A  \n        Another  \n string  \n        string  \n of  \n        parsed  \n tokens  \n        at  \n and  \n        the  \n some  \n        same  \n more  \n        time.  \n tokens  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [String Manipulation](../../c-runtime-library/string-manipulation-crt.md)   \n [Locale](../../c-runtime-library/locale.md)   \n [Interpretation of Multibyte-Character Sequences](../../c-runtime-library/interpretation-of-multibyte-character-sequences.md)   \n [strcspn, wcscspn, _mbscspn, _mbscspn_l](../../c-runtime-library/reference/strcspn-wcscspn-mbscspn-mbscspn-l.md)   \n [strspn, wcsspn, _mbsspn, _mbsspn_l](../../c-runtime-library/reference/strspn-wcsspn-mbsspn-mbsspn-l.md)"}