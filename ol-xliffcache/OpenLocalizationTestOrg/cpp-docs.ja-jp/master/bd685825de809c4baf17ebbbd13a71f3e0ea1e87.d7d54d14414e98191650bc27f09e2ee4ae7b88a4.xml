{"nodes":[{"pos":[12,41],"content":"ComPtr Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ComPtr Class | Microsoft Docs","pos":[0,29]}]},{"content":"ComPtr Class","pos":[640,652]},{"content":"Creates a <bpt id=\"p1\">*</bpt>smart pointer<ept id=\"p1\">*</ept> type that represents the interface specified by the template parameter.","pos":[653,750],"source":"Creates a *smart pointer* type that represents the interface specified by the template parameter."},{"content":"ComPtr automatically maintains a reference count for the underlying interface pointer and releases the interface when the reference count goes to zero.","pos":[751,902]},{"content":"Syntax","pos":[911,917]},{"content":"Parameters","pos":[1047,1057]},{"content":"The interface that the ComPtr represents.","pos":[1068,1109]},{"content":"A class to which the current ComPtr is a friend.","pos":[1123,1171]},{"content":"(The template that uses this parameter is protected.)","pos":[1172,1225]},{"content":"Remarks","pos":[1234,1241]},{"content":"ComPtr&lt;&gt; declares a type that represents the underlying interface pointer.","pos":[1245,1319],"source":"ComPtr<> declares a type that represents the underlying interface pointer."},{"content":"Use ComPtr&lt;&gt; to declare a variable and then use the arrow member-access operator (<ph id=\"ph1\">`-&gt;`</ph>) to access an interface member function.","pos":[1320,1447],"source":" Use ComPtr<> to declare a variable and then use the arrow member-access operator (`->`) to access an interface member function."},{"pos":[1454,1662],"content":"For more information about smart pointers, see the \"COM Smart Pointers\" subsection of the <bpt id=\"p1\">[</bpt>COM Coding Practices<ept id=\"p1\">](http://msdn.microsoft.com/en-us/76aca556-b4d6-4e67-a2a3-4439900f0c39)</ept>topic in the MSDN Library.","source":"For more information about smart pointers, see the \"COM Smart Pointers\" subsection of the [COM Coding Practices](http://msdn.microsoft.com/en-us/76aca556-b4d6-4e67-a2a3-4439900f0c39)topic in the MSDN Library."},{"content":"Members","pos":[1671,1678]},{"content":"Public Typedefs","pos":[1688,1703]},{"content":"Name","pos":[1710,1714]},{"content":"Description","pos":[1715,1726]},{"pos":[1780,1843],"content":"A synonym for the type specified by the <ph id=\"ph1\">`T`</ph> template parameter.","source":"A synonym for the type specified by the `T` template parameter."},{"content":"Public Constructors","pos":[1854,1873]},{"content":"Name","pos":[1880,1884]},{"content":"Description","pos":[1885,1896]},{"content":"ComPtr::ComPtr Constructor","pos":[1935,1961]},{"content":"Intializes a new instance of the ComPtr class.","pos":[2004,2050]},{"content":"Overloads provide default, copy, move, and conversion constructors.","pos":[2051,2118]},{"content":"ComPtr::~ComPtr Destructor","pos":[2124,2150]},{"content":"Deinitializes an instance of ComPtr.","pos":[2198,2234]},{"content":"Public Methods","pos":[2245,2259]},{"content":"Name","pos":[2266,2270]},{"content":"Description","pos":[2271,2282]},{"content":"ComPtr::As Method","pos":[2321,2338]},{"content":"Returns a ComPtr object that represents the interface identified by the specified template parameter.","pos":[2372,2473]},{"content":"ComPtr::AsIID Method","pos":[2479,2499]},{"content":"Returns a ComPtr object that represents the interface identified by the specified interface ID.","pos":[2536,2631]},{"content":"ComPtr::AsWeak Method","pos":[2637,2658]},{"content":"Retrieves a weak reference to the current object.","pos":[2696,2745]},{"content":"ComPtr::Attach Method","pos":[2751,2772]},{"content":"Associates this ComPtr with the interface type specified by the current template type parameter.","pos":[2810,2906]},{"content":"ComPtr::CopyTo Method","pos":[2912,2933]},{"content":"Copies the current or specified interface associated with this ComPtr to the specified output pointer.","pos":[2971,3073]},{"content":"ComPtr::Detach Method","pos":[3079,3100]},{"content":"Disassociates this ComPtr from the interface that it represents.","pos":[3138,3202]},{"content":"ComPtr::Get Method","pos":[3208,3226]},{"content":"Retrieves a pointer to the interface that is associated with this ComPtr.","pos":[3261,3334]},{"content":"ComPtr::GetAddressOf Method","pos":[3340,3367]},{"pos":[3411,3567],"content":"Retrieves the address of the <bpt id=\"p1\">[</bpt>ptr_<ept id=\"p1\">](../windows/comptr-ptr-data-member.md)</ept> data member, which contains a pointer to the interface represented by this ComPtr.","source":"Retrieves the address of the [ptr_](../windows/comptr-ptr-data-member.md) data member, which contains a pointer to the interface represented by this ComPtr."},{"content":"ComPtr::ReleaseAndGetAddressOf Method","pos":[3573,3610]},{"pos":[3664,3871],"content":"Releases the interface associated with this ComPtr and then retrieves the address of the <bpt id=\"p1\">[</bpt>ptr_<ept id=\"p1\">](../windows/comptr-ptr-data-member.md)</ept> data member, which contains a pointer to the interface that was released.","source":"Releases the interface associated with this ComPtr and then retrieves the address of the [ptr_](../windows/comptr-ptr-data-member.md) data member, which contains a pointer to the interface that was released."},{"content":"ComPtr::Reset","pos":[3877,3890]},{"content":"Releases all references for the pointer to the interface that is associated with this ComPtr.","pos":[3920,4013]},{"content":"ComPtr::Swap Method","pos":[4019,4038]},{"content":"Exchanges the interface managed by the current ComPtr with the interface managed by the specified ComPtr.","pos":[4074,4179]},{"content":"Protected Methods","pos":[4190,4207]},{"content":"Name","pos":[4214,4218]},{"content":"Description","pos":[4219,4230]},{"content":"ComPtr::InternalAddRef Method","pos":[4269,4298]},{"content":"Increments the reference count of the interface associated with this ComPtr.","pos":[4344,4420]},{"content":"ComPtr::InternalRelease Method","pos":[4426,4456]},{"content":"Performs a COM Release operation on the interface associated with this ComPtr.","pos":[4503,4581]},{"content":"Public Operators","pos":[4592,4608]},{"content":"Name","pos":[4615,4619]},{"content":"Description","pos":[4620,4631]},{"content":"ComPtr::operator Microsoft::WRL::Details::BoolType Operator","pos":[4670,4729]},{"content":"Indicates whether or not a ComPtr is managing the object lifetime of an interface.","pos":[4802,4884]},{"content":"ComPtr::operator&amp; Operator","pos":[4890,4916],"source":"ComPtr::operator& Operator"},{"content":"Retrieves the address of the current ComPtr.","pos":[4968,5012]},{"content":"ComPtr::operator= Operator","pos":[5018,5044]},{"content":"Assigns a value to the current ComPtr.","pos":[5093,5131]},{"content":"ComPtr::operator-&gt; Operator","pos":[5137,5164],"source":"ComPtr::operator-> Operator"},{"content":"Retrieves a pointer to the type specified by the current template parameter.","pos":[5212,5288]},{"content":"ComPtr::operator== Operator","pos":[5294,5321]},{"content":"Indicates whether two ComPtr objects are equal.","pos":[5372,5419]},{"content":"ComPtr::operator!= Operator","pos":[5425,5452]},{"content":"Indicates whether two ComPtr objects are not equal.","pos":[5505,5556]},{"content":"Protected Data Members","pos":[5567,5589]},{"content":"Name","pos":[5596,5600]},{"content":"Description","pos":[5601,5612]},{"content":"ComPtr::ptr_ Data Member","pos":[5651,5675]},{"content":"Contains a pointer to the interface that is associated with, and managed by this ComPtr.","pos":[5715,5803]},{"content":"Inheritance Hierarchy","pos":[5813,5834]},{"content":"Requirements","pos":[5855,5867]},{"pos":[5871,5891],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> client.h","source":"**Header:** client.h"},{"pos":[5898,5927],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> Microsoft::WRL","source":"**Namespace:** Microsoft::WRL"},{"content":"See Also","pos":[5936,5944]},{"content":"Microsoft::WRL Namespace","pos":[5949,5973]}],"content":"---\ntitle: \"ComPtr Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"client/Microsoft::WRL::ComPtr\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ComPtr class\"\nms.assetid: a6551902-6819-478a-8df7-b6f312ab1fb0\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# ComPtr Class\nCreates a *smart pointer* type that represents the interface specified by the template parameter. ComPtr automatically maintains a reference count for the underlying interface pointer and releases the interface when the reference count goes to zero.  \n  \n## Syntax  \n  \n```  \ntemplate <  \n   typename T  \n>  \nclass ComPtr;  \n  \ntemplate<  \n   class U  \n>  \nfriend class ComPtr;  \n```  \n  \n#### Parameters  \n `T`  \n The interface that the ComPtr represents.  \n  \n `U`  \n A class to which the current ComPtr is a friend. (The template that uses this parameter is protected.)  \n  \n## Remarks  \n ComPtr<> declares a type that represents the underlying interface pointer. Use ComPtr<> to declare a variable and then use the arrow member-access operator (`->`) to access an interface member function.  \n  \n For more information about smart pointers, see the \"COM Smart Pointers\" subsection of the [COM Coding Practices](http://msdn.microsoft.com/en-us/76aca556-b4d6-4e67-a2a3-4439900f0c39)topic in the MSDN Library.  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`InterfaceType`|A synonym for the type specified by the `T` template parameter.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[ComPtr::ComPtr Constructor](../windows/comptr-comptr-constructor.md)|Intializes a new instance of the ComPtr class. Overloads provide default, copy, move, and conversion constructors.|  \n|[ComPtr::~ComPtr Destructor](../windows/comptr-tilde-comptr-destructor.md)|Deinitializes an instance of ComPtr.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[ComPtr::As Method](../windows/comptr-as-method.md)|Returns a ComPtr object that represents the interface identified by the specified template parameter.|  \n|[ComPtr::AsIID Method](../windows/comptr-asiid-method.md)|Returns a ComPtr object that represents the interface identified by the specified interface ID.|  \n|[ComPtr::AsWeak Method](../windows/comptr-asweak-method.md)|Retrieves a weak reference to the current object.|  \n|[ComPtr::Attach Method](../windows/comptr-attach-method.md)|Associates this ComPtr with the interface type specified by the current template type parameter.|  \n|[ComPtr::CopyTo Method](../windows/comptr-copyto-method.md)|Copies the current or specified interface associated with this ComPtr to the specified output pointer.|  \n|[ComPtr::Detach Method](../windows/comptr-detach-method.md)|Disassociates this ComPtr from the interface that it represents.|  \n|[ComPtr::Get Method](../windows/comptr-get-method.md)|Retrieves a pointer to the interface that is associated with this ComPtr.|  \n|[ComPtr::GetAddressOf Method](../windows/comptr-getaddressof-method.md)|Retrieves the address of the [ptr_](../windows/comptr-ptr-data-member.md) data member, which contains a pointer to the interface represented by this ComPtr.|  \n|[ComPtr::ReleaseAndGetAddressOf Method](../windows/comptr-releaseandgetaddressof-method.md)|Releases the interface associated with this ComPtr and then retrieves the address of the [ptr_](../windows/comptr-ptr-data-member.md) data member, which contains a pointer to the interface that was released.|  \n|[ComPtr::Reset](../windows/comptr-reset.md)|Releases all references for the pointer to the interface that is associated with this ComPtr.|  \n|[ComPtr::Swap Method](../windows/comptr-swap-method.md)|Exchanges the interface managed by the current ComPtr with the interface managed by the specified ComPtr.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[ComPtr::InternalAddRef Method](../windows/comptr-internaladdref-method.md)|Increments the reference count of the interface associated with this ComPtr.|  \n|[ComPtr::InternalRelease Method](../windows/comptr-internalrelease-method.md)|Performs a COM Release operation on the interface associated with this ComPtr.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[ComPtr::operator Microsoft::WRL::Details::BoolType Operator](../windows/comptr-operator-microsoft-wrl-details-booltype-operator.md)|Indicates whether or not a ComPtr is managing the object lifetime of an interface.|  \n|[ComPtr::operator& Operator](../windows/comptr-operator-ampersand-operator.md)|Retrieves the address of the current ComPtr.|  \n|[ComPtr::operator= Operator](../windows/comptr-operator-assign-operator.md)|Assigns a value to the current ComPtr.|  \n|[ComPtr::operator-> Operator](../windows/comptr-operator-arrow-operator.md)|Retrieves a pointer to the type specified by the current template parameter.|  \n|[ComPtr::operator== Operator](../windows/comptr-operator-equality-operator.md)|Indicates whether two ComPtr objects are equal.|  \n|[ComPtr::operator!= Operator](../windows/comptr-operator-inequality-operator.md)|Indicates whether two ComPtr objects are not equal.|  \n  \n### Protected Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[ComPtr::ptr_ Data Member](../windows/comptr-ptr-data-member.md)|Contains a pointer to the interface that is associated with, and managed by this ComPtr.|  \n  \n## Inheritance Hierarchy  \n `ComPtr`  \n  \n## Requirements  \n **Header:** client.h  \n  \n **Namespace:** Microsoft::WRL  \n  \n## See Also  \n [Microsoft::WRL Namespace](../windows/microsoft-wrl-namespace.md)"}