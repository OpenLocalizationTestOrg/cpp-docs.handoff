{"nodes":[{"pos":[12,40],"content":"_malloc_dbg | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_malloc_dbg | Microsoft Docs","pos":[0,28]}]},{"content":"_malloc_dbg","pos":[950,961]},{"content":"Allocates a block of memory in the heap with additional space for a debugging header and overwrite buffers (debug version only).","pos":[962,1090]},{"content":"Syntax","pos":[1099,1105]},{"content":"Parameters","pos":[1243,1253]},{"content":"Requested size of the memory block (in bytes).","pos":[1267,1313]},{"content":"Requested type of the memory block: <ph id=\"ph1\">`_CLIENT_BLOCK`</ph> or <ph id=\"ph2\">`_NORMAL_BLOCK`</ph>.","pos":[1335,1406],"source":" Requested type of the memory block: `_CLIENT_BLOCK` or `_NORMAL_BLOCK`."},{"content":"Pointer to the name of the source file that requested the allocation operation or NULL.","pos":[1427,1514]},{"content":"Line number in the source file where the allocation operation was requested or NULL.","pos":[1537,1621]},{"pos":[1628,1847],"content":"The <ph id=\"ph1\">`filename`</ph> and <ph id=\"ph2\">`linenumber`</ph> parameters are only available when <ph id=\"ph3\">`_malloc_dbg`</ph> has been called explicitly or the <bpt id=\"p1\">[</bpt>_CRTDBG_MAP_ALLOC<ept id=\"p1\">](../../c-runtime-library/crtdbg-map-alloc.md)</ept> preprocessor constant has been defined.","source":"The `filename` and `linenumber` parameters are only available when `_malloc_dbg` has been called explicitly or the [_CRTDBG_MAP_ALLOC](../../c-runtime-library/crtdbg-map-alloc.md) preprocessor constant has been defined."},{"content":"Return Value","pos":[1856,1868]},{"content":"On successful completion, this function returns a pointer to the user portion of the allocated memory block, calls the new handler function, or returns NULL.","pos":[1872,2029]},{"content":"For a complete description of the return behavior, see the following Remarks section.","pos":[2030,2115]},{"content":"For more information about how the new handler function is used, see the <bpt id=\"p1\">[</bpt>malloc<ept id=\"p1\">](../../c-runtime-library/reference/malloc.md)</ept> function.","pos":[2116,2252],"source":" For more information about how the new handler function is used, see the [malloc](../../c-runtime-library/reference/malloc.md) function."},{"content":"Remarks","pos":[2261,2268]},{"content":"is a debug version of the <bpt id=\"p1\">[</bpt>malloc<ept id=\"p1\">](../../c-runtime-library/reference/malloc.md)</ept> function.","pos":[2286,2375],"source":" is a debug version of the [malloc](../../c-runtime-library/reference/malloc.md) function."},{"content":"When <bpt id=\"p1\">[</bpt>_DEBUG<ept id=\"p1\">](../../c-runtime-library/debug.md)</ept> is not defined, each call to <ph id=\"ph1\">`_malloc_dbg`</ph> is reduced to a call to <ph id=\"ph2\">`malloc`</ph>.","pos":[2376,2500],"source":" When [_DEBUG](../../c-runtime-library/debug.md) is not defined, each call to `_malloc_dbg` is reduced to a call to `malloc`."},{"content":"Both <ph id=\"ph1\">`malloc`</ph> and <ph id=\"ph2\">`_malloc_dbg`</ph> allocate a block of memory in the base heap, but <ph id=\"ph3\">`_malloc_dbg`</ph> offers several debugging features: buffers on either side of the user portion of the block to test for leaks, a block type parameter to track specific allocation types, and <ph id=\"ph4\">`filename`/`linenumber`</ph> information to determine the origin of allocation requests.","pos":[2501,2852],"source":" Both `malloc` and `_malloc_dbg` allocate a block of memory in the base heap, but `_malloc_dbg` offers several debugging features: buffers on either side of the user portion of the block to test for leaks, a block type parameter to track specific allocation types, and `filename`/`linenumber` information to determine the origin of allocation requests."},{"content":"allocates the memory block with slightly more space than the requested <ph id=\"ph1\">`size`</ph>.","pos":[2873,2951],"source":" allocates the memory block with slightly more space than the requested `size`."},{"content":"The additional space is used by the debug heap manager to link the debug memory blocks and to provide the application with debug header information and overwrite buffers.","pos":[2952,3122]},{"content":"When the block is allocated, the user portion of the block is filled with the value 0xCD and each of the overwrite buffers are filled with 0xFD.","pos":[3123,3267]},{"content":"sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`ENOMEM`</ph> if a memory allocation fails or if the amount of memory needed (including the overhead mentioned previously) exceeds <ph id=\"ph3\">`_HEAP_MAXREQ`</ph>.","pos":[3288,3445],"source":" sets `errno` to `ENOMEM` if a memory allocation fails or if the amount of memory needed (including the overhead mentioned previously) exceeds `_HEAP_MAXREQ`."},{"content":"For information about this and other error codes, see <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","pos":[3446,3616],"source":" For information about this and other error codes, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"For information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see <bpt id=\"p1\">[</bpt>CRT Debug Heap Details<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[3623,3818],"source":"For information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see [CRT Debug Heap Details](/visualstudio/debugger/crt-debug-heap-details)."},{"content":"For information about the allocation block types and how they are used, see <bpt id=\"p1\">[</bpt>Types of blocks on the debug heap<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[3819,3978],"source":" For information about the allocation block types and how they are used, see [Types of blocks on the debug heap](/visualstudio/debugger/crt-debug-heap-details)."},{"content":"For information about the differences between calling a standard heap function and its debug version in a debug build of an application, see <bpt id=\"p1\">[</bpt>Debug Versions of Heap Allocation Functions<ept id=\"p1\">](/visualstudio/debugger/debug-versions-of-heap-allocation-functions)</ept>.","pos":[3979,4234],"source":" For information about the differences between calling a standard heap function and its debug version in a debug build of an application, see [Debug Versions of Heap Allocation Functions](/visualstudio/debugger/debug-versions-of-heap-allocation-functions)."},{"content":"Requirements","pos":[4243,4255]},{"content":"Routine","pos":[4262,4269]},{"content":"Required header","pos":[4270,4285]},{"content":"crtdbg.h&gt;","pos":[4346,4355],"source":"crtdbg.h>"},{"pos":[4363,4481],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Libraries","pos":[4490,4499]},{"pos":[4503,4598],"content":"Debug versions of <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept> only.","source":"Debug versions of [C run-time libraries](../../c-runtime-library/crt-library-features.md) only."},{"content":"Example","pos":[4607,4614]},{"pos":[4618,4745],"content":"For a sample of how to use <ph id=\"ph1\">`_malloc_dbg`</ph>, see <bpt id=\"p1\">[</bpt>crt_dbg1<ept id=\"p1\">](http://msdn.microsoft.com/en-us/17b4b20c-e849-48f5-8eb5-dca6509cbaf9)</ept>.","source":"For a sample of how to use `_malloc_dbg`, see [crt_dbg1](http://msdn.microsoft.com/en-us/17b4b20c-e849-48f5-8eb5-dca6509cbaf9)."},{"content":".NET Framework Equivalent","pos":[4754,4779]},{"content":"Not applicable.","pos":[4783,4798]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[4799,4846],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[4847,4972],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[4981,4989]},{"content":"Debug Routines","pos":[4994,5008]},{"content":"malloc","pos":[5058,5064]},{"content":"_calloc_dbg","pos":[5116,5127]},{"content":"_calloc_dbg","pos":[5183,5194]}],"content":"---\ntitle: \"_malloc_dbg | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_malloc_dbg\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"malloc_dbg\"\n  - \"_malloc_dbg\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"malloc_dbg function\"\n  - \"memory allocation\"\n  - \"_malloc_dbg function\"\nms.assetid: c97eca51-140b-4461-8bd2-28965b49ecdb\ncaps.latest.revision: 16\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _malloc_dbg\nAllocates a block of memory in the heap with additional space for a debugging header and overwrite buffers (debug version only).  \n  \n## Syntax  \n  \n```  \nvoid *_malloc_dbg(  \n   size_t size,  \n   int blockType,  \n   const char *filename,  \n   int linenumber   \n);  \n```  \n  \n#### Parameters  \n `size`  \n Requested size of the memory block (in bytes).  \n  \n `blockType`  \n Requested type of the memory block: `_CLIENT_BLOCK` or `_NORMAL_BLOCK`.  \n  \n `filename`  \n Pointer to the name of the source file that requested the allocation operation or NULL.  \n  \n `linenumber`  \n Line number in the source file where the allocation operation was requested or NULL.  \n  \n The `filename` and `linenumber` parameters are only available when `_malloc_dbg` has been called explicitly or the [_CRTDBG_MAP_ALLOC](../../c-runtime-library/crtdbg-map-alloc.md) preprocessor constant has been defined.  \n  \n## Return Value  \n On successful completion, this function returns a pointer to the user portion of the allocated memory block, calls the new handler function, or returns NULL. For a complete description of the return behavior, see the following Remarks section. For more information about how the new handler function is used, see the [malloc](../../c-runtime-library/reference/malloc.md) function.  \n  \n## Remarks  \n `_malloc_dbg` is a debug version of the [malloc](../../c-runtime-library/reference/malloc.md) function. When [_DEBUG](../../c-runtime-library/debug.md) is not defined, each call to `_malloc_dbg` is reduced to a call to `malloc`. Both `malloc` and `_malloc_dbg` allocate a block of memory in the base heap, but `_malloc_dbg` offers several debugging features: buffers on either side of the user portion of the block to test for leaks, a block type parameter to track specific allocation types, and `filename`/`linenumber` information to determine the origin of allocation requests.  \n  \n `_malloc_dbg` allocates the memory block with slightly more space than the requested `size`. The additional space is used by the debug heap manager to link the debug memory blocks and to provide the application with debug header information and overwrite buffers. When the block is allocated, the user portion of the block is filled with the value 0xCD and each of the overwrite buffers are filled with 0xFD.  \n  \n `_malloc_dbg` sets `errno` to `ENOMEM` if a memory allocation fails or if the amount of memory needed (including the overhead mentioned previously) exceeds `_HEAP_MAXREQ`. For information about this and other error codes, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n For information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see [CRT Debug Heap Details](/visualstudio/debugger/crt-debug-heap-details). For information about the allocation block types and how they are used, see [Types of blocks on the debug heap](/visualstudio/debugger/crt-debug-heap-details). For information about the differences between calling a standard heap function and its debug version in a debug build of an application, see [Debug Versions of Heap Allocation Functions](/visualstudio/debugger/debug-versions-of-heap-allocation-functions).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_malloc_dbg`|\\<crtdbg.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Libraries  \n Debug versions of [C run-time libraries](../../c-runtime-library/crt-library-features.md) only.  \n  \n## Example  \n For a sample of how to use `_malloc_dbg`, see [crt_dbg1](http://msdn.microsoft.com/en-us/17b4b20c-e849-48f5-8eb5-dca6509cbaf9).  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Debug Routines](../../c-runtime-library/debug-routines.md)   \n [malloc](../../c-runtime-library/reference/malloc.md)   \n [_calloc_dbg](../../c-runtime-library/reference/calloc-dbg.md)   \n [_calloc_dbg](../../c-runtime-library/reference/calloc-dbg.md)"}