{"nodes":[{"pos":[12,39],"content":"Event Maps | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Event Maps | Microsoft Docs","pos":[0,27]}]},{"pos":[598,608],"content":"Event Maps","linkify":"Event Maps","nodes":[{"content":"Event Maps","pos":[0,10]}]},{"content":"Whenever a control wishes to notify its container that some action (determined by the control developer) has happened (such as a keystroke, mouse click, or a change to the control's state) it calls an event-firing function.","pos":[609,832]},{"content":"This function notifies the control container that some important action has occurred by firing the related event.","pos":[833,946]},{"content":"The Microsoft Foundation Class Library offers a programming model optimized for firing events.","pos":[953,1047]},{"content":"In this model, \"event maps\" are used to designate which functions fire which events for a particular control.","pos":[1048,1157]},{"content":"Event maps contain one macro for each event.","pos":[1158,1202]},{"content":"For example, an event map that fires a stock Click event might look like this:","pos":[1203,1281]},{"pos":[1288,1370],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCAxCtl#16<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/event-maps_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCAxCtl#16](../../mfc/reference/codesnippet/cpp/event-maps_1.cpp)]"},{"content":"The <bpt id=\"p1\">**</bpt>EVENT_STOCK_CLICK<ept id=\"p1\">**</ept> macro indicates that the control will fire a stock Click event every time it detects a mouse click.","pos":[1377,1502],"source":"The **EVENT_STOCK_CLICK** macro indicates that the control will fire a stock Click event every time it detects a mouse click."},{"content":"For a more detailed listing of other stock events, see the article <bpt id=\"p1\">[</bpt>ActiveX Controls: Events<ept id=\"p1\">](../../mfc/mfc-activex-controls-events.md)</ept>.","pos":[1503,1639],"source":" For a more detailed listing of other stock events, see the article [ActiveX Controls: Events](../../mfc/mfc-activex-controls-events.md)."},{"content":"Macros are also available to indicate custom events.","pos":[1640,1692]},{"content":"Although event-map macros are important, you generally do not insert them directly.","pos":[1699,1782]},{"content":"This is because the Properties window automatically creates event-map entries in your source files when you use it to associate event-firing functions with events.","pos":[1783,1946]},{"content":"Any time you want to edit or add an event-map entry, you can use the Properties window.","pos":[1947,2034]},{"content":"To support event maps, MFC provides the following macros:","pos":[2041,2098]},{"pos":[2108,2145],"content":"Event Map Declaration and Demarcation","linkify":"Event Map Declaration and Demarcation","nodes":[{"content":"Event Map Declaration and Demarcation","pos":[0,37]}]},{"pos":[2166,2205],"content":"<bpt id=\"p1\">[</bpt>DECLARE_EVENT_MAP<ept id=\"p1\">](#declare_event_map)</ept>","source":"[DECLARE_EVENT_MAP](#declare_event_map)"},{"content":"Declares that an event map will be used in a class to map events to event-firing functions (must be used in the class declaration).","pos":[2206,2337]},{"pos":[2342,2377],"content":"<bpt id=\"p1\">[</bpt>BEGIN_EVENT_MAP<ept id=\"p1\">](#begin_event_map)</ept>","source":"[BEGIN_EVENT_MAP](#begin_event_map)"},{"content":"Begins the definition of an event map (must be used in the class implementation).","pos":[2378,2459]},{"pos":[2464,2495],"content":"<bpt id=\"p1\">[</bpt>END_EVENT_MAP<ept id=\"p1\">](#end_event_map)</ept>","source":"[END_EVENT_MAP](#end_event_map)"},{"content":"Ends the definition of an event map (must be used in the class implementation).","pos":[2496,2575]},{"pos":[2586,2606],"content":"Event Mapping Macros","linkify":"Event Mapping Macros","nodes":[{"content":"Event Mapping Macros","pos":[0,20]}]},{"pos":[2627,2656],"content":"<bpt id=\"p1\">[</bpt>EVENT_CUSTOM<ept id=\"p1\">](#event_custom)</ept>","source":"[EVENT_CUSTOM](#event_custom)"},{"content":"Indicates which event-firing function will fire the specified event.","pos":[2657,2725]},{"pos":[2730,2765],"content":"<bpt id=\"p1\">[</bpt>EVENT_CUSTOM_ID<ept id=\"p1\">](#event_custom_id)</ept>","source":"[EVENT_CUSTOM_ID](#event_custom_id)"},{"content":"Indicates which event-firing function will fire the specified event, with a designated dispatch ID.","pos":[2766,2865]},{"pos":[2876,2898],"content":"Message Mapping Macros","linkify":"Message Mapping Macros","nodes":[{"content":"Message Mapping Macros","pos":[0,22]}]},{"pos":[2919,2944],"content":"<bpt id=\"p1\">[</bpt>ON_OLEVERB<ept id=\"p1\">](#on_oleverb)</ept>","source":"[ON_OLEVERB](#on_oleverb)"},{"content":"Indicates a custom verb handled by the OLE control.","pos":[2945,2996]},{"pos":[3001,3032],"content":"<bpt id=\"p1\">[</bpt>ON_STDOLEVERB<ept id=\"p1\">](#on_stdoleverb)</ept>","source":"[ON_STDOLEVERB](#on_stdoleverb)"},{"content":"Overrides a standard verb mapping of the OLE control.","pos":[3033,3086]},{"pos":[3097,3148],"content":"<bpt id=\"p1\">&lt;a name=\"declare_event_map\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  DECLARE_EVENT_MAP","linkify":"<a name=\"declare_event_map\"></a>  DECLARE_EVENT_MAP","source":"<a name=\"declare_event_map\"></a>  DECLARE_EVENT_MAP"},{"pos":[3152,3271],"content":"Each <ph id=\"ph1\">`COleControl`</ph>-derived class in your program can provide an event map to specify the events your control will fire.","source":"Each `COleControl`-derived class in your program can provide an event map to specify the events your control will fire."},{"pos":[3320,3327],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the <ph id=\"ph1\">`DECLARE_EVENT_MAP`</ph> macro at the end of your class declaration.","pos":[3331,3402],"source":"Use the `DECLARE_EVENT_MAP` macro at the end of your class declaration."},{"content":"Then, in the .cpp file that defines the member functions for the class, use the <ph id=\"ph1\">`BEGIN_EVENT_MAP`</ph> macro, macro entries for each of the control's events, and the <ph id=\"ph2\">`END_EVENT_MAP`</ph> macro to declare the end of the event list.","pos":[3403,3623],"source":" Then, in the .cpp file that defines the member functions for the class, use the `BEGIN_EVENT_MAP` macro, macro entries for each of the control's events, and the `END_EVENT_MAP` macro to declare the end of the event list."},{"pos":[3630,3751],"content":"For more information on event maps, see the article <bpt id=\"p1\">[</bpt>ActiveX Controls: Events<ept id=\"p1\">](../../mfc/mfc-activex-controls-events.md)</ept>.","source":"For more information on event maps, see the article [ActiveX Controls: Events](../../mfc/mfc-activex-controls-events.md)."},{"pos":[3761,3808],"content":"<bpt id=\"p1\">&lt;a name=\"begin_event_map\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  BEGIN_EVENT_MAP","linkify":"<a name=\"begin_event_map\"></a>  BEGIN_EVENT_MAP","source":"<a name=\"begin_event_map\"></a>  BEGIN_EVENT_MAP"},{"content":"Begins the definition of your event map.","pos":[3812,3852]},{"pos":[3918,3928],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the name of the control class whose event map this is.","pos":[3946,4010]},{"content":"Specifies the name of the base class of <ph id=\"ph1\">`theClass`</ph>.","pos":[4032,4083],"source":" Specifies the name of the base class of `theClass`."},{"pos":[4093,4100],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4104,4348],"content":"In the implementation (.cpp) file that defines the member functions for your class, start the event map with the <ph id=\"ph1\">`BEGIN_EVENT_MAP`</ph> macro, then add macro entries for each of your events, and complete the event map with the <ph id=\"ph2\">`END_EVENT_MAP`</ph> macro.","source":"In the implementation (.cpp) file that defines the member functions for your class, start the event map with the `BEGIN_EVENT_MAP` macro, then add macro entries for each of your events, and complete the event map with the `END_EVENT_MAP` macro."},{"pos":[4355,4508],"content":"For more information on event maps and the <ph id=\"ph1\">`BEGIN_EVENT_MAP`</ph> macro, see the article <bpt id=\"p1\">[</bpt>ActiveX Controls: Events<ept id=\"p1\">](../../mfc/mfc-activex-controls-events.md)</ept>.","source":"For more information on event maps and the `BEGIN_EVENT_MAP` macro, see the article [ActiveX Controls: Events](../../mfc/mfc-activex-controls-events.md)."},{"pos":[4518,4561],"content":"<bpt id=\"p1\">&lt;a name=\"end_event_map\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  END_EVENT_MAP","linkify":"<a name=\"end_event_map\"></a>  END_EVENT_MAP","source":"<a name=\"end_event_map\"></a>  END_EVENT_MAP"},{"pos":[4565,4635],"content":"Use the <ph id=\"ph1\">`END_EVENT_MAP`</ph> macro to end the definition of your event map.","source":"Use the `END_EVENT_MAP` macro to end the definition of your event map."},{"pos":[4680,4721],"content":"<bpt id=\"p1\">&lt;a name=\"event_custom\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  EVENT_CUSTOM","linkify":"<a name=\"event_custom\"></a>  EVENT_CUSTOM","source":"<a name=\"event_custom\"></a>  EVENT_CUSTOM"},{"content":"Defines an event-map entry for a custom event.","pos":[4725,4771]},{"pos":[4841,4851],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The name of the event.","pos":[4868,4890]},{"content":"The name of the event firing function.","pos":[4910,4948]},{"content":"A space-separated list of one or more constants specifying the function's parameter list.","pos":[4970,5059]},{"pos":[5069,5076],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`vtsParams`</ph> parameter is a space-separated list of values from the <bpt id=\"p1\">**</bpt>VTS_<ept id=\"p1\">**</ept> constants.","pos":[5080,5170],"source":"The `vtsParams` parameter is a space-separated list of values from the **VTS_** constants."},{"content":"One or more of these values separated by spaces (not commas) specifies the function's parameter list.","pos":[5171,5272]},{"content":"For example:","pos":[5273,5285]},{"pos":[5292,5373],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCActiveXControl#13<ept id=\"p2\">](../../mfc/codesnippet/cpp/event-maps_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCActiveXControl#13](../../mfc/codesnippet/cpp/event-maps_2.cpp)]"},{"pos":[5380,5533],"content":"specifies a list containing a 32-bit integer representing an RGB color value, followed by a pointer to the <bpt id=\"p1\">**</bpt>IFontDisp<ept id=\"p1\">**</ept> interface of an OLE font object.","source":"specifies a list containing a 32-bit integer representing an RGB color value, followed by a pointer to the **IFontDisp** interface of an OLE font object."},{"pos":[5540,5597],"content":"The <bpt id=\"p1\">**</bpt>VTS_<ept id=\"p1\">**</ept> constants and their meanings are as follows:","source":"The **VTS_** constants and their meanings are as follows:"},{"content":"Symbol","pos":[5604,5610]},{"content":"Parameter type","pos":[5611,5625]},{"pos":[5668,5678],"content":"<bpt id=\"p1\">**</bpt>VTS_I2<ept id=\"p1\">**</ept>","source":"**VTS_I2**"},{"pos":[5679,5688],"content":"<bpt id=\"p1\">**</bpt>short<ept id=\"p1\">**</ept>","source":"**short**"},{"pos":[5693,5703],"content":"<bpt id=\"p1\">**</bpt>VTS_I4<ept id=\"p1\">**</ept>","source":"**VTS_I4**"},{"pos":[5704,5712],"content":"<bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept>","source":"**long**"},{"pos":[5717,5727],"content":"<bpt id=\"p1\">**</bpt>VTS_R4<ept id=\"p1\">**</ept>","source":"**VTS_R4**"},{"pos":[5728,5737],"content":"<bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept>","source":"**float**"},{"pos":[5742,5752],"content":"<bpt id=\"p1\">**</bpt>VTS_R8<ept id=\"p1\">**</ept>","source":"**VTS_R8**"},{"pos":[5753,5763],"content":"<bpt id=\"p1\">**</bpt>double<ept id=\"p1\">**</ept>","source":"**double**"},{"pos":[5768,5781],"content":"<bpt id=\"p1\">**</bpt>VTS_COLOR<ept id=\"p1\">**</ept>","source":"**VTS_COLOR**"},{"pos":[5782,5795],"content":"<bpt id=\"p1\">**</bpt>OLE_COLOR<ept id=\"p1\">**</ept>","source":"**OLE_COLOR**"},{"pos":[5800,5810],"content":"<bpt id=\"p1\">**</bpt>VTS_CY<ept id=\"p1\">**</ept>","source":"**VTS_CY**"},{"pos":[5811,5823],"content":"<bpt id=\"p1\">**</bpt>CURRENCY<ept id=\"p1\">**</ept>","source":"**CURRENCY**"},{"pos":[5828,5840],"content":"<bpt id=\"p1\">**</bpt>VTS_DATE<ept id=\"p1\">**</ept>","source":"**VTS_DATE**"},{"pos":[5841,5849],"content":"<bpt id=\"p1\">**</bpt>DATE<ept id=\"p1\">**</ept>","source":"**DATE**"},{"pos":[5854,5866],"content":"<bpt id=\"p1\">**</bpt>VTS_BSTR<ept id=\"p1\">**</ept>","source":"**VTS_BSTR**"},{"pos":[5867,5883],"content":"<bpt id=\"p1\">**</bpt>const char<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>","source":"**const char\\***"},{"pos":[5888,5904],"content":"<bpt id=\"p1\">**</bpt>VTS_DISPATCH<ept id=\"p1\">**</ept>","source":"**VTS_DISPATCH**"},{"pos":[5922,5934],"content":"<bpt id=\"p1\">**</bpt>VTS_FONT<ept id=\"p1\">**</ept>","source":"**VTS_FONT**"},{"pos":[5935,5954],"content":"<bpt id=\"p1\">**</bpt>IFontDispatch<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>","source":"**IFontDispatch\\***"},{"pos":[5959,5973],"content":"<bpt id=\"p1\">**</bpt>VTS_HANDLE<ept id=\"p1\">**</ept>","source":"**VTS_HANDLE**"},{"pos":[5987,6000],"content":"<bpt id=\"p1\">**</bpt>VTS_SCODE<ept id=\"p1\">**</ept>","source":"**VTS_SCODE**"},{"pos":[6013,6025],"content":"<bpt id=\"p1\">**</bpt>VTS_BOOL<ept id=\"p1\">**</ept>","source":"**VTS_BOOL**"},{"pos":[6026,6034],"content":"<bpt id=\"p1\">**</bpt>BOOL<ept id=\"p1\">**</ept>","source":"**BOOL**"},{"pos":[6039,6054],"content":"<bpt id=\"p1\">**</bpt>VTS_VARIANT<ept id=\"p1\">**</ept>","source":"**VTS_VARIANT**"},{"pos":[6055,6074],"content":"<bpt id=\"p1\">**</bpt>const VARIANT<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>","source":"**const VARIANT\\***"},{"pos":[6079,6095],"content":"<bpt id=\"p1\">**</bpt>VTS_PVARIANT<ept id=\"p1\">**</ept>","source":"**VTS_PVARIANT**"},{"pos":[6096,6109],"content":"<bpt id=\"p1\">**</bpt>VARIANT<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>","source":"**VARIANT\\***"},{"pos":[6114,6129],"content":"<bpt id=\"p1\">**</bpt>VTS_UNKNOWN<ept id=\"p1\">**</ept>","source":"**VTS_UNKNOWN**"},{"pos":[6146,6166],"content":"<bpt id=\"p1\">**</bpt>VTS_OPTEXCLUSIVE<ept id=\"p1\">**</ept>","source":"**VTS_OPTEXCLUSIVE**"},{"pos":[6167,6187],"content":"<bpt id=\"p1\">**</bpt>OLE_OPTEXCLUSIVE<ept id=\"p1\">**</ept>","source":"**OLE_OPTEXCLUSIVE**"},{"pos":[6192,6207],"content":"<bpt id=\"p1\">**</bpt>VTS_PICTURE<ept id=\"p1\">**</ept>","source":"**VTS_PICTURE**"},{"pos":[6208,6226],"content":"<bpt id=\"p1\">**</bpt>IPictureDisp<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>","source":"**IPictureDisp\\***"},{"pos":[6231,6247],"content":"<bpt id=\"p1\">**</bpt>VTS_TRISTATE<ept id=\"p1\">**</ept>","source":"**VTS_TRISTATE**"},{"pos":[6248,6264],"content":"<bpt id=\"p1\">**</bpt>OLE_TRISTATE<ept id=\"p1\">**</ept>","source":"**OLE_TRISTATE**"},{"pos":[6269,6288],"content":"<bpt id=\"p1\">**</bpt>VTS_XPOS_PIXELS<ept id=\"p1\">**</ept>","source":"**VTS_XPOS_PIXELS**"},{"pos":[6289,6308],"content":"<bpt id=\"p1\">**</bpt>OLE_XPOS_PIXELS<ept id=\"p1\">**</ept>","source":"**OLE_XPOS_PIXELS**"},{"pos":[6313,6332],"content":"<bpt id=\"p1\">**</bpt>VTS_YPOS_PIXELS<ept id=\"p1\">**</ept>","source":"**VTS_YPOS_PIXELS**"},{"pos":[6333,6352],"content":"<bpt id=\"p1\">**</bpt>OLE_YPOS_PIXELS<ept id=\"p1\">**</ept>","source":"**OLE_YPOS_PIXELS**"},{"pos":[6357,6377],"content":"<bpt id=\"p1\">**</bpt>VTS_XSIZE_PIXELS<ept id=\"p1\">**</ept>","source":"**VTS_XSIZE_PIXELS**"},{"pos":[6378,6398],"content":"<bpt id=\"p1\">**</bpt>OLE_XSIZE_PIXELS<ept id=\"p1\">**</ept>","source":"**OLE_XSIZE_PIXELS**"},{"pos":[6403,6423],"content":"<bpt id=\"p1\">**</bpt>VTS_YSIZE_PIXELS<ept id=\"p1\">**</ept>","source":"**VTS_YSIZE_PIXELS**"},{"pos":[6424,6444],"content":"<bpt id=\"p1\">**</bpt>OLE_YSIZE_PIXELS<ept id=\"p1\">**</ept>","source":"**OLE_YSIZE_PIXELS**"},{"pos":[6449,6470],"content":"<bpt id=\"p1\">**</bpt>VTS_XPOS_HIMETRIC<ept id=\"p1\">**</ept>","source":"**VTS_XPOS_HIMETRIC**"},{"pos":[6471,6492],"content":"<bpt id=\"p1\">**</bpt>OLE_XPOS_HIMETRIC<ept id=\"p1\">**</ept>","source":"**OLE_XPOS_HIMETRIC**"},{"pos":[6497,6518],"content":"<bpt id=\"p1\">**</bpt>VTS_YPOS_HIMETRIC<ept id=\"p1\">**</ept>","source":"**VTS_YPOS_HIMETRIC**"},{"pos":[6519,6540],"content":"<bpt id=\"p1\">**</bpt>OLE_YPOS_HIMETRIC<ept id=\"p1\">**</ept>","source":"**OLE_YPOS_HIMETRIC**"},{"pos":[6545,6567],"content":"<bpt id=\"p1\">**</bpt>VTS_XSIZE_HIMETRIC<ept id=\"p1\">**</ept>","source":"**VTS_XSIZE_HIMETRIC**"},{"pos":[6568,6590],"content":"<bpt id=\"p1\">**</bpt>OLE_XSIZE_HIMETRIC<ept id=\"p1\">**</ept>","source":"**OLE_XSIZE_HIMETRIC**"},{"pos":[6595,6617],"content":"<bpt id=\"p1\">**</bpt>VTS_YSIZE_HIMETRIC<ept id=\"p1\">**</ept>","source":"**VTS_YSIZE_HIMETRIC**"},{"pos":[6618,6640],"content":"<bpt id=\"p1\">**</bpt>OLE_YSIZE_HIMETRIC<ept id=\"p1\">**</ept>","source":"**OLE_YSIZE_HIMETRIC**"},{"pos":[6649,6980],"content":"[!NOTE]\n Additional variant constants have been defined for all variant types, with the exception of **VTS_FONT** and **VTS_PICTURE**, that provide a pointer to the variant data constant. These constants are named using the **VTS_P**`constantname` convention. For example, **VTS_PCOLOR** is a pointer to a **VTS_COLOR** constant.","leadings":["","> "],"nodes":[{"content":" Additional variant constants have been defined for all variant types, with the exception of **VTS_FONT** and **VTS_PICTURE**, that provide a pointer to the variant data constant. These constants are named using the **VTS_P**`constantname` convention. For example, **VTS_PCOLOR** is a pointer to a **VTS_COLOR** constant.","pos":[8,329],"nodes":[{"content":"Additional variant constants have been defined for all variant types, with the exception of <bpt id=\"p1\">**</bpt>VTS_FONT<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>VTS_PICTURE<ept id=\"p2\">**</ept>, that provide a pointer to the variant data constant.","pos":[1,179],"source":" Additional variant constants have been defined for all variant types, with the exception of **VTS_FONT** and **VTS_PICTURE**, that provide a pointer to the variant data constant."},{"content":"These constants are named using the <bpt id=\"p1\">**</bpt>VTS_P<ept id=\"p1\">**</ept><ph id=\"ph1\">`constantname`</ph> convention.","pos":[180,251],"source":" These constants are named using the **VTS_P**`constantname` convention."},{"content":"For example, <bpt id=\"p1\">**</bpt>VTS_PCOLOR<ept id=\"p1\">**</ept> is a pointer to a <bpt id=\"p2\">**</bpt>VTS_COLOR<ept id=\"p2\">**</ept> constant.","pos":[252,321],"source":" For example, **VTS_PCOLOR** is a pointer to a **VTS_COLOR** constant."}]}]},{"pos":[6990,7037],"content":"<bpt id=\"p1\">&lt;a name=\"event_custom_id\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  EVENT_CUSTOM_ID","linkify":"<a name=\"event_custom_id\"></a>  EVENT_CUSTOM_ID","source":"<a name=\"event_custom_id\"></a>  EVENT_CUSTOM_ID"},{"pos":[7041,7144],"content":"Defines an event firing function for a custom event belonging to the dispatch ID specified by <ph id=\"ph1\">`dispid`</ph>.","source":"Defines an event firing function for a custom event belonging to the dispatch ID specified by `dispid`."},{"pos":[7242,7252],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The name of the event.","pos":[7269,7291]},{"content":"The dispatch ID used by the control when firing the event.","pos":[7310,7368]},{"content":"The name of the event firing function.","pos":[7388,7426]},{"content":"A variable list of parameters passed to the control container when the event is fired.","pos":[7448,7534]},{"pos":[7544,7551],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`vtsParams`</ph> argument is a space-separated list of values from the <bpt id=\"p1\">**</bpt>VTS_<ept id=\"p1\">**</ept> constants.","pos":[7555,7644],"source":"The `vtsParams` argument is a space-separated list of values from the **VTS_** constants."},{"content":"One or more of these values separated by spaces, not commas, specifies the function's parameter list.","pos":[7645,7746]},{"content":"For example:","pos":[7747,7759]},{"pos":[7766,7847],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCActiveXControl#13<ept id=\"p2\">](../../mfc/codesnippet/cpp/event-maps_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCActiveXControl#13](../../mfc/codesnippet/cpp/event-maps_2.cpp)]"},{"pos":[7854,8007],"content":"specifies a list containing a 32-bit integer representing an RGB color value, followed by a pointer to the <bpt id=\"p1\">**</bpt>IFontDisp<ept id=\"p1\">**</ept> interface of an OLE font object.","source":"specifies a list containing a 32-bit integer representing an RGB color value, followed by a pointer to the **IFontDisp** interface of an OLE font object."},{"pos":[8014,8086],"content":"For a list of the <bpt id=\"p1\">**</bpt>VTS_<ept id=\"p1\">**</ept> constants, see <bpt id=\"p2\">[</bpt>EVENT_CUSTOM<ept id=\"p2\">](#event_custom)</ept>.","source":"For a list of the **VTS_** constants, see [EVENT_CUSTOM](#event_custom)."},{"pos":[8096,8133],"content":"<bpt id=\"p1\">&lt;a name=\"on_oleverb\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ON_OLEVERB","linkify":"<a name=\"on_oleverb\"></a>  ON_OLEVERB","source":"<a name=\"on_oleverb\"></a>  ON_OLEVERB"},{"content":"This macro defines a message map entry that maps a custom verb to a specific member function of your control.","pos":[8137,8246]},{"pos":[8311,8321],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>idsVerbName<ept id=\"p1\">*</ept>","pos":[8325,8338],"source":"*idsVerbName*"},{"content":"The string resource ID of the verb's name.","pos":[8342,8384]},{"content":"The function called by the framework when the verb is invoked.","pos":[8406,8468]},{"pos":[8478,8485],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The resource editor can be used to create custom verb names that are added to your string table.","pos":[8489,8585]},{"pos":[8592,8634],"content":"The function prototype for <ph id=\"ph1\">`memberFxn`</ph> is:","source":"The function prototype for `memberFxn` is:"},{"content":"<ph id=\"ph1\"> `LPMSG`</ph> <ph id=\"ph2\">`lpMsg`</ph> <ph id=\"ph3\">`,`</ph><ph id=\"ph4\"> </ph>","pos":[8663,8684],"source":" `LPMSG` `lpMsg` `,` "},{"content":"<ph id=\"ph1\"> `HWND`</ph> <ph id=\"ph2\">`hWndParent`</ph> <ph id=\"ph3\">`,`</ph><ph id=\"ph4\"> </ph>","pos":[8687,8712],"source":" `HWND` `hWndParent` `,` "},{"content":"<ph id=\"ph1\"> `LPCRECT`</ph> <ph id=\"ph2\">`lpRect`</ph>   <ph id=\"ph3\">`);`</ph>","pos":[8715,8741],"source":" `LPCRECT` `lpRect`   `);`"},{"pos":[8748,8903],"content":"The values of the <ph id=\"ph1\">`lpMsg`</ph>, <ph id=\"ph2\">`hWndParent`</ph>, and <ph id=\"ph3\">`lpRect`</ph> parameters are taken from the corresponding parameters of the <bpt id=\"p1\">**</bpt>IOleObject::DoVerb<ept id=\"p1\">**</ept> member function.","source":"The values of the `lpMsg`, `hWndParent`, and `lpRect` parameters are taken from the corresponding parameters of the **IOleObject::DoVerb** member function."},{"pos":[8913,8956],"content":"<bpt id=\"p1\">&lt;a name=\"on_stdoleverb\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ON_STDOLEVERB","linkify":"<a name=\"on_stdoleverb\"></a>  ON_STDOLEVERB","source":"<a name=\"on_stdoleverb\"></a>  ON_STDOLEVERB"},{"content":"Use this macro to override the default behavior of a standard verb.","pos":[8960,9027]},{"pos":[9090,9100],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The standard verb index for the verb being overridden.","pos":[9115,9169]},{"content":"The function called by the framework when the verb is invoked.","pos":[9191,9253]},{"pos":[9263,9270],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The standard verb index is of the form <bpt id=\"p1\">**</bpt>OLEIVERB_<ept id=\"p1\">**</ept>, followed by an action.","pos":[9274,9350],"source":"The standard verb index is of the form **OLEIVERB_**, followed by an action."},{"content":"<ph id=\"ph1\">`OLEIVERB_SHOW`</ph>, <ph id=\"ph2\">`OLEIVERB_HIDE`</ph>, and <ph id=\"ph3\">`OLEIVERB_UIACTIVATE`</ph> are some examples of standard verbs.","pos":[9351,9447],"source":"`OLEIVERB_SHOW`, `OLEIVERB_HIDE`, and `OLEIVERB_UIACTIVATE` are some examples of standard verbs."},{"pos":[9454,9568],"content":"See <bpt id=\"p1\">[</bpt>ON_OLEVERB<ept id=\"p1\">](#on_oleverb)</ept> for a description of the function prototype to be used as the <ph id=\"ph1\">`memberFxn`</ph> parameter.","source":"See [ON_OLEVERB](#on_oleverb) for a description of the function prototype to be used as the `memberFxn` parameter."},{"pos":[9577,9585],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[9589,9656],"content":"<bpt id=\"p1\">[</bpt>Macros and Globals<ept id=\"p1\">](../../mfc/reference/mfc-macros-and-globals.md)</ept>","source":"[Macros and Globals](../../mfc/reference/mfc-macros-and-globals.md)"}],"content":"---\ntitle: \"Event Maps | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"vc.mfc.macros.maps\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"event maps\"\nms.assetid: 1ed53aee-bc53-43cd-834a-6fb935c0d29b\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Event Maps\nWhenever a control wishes to notify its container that some action (determined by the control developer) has happened (such as a keystroke, mouse click, or a change to the control's state) it calls an event-firing function. This function notifies the control container that some important action has occurred by firing the related event.  \n  \n The Microsoft Foundation Class Library offers a programming model optimized for firing events. In this model, \"event maps\" are used to designate which functions fire which events for a particular control. Event maps contain one macro for each event. For example, an event map that fires a stock Click event might look like this:  \n  \n [!code-cpp[NVC_MFCAxCtl#16](../../mfc/reference/codesnippet/cpp/event-maps_1.cpp)]  \n  \n The **EVENT_STOCK_CLICK** macro indicates that the control will fire a stock Click event every time it detects a mouse click. For a more detailed listing of other stock events, see the article [ActiveX Controls: Events](../../mfc/mfc-activex-controls-events.md). Macros are also available to indicate custom events.  \n  \n Although event-map macros are important, you generally do not insert them directly. This is because the Properties window automatically creates event-map entries in your source files when you use it to associate event-firing functions with events. Any time you want to edit or add an event-map entry, you can use the Properties window.  \n  \n To support event maps, MFC provides the following macros:  \n  \n### Event Map Declaration and Demarcation  \n  \n|||  \n|-|-|  \n|[DECLARE_EVENT_MAP](#declare_event_map)|Declares that an event map will be used in a class to map events to event-firing functions (must be used in the class declaration).|  \n|[BEGIN_EVENT_MAP](#begin_event_map)|Begins the definition of an event map (must be used in the class implementation).|  \n|[END_EVENT_MAP](#end_event_map)|Ends the definition of an event map (must be used in the class implementation).|  \n  \n### Event Mapping Macros  \n  \n|||  \n|-|-|  \n|[EVENT_CUSTOM](#event_custom)|Indicates which event-firing function will fire the specified event.|  \n|[EVENT_CUSTOM_ID](#event_custom_id)|Indicates which event-firing function will fire the specified event, with a designated dispatch ID.|  \n  \n### Message Mapping Macros  \n  \n|||  \n|-|-|  \n|[ON_OLEVERB](#on_oleverb)|Indicates a custom verb handled by the OLE control.|  \n|[ON_STDOLEVERB](#on_stdoleverb)|Overrides a standard verb mapping of the OLE control.|  \n  \n##  <a name=\"declare_event_map\"></a>  DECLARE_EVENT_MAP  \n Each `COleControl`-derived class in your program can provide an event map to specify the events your control will fire.  \n  \n```   \nDECLARE_EVENT_MAP()   \n```  \n  \n### Remarks  \n Use the `DECLARE_EVENT_MAP` macro at the end of your class declaration. Then, in the .cpp file that defines the member functions for the class, use the `BEGIN_EVENT_MAP` macro, macro entries for each of the control's events, and the `END_EVENT_MAP` macro to declare the end of the event list.  \n  \n For more information on event maps, see the article [ActiveX Controls: Events](../../mfc/mfc-activex-controls-events.md).  \n  \n##  <a name=\"begin_event_map\"></a>  BEGIN_EVENT_MAP  \n Begins the definition of your event map.  \n  \n```   \nBEGIN_EVENT_MAP(theClass,  baseClass)  \n```  \n  \n### Parameters  \n `theClass`  \n Specifies the name of the control class whose event map this is.  \n  \n `baseClass`  \n Specifies the name of the base class of `theClass`.  \n  \n### Remarks  \n In the implementation (.cpp) file that defines the member functions for your class, start the event map with the `BEGIN_EVENT_MAP` macro, then add macro entries for each of your events, and complete the event map with the `END_EVENT_MAP` macro.  \n  \n For more information on event maps and the `BEGIN_EVENT_MAP` macro, see the article [ActiveX Controls: Events](../../mfc/mfc-activex-controls-events.md).  \n  \n##  <a name=\"end_event_map\"></a>  END_EVENT_MAP  \n Use the `END_EVENT_MAP` macro to end the definition of your event map.  \n  \n```   \nEND_EVENT_MAP()   \n```  \n  \n##  <a name=\"event_custom\"></a>  EVENT_CUSTOM  \n Defines an event-map entry for a custom event.  \n  \n```   \nEVENT_CUSTOM(pszName, pfnFire,  vtsParams) \n```  \n  \n### Parameters  \n `pszName`  \n The name of the event.  \n  \n `pfnFire`  \n The name of the event firing function.  \n  \n `vtsParams`  \n A space-separated list of one or more constants specifying the function's parameter list.  \n  \n### Remarks  \n The `vtsParams` parameter is a space-separated list of values from the **VTS_** constants. One or more of these values separated by spaces (not commas) specifies the function's parameter list. For example:  \n  \n [!code-cpp[NVC_MFCActiveXControl#13](../../mfc/codesnippet/cpp/event-maps_2.cpp)]  \n  \n specifies a list containing a 32-bit integer representing an RGB color value, followed by a pointer to the **IFontDisp** interface of an OLE font object.  \n  \n The **VTS_** constants and their meanings are as follows:  \n  \n|Symbol|Parameter type|  \n|------------|--------------------|  \n|**VTS_I2**|**short**|  \n|**VTS_I4**|**long**|  \n|**VTS_R4**|**float**|  \n|**VTS_R8**|**double**|  \n|**VTS_COLOR**|**OLE_COLOR**|  \n|**VTS_CY**|**CURRENCY**|  \n|**VTS_DATE**|**DATE**|  \n|**VTS_BSTR**|**const char\\***|  \n|**VTS_DISPATCH**|`LPDISPATCH`|  \n|**VTS_FONT**|**IFontDispatch\\***|  \n|**VTS_HANDLE**|`HANDLE`|  \n|**VTS_SCODE**|`SCODE`|  \n|**VTS_BOOL**|**BOOL**|  \n|**VTS_VARIANT**|**const VARIANT\\***|  \n|**VTS_PVARIANT**|**VARIANT\\***|  \n|**VTS_UNKNOWN**|`LPUNKNOWN`|  \n|**VTS_OPTEXCLUSIVE**|**OLE_OPTEXCLUSIVE**|  \n|**VTS_PICTURE**|**IPictureDisp\\***|  \n|**VTS_TRISTATE**|**OLE_TRISTATE**|  \n|**VTS_XPOS_PIXELS**|**OLE_XPOS_PIXELS**|  \n|**VTS_YPOS_PIXELS**|**OLE_YPOS_PIXELS**|  \n|**VTS_XSIZE_PIXELS**|**OLE_XSIZE_PIXELS**|  \n|**VTS_YSIZE_PIXELS**|**OLE_YSIZE_PIXELS**|  \n|**VTS_XPOS_HIMETRIC**|**OLE_XPOS_HIMETRIC**|  \n|**VTS_YPOS_HIMETRIC**|**OLE_YPOS_HIMETRIC**|  \n|**VTS_XSIZE_HIMETRIC**|**OLE_XSIZE_HIMETRIC**|  \n|**VTS_YSIZE_HIMETRIC**|**OLE_YSIZE_HIMETRIC**|  \n  \n> [!NOTE]\n>  Additional variant constants have been defined for all variant types, with the exception of **VTS_FONT** and **VTS_PICTURE**, that provide a pointer to the variant data constant. These constants are named using the **VTS_P**`constantname` convention. For example, **VTS_PCOLOR** is a pointer to a **VTS_COLOR** constant.  \n  \n##  <a name=\"event_custom_id\"></a>  EVENT_CUSTOM_ID  \n Defines an event firing function for a custom event belonging to the dispatch ID specified by `dispid`.  \n  \n```   \nEVENT_CUSTOM_ID(\n  pszName,   \n  dispid,   \n  pfnFire,\n  vtsParams)  \n \n```  \n  \n### Parameters  \n `pszName`  \n The name of the event.  \n  \n `dispid`  \n The dispatch ID used by the control when firing the event.  \n  \n `pfnFire`  \n The name of the event firing function.  \n  \n `vtsParams`  \n A variable list of parameters passed to the control container when the event is fired.  \n  \n### Remarks  \n The `vtsParams` argument is a space-separated list of values from the **VTS_** constants. One or more of these values separated by spaces, not commas, specifies the function's parameter list. For example:  \n  \n [!code-cpp[NVC_MFCActiveXControl#13](../../mfc/codesnippet/cpp/event-maps_2.cpp)]  \n  \n specifies a list containing a 32-bit integer representing an RGB color value, followed by a pointer to the **IFontDisp** interface of an OLE font object.  \n  \n For a list of the **VTS_** constants, see [EVENT_CUSTOM](#event_custom).  \n  \n##  <a name=\"on_oleverb\"></a>  ON_OLEVERB  \n This macro defines a message map entry that maps a custom verb to a specific member function of your control.  \n  \n```   \nON_OLEVERB(idsVerbName,  memberFxn)   \n```  \n  \n### Parameters  \n *idsVerbName*  \n The string resource ID of the verb's name.  \n  \n `memberFxn`  \n The function called by the framework when the verb is invoked.  \n  \n### Remarks  \n The resource editor can be used to create custom verb names that are added to your string table.  \n  \n The function prototype for `memberFxn` is:  \n  \n `BOOL memberFxn(`    \n `LPMSG` `lpMsg` `,`   \n `HWND` `hWndParent` `,`   \n `LPCRECT` `lpRect`   `);`  \n  \n The values of the `lpMsg`, `hWndParent`, and `lpRect` parameters are taken from the corresponding parameters of the **IOleObject::DoVerb** member function.  \n  \n##  <a name=\"on_stdoleverb\"></a>  ON_STDOLEVERB  \n Use this macro to override the default behavior of a standard verb.  \n  \n```   \nON_STDOLEVERB(iVerb,   memberFxn)   \n```  \n  \n### Parameters  \n `iVerb`  \n The standard verb index for the verb being overridden.  \n  \n `memberFxn`  \n The function called by the framework when the verb is invoked.  \n  \n### Remarks  \n The standard verb index is of the form **OLEIVERB_**, followed by an action. `OLEIVERB_SHOW`, `OLEIVERB_HIDE`, and `OLEIVERB_UIACTIVATE` are some examples of standard verbs.  \n  \n See [ON_OLEVERB](#on_oleverb) for a description of the function prototype to be used as the `memberFxn` parameter.  \n  \n## See Also  \n [Macros and Globals](../../mfc/reference/mfc-macros-and-globals.md)\n"}