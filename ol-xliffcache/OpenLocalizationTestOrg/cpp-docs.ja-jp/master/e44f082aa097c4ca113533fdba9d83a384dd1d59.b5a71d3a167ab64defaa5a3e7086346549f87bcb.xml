{"nodes":[{"pos":[12,52],"content":"completion_future Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"completion_future Class | Microsoft Docs","pos":[0,40]}]},{"content":"completion_future Class","pos":[589,612]},{"content":"Represents a future corresponding to a C++ AMP asynchronous operation.","pos":[613,683]},{"content":"Syntax","pos":[693,699]},{"content":"Members","pos":[750,757]},{"content":"Public Constructors","pos":[767,786]},{"content":"Name","pos":[793,797]},{"content":"Description","pos":[798,809]},{"content":"completion_future::completion_future Constructor","pos":[848,896]},{"pos":[905,965],"content":"Initializes a new instance of the <ph id=\"ph1\">`completion_future`</ph> class.","source":"Initializes a new instance of the `completion_future` class."},{"content":"completion_future::~completion_future Destructor","pos":[971,1019]},{"pos":[1028,1068],"content":"Destroys the <ph id=\"ph1\">`completion_future`</ph> object.","source":"Destroys the `completion_future` object."},{"content":"Public Methods","pos":[1079,1093]},{"content":"Name","pos":[1100,1104]},{"content":"Description","pos":[1105,1116]},{"content":"<bpt id=\"p1\">[</bpt>completion_future::get Method<ept id=\"p1\">](#get)</ept>|Waits until the associated asynchronous operation completes.|","pos":[1155,1254],"source":"[completion_future::get Method](#get)|Waits until the associated asynchronous operation completes.|"},{"content":"<bpt id=\"p1\">[</bpt>completion_future::then Method<ept id=\"p1\">](#then)</ept>|Chains a callback function object to the <ph id=\"ph1\">`completion_future`</ph> object to be executed when the associated asynchronous operation finishes execution.|","pos":[1258,1444],"source":"[completion_future::then Method](#then)|Chains a callback function object to the `completion_future` object to be executed when the associated asynchronous operation finishes execution.|"},{"content":"<bpt id=\"p1\">[</bpt>completion_future::to_task Method<ept id=\"p1\">](#to_task)</ept>|Returns a <ph id=\"ph1\">`task`</ph> object corresponding to the associated asynchronous operation.|","pos":[1448,1574],"source":"[completion_future::to_task Method](#to_task)|Returns a `task` object corresponding to the associated asynchronous operation.|"},{"content":"<bpt id=\"p1\">[</bpt>completion_future::valid Method<ept id=\"p1\">](#valid)</ept>|Gets a Boolean value that indicates whether the object is associated with an asynchronous operation.|","pos":[1578,1721],"source":"[completion_future::valid Method](#valid)|Gets a Boolean value that indicates whether the object is associated with an asynchronous operation.|"},{"content":"<bpt id=\"p1\">[</bpt>completion_future::wait Method<ept id=\"p1\">](#wait)</ept>|Blocks until the associated asynchronous operation completes.|","pos":[1725,1827],"source":"[completion_future::wait Method](#wait)|Blocks until the associated asynchronous operation completes.|"},{"content":"<bpt id=\"p1\">[</bpt>completion_future::wait_for Method<ept id=\"p1\">](#wait_for)</ept>|Blocks until the associated asynchronous operation completes or the time specified by <ph id=\"ph1\">`_Rel_time`</ph> has elapsed.|","pos":[1831,1990],"source":"[completion_future::wait_for Method](#wait_for)|Blocks until the associated asynchronous operation completes or the time specified by `_Rel_time` has elapsed.|"},{"content":"<bpt id=\"p1\">[</bpt>completion_future::wait_until Method<ept id=\"p1\">](#wait_until)</ept>|Blocks until the associated asynchronous operation completes or until the current time exceeds the value specified by <ph id=\"ph1\">`_Abs_time`</ph>.|","pos":[1994,2177],"source":"[completion_future::wait_until Method](#wait_until)|Blocks until the associated asynchronous operation completes or until the current time exceeds the value specified by `_Abs_time`.|"},{"content":"Public Operators","pos":[2187,2203]},{"content":"Name","pos":[2210,2214]},{"content":"Description","pos":[2215,2226]},{"content":"completion_future::operator std::shared_future<ph id=\"ph1\">\\&lt;</ph>void&gt; Operator","pos":[2265,2327],"source":"completion_future::operator std::shared_future\\<void> Operator"},{"pos":[2354,2439],"content":"Implicitly converts the <ph id=\"ph1\">`completion_future`</ph> object to an <ph id=\"ph2\">`std::shared_future`</ph> object.","source":"Implicitly converts the `completion_future` object to an `std::shared_future` object."},{"content":"completion_future::operator= Operator","pos":[2445,2482]},{"pos":[2498,2576],"content":"Copies the contents of the specified <ph id=\"ph1\">`completion_future`</ph> object into this one.","source":"Copies the contents of the specified `completion_future` object into this one."},{"content":"Inheritance Hierarchy","pos":[2586,2607]},{"content":"Requirements","pos":[2639,2651]},{"pos":[2655,2674],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> amprt.h","source":"**Header:** amprt.h"},{"pos":[2681,2707],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[2735,2783],"content":"completion_future::completion_future Constructor"},{"pos":[2784,2844],"content":"Initializes a new instance of the <ph id=\"ph1\">`completion_future`</ph> class.","source":"Initializes a new instance of the `completion_future` class."},{"content":"Syntax","pos":[2854,2860]},{"content":"Parameters","pos":[3033,3043]},{"content":"The <ph id=\"ph1\">`completion_future`</ph> object to copy or move.","pos":[3059,3106],"source":" The `completion_future` object to copy or move."},{"content":"Overloads List","pos":[3116,3130]},{"content":"Name","pos":[3137,3141]},{"content":"Description","pos":[3142,3153]},{"pos":[3214,3273],"content":"Initializes a new instance of the <ph id=\"ph1\">`completion_future`</ph> Class","source":"Initializes a new instance of the `completion_future` Class"},{"pos":[3332,3417],"content":"Initializes a new instance of the <ph id=\"ph1\">`completion_future`</ph> class by copying a constructor.","source":"Initializes a new instance of the `completion_future` class by copying a constructor."},{"pos":[3471,3555],"content":"Initializes a new instance of the <ph id=\"ph1\">`completion_future`</ph> class by moving a constructor.","source":"Initializes a new instance of the `completion_future` class by moving a constructor."},{"pos":[3584,3613],"content":"completion_future::get Method"},{"content":"Waits until the associated asynchronous operation completes.","pos":[3616,3676]},{"content":"Throws the stored exception if one was encountered during the asynchronous operation.","pos":[3677,3762]},{"content":"Syntax","pos":[3772,3778]},{"pos":[3860,3921],"content":"completion_future::operator std::shared_future<ph id=\"ph1\">&lt;void&gt;</ph> Operator","source":" completion_future::operator std::shared_future<void> Operator"},{"pos":[3924,4009],"content":"Implicitly converts the <ph id=\"ph1\">`completion_future`</ph> object to an <ph id=\"ph2\">`std::shared_future`</ph> object.","source":"Implicitly converts the `completion_future` object to an `std::shared_future` object."},{"content":"Syntax","pos":[4019,4025]},{"content":"Return Value","pos":[4095,4107]},{"pos":[4111,4142],"content":"An <ph id=\"ph1\">`std::shared_future`</ph> object.","source":"An `std::shared_future` object."},{"pos":[4177,4214],"content":"completion_future::operator= Operator"},{"pos":[4217,4295],"content":"Copies the contents of the specified <ph id=\"ph1\">`completion_future`</ph> object into this one.","source":"Copies the contents of the specified `completion_future` object into this one."},{"content":"Syntax","pos":[4305,4311]},{"content":"Parameters","pos":[4484,4494]},{"content":"The object to copy from.","pos":[4510,4534]},{"content":"Return Value","pos":[4544,4556]},{"pos":[4560,4607],"content":"A reference to this <ph id=\"ph1\">`completion_future`</ph> object.","source":"A reference to this `completion_future` object."},{"content":"Overloads List","pos":[4616,4630]},{"content":"Name","pos":[4637,4641]},{"content":"Description","pos":[4642,4653]},{"pos":[4756,4853],"content":"Copies the contents of the specified <ph id=\"ph1\">`completion_future`</ph> object into this one, using a deep copy.","source":"Copies the contents of the specified `completion_future` object into this one, using a deep copy."},{"pos":[4918,5021],"content":"Copies the contents of the specified <ph id=\"ph1\">`completion_future`</ph> object into this one, using a move assignment.","source":"Copies the contents of the specified `completion_future` object into this one, using a move assignment."},{"pos":[5051,5081],"content":"completion_future::then Method"},{"pos":[5084,5229],"content":"Chains a callback function object to the <ph id=\"ph1\">`completion_future`</ph> object to be executed when the associated asynchronous operation finishes execution.","source":"Chains a callback function object to the `completion_future` object to be executed when the associated asynchronous operation finishes execution."},{"content":"Syntax","pos":[5239,5245]},{"content":"Parameters","pos":[5362,5372]},{"content":"The callback functor.","pos":[5390,5411]},{"content":"The callback function object.","pos":[5429,5458]},{"pos":[5490,5523],"content":"completion_future::to_task Method"},{"pos":[5526,5605],"content":"Returns a <ph id=\"ph1\">`task`</ph> object corresponding to the associated asynchronous operation.","source":"Returns a `task` object corresponding to the associated asynchronous operation."},{"content":"Syntax","pos":[5615,5621]},{"content":"Return Value","pos":[5689,5701]},{"pos":[5705,5776],"content":"A <ph id=\"ph1\">`task`</ph> object corresponding to the associated asynchronous operation.","source":"A `task` object corresponding to the associated asynchronous operation."},{"pos":[5806,5837],"content":"completion_future::valid Method"},{"content":"Gets a Boolean value that indicates whether the  object is associated with an asynchronous operation.","pos":[5840,5941]},{"content":"Syntax","pos":[5951,5957]},{"content":"Return Value","pos":[6004,6016]},{"pos":[6027,6106],"content":"if the object is associated with an asynchronous operation; otherwise, <ph id=\"ph1\">`false`</ph>.","source":" if the object is associated with an asynchronous operation; otherwise, `false`."},{"pos":[6135,6165],"content":"completion_future::wait Method"},{"content":"Blocks until the associated asynchronous operation completes.","pos":[6168,6229]},{"content":"Syntax","pos":[6239,6245]},{"pos":[6314,6348],"content":"completion_future::wait_for Method"},{"pos":[6351,6468],"content":"Blocks until the associated asynchronous operation completes or the time that's specified by <ph id=\"ph1\">`_Rel_time`</ph> has elapsed.","source":"Blocks until the associated asynchronous operation completes or the time that's specified by `_Rel_time` has elapsed."},{"content":"Syntax","pos":[6478,6484]},{"content":"Parameters","pos":[6680,6690]},{"content":"An arithmetic type that represents the number of ticks.","pos":[6704,6759]},{"content":"A std::ratio that represents the number of seconds that elapse per tick.","pos":[6779,6851]},{"content":"The maximum amount of time to wait for the operation to complete.","pos":[6873,6938]},{"content":"Return Value","pos":[6948,6960]},{"content":"Returns:","pos":[6964,6972]},{"pos":[7013,7069],"content":"if the associated asynchronous operation is not running."},{"pos":[7107,7160],"content":"if the associated asynchronous operation is finished."},{"pos":[7200,7241],"content":"if the specified time period has elapsed."},{"pos":[7276,7312],"content":"completion_future::wait_until Method"},{"pos":[7315,7445],"content":"Blocks until the associated asynchronous operation completes or until the current time exceeds the value specified by <ph id=\"ph1\">`_Abs_time`</ph>.","source":"Blocks until the associated asynchronous operation completes or until the current time exceeds the value specified by `_Abs_time`."},{"content":"Syntax","pos":[7455,7461]},{"content":"Parameters","pos":[7669,7679]},{"content":"The clock on which this time point is measured.","pos":[7695,7742]},{"content":"The time interval since the start of <ph id=\"ph1\">`_Clock`</ph>’s epoch, after which the function will time out.","pos":[7764,7858],"source":" The time interval since the start of `_Clock`’s epoch, after which the function will time out."},{"content":"The point in time after which the function will time out.","pos":[7880,7937]},{"content":"Return Value","pos":[7947,7959]},{"content":"Returns:","pos":[7963,7971]},{"pos":[8012,8068],"content":"if the associated asynchronous operation is not running."},{"pos":[8106,8159],"content":"if the associated asynchronous operation is finished."},{"pos":[8199,8240],"content":"if the time period specified has elapsed."},{"pos":[8269,8317],"content":"completion_future::~completion_future Destructor"},{"pos":[8320,8360],"content":"Destroys the <ph id=\"ph1\">`completion_future`</ph> object.","source":"Destroys the `completion_future` object."},{"content":"Syntax","pos":[8370,8376]},{"content":"See Also","pos":[8424,8432]},{"content":"Concurrency Namespace (C++ AMP)","pos":[8437,8468]}],"content":"---\ntitle: \"completion_future Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"amprt/Concurrency::completion_future\"\ndev_langs: \n  - \"C++\"\nms.assetid: 1303c62e-546d-4b02-a578-251ed3fc0b6b\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# completion_future Class\nRepresents a future corresponding to a C++ AMP asynchronous operation.  \n  \n### Syntax  \n  \n```  \nclass completion_future;  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[completion_future::completion_future Constructor](#ctor)|Initializes a new instance of the `completion_future` class.|  \n|[completion_future::~completion_future Destructor](#dtor)|Destroys the `completion_future` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n\n|[completion_future::get Method](#get)|Waits until the associated asynchronous operation completes.|  \n|[completion_future::then Method](#then)|Chains a callback function object to the `completion_future` object to be executed when the associated asynchronous operation finishes execution.|  \n|[completion_future::to_task Method](#to_task)|Returns a `task` object corresponding to the associated asynchronous operation.|  \n|[completion_future::valid Method](#valid)|Gets a Boolean value that indicates whether the object is associated with an asynchronous operation.|  \n|[completion_future::wait Method](#wait)|Blocks until the associated asynchronous operation completes.|  \n|[completion_future::wait_for Method](#wait_for)|Blocks until the associated asynchronous operation completes or the time specified by `_Rel_time` has elapsed.|  \n|[completion_future::wait_until Method](#wait_until)|Blocks until the associated asynchronous operation completes or until the current time exceeds the value specified by `_Abs_time`.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[completion_future::operator std::shared_future\\<void> Operator](#operator_shared_future)|Implicitly converts the `completion_future` object to an `std::shared_future` object.|  \n|[completion_future::operator= Operator](#operator_eq)|Copies the contents of the specified `completion_future` object into this one.|  \n  \n## Inheritance Hierarchy  \n `completion_future`  \n  \n## Requirements  \n **Header:** amprt.h  \n  \n **Namespace:** concurrency  \n\n\n## <a name=\"ctor\"></a> completion_future::completion_future Constructor\nInitializes a new instance of the `completion_future` class.  \n  \n### Syntax  \n  \n```  \ncompletion_future();  \n  \ncompletion_future(  \n    const completion_future& _Other );  \n  \ncompletion_future(  \n    completion_future&& _Other );  \n```  \n  \n### Parameters  \n `_Other`  \n The `completion_future` object to copy or move.  \n  \n### Overloads List  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`completion_future();`|Initializes a new instance of the `completion_future` Class|  \n|`completion_future(const completion_future& _Other);`|Initializes a new instance of the `completion_future` class by copying a constructor.|  \n|`completion_future(completion_future&& _Other);`|Initializes a new instance of the `completion_future` class by moving a constructor.|  \n  \n## <a name=\"get\"></a> completion_future::get Method  \nWaits until the associated asynchronous operation completes. Throws the stored exception if one was encountered during the asynchronous operation.  \n  \n### Syntax  \n  \n```  \nvoid get() const;  \n```  \n  \n## <a name=\"operator_shared_future\"></a> completion_future::operator std::shared_future<void> Operator  \nImplicitly converts the `completion_future` object to an `std::shared_future` object.  \n  \n### Syntax  \n  \n```  \noperator std::shared_future<void>() const;  \n```  \n  \n### Return Value  \n An `std::shared_future` object.  \n  \n## <a name=\"operator_eq\"></a>completion_future::operator= Operator  \nCopies the contents of the specified `completion_future` object into this one.  \n  \n### Syntax  \n  \n```  \ncompletion_future&  operator= (  \n    const completion_future& _Other );  \n  \ncompletion_future&  operator= (  \n    completion_future&& _Other );  \n```  \n  \n### Parameters  \n `_Other`  \n The object to copy from.  \n  \n### Return Value  \n A reference to this `completion_future` object.  \n  \n## Overloads List  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`completion_future& operator=(const completion_future& _Other);`|Copies the contents of the specified `completion_future` object into this one, using a deep copy.|  \n|`completion_future& operator=(completion_future&& _Other);`|Copies the contents of the specified `completion_future` object into this one, using a move assignment.|  \n  \n## <a name=\"then\"></a> completion_future::then Method  \nChains a callback function object to the `completion_future` object to be executed when the associated asynchronous operation finishes execution.  \n  \n### Syntax  \n  \n```  \ntemplate <  \n    typename _Functor  \n>  \nvoid then(  \n    const _Functor & _Func ) const;  \n```  \n  \n### Parameters  \n `_Functor`  \n The callback functor.  \n  \n `_Func`  \n The callback function object.  \n  \n## <a name=\"to_task\"></a> completion_future::to_task Method  \nReturns a `task` object corresponding to the associated asynchronous operation.  \n  \n### Syntax  \n  \n```  \nconcurrency::task<void> to_task() const;  \n```  \n  \n### Return Value  \n A `task` object corresponding to the associated asynchronous operation.  \n  \n## <a name=\"valid\"></a> completion_future::valid Method  \nGets a Boolean value that indicates whether the  object is associated with an asynchronous operation.  \n  \n### Syntax  \n  \n```  \nbool valid() const;  \n```  \n  \n### Return Value  \n `true` if the object is associated with an asynchronous operation; otherwise, `false`.  \n  \n## <a name=\"wait\"></a> completion_future::wait Method  \nBlocks until the associated asynchronous operation completes.  \n  \n### Syntax  \n  \n```  \nvoid wait() const;  \n```  \n  \n## <a name=\"wait_for\"></a> completion_future::wait_for Method  \nBlocks until the associated asynchronous operation completes or the time that's specified by `_Rel_time` has elapsed.  \n  \n### Syntax  \n  \n```  \ntemplate <  \n    class _Rep,  \n    class _Period  \n>  \nstd::future_status::future_status wait_for(  \n    const std::chrono::duration< _Rep, _Period>& _Rel_time ) const;  \n```  \n  \n### Parameters  \n `_Rep`  \n An arithmetic type that represents the number of ticks.  \n  \n `_Period`  \n A std::ratio that represents the number of seconds that elapse per tick.  \n  \n `_Rel_time`  \n The maximum amount of time to wait for the operation to complete.  \n  \n### Return Value  \n Returns:  \n  \n-   `std::future_status::deferred` if the associated asynchronous operation is not running.  \n  \n-   `std::future_status::ready` if the associated asynchronous operation is finished.  \n  \n-   `std::future_status::timeout` if the specified time period has elapsed.  \n  \n## <a name=\"wait_until\"></a> completion_future::wait_until Method  \nBlocks until the associated asynchronous operation completes or until the current time exceeds the value specified by `_Abs_time`.  \n  \n### Syntax  \n  \n```  \ntemplate <  \n    class _Clock,  \n    class _Duration  \n>  \nstd::future_status::future_status wait_until(  \n    const std::chrono::time_point< _Clock, _Duration>& _Abs_time ) const;  \n```  \n  \n### Parameters  \n `_Clock`  \n The clock on which this time point is measured.  \n  \n `_Duration`  \n The time interval since the start of `_Clock`’s epoch, after which the function will time out.  \n  \n `_Abs_time`  \n The point in time after which the function will time out.  \n  \n### Return Value  \n Returns:  \n  \n1.  `std::future_status::deferred` if the associated asynchronous operation is not running.  \n  \n2.  `std::future_status::ready` if the associated asynchronous operation is finished.  \n  \n3.  `std::future_status::timeout` if the time period specified has elapsed.  \n  \n## <a name=\"dtor\"></a> completion_future::~completion_future Destructor  \nDestroys the `completion_future` object.  \n  \n### Syntax  \n  \n```  \n~completion_future();  \n```  \n  \n## See Also  \n [Concurrency Namespace (C++ AMP)](concurrency-namespace-cpp-amp.md)\n"}