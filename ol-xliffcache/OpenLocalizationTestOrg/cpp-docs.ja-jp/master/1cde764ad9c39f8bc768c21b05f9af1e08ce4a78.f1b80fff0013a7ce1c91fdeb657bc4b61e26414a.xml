{"nodes":[{"pos":[12,64],"content":"concurrent_unordered_multimap Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"concurrent_unordered_multimap Class | Microsoft Docs","pos":[0,52]}]},{"content":"concurrent_unordered_multimap Class","pos":[697,732]},{"content":"The <ph id=\"ph1\">`concurrent_unordered_multimap`</ph> class is an concurrency-safe container that controls a varying-length sequence of elements of type <ph id=\"ph2\">`std::pair&lt;const K, _Element_type&gt;`</ph>.","pos":[733,904],"source":"The `concurrent_unordered_multimap` class is an concurrency-safe container that controls a varying-length sequence of elements of type `std::pair<const K, _Element_type>`."},{"content":"The sequence is represented in a way that enables concurrency-safe append, element access, iterator access and iterator traversal operations.","pos":[905,1046]},{"content":"Syntax","pos":[1055,1061]},{"content":"Parameters","pos":[1661,1671]},{"content":"The key type.","pos":[1682,1695]},{"content":"The mapped type.","pos":[1721,1737]},{"content":"The hash function object type.","pos":[1757,1787]},{"content":"This argument is optional and the default value is <ph id=\"ph1\">`std::tr1::hash&lt;``K``&gt;`</ph>.","pos":[1788,1863],"source":" This argument is optional and the default value is `std::tr1::hash<``K``>`."},{"content":"The equality comparison function object type.","pos":[1888,1933]},{"content":"This argument is optional and the default value is <ph id=\"ph1\">`std::equal_to&lt;``K``&gt;`</ph>.","pos":[1934,2008],"source":" This argument is optional and the default value is `std::equal_to<``K``>`."},{"content":"The type that represents the stored allocator object that encapsulates details about the allocation and deallocation of memory for the concurrent vector.","pos":[2036,2189]},{"content":"This argument is optional and the default value is <ph id=\"ph1\">`std::allocator&lt;std::pair&lt;``K`</ph>, <ph id=\"ph2\">`_Element_type``&gt;&gt;`</ph>.","pos":[2190,2293],"source":" This argument is optional and the default value is `std::allocator<std::pair<``K`, `_Element_type``>>`."},{"content":"Members","pos":[2302,2309]},{"content":"Public Typedefs","pos":[2319,2334]},{"content":"Name","pos":[2341,2345]},{"content":"Description","pos":[2346,2357]},{"content":"The type of an allocator for managing storage.","pos":[2412,2458]},{"content":"The type of a constant iterator for the controlled sequence.","pos":[2480,2540]},{"content":"The type of a constant bucket iterator for the controlled sequence.","pos":[2568,2635]},{"content":"The type of a constant pointer to an element.","pos":[2656,2701]},{"content":"The type of a constant reference to an element.","pos":[2724,2771]},{"content":"The type of a signed distance between two elements.","pos":[2794,2845]},{"content":"The type of the hash function.","pos":[2859,2889]},{"content":"The type of an iterator for the controlled sequence.","pos":[2905,2957]},{"content":"The type of the comparison function.","pos":[2974,3010]},{"content":"The type of an ordering key.","pos":[3026,3054]},{"content":"The type of a bucket iterator for the controlled sequence.","pos":[3076,3134]},{"content":"The type of a mapped value associated with each key.","pos":[3153,3205]},{"content":"The type of a pointer to an element.","pos":[3220,3256]},{"content":"The type of a reference to an element.","pos":[3273,3311]},{"content":"The type of an unsigned distance between two elements.","pos":[3328,3382]},{"content":"The type of an element.","pos":[3400,3423]},{"content":"Public Constructors","pos":[3434,3453]},{"content":"Name","pos":[3460,3464]},{"content":"Description","pos":[3465,3476]},{"content":"concurrent_unordered_multimap::concurrent_unordered_multimap Constructor","pos":[3515,3587]},{"content":"Overloaded.","pos":[3596,3607]},{"content":"Constructs a concurrent unordered multimap.","pos":[3608,3651]},{"content":"Public Methods","pos":[3662,3676]},{"content":"Name","pos":[3683,3687]},{"content":"Description","pos":[3688,3699]},{"content":"concurrent_unordered_multimap::hash_function Method","pos":[3738,3789]},{"content":"Returns the stored hash function object.","pos":[3807,3847]},{"content":"concurrent_unordered_multimap::insert Method","pos":[3853,3897]},{"content":"Overloaded.","pos":[3908,3919]},{"content":"Adds elements to the <ph id=\"ph1\">`concurrent_unordered_multimap`</ph> object.","pos":[3920,3980],"source":" Adds elements to the `concurrent_unordered_multimap` object."},{"content":"concurrent_unordered_multimap::key_eq Method","pos":[3986,4030]},{"content":"Returns the stored equality comparison function object.","pos":[4041,4096]},{"content":"concurrent_unordered_multimap::swap Method","pos":[4102,4144]},{"content":"Swaps the contents of two <ph id=\"ph1\">`concurrent_unordered_multimap`</ph> objects.","pos":[4153,4219],"source":"Swaps the contents of two `concurrent_unordered_multimap` objects."},{"content":"This method is not concurrency-safe.","pos":[4220,4256]},{"content":"concurrent_unordered_multimap::unsafe_erase Method","pos":[4262,4312]},{"content":"Overloaded.","pos":[4329,4340]},{"content":"Removes elements from the <ph id=\"ph1\">`concurrent_unordered_multimap`</ph> at specified positions.","pos":[4341,4422],"source":" Removes elements from the `concurrent_unordered_multimap` at specified positions."},{"content":"This method is not concurrency-safe.","pos":[4423,4459]},{"content":"Public Operators","pos":[4470,4486]},{"content":"Name","pos":[4493,4497]},{"content":"Description","pos":[4498,4509]},{"content":"concurrent_unordered_multimap::operator= Operator","pos":[4548,4597]},{"content":"Overloaded.","pos":[4613,4624]},{"content":"Assigns the contents of another <ph id=\"ph1\">`concurrent_unordered_multimap`</ph> object to this one.","pos":[4625,4708],"source":" Assigns the contents of another `concurrent_unordered_multimap` object to this one."},{"content":"This method is not concurrency-safe.","pos":[4709,4745]},{"content":"Remarks","pos":[4755,4762]},{"pos":[4766,4936],"content":"For detailed information on the <ph id=\"ph1\">`concurrent_unordered_multimap`</ph> class, see <bpt id=\"p1\">[</bpt>Parallel Containers and Objects<ept id=\"p1\">](../../../parallel/concrt/parallel-containers-and-objects.md)</ept>.","source":"For detailed information on the `concurrent_unordered_multimap` class, see [Parallel Containers and Objects](../../../parallel/concrt/parallel-containers-and-objects.md)."},{"content":"Inheritance Hierarchy","pos":[4945,4966]},{"content":"Requirements","pos":[5051,5063]},{"pos":[5067,5105],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> concurrent_unordered_map.h","source":"**Header:** concurrent_unordered_map.h"},{"pos":[5112,5138],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[5170,5213],"content":"concurrent_unordered_multimap::begin Method"},{"content":"Returns an iterator pointing to the first element in the concurrent container.","pos":[5217,5295]},{"content":"This method is concurrency safe.","pos":[5296,5328]},{"content":"Return Value","pos":[5400,5412]},{"content":"An iterator to the first element in the concurrent container.","pos":[5416,5477]},{"pos":[5510,5554],"content":"concurrent_unordered_multimap::cbegin Method"},{"content":"Returns a const iterator pointing to the first element in the concurrent container.","pos":[5558,5641]},{"content":"This method is concurrency safe.","pos":[5642,5674]},{"content":"Return Value","pos":[5728,5740]},{"content":"A const iterator to the first element in the concurrent container.","pos":[5744,5810]},{"pos":[5841,5883],"content":"concurrent_unordered_multimap::cend Method"},{"content":"Returns a const iterator pointing to the location succeeding the last element in the concurrent container.","pos":[5887,5993]},{"content":"This method is concurrency safe.","pos":[5994,6026]},{"content":"Return Value","pos":[6078,6090]},{"content":"A const iterator to the location succeeding the last element in the concurrent container.","pos":[6094,6183]},{"pos":[6215,6258],"content":"concurrent_unordered_multimap::clear Method"},{"content":"Erases all the elements in the concurrent container.","pos":[6262,6314]},{"content":"This function is not concurrency safe.","pos":[6315,6353]},{"pos":[6411,6483],"content":"concurrent_unordered_multimap::concurrent_unordered_multimap Constructor"},{"content":"Constructs a concurrent unordered multimap.","pos":[6487,6530]},{"content":"Parameters","pos":[7405,7415]},{"content":"The type of the input iterator.","pos":[7434,7465]},{"content":"The initial number of buckets for this unordered multimap.","pos":[7496,7554]},{"content":"The hash function for this unordered multimap.","pos":[7574,7620]},{"content":"The equality comparison function for this unordered multimap.","pos":[7645,7706]},{"content":"The allocator for this unordered multimap.","pos":[7729,7771]},{"content":"The position of the first element in the range of elements to be copied.","pos":[7790,7862]},{"content":"The position of the first element beyond the range of elements to be copied.","pos":[7879,7955]},{"content":"The source <ph id=\"ph1\">`concurrent_unordered_multimap`</ph> object to copy elements from.","pos":[7973,8045],"source":" The source `concurrent_unordered_multimap` object to copy elements from."},{"content":"Remarks","pos":[8055,8062]},{"pos":[8066,8160],"content":"All constructors store an allocator object <ph id=\"ph1\">`_Allocator`</ph> and initialize the unordered multimap.","source":"All constructors store an allocator object `_Allocator` and initialize the unordered multimap."},{"content":"The first constructor specifies an empty initial multimap and explicitly specifies the number of buckets, hash function, equality function and allocator type to be used.","pos":[8167,8336]},{"content":"The second constructor specifies an allocator for the unordered multimap.","pos":[8343,8416]},{"pos":[8423,8513],"content":"The third constructor specifies values supplied by the iterator range [ <ph id=\"ph1\">`_Begin`</ph>, <ph id=\"ph2\">`_End`</ph>).","source":"The third constructor specifies values supplied by the iterator range [ `_Begin`, `_End`)."},{"pos":[8520,8614],"content":"The fourth and fifth constructors specify a copy of the concurrent unordered multimap <ph id=\"ph1\">`_Umap`</ph>.","source":"The fourth and fifth constructors specify a copy of the concurrent unordered multimap `_Umap`."},{"pos":[8621,8704],"content":"The last constructor specifies a move of the concurrent unordered multimap <ph id=\"ph1\">`_Umap`</ph>.","source":"The last constructor specifies a move of the concurrent unordered multimap `_Umap`."},{"pos":[8736,8779],"content":"concurrent_unordered_multimap::count Method"},{"content":"Counts the number of elements matching a specified key.","pos":[8783,8838]},{"content":"This function is concurrency safe.","pos":[8839,8873]},{"content":"Parameters","pos":[8941,8951]},{"content":"The key to search for.","pos":[8965,8987]},{"content":"Return Value","pos":[8997,9009]},{"content":"The number of times number of times the key appears in the container.","pos":[9013,9082]},{"pos":[9114,9157],"content":"concurrent_unordered_multimap::empty Method"},{"content":"Tests whether no elements are present.","pos":[9161,9199]},{"content":"This method is concurrency safe.","pos":[9200,9232]},{"content":"Return Value","pos":[9275,9287]},{"pos":[9298,9354],"content":"if the concurrent container is empty, <ph id=\"ph1\">`false`</ph> otherwise.","source":" if the concurrent container is empty, `false` otherwise."},{"content":"Remarks","pos":[9364,9371]},{"content":"In the presence of concurrent inserts, whether or not the concurrent container is empty may change immediately after calling this function, before the return value is even read.","pos":[9375,9552]},{"pos":[9582,9623],"content":"concurrent_unordered_multimap::end Method"},{"content":"Returns an iterator pointing to the location succeeding the last element in the concurrent container.","pos":[9627,9728]},{"content":"This method is concurrency safe.","pos":[9729,9761]},{"content":"Return Value","pos":[9829,9841]},{"content":"An iterator to the location succeeding the last element in the concurrent container.","pos":[9845,9929]},{"pos":[9967,10016],"content":"concurrent_unordered_multimap::equal_range Method"},{"content":"Finds a range that matches a specified key.","pos":[10020,10063]},{"content":"This function is concurrency safe.","pos":[10064,10098]},{"content":"Parameters","pos":[10288,10298]},{"content":"The key value to search for.","pos":[10312,10340]},{"content":"Return Value","pos":[10350,10362]},{"pos":[10366,10563],"content":"A <bpt id=\"p1\">[</bpt>pair<ept id=\"p1\">](http://msdn.microsoft.com/en-us/32e72d66-3020-4cb9-92c3-f7a5fa7998ff)</ept> where the first element is an iterator to the beginning and the second element is an iterator to the end of the range.","source":"A [pair](http://msdn.microsoft.com/en-us/32e72d66-3020-4cb9-92c3-f7a5fa7998ff) where the first element is an iterator to the beginning and the second element is an iterator to the end of the range."},{"content":"Remarks","pos":[10573,10580]},{"content":"It is possible for concurrent inserts to cause additional keys to be inserted after the begin iterator and before the end iterator.","pos":[10584,10715]},{"pos":[10746,10788],"content":"concurrent_unordered_multimap::find Method"},{"content":"Finds an element that matches a specified key.","pos":[10792,10838]},{"content":"This function is concurrency safe.","pos":[10839,10873]},{"content":"Parameters","pos":[10983,10993]},{"content":"The key value to search for.","pos":[11007,11035]},{"content":"Return Value","pos":[11045,11057]},{"pos":[11061,11204],"content":"An iterator pointing to the location of the the first element that matched the key provided, or the iterator <ph id=\"ph1\">`end()`</ph> if no such element exists.","source":"An iterator pointing to the location of the the first element that matched the key provided, or the iterator `end()` if no such element exists."},{"pos":[11244,11295],"content":"concurrent_unordered_multimap::get_allocator Method"},{"content":"Returns the stored allocator object for this concurrent container.","pos":[11299,11365]},{"content":"This method is concurrency safe.","pos":[11366,11398]},{"content":"Return Value","pos":[11459,11471]},{"content":"The stored allocator object for this concurrent container.","pos":[11475,11533]},{"pos":[11573,11624],"content":"concurrent_unordered_multimap::hash_function Method"},{"content":"Returns the stored hash function object.","pos":[11628,11668]},{"content":"Return Value","pos":[11721,11733]},{"content":"The stored hash function object.","pos":[11737,11769]},{"pos":[11802,11846],"content":"concurrent_unordered_multimap::insert Method"},{"pos":[11850,11910],"content":"Adds elements to the <ph id=\"ph1\">`concurrent_unordered_multimap`</ph> object.","source":"Adds elements to the `concurrent_unordered_multimap` object."},{"content":"Parameters","pos":[12396,12406]},{"content":"The iterator type used for insertion.","pos":[12425,12462]},{"content":"The type of the value inserted into the map.","pos":[12476,12520]},{"content":"The value to be inserted.","pos":[12538,12563]},{"content":"The starting location to search for an insertion point.","pos":[12582,12637]},{"content":"The beginning of the range to insert.","pos":[12655,12692]},{"content":"The end of the range to insert.","pos":[12709,12740]},{"content":"Return Value","pos":[12750,12762]},{"content":"An iterator pointing to the insertion location.","pos":[12766,12813]},{"content":"Remarks","pos":[12823,12830]},{"pos":[12834,12979],"content":"The first member function inserts the element <ph id=\"ph1\">`value`</ph> in the controlled sequence, then returns the iterator that designates the inserted element.","source":"The first member function inserts the element `value` in the controlled sequence, then returns the iterator that designates the inserted element."},{"pos":[12986,13139],"content":"The second member function returns insert( <ph id=\"ph1\">`value`</ph>), using <ph id=\"ph2\">`_Where`</ph> as a starting place within the controlled sequence to search for the insertion point.","source":"The second member function returns insert( `value`), using `_Where` as a starting place within the controlled sequence to search for the insertion point."},{"pos":[13146,13245],"content":"The third member function inserts the sequence of element values from the range [ <ph id=\"ph1\">`first`</ph>, <ph id=\"ph2\">`last`</ph>).","source":"The third member function inserts the sequence of element values from the range [ `first`, `last`)."},{"pos":[13252,13376],"content":"The last two member functions behave the same as the first two, except that <ph id=\"ph1\">`value`</ph> is used to construct the inserted value.","source":"The last two member functions behave the same as the first two, except that `value` is used to construct the inserted value."},{"pos":[13409,13453],"content":"concurrent_unordered_multimap::key_eq Method"},{"content":"Returns the stored equality comparison function object.","pos":[13457,13512]},{"content":"Return Value","pos":[13561,13573]},{"content":"The stored equality comparison function object.","pos":[13577,13624]},{"pos":[13662,13711],"content":"concurrent_unordered_multimap::load_factor Method"},{"content":"Computes and returns the current load factor of the container.","pos":[13715,13777]},{"content":"The load factor is the number of elements in the container divided by the number of buckets.","pos":[13778,13870]},{"content":"Return Value","pos":[13920,13932]},{"content":"The load factor for the container.","pos":[13936,13970]},{"pos":[14012,14065],"content":"concurrent_unordered_multimap::max_load_factor Method"},{"content":"Gets or sets the maximum load factor of the container.","pos":[14069,14123]},{"content":"The maximum load factor is the largest number of elements than can be in any bucket before the container grows its internal table.","pos":[14124,14254]},{"content":"Parameters","pos":[14346,14356]},{"content":"Return Value","pos":[14379,14391]},{"content":"The first member function returns the stored maximum load factor.","pos":[14395,14460]},{"content":"The second member function does not return a value but throws an <bpt id=\"p1\">[</bpt>out_of_range<ept id=\"p1\">](../../../standard-library/out-of-range-class.md)</ept> exception if the supplied load factor is invalid..","pos":[14461,14640],"source":" The second member function does not return a value but throws an [out_of_range](../../../standard-library/out-of-range-class.md) exception if the supplied load factor is invalid.."},{"pos":[14675,14721],"content":"concurrent_unordered_multimap::max_size Method"},{"content":"Returns the maximum size of the concurrent container, determined by the allocator.","pos":[14725,14807]},{"content":"This method is concurrency safe.","pos":[14808,14840]},{"content":"Return Value","pos":[14891,14903]},{"content":"The maximum number of elements that can be inserted into this concurrent container.","pos":[14907,14990]},{"content":"Remarks","pos":[15000,15007]},{"content":"This upper bound value may actually be higher than what the container can actually hold.","pos":[15011,15099]},{"pos":[15137,15186],"content":"concurrent_unordered_multimap::operator= Operator"},{"content":"Assigns the contents of another <ph id=\"ph1\">`concurrent_unordered_multimap`</ph> object to this one.","pos":[15190,15273],"source":"Assigns the contents of another `concurrent_unordered_multimap` object to this one."},{"content":"This method is not concurrency-safe.","pos":[15274,15310]},{"content":"Parameters","pos":[15503,15513]},{"content":"The source <ph id=\"ph1\">`concurrent_unordered_multimap`</ph> object.","pos":[15528,15578],"source":" The source `concurrent_unordered_multimap` object."},{"content":"Return Value","pos":[15588,15600]},{"pos":[15604,15663],"content":"A reference to this <ph id=\"ph1\">`concurrent_unordered_multimap`</ph> object.","source":"A reference to this `concurrent_unordered_multimap` object."},{"content":"Remarks","pos":[15673,15680]},{"pos":[15684,15854],"content":"After erasing any existing elements in a concurrent unordered multimap, <ph id=\"ph1\">`operator=`</ph> either copies or moves the contents of <ph id=\"ph2\">`_Umap`</ph> into the concurrent unordered multimap.","source":"After erasing any existing elements in a concurrent unordered multimap, `operator=` either copies or moves the contents of `_Umap` into the concurrent unordered multimap."},{"pos":[15887,15931],"content":"concurrent_unordered_multimap::rehash Method"},{"content":"Rebuilds the hash table.","pos":[15935,15959]},{"content":"Parameters","pos":[16015,16025]},{"content":"The desired number of buckets.","pos":[16043,16073]},{"content":"Remarks","pos":[16083,16090]},{"content":"The member function alters the number of buckets to be at least <ph id=\"ph1\">`_Buckets`</ph> and rebuilds the hash table as needed.","pos":[16094,16207],"source":"The member function alters the number of buckets to be at least `_Buckets` and rebuilds the hash table as needed."},{"content":"The number of buckets must be a power of 2.","pos":[16208,16251]},{"content":"If not a power of 2, it will be rounded up to the next largest power of 2.","pos":[16252,16326]},{"pos":[16333,16513],"content":"It throws an <bpt id=\"p1\">[</bpt>out_of_range<ept id=\"p1\">](../../../standard-library/out-of-range-class.md)</ept> exception if the number of buckets is invalid (either 0 or greater than the maximum number of buckets).","source":"It throws an [out_of_range](../../../standard-library/out-of-range-class.md) exception if the number of buckets is invalid (either 0 or greater than the maximum number of buckets)."},{"pos":[16544,16586],"content":"concurrent_unordered_multimap::size Method"},{"content":"Returns the number of elements in this concurrent container.","pos":[16590,16650]},{"content":"This method is concurrency safe.","pos":[16651,16683]},{"content":"Return Value","pos":[16730,16742]},{"content":"The number of items in the container.","pos":[16746,16783]},{"content":"Remarks","pos":[16793,16800]},{"content":"In the presence of concurrent inserts, the number of elements in the concurrent container may change immediately after calling this function, before the return value is even read.","pos":[16804,16983]},{"pos":[17014,17056],"content":"concurrent_unordered_multimap::swap Method"},{"content":"Swaps the contents of two <ph id=\"ph1\">`concurrent_unordered_multimap`</ph> objects.","pos":[17060,17126],"source":"Swaps the contents of two `concurrent_unordered_multimap` objects."},{"content":"This method is not concurrency-safe.","pos":[17127,17163]},{"content":"Parameters","pos":[17235,17245]},{"content":"The <ph id=\"ph1\">`concurrent_unordered_multimap`</ph> object to swap with.","pos":[17260,17316],"source":" The `concurrent_unordered_multimap` object to swap with."},{"pos":[17355,17405],"content":"concurrent_unordered_multimap::unsafe_begin Method"},{"content":"Returns an iterator to the first element in this container for a specific bucket.","pos":[17409,17490]},{"content":"Parameters","pos":[17622,17632]},{"content":"The bucket index.","pos":[17649,17666]},{"content":"Return Value","pos":[17676,17688]},{"content":"An iterator pointing to the beginning of the bucket.","pos":[17692,17744]},{"pos":[17784,17835],"content":"concurrent_unordered_multimap::unsafe_bucket Method"},{"content":"Returns the bucket index that a specific key maps to in this container.","pos":[17839,17910]},{"content":"Parameters","pos":[17986,17996]},{"content":"The element key being searched for.","pos":[18010,18045]},{"content":"Return Value","pos":[18055,18067]},{"content":"The bucket index for the key in this container.","pos":[18071,18118]},{"pos":[18164,18221],"content":"concurrent_unordered_multimap::unsafe_bucket_count Method"},{"content":"Returns the current number of buckets in this container.","pos":[18225,18281]},{"content":"Return Value","pos":[18343,18355]},{"content":"The current number of buckets in this container.","pos":[18359,18407]},{"pos":[18452,18508],"content":"concurrent_unordered_multimap::unsafe_bucket_size Method"},{"content":"Returns the number of items in a specific bucket of this container.","pos":[18512,18579]},{"content":"Parameters","pos":[18651,18661]},{"content":"The bucket to search for.","pos":[18678,18703]},{"content":"Return Value","pos":[18713,18725]},{"content":"The current number of buckets in this container.","pos":[18729,18777]},{"pos":[18817,18868],"content":"concurrent_unordered_multimap::unsafe_cbegin Method"},{"content":"Returns an iterator to the first element in this container for a specific bucket.","pos":[18872,18953]},{"content":"Parameters","pos":[19037,19047]},{"content":"The bucket index.","pos":[19064,19081]},{"content":"Return Value","pos":[19091,19103]},{"content":"An iterator pointing to the beginning of the bucket.","pos":[19107,19159]},{"pos":[19197,19246],"content":"concurrent_unordered_multimap::unsafe_cend Method"},{"content":"Returns an iterator to the location succeeding the last element in a specific bucket.","pos":[19250,19335]},{"content":"Parameters","pos":[19417,19427]},{"content":"The bucket index.","pos":[19444,19461]},{"content":"Return Value","pos":[19471,19483]},{"content":"An iterator pointing to the beginning of the bucket.","pos":[19487,19539]},{"pos":[19576,19624],"content":"concurrent_unordered_multimap::unsafe_end Method"},{"content":"Returns an iterator to the last element in this container for a specific bucket.","pos":[19628,19708]},{"content":"Parameters","pos":[19836,19846]},{"content":"The bucket index.","pos":[19863,19880]},{"content":"Return Value","pos":[19890,19902]},{"content":"An iterator pointing to the end of the bucket.","pos":[19906,19952]},{"pos":[19991,20041],"content":"concurrent_unordered_multimap::unsafe_erase Method"},{"content":"Removes elements from the <ph id=\"ph1\">`concurrent_unordered_multimap`</ph> at specified positions.","pos":[20045,20126],"source":"Removes elements from the `concurrent_unordered_multimap` at specified positions."},{"content":"This method is not concurrency-safe.","pos":[20127,20163]},{"content":"Parameters","pos":[20365,20375]},{"content":"The iterator position to erase from.","pos":[20391,20427]},{"content":"The key value to erase.","pos":[20444,20467]},{"content":"Return Value","pos":[20501,20513]},{"content":"The first two member functions return an iterator that designates the first element remaining beyond any elements removed, or <ph id=\"ph1\">`concurrent_unordered_multimap::end`</ph>() if no such element exists.","pos":[20517,20708],"source":"The first two member functions return an iterator that designates the first element remaining beyond any elements removed, or `concurrent_unordered_multimap::end`() if no such element exists."},{"content":"The third member function returns the number of elements it removes.","pos":[20709,20777]},{"content":"Remarks","pos":[20787,20794]},{"content":"The first member function removes the element of the controlled sequence pointed to by <ph id=\"ph1\">`_Where`</ph>.","pos":[20798,20894],"source":"The first member function removes the element of the controlled sequence pointed to by `_Where`."},{"content":"The second member function removes the elements in the range [ <ph id=\"ph1\">`_Begin`</ph>, <ph id=\"ph2\">`_End`</ph>).","pos":[20895,20976],"source":" The second member function removes the elements in the range [ `_Begin`, `_End`)."},{"pos":[20983,21107],"content":"The third member function removes the elements in the range delimited by <ph id=\"ph1\">`concurrent_unordered_multimap::equal_range`</ph>(KVal).","source":"The third member function removes the elements in the range delimited by `concurrent_unordered_multimap::equal_range`(KVal)."},{"pos":[21157,21218],"content":"concurrent_unordered_multimap::unsafe_max_bucket_count Method"},{"content":"Returns the maximum number of buckets in this container.","pos":[21222,21278]},{"content":"Return Value","pos":[21344,21356]},{"content":"The maximum number of buckets in this container.","pos":[21360,21408]},{"content":"See Also","pos":[21417,21425]},{"content":"concurrency Namespace","pos":[21430,21451]},{"content":"Parallel Containers and Objects","pos":[21484,21515]}],"content":"---\ntitle: \"concurrent_unordered_multimap Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"concurrent_unordered_map/concurrency::concurrent_unordered_multimap\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"concurrent_unordered_multimap class\"\nms.assetid: 4dada5d7-15df-4382-b9c9-348e75b2f3c1\ncaps.latest.revision: 12\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# concurrent_unordered_multimap Class\nThe `concurrent_unordered_multimap` class is an concurrency-safe container that controls a varying-length sequence of elements of type `std::pair<const K, _Element_type>`. The sequence is represented in a way that enables concurrency-safe append, element access, iterator access and iterator traversal operations.  \n  \n## Syntax  \n  \n```\ntemplate <typename K,\n    typename _Element_type,\n    typename _Hasher = std::tr1::hash<K>,\n    typename key_equality = std::equal_to<K>,\n    typename _Allocator_type = std::allocator<std::pair<const K,\n    _Element_type>>\n>,\n typename key_equality = std::equal_to<K>,\n    typename _Allocator_type = std::allocator<std::pair<const K,\n    _Element_type>>> class concurrent_unordered_multimap : public details::_Concurrent_hash<details::_Concurrent_unordered_map_traits<K,\n    _Element_type,\n details::_Hash_compare<K,\n    _Hasher,\n key_equality>,\n    _Allocator_type,\n true>>;\n```  \n  \n#### Parameters  \n `K`  \n The key type.  \n  \n `_Element_type`  \n The mapped type.  \n  \n `_Hasher`  \n The hash function object type. This argument is optional and the default value is `std::tr1::hash<``K``>`.  \n  \n `key_equality`  \n The equality comparison function object type. This argument is optional and the default value is `std::equal_to<``K``>`.  \n  \n `_Allocator_type`  \n The type that represents the stored allocator object that encapsulates details about the allocation and deallocation of memory for the concurrent vector. This argument is optional and the default value is `std::allocator<std::pair<``K`, `_Element_type``>>`.  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`allocator_type`|The type of an allocator for managing storage.|  \n|`const_iterator`|The type of a constant iterator for the controlled sequence.|  \n|`const_local_iterator`|The type of a constant bucket iterator for the controlled sequence.|  \n|`const_pointer`|The type of a constant pointer to an element.|  \n|`const_reference`|The type of a constant reference to an element.|  \n|`difference_type`|The type of a signed distance between two elements.|  \n|`hasher`|The type of the hash function.|  \n|`iterator`|The type of an iterator for the controlled sequence.|  \n|`key_equal`|The type of the comparison function.|  \n|`key_type`|The type of an ordering key.|  \n|`local_iterator`|The type of a bucket iterator for the controlled sequence.|  \n|`mapped_type`|The type of a mapped value associated with each key.|  \n|`pointer`|The type of a pointer to an element.|  \n|`reference`|The type of a reference to an element.|  \n|`size_type`|The type of an unsigned distance between two elements.|  \n|`value_type`|The type of an element.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[concurrent_unordered_multimap::concurrent_unordered_multimap Constructor](#ctor)|Overloaded. Constructs a concurrent unordered multimap.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[concurrent_unordered_multimap::hash_function Method](#hash_function)|Returns the stored hash function object.|  \n|[concurrent_unordered_multimap::insert Method](#insert)|Overloaded. Adds elements to the `concurrent_unordered_multimap` object.|  \n|[concurrent_unordered_multimap::key_eq Method](#key_eq)|Returns the stored equality comparison function object.|  \n|[concurrent_unordered_multimap::swap Method](#swap)|Swaps the contents of two `concurrent_unordered_multimap` objects. This method is not concurrency-safe.|  \n|[concurrent_unordered_multimap::unsafe_erase Method](#unsafe_erase)|Overloaded. Removes elements from the `concurrent_unordered_multimap` at specified positions. This method is not concurrency-safe.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[concurrent_unordered_multimap::operator= Operator](#operator_eq)|Overloaded. Assigns the contents of another `concurrent_unordered_multimap` object to this one. This method is not concurrency-safe.|  \n  \n## Remarks  \n For detailed information on the `concurrent_unordered_multimap` class, see [Parallel Containers and Objects](../../../parallel/concrt/parallel-containers-and-objects.md).  \n  \n## Inheritance Hierarchy  \n `_Traits`  \n  \n `_Concurrent_hash`  \n  \n `concurrent_unordered_multimap`  \n  \n## Requirements  \n **Header:** concurrent_unordered_map.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"begin\"></a>  concurrent_unordered_multimap::begin Method  \n Returns an iterator pointing to the first element in the concurrent container. This method is concurrency safe.  \n  \n```\niterator begin();\n\nconst_iterator begin() const;\n```  \n  \n### Return Value  \n An iterator to the first element in the concurrent container.  \n  \n##  <a name=\"cbegin\"></a>  concurrent_unordered_multimap::cbegin Method  \n Returns a const iterator pointing to the first element in the concurrent container. This method is concurrency safe.  \n  \n```\nconst_iterator cbegin() const;\n```  \n  \n### Return Value  \n A const iterator to the first element in the concurrent container.  \n  \n##  <a name=\"cend\"></a>  concurrent_unordered_multimap::cend Method  \n Returns a const iterator pointing to the location succeeding the last element in the concurrent container. This method is concurrency safe.  \n  \n```\nconst_iterator cend() const;\n```  \n  \n### Return Value  \n A const iterator to the location succeeding the last element in the concurrent container.  \n  \n##  <a name=\"clear\"></a>  concurrent_unordered_multimap::clear Method  \n Erases all the elements in the concurrent container. This function is not concurrency safe.  \n  \n```\nvoid clear();\n```  \n  \n##  <a name=\"ctor\"></a>  concurrent_unordered_multimap::concurrent_unordered_multimap Constructor  \n Constructs a concurrent unordered multimap.  \n  \n```\nexplicit concurrent_unordered_multimap(\n    size_type _Number_of_buckets = 8,\n    const hasher& _Hasher = hasher(),\n    const key_equal& key_equality = key_equal(),\n    const allocator_type& _Allocator = allocator_type());\n\nconcurrent_unordered_multimap(\n    const allocator_type& _Allocator);\n\ntemplate <typename _Iterator>\nconcurrent_unordered_multimap(_Iterator _Begin,\n    _Iterator _End,\n    size_type _Number_of_buckets = 8,\n    const hasher& _Hasher = hasher(),\n    const key_equal& key_equality = key_equal(),\n    const allocator_type& _Allocator = allocator_type());\n\nconcurrent_unordered_multimap(\n    const concurrent_unordered_multimap& _Umap);\n\nconcurrent_unordered_multimap(\n    const concurrent_unordered_multimap& _Umap,\n    const allocator_type& _Allocator);\n\nconcurrent_unordered_multimap(\n    concurrent_unordered_multimap&& _Umap);\n```  \n  \n### Parameters  \n `_Iterator`  \n The type of the input iterator.  \n  \n `_Number_of_buckets`  \n The initial number of buckets for this unordered multimap.  \n  \n `_Hasher`  \n The hash function for this unordered multimap.  \n  \n `key_equality`  \n The equality comparison function for this unordered multimap.  \n  \n `_Allocator`  \n The allocator for this unordered multimap.  \n  \n `_Begin`  \n The position of the first element in the range of elements to be copied.  \n  \n `_End`  \n The position of the first element beyond the range of elements to be copied.  \n  \n `_Umap`  \n The source `concurrent_unordered_multimap` object to copy elements from.  \n  \n### Remarks  \n All constructors store an allocator object `_Allocator` and initialize the unordered multimap.  \n  \n The first constructor specifies an empty initial multimap and explicitly specifies the number of buckets, hash function, equality function and allocator type to be used.  \n  \n The second constructor specifies an allocator for the unordered multimap.  \n  \n The third constructor specifies values supplied by the iterator range [ `_Begin`, `_End`).  \n  \n The fourth and fifth constructors specify a copy of the concurrent unordered multimap `_Umap`.  \n  \n The last constructor specifies a move of the concurrent unordered multimap `_Umap`.  \n  \n##  <a name=\"count\"></a>  concurrent_unordered_multimap::count Method  \n Counts the number of elements matching a specified key. This function is concurrency safe.  \n  \n```\nsize_type count(const key_type& KVal) const;\n```  \n  \n### Parameters  \n `KVal`  \n The key to search for.  \n  \n### Return Value  \n The number of times number of times the key appears in the container.  \n  \n##  <a name=\"empty\"></a>  concurrent_unordered_multimap::empty Method  \n Tests whether no elements are present. This method is concurrency safe.  \n  \n```\nbool empty() const;\n```  \n  \n### Return Value  \n `true` if the concurrent container is empty, `false` otherwise.  \n  \n### Remarks  \n In the presence of concurrent inserts, whether or not the concurrent container is empty may change immediately after calling this function, before the return value is even read.  \n  \n##  <a name=\"end\"></a>  concurrent_unordered_multimap::end Method  \n Returns an iterator pointing to the location succeeding the last element in the concurrent container. This method is concurrency safe.  \n  \n```\niterator end();\n\nconst_iterator end() const;\n```  \n  \n### Return Value  \n An iterator to the location succeeding the last element in the concurrent container.  \n  \n##  <a name=\"equal_range\"></a>  concurrent_unordered_multimap::equal_range Method  \n Finds a range that matches a specified key. This function is concurrency safe.  \n  \n```\nstd::pair<iterator,\n    iterator> equal_range(\n    const key_type& KVal);\n\nstd::pair<const_iterator,\n    const_iterator> equal_range(\n    const key_type& KVal) const;\n```  \n  \n### Parameters  \n `KVal`  \n The key value to search for.  \n  \n### Return Value  \n A [pair](http://msdn.microsoft.com/en-us/32e72d66-3020-4cb9-92c3-f7a5fa7998ff) where the first element is an iterator to the beginning and the second element is an iterator to the end of the range.  \n  \n### Remarks  \n It is possible for concurrent inserts to cause additional keys to be inserted after the begin iterator and before the end iterator.  \n  \n##  <a name=\"find\"></a>  concurrent_unordered_multimap::find Method  \n Finds an element that matches a specified key. This function is concurrency safe.  \n  \n```\niterator find(const key_type& KVal);\n\nconst_iterator find(const key_type& KVal) const;\n```  \n  \n### Parameters  \n `KVal`  \n The key value to search for.  \n  \n### Return Value  \n An iterator pointing to the location of the the first element that matched the key provided, or the iterator `end()` if no such element exists.  \n  \n##  <a name=\"get_allocator\"></a>  concurrent_unordered_multimap::get_allocator Method  \n Returns the stored allocator object for this concurrent container. This method is concurrency safe.  \n  \n```\nallocator_type get_allocator() const;\n```  \n  \n### Return Value  \n The stored allocator object for this concurrent container.  \n  \n##  <a name=\"hash_function\"></a>  concurrent_unordered_multimap::hash_function Method  \n Returns the stored hash function object.  \n  \n```\nhasher hash_function() const;\n```  \n  \n### Return Value  \n The stored hash function object.  \n  \n##  <a name=\"insert\"></a>  concurrent_unordered_multimap::insert Method  \n Adds elements to the `concurrent_unordered_multimap` object.  \n  \n```\niterator insert(\n    const value_type& value);\n\niterator insert(\n    const_iterator _Where,\n    const value_type& value);\n\ntemplate<class _Iterator>\nvoid insert(_Iterator first,\n    _Iterator last);\n\ntemplate<class V>\niterator insert(\n    V&& value);\n\ntemplate<class V>\ntypename std::tr1::enable_if<!std::tr1::is_same<const_iterator,\n    typename std::tr1::remove_reference<V>::type>::value,\n    iterator>::type insert(\n    const_iterator _Where,\n    V&& value);\n```  \n  \n### Parameters  \n `_Iterator`  \n The iterator type used for insertion.  \n  \n `V`  \n The type of the value inserted into the map.  \n  \n `value`  \n The value to be inserted.  \n  \n `_Where`  \n The starting location to search for an insertion point.  \n  \n `first`  \n The beginning of the range to insert.  \n  \n `last`  \n The end of the range to insert.  \n  \n### Return Value  \n An iterator pointing to the insertion location.  \n  \n### Remarks  \n The first member function inserts the element `value` in the controlled sequence, then returns the iterator that designates the inserted element.  \n  \n The second member function returns insert( `value`), using `_Where` as a starting place within the controlled sequence to search for the insertion point.  \n  \n The third member function inserts the sequence of element values from the range [ `first`, `last`).  \n  \n The last two member functions behave the same as the first two, except that `value` is used to construct the inserted value.  \n  \n##  <a name=\"key_eq\"></a>  concurrent_unordered_multimap::key_eq Method  \n Returns the stored equality comparison function object.  \n  \n```\nkey_equal key_eq() const;\n```  \n  \n### Return Value  \n The stored equality comparison function object.  \n  \n##  <a name=\"load_factor\"></a>  concurrent_unordered_multimap::load_factor Method  \n Computes and returns the current load factor of the container. The load factor is the number of elements in the container divided by the number of buckets.  \n  \n```\nfloat load_factor() const;\n```  \n  \n### Return Value  \n The load factor for the container.  \n  \n##  <a name=\"max_load_factor\"></a>  concurrent_unordered_multimap::max_load_factor Method  \n Gets or sets the maximum load factor of the container. The maximum load factor is the largest number of elements than can be in any bucket before the container grows its internal table.  \n  \n```\nfloat max_load_factor() const;\n\nvoid max_load_factor(float _Newmax);\n```  \n  \n### Parameters  \n `_Newmax`  \n  \n### Return Value  \n The first member function returns the stored maximum load factor. The second member function does not return a value but throws an [out_of_range](../../../standard-library/out-of-range-class.md) exception if the supplied load factor is invalid..  \n  \n##  <a name=\"max_size\"></a>  concurrent_unordered_multimap::max_size Method  \n Returns the maximum size of the concurrent container, determined by the allocator. This method is concurrency safe.  \n  \n```\nsize_type max_size() const;\n```  \n  \n### Return Value  \n The maximum number of elements that can be inserted into this concurrent container.  \n  \n### Remarks  \n This upper bound value may actually be higher than what the container can actually hold.  \n  \n##  <a name=\"operator_eq\"></a>  concurrent_unordered_multimap::operator= Operator  \n Assigns the contents of another `concurrent_unordered_multimap` object to this one. This method is not concurrency-safe.  \n  \n```\nconcurrent_unordered_multimap& operator= (const concurrent_unordered_multimap& _Umap);\n\nconcurrent_unordered_multimap& operator= (concurrent_unordered_multimap&& _Umap);\n```  \n  \n### Parameters  \n `_Umap`  \n The source `concurrent_unordered_multimap` object.  \n  \n### Return Value  \n A reference to this `concurrent_unordered_multimap` object.  \n  \n### Remarks  \n After erasing any existing elements in a concurrent unordered multimap, `operator=` either copies or moves the contents of `_Umap` into the concurrent unordered multimap.  \n  \n##  <a name=\"rehash\"></a>  concurrent_unordered_multimap::rehash Method  \n Rebuilds the hash table.  \n  \n```\nvoid rehash(size_type _Buckets);\n```  \n  \n### Parameters  \n `_Buckets`  \n The desired number of buckets.  \n  \n### Remarks  \n The member function alters the number of buckets to be at least `_Buckets` and rebuilds the hash table as needed. The number of buckets must be a power of 2. If not a power of 2, it will be rounded up to the next largest power of 2.  \n  \n It throws an [out_of_range](../../../standard-library/out-of-range-class.md) exception if the number of buckets is invalid (either 0 or greater than the maximum number of buckets).  \n  \n##  <a name=\"size\"></a>  concurrent_unordered_multimap::size Method  \n Returns the number of elements in this concurrent container. This method is concurrency safe.  \n  \n```\nsize_type size() const;\n```  \n  \n### Return Value  \n The number of items in the container.  \n  \n### Remarks  \n In the presence of concurrent inserts, the number of elements in the concurrent container may change immediately after calling this function, before the return value is even read.  \n  \n##  <a name=\"swap\"></a>  concurrent_unordered_multimap::swap Method  \n Swaps the contents of two `concurrent_unordered_multimap` objects. This method is not concurrency-safe.  \n  \n```\nvoid swap(concurrent_unordered_multimap& _Umap);\n```  \n  \n### Parameters  \n `_Umap`  \n The `concurrent_unordered_multimap` object to swap with.  \n  \n##  <a name=\"unsafe_begin\"></a>  concurrent_unordered_multimap::unsafe_begin Method  \n Returns an iterator to the first element in this container for a specific bucket.  \n  \n```\nlocal_iterator unsafe_begin(size_type _Bucket);\n\nconst_local_iterator unsafe_begin(size_type _Bucket) const;\n```  \n  \n### Parameters  \n `_Bucket`  \n The bucket index.  \n  \n### Return Value  \n An iterator pointing to the beginning of the bucket.  \n  \n##  <a name=\"unsafe_bucket\"></a>  concurrent_unordered_multimap::unsafe_bucket Method  \n Returns the bucket index that a specific key maps to in this container.  \n  \n```\nsize_type unsafe_bucket(const key_type& KVal) const;\n```  \n  \n### Parameters  \n `KVal`  \n The element key being searched for.  \n  \n### Return Value  \n The bucket index for the key in this container.  \n  \n##  <a name=\"unsafe_bucket_count\"></a>  concurrent_unordered_multimap::unsafe_bucket_count Method  \n Returns the current number of buckets in this container.  \n  \n```\nsize_type unsafe_bucket_count() const;\n```  \n  \n### Return Value  \n The current number of buckets in this container.  \n  \n##  <a name=\"unsafe_bucket_size\"></a>  concurrent_unordered_multimap::unsafe_bucket_size Method  \n Returns the number of items in a specific bucket of this container.  \n  \n```\nsize_type unsafe_bucket_size(size_type _Bucket);\n```  \n  \n### Parameters  \n `_Bucket`  \n The bucket to search for.  \n  \n### Return Value  \n The current number of buckets in this container.  \n  \n##  <a name=\"unsafe_cbegin\"></a>  concurrent_unordered_multimap::unsafe_cbegin Method  \n Returns an iterator to the first element in this container for a specific bucket.  \n  \n```\nconst_local_iterator unsafe_cbegin(size_type _Bucket) const;\n```  \n  \n### Parameters  \n `_Bucket`  \n The bucket index.  \n  \n### Return Value  \n An iterator pointing to the beginning of the bucket.  \n  \n##  <a name=\"unsafe_cend\"></a>  concurrent_unordered_multimap::unsafe_cend Method  \n Returns an iterator to the location succeeding the last element in a specific bucket.  \n  \n```\nconst_local_iterator unsafe_cend(size_type _Bucket) const;\n```  \n  \n### Parameters  \n `_Bucket`  \n The bucket index.  \n  \n### Return Value  \n An iterator pointing to the beginning of the bucket.  \n  \n##  <a name=\"unsafe_end\"></a>  concurrent_unordered_multimap::unsafe_end Method  \n Returns an iterator to the last element in this container for a specific bucket.  \n  \n```\nlocal_iterator unsafe_end(size_type _Bucket);\n\nconst_local_iterator unsafe_end(size_type _Bucket) const;\n```  \n  \n### Parameters  \n `_Bucket`  \n The bucket index.  \n  \n### Return Value  \n An iterator pointing to the end of the bucket.  \n  \n##  <a name=\"unsafe_erase\"></a>  concurrent_unordered_multimap::unsafe_erase Method  \n Removes elements from the `concurrent_unordered_multimap` at specified positions. This method is not concurrency-safe.  \n  \n```\niterator unsafe_erase(\n    const_iterator _Where);\n\nsize_type unsafe_erase(\n    const key_type& KVal);\n\niterator unsafe_erase(\n    const_iterator first,\n    const_iterator last);\n```  \n  \n### Parameters  \n `_Where`  \n The iterator position to erase from.  \n  \n `KVal`  \n The key value to erase.  \n  \n `first`  \n `last`  \n  \n### Return Value  \n The first two member functions return an iterator that designates the first element remaining beyond any elements removed, or `concurrent_unordered_multimap::end`() if no such element exists. The third member function returns the number of elements it removes.  \n  \n### Remarks  \n The first member function removes the element of the controlled sequence pointed to by `_Where`. The second member function removes the elements in the range [ `_Begin`, `_End`).  \n  \n The third member function removes the elements in the range delimited by `concurrent_unordered_multimap::equal_range`(KVal).  \n  \n##  <a name=\"unsafe_max_bucket_count\"></a>  concurrent_unordered_multimap::unsafe_max_bucket_count Method  \n Returns the maximum number of buckets in this container.  \n  \n```\nsize_type unsafe_max_bucket_count() const;\n```  \n  \n### Return Value  \n The maximum number of buckets in this container.  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)   \n [Parallel Containers and Objects](../../../parallel/concrt/parallel-containers-and-objects.md)\n\n\n\n"}