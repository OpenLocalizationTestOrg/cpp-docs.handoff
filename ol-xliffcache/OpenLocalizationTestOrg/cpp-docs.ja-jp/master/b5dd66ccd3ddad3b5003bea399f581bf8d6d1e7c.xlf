<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b5dd66ccd3ddad3b5003bea399f581bf8d6d1e7c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\debugging-and-error-reporting-global-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">980dc0cb672a8ef6ffd3dbc038de5c625c212aa4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c4fe47d863b597fcc2918b37c101b89547e66241</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Debugging and Error Reporting Global Functions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Debugging and Error Reporting Global Functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>These functions provide useful debugging and trace facilities.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>AtlHresultFromLastError</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`GetLastError`</ph> error code in the form of an HRESULT.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>AtlHresultFromWin32</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Converts a Win32 error code into an HRESULT.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>AtlReportError</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Sets up <bpt id="p1">**</bpt>IErrorInfo<ept id="p1">**</ept> to provide error details to a client.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>AtlThrow</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Throws a <ph id="ph1">`CAtlException`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>AtlThrowLastWin32</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Call this function to signal an error based on the result of the Windows function <ph id="ph1">`GetLastError`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>AtlHresultFromLastError</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Returns the calling thread's last-error code value in the form of an HRESULT.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>calls <ph id="ph1">`GetLastError`</ph> to obtain the last error and returns the error after converting it to an HRESULT using the <bpt id="p1">**</bpt>HRESULT_FROM_WIN32<ept id="p1">**</ept> macro.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>AtlHresultFromWin32</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Converts a Win32 error code into an HRESULT.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>error</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The error value to convert.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Converts a Win32 error code into an HRESULT, using the macro <bpt id="p1">**</bpt>HRESULT_FROM_WIN32<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Instead of using <bpt id="p1">**</bpt>HRESULT_FROM_WIN32(GetLastError())<ept id="p1">**</ept>, use the function <bpt id="p2">[</bpt>AtlHresultFromLastError<ept id="p2">](http://msdn.microsoft.com/library/74530d7d-3c91-484c-acf3-aff755715d66)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>AtlReportError</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Sets up the <ph id="ph1">`IErrorInfo`</ph> interface to provide error information to clients of the object.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>[in] The CLSID of the object reporting the error.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>[in] The string describing the error.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The Unicode versions specify that <ph id="ph1">`lpszDesc`</ph> is of type <bpt id="p1">**</bpt>LPCOLESTR<ept id="p1">**</ept>; the ANSI version specifies a type of <ph id="ph2">`LPCSTR`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>[in] The IID of the interface defining the error or <ph id="ph1">`GUID_NULL`</ph> if the error is defined by the operating system.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>[in] The <ph id="ph1">`HRESULT`</ph> you want returned to the caller.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>[in] The resource identifier where the error description string is stored.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This value should lie between 0x0200 and 0xFFFF, inclusively.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In debug builds, an <bpt id="p1">**</bpt>ASSERT<ept id="p1">**</ept> will result if <ph id="ph1">`nID`</ph> does not index a valid string.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In release builds, the error description string will be set to "Unknown Error."</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>[in] The help context identifier for the error.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>[in] The path and name of the help file describing the error.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>[in] The handle to the resource.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>By default, this parameter is <bpt id="p1">**</bpt>__AtlBaseModuleModule::GetResourceInstance<ept id="p1">**</ept>, where <bpt id="p2">**</bpt>__AtlBaseModuleModule<ept id="p2">**</ept> is the global instance of <bpt id="p3">[</bpt>CAtlBaseModule<ept id="p3">](../../atl/reference/catlbasemodule-class.md)</ept> or a class derived from it.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`hRes`</ph> parameter is nonzero, returns the value of <ph id="ph2">`hRes`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`hRes`</ph> is zero, then the first four versions of <ph id="ph2">`AtlReportError`</ph> return <ph id="ph3">`DISP_E_EXCEPTION`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The last two versions return the result of the macro <bpt id="p1">**</bpt>MAKE_HRESULT( 1, FACILITY_ITF,<ept id="p1">**</ept> <ph id="ph1">`nID`</ph> <bpt id="p2">**</bpt>)<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The string <bpt id="p1">*</bpt>lpszDesc<ept id="p1">*</ept> is used as the text description of the error.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When the client receives the <ph id="ph1">`hRes`</ph> you return from <ph id="ph2">`AtlReportError`</ph>, the client can access the <bpt id="p1">**</bpt>IErrorInfo<ept id="p1">**</ept> structure for details about the error.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>NVC_ATL_COM#52</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Do not use <ph id="ph1">`AtlReportError`</ph> in C++ catch handlers.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Some overrides of these functions use the ATL string conversion macros internally, which in turn use the <ph id="ph1">`_alloca`</ph> function internally.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`AtlReportError`</ph> in a C++ catch handler can cause exceptions in C++ catch handlers.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>AtlThrow</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Call this function to signal an error based on a <ph id="ph1">`HRESULT`</ph> status code.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Standard HRESULT value.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This function is used by ATL and MFC code in the event of an error condition.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>It can also be called from your own code.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The default implementation of this function depends on the definition of the symbol <bpt id="p1">**</bpt>_ATL_NO_EXCEPTIONS<ept id="p1">**</ept> and on the type of project, MFC or ATL.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In all cases, this function traces the HRESULT to the debugger.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In Visual Studio 2015 Update 3 and later, this function is attributed __declspec(noreturn) to avoid spurious SAL warnings.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>_ATL_NO_EXCEPTIONS<ept id="p1">**</ept> is not defined in an MFC project, this function throws a <bpt id="p2">[</bpt>CMemoryException<ept id="p2">](../../mfc/reference/cmemoryexception-class.md)</ept> or a <bpt id="p3">[</bpt>COleException<ept id="p3">](../../mfc/reference/coleexception-class.md)</ept> based on the value of the HRESULT.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>_ATL_NO_EXCEPTIONS<ept id="p1">**</ept> is not defined in an ATL project, the function throws a <bpt id="p2">[</bpt>CAtlException<ept id="p2">](../../atl/reference/catlexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>_ATL_NO_EXCEPTIONS<ept id="p1">**</ept> is defined, the function causes an assertion failure instead of throwing an exception.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For ATL projects, it is possible to provide your own implementation of this function to be used by ATL in the event of a failure.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>To do this, define your own function with the same signature as <ph id="ph1">`AtlThrow`</ph> and #define <ph id="ph2">`AtlThrow`</ph> to be the name of your function.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This must be done before including atlexcept.h (which means that it must be done prior to including any ATL headers since atlbase.h includes atlexcept.h).</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Attribute your function <ph id="ph1">`__declspec(noreturn)`</ph> to avoid spurious SAL warnings.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#95</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>AtlThrowLastWin32</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Call this function to signal an error based on the result of the Windows function <ph id="ph1">`GetLastError`</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This function traces the result of <ph id="ph1">`GetLastError`</ph> to the debugger.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>_ATL_NO_EXCEPTIONS<ept id="p1">**</ept> is not defined in an MFC project, this function throws a <bpt id="p2">[</bpt>CMemoryException<ept id="p2">](../../mfc/reference/cmemoryexception-class.md)</ept> or a <bpt id="p3">[</bpt>COleException<ept id="p3">](../../mfc/reference/coleexception-class.md)</ept> based on the value returned by <ph id="ph1">`GetLastError`</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>_ATL_NO_EXCEPTIONS<ept id="p1">**</ept> is not defined in an ATL project, the function throws a <bpt id="p2">[</bpt>CAtlException<ept id="p2">](../../atl/reference/catlexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>_ATL_NO_EXCEPTIONS<ept id="p1">**</ept> is defined, the function causes an assertion failure instead of throwing an exception.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Functions</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Debugging and Error Reporting Macros</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>