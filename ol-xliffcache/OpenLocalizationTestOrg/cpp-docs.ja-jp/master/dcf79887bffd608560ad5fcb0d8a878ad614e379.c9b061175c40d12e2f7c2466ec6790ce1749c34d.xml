{"nodes":[{"pos":[12,49],"content":"Transfers of Control | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Transfers of Control | Microsoft Docs","pos":[0,37]}]},{"content":"Transfers of Control","pos":[633,653]},{"content":"You can use the <ph id=\"ph1\">`goto`</ph> statement or a <bpt id=\"p1\">**</bpt>case<ept id=\"p1\">**</ept> label in a <ph id=\"ph2\">`switch`</ph> statement to specify a program that branches past an initializer.","pos":[654,786],"source":"You can use the `goto` statement or a **case** label in a `switch` statement to specify a program that branches past an initializer."},{"content":"Such code is illegal unless the declaration that contains the initializer is in a block enclosed by the block in which the jump statement occurs.","pos":[787,932]},{"content":"The following example shows a loop that declares and initializes the objects <ph id=\"ph1\">`total`</ph>, <ph id=\"ph2\">`ch`</ph>, and <ph id=\"ph3\">`i`</ph>.","pos":[939,1039],"source":"The following example shows a loop that declares and initializes the objects `total`, `ch`, and `i`."},{"content":"There is also an erroneous <ph id=\"ph1\">`goto`</ph> statement that transfers control past an initializer.","pos":[1040,1127],"source":" There is also an erroneous `goto` statement that transfers control past an initializer."},{"content":"In the preceding example, the <ph id=\"ph1\">`goto`</ph> statement tries to transfer control past the initialization of <ph id=\"ph2\">`i`</ph>.","pos":[1811,1915],"source":"In the preceding example, the `goto` statement tries to transfer control past the initialization of `i`."},{"content":"However, if <ph id=\"ph1\">`i`</ph> were declared but not initialized, the transfer would be legal.","pos":[1916,1995],"source":" However, if `i` were declared but not initialized, the transfer would be legal."},{"pos":[2002,2179],"content":"The objects <ph id=\"ph1\">`total`</ph> and <ph id=\"ph2\">`ch`</ph>, declared in the block that serves as the <bpt id=\"p1\">*</bpt>statement<ept id=\"p1\">*</ept> of the <ph id=\"ph3\">`while`</ph> statement, are destroyed when that block is exited using the <ph id=\"ph4\">`break`</ph> statement.","source":"The objects `total` and `ch`, declared in the block that serves as the *statement* of the `while` statement, are destroyed when that block is exited using the `break` statement."}],"content":"---\ntitle: \"Transfers of Control | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"control flow, branching\"\n  - \"control flow, transferring control\"\nms.assetid: aa51e7f2-060f-4106-b0fe-331f04357423\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Transfers of Control\nYou can use the `goto` statement or a **case** label in a `switch` statement to specify a program that branches past an initializer. Such code is illegal unless the declaration that contains the initializer is in a block enclosed by the block in which the jump statement occurs.  \n  \n The following example shows a loop that declares and initializes the objects `total`, `ch`, and `i`. There is also an erroneous `goto` statement that transfers control past an initializer.  \n  \n```  \n// transfers_of_control.cpp  \n// compile with: /W1  \n// Read input until a nonnumeric character is entered.  \nint main()  \n{  \n   char MyArray[5] = {'2','2','a','c'};  \n   int i = 0;  \n   while( 1 )  \n   {  \n      int total = 0;  \n  \n      char ch = MyArray[i++];  \n  \n      if ( ch >= '0' && ch <= '9' )  \n      {  \n         goto Label1;  \n  \n         int i = ch - '0';  \n      Label1:  \n         total += i;   // C4700: transfers past initialization of i.  \n      } // i would be destroyed here if  goto error were not present  \n   else  \n      // Break statement transfers control out of loop,  \n      //  destroying total and ch.  \n      break;  \n   }  \n}  \n```  \n  \n In the preceding example, the `goto` statement tries to transfer control past the initialization of `i`. However, if `i` were declared but not initialized, the transfer would be legal.  \n  \n The objects `total` and `ch`, declared in the block that serves as the *statement* of the `while` statement, are destroyed when that block is exited using the `break` statement.  \n  \n"}