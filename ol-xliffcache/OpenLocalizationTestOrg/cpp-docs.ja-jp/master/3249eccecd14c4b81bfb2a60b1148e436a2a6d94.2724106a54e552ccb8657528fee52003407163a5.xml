{"nodes":[{"pos":[12,36],"content":"finally | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"finally | Microsoft Docs","pos":[0,24]}]},{"content":"finally","pos":[566,573]},{"content":"In addition to <ph id=\"ph1\">`try`</ph> and <ph id=\"ph2\">`catch`</ph> clauses, CLR exception handling supports a <ph id=\"ph3\">`finally`</ph> clause.","pos":[574,667],"source":"In addition to `try` and `catch` clauses, CLR exception handling supports a `finally` clause."},{"content":"The semantics are identical to the <ph id=\"ph1\">`__finally`</ph> block in structured exception handling (SEH).","pos":[668,760],"source":" The semantics are identical to the `__finally` block in structured exception handling (SEH)."},{"content":"A <ph id=\"ph1\">`__finally`</ph> block can follow a <ph id=\"ph2\">`try`</ph> or <ph id=\"ph3\">`catch`</ph> block.","pos":[761,817],"source":" A `__finally` block can follow a `try` or `catch` block."},{"content":"Remarks","pos":[826,833]},{"content":"The purpose of the <ph id=\"ph1\">`finally`</ph> block is to clean up any resources left after the exception occurred.","pos":[837,935],"source":"The purpose of the `finally` block is to clean up any resources left after the exception occurred."},{"content":"Note that the <ph id=\"ph1\">`finally`</ph> block is always executed, even if no exception was thrown.","pos":[936,1018],"source":" Note that the `finally` block is always executed, even if no exception was thrown."},{"content":"The <ph id=\"ph1\">`catch`</ph> block is only executed if a managed exception is thrown within the associated <ph id=\"ph2\">`try`</ph> block.","pos":[1019,1121],"source":" The `catch` block is only executed if a managed exception is thrown within the associated `try` block."},{"pos":[1138,1291],"content":"is a context-sensitive keyword; see <bpt id=\"p1\">[</bpt>Context-Sensitive Keywords<ept id=\"p1\">](../windows/context-sensitive-keywords-cpp-component-extensions.md)</ept> for more information.","source":" is a context-sensitive keyword; see [Context-Sensitive Keywords](../windows/context-sensitive-keywords-cpp-component-extensions.md) for more information."},{"content":"Example","pos":[1300,1307]},{"pos":[1311,1371],"content":"The following example demonstrates a simple <ph id=\"ph1\">`finally`</ph> block:","source":"The following example demonstrates a simple `finally` block:"},{"content":"See Also","pos":[1912,1920]},{"content":"Exception Handling","pos":[1925,1943]}],"content":"---\ntitle: \"finally | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"finally keyword [C++]\"\nms.assetid: b55f3c8e-1af0-43e8-bcfb-99c3685d2578\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# finally\nIn addition to `try` and `catch` clauses, CLR exception handling supports a `finally` clause. The semantics are identical to the `__finally` block in structured exception handling (SEH). A `__finally` block can follow a `try` or `catch` block.  \n  \n## Remarks  \n The purpose of the `finally` block is to clean up any resources left after the exception occurred. Note that the `finally` block is always executed, even if no exception was thrown. The `catch` block is only executed if a managed exception is thrown within the associated `try` block.  \n  \n `finally` is a context-sensitive keyword; see [Context-Sensitive Keywords](../windows/context-sensitive-keywords-cpp-component-extensions.md) for more information.  \n  \n## Example  \n The following example demonstrates a simple `finally` block:  \n  \n```  \n// keyword__finally.cpp  \n// compile with: /clr  \nusing namespace System;  \n  \nref class MyException: public System::Exception{};  \n  \nvoid ThrowMyException() {  \n   throw gcnew MyException;  \n}  \n  \nint main() {  \n   try {  \n      ThrowMyException();  \n   }  \n   catch ( MyException^ e ) {  \n      Console::WriteLine(  \"in catch\" );  \n      Console::WriteLine( e->GetType() );  \n   }  \n   finally {  \n      Console::WriteLine(  \"in finally\" );  \n   }  \n}  \n```  \n  \n```Output  \nin catch  \nMyException  \nin finally  \n```  \n  \n## See Also  \n [Exception Handling](../windows/exception-handling-cpp-component-extensions.md)"}