{"nodes":[{"pos":[12,53],"content":"Explicit Overrides (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Explicit Overrides (C++) | Microsoft Docs","pos":[0,41]}]},{"content":"Explicit Overrides (C++)","pos":[766,790]},{"content":"Microsoft Specific","pos":[793,811]},{"pos":[820,1009],"content":"If the same virtual function is declared in two or more <bpt id=\"p1\">[</bpt>interfaces<ept id=\"p1\">](../cpp/interface.md)</ept> and if a class is derived from these interfaces, you can explicitly override each virtual function.","source":"If the same virtual function is declared in two or more [interfaces](../cpp/interface.md) and if a class is derived from these interfaces, you can explicitly override each virtual function."},{"pos":[1016,1184],"content":"For information on explicit overrides in managed code using the new managed syntax, see <bpt id=\"p1\">[</bpt>Explicit Overrides<ept id=\"p1\">](../windows/explicit-overrides-cpp-component-extensions.md)</ept>.","source":"For information on explicit overrides in managed code using the new managed syntax, see [Explicit Overrides](../windows/explicit-overrides-cpp-component-extensions.md)."},{"content":"END Microsoft Specific","pos":[1193,1215]},{"content":"Example","pos":[1226,1233]},{"content":"The following code example illustrates how to use explicit overrides:","pos":[1237,1306]},{"content":"See Also","pos":[3290,3298]},{"content":"Inheritance","pos":[3303,3314]}],"content":"---\ntitle: \"Explicit Overrides (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"virtual functions, explicit overrides\"\n  - \"overriding, functions\"\n  - \"derived classes, virtual functions\"\n  - \"explicit virtual function overrides\"\n  - \"explicit override of virtual function\"\nms.assetid: ee583234-5cda-4e90-b55e-3f9fbf079ced\ncaps.latest.revision: 12\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Explicit Overrides (C++)\n**Microsoft Specific**  \n  \n If the same virtual function is declared in two or more [interfaces](../cpp/interface.md) and if a class is derived from these interfaces, you can explicitly override each virtual function.  \n  \n For information on explicit overrides in managed code using the new managed syntax, see [Explicit Overrides](../windows/explicit-overrides-cpp-component-extensions.md).  \n  \n **END Microsoft Specific**  \n  \n## Example  \n The following code example illustrates how to use explicit overrides:  \n  \n```  \n// deriv_ExplicitOverrides.cpp  \n// compile with: /GR  \nextern \"C\" int printf_s(const char *, ...);  \n  \n__interface IMyInt1 {  \n   void mf1();  \n   void mf1(int);  \n   void mf2();  \n   void mf2(int);  \n};  \n  \n__interface IMyInt2 {  \n   void mf1();  \n   void mf1(int);  \n   void mf2();  \n   void mf2(int);  \n};  \n  \nclass CMyClass : public IMyInt1, public IMyInt2 {  \npublic:  \n   void IMyInt1::mf1() {  \n      printf_s(\"In CMyClass::IMyInt1::mf1()\\n\");  \n   }  \n  \n   void IMyInt1::mf1(int) {  \n      printf_s(\"In CMyClass::IMyInt1::mf1(int)\\n\");  \n   }  \n  \n   void IMyInt1::mf2();  \n   void IMyInt1::mf2(int);  \n  \n   void IMyInt2::mf1() {  \n      printf_s(\"In CMyClass::IMyInt2::mf1()\\n\");  \n   }  \n  \n   void IMyInt2::mf1(int) {  \n         printf_s(\"In CMyClass::IMyInt2::mf1(int)\\n\");  \n   }  \n  \n   void IMyInt2::mf2();  \n   void IMyInt2::mf2(int);  \n};  \n  \nvoid CMyClass::IMyInt1::mf2() {  \n   printf_s(\"In CMyClass::IMyInt1::mf2()\\n\");  \n}  \n  \nvoid CMyClass::IMyInt1::mf2(int) {  \n   printf_s(\"In CMyClass::IMyInt1::mf2(int)\\n\");  \n}  \n  \nvoid CMyClass::IMyInt2::mf2() {  \n   printf_s(\"In CMyClass::IMyInt2::mf2()\\n\");  \n}  \n  \nvoid CMyClass::IMyInt2::mf2(int) {  \n   printf_s(\"In CMyClass::IMyInt2::mf2(int)\\n\");  \n}  \n  \nint main() {  \n   IMyInt1 *pIMyInt1 = new CMyClass();  \n   IMyInt2 *pIMyInt2 = dynamic_cast<IMyInt2 *>(pIMyInt1);  \n  \n   pIMyInt1->mf1();  \n   pIMyInt1->mf1(1);  \n   pIMyInt1->mf2();  \n   pIMyInt1->mf2(2);  \n   pIMyInt2->mf1();  \n   pIMyInt2->mf1(3);  \n   pIMyInt2->mf2();  \n   pIMyInt2->mf2(4);  \n  \n   // Cast to a CMyClass pointer so that the destructor gets called  \n      CMyClass *p = dynamic_cast<CMyClass *>(pIMyInt1);  \n      delete p;  \n}  \n```  \n  \n```Output  \nIn CMyClass::IMyInt1::mf1()  \nIn CMyClass::IMyInt1::mf1(int)  \nIn CMyClass::IMyInt1::mf2()  \nIn CMyClass::IMyInt1::mf2(int)  \nIn CMyClass::IMyInt2::mf1()  \nIn CMyClass::IMyInt2::mf1(int)  \nIn CMyClass::IMyInt2::mf2()  \nIn CMyClass::IMyInt2::mf2(int)  \n```  \n  \n## See Also  \n [Inheritance](../cpp/inheritance-cpp.md)"}