{"nodes":[{"pos":[12,45],"content":"_CrtSetAllocHook | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_CrtSetAllocHook | Microsoft Docs","pos":[0,33]}]},{"content":"_CrtSetAllocHook","pos":[982,998]},{"content":"Installs a client-defined allocation function by hooking it into the C run-time debug memory allocation process (debug version only).","pos":[999,1132]},{"content":"Syntax","pos":[1141,1147]},{"content":"Parameters","pos":[1246,1256]},{"content":"New client-defined allocation function to hook into the C run-time debug memory allocation process.","pos":[1275,1374]},{"content":"Return Value","pos":[1383,1395]},{"pos":[1399,1491],"content":"Returns the previously defined allocation hook function, or <ph id=\"ph1\">`NULL`</ph> if <ph id=\"ph2\">`allocHook`</ph> is <ph id=\"ph3\">`NULL`</ph>.","source":"Returns the previously defined allocation hook function, or `NULL` if `allocHook` is `NULL`."},{"content":"Remarks","pos":[1500,1507]},{"content":"allows an application to hook its own allocation function into the C run-time debug library memory allocation process.","pos":[1530,1648]},{"content":"As a result, every call to a debug allocation function to allocate, reallocate, or free a memory block triggers a call to the application's hook function.","pos":[1649,1803]},{"content":"provides an application with an easy method for testing how the application handles insufficient memory situations, the ability to examine allocation patterns, and the opportunity to log allocation information for later analysis.","pos":[1823,2052]},{"content":"When <bpt id=\"p1\">[</bpt>_DEBUG<ept id=\"p1\">](../../c-runtime-library/debug.md)</ept> is not defined, calls to <ph id=\"ph1\">`_CrtSetAllocHook`</ph> are removed during preprocessing.","pos":[2053,2178],"source":" When [_DEBUG](../../c-runtime-library/debug.md) is not defined, calls to `_CrtSetAllocHook` are removed during preprocessing."},{"content":"The <ph id=\"ph1\">`_CrtSetAllocHook`</ph> function installs the new client-defined allocation function specified in <ph id=\"ph2\">`allocHook`</ph> and returns the previously defined hook function.","pos":[2185,2343],"source":"The `_CrtSetAllocHook` function installs the new client-defined allocation function specified in `allocHook` and returns the previously defined hook function."},{"content":"The following example demonstrates how a client-defined allocation hook should be prototyped:","pos":[2344,2437]},{"content":"The <ph id=\"ph1\">`allocType`</ph> argument specifies the type of allocation operation <ph id=\"ph2\">`(_HOOK_ALLOC`</ph>, <ph id=\"ph3\">`_HOOK_REALLOC`</ph>, and <ph id=\"ph4\">`_HOOK_FREE`</ph>) that triggered the call to the allocation's hook function.","pos":[2613,2790],"source":"The `allocType` argument specifies the type of allocation operation `(_HOOK_ALLOC`, `_HOOK_REALLOC`, and `_HOOK_FREE`) that triggered the call to the allocation's hook function."},{"content":"When the triggering allocation type is <ph id=\"ph1\">`_HOOK_FREE`</ph>, <ph id=\"ph2\">`userData`</ph> is a pointer to the user data section of the memory block about to be freed.","pos":[2791,2931],"source":" When the triggering allocation type is `_HOOK_FREE`, `userData` is a pointer to the user data section of the memory block about to be freed."},{"content":"However, when the triggering allocation type is <ph id=\"ph1\">`_HOOK_ALLOC`</ph> or <ph id=\"ph2\">`_HOOK_REALLOC`</ph>, <ph id=\"ph3\">`userData`</ph> is <ph id=\"ph4\">`NULL`</ph> because the memory block has not been allocated yet.","pos":[2932,3087],"source":" However, when the triggering allocation type is `_HOOK_ALLOC` or `_HOOK_REALLOC`, `userData` is `NULL` because the memory block has not been allocated yet."},{"pos":[3101,3425],"content":"specifies the size of the memory block in bytes, <ph id=\"ph1\">`blockType`</ph> indicates the type of the memory block, <ph id=\"ph2\">`requestNumber`</ph> is the object allocation order number of the memory block, and, if available, <ph id=\"ph3\">`filename`</ph> and <ph id=\"ph4\">`lineNumber`</ph> specify the source file name and line number where the triggering allocation operation was initiated.","source":" specifies the size of the memory block in bytes, `blockType` indicates the type of the memory block, `requestNumber` is the object allocation order number of the memory block, and, if available, `filename` and `lineNumber` specify the source file name and line number where the triggering allocation operation was initiated."},{"content":"After the hook function has finished processing, it must return a Boolean value, which tells the main C run-time allocation process how to continue.","pos":[3432,3580]},{"content":"When the hook function wants the main allocation process to continue as if the hook function had never been called, then the hook function should return <ph id=\"ph1\">`TRUE`</ph>.","pos":[3581,3741],"source":" When the hook function wants the main allocation process to continue as if the hook function had never been called, then the hook function should return `TRUE`."},{"content":"This causes the original triggering allocation operation to be executed.","pos":[3742,3814]},{"content":"Using this implementation, the hook function can gather and save allocation information for later analysis, without interfering with the current allocation operation or state of the debug heap.","pos":[3815,4008]},{"content":"When the hook function wants the main allocation process to continue as if the triggering allocation operation was called and it failed, then the hook function should return <ph id=\"ph1\">`FALSE`</ph>.","pos":[4015,4197],"source":"When the hook function wants the main allocation process to continue as if the triggering allocation operation was called and it failed, then the hook function should return `FALSE`."},{"content":"Using this implementation, the hook function can simulate a wide range of memory conditions and debug heap states to test how the application handles each situation.","pos":[4198,4363]},{"pos":[4370,4432],"content":"To clear the hook function, pass <ph id=\"ph1\">`NULL`</ph> to <ph id=\"ph2\">`_CrtSetAllocHook`</ph>.","source":"To clear the hook function, pass `NULL` to `_CrtSetAllocHook`."},{"pos":[4439,4682],"content":"For more information about how <ph id=\"ph1\">`_CrtSetAllocHook`</ph> can be used with other memory management functions or how to write your own client-defined hook functions, see <bpt id=\"p1\">[</bpt>Debug Hook Function Writing<ept id=\"p1\">](/visualstudio/debugger/debug-hook-function-writing)</ept>.","source":"For more information about how `_CrtSetAllocHook` can be used with other memory management functions or how to write your own client-defined hook functions, see [Debug Hook Function Writing](/visualstudio/debugger/debug-hook-function-writing)."},{"pos":[4690,4755],"content":"[!NOTE]\n `_CrtSetAllocHook` is not supported under `/clr:pure`.","leadings":["","> "],"nodes":[{"content":"is not supported under <ph id=\"ph1\">`/clr:pure`</ph>.","pos":[28,63],"source":" is not supported under `/clr:pure`."}]},{"content":"Requirements","pos":[4764,4776]},{"content":"Routine","pos":[4783,4790]},{"content":"Required header","pos":[4791,4806]},{"content":"crtdbg.h&gt;","pos":[4872,4881],"source":"crtdbg.h>"},{"pos":[4889,5007],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Libraries","pos":[5016,5025]},{"pos":[5029,5124],"content":"Debug versions of <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept> only.","source":"Debug versions of [C run-time libraries](../../c-runtime-library/crt-library-features.md) only."},{"content":"Example","pos":[5133,5140]},{"pos":[5144,5276],"content":"For a sample of how to use <ph id=\"ph1\">`_CrtSetAllocHook`</ph>, see <bpt id=\"p1\">[</bpt>crt_dbg2<ept id=\"p1\">](http://msdn.microsoft.com/en-us/21e1346a-6a17-4f57-b275-c76813089167)</ept>.","source":"For a sample of how to use `_CrtSetAllocHook`, see [crt_dbg2](http://msdn.microsoft.com/en-us/21e1346a-6a17-4f57-b275-c76813089167)."},{"content":".NET Framework Equivalent","pos":[5285,5310]},{"content":"Not applicable.","pos":[5314,5329]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[5330,5377],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[5378,5503],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[5512,5520]},{"content":"Debug Routines","pos":[5525,5539]},{"content":"_CrtGetAllocHook","pos":[5589,5605]}],"content":"---\ntitle: \"_CrtSetAllocHook | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_CrtSetAllocHook\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_CrtSetAllocHook\"\n  - \"CrtSetAllocHook\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_CrtSetAllocHook function\"\n  - \"CrtSetAllocHook function\"\nms.assetid: 405df37b-2fd1-42c8-83bc-90887f17f29d\ncaps.latest.revision: 15\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _CrtSetAllocHook\nInstalls a client-defined allocation function by hooking it into the C run-time debug memory allocation process (debug version only).  \n  \n## Syntax  \n  \n```  \n_CRT_ALLOC_HOOK _CrtSetAllocHook(  \n   _CRT_ALLOC_HOOK allocHook   \n);  \n```  \n  \n#### Parameters  \n `allocHook`  \n New client-defined allocation function to hook into the C run-time debug memory allocation process.  \n  \n## Return Value  \n Returns the previously defined allocation hook function, or `NULL` if `allocHook` is `NULL`.  \n  \n## Remarks  \n `_CrtSetAllocHook` allows an application to hook its own allocation function into the C run-time debug library memory allocation process. As a result, every call to a debug allocation function to allocate, reallocate, or free a memory block triggers a call to the application's hook function. `_CrtSetAllocHook` provides an application with an easy method for testing how the application handles insufficient memory situations, the ability to examine allocation patterns, and the opportunity to log allocation information for later analysis. When [_DEBUG](../../c-runtime-library/debug.md) is not defined, calls to `_CrtSetAllocHook` are removed during preprocessing.  \n  \n The `_CrtSetAllocHook` function installs the new client-defined allocation function specified in `allocHook` and returns the previously defined hook function. The following example demonstrates how a client-defined allocation hook should be prototyped:  \n  \n```  \nint YourAllocHook( int allocType, void *userData, size_t size, int   \nblockType, long requestNumber, const unsigned char *filename, int   \nlineNumber);  \n```  \n  \n The `allocType` argument specifies the type of allocation operation `(_HOOK_ALLOC`, `_HOOK_REALLOC`, and `_HOOK_FREE`) that triggered the call to the allocation's hook function. When the triggering allocation type is `_HOOK_FREE`, `userData` is a pointer to the user data section of the memory block about to be freed. However, when the triggering allocation type is `_HOOK_ALLOC` or `_HOOK_REALLOC`, `userData` is `NULL` because the memory block has not been allocated yet.  \n  \n `size` specifies the size of the memory block in bytes, `blockType` indicates the type of the memory block, `requestNumber` is the object allocation order number of the memory block, and, if available, `filename` and `lineNumber` specify the source file name and line number where the triggering allocation operation was initiated.  \n  \n After the hook function has finished processing, it must return a Boolean value, which tells the main C run-time allocation process how to continue. When the hook function wants the main allocation process to continue as if the hook function had never been called, then the hook function should return `TRUE`. This causes the original triggering allocation operation to be executed. Using this implementation, the hook function can gather and save allocation information for later analysis, without interfering with the current allocation operation or state of the debug heap.  \n  \n When the hook function wants the main allocation process to continue as if the triggering allocation operation was called and it failed, then the hook function should return `FALSE`. Using this implementation, the hook function can simulate a wide range of memory conditions and debug heap states to test how the application handles each situation.  \n  \n To clear the hook function, pass `NULL` to `_CrtSetAllocHook`.  \n  \n For more information about how `_CrtSetAllocHook` can be used with other memory management functions or how to write your own client-defined hook functions, see [Debug Hook Function Writing](/visualstudio/debugger/debug-hook-function-writing).  \n  \n> [!NOTE]\n>  `_CrtSetAllocHook` is not supported under `/clr:pure`.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_CrtSetAllocHook`|\\<crtdbg.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Libraries  \n Debug versions of [C run-time libraries](../../c-runtime-library/crt-library-features.md) only.  \n  \n## Example  \n For a sample of how to use `_CrtSetAllocHook`, see [crt_dbg2](http://msdn.microsoft.com/en-us/21e1346a-6a17-4f57-b275-c76813089167).  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Debug Routines](../../c-runtime-library/debug-routines.md)   \n [_CrtGetAllocHook](../../c-runtime-library/reference/crtgetallochook.md)"}