<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c8d615cf09987fe35f2bbd68e2e50877fb12836f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\new-operator-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6e37bffcd131085a9cc379133d0eee25fa6569ce</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">29316e0d89acb94ed3ee3f2c0e83eefd2ef3f75d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>new Operator (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>new Operator (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Allocates memory for an object or array of objects of <bpt id="p1">*</bpt>type-name<ept id="p1">*</ept> from the free store and returns a suitably typed, nonzero pointer to the object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Microsoft C++ Component Extensions provides support for the <ph id="ph1">`new`</ph> keyword to add vtable slot entries.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>new (new slot in vtable)<ept id="p1">](../windows/new-new-slot-in-vtable-cpp-component-extensions.md)</ept></source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If unsuccessful, <bpt id="p1">**</bpt>new<ept id="p1">**</ept> returns zero or throws an exception; see <bpt id="p2">[</bpt>The new and delete Operators<ept id="p2">](../cpp/new-and-delete-operators.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can change this default behavior by writing a custom exception-handling routine and calling the <bpt id="p1">[</bpt>_set_new_handler<ept id="p1">](../c-runtime-library/reference/set-new-handler.md)</ept> run-time library function with your function name as its argument.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For information on how to create an object on the managed heap, see <bpt id="p1">[</bpt>gcnew<ept id="p1">](../windows/ref-new-gcnew-cpp-component-extensions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>new<ept id="p1">**</ept> is used to allocate memory for a C++ class object, the object's constructor is called after the memory is allocated.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>delete<ept id="p1">](../cpp/delete-operator-cpp.md)</ept> operator to deallocate the memory allocated with the <bpt id="p2">**</bpt>new<ept id="p2">**</ept> operator.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example allocates and then frees a two-dimensional array of characters of size <ph id="ph1">`dim`</ph> by 10.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When allocating a multidimensional array, all dimensions except the first must be constant expressions that evaluate to positive values; the leftmost array dimension can be any expression that evaluates to a positive value.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When allocating an array using the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> operator, the first dimension can be zero â€” the <bpt id="p2">**</bpt>new<ept id="p2">**</ept> operator returns a unique pointer.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>type-name<ept id="p1">*</ept> cannot contain <bpt id="p2">**</bpt>const<ept id="p2">**</ept>, <ph id="ph1">`volatile`</ph>, class declarations, or enumeration declarations.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Therefore, the following expression is illegal:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>new<ept id="p1">**</ept> operator does not allocate reference types because they are not objects.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>new<ept id="p1">**</ept> operator cannot be used to allocate a function, but it can be used to allocate pointers to functions.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example allocates and then frees an array of seven pointers to functions that return integers.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you use the operator <bpt id="p1">**</bpt>new<ept id="p1">**</ept> without any extra arguments, and compile with the <bpt id="p2">[</bpt>/GX<ept id="p2">](../build/reference/gx-enable-exception-handling.md)</ept>, <bpt id="p3">[</bpt>/EHa<ept id="p3">](../build/reference/eh-exception-handling-model.md)</ept>, or <bpt id="p4">[</bpt>/EHs<ept id="p4">](../build/reference/eh-exception-handling-model.md)</ept> option, the compiler will generate code to call operator <bpt id="p5">**</bpt>delete<ept id="p5">**</ept> if the constructor throws an exception.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following list describes the grammar elements of <bpt id="p1">**</bpt>new<ept id="p1">**</ept>:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>placement</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Provides a way of passing additional arguments if you overload <bpt id="p1">**</bpt>new<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>type-name</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Specifies type to be allocated; it can be either a built-in or user-defined type.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If the type specification is complicated, it can be surrounded by parentheses to force the order of binding.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>initializer</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Provides a value for the initialized object.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Initializers cannot be specified for arrays.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>new<ept id="p1">**</ept> operator will create arrays of objects only if the class has a default constructor.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following code example allocates a character array and an object of class <ph id="ph1">`CName`</ph> and then frees them.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If you use the placement new form of the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> operator, the form with arguments in addition to the size of the allocation, the compiler does not support a placement form of the <bpt id="p2">**</bpt>delete<ept id="p2">**</ept> operator if the constructor throws an exception.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Initializing object allocated with new</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>An optional <bpt id="p1">*</bpt>initializer<ept id="p1">*</ept> field is included in the grammar for the <bpt id="p2">**</bpt>new<ept id="p2">**</ept> operator.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This allows new objects to be initialized with user-defined constructors.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For more information about how initialization is done, see <bpt id="p1">[</bpt>Initializers<ept id="p1">](../cpp/initializers.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following example illustrates how to use an initialization expression with the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> operator:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In this example, the object <ph id="ph1">`CheckingAcct`</ph> is allocated using the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> operator, but no default initialization is specified.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Therefore, the default constructor for the class, <ph id="ph1">`Acct()`</ph>, is called.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Then the object <ph id="ph1">`SavingsAcct`</ph> is allocated the same way, except that it is explicitly initialized to 34.98.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Because 34.98 is of type <bpt id="p1">**</bpt>double<ept id="p1">**</ept>, the constructor that takes an argument of that type is called to handle the initialization.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Finally, the nonclass type <ph id="ph1">`HowMuch`</ph> is initialized to 43.0.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If an object is of a class type and that class has constructors (as in the preceding example), the object can be initialized by the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> operator only if one of these conditions is met:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The arguments provided in the initializer agree with those of a constructor.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The class has a default constructor (a constructor that can be called with no arguments).</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Access control and ambiguity control are performed on <ph id="ph1">`operator new`</ph> and on the constructors according to the rules set forth in <bpt id="p1">[</bpt>Ambiguity<ept id="p1">](http://msdn.microsoft.com/en-us/0b399cab-40a7-4e79-9278-05f40139a0e1)</ept> and <bpt id="p2">[</bpt>Initialization Using Special Member Functions<ept id="p2">](http://msdn.microsoft.com/en-us/82223d73-64cb-4923-b678-78f9568ff3ca)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>No explicit per-element initialization can be done when allocating arrays using the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> operator; only the default constructor, if present, is called.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Default Arguments<ept id="p1">](../cpp/default-arguments.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If the memory allocation fails (<ph id="ph1">`operator new`</ph> returns a value of 0), no initialization is performed.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This protects against attempts to initialize data that does not exist.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>As with function calls, the order in which initialized expressions are evaluated is not defined.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Furthermore, you should not rely on these expressions being completely evaluated before the memory allocation is performed.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If the memory allocation fails and the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> operator returns zero, some expressions in the initializer may not be completely evaluated.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Lifetime of objects allocated with new</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Objects allocated with the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> operator are not destroyed when the scope in which they are defined is exited.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Because the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> operator returns a pointer to the objects it allocates, the program must define a pointer with suitable scope to access those objects.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Once the pointer <ph id="ph1">`AnotherArray`</ph> goes out of scope in the example, the object can no longer be deleted.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>How new works</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>allocation-expression<ept id="p1">*</ept> â€” the expression containing the <bpt id="p2">**</bpt>new<ept id="p2">**</ept> operator â€” does three things:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Locates and reserves storage for the object or objects to be allocated.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>When this stage is complete, the correct amount of storage is allocated, but it is not yet an object.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Initializes the object(s).</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Once initialization is complete, enough information is present for the allocated storage to be an object.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the object(s) of a pointer type derived from <bpt id="p1">*</bpt>new-type-name<ept id="p1">*</ept> or <bpt id="p2">*</bpt>type-name<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The program uses this pointer to access the newly allocated object.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>new<ept id="p1">**</ept> operator invokes the function <ph id="ph1">`operator new`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For arrays of any type, and for objects that are not of <bpt id="p1">**</bpt>class<ept id="p1">**</ept>, <ph id="ph1">`struct`</ph>, or <bpt id="p2">**</bpt>union<ept id="p2">**</ept> types, a global function, <bpt id="p3">**</bpt>::operator new<ept id="p3">**</ept>, is called to allocate storage.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Class-type objects can define their own <ph id="ph1">`operator new`</ph> static member function on a per-class basis.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>When the compiler encounters the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> operator to allocate an object of type <ph id="ph1">`type`</ph>, it issues a call to <ph id="ph2">`type`</ph><bpt id="p2">**</bpt>::operator new( sizeof(<ept id="p2">**</ept> <ph id="ph3">`type`</ph> <bpt id="p3">**</bpt>) )<ept id="p3">**</ept> or, if no user-defined <ph id="ph4">`operator new`</ph> is defined, <bpt id="p4">**</bpt>::operator new( sizeof(<ept id="p4">**</ept> <ph id="ph5">`type`</ph> <bpt id="p5">**</bpt>) )<ept id="p5">**</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Therefore, the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> operator can allocate the correct amount of memory for the object.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The argument to <ph id="ph1">`operator new`</ph> is of type <bpt id="p1">**</bpt>size_t<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This type is defined in DIRECT.H, MALLOC.H, MEMORY.H, SEARCH.H, STDDEF.H, STDIO.H, STDLIB.H, STRING.H, and TIME.H.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>An option in the grammar allows specification of <bpt id="p1">*</bpt>placement<ept id="p1">*</ept> (see the Grammar for <bpt id="p2">[</bpt>new Operator<ept id="p2">](../cpp/new-operator-cpp.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>placement<ept id="p1">*</ept> parameter can be used only for user-defined implementations of <ph id="ph1">`operator new`</ph>; it allows extra information to be passed to <ph id="ph2">`operator new`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>An expression with a <bpt id="p1">*</bpt>placement<ept id="p1">*</ept> field such as <ph id="ph1">`T *TObject = new ( 0x0040 ) T;`</ph> is translated to <ph id="ph2">`T *TObject = T::operator new( sizeof( T ), 0x0040 );`</ph> if class T has member operator new, otherwise to <ph id="ph3">`T *TObject = ::operator new( sizeof( T ), 0x0040 );`</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The original intention of the <bpt id="p1">*</bpt>placement<ept id="p1">*</ept> field was to allow hardware-dependent objects to be allocated at user-specified addresses.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Although the preceding example shows only one argument in the <bpt id="p1">*</bpt>placement<ept id="p1">*</ept> field, there is no restriction on how many extra arguments can be passed to <ph id="ph1">`operator new`</ph> this way.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Even when <ph id="ph1">`operator new`</ph> has been defined for a class type, the global operator can be used by using the form of this example:</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The scope-resolution operator (<ph id="ph1">`::`</ph>) forces use of the global <bpt id="p1">**</bpt>new<ept id="p1">**</ept> operator.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Expressions with Unary Operators</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>new and delete operators</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>