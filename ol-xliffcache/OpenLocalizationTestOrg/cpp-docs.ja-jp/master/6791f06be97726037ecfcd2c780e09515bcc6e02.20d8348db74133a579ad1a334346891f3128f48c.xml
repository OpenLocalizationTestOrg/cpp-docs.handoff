{"nodes":[{"pos":[12,46],"content":"_mktemp, _wmktemp | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_mktemp, _wmktemp | Microsoft Docs","pos":[0,34]}]},{"pos":[1161,1178],"content":"_mktemp, _wmktemp","linkify":"_mktemp, _wmktemp","nodes":[{"content":"_mktemp, _wmktemp","pos":[0,17]}]},{"content":"Creates a unique file name.","pos":[1179,1206]},{"content":"More secure versions of these functions are available; see <bpt id=\"p1\">[</bpt>_mktemp_s, _wmktemp_s<ept id=\"p1\">](../../c-runtime-library/reference/mktemp-s-wmktemp-s.md)</ept>.","pos":[1207,1347],"source":" More secure versions of these functions are available; see [_mktemp_s, _wmktemp_s](../../c-runtime-library/reference/mktemp-s-wmktemp-s.md)."},{"pos":[1356,1362],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1662,1672],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"File name pattern.","pos":[1690,1708]},{"pos":[1717,1729],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Each of these functions returns a pointer to the modified template.","pos":[1733,1800]},{"content":"The function returns <ph id=\"ph1\">`NULL`</ph> if <ph id=\"ph2\">`template`</ph> is badly formed or no more unique names can be created from the given template.","pos":[1801,1922],"source":" The function returns `NULL` if `template` is badly formed or no more unique names can be created from the given template."},{"pos":[1931,1938],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_mktemp`</ph> function creates a unique file name by modifying the <ph id=\"ph2\">`template`</ph> argument.","pos":[1942,2029],"source":"The `_mktemp` function creates a unique file name by modifying the `template` argument."},{"content":"<ph id=\"ph1\">`_mktemp`</ph> automatically handles multibyte-character string arguments as appropriate, recognizing multibyte-character sequences according to the multibyte code page currently in use by the run-time system.","pos":[2030,2234],"source":"`_mktemp` automatically handles multibyte-character string arguments as appropriate, recognizing multibyte-character sequences according to the multibyte code page currently in use by the run-time system."},{"content":"<ph id=\"ph1\">`_wmktemp`</ph> is a wide-character version of <ph id=\"ph2\">`_mktemp`</ph>; the argument and return value of <ph id=\"ph3\">`_wmktemp`</ph> are wide-character strings.","pos":[2235,2359],"source":"`_wmktemp` is a wide-character version of `_mktemp`; the argument and return value of `_wmktemp` are wide-character strings."},{"content":"<ph id=\"ph1\">`_wmktemp`</ph> and <ph id=\"ph2\">`_mktemp`</ph> behave identically otherwise, except that <ph id=\"ph3\">`_wmktemp`</ph> does not handle multibyte-character strings.","pos":[2360,2482],"source":"`_wmktemp` and `_mktemp` behave identically otherwise, except that `_wmktemp` does not handle multibyte-character strings."},{"pos":[2492,2521],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"Tchar.h routine","pos":[2528,2543]},{"content":"_UNICODE and _MBCS not defined","pos":[2544,2574]},{"content":"_MBCS defined","pos":[2575,2588]},{"content":"_UNICODE defined","pos":[2589,2605]},{"content":"The <ph id=\"ph1\">`template`</ph> argument has the form <ph id=\"ph2\">`base`</ph>XXXXXX, where <ph id=\"ph3\">`base`</ph> is the part of the new file name that you supply and each X is a placeholder for a character supplied by <ph id=\"ph4\">`_mktemp`</ph>.","pos":[2769,2948],"source":"The `template` argument has the form `base`XXXXXX, where `base` is the part of the new file name that you supply and each X is a placeholder for a character supplied by `_mktemp`."},{"content":"Each placeholder character in <ph id=\"ph1\">`template`</ph> must be an uppercase X. <ph id=\"ph2\">`_mktemp`</ph> preserves <ph id=\"ph3\">`base`</ph> and replaces the first trailing X with an alphabetic character.","pos":[2949,3104],"source":" Each placeholder character in `template` must be an uppercase X. `_mktemp` preserves `base` and replaces the first trailing X with an alphabetic character."},{"content":"<ph id=\"ph1\">`_mktemp`</ph> replaces the following trailing X's with a five-digit value; this value is a unique number identifying the calling process, or in multithreaded programs, the calling thread.","pos":[3105,3288],"source":"`_mktemp` replaces the following trailing X's with a five-digit value; this value is a unique number identifying the calling process, or in multithreaded programs, the calling thread."},{"content":"Each successful call to <ph id=\"ph1\">`_mktemp`</ph> modifies <ph id=\"ph2\">`template`</ph>.","pos":[3295,3349],"source":"Each successful call to `_mktemp` modifies `template`."},{"content":"In each subsequent call from the same process or thread with the same <ph id=\"ph1\">`template`</ph> argument, <ph id=\"ph2\">`_mktemp`</ph> checks for file names that match names returned by <ph id=\"ph3\">`_mktemp`</ph> in previous calls.","pos":[3350,3530],"source":" In each subsequent call from the same process or thread with the same `template` argument, `_mktemp` checks for file names that match names returned by `_mktemp` in previous calls."},{"content":"If no file exists for a given name, <ph id=\"ph1\">`_mktemp`</ph> returns that name.","pos":[3531,3595],"source":" If no file exists for a given name, `_mktemp` returns that name."},{"content":"If files exist for all previously returned names, <ph id=\"ph1\">`_mktemp`</ph> creates a new name by replacing the alphabetic character it used in the previously returned name with the next available lowercase letter, in order, from 'a' through 'z'.","pos":[3596,3826],"source":" If files exist for all previously returned names, `_mktemp` creates a new name by replacing the alphabetic character it used in the previously returned name with the next available lowercase letter, in order, from 'a' through 'z'."},{"content":"For example, if <ph id=\"ph1\">`base`</ph> is:","pos":[3827,3853],"source":" For example, if `base` is:"},{"pos":[3880,3964],"content":"and the five-digit value supplied by <ph id=\"ph1\">`_mktemp`</ph> is 12345, the first name returned is:","source":"and the five-digit value supplied by `_mktemp` is 12345, the first name returned is:"},{"pos":[3997,4174],"content":"If this name is used to create file FNA12345 and this file still exists, the next name returned on a call from the same process or thread with the same <ph id=\"ph1\">`base`</ph> for <ph id=\"ph2\">`template`</ph> is:","source":"If this name is used to create file FNA12345 and this file still exists, the next name returned on a call from the same process or thread with the same `base` for `template` is:"},{"content":"If FNA12345 does not exist, the next name returned is again:","pos":[4207,4267]},{"content":"<ph id=\"ph1\">`_mktemp`</ph> can create a maximum of 26 unique file names for any given combination of base and template values.","pos":[4300,4409],"source":"`_mktemp` can create a maximum of 26 unique file names for any given combination of base and template values."},{"content":"Therefore, FNZ12345 is the last unique file name <ph id=\"ph1\">`_mktemp`</ph> can create for the <ph id=\"ph2\">`base`</ph> and <ph id=\"ph3\">`template`</ph> values used in this example.","pos":[4410,4538],"source":" Therefore, FNZ12345 is the last unique file name `_mktemp` can create for the `base` and `template` values used in this example."},{"content":"On failure, <ph id=\"ph1\">`errno`</ph> is set.","pos":[4545,4572],"source":"On failure, `errno` is set."},{"content":"If <ph id=\"ph1\">`template`</ph> has an invalid format (for example, fewer than 6 X's), <ph id=\"ph2\">`errno`</ph> is set to <ph id=\"ph3\">`EINVAL`</ph>.","pos":[4573,4669],"source":" If `template` has an invalid format (for example, fewer than 6 X's), `errno` is set to `EINVAL`."},{"content":"If <ph id=\"ph1\">`_mktemp`</ph> is unable to create a unique name because all 26 possible file names already exist, <ph id=\"ph2\">`_mktemp`</ph> sets template to an empty string and returns <ph id=\"ph3\">`EEXIST`</ph>.","pos":[4670,4831],"source":" If `_mktemp` is unable to create a unique name because all 26 possible file names already exist, `_mktemp` sets template to an empty string and returns `EEXIST`."},{"content":"In C++, these functions have template overloads that invoke the newer, secure counterparts of these functions.","pos":[4838,4948]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[4949,5057],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"pos":[5066,5078],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[5085,5092]},{"content":"Required header","pos":[5093,5108]},{"content":"<ph id=\"ph1\">\\&lt;</ph>io.h&gt;","pos":[5163,5170],"source":"\\<io.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>io.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;","pos":[5186,5207],"source":"\\<io.h> or \\<wchar.h>"},{"pos":[5215,5333],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[5342,5349],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7479,7504],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[7508,7523]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[7524,7571],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[7572,7697],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[7706,7714],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>File Handling<ept id=\"p1\">](../../c-runtime-library/file-handling.md)</ept><ph id=\"ph1\"> </ph>","pos":[7718,7776],"source":"[File Handling](../../c-runtime-library/file-handling.md) "},{"content":"<bpt id=\"p1\"> [</bpt>fopen, _wfopen<ept id=\"p1\">](../../c-runtime-library/reference/fopen-wfopen.md)</ept><ph id=\"ph1\"> </ph>","pos":[7779,7848],"source":" [fopen, _wfopen](../../c-runtime-library/reference/fopen-wfopen.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_getmbcp<ept id=\"p1\">](../../c-runtime-library/reference/getmbcp.md)</ept><ph id=\"ph1\"> </ph>","pos":[7851,7909],"source":" [_getmbcp](../../c-runtime-library/reference/getmbcp.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_getpid<ept id=\"p1\">](../../c-runtime-library/reference/getpid.md)</ept><ph id=\"ph1\"> </ph>","pos":[7912,7968],"source":" [_getpid](../../c-runtime-library/reference/getpid.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_open, _wopen<ept id=\"p1\">](../../c-runtime-library/reference/open-wopen.md)</ept><ph id=\"ph1\"> </ph>","pos":[7971,8037],"source":" [_open, _wopen](../../c-runtime-library/reference/open-wopen.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_setmbcp<ept id=\"p1\">](../../c-runtime-library/reference/setmbcp.md)</ept><ph id=\"ph1\"> </ph>","pos":[8040,8098],"source":" [_setmbcp](../../c-runtime-library/reference/setmbcp.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_tempnam, _wtempnam, tmpnam, _wtmpnam<ept id=\"p1\">](../../c-runtime-library/reference/tempnam-wtempnam-tmpnam-wtmpnam.md)</ept><ph id=\"ph1\"> </ph>","pos":[8101,8212],"source":" [_tempnam, _wtempnam, tmpnam, _wtmpnam](../../c-runtime-library/reference/tempnam-wtempnam-tmpnam-wtmpnam.md) "},{"content":"<bpt id=\"p1\"> [</bpt>tmpfile<ept id=\"p1\">](../../c-runtime-library/reference/tmpfile.md)</ept>","pos":[8215,8271],"source":" [tmpfile](../../c-runtime-library/reference/tmpfile.md)"}],"content":"---\ntitle: \"_mktemp, _wmktemp | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_wmktemp\"\n  - \"_mktemp\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-stdio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_tmktemp\"\n  - \"wmktemp\"\n  - \"tmktemp\"\n  - \"_wmktemp\"\n  - \"_mktemp\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_wmktemp function\"\n  - \"_mktemp function\"\n  - \"files [C++], temporary\"\n  - \"tmktemp function\"\n  - \"_tmktemp function\"\n  - \"wmktemp function\"\n  - \"mktemp function\"\n  - \"temporary files [C++]\"\nms.assetid: 055eb539-a8c2-4a7d-be54-f5b6d1eb5c85\ncaps.latest.revision: 25\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _mktemp, _wmktemp\nCreates a unique file name. More secure versions of these functions are available; see [_mktemp_s, _wmktemp_s](../../c-runtime-library/reference/mktemp-s-wmktemp-s.md).  \n  \n## Syntax  \n  \n```  \nchar *_mktemp(  \n   char *template   \n);  \nwchar_t *_wmktemp(  \n   wchar_t *template   \n);  \ntemplate <size_t size>  \nchar *_mktemp(  \n   char (&template)[size]  \n); // C++ only  \ntemplate <size_t size>  \nwchar_t *_wmktemp(  \n   wchar_t (&template)[size]  \n); // C++ only  \n```  \n  \n#### Parameters  \n `template`  \n File name pattern.  \n  \n## Return Value  \n Each of these functions returns a pointer to the modified template. The function returns `NULL` if `template` is badly formed or no more unique names can be created from the given template.  \n  \n## Remarks  \n The `_mktemp` function creates a unique file name by modifying the `template` argument. `_mktemp` automatically handles multibyte-character string arguments as appropriate, recognizing multibyte-character sequences according to the multibyte code page currently in use by the run-time system. `_wmktemp` is a wide-character version of `_mktemp`; the argument and return value of `_wmktemp` are wide-character strings. `_wmktemp` and `_mktemp` behave identically otherwise, except that `_wmktemp` does not handle multibyte-character strings.  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_tmktemp`|`_mktemp`|`_mktemp`|`_wmktemp`|  \n  \n The `template` argument has the form `base`XXXXXX, where `base` is the part of the new file name that you supply and each X is a placeholder for a character supplied by `_mktemp`. Each placeholder character in `template` must be an uppercase X. `_mktemp` preserves `base` and replaces the first trailing X with an alphabetic character. `_mktemp` replaces the following trailing X's with a five-digit value; this value is a unique number identifying the calling process, or in multithreaded programs, the calling thread.  \n  \n Each successful call to `_mktemp` modifies `template`. In each subsequent call from the same process or thread with the same `template` argument, `_mktemp` checks for file names that match names returned by `_mktemp` in previous calls. If no file exists for a given name, `_mktemp` returns that name. If files exist for all previously returned names, `_mktemp` creates a new name by replacing the alphabetic character it used in the previously returned name with the next available lowercase letter, in order, from 'a' through 'z'. For example, if `base` is:  \n  \n```  \nfn  \n```  \n  \n and the five-digit value supplied by `_mktemp` is 12345, the first name returned is:  \n  \n```  \nfna12345  \n```  \n  \n If this name is used to create file FNA12345 and this file still exists, the next name returned on a call from the same process or thread with the same `base` for `template` is:  \n  \n```  \nfnb12345  \n```  \n  \n If FNA12345 does not exist, the next name returned is again:  \n  \n```  \nfna12345  \n```  \n  \n `_mktemp` can create a maximum of 26 unique file names for any given combination of base and template values. Therefore, FNZ12345 is the last unique file name `_mktemp` can create for the `base` and `template` values used in this example.  \n  \n On failure, `errno` is set. If `template` has an invalid format (for example, fewer than 6 X's), `errno` is set to `EINVAL`. If `_mktemp` is unable to create a unique name because all 26 possible file names already exist, `_mktemp` sets template to an empty string and returns `EEXIST`.  \n  \n In C++, these functions have template overloads that invoke the newer, secure counterparts of these functions. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_mktemp`|\\<io.h>|  \n|`_wmktemp`|\\<io.h> or \\<wchar.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_mktemp.c  \n// compile with: /W3  \n/* The program uses _mktemp to create  \n * unique filenames. It opens each filename  \n * to ensure that the next name is unique.  \n */  \n  \n#include <io.h>  \n#include <string.h>  \n#include <stdio.h>  \n#include <errno.h>  \n  \nchar *template = \"fnXXXXXX\";  \nchar *result;  \nchar names[27][9];  \n  \nint main( void )  \n{  \n   int i;  \n   FILE *fp;  \n  \n   for( i = 0; i < 27; i++ )  \n   {  \n      strcpy_s( names[i], sizeof( names[i] ), template );  \n      /* Attempt to find a unique filename: */  \n      result = _mktemp( names[i] );  // C4996  \n      // Note: _mktemp is deprecated; consider using _mktemp_s instead  \n      if( result == NULL )  \n      {  \n         printf( \"Problem creating the template\\n\" );  \n         if (errno == EINVAL)  \n         {  \n             printf( \"Bad parameter\\n\");  \n         }  \n         else if (errno == EEXIST)  \n         {  \n             printf( \"Out of unique filenames\\n\");   \n         }  \n      }  \n      else  \n      {  \n         fopen_s( &fp, result, \"w\" );  \n         if( fp != NULL )  \n            printf( \"Unique filename is %s\\n\", result );  \n         else  \n            printf( \"Cannot open %s\\n\", result );  \n         fclose( fp );  \n      }  \n   }  \n}  \n```  \n  \n```Output  \nUnique filename is fna03912  \nUnique filename is fnb03912  \nUnique filename is fnc03912  \nUnique filename is fnd03912  \nUnique filename is fne03912  \nUnique filename is fnf03912  \nUnique filename is fng03912  \nUnique filename is fnh03912  \nUnique filename is fni03912  \nUnique filename is fnj03912  \nUnique filename is fnk03912  \nUnique filename is fnl03912  \nUnique filename is fnm03912  \nUnique filename is fnn03912  \nUnique filename is fno03912  \nUnique filename is fnp03912  \nUnique filename is fnq03912  \nUnique filename is fnr03912  \nUnique filename is fns03912  \nUnique filename is fnt03912  \nUnique filename is fnu03912  \nUnique filename is fnv03912  \nUnique filename is fnw03912  \nUnique filename is fnx03912  \nUnique filename is fny03912  \nUnique filename is fnz03912  \nProblem creating the template.  \nOut of unique filenames.  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [File Handling](../../c-runtime-library/file-handling.md)   \n [fopen, _wfopen](../../c-runtime-library/reference/fopen-wfopen.md)   \n [_getmbcp](../../c-runtime-library/reference/getmbcp.md)   \n [_getpid](../../c-runtime-library/reference/getpid.md)   \n [_open, _wopen](../../c-runtime-library/reference/open-wopen.md)   \n [_setmbcp](../../c-runtime-library/reference/setmbcp.md)   \n [_tempnam, _wtempnam, tmpnam, _wtmpnam](../../c-runtime-library/reference/tempnam-wtempnam-tmpnam-wtmpnam.md)   \n [tmpfile](../../c-runtime-library/reference/tmpfile.md)"}