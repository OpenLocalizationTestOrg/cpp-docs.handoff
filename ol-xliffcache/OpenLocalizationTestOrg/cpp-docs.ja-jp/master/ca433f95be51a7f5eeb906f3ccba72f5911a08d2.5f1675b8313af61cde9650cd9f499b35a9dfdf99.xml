{"nodes":[{"pos":[12,48],"content":"CWorkerThread Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CWorkerThread Class | Microsoft Docs","pos":[0,36]}]},{"pos":[739,758],"content":"CWorkerThread Class","linkify":"CWorkerThread Class","nodes":[{"content":"CWorkerThread Class","pos":[0,19]}]},{"content":"This class creates a worker thread or uses an existing one, waits on one or more kernel object handles, and executes a specified client function when one of the handles is signaled.","pos":[759,940]},{"pos":[948,1058],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the Windows Runtime.","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the Windows Runtime.","pos":[14,108]}]},{"pos":[1067,1073],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1175,1185],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The class providing the thread creation function, such as <bpt id=\"p1\">[</bpt>CRTThreadTraits<ept id=\"p1\">](../../atl/reference/crtthreadtraits-class.md)</ept> or <bpt id=\"p2\">[</bpt>Win32ThreadTraits<ept id=\"p2\">](../../atl/reference/win32threadtraits-class.md)</ept>.","pos":[1207,1400],"source":" The class providing the thread creation function, such as [CRTThreadTraits](../../atl/reference/crtthreadtraits-class.md) or [Win32ThreadTraits](../../atl/reference/win32threadtraits-class.md)."},{"pos":[1409,1416],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1426,1446],"content":"Protected Structures","linkify":"Protected Structures","nodes":[{"content":"Protected Structures","pos":[0,20]}]},{"content":"Name","pos":[1453,1457]},{"content":"Description","pos":[1458,1469]},{"pos":[1538,1557],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1564,1568]},{"content":"Description","pos":[1569,1580]},{"pos":[1618,1679],"content":"<bpt id=\"p1\">[</bpt>CWorkerThread::CWorkerThread<ept id=\"p1\">](#cworkerthread__cworkerthread)</ept>","source":"[CWorkerThread::CWorkerThread](#cworkerthread__cworkerthread)"},{"content":"The constructor for the worker thread.","pos":[1680,1718]},{"pos":[1723,1790],"content":"<bpt id=\"p1\">[</bpt>CWorkerThread::~CWorkerThread<ept id=\"p1\">](#cworkerthread___dtorcworkerthread)</ept>","source":"[CWorkerThread::~CWorkerThread](#cworkerthread___dtorcworkerthread)"},{"content":"The destructor for the worker thread.","pos":[1791,1828]},{"pos":[1839,1853],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1860,1864]},{"content":"Description","pos":[1865,1876]},{"pos":[1914,1967],"content":"<bpt id=\"p1\">[</bpt>CWorkerThread::AddHandle<ept id=\"p1\">](#cworkerthread__addhandle)</ept>","source":"[CWorkerThread::AddHandle](#cworkerthread__addhandle)"},{"content":"Call this method to add a waitable object's handle to the list maintained by the worker thread.","pos":[1968,2063]},{"pos":[2068,2119],"content":"<bpt id=\"p1\">[</bpt>CWorkerThread::AddTimer<ept id=\"p1\">](#cworkerthread__addtimer)</ept>","source":"[CWorkerThread::AddTimer](#cworkerthread__addtimer)"},{"content":"Call this method to add a periodic waitable timer to the list maintained by the worker thread.","pos":[2120,2214]},{"pos":[2219,2284],"content":"<bpt id=\"p1\">[</bpt>CWorkerThread::GetThreadHandle<ept id=\"p1\">](#cworkerthread__getthreadhandle)</ept>","source":"[CWorkerThread::GetThreadHandle](#cworkerthread__getthreadhandle)"},{"content":"Call this method to get the thread handle of the worker thread.","pos":[2285,2348]},{"pos":[2353,2410],"content":"<bpt id=\"p1\">[</bpt>CWorkerThread::GetThreadId<ept id=\"p1\">](#cworkerthread__getthreadid)</ept>","source":"[CWorkerThread::GetThreadId](#cworkerthread__getthreadid)"},{"content":"Call this method to get the thread ID of the worker thread.","pos":[2411,2470]},{"pos":[2475,2530],"content":"<bpt id=\"p1\">[</bpt>CWorkerThread::Initialize<ept id=\"p1\">](#cworkerthread__initialize)</ept>","source":"[CWorkerThread::Initialize](#cworkerthread__initialize)"},{"content":"Call this method to initialize the worker thread.","pos":[2531,2580]},{"pos":[2585,2644],"content":"<bpt id=\"p1\">[</bpt>CWorkerThread::RemoveHandle<ept id=\"p1\">](#cworkerthread__removehandle)</ept>","source":"[CWorkerThread::RemoveHandle](#cworkerthread__removehandle)"},{"content":"Call this method to remove a handle from the list of waitable objects.","pos":[2645,2715]},{"pos":[2720,2771],"content":"<bpt id=\"p1\">[</bpt>CWorkerThread::Shutdown<ept id=\"p1\">](#cworkerthread__shutdown)</ept>","source":"[CWorkerThread::Shutdown](#cworkerthread__shutdown)"},{"content":"Call this method to shut down the worker thread.","pos":[2772,2820]},{"pos":[2830,2837],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2847,2867],"content":"To use CWorkerThread","linkify":"To use CWorkerThread","nodes":[{"content":"To use CWorkerThread","pos":[0,20]}]},{"content":"Create an instance of this class.","pos":[2877,2910]},{"pos":[2920,2981],"content":"Call <bpt id=\"p1\">[</bpt>CWorkerThread::Initialize<ept id=\"p1\">](#cworkerthread__initialize)</ept>.","source":"Call [CWorkerThread::Initialize](#cworkerthread__initialize)."},{"pos":[2991,3199],"content":"Call <bpt id=\"p1\">[</bpt>CWorkerThread::AddHandle<ept id=\"p1\">](#cworkerthread__addhandle)</ept> with the handle of a kernel object and a pointer to an implementation of <bpt id=\"p2\">[</bpt>IWorkerThreadClient<ept id=\"p2\">](../../atl/reference/iworkerthreadclient-interface.md)</ept>.","source":"Call [CWorkerThread::AddHandle](#cworkerthread__addhandle) with the handle of a kernel object and a pointer to an implementation of [IWorkerThreadClient](../../atl/reference/iworkerthreadclient-interface.md)."},{"content":"– or –","pos":[3210,3216]},{"pos":[3227,3399],"content":"Call <bpt id=\"p1\">[</bpt>CWorkerThread::AddTimer<ept id=\"p1\">](#cworkerthread__addtimer)</ept> with a pointer to an implementation of <bpt id=\"p2\">[</bpt>IWorkerThreadClient<ept id=\"p2\">](../../atl/reference/iworkerthreadclient-interface.md)</ept>.","source":"Call [CWorkerThread::AddTimer](#cworkerthread__addtimer) with a pointer to an implementation of [IWorkerThreadClient](../../atl/reference/iworkerthreadclient-interface.md)."},{"pos":[3409,3590],"content":"Implement <bpt id=\"p1\">[</bpt>IWorkerThreadClient::Execute<ept id=\"p1\">](../../atl/reference/iworkerthreadclient-interface.md#iworkerthreadclient__execute)</ept> to take some action when the handle or timer is signaled.","source":"Implement [IWorkerThreadClient::Execute](../../atl/reference/iworkerthreadclient-interface.md#iworkerthreadclient__execute) to take some action when the handle or timer is signaled."},{"pos":[3600,3720],"content":"To remove an object from the list of waitable objects, call <bpt id=\"p1\">[</bpt>CWorkerThread::RemoveHandle<ept id=\"p1\">](#cworkerthread__removehandle)</ept>.","source":"To remove an object from the list of waitable objects, call [CWorkerThread::RemoveHandle](#cworkerthread__removehandle)."},{"pos":[3730,3812],"content":"To terminate the thread, call <bpt id=\"p1\">[</bpt>CWorkerThread::Shutdown<ept id=\"p1\">](#cworkerthread__shutdown)</ept>.","source":"To terminate the thread, call [CWorkerThread::Shutdown](#cworkerthread__shutdown)."},{"pos":[3821,3833],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3837,3858],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlutil.h","source":"**Header:** atlutil.h"},{"pos":[3868,3933],"content":"<bpt id=\"p1\">&lt;a name=\"cworkerthread__addhandle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWorkerThread::AddHandle","linkify":"<a name=\"cworkerthread__addhandle\"></a>  CWorkerThread::AddHandle","source":"<a name=\"cworkerthread__addhandle\"></a>  CWorkerThread::AddHandle"},{"content":"Call this method to add a waitable object's handle to the list maintained by the worker thread.","pos":[3937,4032]},{"pos":[4160,4170],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The handle to a waitable object.","pos":[4187,4219]},{"content":"The pointer to the <bpt id=\"p1\">[</bpt>IWorkerThreadClient<ept id=\"p1\">](../../atl/reference/iworkerthreadclient-interface.md)</ept> interface on the object to be called when the handle is signaled.","pos":[4239,4399],"source":" The pointer to the [IWorkerThreadClient](../../atl/reference/iworkerthreadclient-interface.md) interface on the object to be called when the handle is signaled."},{"content":"The parameter to be passed to <bpt id=\"p1\">[</bpt>IWorkerThreadClient::Execute<ept id=\"p1\">](../../atl/reference/iworkerthreadclient-interface.md#iworkerthreadclient__execute)</ept> when the handle is signaled.","pos":[4419,4591],"source":" The parameter to be passed to [IWorkerThreadClient::Execute](../../atl/reference/iworkerthreadclient-interface.md#iworkerthreadclient__execute) when the handle is signaled."},{"pos":[4601,4613],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[4617,4673]},{"pos":[4683,4690],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4694,4881],"content":"<bpt id=\"p1\">[</bpt>IWorkerThreadClient::Execute<ept id=\"p1\">](../../atl/reference/iworkerthreadclient-interface.md#iworkerthreadclient__execute)</ept> will be called through <ph id=\"ph1\">`pClient`</ph> when the handle, <ph id=\"ph2\">`hObject`</ph>, is signaled.","source":"[IWorkerThreadClient::Execute](../../atl/reference/iworkerthreadclient-interface.md#iworkerthreadclient__execute) will be called through `pClient` when the handle, `hObject`, is signaled."},{"pos":[4891,4954],"content":"<bpt id=\"p1\">&lt;a name=\"cworkerthread__addtimer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWorkerThread::AddTimer","linkify":"<a name=\"cworkerthread__addtimer\"></a>  CWorkerThread::AddTimer","source":"<a name=\"cworkerthread__addtimer\"></a>  CWorkerThread::AddTimer"},{"content":"Call this method to add a periodic waitable timer to the list maintained by the worker thread.","pos":[4958,5052]},{"pos":[5202,5212],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>dwInterval<ept id=\"p1\">*</ept>","pos":[5216,5228],"source":"*dwInterval*"},{"content":"Specifies the period of the timer in milliseconds.","pos":[5232,5282]},{"content":"The pointer to the <bpt id=\"p1\">[</bpt>IWorkerThreadClient<ept id=\"p1\">](../../atl/reference/iworkerthreadclient-interface.md)</ept> interface on the object to be called when the handle is signaled.","pos":[5302,5462],"source":" The pointer to the [IWorkerThreadClient](../../atl/reference/iworkerthreadclient-interface.md) interface on the object to be called when the handle is signaled."},{"content":"The parameter to be passed to <bpt id=\"p1\">[</bpt>IWorkerThreadClient::Execute<ept id=\"p1\">](../../atl/reference/iworkerthreadclient-interface.md#iworkerthreadclient__execute)</ept> when the handle is signaled.","pos":[5482,5654],"source":" The parameter to be passed to [IWorkerThreadClient::Execute](../../atl/reference/iworkerthreadclient-interface.md#iworkerthreadclient__execute) when the handle is signaled."},{"content":"[out] Address of the HANDLE variable that, on success, receives the handle to the newly created timer.","pos":[5674,5776]},{"pos":[5786,5798],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[5802,5858]},{"pos":[5868,5875],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5879,6053],"content":"<bpt id=\"p1\">[</bpt>IWorkerThreadClient::Execute<ept id=\"p1\">](../../atl/reference/iworkerthreadclient-interface.md#iworkerthreadclient__execute)</ept> will be called through <ph id=\"ph1\">`pClient`</ph> when the timer is signaled.","source":"[IWorkerThreadClient::Execute](../../atl/reference/iworkerthreadclient-interface.md#iworkerthreadclient__execute) will be called through `pClient` when the timer is signaled."},{"pos":[6060,6179],"content":"Pass the timer handle from <ph id=\"ph1\">`phTimer`</ph> to <bpt id=\"p1\">[</bpt>CWorkerThread::RemoveHandle<ept id=\"p1\">](#cworkerthread__removehandle)</ept> to close the timer.","source":"Pass the timer handle from `phTimer` to [CWorkerThread::RemoveHandle](#cworkerthread__removehandle) to close the timer."},{"pos":[6189,6262],"content":"<bpt id=\"p1\">&lt;a name=\"cworkerthread__cworkerthread\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWorkerThread::CWorkerThread","linkify":"<a name=\"cworkerthread__cworkerthread\"></a>  CWorkerThread::CWorkerThread","source":"<a name=\"cworkerthread__cworkerthread\"></a>  CWorkerThread::CWorkerThread"},{"content":"The constructor.","pos":[6266,6282]},{"pos":[6330,6409],"content":"<bpt id=\"p1\">&lt;a name=\"cworkerthread___dtorcworkerthread\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWorkerThread::~CWorkerThread","linkify":"<a name=\"cworkerthread___dtorcworkerthread\"></a>  CWorkerThread::~CWorkerThread","source":"<a name=\"cworkerthread___dtorcworkerthread\"></a>  CWorkerThread::~CWorkerThread"},{"content":"The destructor.","pos":[6413,6428]},{"pos":[6477,6484],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6488,6546],"content":"Calls <bpt id=\"p1\">[</bpt>CWorkerThread::Shutdown<ept id=\"p1\">](#cworkerthread__shutdown)</ept>.","source":"Calls [CWorkerThread::Shutdown](#cworkerthread__shutdown)."},{"pos":[6556,6633],"content":"<bpt id=\"p1\">&lt;a name=\"cworkerthread__getthreadhandle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWorkerThread::GetThreadHandle","linkify":"<a name=\"cworkerthread__getthreadhandle\"></a>  CWorkerThread::GetThreadHandle","source":"<a name=\"cworkerthread__getthreadhandle\"></a>  CWorkerThread::GetThreadHandle"},{"content":"Call this method to get the thread handle of the worker thread.","pos":[6637,6700]},{"pos":[6757,6769],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the thread handle or NULL if the worker thread has not been initialized.","pos":[6773,6853]},{"pos":[6863,6932],"content":"<bpt id=\"p1\">&lt;a name=\"cworkerthread__getthreadid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWorkerThread::GetThreadId","linkify":"<a name=\"cworkerthread__getthreadid\"></a>  CWorkerThread::GetThreadId","source":"<a name=\"cworkerthread__getthreadid\"></a>  CWorkerThread::GetThreadId"},{"content":"Call this method to get the thread ID of the worker thread.","pos":[6936,6995]},{"pos":[7047,7059],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the thread ID or NULL if the worker thread has not been initialized.","pos":[7063,7139]},{"pos":[7149,7216],"content":"<bpt id=\"p1\">&lt;a name=\"cworkerthread__initialize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWorkerThread::Initialize","linkify":"<a name=\"cworkerthread__initialize\"></a>  CWorkerThread::Initialize","source":"<a name=\"cworkerthread__initialize\"></a>  CWorkerThread::Initialize"},{"content":"Call this method to initialize the worker thread.","pos":[7220,7269]},{"pos":[7388,7398],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An existing worker thread.","pos":[7415,7441]},{"pos":[7451,7463],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[7467,7523]},{"pos":[7533,7540],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7544,7684],"content":"This method should be called to initialize the object after creation or after a call to <bpt id=\"p1\">[</bpt>CWorkerThread::Shutdown<ept id=\"p1\">](#cworkerthread__shutdown)</ept>.","source":"This method should be called to initialize the object after creation or after a call to [CWorkerThread::Shutdown](#cworkerthread__shutdown)."},{"content":"To have two or more <ph id=\"ph1\">`CWorkerThread`</ph> objects use the same worker thread, initialize one of them without passing any arguments then pass a pointer to that object to the <ph id=\"ph2\">`Initialize`</ph> methods of the others.","pos":[7691,7893],"source":"To have two or more `CWorkerThread` objects use the same worker thread, initialize one of them without passing any arguments then pass a pointer to that object to the `Initialize` methods of the others."},{"content":"The objects initialized using the pointer should be shut down before the object used to initialize them.","pos":[7894,7998]},{"pos":[8005,8170],"content":"See <bpt id=\"p1\">[</bpt>CWorkerThread::Shutdown<ept id=\"p1\">](#cworkerthread__shutdown)</ept> for information on how that method's behavior changes when initialized using a pointer to an existing object.","source":"See [CWorkerThread::Shutdown](#cworkerthread__shutdown) for information on how that method's behavior changes when initialized using a pointer to an existing object."},{"pos":[8180,8251],"content":"<bpt id=\"p1\">&lt;a name=\"cworkerthread__removehandle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWorkerThread::RemoveHandle","linkify":"<a name=\"cworkerthread__removehandle\"></a>  CWorkerThread::RemoveHandle","source":"<a name=\"cworkerthread__removehandle\"></a>  CWorkerThread::RemoveHandle"},{"content":"Call this method to remove a handle from the list of waitable objects.","pos":[8255,8325]},{"pos":[8396,8406],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The handle to remove.","pos":[8423,8444]},{"pos":[8454,8466],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[8470,8526]},{"pos":[8536,8543],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When the handle is removed <bpt id=\"p1\">[</bpt>IWorkerThreadClient::CloseHandle<ept id=\"p1\">](../../atl/reference/iworkerthreadclient-interface.md#iworkerthreadclient__closehandle)</ept> will be called on the associated object that was passed to <bpt id=\"p2\">[</bpt>AddHandle<ept id=\"p2\">](#cworkerthread__addhandle)</ept>.","pos":[8547,8794],"source":"When the handle is removed [IWorkerThreadClient::CloseHandle](../../atl/reference/iworkerthreadclient-interface.md#iworkerthreadclient__closehandle) will be called on the associated object that was passed to [AddHandle](#cworkerthread__addhandle)."},{"content":"If this call fails, <ph id=\"ph1\">`CWorkerThread`</ph> will call the Windows <bpt id=\"p1\">[</bpt>CloseHandle<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms724211)</ept> function on the handle.","pos":[8795,8950],"source":" If this call fails, `CWorkerThread` will call the Windows [CloseHandle](http://msdn.microsoft.com/library/windows/desktop/ms724211) function on the handle."},{"pos":[8960,9023],"content":"<bpt id=\"p1\">&lt;a name=\"cworkerthread__shutdown\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWorkerThread::Shutdown","linkify":"<a name=\"cworkerthread__shutdown\"></a>  CWorkerThread::Shutdown","source":"<a name=\"cworkerthread__shutdown\"></a>  CWorkerThread::Shutdown"},{"content":"Call this method to shut down the worker thread.","pos":[9027,9075]},{"pos":[9165,9175],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The time in milliseconds to wait for the worker thread to shut down.","pos":[9191,9259]},{"pos":[9269,9281],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9285,9394],"content":"Returns S_OK on success, or an error HRESULT on failure, such as if the timeout value, <ph id=\"ph1\">`dwWait`</ph>, is exceeded.","source":"Returns S_OK on success, or an error HRESULT on failure, such as if the timeout value, `dwWait`, is exceeded."},{"pos":[9404,9411],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9415,9523],"content":"To reuse the object, call <bpt id=\"p1\">[</bpt>CWorkerThread::Initialize<ept id=\"p1\">](#cworkerthread__initialize)</ept> after calling this method.","source":"To reuse the object, call [CWorkerThread::Initialize](#cworkerthread__initialize) after calling this method."},{"pos":[9530,9673],"content":"Note that calling <bpt id=\"p1\">**</bpt>Shutdown<ept id=\"p1\">**</ept> on an object initialized with a pointer to another <ph id=\"ph1\">`CWorkerThread`</ph> object has no effect and always returns S_OK.","source":"Note that calling **Shutdown** on an object initialized with a pointer to another `CWorkerThread` object has no effect and always returns S_OK."},{"pos":[9682,9690],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>DefaultThreadTraits<ept id=\"p1\">](atl-typedefs.md#defaultthreadtraits)</ept><ph id=\"ph1\"> </ph>","pos":[9694,9753],"source":"[DefaultThreadTraits](atl-typedefs.md#defaultthreadtraits) "},{"content":"<bpt id=\"p1\"> [</bpt>Classes<ept id=\"p1\">](../../atl/reference/atl-classes.md)</ept><ph id=\"ph1\"> </ph>","pos":[9756,9803],"source":" [Classes](../../atl/reference/atl-classes.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Multithreading: Creating Worker Threads<ept id=\"p1\">](../../parallel/multithreading-creating-worker-threads.md)</ept><ph id=\"ph1\"> </ph>","pos":[9806,9907],"source":" [Multithreading: Creating Worker Threads](../../parallel/multithreading-creating-worker-threads.md) "},{"content":"<bpt id=\"p1\"> [</bpt>IWorkerThreadClient Interface<ept id=\"p1\">](../../atl/reference/iworkerthreadclient-interface.md)</ept>","pos":[9910,9996],"source":" [IWorkerThreadClient Interface](../../atl/reference/iworkerthreadclient-interface.md)"}],"content":"---\ntitle: \"CWorkerThread Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL::CWorkerThread<ThreadTraits>\"\n  - \"ATL::CWorkerThread\"\n  - \"ATL.CWorkerThread\"\n  - \"ATL.CWorkerThread<ThreadTraits>\"\n  - \"CWorkerThread\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CWorkerThread class\"\nms.assetid: be79a832-1345-4a36-a13e-a406cc65286f\ncaps.latest.revision: 24\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CWorkerThread Class\nThis class creates a worker thread or uses an existing one, waits on one or more kernel object handles, and executes a specified client function when one of the handles is signaled.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the Windows Runtime.  \n  \n## Syntax  \n  \n```\ntemplate <class   ThreadTraits = DefaultThreadTraits>\n    class CWorkerThread\n```  \n  \n#### Parameters  \n `ThreadTraits`  \n The class providing the thread creation function, such as [CRTThreadTraits](../../atl/reference/crtthreadtraits-class.md) or [Win32ThreadTraits](../../atl/reference/win32threadtraits-class.md).  \n  \n## Members  \n  \n### Protected Structures  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`WorkerClientEntry`||  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CWorkerThread::CWorkerThread](#cworkerthread__cworkerthread)|The constructor for the worker thread.|  \n|[CWorkerThread::~CWorkerThread](#cworkerthread___dtorcworkerthread)|The destructor for the worker thread.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CWorkerThread::AddHandle](#cworkerthread__addhandle)|Call this method to add a waitable object's handle to the list maintained by the worker thread.|  \n|[CWorkerThread::AddTimer](#cworkerthread__addtimer)|Call this method to add a periodic waitable timer to the list maintained by the worker thread.|  \n|[CWorkerThread::GetThreadHandle](#cworkerthread__getthreadhandle)|Call this method to get the thread handle of the worker thread.|  \n|[CWorkerThread::GetThreadId](#cworkerthread__getthreadid)|Call this method to get the thread ID of the worker thread.|  \n|[CWorkerThread::Initialize](#cworkerthread__initialize)|Call this method to initialize the worker thread.|  \n|[CWorkerThread::RemoveHandle](#cworkerthread__removehandle)|Call this method to remove a handle from the list of waitable objects.|  \n|[CWorkerThread::Shutdown](#cworkerthread__shutdown)|Call this method to shut down the worker thread.|  \n  \n## Remarks  \n  \n### To use CWorkerThread  \n  \n1.  Create an instance of this class.  \n  \n2.  Call [CWorkerThread::Initialize](#cworkerthread__initialize).  \n  \n3.  Call [CWorkerThread::AddHandle](#cworkerthread__addhandle) with the handle of a kernel object and a pointer to an implementation of [IWorkerThreadClient](../../atl/reference/iworkerthreadclient-interface.md).  \n  \n     – or –  \n  \n     Call [CWorkerThread::AddTimer](#cworkerthread__addtimer) with a pointer to an implementation of [IWorkerThreadClient](../../atl/reference/iworkerthreadclient-interface.md).  \n  \n4.  Implement [IWorkerThreadClient::Execute](../../atl/reference/iworkerthreadclient-interface.md#iworkerthreadclient__execute) to take some action when the handle or timer is signaled.  \n  \n5.  To remove an object from the list of waitable objects, call [CWorkerThread::RemoveHandle](#cworkerthread__removehandle).  \n  \n6.  To terminate the thread, call [CWorkerThread::Shutdown](#cworkerthread__shutdown).  \n  \n## Requirements  \n **Header:** atlutil.h  \n  \n##  <a name=\"cworkerthread__addhandle\"></a>  CWorkerThread::AddHandle  \n Call this method to add a waitable object's handle to the list maintained by the worker thread.  \n  \n```\nHRESULT AddHandle(\n    HANDLE hObject,\n    IWorkerThreadClient* pClient,\n    DWORD_PTR dwParam) throw();\n```  \n  \n### Parameters  \n `hObject`  \n The handle to a waitable object.  \n  \n `pClient`  \n The pointer to the [IWorkerThreadClient](../../atl/reference/iworkerthreadclient-interface.md) interface on the object to be called when the handle is signaled.  \n  \n `dwParam`  \n The parameter to be passed to [IWorkerThreadClient::Execute](../../atl/reference/iworkerthreadclient-interface.md#iworkerthreadclient__execute) when the handle is signaled.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n [IWorkerThreadClient::Execute](../../atl/reference/iworkerthreadclient-interface.md#iworkerthreadclient__execute) will be called through `pClient` when the handle, `hObject`, is signaled.  \n  \n##  <a name=\"cworkerthread__addtimer\"></a>  CWorkerThread::AddTimer  \n Call this method to add a periodic waitable timer to the list maintained by the worker thread.  \n  \n```\nHRESULT AddTimer(\n    DWORD dwInterval,\n    IWorkerThreadClient* pClient,\n    DWORD_PTR dwParam,\n    HANDLE* phTimer) throw();\n```  \n  \n### Parameters  \n *dwInterval*  \n Specifies the period of the timer in milliseconds.  \n  \n `pClient`  \n The pointer to the [IWorkerThreadClient](../../atl/reference/iworkerthreadclient-interface.md) interface on the object to be called when the handle is signaled.  \n  \n `dwParam`  \n The parameter to be passed to [IWorkerThreadClient::Execute](../../atl/reference/iworkerthreadclient-interface.md#iworkerthreadclient__execute) when the handle is signaled.  \n  \n `phTimer`  \n [out] Address of the HANDLE variable that, on success, receives the handle to the newly created timer.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n [IWorkerThreadClient::Execute](../../atl/reference/iworkerthreadclient-interface.md#iworkerthreadclient__execute) will be called through `pClient` when the timer is signaled.  \n  \n Pass the timer handle from `phTimer` to [CWorkerThread::RemoveHandle](#cworkerthread__removehandle) to close the timer.  \n  \n##  <a name=\"cworkerthread__cworkerthread\"></a>  CWorkerThread::CWorkerThread  \n The constructor.  \n  \n```\nCWorkerThread() throw();\n```  \n  \n##  <a name=\"cworkerthread___dtorcworkerthread\"></a>  CWorkerThread::~CWorkerThread  \n The destructor.  \n  \n```\n~CWorkerThread() throw();\n```  \n  \n### Remarks  \n Calls [CWorkerThread::Shutdown](#cworkerthread__shutdown).  \n  \n##  <a name=\"cworkerthread__getthreadhandle\"></a>  CWorkerThread::GetThreadHandle  \n Call this method to get the thread handle of the worker thread.  \n  \n```\nHANDLE GetThreadHandle() throw();\n```  \n  \n### Return Value  \n Returns the thread handle or NULL if the worker thread has not been initialized.  \n  \n##  <a name=\"cworkerthread__getthreadid\"></a>  CWorkerThread::GetThreadId  \n Call this method to get the thread ID of the worker thread.  \n  \n```\nDWORD GetThreadId() throw();\n```  \n  \n### Return Value  \n Returns the thread ID or NULL if the worker thread has not been initialized.  \n  \n##  <a name=\"cworkerthread__initialize\"></a>  CWorkerThread::Initialize  \n Call this method to initialize the worker thread.  \n  \n```\nHRESULT Initialize() throw();\nHRESULT Initialize(CWorkerThread<ThreadTraits>* pThread) throw();\n```  \n  \n### Parameters  \n `pThread`  \n An existing worker thread.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n This method should be called to initialize the object after creation or after a call to [CWorkerThread::Shutdown](#cworkerthread__shutdown).  \n  \n To have two or more `CWorkerThread` objects use the same worker thread, initialize one of them without passing any arguments then pass a pointer to that object to the `Initialize` methods of the others. The objects initialized using the pointer should be shut down before the object used to initialize them.  \n  \n See [CWorkerThread::Shutdown](#cworkerthread__shutdown) for information on how that method's behavior changes when initialized using a pointer to an existing object.  \n  \n##  <a name=\"cworkerthread__removehandle\"></a>  CWorkerThread::RemoveHandle  \n Call this method to remove a handle from the list of waitable objects.  \n  \n```\nHRESULT RemoveHandle(HANDLE   hObject) throw();\n```  \n  \n### Parameters  \n `hObject`  \n The handle to remove.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n When the handle is removed [IWorkerThreadClient::CloseHandle](../../atl/reference/iworkerthreadclient-interface.md#iworkerthreadclient__closehandle) will be called on the associated object that was passed to [AddHandle](#cworkerthread__addhandle). If this call fails, `CWorkerThread` will call the Windows [CloseHandle](http://msdn.microsoft.com/library/windows/desktop/ms724211) function on the handle.  \n  \n##  <a name=\"cworkerthread__shutdown\"></a>  CWorkerThread::Shutdown  \n Call this method to shut down the worker thread.  \n  \n```\nHRESULT Shutdown(DWORD   dwWait = ATL_WORKER_THREAD_WAIT) throw();\n```  \n  \n### Parameters  \n `dwWait`  \n The time in milliseconds to wait for the worker thread to shut down.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure, such as if the timeout value, `dwWait`, is exceeded.  \n  \n### Remarks  \n To reuse the object, call [CWorkerThread::Initialize](#cworkerthread__initialize) after calling this method.  \n  \n Note that calling **Shutdown** on an object initialized with a pointer to another `CWorkerThread` object has no effect and always returns S_OK.  \n  \n## See Also  \n [DefaultThreadTraits](atl-typedefs.md#defaultthreadtraits)   \n [Classes](../../atl/reference/atl-classes.md)   \n [Multithreading: Creating Worker Threads](../../parallel/multithreading-creating-worker-threads.md)   \n [IWorkerThreadClient Interface](../../atl/reference/iworkerthreadclient-interface.md)\n"}