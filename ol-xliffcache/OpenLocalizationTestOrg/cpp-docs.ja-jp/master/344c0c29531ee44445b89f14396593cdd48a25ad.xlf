<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">344c0c29531ee44445b89f14396593cdd48a25ad</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\input-streams.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c18a3a6c11aa7b78acc45a794c59085a2b4f222a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5bf37ede297602b8f22b15c12e03f03c2eb1440f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Input Streams | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Input Streams</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An input stream object is a source of bytes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The three most important input stream classes are <bpt id="p1">[</bpt>istream<ept id="p1">](../standard-library/basic-istream-class.md)</ept>, <bpt id="p2">[</bpt>ifstream<ept id="p2">](../standard-library/basic-ifstream-class.md)</ept>, and <bpt id="p3">[</bpt>istringstream<ept id="p3">](../standard-library/basic-istringstream-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`istream`</ph> class is best used for sequential text-mode input.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can configure objects of class <ph id="ph1">`istream`</ph> for buffered or unbuffered operation.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>All functionality of the base class, <ph id="ph1">`ios`</ph>, is included in <ph id="ph2">`istream`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You will rarely construct objects from class <ph id="ph1">`istream`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Instead, you will generally use the predefined <ph id="ph1">`cin`</ph> object, which is actually an object of class <bpt id="p1">[</bpt>ostream<ept id="p1">](../standard-library/basic-ostream-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In some cases, you can assign <ph id="ph1">`cin`</ph> to other stream objects after program startup.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ifstream`</ph> class supports disk file input.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If you need an input-only disk file, construct an object of class <ph id="ph1">`ifstream`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can specify binary or text-mode data.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If you specify a filename in the constructor, the file is automatically opened when the object is constructed.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Otherwise, you can use the <ph id="ph1">`open`</ph> function after invoking the default constructor.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Many formatting options and member functions apply to <ph id="ph1">`ifstream`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>All functionality of the base classes <ph id="ph1">`ios`</ph> and <ph id="ph2">`istream`</ph> is included in <ph id="ph3">`ifstream`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Like the library function <ph id="ph1">`sscanf_s`</ph>, the <ph id="ph2">`istringstream`</ph> class supports input from in-memory strings.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To extract data from a character array that has a null terminator, allocate and initialize the string, then construct an object of class <ph id="ph1">`istringstream`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In This Section</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Constructing Input Stream Objects</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Using Extraction Operators</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Testing for Extraction Errors</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Input Stream Manipulators</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Input Stream Member Functions</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Overloading the &gt;&gt; Operator for Your Own Classes</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>iostream Programming</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>