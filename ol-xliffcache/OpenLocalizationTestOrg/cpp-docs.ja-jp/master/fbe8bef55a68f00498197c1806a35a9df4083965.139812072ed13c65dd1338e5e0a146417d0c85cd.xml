{"nodes":[{"pos":[12,102],"content":"vsnprintf_s, _vsnprintf_s, _vsnprintf_s_l, _vsnwprintf_s, _vsnwprintf_s_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"vsnprintf_s, _vsnprintf_s, _vsnprintf_s_l, _vsnwprintf_s, _vsnwprintf_s_l | Microsoft Docs","pos":[0,90]}]},{"content":"vsnprintf_s, _vsnprintf_s, _vsnprintf_s_l, _vsnwprintf_s, _vsnwprintf_s_l","pos":[1418,1491]},{"content":"Write formatted output using a pointer to a list of arguments.","pos":[1492,1554]},{"content":"These are versions of <bpt id=\"p1\">[</bpt>vsnprintf, _vsnprintf, _vsnprintf_l, _vsnwprintf, _vsnwprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l.md)</ept> with security enhancements as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1555,1868],"source":" These are versions of [vsnprintf, _vsnprintf, _vsnprintf_l, _vsnwprintf, _vsnwprintf_l](../../c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"content":"Syntax","pos":[1877,1883]},{"content":"Parameters","pos":[2960,2970]},{"content":"Storage location for output.","pos":[2986,3014]},{"content":"The size of the <ph id=\"ph1\">`buffer`</ph> for output, as the character count.","pos":[3039,3099],"source":" The size of the `buffer` for output, as the character count."},{"content":"Maximum number of characters to write (not including the terminating null), or <bpt id=\"p1\">[</bpt>_TRUNCATE<ept id=\"p1\">](../../c-runtime-library/truncate.md)</ept>.","pos":[3117,3245],"source":" Maximum number of characters to write (not including the terminating null), or [_TRUNCATE](../../c-runtime-library/truncate.md)."},{"content":"Format specification.","pos":[3264,3285]},{"content":"Pointer to list of arguments.","pos":[3304,3333]},{"content":"The locale to use.","pos":[3352,3370]},{"pos":[3377,3512],"content":"For more information, see <bpt id=\"p1\">[</bpt>Format Specifications<ept id=\"p1\">](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)</ept>.","source":"For more information, see [Format Specifications](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)."},{"content":"Return Value","pos":[3521,3533]},{"content":",<ph id=\"ph1\">`_vsnprintf_s`</ph> and <ph id=\"ph2\">`_vsnwprintf_s`</ph> return the number of characters written, not including the terminating null, or a negative value if an output error occurs.","pos":[3550,3709],"source":",`_vsnprintf_s` and `_vsnwprintf_s` return the number of characters written, not including the terminating null, or a negative value if an output error occurs."},{"content":"is identical to <ph id=\"ph1\">`_vsnprintf_s`</ph>.","pos":[3724,3755],"source":" is identical to `_vsnprintf_s`."},{"content":"is included for compliance to the ANSI standard.","pos":[3770,3818]},{"content":"is retained for backward compatibility.","pos":[3832,3871]},{"content":"If the storage required to store the data and a terminating null exceeds <ph id=\"ph1\">`sizeOfBuffer`</ph>, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>, unless <ph id=\"ph2\">`count`</ph> is <bpt id=\"p2\">[</bpt>_TRUNCATE<ept id=\"p2\">](../../c-runtime-library/truncate.md)</ept>, in which case as much of the string as will fit in <ph id=\"ph3\">`buffer`</ph> is written and -1 returned.","pos":[3878,4253],"source":"If the storage required to store the data and a terminating null exceeds `sizeOfBuffer`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md), unless `count` is [_TRUNCATE](../../c-runtime-library/truncate.md), in which case as much of the string as will fit in `buffer` is written and -1 returned."},{"content":"If execution continues after the invalid parameter handler, these functions set <ph id=\"ph1\">`buffer`</ph> to an empty string, set <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`ERANGE`</ph>, and return -1.","pos":[4254,4402],"source":" If execution continues after the invalid parameter handler, these functions set `buffer` to an empty string, set `errno` to `ERANGE`, and return -1."},{"content":"If <ph id=\"ph1\">`buffer`</ph> or <ph id=\"ph2\">`format`</ph> is a <ph id=\"ph3\">`NULL`</ph> pointer, or if <ph id=\"ph4\">`count`</ph> is less than or equal to zero, the invalid parameter handler is invoked.","pos":[4409,4540],"source":"If `buffer` or `format` is a `NULL` pointer, or if `count` is less than or equal to zero, the invalid parameter handler is invoked."},{"content":"If execution is allowed to continue, these functions set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and return -1.","pos":[4541,4632],"source":" If execution is allowed to continue, these functions set `errno` to `EINVAL` and return -1."},{"content":"Error Conditions","pos":[4642,4658]},{"content":"Return","pos":[4677,4683]},{"pos":[4754,4756],"content":"is"},{"content":"-1","pos":[4764,4766]},{"pos":[4789,4791],"content":"is"},{"content":"-1","pos":[4799,4801]},{"pos":[4823,4827],"content":"&lt;= 0","source":" <= 0"},{"content":"-1","pos":[4828,4830]},{"pos":[4859,4897],"content":"too small (and <ph id=\"ph1\">`count`</ph> != <ph id=\"ph2\">`_TRUNCATE`</ph>)","source":" too small (and `count` != `_TRUNCATE`)"},{"pos":[4898,4938],"content":"-1 (and <ph id=\"ph1\">`buffer`</ph> set to an empty string)","source":"-1 (and `buffer` set to an empty string)"},{"content":"Remarks","pos":[4957,4964]},{"pos":[4968,5164],"content":"Each of these functions takes a pointer to an argument list, then formats and writes up to <ph id=\"ph1\">`count`</ph> characters of the given data to the memory pointed to by <ph id=\"ph2\">`buffer`</ph> and appends a terminating null.","source":"Each of these functions takes a pointer to an argument list, then formats and writes up to `count` characters of the given data to the memory pointed to by `buffer` and appends a terminating null."},{"content":"If <ph id=\"ph1\">`count`</ph> is <bpt id=\"p1\">[</bpt>_TRUNCATE<ept id=\"p1\">](../../c-runtime-library/truncate.md)</ept>, then these functions write as much of the string as will fit in <ph id=\"ph2\">`buffer`</ph> while leaving room for a terminating null.","pos":[5171,5350],"source":"If `count` is [_TRUNCATE](../../c-runtime-library/truncate.md), then these functions write as much of the string as will fit in `buffer` while leaving room for a terminating null."},{"content":"If the entire string (with terminating null) fits in <ph id=\"ph1\">`buffer`</ph>, then these functions return the number of characters written (not including the terminating null); otherwise, these functions return -1 to indicate that truncation occurred.","pos":[5351,5587],"source":" If the entire string (with terminating null) fits in `buffer`, then these functions return the number of characters written (not including the terminating null); otherwise, these functions return -1 to indicate that truncation occurred."},{"pos":[5594,5750],"content":"The versions of these functions with the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current thread locale.","source":"The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale."},{"pos":[5758,5938],"content":"[!IMPORTANT]\n Ensure that `format` is not a user-defined string. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).","leadings":["","> "],"nodes":[{"content":" Ensure that `format` is not a user-defined string. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).","pos":[13,178],"nodes":[{"content":"Ensure that <ph id=\"ph1\">`format`</ph> is not a user-defined string.","pos":[1,51],"source":" Ensure that `format` is not a user-defined string."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Avoiding Buffer Overruns<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms717795)</ept>.","pos":[52,165],"source":" For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795)."}]}]},{"pos":[5946,6093],"content":"[!NOTE]\n To ensure that there is room for the terminating null, be sure that `count` is strictly less than the buffer length, or use `_TRUNCATE`.","leadings":["","> "],"nodes":[{"content":"To ensure that there is room for the terminating null, be sure that <ph id=\"ph1\">`count`</ph> is strictly less than the buffer length, or use <ph id=\"ph2\">`_TRUNCATE`</ph>.","pos":[9,145],"source":" To ensure that there is room for the terminating null, be sure that `count` is strictly less than the buffer length, or use `_TRUNCATE`."}]},{"content":"In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically (eliminating the need to specify a size argument) and they can automatically replace older, non-secure functions with their newer, secure counterparts.","pos":[6100,6370]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[6371,6479],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"content":"Generic-Text Routine Mappings","pos":[6489,6518]},{"content":"TCHAR.H routine","pos":[6525,6540]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[6541,6569],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[6570,6583]},{"content":"_UNICODE defined","pos":[6584,6600]},{"content":".NET Framework Equivalent","pos":[6858,6883]},{"content":"Not applicable.","pos":[6887,6902]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[6903,6950],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[6951,7076],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"Requirements","pos":[7085,7097]},{"content":"Routine","pos":[7104,7111]},{"content":"Required header","pos":[7112,7127]},{"content":"Optional headers","pos":[7128,7144]},{"content":"stdio.h&gt; and <ph id=\"ph1\">\\&lt;</ph>stdarg.h&gt;","pos":[7228,7252],"source":"stdio.h> and \\<stdarg.h>"},{"content":"varargs.h&gt;*","pos":[7255,7266],"source":"varargs.h>*"},{"pos":[7285,7286],"content":","},{"content":"stdio.h&gt; and <ph id=\"ph1\">\\&lt;</ph>stdarg.h&gt;","pos":[7306,7330],"source":"stdio.h> and \\<stdarg.h>"},{"content":"varargs.h&gt;*","pos":[7333,7344],"source":"varargs.h>*"},{"pos":[7364,7365],"content":","},{"content":"stdio.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;, and <ph id=\"ph2\">\\&lt;</ph>stdarg.h&gt;","pos":[7386,7425],"source":"stdio.h> or \\<wchar.h>, and \\<stdarg.h>"},{"content":"varargs.h&gt;*","pos":[7428,7439],"source":"varargs.h>*"},{"content":"Required for UNIX V compatibility.","pos":[7450,7484]},{"pos":[7491,7615],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[7624,7631]},{"content":"See Also","pos":[8301,8309]},{"content":"Stream I/O","pos":[8314,8324]},{"content":"vprintf Functions","pos":[8370,8387]},{"content":"fprintf, _fprintf_l, fwprintf, _fwprintf_l","pos":[8440,8482]},{"content":"printf, _printf_l, wprintf, _wprintf_l","pos":[8565,8603]},{"content":"sprintf, _sprintf_l, swprintf, _swprintf_l, <ph id=\"ph1\">\\_</ph>_swprintf_l","pos":[8682,8739],"source":"sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l"},{"content":"va_arg, va_copy, va_end, va_start","pos":[8833,8866]}],"content":"---\ntitle: \"vsnprintf_s, _vsnprintf_s, _vsnprintf_s_l, _vsnwprintf_s, _vsnwprintf_s_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_vsnwprintf_s\"\n  - \"_vsnwprintf_s_l\"\n  - \"_vsnprintf_s\"\n  - \"vsnprintf_s\"\n  - \"_vsnprintf_s_l\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_vsnprintf_s\"\n  - \"_vsntprintf_s\"\n  - \"_vsnwprintf_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"vsnwprintf_s function\"\n  - \"_vsntprintf_s function\"\n  - \"_vsntprintf_s_l function\"\n  - \"vsntprintf_s function\"\n  - \"vsnwprintf_s_l function\"\n  - \"vsnprintf_s_l function\"\n  - \"vsntprintf_s_l function\"\n  - \"_vsnwprintf_s_l function\"\n  - \"_vsnprintf_s function\"\n  - \"vsnprintf_s function\"\n  - \"_vsnprintf_s_l function\"\n  - \"_vsnwprintf_s function\"\n  - \"formatted text [C++]\"\nms.assetid: 147ccfce-58c7-4681-a726-ef54ac1c604e\ncaps.latest.revision: 30\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# vsnprintf_s, _vsnprintf_s, _vsnprintf_s_l, _vsnwprintf_s, _vsnwprintf_s_l\nWrite formatted output using a pointer to a list of arguments. These are versions of [vsnprintf, _vsnprintf, _vsnprintf_l, _vsnwprintf, _vsnwprintf_l](../../c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nint vsnprintf_s(  \n   char *buffer,  \n   size_t sizeOfBuffer,  \n   size_t count,  \n   const char *format,  \n   va_list argptr   \n);  \nint _vsnprintf_s(  \n   char *buffer,  \n   size_t sizeOfBuffer,  \n   size_t count,  \n   const char *format,  \n   va_list argptr   \n);  \nint _vsnprintf_s_l(  \n   char *buffer,  \n   size_t sizeOfBuffer,  \n   size_t count,  \n   const char *format,  \n   locale_t locale,  \n   va_list argptr   \n);  \nint _vsnwprintf_s(  \n   wchar_t *buffer,  \n   size_t sizeOfBuffer,  \n   size_t count,  \n   const wchar_t *format,  \n   va_list argptr   \n);  \nint _vsnwprintf_s_l(  \n   wchar_t *buffer,  \n   size_t sizeOfBuffer,  \n   size_t count,  \n   const wchar_t *format,  \n   locale_t locale,  \n   va_list argptr   \n);  \ntemplate <size_t size>  \nint _vsnprintf_s(  \n   char (&buffer)[size],  \n   size_t count,  \n   const char *format,  \n   va_list argptr   \n); // C++ only  \ntemplate <size_t size>  \nint _vsnwprintf_s(  \n   wchar_t (&buffer)[size],  \n   size_t count,  \n   const wchar_t *format,  \n   va_list argptr   \n); // C++ only  \n```  \n  \n#### Parameters  \n `buffer`  \n Storage location for output.  \n  \n `sizeOfBuffer`  \n The size of the `buffer` for output, as the character count.  \n  \n `count`  \n Maximum number of characters to write (not including the terminating null), or [_TRUNCATE](../../c-runtime-library/truncate.md).  \n  \n `format`  \n Format specification.  \n  \n `argptr`  \n Pointer to list of arguments.  \n  \n `locale`  \n The locale to use.  \n  \n For more information, see [Format Specifications](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md).  \n  \n## Return Value  \n `vsnprintf_s`,`_vsnprintf_s` and `_vsnwprintf_s` return the number of characters written, not including the terminating null, or a negative value if an output error occurs. `vsnprintf_s` is identical to `_vsnprintf_s`. `vsnprintf_s` is included for compliance to the ANSI standard. `_vnsprintf` is retained for backward compatibility.  \n  \n If the storage required to store the data and a terminating null exceeds `sizeOfBuffer`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md), unless `count` is [_TRUNCATE](../../c-runtime-library/truncate.md), in which case as much of the string as will fit in `buffer` is written and -1 returned. If execution continues after the invalid parameter handler, these functions set `buffer` to an empty string, set `errno` to `ERANGE`, and return -1.  \n  \n If `buffer` or `format` is a `NULL` pointer, or if `count` is less than or equal to zero, the invalid parameter handler is invoked. If execution is allowed to continue, these functions set `errno` to `EINVAL` and return -1.  \n  \n### Error Conditions  \n  \n|`Condition`|Return|`errno`|  \n|-----------------|------------|-------------|  \n|`buffer` is `NULL`|-1|`EINVAL`|  \n|`format` is `NULL`|-1|`EINVAL`|  \n|`count` <= 0|-1|`EINVAL`|  \n|`sizeOfBuffer` too small (and `count` != `_TRUNCATE`)|-1 (and `buffer` set to an empty string)|`ERANGE`|  \n  \n## Remarks  \n Each of these functions takes a pointer to an argument list, then formats and writes up to `count` characters of the given data to the memory pointed to by `buffer` and appends a terminating null.  \n  \n If `count` is [_TRUNCATE](../../c-runtime-library/truncate.md), then these functions write as much of the string as will fit in `buffer` while leaving room for a terminating null. If the entire string (with terminating null) fits in `buffer`, then these functions return the number of characters written (not including the terminating null); otherwise, these functions return -1 to indicate that truncation occurred.  \n  \n The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale.  \n  \n> [!IMPORTANT]\n>  Ensure that `format` is not a user-defined string. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).  \n  \n> [!NOTE]\n>  To ensure that there is room for the terminating null, be sure that `count` is strictly less than the buffer length, or use `_TRUNCATE`.  \n  \n In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically (eliminating the need to specify a size argument) and they can automatically replace older, non-secure functions with their newer, secure counterparts. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_vsntprintf_s`|`_vsnprintf_s`|`_vsnprintf_s`|`_vsnwprintf_s`|  \n|`_vsntprintf_s_l`|`_vsnprintf_s_l`|`_vsnprintf_s_l`|`_vsnwprintf_s_l`|  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## Requirements  \n  \n|Routine|Required header|Optional headers|  \n|-------------|---------------------|----------------------|  \n|`vsnprintf_s`|\\<stdio.h> and \\<stdarg.h>|\\<varargs.h>*|  \n|`_vsnprintf_s`, `_vsnprintf_s_l`|\\<stdio.h> and \\<stdarg.h>|\\<varargs.h>*|  \n|`_vsnwprintf_s`, `_vsnwprintf_s_l`|\\<stdio.h> or \\<wchar.h>, and \\<stdarg.h>|\\<varargs.h>*|  \n  \n \\* Required for UNIX V compatibility.  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_vsnprintf_s.cpp  \n#include <stdio.h>  \n#include <wtypes.h>  \n  \nvoid FormatOutput(LPCSTR formatstring, ...)   \n{  \n   int nSize = 0;  \n   char buff[10];  \n   memset(buff, 0, sizeof(buff));  \n   va_list args;  \n   va_start(args, formatstring);  \n   nSize = vsnprintf_s( buff, _countof(buff), _TRUNCATE, formatstring, args);  \n   printf(\"nSize: %d, buff: %s\\n\", nSize, buff);  \n}  \n  \nint main() {  \n   FormatOutput(\"%s %s\", \"Hi\", \"there\");  \n   FormatOutput(\"%s %s\", \"Hi\", \"there!\");  \n   FormatOutput(\"%s %s\", \"Hi\", \"there!!\");  \n}  \n```  \n  \n```Output  \nnSize: 8, buff: Hi there  \nnSize: 9, buff: Hi there!  \nnSize: -1, buff: Hi there!  \n```  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [vprintf Functions](../../c-runtime-library/vprintf-functions.md)   \n [fprintf, _fprintf_l, fwprintf, _fwprintf_l](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)   \n [printf, _printf_l, wprintf, _wprintf_l](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)   \n [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)   \n [va_arg, va_copy, va_end, va_start](../../c-runtime-library/reference/va-arg-va-copy-va-end-va-start.md)"}