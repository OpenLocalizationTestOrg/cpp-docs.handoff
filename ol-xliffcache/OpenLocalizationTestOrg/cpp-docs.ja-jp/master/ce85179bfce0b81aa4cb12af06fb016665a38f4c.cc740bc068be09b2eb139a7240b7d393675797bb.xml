{"nodes":[{"pos":[12,50],"content":"CMapStringToPtr Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMapStringToPtr Class | Microsoft Docs","pos":[0,38]}]},{"content":"CMapStringToPtr Class","pos":[699,720]},{"pos":[721,779],"content":"Supports maps of void pointers keyed by <ph id=\"ph1\">`CString`</ph> objects.","source":"Supports maps of void pointers keyed by `CString` objects."},{"content":"Syntax","pos":[788,794]},{"content":"Members","pos":[859,866]},{"content":"The member functions of <ph id=\"ph1\">`CMapStringToPtr`</ph> are similar to the member functions of class <bpt id=\"p1\">[</bpt>CMapStringToOb<ept id=\"p1\">](../../mfc/reference/cmapstringtoob-class.md)</ept>.","pos":[870,1019],"source":"The member functions of `CMapStringToPtr` are similar to the member functions of class [CMapStringToOb](../../mfc/reference/cmapstringtoob-class.md)."},{"content":"Because of this similarity, you can use the <ph id=\"ph1\">`CMapStringToOb`</ph> reference documentation for member function specifics.","pos":[1020,1135],"source":" Because of this similarity, you can use the `CMapStringToOb` reference documentation for member function specifics."},{"content":"Wherever you see a <ph id=\"ph1\">`CObject`</ph> pointer as a function parameter or return value, substitute a pointer to <ph id=\"ph2\">`void`</ph>.","pos":[1136,1245],"source":" Wherever you see a `CObject` pointer as a function parameter or return value, substitute a pointer to `void`."},{"content":"for example, translates to","pos":[1344,1370]},{"content":"Public Constructors","pos":[1466,1485]},{"content":"Name","pos":[1492,1496]},{"content":"Description","pos":[1497,1508]},{"content":"CMapStringToOb::CMapStringToOb","pos":[1547,1577]},{"content":"Constructor.","pos":[1655,1667]},{"content":"Public Methods","pos":[1678,1692]},{"content":"Name","pos":[1699,1703]},{"content":"Description","pos":[1704,1715]},{"content":"CMapStringToOb::GetCount","pos":[1754,1778]},{"content":"Returns the number of elements in this map.","pos":[1850,1893]},{"content":"CMapStringToOb::GetHashTableSize","pos":[1899,1931]},{"content":"Determines the current number of elements in the hash table.","pos":[2011,2071]},{"content":"CMapStringToOb::GetNextAssoc","pos":[2077,2105]},{"content":"Gets the next element for iterating.","pos":[2181,2217]},{"content":"CMapStringToOb::GetSize","pos":[2223,2246]},{"content":"Returns the number of elements in this map.","pos":[2317,2360]},{"content":"CMapStringToOb::GetStartPosition","pos":[2366,2398]},{"content":"Returns the position of the first element.","pos":[2478,2520]},{"content":"CMapStringToOb::HashKey","pos":[2526,2549]},{"content":"Calculates the hash value of a specified key.","pos":[2620,2665]},{"content":"CMapStringToOb::InitHashTable","pos":[2671,2700]},{"content":"Initializes the hash table.","pos":[2777,2804]},{"content":"CMapStringToOb::IsEmpty","pos":[2810,2833]},{"content":"Tests for the empty-map condition (no elements).","pos":[2904,2952]},{"content":"CMapStringToOb::Lookup","pos":[2958,2980]},{"content":"Looks up a void pointer based on the void pointer key.","pos":[3050,3104]},{"content":"The pointer value, not the entity it points to, is used for the key comparison.","pos":[3105,3184]},{"content":"CMapStringToOb::LookupKey","pos":[3190,3215]},{"content":"Returns a reference to the key associated with the specified key value.","pos":[3288,3359]},{"content":"CMapStringToOb::RemoveAll","pos":[3365,3390]},{"content":"Removes all the elements from this map.","pos":[3463,3502]},{"content":"CMapStringToOb::RemoveKey","pos":[3508,3533]},{"content":"Removes an element specified by a key.","pos":[3606,3644]},{"content":"CMapStringToOb::SetAt","pos":[3650,3671]},{"content":"Inserts an element into the map; replaces an existing element if a matching key is found.","pos":[3740,3829]},{"content":"Public Operators","pos":[3840,3856]},{"content":"Name","pos":[3863,3867]},{"content":"Description","pos":[3868,3879]},{"content":"CMapStringToOb::operator [ ]","pos":[3918,3946]},{"pos":[4021,4089],"content":"Inserts an element into the map — operator substitution for <ph id=\"ph1\">`SetAt`</ph>.","source":"Inserts an element into the map — operator substitution for `SetAt`."},{"content":"Remarks","pos":[4099,4106]},{"content":"incorporates the <ph id=\"ph1\">`IMPLEMENT_DYNAMIC`</ph> macro to support run-time type access and dumping to a <ph id=\"ph2\">`CDumpContext`</ph> object.","pos":[4128,4242],"source":" incorporates the `IMPLEMENT_DYNAMIC` macro to support run-time type access and dumping to a `CDumpContext` object."},{"content":"If you need a dump of individual map elements, you must set the depth of the dump context to 1 or greater.","pos":[4243,4349]},{"content":"String-to-pointer maps may not be serialized.","pos":[4356,4401]},{"pos":[4408,4538],"content":"When a <ph id=\"ph1\">`CMapStringToPtr`</ph> object is deleted, or when its elements are removed, the <ph id=\"ph2\">`CString`</ph> key objects and the words are removed.","source":"When a `CMapStringToPtr` object is deleted, or when its elements are removed, the `CString` key objects and the words are removed."},{"content":"Inheritance Hierarchy","pos":[4547,4568]},{"content":"CObject","pos":[4573,4580]},{"content":"Requirements","pos":[4652,4664]},{"pos":[4668,4689],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxcoll.h","source":"**Header:** afxcoll.h"},{"content":"See Also","pos":[4698,4706]},{"content":"CObject Class","pos":[4711,4724]},{"content":"Hierarchy Chart","pos":[4769,4784]}],"content":"---\ntitle: \"CMapStringToPtr Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMapStringToPtr\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"collection classes, string mapping\"\n  - \"strings [C++], class for mapping\"\n  - \"CMapStringToPtr class\"\nms.assetid: 1ac11143-eb0a-4511-a662-2df0d1d9005b\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMapStringToPtr Class\nSupports maps of void pointers keyed by `CString` objects.  \n  \n## Syntax  \n  \n```  \nclass CMapStringToPtr : public CObject  \n```  \n  \n## Members  \n The member functions of `CMapStringToPtr` are similar to the member functions of class [CMapStringToOb](../../mfc/reference/cmapstringtoob-class.md). Because of this similarity, you can use the `CMapStringToOb` reference documentation for member function specifics. Wherever you see a `CObject` pointer as a function parameter or return value, substitute a pointer to `void`.  \n  \n `BOOL CMapStringToOb::Lookup( const char* <key>,`  \n  \n `CObject*& <rValue> ) const;`  \n  \n for example, translates to  \n  \n `BOOL CMapStringToPtr::Lookup( LPCTSTR <key>, void*& <rValue> )`  \n  \n `const;`  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMapStringToOb::CMapStringToOb](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__cmapstringtoob)|Constructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMapStringToOb::GetCount](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__getcount)|Returns the number of elements in this map.|  \n|[CMapStringToOb::GetHashTableSize](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__gethashtablesize)|Determines the current number of elements in the hash table.|  \n|[CMapStringToOb::GetNextAssoc](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__getnextassoc)|Gets the next element for iterating.|  \n|[CMapStringToOb::GetSize](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__getsize)|Returns the number of elements in this map.|  \n|[CMapStringToOb::GetStartPosition](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__getstartposition)|Returns the position of the first element.|  \n|[CMapStringToOb::HashKey](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__hashkey)|Calculates the hash value of a specified key.|  \n|[CMapStringToOb::InitHashTable](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__inithashtable)|Initializes the hash table.|  \n|[CMapStringToOb::IsEmpty](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__isempty)|Tests for the empty-map condition (no elements).|  \n|[CMapStringToOb::Lookup](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__lookup)|Looks up a void pointer based on the void pointer key. The pointer value, not the entity it points to, is used for the key comparison.|  \n|[CMapStringToOb::LookupKey](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__lookupkey)|Returns a reference to the key associated with the specified key value.|  \n|[CMapStringToOb::RemoveAll](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__removeall)|Removes all the elements from this map.|  \n|[CMapStringToOb::RemoveKey](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__removekey)|Removes an element specified by a key.|  \n|[CMapStringToOb::SetAt](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__setat)|Inserts an element into the map; replaces an existing element if a matching key is found.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMapStringToOb::operator [ ]](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__operator_at)|Inserts an element into the map — operator substitution for `SetAt`.|  \n  \n## Remarks  \n `CMapStringToPtr` incorporates the `IMPLEMENT_DYNAMIC` macro to support run-time type access and dumping to a `CDumpContext` object. If you need a dump of individual map elements, you must set the depth of the dump context to 1 or greater.  \n  \n String-to-pointer maps may not be serialized.  \n  \n When a `CMapStringToPtr` object is deleted, or when its elements are removed, the `CString` key objects and the words are removed.  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n `CMapStringToPtr`  \n  \n## Requirements  \n **Header:** afxcoll.h  \n  \n## See Also  \n [CObject Class](../../mfc/reference/cobject-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)\n\n\n\n"}