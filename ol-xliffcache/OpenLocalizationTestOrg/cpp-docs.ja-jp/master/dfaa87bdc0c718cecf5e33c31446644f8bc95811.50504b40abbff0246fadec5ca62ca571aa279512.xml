{"nodes":[{"pos":[12,39],"content":"CUrl Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CUrl Class | Microsoft Docs","pos":[0,27]}]},{"pos":[617,627],"content":"CUrl Class","linkify":"CUrl Class","nodes":[{"content":"CUrl Class","pos":[0,10]}]},{"content":"This class represents a URL.","pos":[628,656]},{"content":"It allows you to manipulate each element of the URL independently of the others whether parsing an existing URL string or building a string from scratch.","pos":[657,810]},{"pos":[818,928],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the Windows Runtime.","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the Windows Runtime.","pos":[14,108]}]},{"pos":[937,943],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[976,983],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[993,1012],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1019,1023]},{"content":"Description","pos":[1024,1035]},{"pos":[1073,1098],"content":"<bpt id=\"p1\">[</bpt>CUrl::CUrl<ept id=\"p1\">](#curl__curl)</ept>","source":"[CUrl::CUrl](#curl__curl)"},{"content":"The constructor.","pos":[1099,1115]},{"pos":[1120,1151],"content":"<bpt id=\"p1\">[</bpt>CUrl::~CUrl<ept id=\"p1\">](#curl___dtorcurl)</ept>","source":"[CUrl::~CUrl](#curl___dtorcurl)"},{"content":"The destructor.","pos":[1152,1167]},{"pos":[1178,1192],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1199,1203]},{"content":"Description","pos":[1204,1215]},{"pos":[1253,1294],"content":"<bpt id=\"p1\">[</bpt>CUrl::Canonicalize<ept id=\"p1\">](#curl__canonicalize)</ept>","source":"[CUrl::Canonicalize](#curl__canonicalize)"},{"content":"Call this method to convert the URL string to canonical form.","pos":[1295,1356]},{"pos":[1361,1388],"content":"<bpt id=\"p1\">[</bpt>CUrl::Clear<ept id=\"p1\">](#curl__clear)</ept>","source":"[CUrl::Clear](#curl__clear)"},{"content":"Call this method to clear all of the URL fields.","pos":[1389,1437]},{"pos":[1442,1475],"content":"<bpt id=\"p1\">[</bpt>CUrl::CrackUrl<ept id=\"p1\">](#curl__crackurl)</ept>","source":"[CUrl::CrackUrl](#curl__crackurl)"},{"content":"Call this method to decode and parse the URL.","pos":[1476,1521]},{"pos":[1526,1561],"content":"<bpt id=\"p1\">[</bpt>CUrl::CreateUrl<ept id=\"p1\">](#curl__createurl)</ept>","source":"[CUrl::CreateUrl](#curl__createurl)"},{"content":"Call this method to create the URL.","pos":[1562,1597]},{"pos":[1602,1643],"content":"<bpt id=\"p1\">[</bpt>CUrl::GetExtraInfo<ept id=\"p1\">](#curl__getextrainfo)</ept>","source":"[CUrl::GetExtraInfo](#curl__getextrainfo)"},{"pos":[1644,1728],"content":"Call this method to get extra information (such as <bpt id=\"p1\">*</bpt>text<ept id=\"p1\">*</ept> or # <bpt id=\"p2\">*</bpt>text<ept id=\"p2\">*</ept>) from the URL.","source":"Call this method to get extra information (such as *text* or # *text*) from the URL."},{"pos":[1733,1786],"content":"<bpt id=\"p1\">[</bpt>CUrl::GetExtraInfoLength<ept id=\"p1\">](#curl__getextrainfolength)</ept>","source":"[CUrl::GetExtraInfoLength](#curl__getextrainfolength)"},{"pos":[1787,1901],"content":"Call this method to get the length of the extra information (such as <bpt id=\"p1\">*</bpt>text<ept id=\"p1\">*</ept> or # <bpt id=\"p2\">*</bpt>text<ept id=\"p2\">*</ept>) to retrieve from the URL.","source":"Call this method to get the length of the extra information (such as *text* or # *text*) to retrieve from the URL."},{"pos":[1906,1945],"content":"<bpt id=\"p1\">[</bpt>CUrl::GetHostName<ept id=\"p1\">](#curl__gethostname)</ept>","source":"[CUrl::GetHostName](#curl__gethostname)"},{"content":"Call this method to get the host name from the URL.","pos":[1946,1997]},{"pos":[2002,2053],"content":"<bpt id=\"p1\">[</bpt>CUrl::GetHostNameLength<ept id=\"p1\">](#curl__gethostnamelength)</ept>","source":"[CUrl::GetHostNameLength](#curl__gethostnamelength)"},{"content":"Call this method to get the length of the host name.","pos":[2054,2106]},{"pos":[2111,2150],"content":"<bpt id=\"p1\">[</bpt>CUrl::GetPassword<ept id=\"p1\">](#curl__getpassword)</ept>","source":"[CUrl::GetPassword](#curl__getpassword)"},{"content":"Call this method to get the password from the URL.","pos":[2151,2201]},{"pos":[2206,2257],"content":"<bpt id=\"p1\">[</bpt>CUrl::GetPasswordLength<ept id=\"p1\">](#curl__getpasswordlength)</ept>","source":"[CUrl::GetPasswordLength](#curl__getpasswordlength)"},{"content":"Call this method to get the length of the password.","pos":[2258,2309]},{"pos":[2314,2357],"content":"<bpt id=\"p1\">[</bpt>CUrl::GetPortNumber<ept id=\"p1\">](#curl__getportnumber)</ept>","source":"[CUrl::GetPortNumber](#curl__getportnumber)"},{"content":"Call this method to get the port number in terms of ATL_URL_PORT.","pos":[2358,2423]},{"pos":[2428,2463],"content":"<bpt id=\"p1\">[</bpt>CUrl::GetScheme<ept id=\"p1\">](#curl__getscheme)</ept>","source":"[CUrl::GetScheme](#curl__getscheme)"},{"content":"Call this method to get the URL scheme.","pos":[2464,2503]},{"pos":[2508,2551],"content":"<bpt id=\"p1\">[</bpt>CUrl::GetSchemeName<ept id=\"p1\">](#curl__getschemename)</ept>","source":"[CUrl::GetSchemeName](#curl__getschemename)"},{"content":"Call this method to get the URL scheme name.","pos":[2552,2596]},{"pos":[2601,2656],"content":"<bpt id=\"p1\">[</bpt>CUrl::GetSchemeNameLength<ept id=\"p1\">](#curl__getschemenamelength)</ept>","source":"[CUrl::GetSchemeNameLength](#curl__getschemenamelength)"},{"content":"Call this method to get the length of the URL scheme name.","pos":[2657,2715]},{"pos":[2720,2761],"content":"<bpt id=\"p1\">[</bpt>CUrl::GetUrlLength<ept id=\"p1\">](#curl__geturllength)</ept>","source":"[CUrl::GetUrlLength](#curl__geturllength)"},{"content":"Call this method to get the URL length.","pos":[2762,2801]},{"pos":[2806,2843],"content":"<bpt id=\"p1\">[</bpt>CUrl::GetUrlPath<ept id=\"p1\">](#curl__geturlpath)</ept>","source":"[CUrl::GetUrlPath](#curl__geturlpath)"},{"content":"Call this method to get the URL path.","pos":[2844,2881]},{"pos":[2886,2935],"content":"<bpt id=\"p1\">[</bpt>CUrl::GetUrlPathLength<ept id=\"p1\">](#curl__geturlpathlength)</ept>","source":"[CUrl::GetUrlPathLength](#curl__geturlpathlength)"},{"content":"Call this method to get the URL path length.","pos":[2936,2980]},{"pos":[2985,3024],"content":"<bpt id=\"p1\">[</bpt>CUrl::GetUserName<ept id=\"p1\">](#curl__getusername)</ept>","source":"[CUrl::GetUserName](#curl__getusername)"},{"content":"Call this method to get the user name from the URL.","pos":[3025,3076]},{"pos":[3081,3132],"content":"<bpt id=\"p1\">[</bpt>CUrl::GetUserNameLength<ept id=\"p1\">](#curl__getusernamelength)</ept>","source":"[CUrl::GetUserNameLength](#curl__getusernamelength)"},{"content":"Call this method to get the length of the user name.","pos":[3133,3185]},{"pos":[3190,3231],"content":"<bpt id=\"p1\">[</bpt>CUrl::SetExtraInfo<ept id=\"p1\">](#curl__setextrainfo)</ept>","source":"[CUrl::SetExtraInfo](#curl__setextrainfo)"},{"pos":[3232,3318],"content":"Call this method to set the extra information (such as <bpt id=\"p1\">*</bpt>text<ept id=\"p1\">*</ept> or # <bpt id=\"p2\">*</bpt>text<ept id=\"p2\">*</ept>) of the URL.","source":"Call this method to set the extra information (such as *text* or # *text*) of the URL."},{"pos":[3323,3362],"content":"<bpt id=\"p1\">[</bpt>CUrl::SetHostName<ept id=\"p1\">](#curl__sethostname)</ept>","source":"[CUrl::SetHostName](#curl__sethostname)"},{"content":"Call this method to set the host name.","pos":[3363,3401]},{"pos":[3406,3445],"content":"<bpt id=\"p1\">[</bpt>CUrl::SetPassword<ept id=\"p1\">](#curl__setpassword)</ept>","source":"[CUrl::SetPassword](#curl__setpassword)"},{"content":"Call this method to set the password.","pos":[3446,3483]},{"pos":[3488,3531],"content":"<bpt id=\"p1\">[</bpt>CUrl::SetPortNumber<ept id=\"p1\">](#curl__setportnumber)</ept>","source":"[CUrl::SetPortNumber](#curl__setportnumber)"},{"content":"Call this method to set the port number in terms of ATL_URL_PORT.","pos":[3532,3597]},{"pos":[3602,3637],"content":"<bpt id=\"p1\">[</bpt>CUrl::SetScheme<ept id=\"p1\">](#curl__setscheme)</ept>","source":"[CUrl::SetScheme](#curl__setscheme)"},{"content":"Call this method to set the URL scheme.","pos":[3638,3677]},{"pos":[3682,3725],"content":"<bpt id=\"p1\">[</bpt>CUrl::SetSchemeName<ept id=\"p1\">](#curl__setschemename)</ept>","source":"[CUrl::SetSchemeName](#curl__setschemename)"},{"content":"Call this method to set the URL scheme name.","pos":[3726,3770]},{"pos":[3775,3812],"content":"<bpt id=\"p1\">[</bpt>CUrl::SetUrlPath<ept id=\"p1\">](#curl__seturlpath)</ept>","source":"[CUrl::SetUrlPath](#curl__seturlpath)"},{"content":"Call this method to set the URL path.","pos":[3813,3850]},{"pos":[3855,3894],"content":"<bpt id=\"p1\">[</bpt>CUrl::SetUserName<ept id=\"p1\">](#curl__setusername)</ept>","source":"[CUrl::SetUserName](#curl__setusername)"},{"content":"Call this method to set the user name.","pos":[3895,3933]},{"pos":[3944,3960],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[3967,3971]},{"content":"Description","pos":[3972,3983]},{"pos":[4021,4059],"content":"<bpt id=\"p1\">[</bpt>CUrl::operator =<ept id=\"p1\">](#curl__operator_eq)</ept>","source":"[CUrl::operator =](#curl__operator_eq)"},{"pos":[4060,4125],"content":"Assigns the specified <ph id=\"ph1\">`CUrl`</ph> object to the current <ph id=\"ph2\">`CUrl`</ph> object.","source":"Assigns the specified `CUrl` object to the current `CUrl` object."},{"pos":[4135,4142],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`CUrl`</ph> allows you to manipulate the fields of a URL, such as the path or port number.","pos":[4146,4231],"source":"`CUrl` allows you to manipulate the fields of a URL, such as the path or port number."},{"content":"<ph id=\"ph1\">`CUrl`</ph> understands URLs of the following form:","pos":[4232,4278],"source":"`CUrl` understands URLs of the following form:"},{"content":"<ph id=\"ph1\">\\&lt;</ph>Scheme&gt;://<ph id=\"ph2\">\\&lt;</ph>UserName&gt;:<ph id=\"ph3\">\\&lt;</ph><ph id=\"ph4\">Password&gt;@</ph><ph id=\"ph5\">\\&lt;</ph>HostName&gt;:<ph id=\"ph6\">\\&lt;</ph>PortNumber&gt;/<ph id=\"ph7\">\\&lt;</ph>UrlPath&gt;<ph id=\"ph8\">\\&lt;</ph>ExtraInfo&gt;","pos":[4285,4369],"source":"\\<Scheme>://\\<UserName>:\\<Password>@\\<HostName>:\\<PortNumber>/\\<UrlPath>\\<ExtraInfo>"},{"content":"(Some fields are optional.) For example, consider this URL:","pos":[4376,4435]},{"pos":[4518,4573],"content":"<bpt id=\"p1\">[</bpt>CUrl::CrackUrl<ept id=\"p1\">](#curl__crackurl)</ept> parses it as follows:","source":"[CUrl::CrackUrl](#curl__crackurl) parses it as follows:"},{"pos":[4583,4646],"content":"Scheme: \"http\" or <bpt id=\"p1\">[</bpt>ATL_URL_SCHEME_HTTP<ept id=\"p1\">](atl-url-scheme-enum.md)</ept>","source":"Scheme: \"http\" or [ATL_URL_SCHEME_HTTP](atl-url-scheme-enum.md)"},{"content":"UserName: \"someone\"","pos":[4656,4675]},{"content":"Password: \"secret\"","pos":[4685,4703]},{"content":"HostName: \"www.microsoft.com\"","pos":[4713,4742]},{"content":"PortNumber: 80","pos":[4752,4766]},{"content":"UrlPath: \"visualc/stuff.htm\"","pos":[4776,4804]},{"content":"ExtraInfo: \"#contents\"","pos":[4814,4836]},{"content":"To manipulate the UrlPath field (for instance), you would use <bpt id=\"p1\">[</bpt>GetUrlPath<ept id=\"p1\">](#curl__geturlpath)</ept>, <bpt id=\"p2\">[</bpt>GetUrlPathLength<ept id=\"p2\">](#curl__geturlpathlength)</ept>, and <bpt id=\"p3\">[</bpt>SetUrlPath<ept id=\"p3\">](#curl__seturlpath)</ept>.","pos":[4843,5019],"source":"To manipulate the UrlPath field (for instance), you would use [GetUrlPath](#curl__geturlpath), [GetUrlPathLength](#curl__geturlpathlength), and [SetUrlPath](#curl__seturlpath)."},{"content":"You would use <bpt id=\"p1\">[</bpt>CreateUrl<ept id=\"p1\">](#curl__createurl)</ept> to create the complete URL string.","pos":[5020,5098],"source":" You would use [CreateUrl](#curl__createurl) to create the complete URL string."},{"pos":[5107,5119],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[5123,5144],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlutil.h","source":"**Header:** atlutil.h"},{"pos":[5154,5207],"content":"<bpt id=\"p1\">&lt;a name=\"curl__canonicalize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::Canonicalize","linkify":"<a name=\"curl__canonicalize\"></a>  CUrl::Canonicalize","source":"<a name=\"curl__canonicalize\"></a>  CUrl::Canonicalize"},{"content":"Call this method to convert the URL string to canonical form.","pos":[5211,5272]},{"pos":[5348,5358],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The flags that control canonicalization.","pos":[5375,5415]},{"content":"If no flags are specified ( <ph id=\"ph1\">`dwFlags`</ph> = 0), the method converts all unsafe characters and meta sequences (such as <ph id=\"ph2\">\\\\</ph>.,\\ .., and <ph id=\"ph3\">\\\\</ph>...) to escape sequences.","pos":[5416,5571],"source":" If no flags are specified ( `dwFlags` = 0), the method converts all unsafe characters and meta sequences (such as \\\\.,\\ .., and \\\\...) to escape sequences."},{"content":"<ph id=\"ph1\">`dwFlags`</ph> can be one of the following values:","pos":[5572,5617],"source":"`dwFlags` can be one of the following values:"},{"content":"ATL_URL_BROWSER_MODE: Does not encode or decode characters after \"#\" or \"\" and does not remove trailing white space after \"\".","pos":[5627,5752]},{"content":"If this value is not specified, the entire URL is encoded and trailing white space is removed.","pos":[5753,5847]},{"content":"ATL_URL _DECODE: Converts all %XX sequences to characters, including escape sequences, before the URL is parsed.","pos":[5857,5969]},{"content":"ATL_URL _ENCODE_PERCENT: Encodes any percent signs encountered.","pos":[5979,6042]},{"content":"By default, percent signs are not encoded.","pos":[6043,6085]},{"content":"ATL_URL _ENCODE_SPACES_ONLY: Encodes spaces only.","pos":[6095,6144]},{"content":"ATL_URL _NO_ENCODE: Does not convert unsafe characters to escape sequences.","pos":[6154,6229]},{"content":"ATL_URL _NO_META: Does not remove meta sequences (such as \".\" and \"..\") from the URL.","pos":[6239,6324]},{"pos":[6334,6346],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[6350,6392]},{"pos":[6402,6409],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Converting to canonical form involves converting unsafe characters and spaces to escape sequences.","pos":[6413,6511]},{"pos":[6521,6560],"content":"<bpt id=\"p1\">&lt;a name=\"curl__clear\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::Clear","linkify":"<a name=\"curl__clear\"></a>  CUrl::Clear","source":"<a name=\"curl__clear\"></a>  CUrl::Clear"},{"content":"Call this method to clear all of the URL fields.","pos":[6564,6612]},{"pos":[6664,6709],"content":"<bpt id=\"p1\">&lt;a name=\"curl__crackurl\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::CrackUrl","linkify":"<a name=\"curl__crackurl\"></a>  CUrl::CrackUrl","source":"<a name=\"curl__crackurl\"></a>  CUrl::CrackUrl"},{"content":"Call this method to decode and parse the URL.","pos":[6713,6758]},{"pos":[6841,6851],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The URL.","pos":[6868,6876]},{"content":"Specify ATL_URL_DECODE or ATL_URL_ESCAPE to convert all escape characters in <ph id=\"ph1\">`lpszUrl`</ph> to their real values after parsing.","pos":[6896,7018],"source":" Specify ATL_URL_DECODE or ATL_URL_ESCAPE to convert all escape characters in `lpszUrl` to their real values after parsing."},{"content":"(Before Visual C++ 2005, ATL_URL_DECODE converted all escape characters before parsing.)","pos":[7019,7107]},{"pos":[7117,7129],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[7133,7175]},{"pos":[7185,7232],"content":"<bpt id=\"p1\">&lt;a name=\"curl__createurl\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::CreateUrl","linkify":"<a name=\"curl__createurl\"></a>  CUrl::CreateUrl","source":"<a name=\"curl__createurl\"></a>  CUrl::CreateUrl"},{"content":"This method constructs a URL string from a CUrl object's component fields.","pos":[7236,7310]},{"pos":[7434,7444],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>lpszUrl<ept id=\"p1\">*</ept>","pos":[7448,7457],"source":"*lpszUrl*"},{"content":"A string buffer to hold the complete URL string.","pos":[7461,7509]},{"content":"The maximum length of the <bpt id=\"p1\">*</bpt>lpszUrl<ept id=\"p1\">*</ept> string buffer.","pos":[7534,7584],"source":" The maximum length of the *lpszUrl* string buffer."},{"content":"Specify ATL_URL_ESCAPE to convert all escape characters in <bpt id=\"p1\">*</bpt>lpszUrl<ept id=\"p1\">*</ept> to their real values.","pos":[7604,7694],"source":" Specify ATL_URL_ESCAPE to convert all escape characters in *lpszUrl* to their real values."},{"pos":[7704,7716],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[7720,7762]},{"pos":[7772,7779],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method appends its individual fields in order to construct the complete URL string using the following format:","pos":[7783,7898]},{"pos":[7905,7969],"content":"<bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\&lt;</ph>scheme&gt;://<ph id=\"ph2\">\\&lt;</ph>user&gt;:<ph id=\"ph3\">\\&lt;</ph><ph id=\"ph4\">pass&gt;@</ph><ph id=\"ph5\">\\&lt;</ph>domain&gt;:<ph id=\"ph6\">\\&lt;</ph>port&gt;<ph id=\"ph7\">\\&lt;</ph>path&gt;<ph id=\"ph8\">\\&lt;</ph>extra&gt;<ept id=\"p1\">**</ept>","source":"**\\<scheme>://\\<user>:\\<pass>@\\<domain>:\\<port>\\<path>\\<extra>**"},{"content":"When calling this method, the <ph id=\"ph1\">`pdwMaxLength`</ph> parameter should initially contain the maximum length of the string buffer referenced by the <bpt id=\"p1\">*</bpt>lpszUrl<ept id=\"p1\">*</ept> parameter.","pos":[7976,8134],"source":"When calling this method, the `pdwMaxLength` parameter should initially contain the maximum length of the string buffer referenced by the *lpszUrl* parameter."},{"content":"The value of the <ph id=\"ph1\">`pdwMaxLength`</ph> parameter will be updated with the actual length of the URL string.","pos":[8135,8234],"source":" The value of the `pdwMaxLength` parameter will be updated with the actual length of the URL string."},{"pos":[8244,8251],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This sample demonstrates creation of a CUrl object and retrieving its URL string","pos":[8255,8335]},{"pos":[8342,8420],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#133<ept id=\"p2\">](../../atl/codesnippet/cpp/curl-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#133](../../atl/codesnippet/cpp/curl-class_1.cpp)]"},{"pos":[8430,8467],"content":"<bpt id=\"p1\">&lt;a name=\"curl__curl\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::CUrl","linkify":"<a name=\"curl__curl\"></a>  CUrl::CUrl","source":"<a name=\"curl__curl\"></a>  CUrl::CUrl"},{"content":"The constructor.","pos":[8471,8487]},{"pos":[8561,8571],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`CUrl`</ph> object to copy to create the URL.","pos":[8588,8632],"source":" The `CUrl` object to copy to create the URL."},{"pos":[8642,8685],"content":"<bpt id=\"p1\">&lt;a name=\"curl___dtorcurl\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::~CUrl","linkify":"<a name=\"curl___dtorcurl\"></a>  CUrl::~CUrl","source":"<a name=\"curl___dtorcurl\"></a>  CUrl::~CUrl"},{"content":"The destructor.","pos":[8689,8704]},{"pos":[8744,8797],"content":"<bpt id=\"p1\">&lt;a name=\"curl__getextrainfo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::GetExtraInfo","linkify":"<a name=\"curl__getextrainfo\"></a>  CUrl::GetExtraInfo","source":"<a name=\"curl__getextrainfo\"></a>  CUrl::GetExtraInfo"},{"pos":[8801,8885],"content":"Call this method to get extra information (such as <bpt id=\"p1\">*</bpt>text<ept id=\"p1\">*</ept> or # <bpt id=\"p2\">*</bpt>text<ept id=\"p2\">*</ept>) from the URL.","source":"Call this method to get extra information (such as *text* or # *text*) from the URL."},{"pos":[8953,8965],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a string containing the extra information.","pos":[8969,9019]},{"pos":[9029,9094],"content":"<bpt id=\"p1\">&lt;a name=\"curl__getextrainfolength\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::GetExtraInfoLength","linkify":"<a name=\"curl__getextrainfolength\"></a>  CUrl::GetExtraInfoLength","source":"<a name=\"curl__getextrainfolength\"></a>  CUrl::GetExtraInfoLength"},{"pos":[9098,9212],"content":"Call this method to get the length of the extra information (such as <bpt id=\"p1\">*</bpt>text<ept id=\"p1\">*</ept> or # <bpt id=\"p2\">*</bpt>text<ept id=\"p2\">*</ept>) to retrieve from the URL.","source":"Call this method to get the length of the extra information (such as *text* or # *text*) to retrieve from the URL."},{"pos":[9284,9296],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the length of the string containing the extra information.","pos":[9300,9366]},{"pos":[9376,9427],"content":"<bpt id=\"p1\">&lt;a name=\"curl__gethostname\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::GetHostName","linkify":"<a name=\"curl__gethostname\"></a>  CUrl::GetHostName","source":"<a name=\"curl__gethostname\"></a>  CUrl::GetHostName"},{"content":"Call this method to get the host name from the URL.","pos":[9431,9482]},{"pos":[9549,9561],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the host name.","pos":[9565,9587]},{"pos":[9597,9660],"content":"<bpt id=\"p1\">&lt;a name=\"curl__gethostnamelength\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::GetHostNameLength","linkify":"<a name=\"curl__gethostnamelength\"></a>  CUrl::GetHostNameLength","source":"<a name=\"curl__gethostnamelength\"></a>  CUrl::GetHostNameLength"},{"content":"Call this method to get the length of the host name.","pos":[9664,9716]},{"pos":[9787,9799],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the host name length.","pos":[9803,9832]},{"pos":[9842,9893],"content":"<bpt id=\"p1\">&lt;a name=\"curl__getpassword\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::GetPassword","linkify":"<a name=\"curl__getpassword\"></a>  CUrl::GetPassword","source":"<a name=\"curl__getpassword\"></a>  CUrl::GetPassword"},{"content":"Call this method to get the password from the URL.","pos":[9897,9947]},{"pos":[10014,10026],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the password.","pos":[10030,10051]},{"pos":[10061,10124],"content":"<bpt id=\"p1\">&lt;a name=\"curl__getpasswordlength\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::GetPasswordLength","linkify":"<a name=\"curl__getpasswordlength\"></a>  CUrl::GetPasswordLength","source":"<a name=\"curl__getpasswordlength\"></a>  CUrl::GetPasswordLength"},{"content":"Call this method to get the length of the password.","pos":[10128,10179]},{"pos":[10250,10262],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the password length.","pos":[10266,10294]},{"pos":[10304,10359],"content":"<bpt id=\"p1\">&lt;a name=\"curl__getportnumber\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::GetPortNumber","linkify":"<a name=\"curl__getportnumber\"></a>  CUrl::GetPortNumber","source":"<a name=\"curl__getportnumber\"></a>  CUrl::GetPortNumber"},{"content":"Call this method to get the port number.","pos":[10363,10403]},{"pos":[10477,10489],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the port number.","pos":[10493,10517]},{"pos":[10527,10574],"content":"<bpt id=\"p1\">&lt;a name=\"curl__getscheme\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::GetScheme","linkify":"<a name=\"curl__getscheme\"></a>  CUrl::GetScheme","source":"<a name=\"curl__getscheme\"></a>  CUrl::GetScheme"},{"content":"Call this method to get the URL scheme.","pos":[10578,10617]},{"pos":[10689,10701],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10705,10797],"content":"Returns the <bpt id=\"p1\">[</bpt>ATL_URL_SCHEME<ept id=\"p1\">](atl-url-scheme-enum.md)</ept> value describing the scheme of the URL.","source":"Returns the [ATL_URL_SCHEME](atl-url-scheme-enum.md) value describing the scheme of the URL."},{"pos":[10807,10862],"content":"<bpt id=\"p1\">&lt;a name=\"curl__getschemename\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::GetSchemeName","linkify":"<a name=\"curl__getschemename\"></a>  CUrl::GetSchemeName","source":"<a name=\"curl__getschemename\"></a>  CUrl::GetSchemeName"},{"content":"Call this method to get the URL scheme name.","pos":[10866,10910]},{"pos":[10979,10991],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the URL scheme name (such as \"http\" or \"ftp\").","pos":[10995,11049]},{"pos":[11059,11126],"content":"<bpt id=\"p1\">&lt;a name=\"curl__getschemenamelength\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::GetSchemeNameLength","linkify":"<a name=\"curl__getschemenamelength\"></a>  CUrl::GetSchemeNameLength","source":"<a name=\"curl__getschemenamelength\"></a>  CUrl::GetSchemeNameLength"},{"content":"Call this method to get the length of the URL scheme name.","pos":[11130,11188]},{"pos":[11261,11273],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the URL scheme name length.","pos":[11277,11312]},{"pos":[11322,11375],"content":"<bpt id=\"p1\">&lt;a name=\"curl__geturllength\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::GetUrlLength","linkify":"<a name=\"curl__geturllength\"></a>  CUrl::GetUrlLength","source":"<a name=\"curl__geturllength\"></a>  CUrl::GetUrlLength"},{"content":"Call this method to get the URL length.","pos":[11379,11418]},{"pos":[11484,11496],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the URL length.","pos":[11500,11523]},{"pos":[11533,11582],"content":"<bpt id=\"p1\">&lt;a name=\"curl__geturlpath\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::GetUrlPath","linkify":"<a name=\"curl__geturlpath\"></a>  CUrl::GetUrlPath","source":"<a name=\"curl__geturlpath\"></a>  CUrl::GetUrlPath"},{"content":"Call this method to get the URL path.","pos":[11586,11623]},{"pos":[11689,11701],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the URL path.","pos":[11705,11726]},{"pos":[11736,11797],"content":"<bpt id=\"p1\">&lt;a name=\"curl__geturlpathlength\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::GetUrlPathLength","linkify":"<a name=\"curl__geturlpathlength\"></a>  CUrl::GetUrlPathLength","source":"<a name=\"curl__geturlpathlength\"></a>  CUrl::GetUrlPathLength"},{"content":"Call this method to get the URL path length.","pos":[11801,11845]},{"pos":[11915,11927],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the URL path length.","pos":[11931,11959]},{"pos":[11969,12020],"content":"<bpt id=\"p1\">&lt;a name=\"curl__getusername\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::GetUserName","linkify":"<a name=\"curl__getusername\"></a>  CUrl::GetUserName","source":"<a name=\"curl__getusername\"></a>  CUrl::GetUserName"},{"content":"Call this method to get the user name from the URL.","pos":[12024,12075]},{"pos":[12142,12154],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the user name.","pos":[12158,12180]},{"pos":[12190,12253],"content":"<bpt id=\"p1\">&lt;a name=\"curl__getusernamelength\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::GetUserNameLength","linkify":"<a name=\"curl__getusernamelength\"></a>  CUrl::GetUserNameLength","source":"<a name=\"curl__getusernamelength\"></a>  CUrl::GetUserNameLength"},{"content":"Call this method to get the length of the user name.","pos":[12257,12309]},{"pos":[12380,12392],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the user name length.","pos":[12396,12425]},{"pos":[12435,12485],"content":"<bpt id=\"p1\">&lt;a name=\"curl__operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::operator =","linkify":"<a name=\"curl__operator_eq\"></a>  CUrl::operator =","source":"<a name=\"curl__operator_eq\"></a>  CUrl::operator ="},{"pos":[12489,12554],"content":"Assigns the specified <ph id=\"ph1\">`CUrl`</ph> object to the current <ph id=\"ph2\">`CUrl`</ph> object.","source":"Assigns the specified `CUrl` object to the current `CUrl` object."},{"pos":[12624,12634],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`CUrl`</ph> object to copy into the current object.","pos":[12651,12701],"source":" The `CUrl` object to copy into the current object."},{"pos":[12711,12723],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a reference to the current object.","pos":[12727,12769]},{"pos":[12779,12832],"content":"<bpt id=\"p1\">&lt;a name=\"curl__setextrainfo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::SetExtraInfo","linkify":"<a name=\"curl__setextrainfo\"></a>  CUrl::SetExtraInfo","source":"<a name=\"curl__setextrainfo\"></a>  CUrl::SetExtraInfo"},{"pos":[12836,12922],"content":"Call this method to set the extra information (such as <bpt id=\"p1\">*</bpt>text<ept id=\"p1\">*</ept> or # <bpt id=\"p2\">*</bpt>text<ept id=\"p2\">*</ept>) of the URL.","source":"Call this method to set the extra information (such as *text* or # *text*) of the URL."},{"pos":[12997,13007],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>lpszInfo<ept id=\"p1\">*</ept>","pos":[13011,13021],"source":"*lpszInfo*"},{"content":"The string containing the extra information to include in the URL.","pos":[13025,13091]},{"pos":[13101,13113],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[13117,13159]},{"pos":[13169,13220],"content":"<bpt id=\"p1\">&lt;a name=\"curl__sethostname\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::SetHostName","linkify":"<a name=\"curl__sethostname\"></a>  CUrl::SetHostName","source":"<a name=\"curl__sethostname\"></a>  CUrl::SetHostName"},{"content":"Call this method to set the host name.","pos":[13224,13262]},{"pos":[13336,13346],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The host name.","pos":[13364,13378]},{"pos":[13388,13400],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[13404,13446]},{"pos":[13456,13507],"content":"<bpt id=\"p1\">&lt;a name=\"curl__setpassword\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::SetPassword","linkify":"<a name=\"curl__setpassword\"></a>  CUrl::SetPassword","source":"<a name=\"curl__setpassword\"></a>  CUrl::SetPassword"},{"content":"Call this method to set the password.","pos":[13511,13548]},{"pos":[13622,13632],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>lpszPass<ept id=\"p1\">*</ept>","pos":[13636,13646],"source":"*lpszPass*"},{"content":"The password.","pos":[13650,13663]},{"pos":[13673,13685],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[13689,13731]},{"pos":[13741,13796],"content":"<bpt id=\"p1\">&lt;a name=\"curl__setportnumber\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::SetPortNumber","linkify":"<a name=\"curl__setportnumber\"></a>  CUrl::SetPortNumber","source":"<a name=\"curl__setportnumber\"></a>  CUrl::SetPortNumber"},{"content":"Call this method to set the port number.","pos":[13800,13840]},{"pos":[13917,13927],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>nPrt<ept id=\"p1\">*</ept>","pos":[13931,13937],"source":"*nPrt*"},{"content":"The port number.","pos":[13941,13957]},{"pos":[13967,13979],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[13983,14025]},{"pos":[14035,14082],"content":"<bpt id=\"p1\">&lt;a name=\"curl__setscheme\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::SetScheme","linkify":"<a name=\"curl__setscheme\"></a>  CUrl::SetScheme","source":"<a name=\"curl__setscheme\"></a>  CUrl::SetScheme"},{"content":"Call this method to set the URL scheme.","pos":[14086,14125]},{"pos":[14203,14213],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"One of the <bpt id=\"p1\">[</bpt>ATL_URL_SCHEME<ept id=\"p1\">](atl-url-scheme-enum.md)</ept> values for the scheme.","pos":[14230,14304],"source":" One of the [ATL_URL_SCHEME](atl-url-scheme-enum.md) values for the scheme."},{"pos":[14314,14326],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[14330,14372]},{"pos":[14382,14389],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14393,14479],"content":"You can also set the scheme by name (see <bpt id=\"p1\">[</bpt>CUrl::SetSchemeName<ept id=\"p1\">](#curl__setschemename)</ept>).","source":"You can also set the scheme by name (see [CUrl::SetSchemeName](#curl__setschemename))."},{"pos":[14489,14544],"content":"<bpt id=\"p1\">&lt;a name=\"curl__setschemename\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::SetSchemeName","linkify":"<a name=\"curl__setschemename\"></a>  CUrl::SetSchemeName","source":"<a name=\"curl__setschemename\"></a>  CUrl::SetSchemeName"},{"content":"Call this method to set the URL scheme name.","pos":[14548,14592]},{"pos":[14668,14678],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>lpszSchm<ept id=\"p1\">*</ept>","pos":[14682,14692],"source":"*lpszSchm*"},{"content":"The URL scheme name.","pos":[14696,14716]},{"pos":[14726,14738],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[14742,14784]},{"pos":[14794,14801],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14805,14937],"content":"You can also set the scheme by using an <bpt id=\"p1\">[</bpt>ATL_URL_SCHEME<ept id=\"p1\">](atl-url-scheme-enum.md)</ept> constant (see <bpt id=\"p2\">[</bpt>CUrl::SetScheme<ept id=\"p2\">](#curl__setscheme)</ept>).","source":"You can also set the scheme by using an [ATL_URL_SCHEME](atl-url-scheme-enum.md) constant (see [CUrl::SetScheme](#curl__setscheme))."},{"pos":[14947,14996],"content":"<bpt id=\"p1\">&lt;a name=\"curl__seturlpath\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::SetUrlPath","linkify":"<a name=\"curl__seturlpath\"></a>  CUrl::SetUrlPath","source":"<a name=\"curl__seturlpath\"></a>  CUrl::SetUrlPath"},{"content":"Call this method to set the URL path.","pos":[15000,15037]},{"pos":[15110,15120],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The URL path.","pos":[15138,15151]},{"pos":[15161,15173],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[15177,15219]},{"pos":[15229,15280],"content":"<bpt id=\"p1\">&lt;a name=\"curl__setusername\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CUrl::SetUserName","linkify":"<a name=\"curl__setusername\"></a>  CUrl::SetUserName","source":"<a name=\"curl__setusername\"></a>  CUrl::SetUserName"},{"content":"Call this method to set the user name.","pos":[15284,15322]},{"pos":[15396,15406],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>lpszUser<ept id=\"p1\">*</ept>","pos":[15410,15420],"source":"*lpszUser*"},{"content":"The user name.","pos":[15424,15438]},{"pos":[15448,15460],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[15464,15506]},{"pos":[15515,15523],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[15527,15572],"content":"<bpt id=\"p1\">[</bpt>Classes<ept id=\"p1\">](../../atl/reference/atl-classes.md)</ept>","source":"[Classes](../../atl/reference/atl-classes.md)"}],"content":"---\ntitle: \"CUrl Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL.CUrl\"\n  - \"CUrl\"\n  - \"ATL::CUrl\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CUrl class\"\nms.assetid: b3894d34-47b9-4961-9719-4197153793da\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CUrl Class\nThis class represents a URL. It allows you to manipulate each element of the URL independently of the others whether parsing an existing URL string or building a string from scratch.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the Windows Runtime.  \n  \n## Syntax  \n  \n```\nclass CUrl\n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CUrl::CUrl](#curl__curl)|The constructor.|  \n|[CUrl::~CUrl](#curl___dtorcurl)|The destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CUrl::Canonicalize](#curl__canonicalize)|Call this method to convert the URL string to canonical form.|  \n|[CUrl::Clear](#curl__clear)|Call this method to clear all of the URL fields.|  \n|[CUrl::CrackUrl](#curl__crackurl)|Call this method to decode and parse the URL.|  \n|[CUrl::CreateUrl](#curl__createurl)|Call this method to create the URL.|  \n|[CUrl::GetExtraInfo](#curl__getextrainfo)|Call this method to get extra information (such as *text* or # *text*) from the URL.|  \n|[CUrl::GetExtraInfoLength](#curl__getextrainfolength)|Call this method to get the length of the extra information (such as *text* or # *text*) to retrieve from the URL.|  \n|[CUrl::GetHostName](#curl__gethostname)|Call this method to get the host name from the URL.|  \n|[CUrl::GetHostNameLength](#curl__gethostnamelength)|Call this method to get the length of the host name.|  \n|[CUrl::GetPassword](#curl__getpassword)|Call this method to get the password from the URL.|  \n|[CUrl::GetPasswordLength](#curl__getpasswordlength)|Call this method to get the length of the password.|  \n|[CUrl::GetPortNumber](#curl__getportnumber)|Call this method to get the port number in terms of ATL_URL_PORT.|  \n|[CUrl::GetScheme](#curl__getscheme)|Call this method to get the URL scheme.|  \n|[CUrl::GetSchemeName](#curl__getschemename)|Call this method to get the URL scheme name.|  \n|[CUrl::GetSchemeNameLength](#curl__getschemenamelength)|Call this method to get the length of the URL scheme name.|  \n|[CUrl::GetUrlLength](#curl__geturllength)|Call this method to get the URL length.|  \n|[CUrl::GetUrlPath](#curl__geturlpath)|Call this method to get the URL path.|  \n|[CUrl::GetUrlPathLength](#curl__geturlpathlength)|Call this method to get the URL path length.|  \n|[CUrl::GetUserName](#curl__getusername)|Call this method to get the user name from the URL.|  \n|[CUrl::GetUserNameLength](#curl__getusernamelength)|Call this method to get the length of the user name.|  \n|[CUrl::SetExtraInfo](#curl__setextrainfo)|Call this method to set the extra information (such as *text* or # *text*) of the URL.|  \n|[CUrl::SetHostName](#curl__sethostname)|Call this method to set the host name.|  \n|[CUrl::SetPassword](#curl__setpassword)|Call this method to set the password.|  \n|[CUrl::SetPortNumber](#curl__setportnumber)|Call this method to set the port number in terms of ATL_URL_PORT.|  \n|[CUrl::SetScheme](#curl__setscheme)|Call this method to set the URL scheme.|  \n|[CUrl::SetSchemeName](#curl__setschemename)|Call this method to set the URL scheme name.|  \n|[CUrl::SetUrlPath](#curl__seturlpath)|Call this method to set the URL path.|  \n|[CUrl::SetUserName](#curl__setusername)|Call this method to set the user name.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CUrl::operator =](#curl__operator_eq)|Assigns the specified `CUrl` object to the current `CUrl` object.|  \n  \n## Remarks  \n `CUrl` allows you to manipulate the fields of a URL, such as the path or port number. `CUrl` understands URLs of the following form:  \n  \n \\<Scheme>://\\<UserName>:\\<Password>@\\<HostName>:\\<PortNumber>/\\<UrlPath>\\<ExtraInfo>  \n  \n (Some fields are optional.) For example, consider this URL:  \n  \n http://someone:secret@www.microsoft.com:80/visualc/stuff.htm#contents  \n  \n [CUrl::CrackUrl](#curl__crackurl) parses it as follows:  \n  \n-   Scheme: \"http\" or [ATL_URL_SCHEME_HTTP](atl-url-scheme-enum.md)  \n  \n-   UserName: \"someone\"  \n  \n-   Password: \"secret\"  \n  \n-   HostName: \"www.microsoft.com\"  \n  \n-   PortNumber: 80  \n  \n-   UrlPath: \"visualc/stuff.htm\"  \n  \n-   ExtraInfo: \"#contents\"  \n  \n To manipulate the UrlPath field (for instance), you would use [GetUrlPath](#curl__geturlpath), [GetUrlPathLength](#curl__geturlpathlength), and [SetUrlPath](#curl__seturlpath). You would use [CreateUrl](#curl__createurl) to create the complete URL string.  \n  \n## Requirements  \n **Header:** atlutil.h  \n  \n##  <a name=\"curl__canonicalize\"></a>  CUrl::Canonicalize  \n Call this method to convert the URL string to canonical form.  \n  \n```\ninline BOOL Canonicalize(DWORD dwFlags = 0) throw();\n```  \n  \n### Parameters  \n `dwFlags`  \n The flags that control canonicalization. If no flags are specified ( `dwFlags` = 0), the method converts all unsafe characters and meta sequences (such as \\\\.,\\ .., and \\\\...) to escape sequences. `dwFlags` can be one of the following values:  \n  \n-   ATL_URL_BROWSER_MODE: Does not encode or decode characters after \"#\" or \"\" and does not remove trailing white space after \"\". If this value is not specified, the entire URL is encoded and trailing white space is removed.  \n  \n-   ATL_URL _DECODE: Converts all %XX sequences to characters, including escape sequences, before the URL is parsed.  \n  \n-   ATL_URL _ENCODE_PERCENT: Encodes any percent signs encountered. By default, percent signs are not encoded.  \n  \n-   ATL_URL _ENCODE_SPACES_ONLY: Encodes spaces only.  \n  \n-   ATL_URL _NO_ENCODE: Does not convert unsafe characters to escape sequences.  \n  \n-   ATL_URL _NO_META: Does not remove meta sequences (such as \".\" and \"..\") from the URL.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n### Remarks  \n Converting to canonical form involves converting unsafe characters and spaces to escape sequences.  \n  \n##  <a name=\"curl__clear\"></a>  CUrl::Clear  \n Call this method to clear all of the URL fields.  \n  \n```\ninline void Clear() throw();\n```  \n  \n##  <a name=\"curl__crackurl\"></a>  CUrl::CrackUrl  \n Call this method to decode and parse the URL.  \n  \n```\nBOOL CrackUrl(LPCTSTR lpszUrl,  DWORD dwFlags = 0) throw();\n```  \n  \n### Parameters  \n `lpszUrl`  \n The URL.  \n  \n `dwFlags`  \n Specify ATL_URL_DECODE or ATL_URL_ESCAPE to convert all escape characters in `lpszUrl` to their real values after parsing. (Before Visual C++ 2005, ATL_URL_DECODE converted all escape characters before parsing.)  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n##  <a name=\"curl__createurl\"></a>  CUrl::CreateUrl  \n This method constructs a URL string from a CUrl object's component fields.  \n  \n```\ninline BOOL CreateUrl(LPTSTR lpszUrl,\n    DWORD* pdwMaxLength,\n    DWORD dwFlags = 0) const throw();\n```  \n  \n### Parameters  \n *lpszUrl*  \n A string buffer to hold the complete URL string.  \n  \n `pdwMaxLength`  \n The maximum length of the *lpszUrl* string buffer.  \n  \n `dwFlags`  \n Specify ATL_URL_ESCAPE to convert all escape characters in *lpszUrl* to their real values.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n### Remarks  \n This method appends its individual fields in order to construct the complete URL string using the following format:  \n  \n **\\<scheme>://\\<user>:\\<pass>@\\<domain>:\\<port>\\<path>\\<extra>**  \n  \n When calling this method, the `pdwMaxLength` parameter should initially contain the maximum length of the string buffer referenced by the *lpszUrl* parameter. The value of the `pdwMaxLength` parameter will be updated with the actual length of the URL string.  \n  \n### Example  \n This sample demonstrates creation of a CUrl object and retrieving its URL string  \n  \n [!code-cpp[NVC_ATL_Utilities#133](../../atl/codesnippet/cpp/curl-class_1.cpp)]  \n  \n##  <a name=\"curl__curl\"></a>  CUrl::CUrl  \n The constructor.  \n  \n```\nCUrl() throw();\nCUrl(const CUrl& urlThat) throw();\n```  \n  \n### Parameters  \n `urlThat`  \n The `CUrl` object to copy to create the URL.  \n  \n##  <a name=\"curl___dtorcurl\"></a>  CUrl::~CUrl  \n The destructor.  \n  \n```\n~CUrl() throw();\n```  \n  \n##  <a name=\"curl__getextrainfo\"></a>  CUrl::GetExtraInfo  \n Call this method to get extra information (such as *text* or # *text*) from the URL.  \n  \n```\ninline LPCTSTR GetExtraInfo() const throw();\n```  \n  \n### Return Value  \n Returns a string containing the extra information.  \n  \n##  <a name=\"curl__getextrainfolength\"></a>  CUrl::GetExtraInfoLength  \n Call this method to get the length of the extra information (such as *text* or # *text*) to retrieve from the URL.  \n  \n```\ninline DWORD GetExtraInfoLength() const throw();\n```  \n  \n### Return Value  \n Returns the length of the string containing the extra information.  \n  \n##  <a name=\"curl__gethostname\"></a>  CUrl::GetHostName  \n Call this method to get the host name from the URL.  \n  \n```\ninline LPCTSTR GetHostName() const throw();\n```  \n  \n### Return Value  \n Returns the host name.  \n  \n##  <a name=\"curl__gethostnamelength\"></a>  CUrl::GetHostNameLength  \n Call this method to get the length of the host name.  \n  \n```\ninline DWORD GetHostNameLength() const throw();\n```  \n  \n### Return Value  \n Returns the host name length.  \n  \n##  <a name=\"curl__getpassword\"></a>  CUrl::GetPassword  \n Call this method to get the password from the URL.  \n  \n```\ninline LPCTSTR GetPassword() const throw();\n```  \n  \n### Return Value  \n Returns the password.  \n  \n##  <a name=\"curl__getpasswordlength\"></a>  CUrl::GetPasswordLength  \n Call this method to get the length of the password.  \n  \n```\ninline DWORD GetPasswordLength() const throw();\n```  \n  \n### Return Value  \n Returns the password length.  \n  \n##  <a name=\"curl__getportnumber\"></a>  CUrl::GetPortNumber  \n Call this method to get the port number.  \n  \n```\ninline ATL_URL_PORT GetPortNumber() const throw();\n```  \n  \n### Return Value  \n Returns the port number.  \n  \n##  <a name=\"curl__getscheme\"></a>  CUrl::GetScheme  \n Call this method to get the URL scheme.  \n  \n```\ninline ATL_URL_SCHEME GetScheme() const throw();\n```  \n  \n### Return Value  \n Returns the [ATL_URL_SCHEME](atl-url-scheme-enum.md) value describing the scheme of the URL.  \n  \n##  <a name=\"curl__getschemename\"></a>  CUrl::GetSchemeName  \n Call this method to get the URL scheme name.  \n  \n```\ninline LPCTSTR GetSchemeName() const throw();\n```  \n  \n### Return Value  \n Returns the URL scheme name (such as \"http\" or \"ftp\").  \n  \n##  <a name=\"curl__getschemenamelength\"></a>  CUrl::GetSchemeNameLength  \n Call this method to get the length of the URL scheme name.  \n  \n```\ninline DWORD GetSchemeNameLength() const throw();\n```  \n  \n### Return Value  \n Returns the URL scheme name length.  \n  \n##  <a name=\"curl__geturllength\"></a>  CUrl::GetUrlLength  \n Call this method to get the URL length.  \n  \n```\ninline DWORD GetUrlLength() const throw();\n```  \n  \n### Return Value  \n Returns the URL length.  \n  \n##  <a name=\"curl__geturlpath\"></a>  CUrl::GetUrlPath  \n Call this method to get the URL path.  \n  \n```\ninline LPCTSTR GetUrlPath() const throw();\n```  \n  \n### Return Value  \n Returns the URL path.  \n  \n##  <a name=\"curl__geturlpathlength\"></a>  CUrl::GetUrlPathLength  \n Call this method to get the URL path length.  \n  \n```\ninline DWORD GetUrlPathLength() const throw();\n```  \n  \n### Return Value  \n Returns the URL path length.  \n  \n##  <a name=\"curl__getusername\"></a>  CUrl::GetUserName  \n Call this method to get the user name from the URL.  \n  \n```\ninline LPCTSTR GetUserName() const throw();\n```  \n  \n### Return Value  \n Returns the user name.  \n  \n##  <a name=\"curl__getusernamelength\"></a>  CUrl::GetUserNameLength  \n Call this method to get the length of the user name.  \n  \n```\ninline DWORD GetUserNameLength() const throw();\n```  \n  \n### Return Value  \n Returns the user name length.  \n  \n##  <a name=\"curl__operator_eq\"></a>  CUrl::operator =  \n Assigns the specified `CUrl` object to the current `CUrl` object.  \n  \n```\nCUrl& operator= (const CUrl& urlThat) throw();\n```  \n  \n### Parameters  \n `urlThat`  \n The `CUrl` object to copy into the current object.  \n  \n### Return Value  \n Returns a reference to the current object.  \n  \n##  <a name=\"curl__setextrainfo\"></a>  CUrl::SetExtraInfo  \n Call this method to set the extra information (such as *text* or # *text*) of the URL.  \n  \n```\ninline BOOL SetExtraInfo(LPCTSTR lpszInfo) throw();\n```  \n  \n### Parameters  \n *lpszInfo*  \n The string containing the extra information to include in the URL.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n##  <a name=\"curl__sethostname\"></a>  CUrl::SetHostName  \n Call this method to set the host name.  \n  \n```\ninline BOOL SetHostName(LPCTSTR lpszHost) throw();\n```  \n  \n### Parameters  \n `lpszHost`  \n The host name.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n##  <a name=\"curl__setpassword\"></a>  CUrl::SetPassword  \n Call this method to set the password.  \n  \n```\ninline BOOL SetPassword(LPCTSTR lpszPass) throw();\n```  \n  \n### Parameters  \n *lpszPass*  \n The password.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n##  <a name=\"curl__setportnumber\"></a>  CUrl::SetPortNumber  \n Call this method to set the port number.  \n  \n```\ninline BOOL SetPortNumber(ATL_URL_PORT nPrt) throw();\n```  \n  \n### Parameters  \n *nPrt*  \n The port number.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n##  <a name=\"curl__setscheme\"></a>  CUrl::SetScheme  \n Call this method to set the URL scheme.  \n  \n```\ninline BOOL SetScheme(ATL_URL_SCHEME nScheme) throw();\n```  \n  \n### Parameters  \n `nScheme`  \n One of the [ATL_URL_SCHEME](atl-url-scheme-enum.md) values for the scheme.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n### Remarks  \n You can also set the scheme by name (see [CUrl::SetSchemeName](#curl__setschemename)).  \n  \n##  <a name=\"curl__setschemename\"></a>  CUrl::SetSchemeName  \n Call this method to set the URL scheme name.  \n  \n```\ninline BOOL SetSchemeName(LPCTSTR lpszSchm) throw();\n```  \n  \n### Parameters  \n *lpszSchm*  \n The URL scheme name.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n### Remarks  \n You can also set the scheme by using an [ATL_URL_SCHEME](atl-url-scheme-enum.md) constant (see [CUrl::SetScheme](#curl__setscheme)).  \n  \n##  <a name=\"curl__seturlpath\"></a>  CUrl::SetUrlPath  \n Call this method to set the URL path.  \n  \n```\ninline BOOL SetUrlPath(LPCTSTR lpszPath) throw();\n```  \n  \n### Parameters  \n `lpszPath`  \n The URL path.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n##  <a name=\"curl__setusername\"></a>  CUrl::SetUserName  \n Call this method to set the user name.  \n  \n```\ninline BOOL SetUserName(LPCTSTR lpszUser) throw();\n```  \n  \n### Parameters  \n *lpszUser*  \n The user name.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n## See Also  \n [Classes](../../atl/reference/atl-classes.md)\n"}