{"nodes":[{"pos":[12,44],"content":"Schedule Groups | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Schedule Groups | Microsoft Docs","pos":[0,32]}]},{"content":"Schedule Groups","pos":[568,583]},{"content":"This document describes the role of schedule groups in the Concurrency Runtime.","pos":[584,663]},{"content":"A <bpt id=\"p1\">*</bpt>schedule group<ept id=\"p1\">*</ept> affinitizes, or groups, related tasks together.","pos":[664,730],"source":" A *schedule group* affinitizes, or groups, related tasks together."},{"content":"Every scheduler has one or more schedule groups.","pos":[731,779]},{"content":"Use schedule groups when you require a high degree of locality among tasks, for example, when a group of related tasks benefit from executing on the same processor node.","pos":[780,949]},{"content":"Conversely, use scheduler instances when your application has specific quality requirements, for example, when you want to limit the amount of processing resources that are allocated to a set of tasks.","pos":[950,1151]},{"content":"For more information about scheduler instances, see <bpt id=\"p1\">[</bpt>Scheduler Instances<ept id=\"p1\">](../../parallel/concrt/scheduler-instances.md)</ept>.","pos":[1152,1272],"source":" For more information about scheduler instances, see [Scheduler Instances](../../parallel/concrt/scheduler-instances.md)."},{"pos":[1280,1759],"content":"[!TIP]\n The Concurrency Runtime provides a default scheduler, and therefore you are not required to create one in your application. Because the Task Scheduler helps you fine-tune the performance of your applications, we recommend that you start with the [Parallel Patterns Library (PPL)](../../parallel/concrt/parallel-patterns-library-ppl.md) or the [Asynchronous Agents Library](../../parallel/concrt/asynchronous-agents-library.md) if you are new to the Concurrency Runtime.","leadings":["","> "],"nodes":[{"content":" The Concurrency Runtime provides a default scheduler, and therefore you are not required to create one in your application. Because the Task Scheduler helps you fine-tune the performance of your applications, we recommend that you start with the [Parallel Patterns Library (PPL)](../../parallel/concrt/parallel-patterns-library-ppl.md) or the [Asynchronous Agents Library](../../parallel/concrt/asynchronous-agents-library.md) if you are new to the Concurrency Runtime.","pos":[7,477],"nodes":[{"content":"The Concurrency Runtime provides a default scheduler, and therefore you are not required to create one in your application.","pos":[1,124]},{"content":"Because the Task Scheduler helps you fine-tune the performance of your applications, we recommend that you start with the <bpt id=\"p1\">[</bpt>Parallel Patterns Library (PPL)<ept id=\"p1\">](../../parallel/concrt/parallel-patterns-library-ppl.md)</ept> or the <bpt id=\"p2\">[</bpt>Asynchronous Agents Library<ept id=\"p2\">](../../parallel/concrt/asynchronous-agents-library.md)</ept> if you are new to the Concurrency Runtime.","pos":[125,470],"source":" Because the Task Scheduler helps you fine-tune the performance of your applications, we recommend that you start with the [Parallel Patterns Library (PPL)](../../parallel/concrt/parallel-patterns-library-ppl.md) or the [Asynchronous Agents Library](../../parallel/concrt/asynchronous-agents-library.md) if you are new to the Concurrency Runtime."}]}]},{"content":"Every <ph id=\"ph1\">`Scheduler`</ph> object has a default schedule group for every scheduling node.","pos":[1766,1846],"source":"Every `Scheduler` object has a default schedule group for every scheduling node."},{"content":"A <bpt id=\"p1\">*</bpt>scheduling node<ept id=\"p1\">*</ept> maps to the underlying system topology.","pos":[1847,1906],"source":" A *scheduling node* maps to the underlying system topology."},{"content":"The runtime creates one scheduling node for every processor package or Non-Uniform Memory Architecture (NUMA) node, whichever number is larger.","pos":[1907,2050]},{"content":"If you do not explicitly associate a task with a schedule group, the scheduler chooses which group to add the task to.","pos":[2051,2169]},{"content":"The <ph id=\"ph1\">`SchedulingProtocol`</ph> scheduler policy influences the order in which the scheduler executes the tasks in each schedule group.","pos":[2176,2304],"source":"The `SchedulingProtocol` scheduler policy influences the order in which the scheduler executes the tasks in each schedule group."},{"content":"When <ph id=\"ph1\">`SchedulingProtocol`</ph> is set to <ph id=\"ph2\">`EnhanceScheduleGroupLocality`</ph> (which is the default), the Task Scheduler chooses the next task from the schedule group that it is working on when the current task finishes or cooperatively yields.","pos":[2305,2538],"source":" When `SchedulingProtocol` is set to `EnhanceScheduleGroupLocality` (which is the default), the Task Scheduler chooses the next task from the schedule group that it is working on when the current task finishes or cooperatively yields."},{"content":"The Task Scheduler searches the current schedule group for work before it moves to the next available group.","pos":[2539,2647]},{"content":"Conversely, when <ph id=\"ph1\">`SchedulingProtocol`</ph> is set to <ph id=\"ph2\">`EnhanceForwardProgress`</ph>, the scheduler moves to the next schedule group after each task finishes or yields.","pos":[2648,2804],"source":" Conversely, when `SchedulingProtocol` is set to `EnhanceForwardProgress`, the scheduler moves to the next schedule group after each task finishes or yields."},{"content":"For an example that compares these policies, see <bpt id=\"p1\">[</bpt>How to: Use Schedule Groups to Influence Order of Execution<ept id=\"p1\">](../../parallel/concrt/how-to-use-schedule-groups-to-influence-order-of-execution.md)</ept>.","pos":[2805,3001],"source":" For an example that compares these policies, see [How to: Use Schedule Groups to Influence Order of Execution](../../parallel/concrt/how-to-use-schedule-groups-to-influence-order-of-execution.md)."},{"content":"The runtime uses the <bpt id=\"p1\">[</bpt>concurrency::ScheduleGroup<ept id=\"p1\">](../../parallel/concrt/reference/schedulegroup-class.md)</ept> class to represent schedule groups.","pos":[3009,3150],"source":"The runtime uses the [concurrency::ScheduleGroup](../../parallel/concrt/reference/schedulegroup-class.md) class to represent schedule groups."},{"content":"To create a <ph id=\"ph1\">`ScheduleGroup`</ph> object, call the <bpt id=\"p1\">[</bpt>concurrency::CurrentScheduler::CreateScheduleGroup<ept id=\"p1\">](reference/currentscheduler-class.md#createschedulegroup)</ept> or <bpt id=\"p2\">[</bpt>concurrency::Scheduler::CreateScheduleGroup<ept id=\"p2\">](reference/scheduler-class.md#createschedulegroup)</ept> method.","pos":[3151,3412],"source":" To create a `ScheduleGroup` object, call the [concurrency::CurrentScheduler::CreateScheduleGroup](reference/currentscheduler-class.md#createschedulegroup) or [concurrency::Scheduler::CreateScheduleGroup](reference/scheduler-class.md#createschedulegroup) method."},{"content":"The runtime uses a reference-counting mechanism to control the lifetime of <ph id=\"ph1\">`ScheduleGroup`</ph> objects, just as it does with <ph id=\"ph2\">`Scheduler`</ph> objects.","pos":[3413,3554],"source":" The runtime uses a reference-counting mechanism to control the lifetime of `ScheduleGroup` objects, just as it does with `Scheduler` objects."},{"content":"When you create a <ph id=\"ph1\">`ScheduleGroup`</ph> object, the runtime sets the reference counter to one.","pos":[3555,3643],"source":" When you create a `ScheduleGroup` object, the runtime sets the reference counter to one."},{"content":"The <bpt id=\"p1\">[</bpt>concurrency::ScheduleGroup::Reference<ept id=\"p1\">](reference/schedulegroup-class.md#reference)</ept> method increments the reference counter by one.","pos":[3644,3779],"source":" The [concurrency::ScheduleGroup::Reference](reference/schedulegroup-class.md#reference) method increments the reference counter by one."},{"content":"The <bpt id=\"p1\">[</bpt>concurrency::ScheduleGroup::Release<ept id=\"p1\">](reference/schedulegroup-class.md#release)</ept> method decrements the reference counter by one.","pos":[3780,3911],"source":" The [concurrency::ScheduleGroup::Release](reference/schedulegroup-class.md#release) method decrements the reference counter by one."},{"content":"Many types in the Concurrency Runtime let you associate an object together with a schedule group.","pos":[3918,4015]},{"content":"For example, the <bpt id=\"p1\">[</bpt>concurrency::agent<ept id=\"p1\">](../../parallel/concrt/reference/agent-class.md)</ept> class and message block classes such as <bpt id=\"p2\">[</bpt>concurrency::unbounded_buffer<ept id=\"p2\">](reference/unbounded-buffer-class.md)</ept>, <bpt id=\"p3\">[</bpt>concurrency::join<ept id=\"p3\">](../../parallel/concrt/reference/join-class.md)</ept>, and concurrency::<bpt id=\"p4\">[</bpt>timer<ept id=\"p4\">](reference/timer-class.md)</ept>, provide overloaded versions of the constructor that take a <ph id=\"ph1\">`ScheduleGroup`</ph> object.","pos":[4016,4414],"source":" For example, the [concurrency::agent](../../parallel/concrt/reference/agent-class.md) class and message block classes such as [concurrency::unbounded_buffer](reference/unbounded-buffer-class.md), [concurrency::join](../../parallel/concrt/reference/join-class.md), and concurrency::[timer](reference/timer-class.md), provide overloaded versions of the constructor that take a `ScheduleGroup` object."},{"content":"The runtime uses the <ph id=\"ph1\">`Scheduler`</ph> object that is associated with this <ph id=\"ph2\">`ScheduleGroup`</ph> object to schedule the task.","pos":[4415,4528],"source":" The runtime uses the `Scheduler` object that is associated with this `ScheduleGroup` object to schedule the task."},{"content":"You can also use the <bpt id=\"p1\">[</bpt>concurrency::ScheduleGroup::ScheduleTask<ept id=\"p1\">](reference/schedulegroup-class.md#scheduletask)</ept> method to schedule a lightweight task.","pos":[4535,4684],"source":"You can also use the [concurrency::ScheduleGroup::ScheduleTask](reference/schedulegroup-class.md#scheduletask) method to schedule a lightweight task."},{"content":"For more information about lightweight tasks, see <bpt id=\"p1\">[</bpt>Lightweight Tasks<ept id=\"p1\">](../../parallel/concrt/lightweight-tasks.md)</ept>.","pos":[4685,4799],"source":" For more information about lightweight tasks, see [Lightweight Tasks](../../parallel/concrt/lightweight-tasks.md)."},{"content":"Example","pos":[4809,4816]},{"pos":[4820,5052],"content":"For an example that uses schedule groups to control the order of task execution, see <bpt id=\"p1\">[</bpt>How to: Use Schedule Groups to Influence Order of Execution<ept id=\"p1\">](../../parallel/concrt/how-to-use-schedule-groups-to-influence-order-of-execution.md)</ept>.","source":"For an example that uses schedule groups to control the order of task execution, see [How to: Use Schedule Groups to Influence Order of Execution](../../parallel/concrt/how-to-use-schedule-groups-to-influence-order-of-execution.md)."},{"content":"See Also","pos":[5061,5069]},{"content":"Task Scheduler","pos":[5074,5088]},{"content":"Scheduler Instances","pos":[5156,5175]},{"content":"How to: Use Schedule Groups to Influence Order of Execution","pos":[5228,5287]}],"content":"---\ntitle: \"Schedule Groups | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"schedule groups\"\nms.assetid: 03523572-5891-4d17-89ce-fa795605f28b\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Schedule Groups\nThis document describes the role of schedule groups in the Concurrency Runtime. A *schedule group* affinitizes, or groups, related tasks together. Every scheduler has one or more schedule groups. Use schedule groups when you require a high degree of locality among tasks, for example, when a group of related tasks benefit from executing on the same processor node. Conversely, use scheduler instances when your application has specific quality requirements, for example, when you want to limit the amount of processing resources that are allocated to a set of tasks. For more information about scheduler instances, see [Scheduler Instances](../../parallel/concrt/scheduler-instances.md).  \n  \n> [!TIP]\n>  The Concurrency Runtime provides a default scheduler, and therefore you are not required to create one in your application. Because the Task Scheduler helps you fine-tune the performance of your applications, we recommend that you start with the [Parallel Patterns Library (PPL)](../../parallel/concrt/parallel-patterns-library-ppl.md) or the [Asynchronous Agents Library](../../parallel/concrt/asynchronous-agents-library.md) if you are new to the Concurrency Runtime.  \n  \n Every `Scheduler` object has a default schedule group for every scheduling node. A *scheduling node* maps to the underlying system topology. The runtime creates one scheduling node for every processor package or Non-Uniform Memory Architecture (NUMA) node, whichever number is larger. If you do not explicitly associate a task with a schedule group, the scheduler chooses which group to add the task to.  \n  \n The `SchedulingProtocol` scheduler policy influences the order in which the scheduler executes the tasks in each schedule group. When `SchedulingProtocol` is set to `EnhanceScheduleGroupLocality` (which is the default), the Task Scheduler chooses the next task from the schedule group that it is working on when the current task finishes or cooperatively yields. The Task Scheduler searches the current schedule group for work before it moves to the next available group. Conversely, when `SchedulingProtocol` is set to `EnhanceForwardProgress`, the scheduler moves to the next schedule group after each task finishes or yields. For an example that compares these policies, see [How to: Use Schedule Groups to Influence Order of Execution](../../parallel/concrt/how-to-use-schedule-groups-to-influence-order-of-execution.md).  \n  \n\n The runtime uses the [concurrency::ScheduleGroup](../../parallel/concrt/reference/schedulegroup-class.md) class to represent schedule groups. To create a `ScheduleGroup` object, call the [concurrency::CurrentScheduler::CreateScheduleGroup](reference/currentscheduler-class.md#createschedulegroup) or [concurrency::Scheduler::CreateScheduleGroup](reference/scheduler-class.md#createschedulegroup) method. The runtime uses a reference-counting mechanism to control the lifetime of `ScheduleGroup` objects, just as it does with `Scheduler` objects. When you create a `ScheduleGroup` object, the runtime sets the reference counter to one. The [concurrency::ScheduleGroup::Reference](reference/schedulegroup-class.md#reference) method increments the reference counter by one. The [concurrency::ScheduleGroup::Release](reference/schedulegroup-class.md#release) method decrements the reference counter by one.  \n  \n Many types in the Concurrency Runtime let you associate an object together with a schedule group. For example, the [concurrency::agent](../../parallel/concrt/reference/agent-class.md) class and message block classes such as [concurrency::unbounded_buffer](reference/unbounded-buffer-class.md), [concurrency::join](../../parallel/concrt/reference/join-class.md), and concurrency::[timer](reference/timer-class.md), provide overloaded versions of the constructor that take a `ScheduleGroup` object. The runtime uses the `Scheduler` object that is associated with this `ScheduleGroup` object to schedule the task.  \n  \n You can also use the [concurrency::ScheduleGroup::ScheduleTask](reference/schedulegroup-class.md#scheduletask) method to schedule a lightweight task. For more information about lightweight tasks, see [Lightweight Tasks](../../parallel/concrt/lightweight-tasks.md).  \n\n  \n## Example  \n For an example that uses schedule groups to control the order of task execution, see [How to: Use Schedule Groups to Influence Order of Execution](../../parallel/concrt/how-to-use-schedule-groups-to-influence-order-of-execution.md).  \n  \n## See Also  \n [Task Scheduler](../../parallel/concrt/task-scheduler-concurrency-runtime.md)   \n [Scheduler Instances](../../parallel/concrt/scheduler-instances.md)   \n [How to: Use Schedule Groups to Influence Order of Execution](../../parallel/concrt/how-to-use-schedule-groups-to-influence-order-of-execution.md)\n\n"}