{"nodes":[{"pos":[12,92],"content":"_fstat, _fstat32, _fstat64, _fstati64, _fstat32i64, _fstat64i32 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_fstat, _fstat32, _fstat64, _fstati64, _fstat32i64, _fstat64i32 | Microsoft Docs","pos":[0,80]}]},{"pos":[1509,1572],"content":"_fstat, _fstat32, _fstat64, _fstati64, _fstat32i64, _fstat64i32","linkify":"_fstat, _fstat32, _fstat64, _fstati64, _fstat32i64, _fstat64i32","nodes":[{"content":"_fstat, _fstat32, _fstat64, _fstati64, _fstat32i64, _fstat64i32","pos":[0,63]}]},{"content":"Gets information about an open file.","pos":[1573,1609]},{"pos":[1618,1624],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[2046,2056],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"File descriptor of the open file.","pos":[2068,2101]},{"content":"Pointer to the structure to store results.","pos":[2120,2162]},{"pos":[2171,2183],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns 0 if the file-status information is obtained.","pos":[2187,2240]},{"content":"A return value of â€“1 indicates an error.","pos":[2241,2281]},{"content":"If the file descriptor is invalid or <ph id=\"ph1\">`buffer`</ph> is <ph id=\"ph2\">`NULL`</ph>, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2282,2469],"source":" If the file descriptor is invalid or `buffer` is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`EBADF`</ph>, in the case of an invalid file descriptor, or to <ph id=\"ph3\">`EINVAL`</ph>, if <ph id=\"ph4\">`buffer`</ph> is <ph id=\"ph5\">`NULL`</ph>.","pos":[2470,2615],"source":" If execution is allowed to continue, `errno` is set to `EBADF`, in the case of an invalid file descriptor, or to `EINVAL`, if `buffer` is `NULL`."},{"pos":[2624,2631],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_fstat`</ph> function obtains information about the open file associated with <ph id=\"ph2\">`fd`</ph> and stores it in the structure pointed to by <ph id=\"ph3\">`buffer`</ph>.","pos":[2635,2772],"source":"The `_fstat` function obtains information about the open file associated with `fd` and stores it in the structure pointed to by `buffer`."},{"content":"The <ph id=\"ph1\">`_stat`</ph> structure, defined in SYS\\Stat.h, contains the following fields.","pos":[2773,2849],"source":" The `_stat` structure, defined in SYS\\Stat.h, contains the following fields."},{"content":"Time of the last file access.","pos":[2870,2899]},{"content":"Time of the creation of the file.","pos":[2920,2953]},{"content":"If a device, <ph id=\"ph1\">`fd`</ph>; otherwise 0.","pos":[2972,3003],"source":" If a device, `fd`; otherwise 0."},{"content":"Bit mask for file-mode information.","pos":[3023,3058]},{"content":"The <ph id=\"ph1\">`_S_IFCHR`</ph> bit is set if <ph id=\"ph2\">`fd`</ph> refers to a device.","pos":[3059,3112],"source":" The `_S_IFCHR` bit is set if `fd` refers to a device."},{"content":"The <ph id=\"ph1\">`_S_IFREG`</ph> bit is set if <ph id=\"ph2\">`fd`</ph> refers to an ordinary file.","pos":[3113,3174],"source":" The `_S_IFREG` bit is set if `fd` refers to an ordinary file."},{"content":"The read/write bits are set according to the file's permission mode.","pos":[3175,3243]},{"content":"<ph id=\"ph1\">`_S_IFCHR`</ph> and other constants are defined in SYS\\Stat.h.","pos":[3244,3301],"source":"`_S_IFCHR` and other constants are defined in SYS\\Stat.h."},{"content":"Time of the last modification of the file.","pos":[3322,3364]},{"content":"Always 1 on non-NTFS file systems.","pos":[3385,3419]},{"content":"If a device, <ph id=\"ph1\">`fd`</ph>; otherwise 0.","pos":[3439,3470],"source":" If a device, `fd`; otherwise 0."},{"content":"Size of the file in bytes.","pos":[3490,3516]},{"pos":[3523,3631],"content":"If <ph id=\"ph1\">`fd`</ph> refers to a device, the <ph id=\"ph2\">`st_atime`</ph>, <ph id=\"ph3\">`st_ctime`</ph>, <ph id=\"ph4\">`st_mtime`</ph>, and <ph id=\"ph5\">`st_size`</ph> fields are not meaningful.","source":"If `fd` refers to a device, the `st_atime`, `st_ctime`, `st_mtime`, and `st_size` fields are not meaningful."},{"pos":[3638,3801],"content":"Because Stat.h uses the <bpt id=\"p1\">[</bpt>_dev_t<ept id=\"p1\">](../../c-runtime-library/standard-types.md)</ept> type, which is defined in Types.h, you must include Types.h before Stat.h in your code.","source":"Because Stat.h uses the [_dev_t](../../c-runtime-library/standard-types.md) type, which is defined in Types.h, you must include Types.h before Stat.h in your code."},{"content":"<ph id=\"ph1\">`_fstat64`</ph>, which uses the <ph id=\"ph2\">`__stat64`</ph> structure, allows file-creation dates to be expressed up through 23:59:59, December 31, 3000, UTC; whereas the other functions only represent dates through 23:59:59 January 18, 2038, UTC.","pos":[3808,4033],"source":"`_fstat64`, which uses the `__stat64` structure, allows file-creation dates to be expressed up through 23:59:59, December 31, 3000, UTC; whereas the other functions only represent dates through 23:59:59 January 18, 2038, UTC."},{"content":"Midnight, January 1, 1970, is the lower bound of the date range for all these functions.","pos":[4034,4122]},{"content":"Variations of these functions support 32-bit or 64-bit time types and 32-bit or 64-bit file lengths.","pos":[4129,4229]},{"content":"The first numerical suffix (<ph id=\"ph1\">`32`</ph> or <ph id=\"ph2\">`64`</ph>) indicates the size of the time type used; the second suffix is either <ph id=\"ph3\">`i32`</ph> or <ph id=\"ph4\">`i64`</ph>, indicating whether the file size is represented as a 32-bit or 64-bit integer.","pos":[4230,4436],"source":" The first numerical suffix (`32` or `64`) indicates the size of the time type used; the second suffix is either `i32` or `i64`, indicating whether the file size is represented as a 32-bit or 64-bit integer."},{"content":"<ph id=\"ph1\">`_fstat`</ph> is equivalent to <ph id=\"ph2\">`_fstat64i32`</ph>, and <ph id=\"ph3\">`struct``_stat`</ph> contains a 64-bit time.","pos":[4443,4527],"source":"`_fstat` is equivalent to `_fstat64i32`, and `struct``_stat` contains a 64-bit time."},{"content":"This is true unless <ph id=\"ph1\">`_USE_32BIT_TIME_T`</ph> is defined, in which case the old behavior is in effect; <ph id=\"ph2\">`_fstat`</ph> uses a 32-bit time, and <ph id=\"ph3\">`struct``_stat`</ph> contains a 32-bit time.","pos":[4528,4697],"source":" This is true unless `_USE_32BIT_TIME_T` is defined, in which case the old behavior is in effect; `_fstat` uses a 32-bit time, and `struct``_stat` contains a 32-bit time."},{"content":"The same is true for <ph id=\"ph1\">`_fstati64`</ph>.","pos":[4698,4731],"source":" The same is true for `_fstati64`."},{"pos":[4741,4791],"content":"Time Type and File Length Type Variations of _stat","linkify":"Time Type and File Length Type Variations of _stat","nodes":[{"content":"Time Type and File Length Type Variations of _stat","pos":[0,50]}]},{"content":"Functions","pos":[4798,4807]},{"content":"_USE_32BIT_TIME_T defined?","pos":[4808,4834]},{"content":"Time type","pos":[4835,4844]},{"content":"File length type","pos":[4845,4861]},{"content":"Not defined","pos":[4971,4982]},{"content":"64-bit","pos":[4983,4989]},{"content":"32-bit","pos":[4990,4996]},{"content":"Defined","pos":[5010,5017]},{"content":"32-bit","pos":[5018,5024]},{"content":"32-bit","pos":[5025,5031]},{"content":"Not affected by the macro definition","pos":[5047,5083]},{"content":"32-bit","pos":[5084,5090]},{"content":"32-bit","pos":[5091,5097]},{"content":"Not affected by the macro definition","pos":[5113,5149]},{"content":"64-bit","pos":[5150,5156]},{"content":"64-bit","pos":[5157,5163]},{"content":"Not defined","pos":[5180,5191]},{"content":"64-bit","pos":[5192,5198]},{"content":"64-bit","pos":[5199,5205]},{"content":"Defined","pos":[5222,5229]},{"content":"32-bit","pos":[5230,5236]},{"content":"64-bit","pos":[5237,5243]},{"content":"Not affected by the macro definition","pos":[5262,5298]},{"content":"32-bit","pos":[5299,5305]},{"content":"64-bit","pos":[5306,5312]},{"content":"Not affected by the macro definition","pos":[5331,5367]},{"content":"64-bit","pos":[5368,5374]},{"content":"32-bit","pos":[5375,5381]},{"pos":[5391,5403],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Function","pos":[5410,5418]},{"content":"Required header","pos":[5419,5434]},{"content":"<ph id=\"ph1\">\\&lt;</ph>sys/stat.h&gt; and <ph id=\"ph2\">\\&lt;</ph>sys/types.h&gt;","pos":[5489,5521],"source":"\\<sys/stat.h> and \\<sys/types.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>sys/stat.h&gt; and <ph id=\"ph2\">\\&lt;</ph>sys/types.h&gt;","pos":[5537,5569],"source":"\\<sys/stat.h> and \\<sys/types.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>sys/stat.h&gt; and <ph id=\"ph2\">\\&lt;</ph>sys/types.h&gt;","pos":[5585,5617],"source":"\\<sys/stat.h> and \\<sys/types.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>sys/stat.h&gt; and <ph id=\"ph2\">\\&lt;</ph>sys/types.h&gt;","pos":[5634,5666],"source":"\\<sys/stat.h> and \\<sys/types.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>sys/stat.h&gt; and <ph id=\"ph2\">\\&lt;</ph>sys/types.h&gt;","pos":[5685,5717],"source":"\\<sys/stat.h> and \\<sys/types.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>sys/stat.h&gt; and <ph id=\"ph2\">\\&lt;</ph>sys/types.h&gt;","pos":[5736,5768],"source":"\\<sys/stat.h> and \\<sys/types.h>"},{"pos":[5776,5894],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[5903,5910],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7351,7376],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[7380,7395]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[7396,7443],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[7444,7569],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[7578,7586],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>File Handling<ept id=\"p1\">](../../c-runtime-library/file-handling.md)</ept><ph id=\"ph1\"> </ph>","pos":[7590,7648],"source":"[File Handling](../../c-runtime-library/file-handling.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_access, _waccess<ept id=\"p1\">](../../c-runtime-library/reference/access-waccess.md)</ept><ph id=\"ph1\"> </ph>","pos":[7651,7725],"source":" [_access, _waccess](../../c-runtime-library/reference/access-waccess.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_chmod, _wchmod<ept id=\"p1\">](../../c-runtime-library/reference/chmod-wchmod.md)</ept><ph id=\"ph1\"> </ph>","pos":[7728,7798],"source":" [_chmod, _wchmod](../../c-runtime-library/reference/chmod-wchmod.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_filelength, _filelengthi64<ept id=\"p1\">](../../c-runtime-library/reference/filelength-filelengthi64.md)</ept><ph id=\"ph1\"> </ph>","pos":[7801,7895],"source":" [_filelength, _filelengthi64](../../c-runtime-library/reference/filelength-filelengthi64.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_stat, _wstat Functions<ept id=\"p1\">](../../c-runtime-library/reference/stat-functions.md)</ept>","pos":[7898,7977],"source":" [_stat, _wstat Functions](../../c-runtime-library/reference/stat-functions.md)"}],"content":"---\ntitle: \"_fstat, _fstat32, _fstat64, _fstati64, _fstat32i64, _fstat64i32 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_fstat32\"\n  - \"_fstat64\"\n  - \"_fstati64\"\n  - \"_fstat\"\n  - \"_fstat64i32\"\n  - \"_fstat32i64\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-filesystem-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_fstat32i64\"\n  - \"fstat\"\n  - \"fstat64i32\"\n  - \"_fstat64\"\n  - \"_fstati64\"\n  - \"fstat64\"\n  - \"_fstat32\"\n  - \"fstat32i64\"\n  - \"fstati64\"\n  - \"_fstat\"\n  - \"fstat32\"\n  - \"_fstat64i32\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_fstat64 function\"\n  - \"fstati64 function\"\n  - \"_fstat64i32 function\"\n  - \"_fstat32i64 function\"\n  - \"_fstat32 function\"\n  - \"file information\"\n  - \"fstat64i32 function\"\n  - \"fstat32 function\"\n  - \"fstat function\"\n  - \"fstat64 function\"\n  - \"_fstat function\"\n  - \"_fstati64 function\"\n  - \"fstat32i64 function\"\nms.assetid: 088f5e7a-9636-4cf7-ab8e-e28d2aa4280a\ncaps.latest.revision: 23\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _fstat, _fstat32, _fstat64, _fstati64, _fstat32i64, _fstat64i32\nGets information about an open file.  \n  \n## Syntax  \n  \n```  \nint _fstat(   \n   int fd,  \n   struct _stat *buffer   \n);  \nint _fstat32(   \n   int fd,  \n   struct __stat32 *buffer   \n);  \nint _fstat64(   \n   int fd,  \n   struct __stat64 *buffer   \n);  \nint _fstati64(   \n   int fd,  \n   struct _stati64 *buffer   \n);  \nint _fstat32i64(   \n   int fd,  \n   struct _stat32i64 *buffer   \n);  \nint _fstat64i32(   \n   int fd,  \n   struct _stat64i32 *buffer   \n);  \n```  \n  \n#### Parameters  \n `fd`  \n File descriptor of the open file.  \n  \n `buffer`  \n Pointer to the structure to store results.  \n  \n## Return Value  \n Returns 0 if the file-status information is obtained. A return value of â€“1 indicates an error. If the file descriptor is invalid or `buffer` is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, `errno` is set to `EBADF`, in the case of an invalid file descriptor, or to `EINVAL`, if `buffer` is `NULL`.  \n  \n## Remarks  \n The `_fstat` function obtains information about the open file associated with `fd` and stores it in the structure pointed to by `buffer`. The `_stat` structure, defined in SYS\\Stat.h, contains the following fields.  \n  \n `st_atime`  \n Time of the last file access.  \n  \n `st_ctime`  \n Time of the creation of the file.  \n  \n `st_dev`  \n If a device, `fd`; otherwise 0.  \n  \n `st_mode`  \n Bit mask for file-mode information. The `_S_IFCHR` bit is set if `fd` refers to a device. The `_S_IFREG` bit is set if `fd` refers to an ordinary file. The read/write bits are set according to the file's permission mode. `_S_IFCHR` and other constants are defined in SYS\\Stat.h.  \n  \n `st_mtime`  \n Time of the last modification of the file.  \n  \n `st_nlink`  \n Always 1 on non-NTFS file systems.  \n  \n `st_rdev`  \n If a device, `fd`; otherwise 0.  \n  \n `st_size`  \n Size of the file in bytes.  \n  \n If `fd` refers to a device, the `st_atime`, `st_ctime`, `st_mtime`, and `st_size` fields are not meaningful.  \n  \n Because Stat.h uses the [_dev_t](../../c-runtime-library/standard-types.md) type, which is defined in Types.h, you must include Types.h before Stat.h in your code.  \n  \n `_fstat64`, which uses the `__stat64` structure, allows file-creation dates to be expressed up through 23:59:59, December 31, 3000, UTC; whereas the other functions only represent dates through 23:59:59 January 18, 2038, UTC. Midnight, January 1, 1970, is the lower bound of the date range for all these functions.  \n  \n Variations of these functions support 32-bit or 64-bit time types and 32-bit or 64-bit file lengths. The first numerical suffix (`32` or `64`) indicates the size of the time type used; the second suffix is either `i32` or `i64`, indicating whether the file size is represented as a 32-bit or 64-bit integer.  \n  \n `_fstat` is equivalent to `_fstat64i32`, and `struct``_stat` contains a 64-bit time. This is true unless `_USE_32BIT_TIME_T` is defined, in which case the old behavior is in effect; `_fstat` uses a 32-bit time, and `struct``_stat` contains a 32-bit time. The same is true for `_fstati64`.  \n  \n### Time Type and File Length Type Variations of _stat  \n  \n|Functions|_USE_32BIT_TIME_T defined?|Time type|File length type|  \n|---------------|------------------------------------|---------------|----------------------|  \n|`_fstat`|Not defined|64-bit|32-bit|  \n|`_fstat`|Defined|32-bit|32-bit|  \n|`_fstat32`|Not affected by the macro definition|32-bit|32-bit|  \n|`_fstat64`|Not affected by the macro definition|64-bit|64-bit|  \n|`_fstati64`|Not defined|64-bit|64-bit|  \n|`_fstati64`|Defined|32-bit|64-bit|  \n|`_fstat32i64`|Not affected by the macro definition|32-bit|64-bit|  \n|`_fstat64i32`|Not affected by the macro definition|64-bit|32-bit|  \n  \n## Requirements  \n  \n|Function|Required header|  \n|--------------|---------------------|  \n|`_fstat`|\\<sys/stat.h> and \\<sys/types.h>|  \n|`_fstat32`|\\<sys/stat.h> and \\<sys/types.h>|  \n|`_fstat64`|\\<sys/stat.h> and \\<sys/types.h>|  \n|`_fstati64`|\\<sys/stat.h> and \\<sys/types.h>|  \n|`_fstat32i64`|\\<sys/stat.h> and \\<sys/types.h>|  \n|`_fstat64i32`|\\<sys/stat.h> and \\<sys/types.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_fstat.c  \n// This program uses _fstat to report  \n// the size of a file named F_STAT.OUT.  \n  \n#include <io.h>  \n#include <fcntl.h>  \n#include <time.h>  \n#include <sys/types.h>  \n#include <sys/stat.h>  \n#include <stdio.h>  \n#include <stdlib.h>  \n#include <string.h>  \n#include <errno.h>  \n#include <share.h>  \n  \nint main( void )  \n{  \n   struct _stat buf;  \n   int fd, result;  \n   char buffer[] = \"A line to output\";  \n   char timebuf[26];  \n   errno_t err;  \n  \n   _sopen_s( &fd,  \n             \"f_stat.out\",  \n             _O_CREAT | _O_WRONLY | _O_TRUNC,  \n             _SH_DENYNO,  \n             _S_IREAD | _S_IWRITE );  \n   if( fd != -1 )  \n      _write( fd, buffer, strlen( buffer ) );  \n  \n   // Get data associated with \"fd\":   \n   result = _fstat( fd, &buf );  \n  \n   // Check if statistics are valid:   \n   if( result != 0 )  \n   {  \n      if (errno == EBADF)  \n        printf( \"Bad file descriptor.\\n\" );  \n      else if (errno == EINVAL)  \n        printf( \"Invalid argument to _fstat.\\n\" );  \n   }  \n   else  \n   {  \n      printf( \"File size     : %ld\\n\", buf.st_size );  \n      err = ctime_s(timebuf, 26, &buf.st_mtime);  \n      if (err)  \n      {  \n         printf(\"Invalid argument to ctime_s.\");  \n         exit(1);  \n      }  \n      printf( \"Time modified : %s\", timebuf );  \n   }  \n   _close( fd );  \n}  \n```  \n  \n```Output  \nFile size     : 16  \nTime modified : Wed May 07 15:25:11 2003  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [File Handling](../../c-runtime-library/file-handling.md)   \n [_access, _waccess](../../c-runtime-library/reference/access-waccess.md)   \n [_chmod, _wchmod](../../c-runtime-library/reference/chmod-wchmod.md)   \n [_filelength, _filelengthi64](../../c-runtime-library/reference/filelength-filelengthi64.md)   \n [_stat, _wstat Functions](../../c-runtime-library/reference/stat-functions.md)"}