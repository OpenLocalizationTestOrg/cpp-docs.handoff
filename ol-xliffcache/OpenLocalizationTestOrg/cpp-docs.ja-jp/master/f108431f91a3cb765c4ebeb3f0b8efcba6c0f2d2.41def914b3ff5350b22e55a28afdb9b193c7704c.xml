{"nodes":[{"pos":[12,53],"content":"&lt;atomic&gt; functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>atomic<ph id=\"ph2\">&amp;gt;</ph> functions | Microsoft Docs","pos":[0,41],"source":"&lt;atomic&gt; functions | Microsoft Docs"}]},{"pos":[296,320],"content":"&lt;atomic&gt; functions","linkify":"&lt;atomic&gt; functions","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>atomic<ph id=\"ph2\">&amp;gt;</ph> functions","pos":[0,24],"source":"&lt;atomic&gt; functions"}]},{"pos":[339,413],"content":"<bpt id=\"p1\">[</bpt>atomic_compare_exchange_strong<ept id=\"p1\">](#atomic_compare_exchange_strong_function)</ept>","source":"[atomic_compare_exchange_strong](#atomic_compare_exchange_strong_function)"},{"pos":[414,506],"content":"<bpt id=\"p1\">[</bpt>atomic_compare_exchange_strong_explicit<ept id=\"p1\">](#atomic_compare_exchange_strong_explicit_function)</ept>","source":"[atomic_compare_exchange_strong_explicit](#atomic_compare_exchange_strong_explicit_function)"},{"pos":[507,577],"content":"<bpt id=\"p1\">[</bpt>atomic_compare_exchange_weak<ept id=\"p1\">](#atomic_compare_exchange_weak_function)</ept>","source":"[atomic_compare_exchange_weak](#atomic_compare_exchange_weak_function)"},{"pos":[582,670],"content":"<bpt id=\"p1\">[</bpt>atomic_compare_exchange_weak_explicit<ept id=\"p1\">](#atomic_compare_exchange_weak_explicit_function)</ept>","source":"[atomic_compare_exchange_weak_explicit](#atomic_compare_exchange_weak_explicit_function)"},{"pos":[671,715],"content":"<bpt id=\"p1\">[</bpt>atomic_exchange<ept id=\"p1\">](#atomic_exchange_function)</ept>","source":"[atomic_exchange](#atomic_exchange_function)"},{"pos":[716,778],"content":"<bpt id=\"p1\">[</bpt>atomic_exchange_explicit<ept id=\"p1\">](#atomic_exchange_explicit_function)</ept>","source":"[atomic_exchange_explicit](#atomic_exchange_explicit_function)"},{"pos":[783,829],"content":"<bpt id=\"p1\">[</bpt>atomic_fetch_add<ept id=\"p1\">](#atomic_fetch_add_function)</ept>","source":"[atomic_fetch_add](#atomic_fetch_add_function)"},{"pos":[830,894],"content":"<bpt id=\"p1\">[</bpt>atomic_fetch_add_explicit<ept id=\"p1\">](#atomic_fetch_add_explicit_function)</ept>","source":"[atomic_fetch_add_explicit](#atomic_fetch_add_explicit_function)"},{"pos":[895,941],"content":"<bpt id=\"p1\">[</bpt>atomic_fetch_and<ept id=\"p1\">](#atomic_fetch_and_function)</ept>","source":"[atomic_fetch_and](#atomic_fetch_and_function)"},{"pos":[946,1010],"content":"<bpt id=\"p1\">[</bpt>atomic_fetch_and_explicit<ept id=\"p1\">](#atomic_fetch_and_explicit_function)</ept>","source":"[atomic_fetch_and_explicit](#atomic_fetch_and_explicit_function)"},{"pos":[1011,1055],"content":"<bpt id=\"p1\">[</bpt>atomic_fetch_or<ept id=\"p1\">](#atomic_fetch_or_function)</ept>","source":"[atomic_fetch_or](#atomic_fetch_or_function)"},{"pos":[1056,1118],"content":"<bpt id=\"p1\">[</bpt>atomic_fetch_or_explicit<ept id=\"p1\">](#atomic_fetch_or_explicit_function)</ept>","source":"[atomic_fetch_or_explicit](#atomic_fetch_or_explicit_function)"},{"pos":[1123,1169],"content":"<bpt id=\"p1\">[</bpt>atomic_fetch_sub<ept id=\"p1\">](#atomic_fetch_sub_function)</ept>","source":"[atomic_fetch_sub](#atomic_fetch_sub_function)"},{"pos":[1170,1234],"content":"<bpt id=\"p1\">[</bpt>atomic_fetch_sub_explicit<ept id=\"p1\">](#atomic_fetch_sub_explicit_function)</ept>","source":"[atomic_fetch_sub_explicit](#atomic_fetch_sub_explicit_function)"},{"pos":[1235,1281],"content":"<bpt id=\"p1\">[</bpt>atomic_fetch_xor<ept id=\"p1\">](#atomic_fetch_xor_function)</ept>","source":"[atomic_fetch_xor](#atomic_fetch_xor_function)"},{"pos":[1286,1350],"content":"<bpt id=\"p1\">[</bpt>atomic_fetch_xor_explicit<ept id=\"p1\">](#atomic_fetch_xor_explicit_function)</ept>","source":"[atomic_fetch_xor_explicit](#atomic_fetch_xor_explicit_function)"},{"pos":[1351,1399],"content":"<bpt id=\"p1\">[</bpt>atomic_flag_clear<ept id=\"p1\">](#atomic_flag_clear_function)</ept>","source":"[atomic_flag_clear](#atomic_flag_clear_function)"},{"pos":[1400,1466],"content":"<bpt id=\"p1\">[</bpt>atomic_flag_clear_explicit<ept id=\"p1\">](#atomic_flag_clear_explicit_function)</ept>","source":"[atomic_flag_clear_explicit](#atomic_flag_clear_explicit_function)"},{"pos":[1471,1533],"content":"<bpt id=\"p1\">[</bpt>atomic_flag_test_and_set<ept id=\"p1\">](#atomic_flag_test_and_set_function)</ept>","source":"[atomic_flag_test_and_set](#atomic_flag_test_and_set_function)"},{"pos":[1534,1614],"content":"<bpt id=\"p1\">[</bpt>atomic_flag_test_and_set_explicit<ept id=\"p1\">](#atomic_flag_test_and_set_explicit_function)</ept>","source":"[atomic_flag_test_and_set_explicit](#atomic_flag_test_and_set_explicit_function)"},{"pos":[1615,1651],"content":"<bpt id=\"p1\">[</bpt>atomic_init<ept id=\"p1\">](#atomic_init_function)</ept>","source":"[atomic_init](#atomic_init_function)"},{"pos":[1656,1708],"content":"<bpt id=\"p1\">[</bpt>atomic_is_lock_free<ept id=\"p1\">](#atomic_is_lock_free_function)</ept>","source":"[atomic_is_lock_free](#atomic_is_lock_free_function)"},{"pos":[1709,1745],"content":"<bpt id=\"p1\">[</bpt>atomic_load<ept id=\"p1\">](#atomic_load_function)</ept>","source":"[atomic_load](#atomic_load_function)"},{"pos":[1746,1800],"content":"<bpt id=\"p1\">[</bpt>atomic_load_explicit<ept id=\"p1\">](#atomic_load_explicit_function)</ept>","source":"[atomic_load_explicit](#atomic_load_explicit_function)"},{"pos":[1805,1857],"content":"<bpt id=\"p1\">[</bpt>atomic_signal_fence<ept id=\"p1\">](#atomic_signal_fence_function)</ept>","source":"[atomic_signal_fence](#atomic_signal_fence_function)"},{"pos":[1858,1896],"content":"<bpt id=\"p1\">[</bpt>atomic_store<ept id=\"p1\">](#atomic_store_function)</ept>","source":"[atomic_store](#atomic_store_function)"},{"pos":[1897,1953],"content":"<bpt id=\"p1\">[</bpt>atomic_store_explicit<ept id=\"p1\">](#atomic_store_explicit_function)</ept>","source":"[atomic_store_explicit](#atomic_store_explicit_function)"},{"pos":[1958,2010],"content":"<bpt id=\"p1\">[</bpt>atomic_thread_fence<ept id=\"p1\">](#atomic_thread_fence_function)</ept>","source":"[atomic_thread_fence](#atomic_thread_fence_function)"},{"pos":[2011,2055],"content":"<bpt id=\"p1\">[</bpt>kill_dependency<ept id=\"p1\">](#kill_dependency_function)</ept>","source":"[kill_dependency](#kill_dependency_function)"},{"pos":[2066,2152],"content":"<bpt id=\"p1\">&lt;a name=\"atomic_compare_exchange_strong_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atomic_compare_exchange_strong","linkify":"<a name=\"atomic_compare_exchange_strong_function\"></a>  atomic_compare_exchange_strong","source":"<a name=\"atomic_compare_exchange_strong_function\"></a>  atomic_compare_exchange_strong"},{"content":"Performs an atomic compare and exchange operation.","pos":[2156,2206]},{"pos":[2482,2492],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <ph id=\"ph1\">`atomic`</ph> object that stores a value of type <ph id=\"ph2\">`Ty`</ph>.","pos":[2506,2571],"source":" A pointer to an `atomic` object that stores a value of type `Ty`."},{"content":"A pointer to a value of type <ph id=\"ph1\">`Ty`</ph>.","pos":[2587,2621],"source":" A pointer to a value of type `Ty`."},{"content":"A value of type <ph id=\"ph1\">`Ty`</ph>.","pos":[2639,2660],"source":" A value of type `Ty`."},{"pos":[2670,2682],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2686,2745],"content":"A <ph id=\"ph1\">`bool`</ph> that indicates the result of the value comparison.","source":"A `bool` that indicates the result of the value comparison."},{"pos":[2755,2762],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method performs an atomic compare and exchange operation by using implicit <ph id=\"ph1\">`memory_order_seq_cst`</ph><bpt id=\"p1\">[</bpt>memory_order<ept id=\"p1\">](../standard-library/atomic-enums.md#memory_order_enum)</ept> arguments.","pos":[2766,2948],"source":"This method performs an atomic compare and exchange operation by using implicit `memory_order_seq_cst`[memory_order](../standard-library/atomic-enums.md#memory_order_enum) arguments."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>atomic_compare_exchange_strong_explicit<ept id=\"p1\">](../standard-library/atomic-functions.md#atomic_compare_exchange_strong_explicit_function)</ept>.","pos":[2949,3107],"source":" For more information, see [atomic_compare_exchange_strong_explicit](../standard-library/atomic-functions.md#atomic_compare_exchange_strong_explicit_function)."},{"pos":[3117,3221],"content":"<bpt id=\"p1\">&lt;a name=\"atomic_compare_exchange_strong_explicit_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atomic_compare_exchange_strong_explicit","linkify":"<a name=\"atomic_compare_exchange_strong_explicit_function\"></a>  atomic_compare_exchange_strong_explicit","source":"<a name=\"atomic_compare_exchange_strong_explicit_function\"></a>  atomic_compare_exchange_strong_explicit"},{"pos":[3225,3277],"content":"Performs an <bpt id=\"p1\">*</bpt>atomic compare and exchange<ept id=\"p1\">*</ept> operation.","source":"Performs an *atomic compare and exchange* operation."},{"pos":[3673,3683],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <ph id=\"ph1\">`atomic`</ph> object that stores a value of type <ph id=\"ph2\">`Ty`</ph>.","pos":[3697,3762],"source":" A pointer to an `atomic` object that stores a value of type `Ty`."},{"content":"A pointer to a value of type <ph id=\"ph1\">`Ty`</ph>.","pos":[3778,3812],"source":" A pointer to a value of type `Ty`."},{"content":"A value of type <ph id=\"ph1\">`Ty`</ph>.","pos":[3830,3851],"source":" A value of type `Ty`."},{"content":"First <bpt id=\"p1\">[</bpt>memory_order<ept id=\"p1\">](../standard-library/atomic-enums.md#memory_order_enum)</ept> argument.","pos":[3870,3955],"source":" First [memory_order](../standard-library/atomic-enums.md#memory_order_enum) argument."},{"content":"Second <ph id=\"ph1\">`memory_order`</ph> argument.","pos":[3974,4005],"source":" Second `memory_order` argument."},{"content":"The value of <ph id=\"ph1\">`Order2`</ph> cannot be <ph id=\"ph2\">`memory_order_release`</ph> or <ph id=\"ph3\">`memory_order_acq_rel`</ph>, it cannot be stronger than the value of <ph id=\"ph4\">`Order1`</ph>.","pos":[4006,4137],"source":" The value of `Order2` cannot be `memory_order_release` or `memory_order_acq_rel`, it cannot be stronger than the value of `Order1`."},{"pos":[4147,4159],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4163,4222],"content":"A <ph id=\"ph1\">`bool`</ph> that indicates the result of the value comparison.","source":"A `bool` that indicates the result of the value comparison."},{"pos":[4232,4239],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An <bpt id=\"p1\">*</bpt>atomic compare and exchange operation<ept id=\"p1\">*</ept> compares the value that is stored in the object that is pointed to by <ph id=\"ph1\">`Atom`</ph> against the value that is pointed to by <ph id=\"ph2\">`Exp`</ph>.","pos":[4243,4409],"source":"An *atomic compare and exchange operation* compares the value that is stored in the object that is pointed to by `Atom` against the value that is pointed to by `Exp`."},{"content":"If the values are equal, The the value that is stored in the object that is pointed to by <ph id=\"ph1\">`atom`</ph> is replaced with <ph id=\"ph2\">`Val`</ph> by using a <ph id=\"ph3\">`read-modify-write`</ph> operation and applying the memory order constraints that are specified by <ph id=\"ph4\">`Order1`</ph>.","pos":[4410,4648],"source":" If the values are equal,\n    The the value that is stored in the object that is pointed to by `atom` is replaced with `Val` by using a `read-modify-write` operation and applying the memory order constraints that are specified by `Order1`."},{"content":"If the values are not equal, The operation replaces the value that is pointed to by <ph id=\"ph1\">`Exp`</ph> with the value that is stored in the object that is pointed to by <ph id=\"ph2\">`Atom`</ph> and applies the memory order constraints that are specified by <ph id=\"ph3\">`Order2`</ph>.","pos":[4649,4888],"source":" If the values are not equal,\n    The operation replaces the value that is pointed to by `Exp` with the value that is stored in the object that is pointed to by `Atom` and applies the memory order constraints that are specified by `Order2`."},{"pos":[4898,4980],"content":"<bpt id=\"p1\">&lt;a name=\"atomic_compare_exchange_weak_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atomic_compare_exchange_weak","linkify":"<a name=\"atomic_compare_exchange_weak_function\"></a>  atomic_compare_exchange_weak","source":"<a name=\"atomic_compare_exchange_weak_function\"></a>  atomic_compare_exchange_weak"},{"pos":[4984,5040],"content":"Performs a <bpt id=\"p1\">*</bpt>weak atomic compare and exchange<ept id=\"p1\">*</ept> operation.","source":"Performs a *weak atomic compare and exchange* operation."},{"pos":[5319,5329],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <ph id=\"ph1\">`atomic`</ph> object that stores a value of type <ph id=\"ph2\">`Ty`</ph>.","pos":[5343,5408],"source":" A pointer to an `atomic` object that stores a value of type `Ty`."},{"content":"A pointer to a value of type <ph id=\"ph1\">`Ty`</ph>.","pos":[5424,5458],"source":" A pointer to a value of type `Ty`."},{"content":"A value of type <ph id=\"ph1\">`Ty`</ph>.","pos":[5476,5497],"source":" A value of type `Ty`."},{"pos":[5507,5519],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5523,5582],"content":"A <ph id=\"ph1\">`bool`</ph> that indicates the result of the value comparison.","source":"A `bool` that indicates the result of the value comparison."},{"pos":[5592,5599],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method performs a <bpt id=\"p1\">*</bpt>weak atomic compare and exchange operation<ept id=\"p1\">*</ept> that has implicit <ph id=\"ph1\">`memory_order_seq_cst`</ph><bpt id=\"p2\">[</bpt>memory_order<ept id=\"p2\">](../standard-library/atomic-enums.md#memory_order_enum)</ept> arguments.","pos":[5603,5791],"source":"This method performs a *weak atomic compare and exchange operation* that has implicit `memory_order_seq_cst`[memory_order](../standard-library/atomic-enums.md#memory_order_enum) arguments."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>atomic_compare_exchange_weak_explicit<ept id=\"p1\">](../standard-library/atomic-functions.md#atomic_compare_exchange_weak_explicit_function)</ept>.","pos":[5792,5946],"source":" For more information, see [atomic_compare_exchange_weak_explicit](../standard-library/atomic-functions.md#atomic_compare_exchange_weak_explicit_function)."},{"pos":[5956,6056],"content":"<bpt id=\"p1\">&lt;a name=\"atomic_compare_exchange_weak_explicit_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atomic_compare_exchange_weak_explicit","linkify":"<a name=\"atomic_compare_exchange_weak_explicit_function\"></a>  atomic_compare_exchange_weak_explicit","source":"<a name=\"atomic_compare_exchange_weak_explicit_function\"></a>  atomic_compare_exchange_weak_explicit"},{"pos":[6060,6116],"content":"Performs a <bpt id=\"p1\">*</bpt>weak atomic compare and exchange<ept id=\"p1\">*</ept> operation.","source":"Performs a *weak atomic compare and exchange* operation."},{"pos":[6510,6520],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <ph id=\"ph1\">`atomic`</ph> object that stores a value of type <ph id=\"ph2\">`Ty`</ph>.","pos":[6534,6599],"source":" A pointer to an `atomic` object that stores a value of type `Ty`."},{"content":"A pointer to a value of type <ph id=\"ph1\">`Ty`</ph>.","pos":[6615,6649],"source":" A pointer to a value of type `Ty`."},{"content":"A value of type <ph id=\"ph1\">`Ty`</ph>.","pos":[6667,6688],"source":" A value of type `Ty`."},{"content":"First <bpt id=\"p1\">[</bpt>memory_order<ept id=\"p1\">](../standard-library/atomic-enums.md#memory_order_enum)</ept> argument.","pos":[6707,6792],"source":" First [memory_order](../standard-library/atomic-enums.md#memory_order_enum) argument."},{"content":"Second <ph id=\"ph1\">`memory_order`</ph> argument.","pos":[6811,6842],"source":" Second `memory_order` argument."},{"content":"The value of <ph id=\"ph1\">`Order2`</ph> cannot be <ph id=\"ph2\">`memory_order_release`</ph> or <ph id=\"ph3\">`memory_order_acq_rel`</ph>, nor can it be stronger than the value of <ph id=\"ph4\">`Order1`</ph>.","pos":[6843,6975],"source":" The value of `Order2` cannot be `memory_order_release` or `memory_order_acq_rel`, nor can it be stronger than the value of `Order1`."},{"pos":[6985,6997],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7001,7060],"content":"A <ph id=\"ph1\">`bool`</ph> that indicates the result of the value comparison.","source":"A `bool` that indicates the result of the value comparison."},{"pos":[7070,7077],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An <bpt id=\"p1\">*</bpt>atomic compare and exchange operation<ept id=\"p1\">*</ept> compares the value that is stored in the object that is pointed to by <ph id=\"ph1\">`Atom`</ph> with the value that is pointed to by <ph id=\"ph2\">`Exp`</ph>.","pos":[7081,7244],"source":"An *atomic compare and exchange operation* compares the value that is stored in the object that is pointed to by `Atom` with the value that is pointed to by `Exp`."},{"content":"If the values are equal, the operation replaces the value that is stored in the object that is pointed to by <ph id=\"ph1\">`Atom`</ph> with <ph id=\"ph2\">`Val`</ph> by using a <ph id=\"ph3\">`read-modify-write`</ph> operation and applying the memory-order constraints that are specified by <ph id=\"ph4\">`Order1`</ph>.","pos":[7245,7486],"source":" If the values are equal, the operation replaces the value that is stored in the object that is pointed to by `Atom` with `Val` by using a `read-modify-write` operation and applying the memory-order constraints that are specified by `Order1`."},{"content":"If the values are not equal, the operation replaces the value that is pointed to by <ph id=\"ph1\">`Exp`</ph> with the value that is stored in the object that is pointed to by <ph id=\"ph2\">`Atom`</ph> and applies the memory-order constraints that are specified by <ph id=\"ph3\">`Order2`</ph>.","pos":[7487,7722],"source":" If the values are not equal, the operation replaces the value that is pointed to by `Exp` with the value that is stored in the object that is pointed to by `Atom` and applies the memory-order constraints that are specified by `Order2`."},{"content":"A <bpt id=\"p1\">*</bpt>weak<ept id=\"p1\">*</ept> atomic compare and exchange operation performs an exchange if the compared values are equal.","pos":[7729,7830],"source":"A *weak* atomic compare and exchange operation performs an exchange if the compared values are equal."},{"content":"However, if the values are not equal, the operation is not guaranteed to perform an exchange.","pos":[7831,7924]},{"pos":[7934,7990],"content":"<bpt id=\"p1\">&lt;a name=\"atomic_exchange_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atomic_exchange","linkify":"<a name=\"atomic_exchange_function\"></a>  atomic_exchange","source":"<a name=\"atomic_exchange_function\"></a>  atomic_exchange"},{"pos":[7994,8045],"content":"Uses <ph id=\"ph1\">`Value`</ph> to replace the stored value of <ph id=\"ph2\">`Atom`</ph>.","source":"Uses `Value` to replace the stored value of `Atom`."},{"pos":[8245,8255],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <ph id=\"ph1\">`atomic`</ph> object that stores a value of type <ph id=\"ph2\">`Ty`</ph>.","pos":[8269,8334],"source":" A pointer to an `atomic` object that stores a value of type `Ty`."},{"content":"A value of type <ph id=\"ph1\">`Ty`</ph>.","pos":[8352,8373],"source":" A value of type `Ty`."},{"pos":[8383,8395],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8399,8446],"content":"The stored value of <ph id=\"ph1\">`Atom`</ph> before the exchange.","source":"The stored value of `Atom` before the exchange."},{"pos":[8456,8463],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8467,8702],"content":"The <ph id=\"ph1\">`atomic_exchange`</ph> function performs a <ph id=\"ph2\">`read-modify-write`</ph> operation to exchange the value that is stored in <ph id=\"ph3\">`Atom`</ph> with <ph id=\"ph4\">`Value`</ph>, using the <ph id=\"ph5\">`memory_order_seq_cst`</ph><bpt id=\"p1\">[</bpt>memory_order<ept id=\"p1\">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.","source":"The `atomic_exchange` function performs a `read-modify-write` operation to exchange the value that is stored in `Atom` with `Value`, using the `memory_order_seq_cst`[memory_order](../standard-library/atomic-enums.md#memory_order_enum)."},{"pos":[8712,8786],"content":"<bpt id=\"p1\">&lt;a name=\"atomic_exchange_explicit_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atomic_exchange_explicit","linkify":"<a name=\"atomic_exchange_explicit_function\"></a>  atomic_exchange_explicit","source":"<a name=\"atomic_exchange_explicit_function\"></a>  atomic_exchange_explicit"},{"pos":[8790,8839],"content":"Replaces the stored value of <ph id=\"ph1\">`Atom`</ph> with <ph id=\"ph2\">`Value`</ph>.","source":"Replaces the stored value of `Atom` with `Value`."},{"pos":[9124,9134],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <ph id=\"ph1\">`atomic`</ph> object that stores a value of type <ph id=\"ph2\">`Ty`</ph>.","pos":[9148,9213],"source":" A pointer to an `atomic` object that stores a value of type `Ty`."},{"content":"A value of type <ph id=\"ph1\">`Ty`</ph>.","pos":[9231,9252],"source":" A value of type `Ty`."},{"content":"A <bpt id=\"p1\">[</bpt>memory_order<ept id=\"p1\">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.","pos":[9270,9342],"source":" A [memory_order](../standard-library/atomic-enums.md#memory_order_enum)."},{"pos":[9352,9364],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9368,9415],"content":"The stored value of <ph id=\"ph1\">`Atom`</ph> before the exchange.","source":"The stored value of `Atom` before the exchange."},{"pos":[9425,9432],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9436,9638],"content":"The <ph id=\"ph1\">`atomic_exchange_explicit`</ph> function performs a <ph id=\"ph2\">`read-modify-write`</ph> operation to exchange the value that is stored in <ph id=\"ph3\">`Atom`</ph> with <ph id=\"ph4\">`Value`</ph>, within the memory constraints that are specified by <ph id=\"ph5\">`Order`</ph>.","source":"The `atomic_exchange_explicit` function performs a `read-modify-write` operation to exchange the value that is stored in `Atom` with `Value`, within the memory constraints that are specified by `Order`."},{"pos":[9648,9706],"content":"<bpt id=\"p1\">&lt;a name=\"atomic_fetch_add_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atomic_fetch_add","linkify":"<a name=\"atomic_fetch_add_function\"></a>  atomic_fetch_add","source":"<a name=\"atomic_fetch_add_function\"></a>  atomic_fetch_add"},{"pos":[9710,9781],"content":"Adds a value to an existing value that is stored in an <ph id=\"ph1\">`atomic`</ph> object.","source":"Adds a value to an existing value that is stored in an `atomic` object."},{"pos":[9985,9995],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <ph id=\"ph1\">`atomic`</ph> object that stores a pointer to type <ph id=\"ph2\">`T`</ph>.","pos":[10009,10075],"source":" A pointer to an `atomic` object that stores a pointer to type `T`."},{"content":"A value of type <ph id=\"ph1\">`ptrdiff_t`</ph>.","pos":[10093,10121],"source":" A value of type `ptrdiff_t`."},{"pos":[10131,10143],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value of the pointer contained by the atomic object immediately before the operation was performed.","pos":[10147,10250]},{"pos":[10260,10267],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10271,10514],"content":"The <ph id=\"ph1\">`atomic_fetch_add`</ph> function performs a <ph id=\"ph2\">`read-modify-write`</ph> operation to atomically add <ph id=\"ph3\">`Value`</ph> to the stored value in <ph id=\"ph4\">`Atom`</ph>, using the <ph id=\"ph5\">`memory_order_seq_cst`</ph><bpt id=\"p1\">[</bpt>memory_order<ept id=\"p1\">](../standard-library/atomic-enums.md#memory_order_enum)</ept> constraint.","source":"The `atomic_fetch_add` function performs a `read-modify-write` operation to atomically add `Value` to the stored value in `Atom`, using the `memory_order_seq_cst`[memory_order](../standard-library/atomic-enums.md#memory_order_enum) constraint."},{"pos":[10521,10650],"content":"When the atomic type is <ph id=\"ph1\">`atomic_address`</ph>, <ph id=\"ph2\">`Value`</ph> has type <ph id=\"ph3\">`ptrdiff_t`</ph> and the operation treats the stored pointer as a <ph id=\"ph4\">`char *`</ph>.","source":"When the atomic type is `atomic_address`, `Value` has type `ptrdiff_t` and the operation treats the stored pointer as a `char *`."},{"content":"This operation is also overloaded for integral types:","pos":[10657,10710]},{"pos":[10893,10969],"content":"<bpt id=\"p1\">&lt;a name=\"atomic_fetch_add_explicit_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atomic_fetch_add_explicit","linkify":"<a name=\"atomic_fetch_add_explicit_function\"></a>  atomic_fetch_add_explicit","source":"<a name=\"atomic_fetch_add_explicit_function\"></a>  atomic_fetch_add_explicit"},{"pos":[10973,11044],"content":"Adds a value to an existing value that is stored in an <ph id=\"ph1\">`atomic`</ph> object.","source":"Adds a value to an existing value that is stored in an `atomic` object."},{"pos":[11335,11345],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <ph id=\"ph1\">`atomic`</ph> object that stores a pointer to type <ph id=\"ph2\">`T`</ph>.","pos":[11359,11425],"source":" A pointer to an `atomic` object that stores a pointer to type `T`."},{"content":"A value of type <ph id=\"ph1\">`ptrdiff_t`</ph>.","pos":[11443,11471],"source":" A value of type `ptrdiff_t`."},{"pos":[11481,11493],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value of the pointer contained by the atomic object immediately before the operation was performed.","pos":[11497,11600]},{"pos":[11610,11617],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11621,11883],"content":"The <ph id=\"ph1\">`atomic_fetch_add_explicit`</ph> function performs a <ph id=\"ph2\">`read-modify-write`</ph> operation to atomically add <ph id=\"ph3\">`Value`</ph> to the stored value in <ph id=\"ph4\">`Atom`</ph>, within the <bpt id=\"p1\">[</bpt>memory_order<ept id=\"p1\">](../standard-library/atomic-enums.md#memory_order_enum)</ept> constraints that are specified by <ph id=\"ph5\">`Order`</ph>.","source":"The `atomic_fetch_add_explicit` function performs a `read-modify-write` operation to atomically add `Value` to the stored value in `Atom`, within the [memory_order](../standard-library/atomic-enums.md#memory_order_enum) constraints that are specified by `Order`."},{"pos":[11890,12019],"content":"When the atomic type is <ph id=\"ph1\">`atomic_address`</ph>, <ph id=\"ph2\">`Value`</ph> has type <ph id=\"ph3\">`ptrdiff_t`</ph> and the operation treats the stored pointer as a <ph id=\"ph4\">`char *`</ph>.","source":"When the atomic type is `atomic_address`, `Value` has type `ptrdiff_t` and the operation treats the stored pointer as a `char *`."},{"content":"This operation is also overloaded for integral types:","pos":[12026,12079]},{"pos":[12349,12407],"content":"<bpt id=\"p1\">&lt;a name=\"atomic_fetch_and_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atomic_fetch_and","linkify":"<a name=\"atomic_fetch_and_function\"></a>  atomic_fetch_and","source":"<a name=\"atomic_fetch_and_function\"></a>  atomic_fetch_and"},{"pos":[12411,12506],"content":"Performs a bitwise <ph id=\"ph1\">`and`</ph> on a value and an existing value that is stored in an <ph id=\"ph2\">`atomic`</ph> object.","source":"Performs a bitwise `and` on a value and an existing value that is stored in an `atomic` object."},{"pos":[12711,12721],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <ph id=\"ph1\">`atomic`</ph> object that stores a value of type <ph id=\"ph2\">`T`</ph>.","pos":[12735,12799],"source":" A pointer to an `atomic` object that stores a value of type `T`."},{"content":"A value of type <ph id=\"ph1\">`T`</ph>.","pos":[12817,12837],"source":" A value of type `T`."},{"pos":[12847,12859],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value contained by the atomic object immediately before the operation was performed.","pos":[12863,12951]},{"pos":[12961,12968],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12972,13276],"content":"The <ph id=\"ph1\">`atomic_fetch_and`</ph> function performs a <ph id=\"ph2\">`read-modify-write`</ph> operation to replace the stored value of <ph id=\"ph3\">`Atom`</ph> with a bitwise <ph id=\"ph4\">`and`</ph> of <ph id=\"ph5\">`Value`</ph> and the current value that is stored in <ph id=\"ph6\">`Atom`</ph>, using the <ph id=\"ph7\">`memory_order_seq_cst`</ph><bpt id=\"p1\">[</bpt>memory_order<ept id=\"p1\">](../standard-library/atomic-enums.md#memory_order_enum)</ept> constraint.","source":"The `atomic_fetch_and` function performs a `read-modify-write` operation to replace the stored value of `Atom` with a bitwise `and` of `Value` and the current value that is stored in `Atom`, using the `memory_order_seq_cst`[memory_order](../standard-library/atomic-enums.md#memory_order_enum) constraint."},{"pos":[13286,13362],"content":"<bpt id=\"p1\">&lt;a name=\"atomic_fetch_and_explicit_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atomic_fetch_and_explicit","linkify":"<a name=\"atomic_fetch_and_explicit_function\"></a>  atomic_fetch_and_explicit","source":"<a name=\"atomic_fetch_and_explicit_function\"></a>  atomic_fetch_and_explicit"},{"pos":[13366,13461],"content":"Performs a bitwise <ph id=\"ph1\">`and`</ph> of a value and an existing value that is stored in an <ph id=\"ph2\">`atomic`</ph> object.","source":"Performs a bitwise `and` of a value and an existing value that is stored in an `atomic` object."},{"pos":[13755,13765],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <ph id=\"ph1\">`atomic`</ph> object that stores a value of type <ph id=\"ph2\">`T`</ph>.","pos":[13779,13843],"source":" A pointer to an `atomic` object that stores a value of type `T`."},{"content":"A value of type <ph id=\"ph1\">`T`</ph>.","pos":[13861,13881],"source":" A value of type `T`."},{"content":"A <bpt id=\"p1\">[</bpt>memory_order<ept id=\"p1\">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.","pos":[13899,13971],"source":" A [memory_order](../standard-library/atomic-enums.md#memory_order_enum)."},{"pos":[13981,13993],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value contained by the atomic object immediately before the operation was performed.","pos":[13997,14085]},{"pos":[14095,14102],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14106,14366],"content":"The <ph id=\"ph1\">`atomic_fetch_and_explicit`</ph> function performs a <ph id=\"ph2\">`read-modify-write`</ph> operation to replace the stored value of <ph id=\"ph3\">`Atom`</ph> with a bitwise <ph id=\"ph4\">`and`</ph> of <ph id=\"ph5\">`Value`</ph> and the current value that is stored in <ph id=\"ph6\">`Atom`</ph>, within the memory constraints that are specified by <ph id=\"ph7\">`Order`</ph>.","source":"The `atomic_fetch_and_explicit` function performs a `read-modify-write` operation to replace the stored value of `Atom` with a bitwise `and` of `Value` and the current value that is stored in `Atom`, within the memory constraints that are specified by `Order`."},{"pos":[14376,14432],"content":"<bpt id=\"p1\">&lt;a name=\"atomic_fetch_or_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atomic_fetch_or","linkify":"<a name=\"atomic_fetch_or_function\"></a>  atomic_fetch_or","source":"<a name=\"atomic_fetch_or_function\"></a>  atomic_fetch_or"},{"pos":[14436,14530],"content":"Performs a bitwise <ph id=\"ph1\">`or`</ph> on a value and an existing value that is stored in an <ph id=\"ph2\">`atomic`</ph> object.","source":"Performs a bitwise `or` on a value and an existing value that is stored in an `atomic` object."},{"pos":[14733,14743],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <ph id=\"ph1\">`atomic`</ph> object that stores a value of type <ph id=\"ph2\">`T`</ph>.","pos":[14757,14821],"source":" A pointer to an `atomic` object that stores a value of type `T`."},{"content":"A value of type <ph id=\"ph1\">`T`</ph>.","pos":[14839,14859],"source":" A value of type `T`."},{"pos":[14869,14881],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value contained by the atomic object immediately before the operation was performed.","pos":[14885,14973]},{"pos":[14983,14990],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14994,15285],"content":"The <ph id=\"ph1\">`atomic_fetch_or`</ph> function performs a <ph id=\"ph2\">`read-modify-write`</ph> operation to replace the stored value of <ph id=\"ph3\">`Atom`</ph> with a bitwise <ph id=\"ph4\">`or`</ph> of <ph id=\"ph5\">`Value`</ph> and the current value that is stored in <ph id=\"ph6\">`Atom`</ph>, using the <ph id=\"ph7\">`memory_order_seq_cst`</ph><bpt id=\"p1\">[</bpt>memory_order<ept id=\"p1\">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.","source":"The `atomic_fetch_or` function performs a `read-modify-write` operation to replace the stored value of `Atom` with a bitwise `or` of `Value` and the current value that is stored in `Atom`, using the `memory_order_seq_cst`[memory_order](../standard-library/atomic-enums.md#memory_order_enum)."},{"pos":[15295,15369],"content":"<bpt id=\"p1\">&lt;a name=\"atomic_fetch_or_explicit_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atomic_fetch_or_explicit","linkify":"<a name=\"atomic_fetch_or_explicit_function\"></a>  atomic_fetch_or_explicit","source":"<a name=\"atomic_fetch_or_explicit_function\"></a>  atomic_fetch_or_explicit"},{"pos":[15373,15467],"content":"Performs a bitwise <ph id=\"ph1\">`or`</ph> on a value and an existing value that is stored in an <ph id=\"ph2\">`atomic`</ph> object.","source":"Performs a bitwise `or` on a value and an existing value that is stored in an `atomic` object."},{"pos":[15759,15769],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <ph id=\"ph1\">`atomic`</ph> object that stores a value of type <ph id=\"ph2\">`T`</ph>.","pos":[15783,15847],"source":" A pointer to an `atomic` object that stores a value of type `T`."},{"content":"A value of type <ph id=\"ph1\">`T`</ph>.","pos":[15865,15885],"source":" A value of type `T`."},{"content":"A <bpt id=\"p1\">[</bpt>memory_order<ept id=\"p1\">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.","pos":[15903,15975],"source":" A [memory_order](../standard-library/atomic-enums.md#memory_order_enum)."},{"pos":[15985,15997],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value contained by the atomic object immediately before the operation was performed.","pos":[16001,16089]},{"pos":[16099,16106],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[16110,16422],"content":"The <ph id=\"ph1\">`atomic_fetch_or_explicit`</ph> function performs a <ph id=\"ph2\">`read-modify-write`</ph> operation to replace the stored value of <ph id=\"ph3\">`Atom`</ph> with a bitwise <ph id=\"ph4\">`or`</ph> of <ph id=\"ph5\">`Value`</ph> and the current value that is stored in <ph id=\"ph6\">`Atom`</ph>, within the <bpt id=\"p1\">[</bpt>memory_order<ept id=\"p1\">](../standard-library/atomic-enums.md#memory_order_enum)</ept> constraints specified by <ph id=\"ph7\">`Order`</ph>.","source":"The `atomic_fetch_or_explicit` function performs a `read-modify-write` operation to replace the stored value of `Atom` with a bitwise `or` of `Value` and the current value that is stored in `Atom`, within the [memory_order](../standard-library/atomic-enums.md#memory_order_enum) constraints specified by `Order`."},{"pos":[16432,16490],"content":"<bpt id=\"p1\">&lt;a name=\"atomic_fetch_sub_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atomic_fetch_sub","linkify":"<a name=\"atomic_fetch_sub_function\"></a>  atomic_fetch_sub","source":"<a name=\"atomic_fetch_sub_function\"></a>  atomic_fetch_sub"},{"pos":[16494,16572],"content":"Subtracts a value from an existing value that is stored in an <ph id=\"ph1\">`atomic`</ph> object.","source":"Subtracts a value from an existing value that is stored in an `atomic` object."},{"pos":[16795,16805],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <ph id=\"ph1\">`atomic`</ph> object that stores a pointer to type <ph id=\"ph2\">`T`</ph>.","pos":[16819,16885],"source":" A pointer to an `atomic` object that stores a pointer to type `T`."},{"content":"A value of type <ph id=\"ph1\">`ptrdiff_t`</ph>.","pos":[16903,16931],"source":" A value of type `ptrdiff_t`."},{"pos":[16941,16953],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value of the pointer contained by the atomic object immediately before the operation was performed.","pos":[16957,17060]},{"pos":[17070,17077],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17081,17331],"content":"The <ph id=\"ph1\">`atomic_fetch_sub`</ph> function performs a <ph id=\"ph2\">`read-modify-write`</ph> operation to atomically subtract <ph id=\"ph3\">`Value`</ph> from the stored value in <ph id=\"ph4\">`Atom`</ph>, using the <ph id=\"ph5\">`memory_order_seq_cst`</ph><bpt id=\"p1\">[</bpt>memory_order<ept id=\"p1\">](../standard-library/atomic-enums.md#memory_order_enum)</ept> constraint.","source":"The `atomic_fetch_sub` function performs a `read-modify-write` operation to atomically subtract `Value` from the stored value in `Atom`, using the `memory_order_seq_cst`[memory_order](../standard-library/atomic-enums.md#memory_order_enum) constraint."},{"pos":[17338,17467],"content":"When the atomic type is <ph id=\"ph1\">`atomic_address`</ph>, <ph id=\"ph2\">`Value`</ph> has type <ph id=\"ph3\">`ptrdiff_t`</ph> and the operation treats the stored pointer as a <ph id=\"ph4\">`char *`</ph>.","source":"When the atomic type is `atomic_address`, `Value` has type `ptrdiff_t` and the operation treats the stored pointer as a `char *`."},{"content":"This operation is also overloaded for integral types:","pos":[17474,17527]},{"pos":[17709,17785],"content":"<bpt id=\"p1\">&lt;a name=\"atomic_fetch_sub_explicit_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atomic_fetch_sub_explicit","linkify":"<a name=\"atomic_fetch_sub_explicit_function\"></a>  atomic_fetch_sub_explicit","source":"<a name=\"atomic_fetch_sub_explicit_function\"></a>  atomic_fetch_sub_explicit"},{"pos":[17789,17867],"content":"Subtracts a value from an existing value that is stored in an <ph id=\"ph1\">`atomic`</ph> object.","source":"Subtracts a value from an existing value that is stored in an `atomic` object."},{"pos":[18152,18162],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <ph id=\"ph1\">`atomic`</ph> object that stores a pointer to type <ph id=\"ph2\">`T`</ph>.","pos":[18176,18242],"source":" A pointer to an `atomic` object that stores a pointer to type `T`."},{"content":"A value of type <ph id=\"ph1\">`ptrdiff_t`</ph>.","pos":[18260,18288],"source":" A value of type `ptrdiff_t`."},{"pos":[18298,18310],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value of the pointer contained by the atomic object immediately before the operation was performed.","pos":[18314,18417]},{"pos":[18427,18434],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[18438,18707],"content":"The <ph id=\"ph1\">`atomic_fetch_sub_explicit`</ph> function performs a <ph id=\"ph2\">`read-modify-write`</ph> operation to atomically subtract <ph id=\"ph3\">`Value`</ph> from the stored value in <ph id=\"ph4\">`Atom`</ph>, within the <bpt id=\"p1\">[</bpt>memory_order<ept id=\"p1\">](../standard-library/atomic-enums.md#memory_order_enum)</ept> constraints that are specified by <ph id=\"ph5\">`Order`</ph>.","source":"The `atomic_fetch_sub_explicit` function performs a `read-modify-write` operation to atomically subtract `Value` from the stored value in `Atom`, within the [memory_order](../standard-library/atomic-enums.md#memory_order_enum) constraints that are specified by `Order`."},{"pos":[18714,18843],"content":"When the atomic type is <ph id=\"ph1\">`atomic_address`</ph>, <ph id=\"ph2\">`Value`</ph> has type <ph id=\"ph3\">`ptrdiff_t`</ph> and the operation treats the stored pointer as a <ph id=\"ph4\">`char *`</ph>.","source":"When the atomic type is `atomic_address`, `Value` has type `ptrdiff_t` and the operation treats the stored pointer as a `char *`."},{"content":"This operation is also overloaded for integral types:","pos":[18850,18903]},{"pos":[19173,19231],"content":"<bpt id=\"p1\">&lt;a name=\"atomic_fetch_xor_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atomic_fetch_xor","linkify":"<a name=\"atomic_fetch_xor_function\"></a>  atomic_fetch_xor","source":"<a name=\"atomic_fetch_xor_function\"></a>  atomic_fetch_xor"},{"pos":[19235,19339],"content":"Performs a bitwise <ph id=\"ph1\">`exclusive or`</ph> on a value and an existing value that is stored in an <ph id=\"ph2\">`atomic`</ph> object.","source":"Performs a bitwise `exclusive or` on a value and an existing value that is stored in an `atomic` object."},{"pos":[19544,19554],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <ph id=\"ph1\">`atomic`</ph> object that stores a value of type <ph id=\"ph2\">`T`</ph>.","pos":[19568,19632],"source":" A pointer to an `atomic` object that stores a value of type `T`."},{"content":"A value of type <ph id=\"ph1\">`T`</ph>.","pos":[19650,19670],"source":" A value of type `T`."},{"pos":[19680,19692],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value contained by the atomic object immediately before the operation was performed.","pos":[19696,19784]},{"pos":[19794,19801],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[19805,20107],"content":"The <ph id=\"ph1\">`atomic_fetch_xor`</ph> function performs a <ph id=\"ph2\">`read-modify-write`</ph> operation to replace the stored value of <ph id=\"ph3\">`Atom`</ph> with a bitwise <ph id=\"ph4\">`exclusive or`</ph> of <ph id=\"ph5\">`Value`</ph> and the current value that is stored in <ph id=\"ph6\">`Atom`</ph>, using the <ph id=\"ph7\">`memory_order_seq_cst`</ph><bpt id=\"p1\">[</bpt>memory_order<ept id=\"p1\">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.","source":"The `atomic_fetch_xor` function performs a `read-modify-write` operation to replace the stored value of `Atom` with a bitwise `exclusive or` of `Value` and the current value that is stored in `Atom`, using the `memory_order_seq_cst`[memory_order](../standard-library/atomic-enums.md#memory_order_enum)."},{"pos":[20117,20193],"content":"<bpt id=\"p1\">&lt;a name=\"atomic_fetch_xor_explicit_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atomic_fetch_xor_explicit","linkify":"<a name=\"atomic_fetch_xor_explicit_function\"></a>  atomic_fetch_xor_explicit","source":"<a name=\"atomic_fetch_xor_explicit_function\"></a>  atomic_fetch_xor_explicit"},{"pos":[20197,20301],"content":"Performs a bitwise <ph id=\"ph1\">`exclusive or`</ph> on a value and an existing value that is stored in an <ph id=\"ph2\">`atomic`</ph> object.","source":"Performs a bitwise `exclusive or` on a value and an existing value that is stored in an `atomic` object."},{"pos":[20597,20607],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <ph id=\"ph1\">`atomic`</ph> object that stores a value of type <ph id=\"ph2\">`T`</ph>.","pos":[20621,20685],"source":" A pointer to an `atomic` object that stores a value of type `T`."},{"content":"A value of type <ph id=\"ph1\">`T`</ph>.","pos":[20703,20723],"source":" A value of type `T`."},{"content":"A <bpt id=\"p1\">[</bpt>memory_order<ept id=\"p1\">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.","pos":[20741,20813],"source":" A [memory_order](../standard-library/atomic-enums.md#memory_order_enum)."},{"pos":[20823,20835],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value contained by the atomic object immediately before the operation was performed.","pos":[20839,20927]},{"pos":[20937,20944],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[20948,21280],"content":"The <ph id=\"ph1\">`atomic_fetch_xor_explicit`</ph> function performs a <ph id=\"ph2\">`read-modify-write`</ph> operation to replace the stored value of <ph id=\"ph3\">`Atom`</ph> with a bitwise <ph id=\"ph4\">`exclusive or`</ph> of <ph id=\"ph5\">`Value`</ph> and the current value that is stored in <ph id=\"ph6\">`Atom`</ph>, within the <bpt id=\"p1\">[</bpt>memory_order<ept id=\"p1\">](../standard-library/atomic-enums.md#memory_order_enum)</ept> constraints that are specified by <ph id=\"ph7\">`Order`</ph>.","source":"The `atomic_fetch_xor_explicit` function performs a `read-modify-write` operation to replace the stored value of `Atom` with a bitwise `exclusive or` of `Value` and the current value that is stored in `Atom`, within the [memory_order](../standard-library/atomic-enums.md#memory_order_enum) constraints that are specified by `Order`."},{"pos":[21290,21350],"content":"<bpt id=\"p1\">&lt;a name=\"atomic_flag_clear_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atomic_flag_clear","linkify":"<a name=\"atomic_flag_clear_function\"></a>  atomic_flag_clear","source":"<a name=\"atomic_flag_clear_function\"></a>  atomic_flag_clear"},{"pos":[21354,21563],"content":"Sets the <ph id=\"ph1\">`bool`</ph> flag in an <bpt id=\"p1\">[</bpt>atomic_flag<ept id=\"p1\">](../standard-library/atomic-flag-structure.md)</ept> object to <ph id=\"ph2\">`false`</ph>, within the <ph id=\"ph3\">`memory_order_seq_cst`</ph><bpt id=\"p2\">[</bpt>memory_order<ept id=\"p2\">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.","source":"Sets the `bool` flag in an [atomic_flag](../standard-library/atomic-flag-structure.md) object to `false`, within the `memory_order_seq_cst`[memory_order](../standard-library/atomic-enums.md#memory_order_enum)."},{"pos":[21713,21723],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <ph id=\"ph1\">`atomic_flag`</ph> object.","pos":[21737,21774],"source":" A pointer to an `atomic_flag` object."},{"pos":[21784,21862],"content":"<bpt id=\"p1\">&lt;a name=\"atomic_flag_clear_explicit_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atomic_flag_clear_explicit","linkify":"<a name=\"atomic_flag_clear_explicit_function\"></a>  atomic_flag_clear_explicit","source":"<a name=\"atomic_flag_clear_explicit_function\"></a>  atomic_flag_clear_explicit"},{"pos":[21866,22075],"content":"Sets the <ph id=\"ph1\">`bool`</ph> flag in an <bpt id=\"p1\">[</bpt>atomic_flag<ept id=\"p1\">](../standard-library/atomic-flag-structure.md)</ept> object to <ph id=\"ph2\">`false`</ph>, within the specified <bpt id=\"p2\">[</bpt>memory_order<ept id=\"p2\">](../standard-library/atomic-enums.md#memory_order_enum)</ept> constraints.","source":"Sets the `bool` flag in an [atomic_flag](../standard-library/atomic-flag-structure.md) object to `false`, within the specified [memory_order](../standard-library/atomic-enums.md#memory_order_enum) constraints."},{"pos":[22283,22293],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <ph id=\"ph1\">`atomic_flag`</ph> object.","pos":[22307,22344],"source":" A pointer to an `atomic_flag` object."},{"content":"A <bpt id=\"p1\">[</bpt>memory_order<ept id=\"p1\">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.","pos":[22362,22434],"source":" A [memory_order](../standard-library/atomic-enums.md#memory_order_enum)."},{"pos":[22444,22518],"content":"<bpt id=\"p1\">&lt;a name=\"atomic_flag_test_and_set_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atomic_flag_test_and_set","linkify":"<a name=\"atomic_flag_test_and_set_function\"></a>  atomic_flag_test_and_set","source":"<a name=\"atomic_flag_test_and_set_function\"></a>  atomic_flag_test_and_set"},{"pos":[22522,22749],"content":"Sets the <ph id=\"ph1\">`bool`</ph> flag in an <bpt id=\"p1\">[</bpt>atomic_flag<ept id=\"p1\">](../standard-library/atomic-flag-structure.md)</ept> object to <ph id=\"ph2\">`true`</ph>, within the constraints of the <ph id=\"ph3\">`memory_order_seq_cst`</ph><bpt id=\"p2\">[</bpt>memory_order<ept id=\"p2\">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.","source":"Sets the `bool` flag in an [atomic_flag](../standard-library/atomic-flag-structure.md) object to `true`, within the constraints of the `memory_order_seq_cst`[memory_order](../standard-library/atomic-enums.md#memory_order_enum)."},{"pos":[22915,22925],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <ph id=\"ph1\">`atomic_flag`</ph> object.","pos":[22939,22976],"source":" A pointer to an `atomic_flag` object."},{"pos":[22986,22998],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23002,23030],"content":"The initial value of <ph id=\"ph1\">`Flag`</ph>.","source":"The initial value of `Flag`."},{"pos":[23040,23132],"content":"<bpt id=\"p1\">&lt;a name=\"atomic_flag_test_and_set_explicit_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atomic_flag_test_and_set_explicit","linkify":"<a name=\"atomic_flag_test_and_set_explicit_function\"></a>  atomic_flag_test_and_set_explicit","source":"<a name=\"atomic_flag_test_and_set_explicit_function\"></a>  atomic_flag_test_and_set_explicit"},{"pos":[23136,23344],"content":"Sets the <ph id=\"ph1\">`bool`</ph> flag in an <bpt id=\"p1\">[</bpt>atomic_flag<ept id=\"p1\">](../standard-library/atomic-flag-structure.md)</ept> object to <ph id=\"ph2\">`true`</ph>, within the specified <bpt id=\"p2\">[</bpt>memory_order<ept id=\"p2\">](../standard-library/atomic-enums.md#memory_order_enum)</ept> constraints.","source":"Sets the `bool` flag in an [atomic_flag](../standard-library/atomic-flag-structure.md) object to `true`, within the specified [memory_order](../standard-library/atomic-enums.md#memory_order_enum) constraints."},{"pos":[23566,23576],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <ph id=\"ph1\">`atomic_flag`</ph> object.","pos":[23590,23627],"source":" A pointer to an `atomic_flag` object."},{"content":"A <bpt id=\"p1\">[</bpt>memory_order<ept id=\"p1\">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.","pos":[23645,23717],"source":" A [memory_order](../standard-library/atomic-enums.md#memory_order_enum)."},{"pos":[23727,23739],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23743,23771],"content":"The initial value of <ph id=\"ph1\">`Flag`</ph>.","source":"The initial value of `Flag`."},{"pos":[23781,23829],"content":"<bpt id=\"p1\">&lt;a name=\"atomic_init_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atomic_init","linkify":"<a name=\"atomic_init_function\"></a>  atomic_init","source":"<a name=\"atomic_init_function\"></a>  atomic_init"},{"pos":[23833,23877],"content":"Sets the stored value in an <ph id=\"ph1\">`atomic`</ph> object.","source":"Sets the stored value in an `atomic` object."},{"pos":[24073,24083],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <ph id=\"ph1\">`atomic`</ph> object that stores a value of type <ph id=\"ph2\">`Ty`</ph>.","pos":[24097,24162],"source":" A pointer to an `atomic` object that stores a value of type `Ty`."},{"content":"A value of type <ph id=\"ph1\">`Ty`</ph>.","pos":[24180,24201],"source":" A value of type `Ty`."},{"pos":[24211,24218],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`atomic_init`</ph> is not an atomic operation.","pos":[24222,24263],"source":"`atomic_init` is not an atomic operation."},{"content":"It is not thread-safe.","pos":[24264,24286]},{"pos":[24296,24360],"content":"<bpt id=\"p1\">&lt;a name=\"atomic_is_lock_free_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atomic_is_lock_free","linkify":"<a name=\"atomic_is_lock_free_function\"></a>  atomic_is_lock_free","source":"<a name=\"atomic_is_lock_free_function\"></a>  atomic_is_lock_free"},{"pos":[24364,24438],"content":"Specifies whether atomic operations on an <ph id=\"ph1\">`atomic`</ph> object are <bpt id=\"p1\">*</bpt>lock-free<ept id=\"p1\">*</ept>.","source":"Specifies whether atomic operations on an `atomic` object are *lock-free*."},{"pos":[24638,24648],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <ph id=\"ph1\">`atomic`</ph> object that stores a value of type <ph id=\"ph2\">`T`</ph>.","pos":[24662,24726],"source":" A pointer to an `atomic` object that stores a value of type `T`."},{"pos":[24736,24748],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24752,24824],"content":"<ph id=\"ph1\">`true`</ph> if atomic operations on <ph id=\"ph2\">`Atom`</ph> are lock-free; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if atomic operations on `Atom` are lock-free; otherwise, `false`."},{"pos":[24834,24841],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An atomic type is lock-free if no atomic operations on that type use locks.","pos":[24845,24920]},{"content":"If this function returns true, the type is safe to use in signal-handlers.","pos":[24921,24995]},{"pos":[25005,25053],"content":"<bpt id=\"p1\">&lt;a name=\"atomic_load_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atomic_load","linkify":"<a name=\"atomic_load_function\"></a>  atomic_load","source":"<a name=\"atomic_load_function\"></a>  atomic_load"},{"pos":[25057,25106],"content":"Retrieves the stored value in an <ph id=\"ph1\">`atomic`</ph> object.","source":"Retrieves the stored value in an `atomic` object."},{"pos":[25290,25300],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <ph id=\"ph1\">`atomic`</ph> object that contains a value of type <ph id=\"ph2\">`Ty`</ph>.","pos":[25314,25381],"source":" A pointer to an `atomic` object that contains a value of type `Ty`."},{"pos":[25391,25403],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[25407,25452],"content":"The retrieved value that is stored in <ph id=\"ph1\">`Atom`</ph>.","source":"The retrieved value that is stored in `Atom`."},{"pos":[25462,25469],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[25473,25599],"content":"<ph id=\"ph1\">`atomic_load`</ph> implicitly uses the <ph id=\"ph2\">`memory_order_seq_cst`</ph><bpt id=\"p1\">[</bpt>memory_order<ept id=\"p1\">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.","source":"`atomic_load` implicitly uses the `memory_order_seq_cst`[memory_order](../standard-library/atomic-enums.md#memory_order_enum)."},{"pos":[25609,25675],"content":"<bpt id=\"p1\">&lt;a name=\"atomic_load_explicit_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atomic_load_explicit","linkify":"<a name=\"atomic_load_explicit_function\"></a>  atomic_load_explicit","source":"<a name=\"atomic_load_explicit_function\"></a>  atomic_load_explicit"},{"pos":[25679,25818],"content":"Retrieves the stored value in an <ph id=\"ph1\">`atomic`</ph> object, within a specified <bpt id=\"p1\">[</bpt>memory_order<ept id=\"p1\">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.","source":"Retrieves the stored value in an `atomic` object, within a specified [memory_order](../standard-library/atomic-enums.md#memory_order_enum)."},{"pos":[26060,26070],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <ph id=\"ph1\">`atomic`</ph> object that contains a value of type <ph id=\"ph2\">`Ty`</ph>.","pos":[26084,26151],"source":" A pointer to an `atomic` object that contains a value of type `Ty`."},{"content":"A <bpt id=\"p1\">[</bpt>memory_order<ept id=\"p1\">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.","pos":[26169,26241],"source":" A [memory_order](../standard-library/atomic-enums.md#memory_order_enum)."},{"content":"Do not use <ph id=\"ph1\">`memory_order_release`</ph> or <ph id=\"ph2\">`memory_order_acq_rel`</ph>.","pos":[26242,26302],"source":" Do not use `memory_order_release` or `memory_order_acq_rel`."},{"pos":[26312,26324],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[26328,26373],"content":"The retrieved value that is stored in <ph id=\"ph1\">`Atom`</ph>.","source":"The retrieved value that is stored in `Atom`."},{"pos":[26383,26447],"content":"<bpt id=\"p1\">&lt;a name=\"atomic_signal_fence_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atomic_signal_fence","linkify":"<a name=\"atomic_signal_fence_function\"></a>  atomic_signal_fence","source":"<a name=\"atomic_signal_fence_function\"></a>  atomic_signal_fence"},{"pos":[26451,26670],"content":"Acts as a <bpt id=\"p1\">*</bpt>fence<ept id=\"p1\">*</ept>—which is a memory synchronization primitive that enforces ordering between load/store operations—between other fences in a calling thread that have signal handlers that are executed in the same thread.","source":"Acts as a *fence*—which is a memory synchronization primitive that enforces ordering between load/store operations—between other fences in a calling thread that have signal handlers that are executed in the same thread."},{"pos":[26755,26765],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A memory ordering constraint that determines fence type.","pos":[26780,26836]},{"pos":[26846,26853],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[26857,26900],"content":"The <ph id=\"ph1\">`Order`</ph> argument determines fence type.","source":"The `Order` argument determines fence type."},{"content":"The fence has no effect.","pos":[26944,26968]},{"content":"The fence is an acquire fence.","pos":[26996,27026]},{"content":"The fence is an acquire fence.","pos":[27054,27084]},{"content":"The fence is a release fence.","pos":[27112,27141]},{"content":"The fence is both an acquire fence and a release fence.","pos":[27169,27224]},{"content":"The fence is both an acquire fence and a release fence, and is sequentially consistent.","pos":[27252,27339]},{"pos":[27350,27400],"content":"<bpt id=\"p1\">&lt;a name=\"atomic_store_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atomic_store","linkify":"<a name=\"atomic_store_function\"></a>  atomic_store","source":"<a name=\"atomic_store_function\"></a>  atomic_store"},{"content":"Atomically stores a value in an atomic object.","pos":[27404,27450]},{"pos":[27673,27683],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an atomic object that contains a value of type <ph id=\"ph1\">`Ty`</ph>.","pos":[27697,27762],"source":" A pointer to an atomic object that contains a value of type `Ty`."},{"content":"A value of type <ph id=\"ph1\">`Ty`</ph>.","pos":[27780,27801],"source":" A value of type `Ty`."},{"pos":[27811,27818],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[27822,28010],"content":"<ph id=\"ph1\">`atomic_store`</ph> stores <ph id=\"ph2\">`Value`</ph> in the object that is pointed to by <ph id=\"ph3\">`Atom`</ph>, within the <ph id=\"ph4\">`memory_order_seq_cst`</ph><bpt id=\"p1\">[</bpt>memory_order<ept id=\"p1\">](../standard-library/atomic-enums.md#memory_order_enum)</ept> constraint.","source":"`atomic_store` stores `Value` in the object that is pointed to by `Atom`, within the `memory_order_seq_cst`[memory_order](../standard-library/atomic-enums.md#memory_order_enum) constraint."},{"pos":[28020,28088],"content":"<bpt id=\"p1\">&lt;a name=\"atomic_store_explicit_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atomic_store_explicit","linkify":"<a name=\"atomic_store_explicit_function\"></a>  atomic_store_explicit","source":"<a name=\"atomic_store_explicit_function\"></a>  atomic_store_explicit"},{"content":"Atomically stores a value in an atomic object.","pos":[28092,28138]},{"pos":[28432,28442],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <ph id=\"ph1\">`atomic`</ph> object that contains a value of type <ph id=\"ph2\">`Ty`</ph>.","pos":[28456,28523],"source":" A pointer to an `atomic` object that contains a value of type `Ty`."},{"content":"A value of type <ph id=\"ph1\">`Ty`</ph>.","pos":[28541,28562],"source":" A value of type `Ty`."},{"content":"A <bpt id=\"p1\">[</bpt>memory_order<ept id=\"p1\">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.","pos":[28580,28652],"source":" A [memory_order](../standard-library/atomic-enums.md#memory_order_enum)."},{"content":"Do not use <ph id=\"ph1\">`memory_order_consume`</ph>, <ph id=\"ph2\">`memory_order_acquire`</ph>, or <ph id=\"ph3\">`memory_order_acq_rel`</ph>.","pos":[28653,28738],"source":" Do not use `memory_order_consume`, `memory_order_acquire`, or `memory_order_acq_rel`."},{"pos":[28748,28755],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[28759,28888],"content":"<ph id=\"ph1\">`atomic_store`</ph> stores <ph id=\"ph2\">`Value`</ph> in the object that is pointed to by <ph id=\"ph3\">`Atom`</ph>, within the <ph id=\"ph4\">`memory_order`</ph> that is specified by <ph id=\"ph5\">`Order`</ph>.","source":"`atomic_store` stores `Value` in the object that is pointed to by `Atom`, within the `memory_order` that is specified by `Order`."},{"pos":[28898,28962],"content":"<bpt id=\"p1\">&lt;a name=\"atomic_thread_fence_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atomic_thread_fence","linkify":"<a name=\"atomic_thread_fence_function\"></a>  atomic_thread_fence","source":"<a name=\"atomic_thread_fence_function\"></a>  atomic_thread_fence"},{"pos":[28966,29120],"content":"Acts as a <bpt id=\"p1\">*</bpt>fence<ept id=\"p1\">*</ept>—which is a memory synchronization primitive that enforces ordering between load/store operations—without an associated atomic operation.","source":"Acts as a *fence*—which is a memory synchronization primitive that enforces ordering between load/store operations—without an associated atomic operation."},{"pos":[29205,29215],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A memory ordering constraint that determines fence type.","pos":[29230,29286]},{"pos":[29296,29303],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[29307,29350],"content":"The <ph id=\"ph1\">`Order`</ph> argument determines fence type.","source":"The `Order` argument determines fence type."},{"content":"The fence has no effect.","pos":[29394,29418]},{"content":"The fence is an acquire fence.","pos":[29446,29476]},{"content":"The fence is an acquire fence.","pos":[29504,29534]},{"content":"The fence is a release fence.","pos":[29562,29591]},{"content":"The fence is both an acquire fence and a release fence.","pos":[29619,29674]},{"content":"The fence is both an acquire fence and a release fence, and is sequentially consistent.","pos":[29702,29789]},{"pos":[29800,29856],"content":"<bpt id=\"p1\">&lt;a name=\"kill_dependency_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  kill_dependency","linkify":"<a name=\"kill_dependency_function\"></a>  kill_dependency","source":"<a name=\"kill_dependency_function\"></a>  kill_dependency"},{"content":"Removes a dependency.","pos":[29860,29881]},{"pos":[29961,29971],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A value of type <ph id=\"ph1\">`Ty`</ph>.","pos":[29984,30005],"source":" A value of type `Ty`."},{"pos":[30015,30027],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The return value is <ph id=\"ph1\">`Arg`</ph>.","pos":[30031,30057],"source":"The return value is `Arg`."},{"content":"The evaluation of <ph id=\"ph1\">`Arg`</ph> does not carry a dependency to the function call.","pos":[30058,30131],"source":" The evaluation of `Arg` does not carry a dependency to the function call."},{"content":"By breaking a possible dependency chain, the function might permit the compiler to generate more efficient code.","pos":[30132,30244]},{"pos":[30253,30261],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[30265,30307],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>atomic&gt;<ept id=\"p1\">](../standard-library/atomic.md)</ept>","source":"[\\<atomic>](../standard-library/atomic.md)"}],"content":"---\ntitle: \"&lt;atomic&gt; functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 5c53b4f8-6ff5-47d7-beb2-2d6ee3c6ea89\ncaps.latest.revision: 12\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\n---\n# &lt;atomic&gt; functions\n||||  \n|-|-|-|  \n|[atomic_compare_exchange_strong](#atomic_compare_exchange_strong_function)|[atomic_compare_exchange_strong_explicit](#atomic_compare_exchange_strong_explicit_function)|[atomic_compare_exchange_weak](#atomic_compare_exchange_weak_function)|  \n|[atomic_compare_exchange_weak_explicit](#atomic_compare_exchange_weak_explicit_function)|[atomic_exchange](#atomic_exchange_function)|[atomic_exchange_explicit](#atomic_exchange_explicit_function)|  \n|[atomic_fetch_add](#atomic_fetch_add_function)|[atomic_fetch_add_explicit](#atomic_fetch_add_explicit_function)|[atomic_fetch_and](#atomic_fetch_and_function)|  \n|[atomic_fetch_and_explicit](#atomic_fetch_and_explicit_function)|[atomic_fetch_or](#atomic_fetch_or_function)|[atomic_fetch_or_explicit](#atomic_fetch_or_explicit_function)|  \n|[atomic_fetch_sub](#atomic_fetch_sub_function)|[atomic_fetch_sub_explicit](#atomic_fetch_sub_explicit_function)|[atomic_fetch_xor](#atomic_fetch_xor_function)|  \n|[atomic_fetch_xor_explicit](#atomic_fetch_xor_explicit_function)|[atomic_flag_clear](#atomic_flag_clear_function)|[atomic_flag_clear_explicit](#atomic_flag_clear_explicit_function)|  \n|[atomic_flag_test_and_set](#atomic_flag_test_and_set_function)|[atomic_flag_test_and_set_explicit](#atomic_flag_test_and_set_explicit_function)|[atomic_init](#atomic_init_function)|  \n|[atomic_is_lock_free](#atomic_is_lock_free_function)|[atomic_load](#atomic_load_function)|[atomic_load_explicit](#atomic_load_explicit_function)|  \n|[atomic_signal_fence](#atomic_signal_fence_function)|[atomic_store](#atomic_store_function)|[atomic_store_explicit](#atomic_store_explicit_function)|  \n|[atomic_thread_fence](#atomic_thread_fence_function)|[kill_dependency](#kill_dependency_function)|  \n  \n##  <a name=\"atomic_compare_exchange_strong_function\"></a>  atomic_compare_exchange_strong  \n Performs an atomic compare and exchange operation.  \n  \n```\ntemplate <class Ty>\ninline bool atomic_compare_exchange_strong(\n    volatile atomic<Ty>* Atom,\n    Ty* Exp,\n    Value) noexcept;\n\ntemplate <class Ty>\ninline bool atomic_compare_exchange_strong(\n    atomic<Ty>* Atom,\n    Ty* Exp,\n    Ty Value) noexcept;\n```  \n  \n### Parameters  \n `Atom`  \n A pointer to an `atomic` object that stores a value of type `Ty`.  \n  \n `Exp`  \n A pointer to a value of type `Ty`.  \n  \n `Value`  \n A value of type `Ty`.  \n  \n### Return Value  \n A `bool` that indicates the result of the value comparison.  \n  \n### Remarks  \n This method performs an atomic compare and exchange operation by using implicit `memory_order_seq_cst`[memory_order](../standard-library/atomic-enums.md#memory_order_enum) arguments. For more information, see [atomic_compare_exchange_strong_explicit](../standard-library/atomic-functions.md#atomic_compare_exchange_strong_explicit_function).  \n  \n##  <a name=\"atomic_compare_exchange_strong_explicit_function\"></a>  atomic_compare_exchange_strong_explicit  \n Performs an *atomic compare and exchange* operation.  \n  \n```\ntemplate <class T>\ninline bool atomic_compare_exchange_strong_explicit(\n    volatile atomic<Ty>* Atom,\n    Ty* Exp,\n    Ty Value,\n    memory_order Order1,\n    memory_order Order2) noexcept;\n\ntemplate <class Ty>\ninline bool atomic_compare_exchange_strong_explicit(\n    atomic<Ty>* Atom,\n    Ty* Exp,\n    Ty Value,\n    memory_order Order1,\n    memory_order Order2) noexcept;\n```  \n  \n### Parameters  \n `Atom`  \n A pointer to an `atomic` object that stores a value of type `Ty`.  \n  \n `Exp`  \n A pointer to a value of type `Ty`.  \n  \n `Value`  \n A value of type `Ty`.  \n  \n `Order1`  \n First [memory_order](../standard-library/atomic-enums.md#memory_order_enum) argument.  \n  \n `Order2`  \n Second `memory_order` argument. The value of `Order2` cannot be `memory_order_release` or `memory_order_acq_rel`, it cannot be stronger than the value of `Order1`.  \n  \n### Return Value  \n A `bool` that indicates the result of the value comparison.  \n  \n### Remarks  \n An *atomic compare and exchange operation* compares the value that is stored in the object that is pointed to by `Atom` against the value that is pointed to by `Exp`. If the values are equal,\n    The the value that is stored in the object that is pointed to by `atom` is replaced with `Val` by using a `read-modify-write` operation and applying the memory order constraints that are specified by `Order1`. If the values are not equal,\n    The operation replaces the value that is pointed to by `Exp` with the value that is stored in the object that is pointed to by `Atom` and applies the memory order constraints that are specified by `Order2`.  \n  \n##  <a name=\"atomic_compare_exchange_weak_function\"></a>  atomic_compare_exchange_weak  \n Performs a *weak atomic compare and exchange* operation.  \n  \n```\ntemplate <class Ty>\ninline bool atomic_compare_exchange_strong(\n    volatile atomic<Ty>* Atom,\n    Ty* Exp,\n    Ty Value) noexcept;\n\ntemplate <class Ty>\ninline bool atomic_compare_exchange_strong(\n    atomic<Ty>* Atom,\n    Ty* Exp,\n    Ty Value) noexcept;\n```  \n  \n### Parameters  \n `Atom`  \n A pointer to an `atomic` object that stores a value of type `Ty`.  \n  \n `Exp`  \n A pointer to a value of type `Ty`.  \n  \n `Value`  \n A value of type `Ty`.  \n  \n### Return Value  \n A `bool` that indicates the result of the value comparison.  \n  \n### Remarks  \n This method performs a *weak atomic compare and exchange operation* that has implicit `memory_order_seq_cst`[memory_order](../standard-library/atomic-enums.md#memory_order_enum) arguments. For more information, see [atomic_compare_exchange_weak_explicit](../standard-library/atomic-functions.md#atomic_compare_exchange_weak_explicit_function).  \n  \n##  <a name=\"atomic_compare_exchange_weak_explicit_function\"></a>  atomic_compare_exchange_weak_explicit  \n Performs a *weak atomic compare and exchange* operation.  \n  \n```\ntemplate <class Ty>\ninline bool atomic_compare_exchange_weak_explicit(\n    volatile atomic<Ty>* Atom,\n    Ty* Exp, \n    Ty Value,\n    memory_order Order1,\n    memory_order Order2) noexcept;\n\ntemplate <class Ty>\ninline bool atomic_compare_exchange_weak_explicit(\n    atomic<Ty>* Atom,\n    Ty* Exp,\n    Ty Value,\n    memory_order Order1,\n    memory_order Order2) noexcept;\n```  \n  \n### Parameters  \n `Atom`  \n A pointer to an `atomic` object that stores a value of type `Ty`.  \n  \n `Exp`  \n A pointer to a value of type `Ty`.  \n  \n `Value`  \n A value of type `Ty`.  \n  \n `Order1`  \n First [memory_order](../standard-library/atomic-enums.md#memory_order_enum) argument.  \n  \n `Order2`  \n Second `memory_order` argument. The value of `Order2` cannot be `memory_order_release` or `memory_order_acq_rel`, nor can it be stronger than the value of `Order1`.  \n  \n### Return Value  \n A `bool` that indicates the result of the value comparison.  \n  \n### Remarks  \n An *atomic compare and exchange operation* compares the value that is stored in the object that is pointed to by `Atom` with the value that is pointed to by `Exp`. If the values are equal, the operation replaces the value that is stored in the object that is pointed to by `Atom` with `Val` by using a `read-modify-write` operation and applying the memory-order constraints that are specified by `Order1`. If the values are not equal, the operation replaces the value that is pointed to by `Exp` with the value that is stored in the object that is pointed to by `Atom` and applies the memory-order constraints that are specified by `Order2`.  \n  \n A *weak* atomic compare and exchange operation performs an exchange if the compared values are equal. However, if the values are not equal, the operation is not guaranteed to perform an exchange.  \n  \n##  <a name=\"atomic_exchange_function\"></a>  atomic_exchange  \n Uses `Value` to replace the stored value of `Atom`.  \n  \n```\ntemplate <class T>\ninline Ty atomic_exchange(volatile atomic<Ty>* _Atom, Ty Value) noexcept;\n\ntemplate <class Ty>\ninline T atomic_exchange(atomic<Ty>* Atom, Ty Value) noexcept;\n```  \n  \n### Parameters  \n `Atom`  \n A pointer to an `atomic` object that stores a value of type `Ty`.  \n  \n `Value`  \n A value of type `Ty`.  \n  \n### Return Value  \n The stored value of `Atom` before the exchange.  \n  \n### Remarks  \n The `atomic_exchange` function performs a `read-modify-write` operation to exchange the value that is stored in `Atom` with `Value`, using the `memory_order_seq_cst`[memory_order](../standard-library/atomic-enums.md#memory_order_enum).  \n  \n##  <a name=\"atomic_exchange_explicit_function\"></a>  atomic_exchange_explicit  \n Replaces the stored value of `Atom` with `Value`.  \n  \n```\ntemplate <class Ty>\ninline Ty atomic_exchange_explicit(\n    volatile atomic<Ty>* Atom,\n    Ty Value,\n    memory_order Order) noexcept;\n\ntemplate <class Ty>\ninline Ty atomic_exchange_explicit(\n    atomic<Ty>* Atom,\n    Ty Value,\n    memory_order Order) noexcept;\n```  \n  \n### Parameters  \n `Atom`  \n A pointer to an `atomic` object that stores a value of type `Ty`.  \n  \n `Value`  \n A value of type `Ty`.  \n  \n `Order`  \n A [memory_order](../standard-library/atomic-enums.md#memory_order_enum).  \n  \n### Return Value  \n The stored value of `Atom` before the exchange.  \n  \n### Remarks  \n The `atomic_exchange_explicit` function performs a `read-modify-write` operation to exchange the value that is stored in `Atom` with `Value`, within the memory constraints that are specified by `Order`.  \n  \n##  <a name=\"atomic_fetch_add_function\"></a>  atomic_fetch_add  \n Adds a value to an existing value that is stored in an `atomic` object.  \n  \n```\ntemplate <class T>  \nT* atomic_fetch_add(volatile atomic<T*>* Atom, ptrdiff_t Value) noexcept;\ntemplate <class T>  \nT* atomic_fetch_add(atomic<T*>* Atom, ptrdiff_t Value) noexcept;\n```  \n  \n### Parameters  \n `Atom`  \n A pointer to an `atomic` object that stores a pointer to type `T`.  \n  \n `Value`  \n A value of type `ptrdiff_t`.  \n  \n### Return Value  \n The value of the pointer contained by the atomic object immediately before the operation was performed.  \n  \n### Remarks  \n The `atomic_fetch_add` function performs a `read-modify-write` operation to atomically add `Value` to the stored value in `Atom`, using the `memory_order_seq_cst`[memory_order](../standard-library/atomic-enums.md#memory_order_enum) constraint.  \n  \n When the atomic type is `atomic_address`, `Value` has type `ptrdiff_t` and the operation treats the stored pointer as a `char *`.  \n  \n This operation is also overloaded for integral types:  \n  \n```\nintegral atomic_fetch_add(volatile atomic-integral* Atom, integral Value) noexcept;\n\nintegral atomic_fetch_add(atomic-integral* Atom, integral Value) noexcept;\n```  \n  \n##  <a name=\"atomic_fetch_add_explicit_function\"></a>  atomic_fetch_add_explicit  \n Adds a value to an existing value that is stored in an `atomic` object.  \n  \n```\ntemplate <class T>  \nT* atomic_fetch_add_explicit(\n    volatile atomic<T*>* Atom,\n    ptrdiff_t Value,\n    memory_order Order) noexcept;\n\ntemplate <class T>  \nT* atomic_fetch_add_explicit(\n    atomic<T*>* Atom, \n    ptrdiff_t Value, \n    memory_order Order) noexcept;\n```  \n  \n### Parameters  \n `Atom`  \n A pointer to an `atomic` object that stores a pointer to type `T`.  \n  \n `Value`  \n A value of type `ptrdiff_t`.  \n  \n### Return Value  \n The value of the pointer contained by the atomic object immediately before the operation was performed.  \n  \n### Remarks  \n The `atomic_fetch_add_explicit` function performs a `read-modify-write` operation to atomically add `Value` to the stored value in `Atom`, within the [memory_order](../standard-library/atomic-enums.md#memory_order_enum) constraints that are specified by `Order`.  \n  \n When the atomic type is `atomic_address`, `Value` has type `ptrdiff_t` and the operation treats the stored pointer as a `char *`.  \n  \n This operation is also overloaded for integral types:  \n  \n```cpp\nintegral atomic_fetch_add_explicit(\n    volatile atomic-integral* Atom,\n    integral Value,\n    memory_order Order) noexcept;\n\nintegral atomic_fetch_add_explicit(\n    atomic-integral* Atom,\n    integral Value,\n    memory_order Order) noexcept;\n```  \n  \n##  <a name=\"atomic_fetch_and_function\"></a>  atomic_fetch_and  \n Performs a bitwise `and` on a value and an existing value that is stored in an `atomic` object.  \n  \n```\ntemplate <class T>\ninline T atomic_fetch_and(volatile atomic<T>* Atom, T Value) noexcept; \ntemplate <class T>\ninline T atomic_fetch_and(volatile atomic<T>* Atom, T Value) noexcept; \n```  \n  \n### Parameters  \n `Atom`  \n A pointer to an `atomic` object that stores a value of type `T`.  \n  \n `Value`  \n A value of type `T`.  \n  \n### Return Value  \n The value contained by the atomic object immediately before the operation was performed.  \n  \n### Remarks  \n The `atomic_fetch_and` function performs a `read-modify-write` operation to replace the stored value of `Atom` with a bitwise `and` of `Value` and the current value that is stored in `Atom`, using the `memory_order_seq_cst`[memory_order](../standard-library/atomic-enums.md#memory_order_enum) constraint.  \n  \n##  <a name=\"atomic_fetch_and_explicit_function\"></a>  atomic_fetch_and_explicit  \n Performs a bitwise `and` of a value and an existing value that is stored in an `atomic` object.  \n  \n```\ntemplate <class T>\ninline T atomic_fetch_and_explicit(\n    volatile atomic<T>* Atom, \n    T Value,\n    memory_order Order) noexcept;\n    \ntemplate <class T>\ninline T atomic_fetch_and_explicit(\n    volatile atomic<T>* Atom, \n    T Value,\n    memory_order Order) noexcept;\n```  \n  \n### Parameters  \n `Atom`  \n A pointer to an `atomic` object that stores a value of type `T`.  \n  \n `Value`  \n A value of type `T`.  \n  \n `Order`  \n A [memory_order](../standard-library/atomic-enums.md#memory_order_enum).  \n  \n### Return Value  \n The value contained by the atomic object immediately before the operation was performed.  \n  \n### Remarks  \n The `atomic_fetch_and_explicit` function performs a `read-modify-write` operation to replace the stored value of `Atom` with a bitwise `and` of `Value` and the current value that is stored in `Atom`, within the memory constraints that are specified by `Order`.  \n  \n##  <a name=\"atomic_fetch_or_function\"></a>  atomic_fetch_or  \n Performs a bitwise `or` on a value and an existing value that is stored in an `atomic` object.  \n  \n```\ntemplate <class T>\ninline T atomic_fetch_or (volatile atomic<T>* Atom, T Value) noexcept;\ntemplate <class T>\ninline T atomic_fetch_or (volatile atomic<T>* Atom, T Value) noexcept;\n```  \n  \n### Parameters  \n `Atom`  \n A pointer to an `atomic` object that stores a value of type `T`.  \n  \n `Value`  \n A value of type `T`.  \n  \n### Return Value  \n The value contained by the atomic object immediately before the operation was performed.  \n  \n### Remarks  \n The `atomic_fetch_or` function performs a `read-modify-write` operation to replace the stored value of `Atom` with a bitwise `or` of `Value` and the current value that is stored in `Atom`, using the `memory_order_seq_cst`[memory_order](../standard-library/atomic-enums.md#memory_order_enum).  \n  \n##  <a name=\"atomic_fetch_or_explicit_function\"></a>  atomic_fetch_or_explicit  \n Performs a bitwise `or` on a value and an existing value that is stored in an `atomic` object.  \n  \n```\ntemplate <class T>\ninline T atomic_fetch_or_explicit(\n    volatile atomic<T>* Atom,\n    T Value,\n    memory_order Order) noexcept; \n    \ntemplate <class T>\ninline T atomic_fetch_or_explicit(\n    volatile atomic<T>* Atom,\n    T Value,\n    memory_order Order) noexcept; \n```  \n  \n### Parameters  \n `Atom`  \n A pointer to an `atomic` object that stores a value of type `T`.  \n  \n `Value`  \n A value of type `T`.  \n  \n `Order`  \n A [memory_order](../standard-library/atomic-enums.md#memory_order_enum).  \n  \n### Return Value  \n The value contained by the atomic object immediately before the operation was performed.  \n  \n### Remarks  \n The `atomic_fetch_or_explicit` function performs a `read-modify-write` operation to replace the stored value of `Atom` with a bitwise `or` of `Value` and the current value that is stored in `Atom`, within the [memory_order](../standard-library/atomic-enums.md#memory_order_enum) constraints specified by `Order`.  \n  \n##  <a name=\"atomic_fetch_sub_function\"></a>  atomic_fetch_sub  \n Subtracts a value from an existing value that is stored in an `atomic` object.  \n  \n```\ntemplate <class T>  \nT* atomic_fetch_sub(\n    volatile atomic<T*>* Atom,\n    ptrdiff_t Value) noexcept;\n\ntemplate <class T>  \nT* atomic_fetch_sub(\n    atomic<T*>* Atom,\n    ptrdiff_t Value) noexcept;\n```  \n  \n### Parameters  \n `Atom`  \n A pointer to an `atomic` object that stores a pointer to type `T`.  \n  \n `Value`  \n A value of type `ptrdiff_t`.  \n  \n### Return Value  \n The value of the pointer contained by the atomic object immediately before the operation was performed.  \n  \n### Remarks  \n The `atomic_fetch_sub` function performs a `read-modify-write` operation to atomically subtract `Value` from the stored value in `Atom`, using the `memory_order_seq_cst`[memory_order](../standard-library/atomic-enums.md#memory_order_enum) constraint.  \n  \n When the atomic type is `atomic_address`, `Value` has type `ptrdiff_t` and the operation treats the stored pointer as a `char *`.  \n  \n This operation is also overloaded for integral types:  \n  \n```\nintegral atomic_fetch_sub(volatile atomic-integral* Atom, integral Value) noexcept;\nintegral atomic_fetch_sub(atomic-integral* Atom, integral Value) noexcept;\n```  \n  \n##  <a name=\"atomic_fetch_sub_explicit_function\"></a>  atomic_fetch_sub_explicit  \n Subtracts a value from an existing value that is stored in an `atomic` object.  \n  \n```\ntemplate <class T>  \nT* atomic_fetch_sub_explicit(\n    volatile atomic<T*>* Atom,\n    ptrdiff_t Value,\n    memory_order Order) noexcept;\n\ntemplate <class T>  \nT* atomic_fetch_sub_explicit(\n    atomic<T*>* Atom,\n    ptrdiff_t Value, memory_order Order) noexcept;\n```  \n  \n### Parameters  \n `Atom`  \n A pointer to an `atomic` object that stores a pointer to type `T`.  \n  \n `Value`  \n A value of type `ptrdiff_t`.  \n  \n### Return Value  \n The value of the pointer contained by the atomic object immediately before the operation was performed.  \n  \n### Remarks  \n The `atomic_fetch_sub_explicit` function performs a `read-modify-write` operation to atomically subtract `Value` from the stored value in `Atom`, within the [memory_order](../standard-library/atomic-enums.md#memory_order_enum) constraints that are specified by `Order`.  \n  \n When the atomic type is `atomic_address`, `Value` has type `ptrdiff_t` and the operation treats the stored pointer as a `char *`.  \n  \n This operation is also overloaded for integral types:  \n  \n```cpp\nintegral atomic_fetch_sub_explicit(\n    volatile atomic-integral* Atom,\n    integral Value,\n    memory_order Order) noexcept;\n\nintegral atomic_fetch_sub_explicit(\n    atomic-integral* Atom,\n    integral Value,\n    memory_order Order) noexcept;\n```  \n  \n##  <a name=\"atomic_fetch_xor_function\"></a>  atomic_fetch_xor  \n Performs a bitwise `exclusive or` on a value and an existing value that is stored in an `atomic` object.  \n  \n```\ntemplate <class T>\ninline T atomic_fetch_xor(volatile atomic<T>* Atom, T Value) noexcept; \n\ntemplate <class T>\ninline T atomic_fetch_xor(volatile atomic<T>* Atom, T Value) noexcept;\n```  \n  \n### Parameters  \n `Atom`  \n A pointer to an `atomic` object that stores a value of type `T`.  \n  \n `Value`  \n A value of type `T`.  \n  \n### Return Value  \n The value contained by the atomic object immediately before the operation was performed.  \n  \n### Remarks  \n The `atomic_fetch_xor` function performs a `read-modify-write` operation to replace the stored value of `Atom` with a bitwise `exclusive or` of `Value` and the current value that is stored in `Atom`, using the `memory_order_seq_cst`[memory_order](../standard-library/atomic-enums.md#memory_order_enum).  \n  \n##  <a name=\"atomic_fetch_xor_explicit_function\"></a>  atomic_fetch_xor_explicit  \n Performs a bitwise `exclusive or` on a value and an existing value that is stored in an `atomic` object.  \n  \n```\ntemplate <class T>\ninline T atomic_fetch_xor_explicit(\n    volatile atomic<T>* Atom, \n    T Value,\n    memory_order Order) noexcept; \n    \ntemplate <class T>\ninline T atomic_fetch_xor_explicit(\n    volatile atomic<T>* Atom, \n    T Value,\n    memory_order Order) noexcept; \n```  \n  \n### Parameters  \n `Atom`  \n A pointer to an `atomic` object that stores a value of type `T`.  \n  \n `Value`  \n A value of type `T`.  \n  \n `Order`  \n A [memory_order](../standard-library/atomic-enums.md#memory_order_enum).  \n  \n### Return Value  \n The value contained by the atomic object immediately before the operation was performed.  \n  \n### Remarks  \n The `atomic_fetch_xor_explicit` function performs a `read-modify-write` operation to replace the stored value of `Atom` with a bitwise `exclusive or` of `Value` and the current value that is stored in `Atom`, within the [memory_order](../standard-library/atomic-enums.md#memory_order_enum) constraints that are specified by `Order`.  \n  \n##  <a name=\"atomic_flag_clear_function\"></a>  atomic_flag_clear  \n Sets the `bool` flag in an [atomic_flag](../standard-library/atomic-flag-structure.md) object to `false`, within the `memory_order_seq_cst`[memory_order](../standard-library/atomic-enums.md#memory_order_enum).  \n  \n```\ninline void atomic_flag_clear(volatile atomic_flag* Flag) noexcept;\ninline void atomic_flag_clear(atomic_flag* Flag) noexcept;\n```  \n  \n### Parameters  \n `Flag`  \n A pointer to an `atomic_flag` object.  \n  \n##  <a name=\"atomic_flag_clear_explicit_function\"></a>  atomic_flag_clear_explicit  \n Sets the `bool` flag in an [atomic_flag](../standard-library/atomic-flag-structure.md) object to `false`, within the specified [memory_order](../standard-library/atomic-enums.md#memory_order_enum) constraints.  \n  \n```\ninline void atomic_flag_clear_explicit(volatile atomic_flag* Flag, memory_order Order) noexcept;\ninline void atomic_flag_clear_explicit(atomic_flag* Flag, memory_order Order) noexcept;\n```  \n  \n### Parameters  \n `Flag`  \n A pointer to an `atomic_flag` object.  \n  \n `Order`  \n A [memory_order](../standard-library/atomic-enums.md#memory_order_enum).  \n  \n##  <a name=\"atomic_flag_test_and_set_function\"></a>  atomic_flag_test_and_set  \n Sets the `bool` flag in an [atomic_flag](../standard-library/atomic-flag-structure.md) object to `true`, within the constraints of the `memory_order_seq_cst`[memory_order](../standard-library/atomic-enums.md#memory_order_enum).  \n  \n```\ninline bool atomic_flag_test_and_set(volatile atomic_flag* Flag,) noexcept;\ninline bool atomic_flag_test_and_set(atomic_flag* Flag,) noexcept;\n```  \n  \n### Parameters  \n `Flag`  \n A pointer to an `atomic_flag` object.  \n  \n### Return Value  \n The initial value of `Flag`.  \n  \n##  <a name=\"atomic_flag_test_and_set_explicit_function\"></a>  atomic_flag_test_and_set_explicit  \n Sets the `bool` flag in an [atomic_flag](../standard-library/atomic-flag-structure.md) object to `true`, within the specified [memory_order](../standard-library/atomic-enums.md#memory_order_enum) constraints.  \n  \n```\ninline bool atomic_flag_test_and_set_explicit(volatile atomic_flag* Flag, memory_order Order) noexcept;\ninline bool atomic_flag_test_and_set_explicit(atomic_flag* Flag, memory_order Order) noexcept;\n```  \n  \n### Parameters  \n `Flag`  \n A pointer to an `atomic_flag` object.  \n  \n `Order`  \n A [memory_order](../standard-library/atomic-enums.md#memory_order_enum).  \n  \n### Return Value  \n The initial value of `Flag`.  \n  \n##  <a name=\"atomic_init_function\"></a>  atomic_init  \n Sets the stored value in an `atomic` object.  \n  \n```\ntemplate <class Ty>\ninline void atomic_init(volatile atomic<Ty>* Atom, Ty Value) noexcept;\ntemplate <class Ty>\ninline void atomic_init(atomic<Ty>* Atom, Ty Value) noexcept;\n```  \n  \n### Parameters  \n `Atom`  \n A pointer to an `atomic` object that stores a value of type `Ty`.  \n  \n `Value`  \n A value of type `Ty`.  \n  \n### Remarks  \n `atomic_init` is not an atomic operation. It is not thread-safe.  \n  \n##  <a name=\"atomic_is_lock_free_function\"></a>  atomic_is_lock_free  \n Specifies whether atomic operations on an `atomic` object are *lock-free*.  \n  \n```\ntemplate <class T>\ninline bool atomic_is_lock_free(const volatile atomic<T>* Atom) noexcept;\ntemplate <class T>\ninline bool atomic_is_lock_free(const atomic<T>* Atom) noexcept;\n```  \n  \n### Parameters  \n `Atom`  \n A pointer to an `atomic` object that stores a value of type `T`.  \n  \n### Return Value  \n `true` if atomic operations on `Atom` are lock-free; otherwise, `false`.  \n  \n### Remarks  \n An atomic type is lock-free if no atomic operations on that type use locks. If this function returns true, the type is safe to use in signal-handlers.  \n  \n##  <a name=\"atomic_load_function\"></a>  atomic_load  \n Retrieves the stored value in an `atomic` object.  \n  \n```\ntemplate <class Ty>\ninline Ty atomic_load(const volatile atomic<Ty>* Atom) noexcept;\ntemplate <class Ty>\ninline Ty atomic_load(const atomic<Ty>* Atom) noexcept;\n```  \n  \n### Parameters  \n `Atom`  \n A pointer to an `atomic` object that contains a value of type `Ty`.  \n  \n### Return Value  \n The retrieved value that is stored in `Atom`.  \n  \n### Remarks  \n `atomic_load` implicitly uses the `memory_order_seq_cst`[memory_order](../standard-library/atomic-enums.md#memory_order_enum).  \n  \n##  <a name=\"atomic_load_explicit_function\"></a>  atomic_load_explicit  \n Retrieves the stored value in an `atomic` object, within a specified [memory_order](../standard-library/atomic-enums.md#memory_order_enum).  \n  \n```\ntemplate <class Ty>\ninline Ty atomic_load_explicit(const volatile atomic<Ty>* Atom, memory_order Order) noexcept;\ntemplate <class Ty>\ninline Ty atomic_load_explicit(const atomic<Ty>* Atom, memory_order Order) noexcept;\n```  \n  \n### Parameters  \n `Atom`  \n A pointer to an `atomic` object that contains a value of type `Ty`.  \n  \n `Order`  \n A [memory_order](../standard-library/atomic-enums.md#memory_order_enum). Do not use `memory_order_release` or `memory_order_acq_rel`.  \n  \n### Return Value  \n The retrieved value that is stored in `Atom`.  \n  \n##  <a name=\"atomic_signal_fence_function\"></a>  atomic_signal_fence  \n Acts as a *fence*—which is a memory synchronization primitive that enforces ordering between load/store operations—between other fences in a calling thread that have signal handlers that are executed in the same thread.  \n  \n```\ninline void atomic_signal_fence(memory_order Order) noexcept;\n```  \n  \n### Parameters  \n `Order`  \n A memory ordering constraint that determines fence type.  \n  \n### Remarks  \n The `Order` argument determines fence type.  \n  \n|||  \n|-|-|  \n|`memory_order_relaxed`|The fence has no effect.|  \n|`memory_order_consume`|The fence is an acquire fence.|  \n|`memory_order_acquire`|The fence is an acquire fence.|  \n|`memory_order_release`|The fence is a release fence.|  \n|`memory_order_acq_rel`|The fence is both an acquire fence and a release fence.|  \n|`memory_order_seq_cst`|The fence is both an acquire fence and a release fence, and is sequentially consistent.|  \n  \n##  <a name=\"atomic_store_function\"></a>  atomic_store  \n Atomically stores a value in an atomic object.  \n  \n```\ntemplate <class Ty>\ninline Ty atomic_store_explicit(const volatile atomic<Ty>* Atom, Ty Value) noexcept;\ntemplate <class Ty>\ninline Ty atomic_store_explicit(const atomic<Ty>* Atom, T Value) noexcept;\n```  \n  \n### Parameters  \n `Atom`  \n A pointer to an atomic object that contains a value of type `Ty`.  \n  \n `Value`  \n A value of type `Ty`.  \n  \n### Remarks  \n `atomic_store` stores `Value` in the object that is pointed to by `Atom`, within the `memory_order_seq_cst`[memory_order](../standard-library/atomic-enums.md#memory_order_enum) constraint.  \n  \n##  <a name=\"atomic_store_explicit_function\"></a>  atomic_store_explicit  \n Atomically stores a value in an atomic object.  \n  \n```\ntemplate <class Ty>\ninline Ty atomic_store_explicit(\n    const volatile atomic<Ty>* Atom, \n    Ty Value, \n    memory_order Order) noexcept;\n\ntemplate <class Ty>\ninline Ty atomic_store_explicit(\n    const atomic<Ty>* Atom, \n    T Value, \n    memory_order Order) noexcept;\n```  \n  \n### Parameters  \n `Atom`  \n A pointer to an `atomic` object that contains a value of type `Ty`.  \n  \n `Value`  \n A value of type `Ty`.  \n  \n `Order`  \n A [memory_order](../standard-library/atomic-enums.md#memory_order_enum). Do not use `memory_order_consume`, `memory_order_acquire`, or `memory_order_acq_rel`.  \n  \n### Remarks  \n `atomic_store` stores `Value` in the object that is pointed to by `Atom`, within the `memory_order` that is specified by `Order`.  \n  \n##  <a name=\"atomic_thread_fence_function\"></a>  atomic_thread_fence  \n Acts as a *fence*—which is a memory synchronization primitive that enforces ordering between load/store operations—without an associated atomic operation.  \n  \n```\ninline void atomic_thread_fence(memory_order Order) noexcept;\n```  \n  \n### Parameters  \n `Order`  \n A memory ordering constraint that determines fence type.  \n  \n### Remarks  \n The `Order` argument determines fence type.  \n  \n|||  \n|-|-|  \n|`memory_order_relaxed`|The fence has no effect.|  \n|`memory_order_consume`|The fence is an acquire fence.|  \n|`memory_order_acquire`|The fence is an acquire fence.|  \n|`memory_order_release`|The fence is a release fence.|  \n|`memory_order_acq_rel`|The fence is both an acquire fence and a release fence.|  \n|`memory_order_seq_cst`|The fence is both an acquire fence and a release fence, and is sequentially consistent.|  \n  \n##  <a name=\"kill_dependency_function\"></a>  kill_dependency  \n Removes a dependency.  \n  \n```\ntemplate <class Ty>\nTy kill_dependency(Ty Arg) noexcept;\n```  \n  \n### Parameters  \n `Arg`  \n A value of type `Ty`.  \n  \n### Return Value  \n The return value is `Arg`. The evaluation of `Arg` does not carry a dependency to the function call. By breaking a possible dependency chain, the function might permit the compiler to generate more efficient code.  \n  \n## See Also  \n [\\<atomic>](../standard-library/atomic.md)\n\n\n\n"}