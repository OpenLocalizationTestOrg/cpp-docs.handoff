{"nodes":[{"pos":[12,60],"content":"How to: Handle Events Using WRL | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Handle Events Using WRL | Microsoft Docs","pos":[0,48]}]},{"content":"How to: Handle Events Using WRL","pos":[543,574]},{"pos":[575,833],"content":"This document shows how to use the <ph id=\"ph1\">[!INCLUDE[cppwrl](../windows/includes/cppwrl_md.md)]</ph> (<ph id=\"ph2\">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph>) to subscribe to and handle the events of a <ph id=\"ph3\">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph> object.","source":"This document shows how to use the [!INCLUDE[cppwrl](../windows/includes/cppwrl_md.md)] ([!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]) to subscribe to and handle the events of a [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)] object."},{"pos":[840,1076],"content":"For a more basic example that creates an instance of that component and retrieves a property value, see <bpt id=\"p1\">[</bpt>How to: Activate and Use a Windows Runtime Component<ept id=\"p1\">](../windows/how-to-activate-and-use-a-windows-runtime-component-using-wrl.md)</ept>.","source":"For a more basic example that creates an instance of that component and retrieves a property value, see [How to: Activate and Use a Windows Runtime Component](../windows/how-to-activate-and-use-a-windows-runtime-component-using-wrl.md)."},{"content":"Subscribing to and Handling Events","pos":[1085,1119]},{"content":"The following steps start an <ph id=\"ph1\">`ABI::Windows::System::Threading::IDeviceWatcher`</ph> object and use event handlers to monitor progress.","pos":[1123,1252],"source":"The following steps start an `ABI::Windows::System::Threading::IDeviceWatcher` object and use event handlers to monitor progress."},{"content":"The <ph id=\"ph1\">`IDeviceWatcher`</ph> interface enables you to enumerate devices asynchronously, or in the background, and receive notification when devices are added, removed, or changed.","pos":[1253,1424],"source":" The `IDeviceWatcher` interface enables you to enumerate devices asynchronously, or in the background, and receive notification when devices are added, removed, or changed."},{"content":"The <bpt id=\"p1\">[</bpt>Callback<ept id=\"p1\">](../windows/callback-function-windows-runtime-cpp-template-library.md)</ept> function is an important part of this example because it enables it to specify event handlers that process the results of the background operation.","pos":[1425,1657],"source":" The [Callback](../windows/callback-function-windows-runtime-cpp-template-library.md) function is an important part of this example because it enables it to specify event handlers that process the results of the background operation."},{"content":"The complete example follows.","pos":[1658,1687]},{"pos":[1695,2432],"content":"[!WARNING]\n Although you typically use the [!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)] in a [!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)] app, this example uses a console app for illustration. Functions such as `wprintf_s` are not available from a [!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)] app. For more information about the types and functions that you can use in a [!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)] app, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx) and [Win32 and COM for Windows Store apps](http://msdn.microsoft.com/library/windows/apps/br205757.aspx).","leadings":["","> "],"nodes":[{"content":" Although you typically use the [!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)] in a [!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)] app, this example uses a console app for illustration. Functions such as `wprintf_s` are not available from a [!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)] app. For more information about the types and functions that you can use in a [!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)] app, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx) and [Win32 and COM for Windows Store apps](http://msdn.microsoft.com/library/windows/apps/br205757.aspx).","pos":[11,735],"nodes":[{"content":"Although you typically use the <ph id=\"ph1\">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph> in a <ph id=\"ph2\">[!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)]</ph> app, this example uses a console app for illustration.","pos":[1,229],"source":" Although you typically use the [!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)] in a [!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)] app, this example uses a console app for illustration."},{"content":"Functions such as <ph id=\"ph1\">`wprintf_s`</ph> are not available from a <ph id=\"ph2\">[!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)]</ph> app.","pos":[230,362],"source":" Functions such as `wprintf_s` are not available from a [!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)] app."},{"content":"For more information about the types and functions that you can use in a <ph id=\"ph1\">[!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)]</ph> app, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept> and <bpt id=\"p2\">[</bpt>Win32 and COM for Windows Store apps<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/apps/br205757.aspx)</ept>.","pos":[363,724],"source":" For more information about the types and functions that you can use in a [!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)] app, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx) and [Win32 and COM for Windows Store apps](http://msdn.microsoft.com/library/windows/apps/br205757.aspx)."}]}]},{"pos":[2442,2628],"content":"Include (<ph id=\"ph1\">`#include`</ph>) any required <ph id=\"ph2\">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph>, <ph id=\"ph3\">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph>, or standard C++ library headers.","source":"Include (`#include`) any required [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)], [!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)], or standard C++ library headers."},{"pos":[2650,2669],"content":"wrl-consume-event#2"},{"content":"Windows.Devices.Enumeration.h declares the types that are required to enumerate devices.","pos":[2747,2835]},{"pos":[2846,2957],"content":"We recommend that you utilize the <ph id=\"ph1\">`using namespace`</ph> directive in your .cpp file to make the code more readable.","source":"We recommend that you utilize the `using namespace` directive in your .cpp file to make the code more readable."},{"content":"Declare the local variables for the app.","pos":[2967,3007]},{"content":"This example holds count of the number of enumerated devices and registration tokens that enable it to later unsubscribe from events.","pos":[3008,3141]},{"pos":[3163,3182],"content":"wrl-consume-event#7"},{"pos":[3259,3327],"content":"Initialize the <ph id=\"ph1\">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph>.","source":"Initialize the [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]."},{"pos":[3349,3368],"content":"wrl-consume-event#3"},{"pos":[3445,3610],"content":"Create an <bpt id=\"p1\">[</bpt>Event<ept id=\"p1\">](../windows/event-class-windows-runtime-cpp-template-library.md)</ept> object that synchronizes the completion of the enumeration process to the main app.","source":"Create an [Event](../windows/event-class-windows-runtime-cpp-template-library.md) object that synchronizes the completion of the enumeration process to the main app."},{"pos":[3632,3651],"content":"wrl-consume-event#4"},{"pos":[3730,3974],"content":"[!NOTE]\n This event is for demonstration only as part of a console app. This example uses the event to ensure that an async operation completes before the app exits. In most apps, you typically don’t wait for async operations to complete.","leadings":["","    > "],"nodes":[{"content":" This event is for demonstration only as part of a console app. This example uses the event to ensure that an async operation completes before the app exits. In most apps, you typically don’t wait for async operations to complete.","pos":[8,238],"nodes":[{"content":"This event is for demonstration only as part of a console app.","pos":[1,63]},{"content":"This example uses the event to ensure that an async operation completes before the app exits.","pos":[64,157]},{"content":"In most apps, you typically don’t wait for async operations to complete.","pos":[158,230]}]}]},{"pos":[3984,4048],"content":"Create an activation factory for the <ph id=\"ph1\">`IDeviceWatcher`</ph> interface.","source":"Create an activation factory for the `IDeviceWatcher` interface."},{"pos":[4070,4089],"content":"wrl-consume-event#5"},{"content":"The <ph id=\"ph1\">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph> uses fully-qualified names to identify types.","pos":[4167,4269],"source":"The [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)] uses fully-qualified names to identify types."},{"content":"The <ph id=\"ph1\">`RuntimeClass_Windows_Devices_Enumeration_DeviceInformation`</ph> parameter is a string that's provided by the <ph id=\"ph2\">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph> and contains the required runtime class name.","pos":[4270,4478],"source":" The `RuntimeClass_Windows_Devices_Enumeration_DeviceInformation` parameter is a string that's provided by the [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)] and contains the required runtime class name."},{"pos":[4488,4523],"content":"Create the <ph id=\"ph1\">`IDeviceWatcher`</ph> object.","source":"Create the `IDeviceWatcher` object."},{"pos":[4545,4564],"content":"wrl-consume-event#6"},{"pos":[4641,4743],"content":"Use the <ph id=\"ph1\">`Callback`</ph> function to subscribe to the <ph id=\"ph2\">`Added`</ph>, <ph id=\"ph3\">`EnumerationCompleted`</ph>, and <ph id=\"ph4\">`Stopped`</ph> events.","source":"Use the `Callback` function to subscribe to the `Added`, `EnumerationCompleted`, and `Stopped` events."},{"pos":[4765,4784],"content":"wrl-consume-event#8"},{"content":"The <ph id=\"ph1\">`Added`</ph> event handler increments the count of enumerated devices.","pos":[4862,4931],"source":"The `Added` event handler increments the count of enumerated devices."},{"content":"It stops the enumeration process after ten devices are found.","pos":[4932,4993]},{"pos":[5004,5089],"content":"The <ph id=\"ph1\">`Stopped`</ph> event handler removes the event handlers and sets the completion event.","source":"The `Stopped` event handler removes the event handlers and sets the completion event."},{"content":"The <ph id=\"ph1\">`EnumerationCompleted`</ph> event handler stops the enumeration process.","pos":[5100,5171],"source":"The `EnumerationCompleted` event handler stops the enumeration process."},{"content":"We handle this event in case there are fewer than ten devices.","pos":[5172,5234]},{"pos":[5246,5564],"content":"[!TIP]\n This example uses a lambda expression to define the callbacks. You can also use function objects (functors), function pointers, or [std::function](../standard-library/function-class.md) objects. For more information about lambda expressions, see [Lambda Expressions](../cpp/lambda-expressions-in-cpp.md).","leadings":["","    > "],"nodes":[{"content":" This example uses a lambda expression to define the callbacks. You can also use function objects (functors), function pointers, or [std::function](../standard-library/function-class.md) objects. For more information about lambda expressions, see [Lambda Expressions](../cpp/lambda-expressions-in-cpp.md).","pos":[7,312],"nodes":[{"content":"This example uses a lambda expression to define the callbacks.","pos":[1,63]},{"content":"You can also use function objects (functors), function pointers, or <bpt id=\"p1\">[</bpt>std::function<ept id=\"p1\">](../standard-library/function-class.md)</ept> objects.","pos":[64,195],"source":" You can also use function objects (functors), function pointers, or [std::function](../standard-library/function-class.md) objects."},{"content":"For more information about lambda expressions, see <bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](../cpp/lambda-expressions-in-cpp.md)</ept>.","pos":[196,305],"source":" For more information about lambda expressions, see [Lambda Expressions](../cpp/lambda-expressions-in-cpp.md)."}]}]},{"content":"Start the enumeration process.","pos":[5574,5604]},{"pos":[5626,5645],"content":"wrl-consume-event#9"},{"content":"Wait for the enumeration process to complete and then print a message.","pos":[5721,5791]},{"content":"All <ph id=\"ph1\">`ComPtr`</ph> and RAII objects leave scope and are released automatically.","pos":[5792,5865],"source":" All `ComPtr` and RAII objects leave scope and are released automatically."},{"pos":[5887,5907],"content":"wrl-consume-event#10"},{"content":"Here is the complete example:","pos":[5981,6010]},{"pos":[6028,6047],"content":"wrl-consume-event#1"},{"content":"Compiling the Code","pos":[6124,6142]},{"pos":[6146,6358],"content":"To compile the code, copy it and then paste it in a Visual Studio project, or paste it in a file that is named <ph id=\"ph1\">`wrl-consume-events.cpp`</ph> and then run the following command in a Visual Studio Command Prompt window.","source":"To compile the code, copy it and then paste it in a Visual Studio project, or paste it in a file that is named `wrl-consume-events.cpp` and then run the following command in a Visual Studio Command Prompt window."},{"content":"cl.exe wrl-consume-events.cpp runtimeobject.lib","pos":[6367,6414]},{"content":"See Also","pos":[6425,6433]},{"content":"Windows Runtime C++ Template Library (WRL)","pos":[6438,6480]}],"content":"---\ntitle: \"How to: Handle Events Using WRL | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\ndev_langs: \n  - \"C++\"\nms.assetid: 1c77543f-7b0c-4a94-93bf-e3225885ed76\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Handle Events Using WRL\nThis document shows how to use the [!INCLUDE[cppwrl](../windows/includes/cppwrl_md.md)] ([!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]) to subscribe to and handle the events of a [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)] object.  \n  \n For a more basic example that creates an instance of that component and retrieves a property value, see [How to: Activate and Use a Windows Runtime Component](../windows/how-to-activate-and-use-a-windows-runtime-component-using-wrl.md).  \n  \n## Subscribing to and Handling Events  \n The following steps start an `ABI::Windows::System::Threading::IDeviceWatcher` object and use event handlers to monitor progress. The `IDeviceWatcher` interface enables you to enumerate devices asynchronously, or in the background, and receive notification when devices are added, removed, or changed. The [Callback](../windows/callback-function-windows-runtime-cpp-template-library.md) function is an important part of this example because it enables it to specify event handlers that process the results of the background operation. The complete example follows.  \n  \n> [!WARNING]\n>  Although you typically use the [!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)] in a [!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)] app, this example uses a console app for illustration. Functions such as `wprintf_s` are not available from a [!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)] app. For more information about the types and functions that you can use in a [!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)] app, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx) and [Win32 and COM for Windows Store apps](http://msdn.microsoft.com/library/windows/apps/br205757.aspx).  \n  \n1.  Include (`#include`) any required [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)], [!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)], or standard C++ library headers.  \n  \n     [!code-cpp[wrl-consume-event#2](../windows/codesnippet/CPP/how-to-handle-events-using-wrl_1.cpp)]  \n  \n     Windows.Devices.Enumeration.h declares the types that are required to enumerate devices.  \n  \n     We recommend that you utilize the `using namespace` directive in your .cpp file to make the code more readable.  \n  \n2.  Declare the local variables for the app. This example holds count of the number of enumerated devices and registration tokens that enable it to later unsubscribe from events.  \n  \n     [!code-cpp[wrl-consume-event#7](../windows/codesnippet/CPP/how-to-handle-events-using-wrl_2.cpp)]  \n  \n3.  Initialize the [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)].  \n  \n     [!code-cpp[wrl-consume-event#3](../windows/codesnippet/CPP/how-to-handle-events-using-wrl_3.cpp)]  \n  \n4.  Create an [Event](../windows/event-class-windows-runtime-cpp-template-library.md) object that synchronizes the completion of the enumeration process to the main app.  \n  \n     [!code-cpp[wrl-consume-event#4](../windows/codesnippet/CPP/how-to-handle-events-using-wrl_4.cpp)]  \n  \n    > [!NOTE]\n    >  This event is for demonstration only as part of a console app. This example uses the event to ensure that an async operation completes before the app exits. In most apps, you typically don’t wait for async operations to complete.  \n  \n5.  Create an activation factory for the `IDeviceWatcher` interface.  \n  \n     [!code-cpp[wrl-consume-event#5](../windows/codesnippet/CPP/how-to-handle-events-using-wrl_5.cpp)]  \n  \n     The [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)] uses fully-qualified names to identify types. The `RuntimeClass_Windows_Devices_Enumeration_DeviceInformation` parameter is a string that's provided by the [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)] and contains the required runtime class name.  \n  \n6.  Create the `IDeviceWatcher` object.  \n  \n     [!code-cpp[wrl-consume-event#6](../windows/codesnippet/CPP/how-to-handle-events-using-wrl_6.cpp)]  \n  \n7.  Use the `Callback` function to subscribe to the `Added`, `EnumerationCompleted`, and `Stopped` events.  \n  \n     [!code-cpp[wrl-consume-event#8](../windows/codesnippet/CPP/how-to-handle-events-using-wrl_7.cpp)]  \n  \n     The `Added` event handler increments the count of enumerated devices. It stops the enumeration process after ten devices are found.  \n  \n     The `Stopped` event handler removes the event handlers and sets the completion event.  \n  \n     The `EnumerationCompleted` event handler stops the enumeration process. We handle this event in case there are fewer than ten devices.  \n  \n    > [!TIP]\n    >  This example uses a lambda expression to define the callbacks. You can also use function objects (functors), function pointers, or [std::function](../standard-library/function-class.md) objects. For more information about lambda expressions, see [Lambda Expressions](../cpp/lambda-expressions-in-cpp.md).  \n  \n8.  Start the enumeration process.  \n  \n     [!code-cpp[wrl-consume-event#9](../windows/codesnippet/CPP/how-to-handle-events-using-wrl_8.cpp)]  \n  \n9. Wait for the enumeration process to complete and then print a message. All `ComPtr` and RAII objects leave scope and are released automatically.  \n  \n     [!code-cpp[wrl-consume-event#10](../windows/codesnippet/CPP/how-to-handle-events-using-wrl_9.cpp)]  \n  \n Here is the complete example:  \n  \n [!code-cpp[wrl-consume-event#1](../windows/codesnippet/CPP/how-to-handle-events-using-wrl_10.cpp)]  \n  \n## Compiling the Code  \n To compile the code, copy it and then paste it in a Visual Studio project, or paste it in a file that is named `wrl-consume-events.cpp` and then run the following command in a Visual Studio Command Prompt window.  \n  \n **cl.exe wrl-consume-events.cpp runtimeobject.lib**  \n  \n## See Also  \n [Windows Runtime C++ Template Library (WRL)](../windows/windows-runtime-cpp-template-library-wrl.md)"}