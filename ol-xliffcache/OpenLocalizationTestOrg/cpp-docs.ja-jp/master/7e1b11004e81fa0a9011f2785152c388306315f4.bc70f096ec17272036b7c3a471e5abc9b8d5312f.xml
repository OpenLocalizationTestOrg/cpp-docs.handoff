{"nodes":[{"pos":[12,35],"content":"mbrlen | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"mbrlen | Microsoft Docs","pos":[0,23]}]},{"pos":[902,908],"content":"mbrlen","linkify":"mbrlen","nodes":[{"content":"mbrlen","pos":[0,6]}]},{"content":"Determine the number of bytes that are required to complete a multibyte character in the current locale, with the capability of restarting in the middle of a multibyte character.","pos":[909,1087]},{"pos":[1096,1102],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1217,1227],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to the next byte to inspect in a multibyte character string.","pos":[1240,1308]},{"content":"The maximum number of bytes to inspect.","pos":[1326,1365]},{"content":"Pointer to the current shift state of the initial byte of <ph id=\"ph1\">`str`</ph>.","pos":[1385,1449],"source":" Pointer to the current shift state of the initial byte of `str`."},{"pos":[1458,1470],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"One of the following values:","pos":[1474,1502]},{"content":"0","pos":[1509,1510]},{"content":"The next <ph id=\"ph1\">`count`</ph> or fewer bytes complete the multibyte character that represents the wide null character.","pos":[1514,1619],"source":" The next `count` or fewer bytes complete the multibyte character that represents the wide null character."},{"content":"1 to <ph id=\"ph1\">`count`</ph>, inclusive","pos":[1626,1649],"source":"1 to `count`, inclusive"},{"content":"The next <ph id=\"ph1\">`count`</ph> or fewer bytes complete a valid multibyte character.","pos":[1653,1722],"source":" The next `count` or fewer bytes complete a valid multibyte character."},{"content":"The value returned is the number of bytes that complete the multibyte character.","pos":[1723,1803]},{"content":"(size_t)(-2)","pos":[1810,1822]},{"content":"The next <ph id=\"ph1\">`count`</ph> bytes contribute to an incomplete but potentially valid multibyte character and all <ph id=\"ph2\">`count`</ph> bytes have been processed.","pos":[1826,1961],"source":" The next `count` bytes contribute to an incomplete but potentially valid multibyte character and all `count` bytes have been processed."},{"content":"(size_t)(-1)","pos":[1968,1980]},{"content":"An encoding error occurred.","pos":[1984,2011]},{"content":"The next <ph id=\"ph1\">`count`</ph> or fewer bytes do not contribute to a complete and valid multibyte character.","pos":[2012,2106],"source":" The next `count` or fewer bytes do not contribute to a complete and valid multibyte character."},{"content":"In this case, <ph id=\"ph1\">`errno`</ph> is set to EILSEQ and the conversion state in <ph id=\"ph2\">`mbstate`</ph> is unspecified.","pos":[2107,2199],"source":" In this case, `errno` is set to EILSEQ and the conversion state in `mbstate` is unspecified."},{"pos":[2208,2215],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`mbrlen`</ph> function inspects at most <ph id=\"ph2\">`count`</ph> bytes starting with the byte pointed to by <ph id=\"ph3\">`str`</ph> to determine the number of bytes that are required to complete the next multibyte character, including any shift sequences.","pos":[2219,2438],"source":"The `mbrlen` function inspects at most `count` bytes starting with the byte pointed to by `str` to determine the number of bytes that are required to complete the next multibyte character, including any shift sequences."},{"content":"It is equivalent to the call <ph id=\"ph1\">`mbrtowc(NULL, str, count, &amp;mbstate)`</ph> where <ph id=\"ph2\">`mbstate`</ph> is either a user-provided <ph id=\"ph3\">`mbstate_t`</ph> object, or a static internal object provided by the library.","pos":[2439,2620],"source":" It is equivalent to the call `mbrtowc(NULL, str, count, &mbstate)` where `mbstate` is either a user-provided `mbstate_t` object, or a static internal object provided by the library."},{"content":"The <ph id=\"ph1\">`mbrlen`</ph> function saves and uses the shift state of an incomplete multibyte character in the <ph id=\"ph2\">`mbstate`</ph> parameter.","pos":[2627,2744],"source":"The `mbrlen` function saves and uses the shift state of an incomplete multibyte character in the `mbstate` parameter."},{"content":"This gives <ph id=\"ph1\">`mbrlen`</ph> the capability of restarting in the middle of a multibyte character if need be, examining at most <ph id=\"ph2\">`count`</ph> bytes.","pos":[2745,2877],"source":" This gives `mbrlen` the capability of restarting in the middle of a multibyte character if need be, examining at most `count` bytes."},{"content":"If <ph id=\"ph1\">`mbstate`</ph> is a null pointer, <ph id=\"ph2\">`mbrlen`</ph> uses an internal, static <ph id=\"ph3\">`mbstate_t`</ph> object to store the shift state.","pos":[2878,2988],"source":" If `mbstate` is a null pointer, `mbrlen` uses an internal, static `mbstate_t` object to store the shift state."},{"content":"Because the internal <ph id=\"ph1\">`mbstate_t`</ph> object is not thread-safe, we recommend that you always allocate and pass your own <ph id=\"ph2\">`mbstate`</ph> parameter.","pos":[2989,3125],"source":" Because the internal `mbstate_t` object is not thread-safe, we recommend that you always allocate and pass your own `mbstate` parameter."},{"content":"The <ph id=\"ph1\">`mbrlen`</ph> function differs from <bpt id=\"p1\">[</bpt>_mbclen, mblen, _mblen_l<ept id=\"p1\">](../../c-runtime-library/reference/mbclen-mblen-mblen-l.md)</ept> by its restartability.","pos":[3132,3275],"source":"The `mbrlen` function differs from [_mbclen, mblen, _mblen_l](../../c-runtime-library/reference/mbclen-mblen-mblen-l.md) by its restartability."},{"content":"The shift state is stored in <ph id=\"ph1\">`mbstate`</ph> for subsequent calls to the same or other restartable functions.","pos":[3276,3379],"source":" The shift state is stored in `mbstate` for subsequent calls to the same or other restartable functions."},{"content":"Results are undefined when mixing the use of restartable and nonrestartable functions.","pos":[3380,3466]},{"content":"For example, an application should use <ph id=\"ph1\">`wcsrlen`</ph> instead of <ph id=\"ph2\">`wcslen`</ph> if a subsequent call to <ph id=\"ph3\">`wcsrtombs`</ph> is used instead of <ph id=\"ph4\">`wcstombs.`</ph>","pos":[3468,3603],"source":"  For example, an application should use `wcsrlen` instead of `wcslen` if a subsequent call to `wcsrtombs` is used instead of `wcstombs.`"},{"pos":[3613,3642],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"TCHAR.H routine","pos":[3649,3664]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[3665,3693],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[3694,3707]},{"content":"_UNICODE defined","pos":[3708,3724]},{"content":"not applicable","pos":[3837,3851]},{"content":"not applicable","pos":[3852,3866]},{"content":"not applicable","pos":[3876,3890]},{"pos":[3900,3912],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[3919,3926]},{"content":"Required header","pos":[3927,3942]},{"content":"<ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[3996,4006],"source":"\\<wchar.h>"},{"pos":[4014,4138],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[4147,4154],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4158,4311],"content":"This example shows how the interpretation of multibyte characters depends on the current code page, and demonstrates the resuming capability of <ph id=\"ph1\">`mbrlen`</ph>.","source":"This example shows how the interpretation of multibyte characters depends on the current code page, and demonstrates the resuming capability of `mbrlen`."},{"pos":[5680,5705],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[5709,5801],"content":"<bpt id=\"p1\">[</bpt>System::String::Length<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.string.length.aspx)</ept>","source":"[System::String::Length](https://msdn.microsoft.com/en-us/library/system.string.length.aspx)"},{"pos":[5810,5818],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>String Manipulation<ept id=\"p1\">](../../c-runtime-library/string-manipulation-crt.md)</ept><ph id=\"ph1\"> </ph>","pos":[5822,5896],"source":"[String Manipulation](../../c-runtime-library/string-manipulation-crt.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Locale<ept id=\"p1\">](../../c-runtime-library/locale.md)</ept>","pos":[5899,5943],"source":" [Locale](../../c-runtime-library/locale.md)"}],"content":"---\ntitle: \"mbrlen | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"mbrlen\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-string-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"mbrlen\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"mbrlen function\"\nms.assetid: dde8dee9-e091-4c4c-81b3-639808885ae1\ncaps.latest.revision: 16\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# mbrlen\nDetermine the number of bytes that are required to complete a multibyte character in the current locale, with the capability of restarting in the middle of a multibyte character.  \n  \n## Syntax  \n  \n```  \nsize_t mbrlen(  \n   const char * str,  \n   size_t count,  \n   mbstate_t * mbstate  \n);  \n```  \n  \n#### Parameters  \n `str`  \n Pointer to the next byte to inspect in a multibyte character string.  \n  \n `count`  \n The maximum number of bytes to inspect.  \n  \n `mbstate`  \n Pointer to the current shift state of the initial byte of `str`.  \n  \n## Return Value  \n One of the following values:  \n  \n 0  \n The next `count` or fewer bytes complete the multibyte character that represents the wide null character.  \n  \n 1 to `count`, inclusive  \n The next `count` or fewer bytes complete a valid multibyte character. The value returned is the number of bytes that complete the multibyte character.  \n  \n (size_t)(-2)  \n The next `count` bytes contribute to an incomplete but potentially valid multibyte character and all `count` bytes have been processed.  \n  \n (size_t)(-1)  \n An encoding error occurred. The next `count` or fewer bytes do not contribute to a complete and valid multibyte character. In this case, `errno` is set to EILSEQ and the conversion state in `mbstate` is unspecified.  \n  \n## Remarks  \n The `mbrlen` function inspects at most `count` bytes starting with the byte pointed to by `str` to determine the number of bytes that are required to complete the next multibyte character, including any shift sequences. It is equivalent to the call `mbrtowc(NULL, str, count, &mbstate)` where `mbstate` is either a user-provided `mbstate_t` object, or a static internal object provided by the library.  \n  \n The `mbrlen` function saves and uses the shift state of an incomplete multibyte character in the `mbstate` parameter. This gives `mbrlen` the capability of restarting in the middle of a multibyte character if need be, examining at most `count` bytes. If `mbstate` is a null pointer, `mbrlen` uses an internal, static `mbstate_t` object to store the shift state. Because the internal `mbstate_t` object is not thread-safe, we recommend that you always allocate and pass your own `mbstate` parameter.  \n  \n The `mbrlen` function differs from [_mbclen, mblen, _mblen_l](../../c-runtime-library/reference/mbclen-mblen-mblen-l.md) by its restartability. The shift state is stored in `mbstate` for subsequent calls to the same or other restartable functions. Results are undefined when mixing the use of restartable and nonrestartable functions.  For example, an application should use `wcsrlen` instead of `wcslen` if a subsequent call to `wcsrtombs` is used instead of `wcstombs.`  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|not applicable|not applicable|`mbrlen`|not applicable|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`mbrlen`|\\<wchar.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n This example shows how the interpretation of multibyte characters depends on the current code page, and demonstrates the resuming capability of `mbrlen`.  \n  \n```  \n // crt_mbrlen.c  \n// Compile by using: cl crt_mbrlen.c  \n#include <stdlib.h>  \n#include <stdio.h>  \n#include <string.h>  \n#include <locale.h>  \n#include <wchar.h>  \n  \nsize_t Example(const char * pStr)  \n{  \n    size_t      charLen = 0;  \n    size_t      charCount = 0;  \n    mbstate_t   mbState = {0};  \n  \n    while ((charLen = mbrlen(pStr++, 1, &mbState)) != 0 &&  \n            charLen != (size_t)-1)  \n    {  \n        if (charLen != (size_t)-2) // if complete mbcs char,  \n        {  \n            charCount++;  \n        }  \n    }   \n    return (charCount);  \n}   \n  \nint main( void )  \n{  \n    int         cp;  \n    size_t      charCount = 0;  \n    const char  *pSample =   \n        \"\\x82\\xD0\\x82\\xE7\\x82\\xAA\\x82\\xC8: Shift-jis hiragana.\";  \n  \n    cp = _getmbcp();  \n    charCount = Example(pSample);  \n    printf(\"\\nCode page: %d\\n%s\\nCharacter count: %d\\n\",   \n        cp, pSample, charCount);  \n  \n    setlocale(LC_ALL, \"ja-JP\"); // Set Japanese locale  \n    _setmbcp(932); // and Japanese multibyte code page  \n    cp = _getmbcp();  \n    charCount = Example(pSample);  \n    printf(\"\\nCode page: %d\\n%s\\nCharacter count: %d\\n\",   \n        cp, pSample, charCount);  \n}  \n```  \n  \n```Output  \n  \nCode page: 0  \né╨éτé¬é╚: Shift-jis hiragana.  \nCharacter count: 29  \n  \nCode page: 932  \n????: Shift-jis hiragana.  \nCharacter count: 25  \n  \n```  \n  \n## .NET Framework Equivalent  \n [System::String::Length](https://msdn.microsoft.com/en-us/library/system.string.length.aspx)  \n  \n## See Also  \n [String Manipulation](../../c-runtime-library/string-manipulation-crt.md)   \n [Locale](../../c-runtime-library/locale.md)"}