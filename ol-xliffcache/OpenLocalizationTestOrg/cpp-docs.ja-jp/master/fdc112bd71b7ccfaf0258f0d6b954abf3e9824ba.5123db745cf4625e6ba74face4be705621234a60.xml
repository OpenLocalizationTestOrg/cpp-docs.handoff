{"nodes":[{"pos":[12,44],"content":"Scheduler Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Scheduler Class | Microsoft Docs","pos":[0,32]}]},{"pos":[619,634],"content":"Scheduler Class","linkify":"Scheduler Class","nodes":[{"content":"Scheduler Class","pos":[0,15]}]},{"content":"Represents an abstraction for a Concurrency Runtime scheduler.","pos":[635,697]},{"pos":[706,712],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[751,758],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[768,790],"content":"Protected Constructors","linkify":"Protected Constructors","nodes":[{"content":"Protected Constructors","pos":[0,22]}]},{"content":"Name","pos":[797,801]},{"content":"Description","pos":[802,813]},{"pos":[851,892],"content":"<bpt id=\"p1\">[</bpt>Scheduler::Scheduler Constructor<ept id=\"p1\">](#ctor)</ept>","source":"[Scheduler::Scheduler Constructor](#ctor)"},{"pos":[893,982],"content":"An object of the <ph id=\"ph1\">`Scheduler`</ph> class can only created using factory methods, or implicitly.","source":"An object of the `Scheduler` class can only created using factory methods, or implicitly."},{"pos":[987,1028],"content":"<bpt id=\"p1\">[</bpt>Scheduler::~Scheduler Destructor<ept id=\"p1\">](#dtor)</ept>","source":"[Scheduler::~Scheduler Destructor](#dtor)"},{"pos":[1029,1138],"content":"An object of the <ph id=\"ph1\">`Scheduler`</ph> class is implicitly destroyed when all external references to it cease to exist.","source":"An object of the `Scheduler` class is implicitly destroyed when all external references to it cease to exist."},{"pos":[1149,1163],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1170,1174]},{"content":"Description","pos":[1175,1186]},{"pos":[1224,1259],"content":"<bpt id=\"p1\">[</bpt>Scheduler::Attach Method<ept id=\"p1\">](#attach)</ept>","source":"[Scheduler::Attach Method](#attach)"},{"content":"Attaches the scheduler to the calling context.","pos":[1260,1306]},{"content":"After this method returns, the calling context is managed by the scheduler and the scheduler becomes the current scheduler.","pos":[1307,1430]},{"pos":[1435,1470],"content":"<bpt id=\"p1\">[</bpt>Scheduler::Create Method<ept id=\"p1\">](#create)</ept>","source":"[Scheduler::Create Method](#create)"},{"pos":[1471,1625],"content":"Creates a new scheduler whose behavior is described by the <ph id=\"ph1\">`_Policy`</ph> parameter, places an initial reference on the scheduler, and returns a pointer to it.","source":"Creates a new scheduler whose behavior is described by the `_Policy` parameter, places an initial reference on the scheduler, and returns a pointer to it."},{"pos":[1630,1691],"content":"<bpt id=\"p1\">[</bpt>Scheduler::CreateScheduleGroup Method<ept id=\"p1\">](#createschedulegroup)</ept>","source":"[Scheduler::CreateScheduleGroup Method](#createschedulegroup)"},{"content":"Overloaded.","pos":[1692,1703]},{"content":"Creates a new schedule group within the scheduler.","pos":[1704,1754]},{"content":"The version that takes the parameter <ph id=\"ph1\">`_Placement`</ph> causes tasks within the newly created schedule group to be biased towards executing at the location specified by that parameter.","pos":[1755,1933],"source":" The version that takes the parameter `_Placement` causes tasks within the newly created schedule group to be biased towards executing at the location specified by that parameter."},{"pos":[1938,2017],"content":"<bpt id=\"p1\">[</bpt>Scheduler::GetNumberOfVirtualProcessors Method<ept id=\"p1\">](#getnumberofvirtualprocessors)</ept>","source":"[Scheduler::GetNumberOfVirtualProcessors Method](#getnumberofvirtualprocessors)"},{"content":"Returns the current number of virtual processors for the scheduler.","pos":[2018,2085]},{"pos":[2090,2131],"content":"<bpt id=\"p1\">[</bpt>Scheduler::GetPolicy Method<ept id=\"p1\">](#getpolicy)</ept>","source":"[Scheduler::GetPolicy Method](#getpolicy)"},{"content":"Returns a copy of the policy that the scheduler was created with.","pos":[2132,2197]},{"pos":[2202,2229],"content":"<bpt id=\"p1\">[</bpt>Scheduler::Id Method<ept id=\"p1\">](#id)</ept>","source":"[Scheduler::Id Method](#id)"},{"content":"Returns a unique identifier for the scheduler.","pos":[2230,2276]},{"pos":[2281,2342],"content":"<bpt id=\"p1\">[</bpt>Scheduler::IsAvailableLocation Method<ept id=\"p1\">](#isavailablelocation)</ept>","source":"[Scheduler::IsAvailableLocation Method](#isavailablelocation)"},{"content":"Determines whether a given location is available on the scheduler.","pos":[2343,2409]},{"pos":[2414,2455],"content":"<bpt id=\"p1\">[</bpt>Scheduler::Reference Method<ept id=\"p1\">](#reference)</ept>","source":"[Scheduler::Reference Method](#reference)"},{"content":"Increments the scheduler reference count.","pos":[2456,2497]},{"pos":[2502,2567],"content":"<bpt id=\"p1\">[</bpt>Scheduler::RegisterShutdownEvent Method<ept id=\"p1\">](#registershutdownevent)</ept>","source":"[Scheduler::RegisterShutdownEvent Method](#registershutdownevent)"},{"content":"Causes the Windows event handle passed in the <ph id=\"ph1\">`_Event`</ph> parameter to be signaled when the scheduler shuts down and destroys itself.","pos":[2568,2698],"source":"Causes the Windows event handle passed in the `_Event` parameter to be signaled when the scheduler shuts down and destroys itself."},{"content":"At the time the event is signaled, all work that had been scheduled to the scheduler is complete.","pos":[2699,2796]},{"content":"Multiple shutdown events can be registered through this method.","pos":[2797,2860]},{"pos":[2865,2902],"content":"<bpt id=\"p1\">[</bpt>Scheduler::Release Method<ept id=\"p1\">](#release)</ept>","source":"[Scheduler::Release Method](#release)"},{"content":"Decrements the scheduler reference count.","pos":[2903,2944]},{"pos":[2949,3026],"content":"<bpt id=\"p1\">[</bpt>Scheduler::ResetDefaultSchedulerPolicy Method<ept id=\"p1\">](#resetdefaultschedulerpolicy)</ept>","source":"[Scheduler::ResetDefaultSchedulerPolicy Method](#resetdefaultschedulerpolicy)"},{"content":"Resets the default scheduler policy to the runtime default.","pos":[3027,3086]},{"content":"The next time a default scheduler is created, it will use the runtime default policy settings.","pos":[3087,3181]},{"pos":[3186,3233],"content":"<bpt id=\"p1\">[</bpt>Scheduler::ScheduleTask Method<ept id=\"p1\">](#scheduletask)</ept>","source":"[Scheduler::ScheduleTask Method](#scheduletask)"},{"content":"Overloaded.","pos":[3234,3245]},{"content":"Schedules a light-weight task within the scheduler.","pos":[3246,3297]},{"content":"The light-weight task will be placed in a schedule group determined by the runtime.","pos":[3298,3381]},{"content":"The version that takes the parameter <ph id=\"ph1\">`_Placement`</ph> causes the task to be biased towards executing at the specified location.","pos":[3382,3505],"source":" The version that takes the parameter `_Placement` causes the task to be biased towards executing at the specified location."},{"pos":[3510,3583],"content":"<bpt id=\"p1\">[</bpt>Scheduler::SetDefaultSchedulerPolicy Method<ept id=\"p1\">](#setdefaultschedulerpolicy)</ept>","source":"[Scheduler::SetDefaultSchedulerPolicy Method](#setdefaultschedulerpolicy)"},{"content":"Allows a user defined policy to be used to create the default scheduler.","pos":[3584,3656]},{"content":"This method can be called only when no default scheduler exists within the process.","pos":[3657,3740]},{"content":"After a default policy has been set, it remains in effect until the next valid call to either the <ph id=\"ph1\">`SetDefaultSchedulerPolicy`</ph> or the <bpt id=\"p1\">[</bpt>ResetDefaultSchedulerPolicy<ept id=\"p1\">](#resetdefaultschedulerpolicy)</ept> method.","pos":[3741,3941],"source":" After a default policy has been set, it remains in effect until the next valid call to either the `SetDefaultSchedulerPolicy` or the [ResetDefaultSchedulerPolicy](#resetdefaultschedulerpolicy) method."},{"pos":[3951,3958],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The Concurrency Runtime scheduler uses execution contexts, which map to the operating system execution contexts, such as a thread, to execute the work queued to it by your application.","pos":[3962,4146]},{"content":"At any time, the concurrency level of a scheduler is equal to the number of virtual processor granted to it by the Resource Manager.","pos":[4147,4279]},{"content":"A virtual processor is an abstraction for a processing resource and maps to a hardware thread on the underlying system.","pos":[4280,4399]},{"content":"Only a single scheduler context can execute on a virtual processor at a given time.","pos":[4400,4483]},{"content":"The Concurrency Runtime will create a default scheduler per process to execute parallel work.","pos":[4490,4583]},{"content":"In addition you can create your own scheduler instances and manipulate it using this class.","pos":[4584,4675]},{"pos":[4684,4705],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[4729,4741],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4745,4765],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> concrt.h","source":"**Header:** concrt.h"},{"pos":[4772,4798],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[4808,4855],"content":"<bpt id=\"p1\">&lt;a name=\"attach\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Scheduler::Attach Method","linkify":"<a name=\"attach\"></a>  Scheduler::Attach Method","source":"<a name=\"attach\"></a>  Scheduler::Attach Method"},{"content":"Attaches the scheduler to the calling context.","pos":[4859,4905]},{"content":"After this method returns, the calling context is managed by the scheduler and the scheduler becomes the current scheduler.","pos":[4906,5029]},{"pos":[5079,5086],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Attaching a scheduler implicitly places a reference on the scheduler.","pos":[5090,5159]},{"pos":[5166,5326],"content":"At some point in the future, you must call the <bpt id=\"p1\">[</bpt>CurrentScheduler::Detach<ept id=\"p1\">](currentscheduler-class.md#detach)</ept> method in order to allow the scheduler to shut down.","source":"At some point in the future, you must call the [CurrentScheduler::Detach](currentscheduler-class.md#detach) method in order to allow the scheduler to shut down."},{"content":"If this method is called from a context that is already attached to a different scheduler, the existing scheduler is remembered as the previous scheduler, and the newly created scheduler becomes the current scheduler.","pos":[5333,5550]},{"content":"When you call the <ph id=\"ph1\">`CurrentScheduler::Detach`</ph> method at a later point, the previous scheduler is restored as the current scheduler.","pos":[5551,5681],"source":" When you call the `CurrentScheduler::Detach` method at a later point, the previous scheduler is restored as the current scheduler."},{"pos":[5688,5854],"content":"This method will throw an <bpt id=\"p1\">[</bpt>improper_scheduler_attach<ept id=\"p1\">](improper-scheduler-attach-class.md)</ept> exception if this scheduler is the current scheduler of the calling context.","source":"This method will throw an [improper_scheduler_attach](improper-scheduler-attach-class.md) exception if this scheduler is the current scheduler of the calling context."},{"pos":[5864,5911],"content":"<bpt id=\"p1\">&lt;a name=\"create\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Scheduler::Create Method","linkify":"<a name=\"create\"></a>  Scheduler::Create Method","source":"<a name=\"create\"></a>  Scheduler::Create Method"},{"pos":[5915,6069],"content":"Creates a new scheduler whose behavior is described by the <ph id=\"ph1\">`_Policy`</ph> parameter, places an initial reference on the scheduler, and returns a pointer to it.","source":"Creates a new scheduler whose behavior is described by the `_Policy` parameter, places an initial reference on the scheduler, and returns a pointer to it."},{"pos":[6158,6168],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The scheduler policy that describes behavior of the newly created scheduler.","pos":[6185,6261]},{"pos":[6271,6283],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to a newly created scheduler.","pos":[6287,6326]},{"content":"This <ph id=\"ph1\">`Scheduler`</ph> object has an initial reference count placed on it.","pos":[6327,6395],"source":" This `Scheduler` object has an initial reference count placed on it."},{"pos":[6405,6412],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6416,6618],"content":"After a scheduler is created with the <ph id=\"ph1\">`Create`</ph> method, you must call the <ph id=\"ph2\">`Release`</ph> method at some point in the future in order to remove the initial reference count and allow the scheduler to shut down.","source":"After a scheduler is created with the `Create` method, you must call the `Release` method at some point in the future in order to remove the initial reference count and allow the scheduler to shut down."},{"content":"A scheduler created with this method is not attached to the calling context.","pos":[6625,6701]},{"content":"It can be attached to a context using the <bpt id=\"p1\">[</bpt>Attach<ept id=\"p1\">](#attach)</ept> method.","pos":[6702,6769],"source":" It can be attached to a context using the [Attach](#attach) method."},{"pos":[6776,6995],"content":"This method can throw a variety of exceptions, including <bpt id=\"p1\">[</bpt>scheduler_resource_allocation_error<ept id=\"p1\">](scheduler-resource-allocation-error-class.md)</ept> and <bpt id=\"p2\">[</bpt>invalid_scheduler_policy_value<ept id=\"p2\">](invalid-scheduler-policy-value-class.md)</ept>.","source":"This method can throw a variety of exceptions, including [scheduler_resource_allocation_error](scheduler-resource-allocation-error-class.md) and [invalid_scheduler_policy_value](invalid-scheduler-policy-value-class.md)."},{"pos":[7005,7078],"content":"<bpt id=\"p1\">&lt;a name=\"createschedulegroup\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Scheduler::CreateScheduleGroup Method","linkify":"<a name=\"createschedulegroup\"></a>  Scheduler::CreateScheduleGroup Method","source":"<a name=\"createschedulegroup\"></a>  Scheduler::CreateScheduleGroup Method"},{"content":"Creates a new schedule group within the scheduler.","pos":[7082,7132]},{"content":"The version that takes the parameter <ph id=\"ph1\">`_Placement`</ph> causes tasks within the newly created schedule group to be biased towards executing at the location specified by that parameter.","pos":[7133,7311],"source":" The version that takes the parameter `_Placement` causes tasks within the newly created schedule group to be biased towards executing at the location specified by that parameter."},{"pos":[7455,7465],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to a location where the tasks within the schedule group will biased towards executing at.","pos":[7485,7586]},{"pos":[7596,7608],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the newly created schedule group.","pos":[7612,7658]},{"content":"This <ph id=\"ph1\">`ScheduleGroup`</ph> object has an initial reference count placed on it.","pos":[7659,7731],"source":" This `ScheduleGroup` object has an initial reference count placed on it."},{"pos":[7741,7748],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You must invoke the <bpt id=\"p1\">[</bpt>Release<ept id=\"p1\">](schedulegroup-class.md#release)</ept> method on a schedule group when you are done scheduling work to it.","pos":[7752,7881],"source":"You must invoke the [Release](schedulegroup-class.md#release) method on a schedule group when you are done scheduling work to it."},{"content":"The scheduler will destroy the schedule group when all work queued to it has completed.","pos":[7882,7969]},{"content":"Note that if you explicitly created this scheduler, you must release all references to schedule groups within it, before you release your references on the scheduler.","pos":[7976,8142]},{"pos":[8152,8243],"content":"<bpt id=\"p1\">&lt;a name=\"getnumberofvirtualprocessors\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Scheduler::GetNumberOfVirtualProcessors Method","linkify":"<a name=\"getnumberofvirtualprocessors\"></a>  Scheduler::GetNumberOfVirtualProcessors Method","source":"<a name=\"getnumberofvirtualprocessors\"></a>  Scheduler::GetNumberOfVirtualProcessors Method"},{"content":"Returns the current number of virtual processors for the scheduler.","pos":[8247,8314]},{"pos":[8400,8412],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current number of virtual processors for the scheduler.","pos":[8416,8475]},{"pos":[8485,8538],"content":"<bpt id=\"p1\">&lt;a name=\"getpolicy\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Scheduler::GetPolicy Method","linkify":"<a name=\"getpolicy\"></a>  Scheduler::GetPolicy Method","source":"<a name=\"getpolicy\"></a>  Scheduler::GetPolicy Method"},{"content":"Returns a copy of the policy that the scheduler was created with.","pos":[8542,8607]},{"pos":[8677,8689],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A copy of the policy that the scheduler was created with.","pos":[8693,8750]},{"pos":[8760,8799],"content":"<bpt id=\"p1\">&lt;a name=\"id\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Scheduler::Id Method","linkify":"<a name=\"id\"></a>  Scheduler::Id Method","source":"<a name=\"id\"></a>  Scheduler::Id Method"},{"content":"Returns a unique identifier for the scheduler.","pos":[8803,8849]},{"pos":[8909,8921],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A unique identifier for the scheduler.","pos":[8925,8963]},{"pos":[8973,9046],"content":"<bpt id=\"p1\">&lt;a name=\"isavailablelocation\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Scheduler::IsAvailableLocation Method","linkify":"<a name=\"isavailablelocation\"></a>  Scheduler::IsAvailableLocation Method","source":"<a name=\"isavailablelocation\"></a>  Scheduler::IsAvailableLocation Method"},{"content":"Determines whether a given location is available on the scheduler.","pos":[9050,9116]},{"pos":[9211,9221],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to the location to query the scheduler about.","pos":[9241,9298]},{"pos":[9308,9320],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9324,9438],"content":"An indication of whether or not the location specified by the <ph id=\"ph1\">`_Placement`</ph> argument is available on the scheduler.","source":"An indication of whether or not the location specified by the `_Placement` argument is available on the scheduler."},{"pos":[9448,9455],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Note that the return value is an instantaneous sampling of whether the given location is available.","pos":[9459,9558]},{"content":"In the presence of multiple schedulers, dynamic resource management can add or take away resources from schedulers at any point.","pos":[9559,9687]},{"content":"Should this happen, the given location can change availability.","pos":[9688,9751]},{"pos":[9761,9814],"content":"<bpt id=\"p1\">&lt;a name=\"reference\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Scheduler::Reference Method","linkify":"<a name=\"reference\"></a>  Scheduler::Reference Method","source":"<a name=\"reference\"></a>  Scheduler::Reference Method"},{"content":"Increments the scheduler reference count.","pos":[9818,9859]},{"pos":[9921,9933],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The newly incremented reference count.","pos":[9937,9975]},{"pos":[9985,9992],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This is typically used to manage the lifetime of the scheduler for composition.","pos":[9996,10075]},{"content":"When the reference count of a scheduler falls to zero, the scheduler will shut down and destruct itself after all work on the scheduler has completed.","pos":[10076,10226]},{"pos":[10233,10481],"content":"The method will throw an <bpt id=\"p1\">[</bpt>improper_scheduler_reference<ept id=\"p1\">](improper-scheduler-reference-class.md)</ept> exception if the reference count prior to calling the <ph id=\"ph1\">`Reference`</ph> method was zero and the call is made from a context that is not owned by the scheduler.","source":"The method will throw an [improper_scheduler_reference](improper-scheduler-reference-class.md) exception if the reference count prior to calling the `Reference` method was zero and the call is made from a context that is not owned by the scheduler."},{"pos":[10491,10568],"content":"<bpt id=\"p1\">&lt;a name=\"registershutdownevent\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Scheduler::RegisterShutdownEvent Method","linkify":"<a name=\"registershutdownevent\"></a>  Scheduler::RegisterShutdownEvent Method","source":"<a name=\"registershutdownevent\"></a>  Scheduler::RegisterShutdownEvent Method"},{"content":"Causes the Windows event handle passed in the <ph id=\"ph1\">`_Event`</ph> parameter to be signaled when the scheduler shuts down and destroys itself.","pos":[10572,10702],"source":"Causes the Windows event handle passed in the `_Event` parameter to be signaled when the scheduler shuts down and destroys itself."},{"content":"At the time the event is signaled, all work that had been scheduled to the scheduler is complete.","pos":[10703,10800]},{"content":"Multiple shutdown events can be registered through this method.","pos":[10801,10864]},{"pos":[10942,10952],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A handle to a Windows event object which will be signaled by the runtime when the scheduler shuts down and destroys itself.","pos":[10968,11091]},{"pos":[11101,11150],"content":"<bpt id=\"p1\">&lt;a name=\"release\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Scheduler::Release Method","linkify":"<a name=\"release\"></a>  Scheduler::Release Method","source":"<a name=\"release\"></a>  Scheduler::Release Method"},{"content":"Decrements the scheduler reference count.","pos":[11154,11195]},{"pos":[11254,11266],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The newly decremented reference count.","pos":[11270,11308]},{"pos":[11318,11325],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This is typically used to manage the lifetime of the scheduler for composition.","pos":[11329,11408]},{"content":"When the reference count of a scheduler falls to zero, the scheduler will shut down and destruct itself after all work on the scheduler has completed.","pos":[11409,11559]},{"pos":[11569,11658],"content":"<bpt id=\"p1\">&lt;a name=\"resetdefaultschedulerpolicy\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Scheduler::ResetDefaultSchedulerPolicy Method","linkify":"<a name=\"resetdefaultschedulerpolicy\"></a>  Scheduler::ResetDefaultSchedulerPolicy Method","source":"<a name=\"resetdefaultschedulerpolicy\"></a>  Scheduler::ResetDefaultSchedulerPolicy Method"},{"content":"Resets the default scheduler policy to the runtime default.","pos":[11662,11721]},{"content":"The next time a default scheduler is created, it will use the runtime default policy settings.","pos":[11722,11816]},{"pos":[11890,11897],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method can be called while a default scheduler exists within the process.","pos":[11901,11979]},{"content":"It will not affect the policy of the existing default scheduler.","pos":[11980,12044]},{"content":"However, if the default scheduler were to shutdown, and a new default were to be created at a later point, the new scheduler would use the runtime default policy settings.","pos":[12045,12216]},{"pos":[12226,12279],"content":"<bpt id=\"p1\">&lt;a name=\"ctor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Scheduler::Scheduler Constructor","linkify":"<a name=\"ctor\"></a>  Scheduler::Scheduler Constructor","source":"<a name=\"ctor\"></a>  Scheduler::Scheduler Constructor"},{"pos":[12283,12372],"content":"An object of the <ph id=\"ph1\">`Scheduler`</ph> class can only created using factory methods, or implicitly.","source":"An object of the `Scheduler` class can only created using factory methods, or implicitly."},{"pos":[12408,12415],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The process' default scheduler is created implicitly when you utilize many of the runtime functions which require a scheduler to be attached to the calling context.","pos":[12419,12583]},{"content":"Methods within the <ph id=\"ph1\">`CurrentScheduler`</ph> class and features of the PPL and agents layers typically perform implicit attachment.","pos":[12584,12708],"source":" Methods within the `CurrentScheduler` class and features of the PPL and agents layers typically perform implicit attachment."},{"pos":[12715,12845],"content":"You can also create a scheduler explicitly through either the <ph id=\"ph1\">`CurrentScheduler::Create`</ph> method or the <ph id=\"ph2\">`Scheduler::Create`</ph> method.","source":"You can also create a scheduler explicitly through either the `CurrentScheduler::Create` method or the `Scheduler::Create` method."},{"pos":[12855,12908],"content":"<bpt id=\"p1\">&lt;a name=\"dtor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Scheduler::~Scheduler Destructor","linkify":"<a name=\"dtor\"></a>  Scheduler::~Scheduler Destructor","source":"<a name=\"dtor\"></a>  Scheduler::~Scheduler Destructor"},{"pos":[12912,13021],"content":"An object of the <ph id=\"ph1\">`Scheduler`</ph> class is implicitly destroyed when all external references to it cease to exist.","source":"An object of the `Scheduler` class is implicitly destroyed when all external references to it cease to exist."},{"pos":[13066,13125],"content":"<bpt id=\"p1\">&lt;a name=\"scheduletask\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Scheduler::ScheduleTask Method","linkify":"<a name=\"scheduletask\"></a>  Scheduler::ScheduleTask Method","source":"<a name=\"scheduletask\"></a>  Scheduler::ScheduleTask Method"},{"content":"Schedules a light-weight task within the scheduler.","pos":[13129,13180]},{"content":"The light-weight task will be placed in a schedule group determined by the runtime.","pos":[13181,13264]},{"content":"The version that takes the parameter <ph id=\"ph1\">`_Placement`</ph> causes the task to be biased towards executing at the specified location.","pos":[13265,13388],"source":" The version that takes the parameter `_Placement` causes the task to be biased towards executing at the specified location."},{"pos":[13600,13610],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the function to execute to perform the body of the light-weight task.","pos":[13625,13707]},{"content":"A void pointer to the data that will be passed as a parameter to the body of the task.","pos":[13725,13811]},{"content":"A reference to a location where the light-weight task will be biased towards executing at.","pos":[13834,13924]},{"pos":[13934,14019],"content":"<bpt id=\"p1\">&lt;a name=\"setdefaultschedulerpolicy\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Scheduler::SetDefaultSchedulerPolicy Method","linkify":"<a name=\"setdefaultschedulerpolicy\"></a>  Scheduler::SetDefaultSchedulerPolicy Method","source":"<a name=\"setdefaultschedulerpolicy\"></a>  Scheduler::SetDefaultSchedulerPolicy Method"},{"content":"Allows a user defined policy to be used to create the default scheduler.","pos":[14023,14095]},{"content":"This method can be called only when no default scheduler exists within the process.","pos":[14096,14179]},{"content":"After a default policy has been set, it remains in effect until the next valid call to either the <ph id=\"ph1\">`SetDefaultSchedulerPolicy`</ph> or the <bpt id=\"p1\">[</bpt>ResetDefaultSchedulerPolicy<ept id=\"p1\">](#resetdefaultschedulerpolicy)</ept> method.","pos":[14180,14380],"source":" After a default policy has been set, it remains in effect until the next valid call to either the `SetDefaultSchedulerPolicy` or the [ResetDefaultSchedulerPolicy](#resetdefaultschedulerpolicy) method."},{"pos":[14482,14492],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The policy to be set as the default scheduler policy.","pos":[14509,14562]},{"pos":[14572,14579],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14583,14792],"content":"If the <ph id=\"ph1\">`SetDefaultSchedulerPolicy`</ph> method is called when a default scheduler already exists within the process, the runtime will throw a <bpt id=\"p1\">[</bpt>default_scheduler_exists<ept id=\"p1\">](default-scheduler-exists-class.md)</ept> exception.","source":"If the `SetDefaultSchedulerPolicy` method is called when a default scheduler already exists within the process, the runtime will throw a [default_scheduler_exists](default-scheduler-exists-class.md) exception."},{"pos":[14801,14809],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>concurrency Namespace<ept id=\"p1\">](concurrency-namespace.md)</ept><ph id=\"ph1\"> </ph>","pos":[14813,14863],"source":"[concurrency Namespace](concurrency-namespace.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Scheduler Class<ept id=\"p1\">](scheduler-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[14866,14905],"source":" [Scheduler Class](scheduler-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>PolicyElementKey Enumeration<ept id=\"p1\">](concurrency-namespace-enums.md)</ept><ph id=\"ph1\"> </ph>","pos":[14908,14972],"source":" [PolicyElementKey Enumeration](concurrency-namespace-enums.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Task Scheduler<ept id=\"p1\">](../../../parallel/concrt/task-scheduler-concurrency-runtime.md)</ept>","pos":[14975,15056],"source":" [Task Scheduler](../../../parallel/concrt/task-scheduler-concurrency-runtime.md)"}],"content":"---\ntitle: \"Scheduler Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"concrt/concurrency::Scheduler\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"Scheduler class\"\nms.assetid: 34cf7961-048d-4852-8a5c-a32f823e3506\ncaps.latest.revision: 19\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Scheduler Class\nRepresents an abstraction for a Concurrency Runtime scheduler.  \n  \n## Syntax  \n  \n```\nclass Scheduler;\n```  \n  \n## Members  \n  \n### Protected Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[Scheduler::Scheduler Constructor](#ctor)|An object of the `Scheduler` class can only created using factory methods, or implicitly.|  \n|[Scheduler::~Scheduler Destructor](#dtor)|An object of the `Scheduler` class is implicitly destroyed when all external references to it cease to exist.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[Scheduler::Attach Method](#attach)|Attaches the scheduler to the calling context. After this method returns, the calling context is managed by the scheduler and the scheduler becomes the current scheduler.|  \n|[Scheduler::Create Method](#create)|Creates a new scheduler whose behavior is described by the `_Policy` parameter, places an initial reference on the scheduler, and returns a pointer to it.|  \n|[Scheduler::CreateScheduleGroup Method](#createschedulegroup)|Overloaded. Creates a new schedule group within the scheduler. The version that takes the parameter `_Placement` causes tasks within the newly created schedule group to be biased towards executing at the location specified by that parameter.|  \n|[Scheduler::GetNumberOfVirtualProcessors Method](#getnumberofvirtualprocessors)|Returns the current number of virtual processors for the scheduler.|  \n|[Scheduler::GetPolicy Method](#getpolicy)|Returns a copy of the policy that the scheduler was created with.|  \n|[Scheduler::Id Method](#id)|Returns a unique identifier for the scheduler.|  \n|[Scheduler::IsAvailableLocation Method](#isavailablelocation)|Determines whether a given location is available on the scheduler.|  \n|[Scheduler::Reference Method](#reference)|Increments the scheduler reference count.|  \n|[Scheduler::RegisterShutdownEvent Method](#registershutdownevent)|Causes the Windows event handle passed in the `_Event` parameter to be signaled when the scheduler shuts down and destroys itself. At the time the event is signaled, all work that had been scheduled to the scheduler is complete. Multiple shutdown events can be registered through this method.|  \n|[Scheduler::Release Method](#release)|Decrements the scheduler reference count.|  \n|[Scheduler::ResetDefaultSchedulerPolicy Method](#resetdefaultschedulerpolicy)|Resets the default scheduler policy to the runtime default. The next time a default scheduler is created, it will use the runtime default policy settings.|  \n|[Scheduler::ScheduleTask Method](#scheduletask)|Overloaded. Schedules a light-weight task within the scheduler. The light-weight task will be placed in a schedule group determined by the runtime. The version that takes the parameter `_Placement` causes the task to be biased towards executing at the specified location.|  \n|[Scheduler::SetDefaultSchedulerPolicy Method](#setdefaultschedulerpolicy)|Allows a user defined policy to be used to create the default scheduler. This method can be called only when no default scheduler exists within the process. After a default policy has been set, it remains in effect until the next valid call to either the `SetDefaultSchedulerPolicy` or the [ResetDefaultSchedulerPolicy](#resetdefaultschedulerpolicy) method.|  \n  \n## Remarks  \n The Concurrency Runtime scheduler uses execution contexts, which map to the operating system execution contexts, such as a thread, to execute the work queued to it by your application. At any time, the concurrency level of a scheduler is equal to the number of virtual processor granted to it by the Resource Manager. A virtual processor is an abstraction for a processing resource and maps to a hardware thread on the underlying system. Only a single scheduler context can execute on a virtual processor at a given time.  \n  \n The Concurrency Runtime will create a default scheduler per process to execute parallel work. In addition you can create your own scheduler instances and manipulate it using this class.  \n  \n## Inheritance Hierarchy  \n `Scheduler`  \n  \n## Requirements  \n **Header:** concrt.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"attach\"></a>  Scheduler::Attach Method  \n Attaches the scheduler to the calling context. After this method returns, the calling context is managed by the scheduler and the scheduler becomes the current scheduler.  \n  \n```\nvirtual void Attach() = 0;\n```  \n  \n### Remarks  \n Attaching a scheduler implicitly places a reference on the scheduler.  \n  \n At some point in the future, you must call the [CurrentScheduler::Detach](currentscheduler-class.md#detach) method in order to allow the scheduler to shut down.  \n  \n If this method is called from a context that is already attached to a different scheduler, the existing scheduler is remembered as the previous scheduler, and the newly created scheduler becomes the current scheduler. When you call the `CurrentScheduler::Detach` method at a later point, the previous scheduler is restored as the current scheduler.  \n  \n This method will throw an [improper_scheduler_attach](improper-scheduler-attach-class.md) exception if this scheduler is the current scheduler of the calling context.  \n  \n##  <a name=\"create\"></a>  Scheduler::Create Method  \n Creates a new scheduler whose behavior is described by the `_Policy` parameter, places an initial reference on the scheduler, and returns a pointer to it.  \n  \n```\nstatic Scheduler* __cdecl Create(const SchedulerPolicy& _Policy);\n```  \n  \n### Parameters  \n `_Policy`  \n The scheduler policy that describes behavior of the newly created scheduler.  \n  \n### Return Value  \n A pointer to a newly created scheduler. This `Scheduler` object has an initial reference count placed on it.  \n  \n### Remarks  \n After a scheduler is created with the `Create` method, you must call the `Release` method at some point in the future in order to remove the initial reference count and allow the scheduler to shut down.  \n  \n A scheduler created with this method is not attached to the calling context. It can be attached to a context using the [Attach](#attach) method.  \n  \n This method can throw a variety of exceptions, including [scheduler_resource_allocation_error](scheduler-resource-allocation-error-class.md) and [invalid_scheduler_policy_value](invalid-scheduler-policy-value-class.md).  \n  \n##  <a name=\"createschedulegroup\"></a>  Scheduler::CreateScheduleGroup Method  \n Creates a new schedule group within the scheduler. The version that takes the parameter `_Placement` causes tasks within the newly created schedule group to be biased towards executing at the location specified by that parameter.  \n  \n```\nvirtual ScheduleGroup* CreateScheduleGroup() = 0;\n\nvirtual ScheduleGroup* CreateScheduleGroup(location& _Placement) = 0;\n```  \n  \n### Parameters  \n `_Placement`  \n A reference to a location where the tasks within the schedule group will biased towards executing at.  \n  \n### Return Value  \n A pointer to the newly created schedule group. This `ScheduleGroup` object has an initial reference count placed on it.  \n  \n### Remarks  \n You must invoke the [Release](schedulegroup-class.md#release) method on a schedule group when you are done scheduling work to it. The scheduler will destroy the schedule group when all work queued to it has completed.  \n  \n Note that if you explicitly created this scheduler, you must release all references to schedule groups within it, before you release your references on the scheduler.  \n  \n##  <a name=\"getnumberofvirtualprocessors\"></a>  Scheduler::GetNumberOfVirtualProcessors Method  \n Returns the current number of virtual processors for the scheduler.  \n  \n```\nvirtual unsigned int GetNumberOfVirtualProcessors() const = 0;\n```  \n  \n### Return Value  \n The current number of virtual processors for the scheduler.  \n  \n##  <a name=\"getpolicy\"></a>  Scheduler::GetPolicy Method  \n Returns a copy of the policy that the scheduler was created with.  \n  \n```\nvirtual SchedulerPolicy GetPolicy() const = 0;\n```  \n  \n### Return Value  \n A copy of the policy that the scheduler was created with.  \n  \n##  <a name=\"id\"></a>  Scheduler::Id Method  \n Returns a unique identifier for the scheduler.  \n  \n```\nvirtual unsigned int Id() const = 0;\n```  \n  \n### Return Value  \n A unique identifier for the scheduler.  \n  \n##  <a name=\"isavailablelocation\"></a>  Scheduler::IsAvailableLocation Method  \n Determines whether a given location is available on the scheduler.  \n  \n```\nvirtual bool IsAvailableLocation(const location& _Placement) const = 0;\n```  \n  \n### Parameters  \n `_Placement`  \n A reference to the location to query the scheduler about.  \n  \n### Return Value  \n An indication of whether or not the location specified by the `_Placement` argument is available on the scheduler.  \n  \n### Remarks  \n Note that the return value is an instantaneous sampling of whether the given location is available. In the presence of multiple schedulers, dynamic resource management can add or take away resources from schedulers at any point. Should this happen, the given location can change availability.  \n  \n##  <a name=\"reference\"></a>  Scheduler::Reference Method  \n Increments the scheduler reference count.  \n  \n```\nvirtual unsigned int Reference() = 0 ;\n```  \n  \n### Return Value  \n The newly incremented reference count.  \n  \n### Remarks  \n This is typically used to manage the lifetime of the scheduler for composition. When the reference count of a scheduler falls to zero, the scheduler will shut down and destruct itself after all work on the scheduler has completed.  \n  \n The method will throw an [improper_scheduler_reference](improper-scheduler-reference-class.md) exception if the reference count prior to calling the `Reference` method was zero and the call is made from a context that is not owned by the scheduler.  \n  \n##  <a name=\"registershutdownevent\"></a>  Scheduler::RegisterShutdownEvent Method  \n Causes the Windows event handle passed in the `_Event` parameter to be signaled when the scheduler shuts down and destroys itself. At the time the event is signaled, all work that had been scheduled to the scheduler is complete. Multiple shutdown events can be registered through this method.  \n  \n```\nvirtual void RegisterShutdownEvent(HANDLE _Event) = 0;\n```  \n  \n### Parameters  \n `_Event`  \n A handle to a Windows event object which will be signaled by the runtime when the scheduler shuts down and destroys itself.  \n  \n##  <a name=\"release\"></a>  Scheduler::Release Method  \n Decrements the scheduler reference count.  \n  \n```\nvirtual unsigned int Release() = 0;\n```  \n  \n### Return Value  \n The newly decremented reference count.  \n  \n### Remarks  \n This is typically used to manage the lifetime of the scheduler for composition. When the reference count of a scheduler falls to zero, the scheduler will shut down and destruct itself after all work on the scheduler has completed.  \n  \n##  <a name=\"resetdefaultschedulerpolicy\"></a>  Scheduler::ResetDefaultSchedulerPolicy Method  \n Resets the default scheduler policy to the runtime default. The next time a default scheduler is created, it will use the runtime default policy settings.  \n  \n```\nstatic void __cdecl ResetDefaultSchedulerPolicy();\n```  \n  \n### Remarks  \n This method can be called while a default scheduler exists within the process. It will not affect the policy of the existing default scheduler. However, if the default scheduler were to shutdown, and a new default were to be created at a later point, the new scheduler would use the runtime default policy settings.  \n  \n##  <a name=\"ctor\"></a>  Scheduler::Scheduler Constructor  \n An object of the `Scheduler` class can only created using factory methods, or implicitly.  \n  \n```\nScheduler();\n```  \n  \n### Remarks  \n The process' default scheduler is created implicitly when you utilize many of the runtime functions which require a scheduler to be attached to the calling context. Methods within the `CurrentScheduler` class and features of the PPL and agents layers typically perform implicit attachment.  \n  \n You can also create a scheduler explicitly through either the `CurrentScheduler::Create` method or the `Scheduler::Create` method.  \n  \n##  <a name=\"dtor\"></a>  Scheduler::~Scheduler Destructor  \n An object of the `Scheduler` class is implicitly destroyed when all external references to it cease to exist.  \n  \n```\nvirtual ~Scheduler();\n```  \n  \n##  <a name=\"scheduletask\"></a>  Scheduler::ScheduleTask Method  \n Schedules a light-weight task within the scheduler. The light-weight task will be placed in a schedule group determined by the runtime. The version that takes the parameter `_Placement` causes the task to be biased towards executing at the specified location.  \n  \n```\nvirtual void ScheduleTask(\n    TaskProc _Proc,\n    _Inout_opt_ void* _Data) = 0;\n\nvirtual void ScheduleTask(\n    TaskProc _Proc,\n    _Inout_opt_ void* _Data,\n    location& _Placement) = 0;\n```  \n  \n### Parameters  \n `_Proc`  \n A pointer to the function to execute to perform the body of the light-weight task.  \n  \n `_Data`  \n A void pointer to the data that will be passed as a parameter to the body of the task.  \n  \n `_Placement`  \n A reference to a location where the light-weight task will be biased towards executing at.  \n  \n##  <a name=\"setdefaultschedulerpolicy\"></a>  Scheduler::SetDefaultSchedulerPolicy Method  \n Allows a user defined policy to be used to create the default scheduler. This method can be called only when no default scheduler exists within the process. After a default policy has been set, it remains in effect until the next valid call to either the `SetDefaultSchedulerPolicy` or the [ResetDefaultSchedulerPolicy](#resetdefaultschedulerpolicy) method.  \n  \n```\nstatic void __cdecl SetDefaultSchedulerPolicy(const SchedulerPolicy& _Policy);\n```  \n  \n### Parameters  \n `_Policy`  \n The policy to be set as the default scheduler policy.  \n  \n### Remarks  \n If the `SetDefaultSchedulerPolicy` method is called when a default scheduler already exists within the process, the runtime will throw a [default_scheduler_exists](default-scheduler-exists-class.md) exception.  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)   \n [Scheduler Class](scheduler-class.md)   \n [PolicyElementKey Enumeration](concurrency-namespace-enums.md)   \n [Task Scheduler](../../../parallel/concrt/task-scheduler-concurrency-runtime.md)\n\n\n\n"}