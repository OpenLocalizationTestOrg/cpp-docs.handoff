<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e9300ff07a02fa62dc30c0b16cb0940b118f7cb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\c-bitwise-operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b6d67c752ad0ee48b85e6e5e28c16e4bcf2ffbf0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8c516651826fba28f35c7b6d0f200efba9d55bce</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>C Bitwise Operators | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>C Bitwise Operators</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The bitwise operators perform bitwise-AND (<bpt id="p1">**</bpt><ph id="ph1">&amp;</ph><ept id="p1">**</ept>), bitwise-exclusive-OR (<bpt id="p2">**</bpt><ph id="ph2">^</ph><ept id="p2">**</ept>), and bitwise-inclusive-OR (<bpt id="p3">**</bpt>&amp;#124;<ept id="p3">**</ept>) operations.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>AND-expression<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>equality-expression</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>AND-expression<ept id="p1">*</ept>  <bpt id="p2">**</bpt><ph id="ph1">&amp;</ph><ept id="p2">**</ept>  <bpt id="p3">*</bpt>equality-expression<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>exclusive-OR-expression<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>AND-expression</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>exclusive-OR-expression<ept id="p1">*</ept>  <bpt id="p2">**</bpt><ph id="ph1">^</ph><ept id="p2">**</ept>  <bpt id="p3">*</bpt>AND-expression<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>inclusive-OR-expression<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>exclusive-OR-expression</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>inclusive-OR-expression<ept id="p1">*</ept> &amp;#124; <bpt id="p2">*</bpt>exclusive-OR-expression<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The operands of bitwise operators must have integral types, but their types can be different.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>These operators perform the usual arithmetic conversions; the type of the result is the type of the operands after conversion.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The C bitwise operators are described below:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Operator</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The bitwise-AND operator compares each bit of its first operand to the corresponding bit of its second operand.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If both bits are 1, the corresponding result bit is set to 1.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Otherwise, the corresponding result bit is set to 0.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The bitwise-exclusive-OR operator compares each bit of its first operand to the corresponding bit of its second operand.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If one bit is 0 and the other bit is 1, the corresponding result bit is set to 1.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Otherwise, the corresponding result bit is set to 0.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>&amp;#124;</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The bitwise-inclusive-OR operator compares each bit of its first operand to the corresponding bit of its second operand.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If either bit is 1, the corresponding result bit is set to 1.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Otherwise, the corresponding result bit is set to 0.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>These declarations are used for the following three examples:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The result assigned to <ph id="ph1">`n`</ph> in this first example is the same as <ph id="ph2">`i`</ph> (0xAB00 hexadecimal).</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The bitwise-inclusive OR in the second example results in the value 0xABCD (hexadecimal), while the bitwise-exclusive OR in the third example produces 0xCD (hexadecimal).</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The results of bitwise operation on signed integers is implementation-defined according to the ANSI C standard.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For the Microsoft C compiler, bitwise operations on signed integers work the same as bitwise operations on unsigned integers.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`-16 &amp; 99`</ph> can be expressed in binary as</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The result of the bitwise AND is 96 decimal.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Bitwise AND Operator: &amp;</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Bitwise Exclusive OR Operator: ^</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Bitwise Inclusive OR Operator: &amp;#124;</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>