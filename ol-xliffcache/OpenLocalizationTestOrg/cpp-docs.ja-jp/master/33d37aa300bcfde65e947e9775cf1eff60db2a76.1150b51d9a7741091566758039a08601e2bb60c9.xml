{"nodes":[{"pos":[12,44],"content":"vscanf, vwscanf | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"vscanf, vwscanf | Microsoft Docs","pos":[0,32]}]},{"pos":[862,877],"content":"vscanf, vwscanf","linkify":"vscanf, vwscanf","nodes":[{"content":"vscanf, vwscanf","pos":[0,15]}]},{"content":"Reads formatted data from the standard input stream.","pos":[878,930]},{"content":"More secure versions of these function are available; see <bpt id=\"p1\">[</bpt>vscanf_s, vwscanf_s<ept id=\"p1\">](../../c-runtime-library/reference/vscanf-s-vwscanf-s.md)</ept>.","pos":[931,1068],"source":" More secure versions of these function are available; see [vscanf_s, vwscanf_s](../../c-runtime-library/reference/vscanf-s-vwscanf-s.md)."},{"pos":[1077,1083],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1246,1256],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Format control string.","pos":[1272,1294]},{"content":"Variable argument list.","pos":[1314,1337]},{"pos":[1346,1358],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the number of fields that are successfully converted and assigned; the return value does not include fields that were read but not assigned.","pos":[1362,1510]},{"content":"A return value of 0 indicates that no fields were assigned.","pos":[1511,1570]},{"content":"If <ph id=\"ph1\">`format`</ph> is a <ph id=\"ph2\">`NULL`</ph> pointer, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1577,1740],"source":"If `format` is a `NULL` pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions return <ph id=\"ph1\">`EOF`</ph> and set <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`EINVAL`</ph>.","pos":[1741,1835],"source":" If execution is allowed to continue, these functions return `EOF` and set `errno` to `EINVAL`."},{"pos":[1842,2013],"content":"For information about these and other error codes, see <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For information about these and other error codes, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"pos":[2022,2029],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`vscanf`</ph> function reads data from the standard input stream <ph id=\"ph2\">`stdin`</ph> and writes the data into the locations that are given by the <ph id=\"ph3\">`arglist`</ph> argument list.","pos":[2033,2190],"source":"The `vscanf` function reads data from the standard input stream `stdin` and writes the data into the locations that are given by the `arglist` argument list."},{"content":"Each argument in the list must be a pointer to a variable of a type that corresponds to a type specifier in <ph id=\"ph1\">`format`</ph>.","pos":[2191,2308],"source":" Each argument in the list must be a pointer to a variable of a type that corresponds to a type specifier in `format`."},{"content":"If copying occurs between strings that overlap, the behavior is undefined.","pos":[2309,2383]},{"pos":[2391,2772],"content":"[!IMPORTANT]\n When you use `vscanf` to read a string, always specify a width for the `%s` format (for example, `\"%32s\"` instead of `\"%s\"`); otherwise, incorrectly formatted input can cause a buffer overrun. As an alternative, you can use [vscanf_s, vwscanf_s](../../c-runtime-library/reference/vscanf-s-vwscanf-s.md) or [fgets](../../c-runtime-library/reference/fgets-fgetws.md).","leadings":["","> "],"nodes":[{"content":" When you use `vscanf` to read a string, always specify a width for the `%s` format (for example, `\"%32s\"` instead of `\"%s\"`); otherwise, incorrectly formatted input can cause a buffer overrun. As an alternative, you can use [vscanf_s, vwscanf_s](../../c-runtime-library/reference/vscanf-s-vwscanf-s.md) or [fgets](../../c-runtime-library/reference/fgets-fgetws.md).","pos":[13,379],"nodes":[{"content":"When you use <ph id=\"ph1\">`vscanf`</ph> to read a string, always specify a width for the <ph id=\"ph2\">`%s`</ph> format (for example, <ph id=\"ph3\">`\"%32s\"`</ph> instead of <ph id=\"ph4\">`\"%s\"`</ph>); otherwise, incorrectly formatted input can cause a buffer overrun.","pos":[1,193],"source":" When you use `vscanf` to read a string, always specify a width for the `%s` format (for example, `\"%32s\"` instead of `\"%s\"`); otherwise, incorrectly formatted input can cause a buffer overrun."},{"content":"As an alternative, you can use <bpt id=\"p1\">[</bpt>vscanf_s, vwscanf_s<ept id=\"p1\">](../../c-runtime-library/reference/vscanf-s-vwscanf-s.md)</ept> or <bpt id=\"p2\">[</bpt>fgets<ept id=\"p2\">](../../c-runtime-library/reference/fgets-fgetws.md)</ept>.","pos":[194,366],"source":" As an alternative, you can use [vscanf_s, vwscanf_s](../../c-runtime-library/reference/vscanf-s-vwscanf-s.md) or [fgets](../../c-runtime-library/reference/fgets-fgetws.md)."}]}]},{"content":"<ph id=\"ph1\">`vwscanf`</ph> is a wide-character version of <ph id=\"ph2\">`vscanf`</ph>; the <ph id=\"ph3\">`format`</ph> argument to <ph id=\"ph4\">`vwscanf`</ph> is a wide-character string.","pos":[2779,2892],"source":"`vwscanf` is a wide-character version of `vscanf`; the `format` argument to `vwscanf` is a wide-character string."},{"content":"<ph id=\"ph1\">`vwscanf`</ph> and <ph id=\"ph2\">`vscanf`</ph> behave identically if the stream is opened in ANSI mode.","pos":[2893,2972],"source":"`vwscanf` and `vscanf` behave identically if the stream is opened in ANSI mode."},{"content":"<ph id=\"ph1\">`vscanf`</ph> doesn't support input from a UNICODE stream.","pos":[2973,3026],"source":"`vscanf` doesn't support input from a UNICODE stream."},{"pos":[3036,3065],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"TCHAR.H routine","pos":[3072,3087]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[3088,3116],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[3117,3130]},{"content":"_UNICODE defined","pos":[3131,3147]},{"pos":[3306,3473],"content":"For more information, see <bpt id=\"p1\">[</bpt>Format Specification Fields: scanf and wscanf Functions<ept id=\"p1\">](../../c-runtime-library/format-specification-fields-scanf-and-wscanf-functions.md)</ept>.","source":"For more information, see [Format Specification Fields: scanf and wscanf Functions](../../c-runtime-library/format-specification-fields-scanf-and-wscanf-functions.md)."},{"pos":[3482,3494],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[3501,3508]},{"content":"Required header","pos":[3509,3524]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt;","pos":[3578,3588],"source":"\\<stdio.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;","pos":[3603,3627],"source":"\\<stdio.h> or \\<wchar.h>"},{"content":"The console is not supported in <ph id=\"ph1\">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> apps.","pos":[3635,3748],"source":"The console is not supported in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps."},{"content":"The standard stream handles that are associated with the console—<ph id=\"ph1\">`stdin`</ph>, <ph id=\"ph2\">`stdout`</ph>, and <ph id=\"ph3\">`stderr`</ph>—must be redirected before C run-time functions can use them in <ph id=\"ph4\">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> apps.","pos":[3749,3990],"source":" The standard stream handles that are associated with the console—`stdin`, `stdout`, and `stderr`—must be redirected before C run-time functions can use them in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps."},{"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","pos":[3991,4095],"source":" For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[4104,4111],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5554,5579],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[5589,5679],"content":"<bpt id=\"p1\">[</bpt>System::Console::Read<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.console.read.aspx)</ept>","source":"[System::Console::Read](https://msdn.microsoft.com/en-us/library/system.console.read.aspx)"},{"pos":[5689,5787],"content":"<bpt id=\"p1\">[</bpt>System::Console::ReadLine<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.console.readline.aspx)</ept>","source":"[System::Console::ReadLine](https://msdn.microsoft.com/en-us/library/system.console.readline.aspx)"},{"pos":[5797,5922],"content":"See also <ph id=\"ph1\">`Parse`</ph> methods, such as <bpt id=\"p1\">[</bpt>System::Double::Parse<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.double.parse.aspx)</ept>.","source":"See also `Parse` methods, such as [System::Double::Parse](https://msdn.microsoft.com/en-us/library/system.double.parse.aspx)."},{"pos":[5931,5939],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Floating-Point Support<ept id=\"p1\">](../../c-runtime-library/floating-point-support.md)</ept><ph id=\"ph1\"> </ph>","pos":[5943,6019],"source":"[Floating-Point Support](../../c-runtime-library/floating-point-support.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Stream I/O<ept id=\"p1\">](../../c-runtime-library/stream-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[6022,6075],"source":" [Stream I/O](../../c-runtime-library/stream-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Locale<ept id=\"p1\">](../../c-runtime-library/locale.md)</ept><ph id=\"ph1\"> </ph>","pos":[6078,6123],"source":" [Locale](../../c-runtime-library/locale.md) "},{"content":"<bpt id=\"p1\"> [</bpt>fscanf, _fscanf_l, fwscanf, _fwscanf_l<ept id=\"p1\">](../../c-runtime-library/reference/fscanf-fscanf-l-fwscanf-fwscanf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[6126,6240],"source":" [fscanf, _fscanf_l, fwscanf, _fwscanf_l](../../c-runtime-library/reference/fscanf-fscanf-l-fwscanf-fwscanf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>printf, _printf_l, wprintf, _wprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[6243,6357],"source":" [printf, _printf_l, wprintf, _wprintf_l](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>sprintf, _sprintf_l, swprintf, _swprintf_l, <ph id=\"ph1\">\\_</ph>_swprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)</ept><ph id=\"ph2\"> </ph>","pos":[6360,6508],"source":" [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>sscanf, _sscanf_l, swscanf, _swscanf_l<ept id=\"p1\">](../../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[6511,6625],"source":" [sscanf, _sscanf_l, swscanf, _swscanf_l](../../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>vscanf_s, vwscanf_s<ept id=\"p1\">](../../c-runtime-library/reference/vscanf-s-vwscanf-s.md)</ept>","pos":[6628,6707],"source":" [vscanf_s, vwscanf_s](../../c-runtime-library/reference/vscanf-s-vwscanf-s.md)"}],"content":"---\ntitle: \"vscanf, vwscanf | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"vscanf\"\n  - \"vwscanf\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"vscanf\"\n  - \"vwscanf\"\n  - \"_vtscanf\"\ndev_langs: \n  - \"C++\"\nms.assetid: d1df595b-11bc-4682-9441-a92616301e3b\ncaps.latest.revision: 6\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# vscanf, vwscanf\nReads formatted data from the standard input stream. More secure versions of these function are available; see [vscanf_s, vwscanf_s](../../c-runtime-library/reference/vscanf-s-vwscanf-s.md).  \n  \n## Syntax  \n  \n```  \nint vscanf(  \n   const char *format,  \n   va_list arglist  \n);  \nint vwscanf(  \n   const wchar_t *format,  \n   va_list arglist  \n);  \n  \n```  \n  \n#### Parameters  \n `format`  \n Format control string.  \n  \n `arglist`  \n Variable argument list.  \n  \n## Return Value  \n Returns the number of fields that are successfully converted and assigned; the return value does not include fields that were read but not assigned. A return value of 0 indicates that no fields were assigned.  \n  \n If `format` is a `NULL` pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions return `EOF` and set `errno` to `EINVAL`.  \n  \n For information about these and other error codes, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n The `vscanf` function reads data from the standard input stream `stdin` and writes the data into the locations that are given by the `arglist` argument list. Each argument in the list must be a pointer to a variable of a type that corresponds to a type specifier in `format`. If copying occurs between strings that overlap, the behavior is undefined.  \n  \n> [!IMPORTANT]\n>  When you use `vscanf` to read a string, always specify a width for the `%s` format (for example, `\"%32s\"` instead of `\"%s\"`); otherwise, incorrectly formatted input can cause a buffer overrun. As an alternative, you can use [vscanf_s, vwscanf_s](../../c-runtime-library/reference/vscanf-s-vwscanf-s.md) or [fgets](../../c-runtime-library/reference/fgets-fgetws.md).  \n  \n `vwscanf` is a wide-character version of `vscanf`; the `format` argument to `vwscanf` is a wide-character string. `vwscanf` and `vscanf` behave identically if the stream is opened in ANSI mode. `vscanf` doesn't support input from a UNICODE stream.  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_vtscanf`|`vscanf`|`vscanf`|`vwscanf`|  \n  \n For more information, see [Format Specification Fields: scanf and wscanf Functions](../../c-runtime-library/format-specification-fields-scanf-and-wscanf-functions.md).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`vscanf`|\\<stdio.h>|  \n|`vwscanf`|\\<stdio.h> or \\<wchar.h>|  \n  \n The console is not supported in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps. The standard stream handles that are associated with the console—`stdin`, `stdout`, and `stderr`—must be redirected before C run-time functions can use them in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps. For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n// crt_vscanf.c  \n// compile with: /W3  \n// This program uses the vscanf and vwscanf functions  \n// to read formatted input.  \n  \n#include <stdio.h>  \n#include <stdarg.h>  \n  \nint call_vscanf(char *format, ...)  \n{  \n    int result;  \n    va_list arglist;  \n    va_start(arglist, format);  \n    result = vscanf(format, arglist);  \n    va_end(arglist);  \n    return result;  \n}  \n  \nint call_vwscanf(wchar_t *format, ...)  \n{  \n    int result;  \n    va_list arglist;  \n    va_start(arglist, format);  \n    result = vwscanf(format, arglist);  \n    va_end(arglist);  \n    return result;  \n}  \n  \nint main( void )  \n{  \n    int   i, result;  \n    float fp;  \n    char  c, s[81];  \n    wchar_t wc, ws[81];  \n    result = call_vscanf( \"%d %f %c %C %80s %80S\", &i, &fp, &c, &wc, s, ws );  \n    printf( \"The number of fields input is %d\\n\", result );  \n    printf( \"The contents are: %d %f %c %C %s %S\\n\", i, fp, c, wc, s, ws);  \n    result = call_vwscanf( L\"%d %f %hc %lc %80S %80ls\", &i, &fp, &c, &wc, s, ws );  \n    wprintf( L\"The number of fields input is %d\\n\", result );  \n    wprintf( L\"The contents are: %d %f %C %c %hs %s\\n\", i, fp, c, wc, s, ws);  \n}  \n  \n```  \n  \n```Output  \n  \n      71 98.6 h z Byte characters  \n36 92.3 y n Wide charactersThe number of fields input is 6  \nThe contents are: 71 98.599998 h z Byte characters  \nThe number of fields input is 6  \nThe contents are: 36 92.300003 y n Wide characters  \n```  \n  \n## .NET Framework Equivalent  \n  \n-   [System::Console::Read](https://msdn.microsoft.com/en-us/library/system.console.read.aspx)  \n  \n-   [System::Console::ReadLine](https://msdn.microsoft.com/en-us/library/system.console.readline.aspx)  \n  \n-   See also `Parse` methods, such as [System::Double::Parse](https://msdn.microsoft.com/en-us/library/system.double.parse.aspx).  \n  \n## See Also  \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [Locale](../../c-runtime-library/locale.md)   \n [fscanf, _fscanf_l, fwscanf, _fwscanf_l](../../c-runtime-library/reference/fscanf-fscanf-l-fwscanf-fwscanf-l.md)   \n [printf, _printf_l, wprintf, _wprintf_l](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)   \n [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)   \n [sscanf, _sscanf_l, swscanf, _swscanf_l](../../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md)   \n [vscanf_s, vwscanf_s](../../c-runtime-library/reference/vscanf-s-vwscanf-s.md)"}