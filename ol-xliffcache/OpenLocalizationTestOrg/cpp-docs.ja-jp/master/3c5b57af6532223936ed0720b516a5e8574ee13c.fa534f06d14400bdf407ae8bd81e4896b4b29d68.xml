{"nodes":[{"pos":[12,47],"content":"CDragListBox Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CDragListBox Class | Microsoft Docs","pos":[0,35]}]},{"pos":[711,729],"content":"CDragListBox Class","linkify":"CDragListBox Class","nodes":[{"content":"CDragListBox Class","pos":[0,18]}]},{"pos":[730,900],"content":"In addition to providing the functionality of a Windows list box, the <ph id=\"ph1\">`CDragListBox`</ph> class allows the user to move list box items, such as filenames, within the list box.","source":"In addition to providing the functionality of a Windows list box, the `CDragListBox` class allows the user to move list box items, such as filenames, within the list box."},{"pos":[909,915],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[978,985],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[995,1014],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1021,1025]},{"content":"Description","pos":[1026,1037]},{"pos":[1075,1132],"content":"<bpt id=\"p1\">[</bpt>CDragListBox::CDragListBox<ept id=\"p1\">](#cdraglistbox__cdraglistbox)</ept>","source":"[CDragListBox::CDragListBox](#cdraglistbox__cdraglistbox)"},{"pos":[1133,1168],"content":"Constructs a <ph id=\"ph1\">`CDragListBox`</ph> object.","source":"Constructs a `CDragListBox` object."},{"pos":[1179,1193],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1200,1204]},{"content":"Description","pos":[1205,1216]},{"pos":[1254,1305],"content":"<bpt id=\"p1\">[</bpt>CDragListBox::BeginDrag<ept id=\"p1\">](#cdraglistbox__begindrag)</ept>","source":"[CDragListBox::BeginDrag](#cdraglistbox__begindrag)"},{"content":"Called by the framework when a drag operation starts.","pos":[1306,1359]},{"pos":[1364,1417],"content":"<bpt id=\"p1\">[</bpt>CDragListBox::CancelDrag<ept id=\"p1\">](#cdraglistbox__canceldrag)</ept>","source":"[CDragListBox::CancelDrag](#cdraglistbox__canceldrag)"},{"content":"Called by the framework when a drag operation has been canceled.","pos":[1418,1482]},{"pos":[1487,1536],"content":"<bpt id=\"p1\">[</bpt>CDragListBox::Dragging<ept id=\"p1\">](#cdraglistbox__dragging)</ept>","source":"[CDragListBox::Dragging](#cdraglistbox__dragging)"},{"content":"Called by the framework during a drag operation.","pos":[1537,1585]},{"pos":[1590,1643],"content":"<bpt id=\"p1\">[</bpt>CDragListBox::DrawInsert<ept id=\"p1\">](#cdraglistbox__drawinsert)</ept>","source":"[CDragListBox::DrawInsert](#cdraglistbox__drawinsert)"},{"content":"Draws the insertion guide of the drag list box.","pos":[1644,1691]},{"pos":[1696,1743],"content":"<bpt id=\"p1\">[</bpt>CDragListBox::Dropped<ept id=\"p1\">](#cdraglistbox__dropped)</ept>","source":"[CDragListBox::Dropped](#cdraglistbox__dropped)"},{"content":"Called by the framework after the item has been dropped.","pos":[1744,1800]},{"pos":[1805,1858],"content":"<bpt id=\"p1\">[</bpt>CDragListBox::ItemFromPt<ept id=\"p1\">](#cdraglistbox__itemfrompt)</ept>","source":"[CDragListBox::ItemFromPt](#cdraglistbox__itemfrompt)"},{"content":"Returns the coordinates of the item being dragged.","pos":[1859,1909]},{"pos":[1919,1926],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"List boxes with this capability allow users to order the items in a list in whatever manner is most useful to them.","pos":[1930,2045]},{"content":"By default, the list box will move the item to the new location in the list.","pos":[2046,2122]},{"content":"However, <ph id=\"ph1\">`CDragListBox`</ph> objects can be customized to copy items instead of moving them.","pos":[2123,2210],"source":" However, `CDragListBox` objects can be customized to copy items instead of moving them."},{"content":"The list box control associated with the <ph id=\"ph1\">`CDragListBox`</ph> class must not have the <bpt id=\"p1\">**</bpt>LBS_SORT<ept id=\"p1\">**</ept> or the <bpt id=\"p2\">**</bpt>LBS_MULTIPLESELECT<ept id=\"p2\">**</ept> style.","pos":[2217,2346],"source":"The list box control associated with the `CDragListBox` class must not have the **LBS_SORT** or the **LBS_MULTIPLESELECT** style."},{"content":"For a description of list box styles, see <bpt id=\"p1\">[</bpt>List-Box Styles<ept id=\"p1\">](../../mfc/reference/list-box-styles.md)</ept>.","pos":[2347,2447],"source":" For a description of list box styles, see [List-Box Styles](../../mfc/reference/list-box-styles.md)."},{"pos":[2454,2748],"content":"To use a drag list box in an existing dialog box of your application, add a list box control to your dialog template using the dialog editor and then assign a member variable (of Category <ph id=\"ph1\">`Control`</ph> and Variable Type <ph id=\"ph2\">`CDragListBox`</ph>) corresponding to the list box control in your dialog template.","source":"To use a drag list box in an existing dialog box of your application, add a list box control to your dialog template using the dialog editor and then assign a member variable (of Category `Control` and Variable Type `CDragListBox`) corresponding to the list box control in your dialog template."},{"pos":[2755,2944],"content":"For more information on assigning controls to member variables, see <bpt id=\"p1\">[</bpt>Shortcut for Defining Member Variables for Dialog Controls<ept id=\"p1\">](../../mfc/defining-member-variables-for-dialog-controls.md)</ept>.","source":"For more information on assigning controls to member variables, see [Shortcut for Defining Member Variables for Dialog Controls](../../mfc/defining-member-variables-for-dialog-controls.md)."},{"pos":[2953,2974],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[2978,3025],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[3032,3085],"content":"<bpt id=\"p1\">[</bpt>CCmdTarget<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept>","source":"[CCmdTarget](../../mfc/reference/ccmdtarget-class.md)"},{"pos":[3092,3133],"content":"<bpt id=\"p1\">[</bpt>CWnd<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept>","source":"[CWnd](../../mfc/reference/cwnd-class.md)"},{"pos":[3140,3189],"content":"<bpt id=\"p1\">[</bpt>CListBox<ept id=\"p1\">](../../mfc/reference/clistbox-class.md)</ept>","source":"[CListBox](../../mfc/reference/clistbox-class.md)"},{"pos":[3219,3231],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3235,3255],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxcmn.h","source":"**Header:** afxcmn.h"},{"pos":[3265,3328],"content":"<bpt id=\"p1\">&lt;a name=\"cdraglistbox__begindrag\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDragListBox::BeginDrag","linkify":"<a name=\"cdraglistbox__begindrag\"></a>  CDragListBox::BeginDrag","source":"<a name=\"cdraglistbox__begindrag\"></a>  CDragListBox::BeginDrag"},{"content":"Called by the framework when an event occurs that could begin a drag operation, such as pressing the left mouse button.","pos":[3332,3451]},{"pos":[3511,3521],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">[</bpt>CPoint<ept id=\"p1\">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object that contains the coordinates of the item being dragged.","pos":[3533,3655],"source":" A [CPoint](../../atl-mfc-shared/reference/cpoint-class.md) object that contains the coordinates of the item being dragged."},{"pos":[3665,3677],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if dragging is allowed, otherwise 0.","pos":[3681,3725]},{"pos":[3735,3742],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this function if you want to control what happens when a drag operation begins.","pos":[3746,3834]},{"content":"The default implementation captures the mouse and stays in drag mode until the user clicks the left or right mouse button or presses ESC, at which time the drag operation is canceled.","pos":[3835,4018]},{"pos":[4028,4093],"content":"<bpt id=\"p1\">&lt;a name=\"cdraglistbox__canceldrag\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDragListBox::CancelDrag","linkify":"<a name=\"cdraglistbox__canceldrag\"></a>  CDragListBox::CancelDrag","source":"<a name=\"cdraglistbox__canceldrag\"></a>  CDragListBox::CancelDrag"},{"content":"Called by the framework when a drag operation has been canceled.","pos":[4097,4161]},{"pos":[4222,4232],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">[</bpt>CPoint<ept id=\"p1\">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object that contains the coordinates of the item being dragged.","pos":[4244,4366],"source":" A [CPoint](../../atl-mfc-shared/reference/cpoint-class.md) object that contains the coordinates of the item being dragged."},{"pos":[4376,4383],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this function to handle any special processing for your list box control.","pos":[4387,4469]},{"pos":[4479,4548],"content":"<bpt id=\"p1\">&lt;a name=\"cdraglistbox__cdraglistbox\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDragListBox::CDragListBox","linkify":"<a name=\"cdraglistbox__cdraglistbox\"></a>  CDragListBox::CDragListBox","source":"<a name=\"cdraglistbox__cdraglistbox\"></a>  CDragListBox::CDragListBox"},{"pos":[4552,4587],"content":"Constructs a <ph id=\"ph1\">`CDragListBox`</ph> object.","source":"Constructs a `CDragListBox` object."},{"pos":[4628,4689],"content":"<bpt id=\"p1\">&lt;a name=\"cdraglistbox__dragging\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDragListBox::Dragging","linkify":"<a name=\"cdraglistbox__dragging\"></a>  CDragListBox::Dragging","source":"<a name=\"cdraglistbox__dragging\"></a>  CDragListBox::Dragging"},{"pos":[4693,4788],"content":"Called by the framework when a list box item is being dragged within the <ph id=\"ph1\">`CDragListBox`</ph> object.","source":"Called by the framework when a list box item is being dragged within the `CDragListBox` object."},{"pos":[4847,4857],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">[</bpt>CPoint<ept id=\"p1\">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object that contains the x and y screen coordinates of the cursor.","pos":[4869,4994],"source":" A [CPoint](../../atl-mfc-shared/reference/cpoint-class.md) object that contains the x and y screen coordinates of the cursor."},{"pos":[5004,5016],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The resource ID of the cursor to be displayed.","pos":[5020,5066]},{"content":"The following values are possible:","pos":[5067,5101]},{"pos":[5109,5164],"content":"<ph id=\"ph1\">`DL_COPYCURSOR`</ph> Indicates that the item will be copied.","source":"`DL_COPYCURSOR` Indicates that the item will be copied."},{"pos":[5172,5226],"content":"<ph id=\"ph1\">`DL_MOVECURSOR`</ph> Indicates that the item will be moved.","source":"`DL_MOVECURSOR` Indicates that the item will be moved."},{"pos":[5234,5307],"content":"<ph id=\"ph1\">`DL_STOPCURSOR`</ph> Indicates that the current drop target is not acceptable.","source":"`DL_STOPCURSOR` Indicates that the current drop target is not acceptable."},{"pos":[5317,5324],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default behavior returns <ph id=\"ph1\">`DL_MOVECURSOR`</ph>.","pos":[5328,5373],"source":"The default behavior returns `DL_MOVECURSOR`."},{"content":"Override this function if you want to provide additional functionality.","pos":[5374,5445]},{"pos":[5455,5520],"content":"<bpt id=\"p1\">&lt;a name=\"cdraglistbox__drawinsert\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDragListBox::DrawInsert","linkify":"<a name=\"cdraglistbox__drawinsert\"></a>  CDragListBox::DrawInsert","source":"<a name=\"cdraglistbox__drawinsert\"></a>  CDragListBox::DrawInsert"},{"content":"Called by the framework to draw the insertion guide before the item with the indicated index.","pos":[5524,5617]},{"pos":[5678,5688],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Zero-based index of the insertion point.","pos":[5703,5743]},{"pos":[5753,5760],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A value of - 1 clears the insertion guide.","pos":[5764,5806]},{"content":"Override this function to modify the appearance or behavior of the insertion guide.","pos":[5807,5890]},{"pos":[5900,5959],"content":"<bpt id=\"p1\">&lt;a name=\"cdraglistbox__dropped\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDragListBox::Dropped","linkify":"<a name=\"cdraglistbox__dropped\"></a>  CDragListBox::Dropped","source":"<a name=\"cdraglistbox__dropped\"></a>  CDragListBox::Dropped"},{"pos":[5963,6042],"content":"Called by the framework when an item is dropped within a <ph id=\"ph1\">`CDragListBox`</ph> object.","source":"Called by the framework when an item is dropped within a `CDragListBox` object."},{"pos":[6126,6136],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>nSrcIndex<ept id=\"p1\">*</ept>","pos":[6140,6151],"source":"*nSrcIndex*"},{"content":"Specifies the zero-based index of the dropped string.","pos":[6155,6208]},{"content":"A <bpt id=\"p1\">[</bpt>CPoint<ept id=\"p1\">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object that contains the coordinates of the drop site.","pos":[6223,6336],"source":" A [CPoint](../../atl-mfc-shared/reference/cpoint-class.md) object that contains the coordinates of the drop site."},{"pos":[6346,6353],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default behavior copies the list box item and its data to the new location and then deletes the original item.","pos":[6357,6471]},{"content":"Override this function to customize the default behavior, such as enabling copies of list box items to be dragged to other locations within the list.","pos":[6472,6621]},{"pos":[6631,6696],"content":"<bpt id=\"p1\">&lt;a name=\"cdraglistbox__itemfrompt\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDragListBox::ItemFromPt","linkify":"<a name=\"cdraglistbox__itemfrompt\"></a>  CDragListBox::ItemFromPt","source":"<a name=\"cdraglistbox__itemfrompt\"></a>  CDragListBox::ItemFromPt"},{"pos":[6700,6789],"content":"Call this function to retrieve the zero-based index of the list box item located at <ph id=\"ph1\">`pt`</ph>.","source":"Call this function to retrieve the zero-based index of the list box item located at `pt`."},{"pos":[6886,6896],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">[</bpt>CPoint<ept id=\"p1\">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object containing the coordinates of a point within the list box.","pos":[6908,7032],"source":" A [CPoint](../../atl-mfc-shared/reference/cpoint-class.md) object containing the coordinates of a point within the list box."},{"content":"<bpt id=\"p1\">*</bpt>bAutoScroll<ept id=\"p1\">*</ept>","pos":[7039,7052],"source":"*bAutoScroll*"},{"content":"Nonzero if scrolling is allowed, otherwise 0.","pos":[7056,7101]},{"pos":[7111,7123],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Zero-based index of the drag list box item.","pos":[7127,7170]},{"pos":[7179,7187],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>MFC Sample TSTCON<ept id=\"p1\">](../../visual-cpp-samples.md)</ept><ph id=\"ph1\"> </ph>","pos":[7191,7240],"source":"[MFC Sample TSTCON](../../visual-cpp-samples.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CListBox Class<ept id=\"p1\">](../../mfc/reference/clistbox-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[7243,7300],"source":" [CListBox Class](../../mfc/reference/clistbox-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[7303,7352],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CListBox Class<ept id=\"p1\">](../../mfc/reference/clistbox-class.md)</ept>","pos":[7355,7411],"source":" [CListBox Class](../../mfc/reference/clistbox-class.md)"}],"content":"---\ntitle: \"CDragListBox Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CDragListBox\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"drag list box [C++]\"\n  - \"dragging list items\"\n  - \"CDragListBox class\"\n  - \"Windows [C++], list boxes\"\n  - \"list boxes\"\nms.assetid: fee20b42-60ae-4aa9-83f9-5a3d9b96e33b\ncaps.latest.revision: 24\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CDragListBox Class\nIn addition to providing the functionality of a Windows list box, the `CDragListBox` class allows the user to move list box items, such as filenames, within the list box.  \n  \n## Syntax  \n  \n```  \nclass CDragListBox : public CListBox  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CDragListBox::CDragListBox](#cdraglistbox__cdraglistbox)|Constructs a `CDragListBox` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CDragListBox::BeginDrag](#cdraglistbox__begindrag)|Called by the framework when a drag operation starts.|  \n|[CDragListBox::CancelDrag](#cdraglistbox__canceldrag)|Called by the framework when a drag operation has been canceled.|  \n|[CDragListBox::Dragging](#cdraglistbox__dragging)|Called by the framework during a drag operation.|  \n|[CDragListBox::DrawInsert](#cdraglistbox__drawinsert)|Draws the insertion guide of the drag list box.|  \n|[CDragListBox::Dropped](#cdraglistbox__dropped)|Called by the framework after the item has been dropped.|  \n|[CDragListBox::ItemFromPt](#cdraglistbox__itemfrompt)|Returns the coordinates of the item being dragged.|  \n  \n## Remarks  \n List boxes with this capability allow users to order the items in a list in whatever manner is most useful to them. By default, the list box will move the item to the new location in the list. However, `CDragListBox` objects can be customized to copy items instead of moving them.  \n  \n The list box control associated with the `CDragListBox` class must not have the **LBS_SORT** or the **LBS_MULTIPLESELECT** style. For a description of list box styles, see [List-Box Styles](../../mfc/reference/list-box-styles.md).  \n  \n To use a drag list box in an existing dialog box of your application, add a list box control to your dialog template using the dialog editor and then assign a member variable (of Category `Control` and Variable Type `CDragListBox`) corresponding to the list box control in your dialog template.  \n  \n For more information on assigning controls to member variables, see [Shortcut for Defining Member Variables for Dialog Controls](../../mfc/defining-member-variables-for-dialog-controls.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n [CListBox](../../mfc/reference/clistbox-class.md)  \n  \n `CDragListBox`  \n  \n## Requirements  \n **Header:** afxcmn.h  \n  \n##  <a name=\"cdraglistbox__begindrag\"></a>  CDragListBox::BeginDrag  \n Called by the framework when an event occurs that could begin a drag operation, such as pressing the left mouse button.  \n  \n```  \nvirtual BOOL BeginDrag(CPoint pt);\n```  \n  \n### Parameters  \n `pt`  \n A [CPoint](../../atl-mfc-shared/reference/cpoint-class.md) object that contains the coordinates of the item being dragged.  \n  \n### Return Value  \n Nonzero if dragging is allowed, otherwise 0.  \n  \n### Remarks  \n Override this function if you want to control what happens when a drag operation begins. The default implementation captures the mouse and stays in drag mode until the user clicks the left or right mouse button or presses ESC, at which time the drag operation is canceled.  \n  \n##  <a name=\"cdraglistbox__canceldrag\"></a>  CDragListBox::CancelDrag  \n Called by the framework when a drag operation has been canceled.  \n  \n```  \nvirtual void CancelDrag(CPoint pt);\n```  \n  \n### Parameters  \n `pt`  \n A [CPoint](../../atl-mfc-shared/reference/cpoint-class.md) object that contains the coordinates of the item being dragged.  \n  \n### Remarks  \n Override this function to handle any special processing for your list box control.  \n  \n##  <a name=\"cdraglistbox__cdraglistbox\"></a>  CDragListBox::CDragListBox  \n Constructs a `CDragListBox` object.  \n  \n```  \nCDragListBox();\n```  \n  \n##  <a name=\"cdraglistbox__dragging\"></a>  CDragListBox::Dragging  \n Called by the framework when a list box item is being dragged within the `CDragListBox` object.  \n  \n```  \nvirtual UINT Dragging(CPoint pt);\n```  \n  \n### Parameters  \n `pt`  \n A [CPoint](../../atl-mfc-shared/reference/cpoint-class.md) object that contains the x and y screen coordinates of the cursor.  \n  \n### Return Value  \n The resource ID of the cursor to be displayed. The following values are possible:  \n  \n- `DL_COPYCURSOR` Indicates that the item will be copied.  \n  \n- `DL_MOVECURSOR` Indicates that the item will be moved.  \n  \n- `DL_STOPCURSOR` Indicates that the current drop target is not acceptable.  \n  \n### Remarks  \n The default behavior returns `DL_MOVECURSOR`. Override this function if you want to provide additional functionality.  \n  \n##  <a name=\"cdraglistbox__drawinsert\"></a>  CDragListBox::DrawInsert  \n Called by the framework to draw the insertion guide before the item with the indicated index.  \n  \n```  \nvirtual void DrawInsert(int nItem);\n```  \n  \n### Parameters  \n `nItem`  \n Zero-based index of the insertion point.  \n  \n### Remarks  \n A value of - 1 clears the insertion guide. Override this function to modify the appearance or behavior of the insertion guide.  \n  \n##  <a name=\"cdraglistbox__dropped\"></a>  CDragListBox::Dropped  \n Called by the framework when an item is dropped within a `CDragListBox` object.  \n  \n```  \nvirtual void Dropped(\n    int nSrcIndex,  \n    CPoint pt);\n```  \n  \n### Parameters  \n *nSrcIndex*  \n Specifies the zero-based index of the dropped string.  \n  \n `pt`  \n A [CPoint](../../atl-mfc-shared/reference/cpoint-class.md) object that contains the coordinates of the drop site.  \n  \n### Remarks  \n The default behavior copies the list box item and its data to the new location and then deletes the original item. Override this function to customize the default behavior, such as enabling copies of list box items to be dragged to other locations within the list.  \n  \n##  <a name=\"cdraglistbox__itemfrompt\"></a>  CDragListBox::ItemFromPt  \n Call this function to retrieve the zero-based index of the list box item located at `pt`.  \n  \n```  \nint ItemFromPt(\n    CPoint pt,  \n    BOOL bAutoScroll = TRUE) const;\n\n \n```  \n  \n### Parameters  \n `pt`  \n A [CPoint](../../atl-mfc-shared/reference/cpoint-class.md) object containing the coordinates of a point within the list box.  \n  \n *bAutoScroll*  \n Nonzero if scrolling is allowed, otherwise 0.  \n  \n### Return Value  \n Zero-based index of the drag list box item.  \n  \n## See Also  \n [MFC Sample TSTCON](../../visual-cpp-samples.md)   \n [CListBox Class](../../mfc/reference/clistbox-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CListBox Class](../../mfc/reference/clistbox-class.md)\n"}