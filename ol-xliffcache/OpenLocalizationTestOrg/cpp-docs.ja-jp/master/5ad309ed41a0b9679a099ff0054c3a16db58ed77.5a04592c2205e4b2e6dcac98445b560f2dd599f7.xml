{"nodes":[{"pos":[12,63],"content":"CDynamicAccessor::SetBlobSizeLimit | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CDynamicAccessor::SetBlobSizeLimit | Microsoft Docs","pos":[0,51]}]},{"content":"CDynamicAccessor::SetBlobSizeLimit","pos":[803,837]},{"content":"Sets the maximum BLOB size in bytes.","pos":[838,874]},{"content":"Syntax","pos":[883,889]},{"content":"Parameters","pos":[979,989]},{"content":"Specifies the BLOB size limit.","pos":[1008,1038]},{"content":"Remarks","pos":[1047,1054]},{"content":"Sets the maximum BLOB size in bytes; column data larger than this value is treated as a BLOB.","pos":[1058,1151]},{"content":"Some providers give extremely large sizes for columns (such as 2 GB).","pos":[1152,1221]},{"content":"Rather than attempting to allocate memory for a column this size, you would typically try to bind these columns as BLOBs.","pos":[1222,1343]},{"content":"In that way you don't have to allocate all the memory, but you can still read all the data without fear of truncation.","pos":[1344,1462]},{"content":"However, there are some cases in which you might want to force <ph id=\"ph1\">`CDynamicAccessor`</ph> to bind large columns in their native data types.","pos":[1463,1594],"source":" However, there are some cases in which you might want to force `CDynamicAccessor` to bind large columns in their native data types."},{"content":"To do this, call <ph id=\"ph1\">`SetBlobSizeLimit`</ph> before calling <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept>.","pos":[1595,1655],"source":" To do this, call `SetBlobSizeLimit` before calling **Open**."},{"pos":[1662,1809],"content":"The constructor method <bpt id=\"p1\">[</bpt>CDynamicAccessor<ept id=\"p1\">](../../data/oledb/cdynamicaccessor-class.md)</ept> sets the maximum BLOB size to a default value of 8,000 bytes.","source":"The constructor method [CDynamicAccessor](../../data/oledb/cdynamicaccessor-class.md) sets the maximum BLOB size to a default value of 8,000 bytes."},{"content":"Requirements","pos":[1818,1830]},{"pos":[1834,1856],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atldbcli.h","source":"**Header:** atldbcli.h"},{"content":"See Also","pos":[1865,1873]},{"content":"CDynamicAccessor Class","pos":[1878,1900]}],"content":"---\ntitle: \"CDynamicAccessor::SetBlobSizeLimit | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"CDynamicAccessor::SetBlobSizeLimit\"\n  - \"SetBlobSizeLimit\"\n  - \"CDynamicAccessor.SetBlobSizeLimit\"\n  - \"ATL.CDynamicAccessor.SetBlobSizeLimit\"\n  - \"ATL::CDynamicAccessor::SetBlobSizeLimit\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"SetBlobSizeLimit method\"\nms.assetid: fb8cb85d-f841-408e-a344-37895b10993f\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CDynamicAccessor::SetBlobSizeLimit\nSets the maximum BLOB size in bytes.  \n  \n## Syntax  \n  \n```  \n  \n      void SetBlobSizeLimit(  \n   DBLENGTH nBlobSize   \n);  \n```  \n  \n#### Parameters  \n `nBlobSize`  \n Specifies the BLOB size limit.  \n  \n## Remarks  \n Sets the maximum BLOB size in bytes; column data larger than this value is treated as a BLOB. Some providers give extremely large sizes for columns (such as 2 GB). Rather than attempting to allocate memory for a column this size, you would typically try to bind these columns as BLOBs. In that way you don't have to allocate all the memory, but you can still read all the data without fear of truncation. However, there are some cases in which you might want to force `CDynamicAccessor` to bind large columns in their native data types. To do this, call `SetBlobSizeLimit` before calling **Open**.  \n  \n The constructor method [CDynamicAccessor](../../data/oledb/cdynamicaccessor-class.md) sets the maximum BLOB size to a default value of 8,000 bytes.  \n  \n## Requirements  \n **Header:** atldbcli.h  \n  \n## See Also  \n [CDynamicAccessor Class](../../data/oledb/cdynamicaccessor-class.md)"}