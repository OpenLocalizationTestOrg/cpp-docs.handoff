{"nodes":[{"pos":[12,43],"content":"_aligned_msize | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_aligned_msize | Microsoft Docs","pos":[0,31]}]},{"content":"_aligned_msize","pos":[972,986]},{"content":"Returns the size of a memory block allocated in the heap.","pos":[987,1044]},{"content":"Syntax","pos":[1053,1059]},{"content":"Parameters","pos":[1170,1180]},{"content":"[in]","pos":[1184,1188]},{"content":"Pointer to the memory block.","pos":[1203,1231]},{"content":"[in]","pos":[1238,1242]},{"content":"The alignment value, which must be an integer power of 2.","pos":[1258,1315]},{"content":"[in]","pos":[1322,1326]},{"content":"The offset into the memory allocation to force the alignment.","pos":[1339,1400]},{"content":"Return Value","pos":[1409,1421]},{"content":"Returns the size (in bytes) as an unsigned integer.","pos":[1425,1476]},{"content":"Remarks","pos":[1485,1492]},{"content":"The <ph id=\"ph1\">`_aligned_msize`</ph> function returns the size, in bytes, of the memory block allocated by a call to <bpt id=\"p1\">[</bpt>_aligned_malloc<ept id=\"p1\">](../../c-runtime-library/reference/aligned-malloc.md)</ept> or <bpt id=\"p2\">[</bpt>_aligned_realloc<ept id=\"p2\">](../../c-runtime-library/reference/aligned-realloc.md)</ept>.","pos":[1496,1744],"source":"The `_aligned_msize` function returns the size, in bytes, of the memory block allocated by a call to [_aligned_malloc](../../c-runtime-library/reference/aligned-malloc.md) or [_aligned_realloc](../../c-runtime-library/reference/aligned-realloc.md)."},{"content":"The <ph id=\"ph1\">`alignment`</ph> and <ph id=\"ph2\">`offset`</ph> values must be the same as the values passed to the function that allocated the block.","pos":[1745,1860],"source":" The `alignment` and `offset` values must be the same as the values passed to the function that allocated the block."},{"content":"When the application is linked with a debug version of the C run-time libraries, <ph id=\"ph1\">`_aligned_msize`</ph> resolves to <bpt id=\"p1\">[</bpt>_aligned_msize_dbg<ept id=\"p1\">](../../c-runtime-library/reference/aligned-msize-dbg.md)</ept>.","pos":[1867,2054],"source":"When the application is linked with a debug version of the C run-time libraries, `_aligned_msize` resolves to [_aligned_msize_dbg](../../c-runtime-library/reference/aligned-msize-dbg.md)."},{"content":"For more information about how the heap is managed during the debugging process, see <bpt id=\"p1\">[</bpt>The CRT Debug Heap<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[2055,2208],"source":" For more information about how the heap is managed during the debugging process, see [The CRT Debug Heap](/visualstudio/debugger/crt-debug-heap-details)."},{"content":"This function validates its parameter.","pos":[2215,2253]},{"content":"If <ph id=\"ph1\">`memblock`</ph> is a null pointer or <ph id=\"ph2\">`alignment`</ph> is not a power of 2, <ph id=\"ph3\">`_msize`</ph> invokes an invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2254,2457],"source":" If `memblock` is a null pointer or `alignment` is not a power of 2, `_msize` invokes an invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If the error is handled, the function sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and returns -1.","pos":[2458,2536],"source":" If the error is handled, the function sets `errno` to `EINVAL` and returns -1."},{"content":"Requirements","pos":[2545,2557]},{"content":"Routine","pos":[2564,2571]},{"content":"Required header","pos":[2572,2587]},{"content":"malloc.h&gt;","pos":[2643,2652],"source":"malloc.h>"},{"pos":[2660,2778],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Libraries","pos":[2787,2796]},{"pos":[2800,2892],"content":"All versions of the <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept>.","source":"All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md)."},{"content":".NET Framework Equivalent","pos":[2901,2926]},{"content":"Not applicable.","pos":[2930,2945]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[2946,2993],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[2994,3119],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[3128,3136]},{"content":"Memory Allocation","pos":[3141,3158]}],"content":"---\ntitle: \"_aligned_msize | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_aligned_msize\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-heap-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_aligned_msize\"\n  - \"aligned_msize\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"aligned_msize function\"\n  - \"_aligned_msize function\"\nms.assetid: 10995edc-2110-4212-9ca9-5e0220a464f4\ncaps.latest.revision: 6\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _aligned_msize\nReturns the size of a memory block allocated in the heap.  \n  \n## Syntax  \n  \n```  \nsize_t _msize(  \n   void *memblock,  \n   size_t alignment,  \n   size_t offset  \n);  \n```  \n  \n#### Parameters  \n [in] `memblock`  \n Pointer to the memory block.  \n  \n [in] `alignment`  \n The alignment value, which must be an integer power of 2.  \n  \n [in] `offset`  \n The offset into the memory allocation to force the alignment.  \n  \n## Return Value  \n Returns the size (in bytes) as an unsigned integer.  \n  \n## Remarks  \n The `_aligned_msize` function returns the size, in bytes, of the memory block allocated by a call to [_aligned_malloc](../../c-runtime-library/reference/aligned-malloc.md) or [_aligned_realloc](../../c-runtime-library/reference/aligned-realloc.md). The `alignment` and `offset` values must be the same as the values passed to the function that allocated the block.  \n  \n When the application is linked with a debug version of the C run-time libraries, `_aligned_msize` resolves to [_aligned_msize_dbg](../../c-runtime-library/reference/aligned-msize-dbg.md). For more information about how the heap is managed during the debugging process, see [The CRT Debug Heap](/visualstudio/debugger/crt-debug-heap-details).  \n  \n This function validates its parameter. If `memblock` is a null pointer or `alignment` is not a power of 2, `_msize` invokes an invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If the error is handled, the function sets `errno` to `EINVAL` and returns -1.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_msize`|\\<malloc.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Libraries  \n All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md).  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Memory Allocation](../../c-runtime-library/memory-allocation.md)"}