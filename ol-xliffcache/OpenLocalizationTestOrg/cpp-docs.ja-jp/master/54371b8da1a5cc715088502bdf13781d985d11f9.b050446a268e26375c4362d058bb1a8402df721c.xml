{"nodes":[{"pos":[12,44],"content":"merge (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"merge (STL-CLR) | Microsoft Docs","pos":[0,32]}]},{"content":"merge (STL/CLR)","pos":[613,628]},{"content":"Combines all the elements from two sorted source ranges into a single, sorted destination range, where the ordering criterion may be specified by a binary predicate.","pos":[629,794]},{"content":"Syntax","pos":[803,809]},{"content":"Remarks","pos":[1187,1194]},{"content":"This function behaves the same as the STL function <ph id=\"ph1\">`merge`</ph>.","pos":[1198,1257],"source":"This function behaves the same as the STL function `merge`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>merge<ept id=\"p1\">](http://msdn.microsoft.com/Library/f5181f62-4d2f-485f-90c6-6ae92e7bf4d7)</ept>.","pos":[1258,1364],"source":" For more information, see [merge](http://msdn.microsoft.com/Library/f5181f62-4d2f-485f-90c6-6ae92e7bf4d7)."},{"content":"Requirements","pos":[1373,1385]},{"pos":[1389,1420],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/algorithm&gt;","source":"**Header:** \\<cliext/algorithm>"},{"pos":[1427,1448],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[1457,1465]},{"content":"algorithm (STL/CLR)","pos":[1470,1489]}],"content":"---\ntitle: \"merge (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::merge\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"merge function [STL/CLR]\"\nms.assetid: e42d3396-63a4-438a-964d-83e90405102e\ncaps.latest.revision: 4\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# merge (STL/CLR)\nCombines all the elements from two sorted source ranges into a single, sorted destination range, where the ordering criterion may be specified by a binary predicate.  \n  \n## Syntax  \n  \n```  \ntemplate<class _InIt1, class _InIt2, class _OutIt> inline  \n    _OutIt merge(_InIt1 _First1, _InIt1 _Last1,  \n        _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest);  \ntemplate<class _InIt1, class _InIt2, class _OutIt, class _Pr> inline  \n    _OutIt merge(_InIt1 _First1, _InIt1 _Last1,  \n        _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred);  \n```  \n  \n## Remarks  \n This function behaves the same as the STL function `merge`. For more information, see [merge](http://msdn.microsoft.com/Library/f5181f62-4d2f-485f-90c6-6ae92e7bf4d7).  \n  \n## Requirements  \n **Header:** \\<cliext/algorithm>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [algorithm (STL/CLR)](../dotnet/algorithm-stl-clr.md)"}