{"nodes":[{"pos":[12,85],"content":"_scprintf_p, _scprintf_p_l, _scwprintf_p, _scwprintf_p_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_scprintf_p, _scprintf_p_l, _scwprintf_p, _scwprintf_p_l | Microsoft Docs","pos":[0,73]}]},{"content":"_scprintf_p, _scprintf_p_l, _scwprintf_p, _scwprintf_p_l","pos":[1472,1528]},{"content":"Returns the number of characters in the formatted string, with the ability to specify the order in which parameters are used in the format string.","pos":[1529,1675]},{"content":"Syntax","pos":[1684,1690]},{"content":"Parameters","pos":[2058,2068]},{"content":"Format-control string.","pos":[2084,2106]},{"content":"Optional arguments.","pos":[2127,2146]},{"content":"The locale to use.","pos":[2165,2183]},{"content":"Return Value","pos":[2192,2204]},{"content":"Returns the number of characters that would be generated if the string were to be printed or sent to a file or buffer using the specified formatting codes.","pos":[2208,2363]},{"content":"The value returned does not include the terminating null character.","pos":[2364,2431]},{"content":"performs the same function for wide characters.","pos":[2447,2494]},{"content":"The difference between <ph id=\"ph1\">`_scprintf_p`</ph> and <ph id=\"ph2\">`_scprintf`</ph> is that <ph id=\"ph3\">`_scprintf_p`</ph> supports positional parameters, which allows specifying the order in which the arguments are used in the format string.","pos":[2501,2695],"source":"The difference between `_scprintf_p` and `_scprintf` is that `_scprintf_p` supports positional parameters, which allows specifying the order in which the arguments are used in the format string."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>printf_p Positional Parameters<ept id=\"p1\">](../../c-runtime-library/printf-p-positional-parameters.md)</ept>.","pos":[2696,2814],"source":" For more information, see [printf_p Positional Parameters](../../c-runtime-library/printf-p-positional-parameters.md)."},{"content":"If <ph id=\"ph1\">`format`</ph> is a <ph id=\"ph2\">`NULL`</ph> pointer, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2821,2984],"source":"If `format` is a `NULL` pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions return -1 and set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[2985,3076],"source":" If execution is allowed to continue, these functions return -1 and set `errno` to `EINVAL`."},{"pos":[3083,3254],"content":"For information about these and other error codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For information about these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"Remarks","pos":[3263,3270]},{"content":"Each <ph id=\"ph1\">`argument`</ph> (if any) is converted according to the corresponding format specification in <ph id=\"ph2\">`format`</ph>.","pos":[3274,3376],"source":"Each `argument` (if any) is converted according to the corresponding format specification in `format`."},{"content":"The format consists of ordinary characters and has the same form and function as the <ph id=\"ph1\">`format`</ph> argument for <bpt id=\"p1\">[</bpt>printf<ept id=\"p1\">](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)</ept>.","pos":[3377,3565],"source":" The format consists of ordinary characters and has the same form and function as the `format` argument for [printf](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)."},{"pos":[3572,3728],"content":"The versions of these functions with the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current thread locale.","source":"The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale."},{"pos":[3736,3802],"content":"[!IMPORTANT]\n Ensure that `format` is not a user-defined string.","leadings":["","> "],"nodes":[{"content":"Ensure that <ph id=\"ph1\">`format`</ph> is not a user-defined string.","pos":[14,64],"source":" Ensure that `format` is not a user-defined string."}]},{"content":"Generic-Text Routine Mappings","pos":[3812,3841]},{"content":"Tchar.h routine","pos":[3848,3863]},{"content":"_UNICODE and _MBCS not defined","pos":[3864,3894]},{"content":"_MBCS defined","pos":[3895,3908]},{"content":"_UNICODE defined","pos":[3909,3925]},{"content":"Requirements","pos":[4177,4189]},{"content":"Routine","pos":[4196,4203]},{"content":"Required header","pos":[4204,4219]},{"pos":[4277,4278],"content":","},{"content":"stdio.h&gt;","pos":[4297,4305],"source":"stdio.h>"},{"pos":[4324,4325],"content":","},{"content":"stdio.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[4345,4367],"source":"stdio.h> or \\<wchar.h>"},{"pos":[4375,4493],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"See Also","pos":[4502,4510]},{"content":"Stream I/O","pos":[4515,4525]},{"content":"_scprintf, _scprintf_l, _scwprintf, _scwprintf_l","pos":[4571,4619]},{"content":"_printf_p, _printf_p_l, _wprintf_p, _wprintf_p_l","pos":[4706,4754]}],"content":"---\ntitle: \"_scprintf_p, _scprintf_p_l, _scwprintf_p, _scwprintf_p_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_scwprintf_p\"\n  - \"_scprintf_p_l\"\n  - \"_scwprintf_p_l\"\n  - \"_scprintf_p\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_scwprintf_p_l\"\n  - \"_sctprintf_p\"\n  - \"scprintf_p_l\"\n  - \"scprintf_p\"\n  - \"_sctprintf_p_l\"\n  - \"scwprintf_p\"\n  - \"_scprintf_p_l\"\n  - \"scwprintf_p_l\"\n  - \"_scprintf_p\"\n  - \"_scwprintf_p\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"sctprintf_p_l function\"\n  - \"_scwprintf_p_l function\"\n  - \"scprintf_p_l function\"\n  - \"_scprintf_p function\"\n  - \"_scprintf_p_l function\"\n  - \"scprintf_p function\"\n  - \"sctprintf_p function\"\n  - \"_scwprintf_p function\"\n  - \"_sctprintf_p function\"\n  - \"scwprintf_p function\"\n  - \"scwprintf_p_l function\"\n  - \"_sctprintf_p_l function\"\nms.assetid: 8390d1e1-2826-47a4-851f-6635a88087cc\ncaps.latest.revision: 8\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _scprintf_p, _scprintf_p_l, _scwprintf_p, _scwprintf_p_l\nReturns the number of characters in the formatted string, with the ability to specify the order in which parameters are used in the format string.  \n  \n## Syntax  \n  \n```  \nint _scprintf_p(  \n   const char *format [,  \n   argument] ...   \n);  \nint _scprintf_p_l(  \n   const char *format,  \n   locale_t locale [,  \n   argument] ...   \n);  \nint _scwprintf_p (  \n   const wchar_t *format [,  \n   argument] ...   \n);  \nint _scwprintf_p _l(  \n   const wchar_t *format,  \n   locale_t locale [,  \n   argument] ...   \n);  \n```  \n  \n#### Parameters  \n `format`  \n Format-control string.  \n  \n `argument`  \n Optional arguments.  \n  \n `locale`  \n The locale to use.  \n  \n## Return Value  \n Returns the number of characters that would be generated if the string were to be printed or sent to a file or buffer using the specified formatting codes. The value returned does not include the terminating null character. `_scwprintf_p` performs the same function for wide characters.  \n  \n The difference between `_scprintf_p` and `_scprintf` is that `_scprintf_p` supports positional parameters, which allows specifying the order in which the arguments are used in the format string. For more information, see [printf_p Positional Parameters](../../c-runtime-library/printf-p-positional-parameters.md).  \n  \n If `format` is a `NULL` pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions return -1 and set `errno` to `EINVAL`.  \n  \n For information about these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n Each `argument` (if any) is converted according to the corresponding format specification in `format`. The format consists of ordinary characters and has the same form and function as the `format` argument for [printf](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md).  \n  \n The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale.  \n  \n> [!IMPORTANT]\n>  Ensure that `format` is not a user-defined string.  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_sctprintf_p`|`_scprintf_p`|`_scprintf_p`|`_scwprintf_p`|  \n|`_sctprintf_p_l`|`_scprintf_p_l`|`_scprintf_p_l`|`_scwprintf_p_l`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_scprintf_p`, `_scprintf_p_l`|\\<stdio.h>|  \n|`_scwprintf_p`, `_scwprintf_p_l`|\\<stdio.h> or \\<wchar.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [_scprintf, _scprintf_l, _scwprintf, _scwprintf_l](../../c-runtime-library/reference/scprintf-scprintf-l-scwprintf-scwprintf-l.md)   \n [_printf_p, _printf_p_l, _wprintf_p, _wprintf_p_l](../../c-runtime-library/reference/printf-p-printf-p-l-wprintf-p-wprintf-p-l.md)"}