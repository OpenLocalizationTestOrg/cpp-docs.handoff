{"nodes":[{"pos":[12,50],"content":"is_destructible Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"is_destructible Class | Microsoft Docs","pos":[0,38]}]},{"pos":[760,781],"content":"is_destructible Class","linkify":"is_destructible Class","nodes":[{"content":"is_destructible Class","pos":[0,21]}]},{"content":"Tests whether the type is destructible.","pos":[782,821]},{"pos":[830,836],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[905,915],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type to query.","pos":[926,944]},{"pos":[953,960],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An instance of the type predicate holds true if the type <ph id=\"ph1\">`T`</ph> is a destructible type, otherwise it holds false.","pos":[964,1074],"source":"An instance of the type predicate holds true if the type `T` is a destructible type, otherwise it holds false."},{"content":"Destructible types are reference types, object types, and types where for some type <ph id=\"ph1\">`U`</ph> equal to <ph id=\"ph2\">`remove_all_extents_t&lt;T&gt;`</ph> the unevaluated operand <ph id=\"ph3\">`std::declval&lt;U&amp;&gt;.~U()`</ph> is well-formed.","pos":[1075,1261],"source":" Destructible types are reference types, object types, and types where for some type `U` equal to `remove_all_extents_t<T>` the unevaluated operand `std::declval<U&>.~U()` is well-formed."},{"content":"Other types, including incomplete types, <ph id=\"ph1\">`void`</ph>, and function types, are not destructible types.","pos":[1262,1358],"source":" Other types, including incomplete types, `void`, and function types, are not destructible types."},{"pos":[1367,1379],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1383,1408],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> &lt;type_traits&gt;","source":"**Header:** <type_traits>"},{"pos":[1415,1433],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[1442,1450],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[1454,1505],"content":"<bpt id=\"p1\">[</bpt>&lt;type_traits&gt;<ept id=\"p1\">](../standard-library/type-traits.md)</ept>","source":"[<type_traits>](../standard-library/type-traits.md)"}],"content":"---\ntitle: \"is_destructible Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"cpp\"\n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"is_destructible\"\n  - \"std.is_destructible\"\n  - \"std::is_destructible\"\n  - \"type_traits/std::is_destructible\"\ndev_langs: \n  - \"C++\"\n  - \"c++\"\nhelpviewer_keywords: \n  - \"is_destructible\"\nms.assetid: 3bb9b718-1ad5-49ae-93cc-92b93b546b4d\ncaps.latest.revision: 16\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"es-es\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# is_destructible Class\nTests whether the type is destructible.  \n  \n## Syntax  \n  \n```\ntemplate <class T>  \nstruct is_destructible;\n```  \n  \n#### Parameters  \n `T`  \n The type to query.  \n  \n## Remarks  \n An instance of the type predicate holds true if the type `T` is a destructible type, otherwise it holds false. Destructible types are reference types, object types, and types where for some type `U` equal to `remove_all_extents_t<T>` the unevaluated operand `std::declval<U&>.~U()` is well-formed. Other types, including incomplete types, `void`, and function types, are not destructible types.  \n  \n## Requirements  \n **Header:** <type_traits>  \n  \n **Namespace:** std  \n  \n## See Also  \n [<type_traits>](../standard-library/type-traits.md)\n\n\n\n"}