{"nodes":[{"pos":[12,45],"content":"&lt;iostream&gt; | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"iostream<ph id=\"ph1\">&amp;gt;</ph> | Microsoft Docs","pos":[4,33],"source":"iostream&gt; | Microsoft Docs"}]},{"content":"iostream","pos":[648,656]},{"content":"Declares objects that control reading from and writing to the standard streams.","pos":[661,740]},{"content":"This is often the only header you need to include to perform input and output from a C++ program.","pos":[741,838]},{"content":"Syntax","pos":[847,853]},{"content":"Remarks","pos":[902,909]},{"content":"The objects fall into two groups:","pos":[913,946]},{"pos":[954,1083],"content":"<bpt id=\"p1\">[</bpt>cin<ept id=\"p1\">](#cin)</ept>, <bpt id=\"p2\">[</bpt>cout<ept id=\"p2\">](#cout)</ept>, <bpt id=\"p3\">[</bpt>cerr<ept id=\"p3\">](#cerr)</ept>, and <bpt id=\"p4\">[</bpt>clog<ept id=\"p4\">](#clog)</ept> are byte oriented, performing conventional byte-at-a-time transfers.","source":"[cin](#cin), [cout](#cout), [cerr](#cerr), and [clog](#clog) are byte oriented, performing conventional byte-at-a-time transfers."},{"pos":[1091,1263],"content":"<bpt id=\"p1\">[</bpt>wcin<ept id=\"p1\">](#wcin)</ept>, <bpt id=\"p2\">[</bpt>wcout<ept id=\"p2\">](#wcout)</ept>, <bpt id=\"p3\">[</bpt>wcerr<ept id=\"p3\">](#wcerr)</ept>, and <bpt id=\"p4\">[</bpt>wclog<ept id=\"p4\">](#wclog)</ept> are wide oriented, translating to and from the wide characters that the program manipulates internally.","source":"[wcin](#wcin), [wcout](#wcout), [wcerr](#wcerr), and [wclog](#wclog) are wide oriented, translating to and from the wide characters that the program manipulates internally."},{"content":"Once you perform certain operations on a stream, such as the standard input, you cannot perform operations of a different orientation on the same stream.","pos":[1270,1423]},{"content":"Therefore, a program cannot operate interchangeably on both <bpt id=\"p1\">[</bpt>cin<ept id=\"p1\">](#cin)</ept> and <bpt id=\"p2\">[</bpt>wcin<ept id=\"p2\">](#wcin)</ept>, for example.","pos":[1424,1527],"source":" Therefore, a program cannot operate interchangeably on both [cin](#cin) and [wcin](#wcin), for example."},{"content":"All the objects declared in this header share a peculiar property — you can assume they are constructed before any static objects you define, in a translation unit that includes <ph id=\"ph1\">\\&lt;</ph>iostream&gt;.","pos":[1534,1724],"source":"All the objects declared in this header share a peculiar property — you can assume they are constructed before any static objects you define, in a translation unit that includes \\<iostream>."},{"content":"Equally, you can assume that these objects are not destroyed before the destructors for any such static objects you define.","pos":[1725,1848]},{"content":"(The output streams are, however, flushed during program termination.) Therefore, you can safely read from or write to the standard streams before program startup and after program termination.","pos":[1849,2042]},{"content":"This guarantee is not universal, however.","pos":[2049,2090]},{"content":"A static constructor may call a function in another translation unit.","pos":[2091,2160]},{"content":"The called function cannot assume that the objects declared in this header have been constructed, given the uncertain order in which translation units participate in static construction.","pos":[2161,2347]},{"content":"To use these objects in such a context, you must first construct an object of class <bpt id=\"p1\">[</bpt>ios_base::Init<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__init)</ept>.","pos":[2348,2503],"source":" To use these objects in such a context, you must first construct an object of class [ios_base::Init](../standard-library/ios-base-class.md#ios_base__init)."},{"content":"Global Stream Objects","pos":[2513,2534]},{"content":"cerr","pos":[2556,2560]},{"pos":[2569,2604],"content":"Specifies the <ph id=\"ph1\">`cerr`</ph> global stream.","source":"Specifies the `cerr` global stream."},{"content":"cin","pos":[2610,2613]},{"pos":[2621,2655],"content":"Specifies the <ph id=\"ph1\">`cin`</ph> global stream.","source":"Specifies the `cin` global stream."},{"content":"clog","pos":[2661,2665]},{"pos":[2674,2709],"content":"Specifies the <ph id=\"ph1\">`clog`</ph> global stream.","source":"Specifies the `clog` global stream."},{"content":"cout","pos":[2715,2719]},{"pos":[2728,2763],"content":"Specifies the <ph id=\"ph1\">`cout`</ph> global stream.","source":"Specifies the `cout` global stream."},{"content":"wcerr","pos":[2769,2774]},{"pos":[2784,2820],"content":"Specifies the <ph id=\"ph1\">`wcerr`</ph> global stream.","source":"Specifies the `wcerr` global stream."},{"content":"wcin","pos":[2826,2830]},{"pos":[2839,2874],"content":"Specifies the <ph id=\"ph1\">`wcin`</ph> global stream.","source":"Specifies the `wcin` global stream."},{"content":"wclog","pos":[2880,2885]},{"pos":[2895,2931],"content":"Specifies the <ph id=\"ph1\">`wclog`</ph> global stream.","source":"Specifies the `wclog` global stream."},{"content":"wcout","pos":[2937,2942]},{"pos":[2952,2988],"content":"Specifies the <ph id=\"ph1\">`wcout`</ph> global stream.","source":"Specifies the `wcout` global stream."},{"pos":[3021,3025],"content":"cerr"},{"pos":[3029,3141],"content":"The object <ph id=\"ph1\">`cerr`</ph> controls output to a stream buffer associated with the object <ph id=\"ph2\">`stderr`</ph>, declared in <ph id=\"ph3\">\\&lt;</ph>cstdio&gt;.","source":"The object `cerr` controls output to a stream buffer associated with the object `stderr`, declared in \\<cstdio>."},{"content":"Return Value","pos":[3190,3202]},{"pos":[3206,3275],"content":"An <bpt id=\"p1\">[</bpt>ostream<ept id=\"p1\">](../standard-library/ostream-typedefs.md#ostream)</ept> object.","source":"An [ostream](../standard-library/ostream-typedefs.md#ostream) object."},{"content":"Remarks","pos":[3286,3293]},{"content":"The object controls unbuffered insertions to the standard error output as a byte stream.","pos":[3297,3385]},{"content":"Once the object is constructed, the expression <ph id=\"ph1\">`cerr.`</ph><bpt id=\"p1\">[</bpt>flags<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__flags)</ept> <ph id=\"ph2\">`&amp;`</ph> <bpt id=\"p2\">[</bpt>unitbuf<ept id=\"p2\">](../standard-library/ios-functions.md#unitbuf)</ept> is nonzero, and <ph id=\"ph3\">`cerr.tie() == &amp;cout`</ph>.","pos":[3386,3601],"source":" Once the object is constructed, the expression `cerr.`[flags](../standard-library/ios-base-class.md#ios_base__flags) `&` [unitbuf](../standard-library/ios-functions.md#unitbuf) is nonzero, and `cerr.tie() == &cout`."},{"content":"Example","pos":[3612,3619]},{"pos":[4152,4155],"content":"cin"},{"pos":[4159,4193],"content":"Specifies the <ph id=\"ph1\">`cin`</ph> global stream.","source":"Specifies the `cin` global stream."},{"content":"Return Value","pos":[4241,4253]},{"pos":[4257,4326],"content":"An <bpt id=\"p1\">[</bpt>istream<ept id=\"p1\">](../standard-library/istream-typedefs.md#istream)</ept> object.","source":"An [istream](../standard-library/istream-typedefs.md#istream) object."},{"content":"Remarks","pos":[4337,4344]},{"content":"The object controls extractions from the standard input as a byte stream.","pos":[4348,4421]},{"content":"Once the object is constructed, the call <ph id=\"ph1\">`cin.`</ph><bpt id=\"p1\">[</bpt>tie<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__tie)</ept> returns <ph id=\"ph2\">`&amp;`</ph><bpt id=\"p2\">[</bpt>cout<ept id=\"p2\">](#cout)</ept>.","pos":[4422,4555],"source":" Once the object is constructed, the call `cin.`[tie](../standard-library/basic-ios-class.md#basic_ios__tie) returns `&`[cout](#cout)."},{"content":"Example","pos":[4566,4573]},{"content":"In this example, <ph id=\"ph1\">`cin`</ph> sets the fail bit on the stream when it encounters non-numeric characters.","pos":[4578,4675],"source":"In this example, `cin` sets the fail bit on the stream when it encounters non-numeric characters."},{"content":"The program clears the fail bit and strips the invalid character from the stream to proceed.","pos":[4676,4768]},{"pos":[5346,5350],"content":"clog"},{"pos":[5354,5389],"content":"Specifies the <ph id=\"ph1\">`clog`</ph> global stream.","source":"Specifies the `clog` global stream."},{"content":"Return Value","pos":[5438,5450]},{"pos":[5454,5523],"content":"An <bpt id=\"p1\">[</bpt>ostream<ept id=\"p1\">](../standard-library/ostream-typedefs.md#ostream)</ept> object.","source":"An [ostream](../standard-library/ostream-typedefs.md#ostream) object."},{"content":"Remarks","pos":[5534,5541]},{"content":"The object controls buffered insertions to the standard error output as a byte stream.","pos":[5545,5631]},{"content":"Example","pos":[5642,5649]},{"pos":[5654,5703],"content":"See <bpt id=\"p1\">[</bpt>cerr<ept id=\"p1\">](#cerr)</ept> for an example of using <ph id=\"ph1\">`clog`</ph>.","source":"See [cerr](#cerr) for an example of using `clog`."},{"pos":[5735,5739],"content":"cout"},{"pos":[5743,5778],"content":"Specifies the <ph id=\"ph1\">`cout`</ph> global stream.","source":"Specifies the `cout` global stream."},{"content":"Return Value","pos":[5827,5839]},{"pos":[5843,5912],"content":"An <bpt id=\"p1\">[</bpt>ostream<ept id=\"p1\">](../standard-library/ostream-typedefs.md#ostream)</ept> object.","source":"An [ostream](../standard-library/ostream-typedefs.md#ostream) object."},{"content":"Remarks","pos":[5923,5930]},{"content":"The object controls insertions to the standard output as a byte stream.","pos":[5934,6005]},{"content":"Example","pos":[6016,6023]},{"pos":[6028,6077],"content":"See <bpt id=\"p1\">[</bpt>cerr<ept id=\"p1\">](#cerr)</ept> for an example of using <ph id=\"ph1\">`cout`</ph>.","source":"See [cerr](#cerr) for an example of using `cout`."},{"pos":[6110,6115],"content":"wcerr"},{"pos":[6119,6155],"content":"Specifies the <ph id=\"ph1\">`wcerr`</ph> global stream.","source":"Specifies the `wcerr` global stream."},{"content":"Return Value","pos":[6206,6218]},{"pos":[6222,6292],"content":"A <bpt id=\"p1\">[</bpt>wostream<ept id=\"p1\">](../standard-library/ostream-typedefs.md#wostream)</ept> object.","source":"A [wostream](../standard-library/ostream-typedefs.md#wostream) object."},{"content":"Remarks","pos":[6303,6310]},{"content":"The object controls unbuffered insertions to the standard error output as a wide stream.","pos":[6314,6402]},{"content":"Once the object is constructed, the expression <ph id=\"ph1\">`wcerr.`</ph><bpt id=\"p1\">[</bpt>flags<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__flags)</ept> <ph id=\"ph2\">`&amp;`</ph> <bpt id=\"p2\">[</bpt>unitbuf<ept id=\"p2\">](../standard-library/ios-functions.md#unitbuf)</ept> is nonzero.","pos":[6403,6592],"source":" Once the object is constructed, the expression `wcerr.`[flags](../standard-library/ios-base-class.md#ios_base__flags) `&` [unitbuf](../standard-library/ios-functions.md#unitbuf) is nonzero."},{"content":"Example","pos":[6603,6610]},{"pos":[6615,6665],"content":"See <bpt id=\"p1\">[</bpt>cerr<ept id=\"p1\">](#cerr)</ept> for an example of using <ph id=\"ph1\">`wcerr`</ph>.","source":"See [cerr](#cerr) for an example of using `wcerr`."},{"pos":[6697,6701],"content":"wcin"},{"pos":[6705,6740],"content":"Specifies the <ph id=\"ph1\">`wcin`</ph> global stream.","source":"Specifies the `wcin` global stream."},{"content":"Return Value","pos":[6790,6802]},{"pos":[6806,6876],"content":"A <bpt id=\"p1\">[</bpt>wistream<ept id=\"p1\">](../standard-library/istream-typedefs.md#wistream)</ept> object.","source":"A [wistream](../standard-library/istream-typedefs.md#wistream) object."},{"content":"Remarks","pos":[6887,6894]},{"content":"The object controls extractions from the standard input as a wide stream.","pos":[6898,6971]},{"content":"Once the object is constructed, the call <ph id=\"ph1\">`wcin.`</ph><bpt id=\"p1\">[</bpt>tie<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__tie)</ept> returns <ph id=\"ph2\">`&amp;`</ph><bpt id=\"p2\">[</bpt>wcout<ept id=\"p2\">](#wcout)</ept>.","pos":[6972,7108],"source":" Once the object is constructed, the call `wcin.`[tie](../standard-library/basic-ios-class.md#basic_ios__tie) returns `&`[wcout](#wcout)."},{"content":"Example","pos":[7119,7126]},{"pos":[7131,7180],"content":"See <bpt id=\"p1\">[</bpt>cerr<ept id=\"p1\">](#cerr)</ept> for an example of using <ph id=\"ph1\">`wcin`</ph>.","source":"See [cerr](#cerr) for an example of using `wcin`."},{"pos":[7213,7218],"content":"wclog"},{"pos":[7222,7258],"content":"Specifies the <ph id=\"ph1\">`wclog`</ph> global stream.","source":"Specifies the `wclog` global stream."},{"content":"Return Value","pos":[7309,7321]},{"pos":[7325,7395],"content":"A <bpt id=\"p1\">[</bpt>wostream<ept id=\"p1\">](../standard-library/ostream-typedefs.md#wostream)</ept> object.","source":"A [wostream](../standard-library/ostream-typedefs.md#wostream) object."},{"content":"Remarks","pos":[7406,7413]},{"content":"The object controls buffered insertions to the standard error output as a wide stream.","pos":[7417,7503]},{"content":"Example","pos":[7514,7521]},{"pos":[7526,7576],"content":"See <bpt id=\"p1\">[</bpt>cerr<ept id=\"p1\">](#cerr)</ept> for an example of using <ph id=\"ph1\">`wclog`</ph>.","source":"See [cerr](#cerr) for an example of using `wclog`."},{"pos":[7609,7614],"content":"wcout"},{"pos":[7618,7654],"content":"Specifies the <ph id=\"ph1\">`wcout`</ph> global stream.","source":"Specifies the `wcout` global stream."},{"content":"Return Value","pos":[7705,7717]},{"pos":[7721,7791],"content":"A <bpt id=\"p1\">[</bpt>wostream<ept id=\"p1\">](../standard-library/ostream-typedefs.md#wostream)</ept> object.","source":"A [wostream](../standard-library/ostream-typedefs.md#wostream) object."},{"content":"Remarks","pos":[7802,7809]},{"content":"The object controls insertions to the standard output as a wide stream.","pos":[7813,7884]},{"content":"Example","pos":[7895,7902]},{"pos":[7907,7957],"content":"See <bpt id=\"p1\">[</bpt>cerr<ept id=\"p1\">](#cerr)</ept> for an example of using <ph id=\"ph1\">`wcout`</ph>.","source":"See [cerr](#cerr) for an example of using `wcout`."},{"pos":[7974,8075],"content":"instances in a <ph id=\"ph1\">`wcout`</ph> statement must be cast to <ph id=\"ph2\">`const wchar_t*`</ph>, as shown in the following example.","source":" instances in a `wcout` statement must be cast to `const wchar_t*`, as shown in the following example."},{"pos":[8166,8266],"content":"For more information, see <bpt id=\"p1\">[</bpt>Basic CString Operations<ept id=\"p1\">](../atl-mfc-shared/basic-cstring-operations.md)</ept>.","source":"For more information, see [Basic CString Operations](../atl-mfc-shared/basic-cstring-operations.md)."},{"content":"See Also","pos":[8275,8283]},{"content":"Header Files Reference","pos":[8288,8310]},{"content":"Thread Safety in the C++ Standard Library","pos":[8375,8416]},{"content":"iostream Programming","pos":[8489,8509]},{"content":"iostreams Conventions","pos":[8561,8582]}],"content":"---\ntitle: \"&lt;iostream&gt; | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.<iostream>\"\n  - \"std::<iostream>\"\n  - \"<iostream>\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"iostream header\"\nms.assetid: de5d39e1-7e77-4b55-bcd1-7c77b41515c8\ncaps.latest.revision: 23\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# &lt;iostream&gt;\nDeclares objects that control reading from and writing to the standard streams. This is often the only header you need to include to perform input and output from a C++ program.  \n  \n## Syntax  \n  \n```  \n#include <iostream>  \n  \n```  \n  \n## Remarks  \n The objects fall into two groups:  \n  \n- [cin](#cin), [cout](#cout), [cerr](#cerr), and [clog](#clog) are byte oriented, performing conventional byte-at-a-time transfers.  \n  \n- [wcin](#wcin), [wcout](#wcout), [wcerr](#wcerr), and [wclog](#wclog) are wide oriented, translating to and from the wide characters that the program manipulates internally.  \n  \n Once you perform certain operations on a stream, such as the standard input, you cannot perform operations of a different orientation on the same stream. Therefore, a program cannot operate interchangeably on both [cin](#cin) and [wcin](#wcin), for example.  \n  \n All the objects declared in this header share a peculiar property — you can assume they are constructed before any static objects you define, in a translation unit that includes \\<iostream>. Equally, you can assume that these objects are not destroyed before the destructors for any such static objects you define. (The output streams are, however, flushed during program termination.) Therefore, you can safely read from or write to the standard streams before program startup and after program termination.  \n  \n This guarantee is not universal, however. A static constructor may call a function in another translation unit. The called function cannot assume that the objects declared in this header have been constructed, given the uncertain order in which translation units participate in static construction. To use these objects in such a context, you must first construct an object of class [ios_base::Init](../standard-library/ios-base-class.md#ios_base__init).  \n  \n### Global Stream Objects  \n  \n|||  \n|-|-|  \n|[cerr](#cerr)|Specifies the `cerr` global stream.|  \n|[cin](#cin)|Specifies the `cin` global stream.|  \n|[clog](#clog)|Specifies the `clog` global stream.|  \n|[cout](#cout)|Specifies the `cout` global stream.|  \n|[wcerr](#wcerr)|Specifies the `wcerr` global stream.|  \n|[wcin](#wcin)|Specifies the `wcin` global stream.|  \n|[wclog](#wclog)|Specifies the `wclog` global stream.|  \n|[wcout](#wcout)|Specifies the `wcout` global stream.|  \n  \n###  <a name=\"cerr\"></a>  cerr  \n The object `cerr` controls output to a stream buffer associated with the object `stderr`, declared in \\<cstdio>.  \n  \n```  \nextern ostream cerr;  \n```  \n  \n#### Return Value  \n An [ostream](../standard-library/ostream-typedefs.md#ostream) object.  \n  \n#### Remarks  \n The object controls unbuffered insertions to the standard error output as a byte stream. Once the object is constructed, the expression `cerr.`[flags](../standard-library/ios-base-class.md#ios_base__flags) `&` [unitbuf](../standard-library/ios-functions.md#unitbuf) is nonzero, and `cerr.tie() == &cout`.  \n  \n#### Example  \n  \n```cpp  \n// iostream_cerr.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <fstream>  \n  \nusing namespace std;  \n  \nvoid TestWide( )   \n{  \n   int i = 0;  \n   wcout << L\"Enter a number: \";  \n   wcin >> i;  \n   wcerr << L\"test for wcerr\" << endl;  \n   wclog << L\"test for wclog\" << endl;     \n}  \n  \nint main( )   \n{  \n   int i = 0;  \n   cout << \"Enter a number: \";  \n   cin >> i;  \n   cerr << \"test for cerr\" << endl;  \n   clog << \"test for clog\" << endl;  \n   TestWide( );  \n}  \n```  \n  \n###  <a name=\"cin\"></a>  cin  \n Specifies the `cin` global stream.  \n  \n```  \nextern istream cin;  \n```  \n  \n#### Return Value  \n An [istream](../standard-library/istream-typedefs.md#istream) object.  \n  \n#### Remarks  \n The object controls extractions from the standard input as a byte stream. Once the object is constructed, the call `cin.`[tie](../standard-library/basic-ios-class.md#basic_ios__tie) returns `&`[cout](#cout).  \n  \n#### Example  \n  In this example, `cin` sets the fail bit on the stream when it encounters non-numeric characters. The program clears the fail bit and strips the invalid character from the stream to proceed.  \n  \n```  \n// iostream_cin.cpp  \n// compile with: /EHsc  \n#include <iostream>  \nusing namespace std;  \n  \nint main()  \n{  \n   int x;  \n   cout << \"enter choice:\";  \n   cin >> x;  \n   while (x < 1 || x > 4)  \n   {  \n      cout << \"Invalid choice, try again:\";  \n      cin >> x;  \n      // not a numeric character, probably  \n      // clear the failure and pull off the non-numeric character  \n      if (cin.fail())  \n      {  \n         cin.clear();  \n         char c;  \n         cin >> c;  \n      }  \n   }  \n}  \n```  \n  \n```Output  \n  \n2  \n  \n```  \n  \n###  <a name=\"clog\"></a>  clog  \n Specifies the `clog` global stream.  \n  \n```  \nextern ostream clog;  \n```  \n  \n#### Return Value  \n An [ostream](../standard-library/ostream-typedefs.md#ostream) object.  \n  \n#### Remarks  \n The object controls buffered insertions to the standard error output as a byte stream.  \n  \n#### Example  \n  See [cerr](#cerr) for an example of using `clog`.  \n  \n###  <a name=\"cout\"></a>  cout  \n Specifies the `cout` global stream.  \n  \n```  \nextern ostream cout;  \n```  \n  \n#### Return Value  \n An [ostream](../standard-library/ostream-typedefs.md#ostream) object.  \n  \n#### Remarks  \n The object controls insertions to the standard output as a byte stream.  \n  \n#### Example  \n  See [cerr](#cerr) for an example of using `cout`.  \n  \n###  <a name=\"wcerr\"></a>  wcerr  \n Specifies the `wcerr` global stream.  \n  \n```  \nextern wostream wcerr;  \n```  \n  \n#### Return Value  \n A [wostream](../standard-library/ostream-typedefs.md#wostream) object.  \n  \n#### Remarks  \n The object controls unbuffered insertions to the standard error output as a wide stream. Once the object is constructed, the expression `wcerr.`[flags](../standard-library/ios-base-class.md#ios_base__flags) `&` [unitbuf](../standard-library/ios-functions.md#unitbuf) is nonzero.  \n  \n#### Example  \n  See [cerr](#cerr) for an example of using `wcerr`.  \n  \n###  <a name=\"wcin\"></a>  wcin  \n Specifies the `wcin` global stream.  \n  \n```  \nextern wistream wcin;  \n```  \n  \n#### Return Value  \n A [wistream](../standard-library/istream-typedefs.md#wistream) object.  \n  \n#### Remarks  \n The object controls extractions from the standard input as a wide stream. Once the object is constructed, the call `wcin.`[tie](../standard-library/basic-ios-class.md#basic_ios__tie) returns `&`[wcout](#wcout).  \n  \n#### Example  \n  See [cerr](#cerr) for an example of using `wcin`.  \n  \n###  <a name=\"wclog\"></a>  wclog  \n Specifies the `wclog` global stream.  \n  \n```  \nextern wostream wclog;  \n```  \n  \n#### Return Value  \n A [wostream](../standard-library/ostream-typedefs.md#wostream) object.  \n  \n#### Remarks  \n The object controls buffered insertions to the standard error output as a wide stream.  \n  \n#### Example  \n  See [cerr](#cerr) for an example of using `wclog`.  \n  \n###  <a name=\"wcout\"></a>  wcout  \n Specifies the `wcout` global stream.  \n  \n```  \nextern wostream wcout;  \n```  \n  \n#### Return Value  \n A [wostream](../standard-library/ostream-typedefs.md#wostream) object.  \n  \n#### Remarks  \n The object controls insertions to the standard output as a wide stream.  \n  \n#### Example  \n  See [cerr](#cerr) for an example of using `wcout`.  \n  \n `CString` instances in a `wcout` statement must be cast to `const wchar_t*`, as shown in the following example.  \n  \n```  \n \n    CString cs(\"meow\");\n\n    wcout <<(const wchar_t*) cs <<endl;  \n```  \n  \n For more information, see [Basic CString Operations](../atl-mfc-shared/basic-cstring-operations.md).  \n  \n## See Also  \n [Header Files Reference](../standard-library/cpp-standard-library-header-files.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [iostream Programming](../standard-library/iostream-programming.md)   \n [iostreams Conventions](../standard-library/iostreams-conventions.md)\n\n"}