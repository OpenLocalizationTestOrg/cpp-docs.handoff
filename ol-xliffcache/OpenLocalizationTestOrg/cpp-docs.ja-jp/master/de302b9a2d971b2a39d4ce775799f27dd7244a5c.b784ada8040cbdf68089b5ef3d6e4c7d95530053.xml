{"nodes":[{"pos":[12,53],"content":"&lt;thread&gt; functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>thread<ph id=\"ph2\">&amp;gt;</ph> functions | Microsoft Docs","pos":[0,41],"source":"&lt;thread&gt; functions | Microsoft Docs"}]},{"pos":[256,280],"content":"&lt;thread&gt; functions","linkify":"&lt;thread&gt; functions","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>thread<ph id=\"ph2\">&amp;gt;</ph> functions","pos":[0,24],"source":"&lt;thread&gt; functions"}]},{"pos":[299,325],"content":"<bpt id=\"p1\">[</bpt>get_id<ept id=\"p1\">](#get_id_function)</ept>","source":"[get_id](#get_id_function)"},{"pos":[326,358],"content":"<bpt id=\"p1\">[</bpt>sleep_for<ept id=\"p1\">](#sleep_for_function)</ept>","source":"[sleep_for](#sleep_for_function)"},{"pos":[359,395],"content":"<bpt id=\"p1\">[</bpt>sleep_until<ept id=\"p1\">](#sleep_until_function)</ept>","source":"[sleep_until](#sleep_until_function)"},{"pos":[400,422],"content":"<bpt id=\"p1\">[</bpt>swap<ept id=\"p1\">](#swap_function)</ept>","source":"[swap](#swap_function)"},{"pos":[423,447],"content":"<bpt id=\"p1\">[</bpt>yield<ept id=\"p1\">](#yield_function)</ept>","source":"[yield](#yield_function)"},{"pos":[458,496],"content":"<bpt id=\"p1\">&lt;a name=\"get_id_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  get_id","linkify":"<a name=\"get_id_function\"></a>  get_id","source":"<a name=\"get_id_function\"></a>  get_id"},{"content":"Uniquely identifies the current thread of execution.","pos":[500,552]},{"pos":[622,634],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[638,763],"content":"An object of type <bpt id=\"p1\">[</bpt>thread::id<ept id=\"p1\">](../standard-library/thread-class.md)</ept> that uniquely identifies the current thread of execution.","source":"An object of type [thread::id](../standard-library/thread-class.md) that uniquely identifies the current thread of execution."},{"pos":[773,817],"content":"<bpt id=\"p1\">&lt;a name=\"sleep_for_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  sleep_for","linkify":"<a name=\"sleep_for_function\"></a>  sleep_for","source":"<a name=\"sleep_for_function\"></a>  sleep_for"},{"content":"Blocks the calling thread.","pos":[821,847]},{"pos":[981,991],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">[</bpt>duration<ept id=\"p1\">](../standard-library/duration-class.md)</ept> object that specifies a time interval.","pos":[1009,1099],"source":" A [duration](../standard-library/duration-class.md) object that specifies a time interval."},{"pos":[1109,1116],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The function blocks the calling thread for at least the time that's specified by <ph id=\"ph1\">`Rel_time`</ph>.","pos":[1120,1212],"source":"The function blocks the calling thread for at least the time that's specified by `Rel_time`."},{"content":"This function does not throw any exceptions.","pos":[1213,1257]},{"pos":[1267,1315],"content":"<bpt id=\"p1\">&lt;a name=\"sleep_until_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  sleep_until","linkify":"<a name=\"sleep_until_function\"></a>  sleep_until","source":"<a name=\"sleep_until_function\"></a>  sleep_until"},{"content":"Blocks the calling thread at least until the specified time.","pos":[1319,1379]},{"pos":[1558,1568],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Represents a point in time.","pos":[1586,1613]},{"pos":[1623,1630],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function does not throw any exceptions.","pos":[1634,1678]},{"pos":[1688,1722],"content":"<bpt id=\"p1\">&lt;a name=\"swap_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  swap","linkify":"<a name=\"swap_function\"></a>  swap","source":"<a name=\"swap_function\"></a>  swap"},{"pos":[1726,1767],"content":"Swaps the states of two <ph id=\"ph1\">`thread`</ph> objects.","source":"Swaps the states of two `thread` objects."},{"pos":[1843,1853],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The left <ph id=\"ph1\">`thread`</ph> object.","pos":[1867,1892],"source":" The left `thread` object."},{"content":"The right <ph id=\"ph1\">`thread`</ph> object.","pos":[1910,1936],"source":" The right `thread` object."},{"pos":[1946,1953],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1957,1995],"content":"The function calls <ph id=\"ph1\">`Left.swap(Right)`</ph>.","source":"The function calls `Left.swap(Right)`."},{"pos":[2005,2041],"content":"<bpt id=\"p1\">&lt;a name=\"yield_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  yield","linkify":"<a name=\"yield_function\"></a>  yield","source":"<a name=\"yield_function\"></a>  yield"},{"content":"Signals the operating system to run other threads, even if the current thread would ordinarily continue to run.","pos":[2045,2156]},{"pos":[2212,2220],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2224,2266],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>thread&gt;<ept id=\"p1\">](../standard-library/thread.md)</ept>","source":"[\\<thread>](../standard-library/thread.md)"}],"content":"---\ntitle: \"&lt;thread&gt; functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: bb1aa1ef-fe3f-4e2c-8b6e-e22dbf2f5a19\ncaps.latest.revision: 12\nmanager: \"ghogen\"\n---\n# &lt;thread&gt; functions\n||||  \n|-|-|-|  \n|[get_id](#get_id_function)|[sleep_for](#sleep_for_function)|[sleep_until](#sleep_until_function)|  \n|[swap](#swap_function)|[yield](#yield_function)|  \n  \n##  <a name=\"get_id_function\"></a>  get_id  \n Uniquely identifies the current thread of execution.  \n  \n```  \nthread::id this_thread::get_id() noexcept;  \n```  \n  \n### Return Value  \n An object of type [thread::id](../standard-library/thread-class.md) that uniquely identifies the current thread of execution.  \n  \n##  <a name=\"sleep_for_function\"></a>  sleep_for  \n Blocks the calling thread.  \n  \n```  \ntemplate <class Rep,  \nclass Period>  \ninline void sleep_for(const chrono::duration<Rep, Period>& Rel_time);\n```  \n  \n### Parameters  \n `Rel_time`  \n A [duration](../standard-library/duration-class.md) object that specifies a time interval.  \n  \n### Remarks  \n The function blocks the calling thread for at least the time that's specified by `Rel_time`. This function does not throw any exceptions.  \n  \n##  <a name=\"sleep_until_function\"></a>  sleep_until  \n Blocks the calling thread at least until the specified time.  \n  \n```  \ntemplate <class Clock, class Duration>  \nvoid sleep_until(const chrono::time_point<Clock, Duration>& Abs_time);\n\nvoid sleep_until(const xtime *Abs_time);\n```  \n  \n### Parameters  \n `Abs_time`  \n Represents a point in time.  \n  \n### Remarks  \n This function does not throw any exceptions.  \n  \n##  <a name=\"swap_function\"></a>  swap  \n Swaps the states of two `thread` objects.  \n  \n```  \nvoid swap(thread& Left, thread& Right) noexcept;  \n```  \n  \n### Parameters  \n `Left`  \n The left `thread` object.  \n  \n `Right`  \n The right `thread` object.  \n  \n### Remarks  \n The function calls `Left.swap(Right)`.  \n  \n##  <a name=\"yield_function\"></a>  yield  \n Signals the operating system to run other threads, even if the current thread would ordinarily continue to run.  \n  \n```  \ninline void yield() noexcept;  \n```  \n  \n## See Also  \n [\\<thread>](../standard-library/thread.md)\n\n"}