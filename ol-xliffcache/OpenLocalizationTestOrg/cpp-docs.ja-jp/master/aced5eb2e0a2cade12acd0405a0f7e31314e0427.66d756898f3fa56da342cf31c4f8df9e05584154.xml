{"nodes":[{"pos":[12,46],"content":"CThreadPool Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CThreadPool Class | Microsoft Docs","pos":[0,34]}]},{"content":"CThreadPool Class","pos":[652,669]},{"content":"This class provides a pool of worker threads that process a queue of work items.","pos":[670,750]},{"content":"Syntax","pos":[759,765]},{"content":"Parameters","pos":[908,918]},{"content":"Worker","pos":[923,929]},{"content":"The class conforming to the <bpt id=\"p1\">[</bpt>worker archetype<ept id=\"p1\">](../../atl/reference/worker-archetype.md)</ept> providing the code used to process work items queued on the thread pool.","pos":[934,1094],"source":" The class conforming to the [worker archetype](../../atl/reference/worker-archetype.md) providing the code used to process work items queued on the thread pool."},{"content":"The class providing the function used to create the threads in the pool.","pos":[1119,1191]},{"content":"Members","pos":[1200,1207]},{"content":"Public Constructors","pos":[1217,1236]},{"content":"Name","pos":[1243,1247]},{"content":"Description","pos":[1248,1259]},{"content":"CThreadPool::CThreadPool","pos":[1298,1322]},{"content":"The constructor for the thread pool.","pos":[1351,1387]},{"content":"CThreadPool::~CThreadPool","pos":[1393,1418]},{"content":"The destructor for the thread pool.","pos":[1452,1487]},{"content":"Public Methods","pos":[1498,1512]},{"content":"Name","pos":[1519,1523]},{"content":"Description","pos":[1524,1535]},{"content":"CThreadPool::AddRef","pos":[1574,1593]},{"pos":[1617,1654],"content":"Implementation of <ph id=\"ph1\">`IUnknown::AddRef`</ph>.","source":"Implementation of `IUnknown::AddRef`."},{"content":"CThreadPool::GetNumThreads","pos":[1660,1686]},{"content":"Call this method to get the number of threads in the pool.","pos":[1717,1775]},{"content":"CThreadPool::GetQueueHandle","pos":[1781,1808]},{"content":"Call this method to get the handle of the IO completion port used to queue work items.","pos":[1840,1926]},{"content":"CThreadPool::GetSize","pos":[1932,1952]},{"content":"Call this method to get the number of threads in the pool.","pos":[1977,2035]},{"content":"CThreadPool::GetTimeout","pos":[2041,2064]},{"content":"Call this method to get the maximum time in milliseconds that the thread pool will wait for a thread to shut down.","pos":[2092,2206]},{"content":"CThreadPool::Initialize","pos":[2212,2235]},{"content":"Call this method to initialize the thread pool.","pos":[2263,2310]},{"content":"CThreadPool::QueryInterface","pos":[2316,2343]},{"pos":[2375,2422],"content":"Implementation of <bpt id=\"p1\">**</bpt>IUnknown::QueryInterface<ept id=\"p1\">**</ept>.","source":"Implementation of **IUnknown::QueryInterface**."},{"content":"CThreadPool::QueueRequest","pos":[2428,2453]},{"content":"Call this method to queue a work item to be handled by a thread in the pool.","pos":[2483,2559]},{"content":"CThreadPool::Release","pos":[2565,2585]},{"pos":[2610,2648],"content":"Implementation of <ph id=\"ph1\">`IUnknown::Release`</ph>.","source":"Implementation of `IUnknown::Release`."},{"content":"CThreadPool::SetSize","pos":[2654,2674]},{"content":"Call this method to set the number of threads in the pool.","pos":[2699,2757]},{"content":"CThreadPool::SetTimeout","pos":[2763,2786]},{"content":"Call this method to set the maximum time in milliseconds that the thread pool will wait for a thread to shut down.","pos":[2814,2928]},{"content":"CThreadPool::Shutdown","pos":[2934,2955]},{"content":"Call this method to shut down the thread pool.","pos":[2981,3027]},{"content":"Remarks","pos":[3037,3044]},{"content":"Threads in the pool are created and destroyed when the pool is initialized, resized, or shut down.","pos":[3048,3146]},{"content":"An instance of class <bpt id=\"p1\">*</bpt>Worker<ept id=\"p1\">*</ept> will be created on the stack of each worker thread in the pool.","pos":[3147,3240],"source":" An instance of class *Worker* will be created on the stack of each worker thread in the pool."},{"content":"Each instance will live for the lifetime of the thread.","pos":[3241,3296]},{"content":"Immediately after creation of a thread, <bpt id=\"p1\">*</bpt>Worker<ept id=\"p1\">*</ept>:: <ph id=\"ph1\">`Initialize`</ph> will be called on the object associated with that thread.","pos":[3303,3424],"source":"Immediately after creation of a thread, *Worker*:: `Initialize` will be called on the object associated with that thread."},{"content":"Immediately before destruction of a thread, <bpt id=\"p1\">*</bpt>Worker<ept id=\"p1\">*</ept>:: <ph id=\"ph1\">`Terminate`</ph> will be called.","pos":[3425,3507],"source":" Immediately before destruction of a thread, *Worker*:: `Terminate` will be called."},{"content":"Both methods must accept a <bpt id=\"p1\">**</bpt>void<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> argument.","pos":[3508,3555],"source":" Both methods must accept a **void\\*** argument."},{"content":"The value of this argument is passed to the thread pool through the <ph id=\"ph1\">`pvWorkerParam`</ph> parameter of <bpt id=\"p1\">[</bpt>CThreadPool::Initialize<ept id=\"p1\">](#cthreadpool__initialize)</ept>.","pos":[3556,3705],"source":" The value of this argument is passed to the thread pool through the `pvWorkerParam` parameter of [CThreadPool::Initialize](#cthreadpool__initialize)."},{"content":"When there are work items in the queue and worker threads available for work, a worker thread will pull an item off the queue and call the <bpt id=\"p1\">**</bpt>Execute<ept id=\"p1\">**</ept> method of the <bpt id=\"p2\">*</bpt>Worker<ept id=\"p2\">*</ept> object for that thread.","pos":[3712,3909],"source":"When there are work items in the queue and worker threads available for work, a worker thread will pull an item off the queue and call the **Execute** method of the *Worker* object for that thread."},{"content":"Three items are then passed to the method: the item from the queue, the same <ph id=\"ph1\">`pvWorkerParam`</ph> passed to <bpt id=\"p1\">*</bpt>Worker<ept id=\"p1\">*</ept>:: <ph id=\"ph2\">`Initialize`</ph> and <bpt id=\"p2\">*</bpt>Worker<ept id=\"p2\">*</ept>:: <ph id=\"ph3\">`Terminate`</ph>, and a pointer to the <bpt id=\"p3\">[</bpt>OVERLAPPED<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/ms684342)</ept> structure used for the IO completion port queue.","pos":[3910,4207],"source":" Three items are then passed to the method: the item from the queue, the same `pvWorkerParam` passed to *Worker*:: `Initialize` and *Worker*:: `Terminate`, and a pointer to the [OVERLAPPED](http://msdn.microsoft.com/library/windows/desktop/ms684342) structure used for the IO completion port queue."},{"content":"The <bpt id=\"p1\">*</bpt>Worker<ept id=\"p1\">*</ept> class declares the type of the items that will be queued on the thread pool by providing a typedef, <bpt id=\"p2\">*</bpt>Worker<ept id=\"p2\">*</ept>:: <ph id=\"ph1\">`RequestType`</ph>.","pos":[4214,4352],"source":"The *Worker* class declares the type of the items that will be queued on the thread pool by providing a typedef, *Worker*:: `RequestType`."},{"content":"This type must be capable of being cast to and from a <bpt id=\"p1\">**</bpt>ULONG_PTR<ept id=\"p1\">**</ept>.","pos":[4353,4421],"source":" This type must be capable of being cast to and from a **ULONG_PTR**."},{"pos":[4428,4540],"content":"An example of a <bpt id=\"p1\">*</bpt>Worker<ept id=\"p1\">*</ept> class is <bpt id=\"p2\">[</bpt>CNonStatelessWorker Class<ept id=\"p2\">](../../atl/reference/cnonstatelessworker-class.md)</ept>.","source":"An example of a *Worker* class is [CNonStatelessWorker Class](../../atl/reference/cnonstatelessworker-class.md)."},{"content":"Inheritance Hierarchy","pos":[4549,4570]},{"content":"IThreadPoolConfig","pos":[4592,4609]},{"content":"Requirements","pos":[4691,4703]},{"pos":[4707,4728],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlutil.h","source":"**Header:** atlutil.h"},{"pos":[4774,4793],"content":"CThreadPool::AddRef"},{"pos":[4797,4834],"content":"Implementation of <ph id=\"ph1\">`IUnknown::AddRef`</ph>.","source":"Implementation of `IUnknown::AddRef`."},{"content":"Return Value","pos":[4899,4911]},{"content":"Always returns 1.","pos":[4915,4932]},{"content":"Remarks","pos":[4942,4949]},{"content":"This class does not implement lifetime control using reference counting.","pos":[4953,5025]},{"pos":[5076,5100],"content":"CThreadPool::CThreadPool"},{"content":"The constructor for the thread pool.","pos":[5104,5140]},{"content":"Remarks","pos":[5186,5193]},{"pos":[5197,5343],"content":"Initializes the timeout value to <bpt id=\"p1\">[</bpt>ATLS_DEFAULT_THREADPOOLSHUTDOWNTIMEOUT<ept id=\"p1\">](http://msdn.microsoft.com/library/c1e660a7-d490-42af-bbe1-ded76e80cc10)</ept>.","source":"Initializes the timeout value to [ATLS_DEFAULT_THREADPOOLSHUTDOWNTIMEOUT](http://msdn.microsoft.com/library/c1e660a7-d490-42af-bbe1-ded76e80cc10)."},{"pos":[5399,5424],"content":"CThreadPool::~CThreadPool"},{"content":"The destructor for the thread pool.","pos":[5428,5463]},{"content":"Remarks","pos":[5510,5517]},{"pos":[5521,5575],"content":"Calls <bpt id=\"p1\">[</bpt>CThreadPool::Shutdown<ept id=\"p1\">](#cthreadpool__shutdown)</ept>.","source":"Calls [CThreadPool::Shutdown](#cthreadpool__shutdown)."},{"pos":[5628,5654],"content":"CThreadPool::GetNumThreads"},{"content":"Call this method to get the number of threads in the pool.","pos":[5658,5716]},{"content":"Return Value","pos":[5768,5780]},{"content":"Returns the number of threads in the pool.","pos":[5784,5826]},{"pos":[5880,5907],"content":"CThreadPool::GetQueueHandle"},{"content":"Call this method to get the handle of the IO completion port used to queue work items.","pos":[5911,5997]},{"content":"Return Value","pos":[6053,6065]},{"content":"Returns the queue handle or NULL if the thread pool has not been initialized.","pos":[6069,6146]},{"pos":[6193,6213],"content":"CThreadPool::GetSize"},{"content":"Call this method to get the number of threads in the pool.","pos":[6217,6275]},{"content":"Parameters","pos":[6360,6370]},{"content":"[out] Address of the variable that, on success, receives the number of threads in the pool.","pos":[6392,6483]},{"content":"Return Value","pos":[6493,6505]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[6509,6565]},{"pos":[6615,6638],"content":"CThreadPool::GetTimeout"},{"content":"Call this method to get the maximum time in milliseconds that the thread pool will wait for a thread to shut down.","pos":[6642,6756]},{"content":"Parameters","pos":[6844,6854]},{"content":"[out] Address of the variable that, on success, receives the maximum time in milliseconds that the thread pool will wait for a thread to shut down.","pos":[6874,7021]},{"content":"Return Value","pos":[7031,7043]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[7047,7103]},{"content":"Remarks","pos":[7113,7120]},{"pos":[7124,7247],"content":"This timeout value is used by <bpt id=\"p1\">[</bpt>CThreadPool::Shutdown<ept id=\"p1\">](#cthreadpool__shutdown)</ept> if no other value is supplied to that method.","source":"This timeout value is used by [CThreadPool::Shutdown](#cthreadpool__shutdown) if no other value is supplied to that method."},{"pos":[7297,7320],"content":"CThreadPool::Initialize"},{"content":"Call this method to initialize the thread pool.","pos":[7324,7371]},{"content":"Parameters","pos":[7554,7564]},{"content":"The worker parameter to be passed to the worker thread object's <ph id=\"ph1\">`Initialize`</ph>, <bpt id=\"p1\">**</bpt>Execute<ept id=\"p1\">**</ept>, and <ph id=\"ph2\">`Terminate`</ph> methods.","pos":[7587,7702],"source":" The worker parameter to be passed to the worker thread object's `Initialize`, **Execute**, and `Terminate` methods."},{"content":"The requested number of threads in the pool.","pos":[7726,7770]},{"pos":[7777,7923],"content":"If <ph id=\"ph1\">`nNumThreads`</ph> is negative, its absolute value will be multiplied by the number of processors in the machine to get the total number of threads.","source":"If `nNumThreads` is negative, its absolute value will be multiplied by the number of processors in the machine to get the total number of threads."},{"pos":[7930,8155],"content":"If <ph id=\"ph1\">`nNumThreads`</ph> is zero, <bpt id=\"p1\">[</bpt>ATLS_DEFAULT_THREADSPERPROC<ept id=\"p1\">](http://msdn.microsoft.com/library/e0dcf107-72a9-4122-abb4-83c63aa7d571)</ept> will be multiplied by the number of processors in the machine to get the total number of threads.","source":"If `nNumThreads` is zero, [ATLS_DEFAULT_THREADSPERPROC](http://msdn.microsoft.com/library/e0dcf107-72a9-4122-abb4-83c63aa7d571) will be multiplied by the number of processors in the machine to get the total number of threads."},{"content":"The stack size for each thread in the pool.","pos":[8179,8222]},{"content":"hCompletion","pos":[8230,8241]},{"content":"The handle of an object to associate with the completion port.","pos":[8246,8308]},{"content":"Return Value","pos":[8318,8330]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[8334,8390]},{"pos":[8444,8471],"content":"CThreadPool::QueryInterface"},{"pos":[8475,8522],"content":"Implementation of <bpt id=\"p1\">**</bpt>IUnknown::QueryInterface<ept id=\"p1\">**</ept>.","source":"Implementation of **IUnknown::QueryInterface**."},{"content":"Remarks","pos":[8629,8636]},{"pos":[8640,8798],"content":"Objects of this class can be successfully queried for the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> and <bpt id=\"p2\">[</bpt>IThreadPoolConfig<ept id=\"p2\">](../../atl/reference/ithreadpoolconfig-interface.md)</ept> interfaces.","source":"Objects of this class can be successfully queried for the **IUnknown** and [IThreadPoolConfig](../../atl/reference/ithreadpoolconfig-interface.md) interfaces."},{"pos":[8850,8875],"content":"CThreadPool::QueueRequest"},{"content":"Call this method to queue a work item to be handled by a thread in the pool.","pos":[8879,8955]},{"content":"Parameters","pos":[9036,9046]},{"content":"The request to be queued.","pos":[9063,9088]},{"content":"Return Value","pos":[9098,9110]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[9114,9156]},{"content":"Remarks","pos":[9166,9173]},{"content":"This method adds a work item to the queue.","pos":[9177,9219]},{"content":"The threads in the pool pick items off the queue in the order in which they are received.","pos":[9220,9309]},{"pos":[9356,9376],"content":"CThreadPool::Release"},{"pos":[9380,9418],"content":"Implementation of <ph id=\"ph1\">`IUnknown::Release`</ph>.","source":"Implementation of `IUnknown::Release`."},{"content":"Return Value","pos":[9484,9496]},{"content":"Always returns 1.","pos":[9500,9517]},{"content":"Remarks","pos":[9527,9534]},{"content":"This class does not implement lifetime control using reference counting.","pos":[9538,9610]},{"pos":[9657,9677],"content":"CThreadPool::SetSize"},{"content":"Call this method to set the number of threads in the pool.","pos":[9681,9739]},{"content":"Parameters","pos":[9824,9834]},{"content":"The requested number of threads in the pool.","pos":[9855,9899]},{"pos":[9906,10052],"content":"If <ph id=\"ph1\">`nNumThreads`</ph> is negative, its absolute value will be multiplied by the number of processors in the machine to get the total number of threads.","source":"If `nNumThreads` is negative, its absolute value will be multiplied by the number of processors in the machine to get the total number of threads."},{"pos":[10059,10284],"content":"If <ph id=\"ph1\">`nNumThreads`</ph> is zero, <bpt id=\"p1\">[</bpt>ATLS_DEFAULT_THREADSPERPROC<ept id=\"p1\">](http://msdn.microsoft.com/library/e0dcf107-72a9-4122-abb4-83c63aa7d571)</ept> will be multiplied by the number of processors in the machine to get the total number of threads.","source":"If `nNumThreads` is zero, [ATLS_DEFAULT_THREADSPERPROC](http://msdn.microsoft.com/library/e0dcf107-72a9-4122-abb4-83c63aa7d571) will be multiplied by the number of processors in the machine to get the total number of threads."},{"content":"Return Value","pos":[10294,10306]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[10310,10366]},{"content":"Remarks","pos":[10376,10383]},{"content":"If the number of threads specified is less than the number of threads currently in the pool, the object puts a shutdown message on the queue to be picked up by a waiting thread.","pos":[10387,10564]},{"content":"When a waiting thread pulls the message off the queue, it notifies the thread pool and exits the thread procedure.","pos":[10565,10679]},{"content":"This process is repeated until the number of threads in the pool reaches the specified number or until no thread has exited within the period specified by <bpt id=\"p1\">[</bpt>GetTimeout<ept id=\"p1\">](#cthreadpool__gettimeout)</ept><ph id=\"ph1\">/ </ph><bpt id=\"p2\">[</bpt>SetTimeout<ept id=\"p2\">](#cthreadpool__settimeout)</ept>.","pos":[10680,10914],"source":" This process is repeated until the number of threads in the pool reaches the specified number or until no thread has exited within the period specified by [GetTimeout](#cthreadpool__gettimeout)/ [SetTimeout](#cthreadpool__settimeout)."},{"content":"In this situation the method will return an HRESULT corresponding to <bpt id=\"p1\">**</bpt>WAIT_TIMEOUT<ept id=\"p1\">**</ept> and the pending shutdown message is canceled.","pos":[10915,11046],"source":" In this situation the method will return an HRESULT corresponding to **WAIT_TIMEOUT** and the pending shutdown message is canceled."},{"pos":[11096,11119],"content":"CThreadPool::SetTimeout"},{"content":"Call this method to set the maximum time in milliseconds that the thread pool will wait for a thread to shut down.","pos":[11123,11237]},{"content":"Parameters","pos":[11325,11335]},{"content":"The requested maximum time in milliseconds that the thread pool will wait for a thread to shut down.","pos":[11354,11454]},{"content":"Return Value","pos":[11464,11476]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[11480,11536]},{"content":"Remarks","pos":[11546,11553]},{"pos":[11557,11719],"content":"The timeout is initialized to <bpt id=\"p1\">[</bpt>ATLS_DEFAULT_THREADPOOLSHUTDOWNTIMEOUT<ept id=\"p1\">](http://msdn.microsoft.com/library/c1e660a7-d490-42af-bbe1-ded76e80cc10)</ept> in the constructor.","source":"The timeout is initialized to [ATLS_DEFAULT_THREADPOOLSHUTDOWNTIMEOUT](http://msdn.microsoft.com/library/c1e660a7-d490-42af-bbe1-ded76e80cc10) in the constructor."},{"content":"Note that <ph id=\"ph1\">`dwMaxWait`</ph> is the time that the pool will wait for a single thread to shut down.","pos":[11726,11817],"source":"Note that `dwMaxWait` is the time that the pool will wait for a single thread to shut down."},{"content":"The maximum time that could be taken to remove multiple threads from the pool could be slightly less than <ph id=\"ph1\">`dwMaxWait`</ph> multiplied by the number of threads.","pos":[11818,11972],"source":" The maximum time that could be taken to remove multiple threads from the pool could be slightly less than `dwMaxWait` multiplied by the number of threads."},{"pos":[12020,12041],"content":"CThreadPool::Shutdown"},{"content":"Call this method to shut down the thread pool.","pos":[12045,12091]},{"content":"Parameters","pos":[12160,12170]},{"content":"The requested maximum time in milliseconds that the thread pool will wait for a thread to shut down.","pos":[12189,12289]},{"content":"If 0 or no value is supplied, this method will use the timeout set by <bpt id=\"p1\">[</bpt>CThreadPool::SetTimeout<ept id=\"p1\">](#cthreadpool__settimeout)</ept>.","pos":[12290,12412],"source":" If 0 or no value is supplied, this method will use the timeout set by [CThreadPool::SetTimeout](#cthreadpool__settimeout)."},{"content":"Remarks","pos":[12422,12429]},{"content":"This method posts a shutdown request to all threads in the pool.","pos":[12433,12497]},{"content":"If the timeout expires, this method will call <bpt id=\"p1\">[</bpt>TerminateThread<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms686717)</ept> on any thread that did not exit.","pos":[12498,12654],"source":" If the timeout expires, this method will call [TerminateThread](http://msdn.microsoft.com/library/windows/desktop/ms686717) on any thread that did not exit."},{"content":"This method is called automatically from the destructor of the class.","pos":[12655,12724]},{"content":"See Also","pos":[12733,12741]},{"content":"IThreadPoolConfig Interface","pos":[12746,12773]},{"content":"DefaultThreadTraits","pos":[12832,12851]},{"content":"Classes","pos":[12895,12902]}],"content":"---\ntitle: \"CThreadPool Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL.CThreadPool\"\n  - \"ATL::CThreadPool\"\n  - \"CThreadPool\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CThreadPool class\"\nms.assetid: 06683718-01b9-413c-9481-2dc1734ec70f\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CThreadPool Class\nThis class provides a pool of worker threads that process a queue of work items.  \n  \n## Syntax  \n  \n```\ntemplate <class Worker, class ThreadTraits = DefaultThreadTraits>\n    class CThreadPool :\n    public IThreadPoolConfig\n```  \n  \n#### Parameters  \n *Worker*  \n The class conforming to the [worker archetype](../../atl/reference/worker-archetype.md) providing the code used to process work items queued on the thread pool.  \n  \n `ThreadTraits`  \n The class providing the function used to create the threads in the pool.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CThreadPool::CThreadPool](#cthreadpool__cthreadpool)|The constructor for the thread pool.|  \n|[CThreadPool::~CThreadPool](#cthreadpool___dtorcthreadpool)|The destructor for the thread pool.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CThreadPool::AddRef](#cthreadpool__addref)|Implementation of `IUnknown::AddRef`.|  \n|[CThreadPool::GetNumThreads](#cthreadpool__getnumthreads)|Call this method to get the number of threads in the pool.|  \n|[CThreadPool::GetQueueHandle](#cthreadpool__getqueuehandle)|Call this method to get the handle of the IO completion port used to queue work items.|  \n|[CThreadPool::GetSize](#cthreadpool__getsize)|Call this method to get the number of threads in the pool.|  \n|[CThreadPool::GetTimeout](#cthreadpool__gettimeout)|Call this method to get the maximum time in milliseconds that the thread pool will wait for a thread to shut down.|  \n|[CThreadPool::Initialize](#cthreadpool__initialize)|Call this method to initialize the thread pool.|  \n|[CThreadPool::QueryInterface](#cthreadpool__queryinterface)|Implementation of **IUnknown::QueryInterface**.|  \n|[CThreadPool::QueueRequest](#cthreadpool__queuerequest)|Call this method to queue a work item to be handled by a thread in the pool.|  \n|[CThreadPool::Release](#cthreadpool__release)|Implementation of `IUnknown::Release`.|  \n|[CThreadPool::SetSize](#cthreadpool__setsize)|Call this method to set the number of threads in the pool.|  \n|[CThreadPool::SetTimeout](#cthreadpool__settimeout)|Call this method to set the maximum time in milliseconds that the thread pool will wait for a thread to shut down.|  \n|[CThreadPool::Shutdown](#cthreadpool__shutdown)|Call this method to shut down the thread pool.|  \n  \n## Remarks  \n Threads in the pool are created and destroyed when the pool is initialized, resized, or shut down. An instance of class *Worker* will be created on the stack of each worker thread in the pool. Each instance will live for the lifetime of the thread.  \n  \n Immediately after creation of a thread, *Worker*:: `Initialize` will be called on the object associated with that thread. Immediately before destruction of a thread, *Worker*:: `Terminate` will be called. Both methods must accept a **void\\*** argument. The value of this argument is passed to the thread pool through the `pvWorkerParam` parameter of [CThreadPool::Initialize](#cthreadpool__initialize).  \n  \n When there are work items in the queue and worker threads available for work, a worker thread will pull an item off the queue and call the **Execute** method of the *Worker* object for that thread. Three items are then passed to the method: the item from the queue, the same `pvWorkerParam` passed to *Worker*:: `Initialize` and *Worker*:: `Terminate`, and a pointer to the [OVERLAPPED](http://msdn.microsoft.com/library/windows/desktop/ms684342) structure used for the IO completion port queue.  \n  \n The *Worker* class declares the type of the items that will be queued on the thread pool by providing a typedef, *Worker*:: `RequestType`. This type must be capable of being cast to and from a **ULONG_PTR**.  \n  \n An example of a *Worker* class is [CNonStatelessWorker Class](../../atl/reference/cnonstatelessworker-class.md).  \n  \n## Inheritance Hierarchy  \n `IUnknown`  \n  \n [IThreadPoolConfig](../../atl/reference/ithreadpoolconfig-interface.md)  \n  \n `CThreadPool`  \n  \n## Requirements  \n **Header:** atlutil.h  \n  \n##  <a name=\"cthreadpool__addref\"></a>  CThreadPool::AddRef  \n Implementation of `IUnknown::AddRef`.  \n  \n```\nULONG STDMETHODCALLTYPE AddRef() throw();\n```  \n  \n### Return Value  \n Always returns 1.  \n  \n### Remarks  \n This class does not implement lifetime control using reference counting.  \n  \n##  <a name=\"cthreadpool__cthreadpool\"></a>  CThreadPool::CThreadPool  \n The constructor for the thread pool.  \n  \n```\nCThreadPool() throw();\n```  \n  \n### Remarks  \n Initializes the timeout value to [ATLS_DEFAULT_THREADPOOLSHUTDOWNTIMEOUT](http://msdn.microsoft.com/library/c1e660a7-d490-42af-bbe1-ded76e80cc10).  \n  \n##  <a name=\"cthreadpool___dtorcthreadpool\"></a>  CThreadPool::~CThreadPool  \n The destructor for the thread pool.  \n  \n```\n~CThreadPool() throw();\n```  \n  \n### Remarks  \n Calls [CThreadPool::Shutdown](#cthreadpool__shutdown).  \n  \n##  <a name=\"cthreadpool__getnumthreads\"></a>  CThreadPool::GetNumThreads  \n Call this method to get the number of threads in the pool.  \n  \n```\nint GetNumThreads() throw();\n```  \n  \n### Return Value  \n Returns the number of threads in the pool.  \n  \n##  <a name=\"cthreadpool__getqueuehandle\"></a>  CThreadPool::GetQueueHandle  \n Call this method to get the handle of the IO completion port used to queue work items.  \n  \n```\nHANDLE GetQueueHandle() throw();\n```  \n  \n### Return Value  \n Returns the queue handle or NULL if the thread pool has not been initialized.  \n  \n##  <a name=\"cthreadpool__getsize\"></a>  CThreadPool::GetSize  \n Call this method to get the number of threads in the pool.  \n  \n```\nHRESULT STDMETHODCALLTYPE GetSize(int* pnNumThreads) throw();\n```  \n  \n### Parameters  \n `pnNumThreads`  \n [out] Address of the variable that, on success, receives the number of threads in the pool.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n##  <a name=\"cthreadpool__gettimeout\"></a>  CThreadPool::GetTimeout  \n Call this method to get the maximum time in milliseconds that the thread pool will wait for a thread to shut down.  \n  \n```\nHRESULT STDMETHODCALLTYPE GetTimeout(DWORD* pdwMaxWait) throw();\n```  \n  \n### Parameters  \n `pdwMaxWait`  \n [out] Address of the variable that, on success, receives the maximum time in milliseconds that the thread pool will wait for a thread to shut down.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n This timeout value is used by [CThreadPool::Shutdown](#cthreadpool__shutdown) if no other value is supplied to that method.  \n  \n##  <a name=\"cthreadpool__initialize\"></a>  CThreadPool::Initialize  \n Call this method to initialize the thread pool.  \n  \n```\nHRESULT Initialize(\n    void* pvWorkerParam = NULL,\n    int nNumThreads = 0,\n    DWORD dwStackSize = 0,\n    HANDLE hCompletion = INVALID_HANDLE_VALUE) throw();\n```  \n  \n### Parameters  \n `pvWorkerParam`  \n The worker parameter to be passed to the worker thread object's `Initialize`, **Execute**, and `Terminate` methods.  \n  \n `nNumThreads`  \n The requested number of threads in the pool.  \n  \n If `nNumThreads` is negative, its absolute value will be multiplied by the number of processors in the machine to get the total number of threads.  \n  \n If `nNumThreads` is zero, [ATLS_DEFAULT_THREADSPERPROC](http://msdn.microsoft.com/library/e0dcf107-72a9-4122-abb4-83c63aa7d571) will be multiplied by the number of processors in the machine to get the total number of threads.  \n  \n `dwStackSize`  \n The stack size for each thread in the pool.  \n  \n *hCompletion*  \n The handle of an object to associate with the completion port.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n##  <a name=\"cthreadpool__queryinterface\"></a>  CThreadPool::QueryInterface  \n Implementation of **IUnknown::QueryInterface**.  \n  \n```\nHRESULT STDMETHODCALLTYPE QueryInterface(\n    REFIID riid,\n    void** ppv) throw();\n```  \n  \n### Remarks  \n Objects of this class can be successfully queried for the **IUnknown** and [IThreadPoolConfig](../../atl/reference/ithreadpoolconfig-interface.md) interfaces.  \n  \n##  <a name=\"cthreadpool__queuerequest\"></a>  CThreadPool::QueueRequest  \n Call this method to queue a work item to be handled by a thread in the pool.  \n  \n```\nBOOL QueueRequest(Worker::RequestType   request) throw();\n```  \n  \n### Parameters  \n `request`  \n The request to be queued.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n### Remarks  \n This method adds a work item to the queue. The threads in the pool pick items off the queue in the order in which they are received.  \n  \n##  <a name=\"cthreadpool__release\"></a>  CThreadPool::Release  \n Implementation of `IUnknown::Release`.  \n  \n```\nULONG STDMETHODCALLTYPE Release() throw();\n```  \n  \n### Return Value  \n Always returns 1.  \n  \n### Remarks  \n This class does not implement lifetime control using reference counting.  \n  \n##  <a name=\"cthreadpool__setsize\"></a>  CThreadPool::SetSize  \n Call this method to set the number of threads in the pool.  \n  \n```\nHRESULT STDMETHODCALLTYPE SetSize(int   nNumThreads) throw();\n```  \n  \n### Parameters  \n `nNumThreads`  \n The requested number of threads in the pool.  \n  \n If `nNumThreads` is negative, its absolute value will be multiplied by the number of processors in the machine to get the total number of threads.  \n  \n If `nNumThreads` is zero, [ATLS_DEFAULT_THREADSPERPROC](http://msdn.microsoft.com/library/e0dcf107-72a9-4122-abb4-83c63aa7d571) will be multiplied by the number of processors in the machine to get the total number of threads.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n If the number of threads specified is less than the number of threads currently in the pool, the object puts a shutdown message on the queue to be picked up by a waiting thread. When a waiting thread pulls the message off the queue, it notifies the thread pool and exits the thread procedure. This process is repeated until the number of threads in the pool reaches the specified number or until no thread has exited within the period specified by [GetTimeout](#cthreadpool__gettimeout)/ [SetTimeout](#cthreadpool__settimeout). In this situation the method will return an HRESULT corresponding to **WAIT_TIMEOUT** and the pending shutdown message is canceled.  \n  \n##  <a name=\"cthreadpool__settimeout\"></a>  CThreadPool::SetTimeout  \n Call this method to set the maximum time in milliseconds that the thread pool will wait for a thread to shut down.  \n  \n```\nHRESULT STDMETHODCALLTYPE SetTimeout(DWORD   dwMaxWait) throw();\n```  \n  \n### Parameters  \n `dwMaxWait`  \n The requested maximum time in milliseconds that the thread pool will wait for a thread to shut down.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n The timeout is initialized to [ATLS_DEFAULT_THREADPOOLSHUTDOWNTIMEOUT](http://msdn.microsoft.com/library/c1e660a7-d490-42af-bbe1-ded76e80cc10) in the constructor.  \n  \n Note that `dwMaxWait` is the time that the pool will wait for a single thread to shut down. The maximum time that could be taken to remove multiple threads from the pool could be slightly less than `dwMaxWait` multiplied by the number of threads.  \n  \n##  <a name=\"cthreadpool__shutdown\"></a>  CThreadPool::Shutdown  \n Call this method to shut down the thread pool.  \n  \n```\nvoid Shutdown(DWORD   dwMaxWait = 0) throw();\n```  \n  \n### Parameters  \n `dwMaxWait`  \n The requested maximum time in milliseconds that the thread pool will wait for a thread to shut down. If 0 or no value is supplied, this method will use the timeout set by [CThreadPool::SetTimeout](#cthreadpool__settimeout).  \n  \n### Remarks  \n This method posts a shutdown request to all threads in the pool. If the timeout expires, this method will call [TerminateThread](http://msdn.microsoft.com/library/windows/desktop/ms686717) on any thread that did not exit. This method is called automatically from the destructor of the class.  \n  \n## See Also  \n [IThreadPoolConfig Interface](../../atl/reference/ithreadpoolconfig-interface.md)   \n [DefaultThreadTraits](atl-typedefs.md#defaultthreadtraits)   \n [Classes](../../atl/reference/atl-classes.md)\n"}