{"nodes":[{"pos":[12,42],"content":"is_same Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"is_same Class | Microsoft Docs","pos":[0,30]}]},{"pos":[727,740],"content":"is_same Class","linkify":"is_same Class","nodes":[{"content":"is_same Class","pos":[0,13]}]},{"content":"Tests if two types are the same.","pos":[741,773]},{"pos":[782,788],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[866,876],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The first type to query.","pos":[889,913]},{"content":"The second type to query.","pos":[929,954]},{"pos":[963,970],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[974,1092],"content":"An instance of the type predicate holds true if the types <ph id=\"ph1\">`Ty1`</ph> and <ph id=\"ph2\">`Ty2`</ph> are the same type, otherwise it holds false.","source":"An instance of the type predicate holds true if the types `Ty1` and `Ty2` are the same type, otherwise it holds false."},{"pos":[1101,1108],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2241,2253],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2257,2282],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> &lt;type_traits&gt;","source":"**Header:** <type_traits>"},{"pos":[2289,2307],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[2316,2324],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>&lt;type_traits&gt;<ept id=\"p1\">](../standard-library/type-traits.md)</ept><ph id=\"ph1\"> </ph>","pos":[2328,2380],"source":"[<type_traits>](../standard-library/type-traits.md) "},{"content":"<bpt id=\"p1\"> [</bpt>is_convertible Class<ept id=\"p1\">](../standard-library/is-convertible-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[2383,2452],"source":" [is_convertible Class](../standard-library/is-convertible-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>is_base_of Class<ept id=\"p1\">](../standard-library/is-base-of-class.md)</ept>","pos":[2455,2515],"source":" [is_base_of Class](../standard-library/is-base-of-class.md)"}],"content":"---\ntitle: \"is_same Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std::tr1::is_same\"\n  - \"std.tr1.is_same\"\n  - \"is_same\"\n  - \"std.is_same\"\n  - \"std::is_same\"\n  - \"type_traits/std::is_same\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"is_same class [TR1]\"\n  - \"is_same\"\nms.assetid: d9df6c1d-c270-4ec2-802a-af275648dd1d\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# is_same Class\nTests if two types are the same.  \n  \n## Syntax  \n  \n```  \ntemplate <class Ty1, class Ty2>  \nstruct is_same;  \n```  \n  \n#### Parameters  \n `Ty1`  \n The first type to query.  \n  \n `Ty2`  \n The second type to query.  \n  \n## Remarks  \n An instance of the type predicate holds true if the types `Ty1` and `Ty2` are the same type, otherwise it holds false.  \n  \n## Example  \n  \n```cpp  \n// std_tr1__type_traits__is_same.cpp   \n// compile with: /EHsc   \n#include <type_traits>   \n#include <iostream>   \n  \nstruct base   \n    {   \n    int val;   \n    };   \n  \nstruct derived   \n    : public base   \n    {   \n    };   \n  \nint main()   \n    {   \n    std::cout << \"is_same<base, base> == \" << std::boolalpha   \n        << std::is_same<base, base>::value << std::endl;   \n    std::cout << \"is_same<base, derived> == \" << std::boolalpha   \n        << std::is_same<base, derived>::value << std::endl;   \n    std::cout << \"is_same<derived, base> == \" << std::boolalpha   \n        << std::is_same<derived, base>::value << std::endl;   \n    std::cout << \"is_same<int, int> == \" << std::boolalpha   \n        << std::is_same<int, int>::value << std::endl;   \n    std::cout << \"is_same<int, const int> == \" << std::boolalpha   \n        << std::is_same<int, const int>::value << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \nis_same<base, base> == true  \nis_same<base, derived> == false  \nis_same<derived, base> == false  \nis_same<int, int> == true  \nis_same<int, const int> == false  \n```  \n  \n## Requirements  \n **Header:** <type_traits>  \n  \n **Namespace:** std  \n  \n## See Also  \n [<type_traits>](../standard-library/type-traits.md)   \n [is_convertible Class](../standard-library/is-convertible-class.md)   \n [is_base_of Class](../standard-library/is-base-of-class.md)\n"}