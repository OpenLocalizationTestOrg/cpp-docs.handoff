{"nodes":[{"pos":[12,80],"content":"Storage-Class Specifiers with Function Declarations | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Storage-Class Specifiers with Function Declarations | Microsoft Docs","pos":[0,68]}]},{"content":"Storage-Class Specifiers with Function Declarations","pos":[819,870]},{"content":"You can use either the <bpt id=\"p1\">**</bpt>static<ept id=\"p1\">**</ept> or the <ph id=\"ph1\">`extern`</ph> storage-class specifier in function declarations.","pos":[871,970],"source":"You can use either the **static** or the `extern` storage-class specifier in function declarations."},{"content":"Functions always have global lifetimes.","pos":[971,1010]},{"content":"Microsoft Specific","pos":[1019,1037]},{"content":"Function declarations at the internal level have the same meaning as function declarations at the external level.","pos":[1046,1159]},{"content":"This means that a function is visible from its point of declaration throughout the rest of the translation unit even if it is declared at local scope.","pos":[1160,1310]},{"content":"END Microsoft Specific","pos":[1319,1341]},{"content":"The visibility rules for functions vary slightly from the rules for variables, as follows:","pos":[1350,1440]},{"content":"A function declared to be <bpt id=\"p1\">**</bpt>static<ept id=\"p1\">**</ept> is visible only within the source file in which it is defined.","pos":[1450,1549],"source":"A function declared to be **static** is visible only within the source file in which it is defined."},{"content":"Functions in the same source file can call the <bpt id=\"p1\">**</bpt>static<ept id=\"p1\">**</ept> function, but functions in other source files cannot access it directly by name.","pos":[1550,1688],"source":" Functions in the same source file can call the **static** function, but functions in other source files cannot access it directly by name."},{"content":"You can declare another <bpt id=\"p1\">**</bpt>static<ept id=\"p1\">**</ept> function with the same name in a different source file without conflict.","pos":[1689,1796],"source":" You can declare another **static** function with the same name in a different source file without conflict."},{"content":"Functions declared as <ph id=\"ph1\">`extern`</ph> are visible throughout all source files in the program (unless you later redeclare such a function as <bpt id=\"p1\">**</bpt>static<ept id=\"p1\">**</ept>).","pos":[1806,1951],"source":"Functions declared as `extern` are visible throughout all source files in the program (unless you later redeclare such a function as **static**)."},{"content":"Any function can call an <ph id=\"ph1\">`extern`</ph> function.","pos":[1952,1995],"source":" Any function can call an `extern` function."},{"pos":[2005,2089],"content":"Function declarations that omit the storage-class specifier are <ph id=\"ph1\">`extern`</ph> by default.","source":"Function declarations that omit the storage-class specifier are `extern` by default."},{"content":"Microsoft Specific","pos":[2098,2116]},{"pos":[2125,2195],"content":"Microsoft allows redefinition of an <ph id=\"ph1\">`extern`</ph> identifier as <bpt id=\"p1\">**</bpt>static<ept id=\"p1\">**</ept>.","source":"Microsoft allows redefinition of an `extern` identifier as **static**."},{"content":"END Microsoft Specific","pos":[2204,2226]},{"content":"See Also","pos":[2237,2245]},{"content":"C Storage Classes","pos":[2250,2267]}],"content":"---\ntitle: \"Storage-Class Specifiers with Function Declarations | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"function specifiers, storage class\"\n  - \"declaring functions, specifiers\"\n  - \"external declarations\"\n  - \"specifiers, function\"\n  - \"external linkage, function declarations\"\n  - \"external linkage, storage-class specifiers\"\nms.assetid: 801d7df2-efa9-4924-a725-274a5654cfd4\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Storage-Class Specifiers with Function Declarations\nYou can use either the **static** or the `extern` storage-class specifier in function declarations. Functions always have global lifetimes.  \n  \n **Microsoft Specific**  \n  \n Function declarations at the internal level have the same meaning as function declarations at the external level. This means that a function is visible from its point of declaration throughout the rest of the translation unit even if it is declared at local scope.  \n  \n **END Microsoft Specific**  \n  \n The visibility rules for functions vary slightly from the rules for variables, as follows:  \n  \n-   A function declared to be **static** is visible only within the source file in which it is defined. Functions in the same source file can call the **static** function, but functions in other source files cannot access it directly by name. You can declare another **static** function with the same name in a different source file without conflict.  \n  \n-   Functions declared as `extern` are visible throughout all source files in the program (unless you later redeclare such a function as **static**). Any function can call an `extern` function.  \n  \n-   Function declarations that omit the storage-class specifier are `extern` by default.  \n  \n **Microsoft Specific**  \n  \n Microsoft allows redefinition of an `extern` identifier as **static**.  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [C Storage Classes](../c-language/c-storage-classes.md)"}