{"nodes":[{"pos":[12,57],"content":"Linker Tools Warning LNK4221 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Linker Tools Warning LNK4221 | Microsoft Docs","pos":[0,45]}]},{"content":"Linker Tools Warning LNK4221","pos":[610,638]},{"content":"This object file does not define any previously undefined public symbols, so it will not be used by any link operation that consumes this library","pos":[639,784]},{"content":"Consider the following two code snippets.","pos":[791,832]},{"content":"To compile the files and create two object files, run <bpt id=\"p1\">**</bpt>cl /c a.cpp b.cpp<ept id=\"p1\">**</ept> at a command prompt.","pos":[980,1076],"source":"To compile the files and create two object files, run **cl /c a.cpp b.cpp** at a command prompt."},{"content":"If you link the object files by running <bpt id=\"p1\">**</bpt>link /lib /out:test.lib a.obj b.obj<ept id=\"p1\">**</ept>, you will receive the LNK4221 warning.","pos":[1077,1195],"source":" If you link the object files by running **link /lib /out:test.lib a.obj b.obj**, you will receive the LNK4221 warning."},{"content":"If you link the objects by running <bpt id=\"p1\">**</bpt>link /lib /out:test.lib b.obj a.obj<ept id=\"p1\">**</ept>, you will not receive a warning.","pos":[1196,1303],"source":" If you link the objects by running **link /lib /out:test.lib b.obj a.obj**, you will not receive a warning."},{"content":"No warning is issued in the second scenario because the linker operates in a last-in first-out (LIFO) manner.","pos":[1310,1419]},{"content":"In the first scenario, b.obj is processed before a.obj, and a.obj has no new symbols to add.","pos":[1420,1512]},{"content":"By instructing the linker to process a.obj first, you can avoid the warning.","pos":[1513,1589]},{"content":"A common cause of this error is when two source files specify the option <bpt id=\"p1\">[</bpt>/Yc (Create Precompiled Header File)<ept id=\"p1\">](../../build/reference/yc-create-precompiled-header-file.md)</ept> with the same header file name specified in the <bpt id=\"p2\">**</bpt>Precompiled Header<ept id=\"p2\">**</ept> field.","pos":[1596,1845],"source":"A common cause of this error is when two source files specify the option [/Yc (Create Precompiled Header File)](../../build/reference/yc-create-precompiled-header-file.md) with the same header file name specified in the **Precompiled Header** field."},{"content":"A common cause of this problem deals with stdafx.h since, by default, stdafx.cpp includes stdafx.h and does not add any new symbols.","pos":[1846,1978]},{"content":"If another source file includes stdafx.h with <bpt id=\"p1\">**</bpt>/Yc<ept id=\"p1\">**</ept> and the associated .obj file is processed before stdafx.obj, the linker will throw LNK4221.","pos":[1979,2124],"source":" If another source file includes stdafx.h with **/Yc** and the associated .obj file is processed before stdafx.obj, the linker will throw LNK4221."},{"content":"One way to resolve this problem is to make sure that for each precompiled header, there is only one source file that includes it with <bpt id=\"p1\">**</bpt>/Yc<ept id=\"p1\">**</ept>.","pos":[2131,2273],"source":"One way to resolve this problem is to make sure that for each precompiled header, there is only one source file that includes it with **/Yc**."},{"content":"All other source files must use precompiled headers.","pos":[2274,2326]},{"content":"For more information about how to change this setting, see <bpt id=\"p1\">[</bpt>/Yu (Use Precompiled Header File)<ept id=\"p1\">](../../build/reference/yu-use-precompiled-header-file.md)</ept>.","pos":[2327,2479],"source":" For more information about how to change this setting, see [/Yu (Use Precompiled Header File)](../../build/reference/yu-use-precompiled-header-file.md)."}],"content":"---\ntitle: \"Linker Tools Warning LNK4221 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"LNK4221\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"LNK4221\"\nms.assetid: 8e2eb2de-9532-4b85-908a-8c9ff5c4cccb\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Linker Tools Warning LNK4221\nThis object file does not define any previously undefined public symbols, so it will not be used by any link operation that consumes this library  \n  \n Consider the following two code snippets.  \n  \n```  \n// a.cpp  \n#include <atlbase.h>  \n```  \n  \n```  \n// b.cpp  \n#include <atlbase.h>  \nint function()  \n{  \n   return 0;  \n}  \n  \n```  \n  \n To compile the files and create two object files, run **cl /c a.cpp b.cpp** at a command prompt. If you link the object files by running **link /lib /out:test.lib a.obj b.obj**, you will receive the LNK4221 warning. If you link the objects by running **link /lib /out:test.lib b.obj a.obj**, you will not receive a warning.  \n  \n No warning is issued in the second scenario because the linker operates in a last-in first-out (LIFO) manner. In the first scenario, b.obj is processed before a.obj, and a.obj has no new symbols to add. By instructing the linker to process a.obj first, you can avoid the warning.  \n  \n A common cause of this error is when two source files specify the option [/Yc (Create Precompiled Header File)](../../build/reference/yc-create-precompiled-header-file.md) with the same header file name specified in the **Precompiled Header** field. A common cause of this problem deals with stdafx.h since, by default, stdafx.cpp includes stdafx.h and does not add any new symbols. If another source file includes stdafx.h with **/Yc** and the associated .obj file is processed before stdafx.obj, the linker will throw LNK4221.  \n  \n One way to resolve this problem is to make sure that for each precompiled header, there is only one source file that includes it with **/Yc**. All other source files must use precompiled headers. For more information about how to change this setting, see [/Yu (Use Precompiled Header File)](../../build/reference/yu-use-precompiled-header-file.md)."}