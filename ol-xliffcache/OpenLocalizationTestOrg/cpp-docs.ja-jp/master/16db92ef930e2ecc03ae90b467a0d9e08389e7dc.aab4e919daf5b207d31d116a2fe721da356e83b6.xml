{"nodes":[{"pos":[12,49],"content":"goto Statement (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"goto Statement (C++) | Microsoft Docs","pos":[0,37]}]},{"content":"goto Statement (C++)","pos":[628,648]},{"pos":[649,757],"content":"The <ph id=\"ph1\">`goto`</ph> statement unconditionally transfers control to the statement labeled by the specified identifier.","source":"The `goto` statement unconditionally transfers control to the statement labeled by the specified identifier."},{"content":"Syntax","pos":[766,772]},{"content":"Remarks","pos":[815,822]},{"content":"The labeled statement designated by <ph id=\"ph1\">`identifier`</ph> must be in the current function.","pos":[826,907],"source":"The labeled statement designated by `identifier` must be in the current function."},{"content":"All <ph id=\"ph1\">`identifier`</ph> names are members of an internal namespace and therefore do not interfere with other identifiers.","pos":[908,1022],"source":" All `identifier` names are members of an internal namespace and therefore do not interfere with other identifiers."},{"content":"A statement label is meaningful only to a <ph id=\"ph1\">`goto`</ph> statement; otherwise, statement labels are ignored.","pos":[1029,1129],"source":"A statement label is meaningful only to a `goto` statement; otherwise, statement labels are ignored."},{"content":"Labels cannot be redeclared.","pos":[1130,1158]},{"content":"It is good programming style to use the <ph id=\"ph1\">`break`</ph>, <ph id=\"ph2\">`continue`</ph>, and <ph id=\"ph3\">`return`</ph> statements instead of the <ph id=\"ph4\">`goto`</ph> statement whenever possible.","pos":[1165,1300],"source":"It is good programming style to use the `break`, `continue`, and `return` statements instead of the `goto` statement whenever possible."},{"content":"However, because the <ph id=\"ph1\">`break`</ph> statement exits from only one level of a loop, you might have to use a <ph id=\"ph2\">`goto`</ph> statement to exit a deeply nested loop.","pos":[1301,1447],"source":" However, because the `break` statement exits from only one level of a loop, you might have to use a `goto` statement to exit a deeply nested loop."},{"pos":[1454,1682],"content":"For more information about labels and the <ph id=\"ph1\">`goto`</ph> statement, see <bpt id=\"p1\">[</bpt>Labeled Statements<ept id=\"p1\">](../cpp/labeled-statements.md)</ept> and <bpt id=\"p2\">[</bpt>Using Labels with the goto Statement<ept id=\"p2\">](http://msdn.microsoft.com/en-us/6cd7c31a-9822-4241-8566-f79f51be48fe)</ept>.","source":"For more information about labels and the `goto` statement, see [Labeled Statements](../cpp/labeled-statements.md) and [Using Labels with the goto Statement](http://msdn.microsoft.com/en-us/6cd7c31a-9822-4241-8566-f79f51be48fe)."},{"content":"Example","pos":[1691,1698]},{"pos":[1702,1802],"content":"In this example, a <ph id=\"ph1\">`goto`</ph> statement transfers control to the point labeled <ph id=\"ph2\">`stop`</ph> when <ph id=\"ph3\">`i`</ph> equals 3.","source":"In this example, a `goto` statement transfers control to the point labeled `stop` when `i` equals 3."},{"content":"See Also","pos":[2735,2743]},{"content":"Jump Statements","pos":[2748,2763]},{"content":"Keywords","pos":[2801,2809]}],"content":"---\ntitle: \"goto Statement (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"goto_cpp\"\n  - \"goto\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"goto keyword [C++]\"\nms.assetid: 724c5deb-2de1-42d8-8ef1-23589d9bf5ed\ncaps.latest.revision: 13\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# goto Statement (C++)\nThe `goto` statement unconditionally transfers control to the statement labeled by the specified identifier.  \n  \n## Syntax  \n  \n```  \ngoto identifier;  \n```  \n  \n## Remarks  \n The labeled statement designated by `identifier` must be in the current function. All `identifier` names are members of an internal namespace and therefore do not interfere with other identifiers.  \n  \n A statement label is meaningful only to a `goto` statement; otherwise, statement labels are ignored. Labels cannot be redeclared.  \n  \n It is good programming style to use the `break`, `continue`, and `return` statements instead of the `goto` statement whenever possible. However, because the `break` statement exits from only one level of a loop, you might have to use a `goto` statement to exit a deeply nested loop.  \n  \n For more information about labels and the `goto` statement, see [Labeled Statements](../cpp/labeled-statements.md) and [Using Labels with the goto Statement](http://msdn.microsoft.com/en-us/6cd7c31a-9822-4241-8566-f79f51be48fe).  \n  \n## Example  \n In this example, a `goto` statement transfers control to the point labeled `stop` when `i` equals 3.  \n  \n```  \n// goto_statement.cpp  \n#include <stdio.h>  \nint main()  \n{  \n    int i, j;  \n  \n    for ( i = 0; i < 10; i++ )  \n    {  \n        printf_s( \"Outer loop executing. i = %d\\n\", i );  \n        for ( j = 0; j < 2; j++ )  \n        {  \n            printf_s( \" Inner loop executing. j = %d\\n\", j );  \n            if ( i == 3 )  \n                goto stop;  \n        }  \n    }  \n  \n    // This message does not print:   \n    printf_s( \"Loop exited. i = %d\\n\", i );  \n  \n    stop:   \n    printf_s( \"Jumped to stop. i = %d\\n\", i );  \n}  \n```  \n  \n```Output  \nOuter loop executing. i = 0  \n Inner loop executing. j = 0  \n Inner loop executing. j = 1  \nOuter loop executing. i = 1  \n Inner loop executing. j = 0  \n Inner loop executing. j = 1  \nOuter loop executing. i = 2  \n Inner loop executing. j = 0  \n Inner loop executing. j = 1  \nOuter loop executing. i = 3  \n Inner loop executing. j = 0  \nJumped to stop. i = 3  \n```  \n  \n## See Also  \n [Jump Statements](../cpp/jump-statements-cpp.md)   \n [Keywords](../cpp/keywords-cpp.md)"}