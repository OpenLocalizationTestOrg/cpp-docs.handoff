{"nodes":[{"content":".NET Programming with C++-CLI (Visual C++)","pos":[3,45]},{"content":"C++-CLI Tasks","pos":[98,111]},{"content":"How to: Create CLR Empty Projects","pos":[136,169]},{"content":"How to: Create CLR Console Applications (C++-CLI)","pos":[213,262]},{"content":"How to: Use Tracking References in C++-CLI","pos":[320,362]},{"content":"How to: Use Arrays in C++-CLI","pos":[415,444]},{"content":"How to: Define and Consume Classes and Structs (C++-CLI)","pos":[484,540]},{"content":"C++ Stack Semantics for Reference Types","pos":[605,644]},{"content":"User-Defined Operators (C++-CLI)","pos":[695,727]},{"content":"User-Defined Conversions (C++-CLI)","pos":[769,803]},{"content":"initonly (C++-CLI)","pos":[847,865]},{"content":"How to: Define and Use Delegates (C++-CLI)","pos":[893,935]},{"content":"How to: Define and consume enums in C++-CLI","pos":[986,1029]},{"content":"How to: Use Events in C++-CLI","pos":[1083,1112]},{"content":"How to: Define an Interface Static Constructor (C++-CLI)","pos":[1152,1208]},{"content":"How to: Declare Override Specifiers in Native Compilations (C++-CLI)","pos":[1273,1341]},{"content":"How to: Use Properties in C++-CLI","pos":[1418,1451]},{"content":"How to: Use safe_cast in C++-CLI","pos":[1495,1527]},{"content":"Native and .NET Interoperability","pos":[1569,1601]},{"content":"Mixed (Native and Managed) Assemblies","pos":[1647,1684]},{"content":"How to: Migrate to -clr","pos":[1732,1755]},{"content":"How to: Compile MFC and ATL Code By Using -clr","pos":[1789,1835]},{"content":"Initialization of Mixed Assemblies","pos":[1892,1926]},{"content":"Library Support for Mixed Assemblies","pos":[1973,2009]},{"content":"Performance Considerations for Interop (C++)","pos":[2058,2102]},{"content":"Application Domains and Visual C++","pos":[2157,2191]},{"content":"Double Thunking (C++)","pos":[2238,2259]},{"content":"Avoiding Exceptions on CLR Shutdown When Consuming COM Objects Built with -clr","pos":[2291,2369]},{"content":"How to: Create a Partially Trusted Application by Removing Dependency on the CRT Library DLL","pos":[2459,2551]},{"content":"Using a Windows Form User Control in MFC","pos":[2601,2641]},{"content":"Windows Forms-MFC Programming Differences","pos":[2694,2735]},{"content":"Hosting a Windows Form User Control in an MFC Dialog Box","pos":[2789,2845]},{"content":"How to: Create the User Control and Host in a Dialog Box","pos":[2915,2971]},{"content":"How to: Do DDX-DDV Data Binding with Windows Forms","pos":[3040,3090]},{"content":"How to: Sink Windows Forms Events from Native C++ Classes","pos":[3153,3210]},{"content":"Hosting a Windows Forms User Control as an MFC View","pos":[3279,3330]},{"content":"How to: Create the User Control and Host MDI View","pos":[3395,3444]},{"content":"How to: Add Command Routing to the Windows Forms Control","pos":[3506,3562]},{"content":"How to: Call Properties and Methods of the Windows Forms Control","pos":[3631,3695]},{"content":"Hosting a Windows Form User Control as an MFC Dialog Box","pos":[3771,3827]},{"content":"Calling Native Functions from Managed Code","pos":[3895,3937]},{"content":"Using Explicit PInvoke in C++ (DllImport Attribute)","pos":[3992,4043]},{"content":"How to: Call Native DLLs from Managed Code Using PInvoke","pos":[4106,4162]},{"content":"How to: Marshal Strings Using PInvoke","pos":[4231,4268]},{"content":"How to: Marshal Structures Using PInvoke","pos":[4318,4358]},{"content":"How to: Marshal Arrays Using PInvoke","pos":[4411,4447]},{"content":"How to: Marshal Function Pointers Using PInvoke","pos":[4496,4543]},{"content":"How to: Marshal Embedded Pointers Using PInvoke","pos":[4603,4650]},{"content":"Using C++ Interop (Implicit PInvoke)","pos":[4709,4745]},{"content":"How to: Marshal ANSI Strings Using C++ Interop","pos":[4793,4839]},{"content":"How to: Marshal Unicode Strings Using C++ Interop","pos":[4898,4947]},{"content":"How to: Marshal COM Strings Using C++ Interop","pos":[5009,5054]},{"content":"How to: Marshal Structures Using C++ Interop","pos":[5112,5156]},{"content":"How to: Marshal Arrays Using C++ Interop","pos":[5213,5253]},{"content":"How to: Marshal Callbacks and Delegates By Using C++ Interop","pos":[5306,5366]},{"content":"How to: Marshal Embedded Pointers Using C++ Interop","pos":[5439,5490]},{"content":"How to: Extend the Marshaling Library","pos":[5554,5591]},{"content":"How to: Access Characters in a System::String","pos":[5641,5686]},{"content":"How to: Convert char * String to System::Byte Array","pos":[5743,5794]},{"pos":[5860,5911],"content":"How to: Convert System::String to wchar_t<bpt id=\"p1\">*</bpt> or char<ept id=\"p1\">*</ept>","source":"How to: Convert System::String to wchar_t* or char*"},{"content":"How to: Convert System::String to Standard String","pos":[5982,6031]},{"content":"How to: Convert Standard String to System::String","pos":[6092,6141]},{"content":"How to: Obtain a Pointer to Byte Array","pos":[6202,6240]},{"content":"How to: Load Unmanaged Resources into a Byte Array","pos":[6291,6341]},{"content":"How to: Modify Reference Class in a Native Function","pos":[6404,6455]},{"content":"How to: Determine if an Image is Native or CLR","pos":[6519,6565]},{"content":"How to: Add Native DLL to Global Assembly Cache","pos":[6624,6671]},{"content":"How to: Hold Reference to Value Type in Native Type","pos":[6731,6782]},{"content":"How to: Hold Object Reference in Unmanaged Memory","pos":[6846,6895]},{"content":"How to: Detect -clr Compilation","pos":[6957,6988]},{"content":"How to: Convert Between System::Guid and _GUID","pos":[7031,7077]},{"content":"How to: Specify an out Parameter","pos":[7134,7166]},{"content":"How to: Use a Native Type in a -clr Compilation","pos":[7211,7258]},{"content":"How to: Declare Handles in Native Types","pos":[7317,7356]},{"content":"How to: Wrap Native Class for Use by C","pos":[7408,7446]},{"content":"C++-CLI Migration Primer","pos":[7500,7524]},{"content":"Outline of Changes (C++-CLI)","pos":[7560,7588]},{"content":"Language Keywords (C++-CLI)","pos":[7626,7653]},{"content":"Managed Types (C++-CL)","pos":[7690,7712]},{"content":"Declaration of a Managed Class Type","pos":[7745,7780]},{"content":"Declaration of a CLR Reference Class Object","pos":[7828,7871]},{"content":"Declaration of a CLR Array","pos":[7927,7953]},{"content":"Changes in Constructor Initialization Order","pos":[7992,8035]},{"content":"Changes in Destructor Semantics","pos":[8091,8122]},{"content":"Member Declarations within a Class or Interface (C++-CLI)","pos":[8165,8222]},{"content":"Property Declaration","pos":[8290,8310]},{"content":"Property Index Declaration","pos":[8343,8369]},{"content":"Delegates and Events","pos":[8408,8428]},{"content":"Sealing a Virtual Function","pos":[8461,8487]},{"content":"Overloaded Operators","pos":[8526,8546]},{"content":"Changes to Conversion Operators","pos":[8579,8610]},{"content":"Explicit Override of an Interface Member","pos":[8654,8694]},{"content":"Private Virtual Functions","pos":[8747,8772]},{"content":"Static Const Int Linkage Is No Longer Literal","pos":[8810,8855]},{"content":"Value Types and Their Behaviors (C++-CLI)","pos":[8912,8953]},{"content":"CLR Enum Type","pos":[9005,9018]},{"content":"Implicit Boxing of Value Types","pos":[9044,9074]},{"content":"A Tracking Handle to a Boxed Value","pos":[9117,9151]},{"content":"Value Type Semantics","pos":[9198,9218]},{"content":"General Language Changes (C++-CLI)","pos":[9250,9284]},{"content":"String Literal","pos":[9329,9343]},{"content":"Param Array and Ellipsis","pos":[9370,9394]},{"content":"typeof Goes to T::typeid","pos":[9431,9455]},{"content":"Initializer Lists","pos":[9491,9508]},{"content":"Cast Notation and Introduction of safe_cast&lt;&gt;","pos":[9538,9583],"source":"Cast Notation and Introduction of safe_cast<>"},{"content":"Pure and Verifiable Code (C++-CLI)","pos":[9644,9678]},{"content":"Mixed, Pure, and Verifiable Feature Comparison (C++-CLI)","pos":[9722,9778]},{"content":"How to: Migrate to -clr:pure (C++-CLI)","pos":[9842,9880]},{"content":"How to: Create Verifiable C++ Projects (C++-CLI)","pos":[9926,9974]},{"content":"How to: Migrate to -clr:safe (C++-CLI)","pos":[10031,10069]},{"content":"Using Verifiable Assemblies with SQL Server (C++-CLI)","pos":[10115,10168]},{"content":"Converting Projects from Mixed Mode to Pure Intermediate Language","pos":[10231,10296]},{"content":"Regular Expressions (C++-CLI)","pos":[10372,10401]},{"content":"How to: Use Regular Expressions for Simple Matching (C++-CLI)","pos":[10440,10501]},{"content":"How to: Use Regular Expressions to Extract Data Fields (C++-CLI)","pos":[10571,10635]},{"content":"How to: Use Regular Expressions to Rearrange Data (C++-CLI)","pos":[10708,10767]},{"content":"How to: Use Regular Expressions to Search and Replace (C++-CLI)","pos":[10835,10898]},{"content":"How to: Use Regular Expressions to Validate Data Formatting (C++-CLI)","pos":[10970,11039]},{"content":"How to: Parse Strings Using the Split Method (C++-CLI)","pos":[11117,11171]},{"content":"How to: Parse Strings Using Regular Expressions (C++-CLI)","pos":[11234,11291]},{"content":"File Handling and I-O (C++-CLI)","pos":[11356,11387]},{"content":"How to: Enumerate Files in a Directory (C++-CLI)","pos":[11428,11476]},{"content":"How to: Monitor File System Changes (C++-CLI)","pos":[11533,11578]},{"content":"How to: Read a Binary File (C++-CLI)","pos":[11632,11668]},{"content":"How to: Read a Text File (C++-CLI)","pos":[11713,11747]},{"content":"How to: Retrieve File Information (C++-CLI)","pos":[11790,11833]},{"content":"How to: Write a Binary File (C++-CLI)","pos":[11885,11922]},{"content":"How to: Write a Text File (C++-CLI)","pos":[11968,12003]},{"content":"Graphics Operations (C++-CLI)","pos":[12046,12075]},{"content":"How to: Convert Image File Formats with the .NET Framework","pos":[12114,12172]},{"content":"How to: Display Images with the .NET Framework","pos":[12243,12289]},{"content":"How to: Draw Shapes with the .NET Framework","pos":[12348,12391]},{"content":"How to: Rotate Images with the .NET Framework","pos":[12447,12492]},{"content":"Windows Operations (C++-CLI)","pos":[12549,12577]},{"content":"How to: Determine if Shutdown Has Started (C++-CLI)","pos":[12615,12666]},{"content":"How to: Determine the User Interactive State (C++-CLI)","pos":[12726,12780]},{"content":"How to: Read Data from the Windows Registry (C++-CLI)","pos":[12843,12896]},{"content":"How to: Read Windows Performance Counters (C++-CLI)","pos":[12958,13009]},{"content":"How to: Retrieve Text from the Clipboard (C++-CLI)","pos":[13069,13119]},{"content":"How to: Retrieve the .NET Framework Version (C++-CLI)","pos":[13178,13231]},{"content":"How to: Retrieve the Current Username (C++-CLI)","pos":[13295,13342]},{"content":"How to: Retrieve the Local Machine Name (C++-CLI)","pos":[13398,13447]},{"content":"How to: Retrieve the Windows Version (C++-CLI)","pos":[13505,13551]},{"content":"How to: Retrieve Time Elapsed Since Startup (C++-CLI)","pos":[13606,13659]},{"content":"How to: Store Text in the Clipboard (C++-CLI)","pos":[13721,13766]},{"content":"How to: Write Data to the Windows Registry (C++-CLI)","pos":[13820,13872]},{"content":"Data Access Using ADO.NET (C++-CLI)","pos":[13932,13967]},{"content":"How to: Marshal ANSI Strings for ADO.NET (C++-CLI)","pos":[14011,14061]},{"content":"How to: Marshal BSTR Strings for ADO.NET (C++-CLI)","pos":[14119,14169]},{"content":"How to: Marshal Unicode Strings for ADO.NET (C++-CLI)","pos":[14227,14280]},{"content":"How to: Marshal a VARIANT for ADO.NET (C++-CLI)","pos":[14341,14388]},{"content":"How to: Marshal a SAFEARRAY for ADO.NET (C++-CLI)","pos":[14443,14492]},{"content":"Interoperability with Other .NET Languages (C++-CLI)","pos":[14548,14600]},{"content":"How to: Implement is and as C# Keywords (C++-CLI)","pos":[14664,14713]},{"content":"How to: Implement the lock C# Keyword (C++-CLI)","pos":[14775,14822]},{"content":"How to: Consume a C# Indexer (C++-CLI)","pos":[14882,14920]},{"content":"Serialization (C++-CLI)","pos":[14970,14993]},{"content":"Friend Assemblies (C++)","pos":[15025,15048]},{"content":"Managed Types (C++-CLI)","pos":[15080,15103]},{"content":"Managed Types and the main Function (C++-CLI)","pos":[15136,15181]},{"content":".NET Framework Equivalents to C++ Native Types (C++-CLI)","pos":[15236,15292]},{"content":"Version Issues for Value Types Nested in Native Types (C++-CLI)","pos":[15360,15423]},{"content":"How to: Test for Equality (C++-CLI)","pos":[15496,15531]},{"content":"How to: Diagnose and Fix Assembly Compatibility Problems (C++-CLI)","pos":[15575,15641]},{"content":"Reflection (C++-CLI)","pos":[15715,15735]},{"content":"How to: Implement a Plug-In Component Architecture using Reflection (C++-CLI)","pos":[15765,15842]},{"content":"How to: Enumerate Data Types in Assemblies using Reflection (C++-CLI)","pos":[15928,15997]},{"content":"Strong Name Assemblies (Assembly Signing) (C++-CLI)","pos":[16074,16125]},{"content":"Debug Class (C++-CLI)","pos":[16183,16204]},{"content":"STL-CLR Library Reference","pos":[16234,16259]},{"content":"cliext Namespace","pos":[16296,16312]},{"content":"STL-CLR Containers","pos":[16340,16358]},{"content":"Requirements for STL-CLR Container Elements","pos":[16388,16431]},{"content":"How to: Convert from a .NET Collection to a STL-CLR Container","pos":[16486,16547]},{"content":"How to: Convert from a STL-CLR Container to a .NET Collection","pos":[16621,16682]},{"content":"How to: Expose an STL-CLR Container from an Assembly","pos":[16756,16808]},{"content":"adapter (STL-CLR)","pos":[16871,16888]},{"content":"collection_adapter (STL-CLR)","pos":[16916,16944]},{"content":"collection_adapter::base (STL-CLR)","pos":[16983,17017]},{"content":"collection_adapter::begin (STL-CLR)","pos":[17061,17096]},{"content":"collection_adapter::collection_adapter (STL-CLR)","pos":[17141,17189]},{"content":"collection_adapter::difference_type (STL-CLR)","pos":[17247,17292]},{"content":"collection_adapter::end (STL-CLR)","pos":[17347,17380]},{"content":"collection_adapter::iterator (STL-CLR)","pos":[17423,17461]},{"content":"collection_adapter::key_type (STL-CLR)","pos":[17509,17547]},{"content":"collection_adapter::mapped_type (STL-CLR)","pos":[17595,17636]},{"content":"collection_adapter::operator= (STL-CLR)","pos":[17687,17726]},{"content":"collection_adapter::reference (STL-CLR)","pos":[17781,17820]},{"content":"collection_adapter::size (STL-CLR)","pos":[17869,17903]},{"content":"collection_adapter::size_type (STL-CLR)","pos":[17947,17986]},{"content":"collection_adapter::swap (STL-CLR)","pos":[18035,18069]},{"content":"collection_adapter::value_type (STL-CLR)","pos":[18113,18153]},{"content":"make_collection (STL-CLR)","pos":[18203,18228]},{"content":"range_adapter (STL-CLR)","pos":[18264,18287]},{"content":"range_adapter::operator= (STL-CLR)","pos":[18321,18355]},{"content":"range_adapter::range_adapter (STL-CLR)","pos":[18405,18443]},{"content":"algorithm (STL-CLR)","pos":[18490,18509]},{"content":"adjacent_find (STL-CLR)","pos":[18539,18562]},{"content":"binary_search (STL-CLR)","pos":[18596,18619]},{"content":"copy (STL-CLR)","pos":[18653,18667]},{"content":"copy_backward (STL-CLR)","pos":[18692,18715]},{"content":"count (STL-CLR)","pos":[18749,18764]},{"content":"count_if (STL-CLR)","pos":[18790,18808]},{"content":"equal (STL-CLR)","pos":[18837,18852]},{"content":"equal_range (STL-CLR)","pos":[18878,18899]},{"content":"fill (STL-CLR)","pos":[18931,18945]},{"content":"fill_n (STL-CLR)","pos":[18970,18986]},{"content":"find (STL-CLR)","pos":[19013,19027]},{"content":"find_end (STL-CLR)","pos":[19052,19070]},{"content":"find_first_of (STL-CLR)","pos":[19099,19122]},{"content":"find_if (STL-CLR)","pos":[19156,19173]},{"content":"for_each (STL-CLR)","pos":[19201,19219]},{"content":"generate (STL-CLR)","pos":[19248,19266]},{"content":"generate_n (STL-CLR)","pos":[19295,19315]},{"content":"includes (STL-CLR)","pos":[19346,19364]},{"content":"inplace_merge (STL-CLR)","pos":[19393,19416]},{"content":"iter_swap (STL-CLR)","pos":[19450,19469]},{"content":"lexicographical_compare (STL-CLR)","pos":[19499,19532]},{"content":"lower_bound (STL-CLR)","pos":[19576,19597]},{"content":"make_heap (STL-CLR)","pos":[19629,19648]},{"content":"max (STL-CLR)","pos":[19678,19691]},{"content":"max_element (STL-CLR)","pos":[19715,19736]},{"content":"merge (STL-CLR)","pos":[19768,19783]},{"content":"min (STL-CLR)","pos":[19809,19822]},{"content":"min_element (STL-CLR)","pos":[19846,19867]},{"content":"mismatch (STL-CLR)","pos":[19899,19917]},{"content":"next_permutation (STL-CLR)","pos":[19946,19972]},{"content":"nth_element (STL-CLR)","pos":[20009,20030]},{"content":"partial_sort (STL-CLR)","pos":[20062,20084]},{"content":"partial_sort_copy (STL-CLR)","pos":[20117,20144]},{"content":"partition (STL-CLR)","pos":[20182,20201]},{"content":"pop_heap (STL-CLR)","pos":[20231,20249]},{"content":"prev_permutation (STL-CLR)","pos":[20278,20304]},{"content":"push_heap (STL-CLR)","pos":[20341,20360]},{"content":"random_shuffle (STL-CLR)","pos":[20390,20414]},{"content":"remove (STL-CLR)","pos":[20449,20465]},{"content":"remove_copy (STL-CLR)","pos":[20492,20513]},{"content":"remove_copy_if (STL-CLR)","pos":[20545,20569]},{"content":"remove_if (STL-CLR)","pos":[20604,20623]},{"content":"replace (STL-CLR)","pos":[20653,20670]},{"content":"replace_copy (STL-CLR)","pos":[20698,20720]},{"content":"replace_copy_if (STL-CLR)","pos":[20753,20778]},{"content":"replace_if (STL-CLR)","pos":[20814,20834]},{"content":"reverse (STL-CLR)","pos":[20865,20882]},{"content":"reverse_copy (STL-CLR)","pos":[20910,20932]},{"content":"rotate (STL-CLR)","pos":[20965,20981]},{"content":"rotate_copy (STL-CLR)","pos":[21008,21029]},{"content":"search (STL-CLR)","pos":[21061,21077]},{"content":"search_n (STL-CLR)","pos":[21104,21122]},{"content":"set_difference (STL-CLR)","pos":[21151,21175]},{"content":"set_intersection (STL-CLR)","pos":[21210,21236]},{"content":"set_symmetric_difference (STL-CLR)","pos":[21273,21307]},{"content":"set_union (STL-CLR)","pos":[21352,21371]},{"content":"sort (STL-CLR)","pos":[21401,21415]},{"content":"sort_heap (STL-CLR)","pos":[21440,21459]},{"content":"stable_partition (STL-CLR)","pos":[21489,21515]},{"content":"stable_sort (STL-CLR)","pos":[21552,21573]},{"content":"swap (STL-CLR)","pos":[21605,21619]},{"content":"swap_ranges (STL-CLR)","pos":[21644,21665]},{"content":"transform (STL-CLR)","pos":[21697,21716]},{"content":"unique (STL-CLR)","pos":[21746,21762]},{"content":"unique_copy (STL-CLR)","pos":[21789,21810]},{"content":"upper_bound (STL-CLR)","pos":[21842,21863]},{"content":"deque (STL-CLR)","pos":[21894,21909]},{"content":"deque::assign (STL-CLR)","pos":[21935,21958]},{"content":"deque::at (STL-CLR)","pos":[21991,22010]},{"content":"deque::back (STL-CLR)","pos":[22039,22060]},{"content":"deque::back_item (STL-CLR)","pos":[22091,22117]},{"content":"deque::begin (STL-CLR)","pos":[22153,22175]},{"content":"deque::clear (STL-CLR)","pos":[22207,22229]},{"content":"deque::const_iterator (STL-CLR)","pos":[22261,22292]},{"content":"deque::const_reference (STL-CLR)","pos":[22333,22365]},{"content":"deque::const_reverse_iterator (STL-CLR)","pos":[22407,22446]},{"content":"deque::deque (STL-CLR)","pos":[22495,22517]},{"content":"deque::difference_type (STL-CLR)","pos":[22549,22581]},{"content":"deque::empty (STL-CLR)","pos":[22623,22645]},{"content":"deque::end (STL-CLR)","pos":[22677,22697]},{"content":"deque::erase (STL-CLR)","pos":[22727,22749]},{"content":"deque::front (STL-CLR)","pos":[22781,22803]},{"content":"deque::front_item (STL-CLR)","pos":[22835,22862]},{"content":"deque::generic_container (STL-CLR)","pos":[22899,22933]},{"content":"deque::generic_iterator (STL-CLR)","pos":[22977,23010]},{"content":"deque::generic_reverse_iterator (STL-CLR)","pos":[23053,23094]},{"content":"deque::generic_value (STL-CLR)","pos":[23145,23175]},{"content":"deque::insert (STL-CLR)","pos":[23215,23238]},{"content":"deque::iterator (STL-CLR)","pos":[23271,23296]},{"content":"deque::operator!= (STL-CLR)","pos":[23331,23358]},{"content":"deque::operator(STL-CLR)","pos":[23404,23428]},{"content":"deque::pop_back (STL-CLR)","pos":[23463,23488]},{"content":"deque::pop_front (STL-CLR)","pos":[23523,23549]},{"content":"deque::push_back (STL-CLR)","pos":[23585,23611]},{"content":"deque::push_front (STL-CLR)","pos":[23647,23674]},{"content":"deque::rbegin (STL-CLR)","pos":[23711,23734]},{"content":"deque::reference (STL-CLR)","pos":[23767,23793]},{"content":"deque::rend (STL-CLR)","pos":[23829,23850]},{"content":"deque::resize (STL-CLR)","pos":[23881,23904]},{"content":"deque::reverse_iterator (STL-CLR)","pos":[23937,23970]},{"content":"deque::size (STL-CLR)","pos":[24013,24034]},{"content":"deque::size_type (STL-CLR)","pos":[24065,24091]},{"content":"deque::swap (STL-CLR)","pos":[24127,24148]},{"content":"deque::to_array (STL-CLR)","pos":[24179,24204]},{"content":"deque::value_type (STL-CLR)","pos":[24239,24266]},{"content":"operator&lt; (deque) (STL-CLR)","pos":[24303,24330],"source":"operator< (deque) (STL-CLR)"},{"content":"operator&lt;= (deque) (STL-CLR)","pos":[24375,24403],"source":"operator<= (deque) (STL-CLR)"},{"content":"operator= (deque) (STL-CLR)","pos":[24452,24479]},{"content":"operator== (deque) (STL-CLR)","pos":[24521,24549]},{"content":"operator&gt; (deque) (STL-CLR)","pos":[24593,24620],"source":"operator> (deque) (STL-CLR)"},{"content":"operator&gt;= (deque) (STL-CLR)","pos":[24668,24696],"source":"operator>= (deque) (STL-CLR)"},{"content":"for each, in","pos":[24747,24759]},{"content":"Iterating Over STL Collection By Using for each","pos":[24783,24830]},{"content":"How to: Iterate Over Arrays with for each","pos":[24890,24931]},{"content":"How to: Iterate Over a Generic Collection with for each","pos":[24984,25039]},{"content":"How to: Iterate Over a User-Defined Collection with for each","pos":[25106,25166]},{"content":"functional (STL-CLR)","pos":[25237,25257]},{"content":"binary_delegate (STL-CLR)","pos":[25288,25313]},{"content":"binary_delegate_noreturn (STL-CLR)","pos":[25349,25383]},{"content":"binary_negate (STL-CLR)","pos":[25428,25451]},{"content":"bind1st (STL-CLR)","pos":[25485,25502]},{"content":"bind2nd (STL-CLR)","pos":[25530,25547]},{"content":"binder1st (STL-CLR)","pos":[25575,25594]},{"content":"binder2nd (STL-CLR)","pos":[25624,25643]},{"content":"divides (STL-CLR)","pos":[25673,25690]},{"content":"equal_to (STL-CLR)","pos":[25718,25736]},{"content":"greater (STL-CLR)","pos":[25765,25782]},{"content":"greater_equal (STL-CLR)","pos":[25810,25833]},{"content":"less (STL-CLR)","pos":[25867,25881]},{"content":"less_equal (STL-CLR)","pos":[25906,25926]},{"content":"logical_and (STL-CLR)","pos":[25957,25978]},{"content":"logical_not (STL-CLR)","pos":[26010,26031]},{"content":"logical_or (STL-CLR)","pos":[26063,26083]},{"content":"minus (STL-CLR)","pos":[26114,26129]},{"content":"modulus (STL-CLR)","pos":[26155,26172]},{"content":"multiplies (STL-CLR)","pos":[26200,26220]},{"content":"negate (STL-CLR)","pos":[26251,26267]},{"content":"not_equal_to (STL-CLR)","pos":[26294,26316]},{"content":"not1 (STL-CLR)","pos":[26349,26363]},{"content":"not2 (STL-CLR)","pos":[26388,26402]},{"content":"plus (STL-CLR)","pos":[26427,26441]},{"content":"unary_delegate (STL-CLR)","pos":[26466,26490]},{"content":"unary_delegate_noreturn (STL-CLR)","pos":[26525,26558]},{"content":"unary_negate (STL-CLR)","pos":[26602,26624]},{"content":"hash_map (STL-CLR)","pos":[26656,26674]},{"content":"hash_map::begin (STL-CLR)","pos":[26703,26728]},{"content":"hash_map::bucket_count (STL-CLR)","pos":[26763,26795]},{"content":"hash_map::clear (STL-CLR)","pos":[26837,26862]},{"content":"hash_map::const_iterator (STL-CLR)","pos":[26897,26931]},{"content":"hash_map::const_reference (STL-CLR)","pos":[26975,27010]},{"content":"hash_map::const_reverse_iterator (STL-CLR)","pos":[27055,27097]},{"content":"hash_map::count (STL-CLR)","pos":[27149,27174]},{"content":"hash_map::difference_type (STL-CLR)","pos":[27209,27244]},{"content":"hash_map::empty (STL-CLR)","pos":[27289,27314]},{"content":"hash_map::end (STL-CLR)","pos":[27349,27372]},{"content":"hash_map::equal_range (STL-CLR)","pos":[27405,27436]},{"content":"hash_map::erase (STL-CLR)","pos":[27477,27502]},{"content":"hash_map::find (STL-CLR)","pos":[27537,27561]},{"content":"hash_map::generic_container (STL-CLR)","pos":[27595,27632]},{"content":"hash_map::generic_iterator (STL-CLR)","pos":[27679,27715]},{"content":"hash_map::generic_reverse_iterator (STL-CLR)","pos":[27761,27805]},{"content":"hash_map::generic_value (STL-CLR)","pos":[27859,27892]},{"content":"hash_map::hash_delegate (STL-CLR)","pos":[27935,27968]},{"content":"hash_map::hash_map (STL-CLR)","pos":[28011,28039]},{"content":"hash_map::hasher (STL-CLR)","pos":[28077,28103]},{"content":"hash_map::insert (STL-CLR)","pos":[28139,28165]},{"content":"hash_map::iterator (STL-CLR)","pos":[28201,28229]},{"content":"hash_map::key_comp (STL-CLR)","pos":[28267,28295]},{"content":"hash_map::key_compare (STL-CLR)","pos":[28333,28364]},{"content":"hash_map::key_type (STL-CLR)","pos":[28405,28433]},{"content":"hash_map::load_factor (STL-CLR)","pos":[28471,28502]},{"content":"hash_map::lower_bound (STL-CLR)","pos":[28543,28574]},{"content":"hash_map::make_value (STL-CLR)","pos":[28615,28645]},{"content":"hash_map::mapped_type (STL-CLR)","pos":[28685,28716]},{"content":"hash_map::max_load_factor (STL-CLR)","pos":[28757,28792]},{"content":"hash_map::operator= (STL-CLR)","pos":[28837,28866]},{"content":"hash_map::operator(STL-CLR)","pos":[28911,28938]},{"content":"hash_map::rbegin (STL-CLR)","pos":[28976,29002]},{"content":"hash_map::reference (STL-CLR)","pos":[29038,29067]},{"content":"hash_map::rehash (STL-CLR)","pos":[29106,29132]},{"content":"hash_map::rend (STL-CLR)","pos":[29168,29192]},{"content":"hash_map::reverse_iterator (STL-CLR)","pos":[29226,29262]},{"content":"hash_map::size (STL-CLR)","pos":[29308,29332]},{"content":"hash_map::size_type (STL-CLR)","pos":[29366,29395]},{"content":"hash_map::swap (STL-CLR)","pos":[29434,29458]},{"content":"hash_map::to_array (STL-CLR)","pos":[29492,29520]},{"content":"hash_map::upper_bound (STL-CLR)","pos":[29558,29589]},{"content":"hash_map::value_comp (STL-CLR)","pos":[29630,29660]},{"content":"hash_map::value_compare (STL-CLR)","pos":[29700,29733]},{"content":"hash_map::value_type (STL-CLR)","pos":[29776,29806]},{"content":"hash_multimap (STL-CLR)","pos":[29845,29868]},{"content":"hash_multimap::begin (STL-CLR)","pos":[29902,29932]},{"content":"hash_multimap::bucket_count (STL-CLR)","pos":[29972,30009]},{"content":"hash_multimap::clear (STL-CLR)","pos":[30056,30086]},{"content":"hash_multimap::const_iterator (STL-CLR)","pos":[30126,30165]},{"content":"hash_multimap::const_reference (STL-CLR)","pos":[30214,30254]},{"content":"hash_multimap::const_reverse_iterator (STL-CLR)","pos":[30304,30351]},{"content":"hash_multimap::count (STL-CLR)","pos":[30408,30438]},{"content":"hash_multimap::difference_type (STL-CLR)","pos":[30478,30518]},{"content":"hash_multimap::empty (STL-CLR)","pos":[30568,30598]},{"content":"hash_multimap::end (STL-CLR)","pos":[30638,30666]},{"content":"hash_multimap::equal_range (STL-CLR)","pos":[30704,30740]},{"content":"hash_multimap::erase (STL-CLR)","pos":[30786,30816]},{"content":"hash_multimap::find (STL-CLR)","pos":[30856,30885]},{"content":"hash_multimap::generic_container (STL-CLR)","pos":[30924,30966]},{"content":"hash_multimap::generic_iterator (STL-CLR)","pos":[31018,31059]},{"content":"hash_multimap::generic_reverse_iterator (STL-CLR)","pos":[31110,31159]},{"content":"hash_multimap::generic_value (STL-CLR)","pos":[31218,31256]},{"content":"hash_multimap::hash_delegate (STL-CLR)","pos":[31304,31342]},{"content":"hash_multimap::hash_multimap (STL-CLR)","pos":[31390,31428]},{"content":"hash_multimap::hasher (STL-CLR)","pos":[31476,31507]},{"content":"hash_multimap::insert (STL-CLR)","pos":[31548,31579]},{"content":"hash_multimap::iterator (STL-CLR)","pos":[31620,31653]},{"content":"hash_multimap::key_comp (STL-CLR)","pos":[31696,31729]},{"content":"hash_multimap::key_compare (STL-CLR)","pos":[31772,31808]},{"content":"hash_multimap::key_type (STL-CLR)","pos":[31854,31887]},{"content":"hash_multimap::load_factor (STL-CLR)","pos":[31930,31966]},{"content":"hash_multimap::lower_bound (STL-CLR)","pos":[32012,32048]},{"content":"hash_multimap::make_value (STL-CLR)","pos":[32094,32129]},{"content":"hash_multimap::mapped_type (STL-CLR)","pos":[32174,32210]},{"content":"hash_multimap::max_load_factor (STL-CLR)","pos":[32256,32296]},{"content":"hash_multimap::operator= (STL-CLR)","pos":[32346,32380]},{"content":"hash_multimap::rbegin (STL-CLR)","pos":[32430,32461]},{"content":"hash_multimap::reference (STL-CLR)","pos":[32502,32536]},{"content":"hash_multimap::rehash (STL-CLR)","pos":[32580,32611]},{"content":"hash_multimap::rend (STL-CLR)","pos":[32652,32681]},{"content":"hash_multimap::reverse_iterator (STL-CLR)","pos":[32720,32761]},{"content":"hash_multimap::size (STL-CLR)","pos":[32812,32841]},{"content":"hash_multimap::size_type (STL-CLR)","pos":[32880,32914]},{"content":"hash_multimap::swap (STL-CLR)","pos":[32958,32987]},{"content":"hash_multimap::to_array (STL-CLR)","pos":[33026,33059]},{"content":"hash_multimap::upper_bound (STL-CLR)","pos":[33102,33138]},{"content":"hash_multimap::value_comp (STL-CLR)","pos":[33184,33219]},{"content":"hash_multimap::value_compare (STL-CLR)","pos":[33264,33302]},{"content":"hash_multimap::value_type (STL-CLR)","pos":[33350,33385]},{"content":"hash_multiset (STL-CLR)","pos":[33429,33452]},{"content":"hash_multiset::begin (STL-CLR)","pos":[33486,33516]},{"content":"hash_multiset::bucket_count (STL-CLR)","pos":[33556,33593]},{"content":"hash_multiset::clear (STL-CLR)","pos":[33640,33670]},{"content":"hash_multiset::const_iterator (STL-CLR)","pos":[33710,33749]},{"content":"hash_multiset::const_reference (STL-CLR)","pos":[33798,33838]},{"content":"hash_multiset::const_reverse_iterator (STL-CLR)","pos":[33888,33935]},{"content":"hash_multiset::count (STL-CLR)","pos":[33992,34022]},{"content":"hash_multiset::difference_type (STL-CLR)","pos":[34062,34102]},{"content":"hash_multiset::empty (STL-CLR)","pos":[34152,34182]},{"content":"hash_multiset::end (STL-CLR)","pos":[34222,34250]},{"content":"hash_multiset::equal_range (STL-CLR)","pos":[34288,34324]},{"content":"hash_multiset::erase (STL-CLR)","pos":[34370,34400]},{"content":"hash_multiset::find (STL-CLR)","pos":[34440,34469]},{"content":"hash_multiset::generic_container (STL-CLR)","pos":[34508,34550]},{"content":"hash_multiset::generic_iterator (STL-CLR)","pos":[34602,34643]},{"content":"hash_multiset::generic_reverse_iterator (STL-CLR)","pos":[34694,34743]},{"content":"hash_multiset::generic_value (STL-CLR)","pos":[34802,34840]},{"content":"hash_multiset::hash_delegate (STL-CLR)","pos":[34888,34926]},{"content":"hash_multiset::hash_multiset (STL-CLR)","pos":[34974,35012]},{"content":"hash_multiset::hasher (STL-CLR)","pos":[35060,35091]},{"content":"hash_multiset::insert (STL-CLR)","pos":[35132,35163]},{"content":"hash_multiset::iterator (STL-CLR)","pos":[35204,35237]},{"content":"hash_multiset::key_comp (STL-CLR)","pos":[35280,35313]},{"content":"hash_multiset::key_compare (STL-CLR)","pos":[35356,35392]},{"content":"hash_multiset::key_type (STL-CLR)","pos":[35438,35471]},{"content":"hash_multiset::load_factor (STL-CLR)","pos":[35514,35550]},{"content":"hash_multiset::lower_bound (STL-CLR)","pos":[35596,35632]},{"content":"hash_multiset::make_value (STL-CLR)","pos":[35678,35713]},{"content":"hash_multiset::max_load_factor (STL-CLR)","pos":[35758,35798]},{"content":"hash_multiset::operator= (STL-CLR)","pos":[35848,35882]},{"content":"hash_multiset::rbegin (STL-CLR)","pos":[35932,35963]},{"content":"hash_multiset::reference (STL-CLR)","pos":[36004,36038]},{"content":"hash_multiset::rehash (STL-CLR)","pos":[36082,36113]},{"content":"hash_multiset::rend (STL-CLR)","pos":[36154,36183]},{"content":"hash_multiset::reverse_iterator (STL-CLR)","pos":[36222,36263]},{"content":"hash_multiset::size (STL-CLR)","pos":[36314,36343]},{"content":"hash_multiset::size_type (STL-CLR)","pos":[36382,36416]},{"content":"hash_multiset::swap (STL-CLR)","pos":[36460,36489]},{"content":"hash_multiset::to_array (STL-CLR)","pos":[36528,36561]},{"content":"hash_multiset::upper_bound (STL-CLR)","pos":[36604,36640]},{"content":"hash_multiset::value_comp (STL-CLR)","pos":[36686,36721]},{"content":"hash_multiset::value_compare (STL-CLR)","pos":[36766,36804]},{"content":"hash_multiset::value_type (STL-CLR)","pos":[36852,36887]},{"content":"hash_set (STL-CLR)","pos":[36931,36949]},{"content":"hash_set::begin (STL-CLR)","pos":[36978,37003]},{"content":"hash_set::bucket_count (STL-CLR)","pos":[37038,37070]},{"content":"hash_set::clear (STL-CLR)","pos":[37112,37137]},{"content":"hash_set::const_iterator (STL-CLR)","pos":[37172,37206]},{"content":"hash_set::const_reference (STL-CLR)","pos":[37250,37285]},{"content":"hash_set::const_reverse_iterator (STL-CLR)","pos":[37330,37372]},{"content":"hash_set::count (STL-CLR)","pos":[37424,37449]},{"content":"hash_set::difference_type (STL-CLR)","pos":[37484,37519]},{"content":"hash_set::empty (STL-CLR)","pos":[37564,37589]},{"content":"hash_set::end (STL-CLR)","pos":[37624,37647]},{"content":"hash_set::equal_range (STL-CLR)","pos":[37680,37711]},{"content":"hash_set::erase (STL-CLR)","pos":[37752,37777]},{"content":"hash_set::find (STL-CLR)","pos":[37812,37836]},{"content":"hash_set::generic_container (STL-CLR)","pos":[37870,37907]},{"content":"hash_set::generic_iterator (STL-CLR)","pos":[37954,37990]},{"content":"hash_set::generic_reverse_iterator (STL-CLR)","pos":[38036,38080]},{"content":"hash_set::generic_value (STL-CLR)","pos":[38134,38167]},{"content":"hash_set::hash_delegate (STL-CLR)","pos":[38210,38243]},{"content":"hash_set::hash_set (STL-CLR)","pos":[38286,38314]},{"content":"hash_set::hasher (STL-CLR)","pos":[38352,38378]},{"content":"hash_set::insert (STL-CLR)","pos":[38414,38440]},{"content":"hash_set::iterator (STL-CLR)","pos":[38476,38504]},{"content":"hash_set::key_comp (STL-CLR)","pos":[38542,38570]},{"content":"hash_set::key_compare (STL-CLR)","pos":[38608,38639]},{"content":"hash_set::key_type (STL-CLR)","pos":[38680,38708]},{"content":"hash_set::load_factor (STL-CLR)","pos":[38746,38777]},{"content":"hash_set::lower_bound (STL-CLR)","pos":[38818,38849]},{"content":"hash_set::make_value (STL-CLR)","pos":[38890,38920]},{"content":"hash_set::max_load_factor (STL-CLR)","pos":[38960,38995]},{"content":"hash_set::operator= (STL-CLR)","pos":[39040,39069]},{"content":"hash_set::rbegin (STL-CLR)","pos":[39114,39140]},{"content":"hash_set::reference (STL-CLR)","pos":[39176,39205]},{"content":"hash_set::rehash (STL-CLR)","pos":[39244,39270]},{"content":"hash_set::rend (STL-CLR)","pos":[39306,39330]},{"content":"hash_set::reverse_iterator (STL-CLR)","pos":[39364,39400]},{"content":"hash_set::size (STL-CLR)","pos":[39446,39470]},{"content":"hash_set::size_type (STL-CLR)","pos":[39504,39533]},{"content":"hash_set::swap (STL-CLR)","pos":[39572,39596]},{"content":"hash_set::to_array (STL-CLR)","pos":[39630,39658]},{"content":"hash_set::upper_bound (STL-CLR)","pos":[39696,39727]},{"content":"hash_set::value_comp (STL-CLR)","pos":[39768,39798]},{"content":"hash_set::value_compare (STL-CLR)","pos":[39838,39871]},{"content":"hash_set::value_type (STL-CLR)","pos":[39914,39944]},{"content":"list (STL-CLR)","pos":[39983,39997]},{"content":"list::assign (STL-CLR)","pos":[40022,40044]},{"content":"list::back (STL-CLR)","pos":[40076,40096]},{"content":"list::back_item (STL-CLR)","pos":[40126,40151]},{"content":"list::begin (STL-CLR)","pos":[40186,40207]},{"content":"list::clear (STL-CLR)","pos":[40238,40259]},{"content":"list::const_iterator (STL-CLR)","pos":[40290,40320]},{"content":"list::const_reference (STL-CLR)","pos":[40360,40391]},{"content":"list::const_reverse_iterator (STL-CLR)","pos":[40432,40470]},{"content":"list::difference_type (STL-CLR)","pos":[40518,40549]},{"content":"list::empty (STL-CLR)","pos":[40590,40611]},{"content":"list::end (STL-CLR)","pos":[40642,40661]},{"content":"list::erase (STL-CLR)","pos":[40690,40711]},{"content":"list::front (STL-CLR)","pos":[40742,40763]},{"content":"list::front_item (STL-CLR)","pos":[40794,40820]},{"content":"list::generic_container (STL-CLR)","pos":[40856,40889]},{"content":"list::generic_iterator (STL-CLR)","pos":[40932,40964]},{"content":"list::generic_reverse_iterator (STL-CLR)","pos":[41006,41046]},{"content":"list::generic_value (STL-CLR)","pos":[41096,41125]},{"content":"list::insert (STL-CLR)","pos":[41164,41186]},{"content":"list::iterator (STL-CLR)","pos":[41218,41242]},{"content":"list::list (STL-CLR)","pos":[41276,41296]},{"content":"list::merge (STL-CLR)","pos":[41326,41347]},{"content":"list::operator= (STL-CLR)","pos":[41378,41403]},{"content":"list::pop_back (STL-CLR)","pos":[41444,41468]},{"content":"list::pop_front (STL-CLR)","pos":[41502,41527]},{"content":"list::push_back (STL-CLR)","pos":[41562,41587]},{"content":"list::push_front (STL-CLR)","pos":[41622,41648]},{"content":"list::rbegin (STL-CLR)","pos":[41684,41706]},{"content":"list::reference (STL-CLR)","pos":[41738,41763]},{"content":"list::remove (STL-CLR)","pos":[41798,41820]},{"content":"list::remove_if (STL-CLR)","pos":[41852,41877]},{"content":"list::rend (STL-CLR)","pos":[41912,41932]},{"content":"list::resize (STL-CLR)","pos":[41962,41984]},{"content":"list::reverse (STL-CLR)","pos":[42016,42039]},{"content":"list::reverse_iterator (STL-CLR)","pos":[42072,42104]},{"content":"list::size (STL-CLR)","pos":[42146,42166]},{"content":"list::size_type (STL-CLR)","pos":[42196,42221]},{"content":"list::sort (STL-CLR)","pos":[42256,42276]},{"content":"list::splice (STL-CLR)","pos":[42306,42328]},{"content":"list::swap (STL-CLR)","pos":[42360,42380]},{"content":"list::to_array (STL-CLR)","pos":[42410,42434]},{"content":"list::unique (STL-CLR)","pos":[42468,42490]},{"content":"list::value_type (STL-CLR)","pos":[42522,42548]},{"content":"operator!= (list) (STL-CLR)","pos":[42584,42611]},{"content":"operator&lt; (list) (STL-CLR)","pos":[42656,42682],"source":"operator< (list) (STL-CLR)"},{"content":"operator&lt;= (list) (STL-CLR)","pos":[42726,42753],"source":"operator<= (list) (STL-CLR)"},{"content":"operator== (list) (STL-CLR)","pos":[42801,42828]},{"content":"operator&gt; (list) (STL-CLR)","pos":[42871,42897],"source":"operator> (list) (STL-CLR)"},{"content":"operator&gt;= (list) (STL-CLR)","pos":[42944,42971],"source":"operator>= (list) (STL-CLR)"},{"content":"map (STL-CLR)","pos":[43021,43034]},{"content":"map::begin (STL-CLR)","pos":[43058,43078]},{"content":"map::clear (STL-CLR)","pos":[43108,43128]},{"content":"map::const_iterator (STL-CLR)","pos":[43158,43187]},{"content":"map::const_reference (STL-CLR)","pos":[43226,43256]},{"content":"map::const_reverse_iterator (STL-CLR)","pos":[43296,43333]},{"content":"map::count (STL-CLR)","pos":[43380,43400]},{"content":"map::difference_type (STL-CLR)","pos":[43430,43460]},{"content":"map::empty (STL-CLR)","pos":[43500,43520]},{"content":"map::end (STL-CLR)","pos":[43550,43568]},{"content":"map::equal_range (STL-CLR)","pos":[43596,43622]},{"content":"map::erase (STL-CLR)","pos":[43658,43678]},{"content":"map::find (STL-CLR)","pos":[43708,43727]},{"content":"map::generic_container (STL-CLR)","pos":[43756,43788]},{"content":"map::generic_iterator (STL-CLR)","pos":[43830,43861]},{"content":"map::generic_reverse_iterator (STL-CLR)","pos":[43902,43941]},{"content":"map::generic_value (STL-CLR)","pos":[43990,44018]},{"content":"map::insert (STL-CLR)","pos":[44056,44077]},{"content":"map::iterator (STL-CLR)","pos":[44108,44131]},{"content":"map::key_comp (STL-CLR)","pos":[44164,44187]},{"content":"map::key_compare (STL-CLR)","pos":[44220,44246]},{"content":"map::key_type (STL-CLR)","pos":[44282,44305]},{"content":"map::lower_bound (STL-CLR)","pos":[44338,44364]},{"content":"map::make_value (STL-CLR)","pos":[44400,44425]},{"content":"map::map (STL-CLR)","pos":[44460,44478]},{"content":"map::mapped_type (STL-CLR)","pos":[44506,44532]},{"content":"map::operator= (STL-CLR)","pos":[44568,44592]},{"content":"map::operator(STL-CLR)","pos":[44632,44654]},{"content":"map::rbegin (STL-CLR)","pos":[44687,44708]},{"content":"map::reference (STL-CLR)","pos":[44739,44763]},{"content":"map::rend (STL-CLR)","pos":[44797,44816]},{"content":"map::reverse_iterator (STL-CLR)","pos":[44845,44876]},{"content":"map::size (STL-CLR)","pos":[44917,44936]},{"content":"map::size_type (STL-CLR)","pos":[44965,44989]},{"content":"map::swap (STL-CLR)","pos":[45023,45042]},{"content":"map::to_array (STL-CLR)","pos":[45071,45094]},{"content":"map::upper_bound (STL-CLR)","pos":[45127,45153]},{"content":"map::value_comp (STL-CLR)","pos":[45189,45214]},{"content":"map::value_compare (STL-CLR)","pos":[45249,45277]},{"content":"map::value_type (STL-CLR)","pos":[45315,45340]},{"content":"operator!= (map) (STL-CLR)","pos":[45375,45401]},{"content":"operator&lt; (map) (STL-CLR)","pos":[45445,45470],"source":"operator< (map) (STL-CLR)"},{"content":"operator&lt;= (map) (STL-CLR)","pos":[45513,45539],"source":"operator<= (map) (STL-CLR)"},{"content":"operator== (map) (STL-CLR)","pos":[45586,45612]},{"content":"operator&gt; (map) (STL-CLR)","pos":[45654,45679],"source":"operator> (map) (STL-CLR)"},{"content":"operator&gt;= (map) (STL-CLR)","pos":[45725,45751],"source":"operator>= (map) (STL-CLR)"},{"content":"multimap (STL-CLR)","pos":[45800,45818]},{"content":"multimap::begin (STL-CLR)","pos":[45847,45872]},{"content":"multimap::clear (STL-CLR)","pos":[45907,45932]},{"content":"multimap::const_iterator (STL-CLR)","pos":[45967,46001]},{"content":"multimap::const_reference (STL-CLR)","pos":[46045,46080]},{"content":"multimap::const_reverse_iterator (STL-CLR)","pos":[46125,46167]},{"content":"multimap::count (STL-CLR)","pos":[46219,46244]},{"content":"multimap::difference_type (STL-CLR)","pos":[46279,46314]},{"content":"multimap::empty (STL-CLR)","pos":[46359,46384]},{"content":"multimap::end (STL-CLR)","pos":[46419,46442]},{"content":"multimap::equal_range (STL-CLR)","pos":[46475,46506]},{"content":"multimap::erase (STL-CLR)","pos":[46547,46572]},{"content":"multimap::find (STL-CLR)","pos":[46607,46631]},{"content":"multimap::generic_container (STL-CLR)","pos":[46665,46702]},{"content":"multimap::generic_iterator (STL-CLR)","pos":[46749,46785]},{"content":"multimap::generic_reverse_iterator (STL-CLR)","pos":[46831,46875]},{"content":"multimap::generic_value (STL-CLR)","pos":[46929,46962]},{"content":"multimap::insert (STL-CLR)","pos":[47005,47031]},{"content":"multimap::iterator (STL-CLR)","pos":[47067,47095]},{"content":"multimap::key_comp (STL-CLR)","pos":[47133,47161]},{"content":"multimap::key_compare (STL-CLR)","pos":[47199,47230]},{"content":"multimap::key_type (STL-CLR)","pos":[47271,47299]},{"content":"multimap::lower_bound (STL-CLR)","pos":[47337,47368]},{"content":"multimap::make_value (STL-CLR)","pos":[47409,47439]},{"content":"multimap::mapped_type (STL-CLR)","pos":[47479,47510]},{"content":"multimap::multimap (STL-CLR)","pos":[47551,47579]},{"content":"multimap::operator= (STL-CLR)","pos":[47617,47646]},{"content":"multimap::rbegin (STL-CLR)","pos":[47691,47717]},{"content":"multimap::reference (STL-CLR)","pos":[47753,47782]},{"content":"multimap::rend (STL-CLR)","pos":[47821,47845]},{"content":"multimap::reverse_iterator (STL-CLR)","pos":[47879,47915]},{"content":"multimap::size (STL-CLR)","pos":[47961,47985]},{"content":"multimap::size_type (STL-CLR)","pos":[48019,48048]},{"content":"multimap::swap (STL-CLR)","pos":[48087,48111]},{"content":"multimap::to_array (STL-CLR)","pos":[48145,48173]},{"content":"multimap::upper_bound (STL-CLR)","pos":[48211,48242]},{"content":"multimap::value_comp (STL-CLR)","pos":[48283,48313]},{"content":"multimap::value_compare (STL-CLR)","pos":[48353,48386]},{"content":"multimap::value_type (STL-CLR)","pos":[48429,48459]},{"content":"operator!= (multimap) (STL-CLR)","pos":[48499,48530]},{"content":"operator&lt; (multimap) (STL-CLR)","pos":[48579,48609],"source":"operator< (multimap) (STL-CLR)"},{"content":"operator&lt;= (multimap) (STL-CLR)","pos":[48657,48688],"source":"operator<= (multimap) (STL-CLR)"},{"content":"operator== (multimap) (STL-LR)","pos":[48740,48770]},{"content":"operator&gt; (multimap) (STL-CLR)","pos":[48816,48846],"source":"operator> (multimap) (STL-CLR)"},{"content":"operator&gt;= (multimap) (STL-CLR)","pos":[48897,48928],"source":"operator>= (multimap) (STL-CLR)"},{"content":"multiset (STL-CLR)","pos":[48982,49000]},{"content":"multiset::begin (STL-CLR)","pos":[49029,49054]},{"content":"multiset::clear (STL-CLR)","pos":[49089,49114]},{"content":"multiset::const_iterator (STL-CLR)","pos":[49149,49183]},{"content":"multiset::const_reference (STL-CLR)","pos":[49227,49262]},{"content":"multiset::const_reverse_iterator (STL-CLR)","pos":[49307,49349]},{"content":"multiset::count (STL-CLR)","pos":[49401,49426]},{"content":"multiset::difference_type (STL-CLR)","pos":[49461,49496]},{"content":"multiset::empty (STL-CLR)","pos":[49541,49566]},{"content":"multiset::end (STL-CLR)","pos":[49601,49624]},{"content":"multiset::equal_range (STL-CLR)","pos":[49657,49688]},{"content":"multiset::erase (STL-CLR)","pos":[49729,49754]},{"content":"multiset::find (STL-CLR)","pos":[49789,49813]},{"content":"multiset::generic_container (STL-CLR)","pos":[49847,49884]},{"content":"multiset::generic_iterator (STL-CLR)","pos":[49931,49967]},{"content":"multiset::generic_reverse_iterator (STL-CLR)","pos":[50013,50057]},{"content":"multiset::generic_value (STL-CLR)","pos":[50111,50144]},{"content":"multiset::insert (STL-CLR)","pos":[50187,50213]},{"content":"multiset::iterator (STL-CLR)","pos":[50249,50277]},{"content":"multiset::key_comp (STL-CLR)","pos":[50315,50343]},{"content":"multiset::key_compare (STL-CLR)","pos":[50381,50412]},{"content":"multiset::key_type (STL-CLR)","pos":[50453,50481]},{"content":"multiset::lower_bound (STL-CLR)","pos":[50519,50550]},{"content":"multiset::make_value (STL-CLR)","pos":[50591,50621]},{"content":"multiset::multiset (STL-CLR)","pos":[50661,50689]},{"content":"multiset::operator= (STL-CLR)","pos":[50727,50756]},{"content":"multiset::rbegin (STL-CLR)","pos":[50801,50827]},{"content":"multiset::reference (STL-CLR)","pos":[50863,50892]},{"content":"multiset::rend (STL-CLR)","pos":[50931,50955]},{"content":"multiset::reverse_iterator (STL-CLR)","pos":[50989,51025]},{"content":"multiset::size (STL-CLR)","pos":[51071,51095]},{"content":"multiset::size_type (STL-CLR)","pos":[51129,51158]},{"content":"multiset::swap (STL-CLR)","pos":[51197,51221]},{"content":"multiset::to_array (STL-CLR)","pos":[51255,51283]},{"content":"multiset::upper_bound (STL-CLR)","pos":[51321,51352]},{"content":"multiset::value_comp (STL-CLR)","pos":[51393,51423]},{"content":"multiset::value_compare (STL-CLR)","pos":[51463,51496]},{"content":"multiset::value_type (STL-CLR)","pos":[51539,51569]},{"content":"operator!= (multiset) (STL-CLR)","pos":[51609,51640]},{"content":"operator&lt; (multiset) (STL-CLR)","pos":[51689,51719],"source":"operator< (multiset) (STL-CLR)"},{"content":"operator&lt;= (multiset) (STL-CLR)","pos":[51767,51798],"source":"operator<= (multiset) (STL-CLR)"},{"content":"operator== (multiset) (STL-CLR)","pos":[51850,51881]},{"content":"operator&gt; (multiset) (STL-CLR)","pos":[51928,51958],"source":"operator> (multiset) (STL-CLR)"},{"content":"operator&gt;= (multiset) (STL-CLR)","pos":[52009,52040],"source":"operator>= (multiset) (STL-CLR)"},{"content":"numeric (STL-CLR)","pos":[52094,52111]},{"content":"accumulate (STL-CLR)","pos":[52139,52159]},{"content":"adjacent_difference (STL-CLR)","pos":[52190,52219]},{"content":"inner_product (STL-CLR)","pos":[52259,52282]},{"content":"partial_sum (STL-CLR)","pos":[52316,52337]},{"content":"priority_queue (STL-CLR)","pos":[52368,52392]},{"content":"priority_queue::assign (STL-CLR)","pos":[52427,52459]},{"content":"priority_queue::const_reference (STL-CLR)","pos":[52501,52542]},{"content":"priority_queue::container_type (STL-CLR)","pos":[52593,52633]},{"content":"priority_queue::difference_type (STL-CLR)","pos":[52683,52724]},{"content":"priority_queue::empty (STL-CLR)","pos":[52775,52806]},{"content":"priority_queue::generic_container (STL-CLR)","pos":[52847,52890]},{"content":"priority_queue::generic_value (STL-CLR)","pos":[52943,52982]},{"content":"priority_queue::get_container (STL-CLR)","pos":[53031,53070]},{"content":"priority_queue::operator= (STL-CLR)","pos":[53119,53154]},{"content":"priority_queue::pop (STL-CLR)","pos":[53205,53234]},{"content":"priority_queue::priority_queue (STL-CLR)","pos":[53273,53313]},{"content":"priority_queue::push (STL-CLR)","pos":[53363,53393]},{"content":"priority_queue::reference (STL-CLR)","pos":[53433,53468]},{"content":"priority_queue::size (STL-CLR)","pos":[53513,53543]},{"content":"priority_queue::size_type (STL-CLR)","pos":[53583,53618]},{"content":"priority_queue::to_array (STL-CLR)","pos":[53663,53697]},{"content":"priority_queue::top (STL-CLR)","pos":[53741,53770]},{"content":"priority_queue::top_item (STL-CLR)","pos":[53809,53843]},{"content":"priority_queue::value_comp (STL-CLR)","pos":[53887,53923]},{"content":"priority_queue::value_compare (STL-CLR)","pos":[53969,54008]},{"content":"priority_queue::value_type (STL-CLR)","pos":[54057,54093]},{"content":"queue (STL-CLR)","pos":[54138,54153]},{"content":"operator!= (queue) (STL-CLR)","pos":[54179,54207]},{"content":"operator&lt; (queue) (STL-CLR)","pos":[54253,54280],"source":"operator< (queue) (STL-CLR)"},{"content":"operator&lt;= (queue) (STL-CLR)","pos":[54325,54353],"source":"operator<= (queue) (STL-CLR)"},{"content":"operator== (queue) (STL-CLR)","pos":[54402,54430]},{"content":"operator&gt; (queue) (STL-CLR)","pos":[54474,54501],"source":"operator> (queue) (STL-CLR)"},{"content":"operator&gt;= (queue) (STL-CLR)","pos":[54549,54577],"source":"operator>= (queue) (STL-CLR)"},{"content":"queue::assign (STL-CLR)","pos":[54629,54652]},{"content":"queue::back (STL-CLR)","pos":[54685,54706]},{"content":"queue::back_item (STL-CLR)","pos":[54737,54763]},{"content":"queue::const_reference (STL-CLR)","pos":[54799,54831]},{"content":"queue::container_type (STL-CLR)","pos":[54873,54904]},{"content":"queue::difference_type (STL-CLR)","pos":[54945,54977]},{"content":"queue::empty (STL-CLR)","pos":[55019,55041]},{"content":"queue::front (STL-CLR)","pos":[55073,55095]},{"content":"queue::front_item (STL-CLR)","pos":[55127,55154]},{"content":"queue::generic_container (STL-CLR)","pos":[55191,55225]},{"content":"queue::generic_value (STL-CLR)","pos":[55269,55299]},{"content":"queue::get_container (STL-CLR)","pos":[55339,55369]},{"content":"queue::operator= (STL-CLR)","pos":[55409,55435]},{"content":"queue::pop (STL-CLR)","pos":[55477,55497]},{"content":"queue::push (STL-CLR)","pos":[55527,55548]},{"content":"queue::queue (STL-CLR)","pos":[55579,55601]},{"content":"queue::reference (STL-CLR)","pos":[55633,55659]},{"content":"queue::size (STL-CLR)","pos":[55695,55716]},{"content":"queue::size_type (STL-CLR)","pos":[55747,55773]},{"content":"queue::to_array (STL-CLR)","pos":[55809,55834]},{"content":"queue::value_type (STL-CLR)","pos":[55869,55896]},{"content":"set (STL-CLR)","pos":[55932,55945]},{"content":"operator!= (set) (STL-CLR)","pos":[55969,55995]},{"content":"operator&lt; (set) (STL-CLR)","pos":[56039,56064],"source":"operator< (set) (STL-CLR)"},{"content":"operator&lt;= (set) (STL-CLR)","pos":[56107,56133],"source":"operator<= (set) (STL-CLR)"},{"content":"operator== (set) (STL-CLR)","pos":[56180,56206]},{"content":"operator&gt; (set) (STL-CLR)","pos":[56248,56273],"source":"operator> (set) (STL-CLR)"},{"content":"operator&gt;= (set) (STL-CLR)","pos":[56319,56345],"source":"operator>= (set) (STL-CLR)"},{"content":"set::begin (STL-CLR)","pos":[56395,56415]},{"content":"set::clear (STL-CLR)","pos":[56445,56465]},{"content":"set::const_iterator (STL-CLR)","pos":[56495,56524]},{"content":"set::const_reference (STL-CLR)","pos":[56563,56593]},{"content":"set::const_reverse_iterator (STL-CLR)","pos":[56633,56670]},{"content":"set::count (STL-CLR)","pos":[56717,56737]},{"content":"set::difference_type (STL-CLR)","pos":[56767,56797]},{"content":"set::empty (STL-CLR)","pos":[56837,56857]},{"content":"set::end (STL-CLR)","pos":[56887,56905]},{"content":"set::equal_range (STL-CLR)","pos":[56933,56959]},{"content":"set::erase (STL-CLR)","pos":[56995,57015]},{"content":"set::find (STL-CLR)","pos":[57045,57064]},{"content":"set::generic_container (STL-CLR)","pos":[57093,57125]},{"content":"set::generic_iterator (STL-CLR)","pos":[57167,57198]},{"content":"set::generic_reverse_iterator (STL-CLR)","pos":[57239,57278]},{"content":"set::generic_value (STL-CLR)","pos":[57327,57355]},{"content":"set::insert (STL-CLR)","pos":[57393,57414]},{"content":"set::iterator (STL-CLR)","pos":[57445,57468]},{"content":"set::key_comp (STL-CLR)","pos":[57501,57524]},{"content":"set::key_compare (STL-CLR)","pos":[57557,57583]},{"content":"set::key_type (STL-CLR)","pos":[57619,57642]},{"content":"set::lower_bound (STL-CLR)","pos":[57675,57701]},{"content":"set::make_value (STL-CLR)","pos":[57737,57762]},{"content":"set::operator= (STL-CLR)","pos":[57797,57821]},{"content":"set::rbegin (STL-CLR)","pos":[57861,57882]},{"content":"set::reference (STL-CLR)","pos":[57913,57937]},{"content":"set::rend (STL-CLR)","pos":[57971,57990]},{"content":"set::reverse_iterator (STL-CLR)","pos":[58019,58050]},{"content":"set::set (STL-CLR)","pos":[58091,58109]},{"content":"set::size (STL-CLR)","pos":[58137,58156]},{"content":"set::size_type (STL-CLR)","pos":[58185,58209]},{"content":"set::swap (STL-CLR)","pos":[58243,58262]},{"content":"set::to_array (STL-CLR)","pos":[58291,58314]},{"content":"set::upper_bound (STL-CLR)","pos":[58347,58373]},{"content":"set::value_comp (STL-CLR)","pos":[58409,58434]},{"content":"set::value_compare (STL-CLR)","pos":[58469,58497]},{"content":"set::value_type (STL-CLR)","pos":[58535,58560]},{"content":"stack (STL-CLR)","pos":[58594,58609]},{"content":"operator!= (stack) (STL-CLR)","pos":[58635,58663]},{"content":"operator&lt; (stack) (STL-CLR)","pos":[58709,58736],"source":"operator< (stack) (STL-CLR)"},{"content":"operator&lt;= (stack) (STL-CLR)","pos":[58781,58809],"source":"operator<= (stack) (STL-CLR)"},{"content":"operator== (stack) (STL-CLR)","pos":[58858,58886]},{"content":"operator&gt; (stack) (STL-CLR)","pos":[58930,58957],"source":"operator> (stack) (STL-CLR)"},{"content":"operator&gt;= (stack) (STL-CLR)","pos":[59005,59033],"source":"operator>= (stack) (STL-CLR)"},{"content":"stack::assign (STL-CLR)","pos":[59085,59108]},{"content":"stack::const_reference (STL-CLR)","pos":[59141,59173]},{"content":"stack::container_type (STL-CLR)","pos":[59215,59246]},{"content":"stack::difference_type (STL-CLR)","pos":[59287,59319]},{"content":"stack::empty (STL-CLR)","pos":[59361,59383]},{"content":"stack::generic_container (STL-CLR)","pos":[59415,59449]},{"content":"stack::generic_value (STL-CLR)","pos":[59493,59523]},{"content":"stack::get_container (STL-CLR)","pos":[59563,59593]},{"content":"stack::operator= (STL-CLR)","pos":[59633,59659]},{"content":"stack::pop (STL-CLR)","pos":[59701,59721]},{"content":"stack::push (STL-CLR)","pos":[59751,59772]},{"content":"stack::reference (STL-CLR)","pos":[59803,59829]},{"content":"stack::size (STL-CLR)","pos":[59865,59886]},{"content":"stack::size_type (STL-CLR)","pos":[59917,59943]},{"content":"stack::stack (STL-CLR)","pos":[59979,60001]},{"content":"stack::to_array (STL-CLR)","pos":[60033,60058]},{"content":"stack::top (STL-CLR)","pos":[60093,60113]},{"content":"stack::top_item (STL-CLR)","pos":[60143,60168]},{"content":"stack::value_type (STL-CLR)","pos":[60203,60230]},{"content":"utility (STL-CLR)","pos":[60266,60283]},{"content":"make_pair (STL-CLR)","pos":[60311,60330]},{"content":"operator!= (pair) (STL-CLR)","pos":[60360,60387]},{"content":"operator&lt; (pair) (STL-CLR)","pos":[60432,60458],"source":"operator< (pair) (STL-CLR)"},{"content":"operator&lt;= (pair) (STL-CLR)","pos":[60502,60529],"source":"operator<= (pair) (STL-CLR)"},{"content":"operator== (pair) (STL-CLR)","pos":[60577,60604]},{"content":"operator&gt; (pair) (STL-CLR)","pos":[60647,60673],"source":"operator> (pair) (STL-CLR)"},{"content":"operator&gt;= (pair) (STL-CLR)","pos":[60720,60747],"source":"operator>= (pair) (STL-CLR)"},{"content":"pair (STL-CLR)","pos":[60798,60812]},{"content":"pair::first (STL-CLR)","pos":[60837,60858]},{"content":"pair::first_type (STL-CLR)","pos":[60889,60915]},{"content":"pair::operator= (STL-CLR)","pos":[60951,60976]},{"content":"pair::pair (STL-CLR)","pos":[61017,61037]},{"content":"pair::second (STL-CLR)","pos":[61067,61089]},{"content":"pair::second_type (STL-CLR)","pos":[61121,61148]},{"content":"pair::swap (STL-CLR)","pos":[61185,61205]},{"content":"vector (STL-CLR)","pos":[61234,61250]},{"content":"operator!= (vector) (STL-CLR)","pos":[61277,61306]},{"content":"operator&lt; (vector) (STL-CLR)","pos":[61353,61381],"source":"operator< (vector) (STL-CLR)"},{"content":"operator&lt;= (vector) (STL-CLR)","pos":[61427,61456],"source":"operator<= (vector) (STL-CLR)"},{"content":"operator== (vector) (STL-CLR)","pos":[61506,61535]},{"content":"operator&gt; (vector) (STL-CLR)","pos":[61580,61608],"source":"operator> (vector) (STL-CLR)"},{"content":"operator&gt;= (vector) (STL-CLR)","pos":[61657,61686],"source":"operator>= (vector) (STL-CLR)"},{"content":"vector::assign (STL-CLR)","pos":[61739,61763]},{"content":"vector::at (STL-CLR)","pos":[61797,61817]},{"content":"vector::back (STL-CLR)","pos":[61847,61869]},{"content":"vector::back_item (STL-CLR)","pos":[61901,61928]},{"content":"vector::begin (STL-CLR)","pos":[61965,61988]},{"content":"vector::capacity (STL-CLR)","pos":[62021,62047]},{"content":"vector::clear (STL-CLR)","pos":[62083,62106]},{"content":"vector::const_iterator (STL-CLR)","pos":[62139,62171]},{"content":"vector::const_reference (STL-CLR)","pos":[62213,62246]},{"content":"vector::const_reverse_iterator (STL-CLR)","pos":[62289,62329]},{"content":"vector::difference_type (STL-CLR)","pos":[62379,62412]},{"content":"vector::empty (STL-CLR)","pos":[62455,62478]},{"content":"vector::end (STL-CLR)","pos":[62511,62532]},{"content":"vector::erase (STL-CLR)","pos":[62563,62586]},{"content":"vector::front (STL-CLR)","pos":[62619,62642]},{"content":"vector::front_item (STL-CLR)","pos":[62675,62703]},{"content":"vector::generic_container (STL-CLR)","pos":[62741,62776]},{"content":"vector::generic_iterator (STL-CLR)","pos":[62821,62855]},{"content":"vector::generic_reverse_iterator (STL-CLR)","pos":[62899,62941]},{"content":"vector::generic_value (STL-CLR)","pos":[62993,63024]},{"content":"vector::insert (STL-CLR)","pos":[63065,63089]},{"content":"vector::iterator (STL-CLR)","pos":[63123,63149]},{"content":"vector::operator= (STL-CLR)","pos":[63185,63212]},{"content":"vector::operator(STL-CLR)","pos":[63255,63280]},{"content":"vector::pop_back (STL-CLR)","pos":[63316,63342]},{"content":"vector::push_back (STL-CLR)","pos":[63378,63405]},{"content":"vector::rbegin (STL-CLR)","pos":[63442,63466]},{"content":"vector::reference (STL-CLR)","pos":[63500,63527]},{"content":"vector::rend (STL-CLR)","pos":[63564,63586]},{"content":"vector::reserve (STL-CLR)","pos":[63618,63643]},{"content":"vector::resize (STL-CLR)","pos":[63678,63702]},{"content":"vector::reverse_iterator (STL-CLR)","pos":[63736,63770]},{"content":"vector::size (STL-CLR)","pos":[63814,63836]},{"content":"vector::size_type (STL-CLR)","pos":[63868,63895]},{"content":"vector::swap (STL-CLR)","pos":[63932,63954]},{"content":"vector::to_array (STL-CLR)","pos":[63986,64012]},{"content":"vector::value_type (STL-CLR)","pos":[64048,64076]},{"content":"vector::vector (STL-CLR)","pos":[64114,64138]},{"content":"C++ Support Library","pos":[64170,64189]},{"content":"Overview of Marshaling in C++","pos":[64220,64249]},{"content":"marshal_as","pos":[64291,64301]},{"content":"marshal_context Class","pos":[64324,64345]},{"content":"marshal_context::marshal_context","pos":[64380,64412]},{"content":"marshal_context::~marshal_context","pos":[64457,64490]},{"content":"marshal_context::marshal_as","pos":[64541,64568]},{"content":"msclr namespace","pos":[64606,64621]},{"content":"Resource Management Classes","pos":[64648,64675]},{"content":"auto_gcroot","pos":[64715,64726]},{"content":"auto_gcroot Class","pos":[64751,64768]},{"content":"auto_gcroot Members","pos":[64800,64819]},{"content":"auto_gcroot::auto_gcroot","pos":[64853,64877]},{"content":"auto_gcroot::~auto_gcroot","pos":[64915,64940]},{"content":"auto_gcroot::attach","pos":[64984,65003]},{"content":"auto_gcroot::get","pos":[65036,65052]},{"content":"auto_gcroot::release","pos":[65082,65102]},{"content":"auto_gcroot::reset","pos":[65136,65154]},{"content":"auto_gcroot::swap","pos":[65186,65203]},{"content":"auto_gcroot::operator=","pos":[65234,65256]},{"content":"auto_gcroot::operator-&gt;","pos":[65298,65321],"source":"auto_gcroot::operator->"},{"content":"auto_gcroot::operator!","pos":[65362,65384]},{"content":"auto_gcroot::operator auto_gcroot","pos":[65431,65464]},{"content":"auto_gcroot::operator bool","pos":[65511,65537]},{"content":"swap Function (auto_gcroot)","pos":[65576,65603]},{"content":"auto_handle","pos":[65641,65652]},{"content":"auto_handle Class","pos":[65677,65694]},{"content":"auto_handle Members","pos":[65726,65745]},{"content":"auto_handle::auto_handle","pos":[65779,65803]},{"content":"auto_handle::~auto_handle","pos":[65841,65866]},{"content":"auto_handle::get","pos":[65910,65926]},{"content":"auto_handle::release","pos":[65956,65976]},{"content":"auto_handle::reset","pos":[66010,66028]},{"content":"auto_handle::swap","pos":[66060,66077]},{"content":"auto_handle::operator=","pos":[66108,66130]},{"content":"auto_handle::operator-&gt;","pos":[66172,66195],"source":"auto_handle::operator->"},{"content":"auto_handle::operator!","pos":[66236,66258]},{"content":"auto_handle::operator auto_handle","pos":[66305,66338]},{"content":"auto_handle::operator bool","pos":[66385,66411]},{"content":"swap Function (auto_handle)","pos":[66450,66477]},{"content":"Synchronization (lock Class)","pos":[66514,66542]},{"content":"lock","pos":[66581,66585]},{"content":"lock Class","pos":[66603,66613]},{"content":"lock Members","pos":[66638,66650]},{"content":"lock::lock","pos":[66677,66687]},{"content":"lock::~lock","pos":[66711,66722]},{"content":"lock::is_locked","pos":[66752,66767]},{"content":"lock::operator bool","pos":[66796,66815]},{"content":"lock::acquire","pos":[66848,66861]},{"content":"lock::try_acquire","pos":[66888,66905]},{"content":"lock::release","pos":[66936,66949]},{"content":"lock::operator==","pos":[66976,66992]},{"content":"lock::operator!=","pos":[67029,67045]},{"content":"lock_when Enum","pos":[67083,67097]},{"content":"Calling Functions in a Specific Application Domain","pos":[67123,67173]},{"content":"call_in_appdomain Function","pos":[67236,67262]},{"content":"com::ptr","pos":[67300,67308]},{"content":"com::ptr Class","pos":[67328,67342]},{"content":"ptr Members","pos":[67369,67380]},{"content":"ptr::ptr","pos":[67405,67413]},{"content":"ptr::~ptr","pos":[67434,67443]},{"content":"ptr::Attach","pos":[67470,67481]},{"content":"ptr::CreateInstance","pos":[67505,67524]},{"content":"ptr::Detach","pos":[67556,67567]},{"content":"ptr::GetInterface","pos":[67591,67608]},{"content":"ptr::QueryInterface","pos":[67638,67657]},{"content":"ptr::Release","pos":[67689,67701]},{"content":"ptr::operator=","pos":[67726,67740]},{"content":"ptr::operator-&gt;","pos":[67773,67788],"source":"ptr::operator->"},{"content":"ptr::operator!","pos":[67820,67834]},{"content":"ptr::operator bool","pos":[67872,67890]},{"content":"Exceptions in C++-CLI","pos":[67918,67939]},{"content":"Basic Concepts in Using Managed Exceptions","pos":[67972,68014]},{"content":"Differences in Exception Handling Behavior Under -CLR","pos":[68068,68121]},{"content":"finally","pos":[68185,68192]},{"content":"How to: Catch Exceptions in Native Code Thrown from MSIL","pos":[68211,68267]},{"content":"How to: Define and Install a Global Exception Handler","pos":[68334,68387]},{"content":"Boxing (C++-CLI)","pos":[68450,68466]},{"content":"How to: Explicitly Request Boxing","pos":[68492,68525]},{"content":"How to: Use gcnew to Create Value Types and Use Implicit Boxing","pos":[68569,68632]},{"content":"How to: Unbox","pos":[68706,68719]},{"content":"Standard Conversions and Implicit Boxing","pos":[68743,68783]}],"content":"# [.NET Programming with C++-CLI (Visual C++)](dotnet-programming-with-cpp-cli-visual-cpp.md)\n## [C++-CLI Tasks](cpp-cli-tasks.md)\n### [How to: Create CLR Empty Projects](how-to-create-clr-empty-projects.md)\n### [How to: Create CLR Console Applications (C++-CLI)](how-to-create-clr-console-applications-cpp-cli.md)\n### [How to: Use Tracking References in C++-CLI](how-to-use-tracking-references-in-cpp-cli.md)\n### [How to: Use Arrays in C++-CLI](how-to-use-arrays-in-cpp-cli.md)\n### [How to: Define and Consume Classes and Structs (C++-CLI)](how-to-define-and-consume-classes-and-structs-cpp-cli.md)\n### [C++ Stack Semantics for Reference Types](cpp-stack-semantics-for-reference-types.md)\n### [User-Defined Operators (C++-CLI)](user-defined-operators-cpp-cli.md)\n### [User-Defined Conversions (C++-CLI)](user-defined-conversions-cpp-cli.md)\n### [initonly (C++-CLI)](initonly-cpp-cli.md)\n### [How to: Define and Use Delegates (C++-CLI)](how-to-define-and-use-delegates-cpp-cli.md)\n### [How to: Define and consume enums in C++-CLI](how-to-define-and-consume-enums-in-cpp-cli.md)\n### [How to: Use Events in C++-CLI](how-to-use-events-in-cpp-cli.md)\n### [How to: Define an Interface Static Constructor (C++-CLI)](how-to-define-an-interface-static-constructor-cpp-cli.md)\n### [How to: Declare Override Specifiers in Native Compilations (C++-CLI)](how-to-declare-override-specifiers-in-native-compilations-cpp-cli.md)\n### [How to: Use Properties in C++-CLI](how-to-use-properties-in-cpp-cli.md)\n### [How to: Use safe_cast in C++-CLI](how-to-use-safe-cast-in-cpp-cli.md)\n## [Native and .NET Interoperability](native-and-dotnet-interoperability.md)\n### [Mixed (Native and Managed) Assemblies](mixed-native-and-managed-assemblies.md)\n#### [How to: Migrate to -clr](how-to-migrate-to-clr.md)\n#### [How to: Compile MFC and ATL Code By Using -clr](how-to-compile-mfc-and-atl-code-by-using-clr.md)\n#### [Initialization of Mixed Assemblies](initialization-of-mixed-assemblies.md)\n#### [Library Support for Mixed Assemblies](library-support-for-mixed-assemblies.md)\n#### [Performance Considerations for Interop (C++)](performance-considerations-for-interop-cpp.md)\n#### [Application Domains and Visual C++](application-domains-and-visual-cpp.md)\n#### [Double Thunking (C++)](double-thunking-cpp.md)\n#### [Avoiding Exceptions on CLR Shutdown When Consuming COM Objects Built with -clr](avoiding-exceptions-on-clr-shutdown-when-consuming-com-objects-built-with-clr.md)\n#### [How to: Create a Partially Trusted Application by Removing Dependency on the CRT Library DLL](create-a-partially-trusted-application.md)\n### [Using a Windows Form User Control in MFC](using-a-windows-form-user-control-in-mfc.md)\n#### [Windows Forms-MFC Programming Differences](windows-forms-mfc-programming-differences.md)\n#### [Hosting a Windows Form User Control in an MFC Dialog Box](hosting-a-windows-form-user-control-in-an-mfc-dialog-box.md)\n##### [How to: Create the User Control and Host in a Dialog Box](how-to-create-the-user-control-and-host-in-a-dialog-box.md)\n##### [How to: Do DDX-DDV Data Binding with Windows Forms](how-to-do-ddx-ddv-data-binding-with-windows-forms.md)\n##### [How to: Sink Windows Forms Events from Native C++ Classes](how-to-sink-windows-forms-events-from-native-cpp-classes.md)\n#### [Hosting a Windows Forms User Control as an MFC View](hosting-a-windows-forms-user-control-as-an-mfc-view.md)\n##### [How to: Create the User Control and Host MDI View](how-to-create-the-user-control-and-host-mdi-view.md)\n##### [How to: Add Command Routing to the Windows Forms Control](how-to-add-command-routing-to-the-windows-forms-control.md)\n##### [How to: Call Properties and Methods of the Windows Forms Control](how-to-call-properties-and-methods-of-the-windows-forms-control.md)\n#### [Hosting a Windows Form User Control as an MFC Dialog Box](hosting-a-windows-form-user-control-as-an-mfc-dialog-box.md)\n### [Calling Native Functions from Managed Code](calling-native-functions-from-managed-code.md)\n#### [Using Explicit PInvoke in C++ (DllImport Attribute)](using-explicit-pinvoke-in-cpp-dllimport-attribute.md)\n##### [How to: Call Native DLLs from Managed Code Using PInvoke](how-to-call-native-dlls-from-managed-code-using-pinvoke.md)\n##### [How to: Marshal Strings Using PInvoke](how-to-marshal-strings-using-pinvoke.md)\n##### [How to: Marshal Structures Using PInvoke](how-to-marshal-structures-using-pinvoke.md)\n##### [How to: Marshal Arrays Using PInvoke](how-to-marshal-arrays-using-pinvoke.md)\n##### [How to: Marshal Function Pointers Using PInvoke](how-to-marshal-function-pointers-using-pinvoke.md)\n##### [How to: Marshal Embedded Pointers Using PInvoke](how-to-marshal-embedded-pointers-using-pinvoke.md)\n#### [Using C++ Interop (Implicit PInvoke)](using-cpp-interop-implicit-pinvoke.md)\n##### [How to: Marshal ANSI Strings Using C++ Interop](how-to-marshal-ansi-strings-using-cpp-interop.md)\n##### [How to: Marshal Unicode Strings Using C++ Interop](how-to-marshal-unicode-strings-using-cpp-interop.md)\n##### [How to: Marshal COM Strings Using C++ Interop](how-to-marshal-com-strings-using-cpp-interop.md)\n##### [How to: Marshal Structures Using C++ Interop](how-to-marshal-structures-using-cpp-interop.md)\n##### [How to: Marshal Arrays Using C++ Interop](how-to-marshal-arrays-using-cpp-interop.md)\n##### [How to: Marshal Callbacks and Delegates By Using C++ Interop](how-to-marshal-callbacks-and-delegates-by-using-cpp-interop.md)\n##### [How to: Marshal Embedded Pointers Using C++ Interop](how-to-marshal-embedded-pointers-using-cpp-interop.md)\n##### [How to: Extend the Marshaling Library](how-to-extend-the-marshaling-library.md)\n##### [How to: Access Characters in a System::String](how-to-access-characters-in-a-system-string.md)\n##### [How to: Convert char * String to System::Byte Array](how-to-convert-char-star-string-to-system-byte-array.md)\n##### [How to: Convert System::String to wchar_t* or char*](how-to-convert-system-string-to-wchar-t-star-or-char-star.md)\n##### [How to: Convert System::String to Standard String](how-to-convert-system-string-to-standard-string.md)\n##### [How to: Convert Standard String to System::String](how-to-convert-standard-string-to-system-string.md)\n##### [How to: Obtain a Pointer to Byte Array](how-to-obtain-a-pointer-to-byte-array.md)\n##### [How to: Load Unmanaged Resources into a Byte Array](how-to-load-unmanaged-resources-into-a-byte-array.md)\n##### [How to: Modify Reference Class in a Native Function](how-to-modify-reference-class-in-a-native-function.md)\n##### [How to: Determine if an Image is Native or CLR](how-to-determine-if-an-image-is-native-or-clr.md)\n##### [How to: Add Native DLL to Global Assembly Cache](how-to-add-native-dll-to-global-assembly-cache.md)\n##### [How to: Hold Reference to Value Type in Native Type](how-to-hold-reference-to-value-type-in-native-type.md)\n##### [How to: Hold Object Reference in Unmanaged Memory](how-to-hold-object-reference-in-unmanaged-memory.md)\n##### [How to: Detect -clr Compilation](how-to-detect-clr-compilation.md)\n##### [How to: Convert Between System::Guid and _GUID](how-to-convert-between-system-guid-and-guid.md)\n##### [How to: Specify an out Parameter](how-to-specify-an-out-parameter.md)\n##### [How to: Use a Native Type in a -clr Compilation](how-to-use-a-native-type-in-a-clr-compilation.md)\n##### [How to: Declare Handles in Native Types](how-to-declare-handles-in-native-types.md)\n##### [How to: Wrap Native Class for Use by C#](how-to-wrap-native-class-for-use-by-csharp.md)\n## [C++-CLI Migration Primer](cpp-cli-migration-primer.md)\n### [Outline of Changes (C++-CLI)](outline-of-changes-cpp-cli.md)\n### [Language Keywords (C++-CLI)](language-keywords-cpp-cli.md)\n### [Managed Types (C++-CL)](managed-types-cpp-cl.md)\n#### [Declaration of a Managed Class Type](declaration-of-a-managed-class-type.md)\n#### [Declaration of a CLR Reference Class Object](declaration-of-a-clr-reference-class-object.md)\n#### [Declaration of a CLR Array](declaration-of-a-clr-array.md)\n#### [Changes in Constructor Initialization Order](changes-in-constructor-initialization-order.md)\n#### [Changes in Destructor Semantics](changes-in-destructor-semantics.md)\n### [Member Declarations within a Class or Interface (C++-CLI)](member-declarations-within-a-class-or-interface-cpp-cli.md)\n#### [Property Declaration](property-declaration.md)\n#### [Property Index Declaration](property-index-declaration.md)\n#### [Delegates and Events](delegates-and-events.md)\n#### [Sealing a Virtual Function](sealing-a-virtual-function.md)\n#### [Overloaded Operators](overloaded-operators.md)\n#### [Changes to Conversion Operators](changes-to-conversion-operators.md)\n#### [Explicit Override of an Interface Member](explicit-override-of-an-interface-member.md)\n#### [Private Virtual Functions](private-virtual-functions.md)\n#### [Static Const Int Linkage Is No Longer Literal](static-const-int-linkage-is-no-longer-literal.md)\n### [Value Types and Their Behaviors (C++-CLI)](value-types-and-their-behaviors-cpp-cli.md)\n#### [CLR Enum Type](clr-enum-type.md)\n#### [Implicit Boxing of Value Types](implicit-boxing-of-value-types.md)\n#### [A Tracking Handle to a Boxed Value](a-tracking-handle-to-a-boxed-value.md)\n#### [Value Type Semantics](value-type-semantics.md)\n### [General Language Changes (C++-CLI)](general-language-changes-cpp-cli.md)\n#### [String Literal](string-literal.md)\n#### [Param Array and Ellipsis](param-array-and-ellipsis.md)\n#### [typeof Goes to T::typeid](typeof-goes-to-t-typeid.md)\n#### [Initializer Lists](initializer-lists.md)\n#### [Cast Notation and Introduction of safe_cast<>](cast-notation-and-introduction-of-safe-cast-angles.md)\n## [Pure and Verifiable Code (C++-CLI)](pure-and-verifiable-code-cpp-cli.md)\n### [Mixed, Pure, and Verifiable Feature Comparison (C++-CLI)](mixed-pure-and-verifiable-feature-comparison-cpp-cli.md)\n### [How to: Migrate to -clr:pure (C++-CLI)](how-to-migrate-to-clr-pure-cpp-cli.md)\n### [How to: Create Verifiable C++ Projects (C++-CLI)](how-to-create-verifiable-cpp-projects-cpp-cli.md)\n### [How to: Migrate to -clr:safe (C++-CLI)](how-to-migrate-to-clr-safe-cpp-cli.md)\n### [Using Verifiable Assemblies with SQL Server (C++-CLI)](using-verifiable-assemblies-with-sql-server-cpp-cli.md)\n### [Converting Projects from Mixed Mode to Pure Intermediate Language](converting-projects-from-mixed-mode-to-pure-intermediate-language.md)\n## [Regular Expressions (C++-CLI)](regular-expressions-cpp-cli.md)\n### [How to: Use Regular Expressions for Simple Matching (C++-CLI)](how-to-use-regular-expressions-for-simple-matching-cpp-cli.md)\n### [How to: Use Regular Expressions to Extract Data Fields (C++-CLI)](how-to-use-regular-expressions-to-extract-data-fields-cpp-cli.md)\n### [How to: Use Regular Expressions to Rearrange Data (C++-CLI)](how-to-use-regular-expressions-to-rearrange-data-cpp-cli.md)\n### [How to: Use Regular Expressions to Search and Replace (C++-CLI)](how-to-use-regular-expressions-to-search-and-replace-cpp-cli.md)\n### [How to: Use Regular Expressions to Validate Data Formatting (C++-CLI)](how-to-use-regular-expressions-to-validate-data-formatting-cpp-cli.md)\n### [How to: Parse Strings Using the Split Method (C++-CLI)](how-to-parse-strings-using-the-split-method-cpp-cli.md)\n### [How to: Parse Strings Using Regular Expressions (C++-CLI)](how-to-parse-strings-using-regular-expressions-cpp-cli.md)\n## [File Handling and I-O (C++-CLI)](file-handling-and-i-o-cpp-cli.md)\n### [How to: Enumerate Files in a Directory (C++-CLI)](how-to-enumerate-files-in-a-directory-cpp-cli.md)\n### [How to: Monitor File System Changes (C++-CLI)](how-to-monitor-file-system-changes-cpp-cli.md)\n### [How to: Read a Binary File (C++-CLI)](how-to-read-a-binary-file-cpp-cli.md)\n### [How to: Read a Text File (C++-CLI)](how-to-read-a-text-file-cpp-cli.md)\n### [How to: Retrieve File Information (C++-CLI)](how-to-retrieve-file-information-cpp-cli.md)\n### [How to: Write a Binary File (C++-CLI)](how-to-write-a-binary-file-cpp-cli.md)\n### [How to: Write a Text File (C++-CLI)](how-to-write-a-text-file-cpp-cli.md)\n## [Graphics Operations (C++-CLI)](graphics-operations-cpp-cli.md)\n### [How to: Convert Image File Formats with the .NET Framework](how-to-convert-image-file-formats-with-the-dotnet-framework.md)\n### [How to: Display Images with the .NET Framework](how-to-display-images-with-the-dotnet-framework.md)\n### [How to: Draw Shapes with the .NET Framework](how-to-draw-shapes-with-the-dotnet-framework.md)\n### [How to: Rotate Images with the .NET Framework](how-to-rotate-images-with-the-dotnet-framework.md)\n## [Windows Operations (C++-CLI)](windows-operations-cpp-cli.md)\n### [How to: Determine if Shutdown Has Started (C++-CLI)](how-to-determine-if-shutdown-has-started-cpp-cli.md)\n### [How to: Determine the User Interactive State (C++-CLI)](how-to-determine-the-user-interactive-state-cpp-cli.md)\n### [How to: Read Data from the Windows Registry (C++-CLI)](how-to-read-data-from-the-windows-registry-cpp-cli.md)\n### [How to: Read Windows Performance Counters (C++-CLI)](how-to-read-windows-performance-counters-cpp-cli.md)\n### [How to: Retrieve Text from the Clipboard (C++-CLI)](how-to-retrieve-text-from-the-clipboard-cpp-cli.md)\n### [How to: Retrieve the .NET Framework Version (C++-CLI)](how-to-retrieve-the-dotnet-framework-version-cpp-cli.md)\n### [How to: Retrieve the Current Username (C++-CLI)](how-to-retrieve-the-current-username-cpp-cli.md)\n### [How to: Retrieve the Local Machine Name (C++-CLI)](how-to-retrieve-the-local-machine-name-cpp-cli.md)\n### [How to: Retrieve the Windows Version (C++-CLI)](how-to-retrieve-the-windows-version-cpp-cli.md)\n### [How to: Retrieve Time Elapsed Since Startup (C++-CLI)](how-to-retrieve-time-elapsed-since-startup-cpp-cli.md)\n### [How to: Store Text in the Clipboard (C++-CLI)](how-to-store-text-in-the-clipboard-cpp-cli.md)\n### [How to: Write Data to the Windows Registry (C++-CLI)](how-to-write-data-to-the-windows-registry-cpp-cli.md)\n## [Data Access Using ADO.NET (C++-CLI)](data-access-using-adonet-cpp-cli.md)\n### [How to: Marshal ANSI Strings for ADO.NET (C++-CLI)](how-to-marshal-ansi-strings-for-adonet-cpp-cli.md)\n### [How to: Marshal BSTR Strings for ADO.NET (C++-CLI)](how-to-marshal-bstr-strings-for-adonet-cpp-cli.md)\n### [How to: Marshal Unicode Strings for ADO.NET (C++-CLI)](how-to-marshal-unicode-strings-for-adonet-cpp-cli.md)\n### [How to: Marshal a VARIANT for ADO.NET (C++-CLI)](how-to-marshal-a-variant-for-adonet-cpp-cli.md)\n### [How to: Marshal a SAFEARRAY for ADO.NET (C++-CLI)](how-to-marshal-a-safearray-for-adonet-cpp-cli.md)\n## [Interoperability with Other .NET Languages (C++-CLI)](interoperability-with-other-dotnet-languages-cpp-cli.md)\n### [How to: Implement is and as C# Keywords (C++-CLI)](how-to-implement-is-and-as-csharp-keywords-cpp-cli.md)\n### [How to: Implement the lock C# Keyword (C++-CLI)](how-to-implement-the-lock-csharp-keyword-cpp-cli.md)\n### [How to: Consume a C# Indexer (C++-CLI)](how-to-consume-a-csharp-indexer-cpp-cli.md)\n## [Serialization (C++-CLI)](serialization-cpp-cli.md)\n## [Friend Assemblies (C++)](friend-assemblies-cpp.md)\n## [Managed Types (C++-CLI)](managed-types-cpp-cli.md)\n### [Managed Types and the main Function (C++-CLI)](managed-types-and-the-main-function-cpp-cli.md)\n### [.NET Framework Equivalents to C++ Native Types (C++-CLI)](dotnet-framework-equivalents-to-cpp-native-types-cpp-cli.md)\n### [Version Issues for Value Types Nested in Native Types (C++-CLI)](version-issues-for-value-types-nested-in-native-types-cpp-cli.md)\n### [How to: Test for Equality (C++-CLI)](how-to-test-for-equality-cpp-cli.md)\n### [How to: Diagnose and Fix Assembly Compatibility Problems (C++-CLI)](how-to-diagnose-and-fix-assembly-compatibility-problems-cpp-cli.md)\n## [Reflection (C++-CLI)](reflection-cpp-cli.md)\n### [How to: Implement a Plug-In Component Architecture using Reflection (C++-CLI)](how-to-implement-a-plug-in-component-architecture-using-reflection-cpp-cli.md)\n### [How to: Enumerate Data Types in Assemblies using Reflection (C++-CLI)](how-to-enumerate-data-types-in-assemblies-using-reflection-cpp-cli.md)\n## [Strong Name Assemblies (Assembly Signing) (C++-CLI)](strong-name-assemblies-assembly-signing-cpp-cli.md)\n## [Debug Class (C++-CLI)](debug-class-cpp-cli.md)\n## [STL-CLR Library Reference](stl-clr-library-reference.md)\n### [cliext Namespace](cliext-namespace.md)\n### [STL-CLR Containers](stl-clr-containers.md)\n### [Requirements for STL-CLR Container Elements](requirements-for-stl-clr-container-elements.md)\n### [How to: Convert from a .NET Collection to a STL-CLR Container](how-to-convert-from-a-dotnet-collection-to-a-stl-clr-container.md)\n### [How to: Convert from a STL-CLR Container to a .NET Collection](how-to-convert-from-a-stl-clr-container-to-a-dotnet-collection.md)\n### [How to: Expose an STL-CLR Container from an Assembly](how-to-expose-an-stl-clr-container-from-an-assembly.md)\n### [adapter (STL-CLR)](adapter-stl-clr.md)\n#### [collection_adapter (STL-CLR)](collection-adapter-stl-clr.md)\n#### [collection_adapter::base (STL-CLR)](collection-adapter-base-stl-clr.md)\n#### [collection_adapter::begin (STL-CLR)](collection-adapter-begin-stl-clr.md)\n#### [collection_adapter::collection_adapter (STL-CLR)](collection-adapter-collection-adapter-stl-clr.md)\n#### [collection_adapter::difference_type (STL-CLR)](collection-adapter-difference-type-stl-clr.md)\n#### [collection_adapter::end (STL-CLR)](collection-adapter-end-stl-clr.md)\n#### [collection_adapter::iterator (STL-CLR)](collection-adapter-iterator-stl-clr.md)\n#### [collection_adapter::key_type (STL-CLR)](collection-adapter-key-type-stl-clr.md)\n#### [collection_adapter::mapped_type (STL-CLR)](collection-adapter-mapped-type-stl-clr.md)\n#### [collection_adapter::operator= (STL-CLR)](collection-adapter-operator-assign-stl-clr.md)\n#### [collection_adapter::reference (STL-CLR)](collection-adapter-reference-stl-clr.md)\n#### [collection_adapter::size (STL-CLR)](collection-adapter-size-stl-clr.md)\n#### [collection_adapter::size_type (STL-CLR)](collection-adapter-size-type-stl-clr.md)\n#### [collection_adapter::swap (STL-CLR)](collection-adapter-swap-stl-clr.md)\n#### [collection_adapter::value_type (STL-CLR)](collection-adapter-value-type-stl-clr.md)\n#### [make_collection (STL-CLR)](make-collection-stl-clr.md)\n#### [range_adapter (STL-CLR)](range-adapter-stl-clr.md)\n#### [range_adapter::operator= (STL-CLR)](range-adapter-operator-assign-stl-clr.md)\n#### [range_adapter::range_adapter (STL-CLR)](range-adapter-range-adapter-stl-clr.md)\n### [algorithm (STL-CLR)](algorithm-stl-clr.md)\n#### [adjacent_find (STL-CLR)](adjacent-find-stl-clr.md)\n#### [binary_search (STL-CLR)](binary-search-stl-clr.md)\n#### [copy (STL-CLR)](copy-stl-clr.md)\n#### [copy_backward (STL-CLR)](copy-backward-stl-clr.md)\n#### [count (STL-CLR)](count-stl-clr.md)\n#### [count_if (STL-CLR)](count-if-stl-clr.md)\n#### [equal (STL-CLR)](equal-stl-clr.md)\n#### [equal_range (STL-CLR)](equal-range-stl-clr.md)\n#### [fill (STL-CLR)](fill-stl-clr.md)\n#### [fill_n (STL-CLR)](fill-n-stl-clr.md)\n#### [find (STL-CLR)](find-stl-clr.md)\n#### [find_end (STL-CLR)](find-end-stl-clr.md)\n#### [find_first_of (STL-CLR)](find-first-of-stl-clr.md)\n#### [find_if (STL-CLR)](find-if-stl-clr.md)\n#### [for_each (STL-CLR)](for-each-stl-clr.md)\n#### [generate (STL-CLR)](generate-stl-clr.md)\n#### [generate_n (STL-CLR)](generate-n-stl-clr.md)\n#### [includes (STL-CLR)](includes-stl-clr.md)\n#### [inplace_merge (STL-CLR)](inplace-merge-stl-clr.md)\n#### [iter_swap (STL-CLR)](iter-swap-stl-clr.md)\n#### [lexicographical_compare (STL-CLR)](lexicographical-compare-stl-clr.md)\n#### [lower_bound (STL-CLR)](lower-bound-stl-clr.md)\n#### [make_heap (STL-CLR)](make-heap-stl-clr.md)\n#### [max (STL-CLR)](max-stl-clr.md)\n#### [max_element (STL-CLR)](max-element-stl-clr.md)\n#### [merge (STL-CLR)](merge-stl-clr.md)\n#### [min (STL-CLR)](min-stl-clr.md)\n#### [min_element (STL-CLR)](min-element-stl-clr.md)\n#### [mismatch (STL-CLR)](mismatch-stl-clr.md)\n#### [next_permutation (STL-CLR)](next-permutation-stl-clr.md)\n#### [nth_element (STL-CLR)](nth-element-stl-clr.md)\n#### [partial_sort (STL-CLR)](partial-sort-stl-clr.md)\n#### [partial_sort_copy (STL-CLR)](partial-sort-copy-stl-clr.md)\n#### [partition (STL-CLR)](partition-stl-clr.md)\n#### [pop_heap (STL-CLR)](pop-heap-stl-clr.md)\n#### [prev_permutation (STL-CLR)](prev-permutation-stl-clr.md)\n#### [push_heap (STL-CLR)](push-heap-stl-clr.md)\n#### [random_shuffle (STL-CLR)](random-shuffle-stl-clr.md)\n#### [remove (STL-CLR)](remove-stl-clr.md)\n#### [remove_copy (STL-CLR)](remove-copy-stl-clr.md)\n#### [remove_copy_if (STL-CLR)](remove-copy-if-stl-clr.md)\n#### [remove_if (STL-CLR)](remove-if-stl-clr.md)\n#### [replace (STL-CLR)](replace-stl-clr.md)\n#### [replace_copy (STL-CLR)](replace-copy-stl-clr.md)\n#### [replace_copy_if (STL-CLR)](replace-copy-if-stl-clr.md)\n#### [replace_if (STL-CLR)](replace-if-stl-clr.md)\n#### [reverse (STL-CLR)](reverse-stl-clr.md)\n#### [reverse_copy (STL-CLR)](reverse-copy-stl-clr.md)\n#### [rotate (STL-CLR)](rotate-stl-clr.md)\n#### [rotate_copy (STL-CLR)](rotate-copy-stl-clr.md)\n#### [search (STL-CLR)](search-stl-clr.md)\n#### [search_n (STL-CLR)](search-n-stl-clr.md)\n#### [set_difference (STL-CLR)](set-difference-stl-clr.md)\n#### [set_intersection (STL-CLR)](set-intersection-stl-clr.md)\n#### [set_symmetric_difference (STL-CLR)](set-symmetric-difference-stl-clr.md)\n#### [set_union (STL-CLR)](set-union-stl-clr.md)\n#### [sort (STL-CLR)](sort-stl-clr.md)\n#### [sort_heap (STL-CLR)](sort-heap-stl-clr.md)\n#### [stable_partition (STL-CLR)](stable-partition-stl-clr.md)\n#### [stable_sort (STL-CLR)](stable-sort-stl-clr.md)\n#### [swap (STL-CLR)](swap-stl-clr.md)\n#### [swap_ranges (STL-CLR)](swap-ranges-stl-clr.md)\n#### [transform (STL-CLR)](transform-stl-clr.md)\n#### [unique (STL-CLR)](unique-stl-clr.md)\n#### [unique_copy (STL-CLR)](unique-copy-stl-clr.md)\n#### [upper_bound (STL-CLR)](upper-bound-stl-clr.md)\n### [deque (STL-CLR)](deque-stl-clr.md)\n#### [deque::assign (STL-CLR)](deque-assign-stl-clr.md)\n#### [deque::at (STL-CLR)](deque-at-stl-clr.md)\n#### [deque::back (STL-CLR)](deque-back-stl-clr.md)\n#### [deque::back_item (STL-CLR)](deque-back-item-stl-clr.md)\n#### [deque::begin (STL-CLR)](deque-begin-stl-clr.md)\n#### [deque::clear (STL-CLR)](deque-clear-stl-clr.md)\n#### [deque::const_iterator (STL-CLR)](deque-const-iterator-stl-clr.md)\n#### [deque::const_reference (STL-CLR)](deque-const-reference-stl-clr.md)\n#### [deque::const_reverse_iterator (STL-CLR)](deque-const-reverse-iterator-stl-clr.md)\n#### [deque::deque (STL-CLR)](deque-deque-stl-clr.md)\n#### [deque::difference_type (STL-CLR)](deque-difference-type-stl-clr.md)\n#### [deque::empty (STL-CLR)](deque-empty-stl-clr.md)\n#### [deque::end (STL-CLR)](deque-end-stl-clr.md)\n#### [deque::erase (STL-CLR)](deque-erase-stl-clr.md)\n#### [deque::front (STL-CLR)](deque-front-stl-clr.md)\n#### [deque::front_item (STL-CLR)](deque-front-item-stl-clr.md)\n#### [deque::generic_container (STL-CLR)](deque-generic-container-stl-clr.md)\n#### [deque::generic_iterator (STL-CLR)](deque-generic-iterator-stl-clr.md)\n#### [deque::generic_reverse_iterator (STL-CLR)](deque-generic-reverse-iterator-stl-clr.md)\n#### [deque::generic_value (STL-CLR)](deque-generic-value-stl-clr.md)\n#### [deque::insert (STL-CLR)](deque-insert-stl-clr.md)\n#### [deque::iterator (STL-CLR)](deque-iterator-stl-clr.md)\n#### [deque::operator!= (STL-CLR)](deque-operator-inequality-stl-clr.md)\n#### [deque::operator(STL-CLR)](deque-operator-stl-clr.md)\n#### [deque::pop_back (STL-CLR)](deque-pop-back-stl-clr.md)\n#### [deque::pop_front (STL-CLR)](deque-pop-front-stl-clr.md)\n#### [deque::push_back (STL-CLR)](deque-push-back-stl-clr.md)\n#### [deque::push_front (STL-CLR)](deque-push-front-stl-clr.md)\n#### [deque::rbegin (STL-CLR)](deque-rbegin-stl-clr.md)\n#### [deque::reference (STL-CLR)](deque-reference-stl-clr.md)\n#### [deque::rend (STL-CLR)](deque-rend-stl-clr.md)\n#### [deque::resize (STL-CLR)](deque-resize-stl-clr.md)\n#### [deque::reverse_iterator (STL-CLR)](deque-reverse-iterator-stl-clr.md)\n#### [deque::size (STL-CLR)](deque-size-stl-clr.md)\n#### [deque::size_type (STL-CLR)](deque-size-type-stl-clr.md)\n#### [deque::swap (STL-CLR)](deque-swap-stl-clr.md)\n#### [deque::to_array (STL-CLR)](deque-to-array-stl-clr.md)\n#### [deque::value_type (STL-CLR)](deque-value-type-stl-clr.md)\n#### [operator< (deque) (STL-CLR)](operator-less-than-deque-stl-clr.md)\n#### [operator<= (deque) (STL-CLR)](operator-less-or-equal-deque-stl-clr.md)\n#### [operator= (deque) (STL-CLR)](operator-assign-deque-stl-clr.md)\n#### [operator== (deque) (STL-CLR)](operator-equality-deque-stl-clr.md)\n#### [operator> (deque) (STL-CLR)](operator-greater-than-deque-stl-clr.md)\n#### [operator>= (deque) (STL-CLR)](operator-greater-or-equal-deque-stl-clr.md)\n### [for each, in](for-each-in.md)\n#### [Iterating Over STL Collection By Using for each](iterating-over-stl-collection-by-using-for-each.md)\n#### [How to: Iterate Over Arrays with for each](how-to-iterate-over-arrays-with-for-each.md)\n#### [How to: Iterate Over a Generic Collection with for each](how-to-iterate-over-a-generic-collection-with-for-each.md)\n#### [How to: Iterate Over a User-Defined Collection with for each](how-to-iterate-over-a-user-defined-collection-with-for-each.md)\n### [functional (STL-CLR)](functional-stl-clr.md)\n#### [binary_delegate (STL-CLR)](binary-delegate-stl-clr.md)\n#### [binary_delegate_noreturn (STL-CLR)](binary-delegate-noreturn-stl-clr.md)\n#### [binary_negate (STL-CLR)](binary-negate-stl-clr.md)\n#### [bind1st (STL-CLR)](bind1st-stl-clr.md)\n#### [bind2nd (STL-CLR)](bind2nd-stl-clr.md)\n#### [binder1st (STL-CLR)](binder1st-stl-clr.md)\n#### [binder2nd (STL-CLR)](binder2nd-stl-clr.md)\n#### [divides (STL-CLR)](divides-stl-clr.md)\n#### [equal_to (STL-CLR)](equal-to-stl-clr.md)\n#### [greater (STL-CLR)](greater-stl-clr.md)\n#### [greater_equal (STL-CLR)](greater-equal-stl-clr.md)\n#### [less (STL-CLR)](less-stl-clr.md)\n#### [less_equal (STL-CLR)](less-equal-stl-clr.md)\n#### [logical_and (STL-CLR)](logical-and-stl-clr.md)\n#### [logical_not (STL-CLR)](logical-not-stl-clr.md)\n#### [logical_or (STL-CLR)](logical-or-stl-clr.md)\n#### [minus (STL-CLR)](minus-stl-clr.md)\n#### [modulus (STL-CLR)](modulus-stl-clr.md)\n#### [multiplies (STL-CLR)](multiplies-stl-clr.md)\n#### [negate (STL-CLR)](negate-stl-clr.md)\n#### [not_equal_to (STL-CLR)](not-equal-to-stl-clr.md)\n#### [not1 (STL-CLR)](not1-stl-clr.md)\n#### [not2 (STL-CLR)](not2-stl-clr.md)\n#### [plus (STL-CLR)](plus-stl-clr.md)\n#### [unary_delegate (STL-CLR)](unary-delegate-stl-clr.md)\n#### [unary_delegate_noreturn (STL-CLR)](unary-delegate-noreturn-stl-clr.md)\n#### [unary_negate (STL-CLR)](unary-negate-stl-clr.md)\n### [hash_map (STL-CLR)](hash-map-stl-clr.md)\n#### [hash_map::begin (STL-CLR)](hash-map-begin-stl-clr.md)\n#### [hash_map::bucket_count (STL-CLR)](hash-map-bucket-count-stl-clr.md)\n#### [hash_map::clear (STL-CLR)](hash-map-clear-stl-clr.md)\n#### [hash_map::const_iterator (STL-CLR)](hash-map-const-iterator-stl-clr.md)\n#### [hash_map::const_reference (STL-CLR)](hash-map-const-reference-stl-clr.md)\n#### [hash_map::const_reverse_iterator (STL-CLR)](hash-map-const-reverse-iterator-stl-clr.md)\n#### [hash_map::count (STL-CLR)](hash-map-count-stl-clr.md)\n#### [hash_map::difference_type (STL-CLR)](hash-map-difference-type-stl-clr.md)\n#### [hash_map::empty (STL-CLR)](hash-map-empty-stl-clr.md)\n#### [hash_map::end (STL-CLR)](hash-map-end-stl-clr.md)\n#### [hash_map::equal_range (STL-CLR)](hash-map-equal-range-stl-clr.md)\n#### [hash_map::erase (STL-CLR)](hash-map-erase-stl-clr.md)\n#### [hash_map::find (STL-CLR)](hash-map-find-stl-clr.md)\n#### [hash_map::generic_container (STL-CLR)](hash-map-generic-container-stl-clr.md)\n#### [hash_map::generic_iterator (STL-CLR)](hash-map-generic-iterator-stl-clr.md)\n#### [hash_map::generic_reverse_iterator (STL-CLR)](hash-map-generic-reverse-iterator-stl-clr.md)\n#### [hash_map::generic_value (STL-CLR)](hash-map-generic-value-stl-clr.md)\n#### [hash_map::hash_delegate (STL-CLR)](hash-map-hash-delegate-stl-clr.md)\n#### [hash_map::hash_map (STL-CLR)](hash-map-hash-map-stl-clr.md)\n#### [hash_map::hasher (STL-CLR)](hash-map-hasher-stl-clr.md)\n#### [hash_map::insert (STL-CLR)](hash-map-insert-stl-clr.md)\n#### [hash_map::iterator (STL-CLR)](hash-map-iterator-stl-clr.md)\n#### [hash_map::key_comp (STL-CLR)](hash-map-key-comp-stl-clr.md)\n#### [hash_map::key_compare (STL-CLR)](hash-map-key-compare-stl-clr.md)\n#### [hash_map::key_type (STL-CLR)](hash-map-key-type-stl-clr.md)\n#### [hash_map::load_factor (STL-CLR)](hash-map-load-factor-stl-clr.md)\n#### [hash_map::lower_bound (STL-CLR)](hash-map-lower-bound-stl-clr.md)\n#### [hash_map::make_value (STL-CLR)](hash-map-make-value-stl-clr.md)\n#### [hash_map::mapped_type (STL-CLR)](hash-map-mapped-type-stl-clr.md)\n#### [hash_map::max_load_factor (STL-CLR)](hash-map-max-load-factor-stl-clr.md)\n#### [hash_map::operator= (STL-CLR)](hash-map-operator-assign-stl-clr.md)\n#### [hash_map::operator(STL-CLR)](hash-map-operator-stl-clr.md)\n#### [hash_map::rbegin (STL-CLR)](hash-map-rbegin-stl-clr.md)\n#### [hash_map::reference (STL-CLR)](hash-map-reference-stl-clr.md)\n#### [hash_map::rehash (STL-CLR)](hash-map-rehash-stl-clr.md)\n#### [hash_map::rend (STL-CLR)](hash-map-rend-stl-clr.md)\n#### [hash_map::reverse_iterator (STL-CLR)](hash-map-reverse-iterator-stl-clr.md)\n#### [hash_map::size (STL-CLR)](hash-map-size-stl-clr.md)\n#### [hash_map::size_type (STL-CLR)](hash-map-size-type-stl-clr.md)\n#### [hash_map::swap (STL-CLR)](hash-map-swap-stl-clr.md)\n#### [hash_map::to_array (STL-CLR)](hash-map-to-array-stl-clr.md)\n#### [hash_map::upper_bound (STL-CLR)](hash-map-upper-bound-stl-clr.md)\n#### [hash_map::value_comp (STL-CLR)](hash-map-value-comp-stl-clr.md)\n#### [hash_map::value_compare (STL-CLR)](hash-map-value-compare-stl-clr.md)\n#### [hash_map::value_type (STL-CLR)](hash-map-value-type-stl-clr.md)\n### [hash_multimap (STL-CLR)](hash-multimap-stl-clr.md)\n#### [hash_multimap::begin (STL-CLR)](hash-multimap-begin-stl-clr.md)\n#### [hash_multimap::bucket_count (STL-CLR)](hash-multimap-bucket-count-stl-clr.md)\n#### [hash_multimap::clear (STL-CLR)](hash-multimap-clear-stl-clr.md)\n#### [hash_multimap::const_iterator (STL-CLR)](hash-multimap-const-iterator-stl-clr.md)\n#### [hash_multimap::const_reference (STL-CLR)](hash-multimap-const-reference-stl-clr.md)\n#### [hash_multimap::const_reverse_iterator (STL-CLR)](hash-multimap-const-reverse-iterator-stl-clr.md)\n#### [hash_multimap::count (STL-CLR)](hash-multimap-count-stl-clr.md)\n#### [hash_multimap::difference_type (STL-CLR)](hash-multimap-difference-type-stl-clr.md)\n#### [hash_multimap::empty (STL-CLR)](hash-multimap-empty-stl-clr.md)\n#### [hash_multimap::end (STL-CLR)](hash-multimap-end-stl-clr.md)\n#### [hash_multimap::equal_range (STL-CLR)](hash-multimap-equal-range-stl-clr.md)\n#### [hash_multimap::erase (STL-CLR)](hash-multimap-erase-stl-clr.md)\n#### [hash_multimap::find (STL-CLR)](hash-multimap-find-stl-clr.md)\n#### [hash_multimap::generic_container (STL-CLR)](hash-multimap-generic-container-stl-clr.md)\n#### [hash_multimap::generic_iterator (STL-CLR)](hash-multimap-generic-iterator-stl-clr.md)\n#### [hash_multimap::generic_reverse_iterator (STL-CLR)](hash-multimap-generic-reverse-iterator-stl-clr.md)\n#### [hash_multimap::generic_value (STL-CLR)](hash-multimap-generic-value-stl-clr.md)\n#### [hash_multimap::hash_delegate (STL-CLR)](hash-multimap-hash-delegate-stl-clr.md)\n#### [hash_multimap::hash_multimap (STL-CLR)](hash-multimap-hash-multimap-stl-clr.md)\n#### [hash_multimap::hasher (STL-CLR)](hash-multimap-hasher-stl-clr.md)\n#### [hash_multimap::insert (STL-CLR)](hash-multimap-insert-stl-clr.md)\n#### [hash_multimap::iterator (STL-CLR)](hash-multimap-iterator-stl-clr.md)\n#### [hash_multimap::key_comp (STL-CLR)](hash-multimap-key-comp-stl-clr.md)\n#### [hash_multimap::key_compare (STL-CLR)](hash-multimap-key-compare-stl-clr.md)\n#### [hash_multimap::key_type (STL-CLR)](hash-multimap-key-type-stl-clr.md)\n#### [hash_multimap::load_factor (STL-CLR)](hash-multimap-load-factor-stl-clr.md)\n#### [hash_multimap::lower_bound (STL-CLR)](hash-multimap-lower-bound-stl-clr.md)\n#### [hash_multimap::make_value (STL-CLR)](hash-multimap-make-value-stl-clr.md)\n#### [hash_multimap::mapped_type (STL-CLR)](hash-multimap-mapped-type-stl-clr.md)\n#### [hash_multimap::max_load_factor (STL-CLR)](hash-multimap-max-load-factor-stl-clr.md)\n#### [hash_multimap::operator= (STL-CLR)](hash-multimap-operator-assign-stl-clr.md)\n#### [hash_multimap::rbegin (STL-CLR)](hash-multimap-rbegin-stl-clr.md)\n#### [hash_multimap::reference (STL-CLR)](hash-multimap-reference-stl-clr.md)\n#### [hash_multimap::rehash (STL-CLR)](hash-multimap-rehash-stl-clr.md)\n#### [hash_multimap::rend (STL-CLR)](hash-multimap-rend-stl-clr.md)\n#### [hash_multimap::reverse_iterator (STL-CLR)](hash-multimap-reverse-iterator-stl-clr.md)\n#### [hash_multimap::size (STL-CLR)](hash-multimap-size-stl-clr.md)\n#### [hash_multimap::size_type (STL-CLR)](hash-multimap-size-type-stl-clr.md)\n#### [hash_multimap::swap (STL-CLR)](hash-multimap-swap-stl-clr.md)\n#### [hash_multimap::to_array (STL-CLR)](hash-multimap-to-array-stl-clr.md)\n#### [hash_multimap::upper_bound (STL-CLR)](hash-multimap-upper-bound-stl-clr.md)\n#### [hash_multimap::value_comp (STL-CLR)](hash-multimap-value-comp-stl-clr.md)\n#### [hash_multimap::value_compare (STL-CLR)](hash-multimap-value-compare-stl-clr.md)\n#### [hash_multimap::value_type (STL-CLR)](hash-multimap-value-type-stl-clr.md)\n### [hash_multiset (STL-CLR)](hash-multiset-stl-clr.md)\n#### [hash_multiset::begin (STL-CLR)](hash-multiset-begin-stl-clr.md)\n#### [hash_multiset::bucket_count (STL-CLR)](hash-multiset-bucket-count-stl-clr.md)\n#### [hash_multiset::clear (STL-CLR)](hash-multiset-clear-stl-clr.md)\n#### [hash_multiset::const_iterator (STL-CLR)](hash-multiset-const-iterator-stl-clr.md)\n#### [hash_multiset::const_reference (STL-CLR)](hash-multiset-const-reference-stl-clr.md)\n#### [hash_multiset::const_reverse_iterator (STL-CLR)](hash-multiset-const-reverse-iterator-stl-clr.md)\n#### [hash_multiset::count (STL-CLR)](hash-multiset-count-stl-clr.md)\n#### [hash_multiset::difference_type (STL-CLR)](hash-multiset-difference-type-stl-clr.md)\n#### [hash_multiset::empty (STL-CLR)](hash-multiset-empty-stl-clr.md)\n#### [hash_multiset::end (STL-CLR)](hash-multiset-end-stl-clr.md)\n#### [hash_multiset::equal_range (STL-CLR)](hash-multiset-equal-range-stl-clr.md)\n#### [hash_multiset::erase (STL-CLR)](hash-multiset-erase-stl-clr.md)\n#### [hash_multiset::find (STL-CLR)](hash-multiset-find-stl-clr.md)\n#### [hash_multiset::generic_container (STL-CLR)](hash-multiset-generic-container-stl-clr.md)\n#### [hash_multiset::generic_iterator (STL-CLR)](hash-multiset-generic-iterator-stl-clr.md)\n#### [hash_multiset::generic_reverse_iterator (STL-CLR)](hash-multiset-generic-reverse-iterator-stl-clr.md)\n#### [hash_multiset::generic_value (STL-CLR)](hash-multiset-generic-value-stl-clr.md)\n#### [hash_multiset::hash_delegate (STL-CLR)](hash-multiset-hash-delegate-stl-clr.md)\n#### [hash_multiset::hash_multiset (STL-CLR)](hash-multiset-hash-multiset-stl-clr.md)\n#### [hash_multiset::hasher (STL-CLR)](hash-multiset-hasher-stl-clr.md)\n#### [hash_multiset::insert (STL-CLR)](hash-multiset-insert-stl-clr.md)\n#### [hash_multiset::iterator (STL-CLR)](hash-multiset-iterator-stl-clr.md)\n#### [hash_multiset::key_comp (STL-CLR)](hash-multiset-key-comp-stl-clr.md)\n#### [hash_multiset::key_compare (STL-CLR)](hash-multiset-key-compare-stl-clr.md)\n#### [hash_multiset::key_type (STL-CLR)](hash-multiset-key-type-stl-clr.md)\n#### [hash_multiset::load_factor (STL-CLR)](hash-multiset-load-factor-stl-clr.md)\n#### [hash_multiset::lower_bound (STL-CLR)](hash-multiset-lower-bound-stl-clr.md)\n#### [hash_multiset::make_value (STL-CLR)](hash-multiset-make-value-stl-clr.md)\n#### [hash_multiset::max_load_factor (STL-CLR)](hash-multiset-max-load-factor-stl-clr.md)\n#### [hash_multiset::operator= (STL-CLR)](hash-multiset-operator-assign-stl-clr.md)\n#### [hash_multiset::rbegin (STL-CLR)](hash-multiset-rbegin-stl-clr.md)\n#### [hash_multiset::reference (STL-CLR)](hash-multiset-reference-stl-clr.md)\n#### [hash_multiset::rehash (STL-CLR)](hash-multiset-rehash-stl-clr.md)\n#### [hash_multiset::rend (STL-CLR)](hash-multiset-rend-stl-clr.md)\n#### [hash_multiset::reverse_iterator (STL-CLR)](hash-multiset-reverse-iterator-stl-clr.md)\n#### [hash_multiset::size (STL-CLR)](hash-multiset-size-stl-clr.md)\n#### [hash_multiset::size_type (STL-CLR)](hash-multiset-size-type-stl-clr.md)\n#### [hash_multiset::swap (STL-CLR)](hash-multiset-swap-stl-clr.md)\n#### [hash_multiset::to_array (STL-CLR)](hash-multiset-to-array-stl-clr.md)\n#### [hash_multiset::upper_bound (STL-CLR)](hash-multiset-upper-bound-stl-clr.md)\n#### [hash_multiset::value_comp (STL-CLR)](hash-multiset-value-comp-stl-clr.md)\n#### [hash_multiset::value_compare (STL-CLR)](hash-multiset-value-compare-stl-clr.md)\n#### [hash_multiset::value_type (STL-CLR)](hash-multiset-value-type-stl-clr.md)\n### [hash_set (STL-CLR)](hash-set-stl-clr.md)\n#### [hash_set::begin (STL-CLR)](hash-set-begin-stl-clr.md)\n#### [hash_set::bucket_count (STL-CLR)](hash-set-bucket-count-stl-clr.md)\n#### [hash_set::clear (STL-CLR)](hash-set-clear-stl-clr.md)\n#### [hash_set::const_iterator (STL-CLR)](hash-set-const-iterator-stl-clr.md)\n#### [hash_set::const_reference (STL-CLR)](hash-set-const-reference-stl-clr.md)\n#### [hash_set::const_reverse_iterator (STL-CLR)](hash-set-const-reverse-iterator-stl-clr.md)\n#### [hash_set::count (STL-CLR)](hash-set-count-stl-clr.md)\n#### [hash_set::difference_type (STL-CLR)](hash-set-difference-type-stl-clr.md)\n#### [hash_set::empty (STL-CLR)](hash-set-empty-stl-clr.md)\n#### [hash_set::end (STL-CLR)](hash-set-end-stl-clr.md)\n#### [hash_set::equal_range (STL-CLR)](hash-set-equal-range-stl-clr.md)\n#### [hash_set::erase (STL-CLR)](hash-set-erase-stl-clr.md)\n#### [hash_set::find (STL-CLR)](hash-set-find-stl-clr.md)\n#### [hash_set::generic_container (STL-CLR)](hash-set-generic-container-stl-clr.md)\n#### [hash_set::generic_iterator (STL-CLR)](hash-set-generic-iterator-stl-clr.md)\n#### [hash_set::generic_reverse_iterator (STL-CLR)](hash-set-generic-reverse-iterator-stl-clr.md)\n#### [hash_set::generic_value (STL-CLR)](hash-set-generic-value-stl-clr.md)\n#### [hash_set::hash_delegate (STL-CLR)](hash-set-hash-delegate-stl-clr.md)\n#### [hash_set::hash_set (STL-CLR)](hash-set-hash-set-stl-clr.md)\n#### [hash_set::hasher (STL-CLR)](hash-set-hasher-stl-clr.md)\n#### [hash_set::insert (STL-CLR)](hash-set-insert-stl-clr.md)\n#### [hash_set::iterator (STL-CLR)](hash-set-iterator-stl-clr.md)\n#### [hash_set::key_comp (STL-CLR)](hash-set-key-comp-stl-clr.md)\n#### [hash_set::key_compare (STL-CLR)](hash-set-key-compare-stl-clr.md)\n#### [hash_set::key_type (STL-CLR)](hash-set-key-type-stl-clr.md)\n#### [hash_set::load_factor (STL-CLR)](hash-set-load-factor-stl-clr.md)\n#### [hash_set::lower_bound (STL-CLR)](hash-set-lower-bound-stl-clr.md)\n#### [hash_set::make_value (STL-CLR)](hash-set-make-value-stl-clr.md)\n#### [hash_set::max_load_factor (STL-CLR)](hash-set-max-load-factor-stl-clr.md)\n#### [hash_set::operator= (STL-CLR)](hash-set-operator-assign-stl-clr.md)\n#### [hash_set::rbegin (STL-CLR)](hash-set-rbegin-stl-clr.md)\n#### [hash_set::reference (STL-CLR)](hash-set-reference-stl-clr.md)\n#### [hash_set::rehash (STL-CLR)](hash-set-rehash-stl-clr.md)\n#### [hash_set::rend (STL-CLR)](hash-set-rend-stl-clr.md)\n#### [hash_set::reverse_iterator (STL-CLR)](hash-set-reverse-iterator-stl-clr.md)\n#### [hash_set::size (STL-CLR)](hash-set-size-stl-clr.md)\n#### [hash_set::size_type (STL-CLR)](hash-set-size-type-stl-clr.md)\n#### [hash_set::swap (STL-CLR)](hash-set-swap-stl-clr.md)\n#### [hash_set::to_array (STL-CLR)](hash-set-to-array-stl-clr.md)\n#### [hash_set::upper_bound (STL-CLR)](hash-set-upper-bound-stl-clr.md)\n#### [hash_set::value_comp (STL-CLR)](hash-set-value-comp-stl-clr.md)\n#### [hash_set::value_compare (STL-CLR)](hash-set-value-compare-stl-clr.md)\n#### [hash_set::value_type (STL-CLR)](hash-set-value-type-stl-clr.md)\n### [list (STL-CLR)](list-stl-clr.md)\n#### [list::assign (STL-CLR)](list-assign-stl-clr.md)\n#### [list::back (STL-CLR)](list-back-stl-clr.md)\n#### [list::back_item (STL-CLR)](list-back-item-stl-clr.md)\n#### [list::begin (STL-CLR)](list-begin-stl-clr.md)\n#### [list::clear (STL-CLR)](list-clear-stl-clr.md)\n#### [list::const_iterator (STL-CLR)](list-const-iterator-stl-clr.md)\n#### [list::const_reference (STL-CLR)](list-const-reference-stl-clr.md)\n#### [list::const_reverse_iterator (STL-CLR)](list-const-reverse-iterator-stl-clr.md)\n#### [list::difference_type (STL-CLR)](list-difference-type-stl-clr.md)\n#### [list::empty (STL-CLR)](list-empty-stl-clr.md)\n#### [list::end (STL-CLR)](list-end-stl-clr.md)\n#### [list::erase (STL-CLR)](list-erase-stl-clr.md)\n#### [list::front (STL-CLR)](list-front-stl-clr.md)\n#### [list::front_item (STL-CLR)](list-front-item-stl-clr.md)\n#### [list::generic_container (STL-CLR)](list-generic-container-stl-clr.md)\n#### [list::generic_iterator (STL-CLR)](list-generic-iterator-stl-clr.md)\n#### [list::generic_reverse_iterator (STL-CLR)](list-generic-reverse-iterator-stl-clr.md)\n#### [list::generic_value (STL-CLR)](list-generic-value-stl-clr.md)\n#### [list::insert (STL-CLR)](list-insert-stl-clr.md)\n#### [list::iterator (STL-CLR)](list-iterator-stl-clr.md)\n#### [list::list (STL-CLR)](list-list-stl-clr.md)\n#### [list::merge (STL-CLR)](list-merge-stl-clr.md)\n#### [list::operator= (STL-CLR)](list-operator-assign-stl-clr.md)\n#### [list::pop_back (STL-CLR)](list-pop-back-stl-clr.md)\n#### [list::pop_front (STL-CLR)](list-pop-front-stl-clr.md)\n#### [list::push_back (STL-CLR)](list-push-back-stl-clr.md)\n#### [list::push_front (STL-CLR)](list-push-front-stl-clr.md)\n#### [list::rbegin (STL-CLR)](list-rbegin-stl-clr.md)\n#### [list::reference (STL-CLR)](list-reference-stl-clr.md)\n#### [list::remove (STL-CLR)](list-remove-stl-clr.md)\n#### [list::remove_if (STL-CLR)](list-remove-if-stl-clr.md)\n#### [list::rend (STL-CLR)](list-rend-stl-clr.md)\n#### [list::resize (STL-CLR)](list-resize-stl-clr.md)\n#### [list::reverse (STL-CLR)](list-reverse-stl-clr.md)\n#### [list::reverse_iterator (STL-CLR)](list-reverse-iterator-stl-clr.md)\n#### [list::size (STL-CLR)](list-size-stl-clr.md)\n#### [list::size_type (STL-CLR)](list-size-type-stl-clr.md)\n#### [list::sort (STL-CLR)](list-sort-stl-clr.md)\n#### [list::splice (STL-CLR)](list-splice-stl-clr.md)\n#### [list::swap (STL-CLR)](list-swap-stl-clr.md)\n#### [list::to_array (STL-CLR)](list-to-array-stl-clr.md)\n#### [list::unique (STL-CLR)](list-unique-stl-clr.md)\n#### [list::value_type (STL-CLR)](list-value-type-stl-clr.md)\n#### [operator!= (list) (STL-CLR)](operator-inequality-list-stl-clr.md)\n#### [operator< (list) (STL-CLR)](operator-less-than-list-stl-clr.md)\n#### [operator<= (list) (STL-CLR)](operator-less-or-equal-list-stl-clr.md)\n#### [operator== (list) (STL-CLR)](operator-equality-list-stl-clr.md)\n#### [operator> (list) (STL-CLR)](operator-greater-than-list-stl-clr.md)\n#### [operator>= (list) (STL-CLR)](operator-greater-or-equal-list-stl-clr.md)\n### [map (STL-CLR)](map-stl-clr.md)\n#### [map::begin (STL-CLR)](map-begin-stl-clr.md)\n#### [map::clear (STL-CLR)](map-clear-stl-clr.md)\n#### [map::const_iterator (STL-CLR)](map-const-iterator-stl-clr.md)\n#### [map::const_reference (STL-CLR)](map-const-reference-stl-clr.md)\n#### [map::const_reverse_iterator (STL-CLR)](map-const-reverse-iterator-stl-clr.md)\n#### [map::count (STL-CLR)](map-count-stl-clr.md)\n#### [map::difference_type (STL-CLR)](map-difference-type-stl-clr.md)\n#### [map::empty (STL-CLR)](map-empty-stl-clr.md)\n#### [map::end (STL-CLR)](map-end-stl-clr.md)\n#### [map::equal_range (STL-CLR)](map-equal-range-stl-clr.md)\n#### [map::erase (STL-CLR)](map-erase-stl-clr.md)\n#### [map::find (STL-CLR)](map-find-stl-clr.md)\n#### [map::generic_container (STL-CLR)](map-generic-container-stl-clr.md)\n#### [map::generic_iterator (STL-CLR)](map-generic-iterator-stl-clr.md)\n#### [map::generic_reverse_iterator (STL-CLR)](map-generic-reverse-iterator-stl-clr.md)\n#### [map::generic_value (STL-CLR)](map-generic-value-stl-clr.md)\n#### [map::insert (STL-CLR)](map-insert-stl-clr.md)\n#### [map::iterator (STL-CLR)](map-iterator-stl-clr.md)\n#### [map::key_comp (STL-CLR)](map-key-comp-stl-clr.md)\n#### [map::key_compare (STL-CLR)](map-key-compare-stl-clr.md)\n#### [map::key_type (STL-CLR)](map-key-type-stl-clr.md)\n#### [map::lower_bound (STL-CLR)](map-lower-bound-stl-clr.md)\n#### [map::make_value (STL-CLR)](map-make-value-stl-clr.md)\n#### [map::map (STL-CLR)](map-map-stl-clr.md)\n#### [map::mapped_type (STL-CLR)](map-mapped-type-stl-clr.md)\n#### [map::operator= (STL-CLR)](map-operator-assign-stl-clr.md)\n#### [map::operator(STL-CLR)](map-operator-stl-clr.md)\n#### [map::rbegin (STL-CLR)](map-rbegin-stl-clr.md)\n#### [map::reference (STL-CLR)](map-reference-stl-clr.md)\n#### [map::rend (STL-CLR)](map-rend-stl-clr.md)\n#### [map::reverse_iterator (STL-CLR)](map-reverse-iterator-stl-clr.md)\n#### [map::size (STL-CLR)](map-size-stl-clr.md)\n#### [map::size_type (STL-CLR)](map-size-type-stl-clr.md)\n#### [map::swap (STL-CLR)](map-swap-stl-clr.md)\n#### [map::to_array (STL-CLR)](map-to-array-stl-clr.md)\n#### [map::upper_bound (STL-CLR)](map-upper-bound-stl-clr.md)\n#### [map::value_comp (STL-CLR)](map-value-comp-stl-clr.md)\n#### [map::value_compare (STL-CLR)](map-value-compare-stl-clr.md)\n#### [map::value_type (STL-CLR)](map-value-type-stl-clr.md)\n#### [operator!= (map) (STL-CLR)](operator-inequality-map-stl-clr.md)\n#### [operator< (map) (STL-CLR)](operator-less-than-map-stl-clr.md)\n#### [operator<= (map) (STL-CLR)](operator-less-or-equal-map-stl-clr.md)\n#### [operator== (map) (STL-CLR)](operator-equality-map-stl-clr.md)\n#### [operator> (map) (STL-CLR)](operator-greater-than-map-stl-clr.md)\n#### [operator>= (map) (STL-CLR)](operator-greater-or-equal-map-stl-clr.md)\n### [multimap (STL-CLR)](multimap-stl-clr.md)\n#### [multimap::begin (STL-CLR)](multimap-begin-stl-clr.md)\n#### [multimap::clear (STL-CLR)](multimap-clear-stl-clr.md)\n#### [multimap::const_iterator (STL-CLR)](multimap-const-iterator-stl-clr.md)\n#### [multimap::const_reference (STL-CLR)](multimap-const-reference-stl-clr.md)\n#### [multimap::const_reverse_iterator (STL-CLR)](multimap-const-reverse-iterator-stl-clr.md)\n#### [multimap::count (STL-CLR)](multimap-count-stl-clr.md)\n#### [multimap::difference_type (STL-CLR)](multimap-difference-type-stl-clr.md)\n#### [multimap::empty (STL-CLR)](multimap-empty-stl-clr.md)\n#### [multimap::end (STL-CLR)](multimap-end-stl-clr.md)\n#### [multimap::equal_range (STL-CLR)](multimap-equal-range-stl-clr.md)\n#### [multimap::erase (STL-CLR)](multimap-erase-stl-clr.md)\n#### [multimap::find (STL-CLR)](multimap-find-stl-clr.md)\n#### [multimap::generic_container (STL-CLR)](multimap-generic-container-stl-clr.md)\n#### [multimap::generic_iterator (STL-CLR)](multimap-generic-iterator-stl-clr.md)\n#### [multimap::generic_reverse_iterator (STL-CLR)](multimap-generic-reverse-iterator-stl-clr.md)\n#### [multimap::generic_value (STL-CLR)](multimap-generic-value-stl-clr.md)\n#### [multimap::insert (STL-CLR)](multimap-insert-stl-clr.md)\n#### [multimap::iterator (STL-CLR)](multimap-iterator-stl-clr.md)\n#### [multimap::key_comp (STL-CLR)](multimap-key-comp-stl-clr.md)\n#### [multimap::key_compare (STL-CLR)](multimap-key-compare-stl-clr.md)\n#### [multimap::key_type (STL-CLR)](multimap-key-type-stl-clr.md)\n#### [multimap::lower_bound (STL-CLR)](multimap-lower-bound-stl-clr.md)\n#### [multimap::make_value (STL-CLR)](multimap-make-value-stl-clr.md)\n#### [multimap::mapped_type (STL-CLR)](multimap-mapped-type-stl-clr.md)\n#### [multimap::multimap (STL-CLR)](multimap-multimap-stl-clr.md)\n#### [multimap::operator= (STL-CLR)](multimap-operator-assign-stl-clr.md)\n#### [multimap::rbegin (STL-CLR)](multimap-rbegin-stl-clr.md)\n#### [multimap::reference (STL-CLR)](multimap-reference-stl-clr.md)\n#### [multimap::rend (STL-CLR)](multimap-rend-stl-clr.md)\n#### [multimap::reverse_iterator (STL-CLR)](multimap-reverse-iterator-stl-clr.md)\n#### [multimap::size (STL-CLR)](multimap-size-stl-clr.md)\n#### [multimap::size_type (STL-CLR)](multimap-size-type-stl-clr.md)\n#### [multimap::swap (STL-CLR)](multimap-swap-stl-clr.md)\n#### [multimap::to_array (STL-CLR)](multimap-to-array-stl-clr.md)\n#### [multimap::upper_bound (STL-CLR)](multimap-upper-bound-stl-clr.md)\n#### [multimap::value_comp (STL-CLR)](multimap-value-comp-stl-clr.md)\n#### [multimap::value_compare (STL-CLR)](multimap-value-compare-stl-clr.md)\n#### [multimap::value_type (STL-CLR)](multimap-value-type-stl-clr.md)\n#### [operator!= (multimap) (STL-CLR)](operator-inequality-multimap-stl-clr.md)\n#### [operator< (multimap) (STL-CLR)](operator-less-than-multimap-stl-clr.md)\n#### [operator<= (multimap) (STL-CLR)](operator-less-or-equal-multimap-stl-clr.md)\n#### [operator== (multimap) (STL-LR)](operator-equality-multimap-stl-lr.md)\n#### [operator> (multimap) (STL-CLR)](operator-greater-than-multimap-stl-clr.md)\n#### [operator>= (multimap) (STL-CLR)](operator-greater-or-equal-multimap-stl-clr.md)\n### [multiset (STL-CLR)](multiset-stl-clr.md)\n#### [multiset::begin (STL-CLR)](multiset-begin-stl-clr.md)\n#### [multiset::clear (STL-CLR)](multiset-clear-stl-clr.md)\n#### [multiset::const_iterator (STL-CLR)](multiset-const-iterator-stl-clr.md)\n#### [multiset::const_reference (STL-CLR)](multiset-const-reference-stl-clr.md)\n#### [multiset::const_reverse_iterator (STL-CLR)](multiset-const-reverse-iterator-stl-clr.md)\n#### [multiset::count (STL-CLR)](multiset-count-stl-clr.md)\n#### [multiset::difference_type (STL-CLR)](multiset-difference-type-stl-clr.md)\n#### [multiset::empty (STL-CLR)](multiset-empty-stl-clr.md)\n#### [multiset::end (STL-CLR)](multiset-end-stl-clr.md)\n#### [multiset::equal_range (STL-CLR)](multiset-equal-range-stl-clr.md)\n#### [multiset::erase (STL-CLR)](multiset-erase-stl-clr.md)\n#### [multiset::find (STL-CLR)](multiset-find-stl-clr.md)\n#### [multiset::generic_container (STL-CLR)](multiset-generic-container-stl-clr.md)\n#### [multiset::generic_iterator (STL-CLR)](multiset-generic-iterator-stl-clr.md)\n#### [multiset::generic_reverse_iterator (STL-CLR)](multiset-generic-reverse-iterator-stl-clr.md)\n#### [multiset::generic_value (STL-CLR)](multiset-generic-value-stl-clr.md)\n#### [multiset::insert (STL-CLR)](multiset-insert-stl-clr.md)\n#### [multiset::iterator (STL-CLR)](multiset-iterator-stl-clr.md)\n#### [multiset::key_comp (STL-CLR)](multiset-key-comp-stl-clr.md)\n#### [multiset::key_compare (STL-CLR)](multiset-key-compare-stl-clr.md)\n#### [multiset::key_type (STL-CLR)](multiset-key-type-stl-clr.md)\n#### [multiset::lower_bound (STL-CLR)](multiset-lower-bound-stl-clr.md)\n#### [multiset::make_value (STL-CLR)](multiset-make-value-stl-clr.md)\n#### [multiset::multiset (STL-CLR)](multiset-multiset-stl-clr.md)\n#### [multiset::operator= (STL-CLR)](multiset-operator-assign-stl-clr.md)\n#### [multiset::rbegin (STL-CLR)](multiset-rbegin-stl-clr.md)\n#### [multiset::reference (STL-CLR)](multiset-reference-stl-clr.md)\n#### [multiset::rend (STL-CLR)](multiset-rend-stl-clr.md)\n#### [multiset::reverse_iterator (STL-CLR)](multiset-reverse-iterator-stl-clr.md)\n#### [multiset::size (STL-CLR)](multiset-size-stl-clr.md)\n#### [multiset::size_type (STL-CLR)](multiset-size-type-stl-clr.md)\n#### [multiset::swap (STL-CLR)](multiset-swap-stl-clr.md)\n#### [multiset::to_array (STL-CLR)](multiset-to-array-stl-clr.md)\n#### [multiset::upper_bound (STL-CLR)](multiset-upper-bound-stl-clr.md)\n#### [multiset::value_comp (STL-CLR)](multiset-value-comp-stl-clr.md)\n#### [multiset::value_compare (STL-CLR)](multiset-value-compare-stl-clr.md)\n#### [multiset::value_type (STL-CLR)](multiset-value-type-stl-clr.md)\n#### [operator!= (multiset) (STL-CLR)](operator-inequality-multiset-stl-clr.md)\n#### [operator< (multiset) (STL-CLR)](operator-less-than-multiset-stl-clr.md)\n#### [operator<= (multiset) (STL-CLR)](operator-less-or-equal-multiset-stl-clr.md)\n#### [operator== (multiset) (STL-CLR)](operator-equality-multiset-stl-clr.md)\n#### [operator> (multiset) (STL-CLR)](operator-greater-than-multiset-stl-clr.md)\n#### [operator>= (multiset) (STL-CLR)](operator-greater-or-equal-multiset-stl-clr.md)\n### [numeric (STL-CLR)](numeric-stl-clr.md)\n#### [accumulate (STL-CLR)](accumulate-stl-clr.md)\n#### [adjacent_difference (STL-CLR)](adjacent-difference-stl-clr.md)\n#### [inner_product (STL-CLR)](inner-product-stl-clr.md)\n#### [partial_sum (STL-CLR)](partial-sum-stl-clr.md)\n### [priority_queue (STL-CLR)](priority-queue-stl-clr.md)\n#### [priority_queue::assign (STL-CLR)](priority-queue-assign-stl-clr.md)\n#### [priority_queue::const_reference (STL-CLR)](priority-queue-const-reference-stl-clr.md)\n#### [priority_queue::container_type (STL-CLR)](priority-queue-container-type-stl-clr.md)\n#### [priority_queue::difference_type (STL-CLR)](priority-queue-difference-type-stl-clr.md)\n#### [priority_queue::empty (STL-CLR)](priority-queue-empty-stl-clr.md)\n#### [priority_queue::generic_container (STL-CLR)](priority-queue-generic-container-stl-clr.md)\n#### [priority_queue::generic_value (STL-CLR)](priority-queue-generic-value-stl-clr.md)\n#### [priority_queue::get_container (STL-CLR)](priority-queue-get-container-stl-clr.md)\n#### [priority_queue::operator= (STL-CLR)](priority-queue-operator-assign-stl-clr.md)\n#### [priority_queue::pop (STL-CLR)](priority-queue-pop-stl-clr.md)\n#### [priority_queue::priority_queue (STL-CLR)](priority-queue-priority-queue-stl-clr.md)\n#### [priority_queue::push (STL-CLR)](priority-queue-push-stl-clr.md)\n#### [priority_queue::reference (STL-CLR)](priority-queue-reference-stl-clr.md)\n#### [priority_queue::size (STL-CLR)](priority-queue-size-stl-clr.md)\n#### [priority_queue::size_type (STL-CLR)](priority-queue-size-type-stl-clr.md)\n#### [priority_queue::to_array (STL-CLR)](priority-queue-to-array-stl-clr.md)\n#### [priority_queue::top (STL-CLR)](priority-queue-top-stl-clr.md)\n#### [priority_queue::top_item (STL-CLR)](priority-queue-top-item-stl-clr.md)\n#### [priority_queue::value_comp (STL-CLR)](priority-queue-value-comp-stl-clr.md)\n#### [priority_queue::value_compare (STL-CLR)](priority-queue-value-compare-stl-clr.md)\n#### [priority_queue::value_type (STL-CLR)](priority-queue-value-type-stl-clr.md)\n### [queue (STL-CLR)](queue-stl-clr.md)\n#### [operator!= (queue) (STL-CLR)](operator-inequality-queue-stl-clr.md)\n#### [operator< (queue) (STL-CLR)](operator-less-than-queue-stl-clr.md)\n#### [operator<= (queue) (STL-CLR)](operator-less-or-equal-queue-stl-clr.md)\n#### [operator== (queue) (STL-CLR)](operator-equality-queue-stl-clr.md)\n#### [operator> (queue) (STL-CLR)](operator-greater-than-queue-stl-clr.md)\n#### [operator>= (queue) (STL-CLR)](operator-greater-or-equal-queue-stl-clr.md)\n#### [queue::assign (STL-CLR)](queue-assign-stl-clr.md)\n#### [queue::back (STL-CLR)](queue-back-stl-clr.md)\n#### [queue::back_item (STL-CLR)](queue-back-item-stl-clr.md)\n#### [queue::const_reference (STL-CLR)](queue-const-reference-stl-clr.md)\n#### [queue::container_type (STL-CLR)](queue-container-type-stl-clr.md)\n#### [queue::difference_type (STL-CLR)](queue-difference-type-stl-clr.md)\n#### [queue::empty (STL-CLR)](queue-empty-stl-clr.md)\n#### [queue::front (STL-CLR)](queue-front-stl-clr.md)\n#### [queue::front_item (STL-CLR)](queue-front-item-stl-clr.md)\n#### [queue::generic_container (STL-CLR)](queue-generic-container-stl-clr.md)\n#### [queue::generic_value (STL-CLR)](queue-generic-value-stl-clr.md)\n#### [queue::get_container (STL-CLR)](queue-get-container-stl-clr.md)\n#### [queue::operator= (STL-CLR)](queue-operator-assign-stl-clr.md)\n#### [queue::pop (STL-CLR)](queue-pop-stl-clr.md)\n#### [queue::push (STL-CLR)](queue-push-stl-clr.md)\n#### [queue::queue (STL-CLR)](queue-queue-stl-clr.md)\n#### [queue::reference (STL-CLR)](queue-reference-stl-clr.md)\n#### [queue::size (STL-CLR)](queue-size-stl-clr.md)\n#### [queue::size_type (STL-CLR)](queue-size-type-stl-clr.md)\n#### [queue::to_array (STL-CLR)](queue-to-array-stl-clr.md)\n#### [queue::value_type (STL-CLR)](queue-value-type-stl-clr.md)\n### [set (STL-CLR)](set-stl-clr.md)\n#### [operator!= (set) (STL-CLR)](operator-inequality-set-stl-clr.md)\n#### [operator< (set) (STL-CLR)](operator-less-than-set-stl-clr.md)\n#### [operator<= (set) (STL-CLR)](operator-less-or-equal-set-stl-clr.md)\n#### [operator== (set) (STL-CLR)](operator-equality-set-stl-clr.md)\n#### [operator> (set) (STL-CLR)](operator-greater-than-set-stl-clr.md)\n#### [operator>= (set) (STL-CLR)](operator-greater-or-equal-set-stl-clr.md)\n#### [set::begin (STL-CLR)](set-begin-stl-clr.md)\n#### [set::clear (STL-CLR)](set-clear-stl-clr.md)\n#### [set::const_iterator (STL-CLR)](set-const-iterator-stl-clr.md)\n#### [set::const_reference (STL-CLR)](set-const-reference-stl-clr.md)\n#### [set::const_reverse_iterator (STL-CLR)](set-const-reverse-iterator-stl-clr.md)\n#### [set::count (STL-CLR)](set-count-stl-clr.md)\n#### [set::difference_type (STL-CLR)](set-difference-type-stl-clr.md)\n#### [set::empty (STL-CLR)](set-empty-stl-clr.md)\n#### [set::end (STL-CLR)](set-end-stl-clr.md)\n#### [set::equal_range (STL-CLR)](set-equal-range-stl-clr.md)\n#### [set::erase (STL-CLR)](set-erase-stl-clr.md)\n#### [set::find (STL-CLR)](set-find-stl-clr.md)\n#### [set::generic_container (STL-CLR)](set-generic-container-stl-clr.md)\n#### [set::generic_iterator (STL-CLR)](set-generic-iterator-stl-clr.md)\n#### [set::generic_reverse_iterator (STL-CLR)](set-generic-reverse-iterator-stl-clr.md)\n#### [set::generic_value (STL-CLR)](set-generic-value-stl-clr.md)\n#### [set::insert (STL-CLR)](set-insert-stl-clr.md)\n#### [set::iterator (STL-CLR)](set-iterator-stl-clr.md)\n#### [set::key_comp (STL-CLR)](set-key-comp-stl-clr.md)\n#### [set::key_compare (STL-CLR)](set-key-compare-stl-clr.md)\n#### [set::key_type (STL-CLR)](set-key-type-stl-clr.md)\n#### [set::lower_bound (STL-CLR)](set-lower-bound-stl-clr.md)\n#### [set::make_value (STL-CLR)](set-make-value-stl-clr.md)\n#### [set::operator= (STL-CLR)](set-operator-assign-stl-clr.md)\n#### [set::rbegin (STL-CLR)](set-rbegin-stl-clr.md)\n#### [set::reference (STL-CLR)](set-reference-stl-clr.md)\n#### [set::rend (STL-CLR)](set-rend-stl-clr.md)\n#### [set::reverse_iterator (STL-CLR)](set-reverse-iterator-stl-clr.md)\n#### [set::set (STL-CLR)](set-set-stl-clr.md)\n#### [set::size (STL-CLR)](set-size-stl-clr.md)\n#### [set::size_type (STL-CLR)](set-size-type-stl-clr.md)\n#### [set::swap (STL-CLR)](set-swap-stl-clr.md)\n#### [set::to_array (STL-CLR)](set-to-array-stl-clr.md)\n#### [set::upper_bound (STL-CLR)](set-upper-bound-stl-clr.md)\n#### [set::value_comp (STL-CLR)](set-value-comp-stl-clr.md)\n#### [set::value_compare (STL-CLR)](set-value-compare-stl-clr.md)\n#### [set::value_type (STL-CLR)](set-value-type-stl-clr.md)\n### [stack (STL-CLR)](stack-stl-clr.md)\n#### [operator!= (stack) (STL-CLR)](operator-inequality-stack-stl-clr.md)\n#### [operator< (stack) (STL-CLR)](operator-less-than-stack-stl-clr.md)\n#### [operator<= (stack) (STL-CLR)](operator-less-or-equal-stack-stl-clr.md)\n#### [operator== (stack) (STL-CLR)](operator-equality-stack-stl-clr.md)\n#### [operator> (stack) (STL-CLR)](operator-greater-than-stack-stl-clr.md)\n#### [operator>= (stack) (STL-CLR)](operator-greater-or-equal-stack-stl-clr.md)\n#### [stack::assign (STL-CLR)](stack-assign-stl-clr.md)\n#### [stack::const_reference (STL-CLR)](stack-const-reference-stl-clr.md)\n#### [stack::container_type (STL-CLR)](stack-container-type-stl-clr.md)\n#### [stack::difference_type (STL-CLR)](stack-difference-type-stl-clr.md)\n#### [stack::empty (STL-CLR)](stack-empty-stl-clr.md)\n#### [stack::generic_container (STL-CLR)](stack-generic-container-stl-clr.md)\n#### [stack::generic_value (STL-CLR)](stack-generic-value-stl-clr.md)\n#### [stack::get_container (STL-CLR)](stack-get-container-stl-clr.md)\n#### [stack::operator= (STL-CLR)](stack-operator-assign-stl-clr.md)\n#### [stack::pop (STL-CLR)](stack-pop-stl-clr.md)\n#### [stack::push (STL-CLR)](stack-push-stl-clr.md)\n#### [stack::reference (STL-CLR)](stack-reference-stl-clr.md)\n#### [stack::size (STL-CLR)](stack-size-stl-clr.md)\n#### [stack::size_type (STL-CLR)](stack-size-type-stl-clr.md)\n#### [stack::stack (STL-CLR)](stack-stack-stl-clr.md)\n#### [stack::to_array (STL-CLR)](stack-to-array-stl-clr.md)\n#### [stack::top (STL-CLR)](stack-top-stl-clr.md)\n#### [stack::top_item (STL-CLR)](stack-top-item-stl-clr.md)\n#### [stack::value_type (STL-CLR)](stack-value-type-stl-clr.md)\n### [utility (STL-CLR)](utility-stl-clr.md)\n#### [make_pair (STL-CLR)](make-pair-stl-clr.md)\n#### [operator!= (pair) (STL-CLR)](operator-inequality-pair-stl-clr.md)\n#### [operator< (pair) (STL-CLR)](operator-less-than-pair-stl-clr.md)\n#### [operator<= (pair) (STL-CLR)](operator-less-or-equal-pair-stl-clr.md)\n#### [operator== (pair) (STL-CLR)](operator-equality-pair-stl-clr.md)\n#### [operator> (pair) (STL-CLR)](operator-greater-than-pair-stl-clr.md)\n#### [operator>= (pair) (STL-CLR)](operator-greater-or-equal-pair-stl-clr.md)\n#### [pair (STL-CLR)](pair-stl-clr.md)\n#### [pair::first (STL-CLR)](pair-first-stl-clr.md)\n#### [pair::first_type (STL-CLR)](pair-first-type-stl-clr.md)\n#### [pair::operator= (STL-CLR)](pair-operator-assign-stl-clr.md)\n#### [pair::pair (STL-CLR)](pair-pair-stl-clr.md)\n#### [pair::second (STL-CLR)](pair-second-stl-clr.md)\n#### [pair::second_type (STL-CLR)](pair-second-type-stl-clr.md)\n#### [pair::swap (STL-CLR)](pair-swap-stl-clr.md)\n### [vector (STL-CLR)](vector-stl-clr.md)\n#### [operator!= (vector) (STL-CLR)](operator-inequality-vector-stl-clr.md)\n#### [operator< (vector) (STL-CLR)](operator-less-than-vector-stl-clr.md)\n#### [operator<= (vector) (STL-CLR)](operator-less-or-equal-vector-stl-clr.md)\n#### [operator== (vector) (STL-CLR)](operator-equality-vector-stl-clr.md)\n#### [operator> (vector) (STL-CLR)](operator-greater-than-vector-stl-clr.md)\n#### [operator>= (vector) (STL-CLR)](operator-greater-or-equal-vector-stl-clr.md)\n#### [vector::assign (STL-CLR)](vector-assign-stl-clr.md)\n#### [vector::at (STL-CLR)](vector-at-stl-clr.md)\n#### [vector::back (STL-CLR)](vector-back-stl-clr.md)\n#### [vector::back_item (STL-CLR)](vector-back-item-stl-clr.md)\n#### [vector::begin (STL-CLR)](vector-begin-stl-clr.md)\n#### [vector::capacity (STL-CLR)](vector-capacity-stl-clr.md)\n#### [vector::clear (STL-CLR)](vector-clear-stl-clr.md)\n#### [vector::const_iterator (STL-CLR)](vector-const-iterator-stl-clr.md)\n#### [vector::const_reference (STL-CLR)](vector-const-reference-stl-clr.md)\n#### [vector::const_reverse_iterator (STL-CLR)](vector-const-reverse-iterator-stl-clr.md)\n#### [vector::difference_type (STL-CLR)](vector-difference-type-stl-clr.md)\n#### [vector::empty (STL-CLR)](vector-empty-stl-clr.md)\n#### [vector::end (STL-CLR)](vector-end-stl-clr.md)\n#### [vector::erase (STL-CLR)](vector-erase-stl-clr.md)\n#### [vector::front (STL-CLR)](vector-front-stl-clr.md)\n#### [vector::front_item (STL-CLR)](vector-front-item-stl-clr.md)\n#### [vector::generic_container (STL-CLR)](vector-generic-container-stl-clr.md)\n#### [vector::generic_iterator (STL-CLR)](vector-generic-iterator-stl-clr.md)\n#### [vector::generic_reverse_iterator (STL-CLR)](vector-generic-reverse-iterator-stl-clr.md)\n#### [vector::generic_value (STL-CLR)](vector-generic-value-stl-clr.md)\n#### [vector::insert (STL-CLR)](vector-insert-stl-clr.md)\n#### [vector::iterator (STL-CLR)](vector-iterator-stl-clr.md)\n#### [vector::operator= (STL-CLR)](vector-operator-assign-stl-clr.md)\n#### [vector::operator(STL-CLR)](vector-operator-stl-clr.md)\n#### [vector::pop_back (STL-CLR)](vector-pop-back-stl-clr.md)\n#### [vector::push_back (STL-CLR)](vector-push-back-stl-clr.md)\n#### [vector::rbegin (STL-CLR)](vector-rbegin-stl-clr.md)\n#### [vector::reference (STL-CLR)](vector-reference-stl-clr.md)\n#### [vector::rend (STL-CLR)](vector-rend-stl-clr.md)\n#### [vector::reserve (STL-CLR)](vector-reserve-stl-clr.md)\n#### [vector::resize (STL-CLR)](vector-resize-stl-clr.md)\n#### [vector::reverse_iterator (STL-CLR)](vector-reverse-iterator-stl-clr.md)\n#### [vector::size (STL-CLR)](vector-size-stl-clr.md)\n#### [vector::size_type (STL-CLR)](vector-size-type-stl-clr.md)\n#### [vector::swap (STL-CLR)](vector-swap-stl-clr.md)\n#### [vector::to_array (STL-CLR)](vector-to-array-stl-clr.md)\n#### [vector::value_type (STL-CLR)](vector-value-type-stl-clr.md)\n#### [vector::vector (STL-CLR)](vector-vector-stl-clr.md)\n## [C++ Support Library](cpp-support-library.md)\n### [Overview of Marshaling in C++](overview-of-marshaling-in-cpp.md)\n#### [marshal_as](marshal-as.md)\n#### [marshal_context Class](marshal-context-class.md)\n##### [marshal_context::marshal_context](marshal-context-marshal-context.md)\n##### [marshal_context::~marshal_context](marshal-context-tilde-marshal-context.md)\n##### [marshal_context::marshal_as](marshal-context-marshal-as.md)\n### [msclr namespace](msclr-namespace.md)\n### [Resource Management Classes](resource-management-classes.md)\n#### [auto_gcroot](auto-gcroot.md)\n##### [auto_gcroot Class](auto-gcroot-class.md)\n###### [auto_gcroot Members](auto-gcroot-members.md)\n###### [auto_gcroot::auto_gcroot](auto-gcroot-auto-gcroot.md)\n###### [auto_gcroot::~auto_gcroot](auto-gcroot-tilde-auto-gcroot.md)\n###### [auto_gcroot::attach](auto-gcroot-attach.md)\n###### [auto_gcroot::get](auto-gcroot-get.md)\n###### [auto_gcroot::release](auto-gcroot-release.md)\n###### [auto_gcroot::reset](auto-gcroot-reset.md)\n###### [auto_gcroot::swap](auto-gcroot-swap.md)\n###### [auto_gcroot::operator=](auto-gcroot-operator-assign.md)\n###### [auto_gcroot::operator->](auto-gcroot-operator-arrow.md)\n###### [auto_gcroot::operator!](auto-gcroot-operator-logical-not.md)\n###### [auto_gcroot::operator auto_gcroot](auto-gcroot-operator-auto-gcroot.md)\n###### [auto_gcroot::operator bool](auto-gcroot-operator-bool.md)\n##### [swap Function (auto_gcroot)](swap-function-auto-gcroot.md)\n#### [auto_handle](auto-handle.md)\n##### [auto_handle Class](auto-handle-class.md)\n###### [auto_handle Members](auto-handle-members.md)\n###### [auto_handle::auto_handle](auto-handle-auto-handle.md)\n###### [auto_handle::~auto_handle](auto-handle-tilde-auto-handle.md)\n###### [auto_handle::get](auto-handle-get.md)\n###### [auto_handle::release](auto-handle-release.md)\n###### [auto_handle::reset](auto-handle-reset.md)\n###### [auto_handle::swap](auto-handle-swap.md)\n###### [auto_handle::operator=](auto-handle-operator-assign.md)\n###### [auto_handle::operator->](auto-handle-operator-arrow.md)\n###### [auto_handle::operator!](auto-handle-operator-logical-not.md)\n###### [auto_handle::operator auto_handle](auto-handle-operator-auto-handle.md)\n###### [auto_handle::operator bool](auto-handle-operator-bool.md)\n##### [swap Function (auto_handle)](swap-function-auto-handle.md)\n### [Synchronization (lock Class)](synchronization-lock-class.md)\n#### [lock](lock.md)\n##### [lock Class](lock-class.md)\n###### [lock Members](lock-members.md)\n###### [lock::lock](lock-lock.md)\n###### [lock::~lock](lock-tilde-lock.md)\n###### [lock::is_locked](lock-is-locked.md)\n###### [lock::operator bool](lock-operator-bool.md)\n###### [lock::acquire](lock-acquire.md)\n###### [lock::try_acquire](lock-try-acquire.md)\n###### [lock::release](lock-release.md)\n###### [lock::operator==](lock-operator-equality.md)\n###### [lock::operator!=](lock-operator-inequality.md)\n##### [lock_when Enum](lock-when-enum.md)\n### [Calling Functions in a Specific Application Domain](calling-functions-in-a-specific-application-domain.md)\n#### [call_in_appdomain Function](call-in-appdomain-function.md)\n### [com::ptr](com-ptr.md)\n#### [com::ptr Class](com-ptr-class.md)\n##### [ptr Members](ptr-members.md)\n##### [ptr::ptr](ptr-ptr.md)\n##### [ptr::~ptr](ptr-tilde-ptr.md)\n##### [ptr::Attach](ptr-attach.md)\n##### [ptr::CreateInstance](ptr-createinstance.md)\n##### [ptr::Detach](ptr-detach.md)\n##### [ptr::GetInterface](ptr-getinterface.md)\n##### [ptr::QueryInterface](ptr-queryinterface.md)\n##### [ptr::Release](ptr-release.md)\n##### [ptr::operator=](ptr-operator-assign.md)\n##### [ptr::operator->](ptr-operator-arrow.md)\n##### [ptr::operator!](ptr-operator-logical-not.md)\n##### [ptr::operator bool](ptr-operator-bool.md)\n## [Exceptions in C++-CLI](exceptions-in-cpp-cli.md)\n### [Basic Concepts in Using Managed Exceptions](basic-concepts-in-using-managed-exceptions.md)\n### [Differences in Exception Handling Behavior Under -CLR](differences-in-exception-handling-behavior-under-clr.md)\n### [finally](finally.md)\n### [How to: Catch Exceptions in Native Code Thrown from MSIL](how-to-catch-exceptions-in-native-code-thrown-from-msil.md)\n### [How to: Define and Install a Global Exception Handler](how-to-define-and-install-a-global-exception-handler.md)\n## [Boxing (C++-CLI)](boxing-cpp-cli.md)\n### [How to: Explicitly Request Boxing](how-to-explicitly-request-boxing.md)\n### [How to: Use gcnew to Create Value Types and Use Implicit Boxing](how-to-use-gcnew-to-create-value-types-and-use-implicit-boxing.md)\n### [How to: Unbox](how-to-unbox.md)\n### [Standard Conversions and Implicit Boxing](standard-conversions-and-implicit-boxing.md)\n"}