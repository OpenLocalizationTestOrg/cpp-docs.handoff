{"nodes":[{"pos":[12,43],"content":"&lt;memory&gt; | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"memory<ph id=\"ph1\">&amp;gt;</ph> | Microsoft Docs","pos":[4,31],"source":"memory&gt; | Microsoft Docs"}]},{"content":"memory","pos":[665,671]},{"content":"Defines a class, an operator, and several templates that help allocate and free objects.","pos":[676,764]},{"content":"Syntax","pos":[773,779]},{"content":"Members","pos":[826,833]},{"content":"Functions","pos":[843,852]},{"content":"addressof","pos":[874,883]},{"content":"Gets the true address of an object.","pos":[936,971]},{"content":"align","pos":[977,982]},{"content":"Returns a pointer to a range of a given size, based on the provided alignment and starting address.","pos":[1031,1130]},{"content":"allocate_shared","pos":[1136,1151]},{"pos":[1210,1323],"content":"Creates a <ph id=\"ph1\">`shared_ptr`</ph> to objects that are allocated and constructed for a given type with a specified allocator.","source":"Creates a `shared_ptr` to objects that are allocated and constructed for a given type with a specified allocator."},{"content":"const_pointer_cast","pos":[1329,1347]},{"pos":[1409,1436],"content":"Const cast to <ph id=\"ph1\">`shared_ptr`</ph>.","source":"Const cast to `shared_ptr`."},{"content":"declare_no_pointers","pos":[1442,1461]},{"content":"Informs a garbage collector that the characters starting at a specified address and falling within the indicated block size contain no traceable pointers.","pos":[1524,1678]},{"content":"declare_reachable","pos":[1684,1701]},{"content":"Informs garbage collection that the indicated address is to allocated storage and is reachable.","pos":[1762,1857]},{"content":"default_delete","pos":[1863,1877]},{"content":"Deletes objects allocated with <ph id=\"ph1\">`operator new`</ph>.","pos":[1935,1981],"source":"Deletes objects allocated with `operator new`."},{"content":"Suitable for use with <ph id=\"ph1\">`unique_ptr`</ph>.","pos":[1982,2017],"source":" Suitable for use with `unique_ptr`."},{"content":"dynamic_pointer_cast","pos":[2023,2043]},{"pos":[2107,2136],"content":"Dynamic cast to <ph id=\"ph1\">`shared_ptr`</ph>.","source":"Dynamic cast to `shared_ptr`."},{"content":"get_deleter","pos":[2142,2153]},{"pos":[2217,2247],"content":"Get deleter from <ph id=\"ph1\">`shared_ptr`</ph>.","source":"Get deleter from `shared_ptr`."},{"content":"get_pointer_safety","pos":[2253,2271]},{"content":"Returns the type of pointer safety assumed by any garbage collector.","pos":[2333,2401]},{"content":"get_temporary_buffer","pos":[2407,2427]},{"content":"Allocates temporary storage for a sequence of elements that does not exceed a specified number of elements.","pos":[2491,2598]},{"content":"make_shared","pos":[2604,2615]},{"pos":[2670,2809],"content":"Creates and returns a <ph id=\"ph1\">`shared_ptr`</ph> that points to the allocated object constructed from zero or more arguments using the default allocator.","source":"Creates and returns a `shared_ptr` that points to the allocated object constructed from zero or more arguments using the default allocator."},{"content":"make_unique","pos":[2815,2826]},{"pos":[2881,3033],"content":"Creates and returns a <bpt id=\"p1\">[</bpt>unique_ptr<ept id=\"p1\">](../standard-library/unique-ptr-class.md)</ept> that points to the allocated object constructed from zero or more arguments.","source":"Creates and returns a [unique_ptr](../standard-library/unique-ptr-class.md) that points to the allocated object constructed from zero or more arguments."},{"content":"owner_less","pos":[3039,3049]},{"content":"Allows ownership-based mixed comparisons of shared and weak pointers.","pos":[3103,3172]},{"content":"pointer_safety","pos":[3178,3192]},{"pos":[3258,3332],"content":"An enumeration of all the possible return values for <ph id=\"ph1\">`get_pointer_safety`</ph>.","source":"An enumeration of all the possible return values for `get_pointer_safety`."},{"content":"return_temporary_buffer","pos":[3338,3361]},{"pos":[3428,3531],"content":"Deallocates the temporary memory that was allocated using the <ph id=\"ph1\">`get_temporary_buffer`</ph> template function.","source":"Deallocates the temporary memory that was allocated using the `get_temporary_buffer` template function."},{"content":"static_pointer_cast","pos":[3537,3556]},{"pos":[3619,3647],"content":"Static cast to <ph id=\"ph1\">`shared_ptr`</ph>.","source":"Static cast to `shared_ptr`."},{"content":"swap","pos":[3653,3657]},{"pos":[3705,3749],"content":"Swap two <ph id=\"ph1\">`shared_ptr`</ph> or <ph id=\"ph2\">`weak_ptr`</ph> objects.","source":"Swap two `shared_ptr` or `weak_ptr` objects."},{"content":"undeclare_no_pointers","pos":[3755,3776]},{"content":"Informs a garbage collector that the characters in the memory block defined by a base address pointer and block size may now contain traceable pointers.","pos":[3841,3993]},{"content":"undeclare_reachable","pos":[3999,4018]},{"pos":[4081,4161],"content":"Informs a <ph id=\"ph1\">`garbage_collector`</ph> that a specified memory location is not reachable.","source":"Informs a `garbage_collector` that a specified memory location is not reachable."},{"content":"uninitialized_copy","pos":[4167,4185]},{"content":"Copies objects from a specified input range into an uninitialized destination range.","pos":[4247,4331]},{"content":"uninitialized_copy_n","pos":[4337,4357]},{"content":"Creates a copy of a specified number of elements from an input iterator.","pos":[4421,4493]},{"content":"The copies are put in a forward iterator.","pos":[4494,4535]},{"content":"uninitialized_fill","pos":[4541,4559]},{"content":"Copies objects of a specified value into an uninitialized destination range.","pos":[4621,4697]},{"content":"uninitialized_fill_n","pos":[4703,4723]},{"content":"Copies objects of a specified value into specified number of elements an uninitialized destination range.","pos":[4787,4892]},{"content":"Operators","pos":[4903,4912]},{"content":"operator!=","pos":[4934,4944]},{"content":"Tests for inequality between allocator objects of a specified class.","pos":[5000,5068]},{"content":"operator==","pos":[5074,5084]},{"content":"Tests for equality between allocator objects of a specified class.","pos":[5142,5208]},{"content":"operator&gt;=","pos":[5214,5224],"source":"operator>="},{"content":"Tests for one allocator object being greater than or equal to a second allocator object, of a specified class.","pos":[5283,5393]},{"content":"operator&lt;","pos":[5399,5408],"source":"operator<"},{"content":"Tests for one object being less than a second object of a specified class.","pos":[5464,5538]},{"content":"operator","pos":[5544,5552]},{"content":"Tests for one object being less than or equal to a second object of a specified class.","pos":[5614,5700]},{"content":"operator&gt;","pos":[5706,5715],"source":"operator>"},{"content":"Tests for one object being greater than a second object of a specified class.","pos":[5771,5848]},{"content":"operator&lt;&lt;","pos":[5854,5864],"source":"operator<<"},{"pos":[5937,5946],"content":"inserter."},{"content":"Classes","pos":[5957,5964]},{"content":"allocator","pos":[5986,5995]},{"pos":[6037,6159],"content":"The template class describes an object that manages storage allocation and freeing for arrays of objects of type <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept>.","source":"The template class describes an object that manages storage allocation and freeing for arrays of objects of type **Type**."},{"content":"allocator_traits","pos":[6165,6181]},{"content":"Describes an object that determines all the information that is needed by an allocator-enabled container.","pos":[6230,6335]},{"content":"auto_ptr","pos":[6341,6349]},{"pos":[6390,6593],"content":"The template class describes an object that stores a pointer to an allocated object of type <bpt id=\"p1\">**</bpt>Type <ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> that ensures the object to which it points gets deleted when its enclosing auto_ptr gets destroyed.","source":"The template class describes an object that stores a pointer to an allocated object of type **Type \\*** that ensures the object to which it points gets deleted when its enclosing auto_ptr gets destroyed."},{"content":"bad_weak_ptr","pos":[6599,6611]},{"content":"Reports bad weak_ptr exception.","pos":[6656,6687]},{"content":"enabled_shared_from_this","pos":[6693,6717]},{"pos":[6773,6803],"content":"Helps generate a <ph id=\"ph1\">`shared_ptr`</ph>.","source":"Helps generate a `shared_ptr`."},{"content":"pointer_traits","pos":[6809,6823]},{"pos":[6871,7006],"content":"Supplies information that is needed by an object of template class <ph id=\"ph1\">`allocator_traits`</ph> to describe an allocator with pointer type <ph id=\"ph2\">`Ptr`</ph>.","source":"Supplies information that is needed by an object of template class `allocator_traits` to describe an allocator with pointer type `Ptr`."},{"content":"raw_storage_iterator","pos":[7012,7032]},{"content":"An adaptor class that is provided to enable algorithms to store their results into uninitialized memory.","pos":[7085,7189]},{"content":"shared_ptr","pos":[7195,7205]},{"content":"Wraps a reference-counted smart pointer around a dynamically allocated object.","pos":[7248,7326]},{"content":"unique_ptr","pos":[7332,7342]},{"content":"Stores a pointer to an owned object.","pos":[7385,7421]},{"content":"The pointer is owned by no other <ph id=\"ph1\">`unique_ptr`</ph>.","pos":[7422,7468],"source":" The pointer is owned by no other `unique_ptr`."},{"content":"The <ph id=\"ph1\">`unique_ptr`</ph> is destroyed when the owner is destroyed.","pos":[7469,7527],"source":" The `unique_ptr` is destroyed when the owner is destroyed."},{"content":"weak_ptr","pos":[7533,7541]},{"content":"Wraps a weakly linked pointer.","pos":[7582,7612]},{"content":"Specializations","pos":[7623,7638]},{"content":"allocator<ph id=\"ph1\">\\&lt;</ph>void&gt;","pos":[7660,7676],"source":"allocator\\<void>"},{"content":"A specialization of the template class allocator to type void, defining the only the member types that make sense in this specialized context.","pos":[7723,7865]},{"content":"See Also","pos":[7875,7883]},{"content":"Header Files Reference","pos":[7888,7910]},{"content":"Thread Safety in the C++ Standard Library","pos":[7975,8016]}],"content":"---\ntitle: \"&lt;memory&gt; | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"memory/std::<memory>\"\n  - \"std.<memory>\"\n  - \"<memory>\"\n  - \"std::<memory>\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"memory header\"\nms.assetid: ef8e38da-7c9d-4037-9ad1-20c99febf5dc\ncaps.latest.revision: 22\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# &lt;memory&gt;\nDefines a class, an operator, and several templates that help allocate and free objects.  \n  \n## Syntax  \n  \n```  \n#include <memory>  \n  \n```  \n  \n## Members  \n  \n### Functions  \n  \n|||  \n|-|-|  \n|[addressof](../standard-library/memory-functions.md#addressof)|Gets the true address of an object.|  \n|[align](../standard-library/memory-functions.md#align)|Returns a pointer to a range of a given size, based on the provided alignment and starting address.|  \n|[allocate_shared](../standard-library/memory-functions.md#allocate_shared)|Creates a `shared_ptr` to objects that are allocated and constructed for a given type with a specified allocator.|  \n|[const_pointer_cast](../standard-library/memory-functions.md#const_pointer_cast)|Const cast to `shared_ptr`.|  \n|[declare_no_pointers](../standard-library/memory-functions.md#declare_no_pointers)|Informs a garbage collector that the characters starting at a specified address and falling within the indicated block size contain no traceable pointers.|  \n|[declare_reachable](../standard-library/memory-functions.md#declare_reachable)|Informs garbage collection that the indicated address is to allocated storage and is reachable.|  \n|[default_delete](../standard-library/memory-functions.md#default_delete)|Deletes objects allocated with `operator new`. Suitable for use with `unique_ptr`.|  \n|[dynamic_pointer_cast](../standard-library/memory-functions.md#dynamic_pointer_cast)|Dynamic cast to `shared_ptr`.|  \n|[get_deleter](../standard-library/memory-functions.md#get_deleter_function)|Get deleter from `shared_ptr`.|  \n|[get_pointer_safety](../standard-library/memory-functions.md#get_pointer_safety)|Returns the type of pointer safety assumed by any garbage collector.|  \n|[get_temporary_buffer](../standard-library/memory-functions.md#get_temporary_buffer)|Allocates temporary storage for a sequence of elements that does not exceed a specified number of elements.|  \n|[make_shared](../standard-library/memory-functions.md#make_shared)|Creates and returns a `shared_ptr` that points to the allocated object constructed from zero or more arguments using the default allocator.|  \n|[make_unique](../standard-library/memory-functions.md#make_unique)|Creates and returns a [unique_ptr](../standard-library/unique-ptr-class.md) that points to the allocated object constructed from zero or more arguments.|  \n|[owner_less](../standard-library/memory-functions.md#owner_less)|Allows ownership-based mixed comparisons of shared and weak pointers.|  \n|[pointer_safety](../standard-library/memory-enums.md#pointer_safety_enumeration)|An enumeration of all the possible return values for `get_pointer_safety`.|  \n|[return_temporary_buffer](../standard-library/memory-functions.md#return_temporary_buffer)|Deallocates the temporary memory that was allocated using the `get_temporary_buffer` template function.|  \n|[static_pointer_cast](../standard-library/memory-functions.md#static_pointer_cast)|Static cast to `shared_ptr`.|  \n|[swap](../standard-library/memory-functions.md#swap)|Swap two `shared_ptr` or `weak_ptr` objects.|  \n|[undeclare_no_pointers](../standard-library/memory-functions.md#undeclare_no_pointers)|Informs a garbage collector that the characters in the memory block defined by a base address pointer and block size may now contain traceable pointers.|  \n|[undeclare_reachable](../standard-library/memory-functions.md#undeclare_reachable)|Informs a `garbage_collector` that a specified memory location is not reachable.|  \n|[uninitialized_copy](../standard-library/memory-functions.md#uninitialized_copy)|Copies objects from a specified input range into an uninitialized destination range.|  \n|[uninitialized_copy_n](../standard-library/memory-functions.md#uninitialized_copy_n)|Creates a copy of a specified number of elements from an input iterator. The copies are put in a forward iterator.|  \n|[uninitialized_fill](../standard-library/memory-functions.md#uninitialized_fill)|Copies objects of a specified value into an uninitialized destination range.|  \n|[uninitialized_fill_n](../standard-library/memory-functions.md#uninitialized_fill_n)|Copies objects of a specified value into specified number of elements an uninitialized destination range.|  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[operator!=](../standard-library/memory-operators.md#operator_neq)|Tests for inequality between allocator objects of a specified class.|  \n|[operator==](../standard-library/memory-operators.md#operator_eq_eq)|Tests for equality between allocator objects of a specified class.|  \n|[operator>=](../standard-library/memory-operators.md#operator_gt__eq)|Tests for one allocator object being greater than or equal to a second allocator object, of a specified class.|  \n|[operator<](../standard-library/memory-operators.md#operator_lt_)|Tests for one object being less than a second object of a specified class.|  \n|[operator\\<=](../standard-library/memory-operators.md#operator_lt__eq)|Tests for one object being less than or equal to a second object of a specified class.|  \n|[operator>](../standard-library/memory-operators.md#operator_gt_)|Tests for one object being greater than a second object of a specified class.|  \n|[operator<<](../standard-library/memory-operators.md#operator_lt__lt_)|`shared_ptr` inserter.|  \n  \n### Classes  \n  \n|||  \n|-|-|  \n|[allocator](../standard-library/allocator-class.md)|The template class describes an object that manages storage allocation and freeing for arrays of objects of type **Type**.|  \n|[allocator_traits](../standard-library/allocator-traits-class.md)|Describes an object that determines all the information that is needed by an allocator-enabled container.|  \n|[auto_ptr](../standard-library/auto-ptr-class.md)|The template class describes an object that stores a pointer to an allocated object of type **Type \\*** that ensures the object to which it points gets deleted when its enclosing auto_ptr gets destroyed.|  \n|[bad_weak_ptr](../standard-library/bad-weak-ptr-class.md)|Reports bad weak_ptr exception.|  \n|[enabled_shared_from_this](../standard-library/enable-shared-from-this-class.md)|Helps generate a `shared_ptr`.|  \n|[pointer_traits](../standard-library/pointer-traits-struct.md)|Supplies information that is needed by an object of template class `allocator_traits` to describe an allocator with pointer type `Ptr`.|  \n|[raw_storage_iterator](../standard-library/raw-storage-iterator-class.md)|An adaptor class that is provided to enable algorithms to store their results into uninitialized memory.|  \n|[shared_ptr](../standard-library/shared-ptr-class.md)|Wraps a reference-counted smart pointer around a dynamically allocated object.|  \n|[unique_ptr](../standard-library/unique-ptr-class.md)|Stores a pointer to an owned object. The pointer is owned by no other `unique_ptr`. The `unique_ptr` is destroyed when the owner is destroyed.|  \n|[weak_ptr](../standard-library/weak-ptr-class.md)|Wraps a weakly linked pointer.|  \n  \n### Specializations  \n  \n|||  \n|-|-|  \n|[allocator\\<void>](../standard-library/allocator-void-class.md)|A specialization of the template class allocator to type void, defining the only the member types that make sense in this specialized context.|  \n  \n## See Also  \n [Header Files Reference](../standard-library/cpp-standard-library-header-files.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)\n\n\n\n"}