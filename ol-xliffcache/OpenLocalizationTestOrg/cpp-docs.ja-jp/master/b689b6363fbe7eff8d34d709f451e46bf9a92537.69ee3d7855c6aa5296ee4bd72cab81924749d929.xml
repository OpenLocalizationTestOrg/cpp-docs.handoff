{"nodes":[{"pos":[12,48],"content":"move_iterator Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"move_iterator Class | Microsoft Docs","pos":[0,36]}]},{"content":"move_iterator Class","pos":[694,713]},{"content":"Class template <ph id=\"ph1\">`move_iterator`</ph> is a wrapper for an iterator.","pos":[714,774],"source":"Class template `move_iterator` is a wrapper for an iterator."},{"content":"The move_iterator provides the same behavior as the iterator it wraps (stores), except it turns the stored iteratorâ€™s dereference operator into an rvalue reference, turning a copy into a move.","pos":[775,967]},{"content":"For more information about rvalues, see <bpt id=\"p1\">[</bpt>Rvalue Reference Declarator: &amp;&amp;<ept id=\"p1\">](../cpp/rvalue-reference-declarator-amp-amp.md)</ept>.","pos":[968,1089],"source":" For more information about rvalues, see [Rvalue Reference Declarator: &&](../cpp/rvalue-reference-declarator-amp-amp.md)."},{"content":"Syntax","pos":[1098,1104]},{"content":"Remarks","pos":[1141,1148]},{"content":"The template class describes an object that behaves like an iterator except when dereferenced.","pos":[1152,1246]},{"content":"It stores a random-access iterator of type <ph id=\"ph1\">`Iterator`</ph>, accessed by way of the member function <ph id=\"ph2\">`base``()`</ph>.","pos":[1247,1352],"source":" It stores a random-access iterator of type `Iterator`, accessed by way of the member function `base``()`."},{"content":"All operations on a <ph id=\"ph1\">`move_iterator`</ph> are performed directly on the stored iterator, except that the result of <ph id=\"ph2\">`operator*`</ph> is implicitly cast to <ph id=\"ph3\">`value_type&amp;&amp;`</ph> to make an rvalue reference.","pos":[1353,1539],"source":" All operations on a `move_iterator` are performed directly on the stored iterator, except that the result of `operator*` is implicitly cast to `value_type&&` to make an rvalue reference."},{"content":"A <ph id=\"ph1\">`move_iterator`</ph> might be capable of operations that are not defined by the wrapped iterator.","pos":[1546,1640],"source":"A `move_iterator` might be capable of operations that are not defined by the wrapped iterator."},{"content":"These operations should not be used.","pos":[1641,1677]},{"content":"Constructors","pos":[1687,1699]},{"content":"move_iterator","pos":[1721,1734]},{"pos":[1767,1819],"content":"The constructor for objects of type <ph id=\"ph1\">`move_iterator`</ph>.","source":"The constructor for objects of type `move_iterator`."},{"content":"Typedefs","pos":[1830,1838]},{"content":"move_iterator::iterator_type","pos":[1860,1888]},{"pos":[1921,1975],"content":"A synonym for the template parameter <ph id=\"ph1\">`RandomIterator`</ph>.","source":"A synonym for the template parameter `RandomIterator`."},{"content":"move_iterator::iterator_category","pos":[1981,2013]},{"pos":[2050,2182],"content":"A synonym for a longer <ph id=\"ph1\">`typename`</ph> expression of the same name, <ph id=\"ph2\">`iterator_category`</ph> identifies the general abilities of the iterator.","source":"A synonym for a longer `typename` expression of the same name, `iterator_category` identifies the general abilities of the iterator."},{"content":"move_iterator::value_type","pos":[2188,2213]},{"pos":[2243,2365],"content":"A synonym for a longer <ph id=\"ph1\">`typename`</ph> expression of the same name, <ph id=\"ph2\">`value_type`</ph> describes what type the iterator elements are.","source":"A synonym for a longer `typename` expression of the same name, `value_type` describes what type the iterator elements are."},{"content":"move_iterator::difference_type","pos":[2371,2401]},{"pos":[2436,2600],"content":"A synonym for a longer <ph id=\"ph1\">`typename`</ph> expression of the same name, <ph id=\"ph2\">`difference_type`</ph> describes the integral type required to express difference values between elements.","source":"A synonym for a longer `typename` expression of the same name, `difference_type` describes the integral type required to express difference values between elements."},{"content":"move_iterator::pointer","pos":[2606,2628]},{"pos":[2655,2705],"content":"A synonym for template parameter <ph id=\"ph1\">`RandomIterator`</ph>.","source":"A synonym for template parameter `RandomIterator`."},{"content":"move_iterator::reference","pos":[2711,2735]},{"pos":[2764,2816],"content":"A synonym for the <ph id=\"ph1\">`rvalue`</ph> reference <ph id=\"ph2\">`value_type&amp;&amp;`</ph>.","source":"A synonym for the `rvalue` reference `value_type&&`."},{"content":"Member Functions","pos":[2827,2843]},{"content":"move_iterator::base","pos":[2865,2884]},{"pos":[2908,2988],"content":"The member function returns the stored iterator wrapped by this <ph id=\"ph1\">`move_iterator`</ph>.","source":"The member function returns the stored iterator wrapped by this `move_iterator`."},{"content":"Operators","pos":[2999,3008]},{"content":"move_iterator::operator*","pos":[3030,3054]},{"pos":[3087,3094],"content":"Returns"},{"content":"move_iterator::operator++","pos":[3126,3151]},{"content":"Increments the stored iterator.","pos":[3187,3218]},{"content":"Exact behavior depends on whether it is a preincrement or a postincrement operation.","pos":[3219,3303]},{"content":"move_iterator::operator--","pos":[3309,3334]},{"content":"Decrements the stored iterator.","pos":[3364,3395]},{"content":"Exact behavior depends on whether it is a predecrement or a postdecrement operation.","pos":[3396,3480]},{"content":"move_iterator::operator-","pos":[3486,3510]},{"pos":[3547,3565],"content":"Returns <ph id=\"ph1\">`&amp;**this`</ph>.","source":"Returns `&**this`."},{"content":"move_iterator::operator-","pos":[3571,3595]},{"pos":[3624,3726],"content":"Returns <ph id=\"ph1\">`move_iterator(*this) -=`</ph> by first subtracting the right-hand value from the current position.","source":"Returns `move_iterator(*this) -=` by first subtracting the right-hand value from the current position."},{"content":"move_iterator::operator[]","pos":[3732,3757]},{"content":"Returns <ph id=\"ph1\">`(reference)*(*this + off)`</ph>.","pos":[3788,3824],"source":"Returns `(reference)*(*this + off)`."},{"content":"Allows you to specify an offset from the current base to obtain the value at that location.","pos":[3825,3916]},{"content":"move_iterator::operator+","pos":[3922,3946]},{"content":"Returns <ph id=\"ph1\">`move_iterator(*this) +=`</ph> the value.","pos":[3978,4022],"source":"Returns `move_iterator(*this) +=` the value."},{"content":"Allows you to add an offset to the base to obtain the value at that location.","pos":[4023,4100]},{"content":"move_iterator::operator+=","pos":[4106,4131]},{"pos":[4166,4236],"content":"Adds the right-hand value to the stored iterator, and returns <ph id=\"ph1\">`*this`</ph>.","source":"Adds the right-hand value to the stored iterator, and returns `*this`."},{"content":"move_iterator::operator-=","pos":[4242,4267]},{"pos":[4299,4376],"content":"Subtracts the right-hand value from the stored iterator, and returns <ph id=\"ph1\">`*this`</ph>.","source":"Subtracts the right-hand value from the stored iterator, and returns `*this`."},{"content":"Requirements","pos":[4386,4398]},{"pos":[4402,4425],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>iterator&gt;","source":"**Header:** \\<iterator>"},{"pos":[4432,4450],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[4496,4515],"content":"move_iterator::base"},{"pos":[4519,4572],"content":"Returns the stored iterator for this <ph id=\"ph1\">`move_iterator`</ph>.","source":"Returns the stored iterator for this `move_iterator`."},{"content":"Remarks","pos":[4624,4631]},{"content":"The member function returns the stored iterator.","pos":[4635,4683]},{"pos":[4740,4770],"content":"move_iterator::difference_type"},{"pos":[4774,4918],"content":"The type <ph id=\"ph1\">`difference_type`</ph> is a <ph id=\"ph2\">`move_iterator``typedef`</ph> based on the iterator trait <ph id=\"ph3\">`difference_type`</ph>, and can be used interchangeably with it.","source":"The type `difference_type` is a `move_iterator``typedef` based on the iterator trait `difference_type`, and can be used interchangeably with it."},{"content":"Remarks","pos":[5026,5033]},{"pos":[5037,5134],"content":"The type is a synonym for the iterator trait <ph id=\"ph1\">`typename iterator_traits&lt;RandomIterator&gt;::pointer`</ph>.","source":"The type is a synonym for the iterator trait `typename iterator_traits<RandomIterator>::pointer`."},{"pos":[5193,5225],"content":"move_iterator::iterator_category"},{"pos":[5229,5377],"content":"The type <ph id=\"ph1\">`iterator_category`</ph> is a <ph id=\"ph2\">`move_iterator``typedef`</ph> based on the iterator trait <ph id=\"ph3\">`iterator_category`</ph>, and can be used interchangeably with it.","source":"The type `iterator_category` is a `move_iterator``typedef` based on the iterator trait `iterator_category`, and can be used interchangeably with it."},{"content":"Remarks","pos":[5490,5497]},{"pos":[5501,5608],"content":"The type is a synonym for the iterator trait <ph id=\"ph1\">`typename iterator_traits&lt;RandomIterator&gt;::iterator_category`</ph>.","source":"The type is a synonym for the iterator trait `typename iterator_traits<RandomIterator>::iterator_category`."},{"pos":[5663,5691],"content":"move_iterator::iterator_type"},{"pos":[5695,5857],"content":"The type <ph id=\"ph1\">`iterator_type`</ph> is based on the template parameter <ph id=\"ph2\">`RandomIterator`</ph> for the class template <ph id=\"ph3\">`move_iterator`</ph>, and can be used interchangeably in its place.","source":"The type `iterator_type` is based on the template parameter `RandomIterator` for the class template `move_iterator`, and can be used interchangeably in its place."},{"content":"Remarks","pos":[5918,5925]},{"pos":[5929,5995],"content":"The type is a synonym for the template parameter <ph id=\"ph1\">`RandomIterator`</ph>.","source":"The type is a synonym for the template parameter `RandomIterator`."},{"pos":[6050,6078],"content":"move_iterator::move_iterator"},{"content":"Constructs a move iterator.","pos":[6082,6109]},{"content":"Uses the parameter as the stored iterator.","pos":[6110,6152]},{"content":"Parameters","pos":[6309,6319]},{"content":"The iterator to use as the stored iterator.","pos":[6334,6377]},{"content":"Remarks","pos":[6387,6394]},{"content":"The first constructor initializes the stored iterator with its default constructor.","pos":[6398,6481]},{"content":"The remaining constructors initialize the stored iterator with <ph id=\"ph1\">`base.base()`</ph>.","pos":[6482,6559],"source":" The remaining constructors initialize the stored iterator with `base.base()`."},{"pos":[6616,6641],"content":"move_iterator::operator+="},{"content":"Adds an offset to the stored iterator, so that the stored iterator points to the element at the new current location.","pos":[6645,6762]},{"content":"The operator then moves the new current element.","pos":[6763,6811]},{"content":"Parameters","pos":[6883,6893]},{"content":"An offset to add to the current position to determine the new current position.","pos":[6907,6986]},{"content":"Return Value","pos":[6996,7008]},{"content":"Returns the new current element.","pos":[7012,7044]},{"content":"Remarks","pos":[7054,7061]},{"content":"The operator adds <ph id=\"ph1\">`_Off`</ph> to the stored iterator.","pos":[7065,7113],"source":"The operator adds `_Off` to the stored iterator."},{"content":"Then returns <ph id=\"ph1\">`*this`</ph>.","pos":[7114,7135],"source":" Then returns `*this`."},{"pos":[7189,7214],"content":"move_iterator::operator-="},{"content":"Moves across a specified number of previous elements.","pos":[7218,7271]},{"content":"This operator subtracts an offset from the stored iterator.","pos":[7272,7331]},{"content":"Parameters","pos":[7403,7413]},{"content":"Remarks","pos":[7423,7430]},{"content":"The operator evaluates <ph id=\"ph1\">`*this += -_Off`</ph>.","pos":[7434,7474],"source":"The operator evaluates `*this += -_Off`."},{"content":"Then returns <ph id=\"ph1\">`*this`</ph>.","pos":[7475,7496],"source":" Then returns `*this`."},{"pos":[7554,7579],"content":"move_iterator::operator++"},{"content":"Increments the stored iterator that belongs to this <ph id=\"ph1\">`move_iterator.`</ph> The current element is accessed by the postincrement operator.","pos":[7583,7714],"source":"Increments the stored iterator that belongs to this `move_iterator.` The current element is accessed by the postincrement operator."},{"content":"The next element is accessed by the preincrement operator.","pos":[7715,7773]},{"content":"Parameters","pos":[7856,7866]},{"content":"Remarks","pos":[7876,7883]},{"content":"The first (preincrement) operator increments the stored iterator.","pos":[7887,7952]},{"content":"Then returns <ph id=\"ph1\">`*this`</ph>.","pos":[7953,7974],"source":" Then returns `*this`."},{"content":"The second (postincrement) operator makes a copy of <ph id=\"ph1\">`*this`</ph>, evaluates <ph id=\"ph2\">`++*this`</ph>.","pos":[7981,8062],"source":"The second (postincrement) operator makes a copy of `*this`, evaluates `++*this`."},{"content":"Then returns the copy.","pos":[8063,8085]},{"pos":[8139,8163],"content":"move_iterator::operator+"},{"content":"Returns the iterator position advanced by any number of elements.","pos":[8167,8232]},{"content":"Parameters","pos":[8308,8318]},{"content":"Remarks","pos":[8328,8335]},{"pos":[8339,8393],"content":"The operator returns <ph id=\"ph1\">`move_iterator(*this) +=`</ph> <ph id=\"ph2\">`_Off`</ph>.","source":"The operator returns `move_iterator(*this) +=` `_Off`."},{"pos":[8446,8471],"content":"move_iterator::operator[]"},{"pos":[8475,8553],"content":"Allows array index access to elements across the range of the <ph id=\"ph1\">`move iterator`</ph>.","source":"Allows array index access to elements across the range of the `move iterator`."},{"content":"Parameters","pos":[8626,8636]},{"content":"Remarks","pos":[8646,8653]},{"pos":[8657,8707],"content":"The operator returns <ph id=\"ph1\">`(reference)*(*this + _Off)`</ph>.","source":"The operator returns `(reference)*(*this + _Off)`."},{"pos":[8759,8784],"content":"move_iterator::operator--"},{"content":"Pre- and postdecrement member operators perform a decrement on the stored iterator.","pos":[8788,8871]},{"content":"Parameters","pos":[8951,8961]},{"content":"Remarks","pos":[8971,8978]},{"content":"The first member operator (predecrement) decrements the stored iterator.","pos":[8982,9054]},{"content":"Then returns <ph id=\"ph1\">`*this`</ph>.","pos":[9055,9076],"source":" Then returns `*this`."},{"content":"The second (postdecrement) operator makes a copy of <ph id=\"ph1\">`*this`</ph>, evaluates <ph id=\"ph2\">`--*this`</ph>.","pos":[9083,9164],"source":"The second (postdecrement) operator makes a copy of `*this`, evaluates `--*this`."},{"content":"Then returns the copy.","pos":[9165,9187]},{"pos":[9238,9262],"content":"move_iterator::operator-"},{"content":"Decrements the stored iterator and returns the indicated value.","pos":[9266,9329]},{"content":"Parameters","pos":[9405,9415]},{"content":"Remarks","pos":[9425,9432]},{"pos":[9436,9488],"content":"The operator returns <ph id=\"ph1\">`move_iterator(*this) -= _Off`</ph>.","source":"The operator returns `move_iterator(*this) -= _Off`."},{"pos":[9543,9567],"content":"move_iterator::operator*"},{"content":"Dereferences the stored iterator and returns the value.","pos":[9571,9626]},{"content":"This behaves like an <ph id=\"ph1\">`rvalue reference`</ph> and performs a move assignment.","pos":[9627,9698],"source":" This behaves like an `rvalue reference` and performs a move assignment."},{"content":"The operator transfers the current element out of the base iterator.","pos":[9699,9767]},{"content":"The element that follows becomes the new current element.","pos":[9768,9825]},{"content":"Remarks","pos":[9877,9884]},{"pos":[9888,9934],"content":"The operator returns <ph id=\"ph1\">`(reference)*``base``()`</ph>.","source":"The operator returns `(reference)*``base``()`."},{"pos":[9989,10013],"content":"move_iterator::operator-"},{"pos":[10021,10133],"content":"Like a normal <ph id=\"ph1\">`RandomIterator``operator-&gt;`</ph>, it provides access to the fields that belong to the current element.","source":"Like a normal `RandomIterator``operator->`, it provides access to the fields that belong to the current element."},{"content":"Remarks","pos":[10184,10191]},{"pos":[10195,10226],"content":"The operator returns <ph id=\"ph1\">`&amp;**this`</ph>.","source":"The operator returns `&**this`."},{"pos":[10275,10297],"content":"move_iterator::pointer"},{"pos":[10301,10434],"content":"The type <ph id=\"ph1\">`pointer`</ph> is a <ph id=\"ph2\">`typedef`</ph> based on the random iterator <ph id=\"ph3\">`RandomIterator`</ph> for <ph id=\"ph4\">`move_iterator`</ph>, and can be used interchangeably.","source":"The type `pointer` is a `typedef` based on the random iterator `RandomIterator` for `move_iterator`, and can be used interchangeably."},{"content":"Remarks","pos":[10492,10499]},{"pos":[10503,10546],"content":"The type is a synonym for <ph id=\"ph1\">`RandomIterator`</ph>.","source":"The type is a synonym for `RandomIterator`."},{"pos":[10597,10621],"content":"move_iterator::reference"},{"pos":[10625,10758],"content":"The type <ph id=\"ph1\">`reference`</ph> is a <ph id=\"ph2\">`typedef`</ph> based on <ph id=\"ph3\">`value_type&amp;&amp;`</ph> for <ph id=\"ph4\">`move_iterator`</ph>, and can be used interchangeably with <ph id=\"ph5\">`value_type&amp;&amp;`</ph>.","source":"The type `reference` is a `typedef` based on `value_type&&` for `move_iterator`, and can be used interchangeably with `value_type&&`."},{"content":"Remarks","pos":[10815,10822]},{"pos":[10826,10897],"content":"The type is a synonym for <ph id=\"ph1\">`value_type&amp;&amp;`</ph>, which is an rvalue reference.","source":"The type is a synonym for `value_type&&`, which is an rvalue reference."},{"pos":[10949,10974],"content":"move_iterator::value_type"},{"pos":[10978,11112],"content":"The type <ph id=\"ph1\">`value_type`</ph> is a <ph id=\"ph2\">`move_iterator``typedef`</ph> based on the iterator trait <ph id=\"ph3\">`value_type`</ph>, and can be used interchangeably with it.","source":"The type `value_type` is a `move_iterator``typedef` based on the iterator trait `value_type`, and can be used interchangeably with it."},{"content":"Remarks","pos":[11212,11219]},{"pos":[11223,11323],"content":"The type is a synonym for the iterator trait <ph id=\"ph1\">`typename iterator_traits&lt;RandomIterator&gt;::value_type`</ph>.","source":"The type is a synonym for the iterator trait `typename iterator_traits<RandomIterator>::value_type`."},{"content":"See Also","pos":[11332,11340]},{"content":"iterator&gt;","pos":[11347,11356],"source":"iterator>"},{"content":"Lvalues and Rvalues","pos":[11396,11415]},{"content":"Move Constructors and Move Assignment Operators (C++)","pos":[11464,11517]},{"content":"C++ Standard Library Reference","pos":[11587,11617]}],"content":"---\ntitle: \"move_iterator Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.move_iterator\"\n  - \"move_iterator\"\n  - \"iterator/std::move_iterator\"\n  - \"std::move_iterator\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"move_iterator class\"\nms.assetid: a5e5cdd8-a264-4c6b-9f9c-68b0e8edaab7\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# move_iterator Class\nClass template `move_iterator` is a wrapper for an iterator. The move_iterator provides the same behavior as the iterator it wraps (stores), except it turns the stored iteratorâ€™s dereference operator into an rvalue reference, turning a copy into a move. For more information about rvalues, see [Rvalue Reference Declarator: &&](../cpp/rvalue-reference-declarator-amp-amp.md).  \n  \n## Syntax  \n```\nclass move_iterator;  \n```\n## Remarks  \n The template class describes an object that behaves like an iterator except when dereferenced. It stores a random-access iterator of type `Iterator`, accessed by way of the member function `base``()`. All operations on a `move_iterator` are performed directly on the stored iterator, except that the result of `operator*` is implicitly cast to `value_type&&` to make an rvalue reference.  \n  \n A `move_iterator` might be capable of operations that are not defined by the wrapped iterator. These operations should not be used.  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[move_iterator](#move_iterator__move_iterator)|The constructor for objects of type `move_iterator`.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[move_iterator::iterator_type](#move_iterator__iterator_type)|A synonym for the template parameter `RandomIterator`.|  \n|[move_iterator::iterator_category](#move_iterator__iterator_category)|A synonym for a longer `typename` expression of the same name, `iterator_category` identifies the general abilities of the iterator.|  \n|[move_iterator::value_type](#move_iterator__value_type)|A synonym for a longer `typename` expression of the same name, `value_type` describes what type the iterator elements are.|  \n|[move_iterator::difference_type](#move_iterator__difference_type)|A synonym for a longer `typename` expression of the same name, `difference_type` describes the integral type required to express difference values between elements.|  \n|[move_iterator::pointer](#move_iterator__pointer)|A synonym for template parameter `RandomIterator`.|  \n|[move_iterator::reference](#move_iterator__reference)|A synonym for the `rvalue` reference `value_type&&`.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[move_iterator::base](#move_iterator__base)|The member function returns the stored iterator wrapped by this `move_iterator`.|  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[move_iterator::operator*](#move_iterator__operator_star)|Returns `(reference)*``base``().`|  \n|[move_iterator::operator++](#move_iterator__operator_add_add)|Increments the stored iterator. Exact behavior depends on whether it is a preincrement or a postincrement operation.|  \n|[move_iterator::operator--](#move_iterator__operator--)|Decrements the stored iterator. Exact behavior depends on whether it is a predecrement or a postdecrement operation.|  \n|[move_iterator::operator-&gt;](#move_iterator__operator-_gt_)|Returns `&**this`.|  \n|[move_iterator::operator-](#move_iterator__operator-)|Returns `move_iterator(*this) -=` by first subtracting the right-hand value from the current position.|  \n|[move_iterator::operator[]](#move_iterator__operator_at)|Returns `(reference)*(*this + off)`. Allows you to specify an offset from the current base to obtain the value at that location.|  \n|[move_iterator::operator+](#move_iterator__operator_add)|Returns `move_iterator(*this) +=` the value. Allows you to add an offset to the base to obtain the value at that location.|  \n|[move_iterator::operator+=](#move_iterator__operator_add_eq)|Adds the right-hand value to the stored iterator, and returns `*this`.|  \n|[move_iterator::operator-=](#move_iterator__operator-_eq)|Subtracts the right-hand value from the stored iterator, and returns `*this`.|  \n  \n## Requirements  \n **Header:** \\<iterator>  \n  \n **Namespace:** std  \n  \n##  <a name=\"move_iterator__base\"></a>  move_iterator::base  \n Returns the stored iterator for this `move_iterator`.  \n  \n```\nRandomIterator base() const;\n```  \n  \n### Remarks  \n The member function returns the stored iterator.  \n  \n##  <a name=\"move_iterator__difference_type\"></a>  move_iterator::difference_type  \n The type `difference_type` is a `move_iterator``typedef` based on the iterator trait `difference_type`, and can be used interchangeably with it.  \n  \n```\ntypedef typename iterator_traits<RandomIterator>::difference_type difference_type;\n```    \n  \n### Remarks  \n The type is a synonym for the iterator trait `typename iterator_traits<RandomIterator>::pointer`.  \n  \n##  <a name=\"move_iterator__iterator_category\"></a>  move_iterator::iterator_category  \n The type `iterator_category` is a `move_iterator``typedef` based on the iterator trait `iterator_category`, and can be used interchangeably with it.  \n  \n```\ntypedef typename iterator_traits<RandomIterator>::iterator_category  iterator_category;\n```    \n  \n### Remarks  \n The type is a synonym for the iterator trait `typename iterator_traits<RandomIterator>::iterator_category`.  \n  \n##  <a name=\"move_iterator__iterator_type\"></a>  move_iterator::iterator_type  \n The type `iterator_type` is based on the template parameter `RandomIterator` for the class template `move_iterator`, and can be used interchangeably in its place.  \n  \n```\ntypedef RandomIterator iterator_type;\n```  \n  \n### Remarks  \n The type is a synonym for the template parameter `RandomIterator`.  \n  \n##  <a name=\"move_iterator__move_iterator\"></a>  move_iterator::move_iterator  \n Constructs a move iterator. Uses the parameter as the stored iterator.  \n  \n```\nmove_iterator();\nexplicit move_iterator(RandomIterator right);\ntemplate <class Type>\nmove_iterator(const move_iterator<Type>& right);\n```  \n  \n### Parameters  \n `right`  \n The iterator to use as the stored iterator.  \n  \n### Remarks  \n The first constructor initializes the stored iterator with its default constructor. The remaining constructors initialize the stored iterator with `base.base()`.  \n  \n##  <a name=\"move_iterator__operator_add_eq\"></a>  move_iterator::operator+=  \n Adds an offset to the stored iterator, so that the stored iterator points to the element at the new current location. The operator then moves the new current element.  \n  \n```\nmove_iterator& operator+=(difference_type _Off);\n```  \n  \n### Parameters  \n `_Off`  \n An offset to add to the current position to determine the new current position.  \n  \n### Return Value  \n Returns the new current element.  \n  \n### Remarks  \n The operator adds `_Off` to the stored iterator. Then returns `*this`.  \n  \n##  <a name=\"move_iterator__operator-_eq\"></a>  move_iterator::operator-=  \n Moves across a specified number of previous elements. This operator subtracts an offset from the stored iterator.  \n  \n```\nmove_iterator& operator-=(difference_type _Off);\n```  \n  \n### Parameters  \n  \n### Remarks  \n The operator evaluates `*this += -_Off`. Then returns `*this`.  \n  \n##  <a name=\"move_iterator__operator_add_add\"></a>  move_iterator::operator++  \n Increments the stored iterator that belongs to this `move_iterator.` The current element is accessed by the postincrement operator. The next element is accessed by the preincrement operator.  \n  \n```\nmove_iterator& operator++();\nmove_iterator operator++(int);\n```  \n  \n### Parameters  \n  \n### Remarks  \n The first (preincrement) operator increments the stored iterator. Then returns `*this`.  \n  \n The second (postincrement) operator makes a copy of `*this`, evaluates `++*this`. Then returns the copy.  \n  \n##  <a name=\"move_iterator__operator_add\"></a>  move_iterator::operator+  \n Returns the iterator position advanced by any number of elements.  \n  \n```\nmove_iterator operator+(difference_type _Off) const;\n```  \n  \n### Parameters  \n  \n### Remarks  \n The operator returns `move_iterator(*this) +=` `_Off`.  \n  \n##  <a name=\"move_iterator__operator_at\"></a>  move_iterator::operator[]  \n Allows array index access to elements across the range of the `move iterator`.  \n  \n```\nreference operator[](difference_type _Off) const;\n```  \n  \n### Parameters  \n  \n### Remarks  \n The operator returns `(reference)*(*this + _Off)`.  \n  \n##  <a name=\"move_iterator__operator--\"></a>  move_iterator::operator--  \n Pre- and postdecrement member operators perform a decrement on the stored iterator.  \n  \n```\nmove_iterator& operator--();\nmove_iterator operator--();\n```  \n  \n### Parameters  \n  \n### Remarks  \n The first member operator (predecrement) decrements the stored iterator. Then returns `*this`.  \n  \n The second (postdecrement) operator makes a copy of `*this`, evaluates `--*this`. Then returns the copy.  \n  \n##  <a name=\"move_iterator__operator-\"></a>  move_iterator::operator-  \n Decrements the stored iterator and returns the indicated value.  \n  \n```\nmove_iterator operator-(difference_type _Off) const;\n```  \n  \n### Parameters  \n  \n### Remarks  \n The operator returns `move_iterator(*this) -= _Off`.  \n  \n##  <a name=\"move_iterator__operator_star\"></a>  move_iterator::operator*  \n Dereferences the stored iterator and returns the value. This behaves like an `rvalue reference` and performs a move assignment. The operator transfers the current element out of the base iterator. The element that follows becomes the new current element.  \n  \n```\nreference operator*() const;\n```  \n  \n### Remarks  \n The operator returns `(reference)*``base``()`.  \n  \n##  <a name=\"move_iterator__operator-_gt_\"></a>  move_iterator::operator-&gt;  \n Like a normal `RandomIterator``operator->`, it provides access to the fields that belong to the current element.  \n  \n```\npointer operator->() const;\n```  \n  \n### Remarks  \n The operator returns `&**this`.  \n  \n##  <a name=\"move_iterator__pointer\"></a>  move_iterator::pointer  \n The type `pointer` is a `typedef` based on the random iterator `RandomIterator` for `move_iterator`, and can be used interchangeably.  \n  \n```\ntypedef RandomIterator  pointer;\n```    \n  \n### Remarks  \n The type is a synonym for `RandomIterator`.  \n  \n##  <a name=\"move_iterator__reference\"></a>  move_iterator::reference  \n The type `reference` is a `typedef` based on `value_type&&` for `move_iterator`, and can be used interchangeably with `value_type&&`.  \n  \n```\ntypedef value_type&& reference;\n```    \n  \n### Remarks  \n The type is a synonym for `value_type&&`, which is an rvalue reference.  \n  \n##  <a name=\"move_iterator__value_type\"></a>  move_iterator::value_type  \n The type `value_type` is a `move_iterator``typedef` based on the iterator trait `value_type`, and can be used interchangeably with it.  \n  \n```\ntypedef typename iterator_traits<RandomIterator>::value_type   value_type;\n```    \n  \n### Remarks  \n The type is a synonym for the iterator trait `typename iterator_traits<RandomIterator>::value_type`.  \n  \n## See Also  \n [\\<iterator>](../standard-library/iterator.md)   \n [Lvalues and Rvalues](../cpp/lvalues-and-rvalues-visual-cpp.md)   \n [Move Constructors and Move Assignment Operators (C++)](../cpp/move-constructors-and-move-assignment-operators-cpp.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n\n"}