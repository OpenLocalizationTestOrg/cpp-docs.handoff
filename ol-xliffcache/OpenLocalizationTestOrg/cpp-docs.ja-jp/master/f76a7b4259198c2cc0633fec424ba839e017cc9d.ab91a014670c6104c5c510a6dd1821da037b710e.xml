{"nodes":[{"pos":[12,47],"content":"tile_barrier Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"tile_barrier Class | Microsoft Docs","pos":[0,35]}]},{"pos":[625,643],"content":"tile_barrier Class","linkify":"tile_barrier Class","nodes":[{"content":"tile_barrier Class","pos":[0,18]}]},{"content":"Synchronizes the execution of threads that are running in the thread group (the tile) by using <ph id=\"ph1\">`wait`</ph> methods.","pos":[644,754],"source":"Synchronizes the execution of threads that are running in the thread group (the tile) by using `wait` methods."},{"content":"Only the runtime can instantiate this class.","pos":[755,799]},{"pos":[809,815],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[860,867],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[877,896],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[903,907]},{"content":"Description","pos":[908,919]},{"pos":[957,990],"content":"<bpt id=\"p1\">[</bpt>tile_barrier Constructor<ept id=\"p1\">](#ctor)</ept>","source":"[tile_barrier Constructor](#ctor)"},{"pos":[991,1046],"content":"Initializes a new instance of the <ph id=\"ph1\">`tile_barrier`</ph> class.","source":"Initializes a new instance of the `tile_barrier` class."},{"pos":[1057,1071],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1078,1082]},{"content":"Description","pos":[1083,1094]},{"pos":[1132,1166],"content":"<bpt id=\"p1\">[</bpt>tile_barrier::wait Method<ept id=\"p1\">](#wait)</ept>","source":"[tile_barrier::wait Method](#wait)"},{"content":"Instructs all threads in the thread group (tile) to stop executing until all threads in the tile have finished waiting.","pos":[1167,1286]},{"pos":[1291,1369],"content":"<bpt id=\"p1\">[</bpt>tile_barrier::wait_with_all_memory_fence Method<ept id=\"p1\">](#wait_with_all_memory_fence)</ept>","source":"[tile_barrier::wait_with_all_memory_fence Method](#wait_with_all_memory_fence)"},{"content":"Blocks execution of all threads in a tile until all memory accesses have been completed and all threads in the tile have reached this call.","pos":[1370,1509]},{"pos":[1514,1598],"content":"<bpt id=\"p1\">[</bpt>tile_barrier::wait_with_global_memory_fence Method<ept id=\"p1\">](#wait_with_global_memory_fence)</ept>","source":"[tile_barrier::wait_with_global_memory_fence Method](#wait_with_global_memory_fence)"},{"content":"Blocks execution of all threads in a tile until all global memory accesses have been completed and all threads in the tile have reached this call.","pos":[1599,1745]},{"pos":[1750,1844],"content":"<bpt id=\"p1\">[</bpt>tile_barrier::wait_with_tile_static_memory_fence Method<ept id=\"p1\">](#wait_with_tile_static_memory_fence)</ept>","source":"[tile_barrier::wait_with_tile_static_memory_fence Method](#wait_with_tile_static_memory_fence)"},{"pos":[1845,1998],"content":"Blocks execution of all threads in a tile until all <ph id=\"ph1\">`tile_static`</ph> memory accesses have been completed and all threads in the tile have reached this call.","source":"Blocks execution of all threads in a tile until all `tile_static` memory accesses have been completed and all threads in the tile have reached this call."},{"pos":[2008,2029],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[2056,2068],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2072,2089],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> amp.h","source":"**Header:** amp.h"},{"pos":[2096,2122],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> Concurrency","source":"**Namespace:** Concurrency"},{"pos":[2129,2188],"content":"<bpt id=\"p1\">&lt;a name=\"tile_barrier__ctor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  tile_barrier Constructor","linkify":"<a name=\"tile_barrier__ctor\"></a>  tile_barrier Constructor","source":"<a name=\"tile_barrier__ctor\"></a>  tile_barrier Constructor"},{"content":"Initializes a new instance of the class by copying an existing one.","pos":[2192,2259]},{"pos":[2269,2275],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[2369,2379],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`tile_barrier`</ph> object to copy.","pos":[2395,2429],"source":" The `tile_barrier` object to copy."},{"pos":[2436,2461],"content":"<bpt id=\"p1\">&lt;a name=\"wait\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  wait","linkify":"<a name=\"wait\"></a>  wait","source":"<a name=\"wait\"></a>  wait"},{"content":"Instructs all threads in the thread group (tile) to stop execution until all threads in the tile have finished waiting.","pos":[2463,2582]},{"pos":[2592,2598],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[2656,2725],"content":"<bpt id=\"p1\">&lt;a name=\"wait_with_all_memory_fence\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  wait_with_all_memory_fence","linkify":"<a name=\"wait_with_all_memory_fence\"></a>  wait_with_all_memory_fence","source":"<a name=\"wait_with_all_memory_fence\"></a>  wait_with_all_memory_fence"},{"content":"Blocks execution of all threads in a tile until all threads in a tile have reached this call.","pos":[2729,2822]},{"content":"This ensures that all memory accesses are visible to other threads in the thread tile, and have been executed in program order.","pos":[2823,2950]},{"pos":[2960,2966],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[3047,3122],"content":"<bpt id=\"p1\">&lt;a name=\"wait_with_global_memory_fence\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  wait_with_global_memory_fence","linkify":"<a name=\"wait_with_global_memory_fence\"></a>  wait_with_global_memory_fence","source":"<a name=\"wait_with_global_memory_fence\"></a>  wait_with_global_memory_fence"},{"content":"Blocks execution of all threads in a tile until all threads in a tile have reached this call.","pos":[3126,3219]},{"content":"This ensures that all global memory accesses are visible to other threads in the thread tile, and have been executed in program order.","pos":[3220,3354]},{"pos":[3364,3370],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[3450,3535],"content":"<bpt id=\"p1\">&lt;a name=\"wait_with_tile_static_memory_fence\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  wait_with_tile_static_memory_fence","linkify":"<a name=\"wait_with_tile_static_memory_fence\"></a>  wait_with_tile_static_memory_fence","source":"<a name=\"wait_with_tile_static_memory_fence\"></a>  wait_with_tile_static_memory_fence"},{"content":"Blocks execution of all threads in a tile until all threads in a tile have reached this call.","pos":[3539,3632]},{"content":"This ensures that <ph id=\"ph1\">`tile_static`</ph>memory accesses are visible to other threads in the thread tile, and have been executed in program order.","pos":[3633,3769],"source":" This ensures that `tile_static`memory accesses are visible to other threads in the thread tile, and have been executed in program order."},{"pos":[3779,3785],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[3873,3881],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3885,3952],"content":"<bpt id=\"p1\">[</bpt>Concurrency Namespace (C++ AMP)<ept id=\"p1\">](concurrency-namespace-cpp-amp.md)</ept>","source":"[Concurrency Namespace (C++ AMP)](concurrency-namespace-cpp-amp.md)"}],"content":"---\ntitle: \"tile_barrier Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"amp/Concurrency::tile_barrier\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"tile_barrier class\"\nms.assetid: b4ccdccb-0032-4e11-b7bd-dc9d43445dee\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# tile_barrier Class\nSynchronizes the execution of threads that are running in the thread group (the tile) by using `wait` methods. Only the runtime can instantiate this class.  \n  \n### Syntax \n  \n```  \nclass tile_barrier;  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[tile_barrier Constructor](#ctor)|Initializes a new instance of the `tile_barrier` class.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[tile_barrier::wait Method](#wait)|Instructs all threads in the thread group (tile) to stop executing until all threads in the tile have finished waiting.|  \n|[tile_barrier::wait_with_all_memory_fence Method](#wait_with_all_memory_fence)|Blocks execution of all threads in a tile until all memory accesses have been completed and all threads in the tile have reached this call.|  \n|[tile_barrier::wait_with_global_memory_fence Method](#wait_with_global_memory_fence)|Blocks execution of all threads in a tile until all global memory accesses have been completed and all threads in the tile have reached this call.|  \n|[tile_barrier::wait_with_tile_static_memory_fence Method](#wait_with_tile_static_memory_fence)|Blocks execution of all threads in a tile until all `tile_static` memory accesses have been completed and all threads in the tile have reached this call.|  \n  \n## Inheritance Hierarchy  \n `tile_barrier`  \n  \n## Requirements  \n **Header:** amp.h  \n  \n **Namespace:** Concurrency  \n\n## <a name=\"tile_barrier__ctor\"></a>  tile_barrier Constructor  \n Initializes a new instance of the class by copying an existing one.  \n  \n### Syntax \n  \n```  \ntile_barrier(  \n    const tile_barrier& _Other ) restrict(amp,cpu);  \n```  \n  \n### Parameters  \n `_Other`  \n The `tile_barrier` object to copy.  \n\n## <a name=\"wait\"></a>  wait \nInstructs all threads in the thread group (tile) to stop execution until all threads in the tile have finished waiting.  \n  \n### Syntax \n  \n```  \nvoid wait() const restrict(amp);  \n```    \n\n## <a name=\"wait_with_all_memory_fence\"></a>  wait_with_all_memory_fence   \nBlocks execution of all threads in a tile until all threads in a tile have reached this call. This ensures that all memory accesses are visible to other threads in the thread tile, and have been executed in program order.  \n  \n### Syntax \n  \n```  \nvoid wait_with_all_memory_fence() const restrict(amp);  \n```  \n  \n\n## <a name=\"wait_with_global_memory_fence\"></a>  wait_with_global_memory_fence   \nBlocks execution of all threads in a tile until all threads in a tile have reached this call. This ensures that all global memory accesses are visible to other threads in the thread tile, and have been executed in program order.  \n  \n### Syntax \n  \n```  \nvoid wait_with_global_memory_fence() const  restrict(amp);  \n```\n\n## <a name=\"wait_with_tile_static_memory_fence\"></a>  wait_with_tile_static_memory_fence   \nBlocks execution of all threads in a tile until all threads in a tile have reached this call. This ensures that `tile_static`memory accesses are visible to other threads in the thread tile, and have been executed in program order.  \n  \n### Syntax \n  \n```  \nvoid wait_with_tile_static_memory_fence() const restrict(amp);  \n```  \n  \n## See Also  \n [Concurrency Namespace (C++ AMP)](concurrency-namespace-cpp-amp.md)\n"}