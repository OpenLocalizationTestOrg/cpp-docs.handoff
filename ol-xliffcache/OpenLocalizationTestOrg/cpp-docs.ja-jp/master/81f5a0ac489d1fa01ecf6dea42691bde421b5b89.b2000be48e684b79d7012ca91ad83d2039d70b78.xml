{"nodes":[{"pos":[12,46],"content":"CStringList Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CStringList Class | Microsoft Docs","pos":[0,34]}]},{"content":"CStringList Class","pos":[687,704]},{"pos":[705,741],"content":"Supports lists of <ph id=\"ph1\">`CString`</ph> objects.","source":"Supports lists of `CString` objects."},{"content":"Syntax","pos":[750,756]},{"content":"Members","pos":[817,824]},{"content":"The member functions of <ph id=\"ph1\">`CStringList`</ph> are similar to the member functions of class <bpt id=\"p1\">[</bpt>CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md)</ept>.","pos":[828,959],"source":"The member functions of `CStringList` are similar to the member functions of class [CObList](../../mfc/reference/coblist-class.md)."},{"content":"Because of this similarity, you can use the <ph id=\"ph1\">`CObList`</ph> reference documentation for member function specifics.","pos":[960,1068],"source":" Because of this similarity, you can use the `CObList` reference documentation for member function specifics."},{"content":"Wherever you see a <ph id=\"ph1\">`CObject`</ph> pointer as a return value, substitute a <ph id=\"ph2\">`CString`</ph> (not a <ph id=\"ph3\">`CString`</ph> pointer).","pos":[1069,1174],"source":" Wherever you see a `CObject` pointer as a return value, substitute a `CString` (not a `CString` pointer)."},{"content":"Wherever you see a <ph id=\"ph1\">`CObject`</ph> pointer as a function parameter, substitute an <ph id=\"ph2\">`LPCTSTR`</ph>.","pos":[1175,1261],"source":" Wherever you see a `CObject` pointer as a function parameter, substitute an `LPCTSTR`."},{"content":"for example, translates to","pos":[1312,1338]},{"content":"and","pos":[1392,1395]},{"content":"translates to","pos":[1453,1466]},{"content":"Public Constructors","pos":[1526,1545]},{"content":"Name","pos":[1552,1556]},{"content":"Description","pos":[1557,1568]},{"content":"CObList::CObList","pos":[1607,1623]},{"content":"Constructs an empty list.","pos":[1680,1705]},{"content":"Public Methods","pos":[1716,1730]},{"content":"Name","pos":[1737,1741]},{"content":"Description","pos":[1742,1753]},{"content":"CObList::AddHead","pos":[1792,1808]},{"content":"Adds an element (or all the elements in another list) to the head of the list (makes a new head).","pos":[1865,1962]},{"content":"CObList::AddTail","pos":[1968,1984]},{"content":"Adds an element (or all the elements in another list) to the tail of the list (makes a new tail).","pos":[2041,2138]},{"content":"CObList::Find","pos":[2144,2157]},{"content":"Gets the position of an element specified by pointer value.","pos":[2211,2270]},{"content":"CObList::FindIndex","pos":[2276,2294]},{"content":"Gets the position of an element specified by a zero-based index.","pos":[2353,2417]},{"content":"CObList::GetAt","pos":[2423,2437]},{"content":"Gets the element at a given position.","pos":[2492,2529]},{"content":"CObList::GetCount","pos":[2535,2552]},{"content":"Returns the number of elements in this list.","pos":[2610,2654]},{"content":"CObList::GetHead","pos":[2660,2676]},{"content":"Returns the head element of the list (cannot be empty).","pos":[2733,2788]},{"content":"CObList::GetHeadPosition","pos":[2794,2818]},{"content":"Returns the position of the head element of the list.","pos":[2883,2936]},{"content":"CObList::GetNext","pos":[2942,2958]},{"content":"Gets the next element for iterating.","pos":[3015,3051]},{"content":"CObList::GetPrev","pos":[3057,3073]},{"content":"Gets the previous element for iterating.","pos":[3130,3170]},{"content":"CObList::GetSize","pos":[3176,3192]},{"content":"Returns the number of elements in this list.","pos":[3249,3293]},{"content":"CObList::GetTail","pos":[3299,3315]},{"content":"Returns the tail element of the list (cannot be empty).","pos":[3372,3427]},{"content":"CObList::GetTailPosition","pos":[3433,3457]},{"content":"Returns the position of the tail element of the list.","pos":[3522,3575]},{"content":"CObList::InsertAfter","pos":[3581,3601]},{"content":"Inserts a new element after a given position.","pos":[3662,3707]},{"content":"CObList::InsertBefore","pos":[3713,3734]},{"content":"Inserts a new element before a given position.","pos":[3796,3842]},{"content":"CObList::IsEmpty","pos":[3848,3864]},{"content":"Tests for the empty list condition (no elements).","pos":[3921,3970]},{"content":"CObList::RemoveAll","pos":[3976,3994]},{"content":"Removes all the elements from this list.","pos":[4053,4093]},{"content":"CObList::RemoveAt","pos":[4099,4116]},{"content":"Removes an element from this list, specified by position.","pos":[4174,4231]},{"content":"CObList::RemoveHead","pos":[4237,4256]},{"content":"Removes the element from the head of the list.","pos":[4316,4362]},{"content":"CObList::RemoveTail","pos":[4368,4387]},{"content":"Removes the element from the tail of the list.","pos":[4447,4493]},{"content":"CObList::SetAt","pos":[4499,4513]},{"content":"Sets the element at a given position.","pos":[4568,4605]},{"content":"Remarks","pos":[4615,4622]},{"content":"All comparisons are done by value, meaning that the characters in the string are compared instead of the addresses of the strings.","pos":[4626,4756]},{"content":"incorporates the <ph id=\"ph1\">`IMPLEMENT_SERIAL`</ph> macro to support serialization and dumping of its elements.","pos":[4777,4872],"source":" incorporates the `IMPLEMENT_SERIAL` macro to support serialization and dumping of its elements."},{"content":"If a list of <ph id=\"ph1\">`CString`</ph> objects is stored to an archive, either with an overloaded insertion operator or with the <ph id=\"ph2\">`Serialize`</ph> member function, each <ph id=\"ph3\">`CString`</ph> element is serialized in turn.","pos":[4873,5060],"source":" If a list of `CString` objects is stored to an archive, either with an overloaded insertion operator or with the `Serialize` member function, each `CString` element is serialized in turn."},{"pos":[5067,5179],"content":"If you need a dump of individual <ph id=\"ph1\">`CString`</ph> elements, you must set the depth of the dump context to 1 or greater.","source":"If you need a dump of individual `CString` elements, you must set the depth of the dump context to 1 or greater."},{"pos":[5186,5287],"content":"For more information on using <ph id=\"ph1\">`CStringList`</ph>, see the article <bpt id=\"p1\">[</bpt>Collections<ept id=\"p1\">](../../mfc/collections.md)</ept>.","source":"For more information on using `CStringList`, see the article [Collections](../../mfc/collections.md)."},{"content":"Inheritance Hierarchy","pos":[5296,5317]},{"content":"CObject","pos":[5322,5329]},{"content":"Requirements","pos":[5397,5409]},{"pos":[5413,5434],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxcoll.h","source":"**Header:** afxcoll.h"},{"content":"See Also","pos":[5443,5451]},{"content":"MFC Sample COLLECT","pos":[5456,5474]},{"content":"CObject Class","pos":[5510,5523]},{"content":"Hierarchy Chart","pos":[5568,5583]}],"content":"---\ntitle: \"CStringList Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CStringList\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"strings [C++], lists\"\n  - \"lists, string\"\n  - \"CStringList class\"\n  - \"strings [C++], collections\"\nms.assetid: 310a7edb-263c-4bd2-ac43-0bfbfddc5a33\ncaps.latest.revision: 25\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CStringList Class\nSupports lists of `CString` objects.  \n  \n## Syntax  \n  \n```  \nclass CStringList : public CObject  \n```  \n  \n## Members  \n The member functions of `CStringList` are similar to the member functions of class [CObList](../../mfc/reference/coblist-class.md). Because of this similarity, you can use the `CObList` reference documentation for member function specifics. Wherever you see a `CObject` pointer as a return value, substitute a `CString` (not a `CString` pointer). Wherever you see a `CObject` pointer as a function parameter, substitute an `LPCTSTR`.  \n  \n `CObject*& CObList::GetHead() const;`  \n  \n for example, translates to  \n  \n `CString& CStringList::GetHead() const;`  \n  \n and  \n  \n `POSITION AddHead( CObject* <newElement> );`  \n  \n translates to  \n  \n `POSITION AddHead( LPCTSTR <newElement> );`  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist)|Constructs an empty list.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CObList::AddHead](../../mfc/reference/coblist-class.md#coblist__addhead)|Adds an element (or all the elements in another list) to the head of the list (makes a new head).|  \n|[CObList::AddTail](../../mfc/reference/coblist-class.md#coblist__addtail)|Adds an element (or all the elements in another list) to the tail of the list (makes a new tail).|  \n|[CObList::Find](../../mfc/reference/coblist-class.md#coblist__find)|Gets the position of an element specified by pointer value.|  \n|[CObList::FindIndex](../../mfc/reference/coblist-class.md#coblist__findindex)|Gets the position of an element specified by a zero-based index.|  \n|[CObList::GetAt](../../mfc/reference/coblist-class.md#coblist__getat)|Gets the element at a given position.|  \n|[CObList::GetCount](../../mfc/reference/coblist-class.md#coblist__getcount)|Returns the number of elements in this list.|  \n|[CObList::GetHead](../../mfc/reference/coblist-class.md#coblist__gethead)|Returns the head element of the list (cannot be empty).|  \n|[CObList::GetHeadPosition](../../mfc/reference/coblist-class.md#coblist__getheadposition)|Returns the position of the head element of the list.|  \n|[CObList::GetNext](../../mfc/reference/coblist-class.md#coblist__getnext)|Gets the next element for iterating.|  \n|[CObList::GetPrev](../../mfc/reference/coblist-class.md#coblist__getprev)|Gets the previous element for iterating.|  \n|[CObList::GetSize](../../mfc/reference/coblist-class.md#coblist__getsize)|Returns the number of elements in this list.|  \n|[CObList::GetTail](../../mfc/reference/coblist-class.md#coblist__gettail)|Returns the tail element of the list (cannot be empty).|  \n|[CObList::GetTailPosition](../../mfc/reference/coblist-class.md#coblist__gettailposition)|Returns the position of the tail element of the list.|  \n|[CObList::InsertAfter](../../mfc/reference/coblist-class.md#coblist__insertafter)|Inserts a new element after a given position.|  \n|[CObList::InsertBefore](../../mfc/reference/coblist-class.md#coblist__insertbefore)|Inserts a new element before a given position.|  \n|[CObList::IsEmpty](../../mfc/reference/coblist-class.md#coblist__isempty)|Tests for the empty list condition (no elements).|  \n|[CObList::RemoveAll](../../mfc/reference/coblist-class.md#coblist__removeall)|Removes all the elements from this list.|  \n|[CObList::RemoveAt](../../mfc/reference/coblist-class.md#coblist__removeat)|Removes an element from this list, specified by position.|  \n|[CObList::RemoveHead](../../mfc/reference/coblist-class.md#coblist__removehead)|Removes the element from the head of the list.|  \n|[CObList::RemoveTail](../../mfc/reference/coblist-class.md#coblist__removetail)|Removes the element from the tail of the list.|  \n|[CObList::SetAt](../../mfc/reference/coblist-class.md#coblist__setat)|Sets the element at a given position.|  \n  \n## Remarks  \n All comparisons are done by value, meaning that the characters in the string are compared instead of the addresses of the strings.  \n  \n `CStringList` incorporates the `IMPLEMENT_SERIAL` macro to support serialization and dumping of its elements. If a list of `CString` objects is stored to an archive, either with an overloaded insertion operator or with the `Serialize` member function, each `CString` element is serialized in turn.  \n  \n If you need a dump of individual `CString` elements, you must set the depth of the dump context to 1 or greater.  \n  \n For more information on using `CStringList`, see the article [Collections](../../mfc/collections.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n `CStringList`  \n  \n## Requirements  \n **Header:** afxcoll.h  \n  \n## See Also  \n [MFC Sample COLLECT](../../visual-cpp-samples.md)   \n [CObject Class](../../mfc/reference/cobject-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)\n\n\n\n"}