{"nodes":[{"pos":[12,46],"content":"CStringList Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CStringList Class | Microsoft Docs","pos":[0,34]}]},{"pos":[687,704],"content":"CStringList Class","linkify":"CStringList Class","nodes":[{"content":"CStringList Class","pos":[0,17]}]},{"pos":[705,741],"content":"Supports lists of <ph id=\"ph1\">`CString`</ph> objects.","source":"Supports lists of `CString` objects."},{"pos":[750,756],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[817,824],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"content":"The member functions of <ph id=\"ph1\">`CStringList`</ph> are similar to the member functions of class <bpt id=\"p1\">[</bpt>CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md)</ept>.","pos":[828,959],"source":"The member functions of `CStringList` are similar to the member functions of class [CObList](../../mfc/reference/coblist-class.md)."},{"content":"Because of this similarity, you can use the <ph id=\"ph1\">`CObList`</ph> reference documentation for member function specifics.","pos":[960,1068],"source":" Because of this similarity, you can use the `CObList` reference documentation for member function specifics."},{"content":"Wherever you see a <ph id=\"ph1\">`CObject`</ph> pointer as a return value, substitute a <ph id=\"ph2\">`CString`</ph> (not a <ph id=\"ph3\">`CString`</ph> pointer).","pos":[1069,1174],"source":" Wherever you see a `CObject` pointer as a return value, substitute a `CString` (not a `CString` pointer)."},{"content":"Wherever you see a <ph id=\"ph1\">`CObject`</ph> pointer as a function parameter, substitute an <ph id=\"ph2\">`LPCTSTR`</ph>.","pos":[1175,1261],"source":" Wherever you see a `CObject` pointer as a function parameter, substitute an `LPCTSTR`."},{"content":"for example, translates to","pos":[1312,1338]},{"content":"and","pos":[1392,1395]},{"content":"translates to","pos":[1453,1466]},{"pos":[1526,1545],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1552,1556]},{"content":"Description","pos":[1557,1568]},{"pos":[1606,1679],"content":"<bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept>","source":"[CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist)"},{"content":"Constructs an empty list.","pos":[1680,1705]},{"pos":[1716,1730],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1737,1741]},{"content":"Description","pos":[1742,1753]},{"pos":[1791,1864],"content":"<bpt id=\"p1\">[</bpt>CObList::AddHead<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__addhead)</ept>","source":"[CObList::AddHead](../../mfc/reference/coblist-class.md#coblist__addhead)"},{"content":"Adds an element (or all the elements in another list) to the head of the list (makes a new head).","pos":[1865,1962]},{"pos":[1967,2040],"content":"<bpt id=\"p1\">[</bpt>CObList::AddTail<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__addtail)</ept>","source":"[CObList::AddTail](../../mfc/reference/coblist-class.md#coblist__addtail)"},{"content":"Adds an element (or all the elements in another list) to the tail of the list (makes a new tail).","pos":[2041,2138]},{"pos":[2143,2210],"content":"<bpt id=\"p1\">[</bpt>CObList::Find<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__find)</ept>","source":"[CObList::Find](../../mfc/reference/coblist-class.md#coblist__find)"},{"content":"Gets the position of an element specified by pointer value.","pos":[2211,2270]},{"pos":[2275,2352],"content":"<bpt id=\"p1\">[</bpt>CObList::FindIndex<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__findindex)</ept>","source":"[CObList::FindIndex](../../mfc/reference/coblist-class.md#coblist__findindex)"},{"content":"Gets the position of an element specified by a zero-based index.","pos":[2353,2417]},{"pos":[2422,2491],"content":"<bpt id=\"p1\">[</bpt>CObList::GetAt<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__getat)</ept>","source":"[CObList::GetAt](../../mfc/reference/coblist-class.md#coblist__getat)"},{"content":"Gets the element at a given position.","pos":[2492,2529]},{"pos":[2534,2609],"content":"<bpt id=\"p1\">[</bpt>CObList::GetCount<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__getcount)</ept>","source":"[CObList::GetCount](../../mfc/reference/coblist-class.md#coblist__getcount)"},{"content":"Returns the number of elements in this list.","pos":[2610,2654]},{"pos":[2659,2732],"content":"<bpt id=\"p1\">[</bpt>CObList::GetHead<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__gethead)</ept>","source":"[CObList::GetHead](../../mfc/reference/coblist-class.md#coblist__gethead)"},{"content":"Returns the head element of the list (cannot be empty).","pos":[2733,2788]},{"pos":[2793,2882],"content":"<bpt id=\"p1\">[</bpt>CObList::GetHeadPosition<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__getheadposition)</ept>","source":"[CObList::GetHeadPosition](../../mfc/reference/coblist-class.md#coblist__getheadposition)"},{"content":"Returns the position of the head element of the list.","pos":[2883,2936]},{"pos":[2941,3014],"content":"<bpt id=\"p1\">[</bpt>CObList::GetNext<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__getnext)</ept>","source":"[CObList::GetNext](../../mfc/reference/coblist-class.md#coblist__getnext)"},{"content":"Gets the next element for iterating.","pos":[3015,3051]},{"pos":[3056,3129],"content":"<bpt id=\"p1\">[</bpt>CObList::GetPrev<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__getprev)</ept>","source":"[CObList::GetPrev](../../mfc/reference/coblist-class.md#coblist__getprev)"},{"content":"Gets the previous element for iterating.","pos":[3130,3170]},{"pos":[3175,3248],"content":"<bpt id=\"p1\">[</bpt>CObList::GetSize<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__getsize)</ept>","source":"[CObList::GetSize](../../mfc/reference/coblist-class.md#coblist__getsize)"},{"content":"Returns the number of elements in this list.","pos":[3249,3293]},{"pos":[3298,3371],"content":"<bpt id=\"p1\">[</bpt>CObList::GetTail<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__gettail)</ept>","source":"[CObList::GetTail](../../mfc/reference/coblist-class.md#coblist__gettail)"},{"content":"Returns the tail element of the list (cannot be empty).","pos":[3372,3427]},{"pos":[3432,3521],"content":"<bpt id=\"p1\">[</bpt>CObList::GetTailPosition<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__gettailposition)</ept>","source":"[CObList::GetTailPosition](../../mfc/reference/coblist-class.md#coblist__gettailposition)"},{"content":"Returns the position of the tail element of the list.","pos":[3522,3575]},{"pos":[3580,3661],"content":"<bpt id=\"p1\">[</bpt>CObList::InsertAfter<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__insertafter)</ept>","source":"[CObList::InsertAfter](../../mfc/reference/coblist-class.md#coblist__insertafter)"},{"content":"Inserts a new element after a given position.","pos":[3662,3707]},{"pos":[3712,3795],"content":"<bpt id=\"p1\">[</bpt>CObList::InsertBefore<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__insertbefore)</ept>","source":"[CObList::InsertBefore](../../mfc/reference/coblist-class.md#coblist__insertbefore)"},{"content":"Inserts a new element before a given position.","pos":[3796,3842]},{"pos":[3847,3920],"content":"<bpt id=\"p1\">[</bpt>CObList::IsEmpty<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__isempty)</ept>","source":"[CObList::IsEmpty](../../mfc/reference/coblist-class.md#coblist__isempty)"},{"content":"Tests for the empty list condition (no elements).","pos":[3921,3970]},{"pos":[3975,4052],"content":"<bpt id=\"p1\">[</bpt>CObList::RemoveAll<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__removeall)</ept>","source":"[CObList::RemoveAll](../../mfc/reference/coblist-class.md#coblist__removeall)"},{"content":"Removes all the elements from this list.","pos":[4053,4093]},{"pos":[4098,4173],"content":"<bpt id=\"p1\">[</bpt>CObList::RemoveAt<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__removeat)</ept>","source":"[CObList::RemoveAt](../../mfc/reference/coblist-class.md#coblist__removeat)"},{"content":"Removes an element from this list, specified by position.","pos":[4174,4231]},{"pos":[4236,4315],"content":"<bpt id=\"p1\">[</bpt>CObList::RemoveHead<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__removehead)</ept>","source":"[CObList::RemoveHead](../../mfc/reference/coblist-class.md#coblist__removehead)"},{"content":"Removes the element from the head of the list.","pos":[4316,4362]},{"pos":[4367,4446],"content":"<bpt id=\"p1\">[</bpt>CObList::RemoveTail<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__removetail)</ept>","source":"[CObList::RemoveTail](../../mfc/reference/coblist-class.md#coblist__removetail)"},{"content":"Removes the element from the tail of the list.","pos":[4447,4493]},{"pos":[4498,4567],"content":"<bpt id=\"p1\">[</bpt>CObList::SetAt<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__setat)</ept>","source":"[CObList::SetAt](../../mfc/reference/coblist-class.md#coblist__setat)"},{"content":"Sets the element at a given position.","pos":[4568,4605]},{"pos":[4615,4622],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"All comparisons are done by value, meaning that the characters in the string are compared instead of the addresses of the strings.","pos":[4626,4756]},{"content":"<ph id=\"ph1\">`CStringList`</ph> incorporates the <ph id=\"ph2\">`IMPLEMENT_SERIAL`</ph> macro to support serialization and dumping of its elements.","pos":[4763,4872],"source":"`CStringList` incorporates the `IMPLEMENT_SERIAL` macro to support serialization and dumping of its elements."},{"content":"If a list of <ph id=\"ph1\">`CString`</ph> objects is stored to an archive, either with an overloaded insertion operator or with the <ph id=\"ph2\">`Serialize`</ph> member function, each <ph id=\"ph3\">`CString`</ph> element is serialized in turn.","pos":[4873,5060],"source":" If a list of `CString` objects is stored to an archive, either with an overloaded insertion operator or with the `Serialize` member function, each `CString` element is serialized in turn."},{"pos":[5067,5179],"content":"If you need a dump of individual <ph id=\"ph1\">`CString`</ph> elements, you must set the depth of the dump context to 1 or greater.","source":"If you need a dump of individual `CString` elements, you must set the depth of the dump context to 1 or greater."},{"pos":[5186,5287],"content":"For more information on using <ph id=\"ph1\">`CStringList`</ph>, see the article <bpt id=\"p1\">[</bpt>Collections<ept id=\"p1\">](../../mfc/collections.md)</ept>.","source":"For more information on using `CStringList`, see the article [Collections](../../mfc/collections.md)."},{"pos":[5296,5317],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[5321,5368],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[5397,5409],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[5413,5434],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxcoll.h","source":"**Header:** afxcoll.h"},{"pos":[5443,5451],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>MFC Sample COLLECT<ept id=\"p1\">](../../visual-cpp-samples.md)</ept><ph id=\"ph1\"> </ph>","pos":[5455,5505],"source":"[MFC Sample COLLECT](../../visual-cpp-samples.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CObject Class<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[5508,5563],"source":" [CObject Class](../../mfc/reference/cobject-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept>","pos":[5566,5614],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md)"}],"content":"---\ntitle: \"CStringList Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CStringList\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"strings [C++], lists\"\n  - \"lists, string\"\n  - \"CStringList class\"\n  - \"strings [C++], collections\"\nms.assetid: 310a7edb-263c-4bd2-ac43-0bfbfddc5a33\ncaps.latest.revision: 25\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CStringList Class\nSupports lists of `CString` objects.  \n  \n## Syntax  \n  \n```  \nclass CStringList : public CObject  \n```  \n  \n## Members  \n The member functions of `CStringList` are similar to the member functions of class [CObList](../../mfc/reference/coblist-class.md). Because of this similarity, you can use the `CObList` reference documentation for member function specifics. Wherever you see a `CObject` pointer as a return value, substitute a `CString` (not a `CString` pointer). Wherever you see a `CObject` pointer as a function parameter, substitute an `LPCTSTR`.  \n  \n `CObject*& CObList::GetHead() const;`  \n  \n for example, translates to  \n  \n `CString& CStringList::GetHead() const;`  \n  \n and  \n  \n `POSITION AddHead( CObject* <newElement> );`  \n  \n translates to  \n  \n `POSITION AddHead( LPCTSTR <newElement> );`  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist)|Constructs an empty list.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CObList::AddHead](../../mfc/reference/coblist-class.md#coblist__addhead)|Adds an element (or all the elements in another list) to the head of the list (makes a new head).|  \n|[CObList::AddTail](../../mfc/reference/coblist-class.md#coblist__addtail)|Adds an element (or all the elements in another list) to the tail of the list (makes a new tail).|  \n|[CObList::Find](../../mfc/reference/coblist-class.md#coblist__find)|Gets the position of an element specified by pointer value.|  \n|[CObList::FindIndex](../../mfc/reference/coblist-class.md#coblist__findindex)|Gets the position of an element specified by a zero-based index.|  \n|[CObList::GetAt](../../mfc/reference/coblist-class.md#coblist__getat)|Gets the element at a given position.|  \n|[CObList::GetCount](../../mfc/reference/coblist-class.md#coblist__getcount)|Returns the number of elements in this list.|  \n|[CObList::GetHead](../../mfc/reference/coblist-class.md#coblist__gethead)|Returns the head element of the list (cannot be empty).|  \n|[CObList::GetHeadPosition](../../mfc/reference/coblist-class.md#coblist__getheadposition)|Returns the position of the head element of the list.|  \n|[CObList::GetNext](../../mfc/reference/coblist-class.md#coblist__getnext)|Gets the next element for iterating.|  \n|[CObList::GetPrev](../../mfc/reference/coblist-class.md#coblist__getprev)|Gets the previous element for iterating.|  \n|[CObList::GetSize](../../mfc/reference/coblist-class.md#coblist__getsize)|Returns the number of elements in this list.|  \n|[CObList::GetTail](../../mfc/reference/coblist-class.md#coblist__gettail)|Returns the tail element of the list (cannot be empty).|  \n|[CObList::GetTailPosition](../../mfc/reference/coblist-class.md#coblist__gettailposition)|Returns the position of the tail element of the list.|  \n|[CObList::InsertAfter](../../mfc/reference/coblist-class.md#coblist__insertafter)|Inserts a new element after a given position.|  \n|[CObList::InsertBefore](../../mfc/reference/coblist-class.md#coblist__insertbefore)|Inserts a new element before a given position.|  \n|[CObList::IsEmpty](../../mfc/reference/coblist-class.md#coblist__isempty)|Tests for the empty list condition (no elements).|  \n|[CObList::RemoveAll](../../mfc/reference/coblist-class.md#coblist__removeall)|Removes all the elements from this list.|  \n|[CObList::RemoveAt](../../mfc/reference/coblist-class.md#coblist__removeat)|Removes an element from this list, specified by position.|  \n|[CObList::RemoveHead](../../mfc/reference/coblist-class.md#coblist__removehead)|Removes the element from the head of the list.|  \n|[CObList::RemoveTail](../../mfc/reference/coblist-class.md#coblist__removetail)|Removes the element from the tail of the list.|  \n|[CObList::SetAt](../../mfc/reference/coblist-class.md#coblist__setat)|Sets the element at a given position.|  \n  \n## Remarks  \n All comparisons are done by value, meaning that the characters in the string are compared instead of the addresses of the strings.  \n  \n `CStringList` incorporates the `IMPLEMENT_SERIAL` macro to support serialization and dumping of its elements. If a list of `CString` objects is stored to an archive, either with an overloaded insertion operator or with the `Serialize` member function, each `CString` element is serialized in turn.  \n  \n If you need a dump of individual `CString` elements, you must set the depth of the dump context to 1 or greater.  \n  \n For more information on using `CStringList`, see the article [Collections](../../mfc/collections.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n `CStringList`  \n  \n## Requirements  \n **Header:** afxcoll.h  \n  \n## See Also  \n [MFC Sample COLLECT](../../visual-cpp-samples.md)   \n [CObject Class](../../mfc/reference/cobject-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)\n\n\n\n"}