{"nodes":[{"pos":[12,57],"content":"lognormal_distribution Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"lognormal_distribution Class | Microsoft Docs","pos":[0,45]}]},{"content":"lognormal_distribution Class","pos":[827,855]},{"content":"Generates a log normal distribution.","pos":[856,892]},{"content":"Syntax","pos":[901,907]},{"content":"Parameters","pos":[1620,1630]},{"content":"The floating-point result type, defaults to <ph id=\"ph1\">`double`</ph>.","pos":[1648,1701],"source":" The floating-point result type, defaults to `double`."},{"content":"For possible types, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","pos":[1702,1769],"source":" For possible types, see [\\<random>](../standard-library/random.md)."},{"content":"Remarks","pos":[1778,1785]},{"content":"The template class describes a distribution that produces values of a user-specified integral type, or type <ph id=\"ph1\">`double`</ph> if none is provided, distributed according to the Log Normal Distribution.","pos":[1789,1980],"source":"The template class describes a distribution that produces values of a user-specified integral type, or type `double` if none is provided, distributed according to the Log Normal Distribution."},{"content":"The following table links to articles about individual members.","pos":[1981,2044]},{"content":"lognormal_distribution::lognormal_distribution","pos":[2069,2115]},{"content":"lognormal_distribution::param_type","pos":[2296,2330]},{"pos":[2376,2497],"content":"The property functions <ph id=\"ph1\">`m()`</ph> and <ph id=\"ph2\">`s()`</ph> return the values for the stored distribution parameters <ph id=\"ph3\">`m`</ph> and <ph id=\"ph4\">`s`</ph> respectively.","source":"The property functions `m()` and `s()` return the values for the stored distribution parameters `m` and `s` respectively."},{"pos":[2504,2618],"content":"For more information about distribution classes and their members, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","source":"For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md)."},{"pos":[2625,2789],"content":"For detailed information about the LogNormal distribution, see the Wolfram MathWorld article <bpt id=\"p1\">[</bpt>LogNormal Distribution<ept id=\"p1\">](http://go.microsoft.com/fwlink/LinkId=400917)</ept>.","source":"For detailed information about the LogNormal distribution, see the Wolfram MathWorld article [LogNormal Distribution](http://go.microsoft.com/fwlink/LinkId=400917)."},{"content":"Example","pos":[2798,2805]},{"content":"Output","pos":[4584,4590]},{"content":"Requirements","pos":[5241,5253]},{"pos":[5257,5278],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>random&gt;","source":"**Header:** \\<random>"},{"pos":[5285,5303],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[5376,5422],"content":"lognormal_distribution::lognormal_distribution"},{"content":"Constructs the distribution.","pos":[5426,5454]},{"content":"Parameters","pos":[5608,5618]},{"content":"The <ph id=\"ph1\">`m`</ph> distribution parameter.","pos":[5629,5660],"source":" The `m` distribution parameter."},{"content":"The <ph id=\"ph1\">`s`</ph> distribution parameter.","pos":[5674,5705],"source":" The `s` distribution parameter."},{"content":"The parameter structure used to construct the distribution.","pos":[5722,5781]},{"content":"Remarks","pos":[5791,5798]},{"pos":[5804,5817],"content":"Precondition:"},{"pos":[5836,5969],"content":"The first constructor constructs an object whose stored <ph id=\"ph1\">`m`</ph> value holds the value <ph id=\"ph2\">`m`</ph> and whose stored <ph id=\"ph3\">`s`</ph> value holds the value <ph id=\"ph4\">`s`</ph>.","source":"The first constructor constructs an object whose stored `m` value holds the value `m` and whose stored `s` value holds the value `s`."},{"content":"The second constructor constructs an object whose stored parameters are initialized from <ph id=\"ph1\">`parm`</ph>.","pos":[5976,6072],"source":"The second constructor constructs an object whose stored parameters are initialized from `parm`."},{"content":"You can obtain and set the current parameters of an existing distribution by calling the <ph id=\"ph1\">`param()`</ph> member function.","pos":[6073,6188],"source":" You can obtain and set the current parameters of an existing distribution by calling the `param()` member function."},{"pos":[6249,6283],"content":"lognormal_distribution::param_type"},{"content":"Stores the parameters of the distribution.","pos":[6287,6329]},{"content":"Parameters","pos":[6655,6665]},{"pos":[6669,6770],"content":"See parent topic <bpt id=\"p1\">[</bpt>lognormal_distribution Class<ept id=\"p1\">](../standard-library/lognormal-distribution-class.md)</ept>.","source":"See parent topic [lognormal_distribution Class](../standard-library/lognormal-distribution-class.md)."},{"content":"Remarks","pos":[6780,6787]},{"pos":[6793,6806],"content":"Precondition:"},{"pos":[6825,7068],"content":"This structure can be passed to the distribution's class constructor at instantiation, to the <ph id=\"ph1\">`param()`</ph> member function to set the stored parameters of an existing distribution, and to <ph id=\"ph2\">`operator()`</ph> to be used in place of the stored parameters.","source":"This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters."},{"content":"See Also","pos":[7077,7085]},{"content":"random&gt;","pos":[7092,7099],"source":"random>"}],"content":"---\ntitle: \"lognormal_distribution Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.tr1.lognormal_distribution\"\n  - \"tr1.lognormal_distribution\"\n  - \"tr1::lognormal_distribution\"\n  - \"std::tr1::lognormal_distribution\"\n  - \"lognormal_distribution\"\n  - \"random/std::tr1::lognormal_distribution\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"lognormal_distribution class\"\nms.assetid: f2d6a431-6c3a-4370-b12e-4adb4ddf6cc4\ncaps.latest.revision: 15\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# lognormal_distribution Class\nGenerates a log normal distribution.  \n  \n## Syntax  \n```  \nclass lognormal_distribution  \n   {  \n   public:  // types  \n   typedef RealType result_type;  \n   struct param_type;  // constructor and reset functions  \n   explicit lognormal_distribution(RealType m = 0.0, RealType s = 1.0);\n   explicit lognormal_distribution(const param_type& parm);\n   void reset();\n   // generating functions  \n   template <class URNG>  \n   result_type operator()(URNG& gen);\n   template <class URNG>  \n   result_type operator()(URNG& gen, const param_type& parm);\n   // property functions  \n   RealType m() const;\n   RealType s() const;\n   param_type param() const;\n   void param(const param_type& parm);\n   result_type min() const;\n   result_type max() const;\n   };  \n```  \n#### Parameters  \n `RealType`  \n The floating-point result type, defaults to `double`. For possible types, see [\\<random>](../standard-library/random.md).  \n  \n## Remarks  \n The template class describes a distribution that produces values of a user-specified integral type, or type `double` if none is provided, distributed according to the Log Normal Distribution. The following table links to articles about individual members.  \n  \n||||  \n|-|-|-|  \n|[lognormal_distribution::lognormal_distribution](#lognormal_distribution__lognormal_distribution)|`lognormal_distribution::m`|`lognormal_distribution::param`|  \n|`lognormal_distribution::operator()`|`lognormal_distribution::s`|[lognormal_distribution::param_type](#lognormal_distribution__param_type)|  \n  \n The property functions `m()` and `s()` return the values for the stored distribution parameters `m` and `s` respectively.  \n  \n For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md).  \n  \n For detailed information about the LogNormal distribution, see the Wolfram MathWorld article [LogNormal Distribution](http://go.microsoft.com/fwlink/LinkId=400917).  \n  \n## Example  \n  \n```cpp  \n// compile with: /EHsc /W4  \n#include <random>   \n#include <iostream>  \n#include <iomanip>  \n#include <string>  \n#include <map>  \n  \nusing namespace std;  \n  \nvoid test(const double m, const double s, const int samples) {  \n  \n    // uncomment to use a non-deterministic seed  \n    //    random_device gen;  \n    //    mt19937 gen(rd());  \n    mt19937 gen(1701);  \n  \n    lognormal_distribution<> distr(m, s);  \n  \n    cout << endl;  \n    cout << \"min() == \" << distr.min() << endl;  \n    cout << \"max() == \" << distr.max() << endl;  \n    cout << \"m() == \" << fixed << setw(11) << setprecision(10) << distr.m() << endl;  \n    cout << \"s() == \" << fixed << setw(11) << setprecision(10) << distr.s() << endl;  \n  \n    // generate the distribution as a histogram  \n    map<double, int> histogram;  \n    for (int i = 0; i < samples; ++i) {  \n        ++histogram[distr(gen)];  \n    }  \n  \n    // print results  \n    cout << \"Distribution for \" << samples << \" samples:\" << endl;  \n    int counter = 0;  \n    for (const auto& elem : histogram) {  \n        cout << fixed << setw(11) << ++counter << \": \"  \n            << setw(14) << setprecision(10) << elem.first << endl;  \n    }  \n    cout << endl;  \n}  \n  \nint main()  \n{  \n    double m_dist = 1;  \n    double s_dist = 1;  \n    int samples = 10;  \n  \n    cout << \"Use CTRL-Z to bypass data entry and run using default values.\" << endl;  \n    cout << \"Enter a floating point value for the 'm' distribution parameter: \";  \n    cin >> m_dist;  \n    cout << \"Enter a floating point value for the 's' distribution parameter (must be greater than zero): \";  \n    cin >> s_dist;  \n    cout << \"Enter an integer value for the sample count: \";  \n    cin >> samples;  \n  \n    test(m_dist, s_dist, samples);  \n}  \n  \n```  \n  \n## Output  \n  \n```  \nUse CTRL-Z to bypass data entry and run using default values.  \nEnter a floating point value for the 'm' distribution parameter: 0  \nEnter a floating point value for the 's' distribution parameter (must be greater than zero): 1  \nEnter an integer value for the sample count: 10  \n \nmin() == -1.79769e+308  \nmax() == 1.79769e+308  \nm() == 0.0000000000  \ns() == 1.0000000000  \nDistribution for 10 samples:  \n    1: 0.3862809339  \n    2: 0.4128865601  \n    3: 0.4490576787  \n    4: 0.4862035428  \n    5: 0.5930607126  \n    6: 0.8190778771  \n    7: 0.8902379317  \n    8: 2.8332911667  \n    9: 5.1359445565  \n    10: 5.4406507912  \n```  \n  \n## Requirements  \n **Header:** \\<random>  \n  \n **Namespace:** std  \n  \n##  <a name=\"lognormal_distribution__lognormal_distribution\"></a>  lognormal_distribution::lognormal_distribution  \n Constructs the distribution.  \n  \n```  \nexplicit lognormal_distribution(RealType m = 0.0, RealType s = 1.0);\n\n \nexplicit lognormal_distribution(const param_type& parm);\n```  \n  \n### Parameters  \n `m`  \n The `m` distribution parameter.  \n  \n `s`  \n The `s` distribution parameter.  \n  \n `parm`  \n The parameter structure used to construct the distribution.  \n  \n### Remarks  \n **Precondition:** `0.0 < s`  \n  \n The first constructor constructs an object whose stored `m` value holds the value `m` and whose stored `s` value holds the value `s`.  \n  \n The second constructor constructs an object whose stored parameters are initialized from `parm`. You can obtain and set the current parameters of an existing distribution by calling the `param()` member function.  \n  \n##  <a name=\"lognormal_distribution__param_type\"></a>  lognormal_distribution::param_type  \n Stores the parameters of the distribution.  \n```  \nstruct param_type {  \n   typedef lognormal_distribution<RealType> distribution_type;  \n   param_type(RealType m = 0.0, RealType s = 1.0);\n   RealType m() const;\n   RealType s() const;\n   .....  \n   bool operator==(const param_type& right) const;\n   bool operator!=(const param_type& right) const;\n   };  \n```    \n### Parameters  \n See parent topic [lognormal_distribution Class](../standard-library/lognormal-distribution-class.md).  \n  \n### Remarks  \n **Precondition:** `0.0 < s`  \n  \n This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters.  \n  \n## See Also  \n [\\<random>](../standard-library/random.md)\n\n"}