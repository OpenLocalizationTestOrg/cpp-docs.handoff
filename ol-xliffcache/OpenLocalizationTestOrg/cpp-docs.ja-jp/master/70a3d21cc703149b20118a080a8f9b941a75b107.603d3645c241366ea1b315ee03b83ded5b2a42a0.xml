{"nodes":[{"pos":[12,57],"content":"A.3   Using Parallel Regions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"A.3   Using Parallel Regions | Microsoft Docs","pos":[0,45]}]},{"content":"A.3   Using Parallel Regions","pos":[537,565]},{"content":"The <ph id=\"ph1\">`parallel`</ph> directive (<bpt id=\"p1\">[</bpt>Section 2.3<ept id=\"p1\">](../../parallel/openmp/2-3-parallel-construct.md)</ept> on page 8) can be used in coarse-grain parallel programs.","pos":[566,712],"source":"The `parallel` directive ([Section 2.3](../../parallel/openmp/2-3-parallel-construct.md) on page 8) can be used in coarse-grain parallel programs."},{"content":"In the following example, each thread in the parallel region decides what part of the global array <ph id=\"ph1\">`x`</ph> to work on, based on the thread number:","pos":[713,855],"source":" In the following example, each thread in the parallel region decides what part of the global array `x` to work on, based on the thread number:"}],"content":"---\ntitle: \"A.3   Using Parallel Regions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: 575216a1-960a-47f7-9c82-7f660291fcfe\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# A.3   Using Parallel Regions\nThe `parallel` directive ([Section 2.3](../../parallel/openmp/2-3-parallel-construct.md) on page 8) can be used in coarse-grain parallel programs. In the following example, each thread in the parallel region decides what part of the global array `x` to work on, based on the thread number:  \n  \n```  \n#pragma omp parallel shared(x, npoints) private(iam, np, ipoints)  \n{  \n    iam = omp_get_thread_num();  \n    np =  omp_get_num_threads();  \n    ipoints = npoints / np;  \n    subdomain(x, iam, ipoints);  \n}  \n```"}