{"nodes":[{"pos":[12,50],"content":"&lt;map&gt; operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>map<ph id=\"ph2\">&amp;gt;</ph> operators | Microsoft Docs","pos":[0,38],"source":"&lt;map&gt; operators | Microsoft Docs"}]},{"pos":[252,273],"content":"&lt;map&gt; operators","linkify":"&lt;map&gt; operators","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>map<ph id=\"ph2\">&amp;gt;</ph> operators","pos":[0,21],"source":"&lt;map&gt; operators"}]},{"pos":[292,319],"content":"<bpt id=\"p1\">[</bpt>operator!=<ept id=\"p1\">](#operator_neq)</ept>","source":"[operator!=](#operator_neq)"},{"pos":[320,349],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;gt;</ph><ept id=\"p1\">](#operator_gt_)</ept>","source":"[operator&gt;](#operator_gt_)"},{"pos":[350,383],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">=</ph><ept id=\"p1\">](#operator_gt__eq)</ept>","source":"[operator&gt;=](#operator_gt__eq)"},{"pos":[388,417],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;lt;</ph><ept id=\"p1\">](#operator_lt_)</ept>","source":"[operator&lt;](#operator_lt_)"},{"pos":[418,451],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">=</ph><ept id=\"p1\">](#operator_lt__eq)</ept>","source":"[operator&lt;=](#operator_lt__eq)"},{"pos":[452,481],"content":"<bpt id=\"p1\">[</bpt>operator==<ept id=\"p1\">](#operator_eq_eq)</ept>","source":"[operator==](#operator_eq_eq)"},{"pos":[486,533],"content":"<bpt id=\"p1\">[</bpt>operator!= (multimap)<ept id=\"p1\">](#operator_neq_multimap)</ept>","source":"[operator!= (multimap)](#operator_neq_multimap)"},{"pos":[534,571],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;gt;</ph><ept id=\"p1\">](#operator_gt_multimap)</ept>","source":"[operator&gt;](#operator_gt_multimap)"},{"pos":[572,614],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">=</ph><ept id=\"p1\">](#operator_gt__eq_multimap)</ept>","source":"[operator&gt;=](#operator_gt__eq_multimap)"},{"pos":[619,656],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;lt;</ph><ept id=\"p1\">](#operator_lt_multimap)</ept>","source":"[operator&lt;](#operator_lt_multimap)"},{"pos":[657,699],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">=</ph><ept id=\"p1\">](#operator_lt__eq_multimap)</ept>","source":"[operator&lt;=](#operator_lt__eq_multimap)"},{"pos":[700,738],"content":"<bpt id=\"p1\">[</bpt>operator==<ept id=\"p1\">](#operator_eq_eq_multimap)</ept>","source":"[operator==](#operator_eq_eq_multimap)"},{"pos":[749,788],"content":"<bpt id=\"p1\">&lt;a name=\"operator_neq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator!=","linkify":"<a name=\"operator_neq\"></a>  operator!=","source":"<a name=\"operator_neq\"></a>  operator!="},{"content":"Tests if the map object on the left side of the operator is not equal to the map object on the right side.","pos":[792,898]},{"pos":[1049,1059],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <bpt id=\"p1\">**</bpt>map<ept id=\"p1\">**</ept>.","pos":[1073,1099],"source":" An object of type **map**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>map<ept id=\"p1\">**</ept>.","pos":[1117,1143],"source":" An object of type **map**."},{"pos":[1153,1165],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1169,1233],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the maps are not equal; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if maps are equal.","source":"**true** if the maps are not equal; **false** if maps are equal."},{"pos":[1243,1250],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The comparison between map objects is based on a pairwise comparison of their elements.","pos":[1254,1341]},{"content":"Two maps are equal if they have the same number of elements and their respective elements have the same values.","pos":[1342,1453]},{"content":"Otherwise, they are unequal.","pos":[1454,1482]},{"pos":[1492,1499],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2312,2353],"content":"<bpt id=\"p1\">&lt;a name=\"operator_lt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;lt;</ph>","linkify":"<a name=\"operator_lt_\"></a>  operator&lt;","source":"<a name=\"operator_lt_\"></a>  operator&lt;"},{"content":"Tests if the map object on the left side of the operator is less than the map object on the right side.","pos":[2357,2460]},{"pos":[2610,2620],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <bpt id=\"p1\">**</bpt>map<ept id=\"p1\">**</ept>.","pos":[2634,2660],"source":" An object of type **map**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>map<ept id=\"p1\">**</ept>.","pos":[2678,2704],"source":" An object of type **map**."},{"pos":[2714,2726],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2730,2868],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the map on the left side of the operator is strictly less than the map on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the map on the left side of the operator is strictly less than the map on the right side of the operator; otherwise **false**."},{"pos":[2878,2885],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The comparison between map objects is based on a pairwise comparison of their elements.","pos":[2889,2976]},{"content":"The less-than relationship between two objects is based on a comparison of the first pair of unequal elements.","pos":[2977,3087]},{"pos":[3097,3104],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3953,3998],"content":"<bpt id=\"p1\">&lt;a name=\"operator_lt__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">=</ph>","linkify":"<a name=\"operator_lt__eq\"></a>  operator&lt;=","source":"<a name=\"operator_lt__eq\"></a>  operator&lt;="},{"content":"Tests if the map object on the left side of the operator is less than or equal to the map object on the right side.","pos":[4002,4117]},{"pos":[4268,4278],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <bpt id=\"p1\">**</bpt>map<ept id=\"p1\">**</ept>.","pos":[4292,4318],"source":" An object of type **map**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>map<ept id=\"p1\">**</ept>.","pos":[4336,4362],"source":" An object of type **map**."},{"pos":[4372,4384],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4388,4529],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the map on the left side of the operator is less than or equal to the map on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the map on the left side of the operator is less than or equal to the map on the right side of the operator; otherwise **false**."},{"pos":[4539,4546],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5702,5743],"content":"<bpt id=\"p1\">&lt;a name=\"operator_eq_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator==","linkify":"<a name=\"operator_eq_eq\"></a>  operator==","source":"<a name=\"operator_eq_eq\"></a>  operator=="},{"content":"Tests if the map object on the left side of the operator is equal to the map object on the right side.","pos":[5747,5849]},{"pos":[6000,6010],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <bpt id=\"p1\">**</bpt>map<ept id=\"p1\">**</ept>.","pos":[6024,6050],"source":" An object of type **map**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>map<ept id=\"p1\">**</ept>.","pos":[6068,6094],"source":" An object of type **map**."},{"pos":[6104,6116],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6120,6248],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the map on the left side of the operator is equal to the map on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the map on the left side of the operator is equal to the map on the right side of the operator; otherwise **false**."},{"pos":[6258,6265],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The comparison between map objects is based on a pairwise comparison of their elements.","pos":[6269,6356]},{"content":"Two maps are equal if they have the same number of elements and their respective elements have the same values.","pos":[6357,6468]},{"content":"Otherwise, they are unequal.","pos":[6469,6497]},{"pos":[6507,6514],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7331,7372],"content":"<bpt id=\"p1\">&lt;a name=\"operator_gt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;gt;</ph>","linkify":"<a name=\"operator_gt_\"></a>  operator&gt;","source":"<a name=\"operator_gt_\"></a>  operator&gt;"},{"content":"Tests if the map object on the left side of the operator is greater than the map object on the right side.","pos":[7376,7482]},{"pos":[7632,7642],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <bpt id=\"p1\">**</bpt>map<ept id=\"p1\">**</ept>.","pos":[7656,7682],"source":" An object of type **map**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>map<ept id=\"p1\">**</ept>.","pos":[7700,7726],"source":" An object of type **map**."},{"pos":[7736,7748],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7752,7884],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the map on the left side of the operator is greater than the map on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the map on the left side of the operator is greater than the map on the right side of the operator; otherwise **false**."},{"pos":[7894,7901],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The comparison between map objects is based on a pairwise comparison of their elements.","pos":[7905,7992]},{"content":"The greater-than relationship between two objects is based on a comparison of the first pair of unequal elements.","pos":[7993,8106]},{"pos":[8116,8123],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8996,9041],"content":"<bpt id=\"p1\">&lt;a name=\"operator_gt__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">=</ph>","linkify":"<a name=\"operator_gt__eq\"></a>  operator&gt;=","source":"<a name=\"operator_gt__eq\"></a>  operator&gt;="},{"content":"Tests if the map object on the left side of the operator is greater than or equal to the map object on the right side.","pos":[9045,9163]},{"pos":[9314,9324],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <bpt id=\"p1\">**</bpt>map<ept id=\"p1\">**</ept>.","pos":[9338,9364],"source":" An object of type **map**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>map<ept id=\"p1\">**</ept>.","pos":[9382,9408],"source":" An object of type **map**."},{"pos":[9418,9430],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9434,9574],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the map on the left side of the operator is greater than or equal to the map on the right side of the list; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the map on the left side of the operator is greater than or equal to the map on the right side of the list; otherwise **false**."},{"pos":[9584,9591],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10714,10773],"content":"<bpt id=\"p1\">&lt;a name=\"operator_neq_multimap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator!= (multimap)","linkify":"<a name=\"operator_neq_multimap\"></a>  operator!= (multimap)","source":"<a name=\"operator_neq_multimap\"></a>  operator!= (multimap)"},{"content":"Tests if the multimap object on the left side of the operator is not equal to the multimap object on the right side.","pos":[10777,10893]},{"pos":[11054,11064],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <ph id=\"ph1\">`multimap`</ph>.","pos":[11078,11107],"source":" An object of type `multimap`."},{"content":"An object of type <ph id=\"ph1\">`multimap`</ph>.","pos":[11125,11154],"source":" An object of type `multimap`."},{"pos":[11164,11176],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11180,11254],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the multimaps are not equal; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if multimaps are equal.","source":"**true** if the multimaps are not equal; **false** if multimaps are equal."},{"pos":[11264,11271],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The comparison between multimap objects is based on a pairwise comparison of their elements.","pos":[11275,11367]},{"content":"Two multimaps are equal if they have the same number of elements and their respective elements have the same values.","pos":[11368,11484]},{"content":"Otherwise, they are unequal.","pos":[11485,11513]},{"pos":[11523,11530],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12383,12432],"content":"<bpt id=\"p1\">&lt;a name=\"operator_lt_multimap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;lt;</ph>","linkify":"<a name=\"operator_lt_multimap\"></a>  operator&lt;","source":"<a name=\"operator_lt_multimap\"></a>  operator&lt;"},{"content":"Tests if the multimap object on the left side of the operator is less than the multimap object on the right side.","pos":[12436,12549]},{"pos":[12709,12719],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <ph id=\"ph1\">`multimap`</ph>.","pos":[12733,12762],"source":" An object of type `multimap`."},{"content":"An object of type <ph id=\"ph1\">`multimap`</ph>.","pos":[12780,12809],"source":" An object of type `multimap`."},{"pos":[12819,12831],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12835,12983],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the multimap on the left side of the operator is strictly less than the multimap on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the multimap on the left side of the operator is strictly less than the multimap on the right side of the operator; otherwise **false**."},{"pos":[12993,13000],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The comparison between multimap objects is based on a pairwise comparison of their elements.","pos":[13004,13096]},{"content":"The less-than relationship between two objects is based on a comparison of the first pair of unequal elements.","pos":[13097,13207]},{"pos":[13217,13224],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[14149,14203],"content":"<bpt id=\"p1\">&lt;a name=\"operator_lt__eq_multimap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">=</ph>","linkify":"<a name=\"operator_lt__eq_multimap\"></a>  operator&lt;=","source":"<a name=\"operator_lt__eq_multimap\"></a>  operator&lt;="},{"content":"Tests if the multimap object on the left side of the operator is less than or equal to the multimap object on the right side.","pos":[14207,14332]},{"pos":[14493,14503],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <ph id=\"ph1\">`multimap`</ph>.","pos":[14517,14546],"source":" An object of type `multimap`."},{"content":"An object of type <ph id=\"ph1\">`multimap`</ph>.","pos":[14564,14593],"source":" An object of type `multimap`."},{"pos":[14603,14615],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[14619,14770],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the multimap on the left side of the operator is less than or equal to the multimap on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the multimap on the left side of the operator is less than or equal to the multimap on the right side of the operator; otherwise **false**."},{"pos":[14780,14787],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[15800,15850],"content":"<bpt id=\"p1\">&lt;a name=\"operator_eq_eq_multimap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator==","linkify":"<a name=\"operator_eq_eq_multimap\"></a>  operator==","source":"<a name=\"operator_eq_eq_multimap\"></a>  operator=="},{"content":"Tests if the multimap object on the left side of the operator is equal to the multimap object on the right side.","pos":[15854,15966]},{"pos":[16127,16137],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <ph id=\"ph1\">`multimap`</ph>.","pos":[16151,16180],"source":" An object of type `multimap`."},{"content":"An object of type <ph id=\"ph1\">`multimap`</ph>.","pos":[16198,16227],"source":" An object of type `multimap`."},{"pos":[16237,16249],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16253,16391],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the multimap on the left side of the operator is equal to the multimap on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the multimap on the left side of the operator is equal to the multimap on the right side of the operator; otherwise **false**."},{"pos":[16401,16408],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The comparison between multimap objects is based on a pairwise comparison of their elements.","pos":[16412,16504]},{"content":"Two multimaps are equal if they have the same number of elements and their respective elements have the same values.","pos":[16505,16621]},{"content":"Otherwise, they are unequal.","pos":[16622,16650]},{"pos":[16660,16667],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17404,17453],"content":"<bpt id=\"p1\">&lt;a name=\"operator_gt_multimap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;gt;</ph>","linkify":"<a name=\"operator_gt_multimap\"></a>  operator&gt;","source":"<a name=\"operator_gt_multimap\"></a>  operator&gt;"},{"content":"Tests if the multimap object on the left side of the operator is greater than the multimap object on the right side.","pos":[17457,17573]},{"pos":[17733,17743],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <ph id=\"ph1\">`multimap`</ph>.","pos":[17757,17786],"source":" An object of type `multimap`."},{"content":"An object of type <ph id=\"ph1\">`multimap`</ph>.","pos":[17804,17833],"source":" An object of type `multimap`."},{"pos":[17843,17855],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17859,18001],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the multimap on the left side of the operator is greater than the multimap on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the multimap on the left side of the operator is greater than the multimap on the right side of the operator; otherwise **false**."},{"pos":[18011,18018],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The comparison between multimap objects is based on a pairwise comparison of their elements.","pos":[18022,18114]},{"content":"The greater-than relationship between two objects is based on a comparison of the first pair of unequal elements.","pos":[18115,18228]},{"pos":[18238,18245],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[19172,19226],"content":"<bpt id=\"p1\">&lt;a name=\"operator_gt__eq_multimap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">=</ph>","linkify":"<a name=\"operator_gt__eq_multimap\"></a>  operator&gt;=","source":"<a name=\"operator_gt__eq_multimap\"></a>  operator&gt;="},{"content":"Tests if the multimap object on the left side of the operator is greater than or equal to the multimap object on the right side.","pos":[19230,19358]},{"pos":[19519,19529],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <ph id=\"ph1\">`multimap`</ph>.","pos":[19543,19572],"source":" An object of type `multimap`."},{"content":"An object of type <ph id=\"ph1\">`multimap`</ph>.","pos":[19590,19619],"source":" An object of type `multimap`."},{"pos":[19629,19641],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19645,19795],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the multimap on the left side of the operator is greater than or equal to the multimap on the right side of the list; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the multimap on the left side of the operator is greater than or equal to the multimap on the right side of the list; otherwise **false**."},{"pos":[19805,19812],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[21074,21082],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[21086,21122],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>map&gt;<ept id=\"p1\">](../standard-library/map.md)</ept>","source":"[\\<map>](../standard-library/map.md)"}],"content":"---\ntitle: \"&lt;map&gt; operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 7df02b9f-701c-44ed-834a-a819badc5bd0\ncaps.latest.revision: 7\nmanager: \"ghogen\"\n---\n# &lt;map&gt; operators\n||||  \n|-|-|-|  \n|[operator!=](#operator_neq)|[operator&gt;](#operator_gt_)|[operator&gt;=](#operator_gt__eq)|  \n|[operator&lt;](#operator_lt_)|[operator&lt;=](#operator_lt__eq)|[operator==](#operator_eq_eq)|  \n|[operator!= (multimap)](#operator_neq_multimap)|[operator&gt;](#operator_gt_multimap)|[operator&gt;=](#operator_gt__eq_multimap)|  \n|[operator&lt;](#operator_lt_multimap)|[operator&lt;=](#operator_lt__eq_multimap)|[operator==](#operator_eq_eq_multimap)|  \n  \n##  <a name=\"operator_neq\"></a>  operator!=  \n Tests if the map object on the left side of the operator is not equal to the map object on the right side.  \n  \n```\nbool operator!=(\n      const map <Key, Type, Traits, Allocator>& left, \n      const map <Key, Type, Traits, Allocator>& right);\n```  \n  \n### Parameters  \n `left`  \n An object of type **map**.  \n  \n `right`  \n An object of type **map**.  \n  \n### Return Value  \n **true** if the maps are not equal; **false** if maps are equal.  \n  \n### Remarks  \n The comparison between map objects is based on a pairwise comparison of their elements. Two maps are equal if they have the same number of elements and their respective elements have the same values. Otherwise, they are unequal.  \n  \n### Example  \n  \n```cpp  \n// map_op_ne.cpp  \n// compile with: /EHsc  \n#include <map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   map <int, int> m1, m2, m3;  \n   int i;  \n   typedef pair <int, int> Int_Pair;  \n  \n   for ( i = 0 ; i < 3 ; i++ )  \n   {  \n      m1.insert ( Int_Pair ( i, i ) );  \n      m2.insert ( Int_Pair ( i, i * i ) );  \n      m3.insert ( Int_Pair ( i, i ) );  \n   }  \n  \n   if ( m1 != m2 )  \n      cout << \"The maps m1 and m2 are not equal.\" << endl;  \n   else  \n      cout << \"The maps m1 and m2 are equal.\" << endl;  \n  \n   if ( m1 != m3 )  \n      cout << \"The maps m1 and m3 are not equal.\" << endl;  \n   else  \n      cout << \"The maps m1 and m3 are equal.\" << endl;  \n}  \n\\* Output:   \nThe maps m1 and m2 are not equal.  \nThe maps m1 and m3 are equal.  \n*\\  \n```  \n  \n##  <a name=\"operator_lt_\"></a>  operator&lt;  \n Tests if the map object on the left side of the operator is less than the map object on the right side.  \n  \n```\nbool operator<(\n      const map <Key, Type, Traits, Allocator>& left, \n      const map <Key, Type, Traits, Allocator>& right);\n```  \n  \n### Parameters  \n `left`  \n An object of type **map**.  \n  \n `right`  \n An object of type **map**.  \n  \n### Return Value  \n **true** if the map on the left side of the operator is strictly less than the map on the right side of the operator; otherwise **false**.  \n  \n### Remarks  \n The comparison between map objects is based on a pairwise comparison of their elements. The less-than relationship between two objects is based on a comparison of the first pair of unequal elements.  \n  \n### Example  \n  \n```cpp  \n// map_op_lt.cpp  \n// compile with: /EHsc  \n#include <map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   map<int, int> m1, m2, m3;  \n   int i;  \n   typedef pair<int, int> Int_Pair;  \n  \n   for ( i = 1 ; i < 3 ; i++ )  \n   {  \n      m1.insert ( Int_Pair ( i, i ) );  \n      m2.insert ( Int_Pair ( i, i * i ) );  \n      m3.insert ( Int_Pair ( i, i - 1 ) );  \n   }  \n  \n   if ( m1 < m2 )  \n      cout << \"The map m1 is less than the map m2.\" << endl;  \n   else  \n      cout << \"The map m1 is not less than the map m2.\" << endl;  \n  \n   if ( m1 < m3 )  \n      cout << \"The map m1 is less than the map m3.\" << endl;  \n   else  \n      cout << \"The map m1 is not less than the map m3.\" << endl;  \n}  \n\\* Output:   \nThe map m1 is less than the map m2.  \nThe map m1 is not less than the map m3.  \n*\\  \n```  \n  \n##  <a name=\"operator_lt__eq\"></a>  operator&lt;=  \n Tests if the map object on the left side of the operator is less than or equal to the map object on the right side.  \n  \n```\nbool operator<=(\n      const map <Key, Type, Traits, Allocator>& left, \n      const map <Key, Type, Traits, Allocator>& right);\n```  \n  \n### Parameters  \n `left`  \n An object of type **map**.  \n  \n `right`  \n An object of type **map**.  \n  \n### Return Value  \n **true** if the map on the left side of the operator is less than or equal to the map on the right side of the operator; otherwise **false**.  \n  \n### Example  \n  \n```cpp  \n// map_op_le.cpp  \n// compile with: /EHsc  \n#include <map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   map <int, int> m1, m2, m3, m4;  \n   int i;  \n   typedef pair <int, int> Int_Pair;  \n  \n   for ( i = 1 ; i < 3 ; i++ )  \n   {  \n      m1.insert ( Int_Pair ( i, i ) );  \n      m2.insert ( Int_Pair ( i, i * i ) );  \n      m3.insert ( Int_Pair ( i, i - 1 ) );  \n      m4.insert ( Int_Pair ( i, i ) );  \n   }  \n  \n   if ( m1 <= m2 )  \n      cout << \"The map m1 is less than or equal to the map m2.\" << endl;  \n   else  \n      cout << \"The map m1 is greater than the map m2.\" << endl;  \n  \n   if ( m1 <= m3 )  \n      cout << \"The map m1 is less than or equal to the map m3.\" << endl;  \n   else  \n      cout << \"The map m1 is greater than the map m3.\" << endl;  \n  \n   if ( m1 <= m4 )  \n      cout << \"The map m1 is less than or equal to the map m4.\" << endl;  \n   else  \n      cout << \"The map m1 is greater than the map m4.\" << endl;  \n}  \n\\* Output:   \nThe map m1 is less than or equal to the map m2.  \nThe map m1 is greater than the map m3.  \nThe map m1 is less than or equal to the map m4.  \n*\\  \n```  \n  \n##  <a name=\"operator_eq_eq\"></a>  operator==  \n Tests if the map object on the left side of the operator is equal to the map object on the right side.  \n  \n```\nbool operator==(\n      const map <Key, Type, Traits, Allocator>& left, \n      const map <Key, Type, Traits, Allocator>& right);\n```  \n  \n### Parameters  \n `left`  \n An object of type **map**.  \n  \n `right`  \n An object of type **map**.  \n  \n### Return Value  \n **true** if the map on the left side of the operator is equal to the map on the right side of the operator; otherwise **false**.  \n  \n### Remarks  \n The comparison between map objects is based on a pairwise comparison of their elements. Two maps are equal if they have the same number of elements and their respective elements have the same values. Otherwise, they are unequal.  \n  \n### Example  \n  \n```cpp  \n// map_op_eq.cpp  \n// compile with: /EHsc  \n#include <map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   map < int, int > m1, m2, m3;  \n   int i;  \n   typedef pair < int, int > Int_Pair;  \n  \n   for ( i = 0 ; i < 3 ; i++ )  \n   {  \n      m1.insert ( Int_Pair ( i, i ) );  \n      m2.insert ( Int_Pair ( i, i * i ) );  \n      m3.insert ( Int_Pair ( i, i ) );  \n   }  \n  \n   if ( m1 == m2 )  \n      cout << \"The maps m1 and m2 are equal.\" << endl;  \n   else  \n      cout << \"The maps m1 and m2 are not equal.\" << endl;  \n  \n   if ( m1 == m3 )  \n      cout << \"The maps m1 and m3 are equal.\" << endl;  \n   else  \n      cout << \"The maps m1 and m3 are not equal.\" << endl;  \n}  \n\\* Output:   \nThe maps m1 and m2 are not equal.  \nThe maps m1 and m3 are equal.  \n*\\  \n```  \n  \n##  <a name=\"operator_gt_\"></a>  operator&gt;  \n Tests if the map object on the left side of the operator is greater than the map object on the right side.  \n  \n```\nbool operator>(\n      const map <Key, Type, Traits, Allocator>& left, \n      const map <Key, Type, Traits, Allocator>& right);\n```  \n  \n### Parameters  \n `left`  \n An object of type **map**.  \n  \n `right`  \n An object of type **map**.  \n  \n### Return Value  \n **true** if the map on the left side of the operator is greater than the map on the right side of the operator; otherwise **false**.  \n  \n### Remarks  \n The comparison between map objects is based on a pairwise comparison of their elements. The greater-than relationship between two objects is based on a comparison of the first pair of unequal elements.  \n  \n### Example  \n  \n```cpp  \n// map_op_gt.cpp  \n// compile with: /EHsc  \n#include <map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   map < int, int > m1, m2, m3;  \n   int i;  \n   typedef pair < int, int > Int_Pair;  \n  \n   for ( i = 0 ; i < 3 ; i++ )  \n   {  \n      m1.insert ( Int_Pair ( i, i ) );  \n      m2.insert ( Int_Pair ( i, i * i ) );  \n      m3.insert ( Int_Pair ( i, i - 1 ) );  \n   }  \n  \n   if ( m1 > m2 )  \n      cout << \"The map m1 is greater than the map m2.\" << endl;  \n   else  \n      cout << \"The map m1 is not greater than the map m2.\" << endl;  \n  \n   if ( m1 > m3 )  \n      cout << \"The map m1 is greater than the map m3.\" << endl;  \n   else  \n      cout << \"The map m1 is not greater than the map m3.\" << endl;  \n}  \n\\* Output:   \nThe map m1 is not greater than the map m2.  \nThe map m1 is greater than the map m3.  \n*\\  \n```  \n  \n##  <a name=\"operator_gt__eq\"></a>  operator&gt;=  \n Tests if the map object on the left side of the operator is greater than or equal to the map object on the right side.  \n  \n```\nbool operator>=(\n      const map <Key, Type, Traits, Allocator>& left, \n      const map <Key, Type, Traits, Allocator>& right);\n```  \n  \n### Parameters  \n `left`  \n An object of type **map**.  \n  \n `right`  \n An object of type **map**.  \n  \n### Return Value  \n **true** if the map on the left side of the operator is greater than or equal to the map on the right side of the list; otherwise **false**.  \n  \n### Example  \n  \n```cpp  \n// map_op_ge.cpp  \n// compile with: /EHsc  \n#include <map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   map < int, int > m1, m2, m3, m4;  \n   int i;  \n   typedef pair < int, int > Int_Pair;  \n  \n   for ( i = 1 ; i < 3 ; i++ )  \n   {  \n      m1.insert ( Int_Pair ( i, i ) );  \n      m2.insert ( Int_Pair ( i, i * i ) );  \n      m3.insert ( Int_Pair ( i, i - 1 ) );  \n      m4.insert ( Int_Pair ( i, i ) );  \n   }  \n  \n   if ( m1 >= m2 )  \n      cout << \"Map m1 is greater than or equal to map m2.\" << endl;  \n   else  \n      cout << \"The map m1 is less than the map m2.\" << endl;  \n  \n   if ( m1 >= m3 )  \n      cout << \"Map m1 is greater than or equal to map m3.\" << endl;  \n   else  \n      cout << \"The map m1 is less than the map m3.\" << endl;  \n  \n   if ( m1 >= m4 )  \n      cout << \"Map m1 is greater than or equal to map m4.\" << endl;  \n   else  \n      cout << \"The map m1 is less than the map m4.\" << endl;  \n}  \n\\* Output:   \nThe map m1 is less than the map m2.  \nMap m1 is greater than or equal to map m3.  \nMap m1 is greater than or equal to map m4.  \n*\\  \n```  \n  \n##  <a name=\"operator_neq_multimap\"></a>  operator!= (multimap)  \n Tests if the multimap object on the left side of the operator is not equal to the multimap object on the right side.  \n  \n```\nbool operator!=(\n      const multimap <Key, Type, Traits, Allocator>& left, \n      const multimap <Key, Type, Traits, Allocator>& right);\n```  \n  \n### Parameters  \n `left`  \n An object of type `multimap`.  \n  \n `right`  \n An object of type `multimap`.  \n  \n### Return Value  \n **true** if the multimaps are not equal; **false** if multimaps are equal.  \n  \n### Remarks  \n The comparison between multimap objects is based on a pairwise comparison of their elements. Two multimaps are equal if they have the same number of elements and their respective elements have the same values. Otherwise, they are unequal.  \n  \n### Example  \n  \n```cpp  \n// multimap_op_ne.cpp  \n// compile with: /EHsc  \n#include <map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   multimap <int, int> m1, m2, m3;  \n   int i;  \n   typedef pair <int, int> Int_Pair;  \n  \n   for ( i = 0 ; i < 3 ; i++ )  \n   {  \n      m1.insert ( Int_Pair ( i, i ) );  \n      m2.insert ( Int_Pair ( i, i * i ) );  \n      m3.insert ( Int_Pair ( i, i ) );  \n   }  \n  \n   if ( m1 != m2 )  \n      cout << \"The multimaps m1 and m2 are not equal.\" << endl;  \n   else  \n      cout << \"The multimaps m1 and m2 are equal.\" << endl;  \n  \n   if ( m1 != m3 )  \n      cout << \"The multimaps m1 and m3 are not equal.\" << endl;  \n   else  \n      cout << \"The multimaps m1 and m3 are equal.\" << endl;  \n}  \n\\* Output:   \nThe multimaps m1 and m2 are not equal.  \nThe multimaps m1 and m3 are equal.  \n*\\  \n```  \n  \n##  <a name=\"operator_lt_multimap\"></a>  operator&lt;  \n Tests if the multimap object on the left side of the operator is less than the multimap object on the right side.  \n  \n```\nbool operator<(\n      const multimap <Key, Type, Traits, Allocator>& left, \n      const multimap <Key, Type, Traits, Allocator>& right);\n```  \n  \n### Parameters  \n `left`  \n An object of type `multimap`.  \n  \n `right`  \n An object of type `multimap`.  \n  \n### Return Value  \n **true** if the multimap on the left side of the operator is strictly less than the multimap on the right side of the operator; otherwise **false**.  \n  \n### Remarks  \n The comparison between multimap objects is based on a pairwise comparison of their elements. The less-than relationship between two objects is based on a comparison of the first pair of unequal elements.  \n  \n### Example  \n  \n```cpp  \n// multimap_op_lt.cpp  \n// compile with: /EHsc  \n#include <map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   multimap < int, int > m1, m2, m3;  \n   int i;  \n   typedef pair < int, int > Int_Pair;  \n  \n   for ( i = 1 ; i < 3 ; i++ )  \n   {  \n      m1.insert ( Int_Pair ( i, i ) );  \n      m2.insert ( Int_Pair ( i, i * i ) );  \n      m3.insert ( Int_Pair ( i, i - 1 ) );  \n   }  \n  \n   if ( m1 < m2 )  \n      cout << \"The multimap m1 is less than the multimap m2.\" << endl;  \n   else  \n      cout << \"The multimap m1 is not less than the multimap m2.\" << endl;  \n  \n   if ( m1 < m3 )  \n      cout << \"The multimap m1 is less than the multimap m3.\" << endl;  \n   else  \n      cout << \"The multimap m1 is not less than the multimap m3.\" << endl;  \n}  \n\\* Output:   \nThe multimap m1 is less than the multimap m2.  \nThe multimap m1 is not less than the multimap m3.  \n*\\  \n```  \n  \n##  <a name=\"operator_lt__eq_multimap\"></a>  operator&lt;=  \n Tests if the multimap object on the left side of the operator is less than or equal to the multimap object on the right side.  \n  \n```\nbool operator<=(\n      const multimap <Key, Type, Traits, Allocator>& left, \n      const multimap <Key, Type, Traits, Allocator>& right);\n```  \n  \n### Parameters  \n `left`  \n An object of type `multimap`.  \n  \n `right`  \n An object of type `multimap`.  \n  \n### Return Value  \n **true** if the multimap on the left side of the operator is less than or equal to the multimap on the right side of the operator; otherwise **false**.  \n  \n### Example  \n  \n```cpp  \n// multimap_op_le.cpp  \n// compile with: /EHsc  \n#include <map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   multimap <int, int> m1, m2, m3, m4;  \n   int i;  \n   typedef pair <int, int> Int_Pair;  \n  \n   for ( i = 1 ; i < 3 ; i++ )  \n   {  \n      m1.insert ( Int_Pair ( i, i ) );  \n      m2.insert ( Int_Pair ( i, i * i ) );  \n      m3.insert ( Int_Pair ( i, i - 1 ) );  \n      m4.insert ( Int_Pair ( i, i ) );  \n   }  \n  \n   if ( m1 <= m2 )  \n      cout << \"m1 is less than or equal to m2\" << endl;  \n   else  \n      cout << \"m1 is greater than m2\" << endl;  \n  \n   if ( m1 <= m3 )  \n      cout << \"m1 is less than or equal to m3\" << endl;  \n   else  \n      cout << \"m1 is greater than m3\" << endl;  \n  \n   if ( m1 <= m4 )  \n      cout << \"m1 is less than or equal to m4\" << endl;  \n   else  \n      cout << \"m1 is greater than m4\" << endl;  \n}  \n\\* Output:   \nm1 is less than or equal to m2  \nm1 is greater than m3  \nm1 is less than or equal to m4  \n*\\  \n```  \n  \n##  <a name=\"operator_eq_eq_multimap\"></a>  operator==  \n Tests if the multimap object on the left side of the operator is equal to the multimap object on the right side.  \n  \n```\nbool operator==(\n      const multimap <Key, Type, Traits, Allocator>& left, \n      const multimap <Key, Type, Traits, Allocator>& right);\n```  \n  \n### Parameters  \n `left`  \n An object of type `multimap`.  \n  \n `right`  \n An object of type `multimap`.  \n  \n### Return Value  \n **true** if the multimap on the left side of the operator is equal to the multimap on the right side of the operator; otherwise **false**.  \n  \n### Remarks  \n The comparison between multimap objects is based on a pairwise comparison of their elements. Two multimaps are equal if they have the same number of elements and their respective elements have the same values. Otherwise, they are unequal.  \n  \n### Example  \n  \n```cpp  \n// multimap_op_eq.cpp  \n// compile with: /EHsc  \n#include <map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   multimap<int, int> m1, m2, m3;  \n   int i;  \n   typedef pair<int, int> Int_Pair;  \n  \n   for (i = 0; i < 3; i++)  \n   {  \n      m1.insert(Int_Pair(i, i));  \n      m2.insert(Int_Pair(i, i*i));  \n      m3.insert(Int_Pair(i, i));  \n   }  \n  \n   if ( m1 == m2 )  \n      cout << \"m1 and m2 are equal\" << endl;  \n   else  \n      cout << \"m1 and m2 are not equal\" << endl;  \n  \n   if ( m1 == m3 )  \n      cout << \"m1 and m3 are equal\" << endl;  \n   else  \n      cout << \"m1 and m3 are not equal\" << endl;  \n}  \n\\* Output:   \nm1 and m2 are not equal  \nm1 and m3 are equal  \n*\\  \n```  \n  \n##  <a name=\"operator_gt_multimap\"></a>  operator&gt;  \n Tests if the multimap object on the left side of the operator is greater than the multimap object on the right side.  \n  \n```\nbool operator>(\n      const multimap <Key, Type, Traits, Allocator>& left, \n      const multimap <Key, Type, Traits, Allocator>& right);\n```  \n  \n### Parameters  \n `left`  \n An object of type `multimap`.  \n  \n `right`  \n An object of type `multimap`.  \n  \n### Return Value  \n **true** if the multimap on the left side of the operator is greater than the multimap on the right side of the operator; otherwise **false**.  \n  \n### Remarks  \n The comparison between multimap objects is based on a pairwise comparison of their elements. The greater-than relationship between two objects is based on a comparison of the first pair of unequal elements.  \n  \n### Example  \n  \n```cpp  \n// multimap_op_gt.cpp  \n// compile with: /EHsc  \n#include <map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   multimap < int, int > m1, m2, m3;  \n   int i;  \n   typedef pair < int, int > Int_Pair;  \n  \n   for ( i = 0 ; i < 3 ; i++ )  \n   {  \n      m1.insert ( Int_Pair ( i, i ) );  \n      m2.insert ( Int_Pair ( i, i * i ) );  \n      m3.insert ( Int_Pair ( i, i - 1 ) );  \n   }  \n  \n   if ( m1 > m2 )  \n      cout << \"The multimap m1 is greater than the multimap m2.\" << endl;  \n   else  \n      cout << \"Multimap m1 is not greater than multimap m2.\" << endl;  \n  \n   if ( m1 > m3 )  \n      cout << \"The multimap m1 is greater than the multimap m3.\" << endl;  \n   else  \n      cout << \"The multimap m1 is not greater than the multimap m3.\" << endl;  \n}  \n\\* Output:   \nMultimap m1 is not greater than multimap m2.  \nThe multimap m1 is greater than the multimap m3.  \n*\\  \n```  \n  \n##  <a name=\"operator_gt__eq_multimap\"></a>  operator&gt;=  \n Tests if the multimap object on the left side of the operator is greater than or equal to the multimap object on the right side.  \n  \n```\nbool operator>=(\n      const multimap <Key, Type, Traits, Allocator>& left, \n      const multimap <Key, Type, Traits, Allocator>& right);\n```  \n  \n### Parameters  \n `left`  \n An object of type `multimap`.  \n  \n `right`  \n An object of type `multimap`.  \n  \n### Return Value  \n **true** if the multimap on the left side of the operator is greater than or equal to the multimap on the right side of the list; otherwise **false**.  \n  \n### Example  \n  \n```cpp  \n// multimap_op_ge.cpp  \n// compile with: /EHsc  \n#include <map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   multimap < int, int > m1, m2, m3, m4;  \n   int i;  \n   typedef pair < int, int > Int_Pair;  \n  \n   for ( i = 1 ; i < 3 ; i++ )  \n   {  \n      m1.insert ( Int_Pair ( i, i ) );  \n      m2.insert ( Int_Pair ( i, i * i ) );  \n      m3.insert ( Int_Pair ( i, i - 1 ) );  \n      m4.insert ( Int_Pair ( i, i ) );  \n   }  \n  \n   if ( m1 >= m2 )  \n      cout << \"The multimap m1 is greater than or equal to the multimap m2.\" << endl;  \n   else  \n      cout << \"The multimap m1 is less than the multimap m2.\" << endl;  \n  \n   if ( m1 >= m3 )  \n      cout << \"The multimap m1 is greater than or equal to the multimap m3.\" << endl;  \n   else  \n      cout << \"The multimap m1 is less than the multimap m3.\" << endl;  \n  \n   if ( m1 >= m4 )  \n      cout << \"The multimap m1 is greater than or equal to the multimap m4.\" << endl;  \n   else  \n      cout << \"The multimap m1 is less than the multimap m4.\" << endl;  \n}  \n\\* Output:   \nThe multimap m1 is less than the multimap m2.  \nThe multimap m1 is greater than or equal to the multimap m3.  \nThe multimap m1 is greater than or equal to the multimap m4.  \n*\\  \n```  \n  \n## See Also  \n [\\<map>](../standard-library/map.md)\n\n\n\n"}