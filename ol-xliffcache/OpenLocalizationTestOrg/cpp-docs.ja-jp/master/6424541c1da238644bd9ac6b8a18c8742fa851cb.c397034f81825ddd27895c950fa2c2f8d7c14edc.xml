{"nodes":[{"pos":[12,59],"content":"Implementing a Simple Consumer | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Implementing a Simple Consumer | Microsoft Docs","pos":[0,47]}]},{"content":"Implementing a Simple Consumer","pos":[622,652]},{"content":"The following topics show how to edit the files created by the MFC Application Wizard and ATL OLE DB Consumer Wizard to create a simple consumer.","pos":[653,798]},{"content":"This example has the following parts:","pos":[799,836]},{"content":"\"Retrieving Data with the Consumer\" shows how to implement code in the consumer that reads all the data, row by row, from a database table.","pos":[846,985]},{"content":"\"Adding Bookmark Support to the Consumer\" shows how to add bookmark support to the consumer.","pos":[995,1087]},{"content":"\"Adding XML Support to the Consumer\" shows how to modify the consumer code to output the retrieved rowset data as XML data.","pos":[1097,1220]},{"pos":[1228,1351],"content":"[!NOTE]\n You can use the consumer application described in this section to test the MyProv and Provider sample providers.","leadings":["","> "],"nodes":[{"content":"You can use the consumer application described in this section to test the MyProv and Provider sample providers.","pos":[9,121]}]},{"pos":[1359,1646],"content":"[!NOTE]\n To build a consumer application to test MyProv (the same provider described in [Enhancing the Simple Read-Only Provider](../../data/oledb/enhancing-the-simple-read-only-provider.md)), you must include bookmark support as described in \"Adding Bookmark Support to the Consumer.\"","leadings":["","> "],"nodes":[{"content":"To build a consumer application to test MyProv (the same provider described in <bpt id=\"p1\">[</bpt>Enhancing the Simple Read-Only Provider<ept id=\"p1\">](../../data/oledb/enhancing-the-simple-read-only-provider.md)</ept>), you must include bookmark support as described in \"Adding Bookmark Support to the Consumer.\"","pos":[9,285],"source":" To build a consumer application to test MyProv (the same provider described in [Enhancing the Simple Read-Only Provider](../../data/oledb/enhancing-the-simple-read-only-provider.md)), you must include bookmark support as described in \"Adding Bookmark Support to the Consumer.\""}]},{"pos":[1654,1850],"content":"[!NOTE]\n To build a consumer application to test Provider, leave out the bookmark support described in \"Adding Bookmark Support to the Consumer\" and skip to \"Adding XML Support to the Consumer.\"","leadings":["","> "],"nodes":[{"content":"To build a consumer application to test Provider, leave out the bookmark support described in \"Adding Bookmark Support to the Consumer\" and skip to \"Adding XML Support to the Consumer.\"","pos":[9,194]}]},{"content":"Retrieving Data with the Consumer","pos":[1859,1892]},{"content":"To modify the console application to use the OLE DB consumer","pos":[1903,1963]},{"content":"In MyCons.cpp, change the main code by inserting the bold text as follows:","pos":[1973,2047]},{"content":"Adding Bookmark Support to the Consumer","pos":[2931,2970]},{"content":"A bookmark is a column that uniquely identifies rows in the table.","pos":[2974,3040]},{"content":"Typically it is the key column, but not always; it is provider-specific.","pos":[3041,3113]},{"content":"This section shows you how to add bookmark support.","pos":[3114,3165]},{"content":"To do so, you need to do the following in the user record class:","pos":[3166,3230]},{"content":"Instantiate the bookmarks.","pos":[3240,3266]},{"content":"These are objects of type <bpt id=\"p1\">[</bpt>CBookmark<ept id=\"p1\">](../../data/oledb/cbookmark-class.md)</ept>.","pos":[3267,3342],"source":" These are objects of type [CBookmark](../../data/oledb/cbookmark-class.md)."},{"pos":[3352,3445],"content":"Request a bookmark column from the provider by setting the <bpt id=\"p1\">**</bpt>DBPROP_IRowsetLocate<ept id=\"p1\">**</ept> property.","source":"Request a bookmark column from the provider by setting the **DBPROP_IRowsetLocate** property."},{"pos":[3455,3566],"content":"Add a bookmark entry to the column map by using the <bpt id=\"p1\">[</bpt>BOOKMARK_ENTRY<ept id=\"p1\">](../../data/oledb/bookmark-entry.md)</ept> macro.","source":"Add a bookmark entry to the column map by using the [BOOKMARK_ENTRY](../../data/oledb/bookmark-entry.md) macro."},{"content":"The previous steps give you bookmark support and a bookmark object with which to work.","pos":[3573,3659]},{"content":"This code example demonstrates a bookmark as follows:","pos":[3660,3713]},{"content":"Open a file for writing.","pos":[3723,3747]},{"content":"Output rowset data to the file row by row.","pos":[3757,3799]},{"pos":[3809,3920],"content":"Move the rowset cursor to the bookmark by calling <bpt id=\"p1\">[</bpt>MoveToBookmark<ept id=\"p1\">](../../data/oledb/crowset-movetobookmark.md)</ept>.","source":"Move the rowset cursor to the bookmark by calling [MoveToBookmark](../../data/oledb/crowset-movetobookmark.md)."},{"content":"Output the bookmarked row, appending it to the end of the file.","pos":[3930,3993]},{"pos":[4001,4156],"content":"[!NOTE]\n If you use this consumer application to test the Provider sample provider application, leave out the bookmark support described in this section.","leadings":["","> "],"nodes":[{"content":"If you use this consumer application to test the Provider sample provider application, leave out the bookmark support described in this section.","pos":[9,153]}]},{"content":"To instantiate the bookmark","pos":[4167,4194]},{"content":"The accessor needs to contain an object of type <bpt id=\"p1\">[</bpt>CBookmark<ept id=\"p1\">](../../data/oledb/cbookmark-class.md)</ept>.","pos":[4204,4301],"source":"The accessor needs to contain an object of type [CBookmark](../../data/oledb/cbookmark-class.md)."},{"content":"The <ph id=\"ph1\">`nSize`</ph> parameter specifies the size of the bookmark buffer in bytes (typically 4 for 32-bit platforms and 8 for 64-bit platforms).","pos":[4302,4437],"source":" The `nSize` parameter specifies the size of the bookmark buffer in bytes (typically 4 for 32-bit platforms and 8 for 64-bit platforms)."},{"content":"Add the following declaration to the column data members in the user record class:","pos":[4438,4520]},{"content":"To request a bookmark column from the provider","pos":[4807,4853]},{"pos":[4863,4947],"content":"Add the following code in the <ph id=\"ph1\">`GetRowsetProperties`</ph> method in the user record class:","source":"Add the following code in the `GetRowsetProperties` method in the user record class:"},{"content":"To add a bookmark entry to the column map","pos":[5395,5436]},{"content":"Add the following entry to the column map in the user record class:","pos":[5446,5513]},{"content":"To use a bookmark in your main code","pos":[5925,5960]},{"content":"In the MyCons.cpp file from the console application you previously created, change the main code to read as follows.","pos":[5970,6086]},{"content":"To use bookmarks, the main code needs to instantiate its own bookmark object (<ph id=\"ph1\">`myBookmark`</ph>); this is a different bookmark from the one in the accessor (<ph id=\"ph2\">`m_bookmark`</ph>).","pos":[6087,6253],"source":" To use bookmarks, the main code needs to instantiate its own bookmark object (`myBookmark`); this is a different bookmark from the one in the accessor (`m_bookmark`)."},{"content":"For more information about bookmarks, see <bpt id=\"p1\">[</bpt>Using Bookmarks<ept id=\"p1\">](../../data/oledb/using-bookmarks.md)</ept>.","pos":[8557,8654],"source":"For more information about bookmarks, see [Using Bookmarks](../../data/oledb/using-bookmarks.md)."},{"content":"Examples of bookmarks are also shown in <bpt id=\"p1\">[</bpt>Updating Rowsets<ept id=\"p1\">](../../data/oledb/updating-rowsets.md)</ept>.","pos":[8655,8752],"source":" Examples of bookmarks are also shown in [Updating Rowsets](../../data/oledb/updating-rowsets.md)."},{"content":"Adding XML Support to the Consumer","pos":[8761,8795]},{"content":"As discussed in <bpt id=\"p1\">[</bpt>Accessing XML Data<ept id=\"p1\">](../../data/oledb/accessing-xml-data.md)</ept>, there are two ways to retrieve XML data from a data source: using <bpt id=\"p2\">[</bpt>CStreamRowset<ept id=\"p2\">](../../data/oledb/cstreamrowset-class.md)</ept> or using <bpt id=\"p3\">[</bpt>CXMLAccessor<ept id=\"p3\">](../../data/oledb/cxmlaccessor-class.md)</ept>.","pos":[8799,9064],"source":"As discussed in [Accessing XML Data](../../data/oledb/accessing-xml-data.md), there are two ways to retrieve XML data from a data source: using [CStreamRowset](../../data/oledb/cstreamrowset-class.md) or using [CXMLAccessor](../../data/oledb/cxmlaccessor-class.md)."},{"content":"This example uses <ph id=\"ph1\">`CStreamRowset`</ph>, which is more efficient, but requires you to have SQL Server 2000 running on the computer on which you execute this sample application.","pos":[9065,9235],"source":" This example uses `CStreamRowset`, which is more efficient, but requires you to have SQL Server 2000 running on the computer on which you execute this sample application."},{"content":"To modify the command class to inherit from CStreamRowset","pos":[9246,9303]},{"pos":[9313,9458],"content":"In the consumer application you previously created, change your <ph id=\"ph1\">`CCommand`</ph> declaration to specify <ph id=\"ph2\">`CStreamRowset`</ph> as the rowset class as follows:","source":"In the consumer application you previously created, change your `CCommand` declaration to specify `CStreamRowset` as the rowset class as follows:"},{"content":"To modify the main code to retrieve and output the XML data","pos":[9578,9637]},{"content":"In the MyCons.cpp file from the console application you previously created, change the main code to read as follows:","pos":[9647,9763]},{"content":"See Also","pos":[11367,11375]},{"content":"Creating an OLE DB Consumer Using a Wizard","pos":[11380,11422]}],"content":"---\ntitle: \"Implementing a Simple Consumer | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"clients, creating\"\n  - \"OLE DB consumers, implementing\"\nms.assetid: 13828167-23a4-4e94-8b6c-878262fda464\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Implementing a Simple Consumer\nThe following topics show how to edit the files created by the MFC Application Wizard and ATL OLE DB Consumer Wizard to create a simple consumer. This example has the following parts:  \n  \n-   \"Retrieving Data with the Consumer\" shows how to implement code in the consumer that reads all the data, row by row, from a database table.  \n  \n-   \"Adding Bookmark Support to the Consumer\" shows how to add bookmark support to the consumer.  \n  \n-   \"Adding XML Support to the Consumer\" shows how to modify the consumer code to output the retrieved rowset data as XML data.  \n  \n> [!NOTE]\n>  You can use the consumer application described in this section to test the MyProv and Provider sample providers.  \n  \n> [!NOTE]\n>  To build a consumer application to test MyProv (the same provider described in [Enhancing the Simple Read-Only Provider](../../data/oledb/enhancing-the-simple-read-only-provider.md)), you must include bookmark support as described in \"Adding Bookmark Support to the Consumer.\"  \n  \n> [!NOTE]\n>  To build a consumer application to test Provider, leave out the bookmark support described in \"Adding Bookmark Support to the Consumer\" and skip to \"Adding XML Support to the Consumer.\"  \n  \n## Retrieving Data with the Consumer  \n  \n#### To modify the console application to use the OLE DB consumer  \n  \n1.  In MyCons.cpp, change the main code by inserting the bold text as follows:  \n  \n    ```  \n    // MyCons.cpp : Defines the entry point for the console application.  \n    //  \n    #include \"stdafx.h\"  \n    #include \"Products.h\"  \n    ...  \n    int main(int argc, char* argv[])  \n    {  \n       HRESULT hr = CoInitialize(NULL);   // Instantiate rowset   CProducts rs;   hr = rs.OpenAll();   ATLASSERT( SUCCEEDED( hr ) );   hr = rs.MoveFirst();   // Iterate through the rowset   while( SUCCEEDED(hr) && hr != DB_S_ENDOFROWSET )   {      // Print out the column information for each row      printf(\"Product ID: %d, Name: %s, Unit Price: %d, Quantity per Unit: %d, Units in Stock %d, Reorder Level %d\\n\",             rs.m_ProductID, rs.m_ProductName, rs.m_UnitPrice, rs.m_QuantityPerUnit, rs.m_UnitsInStock, rs.m_ReorderLevel );      hr = rs.MoveNext();   }   rs.Close();   rs.ReleaseCommand();   CoUninitialize();  \n  \n       return 0;  \n    }  \n    ```  \n  \n## Adding Bookmark Support to the Consumer  \n A bookmark is a column that uniquely identifies rows in the table. Typically it is the key column, but not always; it is provider-specific. This section shows you how to add bookmark support. To do so, you need to do the following in the user record class:  \n  \n-   Instantiate the bookmarks. These are objects of type [CBookmark](../../data/oledb/cbookmark-class.md).  \n  \n-   Request a bookmark column from the provider by setting the **DBPROP_IRowsetLocate** property.  \n  \n-   Add a bookmark entry to the column map by using the [BOOKMARK_ENTRY](../../data/oledb/bookmark-entry.md) macro.  \n  \n The previous steps give you bookmark support and a bookmark object with which to work. This code example demonstrates a bookmark as follows:  \n  \n-   Open a file for writing.  \n  \n-   Output rowset data to the file row by row.  \n  \n-   Move the rowset cursor to the bookmark by calling [MoveToBookmark](../../data/oledb/crowset-movetobookmark.md).  \n  \n-   Output the bookmarked row, appending it to the end of the file.  \n  \n> [!NOTE]\n>  If you use this consumer application to test the Provider sample provider application, leave out the bookmark support described in this section.  \n  \n#### To instantiate the bookmark  \n  \n1.  The accessor needs to contain an object of type [CBookmark](../../data/oledb/cbookmark-class.md). The `nSize` parameter specifies the size of the bookmark buffer in bytes (typically 4 for 32-bit platforms and 8 for 64-bit platforms). Add the following declaration to the column data members in the user record class:  \n  \n    ```  \n    //////////////////////////////////////////////////////////////////////  \n    // Products.h  \n    class CProductsAccessor  \n    {  \n    public:  \n       CBookmark<4> m_bookmark;   // Add bookmark declaration  \n       LONG m_ProductID;  \n       ...  \n    ```  \n  \n#### To request a bookmark column from the provider  \n  \n1.  Add the following code in the `GetRowsetProperties` method in the user record class:  \n  \n    ```  \n    // Set the DBPROP_IRowsetLocate property.  \n    void GetRowsetProperties(CDBPropSet* pPropSet)  \n    {  \n       pPropSet->AddProperty(DBPROP_CANFETCHBACKWARDS, true, DBPROPOPTIONS_OPTIONAL);  \n       pPropSet->AddProperty(DBPROP_CANSCROLLBACKWARDS, true, DBPROPOPTIONS_OPTIONAL);  \n       // Add DBPROP_IRowsetLocate property to support bookmarks   pPropSet->AddProperty(DBPROP_IRowsetLocate, true);  \n    }  \n    ```  \n  \n#### To add a bookmark entry to the column map  \n  \n1.  Add the following entry to the column map in the user record class:  \n  \n    ```  \n    // Set a bookmark entry in the column map.  \n    BEGIN_COLUMN_MAP(CProductsAccessor)  \n       BOOKMARK_ENTRY(m_bookmark)   // Add bookmark entry  \n       COLUMN_ENTRY_LENGTH_STATUS(1, m_ProductID, m_dwProductIDLength, m_dwProductIDStatus)  \n       COLUMN_ENTRY_LENGTH_STATUS(2, m_ProductName, m_dwProductNameLength, m_dwProductNameStatus)  \n    ...  \n    END_COLUMN_MAP()  \n    ```  \n  \n#### To use a bookmark in your main code  \n  \n1.  In the MyCons.cpp file from the console application you previously created, change the main code to read as follows. To use bookmarks, the main code needs to instantiate its own bookmark object (`myBookmark`); this is a different bookmark from the one in the accessor (`m_bookmark`).  \n  \n    ```  \n    ///////////////////////////////////////////////////////////////////////  \n    // MyCons.cpp : Defines the entry point for the console application.  \n    //  \n  \n    #include \"stdafx.h\"  \n    #include \"Products.h\"   \n    #include <iostream>  \n    #include <fstream>  \n    using namespace std;  \n  \n    int _tmain(int argc, _TCHAR* argv[])  \n    {  \n       HRESULT hr = CoInitialize(NULL);  \n  \n       // Instantiate rowset  \n       CProducts rs;  \n  \n       hr = rs.OpenAll();  \n       hr = rs.MoveFirst();  \n  \n       // Cast CURRENCY m_UnitPrice to a long value  \n       LONGLONG lPrice = rs.m_UnitPrice.int64;  \n  \n       // Open file output.txt for writing in overwrite mode  \n       ofstream outfile( \"C:\\\\output.txt\", ios::out );  \n  \n       if (!outfile)      // Test for invalid file  \n          return -1;  \n  \n       // Instantiate a bookmark object myBookmark for the main code  \n       CBookmark<4> myBookmark;  \n       int nCounter = 0;  \n  \n       // Iterate through the rowset and output column data to output.txt row by row  \n       // In the file, mark the beginning of this set of data:  \n       outfile << \"initial row dump\" << endl;  \n       while( SUCCEEDED(hr) && hr != DB_S_ENDOFROWSET )  \n       {  \n          nCounter++;  \n          if( nCounter == 5 )  \n             myBookmark = rs.bookmark;  \n          // Output the column information for each row:  \n          outfile << rs.m_ProductID << rs.m_ProductName << lPrice << rs.m_QuantityPerUnit << rs.m_UnitsInStock << rs.m_ReorderLevel << endl;  \n          hr = rs.MoveNext();  \n       }  \n  \n       // Move cursor to bookmark  \n       hr = rs.MoveToBookmark(myBookmark);  \n  \n       // Iterate through the rowset and output column data to output.txt row by row  \n       // In the file, mark the beginning of this set of data:  \n       outfile << \"row dump starting from bookmarked row\" << endl;  \n       while( SUCCEEDED(hr) && hr != DB_S_ENDOFROWSET )  \n       {  \n          // Output the column information for each row  \n          outfile << rs.m_ProductID << rs.m_ProductName << lPrice << rs.m_QuantityPerUnit << rs.m_UnitsInStock << rs.m_ReorderLevel << endl;  \n          hr = rs.MoveNext();  \n       }  \n  \n       rs.CloseAll();  \n       CoUninitialize();  \n  \n       return 0;  \n    }  \n    ```  \n  \n For more information about bookmarks, see [Using Bookmarks](../../data/oledb/using-bookmarks.md). Examples of bookmarks are also shown in [Updating Rowsets](../../data/oledb/updating-rowsets.md).  \n  \n## Adding XML Support to the Consumer  \n As discussed in [Accessing XML Data](../../data/oledb/accessing-xml-data.md), there are two ways to retrieve XML data from a data source: using [CStreamRowset](../../data/oledb/cstreamrowset-class.md) or using [CXMLAccessor](../../data/oledb/cxmlaccessor-class.md). This example uses `CStreamRowset`, which is more efficient, but requires you to have SQL Server 2000 running on the computer on which you execute this sample application.  \n  \n#### To modify the command class to inherit from CStreamRowset  \n  \n1.  In the consumer application you previously created, change your `CCommand` declaration to specify `CStreamRowset` as the rowset class as follows:  \n  \n    ```  \n    class CProducts : public CCommand<CAccessor<CProductsAccessor>, CStreamRowset >  \n    ```  \n  \n#### To modify the main code to retrieve and output the XML data  \n  \n1.  In the MyCons.cpp file from the console application you previously created, change the main code to read as follows:  \n  \n    ```  \n    ///////////////////////////////////////////////////////////////////////  \n    // MyCons.cpp : Defines the entry point for the console application.  \n    //  \n  \n    #include \"stdafx.h\"  \n    #include \"Products.h\"   \n    #include <iostream>  \n    #include <fstream>  \n    using namespace std;  \n  \n    int _tmain(int argc, _TCHAR* argv[])  \n    {  \n       HRESULT hr = CoInitialize(NULL);  \n  \n       // Instantiate rowset  \n       CProducts rs;  \n  \n       // Add variable declarations for the Read method to handle sequential stream data  \n       CHAR buffer[1001];  // Pointer to buffer into which data stream is read  \n       ULONG cbRead;       // Actual number of bytes read from the data stream  \n  \n       hr = rs.OpenAll();  \n  \n       // Open file output.txt for writing in overwrite mode  \n       ofstream outfile( \"C:\\\\output.txt\", ios::out );  \n  \n       if (!outfile)      // Test for invalid file  \n          return -1;  \n  \n       // The following loop reads 1000 bytes of the data stream at a time   \n       // until it reaches the end of the data stream  \n       for (;;)  \n       {  \n          // Read sequential stream data into buffer  \n          HRESULT hr = rs.m_spStream->Read(buffer, 1000, &cbRead);  \n          if (FAILED (hr))  \n             break;  \n          // Output buffer to file  \n          buffer[cbRead] = 0;  \n          outfile << buffer;  \n          // Test for end of data stream  \n          if (cbRead < 1000)  \n             break;  \n       }  \n  \n       rs.CloseAll();  \n       CoUninitialize();  \n  \n       return 0;  \n    }  \n    ```  \n  \n## See Also  \n [Creating an OLE DB Consumer Using a Wizard](../../data/oledb/creating-an-ole-db-consumer-using-a-wizard.md)"}