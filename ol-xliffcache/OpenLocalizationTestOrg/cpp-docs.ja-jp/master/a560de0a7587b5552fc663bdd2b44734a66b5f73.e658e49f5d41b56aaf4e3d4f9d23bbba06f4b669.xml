{"nodes":[{"pos":[12,59],"content":"&lt;forward_list&gt; operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>forward_list<ph id=\"ph2\">&amp;gt;</ph> operators | Microsoft Docs","pos":[0,47],"source":"&lt;forward_list&gt; operators | Microsoft Docs"}]},{"pos":[262,292],"content":"&lt;forward_list&gt; operators","linkify":"&lt;forward_list&gt; operators","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>forward_list<ph id=\"ph2\">&amp;gt;</ph> operators","pos":[0,30],"source":"&lt;forward_list&gt; operators"}]},{"pos":[311,338],"content":"<bpt id=\"p1\">[</bpt>operator!=<ept id=\"p1\">](#operator_neq)</ept>","source":"[operator!=](#operator_neq)"},{"pos":[339,368],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;gt;</ph><ept id=\"p1\">](#operator_gt_)</ept>","source":"[operator&gt;](#operator_gt_)"},{"pos":[369,402],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">=</ph><ept id=\"p1\">](#operator_gt__eq)</ept>","source":"[operator&gt;=](#operator_gt__eq)"},{"pos":[407,436],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;lt;</ph><ept id=\"p1\">](#operator_lt_)</ept>","source":"[operator&lt;](#operator_lt_)"},{"pos":[437,470],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">=</ph><ept id=\"p1\">](#operator_lt__eq)</ept>","source":"[operator&lt;=](#operator_lt__eq)"},{"pos":[471,500],"content":"<bpt id=\"p1\">[</bpt>operator==<ept id=\"p1\">](#operator_eq_eq)</ept>","source":"[operator==](#operator_eq_eq)"},{"pos":[511,552],"content":"<bpt id=\"p1\">&lt;a name=\"operator_eq_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator==","linkify":"<a name=\"operator_eq_eq\"></a>  operator==","source":"<a name=\"operator_eq_eq\"></a>  operator=="},{"content":"Tests if the forward list object on the left side of the operator is equal to the forward list object on the right side.","pos":[556,676]},{"pos":[814,824],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[831,840]},{"content":"Description","pos":[841,852]},{"pos":[902,935],"content":"An object of type <ph id=\"ph1\">`forward_list`</ph>.","source":"An object of type `forward_list`."},{"pos":[948,981],"content":"An object of type <ph id=\"ph1\">`forward_list`</ph>.","source":"An object of type `forward_list`."},{"pos":[992,999],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This template function overloads <ph id=\"ph1\">`operator==`</ph> to compare two objects of template class <ph id=\"ph2\">`forward_list`</ph>.","pos":[1003,1105],"source":"This template function overloads `operator==` to compare two objects of template class `forward_list`."},{"content":"The function returns <ph id=\"ph1\">`distance(left.begin(), end()) == distance(right.begin(),right.end()) &amp;&amp; equal(left. begin(),left. end(),right.begin())`</ph>.","pos":[1106,1248],"source":" The function returns `distance(left.begin(), end()) == distance(right.begin(),right.end()) && equal(left. begin(),left. end(),right.begin())`."},{"pos":[1258,1297],"content":"<bpt id=\"p1\">&lt;a name=\"operator_neq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator!=","linkify":"<a name=\"operator_neq\"></a>  operator!=","source":"<a name=\"operator_neq\"></a>  operator!="},{"content":"Tests if the forward list object on the left side of the operator is not equal to the forward list object on the right side.","pos":[1301,1425]},{"pos":[1563,1573],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[1580,1589]},{"content":"Description","pos":[1590,1601]},{"pos":[1651,1684],"content":"An object of type <ph id=\"ph1\">`forward_list`</ph>.","source":"An object of type `forward_list`."},{"pos":[1697,1730],"content":"An object of type <ph id=\"ph1\">`forward_list`</ph>.","source":"An object of type `forward_list`."},{"pos":[1741,1753],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1757,1827],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the lists are not equal; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if the lists are equal.","source":"**true** if the lists are not equal; **false** if the lists are equal."},{"pos":[1837,1844],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1848,1898],"content":"This template function returns <ph id=\"ph1\">`!(left == right)`</ph>.","source":"This template function returns `!(left == right)`."},{"pos":[1908,1949],"content":"<bpt id=\"p1\">&lt;a name=\"operator_lt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;lt;</ph>","linkify":"<a name=\"operator_lt_\"></a>  operator&lt;","source":"<a name=\"operator_lt_\"></a>  operator&lt;"},{"content":"Tests if the forward list object on the left side of the operator is less than the forward list object on the right side.","pos":[1953,2074]},{"pos":[2211,2221],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[2228,2237]},{"content":"Description","pos":[2238,2249]},{"pos":[2299,2332],"content":"An object of type <ph id=\"ph1\">`forward_list`</ph>.","source":"An object of type `forward_list`."},{"pos":[2345,2378],"content":"An object of type <ph id=\"ph1\">`forward_list`</ph>.","source":"An object of type `forward_list`."},{"pos":[2389,2401],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2405,2549],"content":"<ph id=\"ph1\">`true`</ph> if the list on the left side of the operator is less than but not equal to the list on the right side of the operator; otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` if the list on the left side of the operator is less than but not equal to the list on the right side of the operator; otherwise `false`."},{"pos":[2559,2566],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This template function overloads <ph id=\"ph1\">`operator&lt;`</ph> to compare two objects of template class <ph id=\"ph2\">`forward_list`</ph>.","pos":[2570,2671],"source":"This template function overloads `operator<` to compare two objects of template class `forward_list`."},{"content":"The function returns <ph id=\"ph1\">`lexicographical_compare(lhs. begin(), lhs. end(), rhs.begin(), rhs.end())`</ph>.","pos":[2672,2769],"source":" The function returns `lexicographical_compare(lhs. begin(), lhs. end(), rhs.begin(), rhs.end())`."},{"pos":[2779,2824],"content":"<bpt id=\"p1\">&lt;a name=\"operator_lt__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">=</ph>","linkify":"<a name=\"operator_lt__eq\"></a>  operator&lt;=","source":"<a name=\"operator_lt__eq\"></a>  operator&lt;="},{"content":"Tests if the forward list object on the left side of the operator is less than or equal to the forward list object on the right side.","pos":[2828,2961]},{"pos":[3099,3109],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[3116,3125]},{"content":"Description","pos":[3126,3137]},{"pos":[3187,3220],"content":"An object of type <ph id=\"ph1\">`forward_list`</ph>.","source":"An object of type `forward_list`."},{"pos":[3233,3266],"content":"An object of type <ph id=\"ph1\">`forward_list`</ph>.","source":"An object of type `forward_list`."},{"pos":[3277,3289],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3293,3432],"content":"<ph id=\"ph1\">`true`</ph> if the list on the left side of the operator is less than or equal to the list on the right side of the operator; otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` if the list on the left side of the operator is less than or equal to the list on the right side of the operator; otherwise `false`."},{"pos":[3442,3449],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3453,3502],"content":"This template function returns <ph id=\"ph1\">`!(right &lt; left)`</ph>.","source":"This template function returns `!(right < left)`."},{"pos":[3512,3553],"content":"<bpt id=\"p1\">&lt;a name=\"operator_gt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;gt;</ph>","linkify":"<a name=\"operator_gt_\"></a>  operator&gt;","source":"<a name=\"operator_gt_\"></a>  operator&gt;"},{"content":"Tests if the forward list object on the left side of the operator is greater than the forward list object on the right side.","pos":[3557,3681]},{"pos":[3818,3828],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[3835,3844]},{"content":"Description","pos":[3845,3856]},{"pos":[3906,3939],"content":"An object of type <ph id=\"ph1\">`forward_list`</ph>.","source":"An object of type `forward_list`."},{"pos":[3952,3985],"content":"An object of type <ph id=\"ph1\">`forward_list`</ph>.","source":"An object of type `forward_list`."},{"pos":[3996,4008],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4012,4142],"content":"<ph id=\"ph1\">`true`</ph> if the list on the left side of the operator is greater than the list on the right side of the operator; otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` if the list on the left side of the operator is greater than the list on the right side of the operator; otherwise `false`."},{"pos":[4152,4159],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4163,4209],"content":"This template function returns <ph id=\"ph1\">`right &lt; left`</ph>.","source":"This template function returns `right < left`."},{"pos":[4219,4264],"content":"<bpt id=\"p1\">&lt;a name=\"operator_gt__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">=</ph>","linkify":"<a name=\"operator_gt__eq\"></a>  operator&gt;=","source":"<a name=\"operator_gt__eq\"></a>  operator&gt;="},{"content":"Tests if the forward list object on the left side of the operator is greater than or equal to the forward list object on the right side.","pos":[4268,4404]},{"pos":[4542,4552],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[4559,4568]},{"content":"Description","pos":[4569,4580]},{"pos":[4630,4663],"content":"An object of type <ph id=\"ph1\">`forward_list`</ph>.","source":"An object of type `forward_list`."},{"pos":[4676,4709],"content":"An object of type <ph id=\"ph1\">`forward_list`</ph>.","source":"An object of type `forward_list`."},{"pos":[4720,4732],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4736,4894],"content":"<ph id=\"ph1\">`true`</ph> if the forward list on the left side of the operator is greater than or equal to the forward list on the right side of the operator; otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` if the forward list on the left side of the operator is greater than or equal to the forward list on the right side of the operator; otherwise `false`."},{"pos":[4904,4911],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4915,4963],"content":"The template function returns <ph id=\"ph1\">`!(left &lt; right)`</ph>.","source":"The template function returns `!(left < right)`."},{"pos":[4972,4980],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[4984,5037],"content":"<bpt id=\"p1\">[</bpt>&lt;forward_list&gt;<ept id=\"p1\">](../standard-library/forward-list.md)</ept>","source":"[<forward_list>](../standard-library/forward-list.md)"}],"content":"---\ntitle: \"&lt;forward_list&gt; operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 57492e09-3836-4dbc-9ae5-78ecf506c190\ncaps.latest.revision: 11\nmanager: \"ghogen\"\n---\n# &lt;forward_list&gt; operators\n||||  \n|-|-|-|  \n|[operator!=](#operator_neq)|[operator&gt;](#operator_gt_)|[operator&gt;=](#operator_gt__eq)|  \n|[operator&lt;](#operator_lt_)|[operator&lt;=](#operator_lt__eq)|[operator==](#operator_eq_eq)|  \n  \n##  <a name=\"operator_eq_eq\"></a>  operator==  \n Tests if the forward list object on the left side of the operator is equal to the forward list object on the right side.  \n  \n```\nbool operator==(\n    const forward_list <Type, Allocator>& left,\n    const forward_list <Type, Allocator>& right);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`left`|An object of type `forward_list`.|  \n|`right`|An object of type `forward_list`.|  \n  \n### Remarks  \n This template function overloads `operator==` to compare two objects of template class `forward_list`. The function returns `distance(left.begin(), end()) == distance(right.begin(),right.end()) && equal(left. begin(),left. end(),right.begin())`.  \n  \n##  <a name=\"operator_neq\"></a>  operator!=  \n Tests if the forward list object on the left side of the operator is not equal to the forward list object on the right side.  \n  \n```\nbool operator!=(\n    const forward_list <Type, Allocator>& left,\n    const forward_list <Type, Allocator>& right);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`left`|An object of type `forward_list`.|  \n|`right`|An object of type `forward_list`.|  \n  \n### Return Value  \n **true** if the lists are not equal; **false** if the lists are equal.  \n  \n### Remarks  \n This template function returns `!(left == right)`.  \n  \n##  <a name=\"operator_lt_\"></a>  operator&lt;  \n Tests if the forward list object on the left side of the operator is less than the forward list object on the right side.  \n  \n```\nbool operator<(\n    const forward_list <Type, Allocator>& left,\n    const forward_list <Type, Allocator>& right);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`left`|An object of type `forward_list`.|  \n|`right`|An object of type `forward_list`.|  \n  \n### Return Value  \n `true` if the list on the left side of the operator is less than but not equal to the list on the right side of the operator; otherwise `false`.  \n  \n### Remarks  \n This template function overloads `operator<` to compare two objects of template class `forward_list`. The function returns `lexicographical_compare(lhs. begin(), lhs. end(), rhs.begin(), rhs.end())`.  \n  \n##  <a name=\"operator_lt__eq\"></a>  operator&lt;=  \n Tests if the forward list object on the left side of the operator is less than or equal to the forward list object on the right side.  \n  \n```\nbool operator<=(\n    const forward_list <Type, Allocator>& left,\n    const forward_list <Type, Allocator>& right);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`left`|An object of type `forward_list`.|  \n|`right`|An object of type `forward_list`.|  \n  \n### Return Value  \n `true` if the list on the left side of the operator is less than or equal to the list on the right side of the operator; otherwise `false`.  \n  \n### Remarks  \n This template function returns `!(right < left)`.  \n  \n##  <a name=\"operator_gt_\"></a>  operator&gt;  \n Tests if the forward list object on the left side of the operator is greater than the forward list object on the right side.  \n  \n```\nbool operator>(\n    const forward_list <Type, Allocator>& left,\n    const forward_list <Type, Allocator>& right);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`left`|An object of type `forward_list`.|  \n|`right`|An object of type `forward_list`.|  \n  \n### Return Value  \n `true` if the list on the left side of the operator is greater than the list on the right side of the operator; otherwise `false`.  \n  \n### Remarks  \n This template function returns `right < left`.  \n  \n##  <a name=\"operator_gt__eq\"></a>  operator&gt;=  \n Tests if the forward list object on the left side of the operator is greater than or equal to the forward list object on the right side.  \n  \n```\nbool operator>=(\n    const forward_list <Type, Allocator>& left,\n    const forward_list <Type, Allocator>& right);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`left`|An object of type `forward_list`.|  \n|`right`|An object of type `forward_list`.|  \n  \n### Return Value  \n `true` if the forward list on the left side of the operator is greater than or equal to the forward list on the right side of the operator; otherwise `false`.  \n  \n### Remarks  \n The template function returns `!(left < right)`.  \n  \n## See Also  \n [<forward_list>](../standard-library/forward-list.md)\n\n\n\n"}