{"nodes":[{"pos":[12,44],"content":"sizeof Operator | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"sizeof Operator | Microsoft Docs","pos":[0,32]}]},{"content":"sizeof Operator","pos":[623,638]},{"pos":[639,710],"content":"Yields the size of its operand with respect to the size of type <ph id=\"ph1\">`char`</ph>.","source":"Yields the size of its operand with respect to the size of type `char`."},{"pos":[718,859],"content":"[!NOTE]\n For information about the `sizeof ...` operator, see [Ellipses and Variadic Templates](../cpp/ellipses-and-variadic-templates.md).","leadings":["","> "],"nodes":[{"content":"For information about the <ph id=\"ph1\">`sizeof ...`</ph> operator, see <bpt id=\"p1\">[</bpt>Ellipses and Variadic Templates<ept id=\"p1\">](../cpp/ellipses-and-variadic-templates.md)</ept>.","pos":[9,139],"source":" For information about the `sizeof ...` operator, see [Ellipses and Variadic Templates](../cpp/ellipses-and-variadic-templates.md)."}]},{"content":"Syntax","pos":[868,874]},{"content":"Remarks","pos":[948,955]},{"content":"The result of the <ph id=\"ph1\">`sizeof`</ph> operator is of type <ph id=\"ph2\">`size_t`</ph>, an integral type defined in the include file STDDEF.H.","pos":[959,1070],"source":"The result of the `sizeof` operator is of type `size_t`, an integral type defined in the include file STDDEF.H."},{"content":"This operator allows you to avoid specifying machine-dependent data sizes in your programs.","pos":[1071,1162]},{"pos":[1169,1221],"content":"The operand to <ph id=\"ph1\">`sizeof`</ph> can be one of the following:","source":"The operand to `sizeof` can be one of the following:"},{"content":"A type name.","pos":[1231,1243]},{"content":"To use <ph id=\"ph1\">`sizeof`</ph> with a type name, the name must be enclosed in parentheses.","pos":[1244,1319],"source":" To use `sizeof` with a type name, the name must be enclosed in parentheses."},{"content":"An expression.","pos":[1329,1343]},{"content":"When used with an expression, <ph id=\"ph1\">`sizeof`</ph> can be specified with or without the parentheses.","pos":[1344,1432],"source":" When used with an expression, `sizeof` can be specified with or without the parentheses."},{"content":"The expression is not evaluated.","pos":[1433,1465]},{"content":"When the <ph id=\"ph1\">`sizeof`</ph> operator is applied to an object of type <ph id=\"ph2\">`char`</ph>, it yields 1.","pos":[1472,1551],"source":"When the `sizeof` operator is applied to an object of type `char`, it yields 1."},{"content":"When the <ph id=\"ph1\">`sizeof`</ph> operator is applied to an array, it yields the total number of bytes in that array, not the size of the pointer represented by the array identifier.","pos":[1552,1718],"source":" When the `sizeof` operator is applied to an array, it yields the total number of bytes in that array, not the size of the pointer represented by the array identifier."},{"content":"To obtain the size of the pointer represented by the array identifier, pass it as a parameter to a function that uses <ph id=\"ph1\">`sizeof`</ph>.","pos":[1719,1846],"source":" To obtain the size of the pointer represented by the array identifier, pass it as a parameter to a function that uses `sizeof`."},{"content":"For example:","pos":[1847,1859]},{"content":"Example","pos":[1868,1875]},{"content":"Sample Output","pos":[2325,2338]},{"content":"When the <ph id=\"ph1\">`sizeof`</ph> operator is applied to a <ph id=\"ph2\">`class`</ph>, <ph id=\"ph3\">`struct`</ph>, or <ph id=\"ph4\">`union`</ph> type, the result is the number of bytes in an object of that type, plus any padding added to align members on word boundaries.","pos":[2455,2654],"source":"When the `sizeof` operator is applied to a `class`, `struct`, or `union` type, the result is the number of bytes in an object of that type, plus any padding added to align members on word boundaries."},{"content":"The result does not necessarily correspond to the size calculated by adding the storage requirements of the individual members.","pos":[2655,2782]},{"content":"The <bpt id=\"p1\">[</bpt>/Zp<ept id=\"p1\">](../build/reference/zp-struct-member-alignment.md)</ept> compiler option and the <bpt id=\"p2\">[</bpt>pack<ept id=\"p2\">](../preprocessor/pack.md)</ept> pragma affect alignment boundaries for members.","pos":[2783,2946],"source":" The [/Zp](../build/reference/zp-struct-member-alignment.md) compiler option and the [pack](../preprocessor/pack.md) pragma affect alignment boundaries for members."},{"pos":[2953,3015],"content":"The <ph id=\"ph1\">`sizeof`</ph> operator never yields 0, even for an empty class.","source":"The `sizeof` operator never yields 0, even for an empty class."},{"pos":[3022,3087],"content":"The <ph id=\"ph1\">`sizeof`</ph> operator cannot be used with the following operands:","source":"The `sizeof` operator cannot be used with the following operands:"},{"content":"Functions.","pos":[3097,3107]},{"content":"(However, <ph id=\"ph1\">`sizeof`</ph> can be applied to pointers to functions.)","pos":[3108,3168],"source":" (However, `sizeof` can be applied to pointers to functions.)"},{"content":"Bit fields.","pos":[3178,3189]},{"content":"Undefined classes.","pos":[3199,3217]},{"pos":[3227,3243],"content":"The type <ph id=\"ph1\">`void`</ph>.","source":"The type `void`."},{"content":"Dynamically allocated arrays.","pos":[3253,3282]},{"content":"External arrays.","pos":[3292,3308]},{"content":"Incomplete types.","pos":[3318,3335]},{"content":"Parenthesized names of incomplete types.","pos":[3345,3385]},{"pos":[3392,3522],"content":"When the <ph id=\"ph1\">`sizeof`</ph> operator is applied to a reference, the result is the same as if <ph id=\"ph2\">`sizeof`</ph> had been applied to the object itself.","source":"When the `sizeof` operator is applied to a reference, the result is the same as if `sizeof` had been applied to the object itself."},{"pos":[3529,3659],"content":"If an unsized array is the last element of a structure, the <ph id=\"ph1\">`sizeof`</ph> operator returns the size of the structure without the array.","source":"If an unsized array is the last element of a structure, the `sizeof` operator returns the size of the structure without the array."},{"pos":[3666,3782],"content":"The <ph id=\"ph1\">`sizeof`</ph> operator is often used to calculate the number of elements in an array using an expression of the form:","source":"The `sizeof` operator is often used to calculate the number of elements in an array using an expression of the form:"},{"content":"See Also","pos":[3839,3847]},{"content":"Expressions with Unary Operators","pos":[3852,3884]},{"content":"Keywords","pos":[3935,3943]}],"content":"---\ntitle: \"sizeof Operator | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"sizeof_cpp\"\n  - \"sizeof\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"sizeof operator\"\nms.assetid: 8bc3b6fb-54a1-4eb7-ada0-05f8c5efc532\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# sizeof Operator\nYields the size of its operand with respect to the size of type `char`.  \n  \n> [!NOTE]\n>  For information about the `sizeof ...` operator, see [Ellipses and Variadic Templates](../cpp/ellipses-and-variadic-templates.md).  \n  \n## Syntax  \n  \n```  \nsizeof unary-expression  \nsizeof  ( type-name )  \n```  \n  \n## Remarks  \n The result of the `sizeof` operator is of type `size_t`, an integral type defined in the include file STDDEF.H. This operator allows you to avoid specifying machine-dependent data sizes in your programs.  \n  \n The operand to `sizeof` can be one of the following:  \n  \n-   A type name. To use `sizeof` with a type name, the name must be enclosed in parentheses.  \n  \n-   An expression. When used with an expression, `sizeof` can be specified with or without the parentheses. The expression is not evaluated.  \n  \n When the `sizeof` operator is applied to an object of type `char`, it yields 1. When the `sizeof` operator is applied to an array, it yields the total number of bytes in that array, not the size of the pointer represented by the array identifier. To obtain the size of the pointer represented by the array identifier, pass it as a parameter to a function that uses `sizeof`. For example:  \n  \n## Example  \n  \n```  \n#include <iostream>  \nusing namespace std;  \n  \nsize_t getPtrSize( char *ptr )  \n{  \n   return sizeof( ptr );  \n}  \n  \nint main()  \n{  \n   char szHello[] = \"Hello, world!\";  \n  \n   cout  << \"The size of a char is: \"  \n         << sizeof( char )  \n         << \"\\nThe length of \" << szHello << \" is: \"  \n         << sizeof szHello  \n         << \"\\nThe size of the pointer is \"  \n         << getPtrSize( szHello ) << endl;  \n}  \n```  \n  \n## Sample Output  \n  \n```  \nThe size of a char is: 1  \nThe length of Hello, world! is: 14  \nThe size of the pointer is 4  \n```  \n  \n When the `sizeof` operator is applied to a `class`, `struct`, or `union` type, the result is the number of bytes in an object of that type, plus any padding added to align members on word boundaries. The result does not necessarily correspond to the size calculated by adding the storage requirements of the individual members. The [/Zp](../build/reference/zp-struct-member-alignment.md) compiler option and the [pack](../preprocessor/pack.md) pragma affect alignment boundaries for members.  \n  \n The `sizeof` operator never yields 0, even for an empty class.  \n  \n The `sizeof` operator cannot be used with the following operands:  \n  \n-   Functions. (However, `sizeof` can be applied to pointers to functions.)  \n  \n-   Bit fields.  \n  \n-   Undefined classes.  \n  \n-   The type `void`.  \n  \n-   Dynamically allocated arrays.  \n  \n-   External arrays.  \n  \n-   Incomplete types.  \n  \n-   Parenthesized names of incomplete types.  \n  \n When the `sizeof` operator is applied to a reference, the result is the same as if `sizeof` had been applied to the object itself.  \n  \n If an unsized array is the last element of a structure, the `sizeof` operator returns the size of the structure without the array.  \n  \n The `sizeof` operator is often used to calculate the number of elements in an array using an expression of the form:  \n  \n```  \nsizeof array / sizeof array[0]  \n```  \n  \n## See Also  \n [Expressions with Unary Operators](../cpp/expressions-with-unary-operators.md)   \n [Keywords](../cpp/keywords-cpp.md)"}