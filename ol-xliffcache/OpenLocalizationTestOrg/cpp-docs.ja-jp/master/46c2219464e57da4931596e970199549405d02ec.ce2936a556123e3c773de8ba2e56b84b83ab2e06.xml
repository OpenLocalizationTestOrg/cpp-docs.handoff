{"nodes":[{"pos":[12,52],"content":"DispatchState Structure | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"DispatchState Structure | Microsoft Docs","pos":[0,40]}]},{"pos":[641,664],"content":"DispatchState Structure","linkify":"DispatchState Structure","nodes":[{"content":"DispatchState Structure","pos":[0,23]}]},{"content":"The <ph id=\"ph1\">`DispatchState`</ph> structure is used to transfer state to the <ph id=\"ph2\">`IExecutionContext::Dispatch`</ph> method.","pos":[665,765],"source":"The `DispatchState` structure is used to transfer state to the `IExecutionContext::Dispatch` method."},{"content":"It describes the circumstances under which the <ph id=\"ph1\">`Dispatch`</ph> method is invoked on an <ph id=\"ph2\">`IExecutionContext`</ph> interface.","pos":[766,878],"source":" It describes the circumstances under which the `Dispatch` method is invoked on an `IExecutionContext` interface."},{"pos":[887,893],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[937,944],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[954,973],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[980,984]},{"content":"Description","pos":[985,996]},{"pos":[1034,1083],"content":"<bpt id=\"p1\">[</bpt>DispatchState::DispatchState Constructor<ept id=\"p1\">](#ctor)</ept>","source":"[DispatchState::DispatchState Constructor](#ctor)"},{"pos":[1084,1124],"content":"Constructs a new <ph id=\"ph1\">`DispatchState`</ph> object.","source":"Constructs a new `DispatchState` object."},{"pos":[1135,1154],"content":"Public Data Members","linkify":"Public Data Members","nodes":[{"content":"Public Data Members","pos":[0,19]}]},{"content":"Name","pos":[1161,1165]},{"content":"Description","pos":[1166,1177]},{"pos":[1215,1285],"content":"<bpt id=\"p1\">[</bpt>DispatchState::m_dispatchStateSize Data Member<ept id=\"p1\">](#m_dispatchstatesize)</ept>","source":"[DispatchState::m_dispatchStateSize Data Member](#m_dispatchstatesize)"},{"content":"Size of this structure, which is used for versioning.","pos":[1286,1339]},{"pos":[1344,1458],"content":"<bpt id=\"p1\">[</bpt>DispatchState::m_fIsPreviousContextAsynchronouslyBlocked Data Member<ept id=\"p1\">](#m_fispreviouscontextasynchronouslyblocked)</ept>","source":"[DispatchState::m_fIsPreviousContextAsynchronouslyBlocked Data Member](#m_fispreviouscontextasynchronouslyblocked)"},{"content":"Tells whether this context has entered the <ph id=\"ph1\">`Dispatch`</ph> method because the previous context asynchronously blocked.","pos":[1459,1572],"source":"Tells whether this context has entered the `Dispatch` method because the previous context asynchronously blocked."},{"content":"This is used only on the UMS scheduling context, and is set to the value <ph id=\"ph1\">`0`</ph> for all other execution contexts.","pos":[1573,1683],"source":" This is used only on the UMS scheduling context, and is set to the value `0` for all other execution contexts."},{"pos":[1688,1740],"content":"<bpt id=\"p1\">[</bpt>DispatchState::m_reserved Data Member<ept id=\"p1\">](#m_reserved)</ept>","source":"[DispatchState::m_reserved Data Member](#m_reserved)"},{"content":"Bits reserved for future information passing.","pos":[1741,1786]},{"pos":[1796,1817],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[1845,1857],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1861,1883],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> concrtrm.h","source":"**Header:** concrtrm.h"},{"pos":[1890,1916],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[1926,1987],"content":"<bpt id=\"p1\">&lt;a name=\"ctor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  DispatchState::DispatchState Constructor","linkify":"<a name=\"ctor\"></a>  DispatchState::DispatchState Constructor","source":"<a name=\"ctor\"></a>  DispatchState::DispatchState Constructor"},{"pos":[1991,2031],"content":"Constructs a new <ph id=\"ph1\">`DispatchState`</ph> object.","source":"Constructs a new `DispatchState` object."},{"pos":[2071,2153],"content":"<bpt id=\"p1\">&lt;a name=\"m_dispatchstatesize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  DispatchState::m_dispatchStateSize Data Member","linkify":"<a name=\"m_dispatchstatesize\"></a>  DispatchState::m_dispatchStateSize Data Member","source":"<a name=\"m_dispatchstatesize\"></a>  DispatchState::m_dispatchStateSize Data Member"},{"content":"Size of this structure, which is used for versioning.","pos":[2157,2210]},{"pos":[2268,2394],"content":"<bpt id=\"p1\">&lt;a name=\"m_fispreviouscontextasynchronouslyblocked\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  DispatchState::m_fIsPreviousContextAsynchronouslyBlocked Data Member","linkify":"<a name=\"m_fispreviouscontextasynchronouslyblocked\"></a>  DispatchState::m_fIsPreviousContextAsynchronouslyBlocked Data Member","source":"<a name=\"m_fispreviouscontextasynchronouslyblocked\"></a>  DispatchState::m_fIsPreviousContextAsynchronouslyBlocked Data Member"},{"content":"Tells whether this context has entered the <ph id=\"ph1\">`Dispatch`</ph> method because the previous context asynchronously blocked.","pos":[2398,2511],"source":"Tells whether this context has entered the `Dispatch` method because the previous context asynchronously blocked."},{"content":"This is used only on the UMS scheduling context, and is set to the value <ph id=\"ph1\">`0`</ph> for all other execution contexts.","pos":[2512,2622],"source":" This is used only on the UMS scheduling context, and is set to the value `0` for all other execution contexts."},{"pos":[2705,2769],"content":"<bpt id=\"p1\">&lt;a name=\"m_reserved\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  DispatchState::m_reserved Data Member","linkify":"<a name=\"m_reserved\"></a>  DispatchState::m_reserved Data Member","source":"<a name=\"m_reserved\"></a>  DispatchState::m_reserved Data Member"},{"content":"Bits reserved for future information passing.","pos":[2773,2818]},{"pos":[2870,2878],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2882,2931],"content":"<bpt id=\"p1\">[</bpt>concurrency Namespace<ept id=\"p1\">](concurrency-namespace.md)</ept>","source":"[concurrency Namespace](concurrency-namespace.md)"}],"content":"---\ntitle: \"DispatchState Structure | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"concrtrm/concurrency::DispatchState\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"DispatchState structure\"\nms.assetid: 8c52546e-1650-48a0-985f-7e4a0fc26a90\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# DispatchState Structure\nThe `DispatchState` structure is used to transfer state to the `IExecutionContext::Dispatch` method. It describes the circumstances under which the `Dispatch` method is invoked on an `IExecutionContext` interface.  \n  \n## Syntax  \n  \n```\nstruct DispatchState;\n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[DispatchState::DispatchState Constructor](#ctor)|Constructs a new `DispatchState` object.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[DispatchState::m_dispatchStateSize Data Member](#m_dispatchstatesize)|Size of this structure, which is used for versioning.|  \n|[DispatchState::m_fIsPreviousContextAsynchronouslyBlocked Data Member](#m_fispreviouscontextasynchronouslyblocked)|Tells whether this context has entered the `Dispatch` method because the previous context asynchronously blocked. This is used only on the UMS scheduling context, and is set to the value `0` for all other execution contexts.|  \n|[DispatchState::m_reserved Data Member](#m_reserved)|Bits reserved for future information passing.|  \n  \n## Inheritance Hierarchy  \n `DispatchState`  \n  \n## Requirements  \n **Header:** concrtrm.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"ctor\"></a>  DispatchState::DispatchState Constructor  \n Constructs a new `DispatchState` object.  \n  \n```\nDispatchState();\n```  \n  \n##  <a name=\"m_dispatchstatesize\"></a>  DispatchState::m_dispatchStateSize Data Member  \n Size of this structure, which is used for versioning.  \n  \n```\nunsigned long m_dispatchStateSize;\n```  \n  \n##  <a name=\"m_fispreviouscontextasynchronouslyblocked\"></a>  DispatchState::m_fIsPreviousContextAsynchronouslyBlocked Data Member  \n Tells whether this context has entered the `Dispatch` method because the previous context asynchronously blocked. This is used only on the UMS scheduling context, and is set to the value `0` for all other execution contexts.  \n  \n```\nunsigned int m_fIsPreviousContextAsynchronouslyBlocked : 1;\n```  \n  \n##  <a name=\"m_reserved\"></a>  DispatchState::m_reserved Data Member  \n Bits reserved for future information passing.  \n  \n```\nunsigned int m_reserved : 31;\n```  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)\n"}