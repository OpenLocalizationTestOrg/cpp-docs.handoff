{"nodes":[{"pos":[12,63],"content":"typeid  (C++ Component Extensions) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"typeid  (C++ Component Extensions) | Microsoft Docs","pos":[0,51]}]},{"content":"typeid  (C++ Component Extensions)","pos":[630,664]},{"content":"Gets a value that indicates the type of an object.","pos":[665,715]},{"pos":[723,896],"content":"[!WARNING]\n This topic refers to the C++ Component Extensions version of typeid. For the ISO C++ version of this keyword, see [typeid Operator](../cpp/typeid-operator.md).","leadings":["","> "],"nodes":[{"content":" This topic refers to the C++ Component Extensions version of typeid. For the ISO C++ version of this keyword, see [typeid Operator](../cpp/typeid-operator.md).","pos":[11,171],"nodes":[{"content":"This topic refers to the C++ Component Extensions version of typeid.","pos":[1,69]},{"content":"For the ISO C++ version of this keyword, see <bpt id=\"p1\">[</bpt>typeid Operator<ept id=\"p1\">](../cpp/typeid-operator.md)</ept>.","pos":[70,160],"source":" For the ISO C++ version of this keyword, see [typeid Operator](../cpp/typeid-operator.md)."}]}]},{"content":"All Runtimes","pos":[905,917]},{"content":"Syntax","pos":[927,933]},{"content":"Parameters","pos":[976,986]},{"content":"T","pos":[991,992]},{"content":"A type name.","pos":[997,1009]},{"content":"Windows Runtime","pos":[1018,1033]},{"content":"Syntax","pos":[1043,1049]},{"content":"Parameters","pos":[1113,1123]},{"content":"A type name.","pos":[1134,1146]},{"content":"Remarks","pos":[1156,1163]},{"pos":[1167,1401],"content":"In <ph id=\"ph1\">[!INCLUDE[cppwrt_short](../build/reference/includes/cppwrt_short_md.md)]</ph>,  typeid returns a <bpt id=\"p1\">[</bpt>Platform::Type<ept id=\"p1\">](http://msdn.microsoft.com/Library/d6b03f1e-b240-49b9-a08e-53a460030475)</ept> that is constructed from runtime type information.","source":"In [!INCLUDE[cppwrt_short](../build/reference/includes/cppwrt_short_md.md)],  typeid returns a [Platform::Type](http://msdn.microsoft.com/Library/d6b03f1e-b240-49b9-a08e-53a460030475) that is constructed from runtime type information."},{"content":"Requirements","pos":[1411,1423]},{"pos":[1427,1451],"content":"Compiler option: <bpt id=\"p1\">**</bpt>/ZW<ept id=\"p1\">**</ept>","source":"Compiler option: **/ZW**"},{"content":"Syntax","pos":[1537,1543]},{"content":"Parameters","pos":[1587,1597]},{"content":"type","pos":[1607,1611]},{"content":"The name of a type (abstract declarator) for which you want the System::Type object.","pos":[1616,1700]},{"content":"Remarks","pos":[1709,1716]},{"pos":[1734,1799],"content":"is used to get the &lt;xref:System.Type&gt; for a type at compile time.","source":" is used to get the <xref:System.Type> for a type at compile time."},{"content":"is similar to getting the System::Type for a type at run time using &lt;xref:System.Type.GetType%2A&gt; or &lt;xref:System.Object.GetType%2A&gt;.","pos":[1815,1948],"source":" is similar to getting the System::Type for a type at run time using <xref:System.Type.GetType%2A> or <xref:System.Object.GetType%2A>."},{"content":"However, typeid only accepts a type name as a parameter.","pos":[1949,2005]},{"content":"If you want to use an instance of a type to get its System::Type name, use GetType.","pos":[2007,2090]},{"pos":[2106,2224],"content":"must be able to evaluate a type name (type) at compile time, whereas GetType evaluates the type to return at run time."},{"pos":[2240,2482],"content":"can take a native type name or common language runtime alias for the native type name; see <bpt id=\"p1\">[</bpt>.NET Framework Equivalents to C++ Native Types (C++/CLI)<ept id=\"p1\">](../dotnet/dotnet-framework-equivalents-to-cpp-native-types-cpp-cli.md)</ept> for more information.","source":" can take a native type name or common language runtime alias for the native type name; see [.NET Framework Equivalents to C++ Native Types (C++/CLI)](../dotnet/dotnet-framework-equivalents-to-cpp-native-types-cpp-cli.md) for more information."},{"content":"also works with native types, although it will still return a System::Type.","pos":[2498,2573]},{"content":"To get a type_info structure, use <bpt id=\"p1\">[</bpt>typeid Operator<ept id=\"p1\">](../cpp/typeid-operator.md)</ept>.","pos":[2575,2654],"source":"  To get a type_info structure, use [typeid Operator](../cpp/typeid-operator.md)."},{"content":"Requirements","pos":[2664,2676]},{"pos":[2680,2705],"content":"Compiler option: <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept>","source":"Compiler option: **/clr**"},{"content":"Examples","pos":[2715,2723]},{"content":"Example","pos":[2729,2736]},{"content":"The following example compares the typeid keyword to the GetType() member.","pos":[2745,2819]},{"content":"Output","pos":[3289,3295]},{"content":"Example","pos":[3406,3413]},{"content":"The following sample shows that a variable of type System::Type can be used to get the attributes on a type.","pos":[3422,3530]},{"content":"It also shows that for some types, you will have to create a typedef to use <ph id=\"ph1\">`typeid`</ph>.","pos":[3532,3617],"source":"  It also shows that for some types, you will have to create a typedef to use `typeid`."},{"content":"Output","pos":[4952,4958]},{"content":"See Also","pos":[5235,5243]},{"content":"Component Extensions for Runtime Platforms","pos":[5248,5290]}],"content":"---\ntitle: \"typeid  (C++ Component Extensions) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"typeid keyword [C++]\"\nms.assetid: e9706cae-e7c4-4d6d-b474-646d73df3e70\ncaps.latest.revision: 35\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# typeid  (C++ Component Extensions)\nGets a value that indicates the type of an object.  \n  \n> [!WARNING]\n>  This topic refers to the C++ Component Extensions version of typeid. For the ISO C++ version of this keyword, see [typeid Operator](../cpp/typeid-operator.md).  \n  \n## All Runtimes  \n  \n### Syntax  \n  \n```cpp  \n  \nT::typeid  \n```  \n  \n### Parameters  \n *T*  \n A type name.  \n  \n## Windows Runtime  \n  \n### Syntax  \n  \n```cpp  \nPlatform::Type^ type = T::typeid;  \n```  \n  \n### Parameters  \n `T`  \n A type name.  \n  \n### Remarks  \n In [!INCLUDE[cppwrt_short](../build/reference/includes/cppwrt_short_md.md)],  typeid returns a [Platform::Type](http://msdn.microsoft.com/Library/d6b03f1e-b240-49b9-a08e-53a460030475) that is constructed from runtime type information.  \n  \n### Requirements  \n Compiler option: **/ZW**  \n  \n## [!INCLUDE[clr_for_headings](../dotnet/includes/clr_for_headings_md.md)]  \n **Syntax**  \n  \n```  \n  \ntype::typeid  \n```  \n  \n **Parameters**  \n  \n *type*  \n The name of a type (abstract declarator) for which you want the System::Type object.  \n  \n **Remarks**  \n  \n `typeid` is used to get the <xref:System.Type> for a type at compile time.  \n  \n `typeid` is similar to getting the System::Type for a type at run time using <xref:System.Type.GetType%2A> or <xref:System.Object.GetType%2A>. However, typeid only accepts a type name as a parameter.  If you want to use an instance of a type to get its System::Type name, use GetType.  \n  \n `typeid` must be able to evaluate a type name (type) at compile time, whereas GetType evaluates the type to return at run time.  \n  \n `typeid` can take a native type name or common language runtime alias for the native type name; see [.NET Framework Equivalents to C++ Native Types (C++/CLI)](../dotnet/dotnet-framework-equivalents-to-cpp-native-types-cpp-cli.md) for more information.  \n  \n `typeid` also works with native types, although it will still return a System::Type.  To get a type_info structure, use [typeid Operator](../cpp/typeid-operator.md).  \n  \n### Requirements  \n Compiler option: **/clr**  \n  \n### Examples  \n **Example**  \n  \n The following example compares the typeid keyword to the GetType() member.  \n  \n```  \n// keyword__typeid.cpp  \n// compile with: /clr  \nusing namespace System;  \n  \nref struct G {  \n   int i;  \n};  \n  \nint main() {  \n   G ^ pG = gcnew G;  \n   Type ^ pType = pG->GetType();  \n   Type ^ pType2 = G::typeid;  \n  \n   if (pType == pType2)  \n      Console::WriteLine(\"typeid and GetType returned the same System::Type\");  \n   Console::WriteLine(G::typeid);  \n  \n   typedef float* FloatPtr;  \n   Console::WriteLine(FloatPtr::typeid);  \n}  \n```  \n  \n **Output**  \n  \n```Output  \ntypeid and GetType returned the same System::Type  \nG  \n  \nSystem.Single*  \n  \n```  \n  \n **Example**  \n  \n The following sample shows that a variable of type System::Type can be used to get the attributes on a type.  It also shows that for some types, you will have to create a typedef to use `typeid`.  \n  \n```  \n// keyword__typeid_2.cpp  \n// compile with: /clr  \nusing namespace System;  \nusing namespace System::Security;  \nusing namespace System::Security::Permissions;  \n  \ntypedef int ^ handle_to_int;  \ntypedef int * pointer_to_int;  \n  \npublic ref class MyClass {};  \n  \nclass MyClass2 {};  \n  \n[attribute(AttributeTargets::All)]  \nref class AtClass {  \npublic:  \n   AtClass(Type ^) {  \n      Console::WriteLine(\"in AtClass Type ^ constructor\");  \n   }  \n};  \n  \n[attribute(AttributeTargets::All)]  \nref class AtClass2 {  \npublic:  \n   AtClass2() {  \n      Console::WriteLine(\"in AtClass2 constructor\");  \n   }  \n};  \n  \n// Apply the AtClass and AtClass2 attributes to class B  \n[AtClass(MyClass::typeid), AtClass2]     \n[AttributeUsage(AttributeTargets::All)]  \nref class B : Attribute {};  \n  \nint main() {  \n   Type ^ MyType = B::typeid;  \n  \n   Console::WriteLine(MyType->IsClass);  \n  \n   array<Object^>^ MyArray = MyType -> GetCustomAttributes(true);  \n   for (int i = 0 ; i < MyArray->Length ; i++ )  \n      Console::WriteLine(MyArray[i]);  \n  \n   if (int::typeid != pointer_to_int::typeid)  \n      Console::WriteLine(\"int::typeid != pointer_to_int::typeid, as expected\");  \n  \n   if (int::typeid == handle_to_int::typeid)  \n      Console::WriteLine(\"int::typeid == handle_to_int::typeid, as expected\");  \n}  \n```  \n  \n **Output**  \n  \n```Output  \nTrue  \n  \nin AtClass2 constructor  \n  \nin AtClass Type ^ constructor  \n  \nAtClass2  \n  \nSystem.AttributeUsageAttribute  \n  \nAtClass  \n  \nint::typeid != pointer_to_int::typeid, as expected  \n  \nint::typeid == handle_to_int::typeid, as expected  \n```  \n  \n## See Also  \n [Component Extensions for Runtime Platforms](../windows/component-extensions-for-runtime-platforms.md)"}