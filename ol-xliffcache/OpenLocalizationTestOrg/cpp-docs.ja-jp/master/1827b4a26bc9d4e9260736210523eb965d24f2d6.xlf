<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1827b4a26bc9d4e9260736210523eb965d24f2d6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl-mfc-shared\reference\crect-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2e110d8a801e8983fb510526e9cdf501c038d2be</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">54acf925ed1f1d266950c53d0b4dbe8730f61aea</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CRect Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CRect Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Similar to a Windows <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CRect::CRect</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CRect`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CRect::BottomRight</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Returns the bottom-right point of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CRect::CenterPoint</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Returns the centerpoint of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CRect::CopyRect</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Copies the dimensions of a source rectangle to <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CRect::DeflateRect</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Decreases the width and height of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CRect::EqualRect</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Determines whether <ph id="ph1">`CRect`</ph> is equal to the given rectangle.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CRect::Height</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Calculates the height of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CRect::InflateRect</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Increases the width and height of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CRect::IntersectRect</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Sets <ph id="ph1">`CRect`</ph> equal to the intersection of two rectangles.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CRect::IsRectEmpty</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Determines whether <ph id="ph1">`CRect`</ph> is empty.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>is empty if the width and/or height are 0.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>CRect::IsRectNull</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Determines whether the <bpt id="p1">**</bpt>top<ept id="p1">**</ept>, <bpt id="p2">**</bpt>bottom<ept id="p2">**</ept>, <bpt id="p3">**</bpt>left<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>right<ept id="p4">**</ept> member variables are all equal to 0.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>CRect::MoveToX</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Moves <ph id="ph1">`CRect`</ph> to the specified x-coordinate.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>CRect::MoveToXY</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Moves <ph id="ph1">`CRect`</ph> to the specified x- and y-coordinates.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>CRect::MoveToY</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Moves <ph id="ph1">`CRect`</ph> to the specified y-coordinate.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>CRect::NormalizeRect</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Standardizes the height and width of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>CRect::OffsetRect</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Moves <ph id="ph1">`CRect`</ph> by the specified offsets.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>CRect::PtInRect</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Determines whether the specified point lies within <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>CRect::SetRect</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Sets the dimensions of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>CRect::SetRectEmpty</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Sets <ph id="ph1">`CRect`</ph> to an empty rectangle (all coordinates equal to 0).</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>CRect::Size</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Calculates the size of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>CRect::SubtractRect</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Subtracts one rectangle from another.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>CRect::TopLeft</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Returns the top-left point of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>CRect::UnionRect</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Sets <ph id="ph1">`CRect`</ph> equal to the union of two rectangles.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>CRect::Width</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Calculates the width of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>CRect::operator -</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Subtracts the given offsets from <ph id="ph1">`CRect`</ph> or deflates <ph id="ph2">`CRect`</ph> and returns the resulting <ph id="ph3">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>CRect::operator LPCRECT</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Converts a <ph id="ph1">`CRect`</ph> to an <bpt id="p1">**</bpt>LPCRECT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>CRect::operator LPRECT</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Converts a <ph id="ph1">`CRect`</ph> to an <ph id="ph2">`LPRECT`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>CRect::operator !=</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Determines whether <ph id="ph1">`CRect`</ph> is not equal to a rectangle.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>CRect::operator</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Creates the intersection of <ph id="ph1">`CRect`</ph> and a rectangle and returns the resulting <ph id="ph2">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>CRect::operator</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Sets <ph id="ph1">`CRect`</ph> equal to the intersection of <ph id="ph2">`CRect`</ph> and a rectangle.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>[CRect::operator</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>](#crect__operator__or)</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Creates the union of <ph id="ph1">`CRect`</ph> and a rectangle and returns the resulting <ph id="ph2">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>[CRect::operator</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>=](#crect__operator__or_eq)</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Sets <ph id="ph1">`CRect`</ph> equal to the union of <ph id="ph2">`CRect`</ph> and a rectangle.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>CRect::operator +</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Adds the given offsets to <ph id="ph1">`CRect`</ph> or inflates <ph id="ph2">`CRect`</ph> and returns the resulting <ph id="ph3">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>CRect::operator +=</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Adds the specified offsets to <ph id="ph1">`CRect`</ph> or inflates <ph id="ph2">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>CRect::operator =</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Copies the dimensions of a rectangle to <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>CRect::operator -=</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Subtracts the specified offsets from <ph id="ph1">`CRect`</ph> or deflates <ph id="ph2">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>CRect::operator ==</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Determines whether <ph id="ph1">`CRect`</ph> is equal to a rectangle.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>also includes member functions to manipulate <ph id="ph1">`CRect`</ph> objects and Windows <ph id="ph2">`RECT`</ph> structures.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CRect`</ph> object can be passed as a function parameter wherever a <ph id="ph2">`RECT`</ph> structure, <bpt id="p1">**</bpt>LPCRECT<ept id="p1">**</ept>, or <ph id="ph3">`LPRECT`</ph> can be passed.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This class is derived from the <bpt id="p1">**</bpt>tagRECT<ept id="p1">**</ept> structure.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>(The name <bpt id="p1">**</bpt>tagRECT<ept id="p1">**</ept> is a less-commonly-used name for the <ph id="ph1">`RECT`</ph> structure.) This means that the data members ( <bpt id="p2">**</bpt>left<ept id="p2">**</ept>, <bpt id="p3">**</bpt>top<ept id="p3">**</ept>, <bpt id="p4">**</bpt>right<ept id="p4">**</ept>, and <bpt id="p5">**</bpt>bottom<ept id="p5">**</ept>) of the <ph id="ph2">`RECT`</ph> structure are accessible data members of <ph id="ph3">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CRect`</ph> contains member variables that define the top-left and bottom-right points of a rectangle.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>When specifying a <ph id="ph1">`CRect`</ph>, you must be careful to construct it so that it is normalized — in other words, such that the value of the left coordinate is less than the right and the top is less than the bottom.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For example, a top left of (10,10) and bottom right of (20,20) defines a normalized rectangle but a top left of (20,20) and bottom right of (10,10) defines a non-normalized rectangle.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>If the rectangle is not normalized, many <ph id="ph1">`CRect`</ph> member functions may return incorrect results.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>CRect::NormalizeRect<ept id="p1">](#crect__normalizerect)</ept> for a list of these functions.) Before you call a function that requires normalized rectangles, you can normalize non-normalized rectangles by calling the <ph id="ph1">`NormalizeRect`</ph> function.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Use caution when manipulating a <ph id="ph1">`CRect`</ph> with the <bpt id="p1">[</bpt>CDC::DPtoLP<ept id="p1">](../../mfc/reference/cdc-class.md#cdc__dptolp)</ept> and <bpt id="p2">[</bpt>CDC::LPtoDP<ept id="p2">](../../mfc/reference/cdc-class.md#cdc__lptodp)</ept> member functions.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>If the mapping mode of a display context is such that the y-extent is negative, as in <ph id="ph1">`MM_LOENGLISH`</ph>, then <ph id="ph2">`CDC::DPtoLP`</ph> will transform the <ph id="ph3">`CRect`</ph> so that its top is greater than the bottom.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Functions such as <bpt id="p1">**</bpt>Height<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Size<ept id="p2">**</ept> will then return negative values for the height of the transformed <ph id="ph1">`CRect`</ph>, and the rectangle will be non-normalized.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>When using overloaded <ph id="ph1">`CRect`</ph> operators, the first operand must be a <ph id="ph2">`CRect`</ph>; the second can be either a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure or a <ph id="ph3">`CRect`</ph> object.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atltypes.h</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>CRect::BottomRight</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The coordinates are returned as a reference to a <bpt id="p1">[</bpt>CPoint<ept id="p1">](cpoint-class.md)</ept> object that is contained in <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The coordinates of the bottom-right corner of the rectangle.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>You can use this function to either get or set the bottom-right corner of the rectangle.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Set the corner by using this function on the left side of the assignment operator.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>CRect::CenterPoint</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Calculates the centerpoint of <ph id="ph1">`CRect`</ph> by adding the left and right values and dividing by two, and adding the top and bottom values and dividing by two.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CPoint`</ph> object that is the centerpoint of <ph id="ph2">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>CRect::CopyRect</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Copies the <ph id="ph1">`lpSrcRect`</ph> rectangle into <ph id="ph2">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Points to the <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure or <ph id="ph1">`CRect`</ph> object that is to be copied.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>CRect::CRect</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CRect`</ph> object.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>l</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Specifies the left position of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>t</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Specifies the top of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>r</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Specifies the right position of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>b</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Specifies the bottom of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>srcRect</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Refers to the <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure with the coordinates for <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Points to the <ph id="ph1">`RECT`</ph> structure with the coordinates for <ph id="ph2">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Specifies the origin point for the rectangle to be constructed.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Corresponds to the top-left corner.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Specifies the displacement from the top-left corner to the bottom-right corner of the rectangle to be constructed.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>topLeft</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Specifies the top-left position of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>bottomRight</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Specifies the bottom-right position of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>If no arguments are given, <bpt id="p1">**</bpt>left<ept id="p1">**</ept>, <bpt id="p2">**</bpt>top<ept id="p2">**</ept>, <bpt id="p3">**</bpt>right<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>bottom<ept id="p4">**</ept> members are not initialized.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CRect`</ph>( <bpt id="p1">**</bpt>const RECT&amp;<ept id="p1">**</ept>) and <ph id="ph2">`CRect`</ph>( <bpt id="p2">**</bpt>LPCRECT<ept id="p2">**</ept>) constructors perform a <bpt id="p3">[</bpt>CopyRect<ept id="p3">](#crect__copyrect)</ept>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The other constructors initialize the member variables of the object directly.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>CRect::DeflateRect</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>deflates <ph id="ph1">`CRect`</ph> by moving its sides toward its center.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>x</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Specifies the number of units to deflate the left and right sides of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>y</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Specifies the number of units to deflate the top and bottom of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>SIZE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> or <bpt id="p2">[</bpt>CSize<ept id="p2">](csize-class.md)</ept> that specifies the number of units to deflate <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`cx`</ph> value specifies the number of units to deflate the left and right sides and the <ph id="ph2">`cy`</ph> value specifies the number of units to deflate the top and bottom.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure or <ph id="ph1">`CRect`</ph> that specifies the number of units to deflate each side.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>l</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Specifies the number of units to deflate the left side of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>t</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Specifies the number of units to deflate the top of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>r</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Specifies the number of units to deflate the right side of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>b</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Specifies the number of units to deflate the bottom of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>To do this, <ph id="ph1">`DeflateRect`</ph> adds units to the left and top and subtracts units from the right and bottom.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The parameters of <ph id="ph1">`DeflateRect`</ph> are signed values; positive values deflate <ph id="ph2">`CRect`</ph> and negative values inflate it.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The first two overloads deflate both pairs of opposite sides of <ph id="ph1">`CRect`</ph> so that its total width is decreased by two times <bpt id="p1">*</bpt>x<ept id="p1">*</ept> (or <ph id="ph2">`cx`</ph>) and its total height is decreased by two times <bpt id="p2">*</bpt>y<ept id="p2">*</ept> (or <ph id="ph3">`cy`</ph>).</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The other two overloads deflate each side of <ph id="ph1">`CRect`</ph> independently of the others.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>CRect::EqualRect</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Determines whether <ph id="ph1">`CRect`</ph> is equal to the given rectangle.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure or <ph id="ph1">`CRect`</ph> object that contains the upper-left and lower-right corner coordinates of a rectangle.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Nonzero if the two rectangles have the same top, left, bottom, and right values; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Both of the rectangles must be normalized or this function may fail.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>You can call <bpt id="p1">[</bpt>NormalizeRect<ept id="p1">](#crect__normalizerect)</ept> to normalize the rectangles before calling this function.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>CRect::Height</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Calculates the height of <ph id="ph1">`CRect`</ph> by subtracting the top value from the bottom value.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The height of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The resulting value can be negative.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The rectangle must be normalized or this function may fail.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>You can call <bpt id="p1">[</bpt>NormalizeRect<ept id="p1">](#crect__normalizerect)</ept> to normalize the rectangle before calling this function.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>CRect::InflateRect</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>inflates <ph id="ph1">`CRect`</ph> by moving its sides away from its center.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>x</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Specifies the number of units to inflate the left and right sides of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>y</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Specifies the number of units to inflate the top and bottom of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>SIZE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> or <bpt id="p2">[</bpt>CSize<ept id="p2">](csize-class.md)</ept> that specifies the number of units to inflate <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`cx`</ph> value specifies the number of units to inflate the left and right sides and the <ph id="ph2">`cy`</ph> value specifies the number of units to inflate the top and bottom.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure or <ph id="ph1">`CRect`</ph> that specifies the number of units to inflate each side.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>l</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Specifies the number of units to inflate the left side of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>t</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Specifies the number of units to inflate the top of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>r</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Specifies the number of units to inflate the right side of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>b</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Specifies the number of units to inflate the bottom of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>To do this, <ph id="ph1">`InflateRect`</ph> subtracts units from the left and top and adds units to the right and bottom.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The parameters of <ph id="ph1">`InflateRect`</ph> are signed values; positive values inflate <ph id="ph2">`CRect`</ph> and negative values deflate it.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The first two overloads inflate both pairs of opposite sides of <ph id="ph1">`CRect`</ph> so that its total width is increased by two times <bpt id="p1">*</bpt>x<ept id="p1">*</ept> (or <ph id="ph2">`cx`</ph>) and its total height is increased by two times <bpt id="p2">*</bpt>y<ept id="p2">*</ept> (or <ph id="ph3">`cy`</ph>).</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The other two overloads inflate each side of <ph id="ph1">`CRect`</ph> independently of the others.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>CRect::IntersectRect</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Makes a <ph id="ph1">`CRect`</ph> equal to the intersection of two existing rectangles.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure or <ph id="ph1">`CRect`</ph> object that contains a source rectangle.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`RECT`</ph> structure or <ph id="ph2">`CRect`</ph> object that contains a source rectangle.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Nonzero if the intersection is not empty; 0 if the intersection is empty.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The intersection is the largest rectangle contained in both existing rectangles.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Both of the rectangles must be normalized or this function may fail.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>You can call <bpt id="p1">[</bpt>NormalizeRect<ept id="p1">](#crect__normalizerect)</ept> to normalize the rectangles before calling this function.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>CRect::IsRectEmpty</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Determines whether <ph id="ph1">`CRect`</ph> is empty.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Nonzero if <ph id="ph1">`CRect`</ph> is empty; 0 if <ph id="ph2">`CRect`</ph> is not empty.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>A rectangle is empty if the width and/or height are 0 or negative.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Differs from <ph id="ph1">`IsRectNull`</ph>, which determines whether all coordinates of the rectangle are zero.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The rectangle must be normalized or this function may fail.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>You can call <bpt id="p1">[</bpt>NormalizeRect<ept id="p1">](#crect__normalizerect)</ept> to normalize the rectangle before calling this function.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>CRect::IsRectNull</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Determines whether the top, left, bottom, and right values of <ph id="ph1">`CRect`</ph> are all equal to 0.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Nonzero if <ph id="ph1">`CRect`</ph>'s top, left, bottom, and right values are all equal to 0; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Differs from <ph id="ph1">`IsRectEmpty`</ph>, which determines whether the rectangle is empty.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>CRect::MoveToX</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Call this function to move the rectangle to the absolute x-coordinate specified by <bpt id="p1">*</bpt>x<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>x</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>The absolute x-coordinate for the upper-left corner of the rectangle.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>CRect::MoveToXY</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Call this function to move the rectangle to the absolute x- and y-coordinates specified.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>x</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>The absolute x-coordinate for the upper-left corner of the rectangle.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>y</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The absolute y-coordinate for the upper-left corner of the rectangle.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> structure specifying the absolute upper-left corner of the rectangle.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>CRect::MoveToY</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Call this function to move the rectangle to the absolute y-coordinate specified by <bpt id="p1">*</bpt>y<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>y</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The absolute y-coordinate for the upper-left corner of the rectangle.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>CRect::NormalizeRect</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Normalizes <ph id="ph1">`CRect`</ph> so that both the height and width are positive.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>The rectangle is normalized for fourth-quadrant positioning, which Windows typically uses for coordinates.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>compares the top and bottom values, and swaps them if the top is greater than the bottom.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Similarly, it swaps the left and right values if the left is greater than the right.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>This function is useful when dealing with different mapping modes and inverted rectangles.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>The following <ph id="ph1">`CRect`</ph> member functions require normalized rectangles in order to work properly: <bpt id="p1">[</bpt>Height<ept id="p1">](#crect__height)</ept>, <bpt id="p2">[</bpt>Width<ept id="p2">](#crect__width)</ept>, <bpt id="p3">[</bpt>Size<ept id="p3">](#crect__size)</ept>, <bpt id="p4">[</bpt>IsRectEmpty<ept id="p4">](#crect__isrectempty)</ept>, <bpt id="p5">[</bpt>PtInRect<ept id="p5">](#crect__ptinrect)</ept>, <bpt id="p6">[</bpt>EqualRect<ept id="p6">](#crect__equalrect)</ept>, <bpt id="p7">[</bpt>UnionRect<ept id="p7">](#crect__unionrect)</ept>, <bpt id="p8">[</bpt>IntersectRect<ept id="p8">](#crect__intersectrect)</ept>, <bpt id="p9">[</bpt>SubtractRect<ept id="p9">](#crect__subtractrect)</ept>, <bpt id="p10">[</bpt>operator ==<ept id="p10">](#crect__operator__eq_eq)</ept>, <bpt id="p11">[</bpt>operator !=<ept id="p11">](#crect__operator__neq)</ept>, <bpt id="p12">[</bpt>operator &amp;#124;<ept id="p12">](#crect__operator__or)</ept>, <bpt id="p13">[</bpt>operator &amp;#124;=<ept id="p13">](#crect__operator__or_eq)</ept>, <bpt id="p14">[</bpt>operator &amp;<ept id="p14">](#crect__operator__amp_)</ept>, and <bpt id="p15">[</bpt>operator &amp;=<ept id="p15">](#crect__operator__amp__eq)</ept>.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>CRect::OffsetRect</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Moves <ph id="ph1">`CRect`</ph> by the specified offsets.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>x</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Specifies the amount to move left or right.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>It must be negative to move left.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>y</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Specifies the amount to move up or down.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>It must be negative to move up.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Contains a <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> structure or <bpt id="p2">[</bpt>CPoint<ept id="p2">](cpoint-class.md)</ept> object specifying both dimensions by which to move.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Contains a <bpt id="p1">[</bpt>SIZE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure or <bpt id="p2">[</bpt>CSize<ept id="p2">](csize-class.md)</ept> object specifying both dimensions by which to move.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Moves <ph id="ph1">`CRect`</ph><bpt id="p1">*</bpt>x<ept id="p1">*</ept> units along the x-axis and <bpt id="p2">*</bpt>y<ept id="p2">*</ept> units along the y-axis.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>x<ept id="p1">*</ept> and <bpt id="p2">*</bpt>y<ept id="p2">*</ept> parameters are signed values, so <ph id="ph1">`CRect`</ph> can be moved left or right and up or down.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>CRect::operator LPCRECT</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Converts a <ph id="ph1">`CRect`</ph> to an <bpt id="p1">[</bpt>LPCRECT<ept id="p1">](../../mfc/reference/data-types-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>```  operator LPCRECT() const throw();</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>When you use this function, you don't need the address-of ( <bpt id="p1">**</bpt><ph id="ph1">&amp;</ph><ept id="p1">**</ept>) operator.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>This operator will be automatically used when you pass a <ph id="ph1">`CRect`</ph> object to a function that expects an <ph id="ph2">`LPRECT`</ph>.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CRect::operator LPCRECT<ept id="p1">](#crect__operator_lpcrect)</ept>.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>CRect::operator =</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Assigns <bpt id="p1">*</bpt>srcRect<ept id="p1">*</ept> to <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>srcRect</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Refers to a source rectangle.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Can be a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> or <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>CRect::operator ==</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Determines whether <ph id="ph1">`rect`</ph> is equal to <ph id="ph2">`CRect`</ph> by comparing the coordinates of their upper-left and lower-right corners.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Refers to a source rectangle.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Can be a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> or <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Nonzero if equal; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Both of the rectangles must be normalized or this function may fail.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>You can call <bpt id="p1">[</bpt>NormalizeRect<ept id="p1">](#crect__normalizerect)</ept> to normalize the rectangles before calling this function.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>CRect::operator !=</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Determines whether <ph id="ph1">`rect`</ph> is not equal to <ph id="ph2">`CRect`</ph> by comparing the coordinates of their upper-left and lower-right corners.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Refers to a source rectangle.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Can be a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> or <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Nonzero if not equal; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Both of the rectangles must be normalized or this function may fail.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>You can call <bpt id="p1">[</bpt>NormalizeRect<ept id="p1">](#crect__normalizerect)</ept> to normalize the rectangles before calling this function.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>CRect::operator +=</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>The first two overloads move <ph id="ph1">`CRect`</ph> by the specified offsets.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> structure or <bpt id="p2">[</bpt>CPoint<ept id="p2">](cpoint-class.md)</ept> object that specifies the number of units to move the rectangle.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>SIZE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure or <bpt id="p2">[</bpt>CSize<ept id="p2">](csize-class.md)</ept> object that specifies the number of units to move the rectangle.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure or <ph id="ph1">`CRect`</ph> object that contains the number of units to inflate each side of <ph id="ph2">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>The parameter's <bpt id="p1">*</bpt>x<ept id="p1">*</ept> and <bpt id="p2">*</bpt>y<ept id="p2">*</ept> (or <ph id="ph1">`cx`</ph> and <ph id="ph2">`cy`</ph>) values are added to <ph id="ph3">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>The third overload inflates <ph id="ph1">`CRect`</ph> by the number of units specifed in each member of the parameter.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>CRect::operator -=</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>The first two overloads move <ph id="ph1">`CRect`</ph> by the specified offsets.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> structure or <bpt id="p2">[</bpt>CPoint<ept id="p2">](cpoint-class.md)</ept> object that specifies the number of units to move the rectangle.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>SIZE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure or <bpt id="p2">[</bpt>CSize<ept id="p2">](csize-class.md)</ept> object that specifies the number of units to move the rectangle.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure or <ph id="ph1">`CRect`</ph> object that contains the number of units to deflate each side of <ph id="ph2">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>The parameter's <bpt id="p1">*</bpt>x<ept id="p1">*</ept> and <bpt id="p2">*</bpt>y<ept id="p2">*</ept> (or <ph id="ph1">`cx`</ph> and <ph id="ph2">`cy`</ph>) values are subtracted from <ph id="ph3">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>The third overload deflates <ph id="ph1">`CRect`</ph> by the number of units specifed in each member of the parameter.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Note that this overload functions like <bpt id="p1">[</bpt>DeflateRect<ept id="p1">](#crect__deflaterect)</ept>.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>CRect::operator</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Sets <ph id="ph1">`CRect`</ph> equal to the intersection of <ph id="ph2">`CRect`</ph> and <ph id="ph3">`rect`</ph>.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Contains a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> or <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>The intersection is the largest rectangle that is contained in both rectangles.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Both of the rectangles must be normalized or this function may fail.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>You can call <bpt id="p1">[</bpt>NormalizeRect<ept id="p1">](#crect__normalizerect)</ept> to normalize the rectangles before calling this function.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CRect::IntersectRect<ept id="p1">](#crect__intersectrect)</ept>.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>CRect::operator &amp;#124;=</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Sets <ph id="ph1">`CRect`</ph> equal to the union of <ph id="ph2">`CRect`</ph> and <ph id="ph3">`rect`</ph>.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Contains a <ph id="ph1">`CRect`</ph> or <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>The union is the smallest rectangle that contains both source rectangles.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Both of the rectangles must be normalized or this function may fail.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>You can call <bpt id="p1">[</bpt>NormalizeRect<ept id="p1">](#crect__normalizerect)</ept> to normalize the rectangles before calling this function.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>CRect::operator +</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>The first two overloads return a <ph id="ph1">`CRect`</ph> object that is equal to <ph id="ph2">`CRect`</ph> displaced by the specified offsets.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> structure or <bpt id="p2">[</bpt>CPoint<ept id="p2">](cpoint-class.md)</ept> object that specifies the number of units to move the return value.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>SIZE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure or <bpt id="p2">[</bpt>CSize<ept id="p2">](csize-class.md)</ept> object that specifies the number of units to move the return value.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure or <ph id="ph1">`CRect`</ph> object that contains the number of units to inflate each side of the return value.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CRect`</ph> resulting from moving or inflating <ph id="ph2">`CRect`</ph> by the number of units specified in the parameter.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>The parameter's <bpt id="p1">*</bpt>x<ept id="p1">*</ept> and <bpt id="p2">*</bpt>y<ept id="p2">*</ept> (or <ph id="ph1">`cx`</ph> and <ph id="ph2">`cy`</ph>) parameters are added to <ph id="ph3">`CRect`</ph>'s position.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>The third overload returns a new <ph id="ph1">`CRect`</ph> that is equal to <ph id="ph2">`CRect`</ph> inflated by the number of units specifed in each member of the parameter.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>CRect::operator -</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>The first two overloads return a <ph id="ph1">`CRect`</ph> object that is equal to <ph id="ph2">`CRect`</ph> displaced by the specified offsets.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> structure or <ph id="ph1">`CPoint`</ph> object that specifies the number of units to move the return value.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>SIZE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure or <ph id="ph1">`CSize`</ph> object that specifies the number of units to move the return value.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure or <ph id="ph1">`CRect`</ph> object that contains the number of units to deflate each side of the return value.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CRect`</ph> resulting from moving or deflating <ph id="ph2">`CRect`</ph> by the number of units specified in the parameter.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>The parameter's <bpt id="p1">*</bpt>x<ept id="p1">*</ept> and <bpt id="p2">*</bpt>y<ept id="p2">*</ept> (or <ph id="ph1">`cx`</ph> and <ph id="ph2">`cy`</ph>) parameters are subtracted from <ph id="ph3">`CRect`</ph>'s position.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>The third overload returns a new <ph id="ph1">`CRect`</ph> that is equal to <ph id="ph2">`CRect`</ph> deflated by the number of units specifed in each member of the parameter.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Note that this overload functions like <bpt id="p1">[</bpt>DeflateRect<ept id="p1">](#crect__deflaterect)</ept>, not <bpt id="p2">[</bpt>SubtractRect<ept id="p2">](#crect__subtractrect)</ept>.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>CRect::operator</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`CRect`</ph> that is the intersection of <ph id="ph2">`CRect`</ph> and <bpt id="p1">*</bpt>rect2<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>rect2</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Contains a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> or <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CRect`</ph> that is the intersection of <ph id="ph2">`CRect`</ph> and <bpt id="p1">*</bpt>rect2<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>The intersection is the largest rectangle that is contained in both rectangles.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Both of the rectangles must be normalized or this function may fail.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>You can call <bpt id="p1">[</bpt>NormalizeRect<ept id="p1">](#crect__normalizerect)</ept> to normalize the rectangles before calling this function.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>CRect::operator &amp;#124;</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`CRect`</ph> that is the union of <ph id="ph2">`CRect`</ph> and <bpt id="p1">*</bpt>rect2<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>rect2</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Contains a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> or <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CRect`</ph> that is the union of <ph id="ph2">`CRect`</ph> and <bpt id="p1">*</bpt>rect2<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>The union is the smallest rectangle that contains both rectangles.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>Both of the rectangles must be normalized or this function may fail.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>You can call <bpt id="p1">[</bpt>NormalizeRect<ept id="p1">](#crect__normalizerect)</ept> to normalize the rectangles before calling this function.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>CRect::PtInRect</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Determines whether the specified point lies within <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>Contains a <bpt id="p1">[</bpt>POINT<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> structure or <bpt id="p2">[</bpt>CPoint<ept id="p2">](cpoint-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Nonzero if the point lies within <ph id="ph1">`CRect`</ph>; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>A point is within <ph id="ph1">`CRect`</ph> if it lies on the left or top side or is within all four sides.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>A point on the right or bottom side is outside <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>The rectangle must be normalized or this function may fail.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>You can call <bpt id="p1">[</bpt>NormalizeRect<ept id="p1">](#crect__normalizerect)</ept> to normalize the rectangle before calling this function.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>CRect::SetRect</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Sets the dimensions of <ph id="ph1">`CRect`</ph> to the specified coordinates.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate of the upper-left corner.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate of the upper-left corner.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate of the lower-right corner.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate of the lower-right corner.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>CRect::SetRectEmpty</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Makes <ph id="ph1">`CRect`</ph> a null rectangle by setting all coordinates to zero.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>CRect::Size</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`cx`</ph> and <ph id="ph2">`cy`</ph> members of the return value contain the height and width of <ph id="ph3">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CSize<ept id="p1">](csize-class.md)</ept> object that contains the size of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Either the height or width can be negative.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>The rectangle must be normalized or this function may fail.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>You can call <bpt id="p1">[</bpt>NormalizeRect<ept id="p1">](#crect__normalizerect)</ept> to normalize the rectangle before calling this function.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>master</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>CRect::SubtractRect</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Makes the dimensions of the <bpt id="p1">**</bpt>CRect<ept id="p1">**</ept> equal to the subtraction of <ph id="ph1">`lpRectSrc2`</ph> from <ph id="ph2">`lpRectSrc1`</ph>.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Points to the <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure or <ph id="ph1">`CRect`</ph> object from which a rectangle is to be subtracted.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Points to the <ph id="ph1">`RECT`</ph> structure or <ph id="ph2">`CRect`</ph> object that is to be subtracted from the rectangle pointed to by the <ph id="ph3">`lpRectSrc1`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>The subtraction is the smallest rectangle that contains all of the points in <ph id="ph1">`lpRectScr1`</ph> that are not in the intersection of <ph id="ph2">`lpRectScr1`</ph> and <bpt id="p1">*</bpt>lpRectScr2<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>The rectangle specified by <ph id="ph1">`lpRectSrc1`</ph> will be unchanged if the rectangle specified by <ph id="ph2">`lpRectSrc2`</ph> doesn't completely overlap the rectangle specified by <bpt id="p1">*</bpt>lpRectSrc1<ept id="p1">*</ept> in at least one of the x- or y-directions.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>For example, if <ph id="ph1">`lpRectSrc1`</ph> were (10,10, 100,100) and <ph id="ph2">`lpRectSrc2`</ph> were (50,50, 150,150), the rectangle pointed to by <ph id="ph3">`lpRectSrc1`</ph> would be unchanged when the function returned.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpRectSrc1`</ph> were (10,10, 100,100) and <ph id="ph2">`lpRectSrc2`</ph> were (50,10, 150,150), however, the rectangle pointed to by <ph id="ph3">`lpRectSrc1`</ph> would contain the coordinates (10,10, 50,100) when the function returned.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>is not the same as <bpt id="p1">[</bpt>operator -<ept id="p1">](#crect__operator_-)</ept> nor <bpt id="p2">[</bpt>operator -=<ept id="p2">](#crect__operator_-_eq)</ept>.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Neither of these operators ever calls <ph id="ph1">`SubtractRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Both of the rectangles must be normalized or this function may fail.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>You can call <bpt id="p1">[</bpt>NormalizeRect<ept id="p1">](#crect__normalizerect)</ept> to normalize the rectangles before calling this function.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>CRect::TopLeft</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>The coordinates are returned as a reference to a <bpt id="p1">[</bpt>CPoint<ept id="p1">](cpoint-class.md)</ept> object that is contained in <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>The coordinates of the top-left corner of the rectangle.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>You can use this function to either get or set the top-left corner of the rectangle.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Set the corner by using this function on the left side of the assignment operator.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CRect::CenterPoint<ept id="p1">](#crect__centerpoint)</ept>.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>CRect::UnionRect</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>Makes the dimensions of <ph id="ph1">`CRect`</ph> equal to the union of the two source rectangles.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> or <ph id="ph1">`CRect`</ph> that contains a source rectangle.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`RECT`</ph> or <ph id="ph2">`CRect`</ph> that contains a source rectangle.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Nonzero if the union is not empty; 0 if the union is empty.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>The union is the smallest rectangle that contains both source rectangles.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>Windows ignores the dimensions of an empty rectangle; that is, a rectangle that has no height or has no width.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>Both of the rectangles must be normalized or this function may fail.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>You can call <bpt id="p1">[</bpt>NormalizeRect<ept id="p1">](#crect__normalizerect)</ept> to normalize the rectangles before calling this function.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>master</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>CRect::Width</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>Calculates the width of <ph id="ph1">`CRect`</ph> by subtracting the left value from the right value.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>The width of <ph id="ph1">`CRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>The width can be negative.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>The rectangle must be normalized or this function may fail.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>You can call <bpt id="p1">[</bpt>NormalizeRect<ept id="p1">](#crect__normalizerect)</ept> to normalize the rectangle before calling this function.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>master</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>CPoint Class</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>CSize Class</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>RECT</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>