<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6b0bee9d194af82f073cead4a74272aa082246fb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\regex-typedefs.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f6d383b2f75c1e4c57ffff245e55e48d5f8cb6c4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">24b4b2f00b07e0c213c129405b960004dff85988</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>regex<ph id="ph1">&amp;gt;</ph> typedefs | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>regex<ph id="ph1">&amp;gt;</ph> typedefs</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>cmatch Typedef</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>cregex_iterator Typedef</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>cregex_token_iterator Typedef</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>csub_match Typedef</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>regex Typedef</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>smatch Typedef</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>sregex_iterator Typedef</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>sregex_token_iterator Typedef</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>ssub_match Typedef</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>wcmatch Typedef</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>wcregex_iterator Typedef</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>wcregex_token_iterator Typedef</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>wcsub_match Typedef</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>wregex Typedef</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>wsmatch Typedef</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>wsregex_iterator Typedef</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>wsregex_token_iterator Typedef</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>wssub_match Typedef</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>cmatch Typedef</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Type definition for char match_results.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The type describes a specialization of template class <bpt id="p1">[</bpt>match_results Class<ept id="p1">](../standard-library/match-results-class.md)</ept> for iterators of type <ph id="ph1">`const char*`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>cregex_iterator Typedef</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Type definition for char regex_iterator.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The type describes a specialization of template class <bpt id="p1">[</bpt>regex_iterator Class<ept id="p1">](../standard-library/regex-iterator-class.md)</ept> for iterators of type <ph id="ph1">`const char*`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>cregex_token_iterator Typedef</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Type definition for char regex_token_iterator</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The type describes a specialization of template class <bpt id="p1">[</bpt>regex_token_iterator Class<ept id="p1">](../standard-library/regex-token-iterator-class.md)</ept> for iterators of type <ph id="ph1">`const char*`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>csub_match Typedef</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Type definition for char sub_match.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The type describes a specialization of template class <bpt id="p1">[</bpt>sub_match Class<ept id="p1">](../standard-library/sub-match-class.md)</ept> for iterators of type <ph id="ph1">`const char*`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>regex Typedef</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Type definition for char basic_regex.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The type describes a specialization of template class <bpt id="p1">[</bpt>basic_regex Class<ept id="p1">](../standard-library/basic-regex-class.md)</ept> for elements of type <ph id="ph1">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>High-bit characters will have unpredictable results with <ph id="ph1">`regex`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Values outside the range of 0 to 127 may result in undefined behavior.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>smatch Typedef</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Type definition for string match_results.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The type describes a specialization of template class <bpt id="p1">[</bpt>match_results Class<ept id="p1">](../standard-library/match-results-class.md)</ept> for iterators of type <ph id="ph1">`string::const_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>sregex_iterator Typedef</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Type definition for string regex_iterator.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The type describes a specialization of template class <bpt id="p1">[</bpt>regex_iterator Class<ept id="p1">](../standard-library/regex-iterator-class.md)</ept> for iterators of type <ph id="ph1">`string::const_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>sregex_token_iterator Typedef</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Type definition for string regex_token_iterator.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The type describes a specialization of template class <bpt id="p1">[</bpt>regex_token_iterator Class<ept id="p1">](../standard-library/regex-token-iterator-class.md)</ept> for iterators of type <ph id="ph1">`string::const_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>ssub_match Typedef</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Type definition for string sub_match.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The type describes a specialization of template class <bpt id="p1">[</bpt>sub_match Class<ept id="p1">](../standard-library/sub-match-class.md)</ept> for iterators of type <ph id="ph1">`string::const_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>wcmatch Typedef</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Type definition for wchar_t match_results.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The type describes a specialization of template class <bpt id="p1">[</bpt>match_results Class<ept id="p1">](../standard-library/match-results-class.md)</ept> for iterators of type <ph id="ph1">`const wchar_t*`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>wcregex_iterator Typedef</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Type definition for wchar_t regex_iterator.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The type describes a specialization of template class <bpt id="p1">[</bpt>regex_iterator Class<ept id="p1">](../standard-library/regex-iterator-class.md)</ept> for iterators of type <ph id="ph1">`const wchar_t*`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>wcregex_token_iterator Typedef</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Type definition for wchar_t regex_token_iterator.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The type describes a specialization of template class <bpt id="p1">[</bpt>regex_token_iterator Class<ept id="p1">](../standard-library/regex-token-iterator-class.md)</ept> for iterators of type <ph id="ph1">`const wchar_t*`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>wcsub_match Typedef</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Type definition for wchar_t sub_match.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The type describes a specialization of template class <bpt id="p1">[</bpt>sub_match Class<ept id="p1">](../standard-library/sub-match-class.md)</ept> for iterators of type <ph id="ph1">`const wchar_t*`</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>wregex Typedef</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Type definition for wchar_t basic_regex.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The type describes a specialization of template class <bpt id="p1">[</bpt>basic_regex Class<ept id="p1">](../standard-library/basic-regex-class.md)</ept> for elements of type <ph id="ph1">`wchar_t`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>wsmatch Typedef</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Type definition for wstring match_results.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The type describes a specialization of template class <bpt id="p1">[</bpt>match_results Class<ept id="p1">](../standard-library/match-results-class.md)</ept> for iterators of type <ph id="ph1">`wstring::const_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>wsregex_iterator Typedef</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Type definition for wstring regex_iterator.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The type describes a specialization of template class <bpt id="p1">[</bpt>regex_iterator Class<ept id="p1">](../standard-library/regex-iterator-class.md)</ept> for iterators of type <ph id="ph1">`wstring::const_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>wsregex_token_iterator Typedef</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Type definition for wstring regex_token_iterator.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The type describes a specialization of template class <bpt id="p1">[</bpt>regex_token_iterator Class<ept id="p1">](../standard-library/regex-token-iterator-class.md)</ept> for iterators of type <ph id="ph1">`wstring::const_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>wssub_match Typedef</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Type definition for wstring sub_match.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The type describes a specialization of template class <bpt id="p1">[</bpt>sub_match Class<ept id="p1">](../standard-library/sub-match-class.md)</ept> for iterators of type <ph id="ph1">`wstring::const_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>regex&gt;</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>