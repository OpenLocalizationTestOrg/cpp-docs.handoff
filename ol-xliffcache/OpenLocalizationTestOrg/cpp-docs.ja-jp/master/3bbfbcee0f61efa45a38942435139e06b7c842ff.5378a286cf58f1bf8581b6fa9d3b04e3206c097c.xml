{"nodes":[{"pos":[12,61],"content":"Lvalues and Rvalues (Visual C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Lvalues and Rvalues (Visual C++) | Microsoft Docs","pos":[0,49]}]},{"content":"Lvalues and Rvalues (Visual C++)","pos":[605,637]},{"content":"Every C++ expression is either an lvalue or an rvalue.","pos":[638,692]},{"content":"An lvalue refers to an object that persists beyond a single expression.","pos":[693,764]},{"content":"You can think of an lvalue as an object that has a name.","pos":[765,821]},{"content":"All variables, including nonmodifiable (<ph id=\"ph1\">`const`</ph>) variables, are lvalues.","pos":[822,894],"source":" All variables, including nonmodifiable (`const`) variables, are lvalues."},{"content":"An rvalue is a temporary value that does not persist beyond the expression that uses it.","pos":[895,983]},{"content":"To better understand the difference between lvalues and rvalues, consider the following example:","pos":[984,1080]},{"content":"In this example, <ph id=\"ph1\">`x`</ph> is an lvalue because it persists beyond the expression that defines it.","pos":[1267,1359],"source":"In this example, `x` is an lvalue because it persists beyond the expression that defines it."},{"content":"The expression <ph id=\"ph1\">`3 + 4`</ph> is an rvalue because it evaluates to a temporary value that does not persist beyond the expression that defines it.","pos":[1360,1498],"source":" The expression `3 + 4` is an rvalue because it evaluates to a temporary value that does not persist beyond the expression that defines it."},{"content":"The following example demonstrates several correct and incorrect usages of lvalues and rvalues:","pos":[1505,1600]},{"pos":[2177,2368],"content":"[!NOTE]\n The examples in this topic illustrate correct and incorrect usage when operators are not overloaded. By overloading operators, you can make an expression such as `j * 4` an lvalue.","leadings":["","> "],"nodes":[{"content":" The examples in this topic illustrate correct and incorrect usage when operators are not overloaded. By overloading operators, you can make an expression such as `j * 4` an lvalue.","pos":[8,189],"nodes":[{"content":"The examples in this topic illustrate correct and incorrect usage when operators are not overloaded.","pos":[1,101]},{"content":"By overloading operators, you can make an expression such as <ph id=\"ph1\">`j * 4`</ph> an lvalue.","pos":[102,181],"source":" By overloading operators, you can make an expression such as `j * 4` an lvalue."}]}]},{"content":"The terms <bpt id=\"p1\">*</bpt>lvalue<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>rvalue<ept id=\"p2\">*</ept> are often used when you refer to object references.","pos":[2375,2458],"source":"The terms *lvalue* and *rvalue* are often used when you refer to object references."},{"content":"For more information about references, see <bpt id=\"p1\">[</bpt>Lvalue Reference Declarator: &amp;<ept id=\"p1\">](../cpp/lvalue-reference-declarator-amp.md)</ept> and <bpt id=\"p2\">[</bpt>Rvalue Reference Declarator: &amp;&amp;<ept id=\"p2\">](../cpp/rvalue-reference-declarator-amp-amp.md)</ept>.","pos":[2459,2663],"source":" For more information about references, see [Lvalue Reference Declarator: &](../cpp/lvalue-reference-declarator-amp.md) and [Rvalue Reference Declarator: &&](../cpp/rvalue-reference-declarator-amp-amp.md)."},{"content":"See Also","pos":[2672,2680]},{"content":"Basic Concepts","pos":[2685,2699]},{"content":"Lvalue Reference Declarator: &amp;","pos":[2736,2766],"source":"Lvalue Reference Declarator: &"},{"content":"Rvalue Reference Declarator: &amp;&amp;","pos":[2816,2847],"source":"Rvalue Reference Declarator: &&"}],"content":"---\ntitle: \"Lvalues and Rvalues (Visual C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"R-values\"\n  - \"L-values\"\nms.assetid: a8843344-cccc-40be-b701-b71f7b5cdcaf\ncaps.latest.revision: 14\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Lvalues and Rvalues (Visual C++)\nEvery C++ expression is either an lvalue or an rvalue. An lvalue refers to an object that persists beyond a single expression. You can think of an lvalue as an object that has a name. All variables, including nonmodifiable (`const`) variables, are lvalues. An rvalue is a temporary value that does not persist beyond the expression that uses it. To better understand the difference between lvalues and rvalues, consider the following example:  \n  \n```  \n// lvalues_and_rvalues1.cpp  \n// compile with: /EHsc  \n#include <iostream>  \nusing namespace std;  \nint main()  \n{  \n   int x = 3 + 4;  \n   cout << x << endl;  \n}  \n```  \n  \n In this example, `x` is an lvalue because it persists beyond the expression that defines it. The expression `3 + 4` is an rvalue because it evaluates to a temporary value that does not persist beyond the expression that defines it.  \n  \n The following example demonstrates several correct and incorrect usages of lvalues and rvalues:  \n  \n```  \n// lvalues_and_rvalues2.cpp  \nint main()  \n{  \n   int i, j, *p;  \n  \n   // Correct usage: the variable i is an lvalue.  \n   i = 7;  \n  \n   // Incorrect usage: The left operand must be an lvalue (C2106).  \n   7 = i; // C2106  \n   j * 4 = 7; // C2106  \n  \n   // Correct usage: the dereferenced pointer is an lvalue.  \n   *p = i;   \n  \n   const int ci = 7;  \n   // Incorrect usage: the variable is a non-modifiable lvalue (C3892).  \n   ci = 9; // C3892  \n  \n   // Correct usage: the conditional operator returns an lvalue.  \n   ((i < 3) ? i : j) = 7;  \n}  \n```  \n  \n> [!NOTE]\n>  The examples in this topic illustrate correct and incorrect usage when operators are not overloaded. By overloading operators, you can make an expression such as `j * 4` an lvalue.  \n  \n The terms *lvalue* and *rvalue* are often used when you refer to object references. For more information about references, see [Lvalue Reference Declarator: &](../cpp/lvalue-reference-declarator-amp.md) and [Rvalue Reference Declarator: &&](../cpp/rvalue-reference-declarator-amp-amp.md).  \n  \n## See Also  \n [Basic Concepts](../cpp/basic-concepts-cpp.md)   \n [Lvalue Reference Declarator: &](../cpp/lvalue-reference-declarator-amp.md)   \n [Rvalue Reference Declarator: &&](../cpp/rvalue-reference-declarator-amp-amp.md)"}