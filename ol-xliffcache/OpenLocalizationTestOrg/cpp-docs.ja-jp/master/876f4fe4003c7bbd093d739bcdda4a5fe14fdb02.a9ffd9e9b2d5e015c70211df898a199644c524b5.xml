{"nodes":[{"pos":[12,40],"content":"Return Type | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Return Type | Microsoft Docs","pos":[0,28]}]},{"content":"Return Type","pos":[819,830]},{"content":"The return type of a function establishes the size and type of the value returned by the function and corresponds to the type-specifier in the syntax below:","pos":[831,987]},{"content":"Syntax","pos":[996,1002]},{"content":"<bpt id=\"p1\">*</bpt>function-definition<ept id=\"p1\">*</ept>:","pos":[1006,1028],"source":"*function-definition*:"},{"content":"<bpt id=\"p1\"> *</bpt>declaration-specifiers<ept id=\"p1\">*</ept> opt<bpt id=\"p2\">*</bpt>attribute-seq<ept id=\"p2\">*</ept> opt<bpt id=\"p3\">*</bpt>declarator declaration-list<ept id=\"p3\">*</ept> opt<bpt id=\"p4\">*</bpt>compound-statement<ept id=\"p4\">*</ept>","pos":[1031,1132],"source":" *declaration-specifiers* opt*attribute-seq* opt*declarator declaration-list* opt*compound-statement*"},{"pos":[1143,1183],"content":"<bpt id=\"p1\">*</bpt>attribute-seq<ept id=\"p1\">*</ept> is Microsoft Specific */","source":"*attribute-seq* is Microsoft Specific */"},{"content":"<bpt id=\"p1\">*</bpt>declaration-specifiers<ept id=\"p1\">*</ept>:","pos":[1190,1215],"source":"*declaration-specifiers*:"},{"content":"<bpt id=\"p1\"> *</bpt>storage-class-specifier declaration-specifiers<ept id=\"p1\">*</ept> opt","pos":[1218,1271],"source":" *storage-class-specifier declaration-specifiers* opt"},{"pos":[1278,1321],"content":"<bpt id=\"p1\">*</bpt>type-specifier declaration-specifiers<ept id=\"p1\">*</ept> opt","source":"*type-specifier declaration-specifiers* opt"},{"pos":[1328,1371],"content":"<bpt id=\"p1\">*</bpt>type-qualifier declaration-specifiers<ept id=\"p1\">*</ept> opt","source":"*type-qualifier declaration-specifiers* opt"},{"content":"<bpt id=\"p1\">*</bpt>type-specifier<ept id=\"p1\">*</ept>:","pos":[1378,1395],"source":"*type-specifier*:"},{"content":"void","pos":[1401,1405]},{"content":"char","pos":[1416,1420]},{"content":"short","pos":[1431,1436]},{"content":"int","pos":[1447,1450]},{"content":"long","pos":[1461,1465]},{"content":"float","pos":[1476,1481]},{"content":"double","pos":[1492,1498]},{"content":"signed","pos":[1509,1515]},{"content":"unsigned","pos":[1526,1534]},{"content":"struct-or-union-specifier","pos":[1544,1569]},{"content":"enum-specifier","pos":[1578,1592]},{"content":"typedef-name","pos":[1601,1613]},{"content":"The <bpt id=\"p1\">*</bpt>type-specifier<ept id=\"p1\">*</ept> can specify any fundamental, structure, or union type.","pos":[1621,1696],"source":"The *type-specifier* can specify any fundamental, structure, or union type."},{"content":"If you do not include <bpt id=\"p1\">*</bpt>type-specifier<ept id=\"p1\">*</ept>, the return type <ph id=\"ph1\">`int`</ph> is assumed.","pos":[1697,1770],"source":" If you do not include *type-specifier*, the return type `int` is assumed."},{"content":"The return type given in the function definition must match the return type in declarations of the function elsewhere in the program.","pos":[1777,1910]},{"content":"A function returns a value when a <ph id=\"ph1\">`return`</ph> statement containing an expression is executed.","pos":[1911,2001],"source":" A function returns a value when a `return` statement containing an expression is executed."},{"content":"The expression is evaluated, converted to the return value type if necessary, and returned to the point at which the function was called.","pos":[2002,2139]},{"content":"If a function is declared with return type <ph id=\"ph1\">`void`</ph>, a return statement containing an expression generates a warning and the expression is not evaluated.","pos":[2140,2291],"source":" If a function is declared with return type `void`, a return statement containing an expression generates a warning and the expression is not evaluated."},{"content":"The following examples illustrate function return values.","pos":[2298,2355]},{"content":"This example defines the <ph id=\"ph1\">`STUDENT`</ph> type with a <ph id=\"ph2\">`typedef`</ph> declaration and defines the function <ph id=\"ph3\">`sortstu`</ph> to have <ph id=\"ph4\">`STUDENT`</ph> return type.","pos":[2594,2728],"source":"This example defines the `STUDENT` type with a `typedef` declaration and defines the function `sortstu` to have `STUDENT` return type."},{"content":"The function selects and returns one of its two structure arguments.","pos":[2729,2797]},{"content":"In subsequent calls to the function, the compiler checks to make sure the argument types are <ph id=\"ph1\">`STUDENT`</ph>.","pos":[2798,2901],"source":" In subsequent calls to the function, the compiler checks to make sure the argument types are `STUDENT`."},{"pos":[2909,3020],"content":"[!NOTE]\n Efficiency would be enhanced by passing pointers to the structure, rather than the entire structure.","leadings":["","> "],"nodes":[{"content":"Efficiency would be enhanced by passing pointers to the structure, rather than the entire structure.","pos":[9,109]}]},{"content":"This example defines a function returning a pointer to an array of characters.","pos":[3270,3348]},{"content":"The function takes two character arrays (strings) as arguments and returns a pointer to the shorter of the two strings.","pos":[3349,3468]},{"content":"A pointer to an array points to the first of the array elements and has its type; thus, the return type of the function is a pointer to type <ph id=\"ph1\">`char`</ph>.","pos":[3469,3617],"source":" A pointer to an array points to the first of the array elements and has its type; thus, the return type of the function is a pointer to type `char`."},{"pos":[3624,3809],"content":"You need not declare functions with <ph id=\"ph1\">`int`</ph> return type before you call them, although prototypes are recommended so that correct type checking for arguments and return values is enabled.","source":"You need not declare functions with `int` return type before you call them, although prototypes are recommended so that correct type checking for arguments and return values is enabled."},{"content":"See Also","pos":[3818,3826]},{"content":"C Function Definitions","pos":[3831,3853]}],"content":"---\ntitle: \"Return Type | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"function return types\"\n  - \"return values [C++], function procedures\"\n  - \"function return types, syntax\"\n  - \"return values [C++]\"\n  - \"data types [C++], function return types\"\n  - \"return keyword [C++], function return types\"\n  - \"functions [C++], return types\"\nms.assetid: 3e5b8a97-b341-48c5-8be8-8986980ef586\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Return Type\nThe return type of a function establishes the size and type of the value returned by the function and corresponds to the type-specifier in the syntax below:  \n  \n## Syntax  \n *function-definition*:  \n *declaration-specifiers* opt*attribute-seq* opt*declarator declaration-list* opt*compound-statement*  \n  \n /\\* *attribute-seq* is Microsoft Specific */  \n  \n *declaration-specifiers*:  \n *storage-class-specifier declaration-specifiers* opt  \n  \n *type-specifier declaration-specifiers* opt  \n  \n *type-qualifier declaration-specifiers* opt  \n  \n *type-specifier*:  \n **void**  \n  \n **char**  \n  \n **short**  \n  \n **int**  \n  \n **long**  \n  \n **float**  \n  \n **double**  \n  \n **signed**  \n  \n **unsigned**  \n  \n *struct-or-union-specifier*  \n  \n *enum-specifier*  \n  \n *typedef-name*  \n  \n The *type-specifier* can specify any fundamental, structure, or union type. If you do not include *type-specifier*, the return type `int` is assumed.  \n  \n The return type given in the function definition must match the return type in declarations of the function elsewhere in the program. A function returns a value when a `return` statement containing an expression is executed. The expression is evaluated, converted to the return value type if necessary, and returned to the point at which the function was called. If a function is declared with return type `void`, a return statement containing an expression generates a warning and the expression is not evaluated.  \n  \n The following examples illustrate function return values.  \n  \n```  \ntypedef struct    \n{  \n    char name[20];  \n    int id;  \n    long class;  \n} STUDENT;  \n  \n/* Return type is STUDENT: */  \n  \nSTUDENT sortstu( STUDENT a, STUDENT b )  \n{  \n    return ( (a.id < b.id) ? a : b );  \n}  \n```  \n  \n This example defines the `STUDENT` type with a `typedef` declaration and defines the function `sortstu` to have `STUDENT` return type. The function selects and returns one of its two structure arguments. In subsequent calls to the function, the compiler checks to make sure the argument types are `STUDENT`.  \n  \n> [!NOTE]\n>  Efficiency would be enhanced by passing pointers to the structure, rather than the entire structure.  \n  \n```  \nchar *smallstr( char s1[], char s2[] )  \n{  \n    int i;  \n  \n    i = 0;  \n    while ( s1[i] != '\\0' && s2[i] != '\\0' )  \n        i++;  \n    if ( s1[i] == '\\0' )  \n        return ( s1 );  \n    else  \n        return ( s2 );  \n}  \n```  \n  \n This example defines a function returning a pointer to an array of characters. The function takes two character arrays (strings) as arguments and returns a pointer to the shorter of the two strings. A pointer to an array points to the first of the array elements and has its type; thus, the return type of the function is a pointer to type `char`.  \n  \n You need not declare functions with `int` return type before you call them, although prototypes are recommended so that correct type checking for arguments and return values is enabled.  \n  \n## See Also  \n [C Function Definitions](../c-language/c-function-definitions.md)"}