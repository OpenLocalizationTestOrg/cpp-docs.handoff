{"nodes":[{"pos":[12,45],"content":"CComGITPtr Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CComGITPtr Class | Microsoft Docs","pos":[0,33]}]},{"pos":[696,712],"content":"CComGITPtr Class","linkify":"CComGITPtr Class","nodes":[{"content":"CComGITPtr Class","pos":[0,16]}]},{"content":"This class provides methods for dealing with interface pointers and the global interface table (GIT).","pos":[713,814]},{"pos":[823,829],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[890,900],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type of the interface pointer to be stored in the GIT.","pos":[911,969]},{"pos":[978,985],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[995,1014],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1021,1025]},{"content":"Description","pos":[1026,1037]},{"pos":[1075,1124],"content":"<bpt id=\"p1\">[</bpt>CComGITPtr::CComGITPtr<ept id=\"p1\">](#ccomgitptr__ccomgitptr)</ept>","source":"[CComGITPtr::CComGITPtr](#ccomgitptr__ccomgitptr)"},{"content":"The constructor.","pos":[1125,1141]},{"pos":[1146,1201],"content":"<bpt id=\"p1\">[</bpt>CComGITPtr::~CComGITPtr<ept id=\"p1\">](#ccomgitptr___dtorccomgitptr)</ept>","source":"[CComGITPtr::~CComGITPtr](#ccomgitptr___dtorccomgitptr)"},{"content":"The destructor.","pos":[1202,1217]},{"pos":[1228,1242],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1249,1253]},{"content":"Description","pos":[1254,1265]},{"pos":[1303,1344],"content":"<bpt id=\"p1\">[</bpt>CComGITPtr::Attach<ept id=\"p1\">](#ccomgitptr__attach)</ept>","source":"[CComGITPtr::Attach](#ccomgitptr__attach)"},{"content":"Call this method to register the interface pointer in the global interface table (GIT).","pos":[1345,1432]},{"pos":[1437,1478],"content":"<bpt id=\"p1\">[</bpt>CComGITPtr::CopyTo<ept id=\"p1\">](#ccomgitptr__copyto)</ept>","source":"[CComGITPtr::CopyTo](#ccomgitptr__copyto)"},{"content":"Call this method to copy the interface from the global interface table (GIT) to the passed pointer.","pos":[1479,1578]},{"pos":[1583,1624],"content":"<bpt id=\"p1\">[</bpt>CComGITPtr::Detach<ept id=\"p1\">](#ccomgitptr__detach)</ept>","source":"[CComGITPtr::Detach](#ccomgitptr__detach)"},{"pos":[1625,1701],"content":"Call this method to disassociate the interface from the <ph id=\"ph1\">`CComGITPtr`</ph> object.","source":"Call this method to disassociate the interface from the `CComGITPtr` object."},{"pos":[1706,1753],"content":"<bpt id=\"p1\">[</bpt>CComGITPtr::GetCookie<ept id=\"p1\">](#ccomgitptr__getcookie)</ept>","source":"[CComGITPtr::GetCookie](#ccomgitptr__getcookie)"},{"pos":[1754,1821],"content":"Call this method to return the cookie from the <ph id=\"ph1\">`CComGITPtr`</ph> object.","source":"Call this method to return the cookie from the `CComGITPtr` object."},{"pos":[1826,1867],"content":"<bpt id=\"p1\">[</bpt>CComGITPtr::Revoke<ept id=\"p1\">](#ccomgitptr__revoke)</ept>","source":"[CComGITPtr::Revoke](#ccomgitptr__revoke)"},{"content":"Call this method to remove the interface from the global interface table (GIT).","pos":[1868,1947]},{"pos":[1958,1974],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[1981,1985]},{"content":"Description","pos":[1986,1997]},{"pos":[2035,2092],"content":"<bpt id=\"p1\">[</bpt>CComGITPtr::operator DWORD<ept id=\"p1\">](#ccomgitptr__operator_dword)</ept>","source":"[CComGITPtr::operator DWORD](#ccomgitptr__operator_dword)"},{"pos":[2093,2141],"content":"Returns the cookie from the <ph id=\"ph1\">`CComGITPtr`</ph> object.","source":"Returns the cookie from the `CComGITPtr` object."},{"pos":[2146,2196],"content":"<bpt id=\"p1\">[</bpt>CComGITPtr::operator =<ept id=\"p1\">](#ccomgitptr__operator_eq)</ept>","source":"[CComGITPtr::operator =](#ccomgitptr__operator_eq)"},{"content":"Assignment operator.","pos":[2197,2217]},{"pos":[2228,2247],"content":"Public Data Members","linkify":"Public Data Members","nodes":[{"content":"Public Data Members","pos":[0,19]}]},{"content":"Name","pos":[2254,2258]},{"content":"Description","pos":[2259,2270]},{"pos":[2308,2357],"content":"<bpt id=\"p1\">[</bpt>CComGITPtr::m_dwCookie<ept id=\"p1\">](#ccomgitptr__m_dwcookie)</ept>","source":"[CComGITPtr::m_dwCookie](#ccomgitptr__m_dwcookie)"},{"content":"The cookie.","pos":[2358,2369]},{"pos":[2379,2386],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Objects that aggregate the free threaded marshaler and need to use interface pointers obtained from other objects must take extra steps to ensure that the interfaces are correctly marshaled.","pos":[2390,2580]},{"content":"Typically this involves storing the interface pointers in the GIT and getting the pointer from the GIT each time it is used.","pos":[2581,2705]},{"content":"The class <ph id=\"ph1\">`CComGITPtr`</ph> is provided to help you use interface pointers stored in the GIT.","pos":[2706,2794],"source":" The class `CComGITPtr` is provided to help you use interface pointers stored in the GIT."},{"pos":[2802,2989],"content":"[!NOTE]\n The global interface table facility is only available on Windows 95 with DCOM version 1.1 and later, Windows 98, Windows NT 4.0 with Service Pack 3 and later, and Windows 2000.","leadings":["","> "],"nodes":[{"content":"The global interface table facility is only available on Windows 95 with DCOM version 1.1 and later, Windows 98, Windows NT 4.0 with Service Pack 3 and later, and Windows 2000.","pos":[9,185]}]},{"pos":[2998,3010],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3014,3035],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlbase.h","source":"**Header:** atlbase.h"},{"pos":[3045,3098],"content":"<bpt id=\"p1\">&lt;a name=\"ccomgitptr__attach\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComGITPtr::Attach","linkify":"<a name=\"ccomgitptr__attach\"></a>  CComGITPtr::Attach","source":"<a name=\"ccomgitptr__attach\"></a>  CComGITPtr::Attach"},{"content":"Call this method to register the interface pointer in the global interface table (GIT).","pos":[3102,3189]},{"pos":[3282,3292],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The interface pointer to be added to the GIT.","pos":[3303,3348]},{"content":"The cookie used to identify the interface pointer.","pos":[3369,3419]},{"pos":[3429,3441],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[3445,3501]},{"pos":[3511,3518],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In debug builds, an assertion error will occur if the GIT is not valid, or if the cookie is equal to NULL.","pos":[3522,3628]},{"pos":[3638,3699],"content":"<bpt id=\"p1\">&lt;a name=\"ccomgitptr__ccomgitptr\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComGITPtr::CComGITPtr","linkify":"<a name=\"ccomgitptr__ccomgitptr\"></a>  CComGITPtr::CComGITPtr","source":"<a name=\"ccomgitptr__ccomgitptr\"></a>  CComGITPtr::CComGITPtr"},{"content":"The constructor.","pos":[3703,3719]},{"pos":[3896,3906],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`p`</ph>","pos":[3910,3918],"source":"[in] `p`"},{"content":"An interface pointer to be stored in the global interface table (GIT).","pos":[3922,3992]},{"content":"[in] <ph id=\"ph1\">`git`</ph>","pos":[3999,4009],"source":"[in] `git`"},{"content":"A reference to an existing <ph id=\"ph1\">`CComGITPtr`</ph> object.","pos":[4013,4060],"source":" A reference to an existing `CComGITPtr` object."},{"content":"[in] <ph id=\"ph1\">`dwCookie`</ph>","pos":[4067,4082],"source":"[in] `dwCookie`"},{"content":"A cookie used to identify the interface pointer.","pos":[4086,4134]},{"content":"[in] <ph id=\"ph1\">`rv`</ph>","pos":[4141,4150],"source":"[in] `rv`"},{"content":"The source <ph id=\"ph1\">`CComGITPtr`</ph> object to move data from.","pos":[4154,4203],"source":" The source `CComGITPtr` object to move data from."},{"pos":[4213,4220],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4224,4308],"content":"Creates a new <ph id=\"ph1\">`CComGITPtr`</ph> object, optionally using an existing <ph id=\"ph2\">`CComGITPtr`</ph> object.","source":"Creates a new `CComGITPtr` object, optionally using an existing `CComGITPtr` object."},{"content":"The constructor utilizing <ph id=\"ph1\">`rv`</ph> is a move constructor.","pos":[4315,4368],"source":"The constructor utilizing `rv` is a move constructor."},{"content":"The data is moved from the source, <ph id=\"ph1\">`rv`</ph>, and then <ph id=\"ph2\">`rv`</ph> is cleared.","pos":[4369,4435],"source":" The data is moved from the source, `rv`, and then `rv` is cleared."},{"pos":[4445,4512],"content":"<bpt id=\"p1\">&lt;a name=\"ccomgitptr___dtorccomgitptr\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComGITPtr::~CComGITPtr","linkify":"<a name=\"ccomgitptr___dtorccomgitptr\"></a>  CComGITPtr::~CComGITPtr","source":"<a name=\"ccomgitptr___dtorccomgitptr\"></a>  CComGITPtr::~CComGITPtr"},{"content":"The destructor.","pos":[4516,4531]},{"pos":[4577,4584],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4588,4697],"content":"Removes the interface from the global interface table (GIT), using <bpt id=\"p1\">[</bpt>CComGITPtr::Revoke<ept id=\"p1\">](#ccomgitptr__revoke)</ept>.","source":"Removes the interface from the global interface table (GIT), using [CComGITPtr::Revoke](#ccomgitptr__revoke)."},{"pos":[4707,4760],"content":"<bpt id=\"p1\">&lt;a name=\"ccomgitptr__copyto\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComGITPtr::CopyTo","linkify":"<a name=\"ccomgitptr__copyto\"></a>  CComGITPtr::CopyTo","source":"<a name=\"ccomgitptr__copyto\"></a>  CComGITPtr::CopyTo"},{"content":"Call this method to copy the interface from the global interface table (GIT) to the passed pointer.","pos":[4764,4863]},{"pos":[4924,4934],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The pointer which is to receive the interface.","pos":[4946,4992]},{"pos":[5002,5014],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[5018,5074]},{"pos":[5084,5091],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The interface from the GIT is copied to the passed pointer.","pos":[5095,5154]},{"content":"The pointer must be released by the caller when it is no longer required.","pos":[5155,5228]},{"pos":[5238,5291],"content":"<bpt id=\"p1\">&lt;a name=\"ccomgitptr__detach\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComGITPtr::Detach","linkify":"<a name=\"ccomgitptr__detach\"></a>  CComGITPtr::Detach","source":"<a name=\"ccomgitptr__detach\"></a>  CComGITPtr::Detach"},{"pos":[5295,5371],"content":"Call this method to disassociate the interface from the <ph id=\"ph1\">`CComGITPtr`</ph> object.","source":"Call this method to disassociate the interface from the `CComGITPtr` object."},{"pos":[5418,5430],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5434,5482],"content":"Returns the cookie from the <ph id=\"ph1\">`CComGITPtr`</ph> object.","source":"Returns the cookie from the `CComGITPtr` object."},{"pos":[5492,5499],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5503,5612],"content":"It is up to the caller to remove the interface from the GIT, using <bpt id=\"p1\">[</bpt>CComGITPtr::Revoke<ept id=\"p1\">](#ccomgitptr__revoke)</ept>.","source":"It is up to the caller to remove the interface from the GIT, using [CComGITPtr::Revoke](#ccomgitptr__revoke)."},{"pos":[5622,5681],"content":"<bpt id=\"p1\">&lt;a name=\"ccomgitptr__getcookie\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComGITPtr::GetCookie","linkify":"<a name=\"ccomgitptr__getcookie\"></a>  CComGITPtr::GetCookie","source":"<a name=\"ccomgitptr__getcookie\"></a>  CComGITPtr::GetCookie"},{"pos":[5685,5752],"content":"Call this method to return the cookie from the <ph id=\"ph1\">`CComGITPtr`</ph> object.","source":"Call this method to return the cookie from the `CComGITPtr` object."},{"pos":[5800,5812],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the cookie.","pos":[5816,5835]},{"pos":[5845,5852],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The cookie is a variable used to identify an interface and its location.","pos":[5856,5928]},{"pos":[5938,5999],"content":"<bpt id=\"p1\">&lt;a name=\"ccomgitptr__m_dwcookie\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComGITPtr::m_dwCookie","linkify":"<a name=\"ccomgitptr__m_dwcookie\"></a>  CComGITPtr::m_dwCookie","source":"<a name=\"ccomgitptr__m_dwcookie\"></a>  CComGITPtr::m_dwCookie"},{"content":"The cookie.","pos":[6003,6014]},{"pos":[6055,6062],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The cookie is a member variable used to identify an interface and its location.","pos":[6066,6145]},{"pos":[6155,6217],"content":"<bpt id=\"p1\">&lt;a name=\"ccomgitptr__operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComGITPtr::operator =","linkify":"<a name=\"ccomgitptr__operator_eq\"></a>  CComGITPtr::operator =","source":"<a name=\"ccomgitptr__operator_eq\"></a>  CComGITPtr::operator ="},{"content":"The assignment operator.","pos":[6221,6245]},{"pos":[6429,6439],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`p`</ph>","pos":[6443,6451],"source":"[in] `p`"},{"content":"A pointer to an interface.","pos":[6455,6481]},{"content":"[in] <ph id=\"ph1\">`git`</ph>","pos":[6488,6498],"source":"[in] `git`"},{"content":"A reference to a <ph id=\"ph1\">`CComGITPtr`</ph> object.","pos":[6502,6539],"source":" A reference to a `CComGITPtr` object."},{"content":"[in] <ph id=\"ph1\">`dwCookie`</ph>","pos":[6546,6561],"source":"[in] `dwCookie`"},{"content":"A cookie used to identify the interface pointer.","pos":[6565,6613]},{"content":"[in] <ph id=\"ph1\">`rv`</ph>","pos":[6620,6629],"source":"[in] `rv`"},{"content":"The <ph id=\"ph1\">`CComGITPtr`</ph> to move data from.","pos":[6633,6668],"source":" The `CComGITPtr` to move data from."},{"pos":[6678,6690],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6694,6734],"content":"Returns the updated <ph id=\"ph1\">`CComGITPtr`</ph> object.","source":"Returns the updated `CComGITPtr` object."},{"pos":[6744,6751],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6755,6880],"content":"Assigns a new value to a <ph id=\"ph1\">`CComGITPtr`</ph> object, either from an existing object or from a reference to a global interface table.","source":"Assigns a new value to a `CComGITPtr` object, either from an existing object or from a reference to a global interface table."},{"pos":[6890,6959],"content":"<bpt id=\"p1\">&lt;a name=\"ccomgitptr__operator_dword\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComGITPtr::operator DWORD","linkify":"<a name=\"ccomgitptr__operator_dword\"></a>  CComGITPtr::operator DWORD","source":"<a name=\"ccomgitptr__operator_dword\"></a>  CComGITPtr::operator DWORD"},{"pos":[6963,7022],"content":"Returns the cookie associated with the <ph id=\"ph1\">`CComGITPtr`</ph> object.","source":"Returns the cookie associated with the `CComGITPtr` object."},{"content":"```operator DWORD() const;","pos":[7028,7054]},{"content":"HRESULT Revoke() throw();","pos":[7315,7340]}],"content":"---\ntitle: \"CComGITPtr Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL::CComGITPtr<T>\"\n  - \"CComGITPtr\"\n  - \"ATL.CComGITPtr\"\n  - \"ATL.CComGITPtr<T>\"\n  - \"ATL::CComGITPtr\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CComGITPtr class\"\nms.assetid: af895acb-525a-4555-bb67-b241b7df515b\ncaps.latest.revision: 19\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CComGITPtr Class\nThis class provides methods for dealing with interface pointers and the global interface table (GIT).  \n  \n## Syntax  \n  \n```\ntemplate <class T>  class CComGITPtr\n```  \n  \n#### Parameters  \n `T`  \n The type of the interface pointer to be stored in the GIT.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComGITPtr::CComGITPtr](#ccomgitptr__ccomgitptr)|The constructor.|  \n|[CComGITPtr::~CComGITPtr](#ccomgitptr___dtorccomgitptr)|The destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComGITPtr::Attach](#ccomgitptr__attach)|Call this method to register the interface pointer in the global interface table (GIT).|  \n|[CComGITPtr::CopyTo](#ccomgitptr__copyto)|Call this method to copy the interface from the global interface table (GIT) to the passed pointer.|  \n|[CComGITPtr::Detach](#ccomgitptr__detach)|Call this method to disassociate the interface from the `CComGITPtr` object.|  \n|[CComGITPtr::GetCookie](#ccomgitptr__getcookie)|Call this method to return the cookie from the `CComGITPtr` object.|  \n|[CComGITPtr::Revoke](#ccomgitptr__revoke)|Call this method to remove the interface from the global interface table (GIT).|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComGITPtr::operator DWORD](#ccomgitptr__operator_dword)|Returns the cookie from the `CComGITPtr` object.|  \n|[CComGITPtr::operator =](#ccomgitptr__operator_eq)|Assignment operator.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComGITPtr::m_dwCookie](#ccomgitptr__m_dwcookie)|The cookie.|  \n  \n## Remarks  \n Objects that aggregate the free threaded marshaler and need to use interface pointers obtained from other objects must take extra steps to ensure that the interfaces are correctly marshaled. Typically this involves storing the interface pointers in the GIT and getting the pointer from the GIT each time it is used. The class `CComGITPtr` is provided to help you use interface pointers stored in the GIT.  \n  \n> [!NOTE]\n>  The global interface table facility is only available on Windows 95 with DCOM version 1.1 and later, Windows 98, Windows NT 4.0 with Service Pack 3 and later, and Windows 2000.  \n  \n## Requirements  \n **Header:** atlbase.h  \n  \n##  <a name=\"ccomgitptr__attach\"></a>  CComGITPtr::Attach  \n Call this method to register the interface pointer in the global interface table (GIT).  \n  \n```\nHRESULT Attach(T* p) throw();\nHRESULT Attach(DWORD dwCookie) throw();\n```  \n  \n### Parameters  \n `p`  \n The interface pointer to be added to the GIT.  \n  \n `dwCookie`  \n The cookie used to identify the interface pointer.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n In debug builds, an assertion error will occur if the GIT is not valid, or if the cookie is equal to NULL.  \n  \n##  <a name=\"ccomgitptr__ccomgitptr\"></a>  CComGITPtr::CComGITPtr  \n The constructor.  \n  \n```\nCComGITPtr() throw();\n\nCComGITPtr(T* p);\n\nCComGITPtr(const CComGITPtr& git);\n\nexplicit CComGITPtr(DWORD  dwCookie) throw();\n\nCComGITPtr(CComGITPtr&& rv);\n```  \n  \n### Parameters  \n [in] `p`  \n An interface pointer to be stored in the global interface table (GIT).  \n  \n [in] `git`  \n A reference to an existing `CComGITPtr` object.  \n  \n [in] `dwCookie`  \n A cookie used to identify the interface pointer.  \n  \n [in] `rv`  \n The source `CComGITPtr` object to move data from.  \n  \n### Remarks  \n Creates a new `CComGITPtr` object, optionally using an existing `CComGITPtr` object.  \n  \n The constructor utilizing `rv` is a move constructor. The data is moved from the source, `rv`, and then `rv` is cleared.  \n  \n##  <a name=\"ccomgitptr___dtorccomgitptr\"></a>  CComGITPtr::~CComGITPtr  \n The destructor.  \n  \n```\n~CComGITPtr() throw();\n```  \n  \n### Remarks  \n Removes the interface from the global interface table (GIT), using [CComGITPtr::Revoke](#ccomgitptr__revoke).  \n  \n##  <a name=\"ccomgitptr__copyto\"></a>  CComGITPtr::CopyTo  \n Call this method to copy the interface from the global interface table (GIT) to the passed pointer.  \n  \n```\nHRESULT CopyTo(T** pp) const throw();\n```  \n  \n### Parameters  \n `pp`  \n The pointer which is to receive the interface.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n The interface from the GIT is copied to the passed pointer. The pointer must be released by the caller when it is no longer required.  \n  \n##  <a name=\"ccomgitptr__detach\"></a>  CComGITPtr::Detach  \n Call this method to disassociate the interface from the `CComGITPtr` object.  \n  \n```\nDWORD Detach() throw();\n```  \n  \n### Return Value  \n Returns the cookie from the `CComGITPtr` object.  \n  \n### Remarks  \n It is up to the caller to remove the interface from the GIT, using [CComGITPtr::Revoke](#ccomgitptr__revoke).  \n  \n##  <a name=\"ccomgitptr__getcookie\"></a>  CComGITPtr::GetCookie  \n Call this method to return the cookie from the `CComGITPtr` object.  \n  \n```\nDWORD GetCookie() const;\n```  \n  \n### Return Value  \n Returns the cookie.  \n  \n### Remarks  \n The cookie is a variable used to identify an interface and its location.  \n  \n##  <a name=\"ccomgitptr__m_dwcookie\"></a>  CComGITPtr::m_dwCookie  \n The cookie.  \n  \n```\nDWORD m_dwCookie;\n```  \n  \n### Remarks  \n The cookie is a member variable used to identify an interface and its location.  \n  \n##  <a name=\"ccomgitptr__operator_eq\"></a>  CComGITPtr::operator =  \n The assignment operator.  \n  \n```\nCComGITPtr& operator= (T* p);\n\nCComGITPtr& operator= (const CComGITPtr& git);\n\nCComGITPtr& operator= (DWORD dwCookie);\n\nCComGITPtr& operator= (CComGITPtr&& rv);\n```  \n  \n### Parameters  \n [in] `p`  \n A pointer to an interface.  \n  \n [in] `git`  \n A reference to a `CComGITPtr` object.  \n  \n [in] `dwCookie`  \n A cookie used to identify the interface pointer.  \n  \n [in] `rv`  \n The `CComGITPtr` to move data from.  \n  \n### Return Value  \n Returns the updated `CComGITPtr` object.  \n  \n### Remarks  \n Assigns a new value to a `CComGITPtr` object, either from an existing object or from a reference to a global interface table.  \n  \n##  <a name=\"ccomgitptr__operator_dword\"></a>  CComGITPtr::operator DWORD  \n Returns the cookie associated with the `CComGITPtr` object.  \n  \n```operator DWORD() const;\n```  \n  \n### Remarks  \n The cookie is a variable used to identify an interface and its location.  \n  \n##  <a name=\"ccomgitptr__revoke\"></a>  CComGITPtr::Revoke  \n Call this method to remove the current interface from the global interface table (GIT).  \n  \n```\nHRESULT Revoke() throw();\n```  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n Removes the interface from the GIT.  \n  \n## See Also  \n [Free Threaded Marshaler](../../atl/atl-and-the-free-threaded-marshaler.md)   \n [Accessing Interfaces Across Apartments](http://msdn.microsoft.com/library/windows/desktop/ms682353)   \n [When to Use the Global Interface Table](http://msdn.microsoft.com/library/windows/desktop/ms693729)   \n [Class Overview](../../atl/atl-class-overview.md)\n"}