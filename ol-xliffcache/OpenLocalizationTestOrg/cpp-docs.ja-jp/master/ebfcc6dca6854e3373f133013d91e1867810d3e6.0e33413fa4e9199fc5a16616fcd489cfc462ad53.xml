{"nodes":[{"pos":[12,63],"content":"gmtime_s, _gmtime32_s, _gmtime64_s | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"gmtime_s, _gmtime32_s, _gmtime64_s | Microsoft Docs","pos":[0,51]}]},{"content":"gmtime_s, _gmtime32_s, _gmtime64_s","pos":[1240,1274]},{"content":"Converts a time value to a structure.","pos":[1275,1312]},{"content":"These are versions of <bpt id=\"p1\">[</bpt>_gmtime32, _gmtime64<ept id=\"p1\">](../../c-runtime-library/reference/gmtime-gmtime32-gmtime64.md)</ept> with security enhancements as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1313,1552],"source":" These are versions of [_gmtime32, _gmtime64](../../c-runtime-library/reference/gmtime-gmtime32-gmtime64.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"content":"Syntax","pos":[1561,1567]},{"content":"Parameters","pos":[1820,1830]},{"content":"Pointer to a <ph id=\"ph1\">`tm`</ph> structure.","pos":[1843,1871],"source":" Pointer to a `tm` structure."},{"content":"The fields of the returned structure hold the evaluated value of the <ph id=\"ph1\">`timer`</ph> argument in UTC rather than in local time.","pos":[1872,1991],"source":" The fields of the returned structure hold the evaluated value of the `timer` argument in UTC rather than in local time."},{"content":"Pointer to stored time.","pos":[2008,2031]},{"content":"The time is represented as seconds elapsed since midnight (00:00:00), January 1, 1970, coordinated universal time (UTC).","pos":[2032,2152]},{"content":"Return Value","pos":[2161,2173]},{"content":"Zero if successful.","pos":[2177,2196]},{"content":"The return value is an error code if there is a failure.","pos":[2197,2253]},{"content":"Error codes are defined in Errno.h; for a listing of these errors, see <bpt id=\"p1\">[</bpt>errno<ept id=\"p1\">](../../c-runtime-library/errno-constants.md)</ept>.","pos":[2254,2377],"source":" Error codes are defined in Errno.h; for a listing of these errors, see [errno](../../c-runtime-library/errno-constants.md)."},{"content":"Error Conditions","pos":[2387,2403]},{"content":"Return","pos":[2423,2429]},{"pos":[2430,2438],"content":"Value in"},{"content":"any","pos":[2519,2522]},{"content":"Not modified.","pos":[2532,2545]},{"pos":[2550,2585],"content":"Not <ph id=\"ph1\">`NULL`</ph> (points to valid memory)","source":"Not `NULL` (points to valid memory)"},{"content":"All fields set to -1.","pos":[2602,2623]},{"pos":[2628,2631],"content":"Not"},{"content":"&lt; 0","pos":[2639,2642],"source":"< 0"},{"content":"All fields set to -1.","pos":[2652,2673]},{"content":"In the case of the first two error conditions, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2681,2858],"source":"In the case of the first two error conditions, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and return <ph id=\"ph3\">`EINVAL`</ph>.","pos":[2859,2956],"source":" If execution is allowed to continue, these functions set `errno` to `EINVAL` and return `EINVAL`."},{"content":"Remarks","pos":[2965,2972]},{"content":"The <ph id=\"ph1\">`_gmtime32_s`</ph> function breaks down the <ph id=\"ph2\">`time`</ph> value and stores it in a structure of type <ph id=\"ph3\">`tm`</ph>, defined in Time.h.","pos":[2976,3093],"source":"The `_gmtime32_s` function breaks down the `time` value and stores it in a structure of type `tm`, defined in Time.h."},{"content":"The address of the structure is passed in <ph id=\"ph1\">`_tm`</ph>.","pos":[3094,3142],"source":" The address of the structure is passed in `_tm`."},{"content":"The value of <ph id=\"ph1\">`time`</ph> is usually obtained from a call to the <ph id=\"ph2\">`time`</ph> function.","pos":[3143,3218],"source":" The value of `time` is usually obtained from a call to the `time` function."},{"pos":[3226,3441],"content":"[!NOTE]\n The target environment should try to determine whether daylight savings time is in effect. The C run-time library assumes the United States rules for implementing the calculation of daylight saving time .","leadings":["","> "],"nodes":[{"content":" The target environment should try to determine whether daylight savings time is in effect. The C run-time library assumes the United States rules for implementing the calculation of daylight saving time .","pos":[8,213],"nodes":[{"content":"The target environment should try to determine whether daylight savings time is in effect.","pos":[1,91]},{"content":"The C run-time library assumes the United States rules for implementing the calculation of daylight saving time .","pos":[92,205]}]}]},{"pos":[3448,3527],"content":"Each of the structure fields is of type <ph id=\"ph1\">`int`</ph>, as shown in the following table.","source":"Each of the structure fields is of type `int`, as shown in the following table."},{"content":"Seconds after minute (0 – 59).","pos":[3546,3576]},{"content":"Minutes after hour (0 – 59).","pos":[3595,3623]},{"content":"Hours since midnight (0 – 23).","pos":[3643,3673]},{"content":"Day of month (1 – 31).","pos":[3693,3715]},{"content":"Month (0 – 11; January = 0).","pos":[3734,3762]},{"content":"Year (current year minus 1900).","pos":[3782,3813]},{"content":"Day of week (0 – 6; Sunday = 0).","pos":[3833,3865]},{"content":"Day of year (0 – 365; January 1 = 0).","pos":[3885,3922]},{"content":"Always 0 for <ph id=\"ph1\">`gmtime`</ph>.","pos":[3943,3965],"source":" Always 0 for `gmtime`."},{"content":", which uses the <ph id=\"ph1\">`__time64_t`</ph> structure, allows dates to be expressed up through 23:59:59, December 31, 3000, UTC; whereas <ph id=\"ph2\">`gmtime32_s`</ph> only represent dates through 23:59:59 January 18, 2038, UTC.","pos":[3985,4181],"source":", which uses the `__time64_t` structure, allows dates to be expressed up through 23:59:59, December 31, 3000, UTC; whereas `gmtime32_s` only represent dates through 23:59:59 January 18, 2038, UTC."},{"content":"Midnight, January 1, 1970, is the lower bound of the date range for both these functions.","pos":[4182,4271]},{"content":"is an inline function which evaluates to <ph id=\"ph1\">`_gmtime64_s`</ph> and <ph id=\"ph2\">`time_t`</ph> is equivalent to <ph id=\"ph3\">`__time64_t`</ph>.","pos":[4289,4387],"source":" is an inline function which evaluates to `_gmtime64_s` and `time_t` is equivalent to `__time64_t`."},{"content":"If you need to force the compiler to interpret <ph id=\"ph1\">`time_t`</ph> as the old 32-bit <ph id=\"ph2\">`time_t`</ph>, you can define <ph id=\"ph3\">`_USE_32BIT_TIME_T`</ph>.","pos":[4388,4507],"source":" If you need to force the compiler to interpret `time_t` as the old 32-bit `time_t`, you can define `_USE_32BIT_TIME_T`."},{"content":"Doing this will cause <ph id=\"ph1\">`gmtime_s`</ph> to be in-lined to <ph id=\"ph2\">`_gmtime32_s`</ph>.","pos":[4508,4573],"source":" Doing this will cause `gmtime_s` to be in-lined to `_gmtime32_s`."},{"content":"This is not recommended because your application may fail after January 18, 2038, and it is not allowed on 64-bit platforms.","pos":[4574,4698]},{"content":"Requirements","pos":[4707,4719]},{"content":"Routine","pos":[4726,4733]},{"content":"Required header","pos":[4734,4749]},{"content":"time.h&gt;","pos":[4807,4814],"source":"time.h>"},{"content":"time.h&gt;","pos":[4835,4842],"source":"time.h>"},{"content":"time.h&gt;","pos":[4863,4870],"source":"time.h>"},{"pos":[4878,4996],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[5005,5012]},{"content":".NET Framework Equivalent","pos":[5950,5975]},{"content":"System::DateTime::UtcNow","pos":[5986,6010]},{"content":"System::DateTime::ToUniversalTime","pos":[6092,6125]},{"content":"See Also","pos":[6214,6222]},{"content":"Time Management","pos":[6227,6242]},{"content":"asctime_s, _wasctime_s","pos":[6293,6315]},{"content":"ctime, _ctime32, _ctime64, _wctime, _wctime32, _wctime64","pos":[6381,6437]},{"content":"_ftime, _ftime32, _ftime64","pos":[6529,6555]},{"content":"gmtime, _gmtime32, _gmtime64","pos":[6622,6650]},{"content":"localtime_s, _localtime32_s, _localtime64_s","pos":[6720,6763]},{"content":"_mkgmtime, _mkgmtime32, _mkgmtime64","pos":[6848,6883]},{"content":"mktime, _mktime32, _mktime64","pos":[6959,6987]},{"content":"time, _time32, _time64","pos":[7057,7079]}],"content":"---\ntitle: \"gmtime_s, _gmtime32_s, _gmtime64_s | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_gmtime32_s\"\n  - \"gmtime_s\"\n  - \"_gmtime64_s\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-time-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_gmtime_s\"\n  - \"gmtime64_s\"\n  - \"gmtime32_s\"\n  - \"_gmtime64_s\"\n  - \"gmtime_s\"\n  - \"_gmtime32_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"gmtime_s function\"\n  - \"gmtime32_s function\"\n  - \"time functions\"\n  - \"gmtime64_s function\"\n  - \"_gmtime64_s function\"\n  - \"time structure conversion\"\n  - \"_gmtime_s function\"\n  - \"_gmtime32_s function\"\nms.assetid: 261c7df0-2b0c-44ba-ba61-cb83efaec60f\ncaps.latest.revision: 29\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# gmtime_s, _gmtime32_s, _gmtime64_s\nConverts a time value to a structure. These are versions of [_gmtime32, _gmtime64](../../c-runtime-library/reference/gmtime-gmtime32-gmtime64.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nerrno_t gmtime_s(  \n   struct tm* _tm,  \n   const __time_t* time  \n);  \nerrno_t _gmtime32_s(  \n   struct tm* _tm,  \n   const __time32_t* time  \n);  \nerrno_t _gmtime64_s(  \n   struct tm* _tm,  \n   const __time64_t* time   \n);  \n```  \n  \n#### Parameters  \n `_tm`  \n Pointer to a `tm` structure. The fields of the returned structure hold the evaluated value of the `timer` argument in UTC rather than in local time.  \n  \n `time`  \n Pointer to stored time. The time is represented as seconds elapsed since midnight (00:00:00), January 1, 1970, coordinated universal time (UTC).  \n  \n## Return Value  \n Zero if successful. The return value is an error code if there is a failure. Error codes are defined in Errno.h; for a listing of these errors, see [errno](../../c-runtime-library/errno-constants.md).  \n  \n### Error Conditions  \n  \n|`_tm`|`time`|Return|Value in `_tm`|  \n|-----------|------------|------------|--------------------|  \n|`NULL`|any|`EINVAL`|Not modified.|  \n|Not `NULL` (points to valid memory)|`NULL`|`EINVAL`|All fields set to -1.|  \n|Not `NULL`|< 0|`EINVAL`|All fields set to -1.|  \n  \n In the case of the first two error conditions, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions set `errno` to `EINVAL` and return `EINVAL`.  \n  \n## Remarks  \n The `_gmtime32_s` function breaks down the `time` value and stores it in a structure of type `tm`, defined in Time.h. The address of the structure is passed in `_tm`. The value of `time` is usually obtained from a call to the `time` function.  \n  \n> [!NOTE]\n>  The target environment should try to determine whether daylight savings time is in effect. The C run-time library assumes the United States rules for implementing the calculation of daylight saving time .  \n  \n Each of the structure fields is of type `int`, as shown in the following table.  \n  \n `tm_sec`  \n Seconds after minute (0 – 59).  \n  \n `tm_min`  \n Minutes after hour (0 – 59).  \n  \n `tm_hour`  \n Hours since midnight (0 – 23).  \n  \n `tm_mday`  \n Day of month (1 – 31).  \n  \n `tm_mon`  \n Month (0 – 11; January = 0).  \n  \n `tm_year`  \n Year (current year minus 1900).  \n  \n `tm_wday`  \n Day of week (0 – 6; Sunday = 0).  \n  \n `tm_yday`  \n Day of year (0 – 365; January 1 = 0).  \n  \n `tm_isdst`  \n Always 0 for `gmtime`.  \n  \n `_gmtime64_s`, which uses the `__time64_t` structure, allows dates to be expressed up through 23:59:59, December 31, 3000, UTC; whereas `gmtime32_s` only represent dates through 23:59:59 January 18, 2038, UTC. Midnight, January 1, 1970, is the lower bound of the date range for both these functions.  \n  \n `gmtime_s` is an inline function which evaluates to `_gmtime64_s` and `time_t` is equivalent to `__time64_t`. If you need to force the compiler to interpret `time_t` as the old 32-bit `time_t`, you can define `_USE_32BIT_TIME_T`. Doing this will cause `gmtime_s` to be in-lined to `_gmtime32_s`. This is not recommended because your application may fail after January 18, 2038, and it is not allowed on 64-bit platforms.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`gmtime_s`|\\<time.h>|  \n|`_gmtime32_s`|\\<time.h>|  \n|`_gmtime64_s`|\\<time.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_gmtime64_s.c  \n// This program uses _gmtime64_s to convert a 64-bit  \n// integer representation of coordinated universal time  \n// to a structure named newtime, then uses asctime_s to  \n// convert this structure to an output string.  \n  \n#include <time.h>  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   struct tm newtime;  \n   __int64 ltime;  \n   char buf[26];  \n   errno_t err;  \n  \n   _time64( &ltime );  \n  \n   // Obtain coordinated universal time:   \n   err = _gmtime64_s( &newtime, &ltime );  \n   if (err)  \n   {  \n      printf(\"Invalid Argument to _gmtime64_s.\");  \n   }  \n  \n   // Convert to an ASCII representation   \n   err = asctime_s(buf, 26, &newtime);  \n   if (err)  \n   {  \n      printf(\"Invalid Argument to asctime_s.\");  \n   }  \n  \n   printf( \"Coordinated universal time is %s\\n\",   \n           buf );  \n}  \n```  \n  \n```Output  \nCoordinated universal time is Fri Apr 25 20:12:33 2003  \n```  \n  \n## .NET Framework Equivalent  \n  \n-   [System::DateTime::UtcNow](https://msdn.microsoft.com/en-us/library/system.datetime.utcnow.aspx)  \n  \n-   [System::DateTime::ToUniversalTime](https://msdn.microsoft.com/en-us/library/system.datetime.touniversaltime.aspx)  \n  \n## See Also  \n [Time Management](../../c-runtime-library/time-management.md)   \n [asctime_s, _wasctime_s](../../c-runtime-library/reference/asctime-s-wasctime-s.md)   \n [ctime, _ctime32, _ctime64, _wctime, _wctime32, _wctime64](../../c-runtime-library/reference/ctime-ctime32-ctime64-wctime-wctime32-wctime64.md)   \n [_ftime, _ftime32, _ftime64](../../c-runtime-library/reference/ftime-ftime32-ftime64.md)   \n [gmtime, _gmtime32, _gmtime64](../../c-runtime-library/reference/gmtime-gmtime32-gmtime64.md)   \n [localtime_s, _localtime32_s, _localtime64_s](../../c-runtime-library/reference/localtime-s-localtime32-s-localtime64-s.md)   \n [_mkgmtime, _mkgmtime32, _mkgmtime64](../../c-runtime-library/reference/mkgmtime-mkgmtime32-mkgmtime64.md)   \n [mktime, _mktime32, _mktime64](../../c-runtime-library/reference/mktime-mktime32-mktime64.md)   \n [time, _time32, _time64](../../c-runtime-library/reference/time-time32-time64.md)"}