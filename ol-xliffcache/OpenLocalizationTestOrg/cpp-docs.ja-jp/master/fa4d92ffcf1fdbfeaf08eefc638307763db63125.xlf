<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa4d92ffcf1fdbfeaf08eefc638307763db63125</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\build\reference\guard-enable-control-flow-guard.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8137af0f9afc34452c6e5cdb51d18afd3fe63dbe</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">84567cb170d4ffd154578292d3a8c0de4068dc58</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>-guard (Enable Control Flow Guard) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>/guard (Enable Control Flow Guard)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Enable compiler generation of Control Flow Guard security checks.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>/guard:cf<ept id="p1">**</ept> option causes the compiler to analyze control flow for indirect call targets at compile time, and then to insert code to verify the targets at runtime.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">**</bpt>/guard:cf<ept id="p1">**</ept> is off and must be explicitly enabled.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To explicitly disable this option, use <bpt id="p1">**</bpt>/guard:cf-<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When the <bpt id="p1">**</bpt>/guard:cf<ept id="p1">**</ept> Control Flow Guard (CFG) option is specified, the compiler and linker insert extra runtime security checks to detect attempts to compromise your code.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>During compiling and linking, all indirect calls in your code are analyzed to find every location that the code can reach when it runs correctly.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This information is stored in extra structures in the headers of your binaries.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The compiler also injects a check before every indirect call in your code that ensures the target is one of the verified locations.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If the check fails at runtime on a CFG-aware operating system, the operating system closes the program.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A common attack on software takes advantage of bugs in handling extreme or unexpected inputs.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Carefully crafted input to the application may overwrite a location that contains a pointer to executable code.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This can be used to redirect control flow to code controlled by the attacker.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The CFG runtime checks do not fix the data corruption bugs in your executable.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>They instead make it more difficult for an attacker to use them to execute arbitrary code.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>CFG is a mitigation tool that prevents calls to locations other than function entry points in your code.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It's similar to how Data Execution Prevention (DEP),  <bpt id="p1">[</bpt>/GS<ept id="p1">](../../build/reference/gs-buffer-security-check.md)</ept> stack checks, and <bpt id="p2">[</bpt>/DYNAMICBASE<ept id="p2">](../../build/reference/dynamicbase-use-address-space-layout-randomization.md)</ept> and <bpt id="p3">[</bpt>/HIGHENTROPYVA<ept id="p3">](../../build/reference/highentropyva-support-64-bit-aslr.md)</ept> address space layout randomization (ASLR) lower the chances that your code becomes an exploit vector.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>/guard:cf<ept id="p1">**</ept> option must be passed to both the compiler and linker to build code that uses the CFG exploit mitigation technique.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If your binary is built by using a single <ph id="ph1">`cl`</ph> command, the compiler passes the option to the linker.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you compile and link separately, the option must be set on both the compiler and linker commands.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The /DYNAMICBASE linker option is also required.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To verify that your binary has CFG data, use the <ph id="ph1">`dumpbin /headers /loadconfig`</ph> command.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CFG-enabled binaries have <ph id="ph1">`Guard`</ph> in the list of EXE or DLL characteristics, and Guard Flags include <ph id="ph2">`CF Instrumented`</ph> and <ph id="ph3">`FID table present`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>/guard:cf<ept id="p1">**</ept> option is incompatible with <bpt id="p2">[</bpt>/ZI<ept id="p2">](../../build/reference/z7-zi-zi-debug-information-format.md)</ept> (Edit and Continue debug information) or <bpt id="p3">[</bpt>/clr<ept id="p3">](../../build/reference/clr-common-language-runtime-compilation.md)</ept> (Common Language Runtime Compilation).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Code compiled by using <bpt id="p1">**</bpt>/guard:cf<ept id="p1">**</ept> can be linked to libraries and object files that are not compiled by using the option.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Only this code, when also linked by using the <bpt id="p1">**</bpt>/guard:cf<ept id="p1">**</ept> option and run on a CFG-aware operating system, has CFG protection.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Because code compiled without the option will not stop an attack, we recommend that you use the option on all the code you compile.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>There is a small runtime cost for CFG checks, but the compiler analysis attempts to optimize away the checks on indirect jumps that can be proven to be safe.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To set this compiler option in the Visual Studio development environment</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Open the project's <bpt id="p1">**</bpt>Property Pages<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Working with Project Properties<ept id="p1">](../../ide/working-with-project-properties.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Configuration Properties<ept id="p1">**</ept>, <bpt id="p2">**</bpt>C/C++<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Code Generation<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>Control Flow Guard<ept id="p1">**</ept> property.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In the dropdown control, choose <bpt id="p1">**</bpt>Yes<ept id="p1">**</ept> to enable Control Flow Guard, or <bpt id="p2">**</bpt>No<ept id="p2">**</ept> to disable it.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Compiler Options</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Setting Compiler Options</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>