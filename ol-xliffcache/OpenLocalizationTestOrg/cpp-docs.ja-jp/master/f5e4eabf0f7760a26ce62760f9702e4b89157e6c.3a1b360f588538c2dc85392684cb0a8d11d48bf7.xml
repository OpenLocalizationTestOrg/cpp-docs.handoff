{"nodes":[{"pos":[12,35],"content":"setjmp | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"setjmp | Microsoft Docs","pos":[0,23]}]},{"content":"setjmp","pos":[945,951]},{"content":"Saves the current state of the program.","pos":[952,991]},{"content":"Syntax","pos":[1000,1006]},{"content":"Parameters","pos":[1069,1079]},{"content":"Variable in which environment is stored.","pos":[1092,1132]},{"content":"Return Value","pos":[1141,1153]},{"content":"Returns 0 after saving the stack environment.","pos":[1157,1202]},{"content":"If <ph id=\"ph1\">`setjmp`</ph> returns as a result of a <ph id=\"ph2\">`longjmp`</ph> call, it returns the <ph id=\"ph3\">`value`</ph> argument of <ph id=\"ph4\">`longjmp`</ph>, or if the <ph id=\"ph5\">`value`</ph> argument of <ph id=\"ph6\">`longjmp`</ph> is 0, <ph id=\"ph7\">`setjmp`</ph> returns 1.","pos":[1203,1367],"source":" If `setjmp` returns as a result of a `longjmp` call, it returns the `value` argument of `longjmp`, or if the `value` argument of `longjmp` is 0, `setjmp` returns 1."},{"content":"There is no error return.","pos":[1368,1393]},{"content":"Remarks","pos":[1402,1409]},{"content":"The <ph id=\"ph1\">`setjmp`</ph> function saves a stack environment, which you can subsequently restore, using <ph id=\"ph2\">`longjmp`</ph>.","pos":[1413,1514],"source":"The `setjmp` function saves a stack environment, which you can subsequently restore, using `longjmp`."},{"content":"When used together, <ph id=\"ph1\">`setjmp`</ph> and <ph id=\"ph2\">`longjmp`</ph> provide a way to execute a non-local <ph id=\"ph3\">`goto`</ph>.","pos":[1515,1602],"source":" When used together, `setjmp` and `longjmp` provide a way to execute a non-local `goto`."},{"content":"They are typically used to pass execution control to error-handling or recovery code in a previously called routine without using the normal calling or return conventions.","pos":[1603,1774]},{"content":"A call to <ph id=\"ph1\">`setjmp`</ph> saves the current stack environment in <ph id=\"ph2\">`env`</ph>.","pos":[1781,1845],"source":"A call to `setjmp` saves the current stack environment in `env`."},{"content":"A subsequent call to <ph id=\"ph1\">`longjmp`</ph> restores the saved environment and returns control to the point just after the corresponding <ph id=\"ph2\">`setjmp`</ph> call.","pos":[1846,1984],"source":" A subsequent call to `longjmp` restores the saved environment and returns control to the point just after the corresponding `setjmp` call."},{"content":"All variables (except register variables) accessible to the routine receiving control contain the values they had when <ph id=\"ph1\">`longjmp`</ph> was called.","pos":[1985,2125],"source":" All variables (except register variables) accessible to the routine receiving control contain the values they had when `longjmp` was called."},{"pos":[2132,2203],"content":"It is not possible to use <ph id=\"ph1\">`setjmp`</ph> to jump from native to managed code.","source":"It is not possible to use `setjmp` to jump from native to managed code."},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> <ph id=\"ph1\">`setjmp`</ph> and <ph id=\"ph2\">`longjmp`</ph> do not support C++ object semantics.","pos":[2210,2278],"source":"**Note** `setjmp` and `longjmp` do not support C++ object semantics."},{"content":"In C++ programs, use the C++ exception-handling mechanism.","pos":[2279,2337]},{"pos":[2344,2432],"content":"For more information, see <bpt id=\"p1\">[</bpt>Using setjmp and longjmp<ept id=\"p1\">](../../cpp/using-setjmp-longjmp.md)</ept>.","source":"For more information, see [Using setjmp and longjmp](../../cpp/using-setjmp-longjmp.md)."},{"content":"Requirements","pos":[2441,2453]},{"content":"Routine","pos":[2460,2467]},{"content":"Required header","pos":[2468,2483]},{"content":"setjmp.h&gt;","pos":[2539,2548],"source":"setjmp.h>"},{"pos":[2556,2680],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[2689,2696]},{"pos":[2700,2777],"content":"See the example for <bpt id=\"p1\">[</bpt>_fpreset<ept id=\"p1\">](../../c-runtime-library/reference/fpreset.md)</ept>.","source":"See the example for [_fpreset](../../c-runtime-library/reference/fpreset.md)."},{"content":".NET Framework Equivalent","pos":[2786,2811]},{"content":"Not applicable.","pos":[2815,2830]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[2831,2878],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[2879,3004],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[3013,3021]},{"content":"Process and Environment Control","pos":[3026,3057]},{"content":"longjmp","pos":[3124,3131]},{"content":"_setjmp3","pos":[3184,3192]}],"content":"---\ntitle: \"setjmp | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"setjmp\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"setjmp\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"programs [C++], saving states\"\n  - \"current state\"\n  - \"setjmp function\"\nms.assetid: 684a8b27-e8eb-455b-b4a8-733ca1cbd7d2\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# setjmp\nSaves the current state of the program.  \n  \n## Syntax  \n  \n```  \nint setjmp(  \n   jmp_buf env   \n);  \n```  \n  \n#### Parameters  \n `env`  \n Variable in which environment is stored.  \n  \n## Return Value  \n Returns 0 after saving the stack environment. If `setjmp` returns as a result of a `longjmp` call, it returns the `value` argument of `longjmp`, or if the `value` argument of `longjmp` is 0, `setjmp` returns 1. There is no error return.  \n  \n## Remarks  \n The `setjmp` function saves a stack environment, which you can subsequently restore, using `longjmp`. When used together, `setjmp` and `longjmp` provide a way to execute a non-local `goto`. They are typically used to pass execution control to error-handling or recovery code in a previously called routine without using the normal calling or return conventions.  \n  \n A call to `setjmp` saves the current stack environment in `env`. A subsequent call to `longjmp` restores the saved environment and returns control to the point just after the corresponding `setjmp` call. All variables (except register variables) accessible to the routine receiving control contain the values they had when `longjmp` was called.  \n  \n It is not possible to use `setjmp` to jump from native to managed code.  \n  \n **Note** `setjmp` and `longjmp` do not support C++ object semantics. In C++ programs, use the C++ exception-handling mechanism.  \n  \n For more information, see [Using setjmp and longjmp](../../cpp/using-setjmp-longjmp.md).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`setjmp`|\\<setjmp.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n See the example for [_fpreset](../../c-runtime-library/reference/fpreset.md).  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Process and Environment Control](../../c-runtime-library/process-and-environment-control.md)   \n [longjmp](../../c-runtime-library/reference/longjmp.md)   \n [_setjmp3](../../c-runtime-library/setjmp3.md)"}