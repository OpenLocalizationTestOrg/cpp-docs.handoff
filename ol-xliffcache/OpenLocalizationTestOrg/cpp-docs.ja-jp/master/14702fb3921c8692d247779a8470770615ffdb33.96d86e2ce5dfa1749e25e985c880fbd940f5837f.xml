{"nodes":[{"pos":[12,49],"content":"_bittest, _bittest64 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_bittest, _bittest64 | Microsoft Docs","pos":[0,37]}]},{"content":"_bittest, _bittest64","pos":[711,731]},{"content":"Microsoft Specific","pos":[734,752]},{"pos":[760,881],"content":"Generates the <ph id=\"ph1\">`bt`</ph> instruction, which examines the bit in position <ph id=\"ph2\">`b`</ph> of address <ph id=\"ph3\">`a`</ph>, and returns the value of that bit.","source":"Generates the `bt` instruction, which examines the bit in position `b` of address `a`, and returns the value of that bit."},{"content":"Syntax","pos":[890,896]},{"content":"Parameters","pos":[1055,1065]},{"content":"[in]","pos":[1068,1072]},{"content":"A pointer to the memory to examine.","pos":[1079,1114]},{"content":"[in]","pos":[1120,1124]},{"content":"The bit position to test.","pos":[1131,1156]},{"content":"Return Value","pos":[1166,1178]},{"content":"The bit at the position specified.","pos":[1181,1215]},{"content":"Requirements","pos":[1224,1236]},{"content":"Intrinsic","pos":[1243,1252]},{"content":"Architecture","pos":[1253,1265]},{"content":"Header","pos":[1266,1272]},{"pos":[1340,1349],"content":"x86, ARM,"},{"content":"intrin.h&gt;","pos":[1416,1425],"source":"intrin.h>"},{"pos":[1443,1447],"content":"ARM,"},{"content":"intrin.h&gt;","pos":[1514,1523],"source":"intrin.h>"},{"content":"Remarks","pos":[1533,1540]},{"content":"This routine is only available as an intrinsic.","pos":[1543,1590]},{"content":"Example","pos":[1599,1606]},{"content":"END Microsoft Specific","pos":[2242,2264]},{"content":"See Also","pos":[2275,2283]},{"content":"Compiler Intrinsics","pos":[2287,2306]}],"content":"---\ntitle: \"_bittest, _bittest64 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"_bittest64\"\n  - \"_bittest_cpp\"\n  - \"_bittest64_cpp\"\n  - \"_bittest\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"_bittest intrinsic\"\n  - \"_bittest64 intrinsic\"\n  - \"bt instruction\"\nms.assetid: 15e62afb-abea-4ee7-a6b1-13efa2034937\ncaps.latest.revision: 18\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _bittest, _bittest64\n**Microsoft Specific**  \n  \nGenerates the `bt` instruction, which examines the bit in position `b` of address `a`, and returns the value of that bit.  \n  \n## Syntax  \n  \n```  \nunsigned char _bittest(  \n   long const *a,  \n   long b  \n);  \nunsigned char _bittest64(  \n   __int64 const *a,  \n   __int64 b  \n);  \n```  \n  \n### Parameters  \n[in] `a`  \nA pointer to the memory to examine.  \n  \n[in] `b`  \nThe bit position to test.  \n  \n### Return Value  \nThe bit at the position specified.  \n  \n## Requirements  \n  \n|Intrinsic|Architecture|Header|  \n|---------------|------------------|------------|  \n|`_bittest`|x86, ARM, [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]|\\<intrin.h>|  \n|`_bittest64`|ARM, [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]|\\<intrin.h>|  \n  \n## Remarks  \nThis routine is only available as an intrinsic.  \n  \n## Example  \n  \n```cpp  \n// bittest.cpp  \n// processor: x86, ARM, x64  \n  \n#include <stdio.h>  \n#include <intrin.h>  \n  \nlong num = 78002;  \n  \nint main()  \n{  \n    unsigned char bits[32];  \n    long nBit;  \n  \n    printf_s(\"Number: %d\\n\", num);  \n  \n    for (nBit = 0; nBit < 31; nBit++)  \n    {  \n        bits[nBit] = _bittest(&num, nBit);  \n    }  \n  \n    printf_s(\"Binary representation:\\n\");  \n    while (nBit--)  \n    {  \n        if (bits[nBit])  \n            printf_s(\"1\");  \n        else  \n            printf_s(\"0\");  \n    }  \n}  \n```  \n  \n```Output  \nNumber: 78002  \nBinary representation:  \n0000000000000010011000010110010  \n```  \n  \n**END Microsoft Specific**  \n  \n## See Also  \n[Compiler Intrinsics](../intrinsics/compiler-intrinsics.md)"}