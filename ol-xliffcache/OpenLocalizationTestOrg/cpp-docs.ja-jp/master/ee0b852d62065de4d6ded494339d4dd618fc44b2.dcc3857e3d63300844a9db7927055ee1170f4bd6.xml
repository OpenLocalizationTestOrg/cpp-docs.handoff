{"nodes":[{"pos":[12,43],"content":"numpunct Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"numpunct Class | Microsoft Docs","pos":[0,31]}]},{"pos":[663,677],"content":"numpunct Class","linkify":"numpunct Class","nodes":[{"content":"numpunct Class","pos":[0,14]}]},{"pos":[678,899],"content":"A template class that describes an object that can serve as a local facet to describe the sequences of type <ph id=\"ph1\">`CharType`</ph> used to represent information about the formatting and punctuation of numeric and Boolean expressions.","source":"A template class that describes an object that can serve as a local facet to describe the sequences of type `CharType` used to represent information about the formatting and punctuation of numeric and Boolean expressions."},{"pos":[908,914],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1009,1019],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type used within a program to encode characters in a locale.","pos":[1037,1101]},{"pos":[1110,1117],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"As with any locale facet, the static object ID has an initial stored value of zero.","pos":[1121,1204]},{"content":"The first attempt to access its stored value stores a unique positive value in <bpt id=\"p1\">**</bpt>id.<ept id=\"p1\">**</ept>","pos":[1205,1291],"source":" The first attempt to access its stored value stores a unique positive value in **id.**"},{"pos":[1301,1313],"content":"Constructors","linkify":"Constructors","nodes":[{"content":"Constructors","pos":[0,12]}]},{"pos":[1334,1365],"content":"<bpt id=\"p1\">[</bpt>numpunct<ept id=\"p1\">](#numpunct__numpunct)</ept>","source":"[numpunct](#numpunct__numpunct)"},{"pos":[1366,1413],"content":"The constructor for objects of type <ph id=\"ph1\">`numpunct`</ph>.","source":"The constructor for objects of type `numpunct`."},{"pos":[1424,1432],"content":"Typedefs","linkify":"Typedefs","nodes":[{"content":"Typedefs","pos":[0,8]}]},{"pos":[1453,1486],"content":"<bpt id=\"p1\">[</bpt>char_type<ept id=\"p1\">](#numpunct__char_type)</ept>","source":"[char_type](#numpunct__char_type)"},{"content":"A type that is used to describe a character used by a locale.","pos":[1487,1548]},{"pos":[1553,1590],"content":"<bpt id=\"p1\">[</bpt>string_type<ept id=\"p1\">](#numpunct__string_type)</ept>","source":"[string_type](#numpunct__string_type)"},{"pos":[1591,1663],"content":"A type that describes a string containing characters of type <ph id=\"ph1\">`CharType`</ph>.","source":"A type that describes a string containing characters of type `CharType`."},{"pos":[1674,1690],"content":"Member Functions","linkify":"Member Functions","nodes":[{"content":"Member Functions","pos":[0,16]}]},{"pos":[1711,1752],"content":"<bpt id=\"p1\">[</bpt>decimal_point<ept id=\"p1\">](#numpunct__decimal_point)</ept>","source":"[decimal_point](#numpunct__decimal_point)"},{"content":"Returns a locale-specific element to use as a decimal point.","pos":[1753,1813]},{"pos":[1818,1865],"content":"<bpt id=\"p1\">[</bpt>do_decimal_point<ept id=\"p1\">](#numpunct__do_decimal_point)</ept>","source":"[do_decimal_point](#numpunct__do_decimal_point)"},{"content":"A protected virtual member function that is called to return a locale-specific element to use as a decimal point.","pos":[1866,1979]},{"pos":[1984,2023],"content":"<bpt id=\"p1\">[</bpt>do_falsename<ept id=\"p1\">](#numpunct__do_falsename)</ept>","source":"[do_falsename](#numpunct__do_falsename)"},{"pos":[2024,2147],"content":"A protected virtual member function that is called to return a string to use as a text representation of the value <ph id=\"ph1\">`false`</ph>.","source":"A protected virtual member function that is called to return a string to use as a text representation of the value `false`."},{"pos":[2152,2189],"content":"<bpt id=\"p1\">[</bpt>do_grouping<ept id=\"p1\">](#numpunct__do_grouping)</ept>","source":"[do_grouping](#numpunct__do_grouping)"},{"content":"A protected virtual member function that is called to return a locale-specific rule for determining how digits are grouped to the left of any decimal point.","pos":[2190,2346]},{"pos":[2351,2398],"content":"<bpt id=\"p1\">[</bpt>do_thousands_sep<ept id=\"p1\">](#numpunct__do_thousands_sep)</ept>","source":"[do_thousands_sep](#numpunct__do_thousands_sep)"},{"content":"A protected virtual member function that is called to return a locale-specific element to use as a thousands separator.","pos":[2399,2518]},{"pos":[2523,2560],"content":"<bpt id=\"p1\">[</bpt>do_truename<ept id=\"p1\">](#numpunct__do_truename)</ept>","source":"[do_truename](#numpunct__do_truename)"},{"pos":[2561,2683],"content":"A protected virtual member function that is called to return a string to use as a text representation of the value <ph id=\"ph1\">`true`</ph>.","source":"A protected virtual member function that is called to return a string to use as a text representation of the value `true`."},{"pos":[2688,2721],"content":"<bpt id=\"p1\">[</bpt>falsename<ept id=\"p1\">](#numpunct__falsename)</ept>","source":"[falsename](#numpunct__falsename)"},{"pos":[2722,2792],"content":"Returns a string to use as a text representation of the value <ph id=\"ph1\">`false`</ph>.","source":"Returns a string to use as a text representation of the value `false`."},{"pos":[2797,2828],"content":"<bpt id=\"p1\">[</bpt>grouping<ept id=\"p1\">](#numpunct__grouping)</ept>","source":"[grouping](#numpunct__grouping)"},{"content":"Returns a locale-specific rule for determining how digits are grouped to the left of any decimal point.","pos":[2829,2932]},{"pos":[2937,2978],"content":"<bpt id=\"p1\">[</bpt>thousands_sep<ept id=\"p1\">](#numpunct__thousands_sep)</ept>","source":"[thousands_sep](#numpunct__thousands_sep)"},{"content":"Returns a locale-specific element to use as a thousands separator.","pos":[2979,3045]},{"pos":[3050,3081],"content":"<bpt id=\"p1\">[</bpt>truename<ept id=\"p1\">](#numpunct__truename)</ept>","source":"[truename](#numpunct__truename)"},{"pos":[3082,3151],"content":"Returns a string to use as a text representation of the value <ph id=\"ph1\">`true`</ph>.","source":"Returns a string to use as a text representation of the value `true`."},{"pos":[3161,3173],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3177,3198],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>locale&gt;","source":"**Header:** \\<locale>"},{"pos":[3205,3223],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[3233,3288],"content":"<bpt id=\"p1\">&lt;a name=\"numpunct__char_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  numpunct::char_type","linkify":"<a name=\"numpunct__char_type\"></a>  numpunct::char_type","source":"<a name=\"numpunct__char_type\"></a>  numpunct::char_type"},{"content":"A type that is used to describe a character used by a locale.","pos":[3292,3353]},{"pos":[3408,3415],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3419,3481],"content":"The type is a synonym for the template parameter <bpt id=\"p1\">**</bpt>CharType.<ept id=\"p1\">**</ept>","source":"The type is a synonym for the template parameter **CharType.**"},{"pos":[3491,3554],"content":"<bpt id=\"p1\">&lt;a name=\"numpunct__decimal_point\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  numpunct::decimal_point","linkify":"<a name=\"numpunct__decimal_point\"></a>  numpunct::decimal_point","source":"<a name=\"numpunct__decimal_point\"></a>  numpunct::decimal_point"},{"content":"Returns a locale-specific element to use as a decimal point.","pos":[3558,3618]},{"pos":[3675,3687],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A locale-specific element to use as a decimal point.","pos":[3691,3743]},{"pos":[3753,3760],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3764,3840],"content":"The member function returns <bpt id=\"p1\">[</bpt>do_decimal_point<ept id=\"p1\">](#numpunct__do_decimal_point)</ept>.","source":"The member function returns [do_decimal_point](#numpunct__do_decimal_point)."},{"pos":[3850,3857],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4454,4523],"content":"<bpt id=\"p1\">&lt;a name=\"numpunct__do_decimal_point\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  numpunct::do_decimal_point","linkify":"<a name=\"numpunct__do_decimal_point\"></a>  numpunct::do_decimal_point","source":"<a name=\"numpunct__do_decimal_point\"></a>  numpunct::do_decimal_point"},{"content":"A protected virtual member function that is called to return a locale-specific element to use as a decimal point.","pos":[4527,4640]},{"pos":[4708,4720],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A locale-specific element to use as a decimal point.","pos":[4724,4776]},{"pos":[4786,4793],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4798,4924],"content":"See the example for <bpt id=\"p1\">[</bpt>decimal_point<ept id=\"p1\">](#numpunct__decimal_point)</ept>, where the virtual member function is called by <ph id=\"ph1\">`decimal_point`</ph>.","source":"See the example for [decimal_point](#numpunct__decimal_point), where the virtual member function is called by `decimal_point`."},{"pos":[4934,4995],"content":"<bpt id=\"p1\">&lt;a name=\"numpunct__do_falsename\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  numpunct::do_falsename","linkify":"<a name=\"numpunct__do_falsename\"></a>  numpunct::do_falsename","source":"<a name=\"numpunct__do_falsename\"></a>  numpunct::do_falsename"},{"pos":[4999,5111],"content":"The protected virtual member function returns a sequence to use as a text representation of the value <bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept>.","source":"The protected virtual member function returns a sequence to use as a text representation of the value **false**."},{"pos":[5178,5190],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5194,5280],"content":"A string containing a sequence to use as a text representation of the value <bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept>.","source":"A string containing a sequence to use as a text representation of the value **false**."},{"pos":[5290,5297],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5301,5396],"content":"The member function returns the string \"false\" to represent the value <bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept> in all locales.","source":"The member function returns the string \"false\" to represent the value **false** in all locales."},{"pos":[5406,5413],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5418,5532],"content":"See the example for <bpt id=\"p1\">[</bpt>falsename<ept id=\"p1\">](#numpunct__falsename)</ept>, where the virtual member function is called by <ph id=\"ph1\">`falsename`</ph>.","source":"See the example for [falsename](#numpunct__falsename), where the virtual member function is called by `falsename`."},{"pos":[5542,5601],"content":"<bpt id=\"p1\">&lt;a name=\"numpunct__do_grouping\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  numpunct::do_grouping","linkify":"<a name=\"numpunct__do_grouping\"></a>  numpunct::do_grouping","source":"<a name=\"numpunct__do_grouping\"></a>  numpunct::do_grouping"},{"content":"A protected virtual member function that is called to return a locale-specific rule for determining how digits are grouped to the left of any decimal point.","pos":[5605,5761]},{"pos":[5822,5834],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A locale-specific rule for determining how digits are grouped to the left of any decimal point.","pos":[5838,5933]},{"pos":[5943,5950],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The protected virtual member function returns a locale-specific rule for determining how digits are grouped to the left of any decimal point.","pos":[5954,6095]},{"content":"The encoding is the same as for <bpt id=\"p1\">**</bpt>lconv::grouping<ept id=\"p1\">**</ept>.","pos":[6096,6148],"source":" The encoding is the same as for **lconv::grouping**."},{"pos":[6158,6165],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6170,6283],"content":"See the example for <bpt id=\"p1\">[</bpt>grouping<ept id=\"p1\">](#numpunct__grouping)</ept>, where the virtual member function is called by <bpt id=\"p2\">**</bpt>grouping<ept id=\"p2\">**</ept>.","source":"See the example for [grouping](#numpunct__grouping), where the virtual member function is called by **grouping**."},{"pos":[6293,6362],"content":"<bpt id=\"p1\">&lt;a name=\"numpunct__do_thousands_sep\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  numpunct::do_thousands_sep","linkify":"<a name=\"numpunct__do_thousands_sep\"></a>  numpunct::do_thousands_sep","source":"<a name=\"numpunct__do_thousands_sep\"></a>  numpunct::do_thousands_sep"},{"content":"A protected virtual member function that is called to return a locale-specific element to use as a thousands separator.","pos":[6366,6485]},{"pos":[6553,6565],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a locale-specific element to use as a thousands separator.","pos":[6569,6635]},{"pos":[6645,6652],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6656,6810],"content":"The protected virtual member function returns a locale-specific element of type <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept> to use as a group separator to the left of any decimal point.","source":"The protected virtual member function returns a locale-specific element of type **CharType** to use as a group separator to the left of any decimal point."},{"pos":[6820,6827],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6832,6958],"content":"See the example for <bpt id=\"p1\">[</bpt>thousands_sep<ept id=\"p1\">](#numpunct__thousands_sep)</ept>, where the virtual member function is called by <ph id=\"ph1\">`thousands_sep`</ph>.","source":"See the example for [thousands_sep](#numpunct__thousands_sep), where the virtual member function is called by `thousands_sep`."},{"pos":[6968,7027],"content":"<bpt id=\"p1\">&lt;a name=\"numpunct__do_truename\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  numpunct::do_truename","linkify":"<a name=\"numpunct__do_truename\"></a>  numpunct::do_truename","source":"<a name=\"numpunct__do_truename\"></a>  numpunct::do_truename"},{"pos":[7031,7155],"content":"A protected virtual member function that is called to return a string to use as a text representation of the value <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept>.","source":"A protected virtual member function that is called to return a string to use as a text representation of the value **true**."},{"pos":[7221,7228],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7232,7295],"content":"A string to use as a text representation of the value <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept>.","source":"A string to use as a text representation of the value **true**."},{"pos":[7302,7369],"content":"All locales return a string \"true\" to represent the value <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept>.","source":"All locales return a string \"true\" to represent the value **true**."},{"pos":[7379,7386],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7391,7502],"content":"See the example for <bpt id=\"p1\">[</bpt>truename<ept id=\"p1\">](#numpunct__truename)</ept>, where the virtual member function is called by <ph id=\"ph1\">`truename`</ph>.","source":"See the example for [truename](#numpunct__truename), where the virtual member function is called by `truename`."},{"pos":[7512,7567],"content":"<bpt id=\"p1\">&lt;a name=\"numpunct__falsename\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  numpunct::falsename","linkify":"<a name=\"numpunct__falsename\"></a>  numpunct::falsename","source":"<a name=\"numpunct__falsename\"></a>  numpunct::falsename"},{"pos":[7571,7643],"content":"Returns a string to use as a text representation of the value <bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept>.","source":"Returns a string to use as a text representation of the value **false**."},{"pos":[7699,7711],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7715,7818],"content":"A string containing a sequence of <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>s to use as a text representation of the value <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"A string containing a sequence of **CharType**s to use as a text representation of the value **false**."},{"pos":[7828,7835],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7839,7934],"content":"The member function returns the string \"false\" to represent the value <bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept> in all locales.","source":"The member function returns the string \"false\" to represent the value **false** in all locales."},{"pos":[7941,8009],"content":"The member function returns <bpt id=\"p1\">[</bpt>do_falsename<ept id=\"p1\">](#numpunct__do_falsename)</ept>.","source":"The member function returns [do_falsename](#numpunct__do_falsename)."},{"pos":[8019,8026],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8902,8955],"content":"<bpt id=\"p1\">&lt;a name=\"numpunct__grouping\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  numpunct::grouping","linkify":"<a name=\"numpunct__grouping\"></a>  numpunct::grouping","source":"<a name=\"numpunct__grouping\"></a>  numpunct::grouping"},{"content":"Returns a locale-specific rule for determining how digits are grouped to the left of any decimal point.","pos":[8959,9062]},{"pos":[9112,9124],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A locale-specific rule for determining how digits are grouped to the left of any decimal point.","pos":[9128,9223]},{"pos":[9233,9240],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9244,9310],"content":"The member function returns <bpt id=\"p1\">[</bpt>do_grouping<ept id=\"p1\">](#numpunct__do_grouping)</ept>.","source":"The member function returns [do_grouping](#numpunct__do_grouping)."},{"pos":[9320,9327],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10072,10125],"content":"<bpt id=\"p1\">&lt;a name=\"numpunct__numpunct\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  numpunct::numpunct","linkify":"<a name=\"numpunct__numpunct\"></a>  numpunct::numpunct","source":"<a name=\"numpunct__numpunct\"></a>  numpunct::numpunct"},{"pos":[10129,10176],"content":"The constructor for objects of type <ph id=\"ph1\">`numpunct`</ph>.","source":"The constructor for objects of type `numpunct`."},{"pos":[10238,10248],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Integer value used to specify the type of memory management for the object.","pos":[10263,10338]},{"pos":[10348,10355],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10359,10432],"content":"The possible values for the <ph id=\"ph1\">`_Refs`</ph> parameter and their significance are:","source":"The possible values for the `_Refs` parameter and their significance are:"},{"content":"0: The lifetime of the object is managed by the locales that contain it.","pos":[10442,10514]},{"content":"1: The lifetime of the object must be manually managed.","pos":[10524,10579]},{"content":"<ph id=\"ph1\">\\&gt;</ph> 0: These values are not defined.","pos":[10589,10624],"source":"\\> 0: These values are not defined."},{"content":"No direct examples are possible, because the destructor is protected.","pos":[10631,10700]},{"pos":[10707,10835],"content":"The constructor initializes its base object with <bpt id=\"p1\">**</bpt>locale::<ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>facet<ept id=\"p2\">](../standard-library/locale-class.md#facet_class)</ept>( <ph id=\"ph1\">`_Refs`</ph>).","source":"The constructor initializes its base object with **locale::**[facet](../standard-library/locale-class.md#facet_class)( `_Refs`)."},{"pos":[10845,10904],"content":"<bpt id=\"p1\">&lt;a name=\"numpunct__string_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  numpunct::string_type","linkify":"<a name=\"numpunct__string_type\"></a>  numpunct::string_type","source":"<a name=\"numpunct__string_type\"></a>  numpunct::string_type"},{"pos":[10908,10982],"content":"A type that describes a string containing characters of type <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>.","source":"A type that describes a string containing characters of type **CharType**."},{"pos":[11072,11079],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11083,11255],"content":"The type describes a specialization of template class <bpt id=\"p1\">[</bpt>basic_string<ept id=\"p1\">](../standard-library/basic-string-class.md)</ept> whose objects can store copies of the punctuation sequences.","source":"The type describes a specialization of template class [basic_string](../standard-library/basic-string-class.md) whose objects can store copies of the punctuation sequences."},{"pos":[11265,11328],"content":"<bpt id=\"p1\">&lt;a name=\"numpunct__thousands_sep\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  numpunct::thousands_sep","linkify":"<a name=\"numpunct__thousands_sep\"></a>  numpunct::thousands_sep","source":"<a name=\"numpunct__thousands_sep\"></a>  numpunct::thousands_sep"},{"content":"Returns a locale-specific element to use as a thousands separator.","pos":[11332,11398]},{"pos":[11455,11467],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A locale-specific element to use as a thousands separator.","pos":[11471,11529]},{"pos":[11539,11546],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11550,11626],"content":"The member function returns <bpt id=\"p1\">[</bpt>do_thousands_sep<ept id=\"p1\">](#numpunct__do_thousands_sep)</ept>.","source":"The member function returns [do_thousands_sep](#numpunct__do_thousands_sep)."},{"pos":[11636,11643],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12239,12292],"content":"<bpt id=\"p1\">&lt;a name=\"numpunct__truename\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  numpunct::truename","linkify":"<a name=\"numpunct__truename\"></a>  numpunct::truename","source":"<a name=\"numpunct__truename\"></a>  numpunct::truename"},{"pos":[12296,12367],"content":"Returns a string to use as a text representation of the value <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept>.","source":"Returns a string to use as a text representation of the value **true**."},{"pos":[12423,12435],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12439,12502],"content":"A string to use as a text representation of the value <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept>.","source":"A string to use as a text representation of the value **true**."},{"pos":[12512,12519],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12523,12589],"content":"The member function returns <bpt id=\"p1\">[</bpt>do_truename<ept id=\"p1\">](#numpunct__do_truename)</ept>.","source":"The member function returns [do_truename](#numpunct__do_truename)."},{"pos":[12596,12663],"content":"All locales return a string \"true\" to represent the value <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept>.","source":"All locales return a string \"true\" to represent the value **true**."},{"pos":[12673,12680],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13555,13563],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>locale&gt;<ept id=\"p1\">](../standard-library/locale.md)</ept><ph id=\"ph2\"> </ph>","pos":[13567,13610],"source":"[\\<locale>](../standard-library/locale.md) "},{"content":"<bpt id=\"p1\"> [</bpt>facet Class<ept id=\"p1\">](../standard-library/locale-class.md#facet_class)</ept><ph id=\"ph1\"> </ph>","pos":[13613,13677],"source":" [facet Class](../standard-library/locale-class.md#facet_class) "},{"content":"<bpt id=\"p1\"> [</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept>","pos":[13680,13790],"source":" [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)"}],"content":"---\ntitle: \"numpunct Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"xlocnum/std::numpunct\"\n  - \"std::numpunct\"\n  - \"numpunct\"\n  - \"std.numpunct\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"numpunct class\"\nms.assetid: 73fb93cc-ac11-4c98-987c-bfa6267df596\ncaps.latest.revision: 22\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# numpunct Class\nA template class that describes an object that can serve as a local facet to describe the sequences of type `CharType` used to represent information about the formatting and punctuation of numeric and Boolean expressions.  \n  \n## Syntax  \n  \n```  \ntemplate <class CharType>  \nclass numpunct : public locale::facet;  \n```  \n  \n#### Parameters  \n `CharType`  \n The type used within a program to encode characters in a locale.  \n  \n## Remarks  \n As with any locale facet, the static object ID has an initial stored value of zero. The first attempt to access its stored value stores a unique positive value in **id.**  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[numpunct](#numpunct__numpunct)|The constructor for objects of type `numpunct`.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[char_type](#numpunct__char_type)|A type that is used to describe a character used by a locale.|  \n|[string_type](#numpunct__string_type)|A type that describes a string containing characters of type `CharType`.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[decimal_point](#numpunct__decimal_point)|Returns a locale-specific element to use as a decimal point.|  \n|[do_decimal_point](#numpunct__do_decimal_point)|A protected virtual member function that is called to return a locale-specific element to use as a decimal point.|  \n|[do_falsename](#numpunct__do_falsename)|A protected virtual member function that is called to return a string to use as a text representation of the value `false`.|  \n|[do_grouping](#numpunct__do_grouping)|A protected virtual member function that is called to return a locale-specific rule for determining how digits are grouped to the left of any decimal point.|  \n|[do_thousands_sep](#numpunct__do_thousands_sep)|A protected virtual member function that is called to return a locale-specific element to use as a thousands separator.|  \n|[do_truename](#numpunct__do_truename)|A protected virtual member function that is called to return a string to use as a text representation of the value `true`.|  \n|[falsename](#numpunct__falsename)|Returns a string to use as a text representation of the value `false`.|  \n|[grouping](#numpunct__grouping)|Returns a locale-specific rule for determining how digits are grouped to the left of any decimal point.|  \n|[thousands_sep](#numpunct__thousands_sep)|Returns a locale-specific element to use as a thousands separator.|  \n|[truename](#numpunct__truename)|Returns a string to use as a text representation of the value `true`.|  \n  \n## Requirements  \n **Header:** \\<locale>  \n  \n **Namespace:** std  \n  \n##  <a name=\"numpunct__char_type\"></a>  numpunct::char_type  \n A type that is used to describe a character used by a locale.  \n  \n```  \ntypedef CharType char_type;  \n```  \n  \n### Remarks  \n The type is a synonym for the template parameter **CharType.**  \n  \n##  <a name=\"numpunct__decimal_point\"></a>  numpunct::decimal_point  \n Returns a locale-specific element to use as a decimal point.  \n  \n```  \nCharType decimal_point() const;\n```  \n  \n### Return Value  \n A locale-specific element to use as a decimal point.  \n  \n### Remarks  \n The member function returns [do_decimal_point](#numpunct__do_decimal_point).  \n  \n### Example  \n  \n```cpp  \n// numpunct_decimal_point.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n#include <sstream>  \nusing namespace std;  \nint main( )  \n{  \n   locale loc( \"german_germany\" );  \n  \n   const numpunct <char> &npunct =   \n   use_facet <numpunct <char> >( loc);  \n   cout << loc.name( ) << \" decimal point \"<<   \n   npunct.decimal_point( ) << endl;  \n   cout << loc.name( ) << \" thousands separator \"   \n   << npunct.thousands_sep( ) << endl;  \n};  \n```  \n  \n```Output  \nGerman_Germany.1252 decimal point ,  \nGerman_Germany.1252 thousands separator .  \n```  \n  \n##  <a name=\"numpunct__do_decimal_point\"></a>  numpunct::do_decimal_point  \n A protected virtual member function that is called to return a locale-specific element to use as a decimal point.  \n  \n```  \nvirtual CharType do_decimal_point() const;\n```  \n  \n### Return Value  \n A locale-specific element to use as a decimal point.  \n  \n### Example  \n  See the example for [decimal_point](#numpunct__decimal_point), where the virtual member function is called by `decimal_point`.  \n  \n##  <a name=\"numpunct__do_falsename\"></a>  numpunct::do_falsename  \n The protected virtual member function returns a sequence to use as a text representation of the value **false**.  \n  \n```  \nvirtual string_type do_falsename() const;\n```  \n  \n### Return Value  \n A string containing a sequence to use as a text representation of the value **false**.  \n  \n### Remarks  \n The member function returns the string \"false\" to represent the value **false** in all locales.  \n  \n### Example  \n  See the example for [falsename](#numpunct__falsename), where the virtual member function is called by `falsename`.  \n  \n##  <a name=\"numpunct__do_grouping\"></a>  numpunct::do_grouping  \n A protected virtual member function that is called to return a locale-specific rule for determining how digits are grouped to the left of any decimal point.  \n  \n```  \nvirtual string do_grouping() const;\n```  \n  \n### Return Value  \n A locale-specific rule for determining how digits are grouped to the left of any decimal point.  \n  \n### Remarks  \n The protected virtual member function returns a locale-specific rule for determining how digits are grouped to the left of any decimal point. The encoding is the same as for **lconv::grouping**.  \n  \n### Example  \n  See the example for [grouping](#numpunct__grouping), where the virtual member function is called by **grouping**.  \n  \n##  <a name=\"numpunct__do_thousands_sep\"></a>  numpunct::do_thousands_sep  \n A protected virtual member function that is called to return a locale-specific element to use as a thousands separator.  \n  \n```  \nvirtual CharType do_thousands_sep() const;\n```  \n  \n### Return Value  \n Returns a locale-specific element to use as a thousands separator.  \n  \n### Remarks  \n The protected virtual member function returns a locale-specific element of type **CharType** to use as a group separator to the left of any decimal point.  \n  \n### Example  \n  See the example for [thousands_sep](#numpunct__thousands_sep), where the virtual member function is called by `thousands_sep`.  \n  \n##  <a name=\"numpunct__do_truename\"></a>  numpunct::do_truename  \n A protected virtual member function that is called to return a string to use as a text representation of the value **true**.  \n  \n```  \nvirtual string_type do_truename() const;\n```  \n  \n### Remarks  \n A string to use as a text representation of the value **true**.  \n  \n All locales return a string \"true\" to represent the value **true**.  \n  \n### Example  \n  See the example for [truename](#numpunct__truename), where the virtual member function is called by `truename`.  \n  \n##  <a name=\"numpunct__falsename\"></a>  numpunct::falsename  \n Returns a string to use as a text representation of the value **false**.  \n  \n```  \nstring_type falsename() const;\n```  \n  \n### Return Value  \n A string containing a sequence of **CharType**s to use as a text representation of the value **false**.  \n  \n### Remarks  \n The member function returns the string \"false\" to represent the value **false** in all locales.  \n  \n The member function returns [do_falsename](#numpunct__do_falsename).  \n  \n### Example  \n  \n```cpp  \n// numpunct_falsename.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n#include <sstream>  \nusing namespace std;  \nint main( )  \n{  \n   locale loc( \"English\" );  \n  \n   const numpunct <char> &npunct = use_facet <numpunct <char> >( loc );  \n   cout << loc.name( ) << \" truename \"<< npunct.truename( ) << endl;  \n   cout << loc.name( ) << \" falsename \"<< npunct.falsename( ) << endl;  \n  \n   locale loc2( \"French\" );  \n   const numpunct <char> &npunct2 = use_facet <numpunct <char> >(loc2);  \n   cout << loc2.name( ) << \" truename \"<< npunct2.truename( ) << endl;  \n   cout << loc2.name( ) << \" falsename \"<< npunct2.falsename( ) << endl;  \n}  \n```  \n  \n```Output  \nEnglish_United States.1252 truename true  \nEnglish_United States.1252 falsename false  \nFrench_France.1252 truename true  \nFrench_France.1252 falsename false  \n```  \n  \n##  <a name=\"numpunct__grouping\"></a>  numpunct::grouping  \n Returns a locale-specific rule for determining how digits are grouped to the left of any decimal point.  \n  \n```  \nstring grouping() const;\n```  \n  \n### Return Value  \n A locale-specific rule for determining how digits are grouped to the left of any decimal point.  \n  \n### Remarks  \n The member function returns [do_grouping](#numpunct__do_grouping).  \n  \n### Example  \n  \n```cpp  \n// numpunct_grouping.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n#include <sstream>  \nusing namespace std;  \nint main( )  \n{  \n   locale loc( \"german_germany\");  \n  \n   const numpunct <char> &npunct =   \n       use_facet < numpunct <char> >( loc );  \n   for (unsigned int i = 0; i < npunct.grouping( ).length( ); i++)  \n   {  \n      cout << loc.name( ) << \" international grouping:\\n the \"  \n           << i <<\"th group to the left of the radix character \"  \n           << \"is of size \" << (int)(npunct.grouping ( )[i])   \n           << endl;  \n   }  \n}  \n```  \n  \n```Output  \nGerman_Germany.1252 international grouping:  \n the 0th group to the left of the radix character is of size 3  \n```  \n  \n##  <a name=\"numpunct__numpunct\"></a>  numpunct::numpunct  \n The constructor for objects of type `numpunct`.  \n  \n```  \nexplicit numpunct(size_t _Refs = 0);\n```  \n  \n### Parameters  \n `_Refs`  \n Integer value used to specify the type of memory management for the object.  \n  \n### Remarks  \n The possible values for the `_Refs` parameter and their significance are:  \n  \n-   0: The lifetime of the object is managed by the locales that contain it.  \n  \n-   1: The lifetime of the object must be manually managed.  \n  \n-   \\> 0: These values are not defined.  \n  \n No direct examples are possible, because the destructor is protected.  \n  \n The constructor initializes its base object with **locale::**[facet](../standard-library/locale-class.md#facet_class)( `_Refs`).  \n  \n##  <a name=\"numpunct__string_type\"></a>  numpunct::string_type  \n A type that describes a string containing characters of type **CharType**.  \n  \n```  \ntypedef basic_string<CharType, Traits, Allocator> string_type;  \n```  \n  \n### Remarks  \n The type describes a specialization of template class [basic_string](../standard-library/basic-string-class.md) whose objects can store copies of the punctuation sequences.  \n  \n##  <a name=\"numpunct__thousands_sep\"></a>  numpunct::thousands_sep  \n Returns a locale-specific element to use as a thousands separator.  \n  \n```  \nCharType thousands_sep() const;\n```  \n  \n### Return Value  \n A locale-specific element to use as a thousands separator.  \n  \n### Remarks  \n The member function returns [do_thousands_sep](#numpunct__do_thousands_sep).  \n  \n### Example  \n  \n```cpp  \n// numpunct_thou_sep.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n#include <sstream>  \nusing namespace std;  \nint main( )  \n{  \n   locale loc( \"german_germany\" );  \n  \n   const numpunct <char> &npunct =   \n   use_facet < numpunct < char > >( loc );  \n   cout << loc.name( ) << \" decimal point \"<<   \n   npunct.decimal_point( ) << endl;  \n   cout << loc.name( ) << \" thousands separator \"   \n   << npunct.thousands_sep( ) << endl;  \n};  \n```  \n  \n```Output  \nGerman_Germany.1252 decimal point ,  \nGerman_Germany.1252 thousands separator .  \n```  \n  \n##  <a name=\"numpunct__truename\"></a>  numpunct::truename  \n Returns a string to use as a text representation of the value **true**.  \n  \n```  \nstring_type falsename() const;\n```  \n  \n### Return Value  \n A string to use as a text representation of the value **true**.  \n  \n### Remarks  \n The member function returns [do_truename](#numpunct__do_truename).  \n  \n All locales return a string \"true\" to represent the value **true**.  \n  \n### Example  \n  \n```cpp  \n// numpunct_truename.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n#include <sstream>  \nusing namespace std;  \nint main( )  \n{  \n   locale loc( \"English\" );  \n  \n   const numpunct < char> &npunct = use_facet <numpunct <char> >( loc );  \n   cout << loc.name( ) << \" truename \"<< npunct.truename( ) << endl;  \n   cout << loc.name( ) << \" falsename \"<< npunct.falsename( ) << endl;  \n  \n   locale loc2(\"French\");  \n   const numpunct <char> &npunct2 = use_facet <numpunct <char> >( loc2 );  \n   cout << loc2.name( ) << \" truename \"<< npunct2.truename( ) << endl;  \n   cout << loc2.name( ) << \" falsename \"<< npunct2.falsename( ) << endl;  \n}  \n```  \n  \n```Output  \nEnglish_United States.1252 truename true  \nEnglish_United States.1252 falsename false  \nFrench_France.1252 truename true  \nFrench_France.1252 falsename false  \n```  \n  \n## See Also  \n [\\<locale>](../standard-library/locale.md)   \n [facet Class](../standard-library/locale-class.md#facet_class)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)\n\n"}