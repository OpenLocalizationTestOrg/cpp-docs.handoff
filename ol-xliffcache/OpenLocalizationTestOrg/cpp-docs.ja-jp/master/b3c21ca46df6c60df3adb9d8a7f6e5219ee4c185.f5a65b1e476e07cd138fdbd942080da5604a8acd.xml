{"nodes":[{"pos":[12,54],"content":"Message Passing Functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Message Passing Functions | Microsoft Docs","pos":[0,42]}]},{"content":"Message Passing Functions","pos":[589,614]},{"content":"The Asynchronous Agents Library provides several functions that let you pass messages among components.","pos":[615,718]},{"content":"These message-passing functions are used with the various message-block types.","pos":[725,803]},{"content":"For more information about the message-block types that are defined by the Concurrency Runtime, see <bpt id=\"p1\">[</bpt>Asynchronous Message Blocks<ept id=\"p1\">](../../parallel/concrt/asynchronous-message-blocks.md)</ept>.","pos":[804,988],"source":" For more information about the message-block types that are defined by the Concurrency Runtime, see [Asynchronous Message Blocks](../../parallel/concrt/asynchronous-message-blocks.md)."},{"pos":[1017,1025],"content":"Sections"},{"content":"This topic describes the following message-passing functions:","pos":[1029,1090]},{"content":"send and asend","pos":[1101,1115]},{"content":"receive and try_receive","pos":[1134,1157]},{"content":"Examples","pos":[1179,1187]},{"pos":[1229,1243],"content":"send and asend"},{"content":"The <bpt id=\"p1\">[</bpt>concurrency::send<ept id=\"p1\">](reference/concurrency-namespace-functions.md#send)</ept> function sends a message to the specified target synchronously and the <bpt id=\"p2\">[</bpt>concurrency::asend<ept id=\"p2\">](reference/concurrency-namespace-functions.md#asend)</ept> function sends a message to the specified target asynchronously.","pos":[1248,1531],"source":"The [concurrency::send](reference/concurrency-namespace-functions.md#send) function sends a message to the specified target synchronously and the [concurrency::asend](reference/concurrency-namespace-functions.md#asend) function sends a message to the specified target asynchronously."},{"content":"Both the <ph id=\"ph1\">`send`</ph> and <ph id=\"ph2\">`asend`</ph> functions wait until the target indicates that it will eventually accept or decline the message.","pos":[1532,1656],"source":" Both the `send` and `asend` functions wait until the target indicates that it will eventually accept or decline the message."},{"content":"The <ph id=\"ph1\">`send`</ph> function waits until the target accepts or declines the message before it returns.","pos":[1663,1756],"source":"The `send` function waits until the target accepts or declines the message before it returns."},{"content":"The <ph id=\"ph1\">`send`</ph> function returns <ph id=\"ph2\">`true`</ph> if the message was delivered and <ph id=\"ph3\">`false`</ph> otherwise.","pos":[1757,1843],"source":" The `send` function returns `true` if the message was delivered and `false` otherwise."},{"content":"Because the <ph id=\"ph1\">`send`</ph> function works synchronously, the <ph id=\"ph2\">`send`</ph> function waits for the target to receive the message before it returns.","pos":[1844,1975],"source":" Because the `send` function works synchronously, the `send` function waits for the target to receive the message before it returns."},{"content":"Conversely, the <ph id=\"ph1\">`asend`</ph> function does not wait for the target to accept or decline the message before it returns.","pos":[1982,2095],"source":"Conversely, the `asend` function does not wait for the target to accept or decline the message before it returns."},{"content":"Instead, the <ph id=\"ph1\">`asend`</ph> function returns <ph id=\"ph2\">`true`</ph> if the target accepts the message and will eventually take it.","pos":[2096,2203],"source":" Instead, the `asend` function returns `true` if the target accepts the message and will eventually take it."},{"content":"Otherwise, <ph id=\"ph1\">`asend`</ph> returns <ph id=\"ph2\">`false`</ph> to indicate that the target either declined the message or postponed the decision about whether to take the message.","pos":[2204,2355],"source":" Otherwise, `asend` returns `false` to indicate that the target either declined the message or postponed the decision about whether to take the message."},{"pos":[2362,2375],"content":"[<bpt id=\"p1\">[</bpt>Top<ept id=\"p1\">](#top)</ept>]","source":"[[Top](#top)]"},{"pos":[2408,2431],"content":"receive and try_receive"},{"content":"The <bpt id=\"p1\">[</bpt>concurrency::receive<ept id=\"p1\">](reference/concurrency-namespace-functions.md#receive)</ept> and <bpt id=\"p2\">[</bpt>concurrency::try_receive<ept id=\"p2\">](reference/concurrency-namespace-functions.md#try_receive)</ept> functions read data from a given source.","pos":[2436,2646],"source":"The [concurrency::receive](reference/concurrency-namespace-functions.md#receive) and [concurrency::try_receive](reference/concurrency-namespace-functions.md#try_receive) functions read data from a given source."},{"content":"The <ph id=\"ph1\">`receive`</ph> function waits for data to become available, whereas the <ph id=\"ph2\">`try_receive`</ph> function returns immediately.","pos":[2647,2761],"source":" The `receive` function waits for data to become available, whereas the `try_receive` function returns immediately."},{"content":"Use the <ph id=\"ph1\">`receive`</ph> function when you must have the data to continue.","pos":[2768,2835],"source":"Use the `receive` function when you must have the data to continue."},{"content":"Use the <ph id=\"ph1\">`try_receive`</ph> function if you must not block the current context or you do not have to have the data to continue.","pos":[2836,2957],"source":" Use the `try_receive` function if you must not block the current context or you do not have to have the data to continue."},{"pos":[2964,2977],"content":"[<bpt id=\"p1\">[</bpt>Top<ept id=\"p1\">](#top)</ept>]","source":"[[Top](#top)]"},{"pos":[3011,3019],"content":"Examples"},{"pos":[3023,3119],"content":"For examples that use the <ph id=\"ph1\">`send`</ph> and <ph id=\"ph2\">`asend`</ph>, and <ph id=\"ph3\">`receive`</ph> functions, see the following topics:","source":"For examples that use the `send` and `asend`, and `receive` functions, see the following topics:"},{"content":"Asynchronous Message Blocks","pos":[3130,3157]},{"content":"How to: Implement Various Producer-Consumer Patterns","pos":[3223,3275]},{"content":"How to: Provide Work Functions to the call and transformer Classes","pos":[3365,3431]},{"content":"How to: Use transformer in a Data Pipeline","pos":[3535,3577]},{"content":"How to: Select Among Completed Tasks","pos":[3657,3693]},{"content":"How to: Send a Message at a Regular Interval","pos":[3767,3811]},{"content":"How to: Use a Message Block Filter","pos":[3893,3927]},{"pos":[3995,4008],"content":"[<bpt id=\"p1\">[</bpt>Top<ept id=\"p1\">](#top)</ept>]","source":"[[Top](#top)]"},{"content":"See Also","pos":[4017,4025]},{"content":"Asynchronous Agents Library","pos":[4030,4057]},{"content":"Asynchronous Message Blocks","pos":[4118,4145]},{"content":"send Function","pos":[4206,4219]},{"content":"asend Function","pos":[4277,4291]},{"content":"receive Function","pos":[4350,4366]},{"content":"try_receive Function","pos":[4427,4447]}],"content":"---\ntitle: \"Message Passing Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"message passing functions\"\nms.assetid: 42477c9e-a8a6-4dc4-a98e-93c6dc8c4dd0\ncaps.latest.revision: 23\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Message Passing Functions\nThe Asynchronous Agents Library provides several functions that let you pass messages among components.  \n  \n These message-passing functions are used with the various message-block types. For more information about the message-block types that are defined by the Concurrency Runtime, see [Asynchronous Message Blocks](../../parallel/concrt/asynchronous-message-blocks.md).  \n  \n##  <a name=\"top\"></a> Sections  \n This topic describes the following message-passing functions:  \n  \n-   [send and asend](#send)  \n  \n-   [receive and try_receive](#receive)  \n  \n-   [Examples](#examples)  \n  \n##  <a name=\"send\"></a> send and asend  \n\n The [concurrency::send](reference/concurrency-namespace-functions.md#send) function sends a message to the specified target synchronously and the [concurrency::asend](reference/concurrency-namespace-functions.md#asend) function sends a message to the specified target asynchronously. Both the `send` and `asend` functions wait until the target indicates that it will eventually accept or decline the message.  \n  \n The `send` function waits until the target accepts or declines the message before it returns. The `send` function returns `true` if the message was delivered and `false` otherwise. Because the `send` function works synchronously, the `send` function waits for the target to receive the message before it returns.  \n  \n Conversely, the `asend` function does not wait for the target to accept or decline the message before it returns. Instead, the `asend` function returns `true` if the target accepts the message and will eventually take it. Otherwise, `asend` returns `false` to indicate that the target either declined the message or postponed the decision about whether to take the message.  \n  \n [[Top](#top)]  \n  \n##  <a name=\"receive\"></a> receive and try_receive  \n\n The [concurrency::receive](reference/concurrency-namespace-functions.md#receive) and [concurrency::try_receive](reference/concurrency-namespace-functions.md#try_receive) functions read data from a given source. The `receive` function waits for data to become available, whereas the `try_receive` function returns immediately.  \n  \n Use the `receive` function when you must have the data to continue. Use the `try_receive` function if you must not block the current context or you do not have to have the data to continue.  \n  \n [[Top](#top)]  \n  \n##  <a name=\"examples\"></a> Examples  \n For examples that use the `send` and `asend`, and `receive` functions, see the following topics:  \n  \n-   [Asynchronous Message Blocks](../../parallel/concrt/asynchronous-message-blocks.md)  \n  \n-   [How to: Implement Various Producer-Consumer Patterns](../../parallel/concrt/how-to-implement-various-producer-consumer-patterns.md)  \n  \n-   [How to: Provide Work Functions to the call and transformer Classes](../../parallel/concrt/how-to-provide-work-functions-to-the-call-and-transformer-classes.md)  \n  \n-   [How to: Use transformer in a Data Pipeline](../../parallel/concrt/how-to-use-transformer-in-a-data-pipeline.md)  \n  \n-   [How to: Select Among Completed Tasks](../../parallel/concrt/how-to-select-among-completed-tasks.md)  \n  \n-   [How to: Send a Message at a Regular Interval](../../parallel/concrt/how-to-send-a-message-at-a-regular-interval.md)  \n  \n-   [How to: Use a Message Block Filter](../../parallel/concrt/how-to-use-a-message-block-filter.md)  \n  \n [[Top](#top)]  \n  \n## See Also  \n [Asynchronous Agents Library](../../parallel/concrt/asynchronous-agents-library.md)   \n [Asynchronous Message Blocks](../../parallel/concrt/asynchronous-message-blocks.md)   \n [send Function](reference/concurrency-namespace-functions.md#send)   \n [asend Function](reference/concurrency-namespace-functions.md#asend)   \n [receive Function](reference/concurrency-namespace-functions.md#receive)   \n [try_receive Function](reference/concurrency-namespace-functions.md#try_receive)\n\n\n"}