{"nodes":[{"pos":[12,58],"content":"Input Stream Member Functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Input Stream Member Functions | Microsoft Docs","pos":[0,46]}]},{"pos":[625,654],"content":"Input Stream Member Functions","linkify":"Input Stream Member Functions","nodes":[{"content":"Input Stream Member Functions","pos":[0,29]}]},{"content":"Input stream member functions are used for disk input.","pos":[655,709]},{"content":"The member functions include:","pos":[710,739]},{"pos":[747,830],"content":"<bpt id=\"p1\">[</bpt>The open Function for Input Streams<ept id=\"p1\">](#vclrftheopenfunctionforinputstreamsanchor11)</ept>","source":"[The open Function for Input Streams](#vclrftheopenfunctionforinputstreamsanchor11)"},{"pos":[838,886],"content":"<bpt id=\"p1\">[</bpt>The get Function<ept id=\"p1\">](#vclrfthegetfunctionanchor12)</ept>","source":"[The get Function](#vclrfthegetfunctionanchor12)"},{"pos":[894,950],"content":"<bpt id=\"p1\">[</bpt>The getline Function<ept id=\"p1\">](#vclrfthegetlinefunctionanchor13)</ept>","source":"[The getline Function](#vclrfthegetlinefunctionanchor13)"},{"pos":[958,1008],"content":"<bpt id=\"p1\">[</bpt>The read Function<ept id=\"p1\">](#vclrfthereadfunctionanchor14)</ept>","source":"[The read Function](#vclrfthereadfunctionanchor14)"},{"pos":[1016,1087],"content":"<bpt id=\"p1\">[</bpt>The seekg and tellg Functions<ept id=\"p1\">](#vclrftheseekgandtellgfunctionsanchor7)</ept>","source":"[The seekg and tellg Functions](#vclrftheseekgandtellgfunctionsanchor7)"},{"pos":[1095,1180],"content":"<bpt id=\"p1\">[</bpt>The close Function for Input Streams<ept id=\"p1\">](#vclrftheclosefunctionforinputstreamsanchor15)</ept>","source":"[The close Function for Input Streams](#vclrftheclosefunctionforinputstreamsanchor15)"},{"pos":[1190,1284],"content":"<bpt id=\"p1\">&lt;a name=\"vclrftheopenfunctionforinputstreamsanchor11\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> The open Function for Input Streams","linkify":"<a name=\"vclrftheopenfunctionforinputstreamsanchor11\"></a> The open Function for Input Streams","source":"<a name=\"vclrftheopenfunctionforinputstreamsanchor11\"></a> The open Function for Input Streams"},{"content":"If you are using an input file stream (ifstream), you must associate that stream with a specific disk file.","pos":[1288,1395]},{"content":"You can do this in the constructor, or you can use the <bpt id=\"p1\">**</bpt>open<ept id=\"p1\">**</ept> function.","pos":[1396,1469],"source":" You can do this in the constructor, or you can use the **open** function."},{"content":"In either case, the arguments are the same.","pos":[1470,1513]},{"content":"You generally specify an <bpt id=\"p1\">[</bpt>ios_base::openmode<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__openmode)</ept> flag when you open the file associated with an input stream (the default mode is <bpt id=\"p2\">**</bpt>ios::in<ept id=\"p2\">**</ept>).","pos":[1520,1718],"source":"You generally specify an [ios_base::openmode](../standard-library/ios-base-class.md#ios_base__openmode) flag when you open the file associated with an input stream (the default mode is **ios::in**)."},{"content":"For a list of the <bpt id=\"p1\">**</bpt>open_mode<ept id=\"p1\">**</ept> flags, see <bpt id=\"p2\">[</bpt>The open Function<ept id=\"p2\">](#vclrftheopenfunctionforinputstreamsanchor11)</ept>.","pos":[1719,1828],"source":" For a list of the **open_mode** flags, see [The open Function](#vclrftheopenfunctionforinputstreamsanchor11)."},{"content":"The flags can be combined with the bitwise OR ( &amp;#124; ) operator.","pos":[1829,1895],"source":" The flags can be combined with the bitwise OR ( &#124; ) operator."},{"pos":[1902,1988],"content":"To read a file, first use the <bpt id=\"p1\">**</bpt>fail<ept id=\"p1\">**</ept> member function to determine whether it exists:","source":"To read a file, first use the **fail** member function to determine whether it exists:"},{"pos":[2094,2153],"content":"<bpt id=\"p1\">&lt;a name=\"vclrfthegetfunctionanchor12\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> The get Function","linkify":"<a name=\"vclrfthegetfunctionanchor12\"></a> The get Function","source":"<a name=\"vclrfthegetfunctionanchor12\"></a> The get Function"},{"content":"The unformatted <bpt id=\"p1\">**</bpt>get<ept id=\"p1\">**</ept> member function works like the <bpt id=\"p2\">**</bpt><ph id=\"ph1\">&gt;&gt;</ph><ept id=\"p2\">**</ept> operator with two exceptions.","pos":[2157,2248],"source":"The unformatted **get** member function works like the **>>** operator with two exceptions."},{"content":"First, the <bpt id=\"p1\">**</bpt>get<ept id=\"p1\">**</ept> function includes white-space characters, whereas the extractor excludes white space when the <bpt id=\"p2\">**</bpt>skipws<ept id=\"p2\">**</ept> flag is set (the default).","pos":[2249,2399],"source":" First, the **get** function includes white-space characters, whereas the extractor excludes white space when the **skipws** flag is set (the default)."},{"content":"Second, the <bpt id=\"p1\">**</bpt>get<ept id=\"p1\">**</ept> function is less likely to cause a tied output stream (<ph id=\"ph1\">`cout`</ph>, for example) to be flushed.","pos":[2400,2510],"source":" Second, the **get** function is less likely to cause a tied output stream (`cout`, for example) to be flushed."},{"content":"A variation of the <bpt id=\"p1\">**</bpt>get<ept id=\"p1\">**</ept> function specifies a buffer address and the maximum number of characters to read.","pos":[2517,2625],"source":"A variation of the **get** function specifies a buffer address and the maximum number of characters to read."},{"content":"This is useful for limiting the number of characters sent to a specific variable, as this example shows:","pos":[2626,2730]},{"pos":[3124,3129],"content":"Input","linkify":"Input","nodes":[{"content":"Input","pos":[0,5]}]},{"pos":[3161,3174],"content":"Sample Output","linkify":"Sample Output","nodes":[{"content":"Sample Output","pos":[0,13]}]},{"pos":[3206,3273],"content":"<bpt id=\"p1\">&lt;a name=\"vclrfthegetlinefunctionanchor13\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> The getline Function","linkify":"<a name=\"vclrfthegetlinefunctionanchor13\"></a> The getline Function","source":"<a name=\"vclrfthegetlinefunctionanchor13\"></a> The getline Function"},{"content":"The <bpt id=\"p1\">**</bpt>getline<ept id=\"p1\">**</ept> member function is similar to the <bpt id=\"p2\">**</bpt>get<ept id=\"p2\">**</ept> function.","pos":[3277,3344],"source":"The **getline** member function is similar to the **get** function."},{"content":"Both functions allow a third argument that specifies the terminating character for input.","pos":[3345,3434]},{"content":"The default value is the newline character.","pos":[3435,3478]},{"content":"Both functions reserve one character for the required terminating character.","pos":[3479,3555]},{"content":"However, <bpt id=\"p1\">**</bpt>get<ept id=\"p1\">**</ept> leaves the terminating character in the stream and <bpt id=\"p2\">**</bpt>getline<ept id=\"p2\">**</ept> removes the terminating character.","pos":[3556,3670],"source":" However, **get** leaves the terminating character in the stream and **getline** removes the terminating character."},{"content":"The following example specifies a terminating character for the input stream:","pos":[3677,3754]},{"pos":[4027,4032],"content":"Input","linkify":"Input","nodes":[{"content":"Input","pos":[0,5]}]},{"pos":[4064,4125],"content":"<bpt id=\"p1\">&lt;a name=\"vclrfthereadfunctionanchor14\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> The read Function","linkify":"<a name=\"vclrfthereadfunctionanchor14\"></a> The read Function","source":"<a name=\"vclrfthereadfunctionanchor14\"></a> The read Function"},{"content":"The <bpt id=\"p1\">**</bpt>read<ept id=\"p1\">**</ept> member function reads bytes from a file to a specified area of memory.","pos":[4129,4212],"source":"The **read** member function reads bytes from a file to a specified area of memory."},{"content":"The length argument determines the number of bytes read.","pos":[4213,4269]},{"content":"If you do not include that argument, reading stops when the physical end of file is reached or, in the case of a text-mode file, when an embedded <ph id=\"ph1\">`EOF`</ph> character is read.","pos":[4270,4440],"source":" If you do not include that argument, reading stops when the physical end of file is reached or, in the case of a text-mode file, when an embedded `EOF` character is read."},{"content":"This example reads a binary record from a payroll file into a structure:","pos":[4447,4519]},{"content":"The program assumes that the data records are formatted exactly as specified by the structure with no terminating carriage-return or linefeed characters.","pos":[5001,5154]},{"pos":[5164,5246],"content":"<bpt id=\"p1\">&lt;a name=\"vclrftheseekgandtellgfunctionsanchor7\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> The seekg and tellg Functions","linkify":"<a name=\"vclrftheseekgandtellgfunctionsanchor7\"></a> The seekg and tellg Functions","source":"<a name=\"vclrftheseekgandtellgfunctionsanchor7\"></a> The seekg and tellg Functions"},{"content":"Input file streams keep an internal pointer to the position in the file where data is to be read next.","pos":[5250,5352]},{"content":"You set this pointer with the <ph id=\"ph1\">`seekg`</ph> function, as shown here:","pos":[5353,5415],"source":" You set this pointer with the `seekg` function, as shown here:"},{"pos":[5931,6171],"content":"To use <ph id=\"ph1\">`seekg`</ph> to implement record-oriented data management systems, multiply the fixed-length record size by the record number to obtain the byte position relative to the end of the file, and then use the <bpt id=\"p1\">**</bpt>get<ept id=\"p1\">**</ept> object to read the record.","source":"To use `seekg` to implement record-oriented data management systems, multiply the fixed-length record size by the record number to obtain the byte position relative to the end of the file, and then use the **get** object to read the record."},{"content":"The <ph id=\"ph1\">`tellg`</ph> member function returns the current file position for reading.","pos":[6178,6252],"source":"The `tellg` member function returns the current file position for reading."},{"content":"This value is of type <ph id=\"ph1\">`streampos`</ph>, a <ph id=\"ph2\">`typedef`</ph> defined in <ph id=\"ph3\">\\&lt;</ph>iostream&gt;.","pos":[6253,6323],"source":" This value is of type `streampos`, a `typedef` defined in \\<iostream>."},{"content":"The following example reads a file and displays messages showing the positions of spaces.","pos":[6324,6413]},{"pos":[6895,6991],"content":"<bpt id=\"p1\">&lt;a name=\"vclrftheclosefunctionforinputstreamsanchor15\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> The close Function for Input Streams","linkify":"<a name=\"vclrftheclosefunctionforinputstreamsanchor15\"></a> The close Function for Input Streams","source":"<a name=\"vclrftheclosefunctionforinputstreamsanchor15\"></a> The close Function for Input Streams"},{"content":"The <bpt id=\"p1\">**</bpt>close<ept id=\"p1\">**</ept> member function closes the disk file associated with an input file stream and frees the operating system file handle.","pos":[6995,7126],"source":"The **close** member function closes the disk file associated with an input file stream and frees the operating system file handle."},{"content":"The <bpt id=\"p1\">[</bpt>ifstream<ept id=\"p1\">](../standard-library/basic-ifstream-class.md)</ept> destructor closes the file for you, but you can use the <bpt id=\"p2\">**</bpt>close<ept id=\"p2\">**</ept> function if you need to open another file for the same stream object.","pos":[7127,7322],"source":" The [ifstream](../standard-library/basic-ifstream-class.md) destructor closes the file for you, but you can use the **close** function if you need to open another file for the same stream object."},{"pos":[7331,7339],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[7343,7396],"content":"<bpt id=\"p1\">[</bpt>Input Streams<ept id=\"p1\">](../standard-library/input-streams.md)</ept>","source":"[Input Streams](../standard-library/input-streams.md)"}],"content":"---\ntitle: \"Input Stream Member Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"input stream objects\"\n  - \"input streams, member functions\"\nms.assetid: b4b9465d-0da9-4ccf-859d-72a68418982e\ncaps.latest.revision: 7\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Input Stream Member Functions\nInput stream member functions are used for disk input. The member functions include:  \n  \n- [The open Function for Input Streams](#vclrftheopenfunctionforinputstreamsanchor11)  \n  \n- [The get Function](#vclrfthegetfunctionanchor12)  \n  \n- [The getline Function](#vclrfthegetlinefunctionanchor13)  \n  \n- [The read Function](#vclrfthereadfunctionanchor14)  \n  \n- [The seekg and tellg Functions](#vclrftheseekgandtellgfunctionsanchor7)  \n  \n- [The close Function for Input Streams](#vclrftheclosefunctionforinputstreamsanchor15)  \n  \n##  <a name=\"vclrftheopenfunctionforinputstreamsanchor11\"></a> The open Function for Input Streams  \n If you are using an input file stream (ifstream), you must associate that stream with a specific disk file. You can do this in the constructor, or you can use the **open** function. In either case, the arguments are the same.  \n  \n You generally specify an [ios_base::openmode](../standard-library/ios-base-class.md#ios_base__openmode) flag when you open the file associated with an input stream (the default mode is **ios::in**). For a list of the **open_mode** flags, see [The open Function](#vclrftheopenfunctionforinputstreamsanchor11). The flags can be combined with the bitwise OR ( &#124; ) operator.  \n  \n To read a file, first use the **fail** member function to determine whether it exists:  \n  \n```  \nistream ifile(\"FILENAME\");\n\nif (ifile.fail())  \n// The file does not exist ...  \n```  \n  \n##  <a name=\"vclrfthegetfunctionanchor12\"></a> The get Function  \n The unformatted **get** member function works like the **>>** operator with two exceptions. First, the **get** function includes white-space characters, whereas the extractor excludes white space when the **skipws** flag is set (the default). Second, the **get** function is less likely to cause a tied output stream (`cout`, for example) to be flushed.  \n  \n A variation of the **get** function specifies a buffer address and the maximum number of characters to read. This is useful for limiting the number of characters sent to a specific variable, as this example shows:  \n  \n```  \n// ioo_get_function.cpp  \n// compile with: /EHsc  \n// Type up to 24 characters and a terminating character.   \n// Any remaining characters can be extracted later.  \n#include <iostream>  \nusing namespace std;  \n  \nint main()  \n{  \n   char line[25];  \n   cout << \" Type a line terminated by carriage return\\n>\";  \n   cin.get( line, 25 );  \n   cout << line << endl;  \n}  \n```  \n  \n### Input  \n  \n```  \n1234  \n```  \n  \n### Sample Output  \n  \n```  \n1234  \n```  \n  \n##  <a name=\"vclrfthegetlinefunctionanchor13\"></a> The getline Function  \n The **getline** member function is similar to the **get** function. Both functions allow a third argument that specifies the terminating character for input. The default value is the newline character. Both functions reserve one character for the required terminating character. However, **get** leaves the terminating character in the stream and **getline** removes the terminating character.  \n  \n The following example specifies a terminating character for the input stream:  \n  \n```  \n// getline_func.cpp  \n// compile with: /EHsc  \n#include <iostream>  \nusing namespace std;  \n  \nint main( )  \n{  \n   char line[100];  \n   cout << \" Type a line terminated by 't'\" << endl;  \n   cin.getline( line, 100, 't' );  \n   cout << line;  \n}  \n```  \n  \n### Input  \n  \n```  \ntest  \n```  \n  \n##  <a name=\"vclrfthereadfunctionanchor14\"></a> The read Function  \n The **read** member function reads bytes from a file to a specified area of memory. The length argument determines the number of bytes read. If you do not include that argument, reading stops when the physical end of file is reached or, in the case of a text-mode file, when an embedded `EOF` character is read.  \n  \n This example reads a binary record from a payroll file into a structure:  \n  \n```  \n#include <fstream>  \n#include <iostream>  \nusing namespace std;  \n  \nint main()  \n{  \n   struct  \n   {  \n      double salary;  \n      char name[23];  \n   } employee;  \n  \n   ifstream is( \"payroll\" );  \n   if( is ) {  // ios::operator void*()  \n      is.read( (char *) &employee, sizeof( employee ) );  \n      cout << employee.name << ' ' << employee.salary << endl;  \n   }  \n   else {  \n      cout << \"ERROR: Cannot open file 'payroll'.\" << endl;  \n   }  \n}  \n```  \n  \n The program assumes that the data records are formatted exactly as specified by the structure with no terminating carriage-return or linefeed characters.  \n  \n##  <a name=\"vclrftheseekgandtellgfunctionsanchor7\"></a> The seekg and tellg Functions  \n Input file streams keep an internal pointer to the position in the file where data is to be read next. You set this pointer with the `seekg` function, as shown here:  \n  \n```  \n#include <iostream>  \n#include <fstream>  \nusing namespace std;  \n  \nint main( )  \n{  \n   char ch;  \n  \n   ifstream tfile( \"payroll\" );  \n   if( tfile ) {  \n      tfile.seekg( 8 );        // Seek 8 bytes in (past salary)  \n      while ( tfile.good() ) { // EOF or failure stops the reading  \n         tfile.get( ch );  \n         if( !ch ) break;      // quit on null  \n         cout << ch;  \n      }  \n   }  \n   else {  \n      cout << \"ERROR: Cannot open file 'payroll'.\" << endl;  \n   }  \n}  \n```  \n  \n To use `seekg` to implement record-oriented data management systems, multiply the fixed-length record size by the record number to obtain the byte position relative to the end of the file, and then use the **get** object to read the record.  \n  \n The `tellg` member function returns the current file position for reading. This value is of type `streampos`, a `typedef` defined in \\<iostream>. The following example reads a file and displays messages showing the positions of spaces.  \n  \n```  \n#include <fstream>  \n#include <iostream>  \nusing namespace std;  \n  \nint main( )  \n{  \n   char ch;  \n   ifstream tfile( \"payroll\" );  \n   if( tfile ) {  \n       while ( tfile.good( ) ) {  \n          streampos here = tfile.tellg();  \n          tfile.get( ch );  \n          if ( ch == ' ' )  \n             cout << \"\\nPosition \" << here << \" is a space\";  \n       }  \n   }  \n   else {  \n      cout << \"ERROR: Cannot open file 'payroll'.\" << endl;  \n   }  \n}  \n```  \n  \n##  <a name=\"vclrftheclosefunctionforinputstreamsanchor15\"></a> The close Function for Input Streams  \n The **close** member function closes the disk file associated with an input file stream and frees the operating system file handle. The [ifstream](../standard-library/basic-ifstream-class.md) destructor closes the file for you, but you can use the **close** function if you need to open another file for the same stream object.  \n  \n## See Also  \n [Input Streams](../standard-library/input-streams.md)\n\n"}