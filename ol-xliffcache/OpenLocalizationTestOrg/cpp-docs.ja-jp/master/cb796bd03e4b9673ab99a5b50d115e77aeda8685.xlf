<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cb796bd03e4b9673ab99a5b50d115e77aeda8685</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\data\oledb\ole-db-provider-templates-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">13860e78510e63d30aa62b26620500a0cefb3d53</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">342b074a3acee16b5ab0c0254d9515220b5874cb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>OLE DB Provider Templates (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>OLE DB Provider Templates (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>OLE DB is an important part of the Microsoft Universal Data Access strategy.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The OLE DB design allows high-performance data access from any data source.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Any tabular data is viewable through OLE DB regardless of whether it came from a database.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The flexibility gives you a tremendous amount of power.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>As explained in <bpt id="p1">[</bpt>OLE DB Consumers and Providers<ept id="p1">](../../data/oledb/ole-db-consumers-and-providers.md)</ept>, OLE DB uses the concept of consumers and providers.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The consumer makes requests for data; the provider returns data in a tabular format to the consumer.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>From a programming perspective, the most important implication of this model is that the provider must implement any call the consumer can make.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>What Is a Provider?</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>An OLE DB provider is a set of COM objects that serve interface calls from a consumer object, transferring data in a tabular format from a durable source (called a data store) to the consumer.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Providers can be simple or complex.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The provider can support a minimal amount of functionality or a full-blown production quality provider by implementing more interfaces.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A provider can return a table, allow the client to determine the format of that table, and perform operations on that data.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Each provider implements a standard set of COM objects to handle requests from the client, with standard meaning that any OLE DB consumer can access data from any provider, regardless of language (such as C++ and Basic).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Each COM object contains several interfaces, some of which are required and some of which are optional.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>By implementing the mandatory interfaces, a provider guarantees a minimum level of functionality (called compliance) that any client should be able to use.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A provider can implement optional interfaces to provide additional functionality.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The OLE DB Provider Template Architecture<ept id="p1">](../../data/oledb/ole-db-provider-template-architecture.md)</ept> describes these interfaces in detail.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The client should always call <ph id="ph1">`QueryInterface`</ph> to determine if a provider supports a given interface.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>OLE DB Specification Level Support</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The OLE DB provider templates support the OLE DB version 2.7 specification.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Using the OLE DB provider templates, you can implement a level 0 compliant provider.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The Provider sample, for example, uses the templates to implement a non-SQL (MS-DOS) command server that executes the DOS DIR command to query the file system.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The Provider sample returns the directory information in a rowset, which is the standard OLE DB mechanism for returning tabular data.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The simplest type of provider supported by the OLE DB templates is a read-only provider with no commands.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Providers with commands are also supported, as are bookmarking and read/write capability.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can implement a read/write provider by writing additional code.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Dynamic rowsets and transactions are not supported by the current version, but you can add them if you want.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When Do You Need to Create an OLE DB Provider?</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You do not always need to create your own provider; Microsoft provides several prepackaged, standard providers in the <bpt id="p1">**</bpt>Data Link Properties<ept id="p1">**</ept> dialog box in Visual C++.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The main reason to create an OLE DB provider is to take advantage of the Universal Data Access strategy.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Some of advantages of doing so are:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Accessing data through any language such as C++, Basic, and Visual Basic Scripting Edition.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It allows different programmers in your organization to access the same data in the same way, regardless of what language they use.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Exposing your data to other data sources such as SQL Server, Excel, and Access.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This can be very useful if you want to transfer data among different formats.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Participating in crossâ€“data source (heterogeneous) operations.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This can be a very effective way of data warehousing.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>By using OLE DB providers, you can keep data in its native format and still be able to access it in a simple operation.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Adding additional capabilities to your data, such as query processing.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Increasing performance of accessing data by controlling how it is manipulated.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Increasing robustness.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you have a proprietary data format that only one programmer can access, you are at risk.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Using OLE DB providers, you can open that proprietary format to all your programmers.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Read-Only and Updatable Providers</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Providers can vary greatly in complexity and functionality.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>It is useful to categorize providers into read-only providers and updatable providers:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Visual C++ 6.0 supported only read-only providers.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating an OLE DB Provider<ept id="p1">](../../data/oledb/creating-an-ole-db-provider.md)</ept> discusses how to create a read-only provider.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Visual C++ .NET supports updatable providers, which can update (write to) the data store.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For information about updatable providers, see <bpt id="p1">[</bpt>Creating an Updatable Provider<ept id="p1">](../../data/oledb/creating-an-updatable-provider.md)</ept>; the <bpt id="p2">[</bpt>UpdatePV<ept id="p2">](http://msdn.microsoft.com/en-us/c8bed873-223c-4a7d-af55-f90138c6f38f)</ept> sample is an example of an updatable provider.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For more information, see:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The OLE DB Provider Template Architecture</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Creating an OLE DB Provider</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>OLE DB Programming</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Data Access</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>OLE DB SDK Documentation</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>OLE DB Programmer's Reference</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>