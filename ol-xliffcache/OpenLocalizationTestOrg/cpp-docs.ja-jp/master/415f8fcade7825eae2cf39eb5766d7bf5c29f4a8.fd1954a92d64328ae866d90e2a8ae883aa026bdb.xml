{"nodes":[{"pos":[12,49],"content":"ICommandUI Interface | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ICommandUI Interface | Microsoft Docs","pos":[0,37]}]},{"pos":[612,632],"content":"ICommandUI Interface","linkify":"ICommandUI Interface","nodes":[{"content":"ICommandUI Interface","pos":[0,20]}]},{"content":"Manages user interface commands.","pos":[633,665]},{"pos":[674,680],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[733,740],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[750,764],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[771,775]},{"content":"Description","pos":[776,787]},{"pos":[825,864],"content":"<bpt id=\"p1\">[</bpt>icommandui__Check<ept id=\"p1\">](#icommandui__check)</ept>","source":"[icommandui__Check](#icommandui__check)"},{"content":"Sets the user interface item for this command to the appropriate check state.","pos":[865,942]},{"pos":[947,1006],"content":"<bpt id=\"p1\">[</bpt>ICommandUI::ContinueRouting<ept id=\"p1\">](#icommandui__continuerouting)</ept>","source":"[ICommandUI::ContinueRouting](#icommandui__continuerouting)"},{"content":"Tells the command-routing mechanism to continue routing the current message down the chain of handlers.","pos":[1007,1110]},{"pos":[1115,1158],"content":"<bpt id=\"p1\">[</bpt>ICommandUI::Enabled<ept id=\"p1\">](#icommandui__enabled)</ept>","source":"[ICommandUI::Enabled](#icommandui__enabled)"},{"content":"Enables or disables the user interface item for this command.","pos":[1159,1220]},{"pos":[1225,1258],"content":"<bpt id=\"p1\">[</bpt>ICommandUI::ID<ept id=\"p1\">](#icommandui__id)</ept>","source":"[ICommandUI::ID](#icommandui__id)"},{"pos":[1259,1339],"content":"Gets the ID of the user interface object represented by the <ph id=\"ph1\">`ICommandUI`</ph> object.","source":"Gets the ID of the user interface object represented by the `ICommandUI` object."},{"pos":[1344,1383],"content":"<bpt id=\"p1\">[</bpt>ICommandUI::Index<ept id=\"p1\">](#icommandui__index)</ept>","source":"[ICommandUI::Index](#icommandui__index)"},{"pos":[1384,1467],"content":"Gets the index of the user interface object represented by the <ph id=\"ph1\">`ICommandUI`</ph> object.","source":"Gets the index of the user interface object represented by the `ICommandUI` object."},{"pos":[1472,1511],"content":"<bpt id=\"p1\">[</bpt>ICommandUI::Radio<ept id=\"p1\">](#icommandui__radio)</ept>","source":"[ICommandUI::Radio](#icommandui__radio)"},{"content":"Sets the user interface item for this command to the appropriate check state.","pos":[1512,1589]},{"pos":[1594,1631],"content":"<bpt id=\"p1\">[</bpt>ICommandUI::Text<ept id=\"p1\">](#icommandui__text)</ept>","source":"[ICommandUI::Text](#icommandui__text)"},{"content":"Sets the text of the user interface item for this command.","pos":[1632,1690]},{"pos":[1700,1707],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This interface provides methods and properties that manage user interface commands.","pos":[1711,1794]},{"content":"<ph id=\"ph1\">`ICommandUI`</ph> is similar to <bpt id=\"p1\">[</bpt>CCmdUI Class<ept id=\"p1\">](../../mfc/reference/ccmdui-class.md)</ept>, except that <ph id=\"ph2\">`ICommandUI`</ph> is used for MFC applications that interoperate with .NET components.","pos":[1795,1968],"source":"`ICommandUI` is similar to [CCmdUI Class](../../mfc/reference/ccmdui-class.md), except that `ICommandUI` is used for MFC applications that interoperate with .NET components."},{"content":"<ph id=\"ph1\">`ICommandUI`</ph> is used within an <ph id=\"ph2\">`ON_UPDATE_COMMAND_UI`</ph> handler in an <bpt id=\"p1\">[</bpt>ICommandTarget<ept id=\"p1\">](../../mfc/reference/icommandtarget-interface.md)</ept>-derived class.","pos":[1975,2123],"source":"`ICommandUI` is used within an `ON_UPDATE_COMMAND_UI` handler in an [ICommandTarget](../../mfc/reference/icommandtarget-interface.md)-derived class."},{"content":"When a user of an application activates (selects or clicks) a menu, each menu item is displayed as enabled or disabled.","pos":[2124,2243]},{"content":"The target of each menu command provides this information by implementing an <ph id=\"ph1\">`ON_UPDATE_COMMAND_UI`</ph> handler.","pos":[2244,2352],"source":" The target of each menu command provides this information by implementing an `ON_UPDATE_COMMAND_UI` handler."},{"content":"For each of the command user interface objects in your application, use the Properties window to create a message-map entry and function prototype for each handler.","pos":[2353,2517]},{"pos":[2524,2743],"content":"For more information on how the <ph id=\"ph1\">`ICommandUI`</ph> interface is used in command routing, see <bpt id=\"p1\">[</bpt>How to: Add Command Routing to the Windows Forms Control<ept id=\"p1\">](../../dotnet/how-to-add-command-routing-to-the-windows-forms-control.md)</ept>.","source":"For more information on how the `ICommandUI` interface is used in command routing, see [How to: Add Command Routing to the Windows Forms Control](../../dotnet/how-to-add-command-routing-to-the-windows-forms-control.md)."},{"pos":[2750,2900],"content":"For more information on using Windows Forms, see <bpt id=\"p1\">[</bpt>Using a Windows Form User Control in MFC<ept id=\"p1\">](../../dotnet/using-a-windows-form-user-control-in-mfc.md)</ept>.","source":"For more information on using Windows Forms, see [Using a Windows Form User Control in MFC](../../dotnet/using-a-windows-form-user-control-in-mfc.md)."},{"pos":[2907,3035],"content":"For more information on how user interface commands are managed in MFC, see <bpt id=\"p1\">[</bpt>CCmdUI Class<ept id=\"p1\">](../../mfc/reference/ccmdui-class.md)</ept>.","source":"For more information on how user interface commands are managed in MFC, see [CCmdUI Class](../../mfc/reference/ccmdui-class.md)."},{"pos":[3044,3094],"content":"<bpt id=\"p1\">&lt;a name=\"icommandui__check\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> ICommandUI::Check","linkify":"<a name=\"icommandui__check\"></a> ICommandUI::Check","source":"<a name=\"icommandui__check\"></a> ICommandUI::Check"},{"content":"Sets the user interface item for this command to the appropriate check state.","pos":[3097,3174]},{"pos":[3215,3222],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This property sets the user interface item for this command to the appropriate check state.","pos":[3225,3316]},{"content":"Set Check to the following values:","pos":[3317,3351]},{"content":"0 Uncheck","pos":[3356,3365]},{"content":"1 Check","pos":[3370,3377]},{"content":"2 Set indeterminate","pos":[3382,3401]},{"pos":[3408,3478],"content":"<bpt id=\"p1\">&lt;a name=\"icommandui__continuerouting\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> ICommandUI::ContinueRouting","linkify":"<a name=\"icommandui__continuerouting\"></a> ICommandUI::ContinueRouting","source":"<a name=\"icommandui__continuerouting\"></a> ICommandUI::ContinueRouting"},{"content":"Tells the command routing mechanism to continue routing the current message down the chain of handlers.","pos":[3482,3585]},{"pos":[3621,3628],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This is an advanced member function that should be used in conjunction with an ON_COMMAND_EX handler that returns FALSE.","pos":[3629,3749]},{"content":"For more information, see Technical Note TN006: Message Maps.","pos":[3750,3811]},{"pos":[3816,3870],"content":"<bpt id=\"p1\">&lt;a name=\"icommandui__enabled\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> ICommandUI::Enabled","linkify":"<a name=\"icommandui__enabled\"></a> ICommandUI::Enabled","source":"<a name=\"icommandui__enabled\"></a> ICommandUI::Enabled"},{"content":"Enables or disables the user interface item for this command.","pos":[3872,3933]},{"pos":[3968,3975],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This property enables or disables the user interface item for this command.","pos":[3976,4051]},{"content":"Set Enabled to TRUE to enable the item, FALSE to disable it.","pos":[4052,4112]},{"pos":[4117,4161],"content":"<bpt id=\"p1\">&lt;a name=\"icommandui__id\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> ICommandUI::ID","linkify":"<a name=\"icommandui__id\"></a> ICommandUI::ID","source":"<a name=\"icommandui__id\"></a> ICommandUI::ID"},{"content":"Gets the ID of the user interface object represented by the ICommandUI object.","pos":[4164,4242]},{"pos":[4280,4287],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This property gets the ID (a handle) of the menu item, toolbar button, or other user interface object represented by the ICommandUI object.","pos":[4288,4427]},{"pos":[4432,4482],"content":"<bpt id=\"p1\">&lt;a name=\"icommandui__index\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> ICommandUI::Index","linkify":"<a name=\"icommandui__index\"></a> ICommandUI::Index","source":"<a name=\"icommandui__index\"></a> ICommandUI::Index"},{"content":"Gets the index of the user interface object represented by the ICommandUI object.","pos":[4486,4567]},{"pos":[4608,4615],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This property gets the index (a handle) of the menu item, toolbar button, or other user interface object represented by the ICommandUI object.","pos":[4616,4758]},{"pos":[4763,4813],"content":"<bpt id=\"p1\">&lt;a name=\"icommandui__radio\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> ICommandUI::Radio","linkify":"<a name=\"icommandui__radio\"></a> ICommandUI::Radio","source":"<a name=\"icommandui__radio\"></a> ICommandUI::Radio"},{"content":"Sets the user interface item for this command to the appropriate check state.","pos":[4815,4892]},{"pos":[4925,4932],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This property sets the user interface item for this command to the appropriate check state.","pos":[4933,5024]},{"content":"Set Radio to TRUE to enable the item; otherwise FALSE.","pos":[5025,5079]},{"pos":[5084,5132],"content":"<bpt id=\"p1\">&lt;a name=\"icommandui__text\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> ICommandUI::Text","linkify":"<a name=\"icommandui__text\"></a> ICommandUI::Text","source":"<a name=\"icommandui__text\"></a> ICommandUI::Text"},{"content":"Sets the text of the user interface item for this command.","pos":[5134,5192]},{"pos":[5227,5234],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This property sets the text of the user interface item for this command.","pos":[5235,5307]},{"content":"Set Text to a text string handle.","pos":[5308,5341]},{"pos":[5346,5358],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[5362,5434],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxwinforms.h (defined in assembly atlmfc\\lib\\mfcmifc80.dll)","source":"**Header:** afxwinforms.h (defined in assembly atlmfc\\lib\\mfcmifc80.dll)"},{"pos":[5443,5451],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[5455,5506],"content":"<bpt id=\"p1\">[</bpt>CCmdUI Class<ept id=\"p1\">](../../mfc/reference/ccmdui-class.md)</ept>","source":"[CCmdUI Class](../../mfc/reference/ccmdui-class.md)"}],"content":"---\ntitle: \"ICommandUI Interface | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ICommandUI\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ICommandUI interface\"\nms.assetid: 134afe8d-dcdf-47ca-857a-a166a6b665dd\ncaps.latest.revision: 24\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ICommandUI Interface\nManages user interface commands.  \n  \n## Syntax  \n  \n```  \ninterface class ICommandUI  \n```  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[icommandui__Check](#icommandui__check)|Sets the user interface item for this command to the appropriate check state.|  \n|[ICommandUI::ContinueRouting](#icommandui__continuerouting)|Tells the command-routing mechanism to continue routing the current message down the chain of handlers.|  \n|[ICommandUI::Enabled](#icommandui__enabled)|Enables or disables the user interface item for this command.|  \n|[ICommandUI::ID](#icommandui__id)|Gets the ID of the user interface object represented by the `ICommandUI` object.|  \n|[ICommandUI::Index](#icommandui__index)|Gets the index of the user interface object represented by the `ICommandUI` object.|  \n|[ICommandUI::Radio](#icommandui__radio)|Sets the user interface item for this command to the appropriate check state.|  \n|[ICommandUI::Text](#icommandui__text)|Sets the text of the user interface item for this command.|  \n  \n## Remarks  \n This interface provides methods and properties that manage user interface commands. `ICommandUI` is similar to [CCmdUI Class](../../mfc/reference/ccmdui-class.md), except that `ICommandUI` is used for MFC applications that interoperate with .NET components.  \n  \n `ICommandUI` is used within an `ON_UPDATE_COMMAND_UI` handler in an [ICommandTarget](../../mfc/reference/icommandtarget-interface.md)-derived class. When a user of an application activates (selects or clicks) a menu, each menu item is displayed as enabled or disabled. The target of each menu command provides this information by implementing an `ON_UPDATE_COMMAND_UI` handler. For each of the command user interface objects in your application, use the Properties window to create a message-map entry and function prototype for each handler.  \n  \n For more information on how the `ICommandUI` interface is used in command routing, see [How to: Add Command Routing to the Windows Forms Control](../../dotnet/how-to-add-command-routing-to-the-windows-forms-control.md).  \n  \n For more information on using Windows Forms, see [Using a Windows Form User Control in MFC](../../dotnet/using-a-windows-form-user-control-in-mfc.md).  \n  \n For more information on how user interface commands are managed in MFC, see [CCmdUI Class](../../mfc/reference/ccmdui-class.md).  \n  \n## <a name=\"icommandui__check\"></a> ICommandUI::Check  \nSets the user interface item for this command to the appropriate check state.\n```\nproperty UICheckState Check;\n```\n## Remarks  \nThis property sets the user interface item for this command to the appropriate check state. Set Check to the following values:  \n- 0 Uncheck  \n- 1 Check  \n- 2 Set indeterminate  \n\n## <a name=\"icommandui__continuerouting\"></a> ICommandUI::ContinueRouting   \nTells the command routing mechanism to continue routing the current message down the chain of handlers.\n```\nvoid ContinueRouting();\n```\n## Remarks\nThis is an advanced member function that should be used in conjunction with an ON_COMMAND_EX handler that returns FALSE. For more information, see Technical Note TN006: Message Maps.\n\n## <a name=\"icommandui__enabled\"></a> ICommandUI::Enabled \nEnables or disables the user interface item for this command.\n```\nproperty bool Enabled;\n```\n## Remarks\nThis property enables or disables the user interface item for this command. Set Enabled to TRUE to enable the item, FALSE to disable it.\n\n## <a name=\"icommandui__id\"></a> ICommandUI::ID  \nGets the ID of the user interface object represented by the ICommandUI object.\n```\nproperty unsigned int ID;\n```\n## Remarks\nThis property gets the ID (a handle) of the menu item, toolbar button, or other user interface object represented by the ICommandUI object.\n\n## <a name=\"icommandui__index\"></a> ICommandUI::Index   \nGets the index of the user interface object represented by the ICommandUI object.\n```\nproperty unsigned int Index;\n```\n## Remarks\nThis property gets the index (a handle) of the menu item, toolbar button, or other user interface object represented by the ICommandUI object.\n\n## <a name=\"icommandui__radio\"></a> ICommandUI::Radio \nSets the user interface item for this command to the appropriate check state.\n```\nproperty bool Radio;\n```\n## Remarks\nThis property sets the user interface item for this command to the appropriate check state. Set Radio to TRUE to enable the item; otherwise FALSE.\n\n## <a name=\"icommandui__text\"></a> ICommandUI::Text \nSets the text of the user interface item for this command.\n```\nproperty String^ Text;\n```\n## Remarks\nThis property sets the text of the user interface item for this command. Set Text to a text string handle.\n\n## Requirements  \n **Header:** afxwinforms.h (defined in assembly atlmfc\\lib\\mfcmifc80.dll)  \n  \n## See Also  \n [CCmdUI Class](../../mfc/reference/ccmdui-class.md)\n"}