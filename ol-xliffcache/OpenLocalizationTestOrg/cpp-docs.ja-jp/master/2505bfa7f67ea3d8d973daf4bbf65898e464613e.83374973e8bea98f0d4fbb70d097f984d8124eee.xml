{"nodes":[{"pos":[12,46],"content":"CMFCMenuBar Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMFCMenuBar Class | Microsoft Docs","pos":[0,34]}]},{"content":"CMFCMenuBar Class","pos":[607,624]},{"content":"A menu bar that implements docking.","pos":[625,660]},{"content":"Syntax","pos":[669,675]},{"content":"Members","pos":[740,747]},{"content":"Public Methods","pos":[757,771]},{"content":"Name","pos":[778,782]},{"content":"Description","pos":[783,794]},{"content":"CMFCMenuBar::AdjustLocations","pos":[833,861]},{"pos":[894,937],"content":"(Overrides <ph id=\"ph1\">`CMFCToolBar::AdjustLocations`</ph>.)","source":"(Overrides `CMFCToolBar::AdjustLocations`.)"},{"content":"CMFCMenuBar::AllowChangeTextLabels","pos":[943,977]},{"content":"Specifies whether text labels can be shown under images on the toolbar buttons.","pos":[1016,1095]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBar::AllowChangeTextLabels<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__allowchangetextlabels)</ept>.)","pos":[1096,1222],"source":" (Overrides [CMFCToolBar::AllowChangeTextLabels](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__allowchangetextlabels).)"},{"content":"CMFCMenuBar::AllowShowOnPaneMenu","pos":[1228,1260]},{"pos":[1297,1338],"content":"(Overrides <ph id=\"ph1\">`CPane::AllowShowOnPaneMenu`</ph>.)","source":"(Overrides `CPane::AllowShowOnPaneMenu`.)"},{"content":"CMFCMenuBar::CalcFixedLayout","pos":[1344,1372]},{"content":"Calculates the horizontal size of the toolbar.","pos":[1405,1451]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBar::CalcFixedLayout<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__calcfixedlayout)</ept>.)","pos":[1452,1566],"source":" (Overrides [CMFCToolBar::CalcFixedLayout](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__calcfixedlayout).)"},{"content":"CMFCMenuBar::CalcLayout","pos":[1572,1595]},{"pos":[1623,1661],"content":"(Overrides <ph id=\"ph1\">`CMFCToolBar::CalcLayout`</ph>.)","source":"(Overrides `CMFCToolBar::CalcLayout`.)"},{"content":"CMFCMenuBar::CalcMaxButtonHeight","pos":[1667,1699]},{"content":"Calculates the maximum height of buttons in the toolbar.","pos":[1736,1792]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBar::CalcMaxButtonHeight<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__calcmaxbuttonheight)</ept>.)","pos":[1793,1915],"source":" (Overrides [CMFCToolBar::CalcMaxButtonHeight](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__calcmaxbuttonheight).)"},{"content":"CMFCMenuBar::CanBeClosed","pos":[1921,1945]},{"content":"Specifies whether a user can close the toolbar.","pos":[1974,2021]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBar::CanBeClosed<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__canbeclosed)</ept>.)","pos":[2022,2128],"source":" (Overrides [CMFCToolBar::CanBeClosed](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__canbeclosed).)"},{"content":"CMFCMenuBar::CanBeRestored","pos":[2134,2160]},{"content":"Determines whether the system can restore a toolbar to its original state after customization.","pos":[2191,2285]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBar::CanBeRestored<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__canberestored)</ept>.)","pos":[2286,2396],"source":" (Overrides [CMFCToolBar::CanBeRestored](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__canberestored).)"},{"content":"CMFCMenuBar::Create","pos":[2402,2421]},{"pos":[2445,2510],"content":"Creates a menu control and attaches it to a <ph id=\"ph1\">`CMFCMenuBar`</ph> object.","source":"Creates a menu control and attaches it to a `CMFCMenuBar` object."},{"content":"CMFCMenuBar::CreateEx","pos":[2516,2537]},{"pos":[2563,2624],"content":"Creates a <ph id=\"ph1\">`CMFCMenuBar`</ph> object with additional style options.","source":"Creates a `CMFCMenuBar` object with additional style options."},{"content":"CMFCMenuBar::CreateFromMenu","pos":[2630,2657]},{"content":"Initializes a <ph id=\"ph1\">`CMFCMenuBar`</ph> object.","pos":[2689,2724],"source":"Initializes a `CMFCMenuBar` object."},{"content":"Accepts a <ph id=\"ph1\">`HMENU`</ph> parameter that acts as a template for a populated <ph id=\"ph2\">`CMFCMenuBar`</ph>.","pos":[2725,2807],"source":" Accepts a `HMENU` parameter that acts as a template for a populated `CMFCMenuBar`."},{"content":"CMFCMenuBar::EnableHelpCombobox","pos":[2813,2844]},{"pos":[2880,2959],"content":"Enables a <bpt id=\"p1\">**</bpt>Help<ept id=\"p1\">**</ept> combo box that is located on the right side of the menu bar.","source":"Enables a **Help** combo box that is located on the right side of the menu bar."},{"content":"CMFCMenuBar::EnableMenuShadows","pos":[2965,2995]},{"content":"Specifies whether to display shadows for pop-up menus.","pos":[3030,3084]},{"content":"CMFCMenuBar::GetAvailableExpandSize","pos":[3090,3125]},{"pos":[3165,3275],"content":"(Overrides <bpt id=\"p1\">[</bpt>CPane::GetAvailableExpandSize<ept id=\"p1\">](../../mfc/reference/cpane-class.md#cpane__getavailableexpandsize)</ept>.)","source":"(Overrides [CPane::GetAvailableExpandSize](../../mfc/reference/cpane-class.md#cpane__getavailableexpandsize).)"},{"content":"CMFCMenuBar::GetColumnWidth","pos":[3281,3308]},{"content":"Returns the width of the toolbar buttons.","pos":[3340,3381]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBar::GetColumnWidth<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getcolumnwidth)</ept>.)","pos":[3382,3494],"source":" (Overrides [CMFCToolBar::GetColumnWidth](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getcolumnwidth).)"},{"content":"CMFCMenuBar::GetDefaultMenu","pos":[3500,3527]},{"content":"Returns a handle to the original menu in the resource file.","pos":[3559,3618]},{"content":"CMFCMenuBar::GetDefaultMenuResId","pos":[3624,3656]},{"content":"Returns the resource identifier for the original menu in the resource file.","pos":[3693,3768]},{"content":"CMFCMenuBar::GetFloatPopupDirection","pos":[3774,3809]},{"content":"CMFCMenuBar::GetForceDownArrows","pos":[3855,3886]},{"content":"CMFCMenuBar::GetHelpCombobox","pos":[3928,3956]},{"pos":[3989,4033],"content":"Returns a pointer to the <bpt id=\"p1\">**</bpt>Help<ept id=\"p1\">**</ept> combo box.","source":"Returns a pointer to the **Help** combo box."},{"content":"CMFCMenuBar::GetHMenu","pos":[4039,4060]},{"pos":[4086,4162],"content":"Returns the handle to the menu that is attached to the <ph id=\"ph1\">`CMFCMenuBar`</ph> object.","source":"Returns the handle to the menu that is attached to the `CMFCMenuBar` object."},{"content":"CMFCMenuBar::GetMenuFont","pos":[4168,4192]},{"content":"Returns the current global font for menu objects.","pos":[4221,4270]},{"content":"CMFCMenuBar::GetMenuItem","pos":[4276,4300]},{"content":"Returns the toolbar button associated with the provided item index.","pos":[4329,4396]},{"content":"CMFCMenuBar::GetRowHeight","pos":[4402,4427]},{"content":"Returns the height of toolbar buttons.","pos":[4457,4495]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBar::GetRowHeight<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getrowheight)</ept>.)","pos":[4496,4604],"source":" (Overrides [CMFCToolBar::GetRowHeight](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getrowheight).)"},{"content":"CMFCMenuBar::GetSystemButton","pos":[4610,4638]},{"content":"CMFCMenuBar::GetSystemButtonsCount","pos":[4677,4711]},{"content":"CMFCMenuBar::GetSystemMenu","pos":[4756,4782]},{"content":"CMFCMenuBar::HighlightDisabledItems","pos":[4819,4854]},{"content":"Indicates whether disabled menu items are highlighted.","pos":[4894,4948]},{"content":"CMFCMenuBar::IsButtonExtraSizeAvailable","pos":[4954,4993]},{"content":"Determines whether the toolbar can display buttons that have extended borders.","pos":[5037,5115]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBar::IsButtonExtraSizeAvailable<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__isbuttonextrasizeavailable)</ept>.)","pos":[5116,5252],"source":" (Overrides [CMFCToolBar::IsButtonExtraSizeAvailable](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__isbuttonextrasizeavailable).)"},{"content":"CMFCMenuBar::IsHighlightDisabledItems","pos":[5258,5295]},{"content":"Indicates whether disabled items are highlighted.","pos":[5337,5386]},{"content":"CMFCMenuBar::IsMenuShadows","pos":[5392,5418]},{"content":"Indicates whether shadows are drawn for pop-up menus.","pos":[5449,5502]},{"content":"CMFCMenuBar::IsRecentlyUsedMenus","pos":[5508,5540]},{"content":"Indicates whether recently used menu commands are displayed on the menu bar.","pos":[5577,5653]},{"content":"CMFCMenuBar::IsShowAllCommands","pos":[5659,5689]},{"content":"Indicates whether pop-up menus display all commands.","pos":[5724,5776]},{"content":"CMFCMenuBar::IsShowAllCommandsDelay","pos":[5782,5817]},{"content":"Indicates whether menus display all the commands after a short delay.","pos":[5857,5926]},{"content":"CMFCMenuBar::LoadState","pos":[5932,5954]},{"pos":[5981,6043],"content":"Loads the state of the <ph id=\"ph1\">`CMFCMenuBar`</ph> object from the registry.","source":"Loads the state of the `CMFCMenuBar` object from the registry."},{"content":"CMFCMenuBar::OnChangeHot","pos":[6049,6073]},{"content":"Called by the framework when a user selects a button on the toolbar.","pos":[6102,6170]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBar::OnChangeHot<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__onchangehot)</ept>.)","pos":[6171,6277],"source":" (Overrides [CMFCToolBar::OnChangeHot](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__onchangehot).)"},{"content":"CMFCMenuBar::OnDefaultMenuLoaded","pos":[6283,6315]},{"content":"Called by the framework when a frame window loads the default menu from the resource file.","pos":[6352,6442]},{"content":"CMFCMenuBar::OnSendCommand","pos":[6448,6474]},{"pos":[6505,6546],"content":"(Overrides <ph id=\"ph1\">`CMFCToolBar::OnSendCommand`</ph>.)","source":"(Overrides `CMFCToolBar::OnSendCommand`.)"},{"content":"CMFCMenuBar::OnSetDefaultButtonText","pos":[6552,6587]},{"content":"Called by the framework when a menu is in customization mode and the user changes a menu item's text.","pos":[6627,6728]},{"content":"CMFCMenuBar::OnToolHitTest","pos":[6734,6760]},{"pos":[6791,6832],"content":"(Overrides <ph id=\"ph1\">`CMFCToolBar::OnToolHitTest`</ph>.)","source":"(Overrides `CMFCToolBar::OnToolHitTest`.)"},{"content":"CMFCMenuBar::PreTranslateMessage","pos":[6838,6870]},{"pos":[6907,6954],"content":"(Overrides <ph id=\"ph1\">`CMFCToolBar::PreTranslateMessage`</ph>.)","source":"(Overrides `CMFCToolBar::PreTranslateMessage`.)"},{"content":"CMFCMenuBar::RestoreOriginalstate","pos":[6960,6993]},{"pos":[7031,7138],"content":"Called by the framework when a menu is in customization mode and the user selects <bpt id=\"p1\">**</bpt>Reset<ept id=\"p1\">**</ept> for a menu bar.","source":"Called by the framework when a menu is in customization mode and the user selects **Reset** for a menu bar."},{"content":"CMFCMenuBar::SaveState","pos":[7144,7166]},{"pos":[7193,7253],"content":"Saves the state of the <ph id=\"ph1\">`CMFCMenuBar`</ph> object to the registry.","source":"Saves the state of the `CMFCMenuBar` object to the registry."},{"content":"CMFCMenuBar::SetDefaultMenuResId","pos":[7259,7291]},{"content":"Sets the original menu in the resource file.","pos":[7328,7372]},{"content":"CMFCMenuBar::SetForceDownArrows","pos":[7378,7409]},{"content":"CMFCMenuBar::SetMaximizeMode","pos":[7451,7479]},{"content":"Called by the framework when an MDI child window changes its display mode.","pos":[7512,7586]},{"content":"If the MDI child window is newly maximized or is no longer maximized, this method updates the menu bar.","pos":[7587,7690]},{"content":"CMFCMenuBar::SetMenuButtonRTC","pos":[7696,7725]},{"content":"Sets the runtime class information that is generated when the user dynamically creates menu buttons.","pos":[7759,7859]},{"content":"CMFCMenuBar::SetMenuFont","pos":[7865,7889]},{"content":"Sets the font for all menus in the application.","pos":[7918,7965]},{"content":"CMFCMenuBar::SetRecentlyUsedMenus","pos":[7971,8004]},{"content":"Specifies whether a menu bar displays recently used menu commands.","pos":[8042,8108]},{"content":"CMFCMenuBar::SetShowAllCommands","pos":[8114,8145]},{"content":"Specifies whether the menu bar shows all commands.","pos":[8181,8231]},{"content":"Remarks","pos":[8241,8248]},{"content":"The <ph id=\"ph1\">`CMFCMenuBar`</ph> class is a menu bar that implements docking functionality.","pos":[8252,8328],"source":"The `CMFCMenuBar` class is a menu bar that implements docking functionality."},{"content":"It resembles a toolbar, although it cannot be closed - it is always displayed.","pos":[8329,8407]},{"content":"supports the option of displaying recently used menu item objects.","pos":[8428,8494]},{"content":"If this option is enabled, the <ph id=\"ph1\">`CMFCMenuBar`</ph> displays only a subset of the available commands on first viewing.","pos":[8495,8606],"source":" If this option is enabled, the `CMFCMenuBar` displays only a subset of the available commands on first viewing."},{"content":"Thereafter, recently used commands are displayed together with the original subset of commands.","pos":[8607,8702]},{"content":"In addition, the user can always expand the menu to view all available commands.","pos":[8703,8783]},{"content":"Thus, each available command is configured to display constantly, or to display only if it has been recently selected.","pos":[8784,8902]},{"content":"To use a <ph id=\"ph1\">`CMFCMenuBar`</ph> object, embed it in the main window frame object.","pos":[8909,8981],"source":"To use a `CMFCMenuBar` object, embed it in the main window frame object."},{"content":"When processing the <ph id=\"ph1\">`WM_CREATE`</ph> message, call <ph id=\"ph2\">`CMFCMenuBar::Create`</ph> or <ph id=\"ph3\">`CMFCMenuBar::CreateEx`</ph>.","pos":[8982,9077],"source":" When processing the `WM_CREATE` message, call `CMFCMenuBar::Create` or `CMFCMenuBar::CreateEx`."},{"content":"Regardless of which create function you use, pass in a pointer to the main frame window.","pos":[9078,9166]},{"content":"Then enable docking by calling <bpt id=\"p1\">[</bpt>CFrameWndEx::EnableDocking<ept id=\"p1\">](../../mfc/reference/cframewndex-class.md#cframewndex__enabledocking)</ept>.","pos":[9167,9296],"source":" Then enable docking by calling [CFrameWndEx::EnableDocking](../../mfc/reference/cframewndex-class.md#cframewndex__enabledocking)."},{"content":"Dock this menu by calling <bpt id=\"p1\">[</bpt>CFrameWndEx::DockPane<ept id=\"p1\">](../../mfc/reference/cframewndex-class.md#cframewndex__dockpane)</ept>.","pos":[9297,9411],"source":" Dock this menu by calling [CFrameWndEx::DockPane](../../mfc/reference/cframewndex-class.md#cframewndex__dockpane)."},{"content":"Example","pos":[9420,9427]},{"content":"The following example demonstrates how to use various methods in the <ph id=\"ph1\">`CMFCMenuBar`</ph> class.","pos":[9431,9520],"source":"The following example demonstrates how to use various methods in the `CMFCMenuBar` class."},{"content":"The example shows how to set the style of the pane, enable the customize button, enable a Help box, enable shadows for pop-up menus, and update the menu bar.","pos":[9521,9678]},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>IE Demo sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[9679,9758],"source":" This code snippet is part of the [IE Demo sample](../../visual-cpp-samples.md)."},{"content":"NVC_MFC_IEDemo#1","pos":[9776,9792]},{"content":"NVC_MFC_IEDemo#3","pos":[9867,9883]},{"content":"Inheritance Hierarchy","pos":[9955,9976]},{"content":"CObject","pos":[9981,9988]},{"content":"CCmdTarget","pos":[10035,10045]},{"content":"CWnd","pos":[10095,10099]},{"content":"CBasePane","pos":[10143,10152]},{"content":"CPane","pos":[10201,10206]},{"content":"CMFCBaseToolBar","pos":[10251,10266]},{"content":"CMFCToolBar","pos":[10321,10332]},{"content":"CMFCMenuBar","pos":[10383,10394]},{"content":"Requirements","pos":[10446,10458]},{"pos":[10462,10486],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxmenubar.h","source":"**Header:** afxmenubar.h"},{"pos":[10541,10569],"content":"CMFCMenuBar::AdjustLocations"},{"content":"Adjusts the positions of the menu items on the menu bar.","pos":[10573,10629]},{"content":"Remarks","pos":[10686,10693]},{"pos":[10754,10788],"content":"CMFCMenuBar::AllowChangeTextLabels"},{"content":"Determines whether text labels are allowed under images in the menu bar.","pos":[10792,10864]},{"content":"Return Value","pos":[10936,10948]},{"pos":[10952,11023],"content":"Returns <ph id=\"ph1\">`TRUE`</ph> if the user can choose to show text labels under images.","source":"Returns `TRUE` if the user can choose to show text labels under images."},{"content":"Remarks","pos":[11033,11040]},{"pos":[11099,11131],"content":"CMFCMenuBar::AllowShowOnPaneMenu"},{"content":"Return Value","pos":[11304,11316]},{"content":"Remarks","pos":[11326,11333]},{"pos":[11388,11416],"content":"CMFCMenuBar::CalcFixedLayout"},{"content":"Parameters","pos":[11613,11623]},{"content":"[in]","pos":[11627,11631]},{"content":"[in]","pos":[11646,11650]},{"content":"Return Value","pos":[11668,11680]},{"content":"Remarks","pos":[11690,11697]},{"pos":[11747,11770],"content":"CMFCMenuBar::CalcLayout"},{"content":"Parameters","pos":[11967,11977]},{"content":"[in]","pos":[11981,11985]},{"content":"[in]","pos":[11998,12002]},{"content":"Return Value","pos":[12022,12034]},{"content":"Remarks","pos":[12044,12051]},{"pos":[12110,12142],"content":"CMFCMenuBar::CalcMaxButtonHeight"},{"content":"Return Value","pos":[12305,12317]},{"content":"Remarks","pos":[12327,12334]},{"pos":[12385,12409],"content":"CMFCMenuBar::CanBeClosed"},{"content":"Return Value","pos":[12574,12586]},{"content":"Remarks","pos":[12596,12603]},{"pos":[12656,12682],"content":"CMFCMenuBar::CanBeRestored"},{"content":"Return Value","pos":[12849,12861]},{"content":"Remarks","pos":[12871,12878]},{"pos":[12924,12943],"content":"CMFCMenuBar::Create"},{"pos":[12947,13054],"content":"Creates a menu control and attaches it to a <bpt id=\"p1\">[</bpt>CMFCMenuBar<ept id=\"p1\">](../../mfc/reference/cmfcmenubar-class.md)</ept> object.","source":"Creates a menu control and attaches it to a [CMFCMenuBar](../../mfc/reference/cmfcmenubar-class.md) object."},{"content":"Parameters","pos":[13206,13216]},{"content":"[in]","pos":[13220,13224]},{"content":"Pointer to the parent window for the new <ph id=\"ph1\">`CMFCMenuBar`</ph> object.","pos":[13241,13303],"source":" Pointer to the parent window for the new `CMFCMenuBar` object."},{"content":"[in]","pos":[13310,13314]},{"content":"The style of the new menu bar.","pos":[13328,13358]},{"content":"[in]","pos":[13365,13369]},{"content":"The ID for the child window of the menu bar.","pos":[13379,13423]},{"content":"Return Value","pos":[13433,13445]},{"pos":[13456,13489],"content":"if successful; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if successful; otherwise `FALSE`."},{"content":"Remarks","pos":[13499,13506]},{"content":"After you construct a <ph id=\"ph1\">`CMFCMenuBar`</ph> object, you must call <ph id=\"ph2\">`Create`</ph>.","pos":[13510,13577],"source":"After you construct a `CMFCMenuBar` object, you must call `Create`."},{"content":"This method creates the <ph id=\"ph1\">`CMFCMenuBar`</ph> control and attaches it to the <ph id=\"ph2\">`CMFCMenuBar`</ph> object.","pos":[13578,13668],"source":" This method creates the `CMFCMenuBar` control and attaches it to the `CMFCMenuBar` object."},{"pos":[13675,13812],"content":"For more information about toolbar styles, see <bpt id=\"p1\">[</bpt>CBasePane::SetPaneStyle<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__setpanestyle)</ept>.","source":"For more information about toolbar styles, see [CBasePane::SetPaneStyle](../../mfc/reference/cbasepane-class.md#cbasepane__setpanestyle)."},{"pos":[13860,13881],"content":"CMFCMenuBar::CreateEx"},{"pos":[13885,13989],"content":"Creates a <bpt id=\"p1\">[</bpt>CMFCMenuBar<ept id=\"p1\">](../../mfc/reference/cmfcmenubar-class.md)</ept> object with specified extended styles.","source":"Creates a [CMFCMenuBar](../../mfc/reference/cmfcmenubar-class.md) object with specified extended styles."},{"content":"Parameters","pos":[14237,14247]},{"content":"[in]","pos":[14251,14255]},{"content":"Pointer to the parent window of the new <ph id=\"ph1\">`CMFCMenuBar`</ph> object.","pos":[14272,14333],"source":" Pointer to the parent window of the new `CMFCMenuBar` object."},{"content":"[in]","pos":[14340,14344]},{"content":"Additional styles for the new menu bar.","pos":[14362,14401]},{"content":"[in]","pos":[14408,14412]},{"content":"The main style of the new menu bar.","pos":[14426,14461]},{"content":"[in]","pos":[14468,14472]},{"content":"A <ph id=\"ph1\">`CRect`</ph> parameter that specifies the sizes for the borders of the <ph id=\"ph2\">`CMFCMenuBar`</ph> object.","pos":[14488,14577],"source":" A `CRect` parameter that specifies the sizes for the borders of the `CMFCMenuBar` object."},{"content":"[in]","pos":[14584,14588]},{"content":"The ID for the child window of the menu bar.","pos":[14598,14642]},{"content":"Return Value","pos":[14652,14664]},{"content":"Nonzero if the method is successful; otherwise 0.","pos":[14668,14717]},{"content":"Remarks","pos":[14727,14734]},{"content":"You should use this function instead of <bpt id=\"p1\">[</bpt>CMFCMenuBar::Create<ept id=\"p1\">](#cmfcmenubar__create)</ept> when you want to specify styles in addition to the toolbar style.","pos":[14738,14887],"source":"You should use this function instead of [CMFCMenuBar::Create](#cmfcmenubar__create) when you want to specify styles in addition to the toolbar style."},{"content":"Some frequently used additional styles are <ph id=\"ph1\">`TBSTYLE_TRANSPARENT`</ph> and <ph id=\"ph2\">`CBRS_TOP`</ph>.","pos":[14888,14968],"source":" Some frequently used additional styles are `TBSTYLE_TRANSPARENT` and `CBRS_TOP`."},{"pos":[14975,15280],"content":"For lists of additional styles, see <bpt id=\"p1\">[</bpt>Toolbar Control and Button Styles<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb760439)</ept>, <bpt id=\"p2\">[</bpt>common control styles<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb775498)</ept>, and <bpt id=\"p3\">[</bpt>common window styles<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/ms632600)</ept>.","source":"For lists of additional styles, see [Toolbar Control and Button Styles](http://msdn.microsoft.com/library/windows/desktop/bb760439), [common control styles](http://msdn.microsoft.com/library/windows/desktop/bb775498), and [common window styles](http://msdn.microsoft.com/library/windows/desktop/ms632600)."},{"content":"Example","pos":[15290,15297]},{"content":"The following example demonstrates how to use the <ph id=\"ph1\">`CreateEx`</ph> method of the <ph id=\"ph2\">`CMFCMenuBar`</ph> class.","pos":[15301,15396],"source":"The following example demonstrates how to use the `CreateEx` method of the `CMFCMenuBar` class."},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>IE Demo sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[15397,15476],"source":" This code snippet is part of the [IE Demo sample](../../visual-cpp-samples.md)."},{"content":"NVC_MFC_IEDemo#1","pos":[15494,15510]},{"content":"NVC_MFC_IEDemo#2","pos":[15585,15601]},{"pos":[15718,15745],"content":"CMFCMenuBar::CreateFromMenu"},{"content":"Initializes a <bpt id=\"p1\">[</bpt>CMFCMenuBar<ept id=\"p1\">](../../mfc/reference/cmfcmenubar-class.md)</ept> object.","pos":[15749,15826],"source":"Initializes a [CMFCMenuBar](../../mfc/reference/cmfcmenubar-class.md) object."},{"content":"This method models the <ph id=\"ph1\">`CMFCMenuBar`</ph> object after a <ph id=\"ph2\">`HMENU`</ph> parameter.","pos":[15827,15897],"source":" This method models the `CMFCMenuBar` object after a `HMENU` parameter."},{"content":"Parameters","pos":[16035,16045]},{"content":"[in]","pos":[16049,16053]},{"content":"A handle to a menu resource.","pos":[16065,16093]},{"content":"uses this resource as a template for the <ph id=\"ph1\">`CMFCMenuBar`</ph>.","pos":[16111,16166],"source":" uses this resource as a template for the `CMFCMenuBar`."},{"content":"[in]","pos":[16173,16177]},{"content":"A Boolean that indicates whether the new menu is the default menu.","pos":[16196,16262]},{"content":"[in]","pos":[16269,16273]},{"content":"A Boolean that indicates whether this method forces a menu update.","pos":[16292,16358]},{"content":"Remarks","pos":[16368,16375]},{"content":"Use this method if you want a menu control to have the same menu items as a menu resource.","pos":[16379,16469]},{"content":"You call this method after you call either <bpt id=\"p1\">[</bpt>CMFCMenuBar::Create<ept id=\"p1\">](#cmfcmenubar__create)</ept> or <bpt id=\"p2\">[</bpt>CMFCMenuBar::CreateEx<ept id=\"p2\">](#cmfcmenubar__createex)</ept>.","pos":[16470,16608],"source":" You call this method after you call either [CMFCMenuBar::Create](#cmfcmenubar__create) or [CMFCMenuBar::CreateEx](#cmfcmenubar__createex)."},{"pos":[16666,16697],"content":"CMFCMenuBar::EnableHelpCombobox"},{"pos":[16701,16780],"content":"Enables a <bpt id=\"p1\">**</bpt>Help<ept id=\"p1\">**</ept> combo box that is located on the right side of the menu bar.","source":"Enables a **Help** combo box that is located on the right side of the menu bar."},{"content":"Parameters","pos":[16911,16921]},{"content":"[in]","pos":[16925,16929]},{"content":"The command ID for the button of the <bpt id=\"p1\">**</bpt>Help<ept id=\"p1\">**</ept> combo box.","pos":[16940,16996],"source":" The command ID for the button of the **Help** combo box."},{"content":"[in]","pos":[17003,17007]},{"content":"A string that contains the text that the framework displays in the combo box if it is empty and not active.","pos":[17024,17131]},{"content":"For example, \"Enter the text here\".","pos":[17132,17167]},{"content":"[in]","pos":[17174,17178]},{"content":"The width of the button for the combo box in pixels.","pos":[17199,17251]},{"content":"Remarks","pos":[17261,17268]},{"pos":[17272,17413],"content":"The <bpt id=\"p1\">**</bpt>Help<ept id=\"p1\">**</ept> combo box resembles the <bpt id=\"p2\">**</bpt>Help<ept id=\"p2\">**</ept> combo box in the menu bar of <ph id=\"ph1\">[!INCLUDE[ofprword](../../mfc/reference/includes/ofprword_md.md)]</ph>.","source":"The **Help** combo box resembles the **Help** combo box in the menu bar of [!INCLUDE[ofprword](../../mfc/reference/includes/ofprword_md.md)]."},{"content":"When you call this method with <ph id=\"ph1\">`uiID`</ph> set to 0, this method hides the combo box.","pos":[17420,17500],"source":"When you call this method with `uiID` set to 0, this method hides the combo box."},{"content":"Otherwise, this method displays the combo box automatically on the right side of your menu bar.","pos":[17501,17596]},{"content":"After you call this method, call <bpt id=\"p1\">[</bpt>CMFCMenuBar::GetHelpCombobox<ept id=\"p1\">](#cmfcmenubar__gethelpcombobox)</ept> to obtain a pointer to the inserted <bpt id=\"p2\">[</bpt>CMFCToolBarComboBoxButton<ept id=\"p2\">](../../mfc/reference/cmfctoolbarcomboboxbutton-class.md)</ept> object.","pos":[17597,17819],"source":" After you call this method, call [CMFCMenuBar::GetHelpCombobox](#cmfcmenubar__gethelpcombobox) to obtain a pointer to the inserted [CMFCToolBarComboBoxButton](../../mfc/reference/cmfctoolbarcomboboxbutton-class.md) object."},{"pos":[17876,17906],"content":"CMFCMenuBar::EnableMenuShadows"},{"content":"Enables shadows for pop-up menus.","pos":[17910,17943]},{"content":"Parameters","pos":[18020,18030]},{"content":"[in]","pos":[18034,18038]},{"content":"A Boolean parameter that indicates whether shadows should be enabled for pop-up menus.","pos":[18052,18138]},{"content":"Remarks","pos":[18148,18155]},{"content":"The algorithm that this method uses is complex and may decrease the performance of your application on slower systems.","pos":[18159,18277]},{"pos":[18339,18374],"content":"CMFCMenuBar::GetAvailableExpandSize"},{"content":"Return Value","pos":[18549,18561]},{"content":"Remarks","pos":[18571,18578]},{"pos":[18632,18659],"content":"CMFCMenuBar::GetColumnWidth"},{"content":"Return Value","pos":[18826,18838]},{"content":"Remarks","pos":[18848,18855]},{"pos":[18909,18936],"content":"CMFCMenuBar::GetDefaultMenu"},{"content":"Retrieves a handle to the original menu.","pos":[18940,18980]},{"content":"The framework loads the original menu from the resource file.","pos":[18981,19042]},{"content":"Return Value","pos":[19100,19112]},{"content":"A handle to a menu resource.","pos":[19116,19144]},{"content":"Remarks","pos":[19154,19161]},{"content":"If your application customizes a menu, you can use this method to retrieve a handle to the original menu.","pos":[19165,19270]},{"pos":[19329,19361],"content":"CMFCMenuBar::GetDefaultMenuResId"},{"content":"Retrieves the resource identifier for the default menu.","pos":[19365,19420]},{"content":"Return Value","pos":[19482,19494]},{"content":"A menu resource identifier.","pos":[19498,19525]},{"content":"Remarks","pos":[19535,19542]},{"pos":[19546,19677],"content":"The framework loads the default menu for the <bpt id=\"p1\">[</bpt>CMFCMenuBar<ept id=\"p1\">](../../mfc/reference/cmfcmenubar-class.md)</ept> object from the resource file.","source":"The framework loads the default menu for the [CMFCMenuBar](../../mfc/reference/cmfcmenubar-class.md) object from the resource file."},{"pos":[19739,19774],"content":"CMFCMenuBar::GetFloatPopupDirection"},{"content":"Parameters","pos":[19962,19972]},{"pos":[19976,19980],"content":"[in]"},{"content":"Return Value","pos":[20000,20012]},{"content":"Remarks","pos":[20022,20029]},{"pos":[20087,20118],"content":"CMFCMenuBar::GetForceDownArrows"},{"content":"Return Value","pos":[20273,20285]},{"content":"Remarks","pos":[20295,20302]},{"pos":[20357,20385],"content":"CMFCMenuBar::GetHelpCombobox"},{"pos":[20389,20433],"content":"Returns a pointer to the <bpt id=\"p1\">**</bpt>Help<ept id=\"p1\">**</ept> combo box.","source":"Returns a pointer to the **Help** combo box."},{"content":"Return Value","pos":[20504,20516]},{"content":"A pointer to the <bpt id=\"p1\">**</bpt>Help<ept id=\"p1\">**</ept> combo box.","pos":[20520,20556],"source":"A pointer to the **Help** combo box."},{"content":"if the <bpt id=\"p1\">**</bpt>Help<ept id=\"p1\">**</ept> combo box is hidden or not enabled.","pos":[20564,20615],"source":" if the **Help** combo box is hidden or not enabled."},{"content":"Remarks","pos":[20625,20632]},{"content":"The <bpt id=\"p1\">**</bpt>Help<ept id=\"p1\">**</ept> combo box is located on the right side of the menu bar.","pos":[20636,20704],"source":"The **Help** combo box is located on the right side of the menu bar."},{"content":"Call the method <bpt id=\"p1\">[</bpt>CMFCMenuBar::EnableHelpCombobox<ept id=\"p1\">](#cmfcmenubar__enablehelpcombobox)</ept> to enable this combo box.","pos":[20705,20814],"source":" Call the method [CMFCMenuBar::EnableHelpCombobox](#cmfcmenubar__enablehelpcombobox) to enable this combo box."},{"pos":[20862,20883],"content":"CMFCMenuBar::GetHMenu"},{"pos":[20887,20999],"content":"Retrieves the handle to the menu attached to the <bpt id=\"p1\">[</bpt>CMFCMenuBar<ept id=\"p1\">](../../mfc/reference/cmfcmenubar-class.md)</ept> object.","source":"Retrieves the handle to the menu attached to the [CMFCMenuBar](../../mfc/reference/cmfcmenubar-class.md) object."},{"pos":[21092,21116],"content":"CMFCMenuBar::GetMenuFont"},{"content":"Retrieves the current menu font.","pos":[21120,21152]},{"content":"Parameters","pos":[21229,21239]},{"content":"[in]","pos":[21243,21247]},{"content":"A Boolean parameter that specifies whether to return the horizontal or vertical font.","pos":[21259,21344]},{"content":"indicates the horizontal font.","pos":[21352,21382]},{"content":"Return Value","pos":[21392,21404]},{"pos":[21408,21517],"content":"A pointer to a <bpt id=\"p1\">[</bpt>CFont<ept id=\"p1\">](../../mfc/reference/cfont-class.md)</ept> parameter that contains the current menu bar font.","source":"A pointer to a [CFont](../../mfc/reference/cfont-class.md) parameter that contains the current menu bar font."},{"content":"Remarks","pos":[21527,21534]},{"content":"The returned font is a global parameter for the application.","pos":[21538,21598]},{"content":"Two global fonts are maintained for all <ph id=\"ph1\">`CMFCMenuBar`</ph> objects.","pos":[21599,21661],"source":" Two global fonts are maintained for all `CMFCMenuBar` objects."},{"content":"These separate fonts are used for horizontal and vertical menu bars.","pos":[21662,21730]},{"pos":[21781,21805],"content":"CMFCMenuBar::GetMenuItem"},{"pos":[21809,21934],"content":"Retrieves a <bpt id=\"p1\">[</bpt>CMFCToolBarButton<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept> object on a menu bar based on the item index.","source":"Retrieves a [CMFCToolBarButton](../../mfc/reference/cmfctoolbarbutton-class.md) object on a menu bar based on the item index."},{"content":"Parameters","pos":[22011,22021]},{"content":"[in]","pos":[22025,22029]},{"content":"The index of the menu item to return.","pos":[22041,22078]},{"content":"Return Value","pos":[22088,22100]},{"content":"A pointer to the <ph id=\"ph1\">`CMFCToolBarButton`</ph> object that matches the index specified by <ph id=\"ph2\">`iItem`</ph>.","pos":[22104,22192],"source":"A pointer to the `CMFCToolBarButton` object that matches the index specified by `iItem`."},{"content":"if the index is invalid.","pos":[22200,22224]},{"pos":[22276,22301],"content":"CMFCMenuBar::GetRowHeight"},{"content":"Return Value","pos":[22466,22478]},{"content":"Remarks","pos":[22488,22495]},{"pos":[22550,22578],"content":"CMFCMenuBar::GetSystemButton"},{"content":"Parameters","pos":[22809,22819]},{"content":"[in]","pos":[22823,22827]},{"content":"[in]","pos":[22839,22843]},{"content":"Return Value","pos":[22866,22878]},{"content":"Remarks","pos":[22888,22895]},{"pos":[22956,22990],"content":"CMFCMenuBar::GetSystemButtonsCount"},{"content":"Return Value","pos":[23156,23168]},{"content":"Remarks","pos":[23178,23185]},{"pos":[23238,23264],"content":"CMFCMenuBar::GetSystemMenu"},{"content":"Return Value","pos":[23447,23459]},{"content":"Remarks","pos":[23469,23476]},{"pos":[23538,23573],"content":"CMFCMenuBar::HighlightDisabledItems"},{"content":"Controls whether the framework highlights disabled menu items.","pos":[23577,23639]},{"content":"Parameters","pos":[23724,23734]},{"content":"[in]","pos":[23738,23742]},{"content":"A Boolean parameter that indicates whether the framework highlights unavailable menu items.","pos":[23759,23850]},{"content":"Remarks","pos":[23860,23867]},{"content":"By default, the framework does not highlight unavailable menu items when the user positions the mouse pointer over them.","pos":[23871,23991]},{"pos":[24057,24096],"content":"CMFCMenuBar::IsButtonExtraSizeAvailable"},{"content":"Return Value","pos":[24276,24288]},{"content":"Remarks","pos":[24298,24305]},{"pos":[24369,24406],"content":"CMFCMenuBar::IsHighlightDisabledItems"},{"content":"Indicates whether the framework highlights unavailable menu items.","pos":[24410,24476]},{"content":"Return Value","pos":[24541,24553]},{"pos":[24564,24625],"content":"if unavailable menu items are highlighted; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if unavailable menu items are highlighted; otherwise `FALSE`."},{"content":"Remarks","pos":[24635,24642]},{"content":"By default, the framework does not highlight unavailable menu items when the user positions the mouse pointer over them.","pos":[24646,24766]},{"content":"Use the <bpt id=\"p1\">[</bpt>CMFCMenuBar::HighlightDisabledItems<ept id=\"p1\">](#cmfcmenubar__highlightdisableditems)</ept> method to enable this feature.","pos":[24767,24881],"source":" Use the [CMFCMenuBar::HighlightDisabledItems](#cmfcmenubar__highlightdisableditems) method to enable this feature."},{"pos":[24934,24960],"content":"CMFCMenuBar::IsMenuShadows"},{"content":"Indicates whether the framework draws shadows for pop-up menus.","pos":[24964,25027]},{"content":"Return Value","pos":[25081,25093]},{"pos":[25104,25159],"content":"if the framework draws menu shadows; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the framework draws menu shadows; otherwise `FALSE`."},{"content":"Remarks","pos":[25169,25176]},{"pos":[25180,25295],"content":"Use the <bpt id=\"p1\">[</bpt>CMFCMenuBar::EnableMenuShadows<ept id=\"p1\">](#cmfcmenubar__enablemenushadows)</ept> method to enable or disable this feature.","source":"Use the [CMFCMenuBar::EnableMenuShadows](#cmfcmenubar__enablemenushadows) method to enable or disable this feature."},{"pos":[25354,25386],"content":"CMFCMenuBar::IsRecentlyUsedMenus"},{"content":"Indicates whether recently used menu commands are displayed on the menu bar.","pos":[25390,25466]},{"content":"Return Value","pos":[25526,25538]},{"pos":[25542,25667],"content":"Nonzero if the <bpt id=\"p1\">[</bpt>CMFCMenuBar<ept id=\"p1\">](../../mfc/reference/cmfcmenubar-class.md)</ept> object shows recently used menu commands; otherwise 0.","source":"Nonzero if the [CMFCMenuBar](../../mfc/reference/cmfcmenubar-class.md) object shows recently used menu commands; otherwise 0."},{"content":"Remarks","pos":[25677,25684]},{"pos":[25688,25843],"content":"Use the function <bpt id=\"p1\">[</bpt>CMFCMenuBar::SetRecentlyUsedMenus<ept id=\"p1\">](#cmfcmenubar__setrecentlyusedmenus)</ept> to control whether the menu bar shows recently used menu commands.","source":"Use the function [CMFCMenuBar::SetRecentlyUsedMenus](#cmfcmenubar__setrecentlyusedmenus) to control whether the menu bar shows recently used menu commands."},{"pos":[25900,25930],"content":"CMFCMenuBar::IsShowAllCommands"},{"content":"Indicates whether menus display all commands.","pos":[25934,25979]},{"content":"Return Value","pos":[26037,26049]},{"pos":[26053,26159],"content":"Nonzero if the <bpt id=\"p1\">[</bpt>CMFCMenuBar<ept id=\"p1\">](../../mfc/reference/cmfcmenubar-class.md)</ept> displays all commands; otherwise 0.","source":"Nonzero if the [CMFCMenuBar](../../mfc/reference/cmfcmenubar-class.md) displays all commands; otherwise 0."},{"content":"Remarks","pos":[26169,26176]},{"content":"A <ph id=\"ph1\">`CMFCMenuBar`</ph> object can be configured to either show all commands or show only a subset of commands.","pos":[26180,26283],"source":"A `CMFCMenuBar` object can be configured to either show all commands or show only a subset of commands."},{"content":"For more information about this feature, see <bpt id=\"p1\">[</bpt>CMFCMenuBar Class<ept id=\"p1\">](../../mfc/reference/cmfcmenubar-class.md)</ept>.","pos":[26284,26391],"source":" For more information about this feature, see [CMFCMenuBar Class](../../mfc/reference/cmfcmenubar-class.md)."},{"content":"will tell you how this feature is configured for the <ph id=\"ph1\">`CMFCMenuBar`</ph> object.","pos":[26418,26492],"source":" will tell you how this feature is configured for the `CMFCMenuBar` object."},{"content":"To control which menu commands are shown, use the methods <bpt id=\"p1\">[</bpt>CMFCMenuBar::SetShowAllCommands<ept id=\"p1\">](#cmfcmenubar__setshowallcommands)</ept> and <bpt id=\"p2\">[</bpt>CMFCMenuBar::SetRecentlyUsedMenus<ept id=\"p2\">](#cmfcmenubar__setrecentlyusedmenus)</ept>.","pos":[26493,26695],"source":" To control which menu commands are shown, use the methods [CMFCMenuBar::SetShowAllCommands](#cmfcmenubar__setshowallcommands) and [CMFCMenuBar::SetRecentlyUsedMenus](#cmfcmenubar__setrecentlyusedmenus)."},{"pos":[26757,26792],"content":"CMFCMenuBar::IsShowAllCommandsDelay"},{"pos":[26796,26927],"content":"Indicates whether the <bpt id=\"p1\">[</bpt>CMFCMenuBar<ept id=\"p1\">](../../mfc/reference/cmfcmenubar-class.md)</ept> object displays all the commands after a short delay.","source":"Indicates whether the [CMFCMenuBar](../../mfc/reference/cmfcmenubar-class.md) object displays all the commands after a short delay."},{"content":"Return Value","pos":[26990,27002]},{"content":"Nonzero if the menu bar displays full menus after a short delay; otherwise 0.","pos":[27006,27083]},{"content":"Remarks","pos":[27093,27100]},{"content":"When you configure a menu bar to display recently used items, the menu bar displays the full menu in one of two ways:","pos":[27104,27221]},{"content":"Display the full menu after a programmed delay from when the user hovers the cursor over the arrow at the bottom of the menu.","pos":[27231,27356]},{"content":"Display the full menu after the user clicks the arrow at the bottom of the menu.","pos":[27366,27446]},{"content":"By default, all <ph id=\"ph1\">`CMFCMenuBar`</ph> objects use the option to display the full menu after a short delay.","pos":[27453,27551],"source":"By default, all `CMFCMenuBar` objects use the option to display the full menu after a short delay."},{"content":"This option cannot be changed programmatically in the <ph id=\"ph1\">`CMFCMenuBar`</ph> class.","pos":[27552,27626],"source":" This option cannot be changed programmatically in the `CMFCMenuBar` class."},{"content":"However, a user can change the behavior during toolbar customization by using the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> dialog box..","pos":[27627,27735],"source":" However, a user can change the behavior during toolbar customization by using the **Customize** dialog box.."},{"pos":[27784,27806],"content":"CMFCMenuBar::LoadState"},{"content":"Loads the state of the menu bar from the Windows registry.","pos":[27810,27868]},{"content":"Parameters","pos":[28005,28015]},{"content":"[in]","pos":[28019,28023]},{"content":"A string that contains the path of a Windows registry key.","pos":[28045,28103]},{"content":"[in]","pos":[28110,28114]},{"content":"The control ID for the menu bar.","pos":[28127,28159]},{"content":"[in]","pos":[28166,28170]},{"content":"A reserved value.","pos":[28181,28198]},{"content":"Return Value","pos":[28208,28220]},{"pos":[28231,28279],"content":"if the method was successful; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the method was successful; otherwise `FALSE`."},{"content":"Remarks","pos":[28289,28296]},{"content":"Use the <bpt id=\"p1\">[</bpt>CMFCMenuBar::SaveState<ept id=\"p1\">](#cmfcmenubar__savestate)</ept> method to save the state of the menu bar to the registry.","pos":[28300,28415],"source":"Use the [CMFCMenuBar::SaveState](#cmfcmenubar__savestate) method to save the state of the menu bar to the registry."},{"content":"The saved information includes the menu items, the dock state, and the position of the menu bar.","pos":[28416,28512]},{"content":"In most cases your application does not call <ph id=\"ph1\">`LoadState`</ph>.","pos":[28519,28576],"source":"In most cases your application does not call `LoadState`."},{"content":"The framework calls this method when it initializes the workspace.","pos":[28577,28643]},{"pos":[28694,28718],"content":"CMFCMenuBar::OnChangeHot"},{"content":"Parameters","pos":[28882,28892]},{"pos":[28896,28900],"content":"[in]"},{"content":"Remarks","pos":[28917,28924]},{"pos":[28983,29015],"content":"CMFCMenuBar::OnDefaultMenuLoaded"},{"content":"The framework calls this method when it loads the menu resource from the resource file.","pos":[29019,29106]},{"content":"Parameters","pos":[29178,29188]},{"content":"[in]","pos":[29192,29196]},{"content":"The handle for the menu attached to the <bpt id=\"p1\">[</bpt>CMFCMenuBar<ept id=\"p1\">](../../mfc/reference/cmfcmenubar-class.md)</ept> object.","pos":[29208,29311],"source":" The handle for the menu attached to the [CMFCMenuBar](../../mfc/reference/cmfcmenubar-class.md) object."},{"content":"Remarks","pos":[29321,29328]},{"content":"The default implementation of this function does nothing.","pos":[29332,29389]},{"content":"Override this function to execute custom code after the framework loads a menu resource from the resource file.","pos":[29390,29501]},{"pos":[29554,29580],"content":"CMFCMenuBar::OnSendCommand"},{"content":"Parameters","pos":[29770,29780]},{"pos":[29784,29788],"content":"[in]"},{"content":"Return Value","pos":[29808,29820]},{"content":"Remarks","pos":[29830,29837]},{"pos":[29899,29934],"content":"CMFCMenuBar::OnSetDefaultButtonText"},{"content":"The framework calls this method when the user changes the text of an item on the menu bar.","pos":[29938,30028]},{"content":"Parameters","pos":[30118,30128]},{"content":"[in]","pos":[30132,30136]},{"content":"A pointer to the <bpt id=\"p1\">[</bpt>CMFCToolBarButton<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept> object that the user wants to customize.","pos":[30150,30275],"source":" A pointer to the [CMFCToolBarButton](../../mfc/reference/cmfctoolbarbutton-class.md) object that the user wants to customize."},{"content":"Return Value","pos":[30285,30297]},{"pos":[30308,30385],"content":"if the framework applies the user changes to the menu bar; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the framework applies the user changes to the menu bar; otherwise `FALSE`."},{"content":"Remarks","pos":[30395,30402]},{"content":"The default implementation for this method changes the text of the button to the text that the user provides.","pos":[30406,30515]},{"pos":[30568,30594],"content":"CMFCMenuBar::OnToolHitTest"},{"content":"Parameters","pos":[30802,30812]},{"content":"[in]","pos":[30816,30820]},{"content":"[in]","pos":[30832,30836]},{"content":"Return Value","pos":[30852,30864]},{"content":"Remarks","pos":[30874,30881]},{"pos":[30940,30972],"content":"CMFCMenuBar::PreTranslateMessage"},{"content":"Parameters","pos":[31145,31155]},{"pos":[31159,31163],"content":"[in]"},{"content":"Return Value","pos":[31180,31192]},{"content":"Remarks","pos":[31202,31209]},{"pos":[31269,31302],"content":"CMFCMenuBar::RestoreOriginalstate"},{"pos":[31306,31396],"content":"Called by the framework when the user selects <bpt id=\"p1\">**</bpt>Reset<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>Customize<ept id=\"p2\">**</ept> dialog box.","source":"Called by the framework when the user selects **Reset** from the **Customize** dialog box."},{"content":"Return Value","pos":[31458,31470]},{"content":"Nonzero if the method is successful; otherwise 0.","pos":[31474,31523]},{"content":"Remarks","pos":[31533,31540]},{"content":"This method is called when the user selects <bpt id=\"p1\">**</bpt>Reset<ept id=\"p1\">**</ept> from the customization menu.","pos":[31544,31626],"source":"This method is called when the user selects **Reset** from the customization menu."},{"content":"You can also manually call this method to programmatically reset the state of the menu bar.","pos":[31627,31718]},{"content":"This method loads the original state from the resource file.","pos":[31719,31779]},{"pos":[31786,31883],"content":"Override this method if you want to do any processing when the user selects the <bpt id=\"p1\">**</bpt>Reset<ept id=\"p1\">**</ept> option.","source":"Override this method if you want to do any processing when the user selects the **Reset** option."},{"pos":[31932,31954],"content":"CMFCMenuBar::SaveState"},{"pos":[31958,32068],"content":"Saves the state of the <bpt id=\"p1\">[</bpt>CMFCMenuBar<ept id=\"p1\">](../../mfc/reference/cmfcmenubar-class.md)</ept> object to the Windows registry.","source":"Saves the state of the [CMFCMenuBar](../../mfc/reference/cmfcmenubar-class.md) object to the Windows registry."},{"content":"Parameters","pos":[32206,32216]},{"content":"[in]","pos":[32220,32224]},{"content":"A string that contains the path of a Windows registry key.","pos":[32246,32304]},{"content":"[in]","pos":[32311,32315]},{"content":"The control ID for the menu bar.","pos":[32328,32360]},{"content":"[in]","pos":[32367,32371]},{"content":"A reserved value.","pos":[32382,32399]},{"content":"Return Value","pos":[32409,32421]},{"pos":[32432,32465],"content":"if successful; otherwise <ph id=\"ph1\">`FALSE`</ph>;","source":" if successful; otherwise `FALSE`;"},{"content":"Remarks","pos":[32475,32482]},{"content":"Usually, your application does not call <ph id=\"ph1\">`SaveState`</ph>.","pos":[32486,32538],"source":"Usually, your application does not call `SaveState`."},{"content":"The framework calls this method when the workspace is serialized.","pos":[32539,32604]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CWinAppEx::SaveState<ept id=\"p1\">](../../mfc/reference/cwinappex-class.md#cwinappex__savestate)</ept>.","pos":[32605,32715],"source":" For more information, see [CWinAppEx::SaveState](../../mfc/reference/cwinappex-class.md#cwinappex__savestate)."},{"content":"The saved information includes the menu items, the dock state, and the position of the menu bar.","pos":[32722,32818]},{"pos":[32877,32909],"content":"CMFCMenuBar::SetDefaultMenuResId"},{"pos":[32913,33029],"content":"Sets the default menu for a <bpt id=\"p1\">[</bpt>CMFCMenuBar<ept id=\"p1\">](../../mfc/reference/cmfcmenubar-class.md)</ept> object based on the resource ID.","source":"Sets the default menu for a [CMFCMenuBar](../../mfc/reference/cmfcmenubar-class.md) object based on the resource ID."},{"content":"Parameters","pos":[33094,33104]},{"content":"[in]","pos":[33108,33112]},{"content":"The resource ID for the new default menu.","pos":[33126,33167]},{"content":"Remarks","pos":[33177,33184]},{"pos":[33188,33320],"content":"The <bpt id=\"p1\">[</bpt>CMFCMenuBar::RestoreOriginalstate<ept id=\"p1\">](#cmfcmenubar__restoreoriginalstate)</ept> method restores the default menu from the resource file.","source":"The [CMFCMenuBar::RestoreOriginalstate](#cmfcmenubar__restoreoriginalstate) method restores the default menu from the resource file."},{"pos":[33327,33462],"content":"Use the <bpt id=\"p1\">[</bpt>CMFCMenuBar::GetDefaultMenuResId<ept id=\"p1\">](#cmfcmenubar__getdefaultmenuresid)</ept> method to retrieve the default menu without restoring it.","source":"Use the [CMFCMenuBar::GetDefaultMenuResId](#cmfcmenubar__getdefaultmenuresid) method to retrieve the default menu without restoring it."},{"pos":[33520,33551],"content":"CMFCMenuBar::SetForceDownArrows"},{"content":"Parameters","pos":[33717,33727]},{"pos":[33731,33735],"content":"[in]"},{"content":"Remarks","pos":[33754,33761]},{"pos":[33816,33844],"content":"CMFCMenuBar::SetMaximizeMode"},{"content":"The framework calls this method when a MDI changes its display mode and the menu bar must be updated.","pos":[33848,33949]},{"content":"Parameters","pos":[34070,34080]},{"content":"[in]","pos":[34084,34088]},{"content":"A Boolean that specifies the mode.","pos":[34099,34133]},{"content":"See the Remarks section for more information.","pos":[34134,34179]},{"content":"[in]","pos":[34186,34190]},{"content":"A pointer to the MDI child window that is changing.","pos":[34201,34252]},{"content":"[in]","pos":[34259,34263]},{"content":"A Boolean that specifies whether the layout of the menu bar should be recalculated immediately.","pos":[34283,34378]},{"content":"Remarks","pos":[34388,34395]},{"content":"When an MDI child window is maximized, a menu bar attached to the MDI main frame window displays the system menu and the <bpt id=\"p1\">**</bpt>Minimize<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Maximize<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>Close<ept id=\"p3\">**</ept> buttons.","pos":[34399,34569],"source":"When an MDI child window is maximized, a menu bar attached to the MDI main frame window displays the system menu and the **Minimize**, **Maximize** and **Close** buttons."},{"content":"If <ph id=\"ph1\">`bMax`</ph> is <ph id=\"ph2\">`TRUE`</ph> and <ph id=\"ph3\">`pWnd`</ph> is not <ph id=\"ph4\">`NULL`</ph>, the MDI child window is maximized and the menu bar must incorporate the extra controls.","pos":[34570,34703],"source":" If `bMax` is `TRUE` and `pWnd` is not `NULL`, the MDI child window is maximized and the menu bar must incorporate the extra controls."},{"content":"Otherwise, the menu bar returns to its regular state.","pos":[34704,34757]},{"pos":[34813,34842],"content":"CMFCMenuBar::SetMenuButtonRTC"},{"content":"Sets the runtime class information that the framework uses when the user creates menu buttons.","pos":[34846,34940]},{"content":"Parameters","pos":[35019,35029]},{"content":"[in]","pos":[35033,35037]},{"content":"The <bpt id=\"p1\">[</bpt>CRuntimeClass<ept id=\"p1\">](../../mfc/reference/cruntimeclass-structure.md)</ept> information for a class derived from the <bpt id=\"p2\">[</bpt>CMFCMenuButton Class<ept id=\"p2\">](../../mfc/reference/cmfcmenubutton-class.md)</ept>.","pos":[35058,35235],"source":" The [CRuntimeClass](../../mfc/reference/cruntimeclass-structure.md) information for a class derived from the [CMFCMenuButton Class](../../mfc/reference/cmfcmenubutton-class.md)."},{"content":"Remarks","pos":[35245,35252]},{"content":"When a user adds new buttons to the menu bar, the framework creates the buttons dynamically.","pos":[35256,35348]},{"content":"By default, it creates <ph id=\"ph1\">`CMFCMenuButton`</ph> objects.","pos":[35349,35397],"source":" By default, it creates `CMFCMenuButton` objects."},{"content":"Override this method to change the type of button objects that the framework creates.","pos":[35398,35483]},{"pos":[35534,35558],"content":"CMFCMenuBar::SetMenuFont"},{"content":"Sets the font for all menu bars in your application.","pos":[35562,35614]},{"content":"Parameters","pos":[35715,35725]},{"content":"[in]","pos":[35729,35733]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>LOGFONT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773327)</ept> structure that defines the font to set.","pos":[35749,35873],"source":" A pointer to a [LOGFONT](http://msdn.microsoft.com/library/windows/desktop/bb773327) structure that defines the font to set."},{"content":"[in]","pos":[35880,35884]},{"content":"TRUE if you want the <ph id=\"ph1\">`lpLogFont`</ph> parameter to be used for the vertical font, FALSE if you want it to be used for horizontal font.","pos":[35896,36025],"source":" TRUE if you want the `lpLogFont` parameter to be used for the vertical font, FALSE if you want it to be used for horizontal font."},{"content":"Return Value","pos":[36035,36047]},{"pos":[36058,36106],"content":"if the method was successful; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the method was successful; otherwise `FALSE`."},{"content":"Remarks","pos":[36116,36123]},{"content":"Two fonts are used for all <bpt id=\"p1\">[</bpt>CMFCMenuBar<ept id=\"p1\">](../../mfc/reference/cmfcmenubar-class.md)</ept> objects.","pos":[36127,36218],"source":"Two fonts are used for all [CMFCMenuBar](../../mfc/reference/cmfcmenubar-class.md) objects."},{"content":"These separate fonts are used for horizontal and vertical menu bars.","pos":[36219,36287]},{"pos":[36294,36370],"content":"The font settings are global variables and affect all <ph id=\"ph1\">`CMFCMenuBar`</ph> objects.","source":"The font settings are global variables and affect all `CMFCMenuBar` objects."},{"pos":[36430,36463],"content":"CMFCMenuBar::SetRecentlyUsedMenus"},{"content":"Controls whether a menu bar displays recently used menu commands.","pos":[36467,36532]},{"content":"Parameters","pos":[36609,36619]},{"content":"[in]","pos":[36623,36627]},{"content":"A Boolean that controls whether recently used menu commands are displayed.","pos":[36637,36711]},{"pos":[36769,36800],"content":"CMFCMenuBar::SetShowAllCommands"},{"content":"Controls whether a menu shows all the available commands.","pos":[36804,36861]},{"content":"Parameters","pos":[36948,36958]},{"content":"[in]","pos":[36962,36966]},{"content":"A Boolean parameter that specifies whether the pop-up menu shows all the menu commands.","pos":[36989,37076]},{"content":"Remarks","pos":[37086,37093]},{"content":"If a menu does not display all the menu commands, it hides the commands that are rarely used.","pos":[37097,37190]},{"content":"For more information about displaying menu commands, see <bpt id=\"p1\">[</bpt>CMFCMenuBar Class<ept id=\"p1\">](../../mfc/reference/cmfcmenubar-class.md)</ept>.","pos":[37191,37310],"source":" For more information about displaying menu commands, see [CMFCMenuBar Class](../../mfc/reference/cmfcmenubar-class.md)."},{"content":"See Also","pos":[37319,37327]},{"content":"Hierarchy Chart","pos":[37332,37347]},{"content":"Classes","pos":[37384,37391]},{"content":"CMFCToolBar Class","pos":[37434,37451]}],"content":"---\ntitle: \"CMFCMenuBar Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMFCMenuBar\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CMFCMenuBar class\"\nms.assetid: 8a3ce4c7-b012-4dc0-b4f8-53c10b4b86b8\ncaps.latest.revision: 36\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMFCMenuBar Class\nA menu bar that implements docking.  \n  \n## Syntax  \n  \n```  \nclass CMFCMenuBar : public CMFCToolbar  \n```  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCMenuBar::AdjustLocations](#cmfcmenubar__adjustlocations)|(Overrides `CMFCToolBar::AdjustLocations`.)|  \n|[CMFCMenuBar::AllowChangeTextLabels](#cmfcmenubar__allowchangetextlabels)|Specifies whether text labels can be shown under images on the toolbar buttons. (Overrides [CMFCToolBar::AllowChangeTextLabels](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__allowchangetextlabels).)|  \n|[CMFCMenuBar::AllowShowOnPaneMenu](#cmfcmenubar__allowshowonpanemenu)|(Overrides `CPane::AllowShowOnPaneMenu`.)|  \n|[CMFCMenuBar::CalcFixedLayout](#cmfcmenubar__calcfixedlayout)|Calculates the horizontal size of the toolbar. (Overrides [CMFCToolBar::CalcFixedLayout](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__calcfixedlayout).)|  \n|[CMFCMenuBar::CalcLayout](#cmfcmenubar__calclayout)|(Overrides `CMFCToolBar::CalcLayout`.)|  \n|[CMFCMenuBar::CalcMaxButtonHeight](#cmfcmenubar__calcmaxbuttonheight)|Calculates the maximum height of buttons in the toolbar. (Overrides [CMFCToolBar::CalcMaxButtonHeight](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__calcmaxbuttonheight).)|  \n|[CMFCMenuBar::CanBeClosed](#cmfcmenubar__canbeclosed)|Specifies whether a user can close the toolbar. (Overrides [CMFCToolBar::CanBeClosed](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__canbeclosed).)|  \n|[CMFCMenuBar::CanBeRestored](#cmfcmenubar__canberestored)|Determines whether the system can restore a toolbar to its original state after customization. (Overrides [CMFCToolBar::CanBeRestored](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__canberestored).)|  \n|[CMFCMenuBar::Create](#cmfcmenubar__create)|Creates a menu control and attaches it to a `CMFCMenuBar` object.|  \n|[CMFCMenuBar::CreateEx](#cmfcmenubar__createex)|Creates a `CMFCMenuBar` object with additional style options.|  \n|[CMFCMenuBar::CreateFromMenu](#cmfcmenubar__createfrommenu)|Initializes a `CMFCMenuBar` object. Accepts a `HMENU` parameter that acts as a template for a populated `CMFCMenuBar`.|  \n|[CMFCMenuBar::EnableHelpCombobox](#cmfcmenubar__enablehelpcombobox)|Enables a **Help** combo box that is located on the right side of the menu bar.|  \n|[CMFCMenuBar::EnableMenuShadows](#cmfcmenubar__enablemenushadows)|Specifies whether to display shadows for pop-up menus.|  \n|[CMFCMenuBar::GetAvailableExpandSize](#cmfcmenubar__getavailableexpandsize)|(Overrides [CPane::GetAvailableExpandSize](../../mfc/reference/cpane-class.md#cpane__getavailableexpandsize).)|  \n|[CMFCMenuBar::GetColumnWidth](#cmfcmenubar__getcolumnwidth)|Returns the width of the toolbar buttons. (Overrides [CMFCToolBar::GetColumnWidth](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getcolumnwidth).)|  \n|[CMFCMenuBar::GetDefaultMenu](#cmfcmenubar__getdefaultmenu)|Returns a handle to the original menu in the resource file.|  \n|[CMFCMenuBar::GetDefaultMenuResId](#cmfcmenubar__getdefaultmenuresid)|Returns the resource identifier for the original menu in the resource file.|  \n|[CMFCMenuBar::GetFloatPopupDirection](#cmfcmenubar__getfloatpopupdirection)||  \n|[CMFCMenuBar::GetForceDownArrows](#cmfcmenubar__getforcedownarrows)||  \n|[CMFCMenuBar::GetHelpCombobox](#cmfcmenubar__gethelpcombobox)|Returns a pointer to the **Help** combo box.|  \n|[CMFCMenuBar::GetHMenu](#cmfcmenubar__gethmenu)|Returns the handle to the menu that is attached to the `CMFCMenuBar` object.|  \n|[CMFCMenuBar::GetMenuFont](#cmfcmenubar__getmenufont)|Returns the current global font for menu objects.|  \n|[CMFCMenuBar::GetMenuItem](#cmfcmenubar__getmenuitem)|Returns the toolbar button associated with the provided item index.|  \n|[CMFCMenuBar::GetRowHeight](#cmfcmenubar__getrowheight)|Returns the height of toolbar buttons. (Overrides [CMFCToolBar::GetRowHeight](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getrowheight).)|  \n|[CMFCMenuBar::GetSystemButton](#cmfcmenubar__getsystembutton)||  \n|[CMFCMenuBar::GetSystemButtonsCount](#cmfcmenubar__getsystembuttonscount)||  \n|[CMFCMenuBar::GetSystemMenu](#cmfcmenubar__getsystemmenu)||  \n|[CMFCMenuBar::HighlightDisabledItems](#cmfcmenubar__highlightdisableditems)|Indicates whether disabled menu items are highlighted.|  \n|[CMFCMenuBar::IsButtonExtraSizeAvailable](#cmfcmenubar__isbuttonextrasizeavailable)|Determines whether the toolbar can display buttons that have extended borders. (Overrides [CMFCToolBar::IsButtonExtraSizeAvailable](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__isbuttonextrasizeavailable).)|  \n|[CMFCMenuBar::IsHighlightDisabledItems](#cmfcmenubar__ishighlightdisableditems)|Indicates whether disabled items are highlighted.|  \n|[CMFCMenuBar::IsMenuShadows](#cmfcmenubar__ismenushadows)|Indicates whether shadows are drawn for pop-up menus.|  \n|[CMFCMenuBar::IsRecentlyUsedMenus](#cmfcmenubar__isrecentlyusedmenus)|Indicates whether recently used menu commands are displayed on the menu bar.|  \n|[CMFCMenuBar::IsShowAllCommands](#cmfcmenubar__isshowallcommands)|Indicates whether pop-up menus display all commands.|  \n|[CMFCMenuBar::IsShowAllCommandsDelay](#cmfcmenubar__isshowallcommandsdelay)|Indicates whether menus display all the commands after a short delay.|  \n|[CMFCMenuBar::LoadState](#cmfcmenubar__loadstate)|Loads the state of the `CMFCMenuBar` object from the registry.|  \n|[CMFCMenuBar::OnChangeHot](#cmfcmenubar__onchangehot)|Called by the framework when a user selects a button on the toolbar. (Overrides [CMFCToolBar::OnChangeHot](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__onchangehot).)|  \n|[CMFCMenuBar::OnDefaultMenuLoaded](#cmfcmenubar__ondefaultmenuloaded)|Called by the framework when a frame window loads the default menu from the resource file.|  \n|[CMFCMenuBar::OnSendCommand](#cmfcmenubar__onsendcommand)|(Overrides `CMFCToolBar::OnSendCommand`.)|  \n|[CMFCMenuBar::OnSetDefaultButtonText](#cmfcmenubar__onsetdefaultbuttontext)|Called by the framework when a menu is in customization mode and the user changes a menu item's text.|  \n|[CMFCMenuBar::OnToolHitTest](#cmfcmenubar__ontoolhittest)|(Overrides `CMFCToolBar::OnToolHitTest`.)|  \n|[CMFCMenuBar::PreTranslateMessage](#cmfcmenubar__pretranslatemessage)|(Overrides `CMFCToolBar::PreTranslateMessage`.)|  \n|[CMFCMenuBar::RestoreOriginalstate](#cmfcmenubar__restoreoriginalstate)|Called by the framework when a menu is in customization mode and the user selects **Reset** for a menu bar.|  \n|[CMFCMenuBar::SaveState](#cmfcmenubar__savestate)|Saves the state of the `CMFCMenuBar` object to the registry.|  \n|[CMFCMenuBar::SetDefaultMenuResId](#cmfcmenubar__setdefaultmenuresid)|Sets the original menu in the resource file.|  \n|[CMFCMenuBar::SetForceDownArrows](#cmfcmenubar__setforcedownarrows)||  \n|[CMFCMenuBar::SetMaximizeMode](#cmfcmenubar__setmaximizemode)|Called by the framework when an MDI child window changes its display mode. If the MDI child window is newly maximized or is no longer maximized, this method updates the menu bar.|  \n|[CMFCMenuBar::SetMenuButtonRTC](#cmfcmenubar__setmenubuttonrtc)|Sets the runtime class information that is generated when the user dynamically creates menu buttons.|  \n|[CMFCMenuBar::SetMenuFont](#cmfcmenubar__setmenufont)|Sets the font for all menus in the application.|  \n|[CMFCMenuBar::SetRecentlyUsedMenus](#cmfcmenubar__setrecentlyusedmenus)|Specifies whether a menu bar displays recently used menu commands.|  \n|[CMFCMenuBar::SetShowAllCommands](#cmfcmenubar__setshowallcommands)|Specifies whether the menu bar shows all commands.|  \n  \n## Remarks  \n The `CMFCMenuBar` class is a menu bar that implements docking functionality. It resembles a toolbar, although it cannot be closed - it is always displayed.  \n  \n `CMFCMenuBar` supports the option of displaying recently used menu item objects. If this option is enabled, the `CMFCMenuBar` displays only a subset of the available commands on first viewing. Thereafter, recently used commands are displayed together with the original subset of commands. In addition, the user can always expand the menu to view all available commands. Thus, each available command is configured to display constantly, or to display only if it has been recently selected.  \n  \n To use a `CMFCMenuBar` object, embed it in the main window frame object. When processing the `WM_CREATE` message, call `CMFCMenuBar::Create` or `CMFCMenuBar::CreateEx`. Regardless of which create function you use, pass in a pointer to the main frame window. Then enable docking by calling [CFrameWndEx::EnableDocking](../../mfc/reference/cframewndex-class.md#cframewndex__enabledocking). Dock this menu by calling [CFrameWndEx::DockPane](../../mfc/reference/cframewndex-class.md#cframewndex__dockpane).  \n  \n## Example  \n The following example demonstrates how to use various methods in the `CMFCMenuBar` class. The example shows how to set the style of the pane, enable the customize button, enable a Help box, enable shadows for pop-up menus, and update the menu bar. This code snippet is part of the [IE Demo sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_IEDemo#1](../../mfc/reference/codesnippet/cpp/cmfcmenubar-class_1.h)]  \n[!code-cpp[NVC_MFC_IEDemo#3](../../mfc/reference/codesnippet/cpp/cmfcmenubar-class_2.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n [CBasePane](../../mfc/reference/cbasepane-class.md)  \n  \n [CPane](../../mfc/reference/cpane-class.md)  \n  \n [CMFCBaseToolBar](../../mfc/reference/cmfcbasetoolbar-class.md)  \n  \n [CMFCToolBar](../../mfc/reference/cmfctoolbar-class.md)  \n  \n [CMFCMenuBar](../../mfc/reference/cmfcmenubar-class.md)  \n  \n## Requirements  \n **Header:** afxmenubar.h  \n  \n##  <a name=\"cmfcmenubar__adjustlocations\"></a>  CMFCMenuBar::AdjustLocations  \n Adjusts the positions of the menu items on the menu bar.  \n  \n```  \nvirtual void AdjustLocations();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcmenubar__allowchangetextlabels\"></a>  CMFCMenuBar::AllowChangeTextLabels  \n Determines whether text labels are allowed under images in the menu bar.  \n  \n```  \nvirtual BOOL AllowChangeTextLabels() const;\n\n \n```  \n  \n### Return Value  \n Returns `TRUE` if the user can choose to show text labels under images.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcmenubar__allowshowonpanemenu\"></a>  CMFCMenuBar::AllowShowOnPaneMenu  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL AllowShowOnPaneMenu() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcmenubar__calcfixedlayout\"></a>  CMFCMenuBar::CalcFixedLayout  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual CSize CalcFixedLayout(\n    BOOL bStretch,  \n    BOOL bHorz);\n```  \n  \n### Parameters  \n [in] `bStretch`  \n [in] `bHorz`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcmenubar__calclayout\"></a>  CMFCMenuBar::CalcLayout  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual CSize CalcLayout(\n    DWORD dwMode,  \n    int nLength = -1);\n```  \n  \n### Parameters  \n [in] `dwMode`  \n [in] `nLength`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcmenubar__calcmaxbuttonheight\"></a>  CMFCMenuBar::CalcMaxButtonHeight  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual int CalcMaxButtonHeight();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcmenubar__canbeclosed\"></a>  CMFCMenuBar::CanBeClosed  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL CanBeClosed() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcmenubar__canberestored\"></a>  CMFCMenuBar::CanBeRestored  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL CanBeRestored() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcmenubar__create\"></a>  CMFCMenuBar::Create  \n Creates a menu control and attaches it to a [CMFCMenuBar](../../mfc/reference/cmfcmenubar-class.md) object.  \n  \n```  \nvirtual BOOL Create(\n    CWnd* pParentWnd,  \n    DWORD dwStyle = AFX_DEFAULT_TOOLBAR_STYLE,  \n    UINT nID = AFX_IDW_MENUBAR);\n```  \n  \n### Parameters  \n [in] `pParentWnd`  \n Pointer to the parent window for the new `CMFCMenuBar` object.  \n  \n [in] `dwStyle`  \n The style of the new menu bar.  \n  \n [in] `nID`  \n The ID for the child window of the menu bar.  \n  \n### Return Value  \n `TRUE` if successful; otherwise `FALSE`.  \n  \n### Remarks  \n After you construct a `CMFCMenuBar` object, you must call `Create`. This method creates the `CMFCMenuBar` control and attaches it to the `CMFCMenuBar` object.  \n  \n For more information about toolbar styles, see [CBasePane::SetPaneStyle](../../mfc/reference/cbasepane-class.md#cbasepane__setpanestyle).  \n  \n##  <a name=\"cmfcmenubar__createex\"></a>  CMFCMenuBar::CreateEx  \n Creates a [CMFCMenuBar](../../mfc/reference/cmfcmenubar-class.md) object with specified extended styles.  \n  \n```  \nvirtual BOOL CreateEx(\n    CWnd* pParentWnd,  \n    DWORD dwCtrlStyle = TBSTYLE_FLAT,  \n    DWORD dwStyle = AFX_DEFAULT_TOOLBAR_STYLE,  \n    CRect rcBorders = CRect(1,\n    1,\n    1,\n    1),  \n    UINT nID =AFX_IDW_MENUBAR);\n```  \n  \n### Parameters  \n [in] `pParentWnd`  \n Pointer to the parent window of the new `CMFCMenuBar` object.  \n  \n [in] `dwCtrlStyle`  \n Additional styles for the new menu bar.  \n  \n [in] `dwStyle`  \n The main style of the new menu bar.  \n  \n [in] `rcBorders`  \n A `CRect` parameter that specifies the sizes for the borders of the `CMFCMenuBar` object.  \n  \n [in] `nID`  \n The ID for the child window of the menu bar.  \n  \n### Return Value  \n Nonzero if the method is successful; otherwise 0.  \n  \n### Remarks  \n You should use this function instead of [CMFCMenuBar::Create](#cmfcmenubar__create) when you want to specify styles in addition to the toolbar style. Some frequently used additional styles are `TBSTYLE_TRANSPARENT` and `CBRS_TOP`.  \n  \n For lists of additional styles, see [Toolbar Control and Button Styles](http://msdn.microsoft.com/library/windows/desktop/bb760439), [common control styles](http://msdn.microsoft.com/library/windows/desktop/bb775498), and [common window styles](http://msdn.microsoft.com/library/windows/desktop/ms632600).  \n  \n### Example  \n The following example demonstrates how to use the `CreateEx` method of the `CMFCMenuBar` class. This code snippet is part of the [IE Demo sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_IEDemo#1](../../mfc/reference/codesnippet/cpp/cmfcmenubar-class_1.h)]  \n[!code-cpp[NVC_MFC_IEDemo#2](../../mfc/reference/codesnippet/cpp/cmfcmenubar-class_3.cpp)]  \n  \n##  <a name=\"cmfcmenubar__createfrommenu\"></a>  CMFCMenuBar::CreateFromMenu  \n Initializes a [CMFCMenuBar](../../mfc/reference/cmfcmenubar-class.md) object. This method models the `CMFCMenuBar` object after a `HMENU` parameter.  \n  \n```  \nvirtual void CreateFromMenu(\n    HMENU hMenu,  \n    BOOL bDefaultMenu = FALSE,  \n    BOOL bForceUpdate = FALSE);\n```  \n  \n### Parameters  \n [in] `hMenu`  \n A handle to a menu resource. `CreateFromMenu` uses this resource as a template for the `CMFCMenuBar`.  \n  \n [in] `bDefaultMenu`  \n A Boolean that indicates whether the new menu is the default menu.  \n  \n [in] `bForceUpdate`  \n A Boolean that indicates whether this method forces a menu update.  \n  \n### Remarks  \n Use this method if you want a menu control to have the same menu items as a menu resource. You call this method after you call either [CMFCMenuBar::Create](#cmfcmenubar__create) or [CMFCMenuBar::CreateEx](#cmfcmenubar__createex).  \n  \n##  <a name=\"cmfcmenubar__enablehelpcombobox\"></a>  CMFCMenuBar::EnableHelpCombobox  \n Enables a **Help** combo box that is located on the right side of the menu bar.  \n  \n```  \nvoid EnableHelpCombobox(\n    UINT uiID,  \n    LPCTSTR lpszPrompt = NULL,  \n    int nComboBoxWidth = 150);\n```  \n  \n### Parameters  \n [in] `uiID`  \n The command ID for the button of the **Help** combo box.  \n  \n [in] `lpszPrompt`  \n A string that contains the text that the framework displays in the combo box if it is empty and not active. For example, \"Enter the text here\".  \n  \n [in] `nComboBoxWidth`  \n The width of the button for the combo box in pixels.  \n  \n### Remarks  \n The **Help** combo box resembles the **Help** combo box in the menu bar of [!INCLUDE[ofprword](../../mfc/reference/includes/ofprword_md.md)].  \n  \n When you call this method with `uiID` set to 0, this method hides the combo box. Otherwise, this method displays the combo box automatically on the right side of your menu bar. After you call this method, call [CMFCMenuBar::GetHelpCombobox](#cmfcmenubar__gethelpcombobox) to obtain a pointer to the inserted [CMFCToolBarComboBoxButton](../../mfc/reference/cmfctoolbarcomboboxbutton-class.md) object.  \n  \n##  <a name=\"cmfcmenubar__enablemenushadows\"></a>  CMFCMenuBar::EnableMenuShadows  \n Enables shadows for pop-up menus.  \n  \n```  \nstatic void EnableMenuShadows(BOOL bEnable = TRUE);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n A Boolean parameter that indicates whether shadows should be enabled for pop-up menus.  \n  \n### Remarks  \n The algorithm that this method uses is complex and may decrease the performance of your application on slower systems.  \n  \n##  <a name=\"cmfcmenubar__getavailableexpandsize\"></a>  CMFCMenuBar::GetAvailableExpandSize  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual int GetAvailableExpandSize() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcmenubar__getcolumnwidth\"></a>  CMFCMenuBar::GetColumnWidth  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual int GetColumnWidth() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcmenubar__getdefaultmenu\"></a>  CMFCMenuBar::GetDefaultMenu  \n Retrieves a handle to the original menu. The framework loads the original menu from the resource file.  \n  \n```  \nHMENU GetDefaultMenu() const;\n\n \n```  \n  \n### Return Value  \n A handle to a menu resource.  \n  \n### Remarks  \n If your application customizes a menu, you can use this method to retrieve a handle to the original menu.  \n  \n##  <a name=\"cmfcmenubar__getdefaultmenuresid\"></a>  CMFCMenuBar::GetDefaultMenuResId  \n Retrieves the resource identifier for the default menu.  \n  \n```  \nUINT GetDefaultMenuResId() const;\n\n \n```  \n  \n### Return Value  \n A menu resource identifier.  \n  \n### Remarks  \n The framework loads the default menu for the [CMFCMenuBar](../../mfc/reference/cmfcmenubar-class.md) object from the resource file.  \n  \n##  <a name=\"cmfcmenubar__getfloatpopupdirection\"></a>  CMFCMenuBar::GetFloatPopupDirection  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nint GetFloatPopupDirection(CMFCToolBarMenuButton* pButton);\n```  \n  \n### Parameters  \n [in] `pButton`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcmenubar__getforcedownarrows\"></a>  CMFCMenuBar::GetForceDownArrows  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL GetForceDownArrows();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcmenubar__gethelpcombobox\"></a>  CMFCMenuBar::GetHelpCombobox  \n Returns a pointer to the **Help** combo box.  \n  \n```  \nCMFCToolBarComboBoxButton* GetHelpCombobox();\n```  \n  \n### Return Value  \n A pointer to the **Help** combo box. `NULL` if the **Help** combo box is hidden or not enabled.  \n  \n### Remarks  \n The **Help** combo box is located on the right side of the menu bar. Call the method [CMFCMenuBar::EnableHelpCombobox](#cmfcmenubar__enablehelpcombobox) to enable this combo box.  \n  \n##  <a name=\"cmfcmenubar__gethmenu\"></a>  CMFCMenuBar::GetHMenu  \n Retrieves the handle to the menu attached to the [CMFCMenuBar](../../mfc/reference/cmfcmenubar-class.md) object.  \n  \n```  \nHMENU GetHMenu() const;\n\n \n```  \n  \n##  <a name=\"cmfcmenubar__getmenufont\"></a>  CMFCMenuBar::GetMenuFont  \n Retrieves the current menu font.  \n  \n```  \nstatic const CFont& GetMenuFont(BOOL bHorz = TRUE);\n```  \n  \n### Parameters  \n [in] `bHorz`  \n A Boolean parameter that specifies whether to return the horizontal or vertical font. `TRUE` indicates the horizontal font.  \n  \n### Return Value  \n A pointer to a [CFont](../../mfc/reference/cfont-class.md) parameter that contains the current menu bar font.  \n  \n### Remarks  \n The returned font is a global parameter for the application. Two global fonts are maintained for all `CMFCMenuBar` objects. These separate fonts are used for horizontal and vertical menu bars.  \n  \n##  <a name=\"cmfcmenubar__getmenuitem\"></a>  CMFCMenuBar::GetMenuItem  \n Retrieves a [CMFCToolBarButton](../../mfc/reference/cmfctoolbarbutton-class.md) object on a menu bar based on the item index.  \n  \n```  \nCMFCToolBarButton* GetMenuItem(int iItem) const;\n\n \n```  \n  \n### Parameters  \n [in] `iItem`  \n The index of the menu item to return.  \n  \n### Return Value  \n A pointer to the `CMFCToolBarButton` object that matches the index specified by `iItem`. `NULL` if the index is invalid.  \n  \n##  <a name=\"cmfcmenubar__getrowheight\"></a>  CMFCMenuBar::GetRowHeight  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual int GetRowHeight() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcmenubar__getsystembutton\"></a>  CMFCMenuBar::GetSystemButton  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCMFCToolBarMenuButtonsButton* GetSystemButton(\n    UINT uiBtn,  \n    BOOL bByCommand = TRUE) const;\n\n \n```  \n  \n### Parameters  \n [in] `uiBtn`  \n [in] `bByCommand`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcmenubar__getsystembuttonscount\"></a>  CMFCMenuBar::GetSystemButtonsCount  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nint GetSystemButtonsCount() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcmenubar__getsystemmenu\"></a>  CMFCMenuBar::GetSystemMenu  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCMFCToolBarSystemMenuButton* GetSystemMenu() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcmenubar__highlightdisableditems\"></a>  CMFCMenuBar::HighlightDisabledItems  \n Controls whether the framework highlights disabled menu items.  \n  \n```  \nstatic void HighlightDisabledItems(BOOL bHighlight = TRUE);\n```  \n  \n### Parameters  \n [in] `bHighlight`  \n A Boolean parameter that indicates whether the framework highlights unavailable menu items.  \n  \n### Remarks  \n By default, the framework does not highlight unavailable menu items when the user positions the mouse pointer over them.  \n  \n##  <a name=\"cmfcmenubar__isbuttonextrasizeavailable\"></a>  CMFCMenuBar::IsButtonExtraSizeAvailable  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL IsButtonExtraSizeAvailable() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcmenubar__ishighlightdisableditems\"></a>  CMFCMenuBar::IsHighlightDisabledItems  \n Indicates whether the framework highlights unavailable menu items.  \n  \n```  \nstatic BOOL IsHighlightDisabledItems();\n```  \n  \n### Return Value  \n `TRUE` if unavailable menu items are highlighted; otherwise `FALSE`.  \n  \n### Remarks  \n By default, the framework does not highlight unavailable menu items when the user positions the mouse pointer over them. Use the [CMFCMenuBar::HighlightDisabledItems](#cmfcmenubar__highlightdisableditems) method to enable this feature.  \n  \n##  <a name=\"cmfcmenubar__ismenushadows\"></a>  CMFCMenuBar::IsMenuShadows  \n Indicates whether the framework draws shadows for pop-up menus.  \n  \n```  \nstatic BOOL IsMenuShadows();\n```  \n  \n### Return Value  \n `TRUE` if the framework draws menu shadows; otherwise `FALSE`.  \n  \n### Remarks  \n Use the [CMFCMenuBar::EnableMenuShadows](#cmfcmenubar__enablemenushadows) method to enable or disable this feature.  \n  \n##  <a name=\"cmfcmenubar__isrecentlyusedmenus\"></a>  CMFCMenuBar::IsRecentlyUsedMenus  \n Indicates whether recently used menu commands are displayed on the menu bar.  \n  \n```  \nstatic BOOL IsRecentlyUsedMenus();\n```  \n  \n### Return Value  \n Nonzero if the [CMFCMenuBar](../../mfc/reference/cmfcmenubar-class.md) object shows recently used menu commands; otherwise 0.  \n  \n### Remarks  \n Use the function [CMFCMenuBar::SetRecentlyUsedMenus](#cmfcmenubar__setrecentlyusedmenus) to control whether the menu bar shows recently used menu commands.  \n  \n##  <a name=\"cmfcmenubar__isshowallcommands\"></a>  CMFCMenuBar::IsShowAllCommands  \n Indicates whether menus display all commands.  \n  \n```  \nstatic BOOL IsShowAllCommands();\n```  \n  \n### Return Value  \n Nonzero if the [CMFCMenuBar](../../mfc/reference/cmfcmenubar-class.md) displays all commands; otherwise 0.  \n  \n### Remarks  \n A `CMFCMenuBar` object can be configured to either show all commands or show only a subset of commands. For more information about this feature, see [CMFCMenuBar Class](../../mfc/reference/cmfcmenubar-class.md).  \n  \n `IsShowAllCommands` will tell you how this feature is configured for the `CMFCMenuBar` object. To control which menu commands are shown, use the methods [CMFCMenuBar::SetShowAllCommands](#cmfcmenubar__setshowallcommands) and [CMFCMenuBar::SetRecentlyUsedMenus](#cmfcmenubar__setrecentlyusedmenus).  \n  \n##  <a name=\"cmfcmenubar__isshowallcommandsdelay\"></a>  CMFCMenuBar::IsShowAllCommandsDelay  \n Indicates whether the [CMFCMenuBar](../../mfc/reference/cmfcmenubar-class.md) object displays all the commands after a short delay.  \n  \n```  \nstatic BOOL IsShowAllCommandsDelay();\n```  \n  \n### Return Value  \n Nonzero if the menu bar displays full menus after a short delay; otherwise 0.  \n  \n### Remarks  \n When you configure a menu bar to display recently used items, the menu bar displays the full menu in one of two ways:  \n  \n-   Display the full menu after a programmed delay from when the user hovers the cursor over the arrow at the bottom of the menu.  \n  \n-   Display the full menu after the user clicks the arrow at the bottom of the menu.  \n  \n By default, all `CMFCMenuBar` objects use the option to display the full menu after a short delay. This option cannot be changed programmatically in the `CMFCMenuBar` class. However, a user can change the behavior during toolbar customization by using the **Customize** dialog box..  \n  \n##  <a name=\"cmfcmenubar__loadstate\"></a>  CMFCMenuBar::LoadState  \n Loads the state of the menu bar from the Windows registry.  \n  \n```  \nvirtual BOOL LoadState(\n    LPCTSTR lpszProfileName = NULL,  \n    int nIndex = -1,  \n    UINT uiID = (UINT)-1);\n```  \n  \n### Parameters  \n [in] `lpszProfileName`  \n A string that contains the path of a Windows registry key.  \n  \n [in] `nIndex`  \n The control ID for the menu bar.  \n  \n [in] `uiID`  \n A reserved value.  \n  \n### Return Value  \n `TRUE` if the method was successful; otherwise `FALSE`.  \n  \n### Remarks  \n Use the [CMFCMenuBar::SaveState](#cmfcmenubar__savestate) method to save the state of the menu bar to the registry. The saved information includes the menu items, the dock state, and the position of the menu bar.  \n  \n In most cases your application does not call `LoadState`. The framework calls this method when it initializes the workspace.  \n  \n##  <a name=\"cmfcmenubar__onchangehot\"></a>  CMFCMenuBar::OnChangeHot  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnChangeHot(int iHot);\n```  \n  \n### Parameters  \n [in] `iHot`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcmenubar__ondefaultmenuloaded\"></a>  CMFCMenuBar::OnDefaultMenuLoaded  \n The framework calls this method when it loads the menu resource from the resource file.  \n  \n```  \nvirtual void OnDefaultMenuLoaded(HMENU hMenu);\n```  \n  \n### Parameters  \n [in] `hMenu`  \n The handle for the menu attached to the [CMFCMenuBar](../../mfc/reference/cmfcmenubar-class.md) object.  \n  \n### Remarks  \n The default implementation of this function does nothing. Override this function to execute custom code after the framework loads a menu resource from the resource file.  \n  \n##  <a name=\"cmfcmenubar__onsendcommand\"></a>  CMFCMenuBar::OnSendCommand  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL OnSendCommand(const CMFCToolBarButton* pButton);\n```  \n  \n### Parameters  \n [in] `pButton`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcmenubar__onsetdefaultbuttontext\"></a>  CMFCMenuBar::OnSetDefaultButtonText  \n The framework calls this method when the user changes the text of an item on the menu bar.  \n  \n```  \nvirtual BOOL OnSetDefaultButtonText(CMFCToolBarButton* pButton);\n```  \n  \n### Parameters  \n [in] `pButton`  \n A pointer to the [CMFCToolBarButton](../../mfc/reference/cmfctoolbarbutton-class.md) object that the user wants to customize.  \n  \n### Return Value  \n `TRUE` if the framework applies the user changes to the menu bar; otherwise `FALSE`.  \n  \n### Remarks  \n The default implementation for this method changes the text of the button to the text that the user provides.  \n  \n##  <a name=\"cmfcmenubar__ontoolhittest\"></a>  CMFCMenuBar::OnToolHitTest  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual INT_PTR OnToolHitTest(\n    CPoint point,  \n    TOOLINFO* pTI) const;\n\n \n```  \n  \n### Parameters  \n [in] `point`  \n [in] `pTI`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcmenubar__pretranslatemessage\"></a>  CMFCMenuBar::PreTranslateMessage  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL PreTranslateMessage(MSG* pMsg);\n```  \n  \n### Parameters  \n [in] `pMsg`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcmenubar__restoreoriginalstate\"></a>  CMFCMenuBar::RestoreOriginalstate  \n Called by the framework when the user selects **Reset** from the **Customize** dialog box.  \n  \n```  \nvirtual BOOL RestoreOriginalstate();\n```  \n  \n### Return Value  \n Nonzero if the method is successful; otherwise 0.  \n  \n### Remarks  \n This method is called when the user selects **Reset** from the customization menu. You can also manually call this method to programmatically reset the state of the menu bar. This method loads the original state from the resource file.  \n  \n Override this method if you want to do any processing when the user selects the **Reset** option.  \n  \n##  <a name=\"cmfcmenubar__savestate\"></a>  CMFCMenuBar::SaveState  \n Saves the state of the [CMFCMenuBar](../../mfc/reference/cmfcmenubar-class.md) object to the Windows registry.  \n  \n```  \nvirtual BOOL SaveState (\n    LPCTSTR lpszProfileName = NULL,  \n    int nIndex = -1,  \n    UINT uiID = (UINT)-1);\n```  \n  \n### Parameters  \n [in] `lpszProfileName`  \n A string that contains the path of a Windows registry key.  \n  \n [in] `nIndex`  \n The control ID for the menu bar.  \n  \n [in] `uiID`  \n A reserved value.  \n  \n### Return Value  \n `TRUE` if successful; otherwise `FALSE`;  \n  \n### Remarks  \n Usually, your application does not call `SaveState`. The framework calls this method when the workspace is serialized. For more information, see [CWinAppEx::SaveState](../../mfc/reference/cwinappex-class.md#cwinappex__savestate).  \n  \n The saved information includes the menu items, the dock state, and the position of the menu bar.  \n  \n##  <a name=\"cmfcmenubar__setdefaultmenuresid\"></a>  CMFCMenuBar::SetDefaultMenuResId  \n Sets the default menu for a [CMFCMenuBar](../../mfc/reference/cmfcmenubar-class.md) object based on the resource ID.  \n  \n```  \nvoid SetDefaultMenuResId(UINT uiResId);\n```  \n  \n### Parameters  \n [in] `uiResId`  \n The resource ID for the new default menu.  \n  \n### Remarks  \n The [CMFCMenuBar::RestoreOriginalstate](#cmfcmenubar__restoreoriginalstate) method restores the default menu from the resource file.  \n  \n Use the [CMFCMenuBar::GetDefaultMenuResId](#cmfcmenubar__getdefaultmenuresid) method to retrieve the default menu without restoring it.  \n  \n##  <a name=\"cmfcmenubar__setforcedownarrows\"></a>  CMFCMenuBar::SetForceDownArrows  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetForceDownArrows(BOOL bValue);\n```  \n  \n### Parameters  \n [in] `bValue`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcmenubar__setmaximizemode\"></a>  CMFCMenuBar::SetMaximizeMode  \n The framework calls this method when a MDI changes its display mode and the menu bar must be updated.  \n  \n```  \nvoid SetMaximizeMode(\n    BOOL bMax,  \n    CWnd* pWnd = NULL,  \n    BOOL bRecalcLayout = TRUE);\n```  \n  \n### Parameters  \n [in] `bMax`  \n A Boolean that specifies the mode. See the Remarks section for more information.  \n  \n [in] `pWnd`  \n A pointer to the MDI child window that is changing.  \n  \n [in] `bRecalcLayout`  \n A Boolean that specifies whether the layout of the menu bar should be recalculated immediately.  \n  \n### Remarks  \n When an MDI child window is maximized, a menu bar attached to the MDI main frame window displays the system menu and the **Minimize**, **Maximize** and **Close** buttons. If `bMax` is `TRUE` and `pWnd` is not `NULL`, the MDI child window is maximized and the menu bar must incorporate the extra controls. Otherwise, the menu bar returns to its regular state.  \n  \n##  <a name=\"cmfcmenubar__setmenubuttonrtc\"></a>  CMFCMenuBar::SetMenuButtonRTC  \n Sets the runtime class information that the framework uses when the user creates menu buttons.  \n  \n```  \nvoid SetMenuButtonRTC(CRuntimeClass* pMenuButtonRTC);\n```  \n  \n### Parameters  \n [in] `pMenuButtonRTC`  \n The [CRuntimeClass](../../mfc/reference/cruntimeclass-structure.md) information for a class derived from the [CMFCMenuButton Class](../../mfc/reference/cmfcmenubutton-class.md).  \n  \n### Remarks  \n When a user adds new buttons to the menu bar, the framework creates the buttons dynamically. By default, it creates `CMFCMenuButton` objects. Override this method to change the type of button objects that the framework creates.  \n  \n##  <a name=\"cmfcmenubar__setmenufont\"></a>  CMFCMenuBar::SetMenuFont  \n Sets the font for all menu bars in your application.  \n  \n```  \nstatic BOOL SetMenuFont(\n    LPLOGFONT lpLogFont,  \n    BOOL bHorz = TRUE);\n```  \n  \n### Parameters  \n [in] `lpLogFont`  \n A pointer to a [LOGFONT](http://msdn.microsoft.com/library/windows/desktop/bb773327) structure that defines the font to set.  \n  \n [in] `bHorz`  \n TRUE if you want the `lpLogFont` parameter to be used for the vertical font, FALSE if you want it to be used for horizontal font.  \n  \n### Return Value  \n `TRUE` if the method was successful; otherwise `FALSE`.  \n  \n### Remarks  \n Two fonts are used for all [CMFCMenuBar](../../mfc/reference/cmfcmenubar-class.md) objects. These separate fonts are used for horizontal and vertical menu bars.  \n  \n The font settings are global variables and affect all `CMFCMenuBar` objects.  \n  \n##  <a name=\"cmfcmenubar__setrecentlyusedmenus\"></a>  CMFCMenuBar::SetRecentlyUsedMenus  \n Controls whether a menu bar displays recently used menu commands.  \n  \n```  \nstatic void SetRecentlyUsedMenus (BOOL bOn = TRUE);\n```  \n  \n### Parameters  \n [in] `bOn`  \n A Boolean that controls whether recently used menu commands are displayed.  \n  \n##  <a name=\"cmfcmenubar__setshowallcommands\"></a>  CMFCMenuBar::SetShowAllCommands  \n Controls whether a menu shows all the available commands.  \n  \n```  \nstatic void SetShowAllCommands(BOOL bShowAllCommands = TRUE);\n```  \n  \n### Parameters  \n [in] `bShowAllCommands`  \n A Boolean parameter that specifies whether the pop-up menu shows all the menu commands.  \n  \n### Remarks  \n If a menu does not display all the menu commands, it hides the commands that are rarely used. For more information about displaying menu commands, see [CMFCMenuBar Class](../../mfc/reference/cmfcmenubar-class.md).  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CMFCToolBar Class](../../mfc/reference/cmfctoolbar-class.md)\n"}