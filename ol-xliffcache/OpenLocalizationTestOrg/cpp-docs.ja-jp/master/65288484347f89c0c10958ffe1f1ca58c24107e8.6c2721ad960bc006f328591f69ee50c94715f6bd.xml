{"nodes":[{"pos":[12,54],"content":"map::value_comp (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"map::value_comp (STL-CLR) | Microsoft Docs","pos":[0,42]}]},{"content":"map::value_comp (STL/CLR)","pos":[636,661]},{"content":"Copies the ordering delegate for two element values.","pos":[662,714]},{"content":"Syntax","pos":[723,729]},{"content":"Remarks","pos":[784,791]},{"content":"The member function returns the ordering delegate used to order the controlled sequence.","pos":[795,883]},{"content":"You use it to compare two element values.","pos":[884,925]},{"content":"Example","pos":[934,941]},{"content":"Requirements","pos":[1887,1899]},{"pos":[1903,1928],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/map&gt;","source":"**Header:** \\<cliext/map>"},{"pos":[1935,1956],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[1965,1973]},{"content":"map (STL/CLR)","pos":[1978,1991]},{"content":"map::value_compare (STL/CLR)","pos":[2024,2052]},{"content":"map::value_type (STL/CLR)","pos":[2099,2124]}],"content":"---\ntitle: \"map::value_comp (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::map::value_comp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"value_comp member [STL/CLR]\"\nms.assetid: b0e53052-f3cc-48c8-8e29-1b151c23860a\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# map::value_comp (STL/CLR)\nCopies the ordering delegate for two element values.  \n  \n## Syntax  \n  \n```  \nvalue_compare^ value_comp();  \n```  \n  \n## Remarks  \n The member function returns the ordering delegate used to order the controlled sequence. You use it to compare two element values.  \n  \n## Example  \n  \n```  \n// cliext_map_value_comp.cpp   \n// compile with: /clr   \n#include <cliext/map>   \n  \ntypedef cliext::map<wchar_t, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n    Mymap::value_compare^ kcomp = c1.value_comp();   \n  \n    System::Console::WriteLine(\"compare([L'a', 1], [L'a', 1]) = {0}\",   \n        kcomp(Mymap::make_value(L'a', 1),   \n            Mymap::make_value(L'a', 1)));   \n    System::Console::WriteLine(\"compare([L'a', 1], [L'b', 2]) = {0}\",   \n        kcomp(Mymap::make_value(L'a', 1),   \n            Mymap::make_value(L'b', 2)));   \n    System::Console::WriteLine(\"compare([L'b', 2], [L'a', 1]) = {0}\",   \n        kcomp(Mymap::make_value(L'b', 2),   \n            Mymap::make_value(L'a', 1)));   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \ncompare([L'a', 1], [L'a', 1]) = False  \ncompare([L'a', 1], [L'b', 2]) = True  \ncompare([L'b', 2], [L'a', 1]) = False  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/map>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [map (STL/CLR)](../dotnet/map-stl-clr.md)   \n [map::value_compare (STL/CLR)](../dotnet/map-value-compare-stl-clr.md)   \n [map::value_type (STL/CLR)](../dotnet/map-value-type-stl-clr.md)"}