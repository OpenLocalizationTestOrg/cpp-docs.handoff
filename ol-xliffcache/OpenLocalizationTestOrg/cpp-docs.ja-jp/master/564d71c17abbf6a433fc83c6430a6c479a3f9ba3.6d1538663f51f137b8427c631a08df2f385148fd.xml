{"nodes":[{"pos":[12,51],"content":"CD2DGeometrySink Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CD2DGeometrySink Class | Microsoft Docs","pos":[0,39]}]},{"pos":[661,683],"content":"CD2DGeometrySink Class","linkify":"CD2DGeometrySink Class","nodes":[{"content":"CD2DGeometrySink Class","pos":[0,22]}]},{"content":"A wrapper for ID2D1GeometrySink.","pos":[684,716]},{"pos":[725,731],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[781,788],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[798,817],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[824,828]},{"content":"Description","pos":[829,840]},{"pos":[878,951],"content":"<bpt id=\"p1\">[</bpt>CD2DGeometrySink::CD2DGeometrySink<ept id=\"p1\">](#cd2dgeometrysink__cd2dgeometrysink)</ept>","source":"[CD2DGeometrySink::CD2DGeometrySink](#cd2dgeometrysink__cd2dgeometrysink)"},{"content":"Constructs a CD2DGeometrySink object from CD2DPathGeometry object.","pos":[952,1018]},{"pos":[1023,1102],"content":"<bpt id=\"p1\">[</bpt>CD2DGeometrySink::~CD2DGeometrySink<ept id=\"p1\">](#cd2dgeometrysink___dtorcd2dgeometrysink)</ept>","source":"[CD2DGeometrySink::~CD2DGeometrySink](#cd2dgeometrysink___dtorcd2dgeometrysink)"},{"content":"The destructor.","pos":[1103,1118]},{"content":"Called when a D2D geometry sink object is being destroyed.","pos":[1119,1177]},{"pos":[1188,1202],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1209,1213]},{"content":"Description","pos":[1214,1225]},{"pos":[1263,1316],"content":"<bpt id=\"p1\">[</bpt>CD2DGeometrySink::AddArc<ept id=\"p1\">](#cd2dgeometrysink__addarc)</ept>","source":"[CD2DGeometrySink::AddArc](#cd2dgeometrysink__addarc)"},{"content":"Adds a single arc to the path geometry","pos":[1317,1355]},{"pos":[1360,1419],"content":"<bpt id=\"p1\">[</bpt>CD2DGeometrySink::AddBezier<ept id=\"p1\">](#cd2dgeometrysink__addbezier)</ept>","source":"[CD2DGeometrySink::AddBezier](#cd2dgeometrysink__addbezier)"},{"content":"Creates a cubic Bezier curve between the current point and the specified end point.","pos":[1420,1503]},{"pos":[1508,1569],"content":"<bpt id=\"p1\">[</bpt>CD2DGeometrySink::AddBeziers<ept id=\"p1\">](#cd2dgeometrysink__addbeziers)</ept>","source":"[CD2DGeometrySink::AddBeziers](#cd2dgeometrysink__addbeziers)"},{"content":"Creates a sequence of cubic Bezier curves and adds them to the geometry sink.","pos":[1570,1647]},{"pos":[1652,1707],"content":"<bpt id=\"p1\">[</bpt>CD2DGeometrySink::AddLine<ept id=\"p1\">](#cd2dgeometrysink__addline)</ept>","source":"[CD2DGeometrySink::AddLine](#cd2dgeometrysink__addline)"},{"content":"Creates a line segment between the current point and the specified end point and adds it to the geometry sink.","pos":[1708,1818]},{"pos":[1823,1880],"content":"<bpt id=\"p1\">[</bpt>CD2DGeometrySink::AddLines<ept id=\"p1\">](#cd2dgeometrysink__addlines)</ept>","source":"[CD2DGeometrySink::AddLines](#cd2dgeometrysink__addlines)"},{"content":"Creates a sequence of lines using the specified points and adds them to the geometry sink.","pos":[1881,1971]},{"pos":[1976,2053],"content":"<bpt id=\"p1\">[</bpt>CD2DGeometrySink::AddQuadraticBezier<ept id=\"p1\">](#cd2dgeometrysink__addquadraticbezier)</ept>","source":"[CD2DGeometrySink::AddQuadraticBezier](#cd2dgeometrysink__addquadraticbezier)"},{"content":"Creates a quadratic Bezier curve between the current point and the specified end point.","pos":[2054,2141]},{"pos":[2146,2225],"content":"<bpt id=\"p1\">[</bpt>CD2DGeometrySink::AddQuadraticBeziers<ept id=\"p1\">](#cd2dgeometrysink__addquadraticbeziers)</ept>","source":"[CD2DGeometrySink::AddQuadraticBeziers](#cd2dgeometrysink__addquadraticbeziers)"},{"content":"Adds a sequence of quadratic Bezier segments as an array in a single call.","pos":[2226,2300]},{"pos":[2305,2368],"content":"<bpt id=\"p1\">[</bpt>CD2DGeometrySink::BeginFigure<ept id=\"p1\">](#cd2dgeometrysink__beginfigure)</ept>","source":"[CD2DGeometrySink::BeginFigure](#cd2dgeometrysink__beginfigure)"},{"content":"Starts a new figure at the specified point.","pos":[2369,2412]},{"pos":[2417,2468],"content":"<bpt id=\"p1\">[</bpt>CD2DGeometrySink::Close<ept id=\"p1\">](#cd2dgeometrysink__close)</ept>","source":"[CD2DGeometrySink::Close](#cd2dgeometrysink__close)"},{"content":"Closes the geometry sink","pos":[2469,2493]},{"pos":[2498,2557],"content":"<bpt id=\"p1\">[</bpt>CD2DGeometrySink::EndFigure<ept id=\"p1\">](#cd2dgeometrysink__endfigure)</ept>","source":"[CD2DGeometrySink::EndFigure](#cd2dgeometrysink__endfigure)"},{"content":"Ends the current figure; optionally, closes it.","pos":[2558,2605]},{"pos":[2610,2657],"content":"<bpt id=\"p1\">[</bpt>CD2DGeometrySink::Get<ept id=\"p1\">](#cd2dgeometrysink__get)</ept>","source":"[CD2DGeometrySink::Get](#cd2dgeometrysink__get)"},{"content":"Returns ID2D1GeometrySink interface","pos":[2658,2693]},{"pos":[2698,2753],"content":"<bpt id=\"p1\">[</bpt>CD2DGeometrySink::IsValid<ept id=\"p1\">](#cd2dgeometrysink__isvalid)</ept>","source":"[CD2DGeometrySink::IsValid](#cd2dgeometrysink__isvalid)"},{"content":"Checks geometry sink validity","pos":[2754,2783]},{"pos":[2788,2851],"content":"<bpt id=\"p1\">[</bpt>CD2DGeometrySink::SetFillMode<ept id=\"p1\">](#cd2dgeometrysink__setfillmode)</ept>","source":"[CD2DGeometrySink::SetFillMode](#cd2dgeometrysink__setfillmode)"},{"content":"Specifies the method used to determine which points are inside the geometry described by this geometry sink and which points are outside.","pos":[2852,2989]},{"pos":[2994,3065],"content":"<bpt id=\"p1\">[</bpt>CD2DGeometrySink::SetSegmentFlags<ept id=\"p1\">](#cd2dgeometrysink__setsegmentflags)</ept>","source":"[CD2DGeometrySink::SetSegmentFlags](#cd2dgeometrysink__setsegmentflags)"},{"content":"Specifies stroke and join options to be applied to new segments added to the geometry sink.","pos":[3066,3157]},{"pos":[3168,3184],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[3191,3195]},{"content":"Description","pos":[3196,3207]},{"pos":[3245,3344],"content":"<bpt id=\"p1\">[</bpt>CD2DGeometrySink::operator ID2D1GeometrySink*<ept id=\"p1\">](#cd2dgeometrysink__operator_id2d1geometrysink_star)</ept>","source":"[CD2DGeometrySink::operator ID2D1GeometrySink*](#cd2dgeometrysink__operator_id2d1geometrysink_star)"},{"content":"Returns ID2D1GeometrySink interface","pos":[3345,3380]},{"pos":[3391,3413],"content":"Protected Data Members","linkify":"Protected Data Members","nodes":[{"content":"Protected Data Members","pos":[0,22]}]},{"content":"Name","pos":[3420,3424]},{"content":"Description","pos":[3425,3436]},{"pos":[3474,3529],"content":"<bpt id=\"p1\">[</bpt>CD2DGeometrySink::m_pSink<ept id=\"p1\">](#cd2dgeometrysink__m_psink)</ept>","source":"[CD2DGeometrySink::m_pSink](#cd2dgeometrysink__m_psink)"},{"content":"A pointer to an ID2D1GeometrySink.","pos":[3530,3564]},{"pos":[3574,3595],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[3599,3664],"content":"<bpt id=\"p1\">[</bpt>CD2DGeometrySink<ept id=\"p1\">](../../mfc/reference/cd2dgeometrysink-class.md)</ept>","source":"[CD2DGeometrySink](../../mfc/reference/cd2dgeometrysink-class.md)"},{"pos":[3673,3685],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3689,3718],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxrendertarget.h","source":"**Header:** afxrendertarget.h"},{"pos":[3728,3819],"content":"<bpt id=\"p1\">&lt;a name=\"cd2dgeometrysink___dtorcd2dgeometrysink\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CD2DGeometrySink::~CD2DGeometrySink","linkify":"<a name=\"cd2dgeometrysink___dtorcd2dgeometrysink\"></a>  CD2DGeometrySink::~CD2DGeometrySink","source":"<a name=\"cd2dgeometrysink___dtorcd2dgeometrysink\"></a>  CD2DGeometrySink::~CD2DGeometrySink"},{"content":"The destructor.","pos":[3823,3838]},{"content":"Called when a D2D geometry sink object is being destroyed.","pos":[3839,3897]},{"pos":[3951,4016],"content":"<bpt id=\"p1\">&lt;a name=\"cd2dgeometrysink__addarc\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CD2DGeometrySink::AddArc","linkify":"<a name=\"cd2dgeometrysink__addarc\"></a>  CD2DGeometrySink::AddArc","source":"<a name=\"cd2dgeometrysink__addarc\"></a>  CD2DGeometrySink::AddArc"},{"content":"Adds a single arc to the path geometry","pos":[4020,4058]},{"pos":[4125,4135],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The arc segment to add to the figure","pos":[4148,4184]},{"pos":[4194,4265],"content":"<bpt id=\"p1\">&lt;a name=\"cd2dgeometrysink__addbezier\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CD2DGeometrySink::AddBezier","linkify":"<a name=\"cd2dgeometrysink__addbezier\"></a>  CD2DGeometrySink::AddBezier","source":"<a name=\"cd2dgeometrysink__addbezier\"></a>  CD2DGeometrySink::AddBezier"},{"content":"Creates a cubic Bezier curve between the current point and the specified end point.","pos":[4269,4352]},{"pos":[4428,4438],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A structure that describes the control points and end point of the Bezier curve to add.","pos":[4454,4541]},{"pos":[4551,4624],"content":"<bpt id=\"p1\">&lt;a name=\"cd2dgeometrysink__addbeziers\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CD2DGeometrySink::AddBeziers","linkify":"<a name=\"cd2dgeometrysink__addbeziers\"></a>  CD2DGeometrySink::AddBeziers","source":"<a name=\"cd2dgeometrysink__addbeziers\"></a>  CD2DGeometrySink::AddBeziers"},{"content":"Creates a sequence of cubic Bezier curves and adds them to the geometry sink.","pos":[4628,4705]},{"pos":[4823,4833],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An array of Bezier segments that describes the Bezier curves to create.","pos":[4850,4921]},{"content":"A curve is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by BeginFigure) to the end point of the first Bezier segment in the array.","pos":[4922,5119]},{"content":"if the array contains additional Bezier segments, each subsequent Bezier segment uses the end point of the preceding Bezier segment as its start point.","pos":[5120,5271]},{"pos":[5281,5348],"content":"<bpt id=\"p1\">&lt;a name=\"cd2dgeometrysink__addline\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CD2DGeometrySink::AddLine","linkify":"<a name=\"cd2dgeometrysink__addline\"></a>  CD2DGeometrySink::AddLine","source":"<a name=\"cd2dgeometrysink__addline\"></a>  CD2DGeometrySink::AddLine"},{"content":"Creates a line segment between the current point and the specified end point and adds it to the geometry sink.","pos":[5352,5462]},{"pos":[5519,5529],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The end point of the line to draw.","pos":[5544,5578]},{"pos":[5588,5657],"content":"<bpt id=\"p1\">&lt;a name=\"cd2dgeometrysink__addlines\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CD2DGeometrySink::AddLines","linkify":"<a name=\"cd2dgeometrysink__addlines\"></a>  CD2DGeometrySink::AddLines","source":"<a name=\"cd2dgeometrysink__addlines\"></a>  CD2DGeometrySink::AddLines"},{"content":"Creates a sequence of lines using the specified points and adds them to the geometry sink.","pos":[5661,5751]},{"pos":[5848,5858],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An array of one or more points that describe the lines to draw.","pos":[5874,5937]},{"content":"A line is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by BeginFigure) to the first point in the array.","pos":[5938,6108]},{"content":"if the array contains additional points, a line is drawn from the first point to the second point in the array, from the second point to the third point, and so on.","pos":[6109,6273]},{"content":"An array of a sequence of the end points of the lines to draw.","pos":[6274,6336]},{"pos":[6346,6435],"content":"<bpt id=\"p1\">&lt;a name=\"cd2dgeometrysink__addquadraticbezier\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CD2DGeometrySink::AddQuadraticBezier","linkify":"<a name=\"cd2dgeometrysink__addquadraticbezier\"></a>  CD2DGeometrySink::AddQuadraticBezier","source":"<a name=\"cd2dgeometrysink__addquadraticbezier\"></a>  CD2DGeometrySink::AddQuadraticBezier"},{"content":"Creates a quadratic Bezier curve between the current point and the specified end point.","pos":[6439,6526]},{"pos":[6621,6631],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A structure that describes the control point and the end point of the quadratic Bezier curve to add.","pos":[6647,6747]},{"pos":[6757,6848],"content":"<bpt id=\"p1\">&lt;a name=\"cd2dgeometrysink__addquadraticbeziers\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CD2DGeometrySink::AddQuadraticBeziers","linkify":"<a name=\"cd2dgeometrysink__addquadraticbeziers\"></a>  CD2DGeometrySink::AddQuadraticBeziers","source":"<a name=\"cd2dgeometrysink__addquadraticbeziers\"></a>  CD2DGeometrySink::AddQuadraticBeziers"},{"content":"Adds a sequence of quadratic Bezier segments as an array in a single call.","pos":[6852,6926]},{"pos":[7073,7083],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An array of a sequence of quadratic Bezier segments.","pos":[7100,7152]},{"pos":[7162,7237],"content":"<bpt id=\"p1\">&lt;a name=\"cd2dgeometrysink__beginfigure\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CD2DGeometrySink::BeginFigure","linkify":"<a name=\"cd2dgeometrysink__beginfigure\"></a>  CD2DGeometrySink::BeginFigure","source":"<a name=\"cd2dgeometrysink__beginfigure\"></a>  CD2DGeometrySink::BeginFigure"},{"content":"Starts a new figure at the specified point.","pos":[7241,7284]},{"pos":[7392,7402],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The point at which to begin the new figure.","pos":[7422,7465]},{"content":"Whether the new figure should be hollow or filled.","pos":[7489,7539]},{"pos":[7549,7634],"content":"<bpt id=\"p1\">&lt;a name=\"cd2dgeometrysink__cd2dgeometrysink\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CD2DGeometrySink::CD2DGeometrySink","linkify":"<a name=\"cd2dgeometrysink__cd2dgeometrysink\"></a>  CD2DGeometrySink::CD2DGeometrySink","source":"<a name=\"cd2dgeometrysink__cd2dgeometrysink\"></a>  CD2DGeometrySink::CD2DGeometrySink"},{"content":"Constructs a CD2DGeometrySink object from CD2DPathGeometry object.","pos":[7638,7704]},{"pos":[7779,7789],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An existing CD2DPathGeometry object.","pos":[7811,7847]},{"pos":[7857,7920],"content":"<bpt id=\"p1\">&lt;a name=\"cd2dgeometrysink__close\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CD2DGeometrySink::Close","linkify":"<a name=\"cd2dgeometrysink__close\"></a>  CD2DGeometrySink::Close","source":"<a name=\"cd2dgeometrysink__close\"></a>  CD2DGeometrySink::Close"},{"content":"Closes the geometry sink","pos":[7924,7948]},{"pos":[7987,7999],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise FALSE.","pos":[8003,8042]},{"pos":[8052,8123],"content":"<bpt id=\"p1\">&lt;a name=\"cd2dgeometrysink__endfigure\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CD2DGeometrySink::EndFigure","linkify":"<a name=\"cd2dgeometrysink__endfigure\"></a>  CD2DGeometrySink::EndFigure","source":"<a name=\"cd2dgeometrysink__endfigure\"></a>  CD2DGeometrySink::EndFigure"},{"content":"Ends the current figure; optionally, closes it.","pos":[8127,8174]},{"pos":[8242,8252],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A value that indicates whether the current figure is closed.","pos":[8271,8331]},{"content":"If the figure is closed, a line is drawn between the current point and the start point specified by BeginFigure.","pos":[8332,8444]},{"pos":[8454,8513],"content":"<bpt id=\"p1\">&lt;a name=\"cd2dgeometrysink__get\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CD2DGeometrySink::Get","linkify":"<a name=\"cd2dgeometrysink__get\"></a>  CD2DGeometrySink::Get","source":"<a name=\"cd2dgeometrysink__get\"></a>  CD2DGeometrySink::Get"},{"content":"Returns ID2D1GeometrySink interface","pos":[8517,8552]},{"pos":[8603,8615],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Pointer to an ID2D1GeometrySink interface or NULL if object is not initialized yet.","pos":[8619,8702]},{"pos":[8712,8779],"content":"<bpt id=\"p1\">&lt;a name=\"cd2dgeometrysink__isvalid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CD2DGeometrySink::IsValid","linkify":"<a name=\"cd2dgeometrysink__isvalid\"></a>  CD2DGeometrySink::IsValid","source":"<a name=\"cd2dgeometrysink__isvalid\"></a>  CD2DGeometrySink::IsValid"},{"content":"Checks geometry sink validity","pos":[8783,8812]},{"pos":[8862,8874],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"TRUE if geometry sink is valid; otherwise FALSE.","pos":[8878,8926]},{"pos":[8936,9003],"content":"<bpt id=\"p1\">&lt;a name=\"cd2dgeometrysink__m_psink\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CD2DGeometrySink::m_pSink","linkify":"<a name=\"cd2dgeometrysink__m_psink\"></a>  CD2DGeometrySink::m_pSink","source":"<a name=\"cd2dgeometrysink__m_psink\"></a>  CD2DGeometrySink::m_pSink"},{"content":"A pointer to an ID2D1GeometrySink.","pos":[9007,9041]},{"pos":[9096,9207],"content":"<bpt id=\"p1\">&lt;a name=\"cd2dgeometrysink__operator_id2d1geometrysink_star\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CD2DGeometrySink::operator ID2D1GeometrySink*","linkify":"<a name=\"cd2dgeometrysink__operator_id2d1geometrysink_star\"></a>  CD2DGeometrySink::operator ID2D1GeometrySink*","source":"<a name=\"cd2dgeometrysink__operator_id2d1geometrysink_star\"></a>  CD2DGeometrySink::operator ID2D1GeometrySink*"},{"content":"Returns ID2D1GeometrySink interface","pos":[9211,9246]},{"pos":[9303,9315],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Pointer to an ID2D1GeometrySink interface or NULL if object is not initialized yet.","pos":[9319,9402]},{"pos":[9412,9487],"content":"<bpt id=\"p1\">&lt;a name=\"cd2dgeometrysink__setfillmode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CD2DGeometrySink::SetFillMode","linkify":"<a name=\"cd2dgeometrysink__setfillmode\"></a>  CD2DGeometrySink::SetFillMode","source":"<a name=\"cd2dgeometrysink__setfillmode\"></a>  CD2DGeometrySink::SetFillMode"},{"content":"Specifies the method used to determine which points are inside the geometry described by this geometry sink and which points are outside.","pos":[9491,9628]},{"pos":[9696,9706],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The method used to determine whether a given point is part of the geometry.","pos":[9724,9799]},{"pos":[9809,9892],"content":"<bpt id=\"p1\">&lt;a name=\"cd2dgeometrysink__setsegmentflags\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CD2DGeometrySink::SetSegmentFlags","linkify":"<a name=\"cd2dgeometrysink__setsegmentflags\"></a>  CD2DGeometrySink::SetSegmentFlags","source":"<a name=\"cd2dgeometrysink__setsegmentflags\"></a>  CD2DGeometrySink::SetSegmentFlags"},{"content":"Specifies stroke and join options to be applied to new segments added to the geometry sink.","pos":[9896,9987]},{"pos":[10065,10075],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Stroke and join options to be applied to new segments added to the geometry sink.","pos":[10096,10177]},{"pos":[10186,10194],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[10198,10243],"content":"<bpt id=\"p1\">[</bpt>Classes<ept id=\"p1\">](../../mfc/reference/mfc-classes.md)</ept>","source":"[Classes](../../mfc/reference/mfc-classes.md)"}],"content":"---\ntitle: \"CD2DGeometrySink Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"afxrendertarget/CD2DGeometrySink\"\n  - \"CD2DGeometrySink\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CD2DGeometrySink class\"\nms.assetid: e5e07f41-0343-4ab1-9d6b-8c62ed33c04a\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CD2DGeometrySink Class\nA wrapper for ID2D1GeometrySink.  \n  \n## Syntax  \n  \n```  \nclass CD2DGeometrySink;  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CD2DGeometrySink::CD2DGeometrySink](#cd2dgeometrysink__cd2dgeometrysink)|Constructs a CD2DGeometrySink object from CD2DPathGeometry object.|  \n|[CD2DGeometrySink::~CD2DGeometrySink](#cd2dgeometrysink___dtorcd2dgeometrysink)|The destructor. Called when a D2D geometry sink object is being destroyed.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CD2DGeometrySink::AddArc](#cd2dgeometrysink__addarc)|Adds a single arc to the path geometry|  \n|[CD2DGeometrySink::AddBezier](#cd2dgeometrysink__addbezier)|Creates a cubic Bezier curve between the current point and the specified end point.|  \n|[CD2DGeometrySink::AddBeziers](#cd2dgeometrysink__addbeziers)|Creates a sequence of cubic Bezier curves and adds them to the geometry sink.|  \n|[CD2DGeometrySink::AddLine](#cd2dgeometrysink__addline)|Creates a line segment between the current point and the specified end point and adds it to the geometry sink.|  \n|[CD2DGeometrySink::AddLines](#cd2dgeometrysink__addlines)|Creates a sequence of lines using the specified points and adds them to the geometry sink.|  \n|[CD2DGeometrySink::AddQuadraticBezier](#cd2dgeometrysink__addquadraticbezier)|Creates a quadratic Bezier curve between the current point and the specified end point.|  \n|[CD2DGeometrySink::AddQuadraticBeziers](#cd2dgeometrysink__addquadraticbeziers)|Adds a sequence of quadratic Bezier segments as an array in a single call.|  \n|[CD2DGeometrySink::BeginFigure](#cd2dgeometrysink__beginfigure)|Starts a new figure at the specified point.|  \n|[CD2DGeometrySink::Close](#cd2dgeometrysink__close)|Closes the geometry sink|  \n|[CD2DGeometrySink::EndFigure](#cd2dgeometrysink__endfigure)|Ends the current figure; optionally, closes it.|  \n|[CD2DGeometrySink::Get](#cd2dgeometrysink__get)|Returns ID2D1GeometrySink interface|  \n|[CD2DGeometrySink::IsValid](#cd2dgeometrysink__isvalid)|Checks geometry sink validity|  \n|[CD2DGeometrySink::SetFillMode](#cd2dgeometrysink__setfillmode)|Specifies the method used to determine which points are inside the geometry described by this geometry sink and which points are outside.|  \n|[CD2DGeometrySink::SetSegmentFlags](#cd2dgeometrysink__setsegmentflags)|Specifies stroke and join options to be applied to new segments added to the geometry sink.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CD2DGeometrySink::operator ID2D1GeometrySink*](#cd2dgeometrysink__operator_id2d1geometrysink_star)|Returns ID2D1GeometrySink interface|  \n  \n### Protected Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CD2DGeometrySink::m_pSink](#cd2dgeometrysink__m_psink)|A pointer to an ID2D1GeometrySink.|  \n  \n## Inheritance Hierarchy  \n [CD2DGeometrySink](../../mfc/reference/cd2dgeometrysink-class.md)  \n  \n## Requirements  \n **Header:** afxrendertarget.h  \n  \n##  <a name=\"cd2dgeometrysink___dtorcd2dgeometrysink\"></a>  CD2DGeometrySink::~CD2DGeometrySink  \n The destructor. Called when a D2D geometry sink object is being destroyed.  \n  \n```  \nvirtual ~CD2DGeometrySink();\n```  \n  \n##  <a name=\"cd2dgeometrysink__addarc\"></a>  CD2DGeometrySink::AddArc  \n Adds a single arc to the path geometry  \n  \n```  \nvoid AddArc(const D2D1_ARC_SEGMENT& arc);\n```  \n  \n### Parameters  \n `arc`  \n The arc segment to add to the figure  \n  \n##  <a name=\"cd2dgeometrysink__addbezier\"></a>  CD2DGeometrySink::AddBezier  \n Creates a cubic Bezier curve between the current point and the specified end point.  \n  \n```  \nvoid AddBezier(const D2D1_BEZIER_SEGMENT& bezier);\n```  \n  \n### Parameters  \n `bezier`  \n A structure that describes the control points and end point of the Bezier curve to add.  \n  \n##  <a name=\"cd2dgeometrysink__addbeziers\"></a>  CD2DGeometrySink::AddBeziers  \n Creates a sequence of cubic Bezier curves and adds them to the geometry sink.  \n  \n```  \nvoid AddBeziers(\n    const CArray<D2D1_BEZIER_SEGMENT,  \n    D2D1_BEZIER_SEGMENT>& beziers);\n```  \n  \n### Parameters  \n `beziers`  \n An array of Bezier segments that describes the Bezier curves to create. A curve is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by BeginFigure) to the end point of the first Bezier segment in the array. if the array contains additional Bezier segments, each subsequent Bezier segment uses the end point of the preceding Bezier segment as its start point.  \n  \n##  <a name=\"cd2dgeometrysink__addline\"></a>  CD2DGeometrySink::AddLine  \n Creates a line segment between the current point and the specified end point and adds it to the geometry sink.  \n  \n```  \nvoid AddLine(CD2DPointF point);\n```  \n  \n### Parameters  \n `point`  \n The end point of the line to draw.  \n  \n##  <a name=\"cd2dgeometrysink__addlines\"></a>  CD2DGeometrySink::AddLines  \n Creates a sequence of lines using the specified points and adds them to the geometry sink.  \n  \n```  \nvoid AddLines(\n    const CArray<CD2DPointF,  \n    CD2DPointF>& points);\n```  \n  \n### Parameters  \n `points`  \n An array of one or more points that describe the lines to draw. A line is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by BeginFigure) to the first point in the array. if the array contains additional points, a line is drawn from the first point to the second point in the array, from the second point to the third point, and so on. An array of a sequence of the end points of the lines to draw.  \n  \n##  <a name=\"cd2dgeometrysink__addquadraticbezier\"></a>  CD2DGeometrySink::AddQuadraticBezier  \n Creates a quadratic Bezier curve between the current point and the specified end point.  \n  \n```  \nvoid AddQuadraticBezier(const D2D1_QUADRATIC_BEZIER_SEGMENT& bezier);\n```  \n  \n### Parameters  \n `bezier`  \n A structure that describes the control point and the end point of the quadratic Bezier curve to add.  \n  \n##  <a name=\"cd2dgeometrysink__addquadraticbeziers\"></a>  CD2DGeometrySink::AddQuadraticBeziers  \n Adds a sequence of quadratic Bezier segments as an array in a single call.  \n  \n```  \nvoid AddQuadraticBeziers(\n    const CArray<D2D1_QUADRATIC_BEZIER_SEGMENT,  \n    D2D1_QUADRATIC_BEZIER_SEGMENT>& beziers);\n```  \n  \n### Parameters  \n `beziers`  \n An array of a sequence of quadratic Bezier segments.  \n  \n##  <a name=\"cd2dgeometrysink__beginfigure\"></a>  CD2DGeometrySink::BeginFigure  \n Starts a new figure at the specified point.  \n  \n```  \nvoid BeginFigure(\n    CD2DPointF startPoint,  \n    D2D1_FIGURE_BEGIN figureBegin);\n```  \n  \n### Parameters  \n `startPoint`  \n The point at which to begin the new figure.  \n  \n `figureBegin`  \n Whether the new figure should be hollow or filled.  \n  \n##  <a name=\"cd2dgeometrysink__cd2dgeometrysink\"></a>  CD2DGeometrySink::CD2DGeometrySink  \n Constructs a CD2DGeometrySink object from CD2DPathGeometry object.  \n  \n```  \nCD2DGeometrySink(CD2DPathGeometry& pathGeometry);\n```  \n  \n### Parameters  \n `pathGeometry`  \n An existing CD2DPathGeometry object.  \n  \n##  <a name=\"cd2dgeometrysink__close\"></a>  CD2DGeometrySink::Close  \n Closes the geometry sink  \n  \n```  \nBOOL Close();\n```  \n  \n### Return Value  \n Nonzero if successful; otherwise FALSE.  \n  \n##  <a name=\"cd2dgeometrysink__endfigure\"></a>  CD2DGeometrySink::EndFigure  \n Ends the current figure; optionally, closes it.  \n  \n```  \nvoid EndFigure(D2D1_FIGURE_END figureEnd);\n```  \n  \n### Parameters  \n `figureEnd`  \n A value that indicates whether the current figure is closed. If the figure is closed, a line is drawn between the current point and the start point specified by BeginFigure.  \n  \n##  <a name=\"cd2dgeometrysink__get\"></a>  CD2DGeometrySink::Get  \n Returns ID2D1GeometrySink interface  \n  \n```  \nID2D1GeometrySink* Get();\n```  \n  \n### Return Value  \n Pointer to an ID2D1GeometrySink interface or NULL if object is not initialized yet.  \n  \n##  <a name=\"cd2dgeometrysink__isvalid\"></a>  CD2DGeometrySink::IsValid  \n Checks geometry sink validity  \n  \n```  \nBOOL IsValid() const;\n\n \n```  \n  \n### Return Value  \n TRUE if geometry sink is valid; otherwise FALSE.  \n  \n##  <a name=\"cd2dgeometrysink__m_psink\"></a>  CD2DGeometrySink::m_pSink  \n A pointer to an ID2D1GeometrySink.  \n  \n```  \nID2D1GeometrySink* m_pSink;  \n```  \n  \n##  <a name=\"cd2dgeometrysink__operator_id2d1geometrysink_star\"></a>  CD2DGeometrySink::operator ID2D1GeometrySink*  \n Returns ID2D1GeometrySink interface  \n  \n```  \noperator ID2D1GeometrySink*();\n```   \n  \n### Return Value  \n Pointer to an ID2D1GeometrySink interface or NULL if object is not initialized yet.  \n  \n##  <a name=\"cd2dgeometrysink__setfillmode\"></a>  CD2DGeometrySink::SetFillMode  \n Specifies the method used to determine which points are inside the geometry described by this geometry sink and which points are outside.  \n  \n```  \nvoid SetFillMode(D2D1_FILL_MODE fillMode);\n```  \n  \n### Parameters  \n `fillMode`  \n The method used to determine whether a given point is part of the geometry.  \n  \n##  <a name=\"cd2dgeometrysink__setsegmentflags\"></a>  CD2DGeometrySink::SetSegmentFlags  \n Specifies stroke and join options to be applied to new segments added to the geometry sink.  \n  \n```  \nvoid SetSegmentFlags(D2D1_PATH_SEGMENT vertexFlags);\n```  \n  \n### Parameters  \n `vertexFlags`  \n Stroke and join options to be applied to new segments added to the geometry sink.  \n  \n## See Also  \n [Classes](../../mfc/reference/mfc-classes.md)\n"}