{"nodes":[{"pos":[12,51],"content":"Managed Types (C++-CL) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Managed Types (C++-CL) | Microsoft Docs","pos":[0,39]}]},{"content":"Managed Types (C++/CL)","pos":[594,616]},{"content":"The syntax for the declaration of managed types and the creation and use of objects of these types has been significantly altered from Managed Extensions for C++ to <ph id=\"ph1\">[!INCLUDE[cpp_current_long](../dotnet/includes/cpp_current_long_md.md)]</ph>.","pos":[617,854],"source":"The syntax for the declaration of managed types and the creation and use of objects of these types has been significantly altered from Managed Extensions for C++ to [!INCLUDE[cpp_current_long](../dotnet/includes/cpp_current_long_md.md)]."},{"content":"This was done to promote their integration within the ISO-C++ type system.","pos":[855,929]},{"content":"These changes are presented in detail in the following subsections.","pos":[930,997]},{"content":"In This Section","pos":[1006,1021]},{"content":"Declaration of a Managed Class Type","pos":[1026,1061]},{"content":"Discusses how to declare a managed <ph id=\"ph1\">`class`</ph>, <ph id=\"ph2\">`struct`</ph>, or <ph id=\"ph3\">`interface`</ph>.","pos":[1116,1185],"source":" Discusses how to declare a managed `class`, `struct`, or `interface`."},{"content":"Declaration of a CLR Reference Class Object","pos":[1193,1236]},{"content":"Discusses how to declare a reference class type object using a tracking handle.","pos":[1299,1378]},{"content":"Declaration of a CLR Array","pos":[1386,1412]},{"content":"Explains how to declare and initialize an array.","pos":[1458,1506]},{"content":"Changes in Constructor Initialization Order","pos":[1514,1557]},{"content":"Discusses key changes in class constructor initialization order.","pos":[1620,1684]},{"content":"Changes in Destructor Semantics","pos":[1692,1723]},{"content":"Discusses non-deterministic finalization, <ph id=\"ph1\">`Finalize`</ph> versus <ph id=\"ph2\">`Dispose`</ph>, ramifications for reference objects, and use of an explicit <ph id=\"ph3\">`Finalize`</ph>.","pos":[1774,1916],"source":" Discusses non-deterministic finalization, `Finalize` versus `Dispose`, ramifications for reference objects, and use of an explicit `Finalize`."},{"pos":[1923,2248],"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> The discussion of delegates is deferred until <bpt id=\"p2\">[</bpt>Delegates and Events<ept id=\"p2\">](../dotnet/delegates-and-events.md)</ept> in order to present them with event members within a class, the general topic of <bpt id=\"p3\">[</bpt>Member Declarations within a Class or Interface (C++/CLI)<ept id=\"p3\">](../dotnet/member-declarations-within-a-class-or-interface-cpp-cli.md)</ept>.","source":"**Note:** The discussion of delegates is deferred until [Delegates and Events](../dotnet/delegates-and-events.md) in order to present them with event members within a class, the general topic of [Member Declarations within a Class or Interface (C++/CLI)](../dotnet/member-declarations-within-a-class-or-interface-cpp-cli.md)."},{"content":"See Also","pos":[2257,2265]},{"content":"C++/CLI Migration Primer","pos":[2270,2294]},{"content":"Classes and Structs","pos":[2340,2359]},{"content":"Arrays","pos":[2426,2432]}],"content":"---\ntitle: \"Managed Types (C++-CL) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"__gc types\"\n  - \"types [C++], CLR\"\nms.assetid: 1ddd114e-be02-4de7-a4dd-a2d72ad8ff81\ncaps.latest.revision: 11\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Managed Types (C++/CL)\nThe syntax for the declaration of managed types and the creation and use of objects of these types has been significantly altered from Managed Extensions for C++ to [!INCLUDE[cpp_current_long](../dotnet/includes/cpp_current_long_md.md)]. This was done to promote their integration within the ISO-C++ type system. These changes are presented in detail in the following subsections.  \n  \n## In This Section  \n [Declaration of a Managed Class Type](../dotnet/declaration-of-a-managed-class-type.md)  \n Discusses how to declare a managed `class`, `struct`, or `interface`.  \n  \n [Declaration of a CLR Reference Class Object](../dotnet/declaration-of-a-clr-reference-class-object.md)  \n Discusses how to declare a reference class type object using a tracking handle.  \n  \n [Declaration of a CLR Array](../dotnet/declaration-of-a-clr-array.md)  \n Explains how to declare and initialize an array.  \n  \n [Changes in Constructor Initialization Order](../dotnet/changes-in-constructor-initialization-order.md)  \n Discusses key changes in class constructor initialization order.  \n  \n [Changes in Destructor Semantics](../dotnet/changes-in-destructor-semantics.md)  \n Discusses non-deterministic finalization, `Finalize` versus `Dispose`, ramifications for reference objects, and use of an explicit `Finalize`.  \n  \n **Note:** The discussion of delegates is deferred until [Delegates and Events](../dotnet/delegates-and-events.md) in order to present them with event members within a class, the general topic of [Member Declarations within a Class or Interface (C++/CLI)](../dotnet/member-declarations-within-a-class-or-interface-cpp-cli.md).  \n  \n## See Also  \n [C++/CLI Migration Primer](../dotnet/cpp-cli-migration-primer.md)   \n [Classes and Structs](../windows/classes-and-structs-cpp-component-extensions.md)   \n [Arrays](../windows/arrays-cpp-component-extensions.md)"}