{"nodes":[{"pos":[12,54],"content":"input_iterator_tag Struct | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"input_iterator_tag Struct | Microsoft Docs","pos":[0,42]}]},{"content":"input_iterator_tag Struct","pos":[757,782]},{"pos":[783,888],"content":"A class that provides a return type for <bpt id=\"p1\">**</bpt>iterator_category<ept id=\"p1\">**</ept> function that represents an input iterator.","source":"A class that provides a return type for **iterator_category** function that represents an input iterator."},{"content":"Syntax","pos":[897,903]},{"content":"struct input_iterator_tag {};","pos":[909,938]},{"content":"Remarks","pos":[947,954]},{"content":"The category tag classes are used as compile tags for algorithm selection.","pos":[958,1032]},{"content":"The template function needs to find the most specific category of its iterator argument so that it can use the most efficient algorithm at compile time.","pos":[1033,1185]},{"content":"For every iterator of type <ph id=\"ph1\">`Iterator`</ph>, <ph id=\"ph2\">`iterator_traits`&lt; `Iterator`&gt; </ph><bpt id=\"p1\">**</bpt>::iterator_category<ept id=\"p1\">**</ept> must be defined to be the most specific category tag that describes the iterator's behavior.","pos":[1186,1372],"source":" For every iterator of type `Iterator`, `iterator_traits`< `Iterator`> **::iterator_category** must be defined to be the most specific category tag that describes the iterator's behavior."},{"pos":[1379,1522],"content":"The type is the same as <bpt id=\"p1\">**</bpt>iterator<ept id=\"p1\">**</ept><ph id=\"ph1\">\\&lt;</ph> <bpt id=\"p2\">**</bpt>Iter<ept id=\"p2\">**</ept><ph id=\"ph2\">&gt; </ph><bpt id=\"p3\">**</bpt>::iterator_category<ept id=\"p3\">**</ept> when <bpt id=\"p4\">**</bpt>Iter<ept id=\"p4\">**</ept> describes an object that can serve as an input iterator.","source":"The type is the same as **iterator**\\< **Iter**> **::iterator_category** when **Iter** describes an object that can serve as an input iterator."},{"content":"Example","pos":[1531,1538]},{"pos":[1542,1748],"content":"See <bpt id=\"p1\">[</bpt>iterator_traits<ept id=\"p1\">](../standard-library/iterator-traits-struct.md)</ept> or <bpt id=\"p2\">[</bpt>random_access_iterator_tag<ept id=\"p2\">](../standard-library/random-access-iterator-tag-struct.md)</ept> for an example of how to use <bpt id=\"p3\">**</bpt>iterator_tag<ept id=\"p3\">**</ept>s.","source":"See [iterator_traits](../standard-library/iterator-traits-struct.md) or [random_access_iterator_tag](../standard-library/random-access-iterator-tag-struct.md) for an example of how to use **iterator_tag**s."},{"content":"Requirements","pos":[1757,1769]},{"pos":[1773,1796],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>iterator&gt;","source":"**Header:** \\<iterator>"},{"pos":[1803,1821],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[1830,1838]},{"content":"Thread Safety in the C++ Standard Library","pos":[1843,1884]},{"content":"C++ Standard Library Reference","pos":[1957,1987]}],"content":"---\ntitle: \"input_iterator_tag Struct | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"input_iterator_tag\"\n  - \"std.input_iterator_tag\"\n  - \"std::input_iterator_tag\"\n  - \"xutility/std::input_iterator_tag\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"input_iterator_tag class\"\n  - \"input_iterator_tag struct\"\nms.assetid: ad68a4c6-f315-4ce1-8b74-c1fc71bd1577\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# input_iterator_tag Struct\nA class that provides a return type for **iterator_category** function that represents an input iterator.  \n  \n## Syntax  \n  \nstruct input_iterator_tag {};  \n  \n## Remarks  \n The category tag classes are used as compile tags for algorithm selection. The template function needs to find the most specific category of its iterator argument so that it can use the most efficient algorithm at compile time. For every iterator of type `Iterator`, `iterator_traits`< `Iterator`> **::iterator_category** must be defined to be the most specific category tag that describes the iterator's behavior.  \n  \n The type is the same as **iterator**\\< **Iter**> **::iterator_category** when **Iter** describes an object that can serve as an input iterator.  \n  \n## Example  \n See [iterator_traits](../standard-library/iterator-traits-struct.md) or [random_access_iterator_tag](../standard-library/random-access-iterator-tag-struct.md) for an example of how to use **iterator_tag**s.  \n  \n## Requirements  \n **Header:** \\<iterator>  \n  \n **Namespace:** std  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}