{"nodes":[{"pos":[12,47],"content":"logical_and Struct | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"logical_and Struct | Microsoft Docs","pos":[0,35]}]},{"content":"logical_and Struct","pos":[737,755]},{"pos":[756,866],"content":"A predefined function object that performs the logical conjunction operation ( <ph id=\"ph1\">`operator&amp;&amp;`</ph>) on its arguments.","source":"A predefined function object that performs the logical conjunction operation ( `operator&&`) on its arguments."},{"content":"Syntax","pos":[875,881]},{"content":"Parameters","pos":[1305,1315]},{"content":", <ph id=\"ph1\">`T`</ph>,","pos":[1325,1331],"source":", `T`, "},{"content":"Any type that supports an <ph id=\"ph1\">`operator&amp;&amp;`</ph> that takes operands of the specified or inferred types.","pos":[1339,1433],"source":" Any type that supports an `operator&&` that takes operands of the specified or inferred types."},{"content":"The left operand of the logical conjunction operation.","pos":[1450,1504]},{"content":"The unspecialized template takes an lvalue reference argument of type <ph id=\"ph1\">`Type`</ph>.","pos":[1505,1582],"source":" The unspecialized template takes an lvalue reference argument of type `Type`."},{"content":"The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type <ph id=\"ph1\">`T`</ph>.","pos":[1583,1694],"source":" The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `T`."},{"content":"The right operand of the logical conjunction operation.","pos":[1712,1767]},{"content":"The unspecialized template takes an lvalue reference argument of type <ph id=\"ph1\">`Type`</ph>.","pos":[1768,1845],"source":" The unspecialized template takes an lvalue reference argument of type `Type`."},{"content":"The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type <ph id=\"ph1\">`U`</ph>.","pos":[1846,1957],"source":" The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `U`."},{"content":"Return Value","pos":[1966,1978]},{"content":"The result of <ph id=\"ph1\">`Left``&amp;&amp;``Right`</ph>.","pos":[1982,2014],"source":"The result of `Left``&&``Right`."},{"content":"The specialized template does perfect forwarding of the result, which has the type that's returned by <ph id=\"ph1\">`operator&amp;&amp;`</ph>.","pos":[2015,2130],"source":" The specialized template does perfect forwarding of the result, which has the type that's returned by `operator&&`."},{"content":"Remarks","pos":[2139,2146]},{"content":"For user-defined types, there is no short-circuiting of operand evaluation.","pos":[2150,2225]},{"content":"Both arguments are evaluated by <ph id=\"ph1\">`operator&amp;&amp;`</ph>.","pos":[2226,2271],"source":" Both arguments are evaluated by `operator&&`."},{"content":"Example","pos":[2280,2287]},{"content":"Requirements","pos":[4107,4119]},{"pos":[4123,4148],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>functional&gt;","source":"**Header:** \\<functional>"},{"pos":[4155,4173],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[4182,4190]},{"content":"Thread Safety in the C++ Standard Library","pos":[4195,4236]},{"content":"C++ Standard Library Reference","pos":[4309,4339]}],"content":"---\ntitle: \"logical_and Struct | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std::logical_and\"\n  - \"xfunctional/std::logical_and\"\n  - \"std.logical_and\"\n  - \"logical_and\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"logical_and class\"\n  - \"logical_and struct\"\nms.assetid: 1a375cc2-0592-4d57-a553-78009c7ad610\ncaps.latest.revision: 22\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# logical_and Struct\nA predefined function object that performs the logical conjunction operation ( `operator&&`) on its arguments.  \n  \n## Syntax  \n  \n```\ntemplate <class Type = void>\nstruct logical_and : public binary_function<Type, Type, bool>  \n{\n    bool operator()(const Type& Left, const Type& Right) const;\n};\n\n// specialized transparent functor for operator&&\ntemplate <>\nstruct logical_and<void>  \n{\n  template <class T, class U>\n  auto operator()(T&& Left, U&& Right) const`\n    -> decltype(std::forward<T>(Left) && std::forward<U>(Right));\n };\n```  \n  \n#### Parameters  \n `Type`, `T`, `U`  \n Any type that supports an `operator&&` that takes operands of the specified or inferred types.  \n  \n `Left`  \n The left operand of the logical conjunction operation. The unspecialized template takes an lvalue reference argument of type `Type`. The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `T`.  \n  \n `Right`  \n The right operand of the logical conjunction operation. The unspecialized template takes an lvalue reference argument of type `Type`. The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `U`.  \n  \n## Return Value  \n The result of `Left``&&``Right`. The specialized template does perfect forwarding of the result, which has the type that's returned by `operator&&`.  \n  \n## Remarks  \n For user-defined types, there is no short-circuiting of operand evaluation. Both arguments are evaluated by `operator&&`.  \n  \n## Example  \n  \n```cpp  \n// functional_logical_and.cpp  \n// compile with: /EHsc  \n  \n#define _CRT_RAND_S  \n#include <stdlib.h>  \n#include <deque>  \n#include <algorithm>  \n#include <functional>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   deque<bool> d1, d2, d3( 7 );  \n   deque<bool>::iterator iter1, iter2, iter3;  \n  \n   unsigned int randomValue;  \n  \n   int i;  \n   for ( i = 0 ; i < 7 ; i++ )  \n   {  \n      if ( rand_s( &randomValue ) == 0 )  \n      {  \n         d1.push_back((bool)(( randomValue % 2 ) != 0));  \n      }  \n  \n   }  \n  \n   int j;  \n   for ( j = 0 ; j < 7 ; j++ )  \n   {  \n      if ( rand_s( &randomValue ) == 0 )  \n      {  \n         d2.push_back((bool)(( randomValue % 2 ) != 0));  \n      }  \n   }  \n  \n   cout << boolalpha;    // boolalpha I/O flag on  \n  \n   cout << \"Original deque:\\n d1 = ( \" ;  \n   for ( iter1 = d1.begin( ) ; iter1 != d1.end( ) ; iter1++ )  \n      cout << *iter1 << \" \";  \n   cout << \")\" << endl;  \n  \n   cout << \"Original deque:\\n d2 = ( \" ;  \n   for ( iter2 = d2.begin( ) ; iter2 != d2.end( ) ; iter2++ )  \n      cout << *iter2 << \" \";  \n   cout << \")\" << endl;  \n  \n   // To find element-wise conjunction of the truth values  \n   // of d1 & d2, use the logical_and function object  \n   transform( d1.begin( ), d1.end( ), d2.begin( ),  \n      d3.begin( ), logical_and<bool>( ) );  \n   cout << \"The deque which is the conjuction of d1 & d2 is:\\n d3 = ( \" ;  \n   for ( iter3 = d3.begin( ) ; iter3 != d3.end( ) ; iter3++ )  \n      cout << *iter3 << \" \";  \n   cout << \")\" << endl;  \n}  \n  \n/* Output:  \nOriginal deque:  \n d1 = ( true true true true true false false )  \nOriginal deque:  \n d2 = ( true false true true false true false )  \nThe deque which is the conjuction of d1 & d2 is:  \n d3 = ( true false true true false false false )  \n */  \n```  \n  \n## Requirements  \n **Header:** \\<functional>  \n  \n **Namespace:** std  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}