<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4c7788a8e58603cd3cebfd1bcda6a79bba3432b7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cobarray-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba489e37ad5c5077880881f1a9c34aba49c8471d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4c667653d53122438707f5a377a1382c7cd33174</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CObArray Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CObArray Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Supports arrays of <ph id="ph1">`CObject`</ph> pointers.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CObArray::CObArray</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs an empty array for <ph id="ph1">`CObject`</ph> pointers.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CObArray::Add</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Adds an element to the end of the array; grows the array if necessary.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CObArray::Append</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Appends another array to the array; grows the array if necessary.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CObArray::Copy</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Copies another array to the array; grows the array if necessary.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CObArray::ElementAt</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Returns a temporary reference to the element pointer within the array.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CObArray::FreeExtra</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Frees all unused memory above the current upper bound.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CObArray::GetAt</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Returns the value at a given index.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CObArray::GetCount</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Gets the number of elements in this array.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CObArray::GetData</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Allows access to elements in the array.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>CObArray::GetSize</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Gets the number of elements in this array.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>CObArray::GetUpperBound</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Returns the largest valid index.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>CObArray::InsertAt</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Inserts an element (or all the elements in another array) at a specified index.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>CObArray::IsEmpty</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Determines if the array is empty.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>CObArray::RemoveAll</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Removes all the elements from this array.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>CObArray::RemoveAt</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Removes an element at a specific index.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>CObArray::SetAt</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Sets the value for a given index; array not allowed to grow.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>CObArray::SetAtGrow</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Sets the value for a given index; grows the array if necessary.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>CObArray::SetSize</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Sets the number of elements to be contained in this array.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>CObArray::operator [ ]</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Sets or gets the element at the specified index.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>These object arrays are similar to C arrays, but they can dynamically shrink and grow as necessary.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Array indexes always start at position 0.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You can decide whether to fix the upper bound or allow the array to expand when you add elements past the current bound.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Memory is allocated contiguously to the upper bound, even if some elements are null.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Under Win32, the size of a <ph id="ph1">`CObArray`</ph> object is limited only to available memory.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>As with a C array, the access time for a <ph id="ph1">`CObArray`</ph> indexed element is constant and is independent of the array size.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>incorporates the <ph id="ph1">`IMPLEMENT_SERIAL`</ph> macro to support serialization and dumping of its elements.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If an array of <ph id="ph1">`CObject`</ph> pointers is stored to an archive, either with the overloaded insertion operator or with the <ph id="ph2">`Serialize`</ph> member function, each <ph id="ph3">`CObject`</ph> element is, in turn, serialized along with its array index.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If you need a dump of individual <ph id="ph1">`CObject`</ph> elements in an array, you must set the depth of the <ph id="ph2">`CDumpContext`</ph> object to 1 or greater.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`CObArray`</ph> object is deleted, or when its elements are removed, only the <ph id="ph2">`CObject`</ph> pointers are removed, not the objects they reference.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Before using an array, use <ph id="ph1">`SetSize`</ph> to establish its size and allocate memory for it.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If you do not use <ph id="ph1">`SetSize`</ph>, adding elements to your array causes it to be frequently reallocated and copied.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Frequent reallocation and copying are inefficient and can fragment memory.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Array class derivation is similar to list derivation.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For details on the derivation of a special-purpose list class, see the article <bpt id="p1">[</bpt>Collections<ept id="p1">](../../mfc/collections.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You must use the <ph id="ph1">`IMPLEMENT_SERIAL`</ph> macro in the implementation of your derived class if you intend to serialize the array.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxcoll.h</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>CObArray::Add</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Adds a new element to the end of an array, growing the array by 1.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CObject`</ph> pointer to be added to this array.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The index of the added element.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">[</bpt>SetSize<ept id="p1">](#cobarray__setsize)</ept> has been used with an <ph id="ph1">`nGrowBy`</ph> value greater than 1, then extra memory may be allocated.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>However, the upper bound will increase by only 1.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObArray::Add`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>CByteArray</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR Add( BYTE<ept id="p1">**</ept> <ph id="ph1">`newElement`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>CDWordArray</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR Add( DWORD<ept id="p1">**</ept> <ph id="ph1">`newElement`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>CPtrArray</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR Add( void<ph id="ph1">\*</ph><ept id="p1">**</ept> <ph id="ph2">`newElement`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>CStringArray</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR Add( LPCTSTR<ept id="p1">**</ept> <ph id="ph1">`newElement`</ph> <bpt id="p2">**</bpt>); throw( CMemoryException<ph id="ph2">\*</ph> );<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR Add(const CString&amp;<ept id="p1">**</ept> <ph id="ph1">`newElement`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>CUIntArray</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR Add( UINT<ept id="p1">**</ept> <ph id="ph1">`newElement`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>CWordArray</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR Add( WORD<ept id="p1">**</ept> <ph id="ph1">`newElement`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class used in all collection examples.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#75</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The results from this program are as follows:</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>CObArray::Append</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Call this member function to add the contents of another array to the end of the given array.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>src</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Source of the elements to be appended to the array.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The index of the first appended element.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The arrays must be of the same type.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>If necessary, <bpt id="p1">**</bpt>Append<ept id="p1">**</ept> may allocate extra memory to accommodate the elements appended to the array.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObArray::Append`</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>CByteArray</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR Append( const CByteArray&amp;<ept id="p1">**</ept> <bpt id="p2">*</bpt>src<ept id="p2">*</ept> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>CDWordArray</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR Append( const CDWordArray&amp;<ept id="p1">**</ept> <bpt id="p2">*</bpt>src<ept id="p2">*</ept> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>CPtrArray</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR Append( const CPtrArray&amp;<ept id="p1">**</ept> <bpt id="p2">*</bpt>src<ept id="p2">*</ept> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>CStringArray</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR Append( const CStringArray&amp;<ept id="p1">**</ept> <bpt id="p2">*</bpt>src<ept id="p2">*</ept> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>CUIntArray</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR Append( const CUIntArray&amp;<ept id="p1">**</ept> <bpt id="p2">*</bpt>src<ept id="p2">*</ept> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>CWordArray</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT_PTR Append( const CWordArray&amp;<ept id="p1">**</ept> <bpt id="p2">*</bpt>src<ept id="p2">*</ept> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class used in all collection examples.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#76</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>CObArray::Copy</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Call this member function to overwrite the elements of the given array with the elements of another array of the same type.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>src</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Source of the elements to be copied to the array.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Copy<ept id="p1">**</ept> does not free memory; however, if necessary, <bpt id="p2">**</bpt>Copy<ept id="p2">**</ept> may allocate extra memory to accommodate the elements copied to the array.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObArray::Copy`</ph>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>CByteArray</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void Copy( const CByteArray&amp;<ept id="p1">**</ept> <bpt id="p2">*</bpt>src<ept id="p2">*</ept> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>CDWordArray</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void Copy( const CDWordArray&amp;<ept id="p1">**</ept> <bpt id="p2">*</bpt>src<ept id="p2">*</ept> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>CPtrArray</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void Copy( const CPtrArray&amp;<ept id="p1">**</ept> <bpt id="p2">*</bpt>src<ept id="p2">*</ept> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>CStringArray</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void Copy( const CStringArray&amp;<ept id="p1">**</ept> <bpt id="p2">*</bpt>src<ept id="p2">*</ept> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>CUIntArray</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void Copy( const CUIntArray&amp;<ept id="p1">**</ept> <bpt id="p2">*</bpt>src<ept id="p2">*</ept> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>CWordArray</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void Copy( const CWordArray&amp;<ept id="p1">**</ept> <bpt id="p2">*</bpt>src<ept id="p2">*</ept> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class used in all collection examples.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#77</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>CObArray::CObArray</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Constructs an empty <ph id="ph1">`CObject`</ph> pointer array.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The array grows one element at a time.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The following table shows other constructors that are similar to <ph id="ph1">`CObArray::CObArray`</ph>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Constructor</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>CByteArray</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>CByteArray( );</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>CDWordArray</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>CDWordArray( );</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>CPtrArray</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>CPtrArray( );</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>CStringArray</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>CStringArray( );</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>CUIntArray</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>CUIntArray( );</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>CWordArray</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>CWordArray( );</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#78</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>CObArray::ElementAt</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Returns a temporary reference to the element pointer within the array.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>An integer index that is greater than or equal to 0 and less than or equal to the value returned by <ph id="ph1">`GetUpperBound`</ph>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>A reference to a <ph id="ph1">`CObject`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>It is used to implement the left-side assignment operator for arrays.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Note that this is an advanced function that should be used only to implement special array operators.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObArray::ElementAt`</ph>.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>CByteArray</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BYTE&amp; ElementAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>CDWordArray</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DWORD&amp; ElementAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>CPtrArray</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void<ph id="ph1">\*</ph>&amp; ElementAt( INT_PTR<ept id="p1">**</ept> <ph id="ph2">`nIndex`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>CStringArray</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CString&amp; ElementAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>CUIntArray</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UINT&amp; ElementAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>CWordArray</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WORD&amp; ElementAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>);<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CObArray::GetSize<ept id="p1">](#cobarray__getsize)</ept>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>CObArray::FreeExtra</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Frees any extra memory that was allocated while the array was grown.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>This function has no effect on the size or upper bound of the array.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObArray::FreeExtra`</ph>.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>CByteArray</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>void FreeExtra( );</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>CDWordArray</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>void FreeExtra( );</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>CPtrArray</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>void FreeExtra( );</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>CStringArray</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>void FreeExtra( );</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>CUIntArray</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>void FreeExtra( );</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>CWordArray</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>void FreeExtra( );</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CObArray::GetData<ept id="p1">](#cobarray__getdata)</ept>.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>CObArray::GetAt</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Returns the array element at the specified index.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>An integer index that is greater than or equal to 0 and less than or equal to the value returned by <ph id="ph1">`GetUpperBound`</ph>.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CObject`</ph> pointer element currently at this index.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Passing a negative value or a value greater than the value returned by <ph id="ph1">`GetUpperBound`</ph> will result in a failed assertion.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObArray::GetAt`</ph>.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>CByteArray</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BYTE GetAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>) const;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>CDWordArray</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DWORD GetAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>) const;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>CPtrArray</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void<ph id="ph1">\*</ph> GetAt( INT_PTR<ept id="p1">**</ept> <ph id="ph2">`nIndex`</ph> <bpt id="p2">**</bpt>) const;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>CStringArray</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CString GetAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>) const;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>CUIntArray</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UINT GetAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>) const;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>CWordArray</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WORD GetAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>) const;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class used in all collection examples.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#79</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>CObArray::GetCount</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Returns the number of array elements.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>The number of items in the array.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Call this method to retrieve the number of elements in the array.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Because indexes are zero-based, the size is 1 greater than the largest index.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObArray::GetCount`</ph>.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>CByteArray</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>INT_PTR GetCount( ) const;</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>CDWordArray</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>INT_PTR GetCount( ) const;</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>CPtrArray</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>INT_PTR GetCount( ) const;</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>CStringArray</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>INT_PTR GetCount( ) const;</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>CUIntArray</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>INT_PTR GetCount( ) const;</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>CWordArray</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>INT_PTR GetCount( ) const;</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class used in all collection examples.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#80</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>CObArray::GetData</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Use this member function to gain direct access to the elements in the array.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>A pointer to the array of <ph id="ph1">`CObject`</ph> pointers.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>If no elements are available, <ph id="ph1">`GetData`</ph> returns a null value.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>While direct access to the elements of an array can help you work more quickly, use caution when calling <ph id="ph1">`GetData`</ph>; any errors you make directly affect the elements of your array.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObArray::GetData`</ph>.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>CByteArray</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>const BYTE<ph id="ph1">\*</ph> GetData( ) const;BYTE<ph id="ph2">\*</ph> GetData( );</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>CDWordArray</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>const DWORD<ph id="ph1">\*</ph> GetData( ) const;DWORD<ph id="ph2">\*</ph> GetData( );</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>CPtrArray</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>const void<ph id="ph1">\*\*</ph> GetData( ) const;void<ph id="ph2">\*\*</ph> GetData( );</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>CStringArray</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>const CString<ph id="ph1">\*</ph> GetData( ) const;CString<ph id="ph2">\*</ph> GetData( );</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>CUIntArray</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>const UINT<ph id="ph1">\*</ph> GetData( ) const;UINT<ph id="ph2">\*</ph> GetData( );</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>CWordArray</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>const WORD<ph id="ph1">\*</ph> GetData( ) const;WORD<ph id="ph2">\*</ph> GetData( );</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class used in all collection examples.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#81</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>CObArray::GetSize</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Returns the size of the array.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Since indexes are zero-based, the size is 1 greater than the largest index.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObArray::GetSize`</ph>.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>CByteArray</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>INT_PTR GetSize( ) const;</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>CDWordArray</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>INT_PTR GetSize( ) const;</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>CPtrArray</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>INT_PTR GetSize( ) const;</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>CStringArray</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>INT_PTR GetSize( ) const;</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>CUIntArray</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>INT_PTR GetSize( ) const;</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>CWordArray</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>INT_PTR GetSize( ) const;</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class used in all collection examples.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#82</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>CObArray::GetUpperBound</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Returns the current upper bound of this array.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>The index of the upper bound (zero-based).</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Because array indexes are zero-based, this function returns a value 1 less than <ph id="ph1">`GetSize`</ph>.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>The condition <bpt id="p1">**</bpt>GetUpperBound( )<ept id="p1">**</ept> = –1 indicates that the array contains no elements.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObArray::GetUpperBound`</ph>.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>CByteArray</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>INT_PTR GetUpperBound( ) const;</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>CDWordArray</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>INT_PTR GetUpperBound( ) const;</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>CPtrArray</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>INT_PTR GetUpperBound( ) const;</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>CStringArray</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>INT_PTR GetUpperBound( ) const;</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>CUIntArray</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>INT_PTR GetUpperBound( ) const;</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>CWordArray</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>INT_PTR GetUpperBound( ) const;</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class used in all collection examples.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#83</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>CObArray::InsertAt</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Inserts an element (or all the elements in another array) at a specified index.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>An integer index that may be greater than the value returned by <ph id="ph1">`GetUpperBound`</ph>.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CObject`</ph> pointer to be placed in this array.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`newElement`</ph> of value <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> is allowed.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>The number of times this element should be inserted (defaults to 1).</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>An integer index that may be greater than the value returned by <ph id="ph1">`GetUpperBound`</ph>.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Another array that contains elements to be added to this array.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>The first version of <ph id="ph1">`InsertAt`</ph> inserts one element (or multiple copies of an element) at a specified index in an array.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>In the process, it shifts up (by incrementing the index) the existing element at this index, and it shifts up all the elements above it.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>The second version inserts all the elements from another <ph id="ph1">`CObArray`</ph> collection, starting at the <ph id="ph2">`nStartIndex`</ph> position.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SetAt`</ph> function, in contrast, replaces one specified array element and does not shift any elements.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObArray::InsertAt`</ph>.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>CByteArray</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void InsertAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>, BYTE<ept id="p2">**</ept> <ph id="ph2">`newElement`</ph> <bpt id="p3">**</bpt>, int<ept id="p3">**</ept> <ph id="ph3">`nCount`</ph> <bpt id="p4">**</bpt>= 1 );<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void InsertAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nStartIndex`</ph> <bpt id="p2">**</bpt>, CByteArray<ph id="ph2">\*</ph><ept id="p2">**</ept> <ph id="ph3">`pNewArray`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>CDWordArray</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void InsertAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>, DWORD<ept id="p2">**</ept> <ph id="ph2">`newElement`</ph> <bpt id="p3">**</bpt>, int<ept id="p3">**</ept> <ph id="ph3">`nCount`</ph> <bpt id="p4">**</bpt>= 1 );<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void InsertAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nStartIndex`</ph> <bpt id="p2">**</bpt>, CDWordArray<ph id="ph2">\*</ph><ept id="p2">**</ept> <ph id="ph3">`pNewArray`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>CPtrArray</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void InsertAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>, void<ph id="ph2">\*</ph><ept id="p2">**</ept> <ph id="ph3">`newElement`</ph> <bpt id="p3">**</bpt>, int<ept id="p3">**</ept> <ph id="ph4">`nCount`</ph> <bpt id="p4">**</bpt>= 1 );<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void InsertAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nStartIndex`</ph> <bpt id="p2">**</bpt>, CPtrArray<ph id="ph2">\*</ph><ept id="p2">**</ept> <ph id="ph3">`pNewArray`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>CStringArray</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void InsertAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>, LPCTSTR<ept id="p2">**</ept> <ph id="ph2">`newElement`</ph> <bpt id="p3">**</bpt>, int<ept id="p3">**</ept> <ph id="ph3">`nCount`</ph> <bpt id="p4">**</bpt>= 1 );<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void InsertAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nStartIndex`</ph> <bpt id="p2">**</bpt>, CStringArray<ph id="ph2">\*</ph><ept id="p2">**</ept> <ph id="ph3">`pNewArray`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>CUIntArray</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void InsertAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>, UINT<ept id="p2">**</ept> <ph id="ph2">`newElement`</ph> <bpt id="p3">**</bpt>, int<ept id="p3">**</ept> <ph id="ph3">`nCount`</ph> <bpt id="p4">**</bpt>= 1 );<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void InsertAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nStartIndex`</ph> <bpt id="p2">**</bpt>, CUIntArray<ph id="ph2">\*</ph><ept id="p2">**</ept> <ph id="ph3">`pNewArray`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>CWordArray</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void InsertAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>, WORD<ept id="p2">**</ept> <ph id="ph2">`newElement`</ph> <bpt id="p3">**</bpt>, int<ept id="p3">**</ept> <ph id="ph3">`nCount`</ph> <bpt id="p4">**</bpt>= 1 );<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void InsertAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nStartIndex`</ph> <bpt id="p2">**</bpt>, CWordArray<ph id="ph2">\*</ph><ept id="p2">**</ept> <ph id="ph3">`pNewArray`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class used in all collection examples.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#84</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>The results from this program are as follows:</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>CObArray::IsEmpty</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Determines if the array is empty.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Nonzero if the array is empty; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>CObArray::operator [ ]</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>These subscript operators are a convenient substitute for the <ph id="ph1">`SetAt`</ph> and <ph id="ph2">`GetAt`</ph> functions.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>The first operator, called for arrays that are not <bpt id="p1">**</bpt>const<ept id="p1">**</ept>, may be used on either the right (r-value) or the left (l-value) of an assignment statement.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>The second, called for <bpt id="p1">**</bpt>const<ept id="p1">**</ept> arrays, may be used only on the right.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>The Debug version of the library asserts if the subscript (either on the left or right side of an assignment statement) is out of bounds.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>The following table shows other operators that are similar to <bpt id="p1">**</bpt>CObArray::operator []<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>Operator</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>CByteArray</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BYTE&amp; operator [](int_ptr<ept id="p1">**</ept> <ph id="ph1">`nindex`</ph> <bpt id="p2">**</bpt><ph id="ph2">\)</ph>;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BYTE operator [](int_ptr<ept id="p1">**</ept> <ph id="ph1">`nindex`</ph> <bpt id="p2">**</bpt><ph id="ph2">\)</ph> const;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>CDWordArray</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DWORD&amp; operator [](int_ptr<ept id="p1">**</ept> <ph id="ph1">`nindex`</ph> <bpt id="p2">**</bpt><ph id="ph2">\)</ph>;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DWORD operator [](int_ptr<ept id="p1">**</ept> <ph id="ph1">`nindex`</ph> <bpt id="p2">**</bpt><ph id="ph2">\)</ph> const;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>CPtrArray</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void<ph id="ph1">\*</ph>&amp; operator [](int_ptr<ept id="p1">**</ept> <ph id="ph2">`nindex`</ph> <bpt id="p2">**</bpt><ph id="ph3">\)</ph>;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void<ph id="ph1">\*</ph> operator [](int_ptr<ept id="p1">**</ept> <ph id="ph2">`nindex`</ph> <bpt id="p2">**</bpt><ph id="ph3">\)</ph> const;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>CStringArray</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CString&amp; operator [](int_ptr<ept id="p1">**</ept> <ph id="ph1">`nindex`</ph> <bpt id="p2">**</bpt><ph id="ph2">\)</ph>;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CString operator [](int_ptr<ept id="p1">**</ept> <ph id="ph1">`nindex`</ph> <bpt id="p2">**</bpt><ph id="ph2">\)</ph> const;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>CUIntArray</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UINT&amp; operator [](int_ptr<ept id="p1">**</ept> <ph id="ph1">`nindex`</ph> <bpt id="p2">**</bpt><ph id="ph2">\)</ph>;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UINT operator [](int_ptr<ept id="p1">**</ept> <ph id="ph1">`nindex`</ph> <bpt id="p2">**</bpt><ph id="ph2">\)</ph> const;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>CWordArray</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WORD&amp; operator [](int_ptr<ept id="p1">**</ept> <ph id="ph1">`nindex`</ph> <bpt id="p2">**</bpt><ph id="ph2">\)</ph>;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WORD operator [](int_ptr<ept id="p1">**</ept> <ph id="ph1">`nindex`</ph> <bpt id="p2">**</bpt><ph id="ph2">\)</ph> const;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class used in all collection examples.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#88</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>CObArray::RemoveAll</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Removes all the pointers from this array but does not actually delete the <ph id="ph1">`CObject`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>If the array is already empty, the function still works.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`RemoveAll`</ph> function frees all memory used for pointer storage.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObArray::RemoveAll`</ph>.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>CByteArray</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>void RemoveAll( );</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>CDWordArray</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>void RemoveAll( );</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>CPtrArray</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>void RemoveAll( );</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>CStringArray</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>void RemoveAll( );</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>CUIntArray</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>void RemoveAll( );</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>CWordArray</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>void RemoveAll( );</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class used in all collection examples.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#85</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>CObArray::RemoveAt</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>Removes one or more elements starting at a specified index in an array.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>An integer index that is greater than or equal to 0 and less than or equal to the value returned by <ph id="ph1">`GetUpperBound`</ph>.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>The number of elements to remove.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>In the process, it shifts down all the elements above the removed element(s).</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>It decrements the upper bound of the array but does not free memory.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>If you try to remove more elements than are contained in the array above the removal point, then the Debug version of the library asserts.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`RemoveAt`</ph> function removes the <ph id="ph2">`CObject`</ph> pointer from the array, but it does not delete the object itself.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObArray::RemoveAt`</ph>.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>CByteArray</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void RemoveAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>, INT_PTR<ept id="p2">**</ept> <ph id="ph2">`nCount`</ph> <bpt id="p3">**</bpt>= 1 );<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>CDWordArray</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void RemoveAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>, INT_PTR<ept id="p2">**</ept> <ph id="ph2">`nCount`</ph> <bpt id="p3">**</bpt>= 1 );<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>CPtrArray</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void RemoveAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>, INT_PTR<ept id="p2">**</ept> <ph id="ph2">`nCount`</ph> <bpt id="p3">**</bpt>= 1 );<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>CStringArray</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void RemoveAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>, INT_PTR<ept id="p2">**</ept> <ph id="ph2">`nCount`</ph> <bpt id="p3">**</bpt>= 1 );<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>CUIntArray</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void RemoveAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>, INT_PTR<ept id="p2">**</ept> <ph id="ph2">`nCount`</ph> <bpt id="p3">**</bpt>= 1 );<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>CWordArray</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void RemoveAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>, INT_PTR<ept id="p2">**</ept> <bpt id="p3">*</bpt>nCount<ept id="p3">*</ept> <bpt id="p4">**</bpt>= 1 );<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class used in all collection examples.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#112</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>The results from this program are as follows:</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>CObArray::SetAt</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>Sets the array element at the specified index.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>An integer index that is greater than or equal to 0 and less than or equal to the value returned by <ph id="ph1">`GetUpperBound`</ph>.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>The object pointer to be inserted in this array.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> value is allowed.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>will not cause the array to grow.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`SetAtGrow`</ph> if you want the array to grow automatically.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>You must ensure that your index value represents a valid position in the array.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>If it is out of bounds, then the Debug version of the library asserts.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObArray::SetAt`</ph>.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>CByteArray</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void SetAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>, BYTE<ept id="p2">**</ept> <ph id="ph2">`newElement`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>CDWordArray</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void SetAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>, DWORD<ept id="p2">**</ept> <ph id="ph2">`newElement`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>CPtrArray</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void SetAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>, void<ph id="ph2">\*</ph><ept id="p2">**</ept> <ph id="ph3">`newElement`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>CStringArray</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void SetAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>, LPCTSTR<ept id="p2">**</ept> <ph id="ph2">`newElement`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>CUIntArray</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void SetAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>, UINT<ept id="p2">**</ept> <ph id="ph2">`newElement`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>CWordArray</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void SetAt( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>, WORD<ept id="p2">**</ept> <ph id="ph2">`newElement`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class used in all collection examples.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#86</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>The results from this program are as follows:</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>CObArray::SetAtGrow</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>Sets the array element at the specified index.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>An integer index that is greater than or equal to 0.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>The object pointer to be added to this array.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> value is allowed.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>The array grows automatically if necessary (that is, the upper bound is adjusted to accommodate the new element).</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObArray::SetAtGrow`</ph>.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>CByteArray</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void SetAtGrow( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>, BYTE<ept id="p2">**</ept> <ph id="ph2">`newElement`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>CDWordArray</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void SetAtGrow( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>, DWORD<ept id="p2">**</ept> <ph id="ph2">`newElement`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>CPtrArray</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void SetAtGrow( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>, void<ph id="ph2">\*</ph><ept id="p2">**</ept> <ph id="ph3">`newElement`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>CStringArray</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void SetAtGrow( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>, LPCTSTR<ept id="p2">**</ept> <ph id="ph2">`newElement`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>CUIntArray</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void SetAtGrow( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>, UINT<ept id="p2">**</ept> <ph id="ph2">`newElement`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>CWordArray</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void SetAtGrow( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nIndex`</ph> <bpt id="p2">**</bpt>, WORD<ept id="p2">**</ept> <ph id="ph2">`newElement`</ph> <bpt id="p3">**</bpt>);<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id="ph1">`CAge`</ph> class used in all collection examples.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#87</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>The results from this program are as follows:</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>CObArray::SetSize</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>Establishes the size of an empty or existing array; allocates memory if necessary.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>The new array size (number of elements).</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>Must be greater than or equal to 0.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>The minimum number of element slots to allocate if a size increase is necessary.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>If the new size is smaller than the old size, then the array is truncated and all unused memory is released.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>For efficiency, call <ph id="ph1">`SetSize`</ph> to set the size of the array before using it.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>This prevents the need to reallocate and copy the array each time an item is added.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nGrowBy`</ph> parameter affects internal memory allocation while the array is growing.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>Its use never affects the array size as reported by <ph id="ph1">`GetSize`</ph> and <ph id="ph2">`GetUpperBound`</ph>.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>If the size of the array has grown, all newly allocated <bpt id="p1">**</bpt>CObject <ph id="ph1">\*</ph><ept id="p1">**</ept> pointers are set to NULL.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>The following table shows other member functions that are similar to <ph id="ph1">`CObArray::SetSize`</ph>.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>CByteArray</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void SetSize( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nNewSize`</ph> <bpt id="p2">**</bpt>, int<ept id="p2">**</ept> <ph id="ph2">`nGrowBy`</ph> <bpt id="p3">**</bpt>= -1 );<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>CDWordArray</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void SetSize( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nNewSize`</ph> <bpt id="p2">**</bpt>, int<ept id="p2">**</ept> <ph id="ph2">`nGrowBy`</ph> <bpt id="p3">**</bpt>= -1 );<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>CPtrArray</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void SetSize( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nNewSize`</ph> <bpt id="p2">**</bpt>, int<ept id="p2">**</ept> <ph id="ph2">`nGrowBy`</ph> <bpt id="p3">**</bpt>= -1 );<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>CStringArray</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void SetSize( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nNewSize`</ph> <bpt id="p2">**</bpt>, int<ept id="p2">**</ept> <ph id="ph2">`nGrowBy`</ph> <bpt id="p3">**</bpt>= -1 );<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>CUIntArray</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void SetSize( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nNewSize`</ph> <bpt id="p2">**</bpt>, int<ept id="p2">**</ept> <ph id="ph2">`nGrowBy`</ph> <bpt id="p3">**</bpt>= -1 );<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>CWordArray</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void SetSize( INT_PTR<ept id="p1">**</ept> <ph id="ph1">`nNewSize`</ph> <bpt id="p2">**</bpt>, int<ept id="p2">**</ept> <ph id="ph2">`nGrowBy`</ph> <bpt id="p3">**</bpt>= -1 );<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>throw( CMemoryException<ph id="ph1">\*</ph> );</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CObArray::GetData<ept id="p1">](#cobarray__getdata)</ept>.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>CObject Class</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>CStringArray Class</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>CPtrArray Class</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>CByteArray Class</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>CWordArray Class</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>CDWordArray Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>