{"nodes":[{"pos":[12,44],"content":"sync_none Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"sync_none Class | Microsoft Docs","pos":[0,32]}]},{"pos":[681,696],"content":"sync_none Class","linkify":"sync_none Class","nodes":[{"content":"sync_none Class","pos":[0,15]}]},{"pos":[697,809],"content":"Describes a <bpt id=\"p1\">[</bpt>synchronization filter<ept id=\"p1\">](../standard-library/allocators-header.md)</ept> that provides no synchronization.","source":"Describes a [synchronization filter](../standard-library/allocators-header.md) that provides no synchronization."},{"pos":[818,824],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[889,899],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[906,915]},{"content":"Description","pos":[916,927]},{"content":"The type of cache associated with the synchronization filter.","pos":[978,1039]},{"content":"This can be <bpt id=\"p1\">[</bpt>cache_chunklist<ept id=\"p1\">](../standard-library/cache-chunklist-class.md)</ept>, <bpt id=\"p2\">[</bpt>cache_freelist<ept id=\"p2\">](../standard-library/cache-freelist-class.md)</ept>, or <bpt id=\"p3\">[</bpt>cache_suballoc<ept id=\"p3\">](../standard-library/cache-suballoc-class.md)</ept>.","pos":[1040,1245],"source":" This can be [cache_chunklist](../standard-library/cache-chunklist-class.md), [cache_freelist](../standard-library/cache-freelist-class.md), or [cache_suballoc](../standard-library/cache-suballoc-class.md)."},{"pos":[1256,1272],"content":"Member Functions","linkify":"Member Functions","nodes":[{"content":"Member Functions","pos":[0,16]}]},{"pos":[1293,1325],"content":"<bpt id=\"p1\">[</bpt>allocate<ept id=\"p1\">](#sync_none__allocate)</ept>","source":"[allocate](#sync_none__allocate)"},{"content":"Allocates a block of memory.","pos":[1326,1354]},{"pos":[1359,1395],"content":"<bpt id=\"p1\">[</bpt>deallocate<ept id=\"p1\">](#sync_none__deallocate)</ept>","source":"[deallocate](#sync_none__deallocate)"},{"content":"Frees a specified number of objects from storage beginning at a specified position.","pos":[1396,1479]},{"pos":[1484,1512],"content":"<bpt id=\"p1\">[</bpt>equals<ept id=\"p1\">](#sync_none__equals)</ept>","source":"[equals](#sync_none__equals)"},{"content":"Compares two caches for equality.","pos":[1513,1546]},{"pos":[1556,1568],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1572,1597],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>allocators&gt;","source":"**Header:** \\<allocators>"},{"pos":[1604,1625],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> stdext","source":"**Namespace:** stdext"},{"pos":[1635,1690],"content":"<bpt id=\"p1\">&lt;a name=\"sync_none__allocate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  sync_none::allocate","linkify":"<a name=\"sync_none__allocate\"></a>  sync_none::allocate","source":"<a name=\"sync_none__allocate\"></a>  sync_none::allocate"},{"content":"Allocates a block of memory.","pos":[1694,1722]},{"pos":[1780,1790],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[1797,1806]},{"content":"Description","pos":[1807,1818]},{"content":"The number of elements in the array to be allocated.","pos":[1869,1921]},{"pos":[1932,1939],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1943,2030],"content":"The member function returns <ph id=\"ph1\">`cache.allocate(count)`</ph>, where <ph id=\"ph2\">`cache`</ph> is the cache object.","source":"The member function returns `cache.allocate(count)`, where `cache` is the cache object."},{"pos":[2040,2099],"content":"<bpt id=\"p1\">&lt;a name=\"sync_none__deallocate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  sync_none::deallocate","linkify":"<a name=\"sync_none__deallocate\"></a>  sync_none::deallocate","source":"<a name=\"sync_none__deallocate\"></a>  sync_none::deallocate"},{"content":"Frees a specified number of objects from storage beginning at a specified position.","pos":[2103,2186]},{"pos":[2256,2266],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[2273,2282]},{"content":"Description","pos":[2283,2294]},{"content":"A pointer to the first object to be deallocated from storage.","pos":[2343,2404]},{"content":"The number of objects to be deallocated from storage.","pos":[2417,2470]},{"pos":[2481,2488],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2492,2592],"content":"The member function calls <ph id=\"ph1\">`cache.deallocate(ptr, count)`</ph>, where <ph id=\"ph2\">`cache`</ph> represents the cache object.","source":"The member function calls `cache.deallocate(ptr, count)`, where `cache` represents the cache object."},{"pos":[2602,2653],"content":"<bpt id=\"p1\">&lt;a name=\"sync_none__equals\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  sync_none::equals","linkify":"<a name=\"sync_none__equals\"></a>  sync_none::equals","source":"<a name=\"sync_none__equals\"></a>  sync_none::equals"},{"content":"Compares two caches for equality.","pos":[2657,2690]},{"pos":[2758,2768],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[2775,2784]},{"content":"Description","pos":[2785,2796]},{"content":"The cache object of the synchronization filter.","pos":[2847,2894]},{"content":"The cache object to compare for equality.","pos":[2907,2948]},{"pos":[2959,2971],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2975,3017],"content":"The member function always returns <ph id=\"ph1\">`true`</ph>.","source":"The member function always returns `true`."},{"pos":[3027,3034],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3043,3051],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3055,3112],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>allocators&gt;<ept id=\"p1\">](../standard-library/allocators-header.md)</ept>","source":"[\\<allocators>](../standard-library/allocators-header.md)"}],"content":"---\ntitle: \"sync_none Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"stdext.sync_none\"\n  - \"sync_none\"\n  - \"allocators/stdext::sync_none\"\n  - \"stdext::sync_none\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"sync_none class\"\nms.assetid: f7473cee-14f3-4fe1-88bc-68cd085e59e1\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# sync_none Class\nDescribes a [synchronization filter](../standard-library/allocators-header.md) that provides no synchronization.  \n  \n## Syntax  \n  \n```\ntemplate <class Cache>  \nclass sync_none\n```  \n  \n#### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`Cache`|The type of cache associated with the synchronization filter. This can be [cache_chunklist](../standard-library/cache-chunklist-class.md), [cache_freelist](../standard-library/cache-freelist-class.md), or [cache_suballoc](../standard-library/cache-suballoc-class.md).|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[allocate](#sync_none__allocate)|Allocates a block of memory.|  \n|[deallocate](#sync_none__deallocate)|Frees a specified number of objects from storage beginning at a specified position.|  \n|[equals](#sync_none__equals)|Compares two caches for equality.|  \n  \n## Requirements  \n **Header:** \\<allocators>  \n  \n **Namespace:** stdext  \n  \n##  <a name=\"sync_none__allocate\"></a>  sync_none::allocate  \n Allocates a block of memory.  \n  \n```\nvoid *allocate(std::size_t count);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`count`|The number of elements in the array to be allocated.|  \n  \n### Remarks  \n The member function returns `cache.allocate(count)`, where `cache` is the cache object.  \n  \n##  <a name=\"sync_none__deallocate\"></a>  sync_none::deallocate  \n Frees a specified number of objects from storage beginning at a specified position.  \n  \n```\nvoid deallocate(void* ptr, std::size_t count);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`ptr`|A pointer to the first object to be deallocated from storage.|  \n|`count`|The number of objects to be deallocated from storage.|  \n  \n### Remarks  \n The member function calls `cache.deallocate(ptr, count)`, where `cache` represents the cache object.  \n  \n##  <a name=\"sync_none__equals\"></a>  sync_none::equals  \n Compares two caches for equality.  \n  \n```\nbool equals(const sync<Cache>& Other) const;\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`Cache`|The cache object of the synchronization filter.|  \n|`Other`|The cache object to compare for equality.|  \n  \n### Return Value  \n The member function always returns `true`.  \n  \n### Remarks  \n  \n## See Also  \n [\\<allocators>](../standard-library/allocators-header.md)\n\n\n\n"}