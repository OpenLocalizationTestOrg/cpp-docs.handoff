{"nodes":[{"pos":[12,71],"content":"-clr (Common Language Runtime Compilation) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"-clr (Common Language Runtime Compilation) | Microsoft Docs","pos":[0,59]}]},{"content":"/clr (Common Language Runtime Compilation)","pos":[970,1012]},{"content":"Enables applications and components to use features from the common language runtime (CLR).","pos":[1013,1104]},{"content":"Syntax","pos":[1113,1119]},{"content":"Arguments","pos":[1160,1169]},{"content":"One or more of the following switches, comma-separated.","pos":[1186,1241]},{"content":"/clr","pos":[1250,1254]},{"content":"Creates metadata for the application.","pos":[1260,1297]},{"content":"The metadata can be consumed by other CLR applications, and enables the application to consume types and data in the metadata of other CLR components.","pos":[1298,1448]},{"content":"For more information, see","pos":[1455,1480]},{"pos":[1487,1583],"content":"<bpt id=\"p1\">[</bpt>Mixed (Native and Managed) Assemblies<ept id=\"p1\">](../../dotnet/mixed-native-and-managed-assemblies.md)</ept> and","source":"[Mixed (Native and Managed) Assemblies](../../dotnet/mixed-native-and-managed-assemblies.md) and"},{"pos":[1590,1655],"content":"<bpt id=\"p1\">[</bpt>How to: Migrate to /clr<ept id=\"p1\">](../../dotnet/how-to-migrate-to-clr.md)</ept>.","source":"[How to: Migrate to /clr](../../dotnet/how-to-migrate-to-clr.md)."},{"content":"/clr:pure","pos":[1664,1673]},{"content":"Produces a Microsoft Intermediate Language (MSIL)-only output file that has no native executable code.","pos":[1679,1781]},{"content":"However, it can contain native types compiled to MSIL.","pos":[1782,1836]},{"pos":[1843,1956],"content":"For more information, see <bpt id=\"p1\">[</bpt>Pure and Verifiable Code (C++/CLI)<ept id=\"p1\">](../../dotnet/pure-and-verifiable-code-cpp-cli.md)</ept>.","source":"For more information, see [Pure and Verifiable Code (C++/CLI)](../../dotnet/pure-and-verifiable-code-cpp-cli.md)."},{"content":"/clr:pure is deprecated.","pos":[1963,1987]},{"content":"A future version of the compiler may not support this option.","pos":[1988,2049]},{"content":"We recommend that you port code that must be pure MSIL to C#.","pos":[2050,2111]},{"content":"/clr:safe","pos":[2120,2129]},{"content":"Produces an MSIL-only (no native executable code), verifiable output file.","pos":[2135,2209]},{"content":"<bpt id=\"p1\">**</bpt>/clr:safe<ept id=\"p1\">**</ept> enables verification diagnostics (<bpt id=\"p2\">[</bpt>PEVerify Tool (Peverify.exe)<ept id=\"p2\">](http://msdn.microsoft.com/Library/f4f46f9e-8d08-4e66-a94b-0c69c9b0bbfa)</ept>).","pos":[2210,2362],"source":"**/clr:safe** enables verification diagnostics ([PEVerify Tool (Peverify.exe)](http://msdn.microsoft.com/Library/f4f46f9e-8d08-4e66-a94b-0c69c9b0bbfa))."},{"pos":[2369,2506],"content":"For more information, see <bpt id=\"p1\">[</bpt>NIB: Writing Verifiably Type-Safe Code<ept id=\"p1\">](http://msdn.microsoft.com/en-us/d18f10ef-3b48-4f47-8726-96714021547b)</ept>.","source":"For more information, see [NIB: Writing Verifiably Type-Safe Code](http://msdn.microsoft.com/en-us/d18f10ef-3b48-4f47-8726-96714021547b)."},{"content":"/clr:safe is deprecated.","pos":[2513,2537]},{"content":"A future version of the compiler may not support this option.","pos":[2538,2599]},{"content":"We recommend that you port code that must be pure, verifiable MSIL to C#.","pos":[2600,2673]},{"content":"/clr:noAssembly","pos":[2682,2697]},{"content":"Specifies that an assembly manifest should not be inserted into the output file.","pos":[2703,2783]},{"content":"By default, the <bpt id=\"p1\">**</bpt>noAssembly<ept id=\"p1\">**</ept> option is not in effect.","pos":[2784,2839],"source":" By default, the **noAssembly** option is not in effect."},{"content":"The <bpt id=\"p1\">**</bpt>noAssembly<ept id=\"p1\">**</ept> option is deprecated.","pos":[2846,2886],"source":"The **noAssembly** option is deprecated."},{"content":"Use <bpt id=\"p1\">[</bpt>/LN (Create MSIL Module)<ept id=\"p1\">](../../build/reference/ln-create-msil-module.md)</ept> instead.","pos":[2887,2974],"source":" Use [/LN (Create MSIL Module)](../../build/reference/ln-create-msil-module.md) instead."},{"content":"A managed program that does not have assembly metadata in the manifest is known as a <bpt id=\"p1\">*</bpt>module<ept id=\"p1\">*</ept>.","pos":[2981,3075],"source":"A managed program that does not have assembly metadata in the manifest is known as a *module*."},{"content":"The <bpt id=\"p1\">**</bpt>noAssembly<ept id=\"p1\">**</ept> option can be used only to produce a module.","pos":[3076,3139],"source":" The **noAssembly** option can be used only to produce a module."},{"content":"If you compile by using <bpt id=\"p1\">[</bpt>/c<ept id=\"p1\">](../../build/reference/c-compile-without-linking.md)</ept> and <bpt id=\"p2\">**</bpt>/clr:noAssembly<ept id=\"p2\">**</ept>, then specify the <bpt id=\"p3\">[</bpt>/NOASSEMBLY<ept id=\"p3\">](../../build/reference/noassembly-create-a-msil-module.md)</ept> option in the linker phase to create a module.","pos":[3140,3381],"source":" If you compile by using [/c](../../build/reference/c-compile-without-linking.md) and **/clr:noAssembly**, then specify the [/NOASSEMBLY](../../build/reference/noassembly-create-a-msil-module.md) option in the linker phase to create a module."},{"content":"Before Visual C++ 2005, <bpt id=\"p1\">**</bpt>/clr:noAssembly<ept id=\"p1\">**</ept> required <bpt id=\"p2\">**</bpt>/LD<ept id=\"p2\">**</ept>.","pos":[3388,3449],"source":"Before Visual C++ 2005, **/clr:noAssembly** required **/LD**."},{"content":"<bpt id=\"p1\">**</bpt>/LD<ept id=\"p1\">**</ept> is now implied when you specify <bpt id=\"p2\">**</bpt>/clr:noAssembly<ept id=\"p2\">**</ept>.","pos":[3450,3510],"source":"**/LD** is now implied when you specify **/clr:noAssembly**."},{"content":"/clr:initialAppDomain","pos":[3519,3540]},{"content":"Enables a <ph id=\"ph1\">[!INCLUDE[vcprvc](../../build/includes/vcprvc_md.md)]</ph> application to run on version 1 of the CLR.","pos":[3546,3653],"source":" Enables a [!INCLUDE[vcprvc](../../build/includes/vcprvc_md.md)] application to run on version 1 of the CLR."},{"content":"If you use <bpt id=\"p1\">**</bpt>initialAppDomain<ept id=\"p1\">**</ept>, then you may see some of the problems that are discussed in <bpt id=\"p2\">[</bpt>BUG: AppDomainUnloaded exception when you use managed extensions for Visual C++ components<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=169465)</ept> on the Microsoft Support Web site.","pos":[3654,3921],"source":" If you use **initialAppDomain**, then you may see some of the problems that are discussed in [BUG: AppDomainUnloaded exception when you use managed extensions for Visual C++ components](http://go.microsoft.com/fwlink/?LinkID=169465) on the Microsoft Support Web site."},{"pos":[3928,4097],"content":"An application that is compiled by using <bpt id=\"p1\">**</bpt>initialAppDomain<ept id=\"p1\">**</ept> should not be used by an application that uses ASP.NET because it is not supported in version 1 of the CLR.","source":"An application that is compiled by using **initialAppDomain** should not be used by an application that uses ASP.NET because it is not supported in version 1 of the CLR."},{"content":"/clr:nostdlib","pos":[4106,4119]},{"content":"Instructs the compiler to ignore the default \\clr directory.","pos":[4125,4185]},{"content":"The compiler produces errors if you are including multiple versions of a DLL such as System.dll.","pos":[4186,4282]},{"content":"Using this option lets you specify the specific framework to use during compilation.","pos":[4283,4367]},{"content":"Remarks","pos":[4376,4383]},{"content":"Managed code is code that can be inspected and managed by the CLR.","pos":[4387,4453]},{"content":"Managed code can access managed objects.","pos":[4454,4494]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>/clr Restrictions<ept id=\"p1\">](../../build/reference/clr-restrictions.md)</ept>.","pos":[4495,4584],"source":" For more information, see [/clr Restrictions](../../build/reference/clr-restrictions.md)."},{"pos":[4591,4790],"content":"For information about how to develop applications that define and consume managed types, see <bpt id=\"p1\">[</bpt>Component Extensions for Runtime Platforms<ept id=\"p1\">](../../windows/component-extensions-for-runtime-platforms.md)</ept>.","source":"For information about how to develop applications that define and consume managed types, see [Component Extensions for Runtime Platforms](../../windows/component-extensions-for-runtime-platforms.md)."},{"pos":[4797,4875],"content":"An application compiled by using <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept> may or may not contain managed data.","source":"An application compiled by using **/clr** may or may not contain managed data."},{"pos":[4882,5039],"content":"To enable debugging on a managed application, see <bpt id=\"p1\">[</bpt>/ASSEMBLYDEBUG (Add DebuggableAttribute)<ept id=\"p1\">](../../build/reference/assemblydebug-add-debuggableattribute.md)</ept>.","source":"To enable debugging on a managed application, see [/ASSEMBLYDEBUG (Add DebuggableAttribute)](../../build/reference/assemblydebug-add-debuggableattribute.md)."},{"content":"Only CLR types will be instantiated on the garbage-collected heap.","pos":[5046,5112]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Classes and Structs<ept id=\"p1\">](../../windows/classes-and-structs-cpp-component-extensions.md)</ept>.","pos":[5113,5224],"source":" For more information, see [Classes and Structs](../../windows/classes-and-structs-cpp-component-extensions.md)."},{"content":"To compile a function to native code, use the <ph id=\"ph1\">`unmanaged`</ph> pragma.","pos":[5225,5290],"source":" To compile a function to native code, use the `unmanaged` pragma."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>managed, unmanaged<ept id=\"p1\">](../../preprocessor/managed-unmanaged.md)</ept>.","pos":[5291,5379],"source":" For more information, see [managed, unmanaged](../../preprocessor/managed-unmanaged.md)."},{"content":"By default, <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept> is not in effect.","pos":[5386,5424],"source":"By default, **/clr** is not in effect."},{"content":"When <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept> is in effect, <bpt id=\"p2\">**</bpt>/MD<ept id=\"p2\">**</ept> is also in effect.","pos":[5425,5479],"source":" When **/clr** is in effect, **/MD** is also in effect."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>/MD, /MT, /LD (Use Run-Time Library)<ept id=\"p1\">](../../build/reference/md-mt-ld-use-run-time-library.md)</ept>.","pos":[5480,5601],"source":" For more information, see [/MD, /MT, /LD (Use Run-Time Library)](../../build/reference/md-mt-ld-use-run-time-library.md)."},{"content":"<bpt id=\"p1\">**</bpt>/MD<ept id=\"p1\">**</ept> ensures that the dynamically linked, multithreaded versions of the runtime routines are selected from the standard header (.h) files.","pos":[5602,5743],"source":"**/MD** ensures that the dynamically linked, multithreaded versions of the runtime routines are selected from the standard header (.h) files."},{"content":"Multithreading is required for managed programming because the CLR garbage collector runs finalizers in an auxiliary thread.","pos":[5744,5868]},{"pos":[5875,6072],"content":"If you compile by using <bpt id=\"p1\">**</bpt>/c<ept id=\"p1\">**</ept>, you can specify the CLR type (IJW, safe, or pure) of the resulting output file with <bpt id=\"p2\">[</bpt>/CLRIMAGETYPE<ept id=\"p2\">](../../build/reference/clrimagetype-specify-type-of-clr-image.md)</ept>.","source":"If you compile by using **/c**, you can specify the CLR type (IJW, safe, or pure) of the resulting output file with [/CLRIMAGETYPE](../../build/reference/clrimagetype-specify-type-of-clr-image.md)."},{"content":"<bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept> implies <bpt id=\"p2\">**</bpt>/EHa<ept id=\"p2\">**</ept>, and no other <bpt id=\"p3\">**</bpt>/EH<ept id=\"p3\">**</ept> options are supported for <bpt id=\"p4\">**</bpt>/clr<ept id=\"p4\">**</ept>.","pos":[6079,6162],"source":"**/clr** implies **/EHa**, and no other **/EH** options are supported for **/clr**."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>/EH (Exception Handling Model)<ept id=\"p1\">](../../build/reference/eh-exception-handling-model.md)</ept>.","pos":[6163,6276],"source":" For more information, see [/EH (Exception Handling Model)](../../build/reference/eh-exception-handling-model.md)."},{"pos":[6283,6405],"content":"For information about how to determine the CLR image type of a file, see <bpt id=\"p1\">[</bpt>/CLRHEADER<ept id=\"p1\">](../../build/reference/clrheader.md)</ept>.","source":"For information about how to determine the CLR image type of a file, see [/CLRHEADER](../../build/reference/clrheader.md)."},{"pos":[6412,6556],"content":"All modules passed to a given invocation of the linker must be compiled by using the same run-time library compiler option (<bpt id=\"p1\">**</bpt>/MD<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>/LD<ept id=\"p2\">**</ept>).","source":"All modules passed to a given invocation of the linker must be compiled by using the same run-time library compiler option (**/MD** or **/LD**)."},{"content":"Use the <bpt id=\"p1\">[</bpt>/ASSEMBLYRESOURCE<ept id=\"p1\">](../../build/reference/assemblyresource-embed-a-managed-resource.md)</ept> linker option to embed a resource in an assembly.","pos":[6563,6708],"source":"Use the [/ASSEMBLYRESOURCE](../../build/reference/assemblyresource-embed-a-managed-resource.md) linker option to embed a resource in an assembly."},{"content":"<bpt id=\"p1\">[</bpt>/DELAYSIGN<ept id=\"p1\">](../../build/reference/delaysign-partially-sign-an-assembly.md)</ept>, <bpt id=\"p2\">[</bpt>/KEYCONTAINER<ept id=\"p2\">](../../build/reference/keycontainer-specify-a-key-container-to-sign-an-assembly.md)</ept>, and <bpt id=\"p3\">[</bpt>/KEYFILE<ept id=\"p3\">](../../build/reference/keyfile-specify-key-or-key-pair-to-sign-an-assembly.md)</ept> linker options also let you customize how an assembly is created.","pos":[6709,7044],"source":"[/DELAYSIGN](../../build/reference/delaysign-partially-sign-an-assembly.md), [/KEYCONTAINER](../../build/reference/keycontainer-specify-a-key-container-to-sign-an-assembly.md), and [/KEYFILE](../../build/reference/keyfile-specify-key-or-key-pair-to-sign-an-assembly.md) linker options also let you customize how an assembly is created."},{"content":"When <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept> is used, the <ph id=\"ph1\">`_MANAGED`</ph> symbol is defined to be 1.","pos":[7051,7115],"source":"When **/clr** is used, the `_MANAGED` symbol is defined to be 1."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Predefined Macros<ept id=\"p1\">](../../preprocessor/predefined-macros.md)</ept>.","pos":[7116,7203],"source":" For more information, see [Predefined Macros](../../preprocessor/predefined-macros.md)."},{"content":"The global variables in a native object file are initialized first (during DllMain if the executable is a DLL), and then the global variables in the managed section are initialized (before any managed code is run).","pos":[7210,7424]},{"content":"<bpt id=\"p1\">[</bpt>init_seg<ept id=\"p1\">](../../preprocessor/init-seg.md)</ept> only affects the order of initialization in the managed and unmanaged categories.","pos":[7434,7558],"source":"[init_seg](../../preprocessor/init-seg.md) only affects the order of initialization in the managed and unmanaged categories."},{"pos":[7565,7762],"content":"Compiling by using <bpt id=\"p1\">**</bpt>/clr:safe<ept id=\"p1\">**</ept> is analogous to compiling by using <bpt id=\"p2\">[</bpt>/platform:anycpu<ept id=\"p2\">](/dotnet/articles/csharp/language-reference/compiler-options/platform-compiler-option)</ept> in languages such as C#.","source":"Compiling by using **/clr:safe** is analogous to compiling by using [/platform:anycpu](/dotnet/articles/csharp/language-reference/compiler-options/platform-compiler-option) in languages such as C#."},{"content":"Safe and Pure Images","pos":[7771,7791]},{"content":"A pure image uses a CLR version of the C run-time (CRT) library.","pos":[7795,7859]},{"content":"However, the CRT is not verifiable, so you cannot use the CRT when you compile by using <bpt id=\"p1\">**</bpt>/clr:safe<ept id=\"p1\">**</ept>.","pos":[7860,7962],"source":" However, the CRT is not verifiable, so you cannot use the CRT when you compile by using **/clr:safe**."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT Library Features<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept>.","pos":[7963,8061],"source":" For more information, see [CRT Library Features](../../c-runtime-library/crt-library-features.md)."},{"pos":[8068,8267],"content":"Examples of native code that cannot appear in a pure image include inline assembly, <bpt id=\"p1\">[</bpt>setjmp<ept id=\"p1\">](../../c-runtime-library/reference/setjmp.md)</ept>, and <bpt id=\"p2\">[</bpt>longjmp<ept id=\"p2\">](../../c-runtime-library/reference/longjmp.md)</ept>.","source":"Examples of native code that cannot appear in a pure image include inline assembly, [setjmp](../../c-runtime-library/reference/setjmp.md), and [longjmp](../../c-runtime-library/reference/longjmp.md)."},{"content":"Every entry point of a pure or safe image is managed.","pos":[8274,8327]},{"content":"When you compile by using <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept>, the entry point is native.","pos":[8328,8390],"source":" When you compile by using **/clr**, the entry point is native."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>__clrcall<ept id=\"p1\">](../../cpp/clrcall.md)</ept>.","pos":[8391,8451],"source":" For more information, see [__clrcall](../../cpp/clrcall.md)."},{"content":"When you compile by using <bpt id=\"p1\">**</bpt>/clr:safe<ept id=\"p1\">**</ept>, by default, variables are <bpt id=\"p2\">[</bpt>appdomain<ept id=\"p2\">](../../cpp/appdomain.md)</ept> and cannot be per-process.","pos":[8458,8587],"source":"When you compile by using **/clr:safe**, by default, variables are [appdomain](../../cpp/appdomain.md) and cannot be per-process."},{"content":"For <bpt id=\"p1\">**</bpt>/clr:pure<ept id=\"p1\">**</ept>, although <bpt id=\"p2\">**</bpt>appdomain<ept id=\"p2\">**</ept> is the default, you can use <bpt id=\"p3\">[</bpt>process<ept id=\"p3\">](../../cpp/process.md)</ept> variables.","pos":[8588,8700],"source":" For **/clr:pure**, although **appdomain** is the default, you can use [process](../../cpp/process.md) variables."},{"content":"When running a 32-bit .exe file that was compiled by using <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>/clr:pure<ept id=\"p2\">**</ept> on a 64-bit operating system, the application will be run under WOW64, which enables a 32-bit application to run on the 32-bit CLR on a 64-bit operating system.","pos":[8707,8952],"source":"When running a 32-bit .exe file that was compiled by using **/clr** or **/clr:pure** on a 64-bit operating system, the application will be run under WOW64, which enables a 32-bit application to run on the 32-bit CLR on a 64-bit operating system."},{"content":"By default, an .exe file that is compiled by using <bpt id=\"p1\">**</bpt>/clr:safe<ept id=\"p1\">**</ept> will be run on the 64-bit CLR on a computer that is running a 64-bit operating system.","pos":[8953,9104],"source":" By default, an .exe file that is compiled by using **/clr:safe** will be run on the 64-bit CLR on a computer that is running a 64-bit operating system."},{"content":"(On a 32-bit operating system, the same .exe file would run on the 32-bit CLR.) However, a safe application could load a 32-bit component.","pos":[9105,9243]},{"content":"In that case, a safe image running under operating system 64-bit support will fail when it loads the 32-bit application (BadFormatException).","pos":[9244,9385]},{"content":"To ensure that a safe image continues to run when it loads a 32-bit image on a 64-bit operating system, you must use <bpt id=\"p1\">[</bpt>/CLRIMAGETYPE<ept id=\"p1\">](../../build/reference/clrimagetype-specify-type-of-clr-image.md)</ept> to change the metadata (.corflags), and mark it to be run under WOW64.","pos":[9386,9654],"source":" To ensure that a safe image continues to run when it loads a 32-bit image on a 64-bit operating system, you must use [/CLRIMAGETYPE](../../build/reference/clrimagetype-specify-type-of-clr-image.md) to change the metadata (.corflags), and mark it to be run under WOW64."},{"content":"The following command line is an example.","pos":[9655,9696]},{"content":"(Substitute your own entry symbol.)","pos":[9697,9732]},{"content":"cl /clr:safe t.cpp /link /clrimagetype:pure /entry:?main@@$$HYMHXZ /subsystem:console","pos":[9741,9826]},{"content":"For information about how to get a decorated name, see <bpt id=\"p1\">[</bpt>Decorated Names<ept id=\"p1\">](../../build/reference/decorated-names.md)</ept>.","pos":[9835,9950],"source":"For information about how to get a decorated name, see [Decorated Names](../../build/reference/decorated-names.md)."},{"content":"For more information about 64-bit programming, see <bpt id=\"p1\">[</bpt>Configuring Programs for 64-Bit<ept id=\"p1\">](../../build/configuring-programs-for-64-bit-visual-cpp.md)</ept>.","pos":[9951,10095],"source":" For more information about 64-bit programming, see [Configuring Programs for 64-Bit](../../build/configuring-programs-for-64-bit-visual-cpp.md)."},{"content":"For information about using pure CLR code, see <bpt id=\"p1\">[</bpt>How to: Migrate to /clr:pure (C++/CLI)<ept id=\"p1\">](../../dotnet/how-to-migrate-to-clr-pure-cpp-cli.md)</ept> and <bpt id=\"p2\">[</bpt>Pure and Verifiable Code (C++/CLI)<ept id=\"p2\">](../../dotnet/pure-and-verifiable-code-cpp-cli.md)</ept>.","pos":[10096,10327],"source":" For information about using pure CLR code, see [How to: Migrate to /clr:pure (C++/CLI)](../../dotnet/how-to-migrate-to-clr-pure-cpp-cli.md) and [Pure and Verifiable Code (C++/CLI)](../../dotnet/pure-and-verifiable-code-cpp-cli.md)."},{"content":"Metadata and Unnamed Classes","pos":[10336,10364]},{"content":"Unnamed classes will appear in metadata named as follows: <ph id=\"ph1\">`$UnnamedClass$`</ph><bpt id=\"p1\">*</bpt>crc-of-current-file-name<ept id=\"p1\">*</ept><ph id=\"ph2\">`$`</ph><bpt id=\"p2\">*</bpt>index<ept id=\"p2\">*</ept><ph id=\"ph3\">`$`</ph>, where <bpt id=\"p3\">*</bpt>index<ept id=\"p3\">*</ept> is a sequential count of the unnamed classes in the compilation.","pos":[10368,10561],"source":"Unnamed classes will appear in metadata named as follows: `$UnnamedClass$`*crc-of-current-file-name*`$`*index*`$`, where *index* is a sequential count of the unnamed classes in the compilation."},{"content":"For example, the following code sample generates an unnamed class in metadata.","pos":[10562,10640]},{"content":"Use ildasm.exe to view metadata.","pos":[10735,10767]},{"content":"Managed Extensions for C++","pos":[10776,10802]},{"content":"Visual C++ no longer supports the <bpt id=\"p1\">**</bpt>/clr:oldsyntax<ept id=\"p1\">**</ept> option.","pos":[10806,10866],"source":"Visual C++ no longer supports the **/clr:oldsyntax** option."},{"content":"This option was deprecated in Visual Studio 2005.","pos":[10867,10916]},{"content":"The supported syntax for writing managed code in C++ is C++/CLI.","pos":[10917,10981]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Component Extensions for Runtime Platforms<ept id=\"p1\">](../../windows/component-extensions-for-runtime-platforms.md)</ept>.","pos":[10982,11114],"source":" For more information, see [Component Extensions for Runtime Platforms](../../windows/component-extensions-for-runtime-platforms.md)."},{"content":"If you have code that uses Managed Extensions for C++, we recommend that you port it to use C++/CLI syntax.","pos":[11121,11228]},{"content":"For information on how to port your code, see <bpt id=\"p1\">[</bpt>C++/CLI Migration Primer<ept id=\"p1\">](../../dotnet/cpp-cli-migration-primer.md)</ept>.","pos":[11229,11344],"source":" For information on how to port your code, see [C++/CLI Migration Primer](../../dotnet/cpp-cli-migration-primer.md)."},{"content":"To set this compiler option in Visual Studio","pos":[11355,11399]},{"pos":[11409,11545],"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click the project name, and then click <bpt id=\"p2\">**</bpt>Properties<ept id=\"p2\">**</ept> to open the project <bpt id=\"p3\">**</bpt>Property Pages<ept id=\"p3\">**</ept> dialog box.","source":"In **Solution Explorer**, right-click the project name, and then click **Properties** to open the project **Property Pages** dialog box."},{"pos":[11555,11602],"content":"Select the <bpt id=\"p1\">**</bpt>Configuration Properties<ept id=\"p1\">**</ept> folder.","source":"Select the **Configuration Properties** folder."},{"pos":[11612,11702],"content":"On the <bpt id=\"p1\">**</bpt>General<ept id=\"p1\">**</ept> property page, modify the <bpt id=\"p2\">**</bpt>Common Language Runtime support<ept id=\"p2\">**</ept> property.","source":"On the **General** property page, modify the **Common Language Runtime support** property."},{"pos":[11714,11979],"content":"[!NOTE]\n When **/clr** is enabled in the **Property Pages** dialog box, compiler option properties that are not compatible with **/clr** are also adjusted, as required. For example, if **/RTC** is set and then **/clr** is enabled, **/RTC** will be turned off.","leadings":["","    > "],"nodes":[{"content":" When **/clr** is enabled in the **Property Pages** dialog box, compiler option properties that are not compatible with **/clr** are also adjusted, as required. For example, if **/RTC** is set and then **/clr** is enabled, **/RTC** will be turned off.","pos":[8,259],"nodes":[{"content":"When <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept> is enabled in the <bpt id=\"p2\">**</bpt>Property Pages<ept id=\"p2\">**</ept> dialog box, compiler option properties that are not compatible with <bpt id=\"p3\">**</bpt>/clr<ept id=\"p3\">**</ept> are also adjusted, as required.","pos":[1,160],"source":" When **/clr** is enabled in the **Property Pages** dialog box, compiler option properties that are not compatible with **/clr** are also adjusted, as required."},{"content":"For example, if <bpt id=\"p1\">**</bpt>/RTC<ept id=\"p1\">**</ept> is set and then <bpt id=\"p2\">**</bpt>/clr<ept id=\"p2\">**</ept> is enabled, <bpt id=\"p3\">**</bpt>/RTC<ept id=\"p3\">**</ept> will be turned off.","pos":[161,251],"source":" For example, if **/RTC** is set and then **/clr** is enabled, **/RTC** will be turned off."}]}]},{"content":"Also, when you debug a <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept> application, set the <bpt id=\"p2\">**</bpt>Debugger Type<ept id=\"p2\">**</ept> property to <bpt id=\"p3\">**</bpt>Mixed<ept id=\"p3\">**</ept> or <bpt id=\"p4\">**</bpt>Managed only<ept id=\"p4\">**</ept>.","pos":[11998,12111],"source":"Also, when you debug a **/clr** application, set the **Debugger Type** property to **Mixed** or **Managed only**."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Project Settings for a C++ Debug Configuration<ept id=\"p1\">](/visualstudio/debugger/project-settings-for-a-cpp-debug-configuration)</ept>.","pos":[12112,12258],"source":" For more information, see [Project Settings for a C++ Debug Configuration](/visualstudio/debugger/project-settings-for-a-cpp-debug-configuration)."},{"pos":[12269,12415],"content":"For information about how the create a module, see <bpt id=\"p1\">[</bpt>/NOASSEMBLY (Create a MSIL Module)<ept id=\"p1\">](../../build/reference/noassembly-create-a-msil-module.md)</ept>.","source":"For information about how the create a module, see [/NOASSEMBLY (Create a MSIL Module)](../../build/reference/noassembly-create-a-msil-module.md)."},{"content":"To set this compiler option programmatically","pos":[12426,12470]},{"content":"See &lt;xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.CompileAsManaged%2A&gt;.","pos":[12480,12567],"source":"See <xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.CompileAsManaged%2A>."},{"content":"See Also","pos":[12576,12584]},{"content":"Compiler Options","pos":[12589,12605]},{"content":"Setting Compiler Options","pos":[12655,12679]}],"content":"---\ntitle: \"-clr (Common Language Runtime Compilation) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"/CLR\"\n  - \"VC.Project.VCNMakeTool.CompileAsManaged\"\n  - \"VC.Project.VCCLCompilerTool.CompileAsManaged\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"cl.exe compiler, common language runtime option\"\n  - \"-clr compiler option [C++]\"\n  - \"clr compiler option [C++]\"\n  - \"/clr compiler option [C++]\"\n  - \"Managed Extensions for C++, compiling\"\n  - \"common language runtime, /clr compiler option\"\nms.assetid: fec5a8c0-40ec-484c-a213-8dec918c1d6c\ncaps.latest.revision: 72\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# /clr (Common Language Runtime Compilation)\nEnables applications and components to use features from the common language runtime (CLR).  \n  \n## Syntax  \n  \n```  \n/clr[:options]  \n```  \n  \n## Arguments  \n `options`  \n One or more of the following switches, comma-separated.  \n  \n **/clr**  \n Creates metadata for the application. The metadata can be consumed by other CLR applications, and enables the application to consume types and data in the metadata of other CLR components.  \n  \n For more information, see  \n  \n [Mixed (Native and Managed) Assemblies](../../dotnet/mixed-native-and-managed-assemblies.md) and  \n  \n [How to: Migrate to /clr](../../dotnet/how-to-migrate-to-clr.md).  \n  \n **/clr:pure**  \n Produces a Microsoft Intermediate Language (MSIL)-only output file that has no native executable code. However, it can contain native types compiled to MSIL.  \n  \n For more information, see [Pure and Verifiable Code (C++/CLI)](../../dotnet/pure-and-verifiable-code-cpp-cli.md).  \n  \n /clr:pure is deprecated. A future version of the compiler may not support this option. We recommend that you port code that must be pure MSIL to C#.  \n  \n **/clr:safe**  \n Produces an MSIL-only (no native executable code), verifiable output file. **/clr:safe** enables verification diagnostics ([PEVerify Tool (Peverify.exe)](http://msdn.microsoft.com/Library/f4f46f9e-8d08-4e66-a94b-0c69c9b0bbfa)).  \n  \n For more information, see [NIB: Writing Verifiably Type-Safe Code](http://msdn.microsoft.com/en-us/d18f10ef-3b48-4f47-8726-96714021547b).  \n  \n /clr:safe is deprecated. A future version of the compiler may not support this option. We recommend that you port code that must be pure, verifiable MSIL to C#.  \n  \n **/clr:noAssembly**  \n Specifies that an assembly manifest should not be inserted into the output file. By default, the **noAssembly** option is not in effect.  \n  \n The **noAssembly** option is deprecated. Use [/LN (Create MSIL Module)](../../build/reference/ln-create-msil-module.md) instead.  \n  \n A managed program that does not have assembly metadata in the manifest is known as a *module*. The **noAssembly** option can be used only to produce a module. If you compile by using [/c](../../build/reference/c-compile-without-linking.md) and **/clr:noAssembly**, then specify the [/NOASSEMBLY](../../build/reference/noassembly-create-a-msil-module.md) option in the linker phase to create a module.  \n  \n Before Visual C++ 2005, **/clr:noAssembly** required **/LD**. **/LD** is now implied when you specify **/clr:noAssembly**.  \n  \n **/clr:initialAppDomain**  \n Enables a [!INCLUDE[vcprvc](../../build/includes/vcprvc_md.md)] application to run on version 1 of the CLR. If you use **initialAppDomain**, then you may see some of the problems that are discussed in [BUG: AppDomainUnloaded exception when you use managed extensions for Visual C++ components](http://go.microsoft.com/fwlink/?LinkID=169465) on the Microsoft Support Web site.  \n  \n An application that is compiled by using **initialAppDomain** should not be used by an application that uses ASP.NET because it is not supported in version 1 of the CLR.  \n  \n **/clr:nostdlib**  \n Instructs the compiler to ignore the default \\clr directory. The compiler produces errors if you are including multiple versions of a DLL such as System.dll. Using this option lets you specify the specific framework to use during compilation.  \n  \n## Remarks  \n Managed code is code that can be inspected and managed by the CLR. Managed code can access managed objects. For more information, see [/clr Restrictions](../../build/reference/clr-restrictions.md).  \n  \n For information about how to develop applications that define and consume managed types, see [Component Extensions for Runtime Platforms](../../windows/component-extensions-for-runtime-platforms.md).  \n  \n An application compiled by using **/clr** may or may not contain managed data.  \n  \n To enable debugging on a managed application, see [/ASSEMBLYDEBUG (Add DebuggableAttribute)](../../build/reference/assemblydebug-add-debuggableattribute.md).  \n  \n Only CLR types will be instantiated on the garbage-collected heap. For more information, see [Classes and Structs](../../windows/classes-and-structs-cpp-component-extensions.md). To compile a function to native code, use the `unmanaged` pragma. For more information, see [managed, unmanaged](../../preprocessor/managed-unmanaged.md).  \n  \n By default, **/clr** is not in effect. When **/clr** is in effect, **/MD** is also in effect. For more information, see [/MD, /MT, /LD (Use Run-Time Library)](../../build/reference/md-mt-ld-use-run-time-library.md). **/MD** ensures that the dynamically linked, multithreaded versions of the runtime routines are selected from the standard header (.h) files. Multithreading is required for managed programming because the CLR garbage collector runs finalizers in an auxiliary thread.  \n  \n If you compile by using **/c**, you can specify the CLR type (IJW, safe, or pure) of the resulting output file with [/CLRIMAGETYPE](../../build/reference/clrimagetype-specify-type-of-clr-image.md).  \n  \n **/clr** implies **/EHa**, and no other **/EH** options are supported for **/clr**. For more information, see [/EH (Exception Handling Model)](../../build/reference/eh-exception-handling-model.md).  \n  \n For information about how to determine the CLR image type of a file, see [/CLRHEADER](../../build/reference/clrheader.md).  \n  \n All modules passed to a given invocation of the linker must be compiled by using the same run-time library compiler option (**/MD** or **/LD**).  \n  \n Use the [/ASSEMBLYRESOURCE](../../build/reference/assemblyresource-embed-a-managed-resource.md) linker option to embed a resource in an assembly. [/DELAYSIGN](../../build/reference/delaysign-partially-sign-an-assembly.md), [/KEYCONTAINER](../../build/reference/keycontainer-specify-a-key-container-to-sign-an-assembly.md), and [/KEYFILE](../../build/reference/keyfile-specify-key-or-key-pair-to-sign-an-assembly.md) linker options also let you customize how an assembly is created.  \n  \n When **/clr** is used, the `_MANAGED` symbol is defined to be 1. For more information, see [Predefined Macros](../../preprocessor/predefined-macros.md).  \n  \n The global variables in a native object file are initialized first (during DllMain if the executable is a DLL), and then the global variables in the managed section are initialized (before any managed code is run). `#pragma`[init_seg](../../preprocessor/init-seg.md) only affects the order of initialization in the managed and unmanaged categories.  \n  \n Compiling by using **/clr:safe** is analogous to compiling by using [/platform:anycpu](/dotnet/articles/csharp/language-reference/compiler-options/platform-compiler-option) in languages such as C#.  \n  \n## Safe and Pure Images  \n A pure image uses a CLR version of the C run-time (CRT) library. However, the CRT is not verifiable, so you cannot use the CRT when you compile by using **/clr:safe**. For more information, see [CRT Library Features](../../c-runtime-library/crt-library-features.md).  \n  \n Examples of native code that cannot appear in a pure image include inline assembly, [setjmp](../../c-runtime-library/reference/setjmp.md), and [longjmp](../../c-runtime-library/reference/longjmp.md).  \n  \n Every entry point of a pure or safe image is managed. When you compile by using **/clr**, the entry point is native. For more information, see [__clrcall](../../cpp/clrcall.md).  \n  \n When you compile by using **/clr:safe**, by default, variables are [appdomain](../../cpp/appdomain.md) and cannot be per-process. For **/clr:pure**, although **appdomain** is the default, you can use [process](../../cpp/process.md) variables.  \n  \n When running a 32-bit .exe file that was compiled by using **/clr** or **/clr:pure** on a 64-bit operating system, the application will be run under WOW64, which enables a 32-bit application to run on the 32-bit CLR on a 64-bit operating system. By default, an .exe file that is compiled by using **/clr:safe** will be run on the 64-bit CLR on a computer that is running a 64-bit operating system. (On a 32-bit operating system, the same .exe file would run on the 32-bit CLR.) However, a safe application could load a 32-bit component. In that case, a safe image running under operating system 64-bit support will fail when it loads the 32-bit application (BadFormatException). To ensure that a safe image continues to run when it loads a 32-bit image on a 64-bit operating system, you must use [/CLRIMAGETYPE](../../build/reference/clrimagetype-specify-type-of-clr-image.md) to change the metadata (.corflags), and mark it to be run under WOW64. The following command line is an example. (Substitute your own entry symbol.)  \n  \n **cl /clr:safe t.cpp /link /clrimagetype:pure /entry:?main@@$$HYMHXZ /subsystem:console**  \n  \n For information about how to get a decorated name, see [Decorated Names](../../build/reference/decorated-names.md). For more information about 64-bit programming, see [Configuring Programs for 64-Bit](../../build/configuring-programs-for-64-bit-visual-cpp.md). For information about using pure CLR code, see [How to: Migrate to /clr:pure (C++/CLI)](../../dotnet/how-to-migrate-to-clr-pure-cpp-cli.md) and [Pure and Verifiable Code (C++/CLI)](../../dotnet/pure-and-verifiable-code-cpp-cli.md).  \n  \n## Metadata and Unnamed Classes  \n Unnamed classes will appear in metadata named as follows: `$UnnamedClass$`*crc-of-current-file-name*`$`*index*`$`, where *index* is a sequential count of the unnamed classes in the compilation. For example, the following code sample generates an unnamed class in metadata.  \n  \n```  \n// clr_unnamed_class.cpp  \n// compile by using: /clr /LD  \nclass {} x;  \n```  \n  \n Use ildasm.exe to view metadata.  \n  \n## Managed Extensions for C++  \n Visual C++ no longer supports the **/clr:oldsyntax** option. This option was deprecated in Visual Studio 2005. The supported syntax for writing managed code in C++ is C++/CLI. For more information, see [Component Extensions for Runtime Platforms](../../windows/component-extensions-for-runtime-platforms.md).  \n  \n If you have code that uses Managed Extensions for C++, we recommend that you port it to use C++/CLI syntax. For information on how to port your code, see [C++/CLI Migration Primer](../../dotnet/cpp-cli-migration-primer.md).  \n  \n#### To set this compiler option in Visual Studio  \n  \n1.  In **Solution Explorer**, right-click the project name, and then click **Properties** to open the project **Property Pages** dialog box.  \n  \n2.  Select the **Configuration Properties** folder.  \n  \n3.  On the **General** property page, modify the **Common Language Runtime support** property.  \n  \n    > [!NOTE]\n    >  When **/clr** is enabled in the **Property Pages** dialog box, compiler option properties that are not compatible with **/clr** are also adjusted, as required. For example, if **/RTC** is set and then **/clr** is enabled, **/RTC** will be turned off.  \n    >   \n    >  Also, when you debug a **/clr** application, set the **Debugger Type** property to **Mixed** or **Managed only**. For more information, see [Project Settings for a C++ Debug Configuration](/visualstudio/debugger/project-settings-for-a-cpp-debug-configuration).  \n  \n     For information about how the create a module, see [/NOASSEMBLY (Create a MSIL Module)](../../build/reference/noassembly-create-a-msil-module.md).  \n  \n#### To set this compiler option programmatically  \n  \n-   See <xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.CompileAsManaged%2A>.  \n  \n## See Also  \n [Compiler Options](../../build/reference/compiler-options.md)   \n [Setting Compiler Options](../../build/reference/setting-compiler-options.md)"}