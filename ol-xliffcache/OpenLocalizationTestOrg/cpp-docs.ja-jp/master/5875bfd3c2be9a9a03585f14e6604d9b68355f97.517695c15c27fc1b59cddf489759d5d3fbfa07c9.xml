{"nodes":[{"pos":[12,39],"content":"Algorithms | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Algorithms | Microsoft Docs","pos":[0,27]}]},{"content":"Algorithms","pos":[755,765]},{"content":"Algorithms are a fundamental part of the Standard Template Library.","pos":[766,833]},{"content":"Algorithms do not work with containers themselves but rather with iterators.","pos":[834,910]},{"content":"Therefore, the same algorithm can be used by most if not all of the STL containers.","pos":[911,994]},{"content":"This section discusses the conventions and terminology of the STL algorithms.","pos":[995,1072]},{"content":"Remarks","pos":[1081,1088]},{"content":"The descriptions of the algorithm template functions employ several shorthand phrases:","pos":[1092,1178]},{"pos":[1188,1561],"content":"The phrase \"in the range [<bpt id=\"p1\">*</bpt>A<ept id=\"p1\">*</ept>, <bpt id=\"p2\">*</bpt>B<ept id=\"p2\">*</ept>)\" means the sequence of zero or more discrete values beginning with <bpt id=\"p3\">*</bpt>A<ept id=\"p3\">*</ept> up to but not including <bpt id=\"p4\">*</bpt>B<ept id=\"p4\">*</ept>. A range is valid only if <bpt id=\"p5\">*</bpt>B<ept id=\"p5\">*</ept> is reachable from <bpt id=\"p6\">*</bpt>A;<ept id=\"p6\">*</ept> you can store <bpt id=\"p7\">*</bpt>A<ept id=\"p7\">*</ept> in an object <bpt id=\"p8\">*</bpt>N<ept id=\"p8\">*</ept> (<bpt id=\"p9\">*</bpt>N<ept id=\"p9\">*</ept><ph id=\"ph1\"> = </ph><bpt id=\"p10\">*</bpt>A<ept id=\"p10\">*</ept>), increment the object zero or more times (++<bpt id=\"p11\">*</bpt>N<ept id=\"p11\">*</ept>), and have the object compare equal to <bpt id=\"p12\">*</bpt>B<ept id=\"p12\">*</ept> after a finite number of increments (N == B<bpt id=\"p13\">*</bpt>).<ept id=\"p13\">*</ept>","source":"The phrase \"in the range [*A*, *B*)\" means the sequence of zero or more discrete values beginning with *A* up to but not including *B*. A range is valid only if *B* is reachable from *A;* you can store *A* in an object *N* (*N* = *A*), increment the object zero or more times (++*N*), and have the object compare equal to *B* after a finite number of increments (N == B*).*"},{"pos":[1571,1767],"content":"The phrase \"each <bpt id=\"p1\">*</bpt>N<ept id=\"p1\">*</ept> in the range [<bpt id=\"p2\">*</bpt>A<ept id=\"p2\">*</ept>, <bpt id=\"p3\">*</bpt>B<ept id=\"p3\">*</ept>)\" means that <bpt id=\"p4\">*</bpt>N<ept id=\"p4\">*</ept> begins with the value <bpt id=\"p5\">*</bpt>A<ept id=\"p5\">*</ept> and is incremented zero or more times until it equals the value <bpt id=\"p6\">*</bpt>B<ept id=\"p6\">*</ept>. The case <bpt id=\"p7\">*</bpt>N<ept id=\"p7\">*</ept><ph id=\"ph1\"> == </ph><bpt id=\"p8\">*</bpt>B<ept id=\"p8\">*</ept> is not in the range.","source":"The phrase \"each *N* in the range [*A*, *B*)\" means that *N* begins with the value *A* and is incremented zero or more times until it equals the value *B*. The case *N* == *B* is not in the range."},{"pos":[1777,1963],"content":"The phrase \"the lowest value of <bpt id=\"p1\">*</bpt>N<ept id=\"p1\">*</ept> in the range [<bpt id=\"p2\">*</bpt>A<ept id=\"p2\">*</ept>, <bpt id=\"p3\">*</bpt>B<ept id=\"p3\">*</ept>) such that <bpt id=\"p4\">*</bpt>X<ept id=\"p4\">*</ept>\" means that the condition <bpt id=\"p5\">*</bpt>X<ept id=\"p5\">*</ept> is determined for each <bpt id=\"p6\">*</bpt>N<ept id=\"p6\">*</ept> in the range [<bpt id=\"p7\">*</bpt>A<ept id=\"p7\">*</ept>, <bpt id=\"p8\">*</bpt>B<ept id=\"p8\">*</ept>) until the condition <bpt id=\"p9\">*</bpt>X<ept id=\"p9\">*</ept> is met.","source":"The phrase \"the lowest value of *N* in the range [*A*, *B*) such that *X*\" means that the condition *X* is determined for each *N* in the range [*A*, *B*) until the condition *X* is met."},{"content":"The phrase \"the highest value of <bpt id=\"p1\">*</bpt>N<ept id=\"p1\">*</ept> in the range [<bpt id=\"p2\">*</bpt>A<ept id=\"p2\">*</ept>, <bpt id=\"p3\">*</bpt>B<ept id=\"p3\">*</ept>) such that <bpt id=\"p4\">*</bpt>X<ept id=\"p4\">*</ept> means that <bpt id=\"p5\">*</bpt>X<ept id=\"p5\">*</ept> is determined for each <bpt id=\"p6\">*</bpt>N<ept id=\"p6\">*</ept> in the range [<bpt id=\"p7\">*</bpt>A<ept id=\"p7\">*</ept>, <bpt id=\"p8\">*</bpt>B<ept id=\"p8\">*</ept>).","pos":[1973,2114],"source":"The phrase \"the highest value of *N* in the range [*A*, *B*) such that *X* means that *X* is determined for each *N* in the range [*A*, *B*)."},{"content":"The function stores in <ph id=\"ph1\">`K`</ph> a copy of <bpt id=\"p1\">*</bpt>N<ept id=\"p1\">*</ept> each time the condition <bpt id=\"p2\">*</bpt>X<ept id=\"p2\">*</ept> is met.","pos":[2115,2191],"source":" The function stores in `K` a copy of *N* each time the condition *X* is met."},{"content":"If any such store occurs, the function replaces the final value of <bpt id=\"p1\">*</bpt>N<ept id=\"p1\">*</ept>, which equals <bpt id=\"p2\">*</bpt>B<ept id=\"p2\">*</ept>, with the value of <ph id=\"ph1\">`K`</ph>.","pos":[2192,2304],"source":" If any such store occurs, the function replaces the final value of *N*, which equals *B*, with the value of `K`."},{"content":"For a bidirectional or random-access iterator, however, it can also mean that <bpt id=\"p1\">*</bpt>N<ept id=\"p1\">*</ept> begins with the highest value in the range and is decremented over the range until the condition <bpt id=\"p2\">*</bpt>X<ept id=\"p2\">*</ept> is met.","pos":[2305,2495],"source":" For a bidirectional or random-access iterator, however, it can also mean that *N* begins with the highest value in the range and is decremented over the range until the condition *X* is met."},{"content":"Expressions such as <bpt id=\"p1\">*</bpt>X<ept id=\"p1\">*</ept><ph id=\"ph1\"> - </ph><bpt id=\"p2\">*</bpt>Y<ept id=\"p2\">*</ept>, where <bpt id=\"p3\">*</bpt>X<ept id=\"p3\">*</ept> and <bpt id=\"p4\">*</bpt>Y<ept id=\"p4\">*</ept> can be iterators other than random-access iterators, are intended in the mathematical sense.","pos":[2505,2646],"source":"Expressions such as *X* - *Y*, where *X* and *Y* can be iterators other than random-access iterators, are intended in the mathematical sense."},{"content":"The function does not necessarily evaluate operator<bpt id=\"p1\">**</bpt><ph id=\"ph1\">-</ph><ept id=\"p1\">**</ept> if it must determine such a value.","pos":[2647,2738],"source":" The function does not necessarily evaluate operator**-** if it must determine such a value."},{"content":"The same is also true for expressions such as <bpt id=\"p1\">*</bpt>X<ept id=\"p1\">*</ept><ph id=\"ph1\"> + </ph><bpt id=\"p2\">*</bpt>N<ept id=\"p2\">*</ept> and <bpt id=\"p3\">*</bpt>X<ept id=\"p3\">*</ept><ph id=\"ph2\"> - </ph><bpt id=\"p4\">*</bpt>N<ept id=\"p4\">*</ept>, where <bpt id=\"p5\">*</bpt>N<ept id=\"p5\">*</ept> is an integer type.","pos":[2739,2839],"source":" The same is also true for expressions such as *X* + *N* and *X* - *N*, where *N* is an integer type."},{"content":"Several algorithms make use of a predicate that performs a pairwise comparison, such as with <ph id=\"ph1\">`operator==`</ph>, to yield a <ph id=\"ph2\">`bool`</ph> result.","pos":[2846,2978],"source":"Several algorithms make use of a predicate that performs a pairwise comparison, such as with `operator==`, to yield a `bool` result."},{"content":"The predicate function <ph id=\"ph1\">`operator==`</ph>, or any replacement for it, must not alter either of its operands.","pos":[2979,3081],"source":" The predicate function `operator==`, or any replacement for it, must not alter either of its operands."},{"content":"It must yield the same <ph id=\"ph1\">`bool`</ph> result every time it is evaluated, and it must yield the same result if a copy of either operand is substituted for the operand.","pos":[3082,3240],"source":" It must yield the same `bool` result every time it is evaluated, and it must yield the same result if a copy of either operand is substituted for the operand."},{"content":"Several algorithms make use of a predicate that must impose a strict weak ordering on pairs of elements from a sequence.","pos":[3247,3367]},{"content":"For the predicate <ph id=\"ph1\">`pr`</ph>(<bpt id=\"p1\">*</bpt>X<ept id=\"p1\">*</ept>, <bpt id=\"p2\">*</bpt>Y<ept id=\"p2\">*</ept>):","pos":[3368,3401],"source":" For the predicate `pr`(*X*, *Y*):"},{"pos":[3411,3453],"content":"Strict means that <ph id=\"ph1\">`pr`</ph>(<bpt id=\"p1\">*</bpt>X<ept id=\"p1\">*</ept>, <bpt id=\"p2\">*</bpt>X<ept id=\"p2\">*</ept>) is false.","source":"Strict means that `pr`(*X*, *X*) is false."},{"pos":[3463,3598],"content":"Weak means that <bpt id=\"p1\">*</bpt>X<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>Y<ept id=\"p2\">*</ept> have an equivalent ordering if !<ph id=\"ph1\">`pr`</ph>(<bpt id=\"p3\">*</bpt>X<ept id=\"p3\">*</ept>, <bpt id=\"p4\">*</bpt>Y<ept id=\"p4\">*</ept>) &amp;&amp; !<ph id=\"ph2\">`pr`</ph>(<bpt id=\"p5\">*</bpt>Y<ept id=\"p5\">*</ept>, <bpt id=\"p6\">*</bpt>X<ept id=\"p6\">*</ept>) (<bpt id=\"p7\">*</bpt>X<ept id=\"p7\">*</ept><ph id=\"ph3\"> == </ph><bpt id=\"p8\">*</bpt>Y<ept id=\"p8\">*</ept> does not need to be defined).","source":"Weak means that *X* and *Y* have an equivalent ordering if !`pr`(*X*, *Y*) && !`pr`(*Y*, *X*) (*X* == *Y* does not need to be defined)."},{"pos":[3608,3680],"content":"Ordering means that <ph id=\"ph1\">`pr`</ph>(<bpt id=\"p1\">*</bpt>X<ept id=\"p1\">*</ept>, <bpt id=\"p2\">*</bpt>Y<ept id=\"p2\">*</ept>) &amp;&amp; <ph id=\"ph2\">`pr`</ph>(<bpt id=\"p3\">*</bpt>Y<ept id=\"p3\">*</ept>, Z) implies <ph id=\"ph3\">`pr`</ph>(<bpt id=\"p4\">*</bpt>X<ept id=\"p4\">*</ept>, Z).","source":"Ordering means that `pr`(*X*, *Y*) && `pr`(*Y*, Z) implies `pr`(*X*, Z)."},{"content":"Some of these algorithms implicitly use the predicate <bpt id=\"p1\">*</bpt>X<ept id=\"p1\">*</ept> <ph id=\"ph1\">\\&lt;</ph> <bpt id=\"p2\">*</bpt>Y<ept id=\"p2\">*</ept>. Other predicates that typically satisfy the strict weak ordering requirement are <bpt id=\"p3\">*</bpt>X<ept id=\"p3\">*</ept><ph id=\"ph2\"> &gt; </ph><bpt id=\"p4\">*</bpt>Y<ept id=\"p4\">*</ept>, <bpt id=\"p5\">**</bpt>less<ept id=\"p5\">**</ept>(<bpt id=\"p6\">*</bpt>X<ept id=\"p6\">*</ept>, <bpt id=\"p7\">*</bpt>Y<ept id=\"p7\">*</ept>), and <ph id=\"ph3\">`greater`</ph>(<bpt id=\"p8\">*</bpt>X<ept id=\"p8\">*</ept>, <bpt id=\"p9\">*</bpt>Y<ept id=\"p9\">*</ept>).","pos":[3687,3889],"source":"Some of these algorithms implicitly use the predicate *X* \\< *Y*. Other predicates that typically satisfy the strict weak ordering requirement are *X* > *Y*, **less**(*X*, *Y*), and `greater`(*X*, *Y*)."},{"content":"Note, however, that predicates such as <bpt id=\"p1\">*</bpt>X<ept id=\"p1\">*</ept> <ph id=\"ph1\">\\&lt;= </ph><bpt id=\"p2\">*</bpt>Y<ept id=\"p2\">*</ept> and <bpt id=\"p3\">*</bpt>X<ept id=\"p3\">*</ept><ph id=\"ph2\"> &gt;= </ph><bpt id=\"p4\">*</bpt>Y<ept id=\"p4\">*</ept> do not satisfy this requirement.","pos":[3890,3988],"source":" Note, however, that predicates such as *X* \\<= *Y* and *X* >= *Y* do not satisfy this requirement."},{"content":"A sequence of elements designated by iterators in the range [<ph id=\"ph1\">`First`</ph>, <ph id=\"ph2\">`Last`</ph>) is a sequence ordered by operator<bpt id=\"p1\">**</bpt><ph id=\"ph3\">&lt;</ph><ept id=\"p1\">**</ept> if, for each <bpt id=\"p2\">*</bpt>N<ept id=\"p2\">*</ept> in the range [0, <ph id=\"ph4\">`Last` - `First`</ph>) and for each <bpt id=\"p3\">*</bpt>M<ept id=\"p3\">*</ept> in the range (N, <ph id=\"ph5\">`Last` - `First`</ph>) the predicate !(<ph id=\"ph6\">\\*</ph>(<ph id=\"ph7\">`First` + </ph><bpt id=\"p4\">*</bpt>M<ept id=\"p4\">*</ept>) &lt; <ph id=\"ph8\">\\*</ph>(<bpt id=\"p5\">*</bpt>First<ept id=\"p5\">*</ept><ph id=\"ph9\"> + </ph><bpt id=\"p6\">*</bpt>N<ept id=\"p6\">*</ept>)) is true.","pos":[3995,4279],"source":"A sequence of elements designated by iterators in the range [`First`, `Last`) is a sequence ordered by operator**<** if, for each *N* in the range [0, `Last` - `First`) and for each *M* in the range (N, `Last` - `First`) the predicate !(\\*(`First` + *M*) < \\*(*First* + *N*)) is true."},{"content":"(Note that the elements are sorted in ascending order.) The predicate function <bpt id=\"p1\">**</bpt>operator&lt;<ept id=\"p1\">**</ept>, or any replacement for it, must not alter either of its operands.","pos":[4280,4439],"source":" (Note that the elements are sorted in ascending order.) The predicate function **operator<**, or any replacement for it, must not alter either of its operands."},{"content":"It must yield the same <ph id=\"ph1\">`bool`</ph> result every time it is evaluated, and it must yield the same result if a copy of either operand is substituted for the operand.","pos":[4440,4598],"source":" It must yield the same `bool` result every time it is evaluated, and it must yield the same result if a copy of either operand is substituted for the operand."},{"content":"Moreover, it must impose a strict weak ordering on the operands it compares.","pos":[4599,4675]},{"content":"A sequence of elements designated by iterators in the range [<ph id=\"ph1\">`First`</ph>, <ph id=\"ph2\">`Last`</ph>) is a heap ordered by <bpt id=\"p1\">**</bpt>operator&lt;<ept id=\"p1\">**</ept> if, for each <bpt id=\"p2\">*</bpt>N<ept id=\"p2\">*</ept> in the range [1, <ph id=\"ph3\">`Last` - `First`</ph>) the predicate !(<ph id=\"ph4\">\\*`First` &lt; \\*</ph>(<ph id=\"ph5\">`First` + </ph><bpt id=\"p3\">*</bpt>N<ept id=\"p3\">*</ept>)) is true.","pos":[4682,4902],"source":"A sequence of elements designated by iterators in the range [`First`, `Last`) is a heap ordered by **operator<** if, for each *N* in the range [1, `Last` - `First`) the predicate !(\\*`First` < \\*(`First` + *N*)) is true."},{"content":"(The first element is the largest.) Its internal structure is otherwise known only to the template functions <bpt id=\"p1\">[</bpt>make_heap<ept id=\"p1\">](http://msdn.microsoft.com/Library/b09f795c-f368-4aa8-b57e-61ee6100ddc2)</ept>, [pop_heap]--brokenlink--(../Topic/not%20found:c10b0c65-410c-4c83-abf8-8b7f61bba8d0.md#pop_heap), and [push_heap]-brokenlink--(../Topic/not%20found:c10b0c65-410c-4c83-abf8-8b7f61bba8d0.md#push_heap).","pos":[4903,5295],"source":" (The first element is the largest.) Its internal structure is otherwise known only to the template functions [make_heap](http://msdn.microsoft.com/Library/b09f795c-f368-4aa8-b57e-61ee6100ddc2), [pop_heap]--brokenlink--(../Topic/not%20found:c10b0c65-410c-4c83-abf8-8b7f61bba8d0.md#pop_heap), and [push_heap]-brokenlink--(../Topic/not%20found:c10b0c65-410c-4c83-abf8-8b7f61bba8d0.md#push_heap)."},{"content":"As with an ordered sequence, the predicate function <bpt id=\"p1\">**</bpt>operator&lt;<ept id=\"p1\">**</ept>, or any replacement for it, must not alter either of its operands, and it must impose a strict weak ordering on the operands it compares.","pos":[5296,5499],"source":" As with an ordered sequence, the predicate function **operator<**, or any replacement for it, must not alter either of its operands, and it must impose a strict weak ordering on the operands it compares."},{"content":"It must yield the same <ph id=\"ph1\">`bool`</ph> result every time it is evaluated, and it must yield the same result if a copy of either operand is substituted for the operand.","pos":[5500,5658],"source":" It must yield the same `bool` result every time it is evaluated, and it must yield the same result if a copy of either operand is substituted for the operand."},{"pos":[5665,5814],"content":"The STL algorithms are located in the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>algorithm&gt;<ept id=\"p1\">](../standard-library/algorithm.md)</ept> and <bpt id=\"p2\">[</bpt><ph id=\"ph2\">\\&lt;</ph>numeric&gt;<ept id=\"p2\">](../standard-library/numeric.md)</ept> header files.","source":"The STL algorithms are located in the [\\<algorithm>](../standard-library/algorithm.md) and [\\<numeric>](../standard-library/numeric.md) header files."},{"content":"See Also","pos":[5823,5831]},{"content":"C++ Standard Library Reference","pos":[5836,5866]},{"content":"Thread Safety in the C++ Standard Library","pos":[5928,5969]}],"content":"---\ntitle: \"Algorithms | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"libraries [C++], C++ algorithm conventions\"\n  - \"algorithms [C++], C++\"\n  - \"Standard C++ Library, algorithms\"\n  - \"algorithm template function C++ library conventions\"\n  - \"conventions [C++], C++ algorithm\"\nms.assetid: dec9b373-7d5c-46cc-b7d2-21a938ecd0a6\ncaps.latest.revision: 10\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Algorithms\nAlgorithms are a fundamental part of the Standard Template Library. Algorithms do not work with containers themselves but rather with iterators. Therefore, the same algorithm can be used by most if not all of the STL containers. This section discusses the conventions and terminology of the STL algorithms.  \n  \n## Remarks  \n The descriptions of the algorithm template functions employ several shorthand phrases:  \n  \n-   The phrase \"in the range [*A*, *B*)\" means the sequence of zero or more discrete values beginning with *A* up to but not including *B*. A range is valid only if *B* is reachable from *A;* you can store *A* in an object *N* (*N* = *A*), increment the object zero or more times (++*N*), and have the object compare equal to *B* after a finite number of increments (N == B*).*  \n  \n-   The phrase \"each *N* in the range [*A*, *B*)\" means that *N* begins with the value *A* and is incremented zero or more times until it equals the value *B*. The case *N* == *B* is not in the range.  \n  \n-   The phrase \"the lowest value of *N* in the range [*A*, *B*) such that *X*\" means that the condition *X* is determined for each *N* in the range [*A*, *B*) until the condition *X* is met.  \n  \n-   The phrase \"the highest value of *N* in the range [*A*, *B*) such that *X* means that *X* is determined for each *N* in the range [*A*, *B*). The function stores in `K` a copy of *N* each time the condition *X* is met. If any such store occurs, the function replaces the final value of *N*, which equals *B*, with the value of `K`. For a bidirectional or random-access iterator, however, it can also mean that *N* begins with the highest value in the range and is decremented over the range until the condition *X* is met.  \n  \n-   Expressions such as *X* - *Y*, where *X* and *Y* can be iterators other than random-access iterators, are intended in the mathematical sense. The function does not necessarily evaluate operator**-** if it must determine such a value. The same is also true for expressions such as *X* + *N* and *X* - *N*, where *N* is an integer type.  \n  \n Several algorithms make use of a predicate that performs a pairwise comparison, such as with `operator==`, to yield a `bool` result. The predicate function `operator==`, or any replacement for it, must not alter either of its operands. It must yield the same `bool` result every time it is evaluated, and it must yield the same result if a copy of either operand is substituted for the operand.  \n  \n Several algorithms make use of a predicate that must impose a strict weak ordering on pairs of elements from a sequence. For the predicate `pr`(*X*, *Y*):  \n  \n-   Strict means that `pr`(*X*, *X*) is false.  \n  \n-   Weak means that *X* and *Y* have an equivalent ordering if !`pr`(*X*, *Y*) && !`pr`(*Y*, *X*) (*X* == *Y* does not need to be defined).  \n  \n-   Ordering means that `pr`(*X*, *Y*) && `pr`(*Y*, Z) implies `pr`(*X*, Z).  \n  \n Some of these algorithms implicitly use the predicate *X* \\< *Y*. Other predicates that typically satisfy the strict weak ordering requirement are *X* > *Y*, **less**(*X*, *Y*), and `greater`(*X*, *Y*). Note, however, that predicates such as *X* \\<= *Y* and *X* >= *Y* do not satisfy this requirement.  \n  \n A sequence of elements designated by iterators in the range [`First`, `Last`) is a sequence ordered by operator**<** if, for each *N* in the range [0, `Last` - `First`) and for each *M* in the range (N, `Last` - `First`) the predicate !(\\*(`First` + *M*) < \\*(*First* + *N*)) is true. (Note that the elements are sorted in ascending order.) The predicate function **operator<**, or any replacement for it, must not alter either of its operands. It must yield the same `bool` result every time it is evaluated, and it must yield the same result if a copy of either operand is substituted for the operand. Moreover, it must impose a strict weak ordering on the operands it compares.  \n  \n A sequence of elements designated by iterators in the range [`First`, `Last`) is a heap ordered by **operator<** if, for each *N* in the range [1, `Last` - `First`) the predicate !(\\*`First` < \\*(`First` + *N*)) is true. (The first element is the largest.) Its internal structure is otherwise known only to the template functions [make_heap](http://msdn.microsoft.com/Library/b09f795c-f368-4aa8-b57e-61ee6100ddc2), [pop_heap]--brokenlink--(../Topic/not%20found:c10b0c65-410c-4c83-abf8-8b7f61bba8d0.md#pop_heap), and [push_heap]-brokenlink--(../Topic/not%20found:c10b0c65-410c-4c83-abf8-8b7f61bba8d0.md#push_heap). As with an ordered sequence, the predicate function **operator<**, or any replacement for it, must not alter either of its operands, and it must impose a strict weak ordering on the operands it compares. It must yield the same `bool` result every time it is evaluated, and it must yield the same result if a copy of either operand is substituted for the operand.  \n  \n The STL algorithms are located in the [\\<algorithm>](../standard-library/algorithm.md) and [\\<numeric>](../standard-library/numeric.md) header files.  \n  \n## See Also  \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)\n\n"}