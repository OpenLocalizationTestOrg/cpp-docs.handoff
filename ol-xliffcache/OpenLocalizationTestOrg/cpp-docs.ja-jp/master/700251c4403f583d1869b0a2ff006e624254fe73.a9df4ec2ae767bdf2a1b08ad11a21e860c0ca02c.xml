{"nodes":[{"pos":[12,56],"content":"Window Destruction Sequence | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Window Destruction Sequence | Microsoft Docs","pos":[0,44]}]},{"content":"Window Destruction Sequence","pos":[745,772]},{"content":"In the MFC framework, when the user closes the frame window, the window's default <bpt id=\"p1\">[</bpt>OnClose<ept id=\"p1\">](../mfc/reference/cwnd-class.md#cwnd__onclose)</ept> handler calls <bpt id=\"p2\">[</bpt>DestroyWindow<ept id=\"p2\">](../mfc/reference/cwnd-class.md#cwnd__destroywindow)</ept>.","pos":[773,993],"source":"In the MFC framework, when the user closes the frame window, the window's default [OnClose](../mfc/reference/cwnd-class.md#cwnd__onclose) handler calls [DestroyWindow](../mfc/reference/cwnd-class.md#cwnd__destroywindow)."},{"content":"The last member function called when the Windows window is destroyed is <bpt id=\"p1\">[</bpt>OnNcDestroy<ept id=\"p1\">](../mfc/reference/cwnd-class.md#cwnd__onncdestroy)</ept>, which does some cleanup, calls the <bpt id=\"p2\">[</bpt>Default<ept id=\"p2\">](../mfc/reference/cwnd-class.md#cwnd__default)</ept> member function to perform Windows cleanup, and lastly calls the virtual member function <bpt id=\"p3\">[</bpt>PostNcDestroy<ept id=\"p3\">](../mfc/reference/cwnd-class.md#cwnd__postncdestroy)</ept>.","pos":[994,1379],"source":" The last member function called when the Windows window is destroyed is [OnNcDestroy](../mfc/reference/cwnd-class.md#cwnd__onncdestroy), which does some cleanup, calls the [Default](../mfc/reference/cwnd-class.md#cwnd__default) member function to perform Windows cleanup, and lastly calls the virtual member function [PostNcDestroy](../mfc/reference/cwnd-class.md#cwnd__postncdestroy)."},{"content":"The <bpt id=\"p1\">[</bpt>CFrameWnd<ept id=\"p1\">](../mfc/reference/cframewnd-class.md)</ept> implementation of <ph id=\"ph1\">`PostNcDestroy`</ph> deletes the C++ window object.","pos":[1380,1497],"source":" The [CFrameWnd](../mfc/reference/cframewnd-class.md) implementation of `PostNcDestroy` deletes the C++ window object."},{"content":"What do you want to know more about","pos":[1506,1541]},{"content":"Allocating and deallocating window memory","pos":[1552,1593]},{"content":"Detaching a CWnd from its HWND","pos":[1658,1688]},{"content":"See Also","pos":[1740,1748]},{"content":"Destroying Window Objects","pos":[1753,1778]}],"content":"---\ntitle: \"Window Destruction Sequence | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"destruction, windows\"\n  - \"destroying windows\"\n  - \"sequence [C++], window destruction\"\n  - \"CWnd objects, destruction sequence\"\n  - \"sequence [C++]\"\n  - \"windows [C++], destroying\"\nms.assetid: 2d819196-6240-415f-a308-db43745e616c\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Window Destruction Sequence\nIn the MFC framework, when the user closes the frame window, the window's default [OnClose](../mfc/reference/cwnd-class.md#cwnd__onclose) handler calls [DestroyWindow](../mfc/reference/cwnd-class.md#cwnd__destroywindow). The last member function called when the Windows window is destroyed is [OnNcDestroy](../mfc/reference/cwnd-class.md#cwnd__onncdestroy), which does some cleanup, calls the [Default](../mfc/reference/cwnd-class.md#cwnd__default) member function to perform Windows cleanup, and lastly calls the virtual member function [PostNcDestroy](../mfc/reference/cwnd-class.md#cwnd__postncdestroy). The [CFrameWnd](../mfc/reference/cframewnd-class.md) implementation of `PostNcDestroy` deletes the C++ window object.  \n  \n## What do you want to know more about  \n  \n-   [Allocating and deallocating window memory](../mfc/allocating-and-deallocating-window-memory.md)  \n  \n-   [Detaching a CWnd from its HWND](../mfc/detaching-a-cwnd-from-its-hwnd.md)  \n  \n## See Also  \n [Destroying Window Objects](../mfc/destroying-window-objects.md)\n\n"}