{"nodes":[{"pos":[12,49],"content":"list::sort (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"list::sort (STL-CLR) | Microsoft Docs","pos":[0,37]}]},{"content":"list::sort (STL/CLR)","pos":[621,641]},{"content":"Orders the controlled sequence.","pos":[642,673]},{"content":"Syntax","pos":[682,688]},{"content":"Parameters","pos":[785,795]},{"content":"pred","pos":[799,803]},{"content":"Comparer for element pairs.","pos":[807,834]},{"content":"Remarks","pos":[843,850]},{"content":"The first member function rearranges the elements in the controlled sequence so that they are ordered by <ph id=\"ph1\">`operator&lt;`</ph> -- elements do not decrease in value as you progress through the sequence.","pos":[854,1045],"source":"The first member function rearranges the elements in the controlled sequence so that they are ordered by `operator<` -- elements do not decrease in value as you progress through the sequence."},{"content":"You use this member function to sort the sequence in increasing order.","pos":[1046,1116]},{"content":"The second member function behaves the same as the first, except that the sequence is ordered by <ph id=\"ph1\">`pred` -- `pred``(X, Y)`</ph> is false for any element <ph id=\"ph2\">`X`</ph> that follows element <ph id=\"ph3\">`Y`</ph> in the resultant sequence.","pos":[1123,1325],"source":"The second member function behaves the same as the first, except that the sequence is ordered by `pred` -- `pred``(X, Y)` is false for any element `X` that follows element `Y` in the resultant sequence."},{"content":"You use it to sort the sequence in an order that you specify by a predicate function or delegate.","pos":[1326,1423]},{"content":"Both functions perform a stable sort -- no pair of elements in the original controlled sequence is reversed in the resulting controlled sequence.","pos":[1430,1575]},{"content":"Example","pos":[1584,1591]},{"content":"Requirements","pos":[2459,2471]},{"pos":[2475,2501],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/list&gt;","source":"**Header:** \\<cliext/list>"},{"pos":[2508,2529],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2538,2546]},{"content":"list (STL/CLR)","pos":[2551,2565]},{"content":"list::merge (STL/CLR)","pos":[2599,2620]},{"content":"list::reverse (STL/CLR)","pos":[2660,2683]},{"content":"list::splice (STL/CLR)","pos":[2725,2747]},{"content":"list::unique (STL/CLR)","pos":[2788,2810]}],"content":"---\ntitle: \"list::sort (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::list::sort\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"sort member [STL/CLR]\"\nms.assetid: f811d5f4-a19e-4194-8765-1e68097c52f0\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# list::sort (STL/CLR)\nOrders the controlled sequence.  \n  \n## Syntax  \n  \n```  \nvoid sort();  \ntemplate<typename Pred2>  \n    void sort(Pred2 pred);  \n```  \n  \n#### Parameters  \n pred  \n Comparer for element pairs.  \n  \n## Remarks  \n The first member function rearranges the elements in the controlled sequence so that they are ordered by `operator<` -- elements do not decrease in value as you progress through the sequence. You use this member function to sort the sequence in increasing order.  \n  \n The second member function behaves the same as the first, except that the sequence is ordered by `pred` -- `pred``(X, Y)` is false for any element `X` that follows element `Y` in the resultant sequence. You use it to sort the sequence in an order that you specify by a predicate function or delegate.  \n  \n Both functions perform a stable sort -- no pair of elements in the original controlled sequence is reversed in the resulting controlled sequence.  \n  \n## Example  \n  \n```  \n// cliext_list_sort.cpp   \n// compile with: /clr   \n#include <cliext/list>   \n  \nint main()   \n    {   \n    cliext::list<wchar_t> c1;   \n    c1.push_back(L'a');   \n    c1.push_back(L'b');   \n    c1.push_back(L'c');   \n  \n// display initial contents \" a b c\"   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// sort descending and redisplay   \n    c1.sort(cliext::greater<wchar_t>());   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// sort ascending and redisplay   \n    c1.sort();   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \na b c  \nc b a  \na b c  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/list>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [list (STL/CLR)](../dotnet/list-stl-clr.md)   \n [list::merge (STL/CLR)](../dotnet/list-merge-stl-clr.md)   \n [list::reverse (STL/CLR)](../dotnet/list-reverse-stl-clr.md)   \n [list::splice (STL/CLR)](../dotnet/list-splice-stl-clr.md)   \n [list::unique (STL/CLR)](../dotnet/list-unique-stl-clr.md)"}