{"nodes":[{"pos":[12,38],"content":"appdomain | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"appdomain | Microsoft Docs","pos":[0,26]}]},{"content":"appdomain","pos":[679,688]},{"content":"Specifies that each application domain of your managed application should have its own copy of a particular global variable or static member variable.","pos":[689,839]},{"content":"See <bpt id=\"p1\">[</bpt>Application Domains and Visual C++<ept id=\"p1\">](../dotnet/application-domains-and-visual-cpp.md)</ept> for more information.","pos":[840,951],"source":" See [Application Domains and Visual C++](../dotnet/application-domains-and-visual-cpp.md) for more information."},{"content":"Every application domain has its own copy of a per-appdomain variable.","pos":[958,1028]},{"content":"A constructor of an appdomain variable is executed when an assembly is loaded into an application domain, and the destructor is executed when the application domain is unloaded.","pos":[1029,1206]},{"content":"If you want all application domains within a process in the common language runtime to share a global variable, use the <ph id=\"ph1\">`__declspec(process)`</ph> modifier.","pos":[1213,1364],"source":"If you want all application domains within a process in the common language runtime to share a global variable, use the `__declspec(process)` modifier."},{"content":"is in effect by default under <bpt id=\"p1\">[</bpt>/clr<ept id=\"p1\">](../build/reference/clr-common-language-runtime-compilation.md)</ept> and <ph id=\"ph1\">`__declspec(appdomain)`</ph> is in effect by default under <bpt id=\"p2\">**</bpt>/clr:pure<ept id=\"p2\">**</ept>.","pos":[1387,1559],"source":" is in effect by default under [/clr](../build/reference/clr-common-language-runtime-compilation.md) and `__declspec(appdomain)` is in effect by default under **/clr:pure**."},{"content":"is enforced under <bpt id=\"p1\">**</bpt>/clr:safe<ept id=\"p1\">**</ept>.","pos":[1584,1616],"source":" is enforced under **/clr:safe**."},{"content":"is only valid when one of the <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept> compiler options is used.","pos":[1647,1711],"source":" is only valid when one of the **/clr** compiler options is used."},{"content":"Only a global variable, static member variable, or a static local variable can be marked with <ph id=\"ph1\">`__declspec(appdomain)`</ph>.","pos":[1712,1830],"source":" Only a global variable, static member variable, or a static local variable can be marked with `__declspec(appdomain)`."},{"content":"It is an error to apply <ph id=\"ph1\">`__declspec(appdomain)`</ph> to static members of managed types because they always have this behavior.","pos":[1831,1953],"source":" It is an error to apply `__declspec(appdomain)` to static members of managed types because they always have this behavior."},{"content":"Using <ph id=\"ph1\">`__declspec(appdomain)`</ph> is similar to using <bpt id=\"p1\">[</bpt>Thread Local Storage (TLS)<ept id=\"p1\">](../parallel/thread-local-storage-tls.md)</ept>.","pos":[1960,2080],"source":"Using `__declspec(appdomain)` is similar to using [Thread Local Storage (TLS)](../parallel/thread-local-storage-tls.md)."},{"content":"Threads have their own storage, as do application domains.","pos":[2081,2139]},{"content":"Using <ph id=\"ph1\">`__declspec(appdomain)`</ph> ensures the global variable has its own storage in each application domain created for this application.","pos":[2140,2274],"source":" Using `__declspec(appdomain)` ensures the global variable has its own storage in each application domain created for this application."},{"pos":[2281,2419],"content":"There are limitations to mixing the use of per process and per appdomain variables; see <bpt id=\"p1\">[</bpt>process<ept id=\"p1\">](../cpp/process.md)</ept> for more information.","source":"There are limitations to mixing the use of per process and per appdomain variables; see [process](../cpp/process.md) for more information."},{"content":"For example, at program start up, all per-process variables are initialized, then all per-appdomain variables are initialized.","pos":[2426,2552]},{"content":"Therefore when a per-process variable is being initialized, it cannot depend on the value of any per-application domain variable.","pos":[2553,2682]},{"content":"It is bad practice to mix the use (assignment) of per appdomain and per process variables.","pos":[2683,2773]},{"pos":[2780,2930],"content":"For information on how to call a function in a specific application domain, see <bpt id=\"p1\">[</bpt>call_in_appdomain Function<ept id=\"p1\">](../dotnet/call-in-appdomain-function.md)</ept>.","source":"For information on how to call a function in a specific application domain, see [call_in_appdomain Function](../dotnet/call-in-appdomain-function.md)."},{"content":"Example","pos":[2939,2946]},{"content":"See Also","pos":[6546,6554]},{"content":"__declspec","pos":[6559,6569]},{"content":"Keywords","pos":[6596,6604]}],"content":"---\ntitle: \"appdomain | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"appdomain_cpp\"\n  - \"appdomain\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"appdomain __declspec keyword\"\n  - \"__declspec keyword [C++], appdomain\"\nms.assetid: 29d843cb-cb6b-4d1b-a48d-d928a877234d\ncaps.latest.revision: 23\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# appdomain\nSpecifies that each application domain of your managed application should have its own copy of a particular global variable or static member variable. See [Application Domains and Visual C++](../dotnet/application-domains-and-visual-cpp.md) for more information.  \n  \n Every application domain has its own copy of a per-appdomain variable. A constructor of an appdomain variable is executed when an assembly is loaded into an application domain, and the destructor is executed when the application domain is unloaded.  \n  \n If you want all application domains within a process in the common language runtime to share a global variable, use the `__declspec(process)` modifier. `__declspec(process)` is in effect by default under [/clr](../build/reference/clr-common-language-runtime-compilation.md) and `__declspec(appdomain)` is in effect by default under **/clr:pure**. `__declspec(appdomain)` is enforced under **/clr:safe**.  \n  \n `__declspec(appdomain)` is only valid when one of the **/clr** compiler options is used. Only a global variable, static member variable, or a static local variable can be marked with `__declspec(appdomain)`. It is an error to apply `__declspec(appdomain)` to static members of managed types because they always have this behavior.  \n  \n Using `__declspec(appdomain)` is similar to using [Thread Local Storage (TLS)](../parallel/thread-local-storage-tls.md). Threads have their own storage, as do application domains. Using `__declspec(appdomain)` ensures the global variable has its own storage in each application domain created for this application.  \n  \n There are limitations to mixing the use of per process and per appdomain variables; see [process](../cpp/process.md) for more information.  \n  \n For example, at program start up, all per-process variables are initialized, then all per-appdomain variables are initialized. Therefore when a per-process variable is being initialized, it cannot depend on the value of any per-application domain variable. It is bad practice to mix the use (assignment) of per appdomain and per process variables.  \n  \n For information on how to call a function in a specific application domain, see [call_in_appdomain Function](../dotnet/call-in-appdomain-function.md).  \n  \n## Example  \n  \n```  \n// declspec_appdomain.cpp  \n// compile with: /clr  \n#include <stdio.h>  \nusing namespace System;  \n  \nclass CGlobal {  \npublic:  \n   CGlobal(bool bProcess) {  \n      Counter = 10;  \n      m_bProcess = bProcess;  \n      Console::WriteLine(\"__declspec({0}) CGlobal::CGlobal constructor\", m_bProcess ? (String^)\"process\" : (String^)\"appdomain\");  \n   }  \n  \n   ~CGlobal() {  \n      Console::WriteLine(\"__declspec({0}) CGlobal::~CGlobal destructor\", m_bProcess ? (String^)\"process\" : (String^)\"appdomain\");  \n   }  \n  \n   int Counter;  \n  \nprivate:  \n   bool m_bProcess;  \n};  \n  \n__declspec(process) CGlobal process_global = CGlobal(true);  \n__declspec(appdomain) CGlobal appdomain_global = CGlobal(false);  \n  \nvalue class Functions {  \npublic:  \n   static void change() {  \n      ++appdomain_global.Counter;  \n   }  \n  \n   static void display() {  \n      Console::WriteLine(\"process_global value in appdomain '{0}': {1}\",   \n         AppDomain::CurrentDomain->FriendlyName,  \n         process_global.Counter);  \n  \n      Console::WriteLine(\"appdomain_global value in appdomain '{0}': {1}\",   \n         AppDomain::CurrentDomain->FriendlyName,  \n         appdomain_global.Counter);  \n   }  \n};  \n  \nint main() {  \n   AppDomain^ defaultDomain = AppDomain::CurrentDomain;  \n   AppDomain^ domain = AppDomain::CreateDomain(\"Domain 1\");  \n   AppDomain^ domain2 = AppDomain::CreateDomain(\"Domain 2\");  \n   CrossAppDomainDelegate^ changeDelegate = gcnew CrossAppDomainDelegate(&Functions::change);  \n   CrossAppDomainDelegate^ displayDelegate = gcnew CrossAppDomainDelegate(&Functions::display);  \n  \n   // Print the initial values of appdomain_global in all appdomains.  \n   Console::WriteLine(\"Initial value\");  \n   defaultDomain->DoCallBack(displayDelegate);  \n   domain->DoCallBack(displayDelegate);  \n   domain2->DoCallBack(displayDelegate);  \n  \n   // Changing the value of appdomain_global in the domain and domain2  \n   // appdomain_global value in \"default\" appdomain remain unchanged  \n   process_global.Counter = 20;  \n   domain->DoCallBack(changeDelegate);  \n   domain2->DoCallBack(changeDelegate);  \n   domain2->DoCallBack(changeDelegate);  \n  \n   // Print values again  \n   Console::WriteLine(\"Changed value\");  \n   defaultDomain->DoCallBack(displayDelegate);  \n   domain->DoCallBack(displayDelegate);  \n   domain2->DoCallBack(displayDelegate);  \n  \n   AppDomain::Unload(domain);  \n   AppDomain::Unload(domain2);  \n}  \n```  \n  \n```Output  \n__declspec(process) CGlobal::CGlobal constructor  \n__declspec(appdomain) CGlobal::CGlobal constructor  \nInitial value  \nprocess_global value in appdomain 'declspec_appdomain.exe': 10  \nappdomain_global value in appdomain 'declspec_appdomain.exe': 10  \n__declspec(appdomain) CGlobal::CGlobal constructor  \nprocess_global value in appdomain 'Domain 1': 10  \nappdomain_global value in appdomain 'Domain 1': 10  \n__declspec(appdomain) CGlobal::CGlobal constructor  \nprocess_global value in appdomain 'Domain 2': 10  \nappdomain_global value in appdomain 'Domain 2': 10  \nChanged value  \nprocess_global value in appdomain 'declspec_appdomain.exe': 20  \nappdomain_global value in appdomain 'declspec_appdomain.exe': 10  \nprocess_global value in appdomain 'Domain 1': 20  \nappdomain_global value in appdomain 'Domain 1': 11  \nprocess_global value in appdomain 'Domain 2': 20  \nappdomain_global value in appdomain 'Domain 2': 12  \n__declspec(appdomain) CGlobal::~CGlobal destructor  \n__declspec(appdomain) CGlobal::~CGlobal destructor  \n__declspec(appdomain) CGlobal::~CGlobal destructor  \n__declspec(process) CGlobal::~CGlobal destructor  \n```  \n  \n## See Also  \n [__declspec](../cpp/declspec.md)   \n [Keywords](../cpp/keywords-cpp.md)"}