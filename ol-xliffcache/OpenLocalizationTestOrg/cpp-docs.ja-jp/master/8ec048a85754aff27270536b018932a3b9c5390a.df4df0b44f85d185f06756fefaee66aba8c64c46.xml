{"nodes":[{"pos":[12,85],"content":"_vsprintf_p, _vsprintf_p_l, _vswprintf_p, _vswprintf_p_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_vsprintf_p, _vsprintf_p_l, _vswprintf_p, _vswprintf_p_l | Microsoft Docs","pos":[0,73]}]},{"content":"_vsprintf_p, _vsprintf_p_l, _vswprintf_p, _vswprintf_p_l","pos":[1417,1473]},{"content":"Write formatted output using a pointer to a list of arguments, with the ability to specify the order in which the arguments are used.","pos":[1474,1607]},{"content":"Syntax","pos":[1616,1622]},{"content":"Parameters","pos":[2156,2166]},{"content":"Storage location for output.","pos":[2182,2210]},{"content":"Size of <ph id=\"ph1\">`buffer`</ph> in characters.","pos":[2234,2265],"source":" Size of `buffer` in characters."},{"content":"Maximum number of characters to store, in the UNICODE version of this function.","pos":[2283,2362]},{"content":"Format specification.","pos":[2381,2402]},{"content":"Pointer to list of arguments.","pos":[2421,2450]},{"content":"The locale to use.","pos":[2469,2487]},{"content":"Return Value","pos":[2496,2508]},{"pos":[2526,2678],"content":"and <ph id=\"ph1\">`_vswprintf_p`</ph> return the number of characters written, not including the terminating null character, or a negative value if an output error occurs.","source":" and `_vswprintf_p` return the number of characters written, not including the terminating null character, or a negative value if an output error occurs."},{"content":"Remarks","pos":[2687,2694]},{"pos":[2698,2839],"content":"Each of these functions takes a pointer to an argument list, and then formats and writes the given data to the memory pointed to by <ph id=\"ph1\">`buffer`</ph>.","source":"Each of these functions takes a pointer to an argument list, and then formats and writes the given data to the memory pointed to by `buffer`."},{"content":"These functions differ from the <ph id=\"ph1\">`vsprintf_s`</ph> and <ph id=\"ph2\">`vswprintf_s`</ph> only in that they support positional parameters.","pos":[2846,2957],"source":"These functions differ from the `vsprintf_s` and `vswprintf_s` only in that they support positional parameters."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>printf_p Positional Parameters<ept id=\"p1\">](../../c-runtime-library/printf-p-positional-parameters.md)</ept>.","pos":[2958,3076],"source":" For more information, see [printf_p Positional Parameters](../../c-runtime-library/printf-p-positional-parameters.md)."},{"pos":[3083,3239],"content":"The versions of these functions with the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current thread locale.","source":"The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale."},{"content":"If the <ph id=\"ph1\">`buffer`</ph> or <ph id=\"ph2\">`format`</ph> parameters are NULL pointers, if count is zero, or if the format string contains invalid formatting characters, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[3246,3516],"source":"If the `buffer` or `format` parameters are NULL pointers, if count is zero, or if the format string contains invalid formatting characters, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, the functions return -1 and set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[3517,3606],"source":" If execution is allowed to continue, the functions return -1 and set `errno` to `EINVAL`."},{"content":"Generic-Text Routine Mappings","pos":[3616,3645]},{"content":"TCHAR.H routine","pos":[3652,3667]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[3668,3696],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[3697,3710]},{"content":"_UNICODE defined","pos":[3711,3727]},{"content":"Requirements","pos":[3977,3989]},{"content":"Routine","pos":[3996,4003]},{"content":"Required header","pos":[4004,4019]},{"content":"Optional headers","pos":[4020,4036]},{"pos":[4117,4118],"content":","},{"content":"stdio.h&gt; and <ph id=\"ph1\">\\&lt;</ph>stdarg.h&gt;","pos":[4137,4161],"source":"stdio.h> and \\<stdarg.h>"},{"content":"varargs.h&gt;*","pos":[4164,4175],"source":"varargs.h>*"},{"pos":[4194,4195],"content":","},{"content":"stdio.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;, and <ph id=\"ph2\">\\&lt;</ph>stdarg.h&gt;","pos":[4215,4254],"source":"stdio.h> or \\<wchar.h>, and \\<stdarg.h>"},{"content":"varargs.h&gt;*","pos":[4257,4268],"source":"varargs.h>*"},{"content":"Required for UNIX V compatibility.","pos":[4279,4313]},{"pos":[4320,4444],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[4453,4460]},{"content":".NET Framework Equivalent","pos":[5437,5462]},{"content":"System::String::Format","pos":[5467,5489]},{"content":"See Also","pos":[5567,5575]},{"content":"Stream I/O","pos":[5580,5590]},{"content":"vprintf Functions","pos":[5636,5653]},{"content":"Format Specification Syntax: printf and wprintf Functions","pos":[5706,5763]},{"content":"fprintf, _fprintf_l, fwprintf, _fwprintf_l","pos":[5855,5897]},{"content":"printf, _printf_l, wprintf, _wprintf_l","pos":[5980,6018]},{"content":"sprintf, _sprintf_l, swprintf, _swprintf_l, <ph id=\"ph1\">\\_</ph>_swprintf_l","pos":[6097,6154],"source":"sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l"},{"content":"va_arg, va_copy, va_end, va_start","pos":[6248,6281]}],"content":"---\ntitle: \"_vsprintf_p, _vsprintf_p_l, _vswprintf_p, _vswprintf_p_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_vsprintf_p\"\n  - \"_vswprintf_p\"\n  - \"_vsprintf_p_l\"\n  - \"_vswprintf_p_l\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"vsprintf_p\"\n  - \"_vswprintf_p\"\n  - \"_vstprintf_p\"\n  - \"vswprintf_p\"\n  - \"_vsprintf_p\"\n  - \"vstprintf_p\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"vstprintf_p_l function\"\n  - \"_vsprintf_p_l function\"\n  - \"_vstprintf_p function\"\n  - \"vsprintf_p_l function\"\n  - \"_vswprintf_p function\"\n  - \"vswprintf_p function\"\n  - \"vsprintf_p function\"\n  - \"vswprintf_p_l function\"\n  - \"_vswprintf_p_l function\"\n  - \"vstprintf_p function\"\n  - \"formatted text [C++]\"\n  - \"_vsprintf_p function\"\n  - \"_vstprintf_p_l function\"\nms.assetid: 00821c0d-9fee-4d8a-836c-0669cfb11317\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _vsprintf_p, _vsprintf_p_l, _vswprintf_p, _vswprintf_p_l\nWrite formatted output using a pointer to a list of arguments, with the ability to specify the order in which the arguments are used.  \n  \n## Syntax  \n  \n```  \nint _vsprintf_p(  \n   char *buffer,  \n   size_t sizeInBytes,  \n   const char *format,  \n   va_list argptr   \n);   \nint _vsprintf_p_l(  \n   char *buffer,  \n   size_t sizeInBytes,  \n   const char *format,  \n   locale_t locale,  \n   va_list argptr   \n);   \nint _vswprintf_p(  \n   wchar_t *buffer,  \n   size_t count,  \n   const wchar_t *format,  \n   va_list argptr   \n);  \nint _vswprintf_p_l(  \n   wchar_t *buffer,  \n   size_t count,  \n   const wchar_t *format,  \n   locale_t locale,  \n   va_list argptr   \n);  \n```  \n  \n#### Parameters  \n `buffer`  \n Storage location for output.  \n  \n `sizeInBytes`  \n Size of `buffer` in characters.  \n  \n `count`  \n Maximum number of characters to store, in the UNICODE version of this function.  \n  \n `format`  \n Format specification.  \n  \n `argptr`  \n Pointer to list of arguments.  \n  \n `locale`  \n The locale to use.  \n  \n## Return Value  \n `_vsprintf_p` and `_vswprintf_p` return the number of characters written, not including the terminating null character, or a negative value if an output error occurs.  \n  \n## Remarks  \n Each of these functions takes a pointer to an argument list, and then formats and writes the given data to the memory pointed to by `buffer`.  \n  \n These functions differ from the `vsprintf_s` and `vswprintf_s` only in that they support positional parameters. For more information, see [printf_p Positional Parameters](../../c-runtime-library/printf-p-positional-parameters.md).  \n  \n The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale.  \n  \n If the `buffer` or `format` parameters are NULL pointers, if count is zero, or if the format string contains invalid formatting characters, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, the functions return -1 and set `errno` to `EINVAL`.  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_vstprintf_p`|`_vsprintf_p`|`_vsprintf_p`|`_vswprintf_p`|  \n|`_vstprintf_p_l`|`_vsprintf_p_l`|`_vsprintf_p_l`|`_vswprintf_p_l`|  \n  \n## Requirements  \n  \n|Routine|Required header|Optional headers|  \n|-------------|---------------------|----------------------|  \n|`_vsprintf_p`, `_vsprintf_p_l`|\\<stdio.h> and \\<stdarg.h>|\\<varargs.h>*|  \n|`_vswprintf_p`, `_vswprintf_p_l`|\\<stdio.h> or \\<wchar.h>, and \\<stdarg.h>|\\<varargs.h>*|  \n  \n \\* Required for UNIX V compatibility.  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt__vsprintf_p.c  \n// This program uses vsprintf_p to write to a buffer.  \n// The size of the buffer is determined by _vscprintf_p.  \n  \n#include <stdlib.h>  \n#include <stdio.h>  \n#include <stdarg.h>  \n  \nvoid example( char * format, ... )  \n{  \n    va_list  args;  \n    int      len;  \n    char     *buffer = NULL;  \n  \n    va_start( args, format );  \n  \n    // _vscprintf doesn't count the   \n    // null terminating string so we add 1.  \n    len = _vscprintf_p( format, args ) + 1;  \n  \n    // Allocate memory for our buffer  \n    buffer = (char*)malloc( len * sizeof(char) );  \n    if (buffer)  \n    {  \n        _vsprintf_p( buffer, len, format, args );  \n        puts( buffer );  \n        free( buffer );  \n    }  \n}  \n  \nint main( void )  \n{  \n    // First example  \n    example( \"%2$d %1$c %3$d\", '<', 123, 456 );  \n  \n    // Second example  \n    example( \"%s\", \"This is a string\" );  \n}  \n```  \n  \n```Output  \n123 < 456  \nThis is a string  \n```  \n  \n## .NET Framework Equivalent  \n [System::String::Format](https://msdn.microsoft.com/en-us/library/system.string.format.aspx)  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [vprintf Functions](../../c-runtime-library/vprintf-functions.md)   \n [Format Specification Syntax: printf and wprintf Functions](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)   \n [fprintf, _fprintf_l, fwprintf, _fwprintf_l](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)   \n [printf, _printf_l, wprintf, _wprintf_l](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)   \n [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)   \n [va_arg, va_copy, va_end, va_start](../../c-runtime-library/reference/va-arg-va-copy-va-end-va-start.md)"}