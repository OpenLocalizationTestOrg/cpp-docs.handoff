{"nodes":[{"pos":[12,75],"content":"Exception Handling  (C++ Component Extensions) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Exception Handling  (C++ Component Extensions) | Microsoft Docs","pos":[0,63]}]},{"content":"Exception Handling  (C++ Component Extensions)","pos":[857,903]},{"content":"Applications compiled with the <bpt id=\"p1\">**</bpt>/ZW<ept id=\"p1\">**</ept> compiler option or <bpt id=\"p2\">**</bpt>/clr<ept id=\"p2\">**</ept> compiler option both use <bpt id=\"p3\">*</bpt>exceptions<ept id=\"p3\">*</ept> to handle unexpected errors during program execution.","pos":[904,1062],"source":"Applications compiled with the **/ZW** compiler option or **/clr** compiler option both use *exceptions* to handle unexpected errors during program execution."},{"content":"The following topics discuss exception handling in either C++/CX or C++/CLI applications.","pos":[1063,1152]},{"content":"In This Section","pos":[1161,1176]},{"content":"Basic Concepts in Using Managed Exceptions","pos":[1181,1223]},{"content":"Describes throwing exceptions and using <ph id=\"ph1\">`try`/`catch`</ph> blocks.","pos":[1285,1346],"source":" Describes throwing exceptions and using `try`/`catch` blocks."},{"content":"Differences in Exception Handling Behavior Under /CLR","pos":[1354,1407]},{"content":"Discusses the differences from the standard behavior of C++ exception handling.","pos":[1479,1558]},{"content":"finally","pos":[1566,1573]},{"content":"Discusses how to use the finally keyword.","pos":[1600,1641]},{"content":"How to: Define and Install a Global Exception Handler","pos":[1649,1702]},{"content":"Demonstrates how unhandled exceptions can be captured.","pos":[1774,1828]},{"content":"How to: Catch Exceptions in Native Code Thrown from MSIL","pos":[1836,1892]},{"content":"Discusses how to catch CLR and C++ exceptions in native code.","pos":[1967,2028]},{"content":"How to: Define and Install a Global Exception Handler","pos":[2036,2089]},{"content":"Demonstrates how to catch all unhandled exceptions.","pos":[2161,2212]},{"content":"Related Sections","pos":[2221,2237]},{"content":"Exception Handling","pos":[2242,2260]},{"content":"Describes exception handling in C++.","pos":[2309,2345]},{"content":"See Also","pos":[2354,2362]},{"content":"Component Extensions for Runtime Platforms","pos":[2367,2409]}],"content":"---\ntitle: \"Exception Handling  (C++ Component Extensions) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"structured exception handling, managed exceptions\"\n  - \"Exception class, managed applications\"\n  - \"exception handling\"\n  - \"C++ exception handling\"\n  - \"exception handling, types of\"\n  - \"managed exceptions\"\n  - \"System::Exception class in managed applications\"\nms.assetid: ccb11fe8-6938-41ac-b477-a183e85865b9\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Exception Handling  (C++ Component Extensions)\nApplications compiled with the **/ZW** compiler option or **/clr** compiler option both use *exceptions* to handle unexpected errors during program execution. The following topics discuss exception handling in either C++/CX or C++/CLI applications.  \n  \n## In This Section  \n [Basic Concepts in Using Managed Exceptions](../dotnet/basic-concepts-in-using-managed-exceptions.md)  \n Describes throwing exceptions and using `try`/`catch` blocks.  \n  \n [Differences in Exception Handling Behavior Under /CLR](../dotnet/differences-in-exception-handling-behavior-under-clr.md)  \n Discusses the differences from the standard behavior of C++ exception handling.  \n  \n [finally](../dotnet/finally.md)  \n Discusses how to use the finally keyword.  \n  \n [How to: Define and Install a Global Exception Handler](../dotnet/how-to-define-and-install-a-global-exception-handler.md)  \n Demonstrates how unhandled exceptions can be captured.  \n  \n [How to: Catch Exceptions in Native Code Thrown from MSIL](../dotnet/how-to-catch-exceptions-in-native-code-thrown-from-msil.md)  \n Discusses how to catch CLR and C++ exceptions in native code.  \n  \n [How to: Define and Install a Global Exception Handler](../dotnet/how-to-define-and-install-a-global-exception-handler.md)  \n Demonstrates how to catch all unhandled exceptions.  \n  \n## Related Sections  \n [Exception Handling](../cpp/exception-handling-in-visual-cpp.md)  \n Describes exception handling in C++.  \n  \n## See Also  \n [Component Extensions for Runtime Platforms](../windows/component-extensions-for-runtime-platforms.md)"}