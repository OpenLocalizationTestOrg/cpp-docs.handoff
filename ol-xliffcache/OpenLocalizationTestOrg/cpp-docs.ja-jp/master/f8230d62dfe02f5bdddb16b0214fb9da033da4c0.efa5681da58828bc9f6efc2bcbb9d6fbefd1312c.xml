{"nodes":[{"pos":[12,49],"content":"Compiler Error C2764 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Error C2764 | Microsoft Docs","pos":[0,37]}]},{"content":"Compiler Error C2764","pos":[597,617]},{"content":"'param' : template parameter not used or deducible in partial specialization 'specialization'","pos":[618,711]},{"content":"A template parameter is not used in a partial specialization.","pos":[718,779]},{"content":"This makes the partial specialization unusable because the template parameter cannot be deduced.","pos":[780,876]},{"content":"Example","pos":[885,892]},{"content":"The following sample generates C2764:","pos":[896,933]}],"content":"---\ntitle: \"Compiler Error C2764 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"C2764\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C2764\"\nms.assetid: 3754f5af-e094-4425-be20-d0c9a9b5baec\ncaps.latest.revision: 9\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compiler Error C2764\n'param' : template parameter not used or deducible in partial specialization 'specialization'  \n  \n A template parameter is not used in a partial specialization. This makes the partial specialization unusable because the template parameter cannot be deduced.  \n  \n## Example  \n The following sample generates C2764:  \n  \n```  \n// C2764.cpp  \n#include <stdio.h>  \ntemplate <class T1, class T2>  \nstruct S  {  \n   int m_i;  \n};  \n  \ntemplate <class T1, class T2>  \nstruct S<int, T2*> {   // C2764  \n// try the following line instead  \n// struct S<T1(*)(T2), T2*> {  \n   char m_c;  \n};  \n  \nint main() {  \n   S<int, char> s1;  \n   S<void (*)(short), short *> s2;  \n   s2.m_c = 10;  \n   s1.m_i = s2.m_c;  \n   printf_s(\"%d\\n\", s1.m_i);  \n}  \n```"}