{"nodes":[{"pos":[12,55],"content":"poisson_distribution Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"poisson_distribution Class | Microsoft Docs","pos":[0,43]}]},{"content":"poisson_distribution Class","pos":[850,876]},{"content":"Generates a Poisson distribution.","pos":[877,910]},{"content":"Syntax","pos":[919,925]},{"content":"Parameters","pos":[1593,1603]},{"content":"The integer result type, defaults to <ph id=\"ph1\">`int`</ph>.","pos":[1620,1663],"source":" The integer result type, defaults to `int`."},{"content":"For possible types, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","pos":[1664,1731],"source":" For possible types, see [\\<random>](../standard-library/random.md)."},{"content":"Remarks","pos":[1740,1747]},{"content":"The template class describes a distribution that produces values of a user-specified integral type with a Poisson distribution.","pos":[1751,1878]},{"content":"The following table links to articles about individual members.","pos":[1879,1942]},{"content":"poisson_distribution::poisson_distribution","pos":[1967,2009]},{"content":"poisson_distribution::param_type","pos":[2156,2188]},{"pos":[2232,2322],"content":"The property function <ph id=\"ph1\">`mean()`</ph> returns the value for stored distribution parameter <ph id=\"ph2\">`mean`</ph>.","source":"The property function `mean()` returns the value for stored distribution parameter `mean`."},{"pos":[2329,2443],"content":"For more information about distribution classes and their members, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","source":"For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md)."},{"pos":[2450,2610],"content":"For detailed information about the Poisson distribution, see the Wolfram MathWorld article <bpt id=\"p1\">[</bpt>Poisson Distribution<ept id=\"p1\">](http://go.microsoft.com/fwlink/LinkId=401112)</ept>.","source":"For detailed information about the Poisson distribution, see the Wolfram MathWorld article [Poisson Distribution](http://go.microsoft.com/fwlink/LinkId=401112)."},{"content":"Example","pos":[2619,2626]},{"content":"Output","pos":[4179,4185]},{"content":"First test:","pos":[4189,4200]},{"content":"Second test:","pos":[4644,4656]},{"content":"Requirements","pos":[5164,5176]},{"pos":[5180,5201],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>random&gt;","source":"**Header:** \\<random>"},{"pos":[5208,5226],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[5295,5337],"content":"poisson_distribution::poisson_distribution"},{"content":"Constructs the distribution.","pos":[5341,5369]},{"content":"Parameters","pos":[5505,5515]},{"content":"The <ph id=\"ph1\">`mean`</ph> distribution parameter.","pos":[5529,5563],"source":" The `mean` distribution parameter."},{"content":"The parameter structure used to construct the distribution.","pos":[5580,5639]},{"content":"Remarks","pos":[5649,5656]},{"pos":[5662,5675],"content":"Precondition:"},{"pos":[5697,5783],"content":"The first constructor constructs an object whose stored <ph id=\"ph1\">`p`</ph> value holds the value <ph id=\"ph2\">`p`</ph>.","source":"The first constructor constructs an object whose stored `p` value holds the value `p`."},{"content":"The second constructor constructs an object whose stored parameters are initialized from <ph id=\"ph1\">`parm`</ph>.","pos":[5790,5886],"source":"The second constructor constructs an object whose stored parameters are initialized from `parm`."},{"content":"You can obtain and set the current parameters of an existing distribution by calling the <ph id=\"ph1\">`param()`</ph> member function.","pos":[5887,6002],"source":" You can obtain and set the current parameters of an existing distribution by calling the `param()` member function."},{"pos":[6061,6093],"content":"poisson_distribution::param_type"},{"content":"Stores the parameters of the distribution.","pos":[6097,6139]},{"content":"Parameters","pos":[6427,6437]},{"pos":[6441,6538],"content":"See parent topic <bpt id=\"p1\">[</bpt>poisson_distribution Class<ept id=\"p1\">](../standard-library/poisson-distribution-class.md)</ept>.","source":"See parent topic [poisson_distribution Class](../standard-library/poisson-distribution-class.md)."},{"content":"Remarks","pos":[6548,6555]},{"pos":[6561,6574],"content":"Precondition:"},{"pos":[6596,6839],"content":"This structure can be passed to the distribution's class constructor at instantiation, to the <ph id=\"ph1\">`param()`</ph> member function to set the stored parameters of an existing distribution, and to <ph id=\"ph2\">`operator()`</ph> to be used in place of the stored parameters.","source":"This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters."},{"content":"See Also","pos":[6848,6856]},{"content":"random&gt;","pos":[6863,6870],"source":"random>"}],"content":"---\ntitle: \"poisson_distribution Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"poisson_distribution\"\n  - \"std.tr1.poisson_distribution\"\n  - \"random/std::tr1::poisson_distribution\"\n  - \"std::tr1::poisson_distribution\"\n  - \"tr1.poisson_distribution\"\n  - \"tr1::poisson_distribution\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"poisson_distribution class [TR1]\"\n  - \"poisson_distribution class\"\nms.assetid: 09614281-349a-45f7-8e95-c0196be0a937\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# poisson_distribution Class\nGenerates a Poisson distribution.  \n  \n## Syntax  \n```  \nclass poisson_distribution  \n   {  \n   public:  // types  \n   typedef IntType result_type;  \n   struct param_type;  // constructors and reset functions  \n   explicit poisson_distribution(double mean = 1.0);\n   explicit poisson_distribution(const param_type& parm);\n   void reset();\n   // generating functions  \n   template <class URNG>  \n   result_type operator()(URNG& gen);\n   template <class URNG>  \n   result_type operator()(URNG& gen, const param_type& parm);\n   // property functions  \n   double mean() const;\n   param_type param() const;\n   void param(const param_type& parm);\n   result_type min() const;\n   result_type max() const;\n   };  \n ``` \n#### Parameters  \n `IntType`  \n The integer result type, defaults to `int`. For possible types, see [\\<random>](../standard-library/random.md).  \n  \n## Remarks  \n The template class describes a distribution that produces values of a user-specified integral type with a Poisson distribution. The following table links to articles about individual members.  \n  \n||||  \n|-|-|-|  \n|[poisson_distribution::poisson_distribution](#poisson_distribution__poisson_distribution)|`poisson_distribution::mean`|`poisson_distribution::param`|  \n|`poisson_distribution::operator()`||[poisson_distribution::param_type](#poisson_distribution__param_type)|  \n  \n The property function `mean()` returns the value for stored distribution parameter `mean`.  \n  \n For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md).  \n  \n For detailed information about the Poisson distribution, see the Wolfram MathWorld article [Poisson Distribution](http://go.microsoft.com/fwlink/LinkId=401112).  \n  \n## Example  \n  \n```cpp  \n// compile with: /EHsc /W4  \n#include <random>   \n#include <iostream>  \n#include <iomanip>  \n#include <string>  \n#include <map>  \n  \nvoid test(const double p, const int s) {  \n  \n    // uncomment to use a non-deterministic generator  \n    //    std::random_device gen;  \n    std::mt19937 gen(1701);  \n  \n    std::poisson_distribution<> distr(p);  \n  \n    std::cout << std::endl;  \n    std::cout << \"min() == \" << distr.min() << std::endl;  \n    std::cout << \"max() == \" << distr.max() << std::endl;  \n    std::cout << \"p() == \" << std::fixed << std::setw(11) << std::setprecision(10) << distr.mean() << std::endl;  \n  \n    // generate the distribution as a histogram  \n    std::map<int, int> histogram;  \n    for (int i = 0; i < s; ++i) {  \n        ++histogram[distr(gen)];  \n    }  \n  \n    // print results  \n    std::cout << \"Distribution for \" << s << \" samples:\" << std::endl;  \n    for (const auto& elem : histogram) {  \n        std::cout << std::setw(5) << elem.first << ' ' << std::string(elem.second, ':') << std::endl;  \n    }  \n    std::cout << std::endl;  \n}  \n  \nint main()  \n{  \n    double p_dist = 1.0;  \n  \n    int samples = 100;  \n  \n    std::cout << \"Use CTRL-Z to bypass data entry and run using default values.\" << std::endl;  \n    std::cout << \"Enter a floating point value for the 'mean' distribution parameter (must be greater than zero): \";  \n    std::cin >> p_dist;  \n    std::cout << \"Enter an integer value for the sample count: \";  \n    std::cin >> samples;  \n  \n    test(p_dist, samples);  \n}  \n  \n```  \n  \n## Output  \n First test:  \n  \n```Output  \nUse CTRL-Z to bypass data entry and run using default values.Enter a floating point value for the 'mean' distribution parameter (must be greater than zero): 1Enter an integer value for the sample count: 100min() == 0max() == 2147483647p() == 1.0000000000Distribution for 100 samples:    0 ::::::::::::::::::::::::::::::    1 ::::::::::::::::::::::::::::::::::::::    2 :::::::::::::::::::::::    3 ::::::::    5 :  \n```  \n  \n Second test:  \n  \n```Output  \nUse CTRL-Z to bypass data entry and run using default values.Enter a floating point value for the 'mean' distribution parameter (must be greater than zero): 10Enter an integer value for the sample count: 100min() == 0max() == 2147483647p() == 10.0000000000Distribution for 100 samples:    3 :    4 ::    5 ::    6 ::::::::    7 ::::    8 ::::::::    9 ::::::::::::::   10 ::::::::::::   11 ::::::::::::::::   12 :::::::::::::::   13 ::::::::   14 ::::::   15 :   16 ::   17 :  \n```  \n  \n## Requirements  \n **Header:** \\<random>  \n  \n **Namespace:** std  \n  \n##  <a name=\"poisson_distribution__poisson_distribution\"></a>  poisson_distribution::poisson_distribution  \n Constructs the distribution.  \n  \n```  \nexplicit poisson_distribution(RealType mean = 1.0);\n\n \nexplicit binomial_distribution(const param_type& parm);\n```  \n  \n### Parameters  \n `mean`  \n The `mean` distribution parameter.  \n  \n `parm`  \n The parameter structure used to construct the distribution.  \n  \n### Remarks  \n **Precondition:** `0.0 < mean`  \n  \n The first constructor constructs an object whose stored `p` value holds the value `p`.  \n  \n The second constructor constructs an object whose stored parameters are initialized from `parm`. You can obtain and set the current parameters of an existing distribution by calling the `param()` member function.  \n  \n##  <a name=\"poisson_distribution__param_type\"></a>  poisson_distribution::param_type  \n Stores the parameters of the distribution.  \n```cpp    \nstruct param_type {  \n   typedef poisson_distribution<IntType> distribution_type;  \n   param_type(double mean = 1.0);\n   RealType mean() const;\n   ....  \n   bool operator==(const param_type& right) const;\n   bool operator!=(const param_type& right) const;\n   };  \n```  \n### Parameters  \n See parent topic [poisson_distribution Class](../standard-library/poisson-distribution-class.md).  \n  \n### Remarks  \n **Precondition:** `0.0 < mean`  \n  \n This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters.  \n  \n## See Also  \n [\\<random>](../standard-library/random.md)\n\n"}