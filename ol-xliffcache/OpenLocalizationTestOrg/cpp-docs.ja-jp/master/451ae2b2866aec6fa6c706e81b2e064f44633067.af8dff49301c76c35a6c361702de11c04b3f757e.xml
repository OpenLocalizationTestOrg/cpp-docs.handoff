{"nodes":[{"pos":[12,48],"content":"random_device Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"random_device Class | Microsoft Docs","pos":[0,36]}]},{"pos":[787,806],"content":"random_device Class","linkify":"random_device Class","nodes":[{"content":"random_device Class","pos":[0,19]}]},{"content":"Generates a random sequence from an external device.","pos":[807,859]},{"pos":[868,874],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"content":"class random_device {","pos":[880,901]},{"content":"public:","pos":[907,914]},{"content":"typedef unsigned int result_type;  // cosntructor explicit random_device(const std::string&amp; token = \"\"); // properties static result_type min(); static result_type max(); double entropy() const; // generate result_type operator()(); // no-copy functions random_device(const random_device&amp;) = delete;","pos":[920,1234],"source":"   typedef unsigned int result_type;  // cosntructor explicit random_device(const std::string& token = \"\");\n   // properties static result_type min();\n   static result_type max();\n   double entropy() const;\n   // generate result_type operator()();\n   // no-copy functions random_device(const random_device&) = delete;"},{"content":"void operator=(const random_device&amp;) = delete;","pos":[1240,1286],"source":"   void operator=(const random_device&) = delete;"},{"content":"};","pos":[1292,1294]},{"pos":[1303,1310],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1331,1392],"content":"<bpt id=\"p1\">[</bpt>random_device::random_device<ept id=\"p1\">](#random_device__random_device)</ept>","source":"[random_device::random_device](#random_device__random_device)"},{"pos":[1393,1442],"content":"<bpt id=\"p1\">[</bpt>random_device::entropy<ept id=\"p1\">](#random_device__entropy)</ept>","source":"[random_device::entropy](#random_device__entropy)"},{"pos":[1447,1502],"content":"<bpt id=\"p1\">[</bpt>random_device::operator()<ept id=\"p1\">](#random_device__operator__)</ept>","source":"[random_device::operator()](#random_device__operator__)"},{"pos":[1513,1520],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The class describes a source of random numbers, and is allowed but not required to be non-deterministic or cryptographically secure by the ISO C++ Standard.","pos":[1524,1680]},{"content":"In the Visual Studio implementation the values produced are non-deterministic and cryptographically secure, but runs more slowly than generators created from engines and engine adaptors (such as <bpt id=\"p1\">[</bpt>mersenne_twister_engine<ept id=\"p1\">](../standard-library/mersenne-twister-engine-class.md)</ept>, the high quality and fast engine of choice for most applications).","pos":[1681,2023],"source":" In the Visual Studio implementation the values produced are non-deterministic and cryptographically secure, but runs more slowly than generators created from engines and engine adaptors (such as [mersenne_twister_engine](../standard-library/mersenne-twister-engine-class.md), the high quality and fast engine of choice for most applications)."},{"pos":[2030,2123],"content":"<ph id=\"ph1\">`random_device`</ph> results are uniformly distributed in the closed range [ <ph id=\"ph2\">`0, 2`</ph><bpt id=\"p1\">&lt;sup&gt;</bpt>32<ept id=\"p1\">&lt;/sup&gt;</ept>).","source":"`random_device` results are uniformly distributed in the closed range [ `0, 2`<sup>32</sup>)."},{"pos":[2130,2197],"content":"<ph id=\"ph1\">`random_device`</ph> is not guaranteed to result in a non-blocking call.","source":"`random_device` is not guaranteed to result in a non-blocking call."},{"content":"Generally, <ph id=\"ph1\">`random_device`</ph> is used to seed other generators created with engines or engine adaptors.","pos":[2204,2304],"source":"Generally, `random_device` is used to seed other generators created with engines or engine adaptors."},{"content":"For more information, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","pos":[2305,2374],"source":" For more information, see [\\<random>](../standard-library/random.md)."},{"pos":[2383,2390],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code demonstrates basic functionality of this class and example results.","pos":[2394,2480]},{"content":"Because of the non-deterministic nature of <ph id=\"ph1\">`random_device`</ph>, the random values shown in the <bpt id=\"p1\">**</bpt>Output<ept id=\"p1\">**</ept> section will not match your results.","pos":[2481,2619],"source":" Because of the non-deterministic nature of `random_device`, the random values shown in the **Output** section will not match your results."},{"content":"This is normal and expected.","pos":[2620,2648]},{"pos":[3176,3187],"content":"<bpt id=\"p1\">**</bpt>Output:<ept id=\"p1\">**</ept>","source":"**Output:**"},{"content":"This example is simplistic and not representative of the general use-case for this generator.","pos":[3372,3465]},{"content":"For a more representative code example, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","pos":[3466,3553],"source":" For a more representative code example, see [\\<random>](../standard-library/random.md)."},{"pos":[3562,3574],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3578,3599],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>random&gt;","source":"**Header:** \\<random>"},{"pos":[3606,3624],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[3634,3707],"content":"<bpt id=\"p1\">&lt;a name=\"random_device__random_device\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  random_device::random_device","linkify":"<a name=\"random_device__random_device\"></a>  random_device::random_device","source":"<a name=\"random_device__random_device\"></a>  random_device::random_device"},{"content":"Constructs the generator.","pos":[3711,3736]},{"pos":[3801,3808],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The constructor initializes the generator as needed, ignoring the string parameter.","pos":[3812,3895]},{"content":"Throws a value of an implementation-defined type derived from <bpt id=\"p1\">[</bpt>exception<ept id=\"p1\">](../standard-library/exception-class.md)</ept> if the <ph id=\"ph1\">`random_device`</ph> could not be initialized.","pos":[3896,4058],"source":" Throws a value of an implementation-defined type derived from [exception](../standard-library/exception-class.md) if the `random_device` could not be initialized."},{"pos":[4065,4147],"content":"For example code, see <bpt id=\"p1\">[</bpt>random_device<ept id=\"p1\">](../standard-library/random-device-class.md)</ept>.","source":"For example code, see [random_device](../standard-library/random-device-class.md)."},{"pos":[4157,4218],"content":"<bpt id=\"p1\">&lt;a name=\"random_device__entropy\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  random_device::entropy","linkify":"<a name=\"random_device__entropy\"></a>  random_device::entropy","source":"<a name=\"random_device__entropy\"></a>  random_device::entropy"},{"content":"Estimates the randomness of the source.","pos":[4222,4261]},{"pos":[4321,4328],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The member function returns an estimate of the randomness of the source, as measured in bits.","pos":[4332,4425]},{"pos":[4432,4514],"content":"For example code, see <bpt id=\"p1\">[</bpt>random_device<ept id=\"p1\">](../standard-library/random-device-class.md)</ept>.","source":"For example code, see [random_device](../standard-library/random-device-class.md)."},{"pos":[4524,4591],"content":"<bpt id=\"p1\">&lt;a name=\"random_device__operator__\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  random_device::operator()","linkify":"<a name=\"random_device__operator__\"></a>  random_device::operator()","source":"<a name=\"random_device__operator__\"></a>  random_device::operator()"},{"content":"Returns a random value.","pos":[4595,4618]},{"pos":[4669,4676],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Returns values uniformly distributed in the closed interval [ <ph id=\"ph1\">`min, max`</ph>] as determined by member functions <ph id=\"ph2\">`min()`</ph> and <ph id=\"ph3\">`max()`</ph>.","pos":[4680,4808],"source":"Returns values uniformly distributed in the closed interval [ `min, max`] as determined by member functions `min()` and `max()`."},{"content":"Throws a value of an implementation-defined type derived from <bpt id=\"p1\">[</bpt>exception<ept id=\"p1\">](../standard-library/exception-class.md)</ept> if a random number could not be obtained.","pos":[4809,4964],"source":" Throws a value of an implementation-defined type derived from [exception](../standard-library/exception-class.md) if a random number could not be obtained."},{"pos":[4971,5053],"content":"For example code, see <bpt id=\"p1\">[</bpt>random_device<ept id=\"p1\">](../standard-library/random-device-class.md)</ept>.","source":"For example code, see [random_device](../standard-library/random-device-class.md)."},{"pos":[5062,5070],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[5074,5116],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>","source":"[\\<random>](../standard-library/random.md)"}],"content":"---\ntitle: \"random_device Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"random_device\"\n  - \"random/std::tr1::random_device\"\n  - \"tr1.random_device\"\n  - \"std::tr1::random_device\"\n  - \"std.tr1.random_device\"\n  - \"tr1::random_device\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"random_device class [TR1]\"\n  - \"random_device class\"\nms.assetid: 4393d515-0cb6-4e0d-a2ba-c780f05dc1bf\ncaps.latest.revision: 27\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# random_device Class\nGenerates a random sequence from an external device.  \n  \n## Syntax  \n  \nclass random_device {  \n   public:  \n   typedef unsigned int result_type;  // cosntructor explicit random_device(const std::string& token = \"\");\n   // properties static result_type min();\n   static result_type max();\n   double entropy() const;\n   // generate result_type operator()();\n   // no-copy functions random_device(const random_device&) = delete;  \n   void operator=(const random_device&) = delete;  \n   };  \n  \n## Members  \n  \n|||  \n|-|-|  \n|[random_device::random_device](#random_device__random_device)|[random_device::entropy](#random_device__entropy)|  \n|[random_device::operator()](#random_device__operator__)||  \n  \n## Remarks  \n The class describes a source of random numbers, and is allowed but not required to be non-deterministic or cryptographically secure by the ISO C++ Standard. In the Visual Studio implementation the values produced are non-deterministic and cryptographically secure, but runs more slowly than generators created from engines and engine adaptors (such as [mersenne_twister_engine](../standard-library/mersenne-twister-engine-class.md), the high quality and fast engine of choice for most applications).  \n  \n `random_device` results are uniformly distributed in the closed range [ `0, 2`<sup>32</sup>).  \n  \n `random_device` is not guaranteed to result in a non-blocking call.  \n  \n Generally, `random_device` is used to seed other generators created with engines or engine adaptors. For more information, see [\\<random>](../standard-library/random.md).  \n  \n## Example  \n The following code demonstrates basic functionality of this class and example results. Because of the non-deterministic nature of `random_device`, the random values shown in the **Output** section will not match your results. This is normal and expected.  \n  \n```cpp  \n// random_device_engine.cpp   \n// cl.exe /W4 /nologo /EHsc /MTd   \n#include <random>   \n#include <iostream>   \nusing namespace std;  \n  \nint main()   \n{   \n    random_device gen;   \n  \n    cout << \"entropy == \" << gen.entropy() << endl;   \n    cout << \"min == \" << gen.min() << endl;   \n    cout << \"max == \" << gen.max() << endl;   \n  \n    cout << \"a random value == \" << gen() << endl;   \n    cout << \"a random value == \" << gen() << endl;   \n    cout << \"a random value == \" << gen() << endl;   \n}  \n```  \n  \n **Output:**  \n  \n```Output  \nentropy == 32min == 0max == 429496729510 random values:418382918114543916081176278697246883009639593472221803123400133959054513048968776040884902293276253  \n```  \n  \n This example is simplistic and not representative of the general use-case for this generator. For a more representative code example, see [\\<random>](../standard-library/random.md).  \n  \n## Requirements  \n **Header:** \\<random>  \n  \n **Namespace:** std  \n  \n##  <a name=\"random_device__random_device\"></a>  random_device::random_device  \n Constructs the generator.  \n  \n```  \nrandom_device(const std::string& = \"\");\n```  \n  \n### Remarks  \n The constructor initializes the generator as needed, ignoring the string parameter. Throws a value of an implementation-defined type derived from [exception](../standard-library/exception-class.md) if the `random_device` could not be initialized.  \n  \n For example code, see [random_device](../standard-library/random-device-class.md).  \n  \n##  <a name=\"random_device__entropy\"></a>  random_device::entropy  \n Estimates the randomness of the source.  \n  \n```  \ndouble entropy() const noexcept;  \n```  \n  \n### Remarks  \n The member function returns an estimate of the randomness of the source, as measured in bits.  \n  \n For example code, see [random_device](../standard-library/random-device-class.md).  \n  \n##  <a name=\"random_device__operator__\"></a>  random_device::operator()  \n Returns a random value.  \n  \n```  \nresult_type operator()();\n```  \n  \n### Remarks  \n Returns values uniformly distributed in the closed interval [ `min, max`] as determined by member functions `min()` and `max()`. Throws a value of an implementation-defined type derived from [exception](../standard-library/exception-class.md) if a random number could not be obtained.  \n  \n For example code, see [random_device](../standard-library/random-device-class.md).  \n  \n## See Also  \n [\\<random>](../standard-library/random.md)\n\n"}