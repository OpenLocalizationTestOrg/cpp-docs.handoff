<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">146b56f773e0e757e1bbe6b9f01eea17ef553dcc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\c-compound-assignment.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">83fcaf2e774da8dc95b6f6033c6cf59444484f02</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">35e50ea1ee92a452fd26b9bb7430adcb1163f0e2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>C Compound Assignment | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>C Compound Assignment</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The compound-assignment operators combine the simple-assignment operator with another binary operator.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Compound-assignment operators perform the operation specified by the additional operator, then assign the result to the left operand.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, a compound-assignment expression such as</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>can be understood as</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>However, the compound-assignment expression is not equivalent to the expanded version because the compound-assignment expression evaluates <bpt id="p1">*</bpt>expression1<ept id="p1">*</ept> only once, while the expanded version evaluates <bpt id="p2">*</bpt>expression1<ept id="p2">*</ept> twice: in the addition operation and in the assignment operation.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The operands of a compound-assignment operator must be of integral or floating type.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Each compound-assignment operator performs the conversions that the corresponding binary operator performs and restricts the types of its operands accordingly.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The addition-assignment (<ph id="ph1">`+=`</ph>) and subtraction-assignment (<bpt id="p1">**</bpt>â€“=<ept id="p1">**</ept>) operators can also have a left operand of pointer type, in which case the right-hand operand must be of integral type.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The result of a compound-assignment operation has the value and type of the left operand.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In this example, a bitwise-inclusive-AND operation is performed on <ph id="ph1">`n`</ph> and <ph id="ph2">`MASK`</ph>, and the result is assigned to <ph id="ph3">`n`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The manifest constant <ph id="ph1">`MASK`</ph> is defined with a <bpt id="p1">[</bpt>#define<ept id="p1">](../preprocessor/hash-define-directive-c-cpp.md)</ept> preprocessor directive.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>C Assignment Operators</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>