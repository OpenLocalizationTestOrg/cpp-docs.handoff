{"nodes":[{"pos":[12,45],"content":"CWinThread Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CWinThread Class | Microsoft Docs","pos":[0,33]}]},{"pos":[695,711],"content":"CWinThread Class","linkify":"CWinThread Class","nodes":[{"content":"CWinThread Class","pos":[0,16]}]},{"content":"Represents a thread of execution within an application.","pos":[712,767]},{"pos":[776,782],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[845,852],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[862,881],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[888,892]},{"content":"Description","pos":[893,904]},{"pos":[942,991],"content":"<bpt id=\"p1\">[</bpt>CWinThread::CWinThread<ept id=\"p1\">](#cwinthread__cwinthread)</ept>","source":"[CWinThread::CWinThread](#cwinthread__cwinthread)"},{"pos":[992,1025],"content":"Constructs a <ph id=\"ph1\">`CWinThread`</ph> object.","source":"Constructs a `CWinThread` object."},{"pos":[1036,1050],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1057,1061]},{"content":"Description","pos":[1062,1073]},{"pos":[1111,1164],"content":"<bpt id=\"p1\">[</bpt>CWinThread::CreateThread<ept id=\"p1\">](#cwinthread__createthread)</ept>","source":"[CWinThread::CreateThread](#cwinthread__createthread)"},{"pos":[1165,1207],"content":"Starts execution of a <ph id=\"ph1\">`CWinThread`</ph> object.","source":"Starts execution of a `CWinThread` object."},{"pos":[1212,1265],"content":"<bpt id=\"p1\">[</bpt>CWinThread::ExitInstance<ept id=\"p1\">](#cwinthread__exitinstance)</ept>","source":"[CWinThread::ExitInstance](#cwinthread__exitinstance)"},{"content":"Override to clean up when your thread terminates.","pos":[1266,1315]},{"pos":[1320,1369],"content":"<bpt id=\"p1\">[</bpt>CWinThread::GetMainWnd<ept id=\"p1\">](#cwinthread__getmainwnd)</ept>","source":"[CWinThread::GetMainWnd](#cwinthread__getmainwnd)"},{"content":"Retrieves a pointer to the main window for the thread.","pos":[1370,1424]},{"pos":[1429,1492],"content":"<bpt id=\"p1\">[</bpt>CWinThread::GetThreadPriority<ept id=\"p1\">](#cwinthread__getthreadpriority)</ept>","source":"[CWinThread::GetThreadPriority](#cwinthread__getthreadpriority)"},{"content":"Gets the priority of the current thread.","pos":[1493,1533]},{"pos":[1538,1591],"content":"<bpt id=\"p1\">[</bpt>CWinThread::InitInstance<ept id=\"p1\">](#cwinthread__initinstance)</ept>","source":"[CWinThread::InitInstance](#cwinthread__initinstance)"},{"content":"Override to perform thread instance initialization.","pos":[1592,1643]},{"pos":[1648,1703],"content":"<bpt id=\"p1\">[</bpt>CWinThread::IsIdleMessage<ept id=\"p1\">](#cwinthread__isidlemessage)</ept>","source":"[CWinThread::IsIdleMessage](#cwinthread__isidlemessage)"},{"content":"Checks for special messages.","pos":[1704,1732]},{"pos":[1737,1778],"content":"<bpt id=\"p1\">[</bpt>CWinThread::OnIdle<ept id=\"p1\">](#cwinthread__onidle)</ept>","source":"[CWinThread::OnIdle](#cwinthread__onidle)"},{"content":"Override to perform thread-specific idle-time processing.","pos":[1779,1836]},{"pos":[1841,1904],"content":"<bpt id=\"p1\">[</bpt>CWinThread::PostThreadMessage<ept id=\"p1\">](#cwinthread__postthreadmessage)</ept>","source":"[CWinThread::PostThreadMessage](#cwinthread__postthreadmessage)"},{"pos":[1905,1952],"content":"Posts a message to another <ph id=\"ph1\">`CWinThread`</ph> object.","source":"Posts a message to another `CWinThread` object."},{"pos":[1957,2024],"content":"<bpt id=\"p1\">[</bpt>CWinThread::PreTranslateMessage<ept id=\"p1\">](#cwinthread__pretranslatemessage)</ept>","source":"[CWinThread::PreTranslateMessage](#cwinthread__pretranslatemessage)"},{"pos":[2025,2255],"content":"Filters messages before they are dispatched to the Windows functions <bpt id=\"p1\">[</bpt>TranslateMessage<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms644955)</ept> and <bpt id=\"p2\">[</bpt>DispatchMessage<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms644934)</ept>.","source":"Filters messages before they are dispatched to the Windows functions [TranslateMessage](http://msdn.microsoft.com/library/windows/desktop/ms644955) and [DispatchMessage](http://msdn.microsoft.com/library/windows/desktop/ms644934)."},{"pos":[2260,2329],"content":"<bpt id=\"p1\">[</bpt>CWinThread::ProcessMessageFilter<ept id=\"p1\">](#cwinthread__processmessagefilter)</ept>","source":"[CWinThread::ProcessMessageFilter](#cwinthread__processmessagefilter)"},{"content":"Intercepts certain messages before they reach the application.","pos":[2330,2392]},{"pos":[2397,2472],"content":"<bpt id=\"p1\">[</bpt>CWinThread::ProcessWndProcException<ept id=\"p1\">](#cwinthread__processwndprocexception)</ept>","source":"[CWinThread::ProcessWndProcException](#cwinthread__processwndprocexception)"},{"content":"Intercepts all unhandled exceptions thrown by the thread's message and command handlers.","pos":[2473,2561]},{"pos":[2566,2617],"content":"<bpt id=\"p1\">[</bpt>CWinThread::PumpMessage<ept id=\"p1\">](#cwinthread__pumpmessage)</ept>","source":"[CWinThread::PumpMessage](#cwinthread__pumpmessage)"},{"content":"Contains the thread's message loop.","pos":[2618,2653]},{"pos":[2658,2711],"content":"<bpt id=\"p1\">[</bpt>CWinThread::ResumeThread<ept id=\"p1\">](#cwinthread__resumethread)</ept>","source":"[CWinThread::ResumeThread](#cwinthread__resumethread)"},{"content":"Decrements a thread's suspend count.","pos":[2712,2748]},{"pos":[2753,2788],"content":"<bpt id=\"p1\">[</bpt>CWinThread::Run<ept id=\"p1\">](#cwinthread__run)</ept>","source":"[CWinThread::Run](#cwinthread__run)"},{"content":"Controlling function for threads with a message pump.","pos":[2789,2842]},{"content":"Override to customize the default message loop.","pos":[2843,2890]},{"pos":[2895,2958],"content":"<bpt id=\"p1\">[</bpt>CWinThread::SetThreadPriority<ept id=\"p1\">](#cwinthread__setthreadpriority)</ept>","source":"[CWinThread::SetThreadPriority](#cwinthread__setthreadpriority)"},{"content":"Sets the priority of the current thread.","pos":[2959,2999]},{"pos":[3004,3059],"content":"<bpt id=\"p1\">[</bpt>CWinThread::SuspendThread<ept id=\"p1\">](#cwinthread__suspendthread)</ept>","source":"[CWinThread::SuspendThread](#cwinthread__suspendthread)"},{"content":"Increments a thread's suspend count.","pos":[3060,3096]},{"pos":[3107,3123],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[3130,3134]},{"content":"Description","pos":[3135,3146]},{"pos":[3184,3243],"content":"<bpt id=\"p1\">[</bpt>CWinThread::operator HANDLE<ept id=\"p1\">](#cwinthread__operator_handle)</ept>","source":"[CWinThread::operator HANDLE](#cwinthread__operator_handle)"},{"pos":[3244,3292],"content":"Retrieves the handle of the <ph id=\"ph1\">`CWinThread`</ph> object.","source":"Retrieves the handle of the `CWinThread` object."},{"pos":[3303,3322],"content":"Public Data Members","linkify":"Public Data Members","nodes":[{"content":"Public Data Members","pos":[0,19]}]},{"content":"Name","pos":[3329,3333]},{"content":"Description","pos":[3334,3345]},{"pos":[3383,3438],"content":"<bpt id=\"p1\">[</bpt>CWinThread::m_bAutoDelete<ept id=\"p1\">](#cwinthread__m_bautodelete)</ept>","source":"[CWinThread::m_bAutoDelete](#cwinthread__m_bautodelete)"},{"content":"Specifies whether to destroy the object at thread termination.","pos":[3439,3501]},{"pos":[3506,3553],"content":"<bpt id=\"p1\">[</bpt>CWinThread::m_hThread<ept id=\"p1\">](#cwinthread__m_hthread)</ept>","source":"[CWinThread::m_hThread](#cwinthread__m_hthread)"},{"content":"Handle to the current thread.","pos":[3554,3583]},{"pos":[3588,3639],"content":"<bpt id=\"p1\">[</bpt>CWinThread::m_nThreadID<ept id=\"p1\">](#cwinthread__m_nthreadid)</ept>","source":"[CWinThread::m_nThreadID](#cwinthread__m_nthreadid)"},{"content":"ID of the current thread.","pos":[3640,3665]},{"pos":[3670,3723],"content":"<bpt id=\"p1\">[</bpt>CWinThread::m_pActiveWnd<ept id=\"p1\">](#cwinthread__m_pactivewnd)</ept>","source":"[CWinThread::m_pActiveWnd](#cwinthread__m_pactivewnd)"},{"content":"Pointer to the main window of the container application when an OLE server is in-place active.","pos":[3724,3818]},{"pos":[3823,3872],"content":"<bpt id=\"p1\">[</bpt>CWinThread::m_pMainWnd<ept id=\"p1\">](#cwinthread__m_pmainwnd)</ept>","source":"[CWinThread::m_pMainWnd](#cwinthread__m_pmainwnd)"},{"content":"Holds a pointer to the application's main window.","pos":[3873,3922]},{"pos":[3932,3939],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The main thread of execution is usually provided by an object derived from <ph id=\"ph1\">`CWinApp`</ph>; <ph id=\"ph2\">`CWinApp`</ph> is derived from <ph id=\"ph3\">`CWinThread`</ph>.","pos":[3943,4068],"source":"The main thread of execution is usually provided by an object derived from `CWinApp`; `CWinApp` is derived from `CWinThread`."},{"content":"Additional <ph id=\"ph1\">`CWinThread`</ph> objects allow multiple threads within a given application.","pos":[4069,4151],"source":" Additional `CWinThread` objects allow multiple threads within a given application."},{"content":"There are two general types of threads that <ph id=\"ph1\">`CWinThread`</ph> supports: worker threads and user-interface threads.","pos":[4158,4267],"source":"There are two general types of threads that `CWinThread` supports: worker threads and user-interface threads."},{"content":"Worker threads have no message pump: for example, a thread that performs background calculations in a spreadsheet application.","pos":[4268,4394]},{"content":"User-interface threads have a message pump and process messages received from the system.","pos":[4395,4484]},{"content":"<bpt id=\"p1\">[</bpt>CWinApp<ept id=\"p1\">](../../mfc/reference/cwinapp-class.md)</ept> and classes derived from it are examples of user-interface threads.","pos":[4485,4600],"source":"[CWinApp](../../mfc/reference/cwinapp-class.md) and classes derived from it are examples of user-interface threads."},{"content":"Other user-interface threads can also be derived directly from <ph id=\"ph1\">`CWinThread`</ph>.","pos":[4601,4677],"source":" Other user-interface threads can also be derived directly from `CWinThread`."},{"content":"Objects of class <ph id=\"ph1\">`CWinThread`</ph> typically exist for the duration of the thread.","pos":[4684,4761],"source":"Objects of class `CWinThread` typically exist for the duration of the thread."},{"content":"If you wish to modify this behavior, set <bpt id=\"p1\">[</bpt>m_bAutoDelete<ept id=\"p1\">](#cwinthread__m_bautodelete)</ept> to <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","pos":[4762,4860],"source":" If you wish to modify this behavior, set [m_bAutoDelete](#cwinthread__m_bautodelete) to **FALSE**."},{"content":"The <ph id=\"ph1\">`CWinThread`</ph> class is necessary to make your code and MFC fully thread-safe.","pos":[4867,4947],"source":"The `CWinThread` class is necessary to make your code and MFC fully thread-safe."},{"content":"Thread-local data used by the framework to maintain thread-specific information is managed by <ph id=\"ph1\">`CWinThread`</ph> objects.","pos":[4948,5063],"source":" Thread-local data used by the framework to maintain thread-specific information is managed by `CWinThread` objects."},{"content":"Because of this dependence on <ph id=\"ph1\">`CWinThread`</ph> to handle thread-local data, any thread that uses MFC must be created by MFC.","pos":[5064,5184],"source":" Because of this dependence on `CWinThread` to handle thread-local data, any thread that uses MFC must be created by MFC."},{"content":"For example, a thread created by the run-time function <bpt id=\"p1\">[</bpt>_beginthread, _beginthreadex<ept id=\"p1\">](../../c-runtime-library/reference/beginthread-beginthreadex.md)</ept> cannot use any MFC APIs.","pos":[5185,5359],"source":" For example, a thread created by the run-time function [_beginthread, _beginthreadex](../../c-runtime-library/reference/beginthread-beginthreadex.md) cannot use any MFC APIs."},{"content":"To create a thread, call <bpt id=\"p1\">[</bpt>AfxBeginThread<ept id=\"p1\">](application-information-and-management.md#afxbeginthread)</ept>.","pos":[5366,5466],"source":"To create a thread, call [AfxBeginThread](application-information-and-management.md#afxbeginthread)."},{"content":"There are two forms, depending on whether you want a worker or user-interface thread.","pos":[5467,5552]},{"content":"If you want a user-interface thread, pass to <ph id=\"ph1\">`AfxBeginThread`</ph> a pointer to the <ph id=\"ph2\">`CRuntimeClass`</ph> of your <ph id=\"ph3\">`CWinThread`</ph>-derived class.","pos":[5553,5683],"source":" If you want a user-interface thread, pass to `AfxBeginThread` a pointer to the `CRuntimeClass` of your `CWinThread`-derived class."},{"content":"If you want to create a worker thread, pass to <ph id=\"ph1\">`AfxBeginThread`</ph> a pointer to the controlling function and the parameter to the controlling function.","pos":[5684,5832],"source":" If you want to create a worker thread, pass to `AfxBeginThread` a pointer to the controlling function and the parameter to the controlling function."},{"content":"For both worker threads and user-interface threads, you can specify optional parameters that modify priority, stack size, creation flags, and security attributes.","pos":[5833,5995]},{"content":"<ph id=\"ph1\">`AfxBeginThread`</ph> will return a pointer to your new <ph id=\"ph2\">`CWinThread`</ph> object.","pos":[5996,6067],"source":"`AfxBeginThread` will return a pointer to your new `CWinThread` object."},{"content":"Instead of calling <ph id=\"ph1\">`AfxBeginThread`</ph>, you can construct a <ph id=\"ph2\">`CWinThread`</ph>-derived object and then call <ph id=\"ph3\">`CreateThread`</ph>.","pos":[6074,6188],"source":"Instead of calling `AfxBeginThread`, you can construct a `CWinThread`-derived object and then call `CreateThread`."},{"content":"This two-stage construction method is useful if you want to reuse the <ph id=\"ph1\">`CWinThread`</ph> object between successive creation and terminations of thread executions.","pos":[6189,6345],"source":" This two-stage construction method is useful if you want to reuse the `CWinThread` object between successive creation and terminations of thread executions."},{"pos":[6352,6845],"content":"For more information on <ph id=\"ph1\">`CWinThread`</ph>, see the articles <bpt id=\"p1\">[</bpt>Multithreading with C++ and MFC<ept id=\"p1\">](../../parallel/multithreading-with-cpp-and-mfc.md)</ept>, <bpt id=\"p2\">[</bpt>Multithreading: Creating User-Interface Threads<ept id=\"p2\">](../../parallel/multithreading-creating-user-interface-threads.md)</ept>, <bpt id=\"p3\">[</bpt>Multithreading: Creating Worker Threads<ept id=\"p3\">](../../parallel/multithreading-creating-worker-threads.md)</ept>, and <bpt id=\"p4\">[</bpt>Multithreading: How to Use the Synchronization Classes<ept id=\"p4\">](../../parallel/multithreading-how-to-use-the-synchronization-classes.md)</ept>.","source":"For more information on `CWinThread`, see the articles [Multithreading with C++ and MFC](../../parallel/multithreading-with-cpp-and-mfc.md), [Multithreading: Creating User-Interface Threads](../../parallel/multithreading-creating-user-interface-threads.md), [Multithreading: Creating Worker Threads](../../parallel/multithreading-creating-worker-threads.md), and [Multithreading: How to Use the Synchronization Classes](../../parallel/multithreading-how-to-use-the-synchronization-classes.md)."},{"pos":[6854,6875],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[6879,6926],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[6933,6986],"content":"<bpt id=\"p1\">[</bpt>CCmdTarget<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept>","source":"[CCmdTarget](../../mfc/reference/ccmdtarget-class.md)"},{"pos":[7014,7026],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[7030,7050],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxwin.h","source":"**Header:** afxwin.h"},{"pos":[7060,7125],"content":"<bpt id=\"p1\">&lt;a name=\"cwinthread__createthread\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWinThread::CreateThread","linkify":"<a name=\"cwinthread__createthread\"></a>  CWinThread::CreateThread","source":"<a name=\"cwinthread__createthread\"></a>  CWinThread::CreateThread"},{"content":"Creates a thread to execute within the address space of the calling process.","pos":[7129,7205]},{"pos":[7358,7368],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies an additional flag that controls the creation of the thread.","pos":[7391,7461]},{"content":"This flag can contain one of two values:","pos":[7462,7502]},{"content":"<bpt id=\"p1\">**</bpt>CREATE_SUSPENDED<ept id=\"p1\">**</ept> Start the thread with a suspend count of one.","pos":[7510,7576],"source":"**CREATE_SUSPENDED** Start the thread with a suspend count of one."},{"content":"Use <bpt id=\"p1\">**</bpt>CREATE_SUSPENDED<ept id=\"p1\">**</ept> if you want to initialize any member data of the <ph id=\"ph1\">`CWinThread`</ph> object, such as <bpt id=\"p2\">[</bpt>m_bAutoDelete<ept id=\"p2\">](#cwinthread__m_bautodelete)</ept> or any members of your derived class, before the thread starts running.","pos":[7577,7795],"source":" Use **CREATE_SUSPENDED** if you want to initialize any member data of the `CWinThread` object, such as [m_bAutoDelete](#cwinthread__m_bautodelete) or any members of your derived class, before the thread starts running."},{"content":"Once your initialization is complete, use the <bpt id=\"p1\">[</bpt>CWinThread::ResumeThread<ept id=\"p1\">](#cwinthread__resumethread)</ept> to start the thread running.","pos":[7796,7924],"source":" Once your initialization is complete, use the [CWinThread::ResumeThread](#cwinthread__resumethread) to start the thread running."},{"content":"The thread will not execute until <ph id=\"ph1\">`CWinThread::ResumeThread`</ph> is called.","pos":[7925,7996],"source":" The thread will not execute until `CWinThread::ResumeThread` is called."},{"pos":[8004,8054],"content":"<bpt id=\"p1\">**</bpt>0<ept id=\"p1\">**</ept> Start the thread immediately after creation.","source":"**0** Start the thread immediately after creation."},{"pos":[8061,8229],"content":"`nStackSize`  \nSpecifies the size in bytes of the stack for the new thread. If **0**, the stack size defaults to the same size as that of the process's primary thread.","leadings":[""," "],"nodes":[{"content":"Specifies the size in bytes of the stack for the new thread. If **0**, the stack size defaults to the same size as that of the process's primary thread.","pos":[15,167],"nodes":[{"content":"Specifies the size in bytes of the stack for the new thread.","pos":[0,60]},{"content":"If <bpt id=\"p1\">**</bpt>0<ept id=\"p1\">**</ept>, the stack size defaults to the same size as that of the process's primary thread.","pos":[61,152],"source":" If **0**, the stack size defaults to the same size as that of the process's primary thread."}]}]},{"pos":[8236,8415],"content":"`lpSecurityAttrs`  \nPoints to a [SECURITY_ATTRIBUTES](http://msdn.microsoft.com/library/windows/desktop/aa379560) structure that specifies the security attributes for the thread.","leadings":[""," "],"nodes":[{"content":"Points to a <bpt id=\"p1\">[</bpt>SECURITY_ATTRIBUTES<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa379560)</ept> structure that specifies the security attributes for the thread.","pos":[20,178],"source":"Points to a [SECURITY_ATTRIBUTES](http://msdn.microsoft.com/library/windows/desktop/aa379560) structure that specifies the security attributes for the thread."}]},{"pos":[8425,8437],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the thread is created successfully; otherwise 0.","pos":[8441,8500]},{"pos":[8510,8517],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use <ph id=\"ph1\">`AfxBeginThread`</ph> to create a thread object and execute it in one step.","pos":[8521,8595],"source":"Use `AfxBeginThread` to create a thread object and execute it in one step."},{"content":"Use <ph id=\"ph1\">`CreateThread`</ph> if you want to reuse the thread object between successive creation and termination of thread executions.","pos":[8596,8719],"source":" Use `CreateThread` if you want to reuse the thread object between successive creation and termination of thread executions."},{"pos":[8729,8790],"content":"<bpt id=\"p1\">&lt;a name=\"cwinthread__cwinthread\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWinThread::CWinThread","linkify":"<a name=\"cwinthread__cwinthread\"></a>  CWinThread::CWinThread","source":"<a name=\"cwinthread__cwinthread\"></a>  CWinThread::CWinThread"},{"pos":[8794,8827],"content":"Constructs a <ph id=\"ph1\">`CWinThread`</ph> object.","source":"Constructs a `CWinThread` object."},{"pos":[8866,8873],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To begin the thread's execution, call the <bpt id=\"p1\">[</bpt>CreateThread<ept id=\"p1\">](#cwinthread__createthread)</ept> member function.","pos":[8877,8977],"source":"To begin the thread's execution, call the [CreateThread](#cwinthread__createthread) member function."},{"content":"You will usually create threads by calling <bpt id=\"p1\">[</bpt>AfxBeginThread<ept id=\"p1\">](http://msdn.microsoft.com/library/e9e8684d-24f7-4599-8fdf-1f4f560a753b)</ept>, which will call this constructor and <ph id=\"ph1\">`CreateThread`</ph>.","pos":[8978,9163],"source":" You will usually create threads by calling [AfxBeginThread](http://msdn.microsoft.com/library/e9e8684d-24f7-4599-8fdf-1f4f560a753b), which will call this constructor and `CreateThread`."},{"pos":[9173,9238],"content":"<bpt id=\"p1\">&lt;a name=\"cwinthread__exitinstance\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWinThread::ExitInstance","linkify":"<a name=\"cwinthread__exitinstance\"></a>  CWinThread::ExitInstance","source":"<a name=\"cwinthread__exitinstance\"></a>  CWinThread::ExitInstance"},{"pos":[9242,9439],"content":"Called by the framework from within a rarely overridden <bpt id=\"p1\">[</bpt>Run<ept id=\"p1\">](#cwinthread__run)</ept> member function to exit this instance of the thread, or if a call to <bpt id=\"p2\">[</bpt>InitInstance<ept id=\"p2\">](#cwinthread__initinstance)</ept> fails.","source":"Called by the framework from within a rarely overridden [Run](#cwinthread__run) member function to exit this instance of the thread, or if a call to [InitInstance](#cwinthread__initinstance) fails."},{"pos":[9492,9504],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The thread's exit code; 0 indicates no errors, and values greater than 0 indicate an error.","pos":[9508,9599]},{"content":"This value can be retrieved by calling <bpt id=\"p1\">[</bpt>GetExitCodeThread<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms683190)</ept>.","pos":[9600,9719],"source":" This value can be retrieved by calling [GetExitCodeThread](http://msdn.microsoft.com/library/windows/desktop/ms683190)."},{"pos":[9729,9736],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Do not call this member function from anywhere but within the <bpt id=\"p1\">**</bpt>Run<ept id=\"p1\">**</ept> member function.","pos":[9740,9826],"source":"Do not call this member function from anywhere but within the **Run** member function."},{"content":"This member function is used only in user-interface threads.","pos":[9827,9887]},{"content":"The default implementation of this function deletes the <ph id=\"ph1\">`CWinThread`</ph> object if <bpt id=\"p1\">[</bpt>m_bAutoDelete<ept id=\"p1\">](#cwinthread__m_bautodelete)</ept> is <bpt id=\"p2\">**</bpt>TRUE<ept id=\"p2\">**</ept>.","pos":[9894,10029],"source":"The default implementation of this function deletes the `CWinThread` object if [m_bAutoDelete](#cwinthread__m_bautodelete) is **TRUE**."},{"content":"Override this function if you wish to perform additional clean-up when your thread terminates.","pos":[10030,10124]},{"content":"Your implementation of <ph id=\"ph1\">`ExitInstance`</ph> should call the base class's version after your code is executed.","pos":[10125,10228],"source":" Your implementation of `ExitInstance` should call the base class's version after your code is executed."},{"pos":[10238,10299],"content":"<bpt id=\"p1\">&lt;a name=\"cwinthread__getmainwnd\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWinThread::GetMainWnd","linkify":"<a name=\"cwinthread__getmainwnd\"></a>  CWinThread::GetMainWnd","source":"<a name=\"cwinthread__getmainwnd\"></a>  CWinThread::GetMainWnd"},{"pos":[10303,10510],"content":"If your application is an OLE server, call this function to retrieve a pointer to the active main window of the application instead of directly referring to the <ph id=\"ph1\">`m_pMainWnd`</ph> member of the application object.","source":"If your application is an OLE server, call this function to retrieve a pointer to the active main window of the application instead of directly referring to the `m_pMainWnd` member of the application object."},{"pos":[10563,10575],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"This function returns a pointer to one of two types of windows.","pos":[10579,10642]},{"content":"If your thread is part of an OLE server and has an object that is in-place active inside an active container, this function returns the <bpt id=\"p1\">[</bpt>CWinApp::m_pActiveWnd<ept id=\"p1\">](../../mfc/reference/cwinapp-class.md#cwinapp__m_pactivewnd)</ept> data member of the <ph id=\"ph1\">`CWinThread`</ph> object.","pos":[10643,10902],"source":" If your thread is part of an OLE server and has an object that is in-place active inside an active container, this function returns the [CWinApp::m_pActiveWnd](../../mfc/reference/cwinapp-class.md#cwinapp__m_pactivewnd) data member of the `CWinThread` object."},{"pos":[10909,11114],"content":"If there is no object that is in-place active within a container or your application is not an OLE server, this function returns the <bpt id=\"p1\">[</bpt>m_pMainWnd<ept id=\"p1\">](#cwinthread__m_pmainwnd)</ept> data member of your thread object.","source":"If there is no object that is in-place active within a container or your application is not an OLE server, this function returns the [m_pMainWnd](#cwinthread__m_pmainwnd) data member of your thread object."},{"pos":[11124,11131],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11135,11260],"content":"For user-interface threads, this is equivalent to directly referring to the <ph id=\"ph1\">`m_pActiveWnd`</ph> member of your application object.","source":"For user-interface threads, this is equivalent to directly referring to the `m_pActiveWnd` member of your application object."},{"pos":[11267,11426],"content":"If your application is not an OLE server, then calling this function is equivalent to directly referring to the <ph id=\"ph1\">`m_pMainWnd`</ph> member of your application object.","source":"If your application is not an OLE server, then calling this function is equivalent to directly referring to the `m_pMainWnd` member of your application object."},{"content":"Override this function to modify the default behavior.","pos":[11433,11487]},{"pos":[11497,11572],"content":"<bpt id=\"p1\">&lt;a name=\"cwinthread__getthreadpriority\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWinThread::GetThreadPriority","linkify":"<a name=\"cwinthread__getthreadpriority\"></a>  CWinThread::GetThreadPriority","source":"<a name=\"cwinthread__getthreadpriority\"></a>  CWinThread::GetThreadPriority"},{"content":"Gets the current thread priority level of this thread.","pos":[11576,11630]},{"pos":[11680,11692],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current thread priority level within its priority class.","pos":[11696,11756]},{"content":"The value returned will be one of the following, listed from highest priority to lowest:","pos":[11757,11845]},{"pos":[11853,11886],"content":"<bpt id=\"p1\">**</bpt>THREAD_PRIORITY_TIME_CRITICAL<ept id=\"p1\">**</ept>","source":"**THREAD_PRIORITY_TIME_CRITICAL**"},{"pos":[11894,11921],"content":"<bpt id=\"p1\">**</bpt>THREAD_PRIORITY_HIGHEST<ept id=\"p1\">**</ept>","source":"**THREAD_PRIORITY_HIGHEST**"},{"pos":[11929,11961],"content":"<bpt id=\"p1\">**</bpt>THREAD_PRIORITY_ABOVE_NORMAL<ept id=\"p1\">**</ept>","source":"**THREAD_PRIORITY_ABOVE_NORMAL**"},{"pos":[11969,11995],"content":"<bpt id=\"p1\">**</bpt>THREAD_PRIORITY_NORMAL<ept id=\"p1\">**</ept>","source":"**THREAD_PRIORITY_NORMAL**"},{"pos":[12003,12035],"content":"<bpt id=\"p1\">**</bpt>THREAD_PRIORITY_BELOW_NORMAL<ept id=\"p1\">**</ept>","source":"**THREAD_PRIORITY_BELOW_NORMAL**"},{"pos":[12043,12069],"content":"<bpt id=\"p1\">**</bpt>THREAD_PRIORITY_LOWEST<ept id=\"p1\">**</ept>","source":"**THREAD_PRIORITY_LOWEST**"},{"pos":[12077,12101],"content":"<bpt id=\"p1\">**</bpt>THREAD_PRIORITY_IDLE<ept id=\"p1\">**</ept>","source":"**THREAD_PRIORITY_IDLE**"},{"pos":[12108,12293],"content":"For more information on these priorities, see <bpt id=\"p1\">[</bpt>SetThreadPriority<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms686277)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information on these priorities, see [SetThreadPriority](http://msdn.microsoft.com/library/windows/desktop/ms686277) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[12303,12368],"content":"<bpt id=\"p1\">&lt;a name=\"cwinthread__initinstance\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWinThread::InitInstance","linkify":"<a name=\"cwinthread__initinstance\"></a>  CWinThread::InitInstance","source":"<a name=\"cwinthread__initinstance\"></a>  CWinThread::InitInstance"},{"pos":[12372,12465],"content":"<ph id=\"ph1\">`InitInstance`</ph> must be overridden to initialize each new instance of a user-interface thread.","source":"`InitInstance` must be overridden to initialize each new instance of a user-interface thread."},{"pos":[12519,12531],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if initialization is successful; otherwise 0.","pos":[12535,12588]},{"pos":[12598,12605],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12609,12719],"content":"Typically, you override <ph id=\"ph1\">`InitInstance`</ph> to perform tasks that must be completed when a thread is first created.","source":"Typically, you override `InitInstance` to perform tasks that must be completed when a thread is first created."},{"content":"This member function is used only in user-interface threads.","pos":[12726,12786]},{"content":"Perform initialization of worker threads in the controlling function passed to <bpt id=\"p1\">[</bpt>AfxBeginThread<ept id=\"p1\">](application-information-and-management.md#afxbeginthread)</ept>.","pos":[12787,12941],"source":" Perform initialization of worker threads in the controlling function passed to [AfxBeginThread](application-information-and-management.md#afxbeginthread)."},{"pos":[12951,13018],"content":"<bpt id=\"p1\">&lt;a name=\"cwinthread__isidlemessage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWinThread::IsIdleMessage","linkify":"<a name=\"cwinthread__isidlemessage\"></a>  CWinThread::IsIdleMessage","source":"<a name=\"cwinthread__isidlemessage\"></a>  CWinThread::IsIdleMessage"},{"pos":[13022,13120],"content":"Override this function to keep <bpt id=\"p1\">**</bpt>OnIdle<ept id=\"p1\">**</ept> from being called after specific messages are generated.","source":"Override this function to keep **OnIdle** from being called after specific messages are generated."},{"pos":[13184,13194],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to the current message being processed.","pos":[13208,13254]},{"pos":[13264,13276],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[13280,13355],"content":"Nonzero if <ph id=\"ph1\">`OnIdle`</ph> should be called after processing message; otherwise 0.","source":"Nonzero if `OnIdle` should be called after processing message; otherwise 0."},{"pos":[13365,13372],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[13376,13501],"content":"The default implementation does not call <bpt id=\"p1\">**</bpt>OnIdle<ept id=\"p1\">**</ept> after redundant mouse messages and messages generated by blinking carets.","source":"The default implementation does not call **OnIdle** after redundant mouse messages and messages generated by blinking carets."},{"content":"If an application has created a short timer, <bpt id=\"p1\">**</bpt>OnIdle<ept id=\"p1\">**</ept> will be called frequently, causing performance problems.","pos":[13508,13620],"source":"If an application has created a short timer, **OnIdle** will be called frequently, causing performance problems."},{"content":"To improve such an application's performance, override <ph id=\"ph1\">`IsIdleMessage`</ph> in the application's <ph id=\"ph2\">`CWinApp`</ph>-derived class to check for <ph id=\"ph3\">`WM_TIMER`</ph> messages as follows:","pos":[13621,13781],"source":" To improve such an application's performance, override `IsIdleMessage` in the application's `CWinApp`-derived class to check for `WM_TIMER` messages as follows:"},{"pos":[13788,13869],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#189<ept id=\"p2\">](../../mfc/codesnippet/cpp/cwinthread-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#189](../../mfc/codesnippet/cpp/cwinthread-class_1.cpp)]"},{"pos":[13876,13975],"content":"Handling <ph id=\"ph1\">`WM_TIMER`</ph> in this fashion will improve performance of applications that use short timers.","source":"Handling `WM_TIMER` in this fashion will improve performance of applications that use short timers."},{"pos":[13985,14052],"content":"<bpt id=\"p1\">&lt;a name=\"cwinthread__m_bautodelete\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWinThread::m_bAutoDelete","linkify":"<a name=\"cwinthread__m_bautodelete\"></a>  CWinThread::m_bAutoDelete","source":"<a name=\"cwinthread__m_bautodelete\"></a>  CWinThread::m_bAutoDelete"},{"pos":[14056,14152],"content":"Specifies whether the <ph id=\"ph1\">`CWinThread`</ph> object should be automatically deleted at thread termination.","source":"Specifies whether the `CWinThread` object should be automatically deleted at thread termination."},{"pos":[14199,14206],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14210,14280],"content":"The <ph id=\"ph1\">`m_bAutoDelete`</ph> data member is a public variable of type <bpt id=\"p1\">**</bpt>BOOL<ept id=\"p1\">**</ept>.","source":"The `m_bAutoDelete` data member is a public variable of type **BOOL**."},{"content":"The value of <ph id=\"ph1\">`m_bAutoDelete`</ph> does not affect how the underlying thread handle is closed.","pos":[14287,14375],"source":"The value of `m_bAutoDelete` does not affect how the underlying thread handle is closed."},{"content":"The thread handle is always closed when the <ph id=\"ph1\">`CWinThread`</ph> object is destroyed.","pos":[14376,14453],"source":" The thread handle is always closed when the `CWinThread` object is destroyed."},{"pos":[14463,14522],"content":"<bpt id=\"p1\">&lt;a name=\"cwinthread__m_hthread\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWinThread::m_hThread","linkify":"<a name=\"cwinthread__m_hthread\"></a>  CWinThread::m_hThread","source":"<a name=\"cwinthread__m_hthread\"></a>  CWinThread::m_hThread"},{"pos":[14526,14577],"content":"Handle to the thread attached to this <ph id=\"ph1\">`CWinThread`</ph>.","source":"Handle to the thread attached to this `CWinThread`."},{"pos":[14622,14629],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`m_hThread`</ph> data member is a public variable of type <ph id=\"ph2\">`HANDLE`</ph>.","pos":[14633,14699],"source":"The `m_hThread` data member is a public variable of type `HANDLE`."},{"content":"It is only valid if underlying thread currently exists.","pos":[14700,14755]},{"pos":[14765,14828],"content":"<bpt id=\"p1\">&lt;a name=\"cwinthread__m_nthreadid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWinThread::m_nThreadID","linkify":"<a name=\"cwinthread__m_nthreadid\"></a>  CWinThread::m_nThreadID","source":"<a name=\"cwinthread__m_nthreadid\"></a>  CWinThread::m_nThreadID"},{"pos":[14832,14879],"content":"ID of the thread attached to this <ph id=\"ph1\">`CWinThread`</ph>.","source":"ID of the thread attached to this `CWinThread`."},{"pos":[14925,14932],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <bpt id=\"p1\">**</bpt>m_nThreadID<ept id=\"p1\">**</ept> data member is a public variable of type <ph id=\"ph1\">`DWORD`</ph>.","pos":[14936,15005],"source":"The **m_nThreadID** data member is a public variable of type `DWORD`."},{"content":"It is only valid if underlying thread currently exists.","pos":[15006,15061]},{"pos":[15071,15078],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[15083,15174],"content":"See the example for <bpt id=\"p1\">[</bpt>AfxGetThread<ept id=\"p1\">](application-information-and-management.md#afxgetthread)</ept>.","source":"See the example for [AfxGetThread](application-information-and-management.md#afxgetthread)."},{"pos":[15184,15249],"content":"<bpt id=\"p1\">&lt;a name=\"cwinthread__m_pactivewnd\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWinThread::m_pActiveWnd","linkify":"<a name=\"cwinthread__m_pactivewnd\"></a>  CWinThread::m_pActiveWnd","source":"<a name=\"cwinthread__m_pactivewnd\"></a>  CWinThread::m_pActiveWnd"},{"content":"Use this data member to store a pointer to your thread's active window object.","pos":[15253,15331]},{"pos":[15378,15385],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The Microsoft Foundation Class Library will automatically terminate your thread when the window referred to by <ph id=\"ph1\">`m_pActiveWnd`</ph> is closed.","pos":[15389,15525],"source":"The Microsoft Foundation Class Library will automatically terminate your thread when the window referred to by `m_pActiveWnd` is closed."},{"content":"If this thread is the primary thread for an application, the application will also be terminated.","pos":[15526,15623]},{"content":"If this data member is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the active window for the application's <ph id=\"ph1\">`CWinApp`</ph> object will be inherited.","pos":[15624,15732],"source":" If this data member is **NULL**, the active window for the application's `CWinApp` object will be inherited."},{"content":"<ph id=\"ph1\">`m_pActiveWnd`</ph> is a public variable of type <bpt id=\"p1\">**</bpt>CWnd<ph id=\"ph2\">\\*</ph><ept id=\"p1\">**</ept>.","pos":[15733,15788],"source":"`m_pActiveWnd` is a public variable of type **CWnd\\***."},{"content":"Typically, you set this member variable when you override <ph id=\"ph1\">`InitInstance`</ph>.","pos":[15795,15868],"source":"Typically, you set this member variable when you override `InitInstance`."},{"content":"In a worker thread, the value of this data member is inherited from its parent thread.","pos":[15869,15955]},{"pos":[15965,16026],"content":"<bpt id=\"p1\">&lt;a name=\"cwinthread__m_pmainwnd\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWinThread::m_pMainWnd","linkify":"<a name=\"cwinthread__m_pmainwnd\"></a>  CWinThread::m_pMainWnd","source":"<a name=\"cwinthread__m_pmainwnd\"></a>  CWinThread::m_pMainWnd"},{"content":"Use this data member to store a pointer to your thread's main window object.","pos":[16030,16106]},{"pos":[16151,16158],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The Microsoft Foundation Class Library will automatically terminate your thread when the window referred to by <ph id=\"ph1\">`m_pMainWnd`</ph> is closed.","pos":[16162,16296],"source":"The Microsoft Foundation Class Library will automatically terminate your thread when the window referred to by `m_pMainWnd` is closed."},{"content":"If this thread is the primary thread for an application, the application will also be terminated.","pos":[16297,16394]},{"content":"If this data member is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the main window for the application's <ph id=\"ph1\">`CWinApp`</ph> object will be used to determine when to terminate the thread.","pos":[16395,16538],"source":" If this data member is **NULL**, the main window for the application's `CWinApp` object will be used to determine when to terminate the thread."},{"content":"<ph id=\"ph1\">`m_pMainWnd`</ph> is a public variable of type <bpt id=\"p1\">**</bpt>CWnd<ph id=\"ph2\">\\*</ph><ept id=\"p1\">**</ept>.","pos":[16539,16592],"source":"`m_pMainWnd` is a public variable of type **CWnd\\***."},{"content":"Typically, you set this member variable when you override <ph id=\"ph1\">`InitInstance`</ph>.","pos":[16599,16672],"source":"Typically, you set this member variable when you override `InitInstance`."},{"content":"In a worker thread, the value of this data member is inherited from its parent thread.","pos":[16673,16759]},{"pos":[16769,16822],"content":"<bpt id=\"p1\">&lt;a name=\"cwinthread__onidle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWinThread::OnIdle","linkify":"<a name=\"cwinthread__onidle\"></a>  CWinThread::OnIdle","source":"<a name=\"cwinthread__onidle\"></a>  CWinThread::OnIdle"},{"content":"Override this member function to perform idle-time processing.","pos":[16826,16888]},{"pos":[16947,16957],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A counter incremented each time <ph id=\"ph1\">`OnIdle`</ph> is called when the thread's message queue is empty.","pos":[16973,17065],"source":" A counter incremented each time `OnIdle` is called when the thread's message queue is empty."},{"content":"This count is reset to 0 each time a new message is processed.","pos":[17066,17128]},{"content":"You can use the <ph id=\"ph1\">`lCount`</ph> parameter to determine the relative length of time the thread has been idle without processing a message.","pos":[17129,17259],"source":" You can use the `lCount` parameter to determine the relative length of time the thread has been idle without processing a message."},{"pos":[17269,17281],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero to receive more idle processing time; 0 if no more idle processing time is needed.","pos":[17285,17375]},{"pos":[17385,17392],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`OnIdle`</ph> is called in the default message loop when the thread's message queue is empty.","pos":[17396,17484],"source":"`OnIdle` is called in the default message loop when the thread's message queue is empty."},{"content":"Use your override to call your own background idle-handler tasks.","pos":[17485,17550]},{"content":"<ph id=\"ph1\">`OnIdle`</ph> should return 0 to indicate that no additional idle processing time is required.","pos":[17557,17646],"source":"`OnIdle` should return 0 to indicate that no additional idle processing time is required."},{"content":"The <ph id=\"ph1\">`lCount`</ph> parameter is incremented each time <ph id=\"ph2\">`OnIdle`</ph> is called when the message queue is empty and is reset to 0 each time a new message is processed.","pos":[17647,17801],"source":" The `lCount` parameter is incremented each time `OnIdle` is called when the message queue is empty and is reset to 0 each time a new message is processed."},{"content":"You can call your different idle routines based on this count.","pos":[17802,17864]},{"content":"The default implementation of this member function frees temporary objects and unused dynamic link libraries from memory.","pos":[17871,17992]},{"content":"This member function is used only in user-interface threads.","pos":[17999,18059]},{"pos":[18066,18184],"content":"Because the application cannot process messages until <ph id=\"ph1\">`OnIdle`</ph> returns, do not perform lengthy tasks in this function.","source":"Because the application cannot process messages until `OnIdle` returns, do not perform lengthy tasks in this function."},{"pos":[18194,18265],"content":"<bpt id=\"p1\">&lt;a name=\"cwinthread__operator_handle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWinThread::operator HANDLE","linkify":"<a name=\"cwinthread__operator_handle\"></a>  CWinThread::operator HANDLE","source":"<a name=\"cwinthread__operator_handle\"></a>  CWinThread::operator HANDLE"},{"pos":[18269,18317],"content":"Retrieves the handle of the <ph id=\"ph1\">`CWinThread`</ph> object.","source":"Retrieves the handle of the `CWinThread` object."},{"pos":[18370,18382],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[18386,18454],"content":"If successful, the handle of the thread object; otherwise, <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"If successful, the handle of the thread object; otherwise, **NULL**."},{"pos":[18464,18471],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the handle to directly call Windows APIs.","pos":[18475,18520]},{"pos":[18530,18605],"content":"<bpt id=\"p1\">&lt;a name=\"cwinthread__postthreadmessage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWinThread::PostThreadMessage","linkify":"<a name=\"cwinthread__postthreadmessage\"></a>  CWinThread::PostThreadMessage","source":"<a name=\"cwinthread__postthreadmessage\"></a>  CWinThread::PostThreadMessage"},{"pos":[18609,18678],"content":"Called to post a user-defined message to another <ph id=\"ph1\">`CWinThread`</ph> object.","source":"Called to post a user-defined message to another `CWinThread` object."},{"pos":[18788,18798],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"ID of the user-defined message.","pos":[18815,18846]},{"content":"First message parameter.","pos":[18865,18889]},{"content":"Second message parameter.","pos":[18908,18933]},{"pos":[18943,18955],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[18959,18994]},{"pos":[19004,19011],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[19015,19119],"content":"The posted message is mapped to the proper message handler by the message map macro <ph id=\"ph1\">`ON_THREAD_MESSAGE`</ph>.","source":"The posted message is mapped to the proper message handler by the message map macro `ON_THREAD_MESSAGE`."},{"pos":[19127,19447],"content":"[!NOTE]\n When calling the Windows [PostThreadMessage](http://msdn.microsoft.com/library/windows/desktop/ms644946) function within an MFC application, the MFC message handlers are not called. For more information, see the Knowledge Base article, \"PRB: MFC Message Handler Not Called with PostThreadMessage()\" (Q142415).","leadings":["","> "],"nodes":[{"content":" When calling the Windows [PostThreadMessage](http://msdn.microsoft.com/library/windows/desktop/ms644946) function within an MFC application, the MFC message handlers are not called. For more information, see the Knowledge Base article, \"PRB: MFC Message Handler Not Called with PostThreadMessage()\" (Q142415).","pos":[8,318],"nodes":[{"content":"When calling the Windows <bpt id=\"p1\">[</bpt>PostThreadMessage<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms644946)</ept> function within an MFC application, the MFC message handlers are not called.","pos":[1,182],"source":" When calling the Windows [PostThreadMessage](http://msdn.microsoft.com/library/windows/desktop/ms644946) function within an MFC application, the MFC message handlers are not called."},{"content":"For more information, see the Knowledge Base article, \"PRB: MFC Message Handler Not Called with PostThreadMessage()\" (Q142415).","pos":[183,310]}]}]},{"pos":[19457,19536],"content":"<bpt id=\"p1\">&lt;a name=\"cwinthread__pretranslatemessage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWinThread::PreTranslateMessage","linkify":"<a name=\"cwinthread__pretranslatemessage\"></a>  CWinThread::PreTranslateMessage","source":"<a name=\"cwinthread__pretranslatemessage\"></a>  CWinThread::PreTranslateMessage"},{"pos":[19540,19802],"content":"Override this function to filter window messages before they are dispatched to the Windows functions <bpt id=\"p1\">[</bpt>TranslateMessage<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms644955)</ept> and <bpt id=\"p2\">[</bpt>DispatchMessage<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms644934)</ept>.","source":"Override this function to filter window messages before they are dispatched to the Windows functions [TranslateMessage](http://msdn.microsoft.com/library/windows/desktop/ms644955) and [DispatchMessage](http://msdn.microsoft.com/library/windows/desktop/ms644934)."},{"pos":[19872,19882],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to a <bpt id=\"p1\">[</bpt>MSG structure<ept id=\"p1\">](../../mfc/reference/msg-structure1.md)</ept> containing the message to process.","pos":[19896,19997],"source":" Points to a [MSG structure](../../mfc/reference/msg-structure1.md) containing the message to process."},{"pos":[20007,20019],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the message was fully processed in <ph id=\"ph1\">`PreTranslateMessage`</ph> and should not be processed further.","pos":[20023,20127],"source":"Nonzero if the message was fully processed in `PreTranslateMessage` and should not be processed further."},{"content":"Zero if the message should be processed in the normal way.","pos":[20128,20186]},{"pos":[20196,20203],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This member function is used only in user-interface threads.","pos":[20207,20267]},{"pos":[20277,20358],"content":"<bpt id=\"p1\">&lt;a name=\"cwinthread__processmessagefilter\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWinThread::ProcessMessageFilter","linkify":"<a name=\"cwinthread__processmessagefilter\"></a>  CWinThread::ProcessMessageFilter","source":"<a name=\"cwinthread__processmessagefilter\"></a>  CWinThread::ProcessMessageFilter"},{"content":"The framework's hook function calls this member function to filter and respond to certain Windows messages.","pos":[20362,20469]},{"pos":[20563,20573],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies a hook code.","pos":[20587,20609]},{"content":"This member function uses the code to determine how to process <ph id=\"ph1\">`lpMsg.`</ph>","pos":[20610,20681],"source":" This member function uses the code to determine how to process `lpMsg.`"},{"content":"A pointer to a Windows <bpt id=\"p1\">[</bpt>MSG structure<ept id=\"p1\">](../../mfc/reference/msg-structure1.md)</ept>.","pos":[20699,20777],"source":" A pointer to a Windows [MSG structure](../../mfc/reference/msg-structure1.md)."},{"pos":[20787,20799],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the message is processed; otherwise 0.","pos":[20803,20852]},{"pos":[20862,20869],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A hook function processes events before they are sent to the application's normal message processing.","pos":[20873,20974]},{"content":"If you override this advanced feature, be sure to call the base-class version to maintain the framework's hook processing.","pos":[20981,21103]},{"pos":[21113,21200],"content":"<bpt id=\"p1\">&lt;a name=\"cwinthread__processwndprocexception\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWinThread::ProcessWndProcException","linkify":"<a name=\"cwinthread__processwndprocexception\"></a>  CWinThread::ProcessWndProcException","source":"<a name=\"cwinthread__processwndprocexception\"></a>  CWinThread::ProcessWndProcException"},{"content":"The framework calls this member function whenever the handler does not catch an exception thrown in one of your thread's message or command handlers.","pos":[21204,21353]},{"pos":[21462,21472],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>e<ept id=\"p1\">*</ept>","pos":[21476,21479],"source":"*e*"},{"content":"Points to an unhandled exception.","pos":[21483,21516]},{"content":"Points to a <bpt id=\"p1\">[</bpt>MSG structure<ept id=\"p1\">](../../mfc/reference/msg-structure1.md)</ept> containing information about the windows message that caused the framework to throw an exception.","pos":[21533,21697],"source":" Points to a [MSG structure](../../mfc/reference/msg-structure1.md) containing information about the windows message that caused the framework to throw an exception."},{"pos":[21707,21719],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[21723,21779],"content":"–1 if a <ph id=\"ph1\">`WM_CREATE`</ph> exception is generated; otherwise 0.","source":"–1 if a `WM_CREATE` exception is generated; otherwise 0."},{"pos":[21789,21796],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Do not call this member function directly.","pos":[21800,21842]},{"content":"The default implementation of this member function handles only exceptions generated from the following messages:","pos":[21849,21962]},{"content":"Command","pos":[21969,21976]},{"content":"Action","pos":[21977,21983]},{"content":"Fail.","pos":[22031,22036]},{"pos":[22052,22146],"content":"Validate the affected window, thus preventing another <ph id=\"ph1\">`WM_PAINT`</ph> message from being generated.","source":"Validate the affected window, thus preventing another `WM_PAINT` message from being generated."},{"content":"Override this member function to provide global handling of your exceptions.","pos":[22154,22230]},{"content":"Call the base functionality only if you wish to display the default behavior.","pos":[22231,22308]},{"content":"This member function is used only in threads that have a message pump.","pos":[22315,22385]},{"pos":[22395,22458],"content":"<bpt id=\"p1\">&lt;a name=\"cwinthread__pumpmessage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWinThread::PumpMessage","linkify":"<a name=\"cwinthread__pumpmessage\"></a>  CWinThread::PumpMessage","source":"<a name=\"cwinthread__pumpmessage\"></a>  CWinThread::PumpMessage"},{"content":"Contains the thread's message loop.","pos":[22462,22497]},{"pos":[22550,22557],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`PumpMessage`</ph> contains the thread's message loop.","pos":[22561,22610],"source":"`PumpMessage` contains the thread's message loop."},{"content":"<bpt id=\"p1\">**</bpt>PumpMessage<ept id=\"p1\">**</ept> is called by <ph id=\"ph1\">`CWinThread`</ph> to pump the thread's messages.","pos":[22611,22683],"source":"**PumpMessage** is called by `CWinThread` to pump the thread's messages."},{"content":"You can call <ph id=\"ph1\">`PumpMessage`</ph> directly to force messages to be processed, or you can override <ph id=\"ph2\">`PumpMessage`</ph> to change its default behavior.","pos":[22684,22820],"source":" You can call `PumpMessage` directly to force messages to be processed, or you can override `PumpMessage` to change its default behavior."},{"pos":[22827,22933],"content":"Calling <ph id=\"ph1\">`PumpMessage`</ph> directly and overriding its default behavior is recommended for advanced users only.","source":"Calling `PumpMessage` directly and overriding its default behavior is recommended for advanced users only."},{"pos":[22943,23008],"content":"<bpt id=\"p1\">&lt;a name=\"cwinthread__resumethread\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWinThread::ResumeThread","linkify":"<a name=\"cwinthread__resumethread\"></a>  CWinThread::ResumeThread","source":"<a name=\"cwinthread__resumethread\"></a>  CWinThread::ResumeThread"},{"pos":[23012,23193],"content":"Called to resume execution of a thread that was suspended by the <bpt id=\"p1\">[</bpt>SuspendThread<ept id=\"p1\">](#cwinthread__suspendthread)</ept> member function, or a thread created with the <bpt id=\"p2\">**</bpt>CREATE_SUSPENDED<ept id=\"p2\">**</ept> flag.","source":"Called to resume execution of a thread that was suspended by the [SuspendThread](#cwinthread__suspendthread) member function, or a thread created with the **CREATE_SUSPENDED** flag."},{"pos":[23240,23252],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The thread's previous suspend count if successful; <ph id=\"ph1\">`0xFFFFFFFF`</ph> otherwise.","pos":[23256,23330],"source":"The thread's previous suspend count if successful; `0xFFFFFFFF` otherwise."},{"content":"If the return value is zero, the current thread was not suspended.","pos":[23331,23397]},{"content":"If the return value is one, the thread was suspended, but is now restarted.","pos":[23398,23473]},{"content":"Any return value greater than one means the thread remains suspended.","pos":[23474,23543]},{"pos":[23553,23560],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The suspend count of the current thread is reduced by one.","pos":[23564,23622]},{"content":"If the suspend count is reduced to zero, the thread resumes execution; otherwise the thread remains suspended.","pos":[23623,23733]},{"pos":[23743,23790],"content":"<bpt id=\"p1\">&lt;a name=\"cwinthread__run\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWinThread::Run","linkify":"<a name=\"cwinthread__run\"></a>  CWinThread::Run","source":"<a name=\"cwinthread__run\"></a>  CWinThread::Run"},{"content":"Provides a default message loop for user-interface threads.","pos":[23794,23853]},{"pos":[23897,23909],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An <ph id=\"ph1\">`int`</ph> value that is returned by the thread.","pos":[23913,23959],"source":"An `int` value that is returned by the thread."},{"content":"This value can be retrieved by calling <bpt id=\"p1\">[</bpt>GetExitCodeThread<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms683190)</ept>.","pos":[23960,24079],"source":" This value can be retrieved by calling [GetExitCodeThread](http://msdn.microsoft.com/library/windows/desktop/ms683190)."},{"pos":[24089,24096],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<bpt id=\"p1\">**</bpt>Run<ept id=\"p1\">**</ept> acquires and dispatches Windows messages until the application receives a <bpt id=\"p2\">[</bpt>WM_QUIT<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms632641)</ept> message.","pos":[24100,24260],"source":"**Run** acquires and dispatches Windows messages until the application receives a [WM_QUIT](http://msdn.microsoft.com/library/windows/desktop/ms632641) message."},{"content":"If the thread's message queue currently contains no messages, <bpt id=\"p1\">**</bpt>Run<ept id=\"p1\">**</ept> calls <ph id=\"ph1\">`OnIdle`</ph> to perform idle-time processing.","pos":[24261,24378],"source":" If the thread's message queue currently contains no messages, **Run** calls `OnIdle` to perform idle-time processing."},{"content":"Incoming messages go to the <bpt id=\"p1\">[</bpt>PreTranslateMessage<ept id=\"p1\">](#cwinthread__pretranslatemessage)</ept> member function for special processing and then to the Windows function <bpt id=\"p2\">[</bpt>TranslateMessage<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms644955)</ept> for standard keyboard translation.","pos":[24379,24648],"source":" Incoming messages go to the [PreTranslateMessage](#cwinthread__pretranslatemessage) member function for special processing and then to the Windows function [TranslateMessage](http://msdn.microsoft.com/library/windows/desktop/ms644955) for standard keyboard translation."},{"content":"Finally, the <bpt id=\"p1\">[</bpt>DispatchMessage<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms644934)</ept> Windows function is called.","pos":[24649,24767],"source":" Finally, the [DispatchMessage](http://msdn.microsoft.com/library/windows/desktop/ms644934) Windows function is called."},{"pos":[24774,24858],"content":"<bpt id=\"p1\">**</bpt>Run<ept id=\"p1\">**</ept> is rarely overridden, but you can override it to implement special behavior.","source":"**Run** is rarely overridden, but you can override it to implement special behavior."},{"content":"This member function is used only in user-interface threads.","pos":[24865,24925]},{"pos":[24935,25010],"content":"<bpt id=\"p1\">&lt;a name=\"cwinthread__setthreadpriority\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWinThread::SetThreadPriority","linkify":"<a name=\"cwinthread__setthreadpriority\"></a>  CWinThread::SetThreadPriority","source":"<a name=\"cwinthread__setthreadpriority\"></a>  CWinThread::SetThreadPriority"},{"content":"This function sets the priority level of the current thread within its priority class.","pos":[25014,25100]},{"pos":[25164,25174],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the new thread priority level within its priority class.","pos":[25193,25259]},{"content":"This parameter must be one of the following values, listed from highest priority to lowest:","pos":[25260,25351]},{"pos":[25359,25392],"content":"<bpt id=\"p1\">**</bpt>THREAD_PRIORITY_TIME_CRITICAL<ept id=\"p1\">**</ept>","source":"**THREAD_PRIORITY_TIME_CRITICAL**"},{"pos":[25400,25427],"content":"<bpt id=\"p1\">**</bpt>THREAD_PRIORITY_HIGHEST<ept id=\"p1\">**</ept>","source":"**THREAD_PRIORITY_HIGHEST**"},{"pos":[25435,25467],"content":"<bpt id=\"p1\">**</bpt>THREAD_PRIORITY_ABOVE_NORMAL<ept id=\"p1\">**</ept>","source":"**THREAD_PRIORITY_ABOVE_NORMAL**"},{"pos":[25475,25501],"content":"<bpt id=\"p1\">**</bpt>THREAD_PRIORITY_NORMAL<ept id=\"p1\">**</ept>","source":"**THREAD_PRIORITY_NORMAL**"},{"pos":[25509,25541],"content":"<bpt id=\"p1\">**</bpt>THREAD_PRIORITY_BELOW_NORMAL<ept id=\"p1\">**</ept>","source":"**THREAD_PRIORITY_BELOW_NORMAL**"},{"pos":[25549,25575],"content":"<bpt id=\"p1\">**</bpt>THREAD_PRIORITY_LOWEST<ept id=\"p1\">**</ept>","source":"**THREAD_PRIORITY_LOWEST**"},{"pos":[25583,25607],"content":"<bpt id=\"p1\">**</bpt>THREAD_PRIORITY_IDLE<ept id=\"p1\">**</ept>","source":"**THREAD_PRIORITY_IDLE**"},{"pos":[25614,25799],"content":"For more information on these priorities, see <bpt id=\"p1\">[</bpt>SetThreadPriority<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms686277)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information on these priorities, see [SetThreadPriority](http://msdn.microsoft.com/library/windows/desktop/ms686277) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[25809,25821],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if function was successful; otherwise 0.","pos":[25825,25873]},{"pos":[25883,25890],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[25894,25985],"content":"It can only be called after <bpt id=\"p1\">[</bpt>CreateThread<ept id=\"p1\">](#cwinthread__createthread)</ept> successfully returns.","source":"It can only be called after [CreateThread](#cwinthread__createthread) successfully returns."},{"pos":[25995,26062],"content":"<bpt id=\"p1\">&lt;a name=\"cwinthread__suspendthread\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWinThread::SuspendThread","linkify":"<a name=\"cwinthread__suspendthread\"></a>  CWinThread::SuspendThread","source":"<a name=\"cwinthread__suspendthread\"></a>  CWinThread::SuspendThread"},{"content":"Increments the current thread's suspend count.","pos":[26066,26112]},{"pos":[26160,26172],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[26176,26250],"content":"The thread's previous suspend count if successful; <ph id=\"ph1\">`0xFFFFFFFF`</ph> otherwise.","source":"The thread's previous suspend count if successful; `0xFFFFFFFF` otherwise."},{"pos":[26260,26267],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If any thread has a suspend count above zero, that thread does not execute.","pos":[26271,26346]},{"content":"The thread can be resumed by calling the <bpt id=\"p1\">[</bpt>ResumeThread<ept id=\"p1\">](#cwinthread__resumethread)</ept> member function.","pos":[26347,26446],"source":" The thread can be resumed by calling the [ResumeThread](#cwinthread__resumethread) member function."},{"pos":[26455,26463],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>CCmdTarget Class<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[26467,26527],"source":"[CCmdTarget Class](../../mfc/reference/ccmdtarget-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[26530,26579],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CWinApp Class<ept id=\"p1\">](../../mfc/reference/cwinapp-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[26582,26637],"source":" [CWinApp Class](../../mfc/reference/cwinapp-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CCmdTarget Class<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept>","pos":[26640,26700],"source":" [CCmdTarget Class](../../mfc/reference/ccmdtarget-class.md)"}],"content":"---\ntitle: \"CWinThread Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CWinThread\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"worker threads\"\n  - \"threading [MFC], safety\"\n  - \"CWinThread class\"\n  - \"threading [MFC], creating threads\"\nms.assetid: 10cdc294-4057-4e76-ac7c-a8967a89af0b\ncaps.latest.revision: 24\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CWinThread Class\nRepresents a thread of execution within an application.  \n  \n## Syntax  \n  \n```  \nclass CWinThread : public CCmdTarget  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CWinThread::CWinThread](#cwinthread__cwinthread)|Constructs a `CWinThread` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CWinThread::CreateThread](#cwinthread__createthread)|Starts execution of a `CWinThread` object.|  \n|[CWinThread::ExitInstance](#cwinthread__exitinstance)|Override to clean up when your thread terminates.|  \n|[CWinThread::GetMainWnd](#cwinthread__getmainwnd)|Retrieves a pointer to the main window for the thread.|  \n|[CWinThread::GetThreadPriority](#cwinthread__getthreadpriority)|Gets the priority of the current thread.|  \n|[CWinThread::InitInstance](#cwinthread__initinstance)|Override to perform thread instance initialization.|  \n|[CWinThread::IsIdleMessage](#cwinthread__isidlemessage)|Checks for special messages.|  \n|[CWinThread::OnIdle](#cwinthread__onidle)|Override to perform thread-specific idle-time processing.|  \n|[CWinThread::PostThreadMessage](#cwinthread__postthreadmessage)|Posts a message to another `CWinThread` object.|  \n|[CWinThread::PreTranslateMessage](#cwinthread__pretranslatemessage)|Filters messages before they are dispatched to the Windows functions [TranslateMessage](http://msdn.microsoft.com/library/windows/desktop/ms644955) and [DispatchMessage](http://msdn.microsoft.com/library/windows/desktop/ms644934).|  \n|[CWinThread::ProcessMessageFilter](#cwinthread__processmessagefilter)|Intercepts certain messages before they reach the application.|  \n|[CWinThread::ProcessWndProcException](#cwinthread__processwndprocexception)|Intercepts all unhandled exceptions thrown by the thread's message and command handlers.|  \n|[CWinThread::PumpMessage](#cwinthread__pumpmessage)|Contains the thread's message loop.|  \n|[CWinThread::ResumeThread](#cwinthread__resumethread)|Decrements a thread's suspend count.|  \n|[CWinThread::Run](#cwinthread__run)|Controlling function for threads with a message pump. Override to customize the default message loop.|  \n|[CWinThread::SetThreadPriority](#cwinthread__setthreadpriority)|Sets the priority of the current thread.|  \n|[CWinThread::SuspendThread](#cwinthread__suspendthread)|Increments a thread's suspend count.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CWinThread::operator HANDLE](#cwinthread__operator_handle)|Retrieves the handle of the `CWinThread` object.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CWinThread::m_bAutoDelete](#cwinthread__m_bautodelete)|Specifies whether to destroy the object at thread termination.|  \n|[CWinThread::m_hThread](#cwinthread__m_hthread)|Handle to the current thread.|  \n|[CWinThread::m_nThreadID](#cwinthread__m_nthreadid)|ID of the current thread.|  \n|[CWinThread::m_pActiveWnd](#cwinthread__m_pactivewnd)|Pointer to the main window of the container application when an OLE server is in-place active.|  \n|[CWinThread::m_pMainWnd](#cwinthread__m_pmainwnd)|Holds a pointer to the application's main window.|  \n  \n## Remarks  \n The main thread of execution is usually provided by an object derived from `CWinApp`; `CWinApp` is derived from `CWinThread`. Additional `CWinThread` objects allow multiple threads within a given application.  \n  \n There are two general types of threads that `CWinThread` supports: worker threads and user-interface threads. Worker threads have no message pump: for example, a thread that performs background calculations in a spreadsheet application. User-interface threads have a message pump and process messages received from the system. [CWinApp](../../mfc/reference/cwinapp-class.md) and classes derived from it are examples of user-interface threads. Other user-interface threads can also be derived directly from `CWinThread`.  \n  \n Objects of class `CWinThread` typically exist for the duration of the thread. If you wish to modify this behavior, set [m_bAutoDelete](#cwinthread__m_bautodelete) to **FALSE**.  \n  \n The `CWinThread` class is necessary to make your code and MFC fully thread-safe. Thread-local data used by the framework to maintain thread-specific information is managed by `CWinThread` objects. Because of this dependence on `CWinThread` to handle thread-local data, any thread that uses MFC must be created by MFC. For example, a thread created by the run-time function [_beginthread, _beginthreadex](../../c-runtime-library/reference/beginthread-beginthreadex.md) cannot use any MFC APIs.  \n  \n To create a thread, call [AfxBeginThread](application-information-and-management.md#afxbeginthread). There are two forms, depending on whether you want a worker or user-interface thread. If you want a user-interface thread, pass to `AfxBeginThread` a pointer to the `CRuntimeClass` of your `CWinThread`-derived class. If you want to create a worker thread, pass to `AfxBeginThread` a pointer to the controlling function and the parameter to the controlling function. For both worker threads and user-interface threads, you can specify optional parameters that modify priority, stack size, creation flags, and security attributes. `AfxBeginThread` will return a pointer to your new `CWinThread` object.  \n  \n Instead of calling `AfxBeginThread`, you can construct a `CWinThread`-derived object and then call `CreateThread`. This two-stage construction method is useful if you want to reuse the `CWinThread` object between successive creation and terminations of thread executions.  \n  \n For more information on `CWinThread`, see the articles [Multithreading with C++ and MFC](../../parallel/multithreading-with-cpp-and-mfc.md), [Multithreading: Creating User-Interface Threads](../../parallel/multithreading-creating-user-interface-threads.md), [Multithreading: Creating Worker Threads](../../parallel/multithreading-creating-worker-threads.md), and [Multithreading: How to Use the Synchronization Classes](../../parallel/multithreading-how-to-use-the-synchronization-classes.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n `CWinThread`  \n  \n## Requirements  \n **Header:** afxwin.h  \n  \n##  <a name=\"cwinthread__createthread\"></a>  CWinThread::CreateThread  \n Creates a thread to execute within the address space of the calling process.  \n  \n```  \nBOOL CreateThread(\n    DWORD dwCreateFlags = 0,  \n    UINT nStackSize = 0,  \n    LPSECURITY_ATTRIBUTES lpSecurityAttrs = NULL);\n```  \n  \n### Parameters  \n `dwCreateFlags`  \n Specifies an additional flag that controls the creation of the thread. This flag can contain one of two values:  \n  \n- **CREATE_SUSPENDED** Start the thread with a suspend count of one. Use **CREATE_SUSPENDED** if you want to initialize any member data of the `CWinThread` object, such as [m_bAutoDelete](#cwinthread__m_bautodelete) or any members of your derived class, before the thread starts running. Once your initialization is complete, use the [CWinThread::ResumeThread](#cwinthread__resumethread) to start the thread running. The thread will not execute until `CWinThread::ResumeThread` is called.  \n  \n- **0** Start the thread immediately after creation.  \n  \n `nStackSize`  \n Specifies the size in bytes of the stack for the new thread. If **0**, the stack size defaults to the same size as that of the process's primary thread.  \n  \n `lpSecurityAttrs`  \n Points to a [SECURITY_ATTRIBUTES](http://msdn.microsoft.com/library/windows/desktop/aa379560) structure that specifies the security attributes for the thread.  \n  \n### Return Value  \n Nonzero if the thread is created successfully; otherwise 0.  \n  \n### Remarks  \n Use `AfxBeginThread` to create a thread object and execute it in one step. Use `CreateThread` if you want to reuse the thread object between successive creation and termination of thread executions.  \n  \n##  <a name=\"cwinthread__cwinthread\"></a>  CWinThread::CWinThread  \n Constructs a `CWinThread` object.  \n  \n```  \nCWinThread();\n```  \n  \n### Remarks  \n To begin the thread's execution, call the [CreateThread](#cwinthread__createthread) member function. You will usually create threads by calling [AfxBeginThread](http://msdn.microsoft.com/library/e9e8684d-24f7-4599-8fdf-1f4f560a753b), which will call this constructor and `CreateThread`.  \n  \n##  <a name=\"cwinthread__exitinstance\"></a>  CWinThread::ExitInstance  \n Called by the framework from within a rarely overridden [Run](#cwinthread__run) member function to exit this instance of the thread, or if a call to [InitInstance](#cwinthread__initinstance) fails.  \n  \n```  \nvirtual int ExitInstance();\n```  \n  \n### Return Value  \n The thread's exit code; 0 indicates no errors, and values greater than 0 indicate an error. This value can be retrieved by calling [GetExitCodeThread](http://msdn.microsoft.com/library/windows/desktop/ms683190).  \n  \n### Remarks  \n Do not call this member function from anywhere but within the **Run** member function. This member function is used only in user-interface threads.  \n  \n The default implementation of this function deletes the `CWinThread` object if [m_bAutoDelete](#cwinthread__m_bautodelete) is **TRUE**. Override this function if you wish to perform additional clean-up when your thread terminates. Your implementation of `ExitInstance` should call the base class's version after your code is executed.  \n  \n##  <a name=\"cwinthread__getmainwnd\"></a>  CWinThread::GetMainWnd  \n If your application is an OLE server, call this function to retrieve a pointer to the active main window of the application instead of directly referring to the `m_pMainWnd` member of the application object.  \n  \n```  \nvirtual CWnd* GetMainWnd();\n```  \n  \n### Return Value  \n This function returns a pointer to one of two types of windows. If your thread is part of an OLE server and has an object that is in-place active inside an active container, this function returns the [CWinApp::m_pActiveWnd](../../mfc/reference/cwinapp-class.md#cwinapp__m_pactivewnd) data member of the `CWinThread` object.  \n  \n If there is no object that is in-place active within a container or your application is not an OLE server, this function returns the [m_pMainWnd](#cwinthread__m_pmainwnd) data member of your thread object.  \n  \n### Remarks  \n For user-interface threads, this is equivalent to directly referring to the `m_pActiveWnd` member of your application object.  \n  \n If your application is not an OLE server, then calling this function is equivalent to directly referring to the `m_pMainWnd` member of your application object.  \n  \n Override this function to modify the default behavior.  \n  \n##  <a name=\"cwinthread__getthreadpriority\"></a>  CWinThread::GetThreadPriority  \n Gets the current thread priority level of this thread.  \n  \n```  \nint GetThreadPriority();\n```  \n  \n### Return Value  \n The current thread priority level within its priority class. The value returned will be one of the following, listed from highest priority to lowest:  \n  \n- **THREAD_PRIORITY_TIME_CRITICAL**  \n  \n- **THREAD_PRIORITY_HIGHEST**  \n  \n- **THREAD_PRIORITY_ABOVE_NORMAL**  \n  \n- **THREAD_PRIORITY_NORMAL**  \n  \n- **THREAD_PRIORITY_BELOW_NORMAL**  \n  \n- **THREAD_PRIORITY_LOWEST**  \n  \n- **THREAD_PRIORITY_IDLE**  \n  \n For more information on these priorities, see [SetThreadPriority](http://msdn.microsoft.com/library/windows/desktop/ms686277) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cwinthread__initinstance\"></a>  CWinThread::InitInstance  \n `InitInstance` must be overridden to initialize each new instance of a user-interface thread.  \n  \n```  \nvirtual BOOL InitInstance();\n```  \n  \n### Return Value  \n Nonzero if initialization is successful; otherwise 0.  \n  \n### Remarks  \n Typically, you override `InitInstance` to perform tasks that must be completed when a thread is first created.  \n  \n This member function is used only in user-interface threads. Perform initialization of worker threads in the controlling function passed to [AfxBeginThread](application-information-and-management.md#afxbeginthread).  \n  \n##  <a name=\"cwinthread__isidlemessage\"></a>  CWinThread::IsIdleMessage  \n Override this function to keep **OnIdle** from being called after specific messages are generated.  \n  \n```  \nvirtual BOOL IsIdleMessage(MSG* pMsg);\n```  \n  \n### Parameters  \n `pMsg`  \n Points to the current message being processed.  \n  \n### Return Value  \n Nonzero if `OnIdle` should be called after processing message; otherwise 0.  \n  \n### Remarks  \n The default implementation does not call **OnIdle** after redundant mouse messages and messages generated by blinking carets.  \n  \n If an application has created a short timer, **OnIdle** will be called frequently, causing performance problems. To improve such an application's performance, override `IsIdleMessage` in the application's `CWinApp`-derived class to check for `WM_TIMER` messages as follows:  \n  \n [!code-cpp[NVC_MFCDocView#189](../../mfc/codesnippet/cpp/cwinthread-class_1.cpp)]  \n  \n Handling `WM_TIMER` in this fashion will improve performance of applications that use short timers.  \n  \n##  <a name=\"cwinthread__m_bautodelete\"></a>  CWinThread::m_bAutoDelete  \n Specifies whether the `CWinThread` object should be automatically deleted at thread termination.  \n  \n```  \nBOOL m_bAutoDelete;  \n```  \n  \n### Remarks  \n The `m_bAutoDelete` data member is a public variable of type **BOOL**.  \n  \n The value of `m_bAutoDelete` does not affect how the underlying thread handle is closed. The thread handle is always closed when the `CWinThread` object is destroyed.  \n  \n##  <a name=\"cwinthread__m_hthread\"></a>  CWinThread::m_hThread  \n Handle to the thread attached to this `CWinThread`.  \n  \n```  \nHANDLE m_hThread;  \n```  \n  \n### Remarks  \n The `m_hThread` data member is a public variable of type `HANDLE`. It is only valid if underlying thread currently exists.  \n  \n##  <a name=\"cwinthread__m_nthreadid\"></a>  CWinThread::m_nThreadID  \n ID of the thread attached to this `CWinThread`.  \n  \n```  \nDWORD m_nThreadID;  \n```  \n  \n### Remarks  \n The **m_nThreadID** data member is a public variable of type `DWORD`. It is only valid if underlying thread currently exists.  \n  \n### Example  \n  See the example for [AfxGetThread](application-information-and-management.md#afxgetthread).  \n  \n##  <a name=\"cwinthread__m_pactivewnd\"></a>  CWinThread::m_pActiveWnd  \n Use this data member to store a pointer to your thread's active window object.  \n  \n```  \nCWnd* m_pActiveWnd;  \n```  \n  \n### Remarks  \n The Microsoft Foundation Class Library will automatically terminate your thread when the window referred to by `m_pActiveWnd` is closed. If this thread is the primary thread for an application, the application will also be terminated. If this data member is **NULL**, the active window for the application's `CWinApp` object will be inherited. `m_pActiveWnd` is a public variable of type **CWnd\\***.  \n  \n Typically, you set this member variable when you override `InitInstance`. In a worker thread, the value of this data member is inherited from its parent thread.  \n  \n##  <a name=\"cwinthread__m_pmainwnd\"></a>  CWinThread::m_pMainWnd  \n Use this data member to store a pointer to your thread's main window object.  \n  \n```  \nCWnd* m_pMainWnd;  \n```  \n  \n### Remarks  \n The Microsoft Foundation Class Library will automatically terminate your thread when the window referred to by `m_pMainWnd` is closed. If this thread is the primary thread for an application, the application will also be terminated. If this data member is **NULL**, the main window for the application's `CWinApp` object will be used to determine when to terminate the thread. `m_pMainWnd` is a public variable of type **CWnd\\***.  \n  \n Typically, you set this member variable when you override `InitInstance`. In a worker thread, the value of this data member is inherited from its parent thread.  \n  \n##  <a name=\"cwinthread__onidle\"></a>  CWinThread::OnIdle  \n Override this member function to perform idle-time processing.  \n  \n```  \nvirtual BOOL OnIdle(LONG lCount);\n```  \n  \n### Parameters  \n `lCount`  \n A counter incremented each time `OnIdle` is called when the thread's message queue is empty. This count is reset to 0 each time a new message is processed. You can use the `lCount` parameter to determine the relative length of time the thread has been idle without processing a message.  \n  \n### Return Value  \n Nonzero to receive more idle processing time; 0 if no more idle processing time is needed.  \n  \n### Remarks  \n `OnIdle` is called in the default message loop when the thread's message queue is empty. Use your override to call your own background idle-handler tasks.  \n  \n `OnIdle` should return 0 to indicate that no additional idle processing time is required. The `lCount` parameter is incremented each time `OnIdle` is called when the message queue is empty and is reset to 0 each time a new message is processed. You can call your different idle routines based on this count.  \n  \n The default implementation of this member function frees temporary objects and unused dynamic link libraries from memory.  \n  \n This member function is used only in user-interface threads.  \n  \n Because the application cannot process messages until `OnIdle` returns, do not perform lengthy tasks in this function.  \n  \n##  <a name=\"cwinthread__operator_handle\"></a>  CWinThread::operator HANDLE  \n Retrieves the handle of the `CWinThread` object.  \n  \n```  \noperator HANDLE() const;\n\n \n```  \n  \n### Return Value  \n If successful, the handle of the thread object; otherwise, **NULL**.  \n  \n### Remarks  \n Use the handle to directly call Windows APIs.  \n  \n##  <a name=\"cwinthread__postthreadmessage\"></a>  CWinThread::PostThreadMessage  \n Called to post a user-defined message to another `CWinThread` object.  \n  \n```  \nBOOL PostThreadMessage(\n    UINT message,  \n    WPARAM wParam,  \n    LPARAM lParam);\n```  \n  \n### Parameters  \n `message`  \n ID of the user-defined message.  \n  \n `wParam`  \n First message parameter.  \n  \n `lParam`  \n Second message parameter.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n The posted message is mapped to the proper message handler by the message map macro `ON_THREAD_MESSAGE`.  \n  \n> [!NOTE]\n>  When calling the Windows [PostThreadMessage](http://msdn.microsoft.com/library/windows/desktop/ms644946) function within an MFC application, the MFC message handlers are not called. For more information, see the Knowledge Base article, \"PRB: MFC Message Handler Not Called with PostThreadMessage()\" (Q142415).  \n  \n##  <a name=\"cwinthread__pretranslatemessage\"></a>  CWinThread::PreTranslateMessage  \n Override this function to filter window messages before they are dispatched to the Windows functions [TranslateMessage](http://msdn.microsoft.com/library/windows/desktop/ms644955) and [DispatchMessage](http://msdn.microsoft.com/library/windows/desktop/ms644934).  \n  \n```  \nvirtual BOOL PreTranslateMessage(MSG* pMsg);\n```  \n  \n### Parameters  \n `pMsg`  \n Points to a [MSG structure](../../mfc/reference/msg-structure1.md) containing the message to process.  \n  \n### Return Value  \n Nonzero if the message was fully processed in `PreTranslateMessage` and should not be processed further. Zero if the message should be processed in the normal way.  \n  \n### Remarks  \n This member function is used only in user-interface threads.  \n  \n##  <a name=\"cwinthread__processmessagefilter\"></a>  CWinThread::ProcessMessageFilter  \n The framework's hook function calls this member function to filter and respond to certain Windows messages.  \n  \n```  \nvirtual BOOL ProcessMessageFilter(\n    int code,  \n    LPMSG lpMsg);\n```  \n  \n### Parameters  \n `code`  \n Specifies a hook code. This member function uses the code to determine how to process `lpMsg.`  \n  \n `lpMsg`  \n A pointer to a Windows [MSG structure](../../mfc/reference/msg-structure1.md).  \n  \n### Return Value  \n Nonzero if the message is processed; otherwise 0.  \n  \n### Remarks  \n A hook function processes events before they are sent to the application's normal message processing.  \n  \n If you override this advanced feature, be sure to call the base-class version to maintain the framework's hook processing.  \n  \n##  <a name=\"cwinthread__processwndprocexception\"></a>  CWinThread::ProcessWndProcException  \n The framework calls this member function whenever the handler does not catch an exception thrown in one of your thread's message or command handlers.  \n  \n```  \nvirtual LRESULT ProcessWndProcException(\n    CException* e,  \n    const MSG* pMsg);\n```  \n  \n### Parameters  \n *e*  \n Points to an unhandled exception.  \n  \n `pMsg`  \n Points to a [MSG structure](../../mfc/reference/msg-structure1.md) containing information about the windows message that caused the framework to throw an exception.  \n  \n### Return Value  \n –1 if a `WM_CREATE` exception is generated; otherwise 0.  \n  \n### Remarks  \n Do not call this member function directly.  \n  \n The default implementation of this member function handles only exceptions generated from the following messages:  \n  \n|Command|Action|  \n|-------------|------------|  \n|`WM_CREATE`|Fail.|  \n|`WM_PAINT`|Validate the affected window, thus preventing another `WM_PAINT` message from being generated.|  \n  \n Override this member function to provide global handling of your exceptions. Call the base functionality only if you wish to display the default behavior.  \n  \n This member function is used only in threads that have a message pump.  \n  \n##  <a name=\"cwinthread__pumpmessage\"></a>  CWinThread::PumpMessage  \n Contains the thread's message loop.  \n  \n```  \nvirtual BOOL PumpMessage();\n```  \n  \n### Remarks  \n `PumpMessage` contains the thread's message loop. **PumpMessage** is called by `CWinThread` to pump the thread's messages. You can call `PumpMessage` directly to force messages to be processed, or you can override `PumpMessage` to change its default behavior.  \n  \n Calling `PumpMessage` directly and overriding its default behavior is recommended for advanced users only.  \n  \n##  <a name=\"cwinthread__resumethread\"></a>  CWinThread::ResumeThread  \n Called to resume execution of a thread that was suspended by the [SuspendThread](#cwinthread__suspendthread) member function, or a thread created with the **CREATE_SUSPENDED** flag.  \n  \n```  \nDWORD ResumeThread();\n```  \n  \n### Return Value  \n The thread's previous suspend count if successful; `0xFFFFFFFF` otherwise. If the return value is zero, the current thread was not suspended. If the return value is one, the thread was suspended, but is now restarted. Any return value greater than one means the thread remains suspended.  \n  \n### Remarks  \n The suspend count of the current thread is reduced by one. If the suspend count is reduced to zero, the thread resumes execution; otherwise the thread remains suspended.  \n  \n##  <a name=\"cwinthread__run\"></a>  CWinThread::Run  \n Provides a default message loop for user-interface threads.  \n  \n```  \nvirtual int Run();\n```  \n  \n### Return Value  \n An `int` value that is returned by the thread. This value can be retrieved by calling [GetExitCodeThread](http://msdn.microsoft.com/library/windows/desktop/ms683190).  \n  \n### Remarks  \n **Run** acquires and dispatches Windows messages until the application receives a [WM_QUIT](http://msdn.microsoft.com/library/windows/desktop/ms632641) message. If the thread's message queue currently contains no messages, **Run** calls `OnIdle` to perform idle-time processing. Incoming messages go to the [PreTranslateMessage](#cwinthread__pretranslatemessage) member function for special processing and then to the Windows function [TranslateMessage](http://msdn.microsoft.com/library/windows/desktop/ms644955) for standard keyboard translation. Finally, the [DispatchMessage](http://msdn.microsoft.com/library/windows/desktop/ms644934) Windows function is called.  \n  \n **Run** is rarely overridden, but you can override it to implement special behavior.  \n  \n This member function is used only in user-interface threads.  \n  \n##  <a name=\"cwinthread__setthreadpriority\"></a>  CWinThread::SetThreadPriority  \n This function sets the priority level of the current thread within its priority class.  \n  \n```  \nBOOL SetThreadPriority(int nPriority);\n```  \n  \n### Parameters  \n `nPriority`  \n Specifies the new thread priority level within its priority class. This parameter must be one of the following values, listed from highest priority to lowest:  \n  \n- **THREAD_PRIORITY_TIME_CRITICAL**  \n  \n- **THREAD_PRIORITY_HIGHEST**  \n  \n- **THREAD_PRIORITY_ABOVE_NORMAL**  \n  \n- **THREAD_PRIORITY_NORMAL**  \n  \n- **THREAD_PRIORITY_BELOW_NORMAL**  \n  \n- **THREAD_PRIORITY_LOWEST**  \n  \n- **THREAD_PRIORITY_IDLE**  \n  \n For more information on these priorities, see [SetThreadPriority](http://msdn.microsoft.com/library/windows/desktop/ms686277) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Return Value  \n Nonzero if function was successful; otherwise 0.  \n  \n### Remarks  \n It can only be called after [CreateThread](#cwinthread__createthread) successfully returns.  \n  \n##  <a name=\"cwinthread__suspendthread\"></a>  CWinThread::SuspendThread  \n Increments the current thread's suspend count.  \n  \n```  \nDWORD SuspendThread();\n```  \n  \n### Return Value  \n The thread's previous suspend count if successful; `0xFFFFFFFF` otherwise.  \n  \n### Remarks  \n If any thread has a suspend count above zero, that thread does not execute. The thread can be resumed by calling the [ResumeThread](#cwinthread__resumethread) member function.  \n  \n## See Also  \n [CCmdTarget Class](../../mfc/reference/ccmdtarget-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CWinApp Class](../../mfc/reference/cwinapp-class.md)   \n [CCmdTarget Class](../../mfc/reference/ccmdtarget-class.md)\n"}