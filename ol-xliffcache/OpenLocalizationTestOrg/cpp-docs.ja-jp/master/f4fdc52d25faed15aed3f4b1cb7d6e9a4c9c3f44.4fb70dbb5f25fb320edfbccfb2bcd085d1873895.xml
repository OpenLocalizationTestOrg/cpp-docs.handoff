{"nodes":[{"pos":[12,55],"content":"hash_set::insert (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"hash_set::insert (STL-CLR) | Microsoft Docs","pos":[0,43]}]},{"content":"hash_set::insert (STL/CLR)","pos":[635,661]},{"content":"Adds elements.","pos":[662,676]},{"content":"Syntax","pos":[685,691]},{"content":"Parameters","pos":[974,984]},{"content":"first","pos":[988,993]},{"content":"Beginning of range to insert.","pos":[997,1026]},{"content":"last","pos":[1033,1037]},{"content":"End of range to insert.","pos":[1041,1064]},{"content":"right","pos":[1071,1076]},{"content":"Enumeration to insert.","pos":[1080,1102]},{"content":"val","pos":[1109,1112]},{"content":"Key value to insert.","pos":[1116,1136]},{"content":"where","pos":[1143,1148]},{"content":"Where in container to insert (hint only).","pos":[1152,1193]},{"content":"Remarks","pos":[1202,1209]},{"content":"Each of the member functions inserts a sequence specified by the remaining operands.","pos":[1213,1297]},{"content":"The first member function endeavors to insert an element with value <ph id=\"ph1\">`val`</ph>, and returns a pair of values <ph id=\"ph2\">`X`</ph>.","pos":[1304,1412],"source":"The first member function endeavors to insert an element with value `val`, and returns a pair of values `X`."},{"content":"If <ph id=\"ph1\">`X.second`</ph> is true, <ph id=\"ph2\">`X.first`</ph> designates the newly inserted element; otherwise <ph id=\"ph3\">`X.first`</ph> designates an element with equivalent ordering that already exists and no new element is inserted.","pos":[1413,1603],"source":" If `X.second` is true, `X.first` designates the newly inserted element; otherwise `X.first` designates an element with equivalent ordering that already exists and no new element is inserted."},{"content":"You use it to insert a single element.","pos":[1604,1642]},{"content":"The second member function inserts an element with value <ph id=\"ph1\">`val`</ph>, using <ph id=\"ph2\">`where`</ph> as a hint (to improve performance), and returns an iterator that designates the newly inserted element.","pos":[1649,1830],"source":"The second member function inserts an element with value `val`, using `where` as a hint (to improve performance), and returns an iterator that designates the newly inserted element."},{"content":"You use it to insert a single element which might be adjacent to an element you know.","pos":[1831,1916]},{"content":"The third member function inserts the sequence <ph id=\"ph1\">`[``first``,`</ph> <ph id=\"ph2\">`last``)`</ph>.","pos":[1923,1994],"source":"The third member function inserts the sequence `[``first``,` `last``)`."},{"content":"You use it to insert zero or more elements copied from another sequence.","pos":[1995,2067]},{"content":"The fourth member function inserts the sequence designated by the <ph id=\"ph1\">`right`</ph>.","pos":[2074,2148],"source":"The fourth member function inserts the sequence designated by the `right`."},{"content":"You use it to insert a sequence described by an enumerator.","pos":[2149,2208]},{"content":"Each element insertion takes time proportional to the logarithm of the number of elements in the controlled sequence.","pos":[2215,2332]},{"content":"Insertion can occur in amortized constant time, however, given a hint that designates an element adjacent to the insertion point.","pos":[2333,2462]},{"content":"Example","pos":[2471,2478]},{"content":"Requirements","pos":[4440,4452]},{"pos":[4456,4486],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/hash_set&gt;","source":"**Header:** \\<cliext/hash_set>"},{"pos":[4493,4514],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[4523,4531]},{"content":"hash_set (STL/CLR)","pos":[4536,4554]}],"content":"---\ntitle: \"hash_set::insert (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::hash_set::insert\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"insert member [STL/CLR]\"\nms.assetid: 0a9bc9aa-012e-4101-9e8c-f1f4b6b76af7\ncaps.latest.revision: 14\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# hash_set::insert (STL/CLR)\nAdds elements.  \n  \n## Syntax  \n  \n```  \ncliext::pair<iterator, bool> insert(value_type val);  \niterator insert(iterator where, value_type val);  \ntemplate<typename InIter>  \n    void insert(InIter first, InIter last);  \nvoid insert(System::Collections::Generic::IEnumerable<value_type>^ right);  \n```  \n  \n#### Parameters  \n first  \n Beginning of range to insert.  \n  \n last  \n End of range to insert.  \n  \n right  \n Enumeration to insert.  \n  \n val  \n Key value to insert.  \n  \n where  \n Where in container to insert (hint only).  \n  \n## Remarks  \n Each of the member functions inserts a sequence specified by the remaining operands.  \n  \n The first member function endeavors to insert an element with value `val`, and returns a pair of values `X`. If `X.second` is true, `X.first` designates the newly inserted element; otherwise `X.first` designates an element with equivalent ordering that already exists and no new element is inserted. You use it to insert a single element.  \n  \n The second member function inserts an element with value `val`, using `where` as a hint (to improve performance), and returns an iterator that designates the newly inserted element. You use it to insert a single element which might be adjacent to an element you know.  \n  \n The third member function inserts the sequence `[``first``,` `last``)`. You use it to insert zero or more elements copied from another sequence.  \n  \n The fourth member function inserts the sequence designated by the `right`. You use it to insert a sequence described by an enumerator.  \n  \n Each element insertion takes time proportional to the logarithm of the number of elements in the controlled sequence. Insertion can occur in amortized constant time, however, given a hint that designates an element adjacent to the insertion point.  \n  \n## Example  \n  \n```  \n// cliext_hash_set_insert.cpp   \n// compile with: /clr   \n#include <cliext/hash_set>   \n  \ntypedef cliext::hash_set<wchar_t> Myhash_set;   \ntypedef Myhash_set::pair_iter_bool Pairib;   \nint main()   \n    {   \n    Myhash_set c1;   \n    c1.insert(L'a');   \n    c1.insert(L'b');   \n    c1.insert(L'c');   \n  \n// display initial contents \" a b c\"   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// insert a single value, unique and duplicate   \n    Pairib pair1 = c1.insert(L'x');   \n    System::Console::WriteLine(\"insert(L'x') = [{0} {1}]\",   \n        *pair1.first, pair1.second);   \n  \n    pair1 = c1.insert(L'b');   \n    System::Console::WriteLine(\"insert(L'b') = [{0} {1}]\",   \n        *pair1.first, pair1.second);   \n  \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// insert a single value with hint   \n    System::Console::WriteLine(\"insert(begin(), L'y') = {0}\",   \n        *c1.insert(c1.begin(), L'y'));   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// insert an iterator range   \n    Myhash_set c2;   \n    Myhash_set::iterator it = c1.end();   \n    c2.insert(c1.begin(), --it);   \n    for each (wchar_t elem in c2)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// insert an enumeration   \n    Myhash_set c3;   \n    c3.insert(   // NOTE: cast is not needed   \n        (System::Collections::Generic::IEnumerable<wchar_t>^)%c1);   \n    for each (wchar_t elem in c3)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n a b c  \ninsert(L'x') = [x True]  \ninsert(L'b') = [b False]  \n a b c x  \ninsert(begin(), L'y') = y  \n a b c x y  \n a b c x  \n a b c x y  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/hash_set>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [hash_set (STL/CLR)](../dotnet/hash-set-stl-clr.md)"}