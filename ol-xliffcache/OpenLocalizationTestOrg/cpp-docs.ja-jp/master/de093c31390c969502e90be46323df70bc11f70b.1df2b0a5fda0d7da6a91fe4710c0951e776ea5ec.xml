{"nodes":[{"pos":[12,50],"content":"CriticalSection Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CriticalSection Class | Microsoft Docs","pos":[0,38]}]},{"content":"CriticalSection Class","pos":[683,704]},{"content":"Represents a critical section object.","pos":[705,742]},{"content":"Syntax","pos":[751,757]},{"content":"Members","pos":[806,813]},{"content":"Constructor","pos":[823,834]},{"content":"Name","pos":[841,845]},{"content":"Description","pos":[846,857]},{"content":"CriticalSection::CriticalSection Constructor","pos":[896,940]},{"content":"Initializes a synchronization object that is similar to a mutex object, but can be used by only the threads of a single process.","pos":[1001,1129]},{"content":"CriticalSection::~CriticalSection Destructor","pos":[1135,1179]},{"content":"Deinitializes and destroys the current CriticalSection object.","pos":[1245,1307]},{"content":"Public Methods","pos":[1318,1332]},{"content":"Name","pos":[1339,1343]},{"content":"Description","pos":[1344,1355]},{"content":"CriticalSection::TryLock Method","pos":[1394,1425]},{"content":"Attempts to enter a critical section without blocking.","pos":[1473,1527]},{"content":"If the call is successful, the calling thread takes ownership of the critical section.","pos":[1528,1614]},{"content":"CriticalSection::Lock Method","pos":[1620,1648]},{"content":"Waits for ownership of the specified critical section object.","pos":[1693,1754]},{"content":"The function returns when the calling thread is granted ownership.","pos":[1755,1821]},{"content":"CriticalSection::IsValid Method","pos":[1827,1858]},{"content":"Indicates whether the current critical section is valid.","pos":[1906,1962]},{"content":"Protected Data Members","pos":[1973,1995]},{"content":"Name","pos":[2002,2006]},{"content":"Description","pos":[2007,2018]},{"content":"CriticalSection::cs_ Data Member","pos":[2057,2089]},{"content":"Declares a critical section data member.","pos":[2137,2177]},{"content":"Inheritance Hierarchy","pos":[2187,2208]},{"content":"Requirements","pos":[2238,2250]},{"pos":[2254,2280],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> corewrappers.h","source":"**Header:** corewrappers.h"},{"pos":[2287,2326],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> Microsoft::WRL::Wrappers","source":"**Namespace:** Microsoft::WRL::Wrappers"},{"content":"See Also","pos":[2335,2343]},{"content":"Microsoft::WRL::Wrappers Namespace","pos":[2348,2382]}],"content":"---\ntitle: \"CriticalSection Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"corewrappers/Microsoft::WRL::Wrappers::CriticalSection\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CriticalSection class\"\nms.assetid: f2e0a024-71a3-4f6b-99ea-d93a4a608ac4\ncaps.latest.revision: 4\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# CriticalSection Class\nRepresents a critical section object.  \n  \n## Syntax  \n  \n```  \nclass CriticalSection;  \n```  \n  \n## Members  \n  \n### Constructor  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CriticalSection::CriticalSection Constructor](../windows/criticalsection-criticalsection-constructor.md)|Initializes a synchronization object that is similar to a mutex object, but can be used by only the threads of a single process.|  \n|[CriticalSection::~CriticalSection Destructor](../windows/criticalsection-tilde-criticalsection-destructor.md)|Deinitializes and destroys the current CriticalSection object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CriticalSection::TryLock Method](../windows/criticalsection-trylock-method.md)|Attempts to enter a critical section without blocking. If the call is successful, the calling thread takes ownership of the critical section.|  \n|[CriticalSection::Lock Method](../windows/criticalsection-lock-method.md)|Waits for ownership of the specified critical section object. The function returns when the calling thread is granted ownership.|  \n|[CriticalSection::IsValid Method](../windows/criticalsection-isvalid-method.md)|Indicates whether the current critical section is valid.|  \n  \n### Protected Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CriticalSection::cs_ Data Member](../windows/criticalsection-cs-data-member.md)|Declares a critical section data member.|  \n  \n## Inheritance Hierarchy  \n `CriticalSection`  \n  \n## Requirements  \n **Header:** corewrappers.h  \n  \n **Namespace:** Microsoft::WRL::Wrappers  \n  \n## See Also  \n [Microsoft::WRL::Wrappers Namespace](../windows/microsoft-wrl-wrappers-namespace.md)"}