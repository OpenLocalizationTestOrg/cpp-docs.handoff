{"nodes":[{"pos":[12,42],"content":"ITarget Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ITarget Class | Microsoft Docs","pos":[0,30]}]},{"content":"ITarget Class","pos":[613,626]},{"content":"The <ph id=\"ph1\">`ITarget`</ph> class is the interface for all target blocks.","pos":[627,686],"source":"The `ITarget` class is the interface for all target blocks."},{"content":"Target blocks consume messages offered to them by <ph id=\"ph1\">`ISource`</ph> blocks.","pos":[687,754],"source":" Target blocks consume messages offered to them by `ISource` blocks."},{"content":"Syntax","pos":[763,769]},{"content":"Parameters","pos":[826,836]},{"content":"The data type of the payload within the messages accepted by the target block.","pos":[847,925]},{"content":"Members","pos":[934,941]},{"content":"Public Typedefs","pos":[951,966]},{"content":"Name","pos":[973,977]},{"content":"Description","pos":[978,989]},{"pos":[1043,1176],"content":"The signature of any method used by the block that returns a <ph id=\"ph1\">`bool`</ph> value to determine whether an offered message should be accepted.","source":"The signature of any method used by the block that returns a `bool` value to determine whether an offered message should be accepted."},{"pos":[1188,1209],"content":"A type alias for <ph id=\"ph1\">`T`</ph>.","source":"A type alias for `T`."},{"content":"Public Constructors","pos":[1220,1239]},{"content":"Name","pos":[1246,1250]},{"content":"Description","pos":[1251,1262]},{"content":"ITarget::~ITarget Destructor","pos":[1301,1329]},{"pos":[1338,1368],"content":"Destroys the <ph id=\"ph1\">`ITarget`</ph> object.","source":"Destroys the `ITarget` object."},{"content":"Public Methods","pos":[1379,1393]},{"content":"Name","pos":[1400,1404]},{"content":"Description","pos":[1405,1416]},{"content":"ITarget::propagate Method","pos":[1455,1480]},{"content":"When overridden in a derived class, asynchronously passes a message from a source block to this target block.","pos":[1494,1603]},{"content":"ITarget::send Method","pos":[1609,1629]},{"content":"When overridden in a derived class, synchronously passes a message to the target block.","pos":[1638,1725]},{"content":"ITarget::supports_anonymous_source Method","pos":[1731,1772]},{"content":"When overridden in a derived class, returns true or false depending on whether the message block accepts messages offered by a source that is not linked to it.","pos":[1802,1961]},{"content":"If the overridden method returns <ph id=\"ph1\">`true`</ph>, the target cannot postpone an offered message, as consumption of a postponed message at a later time requires the source to be identified in its sourse link registry.","pos":[1962,2169],"source":" If the overridden method returns `true`, the target cannot postpone an offered message, as consumption of a postponed message at a later time requires the source to be identified in its sourse link registry."},{"content":"Protected Methods","pos":[2180,2197]},{"content":"Name","pos":[2204,2208]},{"content":"Description","pos":[2209,2220]},{"content":"ITarget::link_source Method","pos":[2259,2286]},{"pos":[2302,2393],"content":"When overridden in a derived class, links a specified source block to this <ph id=\"ph1\">`ITarget`</ph> block.","source":"When overridden in a derived class, links a specified source block to this `ITarget` block."},{"content":"ITarget::unlink_source Method","pos":[2399,2428]},{"pos":[2446,2541],"content":"When overridden in a derived class, unlinks a specified source block from this <ph id=\"ph1\">`ITarget`</ph> block.","source":"When overridden in a derived class, unlinks a specified source block from this `ITarget` block."},{"content":"ITarget::unlink_sources Method","pos":[2547,2577]},{"pos":[2596,2684],"content":"When overridden in a derived class, unlinks all source blocks from this <ph id=\"ph1\">`ITarget`</ph> block.","source":"When overridden in a derived class, unlinks all source blocks from this `ITarget` block."},{"content":"Remarks","pos":[2694,2701]},{"pos":[2705,2818],"content":"For more information, see <bpt id=\"p1\">[</bpt>Asynchronous Message Blocks<ept id=\"p1\">](../../../parallel/concrt/asynchronous-message-blocks.md)</ept>.","source":"For more information, see [Asynchronous Message Blocks](../../../parallel/concrt/asynchronous-message-blocks.md)."},{"content":"Inheritance Hierarchy","pos":[2827,2848]},{"content":"Requirements","pos":[2870,2882]},{"pos":[2886,2906],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> agents.h","source":"**Header:** agents.h"},{"pos":[2913,2939],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[2970,2998],"content":"ITarget::~ITarget Destructor"},{"pos":[3002,3032],"content":"Destroys the <ph id=\"ph1\">`ITarget`</ph> object.","source":"Destroys the `ITarget` object."},{"pos":[3103,3130],"content":"ITarget::link_source Method"},{"pos":[3134,3225],"content":"When overridden in a derived class, links a specified source block to this <ph id=\"ph1\">`ITarget`</ph> block.","source":"When overridden in a derived class, links a specified source block to this `ITarget` block."},{"content":"Parameters","pos":[3308,3318]},{"content":"The <ph id=\"ph1\">`ISource`</ph> block being linked to this <ph id=\"ph2\">`ITarget`</ph> block.","pos":[3336,3393],"source":" The `ISource` block being linked to this `ITarget` block."},{"content":"Remarks","pos":[3403,3410]},{"content":"This function should not be called directly on an <ph id=\"ph1\">`ITarget`</ph> block.","pos":[3414,3480],"source":"This function should not be called directly on an `ITarget` block."},{"content":"Blocks should be connected together using the <ph id=\"ph1\">`link_target`</ph> method on <ph id=\"ph2\">`ISource`</ph> blocks, which will invoke the <ph id=\"ph3\">`link_source`</ph> method on the corresponding target.","pos":[3481,3640],"source":" Blocks should be connected together using the `link_target` method on `ISource` blocks, which will invoke the `link_source` method on the corresponding target."},{"pos":[3676,3701],"content":"ITarget::propagate Method"},{"content":"When overridden in a derived class, asynchronously passes a message from a source block to this target block.","pos":[3705,3814]},{"content":"Parameters","pos":[3953,3963]},{"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object.","pos":[3982,4016],"source":" A pointer to the `message` object."},{"content":"A pointer to the source block offering the message.","pos":[4037,4088]},{"content":"Return Value","pos":[4098,4110]},{"pos":[4114,4226],"content":"A <bpt id=\"p1\">[</bpt>message_status<ept id=\"p1\">](concurrency-namespace-enums.md)</ept> indication of what the target decided to do with the message.","source":"A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message."},{"content":"Remarks","pos":[4236,4243]},{"pos":[4247,4410],"content":"The method throws an <bpt id=\"p1\">[</bpt>invalid_argument<ept id=\"p1\">](../../../standard-library/invalid-argument-class.md)</ept> exception if either the <ph id=\"ph1\">`_PMessage`</ph> or <ph id=\"ph2\">`_PSource`</ph> parameter is <ph id=\"ph3\">`NULL`</ph>.","source":"The method throws an [invalid_argument](../../../standard-library/invalid-argument-class.md) exception if either the `_PMessage` or `_PSource` parameter is `NULL`."},{"pos":[4441,4461],"content":"ITarget::send Method"},{"content":"When overridden in a derived class, synchronously passes a message to the target block.","pos":[4465,4552]},{"content":"Parameters","pos":[4678,4688]},{"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object.","pos":[4707,4741],"source":" A pointer to the `message` object."},{"content":"A pointer to the source block offering the message.","pos":[4762,4813]},{"content":"Return Value","pos":[4823,4835]},{"pos":[4839,4951],"content":"A <bpt id=\"p1\">[</bpt>message_status<ept id=\"p1\">](concurrency-namespace-enums.md)</ept> indication of what the target decided to do with the message.","source":"A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message."},{"content":"Remarks","pos":[4961,4968]},{"pos":[4972,5135],"content":"The method throws an <bpt id=\"p1\">[</bpt>invalid_argument<ept id=\"p1\">](../../../standard-library/invalid-argument-class.md)</ept> exception if either the <ph id=\"ph1\">`_PMessage`</ph> or <ph id=\"ph2\">`_PSource`</ph> parameter is <ph id=\"ph3\">`NULL`</ph>.","source":"The method throws an [invalid_argument](../../../standard-library/invalid-argument-class.md) exception if either the `_PMessage` or `_PSource` parameter is `NULL`."},{"pos":[5142,5277],"content":"Using the <ph id=\"ph1\">`send`</ph> method outside of message initiation and to propagate messages within a network is dangerous and can lead to deadlock.","source":"Using the `send` method outside of message initiation and to propagate messages within a network is dangerous and can lead to deadlock."},{"pos":[5284,5428],"content":"When <ph id=\"ph1\">`send`</ph> returns, the message has either already been accepted, and transferred into the target block, or it has been declined by the target.","source":"When `send` returns, the message has either already been accepted, and transferred into the target block, or it has been declined by the target."},{"pos":[5480,5521],"content":"ITarget::supports_anonymous_source Method"},{"content":"When overridden in a derived class, returns true or false depending on whether the message block accepts messages offered by a source that is not linked to it.","pos":[5525,5684]},{"content":"If the overridden method returns <ph id=\"ph1\">`true`</ph>, the target cannot postpone an offered message, as consumption of a postponed message at a later time requires the source to be identified in its sourse link registry.","pos":[5685,5892],"source":" If the overridden method returns `true`, the target cannot postpone an offered message, as consumption of a postponed message at a later time requires the source to be identified in its sourse link registry."},{"content":"Return Value","pos":[5957,5969]},{"pos":[5980,6069],"content":"if the block can accept message from a source that is not linked to it <ph id=\"ph1\">`false`</ph> otherwise.","source":" if the block can accept message from a source that is not linked to it `false` otherwise."},{"pos":[6109,6138],"content":"ITarget::unlink_source Method"},{"pos":[6142,6237],"content":"When overridden in a derived class, unlinks a specified source block from this <ph id=\"ph1\">`ITarget`</ph> block.","source":"When overridden in a derived class, unlinks a specified source block from this `ITarget` block."},{"content":"Parameters","pos":[6322,6332]},{"content":"The <ph id=\"ph1\">`ISource`</ph> block being unlinked from this <ph id=\"ph2\">`ITarget`</ph> block.","pos":[6350,6411],"source":" The `ISource` block being unlinked from this `ITarget` block."},{"content":"Remarks","pos":[6421,6428]},{"content":"This function should not be called directly on an <ph id=\"ph1\">`ITarget`</ph> block.","pos":[6432,6498],"source":"This function should not be called directly on an `ITarget` block."},{"content":"Blocks should be disconnected using the <ph id=\"ph1\">`unlink_target`</ph> or <ph id=\"ph2\">`unlink_targets`</ph> methods on <ph id=\"ph3\">`ISource`</ph> blocks, which will invoke the <ph id=\"ph4\">`unlink_source`</ph> method on the corresponding target.","pos":[6499,6677],"source":" Blocks should be disconnected using the `unlink_target` or `unlink_targets` methods on `ISource` blocks, which will invoke the `unlink_source` method on the corresponding target."},{"pos":[6718,6748],"content":"ITarget::unlink_sources Method"},{"pos":[6752,6840],"content":"When overridden in a derived class, unlinks all source blocks from this <ph id=\"ph1\">`ITarget`</ph> block.","source":"When overridden in a derived class, unlinks all source blocks from this `ITarget` block."},{"content":"See Also","pos":[6897,6905]},{"content":"concurrency Namespace","pos":[6910,6931]},{"content":"ISource Class","pos":[6964,6977]}],"content":"---\ntitle: \"ITarget Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"agents/concurrency::ITarget\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ITarget class\"\nms.assetid: 5678db25-112a-4f72-be13-42e16b67c48b\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ITarget Class\nThe `ITarget` class is the interface for all target blocks. Target blocks consume messages offered to them by `ISource` blocks.  \n  \n## Syntax  \n  \n```\ntemplate<class T>\nclass ITarget;\n```  \n  \n#### Parameters  \n `T`  \n The data type of the payload within the messages accepted by the target block.  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`filter_method`|The signature of any method used by the block that returns a `bool` value to determine whether an offered message should be accepted.|  \n|`type`|A type alias for `T`.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[ITarget::~ITarget Destructor](#dtor)|Destroys the `ITarget` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[ITarget::propagate Method](#propagate)|When overridden in a derived class, asynchronously passes a message from a source block to this target block.|  \n|[ITarget::send Method](#send)|When overridden in a derived class, synchronously passes a message to the target block.|  \n|[ITarget::supports_anonymous_source Method](#supports_anonymous_source)|When overridden in a derived class, returns true or false depending on whether the message block accepts messages offered by a source that is not linked to it. If the overridden method returns `true`, the target cannot postpone an offered message, as consumption of a postponed message at a later time requires the source to be identified in its sourse link registry.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[ITarget::link_source Method](#link_source)|When overridden in a derived class, links a specified source block to this `ITarget` block.|  \n|[ITarget::unlink_source Method](#unlink_source)|When overridden in a derived class, unlinks a specified source block from this `ITarget` block.|  \n|[ITarget::unlink_sources Method](#unlink_sources)|When overridden in a derived class, unlinks all source blocks from this `ITarget` block.|  \n  \n## Remarks  \n For more information, see [Asynchronous Message Blocks](../../../parallel/concrt/asynchronous-message-blocks.md).  \n  \n## Inheritance Hierarchy  \n `ITarget`  \n  \n## Requirements  \n **Header:** agents.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"dtor\"></a>  ITarget::~ITarget Destructor  \n Destroys the `ITarget` object.  \n  \n```\nvirtual ~ITarget();\n```  \n  \n##  <a name=\"link_source\"></a>  ITarget::link_source Method  \n When overridden in a derived class, links a specified source block to this `ITarget` block.  \n  \n```\nvirtual void link_source(_Inout_ ISource<T>* _PSource) = 0;\n```  \n  \n### Parameters  \n `_PSource`  \n The `ISource` block being linked to this `ITarget` block.  \n  \n### Remarks  \n This function should not be called directly on an `ITarget` block. Blocks should be connected together using the `link_target` method on `ISource` blocks, which will invoke the `link_source` method on the corresponding target.  \n  \n##  <a name=\"propagate\"></a>  ITarget::propagate Method  \n When overridden in a derived class, asynchronously passes a message from a source block to this target block.  \n  \n```\nvirtual message_status propagate(\n    _Inout_opt_ message<T>* _PMessage,\n    _Inout_opt_ ISource<T>* _PSource) = 0;\n```  \n  \n### Parameters  \n `_PMessage`  \n A pointer to the `message` object.  \n  \n `_PSource`  \n A pointer to the source block offering the message.  \n  \n### Return Value  \n A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message.  \n  \n### Remarks  \n The method throws an [invalid_argument](../../../standard-library/invalid-argument-class.md) exception if either the `_PMessage` or `_PSource` parameter is `NULL`.  \n  \n##  <a name=\"send\"></a>  ITarget::send Method  \n When overridden in a derived class, synchronously passes a message to the target block.  \n  \n```\nvirtual message_status send(\n    _Inout_ message<T>* _PMessage,\n    _Inout_ ISource<T>* _PSource) = 0;\n```  \n  \n### Parameters  \n `_PMessage`  \n A pointer to the `message` object.  \n  \n `_PSource`  \n A pointer to the source block offering the message.  \n  \n### Return Value  \n A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message.  \n  \n### Remarks  \n The method throws an [invalid_argument](../../../standard-library/invalid-argument-class.md) exception if either the `_PMessage` or `_PSource` parameter is `NULL`.  \n  \n Using the `send` method outside of message initiation and to propagate messages within a network is dangerous and can lead to deadlock.  \n  \n When `send` returns, the message has either already been accepted, and transferred into the target block, or it has been declined by the target.  \n  \n##  <a name=\"supports_anonymous_source\"></a>  ITarget::supports_anonymous_source Method  \n When overridden in a derived class, returns true or false depending on whether the message block accepts messages offered by a source that is not linked to it. If the overridden method returns `true`, the target cannot postpone an offered message, as consumption of a postponed message at a later time requires the source to be identified in its sourse link registry.  \n  \n```\nvirtual bool supports_anonymous_source();\n```  \n  \n### Return Value  \n `true` if the block can accept message from a source that is not linked to it `false` otherwise.  \n  \n##  <a name=\"unlink_source\"></a>  ITarget::unlink_source Method  \n When overridden in a derived class, unlinks a specified source block from this `ITarget` block.  \n  \n```\nvirtual void unlink_source(_Inout_ ISource<T>* _PSource) = 0;\n```  \n  \n### Parameters  \n `_PSource`  \n The `ISource` block being unlinked from this `ITarget` block.  \n  \n### Remarks  \n This function should not be called directly on an `ITarget` block. Blocks should be disconnected using the `unlink_target` or `unlink_targets` methods on `ISource` blocks, which will invoke the `unlink_source` method on the corresponding target.  \n  \n##  <a name=\"unlink_sources\"></a>  ITarget::unlink_sources Method  \n When overridden in a derived class, unlinks all source blocks from this `ITarget` block.  \n  \n```\nvirtual void unlink_sources() = 0;\n```  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)   \n [ISource Class](isource-class.md)\n"}