{"nodes":[{"pos":[12,46],"content":"is_compound Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"is_compound Class | Microsoft Docs","pos":[0,34]}]},{"pos":[763,780],"content":"is_compound Class","linkify":"is_compound Class","nodes":[{"content":"is_compound Class","pos":[0,17]}]},{"content":"Tests if the specified type is not fundamental.","pos":[781,828]},{"pos":[837,843],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[913,923],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type to query.","pos":[935,953]},{"pos":[962,969],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An instance of the type predicate holds <ph id=\"ph1\">`false`</ph> if the type of <ph id=\"ph2\">`Ty`</ph> is a fundamental type (that is, if <bpt id=\"p1\">[</bpt>is_fundamental<ept id=\"p1\">](../standard-library/is-fundamental-class.md)</ept><ph id=\"ph3\">`&lt;``Ty``&gt;`</ph> holds <ph id=\"ph4\">`true`</ph>); otherwise, it holds <ph id=\"ph5\">`true`</ph>.","pos":[973,1190],"source":"An instance of the type predicate holds `false` if the type of `Ty` is a fundamental type (that is, if [is_fundamental](../standard-library/is-fundamental-class.md)`<``Ty``>` holds `true`); otherwise, it holds `true`."},{"content":"Thus, the predicate holds <ph id=\"ph1\">`true`</ph> if <ph id=\"ph2\">`Ty`</ph> is an array type, a function type, a pointer to <ph id=\"ph3\">`void`</ph> or an object or a function, a reference, a class, a union, an enumeration, or a pointer to non-static class member, or a <bpt id=\"p1\">*</bpt>cv-qualified<ept id=\"p1\">*</ept> form of one of them.","pos":[1191,1443],"source":" Thus, the predicate holds `true` if `Ty` is an array type, a function type, a pointer to `void` or an object or a function, a reference, a class, a union, an enumeration, or a pointer to non-static class member, or a *cv-qualified* form of one of them."},{"pos":[1452,1459],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2648,2660],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2664,2689],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> &lt;type_traits&gt;","source":"**Header:** <type_traits>"},{"pos":[2696,2714],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[2723,2731],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>&lt;type_traits&gt;<ept id=\"p1\">](../standard-library/type-traits.md)</ept><ph id=\"ph1\"> </ph>","pos":[2735,2787],"source":"[<type_traits>](../standard-library/type-traits.md) "},{"content":"<bpt id=\"p1\"> [</bpt>is_class Class<ept id=\"p1\">](../standard-library/is-class-class.md)</ept>","pos":[2790,2846],"source":" [is_class Class](../standard-library/is-class-class.md)"}],"content":"---\ntitle: \"is_compound Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std::tr1::is_compound\"\n  - \"is_compound\"\n  - \"std.tr1.is_compound\"\n  - \"std.is_compound\"\n  - \"std::is_compound\"\n  - \"type_traits/std::is_compound\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"is_compound class [TR1]\"\n  - \"is_compound\"\nms.assetid: bdad1167-cf3f-4f37-8321-62a5df159ead\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# is_compound Class\nTests if the specified type is not fundamental.  \n  \n## Syntax  \n  \n```  \ntemplate <class Ty>  \nstruct is_compound;  \n```  \n  \n#### Parameters  \n `Ty`  \n The type to query.  \n  \n## Remarks  \n An instance of the type predicate holds `false` if the type of `Ty` is a fundamental type (that is, if [is_fundamental](../standard-library/is-fundamental-class.md)`<``Ty``>` holds `true`); otherwise, it holds `true`. Thus, the predicate holds `true` if `Ty` is an array type, a function type, a pointer to `void` or an object or a function, a reference, a class, a union, an enumeration, or a pointer to non-static class member, or a *cv-qualified* form of one of them.  \n  \n## Example  \n  \n```cpp  \n// std_tr1__type_traits__is_compound.cpp   \n// compile with: /EHsc   \n#include <type_traits>   \n#include <iostream>   \n  \nstruct trivial   \n    {   \n    int val;   \n    };   \n  \nint main()   \n    {   \n    std::cout << \"is_compound<trivial> == \" << std::boolalpha   \n        << std::is_compound<trivial>::value << std::endl;   \n    std::cout << \"is_compound<int[]> == \" << std::boolalpha   \n        << std::is_compound<int[]>::value << std::endl;   \n    std::cout << \"is_compound<int()> == \" << std::boolalpha   \n        << std::is_compound<int()>::value << std::endl;   \n    std::cout << \"is_compound<int&> == \" << std::boolalpha   \n        << std::is_compound<int&>::value << std::endl;   \n    std::cout << \"is_compound<void *> == \" << std::boolalpha   \n        << std::is_compound<void *>::value << std::endl;   \n    std::cout << \"is_compound<int> == \" << std::boolalpha   \n        << std::is_compound<int>::value << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \nis_compound<trivial> == true  \nis_compound<int[]> == true  \nis_compound<int()> == true  \nis_compound<int&> == true  \nis_compound<void *> == true  \nis_compound<int> == false  \n```  \n  \n## Requirements  \n **Header:** <type_traits>  \n  \n **Namespace:** std  \n  \n## See Also  \n [<type_traits>](../standard-library/type-traits.md)   \n [is_class Class](../standard-library/is-class-class.md)\n"}