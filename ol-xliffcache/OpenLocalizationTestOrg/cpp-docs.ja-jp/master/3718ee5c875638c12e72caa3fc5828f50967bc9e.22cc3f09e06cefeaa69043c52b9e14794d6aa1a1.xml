{"nodes":[{"pos":[12,34],"content":"__w64 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"__w64 | Microsoft Docs","pos":[0,22]}]},{"content":"__w64","pos":[692,697]},{"content":"(Microsoft Specific) This keyword is obsolete.","pos":[698,744]},{"content":"In versions of Visual Studio earlier than Visual Studio 2013, this lets you mark variables, so that when you compile with <bpt id=\"p1\">[</bpt>/Wp64<ept id=\"p1\">](../build/reference/wp64-detect-64-bit-portability-issues.md)</ept> the compiler will report any warnings that would be reported if you were compiling with a 64-bit compiler.","pos":[745,1042],"source":" In versions of Visual Studio earlier than Visual Studio 2013, this lets you mark variables, so that when you compile with [/Wp64](../build/reference/wp64-detect-64-bit-portability-issues.md) the compiler will report any warnings that would be reported if you were compiling with a 64-bit compiler."},{"content":"Syntax","pos":[1051,1057]},{"content":"Parameters","pos":[1110,1120]},{"content":"One of the three types that could cause problems in code being ported from a 32-bit to a 64-bit compiler: <ph id=\"ph1\">`int`</ph>, <ph id=\"ph2\">`long`</ph>, or a pointer.","pos":[1134,1268],"source":" One of the three types that could cause problems in code being ported from a 32-bit to a 64-bit compiler: `int`, `long`, or a pointer."},{"content":"The identifier for the variable you are creating.","pos":[1291,1340]},{"content":"Remarks","pos":[1349,1356]},{"pos":[1364,2066],"content":"[!IMPORTANT]\n The [/Wp64](../build/reference/wp64-detect-64-bit-portability-issues.md) compiler option and `__w64` keyword are deprecated in Visual Studio 2010 and Visual Studio 2013 and removed starting in Visual Studio 2013. If you use the `/Wp64` compiler option on the command line, the compiler issues [Command-Line Warning D9002](http://msdn.microsoft.com/en-us/c58b405b-0f26-434e-b57f-4f05e1ca81e6). The `__w64` keyword is silently ignored. Instead of using this option and keyword to detect 64-bit portability issues, use a Visual C++ compiler that targets a 64-bit platform. For more information, see [Configuring Programs for 64-Bit](../build/configuring-programs-for-64-bit-visual-cpp.md).","leadings":["","> "],"nodes":[{"content":" The [/Wp64](../build/reference/wp64-detect-64-bit-portability-issues.md) compiler option and `__w64` keyword are deprecated in Visual Studio 2010 and Visual Studio 2013 and removed starting in Visual Studio 2013. If you use the `/Wp64` compiler option on the command line, the compiler issues [Command-Line Warning D9002](http://msdn.microsoft.com/en-us/c58b405b-0f26-434e-b57f-4f05e1ca81e6). The `__w64` keyword is silently ignored. Instead of using this option and keyword to detect 64-bit portability issues, use a Visual C++ compiler that targets a 64-bit platform. For more information, see [Configuring Programs for 64-Bit](../build/configuring-programs-for-64-bit-visual-cpp.md).","pos":[13,700],"nodes":[{"content":"The <bpt id=\"p1\">[</bpt>/Wp64<ept id=\"p1\">](../build/reference/wp64-detect-64-bit-portability-issues.md)</ept> compiler option and <ph id=\"ph1\">`__w64`</ph> keyword are deprecated in Visual Studio 2010 and Visual Studio 2013 and removed starting in Visual Studio 2013.","pos":[1,213],"source":" The [/Wp64](../build/reference/wp64-detect-64-bit-portability-issues.md) compiler option and `__w64` keyword are deprecated in Visual Studio 2010 and Visual Studio 2013 and removed starting in Visual Studio 2013."},{"content":"If you use the <ph id=\"ph1\">`/Wp64`</ph> compiler option on the command line, the compiler issues <bpt id=\"p1\">[</bpt>Command-Line Warning D9002<ept id=\"p1\">](http://msdn.microsoft.com/en-us/c58b405b-0f26-434e-b57f-4f05e1ca81e6)</ept>.","pos":[214,393],"source":" If you use the `/Wp64` compiler option on the command line, the compiler issues [Command-Line Warning D9002](http://msdn.microsoft.com/en-us/c58b405b-0f26-434e-b57f-4f05e1ca81e6)."},{"content":"The <ph id=\"ph1\">`__w64`</ph> keyword is silently ignored.","pos":[394,434],"source":" The `__w64` keyword is silently ignored."},{"content":"Instead of using this option and keyword to detect 64-bit portability issues, use a Visual C++ compiler that targets a 64-bit platform.","pos":[435,570]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Configuring Programs for 64-Bit<ept id=\"p1\">](../build/configuring-programs-for-64-bit-visual-cpp.md)</ept>.","pos":[571,687],"source":" For more information, see [Configuring Programs for 64-Bit](../build/configuring-programs-for-64-bit-visual-cpp.md)."}]}]},{"pos":[2073,2150],"content":"Any typedef that has <ph id=\"ph1\">`__w64`</ph> on it must be 32 bits on x86 and 64 bits on x64.","source":"Any typedef that has `__w64` on it must be 32 bits on x86 and 64 bits on x64."},{"content":"To detect portability issues by using versions of the Visual C++ compiler earlier than Visual Studio 2010, the <ph id=\"ph1\">`__w64`</ph> keyword should be specified on any typedefs that change size between 32 bit and 64 bit platforms.","pos":[2157,2373],"source":"To detect portability issues by using versions of the Visual C++ compiler earlier than Visual Studio 2010, the `__w64` keyword should be specified on any typedefs that change size between 32 bit and 64 bit platforms."},{"content":"For any such type, <ph id=\"ph1\">`__w64`</ph> must appear only on the 32-bit definition of the typedef.","pos":[2374,2458],"source":" For any such type, `__w64` must appear only on the 32-bit definition of the typedef."},{"pos":[2465,2536],"content":"The <ph id=\"ph1\">`__w64`</ph> keyword is ignored if the compilation does not use <ph id=\"ph2\">`/Wp64`</ph>.","source":"The `__w64` keyword is ignored if the compilation does not use `/Wp64`."},{"content":"For more information about porting to 64-bit, see the following topics:","pos":[2543,2614]},{"content":"Compiler Options","pos":[2625,2641]},{"content":"Porting 32-Bit Code to 64-Bit Code","pos":[2693,2727]},{"content":"Configuring Programs for 64-Bit","pos":[2794,2825]},{"content":"Example","pos":[2891,2898]},{"content":"See Also","pos":[3267,3275]},{"content":"Keywords","pos":[3280,3288]}],"content":"---\ntitle: \"__w64 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"__w64_cpp\"\n  - \"__w64\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"__w64 keyword [C++]\"\n  - \"64-bit compiler [C++], __w64 keyword\"\n  - \"Win64 [C++], __w64 keyword\"\nms.assetid: b9d0c820-e132-40bc-b532-56edca132a6c\ncaps.latest.revision: 13\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# __w64\n(Microsoft Specific) This keyword is obsolete. In versions of Visual Studio earlier than Visual Studio 2013, this lets you mark variables, so that when you compile with [/Wp64](../build/reference/wp64-detect-64-bit-portability-issues.md) the compiler will report any warnings that would be reported if you were compiling with a 64-bit compiler.  \n  \n## Syntax  \n  \n```  \n  \ntype __w64 identifier  \n```  \n  \n#### Parameters  \n `type`  \n One of the three types that could cause problems in code being ported from a 32-bit to a 64-bit compiler: `int`, `long`, or a pointer.  \n  \n `identifier`  \n The identifier for the variable you are creating.  \n  \n## Remarks  \n  \n> [!IMPORTANT]\n>  The [/Wp64](../build/reference/wp64-detect-64-bit-portability-issues.md) compiler option and `__w64` keyword are deprecated in Visual Studio 2010 and Visual Studio 2013 and removed starting in Visual Studio 2013. If you use the `/Wp64` compiler option on the command line, the compiler issues [Command-Line Warning D9002](http://msdn.microsoft.com/en-us/c58b405b-0f26-434e-b57f-4f05e1ca81e6). The `__w64` keyword is silently ignored. Instead of using this option and keyword to detect 64-bit portability issues, use a Visual C++ compiler that targets a 64-bit platform. For more information, see [Configuring Programs for 64-Bit](../build/configuring-programs-for-64-bit-visual-cpp.md).  \n  \n Any typedef that has `__w64` on it must be 32 bits on x86 and 64 bits on x64.  \n  \n To detect portability issues by using versions of the Visual C++ compiler earlier than Visual Studio 2010, the `__w64` keyword should be specified on any typedefs that change size between 32 bit and 64 bit platforms. For any such type, `__w64` must appear only on the 32-bit definition of the typedef.  \n  \n The `__w64` keyword is ignored if the compilation does not use `/Wp64`.  \n  \n For more information about porting to 64-bit, see the following topics:  \n  \n-   [Compiler Options](../build/reference/compiler-options.md)  \n  \n-   [Porting 32-Bit Code to 64-Bit Code](../build/common-visual-cpp-64-bit-migration-issues.md)  \n  \n-   [Configuring Programs for 64-Bit](../build/configuring-programs-for-64-bit-visual-cpp.md)  \n  \n## Example  \n  \n```  \n// __w64.cpp  \n// compile with: /W3 /Wp64  \ntypedef int Int_32;  \n#ifdef _WIN64  \ntypedef __int64 Int_Native;  \n#else  \ntypedef int __w64 Int_Native;  \n#endif  \n  \nint main() {  \n   Int_32 i0 = 5;  \n   Int_Native i1 = 10;  \n   i0 = i1;   // C4244 64-bit int assigned to 32-bit int  \n  \n   // char __w64 c;  error, cannot use __w64 on char  \n}  \n```  \n  \n## See Also  \n [Keywords](../cpp/keywords-cpp.md)"}