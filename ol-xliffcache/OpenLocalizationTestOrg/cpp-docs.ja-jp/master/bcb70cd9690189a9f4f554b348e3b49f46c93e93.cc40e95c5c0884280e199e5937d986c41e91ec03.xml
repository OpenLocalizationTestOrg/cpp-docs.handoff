{"nodes":[{"pos":[12,62],"content":"Date and Time: Automation Support | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Date and Time: Automation Support | Microsoft Docs","pos":[0,50]}]},{"content":"Date and Time: Automation Support","pos":[1012,1045]},{"content":"This article describes how to take advantage of the class library services related to date and time management.","pos":[1046,1157]},{"content":"Procedures described include:","pos":[1158,1187]},{"content":"Getting the current time","pos":[1198,1222]},{"content":"Calculating elapsed time","pos":[1288,1312]},{"content":"Formatting a string representation of a date/time","pos":[1378,1427]},{"content":"The <bpt id=\"p1\">[</bpt>COleDateTime<ept id=\"p1\">](../atl-mfc-shared/reference/coledatetime-class.md)</ept> class provides a way to represent date and time information.","pos":[1492,1622],"source":"The [COleDateTime](../atl-mfc-shared/reference/coledatetime-class.md) class provides a way to represent date and time information."},{"content":"It provides finer granularity and a greater range than the <bpt id=\"p1\">[</bpt>CTime<ept id=\"p1\">](../atl-mfc-shared/reference/ctime-class.md)</ept> class.","pos":[1623,1740],"source":" It provides finer granularity and a greater range than the [CTime](../atl-mfc-shared/reference/ctime-class.md) class."},{"content":"The <bpt id=\"p1\">[</bpt>COleDateTimeSpan<ept id=\"p1\">](../atl-mfc-shared/reference/coledatetimespan-class.md)</ept> class represents elapsed time, such as the difference between two <ph id=\"ph1\">`COleDateTime`</ph> objects.","pos":[1741,1908],"source":" The [COleDateTimeSpan](../atl-mfc-shared/reference/coledatetimespan-class.md) class represents elapsed time, such as the difference between two `COleDateTime` objects."},{"content":"The <ph id=\"ph1\">`COleDateTime`</ph> and <ph id=\"ph2\">`COleDateTimeSpan`</ph> classes are designed to be used with the <ph id=\"ph3\">`COleVariant`</ph> class used in Automation.","pos":[1915,2037],"source":"The `COleDateTime` and `COleDateTimeSpan` classes are designed to be used with the `COleVariant` class used in Automation."},{"content":"and <ph id=\"ph1\">`COleDateTimeSpan`</ph> are also useful in MFC database programming, but they can be used whenever you want to manipulate date and time values.","pos":[2053,2195],"source":" and `COleDateTimeSpan` are also useful in MFC database programming, but they can be used whenever you want to manipulate date and time values."},{"content":"Although the <ph id=\"ph1\">`COleDateTime`</ph> class has a greater range of values and finer granularity than the <ph id=\"ph2\">`CTime`</ph> class, it requires more storage per object than <ph id=\"ph3\">`CTime`</ph>.","pos":[2196,2355],"source":" Although the `COleDateTime` class has a greater range of values and finer granularity than the `CTime` class, it requires more storage per object than `CTime`."},{"content":"There are also some special considerations when working with the underlying <bpt id=\"p1\">**</bpt>DATE<ept id=\"p1\">**</ept> type.","pos":[2356,2446],"source":" There are also some special considerations when working with the underlying **DATE** type."},{"content":"See <bpt id=\"p1\">[</bpt>The DATE Type<ept id=\"p1\">](../atl-mfc-shared/date-type.md)</ept> for more details on the implementation of <bpt id=\"p2\">**</bpt>DATE<ept id=\"p2\">**</ept>.","pos":[2447,2550],"source":" See [The DATE Type](../atl-mfc-shared/date-type.md) for more details on the implementation of **DATE**."},{"content":"objects can be used to represent dates between January 1, 100, and December 31, 9999.","pos":[2572,2657]},{"content":"objects are floating point values, with an approximate resolution of 1 millisecond.","pos":[2673,2756]},{"content":"is based on the <bpt id=\"p1\">**</bpt>DATE<ept id=\"p1\">**</ept> data type, defined in the MFC documentation under <bpt id=\"p2\">[</bpt>COleDateTime::operator DATE<ept id=\"p2\">](../atl-mfc-shared/reference/coledatetime-class.md#coledatetime__operator_date)</ept>.","pos":[2772,2956],"source":" is based on the **DATE** data type, defined in the MFC documentation under [COleDateTime::operator DATE](../atl-mfc-shared/reference/coledatetime-class.md#coledatetime__operator_date)."},{"content":"The actual implementation of <bpt id=\"p1\">**</bpt>DATE<ept id=\"p1\">**</ept> extends beyond these bounds.","pos":[2957,3023],"source":" The actual implementation of **DATE** extends beyond these bounds."},{"content":"The <ph id=\"ph1\">`COleDateTime`</ph> implementation imposes these bounds to facilitate working with the class.","pos":[3024,3116],"source":" The `COleDateTime` implementation imposes these bounds to facilitate working with the class."},{"content":"does not support Julian dates.","pos":[3138,3168]},{"content":"The Gregorian calendar is assumed to extend back in time to January 1, 100.","pos":[3169,3244]},{"content":"ignores Daylight Saving Time (DST).","pos":[3266,3301]},{"content":"The following code example compares two methods of calculating a time span that crosses the DST switchover date: one using the CRT, and the other using <ph id=\"ph1\">`COleDateTime`</ph>.","pos":[3302,3469],"source":" The following code example compares two methods of calculating a time span that crosses the DST switchover date: one using the CRT, and the other using `COleDateTime`."},{"content":"DST switches over, in most locales, in the second week in April and the third in October.","pos":[3470,3559]},{"content":"The first method sets two <ph id=\"ph1\">`CTime`</ph> objects, <bpt id=\"p1\">*</bpt>time1<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>time2<ept id=\"p2\">*</ept>, to April 5 and April 6 respectively, using the standard C type structures <bpt id=\"p3\">**</bpt>tm<ept id=\"p3\">**</ept> and <ph id=\"ph2\">`time_t`</ph>.","pos":[3566,3724],"source":"The first method sets two `CTime` objects, *time1* and *time2*, to April 5 and April 6 respectively, using the standard C type structures **tm** and `time_t`."},{"content":"The code displays <bpt id=\"p1\">*</bpt>time1<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>time2<ept id=\"p2\">*</ept> and the time span between them.","pos":[3725,3794],"source":" The code displays *time1* and *time2* and the time span between them."},{"content":"The second method creates two <ph id=\"ph1\">`COleDateTime`</ph> objects, <ph id=\"ph2\">`oletime1`</ph> and <ph id=\"ph3\">`oletime2`</ph>, and sets them to the same dates as <bpt id=\"p1\">*</bpt>time1<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>time2<ept id=\"p2\">*</ept>.","pos":[3801,3937],"source":"The second method creates two `COleDateTime` objects, `oletime1` and `oletime2`, and sets them to the same dates as *time1* and *time2*."},{"content":"It displays <ph id=\"ph1\">`oletime1`</ph> and <ph id=\"ph2\">`oletime2`</ph> and the time span between them.","pos":[3938,4007],"source":" It displays `oletime1` and `oletime2` and the time span between them."},{"content":"The CRT correctly calculates a difference of 23 hours.","pos":[4014,4068]},{"content":"calculates a difference of 24 hours.","pos":[4088,4124]},{"content":"Note that a workaround is used near the end of the example to display the date properly using <ph id=\"ph1\">`COleDateTime::Format`</ph>.","pos":[4131,4248],"source":"Note that a workaround is used near the end of the example to display the date properly using `COleDateTime::Format`."},{"content":"See the Knowledge Base article \"BUG: Format(\"%D\") Fails for <ph id=\"ph1\">`COleDateTime`</ph> and <ph id=\"ph2\">`COleDateTimeSpan`</ph>\" (Q167338).","pos":[4249,4358],"source":" See the Knowledge Base article \"BUG: Format(\"%D\") Fails for `COleDateTime` and `COleDateTimeSpan`\" (Q167338)."},{"pos":[4376,4400],"content":"NVC_ATLMFC_Utilities#176"},{"content":"See Also","pos":[4485,4493]},{"content":"Date and Time","pos":[4498,4511]}],"content":"---\ntitle: \"Date and Time: Automation Support | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"adding dates\"\n  - \"calculating dates and times\"\n  - \"formatting [Visual Studio], dates\"\n  - \"dates, Automation support\"\n  - \"elapsed time, calculating in Automation\"\n  - \"COleDateTime class, Automation date/time support\"\n  - \"COleDateTimeSpan class, Automation date/time support\"\n  - \"Automation, date and time support\"\n  - \"formatting [Visual Studio], time\"\n  - \"calculations, date and time\"\n  - \"time [Visual Studio], Automation support\"\nms.assetid: 6eee94c4-943d-4ffc-bf7c-bdda89337ab0\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Date and Time: Automation Support\nThis article describes how to take advantage of the class library services related to date and time management. Procedures described include:  \n  \n-   [Getting the current time](../atl-mfc-shared/current-time-automation-classes.md)  \n  \n-   [Calculating elapsed time](../atl-mfc-shared/elapsed-time-automation-classes.md)  \n  \n-   [Formatting a string representation of a date/time](../atl-mfc-shared/formatting-time-automation-classes.md)  \n  \n The [COleDateTime](../atl-mfc-shared/reference/coledatetime-class.md) class provides a way to represent date and time information. It provides finer granularity and a greater range than the [CTime](../atl-mfc-shared/reference/ctime-class.md) class. The [COleDateTimeSpan](../atl-mfc-shared/reference/coledatetimespan-class.md) class represents elapsed time, such as the difference between two `COleDateTime` objects.  \n  \n The `COleDateTime` and `COleDateTimeSpan` classes are designed to be used with the `COleVariant` class used in Automation. `COleDateTime` and `COleDateTimeSpan` are also useful in MFC database programming, but they can be used whenever you want to manipulate date and time values. Although the `COleDateTime` class has a greater range of values and finer granularity than the `CTime` class, it requires more storage per object than `CTime`. There are also some special considerations when working with the underlying **DATE** type. See [The DATE Type](../atl-mfc-shared/date-type.md) for more details on the implementation of **DATE**.  \n  \n `COleDateTime` objects can be used to represent dates between January 1, 100, and December 31, 9999. `COleDateTime` objects are floating point values, with an approximate resolution of 1 millisecond. `COleDateTime` is based on the **DATE** data type, defined in the MFC documentation under [COleDateTime::operator DATE](../atl-mfc-shared/reference/coledatetime-class.md#coledatetime__operator_date). The actual implementation of **DATE** extends beyond these bounds. The `COleDateTime` implementation imposes these bounds to facilitate working with the class.  \n  \n `COleDateTime` does not support Julian dates. The Gregorian calendar is assumed to extend back in time to January 1, 100.  \n  \n `COleDateTime` ignores Daylight Saving Time (DST). The following code example compares two methods of calculating a time span that crosses the DST switchover date: one using the CRT, and the other using `COleDateTime`. DST switches over, in most locales, in the second week in April and the third in October.  \n  \n The first method sets two `CTime` objects, *time1* and *time2*, to April 5 and April 6 respectively, using the standard C type structures **tm** and `time_t`. The code displays *time1* and *time2* and the time span between them.  \n  \n The second method creates two `COleDateTime` objects, `oletime1` and `oletime2`, and sets them to the same dates as *time1* and *time2*. It displays `oletime1` and `oletime2` and the time span between them.  \n  \n The CRT correctly calculates a difference of 23 hours. `COleDateTimeSpan` calculates a difference of 24 hours.  \n  \n Note that a workaround is used near the end of the example to display the date properly using `COleDateTime::Format`. See the Knowledge Base article \"BUG: Format(\"%D\") Fails for `COleDateTime` and `COleDateTimeSpan`\" (Q167338).  \n  \n [!code-cpp[NVC_ATLMFC_Utilities#176](../atl-mfc-shared/codesnippet/cpp/date-and-time-automation-support_1.cpp)]  \n  \n## See Also  \n [Date and Time](../atl-mfc-shared/date-and-time.md)\n\n"}