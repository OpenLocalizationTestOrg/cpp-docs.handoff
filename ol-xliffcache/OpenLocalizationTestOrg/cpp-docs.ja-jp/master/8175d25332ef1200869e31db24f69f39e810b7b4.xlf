<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8175d25332ef1200869e31db24f69f39e810b7b4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\user-defined-literals-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c255a7d3317844f9a79eda2e7d13e05a8a1c7c58</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e7d0adb8667f23911cb791a1019d219a52ce98a9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>User-Defined Literals  (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>User-Defined Literals  (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>There are five major categories of literals:  integer,  character,  floating-point,  string, boolean and pointer.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Starting in C++ 11 you can define your own literals based on these categories to provide syntactic shortcuts for common idioms and increase type safety.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, let's say you have a Distance class.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You could define a literal for kilometers and another one for miles, and encourage the user to be explicit about the units of measure by simply writing: auto d = 42.0_km or auto d = 42.0_mi.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>There is no performance advantage or disadvantage to user-defined literals; they are primarily for convenience or for compile-time type deduction.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The Standard Library has user-defined literals for std:string, for std::complex, and for units in time and duration operations in the <ph id="ph1">\&lt;</ph>chrono&gt; header:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>User-defined literal operator signatures</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You implement a user-defined literal by defining an <ph id="ph1">`operator""`</ph> at namespace scope with one of the following forms:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The operator names in the previous example are placeholders for whatever name you provide; however, the leading underscore is required.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>(Only the Standard Library is allowed to define literals without the underscore.) The return type is where you customize the conversion or other operation that the literal performs.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Also, any of these operators can be defined as <ph id="ph1">`constexpr`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Cooked literals</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In source code any literal whether user-defined or not is essentially a sequence of alphanumeric characters, such as <ph id="ph1">`101`</ph>, or <ph id="ph2">`54.7`</ph>, or <ph id="ph3">`"hello"`</ph> or <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The compiler interprets the sequence as an integer, float, const char<ph id="ph1">\*</ph> string, and so on.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A user-defined literal that accepts as input whatever type the compiler assigned to the literal value is informally known as a <bpt id="p1">*</bpt>cooked literal<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>All the operators above except <ph id="ph1">`_r`</ph> and <ph id="ph2">`_t`</ph> are cooked literals.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, a literal <ph id="ph1">`42.0_km`</ph> would bind to an operator named _km that had a signature similar to _b and the literal <ph id="ph2">`42_km`</ph> would bind to an operator with a signature similar to _a.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example shows how user-defined literals can encourage callers to be explicit about their input.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To construct a <ph id="ph1">`Distance`</ph>, the user must explicitly specify kilometers or miles by using the appropriate user-defined literal.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Of course you can also achieve the same result in other ways, but user-defined literals are less verbose than the alternatives.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Note that the literal number must use a decimal, otherwise the number would be interpreted as an integer and the type would not be compatible with the operator.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Also note that for floating point input, the type must be <ph id="ph1">`long double`</ph>, and for integral types it must be <ph id="ph2">`long long`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Raw literals</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In a raw user-defined literal, the operator that you define accepts the literal as a sequence of char values and it is up to you to interpret that sequence as a number or string or other type.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In the list of operators shown earlier in this page, <ph id="ph1">`_r`</ph> and <ph id="ph2">`_t`</ph> can be used to define raw literals:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can use raw literals to provide a custom interpretation of an input sequence that is different than what the compiler would perform.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, you could define a literal that converts the sequence <ph id="ph1">`4.75987`</ph> into a custom Decimal type instead of an IEEE 754 floating point type.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Raw literals, like cooked literals, can also be used to perform compile-time validation of input sequences.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Limitations of raw literals</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The raw literal operator and literal operator template only work for integral and floating-point user-defined literals, as shown by the following example:</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>