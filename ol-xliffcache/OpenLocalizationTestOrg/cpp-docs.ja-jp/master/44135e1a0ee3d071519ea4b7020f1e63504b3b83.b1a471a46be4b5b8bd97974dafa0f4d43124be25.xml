{"nodes":[{"pos":[12,44],"content":"money_put Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"money_put Class | Microsoft Docs","pos":[0,32]}]},{"pos":[669,684],"content":"money_put Class","linkify":"money_put Class","nodes":[{"content":"money_put Class","pos":[0,15]}]},{"pos":[685,831],"content":"The template class describes an object that can serve as a locale facet to control conversions of monetary values to sequences of type <ph id=\"ph1\">`CharType`</ph>.","source":"The template class describes an object that can serve as a locale facet to control conversions of monetary values to sequences of type `CharType`."},{"pos":[840,846],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1002,1012],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type used within a program to encode characters in a locale.","pos":[1030,1094]},{"content":"The type of iterator to which the monetary put functions write their output.","pos":[1121,1197]},{"pos":[1206,1213],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"As with any locale facet, the static object ID has an initial stored value of zero.","pos":[1217,1300]},{"content":"The first attempt to access its stored value stores a unique positive value in <bpt id=\"p1\">**</bpt>id.<ept id=\"p1\">**</ept>","pos":[1301,1387],"source":" The first attempt to access its stored value stores a unique positive value in **id.**"},{"pos":[1397,1409],"content":"Constructors","linkify":"Constructors","nodes":[{"content":"Constructors","pos":[0,12]}]},{"pos":[1430,1464],"content":"<bpt id=\"p1\">[</bpt>money_put<ept id=\"p1\">](#money_put__money_put)</ept>","source":"[money_put](#money_put__money_put)"},{"pos":[1465,1513],"content":"The constructor for objects of type <ph id=\"ph1\">`money_put`</ph>.","source":"The constructor for objects of type `money_put`."},{"pos":[1524,1532],"content":"Typedefs","linkify":"Typedefs","nodes":[{"content":"Typedefs","pos":[0,8]}]},{"pos":[1553,1587],"content":"<bpt id=\"p1\">[</bpt>char_type<ept id=\"p1\">](#money_put__char_type)</ept>","source":"[char_type](#money_put__char_type)"},{"content":"A type that is used to describe a character used by a locale.","pos":[1588,1649]},{"pos":[1654,1688],"content":"<bpt id=\"p1\">[</bpt>iter_type<ept id=\"p1\">](#money_put__iter_type)</ept>","source":"[iter_type](#money_put__iter_type)"},{"content":"A type that describes an output iterator.","pos":[1689,1730]},{"pos":[1735,1773],"content":"<bpt id=\"p1\">[</bpt>string_type<ept id=\"p1\">](#money_put__string_type)</ept>","source":"[string_type](#money_put__string_type)"},{"pos":[1774,1846],"content":"A type that describes a string containing characters of type <ph id=\"ph1\">`CharType`</ph>.","source":"A type that describes a string containing characters of type `CharType`."},{"pos":[1857,1873],"content":"Member Functions","linkify":"Member Functions","nodes":[{"content":"Member Functions","pos":[0,16]}]},{"pos":[1894,1922],"content":"<bpt id=\"p1\">[</bpt>do_put<ept id=\"p1\">](#money_put__do_put)</ept>","source":"[do_put](#money_put__do_put)"},{"content":"A virtual function called to convert either number or a string to a character sequence that represents a monetary value.","pos":[1923,2043]},{"pos":[2048,2070],"content":"<bpt id=\"p1\">[</bpt>put<ept id=\"p1\">](#money_put__put)</ept>","source":"[put](#money_put__put)"},{"content":"Converts either number or a string to a character sequence that represents a monetary value.","pos":[2071,2163]},{"pos":[2173,2185],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2189,2210],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>locale&gt;","source":"**Header:** \\<locale>"},{"pos":[2217,2235],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[2245,2302],"content":"<bpt id=\"p1\">&lt;a name=\"money_put__char_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  money_put::char_type","linkify":"<a name=\"money_put__char_type\"></a>  money_put::char_type","source":"<a name=\"money_put__char_type\"></a>  money_put::char_type"},{"content":"A type that is used to describe a character used by a locale.","pos":[2306,2367]},{"pos":[2422,2429],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2433,2495],"content":"The type is a synonym for the template parameter <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>.","source":"The type is a synonym for the template parameter **CharType**."},{"pos":[2505,2556],"content":"<bpt id=\"p1\">&lt;a name=\"money_put__do_put\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  money_put::do_put","linkify":"<a name=\"money_put__do_put\"></a>  money_put::do_put","source":"<a name=\"money_put__do_put\"></a>  money_put::do_put"},{"content":"A virtual function called to convert either number or a string to a character sequence that represents a monetary value.","pos":[2560,2680]},{"pos":[3004,3014],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An iterator addressing the first element of the inserted string.","pos":[3029,3093]},{"content":"A Boolean value indicating the type of currency symbol expected in the sequence: <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if international, <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if domestic.","pos":[3111,3241],"source":" A Boolean value indicating the type of currency symbol expected in the sequence: **true** if international, **false** if domestic."},{"content":"A format flag which when set indicates that the currency symbol is optional; otherwise, it is required","pos":[3262,3364]},{"content":"A character which is used for spacing.","pos":[3382,3420]},{"content":"A string object to be converted.","pos":[3437,3469]},{"pos":[3479,3491],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An output iterator the addresses the position one beyond the last element produced.","pos":[3495,3578]},{"pos":[3588,3595],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The first virtual protected member function generates sequential elements beginning at <ph id=\"ph1\">` next`</ph> to produce a monetary output field from the <bpt id=\"p1\">[</bpt>string_type<ept id=\"p1\">](#money_put__string_type)</ept> object <ph id=\"ph2\">` val`</ph>.","pos":[3599,3791],"source":"The first virtual protected member function generates sequential elements beginning at ` next` to produce a monetary output field from the [string_type](#money_put__string_type) object ` val`."},{"content":"The sequence controlled by <ph id=\"ph1\">` val`</ph> must begin with one or more decimal digits, optionally preceded by a minus sign (–), which represents the amount.","pos":[3792,3939],"source":" The sequence controlled by ` val` must begin with one or more decimal digits, optionally preceded by a minus sign (–), which represents the amount."},{"content":"The function returns an iterator designating the first element beyond the generated monetary output field.","pos":[3940,4046]},{"pos":[4053,4285],"content":"The second virtual protected member function behaves the same as the first, except that it effectively first converts <ph id=\"ph1\">` val`</ph> to a sequence of decimal digits, optionally preceded by a minus sign, then converts that sequence as above.","source":"The second virtual protected member function behaves the same as the first, except that it effectively first converts ` val` to a sequence of decimal digits, optionally preceded by a minus sign, then converts that sequence as above."},{"content":"The format of a monetary output field is determined by the <bpt id=\"p1\">[</bpt>locale facet<ept id=\"p1\">](../standard-library/locale-class.md#facet_class)</ept> fac returned by the (effective) call <bpt id=\"p2\">[</bpt>use_facet<ept id=\"p2\">](../standard-library/locale-functions.md#use_facet)</ept><ph id=\"ph1\"> &lt; </ph><bpt id=\"p3\">[</bpt>moneypunct<ept id=\"p3\">](../standard-library/moneypunct-class.md)</ept><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p4\">**</bpt>CharType<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>intl<ept id=\"p5\">**</ept>&gt; &gt;( <bpt id=\"p6\">**</bpt>iosbase<ept id=\"p6\">**</ept>.","pos":[4292,4612],"source":"The format of a monetary output field is determined by the [locale facet](../standard-library/locale-class.md#facet_class) fac returned by the (effective) call [use_facet](../standard-library/locale-functions.md#use_facet) < [moneypunct](../standard-library/moneypunct-class.md)\\< **CharType**, **intl**> >( **iosbase**."},{"content":"<bpt id=\"p1\">[</bpt>getloc<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__getloc)</ept>).","pos":[4613,4679],"source":"[getloc](../standard-library/ios-base-class.md#ios_base__getloc))."},{"content":"Specifically:","pos":[4686,4699]},{"content":"<bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[4707,4715],"source":"**fac**."},{"content":"<bpt id=\"p1\">[</bpt>pos_format<ept id=\"p1\">](../standard-library/moneypunct-class.md#moneypunct__pos_format)</ept> determines the order in which components of the field are generated for a nonnegative value.","pos":[4716,4885],"source":"[pos_format](../standard-library/moneypunct-class.md#moneypunct__pos_format) determines the order in which components of the field are generated for a nonnegative value."},{"content":"<bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[4893,4901],"source":"**fac**."},{"content":"<bpt id=\"p1\">[</bpt>neg_format<ept id=\"p1\">](../standard-library/moneypunct-class.md#moneypunct__neg_format)</ept> determines the order in which components of the field are generated for a negative value.","pos":[4902,5068],"source":"[neg_format](../standard-library/moneypunct-class.md#moneypunct__neg_format) determines the order in which components of the field are generated for a negative value."},{"content":"<bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[5076,5084],"source":"**fac**."},{"content":"<bpt id=\"p1\">[</bpt>curr_symbol<ept id=\"p1\">](../standard-library/moneypunct-class.md#moneypunct__curr_symbol)</ept> determines the sequence of elements to generate for a currency symbol.","pos":[5085,5234],"source":"[curr_symbol](../standard-library/moneypunct-class.md#moneypunct__curr_symbol) determines the sequence of elements to generate for a currency symbol."},{"content":"<bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[5242,5250],"source":"**fac**."},{"content":"<bpt id=\"p1\">[</bpt>positive_sign<ept id=\"p1\">](../standard-library/moneypunct-class.md#moneypunct__positive_sign)</ept> determines the sequence of elements to generate for a positive sign.","pos":[5251,5402],"source":"[positive_sign](../standard-library/moneypunct-class.md#moneypunct__positive_sign) determines the sequence of elements to generate for a positive sign."},{"content":"<bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[5410,5418],"source":"**fac**."},{"content":"<bpt id=\"p1\">[</bpt>negative_sign<ept id=\"p1\">](../standard-library/moneypunct-class.md#moneypunct__negative_sign)</ept> determines the sequence of elements to generate for a negative sign.","pos":[5419,5570],"source":"[negative_sign](../standard-library/moneypunct-class.md#moneypunct__negative_sign) determines the sequence of elements to generate for a negative sign."},{"content":"<bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[5578,5586],"source":"**fac**."},{"content":"<bpt id=\"p1\">[</bpt>grouping<ept id=\"p1\">](../standard-library/moneypunct-class.md#moneypunct__grouping)</ept> determines how digits are grouped to the left of any decimal point.","pos":[5587,5727],"source":"[grouping](../standard-library/moneypunct-class.md#moneypunct__grouping) determines how digits are grouped to the left of any decimal point."},{"content":"<bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[5735,5743],"source":"**fac**."},{"content":"<bpt id=\"p1\">[</bpt>thousands_sep<ept id=\"p1\">](../standard-library/moneypunct-class.md#moneypunct__thousands_sep)</ept> determines the element that separates groups of digits to the left of any decimal point.","pos":[5744,5915],"source":"[thousands_sep](../standard-library/moneypunct-class.md#moneypunct__thousands_sep) determines the element that separates groups of digits to the left of any decimal point."},{"content":"<bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[5923,5931],"source":"**fac**."},{"content":"<bpt id=\"p1\">[</bpt>decimal_point<ept id=\"p1\">](../standard-library/moneypunct-class.md#moneypunct__decimal_point)</ept> determines the element that separates the integer digits from any fraction digits.","pos":[5932,6097],"source":"[decimal_point](../standard-library/moneypunct-class.md#moneypunct__decimal_point) determines the element that separates the integer digits from any fraction digits."},{"content":"<bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[6105,6113],"source":"**fac**."},{"content":"<bpt id=\"p1\">[</bpt>frac_digits<ept id=\"p1\">](../standard-library/moneypunct-class.md#moneypunct__frac_digits)</ept> determines the number of significant fraction digits to the right of any decimal point.","pos":[6114,6280],"source":"[frac_digits](../standard-library/moneypunct-class.md#moneypunct__frac_digits) determines the number of significant fraction digits to the right of any decimal point."},{"content":"If the sign string ( <bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[6287,6316],"source":"If the sign string ( **fac**."},{"content":"<ph id=\"ph1\">`negative_sign`</ph> or <bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[6317,6344],"source":"`negative_sign` or **fac**."},{"content":"<ph id=\"ph1\">`positive_sign`</ph>) has more than one element, only the first element is generated where the element equal to <bpt id=\"p1\">**</bpt>money_base::sign<ept id=\"p1\">**</ept> appears in the format pattern ( <bpt id=\"p2\">**</bpt>fac<ept id=\"p2\">**</ept>.","pos":[6345,6513],"source":"`positive_sign`) has more than one element, only the first element is generated where the element equal to **money_base::sign** appears in the format pattern ( **fac**."},{"content":"<ph id=\"ph1\">`neg_format`</ph> or <bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[6514,6538],"source":"`neg_format` or **fac**."},{"content":"<ph id=\"ph1\">`pos_format`</ph>).","pos":[6539,6553],"source":"`pos_format`)."},{"content":"Any remaining elements are generated at the end of the monetary output field.","pos":[6554,6631]},{"content":"If <bpt id=\"p1\">**</bpt>iosbase<ept id=\"p1\">**</ept>.","pos":[6638,6653],"source":"If **iosbase**."},{"content":"<bpt id=\"p1\">[</bpt>flags<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__flags)</ept><ph id=\"ph1\"> &amp; </ph><bpt id=\"p2\">[</bpt>showbase<ept id=\"p2\">](../standard-library/ios-functions.md#showbase)</ept> is nonzero, the string <bpt id=\"p3\">**</bpt>fac<ept id=\"p3\">**</ept>.","pos":[6654,6808],"source":"[flags](../standard-library/ios-base-class.md#ios_base__flags) & [showbase](../standard-library/ios-functions.md#showbase) is nonzero, the string **fac**."},{"content":"<ph id=\"ph1\">`curr_symbol`</ph> is generated where the element equal to <bpt id=\"p1\">**</bpt>money_base::symbol<ept id=\"p1\">**</ept> appears in the format pattern.","pos":[6809,6916],"source":"`curr_symbol` is generated where the element equal to **money_base::symbol** appears in the format pattern."},{"content":"Otherwise, no currency symbol is generated.","pos":[6917,6960]},{"content":"If no grouping constraints are imposed by <bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[6967,7017],"source":"If no grouping constraints are imposed by **fac**."},{"content":"<bpt id=\"p1\">**</bpt>grouping<ept id=\"p1\">**</ept> (its first element has the value CHAR_MAX), then no instances of <bpt id=\"p2\">**</bpt>fac<ept id=\"p2\">**</ept>.","pos":[7018,7104],"source":"**grouping** (its first element has the value CHAR_MAX), then no instances of **fac**."},{"content":"<ph id=\"ph1\">`thousands_sep`</ph> are generated in the value portion of the monetary output field (where the element equal to <bpt id=\"p1\">**</bpt>money_base::value<ept id=\"p1\">**</ept> appears in the format pattern).","pos":[7105,7266],"source":"`thousands_sep` are generated in the value portion of the monetary output field (where the element equal to **money_base::value** appears in the format pattern)."},{"content":"If <bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[7267,7278],"source":" If **fac**."},{"content":"<ph id=\"ph1\">`frac_digits`</ph> is zero, then no instance of <bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[7279,7330],"source":"`frac_digits` is zero, then no instance of **fac**."},{"content":"<ph id=\"ph1\">`decimal_point`</ph> is generated after the decimal digits.","pos":[7331,7385],"source":"`decimal_point` is generated after the decimal digits."},{"content":"Otherwise, the resulting monetary output field places the low-order <bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[7386,7462],"source":" Otherwise, the resulting monetary output field places the low-order **fac**."},{"content":"<ph id=\"ph1\">`frac_digits`</ph> decimal digits to the right of the decimal point.","pos":[7463,7526],"source":"`frac_digits` decimal digits to the right of the decimal point."},{"content":"Padding occurs as for any numeric output field, except that if <bpt id=\"p1\">**</bpt>iosbase<ept id=\"p1\">**</ept>.","pos":[7533,7608],"source":"Padding occurs as for any numeric output field, except that if **iosbase**."},{"content":"<bpt id=\"p1\">**</bpt>flags<ept id=\"p1\">**</ept><ph id=\"ph1\"> &amp; </ph><bpt id=\"p2\">**</bpt>iosbase<ept id=\"p2\">**</ept>.","pos":[7609,7633],"source":"**flags** & **iosbase**."},{"content":"<bpt id=\"p1\">[</bpt>internal<ept id=\"p1\">](../standard-library/ios-functions.md#internal)</ept> is nonzero, any internal padding is generated where the element equal to <bpt id=\"p2\">**</bpt>money_base::space<ept id=\"p2\">**</ept> appears in the format pattern, if it does appear.","pos":[7634,7836],"source":"[internal](../standard-library/ios-functions.md#internal) is nonzero, any internal padding is generated where the element equal to **money_base::space** appears in the format pattern, if it does appear."},{"content":"Otherwise, internal padding occurs before the generated sequence.","pos":[7837,7902]},{"content":"The padding character is <bpt id=\"p1\">**</bpt>fill<ept id=\"p1\">**</ept>.","pos":[7903,7937],"source":" The padding character is **fill**."},{"content":"The function calls <bpt id=\"p1\">**</bpt>iosbase<ept id=\"p1\">**</ept>.","pos":[7944,7975],"source":"The function calls **iosbase**."},{"content":"<bpt id=\"p1\">**</bpt>width<ept id=\"p1\">**</ept>(0) to reset the field width to zero.","pos":[7976,8022],"source":"**width**(0) to reset the field width to zero."},{"pos":[8032,8039],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8044,8143],"content":"See the example for <bpt id=\"p1\">[</bpt>put<ept id=\"p1\">](#money_put__put)</ept>, where the virtual member function is called by <bpt id=\"p2\">**</bpt>put<ept id=\"p2\">**</ept>.","source":"See the example for [put](#money_put__put), where the virtual member function is called by **put**."},{"pos":[8153,8210],"content":"<bpt id=\"p1\">&lt;a name=\"money_put__iter_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  money_put::iter_type","linkify":"<a name=\"money_put__iter_type\"></a>  money_put::iter_type","source":"<a name=\"money_put__iter_type\"></a>  money_put::iter_type"},{"content":"A type that describes an output iterator.","pos":[8214,8255]},{"pos":[8316,8323],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8327,8395],"content":"The type is a synonym for the template parameter <bpt id=\"p1\">**</bpt>OutputIterator.<ept id=\"p1\">**</ept>","source":"The type is a synonym for the template parameter **OutputIterator.**"},{"pos":[8405,8462],"content":"<bpt id=\"p1\">&lt;a name=\"money_put__money_put\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  money_put::money_put","linkify":"<a name=\"money_put__money_put\"></a>  money_put::money_put","source":"<a name=\"money_put__money_put\"></a>  money_put::money_put"},{"pos":[8466,8514],"content":"The constructor for objects of type <ph id=\"ph1\">`money_put`</ph>.","source":"The constructor for objects of type `money_put`."},{"pos":[8577,8587],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Integer value used to specify the type of memory management for the object.","pos":[8602,8677]},{"pos":[8687,8694],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8698,8771],"content":"The possible values for the <ph id=\"ph1\">`_Refs`</ph> parameter and their significance are:","source":"The possible values for the `_Refs` parameter and their significance are:"},{"content":"0: the lifetime of the object is managed by the locales that contain it.","pos":[8781,8853]},{"content":"1: the lifetime of the object must be manually managed.","pos":[8863,8918]},{"content":"<ph id=\"ph1\">\\&gt;</ph> 0: these values are not defined.","pos":[8928,8963],"source":"\\> 0: these values are not defined."},{"content":"No direct examples are possible, because the destructor is protected.","pos":[8970,9039]},{"pos":[9046,9174],"content":"The constructor initializes its base object with <bpt id=\"p1\">**</bpt>locale::<ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>facet<ept id=\"p2\">](../standard-library/locale-class.md#facet_class)</ept>( <ph id=\"ph1\">`_Refs`</ph>).","source":"The constructor initializes its base object with **locale::**[facet](../standard-library/locale-class.md#facet_class)( `_Refs`)."},{"pos":[9184,9229],"content":"<bpt id=\"p1\">&lt;a name=\"money_put__put\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  money_put::put","linkify":"<a name=\"money_put__put\"></a>  money_put::put","source":"<a name=\"money_put__put\"></a>  money_put::put"},{"content":"Converts either number or a string to a character sequence that represents a monetary value.","pos":[9233,9325]},{"pos":[9627,9637],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An iterator addressing the first element of the inserted string.","pos":[9652,9716]},{"content":"A Boolean value indicating the type of currency symbol expected in the sequence: <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if international, <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if domestic.","pos":[9734,9864],"source":" A Boolean value indicating the type of currency symbol expected in the sequence: **true** if international, **false** if domestic."},{"content":"A format flag which when set indicates that the currency symbol is optional; otherwise, it is required","pos":[9885,9987]},{"content":"A character which is used for spacing.","pos":[10005,10043]},{"content":"A string object to be converted.","pos":[10060,10092]},{"pos":[10102,10114],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An output iterator the addresses the position one beyond the last element produced.","pos":[10118,10201]},{"pos":[10211,10218],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10222,10328],"content":"Both member functions return <bpt id=\"p1\">[</bpt>do_put<ept id=\"p1\">](#money_put__do_put)</ept>( <ph id=\"ph1\">` next`</ph>, <ph id=\"ph2\">`_Intl`</ph>, <ph id=\"ph3\">`_Iosbase`</ph>, <ph id=\"ph4\">`_Fill`</ph>, <ph id=\"ph5\">` val`</ph>).","source":"Both member functions return [do_put](#money_put__do_put)( ` next`, `_Intl`, `_Iosbase`, `_Fill`, ` val`)."},{"pos":[10338,10345],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11157,11218],"content":"<bpt id=\"p1\">&lt;a name=\"money_put__string_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  money_put::string_type","linkify":"<a name=\"money_put__string_type\"></a>  money_put::string_type","source":"<a name=\"money_put__string_type\"></a>  money_put::string_type"},{"pos":[11222,11296],"content":"A type that describes a string containing characters of type <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>.","source":"A type that describes a string containing characters of type **CharType**."},{"pos":[11386,11393],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11397,11580],"content":"The type describes a specialization of template class <bpt id=\"p1\">[</bpt>basic_string<ept id=\"p1\">](../standard-library/basic-string-class.md)</ept> whose objects can store sequences of elements from the source sequence.","source":"The type describes a specialization of template class [basic_string](../standard-library/basic-string-class.md) whose objects can store sequences of elements from the source sequence."},{"pos":[11589,11597],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>locale&gt;<ept id=\"p1\">](../standard-library/locale.md)</ept><ph id=\"ph2\"> </ph>","pos":[11601,11644],"source":"[\\<locale>](../standard-library/locale.md) "},{"content":"<bpt id=\"p1\"> [</bpt>facet Class<ept id=\"p1\">](../standard-library/locale-class.md#facet_class)</ept><ph id=\"ph1\"> </ph>","pos":[11647,11711],"source":" [facet Class](../standard-library/locale-class.md#facet_class) "},{"content":"<bpt id=\"p1\"> [</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept>","pos":[11714,11824],"source":" [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)"}],"content":"---\ntitle: \"money_put Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std::money_put\"\n  - \"xlocmon/std::money_put\"\n  - \"money_put\"\n  - \"std.money_put\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"money_put class\"\nms.assetid: f439fd56-c9b1-414c-95e1-66c918c6eee6\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# money_put Class\nThe template class describes an object that can serve as a locale facet to control conversions of monetary values to sequences of type `CharType`.  \n  \n## Syntax  \n  \n```  \ntemplate <class CharType,  \n    class OutputIterator = ostreambuf_iterator<CharType>>  \nclass money_put : public locale::facet;  \n```  \n  \n#### Parameters  \n `CharType`  \n The type used within a program to encode characters in a locale.  \n  \n `OutputIterator`  \n The type of iterator to which the monetary put functions write their output.  \n  \n## Remarks  \n As with any locale facet, the static object ID has an initial stored value of zero. The first attempt to access its stored value stores a unique positive value in **id.**  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[money_put](#money_put__money_put)|The constructor for objects of type `money_put`.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[char_type](#money_put__char_type)|A type that is used to describe a character used by a locale.|  \n|[iter_type](#money_put__iter_type)|A type that describes an output iterator.|  \n|[string_type](#money_put__string_type)|A type that describes a string containing characters of type `CharType`.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[do_put](#money_put__do_put)|A virtual function called to convert either number or a string to a character sequence that represents a monetary value.|  \n|[put](#money_put__put)|Converts either number or a string to a character sequence that represents a monetary value.|  \n  \n## Requirements  \n **Header:** \\<locale>  \n  \n **Namespace:** std  \n  \n##  <a name=\"money_put__char_type\"></a>  money_put::char_type  \n A type that is used to describe a character used by a locale.  \n  \n```  \ntypedef CharType char_type;  \n```  \n  \n### Remarks  \n The type is a synonym for the template parameter **CharType**.  \n  \n##  <a name=\"money_put__do_put\"></a>  money_put::do_put  \n A virtual function called to convert either number or a string to a character sequence that represents a monetary value.  \n  \n```  \nvirtual iter_type do_put(\n    iter_type next,   \n    bool _Intl,   \n    ios_base& _Iosbase,  \n    CharType _Fill,   \n    const string_type& val) const;\n\n \nvirtual iter_type do_put(\n    iter_type next,   \n    bool _Intl,   \n    ios_base& _Iosbase,  \n    CharType _Fill,  \n    long double val) const;\n```  \n  \n### Parameters  \n ` next`  \n An iterator addressing the first element of the inserted string.  \n  \n `_Intl`  \n A Boolean value indicating the type of currency symbol expected in the sequence: **true** if international, **false** if domestic.  \n  \n `_Iosbase`  \n A format flag which when set indicates that the currency symbol is optional; otherwise, it is required  \n  \n `_Fill`  \n A character which is used for spacing.  \n  \n ` val`  \n A string object to be converted.  \n  \n### Return Value  \n An output iterator the addresses the position one beyond the last element produced.  \n  \n### Remarks  \n The first virtual protected member function generates sequential elements beginning at ` next` to produce a monetary output field from the [string_type](#money_put__string_type) object ` val`. The sequence controlled by ` val` must begin with one or more decimal digits, optionally preceded by a minus sign (–), which represents the amount. The function returns an iterator designating the first element beyond the generated monetary output field.  \n  \n The second virtual protected member function behaves the same as the first, except that it effectively first converts ` val` to a sequence of decimal digits, optionally preceded by a minus sign, then converts that sequence as above.  \n  \n The format of a monetary output field is determined by the [locale facet](../standard-library/locale-class.md#facet_class) fac returned by the (effective) call [use_facet](../standard-library/locale-functions.md#use_facet) < [moneypunct](../standard-library/moneypunct-class.md)\\< **CharType**, **intl**> >( **iosbase**. [getloc](../standard-library/ios-base-class.md#ios_base__getloc)).  \n  \n Specifically:  \n  \n- **fac**. [pos_format](../standard-library/moneypunct-class.md#moneypunct__pos_format) determines the order in which components of the field are generated for a nonnegative value.  \n  \n- **fac**. [neg_format](../standard-library/moneypunct-class.md#moneypunct__neg_format) determines the order in which components of the field are generated for a negative value.  \n  \n- **fac**. [curr_symbol](../standard-library/moneypunct-class.md#moneypunct__curr_symbol) determines the sequence of elements to generate for a currency symbol.  \n  \n- **fac**. [positive_sign](../standard-library/moneypunct-class.md#moneypunct__positive_sign) determines the sequence of elements to generate for a positive sign.  \n  \n- **fac**. [negative_sign](../standard-library/moneypunct-class.md#moneypunct__negative_sign) determines the sequence of elements to generate for a negative sign.  \n  \n- **fac**. [grouping](../standard-library/moneypunct-class.md#moneypunct__grouping) determines how digits are grouped to the left of any decimal point.  \n  \n- **fac**. [thousands_sep](../standard-library/moneypunct-class.md#moneypunct__thousands_sep) determines the element that separates groups of digits to the left of any decimal point.  \n  \n- **fac**. [decimal_point](../standard-library/moneypunct-class.md#moneypunct__decimal_point) determines the element that separates the integer digits from any fraction digits.  \n  \n- **fac**. [frac_digits](../standard-library/moneypunct-class.md#moneypunct__frac_digits) determines the number of significant fraction digits to the right of any decimal point.  \n  \n If the sign string ( **fac**. `negative_sign` or **fac**. `positive_sign`) has more than one element, only the first element is generated where the element equal to **money_base::sign** appears in the format pattern ( **fac**. `neg_format` or **fac**. `pos_format`). Any remaining elements are generated at the end of the monetary output field.  \n  \n If **iosbase**. [flags](../standard-library/ios-base-class.md#ios_base__flags) & [showbase](../standard-library/ios-functions.md#showbase) is nonzero, the string **fac**. `curr_symbol` is generated where the element equal to **money_base::symbol** appears in the format pattern. Otherwise, no currency symbol is generated.  \n  \n If no grouping constraints are imposed by **fac**. **grouping** (its first element has the value CHAR_MAX), then no instances of **fac**. `thousands_sep` are generated in the value portion of the monetary output field (where the element equal to **money_base::value** appears in the format pattern). If **fac**. `frac_digits` is zero, then no instance of **fac**. `decimal_point` is generated after the decimal digits. Otherwise, the resulting monetary output field places the low-order **fac**. `frac_digits` decimal digits to the right of the decimal point.  \n  \n Padding occurs as for any numeric output field, except that if **iosbase**. **flags** & **iosbase**. [internal](../standard-library/ios-functions.md#internal) is nonzero, any internal padding is generated where the element equal to **money_base::space** appears in the format pattern, if it does appear. Otherwise, internal padding occurs before the generated sequence. The padding character is **fill**.  \n  \n The function calls **iosbase**. **width**(0) to reset the field width to zero.  \n  \n### Example  \n  See the example for [put](#money_put__put), where the virtual member function is called by **put**.  \n  \n##  <a name=\"money_put__iter_type\"></a>  money_put::iter_type  \n A type that describes an output iterator.  \n  \n```  \ntypedef OutputIterator iter_type;  \n```  \n  \n### Remarks  \n The type is a synonym for the template parameter **OutputIterator.**  \n  \n##  <a name=\"money_put__money_put\"></a>  money_put::money_put  \n The constructor for objects of type `money_put`.  \n  \n```  \nexplicit money_put(size_t _Refs = 0);\n```  \n  \n### Parameters  \n `_Refs`  \n Integer value used to specify the type of memory management for the object.  \n  \n### Remarks  \n The possible values for the `_Refs` parameter and their significance are:  \n  \n-   0: the lifetime of the object is managed by the locales that contain it.  \n  \n-   1: the lifetime of the object must be manually managed.  \n  \n-   \\> 0: these values are not defined.  \n  \n No direct examples are possible, because the destructor is protected.  \n  \n The constructor initializes its base object with **locale::**[facet](../standard-library/locale-class.md#facet_class)( `_Refs`).  \n  \n##  <a name=\"money_put__put\"></a>  money_put::put  \n Converts either number or a string to a character sequence that represents a monetary value.  \n  \n```  \niter_type put(\n    iter_type next,   \n    bool _Intl,   \n    ios_base& _Iosbase,  \n    CharType _Fill,   \n    const string_type& val) const;\n\n \niter_type put(\n    iter_type next,   \n    bool _Intl,   \n    ios_base& _Iosbase,  \n    CharType _Fill,  \n    long double val) const;\n```  \n  \n### Parameters  \n ` next`  \n An iterator addressing the first element of the inserted string.  \n  \n `_Intl`  \n A Boolean value indicating the type of currency symbol expected in the sequence: **true** if international, **false** if domestic.  \n  \n `_Iosbase`  \n A format flag which when set indicates that the currency symbol is optional; otherwise, it is required  \n  \n `_Fill`  \n A character which is used for spacing.  \n  \n ` val`  \n A string object to be converted.  \n  \n### Return Value  \n An output iterator the addresses the position one beyond the last element produced.  \n  \n### Remarks  \n Both member functions return [do_put](#money_put__do_put)( ` next`, `_Intl`, `_Iosbase`, `_Fill`, ` val`).  \n  \n### Example  \n  \n```cpp  \n// money_put_put.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n#include <sstream>  \nusing namespace std;  \nint main( )  \n{  \n//   locale loc( \"german_germany\" );  \n   locale loc( \"english_canada\" );  \n   basic_stringstream<char> psz, psz2;  \n   ios_base::iostate st = 0;  \n  \n   psz2.imbue( loc );  \n   psz2.flags( psz2.flags( )|ios_base::showbase ); // force the printing of the currency symbol  \n   use_facet < money_put < char > >(loc).put(basic_ostream<char>::_Iter( psz2.rdbuf( ) ), true, psz2, st, 100012);  \n   if (st & ios_base::failbit)  \n      cout << \"money_put( ) FAILED\" << endl;  \n   else  \n      cout << \"money_put( ) = \\\"\" << psz2.rdbuf( )->str( ) <<\"\\\"\"<< endl;     \n  \n   st = 0;  \n};  \n```  \n  \n```Output  \nmoney_put( ) = \"CAD1,000.12\"  \n```  \n  \n##  <a name=\"money_put__string_type\"></a>  money_put::string_type  \n A type that describes a string containing characters of type **CharType**.  \n  \n```  \ntypedef basic_string<CharType, Traits, Allocator> string_type;  \n```  \n  \n### Remarks  \n The type describes a specialization of template class [basic_string](../standard-library/basic-string-class.md) whose objects can store sequences of elements from the source sequence.  \n  \n## See Also  \n [\\<locale>](../standard-library/locale.md)   \n [facet Class](../standard-library/locale-class.md#facet_class)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)\n\n"}