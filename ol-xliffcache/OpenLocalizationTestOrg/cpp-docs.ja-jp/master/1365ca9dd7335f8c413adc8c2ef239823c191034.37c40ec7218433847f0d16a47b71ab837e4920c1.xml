{"nodes":[{"pos":[12,74],"content":"How to: Monitor File System Changes (C++-CLI) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Monitor File System Changes (C++-CLI) | Microsoft Docs","pos":[0,62]}]},{"content":"How to: Monitor File System Changes (C++/CLI)","pos":[768,813]},{"content":"The following code example uses &lt;xref:System.IO.FileSystemWatcher&gt; to register for events corresponding to files being created, changed, deleted, or renamed.","pos":[814,971],"source":"The following code example uses <xref:System.IO.FileSystemWatcher> to register for events corresponding to files being created, changed, deleted, or renamed."},{"content":"Instead of periodically polling a directory for changes to files, you can use the &lt;xref:System.IO.FileSystemWatcher&gt; class to fire events when a change is detected.","pos":[972,1136],"source":" Instead of periodically polling a directory for changes to files, you can use the <xref:System.IO.FileSystemWatcher> class to fire events when a change is detected."},{"content":"Example","pos":[1145,1152]},{"content":"See Also","pos":[2976,2984]},{"content":"System.IO namespace","pos":[2989,3008]},{"content":"File and Stream I-O","pos":[3072,3091]},{"content":".NET Programming with C++/CLI (Visual C++)","pos":[3170,3212]}],"content":"---\ntitle: \"How to: Monitor File System Changes (C++-CLI) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"monitoring file system events\"\n  - \"FileSystemWatcher class, examples\"\n  - \"examples [C++], monitoring file system changes\"\n  - \"events [C++], monitoring\"\n  - \"file system events [C++]\"\nms.assetid: 207a3069-e63d-417e-8b56-00ab44f29c52\ncaps.latest.revision: 12\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Monitor File System Changes (C++/CLI)\nThe following code example uses <xref:System.IO.FileSystemWatcher> to register for events corresponding to files being created, changed, deleted, or renamed. Instead of periodically polling a directory for changes to files, you can use the <xref:System.IO.FileSystemWatcher> class to fire events when a change is detected.  \n  \n## Example  \n  \n```  \n// monitor_fs.cpp  \n// compile with: /clr  \n#using <system.dll>  \n  \nusing namespace System;  \nusing namespace System::IO;  \n  \nref class FSEventHandler  \n{  \npublic:  \n    void OnChanged (Object^ source, FileSystemEventArgs^ e)  \n    {  \n        Console::WriteLine(\"File: {0} {1}\",   \n               e->FullPath, e->ChangeType);  \n    }  \n    void OnRenamed(Object^ source, RenamedEventArgs^ e)  \n    {  \n        Console::WriteLine(\"File: {0} renamed to {1}\",   \n                e->OldFullPath, e->FullPath);  \n    }  \n};  \n  \nint main()  \n{  \n   array<String^>^ args = Environment::GetCommandLineArgs();  \n  \n   if(args->Length < 2)  \n   {  \n      Console::WriteLine(\"Usage: Watcher.exe <directory>\");  \n      return -1;  \n   }  \n  \n   FileSystemWatcher^ fsWatcher = gcnew FileSystemWatcher( );  \n   fsWatcher->Path = args[1];  \n   fsWatcher->NotifyFilter = static_cast<NotifyFilters>   \n              (NotifyFilters::FileName |   \n               NotifyFilters::Attributes |   \n               NotifyFilters::LastAccess |   \n               NotifyFilters::LastWrite |   \n               NotifyFilters::Security |   \n               NotifyFilters::Size );  \n  \n    FSEventHandler^ handler = gcnew FSEventHandler();   \n    fsWatcher->Changed += gcnew FileSystemEventHandler(   \n            handler, &FSEventHandler::OnChanged);  \n    fsWatcher->Created += gcnew FileSystemEventHandler(   \n            handler, &FSEventHandler::OnChanged);  \n    fsWatcher->Deleted += gcnew FileSystemEventHandler(   \n            handler, &FSEventHandler::OnChanged);  \n    fsWatcher->Renamed += gcnew RenamedEventHandler(   \n            handler, &FSEventHandler::OnRenamed);  \n  \n    fsWatcher->EnableRaisingEvents = true;  \n  \n    Console::WriteLine(\"Press Enter to quit the sample.\");  \n    Console::ReadLine( );  \n}  \n```  \n  \n## See Also  \n [System.IO namespace](https://msdn.microsoft.com/en-us/library/system.io.aspx)   \n [File and Stream I-O](http://msdn.microsoft.com/Library/4f4a33a9-66b7-4cd7-a285-4ad3e4276cd2)   \n [.NET Programming with C++/CLI (Visual C++)](../dotnet/dotnet-programming-with-cpp-cli-visual-cpp.md)"}