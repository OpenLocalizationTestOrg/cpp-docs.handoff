<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bb39222c3cc371e2f2cdf839933fb4244fb2fb4e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\how-to-use-oversubscription-to-offset-latency.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">81e8464c3a45188a1331c5b772f09d6f594aac70</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1c32411772d5e3f02a71f31d917ef8f2e7f9a068</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Use Oversubscription to Offset Latency | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Use Oversubscription to Offset Latency</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Oversubscription can improve the overall efficiency of some applications that contain tasks that have a high amount of latency.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic illustrates how to use oversubscription to offset the latency that is caused by reading data from a network connection.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This example uses the <bpt id="p1">[</bpt>Asynchronous Agents Library<ept id="p1">](../../parallel/concrt/asynchronous-agents-library.md)</ept> to download files from HTTP servers.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`http_reader`</ph> class derives from <bpt id="p1">[</bpt>concurrency::agent<ept id="p1">](../../parallel/concrt/reference/agent-class.md)</ept> and uses message passing to asynchronously read which URL names to download.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`http_reader`</ph> class uses the <bpt id="p1">[</bpt>concurrency::task_group<ept id="p1">](reference/task-group-class.md)</ept> class to concurrently read each file.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Each task calls the <bpt id="p1">[</bpt>concurrency::Context::Oversubscribe<ept id="p1">](reference/context-class.md#oversubscribe)</ept> method with the <ph id="ph1">`_BeginOversubscription`</ph> parameter set to <ph id="ph2">`true`</ph> to enable oversubscription in the current context.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Each task then uses the Microsoft Foundation Classes (MFC) <bpt id="p1">[</bpt>CInternetSession<ept id="p1">](../../mfc/reference/cinternetsession-class.md)</ept> and <bpt id="p2">[</bpt>CHttpFile<ept id="p2">](../../mfc/reference/chttpfile-class.md)</ept> classes to download the file.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Finally, each task calls <ph id="ph1">`Context::Oversubscribe`</ph> with the <ph id="ph2">`_BeginOversubscription`</ph> parameter set to <ph id="ph3">`false`</ph> to disable oversubscription.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When oversubscription is enabled, the runtime creates one additional thread in which to run tasks.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Each of these threads can also oversubscribe the current context and thereby create additional threads.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`http_reader`</ph> class uses a <bpt id="p1">[</bpt>concurrency::unbounded_buffer<ept id="p1">](reference/unbounded-buffer-class.md)</ept> object to limit the number of threads that the application uses.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The agent initializes the buffer with a fixed number of token values.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For each download operation, the agent reads a token value from the buffer before the operation starts and then writes that value back to the buffer after the operation finishes.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When the buffer is empty, the agent waits for one of the download operations to write a value back to the buffer.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example limits the number of simultaneous tasks to two times the number of available hardware threads.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This value is a good starting point to use when you experiment with oversubscription.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can use a value that fits a particular processing environment or dynamically change this value to respond to the actual workload.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>concrt-download-oversubscription#1</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This example produces the following output on a computer that has four processors:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The example can run faster when oversubscription is enabled because additional tasks run while other tasks wait for a latent operation to finish.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id="ph1">`download-oversubscription.cpp`</ph> and then run one of the following commands in a Visual Studio Command Prompt window.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>cl.exe /EHsc /MD /D "_AFXDLL" download-oversubscription.cpp</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>cl.exe /EHsc /MT download-oversubscription.cpp</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Robust Programming</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Always disable oversubscription after you no longer require it.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Consider a function that does not handle an exception that is thrown by another function.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If you do not disable oversubscription before the function returns, any additional parallel work will also oversubscribe the current context.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">*</bpt>Resource Acquisition Is Initialization<ept id="p1">*</ept> (RAII) pattern to limit oversubscription to a given scope.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Under the RAII pattern, a data structure is allocated on the stack.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>That data structure initializes or acquires a resource when it is created and destroys or releases that resource when the data structure is destroyed.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The RAII pattern guarantees that the destructor is called before the enclosing scope exits.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Therefore, the resource is correctly managed when an exception is thrown or when a function contains multiple <ph id="ph1">`return`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following example defines a structure that is named <ph id="ph1">`scoped_blocking_signal`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The constructor of the <ph id="ph1">`scoped_blocking_signal`</ph> structure enables oversubscription and the destructor disables oversubscription.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>concrt-download-oversubscription#2</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following example modifies the body of the <ph id="ph1">`download`</ph> method to use RAII to ensure that oversubscription is disabled before the function returns.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This technique ensures that the <ph id="ph1">`download`</ph> method is exception-safe.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>concrt-download-oversubscription#3</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Contexts</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Context::Oversubscribe Method</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>