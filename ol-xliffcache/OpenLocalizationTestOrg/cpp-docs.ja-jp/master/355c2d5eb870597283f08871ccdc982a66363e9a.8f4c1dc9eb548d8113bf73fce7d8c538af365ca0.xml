{"nodes":[{"pos":[12,35],"content":"atexit | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"atexit | Microsoft Docs","pos":[0,23]}]},{"pos":[889,895],"content":"atexit","linkify":"atexit","nodes":[{"content":"atexit","pos":[0,6]}]},{"content":"Processes the specified function at exit.","pos":[896,937]},{"pos":[946,952],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1032,1042],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Function to be called.","pos":[1056,1078]},{"pos":[1087,1099],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1103,1175],"content":"<ph id=\"ph1\">`atexit`</ph> returns 0 if successful, or a nonzero value if an error occurs.","source":"`atexit` returns 0 if successful, or a nonzero value if an error occurs."},{"pos":[1184,1191],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`atexit`</ph> function is passed the address of a function (<ph id=\"ph2\">`func`</ph>) to be called when the program terminates normally.","pos":[1195,1312],"source":"The `atexit` function is passed the address of a function (`func`) to be called when the program terminates normally."},{"content":"Successive calls to <ph id=\"ph1\">`atexit`</ph> create a register of functions that are executed in last-in, first-out (LIFO) order.","pos":[1313,1426],"source":" Successive calls to `atexit` create a register of functions that are executed in last-in, first-out (LIFO) order."},{"content":"The functions passed to <ph id=\"ph1\">`atexit`</ph> cannot take parameters.","pos":[1427,1483],"source":" The functions passed to `atexit` cannot take parameters."},{"content":"<ph id=\"ph1\">`atexit`</ph> and <ph id=\"ph2\">`_onexit`</ph> use the heap to hold the register of functions.","pos":[1484,1554],"source":"`atexit` and `_onexit` use the heap to hold the register of functions."},{"content":"Thus, the number of functions that can be registered is limited only by heap memory.","pos":[1555,1639]},{"pos":[1646,1801],"content":"The code in the <ph id=\"ph1\">`atexit`</ph> function should not contain any dependency on any DLL which could have already been unloaded when the <ph id=\"ph2\">`atexit`</ph> function is called.","source":"The code in the `atexit` function should not contain any dependency on any DLL which could have already been unloaded when the `atexit` function is called."},{"pos":[1808,1936],"content":"To generate an ANSI-compliant application, use the ANSI-standard <ph id=\"ph1\">`atexit`</ph> function (rather than the similar <ph id=\"ph2\">`_onexit`</ph> function).","source":"To generate an ANSI-compliant application, use the ANSI-standard `atexit` function (rather than the similar `_onexit` function)."},{"pos":[1945,1957],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[1964,1971]},{"content":"Required header","pos":[1972,1987]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt;","pos":[2041,2052],"source":"\\<stdlib.h>"},{"pos":[2062,2069],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This program pushes four functions onto the stack of functions to be executed when <ph id=\"ph1\">`atexit`</ph> is called.","pos":[2073,2175],"source":"This program pushes four functions onto the stack of functions to be executed when `atexit` is called."},{"content":"When the program exits, these programs are executed on a last in, first out basis.","pos":[2176,2258]},{"pos":[2827,2852],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[2856,2975],"content":"<bpt id=\"p1\">[</bpt>System::Diagnostics::Process::Exited<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.exited.aspx)</ept>","source":"[System::Diagnostics::Process::Exited](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.exited.aspx)"},{"pos":[2984,2992],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Process and Environment Control<ept id=\"p1\">](../../c-runtime-library/process-and-environment-control.md)</ept><ph id=\"ph1\"> </ph>","pos":[2996,3090],"source":"[Process and Environment Control](../../c-runtime-library/process-and-environment-control.md) "},{"content":"<bpt id=\"p1\"> [</bpt>abort<ept id=\"p1\">](../../c-runtime-library/reference/abort.md)</ept><ph id=\"ph1\"> </ph>","pos":[3093,3146],"source":" [abort](../../c-runtime-library/reference/abort.md) "},{"content":"<bpt id=\"p1\"> [</bpt>exit, _Exit, _exit<ept id=\"p1\">](../../c-runtime-library/reference/exit-exit-exit.md)</ept><ph id=\"ph1\"> </ph>","pos":[3149,3224],"source":" [exit, _Exit, _exit](../../c-runtime-library/reference/exit-exit-exit.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_onexit, _onexit_m<ept id=\"p1\">](../../c-runtime-library/reference/onexit-onexit-m.md)</ept>","pos":[3227,3302],"source":" [_onexit, _onexit_m](../../c-runtime-library/reference/onexit-onexit-m.md)"}],"content":"---\ntitle: \"atexit | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"atexit\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"atexit\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"processing, at exit\"\n  - \"atexit function\"\nms.assetid: 92c156d2-8052-4e58-96dc-00128baac6f9\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# atexit\nProcesses the specified function at exit.  \n  \n## Syntax  \n  \n```  \nint atexit(  \n   void (__cdecl *func )( void )  \n);  \n```  \n  \n#### Parameters  \n `func`  \n Function to be called.  \n  \n## Return Value  \n `atexit` returns 0 if successful, or a nonzero value if an error occurs.  \n  \n## Remarks  \n The `atexit` function is passed the address of a function (`func`) to be called when the program terminates normally. Successive calls to `atexit` create a register of functions that are executed in last-in, first-out (LIFO) order. The functions passed to `atexit` cannot take parameters. `atexit` and `_onexit` use the heap to hold the register of functions. Thus, the number of functions that can be registered is limited only by heap memory.  \n  \n The code in the `atexit` function should not contain any dependency on any DLL which could have already been unloaded when the `atexit` function is called.  \n  \n To generate an ANSI-compliant application, use the ANSI-standard `atexit` function (rather than the similar `_onexit` function).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`atexit`|\\<stdlib.h>|  \n  \n## Example  \n This program pushes four functions onto the stack of functions to be executed when `atexit` is called. When the program exits, these programs are executed on a last in, first out basis.  \n  \n```  \n// crt_atexit.c  \n#include <stdlib.h>  \n#include <stdio.h>  \n  \nvoid fn1( void ), fn2( void ), fn3( void ), fn4( void );  \n  \nint main( void )  \n{  \n   atexit( fn1 );  \n   atexit( fn2 );  \n   atexit( fn3 );  \n   atexit( fn4 );  \n   printf( \"This is executed first.\\n\" );  \n}  \n  \nvoid fn1()  \n{  \n   printf( \"next.\\n\" );  \n}  \n  \nvoid fn2()  \n{  \n   printf( \"executed \" );  \n}  \n  \nvoid fn3()  \n{  \n   printf( \"is \" );  \n}  \n  \nvoid fn4()  \n{  \n   printf( \"This \" );  \n}  \n```  \n  \n```Output  \nThis is executed first.  \nThis is executed next.  \n```  \n  \n## .NET Framework Equivalent  \n [System::Diagnostics::Process::Exited](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.exited.aspx)  \n  \n## See Also  \n [Process and Environment Control](../../c-runtime-library/process-and-environment-control.md)   \n [abort](../../c-runtime-library/reference/abort.md)   \n [exit, _Exit, _exit](../../c-runtime-library/reference/exit-exit-exit.md)   \n [_onexit, _onexit_m](../../c-runtime-library/reference/onexit-onexit-m.md)"}