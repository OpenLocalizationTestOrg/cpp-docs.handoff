{"nodes":[{"pos":[12,42],"content":"CAtlMap Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CAtlMap Class | Microsoft Docs","pos":[0,30]}]},{"pos":[632,645],"content":"CAtlMap Class","linkify":"CAtlMap Class","nodes":[{"content":"CAtlMap Class","pos":[0,13]}]},{"content":"This class provides methods for creating and managing a map object.","pos":[646,713]},{"pos":[722,728],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[880,890],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The key element type.","pos":[901,922]},{"content":"V","pos":[929,930]},{"content":"The value element type.","pos":[934,957]},{"content":"The code used to copy or move key elements.","pos":[977,1020]},{"content":"See <bpt id=\"p1\">[</bpt>CElementTraits Class<ept id=\"p1\">](../../atl/reference/celementtraits-class.md)</ept> for more details.","pos":[1021,1110],"source":" See [CElementTraits Class](../../atl/reference/celementtraits-class.md) for more details."},{"content":"The code used to copy or move value elements.","pos":[1130,1175]},{"pos":[1184,1191],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1201,1216],"content":"Public Typedefs","linkify":"Public Typedefs","nodes":[{"content":"Public Typedefs","pos":[0,15]}]},{"content":"Name","pos":[1223,1227]},{"content":"Description","pos":[1228,1239]},{"pos":[1277,1320],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::KINARGTYPE<ept id=\"p1\">](#catlmap__kinargtype)</ept>","source":"[CAtlMap::KINARGTYPE](#catlmap__kinargtype)"},{"content":"Type used when a key is passed as an input argument","pos":[1321,1372]},{"pos":[1377,1422],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::KOUTARGTYPE<ept id=\"p1\">](#catlmap__koutargtype)</ept>","source":"[CAtlMap::KOUTARGTYPE](#catlmap__koutargtype)"},{"content":"Type used when a key is returned as an output argument.","pos":[1423,1478]},{"pos":[1483,1526],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::VINARGTYPE<ept id=\"p1\">](#catlmap__vinargtype)</ept>","source":"[CAtlMap::VINARGTYPE](#catlmap__vinargtype)"},{"content":"Type used when a value is passed as an input argument.","pos":[1527,1581]},{"pos":[1586,1631],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::VOUTARGTYPE<ept id=\"p1\">](#catlmap__voutargtype)</ept>","source":"[CAtlMap::VOUTARGTYPE](#catlmap__voutargtype)"},{"content":"Type used when a value is passed as an output argument.","pos":[1632,1687]},{"pos":[1698,1712],"content":"Public Classes","linkify":"Public Classes","nodes":[{"content":"Public Classes","pos":[0,14]}]},{"content":"Name","pos":[1719,1723]},{"content":"Description","pos":[1724,1735]},{"pos":[1773,1818],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::CPair Class<ept id=\"p1\">](#catlmap__cpair_class)</ept>","source":"[CAtlMap::CPair Class](#catlmap__cpair_class)"},{"content":"A class containing the key and value elements.","pos":[1819,1865]},{"pos":[1877,1895],"content":"CPair Data Members","linkify":"CPair Data Members","nodes":[{"content":"CPair Data Members","pos":[0,18]}]},{"content":"Name","pos":[1902,1906]},{"content":"Description","pos":[1907,1918]},{"pos":[1956,1994],"content":"<bpt id=\"p1\">[</bpt>CPair::m_key<ept id=\"p1\">](#catlmap__cpair__m_key)</ept>","source":"[CPair::m_key](#catlmap__cpair__m_key)"},{"content":"The data member storing the key element.","pos":[1995,2035]},{"pos":[2040,2082],"content":"<bpt id=\"p1\">[</bpt>CPair::m_value<ept id=\"p1\">](#catlmap__cpair__m_value)</ept>","source":"[CPair::m_value](#catlmap__cpair__m_value)"},{"content":"The data member storing the value element.","pos":[2083,2125]},{"pos":[2136,2155],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[2162,2166]},{"content":"Description","pos":[2167,2178]},{"pos":[2216,2253],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::CAtlMap<ept id=\"p1\">](#catlmap__catlmap)</ept>","source":"[CAtlMap::CAtlMap](#catlmap__catlmap)"},{"content":"The constructor.","pos":[2254,2270]},{"pos":[2275,2318],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::~CAtlMap<ept id=\"p1\">](#catlmap___dtorcatlmap)</ept>","source":"[CAtlMap::~CAtlMap](#catlmap___dtorcatlmap)"},{"content":"The destructor.","pos":[2319,2334]},{"pos":[2345,2359],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[2366,2370]},{"content":"Description","pos":[2371,2382]},{"pos":[2420,2465],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::AssertValid<ept id=\"p1\">](#catlmap__assertvalid)</ept>","source":"[CAtlMap::AssertValid](#catlmap__assertvalid)"},{"pos":[2466,2532],"content":"Call this method to cause an ASSERT if the <ph id=\"ph1\">`CAtlMap`</ph> is not valid.","source":"Call this method to cause an ASSERT if the `CAtlMap` is not valid."},{"pos":[2537,2594],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::DisableAutoRehash<ept id=\"p1\">](#catlmap__disableautorehash)</ept>","source":"[CAtlMap::DisableAutoRehash](#catlmap__disableautorehash)"},{"pos":[2595,2667],"content":"Call this method to disable automatic rehashing of the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Call this method to disable automatic rehashing of the `CAtlMap` object."},{"pos":[2672,2727],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::EnableAutoRehash<ept id=\"p1\">](#catlmap__enableautorehash)</ept>","source":"[CAtlMap::EnableAutoRehash](#catlmap__enableautorehash)"},{"pos":[2728,2799],"content":"Call this method to enable automatic rehashing of the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Call this method to enable automatic rehashing of the `CAtlMap` object."},{"pos":[2804,2837],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::GetAt<ept id=\"p1\">](#catlmap__getat)</ept>","source":"[CAtlMap::GetAt](#catlmap__getat)"},{"content":"Call this method to return the element at a specified position in the map.","pos":[2838,2912]},{"pos":[2917,2956],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::GetCount<ept id=\"p1\">](#catlmap__getcount)</ept>","source":"[CAtlMap::GetCount](#catlmap__getcount)"},{"content":"Call this method to retrieve the number of elements in the map.","pos":[2957,3020]},{"pos":[3025,3080],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::GetHashTableSize<ept id=\"p1\">](#catlmap__gethashtablesize)</ept>","source":"[CAtlMap::GetHashTableSize](#catlmap__gethashtablesize)"},{"content":"Call this method to determine the number of bins in the map's hash table.","pos":[3081,3154]},{"pos":[3159,3198],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::GetKeyAt<ept id=\"p1\">](#catlmap__getkeyat)</ept>","source":"[CAtlMap::GetKeyAt](#catlmap__getkeyat)"},{"pos":[3199,3289],"content":"Call this method to retrieve the key stored at the given position in the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Call this method to retrieve the key stored at the given position in the `CAtlMap` object."},{"pos":[3294,3331],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::GetNext<ept id=\"p1\">](#catlmap__getnext)</ept>","source":"[CAtlMap::GetNext](#catlmap__getnext)"},{"pos":[3332,3425],"content":"Call this method to obtain a pointer to the next element pair stored in the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Call this method to obtain a pointer to the next element pair stored in the `CAtlMap` object."},{"pos":[3430,3477],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::GetNextAssoc<ept id=\"p1\">](#catlmap__getnextassoc)</ept>","source":"[CAtlMap::GetNextAssoc](#catlmap__getnextassoc)"},{"content":"Gets the next element for iterating.","pos":[3478,3514]},{"pos":[3519,3562],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::GetNextKey<ept id=\"p1\">](#catlmap__getnextkey)</ept>","source":"[CAtlMap::GetNextKey](#catlmap__getnextkey)"},{"pos":[3563,3631],"content":"Call this method to retrieve the next key from the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Call this method to retrieve the next key from the `CAtlMap` object."},{"pos":[3636,3683],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::GetNextValue<ept id=\"p1\">](#catlmap__getnextvalue)</ept>","source":"[CAtlMap::GetNextValue](#catlmap__getnextvalue)"},{"pos":[3684,3749],"content":"Call this method to get the next value from the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Call this method to get the next value from the `CAtlMap` object."},{"pos":[3754,3809],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::GetStartPosition<ept id=\"p1\">](#catlmap__getstartposition)</ept>","source":"[CAtlMap::GetStartPosition](#catlmap__getstartposition)"},{"content":"Call this method to start a map iteration.","pos":[3810,3852]},{"pos":[3857,3900],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::GetValueAt<ept id=\"p1\">](#catlmap__getvalueat)</ept>","source":"[CAtlMap::GetValueAt](#catlmap__getvalueat)"},{"pos":[3901,3991],"content":"Call this method to retrieve the value stored at a given position in the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Call this method to retrieve the value stored at a given position in the `CAtlMap` object."},{"pos":[3996,4045],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::InitHashTable<ept id=\"p1\">](#catlmap__inithashtable)</ept>","source":"[CAtlMap::InitHashTable](#catlmap__inithashtable)"},{"content":"Call this method to initialize the hash table.","pos":[4046,4092]},{"pos":[4097,4134],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::IsEmpty<ept id=\"p1\">](#catlmap__isempty)</ept>","source":"[CAtlMap::IsEmpty](#catlmap__isempty)"},{"content":"Call this method to test for an empty map object.","pos":[4135,4184]},{"pos":[4189,4224],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::Lookup<ept id=\"p1\">](#catlmap__lookup)</ept>","source":"[CAtlMap::Lookup](#catlmap__lookup)"},{"pos":[4225,4292],"content":"Call this method to look up keys or values in the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Call this method to look up keys or values in the `CAtlMap` object."},{"pos":[4297,4332],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::Rehash<ept id=\"p1\">](#catlmap__rehash)</ept>","source":"[CAtlMap::Rehash](#catlmap__rehash)"},{"pos":[4333,4381],"content":"Call this method to rehash the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Call this method to rehash the `CAtlMap` object."},{"pos":[4386,4427],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::RemoveAll<ept id=\"p1\">](#catlmap__removeall)</ept>","source":"[CAtlMap::RemoveAll](#catlmap__removeall)"},{"pos":[4428,4494],"content":"Call this method to remove all elements from the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Call this method to remove all elements from the `CAtlMap` object."},{"pos":[4499,4544],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::RemoveAtPos<ept id=\"p1\">](#catlmap__removeatpos)</ept>","source":"[CAtlMap::RemoveAtPos](#catlmap__removeatpos)"},{"pos":[4545,4630],"content":"Call this method to remove the element at the given position in the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Call this method to remove the element at the given position in the `CAtlMap` object."},{"pos":[4635,4676],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::RemoveKey<ept id=\"p1\">](#catlmap__removekey)</ept>","source":"[CAtlMap::RemoveKey](#catlmap__removekey)"},{"pos":[4677,4756],"content":"Call this method to remove an element from the <ph id=\"ph1\">`CAtlMap`</ph> object, given the key.","source":"Call this method to remove an element from the `CAtlMap` object, given the key."},{"pos":[4761,4794],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::SetAt<ept id=\"p1\">](#catlmap__setat)</ept>","source":"[CAtlMap::SetAt](#catlmap__setat)"},{"content":"Call this method to insert an element pair into the map.","pos":[4795,4851]},{"pos":[4856,4907],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::SetOptimalLoad<ept id=\"p1\">](#catlmap__setoptimalload)</ept>","source":"[CAtlMap::SetOptimalLoad](#catlmap__setoptimalload)"},{"pos":[4908,4973],"content":"Call this method to set the optimal load of the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Call this method to set the optimal load of the `CAtlMap` object."},{"pos":[4978,5021],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::SetValueAt<ept id=\"p1\">](#catlmap__setvalueat)</ept>","source":"[CAtlMap::SetValueAt](#catlmap__setvalueat)"},{"pos":[5022,5110],"content":"Call this method to change the value stored at a given position in the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Call this method to change the value stored at a given position in the `CAtlMap` object."},{"pos":[5121,5137],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[5144,5148]},{"content":"Description","pos":[5149,5160]},{"pos":[5198,5260],"content":"<bpt id=\"p1\">[</bpt>CAtlMap::operator<ph id=\"ph1\">\\[</ph><ph id=\"ph2\">\\]</ph><ept id=\"p1\">](catlmap-class.md#catlmap__operator_at)</ept>","source":"[CAtlMap::operator\\[\\]](catlmap-class.md#catlmap__operator_at)"},{"pos":[5261,5309],"content":"Replaces or adds a new element to the <ph id=\"ph1\">`CAtlMap`</ph>.","source":"Replaces or adds a new element to the `CAtlMap`."},{"pos":[5320,5327],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`CAtlMap`</ph> provides support for a mapping array of any given type, managing an unordered array of key elements and their associated values.","pos":[5331,5469],"source":"`CAtlMap` provides support for a mapping array of any given type, managing an unordered array of key elements and their associated values."},{"content":"Elements (consisting of a key and a value) are stored using a hashing algorithm, allowing a large amount of data to be efficiently stored and retrieved.","pos":[5470,5622]},{"pos":[5629,5754],"content":"The <ph id=\"ph1\">`KTraits`</ph> and <ph id=\"ph2\">`VTraits`</ph> parameters are traits classes that contain any supplemental code needed to copy or move elements.","source":"The `KTraits` and `VTraits` parameters are traits classes that contain any supplemental code needed to copy or move elements."},{"content":"An alternative to <ph id=\"ph1\">`CAtlMap`</ph> is offered by the <bpt id=\"p1\">[</bpt>CRBMap<ept id=\"p1\">](../../atl/reference/crbmap-class.md)</ept> class.","pos":[5761,5859],"source":"An alternative to `CAtlMap` is offered by the [CRBMap](../../atl/reference/crbmap-class.md) class."},{"content":"<ph id=\"ph1\">`CRBMap`</ph> also stores key/value pairs, but exhibits different performance characteristics.","pos":[5860,5949],"source":"`CRBMap` also stores key/value pairs, but exhibits different performance characteristics."},{"content":"The time taken to insert an item, look up a key, or delete a key from a <ph id=\"ph1\">`CRBMap`</ph> object is of order <bpt id=\"p1\">*</bpt>log(n)<ept id=\"p1\">*</ept>, where <bpt id=\"p2\">*</bpt>n<ept id=\"p2\">*</ept> is the number of elements.","pos":[5950,6096],"source":" The time taken to insert an item, look up a key, or delete a key from a `CRBMap` object is of order *log(n)*, where *n* is the number of elements."},{"content":"For <ph id=\"ph1\">`CAtlMap`</ph>, all of these operations typically take a constant time, although worst-case scenarios might be of order <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept>.","pos":[6097,6220],"source":" For `CAtlMap`, all of these operations typically take a constant time, although worst-case scenarios might be of order *n*."},{"content":"Therefore, in a typical case, <ph id=\"ph1\">`CAtlMap`</ph> is faster.","pos":[6221,6271],"source":" Therefore, in a typical case, `CAtlMap` is faster."},{"content":"The other difference between <ph id=\"ph1\">`CRBMap`</ph> and <ph id=\"ph2\">`CAtlMap`</ph> becomes apparent when iterating through the stored elements.","pos":[6278,6390],"source":"The other difference between `CRBMap` and `CAtlMap` becomes apparent when iterating through the stored elements."},{"content":"In a <ph id=\"ph1\">`CRBMap`</ph>, the elements are visited in a sorted order.","pos":[6391,6449],"source":" In a `CRBMap`, the elements are visited in a sorted order."},{"content":"In a <ph id=\"ph1\">`CAtlMap`</ph>, the elements are not ordered, and no order can be inferred.","pos":[6450,6525],"source":" In a `CAtlMap`, the elements are not ordered, and no order can be inferred."},{"pos":[6532,6670],"content":"When a small number of elements need to be stored, consider using the <bpt id=\"p1\">[</bpt>CSimpleMap<ept id=\"p1\">](../../atl/reference/csimplemap-class.md)</ept> class instead.","source":"When a small number of elements need to be stored, consider using the [CSimpleMap](../../atl/reference/csimplemap-class.md) class instead."},{"pos":[6677,6765],"content":"For more information, see <bpt id=\"p1\">[</bpt>ATL Collection Classes<ept id=\"p1\">](../../atl/atl-collection-classes.md)</ept>.","source":"For more information, see [ATL Collection Classes](../../atl/atl-collection-classes.md)."},{"pos":[6774,6786],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[6790,6811],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlcoll.h","source":"**Header:** atlcoll.h"},{"pos":[6821,6878],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__assertvalid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::AssertValid","linkify":"<a name=\"catlmap__assertvalid\"></a>  CAtlMap::AssertValid","source":"<a name=\"catlmap__assertvalid\"></a>  CAtlMap::AssertValid"},{"pos":[6882,6955],"content":"Call this method to cause an ASSERT if the <ph id=\"ph1\">`CAtlMap`</ph> object is not valid.","source":"Call this method to cause an ASSERT if the `CAtlMap` object is not valid."},{"pos":[7004,7011],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7015,7102],"content":"In debug builds, this method will cause an ASSERT if the <ph id=\"ph1\">`CAtlMap`</ph> object is not valid.","source":"In debug builds, this method will cause an ASSERT if the `CAtlMap` object is not valid."},{"pos":[7112,7119],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7123,7181],"content":"See the example for <bpt id=\"p1\">[</bpt>CAtlMap::CAtlMap<ept id=\"p1\">](#catlmap__catlmap)</ept>.","source":"See the example for [CAtlMap::CAtlMap](#catlmap__catlmap)."},{"pos":[7191,7240],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__catlmap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::CAtlMap","linkify":"<a name=\"catlmap__catlmap\"></a>  CAtlMap::CAtlMap","source":"<a name=\"catlmap__catlmap\"></a>  CAtlMap::CAtlMap"},{"content":"The constructor.","pos":[7244,7260]},{"pos":[7445,7455],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of bins providing pointers to the stored elements.","pos":[7470,7531]},{"content":"See Remarks later in this topic for an explanation of bins.","pos":[7532,7591]},{"content":"The optimal load ratio.","pos":[7616,7639]},{"content":"The lower threshold for the load ratio.","pos":[7664,7703]},{"content":"The upper threshold for the load ratio.","pos":[7728,7767]},{"content":"The block size.","pos":[7790,7805]},{"pos":[7815,7822],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`CAtlMap`</ph> references all of its stored elements by first creating an index using a hashing algorithm on the key.","pos":[7826,7938],"source":"`CAtlMap` references all of its stored elements by first creating an index using a hashing algorithm on the key."},{"content":"This index references a \"bin\" which contains a pointer to the stored elements.","pos":[7939,8017]},{"content":"If the bin is already in use, a linked-list is created to access the subsequent elements.","pos":[8018,8107]},{"content":"Traversing a list is slower than directly accessing the correct element, and so the map structure needs to balance storage requirements against performance.","pos":[8108,8264]},{"content":"The default parameters have been chosen to give good results in most cases.","pos":[8265,8340]},{"content":"The load ratio is the ratio of the number of bins to the number of elements stored in the map object.","pos":[8347,8448]},{"content":"When the map structure is recalculated, the <bpt id=\"p1\">*</bpt>fOptimalLoad<ept id=\"p1\">*</ept> parameter value will be used to calculate the number of bins required.","pos":[8449,8578],"source":" When the map structure is recalculated, the *fOptimalLoad* parameter value will be used to calculate the number of bins required."},{"content":"This value can be changed using the <bpt id=\"p1\">[</bpt>CAtlMap::SetOptimalLoad<ept id=\"p1\">](#catlmap__setoptimalload)</ept> method.","pos":[8579,8674],"source":" This value can be changed using the [CAtlMap::SetOptimalLoad](#catlmap__setoptimalload) method."},{"pos":[8681,8821],"content":"The <ph id=\"ph1\">`fLoThreshold`</ph> parameter is the lower value that the load ratio can reach before <ph id=\"ph2\">`CAtlMap`</ph> will recalculate the optimal size of the map.","source":"The `fLoThreshold` parameter is the lower value that the load ratio can reach before `CAtlMap` will recalculate the optimal size of the map."},{"pos":[8828,8979],"content":"The <ph id=\"ph1\">`fHiThreshold`</ph> parameter is the upper value that the load ratio can reach before the <ph id=\"ph2\">`CAtlMap`</ph> object will recalculate the optimal size of the map.","source":"The `fHiThreshold` parameter is the upper value that the load ratio can reach before the `CAtlMap` object will recalculate the optimal size of the map."},{"content":"This recalculation process (known as rehashing) is enabled by default.","pos":[8986,9056]},{"content":"If you want to disable this process, perhaps when entering a lot of data at one time, call the <bpt id=\"p1\">[</bpt>CAtlMap::DisableAutoRehash<ept id=\"p1\">](#catlmap__disableautorehash)</ept> method.","pos":[9057,9217],"source":" If you want to disable this process, perhaps when entering a lot of data at one time, call the [CAtlMap::DisableAutoRehash](#catlmap__disableautorehash) method."},{"content":"Reactivate it with the <bpt id=\"p1\">[</bpt>CAtlMap::EnableAutoRehash<ept id=\"p1\">](#catlmap__enableautorehash)</ept> method.","pos":[9218,9304],"source":" Reactivate it with the [CAtlMap::EnableAutoRehash](#catlmap__enableautorehash) method."},{"content":"The <ph id=\"ph1\">`nBlockSize`</ph> parameter is a measure of the amount of memory allocated when a new element is required.","pos":[9311,9416],"source":"The `nBlockSize` parameter is a measure of the amount of memory allocated when a new element is required."},{"content":"Larger block sizes reduce calls to memory allocation routines, but use more resources.","pos":[9417,9503]},{"pos":[9510,9651],"content":"Before any data can be stored, it is necessary to initialize the hash table with a call to <bpt id=\"p1\">[</bpt>CAtlMap::InitHashTable<ept id=\"p1\">](#catlmap__inithashtable)</ept>.","source":"Before any data can be stored, it is necessary to initialize the hash table with a call to [CAtlMap::InitHashTable](#catlmap__inithashtable)."},{"pos":[9661,9668],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9672,9752],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#72<ept id=\"p2\">](../../atl/codesnippet/cpp/catlmap-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#72](../../atl/codesnippet/cpp/catlmap-class_1.cpp)]"},{"pos":[9762,9817],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap___dtorcatlmap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::~CAtlMap","linkify":"<a name=\"catlmap___dtorcatlmap\"></a>  CAtlMap::~CAtlMap","source":"<a name=\"catlmap___dtorcatlmap\"></a>  CAtlMap::~CAtlMap"},{"content":"The destructor.","pos":[9821,9836]},{"pos":[9879,9886],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Frees any allocated resources.","pos":[9890,9920]},{"pos":[9930,9987],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__cpair_class\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::CPair Class","linkify":"<a name=\"catlmap__cpair_class\"></a>  CAtlMap::CPair Class","source":"<a name=\"catlmap__cpair_class\"></a>  CAtlMap::CPair Class"},{"content":"A class containing the key and value elements.","pos":[9991,10037]},{"pos":[10092,10099],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10103,10284],"content":"This class is used by the methods <bpt id=\"p1\">[</bpt>CAtlMap::GetNext<ept id=\"p1\">](#catlmap__getnext)</ept> and <bpt id=\"p2\">[</bpt>CAtlMap::Lookup<ept id=\"p2\">](#catlmap__lookup)</ept> to access the key and value elements stored in the mapping structure.","source":"This class is used by the methods [CAtlMap::GetNext](#catlmap__getnext) and [CAtlMap::Lookup](#catlmap__lookup) to access the key and value elements stored in the mapping structure."},{"pos":[10294,10363],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__disableautorehash\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::DisableAutoRehash","linkify":"<a name=\"catlmap__disableautorehash\"></a>  CAtlMap::DisableAutoRehash","source":"<a name=\"catlmap__disableautorehash\"></a>  CAtlMap::DisableAutoRehash"},{"pos":[10367,10439],"content":"Call this method to disable automatic rehashing of the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Call this method to disable automatic rehashing of the `CAtlMap` object."},{"pos":[10496,10503],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When automatic rehashing is enabled (which it is by default), the number of bins in the hash table will automatically be recalculated if the load value (the ratio of the number of bins to the number of elements stored in the array) exceeds the maximum or minimum values specified at the time the map was created.","pos":[10507,10819]},{"content":"<ph id=\"ph1\">`DisableAutoRehash`</ph> is most useful when a large number of elements will be added to the map at once.","pos":[10826,10926],"source":"`DisableAutoRehash` is most useful when a large number of elements will be added to the map at once."},{"content":"Instead of triggering the rehashing process every time the limits are exceeded, it is more efficient to call <ph id=\"ph1\">`DisableAutoRehash`</ph>, add the elements, and finally call <bpt id=\"p1\">[</bpt>CAtlMap::EnableAutoRehash<ept id=\"p1\">](#catlmap__enableautorehash)</ept>.","pos":[10927,11148],"source":" Instead of triggering the rehashing process every time the limits are exceeded, it is more efficient to call `DisableAutoRehash`, add the elements, and finally call [CAtlMap::EnableAutoRehash](#catlmap__enableautorehash)."},{"pos":[11158,11225],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__enableautorehash\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::EnableAutoRehash","linkify":"<a name=\"catlmap__enableautorehash\"></a>  CAtlMap::EnableAutoRehash","source":"<a name=\"catlmap__enableautorehash\"></a>  CAtlMap::EnableAutoRehash"},{"pos":[11229,11300],"content":"Call this method to enable automatic rehashing of the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Call this method to enable automatic rehashing of the `CAtlMap` object."},{"pos":[11356,11363],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When automatic rehashing is enabled (which it is by default), the number of bins in the hash table will automatically be recalculated if the load value (the ratio of the number of bins to the number of elements stored in the array) exceeds the maximum or minimum values specified at the time the map is created.","pos":[11367,11678]},{"pos":[11685,11800],"content":"<bpt id=\"p1\">**</bpt>EnableAutoRefresh<ept id=\"p1\">**</ept> is most often used after a call to <bpt id=\"p2\">[</bpt>CAtlMap::DisableAutoRehash<ept id=\"p2\">](#catlmap__disableautorehash)</ept>.","source":"**EnableAutoRefresh** is most often used after a call to [CAtlMap::DisableAutoRehash](#catlmap__disableautorehash)."},{"pos":[11810,11855],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__getat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::GetAt","linkify":"<a name=\"catlmap__getat\"></a>  CAtlMap::GetAt","source":"<a name=\"catlmap__getat\"></a>  CAtlMap::GetAt"},{"content":"Call this method to return the element at a specified position in the map.","pos":[11859,11933]},{"pos":[12084,12094],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The position counter, returned by a previous call to <bpt id=\"p1\">[</bpt>CAtlMap::GetNextAssoc<ept id=\"p1\">](#catlmap__getnextassoc)</ept> or <bpt id=\"p2\">[</bpt>CAtlMap::GetStartPosition<ept id=\"p2\">](#catlmap__getstartposition)</ept>.","pos":[12107,12267],"source":" The position counter, returned by a previous call to [CAtlMap::GetNextAssoc](#catlmap__getnextassoc) or [CAtlMap::GetStartPosition](#catlmap__getstartposition)."},{"content":"Template parameter specifying the type of the map's key.","pos":[12283,12339]},{"content":"<bpt id=\"p1\">*</bpt>value<ept id=\"p1\">*</ept>","pos":[12346,12353],"source":"*value*"},{"content":"Template parameter specifying the type of the map's value.","pos":[12357,12415]},{"pos":[12425,12437],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a pointer to the current pair of key/value elements stored in the map.","pos":[12441,12519]},{"pos":[12529,12536],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12540,12613],"content":"In debug builds, an assertion error will occur if <ph id=\"ph1\">`pos`</ph> is equal to NULL.","source":"In debug builds, an assertion error will occur if `pos` is equal to NULL."},{"pos":[12623,12674],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__getcount\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::GetCount","linkify":"<a name=\"catlmap__getcount\"></a>  CAtlMap::GetCount","source":"<a name=\"catlmap__getcount\"></a>  CAtlMap::GetCount"},{"content":"Call this method to retrieve the number of elements in the map.","pos":[12678,12741]},{"pos":[12797,12809],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the number of elements in the map object.","pos":[12813,12862]},{"content":"A single element is a key/value pair.","pos":[12863,12900]},{"pos":[12910,12917],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12921,12979],"content":"See the example for <bpt id=\"p1\">[</bpt>CAtlMap::CAtlMap<ept id=\"p1\">](#catlmap__catlmap)</ept>.","source":"See the example for [CAtlMap::CAtlMap](#catlmap__catlmap)."},{"pos":[12989,13056],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__gethashtablesize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::GetHashTableSize","linkify":"<a name=\"catlmap__gethashtablesize\"></a>  CAtlMap::GetHashTableSize","source":"<a name=\"catlmap__gethashtablesize\"></a>  CAtlMap::GetHashTableSize"},{"content":"Call this method to determine the number of bins in the map's hash table.","pos":[13060,13133]},{"pos":[13195,13207],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the number of bins in the hash table.","pos":[13211,13256]},{"content":"See <bpt id=\"p1\">[</bpt>CAtlMap::CAtlMap<ept id=\"p1\">](#catlmap__catlmap)</ept> for an explanation.","pos":[13257,13318],"source":" See [CAtlMap::CAtlMap](#catlmap__catlmap) for an explanation."},{"pos":[13328,13379],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__getkeyat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::GetKeyAt","linkify":"<a name=\"catlmap__getkeyat\"></a>  CAtlMap::GetKeyAt","source":"<a name=\"catlmap__getkeyat\"></a>  CAtlMap::GetKeyAt"},{"pos":[13383,13473],"content":"Call this method to retrieve the key stored at the given position in the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Call this method to retrieve the key stored at the given position in the `CAtlMap` object."},{"pos":[13545,13555],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The position counter, returned by a previous call to <bpt id=\"p1\">[</bpt>CAtlMap::GetNextAssoc<ept id=\"p1\">](#catlmap__getnextassoc)</ept> or <bpt id=\"p2\">[</bpt>CAtlMap::GetStartPosition<ept id=\"p2\">](#catlmap__getstartposition)</ept>.","pos":[13568,13728],"source":" The position counter, returned by a previous call to [CAtlMap::GetNextAssoc](#catlmap__getnextassoc) or [CAtlMap::GetStartPosition](#catlmap__getstartposition)."},{"pos":[13738,13750],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[13754,13838],"content":"Returns a reference to the key stored at the given position in the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Returns a reference to the key stored at the given position in the `CAtlMap` object."},{"pos":[13848,13855],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13859,13917],"content":"See the example for <bpt id=\"p1\">[</bpt>CAtlMap::CAtlMap<ept id=\"p1\">](#catlmap__catlmap)</ept>.","source":"See the example for [CAtlMap::CAtlMap](#catlmap__catlmap)."},{"pos":[13927,13976],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__getnext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::GetNext","linkify":"<a name=\"catlmap__getnext\"></a>  CAtlMap::GetNext","source":"<a name=\"catlmap__getnext\"></a>  CAtlMap::GetNext"},{"pos":[13980,14073],"content":"Call this method to obtain a pointer to the next element pair stored in the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Call this method to obtain a pointer to the next element pair stored in the `CAtlMap` object."},{"pos":[14187,14197],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The position counter, returned by a previous call to <bpt id=\"p1\">[</bpt>CAtlMap::GetNextAssoc<ept id=\"p1\">](#catlmap__getnextassoc)</ept> or <bpt id=\"p2\">[</bpt>CAtlMap::GetStartPosition<ept id=\"p2\">](#catlmap__getstartposition)</ept>.","pos":[14210,14370],"source":" The position counter, returned by a previous call to [CAtlMap::GetNextAssoc](#catlmap__getnextassoc) or [CAtlMap::GetStartPosition](#catlmap__getstartposition)."},{"pos":[14380,14392],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a pointer to the next pair of key/value elements stored in the map.","pos":[14396,14471]},{"content":"The <ph id=\"ph1\">`pos`</ph> position counter is updated after each call.","pos":[14472,14526],"source":" The `pos` position counter is updated after each call."},{"content":"If the retrieved element is the last in the map, <ph id=\"ph1\">`pos`</ph> is set to NULL.","pos":[14527,14597],"source":" If the retrieved element is the last in the map, `pos` is set to NULL."},{"pos":[14607,14666],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__getnextassoc\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::GetNextAssoc","linkify":"<a name=\"catlmap__getnextassoc\"></a>  CAtlMap::GetNextAssoc","source":"<a name=\"catlmap__getnextassoc\"></a>  CAtlMap::GetNextAssoc"},{"content":"Gets the next element for iterating.","pos":[14670,14706]},{"pos":[14818,14828],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The position counter, returned by a previous call to <bpt id=\"p1\">[</bpt>CAtlMap::GetNextAssoc<ept id=\"p1\">](#catlmap__getnextassoc)</ept> or <bpt id=\"p2\">[</bpt>CAtlMap::GetStartPosition<ept id=\"p2\">](#catlmap__getstartposition)</ept>.","pos":[14841,15001],"source":" The position counter, returned by a previous call to [CAtlMap::GetNextAssoc](#catlmap__getnextassoc) or [CAtlMap::GetStartPosition](#catlmap__getstartposition)."},{"content":"Template parameter specifying the type of the map's key.","pos":[15017,15073]},{"content":"<bpt id=\"p1\">*</bpt>value<ept id=\"p1\">*</ept>","pos":[15080,15087],"source":"*value*"},{"content":"Template parameter specifying the type of the map's value.","pos":[15091,15149]},{"pos":[15159,15166],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`pos`</ph> position counter is updated after each call.","pos":[15170,15224],"source":"The `pos` position counter is updated after each call."},{"content":"If the retrieved element is the last in the map, <ph id=\"ph1\">`pos`</ph> is set to NULL.","pos":[15225,15295],"source":" If the retrieved element is the last in the map, `pos` is set to NULL."},{"pos":[15305,15360],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__getnextkey\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::GetNextKey","linkify":"<a name=\"catlmap__getnextkey\"></a>  CAtlMap::GetNextKey","source":"<a name=\"catlmap__getnextkey\"></a>  CAtlMap::GetNextKey"},{"pos":[15364,15432],"content":"Call this method to retrieve the next key from the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Call this method to retrieve the next key from the `CAtlMap` object."},{"pos":[15505,15515],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The position counter, returned by a previous call to <bpt id=\"p1\">[</bpt>CAtlMap::GetNextAssoc<ept id=\"p1\">](#catlmap__getnextassoc)</ept> or <bpt id=\"p2\">[</bpt>CAtlMap::GetStartPosition<ept id=\"p2\">](#catlmap__getstartposition)</ept>.","pos":[15528,15688],"source":" The position counter, returned by a previous call to [CAtlMap::GetNextAssoc](#catlmap__getnextassoc) or [CAtlMap::GetStartPosition](#catlmap__getstartposition)."},{"pos":[15698,15710],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a reference to the next key in the map.","pos":[15714,15761]},{"pos":[15771,15778],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Updates the current position counter, <ph id=\"ph1\">`pos`</ph>.","pos":[15782,15826],"source":"Updates the current position counter, `pos`."},{"content":"If there are no more entries in the map, the position counter is set to NULL.","pos":[15827,15904]},{"pos":[15914,15973],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__getnextvalue\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::GetNextValue","linkify":"<a name=\"catlmap__getnextvalue\"></a>  CAtlMap::GetNextValue","source":"<a name=\"catlmap__getnextvalue\"></a>  CAtlMap::GetNextValue"},{"pos":[15977,16042],"content":"Call this method to get the next value from the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Call this method to get the next value from the `CAtlMap` object."},{"pos":[16158,16168],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The position counter, returned by a previous call to <bpt id=\"p1\">[</bpt>CAtlMap::GetNextAssoc<ept id=\"p1\">](#catlmap__getnextassoc)</ept> or <bpt id=\"p2\">[</bpt>CAtlMap::GetStartPosition<ept id=\"p2\">](#catlmap__getstartposition)</ept>.","pos":[16181,16341],"source":" The position counter, returned by a previous call to [CAtlMap::GetNextAssoc](#catlmap__getnextassoc) or [CAtlMap::GetStartPosition](#catlmap__getstartposition)."},{"pos":[16351,16363],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a reference to the next value in the map.","pos":[16367,16416]},{"pos":[16426,16433],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Updates the current position counter, <ph id=\"ph1\">`pos`</ph>.","pos":[16437,16481],"source":"Updates the current position counter, `pos`."},{"content":"If there are no more entries in the map, the position counter is set to NULL.","pos":[16482,16559]},{"pos":[16569,16576],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[16580,16638],"content":"See the example for <bpt id=\"p1\">[</bpt>CAtlMap::CAtlMap<ept id=\"p1\">](#catlmap__catlmap)</ept>.","source":"See the example for [CAtlMap::CAtlMap](#catlmap__catlmap)."},{"pos":[16648,16715],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__getstartposition\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::GetStartPosition","linkify":"<a name=\"catlmap__getstartposition\"></a>  CAtlMap::GetStartPosition","source":"<a name=\"catlmap__getstartposition\"></a>  CAtlMap::GetStartPosition"},{"content":"Call this method to start a map iteration.","pos":[16719,16761]},{"pos":[16827,16839],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the start position, or NULL is returned if the map is empty.","pos":[16843,16911]},{"pos":[16921,16928],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[16932,17056],"content":"Call this method to start a map iteration by returning a <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value that can be passed to the <ph id=\"ph1\">`GetNextAssoc`</ph> method.","source":"Call this method to start a map iteration by returning a **POSITION** value that can be passed to the `GetNextAssoc` method."},{"pos":[17064,17116],"content":"[!NOTE]\n The iteration sequence is not predictable","leadings":["","> "],"nodes":[{"content":"The iteration sequence is not predictable","pos":[9,50]}]},{"pos":[17126,17133],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17137,17195],"content":"See the example for <bpt id=\"p1\">[</bpt>CAtlMap::CAtlMap<ept id=\"p1\">](#catlmap__catlmap)</ept>.","source":"See the example for [CAtlMap::CAtlMap](#catlmap__catlmap)."},{"pos":[17205,17260],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__getvalueat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::GetValueAt","linkify":"<a name=\"catlmap__getvalueat\"></a>  CAtlMap::GetValueAt","source":"<a name=\"catlmap__getvalueat\"></a>  CAtlMap::GetValueAt"},{"pos":[17264,17354],"content":"Call this method to retrieve the value stored at a given position in the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Call this method to retrieve the value stored at a given position in the `CAtlMap` object."},{"pos":[17468,17478],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The position counter, returned by a previous call to <bpt id=\"p1\">[</bpt>CAtlMap::GetNextAssoc<ept id=\"p1\">](#catlmap__getnextassoc)</ept> or <bpt id=\"p2\">[</bpt>CAtlMap::GetStartPosition<ept id=\"p2\">](#catlmap__getstartposition)</ept>.","pos":[17491,17651],"source":" The position counter, returned by a previous call to [CAtlMap::GetNextAssoc](#catlmap__getnextassoc) or [CAtlMap::GetStartPosition](#catlmap__getstartposition)."},{"pos":[17661,17673],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17677,17763],"content":"Returns a reference to the value stored at the given position in the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Returns a reference to the value stored at the given position in the `CAtlMap` object."},{"pos":[17773,17834],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__inithashtable\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::InitHashTable","linkify":"<a name=\"catlmap__inithashtable\"></a>  CAtlMap::InitHashTable","source":"<a name=\"catlmap__inithashtable\"></a>  CAtlMap::InitHashTable"},{"content":"Call this method to initialize the hash table.","pos":[17838,17884]},{"pos":[17971,17981],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of bins used by the hash table.","pos":[17996,18038]},{"content":"See <bpt id=\"p1\">[</bpt>CAtlMap::CAtlMap<ept id=\"p1\">](#catlmap__catlmap)</ept> for an explanation.","pos":[18039,18100],"source":" See [CAtlMap::CAtlMap](#catlmap__catlmap) for an explanation."},{"content":"A flag indication when memory should be allocated.","pos":[18122,18172]},{"pos":[18182,18194],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[18198,18266],"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> on successful initialization, <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> on failure.","source":"Returns **true** on successful initialization, **false** on failure."},{"pos":[18276,18283],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`InitHashTable`</ph> must be called before any elements are stored in the hash table.","pos":[18287,18367],"source":"`InitHashTable` must be called before any elements are stored in the hash table."},{"content":"If this method is not called explicitly, it will be called automatically the first time an element is added using the bin count specified by the <bpt id=\"p1\">**</bpt>CAtlMap<ept id=\"p1\">**</ept> constructor.","pos":[18369,18538],"source":"  If this method is not called explicitly, it will be called automatically the first time an element is added using the bin count specified by the **CAtlMap** constructor."},{"content":"Otherwise, the map will be initialized using the new bin count specified by the <ph id=\"ph1\">`nBins`</ph> parameter.","pos":[18540,18638],"source":"  Otherwise, the map will be initialized using the new bin count specified by the `nBins` parameter."},{"content":"If the <ph id=\"ph1\">`bAllocNow`</ph> parameter is false, the memory required by the hash table will not be allocated until it is first required.","pos":[18645,18771],"source":"If the `bAllocNow` parameter is false, the memory required by the hash table will not be allocated until it is first required."},{"content":"This can be useful if it is uncertain if the map will be used.","pos":[18772,18834]},{"pos":[18844,18851],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[18855,18913],"content":"See the example for <bpt id=\"p1\">[</bpt>CAtlMap::CAtlMap<ept id=\"p1\">](#catlmap__catlmap)</ept>.","source":"See the example for [CAtlMap::CAtlMap](#catlmap__catlmap)."},{"pos":[18923,18972],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__isempty\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::IsEmpty","linkify":"<a name=\"catlmap__isempty\"></a>  CAtlMap::IsEmpty","source":"<a name=\"catlmap__isempty\"></a>  CAtlMap::IsEmpty"},{"content":"Call this method to test for an empty map object.","pos":[18976,19025]},{"pos":[19078,19090],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19094,19152],"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the map is empty, <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> otherwise.","source":"Returns **true** if the map is empty, **false** otherwise."},{"pos":[19162,19217],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__kinargtype\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::KINARGTYPE","linkify":"<a name=\"catlmap__kinargtype\"></a>  CAtlMap::KINARGTYPE","source":"<a name=\"catlmap__kinargtype\"></a>  CAtlMap::KINARGTYPE"},{"content":"Type used when a key is passed as an input argument.","pos":[19221,19273]},{"pos":[19335,19392],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__koutargtype\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::KOUTARGTYPE","linkify":"<a name=\"catlmap__koutargtype\"></a>  CAtlMap::KOUTARGTYPE","source":"<a name=\"catlmap__koutargtype\"></a>  CAtlMap::KOUTARGTYPE"},{"content":"Type used when a key is returned as an output argument.","pos":[19396,19451]},{"pos":[19515,19562],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__lookup\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::Lookup","linkify":"<a name=\"catlmap__lookup\"></a>  CAtlMap::Lookup","source":"<a name=\"catlmap__lookup\"></a>  CAtlMap::Lookup"},{"pos":[19566,19633],"content":"Call this method to look up keys or values in the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Call this method to look up keys or values in the `CAtlMap` object."},{"pos":[19820,19830],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the key that identifies the element to be looked up.","pos":[19843,19905]},{"content":"<bpt id=\"p1\">*</bpt>value<ept id=\"p1\">*</ept>","pos":[19912,19919],"source":"*value*"},{"content":"Variable that receives the looked-up value.","pos":[19923,19966]},{"pos":[19976,19988],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The first form of the method returns true if the key is found, otherwise false.","pos":[19992,20071]},{"content":"The second and third forms return a pointer to a <bpt id=\"p1\">[</bpt>CPair<ept id=\"p1\">](#catlmap__cpair_class)</ept> which can be used as a position for calls to <bpt id=\"p2\">[</bpt>CAtlMap::GetNext<ept id=\"p2\">](#catlmap__getnext)</ept> and so on.","pos":[20072,20245],"source":" The second and third forms return a pointer to a [CPair](#catlmap__cpair_class) which can be used as a position for calls to [CAtlMap::GetNext](#catlmap__getnext) and so on."},{"pos":[20255,20262],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[20266,20394],"content":"<ph id=\"ph1\">`Lookup`</ph> uses a hashing algorithm to quickly find the map element containing a key that exactly matches the given key parameter.","source":"`Lookup` uses a hashing algorithm to quickly find the map element containing a key that exactly matches the given key parameter."},{"pos":[20404,20463],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__operator_at\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::operator <ph id=\"ph1\">\\[</ph><ph id=\"ph2\">\\]</ph>","linkify":"<a name=\"catlmap__operator_at\"></a>  CAtlMap::operator \\[\\]","source":"<a name=\"catlmap__operator_at\"></a>  CAtlMap::operator \\[\\]"},{"pos":[20467,20515],"content":"Replaces or adds a new element to the <ph id=\"ph1\">`CAtlMap`</ph>.","source":"Replaces or adds a new element to the `CAtlMap`."},{"pos":[20579,20589],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The key of the element to add or replace.","pos":[20602,20643]},{"pos":[20653,20665],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a reference to the value associated with the given key.","pos":[20669,20732]},{"pos":[20742,20749],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"If the key already exists, the element is replaced.","pos":[20753,20804]},{"content":"If the key does not exist, a new element is added.","pos":[20805,20855]},{"content":"See the example for <bpt id=\"p1\">[</bpt>CAtlMap::CAtlMap<ept id=\"p1\">](#catlmap__catlmap)</ept>.","pos":[20856,20914],"source":" See the example for [CAtlMap::CAtlMap](#catlmap__catlmap)."},{"pos":[20924,20971],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__rehash\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::Rehash","linkify":"<a name=\"catlmap__rehash\"></a>  CAtlMap::Rehash","source":"<a name=\"catlmap__rehash\"></a>  CAtlMap::Rehash"},{"pos":[20975,21023],"content":"Call this method to rehash the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Call this method to rehash the `CAtlMap` object."},{"pos":[21077,21087],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The new number of bins to use in the hash table.","pos":[21102,21150]},{"content":"See <bpt id=\"p1\">[</bpt>CAtlMap::CAtlMap<ept id=\"p1\">](#catlmap__catlmap)</ept> for an explanation.","pos":[21151,21212],"source":" See [CAtlMap::CAtlMap](#catlmap__catlmap) for an explanation."},{"pos":[21222,21229],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If <ph id=\"ph1\">`nBins`</ph> is 0, <ph id=\"ph2\">`CAtlMap`</ph> calculates a reasonable number based on the number of elements in the map and the optimal load setting.","pos":[21233,21363],"source":"If `nBins` is 0, `CAtlMap` calculates a reasonable number based on the number of elements in the map and the optimal load setting."},{"content":"Normally the rehashing process is automatic, but if <bpt id=\"p1\">[</bpt>CAtlMap::DisableAutoRehash<ept id=\"p1\">](#catlmap__disableautorehash)</ept> has been called, this method will perform the necessary resizing.","pos":[21364,21539],"source":" Normally the rehashing process is automatic, but if [CAtlMap::DisableAutoRehash](#catlmap__disableautorehash) has been called, this method will perform the necessary resizing."},{"pos":[21549,21602],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__removeall\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::RemoveAll","linkify":"<a name=\"catlmap__removeall\"></a>  CAtlMap::RemoveAll","source":"<a name=\"catlmap__removeall\"></a>  CAtlMap::RemoveAll"},{"pos":[21606,21672],"content":"Call this method to remove all elements from the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Call this method to remove all elements from the `CAtlMap` object."},{"pos":[21721,21728],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[21732,21811],"content":"Clears out the <ph id=\"ph1\">`CAtlMap`</ph> object, freeing the memory used to store the elements.","source":"Clears out the `CAtlMap` object, freeing the memory used to store the elements."},{"pos":[21821,21878],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__removeatpos\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::RemoveAtPos","linkify":"<a name=\"catlmap__removeatpos\"></a>  CAtlMap::RemoveAtPos","source":"<a name=\"catlmap__removeatpos\"></a>  CAtlMap::RemoveAtPos"},{"pos":[21882,21967],"content":"Call this method to remove the element at the given position in the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Call this method to remove the element at the given position in the `CAtlMap` object."},{"pos":[22032,22042],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The position counter, returned by a previous call to <bpt id=\"p1\">[</bpt>CAtlMap::GetNextAssoc<ept id=\"p1\">](#catlmap__getnextassoc)</ept> or <bpt id=\"p2\">[</bpt>CAtlMap::GetStartPosition<ept id=\"p2\">](#catlmap__getstartposition)</ept>.","pos":[22055,22215],"source":" The position counter, returned by a previous call to [CAtlMap::GetNextAssoc](#catlmap__getnextassoc) or [CAtlMap::GetStartPosition](#catlmap__getstartposition)."},{"pos":[22225,22232],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Removes the key/value pair stored at the specified position.","pos":[22236,22296]},{"content":"The memory used to store the element is freed.","pos":[22297,22343]},{"content":"The POSITION referenced by <ph id=\"ph1\">`pos`</ph> becomes invalid, and while the POSITION of any other elements in the map remains valid, they do not necessarily retain the same order.","pos":[22344,22511],"source":" The POSITION referenced by `pos` becomes invalid, and while the POSITION of any other elements in the map remains valid, they do not necessarily retain the same order."},{"pos":[22521,22574],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__removekey\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::RemoveKey","linkify":"<a name=\"catlmap__removekey\"></a>  CAtlMap::RemoveKey","source":"<a name=\"catlmap__removekey\"></a>  CAtlMap::RemoveKey"},{"pos":[22578,22657],"content":"Call this method to remove an element from the <ph id=\"ph1\">`CAtlMap`</ph> object, given the key.","source":"Call this method to remove an element from the `CAtlMap` object, given the key."},{"pos":[22722,22732],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The key corresponding to the element pair you want to remove.","pos":[22745,22806]},{"pos":[22816,22828],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22832,22903],"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the key is found and removed, <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> on failure.","source":"Returns **true** if the key is found and removed, **false** on failure."},{"pos":[22913,22920],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[22924,22982],"content":"See the example for <bpt id=\"p1\">[</bpt>CAtlMap::CAtlMap<ept id=\"p1\">](#catlmap__catlmap)</ept>.","source":"See the example for [CAtlMap::CAtlMap](#catlmap__catlmap)."},{"pos":[22992,23037],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__setat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::SetAt","linkify":"<a name=\"catlmap__setat\"></a>  CAtlMap::SetAt","source":"<a name=\"catlmap__setat\"></a>  CAtlMap::SetAt"},{"content":"Call this method to insert an element pair into the map.","pos":[23041,23097]},{"pos":[23179,23189],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The key value to add to the <ph id=\"ph1\">`CAtlMap`</ph> object.","pos":[23202,23247],"source":" The key value to add to the `CAtlMap` object."},{"content":"<bpt id=\"p1\">*</bpt>value<ept id=\"p1\">*</ept>","pos":[23254,23261],"source":"*value*"},{"content":"The value to add to the <ph id=\"ph1\">`CAtlMap`</ph> object.","pos":[23265,23306],"source":" The value to add to the `CAtlMap` object."},{"pos":[23316,23328],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23332,23407],"content":"Returns the position of the key/value element pair in the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Returns the position of the key/value element pair in the `CAtlMap` object."},{"pos":[23417,23424],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`SetAt`</ph> replaces an existing element if a matching key is found.","pos":[23428,23492],"source":"`SetAt` replaces an existing element if a matching key is found."},{"content":"If the key is not found, a new key/value pair is created.","pos":[23493,23550]},{"pos":[23560,23623],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__setoptimalload\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::SetOptimalLoad","linkify":"<a name=\"catlmap__setoptimalload\"></a>  CAtlMap::SetOptimalLoad","source":"<a name=\"catlmap__setoptimalload\"></a>  CAtlMap::SetOptimalLoad"},{"pos":[23627,23692],"content":"Call this method to set the optimal load of the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Call this method to set the optimal load of the `CAtlMap` object."},{"pos":[23838,23848],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The optimal load ratio.","pos":[23870,23893]},{"content":"The lower threshold for the load ratio.","pos":[23918,23957]},{"content":"The upper threshold for the load ratio.","pos":[23982,24021]},{"content":"Flag indicating if the hash table should be recalculated.","pos":[24044,24101]},{"pos":[24111,24118],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method redefines the optimal load value for the <ph id=\"ph1\">`CAtlMap`</ph> object.","pos":[24122,24192],"source":"This method redefines the optimal load value for the `CAtlMap` object."},{"content":"See <bpt id=\"p1\">[</bpt>CAtlMap::CAtlMap<ept id=\"p1\">](#catlmap__catlmap)</ept> for a discussion of the various parameters.","pos":[24193,24278],"source":" See [CAtlMap::CAtlMap](#catlmap__catlmap) for a discussion of the various parameters."},{"content":"If <ph id=\"ph1\">`bRehashNow`</ph> is true, and the number of elements is outside the minimum and maximum values, the hash table is recalculated.","pos":[24279,24405],"source":" If `bRehashNow` is true, and the number of elements is outside the minimum and maximum values, the hash table is recalculated."},{"pos":[24415,24470],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__setvalueat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::SetValueAt","linkify":"<a name=\"catlmap__setvalueat\"></a>  CAtlMap::SetValueAt","source":"<a name=\"catlmap__setvalueat\"></a>  CAtlMap::SetValueAt"},{"pos":[24474,24562],"content":"Call this method to change the value stored at a given position in the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Call this method to change the value stored at a given position in the `CAtlMap` object."},{"pos":[24643,24653],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The position counter, returned by a previous call to <bpt id=\"p1\">[</bpt>CAtlMap::GetNextAssoc<ept id=\"p1\">](#catlmap__getnextassoc)</ept> or <bpt id=\"p2\">[</bpt>CAtlMap::GetStartPosition<ept id=\"p2\">](#catlmap__getstartposition)</ept>.","pos":[24666,24826],"source":" The position counter, returned by a previous call to [CAtlMap::GetNextAssoc](#catlmap__getnextassoc) or [CAtlMap::GetStartPosition](#catlmap__getstartposition)."},{"content":"<bpt id=\"p1\">*</bpt>value<ept id=\"p1\">*</ept>","pos":[24833,24840],"source":"*value*"},{"content":"The value to add to the <ph id=\"ph1\">`CAtlMap`</ph> object.","pos":[24844,24885],"source":" The value to add to the `CAtlMap` object."},{"pos":[24895,24902],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[24906,24985],"content":"Changes the value element stored at the given position in the <ph id=\"ph1\">`CAtlMap`</ph> object.","source":"Changes the value element stored at the given position in the `CAtlMap` object."},{"pos":[24995,25050],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__vinargtype\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::VINARGTYPE","linkify":"<a name=\"catlmap__vinargtype\"></a>  CAtlMap::VINARGTYPE","source":"<a name=\"catlmap__vinargtype\"></a>  CAtlMap::VINARGTYPE"},{"content":"Type used when a value is passed as an input argument.","pos":[25054,25108]},{"pos":[25170,25227],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__voutargtype\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::VOUTARGTYPE","linkify":"<a name=\"catlmap__voutargtype\"></a>  CAtlMap::VOUTARGTYPE","source":"<a name=\"catlmap__voutargtype\"></a>  CAtlMap::VOUTARGTYPE"},{"content":"Type used when a value is passed as an output argument.","pos":[25231,25286]},{"pos":[25350,25409],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__cpair__m_key\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::CPair::m_key","linkify":"<a name=\"catlmap__cpair__m_key\"></a>  CAtlMap::CPair::m_key","source":"<a name=\"catlmap__cpair__m_key\"></a>  CAtlMap::CPair::m_key"},{"content":"The data member storing the key element.","pos":[25413,25453]},{"pos":[25497,25507],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The key element type.","pos":[25518,25539]},{"pos":[25549,25612],"content":"<bpt id=\"p1\">&lt;a name=\"catlmap__cpair__m_value\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlMap::CPair::m_value","linkify":"<a name=\"catlmap__cpair__m_value\"></a>  CAtlMap::CPair::m_value","source":"<a name=\"catlmap__cpair__m_value\"></a>  CAtlMap::CPair::m_value"},{"content":"The data member storing the value element.","pos":[25616,25658]},{"pos":[25698,25708],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>V<ept id=\"p1\">*</ept>","pos":[25712,25715],"source":"*V*"},{"content":"The value element type.","pos":[25719,25742]},{"pos":[25751,25759],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Marquee Sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept><ph id=\"ph1\"> </ph>","pos":[25763,25809],"source":"[Marquee Sample](../../visual-cpp-samples.md) "},{"content":"<bpt id=\"p1\"> [</bpt>UpdatePV Sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept><ph id=\"ph1\"> </ph>","pos":[25812,25860],"source":" [UpdatePV Sample](../../visual-cpp-samples.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Class Overview<ept id=\"p1\">](../../atl/atl-class-overview.md)</ept>","pos":[25863,25913],"source":" [Class Overview](../../atl/atl-class-overview.md)"}],"content":"---\ntitle: \"CAtlMap Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL.CAtlMap\"\n  - \"CAtlMap\"\n  - \"ATL::CAtlMap\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CAtlMap class\"\nms.assetid: 5e2fe028-8e6d-4686-93df-1433d2080ec3\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CAtlMap Class\nThis class provides methods for creating and managing a map object.  \n  \n## Syntax  \n  \n```\ntemplate <typename   K,\n    typename V, class KTraits = CElementTraits<K>, class VTraits = CElementTraits<V>>\n    class CAtlMap\n```  \n  \n#### Parameters  \n `K`  \n The key element type.  \n  \n V  \n The value element type.  \n  \n `KTraits`  \n The code used to copy or move key elements. See [CElementTraits Class](../../atl/reference/celementtraits-class.md) for more details.  \n  \n `VTraits`  \n The code used to copy or move value elements.  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAtlMap::KINARGTYPE](#catlmap__kinargtype)|Type used when a key is passed as an input argument|  \n|[CAtlMap::KOUTARGTYPE](#catlmap__koutargtype)|Type used when a key is returned as an output argument.|  \n|[CAtlMap::VINARGTYPE](#catlmap__vinargtype)|Type used when a value is passed as an input argument.|  \n|[CAtlMap::VOUTARGTYPE](#catlmap__voutargtype)|Type used when a value is passed as an output argument.|  \n  \n### Public Classes  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAtlMap::CPair Class](#catlmap__cpair_class)|A class containing the key and value elements.|  \n\n  \n### CPair Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPair::m_key](#catlmap__cpair__m_key)|The data member storing the key element.|  \n|[CPair::m_value](#catlmap__cpair__m_value)|The data member storing the value element.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAtlMap::CAtlMap](#catlmap__catlmap)|The constructor.|  \n|[CAtlMap::~CAtlMap](#catlmap___dtorcatlmap)|The destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAtlMap::AssertValid](#catlmap__assertvalid)|Call this method to cause an ASSERT if the `CAtlMap` is not valid.|  \n|[CAtlMap::DisableAutoRehash](#catlmap__disableautorehash)|Call this method to disable automatic rehashing of the `CAtlMap` object.|  \n|[CAtlMap::EnableAutoRehash](#catlmap__enableautorehash)|Call this method to enable automatic rehashing of the `CAtlMap` object.|  \n|[CAtlMap::GetAt](#catlmap__getat)|Call this method to return the element at a specified position in the map.|  \n|[CAtlMap::GetCount](#catlmap__getcount)|Call this method to retrieve the number of elements in the map.|  \n|[CAtlMap::GetHashTableSize](#catlmap__gethashtablesize)|Call this method to determine the number of bins in the map's hash table.|  \n|[CAtlMap::GetKeyAt](#catlmap__getkeyat)|Call this method to retrieve the key stored at the given position in the `CAtlMap` object.|  \n|[CAtlMap::GetNext](#catlmap__getnext)|Call this method to obtain a pointer to the next element pair stored in the `CAtlMap` object.|  \n|[CAtlMap::GetNextAssoc](#catlmap__getnextassoc)|Gets the next element for iterating.|  \n|[CAtlMap::GetNextKey](#catlmap__getnextkey)|Call this method to retrieve the next key from the `CAtlMap` object.|  \n|[CAtlMap::GetNextValue](#catlmap__getnextvalue)|Call this method to get the next value from the `CAtlMap` object.|  \n|[CAtlMap::GetStartPosition](#catlmap__getstartposition)|Call this method to start a map iteration.|  \n|[CAtlMap::GetValueAt](#catlmap__getvalueat)|Call this method to retrieve the value stored at a given position in the `CAtlMap` object.|  \n|[CAtlMap::InitHashTable](#catlmap__inithashtable)|Call this method to initialize the hash table.|  \n|[CAtlMap::IsEmpty](#catlmap__isempty)|Call this method to test for an empty map object.|  \n|[CAtlMap::Lookup](#catlmap__lookup)|Call this method to look up keys or values in the `CAtlMap` object.|  \n|[CAtlMap::Rehash](#catlmap__rehash)|Call this method to rehash the `CAtlMap` object.|  \n|[CAtlMap::RemoveAll](#catlmap__removeall)|Call this method to remove all elements from the `CAtlMap` object.|  \n|[CAtlMap::RemoveAtPos](#catlmap__removeatpos)|Call this method to remove the element at the given position in the `CAtlMap` object.|  \n|[CAtlMap::RemoveKey](#catlmap__removekey)|Call this method to remove an element from the `CAtlMap` object, given the key.|  \n|[CAtlMap::SetAt](#catlmap__setat)|Call this method to insert an element pair into the map.|  \n|[CAtlMap::SetOptimalLoad](#catlmap__setoptimalload)|Call this method to set the optimal load of the `CAtlMap` object.|  \n|[CAtlMap::SetValueAt](#catlmap__setvalueat)|Call this method to change the value stored at a given position in the `CAtlMap` object.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAtlMap::operator\\[\\]](catlmap-class.md#catlmap__operator_at)|Replaces or adds a new element to the `CAtlMap`.|  \n\n  \n## Remarks  \n `CAtlMap` provides support for a mapping array of any given type, managing an unordered array of key elements and their associated values. Elements (consisting of a key and a value) are stored using a hashing algorithm, allowing a large amount of data to be efficiently stored and retrieved.  \n  \n The `KTraits` and `VTraits` parameters are traits classes that contain any supplemental code needed to copy or move elements.  \n  \n An alternative to `CAtlMap` is offered by the [CRBMap](../../atl/reference/crbmap-class.md) class. `CRBMap` also stores key/value pairs, but exhibits different performance characteristics. The time taken to insert an item, look up a key, or delete a key from a `CRBMap` object is of order *log(n)*, where *n* is the number of elements. For `CAtlMap`, all of these operations typically take a constant time, although worst-case scenarios might be of order *n*. Therefore, in a typical case, `CAtlMap` is faster.  \n  \n The other difference between `CRBMap` and `CAtlMap` becomes apparent when iterating through the stored elements. In a `CRBMap`, the elements are visited in a sorted order. In a `CAtlMap`, the elements are not ordered, and no order can be inferred.  \n  \n When a small number of elements need to be stored, consider using the [CSimpleMap](../../atl/reference/csimplemap-class.md) class instead.  \n  \n For more information, see [ATL Collection Classes](../../atl/atl-collection-classes.md).  \n  \n## Requirements  \n **Header:** atlcoll.h  \n  \n##  <a name=\"catlmap__assertvalid\"></a>  CAtlMap::AssertValid  \n Call this method to cause an ASSERT if the `CAtlMap` object is not valid.  \n  \n```\nvoid AssertValid() const;\n```  \n  \n### Remarks  \n In debug builds, this method will cause an ASSERT if the `CAtlMap` object is not valid.  \n  \n### Example  \n See the example for [CAtlMap::CAtlMap](#catlmap__catlmap).  \n  \n##  <a name=\"catlmap__catlmap\"></a>  CAtlMap::CAtlMap  \n The constructor.  \n  \n```\nCAtlMap(\n    UINT nBins = 17,\n    float fOptimalLoad = 0.75f,\n    float fLoThreshold = 0.25f,\n    float fHiThreshold = 2.25f,\n    UINT nBlockSize = 10) throw ();\n```  \n  \n### Parameters  \n `nBins`  \n The number of bins providing pointers to the stored elements. See Remarks later in this topic for an explanation of bins.  \n  \n `fOptimalLoad`  \n The optimal load ratio.  \n  \n `fLoThreshold`  \n The lower threshold for the load ratio.  \n  \n `fHiThreshold`  \n The upper threshold for the load ratio.  \n  \n `nBlockSize`  \n The block size.  \n  \n### Remarks  \n `CAtlMap` references all of its stored elements by first creating an index using a hashing algorithm on the key. This index references a \"bin\" which contains a pointer to the stored elements. If the bin is already in use, a linked-list is created to access the subsequent elements. Traversing a list is slower than directly accessing the correct element, and so the map structure needs to balance storage requirements against performance. The default parameters have been chosen to give good results in most cases.  \n  \n The load ratio is the ratio of the number of bins to the number of elements stored in the map object. When the map structure is recalculated, the *fOptimalLoad* parameter value will be used to calculate the number of bins required. This value can be changed using the [CAtlMap::SetOptimalLoad](#catlmap__setoptimalload) method.  \n  \n The `fLoThreshold` parameter is the lower value that the load ratio can reach before `CAtlMap` will recalculate the optimal size of the map.  \n  \n The `fHiThreshold` parameter is the upper value that the load ratio can reach before the `CAtlMap` object will recalculate the optimal size of the map.  \n  \n This recalculation process (known as rehashing) is enabled by default. If you want to disable this process, perhaps when entering a lot of data at one time, call the [CAtlMap::DisableAutoRehash](#catlmap__disableautorehash) method. Reactivate it with the [CAtlMap::EnableAutoRehash](#catlmap__enableautorehash) method.  \n  \n The `nBlockSize` parameter is a measure of the amount of memory allocated when a new element is required. Larger block sizes reduce calls to memory allocation routines, but use more resources.  \n  \n Before any data can be stored, it is necessary to initialize the hash table with a call to [CAtlMap::InitHashTable](#catlmap__inithashtable).  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#72](../../atl/codesnippet/cpp/catlmap-class_1.cpp)]  \n  \n##  <a name=\"catlmap___dtorcatlmap\"></a>  CAtlMap::~CAtlMap  \n The destructor.  \n  \n```\n~CAtlMap() throw();\n```  \n  \n### Remarks  \n Frees any allocated resources.  \n  \n##  <a name=\"catlmap__cpair_class\"></a>  CAtlMap::CPair Class  \n A class containing the key and value elements.  \n  \n```\nclass CPair : public __POSITION\n```  \n  \n### Remarks  \n This class is used by the methods [CAtlMap::GetNext](#catlmap__getnext) and [CAtlMap::Lookup](#catlmap__lookup) to access the key and value elements stored in the mapping structure.  \n  \n##  <a name=\"catlmap__disableautorehash\"></a>  CAtlMap::DisableAutoRehash  \n Call this method to disable automatic rehashing of the `CAtlMap` object.  \n  \n```\nvoid DisableAutoRehash() throw();\n```  \n  \n### Remarks  \n When automatic rehashing is enabled (which it is by default), the number of bins in the hash table will automatically be recalculated if the load value (the ratio of the number of bins to the number of elements stored in the array) exceeds the maximum or minimum values specified at the time the map was created.  \n  \n `DisableAutoRehash` is most useful when a large number of elements will be added to the map at once. Instead of triggering the rehashing process every time the limits are exceeded, it is more efficient to call `DisableAutoRehash`, add the elements, and finally call [CAtlMap::EnableAutoRehash](#catlmap__enableautorehash).  \n  \n##  <a name=\"catlmap__enableautorehash\"></a>  CAtlMap::EnableAutoRehash  \n Call this method to enable automatic rehashing of the `CAtlMap` object.  \n  \n```\nvoid EnableAutoRehash() throw();\n```  \n  \n### Remarks  \n When automatic rehashing is enabled (which it is by default), the number of bins in the hash table will automatically be recalculated if the load value (the ratio of the number of bins to the number of elements stored in the array) exceeds the maximum or minimum values specified at the time the map is created.  \n  \n **EnableAutoRefresh** is most often used after a call to [CAtlMap::DisableAutoRehash](#catlmap__disableautorehash).  \n  \n##  <a name=\"catlmap__getat\"></a>  CAtlMap::GetAt  \n Call this method to return the element at a specified position in the map.  \n  \n```\nvoid GetAt(\n    POSITION pos,\n    KOUTARGTYPE key,\n    VOUTARGTYPE value) const;\n\n    CPair* GetAt(\n    POSITION& pos) throw();\n```  \n  \n### Parameters  \n `pos`  \n The position counter, returned by a previous call to [CAtlMap::GetNextAssoc](#catlmap__getnextassoc) or [CAtlMap::GetStartPosition](#catlmap__getstartposition).  \n  \n `key`  \n Template parameter specifying the type of the map's key.  \n  \n *value*  \n Template parameter specifying the type of the map's value.  \n  \n### Return Value  \n Returns a pointer to the current pair of key/value elements stored in the map.  \n  \n### Remarks  \n In debug builds, an assertion error will occur if `pos` is equal to NULL.  \n  \n##  <a name=\"catlmap__getcount\"></a>  CAtlMap::GetCount  \n Call this method to retrieve the number of elements in the map.  \n  \n```\nsize_t GetCount() const throw();\n```  \n  \n### Return Value  \n Returns the number of elements in the map object. A single element is a key/value pair.  \n  \n### Example  \n See the example for [CAtlMap::CAtlMap](#catlmap__catlmap).  \n  \n##  <a name=\"catlmap__gethashtablesize\"></a>  CAtlMap::GetHashTableSize  \n Call this method to determine the number of bins in the map's hash table.  \n  \n```\nUINT GetHashTableSize() const throw();\n```  \n  \n### Return Value  \n Returns the number of bins in the hash table. See [CAtlMap::CAtlMap](#catlmap__catlmap) for an explanation.  \n  \n##  <a name=\"catlmap__getkeyat\"></a>  CAtlMap::GetKeyAt  \n Call this method to retrieve the key stored at the given position in the `CAtlMap` object.  \n  \n```\nconst K& GetKeyAt(POSITION   pos) const throw();\n```  \n  \n### Parameters  \n `pos`  \n The position counter, returned by a previous call to [CAtlMap::GetNextAssoc](#catlmap__getnextassoc) or [CAtlMap::GetStartPosition](#catlmap__getstartposition).  \n  \n### Return Value  \n Returns a reference to the key stored at the given position in the `CAtlMap` object.  \n  \n### Example  \n See the example for [CAtlMap::CAtlMap](#catlmap__catlmap).  \n  \n##  <a name=\"catlmap__getnext\"></a>  CAtlMap::GetNext  \n Call this method to obtain a pointer to the next element pair stored in the `CAtlMap` object.  \n  \n```\nCPair* GetNext(POSITION& pos) throw();\n\nconst CPair* GetNext(POSITION& pos) const throw();\n```  \n  \n### Parameters  \n `pos`  \n The position counter, returned by a previous call to [CAtlMap::GetNextAssoc](#catlmap__getnextassoc) or [CAtlMap::GetStartPosition](#catlmap__getstartposition).  \n  \n### Return Value  \n Returns a pointer to the next pair of key/value elements stored in the map. The `pos` position counter is updated after each call. If the retrieved element is the last in the map, `pos` is set to NULL.  \n  \n##  <a name=\"catlmap__getnextassoc\"></a>  CAtlMap::GetNextAssoc  \n Gets the next element for iterating.  \n  \n```\nvoid GetNextAssoc(\n    POSITION& pos,\n    KOUTARGTYPE key,\n    VOUTARGTYPE value) const;\n```  \n  \n### Parameters  \n `pos`  \n The position counter, returned by a previous call to [CAtlMap::GetNextAssoc](#catlmap__getnextassoc) or [CAtlMap::GetStartPosition](#catlmap__getstartposition).  \n  \n `key`  \n Template parameter specifying the type of the map's key.  \n  \n *value*  \n Template parameter specifying the type of the map's value.  \n  \n### Remarks  \n The `pos` position counter is updated after each call. If the retrieved element is the last in the map, `pos` is set to NULL.  \n  \n##  <a name=\"catlmap__getnextkey\"></a>  CAtlMap::GetNextKey  \n Call this method to retrieve the next key from the `CAtlMap` object.  \n  \n```\nconst K& GetNextKey(POSITION& pos) const throw();\n```  \n  \n### Parameters  \n `pos`  \n The position counter, returned by a previous call to [CAtlMap::GetNextAssoc](#catlmap__getnextassoc) or [CAtlMap::GetStartPosition](#catlmap__getstartposition).  \n  \n### Return Value  \n Returns a reference to the next key in the map.  \n  \n### Remarks  \n Updates the current position counter, `pos`. If there are no more entries in the map, the position counter is set to NULL.  \n  \n##  <a name=\"catlmap__getnextvalue\"></a>  CAtlMap::GetNextValue  \n Call this method to get the next value from the `CAtlMap` object.  \n  \n```\nV& GetNextValue(POSITION& pos) throw();\n\nconst V& GetNextValue(POSITION& pos) const throw();\n```  \n  \n### Parameters  \n `pos`  \n The position counter, returned by a previous call to [CAtlMap::GetNextAssoc](#catlmap__getnextassoc) or [CAtlMap::GetStartPosition](#catlmap__getstartposition).  \n  \n### Return Value  \n Returns a reference to the next value in the map.  \n  \n### Remarks  \n Updates the current position counter, `pos`. If there are no more entries in the map, the position counter is set to NULL.  \n  \n### Example  \n See the example for [CAtlMap::CAtlMap](#catlmap__catlmap).  \n  \n##  <a name=\"catlmap__getstartposition\"></a>  CAtlMap::GetStartPosition  \n Call this method to start a map iteration.  \n  \n```\nPOSITION GetStartPosition() const throw();\n```  \n  \n### Return Value  \n Returns the start position, or NULL is returned if the map is empty.  \n  \n### Remarks  \n Call this method to start a map iteration by returning a **POSITION** value that can be passed to the `GetNextAssoc` method.  \n  \n> [!NOTE]\n>  The iteration sequence is not predictable  \n  \n### Example  \n See the example for [CAtlMap::CAtlMap](#catlmap__catlmap).  \n  \n##  <a name=\"catlmap__getvalueat\"></a>  CAtlMap::GetValueAt  \n Call this method to retrieve the value stored at a given position in the `CAtlMap` object.  \n  \n```\nV& GetValueAt(POSITION   pos) throw();\n\nconst V& GetValueAt(POSITION   pos) const throw();\n```  \n  \n### Parameters  \n `pos`  \n The position counter, returned by a previous call to [CAtlMap::GetNextAssoc](#catlmap__getnextassoc) or [CAtlMap::GetStartPosition](#catlmap__getstartposition).  \n  \n### Return Value  \n Returns a reference to the value stored at the given position in the `CAtlMap` object.  \n  \n##  <a name=\"catlmap__inithashtable\"></a>  CAtlMap::InitHashTable  \n Call this method to initialize the hash table.  \n  \n```\nbool InitHashTable(\n    UINT nBins,\n    bool bAllocNow = true);\n```  \n  \n### Parameters  \n `nBins`  \n The number of bins used by the hash table. See [CAtlMap::CAtlMap](#catlmap__catlmap) for an explanation.  \n  \n `bAllocNow`  \n A flag indication when memory should be allocated.  \n  \n### Return Value  \n Returns **true** on successful initialization, **false** on failure.  \n  \n### Remarks  \n `InitHashTable` must be called before any elements are stored in the hash table.  If this method is not called explicitly, it will be called automatically the first time an element is added using the bin count specified by the **CAtlMap** constructor.  Otherwise, the map will be initialized using the new bin count specified by the `nBins` parameter.  \n  \n If the `bAllocNow` parameter is false, the memory required by the hash table will not be allocated until it is first required. This can be useful if it is uncertain if the map will be used.  \n  \n### Example  \n See the example for [CAtlMap::CAtlMap](#catlmap__catlmap).  \n  \n##  <a name=\"catlmap__isempty\"></a>  CAtlMap::IsEmpty  \n Call this method to test for an empty map object.  \n  \n```\nbool IsEmpty() const throw();\n```  \n  \n### Return Value  \n Returns **true** if the map is empty, **false** otherwise.  \n  \n##  <a name=\"catlmap__kinargtype\"></a>  CAtlMap::KINARGTYPE  \n Type used when a key is passed as an input argument.  \n  \n```\ntypedef KTraits::INARGTYPE KINARGTYPE;\n```  \n  \n##  <a name=\"catlmap__koutargtype\"></a>  CAtlMap::KOUTARGTYPE  \n Type used when a key is returned as an output argument.  \n  \n```\ntypedef KTraits::OUTARGTYPE KOUTARGTYPE;\n```  \n  \n##  <a name=\"catlmap__lookup\"></a>  CAtlMap::Lookup  \n Call this method to look up keys or values in the `CAtlMap` object.  \n  \n```\nbool Lookup(\n    KINARGTYPE key,\n    VOUTARGTYPE value) const;\n\nconst CPair* Lookup(\n    KINARGTYPE key) const throw();\nCPair* Lookup(\n    KINARGTYPE key) throw();\n```  \n  \n### Parameters  \n `key`  \n Specifies the key that identifies the element to be looked up.  \n  \n *value*  \n Variable that receives the looked-up value.  \n  \n### Return Value  \n The first form of the method returns true if the key is found, otherwise false. The second and third forms return a pointer to a [CPair](#catlmap__cpair_class) which can be used as a position for calls to [CAtlMap::GetNext](#catlmap__getnext) and so on.  \n  \n### Remarks  \n `Lookup` uses a hashing algorithm to quickly find the map element containing a key that exactly matches the given key parameter.  \n  \n##  <a name=\"catlmap__operator_at\"></a>  CAtlMap::operator \\[\\]  \n Replaces or adds a new element to the `CAtlMap`.  \n  \n```\nV& operator[](kinargtype   key) throw();\n```  \n  \n### Parameters  \n `key`  \n The key of the element to add or replace.  \n  \n### Return Value  \n Returns a reference to the value associated with the given key.  \n  \n### Example  \n If the key already exists, the element is replaced. If the key does not exist, a new element is added. See the example for [CAtlMap::CAtlMap](#catlmap__catlmap).  \n  \n##  <a name=\"catlmap__rehash\"></a>  CAtlMap::Rehash  \n Call this method to rehash the `CAtlMap` object.  \n  \n```\nvoid Rehash(UINT   nBins = 0);\n```  \n  \n### Parameters  \n `nBins`  \n The new number of bins to use in the hash table. See [CAtlMap::CAtlMap](#catlmap__catlmap) for an explanation.  \n  \n### Remarks  \n If `nBins` is 0, `CAtlMap` calculates a reasonable number based on the number of elements in the map and the optimal load setting. Normally the rehashing process is automatic, but if [CAtlMap::DisableAutoRehash](#catlmap__disableautorehash) has been called, this method will perform the necessary resizing.  \n  \n##  <a name=\"catlmap__removeall\"></a>  CAtlMap::RemoveAll  \n Call this method to remove all elements from the `CAtlMap` object.  \n  \n```\nvoid RemoveAll() throw();\n```  \n  \n### Remarks  \n Clears out the `CAtlMap` object, freeing the memory used to store the elements.  \n  \n##  <a name=\"catlmap__removeatpos\"></a>  CAtlMap::RemoveAtPos  \n Call this method to remove the element at the given position in the `CAtlMap` object.  \n  \n```\nvoid RemoveAtPos(POSITION   pos) throw();\n```  \n  \n### Parameters  \n `pos`  \n The position counter, returned by a previous call to [CAtlMap::GetNextAssoc](#catlmap__getnextassoc) or [CAtlMap::GetStartPosition](#catlmap__getstartposition).  \n  \n### Remarks  \n Removes the key/value pair stored at the specified position. The memory used to store the element is freed. The POSITION referenced by `pos` becomes invalid, and while the POSITION of any other elements in the map remains valid, they do not necessarily retain the same order.  \n  \n##  <a name=\"catlmap__removekey\"></a>  CAtlMap::RemoveKey  \n Call this method to remove an element from the `CAtlMap` object, given the key.  \n  \n```\nbool RemoveKey(KINARGTYPE   key) throw();\n```  \n  \n### Parameters  \n `key`  \n The key corresponding to the element pair you want to remove.  \n  \n### Return Value  \n Returns **true** if the key is found and removed, **false** on failure.  \n  \n### Example  \n See the example for [CAtlMap::CAtlMap](#catlmap__catlmap).  \n  \n##  <a name=\"catlmap__setat\"></a>  CAtlMap::SetAt  \n Call this method to insert an element pair into the map.  \n  \n```\nPOSITION SetAt(\n    KINARGTYPE key,\n    VINARGTYPE value);\n```  \n  \n### Parameters  \n `key`  \n The key value to add to the `CAtlMap` object.  \n  \n *value*  \n The value to add to the `CAtlMap` object.  \n  \n### Return Value  \n Returns the position of the key/value element pair in the `CAtlMap` object.  \n  \n### Remarks  \n `SetAt` replaces an existing element if a matching key is found. If the key is not found, a new key/value pair is created.  \n  \n##  <a name=\"catlmap__setoptimalload\"></a>  CAtlMap::SetOptimalLoad  \n Call this method to set the optimal load of the `CAtlMap` object.  \n  \n```\nvoid SetOptimalLoad(\n    float fOptimalLoad,\n    float fLoThreshold,\n    float fHiThreshold,\n    bool bRehashNow = false);\n```  \n  \n### Parameters  \n `fOptimalLoad`  \n The optimal load ratio.  \n  \n `fLoThreshold`  \n The lower threshold for the load ratio.  \n  \n `fHiThreshold`  \n The upper threshold for the load ratio.  \n  \n `bRehashNow`  \n Flag indicating if the hash table should be recalculated.  \n  \n### Remarks  \n This method redefines the optimal load value for the `CAtlMap` object. See [CAtlMap::CAtlMap](#catlmap__catlmap) for a discussion of the various parameters. If `bRehashNow` is true, and the number of elements is outside the minimum and maximum values, the hash table is recalculated.  \n  \n##  <a name=\"catlmap__setvalueat\"></a>  CAtlMap::SetValueAt  \n Call this method to change the value stored at a given position in the `CAtlMap` object.  \n  \n```\nvoid SetValueAt(\n    POSITION pos,\n    VINARGTYPE value);\n```  \n  \n### Parameters  \n `pos`  \n The position counter, returned by a previous call to [CAtlMap::GetNextAssoc](#catlmap__getnextassoc) or [CAtlMap::GetStartPosition](#catlmap__getstartposition).  \n  \n *value*  \n The value to add to the `CAtlMap` object.  \n  \n### Remarks  \n Changes the value element stored at the given position in the `CAtlMap` object.  \n  \n##  <a name=\"catlmap__vinargtype\"></a>  CAtlMap::VINARGTYPE  \n Type used when a value is passed as an input argument.  \n  \n```\ntypedef VTraits::INARGTYPE VINARGTYPE;\n```  \n  \n##  <a name=\"catlmap__voutargtype\"></a>  CAtlMap::VOUTARGTYPE  \n Type used when a value is passed as an output argument.  \n  \n```\ntypedef VTraits::OUTARGTYPE VOUTARGTYPE;\n```  \n  \n##  <a name=\"catlmap__cpair__m_key\"></a>  CAtlMap::CPair::m_key  \n The data member storing the key element.  \n  \n```\nconst K\n    m_key;\n```    \n  \n### Parameters  \n `K`  \n The key element type.  \n  \n##  <a name=\"catlmap__cpair__m_value\"></a>  CAtlMap::CPair::m_value  \n The data member storing the value element.  \n  \n```\nV\n    m_value;\n```    \n  \n### Parameters  \n *V*  \n The value element type.  \n  \n## See Also  \n [Marquee Sample](../../visual-cpp-samples.md)   \n [UpdatePV Sample](../../visual-cpp-samples.md)   \n [Class Overview](../../atl/atl-class-overview.md)\n"}