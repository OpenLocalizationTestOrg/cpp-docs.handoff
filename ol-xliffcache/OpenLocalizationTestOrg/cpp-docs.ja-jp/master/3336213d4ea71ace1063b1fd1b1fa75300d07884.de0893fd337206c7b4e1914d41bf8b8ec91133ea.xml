{"nodes":[{"pos":[12,60],"content":"goto and Labeled Statements (C) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"goto and Labeled Statements (C) | Microsoft Docs","pos":[0,48]}]},{"content":"goto and Labeled Statements (C)","pos":[668,699]},{"content":"The <ph id=\"ph1\">`goto`</ph> statement transfers control to a label.","pos":[700,750],"source":"The `goto` statement transfers control to a label."},{"content":"The given label must reside in the same function and can appear before only one statement in the same function.","pos":[751,862]},{"content":"Syntax","pos":[871,877]},{"content":"<bpt id=\"p1\">*</bpt>statement<ept id=\"p1\">*</ept>:","pos":[881,893],"source":"*statement*:"},{"content":"labeled-statement","pos":[898,915]},{"content":"jump-statement","pos":[924,938]},{"content":"<bpt id=\"p1\">*</bpt>jump-statement<ept id=\"p1\">*</ept>:","pos":[946,963],"source":"*jump-statement*:"},{"content":"<bpt id=\"p1\"> **</bpt>goto<ept id=\"p1\">**</ept>  <bpt id=\"p2\">*</bpt>identifier<ept id=\"p2\">*</ept>  <bpt id=\"p3\">**</bpt>;<ept id=\"p3\">**</ept>","pos":[966,996],"source":" **goto**  *identifier*  **;**"},{"content":"<bpt id=\"p1\">*</bpt>labeled-statement<ept id=\"p1\">*</ept>:","pos":[1003,1023],"source":"*labeled-statement*:"},{"content":"<bpt id=\"p1\"> *</bpt>identifier<ept id=\"p1\">*</ept>  <bpt id=\"p2\">**</bpt>:<ept id=\"p2\">**</ept>  <bpt id=\"p3\">*</bpt>statement<ept id=\"p3\">*</ept>","pos":[1026,1059],"source":" *identifier*  **:**  *statement*"},{"pos":[1066,1208],"content":"A statement label is meaningful only to a <ph id=\"ph1\">`goto`</ph> statement; in any other context, a labeled statement is executed without regard to the label.","source":"A statement label is meaningful only to a `goto` statement; in any other context, a labeled statement is executed without regard to the label."},{"content":"A <bpt id=\"p1\">*</bpt>jump-statement<ept id=\"p1\">*</ept> must reside in the same function and can appear before only one statement in the same function.","pos":[1215,1329],"source":"A *jump-statement* must reside in the same function and can appear before only one statement in the same function."},{"content":"The set of <bpt id=\"p1\">*</bpt>identifier<ept id=\"p1\">*</ept> names following a <ph id=\"ph1\">`goto`</ph> has its own name space so the names do not interfere with other identifiers.","pos":[1330,1455],"source":" The set of *identifier* names following a `goto` has its own name space so the names do not interfere with other identifiers."},{"content":"Labels cannot be redeclared.","pos":[1456,1484]},{"content":"See <bpt id=\"p1\">[</bpt>Name Spaces<ept id=\"p1\">](../c-language/name-spaces.md)</ept> for more information.","pos":[1485,1554],"source":" See [Name Spaces](../c-language/name-spaces.md) for more information."},{"content":"It is good programming style to use the <bpt id=\"p1\">**</bpt>break<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>continue<ept id=\"p2\">**</ept>, and <ph id=\"ph1\">`return`</ph> statement in preference to <ph id=\"ph2\">`goto`</ph> whenever possible.","pos":[1561,1691],"source":"It is good programming style to use the **break**, **continue**, and `return` statement in preference to `goto` whenever possible."},{"content":"Since the <bpt id=\"p1\">**</bpt>break<ept id=\"p1\">**</ept> statement only exits from one level of the loop, a <ph id=\"ph1\">`goto`</ph> may be necessary for exiting a loop from within a deeply nested loop.","pos":[1692,1839],"source":" Since the **break** statement only exits from one level of the loop, a `goto` may be necessary for exiting a loop from within a deeply nested loop."},{"pos":[1846,1893],"content":"This example demonstrates the <ph id=\"ph1\">`goto`</ph> statement:","source":"This example demonstrates the `goto` statement:"},{"pos":[2428,2528],"content":"In this example, a <ph id=\"ph1\">`goto`</ph> statement transfers control to the point labeled <ph id=\"ph2\">`stop`</ph> when <ph id=\"ph3\">`i`</ph> equals 5.","source":"In this example, a `goto` statement transfers control to the point labeled `stop` when `i` equals 5."},{"content":"See Also","pos":[2537,2545]},{"content":"Statements","pos":[2550,2560]}],"content":"---\ntitle: \"goto and Labeled Statements (C) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"goto\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"labeled statement\"\n  - \"statements, labeled\"\n  - \"goto keyword [C]\"\nms.assetid: 3d0473dc-4b18-4fcc-9616-31a38499d7d7\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# goto and Labeled Statements (C)\nThe `goto` statement transfers control to a label. The given label must reside in the same function and can appear before only one statement in the same function.  \n  \n## Syntax  \n *statement*:  \n *labeled-statement*  \n  \n *jump-statement*  \n  \n *jump-statement*:  \n **goto**  *identifier*  **;**  \n  \n *labeled-statement*:  \n *identifier*  **:**  *statement*  \n  \n A statement label is meaningful only to a `goto` statement; in any other context, a labeled statement is executed without regard to the label.  \n  \n A *jump-statement* must reside in the same function and can appear before only one statement in the same function. The set of *identifier* names following a `goto` has its own name space so the names do not interfere with other identifiers. Labels cannot be redeclared. See [Name Spaces](../c-language/name-spaces.md) for more information.  \n  \n It is good programming style to use the **break**, **continue**, and `return` statement in preference to `goto` whenever possible. Since the **break** statement only exits from one level of the loop, a `goto` may be necessary for exiting a loop from within a deeply nested loop.  \n  \n This example demonstrates the `goto` statement:  \n  \n```  \n// goto.c  \n#include <stdio.h>  \n  \nint main()  \n{  \n    int i, j;  \n  \n    for ( i = 0; i < 10; i++ )  \n    {  \n        printf_s( \"Outer loop executing. i = %d\\n\", i );  \n        for ( j = 0; j < 3; j++ )  \n        {  \n            printf_s( \" Inner loop executing. j = %d\\n\", j );  \n            if ( i == 5 )  \n                goto stop;  \n        }  \n    }  \n  \n    /* This message does not print: */  \n    printf_s( \"Loop exited. i = %d\\n\", i );  \n  \n    stop: printf_s( \"Jumped to stop. i = %d\\n\", i );  \n}  \n```  \n  \n In this example, a `goto` statement transfers control to the point labeled `stop` when `i` equals 5.  \n  \n## See Also  \n [Statements](../c-language/statements-c.md)"}