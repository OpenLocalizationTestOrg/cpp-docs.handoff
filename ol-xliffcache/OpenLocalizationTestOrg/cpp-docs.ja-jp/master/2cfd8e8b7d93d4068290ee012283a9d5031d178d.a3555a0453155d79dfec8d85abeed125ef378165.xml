{"nodes":[{"pos":[12,41],"content":"_getdiskfree | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_getdiskfree | Microsoft Docs","pos":[0,29]}]},{"pos":[1036,1048],"content":"_getdiskfree","linkify":"_getdiskfree","nodes":[{"content":"_getdiskfree","pos":[0,12]}]},{"pos":[1049,1123],"content":"Uses information about a disk drive to populate a <ph id=\"ph1\">`_diskfree_t`</ph> structure.","source":"Uses information about a disk drive to populate a `_diskfree_t` structure."},{"pos":[1131,1391],"content":"[!IMPORTANT]\n This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[13,258],"nodes":[{"content":"This API cannot be used in applications that execute in the <ph id=\"ph1\">[!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]</ph>.","pos":[1,117],"source":" This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[118,245],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"pos":[1400,1406],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1519,1529],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`drive`</ph>","pos":[1533,1545],"source":"[in] `drive`"},{"content":"The disk drive for which you want information.","pos":[1549,1595]},{"content":"[out] <ph id=\"ph1\">`driveinfo`</ph>","pos":[1602,1619],"source":"[out] `driveinfo`"},{"content":"A <ph id=\"ph1\">`_diskfree_t`</ph> structure that will be populated with information about the drive.","pos":[1623,1705],"source":" A `_diskfree_t` structure that will be populated with information about the drive."},{"pos":[1714,1726],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If the function succeeds, the return value is zero.","pos":[1730,1781]},{"content":"If the function fails, the return value is the error code.","pos":[1782,1840]},{"content":"The value <ph id=\"ph1\">`errno`</ph> is set for any errors that are returned by the operating system.","pos":[1841,1923],"source":" The value `errno` is set for any errors that are returned by the operating system."},{"content":"For more information about error conditions that are indicated by <ph id=\"ph1\">`errno`</ph>, see <bpt id=\"p1\">[</bpt>errno Constants<ept id=\"p1\">](../../c-runtime-library/errno-constants.md)</ept>.","pos":[1924,2065],"source":" For more information about error conditions that are indicated by `errno`, see [errno Constants](../../c-runtime-library/errno-constants.md)."},{"pos":[2074,2081],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2085,2136],"content":"The <ph id=\"ph1\">`_diskfree_t`</ph> structure is defined in Direct.h.","source":"The `_diskfree_t` structure is defined in Direct.h."},{"content":"This function validates its parameters.","pos":[2318,2357]},{"content":"If the <ph id=\"ph1\">`driveinfo`</ph> pointer is <ph id=\"ph2\">`NULL`</ph> or <ph id=\"ph3\">`drive`</ph> specifies an invalid drive, this function invokes an invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2358,2574],"source":" If the `driveinfo` pointer is `NULL` or `drive` specifies an invalid drive, this function invokes an invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, the function returns <ph id=\"ph1\">`EINVAL`</ph> and sets <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`EINVAL`</ph>.","pos":[2575,2671],"source":" If execution is allowed to continue, the function returns `EINVAL` and sets `errno` to `EINVAL`."},{"content":"Valid drives range from 0 to 26.","pos":[2672,2704]},{"content":"A <ph id=\"ph1\">`drive`</ph> value of 0 specifies the current drive; thereafter, numbers map to letters of the English alphabet such that 1 indicates drive A, 3 indicates drive C, and so on.","pos":[2705,2876],"source":" A `drive` value of 0 specifies the current drive; thereafter, numbers map to letters of the English alphabet such that 1 indicates drive A, 3 indicates drive C, and so on."},{"content":"The total number of clusters, both used and available, on the disk.","pos":[2903,2970]},{"content":"The number of unused clusters on the disk.","pos":[2997,3039]},{"content":"The number of sectors in each cluster.","pos":[3071,3109]},{"content":"The size of each sector in bytes.","pos":[3138,3171]},{"pos":[3180,3192],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[3199,3206]},{"content":"Required header","pos":[3207,3222]},{"content":"<ph id=\"ph1\">\\&lt;</ph>direct.h&gt;","pos":[3282,3293],"source":"\\<direct.h>"},{"pos":[3301,3399],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[3408,3415],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6526,6551],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[6555,6570]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[6571,6618],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[6619,6744],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[6753,6761],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[6765,6830],"content":"<bpt id=\"p1\">[</bpt>Directory Control<ept id=\"p1\">](../../c-runtime-library/directory-control.md)</ept>","source":"[Directory Control](../../c-runtime-library/directory-control.md)"}],"content":"---\ntitle: \"_getdiskfree | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_getdiskfree\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-filesystem-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"getdiskfree\"\n  - \"_getdiskfree\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"diskfree_t type\"\n  - \"_getdiskfree function\"\n  - \"_diskfree_t type\"\n  - \"disk size\"\n  - \"getdiskfree function\"\nms.assetid: 47a3f6cf-4816-452a-8f3d-1c3ae02a0f2a\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _getdiskfree\nUses information about a disk drive to populate a `_diskfree_t` structure.  \n  \n> [!IMPORTANT]\n>  This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \nunsigned _getdiskfree(  \n   unsigned drive,  \n   struct _diskfree_t * driveinfo  \n);  \n```  \n  \n#### Parameters  \n [in] `drive`  \n The disk drive for which you want information.  \n  \n [out] `driveinfo`  \n A `_diskfree_t` structure that will be populated with information about the drive.  \n  \n## Return Value  \n If the function succeeds, the return value is zero. If the function fails, the return value is the error code. The value `errno` is set for any errors that are returned by the operating system. For more information about error conditions that are indicated by `errno`, see [errno Constants](../../c-runtime-library/errno-constants.md).  \n  \n## Remarks  \n The `_diskfree_t` structure is defined in Direct.h.  \n  \n```  \nstruct _diskfree_t {   \n   unsigned total_clusters;   \n   unsigned avail_clusters;   \n   unsigned sectors_per_cluster;   \n   unsigned bytes_per_sector;   \n};  \n```  \n  \n This function validates its parameters. If the `driveinfo` pointer is `NULL` or `drive` specifies an invalid drive, this function invokes an invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, the function returns `EINVAL` and sets `errno` to `EINVAL`. Valid drives range from 0 to 26. A `drive` value of 0 specifies the current drive; thereafter, numbers map to letters of the English alphabet such that 1 indicates drive A, 3 indicates drive C, and so on.  \n  \n `total_clusters`  \n The total number of clusters, both used and available, on the disk.  \n  \n `avail_clusters`  \n The number of unused clusters on the disk.  \n  \n `sectors_per_cluster`  \n The number of sectors in each cluster.  \n  \n `bytes_per_sector`  \n The size of each sector in bytes.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_getdiskfree`|\\<direct.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n  \n      // crt_getdiskfree.c  \n// compile with: /c  \n#include <windows.h>  \n#include <direct.h>  \n#include <stdio.h>  \n#include <tchar.h>  \n  \nTCHAR   g_szBorder[] = _T(\"======================================================================\\n\");  \nTCHAR   g_szTitle1[] = _T(\"|DRIVE|TOTAL CLUSTERS|AVAIL CLUSTERS|SECTORS / CLUSTER|BYTES / SECTOR|\\n\");  \nTCHAR   g_szTitle2[] = _T(\"|=====|==============|==============|=================|==============|\\n\");  \nTCHAR   g_szLine[]   = _T(\"|  A: |              |              |                 |              |\\n\");  \n  \nvoid utoiRightJustified(TCHAR* szLeft, TCHAR* szRight, unsigned uVal);  \n  \nint main(int argc, char* argv[]) {  \n   TCHAR szMsg[4200];  \n   struct _diskfree_t df = {0};  \n   ULONG uDriveMask = _getdrives();  \n   unsigned uErr, uLen, uDrive;  \n  \n   printf(g_szBorder);  \n   printf(g_szTitle1);  \n   printf(g_szTitle2);  \n  \n   for (uDrive=1; uDrive<=26; ++uDrive) {  \n      if (uDriveMask & 1) {  \n         uErr = _getdiskfree(uDrive, &df);  \n         memcpy(szMsg, g_szLine, sizeof(g_szLine));  \n         szMsg[3] = uDrive + 'A' - 1;  \n  \n         if (uErr == 0) {  \n            utoiRightJustified(szMsg+8,  szMsg+19, df.total_clusters);  \n            utoiRightJustified(szMsg+23, szMsg+34, df.avail_clusters);  \n            utoiRightJustified(szMsg+38, szMsg+52, df.sectors_per_cluster);  \n            utoiRightJustified(szMsg+56, szMsg+67, df.bytes_per_sector);  \n         }  \n         else {  \n            uLen = FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM, NULL,  \n                            uErr, 0, szMsg+8, 4100, NULL);  \n            szMsg[uLen+6] = ' ';  \n            szMsg[uLen+7] = ' ';  \n            szMsg[uLen+8] = ' ';  \n         }  \n  \n         printf(szMsg);  \n      }  \n  \n      uDriveMask >>= 1;  \n   }  \n  \n   printf(g_szBorder);  \n}  \n  \nvoid utoiRightJustified(TCHAR* szLeft, TCHAR* szRight, unsigned uVal) {  \n   TCHAR* szCur = szRight;  \n   int nComma = 0;  \n  \n   if (uVal) {  \n      while (uVal && (szCur >= szLeft)) {  \n         if   (nComma == 3) {  \n            *szCur = ',';  \n            nComma = 0;  \n         }  \n         else {  \n            *szCur = (uVal % 10) | 0x30;  \n            uVal /= 10;  \n            ++nComma;  \n         }  \n  \n         --szCur;  \n      }  \n   }  \n   else {  \n      *szCur = '0';  \n      --szCur;  \n   }  \n  \n   if (uVal) {  \n      szCur = szLeft;  \n  \n      while   (szCur <= szRight) {  \n         *szCur = '*';  \n         ++szCur;  \n      }  \n   }  \n}  \n```  \n  \n```Output  \n======================================================================  \n|DRIVE|TOTAL CLUSTERS|AVAIL CLUSTERS|SECTORS / CLUSTER|BYTES / SECTOR|  \n|=====|==============|==============|=================|==============|  \n|  A: | The device is not ready.    |                 |              |  \n|  C: |    4,721,093 |    3,778,303 |               8 |          512 |  \n|  D: |    1,956,097 |    1,800,761 |               8 |          512 |  \n|  E: | The device is not ready.    |                 |              |  \n======================================================================  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Directory Control](../../c-runtime-library/directory-control.md)"}