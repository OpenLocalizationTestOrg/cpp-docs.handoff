{"nodes":[{"pos":[12,42],"content":"_set_new_mode | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_set_new_mode | Microsoft Docs","pos":[0,30]}]},{"pos":[995,1008],"content":"_set_new_mode","linkify":"_set_new_mode","nodes":[{"content":"_set_new_mode","pos":[0,13]}]},{"pos":[1009,1046],"content":"Sets a new handler mode for <ph id=\"ph1\">`malloc`</ph>.","source":"Sets a new handler mode for `malloc`."},{"pos":[1055,1061],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1138,1148],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"New handler mode for <ph id=\"ph1\">`malloc`</ph>; valid value is 0 or 1.","pos":[1172,1225],"source":" New handler mode for `malloc`; valid value is 0 or 1."},{"pos":[1234,1246],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the previous handler mode set for <ph id=\"ph1\">`malloc`</ph>.","pos":[1250,1301],"source":"Returns the previous handler mode set for `malloc`."},{"content":"A return value of 1 indicates that, on failure to allocate memory, <ph id=\"ph1\">`malloc`</ph> previously called the new handler routine; a return value of 0 indicates that it did not.","pos":[1302,1467],"source":" A return value of 1 indicates that, on failure to allocate memory, `malloc` previously called the new handler routine; a return value of 0 indicates that it did not."},{"content":"If the <ph id=\"ph1\">`newhandlermode`</ph> argument does not equal 0 or 1, returns –1.","pos":[1468,1535],"source":" If the `newhandlermode` argument does not equal 0 or 1, returns –1."},{"pos":[1544,1551],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The C++ <ph id=\"ph1\">`_set_new_mode`</ph> function sets the new handler mode for <bpt id=\"p1\">[</bpt>malloc<ept id=\"p1\">](../../c-runtime-library/reference/malloc.md)</ept>.","pos":[1555,1672],"source":"The C++ `_set_new_mode` function sets the new handler mode for [malloc](../../c-runtime-library/reference/malloc.md)."},{"content":"The new handler mode indicates whether, on failure, <ph id=\"ph1\">`malloc`</ph> is to call the new handler routine as set by <bpt id=\"p1\">[</bpt>_set_new_handler<ept id=\"p1\">](../../c-runtime-library/reference/set-new-handler.md)</ept>.","pos":[1673,1852],"source":" The new handler mode indicates whether, on failure, `malloc` is to call the new handler routine as set by [_set_new_handler](../../c-runtime-library/reference/set-new-handler.md)."},{"content":"By default, <ph id=\"ph1\">`malloc`</ph> does not call the new handler routine on failure to allocate memory.","pos":[1853,1942],"source":" By default, `malloc` does not call the new handler routine on failure to allocate memory."},{"content":"You can override this default behavior so that, when <ph id=\"ph1\">`malloc`</ph> fails to allocate memory, <ph id=\"ph2\">`malloc`</ph> calls the new handler routine in the same way that the <ph id=\"ph3\">`new`</ph> operator does when it fails for the same reason.","pos":[1943,2149],"source":" You can override this default behavior so that, when `malloc` fails to allocate memory, `malloc` calls the new handler routine in the same way that the `new` operator does when it fails for the same reason."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>new<ept id=\"p1\">](../../cpp/new-operator-cpp.md)</ept> and <bpt id=\"p2\">[</bpt>delete<ept id=\"p2\">](../../cpp/delete-operator-cpp.md)</ept> operators in the <bpt id=\"p3\">*</bpt>C++ Language Reference<ept id=\"p3\">*</ept>.","pos":[2150,2306],"source":" For more information, see the [new](../../cpp/new-operator-cpp.md) and [delete](../../cpp/delete-operator-cpp.md) operators in the *C++ Language Reference*."},{"content":"To override the default, call:","pos":[2307,2337]},{"pos":[2378,2487],"content":"early in your program or link with Newmode.obj (see <bpt id=\"p1\">[</bpt>Link Options<ept id=\"p1\">](../../c-runtime-library/link-options.md)</ept>).","source":"early in your program or link with Newmode.obj (see [Link Options](../../c-runtime-library/link-options.md))."},{"content":"This function validates its parameter.","pos":[2494,2532]},{"content":"If <ph id=\"ph1\">`newhandlermode`</ph> is anything other than 0 or 1, the function invokes the invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2533,2724],"source":" If `newhandlermode` is anything other than 0 or 1, the function invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, <bpt id=\"p1\">**</bpt>_<ept id=\"p1\">**</ept><ph id=\"ph1\">`set_new_mode`</ph> returns -1 and sets <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`EINVAL`</ph>.","pos":[2725,2822],"source":" If execution is allowed to continue, **_**`set_new_mode` returns -1 and sets `errno` to `EINVAL`."},{"pos":[2831,2843],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[2850,2857]},{"content":"Required header","pos":[2858,2873]},{"content":"<ph id=\"ph1\">\\&lt;</ph>new.h&gt;","pos":[2934,2942],"source":"\\<new.h>"},{"pos":[2950,3068],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[3077,3102],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[3106,3121]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[3122,3169],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[3170,3295],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[3304,3312],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Memory Allocation<ept id=\"p1\">](../../c-runtime-library/memory-allocation.md)</ept><ph id=\"ph1\"> </ph>","pos":[3316,3382],"source":"[Memory Allocation](../../c-runtime-library/memory-allocation.md) "},{"content":"<bpt id=\"p1\"> [</bpt>calloc<ept id=\"p1\">](../../c-runtime-library/reference/calloc.md)</ept><ph id=\"ph1\"> </ph>","pos":[3385,3440],"source":" [calloc](../../c-runtime-library/reference/calloc.md) "},{"content":"<bpt id=\"p1\"> [</bpt>free<ept id=\"p1\">](../../c-runtime-library/reference/free.md)</ept><ph id=\"ph1\"> </ph>","pos":[3443,3494],"source":" [free](../../c-runtime-library/reference/free.md) "},{"content":"<bpt id=\"p1\"> [</bpt>realloc<ept id=\"p1\">](../../c-runtime-library/reference/realloc.md)</ept><ph id=\"ph1\"> </ph>","pos":[3497,3554],"source":" [realloc](../../c-runtime-library/reference/realloc.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_query_new_handler<ept id=\"p1\">](../../c-runtime-library/reference/query-new-handler.md)</ept><ph id=\"ph1\"> </ph>","pos":[3557,3635],"source":" [_query_new_handler](../../c-runtime-library/reference/query-new-handler.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_query_new_mode<ept id=\"p1\">](../../c-runtime-library/reference/query-new-mode.md)</ept>","pos":[3638,3709],"source":" [_query_new_mode](../../c-runtime-library/reference/query-new-mode.md)"}],"content":"---\ntitle: \"_set_new_mode | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_set_new_mode\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-heap-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"set_new_mode\"\n  - \"_set_new_mode\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"handler modes\"\n  - \"_set_new_mode function\"\n  - \"set_new_mode function\"\nms.assetid: 4d14039a-e54e-4689-8c70-74a4b9834768\ncaps.latest.revision: 14\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _set_new_mode\nSets a new handler mode for `malloc`.  \n  \n## Syntax  \n  \n```  \nint _set_new_mode(  \n   int newhandlermode   \n);  \n```  \n  \n#### Parameters  \n `newhandlermode`  \n New handler mode for `malloc`; valid value is 0 or 1.  \n  \n## Return Value  \n Returns the previous handler mode set for `malloc`. A return value of 1 indicates that, on failure to allocate memory, `malloc` previously called the new handler routine; a return value of 0 indicates that it did not. If the `newhandlermode` argument does not equal 0 or 1, returns –1.  \n  \n## Remarks  \n The C++ `_set_new_mode` function sets the new handler mode for [malloc](../../c-runtime-library/reference/malloc.md). The new handler mode indicates whether, on failure, `malloc` is to call the new handler routine as set by [_set_new_handler](../../c-runtime-library/reference/set-new-handler.md). By default, `malloc` does not call the new handler routine on failure to allocate memory. You can override this default behavior so that, when `malloc` fails to allocate memory, `malloc` calls the new handler routine in the same way that the `new` operator does when it fails for the same reason. For more information, see the [new](../../cpp/new-operator-cpp.md) and [delete](../../cpp/delete-operator-cpp.md) operators in the *C++ Language Reference*. To override the default, call:  \n  \n```  \n_set_new_mode(1)  \n```  \n  \n early in your program or link with Newmode.obj (see [Link Options](../../c-runtime-library/link-options.md)).  \n  \n This function validates its parameter. If `newhandlermode` is anything other than 0 or 1, the function invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, **_**`set_new_mode` returns -1 and sets `errno` to `EINVAL`.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_set_new_mode`|\\<new.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Memory Allocation](../../c-runtime-library/memory-allocation.md)   \n [calloc](../../c-runtime-library/reference/calloc.md)   \n [free](../../c-runtime-library/reference/free.md)   \n [realloc](../../c-runtime-library/reference/realloc.md)   \n [_query_new_handler](../../c-runtime-library/reference/query-new-handler.md)   \n [_query_new_mode](../../c-runtime-library/reference/query-new-mode.md)"}