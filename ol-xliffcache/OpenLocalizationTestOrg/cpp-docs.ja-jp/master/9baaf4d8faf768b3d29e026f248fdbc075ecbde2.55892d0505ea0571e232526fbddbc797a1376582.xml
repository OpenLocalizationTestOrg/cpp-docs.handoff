{"nodes":[{"pos":[12,46],"content":"CFrameWndEx Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CFrameWndEx Class | Microsoft Docs","pos":[0,34]}]},{"content":"CFrameWndEx Class","pos":[607,624]},{"content":"Implements the functionality of a Windows single document interface (SDI) overlapped or popup frame window, and provides members for managing the window.","pos":[625,778]},{"content":"It extends the <bpt id=\"p1\">[</bpt>CFrameWnd<ept id=\"p1\">](../../mfc/reference/cframewnd-class.md)</ept> class.","pos":[779,852],"source":" It extends the [CFrameWnd](../../mfc/reference/cframewnd-class.md) class."},{"content":"Syntax","pos":[861,867]},{"content":"Members","pos":[930,937]},{"content":"Public Methods","pos":[947,961]},{"content":"Name","pos":[968,972]},{"content":"Description","pos":[973,984]},{"content":"CFrameWndEx::ActiveItemRecalcLayout","pos":[1023,1058]},{"content":"Adjusts the layout of the OLE client item and the frame's client area.","pos":[1098,1168]},{"content":"This method is not used.","pos":[1200,1224]},{"content":"CFrameWndEx::AddPane","pos":[1230,1250]},{"content":"Registers a control bar with the docking manager.","pos":[1275,1324]},{"content":"CFrameWndEx::AdjustDockingLayout","pos":[1330,1362]},{"content":"Recalculates the layout of all panes that are docked to the frame window.","pos":[1399,1472]},{"content":"CFrameWndEx::DelayUpdateFrameMenu","pos":[1478,1511]},{"content":"Sets the frame menu and then updates it when command processing is idle.","pos":[1549,1621]},{"content":"CFrameWndEx::DockPane","pos":[1627,1648]},{"content":"Docks the specified pane to the frame window.","pos":[1674,1719]},{"content":"CFrameWndEx::DockPaneLeftOf","pos":[1725,1752]},{"content":"Docks one pane to the left of another pane.","pos":[1784,1827]},{"content":"CFrameWndEx::EnableAutoHidePanes","pos":[1833,1865]},{"content":"Enables the auto-hide mode for the panes when they are docked to the specified sides of the main frame window.","pos":[1902,2012]},{"content":"CFrameWndEx::EnableDocking","pos":[2018,2044]},{"content":"Enables the docking of the panes that belong to the frame window.","pos":[2075,2140]},{"content":"CFrameWndEx::EnableFullScreenMainMenu","pos":[2146,2183]},{"content":"Shows or hides the main menu in a full screen mode.","pos":[2225,2276]},{"content":"CFrameWndEx::EnableFullScreenMode","pos":[2282,2315]},{"content":"Enables the full screen mode for the frame window.","pos":[2353,2403]},{"content":"CFrameWndEx::EnableLoadDockState","pos":[2409,2441]},{"content":"Enables or disables the loading of the docking state.","pos":[2478,2531]},{"content":"CFrameWndEx::EnablePaneMenu","pos":[2537,2564]},{"content":"Enables or disables the automatic handling of the pane menu.","pos":[2596,2656]},{"content":"CFrameWndEx::GetActivePopup","pos":[2662,2689]},{"content":"Returns a pointer to the currently displayed pop-up menu.","pos":[2721,2778]},{"content":"CFrameWndEx::GetDefaultResId","pos":[2784,2812]},{"content":"Returns the resource ID that you specified when the framework loaded the frame window.","pos":[2845,2931]},{"content":"CFrameWndEx::GetDockingManager","pos":[2937,2967]},{"pos":[3002,3114],"content":"Retrieves the <bpt id=\"p1\">[</bpt>CDockingManager Class<ept id=\"p1\">](../../mfc/reference/cdockingmanager-class.md)</ept> object for the frame window.","source":"Retrieves the [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md) object for the frame window."},{"content":"CFrameWndEx::GetMenuBar","pos":[3120,3143]},{"content":"Returns a pointer to the menu bar object attached to the frame window.","pos":[3171,3241]},{"content":"CFrameWndEx::GetPane","pos":[3247,3267]},{"content":"Returns a pointer to the pane that has the specified ID.","pos":[3292,3348]},{"content":"CFrameWndEx::GetRibbonBar","pos":[3354,3379]},{"content":"Retrieves the ribbon bar control for the frame.","pos":[3409,3456]},{"content":"CFrameWndEx::GetTearOffBars","pos":[3462,3489]},{"content":"Returns a list of pane objects that are in a tear-off state.","pos":[3521,3581]},{"content":"CFrameWndEx::GetToolbarButtonToolTipText","pos":[3587,3627]},{"content":"Called by the framework when the application displays the tooltip for a toolbar button.","pos":[3672,3759]},{"content":"CFrameWndEx::InsertPane","pos":[3765,3788]},{"content":"Registers a pane with the docking manager.","pos":[3816,3858]},{"content":"CFrameWndEx::IsFullScreen","pos":[3864,3889]},{"content":"Determines whether the frame window is in full screen mode.","pos":[3919,3978]},{"content":"CFrameWndEx::IsMenuBarAvailable","pos":[3984,4015]},{"content":"Determines whether the pointer to the menu bar object is valid.","pos":[4051,4114]},{"content":"CFrameWndEx::IsPointNearDockSite","pos":[4120,4152]},{"content":"Indicates whether the point is located in an alignment zone.","pos":[4189,4249]},{"content":"CFrameWndEx::IsPrintPreview","pos":[4255,4282]},{"content":"Indicates whether the frame window is in print preview mode.","pos":[4314,4374]},{"content":"CFrameWndEx::LoadFrame","pos":[4380,4402]},{"content":"This method is called after construction to create the frame window and load its resources.","pos":[4429,4520]},{"content":"CFrameWndEx::NegotiateBorderSpace","pos":[4526,4559]},{"content":"Implements OLE client border negotiation.","pos":[4597,4638]},{"content":"CFrameWndEx::OnActivate","pos":[4644,4667]},{"content":"The framework calls this method when user input is switched to or away from the frame.","pos":[4695,4781]},{"content":"CFrameWndEx::OnActivateApp","pos":[4787,4813]},{"content":"Called by the framework when the application is either selected or deselected.","pos":[4844,4922]},{"content":"CFrameWndEx::OnChangeVisualManager","pos":[4928,4962]},{"content":"Called by the framework when a change to the frame requires a change to the visual manager.","pos":[5001,5092]},{"content":"CFrameWndEx::OnClose","pos":[5098,5118]},{"content":"The framework calls this method to close the frame.","pos":[5143,5194]},{"content":"CFrameWndEx::OnCloseDockingPane","pos":[5200,5231]},{"pos":[5267,5351],"content":"Called by the framework when the user clicks the <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> button on a docking pane.","source":"Called by the framework when the user clicks the **Close** button on a docking pane."},{"content":"CFrameWndEx::OnCloseMiniFrame","pos":[5357,5386]},{"pos":[5420,5518],"content":"Called by the framework when the user clicks the <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> button on a floating mini frame window.","source":"Called by the framework when the user clicks the **Close** button on a floating mini frame window."},{"content":"CFrameWndEx::OnClosePopupMenu","pos":[5524,5553]},{"content":"Called by the framework when an active pop-up menu processes a WM_DESTROY message.","pos":[5587,5669]},{"content":"CFrameWndEx::OnCmdMsg","pos":[5675,5696]},{"content":"Dispatches command messages.","pos":[5722,5750]},{"content":"CFrameWndEx::OnContextHelp","pos":[5756,5782]},{"content":"Called by the framework to display context related help.","pos":[5813,5869]},{"content":"CFrameWndEx::OnCreate","pos":[5875,5896]},{"content":"Called by the framework after the frame is created.","pos":[5922,5973]},{"content":"CFrameWndEx::OnDestroy","pos":[5979,6001]},{"content":"Called by the framework when the frame is destroyed.","pos":[6028,6080]},{"content":"CFrameWndEx::OnDrawMenuImage","pos":[6086,6114]},{"content":"Called by the framework when the application draws the image associated with a menu item.","pos":[6147,6236]},{"content":"CFrameWndEx::OnDrawMenuLogo","pos":[6242,6269]},{"pos":[6301,6446],"content":"Called by the framework when a <ph id=\"ph1\">`CMFCPopupMenu`</ph> object processes a <bpt id=\"p1\">[</bpt>WM_PAINT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145213)</ept> message.","source":"Called by the framework when a `CMFCPopupMenu` object processes a [WM_PAINT](http://msdn.microsoft.com/library/windows/desktop/dd145213) message."},{"content":"CFrameWndEx::OnDWMCompositionChanged","pos":[6452,6488]},{"content":"Called by the framework when Desktop Window Manager (DWM) composition has been enabled or disabled.","pos":[6529,6628]},{"content":"CFrameWndEx::OnExitSizeMove","pos":[6634,6661]},{"content":"Called by the framework when the frame stops moving or resizing.","pos":[6693,6757]},{"content":"CFrameWndEx::OnGetMinMaxInfo","pos":[6763,6791]},{"content":"Called by the framework when the frame is resized to set window dimension limits.","pos":[6824,6905]},{"content":"CFrameWndEx::OnIdleUpdateCmdUI","pos":[6911,6941]},{"content":"Called by the framework to update the frame display when command processing is idle.","pos":[6976,7060]},{"content":"CFrameWndEx::OnLButtonDown","pos":[7066,7092]},{"content":"The framework calls this method when the user presses the left mouse button.","pos":[7123,7199]},{"content":"CFrameWndEx::OnLButtonUp","pos":[7205,7229]},{"content":"The framework calls this method when the user releases the left mouse button.","pos":[7258,7335]},{"content":"CFrameWndEx::OnMenuButtonToolHitTest","pos":[7341,7377]},{"pos":[7418,7511],"content":"Called by the framework when a <ph id=\"ph1\">`CMFCToolBarButton`</ph> object processes a <ph id=\"ph2\">`WM_NCHITTEST`</ph> message.","source":"Called by the framework when a `CMFCToolBarButton` object processes a `WM_NCHITTEST` message."},{"content":"CFrameWndEx::OnMenuChar","pos":[7517,7540]},{"content":"Called by the framework when a menu is displayed and the user presses a key that does not correspond to a command.","pos":[7568,7682]},{"content":"CFrameWndEx::OnMouseMove","pos":[7688,7712]},{"content":"The framework calls this method when the pointer moves.","pos":[7741,7796]},{"content":"CFrameWndEx::OnMoveMiniFrame","pos":[7802,7830]},{"content":"Called by the framework when a pane window moves.","pos":[7863,7912]},{"content":"CFrameWndEx::OnNcActivate","pos":[7918,7943]},{"content":"Called by the framework when the non-client area of the frame must be redrawn to indicate a change in the active state.","pos":[7973,8092]},{"content":"CFrameWndEx::OnNcCalcSize","pos":[8098,8123]},{"content":"Called by the framework when the size and position of the client area must be calculated.","pos":[8153,8242]},{"content":"CFrameWndEx::OnNcHitTest","pos":[8248,8272]},{"content":"Called by the framework when the pointer moves or when a mouse button is pressed or released.","pos":[8301,8394]},{"content":"CFrameWndEx::OnNcMouseMove","pos":[8400,8426]},{"content":"Called by the framework when the pointer moves in a non-client area.","pos":[8457,8525]},{"content":"CFrameWndEx::OnNcPaint","pos":[8531,8553]},{"content":"Called by the framework when the non-client area must be painted.","pos":[8580,8645]},{"content":"CFrameWndEx::OnPaneCheck","pos":[8651,8675]},{"content":"Called by the framework to control the visibility of a pane.","pos":[8704,8764]},{"content":"CFrameWndEx::OnPostPreviewFrame","pos":[8770,8801]},{"content":"Called by the framework when the user has changed the print preview mode.","pos":[8837,8910]},{"content":"CFrameWndEx::OnPowerBroadcast","pos":[8916,8945]},{"content":"Called by the framework when a power management event occurs.","pos":[8979,9040]},{"content":"CFrameWndEx::OnSetMenu","pos":[9046,9068]},{"content":"Called by the framework to replace the frame window menu.","pos":[9095,9152]},{"content":"CFrameWndEx::OnSetPreviewMode","pos":[9158,9187]},{"content":"Called by the framework to set the print preview mode for the frame.","pos":[9221,9289]},{"content":"CFrameWndEx::OnSetText","pos":[9295,9317]},{"content":"Called by the framework to set the text of a window.","pos":[9344,9396]},{"content":"CFrameWndEx::OnShowCustomizePane","pos":[9402,9434]},{"content":"Called by the framework when a quick customize pane is enabled.","pos":[9471,9534]},{"content":"CFrameWndEx::OnShowPanes","pos":[9540,9564]},{"content":"Called by the framework to show or hide panes.","pos":[9593,9639]},{"content":"CFrameWndEx::OnShowPopupMenu","pos":[9645,9673]},{"content":"Called by the framework when a pop-up menu is enabled.","pos":[9706,9760]},{"content":"CFrameWndEx::OnSize","pos":[9766,9785]},{"content":"The framework calls this method after the frame's size changes.","pos":[9809,9872]},{"content":"CFrameWndEx::OnSizing","pos":[9878,9899]},{"content":"The framework calls this method when the user resizes the frame.","pos":[9925,9989]},{"content":"CFrameWndEx::OnSysColorChange","pos":[9995,10024]},{"content":"Called by the framework when the system colors change.","pos":[10058,10112]},{"content":"CFrameWndEx::OnTearOffMenu","pos":[10118,10144]},{"content":"Called by the framework when a menu that has a tear-off bar is enabled.","pos":[10175,10246]},{"content":"CFrameWndEx::OnToolbarContextMenu","pos":[10252,10285]},{"content":"Called by the framework to build a toolbar context menu.","pos":[10323,10379]},{"content":"CFrameWndEx::OnToolbarCreateNew","pos":[10385,10416]},{"content":"The framework calls this method to create a new toolbar.","pos":[10452,10508]},{"content":"CFrameWndEx::OnToolbarDelete","pos":[10514,10542]},{"content":"Called by the framework when a toolbar is deleted.","pos":[10575,10625]},{"content":"CFrameWndEx::OnUpdateFrameMenu","pos":[10631,10661]},{"content":"Called by the framework to set the frame menu.","pos":[10696,10742]},{"content":"CFrameWndEx::OnUpdateFrameTitle","pos":[10748,10779]},{"content":"The framework calls this method to update the title bar of the frame window.","pos":[10815,10891]},{"content":"CFrameWndEx::OnUpdatePaneMenu","pos":[10897,10926]},{"content":"Called by the framework to update the pane menu.","pos":[10960,11008]},{"content":"CFrameWndEx::OnWindowPosChanged","pos":[11014,11045]},{"content":"Called by the framework when the frame size, position, or z-order has changed because of a call to a window management method.","pos":[11081,11207]},{"content":"CFrameWndEx::PaneFromPoint","pos":[11213,11239]},{"content":"Returns the docking pane that contains the specified point.","pos":[11270,11329]},{"content":"CFrameWndEx::PreTranslateMessage","pos":[11335,11367]},{"content":"Handles specific window messages before they are dispatched.","pos":[11404,11464]},{"content":"CFrameWndEx::RecalcLayout","pos":[11470,11495]},{"content":"Adjusts the layout of the frame and its child windows.","pos":[11525,11579]},{"content":"CFrameWndEx::RemovePaneFromDockManager","pos":[11585,11623]},{"content":"Unregisters a pane and removes it from the internal list in the docking manager.","pos":[11666,11746]},{"content":"CFrameWndEx::SetDockState","pos":[11752,11777]},{"content":"Restores the docking layout to the docking state stored in the registry.","pos":[11807,11879]},{"content":"CFrameWndEx::SetPrintPreviewFrame","pos":[11885,11918]},{"content":"Sets the print preview frame window.","pos":[11956,11992]},{"content":"CFrameWndEx::SetupToolbarMenu","pos":[11998,12027]},{"content":"Inserts user-defined commands into a toolbar menu.","pos":[12061,12111]},{"content":"CFrameWndEx::ShowFullScreen","pos":[12117,12144]},{"content":"Switches the main frame between the full screen and the regular modes.","pos":[12176,12246]},{"content":"CFrameWndEx::ShowPane","pos":[12252,12273]},{"content":"Shows or hides the specified pane.","pos":[12299,12333]},{"content":"CFrameWndEx::UpdateCaption","pos":[12339,12365]},{"content":"Called by the framework to update the window frame caption.","pos":[12396,12455]},{"content":"CFrameWndEx::WinHelp","pos":[12461,12481]},{"pos":[12506,12571],"content":"Invokes either the <ph id=\"ph1\">`WinHelp`</ph> application or context related help.","source":"Invokes either the `WinHelp` application or context related help."},{"content":"Example","pos":[12581,12588]},{"content":"The following example demonstrates how to inherit a class from the <ph id=\"ph1\">`CFrameWndEx`</ph> class.","pos":[12592,12679],"source":"The following example demonstrates how to inherit a class from the `CFrameWndEx` class."},{"content":"The example illustrates the method signatures in the subclass, and how to override the <ph id=\"ph1\">`OnShowPopupMenu`</ph> method.","pos":[12680,12792],"source":" The example illustrates the method signatures in the subclass, and how to override the `OnShowPopupMenu` method."},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>Word Pad sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[12793,12873],"source":" This code snippet is part of the [Word Pad sample](../../visual-cpp-samples.md)."},{"content":"NVC_MFC_WordPad#3","pos":[12891,12908]},{"content":"NVC_MFC_WordPad#4","pos":[12983,13000]},{"content":"Inheritance Hierarchy","pos":[13072,13093]},{"content":"CObject","pos":[13098,13105]},{"content":"CCmdTarget","pos":[13152,13162]},{"content":"CWnd","pos":[13212,13216]},{"content":"CFrameWnd","pos":[13260,13269]},{"content":"CFrameWndEx","pos":[13318,13329]},{"content":"Requirements","pos":[13381,13393]},{"pos":[13397,13424],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxframewndex.h","source":"**Header:** afxframewndex.h"},{"pos":[13486,13521],"content":"CFrameWndEx::ActiveItemRecalcLayout"},{"content":"Adjusts the layout of the OLE client item and the frame's client area.","pos":[13525,13595]},{"content":"Remarks","pos":[13651,13658]},{"pos":[13705,13725],"content":"CFrameWndEx::AddPane"},{"content":"Registers a control bar with the docking manager.","pos":[13729,13778]},{"content":"Parameters","pos":[13869,13879]},{"content":"[in]","pos":[13883,13887]},{"content":"A control bar pane to register.","pos":[13905,13936]},{"content":"[in]","pos":[13943,13947]},{"content":"if you want to add the control bar pane to the end of the list; <ph id=\"ph1\">`FALSE`</ph> otherwise.","pos":[13966,14048],"source":" if you want to add the control bar pane to the end of the list; `FALSE` otherwise."},{"content":"Return Value","pos":[14058,14070]},{"pos":[14081,14147],"content":"if the control bar was successfully registered; <ph id=\"ph1\">`FALSE`</ph> otherwise.","source":" if the control bar was successfully registered; `FALSE` otherwise."},{"pos":[14206,14238],"content":"CFrameWndEx::AdjustDockingLayout"},{"content":"Recalculates the layout of all panes that are docked to the frame window.","pos":[14242,14315]},{"content":"Parameters","pos":[14390,14400]},{"content":"A handle to a structure that contains the positions of multiple windows.","pos":[14414,14486]},{"content":".","pos":[14487,14488]},{"content":"Remarks","pos":[14498,14505]},{"pos":[14509,14639],"content":"The hdwp structure is initialized by the <bpt id=\"p1\">[</bpt>BeginDeferWindowPos<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632672)</ept> method.","source":"The hdwp structure is initialized by the [BeginDeferWindowPos](http://msdn.microsoft.com/library/windows/desktop/ms632672) method."},{"pos":[14699,14732],"content":"CFrameWndEx::DelayUpdateFrameMenu"},{"content":"Sets the frame menu and then updates it when command processing is idle.","pos":[14736,14808]},{"content":"Parameters","pos":[14884,14894]},{"content":"[in]","pos":[14898,14902]},{"content":"Handle to an alternative menu.","pos":[14917,14947]},{"content":"Remarks","pos":[14957,14964]},{"pos":[15012,15033],"content":"CFrameWndEx::DockPane"},{"content":"Docks the specified pane to the frame window.","pos":[15037,15082]},{"content":"Parameters","pos":[15196,15206]},{"content":"[in]","pos":[15210,15214]},{"content":"A pointer to the control bar to be docked.","pos":[15225,15267]},{"content":"[in]","pos":[15274,15278]},{"content":"The ID of the side of the frame window to dock to.","pos":[15295,15345]},{"content":"[in]","pos":[15352,15356]},{"content":"A pointer to a constant Rect structure that specifies the window's screen position and size.","pos":[15369,15461]},{"content":"Remarks","pos":[15471,15478]},{"pos":[15482,15546],"content":"The <ph id=\"ph1\">`nDockBarID`</ph> parameter can have one of the following values:","source":"The `nDockBarID` parameter can have one of the following values:"},{"content":"AFX_IDW_DOCKBAR_TOP","pos":[15556,15575]},{"content":"AFX_IDW_DOCKBAR_BOTTOM","pos":[15585,15607]},{"content":"AFX_IDW_DOCKBAR_LEFT","pos":[15617,15637]},{"content":"AFX_IDW_DOCKBAR_RIGHT","pos":[15647,15668]},{"pos":[15722,15749],"content":"CFrameWndEx::DockPaneLeftOf"},{"content":"Docks the specified pane to the left of another pane.","pos":[15753,15806]},{"content":"Parameters","pos":[15892,15902]},{"content":"[in]","pos":[15906,15910]},{"content":"A pointer to the pane object to be docked.","pos":[15921,15963]},{"content":"[in]","pos":[15970,15974]},{"content":"A pointer to the pane to the left of which to dock the pane specified by <ph id=\"ph1\">`pBar`</ph>.","pos":[15988,16068],"source":" A pointer to the pane to the left of which to dock the pane specified by `pBar`."},{"content":"Return Value","pos":[16078,16090]},{"content":"if <ph id=\"ph1\">`pBar`</ph> is docked successfully.","pos":[16101,16134],"source":" if `pBar` is docked successfully."},{"content":"otherwise.","pos":[16143,16153]},{"content":"Remarks","pos":[16163,16170]},{"pos":[16174,16315],"content":"The method takes the toolbar specified by the <ph id=\"ph1\">`pBar`</ph> parameter and docks it at the left side of the toolbar specified by <ph id=\"ph2\">`pLeftOf`</ph> parameter.","source":"The method takes the toolbar specified by the `pBar` parameter and docks it at the left side of the toolbar specified by `pLeftOf` parameter."},{"pos":[16374,16406],"content":"CFrameWndEx::EnableAutoHidePanes"},{"content":"Enables auto-hide mode for the pane when it is docked to the specified side of the main frame window.","pos":[16410,16511]},{"content":"Parameters","pos":[16581,16591]},{"content":"[in]","pos":[16595,16599]},{"content":"Specifies the side of the main frame window to which to dock the pane.","pos":[16617,16687]},{"content":"Return Value","pos":[16697,16709]},{"pos":[16720,16836],"content":"if a bar pane is successfully docked to the frame window side that is specified by <ph id=\"ph1\">`dwDockStyle`</ph>, <ph id=\"ph2\">`FALSE`</ph> otherwise.","source":" if a bar pane is successfully docked to the frame window side that is specified by `dwDockStyle`, `FALSE` otherwise."},{"content":"Remarks","pos":[16846,16853]},{"pos":[16871,16908],"content":"can have one of the following values:"},{"content":"CBRS_ALIGN_TOP: allows the control bar to be docked to the top of the client area of a frame window.","pos":[16918,17018]},{"content":"CBRS_ALIGN_BOTTOM: allows the control bar to be docked to the bottom of the client area of a frame window.","pos":[17028,17134]},{"content":"CBRS_ALIGN_LEFT: allows the control bar to be docked to the left side of the client area of a frame window.","pos":[17144,17251]},{"content":"CBRS_ALIGN_RIGHT: allows the control bar to be docked to the right side of the client area of a frame window.","pos":[17261,17370]},{"pos":[17423,17449],"content":"CFrameWndEx::EnableDocking"},{"content":"Enables the docking of the panes of the frame window.","pos":[17453,17506]},{"content":"Parameters","pos":[17570,17580]},{"content":"[in]","pos":[17584,17588]},{"content":"Specifies the side of the main frame window where the pane bar docks.","pos":[17606,17675]},{"content":"Return Value","pos":[17685,17697]},{"content":"if a bar pane can be successfully docked at the specified side.","pos":[17708,17771]},{"content":"otherwise.","pos":[17780,17790]},{"content":"Remarks","pos":[17800,17807]},{"pos":[17811,17876],"content":"The <ph id=\"ph1\">`dwDockStyle`</ph> parameter can have one of the following values:","source":"The `dwDockStyle` parameter can have one of the following values:"},{"content":"CBRS_ALIGN_TOP","pos":[17886,17900]},{"content":"CBRS_ALIGN_BOTTOM","pos":[17910,17927]},{"content":"CBRS_ALIGN_LEFT","pos":[17937,17952]},{"content":"CBRS_ALIGN_RIGHT","pos":[17962,17978]},{"pos":[18042,18079],"content":"CFrameWndEx::EnableFullScreenMainMenu"},{"content":"Shows or hides the main menu in a full screen mode.","pos":[18083,18134]},{"content":"Parameters","pos":[18208,18218]},{"content":"[in]","pos":[18222,18226]},{"content":"to show the main menu in a full screen mode, <ph id=\"ph1\">`FALSE`</ph> otherwise.","pos":[18251,18314],"source":" to show the main menu in a full screen mode, `FALSE` otherwise."},{"pos":[18374,18407],"content":"CFrameWndEx::EnableFullScreenMode"},{"content":"Enables the full-screen mode for the frame window.","pos":[18411,18461]},{"content":"Parameters","pos":[18535,18545]},{"content":"[in]","pos":[18549,18553]},{"content":"The ID of a command that enables and disables the full screen mode.","pos":[18575,18642]},{"content":"Remarks","pos":[18652,18659]},{"content":"In the full-screen mode, all docking control bars, toolbars and menu are hidden and the active view is resized to occupy the full-screen.","pos":[18663,18800]},{"content":"When you enable the full-screen mode, you must specify an ID of the command that enables or disables the full-screen mode.","pos":[18807,18929]},{"content":"You can call <ph id=\"ph1\">`EnableFullScreenMode`</ph> from the main frame's <ph id=\"ph2\">`OnCreate`</ph> function.","pos":[18930,19008],"source":" You can call `EnableFullScreenMode` from the main frame's `OnCreate` function."},{"content":"When a frame window is being switched to a full-screen mode, the framework creates a floating toolbar with one button that has the specified command ID.","pos":[19009,19161]},{"pos":[19168,19302],"content":"If you want to keep the main menu on the screen, call <bpt id=\"p1\">[</bpt>CFrameWndEx::EnableFullScreenMainMenu<ept id=\"p1\">](#cframewndex__enablefullscreenmainmenu)</ept>.","source":"If you want to keep the main menu on the screen, call [CFrameWndEx::EnableFullScreenMainMenu](#cframewndex__enablefullscreenmainmenu)."},{"pos":[19361,19393],"content":"CFrameWndEx::EnableLoadDockState"},{"content":"Enables or disables the loading of the docking state.","pos":[19397,19450]},{"content":"Parameters","pos":[19520,19530]},{"content":"[in]","pos":[19534,19538]},{"content":"to enable the loading of the docking state, <ph id=\"ph1\">`FALSE`</ph> to disable the loading of the docking state.","pos":[19559,19655],"source":" to enable the loading of the docking state, `FALSE` to disable the loading of the docking state."},{"pos":[19709,19736],"content":"CFrameWndEx::EnablePaneMenu"},{"content":"Enables or disables the automatic handling of the pane menu.","pos":[19740,19800]},{"content":"Parameters","pos":[20063,20073]},{"content":"[in]","pos":[20077,20081]},{"content":"to enable the automatic handling of the control bar pop-up menus; <ph id=\"ph1\">`FALSE`</ph> to disable the automatic handling of the control bar pop-up menus.","pos":[20102,20242],"source":" to enable the automatic handling of the control bar pop-up menus; `FALSE` to disable the automatic handling of the control bar pop-up menus."},{"content":"[in]","pos":[20249,20253]},{"content":"The command ID of the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> menu item.","pos":[20274,20320],"source":" The command ID of the **Customize** menu item."},{"content":"[in]","pos":[20327,20331]},{"content":"The label to be displayed for the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> menu item","pos":[20355,20412],"source":" The label to be displayed for the **Customize** menu item"},{"content":"[in]","pos":[20419,20423]},{"content":"The ID of a toolbar menu item that opens the pop-up menu in the control bar.","pos":[20455,20531]},{"content":"[in]","pos":[20538,20542]},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, the control bar context menu displays the list of toolbars only.","pos":[20578,20653],"source":" If `TRUE`, the control bar context menu displays the list of toolbars only."},{"content":"If <ph id=\"ph1\">`FALSE`</ph>, the menu displays the list of the toolbars and the docking bars.","pos":[20654,20730],"source":" If `FALSE`, the menu displays the list of the toolbars and the docking bars."},{"content":"[in]","pos":[20737,20741]},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, the control bar menu displays the list of the toolbars only.","pos":[20774,20845],"source":" If `TRUE`, the control bar menu displays the list of the toolbars only."},{"content":"If <ph id=\"ph1\">`FALSE`</ph>, the menu displays the list of the toolbars and the docking bars.","pos":[20846,20922],"source":" If `FALSE`, the menu displays the list of the toolbars and the docking bars."},{"pos":[20976,21003],"content":"CFrameWndEx::GetActivePopup"},{"content":"Returns a pointer to the currently displayed pop-up menu.","pos":[21007,21064]},{"content":"Return Value","pos":[21131,21143]},{"pos":[21147,21214],"content":"A pointer to the currently displayed pop-up menu; otherwise <ph id=\"ph1\">`NULL`</ph>.","source":"A pointer to the currently displayed pop-up menu; otherwise `NULL`."},{"pos":[21269,21297],"content":"CFrameWndEx::GetDefaultResId"},{"content":"Returns the resource ID that you specified when the framework loaded the frame window.","pos":[21301,21387]},{"content":"Return Value","pos":[21445,21457]},{"content":"The resource ID value that the user specified when the framework loaded the frame window.","pos":[21461,21550]},{"content":"Zero if the frame window does not have a menu bar.","pos":[21551,21601]},{"pos":[21658,21688],"content":"CFrameWndEx::GetDockingManager"},{"pos":[21692,21804],"content":"Retrieves the <bpt id=\"p1\">[</bpt>CDockingManager Class<ept id=\"p1\">](../../mfc/reference/cdockingmanager-class.md)</ept> object for the frame window.","source":"Retrieves the [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md) object for the frame window."},{"content":"Return Value","pos":[21867,21879]},{"pos":[21883,21970],"content":"A pointer to the <bpt id=\"p1\">[</bpt>CDockingManager Class<ept id=\"p1\">](../../mfc/reference/cdockingmanager-class.md)</ept>.","source":"A pointer to the [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md)."},{"content":"Remarks","pos":[21980,21987]},{"pos":[21991,22135],"content":"The frame window creates and uses a <bpt id=\"p1\">[</bpt>CDockingManager Class<ept id=\"p1\">](../../mfc/reference/cdockingmanager-class.md)</ept> object to manage child window docking.","source":"The frame window creates and uses a [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md) object to manage child window docking."},{"pos":[22185,22208],"content":"CFrameWndEx::GetMenuBar"},{"content":"Returns a pointer to the menu bar object attached to the frame window.","pos":[22212,22282]},{"content":"Return Value","pos":[22349,22361]},{"content":"A pointer to the menu bar object attached to the frame window.","pos":[22365,22427]},{"pos":[22474,22494],"content":"CFrameWndEx::GetPane"},{"content":"Returns a pointer to the pane that has the specified ID.","pos":[22498,22554]},{"content":"Parameters","pos":[22609,22619]},{"content":"[in]","pos":[22623,22627]},{"content":"The control ID.","pos":[22637,22652]},{"content":"Return Value","pos":[22662,22674]},{"content":"A pointer to the pane that has the specified ID.","pos":[22678,22726]},{"content":"if no such pane exists.","pos":[22734,22757]},{"pos":[22809,22834],"content":"CFrameWndEx::GetRibbonBar"},{"content":"Retrieves the ribbon bar control for the frame.","pos":[22838,22885]},{"content":"Return Value","pos":[22941,22953]},{"pos":[22957,23052],"content":"Pointer to the <bpt id=\"p1\">[</bpt>CMFCRibbonBar Class<ept id=\"p1\">](../../mfc/reference/cmfcribbonbar-class.md)</ept> for the frame.","source":"Pointer to the [CMFCRibbonBar Class](../../mfc/reference/cmfcribbonbar-class.md) for the frame."},{"content":"Remarks","pos":[23062,23069]},{"pos":[23123,23150],"content":"CFrameWndEx::GetTearOffBars"},{"content":"Returns a list of pane objects that are in a tear-off state.","pos":[23154,23214]},{"content":"Return Value","pos":[23281,23293]},{"pos":[23297,23417],"content":"A reference to <ph id=\"ph1\">`CObList`</ph> object that contains a collection of pointers to the pane objects that are in a tear-off state.","source":"A reference to `CObList` object that contains a collection of pointers to the pane objects that are in a tear-off state."},{"pos":[23484,23524],"content":"CFrameWndEx::GetToolbarButtonToolTipText"},{"content":"Called by the framework when the application displays the tooltip for a toolbar button.","pos":[23528,23615]},{"content":"Parameters","pos":[23741,23751]},{"content":"[in]","pos":[23755,23759]},{"content":"A pointer to a toolbar button.","pos":[23773,23803]},{"content":"[in]","pos":[23810,23814]},{"content":"The tooltip text to display for the button.","pos":[23830,23873]},{"content":"Return Value","pos":[23883,23895]},{"content":"if the tooltip has been displayed.","pos":[23906,23940]},{"content":"otherwise.","pos":[23949,23959]},{"content":"Remarks","pos":[23969,23976]},{"content":"By default, this method does nothing.","pos":[23980,24017]},{"content":"Override this method if you want to display the tooltip for the toolbar button.","pos":[24018,24097]},{"pos":[24147,24170],"content":"CFrameWndEx::InsertPane"},{"content":"Inserts a pane into a list of control bars and registers it with the docking manager.","pos":[24174,24259]},{"content":"Parameters","pos":[24380,24390]},{"content":"A pointer to a control bar to be inserted into the list of control bars and registered with the docking manager.","pos":[24411,24523]},{"content":"A pointer to a control bar before or after which to insert the pane.","pos":[24543,24611]},{"content":"if you want to insert <ph id=\"ph1\">`pControlBar`</ph> after <ph id=\"ph2\">`pTarget`</ph>, <ph id=\"ph3\">`FALSE`</ph> otherwise.","pos":[24637,24708],"source":" if you want to insert `pControlBar` after `pTarget`, `FALSE` otherwise."},{"content":"Return Value","pos":[24718,24730]},{"pos":[24741,24820],"content":"if the control bar was successfully inserted and registered, <ph id=\"ph1\">`FALSE`</ph> otherwise.","source":" if the control bar was successfully inserted and registered, `FALSE` otherwise."},{"content":"Remarks","pos":[24830,24837]},{"pos":[24841,24996],"content":"You must register each control bar by using the <bpt id=\"p1\">[</bpt>CDockingManager Class<ept id=\"p1\">](../../mfc/reference/cdockingmanager-class.md)</ept> to take a part in the docking layout.","source":"You must register each control bar by using the [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md) to take a part in the docking layout."},{"pos":[25048,25073],"content":"CFrameWndEx::IsFullScreen"},{"content":"Determines whether the frame window is in full screen mode.","pos":[25077,25136]},{"content":"Return Value","pos":[25191,25203]},{"pos":[25214,25276],"content":"if the frame window is in full screen mode; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the frame window is in full screen mode; otherwise `FALSE`."},{"content":"Remarks","pos":[25286,25293]},{"pos":[25297,25424],"content":"You can set the full screen mode by calling the <bpt id=\"p1\">[</bpt>CFrameWndEx::EnableFullScreenMode<ept id=\"p1\">](#cframewndex__enablefullscreenmode)</ept> method.","source":"You can set the full screen mode by calling the [CFrameWndEx::EnableFullScreenMode](#cframewndex__enablefullscreenmode) method."},{"pos":[25482,25513],"content":"CFrameWndEx::IsMenuBarAvailable"},{"content":"Determines whether the pointer to the menu bar object is valid.","pos":[25517,25580]},{"content":"Return Value","pos":[25641,25653]},{"pos":[25664,25718],"content":"if the frame window has a menu bar; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the frame window has a menu bar; otherwise `FALSE`."},{"pos":[25777,25809],"content":"CFrameWndEx::IsPointNearDockSite"},{"content":"Determines whether the point is located in an alignment zone.","pos":[25813,25874]},{"content":"Parameters","pos":[26006,26016]},{"content":"[in]","pos":[26020,26024]},{"content":"The position of the point.","pos":[26036,26062]},{"content":"[out]","pos":[26069,26074]},{"content":"Where the point is aligned.","pos":[26095,26122]},{"content":"See the table in the Remarks section for possible values.","pos":[26123,26180]},{"content":"[out]","pos":[26187,26192]},{"content":"if the point is located close to the frame border; <ph id=\"ph1\">`FALSE`</ph> if the point is located in a client area.","pos":[26216,26316],"source":" if the point is located close to the frame border; `FALSE` if the point is located in a client area."},{"content":"Return Value","pos":[26326,26338]},{"pos":[26349,26414],"content":"if the point is located in an alignment zone; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the point is located in an alignment zone; otherwise, `FALSE`."},{"content":"Remarks","pos":[26424,26431]},{"pos":[26435,26516],"content":"The following table lists the possible values for the <ph id=\"ph1\">`dwBarAlignment`</ph> parameter.","source":"The following table lists the possible values for the `dwBarAlignment` parameter."},{"content":"Aligned to the top.","pos":[26543,26562]},{"content":"Aligned to the right.","pos":[26591,26612]},{"content":"Aligned to the bottom.","pos":[26642,26664]},{"content":"Aligned to the left.","pos":[26692,26712]},{"pos":[26766,26793],"content":"CFrameWndEx::IsPrintPreview"},{"content":"Determines whether the frame window is in print preview mode.","pos":[26797,26858]},{"content":"Return Value","pos":[26906,26918]},{"pos":[26929,26994],"content":"if the frame window is in print preview mode; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the frame window is in print preview mode; otherwise, `FALSE`."},{"content":"Remarks","pos":[27004,27011]},{"pos":[27060,27082],"content":"CFrameWndEx::LoadFrame"},{"content":"This method is called after construction to create the frame window and load its resources.","pos":[27086,27177]},{"content":"Parameters","pos":[27386,27396]},{"content":"[in]","pos":[27400,27404]},{"content":"The resource ID that is used to load all frame resources.","pos":[27422,27479]},{"content":"[in]","pos":[27486,27490]},{"content":"The default frame window style.","pos":[27511,27542]},{"content":"[in]","pos":[27549,27553]},{"content":"Pointer to the parent window of the frame.","pos":[27570,27612]},{"content":"[in]","pos":[27619,27623]},{"content":"Pointer to a <bpt id=\"p1\">[</bpt>CCreateContext Structure<ept id=\"p1\">](../../mfc/reference/ccreatecontext-structure.md)</ept> class that is used by the framework during application creation.","pos":[27638,27791],"source":" Pointer to a [CCreateContext Structure](../../mfc/reference/ccreatecontext-structure.md) class that is used by the framework during application creation."},{"content":"Return Value","pos":[27801,27813]},{"pos":[27824,27873],"content":"if the method was successful; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the method was successful; otherwise, `FALSE`."},{"content":"Remarks","pos":[27883,27890]},{"pos":[27950,27983],"content":"CFrameWndEx::NegotiateBorderSpace"},{"content":"Implements OLE client border negotiation.","pos":[27987,28028]},{"content":"Parameters","pos":[28137,28147]},{"content":"[in]","pos":[28151,28155]},{"content":"The border negotiation command.","pos":[28172,28203]},{"content":"See the Remarks section for possible values.","pos":[28204,28248]},{"content":"[in, out]","pos":[28255,28264]},{"content":"Dimensions of the border.","pos":[28283,28308]},{"content":"Return Value","pos":[28318,28330]},{"pos":[28341,28396],"content":"if the layout must be recalculated; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the layout must be recalculated; otherwise, `FALSE`."},{"content":"Remarks","pos":[28406,28413]},{"pos":[28417,28494],"content":"The following table lists the possible values for the <ph id=\"ph1\">`nBorderCmd`</ph> parameter.","source":"The following table lists the possible values for the `nBorderCmd` parameter."},{"content":"Get available OLE client space.","pos":[28516,28547]},{"content":"Request OLE client space.","pos":[28573,28598]},{"content":"Set OLE client space.","pos":[28620,28641]},{"pos":[28691,28714],"content":"CFrameWndEx::OnActivate"},{"content":"The framework calls this method when user input is switched to or away from the frame.","pos":[28718,28804]},{"content":"Parameters","pos":[28918,28928]},{"content":"[in]","pos":[28932,28936]},{"content":"Whether the frame is active or inactive.","pos":[28949,28989]},{"content":"See the table in the Remarks section for possible values.","pos":[28990,29047]},{"content":"[in]","pos":[29054,29058]},{"content":"Pointer to another window that is switching user input with the current one.","pos":[29074,29150]},{"content":"[in]","pos":[29157,29161]},{"content":"The minimized state of the frame.","pos":[29178,29211]},{"content":"if the frame is minimized; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","pos":[29219,29265],"source":" if the frame is minimized; otherwise, `FALSE`."},{"content":"Remarks","pos":[29275,29282]},{"pos":[29286,29359],"content":"The following table lists the possible values for the <ph id=\"ph1\">`nState`</ph> parameter.","source":"The following table lists the possible values for the `nState` parameter."},{"content":"The frame is selected by a method other than a mouse click.","pos":[29381,29440]},{"content":"The frame is selected by a mouse click.","pos":[29467,29506]},{"content":"The frame is not selected.","pos":[29530,29556]},{"pos":[29609,29635],"content":"CFrameWndEx::OnActivateApp"},{"content":"Called by the framework when the application is either selected or deselected.","pos":[29639,29717]},{"content":"Parameters","pos":[29813,29823]},{"content":"[in]","pos":[29827,29831]},{"content":"if the application is selected; <ph id=\"ph1\">`FALSE`</ph> if the application is not selected.","pos":[29852,29927],"source":" if the application is selected; `FALSE` if the application is not selected."},{"content":"[in]","pos":[29934,29938]},{"content":"This parameter is not used.","pos":[29955,29982]},{"content":"Remarks","pos":[29992,29999]},{"pos":[30060,30094],"content":"CFrameWndEx::OnChangeVisualManager"},{"content":"Called by the framework when a change to the frame requires a change to the visual manager.","pos":[30098,30189]},{"content":"Parameters","pos":[30294,30304]},{"content":"[in]","pos":[30308,30312]},{"content":"This parameter is not used.","pos":[30325,30352]},{"content":"[in]","pos":[30359,30363]},{"content":"This parameter is not used.","pos":[30376,30403]},{"content":"Return Value","pos":[30413,30425]},{"content":"Always returns 0.","pos":[30429,30446]},{"content":"Remarks","pos":[30456,30463]},{"pos":[30510,30530],"content":"CFrameWndEx::OnClose"},{"content":"The framework calls this method to close the frame.","pos":[30534,30585]},{"content":"Remarks","pos":[30634,30641]},{"content":"If the frame is in print preview mode, it sends a Windows message to close the print preview; otherwise, if the frame hosts an OLE client, the client is deactivated.","pos":[30645,30810]},{"pos":[30868,30899],"content":"CFrameWndEx::OnCloseDockingPane"},{"pos":[30903,30987],"content":"Called by the framework when the user clicks the <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> button on a docking pane.","source":"Called by the framework when the user clicks the **Close** button on a docking pane."},{"content":"Return Value","pos":[31067,31079]},{"content":"if the docking bar can be closed.","pos":[31090,31123]},{"content":"otherwise","pos":[31132,31141]},{"content":"Remarks","pos":[31151,31158]},{"content":"The default implement does nothing.","pos":[31162,31197]},{"content":"Override this method if you want to handle the hiding of the docking bar.","pos":[31198,31271]},{"pos":[31327,31356],"content":"CFrameWndEx::OnCloseMiniFrame"},{"pos":[31360,31458],"content":"Called by the framework when the user clicks the <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> button on a floating mini frame window.","source":"Called by the framework when the user clicks the **Close** button on a floating mini frame window."},{"content":"Return Value","pos":[31535,31547]},{"content":"if a floating mini frame window can be closed.","pos":[31558,31604]},{"content":"otherwise.","pos":[31613,31623]},{"content":"Remarks","pos":[31633,31640]},{"content":"The default implementation does nothing.","pos":[31644,31684]},{"content":"Override this method if you want to process the hiding of a floating mini frame window.","pos":[31685,31772]},{"pos":[31828,31857],"content":"CFrameWndEx::OnClosePopupMenu"},{"content":"Called by the framework when an active pop-up menu processes a WM_DESTROY message.","pos":[31861,31943]},{"content":"Parameters","pos":[32026,32036]},{"content":"A pointer to a pop-up menu.","pos":[32056,32083]},{"content":"Remarks","pos":[32093,32100]},{"content":"The framework sends a WM_DESTROY message when it is about to close the window.","pos":[32104,32182]},{"content":"Override this method if you want to handle notifications from <ph id=\"ph1\">`CMFCPopupMenu`</ph> objects that belong to the frame window when a <ph id=\"ph2\">`CMFCPopupMenu`</ph> object is processing a <ph id=\"ph3\">`WM_DESTROY`</ph> message sent by the framework when the window is being closed.","pos":[32183,32422],"source":" Override this method if you want to handle notifications from `CMFCPopupMenu` objects that belong to the frame window when a `CMFCPopupMenu` object is processing a `WM_DESTROY` message sent by the framework when the window is being closed."},{"pos":[32470,32491],"content":"CFrameWndEx::OnCmdMsg"},{"content":"Dispatches command messages.","pos":[32495,32523]},{"content":"Parameters","pos":[32663,32673]},{"content":"[in]","pos":[32677,32681]},{"content":"The command ID.","pos":[32691,32706]},{"content":"[in]","pos":[32713,32717]},{"content":"Command message category.","pos":[32729,32754]},{"content":"[in, out]","pos":[32761,32770]},{"content":"Pointer to a command object.","pos":[32783,32811]},{"content":"[in, out]","pos":[32818,32827]},{"content":"Pointer to a command handler structure.","pos":[32846,32885]},{"content":"Return Value","pos":[32895,32907]},{"pos":[32918,32973],"content":"if the command message was handled; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the command message was handled; otherwise, `FALSE`."},{"content":"Remarks","pos":[32983,32990]},{"pos":[33043,33069],"content":"CFrameWndEx::OnContextHelp"},{"content":"Called by the framework to display context-related help.","pos":[33073,33129]},{"content":"Remarks","pos":[33184,33191]},{"pos":[33239,33260],"content":"CFrameWndEx::OnCreate"},{"content":"Called by the framework after the frame is created.","pos":[33264,33315]},{"content":"Parameters","pos":[33393,33403]},{"content":"[in]","pos":[33407,33411]},{"content":"A pointer to the <bpt id=\"p1\">[</bpt>CREATESTRUCT Structure<ept id=\"p1\">](../../mfc/reference/createstruct-structure.md)</ept> for the new frame.","pos":[33432,33539],"source":" A pointer to the [CREATESTRUCT Structure](../../mfc/reference/createstruct-structure.md) for the new frame."},{"content":"Return Value","pos":[33549,33561]},{"content":"0 to continue with the frame creation; -1 to destroy the frame.","pos":[33565,33628]},{"content":"Remarks","pos":[33638,33645]},{"pos":[33694,33716],"content":"CFrameWndEx::OnDestroy"},{"content":"Called by the framework when the frame is destroyed.","pos":[33720,33772]},{"content":"Remarks","pos":[33823,33830]},{"content":"The accelerator table and all windows are destroyed.","pos":[33834,33886]},{"pos":[33941,33969],"content":"CFrameWndEx::OnDrawMenuImage"},{"content":"Called by the framework when the application draws the image associated with a menu item.","pos":[33973,34062]},{"content":"Parameters","pos":[34210,34220]},{"content":"[in]","pos":[34224,34228]},{"content":"A pointer to a device context.","pos":[34238,34268]},{"content":"[in]","pos":[34275,34279]},{"content":"A pointer to a menu button whose image is being rendered.","pos":[34297,34354]},{"content":"[in]","pos":[34361,34365]},{"content":"A pointer to a <ph id=\"ph1\">`Rect`</ph> structure that specifies the screen position and size of the image.","pos":[34381,34470],"source":" A pointer to a `Rect` structure that specifies the screen position and size of the image."},{"content":"Return Value","pos":[34480,34492]},{"pos":[34503,34570],"content":"if the framework successfully renders the image; <ph id=\"ph1\">`FALSE`</ph> otherwise.","source":" if the framework successfully renders the image; `FALSE` otherwise."},{"content":"Remarks","pos":[34580,34587]},{"pos":[34591,34746],"content":"Override this method if you want to customize the image rendering for the menu items that belong to the menu bar owned by the <ph id=\"ph1\">`CFrameWndEx`</ph> derived object.","source":"Override this method if you want to customize the image rendering for the menu items that belong to the menu bar owned by the `CFrameWndEx` derived object."},{"pos":[34800,34827],"content":"CFrameWndEx::OnDrawMenuLogo"},{"pos":[34831,34914],"content":"Called by the framework when a <ph id=\"ph1\">`CMFCPopupMenu`</ph> object processes a WM_PAINT message.","source":"Called by the framework when a `CMFCPopupMenu` object processes a WM_PAINT message."},{"content":"Parameters","pos":[35040,35050]},{"content":"[in]","pos":[35054,35058]},{"content":"A pointer to a device context.","pos":[35068,35098]},{"content":"[in]","pos":[35105,35109]},{"content":"A pointer to the menu item.","pos":[35121,35148]},{"content":"[in]","pos":[35155,35159]},{"content":"A reference to a constant <ph id=\"ph1\">`CRect`</ph> structure that specifies the screen position and size of the menu logo.","pos":[35174,35279],"source":" A reference to a constant `CRect` structure that specifies the screen position and size of the menu logo."},{"content":"Remarks","pos":[35289,35296]},{"pos":[35300,35443],"content":"Override this function if you want to display a logo on the pop-up menu that belongs to the menu bar owned by the <ph id=\"ph1\">`CFrameWndEx`</ph> derived object.","source":"Override this function if you want to display a logo on the pop-up menu that belongs to the menu bar owned by the `CFrameWndEx` derived object."},{"pos":[35506,35542],"content":"CFrameWndEx::OnDWMCompositionChanged"},{"content":"Called by the framework when Desktop Window Manager (DWM) composition has been enabled or disabled.","pos":[35546,35645]},{"content":"Parameters","pos":[35744,35754]},{"content":"[in]","pos":[35758,35762]},{"content":"This parameter is not used.","pos":[35771,35798]},{"content":"[in]","pos":[35805,35809]},{"content":"This parameter is not used.","pos":[35818,35845]},{"content":"Return Value","pos":[35855,35867]},{"content":"Always returns 0.","pos":[35871,35888]},{"content":"Remarks","pos":[35898,35905]},{"pos":[35959,35986],"content":"CFrameWndEx::OnExitSizeMove"},{"content":"Called by the framework when the frame stops moving or resizing.","pos":[35990,36054]},{"content":"Parameters","pos":[36136,36146]},{"content":"[in]","pos":[36150,36154]},{"content":"This parameter is not used.","pos":[36163,36190]},{"content":"[in]","pos":[36197,36201]},{"content":"This parameter is not used.","pos":[36210,36237]},{"content":"Return Value","pos":[36247,36259]},{"content":"Always returns 0.","pos":[36263,36280]},{"content":"Remarks","pos":[36290,36297]},{"pos":[36352,36380],"content":"CFrameWndEx::OnGetMinMaxInfo"},{"content":"Called by the framework when the frame is resized to set window dimension limits.","pos":[36384,36465]},{"content":"Parameters","pos":[36543,36553]},{"content":"[in]","pos":[36557,36561]},{"content":"Pointer to a <bpt id=\"p1\">[</bpt>MINMAXINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632605)</ept> structure.","pos":[36573,36669],"source":" Pointer to a [MINMAXINFO](http://msdn.microsoft.com/library/windows/desktop/ms632605) structure."},{"content":"Remarks","pos":[36679,36686]},{"pos":[36743,36773],"content":"CFrameWndEx::OnIdleUpdateCmdUI"},{"content":"Called by the framework to update the frame display when command processing is idle.","pos":[36777,36861]},{"content":"Parameters","pos":[36970,36980]},{"content":"[in]","pos":[36984,36988]},{"content":"This parameter is not used.","pos":[37001,37028]},{"content":"[in]","pos":[37035,37039]},{"content":"This parameter is not used.","pos":[37052,37079]},{"content":"Return Value","pos":[37089,37101]},{"content":"Always returns 0.","pos":[37105,37122]},{"content":"Remarks","pos":[37132,37139]},{"pos":[37192,37218],"content":"CFrameWndEx::OnLButtonDown"},{"content":"The framework calls this method when the user presses the left mouse button.","pos":[37222,37298]},{"content":"Parameters","pos":[37389,37399]},{"content":"[in]","pos":[37403,37407]},{"content":"Indicates whether the user pressed modifier keys.","pos":[37420,37469]},{"content":"For possible values see the parameter <ph id=\"ph1\">`wParam`</ph> in <bpt id=\"p1\">[</bpt>WM_LBUTTONDOWN Notification<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645607)</ept>.","pos":[37470,37610],"source":" For possible values see the parameter `wParam` in [WM_LBUTTONDOWN Notification](http://msdn.microsoft.com/library/windows/desktop/ms645607)."},{"content":"[in]","pos":[37617,37621]},{"content":"Specifies the x and y coordinates of the pointer, relative to the upper-left corner of the window.","pos":[37633,37731]},{"content":"Remarks","pos":[37741,37748]},{"pos":[37799,37823],"content":"CFrameWndEx::OnLButtonUp"},{"content":"The framework calls this method when the user releases the left mouse button.","pos":[37827,37904]},{"content":"Parameters","pos":[37993,38003]},{"content":"[in]","pos":[38007,38011]},{"content":"Indicates whether the user pressed modifier keys.","pos":[38024,38073]},{"content":"For possible values see the parameter <ph id=\"ph1\">`wParam`</ph> in <bpt id=\"p1\">[</bpt>WM_LBUTTONUP Notification<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645608)</ept>.","pos":[38074,38212],"source":" For possible values see the parameter `wParam` in [WM_LBUTTONUP Notification](http://msdn.microsoft.com/library/windows/desktop/ms645608)."},{"content":"[in]","pos":[38219,38223]},{"content":"Specifies the x and y coordinates of the pointer, relative to the upper-left corner of the window.","pos":[38235,38333]},{"content":"Remarks","pos":[38343,38350]},{"pos":[38413,38449],"content":"CFrameWndEx::OnMenuButtonToolHitTest"},{"pos":[38453,38546],"content":"Called by the framework when a <ph id=\"ph1\">`CMFCToolBarButton`</ph> object processes a <ph id=\"ph2\">`WM_NCHITTEST`</ph> message.","source":"Called by the framework when a `CMFCToolBarButton` object processes a `WM_NCHITTEST` message."},{"content":"Parameters","pos":[38663,38673]},{"content":"[in]","pos":[38677,38681]},{"content":"A pointer to the tool bar button.","pos":[38695,38728]},{"content":"[out]","pos":[38735,38740]},{"content":"A pointer to a tool information structure.","pos":[38750,38792]},{"content":"Return Value","pos":[38802,38814]},{"content":"if the application fills the <ph id=\"ph1\">`pTI`</ph> parameter.","pos":[38825,38870],"source":" if the application fills the `pTI` parameter."},{"content":"otherwise.","pos":[38879,38889]},{"content":"Remarks","pos":[38899,38906]},{"content":"Override this method if you want to provide a tooltip information about a specific menu item.","pos":[38910,39003]},{"pos":[39053,39076],"content":"CFrameWndEx::OnMenuChar"},{"content":"Called by the framework when a menu is displayed and the user presses a key that does not correspond to a command.","pos":[39080,39194]},{"content":"Parameters","pos":[39303,39313]},{"content":"[in]","pos":[39317,39321]},{"content":"Character code of the pressed key.","pos":[39333,39367]},{"content":"[in]","pos":[39374,39378]},{"content":"Contains the <ph id=\"ph1\">`MF_POPUP`</ph> flag if the menu displayed is a submenu; contains the <ph id=\"ph2\">`MF_SYSMENU`</ph> flag if the menu displayed is a control menu.","pos":[39391,39527],"source":" Contains the `MF_POPUP` flag if the menu displayed is a submenu; contains the `MF_SYSMENU` flag if the menu displayed is a control menu."},{"content":"[in]","pos":[39534,39538]},{"content":"Pointer to a menu.","pos":[39550,39568]},{"content":"Return Value","pos":[39578,39590]},{"content":"The high-order word must be one of the following values.","pos":[39594,39650]},{"content":"The framework should ignore the keystroke.","pos":[39664,39706]},{"content":"The framework should close the menu.","pos":[39720,39756]},{"content":"The framework should select one of the items displayed in the menu.","pos":[39770,39837]},{"content":"The low-order word contains the ID of the command to select.","pos":[39838,39898]},{"content":"Remarks","pos":[39908,39915]},{"pos":[39966,39990],"content":"CFrameWndEx::OnMouseMove"},{"content":"The framework calls this method when the pointer moves.","pos":[39994,40049]},{"content":"Parameters","pos":[40138,40148]},{"content":"[in]","pos":[40152,40156]},{"content":"Indicates whether a user pressed modifier keys.","pos":[40169,40216]},{"content":"For possible values see the parameter <ph id=\"ph1\">`wParam`</ph> in <bpt id=\"p1\">[</bpt>WM_MOUSEMOVE Notification<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645616)</ept>.","pos":[40217,40355],"source":" For possible values see the parameter `wParam` in [WM_MOUSEMOVE Notification](http://msdn.microsoft.com/library/windows/desktop/ms645616)."},{"content":"[in]","pos":[40362,40366]},{"content":"Specifies the x and y coordinates of the pointer relative to the upper-left corner of the window.","pos":[40378,40475]},{"content":"Remarks","pos":[40485,40492]},{"pos":[40547,40575],"content":"CFrameWndEx::OnMoveMiniFrame"},{"content":"Called by the framework when a pane window moves.","pos":[40579,40628]},{"content":"Parameters","pos":[40697,40707]},{"content":"[in]","pos":[40711,40715]},{"content":"Pointer to the <bpt id=\"p1\">[</bpt>CPaneFrameWnd Class<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md)</ept> pane window.","pos":[40728,40821],"source":" Pointer to the [CPaneFrameWnd Class](../../mfc/reference/cpaneframewnd-class.md) pane window."},{"content":"Return Value","pos":[40831,40843]},{"pos":[40854,40927],"content":"if the pane window was not docked; <ph id=\"ph1\">`FALSE`</ph> if the pane window was docked.","source":" if the pane window was not docked; `FALSE` if the pane window was docked."},{"content":"Remarks","pos":[40937,40944]},{"pos":[40996,41021],"content":"CFrameWndEx::OnNcActivate"},{"content":"Called by the framework when the non-client area of the frame must be redrawn to indicate a change in the active state.","pos":[41025,41144]},{"content":"Parameters","pos":[41210,41220]},{"content":"[in]","pos":[41224,41228]},{"content":"to draw the frame active; <ph id=\"ph1\">`FALSE`</ph> to draw the frame inactive.","pos":[41249,41310],"source":" to draw the frame active; `FALSE` to draw the frame inactive."},{"content":"Return Value","pos":[41320,41332]},{"content":"Nonzero to continue with default processing; 0 to prevent the non-client area from being deactivated.","pos":[41336,41437]},{"content":"Remarks","pos":[41447,41454]},{"pos":[41506,41531],"content":"CFrameWndEx::OnNcCalcSize"},{"content":"Called by the framework when the size and position of the client area must be calculated.","pos":[41535,41624]},{"content":"Parameters","pos":[41740,41750]},{"content":"[in]","pos":[41754,41758]},{"content":"when the application must specify a valid client area; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","pos":[41787,41861],"source":" when the application must specify a valid client area; otherwise, `FALSE`."},{"content":"[in]","pos":[41868,41872]},{"content":"Pointer to a <ph id=\"ph1\">`NCCALCSIZE_PARAMS`</ph> structure that contains frame dimension changes.","pos":[41885,41966],"source":" Pointer to a `NCCALCSIZE_PARAMS` structure that contains frame dimension changes."},{"content":"Remarks","pos":[41976,41983]},{"pos":[42034,42058],"content":"CFrameWndEx::OnNcHitTest"},{"content":"Called by the framework when the pointer moves or when a mouse button is pressed or released.","pos":[42062,42155]},{"content":"Parameters","pos":[42223,42233]},{"content":"[in]","pos":[42237,42241]},{"content":"The location of the pointer in screen coordinates.","pos":[42253,42303]},{"content":"Return Value","pos":[42313,42325]},{"content":"A pointer hit enumerated value.","pos":[42329,42360]},{"content":"For a list of possible values see <bpt id=\"p1\">[</bpt>WM_NCHITTEST Notification<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645618)</ept>.","pos":[42361,42483],"source":" For a list of possible values see [WM_NCHITTEST Notification](http://msdn.microsoft.com/library/windows/desktop/ms645618)."},{"content":"Remarks","pos":[42493,42500]},{"pos":[42553,42579],"content":"CFrameWndEx::OnNcMouseMove"},{"content":"Called by the framework when the pointer moves in a non-client area.","pos":[42583,42651]},{"content":"Parameters","pos":[42744,42754]},{"content":"[in]","pos":[42758,42762]},{"content":"A pointer hit enumerated value.","pos":[42777,42808]},{"content":"For a list of possible values see <bpt id=\"p1\">[</bpt>WM_NCHITTEST Notification<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645618)</ept>.","pos":[42809,42931],"source":" For a list of possible values see [WM_NCHITTEST Notification](http://msdn.microsoft.com/library/windows/desktop/ms645618)."},{"content":"[in]","pos":[42938,42942]},{"content":"The location of the pointer in screen coordinates.","pos":[42954,43004]},{"content":"Remarks","pos":[43014,43021]},{"pos":[43070,43092],"content":"CFrameWndEx::OnNcPaint"},{"content":"Called by the framework when the non-client area must be painted.","pos":[43096,43161]},{"content":"Remarks","pos":[43212,43219]},{"pos":[43270,43294],"content":"CFrameWndEx::OnPaneCheck"},{"content":"Called by the framework to control the visibility of a pane.","pos":[43298,43358]},{"content":"Parameters","pos":[43419,43429]},{"content":"[in]","pos":[43433,43437]},{"content":"Control ID of a pane.","pos":[43447,43468]},{"content":"Return Value","pos":[43478,43490]},{"pos":[43501,43573],"content":"if the command was handled; <ph id=\"ph1\">`FALSE`</ph> to continue with command processing.","source":" if the command was handled; `FALSE` to continue with command processing."},{"content":"Remarks","pos":[43583,43590]},{"pos":[43648,43679],"content":"CFrameWndEx::OnPostPreviewFrame"},{"content":"Called by the framework when the user changes the print preview mode.","pos":[43683,43752]},{"content":"Parameters","pos":[43854,43864]},{"content":"[in]","pos":[43868,43872]},{"content":"This parameter is not used.","pos":[43885,43912]},{"content":"[in]","pos":[43919,43923]},{"content":"when the frame is in print preview mode; <ph id=\"ph1\">`FALSE`</ph> when print preview mode is off.","pos":[43943,44023],"source":" when the frame is in print preview mode; `FALSE` when print preview mode is off."},{"content":"Return Value","pos":[44033,44045]},{"content":"Always returns 0.","pos":[44049,44066]},{"content":"Remarks","pos":[44076,44083]},{"pos":[44139,44168],"content":"CFrameWndEx::OnPowerBroadcast"},{"content":"Called by the framework when a power management event occurs.","pos":[44172,44233]},{"content":"Parameters","pos":[44325,44335]},{"content":"[in]","pos":[44339,44343]},{"content":"The power management event.","pos":[44352,44379]},{"content":"For a list of possible values see <bpt id=\"p1\">[</bpt>WM_POWERBROADCAST Message<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa373247)</ept>.","pos":[44380,44502],"source":" For a list of possible values see [WM_POWERBROADCAST Message](http://msdn.microsoft.com/library/windows/desktop/aa373247)."},{"content":"[in]","pos":[44509,44513]},{"content":"This parameter is not used.","pos":[44522,44549]},{"content":"Return Value","pos":[44559,44571]},{"content":"Result from calling the default window procedure.","pos":[44575,44624]},{"content":"Remarks","pos":[44634,44641]},{"pos":[44690,44712],"content":"CFrameWndEx::OnSetMenu"},{"content":"Called by the framework to replace the frame window menu.","pos":[44716,44773]},{"content":"Parameters","pos":[44895,44905]},{"content":"[in]","pos":[44909,44913]},{"content":"Handle to the new frame window menu.","pos":[44922,44958]},{"content":"[in]","pos":[44965,44969]},{"content":"Handle to the new window menu.","pos":[44978,45008]},{"content":"[in]","pos":[45015,45019]},{"content":"Handle to the new frame window menu.","pos":[45031,45067]},{"content":"Return Value","pos":[45077,45089]},{"pos":[45103,45159],"content":"is the result from calling the default window procedure."},{"pos":[45173,45228],"content":"is <ph id=\"ph1\">`TRUE`</ph> if the event was handled; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":" is `TRUE` if the event was handled; otherwise, `FALSE`."},{"content":"Remarks","pos":[45238,45245]},{"pos":[45301,45330],"content":"CFrameWndEx::OnSetPreviewMode"},{"content":"Called by the framework to set the print preview mode for the frame.","pos":[45334,45402]},{"content":"Parameters","pos":[45512,45522]},{"content":"[in]","pos":[45526,45530]},{"content":"to enable print preview; <ph id=\"ph1\">`FALSE`</ph> to disable print preview.","pos":[45552,45610],"source":" to enable print preview; `FALSE` to disable print preview."},{"content":"[in]","pos":[45617,45621]},{"content":"Pointer to a <ph id=\"ph1\">`CPrintPreviewState`</ph> frame state structure.","pos":[45634,45690],"source":" Pointer to a `CPrintPreviewState` frame state structure."},{"content":"Remarks","pos":[45700,45707]},{"pos":[45756,45778],"content":"CFrameWndEx::OnSetText"},{"content":"Called by the framework to set the text of a window.","pos":[45782,45834]},{"content":"Parameters","pos":[45927,45937]},{"content":"[in]","pos":[45941,45945]},{"content":"This parameter is not used.","pos":[45958,45985]},{"content":"[in]","pos":[45992,45996]},{"content":"Pointer to the text for the window.","pos":[46009,46044]},{"content":"Return Value","pos":[46054,46066]},{"pos":[46070,46174],"content":"Return value from a call to <bpt id=\"p1\">[</bpt>DefWindowProc<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633572)</ept>.","source":"Return value from a call to [DefWindowProc](http://msdn.microsoft.com/library/windows/desktop/ms633572)."},{"content":"Remarks","pos":[46184,46191]},{"pos":[46250,46282],"content":"CFrameWndEx::OnShowCustomizePane"},{"pos":[46286,46350],"content":"Called by the framework when it displays a <ph id=\"ph1\">`QuickCustomizePane`</ph>.","source":"Called by the framework when it displays a `QuickCustomizePane`."},{"content":"Parameters","pos":[46464,46474]},{"content":"[in]","pos":[46478,46482]},{"content":"A pointer to the quick customize pane.","pos":[46498,46536]},{"content":"[in]","pos":[46543,46547]},{"content":"The control ID of the toolbar to customize.","pos":[46565,46608]},{"content":"Return Value","pos":[46618,46630]},{"pos":[46634,46667],"content":"This method always return <ph id=\"ph1\">`TRUE`</ph>.","source":"This method always return `TRUE`."},{"content":"Remarks","pos":[46677,46684]},{"content":"The quick customize menu is a pop-up menu that appears when you click the toolbar’s customize button","pos":[46688,46788]},{"pos":[46839,46863],"content":"CFrameWndEx::OnShowPanes"},{"content":"Called by the framework to show or hide panes.","pos":[46867,46913]},{"content":"Parameters","pos":[46976,46986]},{"content":"[in]","pos":[46990,46994]},{"content":"if the application shows the panes; <ph id=\"ph1\">`FALSE`</ph> otherwise.","pos":[47013,47067],"source":" if the application shows the panes; `FALSE` otherwise."},{"content":"Return Value","pos":[47077,47089]},{"pos":[47093,47127],"content":"This method always return <ph id=\"ph1\">`FALSE`</ph>.","source":"This method always return `FALSE`."},{"content":"Remarks","pos":[47137,47144]},{"pos":[47148,47290],"content":"The default implementation shows the panes if <ph id=\"ph1\">`bShow`</ph> is <ph id=\"ph2\">`TRUE`</ph> and the panes are hidden or when <ph id=\"ph3\">`bShow`</ph> is <ph id=\"ph4\">`FALSE`</ph> and the panes are visible.","source":"The default implementation shows the panes if `bShow` is `TRUE` and the panes are hidden or when `bShow` is `FALSE` and the panes are visible."},{"pos":[47297,47439],"content":"The default implementation hides the panes if <ph id=\"ph1\">`bShow`</ph> is <ph id=\"ph2\">`TRUE`</ph> and the panes are visible or when <ph id=\"ph3\">`bShow`</ph> is <ph id=\"ph4\">`FALSE`</ph> and the panes are hidden.","source":"The default implementation hides the panes if `bShow` is `TRUE` and the panes are visible or when `bShow` is `FALSE` and the panes are hidden."},{"content":"Override this method in a derived class to execute custom code when the framework shows or hides panes.","pos":[47446,47549]},{"pos":[47604,47632],"content":"CFrameWndEx::OnShowPopupMenu"},{"content":"Called by the framework when it displays a pop-up menu.","pos":[47636,47691]},{"content":"Parameters","pos":[47768,47778]},{"content":"[in]","pos":[47782,47786]},{"content":"A pointer to a pop-up menu.","pos":[47798,47825]},{"content":"Return Value","pos":[47835,47847]},{"pos":[47858,47907],"content":"if the pop-up menu is visible; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the pop-up menu is visible; otherwise `FALSE`."},{"content":"Remarks","pos":[47917,47924]},{"content":"Override this method in a derived class to execute custom code when the framework displays a pop-up menu.","pos":[47928,48033]},{"content":"For example, override this method to change the background color of the commands in a pop-up menu.","pos":[48034,48132]},{"pos":[48178,48197],"content":"CFrameWndEx::OnSize"},{"content":"Called by the framework after the frame's size changes.","pos":[48201,48256]},{"content":"Parameters","pos":[48347,48357]},{"content":"[in]","pos":[48361,48365]},{"content":"The type of resizing.","pos":[48377,48398]},{"content":"For possible values see the parameter <ph id=\"ph1\">`wParam`</ph> in <bpt id=\"p1\">[</bpt>WM_SIZE Notification<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632646)</ept>.","pos":[48399,48532],"source":" For possible values see the parameter `wParam` in [WM_SIZE Notification](http://msdn.microsoft.com/library/windows/desktop/ms632646)."},{"content":"[in]","pos":[48539,48543]},{"content":"New width of the frame in pixels.","pos":[48552,48585]},{"content":"[in]","pos":[48592,48596]},{"content":"New height of the frame in pixels.","pos":[48605,48639]},{"content":"Remarks","pos":[48649,48656]},{"pos":[48704,48725],"content":"CFrameWndEx::OnSizing"},{"content":"Called by the framework when the user resizes the frame.","pos":[48729,48785]},{"content":"Parameters","pos":[48871,48881]},{"content":"[in]","pos":[48885,48889]},{"content":"The edge of the frame that is moved.","pos":[48902,48938]},{"content":"See the parameter <ph id=\"ph1\">`wParam`</ph> in <bpt id=\"p1\">[</bpt>WM_SIZING Notification<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632647)</ept>.","pos":[48939,49054],"source":" See the parameter `wParam` in [WM_SIZING Notification](http://msdn.microsoft.com/library/windows/desktop/ms632647)."},{"content":"[in, out]","pos":[49061,49070]},{"content":"Pointer to a <bpt id=\"p1\">[</bpt>CRect<ept id=\"p1\">](../../atl-mfc-shared/reference/crect-class.md)</ept> or <bpt id=\"p2\">[</bpt>RECT<ept id=\"p2\">](../../mfc/reference/rect-structure1.md)</ept> structure that contains the frame's coordinates.","pos":[49082,49248],"source":" Pointer to a [CRect](../../atl-mfc-shared/reference/crect-class.md) or [RECT](../../mfc/reference/rect-structure1.md) structure that contains the frame's coordinates."},{"content":"Remarks","pos":[49258,49265]},{"pos":[49321,49350],"content":"CFrameWndEx::OnSysColorChange"},{"content":"Called by the framework when the system colors change.","pos":[49354,49408]},{"content":"Remarks","pos":[49458,49465]},{"pos":[49518,49544],"content":"CFrameWndEx::OnTearOffMenu"},{"content":"Called by the framework when the application displays a menu that has a tear-off bar.","pos":[49548,49633]},{"content":"Parameters","pos":[49737,49747]},{"content":"[in]","pos":[49751,49755]},{"content":"A pointer to a pop-up menu.","pos":[49772,49799]},{"content":"[in]","pos":[49806,49810]},{"content":"A pointer to a tear-off bar.","pos":[49821,49849]},{"content":"Return Value","pos":[49859,49871]},{"pos":[49882,49953],"content":"if the pop-up menu with the tear-off bar is enabled; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the pop-up menu with the tear-off bar is enabled; otherwise `FALSE`."},{"content":"Remarks","pos":[49963,49970]},{"content":"Override this method in a derived class to execute custom code when the framework displays a control bar.","pos":[49974,50079]},{"pos":[50086,50145],"content":"The default implementation does nothing and returns <ph id=\"ph1\">`TRUE`</ph>.","source":"The default implementation does nothing and returns `TRUE`."},{"pos":[50205,50238],"content":"CFrameWndEx::OnToolbarContextMenu"},{"content":"Called by the framework to build a toolbar pop-up menu.","pos":[50242,50297]},{"content":"Parameters","pos":[50393,50403]},{"content":"[in]","pos":[50407,50411]},{"content":"This parameter is not used.","pos":[50420,50447]},{"content":"[in]","pos":[50454,50458]},{"content":"This parameter is not used.","pos":[50467,50494]},{"content":"Return Value","pos":[50504,50516]},{"content":"Always returns 1.","pos":[50520,50537]},{"content":"Remarks","pos":[50547,50554]},{"pos":[50612,50643],"content":"CFrameWndEx::OnToolbarCreateNew"},{"content":"The framework calls this method to create a new toolbar.","pos":[50647,50703]},{"content":"Parameters","pos":[50797,50807]},{"content":"[in]","pos":[50811,50815]},{"content":"This parameter is not used.","pos":[50824,50851]},{"content":"[in]","pos":[50858,50862]},{"content":"Pointer to the text for the title bar of the toolbar.","pos":[50871,50924]},{"content":"Return Value","pos":[50934,50946]},{"pos":[50950,51017],"content":"Pointer to the new toolbar; or <ph id=\"ph1\">`NULL`</ph> if a toolbar was not created.","source":"Pointer to the new toolbar; or `NULL` if a toolbar was not created."},{"content":"Remarks","pos":[51027,51034]},{"pos":[51089,51117],"content":"CFrameWndEx::OnToolbarDelete"},{"content":"Called by the framework when a toolbar is deleted.","pos":[51121,51171]},{"content":"Parameters","pos":[51258,51268]},{"content":"[in]","pos":[51272,51276]},{"content":"This parameter is not used.","pos":[51280,51307]},{"content":"[in]","pos":[51314,51318]},{"content":"Pointer to a toolbar.","pos":[51327,51348]},{"content":"Return Value","pos":[51358,51370]},{"pos":[51381,51428],"content":"if the toolbar was deleted; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the toolbar was deleted; otherwise, `FALSE`."},{"content":"Remarks","pos":[51438,51445]},{"pos":[51502,51532],"content":"CFrameWndEx::OnUpdateFrameMenu"},{"content":"Called by the framework to set the frame menu.","pos":[51536,51582]},{"content":"Parameters","pos":[51655,51665]},{"content":"[in]","pos":[51669,51673]},{"content":"Handle to the alternative menu.","pos":[51688,51719]},{"content":"Remarks","pos":[51729,51736]},{"pos":[51794,51825],"content":"CFrameWndEx::OnUpdateFrameTitle"},{"content":"The framework calls this method to update the title bar of the frame window.","pos":[51829,51905]},{"content":"Parameters","pos":[51981,51991]},{"content":"[in]","pos":[51995,51999]},{"content":"to add the active document title to the frame window title bar; otherwise","pos":[52024,52097]},{"content":"Remarks","pos":[52116,52123]},{"pos":[52179,52208],"content":"CFrameWndEx::OnUpdatePaneMenu"},{"content":"Called by the framework to update the pane menu.","pos":[52212,52260]},{"content":"Parameters","pos":[52332,52342]},{"content":"[in]","pos":[52346,52350]},{"content":"Pointer to the pane user interface object.","pos":[52363,52405]},{"content":"Remarks","pos":[52415,52422]},{"pos":[52480,52511],"content":"CFrameWndEx::OnWindowPosChanged"},{"content":"Called by the framework when the frame size, position, or z-order has changed because of a call to a window management method.","pos":[52515,52641]},{"content":"Parameters","pos":[52724,52734]},{"content":"[in]","pos":[52738,52742]},{"content":"Pointer to a <bpt id=\"p1\">[</bpt>WINDOWPOS<ept id=\"p1\">](../../mfc/reference/windowpos-structure1.md)</ept> structure that contains the new size and position.","pos":[52757,52877],"source":" Pointer to a [WINDOWPOS](../../mfc/reference/windowpos-structure1.md) structure that contains the new size and position."},{"content":"Remarks","pos":[52887,52894]},{"pos":[52947,52973],"content":"CFrameWndEx::PaneFromPoint"},{"content":"Searches each pane for the given point.","pos":[52977,53016]},{"content":"Parameters","pos":[53313,53323]},{"content":"[in]","pos":[53327,53331]},{"content":"The screen coordinates of the point to check.","pos":[53343,53388]},{"content":"[in]","pos":[53395,53399]},{"content":"Expand the bounding rectangle of each control bar by this amount when searching for point.","pos":[53418,53508]},{"content":"[in]","pos":[53515,53519]},{"content":"to ignore the <ph id=\"ph1\">`nSensitivity`</ph> parameter; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[53542,53601],"source":" to ignore the `nSensitivity` parameter; otherwise, `FALSE`."},{"content":"[in]","pos":[53608,53612]},{"content":"If not <ph id=\"ph1\">`NULL`</ph>, the method searches only the control bars of the specified type.","pos":[53630,53709],"source":" If not `NULL`, the method searches only the control bars of the specified type."},{"content":"[out]","pos":[53716,53721]},{"content":"If successful, this parameter contains the side of the control bar that is closest to the specified point.","pos":[53739,53845]},{"content":"Otherwise, this parameter is not initialized.","pos":[53846,53891]},{"content":"Return Value","pos":[53901,53913]},{"pos":[53917,54001],"content":"A pointer to a control bar that contains the <ph id=\"ph1\">`point`</ph>; <ph id=\"ph2\">`NULL`</ph> if no control is found.","source":"A pointer to a control bar that contains the `point`; `NULL` if no control is found."},{"content":"Remarks","pos":[54011,54018]},{"pos":[54022,54098],"content":"This method searches all the control bars in your application for a <ph id=\"ph1\">`point`</ph>.","source":"This method searches all the control bars in your application for a `point`."},{"content":"Use <ph id=\"ph1\">`nSensitivity`</ph> to increase the size of the search area.","pos":[54105,54164],"source":"Use `nSensitivity` to increase the size of the search area."},{"content":"Use <ph id=\"ph1\">`pRTCBarType`</ph> to restrict the types of control bars that the method searches.","pos":[54165,54246],"source":" Use `pRTCBarType` to restrict the types of control bars that the method searches."},{"pos":[54305,54337],"content":"CFrameWndEx::PreTranslateMessage"},{"content":"Handles specific window messages before they are dispatched.","pos":[54341,54401]},{"content":"Parameters","pos":[54471,54481]},{"content":"[in]","pos":[54485,54489]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>MSG<ept id=\"p1\">](../../mfc/reference/msg-structure1.md)</ept> structure that contains the message to process.","pos":[54500,54607],"source":" A pointer to a [MSG](../../mfc/reference/msg-structure1.md) structure that contains the message to process."},{"content":"Return Value","pos":[54617,54629]},{"content":"Non-zero if the message was handled and should not be dispatched; 0 if the message was not handled and should be dispatched.","pos":[54633,54757]},{"content":"Remarks","pos":[54767,54774]},{"pos":[54826,54851],"content":"CFrameWndEx::RecalcLayout"},{"content":"Adjusts the layout of the frame and its child windows.","pos":[54855,54909]},{"content":"Parameters","pos":[54982,54992]},{"content":"[in]","pos":[54996,55000]},{"content":"Specifies whether to notify the OLE client item about the layout change.","pos":[55014,55086]},{"content":"Remarks","pos":[55096,55103]},{"content":"This method is called when the size of the frame window has changed or when control bars are displayed or hidden.","pos":[55107,55220]},{"pos":[55285,55323],"content":"CFrameWndEx::RemovePaneFromDockManager"},{"content":"Unregisters a pane and removes it from the docking manager.","pos":[55327,55386]},{"content":"Parameters","pos":[55575,55585]},{"content":"[in]","pos":[55589,55593]},{"content":"A pointer to the control bar pane to remove.","pos":[55611,55655]},{"content":"[in]","pos":[55662,55666]},{"content":"to destroy the control bar after removing it; <ph id=\"ph1\">`FALSE`</ph> otherwise.","pos":[55688,55752],"source":" to destroy the control bar after removing it; `FALSE` otherwise."},{"content":"[in]","pos":[55759,55763]},{"content":"to adjust the docking layout; <ph id=\"ph1\">`FALSE`</ph> otherwise.","pos":[55790,55838],"source":" to adjust the docking layout; `FALSE` otherwise."},{"content":"[in]","pos":[55845,55849]},{"content":"if the control bar is in auto-hide mode; <ph id=\"ph1\">`FALSE`</ph> otherwise.","pos":[55872,55931],"source":" if the control bar is in auto-hide mode; `FALSE` otherwise."},{"content":"[in]","pos":[55938,55942]},{"content":"A pointer to a pane that replaces the removed pane.","pos":[55964,56015]},{"content":"Remarks","pos":[56025,56032]},{"content":"Use this method to remove a control bar from the docking layout of the frame window.","pos":[56036,56120]},{"content":"The <bpt id=\"p1\">[</bpt>CDockingManager Class<ept id=\"p1\">](../../mfc/reference/cdockingmanager-class.md)</ept> handles the layout of control bars.","pos":[56127,56236],"source":"The [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md) handles the layout of control bars."},{"content":"You must register each control bar with the docking manager by using the <bpt id=\"p1\">[</bpt>CFrameWndEx::AddPane<ept id=\"p1\">](#cframewndex__addpane)</ept> method or the <bpt id=\"p2\">[</bpt>CFrameWndEx::InsertPane<ept id=\"p2\">](#cframewndex__insertpane)</ept> method.","pos":[56237,56429],"source":" You must register each control bar with the docking manager by using the [CFrameWndEx::AddPane](#cframewndex__addpane) method or the [CFrameWndEx::InsertPane](#cframewndex__insertpane) method."},{"pos":[56481,56506],"content":"CFrameWndEx::SetDockState"},{"content":"Restores the docking layout to the docking state stored in the registry.","pos":[56510,56582]},{"content":"Parameters","pos":[56651,56661]},{"content":"The docking state.","pos":[56676,56694]},{"content":"This parameter is ignored.","pos":[56695,56721]},{"pos":[56781,56814],"content":"CFrameWndEx::SetPrintPreviewFrame"},{"content":"Sets the print preview frame window.","pos":[56818,56854]},{"content":"Parameters","pos":[56923,56933]},{"content":"[in]","pos":[56937,56941]},{"content":"Pointer to a print preview frame window.","pos":[56952,56992]},{"content":"Remarks","pos":[57002,57009]},{"pos":[57065,57094],"content":"CFrameWndEx::SetupToolbarMenu"},{"content":"Inserts user-defined commands into a toolbar menu.","pos":[57098,57148]},{"content":"Parameters","pos":[57301,57311]},{"content":"[in]","pos":[57315,57319]},{"content":"A <ph id=\"ph1\">`CMenu`</ph> object to be modified.","pos":[57330,57362],"source":" A `CMenu` object to be modified."},{"content":"[in]","pos":[57369,57373]},{"content":"The first user-defined command.","pos":[57405,57436]},{"content":"[in]","pos":[57443,57447]},{"content":"The last user-defined command.","pos":[57478,57508]},{"content":"Remarks","pos":[57518,57525]},{"content":"The framework stores user-defined commands in a list.","pos":[57529,57582]},{"content":"Use <ph id=\"ph1\">`uiViewUserToolbarCmdFirst`</ph> and <ph id=\"ph2\">`uiViewUserToolbarCmdList`</ph> to specify the indexes of the commands to insert.","pos":[57583,57695],"source":" Use `uiViewUserToolbarCmdFirst` and `uiViewUserToolbarCmdList` to specify the indexes of the commands to insert."},{"pos":[57749,57776],"content":"CFrameWndEx::ShowFullScreen"},{"content":"Switches the main frame between full-screen mode and regular mode.","pos":[57780,57846]},{"pos":[57932,57953],"content":"CFrameWndEx::ShowPane"},{"content":"Shows or hides the specified pane.","pos":[57957,57991]},{"content":"Parameters","pos":[58112,58122]},{"content":"[in]","pos":[58126,58130]},{"content":"A pointer to the control bar to show or hide.","pos":[58141,58186]},{"content":"[in]","pos":[58193,58197]},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, the application shows the control bar.","pos":[58209,58258],"source":" If `TRUE`, the application shows the control bar."},{"content":"Otherwise, the application hides the control bar.","pos":[58259,58308]},{"content":"[in]","pos":[58315,58319]},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, delay the adjustment of the docking layout until the framework calls <bpt id=\"p1\">[</bpt>CFrameWndEx::AdjustDockingLayout<ept id=\"p1\">](#cframewndex__adjustdockinglayout)</ept>.","pos":[58332,58482],"source":" If `TRUE`, delay the adjustment of the docking layout until the framework calls [CFrameWndEx::AdjustDockingLayout](#cframewndex__adjustdockinglayout)."},{"content":"Otherwise, recalculate the docking layout immediately.","pos":[58483,58537]},{"content":"[in]","pos":[58544,58548]},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, make the control bar active.","pos":[58564,58603],"source":" If `TRUE`, make the control bar active."},{"content":"Otherwise, display the control bar in an inactive state.","pos":[58604,58660]},{"pos":[58713,58739],"content":"CFrameWndEx::UpdateCaption"},{"content":"Called by the framework to update the window frame caption.","pos":[58743,58802]},{"content":"Remarks","pos":[58849,58856]},{"pos":[58903,58923],"content":"CFrameWndEx::WinHelp"},{"content":"Invokes either the WinHelp application or context related help.","pos":[58927,58990]},{"content":"Parameters","pos":[59088,59098]},{"content":"Data that depends on the <ph id=\"ph1\">`nCmd`</ph> parameter.","pos":[59114,59156],"source":" Data that depends on the `nCmd` parameter."},{"content":"For a list of possible values see <bpt id=\"p1\">[</bpt>WinHelp<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb762267)</ept>.","pos":[59157,59261],"source":" For a list of possible values see [WinHelp](http://msdn.microsoft.com/library/windows/desktop/bb762267)."},{"content":"The help command.","pos":[59278,59295]},{"content":"For a list of possible values see <bpt id=\"p1\">[</bpt>WinHelp<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb762267)</ept>.","pos":[59296,59400],"source":" For a list of possible values see [WinHelp](http://msdn.microsoft.com/library/windows/desktop/bb762267)."},{"content":"Remarks","pos":[59410,59417]},{"content":"See Also","pos":[59426,59434]},{"content":"Hierarchy Chart","pos":[59439,59454]},{"content":"Classes","pos":[59491,59498]},{"content":"CFrameWnd","pos":[59541,59550]}],"content":"---\ntitle: \"CFrameWndEx Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CFrameWndEx\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CFrameWndEx class\"\nms.assetid: 5830aca8-4a21-4f31-91f1-dd5477ffcc8d\ncaps.latest.revision: 39\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CFrameWndEx Class\nImplements the functionality of a Windows single document interface (SDI) overlapped or popup frame window, and provides members for managing the window. It extends the [CFrameWnd](../../mfc/reference/cframewnd-class.md) class.  \n  \n## Syntax  \n  \n```  \nclass CFrameWndEx : public CFrameWnd  \n```  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CFrameWndEx::ActiveItemRecalcLayout](#cframewndex__activeitemrecalclayout)|Adjusts the layout of the OLE client item and the frame's client area.|  \n|`CFrameWndEx::AddDockSite`|This method is not used.|  \n|[CFrameWndEx::AddPane](#cframewndex__addpane)|Registers a control bar with the docking manager.|  \n|[CFrameWndEx::AdjustDockingLayout](#cframewndex__adjustdockinglayout)|Recalculates the layout of all panes that are docked to the frame window.|  \n|[CFrameWndEx::DelayUpdateFrameMenu](#cframewndex__delayupdateframemenu)|Sets the frame menu and then updates it when command processing is idle.|  \n|[CFrameWndEx::DockPane](#cframewndex__dockpane)|Docks the specified pane to the frame window.|  \n|[CFrameWndEx::DockPaneLeftOf](#cframewndex__dockpaneleftof)|Docks one pane to the left of another pane.|  \n|[CFrameWndEx::EnableAutoHidePanes](#cframewndex__enableautohidepanes)|Enables the auto-hide mode for the panes when they are docked to the specified sides of the main frame window.|  \n|[CFrameWndEx::EnableDocking](#cframewndex__enabledocking)|Enables the docking of the panes that belong to the frame window.|  \n|[CFrameWndEx::EnableFullScreenMainMenu](#cframewndex__enablefullscreenmainmenu)|Shows or hides the main menu in a full screen mode.|  \n|[CFrameWndEx::EnableFullScreenMode](#cframewndex__enablefullscreenmode)|Enables the full screen mode for the frame window.|  \n|[CFrameWndEx::EnableLoadDockState](#cframewndex__enableloaddockstate)|Enables or disables the loading of the docking state.|  \n|[CFrameWndEx::EnablePaneMenu](#cframewndex__enablepanemenu)|Enables or disables the automatic handling of the pane menu.|  \n|[CFrameWndEx::GetActivePopup](#cframewndex__getactivepopup)|Returns a pointer to the currently displayed pop-up menu.|  \n|[CFrameWndEx::GetDefaultResId](#cframewndex__getdefaultresid)|Returns the resource ID that you specified when the framework loaded the frame window.|  \n|[CFrameWndEx::GetDockingManager](#cframewndex__getdockingmanager)|Retrieves the [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md) object for the frame window.|  \n|[CFrameWndEx::GetMenuBar](#cframewndex__getmenubar)|Returns a pointer to the menu bar object attached to the frame window.|  \n|[CFrameWndEx::GetPane](#cframewndex__getpane)|Returns a pointer to the pane that has the specified ID.|  \n|[CFrameWndEx::GetRibbonBar](#cframewndex__getribbonbar)|Retrieves the ribbon bar control for the frame.|  \n|[CFrameWndEx::GetTearOffBars](#cframewndex__gettearoffbars)|Returns a list of pane objects that are in a tear-off state.|  \n|[CFrameWndEx::GetToolbarButtonToolTipText](#cframewndex__gettoolbarbuttontooltiptext)|Called by the framework when the application displays the tooltip for a toolbar button.|  \n|[CFrameWndEx::InsertPane](#cframewndex__insertpane)|Registers a pane with the docking manager.|  \n|[CFrameWndEx::IsFullScreen](#cframewndex__isfullscreen)|Determines whether the frame window is in full screen mode.|  \n|[CFrameWndEx::IsMenuBarAvailable](#cframewndex__ismenubaravailable)|Determines whether the pointer to the menu bar object is valid.|  \n|[CFrameWndEx::IsPointNearDockSite](#cframewndex__ispointneardocksite)|Indicates whether the point is located in an alignment zone.|  \n|[CFrameWndEx::IsPrintPreview](#cframewndex__isprintpreview)|Indicates whether the frame window is in print preview mode.|  \n|[CFrameWndEx::LoadFrame](#cframewndex__loadframe)|This method is called after construction to create the frame window and load its resources.|  \n|[CFrameWndEx::NegotiateBorderSpace](#cframewndex__negotiateborderspace)|Implements OLE client border negotiation.|  \n|[CFrameWndEx::OnActivate](#cframewndex__onactivate)|The framework calls this method when user input is switched to or away from the frame.|  \n|[CFrameWndEx::OnActivateApp](#cframewndex__onactivateapp)|Called by the framework when the application is either selected or deselected.|  \n|[CFrameWndEx::OnChangeVisualManager](#cframewndex__onchangevisualmanager)|Called by the framework when a change to the frame requires a change to the visual manager.|  \n|[CFrameWndEx::OnClose](#cframewndex__onclose)|The framework calls this method to close the frame.|  \n|[CFrameWndEx::OnCloseDockingPane](#cframewndex__onclosedockingpane)|Called by the framework when the user clicks the **Close** button on a docking pane.|  \n|[CFrameWndEx::OnCloseMiniFrame](#cframewndex__oncloseminiframe)|Called by the framework when the user clicks the **Close** button on a floating mini frame window.|  \n|[CFrameWndEx::OnClosePopupMenu](#cframewndex__onclosepopupmenu)|Called by the framework when an active pop-up menu processes a WM_DESTROY message.|  \n|[CFrameWndEx::OnCmdMsg](#cframewndex__oncmdmsg)|Dispatches command messages.|  \n|[CFrameWndEx::OnContextHelp](#cframewndex__oncontexthelp)|Called by the framework to display context related help.|  \n|[CFrameWndEx::OnCreate](#cframewndex__oncreate)|Called by the framework after the frame is created.|  \n|[CFrameWndEx::OnDestroy](#cframewndex__ondestroy)|Called by the framework when the frame is destroyed.|  \n|[CFrameWndEx::OnDrawMenuImage](#cframewndex__ondrawmenuimage)|Called by the framework when the application draws the image associated with a menu item.|  \n|[CFrameWndEx::OnDrawMenuLogo](#cframewndex__ondrawmenulogo)|Called by the framework when a `CMFCPopupMenu` object processes a [WM_PAINT](http://msdn.microsoft.com/library/windows/desktop/dd145213) message.|  \n|[CFrameWndEx::OnDWMCompositionChanged](#cframewndex__ondwmcompositionchanged)|Called by the framework when Desktop Window Manager (DWM) composition has been enabled or disabled.|  \n|[CFrameWndEx::OnExitSizeMove](#cframewndex__onexitsizemove)|Called by the framework when the frame stops moving or resizing.|  \n|[CFrameWndEx::OnGetMinMaxInfo](#cframewndex__ongetminmaxinfo)|Called by the framework when the frame is resized to set window dimension limits.|  \n|[CFrameWndEx::OnIdleUpdateCmdUI](#cframewndex__onidleupdatecmdui)|Called by the framework to update the frame display when command processing is idle.|  \n|[CFrameWndEx::OnLButtonDown](#cframewndex__onlbuttondown)|The framework calls this method when the user presses the left mouse button.|  \n|[CFrameWndEx::OnLButtonUp](#cframewndex__onlbuttonup)|The framework calls this method when the user releases the left mouse button.|  \n|[CFrameWndEx::OnMenuButtonToolHitTest](#cframewndex__onmenubuttontoolhittest)|Called by the framework when a `CMFCToolBarButton` object processes a `WM_NCHITTEST` message.|  \n|[CFrameWndEx::OnMenuChar](#cframewndex__onmenuchar)|Called by the framework when a menu is displayed and the user presses a key that does not correspond to a command.|  \n|[CFrameWndEx::OnMouseMove](#cframewndex__onmousemove)|The framework calls this method when the pointer moves.|  \n|[CFrameWndEx::OnMoveMiniFrame](#cframewndex__onmoveminiframe)|Called by the framework when a pane window moves.|  \n|[CFrameWndEx::OnNcActivate](#cframewndex__onncactivate)|Called by the framework when the non-client area of the frame must be redrawn to indicate a change in the active state.|  \n|[CFrameWndEx::OnNcCalcSize](#cframewndex__onnccalcsize)|Called by the framework when the size and position of the client area must be calculated.|  \n|[CFrameWndEx::OnNcHitTest](#cframewndex__onnchittest)|Called by the framework when the pointer moves or when a mouse button is pressed or released.|  \n|[CFrameWndEx::OnNcMouseMove](#cframewndex__onncmousemove)|Called by the framework when the pointer moves in a non-client area.|  \n|[CFrameWndEx::OnNcPaint](#cframewndex__onncpaint)|Called by the framework when the non-client area must be painted.|  \n|[CFrameWndEx::OnPaneCheck](#cframewndex__onpanecheck)|Called by the framework to control the visibility of a pane.|  \n|[CFrameWndEx::OnPostPreviewFrame](#cframewndex__onpostpreviewframe)|Called by the framework when the user has changed the print preview mode.|  \n|[CFrameWndEx::OnPowerBroadcast](#cframewndex__onpowerbroadcast)|Called by the framework when a power management event occurs.|  \n|[CFrameWndEx::OnSetMenu](#cframewndex__onsetmenu)|Called by the framework to replace the frame window menu.|  \n|[CFrameWndEx::OnSetPreviewMode](#cframewndex__onsetpreviewmode)|Called by the framework to set the print preview mode for the frame.|  \n|[CFrameWndEx::OnSetText](#cframewndex__onsettext)|Called by the framework to set the text of a window.|  \n|[CFrameWndEx::OnShowCustomizePane](#cframewndex__onshowcustomizepane)|Called by the framework when a quick customize pane is enabled.|  \n|[CFrameWndEx::OnShowPanes](#cframewndex__onshowpanes)|Called by the framework to show or hide panes.|  \n|[CFrameWndEx::OnShowPopupMenu](#cframewndex__onshowpopupmenu)|Called by the framework when a pop-up menu is enabled.|  \n|[CFrameWndEx::OnSize](#cframewndex__onsize)|The framework calls this method after the frame's size changes.|  \n|[CFrameWndEx::OnSizing](#cframewndex__onsizing)|The framework calls this method when the user resizes the frame.|  \n|[CFrameWndEx::OnSysColorChange](#cframewndex__onsyscolorchange)|Called by the framework when the system colors change.|  \n|[CFrameWndEx::OnTearOffMenu](#cframewndex__ontearoffmenu)|Called by the framework when a menu that has a tear-off bar is enabled.|  \n|[CFrameWndEx::OnToolbarContextMenu](#cframewndex__ontoolbarcontextmenu)|Called by the framework to build a toolbar context menu.|  \n|[CFrameWndEx::OnToolbarCreateNew](#cframewndex__ontoolbarcreatenew)|The framework calls this method to create a new toolbar.|  \n|[CFrameWndEx::OnToolbarDelete](#cframewndex__ontoolbardelete)|Called by the framework when a toolbar is deleted.|  \n|[CFrameWndEx::OnUpdateFrameMenu](#cframewndex__onupdateframemenu)|Called by the framework to set the frame menu.|  \n|[CFrameWndEx::OnUpdateFrameTitle](#cframewndex__onupdateframetitle)|The framework calls this method to update the title bar of the frame window.|  \n|[CFrameWndEx::OnUpdatePaneMenu](#cframewndex__onupdatepanemenu)|Called by the framework to update the pane menu.|  \n|[CFrameWndEx::OnWindowPosChanged](#cframewndex__onwindowposchanged)|Called by the framework when the frame size, position, or z-order has changed because of a call to a window management method.|  \n|[CFrameWndEx::PaneFromPoint](#cframewndex__panefrompoint)|Returns the docking pane that contains the specified point.|  \n|[CFrameWndEx::PreTranslateMessage](#cframewndex__pretranslatemessage)|Handles specific window messages before they are dispatched.|  \n|[CFrameWndEx::RecalcLayout](#cframewndex__recalclayout)|Adjusts the layout of the frame and its child windows.|  \n|[CFrameWndEx::RemovePaneFromDockManager](#cframewndex__removepanefromdockmanager)|Unregisters a pane and removes it from the internal list in the docking manager.|  \n|[CFrameWndEx::SetDockState](#cframewndex__setdockstate)|Restores the docking layout to the docking state stored in the registry.|  \n|[CFrameWndEx::SetPrintPreviewFrame](#cframewndex__setprintpreviewframe)|Sets the print preview frame window.|  \n|[CFrameWndEx::SetupToolbarMenu](#cframewndex__setuptoolbarmenu)|Inserts user-defined commands into a toolbar menu.|  \n|[CFrameWndEx::ShowFullScreen](#cframewndex__showfullscreen)|Switches the main frame between the full screen and the regular modes.|  \n|[CFrameWndEx::ShowPane](#cframewndex__showpane)|Shows or hides the specified pane.|  \n|[CFrameWndEx::UpdateCaption](#cframewndex__updatecaption)|Called by the framework to update the window frame caption.|  \n|[CFrameWndEx::WinHelp](#cframewndex__winhelp)|Invokes either the `WinHelp` application or context related help.|  \n  \n## Example  \n The following example demonstrates how to inherit a class from the `CFrameWndEx` class. The example illustrates the method signatures in the subclass, and how to override the `OnShowPopupMenu` method. This code snippet is part of the [Word Pad sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_WordPad#3](../../mfc/reference/codesnippet/cpp/cframewndex-class_1.h)]  \n[!code-cpp[NVC_MFC_WordPad#4](../../mfc/reference/codesnippet/cpp/cframewndex-class_2.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n [CFrameWnd](../../mfc/reference/cframewnd-class.md)  \n  \n [CFrameWndEx](../../mfc/reference/cframewndex-class.md)  \n  \n## Requirements  \n **Header:** afxframewndex.h  \n  \n##  <a name=\"cframewndex__activeitemrecalclayout\"></a>  CFrameWndEx::ActiveItemRecalcLayout  \n Adjusts the layout of the OLE client item and the frame's client area.  \n  \n```  \nvoid ActiveItemRecalcLayout();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__addpane\"></a>  CFrameWndEx::AddPane  \n Registers a control bar with the docking manager.  \n  \n```  \nBOOL AddPane(\n    CBasePane* pControlBar,  \n    BOOL bTail=TRUE);\n```  \n  \n### Parameters  \n [in] `pControlBar`  \n A control bar pane to register.  \n  \n [in] `bTail`  \n `TRUE` if you want to add the control bar pane to the end of the list; `FALSE` otherwise.  \n  \n### Return Value  \n `TRUE` if the control bar was successfully registered; `FALSE` otherwise.  \n  \n##  <a name=\"cframewndex__adjustdockinglayout\"></a>  CFrameWndEx::AdjustDockingLayout  \n Recalculates the layout of all panes that are docked to the frame window.  \n  \n```  \nvirtual void AdjustDockingLayout(HDWP hdwp=NULL);\n```  \n  \n### Parameters  \n `hdwp`  \n A handle to a structure that contains the positions of multiple windows. .  \n  \n### Remarks  \n The hdwp structure is initialized by the [BeginDeferWindowPos](http://msdn.microsoft.com/library/windows/desktop/ms632672) method.  \n  \n##  <a name=\"cframewndex__delayupdateframemenu\"></a>  CFrameWndEx::DelayUpdateFrameMenu  \n Sets the frame menu and then updates it when command processing is idle.  \n  \n```  \nvirtual void DelayUpdateFrameMenu(HMENU hMenuAlt);\n```  \n  \n### Parameters  \n [in] `hMenuAlt`  \n Handle to an alternative menu.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__dockpane\"></a>  CFrameWndEx::DockPane  \n Docks the specified pane to the frame window.  \n  \n```  \nvoid DockPane(\n    CBasePane* pBar,  \n    UINT nDockBarID=0,  \n    LPCRECT lpRect=NULL);\n```  \n  \n### Parameters  \n [in] `pBar`  \n A pointer to the control bar to be docked.  \n  \n [in] `nDockBarID`  \n The ID of the side of the frame window to dock to.  \n  \n [in] `lpRect`  \n A pointer to a constant Rect structure that specifies the window's screen position and size.  \n  \n### Remarks  \n The `nDockBarID` parameter can have one of the following values:  \n  \n-   AFX_IDW_DOCKBAR_TOP  \n  \n-   AFX_IDW_DOCKBAR_BOTTOM  \n  \n-   AFX_IDW_DOCKBAR_LEFT  \n  \n-   AFX_IDW_DOCKBAR_RIGHT  \n  \n##  <a name=\"cframewndex__dockpaneleftof\"></a>  CFrameWndEx::DockPaneLeftOf  \n Docks the specified pane to the left of another pane.  \n  \n```  \nBOOL DockPaneLeftOf(\n    CPane* pBar,  \n    CPane* pLeftOf);\n```  \n  \n### Parameters  \n [in] `pBar`  \n A pointer to the pane object to be docked.  \n  \n [in] `pLeftOf`  \n A pointer to the pane to the left of which to dock the pane specified by `pBar`.  \n  \n### Return Value  \n `TRUE` if `pBar` is docked successfully. `FALSE` otherwise.  \n  \n### Remarks  \n The method takes the toolbar specified by the `pBar` parameter and docks it at the left side of the toolbar specified by `pLeftOf` parameter.  \n  \n##  <a name=\"cframewndex__enableautohidepanes\"></a>  CFrameWndEx::EnableAutoHidePanes  \n Enables auto-hide mode for the pane when it is docked to the specified side of the main frame window.  \n  \n```  \nBOOL EnableAutoHidePanes(DWORD dwDockStyle);\n```  \n  \n### Parameters  \n [in] `dwDockStyle`  \n Specifies the side of the main frame window to which to dock the pane.  \n  \n### Return Value  \n `TRUE` if a bar pane is successfully docked to the frame window side that is specified by `dwDockStyle`, `FALSE` otherwise.  \n  \n### Remarks  \n `dwDockStyle` can have one of the following values:  \n  \n-   CBRS_ALIGN_TOP: allows the control bar to be docked to the top of the client area of a frame window.  \n  \n-   CBRS_ALIGN_BOTTOM: allows the control bar to be docked to the bottom of the client area of a frame window.  \n  \n-   CBRS_ALIGN_LEFT: allows the control bar to be docked to the left side of the client area of a frame window.  \n  \n-   CBRS_ALIGN_RIGHT: allows the control bar to be docked to the right side of the client area of a frame window.  \n  \n##  <a name=\"cframewndex__enabledocking\"></a>  CFrameWndEx::EnableDocking  \n Enables the docking of the panes of the frame window.  \n  \n```  \nBOOL EnableDocking(DWORD dwDockStyle);\n```  \n  \n### Parameters  \n [in] `dwDockStyle`  \n Specifies the side of the main frame window where the pane bar docks.  \n  \n### Return Value  \n `TRUE` if a bar pane can be successfully docked at the specified side. `FALSE` otherwise.  \n  \n### Remarks  \n The `dwDockStyle` parameter can have one of the following values:  \n  \n-   CBRS_ALIGN_TOP  \n  \n-   CBRS_ALIGN_BOTTOM  \n  \n-   CBRS_ALIGN_LEFT  \n  \n-   CBRS_ALIGN_RIGHT  \n  \n##  <a name=\"cframewndex__enablefullscreenmainmenu\"></a>  CFrameWndEx::EnableFullScreenMainMenu  \n Shows or hides the main menu in a full screen mode.  \n  \n```  \nvoid EnableFullScreenMainMenu(BOOL bEnableMenu);\n```  \n  \n### Parameters  \n [in] `bEnableMenu`  \n `TRUE` to show the main menu in a full screen mode, `FALSE` otherwise.  \n  \n##  <a name=\"cframewndex__enablefullscreenmode\"></a>  CFrameWndEx::EnableFullScreenMode  \n Enables the full-screen mode for the frame window.  \n  \n```  \nvoid EnableFullScreenMode(UINT uiFullScreenCmd);\n```  \n  \n### Parameters  \n [in] `uiFullScreenCmd`  \n The ID of a command that enables and disables the full screen mode.  \n  \n### Remarks  \n In the full-screen mode, all docking control bars, toolbars and menu are hidden and the active view is resized to occupy the full-screen.  \n  \n When you enable the full-screen mode, you must specify an ID of the command that enables or disables the full-screen mode. You can call `EnableFullScreenMode` from the main frame's `OnCreate` function. When a frame window is being switched to a full-screen mode, the framework creates a floating toolbar with one button that has the specified command ID.  \n  \n If you want to keep the main menu on the screen, call [CFrameWndEx::EnableFullScreenMainMenu](#cframewndex__enablefullscreenmainmenu).  \n  \n##  <a name=\"cframewndex__enableloaddockstate\"></a>  CFrameWndEx::EnableLoadDockState  \n Enables or disables the loading of the docking state.  \n  \n```  \nvoid EnableLoadDockState(BOOL bEnable=TRUE);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n `TRUE` to enable the loading of the docking state, `FALSE` to disable the loading of the docking state.  \n  \n##  <a name=\"cframewndex__enablepanemenu\"></a>  CFrameWndEx::EnablePaneMenu  \n Enables or disables the automatic handling of the pane menu.  \n  \n```  \nvoid EnablePaneMenu(\n    BOOL bEnable,  \n    UINT uiCustomizeCmd,  \n    const CString& strCustomizeLabel,  \n    UINT uiViewToolbarsMenuEntryID,  \n    BOOL bContextMenuShowsToolbarsOnly=FALSE,  \n    BOOL bViewMenuShowsToolbarsOnly=FALSE);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n `TRUE` to enable the automatic handling of the control bar pop-up menus; `FALSE` to disable the automatic handling of the control bar pop-up menus.  \n  \n [in] `uiCustomizeCmd`  \n The command ID of the **Customize** menu item.  \n  \n [in] `strCustomizeLabel`  \n The label to be displayed for the **Customize** menu item  \n  \n [in] `uiViewToolbarsMenuEntryID`  \n The ID of a toolbar menu item that opens the pop-up menu in the control bar.  \n  \n [in] `bContextMenuShowsToolbarsOnly`  \n If `TRUE`, the control bar context menu displays the list of toolbars only. If `FALSE`, the menu displays the list of the toolbars and the docking bars.  \n  \n [in] `bViewMenuShowsToolbarsOnly`  \n If `TRUE`, the control bar menu displays the list of the toolbars only. If `FALSE`, the menu displays the list of the toolbars and the docking bars.  \n  \n##  <a name=\"cframewndex__getactivepopup\"></a>  CFrameWndEx::GetActivePopup  \n Returns a pointer to the currently displayed pop-up menu.  \n  \n```  \nCMFCPopupMenu* GetActivePopup() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the currently displayed pop-up menu; otherwise `NULL`.  \n  \n##  <a name=\"cframewndex__getdefaultresid\"></a>  CFrameWndEx::GetDefaultResId  \n Returns the resource ID that you specified when the framework loaded the frame window.  \n  \n```  \nUINT GetDefaultResId() const;\n\n \n```  \n  \n### Return Value  \n The resource ID value that the user specified when the framework loaded the frame window. Zero if the frame window does not have a menu bar.  \n  \n##  <a name=\"cframewndex__getdockingmanager\"></a>  CFrameWndEx::GetDockingManager  \n Retrieves the [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md) object for the frame window.  \n  \n```  \nCDockingManager* GetDockingManager();\n```  \n  \n### Return Value  \n A pointer to the [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md).  \n  \n### Remarks  \n The frame window creates and uses a [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md) object to manage child window docking.  \n  \n##  <a name=\"cframewndex__getmenubar\"></a>  CFrameWndEx::GetMenuBar  \n Returns a pointer to the menu bar object attached to the frame window.  \n  \n```  \nconst CMFCMenuBar* GetMenuBar() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the menu bar object attached to the frame window.  \n  \n##  <a name=\"cframewndex__getpane\"></a>  CFrameWndEx::GetPane  \n Returns a pointer to the pane that has the specified ID.  \n  \n```  \nCBasePane* GetPane(UINT nID);\n```  \n  \n### Parameters  \n [in] `nID`  \n The control ID.  \n  \n### Return Value  \n A pointer to the pane that has the specified ID. `NULL` if no such pane exists.  \n  \n##  <a name=\"cframewndex__getribbonbar\"></a>  CFrameWndEx::GetRibbonBar  \n Retrieves the ribbon bar control for the frame.  \n  \n```  \nCMFCRibbonBar* GetRibbonBar();\n```  \n  \n### Return Value  \n Pointer to the [CMFCRibbonBar Class](../../mfc/reference/cmfcribbonbar-class.md) for the frame.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__gettearoffbars\"></a>  CFrameWndEx::GetTearOffBars  \n Returns a list of pane objects that are in a tear-off state.  \n  \n```  \nconst CObList& GetTearOffBars() const;\n\n \n```  \n  \n### Return Value  \n A reference to `CObList` object that contains a collection of pointers to the pane objects that are in a tear-off state.  \n  \n##  <a name=\"cframewndex__gettoolbarbuttontooltiptext\"></a>  CFrameWndEx::GetToolbarButtonToolTipText  \n Called by the framework when the application displays the tooltip for a toolbar button.  \n  \n```  \nvirtual BOOL GetToolbarButtonToolTipText(\n    CMFCToolBarButton* pButton,  \n    CString& strTTText);\n```  \n  \n### Parameters  \n [in] `pButton`  \n A pointer to a toolbar button.  \n  \n [in] `strTTText`  \n The tooltip text to display for the button.  \n  \n### Return Value  \n `TRUE` if the tooltip has been displayed. `FALSE` otherwise.  \n  \n### Remarks  \n By default, this method does nothing. Override this method if you want to display the tooltip for the toolbar button.  \n  \n##  <a name=\"cframewndex__insertpane\"></a>  CFrameWndEx::InsertPane  \n Inserts a pane into a list of control bars and registers it with the docking manager.  \n  \n```  \nBOOL InsertPane(\n    CBasePane* pControlBar,  \n    CBasePane* pTarget,  \n    BOOL bAfter=TRUE);\n```  \n  \n### Parameters  \n `pControlBar`  \n A pointer to a control bar to be inserted into the list of control bars and registered with the docking manager.  \n  \n `pTarget`  \n A pointer to a control bar before or after which to insert the pane.  \n  \n `bAfter`  \n `TRUE` if you want to insert `pControlBar` after `pTarget`, `FALSE` otherwise.  \n  \n### Return Value  \n `TRUE` if the control bar was successfully inserted and registered, `FALSE` otherwise.  \n  \n### Remarks  \n You must register each control bar by using the [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md) to take a part in the docking layout.  \n  \n##  <a name=\"cframewndex__isfullscreen\"></a>  CFrameWndEx::IsFullScreen  \n Determines whether the frame window is in full screen mode.  \n  \n```  \nBOOL IsFullScreen() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the frame window is in full screen mode; otherwise `FALSE`.  \n  \n### Remarks  \n You can set the full screen mode by calling the [CFrameWndEx::EnableFullScreenMode](#cframewndex__enablefullscreenmode) method.  \n  \n##  <a name=\"cframewndex__ismenubaravailable\"></a>  CFrameWndEx::IsMenuBarAvailable  \n Determines whether the pointer to the menu bar object is valid.  \n  \n```  \nBOOL IsMenuBarAvailable() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the frame window has a menu bar; otherwise `FALSE`.  \n  \n##  <a name=\"cframewndex__ispointneardocksite\"></a>  CFrameWndEx::IsPointNearDockSite  \n Determines whether the point is located in an alignment zone.  \n  \n```  \nBOOL IsPointNearDockSite(\n    CPoint point,  \n    DWORD& dwBarAlignment,  \n    BOOL& bOuterEdge) const;\n\n \n```  \n  \n### Parameters  \n [in] `point`  \n The position of the point.  \n  \n [out] `dwBarAlignment`  \n Where the point is aligned. See the table in the Remarks section for possible values.  \n  \n [out] `bOuterEdge`  \n `TRUE` if the point is located close to the frame border; `FALSE` if the point is located in a client area.  \n  \n### Return Value  \n `TRUE` if the point is located in an alignment zone; otherwise, `FALSE`.  \n  \n### Remarks  \n The following table lists the possible values for the `dwBarAlignment` parameter.  \n  \n `CBRS_ALIGN_TOP`  \n Aligned to the top.  \n  \n `CBRS_ALIGN_RIGHT`  \n Aligned to the right.  \n  \n `CBRS_ALIGN_BOTTOM`  \n Aligned to the bottom.  \n  \n `CBRS_ALIGN_LEFT`  \n Aligned to the left.  \n  \n##  <a name=\"cframewndex__isprintpreview\"></a>  CFrameWndEx::IsPrintPreview  \n Determines whether the frame window is in print preview mode.  \n  \n```  \nBOOL IsPrintPreview();\n```  \n  \n### Return Value  \n `TRUE` if the frame window is in print preview mode; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__loadframe\"></a>  CFrameWndEx::LoadFrame  \n This method is called after construction to create the frame window and load its resources.  \n  \n```  \nvirtual BOOL LoadFrame(\n    UINT nIDResource,  \n    DWORD dwDefaultStyle = WS_OVERLAPPEDWINDOW | FWS_ADDTOTITLE,  \n    CWnd* pParentWnd = NULL,  \n    CCreateContext* pContext = NULL);\n```  \n  \n### Parameters  \n [in] `nIDResource`  \n The resource ID that is used to load all frame resources.  \n  \n [in] `dwDefaultStyle`  \n The default frame window style.  \n  \n [in] `pParentWnd`  \n Pointer to the parent window of the frame.  \n  \n [in] `pContext`  \n Pointer to a [CCreateContext Structure](../../mfc/reference/ccreatecontext-structure.md) class that is used by the framework during application creation.  \n  \n### Return Value  \n `TRUE` if the method was successful; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__negotiateborderspace\"></a>  CFrameWndEx::NegotiateBorderSpace  \n Implements OLE client border negotiation.  \n  \n```  \nvirtual BOOL NegotiateBorderSpace(\n    UINT nBorderCmd,  \n    LPRECT lpRectBorder);\n```  \n  \n### Parameters  \n [in] `nBorderCmd`  \n The border negotiation command. See the Remarks section for possible values.  \n  \n [in, out] `lpRectBorder`  \n Dimensions of the border.  \n  \n### Return Value  \n `TRUE` if the layout must be recalculated; otherwise, `FALSE`.  \n  \n### Remarks  \n The following table lists the possible values for the `nBorderCmd` parameter.  \n  \n `borderGet`  \n Get available OLE client space.  \n  \n `borderRequest`  \n Request OLE client space.  \n  \n `borderSet`  \n Set OLE client space.  \n  \n##  <a name=\"cframewndex__onactivate\"></a>  CFrameWndEx::OnActivate  \n The framework calls this method when user input is switched to or away from the frame.  \n  \n```  \nafx_msg void OnActivate(\n    UINT nState,  \n    CWnd* pWndOther,  \n    BOOL bMinimized);\n```  \n  \n### Parameters  \n [in] `nState`  \n Whether the frame is active or inactive. See the table in the Remarks section for possible values.  \n  \n [in] `pWndOther`  \n Pointer to another window that is switching user input with the current one.  \n  \n [in] `bMinimized`  \n The minimized state of the frame. `TRUE` if the frame is minimized; otherwise, `FALSE`.  \n  \n### Remarks  \n The following table lists the possible values for the `nState` parameter.  \n  \n `WA_ACTIVE`  \n The frame is selected by a method other than a mouse click.  \n  \n `WA_CLICKACTIVE`  \n The frame is selected by a mouse click.  \n  \n `WA_INACTIVE`  \n The frame is not selected.  \n  \n##  <a name=\"cframewndex__onactivateapp\"></a>  CFrameWndEx::OnActivateApp  \n Called by the framework when the application is either selected or deselected.  \n  \n```  \nafx_msg void OnActivateApp(\n    BOOL bActive,  \n    DWORD dwThreadID);\n```  \n  \n### Parameters  \n [in] `bActive`  \n `TRUE` if the application is selected; `FALSE` if the application is not selected.  \n  \n [in] `dwThreadID`  \n This parameter is not used.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onchangevisualmanager\"></a>  CFrameWndEx::OnChangeVisualManager  \n Called by the framework when a change to the frame requires a change to the visual manager.  \n  \n```  \nafx_msg LRESULT OnChangeVisualManager(\n    WPARAM wParam,  \n    LPARAM lParam);\n```  \n  \n### Parameters  \n [in] `wParam`  \n This parameter is not used.  \n  \n [in] `lParam`  \n This parameter is not used.  \n  \n### Return Value  \n Always returns 0.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onclose\"></a>  CFrameWndEx::OnClose  \n The framework calls this method to close the frame.  \n  \n```  \nafx_msg void OnClose();\n```  \n  \n### Remarks  \n If the frame is in print preview mode, it sends a Windows message to close the print preview; otherwise, if the frame hosts an OLE client, the client is deactivated.  \n  \n##  <a name=\"cframewndex__onclosedockingpane\"></a>  CFrameWndEx::OnCloseDockingPane  \n Called by the framework when the user clicks the **Close** button on a docking pane.  \n  \n```  \nvirtual BOOL OnCloseDockingPane(CDockablePane* pPane);\n```  \n  \n### Return Value  \n `TRUE` if the docking bar can be closed. `FALSE` otherwise  \n  \n### Remarks  \n The default implement does nothing. Override this method if you want to handle the hiding of the docking bar.  \n  \n##  <a name=\"cframewndex__oncloseminiframe\"></a>  CFrameWndEx::OnCloseMiniFrame  \n Called by the framework when the user clicks the **Close** button on a floating mini frame window.  \n  \n```  \nvirtual BOOL OnCloseMiniFrame(CPaneFrameWnd* pWnd);\n```  \n  \n### Return Value  \n `TRUE` if a floating mini frame window can be closed. `FALSE` otherwise.  \n  \n### Remarks  \n The default implementation does nothing. Override this method if you want to process the hiding of a floating mini frame window.  \n  \n##  <a name=\"cframewndex__onclosepopupmenu\"></a>  CFrameWndEx::OnClosePopupMenu  \n Called by the framework when an active pop-up menu processes a WM_DESTROY message.  \n  \n```  \nvirtual void OnClosePopupMenu(CMFCPopupMenu* pMenuPopup);\n```  \n  \n### Parameters  \n `pMenuPopup`  \n A pointer to a pop-up menu.  \n  \n### Remarks  \n The framework sends a WM_DESTROY message when it is about to close the window. Override this method if you want to handle notifications from `CMFCPopupMenu` objects that belong to the frame window when a `CMFCPopupMenu` object is processing a `WM_DESTROY` message sent by the framework when the window is being closed.  \n  \n##  <a name=\"cframewndex__oncmdmsg\"></a>  CFrameWndEx::OnCmdMsg  \n Dispatches command messages.  \n  \n```  \nvirtual BOOL OnCmdMsg(\n    UINT nID,  \n    int nCode,  \n    void* pExtra,  \n    AFX_CMDHANDLERINFO* pHandlerInfo);\n```  \n  \n### Parameters  \n [in] `nID`  \n The command ID.  \n  \n [in] `nCode`  \n Command message category.  \n  \n [in, out] `pExtra`  \n Pointer to a command object.  \n  \n [in, out] `pHandlerInfo`  \n Pointer to a command handler structure.  \n  \n### Return Value  \n `TRUE` if the command message was handled; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__oncontexthelp\"></a>  CFrameWndEx::OnContextHelp  \n Called by the framework to display context-related help.  \n  \n```  \nafx_msg void OnContextHelp();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__oncreate\"></a>  CFrameWndEx::OnCreate  \n Called by the framework after the frame is created.  \n  \n```  \nafx_msg int OnCreate(LPCREATESTRUCT lpCreateStruct);\n```  \n  \n### Parameters  \n [in] `lpCreateStruct`  \n A pointer to the [CREATESTRUCT Structure](../../mfc/reference/createstruct-structure.md) for the new frame.  \n  \n### Return Value  \n 0 to continue with the frame creation; -1 to destroy the frame.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__ondestroy\"></a>  CFrameWndEx::OnDestroy  \n Called by the framework when the frame is destroyed.  \n  \n```  \nafx_msg void OnDestroy();\n```  \n  \n### Remarks  \n The accelerator table and all windows are destroyed.  \n  \n##  <a name=\"cframewndex__ondrawmenuimage\"></a>  CFrameWndEx::OnDrawMenuImage  \n Called by the framework when the application draws the image associated with a menu item.  \n  \n```  \nvirtual BOOL OnDrawMenuImage(\n    CDC* pDC,  \n    const CMFCToolBarMenuButton* pMenuButton,  \n    const CRect& rectImage);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pMenuButton`  \n A pointer to a menu button whose image is being rendered.  \n  \n [in] `rectImage`  \n A pointer to a `Rect` structure that specifies the screen position and size of the image.  \n  \n### Return Value  \n `TRUE` if the framework successfully renders the image; `FALSE` otherwise.  \n  \n### Remarks  \n Override this method if you want to customize the image rendering for the menu items that belong to the menu bar owned by the `CFrameWndEx` derived object.  \n  \n##  <a name=\"cframewndex__ondrawmenulogo\"></a>  CFrameWndEx::OnDrawMenuLogo  \n Called by the framework when a `CMFCPopupMenu` object processes a WM_PAINT message.  \n  \n```  \nvirtual void OnDrawMenuLogo(\n    CDC* pDC,  \n    CMFCPopupMenu* pMenu,  \n    const CRect& rectLogo);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pMenu`  \n A pointer to the menu item.  \n  \n [in] `rectLogo`  \n A reference to a constant `CRect` structure that specifies the screen position and size of the menu logo.  \n  \n### Remarks  \n Override this function if you want to display a logo on the pop-up menu that belongs to the menu bar owned by the `CFrameWndEx` derived object.  \n  \n##  <a name=\"cframewndex__ondwmcompositionchanged\"></a>  CFrameWndEx::OnDWMCompositionChanged  \n Called by the framework when Desktop Window Manager (DWM) composition has been enabled or disabled.  \n  \n```  \nafx_msg LRESULT OnDWMCompositionChanged(\n    WPARAM wp,  \n    LPARAM lp);\n```  \n  \n### Parameters  \n [in] `wp`  \n This parameter is not used.  \n  \n [in] `lp`  \n This parameter is not used.  \n  \n### Return Value  \n Always returns 0.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onexitsizemove\"></a>  CFrameWndEx::OnExitSizeMove  \n Called by the framework when the frame stops moving or resizing.  \n  \n```  \nLRESULT OnExitSizeMove(\n    WPARAM wp,  \n    LPARAM lp);\n```  \n  \n### Parameters  \n [in] `wp`  \n This parameter is not used.  \n  \n [in] `lp`  \n This parameter is not used.  \n  \n### Return Value  \n Always returns 0.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__ongetminmaxinfo\"></a>  CFrameWndEx::OnGetMinMaxInfo  \n Called by the framework when the frame is resized to set window dimension limits.  \n  \n```  \nafx_msg void OnGetMinMaxInfo(MINMAXINFO FAR* lpMMI);\n```  \n  \n### Parameters  \n [in] `lpMMI`  \n Pointer to a [MINMAXINFO](http://msdn.microsoft.com/library/windows/desktop/ms632605) structure.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onidleupdatecmdui\"></a>  CFrameWndEx::OnIdleUpdateCmdUI  \n Called by the framework to update the frame display when command processing is idle.  \n  \n```  \nafx_msg LRESULT OnIdleUpdateCmdUI(\n    WPARAM wParam = 0,  \n    LPARAM lParam = 0);\n```  \n  \n### Parameters  \n [in] `wParam`  \n This parameter is not used.  \n  \n [in] `lParam`  \n This parameter is not used.  \n  \n### Return Value  \n Always returns 0.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onlbuttondown\"></a>  CFrameWndEx::OnLButtonDown  \n The framework calls this method when the user presses the left mouse button.  \n  \n```  \nafx_msg void OnLButtonDown(\n    UINT nFlags,  \n    CPoint point);\n```  \n  \n### Parameters  \n [in] `nFlags`  \n Indicates whether the user pressed modifier keys. For possible values see the parameter `wParam` in [WM_LBUTTONDOWN Notification](http://msdn.microsoft.com/library/windows/desktop/ms645607).  \n  \n [in] `point`  \n Specifies the x and y coordinates of the pointer, relative to the upper-left corner of the window.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onlbuttonup\"></a>  CFrameWndEx::OnLButtonUp  \n The framework calls this method when the user releases the left mouse button.  \n  \n```  \nafx_msg void OnLButtonUp(\n    UINT nFlags,  \n    CPoint point);\n```  \n  \n### Parameters  \n [in] `nFlags`  \n Indicates whether the user pressed modifier keys. For possible values see the parameter `wParam` in [WM_LBUTTONUP Notification](http://msdn.microsoft.com/library/windows/desktop/ms645608).  \n  \n [in] `point`  \n Specifies the x and y coordinates of the pointer, relative to the upper-left corner of the window.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onmenubuttontoolhittest\"></a>  CFrameWndEx::OnMenuButtonToolHitTest  \n Called by the framework when a `CMFCToolBarButton` object processes a `WM_NCHITTEST` message.  \n  \n```  \nvirtual BOOL OnMenuButtonToolHitTest(\n    CMFCToolBarButton* pButton,  \n    TOOLINFO* pTI);\n```  \n  \n### Parameters  \n [in] `pButton`  \n A pointer to the tool bar button.  \n  \n [out] `pTI`  \n A pointer to a tool information structure.  \n  \n### Return Value  \n `TRUE` if the application fills the `pTI` parameter. `FALSE` otherwise.  \n  \n### Remarks  \n Override this method if you want to provide a tooltip information about a specific menu item.  \n  \n##  <a name=\"cframewndex__onmenuchar\"></a>  CFrameWndEx::OnMenuChar  \n Called by the framework when a menu is displayed and the user presses a key that does not correspond to a command.  \n  \n```  \nafx_msg LRESULT OnMenuChar(\n    UINT nChar,  \n    UINT nFlags,  \n    CMenu* pMenu);\n```  \n  \n### Parameters  \n [in] `nChar`  \n Character code of the pressed key.  \n  \n [in] `nFlags`  \n Contains the `MF_POPUP` flag if the menu displayed is a submenu; contains the `MF_SYSMENU` flag if the menu displayed is a control menu.  \n  \n [in] `pMenu`  \n Pointer to a menu.  \n  \n### Return Value  \n The high-order word must be one of the following values.  \n  \n `0`  \n The framework should ignore the keystroke.  \n  \n `1`  \n The framework should close the menu.  \n  \n `2`  \n The framework should select one of the items displayed in the menu. The low-order word contains the ID of the command to select.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onmousemove\"></a>  CFrameWndEx::OnMouseMove  \n The framework calls this method when the pointer moves.  \n  \n```  \nafx_msg void OnMouseMove(\n    UINT nFlags,  \n    CPoint point);\n```  \n  \n### Parameters  \n [in] `nFlags`  \n Indicates whether a user pressed modifier keys. For possible values see the parameter `wParam` in [WM_MOUSEMOVE Notification](http://msdn.microsoft.com/library/windows/desktop/ms645616).  \n  \n [in] `point`  \n Specifies the x and y coordinates of the pointer relative to the upper-left corner of the window.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onmoveminiframe\"></a>  CFrameWndEx::OnMoveMiniFrame  \n Called by the framework when a pane window moves.  \n  \n```  \nvirtual BOOL OnMoveMiniFrame(CWnd* pFrame);\n```  \n  \n### Parameters  \n [in] `pFrame`  \n Pointer to the [CPaneFrameWnd Class](../../mfc/reference/cpaneframewnd-class.md) pane window.  \n  \n### Return Value  \n `TRUE` if the pane window was not docked; `FALSE` if the pane window was docked.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onncactivate\"></a>  CFrameWndEx::OnNcActivate  \n Called by the framework when the non-client area of the frame must be redrawn to indicate a change in the active state.  \n  \n```  \nafx_msg BOOL OnNcActivate(BOOL bActive);\n```  \n  \n### Parameters  \n [in] `bActive`  \n `TRUE` to draw the frame active; `FALSE` to draw the frame inactive.  \n  \n### Return Value  \n Nonzero to continue with default processing; 0 to prevent the non-client area from being deactivated.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onnccalcsize\"></a>  CFrameWndEx::OnNcCalcSize  \n Called by the framework when the size and position of the client area must be calculated.  \n  \n```  \nafx_msg void OnNcCalcSize(\n    BOOL bCalcValidRects,  \n    NCCALCSIZE_PARAMS FAR* lpncsp);\n```  \n  \n### Parameters  \n [in] `bCalcValidRects`  \n `TRUE` when the application must specify a valid client area; otherwise, `FALSE`.  \n  \n [in] `lpncsp`  \n Pointer to a `NCCALCSIZE_PARAMS` structure that contains frame dimension changes.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onnchittest\"></a>  CFrameWndEx::OnNcHitTest  \n Called by the framework when the pointer moves or when a mouse button is pressed or released.  \n  \n```  \nafx_msg LRESULT OnNcHitTest(CPoint point);\n```  \n  \n### Parameters  \n [in] `point`  \n The location of the pointer in screen coordinates.  \n  \n### Return Value  \n A pointer hit enumerated value. For a list of possible values see [WM_NCHITTEST Notification](http://msdn.microsoft.com/library/windows/desktop/ms645618).  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onncmousemove\"></a>  CFrameWndEx::OnNcMouseMove  \n Called by the framework when the pointer moves in a non-client area.  \n  \n```  \nafx_msg void OnNcMouseMove(\n    UINT nHitTest,  \n    CPoint point);\n```  \n  \n### Parameters  \n [in] `nHitTest`  \n A pointer hit enumerated value. For a list of possible values see [WM_NCHITTEST Notification](http://msdn.microsoft.com/library/windows/desktop/ms645618).  \n  \n [in] `point`  \n The location of the pointer in screen coordinates.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onncpaint\"></a>  CFrameWndEx::OnNcPaint  \n Called by the framework when the non-client area must be painted.  \n  \n```  \nafx_msg void OnNcPaint();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onpanecheck\"></a>  CFrameWndEx::OnPaneCheck  \n Called by the framework to control the visibility of a pane.  \n  \n```  \nafx_msg BOOL OnPaneCheck(UINT nID);\n```  \n  \n### Parameters  \n [in] `nID`  \n Control ID of a pane.  \n  \n### Return Value  \n `TRUE` if the command was handled; `FALSE` to continue with command processing.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onpostpreviewframe\"></a>  CFrameWndEx::OnPostPreviewFrame  \n Called by the framework when the user changes the print preview mode.  \n  \n```  \nafx_msg LRESULT OnPostPreviewFrame(\n    WPARAM wParam,  \n    LPARAM lParam);\n```  \n  \n### Parameters  \n [in] `wParam`  \n This parameter is not used.  \n  \n [in] `lParam`  \n `TRUE` when the frame is in print preview mode; `FALSE` when print preview mode is off.  \n  \n### Return Value  \n Always returns 0.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onpowerbroadcast\"></a>  CFrameWndEx::OnPowerBroadcast  \n Called by the framework when a power management event occurs.  \n  \n```  \nafx_msg LRESULT OnPowerBroadcast(\n    WPARAM wp,  \n    LPARAM lp);\n```  \n  \n### Parameters  \n [in] `wp`  \n The power management event. For a list of possible values see [WM_POWERBROADCAST Message](http://msdn.microsoft.com/library/windows/desktop/aa373247).  \n  \n [in] `lp`  \n This parameter is not used.  \n  \n### Return Value  \n Result from calling the default window procedure.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onsetmenu\"></a>  CFrameWndEx::OnSetMenu  \n Called by the framework to replace the frame window menu.  \n  \n```  \nafx_msg LRESULT OnSetMenu(\n    WPARAM wp,  \n    LPARAM lp);\n\n \nBOOL OnSetMenu(\n    HMENU hmenu);\n```  \n  \n### Parameters  \n [in] `wp`  \n Handle to the new frame window menu.  \n  \n [in] `lp`  \n Handle to the new window menu.  \n  \n [in] `hmenu`  \n Handle to the new frame window menu.  \n  \n### Return Value  \n `LRESULT` is the result from calling the default window procedure.  \n  \n `BOOL` is `TRUE` if the event was handled; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onsetpreviewmode\"></a>  CFrameWndEx::OnSetPreviewMode  \n Called by the framework to set the print preview mode for the frame.  \n  \n```  \nvirtual void OnSetPreviewMode(\n    BOOL bPreview,  \n    CPrintPreviewState* pState);\n```  \n  \n### Parameters  \n [in] `bPreview`  \n `TRUE` to enable print preview; `FALSE` to disable print preview.  \n  \n [in] `pState`  \n Pointer to a `CPrintPreviewState` frame state structure.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onsettext\"></a>  CFrameWndEx::OnSetText  \n Called by the framework to set the text of a window.  \n  \n```  \nafx_msg LRESULT OnSetText(\n    WPARAM wParam,  \n    LPARAM lParam);\n```  \n  \n### Parameters  \n [in] `wParam`  \n This parameter is not used.  \n  \n [in] `lParam`  \n Pointer to the text for the window.  \n  \n### Return Value  \n Return value from a call to [DefWindowProc](http://msdn.microsoft.com/library/windows/desktop/ms633572).  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onshowcustomizepane\"></a>  CFrameWndEx::OnShowCustomizePane  \n Called by the framework when it displays a `QuickCustomizePane`.  \n  \n```  \nvirtual BOOL OnShowCustomizePane(\n    CMFCPopupMenu* pMenuPane,  \n    UINT uiToolbarID);\n```  \n  \n### Parameters  \n [in] `pMenuPane`  \n A pointer to the quick customize pane.  \n  \n [in] `uiToolbarID`  \n The control ID of the toolbar to customize.  \n  \n### Return Value  \n This method always return `TRUE`.  \n  \n### Remarks  \n The quick customize menu is a pop-up menu that appears when you click the toolbar’s customize button  \n  \n##  <a name=\"cframewndex__onshowpanes\"></a>  CFrameWndEx::OnShowPanes  \n Called by the framework to show or hide panes.  \n  \n```  \nvirtual BOOL OnShowPanes(BOOL bShow);\n```  \n  \n### Parameters  \n [in] `bShow`  \n `TRUE` if the application shows the panes; `FALSE` otherwise.  \n  \n### Return Value  \n This method always return `FALSE`.  \n  \n### Remarks  \n The default implementation shows the panes if `bShow` is `TRUE` and the panes are hidden or when `bShow` is `FALSE` and the panes are visible.  \n  \n The default implementation hides the panes if `bShow` is `TRUE` and the panes are visible or when `bShow` is `FALSE` and the panes are hidden.  \n  \n Override this method in a derived class to execute custom code when the framework shows or hides panes.  \n  \n##  <a name=\"cframewndex__onshowpopupmenu\"></a>  CFrameWndEx::OnShowPopupMenu  \n Called by the framework when it displays a pop-up menu.  \n  \n```  \nvirtual BOOL OnShowPopupMenu(CMFCPopupMenu* pMenu);\n```  \n  \n### Parameters  \n [in] `pMenu`  \n A pointer to a pop-up menu.  \n  \n### Return Value  \n `TRUE` if the pop-up menu is visible; otherwise `FALSE`.  \n  \n### Remarks  \n Override this method in a derived class to execute custom code when the framework displays a pop-up menu. For example, override this method to change the background color of the commands in a pop-up menu.  \n  \n##  <a name=\"cframewndex__onsize\"></a>  CFrameWndEx::OnSize  \n Called by the framework after the frame's size changes.  \n  \n```  \nafx_msg void OnSize(\n    UINT nType,  \n    int cx,  \n    int cy);\n```  \n  \n### Parameters  \n [in] `nType`  \n The type of resizing. For possible values see the parameter `wParam` in [WM_SIZE Notification](http://msdn.microsoft.com/library/windows/desktop/ms632646).  \n  \n [in] `cx`  \n New width of the frame in pixels.  \n  \n [in] `cy`  \n New height of the frame in pixels.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onsizing\"></a>  CFrameWndEx::OnSizing  \n Called by the framework when the user resizes the frame.  \n  \n```  \nafx_msg void OnSizing(\n    UINT fwSide,  \n    LPRECT pRect);\n```  \n  \n### Parameters  \n [in] `fwSide`  \n The edge of the frame that is moved. See the parameter `wParam` in [WM_SIZING Notification](http://msdn.microsoft.com/library/windows/desktop/ms632647).  \n  \n [in, out] `pRect`  \n Pointer to a [CRect](../../atl-mfc-shared/reference/crect-class.md) or [RECT](../../mfc/reference/rect-structure1.md) structure that contains the frame's coordinates.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onsyscolorchange\"></a>  CFrameWndEx::OnSysColorChange  \n Called by the framework when the system colors change.  \n  \n```  \nvoid OnSysColorChange();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__ontearoffmenu\"></a>  CFrameWndEx::OnTearOffMenu  \n Called by the framework when the application displays a menu that has a tear-off bar.  \n  \n```  \nvirtual BOOL OnTearOffMenu(\n    CMFCPopupMenu* pMenuPopup,  \n    CPane* pBar);\n```  \n  \n### Parameters  \n [in] `pMenuPopup`  \n A pointer to a pop-up menu.  \n  \n [in] `pBar`  \n A pointer to a tear-off bar.  \n  \n### Return Value  \n `TRUE` if the pop-up menu with the tear-off bar is enabled; otherwise `FALSE`.  \n  \n### Remarks  \n Override this method in a derived class to execute custom code when the framework displays a control bar.  \n  \n The default implementation does nothing and returns `TRUE`.  \n  \n##  <a name=\"cframewndex__ontoolbarcontextmenu\"></a>  CFrameWndEx::OnToolbarContextMenu  \n Called by the framework to build a toolbar pop-up menu.  \n  \n```  \nafx_msg LRESULT OnToolbarContextMenu(\n    WPARAM wp,  \n    LPARAM lp);\n```  \n  \n### Parameters  \n [in] `wp`  \n This parameter is not used.  \n  \n [in] `lp`  \n This parameter is not used.  \n  \n### Return Value  \n Always returns 1.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__ontoolbarcreatenew\"></a>  CFrameWndEx::OnToolbarCreateNew  \n The framework calls this method to create a new toolbar.  \n  \n```  \nafx_msg LRESULT OnToolbarCreateNew(\n    WPARAM wp,  \n    LPARAM lp);\n```  \n  \n### Parameters  \n [in] `wp`  \n This parameter is not used.  \n  \n [in] `lp`  \n Pointer to the text for the title bar of the toolbar.  \n  \n### Return Value  \n Pointer to the new toolbar; or `NULL` if a toolbar was not created.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__ontoolbardelete\"></a>  CFrameWndEx::OnToolbarDelete  \n Called by the framework when a toolbar is deleted.  \n  \n```  \nafx_msg LRESULT OnToolbarDelete(\n    WPARAM, \n    LPARAM lp);\n```  \n  \n### Parameters  \n [in]  \n This parameter is not used.  \n  \n [in] `lp`  \n Pointer to a toolbar.  \n  \n### Return Value  \n `TRUE` if the toolbar was deleted; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onupdateframemenu\"></a>  CFrameWndEx::OnUpdateFrameMenu  \n Called by the framework to set the frame menu.  \n  \n```  \nvirtual void OnUpdateFrameMenu(HMENU hMenuAlt);\n```  \n  \n### Parameters  \n [in] `hMenuAlt`  \n Handle to the alternative menu.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onupdateframetitle\"></a>  CFrameWndEx::OnUpdateFrameTitle  \n The framework calls this method to update the title bar of the frame window.  \n  \n```  \nvirtual void OnUpdateFrameTitle(BOOL bAddToTitle);\n```  \n  \n### Parameters  \n [in] `bAddToTitle`  \n `TRUE` to add the active document title to the frame window title bar; otherwise `FALSE.`  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onupdatepanemenu\"></a>  CFrameWndEx::OnUpdatePaneMenu  \n Called by the framework to update the pane menu.  \n  \n```  \nafx_msg void OnUpdatePaneMenu(CCmdUI* pCmdUI);\n```  \n  \n### Parameters  \n [in] `pCmdUI`  \n Pointer to the pane user interface object.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onwindowposchanged\"></a>  CFrameWndEx::OnWindowPosChanged  \n Called by the framework when the frame size, position, or z-order has changed because of a call to a window management method.  \n  \n```  \nafx_msg void OnWindowPosChanged(WINDOWPOS FAR* lpwndpos);\n```  \n  \n### Parameters  \n [in] `lpwndpos`  \n Pointer to a [WINDOWPOS](../../mfc/reference/windowpos-structure1.md) structure that contains the new size and position.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__panefrompoint\"></a>  CFrameWndEx::PaneFromPoint  \n Searches each pane for the given point.  \n  \n```  \nCBasePane* PaneFromPoint(\n    CPoint point,  \n    int nSensitivity,  \n    bool bExactBar,  \n    CRuntimeClass* pRTCBarType) const;\n\n \nCBasePane* PaneFromPoint(\n    CPoint point,  \n    int nSensitivity,  \n    DWORD& dwAlignment,  \n    CRuntimeClass* pRTCBarType) const;\n\n \n```  \n  \n### Parameters  \n [in] `point`  \n The screen coordinates of the point to check.  \n  \n [in] `nSensitivity`  \n Expand the bounding rectangle of each control bar by this amount when searching for point.  \n  \n [in] `bExactBar`  \n `TRUE` to ignore the `nSensitivity` parameter; otherwise, `FALSE`.  \n  \n [in] `pRTCBarType`  \n If not `NULL`, the method searches only the control bars of the specified type.  \n  \n [out] `dwAlignment`  \n If successful, this parameter contains the side of the control bar that is closest to the specified point. Otherwise, this parameter is not initialized.  \n  \n### Return Value  \n A pointer to a control bar that contains the `point`; `NULL` if no control is found.  \n  \n### Remarks  \n This method searches all the control bars in your application for a `point`.  \n  \n Use `nSensitivity` to increase the size of the search area. Use `pRTCBarType` to restrict the types of control bars that the method searches.  \n  \n##  <a name=\"cframewndex__pretranslatemessage\"></a>  CFrameWndEx::PreTranslateMessage  \n Handles specific window messages before they are dispatched.  \n  \n```  \nvirtual BOOL PreTranslateMessage(MSG* pMsg);\n```  \n  \n### Parameters  \n [in] `pMsg`  \n A pointer to a [MSG](../../mfc/reference/msg-structure1.md) structure that contains the message to process.  \n  \n### Return Value  \n Non-zero if the message was handled and should not be dispatched; 0 if the message was not handled and should be dispatched.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__recalclayout\"></a>  CFrameWndEx::RecalcLayout  \n Adjusts the layout of the frame and its child windows.  \n  \n```  \nvirtual void RecalcLayout(BOOL bNotify = TRUE);\n```  \n  \n### Parameters  \n [in] `bNotify`  \n Specifies whether to notify the OLE client item about the layout change.  \n  \n### Remarks  \n This method is called when the size of the frame window has changed or when control bars are displayed or hidden.  \n  \n##  <a name=\"cframewndex__removepanefromdockmanager\"></a>  CFrameWndEx::RemovePaneFromDockManager  \n Unregisters a pane and removes it from the docking manager.  \n  \n```  \nvoid RemovePaneFromDockManager(\n    CBasePane* pControlBar,  \n    BOOL bDestroy,  \n    BOOL bAdjustLayout,  \n    BOOL bAutoHide,  \n    CBasePane* pBarReplacement);\n```  \n  \n### Parameters  \n [in] `pControlBar`  \n A pointer to the control bar pane to remove.  \n  \n [in] `bDestroy`  \n `TRUE` to destroy the control bar after removing it; `FALSE` otherwise.  \n  \n [in] `bAdjustLayout`  \n `TRUE` to adjust the docking layout; `FALSE` otherwise.  \n  \n [in] `bAutoHide`  \n `TRUE` if the control bar is in auto-hide mode; `FALSE` otherwise.  \n  \n [in] `pBarReplacement`  \n A pointer to a pane that replaces the removed pane.  \n  \n### Remarks  \n Use this method to remove a control bar from the docking layout of the frame window.  \n  \n The [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md) handles the layout of control bars. You must register each control bar with the docking manager by using the [CFrameWndEx::AddPane](#cframewndex__addpane) method or the [CFrameWndEx::InsertPane](#cframewndex__insertpane) method.  \n  \n##  <a name=\"cframewndex__setdockstate\"></a>  CFrameWndEx::SetDockState  \n Restores the docking layout to the docking state stored in the registry.  \n  \n```  \nvoid SetDockState(const CDockState& state);\n```  \n  \n### Parameters  \n `state`  \n The docking state. This parameter is ignored.  \n  \n##  <a name=\"cframewndex__setprintpreviewframe\"></a>  CFrameWndEx::SetPrintPreviewFrame  \n Sets the print preview frame window.  \n  \n```  \nvoid SetPrintPreviewFrame(CFrameWnd* pWnd);\n```  \n  \n### Parameters  \n [in] `pWnd`  \n Pointer to a print preview frame window.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__setuptoolbarmenu\"></a>  CFrameWndEx::SetupToolbarMenu  \n Inserts user-defined commands into a toolbar menu.  \n  \n```  \nvoid SetupToolbarMenu(\n    CMenu& menu,  \n    const UINT uiViewUserToolbarCmdFirst,  \n    const UINT uiViewUserToolbarCmdLast);\n```  \n  \n### Parameters  \n [in] `menu`  \n A `CMenu` object to be modified.  \n  \n [in] `uiViewUserToolbarCmdFirst`  \n The first user-defined command.  \n  \n [in] `uiViewUserToolbarCmdLast`  \n The last user-defined command.  \n  \n### Remarks  \n The framework stores user-defined commands in a list. Use `uiViewUserToolbarCmdFirst` and `uiViewUserToolbarCmdList` to specify the indexes of the commands to insert.  \n  \n##  <a name=\"cframewndex__showfullscreen\"></a>  CFrameWndEx::ShowFullScreen  \n Switches the main frame between full-screen mode and regular mode.  \n  \n```  \nvoid ShowFullScreen();\n```  \n  \n##  <a name=\"cframewndex__showpane\"></a>  CFrameWndEx::ShowPane  \n Shows or hides the specified pane.  \n  \n```  \nvoid ShowPane(\n    CBasePane* pBar,  \n    BOOL bShow,  \n    BOOL bDelay,  \n    BOOL bActivate);\n```  \n  \n### Parameters  \n [in] `pBar`  \n A pointer to the control bar to show or hide.  \n  \n [in] `bShow`  \n If `TRUE`, the application shows the control bar. Otherwise, the application hides the control bar.  \n  \n [in] `bDelay`  \n If `TRUE`, delay the adjustment of the docking layout until the framework calls [CFrameWndEx::AdjustDockingLayout](#cframewndex__adjustdockinglayout). Otherwise, recalculate the docking layout immediately.  \n  \n [in] `bActivate`  \n If `TRUE`, make the control bar active. Otherwise, display the control bar in an inactive state.  \n  \n##  <a name=\"cframewndex__updatecaption\"></a>  CFrameWndEx::UpdateCaption  \n Called by the framework to update the window frame caption.  \n  \n```  \nvoid UpdateCaption();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__winhelp\"></a>  CFrameWndEx::WinHelp  \n Invokes either the WinHelp application or context related help.  \n  \n```  \nvirtual void WinHelp(\n    DWORD dwData,  \n    UINT nCmd = HELP_CONTEXT);\n```  \n  \n### Parameters  \n `dwData`  \n Data that depends on the `nCmd` parameter. For a list of possible values see [WinHelp](http://msdn.microsoft.com/library/windows/desktop/bb762267).  \n  \n `nCmd`  \n The help command. For a list of possible values see [WinHelp](http://msdn.microsoft.com/library/windows/desktop/bb762267).  \n  \n### Remarks  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CFrameWnd](../../mfc/reference/cframewnd-class.md)\n"}