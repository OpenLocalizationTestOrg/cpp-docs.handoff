{"nodes":[{"pos":[12,49],"content":"CStatusBarCtrl Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CStatusBarCtrl Class | Microsoft Docs","pos":[0,37]}]},{"content":"CStatusBarCtrl Class","pos":[694,714]},{"content":"Provides the functionality of the Windows common status bar control.","pos":[715,783]},{"content":"Syntax","pos":[792,798]},{"content":"Members","pos":[859,866]},{"content":"Public Constructors","pos":[876,895]},{"content":"Name","pos":[902,906]},{"content":"Description","pos":[907,918]},{"content":"CStatusBarCtrl::CStatusBarCtrl","pos":[957,987]},{"pos":[1022,1059],"content":"Constructs a <ph id=\"ph1\">`CStatusBarCtrl`</ph> object.","source":"Constructs a `CStatusBarCtrl` object."},{"content":"Public Methods","pos":[1070,1084]},{"content":"Name","pos":[1091,1095]},{"content":"Description","pos":[1096,1107]},{"content":"CStatusBarCtrl::Create","pos":[1146,1168]},{"pos":[1195,1269],"content":"Creates a status bar control and attaches it to a <ph id=\"ph1\">`CStatusBarCtrl`</ph> object.","source":"Creates a status bar control and attaches it to a `CStatusBarCtrl` object."},{"content":"CStatusBarCtrl::CreateEx","pos":[1275,1299]},{"pos":[1328,1445],"content":"Creates a status bar control with the specified Windows extended styles and attaches it to a <ph id=\"ph1\">`CStatusBarCtrl`</ph> object.","source":"Creates a status bar control with the specified Windows extended styles and attaches it to a `CStatusBarCtrl` object."},{"content":"CStatusBarCtrl::DrawItem","pos":[1451,1475]},{"content":"Called when a visual aspect of an owner-draw status bar control changes.","pos":[1504,1576]},{"content":"CStatusBarCtrl::GetBorders","pos":[1582,1608]},{"content":"Retrieves the current widths of the horizontal and vertical borders of a status bar control.","pos":[1639,1731]},{"content":"CStatusBarCtrl::GetIcon","pos":[1737,1760]},{"content":"Retrieves the icon for a part (also known as a pane) in the current status bar control.","pos":[1788,1875]},{"content":"CStatusBarCtrl::GetParts","pos":[1881,1905]},{"content":"Retrieves a count of the parts in a status bar control.","pos":[1934,1989]},{"content":"CStatusBarCtrl::GetRect","pos":[1995,2018]},{"content":"Retrieves the bounding rectangle of a part in a status bar control.","pos":[2046,2113]},{"content":"CStatusBarCtrl::GetText","pos":[2119,2142]},{"content":"Retrieves the text from the given part of a status bar control.","pos":[2170,2233]},{"content":"CStatusBarCtrl::GetTextLength","pos":[2239,2268]},{"content":"Retrieve the length, in characters, of the text from the given part of a status bar control.","pos":[2302,2394]},{"content":"CStatusBarCtrl::GetTipText","pos":[2400,2426]},{"content":"Retrieves the tooltip text for a pane in a status bar.","pos":[2457,2511]},{"content":"CStatusBarCtrl::IsSimple","pos":[2517,2541]},{"content":"Checks a status window control to determine if it is in simple mode.","pos":[2570,2638]},{"content":"CStatusBarCtrl::SetBkColor","pos":[2644,2670]},{"content":"Sets the background color in a status bar.","pos":[2701,2743]},{"content":"CStatusBarCtrl::SetIcon","pos":[2749,2772]},{"content":"Sets the icon for a pane in a status bar.","pos":[2800,2841]},{"content":"CStatusBarCtrl::SetMinHeight","pos":[2847,2875]},{"content":"Sets the minimum height of a status bar control's drawing area.","pos":[2908,2971]},{"content":"CStatusBarCtrl::SetParts","pos":[2977,3001]},{"content":"Sets the number of parts in a status bar control and the coordinate of the right edge of each part.","pos":[3030,3129]},{"content":"CStatusBarCtrl::SetSimple","pos":[3135,3160]},{"pos":[3190,3317],"content":"Specifies whether a status bar control displays simple text or displays all control parts set by a previous call to <ph id=\"ph1\">`SetParts`</ph>.","source":"Specifies whether a status bar control displays simple text or displays all control parts set by a previous call to `SetParts`."},{"content":"CStatusBarCtrl::SetText","pos":[3323,3346]},{"content":"Sets the text in the given part of a status bar control.","pos":[3374,3430]},{"content":"CStatusBarCtrl::SetTipText","pos":[3436,3462]},{"content":"Sets the tooltip text for a pane in a status bar.","pos":[3493,3542]},{"content":"Remarks","pos":[3552,3559]},{"content":"A \"status bar control\" is a horizontal window, usually displayed at the bottom of a parent window, in which an application can display various kinds of status information.","pos":[3563,3734]},{"content":"The status bar control can be divided into parts to display more than one type of information.","pos":[3735,3829]},{"pos":[3836,3988],"content":"This control (and therefore the <ph id=\"ph1\">`CStatusBarCtrl`</ph> class) is available only to programs running under Windows 95/98 and Windows NT version 3.51 and later.","source":"This control (and therefore the `CStatusBarCtrl` class) is available only to programs running under Windows 95/98 and Windows NT version 3.51 and later."},{"pos":[3995,4147],"content":"For more information on using <ph id=\"ph1\">`CStatusBarCtrl`</ph>, see <bpt id=\"p1\">[</bpt>Controls<ept id=\"p1\">](../../mfc/controls-mfc.md)</ept> and <bpt id=\"p2\">[</bpt>Using CStatusBarCtrl<ept id=\"p2\">](../../mfc/using-cstatusbarctrl.md)</ept>.","source":"For more information on using `CStatusBarCtrl`, see [Controls](../../mfc/controls-mfc.md) and [Using CStatusBarCtrl](../../mfc/using-cstatusbarctrl.md)."},{"content":"Inheritance Hierarchy","pos":[4156,4177]},{"content":"CObject","pos":[4182,4189]},{"content":"CCmdTarget","pos":[4236,4246]},{"content":"CWnd","pos":[4296,4300]},{"content":"Requirements","pos":[4368,4380]},{"pos":[4384,4404],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxcmn.h","source":"**Header:** afxcmn.h"},{"pos":[4453,4475],"content":"CStatusBarCtrl::Create"},{"pos":[4479,4553],"content":"Creates a status bar control and attaches it to a <ph id=\"ph1\">`CStatusBarCtrl`</ph> object.","source":"Creates a status bar control and attaches it to a `CStatusBarCtrl` object."},{"content":"Parameters","pos":[4683,4693]},{"content":"Specifies the status bar control's style.","pos":[4710,4751]},{"content":"Apply any combination of status bar control styles listed in <bpt id=\"p1\">[</bpt>Common Control Styles<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775498)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[4752,4956],"source":" Apply any combination of status bar control styles listed in [Common Control Styles](http://msdn.microsoft.com/library/windows/desktop/bb775498) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"This parameter must include the <bpt id=\"p1\">**</bpt>WS_CHILD<ept id=\"p1\">**</ept> style.","pos":[4957,5008],"source":" This parameter must include the **WS_CHILD** style."},{"content":"It should also include the <bpt id=\"p1\">**</bpt>WS_VISIBLE<ept id=\"p1\">**</ept> style.","pos":[5009,5057],"source":" It should also include the **WS_VISIBLE** style."},{"content":"Specifies the status bar control's size and position.","pos":[5074,5127]},{"content":"It can be either a <bpt id=\"p1\">[</bpt>CRect<ept id=\"p1\">](../../atl-mfc-shared/reference/crect-class.md)</ept> object or a <bpt id=\"p2\">[</bpt>RECT<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure.","pos":[5128,5291],"source":" It can be either a [CRect](../../atl-mfc-shared/reference/crect-class.md) object or a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure."},{"content":"Specifies the status bar control's parent window, usually a <ph id=\"ph1\">`CDialog`</ph>.","pos":[5314,5384],"source":" Specifies the status bar control's parent window, usually a `CDialog`."},{"content":"It must not be <bpt id=\"p1\">**</bpt>NULL.<ept id=\"p1\">**</ept>","pos":[5385,5409],"source":" It must not be **NULL.**"},{"content":"Specifies the status bar control's ID.","pos":[5425,5463]},{"content":"Return Value","pos":[5473,5485]},{"content":"Nonzero if successful; otherwise zero.","pos":[5489,5527]},{"content":"Remarks","pos":[5537,5544]},{"content":"You construct a <ph id=\"ph1\">`CStatusBarCtrl`</ph> in two steps.","pos":[5548,5594],"source":"You construct a `CStatusBarCtrl` in two steps."},{"content":"First, call the constructor, and then call <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>, which creates the status bar control and attaches it to the <ph id=\"ph1\">`CStatusBarCtrl`</ph> object.","pos":[5595,5734],"source":" First, call the constructor, and then call **Create**, which creates the status bar control and attaches it to the `CStatusBarCtrl` object."},{"content":"The default position of a status window is along the bottom of the parent window, but you can specify the <ph id=\"ph1\">`CCS_TOP`</ph> style to have it appear at the top of the parent window's client area.","pos":[5741,5927],"source":"The default position of a status window is along the bottom of the parent window, but you can specify the `CCS_TOP` style to have it appear at the top of the parent window's client area."},{"content":"You can specify the <bpt id=\"p1\">**</bpt>SBARS_SIZEGRIP<ept id=\"p1\">**</ept> style to include a sizing grip at the right end of the status window.","pos":[5928,6036],"source":" You can specify the **SBARS_SIZEGRIP** style to include a sizing grip at the right end of the status window."},{"content":"Combining the <ph id=\"ph1\">`CCS_TOP`</ph> and <bpt id=\"p1\">**</bpt>SBARS_SIZEGRIP<ept id=\"p1\">**</ept> styles is not recommended, because the resulting sizing grip is not functional even though the system draws it in the status window.","pos":[6037,6216],"source":" Combining the `CCS_TOP` and **SBARS_SIZEGRIP** styles is not recommended, because the resulting sizing grip is not functional even though the system draws it in the status window."},{"pos":[6223,6356],"content":"To create a status bar with extended window styles, call <bpt id=\"p1\">[</bpt>CStatusBarCtrl::CreateEx<ept id=\"p1\">](#cstatusbarctrl__createex)</ept> instead of <bpt id=\"p2\">**</bpt>Create<ept id=\"p2\">**</ept>.","source":"To create a status bar with extended window styles, call [CStatusBarCtrl::CreateEx](#cstatusbarctrl__createex) instead of **Create**."},{"content":"Example","pos":[6366,6373]},{"pos":[6388,6412],"content":"NVC_MFC_CStatusBarCtrl#1"},{"pos":[6529,6553],"content":"CStatusBarCtrl::CreateEx"},{"pos":[6557,6643],"content":"Creates a control (a child window) and associates it with the <ph id=\"ph1\">`CStatusBarCtrl`</ph> object.","source":"Creates a control (a child window) and associates it with the `CStatusBarCtrl` object."},{"content":"Parameters","pos":[6798,6808]},{"content":"Specifies the extended style of the control being created.","pos":[6827,6885]},{"content":"For a list of extended Windows styles, see the <ph id=\"ph1\">`dwExStyle`</ph> parameter for <bpt id=\"p1\">[</bpt>CreateWindowEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632680)</ept> in the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[6886,7095],"source":" For a list of extended Windows styles, see the `dwExStyle` parameter for [CreateWindowEx](http://msdn.microsoft.com/library/windows/desktop/ms632680) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Specifies the status bar control's style.","pos":[7115,7156]},{"content":"Apply any combination of status bar control styles listed in <bpt id=\"p1\">[</bpt>Common Control Styles<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775498)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[7157,7361],"source":" Apply any combination of status bar control styles listed in [Common Control Styles](http://msdn.microsoft.com/library/windows/desktop/bb775498) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"This parameter must include the <bpt id=\"p1\">**</bpt>WS_CHILD<ept id=\"p1\">**</ept> style.","pos":[7362,7413],"source":" This parameter must include the **WS_CHILD** style."},{"content":"It should also include the <bpt id=\"p1\">**</bpt>WS_VISIBLE<ept id=\"p1\">**</ept> style.","pos":[7414,7462],"source":" It should also include the **WS_VISIBLE** style."},{"content":"A reference to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure describing the size and position of the window to be created, in client coordinates of <ph id=\"ph1\">`pParentWnd`</ph>.","pos":[7479,7673],"source":" A reference to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure describing the size and position of the window to be created, in client coordinates of `pParentWnd`."},{"content":"A pointer to the window that is the control's parent.","pos":[7696,7749]},{"content":"The control's child-window ID.","pos":[7765,7795]},{"content":"Return Value","pos":[7805,7817]},{"content":"Nonzero if successful; otherwise 0.","pos":[7821,7856]},{"content":"Remarks","pos":[7866,7873]},{"pos":[7877,8030],"content":"Use <ph id=\"ph1\">`CreateEx`</ph> instead of <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](#cstatusbarctrl__create)</ept> to apply extended Windows styles, specified by the Windows extended style preface <bpt id=\"p2\">**</bpt>WS_EX_<ept id=\"p2\">**</ept>.","source":"Use `CreateEx` instead of [Create](#cstatusbarctrl__create) to apply extended Windows styles, specified by the Windows extended style preface **WS_EX_**."},{"pos":[8087,8117],"content":"CStatusBarCtrl::CStatusBarCtrl"},{"pos":[8121,8158],"content":"Constructs a <ph id=\"ph1\">`CStatusBarCtrl`</ph> object.","source":"Constructs a `CStatusBarCtrl` object."},{"pos":[8242,8266],"content":"CStatusBarCtrl::DrawItem"},{"content":"Called by the framework when a visual aspect of an owner-draw status bar control changes.","pos":[8270,8359]},{"content":"Parameters","pos":[8442,8452]},{"content":"A long pointer to a <bpt id=\"p1\">[</bpt>DRAWITEMSTRUCT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775802)</ept> structure that contains information about the type of drawing required.","pos":[8478,8646],"source":" A long pointer to a [DRAWITEMSTRUCT](http://msdn.microsoft.com/library/windows/desktop/bb775802) structure that contains information about the type of drawing required."},{"content":"Remarks","pos":[8656,8663]},{"pos":[8667,8778],"content":"The <bpt id=\"p1\">**</bpt>itemAction<ept id=\"p1\">**</ept> member of the <ph id=\"ph1\">`DRAWITEMSTRUCT`</ph> structure defines the drawing action that is to be performed.","source":"The **itemAction** member of the `DRAWITEMSTRUCT` structure defines the drawing action that is to be performed."},{"content":"By default, this member function does nothing.","pos":[8785,8831]},{"content":"Override this member function to implement drawing for an owner-draw <ph id=\"ph1\">`CStatusBarCtrl`</ph> object.","pos":[8832,8925],"source":" Override this member function to implement drawing for an owner-draw `CStatusBarCtrl` object."},{"pos":[8932,9110],"content":"The application should restore all graphics device interface (GDI) objects selected for the display context supplied in <ph id=\"ph1\">`lpDrawItemStruct`</ph> before this member function terminates.","source":"The application should restore all graphics device interface (GDI) objects selected for the display context supplied in `lpDrawItemStruct` before this member function terminates."},{"pos":[9163,9189],"content":"CStatusBarCtrl::GetBorders"},{"content":"Retrieves the status bar control's current widths of the horizontal and vertical borders and of the space between rectangles.","pos":[9193,9318]},{"content":"Parameters","pos":[9473,9483]},{"content":"pBorders","pos":[9488,9496]},{"content":"Address of an integer array having three elements.","pos":[9501,9551]},{"content":"The first element receives the width of the horizontal border, the second receives the width of the vertical border, and the third receives the width of the border between rectangles.","pos":[9552,9735]},{"content":"nHorz","pos":[9743,9748]},{"content":"Reference to an integer that receives the width of the horizontal border.","pos":[9753,9826]},{"content":"nVert","pos":[9834,9839]},{"content":"Reference to an integer that receives the width of the vertical border.","pos":[9844,9915]},{"content":"nSpacing","pos":[9923,9931]},{"content":"Reference to an integer that receives the width of the border between rectangles.","pos":[9936,10017]},{"content":"Return Value","pos":[10027,10039]},{"content":"Nonzero if successful; otherwise zero.","pos":[10043,10081]},{"content":"Remarks","pos":[10091,10098]},{"content":"These borders determine the spacing between the outside edge of the control and the rectangles within the control that contain text.","pos":[10102,10234]},{"content":"Example","pos":[10244,10251]},{"pos":[10266,10290],"content":"NVC_MFC_CStatusBarCtrl#2"},{"pos":[10406,10429],"content":"CStatusBarCtrl::GetIcon"},{"content":"Retrieves the icon for a part (also known as a pane) in the current status bar control.","pos":[10433,10520]},{"content":"Parameters","pos":[10580,10590]},{"content":"Parameter","pos":[10597,10606]},{"content":"Description","pos":[10607,10618]},{"pos":[10661,10665],"content":"[in]"},{"content":"The zero-based index of the part that contains the icon to be retrieved.","pos":[10674,10746]},{"content":"If this parameter is -1, the status bar is assumed to be a simple mode status bar.","pos":[10747,10829]},{"content":"Return Value","pos":[10840,10852]},{"pos":[10856,10923],"content":"The handle to the icon if the method successful; otherwise, <ph id=\"ph1\">`NULL`</ph>.","source":"The handle to the icon if the method successful; otherwise, `NULL`."},{"content":"Remarks","pos":[10933,10940]},{"pos":[10944,11126],"content":"This method sends the <bpt id=\"p1\">[</bpt>SB_GETICON<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb760744)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [SB_GETICON](http://msdn.microsoft.com/library/windows/desktop/bb760744) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"A status bar control consists of a row of text output panes, which are also known as parts.","pos":[11133,11224]},{"content":"For more information about the status bar, see <bpt id=\"p1\">[</bpt>Status Bar Implementation in MFC<ept id=\"p1\">](../../mfc/status-bar-implementation-in-mfc.md)</ept> and <bpt id=\"p2\">[</bpt>Setting the Mode of a CStatusBarCtrl Object<ept id=\"p2\">](../../mfc/setting-the-mode-of-a-cstatusbarctrl-object.md)</ept>.","pos":[11225,11462],"source":" For more information about the status bar, see [Status Bar Implementation in MFC](../../mfc/status-bar-implementation-in-mfc.md) and [Setting the Mode of a CStatusBarCtrl Object](../../mfc/setting-the-mode-of-a-cstatusbarctrl-object.md)."},{"content":"Example","pos":[11472,11479]},{"content":"The following code example defines a variable, <ph id=\"ph1\">`m_statusBar`</ph>, that is used to access the current status bar control.","pos":[11483,11599],"source":"The following code example defines a variable, `m_statusBar`, that is used to access the current status bar control."},{"content":"This variable is used in the next example.","pos":[11600,11642]},{"pos":[11660,11687],"content":"NVC_MFC_CStatusBarCtrl_s1#1"},{"content":"Example","pos":[11761,11768]},{"content":"The following code example copies an icon to two panes of the current status bar control.","pos":[11772,11861]},{"content":"In an earlier section of the code example we created a status bar control with three panes and then added an icon to the first pane.","pos":[11862,11994]},{"content":"This example retrieves the icon from the first pane and then adds it to the second and third pane.","pos":[11995,12093]},{"pos":[12111,12138],"content":"NVC_MFC_CStatusBarCtrl_s1#2"},{"pos":[12255,12279],"content":"CStatusBarCtrl::GetParts"},{"content":"Retrieves a count of the parts in a status bar control.","pos":[12283,12338]},{"content":"Parameters","pos":[12422,12432]},{"content":"Number of parts for which to retrieve coordinates.","pos":[12448,12498]},{"content":"If this parameter is greater than the number of parts in the control, the message retrieves coordinates for existing parts only.","pos":[12499,12627]},{"content":"pParts","pos":[12635,12641]},{"content":"Address of an integer array having the same number of elements as the number of parts specified by <ph id=\"ph1\">`nParts`</ph>.","pos":[12646,12754],"source":" Address of an integer array having the same number of elements as the number of parts specified by `nParts`."},{"content":"Each element in the array receives the client coordinate of the right edge of the corresponding part.","pos":[12755,12856]},{"content":"If an element is set to – 1, the position of the right edge for that part extends to the right edge of the status bar.","pos":[12857,12975]},{"content":"Return Value","pos":[12985,12997]},{"content":"The number of parts in the control if successful, or zero otherwise.","pos":[13001,13069]},{"content":"Remarks","pos":[13079,13086]},{"content":"This member function also retrieves the coordinate of the right edge of the given number of parts.","pos":[13090,13188]},{"content":"Example","pos":[13198,13205]},{"pos":[13220,13244],"content":"NVC_MFC_CStatusBarCtrl#3"},{"pos":[13360,13383],"content":"CStatusBarCtrl::GetRect"},{"content":"Retrieves the bounding rectangle of a part in a status bar control.","pos":[13387,13454]},{"content":"Parameters","pos":[13539,13549]},{"content":"Zero-based index of the part whose bounding rectangle is to be retrieved.","pos":[13564,13637]},{"content":"Address of a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure that receives the bounding rectangle.","pos":[13656,13783],"source":" Address of a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure that receives the bounding rectangle."},{"content":"Return Value","pos":[13793,13805]},{"content":"Nonzero if successful; otherwise zero.","pos":[13809,13847]},{"content":"Example","pos":[13857,13864]},{"pos":[13879,13903],"content":"NVC_MFC_CStatusBarCtrl#4"},{"pos":[14019,14042],"content":"CStatusBarCtrl::GetText"},{"content":"Retrieves the text from the given part of a status bar control.","pos":[14046,14109]},{"content":"Parameters","pos":[14290,14300]},{"content":"Address of the buffer that receives the text.","pos":[14318,14363]},{"content":"This parameter is a null-terminated string.","pos":[14364,14407]},{"content":"Zero-based index of the part from which to retrieve text.","pos":[14425,14482]},{"content":"Pointer to an integer that receives the type information.","pos":[14500,14557]},{"content":"The type can be one of these values:","pos":[14558,14594]},{"pos":[14602,14689],"content":"<bpt id=\"p1\">**</bpt>0<ept id=\"p1\">**</ept> The text is drawn with a border to appear lower than the plane of the status bar.","source":"**0** The text is drawn with a border to appear lower than the plane of the status bar."},{"pos":[14713,14747],"content":"The text is drawn without borders."},{"pos":[14768,14850],"content":"The text is drawn with a border to appear higher than the plane of the status bar."},{"pos":[14874,15049],"content":"If the text has the <ph id=\"ph1\">`SBT_OWNERDRAW`</ph> drawing type, <ph id=\"ph2\">`pType`</ph> receives this message and returns the 32-bit value associated with the text instead of the length and operation type.","source":" If the text has the `SBT_OWNERDRAW` drawing type, `pType` receives this message and returns the 32-bit value associated with the text instead of the length and operation type."},{"content":"Return Value","pos":[15059,15071]},{"pos":[15075,15207],"content":"The length, in characters, of the text or a <bpt id=\"p1\">[</bpt>CString<ept id=\"p1\">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> containing the current text.","source":"The length, in characters, of the text or a [CString](../../atl-mfc-shared/reference/cstringt-class.md) containing the current text."},{"content":"Example","pos":[15217,15224]},{"pos":[15239,15263],"content":"NVC_MFC_CStatusBarCtrl#5"},{"pos":[15385,15414],"content":"CStatusBarCtrl::GetTextLength"},{"content":"Retrieves the length, in characters, of the text from the given part of a status bar control.","pos":[15418,15511]},{"content":"Parameters","pos":[15605,15615]},{"content":"Zero-based index of the part from which to retrieve text.","pos":[15630,15687]},{"content":"Pointer to an integer that receives the type information.","pos":[15705,15762]},{"content":"The type can be one of these values:","pos":[15763,15799]},{"pos":[15807,15894],"content":"<bpt id=\"p1\">**</bpt>0<ept id=\"p1\">**</ept> The text is drawn with a border to appear lower than the plane of the status bar.","source":"**0** The text is drawn with a border to appear lower than the plane of the status bar."},{"pos":[15918,15952],"content":"The text is drawn without borders."},{"pos":[15976,16015],"content":"The text is drawn by the parent window."},{"pos":[16036,16118],"content":"The text is drawn with a border to appear higher than the plane of the status bar."},{"content":"Return Value","pos":[16128,16140]},{"content":"The length, in characters, of the text.","pos":[16144,16183]},{"content":"Example","pos":[16193,16200]},{"pos":[16215,16239],"content":"NVC_MFC_CStatusBarCtrl#6"},{"pos":[16358,16384],"content":"CStatusBarCtrl::GetTipText"},{"content":"Retrieves the tooltip text for a pane in a status bar.","pos":[16388,16442]},{"content":"Parameters","pos":[16507,16517]},{"content":"The zero-based index of status bar pane to receive the tooltip text.","pos":[16532,16600]},{"content":"Return Value","pos":[16610,16622]},{"pos":[16626,16741],"content":"A <bpt id=\"p1\">[</bpt>CString<ept id=\"p1\">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object containing the text to be used in the tooltip.","source":"A [CString](../../atl-mfc-shared/reference/cstringt-class.md) object containing the text to be used in the tooltip."},{"content":"Remarks","pos":[16751,16758]},{"pos":[16762,16977],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>SB_GETTIPTEXT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb760751)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [SB_GETTIPTEXT](http://msdn.microsoft.com/library/windows/desktop/bb760751), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[16987,16994]},{"pos":[17009,17033],"content":"NVC_MFC_CStatusBarCtrl#7"},{"pos":[17150,17174],"content":"CStatusBarCtrl::IsSimple"},{"content":"Checks a status window control to determine if it is in simple mode.","pos":[17178,17246]},{"content":"Return Value","pos":[17297,17309]},{"content":"Nonzero if the status window control is in simple mode; otherwise zero.","pos":[17313,17384]},{"content":"Remarks","pos":[17394,17401]},{"pos":[17405,17618],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>SB_ISSIMPLE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb760753)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [SB_ISSIMPLE](http://msdn.microsoft.com/library/windows/desktop/bb760753), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[17671,17697],"content":"CStatusBarCtrl::SetBkColor"},{"content":"Sets the background color in a status bar.","pos":[17701,17743]},{"content":"Parameters","pos":[17802,17812]},{"content":"<bpt id=\"p1\"> **</bpt>COLORREF<ept id=\"p1\">**</ept> value that specifies the new background color.","pos":[17823,17883],"source":" **COLORREF** value that specifies the new background color."},{"content":"Specify the <ph id=\"ph1\">`CLR_DEFAULT`</ph> value to cause the status bar to use its default background color.","pos":[17884,17976],"source":" Specify the `CLR_DEFAULT` value to cause the status bar to use its default background color."},{"content":"Return Value","pos":[17986,17998]},{"pos":[18002,18135],"content":"A <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> value that represents the previous default background color.","source":"A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) value that represents the previous default background color."},{"content":"Remarks","pos":[18145,18152]},{"pos":[18156,18371],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>SB_SETBKCOLOR<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb760754)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [SB_SETBKCOLOR](http://msdn.microsoft.com/library/windows/desktop/bb760754), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[18381,18388]},{"pos":[18403,18427],"content":"NVC_MFC_CStatusBarCtrl#8"},{"pos":[18544,18567],"content":"CStatusBarCtrl::SetIcon"},{"content":"Sets the icon for a pane in a status bar.","pos":[18571,18612]},{"content":"Parameters","pos":[18686,18696]},{"content":"The zero-based index of the pane that will receive the icon.","pos":[18711,18771]},{"content":"If this parameter is -1, the status bar is assumed to be a simple status bar.","pos":[18772,18849]},{"content":"Handle to the icon to be set.","pos":[18867,18896]},{"content":"If this value is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the icon is removed from the part.","pos":[18897,18958],"source":" If this value is **NULL**, the icon is removed from the part."},{"content":"Return Value","pos":[18968,18980]},{"content":"Nonzero if successful; otherwise zero.","pos":[18984,19022]},{"content":"Remarks","pos":[19032,19039]},{"pos":[19043,19255],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>SB_SETICON<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb760755)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [SB_SETICON](http://msdn.microsoft.com/library/windows/desktop/bb760755), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[19265,19272]},{"pos":[19277,19355],"content":"See the example for <bpt id=\"p1\">[</bpt>CStatusBarCtrl::SetBkColor<ept id=\"p1\">](#cstatusbarctrl__setbkcolor)</ept>.","source":"See the example for [CStatusBarCtrl::SetBkColor](#cstatusbarctrl__setbkcolor)."},{"pos":[19410,19438],"content":"CStatusBarCtrl::SetMinHeight"},{"content":"Sets the minimum height of a status bar control's drawing area.","pos":[19442,19505]},{"content":"Parameters","pos":[19559,19569]},{"content":"Minimum height, in pixels, of the control.","pos":[19583,19625]},{"content":"Remarks","pos":[19635,19642]},{"pos":[19646,19767],"content":"The minimum height is the sum of <ph id=\"ph1\">`nMin`</ph> and twice the width, in pixels, of the vertical border of the status bar control.","source":"The minimum height is the sum of `nMin` and twice the width, in pixels, of the vertical border of the status bar control."},{"content":"Example","pos":[19777,19784]},{"pos":[19799,19823],"content":"NVC_MFC_CStatusBarCtrl#9"},{"pos":[19941,19965],"content":"CStatusBarCtrl::SetParts"},{"content":"Sets the number of parts in a status bar control and the coordinate of the right edge of each part.","pos":[19969,20068]},{"content":"Parameters","pos":[20145,20155]},{"content":"Number of parts to set.","pos":[20171,20194]},{"content":"The number of parts cannot be greater than 255.","pos":[20195,20242]},{"content":"pWidths","pos":[20250,20257]},{"content":"Address of an integer array having the same number of elements as parts specified by <ph id=\"ph1\">`nParts`</ph>.","pos":[20262,20356],"source":" Address of an integer array having the same number of elements as parts specified by `nParts`."},{"content":"Each element in the array specifies the position, in client coordinates, of the right edge of the corresponding part.","pos":[20357,20474]},{"content":"If an element is – 1, the position of the right edge for that part extends to the right edge of the control.","pos":[20475,20583]},{"content":"Return Value","pos":[20593,20605]},{"content":"Nonzero if successful; otherwise zero.","pos":[20609,20647]},{"content":"Example","pos":[20657,20664]},{"pos":[20679,20704],"content":"NVC_MFC_CStatusBarCtrl#10"},{"pos":[20823,20848],"content":"CStatusBarCtrl::SetSimple"},{"pos":[20852,21006],"content":"Specifies whether a status bar control displays simple text or displays all control parts set by a previous call to <bpt id=\"p1\">[</bpt>SetParts<ept id=\"p1\">](#cstatusbarctrl__setparts)</ept>.","source":"Specifies whether a status bar control displays simple text or displays all control parts set by a previous call to [SetParts](#cstatusbarctrl__setparts)."},{"content":"Parameters","pos":[21068,21078]},{"content":"[in]","pos":[21082,21086]},{"content":"Display-type flag.","pos":[21100,21118]},{"content":"If this parameter is <ph id=\"ph1\">`TRUE`</ph>, the control displays simple text; if it is <ph id=\"ph2\">`FALSE`</ph>, it displays multiple parts.","pos":[21119,21227],"source":" If this parameter is `TRUE`, the control displays simple text; if it is `FALSE`, it displays multiple parts."},{"content":"Return Value","pos":[21237,21249]},{"content":"Always returns 0.","pos":[21253,21270]},{"content":"Remarks","pos":[21280,21287]},{"content":"If your application changes the status bar control from non-simple to simple, or vice versa, the system immediately redraws the control.","pos":[21291,21427]},{"pos":[21477,21500],"content":"CStatusBarCtrl::SetText"},{"content":"Sets the text in the given part of a status bar control.","pos":[21504,21560]},{"content":"Parameters","pos":[21656,21666]},{"content":"Address of a null-terminated string specifying the text to set.","pos":[21684,21747]},{"content":"If <ph id=\"ph1\">`nType`</ph> is <ph id=\"ph2\">`SBT_OWNERDRAW`</ph>, <ph id=\"ph3\">`lpszText`</ph> represents 32 bits of data.","pos":[21748,21817],"source":" If `nType` is `SBT_OWNERDRAW`, `lpszText` represents 32 bits of data."},{"content":"Zero-based index of the part to set.","pos":[21835,21871]},{"content":"If this value is 255, the status bar control is assumed to be a simple control having only one part.","pos":[21872,21972]},{"content":"Type of drawing operation.","pos":[21990,22016]},{"content":"See <bpt id=\"p1\">[</bpt>SB_SETTEXT message<ept id=\"p1\">](http://msdn.microsoft.com/library/bb760758\\(vs.85\\).aspx)</ept> for a list of possible values.","pos":[22017,22130],"source":" See [SB_SETTEXT message](http://msdn.microsoft.com/library/bb760758\\(vs.85\\).aspx) for a list of possible values."},{"content":"Return Value","pos":[22140,22152]},{"content":"Nonzero if successful; otherwise zero.","pos":[22156,22194]},{"content":"Remarks","pos":[22204,22211]},{"pos":[22215,22373],"content":"The message invalidates the portion of the control that has changed, causing it to display the new text when the control next receives the <ph id=\"ph1\">`WM_PAINT`</ph> message.","source":"The message invalidates the portion of the control that has changed, causing it to display the new text when the control next receives the `WM_PAINT` message."},{"content":"Example","pos":[22383,22390]},{"pos":[22405,22430],"content":"NVC_MFC_CStatusBarCtrl#11"},{"pos":[22550,22576],"content":"CStatusBarCtrl::SetTipText"},{"content":"Sets the tooltip text for a pane in a status bar.","pos":[22580,22629]},{"content":"Parameters","pos":[22713,22723]},{"content":"The zero-based index of status bar pane to receive the tooltip text.","pos":[22738,22806]},{"content":"pszTipText","pos":[22814,22824]},{"content":"A pointer to a string containing the tooltip text.","pos":[22829,22879]},{"content":"Remarks","pos":[22889,22896]},{"pos":[22900,23115],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>SB_SETTIPTEXT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb760759)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [SB_SETTIPTEXT](http://msdn.microsoft.com/library/windows/desktop/bb760759), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[23125,23132]},{"pos":[23147,23172],"content":"NVC_MFC_CStatusBarCtrl#12"},{"content":"See Also","pos":[23248,23256]},{"content":"CWnd Class","pos":[23261,23271]},{"content":"Hierarchy Chart","pos":[23313,23328]},{"content":"CToolBarCtrl Class","pos":[23365,23383]}],"content":"---\ntitle: \"CStatusBarCtrl Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CStatusBarCtrl\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"Windows common controls [C++], CStatusBarCtrl\"\n  - \"CStatusBarCtrl class\"\n  - \"status bar controls\"\nms.assetid: 8504ad38-7b91-4746-aede-ac98886eb47b\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CStatusBarCtrl Class\nProvides the functionality of the Windows common status bar control.  \n  \n## Syntax  \n  \n```  \nclass CStatusBarCtrl : public CWnd  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CStatusBarCtrl::CStatusBarCtrl](#cstatusbarctrl__cstatusbarctrl)|Constructs a `CStatusBarCtrl` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CStatusBarCtrl::Create](#cstatusbarctrl__create)|Creates a status bar control and attaches it to a `CStatusBarCtrl` object.|  \n|[CStatusBarCtrl::CreateEx](#cstatusbarctrl__createex)|Creates a status bar control with the specified Windows extended styles and attaches it to a `CStatusBarCtrl` object.|  \n|[CStatusBarCtrl::DrawItem](#cstatusbarctrl__drawitem)|Called when a visual aspect of an owner-draw status bar control changes.|  \n|[CStatusBarCtrl::GetBorders](#cstatusbarctrl__getborders)|Retrieves the current widths of the horizontal and vertical borders of a status bar control.|  \n|[CStatusBarCtrl::GetIcon](#cstatusbarctrl__geticon)|Retrieves the icon for a part (also known as a pane) in the current status bar control.|  \n|[CStatusBarCtrl::GetParts](#cstatusbarctrl__getparts)|Retrieves a count of the parts in a status bar control.|  \n|[CStatusBarCtrl::GetRect](#cstatusbarctrl__getrect)|Retrieves the bounding rectangle of a part in a status bar control.|  \n|[CStatusBarCtrl::GetText](#cstatusbarctrl__gettext)|Retrieves the text from the given part of a status bar control.|  \n|[CStatusBarCtrl::GetTextLength](#cstatusbarctrl__gettextlength)|Retrieve the length, in characters, of the text from the given part of a status bar control.|  \n|[CStatusBarCtrl::GetTipText](#cstatusbarctrl__gettiptext)|Retrieves the tooltip text for a pane in a status bar.|  \n|[CStatusBarCtrl::IsSimple](#cstatusbarctrl__issimple)|Checks a status window control to determine if it is in simple mode.|  \n|[CStatusBarCtrl::SetBkColor](#cstatusbarctrl__setbkcolor)|Sets the background color in a status bar.|  \n|[CStatusBarCtrl::SetIcon](#cstatusbarctrl__seticon)|Sets the icon for a pane in a status bar.|  \n|[CStatusBarCtrl::SetMinHeight](#cstatusbarctrl__setminheight)|Sets the minimum height of a status bar control's drawing area.|  \n|[CStatusBarCtrl::SetParts](#cstatusbarctrl__setparts)|Sets the number of parts in a status bar control and the coordinate of the right edge of each part.|  \n|[CStatusBarCtrl::SetSimple](#cstatusbarctrl__setsimple)|Specifies whether a status bar control displays simple text or displays all control parts set by a previous call to `SetParts`.|  \n|[CStatusBarCtrl::SetText](#cstatusbarctrl__settext)|Sets the text in the given part of a status bar control.|  \n|[CStatusBarCtrl::SetTipText](#cstatusbarctrl__settiptext)|Sets the tooltip text for a pane in a status bar.|  \n  \n## Remarks  \n A \"status bar control\" is a horizontal window, usually displayed at the bottom of a parent window, in which an application can display various kinds of status information. The status bar control can be divided into parts to display more than one type of information.  \n  \n This control (and therefore the `CStatusBarCtrl` class) is available only to programs running under Windows 95/98 and Windows NT version 3.51 and later.  \n  \n For more information on using `CStatusBarCtrl`, see [Controls](../../mfc/controls-mfc.md) and [Using CStatusBarCtrl](../../mfc/using-cstatusbarctrl.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n `CStatusBarCtrl`  \n  \n## Requirements  \n **Header:** afxcmn.h  \n  \n##  <a name=\"cstatusbarctrl__create\"></a>  CStatusBarCtrl::Create  \n Creates a status bar control and attaches it to a `CStatusBarCtrl` object.  \n  \n```  \nvirtual BOOL Create(\n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    UINT nID);\n```  \n  \n### Parameters  \n `dwStyle`  \n Specifies the status bar control's style. Apply any combination of status bar control styles listed in [Common Control Styles](http://msdn.microsoft.com/library/windows/desktop/bb775498) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. This parameter must include the **WS_CHILD** style. It should also include the **WS_VISIBLE** style.  \n  \n `rect`  \n Specifies the status bar control's size and position. It can be either a [CRect](../../atl-mfc-shared/reference/crect-class.md) object or a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure.  \n  \n `pParentWnd`  \n Specifies the status bar control's parent window, usually a `CDialog`. It must not be **NULL.**  \n  \n `nID`  \n Specifies the status bar control's ID.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n You construct a `CStatusBarCtrl` in two steps. First, call the constructor, and then call **Create**, which creates the status bar control and attaches it to the `CStatusBarCtrl` object.  \n  \n The default position of a status window is along the bottom of the parent window, but you can specify the `CCS_TOP` style to have it appear at the top of the parent window's client area. You can specify the **SBARS_SIZEGRIP** style to include a sizing grip at the right end of the status window. Combining the `CCS_TOP` and **SBARS_SIZEGRIP** styles is not recommended, because the resulting sizing grip is not functional even though the system draws it in the status window.  \n  \n To create a status bar with extended window styles, call [CStatusBarCtrl::CreateEx](#cstatusbarctrl__createex) instead of **Create**.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CStatusBarCtrl#1](../../mfc/reference/codesnippet/cpp/cstatusbarctrl-class_1.cpp)]  \n  \n##  <a name=\"cstatusbarctrl__createex\"></a>  CStatusBarCtrl::CreateEx  \n Creates a control (a child window) and associates it with the `CStatusBarCtrl` object.  \n  \n```  \nvirtual BOOL CreateEx(\n    DWORD dwExStyle,  \n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    UINT nID);\n```  \n  \n### Parameters  \n `dwExStyle`  \n Specifies the extended style of the control being created. For a list of extended Windows styles, see the `dwExStyle` parameter for [CreateWindowEx](http://msdn.microsoft.com/library/windows/desktop/ms632680) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `dwStyle`  \n Specifies the status bar control's style. Apply any combination of status bar control styles listed in [Common Control Styles](http://msdn.microsoft.com/library/windows/desktop/bb775498) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. This parameter must include the **WS_CHILD** style. It should also include the **WS_VISIBLE** style.  \n  \n `rect`  \n A reference to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure describing the size and position of the window to be created, in client coordinates of `pParentWnd`.  \n  \n `pParentWnd`  \n A pointer to the window that is the control's parent.  \n  \n `nID`  \n The control's child-window ID.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n Use `CreateEx` instead of [Create](#cstatusbarctrl__create) to apply extended Windows styles, specified by the Windows extended style preface **WS_EX_**.  \n  \n##  <a name=\"cstatusbarctrl__cstatusbarctrl\"></a>  CStatusBarCtrl::CStatusBarCtrl  \n Constructs a `CStatusBarCtrl` object.  \n  \n```  \nCStatusBarCtrl();\n```  \n  \n##  <a name=\"cstatusbarctrl__drawitem\"></a>  CStatusBarCtrl::DrawItem  \n Called by the framework when a visual aspect of an owner-draw status bar control changes.  \n  \n```  \nvirtual void DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct);\n```  \n  \n### Parameters  \n `lpDrawItemStruct`  \n A long pointer to a [DRAWITEMSTRUCT](http://msdn.microsoft.com/library/windows/desktop/bb775802) structure that contains information about the type of drawing required.  \n  \n### Remarks  \n The **itemAction** member of the `DRAWITEMSTRUCT` structure defines the drawing action that is to be performed.  \n  \n By default, this member function does nothing. Override this member function to implement drawing for an owner-draw `CStatusBarCtrl` object.  \n  \n The application should restore all graphics device interface (GDI) objects selected for the display context supplied in `lpDrawItemStruct` before this member function terminates.  \n  \n##  <a name=\"cstatusbarctrl__getborders\"></a>  CStatusBarCtrl::GetBorders  \n Retrieves the status bar control's current widths of the horizontal and vertical borders and of the space between rectangles.  \n  \n```  \nBOOL GetBorders(\n    int* pBorders) const;\n\n \n \nBOOL GetBorders(\n    int& nHorz,  \n    int& nVert,  \n    int& nSpacing) const;\n\n \n```  \n  \n### Parameters  \n *pBorders*  \n Address of an integer array having three elements. The first element receives the width of the horizontal border, the second receives the width of the vertical border, and the third receives the width of the border between rectangles.  \n  \n *nHorz*  \n Reference to an integer that receives the width of the horizontal border.  \n  \n *nVert*  \n Reference to an integer that receives the width of the vertical border.  \n  \n *nSpacing*  \n Reference to an integer that receives the width of the border between rectangles.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n These borders determine the spacing between the outside edge of the control and the rectangles within the control that contain text.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CStatusBarCtrl#2](../../mfc/reference/codesnippet/cpp/cstatusbarctrl-class_2.cpp)]  \n  \n##  <a name=\"cstatusbarctrl__geticon\"></a>  CStatusBarCtrl::GetIcon  \n Retrieves the icon for a part (also known as a pane) in the current status bar control.  \n  \n```  \nHICON GetIcon(int iPart) const;\n\n \n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `iPart`|The zero-based index of the part that contains the icon to be retrieved. If this parameter is -1, the status bar is assumed to be a simple mode status bar.|  \n  \n### Return Value  \n The handle to the icon if the method successful; otherwise, `NULL`.  \n  \n### Remarks  \n This method sends the [SB_GETICON](http://msdn.microsoft.com/library/windows/desktop/bb760744) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n A status bar control consists of a row of text output panes, which are also known as parts. For more information about the status bar, see [Status Bar Implementation in MFC](../../mfc/status-bar-implementation-in-mfc.md) and [Setting the Mode of a CStatusBarCtrl Object](../../mfc/setting-the-mode-of-a-cstatusbarctrl-object.md).  \n  \n### Example  \n The following code example defines a variable, `m_statusBar`, that is used to access the current status bar control. This variable is used in the next example.  \n  \n [!code-cpp[NVC_MFC_CStatusBarCtrl_s1#1](../../mfc/reference/codesnippet/cpp/cstatusbarctrl-class_3.h)]  \n  \n### Example  \n The following code example copies an icon to two panes of the current status bar control. In an earlier section of the code example we created a status bar control with three panes and then added an icon to the first pane. This example retrieves the icon from the first pane and then adds it to the second and third pane.  \n  \n [!code-cpp[NVC_MFC_CStatusBarCtrl_s1#2](../../mfc/reference/codesnippet/cpp/cstatusbarctrl-class_4.cpp)]  \n  \n##  <a name=\"cstatusbarctrl__getparts\"></a>  CStatusBarCtrl::GetParts  \n Retrieves a count of the parts in a status bar control.  \n  \n```  \nint GetParts(\n    int nParts,  \n    int* pParts) const;\n\n \n```  \n  \n### Parameters  \n `nParts`  \n Number of parts for which to retrieve coordinates. If this parameter is greater than the number of parts in the control, the message retrieves coordinates for existing parts only.  \n  \n *pParts*  \n Address of an integer array having the same number of elements as the number of parts specified by `nParts`. Each element in the array receives the client coordinate of the right edge of the corresponding part. If an element is set to – 1, the position of the right edge for that part extends to the right edge of the status bar.  \n  \n### Return Value  \n The number of parts in the control if successful, or zero otherwise.  \n  \n### Remarks  \n This member function also retrieves the coordinate of the right edge of the given number of parts.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CStatusBarCtrl#3](../../mfc/reference/codesnippet/cpp/cstatusbarctrl-class_5.cpp)]  \n  \n##  <a name=\"cstatusbarctrl__getrect\"></a>  CStatusBarCtrl::GetRect  \n Retrieves the bounding rectangle of a part in a status bar control.  \n  \n```  \nBOOL GetRect(\n    int nPane,  \n    LPRECT lpRect) const;\n\n \n```  \n  \n### Parameters  \n `nPane`  \n Zero-based index of the part whose bounding rectangle is to be retrieved.  \n  \n `lpRect`  \n Address of a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure that receives the bounding rectangle.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CStatusBarCtrl#4](../../mfc/reference/codesnippet/cpp/cstatusbarctrl-class_6.cpp)]  \n  \n##  <a name=\"cstatusbarctrl__gettext\"></a>  CStatusBarCtrl::GetText  \n Retrieves the text from the given part of a status bar control.  \n  \n```  \nCString GetText(\n    int nPane,  \n    int* pType = NULL) const;\n\n \n \nint GetText(\n    LPCTSTR lpszText,  \n    int nPane,  \n    int* pType = NULL) const;\n\n \n```  \n  \n### Parameters  \n `lpszText`  \n Address of the buffer that receives the text. This parameter is a null-terminated string.  \n  \n `nPane`  \n Zero-based index of the part from which to retrieve text.  \n  \n `pType`  \n Pointer to an integer that receives the type information. The type can be one of these values:  \n  \n- **0** The text is drawn with a border to appear lower than the plane of the status bar.  \n  \n- `SBT_NOBORDERS` The text is drawn without borders.  \n  \n- `SBT_POPOUT` The text is drawn with a border to appear higher than the plane of the status bar.  \n  \n- `SBT_OWNERDRAW` If the text has the `SBT_OWNERDRAW` drawing type, `pType` receives this message and returns the 32-bit value associated with the text instead of the length and operation type.  \n  \n### Return Value  \n The length, in characters, of the text or a [CString](../../atl-mfc-shared/reference/cstringt-class.md) containing the current text.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CStatusBarCtrl#5](../../mfc/reference/codesnippet/cpp/cstatusbarctrl-class_7.cpp)]  \n  \n##  <a name=\"cstatusbarctrl__gettextlength\"></a>  CStatusBarCtrl::GetTextLength  \n Retrieves the length, in characters, of the text from the given part of a status bar control.  \n  \n```  \nint GetTextLength(\n    int nPane,  \n    int* pType = NULL) const;\n\n \n```  \n  \n### Parameters  \n `nPane`  \n Zero-based index of the part from which to retrieve text.  \n  \n `pType`  \n Pointer to an integer that receives the type information. The type can be one of these values:  \n  \n- **0** The text is drawn with a border to appear lower than the plane of the status bar.  \n  \n- `SBT_NOBORDERS` The text is drawn without borders.  \n  \n- `SBT_OWNERDRAW` The text is drawn by the parent window.  \n  \n- `SBT_POPOUT` The text is drawn with a border to appear higher than the plane of the status bar.  \n  \n### Return Value  \n The length, in characters, of the text.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CStatusBarCtrl#6](../../mfc/reference/codesnippet/cpp/cstatusbarctrl-class_8.cpp)]  \n  \n##  <a name=\"cstatusbarctrl__gettiptext\"></a>  CStatusBarCtrl::GetTipText  \n Retrieves the tooltip text for a pane in a status bar.  \n  \n```  \nCString GetTipText(int nPane) const;\n\n \n```  \n  \n### Parameters  \n `nPane`  \n The zero-based index of status bar pane to receive the tooltip text.  \n  \n### Return Value  \n A [CString](../../atl-mfc-shared/reference/cstringt-class.md) object containing the text to be used in the tooltip.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [SB_GETTIPTEXT](http://msdn.microsoft.com/library/windows/desktop/bb760751), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CStatusBarCtrl#7](../../mfc/reference/codesnippet/cpp/cstatusbarctrl-class_9.cpp)]  \n  \n##  <a name=\"cstatusbarctrl__issimple\"></a>  CStatusBarCtrl::IsSimple  \n Checks a status window control to determine if it is in simple mode.  \n  \n```  \nBOOL IsSimple() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if the status window control is in simple mode; otherwise zero.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [SB_ISSIMPLE](http://msdn.microsoft.com/library/windows/desktop/bb760753), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cstatusbarctrl__setbkcolor\"></a>  CStatusBarCtrl::SetBkColor  \n Sets the background color in a status bar.  \n  \n```  \nCOLORREF SetBkColor(COLORREF cr);\n```  \n  \n### Parameters  \n `cr`  \n **COLORREF** value that specifies the new background color. Specify the `CLR_DEFAULT` value to cause the status bar to use its default background color.  \n  \n### Return Value  \n A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) value that represents the previous default background color.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [SB_SETBKCOLOR](http://msdn.microsoft.com/library/windows/desktop/bb760754), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CStatusBarCtrl#8](../../mfc/reference/codesnippet/cpp/cstatusbarctrl-class_10.cpp)]  \n  \n##  <a name=\"cstatusbarctrl__seticon\"></a>  CStatusBarCtrl::SetIcon  \n Sets the icon for a pane in a status bar.  \n  \n```  \nBOOL SetIcon(\n    int nPane,  \n    HICON hIcon);\n```  \n  \n### Parameters  \n `nPane`  \n The zero-based index of the pane that will receive the icon. If this parameter is -1, the status bar is assumed to be a simple status bar.  \n  \n `hIcon`  \n Handle to the icon to be set. If this value is **NULL**, the icon is removed from the part.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [SB_SETICON](http://msdn.microsoft.com/library/windows/desktop/bb760755), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CStatusBarCtrl::SetBkColor](#cstatusbarctrl__setbkcolor).  \n  \n##  <a name=\"cstatusbarctrl__setminheight\"></a>  CStatusBarCtrl::SetMinHeight  \n Sets the minimum height of a status bar control's drawing area.  \n  \n```  \nvoid SetMinHeight(int nMin);\n```  \n  \n### Parameters  \n `nMin`  \n Minimum height, in pixels, of the control.  \n  \n### Remarks  \n The minimum height is the sum of `nMin` and twice the width, in pixels, of the vertical border of the status bar control.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CStatusBarCtrl#9](../../mfc/reference/codesnippet/cpp/cstatusbarctrl-class_11.cpp)]  \n  \n##  <a name=\"cstatusbarctrl__setparts\"></a>  CStatusBarCtrl::SetParts  \n Sets the number of parts in a status bar control and the coordinate of the right edge of each part.  \n  \n```  \nBOOL SetParts(\n    int nParts,  \n    int* pWidths);\n```  \n  \n### Parameters  \n `nParts`  \n Number of parts to set. The number of parts cannot be greater than 255.  \n  \n *pWidths*  \n Address of an integer array having the same number of elements as parts specified by `nParts`. Each element in the array specifies the position, in client coordinates, of the right edge of the corresponding part. If an element is – 1, the position of the right edge for that part extends to the right edge of the control.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CStatusBarCtrl#10](../../mfc/reference/codesnippet/cpp/cstatusbarctrl-class_12.cpp)]  \n  \n##  <a name=\"cstatusbarctrl__setsimple\"></a>  CStatusBarCtrl::SetSimple  \n Specifies whether a status bar control displays simple text or displays all control parts set by a previous call to [SetParts](#cstatusbarctrl__setparts).  \n  \n```  \nBOOL SetSimple(BOOL bSimple = TRUE);\n```  \n  \n### Parameters  \n [in] `bSimple`  \n Display-type flag. If this parameter is `TRUE`, the control displays simple text; if it is `FALSE`, it displays multiple parts.  \n  \n### Return Value  \n Always returns 0.  \n  \n### Remarks  \n If your application changes the status bar control from non-simple to simple, or vice versa, the system immediately redraws the control.  \n  \n##  <a name=\"cstatusbarctrl__settext\"></a>  CStatusBarCtrl::SetText  \n Sets the text in the given part of a status bar control.  \n  \n```  \nBOOL SetText(\n    LPCTSTR lpszText,  \n    int nPane,  \n    int nType);\n```  \n  \n### Parameters  \n `lpszText`  \n Address of a null-terminated string specifying the text to set. If `nType` is `SBT_OWNERDRAW`, `lpszText` represents 32 bits of data.  \n  \n `nPane`  \n Zero-based index of the part to set. If this value is 255, the status bar control is assumed to be a simple control having only one part.  \n  \n `nType`  \n Type of drawing operation. See [SB_SETTEXT message](http://msdn.microsoft.com/library/bb760758\\(vs.85\\).aspx) for a list of possible values.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n The message invalidates the portion of the control that has changed, causing it to display the new text when the control next receives the `WM_PAINT` message.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CStatusBarCtrl#11](../../mfc/reference/codesnippet/cpp/cstatusbarctrl-class_13.cpp)]  \n  \n##  <a name=\"cstatusbarctrl__settiptext\"></a>  CStatusBarCtrl::SetTipText  \n Sets the tooltip text for a pane in a status bar.  \n  \n```  \nvoid SetTipText(\n    int nPane,  \n    LPCTSTR pszTipText);\n```  \n  \n### Parameters  \n `nPane`  \n The zero-based index of status bar pane to receive the tooltip text.  \n  \n *pszTipText*  \n A pointer to a string containing the tooltip text.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [SB_SETTIPTEXT](http://msdn.microsoft.com/library/windows/desktop/bb760759), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CStatusBarCtrl#12](../../mfc/reference/codesnippet/cpp/cstatusbarctrl-class_14.cpp)]  \n  \n## See Also  \n [CWnd Class](../../mfc/reference/cwnd-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CToolBarCtrl Class](../../mfc/reference/ctoolbarctrl-class.md)\n"}