{"nodes":[{"pos":[12,44],"content":"equal_to Struct | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"equal_to Struct | Microsoft Docs","pos":[0,32]}]},{"pos":[719,734],"content":"equal_to Struct","linkify":"equal_to Struct","nodes":[{"content":"equal_to Struct","pos":[0,15]}]},{"pos":[735,824],"content":"A binary predicate that performs the equality operation ( <ph id=\"ph1\">`operator==`</ph>) on its arguments.","source":"A binary predicate that performs the equality operation ( `operator==`) on its arguments."},{"pos":[833,839],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1287,1297],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<ph id=\"ph1\">`Type`</ph>, <ph id=\"ph2\">` T`</ph>, <ph id=\"ph3\">` U`</ph>","pos":[1301,1319],"source":"`Type`, ` T`, ` U`"},{"content":"Any type that supports an <ph id=\"ph1\">`operator==`</ph> that takes operands of the specified or inferred types.","pos":[1323,1417],"source":" Any type that supports an `operator==` that takes operands of the specified or inferred types."},{"content":"The left operand of the equality operation.","pos":[1434,1477]},{"content":"The unspecialized template takes an lvalue reference argument of type <ph id=\"ph1\">`Type`</ph>.","pos":[1478,1555],"source":" The unspecialized template takes an lvalue reference argument of type `Type`."},{"content":"The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type <ph id=\"ph1\">` T`</ph>.","pos":[1556,1668],"source":" The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type ` T`."},{"content":"The right operand of the equality operation.","pos":[1686,1730]},{"content":"The unspecialized template takes an lvalue reference argument of type <ph id=\"ph1\">`Type`</ph>.","pos":[1731,1808],"source":" The unspecialized template takes an lvalue reference argument of type `Type`."},{"content":"The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type <ph id=\"ph1\">` U`</ph>.","pos":[1809,1921],"source":" The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type ` U`."},{"pos":[1930,1942],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The result of <ph id=\"ph1\">`Left``==``Right`</ph>.","pos":[1946,1978],"source":"The result of `Left``==``Right`."},{"content":"The specialized template does perfect forwarding of the result, which has the type that's returned by <ph id=\"ph1\">`operator==`</ph>.","pos":[1979,2094],"source":" The specialized template does perfect forwarding of the result, which has the type that's returned by `operator==`."},{"pos":[2103,2110],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The objects of type <ph id=\"ph1\">`Type`</ph> must be equality-comparable.","pos":[2114,2169],"source":"The objects of type `Type` must be equality-comparable."},{"content":"This requires that the <ph id=\"ph1\">`operator==`</ph> defined on the set of objects satisfies the mathematical properties of an equivalence relation.","pos":[2170,2301],"source":" This requires that the `operator==` defined on the set of objects satisfies the mathematical properties of an equivalence relation."},{"content":"All of the built-in numeric and pointer types satisfy this requirement.","pos":[2302,2373]},{"pos":[2382,2389],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]}],"content":"---\ntitle: \"equal_to Struct | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std::equal_to\"\n  - \"equal_to\"\n  - \"xfunctional/std::equal_to\"\n  - \"std.equal_to\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"equal_to function\"\n  - \"equal_to struct\"\nms.assetid: 8e4f2b50-b2db-48e3-b4cc-6cc03362c2a6\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# equal_to Struct\nA binary predicate that performs the equality operation ( `operator==`) on its arguments.  \n  \n## Syntax  \n  \n```  \ntemplate <class Type = void>  \nstruct equal_to : public binary_function<Type, Type, bool>   \n {  \n    bool operator()(const Type& Left, const Type& Right) const; \n };  \n \n// specialized transparent functor for operator== \ntemplate <>  \nstruct equal_to<void>  \n {  \n    template <class T, class U>  \n    auto operator()(T&& Left, U&& Right) const \n      ->  decltype(std::forward<T>(Left) == std::forward<U>(Right));\n };  \n```  \n  \n#### Parameters  \n `Type`, ` T`, ` U`  \n Any type that supports an `operator==` that takes operands of the specified or inferred types.  \n  \n `Left`  \n The left operand of the equality operation. The unspecialized template takes an lvalue reference argument of type `Type`. The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type ` T`.  \n  \n `Right`  \n The right operand of the equality operation. The unspecialized template takes an lvalue reference argument of type `Type`. The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type ` U`.  \n  \n## Return Value  \n The result of `Left``==``Right`. The specialized template does perfect forwarding of the result, which has the type that's returned by `operator==`.  \n  \n## Remarks  \n The objects of type `Type` must be equality-comparable. This requires that the `operator==` defined on the set of objects satisfies the mathematical properties of an equivalence relation. All of the built-in numeric and pointer types satisfy this requirement.  \n  \n## Example  \n  \n```cpp  \n// functional_equal_to.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <functional>  \n#include <algorithm>  \n#include <iostream>  \n  \nusing namespace std;  \n  \nint main( )  \n{  \n   vector <double> v1, v2, v3 ( 6 );  \n   vector <double>::iterator Iter1, Iter2, Iter3;  \n  \n   int i;  \n   for ( i = 0 ; i <= 5 ; i+=2 )  \n   {  \n      v1.push_back( 2.0 *i );  \n      v1.push_back( 2.0 * i + 1.0 );  \n   }  \n  \n   int j;  \n   for ( j = 0 ; j <= 5 ; j+=2 )  \n   {  \n      v2.push_back( - 2.0 * j );  \n      v2.push_back( 2.0 * j + 1.0 );  \n   }  \n  \n   cout << \"The vector v1 = ( \" ;  \n   for ( Iter1 = v1.begin( ) ; Iter1 != v1.end( ) ; Iter1++ )  \n      cout << *Iter1 << \" \";  \n   cout << \")\" << endl;  \n  \n   cout << \"The vector v2 = ( \" ;  \n   for ( Iter2 = v2.begin( ) ; Iter2 != v2.end( ) ; Iter2++ )  \n      cout << *Iter2 << \" \";  \n   cout << \")\" << endl;  \n  \n   // Testing for the element-wise equality between v1 & v2  \n   transform ( v1.begin( ),  v1.end( ), v2.begin( ), v3.begin ( ),   \n      equal_to<double>( ) );  \n  \n   cout << \"The result of the element-wise equal_to comparison\\n\"  \n      << \"between v1 & v2 is: ( \" ;  \n   for ( Iter3 = v3.begin( ) ; Iter3 != v3.end( ) ; Iter3++ )  \n      cout << *Iter3 << \" \";  \n   cout << \")\" << endl;  \n}  \n```  \n  \n```Output  \nThe vector v1 = ( 0 1 4 5 8 9 )  \nThe vector v2 = ( -0 1 -4 5 -8 9 )  \nThe result of the element-wise equal_to comparison  \nbetween v1 & v2 is: ( 1 1 0 1 0 1 )  \n```\n\n"}