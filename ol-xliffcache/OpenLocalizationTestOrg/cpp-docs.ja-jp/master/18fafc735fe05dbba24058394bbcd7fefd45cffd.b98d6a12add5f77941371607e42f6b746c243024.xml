{"nodes":[{"pos":[12,52],"content":"&lt;deque&gt; operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>deque<ph id=\"ph2\">&amp;gt;</ph> operators | Microsoft Docs","pos":[0,40],"source":"&lt;deque&gt; operators | Microsoft Docs"}]},{"pos":[254,277],"content":"&lt;deque&gt; operators","linkify":"&lt;deque&gt; operators","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>deque<ph id=\"ph2\">&amp;gt;</ph> operators","pos":[0,23],"source":"&lt;deque&gt; operators"}]},{"pos":[296,323],"content":"<bpt id=\"p1\">[</bpt>operator!=<ept id=\"p1\">](#operator_neq)</ept>","source":"[operator!=](#operator_neq)"},{"pos":[324,353],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;gt;</ph><ept id=\"p1\">](#operator_gt_)</ept>","source":"[operator&gt;](#operator_gt_)"},{"pos":[354,387],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">=</ph><ept id=\"p1\">](#operator_gt__eq)</ept>","source":"[operator&gt;=](#operator_gt__eq)"},{"pos":[392,421],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;lt;</ph><ept id=\"p1\">](#operator_lt_)</ept>","source":"[operator&lt;](#operator_lt_)"},{"pos":[422,455],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">=</ph><ept id=\"p1\">](#operator_lt__eq)</ept>","source":"[operator&lt;=](#operator_lt__eq)"},{"pos":[456,485],"content":"<bpt id=\"p1\">[</bpt>operator==<ept id=\"p1\">](#operator_eq_eq)</ept>","source":"[operator==](#operator_eq_eq)"},{"pos":[496,535],"content":"<bpt id=\"p1\">&lt;a name=\"operator_neq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator!=","linkify":"<a name=\"operator_neq\"></a>  operator!=","source":"<a name=\"operator_neq\"></a>  operator!="},{"content":"Tests if the deque object on the left side of the operator is not equal to the deque object on the right side.","pos":[539,649]},{"pos":[762,772],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <ph id=\"ph1\">`deque`</ph>.","pos":[786,812],"source":" An object of type `deque`."},{"content":"An object of type <ph id=\"ph1\">`deque`</ph>.","pos":[830,856],"source":" An object of type `deque`."},{"pos":[866,878],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[882,968],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the deque objects are not equal; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if the deque objects are equal.","source":"**true** if the deque objects are not equal; **false** if the deque objects are equal."},{"pos":[978,985],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The comparison between deque objects is based on a pairwise comparison of their elements.","pos":[989,1078]},{"content":"Two deque objects are equal if they have the same number of elements and their respective elements have the same values.","pos":[1079,1199]},{"content":"Otherwise, they are unequal.","pos":[1200,1228]},{"pos":[1238,1245],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1672,1713],"content":"<bpt id=\"p1\">&lt;a name=\"operator_lt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;lt;</ph>","linkify":"<a name=\"operator_lt_\"></a>  operator&lt;","source":"<a name=\"operator_lt_\"></a>  operator&lt;"},{"content":"Tests if the deque object on the left side of the operator is less than the deque object on the right side.","pos":[1717,1824]},{"pos":[1936,1946],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <ph id=\"ph1\">`deque`</ph>.","pos":[1960,1986],"source":" An object of type `deque`."},{"content":"An object of type <ph id=\"ph1\">`deque`</ph>.","pos":[2004,2030],"source":" An object of type `deque`."},{"pos":[2040,2052],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2056,2206],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the deque on the left side of the operator is less than and not equal to the deque on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the deque on the left side of the operator is less than and not equal to the deque on the right side of the operator; otherwise **false**."},{"pos":[2216,2223],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The comparison between deque objects is based on a pairwise comparison of their elements.","pos":[2227,2316]},{"content":"The less-than relationship between two objects is based on a comparison of the first pair of unequal elements.","pos":[2317,2427]},{"pos":[2437,2444],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2972,3017],"content":"<bpt id=\"p1\">&lt;a name=\"operator_lt__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">=</ph>","linkify":"<a name=\"operator_lt__eq\"></a>  operator&lt;=","source":"<a name=\"operator_lt__eq\"></a>  operator&lt;="},{"content":"Tests if the deque object on the left side of the operator is less than or equal to the deque object on the right side.","pos":[3021,3140]},{"pos":[3253,3263],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <ph id=\"ph1\">`deque`</ph>.","pos":[3277,3303],"source":" An object of type `deque`."},{"content":"An object of type <ph id=\"ph1\">`deque`</ph>.","pos":[3321,3347],"source":" An object of type `deque`."},{"pos":[3357,3369],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3373,3518],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the deque on the left side of the operator is less than or equal to the deque on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the deque on the left side of the operator is less than or equal to the deque on the right side of the operator; otherwise **false**."},{"pos":[3528,3535],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The comparison between deque objects is based on a pairwise comparison of their elements.","pos":[3539,3628]},{"content":"The less than or equal to relationship between two objects is based on a comparison of the first pair of unequal elements.","pos":[3629,3751]},{"pos":[3761,3768],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4322,4363],"content":"<bpt id=\"p1\">&lt;a name=\"operator_eq_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator==","linkify":"<a name=\"operator_eq_eq\"></a>  operator==","source":"<a name=\"operator_eq_eq\"></a>  operator=="},{"content":"Tests if the deque object on the left side of the operator is equal to the deque object on the right side.","pos":[4367,4473]},{"pos":[4586,4596],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <ph id=\"ph1\">`deque`</ph>.","pos":[4610,4636],"source":" An object of type `deque`."},{"content":"An object of type <ph id=\"ph1\">`deque`</ph>.","pos":[4654,4680],"source":" An object of type `deque`."},{"pos":[4690,4702],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4706,4838],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the deque on the left side of the operator is equal to the deque on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the deque on the left side of the operator is equal to the deque on the right side of the operator; otherwise **false**."},{"pos":[4848,4855],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The comparison between deque objects is based on a pairwise comparison of their elements.","pos":[4859,4948]},{"content":"Two deques are equal if they have the same number of elements and their respective elements have the same values.","pos":[4949,5062]},{"content":"Otherwise, they are unequal.","pos":[5063,5091]},{"pos":[5101,5108],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5721,5762],"content":"<bpt id=\"p1\">&lt;a name=\"operator_gt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;gt;</ph>","linkify":"<a name=\"operator_gt_\"></a>  operator&gt;","source":"<a name=\"operator_gt_\"></a>  operator&gt;"},{"content":"Tests if the deque object on the left side of the operator is greater than the deque object on the right side.","pos":[5766,5876]},{"pos":[5988,5998],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <ph id=\"ph1\">`deque`</ph>.","pos":[6012,6038],"source":" An object of type `deque`."},{"content":"An object of type <ph id=\"ph1\">`deque`</ph>.","pos":[6056,6082],"source":" An object of type `deque`."},{"pos":[6092,6104],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6108,6244],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the deque on the left side of the operator is greater than the deque on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the deque on the left side of the operator is greater than the deque on the right side of the operator; otherwise **false**."},{"pos":[6254,6261],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The comparison between deque objects is based on a pairwise comparison of their elements.","pos":[6265,6354]},{"content":"The greater-than relationship between two objects is based on a comparison of the first pair of unequal elements.","pos":[6355,6468]},{"pos":[6478,6485],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7048,7093],"content":"<bpt id=\"p1\">&lt;a name=\"operator_gt__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">=</ph>","linkify":"<a name=\"operator_gt__eq\"></a>  operator&gt;=","source":"<a name=\"operator_gt__eq\"></a>  operator&gt;="},{"content":"Tests if the deque object on the left side of the operator is greater than or equal to the deque object on the right side.","pos":[7097,7219]},{"pos":[7332,7342],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <ph id=\"ph1\">`deque`</ph>.","pos":[7356,7382],"source":" An object of type `deque`."},{"content":"An object of type <ph id=\"ph1\">`deque`</ph>.","pos":[7400,7426],"source":" An object of type `deque`."},{"pos":[7436,7448],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7452,7600],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the deque on the left side of the operator is greater than or equal to the deque on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the deque on the left side of the operator is greater than or equal to the deque on the right side of the operator; otherwise **false**."},{"pos":[7610,7617],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The comparison between deque objects is based on a pairwise comparison of their elements.","pos":[7621,7710]},{"content":"The greater than or equal to relationship between two objects is based on a comparison of the first pair of unequal elements.","pos":[7711,7836]},{"pos":[7846,7853],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8429,8437],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[8441,8481],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>deque&gt;<ept id=\"p1\">](../standard-library/deque.md)</ept>","source":"[\\<deque>](../standard-library/deque.md)"}],"content":"---\ntitle: \"&lt;deque&gt; operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 482d7c92-54c7-493b-99e6-2a73617481a5\ncaps.latest.revision: 7\nmanager: \"ghogen\"\n---\n# &lt;deque&gt; operators\n||||  \n|-|-|-|  \n|[operator!=](#operator_neq)|[operator&gt;](#operator_gt_)|[operator&gt;=](#operator_gt__eq)|  \n|[operator&lt;](#operator_lt_)|[operator&lt;=](#operator_lt__eq)|[operator==](#operator_eq_eq)|  \n  \n##  <a name=\"operator_neq\"></a>  operator!=  \n Tests if the deque object on the left side of the operator is not equal to the deque object on the right side.  \n  \n```\nbool operator!=(const deque<Type, Allocator>& left, const deque<Type, Allocator>& right);\n```  \n  \n### Parameters  \n `left`  \n An object of type `deque`.  \n  \n `right`  \n An object of type `deque`.  \n  \n### Return Value  \n **true** if the deque objects are not equal; **false** if the deque objects are equal.  \n  \n### Remarks  \n The comparison between deque objects is based on a pairwise comparison of their elements. Two deque objects are equal if they have the same number of elements and their respective elements have the same values. Otherwise, they are unequal.  \n  \n### Example  \n  \n```cpp  \n// deque_op_ne.cpp  \n// compile with: /EHsc  \n#include <deque>  \n#include <iostream>  \n  \nint main( )   \n{  \n   using namespace std;   \n   deque <int> c1, c2;  \n  \n   c1.push_back( 1 );  \n   c2.push_back( 2 );  \n  \n   if ( c1 != c2 )  \n      cout << \"The deques are not equal.\" << endl;  \n   else  \n      cout << \"The deques are equal.\" << endl;  \n}  \n\\* Output:   \nThe deques are not equal.  \n*\\  \n```  \n  \n##  <a name=\"operator_lt_\"></a>  operator&lt;  \n Tests if the deque object on the left side of the operator is less than the deque object on the right side.  \n  \n```\nbool operator<(const deque<Type, Allocator>& left, const deque<Type, Allocator>& right);\n```  \n  \n### Parameters  \n `left`  \n An object of type `deque`.  \n  \n `right`  \n An object of type `deque`.  \n  \n### Return Value  \n **true** if the deque on the left side of the operator is less than and not equal to the deque on the right side of the operator; otherwise **false**.  \n  \n### Remarks  \n The comparison between deque objects is based on a pairwise comparison of their elements. The less-than relationship between two objects is based on a comparison of the first pair of unequal elements.  \n  \n### Example  \n  \n```cpp  \n// deque_op_lt.cpp  \n// compile with: /EHsc  \n#include <deque>  \n#include <iostream>  \n  \nint main( )   \n{  \n   using namespace std;   \n   deque <int> c1, c2;  \n  \n   c1.push_back( 1 );  \n   c1.push_back( 2 );  \n   c1.push_back( 4 );  \n  \n   c2.push_back( 1 );  \n   c2.push_back( 3 );  \n  \n   if ( c1 < c2 )  \n      cout << \"Deque c1 is less than deque c2.\" << endl;  \n   else  \n      cout << \"Deque c1 is not less than deque c2.\" << endl;  \n}  \n\\* Output:   \nDeque c1 is less than deque c2.  \n*\\   \n```  \n  \n##  <a name=\"operator_lt__eq\"></a>  operator&lt;=  \n Tests if the deque object on the left side of the operator is less than or equal to the deque object on the right side.  \n  \n```\nbool operator<=(const deque<Type, Allocator>& left, const deque<Type, Allocator>& right);\n```  \n  \n### Parameters  \n `left`  \n An object of type `deque`.  \n  \n `right`  \n An object of type `deque`.  \n  \n### Return Value  \n **true** if the deque on the left side of the operator is less than or equal to the deque on the right side of the operator; otherwise **false**.  \n  \n### Remarks  \n The comparison between deque objects is based on a pairwise comparison of their elements. The less than or equal to relationship between two objects is based on a comparison of the first pair of unequal elements.  \n  \n### Example  \n  \n```cpp  \n// deque_op_le.cpp  \n// compile with: /EHsc  \n#include <deque>  \n#include <iostream>  \n  \nint main( )   \n{  \n   using namespace std;   \n   deque <int> c1, c2;  \n  \n   c1.push_back( 1 );  \n   c1.push_back( 2 );  \n   c1.push_back( 4 );  \n  \n   c2.push_back( 1 );  \n   c2.push_back( 3 );  \n  \n   if ( c1 <= c2 )  \n      cout << \"Deque c1 is less than or equal to deque c2.\" << endl;  \n   else  \n      cout << \"Deque c1 is greater than deque c2.\" << endl;  \n}  \n\\* Output:   \nDeque c1 is less than or equal to deque c2.  \n*\\  \n  \n```  \n  \n##  <a name=\"operator_eq_eq\"></a>  operator==  \n Tests if the deque object on the left side of the operator is equal to the deque object on the right side.  \n  \n```\nbool operator==(const deque<Type, Allocator>& left, const deque<Type, Allocator>& right);\n```  \n  \n### Parameters  \n `left`  \n An object of type `deque`.  \n  \n `right`  \n An object of type `deque`.  \n  \n### Return Value  \n **true** if the deque on the left side of the operator is equal to the deque on the right side of the operator; otherwise **false**.  \n  \n### Remarks  \n The comparison between deque objects is based on a pairwise comparison of their elements. Two deques are equal if they have the same number of elements and their respective elements have the same values. Otherwise, they are unequal.  \n  \n### Example  \n  \n```cpp  \n// deque_op_eq.cpp  \n// compile with: /EHsc  \n#include <deque>  \n#include <iostream>  \n  \nint main( )   \n{  \n   using namespace std;  \n   deque <int> c1, c2;  \n  \n   c1.push_back( 1 );  \n   c2.push_back( 1 );  \n  \n   if ( c1 == c2 )  \n      cout << \"The deques are equal.\" << endl;  \n   else  \n      cout << \"The deques are not equal.\" << endl;  \n  \n   c1.push_back( 1 );  \n   if ( c1 == c2 )  \n      cout << \"The deques are equal.\" << endl;  \n   else  \n      cout << \"The deques are not equal.\" << endl;  \n}  \n\\* Output:   \nThe deques are equal.  \nThe deques are not equal.  \n*\\  \n  \n```  \n  \n##  <a name=\"operator_gt_\"></a>  operator&gt;  \n Tests if the deque object on the left side of the operator is greater than the deque object on the right side.  \n  \n```\nbool operator>(const deque<Type, Allocator>& left, const deque<Type, Allocator>& right);\n```  \n  \n### Parameters  \n `left`  \n An object of type `deque`.  \n  \n `right`  \n An object of type `deque`.  \n  \n### Return Value  \n **true** if the deque on the left side of the operator is greater than the deque on the right side of the operator; otherwise **false**.  \n  \n### Remarks  \n The comparison between deque objects is based on a pairwise comparison of their elements. The greater-than relationship between two objects is based on a comparison of the first pair of unequal elements.  \n  \n### Example  \n  \n```cpp  \n// deque_op_gt.cpp  \n// compile with: /EHsc  \n#include <deque>  \n#include <iostream>  \n  \nint main( )   \n{  \n   using namespace std;   \n   deque <int> c1, c2;  \n  \n   c1.push_back( 1 );  \n   c1.push_back( 3 );  \n   c1.push_back( 1 );  \n  \n   c2.push_back( 1 );  \n   c2.push_back( 2 );  \n   c2.push_back( 2 );  \n  \n   if ( c1 > c2 )  \n      cout << \"Deque c1 is greater than deque c2.\" << endl;  \n   else  \n      cout << \"Deque c1 is not greater than deque c2.\" << endl;  \n}  \n\\* Output:   \nDeque c1 is greater than deque c2.  \n*\\  \n  \n```  \n  \n##  <a name=\"operator_gt__eq\"></a>  operator&gt;=  \n Tests if the deque object on the left side of the operator is greater than or equal to the deque object on the right side.  \n  \n```\nbool operator>=(const deque<Type, Allocator>& left, const deque<Type, Allocator>& right);\n```  \n  \n### Parameters  \n `left`  \n An object of type `deque`.  \n  \n `right`  \n An object of type `deque`.  \n  \n### Return Value  \n **true** if the deque on the left side of the operator is greater than or equal to the deque on the right side of the operator; otherwise **false**.  \n  \n### Remarks  \n The comparison between deque objects is based on a pairwise comparison of their elements. The greater than or equal to relationship between two objects is based on a comparison of the first pair of unequal elements.  \n  \n### Example  \n  \n```cpp  \n// deque_op_ge.cpp  \n// compile with: /EHsc  \n#include <deque>  \n#include <iostream>  \n  \nint main( )   \n{  \n   using namespace std;  \n   deque <int> c1, c2;  \n  \n   c1.push_back( 1 );  \n   c1.push_back( 3 );  \n   c1.push_back( 1 );  \n  \n   c2.push_back( 1 );  \n   c2.push_back( 2 );  \n   c2.push_back( 2 );  \n  \n   if ( c1 >= c2 )  \n      cout << \"Deque c1 is greater than or equal to deque c2.\" << endl;  \n   else  \n      cout << \"Deque c1 is less than deque c2.\" << endl;  \n}  \n\\* Output:   \nDeque c1 is greater than or equal to deque c2.  \n*\\  \n```  \n  \n## See Also  \n [\\<deque>](../standard-library/deque.md)\n\n\n\n"}