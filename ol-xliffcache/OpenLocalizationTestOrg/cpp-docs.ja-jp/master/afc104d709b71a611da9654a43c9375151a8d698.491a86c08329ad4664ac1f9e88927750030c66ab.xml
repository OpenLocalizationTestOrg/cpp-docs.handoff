{"nodes":[{"pos":[12,54],"content":"set::value_type (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"set::value_type (STL-CLR) | Microsoft Docs","pos":[0,42]}]},{"content":"set::value_type (STL/CLR)","pos":[637,662]},{"content":"The type of an element.","pos":[663,686]},{"content":"Syntax","pos":[695,701]},{"content":"Remarks","pos":[767,774]},{"pos":[778,820],"content":"The type is a synonym for <ph id=\"ph1\">`generic_value`</ph>.","source":"The type is a synonym for `generic_value`."},{"content":"Example","pos":[829,836]},{"content":"Requirements","pos":[1468,1480]},{"pos":[1484,1509],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/set&gt;","source":"**Header:** \\<cliext/set>"},{"pos":[1516,1537],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[1546,1554]},{"content":"set (STL/CLR)","pos":[1559,1572]},{"content":"set::const_reference (STL/CLR)","pos":[1605,1635]},{"content":"set::key_type (STL/CLR)","pos":[1684,1707]},{"content":"set::reference (STL/CLR)","pos":[1749,1773]}],"content":"---\ntitle: \"set::value_type (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::set::value_type\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"value_type member [STL/CLR]\"\nms.assetid: 9af2fe12-9a8e-4919-9619-7a2f80988951\ncaps.latest.revision: 14\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# set::value_type (STL/CLR)\nThe type of an element.  \n  \n## Syntax  \n  \n```  \n  \ntypedef generic_value value_type;  \n  \n```  \n  \n## Remarks  \n The type is a synonym for `generic_value`.  \n  \n## Example  \n  \n```  \n// cliext_set_value_type.cpp   \n// compile with: /clr   \n#include <cliext/set>   \n  \ntypedef cliext::set<wchar_t> Myset;   \nint main()   \n    {   \n    Myset c1;   \n    c1.insert(L'a');   \n    c1.insert(L'b');   \n    c1.insert(L'c');   \n  \n// display contents \" a b c\" using value_type   \n    for (Myset::iterator it = c1.begin(); it != c1.end(); ++it)   \n        {   // store element in value_type object   \n        Myset::value_type val = *it;   \n  \n        System::Console::Write(\" {0}\", val);   \n        }   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \na b c  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/set>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [set (STL/CLR)](../dotnet/set-stl-clr.md)   \n [set::const_reference (STL/CLR)](../dotnet/set-const-reference-stl-clr.md)   \n [set::key_type (STL/CLR)](../dotnet/set-key-type-stl-clr.md)   \n [set::reference (STL/CLR)](../dotnet/set-reference-stl-clr.md)"}