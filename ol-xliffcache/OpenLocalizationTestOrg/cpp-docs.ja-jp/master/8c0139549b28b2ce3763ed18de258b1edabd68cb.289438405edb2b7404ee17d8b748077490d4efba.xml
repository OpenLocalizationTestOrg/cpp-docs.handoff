{"nodes":[{"pos":[12,61],"content":"Bitwise Exclusive OR Operator: ^ | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Bitwise Exclusive OR Operator: ^ | Microsoft Docs","pos":[0,49]}]},{"content":"Bitwise Exclusive OR Operator: ^","pos":[774,806]},{"content":"Syntax","pos":[810,816]},{"content":"Remarks","pos":[866,873]},{"content":"The bitwise exclusive OR operator (<bpt id=\"p1\">**</bpt><ph id=\"ph1\">^</ph><ept id=\"p1\">**</ept>) compares each bit of its first operand to the corresponding bit of its second operand.","pos":[877,1005],"source":"The bitwise exclusive OR operator (**^**) compares each bit of its first operand to the corresponding bit of its second operand."},{"content":"If one bit is 0 and the other bit is 1, the corresponding result bit is set to 1.","pos":[1006,1087]},{"content":"Otherwise, the corresponding result bit is set to 0.","pos":[1088,1140]},{"content":"Both operands to the bitwise exclusive OR operator must be of integral types.","pos":[1147,1224]},{"content":"The usual arithmetic conversions covered in <bpt id=\"p1\">[</bpt>Standard Conversions<ept id=\"p1\">](standard-conversions.md)</ept> are applied to the operands.","pos":[1225,1345],"source":" The usual arithmetic conversions covered in [Standard Conversions](standard-conversions.md) are applied to the operands."},{"content":"Operator Keyword for ^","pos":[1354,1376]},{"content":"The <bpt id=\"p1\">**</bpt>xor<ept id=\"p1\">**</ept> operator is the text equivalent of <bpt id=\"p2\">**</bpt><ph id=\"ph1\">^</ph><ept id=\"p2\">**</ept>.","pos":[1380,1433],"source":"The **xor** operator is the text equivalent of **^**."},{"content":"There are two ways to access the <bpt id=\"p1\">**</bpt>xor<ept id=\"p1\">**</ept> operator in your programs: include the header file <ph id=\"ph1\">`iso646.h`</ph>, or compile with the <bpt id=\"p2\">[</bpt>/Za<ept id=\"p2\">](../build/reference/za-ze-disable-language-extensions.md)</ept> (Disable language extensions) compiler option.","pos":[1434,1667],"source":" There are two ways to access the **xor** operator in your programs: include the header file `iso646.h`, or compile with the [/Za](../build/reference/za-ze-disable-language-extensions.md) (Disable language extensions) compiler option."},{"content":"Example","pos":[1676,1683]},{"content":"See Also","pos":[2072,2080]},{"content":"C++ Bitwise Operators","pos":[2085,2106]},{"content":"C++ Built-in Operators, Precedence and Associativity","pos":[2147,2199]}],"content":"---\ntitle: \"Bitwise Exclusive OR Operator: ^ | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"operators [C++], bitwise\"\n  - \"exclusive OR operator\"\n  - \"XOR operator\"\n  - \"bitwise operators, OR operator\"\n  - \"^ operator\"\n  - \"OR operator, bitwise exclusive\"\n  - \"operators [C++], logical\"\nms.assetid: f9185d85-65d5-4f64-a6d6-679758d52217\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Bitwise Exclusive OR Operator: ^\n## Syntax  \n  \n```  \nexpression ^ expression  \n```  \n  \n## Remarks  \n The bitwise exclusive OR operator (**^**) compares each bit of its first operand to the corresponding bit of its second operand. If one bit is 0 and the other bit is 1, the corresponding result bit is set to 1. Otherwise, the corresponding result bit is set to 0.  \n  \n Both operands to the bitwise exclusive OR operator must be of integral types. The usual arithmetic conversions covered in [Standard Conversions](standard-conversions.md) are applied to the operands.  \n  \n## Operator Keyword for ^  \n The **xor** operator is the text equivalent of **^**. There are two ways to access the **xor** operator in your programs: include the header file `iso646.h`, or compile with the [/Za](../build/reference/za-ze-disable-language-extensions.md) (Disable language extensions) compiler option.  \n  \n## Example  \n  \n```  \n// expre_Bitwise_Exclusive_OR_Operator.cpp  \n// compile with: /EHsc  \n// Demonstrate bitwise exclusive OR  \n#include <iostream>  \nusing namespace std;  \nint main() {  \n   unsigned short a = 0x5555;      // pattern 0101 ...  \n   unsigned short b = 0xFFFF;      // pattern 1111 ...  \n  \n   cout  << hex << ( a ^ b ) << endl;   // prints \"aaaa\" pattern 1010 ...  \n}  \n```  \n  \n## See Also  \n [C++ Bitwise Operators](../misc/cpp-bitwise-operators.md)   \n [C++ Built-in Operators, Precedence and Associativity](../cpp/cpp-built-in-operators-precedence-and-associativity.md)   \n\n\n"}