{"nodes":[{"pos":[12,47],"content":"map::map (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"map::map (STL-CLR) | Microsoft Docs","pos":[0,35]}]},{"content":"map::map (STL/CLR)","pos":[616,634]},{"content":"Constructs a container object.","pos":[635,665]},{"content":"Syntax","pos":[674,680]},{"content":"Parameters","pos":[1133,1143]},{"content":"first","pos":[1147,1152]},{"content":"Beginning of range to insert.","pos":[1156,1185]},{"content":"last","pos":[1192,1196]},{"content":"End of range to insert.","pos":[1200,1223]},{"content":"pred","pos":[1230,1234]},{"content":"Ordering predicate for the controlled sequence.","pos":[1238,1285]},{"content":"right","pos":[1292,1297]},{"content":"Object or range to insert.","pos":[1301,1327]},{"content":"Remarks","pos":[1336,1343]},{"content":"The constructor:","pos":[1347,1363]},{"content":"initializes the controlled sequence with no elements, with the default ordering predicate <ph id=\"ph1\">`key_compare()`</ph>.","pos":[1385,1491],"source":"initializes the controlled sequence with no elements, with the default ordering predicate `key_compare()`."},{"content":"You use it to specify an empty initial controlled sequence, with the default ordering predicate.","pos":[1492,1588]},{"content":"The constructor:","pos":[1595,1611]},{"content":"initializes the controlled sequence with no elements, with the ordering predicate <ph id=\"ph1\">`pred`</ph>.","pos":[1659,1748],"source":"initializes the controlled sequence with no elements, with the ordering predicate `pred`."},{"content":"You use it to specify an empty initial controlled sequence, with the specified ordering predicate.","pos":[1749,1847]},{"content":"The constructor:","pos":[1854,1870]},{"content":"initializes the controlled sequence with the sequence <ph id=\"ph1\">`[``right``.`</ph><bpt id=\"p1\">[</bpt>map::begin (STL/CLR)<ept id=\"p1\">](../dotnet/map-begin-stl-clr.md)</ept><ph id=\"ph2\">`(),`</ph> <ph id=\"ph3\">`right``.`</ph><bpt id=\"p2\">[</bpt>map::end (STL/CLR)<ept id=\"p2\">](../dotnet/map-end-stl-clr.md)</ept><ph id=\"ph4\">`())`</ph>, with the default ordering predicate.","pos":[1915,2145],"source":"initializes the controlled sequence with the sequence `[``right``.`[map::begin (STL/CLR)](../dotnet/map-begin-stl-clr.md)`(),` `right``.`[map::end (STL/CLR)](../dotnet/map-end-stl-clr.md)`())`, with the default ordering predicate."},{"content":"You use it to specify an initial controlled sequence that is a copy of the sequence controlled by the map object <ph id=\"ph1\">`right`</ph>, with the default ordering predicate.","pos":[2146,2304],"source":" You use it to specify an initial controlled sequence that is a copy of the sequence controlled by the map object `right`, with the default ordering predicate."},{"content":"The constructor:","pos":[2311,2327]},{"content":"initializes the controlled sequence with the sequence <ph id=\"ph1\">`[``right``-&gt;`</ph><bpt id=\"p1\">[</bpt>map::begin (STL/CLR)<ept id=\"p1\">](../dotnet/map-begin-stl-clr.md)</ept><ph id=\"ph2\">`(),`</ph> <ph id=\"ph3\">`right``-&gt;`</ph><bpt id=\"p2\">[</bpt>map::end (STL/CLR)<ept id=\"p2\">](../dotnet/map-end-stl-clr.md)</ept><ph id=\"ph4\">`())`</ph>, with the default ordering predicate.","pos":[2372,2604],"source":"initializes the controlled sequence with the sequence `[``right``->`[map::begin (STL/CLR)](../dotnet/map-begin-stl-clr.md)`(),` `right``->`[map::end (STL/CLR)](../dotnet/map-end-stl-clr.md)`())`, with the default ordering predicate."},{"content":"You use it to specify an initial controlled sequence that is a copy of the sequence controlled by the map object <ph id=\"ph1\">`right`</ph>, with the default ordering predicate.","pos":[2605,2763],"source":" You use it to specify an initial controlled sequence that is a copy of the sequence controlled by the map object `right`, with the default ordering predicate."},{"content":"The constructor:","pos":[2770,2786]},{"content":"initializes the controlled sequence with the sequence <ph id=\"ph1\">`[``first``,`</ph> <ph id=\"ph2\">`last``)`</ph>, with the default ordering predicate.","pos":[2867,2982],"source":"initializes the controlled sequence with the sequence `[``first``,` `last``)`, with the default ordering predicate."},{"content":"You use it to make the controlled sequence a copy of another sequence, with the default ordering predicate.","pos":[2983,3090]},{"content":"The constructor:","pos":[3097,3113]},{"content":"initializes the controlled sequence with the sequence <ph id=\"ph1\">`[``first``,`</ph> <ph id=\"ph2\">`last``)`</ph>, with the ordering predicate <ph id=\"ph3\">`pred`</ph>.","pos":[3221,3335],"source":"initializes the controlled sequence with the sequence `[``first``,` `last``)`, with the ordering predicate `pred`."},{"content":"You use it to make the controlled sequence a copy of another sequence, with the specified ordering predicate.","pos":[3336,3445]},{"content":"The constructor:","pos":[3452,3468]},{"content":"initializes the controlled sequence with the sequence designated by the enumerator <ph id=\"ph1\">`right`</ph>, with the default ordering predicate.","pos":[3543,3671],"source":"initializes the controlled sequence with the sequence designated by the enumerator `right`, with the default ordering predicate."},{"content":"You use it to make the controlled sequence a copy of another sequence described by an enumerator, with the default ordering predicate.","pos":[3672,3806]},{"content":"The constructor:","pos":[3813,3829]},{"content":"initializes the controlled sequence with the sequence designated by the enumerator <ph id=\"ph1\">`right`</ph>, with the ordering predicate <ph id=\"ph2\">`pred`</ph>.","pos":[3931,4058],"source":"initializes the controlled sequence with the sequence designated by the enumerator `right`, with the ordering predicate `pred`."},{"content":"You use it to make the controlled sequence a copy of another sequence described by an enumerator, with the specified ordering predicate.","pos":[4059,4195]},{"content":"Example","pos":[4204,4211]},{"content":"Requirements","pos":[7170,7182]},{"pos":[7186,7211],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/map&gt;","source":"**Header:** \\<cliext/map>"},{"pos":[7218,7239],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[7248,7256]},{"content":"map (STL/CLR)","pos":[7261,7274]},{"content":"map::generic_container (STL/CLR)","pos":[7307,7339]},{"content":"map::operator= (STL/CLR)","pos":[7390,7414]}],"content":"---\ntitle: \"map::map (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::map::map\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"map member [STL/CLR]\"\nms.assetid: c91f699a-4742-4859-b2b3-c2a01a750bea\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# map::map (STL/CLR)\nConstructs a container object.  \n  \n## Syntax  \n  \n```  \nmap();  \nexplicit map(key_compare^ pred);  \nmap(map<Key, Mapped>% right);  \nmap(map<Key, Mapped>^ right);  \ntemplate<typename InIter>  \n    mapmap(InIter first, InIter last);  \ntemplate<typename InIter>  \n    map(InIter first, InIter last,  \n        key_compare^ pred);  \nmap(System::Collections::Generic::IEnumerable<GValue>^ right);  \nmap(System::Collections::Generic::IEnumerable<GValue>^ right,  \n    key_compare^ pred);  \n```  \n  \n#### Parameters  \n first  \n Beginning of range to insert.  \n  \n last  \n End of range to insert.  \n  \n pred  \n Ordering predicate for the controlled sequence.  \n  \n right  \n Object or range to insert.  \n  \n## Remarks  \n The constructor:  \n  \n `map();`  \n  \n initializes the controlled sequence with no elements, with the default ordering predicate `key_compare()`. You use it to specify an empty initial controlled sequence, with the default ordering predicate.  \n  \n The constructor:  \n  \n `explicit map(key_compare^ pred);`  \n  \n initializes the controlled sequence with no elements, with the ordering predicate `pred`. You use it to specify an empty initial controlled sequence, with the specified ordering predicate.  \n  \n The constructor:  \n  \n `map(map<Key, Mapped>% right);`  \n  \n initializes the controlled sequence with the sequence `[``right``.`[map::begin (STL/CLR)](../dotnet/map-begin-stl-clr.md)`(),` `right``.`[map::end (STL/CLR)](../dotnet/map-end-stl-clr.md)`())`, with the default ordering predicate. You use it to specify an initial controlled sequence that is a copy of the sequence controlled by the map object `right`, with the default ordering predicate.  \n  \n The constructor:  \n  \n `map(map<Key, Mapped>^ right);`  \n  \n initializes the controlled sequence with the sequence `[``right``->`[map::begin (STL/CLR)](../dotnet/map-begin-stl-clr.md)`(),` `right``->`[map::end (STL/CLR)](../dotnet/map-end-stl-clr.md)`())`, with the default ordering predicate. You use it to specify an initial controlled sequence that is a copy of the sequence controlled by the map object `right`, with the default ordering predicate.  \n  \n The constructor:  \n  \n `template<typename InIter>`  \n  \n `map(InIter first, InIter last);`  \n  \n initializes the controlled sequence with the sequence `[``first``,` `last``)`, with the default ordering predicate. You use it to make the controlled sequence a copy of another sequence, with the default ordering predicate.  \n  \n The constructor:  \n  \n `template<typename InIter>`  \n  \n `map(InIter first, InIter last,`  \n  \n `key_compare^ pred);`  \n  \n initializes the controlled sequence with the sequence `[``first``,` `last``)`, with the ordering predicate `pred`. You use it to make the controlled sequence a copy of another sequence, with the specified ordering predicate.  \n  \n The constructor:  \n  \n `map(System::Collections::Generic::IEnumerable<Key>^ right);`  \n  \n initializes the controlled sequence with the sequence designated by the enumerator `right`, with the default ordering predicate. You use it to make the controlled sequence a copy of another sequence described by an enumerator, with the default ordering predicate.  \n  \n The constructor:  \n  \n `map(System::Collections::Generic::IEnumerable<Key>^ right,`  \n  \n `key_compare^ pred);`  \n  \n initializes the controlled sequence with the sequence designated by the enumerator `right`, with the ordering predicate `pred`. You use it to make the controlled sequence a copy of another sequence described by an enumerator, with the specified ordering predicate.  \n  \n## Example  \n  \n```  \n// cliext_map_construct.cpp   \n// compile with: /clr   \n#include <cliext/map>   \n  \ntypedef cliext::map<wchar_t, int> Mymap;   \nint main()   \n    {   \n// construct an empty container   \n    Mymap c1;   \n    System::Console::WriteLine(\"size() = {0}\", c1.size());   \n  \n    c1.insert(Mymap::make_value(L'a', 1));   \n    c1.insert(Mymap::make_value(L'b', 2));   \n    c1.insert(Mymap::make_value(L'c', 3));   \n    for each (Mymap::value_type elem in c1)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n// construct with an ordering rule   \n    Mymap c2 = cliext::greater_equal<wchar_t>();   \n    System::Console::WriteLine(\"size() = {0}\", c2.size());   \n  \n    c2.insert(c1.begin(), c1.end());   \n    for each (Mymap::value_type elem in c2)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n// construct with an iterator range   \n    Mymap c3(c1.begin(), c1.end());   \n    for each (Mymap::value_type elem in c3)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n// construct with an iterator range and an ordering rule   \n    Mymap c4(c1.begin(), c1.end(),   \n        cliext::greater_equal<wchar_t>());   \n    for each (Mymap::value_type elem in c4)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n// construct with an enumeration   \n    Mymap c5(   // NOTE: cast is not needed   \n        (System::Collections::Generic::IEnumerable<   \n            Mymap::value_type>^)%c3);   \n    for each (Mymap::value_type elem in c5)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n// construct with an enumeration and an ordering rule   \n    Mymap c6(   // NOTE: cast is not needed   \n        (System::Collections::Generic::IEnumerable<   \n            Mymap::value_type>^)%c3,   \n                cliext::greater_equal<wchar_t>());   \n    for each (Mymap::value_type elem in c6)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n// construct by copying another container   \n    Mymap c7(c4);   \n    for each (Mymap::value_type elem in c7)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n// construct by copying a container handle   \n    Mymap c8(%c3);   \n    for each (Mymap::value_type elem in c8)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \nsize() = 0  \n [a 1] [b 2] [c 3]  \nsize() = 0  \n [c 3] [b 2] [a 1]  \n [a 1] [b 2] [c 3]  \n [c 3] [b 2] [a 1]  \n [a 1] [b 2] [c 3]  \n [c 3] [b 2] [a 1]  \n [c 3] [b 2] [a 1]  \n [a 1] [b 2] [c 3]  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/map>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [map (STL/CLR)](../dotnet/map-stl-clr.md)   \n [map::generic_container (STL/CLR)](../dotnet/map-generic-container-stl-clr.md)   \n [map::operator= (STL/CLR)](../dotnet/map-operator-assign-stl-clr.md)"}