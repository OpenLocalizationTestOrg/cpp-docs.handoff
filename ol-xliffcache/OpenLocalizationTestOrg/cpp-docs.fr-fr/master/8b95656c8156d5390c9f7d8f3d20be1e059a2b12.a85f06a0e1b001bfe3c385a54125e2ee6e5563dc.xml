{"nodes":[{"pos":[12,83],"content":"How to: Use Cancellation to Break from a Parallel Loop | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Use Cancellation to Break from a Parallel Loop | Microsoft Docs","pos":[0,71]}]},{"content":"How to: Use Cancellation to Break from a Parallel Loop","pos":[713,767]},{"content":"This example shows how to use cancellation to implement a basic parallel search algorithm.","pos":[768,858]},{"content":"Example","pos":[867,874]},{"content":"The following example uses cancellation to search for an element in an array.","pos":[879,956]},{"content":"The <ph id=\"ph1\">`parallel_find_any`</ph> function uses the <bpt id=\"p1\">[</bpt>concurrency::parallel_for<ept id=\"p1\">](reference/concurrency-namespace-functions.md#parallel_for)</ept> algorithm and the <bpt id=\"p2\">[</bpt>concurrency::run_with_cancellation_token<ept id=\"p2\">](reference/concurrency-namespace-functions.md#run_with_cancellation_token)</ept> function to search for the position that contains the given value.","pos":[957,1287],"source":" The `parallel_find_any` function uses the [concurrency::parallel_for](reference/concurrency-namespace-functions.md#parallel_for) algorithm and the [concurrency::run_with_cancellation_token](reference/concurrency-namespace-functions.md#run_with_cancellation_token) function to search for the position that contains the given value."},{"content":"When the parallel loop finds the value, it calls the <bpt id=\"p1\">[</bpt>concurrency::cancellation_token_source::cancel<ept id=\"p1\">](reference/cancellation-token-source-class.md#cancel)</ept> method to cancel future work.","pos":[1288,1472],"source":" When the parallel loop finds the value, it calls the [concurrency::cancellation_token_source::cancel](reference/cancellation-token-source-class.md#cancel) method to cancel future work."},{"pos":[1492,1522],"content":"concrt-parallel-array-search#1"},{"content":"The <bpt id=\"p1\">[</bpt>concurrency::parallel_for<ept id=\"p1\">](reference/concurrency-namespace-functions.md#parallel_for)</ept> algorithm acts concurrently.","pos":[1631,1750],"source":"The [concurrency::parallel_for](reference/concurrency-namespace-functions.md#parallel_for) algorithm acts concurrently."},{"content":"Therefore, it does not perform the operations in a pre-determined order.","pos":[1751,1823]},{"content":"If the array contains multiple instances of the value, the result can be any one of its positions.","pos":[1824,1922]},{"content":"Compiling the Code","pos":[1932,1950]},{"pos":[1954,2157],"content":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id=\"ph1\">`parallel-array-search.cpp`</ph> and then run the following command in a Visual Studio Command Prompt window.","source":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `parallel-array-search.cpp` and then run the following command in a Visual Studio Command Prompt window."},{"content":"cl.exe /EHsc parallel-array-search.cpp","pos":[2166,2204]},{"content":"See Also","pos":[2215,2223]},{"content":"Cancellation in the PPL","pos":[2228,2251]},{"content":"Parallel Algorithms","pos":[2286,2305]},{"content":"parallel_for Function","pos":[2358,2379]},{"content":"cancellation_token_source Class","pos":[2445,2476]}],"content":"---\ntitle: \"How to: Use Cancellation to Break from a Parallel Loop | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"writing a parallel search algorithm [Concurrency Runtime]\"\n  - \"parallel search algorithm, writing [Concurrency Runtime]\"\nms.assetid: 421cd2de-f058-465f-b890-dd8fcc0df273\ncaps.latest.revision: 19\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Use Cancellation to Break from a Parallel Loop\nThis example shows how to use cancellation to implement a basic parallel search algorithm.  \n  \n## Example  \n\n The following example uses cancellation to search for an element in an array. The `parallel_find_any` function uses the [concurrency::parallel_for](reference/concurrency-namespace-functions.md#parallel_for) algorithm and the [concurrency::run_with_cancellation_token](reference/concurrency-namespace-functions.md#run_with_cancellation_token) function to search for the position that contains the given value. When the parallel loop finds the value, it calls the [concurrency::cancellation_token_source::cancel](reference/cancellation-token-source-class.md#cancel) method to cancel future work.  \n\n\n  \n [!code-cpp[concrt-parallel-array-search#1](../../parallel/concrt/codesnippet/cpp/how-to-use-cancellation-to-break-from-a-parallel-loop_1.cpp)]  \n  \n\n The [concurrency::parallel_for](reference/concurrency-namespace-functions.md#parallel_for) algorithm acts concurrently. Therefore, it does not perform the operations in a pre-determined order. If the array contains multiple instances of the value, the result can be any one of its positions.  \n\n  \n## Compiling the Code  \n Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `parallel-array-search.cpp` and then run the following command in a Visual Studio Command Prompt window.  \n  \n **cl.exe /EHsc parallel-array-search.cpp**  \n  \n## See Also  \n [Cancellation in the PPL](cancellation-in-the-ppl.md)   \n [Parallel Algorithms](../../parallel/concrt/parallel-algorithms.md)   \n [parallel_for Function](reference/concurrency-namespace-functions.md#parallel_for)   \n [cancellation_token_source Class](../../parallel/concrt/reference/cancellation-token-source-class.md)\n"}