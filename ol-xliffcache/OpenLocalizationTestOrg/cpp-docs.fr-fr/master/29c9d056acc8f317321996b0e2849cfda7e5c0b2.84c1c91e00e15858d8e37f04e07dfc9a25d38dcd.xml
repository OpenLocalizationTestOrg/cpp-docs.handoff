{"nodes":[{"pos":[12,51],"content":"initializer_list Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"initializer_list Class | Microsoft Docs","pos":[0,39]}]},{"content":"initializer_list Class","pos":[532,554]},{"content":"Provides access to an array of elements in which each member is of the specified type.","pos":[555,641]},{"content":"Syntax","pos":[650,656]},{"content":"Parameters","pos":[729,739]},{"content":"Parameter","pos":[746,755]},{"content":"Description","pos":[756,767]},{"pos":[817,878],"content":"The element data type to be stored in the <ph id=\"ph1\">`initializer_list`</ph>.","source":"The element data type to be stored in the `initializer_list`."},{"content":"Remarks","pos":[889,896]},{"pos":[900,973],"content":"An <ph id=\"ph1\">`initializer_list`</ph> can be constructed using a braced initializer list:","source":"An `initializer_list` can be constructed using a braced initializer list:"},{"content":"The compiler transforms braced initializer lists with homogeneous elements into an <ph id=\"ph1\">`initializer_list`</ph> whenever the function signature requires an <ph id=\"ph2\">`initializer_list`</ph>.","pos":[1040,1205],"source":"The compiler transforms braced initializer lists with homogeneous elements into an `initializer_list` whenever the function signature requires an `initializer_list`."},{"content":"For more details on using <ph id=\"ph1\">`initializer_list`</ph>, see <bpt id=\"p1\">[</bpt>Uniform Initialization and Delegating Constructors<ept id=\"p1\">](../cpp/uniform-initialization-and-delegating-constructors.md)</ept>","pos":[1206,1370],"source":" For more details on using `initializer_list`, see [Uniform Initialization and Delegating Constructors](../cpp/uniform-initialization-and-delegating-constructors.md)"},{"content":"Constructors","pos":[1380,1392]},{"content":"initializer_list","pos":[1414,1430]},{"pos":[1502,1550],"content":"Constructs an object of type <ph id=\"ph1\">`initializer_list`</ph>.","source":"Constructs an object of type `initializer_list`."},{"content":"Typedefs","pos":[1561,1569]},{"content":"value_type","pos":[1590,1600]},{"pos":[1601,1652],"content":"The type of the elements in the <ph id=\"ph1\">`initializer_list`</ph>.","source":"The type of the elements in the `initializer_list`."},{"content":"reference","pos":[1657,1666]},{"pos":[1667,1740],"content":"A type that provides a reference to an element in the <ph id=\"ph1\">`initializer_list`</ph>.","source":"A type that provides a reference to an element in the `initializer_list`."},{"content":"const_reference","pos":[1745,1760]},{"pos":[1761,1843],"content":"A type that provides a constant reference to an element in the <ph id=\"ph1\">`initializer_list`</ph>.","source":"A type that provides a constant reference to an element in the `initializer_list`."},{"content":"size_type","pos":[1848,1857]},{"pos":[1858,1930],"content":"A type that represents the number of elements in the <ph id=\"ph1\">`initializer_list`</ph>.","source":"A type that represents the number of elements in the `initializer_list`."},{"content":"iterator","pos":[1935,1943]},{"pos":[1944,2004],"content":"A type that provides an iterator for the <ph id=\"ph1\">`initializer_list`</ph>.","source":"A type that provides an iterator for the `initializer_list`."},{"content":"const_iterator","pos":[2009,2023]},{"pos":[2024,2092],"content":"A type that provides a constant iterator for the <ph id=\"ph1\">`initializer_list`</ph>.","source":"A type that provides a constant iterator for the `initializer_list`."},{"content":"Member Functions","pos":[2103,2119]},{"content":"begin","pos":[2141,2146]},{"pos":[2174,2238],"content":"Returns a pointer to the first element in an <ph id=\"ph1\">`initializer_list`</ph>.","source":"Returns a pointer to the first element in an `initializer_list`."},{"content":"end","pos":[2244,2247]},{"pos":[2273,2345],"content":"Returns a pointer to one past the last element in an <ph id=\"ph1\">`initializer_list`</ph>.","source":"Returns a pointer to one past the last element in an `initializer_list`."},{"content":"size","pos":[2351,2355]},{"pos":[2382,2439],"content":"Returns the number of elements in the <ph id=\"ph1\">`initializer_list`</ph>.","source":"Returns the number of elements in the `initializer_list`."},{"content":"Requirements","pos":[2449,2461]},{"pos":[2465,2495],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> &lt;initializer_list&gt;","source":"**Header:** <initializer_list>"},{"pos":[2502,2520],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[2570,2593],"content":"initializer_list::begin"},{"pos":[2597,2661],"content":"Returns a pointer to the first element in an <ph id=\"ph1\">`initializer_list`</ph>.","source":"Returns a pointer to the first element in an `initializer_list`."},{"content":"Return Value","pos":[2743,2755]},{"content":"A pointer to the first element of the <ph id=\"ph1\">`initializer_list`</ph>.","pos":[2759,2816],"source":"A pointer to the first element of the `initializer_list`."},{"content":"If the list is empty, the pointer is the same for the beginning and end of the list.","pos":[2817,2901]},{"content":"Remarks","pos":[2911,2918]},{"pos":[2966,2987],"content":"initializer_list::end"},{"pos":[2991,3063],"content":"Returns a pointer to one past the last element in an <ph id=\"ph1\">`initializer list`</ph>.","source":"Returns a pointer to one past the last element in an `initializer list`."},{"content":"Return Value","pos":[3143,3155]},{"content":"A pointer to one past the last element in the list.","pos":[3159,3210]},{"content":"If the list is empty, this is the same as the pointer to the first element in the list.","pos":[3211,3298]},{"pos":[3359,3393],"content":"initializer_list::initializer_list"},{"pos":[3397,3445],"content":"Constructs an object of type <ph id=\"ph1\">`initializer_list`</ph>.","source":"Constructs an object of type `initializer_list`."},{"content":"Parameters","pos":[3580,3590]},{"content":"Parameter","pos":[3597,3606]},{"content":"Description","pos":[3607,3618]},{"content":"The position of the first element in the range of elements to be copied.","pos":[3669,3741]},{"content":"The position of the first element beyond the range of elements to be copied.","pos":[3753,3829]},{"content":"Remarks","pos":[3840,3847]},{"content":"An <ph id=\"ph1\">`initializer_list`</ph> is based on an array of objects of the specified type.","pos":[3851,3927],"source":"An `initializer_list` is based on an array of objects of the specified type."},{"content":"Copying an <ph id=\"ph1\">`initializer_list`</ph> creates a second instance of a list pointing to the same objects; the underlying objects are not copied.","pos":[3928,4062],"source":" Copying an `initializer_list` creates a second instance of a list pointing to the same objects; the underlying objects are not copied."},{"content":"Example","pos":[4072,4079]},{"pos":[5561,5583],"content":"initializer_list::size"},{"content":"Returns the number of elements in the list.","pos":[5587,5630]},{"content":"Return Value","pos":[5697,5709]},{"content":"The number of elements in the list.","pos":[5713,5748]},{"content":"Remarks","pos":[5758,5765]},{"content":"See Also","pos":[5774,5782]},{"content":"&lt;forward_list&gt;","pos":[5787,5801],"source":"<forward_list>"}],"content":"---\ntitle: \"initializer_list Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: 1f2c0ff4-5636-4f79-b008-e75426e3d2ab\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# initializer_list Class\nProvides access to an array of elements in which each member is of the specified type.  \n  \n## Syntax  \n  \n```  \ntemplate <class Type>  \nclass initializer_list\n```  \n  \n#### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`Type`|The element data type to be stored in the `initializer_list`.|  \n\n  \n## Remarks  \n An `initializer_list` can be constructed using a braced initializer list:  \n  \n```cpp  \ninitializer_list<int> i1{ 1, 2, 3, 4 };  \n```  \n  \n The compiler transforms braced initializer lists with homogeneous elements into an `initializer_list` whenever the function signature requires an `initializer_list`. For more details on using `initializer_list`, see [Uniform Initialization and Delegating Constructors](../cpp/uniform-initialization-and-delegating-constructors.md)  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[initializer_list](../standard-library/forward-list-class.md#forward_list__forward_list)|Constructs an object of type `initializer_list`.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|value_type|The type of the elements in the `initializer_list`.|  \n|reference|A type that provides a reference to an element in the `initializer_list`.|  \n|const_reference|A type that provides a constant reference to an element in the `initializer_list`.|  \n|size_type|A type that represents the number of elements in the `initializer_list`.|  \n|iterator|A type that provides an iterator for the `initializer_list`.|  \n|const_iterator|A type that provides a constant iterator for the `initializer_list`.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[begin](#initializer_list__begin)|Returns a pointer to the first element in an `initializer_list`.|  \n|[end](#initializer_list__end)|Returns a pointer to one past the last element in an `initializer_list`.|  \n|[size](#initializer_list__size)|Returns the number of elements in the `initializer_list`.|  \n  \n## Requirements  \n **Header:** <initializer_list>  \n  \n **Namespace:** std  \n  \n##  <a name=\"initializer_list__begin\"></a>  initializer_list::begin  \n Returns a pointer to the first element in an `initializer_list`.  \n  \n```  \nconstexpr const InputIterator* begin() const noexcept;  \n```  \n  \n### Return Value  \n A pointer to the first element of the `initializer_list`. If the list is empty, the pointer is the same for the beginning and end of the list.  \n  \n### Remarks  \n  \n##  <a name=\"initializer_list__end\"></a>  initializer_list::end  \n Returns a pointer to one past the last element in an `initializer list`.  \n  \n```  \nconstexpr const InputIterator* end() const noexcept;  \n```  \n  \n### Return Value  \n A pointer to one past the last element in the list. If the list is empty, this is the same as the pointer to the first element in the list.  \n  \n##  <a name=\"initializer_list__initializer_list\"></a>  initializer_list::initializer_list  \n Constructs an object of type `initializer_list`.  \n  \n```  \nconstexpr initializer_list() noexcept;\ninitializer_list(const InputIterator First, const InputIterator Last);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`First`|The position of the first element in the range of elements to be copied.|  \n|`Last`|The position of the first element beyond the range of elements to be copied.|  \n  \n### Remarks  \n An `initializer_list` is based on an array of objects of the specified type. Copying an `initializer_list` creates a second instance of a list pointing to the same objects; the underlying objects are not copied.  \n  \n### Example  \n  \n```cpp  \n// initializer_list_class.cpp  \n// compile with: /EHsc  \n#include <initializer_list>  \n#include <iostream>  \n  \nint main()  \n{  \n    using namespace std;  \n    // Create an empty initializer_list c0  \n    initializer_list <int> c0;  \n  \n    // Create an initializer_list c1 with 1 element  \n    initializer_list <int> c1{ 3 };  \n  \n    // Create an initializer_list c2 with 5 elements   \n    initializer_list <int> c2{ 5, 4, 3, 2, 1 };  \n  \n    // Create a copy, initializer_list c3, of initializer_list c2  \n    initializer_list <int> c3(c2);  \n  \n    // Create a initializer_list c4 by copying the range c3[ first,  last)  \n    const int* c3_ptr = c3.begin();  \n    c3_ptr++;  \n    c3_ptr++;  \n    initializer_list <int> c4(c3.begin(), c3_ptr);  \n  \n    // Move initializer_list c4 to initializer_list c5  \n    initializer_list <int> c5(move(c4));  \n  \n    cout << \"c1 =\";  \n    for (auto c : c1)  \n        cout << \" \" << c;  \n    cout << endl;  \n  \n    cout << \"c2 =\";  \n    for (auto c : c2)  \n        cout << \" \" << c;  \n    cout << endl;  \n  \n    cout << \"c3 =\";  \n    for (auto c : c3)  \n        cout << \" \" << c;  \n    cout << endl;  \n  \n    cout << \"c4 =\";  \n    for (auto c : c4)  \n        cout << \" \" << c;  \n    cout << endl;  \n  \n    cout << \"c5 =\";  \n    for (auto c : c5)  \n        cout << \" \" << c;  \n    cout << endl;  \n}  \n```  \n  \n```Output  \nc1 = 3c2 = 5 4 3 2 1c3 = 5 4 3 2 1c4 = 5 4c5 = 5 4  \n```  \n  \n##  <a name=\"initializer_list__size\"></a>  initializer_list::size  \n Returns the number of elements in the list.  \n  \n```  \nconstexpr size_t size() const noexcept;  \n```  \n  \n### Return Value  \n The number of elements in the list.  \n  \n### Remarks  \n  \n## See Also  \n [<forward_list>](../standard-library/forward-list.md)\n\n"}