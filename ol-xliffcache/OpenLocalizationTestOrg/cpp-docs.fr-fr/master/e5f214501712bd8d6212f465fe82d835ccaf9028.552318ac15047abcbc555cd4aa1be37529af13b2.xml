{"nodes":[{"pos":[12,51],"content":"istream_iterator Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"istream_iterator Class | Microsoft Docs","pos":[0,39]}]},{"content":"istream_iterator Class","pos":[712,734]},{"content":"Describes an input iterator object.","pos":[735,770]},{"content":"It extracts objects of class <ph id=\"ph1\">`Type`</ph> from an input stream, which it accesses through an object it stores, of type <ph id=\"ph2\">`pointer`</ph> to <ph id=\"ph3\">`basic_istream`&lt; `CharType`</ph>, <ph id=\"ph4\">`Traits`</ph>&gt;.","pos":[771,936],"source":" It extracts objects of class `Type` from an input stream, which it accesses through an object it stores, of type `pointer` to `basic_istream`< `CharType`, `Traits`>."},{"content":"Syntax","pos":[945,951]},{"content":"Parameters","pos":[1208,1218]},{"content":"The type of object to be extracted from the input stream.","pos":[1232,1289]},{"content":"The type that represents the character type for the <ph id=\"ph1\">`istream_iterator`</ph>.","pos":[1310,1381],"source":" The type that represents the character type for the `istream_iterator`."},{"content":"This argument is optional and the default value is <ph id=\"ph1\">`char`</ph>.","pos":[1382,1440],"source":" This argument is optional and the default value is `char`."},{"content":"The type that represents the character type for the <ph id=\"ph1\">`istream_iterator`</ph>.","pos":[1459,1530],"source":" The type that represents the character type for the `istream_iterator`."},{"content":"This argument is optional and the default value is <ph id=\"ph1\">`char_traits`&lt; `CharType`</ph>&gt;.","pos":[1531,1609],"source":" This argument is optional and the default value is `char_traits`< `CharType`>."},{"content":"A signed integral type that represents the difference type for the <ph id=\"ph1\">`istream_iterator`</ph>.","pos":[1630,1716],"source":" A signed integral type that represents the difference type for the `istream_iterator`."},{"content":"This argument is optional and the default value is <ph id=\"ph1\">`ptrdiff_t`</ph>.","pos":[1717,1780],"source":" This argument is optional and the default value is `ptrdiff_t`."},{"content":"After constructing or incrementing an object of class istream_iterator with a nonnull stored pointer, the object attempts to extract and store an object of type <ph id=\"ph1\">`Type`</ph> from the associated input stream.","pos":[1787,1988],"source":"After constructing or incrementing an object of class istream_iterator with a nonnull stored pointer, the object attempts to extract and store an object of type `Type` from the associated input stream."},{"content":"If the extraction fails, the object effectively replaces the stored pointer with a null pointer, thus making an end-of-sequence indicator.","pos":[1989,2127]},{"content":"Constructors","pos":[2137,2149]},{"content":"istream_iterator","pos":[2171,2187]},{"pos":[2226,2390],"content":"Constructs either an end-of-stream iterator as the default <ph id=\"ph1\">`istream_iterator`</ph> or a <ph id=\"ph2\">`istream_iterator`</ph> initialized to the iterator's stream type from which it reads.","source":"Constructs either an end-of-stream iterator as the default `istream_iterator` or a `istream_iterator` initialized to the iterator's stream type from which it reads."},{"content":"Typedefs","pos":[2401,2409]},{"content":"char_type","pos":[2431,2440]},{"pos":[2472,2542],"content":"A type that provides for the character type of the <ph id=\"ph1\">`istream_iterator`</ph>.","source":"A type that provides for the character type of the `istream_iterator`."},{"content":"istream_type","pos":[2548,2560]},{"pos":[2595,2662],"content":"A type that provides for the stream type of the <ph id=\"ph1\">`istream_iterator`</ph>.","source":"A type that provides for the stream type of the `istream_iterator`."},{"content":"traits_type","pos":[2668,2679]},{"pos":[2713,2790],"content":"A type that provides for the character traits type of the <ph id=\"ph1\">`istream_iterator`</ph>.","source":"A type that provides for the character traits type of the `istream_iterator`."},{"content":"Operators","pos":[2801,2810]},{"content":"operator*","pos":[2832,2841]},{"pos":[2877,2981],"content":"The dereferencing operator returns the stored object of type <ph id=\"ph1\">`Type`</ph> addressed by the <ph id=\"ph2\">`istream_iterator`</ph>.","source":"The dereferencing operator returns the stored object of type `Type` addressed by the `istream_iterator`."},{"content":"operator-&gt;","pos":[2987,2997],"source":"operator->"},{"content":"Returns the value of a member, if any.","pos":[3033,3071]},{"content":"operator++","pos":[3077,3087]},{"content":"Either extracts an incremented object from the input stream or copies the object before incrementing it and returns the copy.","pos":[3126,3251]},{"content":"Requirements","pos":[3261,3273]},{"pos":[3277,3300],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>iterator&gt;","source":"**Header:** \\<iterator>"},{"pos":[3307,3325],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[3379,3406],"content":"istream_iterator::char_type"},{"pos":[3410,3480],"content":"A type that provides for the character type of the <ph id=\"ph1\">`istream_iterator`</ph>.","source":"A type that provides for the character type of the `istream_iterator`."},{"content":"Remarks","pos":[3531,3538]},{"pos":[3542,3604],"content":"The type is a synonym for the template parameter <bpt id=\"p1\">**</bpt>Chartype<ept id=\"p1\">**</ept>.","source":"The type is a synonym for the template parameter **Chartype**."},{"content":"Example","pos":[3614,3621]},{"pos":[4530,4564],"content":"istream_iterator::istream_iterator"},{"pos":[4568,4732],"content":"Constructs either an end-of-stream iterator as the default <ph id=\"ph1\">`istream_iterator`</ph> or a <ph id=\"ph2\">`istream_iterator`</ph> initialized to the iterator's stream type from which it reads.","source":"Constructs either an end-of-stream iterator as the default `istream_iterator` or a `istream_iterator` initialized to the iterator's stream type from which it reads."},{"content":"Parameters","pos":[4815,4825]},{"content":"The input stream to be read use to initialize the <ph id=\"ph1\">`istream_iterator`</ph>.","pos":[4840,4909],"source":" The input stream to be read use to initialize the `istream_iterator`."},{"content":"Remarks","pos":[4919,4926]},{"content":"The First constructor initializes the input stream pointer with a null pointer and creates an end-of-stream iterator.","pos":[4930,5047]},{"content":"The second constructor initializes the input stream pointer with <bpt id=\"p1\">*</bpt>&amp;_Istr<ept id=\"p1\">*</ept>, then attempts to extract and store an object of type <bpt id=\"p2\">**</bpt>Type<ept id=\"p2\">**</ept>.","pos":[5048,5185],"source":" The second constructor initializes the input stream pointer with *&_Istr*, then attempts to extract and store an object of type **Type**."},{"pos":[5192,5300],"content":"The end-of-stream iterator can be use to test whether an <ph id=\"ph1\">`istream_iterator`</ph> has reached the end of a stream.","source":"The end-of-stream iterator can be use to test whether an `istream_iterator` has reached the end of a stream."},{"content":"Example","pos":[5310,5317]},{"pos":[6265,6295],"content":"istream_iterator::istream_type"},{"pos":[6299,6366],"content":"A type that provides for the stream type of the <ph id=\"ph1\">`istream_iterator`</ph>.","source":"A type that provides for the stream type of the `istream_iterator`."},{"content":"Remarks","pos":[6443,6450]},{"pos":[6454,6524],"content":"The type is a synonym for <ph id=\"ph1\">`basic_istream`\\&lt;</ph> <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Traits<ept id=\"p2\">**</ept>&gt;.","source":"The type is a synonym for `basic_istream`\\< **CharType**, **Traits**>."},{"content":"Example","pos":[6534,6541]},{"pos":[6546,6662],"content":"See <bpt id=\"p1\">[</bpt>istream_iterator<ept id=\"p1\">](#istream_iterator__istream_iterator)</ept> for an example of how to declare and use <ph id=\"ph1\">`istream_type`</ph>.","source":"See [istream_iterator](#istream_iterator__istream_iterator) for an example of how to declare and use `istream_type`."},{"pos":[6720,6747],"content":"istream_iterator::operator*"},{"pos":[6751,6857],"content":"The dereferencing operator returns the stored object of type <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept> addressed by the <ph id=\"ph1\">`istream_iterator`</ph>.","source":"The dereferencing operator returns the stored object of type **Type** addressed by the `istream_iterator`."},{"content":"Return Value","pos":[6911,6923]},{"pos":[6927,6962],"content":"The stored object of type <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept>.","source":"The stored object of type **Type**."},{"content":"Example","pos":[6972,6979]},{"pos":[7678,7705],"content":"istream_iterator::operator-"},{"content":"Returns the value of a member, if any.","pos":[7713,7751]},{"content":"Return Value","pos":[7806,7818]},{"content":"The value of a member, if any.","pos":[7822,7852]},{"content":"Remarks","pos":[7862,7869]},{"content":"<bpt id=\"p1\">*</bpt>i<ept id=\"p1\">*</ept> -&gt; is equivalent to (<ph id=\"ph1\">\\*</ph> <bpt id=\"p2\">*</bpt>i<ept id=\"p2\">*</ept>).","pos":[7873,7906],"source":"*i* -> is equivalent to (\\* *i*)."},{"content":"m","pos":[7908,7909]},{"pos":[7917,7952],"content":"The operator returns <bpt id=\"p1\">**</bpt><ph id=\"ph1\">&amp;\\*\\*</ph>this<ept id=\"p1\">**</ept>.","source":"The operator returns **&\\*\\*this**."},{"content":"Example","pos":[7962,7969]},{"pos":[8795,8823],"content":"istream_iterator::operator++"},{"content":"Either extracts an incremented object from the input stream or copies the object before incrementing it and returns the copy.","pos":[8827,8952]},{"content":"Return Value","pos":[9110,9122]},{"pos":[9126,9307],"content":"The first member operator returns a reference to the incremented object of type <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept> extracted from the input stream and the second member function returns a copy of the object.","source":"The first member operator returns a reference to the incremented object of type **Type** extracted from the input stream and the second member function returns a copy of the object."},{"content":"Example","pos":[9317,9324]},{"pos":[10026,10055],"content":"istream_iterator::traits_type"},{"pos":[10059,10136],"content":"A type that provides for the character traits type of the <ph id=\"ph1\">`istream_iterator`</ph>.","source":"A type that provides for the character traits type of the `istream_iterator`."},{"content":"Remarks","pos":[10187,10194]},{"pos":[10198,10258],"content":"The type is a synonym for the template parameter <bpt id=\"p1\">**</bpt>Traits<ept id=\"p1\">**</ept>.","source":"The type is a synonym for the template parameter **Traits**."},{"content":"Example","pos":[10268,10275]},{"content":"See Also","pos":[11116,11124]},{"content":"input_iterator_tag Struct","pos":[11129,11154]},{"content":"iterator Struct","pos":[11211,11226]},{"content":"iterator&gt;","pos":[11275,11284],"source":"iterator>"},{"content":"Thread Safety in the C++ Standard Library","pos":[11324,11365]},{"content":"C++ Standard Library Reference","pos":[11438,11468]}],"content":"---\ntitle: \"istream_iterator Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"iterator/std::istream_iterator\"\n  - \"std.istream_iterator\"\n  - \"std::istream_iterator\"\n  - \"istream_iterator\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"istream_iterator class\"\nms.assetid: fb52a8cd-7f71-48d1-b73e-4b064e2a8d16\ncaps.latest.revision: 18\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# istream_iterator Class\nDescribes an input iterator object. It extracts objects of class `Type` from an input stream, which it accesses through an object it stores, of type `pointer` to `basic_istream`< `CharType`, `Traits`>.  \n  \n## Syntax  \n  \n```\ntemplate <class Type, class CharType = char, class Traits = char_traits<CharType>, class Distance = ptrdiff_t,>  \nclass istream_iterator\n : public iterator<\n    input_iterator_tag, Type, Distance,\n    const Type *,\n    const Type&>;\n```  \n  \n#### Parameters  \n `Type`  \n The type of object to be extracted from the input stream.  \n  \n `CharType`  \n The type that represents the character type for the `istream_iterator`. This argument is optional and the default value is `char`.  \n  \n `Traits`  \n The type that represents the character type for the `istream_iterator`. This argument is optional and the default value is `char_traits`< `CharType`>.  \n  \n `Distance`  \n A signed integral type that represents the difference type for the `istream_iterator`. This argument is optional and the default value is `ptrdiff_t`.  \n  \n After constructing or incrementing an object of class istream_iterator with a nonnull stored pointer, the object attempts to extract and store an object of type `Type` from the associated input stream. If the extraction fails, the object effectively replaces the stored pointer with a null pointer, thus making an end-of-sequence indicator.  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[istream_iterator](#istream_iterator__istream_iterator)|Constructs either an end-of-stream iterator as the default `istream_iterator` or a `istream_iterator` initialized to the iterator's stream type from which it reads.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[char_type](#istream_iterator__char_type)|A type that provides for the character type of the `istream_iterator`.|  \n|[istream_type](#istream_iterator__istream_type)|A type that provides for the stream type of the `istream_iterator`.|  \n|[traits_type](#istream_iterator__traits_type)|A type that provides for the character traits type of the `istream_iterator`.|  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[operator*](#istream_iterator__operator_star)|The dereferencing operator returns the stored object of type `Type` addressed by the `istream_iterator`.|  \n|[operator->](#istream_iterator__operator-_gt_)|Returns the value of a member, if any.|  \n|[operator++](#istream_iterator__operator_add_add)|Either extracts an incremented object from the input stream or copies the object before incrementing it and returns the copy.|  \n  \n## Requirements  \n **Header:** \\<iterator>  \n  \n **Namespace:** std  \n  \n##  <a name=\"istream_iterator__char_type\"></a>  istream_iterator::char_type  \n A type that provides for the character type of the `istream_iterator`.  \n  \n```\ntypedef CharType char_type;\n```  \n  \n### Remarks  \n The type is a synonym for the template parameter **Chartype**.  \n  \n### Example  \n  \n```cpp  \n// istream_iterator_char_type.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   typedef istream_iterator<int>::char_type CHT1;  \n   typedef istream_iterator<int>::traits_type CHTR1;  \n  \n   // Standard iterator interface for reading  \n   // elements from the input stream:  \n   cout << \"Enter integers separated by spaces & then\\n\"  \n        << \" any character ( try example: '2 4 f' ): \";  \n  \n   // istream_iterator for reading int stream  \n   istream_iterator<int, CHT1, CHTR1> intRead ( cin );  \n  \n   // End-of-stream iterator  \n   istream_iterator<int, CHT1, CHTR1> EOFintRead;  \n  \n   while ( intRead != EOFintRead )  \n   {  \n      cout << \"Reading:  \" << *intRead << endl;  \n      ++intRead;  \n   }  \n   cout << endl;  \n}  \n```  \n  \n##  <a name=\"istream_iterator__istream_iterator\"></a>  istream_iterator::istream_iterator  \n Constructs either an end-of-stream iterator as the default `istream_iterator` or a `istream_iterator` initialized to the iterator's stream type from which it reads.  \n  \n```\nistream_iterator();\n\nistream_iterator(istream_type& _Istr);\n```  \n  \n### Parameters  \n `_Istr`  \n The input stream to be read use to initialize the `istream_iterator`.  \n  \n### Remarks  \n The First constructor initializes the input stream pointer with a null pointer and creates an end-of-stream iterator. The second constructor initializes the input stream pointer with *&_Istr*, then attempts to extract and store an object of type **Type**.  \n  \n The end-of-stream iterator can be use to test whether an `istream_iterator` has reached the end of a stream.  \n  \n### Example  \n  \n```cpp  \n// istream_iterator_istream_iterator.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <algorithm>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   // Used in conjunction with copy algorithm  \n   // to put elements into a vector read from cin  \n   vector<int> vec ( 4 );  \n   vector <int>::iterator Iter;  \n  \n   cout << \"Enter 4 integers separated by spaces & then\\n\"  \n        << \" a character ( try example: '2 4 6 8 a' ): \";  \n   istream_iterator<int> intvecRead ( cin );  \n  \n   // Default constructor will test equal to end of stream  \n   // for delimiting source range of vecor  \n   copy ( intvecRead , istream_iterator<int>( ) , vec.begin ( ) );  \n   cin.clear ( );  \n  \n   cout << \"vec = \";  \n   for ( Iter = vec.begin( ) ; Iter != vec.end( ) ; Iter++ )  \n      cout << *Iter << \" \"; cout << endl;  \n}  \n```  \n  \n##  <a name=\"istream_iterator__istream_type\"></a>  istream_iterator::istream_type  \n A type that provides for the stream type of the `istream_iterator`.  \n  \n```\ntypedef basic_istream<CharType, Traits> istream_type;\n```  \n  \n### Remarks  \n The type is a synonym for `basic_istream`\\< **CharType**, **Traits**>.  \n  \n### Example  \n  See [istream_iterator](#istream_iterator__istream_iterator) for an example of how to declare and use `istream_type`.  \n  \n##  <a name=\"istream_iterator__operator_star\"></a>  istream_iterator::operator*  \n The dereferencing operator returns the stored object of type **Type** addressed by the `istream_iterator`.  \n  \n```\nconst Type& operator*() const;\n```  \n  \n### Return Value  \n The stored object of type **Type**.  \n  \n### Example  \n  \n```cpp  \n// istream_iterator_operator.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <algorithm>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   cout << \"Enter integers separated by spaces & then\\n\"  \n        << \" a character ( try example: '2 4 6 8 a' ): \";  \n  \n   // istream_iterator from stream cin  \n   istream_iterator<int> intRead ( cin );  \n  \n   // End-of-stream iterator  \n   istream_iterator<int> EOFintRead;  \n  \n   while ( intRead != EOFintRead )  \n   {  \n      cout << \"Reading:  \" << *intRead << endl;  \n      ++intRead;  \n   }  \n   cout << endl;  \n}  \n```  \n  \n##  <a name=\"istream_iterator__operator-_gt_\"></a>  istream_iterator::operator-&gt;  \n Returns the value of a member, if any.  \n  \n```\nconst Type* operator->() const;\n```  \n  \n### Return Value  \n The value of a member, if any.  \n  \n### Remarks  \n *i* -> is equivalent to (\\* *i*). *m*  \n  \n The operator returns **&\\*\\*this**.  \n  \n### Example  \n  \n```cpp  \n// istream_iterator_operator_vm.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <iostream>  \n#include <complex>  \n  \nusing namespace std;  \n  \nint main( )  \n{  \n   cout << \"Enter complex numbers separated by spaces & then\\n\"  \n        << \" a character pair ( try example: '(1,2) (3,4) (a,b)' ): \";  \n  \n   // istream_iterator from stream cin  \n   istream_iterator< complex<double> > intRead ( cin );  \n  \n   // End-of-stream iterator  \n   istream_iterator<complex<double> > EOFintRead;  \n  \n   while ( intRead != EOFintRead )  \n   {  \n      cout << \"Reading the real part: \" << intRead ->real( ) << endl;  \n      cout << \"Reading the imaginary part: \" << intRead ->imag( ) << endl;  \n      ++intRead;  \n   }  \n   cout << endl;  \n}  \n```  \n  \n##  <a name=\"istream_iterator__operator_add_add\"></a>  istream_iterator::operator++  \n Either extracts an incremented object from the input stream or copies the object before incrementing it and returns the copy.  \n  \n```\nistream_iterator<Type, CharType, Traits, Distance>& operator++();\n\nistream_iterator<Type, CharType, Traits, Distance> operator++(int);\n```  \n  \n### Return Value  \n The first member operator returns a reference to the incremented object of type **Type** extracted from the input stream and the second member function returns a copy of the object.  \n  \n### Example  \n  \n```cpp  \n// istream_iterator_operator_incr.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <algorithm>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   cout << \"Enter integers separated by spaces & then\\n\"  \n        << \" a character ( try example: '2 4 6 8 a' ): \";  \n  \n   // istream_iterator from stream cin  \n   istream_iterator<int> intRead ( cin );  \n  \n   // End-of-stream iterator  \n   istream_iterator<int> EOFintRead;  \n  \n   while ( intRead != EOFintRead )  \n   {  \n      cout << \"Reading:  \" << *intRead << endl;  \n      ++intRead;  \n   }  \n   cout << endl;  \n}  \n```  \n  \n##  <a name=\"istream_iterator__traits_type\"></a>  istream_iterator::traits_type  \n A type that provides for the character traits type of the `istream_iterator`.  \n  \n```\ntypedef Traits traits_type;\n```  \n  \n### Remarks  \n The type is a synonym for the template parameter **Traits**.  \n  \n### Example  \n  \n```cpp  \n// istream_iterator_traits_type.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   typedef istream_iterator<int>::char_type CHT1;  \n   typedef istream_iterator<int>::traits_type CHTR1;  \n  \n   // Standard iterator interface for reading  \n   // elements from the input stream:  \n   cout << \"Enter integers separated by spaces & then\\n\"  \n        << \" any character ( try example: '10 20 a' ): \";  \n  \n   // istream_iterator for reading int stream  \n   istream_iterator<int, CHT1, CHTR1> intRead ( cin );  \n  \n   // End-of-stream iterator  \n   istream_iterator<int, CHT1, CHTR1> EOFintRead;  \n  \n   while ( intRead != EOFintRead )  \n   {  \n      cout << \"Reading:  \" << *intRead << endl;  \n      ++intRead;  \n   }  \n   cout << endl;  \n}  \n```  \n  \n## See Also  \n [input_iterator_tag Struct](../standard-library/input-iterator-tag-struct.md)   \n [iterator Struct](../standard-library/iterator-struct.md)   \n [\\<iterator>](../standard-library/iterator.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}