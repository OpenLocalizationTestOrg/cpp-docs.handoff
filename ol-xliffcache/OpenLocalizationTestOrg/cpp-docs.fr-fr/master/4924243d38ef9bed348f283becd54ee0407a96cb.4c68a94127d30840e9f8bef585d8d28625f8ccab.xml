{"nodes":[{"pos":[12,59],"content":"CMFCFilterChunkValueImpl Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMFCFilterChunkValueImpl Class | Microsoft Docs","pos":[0,47]}]},{"pos":[684,714],"content":"CMFCFilterChunkValueImpl Class","linkify":"CMFCFilterChunkValueImpl Class","nodes":[{"content":"CMFCFilterChunkValueImpl Class","pos":[0,30]}]},{"content":"This is a class which simplifies both chunk and property value pair logic.","pos":[715,789]},{"pos":[798,804],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[894,901],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[911,930],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[937,941]},{"content":"Description","pos":[942,953]},{"pos":[991,1102],"content":"<bpt id=\"p1\">[</bpt>CMFCFilterChunkValueImpl::~CMFCFilterChunkValueImpl<ept id=\"p1\">](#cmfcfilterchunkvalueimpl___dtorcmfcfilterchunkvalueimpl)</ept>","source":"[CMFCFilterChunkValueImpl::~CMFCFilterChunkValueImpl](#cmfcfilterchunkvalueimpl___dtorcmfcfilterchunkvalueimpl)"},{"content":"Destructs the object.","pos":[1103,1124]},{"pos":[1129,1234],"content":"<bpt id=\"p1\">[</bpt>CMFCFilterChunkValueImpl::CMFCFilterChunkValueImpl<ept id=\"p1\">](#cmfcfilterchunkvalueimpl__cmfcfilterchunkvalueimpl)</ept>","source":"[CMFCFilterChunkValueImpl::CMFCFilterChunkValueImpl](#cmfcfilterchunkvalueimpl__cmfcfilterchunkvalueimpl)"},{"content":"Constructs the object.","pos":[1235,1257]},{"pos":[1268,1282],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1289,1293]},{"content":"Description","pos":[1294,1305]},{"pos":[1343,1410],"content":"<bpt id=\"p1\">[</bpt>CMFCFilterChunkValueImpl::Clear<ept id=\"p1\">](#cmfcfilterchunkvalueimpl__clear)</ept>","source":"[CMFCFilterChunkValueImpl::Clear](#cmfcfilterchunkvalueimpl__clear)"},{"content":"Clears the ChunkValue.","pos":[1411,1433]},{"pos":[1438,1513],"content":"<bpt id=\"p1\">[</bpt>CMFCFilterChunkValueImpl::CopyChunk<ept id=\"p1\">](#cmfcfilterchunkvalueimpl__copychunk)</ept>","source":"[CMFCFilterChunkValueImpl::CopyChunk](#cmfcfilterchunkvalueimpl__copychunk)"},{"content":"Copies this chunk to a structure describing the characteristics of a chunk.","pos":[1514,1589]},{"pos":[1594,1667],"content":"<bpt id=\"p1\">[</bpt>CMFCFilterChunkValueImpl::CopyFrom<ept id=\"p1\">](#cmfcfilterchunkvalueimpl__copyfrom)</ept>","source":"[CMFCFilterChunkValueImpl::CopyFrom](#cmfcfilterchunkvalueimpl__copyfrom)"},{"content":"Initializes this chunk value from the other value.","pos":[1668,1718]},{"pos":[1723,1804],"content":"<bpt id=\"p1\">[</bpt>CMFCFilterChunkValueImpl::GetChunkGUID<ept id=\"p1\">](#cmfcfilterchunkvalueimpl__getchunkguid)</ept>","source":"[CMFCFilterChunkValueImpl::GetChunkGUID](#cmfcfilterchunkvalueimpl__getchunkguid)"},{"content":"Retrieves the chunk GUID.","pos":[1805,1830]},{"pos":[1835,1914],"content":"<bpt id=\"p1\">[</bpt>CMFCFilterChunkValueImpl::GetChunkPID<ept id=\"p1\">](#cmfcfilterchunkvalueimpl__getchunkpid)</ept>","source":"[CMFCFilterChunkValueImpl::GetChunkPID](#cmfcfilterchunkvalueimpl__getchunkpid)"},{"content":"Retrieves the chunk PID (property ID).","pos":[1915,1953]},{"pos":[1958,2039],"content":"<bpt id=\"p1\">[</bpt>CMFCFilterChunkValueImpl::GetChunkType<ept id=\"p1\">](#cmfcfilterchunkvalueimpl__getchunktype)</ept>","source":"[CMFCFilterChunkValueImpl::GetChunkType](#cmfcfilterchunkvalueimpl__getchunktype)"},{"content":"Gets chunk type.","pos":[2040,2056]},{"pos":[2061,2136],"content":"<bpt id=\"p1\">[</bpt>CMFCFilterChunkValueImpl::GetString<ept id=\"p1\">](#cmfcfilterchunkvalueimpl__getstring)</ept>","source":"[CMFCFilterChunkValueImpl::GetString](#cmfcfilterchunkvalueimpl__getstring)"},{"content":"Retrieves the the string value.","pos":[2137,2168]},{"pos":[2173,2246],"content":"<bpt id=\"p1\">[</bpt>CMFCFilterChunkValueImpl::GetValue<ept id=\"p1\">](#cmfcfilterchunkvalueimpl__getvalue)</ept>","source":"[CMFCFilterChunkValueImpl::GetValue](#cmfcfilterchunkvalueimpl__getvalue)"},{"content":"Retrieves the value as an allocated propvariant.","pos":[2247,2295]},{"pos":[2300,2387],"content":"<bpt id=\"p1\">[</bpt>CMFCFilterChunkValueImpl::GetValueNoAlloc<ept id=\"p1\">](#cmfcfilterchunkvalueimpl__getvaluenoalloc)</ept>","source":"[CMFCFilterChunkValueImpl::GetValueNoAlloc](#cmfcfilterchunkvalueimpl__getvaluenoalloc)"},{"content":"Returns non-allocated (internal value) value.","pos":[2388,2433]},{"pos":[2438,2509],"content":"<bpt id=\"p1\">[</bpt>CMFCFilterChunkValueImpl::IsValid<ept id=\"p1\">](#cmfcfilterchunkvalueimpl__isvalid)</ept>","source":"[CMFCFilterChunkValueImpl::IsValid](#cmfcfilterchunkvalueimpl__isvalid)"},{"content":"Checks whether this property value is valid or not.","pos":[2510,2561]},{"pos":[2566,2647],"content":"<bpt id=\"p1\">[</bpt>CMFCFilterChunkValueImpl::SetBoolValue<ept id=\"p1\">](#cmfcfilterchunkvalueimpl__setboolvalue)</ept>","source":"[CMFCFilterChunkValueImpl::SetBoolValue](#cmfcfilterchunkvalueimpl__setboolvalue)"},{"content":"Overloaded.","pos":[2648,2659]},{"content":"Sets the property by key to a Boolean.","pos":[2660,2698]},{"pos":[2703,2786],"content":"<bpt id=\"p1\">[</bpt>CMFCFilterChunkValueImpl::SetDwordValue<ept id=\"p1\">](#cmfcfilterchunkvalueimpl__setdwordvalue)</ept>","source":"[CMFCFilterChunkValueImpl::SetDwordValue](#cmfcfilterchunkvalueimpl__setdwordvalue)"},{"content":"Sets the property by key to a DWORD.","pos":[2787,2823]},{"pos":[2828,2917],"content":"<bpt id=\"p1\">[</bpt>CMFCFilterChunkValueImpl::SetFileTimeValue<ept id=\"p1\">](#cmfcfilterchunkvalueimpl__setfiletimevalue)</ept>","source":"[CMFCFilterChunkValueImpl::SetFileTimeValue](#cmfcfilterchunkvalueimpl__setfiletimevalue)"},{"content":"Sets the property by key to a filetime.","pos":[2918,2957]},{"pos":[2962,3045],"content":"<bpt id=\"p1\">[</bpt>CMFCFilterChunkValueImpl::SetInt64Value<ept id=\"p1\">](#cmfcfilterchunkvalueimpl__setint64value)</ept>","source":"[CMFCFilterChunkValueImpl::SetInt64Value](#cmfcfilterchunkvalueimpl__setint64value)"},{"content":"Sets the property by key to an int64.","pos":[3046,3083]},{"pos":[3088,3167],"content":"<bpt id=\"p1\">[</bpt>CMFCFilterChunkValueImpl::SetIntValue<ept id=\"p1\">](#cmfcfilterchunkvalueimpl__setintvalue)</ept>","source":"[CMFCFilterChunkValueImpl::SetIntValue](#cmfcfilterchunkvalueimpl__setintvalue)"},{"content":"Sets the property by key to an int.","pos":[3168,3203]},{"pos":[3208,3289],"content":"<bpt id=\"p1\">[</bpt>CMFCFilterChunkValueImpl::SetLongValue<ept id=\"p1\">](#cmfcfilterchunkvalueimpl__setlongvalue)</ept>","source":"[CMFCFilterChunkValueImpl::SetLongValue](#cmfcfilterchunkvalueimpl__setlongvalue)"},{"content":"Sets the property by key to a LONG.","pos":[3290,3325]},{"pos":[3330,3423],"content":"<bpt id=\"p1\">[</bpt>CMFCFilterChunkValueImpl::SetSystemTimeValue<ept id=\"p1\">](#cmfcfilterchunkvalueimpl__setsystemtimevalue)</ept>","source":"[CMFCFilterChunkValueImpl::SetSystemTimeValue](#cmfcfilterchunkvalueimpl__setsystemtimevalue)"},{"content":"Sets the property by key to a SystemTime.","pos":[3424,3465]},{"pos":[3470,3551],"content":"<bpt id=\"p1\">[</bpt>CMFCFilterChunkValueImpl::SetTextValue<ept id=\"p1\">](#cmfcfilterchunkvalueimpl__settextvalue)</ept>","source":"[CMFCFilterChunkValueImpl::SetTextValue](#cmfcfilterchunkvalueimpl__settextvalue)"},{"content":"Sets the property by key to a Unicode string.","pos":[3552,3597]},{"pos":[3608,3625],"content":"Protected Methods","linkify":"Protected Methods","nodes":[{"content":"Protected Methods","pos":[0,17]}]},{"content":"Name","pos":[3632,3636]},{"content":"Description","pos":[3637,3648]},{"pos":[3686,3759],"content":"<bpt id=\"p1\">[</bpt>CMFCFilterChunkValueImpl::SetChunk<ept id=\"p1\">](#cmfcfilterchunkvalueimpl__setchunk)</ept>","source":"[CMFCFilterChunkValueImpl::SetChunk](#cmfcfilterchunkvalueimpl__setchunk)"},{"content":"A helper function that sets the chunk's common properties.","pos":[3760,3818]},{"pos":[3828,3835],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To use, you simply create a CMFCFilterChunkValueImpl class of the right kind","pos":[3839,3915]},{"content":"Example:","pos":[3922,3930]},{"content":"CMFCFilterChunkValueImpl chunk;","pos":[3937,3968]},{"content":"hr = chunk.SetBoolValue(PKEY_IsAttachment, true);","pos":[3975,4024]},{"content":"or","pos":[4031,4033]},{"content":"hr = chunk.SetFileTimeValue(PKEY_ItemDate, ftLastModified);","pos":[4040,4099]},{"pos":[4108,4129],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[4164,4245],"content":"<bpt id=\"p1\">[</bpt>CMFCFilterChunkValueImpl<ept id=\"p1\">](../../mfc/reference/cmfcfilterchunkvalueimpl-class.md)</ept>","source":"[CMFCFilterChunkValueImpl](../../mfc/reference/cmfcfilterchunkvalueimpl-class.md)"},{"pos":[4254,4266],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4270,4290],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxwin.h","source":"**Header:** afxwin.h"},{"pos":[4300,4379],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcfilterchunkvalueimpl__clear\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCFilterChunkValueImpl::Clear","linkify":"<a name=\"cmfcfilterchunkvalueimpl__clear\"></a>  CMFCFilterChunkValueImpl::Clear","source":"<a name=\"cmfcfilterchunkvalueimpl__clear\"></a>  CMFCFilterChunkValueImpl::Clear"},{"content":"Clears the ChunkValue.","pos":[4383,4405]},{"pos":[4444,4451],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4461,4578],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcfilterchunkvalueimpl__cmfcfilterchunkvalueimpl\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCFilterChunkValueImpl::CMFCFilterChunkValueImpl","linkify":"<a name=\"cmfcfilterchunkvalueimpl__cmfcfilterchunkvalueimpl\"></a>  CMFCFilterChunkValueImpl::CMFCFilterChunkValueImpl","source":"<a name=\"cmfcfilterchunkvalueimpl__cmfcfilterchunkvalueimpl\"></a>  CMFCFilterChunkValueImpl::CMFCFilterChunkValueImpl"},{"content":"Constructs the object.","pos":[4582,4604]},{"pos":[4657,4664],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4674,4797],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcfilterchunkvalueimpl___dtorcmfcfilterchunkvalueimpl\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCFilterChunkValueImpl::~CMFCFilterChunkValueImpl","linkify":"<a name=\"cmfcfilterchunkvalueimpl___dtorcmfcfilterchunkvalueimpl\"></a>  CMFCFilterChunkValueImpl::~CMFCFilterChunkValueImpl","source":"<a name=\"cmfcfilterchunkvalueimpl___dtorcmfcfilterchunkvalueimpl\"></a>  CMFCFilterChunkValueImpl::~CMFCFilterChunkValueImpl"},{"content":"Destructs the object.","pos":[4801,4822]},{"pos":[4884,4891],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4901,4988],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcfilterchunkvalueimpl__copychunk\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCFilterChunkValueImpl::CopyChunk","linkify":"<a name=\"cmfcfilterchunkvalueimpl__copychunk\"></a>  CMFCFilterChunkValueImpl::CopyChunk","source":"<a name=\"cmfcfilterchunkvalueimpl__copychunk\"></a>  CMFCFilterChunkValueImpl::CopyChunk"},{"content":"Copies this chunk to a structure describing the characteristics of a chunk.","pos":[4992,5067]},{"pos":[5135,5145],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to destination value describing the characteristics of the chunk.","pos":[5165,5240]},{"pos":[5250,5262],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"S_OK if successful; otherwise an error code.","pos":[5266,5310]},{"pos":[5320,5327],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5337,5422],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcfilterchunkvalueimpl__copyfrom\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCFilterChunkValueImpl::CopyFrom","linkify":"<a name=\"cmfcfilterchunkvalueimpl__copyfrom\"></a>  CMFCFilterChunkValueImpl::CopyFrom","source":"<a name=\"cmfcfilterchunkvalueimpl__copyfrom\"></a>  CMFCFilterChunkValueImpl::CopyFrom"},{"content":"Initializes this chunk value from the other value.","pos":[5426,5476]},{"pos":[5544,5554],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the source value to copy from.","pos":[5570,5610]},{"pos":[5620,5627],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5637,5730],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcfilterchunkvalueimpl__getchunkguid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCFilterChunkValueImpl::GetChunkGUID","linkify":"<a name=\"cmfcfilterchunkvalueimpl__getchunkguid\"></a>  CMFCFilterChunkValueImpl::GetChunkGUID","source":"<a name=\"cmfcfilterchunkvalueimpl__getchunkguid\"></a>  CMFCFilterChunkValueImpl::GetChunkGUID"},{"content":"Retrieves the chunk GUID.","pos":[5734,5759]},{"pos":[5817,5829],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reference to a GUID identifying the chunk.","pos":[5833,5877]},{"pos":[5887,5894],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5904,5995],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcfilterchunkvalueimpl__getchunkpid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCFilterChunkValueImpl::GetChunkPID","linkify":"<a name=\"cmfcfilterchunkvalueimpl__getchunkpid\"></a>  CMFCFilterChunkValueImpl::GetChunkPID","source":"<a name=\"cmfcfilterchunkvalueimpl__getchunkpid\"></a>  CMFCFilterChunkValueImpl::GetChunkPID"},{"content":"Retrieves the chunk PID (property ID).","pos":[5999,6037]},{"pos":[6092,6104],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A DWORD value containing the property ID.","pos":[6108,6149]},{"pos":[6159,6166],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6176,6269],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcfilterchunkvalueimpl__getchunktype\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCFilterChunkValueImpl::GetChunkType","linkify":"<a name=\"cmfcfilterchunkvalueimpl__getchunktype\"></a>  CMFCFilterChunkValueImpl::GetChunkType","source":"<a name=\"cmfcfilterchunkvalueimpl__getchunktype\"></a>  CMFCFilterChunkValueImpl::GetChunkType"},{"content":"Retrieves the chunk type.","pos":[6273,6298]},{"pos":[6359,6371],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A CHUNKSTATE enumerated value, which specifies whether the current chunk is a text-type property or a value-type property.","pos":[6375,6497]},{"pos":[6507,6514],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6524,6611],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcfilterchunkvalueimpl__getstring\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCFilterChunkValueImpl::GetString","linkify":"<a name=\"cmfcfilterchunkvalueimpl__getstring\"></a>  CMFCFilterChunkValueImpl::GetString","source":"<a name=\"cmfcfilterchunkvalueimpl__getstring\"></a>  CMFCFilterChunkValueImpl::GetString"},{"content":"Retrieves the string value.","pos":[6615,6642]},{"pos":[6689,6701],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string containing the chunk value.","pos":[6705,6741]},{"pos":[6751,6758],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6768,6853],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcfilterchunkvalueimpl__getvalue\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCFilterChunkValueImpl::GetValue","linkify":"<a name=\"cmfcfilterchunkvalueimpl__getvalue\"></a>  CMFCFilterChunkValueImpl::GetValue","source":"<a name=\"cmfcfilterchunkvalueimpl__getvalue\"></a>  CMFCFilterChunkValueImpl::GetValue"},{"content":"Retrieves the value as an allocated propvariant.","pos":[6857,6905]},{"pos":[6977,6987],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"When the function returns, this parameter contains the chunk value.","pos":[7010,7077]},{"pos":[7087,7099],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7103,7238],"content":"S_OK if PROPVARIANT was allocated successfully and the chunk value was successfully copied to <ph id=\"ph1\">`ppPropVariant`</ph>; otherwise an error code.","source":"S_OK if PROPVARIANT was allocated successfully and the chunk value was successfully copied to `ppPropVariant`; otherwise an error code."},{"pos":[7248,7255],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7265,7364],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcfilterchunkvalueimpl__getvaluenoalloc\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCFilterChunkValueImpl::GetValueNoAlloc","linkify":"<a name=\"cmfcfilterchunkvalueimpl__getvaluenoalloc\"></a>  CMFCFilterChunkValueImpl::GetValueNoAlloc","source":"<a name=\"cmfcfilterchunkvalueimpl__getvaluenoalloc\"></a>  CMFCFilterChunkValueImpl::GetValueNoAlloc"},{"content":"Returns the non-allocated (internal value) value.","pos":[7368,7417]},{"pos":[7474,7486],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the current chunk value.","pos":[7490,7522]},{"pos":[7532,7539],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7549,7632],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcfilterchunkvalueimpl__isvalid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCFilterChunkValueImpl::IsValid","linkify":"<a name=\"cmfcfilterchunkvalueimpl__isvalid\"></a>  CMFCFilterChunkValueImpl::IsValid","source":"<a name=\"cmfcfilterchunkvalueimpl__isvalid\"></a>  CMFCFilterChunkValueImpl::IsValid"},{"content":"Checks whether this property value is valid or not.","pos":[7636,7687]},{"pos":[7737,7749],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7753,7815],"content":"<ph id=\"ph1\">`TRUE`</ph> if the current chunk value is valid; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the current chunk value is valid; otherwise `FALSE`."},{"pos":[7825,7832],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7842,7935],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcfilterchunkvalueimpl__setboolvalue\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCFilterChunkValueImpl::SetBoolValue","linkify":"<a name=\"cmfcfilterchunkvalueimpl__setboolvalue\"></a>  CMFCFilterChunkValueImpl::SetBoolValue","source":"<a name=\"cmfcfilterchunkvalueimpl__setboolvalue\"></a>  CMFCFilterChunkValueImpl::SetBoolValue"},{"content":"Overloaded.","pos":[7939,7950]},{"content":"Sets the property by key to a Boolean.","pos":[7951,7989]},{"pos":[8519,8529],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies a property key.","pos":[8543,8568]},{"content":"Specifies the chunk value to set.","pos":[8585,8618]},{"content":"Flags indicate whether this chunk contains a text-type or a value-type property.","pos":[8640,8720]},{"content":"Flag values are taken from the CHUNKSTATE enumeration.","pos":[8721,8775]},{"content":"The language and sublanguage associated with a chunk of text.","pos":[8794,8855]},{"content":"Chunk locale is used by document indexers to perform proper word breaking of text.","pos":[8856,8938]},{"content":"If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.","pos":[8939,9060]},{"content":"The length in characters of the source text from which the current chunk was derived.","pos":[9085,9170]},{"content":"A zero value signifies character-by-character correspondence between the source text and the derived text.","pos":[9171,9277]},{"content":"A nonzero value means that no such direct correspondence exists.","pos":[9278,9342]},{"content":"The offset from which the source text for a derived chunk starts in the source chunk.","pos":[9369,9454]},{"content":"The type of break that separates the previous chunk from the current chunk.","pos":[9481,9556]},{"content":"Values are from the CHUNK_BREAKTYPE enumeration.","pos":[9557,9605]},{"pos":[9615,9627],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"S_OK if successful; otherwise an error code.","pos":[9631,9675]},{"pos":[9685,9692],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9702,9787],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcfilterchunkvalueimpl__setchunk\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCFilterChunkValueImpl::SetChunk","linkify":"<a name=\"cmfcfilterchunkvalueimpl__setchunk\"></a>  CMFCFilterChunkValueImpl::SetChunk","source":"<a name=\"cmfcfilterchunkvalueimpl__setchunk\"></a>  CMFCFilterChunkValueImpl::SetChunk"},{"content":"A helper function that sets the chunk's common properties.","pos":[9791,9849]},{"pos":[10090,10100],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies a property key.","pos":[10114,10139]},{"content":"Flags indicate whether this chunk contains a text-type or a value-type property.","pos":[10161,10241]},{"content":"Flag values are taken from the CHUNKSTATE enumeration.","pos":[10242,10296]},{"content":"The language and sublanguage associated with a chunk of text.","pos":[10315,10376]},{"content":"Chunk locale is used by document indexers to perform proper word breaking of text.","pos":[10377,10459]},{"content":"If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.","pos":[10460,10581]},{"content":"The length in characters of the source text from which the current chunk was derived.","pos":[10606,10691]},{"content":"A zero value signifies character-by-character correspondence between the source text and the derived text.","pos":[10692,10798]},{"content":"A nonzero value means that no such direct correspondence exists.","pos":[10799,10863]},{"content":"The offset from which the source text for a derived chunk starts in the source chunk.","pos":[10890,10975]},{"content":"The type of break that separates the previous chunk from the current chunk.","pos":[11002,11077]},{"content":"Values are from the CHUNK_BREAKTYPE enumeration.","pos":[11078,11126]},{"pos":[11136,11148],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"S_OK if successful; otherwise error code.","pos":[11152,11193]},{"pos":[11203,11210],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11220,11315],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcfilterchunkvalueimpl__setdwordvalue\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCFilterChunkValueImpl::SetDwordValue","linkify":"<a name=\"cmfcfilterchunkvalueimpl__setdwordvalue\"></a>  CMFCFilterChunkValueImpl::SetDwordValue","source":"<a name=\"cmfcfilterchunkvalueimpl__setdwordvalue\"></a>  CMFCFilterChunkValueImpl::SetDwordValue"},{"content":"Set the property by key to a DWORD.","pos":[11319,11354]},{"pos":[11629,11639],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies a property key.","pos":[11653,11678]},{"content":"Specifies the chunk value to set.","pos":[11696,11729]},{"content":"Flags indicate whether this chunk contains a text-type or a value-type property.","pos":[11751,11831]},{"content":"Flag values are taken from the CHUNKSTATE enumeration.","pos":[11832,11886]},{"content":"The language and sublanguage associated with a chunk of text.","pos":[11905,11966]},{"content":"Chunk locale is used by document indexers to perform proper word breaking of text.","pos":[11967,12049]},{"content":"If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.","pos":[12050,12171]},{"content":"The length in characters of the source text from which the current chunk was derived.","pos":[12196,12281]},{"content":"A zero value signifies character-by-character correspondence between the source text and the derived text.","pos":[12282,12388]},{"content":"A nonzero value means that no such direct correspondence exists.","pos":[12389,12453]},{"content":"The offset from which the source text for a derived chunk starts in the source chunk.","pos":[12480,12565]},{"content":"The type of break that separates the previous chunk from the current chunk.","pos":[12592,12667]},{"content":"Values are from the CHUNK_BREAKTYPE enumeration.","pos":[12668,12716]},{"pos":[12726,12738],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"S_OK if successful; otherwise an error code.","pos":[12742,12786]},{"pos":[12796,12803],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12813,12914],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcfilterchunkvalueimpl__setfiletimevalue\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCFilterChunkValueImpl::SetFileTimeValue","linkify":"<a name=\"cmfcfilterchunkvalueimpl__setfiletimevalue\"></a>  CMFCFilterChunkValueImpl::SetFileTimeValue","source":"<a name=\"cmfcfilterchunkvalueimpl__setfiletimevalue\"></a>  CMFCFilterChunkValueImpl::SetFileTimeValue"},{"content":"Set the property by key to a filetime.","pos":[12918,12956]},{"pos":[13237,13247],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies a property key.","pos":[13261,13286]},{"content":"Specifies the chunk value to set.","pos":[13304,13337]},{"content":"Flags indicate whether this chunk contains a text-type or a value-type property.","pos":[13359,13439]},{"content":"Flag values are taken from the CHUNKSTATE enumeration.","pos":[13440,13494]},{"content":"The language and sublanguage associated with a chunk of text.","pos":[13513,13574]},{"content":"Chunk locale is used by document indexers to perform proper word breaking of text.","pos":[13575,13657]},{"content":"If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.","pos":[13658,13779]},{"content":"The length in characters of the source text from which the current chunk was derived.","pos":[13804,13889]},{"content":"A zero value signifies character-by-character correspondence between the source text and the derived text.","pos":[13890,13996]},{"content":"A nonzero value means that no such direct correspondence exists.","pos":[13997,14061]},{"content":"The offset from which the source text for a derived chunk starts in the source chunk.","pos":[14088,14173]},{"content":"The type of break that separates the previous chunk from the current chunk.","pos":[14200,14275]},{"content":"Values are from the CHUNK_BREAKTYPE enumeration.","pos":[14276,14324]},{"pos":[14334,14346],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"S_OK if successful; otherwise an error code.","pos":[14350,14394]},{"pos":[14404,14411],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14421,14516],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcfilterchunkvalueimpl__setint64value\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCFilterChunkValueImpl::SetInt64Value","linkify":"<a name=\"cmfcfilterchunkvalueimpl__setint64value\"></a>  CMFCFilterChunkValueImpl::SetInt64Value","source":"<a name=\"cmfcfilterchunkvalueimpl__setint64value\"></a>  CMFCFilterChunkValueImpl::SetInt64Value"},{"content":"Set the property by key to an int64.","pos":[14520,14556]},{"pos":[14832,14842],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies a property key.","pos":[14856,14881]},{"content":"Specifies the chunk value to set.","pos":[14898,14931]},{"content":"Flags indicate whether this chunk contains a text-type or a value-type property.","pos":[14953,15033]},{"content":"Flag values are taken from the CHUNKSTATE enumeration.","pos":[15034,15088]},{"content":"The language and sublanguage associated with a chunk of text.","pos":[15107,15168]},{"content":"Chunk locale is used by document indexers to perform proper word breaking of text.","pos":[15169,15251]},{"content":"If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.","pos":[15252,15373]},{"content":"The length in characters of the source text from which the current chunk was derived.","pos":[15398,15483]},{"content":"A zero value signifies character-by-character correspondence between the source text and the derived text.","pos":[15484,15590]},{"content":"A nonzero value means that no such direct correspondence exists.","pos":[15591,15655]},{"content":"The offset from which the source text for a derived chunk starts in the source chunk.","pos":[15682,15767]},{"content":"The type of break that separates the previous chunk from the current chunk.","pos":[15794,15869]},{"content":"Values are from the CHUNK_BREAKTYPE enumeration.","pos":[15870,15918]},{"pos":[15928,15940],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"S_OK if successful; otherwise an error code.","pos":[15944,15988]},{"pos":[15998,16005],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[16015,16106],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcfilterchunkvalueimpl__setintvalue\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCFilterChunkValueImpl::SetIntValue","linkify":"<a name=\"cmfcfilterchunkvalueimpl__setintvalue\"></a>  CMFCFilterChunkValueImpl::SetIntValue","source":"<a name=\"cmfcfilterchunkvalueimpl__setintvalue\"></a>  CMFCFilterChunkValueImpl::SetIntValue"},{"content":"Set the property by key to an int.","pos":[16110,16144]},{"pos":[16414,16424],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies a property key.","pos":[16438,16463]},{"content":"Specifies the chunk value to set.","pos":[16480,16513]},{"content":"Flags indicate whether this chunk contains a text-type or a value-type property.","pos":[16535,16615]},{"content":"Flag values are taken from the CHUNKSTATE enumeration.","pos":[16616,16670]},{"content":"The language and sublanguage associated with a chunk of text.","pos":[16689,16750]},{"content":"Chunk locale is used by document indexers to perform proper word breaking of text.","pos":[16751,16833]},{"content":"If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.","pos":[16834,16955]},{"content":"The length in characters of the source text from which the current chunk was derived.","pos":[16980,17065]},{"content":"A zero value signifies character-by-character correspondence between the source text and the derived text.","pos":[17066,17172]},{"content":"A nonzero value means that no such direct correspondence exists.","pos":[17173,17237]},{"content":"The offset from which the source text for a derived chunk starts in the source chunk.","pos":[17264,17349]},{"content":"The type of break that separates the previous chunk from the current chunk.","pos":[17376,17451]},{"content":"Values are from the CHUNK_BREAKTYPE enumeration.","pos":[17452,17500]},{"pos":[17510,17522],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"S_OK if successful; otherwise an error code.","pos":[17526,17570]},{"pos":[17580,17587],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17597,17690],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcfilterchunkvalueimpl__setlongvalue\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCFilterChunkValueImpl::SetLongValue","linkify":"<a name=\"cmfcfilterchunkvalueimpl__setlongvalue\"></a>  CMFCFilterChunkValueImpl::SetLongValue","source":"<a name=\"cmfcfilterchunkvalueimpl__setlongvalue\"></a>  CMFCFilterChunkValueImpl::SetLongValue"},{"content":"Set the property by key to a LONG.","pos":[17694,17728]},{"pos":[18000,18010],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies a property key.","pos":[18024,18049]},{"content":"Specifies the chunk value to set.","pos":[18066,18099]},{"content":"Flags indicate whether this chunk contains a text-type or a value-type property.","pos":[18121,18201]},{"content":"Flag values are taken from the CHUNKSTATE enumeration.","pos":[18202,18256]},{"content":"The language and sublanguage associated with a chunk of text.","pos":[18275,18336]},{"content":"Chunk locale is used by document indexers to perform proper word breaking of text.","pos":[18337,18419]},{"content":"If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.","pos":[18420,18541]},{"content":"The length in characters of the source text from which the current chunk was derived.","pos":[18566,18651]},{"content":"A zero value signifies character-by-character correspondence between the source text and the derived text.","pos":[18652,18758]},{"content":"A nonzero value means that no such direct correspondence exists.","pos":[18759,18823]},{"content":"The offset from which the source text for a derived chunk starts in the source chunk.","pos":[18850,18935]},{"content":"The type of break that separates the previous chunk from the current chunk.","pos":[18962,19037]},{"content":"Values are from the CHUNK_BREAKTYPE enumeration.","pos":[19038,19086]},{"pos":[19096,19108],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"S_OK if successful; otherwise an error code.","pos":[19112,19156]},{"pos":[19166,19173],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[19183,19288],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcfilterchunkvalueimpl__setsystemtimevalue\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCFilterChunkValueImpl::SetSystemTimeValue","linkify":"<a name=\"cmfcfilterchunkvalueimpl__setsystemtimevalue\"></a>  CMFCFilterChunkValueImpl::SetSystemTimeValue","source":"<a name=\"cmfcfilterchunkvalueimpl__setsystemtimevalue\"></a>  CMFCFilterChunkValueImpl::SetSystemTimeValue"},{"content":"Sets the property by key to a SystemTime.","pos":[19292,19333]},{"pos":[19622,19632],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies a property key.","pos":[19646,19671]},{"content":"Specifies the chunk value to set.","pos":[19694,19727]},{"content":"Flags indicate whether this chunk contains a text-type or a value-type property.","pos":[19749,19829]},{"content":"Flag values are taken from the CHUNKSTATE enumeration.","pos":[19830,19884]},{"content":"The language and sublanguage associated with a chunk of text.","pos":[19903,19964]},{"content":"Chunk locale is used by document indexers to perform proper word breaking of text.","pos":[19965,20047]},{"content":"If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.","pos":[20048,20169]},{"content":"The length in characters of the source text from which the current chunk was derived.","pos":[20194,20279]},{"content":"A zero value signifies character-by-character correspondence between the source text and the derived text.","pos":[20280,20386]},{"content":"A nonzero value means that no such direct correspondence exists.","pos":[20387,20451]},{"content":"The offset from which the source text for a derived chunk starts in the source chunk.","pos":[20478,20563]},{"content":"The type of break that separates the previous chunk from the current chunk.","pos":[20590,20665]},{"content":"Values are from the CHUNK_BREAKTYPE enumeration.","pos":[20666,20714]},{"pos":[20724,20736],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"S_OK if successful; otherwise an error code.","pos":[20740,20784]},{"pos":[20794,20801],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[20811,20904],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcfilterchunkvalueimpl__settextvalue\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCFilterChunkValueImpl::SetTextValue","linkify":"<a name=\"cmfcfilterchunkvalueimpl__settextvalue\"></a>  CMFCFilterChunkValueImpl::SetTextValue","source":"<a name=\"cmfcfilterchunkvalueimpl__settextvalue\"></a>  CMFCFilterChunkValueImpl::SetTextValue"},{"content":"Sets the property by key to a Unicode string.","pos":[20908,20953]},{"pos":[21232,21242],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies a property key.","pos":[21256,21281]},{"content":"Specifies the chunk value to set.","pos":[21302,21335]},{"content":"Flags indicate whether this chunk contains a text-type or a value-type property.","pos":[21357,21437]},{"content":"Flag values are taken from the CHUNKSTATE enumeration.","pos":[21438,21492]},{"content":"The language and sublanguage associated with a chunk of text.","pos":[21511,21572]},{"content":"Chunk locale is used by document indexers to perform proper word breaking of text.","pos":[21573,21655]},{"content":"If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.","pos":[21656,21777]},{"content":"The length in characters of the source text from which the current chunk was derived.","pos":[21802,21887]},{"content":"A zero value signifies character-by-character correspondence between the source text and the derived text.","pos":[21888,21994]},{"content":"A nonzero value means that no such direct correspondence exists.","pos":[21995,22059]},{"content":"The offset from which the source text for a derived chunk starts in the source chunk.","pos":[22086,22171]},{"content":"The type of break that separates the previous chunk from the current chunk.","pos":[22198,22273]},{"content":"Values are from the CHUNK_BREAKTYPE enumeration.","pos":[22274,22322]},{"pos":[22332,22344],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"S_OK if successful; otherwise an error code.","pos":[22348,22392]},{"pos":[22402,22409],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[22418,22426],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[22430,22475],"content":"<bpt id=\"p1\">[</bpt>Classes<ept id=\"p1\">](../../mfc/reference/mfc-classes.md)</ept>","source":"[Classes](../../mfc/reference/mfc-classes.md)"}],"content":"---\ntitle: \"CMFCFilterChunkValueImpl Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMFCFilterChunkValueImpl\"\n  - \"afxwin/CMFCFilterChunkValueImpl\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CMFCFilterChunkValueImpl class\"\nms.assetid: 3c833f23-5b88-4d08-9e09-ca6a8aec88bf\ncaps.latest.revision: 25\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMFCFilterChunkValueImpl Class\nThis is a class which simplifies both chunk and property value pair logic.  \n  \n## Syntax  \n  \n```  \nclass CMFCFilterChunkValueImpl : public ATL::IFilterChunkValue;  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCFilterChunkValueImpl::~CMFCFilterChunkValueImpl](#cmfcfilterchunkvalueimpl___dtorcmfcfilterchunkvalueimpl)|Destructs the object.|  \n|[CMFCFilterChunkValueImpl::CMFCFilterChunkValueImpl](#cmfcfilterchunkvalueimpl__cmfcfilterchunkvalueimpl)|Constructs the object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCFilterChunkValueImpl::Clear](#cmfcfilterchunkvalueimpl__clear)|Clears the ChunkValue.|  \n|[CMFCFilterChunkValueImpl::CopyChunk](#cmfcfilterchunkvalueimpl__copychunk)|Copies this chunk to a structure describing the characteristics of a chunk.|  \n|[CMFCFilterChunkValueImpl::CopyFrom](#cmfcfilterchunkvalueimpl__copyfrom)|Initializes this chunk value from the other value.|  \n|[CMFCFilterChunkValueImpl::GetChunkGUID](#cmfcfilterchunkvalueimpl__getchunkguid)|Retrieves the chunk GUID.|  \n|[CMFCFilterChunkValueImpl::GetChunkPID](#cmfcfilterchunkvalueimpl__getchunkpid)|Retrieves the chunk PID (property ID).|  \n|[CMFCFilterChunkValueImpl::GetChunkType](#cmfcfilterchunkvalueimpl__getchunktype)|Gets chunk type.|  \n|[CMFCFilterChunkValueImpl::GetString](#cmfcfilterchunkvalueimpl__getstring)|Retrieves the the string value.|  \n|[CMFCFilterChunkValueImpl::GetValue](#cmfcfilterchunkvalueimpl__getvalue)|Retrieves the value as an allocated propvariant.|  \n|[CMFCFilterChunkValueImpl::GetValueNoAlloc](#cmfcfilterchunkvalueimpl__getvaluenoalloc)|Returns non-allocated (internal value) value.|  \n|[CMFCFilterChunkValueImpl::IsValid](#cmfcfilterchunkvalueimpl__isvalid)|Checks whether this property value is valid or not.|  \n|[CMFCFilterChunkValueImpl::SetBoolValue](#cmfcfilterchunkvalueimpl__setboolvalue)|Overloaded. Sets the property by key to a Boolean.|  \n|[CMFCFilterChunkValueImpl::SetDwordValue](#cmfcfilterchunkvalueimpl__setdwordvalue)|Sets the property by key to a DWORD.|  \n|[CMFCFilterChunkValueImpl::SetFileTimeValue](#cmfcfilterchunkvalueimpl__setfiletimevalue)|Sets the property by key to a filetime.|  \n|[CMFCFilterChunkValueImpl::SetInt64Value](#cmfcfilterchunkvalueimpl__setint64value)|Sets the property by key to an int64.|  \n|[CMFCFilterChunkValueImpl::SetIntValue](#cmfcfilterchunkvalueimpl__setintvalue)|Sets the property by key to an int.|  \n|[CMFCFilterChunkValueImpl::SetLongValue](#cmfcfilterchunkvalueimpl__setlongvalue)|Sets the property by key to a LONG.|  \n|[CMFCFilterChunkValueImpl::SetSystemTimeValue](#cmfcfilterchunkvalueimpl__setsystemtimevalue)|Sets the property by key to a SystemTime.|  \n|[CMFCFilterChunkValueImpl::SetTextValue](#cmfcfilterchunkvalueimpl__settextvalue)|Sets the property by key to a Unicode string.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCFilterChunkValueImpl::SetChunk](#cmfcfilterchunkvalueimpl__setchunk)|A helper function that sets the chunk's common properties.|  \n  \n## Remarks  \n To use, you simply create a CMFCFilterChunkValueImpl class of the right kind  \n  \n Example:  \n  \n CMFCFilterChunkValueImpl chunk;  \n  \n hr = chunk.SetBoolValue(PKEY_IsAttachment, true);  \n  \n or  \n  \n hr = chunk.SetFileTimeValue(PKEY_ItemDate, ftLastModified);  \n  \n## Inheritance Hierarchy  \n `ATL::IFilterChunkValue`  \n  \n [CMFCFilterChunkValueImpl](../../mfc/reference/cmfcfilterchunkvalueimpl-class.md)  \n  \n## Requirements  \n **Header:** afxwin.h  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__clear\"></a>  CMFCFilterChunkValueImpl::Clear  \n Clears the ChunkValue.  \n  \n```  \nvoid Clear();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__cmfcfilterchunkvalueimpl\"></a>  CMFCFilterChunkValueImpl::CMFCFilterChunkValueImpl  \n Constructs the object.  \n  \n```  \nCMFCFilterChunkValueImpl();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl___dtorcmfcfilterchunkvalueimpl\"></a>  CMFCFilterChunkValueImpl::~CMFCFilterChunkValueImpl  \n Destructs the object.  \n  \n```  \nvirtual ~CMFCFilterChunkValueImpl();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__copychunk\"></a>  CMFCFilterChunkValueImpl::CopyChunk  \n Copies this chunk to a structure describing the characteristics of a chunk.  \n  \n```  \nHRESULT CopyChunk(STAT_CHUNK* pStatChunk);\n```  \n  \n### Parameters  \n `pStatChunk`  \n A pointer to destination value describing the characteristics of the chunk.  \n  \n### Return Value  \n S_OK if successful; otherwise an error code.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__copyfrom\"></a>  CMFCFilterChunkValueImpl::CopyFrom  \n Initializes this chunk value from the other value.  \n  \n```  \nvoid CopyFrom (IFilterChunkValue* pValue);\n```  \n  \n### Parameters  \n `pValue`  \n Specifies the source value to copy from.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__getchunkguid\"></a>  CMFCFilterChunkValueImpl::GetChunkGUID  \n Retrieves the chunk GUID.  \n  \n```  \nREFGUID GetChunkGUID() const;\n\n \n```  \n  \n### Return Value  \n A reference to a GUID identifying the chunk.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__getchunkpid\"></a>  CMFCFilterChunkValueImpl::GetChunkPID  \n Retrieves the chunk PID (property ID).  \n  \n```  \nDWORD GetChunkPID() const;\n\n \n```  \n  \n### Return Value  \n A DWORD value containing the property ID.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__getchunktype\"></a>  CMFCFilterChunkValueImpl::GetChunkType  \n Retrieves the chunk type.  \n  \n```  \nCHUNKSTATE GetChunkType() const;\n\n \n```  \n  \n### Return Value  \n A CHUNKSTATE enumerated value, which specifies whether the current chunk is a text-type property or a value-type property.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__getstring\"></a>  CMFCFilterChunkValueImpl::GetString  \n Retrieves the string value.  \n  \n```  \nCString &GetString();\n```  \n  \n### Return Value  \n A string containing the chunk value.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__getvalue\"></a>  CMFCFilterChunkValueImpl::GetValue  \n Retrieves the value as an allocated propvariant.  \n  \n```  \nHRESULT GetValue(PROPVARIANT** ppPropVariant);\n```  \n  \n### Parameters  \n `ppPropVariant`  \n When the function returns, this parameter contains the chunk value.  \n  \n### Return Value  \n S_OK if PROPVARIANT was allocated successfully and the chunk value was successfully copied to `ppPropVariant`; otherwise an error code.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__getvaluenoalloc\"></a>  CMFCFilterChunkValueImpl::GetValueNoAlloc  \n Returns the non-allocated (internal value) value.  \n  \n```  \nPROPVARIANT GetValueNoAlloc ();\n```  \n  \n### Return Value  \n Returns the current chunk value.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__isvalid\"></a>  CMFCFilterChunkValueImpl::IsValid  \n Checks whether this property value is valid or not.  \n  \n```  \nBOOL IsValid() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the current chunk value is valid; otherwise `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__setboolvalue\"></a>  CMFCFilterChunkValueImpl::SetBoolValue  \n Overloaded. Sets the property by key to a Boolean.  \n  \n```  \nHRESULT SetBoolValue(\n    REFPROPERTYKEY pkey,  \n    BOOL bVal,  \n    CHUNKSTATE chunkType = CHUNK_VALUE,  \n    LCID locale = 0,  \n    DWORD cwcLenSource = 0,  \n    DWORD cwcStartSource = 0,  \n    CHUNK_BREAKTYPE chunkBreakType = CHUNK_NO_BREAK);\n\n \nHRESULT SetBoolValue(\n    REFPROPERTYKEY pkey,  \n    VARIANT_BOOL bVal,  \n    CHUNKSTATE chunkType = CHUNK_VALUE,  \n    LCID locale = 0,  \n    DWORD cwcLenSource = 0,  \n    DWORD cwcStartSource = 0,  \n    CHUNK_BREAKTYPE chunkBreakType = CHUNK_NO_BREAK);\n```  \n  \n### Parameters  \n `pkey`  \n Specifies a property key.  \n  \n `bVal`  \n Specifies the chunk value to set.  \n  \n `chunkType`  \n Flags indicate whether this chunk contains a text-type or a value-type property. Flag values are taken from the CHUNKSTATE enumeration.  \n  \n `locale`  \n The language and sublanguage associated with a chunk of text. Chunk locale is used by document indexers to perform proper word breaking of text. If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.  \n  \n `cwcLenSource`  \n The length in characters of the source text from which the current chunk was derived. A zero value signifies character-by-character correspondence between the source text and the derived text. A nonzero value means that no such direct correspondence exists.  \n  \n `cwcStartSource`  \n The offset from which the source text for a derived chunk starts in the source chunk.  \n  \n `chunkBreakType`  \n The type of break that separates the previous chunk from the current chunk. Values are from the CHUNK_BREAKTYPE enumeration.  \n  \n### Return Value  \n S_OK if successful; otherwise an error code.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__setchunk\"></a>  CMFCFilterChunkValueImpl::SetChunk  \n A helper function that sets the chunk's common properties.  \n  \n```  \nHRESULT SetChunk(\n    REFPROPERTYKEY pkey,  \n    CHUNKSTATE chunkType=CHUNK_VALUE,  \n    LCID locale=0,  \n    DWORD cwcLenSource=0,  \n    DWORD cwcStartSource=0,  \n    CHUNK_BREAKTYPE chunkBreakType=CHUNK_NO_BREAK);\n```  \n  \n### Parameters  \n `pkey`  \n Specifies a property key.  \n  \n `chunkType`  \n Flags indicate whether this chunk contains a text-type or a value-type property. Flag values are taken from the CHUNKSTATE enumeration.  \n  \n `locale`  \n The language and sublanguage associated with a chunk of text. Chunk locale is used by document indexers to perform proper word breaking of text. If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.  \n  \n `cwcLenSource`  \n The length in characters of the source text from which the current chunk was derived. A zero value signifies character-by-character correspondence between the source text and the derived text. A nonzero value means that no such direct correspondence exists.  \n  \n `cwcStartSource`  \n The offset from which the source text for a derived chunk starts in the source chunk.  \n  \n `chunkBreakType`  \n The type of break that separates the previous chunk from the current chunk. Values are from the CHUNK_BREAKTYPE enumeration.  \n  \n### Return Value  \n S_OK if successful; otherwise error code.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__setdwordvalue\"></a>  CMFCFilterChunkValueImpl::SetDwordValue  \n Set the property by key to a DWORD.  \n  \n```  \nHRESULT SetDwordValue(\n    REFPROPERTYKEY pkey,  \n    DWORD dwVal,  \n    CHUNKSTATE chunkType = CHUNK_VALUE,  \n    LCID locale = 0,  \n    DWORD cwcLenSource = 0,  \n    DWORD cwcStartSource = 0,  \n    CHUNK_BREAKTYPE chunkBreakType = CHUNK_NO_BREAK);\n```  \n  \n### Parameters  \n `pkey`  \n Specifies a property key.  \n  \n `dwVal`  \n Specifies the chunk value to set.  \n  \n `chunkType`  \n Flags indicate whether this chunk contains a text-type or a value-type property. Flag values are taken from the CHUNKSTATE enumeration.  \n  \n `locale`  \n The language and sublanguage associated with a chunk of text. Chunk locale is used by document indexers to perform proper word breaking of text. If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.  \n  \n `cwcLenSource`  \n The length in characters of the source text from which the current chunk was derived. A zero value signifies character-by-character correspondence between the source text and the derived text. A nonzero value means that no such direct correspondence exists.  \n  \n `cwcStartSource`  \n The offset from which the source text for a derived chunk starts in the source chunk.  \n  \n `chunkBreakType`  \n The type of break that separates the previous chunk from the current chunk. Values are from the CHUNK_BREAKTYPE enumeration.  \n  \n### Return Value  \n S_OK if successful; otherwise an error code.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__setfiletimevalue\"></a>  CMFCFilterChunkValueImpl::SetFileTimeValue  \n Set the property by key to a filetime.  \n  \n```  \nHRESULT SetFileTimeValue(\n    REFPROPERTYKEY pkey,  \n    FILETIME dtVal,  \n    CHUNKSTATE chunkType = CHUNK_VALUE,  \n    LCID locale = 0,  \n    DWORD cwcLenSource = 0,  \n    DWORD cwcStartSource = 0,  \n    CHUNK_BREAKTYPE chunkBreakType = CHUNK_NO_BREAK);\n```  \n  \n### Parameters  \n `pkey`  \n Specifies a property key.  \n  \n `dtVal`  \n Specifies the chunk value to set.  \n  \n `chunkType`  \n Flags indicate whether this chunk contains a text-type or a value-type property. Flag values are taken from the CHUNKSTATE enumeration.  \n  \n `locale`  \n The language and sublanguage associated with a chunk of text. Chunk locale is used by document indexers to perform proper word breaking of text. If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.  \n  \n `cwcLenSource`  \n The length in characters of the source text from which the current chunk was derived. A zero value signifies character-by-character correspondence between the source text and the derived text. A nonzero value means that no such direct correspondence exists.  \n  \n `cwcStartSource`  \n The offset from which the source text for a derived chunk starts in the source chunk.  \n  \n `chunkBreakType`  \n The type of break that separates the previous chunk from the current chunk. Values are from the CHUNK_BREAKTYPE enumeration.  \n  \n### Return Value  \n S_OK if successful; otherwise an error code.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__setint64value\"></a>  CMFCFilterChunkValueImpl::SetInt64Value  \n Set the property by key to an int64.  \n  \n```  \nHRESULT SetInt64Value(\n    REFPROPERTYKEY pkey,  \n    __int64 nVal,  \n    CHUNKSTATE chunkType = CHUNK_VALUE,  \n    LCID locale = 0,  \n    DWORD cwcLenSource = 0,  \n    DWORD cwcStartSource = 0,  \n    CHUNK_BREAKTYPE chunkBreakType = CHUNK_NO_BREAK);\n```  \n  \n### Parameters  \n `pkey`  \n Specifies a property key.  \n  \n `nVal`  \n Specifies the chunk value to set.  \n  \n `chunkType`  \n Flags indicate whether this chunk contains a text-type or a value-type property. Flag values are taken from the CHUNKSTATE enumeration.  \n  \n `locale`  \n The language and sublanguage associated with a chunk of text. Chunk locale is used by document indexers to perform proper word breaking of text. If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.  \n  \n `cwcLenSource`  \n The length in characters of the source text from which the current chunk was derived. A zero value signifies character-by-character correspondence between the source text and the derived text. A nonzero value means that no such direct correspondence exists.  \n  \n `cwcStartSource`  \n The offset from which the source text for a derived chunk starts in the source chunk.  \n  \n `chunkBreakType`  \n The type of break that separates the previous chunk from the current chunk. Values are from the CHUNK_BREAKTYPE enumeration.  \n  \n### Return Value  \n S_OK if successful; otherwise an error code.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__setintvalue\"></a>  CMFCFilterChunkValueImpl::SetIntValue  \n Set the property by key to an int.  \n  \n```  \nHRESULT SetIntValue(\n    REFPROPERTYKEY pkey,  \n    int nVal,  \n    CHUNKSTATE chunkType = CHUNK_VALUE,  \n    LCID locale = 0,  \n    DWORD cwcLenSource = 0,  \n    DWORD cwcStartSource = 0,  \n    CHUNK_BREAKTYPE chunkBreakType = CHUNK_NO_BREAK);\n```  \n  \n### Parameters  \n `pkey`  \n Specifies a property key.  \n  \n `nVal`  \n Specifies the chunk value to set.  \n  \n `chunkType`  \n Flags indicate whether this chunk contains a text-type or a value-type property. Flag values are taken from the CHUNKSTATE enumeration.  \n  \n `locale`  \n The language and sublanguage associated with a chunk of text. Chunk locale is used by document indexers to perform proper word breaking of text. If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.  \n  \n `cwcLenSource`  \n The length in characters of the source text from which the current chunk was derived. A zero value signifies character-by-character correspondence between the source text and the derived text. A nonzero value means that no such direct correspondence exists.  \n  \n `cwcStartSource`  \n The offset from which the source text for a derived chunk starts in the source chunk.  \n  \n `chunkBreakType`  \n The type of break that separates the previous chunk from the current chunk. Values are from the CHUNK_BREAKTYPE enumeration.  \n  \n### Return Value  \n S_OK if successful; otherwise an error code.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__setlongvalue\"></a>  CMFCFilterChunkValueImpl::SetLongValue  \n Set the property by key to a LONG.  \n  \n```  \nHRESULT SetLongValue(\n    REFPROPERTYKEY pkey,  \n    long lVal,  \n    CHUNKSTATE chunkType = CHUNK_VALUE,  \n    LCID locale = 0,  \n    DWORD cwcLenSource = 0,  \n    DWORD cwcStartSource = 0,  \n    CHUNK_BREAKTYPE chunkBreakType = CHUNK_NO_BREAK);\n```  \n  \n### Parameters  \n `pkey`  \n Specifies a property key.  \n  \n `lVal`  \n Specifies the chunk value to set.  \n  \n `chunkType`  \n Flags indicate whether this chunk contains a text-type or a value-type property. Flag values are taken from the CHUNKSTATE enumeration.  \n  \n `locale`  \n The language and sublanguage associated with a chunk of text. Chunk locale is used by document indexers to perform proper word breaking of text. If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.  \n  \n `cwcLenSource`  \n The length in characters of the source text from which the current chunk was derived. A zero value signifies character-by-character correspondence between the source text and the derived text. A nonzero value means that no such direct correspondence exists.  \n  \n `cwcStartSource`  \n The offset from which the source text for a derived chunk starts in the source chunk.  \n  \n `chunkBreakType`  \n The type of break that separates the previous chunk from the current chunk. Values are from the CHUNK_BREAKTYPE enumeration.  \n  \n### Return Value  \n S_OK if successful; otherwise an error code.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__setsystemtimevalue\"></a>  CMFCFilterChunkValueImpl::SetSystemTimeValue  \n Sets the property by key to a SystemTime.  \n  \n```  \nHRESULT SetSystemTimeValue(\n    REFPROPERTYKEY pkey,  \n    const SYSTEMTIME& systemTime,  \n    CHUNKSTATE chunkType = CHUNK_VALUE,  \n    LCID locale=0,  \n    DWORD cwcLenSource=0,  \n    DWORD cwcStartSource=0,  \n    CHUNK_BREAKTYPE chunkBreakType=CHUNK_NO_BREAK);\n```  \n  \n### Parameters  \n `pkey`  \n Specifies a property key.  \n  \n `systemTime`  \n Specifies the chunk value to set.  \n  \n `chunkType`  \n Flags indicate whether this chunk contains a text-type or a value-type property. Flag values are taken from the CHUNKSTATE enumeration.  \n  \n `locale`  \n The language and sublanguage associated with a chunk of text. Chunk locale is used by document indexers to perform proper word breaking of text. If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.  \n  \n `cwcLenSource`  \n The length in characters of the source text from which the current chunk was derived. A zero value signifies character-by-character correspondence between the source text and the derived text. A nonzero value means that no such direct correspondence exists.  \n  \n `cwcStartSource`  \n The offset from which the source text for a derived chunk starts in the source chunk.  \n  \n `chunkBreakType`  \n The type of break that separates the previous chunk from the current chunk. Values are from the CHUNK_BREAKTYPE enumeration.  \n  \n### Return Value  \n S_OK if successful; otherwise an error code.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcfilterchunkvalueimpl__settextvalue\"></a>  CMFCFilterChunkValueImpl::SetTextValue  \n Sets the property by key to a Unicode string.  \n  \n```  \nHRESULT SetTextValue(\n    REFPROPERTYKEY pkey,  \n    LPCTSTR pszValue,  \n    CHUNKSTATE chunkType = CHUNK_VALUE,  \n    LCID locale = 0,  \n    DWORD cwcLenSource = 0,  \n    DWORD cwcStartSource = 0,  \n    CHUNK_BREAKTYPE chunkBreakType = CHUNK_NO_BREAK);\n```  \n  \n### Parameters  \n `pkey`  \n Specifies a property key.  \n  \n `pszValue`  \n Specifies the chunk value to set.  \n  \n `chunkType`  \n Flags indicate whether this chunk contains a text-type or a value-type property. Flag values are taken from the CHUNKSTATE enumeration.  \n  \n `locale`  \n The language and sublanguage associated with a chunk of text. Chunk locale is used by document indexers to perform proper word breaking of text. If the chunk is neither text-type nor a value-type with data type VT_LPWSTR, VT_LPSTR, or VT_BSTR, this field is ignored.  \n  \n `cwcLenSource`  \n The length in characters of the source text from which the current chunk was derived. A zero value signifies character-by-character correspondence between the source text and the derived text. A nonzero value means that no such direct correspondence exists.  \n  \n `cwcStartSource`  \n The offset from which the source text for a derived chunk starts in the source chunk.  \n  \n `chunkBreakType`  \n The type of break that separates the previous chunk from the current chunk. Values are from the CHUNK_BREAKTYPE enumeration.  \n  \n### Return Value  \n S_OK if successful; otherwise an error code.  \n  \n### Remarks  \n  \n## See Also  \n [Classes](../../mfc/reference/mfc-classes.md)\n"}