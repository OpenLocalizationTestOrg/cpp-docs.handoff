{"nodes":[{"pos":[12,45],"content":"_set_new_handler | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_set_new_handler | Microsoft Docs","pos":[0,33]}]},{"content":"_set_new_handler","pos":[1061,1077]},{"pos":[1078,1176],"content":"Transfers control to your error-handling mechanism if the <ph id=\"ph1\">`new`</ph> operator fails to allocate memory.","source":"Transfers control to your error-handling mechanism if the `new` operator fails to allocate memory."},{"content":"Syntax","pos":[1185,1191]},{"content":"Parameters","pos":[1270,1280]},{"content":"Pointer to the application-supplied memory handling function.","pos":[1301,1362]},{"content":"An argument of 0 causes the new handler to be removed.","pos":[1363,1417]},{"content":"Return Value","pos":[1426,1438]},{"content":"Returns a pointer to the previous exception handling function registered by <ph id=\"ph1\">`_set_new_handler`</ph>, so that the previous function can be restored later.","pos":[1442,1590],"source":"Returns a pointer to the previous exception handling function registered by `_set_new_handler`, so that the previous function can be restored later."},{"content":"If no previous function has been set, the return value can be used to restore the default behavior; this value can be <ph id=\"ph1\">`NULL`</ph>.","pos":[1591,1716],"source":" If no previous function has been set, the return value can be used to restore the default behavior; this value can be `NULL`."},{"content":"Remarks","pos":[1725,1732]},{"content":"The C++ <ph id=\"ph1\">`_set_new_handler`</ph> function specifies an exception-handling function that gains control if the <ph id=\"ph2\">`new`</ph> operator fails to allocate memory.","pos":[1736,1879],"source":"The C++ `_set_new_handler` function specifies an exception-handling function that gains control if the `new` operator fails to allocate memory."},{"content":"If <ph id=\"ph1\">`new`</ph> fails, the run-time system automatically calls the exception-handling function that was passed as an argument to <ph id=\"ph2\">`_set_new_handler`</ph>.","pos":[1880,2021],"source":" If `new` fails, the run-time system automatically calls the exception-handling function that was passed as an argument to `_set_new_handler`."},{"content":", defined in New.h, is a pointer to a function that returns type <ph id=\"ph1\">`int`</ph> and takes an argument of type <ph id=\"ph2\">`size_t`</ph>.","pos":[2028,2138],"source":", defined in New.h, is a pointer to a function that returns type `int` and takes an argument of type `size_t`."},{"content":"Use <ph id=\"ph1\">`size_t`</ph> to specify the amount of space to be allocated.","pos":[2139,2199],"source":" Use `size_t` to specify the amount of space to be allocated."},{"content":"There is no default handler.","pos":[2206,2234]},{"content":"is essentially a garbage-collection scheme.","pos":[2260,2303]},{"content":"The run-time system retries allocation each time your function returns a nonzero value and fails if your function returns 0.","pos":[2304,2428]},{"pos":[2435,2595],"content":"An occurrence of the <ph id=\"ph1\">`_set_new_handler`</ph> function in a program registers the exception-handling function specified in the argument list with the run-time system:","source":"An occurrence of the `_set_new_handler` function in a program registers the exception-handling function specified in the argument list with the run-time system:"},{"pos":[2831,2944],"content":"You can save the function address that was last passed to the <ph id=\"ph1\">`_set_new_handler`</ph> function and reinstate it later:","source":"You can save the function address that was last passed to the `_set_new_handler` function and reinstate it later:"},{"content":"The C++ <bpt id=\"p1\">[</bpt>_set_new_mode<ept id=\"p1\">](../../c-runtime-library/reference/set-new-mode.md)</ept> function sets the new handler mode for <bpt id=\"p2\">[</bpt>malloc<ept id=\"p2\">](../../c-runtime-library/reference/malloc.md)</ept>.","pos":[3133,3301],"source":"The C++ [_set_new_mode](../../c-runtime-library/reference/set-new-mode.md) function sets the new handler mode for [malloc](../../c-runtime-library/reference/malloc.md)."},{"content":"The new handler mode indicates whether, on failure, <ph id=\"ph1\">`malloc`</ph> is to call the new handler routine as set by <ph id=\"ph2\">`_set_new_handler`</ph>.","pos":[3302,3427],"source":" The new handler mode indicates whether, on failure, `malloc` is to call the new handler routine as set by `_set_new_handler`."},{"content":"By default, <ph id=\"ph1\">`malloc`</ph> does not call the new handler routine on failure to allocate memory.","pos":[3428,3517],"source":" By default, `malloc` does not call the new handler routine on failure to allocate memory."},{"content":"You can override this default behavior so that, when <ph id=\"ph1\">`malloc`</ph> fails to allocate memory, <ph id=\"ph2\">`malloc`</ph> calls the new handler routine in the same way that the <ph id=\"ph3\">`new`</ph> operator does when it fails for the same reason.","pos":[3518,3724],"source":" You can override this default behavior so that, when `malloc` fails to allocate memory, `malloc` calls the new handler routine in the same way that the `new` operator does when it fails for the same reason."},{"content":"To override the default, call:","pos":[3725,3755]},{"content":"early in your program or link with Newmode.obj.","pos":[3796,3843]},{"pos":[3850,3961],"content":"If a user-defined <ph id=\"ph1\">`operator new`</ph>is provided, the new handler functions are not automatically called on failure.","source":"If a user-defined `operator new`is provided, the new handler functions are not automatically called on failure."},{"pos":[3968,4110],"content":"For more information, see <bpt id=\"p1\">[</bpt>new<ept id=\"p1\">](../../cpp/new-operator-cpp.md)</ept> and <bpt id=\"p2\">[</bpt>delete<ept id=\"p2\">](../../cpp/delete-operator-cpp.md)</ept> in the <bpt id=\"p3\">*</bpt>C++ Language Reference<ept id=\"p3\">*</ept>.","source":"For more information, see [new](../../cpp/new-operator-cpp.md) and [delete](../../cpp/delete-operator-cpp.md) in the *C++ Language Reference*."},{"pos":[4117,4357],"content":"There is a single <ph id=\"ph1\">`_set_new_handler`</ph> handler for all dynamically linked DLLs or executables; even if you call <ph id=\"ph2\">`_set_new_handler`</ph> your handler might be replaced by another or that you are replacing a handler set by another DLL or executable.","source":"There is a single `_set_new_handler` handler for all dynamically linked DLLs or executables; even if you call `_set_new_handler` your handler might be replaced by another or that you are replacing a handler set by another DLL or executable."},{"content":"Requirements","pos":[4366,4378]},{"content":"Routine","pos":[4385,4392]},{"content":"Required header","pos":[4393,4408]},{"content":"new.h&gt;","pos":[4474,4480],"source":"new.h>"},{"pos":[4488,4606],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[4615,4622]},{"content":"In this example, when the allocation fails, control is transferred to MyNewHandler.","pos":[4626,4709]},{"content":"The argument passed to MyNewHandler is the number of bytes requested.","pos":[4710,4779]},{"content":"The value returned from MyNewHandler is a flag indicating whether allocation should be retried: a nonzero value indicates that allocation should be retried, and a zero value indicates that allocation has failed.","pos":[4780,4991]},{"content":".NET Framework Equivalent","pos":[6026,6051]},{"content":"Not applicable.","pos":[6055,6070]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[6071,6118],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[6119,6244],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[6253,6261]},{"content":"Memory Allocation","pos":[6266,6283]},{"content":"calloc","pos":[6336,6342]},{"content":"free","pos":[6394,6398]},{"content":"realloc","pos":[6448,6455]}],"content":"---\ntitle: \"_set_new_handler | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_set_new_handler\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-runtime-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_set_new_handler\"\n  - \"set_new_handler\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_set_new_handler function\"\n  - \"set_new_handler function\"\n  - \"error handling\"\n  - \"transferring control to error handler\"\nms.assetid: 1d1781b6-5cf8-486a-b430-f365e0bb023f\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _set_new_handler\nTransfers control to your error-handling mechanism if the `new` operator fails to allocate memory.  \n  \n## Syntax  \n  \n```  \n_PNH _set_new_handler(  \n   _PNH pNewHandler   \n);  \n```  \n  \n#### Parameters  \n `pNewHandler`  \n Pointer to the application-supplied memory handling function. An argument of 0 causes the new handler to be removed.  \n  \n## Return Value  \n Returns a pointer to the previous exception handling function registered by `_set_new_handler`, so that the previous function can be restored later. If no previous function has been set, the return value can be used to restore the default behavior; this value can be `NULL`.  \n  \n## Remarks  \n The C++ `_set_new_handler` function specifies an exception-handling function that gains control if the `new` operator fails to allocate memory. If `new` fails, the run-time system automatically calls the exception-handling function that was passed as an argument to `_set_new_handler`. `_PNH`, defined in New.h, is a pointer to a function that returns type `int` and takes an argument of type `size_t`. Use `size_t` to specify the amount of space to be allocated.  \n  \n There is no default handler.  \n  \n `_set_new_handler` is essentially a garbage-collection scheme. The run-time system retries allocation each time your function returns a nonzero value and fails if your function returns 0.  \n  \n An occurrence of the `_set_new_handler` function in a program registers the exception-handling function specified in the argument list with the run-time system:  \n  \n```  \n#include <new.h>  \nint handle_program_memory_depletion( size_t )  \n{  \n   // Your code  \n}  \nint main( void )  \n{  \n   _set_new_handler( handle_program_memory_depletion );  \n   int *pi = new int[BIG_NUMBER];  \n}  \n```  \n  \n You can save the function address that was last passed to the `_set_new_handler` function and reinstate it later:  \n  \n```  \n_PNH old_handler = _set_new_handler( my_handler );  \n   // Code that requires my_handler  \n   _set_new_handler( old_handler )  \n   // Code that requires old_handler  \n```  \n  \n The C++ [_set_new_mode](../../c-runtime-library/reference/set-new-mode.md) function sets the new handler mode for [malloc](../../c-runtime-library/reference/malloc.md). The new handler mode indicates whether, on failure, `malloc` is to call the new handler routine as set by `_set_new_handler`. By default, `malloc` does not call the new handler routine on failure to allocate memory. You can override this default behavior so that, when `malloc` fails to allocate memory, `malloc` calls the new handler routine in the same way that the `new` operator does when it fails for the same reason. To override the default, call:  \n  \n```  \n_set_new_mode(1)  \n```  \n  \n early in your program or link with Newmode.obj.  \n  \n If a user-defined `operator new`is provided, the new handler functions are not automatically called on failure.  \n  \n For more information, see [new](../../cpp/new-operator-cpp.md) and [delete](../../cpp/delete-operator-cpp.md) in the *C++ Language Reference*.  \n  \n There is a single `_set_new_handler` handler for all dynamically linked DLLs or executables; even if you call `_set_new_handler` your handler might be replaced by another or that you are replacing a handler set by another DLL or executable.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_set_new_handler`|\\<new.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n In this example, when the allocation fails, control is transferred to MyNewHandler. The argument passed to MyNewHandler is the number of bytes requested. The value returned from MyNewHandler is a flag indicating whether allocation should be retried: a nonzero value indicates that allocation should be retried, and a zero value indicates that allocation has failed.  \n  \n```  \n// crt_set_new_handler.cpp  \n// compile with: /c  \n#include <stdio.h>  \n#include <new.h>  \n#define BIG_NUMBER 0x1fffffff  \n  \nint coalesced = 0;  \n  \nint CoalesceHeap()  \n{  \n   coalesced = 1;  // Flag RecurseAlloc to stop   \n   // do some work to free memory  \n   return 0;  \n}  \n// Define a function to be called if new fails to allocate memory.  \nint MyNewHandler( size_t size )  \n{  \n   printf(\"Allocation failed. Coalescing heap.\\n\");  \n  \n   // Call a function to recover some heap space.  \n   return CoalesceHeap();  \n}  \n  \nint RecurseAlloc() {  \n   int *pi = new int[BIG_NUMBER];  \n   if (!coalesced)  \n      RecurseAlloc();  \n   return 0;  \n}  \n  \nint main()  \n{  \n   // Set the failure handler for new to be MyNewHandler.  \n   _set_new_handler( MyNewHandler );  \n   RecurseAlloc();  \n}  \n```  \n  \n```Output  \nAllocation failed. Coalescing heap.  \n  \nThis application has requested the Runtime to terminate it in an unusual way.  \nPlease contact the application's support team for more information.  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Memory Allocation](../../c-runtime-library/memory-allocation.md)   \n [calloc](../../c-runtime-library/reference/calloc.md)   \n [free](../../c-runtime-library/reference/free.md)   \n [realloc](../../c-runtime-library/reference/realloc.md)"}