<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">15bc344f102620dadcc2cdeaaaeea7839a63e4d1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\storage-classes-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c3f9347e7c4894b09d42f756018075a108c4489c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">63d1a625ae248c25d6cf49a2a44b52d3d1f53594</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Storage classes (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Storage classes (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>storage class<ept id="p1">*</ept> in the context of C++ variable declarations is a type specifier that governs the lifetime, linkage, and memory location of objects and.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A given object can have only one storage class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Variables defined within a block have automatic storage unless otherwise specified using the <ph id="ph1">`extern`</ph>, <ph id="ph2">`static`</ph>, or <ph id="ph3">`thread_local`</ph> specifiers.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Automatic objects and variables have no linkage; they are not visible to code outside the block.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Notes</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>mutable<ept id="p1">](../cpp/mutable-data-members-cpp.md)</ept> keyword may be considered a storage class specifier.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>However, it is only available in the member list of a class definition.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Starting with <ph id="ph1">[!INCLUDE[cpp_dev10_long](../build/includes/cpp_dev10_long_md.md)]</ph>, the <ph id="ph2">`auto`</ph> keyword is no longer a C++ storage-class specifier, and the <ph id="ph3">`register`</ph> keyword is deprecated.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>static</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>extern</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>thread_local</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>static</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`static`</ph> keyword can be used to declare variables and functions at global scope, namespace scope, and class scope.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Static variables can also be declared at local scope.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Static duration means that the object or variable is allocated when the program starts and is deallocated when the program ends.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>External linkage means that the name of the variable is visible from outside the file in which the variable is declared.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Conversely, internal linkage means that the name is not visible outside the file in which the variable is declared.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>By default, an object or variable that is defined in the global namespace has static duration and external linkage.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`static`</ph> keyword can be used in the following situations.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When you declare a variable or function at file scope (global and/or namespace scope), the <ph id="ph1">`static`</ph> keyword specifies that the variable or function has internal linkage.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When you declare a variable, the variable has static duration and the compiler initializes it to 0 unless you specify another value.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When you declare a variable in a function, the <ph id="ph1">`static`</ph> keyword specifies that the variable retains its state between calls to that function.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When you declare a data member in a class declaration, the <ph id="ph1">`static`</ph> keyword specifies that one copy of the member is shared by all instances of the class.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A static data member must be defined at file scope.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An integral data member that you declare as <ph id="ph1">`const``static`</ph> can have an initializer.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When you declare a member function in a class declaration, the <ph id="ph1">`static`</ph> keyword specifies that the function is shared by all instances of the class.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A static member function cannot access an instance member because the function does not have an implicit <ph id="ph1">`this`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To access an instance member, declare the function with a parameter that is an instance pointer or reference.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You cannot declare the members of a union as static.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>However, a globally declared anonymous union must be explicitly declared <ph id="ph1">`static`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following example shows how a variable declared <ph id="ph1">`static`</ph> in a function retains its state between calls to that function.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following example shows the use of <ph id="ph1">`static`</ph> in a class.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following example shows a local variable declared <ph id="ph1">`static`</ph> in a member function.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The static variable is available to the whole program; all instances of the type share the same copy of the static variable.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Starting in C++11, a static local variable initialization is guaranteed to be thread-safe.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This feature is sometimes called <bpt id="p1">*</bpt>magic statics<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>However, in a multithreaded application all subsequent assignments must be synchronized.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The thread-safe statics feature can be disabled by using the /Zc:threadSafeInit- flag to avoid taking a dependency on the CRT.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>extern</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Objects and variables declared as <ph id="ph1">`extern`</ph> declare an object that is defined in another translation unit or in an enclosing scope as having external linkage.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Declaration of <bpt id="p1">**</bpt>const<ept id="p1">**</ept> variables with the <ph id="ph1">`extern`</ph> storage class forces the variable to have external linkage.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>An initialization of an <bpt id="p1">**</bpt>extern const<ept id="p1">**</ept> variable is allowed in the defining translation unit.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Initializations in translation units other than the defining translation unit produce undefined results.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Using extern to Specify Linkage<ept id="p1">](../cpp/using-extern-to-specify-linkage.md)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following code shows two <ph id="ph1">`extern`</ph> declarations, <ph id="ph2">`DefinedElsewhere`</ph> (which refers to a name defined in a different translation unit) and <ph id="ph3">`DefinedHere`</ph> (which refers to a name defined in an enclosing scope):</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>thread_local (C++11)</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A variable declared with the <ph id="ph1">`thread_local`</ph> specifier is accessible only on the thread on which it is created.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The variable is created when the thread is created, and destroyed when the thread is destroyed.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Each thread has its own copy of the variable.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>On Windows, <ph id="ph1">`thread_local`</ph> is functionally equivalent to the Microsoft-specific <bpt id="p1">[</bpt>__declspec( thread )<ept id="p1">](../cpp/thread.md)</ept> attribute.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The thread_local specifier may be combined with <ph id="ph1">`static`</ph> or <ph id="ph2">`extern`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You can apply <ph id="ph1">`thread_local`</ph> only to data declarations and definitions; <bpt id="p1">**</bpt>thread_local<ept id="p1">**</ept> cannot be used on function declarations or definitions.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The use of <ph id="ph1">`thread_local`</ph> may interfere with <bpt id="p1">[</bpt>delay loading<ept id="p1">](../build/reference/linker-support-for-delay-loaded-dlls.md)</ept> of DLL imports<bpt id="p2">**</bpt>.<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>On XP systems, <ph id="ph1">`thread_local`</ph> may not function correctly if a DLL uses <ph id="ph2">`thread_local`</ph> data and it is loaded dynamically via LoadLibrary.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You can specify <ph id="ph1">`thread_local`</ph> only on data items with static storage duration.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This includes global data objects (both <bpt id="p1">**</bpt>static<ept id="p1">**</ept> and <ph id="ph1">`extern`</ph>), local static objects, and static data members of classes.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You cannot declare automatic data objects with <bpt id="p1">**</bpt>thread_local<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You must specify <ph id="ph1">`thread_local`</ph> for both the declaration and the definition of a thread local object, whether the declaration and definition occur in the same file or separate files.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>On Windows, <ph id="ph1">`thread_local`</ph> is functionally equivalent to  <bpt id="p1">[</bpt>__declspec(thread)<ept id="p1">](../cpp/thread.md)</ept> except that __declspec(thread) can be applied to a type definition and is valid in C code.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Whenever possible, use <ph id="ph1">`thread_local`</ph> because it is part of the C++ standard and is therefore more portable.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Thread Local Storage (TLS)<ept id="p1">](../parallel/thread-local-storage-tls.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>register</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In C++11, the <bpt id="p1">**</bpt>register<ept id="p1">**</ept> keyword is deprecated.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>It specifies that the variable is to be stored in a machine register, if possible.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Only function arguments and local variables can be declared with the register storage class.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Like automatic variables, register variables persist only until the end of the block in which they are declared.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The compiler does not honor user requests for register variables; instead, it makes its own register choices when global optimizations are on.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>However, all other semantics associated with the <bpt id="p1">[</bpt>register<ept id="p1">](http://msdn.microsoft.com/en-us/5b66905a-2f7f-4918-bb55-5e66d4bc50f9)</ept> keyword are honored by the compiler.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If the address-of operator (<bpt id="p1">**</bpt><ph id="ph1">&amp;</ph><ept id="p1">**</ept>) is used on an object that is declared with register, the compiler must put the object in memory rather than a register.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Example: automatic vs. static initialization</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A local automatic object or variable is initialized every time the flow of control reaches its definition.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A local static object or variable is initialized the first time the flow of control reaches its definition.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Consider the following example, which defines a class that logs initialization and destruction of objects and then defines three objects, <ph id="ph1">`I1`</ph>, <ph id="ph2">`I2`</ph>, and <ph id="ph3">`I3`</ph>:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The preceding code demonstrates how and when the objects <ph id="ph1">`I1`</ph>, <ph id="ph2">`I2`</ph>, and <ph id="ph3">`I3`</ph> are initialized and when they are destroyed.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>There are several points to note about the program.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>First, <ph id="ph1">`I1`</ph> and <ph id="ph2">`I2`</ph> are automatically destroyed when the flow of control exits the block in which they are defined.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Second, in C++, it is not necessary to declare objects or variables at the beginning of a block.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Furthermore, these objects are initialized only when the flow of control reaches their definitions.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>(<ph id="ph1">`I2`</ph> and <ph id="ph2">`I3`</ph> are examples of such definitions.) The output shows exactly when they are initialized.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Finally, static local variables such as <ph id="ph1">`I3`</ph> retain their values for the duration of the program, but are destroyed as the program terminates.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Declarations and Definitions</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>