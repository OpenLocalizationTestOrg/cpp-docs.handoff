{"nodes":[{"pos":[12,78],"content":"Pimpl For Compile-Time Encapsulation (Modern C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Pimpl For Compile-Time Encapsulation (Modern C++) | Microsoft Docs","pos":[0,66]}]},{"content":"Pimpl For Compile-Time Encapsulation (Modern C++)","pos":[559,608]},{"content":"The <bpt id=\"p1\">*</bpt>pimpl idiom<ept id=\"p1\">*</ept> is a modern C++ technique to hide implementation, to minimize coupling, and to separate interfaces.","pos":[609,726],"source":"The *pimpl idiom* is a modern C++ technique to hide implementation, to minimize coupling, and to separate interfaces."},{"content":"Pimpl is short for \"pointer to implementation.\"","pos":[727,774]},{"content":"You may already be familiar with the concept but know it by other names like Cheshire Cat or Compiler Firewall idiom.","pos":[775,892]},{"content":"Why use pimpl?","pos":[901,915]},{"content":"Here's how the pimpl idiom can improve the software development lifecycle:","pos":[919,993]},{"content":"Minimization of compilation dependencies.","pos":[1003,1044]},{"content":"Separation of interface and implementation.","pos":[1054,1097]},{"content":"Portability.","pos":[1107,1119]},{"content":"Pimpl header","pos":[1128,1140]},{"content":"The pimpl idiom avoids rebuild cascades and brittle object layouts.","pos":[1341,1408]},{"content":"It's well suited for (transitively) popular types.","pos":[1409,1459]},{"content":"Pimpl implementation","pos":[1468,1488]},{"pos":[1492,1533],"content":"Define the <ph id=\"ph1\">`impl`</ph> class in the .cpp file.","source":"Define the `impl` class in the .cpp file."},{"content":"Best practices","pos":[1834,1848]},{"content":"Consider whether to add support for non-throwing swap specialization.","pos":[1852,1921]},{"content":"See Also","pos":[1930,1938]},{"content":"Welcome Back to C++","pos":[1943,1962]},{"content":"C++ Language Reference","pos":[2011,2033]},{"content":"C++ Standard Library","pos":[2074,2094]}],"content":"---\ntitle: \"Pimpl For Compile-Time Encapsulation (Modern C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: c3e8a90a-b328-4990-82bb-e1b147f76e07\ncaps.latest.revision: 11\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Pimpl For Compile-Time Encapsulation (Modern C++)\nThe *pimpl idiom* is a modern C++ technique to hide implementation, to minimize coupling, and to separate interfaces. Pimpl is short for \"pointer to implementation.\" You may already be familiar with the concept but know it by other names like Cheshire Cat or Compiler Firewall idiom.  \n  \n## Why use pimpl?  \n Here's how the pimpl idiom can improve the software development lifecycle:  \n  \n-   Minimization of compilation dependencies.  \n  \n-   Separation of interface and implementation.  \n  \n-   Portability.  \n  \n## Pimpl header  \n  \n```cpp  \n  \n// my_class.h  \nclass my_class {  \n   //  ... all public and protected stuff goes here ...  \nprivate:  \n   class impl; unique_ptr<impl> pimpl; // opaque type here  \n};  \n  \n```  \n  \n The pimpl idiom avoids rebuild cascades and brittle object layouts. It's well suited for (transitively) popular types.  \n  \n## Pimpl implementation  \n Define the `impl` class in the .cpp file.  \n  \n```cpp  \n  \n// my_class.cpp  \nclass my_class::impl {  // defined privately here  \n  // ... all private data and functions: all of these  \n  //     can now change without recompiling callers ...  \n};  \nmy_class::my_class(): pimpl( new impl )  \n{  \n  // ... set impl values ...   \n}  \n```  \n  \n## Best practices  \n Consider whether to add support for non-throwing swap specialization.  \n  \n## See Also  \n [Welcome Back to C++](../cpp/welcome-back-to-cpp-modern-cpp.md)   \n [C++ Language Reference](../cpp/cpp-language-reference.md)   \n [C++ Standard Library](../standard-library/cpp-standard-library-reference.md)"}