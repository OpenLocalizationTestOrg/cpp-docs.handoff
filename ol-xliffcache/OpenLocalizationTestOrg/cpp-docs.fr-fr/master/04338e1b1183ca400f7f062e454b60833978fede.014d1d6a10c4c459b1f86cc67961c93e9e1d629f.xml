{"nodes":[{"pos":[12,76],"content":"lrint, lrintf, lrintl, llrint, llrintf, llrintl | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"lrint, lrintf, lrintl, llrint, llrintf, llrintl | Microsoft Docs","pos":[0,64]}]},{"content":"lrint, lrintf, lrintl, llrint, llrintf, llrintl","pos":[1303,1350]},{"content":"Rounds the specified floating-point value to the nearest integral value, by using the current rounding mode and direction.","pos":[1351,1473]},{"content":"Syntax","pos":[1482,1488]},{"content":"Parameters","pos":[2008,2018]},{"content":"[in]","pos":[2022,2026]},{"content":"the value to round.","pos":[2034,2053]},{"content":"Return Value","pos":[2062,2074]},{"pos":[2078,2135],"content":"If successful, returns the rounded integral value of <ph id=\"ph1\">`x`</ph>.","source":"If successful, returns the rounded integral value of `x`."},{"content":"Issue","pos":[2142,2147]},{"content":"Return","pos":[2148,2154]},{"content":"is outside the range of the return type","pos":[2192,2231]},{"content":"= ±∞","pos":[2248,2252]},{"content":"= NaN","pos":[2269,2274]},{"content":"Raises FE_INVALID and returns zero (0).","pos":[2275,2314]},{"content":"Remarks","pos":[2324,2331]},{"content":"Because C++ allows overloading, you can call overloads of <ph id=\"ph1\">`lrint`</ph> and <ph id=\"ph2\">`llrint`</ph> that take float and long double types.","pos":[2335,2452],"source":"Because C++ allows overloading, you can call overloads of `lrint` and `llrint` that take float and long double types."},{"content":"In a C program, <ph id=\"ph1\">`lrint`</ph> and <ph id=\"ph2\">`llrint`</ph> always take a double.","pos":[2453,2511],"source":" In a C program, `lrint` and `llrint` always take a double."},{"pos":[2518,2629],"content":"If <ph id=\"ph1\">`x`</ph> does not represent the floating-point equivalent of an integral value, these functions raise FE_INEXACT.","source":"If `x` does not represent the floating-point equivalent of an integral value, these functions raise FE_INEXACT."},{"content":"<bpt id=\"p1\">**</bpt>Microsoft specific<ept id=\"p1\">**</ept>: When the result is outside the range of the return type, or when the parameter is a NaN or infinity, the return value is implementation defined.","pos":[2636,2804],"source":"**Microsoft specific**: When the result is outside the range of the return type, or when the parameter is a NaN or infinity, the return value is implementation defined."},{"content":"The Microsoft compiler returns a zero (0) value.","pos":[2805,2853]},{"content":"Requirements","pos":[2862,2874]},{"content":"Function","pos":[2881,2889]},{"content":"C header","pos":[2890,2898]},{"content":"C++ header","pos":[2899,2909]},{"pos":[2974,3031],"content":",                <ph id=\"ph1\">`lrintf`</ph>, <ph id=\"ph2\">`lrintl`</ph>, <ph id=\"ph3\">`llrint`</ph>, <ph id=\"ph4\">`llrintf`</ph>,","source":",                `lrintf`, `lrintl`, `llrint`, `llrintf`, "},{"content":"math.h&gt;","pos":[3044,3051],"source":"math.h>"},{"content":"cmath&gt;","pos":[3054,3060],"source":"cmath>"},{"pos":[3068,3172],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"See Also","pos":[3181,3189]},{"content":"Alphabetical Function Reference","pos":[3194,3225]}],"content":"---\ntitle: \"lrint, lrintf, lrintl, llrint, llrintf, llrintl | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"cpp\"\n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"lrint\"\n  - \"lrintl\"\n  - \"lrintf\"\n  - \"llrint\"\n  - \"llrintf\"\n  - \"llrintl\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-math-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"lrint\"\n  - \"lrintf\"\n  - \"lrintl\"\n  - \"llrint\"\n  - \"llrintf\"\n  - \"llrintl\"\n  - \"math/lrint\"\n  - \"math/lrintf\"\n  - \"math/lrintl\"\n  - \"math/llrint\"\n  - \"math/llrintf\"\n  - \"math/llrintl\"\ndev_langs: \n  - \"C\"\n  - \"C++\"\nhelpviewer_keywords: \n  - \"lrint function\"\n  - \"lrintf function\"\n  - \"lrintl function\"\n  - \"llrint function\"\n  - \"llrintf function\"\n  - \"llrintl function\"\nms.assetid: 28ccd5b3-5e6f-434f-997d-a21d51b8ce7f\ncaps.latest.revision: 13\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# lrint, lrintf, lrintl, llrint, llrintf, llrintl\nRounds the specified floating-point value to the nearest integral value, by using the current rounding mode and direction.  \n  \n## Syntax  \n  \n```  \nlong int lrint(  \n   double x  \n);  \n  \nlong int lrint(  \n   float x  \n); //C++ only  \n  \nlong int lrint(  \n   long double x  \n); //C++ only  \n  \nlong int lrintf(  \n   float x  \n);  \n  \nlong int lrintl(  \n   long double x  \n);  \n  \nlong long int llrint(  \n   double x  \n);  \n  \nlong long int llrint(  \n   float x  \n); //C++ only  \n  \nlong long int llrint(  \n   long double x  \n); //C++ only  \n  \nlong long int llrintf(  \n   float x  \n);  \n  \nlong long int llrintl(  \n   long double x  \n);  \n  \n```  \n  \n#### Parameters  \n [in] `x`  \n the value to round.  \n  \n## Return Value  \n If successful, returns the rounded integral value of `x`.  \n  \n|Issue|Return|  \n|-----------|------------|  \n|`x` is outside the range of the return type<br /><br /> `x` = ±∞<br /><br /> `x` = NaN|Raises FE_INVALID and returns zero (0).|  \n  \n## Remarks  \n Because C++ allows overloading, you can call overloads of `lrint` and `llrint` that take float and long double types. In a C program, `lrint` and `llrint` always take a double.  \n  \n If `x` does not represent the floating-point equivalent of an integral value, these functions raise FE_INEXACT.  \n  \n **Microsoft specific**: When the result is outside the range of the return type, or when the parameter is a NaN or infinity, the return value is implementation defined. The Microsoft compiler returns a zero (0) value.  \n  \n## Requirements  \n  \n|Function|C header|C++ header|  \n|--------------|--------------|------------------|  \n|`lrint`,                `lrintf`, `lrintl`, `llrint`, `llrintf`, `llrintl`|\\<math.h>|\\<cmath>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## See Also  \n [Alphabetical Function Reference](../../c-runtime-library/reference/crt-alphabetical-function-reference.md)"}