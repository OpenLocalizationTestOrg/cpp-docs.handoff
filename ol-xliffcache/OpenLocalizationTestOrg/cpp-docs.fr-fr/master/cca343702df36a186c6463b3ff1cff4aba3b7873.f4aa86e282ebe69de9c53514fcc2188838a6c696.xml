{"nodes":[{"pos":[12,65],"content":"hash_multiset::lower_bound (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"hash_multiset::lower_bound (STL-CLR) | Microsoft Docs","pos":[0,53]}]},{"content":"hash_multiset::lower_bound (STL/CLR)","pos":[660,696]},{"content":"Finds beginning of range that matches a specified key.","pos":[697,751]},{"content":"Syntax","pos":[760,766]},{"content":"Parameters","pos":[830,840]},{"content":"key","pos":[844,847]},{"content":"Key value to search for.","pos":[851,875]},{"content":"Remarks","pos":[884,891]},{"content":"The member function determines the first element <ph id=\"ph1\">`X`</ph> in the controlled sequence that hashes to the same bucket as <ph id=\"ph2\">`key`</ph> and has equivalent ordering to <ph id=\"ph3\">`key`</ph>.","pos":[895,1052],"source":"The member function determines the first element `X` in the controlled sequence that hashes to the same bucket as `key` and has equivalent ordering to `key`."},{"content":"If no such element exists, it returns <bpt id=\"p1\">[</bpt>hash_multiset::end (STL/CLR)<ept id=\"p1\">](../dotnet/hash-multiset-end-stl-clr.md)</ept><ph id=\"ph1\">`()`</ph>; otherwise it returns an iterator that designates <ph id=\"ph2\">`X`</ph>.","pos":[1053,1220],"source":" If no such element exists, it returns [hash_multiset::end (STL/CLR)](../dotnet/hash-multiset-end-stl-clr.md)`()`; otherwise it returns an iterator that designates `X`."},{"content":"You use it to locate the beginning of a sequence of elements currently in the controlled sequence that match a specified key.","pos":[1221,1346]},{"content":"Example","pos":[1355,1362]},{"content":"Requirements","pos":[2292,2304]},{"pos":[2308,2338],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/hash_set&gt;","source":"**Header:** \\<cliext/hash_set>"},{"pos":[2345,2366],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2375,2383]},{"content":"hash_multiset (STL/CLR)","pos":[2388,2411]},{"content":"hash_multiset::count (STL/CLR)","pos":[2454,2484]},{"content":"hash_multiset::equal_range (STL/CLR)","pos":[2533,2569]},{"content":"hash_multiset::find (STL/CLR)","pos":[2624,2653]},{"content":"hash_multiset::upper_bound (STL/CLR)","pos":[2701,2737]}],"content":"---\ntitle: \"hash_multiset::lower_bound (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::hash_multiset::lower_bound\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"lower_bound member [STL/CLR]\"\nms.assetid: 891898fa-c9e8-4132-a71d-36e5141793f1\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# hash_multiset::lower_bound (STL/CLR)\nFinds beginning of range that matches a specified key.  \n  \n## Syntax  \n  \n```  \niterator lower_bound(key_type key);  \n```  \n  \n#### Parameters  \n key  \n Key value to search for.  \n  \n## Remarks  \n The member function determines the first element `X` in the controlled sequence that hashes to the same bucket as `key` and has equivalent ordering to `key`. If no such element exists, it returns [hash_multiset::end (STL/CLR)](../dotnet/hash-multiset-end-stl-clr.md)`()`; otherwise it returns an iterator that designates `X`. You use it to locate the beginning of a sequence of elements currently in the controlled sequence that match a specified key.  \n  \n## Example  \n  \n```  \n// cliext_hash_multiset_lower_bound.cpp   \n// compile with: /clr   \n#include <cliext/hash_set>   \n  \ntypedef cliext::hash_multiset<wchar_t> Myhash_multiset;   \nint main()   \n    {   \n    Myhash_multiset c1;   \n    c1.insert(L'a');   \n    c1.insert(L'b');   \n    c1.insert(L'c');   \n  \n// display initial contents \" a b c\"   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n    System::Console::WriteLine(\"lower_bound(L'x')==end() = {0}\",   \n        c1.lower_bound(L'x') == c1.end());   \n  \n    System::Console::WriteLine(\"*lower_bound(L'a') = {0}\",   \n        *c1.lower_bound(L'a'));   \n    System::Console::WriteLine(\"*lower_bound(L'b') = {0}\",   \n        *c1.lower_bound(L'b'));   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n a b c  \nlower_bound(L'x')==end() = True  \n*lower_bound(L'a') = a  \n*lower_bound(L'b') = b  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/hash_set>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [hash_multiset (STL/CLR)](../dotnet/hash-multiset-stl-clr.md)   \n [hash_multiset::count (STL/CLR)](../dotnet/hash-multiset-count-stl-clr.md)   \n [hash_multiset::equal_range (STL/CLR)](../dotnet/hash-multiset-equal-range-stl-clr.md)   \n [hash_multiset::find (STL/CLR)](../dotnet/hash-multiset-find-stl-clr.md)   \n [hash_multiset::upper_bound (STL/CLR)](../dotnet/hash-multiset-upper-bound-stl-clr.md)"}