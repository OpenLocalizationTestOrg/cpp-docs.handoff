{"nodes":[{"pos":[12,39],"content":"fpos Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"fpos Class | Microsoft Docs","pos":[0,27]}]},{"content":"fpos Class","pos":[673,683]},{"content":"The template class describes an object that can store all the information needed to restore an arbitrary file-position indicator within any stream.","pos":[684,831]},{"content":"An object of class fpos<ph id=\"ph1\">\\&lt;</ph> <bpt id=\"p1\">**</bpt>St<ept id=\"p1\">**</ept>&gt; effectively stores at least two member objects:","pos":[832,913],"source":" An object of class fpos\\< **St**> effectively stores at least two member objects:"},{"pos":[923,1005],"content":"A byte offset, of type <bpt id=\"p1\">[</bpt>streamoff<ept id=\"p1\">](../standard-library/ios-typedefs.md#streamoff)</ept>.","source":"A byte offset, of type [streamoff](../standard-library/ios-typedefs.md#streamoff)."},{"pos":[1015,1118],"content":"A conversion state, for use by an object of class basic_filebuf, of type <bpt id=\"p1\">**</bpt>St<ept id=\"p1\">**</ept>, typically <ph id=\"ph1\">`mbstate_t`</ph>.","source":"A conversion state, for use by an object of class basic_filebuf, of type **St**, typically `mbstate_t`."},{"content":"It can also store an arbitrary file position, for use by an object of class <bpt id=\"p1\">[</bpt>basic_filebuf<ept id=\"p1\">](../standard-library/basic-filebuf-class.md)</ept>, of type <ph id=\"ph1\">`fpos_t`</ph>.","pos":[1125,1279],"source":"It can also store an arbitrary file position, for use by an object of class [basic_filebuf](../standard-library/basic-filebuf-class.md), of type `fpos_t`."},{"content":"For an environment with limited file size, however, <ph id=\"ph1\">`streamoff`</ph> and <ph id=\"ph2\">`fpos_t`</ph> may sometimes be used interchangeably.","pos":[1280,1395],"source":" For an environment with limited file size, however, `streamoff` and `fpos_t` may sometimes be used interchangeably."},{"content":"For an environment with no streams that have a state-dependent encoding, <ph id=\"ph1\">`mbstate_t`</ph> may actually be unused.","pos":[1396,1504],"source":" For an environment with no streams that have a state-dependent encoding, `mbstate_t` may actually be unused."},{"content":"Therefore, the number of member objects stored may vary.","pos":[1505,1561]},{"content":"Syntax","pos":[1570,1576]},{"content":"Parameters","pos":[1644,1654]},{"content":"Statetype","pos":[1659,1668]},{"content":"State information.","pos":[1673,1691]},{"content":"Constructors","pos":[1701,1713]},{"content":"fpos","pos":[1735,1739]},{"content":"Create an object that contains information about a position (offset) in a stream.","pos":[1754,1835]},{"content":"Member Functions","pos":[1846,1862]},{"content":"seekpos","pos":[1884,1891]},{"content":"Used internally by the Standard C++ Library only.","pos":[1909,1958]},{"content":"Do not call this method from your code.","pos":[1959,1998]},{"content":"state","pos":[2004,2009]},{"content":"Sets or returns the conversion state.","pos":[2025,2062]},{"content":"Operators","pos":[2073,2082]},{"content":"operator!=","pos":[2104,2114]},{"content":"Tests file-position indicators for inequality.","pos":[2137,2183]},{"content":"operator+","pos":[2189,2198]},{"content":"Increments a file-position indicator.","pos":[2221,2258]},{"content":"operator+=","pos":[2264,2274]},{"content":"Increments a file-position indicator.","pos":[2300,2337]},{"content":"operator-","pos":[2343,2352]},{"content":"Decrements a file-position indicator.","pos":[2372,2409]},{"content":"operator-=","pos":[2415,2425]},{"content":"Decrements a file-position indicator.","pos":[2448,2485]},{"content":"operator==","pos":[2491,2501]},{"content":"Tests file-position indicators for equality.","pos":[2526,2570]},{"content":"operator streamoff","pos":[2576,2594]},{"pos":[2623,2681],"content":"Casts object of type <ph id=\"ph1\">`fpos`</ph> to object of type <ph id=\"ph2\">`streamoff`</ph>.","source":"Casts object of type `fpos` to object of type `streamoff`."},{"content":"Requirements","pos":[2691,2703]},{"pos":[2707,2725],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>ios&gt;","source":"**Header:** \\<ios>"},{"pos":[2732,2750],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[2787,2797],"content":"fpos::fpos"},{"content":"Create an object that contains information about a position (offset) in a stream.","pos":[2801,2882]},{"content":"Parameters","pos":[2974,2984]},{"content":"The offset into the stream.","pos":[2998,3025]},{"content":"The starting state of the <ph id=\"ph1\">`fpos`</ph> object.","pos":[3044,3084],"source":" The starting state of the `fpos` object."},{"content":"_Filepos","pos":[3092,3100]},{"content":"The offset into the stream.","pos":[3105,3132]},{"content":"Remarks","pos":[3142,3149]},{"content":"The first constructor stores the offset <ph id=\"ph1\">`_Off`</ph>, relative to the beginning of file and in the initial conversion state (if that matters).","pos":[3153,3289],"source":"The first constructor stores the offset `_Off`, relative to the beginning of file and in the initial conversion state (if that matters)."},{"content":"If <ph id=\"ph1\">`_Off`</ph> is -1, the resulting object represents an invalid stream position.","pos":[3290,3366],"source":" If `_Off` is -1, the resulting object represents an invalid stream position."},{"pos":[3373,3441],"content":"The second constructor stores a zero offset and the object <ph id=\"ph1\">`_State`</ph>.","source":"The second constructor stores a zero offset and the object `_State`."},{"pos":[3486,3502],"content":"fpos::operator!="},{"content":"Tests file-position indicators for inequality.","pos":[3506,3552]},{"content":"Parameters","pos":[3630,3640]},{"content":"The file-position indicator against which to compare.","pos":[3656,3709]},{"content":"Return Value","pos":[3719,3731]},{"pos":[3735,3811],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the file-position indicators are not equal, otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the file-position indicators are not equal, otherwise **false**."},{"content":"Remarks","pos":[3821,3828]},{"pos":[3832,3891],"content":"The member function returns <bpt id=\"p1\">**</bpt>!<ept id=\"p1\">**</ept>( <bpt id=\"p2\">**</bpt><ph id=\"ph1\">\\*</ph>this ==<ept id=\"p2\">**</ept> <ph id=\"ph2\">` right`</ph>).","source":"The member function returns **!**( **\\*this ==** ` right`)."},{"content":"Example","pos":[3901,3908]},{"pos":[4985,5000],"content":"fpos::operator+"},{"content":"Increments a file-position indicator.","pos":[5004,5041]},{"content":"Parameters","pos":[5115,5125]},{"content":"The offset by which you want to increment the file-position indicator.","pos":[5139,5209]},{"content":"Return Value","pos":[5219,5231]},{"content":"The position in the file.","pos":[5235,5260]},{"content":"Remarks","pos":[5270,5277]},{"pos":[5281,5336],"content":"The member function returns <bpt id=\"p1\">**</bpt>fpos(<ph id=\"ph1\">\\*</ph>this) +=<ept id=\"p1\">**</ept> <ph id=\"ph2\">`_Off`</ph>.","source":"The member function returns **fpos(\\*this) +=** `_Off`."},{"content":"Example","pos":[5346,5353]},{"pos":[5358,5430],"content":"See <bpt id=\"p1\">[</bpt>operator!=<ept id=\"p1\">](#fpos__operator_neq)</ept> for a sample of using <ph id=\"ph1\">`operator+`</ph>.","source":"See [operator!=](#fpos__operator_neq) for a sample of using `operator+`."},{"pos":[5478,5494],"content":"fpos::operator+="},{"content":"Increments a file-position indicator.","pos":[5498,5535]},{"content":"Parameters","pos":[5605,5615]},{"content":"The offset by which you want to increment the file-position indicator.","pos":[5629,5699]},{"content":"Return Value","pos":[5709,5721]},{"content":"The position in the file.","pos":[5725,5750]},{"content":"Remarks","pos":[5760,5767]},{"content":"The member function adds <ph id=\"ph1\">`_Off`</ph> to the stored offset member object and then returns <bpt id=\"p1\">**</bpt><ph id=\"ph2\">\\*</ph>this<ept id=\"p1\">**</ept>.","pos":[5771,5866],"source":"The member function adds `_Off` to the stored offset member object and then returns **\\*this**."},{"content":"For positioning within a file, the result is generally valid only for binary streams that do not have a state-dependent encoding.","pos":[5867,5996]},{"content":"Example","pos":[6006,6013]},{"pos":[6018,6091],"content":"See <bpt id=\"p1\">[</bpt>operator!=<ept id=\"p1\">](#fpos__operator_neq)</ept> for a sample of using <ph id=\"ph1\">`operator+=`</ph>.","source":"See [operator!=](#fpos__operator_neq) for a sample of using `operator+=`."},{"pos":[6133,6148],"content":"fpos::operator-"},{"content":"Decrements a file-position indicator.","pos":[6152,6189]},{"content":"Parameters","pos":[6323,6333]},{"content":"File position.","pos":[6349,6363]},{"content":"Stream offset.","pos":[6380,6394]},{"content":"Return Value","pos":[6404,6416]},{"content":"The first member function returns <bpt id=\"p1\">**</bpt>(streamoff)<ph id=\"ph1\">\\*</ph>this - (streamoff)<ept id=\"p1\">**</ept><ph id=\"ph2\">` right`</ph>.","pos":[6420,6498],"source":"The first member function returns **(streamoff)\\*this - (streamoff)**` right`."},{"content":"The second member function returns <bpt id=\"p1\">**</bpt>fpos(<ph id=\"ph1\">\\*</ph>this) -=<ept id=\"p1\">**</ept> <ph id=\"ph2\">`_Off`</ph>.","pos":[6499,6561],"source":" The second member function returns **fpos(\\*this) -=** `_Off`."},{"content":"Example","pos":[6571,6578]},{"pos":[6583,6655],"content":"See <bpt id=\"p1\">[</bpt>operator!=<ept id=\"p1\">](#fpos__operator_neq)</ept> for a sample of using <ph id=\"ph1\">`operator-`</ph>.","source":"See [operator!=](#fpos__operator_neq) for a sample of using `operator-`."},{"pos":[6700,6716],"content":"fpos::operator-="},{"content":"Decrements a file-position indicator.","pos":[6720,6757]},{"content":"Parameters","pos":[6827,6837]},{"content":"Stream offset.","pos":[6851,6865]},{"content":"Return Value","pos":[6875,6887]},{"pos":[6891,6946],"content":"The member function returns <bpt id=\"p1\">**</bpt>fpos(<ph id=\"ph1\">\\*</ph>this) -=<ept id=\"p1\">**</ept> <ph id=\"ph2\">`_Off`</ph>.","source":"The member function returns **fpos(\\*this) -=** `_Off`."},{"content":"Remarks","pos":[6956,6963]},{"content":"For positioning within a file, the result is generally valid only for binary streams that do not have a state-dependent encoding.","pos":[6967,7096]},{"content":"Example","pos":[7106,7113]},{"pos":[7118,7191],"content":"See <bpt id=\"p1\">[</bpt>operator!=<ept id=\"p1\">](#fpos__operator_neq)</ept> for a sample of using <ph id=\"ph1\">`operator-=`</ph>.","source":"See [operator!=](#fpos__operator_neq) for a sample of using `operator-=`."},{"pos":[7238,7254],"content":"fpos::operator=="},{"content":"Tests file-position indicators for equality.","pos":[7258,7302]},{"content":"Parameters","pos":[7380,7390]},{"content":"The file-position indicator against which to compare.","pos":[7406,7459]},{"content":"Return Value","pos":[7469,7481]},{"pos":[7485,7557],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the file-position indicators are equal; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the file-position indicators are equal; otherwise **false**."},{"content":"Remarks","pos":[7567,7574]},{"pos":[7578,7651],"content":"The member function returns <bpt id=\"p1\">**</bpt>(streamoff)<ph id=\"ph1\">\\*</ph>this == (streamoff)<ept id=\"p1\">**</ept><ph id=\"ph2\">` right`</ph>.","source":"The member function returns **(streamoff)\\*this == (streamoff)**` right`."},{"content":"Example","pos":[7661,7668]},{"pos":[7673,7746],"content":"See <bpt id=\"p1\">[</bpt>operator!=<ept id=\"p1\">](#fpos__operator_neq)</ept> for a sample of using <ph id=\"ph1\">`operator+=`</ph>.","source":"See [operator!=](#fpos__operator_neq) for a sample of using `operator+=`."},{"pos":[7797,7821],"content":"fpos::operator streamoff"},{"pos":[7825,7882],"content":"Cast object of type <ph id=\"ph1\">`fpos`</ph> to object of type <ph id=\"ph2\">`streamoff`</ph>.","source":"Cast object of type `fpos` to object of type `streamoff`."},{"content":"```  operator streamoff() const;","pos":[7888,7920]},{"pos":[8536,8549],"content":"fpos::seekpos"},{"content":"This method is used internally by the Standard C++ Library only.","pos":[8553,8617]},{"content":"Do not call this method from your code.","pos":[8618,8657]},{"pos":[8734,8745],"content":"fpos::state"},{"content":"Sets or returns the conversion state.","pos":[8749,8786]},{"content":"Parameters","pos":[8867,8877]},{"content":"The new conversion state.","pos":[8893,8918]},{"content":"Return Value","pos":[8928,8940]},{"content":"The conversion state.","pos":[8944,8965]},{"content":"Remarks","pos":[8975,8982]},{"content":"The first member function returns the value stored in the <bpt id=\"p1\">**</bpt>St<ept id=\"p1\">**</ept> member object.","pos":[8986,9065],"source":"The first member function returns the value stored in the **St** member object."},{"content":"The second member function stores <ph id=\"ph1\">`_State`</ph> in the <bpt id=\"p1\">**</bpt>St<ept id=\"p1\">**</ept> member object.","pos":[9066,9137],"source":" The second member function stores `_State` in the **St** member object."},{"content":"Example","pos":[9147,9154]},{"content":"See Also","pos":[9598,9606]},{"content":"Thread Safety in the C++ Standard Library","pos":[9611,9652]},{"content":"iostream Programming","pos":[9725,9745]},{"content":"iostreams Conventions","pos":[9797,9818]}],"content":"---\ntitle: \"fpos Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.fpos\"\n  - \"std::fpos\"\n  - \"iosfwd/std::fpos\"\n  - \"fpos\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"fpos class, about fpos class\"\n  - \"fpos class\"\nms.assetid: ffd0827c-fa34-47f4-b10e-5cb707fcde47\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# fpos Class\nThe template class describes an object that can store all the information needed to restore an arbitrary file-position indicator within any stream. An object of class fpos\\< **St**> effectively stores at least two member objects:  \n  \n-   A byte offset, of type [streamoff](../standard-library/ios-typedefs.md#streamoff).  \n  \n-   A conversion state, for use by an object of class basic_filebuf, of type **St**, typically `mbstate_t`.  \n  \n It can also store an arbitrary file position, for use by an object of class [basic_filebuf](../standard-library/basic-filebuf-class.md), of type `fpos_t`. For an environment with limited file size, however, `streamoff` and `fpos_t` may sometimes be used interchangeably. For an environment with no streams that have a state-dependent encoding, `mbstate_t` may actually be unused. Therefore, the number of member objects stored may vary.  \n  \n## Syntax  \n  \n```  \ntemplate <class Statetype>  \nclass fpos  \n```  \n  \n#### Parameters  \n *Statetype*  \n State information.  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[fpos](#fpos__fpos)|Create an object that contains information about a position (offset) in a stream.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[seekpos](#fpos__seekpos)|Used internally by the Standard C++ Library only. Do not call this method from your code.|  \n|[state](#fpos__state)|Sets or returns the conversion state.|  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[operator!=](#fpos__operator_neq)|Tests file-position indicators for inequality.|  \n|[operator+](#fpos__operator_add)|Increments a file-position indicator.|  \n|[operator+=](#fpos__operator_add_eq)|Increments a file-position indicator.|  \n|[operator-](#fpos__operator-)|Decrements a file-position indicator.|  \n|[operator-=](#fpos__operator-_eq)|Decrements a file-position indicator.|  \n|[operator==](#fpos__operator_eq_eq)|Tests file-position indicators for equality.|  \n|[operator streamoff](#fpos__operator_streamoff)|Casts object of type `fpos` to object of type `streamoff`.|  \n  \n## Requirements  \n **Header:** \\<ios>  \n  \n **Namespace:** std  \n  \n##  <a name=\"fpos__fpos\"></a>  fpos::fpos  \n Create an object that contains information about a position (offset) in a stream.  \n  \n```  \nfpos(streamoff _Off =0);\n\nfpos(Statetype _State, fpos_t _Filepos);\n```  \n  \n### Parameters  \n `_Off`  \n The offset into the stream.  \n  \n `_State`  \n The starting state of the `fpos` object.  \n  \n *_Filepos*  \n The offset into the stream.  \n  \n### Remarks  \n The first constructor stores the offset `_Off`, relative to the beginning of file and in the initial conversion state (if that matters). If `_Off` is -1, the resulting object represents an invalid stream position.  \n  \n The second constructor stores a zero offset and the object `_State`.  \n  \n##  <a name=\"fpos__operator_neq\"></a>  fpos::operator!=  \n Tests file-position indicators for inequality.  \n  \n```  \nbool operator!=(const fpos<Statetype>& right) const;\n```  \n  \n### Parameters  \n ` right`  \n The file-position indicator against which to compare.  \n  \n### Return Value  \n **true** if the file-position indicators are not equal, otherwise **false**.  \n  \n### Remarks  \n The member function returns **!**( **\\*this ==** ` right`).  \n  \n### Example  \n  \n```cpp  \n// fpos_op_neq.cpp  \n// compile with: /EHsc  \n#include <fstream>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   fpos<int> pos1, pos2;  \n   ifstream file;  \n   char c;  \n  \n   // Compare two fpos object  \n   if ( pos1 != pos2 )  \n      cout << \"File position pos1 and pos2 are not equal\" << endl;  \n   else  \n      cout << \"File position pos1 and pos2 are equal\" << endl;  \n  \n   file.open( \"fpos_op_neq.txt\" );  \n   file.seekg( 0 );   // Goes to a zero-based position in the file  \n   pos1 = file.tellg( );  \n   file.get( c);  \n   cout << c << endl;  \n  \n   // Increment pos1  \n   pos1 += 1;  \n   file.get( c );  \n   cout << c << endl;  \n  \n   pos1 = file.tellg( ) - fpos<int>( 2);  \n   file.seekg( pos1 );  \n   file.get( c );  \n   cout << c << endl;  \n  \n   // Increment pos1  \n   pos1 = pos1 + fpos<int>( 1 );  \n   file.get(c);  \n   cout << c << endl;  \n  \n   pos1 -= fpos<int>( 2 );  \n   file.seekg( pos1 );  \n   file.get( c );  \n   cout << c << endl;  \n  \n   file.close( );  \n}  \n```  \n  \n##  <a name=\"fpos__operator_add\"></a>  fpos::operator+  \n Increments a file-position indicator.  \n  \n```  \nfpos<Statetype> operator+(streamoff _Off) const;\n```  \n  \n### Parameters  \n `_Off`  \n The offset by which you want to increment the file-position indicator.  \n  \n### Return Value  \n The position in the file.  \n  \n### Remarks  \n The member function returns **fpos(\\*this) +=** `_Off`.  \n  \n### Example  \n  See [operator!=](#fpos__operator_neq) for a sample of using `operator+`.  \n  \n##  <a name=\"fpos__operator_add_eq\"></a>  fpos::operator+=  \n Increments a file-position indicator.  \n  \n```  \nfpos<Statetype>& operator+=(streamoff _Off);\n```  \n  \n### Parameters  \n `_Off`  \n The offset by which you want to increment the file-position indicator.  \n  \n### Return Value  \n The position in the file.  \n  \n### Remarks  \n The member function adds `_Off` to the stored offset member object and then returns **\\*this**. For positioning within a file, the result is generally valid only for binary streams that do not have a state-dependent encoding.  \n  \n### Example  \n  See [operator!=](#fpos__operator_neq) for a sample of using `operator+=`.  \n  \n##  <a name=\"fpos__operator-\"></a>  fpos::operator-  \n Decrements a file-position indicator.  \n  \n```  \nstreamoff operator-(const fpos<Statetype>& right) const;\n\n \nfpos<Statetype> operator-(streamoff _Off) const;\n```  \n  \n### Parameters  \n ` right`  \n File position.  \n  \n `_Off`  \n Stream offset.  \n  \n### Return Value  \n The first member function returns **(streamoff)\\*this - (streamoff)**` right`. The second member function returns **fpos(\\*this) -=** `_Off`.  \n  \n### Example  \n  See [operator!=](#fpos__operator_neq) for a sample of using `operator-`.  \n  \n##  <a name=\"fpos__operator-_eq\"></a>  fpos::operator-=  \n Decrements a file-position indicator.  \n  \n```  \nfpos<Statetype>& operator-=(streamoff _Off);\n```  \n  \n### Parameters  \n `_Off`  \n Stream offset.  \n  \n### Return Value  \n The member function returns **fpos(\\*this) -=** `_Off`.  \n  \n### Remarks  \n For positioning within a file, the result is generally valid only for binary streams that do not have a state-dependent encoding.  \n  \n### Example  \n  See [operator!=](#fpos__operator_neq) for a sample of using `operator-=`.  \n  \n##  <a name=\"fpos__operator_eq_eq\"></a>  fpos::operator==  \n Tests file-position indicators for equality.  \n  \n```  \nbool operator==(const fpos<Statetype>& right) const;\n```  \n  \n### Parameters  \n ` right`  \n The file-position indicator against which to compare.  \n  \n### Return Value  \n **true** if the file-position indicators are equal; otherwise **false**.  \n  \n### Remarks  \n The member function returns **(streamoff)\\*this == (streamoff)**` right`.  \n  \n### Example  \n  See [operator!=](#fpos__operator_neq) for a sample of using `operator+=`.  \n  \n##  <a name=\"fpos__operator_streamoff\"></a>  fpos::operator streamoff  \n Cast object of type `fpos` to object of type `streamoff`.  \n  \n```  operator streamoff() const;\n```  \n  \n### Remarks  \n The member function returns the stored offset member object and any additional offset stored as part of the `fpos_t` member object.  \n  \n### Example  \n  \n```cpp  \n// fpos_op_streampos.cpp  \n// compile with: /EHsc  \n#include <ios>  \n#include <iostream>  \n#include <fstream>  \n  \nint main( )   \n{  \n   using namespace std;  \n   streamoff s;  \n   ofstream file( \"rdbuf.txt\");  \n  \n   fpos<mbstate_t> f = file.tellp( );  \n   // Is equivalent to ..  \n   // streampos f = file.tellp( );  \n   s = f;  \n   cout << s << endl;  \n}  \n```  \n  \n```Output  \n0  \n```  \n  \n##  <a name=\"fpos__seekpos\"></a>  fpos::seekpos  \n This method is used internally by the Standard C++ Library only. Do not call this method from your code.  \n  \n```  \nfpos_t seekpos() const;\n```  \n  \n##  <a name=\"fpos__state\"></a>  fpos::state  \n Sets or returns the conversion state.  \n  \n```  \nStatetype state() const;\n\nvoid state(Statetype _State);\n```  \n  \n### Parameters  \n `_State`  \n The new conversion state.  \n  \n### Return Value  \n The conversion state.  \n  \n### Remarks  \n The first member function returns the value stored in the **St** member object. The second member function stores `_State` in the **St** member object.  \n  \n### Example  \n  \n```cpp  \n// fpos_state.cpp  \n// compile with: /EHsc  \n#include <ios>  \n#include <iostream>  \n#include <fstream>  \n  \nint main() {  \n   using namespace std;  \n   streamoff s;  \n   ifstream file( \"fpos_state.txt\" );  \n  \n   fpos<mbstate_t> f = file.tellg( );  \n   char ch;  \n   while ( !file.eof( ) )  \n      file.get( ch );  \n   s = f;  \n   cout << f.state( ) << endl;  \n   f.state( 9 );  \n   cout << f.state( ) << endl;  \n}  \n```  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [iostream Programming](../standard-library/iostream-programming.md)   \n [iostreams Conventions](../standard-library/iostreams-conventions.md)\n\n"}