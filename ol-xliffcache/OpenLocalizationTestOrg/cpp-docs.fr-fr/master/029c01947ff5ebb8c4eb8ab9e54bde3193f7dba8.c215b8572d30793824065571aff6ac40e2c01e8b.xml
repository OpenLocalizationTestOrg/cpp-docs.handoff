{"nodes":[{"pos":[12,48],"content":"memcpy_s, wmemcpy_s | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"memcpy_s, wmemcpy_s | Microsoft Docs","pos":[0,36]}]},{"pos":[978,997],"content":"memcpy_s, wmemcpy_s","linkify":"memcpy_s, wmemcpy_s","nodes":[{"content":"memcpy_s, wmemcpy_s","pos":[0,19]}]},{"content":"Copies bytes between buffers.","pos":[998,1027]},{"content":"These are versions of <bpt id=\"p1\">[</bpt>memcpy, wmemcpy<ept id=\"p1\">](../../c-runtime-library/reference/memcpy-wmemcpy.md)</ept> with security enhancements as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1028,1252],"source":" These are versions of [memcpy, wmemcpy](../../c-runtime-library/reference/memcpy-wmemcpy.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"pos":[1261,1267],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1509,1519],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"New buffer.","pos":[1533,1544]},{"content":"Size of the destination buffer, in bytes for memcpy_s and wide characters (wchar_t) for wmemcpy_s.","pos":[1565,1663]},{"content":"Buffer to copy from.","pos":[1679,1699]},{"content":"Number of characters to copy.","pos":[1717,1746]},{"pos":[1755,1767],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Zero if successful; an error code on failure.","pos":[1771,1816]},{"pos":[1826,1842],"content":"Error Conditions","linkify":"Error Conditions","nodes":[{"content":"Error Conditions","pos":[0,16]}]},{"content":"Return value","pos":[1873,1885]},{"pos":[1886,1904],"content":"Contents of <ph id=\"ph1\">`dest`</ph>","source":"Contents of `dest`"},{"content":"any","pos":[2006,2009]},{"content":"any","pos":[2010,2013]},{"content":"not modified","pos":[2023,2035]},{"content":"any","pos":[2040,2043]},{"content":"any","pos":[2044,2047]},{"pos":[2064,2084],"content":"<ph id=\"ph1\">`dest`</ph> is zeroed out","source":"`dest` is zeroed out"},{"content":"any","pos":[2089,2092]},{"content":"any","pos":[2103,2106]},{"pos":[2116,2136],"content":"<ph id=\"ph1\">`dest`</ph> is zeroed out","source":"`dest` is zeroed out"},{"pos":[2146,2153],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`memcpy_s`</ph> copies <ph id=\"ph2\">`count`</ph> bytes from <ph id=\"ph3\">`src`</ph> to <ph id=\"ph4\">`dest`</ph>; <ph id=\"ph5\">`wmemcpy_s`</ph> copies <ph id=\"ph6\">`count`</ph> wide characters (two bytes).","pos":[2157,2266],"source":"`memcpy_s` copies `count` bytes from `src` to `dest`; `wmemcpy_s` copies `count` wide characters (two bytes)."},{"content":"If the source and destination overlap, the behavior of <ph id=\"ph1\">`memcpy_s`</ph> is undefined.","pos":[2267,2346],"source":" If the source and destination overlap, the behavior of `memcpy_s` is undefined."},{"content":"Use <ph id=\"ph1\">`memmove_s`</ph> to handle overlapping regions.","pos":[2347,2393],"source":" Use `memmove_s` to handle overlapping regions."},{"content":"These functions validate their parameters.","pos":[2400,2442]},{"content":"If <ph id=\"ph1\">`dest`</ph> or <ph id=\"ph2\">`src`</ph> is a null pointer, or <ph id=\"ph3\">`destSize`</ph> is smaller than <ph id=\"ph4\">`count`</ph>, these functions invoke the invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2443,2662],"source":" If `dest` or `src` is a null pointer, or `destSize` is smaller than `count`, these functions invoke the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions return <ph id=\"ph1\">`EINVAL`</ph> and set <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`EINVAL`</ph>.","pos":[2663,2760],"source":" If execution is allowed to continue, these functions return `EINVAL` and set `errno` to `EINVAL`."},{"pos":[2769,2781],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[2788,2795]},{"content":"Required header","pos":[2796,2811]},{"content":"<ph id=\"ph1\">\\&lt;</ph>memory.h&gt; or <ph id=\"ph2\">\\&lt;</ph>string.h&gt;","pos":[2867,2893],"source":"\\<memory.h> or \\<string.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[2910,2920],"source":"\\<wchar.h>"},{"pos":[2928,3052],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[3061,3068],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3788,3813],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[3817,3832]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[3833,3880],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[3881,4006],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[4015,4023],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Buffer Manipulation<ept id=\"p1\">](../../c-runtime-library/buffer-manipulation.md)</ept><ph id=\"ph1\"> </ph>","pos":[4027,4097],"source":"[Buffer Manipulation](../../c-runtime-library/buffer-manipulation.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_memccpy<ept id=\"p1\">](../../c-runtime-library/reference/memccpy.md)</ept><ph id=\"ph1\"> </ph>","pos":[4100,4158],"source":" [_memccpy](../../c-runtime-library/reference/memccpy.md) "},{"content":"<bpt id=\"p1\"> [</bpt>memchr, wmemchr<ept id=\"p1\">](../../c-runtime-library/reference/memchr-wmemchr.md)</ept><ph id=\"ph1\"> </ph>","pos":[4161,4233],"source":" [memchr, wmemchr](../../c-runtime-library/reference/memchr-wmemchr.md) "},{"content":"<bpt id=\"p1\"> [</bpt>memcmp, wmemcmp<ept id=\"p1\">](../../c-runtime-library/reference/memcmp-wmemcmp.md)</ept><ph id=\"ph1\"> </ph>","pos":[4236,4308],"source":" [memcmp, wmemcmp](../../c-runtime-library/reference/memcmp-wmemcmp.md) "},{"content":"<bpt id=\"p1\"> [</bpt>memmove, wmemmove<ept id=\"p1\">](../../c-runtime-library/reference/memmove-wmemmove.md)</ept><ph id=\"ph1\"> </ph>","pos":[4311,4387],"source":" [memmove, wmemmove](../../c-runtime-library/reference/memmove-wmemmove.md) "},{"content":"<bpt id=\"p1\"> [</bpt>memset, wmemset<ept id=\"p1\">](../../c-runtime-library/reference/memset-wmemset.md)</ept><ph id=\"ph1\"> </ph>","pos":[4390,4462],"source":" [memset, wmemset](../../c-runtime-library/reference/memset-wmemset.md) "},{"content":"<bpt id=\"p1\"> [</bpt>strcpy, wcscpy, _mbscpy<ept id=\"p1\">](../../c-runtime-library/reference/strcpy-wcscpy-mbscpy.md)</ept><ph id=\"ph1\"> </ph>","pos":[4465,4551],"source":" [strcpy, wcscpy, _mbscpy](../../c-runtime-library/reference/strcpy-wcscpy-mbscpy.md) "},{"content":"<bpt id=\"p1\"> [</bpt>strncpy, _strncpy_l, wcsncpy, _wcsncpy_l, _mbsncpy, _mbsncpy_l<ept id=\"p1\">](../../c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[4554,4712],"source":" [strncpy, _strncpy_l, wcsncpy, _wcsncpy_l, _mbsncpy, _mbsncpy_l](../../c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>strncpy_s, _strncpy_s_l, wcsncpy_s, _wcsncpy_s_l, _mbsncpy_s, _mbsncpy_s_l<ept id=\"p1\">](../../c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l.md)</ept>","pos":[4715,4896],"source":" [strncpy_s, _strncpy_s_l, wcsncpy_s, _wcsncpy_s_l, _mbsncpy_s, _mbsncpy_s_l](../../c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l.md)"}],"content":"---\ntitle: \"memcpy_s, wmemcpy_s | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"memcpy_s\"\n  - \"wmemcpy_s\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-string-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"wmemcpy_s\"\n  - \"memcpy_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"memcpy_s function\"\n  - \"wmemcpy_s function\"\nms.assetid: 5504e20a-83d9-4063-91fc-3f55f7dabe99\ncaps.latest.revision: 27\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# memcpy_s, wmemcpy_s\nCopies bytes between buffers. These are versions of [memcpy, wmemcpy](../../c-runtime-library/reference/memcpy-wmemcpy.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nerrno_t memcpy_s(  \n   void *dest,  \n   size_t destSize,  \n   const void *src,  \n   size_t count   \n);  \nerrno_t wmemcpy_s(  \n   wchar_t *dest,  \n   size_t destSize,  \n   const wchar_t *src,  \n   size_t count  \n);  \n```  \n  \n#### Parameters  \n `dest`  \n New buffer.  \n  \n `destSize`  \n Size of the destination buffer, in bytes for memcpy_s and wide characters (wchar_t) for wmemcpy_s.  \n  \n `src`  \n Buffer to copy from.  \n  \n `count`  \n Number of characters to copy.  \n  \n## Return Value  \n Zero if successful; an error code on failure.  \n  \n### Error Conditions  \n  \n|`dest`|`destSize`|`src`|Return value|Contents of `dest`|  \n|------------|----------------|-----------|------------------|------------------------|  \n|`NULL`|any|any|`EINVAL`|not modified|  \n|any|any|`NULL`|`EINVAL`|`dest` is zeroed out|  \n|any|< `count`|any|`ERANGE`|`dest` is zeroed out|  \n  \n## Remarks  \n `memcpy_s` copies `count` bytes from `src` to `dest`; `wmemcpy_s` copies `count` wide characters (two bytes). If the source and destination overlap, the behavior of `memcpy_s` is undefined. Use `memmove_s` to handle overlapping regions.  \n  \n These functions validate their parameters. If `dest` or `src` is a null pointer, or `destSize` is smaller than `count`, these functions invoke the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions return `EINVAL` and set `errno` to `EINVAL`.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`memcpy_s`|\\<memory.h> or \\<string.h>|  \n|`wmemcpy_s`|\\<wchar.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_memcpy_s.c  \n// Copy memory in a more secure way.  \n  \n#include <memory.h>  \n#include <stdio.h>  \n  \nint main()  \n{  \n   int a1[10], a2[100], i;  \n   errno_t err;  \n  \n   // Populate a2 with squares of integers  \n   for (i = 0; i < 100; i++)  \n   {  \n      a2[i] = i*i;  \n   }  \n  \n   // Tell memcpy_s to copy 10 ints (40 bytes), giving  \n   // the size of the a1 array (also 40 bytes).  \n   err = memcpy_s(a1, sizeof(a1), a2, 10 * sizeof (int) );      \n   if (err)  \n   {  \n      printf(\"Error executing memcpy_s.\\n\");  \n   }  \n   else  \n   {  \n     for (i = 0; i < 10; i++)  \n       printf(\"%d \", a1[i]);  \n   }  \n   printf(\"\\n\");  \n}  \n```  \n  \n```Output  \n0 1 4 9 16 25 36 49 64 81   \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Buffer Manipulation](../../c-runtime-library/buffer-manipulation.md)   \n [_memccpy](../../c-runtime-library/reference/memccpy.md)   \n [memchr, wmemchr](../../c-runtime-library/reference/memchr-wmemchr.md)   \n [memcmp, wmemcmp](../../c-runtime-library/reference/memcmp-wmemcmp.md)   \n [memmove, wmemmove](../../c-runtime-library/reference/memmove-wmemmove.md)   \n [memset, wmemset](../../c-runtime-library/reference/memset-wmemset.md)   \n [strcpy, wcscpy, _mbscpy](../../c-runtime-library/reference/strcpy-wcscpy-mbscpy.md)   \n [strncpy, _strncpy_l, wcsncpy, _wcsncpy_l, _mbsncpy, _mbsncpy_l](../../c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l.md)   \n [strncpy_s, _strncpy_s_l, wcsncpy_s, _wcsncpy_s_l, _mbsncpy_s, _mbsncpy_s_l](../../c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l.md)"}