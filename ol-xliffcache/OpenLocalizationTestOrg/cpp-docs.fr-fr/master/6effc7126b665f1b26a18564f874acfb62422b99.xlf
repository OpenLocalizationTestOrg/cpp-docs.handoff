<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6effc7126b665f1b26a18564f874acfb62422b99</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\tn002-persistent-object-data-format.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">176bf5699363b173a15ac2ddd66d1f0da0a7e52b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">56de3e89bd65329b6275385828a84b23f50a10cf</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>TN002: Persistent Object Data Format | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>TN002: Persistent Object Data Format</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This note describes the MFC routines that support persistent C++ objects and the format of the object data when it is stored in a file.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This applies only to classes with the <bpt id="p1">[</bpt>DECLARE_SERIAL<ept id="p1">](../mfc/reference/run-time-object-model-services.md#declare_serial)</ept> and <bpt id="p2">[</bpt>IMPLEMENT_SERIAL<ept id="p2">](../mfc/reference/run-time-object-model-services.md#implement_serial)</ept> macros.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The Problem</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The MFC implementation for persistent data stores data for many objects in a single contiguous part of a file.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The object's <ph id="ph1">`Serialize`</ph> method translates the object's data into a compact binary format.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The implementation guarantees that all data is saved in the same format by using the <bpt id="p1">[</bpt>CArchive Class<ept id="p1">](../mfc/reference/carchive-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It uses a <ph id="ph1">`CArchive`</ph> object as a translator.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This object persists from the time it is created until you call <bpt id="p1">[</bpt>CArchive::Close<ept id="p1">](../mfc/reference/carchive-class.md#carchive__close)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This method can be called either explicitly by the programmer or implicitly by the destructor when the program exits the scope that contains the <ph id="ph1">`CArchive`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This note describes the implementation of the <ph id="ph1">`CArchive`</ph> members <bpt id="p1">[</bpt>CArchive::ReadObject<ept id="p1">](../mfc/reference/carchive-class.md#carchive__readobject)</ept> and <bpt id="p2">[</bpt>CArchive::WriteObject<ept id="p2">](../mfc/reference/carchive-class.md#carchive__writeobject)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You will find the code for these functions in Arcobj.cpp, and the main implementation for <ph id="ph1">`CArchive`</ph> in Arccore.cpp.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>User code does not call <ph id="ph1">`ReadObject`</ph> and <ph id="ph2">`WriteObject`</ph> directly.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Instead, these objects are used by class-specific type-safe insertion and extraction operators that are generated automatically by the <ph id="ph1">`DECLARE_SERIAL`</ph> and <ph id="ph2">`IMPLEMENT_SERIAL`</ph> macros.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following code shows how <ph id="ph1">`WriteObject`</ph> and <ph id="ph2">`ReadObject`</ph> are implicitly called:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Saving Objects to the Store (CArchive::WriteObject)</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The method <ph id="ph1">`CArchive::WriteObject`</ph> writes header data that is used to reconstruct the object.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This data consists of two parts: the type of the object and the state of the object.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This method is also responsible for maintaining the identity of the object being written out, so that only a single copy is saved, regardless of the number of pointers to that object (including circular pointers).</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Saving (inserting) and restoring (extracting) objects relies on several "manifest constants."</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>These are values that are stored in binary and provide important information to the archive (note the "w" prefix indicates 16-bit quantities):</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Tag</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>wNullTag</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Used for NULL object pointers (0).</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>wNewClassTag</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Indicates class description that follows is new to this archive context (-1).</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>wOldClassTag</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Indicates class of the object being read has been seen in this context (0x8000).</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When storing objects, the archive maintains a <bpt id="p1">[</bpt>CMapPtrToPtr<ept id="p1">](../mfc/reference/cmapptrtoptr-class.md)</ept> (the <ph id="ph1">`m_pStoreMap`</ph>) which is a mapping from a stored object to a 32-bit persistent identifier (PID).</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A PID is assigned to every unique object and every unique class name that is saved in the context of the archive.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>These PIDs are handed out sequentially starting at 1.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>These PIDs have no significance outside the scope of the archive and, in particular, are not to be confused with record numbers or other identity items.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`CArchive`</ph> class, PIDs are 32-bit, but they are written out as 16-bit unless they are larger than 0x7FFE.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Large PIDs are written as 0x7FFF followed by the 32-bit PID.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This maintains compatibility with projects that were created in earlier versions.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When a request is made to save an object to an archive (usually by using the global insertion operator), a check is made for a NULL <bpt id="p1">[</bpt>CObject<ept id="p1">](../mfc/reference/cobject-class.md)</ept> pointer.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the pointer is NULL, the <ph id="ph1">`wNullTag`</ph> is inserted into the archive stream.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If the pointer is not NULL and can be serialized (the class is a <ph id="ph1">`DECLARE_SERIAL`</ph> class), the code checks the <ph id="ph2">`m_pStoreMap`</ph> to see whether the object has been saved already.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If it has, the code inserts the 32-bit PID associated with that object into the archive stream.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If the object has not been saved before, there are two possibilities to consider: either both the object and the exact type (that is, class) of the object are new to this archive context, or the object is of an exact type already seen.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To determine whether the type has been seen, the code queries the <ph id="ph1">`m_pStoreMap`</ph> for a <bpt id="p1">[</bpt>CRuntimeClass<ept id="p1">](../mfc/reference/cruntimeclass-structure.md)</ept> object that matches the <ph id="ph2">`CRuntimeClass`</ph> object associated with the object being saved.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If there is a match, <ph id="ph1">`WriteObject`</ph> inserts a tag that is the bit-wise <ph id="ph2">`OR`</ph> of <ph id="ph3">`wOldClassTag`</ph> and this index.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`CRuntimeClass`</ph> is new to this archive context, <ph id="ph2">`WriteObject`</ph> assigns a new PID to that class and inserts it into the archive, preceded by the <ph id="ph3">`wNewClassTag`</ph> value.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The descriptor for this class is then inserted into the archive using the <ph id="ph1">`CRuntimeClass::Store`</ph> method.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>inserts the schema number of the class (see below) and the ASCII text name of the class.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Note that the use of the ASCII text name does not guarantee uniqueness of the archive across applications.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Therefore, you should tag your data files to prevent corruption.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Following the insertion of the class information, the archive puts the object into the <ph id="ph1">`m_pStoreMap`</ph> and then calls the <ph id="ph2">`Serialize`</ph> method to insert class-specific data.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Placing the object into the <ph id="ph1">`m_pStoreMap`</ph> before calling <ph id="ph2">`Serialize`</ph> prevents multiple copies of the object from being saved to the store.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When returning to the initial caller (usually the root of the network of objects), you must call <bpt id="p1">[</bpt>CArchive::Close<ept id="p1">](../mfc/reference/carchive-class.md#carchive__close)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If you plan to perform other <bpt id="p1">[</bpt>CFile<ept id="p1">](../mfc/reference/cfile-class.md)</ept>operations, you must call the <ph id="ph1">`CArchive`</ph> method <bpt id="p2">[</bpt>Flush<ept id="p2">](../mfc/reference/carchive-class.md#carchive__flush)</ept> to prevent corruption of the archive.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This implementation imposes a hard limit of 0x3FFFFFFE indices per archive context.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This number represents the maximum number of unique objects and classes that can be saved in a single archive, but a single disk file can have an unlimited number of archive contexts.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Loading Objects from the Store (CArchive::ReadObject)</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Loading (extracting) objects uses the <ph id="ph1">`CArchive::ReadObject`</ph> method and is the converse of <ph id="ph2">`WriteObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>As with <ph id="ph1">`WriteObject`</ph>, <ph id="ph2">`ReadObject`</ph> is not called directly by user code; user code should call the type-safe extraction operator that calls <ph id="ph3">`ReadObject`</ph> with the expected <ph id="ph4">`CRuntimeClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This insures the type integrity of the extract operation.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Since the <ph id="ph1">`WriteObject`</ph> implementation assigned increasing PIDs, starting with 1 (0 is predefined as the NULL object), the <ph id="ph2">`ReadObject`</ph> implementation can use an array to maintain the state of the archive context.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When a PID is read from the store, if the PID is larger than the current upper bound of the <ph id="ph1">`m_pLoadArray`</ph>, <ph id="ph2">`ReadObject`</ph> knows that a new object (or class description) follows.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Schema Numbers</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The schema number, which is assigned to the class when the <ph id="ph1">`IMPLEMENT_SERIAL`</ph> method of the class is encountered, is the "version" of the class implementation.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The schema refers to the implementation of the class, not to the number of times a given object has been made persistent (usually referred to as the object version).</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If you intend to maintain several different implementations of the same class over time, incrementing the schema as you revise your object's <ph id="ph1">`Serialize`</ph> method implementation will enable you to write code that can load objects stored by using older versions of the implementation.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CArchive::ReadObject`</ph> method will throw a <bpt id="p1">[</bpt>CArchiveException<ept id="p1">](../mfc/reference/carchiveexception-class.md)</ept> when it encounters a schema number in the persistent store that differs from the schema number of the class description in memory.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>It is not easy to recover from this exception.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`VERSIONABLE_SCHEMA`</ph> combined with (bitwise <ph id="ph2">`OR`</ph>) your schema version to keep this exception from being thrown.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>By using <ph id="ph1">`VERSIONABLE_SCHEMA`</ph>, your code can take the appropriate action in its <ph id="ph2">`Serialize`</ph> function by checking the return value from <bpt id="p1">[</bpt>CArchive::GetObjectSchema<ept id="p1">](../mfc/reference/carchive-class.md#carchive__getobjectschema)</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Calling Serialize Directly</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In many cases the overhead of the general object archive scheme of <ph id="ph1">`WriteObject`</ph> and <ph id="ph2">`ReadObject`</ph> is not necessary.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This is the common case of serializing the data into a <bpt id="p1">[</bpt>CDocument<ept id="p1">](../mfc/reference/cdocument-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In this case, the <ph id="ph1">`Serialize`</ph> method of the <ph id="ph2">`CDocument`</ph> is called directly, not with the extract or insert operators.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The contents of the document may in turn use the more general object archive scheme.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">`Serialize`</ph> directly has the following advantages and disadvantages:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>No extra bytes are added to the archive before or after the object is serialized.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This not only makes the saved data smaller, but allows you to implement <ph id="ph1">`Serialize`</ph> routines that can handle any file formats.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The MFC is tuned so the <ph id="ph1">`WriteObject`</ph> and <ph id="ph2">`ReadObject`</ph> implementations and related collections will not be linked into your application unless you need the more general object archive scheme for some other purpose.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Your code does not have to recover from old schema numbers.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This makes your document serialization code responsible for encoding schema numbers, file format version numbers, or whatever identifying numbers you use at the start of your data files.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Any object that is serialized with a direct call to <ph id="ph1">`Serialize`</ph> must not use <ph id="ph2">`CArchive::GetObjectSchema`</ph> or must handle a return value of (UINT)-1 indicating that the version was unknown.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`Serialize`</ph> is called directly on your document, it is not usually possible for the sub-objects of the document to archive references to their parent document.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>These objects must be given a pointer to their container document explicitly or you must use <bpt id="p1">[</bpt>CArchive::MapObject<ept id="p1">](../mfc/reference/carchive-class.md#carchive__mapobject)</ept> function to map the <ph id="ph1">`CDocument`</ph> pointer to a PID before these back pointers are archived.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>As noted earlier, you should encode the version and class information yourself when you call <ph id="ph1">`Serialize`</ph> directly, enabling you to change the format later while still maintaining backward compatibility with older files.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CArchive::SerializeClass`</ph> function can be called explicitly before directly serializing an object or before calling a base class.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Technical Notes by Number</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Technical Notes by Category</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>