{"nodes":[{"pos":[12,55],"content":"output_iterator_tag Struct | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"output_iterator_tag Struct | Microsoft Docs","pos":[0,43]}]},{"pos":[764,790],"content":"output_iterator_tag Struct","linkify":"output_iterator_tag Struct","nodes":[{"content":"output_iterator_tag Struct","pos":[0,26]}]},{"pos":[791,897],"content":"A class that provides a return type for <bpt id=\"p1\">**</bpt>iterator_category<ept id=\"p1\">**</ept> function that represents an output iterator.","source":"A class that provides a return type for **iterator_category** function that represents an output iterator."},{"pos":[906,912],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"content":"struct output_iterator_tag {};","pos":[918,948]},{"pos":[957,964],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The category tag classes are used as compile tags for algorithm selection.","pos":[968,1042]},{"content":"The template function needs to find the most specific category of its iterator argument so that it can use the most efficient algorithm at compile time.","pos":[1043,1195]},{"content":"For every iterator of type <ph id=\"ph1\">`Iterator`</ph>, <ph id=\"ph2\">`iterator_traits`</ph><ph id=\"ph3\">&lt; </ph><ph id=\"ph4\">`Iterator`</ph><ph id=\"ph5\">&gt; </ph><bpt id=\"p1\">**</bpt>::iterator_category<ept id=\"p1\">**</ept> must be defined to be the most specific category tag that describes the iterator's behavior.","pos":[1196,1382],"source":" For every iterator of type `Iterator`, `iterator_traits`< `Iterator`> **::iterator_category** must be defined to be the most specific category tag that describes the iterator's behavior."},{"pos":[1389,1532],"content":"The type is the same as <bpt id=\"p1\">**</bpt>iterator<ept id=\"p1\">**</ept><ph id=\"ph1\">\\&lt;</ph> <bpt id=\"p2\">**</bpt>Iter<ept id=\"p2\">**</ept><ph id=\"ph2\">&gt; </ph><bpt id=\"p3\">**</bpt>::iterator_category<ept id=\"p3\">**</ept> when <bpt id=\"p4\">**</bpt>Iter<ept id=\"p4\">**</ept> describes an object that can serve as a output iterator.","source":"The type is the same as **iterator**\\< **Iter**> **::iterator_category** when **Iter** describes an object that can serve as a output iterator."},{"pos":[1539,1743],"content":"This tag is not parameterized on the <ph id=\"ph1\">`value_type`</ph> or <ph id=\"ph2\">`difference_type`</ph> for the iterator, as with the other iterator tags, because output iterators do not have either a <ph id=\"ph3\">`value_type`</ph> or a <ph id=\"ph4\">`difference_type`</ph>.","source":"This tag is not parameterized on the `value_type` or `difference_type` for the iterator, as with the other iterator tags, because output iterators do not have either a `value_type` or a `difference_type`."},{"pos":[1752,1759],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1763,1969],"content":"See <bpt id=\"p1\">[</bpt>iterator_traits<ept id=\"p1\">](../standard-library/iterator-traits-struct.md)</ept> or <bpt id=\"p2\">[</bpt>random_access_iterator_tag<ept id=\"p2\">](../standard-library/random-access-iterator-tag-struct.md)</ept> for an example of how to use <bpt id=\"p3\">**</bpt>iterator_tag<ept id=\"p3\">**</ept>s.","source":"See [iterator_traits](../standard-library/iterator-traits-struct.md) or [random_access_iterator_tag](../standard-library/random-access-iterator-tag-struct.md) for an example of how to use **iterator_tag**s."},{"pos":[1978,1990],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1994,2017],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>iterator&gt;","source":"**Header:** \\<iterator>"},{"pos":[2024,2042],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[2051,2059],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept><ph id=\"ph1\"> </ph>","pos":[2063,2173],"source":"[Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C++ Standard Library Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-reference.md)</ept>","pos":[2176,2264],"source":" [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)"}],"content":"---\ntitle: \"output_iterator_tag Struct | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std::output_iterator_tag\"\n  - \"output_iterator_tag\"\n  - \"xutility/std::output_iterator_tag\"\n  - \"std.output_iterator_tag\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"output_iterator_tag class\"\n  - \"output_iterator_tag struct\"\nms.assetid: c23a4331-b069-4fa0-9c3a-1c9be7095553\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# output_iterator_tag Struct\nA class that provides a return type for **iterator_category** function that represents an output iterator.  \n  \n## Syntax  \n  \nstruct output_iterator_tag {};  \n  \n## Remarks  \n The category tag classes are used as compile tags for algorithm selection. The template function needs to find the most specific category of its iterator argument so that it can use the most efficient algorithm at compile time. For every iterator of type `Iterator`, `iterator_traits`< `Iterator`> **::iterator_category** must be defined to be the most specific category tag that describes the iterator's behavior.  \n  \n The type is the same as **iterator**\\< **Iter**> **::iterator_category** when **Iter** describes an object that can serve as a output iterator.  \n  \n This tag is not parameterized on the `value_type` or `difference_type` for the iterator, as with the other iterator tags, because output iterators do not have either a `value_type` or a `difference_type`.  \n  \n## Example  \n See [iterator_traits](../standard-library/iterator-traits-struct.md) or [random_access_iterator_tag](../standard-library/random-access-iterator-tag-struct.md) for an example of how to use **iterator_tag**s.  \n  \n## Requirements  \n **Header:** \\<iterator>  \n  \n **Namespace:** std  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}