<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9a657f159747bd28519112b828b73eede89dc63b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\carchive-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">149408944a97c3e9da958df950cd9fb82e4c38dc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8c22a1aef1c0dd513540c56977a4b13da9e5b0c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CArchive Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CArchive Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Allows you to save a complex network of objects in a permanent binary form (usually disk storage) that persists after those objects are deleted.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CArchive::CArchive</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">`CArchive`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CArchive::Abort</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Closes an archive without throwing an exception.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CArchive::Close</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Flushes unwritten data and disconnects from the <ph id="ph1">`CFile`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CArchive::Flush</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Flushes unwritten data from the archive buffer.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CArchive::GetFile</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">`CFile`</ph> object pointer for this archive.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CArchive::GetObjectSchema</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Called from the <ph id="ph1">`Serialize`</ph> function to determine the version of the object that is being deserialized.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CArchive::IsBufferEmpty</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Determines whether the buffer has been emptied during a Windows Sockets receive process.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CArchive::IsLoading</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Determines whether the archive is loading.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CArchive::IsStoring</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Determines whether the archive is storing.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CArchive::MapObject</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Places objects in the map that are not serialized to the file, but that are available for subobjects to reference.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CArchive::Read</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Reads raw bytes.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CArchive::ReadClass</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Reads a class reference previously stored with <ph id="ph1">`WriteClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>CArchive::ReadObject</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Calls an object's <ph id="ph1">`Serialize`</ph> function for loading.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>CArchive::ReadString</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Reads a single line of text.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>CArchive::SerializeClass</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Reads or writes the class reference to the <ph id="ph1">`CArchive`</ph> object depending on the direction of the <ph id="ph2">`CArchive`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>CArchive::SetLoadParams</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Sets the size to which the load array grows.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Must be called before any object is loaded or before <ph id="ph1">`MapObject`</ph> or <ph id="ph2">`ReadObject`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>CArchive::SetObjectSchema</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Sets the object schema stored in the archive object.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>CArchive::SetStoreParams</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Sets the hash table size and the block size of the map used to identify unique objects during the serialization process.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>CArchive::Write</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Writes raw bytes.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>CArchive::WriteClass</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Writes a reference to the <ph id="ph1">`CRuntimeClass`</ph> to the <ph id="ph2">`CArchive`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>CArchive::WriteObject</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Calls an object's <ph id="ph1">`Serialize`</ph> function for storing.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>CArchive::WriteString</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Writes a single line of text.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>CArchive::operator</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Stores objects and primitive types to the archive.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>CArchive::operator</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Loads objects and primitive types from the archive.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CArchive::m_pDocument</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>does not have a base class.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Later you can load the objects from persistent storage, reconstituting them in memory.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This process of making data persistent is called "serialization."</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You can think of an archive object as a kind of binary stream.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Like an input/output stream, an archive is associated with a file and permits the buffered writing and reading of data to and from storage.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>An input/output stream processes sequences of ASCII characters, but an archive processes binary object data in an efficient, nonredundant format.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You must create a <bpt id="p1">[</bpt>CFile<ept id="p1">](../../mfc/reference/cfile-class.md)</ept> object before you can create a <ph id="ph1">`CArchive`</ph> object.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In addition, you must ensure that the archive's load/store status is compatible with the file's open mode.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You are limited to one active archive per file.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>When you construct a <ph id="ph1">`CArchive`</ph> object, you attach it to an object of class <ph id="ph2">`CFile`</ph> (or a derived class) that represents an open file.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You also specify whether the archive will be used for loading or storing.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CArchive`</ph> object can process not only primitive types but also objects of <bpt id="p1">[</bpt>CObject<ept id="p1">](../../mfc/reference/cobject-class.md)</ept>-derived classes designed for serialization.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A serializable class usually has a <ph id="ph1">`Serialize`</ph> member function, and it usually uses the <bpt id="p1">[</bpt>DECLARE_SERIAL<ept id="p1">](../../mfc/reference/run-time-object-model-services.md#declare_serial)</ept> and <bpt id="p2">[</bpt>IMPLEMENT_SERIAL<ept id="p2">](../../mfc/reference/run-time-object-model-services.md#implement_serial)</ept> macros, as described under class <ph id="ph2">`CObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The overloaded extraction ( <bpt id="p1">**</bpt><ph id="ph1">&gt;&gt;</ph><ept id="p1">**</ept>) and insertion ( <bpt id="p2">**</bpt><ph id="ph2">&lt;&lt;</ph><ept id="p2">**</ept>) operators are convenient archive programming interfaces that support both primitive types and <ph id="ph3">`CObject`</ph>-derived classes.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>also supports programming with the MFC Windows Sockets classes <bpt id="p1">[</bpt>CSocket<ept id="p1">](../../mfc/reference/csocket-class.md)</ept> and <bpt id="p2">[</bpt>CSocketFile<ept id="p2">](../../mfc/reference/csocketfile-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>IsBufferEmpty<ept id="p1">](#carchive__isbufferempty)</ept> member function supports that usage.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`CArchive`</ph>, see the articles <bpt id="p1">[</bpt>Serialization<ept id="p1">](../../mfc/serialization-in-mfc.md)</ept> and <bpt id="p2">[</bpt>Windows Sockets: Using Sockets with Archives<ept id="p2">](../../mfc/windows-sockets-using-sockets-with-archives.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afx.h</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>CArchive::Abort</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Call this function to close the archive without throwing an exception.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CArchive<ept id="p1">**</ept> destructor will normally call <bpt id="p2">**</bpt>Close<ept id="p2">**</ept>, which will flush any data that has not been saved to the associated <ph id="ph1">`CFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This can cause exceptions.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>When catching these exceptions, it is a good idea to use <bpt id="p1">**</bpt>Abort<ept id="p1">**</ept>, so that destructing the <ph id="ph1">`CArchive`</ph> object doesn't cause further exceptions.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>When handling exceptions, <ph id="ph1">`CArchive::Abort`</ph> will not throw an exception on failures because, unlike <bpt id="p1">[</bpt>CArchive::Close<ept id="p1">](#carchive__close)</ept>, <bpt id="p2">**</bpt>Abort<ept id="p2">**</ept> ignores failures.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If you used <bpt id="p1">**</bpt>new<ept id="p1">**</ept> to allocate the <ph id="ph1">`CArchive`</ph> object on the heap, then you must delete it after closing the file.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CArchive::WriteClass<ept id="p1">](#carchive__writeclass)</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>CArchive::CArchive</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CArchive`</ph> object and specifies whether it will be used for loading or storing objects.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>A pointer to the <ph id="ph1">`CFile`</ph> object that is the ultimate source or destination of the persistent data.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>A flag that specifies whether objects will be loaded from or stored to the archive.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nMode`</ph> parameter must have one of the following values:</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CArchive::load<ept id="p1">**</ept> Loads data from the archive.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Requires only <ph id="ph1">`CFile`</ph> read permission.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CArchive::store<ept id="p1">**</ept> Saves data to the archive.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Requires <ph id="ph1">`CFile`</ph> write permission.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CArchive::bNoFlushOnDelete<ept id="p1">**</ept> Prevents the archive from automatically calling <ph id="ph1">`Flush`</ph> when the archive destructor is called.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>If you set this flag, you are responsible for explicitly calling <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> before the destructor is called.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>If you do not, your data will be corrupted.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>An integer that specifies the size of the internal file buffer, in bytes.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Note that the default buffer size is 4,096 bytes.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>If you routinely archive large objects, you will improve performance if you use a larger buffer size that is a multiple of the file buffer size.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>An optional pointer to a user-supplied buffer of size <ph id="ph1">`nBufSize`</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>If you do not specify this parameter, the archive allocates a buffer from the local heap and frees it when the object is destroyed.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The archive does not free a user-supplied buffer.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>You cannot change this specification after you have created the archive.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>You may not use <ph id="ph1">`CFile`</ph> operations to alter the state of the file until you have closed the archive.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Any such operation will damage the integrity of the archive.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>You may access the position of the file pointer at any time during serialization by obtaining the archive's file object from the <bpt id="p1">[</bpt>GetFile<ept id="p1">](#carchive__getfile)</ept> member function and then using the <bpt id="p2">[</bpt>CFile::GetPosition<ept id="p2">](../../mfc/reference/cfile-class.md#cfile__getposition)</ept> function.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>You should call <bpt id="p1">[</bpt>CArchive::Flush<ept id="p1">](#carchive__flush)</ept> before obtaining the position of the file pointer.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#12</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>CArchive::Close</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Flushes any data remaining in the buffer, closes the archive, and disconnects the archive from the file.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>No further operations on the archive are permitted.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>After you close an archive, you can create another archive for the same file or you can close the file.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The member function <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> ensures that all data is transferred from the archive to the file, and it makes the archive unavailable.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>To complete the transfer from the file to the storage medium, you must first use <bpt id="p1">[</bpt>CFile::Close<ept id="p1">](../../mfc/reference/cfile-class.md#cfile__close)</ept> and then destroy the <ph id="ph1">`CFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CArchive::WriteString<ept id="p1">](#carchive__writestring)</ept>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>CArchive::Flush</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Forces any data remaining in the archive buffer to be written to the file.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The member function <ph id="ph1">`Flush`</ph> ensures that all data is transferred from the archive to the file.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>You must call <bpt id="p1">[</bpt>CFile::Close<ept id="p1">](../../mfc/reference/cfile-class.md#cfile__close)</ept> to complete the transfer from the file to the storage medium.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#13</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>CArchive::GetFile</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">`CFile`</ph> object pointer for this archive.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>A constant pointer to the <ph id="ph1">`CFile`</ph> object in use.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>You must flush the archive before using <ph id="ph1">`GetFile`</ph>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#14</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>CArchive::GetObjectSchema</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Call this function from the <ph id="ph1">`Serialize`</ph> function to determine the version of the object that is currently being deserialized.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>During deserialization, the version of the object being read.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Calling this function is only valid when the <ph id="ph1">`CArchive`</ph> object is being loaded ( <bpt id="p1">[</bpt>CArchive::IsLoading<ept id="p1">](#carchive__isloading)</ept> returns nonzero).</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>It should be the first call in the <ph id="ph1">`Serialize`</ph> function and called only once.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>A return value of ( <bpt id="p1">**</bpt>UINT<ept id="p1">**</ept>)–1 indicates that the version number is unknown.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CObject`</ph>-derived class may use <bpt id="p1">**</bpt>VERSIONABLE_SCHEMA<ept id="p1">**</ept> combined (using bitwise <ph id="ph2">`OR`</ph>) with the schema version itself (in the <ph id="ph3">`IMPLEMENT_SERIAL`</ph> macro) to create a "versionable object," that is, an object whose <ph id="ph4">`Serialize`</ph> member function can read multiple versions.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The default framework functionality (without <bpt id="p1">**</bpt>VERSIONABLE_SCHEMA<ept id="p1">**</ept>) is to throw an exception when the version is mismatched.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#15</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>CArchive::IsBufferEmpty</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Call this member function to determine whether the archive object's internal buffer is empty.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Nonzero if the archive's buffer is empty; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>This function is supplied to support programming with the MFC Windows Sockets class <ph id="ph1">`CSocketFile`</ph>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>You do not need to use it for an archive associated with a <ph id="ph1">`CFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The reason for using <ph id="ph1">`IsBufferEmpty`</ph> with an archive associated with a <ph id="ph2">`CSocketFile`</ph> object is that the archive's buffer might contain more than one message or record.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>After receiving one message, you should use <ph id="ph1">`IsBufferEmpty`</ph> to control a loop that continues receiving data until the buffer is empty.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Receive<ept id="p1">](../../mfc/reference/casyncsocket-class.md#casyncsocket__receive)</ept> member function of class <ph id="ph1">`CAsyncSocket`</ph>, which shows how to use <ph id="ph2">`IsBufferEmpty`</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Windows Sockets: Using Sockets with Archives<ept id="p1">](../../mfc/windows-sockets-using-sockets-with-archives.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>CArchive::IsLoading</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Determines whether the archive is loading data.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Nonzero if the archive is currently being used for loading; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>This member function is called by the <ph id="ph1">`Serialize`</ph> functions of the archived classes.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#16</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>CArchive::IsStoring</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Determines whether the archive is storing data.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Nonzero if the archive is currently being used for storing; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>This member function is called by the <ph id="ph1">`Serialize`</ph> functions of the archived classes.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`IsStoring`</ph> status of an archive is nonzero, then its <ph id="ph2">`IsLoading`</ph> status is 0, and vice versa.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#17</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>CArchive::MapObject</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Call this member function to place objects in the map that are not really serialized to the file, but that are available for subobjects to reference.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>A constant pointer to the object being stored.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>For example, you might not serialize a document, but you would serialize the items that are part of the document.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>By calling <ph id="ph1">`MapObject`</ph>, you allow those items, or subobjects, to reference the document.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Also, serialized subitems can serialize their <ph id="ph1">`m_pDocument`</ph> back pointer.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>You can call <ph id="ph1">`MapObject`</ph> when you store to and load from the <ph id="ph2">`CArchive`</ph> object.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>adds the specified object to the internal data structures maintained by the <ph id="ph1">`CArchive`</ph> object during serialization and deserialization, but unlike <bpt id="p1">[</bpt>ReadObject<ept id="p1">](#carchive__readobject)</ept> and <bpt id="p2">[</bpt>WriteObject<ept id="p2">](#carchive__writeobject)</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept> it does not call serialize on the object.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#18</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#19</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#20</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#21</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>CArchive::m_pDocument</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Set to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> by default, this pointer to a <bpt id="p2">**</bpt>CDocument<ept id="p2">**</ept> can be set to anything the user of the <ph id="ph1">`CArchive`</ph> instance wants.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>A common usage of this pointer is to convey additional information about the serialization process to all objects being serialized.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>This is achieved by initializing the pointer with the document (a <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept>-derived class) that is being serialized, in such a way that objects within the document can access the document if necessary.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>This pointer is also used by <ph id="ph1">`COleClientItem`</ph> objects during serialization.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>The framework sets <ph id="ph1">`m_pDocument`</ph> to the document being serialized when a user issues a File Open or Save command.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>If you serialize an Object Linking and Embedding (OLE) container document for reasons other than File Open or Save, you must explicitly set <ph id="ph1">`m_pDocument`</ph>.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>For example, you would do this when serializing a container document to the Clipboard.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#35</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>CArchive::operator</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Stores the indicated object or primitive type to the archive.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CArchive`</ph> reference that enables multiple insertion operators on a single line.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The last two versions above are specifically for storing 64-bit integers.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>If you used the <ph id="ph1">`IMPLEMENT_SERIAL`</ph> macro in your class implementation, then the insertion operator overloaded for <ph id="ph2">`CObject`</ph> calls the protected <bpt id="p1">**</bpt>WriteObject<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>This function, in turn, calls the <ph id="ph1">`Serialize`</ph> function of the class.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CStringT<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> insertion operator (&lt;&lt;) supports diagnostic dumping and storing to an archive.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>This example demonstrates the use of the <ph id="ph1">`CArchive`</ph> insertion operator &lt;&lt; with the <ph id="ph2">`int`</ph> and <ph id="ph3">`long`</ph> types.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#31</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>This example 2 demonstrates the use of the <ph id="ph1">`CArchive`</ph> insertion operator &lt;&lt; with the <ph id="ph2">`CStringT`</ph> type.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#32</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>CArchive::operator</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Loads the indicated object or primitive type from the archive.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CArchive`</ph> reference that enables multiple extraction operators on a single line.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The last two versions above are specifically for loading 64-bit integers.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>If you used the <ph id="ph1">`IMPLEMENT_SERIAL`</ph> macro in your class implementation, then the extraction operators overloaded for <ph id="ph2">`CObject`</ph> call the protected <bpt id="p1">**</bpt>ReadObject<ept id="p1">**</ept> function (with a nonzero run-time class pointer).</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>This function, in turn, calls the <ph id="ph1">`Serialize`</ph> function of the class.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CStringT<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> extraction operator (&gt;&gt;) supports loading from an archive.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>This example demonstrates the use of the <ph id="ph1">`CArchive`</ph> extraction operator &gt;&gt; with the <ph id="ph2">`int`</ph> type.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#33</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>This example demonstrates the use of the <ph id="ph1">`CArchive`</ph> insertion and extraction operators &lt;<ph id="ph2">\&lt;</ph> and &gt;&gt; with the <ph id="ph3">`CStringT`</ph> type.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#34</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>CArchive::Read</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Reads a specified number of bytes from the archive.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>A pointer to a user-supplied buffer that is to receive the data read from the archive.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>An unsigned integer specifying the number of bytes to be read from the archive.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>An unsigned integer containing the number of bytes actually read.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>If the return value is less than the number requested, the end of file has been reached.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>No exception is thrown on the end-of-file condition.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>The archive does not interpret the bytes.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">**</bpt>Read<ept id="p1">**</ept> member function within your <ph id="ph1">`Serialize`</ph> function for reading ordinary structures that are contained in your objects.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#24</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>CArchive::ReadClass</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Call this member function to read a reference to a class previously stored with <bpt id="p1">[</bpt>WriteClass<ept id="p1">](#carchive__writeclass)</ept>.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>A pointer to the <bpt id="p1">[</bpt>CRuntimeClass<ept id="p1">](../../mfc/reference/cruntimeclass-structure.md)</ept> structure that corresponds to the class reference requested.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>A pointer to a schema of the run-time class previously stored.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>A number that refers to an object's unique tag.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Used internally by the implementation of <bpt id="p1">[</bpt>ReadObject<ept id="p1">](#carchive__readobject)</ept>.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Exposed for advanced programming only; <ph id="ph1">`pObTag`</ph> normally should be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>A pointer to the <bpt id="p1">[</bpt>CRuntimeClass<ept id="p1">](../../mfc/reference/cruntimeclass-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`pClassRefRequested`</ph> is not <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, <ph id="ph2">`ReadClass`</ph> verifies that the archived class information is compatible with your runtime class.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>If it is not compatible, <ph id="ph1">`ReadClass`</ph> will throw a <bpt id="p1">[</bpt>CArchiveException<ept id="p1">](../../mfc/reference/carchiveexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Your runtime class must use <bpt id="p1">[</bpt>DECLARE_SERIAL<ept id="p1">](../../mfc/reference/run-time-object-model-services.md#declare_serial)</ept> and <bpt id="p2">[</bpt>IMPLEMENT_SERIAL<ept id="p2">](../../mfc/reference/run-time-object-model-services.md#implement_serial)</ept>; otherwise, <ph id="ph1">`ReadClass`</ph> will throw a <bpt id="p3">[</bpt>CNotSupportedException<ept id="p3">](../../mfc/reference/cnotsupportedexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`pSchema`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the schema of the stored class can be retrieved by calling <bpt id="p2">[</bpt>CArchive::GetObjectSchema<ept id="p2">](#carchive__getobjectschema)</ept>; otherwise, <bpt id="p3">**</bpt><ph id="ph2">\*</ph><ept id="p3">**</ept><ph id="ph3">`pSchema`</ph> will contain the schema of the run-time class that was previously stored.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">[</bpt>SerializeClass<ept id="p1">](#carchive__serializeclass)</ept> instead of <ph id="ph1">`ReadClass`</ph>, which handles both reading and writing of the class reference.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CArchive::WriteClass<ept id="p1">](#carchive__writeclass)</ept>.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>CArchive::ReadObject</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Reads object data from the archive and constructs an object of the appropriate type.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>A constant pointer to the <bpt id="p1">[</bpt>CRuntimeClass<ept id="p1">](../../mfc/reference/cruntimeclass-structure.md)</ept> structure that corresponds to the object you expect to read.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CObject<ept id="p1">](../../mfc/reference/cobject-class.md)</ept> pointer that must be safely cast to the correct derived class by using <bpt id="p2">[</bpt>CObject::IsKindOf<ept id="p2">](../../mfc/reference/cobject-class.md#cobject__iskindof)</ept>.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>This function is normally called by the <ph id="ph1">`CArchive`</ph> extraction ( <bpt id="p1">**</bpt><ph id="ph2">&gt;&gt;</ph><ept id="p1">**</ept>) operator overloaded for a <bpt id="p2">[</bpt>CObject<ept id="p2">](../../mfc/reference/cobject-class.md)</ept> pointer.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ReadObject<ept id="p1">**</ept>, in turn, calls the <ph id="ph1">`Serialize`</ph> function of the archived class.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>If you supply a nonzero <ph id="ph1">`pClass`</ph> parameter, which is obtained by the <bpt id="p1">[</bpt>RUNTIME_CLASS<ept id="p1">](../../mfc/reference/run-time-object-model-services.md#runtime_class)</ept> macro, then the function verifies the run-time class of the archived object.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>This assumes you have used the <ph id="ph1">`IMPLEMENT_SERIAL`</ph> macro in the implementation of the class.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CArchive::WriteObject<ept id="p1">](#carchive__writeobject)</ept>.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>CArchive::ReadString</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Call this member function to read text data into a buffer from the file associated with the <ph id="ph1">`CArchive`</ph> object.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> that will contain the resultant string after it is read from the file associated with the CArchive object.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Specifies a pointer to a user-supplied buffer that will receive a null-terminated text string.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Specifies the maximum number of characters to read.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Should be one less than the size of the <bpt id="p1">*</bpt>lpsz<ept id="p1">*</ept> buffer.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>In the version that returns <bpt id="p1">**</bpt>BOOL<ept id="p1">**</ept>, <bpt id="p2">**</bpt>TRUE<ept id="p2">**</ept> if successful; <bpt id="p3">**</bpt>FALSE<ept id="p3">**</ept> otherwise.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>In the version that returns an <ph id="ph1">`LPTSTR`</ph>, a pointer to the buffer containing the text data; <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if end-of-file was reached.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>In the version of the member function with the <ph id="ph1">`nMax`</ph> parameter, the buffer will hold up to a limit of <ph id="ph2">`nMax`</ph> - 1 characters.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Reading is stopped by a carriage return-linefeed pair.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Trailing newline characters are always removed.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>A null character ('\0') is appended in either case.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CArchive::Read<ept id="p1">](#carchive__read)</ept> is also available for text-mode input, but it does not terminate on a carriage return-linefeed pair.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CArchive::WriteString<ept id="p1">](#carchive__writestring)</ept>.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>CArchive::SerializeClass</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Call this member function when you want to store and load the version information of a base class.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>A pointer to a run-time class object for the base class.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>reads or writes the reference to a class to the <ph id="ph1">`CArchive`</ph> object, depending on the direction of the <ph id="ph2">`CArchive`</ph>.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`SerializeClass`</ph> in place of <bpt id="p1">[</bpt>ReadClass<ept id="p1">](#carchive__readclass)</ept> and <bpt id="p2">[</bpt>WriteClass<ept id="p2">](#carchive__writeclass)</ept> as a convenient way to serialize base-class objects; <ph id="ph2">`SerializeClass`</ph> requires less code and fewer parameters.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Like <ph id="ph1">`ReadClass`</ph>, <ph id="ph2">`SerializeClass`</ph> verifies that the archived class information is compatible with your runtime class.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>If it is not compatible, <ph id="ph1">`SerializeClass`</ph> will throw a <bpt id="p1">[</bpt>CArchiveException<ept id="p1">](../../mfc/reference/carchiveexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Your runtime class must use <bpt id="p1">[</bpt>DECLARE_SERIAL<ept id="p1">](../../mfc/reference/run-time-object-model-services.md#declare_serial)</ept> and <bpt id="p2">[</bpt>IMPLEMENT_SERIAL<ept id="p2">](../../mfc/reference/run-time-object-model-services.md#implement_serial)</ept>; otherwise, <ph id="ph1">`SerializeClass`</ph> will throw a <bpt id="p3">[</bpt>CNotSupportedException<ept id="p3">](../../mfc/reference/cnotsupportedexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>RUNTIME_CLASS<ept id="p1">](../../mfc/reference/run-time-object-model-services.md#runtime_class)</ept> macro to retrieve the value for the <ph id="ph1">`pRuntimeClass`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>The base class must have used the <bpt id="p1">[</bpt>IMPLEMENT_SERIAL<ept id="p1">](../../mfc/reference/run-time-object-model-services.md#implement_serial)</ept> macro.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#25</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>CArchive::SetLoadParams</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`SetLoadParams`</ph> when you are going to read a large number of <ph id="ph2">`CObject`</ph>-derived objects from an archive.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>The minimum number of element slots to allocate if a size increase is necessary.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>uses a load array to resolve references to objects stored in the archive.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>allows you to set the size to which the load array grows.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>You must not call <ph id="ph1">`SetLoadParams`</ph> after any object is loaded, or after <bpt id="p1">[</bpt>MapObject<ept id="p1">](#carchive__mapobject)</ept> or <bpt id="p2">[</bpt>ReadObject<ept id="p2">](#carchive__readobject)</ept> is called.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#26</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>CArchive::SetObjectSchema</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Call this member function to set the object schema stored in the archive object to <ph id="ph1">`nSchema`</ph>.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Specifies the object's schema.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>The next call to <bpt id="p1">[</bpt>GetObjectSchema<ept id="p1">](#carchive__getobjectschema)</ept> will return the value stored in <ph id="ph1">`nSchema`</ph>.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`SetObjectSchema`</ph> for advanced versioning; for example, when you want to force a particular version to be read in a <ph id="ph2">`Serialize`</ph> function of a derived class.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#27</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>CArchive::SetStoreParams</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`SetStoreParams`</ph> when storing a large number of <ph id="ph2">`CObject`</ph>-derived objects in an archive.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>nHashSize</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>The size of the hash table for interface pointer maps.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Should be a prime number.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Specifies the memory-allocation granularity for extending the parameters.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Should be a power of 2 for the best performance.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>allows you to set the hash table size and the block size of the map used to identify unique objects during the serialization process.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>You must not call <ph id="ph1">`SetStoreParams`</ph> after any objects are stored, or after <bpt id="p1">[</bpt>MapObject<ept id="p1">](#carchive__mapobject)</ept> or <bpt id="p2">[</bpt>WriteObject<ept id="p2">](#carchive__writeobject)</ept> is called.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#26</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>CArchive::Write</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Writes a specified number of bytes to the archive.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>A pointer to a user-supplied buffer that contains the data to be written to the archive.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>An integer that specifies the number of bytes to be written to the archive.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>The archive does not format the bytes.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">**</bpt>Write<ept id="p1">**</ept> member function within your <ph id="ph1">`Serialize`</ph> function to write ordinary structures that are contained in your objects.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#23</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>CArchive::WriteClass</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`WriteClass`</ph> to store the version and class information of a base class during serialization of the derived class.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>A pointer to the <bpt id="p1">[</bpt>CRuntimeClass<ept id="p1">](../../mfc/reference/cruntimeclass-structure.md)</ept> structure that corresponds to the class reference requested.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>writes a reference to the <bpt id="p1">[</bpt>CRuntimeClass<ept id="p1">](../../mfc/reference/cruntimeclass-structure.md)</ept> for the base class to the <ph id="ph1">`CArchive`</ph>.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>CArchive::ReadClass<ept id="p1">](#carchive__readclass)</ept> to retrieve the reference.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>verifies that the archived class information is compatible with your runtime class.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>If it is not compatible, <ph id="ph1">`WriteClass`</ph> will throw a <bpt id="p1">[</bpt>CArchiveException<ept id="p1">](../../mfc/reference/carchiveexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Your runtime class must use <bpt id="p1">[</bpt>DECLARE_SERIAL<ept id="p1">](../../mfc/reference/run-time-object-model-services.md#declare_serial)</ept> and <bpt id="p2">[</bpt>IMPLEMENT_SERIAL<ept id="p2">](../../mfc/reference/run-time-object-model-services.md#implement_serial)</ept>; otherwise, <ph id="ph1">`WriteClass`</ph> will throw a <bpt id="p3">[</bpt>CNotSupportedException<ept id="p3">](../../mfc/reference/cnotsupportedexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">[</bpt>SerializeClass<ept id="p1">](#carchive__serializeclass)</ept> instead of <ph id="ph1">`WriteClass`</ph>, which handles both reading and writing of the class reference.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#28</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>CArchive::WriteObject</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Stores the specified <ph id="ph1">`CObject`</ph> to the archive.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>A constant pointer to the object being stored.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>This function is normally called by the <ph id="ph1">`CArchive`</ph> insertion ( <bpt id="p1">**</bpt><ph id="ph2">&lt;&lt;</ph><ept id="p1">**</ept>) operator overloaded for <ph id="ph3">`CObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WriteObject<ept id="p1">**</ept>, in turn, calls the <ph id="ph1">`Serialize`</ph> function of the archived class.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>You must use the <ph id="ph1">`IMPLEMENT_SERIAL`</ph> macro to enable archiving.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WriteObject<ept id="p1">**</ept> writes the ASCII class name to the archive.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>This class name is validated later during the load process.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>A special encoding scheme prevents unnecessary duplication of the class name for multiple objects of the class.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>This scheme also prevents redundant storage of objects that are targets of more than one pointer.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>The exact object encoding method (including the presence of the ASCII class name) is an implementation detail and could change in future versions of the library.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>Finish creating, deleting, and updating all your objects before you begin to archive them.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Your archive will be corrupted if you mix archiving with object modification.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>For a definition of the class <ph id="ph1">`CAge`</ph>, see the example for <bpt id="p1">[</bpt>CObList::CObList<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept>.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#29</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>CArchive::WriteString</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Use this member function to write data from a buffer to the file associated with the <ph id="ph1">`CArchive`</ph> object.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Specifies a pointer to a buffer containing a null-terminated text string.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>The terminating null character ('\0') is not written to the file; nor is a newline automatically written.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>throws an exception in response to several conditions, including the disk-full condition.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Write<ept id="p1">**</ept> is also available, but rather than terminating on a null character, it writes the requested number of bytes to the file.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#30</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>CFile Class</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>CObject Class</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>CSocket Class</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>CSocketFile Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>