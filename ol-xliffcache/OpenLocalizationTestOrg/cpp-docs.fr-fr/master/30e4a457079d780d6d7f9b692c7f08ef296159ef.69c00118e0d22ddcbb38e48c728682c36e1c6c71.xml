{"nodes":[{"pos":[12,49],"content":"CAnimationRect Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CAnimationRect Class | Microsoft Docs","pos":[0,37]}]},{"pos":[660,680],"content":"CAnimationRect Class","linkify":"CAnimationRect Class","nodes":[{"content":"CAnimationRect Class","pos":[0,20]}]},{"content":"Implements the functionality of a rectangle whose sides can be animated.","pos":[681,753]},{"pos":[762,768],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[846,853],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[863,882],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[889,893]},{"content":"Description","pos":[894,905]},{"pos":[943,1008],"content":"<bpt id=\"p1\">[</bpt>CAnimationRect::CAnimationRect<ept id=\"p1\">](#canimationrect__canimationrect)</ept>","source":"[CAnimationRect::CAnimationRect](#canimationrect__canimationrect)"},{"content":"Overloaded.","pos":[1009,1020]},{"content":"Constructs an animation rect object.","pos":[1021,1057]},{"pos":[1068,1082],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1089,1093]},{"content":"Description","pos":[1094,1105]},{"pos":[1143,1206],"content":"<bpt id=\"p1\">[</bpt>CAnimationRect::AddTransition<ept id=\"p1\">](#canimationrect__addtransition)</ept>","source":"[CAnimationRect::AddTransition](#canimationrect__addtransition)"},{"content":"Adds transitions for left, top, right and bottom coordinates.","pos":[1207,1268]},{"pos":[1273,1328],"content":"<bpt id=\"p1\">[</bpt>CAnimationRect::GetBottom<ept id=\"p1\">](#canimationrect__getbottom)</ept>","source":"[CAnimationRect::GetBottom](#canimationrect__getbottom)"},{"content":"Provides access to CAnimationVariable representing bottom coordinate.","pos":[1329,1398]},{"pos":[1403,1470],"content":"<bpt id=\"p1\">[</bpt>CAnimationRect::GetDefaultValue<ept id=\"p1\">](#canimationrect__getdefaultvalue)</ept>","source":"[CAnimationRect::GetDefaultValue](#canimationrect__getdefaultvalue)"},{"content":"Returns the default values for rectangle's bounds.","pos":[1471,1521]},{"pos":[1526,1577],"content":"<bpt id=\"p1\">[</bpt>CAnimationRect::GetLeft<ept id=\"p1\">](#canimationrect__getleft)</ept>","source":"[CAnimationRect::GetLeft](#canimationrect__getleft)"},{"content":"Provides access to CAnimationVariable representing left coordinate.","pos":[1578,1645]},{"pos":[1650,1703],"content":"<bpt id=\"p1\">[</bpt>CAnimationRect::GetRight<ept id=\"p1\">](#canimationrect__getright)</ept>","source":"[CAnimationRect::GetRight](#canimationrect__getright)"},{"content":"Provides access to CAnimationVariable representing right coordinate.","pos":[1704,1772]},{"pos":[1777,1826],"content":"<bpt id=\"p1\">[</bpt>CAnimationRect::GetTop<ept id=\"p1\">](#canimationrect__gettop)</ept>","source":"[CAnimationRect::GetTop](#canimationrect__gettop)"},{"content":"Provides access to CAnimationVariable representing top coordinate.","pos":[1827,1893]},{"pos":[1898,1951],"content":"<bpt id=\"p1\">[</bpt>CAnimationRect::GetValue<ept id=\"p1\">](#canimationrect__getvalue)</ept>","source":"[CAnimationRect::GetValue](#canimationrect__getvalue)"},{"content":"Returns current value.","pos":[1952,1974]},{"pos":[1979,2046],"content":"<bpt id=\"p1\">[</bpt>CAnimationRect::SetDefaultValue<ept id=\"p1\">](#canimationrect__setdefaultvalue)</ept>","source":"[CAnimationRect::SetDefaultValue](#canimationrect__setdefaultvalue)"},{"content":"Sets default value.","pos":[2047,2066]},{"pos":[2077,2094],"content":"Protected Methods","linkify":"Protected Methods","nodes":[{"content":"Protected Methods","pos":[0,17]}]},{"content":"Name","pos":[2101,2105]},{"content":"Description","pos":[2106,2117]},{"pos":[2155,2240],"content":"<bpt id=\"p1\">[</bpt>CAnimationRect::GetAnimationVariableList<ept id=\"p1\">](#canimationrect__getanimationvariablelist)</ept>","source":"[CAnimationRect::GetAnimationVariableList](#canimationrect__getanimationvariablelist)"},{"content":"Puts the encapsulated animation variables into a list.","pos":[2241,2295]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CAnimationBaseObject::GetAnimationVariableList<ept id=\"p1\">](../../mfc/reference/canimationbaseobject-class.md#canimationbaseobject__getanimationvariablelist)</ept>.)","pos":[2296,2455],"source":" (Overrides [CAnimationBaseObject::GetAnimationVariableList](../../mfc/reference/canimationbaseobject-class.md#canimationbaseobject__getanimationvariablelist).)"},{"pos":[2466,2482],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[2489,2493]},{"content":"Description","pos":[2494,2505]},{"pos":[2543,2606],"content":"<bpt id=\"p1\">[</bpt>CAnimationRect::operator RECT<ept id=\"p1\">](#canimationrect__operator_rect)</ept>","source":"[CAnimationRect::operator RECT](#canimationrect__operator_rect)"},{"content":"Converts a CAnimationRect to RECT.","pos":[2607,2641]},{"pos":[2646,2703],"content":"<bpt id=\"p1\">[</bpt>CAnimationRect::operator=<ept id=\"p1\">](#canimationrect__operator_eq)</ept>","source":"[CAnimationRect::operator=](#canimationrect__operator_eq)"},{"content":"Assigns rect to CAnimationRect.","pos":[2704,2735]},{"pos":[2746,2765],"content":"Public Data Members","linkify":"Public Data Members","nodes":[{"content":"Public Data Members","pos":[0,19]}]},{"content":"Name","pos":[2772,2776]},{"content":"Description","pos":[2777,2788]},{"pos":[2826,2887],"content":"<bpt id=\"p1\">[</bpt>CAnimationRect::m_bFixedSize<ept id=\"p1\">](#canimationrect__m_bfixedsize)</ept>","source":"[CAnimationRect::m_bFixedSize](#canimationrect__m_bfixedsize)"},{"content":"Specifies whether the rectangle has fixed size.","pos":[2888,2935]},{"pos":[2946,2968],"content":"Protected Data Members","linkify":"Protected Data Members","nodes":[{"content":"Protected Data Members","pos":[0,22]}]},{"content":"Name","pos":[2975,2979]},{"content":"Description","pos":[2980,2991]},{"pos":[3029,3092],"content":"<bpt id=\"p1\">[</bpt>CAnimationRect::m_bottomValue<ept id=\"p1\">](#canimationrect__m_bottomvalue)</ept>","source":"[CAnimationRect::m_bottomValue](#canimationrect__m_bottomvalue)"},{"content":"The encapsulated animation variable that represents Bottom bound of animation rectangle.","pos":[3093,3181]},{"pos":[3186,3245],"content":"<bpt id=\"p1\">[</bpt>CAnimationRect::m_leftValue<ept id=\"p1\">](#canimationrect__m_leftvalue)</ept>","source":"[CAnimationRect::m_leftValue](#canimationrect__m_leftvalue)"},{"content":"The encapsulated animation variable that represents Left bound of animation rectangle.","pos":[3246,3332]},{"pos":[3337,3398],"content":"<bpt id=\"p1\">[</bpt>CAnimationRect::m_rightValue<ept id=\"p1\">](#canimationrect__m_rightvalue)</ept>","source":"[CAnimationRect::m_rightValue](#canimationrect__m_rightvalue)"},{"content":"The encapsulated animation variable that represents Right bound of animation rectangle.","pos":[3399,3486]},{"pos":[3491,3550],"content":"<bpt id=\"p1\">[</bpt>CAnimationRect::m_szInitial<ept id=\"p1\">](#canimationrect__m_szinitial)</ept>","source":"[CAnimationRect::m_szInitial](#canimationrect__m_szinitial)"},{"content":"Specifies initial size of animation rectangle.","pos":[3551,3597]},{"pos":[3602,3659],"content":"<bpt id=\"p1\">[</bpt>CAnimationRect::m_topValue<ept id=\"p1\">](#canimationrect__m_topvalue)</ept>","source":"[CAnimationRect::m_topValue](#canimationrect__m_topvalue)"},{"content":"The encapsulated animation variable that represents Top bound of animation rectangle.","pos":[3660,3745]},{"pos":[3755,3762],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The CAnimationRect class encapsulates four CAnimationVariable objects and can represent in applications a rectangle.","pos":[3766,3882]},{"content":"To use this class in application, just instantiate an object of this class, add it to animation controller using CAnimationController::AddAnimationObject and call AddTransition for each transition to be applied to left, right top and bottom coordinates.","pos":[3883,4136]},{"pos":[4145,4166],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[4170,4217],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[4224,4297],"content":"<bpt id=\"p1\">[</bpt>CAnimationBaseObject<ept id=\"p1\">](../../mfc/reference/canimationbaseobject-class.md)</ept>","source":"[CAnimationBaseObject](../../mfc/reference/canimationbaseobject-class.md)"},{"pos":[4304,4365],"content":"<bpt id=\"p1\">[</bpt>CAnimationRect<ept id=\"p1\">](../../mfc/reference/canimationrect-class.md)</ept>","source":"[CAnimationRect](../../mfc/reference/canimationrect-class.md)"},{"pos":[4374,4386],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4390,4426],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxanimationcontroller.h","source":"**Header:** afxanimationcontroller.h"},{"pos":[4436,4511],"content":"<bpt id=\"p1\">&lt;a name=\"canimationrect__addtransition\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAnimationRect::AddTransition","linkify":"<a name=\"canimationrect__addtransition\"></a>  CAnimationRect::AddTransition","source":"<a name=\"canimationrect__addtransition\"></a>  CAnimationRect::AddTransition"},{"content":"Adds transitions for left, top, right and bottom coordinates.","pos":[4515,4576]},{"pos":[4782,4792],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies transition for the left side.","pos":[4817,4856]},{"content":"Specifies transition for the top side.","pos":[4883,4921]},{"content":"Specifies transition for the right side.","pos":[4950,4990]},{"content":"Specifies transition for the bottom side.","pos":[5020,5061]},{"pos":[5071,5078],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this function to add the specified transitions to the internal list of transitions to be applied to animation variables for each rectangle sides.","pos":[5082,5232]},{"content":"When you add transitions, they are not applied immediately and stored in an internal list.","pos":[5233,5323]},{"content":"Transitions are applied (added to a storyboard for a particular value) when you call CAnimationController::AnimateGroup.","pos":[5324,5444]},{"content":"If you don't need to apply a transition to one of the rectangle sides, you can pass NULL.","pos":[5445,5534]},{"pos":[5544,5621],"content":"<bpt id=\"p1\">&lt;a name=\"canimationrect__canimationrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAnimationRect::CAnimationRect","linkify":"<a name=\"canimationrect__canimationrect\"></a>  CAnimationRect::CAnimationRect","source":"<a name=\"canimationrect__canimationrect\"></a>  CAnimationRect::CAnimationRect"},{"content":"Constructs a CAnimationRect object.","pos":[5625,5660]},{"pos":[6163,6173],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies default rectangle.","pos":[6187,6215]},{"content":"Specifies Group ID.","pos":[6236,6255]},{"content":"Specifies Object ID.","pos":[6277,6297]},{"content":"Specifies user-defined data.","pos":[6320,6348]},{"content":"Coordinate of top-left corner.","pos":[6363,6393]},{"content":"Size of rectangle.","pos":[6408,6426]},{"content":"Specifies coordinate of left bound.","pos":[6444,6479]},{"content":"Specifies coordinate of top bound.","pos":[6496,6530]},{"content":"Specifies coordinate of right bound.","pos":[6549,6585]},{"content":"Specifies coordinate of bottom bound.","pos":[6605,6642]},{"pos":[6652,6659],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The object is constructed with default values for left, top, right and bottom, Object ID and Group ID, which will be set to 0.","pos":[6663,6789]},{"content":"They can be changed later at runtime using SetDefaultValue and SetID.","pos":[6790,6859]},{"pos":[6869,6966],"content":"<bpt id=\"p1\">&lt;a name=\"canimationrect__getanimationvariablelist\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAnimationRect::GetAnimationVariableList","linkify":"<a name=\"canimationrect__getanimationvariablelist\"></a>  CAnimationRect::GetAnimationVariableList","source":"<a name=\"canimationrect__getanimationvariablelist\"></a>  CAnimationRect::GetAnimationVariableList"},{"content":"Puts the encapsulated animation variables into a list.","pos":[6970,7024]},{"pos":[7152,7162],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"When the function returns, it contains pointers to four CAnimationVariable objects representing coordinates of rectangle.","pos":[7175,7296]},{"pos":[7306,7373],"content":"<bpt id=\"p1\">&lt;a name=\"canimationrect__getbottom\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAnimationRect::GetBottom","linkify":"<a name=\"canimationrect__getbottom\"></a>  CAnimationRect::GetBottom","source":"<a name=\"canimationrect__getbottom\"></a>  CAnimationRect::GetBottom"},{"content":"Provides access to CAnimationVariable representing bottom coordinate.","pos":[7377,7446]},{"pos":[7504,7516],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reference to encapsulated CAnimationVariable representing bottom coordinate.","pos":[7520,7598]},{"pos":[7608,7615],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can call this method to get direct access to underlying CAnimationVariable representing the bottom coordinate.","pos":[7619,7733]},{"pos":[7743,7822],"content":"<bpt id=\"p1\">&lt;a name=\"canimationrect__getdefaultvalue\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAnimationRect::GetDefaultValue","linkify":"<a name=\"canimationrect__getdefaultvalue\"></a>  CAnimationRect::GetDefaultValue","source":"<a name=\"canimationrect__getdefaultvalue\"></a>  CAnimationRect::GetDefaultValue"},{"content":"Returns the default values for rectangle's bounds.","pos":[7826,7876]},{"pos":[7926,7938],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A CRect value containing defaults for left, right, top and bottom.","pos":[7942,8008]},{"pos":[8018,8025],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this function to retrieve default value, which was previously set by constructor or SetDefaultValue.","pos":[8029,8134]},{"pos":[8144,8207],"content":"<bpt id=\"p1\">&lt;a name=\"canimationrect__getleft\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAnimationRect::GetLeft","linkify":"<a name=\"canimationrect__getleft\"></a>  CAnimationRect::GetLeft","source":"<a name=\"canimationrect__getleft\"></a>  CAnimationRect::GetLeft"},{"content":"Provides access to CAnimationVariable representing left coordinate.","pos":[8211,8278]},{"pos":[8334,8346],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reference to encapsulated CAnimationVariable representing left coordinate.","pos":[8350,8426]},{"pos":[8436,8443],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can call this method to get direct access to underlying CAnimationVariable representing the left coordinate.","pos":[8447,8559]},{"pos":[8569,8634],"content":"<bpt id=\"p1\">&lt;a name=\"canimationrect__getright\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAnimationRect::GetRight","linkify":"<a name=\"canimationrect__getright\"></a>  CAnimationRect::GetRight","source":"<a name=\"canimationrect__getright\"></a>  CAnimationRect::GetRight"},{"content":"Provides access to CAnimationVariable representing right coordinate.","pos":[8638,8706]},{"pos":[8763,8775],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reference to encapsulated CAnimationVariable representing right coordinate.","pos":[8779,8856]},{"pos":[8866,8873],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can call this method to get direct access to underlying CAnimationVariable representing the right coordinate.","pos":[8877,8990]},{"pos":[9000,9061],"content":"<bpt id=\"p1\">&lt;a name=\"canimationrect__gettop\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAnimationRect::GetTop","linkify":"<a name=\"canimationrect__gettop\"></a>  CAnimationRect::GetTop","source":"<a name=\"canimationrect__gettop\"></a>  CAnimationRect::GetTop"},{"content":"Provides access to CAnimationVariable representing top coordinate.","pos":[9065,9131]},{"pos":[9186,9198],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reference to encapsulated CAnimationVariable representing top coordinate.","pos":[9202,9277]},{"pos":[9287,9294],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can call this method to get direct access to underlying CAnimationVariable representing the top coordinate.","pos":[9298,9409]},{"pos":[9419,9484],"content":"<bpt id=\"p1\">&lt;a name=\"canimationrect__getvalue\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAnimationRect::GetValue","linkify":"<a name=\"canimationrect__getvalue\"></a>  CAnimationRect::GetValue","source":"<a name=\"canimationrect__getvalue\"></a>  CAnimationRect::GetValue"},{"content":"Returns current value.","pos":[9488,9510]},{"pos":[9563,9573],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Output.","pos":[9587,9594]},{"content":"Contains the current value when this method returns.","pos":[9595,9647]},{"pos":[9657,9669],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"TRUE, if the current value was successfully retrieved; otherwise FALSE.","pos":[9673,9744]},{"pos":[9754,9761],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this function to retrieve the current value of animation rectangle.","pos":[9765,9837]},{"content":"If this method fails or underlying COM objects for left, top, right and bottom have not been initialized, rect contains default value, which was previously set in constructor or by SetDefaultValue.","pos":[9838,10035]},{"pos":[10045,10118],"content":"<bpt id=\"p1\">&lt;a name=\"canimationrect__m_bfixedsize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAnimationRect::m_bFixedSize","linkify":"<a name=\"canimationrect__m_bfixedsize\"></a>  CAnimationRect::m_bFixedSize","source":"<a name=\"canimationrect__m_bfixedsize\"></a>  CAnimationRect::m_bFixedSize"},{"content":"Specifies whether the rectangle has fixed size.","pos":[10122,10169]},{"pos":[10215,10222],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If this member is true, then the size of rectangle is fixed and right and bottom values are recalculated each time the top-left corner is moved according to the fixed size.","pos":[10226,10398]},{"content":"Set this value to TRUE to easily move the rectangle around the screen.","pos":[10399,10469]},{"content":"In this case transitions applied to right and bottom coordinates are ignored.","pos":[10470,10547]},{"content":"The size is stored internally when you construct the object and/or call SetDefaultValue.","pos":[10548,10636]},{"content":"By default this member is set to FALSE.","pos":[10637,10676]},{"pos":[10686,10761],"content":"<bpt id=\"p1\">&lt;a name=\"canimationrect__m_bottomvalue\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAnimationRect::m_bottomValue","linkify":"<a name=\"canimationrect__m_bottomvalue\"></a>  CAnimationRect::m_bottomValue","source":"<a name=\"canimationrect__m_bottomvalue\"></a>  CAnimationRect::m_bottomValue"},{"content":"The encapsulated animation variable that represents Bottom bound of animation rectangle.","pos":[10765,10853]},{"pos":[10914,10985],"content":"<bpt id=\"p1\">&lt;a name=\"canimationrect__m_leftvalue\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAnimationRect::m_leftValue","linkify":"<a name=\"canimationrect__m_leftvalue\"></a>  CAnimationRect::m_leftValue","source":"<a name=\"canimationrect__m_leftvalue\"></a>  CAnimationRect::m_leftValue"},{"content":"The encapsulated animation variable that represents Left bound of animation rectangle.","pos":[10989,11075]},{"pos":[11134,11207],"content":"<bpt id=\"p1\">&lt;a name=\"canimationrect__m_rightvalue\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAnimationRect::m_rightValue","linkify":"<a name=\"canimationrect__m_rightvalue\"></a>  CAnimationRect::m_rightValue","source":"<a name=\"canimationrect__m_rightvalue\"></a>  CAnimationRect::m_rightValue"},{"content":"The encapsulated animation variable that represents Right bound of animation rectangle.","pos":[11211,11298]},{"pos":[11358,11429],"content":"<bpt id=\"p1\">&lt;a name=\"canimationrect__m_szinitial\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAnimationRect::m_szInitial","linkify":"<a name=\"canimationrect__m_szinitial\"></a>  CAnimationRect::m_szInitial","source":"<a name=\"canimationrect__m_szinitial\"></a>  CAnimationRect::m_szInitial"},{"content":"Specifies initial size of animation rectangle.","pos":[11433,11479]},{"pos":[11525,11594],"content":"<bpt id=\"p1\">&lt;a name=\"canimationrect__m_topvalue\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAnimationRect::m_topValue","linkify":"<a name=\"canimationrect__m_topvalue\"></a>  CAnimationRect::m_topValue","source":"<a name=\"canimationrect__m_topvalue\"></a>  CAnimationRect::m_topValue"},{"content":"The encapsulated animation variable that represents Top bound of animation rectangle.","pos":[11598,11683]},{"pos":[11741,11816],"content":"<bpt id=\"p1\">&lt;a name=\"canimationrect__operator_rect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAnimationRect::operator RECT","linkify":"<a name=\"canimationrect__operator_rect\"></a>  CAnimationRect::operator RECT","source":"<a name=\"canimationrect__operator_rect\"></a>  CAnimationRect::operator RECT"},{"content":"Converts a CAnimationRect to RECT.","pos":[11820,11854]},{"pos":[11897,11909],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Current value of animation rectangle as RECT.","pos":[11913,11958]},{"pos":[11968,11975],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function internally calls GetValue.","pos":[11979,12019]},{"content":"If GetValue for some reason fails, the returned RECT will contain default values for all rectangle coordinates.","pos":[12020,12131]},{"pos":[12141,12210],"content":"<bpt id=\"p1\">&lt;a name=\"canimationrect__operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAnimationRect::operator=","linkify":"<a name=\"canimationrect__operator_eq\"></a>  CAnimationRect::operator=","source":"<a name=\"canimationrect__operator_eq\"></a>  CAnimationRect::operator="},{"content":"Assigns rect to CAnimationRect.","pos":[12214,12245]},{"pos":[12304,12314],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The new value of animation rectangle.","pos":[12328,12365]},{"pos":[12375,12382],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"It's recommended to do that before animation start, because this operator calls SetDefaultValue, which recreates the underlying COM objects for color components if they have been created.","pos":[12386,12573]},{"content":"If you subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.","pos":[12574,12698]},{"pos":[12708,12787],"content":"<bpt id=\"p1\">&lt;a name=\"canimationrect__setdefaultvalue\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAnimationRect::SetDefaultValue","linkify":"<a name=\"canimationrect__setdefaultvalue\"></a>  CAnimationRect::SetDefaultValue","source":"<a name=\"canimationrect__setdefaultvalue\"></a>  CAnimationRect::SetDefaultValue"},{"content":"Sets default value.","pos":[12791,12810]},{"pos":[12876,12886],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies new default values for left, top, right and bottom.","pos":[12900,12961]},{"pos":[12971,12978],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use this function to set a default value to animation object.","pos":[12982,13043]},{"content":"This methods assigns default values to rectangle's bounds.","pos":[13044,13102]},{"content":"It also recreates underlying COM objects if they have been created.","pos":[13103,13170]},{"content":"If you subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.","pos":[13171,13295]},{"pos":[13304,13312],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[13316,13361],"content":"<bpt id=\"p1\">[</bpt>Classes<ept id=\"p1\">](../../mfc/reference/mfc-classes.md)</ept>","source":"[Classes](../../mfc/reference/mfc-classes.md)"}],"content":"---\ntitle: \"CAnimationRect Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CAnimationRect\"\n  - \"afxanimationcontroller/CAnimationRect\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CAnimationRect class\"\nms.assetid: 0294156d-241e-4a57-92b2-31234fe557d6\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CAnimationRect Class\nImplements the functionality of a rectangle whose sides can be animated.  \n  \n## Syntax  \n  \n```  \nclass CAnimationRect : public CAnimationBaseObject;  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAnimationRect::CAnimationRect](#canimationrect__canimationrect)|Overloaded. Constructs an animation rect object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAnimationRect::AddTransition](#canimationrect__addtransition)|Adds transitions for left, top, right and bottom coordinates.|  \n|[CAnimationRect::GetBottom](#canimationrect__getbottom)|Provides access to CAnimationVariable representing bottom coordinate.|  \n|[CAnimationRect::GetDefaultValue](#canimationrect__getdefaultvalue)|Returns the default values for rectangle's bounds.|  \n|[CAnimationRect::GetLeft](#canimationrect__getleft)|Provides access to CAnimationVariable representing left coordinate.|  \n|[CAnimationRect::GetRight](#canimationrect__getright)|Provides access to CAnimationVariable representing right coordinate.|  \n|[CAnimationRect::GetTop](#canimationrect__gettop)|Provides access to CAnimationVariable representing top coordinate.|  \n|[CAnimationRect::GetValue](#canimationrect__getvalue)|Returns current value.|  \n|[CAnimationRect::SetDefaultValue](#canimationrect__setdefaultvalue)|Sets default value.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAnimationRect::GetAnimationVariableList](#canimationrect__getanimationvariablelist)|Puts the encapsulated animation variables into a list. (Overrides [CAnimationBaseObject::GetAnimationVariableList](../../mfc/reference/canimationbaseobject-class.md#canimationbaseobject__getanimationvariablelist).)|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAnimationRect::operator RECT](#canimationrect__operator_rect)|Converts a CAnimationRect to RECT.|  \n|[CAnimationRect::operator=](#canimationrect__operator_eq)|Assigns rect to CAnimationRect.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAnimationRect::m_bFixedSize](#canimationrect__m_bfixedsize)|Specifies whether the rectangle has fixed size.|  \n  \n### Protected Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAnimationRect::m_bottomValue](#canimationrect__m_bottomvalue)|The encapsulated animation variable that represents Bottom bound of animation rectangle.|  \n|[CAnimationRect::m_leftValue](#canimationrect__m_leftvalue)|The encapsulated animation variable that represents Left bound of animation rectangle.|  \n|[CAnimationRect::m_rightValue](#canimationrect__m_rightvalue)|The encapsulated animation variable that represents Right bound of animation rectangle.|  \n|[CAnimationRect::m_szInitial](#canimationrect__m_szinitial)|Specifies initial size of animation rectangle.|  \n|[CAnimationRect::m_topValue](#canimationrect__m_topvalue)|The encapsulated animation variable that represents Top bound of animation rectangle.|  \n  \n## Remarks  \n The CAnimationRect class encapsulates four CAnimationVariable objects and can represent in applications a rectangle. To use this class in application, just instantiate an object of this class, add it to animation controller using CAnimationController::AddAnimationObject and call AddTransition for each transition to be applied to left, right top and bottom coordinates.  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CAnimationBaseObject](../../mfc/reference/canimationbaseobject-class.md)  \n  \n [CAnimationRect](../../mfc/reference/canimationrect-class.md)  \n  \n## Requirements  \n **Header:** afxanimationcontroller.h  \n  \n##  <a name=\"canimationrect__addtransition\"></a>  CAnimationRect::AddTransition  \n Adds transitions for left, top, right and bottom coordinates.  \n  \n```  \nvoid AddTransition(\n    CBaseTransition* pLeftTransition,  \n    CBaseTransition* pTopTransition,  \n    CBaseTransition* pRightTransition,  \n    CBaseTransition* pBottomTransition);\n```  \n  \n### Parameters  \n `pLeftTransition`  \n Specifies transition for the left side.  \n  \n `pTopTransition`  \n Specifies transition for the top side.  \n  \n `pRightTransition`  \n Specifies transition for the right side.  \n  \n `pBottomTransition`  \n Specifies transition for the bottom side.  \n  \n### Remarks  \n Call this function to add the specified transitions to the internal list of transitions to be applied to animation variables for each rectangle sides. When you add transitions, they are not applied immediately and stored in an internal list. Transitions are applied (added to a storyboard for a particular value) when you call CAnimationController::AnimateGroup. If you don't need to apply a transition to one of the rectangle sides, you can pass NULL.  \n  \n##  <a name=\"canimationrect__canimationrect\"></a>  CAnimationRect::CAnimationRect  \n Constructs a CAnimationRect object.  \n  \n```  \nCAnimationRect();\n\n \nCAnimationRect(\n    const CRect& rect,  \n    UINT32 nGroupID,  \n    UINT32 nObjectID = (UINT32)-1,  \n    DWORD dwUserData = 0);\n\n \nCAnimationRect(\n    const CPoint& pt,  \n    const CSize& sz,  \n    UINT32 nGroupID,  \n    UINT32 nObjectID = (UINT32)-1,  \n    DWORD dwUserData = 0);\n\n \nCAnimationRect(\n    int nLeft,  \n    int nTop,  \n    int nRight,  \n    int nBottom,  \n    UINT32 nGroupID,  \n    UINT32 nObjectID = (UINT32)-1,  \n    DWORD dwUserData = 0);\n```  \n  \n### Parameters  \n `rect`  \n Specifies default rectangle.  \n  \n `nGroupID`  \n Specifies Group ID.  \n  \n `nObjectID`  \n Specifies Object ID.  \n  \n `dwUserData`  \n Specifies user-defined data.  \n  \n `pt`  \n Coordinate of top-left corner.  \n  \n `sz`  \n Size of rectangle.  \n  \n `nLeft`  \n Specifies coordinate of left bound.  \n  \n `nTop`  \n Specifies coordinate of top bound.  \n  \n `nRight`  \n Specifies coordinate of right bound.  \n  \n `nBottom`  \n Specifies coordinate of bottom bound.  \n  \n### Remarks  \n The object is constructed with default values for left, top, right and bottom, Object ID and Group ID, which will be set to 0. They can be changed later at runtime using SetDefaultValue and SetID.  \n  \n##  <a name=\"canimationrect__getanimationvariablelist\"></a>  CAnimationRect::GetAnimationVariableList  \n Puts the encapsulated animation variables into a list.  \n  \n```  \nvirtual void GetAnimationVariableList(\n    CList<CAnimationVariable*, \n    CAnimationVariable*>& lst);\n```  \n  \n### Parameters  \n `lst`  \n When the function returns, it contains pointers to four CAnimationVariable objects representing coordinates of rectangle.  \n  \n##  <a name=\"canimationrect__getbottom\"></a>  CAnimationRect::GetBottom  \n Provides access to CAnimationVariable representing bottom coordinate.  \n  \n```  \nCAnimationVariable& GetBottom();\n```  \n  \n### Return Value  \n A reference to encapsulated CAnimationVariable representing bottom coordinate.  \n  \n### Remarks  \n You can call this method to get direct access to underlying CAnimationVariable representing the bottom coordinate.  \n  \n##  <a name=\"canimationrect__getdefaultvalue\"></a>  CAnimationRect::GetDefaultValue  \n Returns the default values for rectangle's bounds.  \n  \n```  \nCRect GetDefaultValue();\n```  \n  \n### Return Value  \n A CRect value containing defaults for left, right, top and bottom.  \n  \n### Remarks  \n Call this function to retrieve default value, which was previously set by constructor or SetDefaultValue.  \n  \n##  <a name=\"canimationrect__getleft\"></a>  CAnimationRect::GetLeft  \n Provides access to CAnimationVariable representing left coordinate.  \n  \n```  \nCAnimationVariable& GetLeft();\n```  \n  \n### Return Value  \n A reference to encapsulated CAnimationVariable representing left coordinate.  \n  \n### Remarks  \n You can call this method to get direct access to underlying CAnimationVariable representing the left coordinate.  \n  \n##  <a name=\"canimationrect__getright\"></a>  CAnimationRect::GetRight  \n Provides access to CAnimationVariable representing right coordinate.  \n  \n```  \nCAnimationVariable& GetRight();\n```  \n  \n### Return Value  \n A reference to encapsulated CAnimationVariable representing right coordinate.  \n  \n### Remarks  \n You can call this method to get direct access to underlying CAnimationVariable representing the right coordinate.  \n  \n##  <a name=\"canimationrect__gettop\"></a>  CAnimationRect::GetTop  \n Provides access to CAnimationVariable representing top coordinate.  \n  \n```  \nCAnimationVariable& GetTop();\n```  \n  \n### Return Value  \n A reference to encapsulated CAnimationVariable representing top coordinate.  \n  \n### Remarks  \n You can call this method to get direct access to underlying CAnimationVariable representing the top coordinate.  \n  \n##  <a name=\"canimationrect__getvalue\"></a>  CAnimationRect::GetValue  \n Returns current value.  \n  \n```  \nBOOL GetValue(CRect& rect);\n```  \n  \n### Parameters  \n `rect`  \n Output. Contains the current value when this method returns.  \n  \n### Return Value  \n TRUE, if the current value was successfully retrieved; otherwise FALSE.  \n  \n### Remarks  \n Call this function to retrieve the current value of animation rectangle. If this method fails or underlying COM objects for left, top, right and bottom have not been initialized, rect contains default value, which was previously set in constructor or by SetDefaultValue.  \n  \n##  <a name=\"canimationrect__m_bfixedsize\"></a>  CAnimationRect::m_bFixedSize  \n Specifies whether the rectangle has fixed size.  \n  \n```  \nBOOL m_bFixedSize;  \n```  \n  \n### Remarks  \n If this member is true, then the size of rectangle is fixed and right and bottom values are recalculated each time the top-left corner is moved according to the fixed size. Set this value to TRUE to easily move the rectangle around the screen. In this case transitions applied to right and bottom coordinates are ignored. The size is stored internally when you construct the object and/or call SetDefaultValue. By default this member is set to FALSE.  \n  \n##  <a name=\"canimationrect__m_bottomvalue\"></a>  CAnimationRect::m_bottomValue  \n The encapsulated animation variable that represents Bottom bound of animation rectangle.  \n  \n```  \nCAnimationVariable m_bottomValue;  \n```  \n  \n##  <a name=\"canimationrect__m_leftvalue\"></a>  CAnimationRect::m_leftValue  \n The encapsulated animation variable that represents Left bound of animation rectangle.  \n  \n```  \nCAnimationVariable m_leftValue;  \n```  \n  \n##  <a name=\"canimationrect__m_rightvalue\"></a>  CAnimationRect::m_rightValue  \n The encapsulated animation variable that represents Right bound of animation rectangle.  \n  \n```  \nCAnimationVariable m_rightValue;  \n```  \n  \n##  <a name=\"canimationrect__m_szinitial\"></a>  CAnimationRect::m_szInitial  \n Specifies initial size of animation rectangle.  \n  \n```  \nCSize m_szInitial;  \n```  \n  \n##  <a name=\"canimationrect__m_topvalue\"></a>  CAnimationRect::m_topValue  \n The encapsulated animation variable that represents Top bound of animation rectangle.  \n  \n```  \nCAnimationVariable m_topValue;  \n```  \n  \n##  <a name=\"canimationrect__operator_rect\"></a>  CAnimationRect::operator RECT  \n Converts a CAnimationRect to RECT.  \n  \n```  \noperator RECT();\n```   \n  \n### Return Value  \n Current value of animation rectangle as RECT.  \n  \n### Remarks  \n This function internally calls GetValue. If GetValue for some reason fails, the returned RECT will contain default values for all rectangle coordinates.  \n  \n##  <a name=\"canimationrect__operator_eq\"></a>  CAnimationRect::operator=  \n Assigns rect to CAnimationRect.  \n  \n```  \nvoid operator=(const RECT& rect);\n```  \n  \n### Parameters  \n `rect`  \n The new value of animation rectangle.  \n  \n### Remarks  \n It's recommended to do that before animation start, because this operator calls SetDefaultValue, which recreates the underlying COM objects for color components if they have been created. If you subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.  \n  \n##  <a name=\"canimationrect__setdefaultvalue\"></a>  CAnimationRect::SetDefaultValue  \n Sets default value.  \n  \n```  \nvoid SetDefaultValue(const CRect& rect);\n```  \n  \n### Parameters  \n `rect`  \n Specifies new default values for left, top, right and bottom.  \n  \n### Remarks  \n Use this function to set a default value to animation object. This methods assigns default values to rectangle's bounds. It also recreates underlying COM objects if they have been created. If you subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.  \n  \n## See Also  \n [Classes](../../mfc/reference/mfc-classes.md)\n"}