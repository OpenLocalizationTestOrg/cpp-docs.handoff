<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2eb55cb930a6dc963e9f802b536b8ba6580c129e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\cwindowimpl-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c1a844abafaaae430080bc0cb7091b8ec4fda2c7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ccd382272f619e23e2757b062cf850215dd1c419</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CWindowImpl Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CWindowImpl Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides methods for creating or subclassing a window.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This class and its members cannot be used in applications that execute in the <ph id="ph1">[!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Your new class, derived from <ph id="ph1">`CWindowImpl`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>TBase</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The base class of your class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>By default, the base class is <bpt id="p1">[</bpt>CWindow<ept id="p1">](../../atl/reference/cwindow-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>traits class<ept id="p1">](../../atl/understanding-window-traits.md)</ept> that defines styles for your window.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`CControlWinTraits`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>CWindowImpl::Create</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Creates a window.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>CWindowImplBaseT Methods</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>DefWindowProc</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Provides default message processing.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>GetCurrentMessage</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Returns the current message.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>GetWindowProc</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Returns the current window procedure.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>OnFinalMessage</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Called after the last message is received (typically <ph id="ph1">`WM_NCDESTROY`</ph>).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>SubclassWindow</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Subclasses a window.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>UnsubclassWindow</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Restores a previously subclassed window.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Static Methods</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>GetWndClassInfo</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Returns a static instance of <bpt id="p1">[</bpt>CWndClassInfo<ept id="p1">](../../atl/reference/cwndclassinfo-class.md)</ept>, which manages the window class information.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>WindowProc</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Processes messages sent to the window.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Data Members</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>m_pfnSuperWindowProc</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Points to the window class's original window procedure.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`CWindowImpl`</ph> to create a window or subclass an existing window.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>the <ph id="ph1">`CWindowImpl`</ph> window procedure uses a message map to direct messages to the appropriate handlers.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>creates a window based on the window class information that's managed by <bpt id="p1">[</bpt>CWndClassInfo<ept id="p1">](../../atl/reference/cwndclassinfo-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>contains the <bpt id="p1">[</bpt>DECLARE_WND_CLASS<ept id="p1">](http://msdn.microsoft.com/library/55247a72-fb9e-4bde-87f3-747c08076971)</ept> macro, which means <ph id="ph1">`CWndClassInfo`</ph> registers a new window class.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If you want to superclass an existing window class, derive your class from <ph id="ph1">`CWindowImpl`</ph> and include the <bpt id="p1">[</bpt>DECLARE_WND_SUPERCLASS<ept id="p1">](http://msdn.microsoft.com/library/650337b6-4973-41e5-8c36-55f90327bdcd)</ept> macro.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">`CWndClassInfo`</ph> registers a window class that's based on an existing class but uses <ph id="ph2">`CWindowImpl::WindowProc`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#43</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`CWndClassInfo`</ph> manages the information for just one window class, each window created through an instance of <ph id="ph2">`CWindowImpl`</ph> is based on the same window class.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>also supports window subclassing.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SubclassWindow`</ph> method attaches an existing window to the <ph id="ph2">`CWindowImpl`</ph> object and changes the window procedure to <ph id="ph3">`CWindowImpl::WindowProc`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Each instance of <ph id="ph1">`CWindowImpl`</ph> can subclass a different window.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For any given <ph id="ph1">`CWindowImpl`</ph> object, call either <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> or <ph id="ph2">`SubclassWindow`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Don't invoke both methods on the same object.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In addition to <ph id="ph1">`CWindowImpl`</ph>, ATL provides <bpt id="p1">[</bpt>CContainedWindow<ept id="p1">](../../atl/reference/ccontainedwindowt-class.md)</ept> to create a window that's contained in another object.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The base class destructor (~ <bpt id="p1">**</bpt>CWindowImplRoot<ept id="p1">**</ept>) ensures that the window is gone before the object is destroyed.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>derives from <bpt id="p1">**</bpt>CWindowImplBaseT<ept id="p1">**</ept>, which derives from <bpt id="p2">**</bpt>CWindowImplRoot<ept id="p2">**</ept>, which derives from <bpt id="p3">**</bpt>TBase<ept id="p3">**</ept> and <bpt id="p4">[</bpt>CMessageMap<ept id="p4">](../../atl/reference/cmessagemap-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For more information about</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>See</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Creating controls</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>ATL Tutorial</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Using windows in ATL</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>ATL Window Classes</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>ATL Project Wizard</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Creating an ATL Project</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CMessageMap</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlwin.h</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>CWindowImpl::Create</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Creates a window based on a new window class.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>[in] The handle to the parent or owner window.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>[in] A <bpt id="p1">[</bpt>RECT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure specifying the position of the window.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`RECT`</ph> can be passed by pointer or by reference.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>[in] Specifies the name of the window.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>[in] The style of the window.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This value is combined with the style provided by the traits class for the window.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The default value gives the traits class full control over the style.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For a list of possible values, see <bpt id="p1">[</bpt>CreateWindow<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632679)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>[in] The extended window style.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This value is combined with the style provided by the traits class for the window.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The default value gives the traits class full control over the style.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For a list of possible values, see <bpt id="p1">[</bpt>CreateWindowEx<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632680)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>[in] For a child window, the window identifier.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For a top-level window, a menu handle for the window.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">**</bpt>0U<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>[in] A pointer to window-creation data.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>For a full description, see the description for the final parameter to <bpt id="p1">[</bpt>CreateWindowEx<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632680)</ept>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If successful, the handle to the newly created window.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Otherwise, <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Create<ept id="p1">**</ept> first registers the window class if it has not yet been registered.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The newly created window is automatically attached to the <ph id="ph1">`CWindowImpl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Do not call <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> if you have already called <bpt id="p2">[</bpt>SubclassWindow<ept id="p2">](#cwindowimpl__subclasswindow)</ept>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>To use a window class that is based on an existing window class, derive your class from <ph id="ph1">`CWindowImpl`</ph> and include the <bpt id="p1">[</bpt>DECLARE_WND_SUPERCLASS<ept id="p1">](http://msdn.microsoft.com/library/650337b6-4973-41e5-8c36-55f90327bdcd)</ept> macro.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The existing window class's window procedure is saved in <bpt id="p1">[</bpt>m_pfnSuperWindowProc<ept id="p1">](#cwindowimpl__m_pfnsuperwindowproc)</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>CWindowImpl<ept id="p1">](../../atl/reference/cwindowimpl-class.md)</ept> overview.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>If 0 is used as the value for the <ph id="ph1">`MenuOrID`</ph> parameter, it must be specified as 0U (the default value) to avoid a compiler error.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>CWindowImpl::DefWindowProc</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Called by <bpt id="p1">[</bpt>WindowProc<ept id="p1">](#cwindowimpl__windowproc)</ept> to process messages not handled by the message map.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>[in] The message sent to the window.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>[in] Additional message-specific information.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>[in] Additional message-specific information.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The result of the message processing.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`DefWindowProc`</ph> calls the <bpt id="p1">[</bpt>CallWindowProc<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633571)</ept> Win32 function to send the message information to the window procedure specified in <bpt id="p2">[</bpt>m_pfnSuperWindowProc<ept id="p2">](#cwindowimpl__m_pfnsuperwindowproc)</ept>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The function with no parameters automatically retrieves the needed parameters from the current message.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>CWindowImpl::GetCurrentMessage</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Returns the current message, packaged in the <ph id="ph1">`MSG`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The current message.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>CWindowImpl::GetWindowProc</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`WindowProc`</ph>, the current window procedure.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The current window procedure.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Override this method to replace the window procedure with your own.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>CWindowImpl::GetWndClassInfo</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Called by <bpt id="p1">[</bpt>Create<ept id="p1">](#cwindowimpl__create)</ept> to access the window class information.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>A static instance of <bpt id="p1">[</bpt>CWndClassInfo<ept id="p1">](../../atl/reference/cwndclassinfo-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`CWindowImpl`</ph> obtains this method through the <bpt id="p1">[</bpt>DECLARE_WND_CLASS<ept id="p1">](http://msdn.microsoft.com/library/55247a72-fb9e-4bde-87f3-747c08076971)</ept> macro, which specifies a new window class.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>To superclass an existing window class, derive your class from <ph id="ph1">`CWindowImpl`</ph> and include the <bpt id="p1">[</bpt>DECLARE_WND_SUPERCLASS<ept id="p1">](http://msdn.microsoft.com/library/650337b6-4973-41e5-8c36-55f90327bdcd)</ept> macro to override <ph id="ph2">`GetWndClassInfo`</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>CWindowImpl<ept id="p1">](../../atl/reference/cwindowimpl-class.md)</ept> overview.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Besides using the <ph id="ph1">`DECLARE_WND_CLASS`</ph> and <ph id="ph2">`DECLARE_WND_SUPERCLASS`</ph> macros, you can override <ph id="ph3">`GetWndClassInfo`</ph> with your own implementation.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>CWindowImpl::m_pfnSuperWindowProc</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Depending on the window, points to one of the following window procedures.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Type of window</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Window procedure</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>A window based on a new window class, specified through the <bpt id="p1">[</bpt>DECLARE_WND_CLASS<ept id="p1">](http://msdn.microsoft.com/library/55247a72-fb9e-4bde-87f3-747c08076971)</ept> macro.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>DefWindowProc<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633572)</ept> Win32 function.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>A window based on a window class that modifies an existing class, specified through the <bpt id="p1">[</bpt>DECLARE_WND_SUPERCLASS<ept id="p1">](http://msdn.microsoft.com/library/650337b6-4973-41e5-8c36-55f90327bdcd)</ept> macro.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The existing window class's window procedure.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>A subclassed window.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The subclassed window's original window procedure.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CWindowImpl::DefWindowProc<ept id="p1">](#cwindowimpl__defwindowproc)</ept> sends message information to the window procedure saved in <ph id="ph1">`m_pfnSuperWindowProc`</ph>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>CWindowImpl::OnFinalMessage</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Called after receiving the last message (typically <ph id="ph1">`WM_NCDESTROY`</ph>).</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>[in] A handle to the window being destroyed.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The default implementation of <ph id="ph1">`OnFinalMessage`</ph> does nothing, but you can override this function to handle cleanup before destroying a window.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>If you want to automatically delete your object upon the window destruction, you can call <ph id="ph1">`delete this;`</ph> in this function.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>CWindowImpl::SubclassWindow</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Subclasses the window identified by <ph id="ph1">`hWnd`</ph> and attaches it to the <ph id="ph2">`CWindowImpl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>[in] The handle to the window being subclassed.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if the window is successfully subclassed; otherwise, <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The subclassed window now uses <bpt id="p1">[</bpt>CWindowImpl::WindowProc<ept id="p1">](#cwindowimpl__windowproc)</ept>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The original window procedure is saved in <bpt id="p1">[</bpt>m_pfnSuperWindowProc<ept id="p1">](#cwindowimpl__m_pfnsuperwindowproc)</ept>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Do not call <ph id="ph1">`SubclassWindow`</ph> if you have already called <bpt id="p1">[</bpt>Create<ept id="p1">](#cwindowimpl__create)</ept>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>CWindowImpl::UnsubclassWindow</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Detaches the subclassed window from the <ph id="ph1">`CWindowImpl`</ph> object and restores the original window procedure, saved in <bpt id="p1">[</bpt>m_pfnSuperWindowProc<ept id="p1">](#cwindowimpl__m_pfnsuperwindowproc)</ept>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The handle to the window previously subclassed.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>CWindowImpl::WindowProc</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>This static function implements the window procedure.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>[in] The handle to the window.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>[in] The message sent to the window.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>[in] Additional message-specific information.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>[in] Additional message-specific information.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The result of the message processing.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>uses the default message map (declared with <bpt id="p1">[</bpt>BEGIN_MSG_MAP<ept id="p1">](http://msdn.microsoft.com/library/8bbb5af9-18b1-48c6-880e-166f599ee554)</ept>) to direct messages to the appropriate handlers.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>If necessary, <ph id="ph1">`WindowProc`</ph> calls <bpt id="p1">[</bpt>DefWindowProc<ept id="p1">](#cwindowimpl__defwindowproc)</ept> for additional message processing.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>If the final message is not handled, <ph id="ph1">`WindowProc`</ph> does the following:</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Performs unsubclassing if the window was unsubclassed.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Clears <ph id="ph1">`m_hWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Calls <bpt id="p1">[</bpt>OnFinalMessage<ept id="p1">](#cwindowimpl__onfinalmessage)</ept> before the window is destroyed.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>You can override <ph id="ph1">`WindowProc`</ph> to provide a different mechanism for handling messages.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>BEGIN_MSG_MAP</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>CComControl Class</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Class Overview</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>