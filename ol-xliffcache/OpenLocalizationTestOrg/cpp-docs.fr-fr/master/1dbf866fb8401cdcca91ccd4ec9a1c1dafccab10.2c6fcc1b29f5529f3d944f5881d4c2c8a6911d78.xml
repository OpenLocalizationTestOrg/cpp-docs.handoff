{"nodes":[{"pos":[12,41],"content":"puts, _putws | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"puts, _putws | Microsoft Docs","pos":[0,29]}]},{"content":"puts, _putws","pos":[1115,1127]},{"pos":[1128,1158],"content":"Writes a string to <bpt id=\"p1\">**</bpt>stdout<ept id=\"p1\">**</ept>.","source":"Writes a string to **stdout**."},{"content":"Syntax","pos":[1167,1173]},{"content":"Parameters","pos":[1291,1301]},{"content":"Output string.","pos":[1314,1328]},{"content":"Return Value","pos":[1337,1349]},{"content":"Returns a nonnegative value if successful.","pos":[1353,1395]},{"content":"If <ph id=\"ph1\">`puts`</ph> fails, it returns <ph id=\"ph2\">`EOF`</ph>; if <ph id=\"ph3\">`_putws`</ph> fails, it returns <bpt id=\"p1\">**</bpt>WEOF<ept id=\"p1\">**</ept>.","pos":[1396,1470],"source":" If `puts` fails, it returns `EOF`; if `_putws` fails, it returns **WEOF**."},{"content":"If <ph id=\"ph1\">`str`</ph> is a null pointer, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1471,1629],"source":" If `str` is a null pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, the functions set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and return <ph id=\"ph3\">`EOF`</ph> or <bpt id=\"p1\">**</bpt>WEOF<ept id=\"p1\">**</ept>.","pos":[1630,1734],"source":" If execution is allowed to continue, the functions set `errno` to `EINVAL` and return `EOF` or **WEOF**."},{"pos":[1741,1909],"content":"For information on these and other error codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For information on these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"Remarks","pos":[1918,1925]},{"pos":[1929,2114],"content":"The <ph id=\"ph1\">`puts`</ph> function writes <ph id=\"ph2\">`str`</ph> to the standard output stream <bpt id=\"p1\">**</bpt>stdout<ept id=\"p1\">**</ept>, replacing the string's terminating null character ('\\0') with a newline character ('\\n') in the output stream.","source":"The `puts` function writes `str` to the standard output stream **stdout**, replacing the string's terminating null character ('\\0') with a newline character ('\\n') in the output stream."},{"content":"is the wide-character version of <ph id=\"ph1\">`puts`</ph>; the two functions behave identically if the stream is opened in ANSI mode.","pos":[2130,2245],"source":" is the wide-character version of `puts`; the two functions behave identically if the stream is opened in ANSI mode."},{"content":"doesn't currently support output into a UNICODE stream.","pos":[2253,2308]},{"pos":[2315,2424],"content":"Under Windows 2000 and later, <bpt id=\"p1\">**</bpt>_putwch<ept id=\"p1\">**</ept> writes Unicode characters using the current CONSOLE LOCALE setting.","source":"Under Windows 2000 and later, **_putwch** writes Unicode characters using the current CONSOLE LOCALE setting."},{"content":"Generic-Text Routine Mappings","pos":[2434,2463]},{"content":"TCHAR.H routine","pos":[2470,2485]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[2486,2514],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[2515,2528]},{"content":"_UNICODE defined","pos":[2529,2545]},{"content":"Requirements","pos":[2699,2711]},{"content":"Routine","pos":[2718,2725]},{"content":"Required header","pos":[2726,2741]},{"content":"stdio.h&gt;","pos":[2795,2803],"source":"stdio.h>"},{"content":"stdio.h&gt;","pos":[2819,2827],"source":"stdio.h>"},{"content":"The console is not supported in <ph id=\"ph1\">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> apps.","pos":[2835,2948],"source":"The console is not supported in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps."},{"content":"The standard stream handles that are associated with the console—<ph id=\"ph1\">`stdin`</ph>, <ph id=\"ph2\">`stdout`</ph>, and <ph id=\"ph3\">`stderr`</ph>—must be redirected before C run-time functions can use them in <ph id=\"ph4\">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> apps.","pos":[2949,3190],"source":" The standard stream handles that are associated with the console—`stdin`, `stdout`, and `stderr`—must be redirected before C run-time functions can use them in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps."},{"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","pos":[3191,3295],"source":" For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"Libraries","pos":[3304,3313]},{"pos":[3317,3409],"content":"All versions of the <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept>.","source":"All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md)."},{"content":"Example","pos":[3418,3425]},{"content":"Output","pos":[3621,3627]},{"content":".NET Framework Equivalent","pos":[3676,3701]},{"content":"System::Console::Write","pos":[3706,3728]},{"content":"See Also","pos":[3806,3814]},{"content":"Stream I/O","pos":[3819,3829]},{"content":"fputs, fputws","pos":[3875,3888]},{"content":"fgets, fgetws","pos":[3946,3959]}],"content":"---\ntitle: \"puts, _putws | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_putws\"\n  - \"puts\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-stdio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_putts\"\n  - \"_putws\"\n  - \"puts\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"strings [C++], writing\"\n  - \"_putts function\"\n  - \"standard output, writing to\"\n  - \"putws function\"\n  - \"puts function\"\n  - \"putts function\"\n  - \"_putws function\"\nms.assetid: 32dada12-ed45-40ac-be06-3feeced9ecd6\ncaps.latest.revision: 15\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# puts, _putws\nWrites a string to **stdout**.  \n  \n## Syntax  \n  \n```  \n  \n      int puts(  \n   const char *str   \n);  \nint _putws(  \n   const wchar_t *str   \n);  \n```  \n  \n#### Parameters  \n `str`  \n Output string.  \n  \n## Return Value  \n Returns a nonnegative value if successful. If `puts` fails, it returns `EOF`; if `_putws` fails, it returns **WEOF**. If `str` is a null pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, the functions set `errno` to `EINVAL` and return `EOF` or **WEOF**.  \n  \n For information on these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n The `puts` function writes `str` to the standard output stream **stdout**, replacing the string's terminating null character ('\\0') with a newline character ('\\n') in the output stream.  \n  \n `_putws` is the wide-character version of `puts`; the two functions behave identically if the stream is opened in ANSI mode. `puts` doesn't currently support output into a UNICODE stream.  \n  \n Under Windows 2000 and later, **_putwch** writes Unicode characters using the current CONSOLE LOCALE setting.  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_putts`|`puts`|`puts`|`_putws`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`puts`|\\<stdio.h>|  \n|`_putws`|\\<stdio.h>|  \n  \n The console is not supported in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps. The standard stream handles that are associated with the console—`stdin`, `stdout`, and `stderr`—must be redirected before C run-time functions can use them in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps. For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Libraries  \n All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md).  \n  \n## Example  \n  \n```  \n// crt_puts.c  \n/* This program uses puts to write a string to stdout.  \n */  \n  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   puts( \"Hello world from puts!\" );  \n}  \n```  \n  \n## Output  \n  \n```  \nHello world from puts!  \n```  \n  \n## .NET Framework Equivalent  \n [System::Console::Write](https://msdn.microsoft.com/en-us/library/system.console.write.aspx)  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [fputs, fputws](../../c-runtime-library/reference/fputs-fputws.md)   \n [fgets, fgetws](../../c-runtime-library/reference/fgets-fgetws.md)"}