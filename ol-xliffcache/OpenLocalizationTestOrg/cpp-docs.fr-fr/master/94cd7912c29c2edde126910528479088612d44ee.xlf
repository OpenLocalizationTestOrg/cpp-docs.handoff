<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">94cd7912c29c2edde126910528479088612d44ee</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\ccomcontrolbase-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8cd48c4d515b87de3dd5aa1254c64aebabc8b7f2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e750c314118c2f0ea53e3e8643a4757cec8302e7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CComControlBase Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CComControlBase Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This class provides methods for creating and managing ATL controls.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This class and its members cannot be used in applications that execute in the Windows Runtime.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Public Typedefs</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>CComControlBase::AppearanceType</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Override if your <ph id="ph1">`m_nAppearance`</ph> stock property isn't of type <ph id="ph2">`short`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>CComControlBase::CComControlBase</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The constructor.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>CComControlBase::~CComControlBase</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The destructor.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CComControlBase::ControlQueryInterface</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the requested interface.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CComControlBase::DoesVerbActivate</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Checks that the <ph id="ph1">`iVerb`</ph> parameter used by <ph id="ph2">`IOleObjectImpl::DoVerb`</ph> either activates the control's user interface ( <ph id="ph3">`iVerb`</ph> equals <ph id="ph4">`OLEIVERB_UIACTIVATE`</ph>), defines the action taken when the user double-clicks the control ( <ph id="ph5">`iVerb`</ph> equals <ph id="ph6">`OLEIVERB_PRIMARY`</ph>), displays the control ( <ph id="ph7">`iVerb`</ph> equals <ph id="ph8">`OLEIVERB_SHOW`</ph>), or activates the control ( <ph id="ph9">`iVerb`</ph> equals <bpt id="p1">**</bpt>OLEIVERB_INPLACEACTIVATE<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CComControlBase::DoesVerbUIActivate</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Checks that the <ph id="ph1">`iVerb`</ph> parameter used by <ph id="ph2">`IOleObjectImpl::DoVerb`</ph> causes the control's user interface to activate and returns <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CComControlBase::DoVerbProperties</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Displays the control's property pages.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CComControlBase::FireViewChange</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Call this method to tell the container to redraw the control, or notify the registered advise sinks that the control's view has changed.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientAppearance</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_APPEARANCE<ept id="p1">**</ept>, the current appearance setting for the control: 0 for flat and 1 for 3D.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientAutoClip</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_AUTOCLIP<ept id="p1">**</ept>, a flag indicating whether the container supports automatic clipping of the control display area.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientBackColor</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_BACKCOLOR<ept id="p1">**</ept>, the ambient background color for all controls, defined by the container.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientCharSet</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_CHARSET<ept id="p1">**</ept>, the ambient character set for all controls, defined by the container.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientCodePage</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_CODEPAGE<ept id="p1">**</ept>, the ambient character set for all controls, defined by the container.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientDisplayAsDefault</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_DISPLAYASDEFAULT<ept id="p1">**</ept>, a flag that is <bpt id="p2">**</bpt>TRUE<ept id="p2">**</ept> if the container has marked the control in this site to be a default button, and therefore a button control should draw itself with a thicker frame.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientDisplayName</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_DISPLAYNAME<ept id="p1">**</ept>, the name the container has supplied to the control.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientFont</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the container's ambient <ph id="ph1">`IFont`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientFontDisp</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the container's ambient <bpt id="p1">**</bpt>IFontDisp<ept id="p1">**</ept> dispatch interface.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientForeColor</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_FORECOLOR<ept id="p1">**</ept>, the ambient foreground color for all controls, defined by the container.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientLocaleID</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_LOCALEID<ept id="p1">**</ept>, the identifier of the language used by the container.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientMessageReflect</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_MESSAGEREFLECT<ept id="p1">**</ept>, a flag indicating whether the container wants to receive window messages (such as <ph id="ph1">`WM_DRAWITEM`</ph>) as events.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientPalette</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_PALETTE<ept id="p1">**</ept>, used to access the container's <ph id="ph1">`HPALETTE`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientProperty</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Retrieves the container property specified by <ph id="ph1">`id`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientRightToLeft</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_RIGHTTOLEFT<ept id="p1">**</ept>, the direction in which content is displayed by the container.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientScaleUnits</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_SCALEUNITS<ept id="p1">**</ept>, the container's ambient units (such as inches or centimeters) for labeling displays.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientShowGrabHandles</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_SHOWGRABHANDLES<ept id="p1">**</ept>, a flag indicating whether the container allows the control to display grab handles for itself when active.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientShowHatching</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_SHOWHATCHING<ept id="p1">**</ept>, a flag indicating whether the container allows the control to display itself with a hatched pattern when the UI is active.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientSupportsMnemonics</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_SUPPORTSMNEMONICS<ept id="p1">**</ept>, a flag indicating whether the container supports keyboard mnemonics.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientTextAlign</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_TEXTALIGN<ept id="p1">**</ept>, the text alignment preferred by the container: 0 for general alignment (numbers right, text left), 1 for left alignment, 2 for center alignment, and 3 for right alignment.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientTopToBottom</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_TOPTOBOTTOM<ept id="p1">**</ept>, the direction in which content is displayed by the container.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientUIDead</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_UIDEAD<ept id="p1">**</ept>, a flag indicating whether the container wants the control to respond to user-interface actions.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientUserMode</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_USERMODE<ept id="p1">**</ept>, a flag indicating whether the container is in run-mode ( <bpt id="p2">**</bpt>TRUE<ept id="p2">**</ept>) or design-mode ( <bpt id="p3">**</bpt>FALSE<ept id="p3">**</ept>).</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetDirty</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Returns the value of data member <ph id="ph1">`m_bRequiresSave`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetZoomInfo</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Retrieves the x and y values of the numerator and denominator of the zoom factor for a control activated for in-place editing.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>CComControlBase::InPlaceActivate</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Causes the control to transition from the inactive state to whatever state the verb in <ph id="ph1">`iVerb`</ph> indicates.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>CComControlBase::InternalGetSite</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Call this method to query the control site for a pointer to the identified interface.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>CComControlBase::OnDraw</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Override this method to draw your control.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>CComControlBase::OnDrawAdvanced</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The default <bpt id="p1">**</bpt>OnDrawAdvanced<ept id="p1">**</ept> prepares a normalized device context for drawing, then calls your control class's <ph id="ph1">`OnDraw`</ph> method.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>CComControlBase::OnKillFocus</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Checks that the control is in-place active and has a valid control site, then informs the container that the control has lost focus.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>CComControlBase::OnMouseActivate</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Checks that the UI is in user mode, then activates the control.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>CComControlBase::OnPaint</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Prepares the container for painting, gets the control's client area, then calls the control class's <ph id="ph1">`OnDraw`</ph> method.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>CComControlBase::OnSetFocus</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Checks that the control is in-place active and has a valid control site, then informs the container the control has gained focus.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>CComControlBase::PreTranslateAccelerator</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Override this method to provide your own keyboard accelerator handlers.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>CComControlBase::SendOnClose</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Notifies all advisory sinks registered with the advise holder that the control has been closed.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>CComControlBase::SendOnDataChange</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Notifies all advisory sinks registered with the advise holder that the control data has changed.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>CComControlBase::SendOnRename</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Notifies all advisory sinks registered with the advise holder that the control has a new moniker.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>CComControlBase::SendOnSave</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Notifies all advisory sinks registered with the advise holder that the control has been saved.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>CComControlBase::SendOnViewChange</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Notifies all registered advisory sinks that the control's view has changed.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>CComControlBase::SetControlFocus</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Sets or removes the keyboard focus to or from the control.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>CComControlBase::SetDirty</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Sets the data member <ph id="ph1">`m_bRequiresSave`</ph> to the value in <ph id="ph2">`bDirty`</ph>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_bAutoSize</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Flag indicating the control cannot be any other size.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_bDrawFromNatural</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Flag indicating that <ph id="ph1">`IDataObjectImpl::GetData`</ph> and <ph id="ph2">`CComControlBase::GetZoomInfo`</ph> should set the control size from <ph id="ph3">`m_sizeNatural`</ph> rather than from <ph id="ph4">`m_sizeExtent`</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_bDrawGetDataInHimetric</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Flag indicating that <ph id="ph1">`IDataObjectImpl::GetData`</ph> should use HIMETRIC units and not pixels when drawing.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_bInPlaceActive</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Flag indicating the control is in-place active.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_bInPlaceSiteEx</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Flag indicating the container supports the <bpt id="p1">**</bpt>IOleInPlaceSiteEx<ept id="p1">**</ept> interface and OCX96 control features, such as windowless and flicker-free controls.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_bNegotiatedWnd</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Flag indicating whether or not the control has negotiated with the container about support for OCX96 control features (such as flicker-free and windowless controls), and whether the control is windowed or windowless.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_bRecomposeOnResize</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Flag indicating the control wants to recompose its presentation when the container changes the control's display size.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_bRequiresSave</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Flag indicating the control has changed since it was last saved.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_bResizeNatural</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Flag indicating the control wants to resize its natural extent (its unscaled physical size) when the container changes the control's display size.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_bUIActive</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Flag indicating the control's user interface, such as menus and toolbars, is active.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_bUsingWindowRgn</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Flag indicating the control is using the container-supplied window region.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_bWasOnceWindowless</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Flag indicating the control has been windowless, but may or may not be windowless now.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_bWindowOnly</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Flag indicating the control should be windowed, even if the container supports windowless controls.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_bWndLess</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Flag indicating the control is windowless.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_hWndCD</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Contains a reference to the window handle associated with the control.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_nFreezeEvents</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>A count of the number of times the container has frozen events (refused to accept events) without an intervening thaw of events (acceptance of events).</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_rcPos</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The position in pixels of the control, expressed in the coordinates of the container.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_sizeExtent</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The extent of the control in HIMETRIC units (each unit is 0.01 millimeters) for a particular display.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_sizeNatural</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The physical size of the control in HIMETRIC units (each unit is 0.01 millimeters).</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_spAdviseSink</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>A direct pointer to the advisory connection on the container (the container's <bpt id="p1">[</bpt>IAdviseSink<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms692513)</ept>).</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_spAmbientDispatch</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CComDispatchDriver`</ph> object that lets you retrieve and set the container's properties through an <ph id="ph2">`IDispatch`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_spClientSite</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>A pointer to the control's client site within the container.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_spDataAdviseHolder</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Provides a standard means to hold advisory connections between data objects and advise sinks.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_spInPlaceSite</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>A pointer to the container's <bpt id="p1">[</bpt>IOleInPlaceSite<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686586)</ept>, <bpt id="p2">[</bpt>IOleInPlaceSiteEx<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms693461)</ept>, or <bpt id="p3">[</bpt>IOleInPlaceSiteWindowless<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms682300)</ept> interface pointer.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_spOleAdviseHolder</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Provides a standard implementation of a way to hold advisory connections.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>This class provides methods for creating and managing ATL controls.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComControl Class<ept id="p1">](../../atl/reference/ccomcontrol-class.md)</ept> derives from <ph id="ph1">`CComControlBase`</ph>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>When you create a Standard Control or DHTML control using the ATL Control Wizard, the wizard will automatically derive your class from <ph id="ph1">`CComControlBase`</ph>.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>For more information about creating a control, see the <bpt id="p1">[</bpt>ATL Tutorial<ept id="p1">](../../atl/active-template-library-atl-tutorial.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>For more information about the ATL Project Wizard, see the article <bpt id="p1">[</bpt>Creating an ATL Project<ept id="p1">](../../atl/reference/creating-an-atl-project.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlctl.h</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>CComControlBase::AppearanceType</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Override if your <bpt id="p1">**</bpt>m_nAppearance<ept id="p1">**</ept> stock property isn't of type <bpt id="p2">**</bpt>short<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The ATL Control Wizard adds <bpt id="p1">**</bpt>m_nAppearance<ept id="p1">**</ept> stock property of type short.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">`AppearanceType`</ph> if you use a different data type.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>CComControlBase::CComControlBase</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The constructor.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The handle to the window associated with the control.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Initializes the control size to 5080X5080 HIMETRIC units (2"X2") and initializes the <ph id="ph1">`CComControlBase`</ph> data member values to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> or <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>CComControlBase::~CComControlBase</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The destructor.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>If the control is windowed, <ph id="ph1">`~CComControlBase`</ph> destroys it by calling <bpt id="p1">[</bpt>DestroyWindow<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632682)</ept>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>CComControlBase::ControlQueryInterface</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the requested interface.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The GUID of the interface being requested.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>A pointer to the interface pointer identified by <ph id="ph1">`iid`</ph>, or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if the interface is not found.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Only handles interfaces in the COM map table.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>NVC_ATL_COM#15</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>CComControlBase::DoesVerbActivate</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Checks that the <ph id="ph1">`iVerb`</ph> parameter used by <ph id="ph2">`IOleObjectImpl::DoVerb`</ph> either activates the control's user interface ( <ph id="ph3">`iVerb`</ph> equals <ph id="ph4">`OLEIVERB_UIACTIVATE`</ph>), defines the action taken when the user double-clicks the control ( <ph id="ph5">`iVerb`</ph> equals <ph id="ph6">`OLEIVERB_PRIMARY`</ph>), displays the control ( <ph id="ph7">`iVerb`</ph> equals <ph id="ph8">`OLEIVERB_SHOW`</ph>), or activates the control ( <ph id="ph9">`iVerb`</ph> equals <bpt id="p1">**</bpt>OLEIVERB_INPLACEACTIVATE<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Value indicating the action to be performed by <ph id="ph1">`DoVerb`</ph>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if <ph id="ph1">`iVerb`</ph> equals <ph id="ph2">`OLEIVERB_UIACTIVATE`</ph>, <ph id="ph3">`OLEIVERB_PRIMARY`</ph>, <ph id="ph4">`OLEIVERB_SHOW`</ph>, or <bpt id="p2">**</bpt>OLEIVERB_INPLACEACTIVATE<ept id="p2">**</ept>; otherwise, returns <bpt id="p3">**</bpt>FALSE<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>You can override this method to define your own activation verb.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>CComControlBase::DoesVerbUIActivate</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Checks that the <ph id="ph1">`iVerb`</ph> parameter used by <ph id="ph2">`IOleObjectImpl::DoVerb`</ph> causes the control's user interface to activate and returns <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Value indicating the action to be performed by <ph id="ph1">`DoVerb`</ph>.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if <ph id="ph1">`iVerb`</ph> equals <ph id="ph2">`OLEIVERB_UIACTIVATE`</ph>, <ph id="ph3">`OLEIVERB_PRIMARY`</ph>, <ph id="ph4">`OLEIVERB_SHOW`</ph>, or <bpt id="p2">**</bpt>OLEIVERB_INPLACEACTIVATE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Otherwise, the method returns <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>CComControlBase::DoVerbProperties</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Displays the control's property pages.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Reserved.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>hwndParent</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Handle of the window containing the control.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>One of the standard HRESULT values.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>NVC_ATL_COM#19</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>NVC_ATL_COM#20</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>CComControlBase::FireViewChange</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Call this method to tell the container to redraw the control, or notify the registered advise sinks that the control's view has changed.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>One of the standard HRESULT values.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>If the control is active (the control class data member <bpt id="p1">[</bpt>CComControlBase::m_bInPlaceActive<ept id="p1">](#ccomcontrolbase__m_binplaceactive)</ept> is <bpt id="p2">**</bpt>TRUE<ept id="p2">**</ept>), notifies the container that you want to redraw the entire control.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>If the control is inactive, notifies the control's registered advise sinks (through the control class data member <bpt id="p1">[</bpt>CComControlBase::m_spAdviseSink<ept id="p1">](#ccomcontrolbase__m_spadvisesink)</ept>) that the control's view has changed.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>NVC_ATL_COM#21</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientAppearance</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_APPEARANCE<ept id="p1">**</ept>, the current appearance setting for the control: 0 for flat and 1 for 3D.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The property <bpt id="p1">**</bpt>DISPID_AMBIENT_APPEARANCE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>One of the standard HRESULT values.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>NVC_ATL_COM#22</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientAutoClip</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_AUTOCLIP<ept id="p1">**</ept>, a flag indicating whether the container supports automatic clipping of the control display area.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>bAutoClip</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The property <bpt id="p1">**</bpt>DISPID_AMBIENT_AUTOCLIP<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>One of the standard HRESULT values.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientBackColor</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_BACKCOLOR<ept id="p1">**</ept>, the ambient background color for all controls, defined by the container.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>BackColor</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The property <bpt id="p1">**</bpt>DISPID_AMBIENT_BACKCOLOR<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>One of the standard HRESULT values.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientCharSet</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_CHARSET<ept id="p1">**</ept>, the ambient character set for all controls, defined by the container.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>bstrCharSet</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The property <bpt id="p1">**</bpt>DISPID_AMBIENT_CHARSET<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, or an error HRESULT on failure.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientCodePage</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_CODEPAGE<ept id="p1">**</ept>, the ambient code page for all controls, defined by the container.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>ulCodePage</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The property <bpt id="p1">**</bpt>DISPID_AMBIENT_CODEPAGE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, or an error HRESULT on failure.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientDisplayAsDefault</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_DISPLAYASDEFAULT<ept id="p1">**</ept>, a flag that is <bpt id="p2">**</bpt>TRUE<ept id="p2">**</ept> if the container has marked the control in this site to be a default button, and therefore a button control should draw itself with a thicker frame.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The property <bpt id="p1">**</bpt>DISPID_AMBIENT_DISPLAYASDEFAULT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>One of the standard HRESULT values.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientDisplayName</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_DISPLAYNAME<ept id="p1">**</ept>, the name the container has supplied to the control.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>bstrDisplayName</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>The property <bpt id="p1">**</bpt>DISPID_AMBIENT_DISPLAYNAME<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>One of the standard HRESULT values.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientFont</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the container's ambient <ph id="ph1">`IFont`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>A pointer to the container's ambient <bpt id="p1">[</bpt>IFont<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms680673)</ept> interface.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>One of the standard HRESULT values.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>If the property is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the pointer is <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>If the pointer is not <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the caller must release the pointer.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientFontDisp</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the container's ambient <bpt id="p1">**</bpt>IFontDisp<ept id="p1">**</ept> dispatch interface.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>A pointer to the container's ambient <bpt id="p1">[</bpt>IFontDisp<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms692695)</ept> dispatch interface.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, or an error HRESULT on failure.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>If the property is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the pointer is <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>If the pointer is not <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the caller must release the pointer.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientForeColor</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_FORECOLOR<ept id="p1">**</ept>, the ambient foreground color for all controls, defined by the container.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>ForeColor</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>The property <bpt id="p1">**</bpt>DISPID_AMBIENT_FORECOLOR<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>One of the standard HRESULT values.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientLocaleID</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_LOCALEID<ept id="p1">**</ept>, the identifier of the language used by the container.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>The property <bpt id="p1">**</bpt>DISPID_AMBIENT_LOCALEID<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>One of the standard HRESULT values.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>The control can use this identifier to adapt its user interface to different languages.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientMessageReflect</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_MESSAGEREFLECT<ept id="p1">**</ept>, a flag indicating whether the container wants to receive window messages (such as <ph id="ph1">`WM_DRAWITEM`</ph>) as events.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>The property <bpt id="p1">**</bpt>DISPID_AMBIENT_MESSAGEREFLECT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>One of the standard HRESULT values.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientPalette</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_PALETTE<ept id="p1">**</ept>, used to access the container's <ph id="ph1">`HPALETTE`</ph>.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>The property <bpt id="p1">**</bpt>DISPID_AMBIENT_PALETTE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>One of the standard HRESULT values.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientProperty</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Retrieves the container property specified by <ph id="ph1">`dispid`</ph>.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Identifier of the container property to be retrieved.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Variable to receive the property.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>One of the standard HRESULT values.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>ATL has provided a set of helper functions to retrieve specific properties, for example, <bpt id="p1">[</bpt>CComControlBase::GetAmbientBackColor<ept id="p1">](#ccomcontrolbase__getambientbackcolor)</ept>.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>If there is no suitable method available, use <ph id="ph1">`GetAmbientProperty`</ph>.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientRightToLeft</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_RIGHTTOLEFT<ept id="p1">**</ept>, the direction in which content is displayed by the container.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>bRightToLeft</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>The property <bpt id="p1">**</bpt>DISPID_AMBIENT_RIGHTTOLEFT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Set to <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if content is displayed right to left, <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> if it is displayed left to right.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, or an error HRESULT on failure.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientScaleUnits</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_SCALEUNITS<ept id="p1">**</ept>, the container's ambient units (such as inches or centimeters) for labeling displays.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>bstrScaleUnits</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>The property <bpt id="p1">**</bpt>DISPID_AMBIENT_SCALEUNITS<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>One of the standard HRESULT values.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientShowGrabHandles</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_SHOWGRABHANDLES<ept id="p1">**</ept>, a flag indicating whether the container allows the control to display grab handles for itself when active.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>bShowGrabHandles</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>The property <bpt id="p1">**</bpt>DISPID_AMBIENT_SHOWGRABHANDLES<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>One of the standard HRESULT values.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientShowHatching</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_SHOWHATCHING<ept id="p1">**</ept>, a flag indicating whether the container allows the control to display itself with a hatched pattern when the control's user interface is active.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>bShowHatching</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>The property <bpt id="p1">**</bpt>DISPID_AMBIENT_SHOWHATCHING<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>One of the standard HRESULT values.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientSupportsMnemonics</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_SUPPORTSMNEMONICS<ept id="p1">**</ept>, a flag indicating whether the container supports keyboard mnemonics.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>bSupportsMnemonics</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>The property <bpt id="p1">**</bpt>DISPID_AMBIENT_SUPPORTSMNEMONICS<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>One of the standard HRESULT values.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientTextAlign</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_TEXTALIGN<ept id="p1">**</ept>, the text alignment preferred by the container: 0 for general alignment (numbers right, text left), 1 for left alignment, 2 for center alignment, and 3 for right alignment.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>nTextAlign</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>The property <bpt id="p1">**</bpt>DISPID_AMBIENT_TEXTALIGN<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>One of the standard HRESULT values.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientTopToBottom</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_TOPTOBOTTOM<ept id="p1">**</ept>, the direction in which content is displayed by the container.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>bTopToBottom</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>The property <bpt id="p1">**</bpt>DISPID_AMBIENT_TOPTOBOTTOM<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Set to <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if text is displayed top to bottom, <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> if it is displayed bottom to top.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, or an error HRESULT on failure.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientUIDead</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_UIDEAD<ept id="p1">**</ept>, a flag indicating whether the container wants the control to respond to user-interface actions.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>bUIDead</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>The property <bpt id="p1">**</bpt>DISPID_AMBIENT_UIDEAD<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>One of the standard HRESULT values.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the control should not respond.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>This flag applies regardless of the <bpt id="p1">**</bpt>DISPID_AMBIENT_USERMODE<ept id="p1">**</ept> flag.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CComControlBase::GetAmbientUserMode<ept id="p1">](#ccomcontrolbase__getambientusermode)</ept>.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetAmbientUserMode</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Retrieves <bpt id="p1">**</bpt>DISPID_AMBIENT_USERMODE<ept id="p1">**</ept>, a flag indicating whether the container is in run-mode ( <bpt id="p2">**</bpt>TRUE<ept id="p2">**</ept>) or design-mode ( <bpt id="p3">**</bpt>FALSE<ept id="p3">**</ept>).</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>The property <bpt id="p1">**</bpt>DISPID_AMBIENT_USERMODE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>One of the standard HRESULT values.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetDirty</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Returns the value of data member <ph id="ph1">`m_bRequiresSave`</ph>.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Returns the value of data member <bpt id="p1">[</bpt>m_bRequiresSave<ept id="p1">](#ccomcontrolbase__m_brequiressave)</ept>.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>This value is set using <bpt id="p1">[</bpt>CComControlBase::SetDirty<ept id="p1">](#ccomcontrolbase__setdirty)</ept>.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>CComControlBase::GetZoomInfo</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>Retrieves the x and y values of the numerator and denominator of the zoom factor for a control activated for in-place editing.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>The structure that will hold the zoom factor's numerator and denominator.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>ATL_DRAWINFO<ept id="p1">](../../atl/reference/atl-drawinfo-structure.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>The zoom factor is the proportion of the control's natural size to its current extent.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>CComControlBase::InPlaceActivate</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Causes the control to transition from the inactive state to whatever state the verb in <ph id="ph1">`iVerb`</ph> indicates.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>Value indicating the action to be performed by <bpt id="p1">[</bpt>IOleObjectImpl::DoVerb<ept id="p1">](../../atl/reference/ioleobjectimpl-class.md#ioleobjectimpl__doverb)</ept>.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>prcPosRect</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Pointer to the position of the in-place control.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>One of the standard HRESULT values.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Before activation, this method checks that the control has a client site, checks how much of the control is visible, and gets the control's location in the parent window.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>After the control is activated, this method activates the control's user interface and tells the container to make the control visible.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>This method also retrieves an <ph id="ph1">`IOleInPlaceSite`</ph>, <bpt id="p1">**</bpt>IOleInPlaceSiteEx<ept id="p1">**</ept>, or <bpt id="p2">**</bpt>IOleInPlaceSiteWindowless<ept id="p2">**</ept> interface pointer for the control and stores it in the control class's data member <bpt id="p3">[</bpt>CComControlBase::m_spInPlaceSite<ept id="p3">](#ccomcontrolbase__m_spinplacesite)</ept>.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>The control class data members <bpt id="p1">[</bpt>CComControlBase::m_bInPlaceSiteEx<ept id="p1">](#ccomcontrolbase__m_binplacesiteex)</ept>, <bpt id="p2">[</bpt>CComControlBase::m_bWndLess<ept id="p2">](#ccomcontrolbase__m_bwndless)</ept>, <bpt id="p3">[</bpt>CComControlBase::m_bWasOnceWindowless<ept id="p3">](#ccomcontrolbase__m_bwasoncewindowless)</ept>, and <bpt id="p4">[</bpt>CComControlBase::m_bNegotiatedWnd<ept id="p4">](#ccomcontrolbase__m_bnegotiatedwnd)</ept> are set to true as appropriate.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>CComControlBase::InternalGetSite</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Call this method to query the control site for a pointer to the identified interface.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>The IID of the interface pointer that should be returned in <ph id="ph1">`ppUnkSite`</ph>.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>Address of the pointer variable that receives the interface pointer requested in <ph id="ph1">`riid`</ph>.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, or an error HRESULT on failure.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>If the site supports the interface requested in <ph id="ph1">`riid`</ph>, the pointer is returned by means of <ph id="ph2">`ppUnkSite`</ph>.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>Otherwise, <ph id="ph1">`ppUnkSite`</ph> is set to NULL.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_bAutoSize</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Flag indicating the control cannot be any other size.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>This flag is checked by <ph id="ph1">`IOleObjectImpl::SetExtent`</ph> and, if <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, causes the function to return <bpt id="p2">**</bpt>E_FAIL<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>To use this data member within your control class, you must declare it as a data member in your control class.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Your control class will not inherit this data member from the base class because it is declared within a union in the base class.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>If you add the <bpt id="p1">**</bpt>Auto Size<ept id="p1">**</ept> option on the <bpt id="p2">[</bpt>Stock Properties<ept id="p2">](../../atl/reference/stock-properties-atl-control-wizard.md)</ept> tab of the ATL Control Wizard, the wizard automatically creates this data member in your control class, creates put and get methods for the property, and supports <bpt id="p3">[</bpt>IPropertyNotifySink<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms692638)</ept> to automatically notify the container when the property changes.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_bDrawFromNatural</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>Flag indicating that <ph id="ph1">`IDataObjectImpl::GetData`</ph> and <ph id="ph2">`CComControlBase::GetZoomInfo`</ph> should set the control size from <ph id="ph3">`m_sizeNatural`</ph> rather than from <ph id="ph4">`m_sizeExtent`</ph>.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>To use this data member within your control class, you must declare it as a data member in your control class.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Your control class will not inherit this data member from the base class because it is declared within a union in the base class.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_bDrawGetDataInHimetric</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Flag indicating that <ph id="ph1">`IDataObjectImpl::GetData`</ph> should use HIMETRIC units and not pixels when drawing.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Each logical HIMETRIC unit is 0.01 millimeter.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>To use this data member within your control class, you must declare it as a data member in your control class.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Your control class will not inherit this data member from the base class because it is declared within a union in the base class.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_bInPlaceActive</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>Flag indicating the control is in-place active.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>This means the control is visible and its window, if any, is visible, but its menus and toolbars may not be active.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`m_bUIActive`</ph> flag indicates the control's user interface, such as menus, is also active.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>To use this data member within your control class, you must declare it as a data member in your control class.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Your control class will not inherit this data member from the base class because it is declared within a union in the base class.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_bInPlaceSiteEx</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>Flag indicating the container supports the <bpt id="p1">**</bpt>IOleInPlaceSiteEx<ept id="p1">**</ept> interface and OCX96 control features, such as windowless and flicker-free controls.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>To use this data member within your control class, you must declare it as a data member in your control class.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Your control class will not inherit this data member from the base class because it is declared within a union in the base class.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>The data member <ph id="ph1">`m_spInPlaceSite`</ph> points to an <bpt id="p1">[</bpt>IOleInPlaceSite<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686586)</ept>, <bpt id="p2">[</bpt>IOleInPlaceSiteEx<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms693461)</ept>, or <bpt id="p3">[</bpt>IOleInPlaceSiteWindowless<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms682300)</ept> interface, depending on the value of the <ph id="ph2">`m_bWndLess`</ph> and <ph id="ph3">`m_bInPlaceSiteEx`</ph> flags.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>(The data member <ph id="ph1">`m_bNegotiatedWnd`</ph> must be <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> for the <ph id="ph2">`m_spInPlaceSite`</ph> pointer to be valid.)</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`m_bWndLess`</ph> is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> and <ph id="ph2">`m_bInPlaceSiteEx`</ph> is <bpt id="p2">**</bpt>TRUE<ept id="p2">**</ept>, <ph id="ph3">`m_spInPlaceSite`</ph> is an <bpt id="p3">**</bpt>IOleInPlaceSiteEx<ept id="p3">**</ept> interface pointer.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>m_spInPlaceSite<ept id="p1">](#ccomcontrolbase__m_spinplacesite)</ept> for a table showing the relationship among these three data members.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_bNegotiatedWnd</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>Flag indicating whether or not the control has negotiated with the container about support for OCX96 control features (such as flicker-free and windowless controls), and whether the control is windowed or windowless.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>To use this data member within your control class, you must declare it as a data member in your control class.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>Your control class will not inherit this data member from the base class because it is declared within a union in the base class.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`m_bNegotiatedWnd`</ph> flag must be <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> for the <ph id="ph2">`m_spInPlaceSite`</ph> pointer to be valid.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_bRecomposeOnResize</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>Flag indicating the control wants to recompose its presentation when the container changes the control's display size.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>To use this data member within your control class, you must declare it as a data member in your control class.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>Your control class will not inherit this data member from the base class because it is declared within a union in the base class.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>This flag is checked by <bpt id="p1">[</bpt>IOleObjectImpl::SetExtent<ept id="p1">](../../atl/reference/ioleobjectimpl-class.md#ioleobjectimpl__setextent)</ept> and, if <bpt id="p2">**</bpt>TRUE<ept id="p2">**</ept>, <ph id="ph1">`SetExtent`</ph> notifies the container of view changes.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>if this flag is set, the <bpt id="p1">**</bpt>OLEMISC_RECOMPOSEONRESIZE<ept id="p1">**</ept> bit in the <bpt id="p2">[</bpt>OLEMISC<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms678497)</ept> enumeration should also be set.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_bRequiresSave</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>Flag indicating the control has changed since it was last saved.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>The value of <ph id="ph1">`m_bRequiresSave`</ph> can be set with <bpt id="p1">[</bpt>CComControlBase::SetDirty<ept id="p1">](#ccomcontrolbase__setdirty)</ept> and retrieved with <bpt id="p2">[</bpt>CComControlBase::GetDirty<ept id="p2">](#ccomcontrolbase__getdirty)</ept>.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>To use this data member within your control class, you must declare it as a data member in your control class.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Your control class will not inherit this data member from the base class because it is declared within a union in the base class.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_bResizeNatural</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>Flag indicating the control wants to resize its natural extent (its unscaled physical size) when the container changes the control's display size.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>This flag is checked by <ph id="ph1">`IOleObjectImpl::SetExtent`</ph> and, if <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the size passed into <ph id="ph2">`SetExtent`</ph> is assigned to <ph id="ph3">`m_sizeNatural`</ph>.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>The size passed into <ph id="ph1">`SetExtent`</ph> is always assigned to <ph id="ph2">`m_sizeExtent`</ph>, regardless of the value of <ph id="ph3">`m_bResizeNatural`</ph>.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>To use this data member within your control class, you must declare it as a data member in your control class.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>Your control class will not inherit this data member from the base class because it is declared within a union in the base class.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_bUIActive</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>Flag indicating the control's user interface, such as menus and toolbars, is active.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`m_bInPlaceActive`</ph> flag indicates that the control is active, but not that its user interface is active.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>To use this data member within your control class, you must declare it as a data member in your control class.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>Your control class will not inherit this data member from the base class because it is declared within a union in the base class.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_bUsingWindowRgn</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>Flag indicating the control is using the container-supplied window region.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>To use this data member within your control class, you must declare it as a data member in your control class.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>Your control class will not inherit this data member from the base class because it is declared within a union in the base class.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_bWasOnceWindowless</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Flag indicating the control has been windowless, but may or may not be windowless now.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>To use this data member within your control class, you must declare it as a data member in your control class.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Your control class will not inherit this data member from the base class because it is declared within a union in the base class.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_bWindowOnly</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>Flag indicating the control should be windowed, even if the container supports windowless controls.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>To use this data member within your control class, you must declare it as a data member in your control class.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Your control class will not inherit this data member from the base class because it is declared within a union in the base class.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_bWndLess</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>Flag indicating the control is windowless.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>To use this data member within your control class, you must declare it as a data member in your control class.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>Your control class will not inherit this data member from the base class because it is declared within a union in the base class.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>The data member <ph id="ph1">`m_spInPlaceSite`</ph> points to an <bpt id="p1">[</bpt>IOleInPlaceSite<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686586)</ept>, <bpt id="p2">[</bpt>IOleInPlaceSiteEx<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms693461)</ept>, or <bpt id="p3">[</bpt>IOleInPlaceSiteWindowless<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms682300)</ept> interface, depending on the value of the <ph id="ph2">`m_bWndLess`</ph> and <bpt id="p4">[</bpt>CComControlBase::m_bInPlaceSiteEx<ept id="p4">](#ccomcontrolbase__m_binplacesiteex)</ept> flags.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>(The data member <bpt id="p1">[</bpt>CComControlBase::m_bNegotiatedWnd<ept id="p1">](#ccomcontrolbase__m_bnegotiatedwnd)</ept> must be <bpt id="p2">**</bpt>TRUE<ept id="p2">**</ept> for the <bpt id="p3">[</bpt>CComControlBase::m_spInPlaceSite<ept id="p3">](#ccomcontrolbase__m_spinplacesite)</ept> pointer to be valid.)</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`m_bWndLess`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, <ph id="ph2">`m_spInPlaceSite`</ph> is an <bpt id="p2">**</bpt>IOleInPlaceSiteWindowless<ept id="p2">**</ept> interface pointer.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CComControlBase::m_spInPlaceSite<ept id="p1">](#ccomcontrolbase__m_spinplacesite)</ept> for a table showing the complete relationship between these data members.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_hWndCD</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>Contains a reference to the window handle associated with the control.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>To use this data member within your control class, you must declare it as a data member in your control class.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>Your control class will not inherit this data member from the base class because it is declared within a union in the base class.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_nFreezeEvents</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>A count of the number of times the container has frozen events (refused to accept events) without an intervening thaw of events (acceptance of events).</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>To use this data member within your control class, you must declare it as a data member in your control class.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>Your control class will not inherit this data member from the base class because it is declared within a union in the base class.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_rcPos</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>The position in pixels of the control, expressed in the coordinates of the container.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>To use this data member within your control class, you must declare it as a data member in your control class.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>Your control class will not inherit this data member from the base class because it is declared within a union in the base class.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_sizeExtent</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>The extent of the control in HIMETRIC units (each unit is 0.01 millimeters) for a particular display.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>To use this data member within your control class, you must declare it as a data member in your control class.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>Your control class will not inherit this data member from the base class because it is declared within a union in the base class.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>This size is scaled by the display.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>The control's physical size is specified in the <ph id="ph1">`m_sizeNatural`</ph> data member and is fixed.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>You can convert the size to pixels with the global function <bpt id="p1">[</bpt>AtlHiMetricToPixel<ept id="p1">](http://msdn.microsoft.com/library/00c3af58-7298-4082-9a2e-5b68a8cec6fd)</ept>.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_sizeNatural</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>The physical size of the control in HIMETRIC units (each unit is 0.01 millimeters).</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>To use this data member within your control class, you must declare it as a data member in your control class.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>Your control class will not inherit this data member from the base class because it is declared within a union in the base class.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>This size is fixed, while the size in <ph id="ph1">`m_sizeExtent`</ph> is scaled by the display.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>You can convert the size to pixels with the global function <bpt id="p1">[</bpt>AtlHiMetricToPixel<ept id="p1">](http://msdn.microsoft.com/library/00c3af58-7298-4082-9a2e-5b68a8cec6fd)</ept>.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_spAdviseSink</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>A direct pointer to the advisory connection on the container (the container's <bpt id="p1">[</bpt>IAdviseSink<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms692513)</ept>).</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>To use this data member within your control class, you must declare it as a data member in your control class.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>Your control class will not inherit this data member from the base class because it is declared within a union in the base class.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_spAmbientDispatch</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CComDispatchDriver`</ph> object that lets you retrieve and set an object's properties through an <ph id="ph2">`IDispatch`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>To use this data member within your control class, you must declare it as a data member in your control class.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>Your control class will not inherit this data member from the base class because it is declared within a union in the base class.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_spClientSite</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>A pointer to the control's client site within the container.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>To use this data member within your control class, you must declare it as a data member in your control class.</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>Your control class will not inherit this data member from the base class because it is declared within a union in the base class.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_spDataAdviseHolder</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>Provides a standard means to hold advisory connections between data objects and advise sinks.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>To use this data member within your control class, you must declare it as a data member in your control class.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>Your control class will not inherit this data member from the base class because it is declared within a union in the base class.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>A data object is a control that can transfer data and that implements <bpt id="p1">[</bpt>IDataObject<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms688421)</ept>, whose methods specify the format and transfer medium of the data.</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>The interface <ph id="ph1">`m_spDataAdviseHolder`</ph> implements the <bpt id="p1">[</bpt>IDataObject::DAdvise<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms692579)</ept> and <bpt id="p2">[</bpt>IDataObject::DUnadvise<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms692448)</ept> methods to establish and delete advisory connections to the container.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>The control's container must implement an advise sink by supporting the <bpt id="p1">[</bpt>IAdviseSink<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms692513)</ept> interface.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_spInPlaceSite</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>A pointer to the container's <bpt id="p1">[</bpt>IOleInPlaceSite<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686586)</ept>, <bpt id="p2">[</bpt>IOleInPlaceSiteEx<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms693461)</ept>, or <bpt id="p3">[</bpt>IOleInPlaceSiteWindowless<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms682300)</ept> interface pointer.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>To use this data member within your control class, you must declare it as a data member in your control class.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>Your control class will not inherit this data member from the base class because it is declared within a union in the base class.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`m_spInPlaceSite`</ph> pointer is valid only if the <bpt id="p1">[</bpt>m_bNegotiatedWnd<ept id="p1">](#ccomcontrolbase__m_bnegotiatedwnd)</ept> flag is <bpt id="p2">**</bpt>TRUE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>The following table shows how the <ph id="ph1">`m_spInPlaceSite`</ph> pointer type depends on the <bpt id="p1">[</bpt>m_bWndLess<ept id="p1">](#ccomcontrolbase__m_bwndless)</ept> and <bpt id="p2">[</bpt>m_bInPlaceSiteEx<ept id="p2">](#ccomcontrolbase__m_binplacesiteex)</ept> data member flags:</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>m_spInPlaceSite Type</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>m_bWndLess Value</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>m_bInPlaceSiteEx Value</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>IOleInPlaceSiteWindowless</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>TRUE</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> or <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>IOleInPlaceSiteEx</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>FALSE</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>TRUE</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>FALSE</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>FALSE</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>CComControlBase::m_spOleAdviseHolder</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>Provides a standard implementation of a way to hold advisory connections.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>To use this data member within your control class, you must declare it as a data member in your control class.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>Your control class will not inherit this data member from the base class because it is declared within a union in the base class.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>The interface <ph id="ph1">`m_spOleAdviseHolder`</ph> implements the <bpt id="p1">[</bpt>IOleObject::Advise<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686573)</ept> and <bpt id="p2">[</bpt>IOleObject::Unadvise<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms693749)</ept> methods to establish and delete advisory connections to the container.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>The control's container must implement an advise sink by supporting the <bpt id="p1">[</bpt>IAdviseSink<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms692513)</ept> interface.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>CComControlBase::OnDraw</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>Override this method to draw your control.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>A reference to the <bpt id="p1">[</bpt>ATL_DRAWINFO<ept id="p1">](../../atl/reference/atl-drawinfo-structure.md)</ept> structure that contains drawing information such as the draw aspect, the control bounds, and whether the drawing is optimized or not.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>The default <ph id="ph1">`OnDraw`</ph> deletes or restores the device context or does nothing, depending on flags set in <bpt id="p1">[</bpt>CComControlBase::OnDrawAdvanced<ept id="p1">](#ccomcontrolbase__ondrawadvanced)</ept>.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`OnDraw`</ph> method is automatically added to your control class when you create your control with the ATL Control Wizard.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>The wizard's default <ph id="ph1">`OnDraw`</ph> draws a rectangle with the label "ATL 8.0".</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CComControlBase::GetAmbientAppearance<ept id="p1">](#ccomcontrolbase__getambientappearance)</ept>.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>CComControlBase::OnDrawAdvanced</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>The default <ph id="ph1">`OnDrawAdvanced`</ph> prepares a normalized device context for drawing, then calls your control class's <ph id="ph2">`OnDraw`</ph> method.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>A reference to the <bpt id="p1">[</bpt>ATL_DRAWINFO<ept id="p1">](../../atl/reference/atl-drawinfo-structure.md)</ept> structure that contains drawing information such as the draw aspect, the control bounds, and whether the drawing is optimized or not.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>A standard <ph id="ph1">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>Override this method if you want to accept the device context passed by the container without normalizing it.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CComControlBase::OnDraw<ept id="p1">](#ccomcontrolbase__ondraw)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>CComControlBase::OnKillFocus</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>Checks that the control is in-place active and has a valid control site, then informs the container that the control has lost focus.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>Reserved.</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>Reserved.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>Reserved.</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>Flag that indicates whether the window message was successfully handled.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>Always returns 1.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>CComControlBase::OnMouseActivate</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>Checks that the UI is in user mode, then activates the control.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>Reserved.</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>Reserved.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>Reserved.</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>Flag that indicates whether the window message was successfully handled.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>Always returns 1.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>CComControlBase::OnPaint</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>Prepares the container for painting, gets the control's client area, then calls the control class's <ph id="ph1">`OnDrawAdvanced`</ph> method.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>Reserved.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>An existing HDC.</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>Reserved.</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>Reserved.</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>Always returns zero.</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`wParam`</ph> is not NULL, <ph id="ph2">`OnPaint`</ph> assumes it contains a valid HDC and uses it instead of <bpt id="p1">[</bpt>CComControlBase::m_hWndCD<ept id="p1">](#ccomcontrolbase__m_hwndcd)</ept>.</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>CComControlBase::OnSetFocus</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>Checks that the control is in-place active and has a valid control site, then informs the container the control has gained focus.</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>Reserved.</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>Reserved.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>Reserved.</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>Flag that indicates whether the window message was successfully handled.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>Always returns 1.</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>Sends a notification to the container that the control has received focus.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>CComControlBase::PreTranslateAccelerator</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>Override this method to provide your own keyboard accelerator handlers.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>Reserved.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>hRet</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>Reserved.</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>By default returns <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>CComControlBase::SendOnClose</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>Notifies all advisory sinks registered with the advise holder that the control has been closed.</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, or an error HRESULT on failure.</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>Sends a notification that the control has closed its advisory sinks.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>CComControlBase::SendOnDataChange</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>Notifies all advisory sinks registered with the advise holder that the control data has changed.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>advf</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>Advise flags that specify how the call to <bpt id="p1">[</bpt>IAdviseSink::OnDataChange<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms687283)</ept> is made.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>Values are from the <bpt id="p1">[</bpt>ADVF<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms693742)</ept> enumeration.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, or an error HRESULT on failure.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>CComControlBase::SendOnRename</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>Notifies all advisory sinks registered with the advise holder that the control has a new moniker.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>pmk</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>Pointer to the new moniker of the control.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, or an error HRESULT on failure.</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>Sends a notification that the moniker for the control has changed.</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>CComControlBase::SendOnSave</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>Notifies all advisory sinks registered with the advise holder that the control has been saved.</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, or an error HRESULT on failure.</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>Sends a notification that the control has just saved its data.</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>CComControlBase::SendOnViewChange</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>Notifies all registered advisory sinks that the control's view has changed.</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>The aspect or view of the control.</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>lindex</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>The portion of the view that has changed.</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>Only -1 is valid.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, or an error HRESULT on failure.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>calls <bpt id="p1">[</bpt>IAdviseSink::OnViewChange<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms694337)</ept>.</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>The only value of <bpt id="p1">*</bpt>lindex<ept id="p1">*</ept> currently supported is -1, which indicates that the entire view is of interest.</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>CComControlBase::SetControlFocus</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>Sets or removes the keyboard focus to or from the control.</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>bGrab</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, sets the keyboard focus to the calling control.</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, removes the keyboard focus from the calling control, provided it has the focus.</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if the control successfully receives focus; otherwise, <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>For a windowed control, the Windows API function <bpt id="p1">[</bpt>SetFocus<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646312)</ept> is called.</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>For a windowless control, <bpt id="p1">[</bpt>IOleInPlaceSiteWindowless::SetFocus<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679745)</ept> is called.</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>Through this call, a windowless control obtains the keyboard focus and can respond to window messages.</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>CComControlBase::SetDirty</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>Sets the data member <ph id="ph1">`m_bRequiresSave`</ph> to the value in <ph id="ph2">`bDirty`</ph>.</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>Value of the data member <bpt id="p1">[</bpt>CComControlBase::m_bRequiresSave<ept id="p1">](#ccomcontrolbase__m_brequiressave)</ept>.</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SetDirty(TRUE)<ept id="p1">**</ept> should be called to flag that the control has changed since it was last saved.</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>The value of <ph id="ph1">`m_bRequiresSave`</ph> is retrieved with <bpt id="p1">[</bpt>CComControlBase::GetDirty<ept id="p1">](#ccomcontrolbase__getdirty)</ept>.</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>CComControl Class</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>Class Overview</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>