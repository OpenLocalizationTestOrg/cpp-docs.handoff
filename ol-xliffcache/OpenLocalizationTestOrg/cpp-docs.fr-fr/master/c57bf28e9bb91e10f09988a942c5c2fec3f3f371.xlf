<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c57bf28e9bb91e10f09988a942c5c2fec3f3f371</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\crtsetreportfile.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0592c912b426ad5b9d4f9722f22e688dbb411e44</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">62f6264793849ab44dfd3ee763c70d12e2e971bd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_CrtSetReportFile | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_CrtSetReportFile</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>After you use <bpt id="p1">[</bpt>_CrtSetReportMode<ept id="p1">](../../c-runtime-library/reference/crtsetreportmode.md)</ept> to specify <ph id="ph1">`_CRTDBG_MODE_FILE`</ph>, you can specify the file handle to receive the message text.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>is also used by <bpt id="p1">[</bpt>_CrtDbgReport, _CrtDbgReportW<ept id="p1">](../../c-runtime-library/reference/crtdbgreport-crtdbgreportw.md)</ept> to specify the destination of text (debug version only).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Report type: <ph id="ph1">`_CRT_WARN`</ph>, <ph id="ph2">`_CRT_ERROR`</ph>, and <ph id="ph3">`_CRT_ASSERT`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>New report file for <ph id="ph1">`reportType`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>On successful completion, <ph id="ph1">`_CrtSetReportFile`</ph> returns the previous report file defined for the report type specified in <ph id="ph2">`reportType`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If an invalid value is passed in for <ph id="ph1">`reportType`</ph>, this function invokes the invalid parameter handler, as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, <ph id="ph1">`errno`</ph> is set to <ph id="ph2">`EINVAL`</ph> and the function returns <ph id="ph3">`_CRTDBG_HFILE_ERROR`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id="p1">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>is used with the <bpt id="p1">[</bpt>_CrtSetReportMode<ept id="p1">](../../c-runtime-library/reference/crtsetreportmode.md)</ept> function to define the destination or destinations for a specific report type generated by <ph id="ph1">`_CrtDbgReport`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`_CrtSetReportMode`</ph> has been called to assign the <ph id="ph2">`_CRTDBG_MODE_FILE`</ph> reporting mode for a specific report type, <ph id="ph3">`_CrtSetReportFile`</ph> should then be called to define the specific file or stream to use as the destination.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">[</bpt>_DEBUG<ept id="p1">](../../c-runtime-library/debug.md)</ept> is not defined, calls to <ph id="ph1">`_CrtSetReportFile`</ph> are removed during preprocessing.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following table shows a list of the available choices for <ph id="ph1">`reportFile`</ph> and the resulting behavior of <ph id="ph2">`_CrtDbgReport`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>These options are defined as bit flags in Crtdbg.h.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A handle to the file that will be the destination for messages.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>No attempt is made to verify the validity of the handle.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You must open and close the handle to the file.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Writes message to <ph id="ph1">`stderr`</ph>, which can be redirected as follows:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Writes message to <ph id="ph1">`stdout`</ph>, which you can redirect.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Returns the current report mode.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The report file used by each report type can be separately controlled.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, it is possible to specify that a <ph id="ph1">`reportType`</ph> of <ph id="ph2">`_CRT_ERROR`</ph> be reported to <ph id="ph3">`stderr`</ph>, while a <ph id="ph4">`reportType`</ph> of <ph id="ph5">`_CRT_ASSERT`</ph> be reported to a user-defined file handle or stream.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Optional header</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>crtdbg.h&gt;</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>errno.h&gt;</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The console is not supported in <ph id="ph1">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> apps.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The standard stream handles that are associated with the console—<ph id="ph1">`stdin`</ph>, <ph id="ph2">`stdout`</ph>, and <ph id="ph3">`stderr`</ph>—must be redirected before C run-time functions can use them in <ph id="ph4">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> apps.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Libraries:<ept id="p1">**</ept> Debug versions of <bpt id="p2">[</bpt>CRT Library Features<ept id="p2">](../../c-runtime-library/crt-library-features.md)</ept> only.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Debug Routines</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>