{"nodes":[{"pos":[12,94],"content":"Platform, default, and cli Namespaces  (C++ Component Extensions) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Platform, default, and cli Namespaces  (C++ Component Extensions) | Microsoft Docs","pos":[0,82]}]},{"content":"Platform, default, and cli Namespaces  (C++ Component Extensions)","pos":[684,749]},{"content":"A namespace qualifies the names of language elements so the names do not conflict with otherwise identical names elsewhere in the source code.","pos":[750,892]},{"content":"For example, a name collision might prevent the compiler from recognizing <bpt id=\"p1\">[</bpt>Context-Sensitive Keywords<ept id=\"p1\">](../windows/context-sensitive-keywords-cpp-component-extensions.md)</ept>.","pos":[893,1063],"source":" For example, a name collision might prevent the compiler from recognizing [Context-Sensitive Keywords](../windows/context-sensitive-keywords-cpp-component-extensions.md)."},{"content":"Namespaces are used by the compiler but are not preserved in the compiled assembly.","pos":[1064,1147]},{"content":"All Runtimes","pos":[1156,1168]},{"content":"Visual C++ provides a default namespace for your project when you create the project.","pos":[1172,1257]},{"content":"You can manually rename the namespace, although in <ph id=\"ph1\">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph> the name of the .winmd file must match the name of the root namespace.","pos":[1258,1432],"source":" You can manually rename the namespace, although in [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)] the name of the .winmd file must match the name of the root namespace."},{"pos":[1497,1627],"content":"For more information, see <bpt id=\"p1\">[</bpt>Namespaces and type visibility (C++/CX)<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/hh969551.aspx)</ept>.","source":"For more information, see [Namespaces and type visibility (C++/CX)](http://msdn.microsoft.com/library/windows/apps/hh969551.aspx)."},{"content":"Requirements","pos":[1637,1649]},{"pos":[1653,1677],"content":"Compiler option: <bpt id=\"p1\">**</bpt>/ZW<ept id=\"p1\">**</ept>","source":"Compiler option: **/ZW**"},{"content":"Syntax","pos":[1763,1769]},{"content":"Remarks","pos":[1818,1825]},{"content":"The <ph id=\"ph1\">[!INCLUDE[cppcli](../build/reference/includes/cppcli_md.md)]</ph> supports the <ph id=\"ph2\">`cli`</ph> namespace.","pos":[1834,1928],"source":"The [!INCLUDE[cppcli](../build/reference/includes/cppcli_md.md)] supports the `cli` namespace."},{"content":"When compiling with <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept>, the <ph id=\"ph1\">`using`</ph> statement in the Syntax section is implied.","pos":[1929,2014],"source":" When compiling with **/clr**, the `using` statement in the Syntax section is implied."},{"pos":[2021,2080],"content":"The following language features are in the <ph id=\"ph1\">`cli`</ph> namespace:","source":"The following language features are in the `cli` namespace:"},{"content":"Arrays","pos":[2091,2097]},{"content":"interior_ptr (C++/CLI)","pos":[2156,2178]},{"content":"pin_ptr (C++/CLI)","pos":[2226,2243]},{"content":"safe_cast","pos":[2286,2295]},{"content":"Requirements","pos":[2356,2368]},{"pos":[2372,2397],"content":"Compiler option: <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept>","source":"Compiler option: **/clr**"},{"content":"Examples","pos":[2407,2415]},{"content":"Example","pos":[2421,2428]},{"content":"The following code example demonstrates that it is possible to use a symbol in the <ph id=\"ph1\">`cli`</ph> namespace as a user-defined symbol in your code.","pos":[2437,2574],"source":"The following code example demonstrates that it is possible to use a symbol in the `cli` namespace as a user-defined symbol in your code."},{"content":"However, once you have done so, you will have to explicitly or implicitly qualify your references to the <ph id=\"ph1\">`cli`</ph> language element of the same name.","pos":[2576,2721],"source":"  However, once you have done so, you will have to explicitly or implicitly qualify your references to the `cli` language element of the same name."},{"content":"See Also","pos":[3103,3111]},{"content":"Component Extensions for Runtime Platforms","pos":[3116,3158]}],"content":"---\ntitle: \"Platform, default, and cli Namespaces  (C++ Component Extensions) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"lang\"\n  - \"cli\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"lang namespace\"\n  - \"cli namespace\"\nms.assetid: 9d38bd1e-dc78-47d1-a84b-9b4683e52c9c\ncaps.latest.revision: 19\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Platform, default, and cli Namespaces  (C++ Component Extensions)\nA namespace qualifies the names of language elements so the names do not conflict with otherwise identical names elsewhere in the source code. For example, a name collision might prevent the compiler from recognizing [Context-Sensitive Keywords](../windows/context-sensitive-keywords-cpp-component-extensions.md). Namespaces are used by the compiler but are not preserved in the compiled assembly.  \n  \n## All Runtimes  \n Visual C++ provides a default namespace for your project when you create the project. You can manually rename the namespace, although in [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)] the name of the .winmd file must match the name of the root namespace.  \n  \n## [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]  \n For more information, see [Namespaces and type visibility (C++/CX)](http://msdn.microsoft.com/library/windows/apps/hh969551.aspx).  \n  \n### Requirements  \n Compiler option: **/ZW**  \n  \n## [!INCLUDE[clr_for_headings](../dotnet/includes/clr_for_headings_md.md)]  \n **Syntax**  \n  \n```  \nusing namespace cli;  \n```  \n  \n **Remarks**  \n  \n The [!INCLUDE[cppcli](../build/reference/includes/cppcli_md.md)] supports the `cli` namespace. When compiling with **/clr**, the `using` statement in the Syntax section is implied.  \n  \n The following language features are in the `cli` namespace:  \n  \n-   [Arrays](../windows/arrays-cpp-component-extensions.md)  \n  \n-   [interior_ptr (C++/CLI)](../windows/interior-ptr-cpp-cli.md)  \n  \n-   [pin_ptr (C++/CLI)](../windows/pin-ptr-cpp-cli.md)  \n  \n-   [safe_cast](../windows/safe-cast-cpp-component-extensions.md)  \n  \n### Requirements  \n Compiler option: **/clr**  \n  \n### Examples  \n **Example**  \n  \n The following code example demonstrates that it is possible to use a symbol in the `cli` namespace as a user-defined symbol in your code.  However, once you have done so, you will have to explicitly or implicitly qualify your references to the `cli` language element of the same name.  \n  \n```  \n// cli_namespace.cpp  \n// compile with: /clr  \nusing namespace cli;  \nint main() {  \n   array<int> ^ MyArray = gcnew array<int>(100);  \n   int array = 0;  \n  \n   array<int> ^ MyArray2 = gcnew array<int>(100);   // C2062  \n  \n   // OK  \n   cli::array<int> ^ MyArray2 = gcnew cli::array<int>(100);  \n   ::array<int> ^ MyArray3 = gcnew ::array<int>(100);  \n}  \n```  \n  \n## See Also  \n [Component Extensions for Runtime Platforms](../windows/component-extensions-for-runtime-platforms.md)"}