{"nodes":[{"pos":[12,47],"content":"CToolBarCtrl Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CToolBarCtrl Class | Microsoft Docs","pos":[0,35]}]},{"content":"CToolBarCtrl Class","pos":[746,764]},{"content":"Provides the functionality of the Windows toolbar common control.","pos":[765,830]},{"content":"Syntax","pos":[839,845]},{"content":"Members","pos":[904,911]},{"content":"Public Constructors","pos":[921,940]},{"content":"Name","pos":[947,951]},{"content":"Description","pos":[952,963]},{"content":"CToolBarCtrl::CToolBarCtrl","pos":[1002,1028]},{"pos":[1059,1094],"content":"Constructs a <ph id=\"ph1\">`CToolBarCtrl`</ph> object.","source":"Constructs a `CToolBarCtrl` object."},{"content":"Public Methods","pos":[1105,1119]},{"content":"Name","pos":[1126,1130]},{"content":"Description","pos":[1131,1142]},{"content":"CToolBarCtrl::AddBitmap","pos":[1181,1204]},{"content":"Adds one or more bitmap button images to the list of button images available for a toolbar control.","pos":[1232,1331]},{"content":"CToolBarCtrl::AddButtons","pos":[1337,1361]},{"content":"Adds one or more buttons to a toolbar control.","pos":[1390,1436]},{"content":"CToolBarCtrl::AddString","pos":[1442,1465]},{"content":"Adds a new string, passed as a resource ID, to the toolbar's internal list of strings.","pos":[1493,1579]},{"content":"CToolBarCtrl::AddStrings","pos":[1585,1609]},{"content":"Adds a new string or strings, passed as a pointer to a buffer of null-separated strings, to the toolbar's internal list of strings.","pos":[1638,1769]},{"content":"CToolBarCtrl::AutoSize","pos":[1775,1797]},{"content":"Resizes a toolbar control.","pos":[1824,1850]},{"content":"CToolBarCtrl::ChangeBitmap","pos":[1856,1882]},{"content":"Changes the bitmap for a button in the current toolbar control.","pos":[1913,1976]},{"content":"CToolBarCtrl::CheckButton","pos":[1982,2007]},{"content":"Checks or clears a given button in a toolbar control.","pos":[2037,2090]},{"content":"CToolBarCtrl::CommandToIndex","pos":[2096,2124]},{"content":"Retrieves the zero-based index for the button associated with the specified command identifier.","pos":[2157,2252]},{"content":"CToolBarCtrl::Create","pos":[2258,2278]},{"pos":[2303,2372],"content":"Creates a toolbar control and attaches it to a <ph id=\"ph1\">`CToolBarCtrl`</ph> object.","source":"Creates a toolbar control and attaches it to a `CToolBarCtrl` object."},{"content":"CToolBarCtrl::CreateEx","pos":[2378,2400]},{"pos":[2427,2539],"content":"Creates a toolbar control with the specified Windows extended styles and attaches it to a <ph id=\"ph1\">`CToolBarCtrl`</ph> object.","source":"Creates a toolbar control with the specified Windows extended styles and attaches it to a `CToolBarCtrl` object."},{"content":"CToolBarCtrl::Customize","pos":[2545,2568]},{"content":"Displays the Customize Toolbar dialog box.","pos":[2596,2638]},{"content":"CToolBarCtrl::DeleteButton","pos":[2644,2670]},{"content":"Deletes a button from the toolbar control.","pos":[2701,2743]},{"content":"CToolBarCtrl::EnableButton","pos":[2749,2775]},{"content":"Enables or disables the specified button in a toolbar control.","pos":[2806,2868]},{"content":"CToolBarCtrl::GetAnchorHighlight","pos":[2874,2906]},{"content":"Retrieves the anchor highlight setting for a toolbar.","pos":[2943,2996]},{"content":"CToolBarCtrl::GetBitmap","pos":[3002,3025]},{"content":"Retrieves the index of the bitmap associated with a button in a toolbar.","pos":[3053,3125]},{"content":"CToolBarCtrl::GetBitmapFlags","pos":[3131,3159]},{"content":"Gets flags associated with the toolbar's bitmap.","pos":[3192,3240]},{"content":"CToolBarCtrl::GetButton","pos":[3246,3269]},{"content":"Retrieves information about the specified button in a toolbar control.","pos":[3297,3367]},{"content":"CToolBarCtrl::GetButtonCount","pos":[3373,3401]},{"content":"Retrieves a count of the buttons currently in the toolbar control.","pos":[3434,3500]},{"content":"CToolBarCtrl::GetButtonInfo","pos":[3506,3533]},{"content":"Retrieves the information for a button in a toolbar.","pos":[3565,3617]},{"content":"CToolBarCtrl::GetButtonSize","pos":[3623,3650]},{"content":"Retrieves the current width and height of toolbar buttons, in pixels.","pos":[3682,3751]},{"content":"CToolBarCtrl::GetColorScheme","pos":[3757,3785]},{"content":"Retrieves the color scheme of the current toolbar control.","pos":[3818,3876]},{"content":"CToolBarCtrl::GetDisabledImageList","pos":[3882,3916]},{"content":"Retrieves the image list that a toolbar control uses to display disabled buttons.","pos":[3955,4036]},{"content":"CToolBarCtrl::GetDropTarget","pos":[4042,4069]},{"pos":[4101,4221],"content":"Retrieves the <bpt id=\"p1\">[</bpt>IDropTarget<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms679679)</ept> interface for a toolbar control.","source":"Retrieves the [IDropTarget](http://msdn.microsoft.com/library/windows/desktop/ms679679) interface for a toolbar control."},{"content":"CToolBarCtrl::GetExtendedStyle","pos":[4227,4257]},{"content":"Retrieves the extended styles for a toolbar control.","pos":[4292,4344]},{"content":"CToolBarCtrl::GetHotImageList","pos":[4350,4379]},{"content":"Retrieves the image list that a toolbar control uses to display \"hot\" buttons.","pos":[4413,4491]},{"content":"A hot button appears highlighted when the mouse pointer is above it.","pos":[4492,4560]},{"content":"CToolBarCtrl::GetHotItem","pos":[4566,4590]},{"content":"Retrieves the index of the hot item in a toolbar.","pos":[4619,4668]},{"content":"CToolBarCtrl::GetImageList","pos":[4674,4700]},{"content":"Retrieves the image list that a toolbar control uses to display buttons in their default state.","pos":[4731,4826]},{"content":"CToolBarCtrl::GetInsertMark","pos":[4832,4859]},{"content":"Retrieves the current insertion mark for the toolbar.","pos":[4891,4944]},{"content":"CToolBarCtrl::GetInsertMarkColor","pos":[4950,4982]},{"content":"Retrieves the color used to draw the insertion mark for the toolbar.","pos":[5019,5087]},{"content":"CToolBarCtrl::GetItemRect","pos":[5093,5118]},{"content":"Retrieves the bounding rectangle of a button in a toolbar control.","pos":[5148,5214]},{"content":"CToolBarCtrl::GetMaxSize","pos":[5220,5244]},{"content":"Retrieves the total size of all of the visible buttons and separators in the toolbar.","pos":[5273,5358]},{"content":"CToolBarCtrl::GetMaxTextRows","pos":[5364,5392]},{"content":"Retrieves the maximum number of text rows displayed on a toolbar button.","pos":[5425,5497]},{"content":"CToolBarCtrl::GetMetrics","pos":[5503,5527]},{"content":"Retrieves the metrics of a toolbar control.","pos":[5556,5599]},{"content":"CToolBarCtrl::GetPadding","pos":[5605,5629]},{"content":"Retrieves the horizontal and vertical padding of the current toolbar control.","pos":[5658,5735]},{"content":"CToolBarCtrl::GetPressedImageList","pos":[5741,5774]},{"content":"Retrieves the image list that the current toolbar control uses to represent buttons in the pressed state.","pos":[5812,5917]},{"content":"CToolBarCtrl::GetRect","pos":[5923,5944]},{"content":"Retrieves the bounding rectangle for a specified toolbar button.","pos":[5970,6034]},{"content":"CToolBarCtrl::GetRows","pos":[6040,6061]},{"content":"Retrieves the number of rows of buttons currently displayed in the toolbar.","pos":[6087,6162]},{"content":"CToolBarCtrl::GetState","pos":[6168,6190]},{"content":"Retrieves information about the state of the specified button in a toolbar control, such as whether it is enabled, pressed, or checked.","pos":[6217,6352]},{"content":"CToolBarCtrl::GetString","pos":[6358,6381]},{"content":"Retrieves a toolbar string.","pos":[6409,6436]},{"content":"CToolBarCtrl::GetStyle","pos":[6442,6464]},{"content":"Retrieves the styles currently in use for a toolbar control.","pos":[6491,6551]},{"content":"CToolBarCtrl::GetToolTips","pos":[6557,6582]},{"content":"Retrieves the handle of the tool tip control, if any, associated with the toolbar control.","pos":[6612,6702]},{"content":"CToolBarCtrl::HideButton","pos":[6708,6732]},{"content":"Hides or shows the specified button in a toolbar control.","pos":[6761,6818]},{"content":"CToolBarCtrl::HitTest","pos":[6824,6845]},{"content":"Determines where a point lies in a toolbar control.","pos":[6871,6922]},{"content":"CToolBarCtrl::Indeterminate","pos":[6928,6955]},{"content":"Sets or clears the indeterminate (gray) state of the specified button in a toolbar control.","pos":[6987,7078]},{"content":"CToolBarCtrl::InsertButton","pos":[7084,7110]},{"content":"Inserts a button in a toolbar control.","pos":[7141,7179]},{"content":"CToolBarCtrl::InsertMarkHitTest","pos":[7185,7216]},{"content":"Retrieves the insertion mark information for a point in a toolbar.","pos":[7252,7318]},{"content":"CToolBarCtrl::IsButtonChecked","pos":[7324,7353]},{"content":"Tells whether the specified button in a toolbar control is checked.","pos":[7387,7454]},{"content":"CToolBarCtrl::IsButtonEnabled","pos":[7460,7489]},{"content":"Tells whether the specified button in a toolbar control is enabled.","pos":[7523,7590]},{"content":"CToolBarCtrl::IsButtonHidden","pos":[7596,7624]},{"content":"Tells whether the specified button in a toolbar control is hidden.","pos":[7657,7723]},{"content":"CToolBarCtrl::IsButtonHighlighted","pos":[7729,7762]},{"content":"Checks the highlight state of the toolbar button.","pos":[7800,7849]},{"content":"CToolBarCtrl::IsButtonIndeterminate","pos":[7855,7890]},{"content":"Tells whether the state of the specified button in a toolbar control is indeterminate (gray).","pos":[7930,8023]},{"content":"CToolBarCtrl::IsButtonPressed","pos":[8029,8058]},{"content":"Tells whether the specified button in a toolbar control is pressed.","pos":[8092,8159]},{"content":"CToolBarCtrl::LoadImages","pos":[8165,8189]},{"content":"Loads bitmaps into a toolbar control's image list.","pos":[8218,8268]},{"content":"CToolBarCtrl::MapAccelerator","pos":[8274,8302]},{"content":"Maps an accelerator character to a toolbar button.","pos":[8335,8385]},{"content":"CToolBarCtrl::MarkButton","pos":[8391,8415]},{"content":"Sets the highlight state of a given button in a toolbar control.","pos":[8444,8508]},{"content":"CToolBarCtrl::MoveButton","pos":[8514,8538]},{"content":"Moves a button from one index to another.","pos":[8567,8608]},{"content":"CToolBarCtrl::PressButton","pos":[8614,8639]},{"content":"Presses or releases the specified button in a toolbar control.","pos":[8669,8731]},{"content":"CToolBarCtrl::ReplaceBitmap","pos":[8737,8764]},{"content":"Replaces the existing bitmap in the current toolbar control with a new bitmap.","pos":[8796,8874]},{"content":"CToolBarCtrl::RestoreState","pos":[8880,8906]},{"content":"Restores the state of the toolbar control.","pos":[8937,8979]},{"content":"CToolBarCtrl::SaveState","pos":[8985,9008]},{"content":"Saves the state of the toolbar control.","pos":[9036,9075]},{"content":"CToolBarCtrl::SetAnchorHighlight","pos":[9081,9113]},{"content":"Sets the anchor highlight setting for a toolbar.","pos":[9150,9198]},{"content":"CToolBarCtrl::SetBitmapSize","pos":[9204,9231]},{"content":"Sets the size of the bitmapped images to be added to a toolbar control.","pos":[9263,9334]},{"content":"CToolBarCtrl::SetButtonInfo","pos":[9340,9367]},{"content":"Sets the information for an existing button in a toolbar.","pos":[9399,9456]},{"content":"CToolBarCtrl::SetButtonSize","pos":[9462,9489]},{"content":"Sets the size of the buttons to be added to a toolbar control.","pos":[9521,9583]},{"content":"CToolBarCtrl::SetButtonStructSize","pos":[9589,9622]},{"pos":[9660,9707],"content":"Specifies the size of the <ph id=\"ph1\">`TBBUTTON`</ph> structure.","source":"Specifies the size of the `TBBUTTON` structure."},{"content":"CToolBarCtrl::SetButtonWidth","pos":[9713,9741]},{"content":"Sets the minimum and maximum button widths in the toolbar control.","pos":[9774,9840]},{"content":"CToolBarCtrl::SetCmdID","pos":[9846,9868]},{"content":"Sets the command identifier to be sent to the owner window when the specified button is pressed.","pos":[9895,9991]},{"content":"CToolBarCtrl::SetColorScheme","pos":[9997,10025]},{"content":"Sets the color scheme of the current toolbar control.","pos":[10058,10111]},{"content":"CToolBarCtrl::SetDisabledImageList","pos":[10117,10151]},{"content":"Sets the image list that the toolbar control will use to display disabled buttons.","pos":[10190,10272]},{"content":"CToolBarCtrl::SetDrawTextFlags","pos":[10278,10308]},{"pos":[10343,10556],"content":"Sets the flags in the Win32 function <bpt id=\"p1\">[</bpt>DrawText<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162498)</ept>, which is used to draw the text in the specified rectangle, formatted according to how the flags are set.","source":"Sets the flags in the Win32 function [DrawText](http://msdn.microsoft.com/library/windows/desktop/dd162498), which is used to draw the text in the specified rectangle, formatted according to how the flags are set."},{"content":"CToolBarCtrl::SetExtendedStyle","pos":[10562,10592]},{"content":"Sets the extended styles for a toolbar control.","pos":[10627,10674]},{"content":"CToolBarCtrl::SetHotImageList","pos":[10680,10709]},{"content":"Sets the image list that the toolbar control will use to display \"hot\" buttons.","pos":[10743,10822]},{"content":"CToolBarCtrl::SetHotItem","pos":[10828,10852]},{"content":"Sets the hot item in a toolbar.","pos":[10881,10912]},{"content":"CToolBarCtrl::SetImageList","pos":[10918,10944]},{"content":"Sets the image list that the toolbar will use to display buttons that are in their default state.","pos":[10975,11072]},{"content":"CToolBarCtrl::SetIndent","pos":[11078,11101]},{"content":"Sets the indentation for the first button in a toolbar control.","pos":[11129,11192]},{"content":"CToolBarCtrl::SetInsertMark","pos":[11198,11225]},{"content":"Sets the current insertion mark for the toolbar.","pos":[11257,11305]},{"content":"CToolBarCtrl::SetInsertMarkColor","pos":[11311,11343]},{"content":"Sets the color used to draw the insertion mark for the toolbar.","pos":[11380,11443]},{"content":"CToolBarCtrl::SetMaxTextRows","pos":[11449,11477]},{"content":"Sets the maximum number of text rows displayed on a toolbar button.","pos":[11510,11577]},{"content":"CToolBarCtrl::SetMetrics","pos":[11583,11607]},{"content":"Sets the metrics of a toolbar control.","pos":[11636,11674]},{"content":"CToolBarCtrl::SetOwner","pos":[11680,11702]},{"content":"Sets the window to receive notification messages from the toolbar control.","pos":[11729,11803]},{"content":"CToolBarCtrl::SetPadding","pos":[11809,11833]},{"content":"Sets the horizontal and vertical padding of the current toolbar control.","pos":[11862,11934]},{"content":"CToolBarCtrl::SetPressedImageList","pos":[11940,11973]},{"content":"Sets the image list that the current toolbar control uses to represent buttons in the pressed state.","pos":[12011,12111]},{"content":"CToolBarCtrl::SetRows","pos":[12117,12138]},{"content":"Sets the number of rows of buttons displayed in the toolbar.","pos":[12164,12224]},{"content":"CToolBarCtrl::SetState","pos":[12230,12252]},{"content":"Sets the state for the specified button in a toolbar control.","pos":[12279,12340]},{"content":"CToolBarCtrl::SetStyle","pos":[12346,12368]},{"content":"Sets the styles for a toolbar control.","pos":[12395,12433]},{"content":"CToolBarCtrl::SetToolTips","pos":[12439,12464]},{"content":"Associates a tool tip control with the toolbar control.","pos":[12494,12549]},{"content":"CToolBarCtrl::SetWindowTheme","pos":[12555,12583]},{"content":"Sets the visual style of a toolbar control.","pos":[12616,12659]},{"content":"Remarks","pos":[12669,12676]},{"pos":[12680,12830],"content":"This control (and therefore the <ph id=\"ph1\">`CToolBarCtrl`</ph> class) is available only to programs running under Windows 95/98 and Windows NT version 3.51 and later.","source":"This control (and therefore the `CToolBarCtrl` class) is available only to programs running under Windows 95/98 and Windows NT version 3.51 and later."},{"content":"A Windows toolbar common control is a rectangular child window that contains one or more buttons.","pos":[12837,12934]},{"content":"These buttons can display a bitmap image, a string, or both.","pos":[12935,12995]},{"content":"When the user chooses a button, it sends a command message to the toolbar's owner window.","pos":[12996,13085]},{"content":"Typically, the buttons in a toolbar correspond to items in the application's menu; they provide a more direct way for the user to access an application's commands.","pos":[13086,13249]},{"content":"objects contain several important internal data structures: a list of button image bitmaps or an image list, a list of button label strings, and a list of <ph id=\"ph1\">`TBBUTTON`</ph> structures which associate an image and/or string with the position, style, state, and command ID of the button.","pos":[13271,13549],"source":" objects contain several important internal data structures: a list of button image bitmaps or an image list, a list of button label strings, and a list of `TBBUTTON` structures which associate an image and/or string with the position, style, state, and command ID of the button."},{"content":"Each of the elements of these data structures is referred to by a zero-based index.","pos":[13550,13633]},{"content":"Before you can use a <ph id=\"ph1\">`CToolBarCtrl`</ph> object, you must set up these data structures.","pos":[13634,13716],"source":" Before you can use a `CToolBarCtrl` object, you must set up these data structures."},{"content":"The list of strings can only be used for button labels; you cannot retrieve strings from the toolbar.","pos":[13717,13818]},{"pos":[13825,13895],"content":"To use a <ph id=\"ph1\">`CToolBarCtrl`</ph> object, you will typically follow these steps:","source":"To use a `CToolBarCtrl` object, you will typically follow these steps:"},{"pos":[13905,13941],"content":"Construct the <ph id=\"ph1\">`CToolBarCtrl`</ph> object.","source":"Construct the `CToolBarCtrl` object."},{"content":"Call <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](#ctoolbarctrl__create)</ept> to create the Windows toolbar common control and attach it to the <ph id=\"ph1\">`CToolBarCtrl`</ph> object.","pos":[13951,14076],"source":"Call [Create](#ctoolbarctrl__create) to create the Windows toolbar common control and attach it to the `CToolBarCtrl` object."},{"content":"Indicate the style of toolbar by using styles, such as <bpt id=\"p1\">**</bpt>TBSTYLE_TRANSPARENT<ept id=\"p1\">**</ept> for a transparent toolbar or <bpt id=\"p2\">**</bpt>TBSTYLE_DROPDOWN<ept id=\"p2\">**</ept> for a toolbar that supports drop-down style buttons.","pos":[14077,14258],"source":" Indicate the style of toolbar by using styles, such as **TBSTYLE_TRANSPARENT** for a transparent toolbar or **TBSTYLE_DROPDOWN** for a toolbar that supports drop-down style buttons."},{"content":"Identify how you want the buttons on the toolbar displayed:","pos":[14268,14327]},{"pos":[14341,14462],"content":"To use bitmap images for buttons, add the button bitmaps to the toolbar by calling <bpt id=\"p1\">[</bpt>AddBitmap<ept id=\"p1\">](#ctoolbarctrl__addbitmap)</ept>.","source":"To use bitmap images for buttons, add the button bitmaps to the toolbar by calling [AddBitmap](#ctoolbarctrl__addbitmap)."},{"pos":[14476,14725],"content":"To use images displayed from an image list for buttons, specify the image list by calling <bpt id=\"p1\">[</bpt>SetImageList<ept id=\"p1\">](#ctoolbarctrl__setimagelist)</ept>, <bpt id=\"p2\">[</bpt>SetHotImageList<ept id=\"p2\">](#ctoolbarctrl__sethotimagelist)</ept>, or <bpt id=\"p3\">[</bpt>SetDisabledImageList<ept id=\"p3\">](#ctoolbarctrl__setdisabledimagelist)</ept>.","source":"To use images displayed from an image list for buttons, specify the image list by calling [SetImageList](#ctoolbarctrl__setimagelist), [SetHotImageList](#ctoolbarctrl__sethotimagelist), or [SetDisabledImageList](#ctoolbarctrl__setdisabledimagelist)."},{"pos":[14739,14900],"content":"To use string labels for buttons, add the strings to the toolbar by calling <bpt id=\"p1\">[</bpt>AddString<ept id=\"p1\">](#ctoolbarctrl__addstring)</ept> and/or <bpt id=\"p2\">[</bpt>AddStrings<ept id=\"p2\">](#ctoolbarctrl__addstrings)</ept>.","source":"To use string labels for buttons, add the strings to the toolbar by calling [AddString](#ctoolbarctrl__addstring) and/or [AddStrings](#ctoolbarctrl__addstrings)."},{"pos":[14910,14998],"content":"Add button structures to the toolbar by calling <bpt id=\"p1\">[</bpt>AddButtons<ept id=\"p1\">](#ctoolbarctrl__addbuttons)</ept>.","source":"Add button structures to the toolbar by calling [AddButtons](#ctoolbarctrl__addbuttons)."},{"content":"If you want tool tips for a toolbar button in an owner window that is not a <ph id=\"ph1\">`CFrameWnd`</ph>, you need to handle the <bpt id=\"p1\">**</bpt>TTN_NEEDTEXT<ept id=\"p1\">**</ept> messages in the toolbar's owner window as described in <bpt id=\"p2\">[</bpt>Handling Tool Tip Notifications<ept id=\"p2\">](../../mfc/handling-tool-tip-notifications.md)</ept>.","pos":[15008,15272],"source":"If you want tool tips for a toolbar button in an owner window that is not a `CFrameWnd`, you need to handle the **TTN_NEEDTEXT** messages in the toolbar's owner window as described in [Handling Tool Tip Notifications](../../mfc/handling-tool-tip-notifications.md)."},{"content":"If the parent window of the toolbar is derived from <ph id=\"ph1\">`CFrameWnd`</ph>, tool tips are displayed without any extra effort from you because <ph id=\"ph2\">`CFrameWnd`</ph> provides a default handler.","pos":[15273,15443],"source":" If the parent window of the toolbar is derived from `CFrameWnd`, tool tips are displayed without any extra effort from you because `CFrameWnd` provides a default handler."},{"pos":[15453,15681],"content":"If you want your user to be able to customize the toolbar, handle customization notification messages in the owner window as described in <bpt id=\"p1\">[</bpt>Handling Customization Notifications<ept id=\"p1\">](../../mfc/handling-customization-notifications.md)</ept>.","source":"If you want your user to be able to customize the toolbar, handle customization notification messages in the owner window as described in [Handling Customization Notifications](../../mfc/handling-customization-notifications.md)."},{"content":"You can use <bpt id=\"p1\">[</bpt>SaveState<ept id=\"p1\">](#ctoolbarctrl__savestate)</ept> to save the current state of a toolbar control in the registry and <bpt id=\"p2\">[</bpt>RestoreState<ept id=\"p2\">](#ctoolbarctrl__restorestate)</ept> to restore the state based on information previously stored in the registry.","pos":[15688,15925],"source":"You can use [SaveState](#ctoolbarctrl__savestate) to save the current state of a toolbar control in the registry and [RestoreState](#ctoolbarctrl__restorestate) to restore the state based on information previously stored in the registry."},{"content":"In addition to saving the toolbar state between uses of the application, applications typically store the state before the user begins customizing the toolbar in case the user later wants to restore the toolbar to its original state.","pos":[15926,16159]},{"content":"Support for Internet Explorer Version 4.0 and Later","pos":[16168,16219]},{"content":"To support functionality introduced in Internet Explorer, version 4.0 and later, MFC provides image list support and transparent and flat styles for toolbar controls.","pos":[16223,16389]},{"content":"A transparent toolbar allows the client under the toolbar to show through.","pos":[16396,16470]},{"content":"To create a transparent toolbar, use both <bpt id=\"p1\">**</bpt>TBSTYLE_FLAT<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>TBSTYLE_TRANSPARENT<ept id=\"p2\">**</ept> styles.","pos":[16471,16565],"source":" To create a transparent toolbar, use both **TBSTYLE_FLAT** and **TBSTYLE_TRANSPARENT** styles."},{"content":"Transparent toolbars feature hot tracking; that is, when the mouse pointer moves over a hot button on the toolbar, the button's appearance changes.","pos":[16566,16713]},{"content":"Toolbars created with just the <bpt id=\"p1\">**</bpt>TBSTYLE_FLAT<ept id=\"p1\">**</ept> style will contain buttons that are not transparent.","pos":[16714,16814],"source":" Toolbars created with just the **TBSTYLE_FLAT** style will contain buttons that are not transparent."},{"content":"Image list support allows a control greater flexibility for default behavior, hot images, and disabled images.","pos":[16821,16931]},{"content":"Use <bpt id=\"p1\">[</bpt>GetImageList<ept id=\"p1\">](#ctoolbarctrl__getimagelist)</ept>, <bpt id=\"p2\">[</bpt>GetHotImageList<ept id=\"p2\">](#ctoolbarctrl__gethotimagelist)</ept>, and <bpt id=\"p3\">[</bpt>GetDisabledImageList<ept id=\"p3\">](#ctoolbarctrl__getdisabledimagelist)</ept> with the transparent toolbar to manipulate the image according to its state:","pos":[16932,17172],"source":" Use [GetImageList](#ctoolbarctrl__getimagelist), [GetHotImageList](#ctoolbarctrl__gethotimagelist), and [GetDisabledImageList](#ctoolbarctrl__getdisabledimagelist) with the transparent toolbar to manipulate the image according to its state:"},{"pos":[17179,17325],"content":"For more information on using <ph id=\"ph1\">`CToolBarCtrl`</ph>, see <bpt id=\"p1\">[</bpt>Controls<ept id=\"p1\">](../../mfc/controls-mfc.md)</ept> and <bpt id=\"p2\">[</bpt>Using CToolBarCtrl<ept id=\"p2\">](../../mfc/using-ctoolbarctrl.md)</ept>.","source":"For more information on using `CToolBarCtrl`, see [Controls](../../mfc/controls-mfc.md) and [Using CToolBarCtrl](../../mfc/using-ctoolbarctrl.md)."},{"content":"Inheritance Hierarchy","pos":[17334,17355]},{"content":"CObject","pos":[17360,17367]},{"content":"CCmdTarget","pos":[17414,17424]},{"content":"CWnd","pos":[17474,17478]},{"content":"Requirements","pos":[17544,17556]},{"pos":[17560,17580],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxcmn.h","source":"**Header:** afxcmn.h"},{"pos":[17630,17653],"content":"CToolBarCtrl::AddBitmap"},{"content":"Adds one or more button images to the list of button images stored in the toolbar control.","pos":[17657,17747]},{"content":"Parameters","pos":[17895,17905]},{"content":"Number of button images in the bitmap.","pos":[17926,17964]},{"content":"Resource identifier of the bitmap that contains the button image or images to add.","pos":[17986,18068]},{"content":"Pointer to the <ph id=\"ph1\">`CBitmap`</ph> object that contains the button image or images to add.","pos":[18088,18168],"source":" Pointer to the `CBitmap` object that contains the button image or images to add."},{"content":"Return Value","pos":[18178,18190]},{"content":"Zero-based index of the first new image if successful; otherwise – 1.","pos":[18194,18263]},{"content":"Remarks","pos":[18273,18280]},{"content":"You can use the Windows API <bpt id=\"p1\">[</bpt>CreateMappedBitmap<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787467)</ept> to map colors before adding the bitmap to the toolbar.","pos":[18284,18447],"source":"You can use the Windows API [CreateMappedBitmap](http://msdn.microsoft.com/library/windows/desktop/bb787467) to map colors before adding the bitmap to the toolbar."},{"content":"If you pass a pointer to a <bpt id=\"p1\">**</bpt>CBitMap<ept id=\"p1\">**</ept> object, you must ensure that the bitmap is not destroyed until after the toolbar is destroyed.","pos":[18448,18581],"source":" If you pass a pointer to a **CBitMap** object, you must ensure that the bitmap is not destroyed until after the toolbar is destroyed."},{"pos":[18632,18656],"content":"CToolBarCtrl::AddButtons"},{"content":"Adds one or more buttons to a toolbar control.","pos":[18660,18706]},{"content":"Parameters","pos":[18798,18808]},{"content":"Number of buttons to add.","pos":[18829,18854]},{"content":"Address of an array of <ph id=\"ph1\">`TBBUTTON`</ph> structures that contains information about the buttons to add.","pos":[18876,18972],"source":" Address of an array of `TBBUTTON` structures that contains information about the buttons to add."},{"content":"There must be the same number of elements in the array as buttons specified by <ph id=\"ph1\">`nNumButtons`</ph>.","pos":[18973,19066],"source":" There must be the same number of elements in the array as buttons specified by `nNumButtons`."},{"content":"Return Value","pos":[19076,19088]},{"content":"Nonzero if successful; otherwise zero.","pos":[19092,19130]},{"content":"Remarks","pos":[19140,19147]},{"content":"The <ph id=\"ph1\">`lpButtons`</ph> pointer points to an array of <ph id=\"ph2\">`TBBUTTON`</ph> structures.","pos":[19151,19219],"source":"The `lpButtons` pointer points to an array of `TBBUTTON` structures."},{"content":"Each <ph id=\"ph1\">`TBBUTTON`</ph> structure associates the button being added with the button's style, image and/or string, command ID, state, and user-defined data:","pos":[19220,19367],"source":" Each `TBBUTTON` structure associates the button being added with the button's style, image and/or string, command ID, state, and user-defined data:"},{"content":"The members are as follows:","pos":[19769,19796]},{"content":"iBitmap","pos":[19805,19812]},{"content":"Zero-based index of button image, -1 if no image for this button.","pos":[19818,19883]},{"content":"idCommand","pos":[19892,19901]},{"content":"Command identifier associated with the button.","pos":[19907,19953]},{"content":"This identifier is sent in a <bpt id=\"p1\">**</bpt>WM_COMMAND<ept id=\"p1\">**</ept> message when the button is chosen.","pos":[19954,20032],"source":" This identifier is sent in a **WM_COMMAND** message when the button is chosen."},{"content":"If the <bpt id=\"p1\">**</bpt>fsStyle<ept id=\"p1\">**</ept> member has the <ph id=\"ph1\">`TBSTYLE_SEP`</ph> value, this member must be zero.","pos":[20033,20113],"source":" If the **fsStyle** member has the `TBSTYLE_SEP` value, this member must be zero."},{"content":"fsState","pos":[20122,20129]},{"content":"Button state flags.","pos":[20135,20154]},{"content":"It can be a combination of the values listed below:","pos":[20155,20206]},{"pos":[20232,20298],"content":"The button has the <bpt id=\"p1\">**</bpt>TBSTYLE_CHECKED<ept id=\"p1\">**</ept> style and is being pressed.","source":" The button has the **TBSTYLE_CHECKED** style and is being pressed."},{"content":"The button accepts user input.","pos":[20324,20354]},{"content":"A button that does not have this state does not accept user input and is grayed.","pos":[20355,20435]},{"pos":[20460,20516],"content":"The button is not visible and cannot receive user input."},{"pos":[20548,20569],"content":"The button is grayed."},{"pos":[20595,20623],"content":"The button is being pressed."},{"content":"A line break follows the button.","pos":[20646,20678]},{"content":"The button must also have the <ph id=\"ph1\">`TBSTATE_ENABLED`</ph> state.","pos":[20679,20733],"source":" The button must also have the `TBSTATE_ENABLED` state."},{"pos":[20740,20820],"content":"**fsStyle**  \nButton style. It can be a combination of the values listed below:","leadings":[""," "],"nodes":[{"content":"fsStyle","pos":[2,9]},{"content":"Button style. It can be a combination of the values listed below:","pos":[14,79],"nodes":[{"content":"Button style.","pos":[0,13]},{"content":"It can be a combination of the values listed below:","pos":[14,65]}]}]},{"pos":[20845,20876],"content":"Creates a standard push button."},{"content":"Creates a button that toggles between the pressed and unpressed states each time the user clicks it.","pos":[20900,21000]},{"content":"The button has a different background color when it is in the pressed state.","pos":[21001,21077]},{"pos":[21106,21193],"content":"Creates a check button that stays pressed until another button in the group is pressed."},{"pos":[21217,21298],"content":"Creates a button that stays pressed until another button in the group is pressed."},{"content":"Creates a separator, providing a small gap between button groups.","pos":[21320,21385]},{"content":"A button that has this style does not receive user input.","pos":[21386,21443]},{"pos":[21450,21480],"content":"`dwData`  \nUser-defined data.","leadings":[""," "],"nodes":[{"content":"User-defined data.","pos":[11,29]}]},{"pos":[21487,21604],"content":"**iString**  \nZero-based index of the string to use as the button's label, -1 if there is no string for this button.","leadings":[""," "],"nodes":[{"content":"iString","pos":[2,9]},{"content":"Zero-based index of the string to use as the button's label, -1 if there is no string for this button.","pos":[14,116]}]},{"pos":[21611,21852],"content":"The image and/or string whose index you provide must have previously been added to the toolbar control's list using <bpt id=\"p1\">[</bpt>AddBitmap<ept id=\"p1\">](#ctoolbarctrl__addbitmap)</ept>, <bpt id=\"p2\">[</bpt>AddString<ept id=\"p2\">](#ctoolbarctrl__addstring)</ept>, and/or <bpt id=\"p3\">[</bpt>AddStrings<ept id=\"p3\">](#ctoolbarctrl__addstrings)</ept>.","source":"The image and/or string whose index you provide must have previously been added to the toolbar control's list using [AddBitmap](#ctoolbarctrl__addbitmap), [AddString](#ctoolbarctrl__addstring), and/or [AddStrings](#ctoolbarctrl__addstrings)."},{"pos":[21902,21925],"content":"CToolBarCtrl::AddString"},{"content":"Adds a new string, passed as a resource ID, to the toolbar's internal list of strings.","pos":[21929,22015]},{"content":"Parameters","pos":[22071,22081]},{"content":"nStringID","pos":[22086,22095]},{"content":"Resource identifier of the string resource to add to the toolbar control's string list.","pos":[22100,22187]},{"content":"Return Value","pos":[22197,22209]},{"content":"The zero-based index of the first new string added if successful; otherwise –1.","pos":[22213,22292]},{"pos":[22343,22367],"content":"CToolBarCtrl::AddStrings"},{"content":"Adds a new string or strings to the list of strings available for a toolbar control.","pos":[22371,22455]},{"content":"Parameters","pos":[22517,22527]},{"content":"lpszStrings","pos":[22532,22543]},{"content":"Address of a buffer that contains one or more null-terminated strings to add to the toolbar's string list.","pos":[22548,22654]},{"content":"The last string must be terminated with two null characters.","pos":[22655,22715]},{"content":"Return Value","pos":[22725,22737]},{"content":"The zero-based index of the first new string added if successful; otherwise –1.","pos":[22741,22820]},{"content":"Remarks","pos":[22830,22837]},{"content":"Strings in the buffer must be separated by a null character.","pos":[22841,22901]},{"content":"You must ensure that the last string has two null terminators.","pos":[22902,22964]},{"content":"To properly format a constant string, you might write it as:","pos":[22965,23025]},{"pos":[23043,23071],"content":"NVC_MFCControlLadenDialog#72"},{"content":"or:","pos":[23132,23135]},{"pos":[23153,23181],"content":"NVC_MFCControlLadenDialog#73"},{"pos":[23242,23375],"content":"You should not pass a <ph id=\"ph1\">`CString`</ph> object to this function since it is not possible to have more than one null character in a <ph id=\"ph2\">`CString`</ph>.","source":"You should not pass a `CString` object to this function since it is not possible to have more than one null character in a `CString`."},{"pos":[23424,23446],"content":"CToolBarCtrl::AutoSize"},{"content":"Resizes the entire toolbar control.","pos":[23450,23485]},{"content":"Remarks","pos":[23527,23534]},{"content":"You should call this function when the size of the parent window changes or when the size of the toolbar changes (such as when you set the button or bitmap size, or add strings).","pos":[23538,23716]},{"pos":[23769,23795],"content":"CToolBarCtrl::ChangeBitmap"},{"content":"Changes the bitmap for a button in the current toolbar control.","pos":[23799,23862]},{"content":"Parameters","pos":[23945,23955]},{"content":"Parameter","pos":[23962,23971]},{"content":"Description","pos":[23972,23983]},{"pos":[24026,24030],"content":"[in]"},{"content":"Command identifier of the button that is to receive a new bitmap.","pos":[24042,24107]},{"pos":[24112,24116],"content":"[in]"},{"content":"Zero-based index of an image in the current toolbar control's image list.","pos":[24127,24200]},{"content":"Return Value","pos":[24211,24223]},{"pos":[24234,24283],"content":"if this method is successful; otherwise, <ph id=\"ph1\">`false`</ph>.","source":" if this method is successful; otherwise, `false`."},{"content":"Remarks","pos":[24293,24300]},{"content":"If this method is successful, the system displays the specified image in the specified button.","pos":[24304,24398]},{"pos":[24405,24592],"content":"This method sends the <bpt id=\"p1\">[</bpt>TB_CHANGEBITMAP<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787301)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [TB_CHANGEBITMAP](http://msdn.microsoft.com/library/windows/desktop/bb787301) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[24602,24609]},{"pos":[24613,24727],"content":"The following code example changes the bitmap for the <bpt id=\"p1\">**</bpt>File Save<ept id=\"p1\">**</ept> button to the bitmap for the <bpt id=\"p2\">**</bpt>About<ept id=\"p2\">**</ept> button.","source":"The following code example changes the bitmap for the **File Save** button to the bitmap for the **About** button."},{"pos":[24745,24770],"content":"NVC_MFC_CToolBarCtrl_s1#1"},{"pos":[24886,24911],"content":"CToolBarCtrl::CheckButton"},{"content":"Checks or clears a given button in a toolbar control.","pos":[24915,24968]},{"content":"Parameters","pos":[25051,25061]},{"content":"Command identifier of the button to check or clear.","pos":[25074,25125]},{"content":"bCheck","pos":[25133,25139]},{"content":"<bpt id=\"p1\"> **</bpt>TRUE<ept id=\"p1\">**</ept> to check the button, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> to clear it.","pos":[25143,25196],"source":" **TRUE** to check the button, **FALSE** to clear it."},{"content":"Return Value","pos":[25206,25218]},{"content":"Nonzero if successful; otherwise zero.","pos":[25222,25260]},{"content":"Remarks","pos":[25270,25277]},{"content":"When a button has been checked, it appears to have been pressed.","pos":[25281,25345]},{"content":"If you want to change more than one button state, consider calling <bpt id=\"p1\">[</bpt>SetState<ept id=\"p1\">](#ctoolbarctrl__setstate)</ept> instead.","pos":[25346,25457],"source":" If you want to change more than one button state, consider calling [SetState](#ctoolbarctrl__setstate) instead."},{"pos":[25512,25540],"content":"CToolBarCtrl::CommandToIndex"},{"content":"Retrieves the zero-based index for the button associated with the specified command identifier.","pos":[25544,25639]},{"content":"Parameters","pos":[25704,25714]},{"content":"Command ID whose button index you want to find.","pos":[25727,25774]},{"content":"Return Value","pos":[25784,25796]},{"content":"The zero-based index for the button associated with the command ID.","pos":[25800,25867]},{"content":"Remarks","pos":[25877,25884]},{"pos":[25931,25951],"content":"CToolBarCtrl::Create"},{"pos":[25955,26024],"content":"Creates a toolbar control and attaches it to a <ph id=\"ph1\">`CToolBarCtrl`</ph> object.","source":"Creates a toolbar control and attaches it to a `CToolBarCtrl` object."},{"content":"Parameters","pos":[26154,26164]},{"content":"Specifies the toolbar control's style.","pos":[26181,26219]},{"content":"Toolbars must always have the <bpt id=\"p1\">**</bpt>WS_CHILD<ept id=\"p1\">**</ept> style.","pos":[26220,26269],"source":" Toolbars must always have the **WS_CHILD** style."},{"content":"In addition, you can specify any combination of toolbar styles and window styles as described under <bpt id=\"p1\">**</bpt>Remarks<ept id=\"p1\">**</ept>.","pos":[26270,26382],"source":" In addition, you can specify any combination of toolbar styles and window styles as described under **Remarks**."},{"content":"Optionally specifies the toolbar control's size and position.","pos":[26399,26460]},{"content":"It can be either a <bpt id=\"p1\">[</bpt>CRect<ept id=\"p1\">](../../atl-mfc-shared/reference/crect-class.md)</ept> object or a <bpt id=\"p2\">[</bpt>RECT<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure.","pos":[26461,26624],"source":" It can be either a [CRect](../../atl-mfc-shared/reference/crect-class.md) object or a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure."},{"content":"Specifies the toolbar control's parent window.","pos":[26647,26693]},{"content":"It must not be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[26694,26718],"source":" It must not be **NULL**."},{"content":"Specifies the toolbar control's ID.","pos":[26734,26769]},{"content":"Return Value","pos":[26779,26791]},{"content":"Nonzero if successful; otherwise zero.","pos":[26795,26833]},{"content":"Remarks","pos":[26843,26850]},{"content":"You construct a <ph id=\"ph1\">`CToolBarCtrl`</ph> in two steps.","pos":[26854,26898],"source":"You construct a `CToolBarCtrl` in two steps."},{"content":"First, call the constructor, and then call <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>, which creates the toolbar control and attaches it to the <ph id=\"ph1\">`CToolBarCtrl`</ph> object.","pos":[26899,27033],"source":" First, call the constructor, and then call **Create**, which creates the toolbar control and attaches it to the `CToolBarCtrl` object."},{"content":"Apply the following window styles to a toolbar control.","pos":[27034,27089]},{"pos":[27097,27116],"content":"<bpt id=\"p1\">**</bpt>WS_CHILD<ept id=\"p1\">**</ept> Always","source":"**WS_CHILD** Always"},{"pos":[27124,27146],"content":"<bpt id=\"p1\">**</bpt>WS_VISIBLE<ept id=\"p1\">**</ept> Usually","source":"**WS_VISIBLE** Usually"},{"pos":[27154,27176],"content":"<bpt id=\"p1\">**</bpt>WS_DISABLED<ept id=\"p1\">**</ept> Rarely","source":"**WS_DISABLED** Rarely"},{"pos":[27183,27356],"content":"See <bpt id=\"p1\">[</bpt>CreateWindow<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632679)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for a description of window styles.","source":"See [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for a description of window styles."},{"pos":[27363,27555],"content":"Optionally, apply a combination of <bpt id=\"p1\">[</bpt>common control styles<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775498)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"Optionally, apply a combination of [common control styles](http://msdn.microsoft.com/library/windows/desktop/bb775498), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Apply a combination of toolbar styles to either the control or the buttons themselves.","pos":[27562,27648]},{"content":"The styles are described in the topic <bpt id=\"p1\">[</bpt>Toolbar Control and Button Styles<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb760439)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[27649,27842],"source":" The styles are described in the topic [Toolbar Control and Button Styles](http://msdn.microsoft.com/library/windows/desktop/bb760439) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"To use extended toolbar styles, call <bpt id=\"p1\">[</bpt>SetExtendedStyle<ept id=\"p1\">](#ctoolbarctrl__setextendedstyle)</ept> after you call <bpt id=\"p2\">**</bpt>Create<ept id=\"p2\">**</ept>.","pos":[27849,27964],"source":"To use extended toolbar styles, call [SetExtendedStyle](#ctoolbarctrl__setextendedstyle) after you call **Create**."},{"content":"To create a toolbar with extended window styles, call <bpt id=\"p1\">[</bpt>CToolBarCtrl::CreateEx<ept id=\"p1\">](#ctoolbarctrl__createex)</ept> instead of <bpt id=\"p2\">**</bpt>Create<ept id=\"p2\">**</ept>.","pos":[27965,28091],"source":" To create a toolbar with extended window styles, call [CToolBarCtrl::CreateEx](#ctoolbarctrl__createex) instead of **Create**."},{"content":"The toolbar control automatically sets the size and position of the toolbar window.","pos":[28098,28181]},{"content":"The height is based on the height of the buttons in the toolbar.","pos":[28182,28246]},{"content":"The width is the same as the width of the parent window's client area.","pos":[28247,28317]},{"content":"The <ph id=\"ph1\">`CCS_TOP`</ph> and <ph id=\"ph2\">`CCS_BOTTOM`</ph> styles determine whether the toolbar is positioned along the top or bottom of the client area.","pos":[28318,28443],"source":" The `CCS_TOP` and `CCS_BOTTOM` styles determine whether the toolbar is positioned along the top or bottom of the client area."},{"content":"By default, a toolbar has the <ph id=\"ph1\">`CCS_TOP`</ph> style.","pos":[28444,28490],"source":" By default, a toolbar has the `CCS_TOP` style."},{"pos":[28539,28561],"content":"CToolBarCtrl::CreateEx"},{"pos":[28565,28649],"content":"Creates a control (a child window) and associates it with the <ph id=\"ph1\">`CToolBarCtrl`</ph> object.","source":"Creates a control (a child window) and associates it with the `CToolBarCtrl` object."},{"content":"Parameters","pos":[28804,28814]},{"content":"Specifies the extended style of the control being created.","pos":[28833,28891]},{"content":"For a list of extended Windows styles, see the <ph id=\"ph1\">`dwExStyle`</ph> parameter for <bpt id=\"p1\">[</bpt>CreateWindowEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632680)</ept> in the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[28892,29101],"source":" For a list of extended Windows styles, see the `dwExStyle` parameter for [CreateWindowEx](http://msdn.microsoft.com/library/windows/desktop/ms632680) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Specifies the toolbar control's style.","pos":[29121,29159]},{"content":"Toolbars must always have the <bpt id=\"p1\">**</bpt>WS_CHILD<ept id=\"p1\">**</ept> style.","pos":[29160,29209],"source":" Toolbars must always have the **WS_CHILD** style."},{"content":"In addition, you can specify any combination of toolbar styles and window styles as described in the <bpt id=\"p1\">**</bpt>Remarks<ept id=\"p1\">**</ept> section of <bpt id=\"p2\">[</bpt>Create<ept id=\"p2\">](#ctoolbarctrl__create)</ept>.","pos":[29210,29366],"source":" In addition, you can specify any combination of toolbar styles and window styles as described in the **Remarks** section of [Create](#ctoolbarctrl__create)."},{"content":"A reference to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure describing the size and position of the window to be created, in client coordinates of <ph id=\"ph1\">`pParentWnd`</ph>.","pos":[29383,29577],"source":" A reference to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure describing the size and position of the window to be created, in client coordinates of `pParentWnd`."},{"content":"A pointer to the window that is the control's parent.","pos":[29600,29653]},{"content":"The control's child-window ID.","pos":[29669,29699]},{"content":"Return Value","pos":[29709,29721]},{"content":"Nonzero if successful; otherwise 0.","pos":[29725,29760]},{"content":"Remarks","pos":[29770,29777]},{"content":"Use <ph id=\"ph1\">`CreateEx`</ph> instead of <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](#ctoolbarctrl__create)</ept> to apply extended Windows styles, specified by the Windows extended style preface <bpt id=\"p2\">**</bpt>WS_EX_<ept id=\"p2\">**</ept>.","pos":[29781,29932],"source":"Use `CreateEx` instead of [Create](#ctoolbarctrl__create) to apply extended Windows styles, specified by the Windows extended style preface **WS_EX_**."},{"content":"<bpt id=\"p1\">**</bpt>CreateEx<ept id=\"p1\">**</ept> creates the control with the extended Windows styles specified by <ph id=\"ph1\">`dwExStyle`</ph>.","pos":[29933,30024],"source":"**CreateEx** creates the control with the extended Windows styles specified by `dwExStyle`."},{"content":"Set extended styles specific to a control using <bpt id=\"p1\">[</bpt>SetExtendedStyle<ept id=\"p1\">](#ctoolbarctrl__setextendedstyle)</ept>.","pos":[30025,30125],"source":" Set extended styles specific to a control using [SetExtendedStyle](#ctoolbarctrl__setextendedstyle)."},{"content":"For example, use <ph id=\"ph1\">`CreateEx`</ph> to set such styles as <bpt id=\"p1\">**</bpt>WS_EX_CONTEXTHELP<ept id=\"p1\">**</ept>, but use <ph id=\"ph2\">`SetExtendedStyle`</ph> to set such styles as <bpt id=\"p2\">**</bpt>TBSTYLE_EX_DRAWDDARROWS<ept id=\"p2\">**</ept>.","pos":[30126,30276],"source":" For example, use `CreateEx` to set such styles as **WS_EX_CONTEXTHELP**, but use `SetExtendedStyle` to set such styles as **TBSTYLE_EX_DRAWDDARROWS**."},{"content":"For more information, see the styles described in <bpt id=\"p1\">[</bpt>Toolbar Extended Styles<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb760430)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[30277,30472],"source":" For more information, see the styles described in [Toolbar Extended Styles](http://msdn.microsoft.com/library/windows/desktop/bb760430) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[30525,30551],"content":"CToolBarCtrl::CToolBarCtrl"},{"pos":[30555,30590],"content":"Constructs a <ph id=\"ph1\">`CToolBarCtrl`</ph> object.","source":"Constructs a `CToolBarCtrl` object."},{"content":"Remarks","pos":[30631,30638]},{"pos":[30642,30715],"content":"You must call <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](#ctoolbarctrl__create)</ept> to make the toolbar usable.","source":"You must call [Create](#ctoolbarctrl__create) to make the toolbar usable."},{"pos":[30765,30788],"content":"CToolBarCtrl::Customize"},{"content":"Displays the Customize Toolbar dialog box.","pos":[30792,30834]},{"content":"Remarks","pos":[30877,30884]},{"content":"This dialog box allows the user to customize the toolbar by adding and deleting buttons.","pos":[30888,30976]},{"content":"To support customization, your toolbar's parent window must handle the customization notification messages as described in <bpt id=\"p1\">[</bpt>Handling Customization Notifications<ept id=\"p1\">](../../mfc/handling-customization-notifications.md)</ept>.","pos":[30977,31190],"source":" To support customization, your toolbar's parent window must handle the customization notification messages as described in [Handling Customization Notifications](../../mfc/handling-customization-notifications.md)."},{"content":"Your toolbar must also have been created with the <ph id=\"ph1\">`CCS_ADJUSTABLE`</ph> style, as described in <bpt id=\"p1\">[</bpt>CToolBarCtrl::Create<ept id=\"p1\">](#ctoolbarctrl__create)</ept>.","pos":[31191,31327],"source":" Your toolbar must also have been created with the `CCS_ADJUSTABLE` style, as described in [CToolBarCtrl::Create](#ctoolbarctrl__create)."},{"content":"For more information, see Knowledge Base article Q241850 : PRB: Call to CToolBarCtrl::Customize Does Not Keep the Customize Dialog Visible.","pos":[31334,31473]},{"pos":[31526,31552],"content":"CToolBarCtrl::DeleteButton"},{"content":"Deletes a button from the toolbar control.","pos":[31556,31598]},{"content":"Parameters","pos":[31654,31664]},{"content":"Zero-based index of the button to delete.","pos":[31680,31721]},{"content":"Return Value","pos":[31731,31743]},{"content":"Nonzero if successful; otherwise zero.","pos":[31747,31785]},{"content":"Remarks","pos":[31795,31802]},{"pos":[31855,31881],"content":"CToolBarCtrl::EnableButton"},{"content":"Enables or disables the specified button in a toolbar control.","pos":[31885,31947]},{"content":"Parameters","pos":[32032,32042]},{"content":"Command identifier of the button to enable or disable.","pos":[32055,32109]},{"content":"<bpt id=\"p1\"> **</bpt>TRUE<ept id=\"p1\">**</ept> to enable the button; <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> to disable the button.","pos":[32128,32192],"source":" **TRUE** to enable the button; **FALSE** to disable the button."},{"content":"Return Value","pos":[32202,32214]},{"content":"Nonzero if successful; otherwise zero.","pos":[32218,32256]},{"content":"Remarks","pos":[32266,32273]},{"content":"When a button has been enabled, it can be pressed and checked.","pos":[32277,32339]},{"content":"If you want to change more than one button state, consider calling <bpt id=\"p1\">[</bpt>SetState<ept id=\"p1\">](#ctoolbarctrl__setstate)</ept> instead.","pos":[32340,32451],"source":" If you want to change more than one button state, consider calling [SetState](#ctoolbarctrl__setstate) instead."},{"pos":[32510,32542],"content":"CToolBarCtrl::GetAnchorHighlight"},{"content":"Retrieves the anchor highlight setting for a toolbar.","pos":[32546,32599]},{"content":"Return Value","pos":[32660,32672]},{"content":"If nonzero, anchor highlighting is enabled.","pos":[32676,32719]},{"content":"If zero, anchor highlighting is disabled.","pos":[32720,32761]},{"content":"Remarks","pos":[32771,32778]},{"pos":[32782,33005],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_GETANCHORHIGHLIGHT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787313)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TB_GETANCHORHIGHLIGHT](http://msdn.microsoft.com/library/windows/desktop/bb787313), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[33055,33078],"content":"CToolBarCtrl::GetBitmap"},{"content":"Retrieves the index of the bitmap associated with a button in a toolbar.","pos":[33082,33154]},{"content":"Parameters","pos":[33212,33222]},{"content":"Command identifier of the button whose bitmap index is to be retrieved.","pos":[33235,33306]},{"content":"Return Value","pos":[33316,33328]},{"content":"Returns the index of the bitmap if successful, or zero otherwise.","pos":[33332,33397]},{"content":"Remarks","pos":[33407,33414]},{"pos":[33418,33584],"content":"Implements the functionality of <bpt id=\"p1\">[</bpt>TB_GETBITMAP<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787315)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"Implements the functionality of [TB_GETBITMAP](http://msdn.microsoft.com/library/windows/desktop/bb787315) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[33639,33667],"content":"CToolBarCtrl::GetBitmapFlags"},{"content":"Retrieves the bitmap flags from the toolbar.","pos":[33671,33715]},{"content":"Return Value","pos":[33772,33784]},{"pos":[33788,33902],"content":"A <bpt id=\"p1\">**</bpt>UINT<ept id=\"p1\">**</ept> that has the <bpt id=\"p2\">**</bpt>TBBF_LARGE<ept id=\"p2\">**</ept> flag set if the display can support large toolbar bitmaps, clear otherwise.","source":"A **UINT** that has the **TBBF_LARGE** flag set if the display can support large toolbar bitmaps, clear otherwise."},{"content":"Remarks","pos":[33912,33919]},{"content":"You should call it after creating the toolbar but before adding bitmaps to the toolbar.","pos":[33923,34010]},{"content":"The return value indicates whether the display supports large bitmaps or not.","pos":[34011,34088]},{"content":"If the display supports large bitmaps and if you choose to use them, call <bpt id=\"p1\">[</bpt>SetBitmapSize<ept id=\"p1\">](#ctoolbarctrl__setbitmapsize)</ept> and <bpt id=\"p2\">[</bpt>SetButtonSize<ept id=\"p2\">](#ctoolbarctrl__setbuttonsize)</ept> before adding your large bitmap using <bpt id=\"p3\">[</bpt>AddBitmap<ept id=\"p3\">](#ctoolbarctrl__addbitmap)</ept>.","pos":[34089,34335],"source":" If the display supports large bitmaps and if you choose to use them, call [SetBitmapSize](#ctoolbarctrl__setbitmapsize) and [SetButtonSize](#ctoolbarctrl__setbuttonsize) before adding your large bitmap using [AddBitmap](#ctoolbarctrl__addbitmap)."},{"pos":[34385,34408],"content":"CToolBarCtrl::GetButton"},{"content":"Retrieves information about the specified button in a toolbar control.","pos":[34412,34482]},{"content":"Parameters","pos":[34576,34586]},{"content":"Zero-based index of the button for which to retrieve information.","pos":[34602,34667]},{"content":"Address of the <ph id=\"ph1\">`TBBUTTON`</ph> structure that is to receive a copy of the button information.","pos":[34688,34776],"source":" Address of the `TBBUTTON` structure that is to receive a copy of the button information."},{"content":"See <bpt id=\"p1\">[</bpt>CToolBarCtrl::AddButtons<ept id=\"p1\">](#ctoolbarctrl__addbuttons)</ept> for information about the <ph id=\"ph1\">`TBBUTTON`</ph> structure.","pos":[34777,34882],"source":" See [CToolBarCtrl::AddButtons](#ctoolbarctrl__addbuttons) for information about the `TBBUTTON` structure."},{"content":"Return Value","pos":[34892,34904]},{"content":"Nonzero if successful; otherwise zero.","pos":[34908,34946]},{"pos":[35001,35029],"content":"CToolBarCtrl::GetButtonCount"},{"content":"Retrieves a count of the buttons currently in the toolbar control.","pos":[35033,35099]},{"content":"Return Value","pos":[35155,35167]},{"content":"The count of the buttons.","pos":[35171,35196]},{"pos":[35250,35277],"content":"CToolBarCtrl::GetButtonInfo"},{"content":"Retrieves the information for a button in a toolbar.","pos":[35281,35333]},{"content":"Parameters","pos":[35427,35437]},{"content":"The button identifier.","pos":[35450,35472]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>TBBUTTONINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb760478)</ept> structure that receives the button information.","pos":[35490,35627],"source":" A pointer to a [TBBUTTONINFO](http://msdn.microsoft.com/library/windows/desktop/bb760478) structure that receives the button information."},{"content":"Return Value","pos":[35637,35649]},{"content":"The zero-based index of the button, if successful; otherwise -1.","pos":[35653,35717]},{"content":"Remarks","pos":[35727,35734]},{"pos":[35738,35956],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_GETBUTTONINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787321)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TB_GETBUTTONINFO](http://msdn.microsoft.com/library/windows/desktop/bb787321), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[36010,36037],"content":"CToolBarCtrl::GetButtonSize"},{"content":"Gets the size of a toolbar button.","pos":[36041,36075]},{"content":"Return Value","pos":[36132,36144]},{"pos":[36148,36245],"content":"A <ph id=\"ph1\">`DWORD`</ph> value that contains the width and height values in the LOWORD and HIWORD, respectively.","source":"A `DWORD` value that contains the width and height values in the LOWORD and HIWORD, respectively."},{"pos":[36299,36326],"content":"CToolBarCtrl::GetButtonText"},{"content":"Retrieves the display text of a specified button on the current toolbar control.","pos":[36330,36410]},{"content":"Parameters","pos":[36481,36491]},{"content":"Parameter","pos":[36498,36507]},{"content":"Description","pos":[36508,36519]},{"pos":[36562,36566],"content":"[in]"},{"content":"The identifier for the button whose display text is retrieved.","pos":[36578,36640]},{"content":"Return Value","pos":[36651,36663]},{"pos":[36667,36773],"content":"A <bpt id=\"p1\">[</bpt>CString<ept id=\"p1\">](../../atl-mfc-shared/using-cstring.md)</ept> that contains the display text of the specified button.","source":"A [CString](../../atl-mfc-shared/using-cstring.md) that contains the display text of the specified button."},{"content":"Remarks","pos":[36783,36790]},{"pos":[36794,36942],"content":"This method sends the <bpt id=\"p1\">[</bpt>TB_GETBUTTONTEXT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787325)</ept> message, which is described in the Windows SDK.","source":"This method sends the [TB_GETBUTTONTEXT](http://msdn.microsoft.com/library/windows/desktop/bb787325) message, which is described in the Windows SDK."},{"pos":[36997,37025],"content":"CToolBarCtrl::GetColorScheme"},{"content":"Retrieves the color scheme of the current toolbar control.","pos":[37029,37087]},{"content":"Parameters","pos":[37170,37180]},{"content":"Parameter","pos":[37187,37196]},{"content":"Description","pos":[37197,37208]},{"pos":[37251,37256],"content":"[out]"},{"content":"Pointer to a <bpt id=\"p1\">[</bpt>COLORSCHEME<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775502)</ept> structure that receives the color scheme information.","pos":[37273,37413],"source":"Pointer to a [COLORSCHEME](http://msdn.microsoft.com/library/windows/desktop/bb775502) structure that receives the color scheme information."},{"content":"When this method returns, the structure describes the highlight color and shadow color of the toolbar control.","pos":[37414,37524]},{"content":"Return Value","pos":[37535,37547]},{"pos":[37558,37607],"content":"if this method is successful; otherwise, <ph id=\"ph1\">`false`</ph>.","source":" if this method is successful; otherwise, `false`."},{"content":"Remarks","pos":[37617,37624]},{"pos":[37628,37817],"content":"This method sends the <bpt id=\"p1\">[</bpt>TB_GETCOLORSCHEME<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787327)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [TB_GETCOLORSCHEME](http://msdn.microsoft.com/library/windows/desktop/bb787327) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[37878,37912],"content":"CToolBarCtrl::GetDisabledImageList"},{"content":"Retrieves the image list that a toolbar control uses to display disabled buttons.","pos":[37916,37997]},{"content":"Return Value","pos":[38067,38079]},{"pos":[38083,38205],"content":"A pointer to a <bpt id=\"p1\">[</bpt>CImageList<ept id=\"p1\">](../../mfc/reference/cimagelist-class.md)</ept> object, or <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept> if no disabled image list is set.","source":"A pointer to a [CImageList](../../mfc/reference/cimagelist-class.md) object, or **NULL** if no disabled image list is set."},{"content":"Remarks","pos":[38215,38222]},{"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_GETDISABLEDIMAGELIST<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787329)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[38226,38451],"source":"This member function implements the behavior of the Win32 message [TB_GETDISABLEDIMAGELIST](http://msdn.microsoft.com/library/windows/desktop/bb787329), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"The MFC implementation of <ph id=\"ph1\">`GetDisabledImageList`</ph> uses a <ph id=\"ph2\">`CImageList`</ph> object containing the toolbar control's button images, rather than a handle to an image list.","pos":[38452,38614],"source":" The MFC implementation of `GetDisabledImageList` uses a `CImageList` object containing the toolbar control's button images, rather than a handle to an image list."},{"pos":[38668,38695],"content":"CToolBarCtrl::GetDropTarget"},{"pos":[38699,38819],"content":"Retrieves the <bpt id=\"p1\">[</bpt>IDropTarget<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms679679)</ept> interface for a toolbar control.","source":"Retrieves the [IDropTarget](http://msdn.microsoft.com/library/windows/desktop/ms679679) interface for a toolbar control."},{"content":"Parameters","pos":[38904,38914]},{"content":"A pointer to an <bpt id=\"p1\">[</bpt>IDropTarget<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms679679)</ept> interface pointer.","pos":[38936,39044],"source":" A pointer to an [IDropTarget](http://msdn.microsoft.com/library/windows/desktop/ms679679) interface pointer."},{"content":"If an error occurs, a <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> pointer is placed in this address.","pos":[39045,39110],"source":" If an error occurs, a **NULL** pointer is placed in this address."},{"content":"Return Value","pos":[39120,39132]},{"pos":[39136,39210],"content":"Returns an <ph id=\"ph1\">`HRESULT`</ph> value indicating success or failure of the operation.","source":"Returns an `HRESULT` value indicating success or failure of the operation."},{"content":"Remarks","pos":[39220,39227]},{"pos":[39231,39445],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_GETOBJECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787343)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TB_GETOBJECT](http://msdn.microsoft.com/library/windows/desktop/bb787343), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[39502,39532],"content":"CToolBarCtrl::GetExtendedStyle"},{"content":"Retrieves the extended styles for a toolbar control.","pos":[39536,39588]},{"content":"Return Value","pos":[39648,39660]},{"content":"A <ph id=\"ph1\">`DWORD`</ph> that represents the extended styles currently in use for the toolbar control.","pos":[39664,39751],"source":"A `DWORD` that represents the extended styles currently in use for the toolbar control."},{"content":"For a list of styles, see <bpt id=\"p1\">[</bpt>Toolbar Extended Styles<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb760430)</ept>, in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[39752,39924],"source":" For a list of styles, see [Toolbar Extended Styles](http://msdn.microsoft.com/library/windows/desktop/bb760430), in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Remarks","pos":[39934,39941]},{"pos":[39945,40166],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_GETEXTENDEDSTYLE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787331)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TB_GETEXTENDEDSTYLE](http://msdn.microsoft.com/library/windows/desktop/bb787331), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[40222,40251],"content":"CToolBarCtrl::GetHotImageList"},{"content":"Retrieves the image list that a toolbar control uses to display \"hot\" buttons.","pos":[40255,40333]},{"content":"A hot button appears highlighted when the mouse pointer is above it.","pos":[40334,40402]},{"content":"Return Value","pos":[40467,40479]},{"pos":[40483,40605],"content":"A pointer to a <bpt id=\"p1\">[</bpt>CImageList<ept id=\"p1\">](../../mfc/reference/cimagelist-class.md)</ept> object, or <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept> if no disabled image list is set.","source":"A pointer to a [CImageList](../../mfc/reference/cimagelist-class.md) object, or **NULL** if no disabled image list is set."},{"content":"Remarks","pos":[40615,40622]},{"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_GETHOTIMAGELIST<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787334)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[40626,40846],"source":"This member function implements the behavior of the Win32 message [TB_GETHOTIMAGELIST](http://msdn.microsoft.com/library/windows/desktop/bb787334), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"A hot button appears highlighted when the mouse pointer is above it.","pos":[40847,40915]},{"pos":[40966,40990],"content":"CToolBarCtrl::GetHotItem"},{"content":"Retrieves the index of the hot item in a toolbar.","pos":[40994,41043]},{"content":"Return Value","pos":[41095,41107]},{"content":"The zero-based index of the hot item in a toolbar.","pos":[41111,41161]},{"content":"Remarks","pos":[41171,41178]},{"pos":[41182,41397],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_GETHOTITEM<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787336)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TB_GETHOTITEM](http://msdn.microsoft.com/library/windows/desktop/bb787336), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[41450,41476],"content":"CToolBarCtrl::GetImageList"},{"content":"Retrieves the image list that a toolbar control uses to display buttons in their default state.","pos":[41480,41575]},{"content":"Return Value","pos":[41637,41649]},{"pos":[41653,41766],"content":"A pointer to a <bpt id=\"p1\">[</bpt>CImageList<ept id=\"p1\">](../../mfc/reference/cimagelist-class.md)</ept> object, or <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept> if no image list is set.","source":"A pointer to a [CImageList](../../mfc/reference/cimagelist-class.md) object, or **NULL** if no image list is set."},{"content":"Remarks","pos":[41776,41783]},{"pos":[41787,42004],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_GETIMAGELIST<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787337)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TB_GETIMAGELIST](http://msdn.microsoft.com/library/windows/desktop/bb787337), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[42058,42085],"content":"CToolBarCtrl::GetInsertMark"},{"content":"Retrieves the current insertion mark for the toolbar.","pos":[42089,42142]},{"content":"Parameters","pos":[42217,42227]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>TBINSERTMARK<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb760480)</ept> structure that receives the insertion mark.","pos":[42242,42375],"source":" A pointer to a [TBINSERTMARK](http://msdn.microsoft.com/library/windows/desktop/bb760480) structure that receives the insertion mark."},{"content":"Remarks","pos":[42385,42392]},{"pos":[42396,42614],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_GETINSERTMARK<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787338)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TB_GETINSERTMARK](http://msdn.microsoft.com/library/windows/desktop/bb787338), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[42673,42705],"content":"CToolBarCtrl::GetInsertMarkColor"},{"content":"Retrieves the color used to draw the insertion mark for the toolbar.","pos":[42709,42777]},{"content":"Return Value","pos":[42842,42854]},{"pos":[42858,42926],"content":"A <bpt id=\"p1\">**</bpt>COLORREF<ept id=\"p1\">**</ept> value that contains the current insertion mark color.","source":"A **COLORREF** value that contains the current insertion mark color."},{"content":"Remarks","pos":[42936,42943]},{"pos":[42947,43170],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_GETINSERTMARKCOLOR<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787339)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TB_GETINSERTMARKCOLOR](http://msdn.microsoft.com/library/windows/desktop/bb787339), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[43222,43247],"content":"CToolBarCtrl::GetItemRect"},{"content":"Retrieves the bounding rectangle of a button in a toolbar control.","pos":[43251,43317]},{"content":"Parameters","pos":[43407,43417]},{"content":"Zero-based index of the button for which to retrieve information.","pos":[43433,43498]},{"content":"Address of a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure or a <bpt id=\"p2\">[</bpt>CRect<ept id=\"p2\">](../../atl-mfc-shared/reference/crect-class.md)</ept> object that receives the coordinates of the bounding rectangle.","pos":[43517,43730],"source":" Address of a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure or a [CRect](../../atl-mfc-shared/reference/crect-class.md) object that receives the coordinates of the bounding rectangle."},{"content":"Return Value","pos":[43740,43752]},{"content":"Nonzero if successful; otherwise zero.","pos":[43756,43794]},{"content":"Remarks","pos":[43804,43811]},{"pos":[43815,43921],"content":"This function does not retrieve the bounding rectangle for buttons whose state is set to <ph id=\"ph1\">`TBSTATE_HIDDEN`</ph>.","source":"This function does not retrieve the bounding rectangle for buttons whose state is set to `TBSTATE_HIDDEN`."},{"pos":[43972,43996],"content":"CToolBarCtrl::GetMaxSize"},{"content":"Retrieves the total size of all of the visible buttons and separators in the toolbar.","pos":[44000,44085]},{"content":"Parameters","pos":[44150,44160]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>SIZE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure that receives the size of the items.","pos":[44175,44303],"source":" A pointer to a [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure that receives the size of the items."},{"content":"Return Value","pos":[44313,44325]},{"content":"Nonzero if successful; otherwise 0.","pos":[44329,44364]},{"content":"Remarks","pos":[44374,44381]},{"pos":[44385,44600],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_GETMAXSIZE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787341)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TB_GETMAXSIZE](http://msdn.microsoft.com/library/windows/desktop/bb787341), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[44655,44683],"content":"CToolBarCtrl::GetMaxTextRows"},{"content":"Retrieves the maximum number of text rows displayed on a toolbar button.","pos":[44687,44759]},{"content":"Return Value","pos":[44815,44827]},{"content":"The maximum number of text rows displayed on a toolbar button.","pos":[44831,44893]},{"pos":[44944,44968],"content":"CToolBarCtrl::GetMetrics"},{"pos":[44972,45023],"content":"Retrieves the metrics of the <ph id=\"ph1\">`CToolBarCtrl`</ph> object.","source":"Retrieves the metrics of the `CToolBarCtrl` object."},{"content":"Parameters","pos":[45092,45102]},{"content":"A pointer to the <bpt id=\"p1\">[</bpt>TBMETRICS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb760482)</ept> structure of the <ph id=\"ph1\">`CToolBarCtrl`</ph> object.","pos":[45116,45244],"source":" A pointer to the [TBMETRICS](http://msdn.microsoft.com/library/windows/desktop/bb760482) structure of the `CToolBarCtrl` object."},{"content":"Remarks","pos":[45254,45261]},{"pos":[45265,45477],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>TB_GETMETRICS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787342)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [TB_GETMETRICS](http://msdn.microsoft.com/library/windows/desktop/bb787342) message, as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[45528,45552],"content":"CToolBarCtrl::GetPadding"},{"content":"Retrieves the horizontal and vertical padding of the current toolbar control.","pos":[45556,45633]},{"content":"Parameters","pos":[45736,45746]},{"content":"Parameter","pos":[45753,45762]},{"content":"Description","pos":[45763,45774]},{"pos":[45817,45822],"content":"[out]"},{"content":"An integer that receives the horizontal padding of the toolbar control, in pixels.","pos":[45839,45921]},{"pos":[45926,45931],"content":"[out]"},{"content":"An integer that receives the vertical padding of the toolbar control, in pixels.","pos":[45948,46028]},{"content":"Return Value","pos":[46039,46051]},{"pos":[46062,46111],"content":"if this method is successful; otherwise, <ph id=\"ph1\">`false`</ph>.","source":" if this method is successful; otherwise, `false`."},{"content":"Remarks","pos":[46121,46128]},{"pos":[46132,46317],"content":"This method sends the <bpt id=\"p1\">[</bpt>TB_GETPADDING<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787344)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [TB_GETPADDING](http://msdn.microsoft.com/library/windows/desktop/bb787344) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[46377,46410],"content":"CToolBarCtrl::GetPressedImageList"},{"content":"Retrieves the image list that the current toolbar control uses to represent buttons in the pressed state.","pos":[46414,46519]},{"content":"Return Value","pos":[46579,46591]},{"pos":[46595,46755],"content":"Pointer to a <bpt id=\"p1\">[</bpt>CImageList<ept id=\"p1\">](../../mfc/reference/cimagelist-class.md)</ept> that contains the image list for the current control, or <ph id=\"ph1\">`NULL`</ph> if no such image list is set.","source":"Pointer to a [CImageList](../../mfc/reference/cimagelist-class.md) that contains the image list for the current control, or `NULL` if no such image list is set."},{"content":"Remarks","pos":[46765,46772]},{"pos":[46776,46970],"content":"This method sends the <bpt id=\"p1\">[</bpt>TB_GETPRESSEDIMAGELIST<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787345)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [TB_GETPRESSEDIMAGELIST](http://msdn.microsoft.com/library/windows/desktop/bb787345) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[47018,47039],"content":"CToolBarCtrl::GetRect"},{"content":"Retrieves the bounding rectangle for a specified toolbar button.","pos":[47043,47107]},{"content":"Parameters","pos":[47190,47200]},{"content":"The button identifier.","pos":[47213,47235]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure to receive the bounding rectangle information.","pos":[47254,47392],"source":" A pointer to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure to receive the bounding rectangle information."},{"content":"Return Value","pos":[47402,47414]},{"pos":[47418,47462],"content":"<bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if successful; otherwise <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","source":"**TRUE** if successful; otherwise **FALSE**."},{"content":"Remarks","pos":[47472,47479]},{"pos":[47483,47695],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_GETRECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787346)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TB_GETRECT](http://msdn.microsoft.com/library/windows/desktop/bb787346), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[47743,47764],"content":"CToolBarCtrl::GetRows"},{"content":"Retrieves the number of rows of buttons currently displayed by the toolbar control.","pos":[47768,47851]},{"content":"Return Value","pos":[47900,47912]},{"content":"Number of rows of buttons currently displayed on the toolbar.","pos":[47916,47977]},{"content":"Remarks","pos":[47987,47994]},{"pos":[47998,48111],"content":"Note that the number of rows will always be one unless the toolbar was created with the <ph id=\"ph1\">`TBSTYLE_WRAPABLE`</ph> style.","source":"Note that the number of rows will always be one unless the toolbar was created with the `TBSTYLE_WRAPABLE` style."},{"pos":[48160,48182],"content":"CToolBarCtrl::GetState"},{"content":"Retrieves information about the state of the specified button in a toolbar control, such as whether it is enabled, pressed, or checked.","pos":[48186,48321]},{"content":"Parameters","pos":[48378,48388]},{"content":"Command identifier of the button for which to retrieve information.","pos":[48401,48468]},{"content":"Return Value","pos":[48478,48490]},{"content":"The button state information if successful or – 1 otherwise.","pos":[48494,48554]},{"content":"The button state information can be a combination of the values listed in <bpt id=\"p1\">[</bpt>CToolBarCtrl::AddButtons<ept id=\"p1\">](#ctoolbarctrl__addbuttons)</ept>.","pos":[48555,48683],"source":" The button state information can be a combination of the values listed in [CToolBarCtrl::AddButtons](#ctoolbarctrl__addbuttons)."},{"content":"Remarks","pos":[48693,48700]},{"content":"This function is especially handy if you want to retrieve more than one of the button states.","pos":[48704,48797]},{"content":"To just retrieve one state, use one of the following member functions: <bpt id=\"p1\">[</bpt>IsButtonEnabled<ept id=\"p1\">](#ctoolbarctrl__isbuttonenabled)</ept>, <bpt id=\"p2\">[</bpt>IsButtonChecked<ept id=\"p2\">](#ctoolbarctrl__isbuttonchecked)</ept>, <bpt id=\"p3\">[</bpt>IsButtonPressed<ept id=\"p3\">](#ctoolbarctrl__isbuttonpressed)</ept>, <bpt id=\"p4\">[</bpt>IsButtonHidden<ept id=\"p4\">](#ctoolbarctrl__isbuttonhidden)</ept>, or <bpt id=\"p5\">[</bpt>IsButtonIndeterminate<ept id=\"p5\">](#ctoolbarctrl__isbuttonindeterminate)</ept>.","pos":[48798,49136],"source":" To just retrieve one state, use one of the following member functions: [IsButtonEnabled](#ctoolbarctrl__isbuttonenabled), [IsButtonChecked](#ctoolbarctrl__isbuttonchecked), [IsButtonPressed](#ctoolbarctrl__isbuttonpressed), [IsButtonHidden](#ctoolbarctrl__isbuttonhidden), or [IsButtonIndeterminate](#ctoolbarctrl__isbuttonindeterminate)."},{"content":"However, the <ph id=\"ph1\">`GetState`</ph> member function is the only way to detect the <ph id=\"ph2\">`TBSTATE_WRAP`</ph> button state.","pos":[49137,49235],"source":" However, the `GetState` member function is the only way to detect the `TBSTATE_WRAP` button state."},{"pos":[49285,49308],"content":"CToolBarCtrl::GetString"},{"content":"Retrieves a toolbar string.","pos":[49312,49339]},{"content":"Parameters","pos":[49517,49527]},{"content":"nString","pos":[49532,49539]},{"content":"Index of the string.","pos":[49544,49564]},{"content":"lpstrString","pos":[49572,49583]},{"content":"Pointer to a buffer used to return the string.","pos":[49588,49634]},{"content":"cchMaxLen","pos":[49642,49651]},{"content":"Length of the buffer in bytes.","pos":[49656,49686]},{"content":"The string.","pos":[49702,49713]},{"content":"Return Value","pos":[49723,49735]},{"content":"The length of the string if successful, -1 if not.","pos":[49739,49789]},{"content":"Remarks","pos":[49799,49806]},{"pos":[49810,50024],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_GETSTRING<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787349)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TB_GETSTRING](http://msdn.microsoft.com/library/windows/desktop/bb787349), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[50073,50095],"content":"CToolBarCtrl::GetStyle"},{"content":"Gets the styles currently applied to a toolbar control.","pos":[50099,50154]},{"content":"Return Value","pos":[50206,50218]},{"pos":[50222,50418],"content":"A <ph id=\"ph1\">`DWORD`</ph> containing a combination of <bpt id=\"p1\">[</bpt>toolbar control styles<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb760439)</ept>, as described in the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"A `DWORD` containing a combination of [toolbar control styles](http://msdn.microsoft.com/library/windows/desktop/bb760439), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[50470,50495],"content":"CToolBarCtrl::GetToolTips"},{"content":"Retrieves the handle of the tool tip control, if any, associated with the toolbar control.","pos":[50499,50589]},{"content":"Return Value","pos":[50652,50664]},{"pos":[50668,50841],"content":"A pointer to the <bpt id=\"p1\">[</bpt>CToolTipCtrl<ept id=\"p1\">](../../mfc/reference/ctooltipctrl-class.md)</ept> object associated with this toolbar or <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept> if the toolbar has no associated tool tip control.","source":"A pointer to the [CToolTipCtrl](../../mfc/reference/ctooltipctrl-class.md) object associated with this toolbar or **NULL** if the toolbar has no associated tool tip control."},{"content":"Remarks","pos":[50851,50858]},{"content":"Since the toolbar control normally creates and maintains its own tool tip control, most programs don't need to call this function.","pos":[50862,50992]},{"pos":[51040,51061],"content":"CToolBarCtrl::HitTest"},{"content":"Determines where a point lies in a toolbar control.","pos":[51065,51116]},{"content":"Parameters","pos":[51176,51186]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>POINT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162805)</ept> structure that contains the x-coordinate of the hit test in the <bpt id=\"p2\">**</bpt>x<ept id=\"p2\">**</ept> member and the y-coordinate of the hit test in the <bpt id=\"p3\">**</bpt>y<ept id=\"p3\">**</ept> member.","pos":[51199,51416],"source":" A pointer to a [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) structure that contains the x-coordinate of the hit test in the **x** member and the y-coordinate of the hit test in the **y** member."},{"content":"The coordinates are relative to the toolbar's client area.","pos":[51417,51475]},{"content":"Return Value","pos":[51485,51497]},{"content":"An integer value indicating the location of a point on a toolbar.","pos":[51501,51566]},{"content":"If the value is zero or a positive value, this return value is the zero-based index of the nonseparator item in which the point lies.","pos":[51567,51700]},{"content":"If the return value is negative, the point does not lie within a button.","pos":[51707,51779]},{"content":"The absolute value of the return value is the index of a separator item or the nearest nonseparator item.","pos":[51780,51885]},{"content":"Remarks","pos":[51895,51902]},{"pos":[51906,52118],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_HITTEST<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787360)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TB_HITTEST](http://msdn.microsoft.com/library/windows/desktop/bb787360), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[52169,52193],"content":"CToolBarCtrl::HideButton"},{"content":"Hides or shows the specified button in a toolbar control.","pos":[52197,52254]},{"content":"Parameters","pos":[52335,52345]},{"content":"Command identifier of the button to hide or show.","pos":[52358,52407]},{"content":"<bpt id=\"p1\"> **</bpt>TRUE<ept id=\"p1\">**</ept> to hide the button, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> to show it.","pos":[52424,52475],"source":" **TRUE** to hide the button, **FALSE** to show it."},{"content":"Return Value","pos":[52485,52497]},{"content":"Nonzero if successful; otherwise zero.","pos":[52501,52539]},{"content":"Remarks","pos":[52549,52556]},{"pos":[52560,52671],"content":"If you want to change more than one button state, consider calling <bpt id=\"p1\">[</bpt>SetState<ept id=\"p1\">](#ctoolbarctrl__setstate)</ept> instead.","source":"If you want to change more than one button state, consider calling [SetState](#ctoolbarctrl__setstate) instead."},{"pos":[52725,52752],"content":"CToolBarCtrl::Indeterminate"},{"content":"Sets or clears the indeterminate state of the specified button in a toolbar control.","pos":[52756,52840]},{"content":"Parameters","pos":[52933,52943]},{"content":"Command identifier of the button whose indeterminate state is to be set or cleared.","pos":[52956,53039]},{"content":"bIndeterminate","pos":[53047,53061]},{"content":"<bpt id=\"p1\"> **</bpt>TRUE<ept id=\"p1\">**</ept> to set the indeterminate state for the specified button, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> to clear it.","pos":[53065,53154],"source":" **TRUE** to set the indeterminate state for the specified button, **FALSE** to clear it."},{"content":"Return Value","pos":[53164,53176]},{"content":"Nonzero if successful; otherwise zero.","pos":[53180,53218]},{"content":"Remarks","pos":[53228,53235]},{"content":"Indeterminate buttons are displayed grayed, such as the way the bold button on the toolbar of a word processor would look when the text selected contains both bold and regular characters.","pos":[53239,53426]},{"content":"If you want to change more than one button state, consider calling <bpt id=\"p1\">[</bpt>SetState<ept id=\"p1\">](#ctoolbarctrl__setstate)</ept> instead.","pos":[53427,53538],"source":" If you want to change more than one button state, consider calling [SetState](#ctoolbarctrl__setstate) instead."},{"pos":[53591,53617],"content":"CToolBarCtrl::InsertButton"},{"content":"Inserts a button in a toolbar control.","pos":[53621,53659]},{"content":"Parameters","pos":[53747,53757]},{"content":"Zero-based index of a button.","pos":[53773,53802]},{"content":"This function inserts the new button to the left of this button.","pos":[53803,53867]},{"content":"Address of a <ph id=\"ph1\">`TBBUTTON`</ph> structure containing information about the button to insert.","pos":[53888,53972],"source":" Address of a `TBBUTTON` structure containing information about the button to insert."},{"content":"See <bpt id=\"p1\">[</bpt>CToolBarCtrl::AddButtons<ept id=\"p1\">](#ctoolbarctrl__addbuttons)</ept> for a description of the <ph id=\"ph1\">`TBBUTTON`</ph> structure.","pos":[53973,54077],"source":" See [CToolBarCtrl::AddButtons](#ctoolbarctrl__addbuttons) for a description of the `TBBUTTON` structure."},{"content":"Return Value","pos":[54087,54099]},{"content":"Nonzero if successful; otherwise zero.","pos":[54103,54141]},{"content":"Remarks","pos":[54151,54158]},{"pos":[54162,54403],"content":"The image and/or string whose index you provide must have previously been added to the toolbar control's list using <bpt id=\"p1\">[</bpt>AddBitmap<ept id=\"p1\">](#ctoolbarctrl__addbitmap)</ept>, <bpt id=\"p2\">[</bpt>AddString<ept id=\"p2\">](#ctoolbarctrl__addstring)</ept>, and/or <bpt id=\"p3\">[</bpt>AddStrings<ept id=\"p3\">](#ctoolbarctrl__addstrings)</ept>.","source":"The image and/or string whose index you provide must have previously been added to the toolbar control's list using [AddBitmap](#ctoolbarctrl__addbitmap), [AddString](#ctoolbarctrl__addstring), and/or [AddStrings](#ctoolbarctrl__addstrings)."},{"pos":[54461,54492],"content":"CToolBarCtrl::InsertMarkHitTest"},{"content":"Retrieves the insertion mark information for a point in a toolbar.","pos":[54496,54562]},{"content":"Parameters","pos":[54666,54676]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>POINT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162805)</ept> structure that contains the hit test coordinates, relative to the client area of the toolbar.","pos":[54689,54865],"source":" A pointer to a [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) structure that contains the hit test coordinates, relative to the client area of the toolbar."},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>TBINSERTMARK<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb760480)</ept> structure that receives the insertion mark information.","pos":[54883,55028],"source":" A pointer to a [TBINSERTMARK](http://msdn.microsoft.com/library/windows/desktop/bb760480) structure that receives the insertion mark information."},{"content":"Return Value","pos":[55038,55050]},{"content":"Nonzero if successful; otherwise zero.","pos":[55054,55092]},{"content":"Remarks","pos":[55102,55109]},{"pos":[55113,55335],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_INSERTMARKHITTEST<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787367)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TB_INSERTMARKHITTEST](http://msdn.microsoft.com/library/windows/desktop/bb787367), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[55391,55420],"content":"CToolBarCtrl::IsButtonChecked"},{"content":"Determines whether the specified button in a toolbar control is checked.","pos":[55424,55496]},{"content":"Parameters","pos":[55561,55571]},{"content":"Command identifier of the button in the toolbar.","pos":[55584,55632]},{"content":"Return Value","pos":[55642,55654]},{"content":"Nonzero if the button is checked; otherwise zero.","pos":[55658,55707]},{"content":"Remarks","pos":[55717,55724]},{"pos":[55728,55832],"content":"Consider calling <bpt id=\"p1\">[</bpt>GetState<ept id=\"p1\">](#ctoolbarctrl__getstate)</ept> if you want to retrieve more than one button state.","source":"Consider calling [GetState](#ctoolbarctrl__getstate) if you want to retrieve more than one button state."},{"pos":[55888,55917],"content":"CToolBarCtrl::IsButtonEnabled"},{"content":"Determines whether the specified button in a toolbar control is enabled.","pos":[55921,55993]},{"content":"Parameters","pos":[56058,56068]},{"content":"Command identifier of the button in the toolbar.","pos":[56081,56129]},{"content":"Return Value","pos":[56139,56151]},{"content":"Nonzero if the button is enabled; otherwise zero.","pos":[56155,56204]},{"content":"Remarks","pos":[56214,56221]},{"pos":[56225,56329],"content":"Consider calling <bpt id=\"p1\">[</bpt>GetState<ept id=\"p1\">](#ctoolbarctrl__getstate)</ept> if you want to retrieve more than one button state.","source":"Consider calling [GetState](#ctoolbarctrl__getstate) if you want to retrieve more than one button state."},{"pos":[56384,56412],"content":"CToolBarCtrl::IsButtonHidden"},{"content":"Determines whether the specified button in a toolbar control is hidden.","pos":[56416,56487]},{"content":"Parameters","pos":[56551,56561]},{"content":"Command identifier of the button in the toolbar.","pos":[56574,56622]},{"content":"Return Value","pos":[56632,56644]},{"content":"Nonzero if the button is hidden; otherwise zero.","pos":[56648,56696]},{"content":"Remarks","pos":[56706,56713]},{"pos":[56717,56821],"content":"Consider calling <bpt id=\"p1\">[</bpt>GetState<ept id=\"p1\">](#ctoolbarctrl__getstate)</ept> if you want to retrieve more than one button state.","source":"Consider calling [GetState](#ctoolbarctrl__getstate) if you want to retrieve more than one button state."},{"pos":[56881,56914],"content":"CToolBarCtrl::IsButtonHighlighted"},{"content":"Checks the highlight state of a toolbar button.","pos":[56918,56965]},{"content":"Parameters","pos":[57034,57044]},{"content":"[in]","pos":[57048,57052]},{"content":"The command ID for the toolbar button.","pos":[57062,57100]},{"content":"Return Value","pos":[57110,57122]},{"content":"Positive integer if the button is highlighted, 0 if the button is not highlighted, or -1 if an error occurs.","pos":[57126,57234]},{"pos":[57296,57331],"content":"CToolBarCtrl::IsButtonIndeterminate"},{"content":"Determines whether the specified button in a toolbar control is indeterminate.","pos":[57335,57413]},{"content":"Parameters","pos":[57484,57494]},{"content":"[in]","pos":[57498,57502]},{"content":"Command identifier of the button in the toolbar.","pos":[57512,57560]},{"content":"Return Value","pos":[57570,57582]},{"content":"Positive integer if the button is indeterminate, zero if the button is not indeterminate, or -1 if an error occurs.","pos":[57586,57701]},{"content":"Remarks","pos":[57711,57718]},{"content":"Indeterminate buttons are displayed dimmed, such as the way the bold button on the toolbar of a word processor looks when the selected text contains both bold and regular characters.","pos":[57722,57904]},{"content":"Consider calling <bpt id=\"p1\">[</bpt>GetState<ept id=\"p1\">](#ctoolbarctrl__getstate)</ept> if you want to retrieve more than one button state.","pos":[57905,58009],"source":" Consider calling [GetState](#ctoolbarctrl__getstate) if you want to retrieve more than one button state."},{"pos":[58065,58094],"content":"CToolBarCtrl::IsButtonPressed"},{"content":"Determines whether the specified button in a toolbar control is pressed.","pos":[58098,58170]},{"content":"Parameters","pos":[58235,58245]},{"content":"Command identifier of the button in the toolbar.","pos":[58258,58306]},{"content":"Return Value","pos":[58316,58328]},{"content":"Nonzero if the button is pressed, otherwise zero.","pos":[58332,58381]},{"content":"Remarks","pos":[58391,58398]},{"pos":[58402,58506],"content":"Consider calling <bpt id=\"p1\">[</bpt>GetState<ept id=\"p1\">](#ctoolbarctrl__getstate)</ept> if you want to retrieve more than one button state.","source":"Consider calling [GetState](#ctoolbarctrl__getstate) if you want to retrieve more than one button state."},{"pos":[58557,58581],"content":"CToolBarCtrl::LoadImages"},{"content":"Loads bitmaps into a toolbar control's image list.","pos":[58585,58635]},{"content":"Parameters","pos":[58720,58730]},{"content":"iBitmapID","pos":[58735,58744]},{"content":"ID of a bitmap that contains the images to be loaded.","pos":[58749,58802]},{"content":"To specify your own bitmap resource, set this parameter to the ID of a bitmap resource and set <ph id=\"ph1\">`hInst`</ph> to <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[58803,58918],"source":" To specify your own bitmap resource, set this parameter to the ID of a bitmap resource and set `hInst` to **NULL**."},{"content":"Your bitmap resource will be added to the image list as a single image.","pos":[58919,58990]},{"content":"You can add standard, system-defined bitmaps by setting <bpt id=\"p1\">*</bpt>hinst<ept id=\"p1\">*</ept> to <bpt id=\"p2\">**</bpt>HINST_COMMCTRL<ept id=\"p2\">**</ept> and setting this parameter to one of the following IDs:","pos":[58991,59132],"source":" You can add standard, system-defined bitmaps by setting *hinst* to **HINST_COMMCTRL** and setting this parameter to one of the following IDs:"},{"content":"Bitmap ID","pos":[59139,59148]},{"content":"Description","pos":[59149,59160]},{"content":"IDB_HIST_LARGE_COLOR","pos":[59203,59223]},{"content":"Explorer bitmaps in large size","pos":[59224,59254]},{"content":"IDB_HIST_SMALL_COLOR","pos":[59259,59279]},{"content":"Explorer bitmaps in small size","pos":[59280,59310]},{"content":"IDB_STD_LARGE_COLOR","pos":[59315,59334]},{"content":"Standard bitmaps in large size","pos":[59335,59365]},{"content":"IDB_STD_SMALL_COLOR","pos":[59370,59389]},{"content":"Standard bitmaps in small size","pos":[59390,59420]},{"content":"IDB_VIEW_LARGE_COLOR","pos":[59425,59445]},{"content":"View bitmaps in large size","pos":[59446,59472]},{"content":"IDB_VIEW_SMALL_COLOR","pos":[59477,59497]},{"content":"View bitmaps in small size","pos":[59498,59524]},{"content":"hinst","pos":[59533,59538]},{"content":"Program instance handle to the calling application.","pos":[59543,59594]},{"content":"This parameter can be <bpt id=\"p1\">**</bpt>HINST_COMMCTRL<ept id=\"p1\">**</ept> to load a standard image list.","pos":[59595,59666],"source":" This parameter can be **HINST_COMMCTRL** to load a standard image list."},{"content":"Remarks","pos":[59676,59683]},{"pos":[59687,59902],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_LOADIMAGES<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787381)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TB_LOADIMAGES](http://msdn.microsoft.com/library/windows/desktop/bb787381), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[59957,59985],"content":"CToolBarCtrl::MapAccelerator"},{"content":"Maps an accelerator character to a toolbar button.","pos":[59989,60039]},{"content":"Parameters","pos":[60125,60135]},{"content":"Accelerator character to be mapped.","pos":[60152,60187]},{"content":"This character is the same character that is underlined in the button's text.","pos":[60188,60265]},{"content":"pIDBtn","pos":[60273,60279]},{"content":"A pointer to a <bpt id=\"p1\">**</bpt>UINT<ept id=\"p1\">**</ept> that receives the command identifier of the button that corresponds to the accelerator specified in <ph id=\"ph1\">`chAccel`</ph>.","pos":[60284,60418],"source":" A pointer to a **UINT** that receives the command identifier of the button that corresponds to the accelerator specified in `chAccel`."},{"content":"Return Value","pos":[60428,60440]},{"content":"Nonzero if successful; otherwise zero.","pos":[60444,60482]},{"content":"Remarks","pos":[60492,60499]},{"pos":[60503,60722],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_MAPACCELERATOR<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787383)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TB_MAPACCELERATOR](http://msdn.microsoft.com/library/windows/desktop/bb787383), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[60773,60797],"content":"CToolBarCtrl::MarkButton"},{"content":"Sets the highlight state of a given button in a toolbar control.","pos":[60801,60865]},{"content":"Parameters","pos":[60951,60961]},{"content":"The button identifier.","pos":[60974,60996]},{"content":"Specifies the highlight state to be set.","pos":[61019,61059]},{"content":"By default, <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>.","pos":[61060,61081],"source":" By default, **TRUE**."},{"content":"If set to <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>, the button is set to its default state.","pos":[61082,61142],"source":" If set to **FALSE**, the button is set to its default state."},{"content":"Return Value","pos":[61152,61164]},{"content":"Nonzero if successful; otherwise 0.","pos":[61168,61203]},{"content":"Remarks","pos":[61213,61220]},{"pos":[61224,61439],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_MARKBUTTON<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787385)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TB_MARKBUTTON](http://msdn.microsoft.com/library/windows/desktop/bb787385), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[61490,61514],"content":"CToolBarCtrl::MoveButton"},{"content":"Moves a button from one index to another.","pos":[61518,61559]},{"content":"Parameters","pos":[61640,61650]},{"content":"nOldPos","pos":[61655,61662]},{"content":"The zero-based index of the button to be moved.","pos":[61667,61714]},{"content":"nNewPos","pos":[61722,61729]},{"content":"The zero-based index of the button's destination.","pos":[61734,61783]},{"content":"Return Value","pos":[61793,61805]},{"content":"Nonzero if successful; otherwise 0.","pos":[61809,61844]},{"content":"Remarks","pos":[61854,61861]},{"pos":[61865,62080],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_MOVEBUTTON<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787387)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TB_MOVEBUTTON](http://msdn.microsoft.com/library/windows/desktop/bb787387), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[62132,62157],"content":"CToolBarCtrl::PressButton"},{"content":"Presses or releases the specified button in a toolbar control.","pos":[62161,62223]},{"content":"Parameters","pos":[62300,62310]},{"content":"[in]","pos":[62314,62318]},{"content":"Command identifier of the button to press or release.","pos":[62328,62381]},{"content":"[in]","pos":[62388,62392]},{"content":"to press the specified button; <ph id=\"ph1\">`false`</ph> to release the specified button.","pos":[62412,62483],"source":" to press the specified button; `false` to release the specified button."},{"content":"The default value is <ph id=\"ph1\">`true`</ph>.","pos":[62484,62512],"source":" The default value is `true`."},{"content":"Return Value","pos":[62522,62534]},{"pos":[62545,62593],"content":"if the method is successful; otherwise, <ph id=\"ph1\">`false`</ph>.","source":" if the method is successful; otherwise, `false`."},{"content":"Remarks","pos":[62603,62610]},{"pos":[62614,62725],"content":"If you want to change more than one button state, consider calling <bpt id=\"p1\">[</bpt>SetState<ept id=\"p1\">](#ctoolbarctrl__setstate)</ept> instead.","source":"If you want to change more than one button state, consider calling [SetState](#ctoolbarctrl__setstate) instead."},{"pos":[62732,62918],"content":"This method sends the <bpt id=\"p1\">[</bpt>TB_PRESSBUTTON<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787389)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [TB_PRESSBUTTON](http://msdn.microsoft.com/library/windows/desktop/bb787389) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[62972,62999],"content":"CToolBarCtrl::ReplaceBitmap"},{"content":"Replaces the existing bitmap in the current toolbar control with a new bitmap.","pos":[63003,63081]},{"content":"Parameters","pos":[63160,63170]},{"content":"Parameter","pos":[63177,63186]},{"content":"Description","pos":[63187,63198]},{"pos":[63241,63245],"content":"[in]"},{"pos":[63263,63424],"content":"Pointer to a <bpt id=\"p1\">[</bpt>TBREPLACEBITMAP<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb760484)</ept> structure that describes the bitmap to be replaced and the new bitmap.","source":"Pointer to a [TBREPLACEBITMAP](http://msdn.microsoft.com/library/windows/desktop/bb760484) structure that describes the bitmap to be replaced and the new bitmap."},{"content":"Return Value","pos":[63435,63447]},{"pos":[63458,63507],"content":"if this method is successful; otherwise, <ph id=\"ph1\">`false`</ph>.","source":" if this method is successful; otherwise, `false`."},{"content":"Remarks","pos":[63517,63524]},{"pos":[63528,63716],"content":"This method sends the <bpt id=\"p1\">[</bpt>TB_REPLACEBITMAP<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787391)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [TB_REPLACEBITMAP](http://msdn.microsoft.com/library/windows/desktop/bb787391) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[63726,63733]},{"content":"The following code example replaces the bitmap for the standard toolbar with a different bitmap.","pos":[63737,63833]},{"pos":[63851,63876],"content":"NVC_MFC_CToolBarCtrl_s1#2"},{"pos":[63993,64019],"content":"CToolBarCtrl::RestoreState"},{"content":"Restores the state of the toolbar control from the location in the registry specified by the parameters.","pos":[64023,64127]},{"content":"Parameters","pos":[64246,64256]},{"content":"Identifies a currently open key in the registry or any of the following predefined reserved handle values:","pos":[64274,64380]},{"content":"HKEY_CLASSES_ROOT","pos":[64390,64407]},{"content":"HKEY_CURRENT_USER","pos":[64419,64436]},{"content":"HKEY_LOCAL_MACHINE","pos":[64448,64466]},{"content":"HKEY_USERS","pos":[64478,64488]},{"pos":[64497,64780],"content":"`lpszSubKey`  \nPoints to a null-terminated string containing the name of the subkey with which a value is associated. This parameter can be null or a pointer to an empty string. If the parameter is **NULL**, the value will be added to the key identified by the `hKeyRoot` parameter.","leadings":[""," "],"nodes":[{"content":"Points to a null-terminated string containing the name of the subkey with which a value is associated. This parameter can be null or a pointer to an empty string. If the parameter is **NULL**, the value will be added to the key identified by the `hKeyRoot` parameter.","pos":[15,282],"nodes":[{"content":"Points to a null-terminated string containing the name of the subkey with which a value is associated.","pos":[0,102]},{"content":"This parameter can be null or a pointer to an empty string.","pos":[103,162]},{"content":"If the parameter is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the value will be added to the key identified by the <ph id=\"ph1\">`hKeyRoot`</ph> parameter.","pos":[163,267],"source":" If the parameter is **NULL**, the value will be added to the key identified by the `hKeyRoot` parameter."}]}]},{"pos":[64787,64964],"content":"`lpszValueName`  \nPoints to a string containing the name of the value to retrieve. If a value with this name is not already present in the key, the function adds it to the key.","leadings":[""," "],"nodes":[{"content":"Points to a string containing the name of the value to retrieve. If a value with this name is not already present in the key, the function adds it to the key.","pos":[18,176],"nodes":[{"content":"Points to a string containing the name of the value to retrieve.","pos":[0,64]},{"content":"If a value with this name is not already present in the key, the function adds it to the key.","pos":[65,158]}]}]},{"pos":[65014,65037],"content":"CToolBarCtrl::SaveState"},{"content":"Saves the state of the toolbar control in the location in the registry specified by the parameters.","pos":[65041,65140]},{"content":"Parameters","pos":[65256,65266]},{"content":"Identifies a currently open key in the registry or any of the following predefined reserved handle values:","pos":[65284,65390]},{"content":"HKEY_CLASSES_ROOT","pos":[65400,65417]},{"content":"HKEY_CURRENT_USER","pos":[65429,65446]},{"content":"HKEY_LOCAL_MACHINE","pos":[65458,65476]},{"content":"HKEY_USERS","pos":[65488,65498]},{"pos":[65507,65790],"content":"`lpszSubKey`  \nPoints to a null-terminated string containing the name of the subkey with which a value is associated. This parameter can be null or a pointer to an empty string. If the parameter is **NULL**, the value will be added to the key identified by the `hKeyRoot` parameter.","leadings":[""," "],"nodes":[{"content":"Points to a null-terminated string containing the name of the subkey with which a value is associated. This parameter can be null or a pointer to an empty string. If the parameter is **NULL**, the value will be added to the key identified by the `hKeyRoot` parameter.","pos":[15,282],"nodes":[{"content":"Points to a null-terminated string containing the name of the subkey with which a value is associated.","pos":[0,102]},{"content":"This parameter can be null or a pointer to an empty string.","pos":[103,162]},{"content":"If the parameter is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the value will be added to the key identified by the <ph id=\"ph1\">`hKeyRoot`</ph> parameter.","pos":[163,267],"source":" If the parameter is **NULL**, the value will be added to the key identified by the `hKeyRoot` parameter."}]}]},{"pos":[65797,65969],"content":"`lpszValueName`  \nPoints to a string containing the name of the value to set. If a value with this name is not already present in the key, the function adds it to the key.","leadings":[""," "],"nodes":[{"content":"Points to a string containing the name of the value to set. If a value with this name is not already present in the key, the function adds it to the key.","pos":[18,171],"nodes":[{"content":"Points to a string containing the name of the value to set.","pos":[0,59]},{"content":"If a value with this name is not already present in the key, the function adds it to the key.","pos":[60,153]}]}]},{"pos":[66028,66060],"content":"CToolBarCtrl::SetAnchorHighlight"},{"content":"Sets the anchor highlight setting for a toolbar.","pos":[66064,66112]},{"content":"Parameters","pos":[66183,66193]},{"content":"[in]","pos":[66197,66201]},{"content":"Specifies if anchor highlighting is enabled or disabled.","pos":[66215,66271]},{"content":"If this value is nonzero, anchor highlighting will be enabled.","pos":[66272,66334]},{"content":"If this value is zero, anchor highlighting will be disabled","pos":[66335,66394]},{"content":"Return Value","pos":[66404,66416]},{"content":"The previous anchor setting.","pos":[66420,66448]},{"content":"If highlighting was enabled, this value is nonzero.","pos":[66449,66500]},{"content":"If highlighting was not enabled, this value is zero.","pos":[66501,66553]},{"content":"Remarks","pos":[66563,66570]},{"pos":[66574,66788],"content":"This method implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_SETANCHORHIGHLIGHT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787396)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method implements the behavior of the Win32 message [TB_SETANCHORHIGHLIGHT](http://msdn.microsoft.com/library/windows/desktop/bb787396), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[66842,66869],"content":"CToolBarCtrl::SetBitmapSize"},{"content":"Sets the size of the actual bitmapped images to be added to a toolbar control.","pos":[66873,66951]},{"content":"Parameters","pos":[67008,67018]},{"content":"Width and height, in pixels, of the bitmapped images.","pos":[67032,67085]},{"content":"Return Value","pos":[67095,67107]},{"content":"Nonzero if successful; otherwise zero.","pos":[67111,67149]},{"content":"Remarks","pos":[67159,67166]},{"content":"This function must be called only before adding any bitmaps to the toolbar.","pos":[67170,67245]},{"content":"If the application does not explicitly set the bitmap size, it defaults to 16 by 15 pixels.","pos":[67246,67337]},{"pos":[67391,67418],"content":"CToolBarCtrl::SetButtonInfo"},{"content":"Sets the information for an existing button in a toolbar.","pos":[67422,67479]},{"content":"Parameters","pos":[67565,67575]},{"content":"The button identifier.","pos":[67588,67610]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>TBBUTTONINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb760478)</ept> structure that receives the button information.","pos":[67628,67765],"source":" A pointer to a [TBBUTTONINFO](http://msdn.microsoft.com/library/windows/desktop/bb760478) structure that receives the button information."},{"content":"Return Value","pos":[67775,67787]},{"content":"Nonzero if successful; otherwise 0.","pos":[67791,67826]},{"content":"Remarks","pos":[67836,67843]},{"pos":[67847,68064],"content":"The member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_SETBUTTONINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787413)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"The member function implements the behavior of the Win32 message [TB_SETBUTTONINFO](http://msdn.microsoft.com/library/windows/desktop/bb787413), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[68118,68145],"content":"CToolBarCtrl::SetButtonSize"},{"content":"Sets the size of the buttons in the toolbar control.","pos":[68149,68201]},{"content":"Parameters","pos":[68258,68268]},{"content":"Width and height, in pixels, of the buttons.","pos":[68282,68326]},{"content":"Return Value","pos":[68336,68348]},{"content":"Nonzero if successful; otherwise zero.","pos":[68352,68390]},{"content":"Remarks","pos":[68400,68407]},{"content":"The button size must always be at least as large as the bitmap size it encloses.","pos":[68411,68491]},{"content":"This function must be called only before adding any bitmaps to the toolbar.","pos":[68492,68567]},{"content":"If the application does not explicitly set the button size, it defaults to 24 by 22 pixels.","pos":[68568,68659]},{"content":"Example","pos":[68669,68676]},{"pos":[68681,68792],"content":"See the example for <bpt id=\"p1\">[</bpt>CToolBar::GetToolBarCtrl<ept id=\"p1\">](../../mfc/reference/ctoolbar-class.md#ctoolbar__gettoolbarctrl)</ept>.","source":"See the example for [CToolBar::GetToolBarCtrl](../../mfc/reference/ctoolbar-class.md#ctoolbar__gettoolbarctrl)."},{"pos":[68852,68885],"content":"CToolBarCtrl::SetButtonStructSize"},{"pos":[68889,68936],"content":"Specifies the size of the <ph id=\"ph1\">`TBBUTTON`</ph> structure.","source":"Specifies the size of the `TBBUTTON` structure."},{"content":"Parameters","pos":[68998,69008]},{"content":"Size, in bytes, of the <ph id=\"ph1\">`TBBUTTON`</ph> structure.","pos":[69023,69067],"source":" Size, in bytes, of the `TBBUTTON` structure."},{"content":"Remarks","pos":[69077,69084]},{"content":"If you wanted to store extra data in the <ph id=\"ph1\">`TBBUTTON`</ph> structure, you could either derive a new structure from <ph id=\"ph2\">`TBBUTTON`</ph>, adding the members you needed, or create a new structure that contains a <ph id=\"ph3\">`TBBUTTON`</ph> structure as its first member.","pos":[69088,69322],"source":"If you wanted to store extra data in the `TBBUTTON` structure, you could either derive a new structure from `TBBUTTON`, adding the members you needed, or create a new structure that contains a `TBBUTTON` structure as its first member."},{"content":"You would then call this function to tell the toolbar control the size of the new structure.","pos":[69323,69415]},{"pos":[69422,69529],"content":"See <bpt id=\"p1\">[</bpt>CToolBarCtrl::AddButtons<ept id=\"p1\">](#ctoolbarctrl__addbuttons)</ept> for more information on the <ph id=\"ph1\">`TBBUTTON`</ph> structure.","source":"See [CToolBarCtrl::AddButtons](#ctoolbarctrl__addbuttons) for more information on the `TBBUTTON` structure."},{"pos":[69584,69612],"content":"CToolBarCtrl::SetButtonWidth"},{"content":"Sets the minimum and maximum button widths in the toolbar control.","pos":[69616,69682]},{"content":"Parameters","pos":[69761,69771]},{"content":"Minimum button width, in pixels.","pos":[69786,69818]},{"content":"Toolbar buttons will never be narrower than this value.","pos":[69819,69874]},{"content":"cxMax","pos":[69882,69887]},{"content":"Maximum button width, in pixels.","pos":[69892,69924]},{"content":"If button text is too wide, the control displays it with ellipsis points.","pos":[69925,69998]},{"content":"Return Value","pos":[70008,70020]},{"content":"Nonzero if successful; otherwise 0.","pos":[70024,70059]},{"content":"Remarks","pos":[70069,70076]},{"pos":[70080,70299],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_SETBUTTONWIDTH<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787417)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TB_SETBUTTONWIDTH](http://msdn.microsoft.com/library/windows/desktop/bb787417), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[70348,70370],"content":"CToolBarCtrl::SetCmdID"},{"content":"Sets the command identifier that will be sent to the owner window when the specified button is pressed.","pos":[70374,70477]},{"content":"Parameters","pos":[70550,70560]},{"content":"The zero-based index of the button whose command ID is to be set.","pos":[70576,70641]},{"content":"The command ID to set the selected button to.","pos":[70657,70702]},{"content":"Return Value","pos":[70712,70724]},{"content":"Returns nonzero if successful; otherwise zero.","pos":[70728,70774]},{"pos":[70829,70857],"content":"CToolBarCtrl::SetColorScheme"},{"content":"Sets the color scheme of the current toolbar control.","pos":[70861,70914]},{"content":"Parameters","pos":[70994,71004]},{"content":"Parameter","pos":[71011,71020]},{"content":"Description","pos":[71021,71032]},{"pos":[71075,71079],"content":"[in]"},{"pos":[71096,71268],"content":"Pointer to a <bpt id=\"p1\">[</bpt>COLORSCHEME<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775502)</ept> structure that describes the highlight color and shadow color of the toolbar control.","source":"Pointer to a [COLORSCHEME](http://msdn.microsoft.com/library/windows/desktop/bb775502) structure that describes the highlight color and shadow color of the toolbar control."},{"content":"Remarks","pos":[71279,71286]},{"pos":[71290,71413],"content":"This method has no effect if a <ph id=\"ph1\">[!INCLUDE[windowsver](../../build/reference/includes/windowsver_md.md)]</ph> visual theme is set.","source":"This method has no effect if a [!INCLUDE[windowsver](../../build/reference/includes/windowsver_md.md)] visual theme is set."},{"pos":[71420,71609],"content":"This method sends the <bpt id=\"p1\">[</bpt>TB_SETCOLORSCHEME<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787421)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [TB_SETCOLORSCHEME](http://msdn.microsoft.com/library/windows/desktop/bb787421) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[71619,71626]},{"content":"The following code example sets the color scheme for the current toolbar control.","pos":[71630,71711]},{"content":"The code example makes the left and top edges of each tool button red and the right and bottom edges blue.","pos":[71712,71818]},{"content":"When the user presses the button, the button's red edges turn blue and its blue edges turn red.","pos":[71819,71914]},{"pos":[71932,71957],"content":"NVC_MFC_CToolBarCtrl_s1#3"},{"pos":[72082,72116],"content":"CToolBarCtrl::SetDisabledImageList"},{"content":"Sets the image list that the toolbar control will use to display disabled buttons.","pos":[72120,72202]},{"content":"Parameters","pos":[72285,72295]},{"content":"A pointer to a <ph id=\"ph1\">`CImageList`</ph> object containing the images to be used by the toolbar control to display disabled button images.","pos":[72315,72440],"source":" A pointer to a `CImageList` object containing the images to be used by the toolbar control to display disabled button images."},{"content":"Return Value","pos":[72450,72462]},{"pos":[72466,72624],"content":"A pointer to a <bpt id=\"p1\">[</bpt>CImageList<ept id=\"p1\">](../../mfc/reference/cimagelist-class.md)</ept> object that was previously used by the toolbar control to display disabled button images.","source":"A pointer to a [CImageList](../../mfc/reference/cimagelist-class.md) object that was previously used by the toolbar control to display disabled button images."},{"content":"Remarks","pos":[72634,72641]},{"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_SETDISABLEDIMAGELIST<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787423)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[72645,72870],"source":"This member function implements the behavior of the Win32 message [TB_SETDISABLEDIMAGELIST](http://msdn.microsoft.com/library/windows/desktop/bb787423), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"The MFC implementation of <ph id=\"ph1\">`SetDisabledImageList`</ph> uses a <ph id=\"ph2\">`CImageList`</ph> object containing the toolbar control's disabled button images, rather than a handle to an image list.","pos":[72871,73042],"source":" The MFC implementation of `SetDisabledImageList` uses a `CImageList` object containing the toolbar control's disabled button images, rather than a handle to an image list."},{"pos":[73099,73129],"content":"CToolBarCtrl::SetDrawTextFlags"},{"pos":[73133,73346],"content":"Sets the flags in the Win32 function <bpt id=\"p1\">[</bpt>DrawText<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162498)</ept>, which is used to draw the text in the specified rectangle, formatted according to how the flags are set.","source":"Sets the flags in the Win32 function [DrawText](http://msdn.microsoft.com/library/windows/desktop/dd162498), which is used to draw the text in the specified rectangle, formatted according to how the flags are set."},{"content":"Parameters","pos":[73437,73447]},{"content":"A combination of one or more of the DT_ flags, specified in the Win32 function <bpt id=\"p1\">[</bpt>DrawText<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162498)</ept>, that indicates which bits in <ph id=\"ph1\">`dwDTFlags`</ph> will be used when drawing the text.","pos":[73463,73690],"source":" A combination of one or more of the DT_ flags, specified in the Win32 function [DrawText](http://msdn.microsoft.com/library/windows/desktop/dd162498), that indicates which bits in `dwDTFlags` will be used when drawing the text."},{"content":"A combination of one or more of the DT_ flags, specified in the Win32 function <ph id=\"ph1\">`DrawText`</ph>, that indicate how the button text will be drawn.","pos":[73712,73851],"source":" A combination of one or more of the DT_ flags, specified in the Win32 function `DrawText`, that indicate how the button text will be drawn."},{"content":"This value is passed to <ph id=\"ph1\">`DrawText`</ph> when the button text is drawn.","pos":[73852,73917],"source":" This value is passed to `DrawText` when the button text is drawn."},{"content":"Return Value","pos":[73927,73939]},{"pos":[73943,73996],"content":"A <ph id=\"ph1\">`DWORD`</ph> containing the previous text drawing flags.","source":"A `DWORD` containing the previous text drawing flags."},{"content":"Remarks","pos":[74006,74013]},{"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_SETDRAWTEXTFLAGS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787425)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[74017,74238],"source":"This member function implements the behavior of the Win32 message [TB_SETDRAWTEXTFLAGS](http://msdn.microsoft.com/library/windows/desktop/bb787425), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"This member function sets the flags in the Win32 function <ph id=\"ph1\">`DrawText`</ph>, which draws text in the specified rectangle, formatted according to how the flags are set.","pos":[74239,74399],"source":" This member function sets the flags in the Win32 function `DrawText`, which draws text in the specified rectangle, formatted according to how the flags are set."},{"pos":[74456,74486],"content":"CToolBarCtrl::SetExtendedStyle"},{"content":"Sets the extended styles for a toolbar control.","pos":[74490,74537]},{"content":"Parameters","pos":[74603,74613]},{"content":"A value specifying the new extended styles.","pos":[74632,74675]},{"content":"This parameter can be a combination of the toolbar extended styles.","pos":[74676,74743]},{"content":"Return Value","pos":[74753,74765]},{"content":"A <ph id=\"ph1\">`DWORD`</ph> that represents the previous extended styles.","pos":[74769,74824],"source":"A `DWORD` that represents the previous extended styles."},{"content":"For a list of styles, see <bpt id=\"p1\">[</bpt>Toolbar Extended Styles<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb760430)</ept>, in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[74825,74997],"source":" For a list of styles, see [Toolbar Extended Styles](http://msdn.microsoft.com/library/windows/desktop/bb760430), in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Remarks","pos":[75007,75014]},{"pos":[75018,75239],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_SETEXTENDEDSTYLE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787427)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TB_SETEXTENDEDSTYLE](http://msdn.microsoft.com/library/windows/desktop/bb787427), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[75295,75324],"content":"CToolBarCtrl::SetHotImageList"},{"content":"Sets the image list that the toolbar control will use to display \"hot\" buttons.","pos":[75328,75407]},{"content":"Parameters","pos":[75485,75495]},{"content":"A pointer to a <ph id=\"ph1\">`CImageList`</ph> object containing the images to be used by the toolbar control to display hot button images.","pos":[75515,75635],"source":" A pointer to a `CImageList` object containing the images to be used by the toolbar control to display hot button images."},{"content":"Return Value","pos":[75645,75657]},{"pos":[75661,75814],"content":"A pointer to a <bpt id=\"p1\">[</bpt>CImageList<ept id=\"p1\">](../../mfc/reference/cimagelist-class.md)</ept> object that was previously used by the toolbar control to display hot button images.","source":"A pointer to a [CImageList](../../mfc/reference/cimagelist-class.md) object that was previously used by the toolbar control to display hot button images."},{"content":"Remarks","pos":[75824,75831]},{"pos":[75835,76055],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_SETHOTIMAGELIST<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787429)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TB_SETHOTIMAGELIST](http://msdn.microsoft.com/library/windows/desktop/bb787429), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"The MFC implementation of <ph id=\"ph1\">`SetHotImageList`</ph> uses a <ph id=\"ph2\">`CImageList`</ph> object containing the toolbar control's hot button images, rather than a handle to an image list.","pos":[76062,76223],"source":"The MFC implementation of `SetHotImageList` uses a `CImageList` object containing the toolbar control's hot button images, rather than a handle to an image list."},{"content":"A hot button appears highlighted when the pointer is above it.","pos":[76224,76286]},{"pos":[76337,76361],"content":"CToolBarCtrl::SetHotItem"},{"content":"Sets the hot item in a toolbar.","pos":[76365,76396]},{"content":"Parameters","pos":[76447,76457]},{"content":"nHot","pos":[76462,76466]},{"content":"The zero-based index number of the item that will be made hot.","pos":[76471,76533]},{"content":"If this value is -1, none of the items will be hot.","pos":[76534,76585]},{"content":"Return Value","pos":[76595,76607]},{"content":"The index of the previous hot item, or -1 if there was no hot item.","pos":[76611,76678]},{"content":"Remarks","pos":[76688,76695]},{"pos":[76699,76914],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_SETHOTITEM<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787431)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TB_SETHOTITEM](http://msdn.microsoft.com/library/windows/desktop/bb787431), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[76967,76993],"content":"CToolBarCtrl::SetImageList"},{"content":"Sets the image list that the toolbar will use to display buttons that are in their default state.","pos":[76997,77094]},{"content":"Parameters","pos":[77169,77179]},{"content":"A pointer to a <ph id=\"ph1\">`CImageList`</ph> object containing the images to be used by the toolbar control to display button images in their default state.","pos":[77199,77338],"source":" A pointer to a `CImageList` object containing the images to be used by the toolbar control to display button images in their default state."},{"content":"Return Value","pos":[77348,77360]},{"pos":[77364,77536],"content":"A pointer to a <bpt id=\"p1\">[</bpt>CImageList<ept id=\"p1\">](../../mfc/reference/cimagelist-class.md)</ept> object that was previously used by the toolbar control to display button images in their default state.","source":"A pointer to a [CImageList](../../mfc/reference/cimagelist-class.md) object that was previously used by the toolbar control to display button images in their default state."},{"content":"Remarks","pos":[77546,77553]},{"pos":[77557,77774],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_SETIMAGELIST<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787433)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TB_SETIMAGELIST](http://msdn.microsoft.com/library/windows/desktop/bb787433), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[77781,77935],"content":"The MFC implementation of <ph id=\"ph1\">`SetImageList`</ph> uses a <ph id=\"ph2\">`CImageList`</ph> object containing the toolbar control's button images, rather than a handle to an image list.","source":"The MFC implementation of `SetImageList` uses a `CImageList` object containing the toolbar control's button images, rather than a handle to an image list."},{"pos":[77985,78008],"content":"CToolBarCtrl::SetIndent"},{"content":"Sets the indentation for the first button in a toolbar control.","pos":[78012,78075]},{"content":"Parameters","pos":[78129,78139]},{"content":"iIndent","pos":[78144,78151]},{"content":"The value specifying the indentation, in pixels.","pos":[78156,78204]},{"content":"Return Value","pos":[78214,78226]},{"content":"Nonzero if successful; otherwise zero.","pos":[78230,78268]},{"pos":[78322,78349],"content":"CToolBarCtrl::SetInsertMark"},{"content":"Sets the current insertion mark for the toolbar.","pos":[78353,78401]},{"content":"Parameters","pos":[78467,78477]},{"content":"A pointer to the <bpt id=\"p1\">[</bpt>TBINSERTMARK<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb760480)</ept> structure that contains the insertion mark.","pos":[78492,78627],"source":" A pointer to the [TBINSERTMARK](http://msdn.microsoft.com/library/windows/desktop/bb760480) structure that contains the insertion mark."},{"content":"Remarks","pos":[78637,78644]},{"pos":[78648,78866],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_SETINSERTMARK<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787437)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TB_SETINSERTMARK](http://msdn.microsoft.com/library/windows/desktop/bb787437), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[78925,78957],"content":"CToolBarCtrl::SetInsertMarkColor"},{"content":"Sets the color used to draw the insertion mark for the toolbar.","pos":[78961,79024]},{"content":"Parameters","pos":[79095,79105]},{"content":"A <bpt id=\"p1\">**</bpt>COLORREF<ept id=\"p1\">**</ept> value that contains the new insertion mark color.","pos":[79121,79185],"source":" A **COLORREF** value that contains the new insertion mark color."},{"content":"Return Value","pos":[79195,79207]},{"pos":[79211,79280],"content":"A <bpt id=\"p1\">**</bpt>COLORREF<ept id=\"p1\">**</ept> value that contains the previous insertion mark color.","source":"A **COLORREF** value that contains the previous insertion mark color."},{"content":"Remarks","pos":[79290,79297]},{"pos":[79301,79524],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TB_SETINSERTMARKCOLOR<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787439)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TB_SETINSERTMARKCOLOR](http://msdn.microsoft.com/library/windows/desktop/bb787439), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[79579,79607],"content":"CToolBarCtrl::SetMaxTextRows"},{"content":"Sets the maximum number of text rows displayed on a toolbar button.","pos":[79611,79678]},{"content":"Parameters","pos":[79738,79748]},{"content":"iMaxRows","pos":[79753,79761]},{"content":"Maximum number of rows to be set.","pos":[79766,79799]},{"content":"Return Value","pos":[79809,79821]},{"content":"Nonzero if successful; otherwise zero.","pos":[79825,79863]},{"pos":[79914,79938],"content":"CToolBarCtrl::SetMetrics"},{"pos":[79942,79988],"content":"Sets the metrics of the <ph id=\"ph1\">`CToolBarCtrl`</ph> object.","source":"Sets the metrics of the `CToolBarCtrl` object."},{"content":"Parameters","pos":[80048,80058]},{"content":"A pointer to the <bpt id=\"p1\">[</bpt>TBMETRICS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb760482)</ept> structure of the <ph id=\"ph1\">`CToolBarCtrl`</ph> object.","pos":[80072,80200],"source":" A pointer to the [TBMETRICS](http://msdn.microsoft.com/library/windows/desktop/bb760482) structure of the `CToolBarCtrl` object."},{"content":"Remarks","pos":[80210,80217]},{"pos":[80221,80433],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>TB_SETMETRICS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787446)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [TB_SETMETRICS](http://msdn.microsoft.com/library/windows/desktop/bb787446) message, as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[80482,80504],"content":"CToolBarCtrl::SetOwner"},{"content":"Sets the owner window for the toolbar control.","pos":[80508,80554]},{"content":"Parameters","pos":[80606,80616]},{"content":"Pointer to the <ph id=\"ph1\">`CWnd`</ph> or <ph id=\"ph2\">`CWnd`</ph>-derived object that will be the new owner window for the toolbar control.","pos":[80630,80735],"source":" Pointer to the `CWnd` or `CWnd`-derived object that will be the new owner window for the toolbar control."},{"content":"Remarks","pos":[80745,80752]},{"content":"The owner window is the window that receives notifications from the toolbar.","pos":[80756,80832]},{"pos":[80883,80907],"content":"CToolBarCtrl::SetPadding"},{"content":"Sets the horizontal and vertical padding of the current toolbar control.","pos":[80911,80983]},{"content":"Parameters","pos":[81074,81084]},{"content":"Parameter","pos":[81091,81100]},{"content":"Description","pos":[81101,81112]},{"pos":[81155,81159],"content":"[in]"},{"content":"Specifies the horizontal padding of the toolbar control, in pixels.","pos":[81175,81242]},{"pos":[81247,81251],"content":"[in]"},{"content":"Specifies the vertical padding of the toolbar control, in pixels.","pos":[81267,81332]},{"content":"Return Value","pos":[81343,81355]},{"content":"A <ph id=\"ph1\">`DWORD`</ph> whose low word contains the previous horizontal padding value, and whose high word contains the previous vertical padding value.","pos":[81359,81497],"source":"A `DWORD` whose low word contains the previous horizontal padding value, and whose high word contains the previous vertical padding value."},{"content":"The padding values are measured in pixels.","pos":[81498,81540]},{"content":"Remarks","pos":[81550,81557]},{"pos":[81561,81746],"content":"This method sends the <bpt id=\"p1\">[</bpt>TB_SETPADDING<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787448)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [TB_SETPADDING](http://msdn.microsoft.com/library/windows/desktop/bb787448) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[81756,81763]},{"content":"The following code example sets the horizontal and vertical padding of the current toolbar control to 20 pixels.","pos":[81767,81879]},{"pos":[81897,81922],"content":"NVC_MFC_CToolBarCtrl_s1#4"},{"pos":[82046,82079],"content":"CToolBarCtrl::SetPressedImageList"},{"content":"Sets the image list that the current toolbar control uses to represent buttons in the pressed state.","pos":[82083,82183]},{"content":"Parameters","pos":[82291,82301]},{"content":"Parameter","pos":[82308,82317]},{"content":"Description","pos":[82318,82329]},{"pos":[82372,82376],"content":"[in]"},{"content":"The zero-based index of the image list.","pos":[82388,82427]},{"content":"Set this parameter to zero if you use only one image list.","pos":[82428,82486]},{"pos":[82491,82495],"content":"[in]"},{"pos":[82509,82609],"content":"Pointer to a <bpt id=\"p1\">[</bpt>CImageList<ept id=\"p1\">](../../mfc/reference/cimagelist-class.md)</ept> that contains the new image list.","source":"Pointer to a [CImageList](../../mfc/reference/cimagelist-class.md) that contains the new image list."},{"content":"Return Value","pos":[82620,82632]},{"pos":[82636,82806],"content":"Pointer to a <bpt id=\"p1\">[</bpt>CImageList<ept id=\"p1\">](../../mfc/reference/cimagelist-class.md)</ept> that contains the previous image list for the current control, or <ph id=\"ph1\">`NULL`</ph> if no such image list was set.","source":"Pointer to a [CImageList](../../mfc/reference/cimagelist-class.md) that contains the previous image list for the current control, or `NULL` if no such image list was set."},{"content":"Remarks","pos":[82816,82823]},{"pos":[82827,83021],"content":"This method sends the <bpt id=\"p1\">[</bpt>TB_SETPRESSEDIMAGELIST<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787453)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [TB_SETPRESSEDIMAGELIST](http://msdn.microsoft.com/library/windows/desktop/bb787453) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[83031,83038]},{"content":"The following code example sets the pressed image list to be the same as the default image list.","pos":[83042,83138]},{"pos":[83156,83181],"content":"NVC_MFC_CToolBarCtrl_s1#5"},{"pos":[83293,83314],"content":"CToolBarCtrl::SetRows"},{"content":"Asks the toolbar control to resize itself to the requested number of rows.","pos":[83318,83392]},{"content":"Parameters","pos":[83488,83498]},{"content":"Requested number of rows.","pos":[83513,83538]},{"content":"Tells whether to use more rows or fewer rows if the toolbar cannot be resized to the requested number of rows.","pos":[83558,83668]},{"content":"Points to the <bpt id=\"p1\">[</bpt>CRect<ept id=\"p1\">](../../atl-mfc-shared/reference/crect-class.md)</ept> object or <bpt id=\"p2\">[</bpt>RECT<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure that will receive the new bounding rectangle of the toolbar.","pos":[83687,83903],"source":" Points to the [CRect](../../atl-mfc-shared/reference/crect-class.md) object or [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure that will receive the new bounding rectangle of the toolbar."},{"content":"Remarks","pos":[83913,83920]},{"content":"If the toolbar cannot resize itself to the requested number or rows, it will resize itself to either the next larger or next smaller valid size, depending on the value of <ph id=\"ph1\">`bLarger`</ph>.","pos":[83924,84105],"source":"If the toolbar cannot resize itself to the requested number or rows, it will resize itself to either the next larger or next smaller valid size, depending on the value of `bLarger`."},{"content":"If <ph id=\"ph1\">`bLarger`</ph> is <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, the new number of rows will be larger than the number requested.","pos":[84106,84196],"source":" If `bLarger` is **TRUE**, the new number of rows will be larger than the number requested."},{"content":"If <ph id=\"ph1\">`bLarger`</ph> is <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>, the new number of rows will be smaller than the number requested.","pos":[84197,84289],"source":" If `bLarger` is **FALSE**, the new number of rows will be smaller than the number requested."},{"content":"A given number of rows is valid for the toolbar if the buttons can be arranged such that all of the rows have the same number of buttons (except perhaps the last row).","pos":[84296,84463]},{"content":"For example, a toolbar that contains four buttons could not be sized to three rows because the last two rows would have to be shorter.","pos":[84464,84598]},{"content":"If you attempted to size it to three rows, you would get four rows if <ph id=\"ph1\">`bLarger`</ph> was <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> and two rows if <ph id=\"ph2\">`bLarger`</ph> was <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","pos":[84599,84732],"source":" If you attempted to size it to three rows, you would get four rows if `bLarger` was **TRUE** and two rows if `bLarger` was **FALSE**."},{"content":"If there are separators in the toolbar, the rules for when a given number of rows is valid are more complicated.","pos":[84739,84851]},{"content":"The layout is computed such that button groups (buttons with a separator before the first and the last button in the group) are never broken up on several rows unless the group cannot fit on one row.","pos":[84852,85051]},{"content":"If a group does not fit on one row, the next group will start on the next row even if it would fit on the row where the large group ended.","pos":[85058,85196]},{"content":"The purpose of this rule is to make the separation between large groups more noticeable.","pos":[85197,85285]},{"content":"The resulting vertical separators are counted as rows.","pos":[85286,85340]},{"content":"Note also that the <ph id=\"ph1\">`SetRows`</ph> member function will always chose the layout that results in the smallest toolbar size.","pos":[85347,85463],"source":"Note also that the `SetRows` member function will always chose the layout that results in the smallest toolbar size."},{"content":"Creating a toolbar with the <ph id=\"ph1\">`TBSTYLE_WRAPABLE`</ph> style and then resizing the control will simply apply the method outlined above given the width of the control.","pos":[85464,85622],"source":" Creating a toolbar with the `TBSTYLE_WRAPABLE` style and then resizing the control will simply apply the method outlined above given the width of the control."},{"pos":[85629,85727],"content":"This function can only be called for toolbars that were created with the <ph id=\"ph1\">`TBSTYLE_WRAPABLE`</ph> style.","source":"This function can only be called for toolbars that were created with the `TBSTYLE_WRAPABLE` style."},{"pos":[85776,85798],"content":"CToolBarCtrl::SetState"},{"content":"Sets the state for the specified button in a toolbar control.","pos":[85802,85863]},{"content":"Parameters","pos":[85936,85946]},{"content":"Command identifier of the button.","pos":[85959,85992]},{"content":"State flags.","pos":[86011,86023]},{"content":"It can be a combination of the values listed for button states in <bpt id=\"p1\">[</bpt>CToolBarCtrl::AddButtons<ept id=\"p1\">](#ctoolbarctrl__addbuttons)</ept>.","pos":[86024,86144],"source":" It can be a combination of the values listed for button states in [CToolBarCtrl::AddButtons](#ctoolbarctrl__addbuttons)."},{"content":"Return Value","pos":[86154,86166]},{"content":"Nonzero if successful; otherwise zero.","pos":[86170,86208]},{"content":"Remarks","pos":[86218,86225]},{"content":"This function is especially handy if you want to set more than one of the button states.","pos":[86229,86317]},{"content":"To just set one state, use one of the following member functions: <bpt id=\"p1\">[</bpt>EnableButton<ept id=\"p1\">](#ctoolbarctrl__enablebutton)</ept>, <bpt id=\"p2\">[</bpt>CheckButton<ept id=\"p2\">](#ctoolbarctrl__checkbutton)</ept>, <bpt id=\"p3\">[</bpt>HideButton<ept id=\"p3\">](#ctoolbarctrl__hidebutton)</ept>, <bpt id=\"p4\">[</bpt>Indeterminate<ept id=\"p4\">](#ctoolbarctrl__indeterminate)</ept>, or <bpt id=\"p5\">[</bpt>PressButton<ept id=\"p5\">](#ctoolbarctrl__pressbutton)</ept>.","pos":[86318,86605],"source":" To just set one state, use one of the following member functions: [EnableButton](#ctoolbarctrl__enablebutton), [CheckButton](#ctoolbarctrl__checkbutton), [HideButton](#ctoolbarctrl__hidebutton), [Indeterminate](#ctoolbarctrl__indeterminate), or [PressButton](#ctoolbarctrl__pressbutton)."},{"pos":[86654,86676],"content":"CToolBarCtrl::SetStyle"},{"content":"Sets the styles for a toolbar control.","pos":[86680,86718]},{"content":"Parameters","pos":[86773,86783]},{"content":"A <ph id=\"ph1\">`DWORD`</ph> containing a combination of <bpt id=\"p1\">[</bpt>toolbar control styles<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb760439)</ept>, as described in the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[86800,86996],"source":" A `DWORD` containing a combination of [toolbar control styles](http://msdn.microsoft.com/library/windows/desktop/bb760439), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[87048,87073],"content":"CToolBarCtrl::SetToolTips"},{"content":"Associates a tool tip control with a toolbar control.","pos":[87077,87130]},{"content":"Parameters","pos":[87193,87203]},{"content":"pTip","pos":[87208,87212]},{"content":"Pointer to the <bpt id=\"p1\">[</bpt>CToolTipCtrl<ept id=\"p1\">](../../mfc/reference/ctooltipctrl-class.md)</ept> object.","pos":[87217,87297],"source":" Pointer to the [CToolTipCtrl](../../mfc/reference/ctooltipctrl-class.md) object."},{"pos":[87352,87380],"content":"CToolBarCtrl::SetWindowTheme"},{"pos":[87384,87435],"content":"Sets the visual style of the <ph id=\"ph1\">`CToolBarCtrl`</ph> object.","source":"Sets the visual style of the `CToolBarCtrl` object."},{"content":"Parameters","pos":[87507,87517]},{"content":"A pointer to a Unicode string that contains the toolbar visual style to set.","pos":[87540,87616]},{"content":"Return Value","pos":[87626,87638]},{"content":"The return value is not used.","pos":[87642,87671]},{"content":"Remarks","pos":[87681,87688]},{"pos":[87692,87908],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>TB_SETWINDOWTHEME<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787465)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [TB_SETWINDOWTHEME](http://msdn.microsoft.com/library/windows/desktop/bb787465) message, as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"See Also","pos":[87917,87925]},{"content":"MFC Sample CMNCTRL1","pos":[87930,87949]},{"content":"MFC Sample MFCIE","pos":[87985,88001]},{"content":"CWnd Class","pos":[88037,88047]},{"content":"Hierarchy Chart","pos":[88089,88104]},{"content":"CToolBar Class","pos":[88141,88155]}],"content":"---\ntitle: \"CToolBarCtrl Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CToolBarCtrl\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CToolBarCtrl class\"\n  - \"Windows common controls [C++], CToolBarCtrl\"\n  - \"toolbar controls [MFC], CToolBarCtrl class\"\n  - \"tool tips [C++], notifications\"\nms.assetid: 8f2f8ad2-05d7-4975-8715-3f2eed795248\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CToolBarCtrl Class\nProvides the functionality of the Windows toolbar common control.  \n  \n## Syntax  \n  \n```  \nclass CToolBarCtrl : public CWnd  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CToolBarCtrl::CToolBarCtrl](#ctoolbarctrl__ctoolbarctrl)|Constructs a `CToolBarCtrl` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CToolBarCtrl::AddBitmap](#ctoolbarctrl__addbitmap)|Adds one or more bitmap button images to the list of button images available for a toolbar control.|  \n|[CToolBarCtrl::AddButtons](#ctoolbarctrl__addbuttons)|Adds one or more buttons to a toolbar control.|  \n|[CToolBarCtrl::AddString](#ctoolbarctrl__addstring)|Adds a new string, passed as a resource ID, to the toolbar's internal list of strings.|  \n|[CToolBarCtrl::AddStrings](#ctoolbarctrl__addstrings)|Adds a new string or strings, passed as a pointer to a buffer of null-separated strings, to the toolbar's internal list of strings.|  \n|[CToolBarCtrl::AutoSize](#ctoolbarctrl__autosize)|Resizes a toolbar control.|  \n|[CToolBarCtrl::ChangeBitmap](#ctoolbarctrl__changebitmap)|Changes the bitmap for a button in the current toolbar control.|  \n|[CToolBarCtrl::CheckButton](#ctoolbarctrl__checkbutton)|Checks or clears a given button in a toolbar control.|  \n|[CToolBarCtrl::CommandToIndex](#ctoolbarctrl__commandtoindex)|Retrieves the zero-based index for the button associated with the specified command identifier.|  \n|[CToolBarCtrl::Create](#ctoolbarctrl__create)|Creates a toolbar control and attaches it to a `CToolBarCtrl` object.|  \n|[CToolBarCtrl::CreateEx](#ctoolbarctrl__createex)|Creates a toolbar control with the specified Windows extended styles and attaches it to a `CToolBarCtrl` object.|  \n|[CToolBarCtrl::Customize](#ctoolbarctrl__customize)|Displays the Customize Toolbar dialog box.|  \n|[CToolBarCtrl::DeleteButton](#ctoolbarctrl__deletebutton)|Deletes a button from the toolbar control.|  \n|[CToolBarCtrl::EnableButton](#ctoolbarctrl__enablebutton)|Enables or disables the specified button in a toolbar control.|  \n|[CToolBarCtrl::GetAnchorHighlight](#ctoolbarctrl__getanchorhighlight)|Retrieves the anchor highlight setting for a toolbar.|  \n|[CToolBarCtrl::GetBitmap](#ctoolbarctrl__getbitmap)|Retrieves the index of the bitmap associated with a button in a toolbar.|  \n|[CToolBarCtrl::GetBitmapFlags](#ctoolbarctrl__getbitmapflags)|Gets flags associated with the toolbar's bitmap.|  \n|[CToolBarCtrl::GetButton](#ctoolbarctrl__getbutton)|Retrieves information about the specified button in a toolbar control.|  \n|[CToolBarCtrl::GetButtonCount](#ctoolbarctrl__getbuttoncount)|Retrieves a count of the buttons currently in the toolbar control.|  \n|[CToolBarCtrl::GetButtonInfo](#ctoolbarctrl__getbuttoninfo)|Retrieves the information for a button in a toolbar.|  \n|[CToolBarCtrl::GetButtonSize](#ctoolbarctrl__getbuttonsize)|Retrieves the current width and height of toolbar buttons, in pixels.|  \n|[CToolBarCtrl::GetColorScheme](#ctoolbarctrl__getcolorscheme)|Retrieves the color scheme of the current toolbar control.|  \n|[CToolBarCtrl::GetDisabledImageList](#ctoolbarctrl__getdisabledimagelist)|Retrieves the image list that a toolbar control uses to display disabled buttons.|  \n|[CToolBarCtrl::GetDropTarget](#ctoolbarctrl__getdroptarget)|Retrieves the [IDropTarget](http://msdn.microsoft.com/library/windows/desktop/ms679679) interface for a toolbar control.|  \n|[CToolBarCtrl::GetExtendedStyle](#ctoolbarctrl__getextendedstyle)|Retrieves the extended styles for a toolbar control.|  \n|[CToolBarCtrl::GetHotImageList](#ctoolbarctrl__gethotimagelist)|Retrieves the image list that a toolbar control uses to display \"hot\" buttons. A hot button appears highlighted when the mouse pointer is above it.|  \n|[CToolBarCtrl::GetHotItem](#ctoolbarctrl__gethotitem)|Retrieves the index of the hot item in a toolbar.|  \n|[CToolBarCtrl::GetImageList](#ctoolbarctrl__getimagelist)|Retrieves the image list that a toolbar control uses to display buttons in their default state.|  \n|[CToolBarCtrl::GetInsertMark](#ctoolbarctrl__getinsertmark)|Retrieves the current insertion mark for the toolbar.|  \n|[CToolBarCtrl::GetInsertMarkColor](#ctoolbarctrl__getinsertmarkcolor)|Retrieves the color used to draw the insertion mark for the toolbar.|  \n|[CToolBarCtrl::GetItemRect](#ctoolbarctrl__getitemrect)|Retrieves the bounding rectangle of a button in a toolbar control.|  \n|[CToolBarCtrl::GetMaxSize](#ctoolbarctrl__getmaxsize)|Retrieves the total size of all of the visible buttons and separators in the toolbar.|  \n|[CToolBarCtrl::GetMaxTextRows](#ctoolbarctrl__getmaxtextrows)|Retrieves the maximum number of text rows displayed on a toolbar button.|  \n|[CToolBarCtrl::GetMetrics](#ctoolbarctrl__getmetrics)|Retrieves the metrics of a toolbar control.|  \n|[CToolBarCtrl::GetPadding](#ctoolbarctrl__getpadding)|Retrieves the horizontal and vertical padding of the current toolbar control.|  \n|[CToolBarCtrl::GetPressedImageList](#ctoolbarctrl__getpressedimagelist)|Retrieves the image list that the current toolbar control uses to represent buttons in the pressed state.|  \n|[CToolBarCtrl::GetRect](#ctoolbarctrl__getrect)|Retrieves the bounding rectangle for a specified toolbar button.|  \n|[CToolBarCtrl::GetRows](#ctoolbarctrl__getrows)|Retrieves the number of rows of buttons currently displayed in the toolbar.|  \n|[CToolBarCtrl::GetState](#ctoolbarctrl__getstate)|Retrieves information about the state of the specified button in a toolbar control, such as whether it is enabled, pressed, or checked.|  \n|[CToolBarCtrl::GetString](#ctoolbarctrl__getstring)|Retrieves a toolbar string.|  \n|[CToolBarCtrl::GetStyle](#ctoolbarctrl__getstyle)|Retrieves the styles currently in use for a toolbar control.|  \n|[CToolBarCtrl::GetToolTips](#ctoolbarctrl__gettooltips)|Retrieves the handle of the tool tip control, if any, associated with the toolbar control.|  \n|[CToolBarCtrl::HideButton](#ctoolbarctrl__hidebutton)|Hides or shows the specified button in a toolbar control.|  \n|[CToolBarCtrl::HitTest](#ctoolbarctrl__hittest)|Determines where a point lies in a toolbar control.|  \n|[CToolBarCtrl::Indeterminate](#ctoolbarctrl__indeterminate)|Sets or clears the indeterminate (gray) state of the specified button in a toolbar control.|  \n|[CToolBarCtrl::InsertButton](#ctoolbarctrl__insertbutton)|Inserts a button in a toolbar control.|  \n|[CToolBarCtrl::InsertMarkHitTest](#ctoolbarctrl__insertmarkhittest)|Retrieves the insertion mark information for a point in a toolbar.|  \n|[CToolBarCtrl::IsButtonChecked](#ctoolbarctrl__isbuttonchecked)|Tells whether the specified button in a toolbar control is checked.|  \n|[CToolBarCtrl::IsButtonEnabled](#ctoolbarctrl__isbuttonenabled)|Tells whether the specified button in a toolbar control is enabled.|  \n|[CToolBarCtrl::IsButtonHidden](#ctoolbarctrl__isbuttonhidden)|Tells whether the specified button in a toolbar control is hidden.|  \n|[CToolBarCtrl::IsButtonHighlighted](#ctoolbarctrl__isbuttonhighlighted)|Checks the highlight state of the toolbar button.|  \n|[CToolBarCtrl::IsButtonIndeterminate](#ctoolbarctrl__isbuttonindeterminate)|Tells whether the state of the specified button in a toolbar control is indeterminate (gray).|  \n|[CToolBarCtrl::IsButtonPressed](#ctoolbarctrl__isbuttonpressed)|Tells whether the specified button in a toolbar control is pressed.|  \n|[CToolBarCtrl::LoadImages](#ctoolbarctrl__loadimages)|Loads bitmaps into a toolbar control's image list.|  \n|[CToolBarCtrl::MapAccelerator](#ctoolbarctrl__mapaccelerator)|Maps an accelerator character to a toolbar button.|  \n|[CToolBarCtrl::MarkButton](#ctoolbarctrl__markbutton)|Sets the highlight state of a given button in a toolbar control.|  \n|[CToolBarCtrl::MoveButton](#ctoolbarctrl__movebutton)|Moves a button from one index to another.|  \n|[CToolBarCtrl::PressButton](#ctoolbarctrl__pressbutton)|Presses or releases the specified button in a toolbar control.|  \n|[CToolBarCtrl::ReplaceBitmap](#ctoolbarctrl__replacebitmap)|Replaces the existing bitmap in the current toolbar control with a new bitmap.|  \n|[CToolBarCtrl::RestoreState](#ctoolbarctrl__restorestate)|Restores the state of the toolbar control.|  \n|[CToolBarCtrl::SaveState](#ctoolbarctrl__savestate)|Saves the state of the toolbar control.|  \n|[CToolBarCtrl::SetAnchorHighlight](#ctoolbarctrl__setanchorhighlight)|Sets the anchor highlight setting for a toolbar.|  \n|[CToolBarCtrl::SetBitmapSize](#ctoolbarctrl__setbitmapsize)|Sets the size of the bitmapped images to be added to a toolbar control.|  \n|[CToolBarCtrl::SetButtonInfo](#ctoolbarctrl__setbuttoninfo)|Sets the information for an existing button in a toolbar.|  \n|[CToolBarCtrl::SetButtonSize](#ctoolbarctrl__setbuttonsize)|Sets the size of the buttons to be added to a toolbar control.|  \n|[CToolBarCtrl::SetButtonStructSize](#ctoolbarctrl__setbuttonstructsize)|Specifies the size of the `TBBUTTON` structure.|  \n|[CToolBarCtrl::SetButtonWidth](#ctoolbarctrl__setbuttonwidth)|Sets the minimum and maximum button widths in the toolbar control.|  \n|[CToolBarCtrl::SetCmdID](#ctoolbarctrl__setcmdid)|Sets the command identifier to be sent to the owner window when the specified button is pressed.|  \n|[CToolBarCtrl::SetColorScheme](#ctoolbarctrl__setcolorscheme)|Sets the color scheme of the current toolbar control.|  \n|[CToolBarCtrl::SetDisabledImageList](#ctoolbarctrl__setdisabledimagelist)|Sets the image list that the toolbar control will use to display disabled buttons.|  \n|[CToolBarCtrl::SetDrawTextFlags](#ctoolbarctrl__setdrawtextflags)|Sets the flags in the Win32 function [DrawText](http://msdn.microsoft.com/library/windows/desktop/dd162498), which is used to draw the text in the specified rectangle, formatted according to how the flags are set.|  \n|[CToolBarCtrl::SetExtendedStyle](#ctoolbarctrl__setextendedstyle)|Sets the extended styles for a toolbar control.|  \n|[CToolBarCtrl::SetHotImageList](#ctoolbarctrl__sethotimagelist)|Sets the image list that the toolbar control will use to display \"hot\" buttons.|  \n|[CToolBarCtrl::SetHotItem](#ctoolbarctrl__sethotitem)|Sets the hot item in a toolbar.|  \n|[CToolBarCtrl::SetImageList](#ctoolbarctrl__setimagelist)|Sets the image list that the toolbar will use to display buttons that are in their default state.|  \n|[CToolBarCtrl::SetIndent](#ctoolbarctrl__setindent)|Sets the indentation for the first button in a toolbar control.|  \n|[CToolBarCtrl::SetInsertMark](#ctoolbarctrl__setinsertmark)|Sets the current insertion mark for the toolbar.|  \n|[CToolBarCtrl::SetInsertMarkColor](#ctoolbarctrl__setinsertmarkcolor)|Sets the color used to draw the insertion mark for the toolbar.|  \n|[CToolBarCtrl::SetMaxTextRows](#ctoolbarctrl__setmaxtextrows)|Sets the maximum number of text rows displayed on a toolbar button.|  \n|[CToolBarCtrl::SetMetrics](#ctoolbarctrl__setmetrics)|Sets the metrics of a toolbar control.|  \n|[CToolBarCtrl::SetOwner](#ctoolbarctrl__setowner)|Sets the window to receive notification messages from the toolbar control.|  \n|[CToolBarCtrl::SetPadding](#ctoolbarctrl__setpadding)|Sets the horizontal and vertical padding of the current toolbar control.|  \n|[CToolBarCtrl::SetPressedImageList](#ctoolbarctrl__setpressedimagelist)|Sets the image list that the current toolbar control uses to represent buttons in the pressed state.|  \n|[CToolBarCtrl::SetRows](#ctoolbarctrl__setrows)|Sets the number of rows of buttons displayed in the toolbar.|  \n|[CToolBarCtrl::SetState](#ctoolbarctrl__setstate)|Sets the state for the specified button in a toolbar control.|  \n|[CToolBarCtrl::SetStyle](#ctoolbarctrl__setstyle)|Sets the styles for a toolbar control.|  \n|[CToolBarCtrl::SetToolTips](#ctoolbarctrl__settooltips)|Associates a tool tip control with the toolbar control.|  \n|[CToolBarCtrl::SetWindowTheme](#ctoolbarctrl__setwindowtheme)|Sets the visual style of a toolbar control.|  \n  \n## Remarks  \n This control (and therefore the `CToolBarCtrl` class) is available only to programs running under Windows 95/98 and Windows NT version 3.51 and later.  \n  \n A Windows toolbar common control is a rectangular child window that contains one or more buttons. These buttons can display a bitmap image, a string, or both. When the user chooses a button, it sends a command message to the toolbar's owner window. Typically, the buttons in a toolbar correspond to items in the application's menu; they provide a more direct way for the user to access an application's commands.  \n  \n `CToolBarCtrl` objects contain several important internal data structures: a list of button image bitmaps or an image list, a list of button label strings, and a list of `TBBUTTON` structures which associate an image and/or string with the position, style, state, and command ID of the button. Each of the elements of these data structures is referred to by a zero-based index. Before you can use a `CToolBarCtrl` object, you must set up these data structures. The list of strings can only be used for button labels; you cannot retrieve strings from the toolbar.  \n  \n To use a `CToolBarCtrl` object, you will typically follow these steps:  \n  \n1.  Construct the `CToolBarCtrl` object.  \n  \n2.  Call [Create](#ctoolbarctrl__create) to create the Windows toolbar common control and attach it to the `CToolBarCtrl` object. Indicate the style of toolbar by using styles, such as **TBSTYLE_TRANSPARENT** for a transparent toolbar or **TBSTYLE_DROPDOWN** for a toolbar that supports drop-down style buttons.  \n  \n3.  Identify how you want the buttons on the toolbar displayed:  \n  \n    -   To use bitmap images for buttons, add the button bitmaps to the toolbar by calling [AddBitmap](#ctoolbarctrl__addbitmap).  \n  \n    -   To use images displayed from an image list for buttons, specify the image list by calling [SetImageList](#ctoolbarctrl__setimagelist), [SetHotImageList](#ctoolbarctrl__sethotimagelist), or [SetDisabledImageList](#ctoolbarctrl__setdisabledimagelist).  \n  \n    -   To use string labels for buttons, add the strings to the toolbar by calling [AddString](#ctoolbarctrl__addstring) and/or [AddStrings](#ctoolbarctrl__addstrings).  \n  \n4.  Add button structures to the toolbar by calling [AddButtons](#ctoolbarctrl__addbuttons).  \n  \n5.  If you want tool tips for a toolbar button in an owner window that is not a `CFrameWnd`, you need to handle the **TTN_NEEDTEXT** messages in the toolbar's owner window as described in [Handling Tool Tip Notifications](../../mfc/handling-tool-tip-notifications.md). If the parent window of the toolbar is derived from `CFrameWnd`, tool tips are displayed without any extra effort from you because `CFrameWnd` provides a default handler.  \n  \n6.  If you want your user to be able to customize the toolbar, handle customization notification messages in the owner window as described in [Handling Customization Notifications](../../mfc/handling-customization-notifications.md).  \n  \n You can use [SaveState](#ctoolbarctrl__savestate) to save the current state of a toolbar control in the registry and [RestoreState](#ctoolbarctrl__restorestate) to restore the state based on information previously stored in the registry. In addition to saving the toolbar state between uses of the application, applications typically store the state before the user begins customizing the toolbar in case the user later wants to restore the toolbar to its original state.  \n  \n## Support for Internet Explorer Version 4.0 and Later  \n To support functionality introduced in Internet Explorer, version 4.0 and later, MFC provides image list support and transparent and flat styles for toolbar controls.  \n  \n A transparent toolbar allows the client under the toolbar to show through. To create a transparent toolbar, use both **TBSTYLE_FLAT** and **TBSTYLE_TRANSPARENT** styles. Transparent toolbars feature hot tracking; that is, when the mouse pointer moves over a hot button on the toolbar, the button's appearance changes. Toolbars created with just the **TBSTYLE_FLAT** style will contain buttons that are not transparent.  \n  \n Image list support allows a control greater flexibility for default behavior, hot images, and disabled images. Use [GetImageList](#ctoolbarctrl__getimagelist), [GetHotImageList](#ctoolbarctrl__gethotimagelist), and [GetDisabledImageList](#ctoolbarctrl__getdisabledimagelist) with the transparent toolbar to manipulate the image according to its state:  \n  \n For more information on using `CToolBarCtrl`, see [Controls](../../mfc/controls-mfc.md) and [Using CToolBarCtrl](../../mfc/using-ctoolbarctrl.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n `CToolBarCtrl`  \n  \n## Requirements  \n **Header:** afxcmn.h  \n  \n##  <a name=\"ctoolbarctrl__addbitmap\"></a>  CToolBarCtrl::AddBitmap  \n Adds one or more button images to the list of button images stored in the toolbar control.  \n  \n```  \nint AddBitmap(\n    int nNumButtons,  \n    UINT nBitmapID);\n\n \nint AddBitmap(\n    int nNumButtons,  \n    CBitmap* pBitmap);\n```  \n  \n### Parameters  \n `nNumButtons`  \n Number of button images in the bitmap.  \n  \n `nBitmapID`  \n Resource identifier of the bitmap that contains the button image or images to add.  \n  \n `pBitmap`  \n Pointer to the `CBitmap` object that contains the button image or images to add.  \n  \n### Return Value  \n Zero-based index of the first new image if successful; otherwise – 1.  \n  \n### Remarks  \n You can use the Windows API [CreateMappedBitmap](http://msdn.microsoft.com/library/windows/desktop/bb787467) to map colors before adding the bitmap to the toolbar. If you pass a pointer to a **CBitMap** object, you must ensure that the bitmap is not destroyed until after the toolbar is destroyed.  \n  \n##  <a name=\"ctoolbarctrl__addbuttons\"></a>  CToolBarCtrl::AddButtons  \n Adds one or more buttons to a toolbar control.  \n  \n```  \nBOOL AddButtons(\n    int nNumButtons,  \n    LPTBBUTTON lpButtons);\n```  \n  \n### Parameters  \n `nNumButtons`  \n Number of buttons to add.  \n  \n `lpButtons`  \n Address of an array of `TBBUTTON` structures that contains information about the buttons to add. There must be the same number of elements in the array as buttons specified by `nNumButtons`.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n The `lpButtons` pointer points to an array of `TBBUTTON` structures. Each `TBBUTTON` structure associates the button being added with the button's style, image and/or string, command ID, state, and user-defined data:  \n  \n `typedef struct _TBBUTTON {`  \n  \n `int iBitmap;// zero-based index of button image`  \n  \n `int idCommand;  // command to be sent when button pressed`  \n  \n `BYTE fsState;   // button state--see below`  \n  \n `BYTE fsStyle;   // button style--see below`  \n  \n `DWORD dwData;   // application-defined value`  \n  \n `int iString;// zero-based index of button label string`  \n  \n `} TBBUTTON;`  \n  \n The members are as follows:  \n  \n **iBitmap**  \n Zero-based index of button image, -1 if no image for this button.  \n  \n **idCommand**  \n Command identifier associated with the button. This identifier is sent in a **WM_COMMAND** message when the button is chosen. If the **fsStyle** member has the `TBSTYLE_SEP` value, this member must be zero.  \n  \n **fsState**  \n Button state flags. It can be a combination of the values listed below:  \n  \n- `TBSTATE_CHECKED` The button has the **TBSTYLE_CHECKED** style and is being pressed.  \n  \n- `TBSTATE_ENABLED` The button accepts user input. A button that does not have this state does not accept user input and is grayed.  \n  \n- `TBSTATE_HIDDEN` The button is not visible and cannot receive user input.  \n  \n- `TBSTATE_INDETERMINATE` The button is grayed.  \n  \n- `TBSTATE_PRESSED` The button is being pressed.  \n  \n- `TBSTATE_WRAP` A line break follows the button. The button must also have the `TBSTATE_ENABLED` state.  \n  \n **fsStyle**  \n Button style. It can be a combination of the values listed below:  \n  \n- `TBSTYLE_BUTTON` Creates a standard push button.  \n  \n- `TBSTYLE_CHECK` Creates a button that toggles between the pressed and unpressed states each time the user clicks it. The button has a different background color when it is in the pressed state.  \n  \n- `TBSTYLE_CHECKGROUP` Creates a check button that stays pressed until another button in the group is pressed.  \n  \n- `TBSTYLE_GROUP` Creates a button that stays pressed until another button in the group is pressed.  \n  \n- `TBSTYLE_SEP` Creates a separator, providing a small gap between button groups. A button that has this style does not receive user input.  \n  \n `dwData`  \n User-defined data.  \n  \n **iString**  \n Zero-based index of the string to use as the button's label, -1 if there is no string for this button.  \n  \n The image and/or string whose index you provide must have previously been added to the toolbar control's list using [AddBitmap](#ctoolbarctrl__addbitmap), [AddString](#ctoolbarctrl__addstring), and/or [AddStrings](#ctoolbarctrl__addstrings).  \n  \n##  <a name=\"ctoolbarctrl__addstring\"></a>  CToolBarCtrl::AddString  \n Adds a new string, passed as a resource ID, to the toolbar's internal list of strings.  \n  \n```  \nint AddString(UINT nStringID);\n```  \n  \n### Parameters  \n *nStringID*  \n Resource identifier of the string resource to add to the toolbar control's string list.  \n  \n### Return Value  \n The zero-based index of the first new string added if successful; otherwise –1.  \n  \n##  <a name=\"ctoolbarctrl__addstrings\"></a>  CToolBarCtrl::AddStrings  \n Adds a new string or strings to the list of strings available for a toolbar control.  \n  \n```  \nint AddStrings(LPCTSTR lpszStrings);\n```  \n  \n### Parameters  \n *lpszStrings*  \n Address of a buffer that contains one or more null-terminated strings to add to the toolbar's string list. The last string must be terminated with two null characters.  \n  \n### Return Value  \n The zero-based index of the first new string added if successful; otherwise –1.  \n  \n### Remarks  \n Strings in the buffer must be separated by a null character. You must ensure that the last string has two null terminators. To properly format a constant string, you might write it as:  \n  \n [!code-cpp[NVC_MFCControlLadenDialog#72](../../mfc/codesnippet/cpp/ctoolbarctrl-class_1.cpp)]  \n  \n or:  \n  \n [!code-cpp[NVC_MFCControlLadenDialog#73](../../mfc/codesnippet/cpp/ctoolbarctrl-class_2.cpp)]  \n  \n You should not pass a `CString` object to this function since it is not possible to have more than one null character in a `CString`.  \n  \n##  <a name=\"ctoolbarctrl__autosize\"></a>  CToolBarCtrl::AutoSize  \n Resizes the entire toolbar control.  \n  \n```  \nvoid AutoSize();\n```  \n  \n### Remarks  \n You should call this function when the size of the parent window changes or when the size of the toolbar changes (such as when you set the button or bitmap size, or add strings).  \n  \n##  <a name=\"ctoolbarctrl__changebitmap\"></a>  CToolBarCtrl::ChangeBitmap  \n Changes the bitmap for a button in the current toolbar control.  \n  \n```  \nBOOL ChangeBitmap(\n    int idButton,   \n    int iBitmap);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `idButton`|Command identifier of the button that is to receive a new bitmap.|  \n|[in] `iBitmap`|Zero-based index of an image in the current toolbar control's image list.|  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n If this method is successful, the system displays the specified image in the specified button.  \n  \n This method sends the [TB_CHANGEBITMAP](http://msdn.microsoft.com/library/windows/desktop/bb787301) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n The following code example changes the bitmap for the **File Save** button to the bitmap for the **About** button.  \n  \n [!code-cpp[NVC_MFC_CToolBarCtrl_s1#1](../../mfc/reference/codesnippet/cpp/ctoolbarctrl-class_3.cpp)]  \n  \n##  <a name=\"ctoolbarctrl__checkbutton\"></a>  CToolBarCtrl::CheckButton  \n Checks or clears a given button in a toolbar control.  \n  \n```  \nBOOL CheckButton(\n    int nID,  \n    BOOL bCheck = TRUE);\n```  \n  \n### Parameters  \n `nID`  \n Command identifier of the button to check or clear.  \n  \n *bCheck*  \n **TRUE** to check the button, **FALSE** to clear it.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n When a button has been checked, it appears to have been pressed. If you want to change more than one button state, consider calling [SetState](#ctoolbarctrl__setstate) instead.  \n  \n##  <a name=\"ctoolbarctrl__commandtoindex\"></a>  CToolBarCtrl::CommandToIndex  \n Retrieves the zero-based index for the button associated with the specified command identifier.  \n  \n```  \nUINT CommandToIndex(UINT nID) const;\n\n \n```  \n  \n### Parameters  \n `nID`  \n Command ID whose button index you want to find.  \n  \n### Return Value  \n The zero-based index for the button associated with the command ID.  \n  \n### Remarks  \n  \n##  <a name=\"ctoolbarctrl__create\"></a>  CToolBarCtrl::Create  \n Creates a toolbar control and attaches it to a `CToolBarCtrl` object.  \n  \n```  \nvirtual BOOL Create(\n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    UINT nID);\n```  \n  \n### Parameters  \n `dwStyle`  \n Specifies the toolbar control's style. Toolbars must always have the **WS_CHILD** style. In addition, you can specify any combination of toolbar styles and window styles as described under **Remarks**.  \n  \n `rect`  \n Optionally specifies the toolbar control's size and position. It can be either a [CRect](../../atl-mfc-shared/reference/crect-class.md) object or a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure.  \n  \n `pParentWnd`  \n Specifies the toolbar control's parent window. It must not be **NULL**.  \n  \n `nID`  \n Specifies the toolbar control's ID.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n You construct a `CToolBarCtrl` in two steps. First, call the constructor, and then call **Create**, which creates the toolbar control and attaches it to the `CToolBarCtrl` object. Apply the following window styles to a toolbar control.  \n  \n- **WS_CHILD** Always  \n  \n- **WS_VISIBLE** Usually  \n  \n- **WS_DISABLED** Rarely  \n  \n See [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for a description of window styles.  \n  \n Optionally, apply a combination of [common control styles](http://msdn.microsoft.com/library/windows/desktop/bb775498), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n Apply a combination of toolbar styles to either the control or the buttons themselves. The styles are described in the topic [Toolbar Control and Button Styles](http://msdn.microsoft.com/library/windows/desktop/bb760439) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n To use extended toolbar styles, call [SetExtendedStyle](#ctoolbarctrl__setextendedstyle) after you call **Create**. To create a toolbar with extended window styles, call [CToolBarCtrl::CreateEx](#ctoolbarctrl__createex) instead of **Create**.  \n  \n The toolbar control automatically sets the size and position of the toolbar window. The height is based on the height of the buttons in the toolbar. The width is the same as the width of the parent window's client area. The `CCS_TOP` and `CCS_BOTTOM` styles determine whether the toolbar is positioned along the top or bottom of the client area. By default, a toolbar has the `CCS_TOP` style.  \n  \n##  <a name=\"ctoolbarctrl__createex\"></a>  CToolBarCtrl::CreateEx  \n Creates a control (a child window) and associates it with the `CToolBarCtrl` object.  \n  \n```  \nvirtual BOOL CreateEx(\n    DWORD dwExStyle,  \n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    UINT nID);\n```  \n  \n### Parameters  \n `dwExStyle`  \n Specifies the extended style of the control being created. For a list of extended Windows styles, see the `dwExStyle` parameter for [CreateWindowEx](http://msdn.microsoft.com/library/windows/desktop/ms632680) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `dwStyle`  \n Specifies the toolbar control's style. Toolbars must always have the **WS_CHILD** style. In addition, you can specify any combination of toolbar styles and window styles as described in the **Remarks** section of [Create](#ctoolbarctrl__create).  \n  \n `rect`  \n A reference to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure describing the size and position of the window to be created, in client coordinates of `pParentWnd`.  \n  \n `pParentWnd`  \n A pointer to the window that is the control's parent.  \n  \n `nID`  \n The control's child-window ID.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n Use `CreateEx` instead of [Create](#ctoolbarctrl__create) to apply extended Windows styles, specified by the Windows extended style preface **WS_EX_**. **CreateEx** creates the control with the extended Windows styles specified by `dwExStyle`. Set extended styles specific to a control using [SetExtendedStyle](#ctoolbarctrl__setextendedstyle). For example, use `CreateEx` to set such styles as **WS_EX_CONTEXTHELP**, but use `SetExtendedStyle` to set such styles as **TBSTYLE_EX_DRAWDDARROWS**. For more information, see the styles described in [Toolbar Extended Styles](http://msdn.microsoft.com/library/windows/desktop/bb760430) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__ctoolbarctrl\"></a>  CToolBarCtrl::CToolBarCtrl  \n Constructs a `CToolBarCtrl` object.  \n  \n```  \nCToolBarCtrl();\n```  \n  \n### Remarks  \n You must call [Create](#ctoolbarctrl__create) to make the toolbar usable.  \n  \n##  <a name=\"ctoolbarctrl__customize\"></a>  CToolBarCtrl::Customize  \n Displays the Customize Toolbar dialog box.  \n  \n```  \nvoid Customize();\n```  \n  \n### Remarks  \n This dialog box allows the user to customize the toolbar by adding and deleting buttons. To support customization, your toolbar's parent window must handle the customization notification messages as described in [Handling Customization Notifications](../../mfc/handling-customization-notifications.md). Your toolbar must also have been created with the `CCS_ADJUSTABLE` style, as described in [CToolBarCtrl::Create](#ctoolbarctrl__create).  \n  \n For more information, see Knowledge Base article Q241850 : PRB: Call to CToolBarCtrl::Customize Does Not Keep the Customize Dialog Visible.  \n  \n##  <a name=\"ctoolbarctrl__deletebutton\"></a>  CToolBarCtrl::DeleteButton  \n Deletes a button from the toolbar control.  \n  \n```  \nBOOL DeleteButton(int nIndex);\n```  \n  \n### Parameters  \n `nIndex`  \n Zero-based index of the button to delete.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n  \n##  <a name=\"ctoolbarctrl__enablebutton\"></a>  CToolBarCtrl::EnableButton  \n Enables or disables the specified button in a toolbar control.  \n  \n```  \nBOOL EnableButton(\n    int nID,  \n    BOOL bEnable = TRUE);\n```  \n  \n### Parameters  \n `nID`  \n Command identifier of the button to enable or disable.  \n  \n `bEnable`  \n **TRUE** to enable the button; **FALSE** to disable the button.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n When a button has been enabled, it can be pressed and checked. If you want to change more than one button state, consider calling [SetState](#ctoolbarctrl__setstate) instead.  \n  \n##  <a name=\"ctoolbarctrl__getanchorhighlight\"></a>  CToolBarCtrl::GetAnchorHighlight  \n Retrieves the anchor highlight setting for a toolbar.  \n  \n```  \nBOOL GetAnchorHighlight() const;\n\n \n```  \n  \n### Return Value  \n If nonzero, anchor highlighting is enabled. If zero, anchor highlighting is disabled.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [TB_GETANCHORHIGHLIGHT](http://msdn.microsoft.com/library/windows/desktop/bb787313), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__getbitmap\"></a>  CToolBarCtrl::GetBitmap  \n Retrieves the index of the bitmap associated with a button in a toolbar.  \n  \n```  \nint GetBitmap(int nID) const;\n\n \n```  \n  \n### Parameters  \n `nID`  \n Command identifier of the button whose bitmap index is to be retrieved.  \n  \n### Return Value  \n Returns the index of the bitmap if successful, or zero otherwise.  \n  \n### Remarks  \n Implements the functionality of [TB_GETBITMAP](http://msdn.microsoft.com/library/windows/desktop/bb787315) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__getbitmapflags\"></a>  CToolBarCtrl::GetBitmapFlags  \n Retrieves the bitmap flags from the toolbar.  \n  \n```  \nUINT GetBitmapFlags() const;\n\n \n```  \n  \n### Return Value  \n A **UINT** that has the **TBBF_LARGE** flag set if the display can support large toolbar bitmaps, clear otherwise.  \n  \n### Remarks  \n You should call it after creating the toolbar but before adding bitmaps to the toolbar. The return value indicates whether the display supports large bitmaps or not. If the display supports large bitmaps and if you choose to use them, call [SetBitmapSize](#ctoolbarctrl__setbitmapsize) and [SetButtonSize](#ctoolbarctrl__setbuttonsize) before adding your large bitmap using [AddBitmap](#ctoolbarctrl__addbitmap).  \n  \n##  <a name=\"ctoolbarctrl__getbutton\"></a>  CToolBarCtrl::GetButton  \n Retrieves information about the specified button in a toolbar control.  \n  \n```  \nBOOL GetButton(\n    int nIndex,  \n    LPTBBUTTON lpButton) const;\n\n \n```  \n  \n### Parameters  \n `nIndex`  \n Zero-based index of the button for which to retrieve information.  \n  \n `lpButton`  \n Address of the `TBBUTTON` structure that is to receive a copy of the button information. See [CToolBarCtrl::AddButtons](#ctoolbarctrl__addbuttons) for information about the `TBBUTTON` structure.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n##  <a name=\"ctoolbarctrl__getbuttoncount\"></a>  CToolBarCtrl::GetButtonCount  \n Retrieves a count of the buttons currently in the toolbar control.  \n  \n```  \nint GetButtonCount() const;\n\n \n```  \n  \n### Return Value  \n The count of the buttons.  \n  \n##  <a name=\"ctoolbarctrl__getbuttoninfo\"></a>  CToolBarCtrl::GetButtonInfo  \n Retrieves the information for a button in a toolbar.  \n  \n```  \nint GetButtonInfo(\n    int nID,  \n    TBBUTTONINFO* ptbbi) const;\n\n \n```  \n  \n### Parameters  \n `nID`  \n The button identifier.  \n  \n `ptbbi`  \n A pointer to a [TBBUTTONINFO](http://msdn.microsoft.com/library/windows/desktop/bb760478) structure that receives the button information.  \n  \n### Return Value  \n The zero-based index of the button, if successful; otherwise -1.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [TB_GETBUTTONINFO](http://msdn.microsoft.com/library/windows/desktop/bb787321), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__getbuttonsize\"></a>  CToolBarCtrl::GetButtonSize  \n Gets the size of a toolbar button.  \n  \n```  \nDWORD GetButtonSize() const;\n\n \n```  \n  \n### Return Value  \n A `DWORD` value that contains the width and height values in the LOWORD and HIWORD, respectively.  \n  \n##  <a name=\"ctoolbarctrl__getbuttontext\"></a>  CToolBarCtrl::GetButtonText  \n Retrieves the display text of a specified button on the current toolbar control.  \n  \n```  \nCString GetButtonText(int idButton) const;\n\n \n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `idButton`|The identifier for the button whose display text is retrieved.|  \n  \n### Return Value  \n A [CString](../../atl-mfc-shared/using-cstring.md) that contains the display text of the specified button.  \n  \n### Remarks  \n This method sends the [TB_GETBUTTONTEXT](http://msdn.microsoft.com/library/windows/desktop/bb787325) message, which is described in the Windows SDK.  \n  \n##  <a name=\"ctoolbarctrl__getcolorscheme\"></a>  CToolBarCtrl::GetColorScheme  \n Retrieves the color scheme of the current toolbar control.  \n  \n```  \nBOOL GetColorScheme(COLORSCHEME* lpColorScheme) const;\n\n \n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[out] `lpColorScheme`|Pointer to a [COLORSCHEME](http://msdn.microsoft.com/library/windows/desktop/bb775502) structure that receives the color scheme information. When this method returns, the structure describes the highlight color and shadow color of the toolbar control.|  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n This method sends the [TB_GETCOLORSCHEME](http://msdn.microsoft.com/library/windows/desktop/bb787327) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__getdisabledimagelist\"></a>  CToolBarCtrl::GetDisabledImageList  \n Retrieves the image list that a toolbar control uses to display disabled buttons.  \n  \n```  \nCImageList* GetDisabledImageList() const;\n\n \n```  \n  \n### Return Value  \n A pointer to a [CImageList](../../mfc/reference/cimagelist-class.md) object, or **NULL** if no disabled image list is set.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [TB_GETDISABLEDIMAGELIST](http://msdn.microsoft.com/library/windows/desktop/bb787329), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. The MFC implementation of `GetDisabledImageList` uses a `CImageList` object containing the toolbar control's button images, rather than a handle to an image list.  \n  \n##  <a name=\"ctoolbarctrl__getdroptarget\"></a>  CToolBarCtrl::GetDropTarget  \n Retrieves the [IDropTarget](http://msdn.microsoft.com/library/windows/desktop/ms679679) interface for a toolbar control.  \n  \n```  \nHRESULT GetDropTarget(IDropTarget** ppDropTarget) const;\n\n \n```  \n  \n### Parameters  \n `ppDropTarget`  \n A pointer to an [IDropTarget](http://msdn.microsoft.com/library/windows/desktop/ms679679) interface pointer. If an error occurs, a **NULL** pointer is placed in this address.  \n  \n### Return Value  \n Returns an `HRESULT` value indicating success or failure of the operation.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [TB_GETOBJECT](http://msdn.microsoft.com/library/windows/desktop/bb787343), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__getextendedstyle\"></a>  CToolBarCtrl::GetExtendedStyle  \n Retrieves the extended styles for a toolbar control.  \n  \n```  \nDWORD GetExtendedStyle() const;\n\n \n```  \n  \n### Return Value  \n A `DWORD` that represents the extended styles currently in use for the toolbar control. For a list of styles, see [Toolbar Extended Styles](http://msdn.microsoft.com/library/windows/desktop/bb760430), in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [TB_GETEXTENDEDSTYLE](http://msdn.microsoft.com/library/windows/desktop/bb787331), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__gethotimagelist\"></a>  CToolBarCtrl::GetHotImageList  \n Retrieves the image list that a toolbar control uses to display \"hot\" buttons. A hot button appears highlighted when the mouse pointer is above it.  \n  \n```  \nCImageList* GetHotImageList() const;\n\n \n```  \n  \n### Return Value  \n A pointer to a [CImageList](../../mfc/reference/cimagelist-class.md) object, or **NULL** if no disabled image list is set.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [TB_GETHOTIMAGELIST](http://msdn.microsoft.com/library/windows/desktop/bb787334), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. A hot button appears highlighted when the mouse pointer is above it.  \n  \n##  <a name=\"ctoolbarctrl__gethotitem\"></a>  CToolBarCtrl::GetHotItem  \n Retrieves the index of the hot item in a toolbar.  \n  \n```  \nint GetHotItem() const;\n\n \n```  \n  \n### Return Value  \n The zero-based index of the hot item in a toolbar.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [TB_GETHOTITEM](http://msdn.microsoft.com/library/windows/desktop/bb787336), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__getimagelist\"></a>  CToolBarCtrl::GetImageList  \n Retrieves the image list that a toolbar control uses to display buttons in their default state.  \n  \n```  \nCImageList* GetImageList() const;\n\n \n```  \n  \n### Return Value  \n A pointer to a [CImageList](../../mfc/reference/cimagelist-class.md) object, or **NULL** if no image list is set.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [TB_GETIMAGELIST](http://msdn.microsoft.com/library/windows/desktop/bb787337), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__getinsertmark\"></a>  CToolBarCtrl::GetInsertMark  \n Retrieves the current insertion mark for the toolbar.  \n  \n```  \nvoid GetInsertMark(TBINSERTMARK* ptbim) const;\n\n \n```  \n  \n### Parameters  \n `ptbim`  \n A pointer to a [TBINSERTMARK](http://msdn.microsoft.com/library/windows/desktop/bb760480) structure that receives the insertion mark.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [TB_GETINSERTMARK](http://msdn.microsoft.com/library/windows/desktop/bb787338), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__getinsertmarkcolor\"></a>  CToolBarCtrl::GetInsertMarkColor  \n Retrieves the color used to draw the insertion mark for the toolbar.  \n  \n```  \nCOLORREF GetInsertMarkColor() const;\n\n \n```  \n  \n### Return Value  \n A **COLORREF** value that contains the current insertion mark color.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [TB_GETINSERTMARKCOLOR](http://msdn.microsoft.com/library/windows/desktop/bb787339), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__getitemrect\"></a>  CToolBarCtrl::GetItemRect  \n Retrieves the bounding rectangle of a button in a toolbar control.  \n  \n```  \nBOOL GetItemRect(\n    int nIndex,  \n    LPRECT lpRect) const;\n\n \n```  \n  \n### Parameters  \n `nIndex`  \n Zero-based index of the button for which to retrieve information.  \n  \n `lpRect`  \n Address of a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure or a [CRect](../../atl-mfc-shared/reference/crect-class.md) object that receives the coordinates of the bounding rectangle.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n This function does not retrieve the bounding rectangle for buttons whose state is set to `TBSTATE_HIDDEN`.  \n  \n##  <a name=\"ctoolbarctrl__getmaxsize\"></a>  CToolBarCtrl::GetMaxSize  \n Retrieves the total size of all of the visible buttons and separators in the toolbar.  \n  \n```  \nBOOL GetMaxSize(LPSIZE pSize) const;\n\n \n```  \n  \n### Parameters  \n `pSize`  \n A pointer to a [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure that receives the size of the items.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [TB_GETMAXSIZE](http://msdn.microsoft.com/library/windows/desktop/bb787341), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__getmaxtextrows\"></a>  CToolBarCtrl::GetMaxTextRows  \n Retrieves the maximum number of text rows displayed on a toolbar button.  \n  \n```  \nint GetMaxTextRows() const;\n\n \n```  \n  \n### Return Value  \n The maximum number of text rows displayed on a toolbar button.  \n  \n##  <a name=\"ctoolbarctrl__getmetrics\"></a>  CToolBarCtrl::GetMetrics  \n Retrieves the metrics of the `CToolBarCtrl` object.  \n  \n```  \nvoid GetMetrics(LPTBMETRICS ptbm) const;\n\n \n```  \n  \n### Parameters  \n `ptbm`  \n A pointer to the [TBMETRICS](http://msdn.microsoft.com/library/windows/desktop/bb760482) structure of the `CToolBarCtrl` object.  \n  \n### Remarks  \n This member function emulates the functionality of the [TB_GETMETRICS](http://msdn.microsoft.com/library/windows/desktop/bb787342) message, as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__getpadding\"></a>  CToolBarCtrl::GetPadding  \n Retrieves the horizontal and vertical padding of the current toolbar control.  \n  \n```  \nBOOL GetPadding(\n    int* pnHorzPadding,   \n    int* pnVertPadding) const;\n\n \n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[out] `pnHorzPadding`|An integer that receives the horizontal padding of the toolbar control, in pixels.|  \n|[out] `pnVertPadding`|An integer that receives the vertical padding of the toolbar control, in pixels.|  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n This method sends the [TB_GETPADDING](http://msdn.microsoft.com/library/windows/desktop/bb787344) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__getpressedimagelist\"></a>  CToolBarCtrl::GetPressedImageList  \n Retrieves the image list that the current toolbar control uses to represent buttons in the pressed state.  \n  \n```  \nCImageList* GetPressedImageList();\n```  \n  \n### Return Value  \n Pointer to a [CImageList](../../mfc/reference/cimagelist-class.md) that contains the image list for the current control, or `NULL` if no such image list is set.  \n  \n### Remarks  \n This method sends the [TB_GETPRESSEDIMAGELIST](http://msdn.microsoft.com/library/windows/desktop/bb787345) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__getrect\"></a>  CToolBarCtrl::GetRect  \n Retrieves the bounding rectangle for a specified toolbar button.  \n  \n```  \nBOOL GetRect(\n    int nID,  \n    LPRECT lpRect) const;\n\n \n```  \n  \n### Parameters  \n `nID`  \n The button identifier.  \n  \n `lpRect`  \n A pointer to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure to receive the bounding rectangle information.  \n  \n### Return Value  \n **TRUE** if successful; otherwise **FALSE**.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [TB_GETRECT](http://msdn.microsoft.com/library/windows/desktop/bb787346), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__getrows\"></a>  CToolBarCtrl::GetRows  \n Retrieves the number of rows of buttons currently displayed by the toolbar control.  \n  \n```  \nint GetRows() const;\n\n \n```  \n  \n### Return Value  \n Number of rows of buttons currently displayed on the toolbar.  \n  \n### Remarks  \n Note that the number of rows will always be one unless the toolbar was created with the `TBSTYLE_WRAPABLE` style.  \n  \n##  <a name=\"ctoolbarctrl__getstate\"></a>  CToolBarCtrl::GetState  \n Retrieves information about the state of the specified button in a toolbar control, such as whether it is enabled, pressed, or checked.  \n  \n```  \nint GetState(int nID) const;\n\n \n```  \n  \n### Parameters  \n `nID`  \n Command identifier of the button for which to retrieve information.  \n  \n### Return Value  \n The button state information if successful or – 1 otherwise. The button state information can be a combination of the values listed in [CToolBarCtrl::AddButtons](#ctoolbarctrl__addbuttons).  \n  \n### Remarks  \n This function is especially handy if you want to retrieve more than one of the button states. To just retrieve one state, use one of the following member functions: [IsButtonEnabled](#ctoolbarctrl__isbuttonenabled), [IsButtonChecked](#ctoolbarctrl__isbuttonchecked), [IsButtonPressed](#ctoolbarctrl__isbuttonpressed), [IsButtonHidden](#ctoolbarctrl__isbuttonhidden), or [IsButtonIndeterminate](#ctoolbarctrl__isbuttonindeterminate). However, the `GetState` member function is the only way to detect the `TBSTATE_WRAP` button state.  \n  \n##  <a name=\"ctoolbarctrl__getstring\"></a>  CToolBarCtrl::GetString  \n Retrieves a toolbar string.  \n  \n```  \nint GetString(\n    int nString,  \n    LPTSTR lpstrString,  \n    int cchMaxLen) const;\n\n \n \nint GetString(\n    int nString,  \n    CString& str) const;\n\n \n```  \n  \n### Parameters  \n *nString*  \n Index of the string.  \n  \n *lpstrString*  \n Pointer to a buffer used to return the string.  \n  \n *cchMaxLen*  \n Length of the buffer in bytes.  \n  \n `str`  \n The string.  \n  \n### Return Value  \n The length of the string if successful, -1 if not.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [TB_GETSTRING](http://msdn.microsoft.com/library/windows/desktop/bb787349), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__getstyle\"></a>  CToolBarCtrl::GetStyle  \n Gets the styles currently applied to a toolbar control.  \n  \n```  \nDWORD GetStyle() const;\n\n \n```  \n  \n### Return Value  \n A `DWORD` containing a combination of [toolbar control styles](http://msdn.microsoft.com/library/windows/desktop/bb760439), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__gettooltips\"></a>  CToolBarCtrl::GetToolTips  \n Retrieves the handle of the tool tip control, if any, associated with the toolbar control.  \n  \n```  \nCToolTipCtrl* GetToolTips() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the [CToolTipCtrl](../../mfc/reference/ctooltipctrl-class.md) object associated with this toolbar or **NULL** if the toolbar has no associated tool tip control.  \n  \n### Remarks  \n Since the toolbar control normally creates and maintains its own tool tip control, most programs don't need to call this function.  \n  \n##  <a name=\"ctoolbarctrl__hittest\"></a>  CToolBarCtrl::HitTest  \n Determines where a point lies in a toolbar control.  \n  \n```  \nint HitTest(LPPOINT ppt) const;\n\n \n```  \n  \n### Parameters  \n `ppt`  \n A pointer to a [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) structure that contains the x-coordinate of the hit test in the **x** member and the y-coordinate of the hit test in the **y** member. The coordinates are relative to the toolbar's client area.  \n  \n### Return Value  \n An integer value indicating the location of a point on a toolbar. If the value is zero or a positive value, this return value is the zero-based index of the nonseparator item in which the point lies.  \n  \n If the return value is negative, the point does not lie within a button. The absolute value of the return value is the index of a separator item or the nearest nonseparator item.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [TB_HITTEST](http://msdn.microsoft.com/library/windows/desktop/bb787360), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__hidebutton\"></a>  CToolBarCtrl::HideButton  \n Hides or shows the specified button in a toolbar control.  \n  \n```  \nBOOL HideButton(\n    int nID,  \n    BOOL bHide = TRUE);\n```  \n  \n### Parameters  \n `nID`  \n Command identifier of the button to hide or show.  \n  \n `bHide`  \n **TRUE** to hide the button, **FALSE** to show it.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n If you want to change more than one button state, consider calling [SetState](#ctoolbarctrl__setstate) instead.  \n  \n##  <a name=\"ctoolbarctrl__indeterminate\"></a>  CToolBarCtrl::Indeterminate  \n Sets or clears the indeterminate state of the specified button in a toolbar control.  \n  \n```  \nBOOL Indeterminate(\n    int nID,  \n    BOOL bIndeterminate = TRUE);\n```  \n  \n### Parameters  \n `nID`  \n Command identifier of the button whose indeterminate state is to be set or cleared.  \n  \n *bIndeterminate*  \n **TRUE** to set the indeterminate state for the specified button, **FALSE** to clear it.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n Indeterminate buttons are displayed grayed, such as the way the bold button on the toolbar of a word processor would look when the text selected contains both bold and regular characters. If you want to change more than one button state, consider calling [SetState](#ctoolbarctrl__setstate) instead.  \n  \n##  <a name=\"ctoolbarctrl__insertbutton\"></a>  CToolBarCtrl::InsertButton  \n Inserts a button in a toolbar control.  \n  \n```  \nBOOL InsertButton(\n    int nIndex,  \n    LPTBBUTTON lpButton);\n```  \n  \n### Parameters  \n `nIndex`  \n Zero-based index of a button. This function inserts the new button to the left of this button.  \n  \n `lpButton`  \n Address of a `TBBUTTON` structure containing information about the button to insert. See [CToolBarCtrl::AddButtons](#ctoolbarctrl__addbuttons) for a description of the `TBBUTTON` structure.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n The image and/or string whose index you provide must have previously been added to the toolbar control's list using [AddBitmap](#ctoolbarctrl__addbitmap), [AddString](#ctoolbarctrl__addstring), and/or [AddStrings](#ctoolbarctrl__addstrings).  \n  \n##  <a name=\"ctoolbarctrl__insertmarkhittest\"></a>  CToolBarCtrl::InsertMarkHitTest  \n Retrieves the insertion mark information for a point in a toolbar.  \n  \n```  \nBOOL InsertMarkHitTest(\n    LPPOINT ppt,  \n    LPTBINSERTMARK ptbim) const;\n\n \n```  \n  \n### Parameters  \n `ppt`  \n A pointer to a [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) structure that contains the hit test coordinates, relative to the client area of the toolbar.  \n  \n `ptbim`  \n A pointer to a [TBINSERTMARK](http://msdn.microsoft.com/library/windows/desktop/bb760480) structure that receives the insertion mark information.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [TB_INSERTMARKHITTEST](http://msdn.microsoft.com/library/windows/desktop/bb787367), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__isbuttonchecked\"></a>  CToolBarCtrl::IsButtonChecked  \n Determines whether the specified button in a toolbar control is checked.  \n  \n```  \nBOOL IsButtonChecked(int nID) const;\n\n \n```  \n  \n### Parameters  \n `nID`  \n Command identifier of the button in the toolbar.  \n  \n### Return Value  \n Nonzero if the button is checked; otherwise zero.  \n  \n### Remarks  \n Consider calling [GetState](#ctoolbarctrl__getstate) if you want to retrieve more than one button state.  \n  \n##  <a name=\"ctoolbarctrl__isbuttonenabled\"></a>  CToolBarCtrl::IsButtonEnabled  \n Determines whether the specified button in a toolbar control is enabled.  \n  \n```  \nBOOL IsButtonEnabled(int nID) const;\n\n \n```  \n  \n### Parameters  \n `nID`  \n Command identifier of the button in the toolbar.  \n  \n### Return Value  \n Nonzero if the button is enabled; otherwise zero.  \n  \n### Remarks  \n Consider calling [GetState](#ctoolbarctrl__getstate) if you want to retrieve more than one button state.  \n  \n##  <a name=\"ctoolbarctrl__isbuttonhidden\"></a>  CToolBarCtrl::IsButtonHidden  \n Determines whether the specified button in a toolbar control is hidden.  \n  \n```  \nBOOL IsButtonHidden(int nID) const;\n\n \n```  \n  \n### Parameters  \n `nID`  \n Command identifier of the button in the toolbar.  \n  \n### Return Value  \n Nonzero if the button is hidden; otherwise zero.  \n  \n### Remarks  \n Consider calling [GetState](#ctoolbarctrl__getstate) if you want to retrieve more than one button state.  \n  \n##  <a name=\"ctoolbarctrl__isbuttonhighlighted\"></a>  CToolBarCtrl::IsButtonHighlighted  \n Checks the highlight state of a toolbar button.  \n  \n```  \nBOOL IsButtonHighlighted(int nID) const;\n\n \n```  \n  \n### Parameters  \n [in] `nID`  \n The command ID for the toolbar button.  \n  \n### Return Value  \n Positive integer if the button is highlighted, 0 if the button is not highlighted, or -1 if an error occurs.  \n  \n##  <a name=\"ctoolbarctrl__isbuttonindeterminate\"></a>  CToolBarCtrl::IsButtonIndeterminate  \n Determines whether the specified button in a toolbar control is indeterminate.  \n  \n```  \nBOOL IsButtonIndeterminate(int nID) const;\n\n \n```  \n  \n### Parameters  \n [in] `nID`  \n Command identifier of the button in the toolbar.  \n  \n### Return Value  \n Positive integer if the button is indeterminate, zero if the button is not indeterminate, or -1 if an error occurs.  \n  \n### Remarks  \n Indeterminate buttons are displayed dimmed, such as the way the bold button on the toolbar of a word processor looks when the selected text contains both bold and regular characters. Consider calling [GetState](#ctoolbarctrl__getstate) if you want to retrieve more than one button state.  \n  \n##  <a name=\"ctoolbarctrl__isbuttonpressed\"></a>  CToolBarCtrl::IsButtonPressed  \n Determines whether the specified button in a toolbar control is pressed.  \n  \n```  \nBOOL IsButtonPressed(int nID) const;\n\n \n```  \n  \n### Parameters  \n `nID`  \n Command identifier of the button in the toolbar.  \n  \n### Return Value  \n Nonzero if the button is pressed, otherwise zero.  \n  \n### Remarks  \n Consider calling [GetState](#ctoolbarctrl__getstate) if you want to retrieve more than one button state.  \n  \n##  <a name=\"ctoolbarctrl__loadimages\"></a>  CToolBarCtrl::LoadImages  \n Loads bitmaps into a toolbar control's image list.  \n  \n```  \nvoid LoadImages(\n    int iBitmapID,  \n    HINSTANCE hinst);\n```  \n  \n### Parameters  \n *iBitmapID*  \n ID of a bitmap that contains the images to be loaded. To specify your own bitmap resource, set this parameter to the ID of a bitmap resource and set `hInst` to **NULL**. Your bitmap resource will be added to the image list as a single image. You can add standard, system-defined bitmaps by setting *hinst* to **HINST_COMMCTRL** and setting this parameter to one of the following IDs:  \n  \n|Bitmap ID|Description|  \n|---------------|-----------------|  \n|IDB_HIST_LARGE_COLOR|Explorer bitmaps in large size|  \n|IDB_HIST_SMALL_COLOR|Explorer bitmaps in small size|  \n|IDB_STD_LARGE_COLOR|Standard bitmaps in large size|  \n|IDB_STD_SMALL_COLOR|Standard bitmaps in small size|  \n|IDB_VIEW_LARGE_COLOR|View bitmaps in large size|  \n|IDB_VIEW_SMALL_COLOR|View bitmaps in small size|  \n  \n *hinst*  \n Program instance handle to the calling application. This parameter can be **HINST_COMMCTRL** to load a standard image list.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [TB_LOADIMAGES](http://msdn.microsoft.com/library/windows/desktop/bb787381), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__mapaccelerator\"></a>  CToolBarCtrl::MapAccelerator  \n Maps an accelerator character to a toolbar button.  \n  \n```  \nBOOL MapAccelerator(\n    TCHAR chAccel,  \n    UINT* pIDBtn);\n```  \n  \n### Parameters  \n `chAccel`  \n Accelerator character to be mapped. This character is the same character that is underlined in the button's text.  \n  \n *pIDBtn*  \n A pointer to a **UINT** that receives the command identifier of the button that corresponds to the accelerator specified in `chAccel`.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [TB_MAPACCELERATOR](http://msdn.microsoft.com/library/windows/desktop/bb787383), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__markbutton\"></a>  CToolBarCtrl::MarkButton  \n Sets the highlight state of a given button in a toolbar control.  \n  \n```  \nBOOL MarkButton(\n    int nID,  \n    BOOL fHighlight = TRUE);\n```  \n  \n### Parameters  \n `nID`  \n The button identifier.  \n  \n `fHighlight`  \n Specifies the highlight state to be set. By default, **TRUE**. If set to **FALSE**, the button is set to its default state.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [TB_MARKBUTTON](http://msdn.microsoft.com/library/windows/desktop/bb787385), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__movebutton\"></a>  CToolBarCtrl::MoveButton  \n Moves a button from one index to another.  \n  \n```  \nBOOL MoveButton(\n    UINT nOldPos,  \n    UINT nNewPos);\n```  \n  \n### Parameters  \n *nOldPos*  \n The zero-based index of the button to be moved.  \n  \n *nNewPos*  \n The zero-based index of the button's destination.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [TB_MOVEBUTTON](http://msdn.microsoft.com/library/windows/desktop/bb787387), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__pressbutton\"></a>  CToolBarCtrl::PressButton  \n Presses or releases the specified button in a toolbar control.  \n  \n```  \nBOOL PressButton(\n    int nID, BOOL bPress = TRUE);\n```  \n  \n### Parameters  \n [in] `nID`  \n Command identifier of the button to press or release.  \n  \n [in] `bPress`  \n `true` to press the specified button; `false` to release the specified button. The default value is `true`.  \n  \n### Return Value  \n `true` if the method is successful; otherwise, `false`.  \n  \n### Remarks  \n If you want to change more than one button state, consider calling [SetState](#ctoolbarctrl__setstate) instead.  \n  \n This method sends the [TB_PRESSBUTTON](http://msdn.microsoft.com/library/windows/desktop/bb787389) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__replacebitmap\"></a>  CToolBarCtrl::ReplaceBitmap  \n Replaces the existing bitmap in the current toolbar control with a new bitmap.  \n  \n```  \nBOOL ReplaceBitmap(LPTBREPLACEBITMAP pReplaceBitmap);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `pReplaceBitmap`|Pointer to a [TBREPLACEBITMAP](http://msdn.microsoft.com/library/windows/desktop/bb760484) structure that describes the bitmap to be replaced and the new bitmap.|  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n This method sends the [TB_REPLACEBITMAP](http://msdn.microsoft.com/library/windows/desktop/bb787391) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n The following code example replaces the bitmap for the standard toolbar with a different bitmap.  \n  \n [!code-cpp[NVC_MFC_CToolBarCtrl_s1#2](../../mfc/reference/codesnippet/cpp/ctoolbarctrl-class_4.cpp)]  \n  \n##  <a name=\"ctoolbarctrl__restorestate\"></a>  CToolBarCtrl::RestoreState  \n Restores the state of the toolbar control from the location in the registry specified by the parameters.  \n  \n```  \nvoid RestoreState(\n    HKEY hKeyRoot,  \n    LPCTSTR lpszSubKey,  \n    LPCTSTR lpszValueName);\n```  \n  \n### Parameters  \n `hKeyRoot`  \n Identifies a currently open key in the registry or any of the following predefined reserved handle values:  \n  \n- **HKEY_CLASSES_ROOT**  \n  \n- **HKEY_CURRENT_USER**  \n  \n- **HKEY_LOCAL_MACHINE**  \n  \n- **HKEY_USERS**  \n  \n `lpszSubKey`  \n Points to a null-terminated string containing the name of the subkey with which a value is associated. This parameter can be null or a pointer to an empty string. If the parameter is **NULL**, the value will be added to the key identified by the `hKeyRoot` parameter.  \n  \n `lpszValueName`  \n Points to a string containing the name of the value to retrieve. If a value with this name is not already present in the key, the function adds it to the key.  \n  \n##  <a name=\"ctoolbarctrl__savestate\"></a>  CToolBarCtrl::SaveState  \n Saves the state of the toolbar control in the location in the registry specified by the parameters.  \n  \n```  \nvoid SaveState(\n    HKEY hKeyRoot,  \n    LPCTSTR lpszSubKey,  \n    LPCTSTR lpszValueName);\n```  \n  \n### Parameters  \n `hKeyRoot`  \n Identifies a currently open key in the registry or any of the following predefined reserved handle values:  \n  \n- **HKEY_CLASSES_ROOT**  \n  \n- **HKEY_CURRENT_USER**  \n  \n- **HKEY_LOCAL_MACHINE**  \n  \n- **HKEY_USERS**  \n  \n `lpszSubKey`  \n Points to a null-terminated string containing the name of the subkey with which a value is associated. This parameter can be null or a pointer to an empty string. If the parameter is **NULL**, the value will be added to the key identified by the `hKeyRoot` parameter.  \n  \n `lpszValueName`  \n Points to a string containing the name of the value to set. If a value with this name is not already present in the key, the function adds it to the key.  \n  \n##  <a name=\"ctoolbarctrl__setanchorhighlight\"></a>  CToolBarCtrl::SetAnchorHighlight  \n Sets the anchor highlight setting for a toolbar.  \n  \n```  \nBOOL SetAnchorHighlight(BOOL fAnchor = TRUE);\n```  \n  \n### Parameters  \n [in] `fAnchor`  \n Specifies if anchor highlighting is enabled or disabled. If this value is nonzero, anchor highlighting will be enabled. If this value is zero, anchor highlighting will be disabled  \n  \n### Return Value  \n The previous anchor setting. If highlighting was enabled, this value is nonzero. If highlighting was not enabled, this value is zero.  \n  \n### Remarks  \n This method implements the behavior of the Win32 message [TB_SETANCHORHIGHLIGHT](http://msdn.microsoft.com/library/windows/desktop/bb787396), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__setbitmapsize\"></a>  CToolBarCtrl::SetBitmapSize  \n Sets the size of the actual bitmapped images to be added to a toolbar control.  \n  \n```  \nBOOL SetBitmapSize(CSize size);\n```  \n  \n### Parameters  \n `size`  \n Width and height, in pixels, of the bitmapped images.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n This function must be called only before adding any bitmaps to the toolbar. If the application does not explicitly set the bitmap size, it defaults to 16 by 15 pixels.  \n  \n##  <a name=\"ctoolbarctrl__setbuttoninfo\"></a>  CToolBarCtrl::SetButtonInfo  \n Sets the information for an existing button in a toolbar.  \n  \n```  \nBOOL SetButtonInfo(\n    int nID,  \n    TBBUTTONINFO* ptbbi);\n```  \n  \n### Parameters  \n `nID`  \n The button identifier.  \n  \n `ptbbi`  \n A pointer to a [TBBUTTONINFO](http://msdn.microsoft.com/library/windows/desktop/bb760478) structure that receives the button information.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n The member function implements the behavior of the Win32 message [TB_SETBUTTONINFO](http://msdn.microsoft.com/library/windows/desktop/bb787413), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__setbuttonsize\"></a>  CToolBarCtrl::SetButtonSize  \n Sets the size of the buttons in the toolbar control.  \n  \n```  \nBOOL SetButtonSize(CSize size);\n```  \n  \n### Parameters  \n `size`  \n Width and height, in pixels, of the buttons.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n The button size must always be at least as large as the bitmap size it encloses. This function must be called only before adding any bitmaps to the toolbar. If the application does not explicitly set the button size, it defaults to 24 by 22 pixels.  \n  \n### Example  \n  See the example for [CToolBar::GetToolBarCtrl](../../mfc/reference/ctoolbar-class.md#ctoolbar__gettoolbarctrl).  \n  \n##  <a name=\"ctoolbarctrl__setbuttonstructsize\"></a>  CToolBarCtrl::SetButtonStructSize  \n Specifies the size of the `TBBUTTON` structure.  \n  \n```  \nvoid SetButtonStructSize(int nSize);\n```  \n  \n### Parameters  \n `nSize`  \n Size, in bytes, of the `TBBUTTON` structure.  \n  \n### Remarks  \n If you wanted to store extra data in the `TBBUTTON` structure, you could either derive a new structure from `TBBUTTON`, adding the members you needed, or create a new structure that contains a `TBBUTTON` structure as its first member. You would then call this function to tell the toolbar control the size of the new structure.  \n  \n See [CToolBarCtrl::AddButtons](#ctoolbarctrl__addbuttons) for more information on the `TBBUTTON` structure.  \n  \n##  <a name=\"ctoolbarctrl__setbuttonwidth\"></a>  CToolBarCtrl::SetButtonWidth  \n Sets the minimum and maximum button widths in the toolbar control.  \n  \n```  \nBOOL SetButtonWidth(\n    int cxMin,  \n    int cxMax);\n```  \n  \n### Parameters  \n `cxMin`  \n Minimum button width, in pixels. Toolbar buttons will never be narrower than this value.  \n  \n *cxMax*  \n Maximum button width, in pixels. If button text is too wide, the control displays it with ellipsis points.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [TB_SETBUTTONWIDTH](http://msdn.microsoft.com/library/windows/desktop/bb787417), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__setcmdid\"></a>  CToolBarCtrl::SetCmdID  \n Sets the command identifier that will be sent to the owner window when the specified button is pressed.  \n  \n```  \nBOOL SetCmdID(\n    int nIndex,  \n    UINT nID);\n```  \n  \n### Parameters  \n `nIndex`  \n The zero-based index of the button whose command ID is to be set.  \n  \n `nID`  \n The command ID to set the selected button to.  \n  \n### Return Value  \n Returns nonzero if successful; otherwise zero.  \n  \n##  <a name=\"ctoolbarctrl__setcolorscheme\"></a>  CToolBarCtrl::SetColorScheme  \n Sets the color scheme of the current toolbar control.  \n  \n```  \nvoid SetColorScheme(const COLORSCHEME* lpColorScheme);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `lpColorScheme`|Pointer to a [COLORSCHEME](http://msdn.microsoft.com/library/windows/desktop/bb775502) structure that describes the highlight color and shadow color of the toolbar control.|  \n  \n### Remarks  \n This method has no effect if a [!INCLUDE[windowsver](../../build/reference/includes/windowsver_md.md)] visual theme is set.  \n  \n This method sends the [TB_SETCOLORSCHEME](http://msdn.microsoft.com/library/windows/desktop/bb787421) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n The following code example sets the color scheme for the current toolbar control. The code example makes the left and top edges of each tool button red and the right and bottom edges blue. When the user presses the button, the button's red edges turn blue and its blue edges turn red.  \n  \n [!code-cpp[NVC_MFC_CToolBarCtrl_s1#3](../../mfc/reference/codesnippet/cpp/ctoolbarctrl-class_5.cpp)]  \n  \n##  <a name=\"ctoolbarctrl__setdisabledimagelist\"></a>  CToolBarCtrl::SetDisabledImageList  \n Sets the image list that the toolbar control will use to display disabled buttons.  \n  \n```  \nCImageList* SetDisabledImageList(CImageList* pImageList);\n```  \n  \n### Parameters  \n `pImageList`  \n A pointer to a `CImageList` object containing the images to be used by the toolbar control to display disabled button images.  \n  \n### Return Value  \n A pointer to a [CImageList](../../mfc/reference/cimagelist-class.md) object that was previously used by the toolbar control to display disabled button images.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [TB_SETDISABLEDIMAGELIST](http://msdn.microsoft.com/library/windows/desktop/bb787423), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. The MFC implementation of `SetDisabledImageList` uses a `CImageList` object containing the toolbar control's disabled button images, rather than a handle to an image list.  \n  \n##  <a name=\"ctoolbarctrl__setdrawtextflags\"></a>  CToolBarCtrl::SetDrawTextFlags  \n Sets the flags in the Win32 function [DrawText](http://msdn.microsoft.com/library/windows/desktop/dd162498), which is used to draw the text in the specified rectangle, formatted according to how the flags are set.  \n  \n```  \nDWORD SetDrawTextFlags(\n    DWORD dwMask,  \n    DWORD dwDTFlags);\n```  \n  \n### Parameters  \n `dwMask`  \n A combination of one or more of the DT_ flags, specified in the Win32 function [DrawText](http://msdn.microsoft.com/library/windows/desktop/dd162498), that indicates which bits in `dwDTFlags` will be used when drawing the text.  \n  \n `dwDTFlags`  \n A combination of one or more of the DT_ flags, specified in the Win32 function `DrawText`, that indicate how the button text will be drawn. This value is passed to `DrawText` when the button text is drawn.  \n  \n### Return Value  \n A `DWORD` containing the previous text drawing flags.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [TB_SETDRAWTEXTFLAGS](http://msdn.microsoft.com/library/windows/desktop/bb787425), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. This member function sets the flags in the Win32 function `DrawText`, which draws text in the specified rectangle, formatted according to how the flags are set.  \n  \n##  <a name=\"ctoolbarctrl__setextendedstyle\"></a>  CToolBarCtrl::SetExtendedStyle  \n Sets the extended styles for a toolbar control.  \n  \n```  \nDWORD SetExtendedStyle(DWORD dwExStyle);\n```  \n  \n### Parameters  \n `dwExStyle`  \n A value specifying the new extended styles. This parameter can be a combination of the toolbar extended styles.  \n  \n### Return Value  \n A `DWORD` that represents the previous extended styles. For a list of styles, see [Toolbar Extended Styles](http://msdn.microsoft.com/library/windows/desktop/bb760430), in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [TB_SETEXTENDEDSTYLE](http://msdn.microsoft.com/library/windows/desktop/bb787427), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__sethotimagelist\"></a>  CToolBarCtrl::SetHotImageList  \n Sets the image list that the toolbar control will use to display \"hot\" buttons.  \n  \n```  \nCImageList* SetHotImageList(CImageList* pImageList);\n```  \n  \n### Parameters  \n `pImageList`  \n A pointer to a `CImageList` object containing the images to be used by the toolbar control to display hot button images.  \n  \n### Return Value  \n A pointer to a [CImageList](../../mfc/reference/cimagelist-class.md) object that was previously used by the toolbar control to display hot button images.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [TB_SETHOTIMAGELIST](http://msdn.microsoft.com/library/windows/desktop/bb787429), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n The MFC implementation of `SetHotImageList` uses a `CImageList` object containing the toolbar control's hot button images, rather than a handle to an image list. A hot button appears highlighted when the pointer is above it.  \n  \n##  <a name=\"ctoolbarctrl__sethotitem\"></a>  CToolBarCtrl::SetHotItem  \n Sets the hot item in a toolbar.  \n  \n```  \nint SetHotItem(int nHot);\n```  \n  \n### Parameters  \n *nHot*  \n The zero-based index number of the item that will be made hot. If this value is -1, none of the items will be hot.  \n  \n### Return Value  \n The index of the previous hot item, or -1 if there was no hot item.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [TB_SETHOTITEM](http://msdn.microsoft.com/library/windows/desktop/bb787431), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__setimagelist\"></a>  CToolBarCtrl::SetImageList  \n Sets the image list that the toolbar will use to display buttons that are in their default state.  \n  \n```  \nCImageList* SetImageList(CImageList* pImageList);\n```  \n  \n### Parameters  \n `pImageList`  \n A pointer to a `CImageList` object containing the images to be used by the toolbar control to display button images in their default state.  \n  \n### Return Value  \n A pointer to a [CImageList](../../mfc/reference/cimagelist-class.md) object that was previously used by the toolbar control to display button images in their default state.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [TB_SETIMAGELIST](http://msdn.microsoft.com/library/windows/desktop/bb787433), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n The MFC implementation of `SetImageList` uses a `CImageList` object containing the toolbar control's button images, rather than a handle to an image list.  \n  \n##  <a name=\"ctoolbarctrl__setindent\"></a>  CToolBarCtrl::SetIndent  \n Sets the indentation for the first button in a toolbar control.  \n  \n```  \nBOOL SetIndent(int iIndent);\n```  \n  \n### Parameters  \n *iIndent*  \n The value specifying the indentation, in pixels.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n##  <a name=\"ctoolbarctrl__setinsertmark\"></a>  CToolBarCtrl::SetInsertMark  \n Sets the current insertion mark for the toolbar.  \n  \n```  \nvoid SetInsertMark(TBINSERTMARK* ptbim);\n```  \n  \n### Parameters  \n `ptbim`  \n A pointer to the [TBINSERTMARK](http://msdn.microsoft.com/library/windows/desktop/bb760480) structure that contains the insertion mark.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [TB_SETINSERTMARK](http://msdn.microsoft.com/library/windows/desktop/bb787437), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__setinsertmarkcolor\"></a>  CToolBarCtrl::SetInsertMarkColor  \n Sets the color used to draw the insertion mark for the toolbar.  \n  \n```  \nCOLORREF SetInsertMarkColor(COLORREF clrNew);\n```  \n  \n### Parameters  \n `clrNew`  \n A **COLORREF** value that contains the new insertion mark color.  \n  \n### Return Value  \n A **COLORREF** value that contains the previous insertion mark color.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [TB_SETINSERTMARKCOLOR](http://msdn.microsoft.com/library/windows/desktop/bb787439), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__setmaxtextrows\"></a>  CToolBarCtrl::SetMaxTextRows  \n Sets the maximum number of text rows displayed on a toolbar button.  \n  \n```  \nBOOL SetMaxTextRows(int iMaxRows);\n```  \n  \n### Parameters  \n *iMaxRows*  \n Maximum number of rows to be set.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n##  <a name=\"ctoolbarctrl__setmetrics\"></a>  CToolBarCtrl::SetMetrics  \n Sets the metrics of the `CToolBarCtrl` object.  \n  \n```  \nvoid SetMetrics(LPTBMETRICS ptbm);\n```  \n  \n### Parameters  \n `ptbm`  \n A pointer to the [TBMETRICS](http://msdn.microsoft.com/library/windows/desktop/bb760482) structure of the `CToolBarCtrl` object.  \n  \n### Remarks  \n This member function emulates the functionality of the [TB_SETMETRICS](http://msdn.microsoft.com/library/windows/desktop/bb787446) message, as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__setowner\"></a>  CToolBarCtrl::SetOwner  \n Sets the owner window for the toolbar control.  \n  \n```  \nvoid SetOwner(CWnd* pWnd);\n```  \n  \n### Parameters  \n `pWnd`  \n Pointer to the `CWnd` or `CWnd`-derived object that will be the new owner window for the toolbar control.  \n  \n### Remarks  \n The owner window is the window that receives notifications from the toolbar.  \n  \n##  <a name=\"ctoolbarctrl__setpadding\"></a>  CToolBarCtrl::SetPadding  \n Sets the horizontal and vertical padding of the current toolbar control.  \n  \n```  \nDWORD SetPadding(\n    int nHorzPadding,   \n    int nVertPadding);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `nHorzPadding`|Specifies the horizontal padding of the toolbar control, in pixels.|  \n|[in] `nVertPadding`|Specifies the vertical padding of the toolbar control, in pixels.|  \n  \n### Return Value  \n A `DWORD` whose low word contains the previous horizontal padding value, and whose high word contains the previous vertical padding value. The padding values are measured in pixels.  \n  \n### Remarks  \n This method sends the [TB_SETPADDING](http://msdn.microsoft.com/library/windows/desktop/bb787448) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n The following code example sets the horizontal and vertical padding of the current toolbar control to 20 pixels.  \n  \n [!code-cpp[NVC_MFC_CToolBarCtrl_s1#4](../../mfc/reference/codesnippet/cpp/ctoolbarctrl-class_6.cpp)]  \n  \n##  <a name=\"ctoolbarctrl__setpressedimagelist\"></a>  CToolBarCtrl::SetPressedImageList  \n Sets the image list that the current toolbar control uses to represent buttons in the pressed state.  \n  \n```  \nCImagelist* SetPressedImageList(\n    int iImageID,   \n    CImageList* pImageList);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `iImageID`|The zero-based index of the image list. Set this parameter to zero if you use only one image list.|  \n|[in] `pImageList`|Pointer to a [CImageList](../../mfc/reference/cimagelist-class.md) that contains the new image list.|  \n  \n### Return Value  \n Pointer to a [CImageList](../../mfc/reference/cimagelist-class.md) that contains the previous image list for the current control, or `NULL` if no such image list was set.  \n  \n### Remarks  \n This method sends the [TB_SETPRESSEDIMAGELIST](http://msdn.microsoft.com/library/windows/desktop/bb787453) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n The following code example sets the pressed image list to be the same as the default image list.  \n  \n [!code-cpp[NVC_MFC_CToolBarCtrl_s1#5](../../mfc/reference/codesnippet/cpp/ctoolbarctrl-class_7.cpp)]  \n  \n##  <a name=\"ctoolbarctrl__setrows\"></a>  CToolBarCtrl::SetRows  \n Asks the toolbar control to resize itself to the requested number of rows.  \n  \n```  \nvoid SetRows(\n    int nRows,  \n    BOOL bLarger,  \n    LPRECT lpRect);\n```  \n  \n### Parameters  \n `nRows`  \n Requested number of rows.  \n  \n `bLarger`  \n Tells whether to use more rows or fewer rows if the toolbar cannot be resized to the requested number of rows.  \n  \n `lpRect`  \n Points to the [CRect](../../atl-mfc-shared/reference/crect-class.md) object or [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure that will receive the new bounding rectangle of the toolbar.  \n  \n### Remarks  \n If the toolbar cannot resize itself to the requested number or rows, it will resize itself to either the next larger or next smaller valid size, depending on the value of `bLarger`. If `bLarger` is **TRUE**, the new number of rows will be larger than the number requested. If `bLarger` is **FALSE**, the new number of rows will be smaller than the number requested.  \n  \n A given number of rows is valid for the toolbar if the buttons can be arranged such that all of the rows have the same number of buttons (except perhaps the last row). For example, a toolbar that contains four buttons could not be sized to three rows because the last two rows would have to be shorter. If you attempted to size it to three rows, you would get four rows if `bLarger` was **TRUE** and two rows if `bLarger` was **FALSE**.  \n  \n If there are separators in the toolbar, the rules for when a given number of rows is valid are more complicated. The layout is computed such that button groups (buttons with a separator before the first and the last button in the group) are never broken up on several rows unless the group cannot fit on one row.  \n  \n If a group does not fit on one row, the next group will start on the next row even if it would fit on the row where the large group ended. The purpose of this rule is to make the separation between large groups more noticeable. The resulting vertical separators are counted as rows.  \n  \n Note also that the `SetRows` member function will always chose the layout that results in the smallest toolbar size. Creating a toolbar with the `TBSTYLE_WRAPABLE` style and then resizing the control will simply apply the method outlined above given the width of the control.  \n  \n This function can only be called for toolbars that were created with the `TBSTYLE_WRAPABLE` style.  \n  \n##  <a name=\"ctoolbarctrl__setstate\"></a>  CToolBarCtrl::SetState  \n Sets the state for the specified button in a toolbar control.  \n  \n```  \nBOOL SetState(\n    int nID,  \n    UINT nState);\n```  \n  \n### Parameters  \n `nID`  \n Command identifier of the button.  \n  \n `nState`  \n State flags. It can be a combination of the values listed for button states in [CToolBarCtrl::AddButtons](#ctoolbarctrl__addbuttons).  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n This function is especially handy if you want to set more than one of the button states. To just set one state, use one of the following member functions: [EnableButton](#ctoolbarctrl__enablebutton), [CheckButton](#ctoolbarctrl__checkbutton), [HideButton](#ctoolbarctrl__hidebutton), [Indeterminate](#ctoolbarctrl__indeterminate), or [PressButton](#ctoolbarctrl__pressbutton).  \n  \n##  <a name=\"ctoolbarctrl__setstyle\"></a>  CToolBarCtrl::SetStyle  \n Sets the styles for a toolbar control.  \n  \n```  \nvoid SetStyle(DWORD dwStyle);\n```  \n  \n### Parameters  \n `dwStyle`  \n A `DWORD` containing a combination of [toolbar control styles](http://msdn.microsoft.com/library/windows/desktop/bb760439), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctoolbarctrl__settooltips\"></a>  CToolBarCtrl::SetToolTips  \n Associates a tool tip control with a toolbar control.  \n  \n```  \nvoid SetToolTips(CToolTipCtrl* pTip);\n```  \n  \n### Parameters  \n *pTip*  \n Pointer to the [CToolTipCtrl](../../mfc/reference/ctooltipctrl-class.md) object.  \n  \n##  <a name=\"ctoolbarctrl__setwindowtheme\"></a>  CToolBarCtrl::SetWindowTheme  \n Sets the visual style of the `CToolBarCtrl` object.  \n  \n```  \nHRESULT SetWindowTheme(LPCWSTR pszSubAppName);\n```  \n  \n### Parameters  \n `pszSubAppName`  \n A pointer to a Unicode string that contains the toolbar visual style to set.  \n  \n### Return Value  \n The return value is not used.  \n  \n### Remarks  \n This member function emulates the functionality of the [TB_SETWINDOWTHEME](http://msdn.microsoft.com/library/windows/desktop/bb787465) message, as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n## See Also  \n [MFC Sample CMNCTRL1](../../visual-cpp-samples.md)   \n [MFC Sample MFCIE](../../visual-cpp-samples.md)   \n [CWnd Class](../../mfc/reference/cwnd-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CToolBar Class](../../mfc/reference/ctoolbar-class.md)\n"}