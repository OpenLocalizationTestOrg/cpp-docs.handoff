{"nodes":[{"pos":[12,54],"content":"Secure Template Overloads | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Secure Template Overloads | Microsoft Docs","pos":[0,42]}]},{"content":"Secure Template Overloads","pos":[895,920]},{"content":"Many CRT functions have been deprecated in favor of newer, security-enhanced versions (for example, <ph id=\"ph1\">`strcpy_s`</ph> is the more secure replacement for <ph id=\"ph2\">`strcpy`</ph>).","pos":[921,1077],"source":"Many CRT functions have been deprecated in favor of newer, security-enhanced versions (for example, `strcpy_s` is the more secure replacement for `strcpy`)."},{"content":"The CRT provides template overloads to help ease the transition to the more secure variants.","pos":[1078,1170]},{"pos":[1177,1251],"content":"For example, this code generates a warning because <ph id=\"ph1\">`strcpy`</ph> is deprecated:","source":"For example, this code generates a warning because `strcpy` is deprecated:"},{"content":"You can ignore the warning.","pos":[1336,1363]},{"content":"Define the symbol <ph id=\"ph1\">`_CRT_SECURE_NO_WARNINGS`</ph> to suppress the warning, or update the code to use <ph id=\"ph2\">`strcpy_s`</ph>:","pos":[1364,1470],"source":" Define the symbol `_CRT_SECURE_NO_WARNINGS` to suppress the warning, or update the code to use `strcpy_s`:"},{"content":"The template overloads provide additional choices.","pos":[1571,1621]},{"content":"Defining <ph id=\"ph1\">`_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES`</ph> to 1 enables template overloads of standard CRT functions that call the more secure variants automatically.","pos":[1622,1780],"source":" Defining `_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES` to 1 enables template overloads of standard CRT functions that call the more secure variants automatically."},{"content":"If <ph id=\"ph1\">`_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES`</ph> is 1, then no changes to the code are necessary.","pos":[1781,1874],"source":" If `_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES` is 1, then no changes to the code are necessary."},{"content":"Behind the scenes, the call to <ph id=\"ph1\">`strcpy`</ph> will be changed to a call to <ph id=\"ph2\">`strcpy_s`</ph> with the size argument supplied automatically.","pos":[1875,2001],"source":" Behind the scenes, the call to `strcpy` will be changed to a call to `strcpy_s` with the size argument supplied automatically."},{"content":"does not affect the functions that take a count, such as <ph id=\"ph1\">`strncpy`</ph>.","pos":[2210,2277],"source":" does not affect the functions that take a count, such as `strncpy`."},{"content":"To enable template overloads for the count functions, define <ph id=\"ph1\">`_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT`</ph> to 1.","pos":[2278,2392],"source":" To enable template overloads for the count functions, define `_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT` to 1."},{"content":"Before doing so, however, make sure that your code passes the count of characters, not the size of the buffer (a common mistake).","pos":[2393,2522]},{"content":"Also, code that explicitly writes a null terminator at the end of the buffer after the function call is unnecessary if the secure variant is called.","pos":[2523,2671]},{"content":"If you need truncation behavior, see <bpt id=\"p1\">[</bpt>_TRUNCATE<ept id=\"p1\">](../c-runtime-library/truncate.md)</ept>.","pos":[2672,2755],"source":" If you need truncation behavior, see [_TRUNCATE](../c-runtime-library/truncate.md)."},{"pos":[2763,3096],"content":"[!NOTE]\n The macro `_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT` requires that `_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES` is also defined as 1. If `_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT` is defined as 1 and `_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES` is defined as 0, the application will not perform any template overloads.","leadings":["","> "],"nodes":[{"content":" The macro `_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT` requires that `_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES` is also defined as 1. If `_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT` is defined as 1 and `_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES` is defined as 0, the application will not perform any template overloads.","pos":[8,331],"nodes":[{"content":"The macro <ph id=\"ph1\">`_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT`</ph> requires that <ph id=\"ph2\">`_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES`</ph> is also defined as 1.","pos":[1,136],"source":" The macro `_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT` requires that `_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES` is also defined as 1."},{"content":"If <ph id=\"ph1\">`_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT`</ph> is defined as 1 and <ph id=\"ph2\">`_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES`</ph> is defined as 0, the application will not perform any template overloads.","pos":[137,323],"source":" If `_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT` is defined as 1 and `_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES` is defined as 0, the application will not perform any template overloads."}]}]},{"content":"Defining <ph id=\"ph1\">`_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES`</ph> to 1 enables template overloads of the secure variants (names ending in \"_s\").","pos":[3103,3230],"source":"Defining `_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES` to 1 enables template overloads of the secure variants (names ending in \"_s\")."},{"content":"In this case, if <ph id=\"ph1\">`_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES`</ph> is 1, then one small change must be made to the original code:","pos":[3231,3350],"source":" In this case, if `_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES` is 1, then one small change must be made to the original code:"},{"content":"Only the name of the function needs to be changed (by adding \"_s\"); the template overload will take care of providing the size argument.","pos":[3517,3653]},{"pos":[3660,3864],"content":"By default, <ph id=\"ph1\">`_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES`</ph> and <ph id=\"ph2\">`_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT`</ph> are defined as 0 (disabled) and <ph id=\"ph3\">`_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES`</ph> is defined as 1 (enabled).","source":"By default, `_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES` and `_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT` are defined as 0 (disabled) and `_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES` is defined as 1 (enabled)."},{"content":"Note that these template overloads only work for static arrays.","pos":[3871,3934]},{"content":"Dynamically allocated buffers require additional source code changes.","pos":[3935,4004]},{"content":"Revisiting the above examples:","pos":[4005,4035]},{"content":"And this:","pos":[4263,4272]},{"content":"See Also","pos":[4501,4509]},{"content":"Security Features in the CRT","pos":[4514,4542]},{"content":"CRT Library Features","pos":[4603,4623]}],"content":"---\ntitle: \"Secure Template Overloads | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES\"\n  - \"_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES\"\n  - \"_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES\"\n  - \"_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES\"\n  - \"_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT\"\n  - \"secure template overloads\"\nms.assetid: 562741d0-39c0-485e-8529-73d740f29f8f\ncaps.latest.revision: 13\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Secure Template Overloads\nMany CRT functions have been deprecated in favor of newer, security-enhanced versions (for example, `strcpy_s` is the more secure replacement for `strcpy`). The CRT provides template overloads to help ease the transition to the more secure variants.  \n  \n For example, this code generates a warning because `strcpy` is deprecated:  \n  \n `char szBuf[10];`  \n  \n `strcpy(szBuf, \"test\"); // warning: deprecated`  \n  \n You can ignore the warning. Define the symbol `_CRT_SECURE_NO_WARNINGS` to suppress the warning, or update the code to use `strcpy_s`:  \n  \n `char szBuf[10];`  \n  \n `strcpy_s(szBuf, 10, \"test\"); // security-enhanced _s function`  \n  \n The template overloads provide additional choices. Defining `_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES` to 1 enables template overloads of standard CRT functions that call the more secure variants automatically. If `_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES` is 1, then no changes to the code are necessary. Behind the scenes, the call to `strcpy` will be changed to a call to `strcpy_s` with the size argument supplied automatically.  \n  \n `#define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES 1`  \n  \n `...`  \n  \n `char szBuf[10];`  \n  \n `strcpy(szBuf, \"test\"); // ==> strcpy_s(szBuf, 10, \"test\")`  \n  \n `_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES` does not affect the functions that take a count, such as `strncpy`. To enable template overloads for the count functions, define `_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT` to 1. Before doing so, however, make sure that your code passes the count of characters, not the size of the buffer (a common mistake). Also, code that explicitly writes a null terminator at the end of the buffer after the function call is unnecessary if the secure variant is called. If you need truncation behavior, see [_TRUNCATE](../c-runtime-library/truncate.md).  \n  \n> [!NOTE]\n>  The macro `_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT` requires that `_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES` is also defined as 1. If `_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT` is defined as 1 and `_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES` is defined as 0, the application will not perform any template overloads.  \n  \n Defining `_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES` to 1 enables template overloads of the secure variants (names ending in \"_s\"). In this case, if `_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES` is 1, then one small change must be made to the original code:  \n  \n `#define _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES 1`  \n  \n `...`  \n  \n `char szBuf[10];`  \n  \n `strcpy_s(szBuf, \"test\"); // ==> strcpy_s(szBuf, 10, \"test\")`  \n  \n Only the name of the function needs to be changed (by adding \"_s\"); the template overload will take care of providing the size argument.  \n  \n By default, `_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES` and `_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT` are defined as 0 (disabled) and `_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES` is defined as 1 (enabled).  \n  \n Note that these template overloads only work for static arrays. Dynamically allocated buffers require additional source code changes. Revisiting the above examples:  \n  \n `#define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES 1`  \n  \n `...`  \n  \n `char *szBuf = (char*)malloc(10);`  \n  \n `strcpy(szBuf, \"test\"); // still deprecated; have to change to`  \n  \n `// strcpy_s(szBuf, 10, \"test\");`  \n  \n And this:  \n  \n `#define _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES 1`  \n  \n `...`  \n  \n `char *szBuf = (char*)malloc(10);`  \n  \n `strcpy_s(szBuf, \"test\"); // doesn't compile; have to change to`  \n  \n `// strcpy_s(szBuf, 10, \"test\");`  \n  \n## See Also  \n [Security Features in the CRT](../c-runtime-library/security-features-in-the-crt.md)   \n [CRT Library Features](../c-runtime-library/crt-library-features.md)"}