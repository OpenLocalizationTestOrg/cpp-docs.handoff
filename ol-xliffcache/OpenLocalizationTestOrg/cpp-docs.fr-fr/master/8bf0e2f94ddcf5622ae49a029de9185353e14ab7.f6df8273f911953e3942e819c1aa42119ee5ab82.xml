{"nodes":[{"pos":[12,44],"content":"_execl, _wexecl | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_execl, _wexecl | Microsoft Docs","pos":[0,32]}]},{"content":"_execl, _wexecl","pos":[1019,1034]},{"content":"Loads and executes new child processes.","pos":[1035,1074]},{"pos":[1082,1302],"content":"[!IMPORTANT]\n This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[13,218],"nodes":[{"content":"This API cannot be used in applications that execute in the Windows Runtime.","pos":[1,77]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[78,205],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"content":"Syntax","pos":[1311,1317]},{"content":"Parameters","pos":[1576,1586]},{"content":"Path of the file to be executed.","pos":[1603,1635]},{"content":",","pos":[1648,1649]},{"content":"List of pointers to the parameters.","pos":[1665,1700]},{"content":"Return Value","pos":[1709,1721]},{"content":"If successful, these functions do not return to the calling process.","pos":[1725,1793]},{"content":"A return value of –1 indicates an error, in which case the <ph id=\"ph1\">`errno`</ph> global variable is set.","pos":[1794,1884],"source":" A return value of –1 indicates an error, in which case the `errno` global variable is set."},{"content":"errno value","pos":[1891,1902]},{"content":"Description","pos":[1903,1914]},{"content":"The space required for the arguments and environment settings exceeds 32 KB.","pos":[1967,2043]},{"content":"The specified file has a locking or sharing violation.","pos":[2057,2111]},{"content":"Invalid parameter (one or more of the parameters was a null pointer or empty string).","pos":[2125,2210]},{"content":"Too many files open (the specified file must be opened to determine whether it is executable).","pos":[2224,2318]},{"content":"The file or path is not found.","pos":[2332,2362]},{"content":"The specified file is not executable or has an invalid executable-file format.","pos":[2377,2455]},{"content":"Not enough memory is available to execute the new process; the available memory has been corrupted; or an invalid block exists, indicating that the calling process was not allocated properly.","pos":[2469,2660]},{"content":"Remarks","pos":[2670,2677]},{"content":"Each of these functions loads and executes a new process, passing each command-line argument as a separate parameter.","pos":[2681,2798]},{"content":"The first argument is the command or executable file name, and the second argument should be the same as the first.","pos":[2799,2914]},{"content":"It becomes <ph id=\"ph1\">`argv[0]`</ph> in the executed process.","pos":[2915,2960],"source":" It becomes `argv[0]` in the executed process."},{"content":"The third argument is the first argument, <ph id=\"ph1\">`argv[1]`</ph>, of the process being executed.","pos":[2961,3044],"source":" The third argument is the first argument, `argv[1]`, of the process being executed."},{"content":"The <ph id=\"ph1\">`_execl`</ph> functions validate their parameters.","pos":[3051,3100],"source":"The `_execl` functions validate their parameters."},{"content":"If either <ph id=\"ph1\">`cmdname`</ph> or <ph id=\"ph2\">`arg0`</ph> is a null pointer or empty string, these functions invoke the invalid parameter handler as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept> If execution is allowed to continue, these functions set <ph id=\"ph3\">`errno`</ph> to <ph id=\"ph4\">`EINVAL`</ph> and return -1.","pos":[3101,3398],"source":" If either `cmdname` or `arg0` is a null pointer or empty string, these functions invoke the invalid parameter handler as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md) If execution is allowed to continue, these functions set `errno` to `EINVAL` and return -1."},{"content":"No new process is executed.","pos":[3399,3426]},{"content":"Requirements","pos":[3435,3447]},{"content":"Function","pos":[3454,3462]},{"content":"Required header","pos":[3463,3478]},{"content":"Optional header","pos":[3479,3494]},{"content":"process.h&gt;","pos":[3573,3583],"source":"process.h>"},{"content":"errno.h&gt;","pos":[3586,3594],"source":"errno.h>"},{"content":"process.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[3611,3635],"source":"process.h> or \\<wchar.h>"},{"content":"errno.h&gt;","pos":[3638,3646],"source":"errno.h>"},{"pos":[3654,3752],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"Example","pos":[3761,3768]},{"pos":[3772,3866],"content":"See the example in <bpt id=\"p1\">[</bpt>_exec, _wexec Functions<ept id=\"p1\">](../../c-runtime-library/exec-wexec-functions.md)</ept>.","source":"See the example in [_exec, _wexec Functions](../../c-runtime-library/exec-wexec-functions.md)."},{"content":".NET Framework Equivalent","pos":[3875,3900]},{"content":"System::Diagnostics::Process Class","pos":[3911,3945]},{"content":"System::Diagnostics::ProcessStartInfo Class","pos":[4031,4074]},{"content":"See Also","pos":[4167,4175]},{"content":"Process and Environment Control","pos":[4180,4211]},{"content":"_exec, _wexec Functions","pos":[4278,4301]},{"content":"abort","pos":[4357,4362]},{"content":"atexit","pos":[4413,4419]},{"content":"exit, _Exit, _exit","pos":[4471,4489]},{"content":"_onexit, _onexit_m","pos":[4549,4567]},{"content":"_spawn, _wspawn Functions","pos":[4628,4653]},{"content":"system, _wsystem","pos":[4711,4727]}],"content":"---\ntitle: \"_execl, _wexecl | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_execl\"\n  - \"_wexecl\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-process-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_execl\"\n  - \"_wexecl\"\n  - \"wexecl\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_execl function\"\n  - \"wexecl function\"\n  - \"_wexecl function\"\n  - \"execl function\"\nms.assetid: 81fefb8a-0a06-4221-b2bc-be18e38e89f4\ncaps.latest.revision: 23\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _execl, _wexecl\nLoads and executes new child processes.  \n  \n> [!IMPORTANT]\n>  This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \nintptr_t _execl(   \n   const char *cmdname,  \n   const char *arg0,  \n   ... const char *argn,  \n   NULL   \n);  \nintptr_t _wexecl(  \n   const wchar_t *cmdname,  \n   const wchar_t *arg0,  \n   ... const wchar_t *argn,  \n   NULL   \n);  \n```  \n  \n#### Parameters  \n `cmdname`  \n Path of the file to be executed.  \n  \n `arg0`, `...``argn`  \n List of pointers to the parameters.  \n  \n## Return Value  \n If successful, these functions do not return to the calling process. A return value of –1 indicates an error, in which case the `errno` global variable is set.  \n  \n|errno value|Description|  \n|-----------------|-----------------|  \n|`E2BIG`|The space required for the arguments and environment settings exceeds 32 KB.|  \n|`EACCES`|The specified file has a locking or sharing violation.|  \n|`EINVAL`|Invalid parameter (one or more of the parameters was a null pointer or empty string).|  \n|`EMFILE`|Too many files open (the specified file must be opened to determine whether it is executable).|  \n|`ENOENT`|The file or path is not found.|  \n|`ENOEXEC`|The specified file is not executable or has an invalid executable-file format.|  \n|`ENOMEM`|Not enough memory is available to execute the new process; the available memory has been corrupted; or an invalid block exists, indicating that the calling process was not allocated properly.|  \n  \n## Remarks  \n Each of these functions loads and executes a new process, passing each command-line argument as a separate parameter. The first argument is the command or executable file name, and the second argument should be the same as the first. It becomes `argv[0]` in the executed process. The third argument is the first argument, `argv[1]`, of the process being executed.  \n  \n The `_execl` functions validate their parameters. If either `cmdname` or `arg0` is a null pointer or empty string, these functions invoke the invalid parameter handler as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md) If execution is allowed to continue, these functions set `errno` to `EINVAL` and return -1. No new process is executed.  \n  \n## Requirements  \n  \n|Function|Required header|Optional header|  \n|--------------|---------------------|---------------------|  \n|`_execl`|\\<process.h>|\\<errno.h>|  \n|`_wexecl`|\\<process.h> or \\<wchar.h>|\\<errno.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n See the example in [_exec, _wexec Functions](../../c-runtime-library/exec-wexec-functions.md).  \n  \n## .NET Framework Equivalent  \n  \n-   [System::Diagnostics::Process Class](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)  \n  \n-   [System::Diagnostics::ProcessStartInfo Class](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)  \n  \n## See Also  \n [Process and Environment Control](../../c-runtime-library/process-and-environment-control.md)   \n [_exec, _wexec Functions](../../c-runtime-library/exec-wexec-functions.md)   \n [abort](../../c-runtime-library/reference/abort.md)   \n [atexit](../../c-runtime-library/reference/atexit.md)   \n [exit, _Exit, _exit](../../c-runtime-library/reference/exit-exit-exit.md)   \n [_onexit, _onexit_m](../../c-runtime-library/reference/onexit-onexit-m.md)   \n [_spawn, _wspawn Functions](../../c-runtime-library/spawn-wspawn-functions.md)   \n [system, _wsystem](../../c-runtime-library/reference/system-wsystem.md)"}