{"nodes":[{"pos":[12,43],"content":"max_none Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"max_none Class | Microsoft Docs","pos":[0,31]}]},{"pos":[675,689],"content":"max_none Class","linkify":"max_none Class","nodes":[{"content":"max_none Class","pos":[0,14]}]},{"pos":[690,862],"content":"Describes a <bpt id=\"p1\">[</bpt>max class<ept id=\"p1\">](../standard-library/allocators-header.md)</ept> object that limits a <bpt id=\"p2\">[</bpt>freelist<ept id=\"p2\">](../standard-library/freelist-class.md)</ept> object to a maximum length of zero.","source":"Describes a [max class](../standard-library/allocators-header.md) object that limits a [freelist](../standard-library/freelist-class.md) object to a maximum length of zero."},{"pos":[871,877],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[945,955],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[962,971]},{"content":"Description","pos":[972,983]},{"pos":[1032,1120],"content":"The max class that determines the maximum number of elements to store in the <ph id=\"ph1\">`freelist`</ph>.","source":"The max class that determines the maximum number of elements to store in the `freelist`."},{"pos":[1131,1147],"content":"Member Functions","linkify":"Member Functions","nodes":[{"content":"Member Functions","pos":[0,16]}]},{"pos":[1168,1201],"content":"<bpt id=\"p1\">[</bpt>allocated<ept id=\"p1\">](#max_none__allocated)</ept>","source":"[allocated](#max_none__allocated)"},{"content":"Increments the count of allocated memory blocks.","pos":[1202,1250]},{"pos":[1255,1292],"content":"<bpt id=\"p1\">[</bpt>deallocated<ept id=\"p1\">](#max_none__deallocated)</ept>","source":"[deallocated](#max_none__deallocated)"},{"content":"Decrements the count of allocated memory blocks.","pos":[1293,1341]},{"pos":[1346,1369],"content":"<bpt id=\"p1\">[</bpt>full<ept id=\"p1\">](#max_none__full)</ept>","source":"[full](#max_none__full)"},{"content":"Returns a value that specifies whether more memory blocks should be added to the free list.","pos":[1370,1461]},{"pos":[1466,1497],"content":"<bpt id=\"p1\">[</bpt>released<ept id=\"p1\">](#max_none__released)</ept>","source":"[released](#max_none__released)"},{"content":"Decrements the count of memory blocks on the free list.","pos":[1498,1553]},{"pos":[1558,1583],"content":"<bpt id=\"p1\">[</bpt>saved<ept id=\"p1\">](#max_none__saved)</ept>","source":"[saved](#max_none__saved)"},{"content":"Increments the count of memory blocks on the free list.","pos":[1584,1639]},{"pos":[1649,1661],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1665,1690],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>allocators&gt;","source":"**Header:** \\<allocators>"},{"pos":[1697,1718],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> stdext","source":"**Namespace:** stdext"},{"pos":[1728,1783],"content":"<bpt id=\"p1\">&lt;a name=\"max_none__allocated\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  max_none::allocated","linkify":"<a name=\"max_none__allocated\"></a>  max_none::allocated","source":"<a name=\"max_none__allocated\"></a>  max_none::allocated"},{"content":"Increments the count of allocated memory blocks.","pos":[1787,1835]},{"pos":[1895,1905],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[1912,1921]},{"content":"Description","pos":[1922,1933]},{"content":"The increment value.","pos":[1982,2002]},{"pos":[2013,2020],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This member function does nothing.","pos":[2024,2058]},{"content":"It is called after each successful call by <ph id=\"ph1\">`cache_freelist::allocate`</ph> to operator <ph id=\"ph2\">`new`</ph>.","pos":[2059,2147],"source":" It is called after each successful call by `cache_freelist::allocate` to operator `new`."},{"content":"The argument <ph id=\"ph1\">`_Nx`</ph> is the number of memory blocks in the chunk allocated by operator <ph id=\"ph2\">`new`</ph>.","pos":[2148,2239],"source":" The argument `_Nx` is the number of memory blocks in the chunk allocated by operator `new`."},{"pos":[2249,2308],"content":"<bpt id=\"p1\">&lt;a name=\"max_none__deallocated\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  max_none::deallocated","linkify":"<a name=\"max_none__deallocated\"></a>  max_none::deallocated","source":"<a name=\"max_none__deallocated\"></a>  max_none::deallocated"},{"content":"Decrements the count of allocated memory blocks.","pos":[2312,2360]},{"pos":[2422,2432],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[2439,2448]},{"content":"Description","pos":[2449,2460]},{"content":"The increment value.","pos":[2509,2529]},{"pos":[2540,2547],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The member function does nothing.","pos":[2551,2584]},{"content":"This member function is called after each call by <ph id=\"ph1\">`cache_freelist::deallocate`</ph> to operator <ph id=\"ph2\">`delete`</ph>.","pos":[2585,2685],"source":" This member function is called after each call by `cache_freelist::deallocate` to operator `delete`."},{"content":"The argument <ph id=\"ph1\">`_Nx`</ph> is the number of memory blocks in the chunk deallocated by operator <ph id=\"ph2\">`delete`</ph>.","pos":[2686,2782],"source":" The argument `_Nx` is the number of memory blocks in the chunk deallocated by operator `delete`."},{"pos":[2792,2837],"content":"<bpt id=\"p1\">&lt;a name=\"max_none__full\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  max_none::full","linkify":"<a name=\"max_none__full\"></a>  max_none::full","source":"<a name=\"max_none__full\"></a>  max_none::full"},{"content":"Returns a value that specifies whether more memory blocks should be added to the free list.","pos":[2841,2932]},{"pos":[2968,2980],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2984,3027],"content":"This member function always returns <ph id=\"ph1\">`true`</ph>.","source":"This member function always returns `true`."},{"pos":[3037,3044],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This member function is called by <ph id=\"ph1\">`cache_freelist::deallocate`</ph>.","pos":[3048,3111],"source":"This member function is called by `cache_freelist::deallocate`."},{"content":"If the call returns <ph id=\"ph1\">`true`</ph>, <ph id=\"ph2\">`deallocate`</ph> puts the memory block on the free list; if it returns false, <ph id=\"ph3\">`deallocate`</ph> calls operator <ph id=\"ph4\">`delete`</ph> to deallocate the block.","pos":[3112,3275],"source":" If the call returns `true`, `deallocate` puts the memory block on the free list; if it returns false, `deallocate` calls operator `delete` to deallocate the block."},{"pos":[3285,3338],"content":"<bpt id=\"p1\">&lt;a name=\"max_none__released\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  max_none::released","linkify":"<a name=\"max_none__released\"></a>  max_none::released","source":"<a name=\"max_none__released\"></a>  max_none::released"},{"content":"Decrements the count of memory blocks on the free list.","pos":[3342,3397]},{"pos":[3437,3444],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This member function does nothing.","pos":[3448,3482]},{"content":"The <ph id=\"ph1\">`released`</ph> member function of the current max class is called by <ph id=\"ph2\">`cache_freelist::allocate`</ph> whenever it removes a memory block from the free list.","pos":[3483,3633],"source":" The `released` member function of the current max class is called by `cache_freelist::allocate` whenever it removes a memory block from the free list."},{"pos":[3643,3690],"content":"<bpt id=\"p1\">&lt;a name=\"max_none__saved\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  max_none::saved","linkify":"<a name=\"max_none__saved\"></a>  max_none::saved","source":"<a name=\"max_none__saved\"></a>  max_none::saved"},{"content":"Increments the count of memory blocks on the free list.","pos":[3694,3749]},{"pos":[3786,3793],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This member function does nothing.","pos":[3797,3831]},{"content":"It is called by <ph id=\"ph1\">`cache_freelist::deallocate`</ph> whenever it puts a memory block on the free list.","pos":[3832,3926],"source":" It is called by `cache_freelist::deallocate` whenever it puts a memory block on the free list."},{"pos":[3935,3943],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3947,4004],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>allocators&gt;<ept id=\"p1\">](../standard-library/allocators-header.md)</ept>","source":"[\\<allocators>](../standard-library/allocators-header.md)"}],"content":"---\ntitle: \"max_none Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"max_none\"\n  - \"stdext::max_none\"\n  - \"stdext.max_none\"\n  - \"allocators/stdext::max_none\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"max_none class\"\nms.assetid: 12ab5376-412e-479c-86dc-2c3d6a3559b6\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# max_none Class\nDescribes a [max class](../standard-library/allocators-header.md) object that limits a [freelist](../standard-library/freelist-class.md) object to a maximum length of zero.  \n  \n## Syntax  \n  \n```\ntemplate <std::size_t Max>  \nclass max_none\n```  \n  \n#### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`Max`|The max class that determines the maximum number of elements to store in the `freelist`.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[allocated](#max_none__allocated)|Increments the count of allocated memory blocks.|  \n|[deallocated](#max_none__deallocated)|Decrements the count of allocated memory blocks.|  \n|[full](#max_none__full)|Returns a value that specifies whether more memory blocks should be added to the free list.|  \n|[released](#max_none__released)|Decrements the count of memory blocks on the free list.|  \n|[saved](#max_none__saved)|Increments the count of memory blocks on the free list.|  \n  \n## Requirements  \n **Header:** \\<allocators>  \n  \n **Namespace:** stdext  \n  \n##  <a name=\"max_none__allocated\"></a>  max_none::allocated  \n Increments the count of allocated memory blocks.  \n  \n```\nvoid allocated(std::size_t _Nx = 1);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`_Nx`|The increment value.|  \n  \n### Remarks  \n This member function does nothing. It is called after each successful call by `cache_freelist::allocate` to operator `new`. The argument `_Nx` is the number of memory blocks in the chunk allocated by operator `new`.  \n  \n##  <a name=\"max_none__deallocated\"></a>  max_none::deallocated  \n Decrements the count of allocated memory blocks.  \n  \n```\nvoid deallocated(std::size_t _Nx = 1);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`_Nx`|The increment value.|  \n  \n### Remarks  \n The member function does nothing. This member function is called after each call by `cache_freelist::deallocate` to operator `delete`. The argument `_Nx` is the number of memory blocks in the chunk deallocated by operator `delete`.  \n  \n##  <a name=\"max_none__full\"></a>  max_none::full  \n Returns a value that specifies whether more memory blocks should be added to the free list.  \n  \n```\nbool full();\n```  \n  \n### Return Value  \n This member function always returns `true`.  \n  \n### Remarks  \n This member function is called by `cache_freelist::deallocate`. If the call returns `true`, `deallocate` puts the memory block on the free list; if it returns false, `deallocate` calls operator `delete` to deallocate the block.  \n  \n##  <a name=\"max_none__released\"></a>  max_none::released  \n Decrements the count of memory blocks on the free list.  \n  \n```\nvoid released();\n```  \n  \n### Remarks  \n This member function does nothing. The `released` member function of the current max class is called by `cache_freelist::allocate` whenever it removes a memory block from the free list.  \n  \n##  <a name=\"max_none__saved\"></a>  max_none::saved  \n Increments the count of memory blocks on the free list.  \n  \n```\nvoid saved();\n```  \n  \n### Remarks  \n This member function does nothing. It is called by `cache_freelist::deallocate` whenever it puts a memory block on the free list.  \n  \n## See Also  \n [\\<allocators>](../standard-library/allocators-header.md)\n\n\n\n"}