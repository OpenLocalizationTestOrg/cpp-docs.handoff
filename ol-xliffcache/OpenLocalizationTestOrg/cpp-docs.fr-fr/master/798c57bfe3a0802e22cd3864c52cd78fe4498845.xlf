<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">798c57bfe3a0802e22cd3864c52cd78fe4498845</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\clrcall.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">42b71df670026b25e487b8006b4ff39bc0702951</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1026a392c19698ff99604d1aace10f722b7aa41d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>__clrcall | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>__clrcall</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Specifies that a function can only be called from managed code.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`__clrcall`</ph> for all virtual functions that will only be called from managed code.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>However this calling convention cannot be used for functions that will be called from native code.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`__clrcall`</ph> to improve performance when calling from a managed function to a virtual managed function or from managed function to managed function through pointer.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Entry points are separate, compiler-generated functions.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If a function has both native and managed entry points, one of them will be the actual function with the function implementation.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The other function will be a separate function (a thunk) that calls into the actual function and lets the common language runtime perform PInvoke.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When marking a function as <ph id="ph1">`__clrcall`</ph>, you indicate the function implementation must be MSIL and that the native entry point function will not be generated.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When taking the address of a native function if <ph id="ph1">`__clrcall`</ph> is not specified, the compiler uses the native entry point.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>indicates that the function is managed and there is no need to go through the transition from managed to native.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In that case the compiler uses the managed entry point.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept> (not <bpt id="p2">**</bpt>/clr:pure<ept id="p2">**</ept> or <bpt id="p3">**</bpt>/clr:safe<ept id="p3">**</ept>) is used and <ph id="ph1">`__clrcall`</ph> is not used, taking the address of a function always returns the address of the native entry point function.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`__clrcall`</ph> is used, the native entry point function is not created, so you get the address of the managed function, not an entry point thunk function.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Double Thunking<ept id="p1">](../dotnet/double-thunking-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>/clr (Common Language Runtime Compilation)<ept id="p1">](../build/reference/clr-common-language-runtime-compilation.md)</ept> implies that all functions and function pointers are <ph id="ph1">`__clrcall`</ph> and the compiler will not permit a function inside the compiland to be marked anything other than <ph id="ph2">`__clrcall`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>/clr:pure<ept id="p1">**</ept> is used, <ph id="ph1">`__clrcall`</ph> can only be specified on function pointers and external declarations.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can directly call <ph id="ph1">`__clrcall`</ph> functions from existing C++ code that was compiled by using <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept> as long as that function has an MSIL implementation.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>functions cannot be called directly from functions that have inline asm and call CPU-specific intrinisics, for example, even if those functions are compiled with <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>function pointers are only meant to be used in the application domain in which they were created.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Instead of passing <ph id="ph1">`__clrcall`</ph> function pointers across application domains, use &lt;xref:System.CrossAppDomainDelegate&gt;.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Application Domains and Visual C++<ept id="p1">](../dotnet/application-domains-and-visual-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Note that when a function is declared with <ph id="ph1">`__clrcall`</ph>, code will be generated when needed; for example, when function is called.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following sample shows that you can define a function pointer, such that, you declare that the function pointer will only be invoked from managed code.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This allows the compiler to directly call the managed function and avoid the native entry point (double thunk issue).</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Argument Passing and Naming Conventions</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>