{"nodes":[{"pos":[12,57],"content":"bernoulli_distribution Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"bernoulli_distribution Class | Microsoft Docs","pos":[0,45]}]},{"content":"bernoulli_distribution Class","pos":[868,896]},{"content":"Generates a Bernoulli distribution.","pos":[897,932]},{"content":"Syntax","pos":[941,947]},{"content":"Remarks","pos":[1613,1620]},{"content":"The class describes a distribution that produces values of type <ph id=\"ph1\">`bool`</ph>, distributed according to the Bernoulli distribution discrete probability function.","pos":[1624,1778],"source":"The class describes a distribution that produces values of type `bool`, distributed according to the Bernoulli distribution discrete probability function."},{"content":"The following table links to articles about individual members.","pos":[1779,1842]},{"content":"bernoulli_distribution::bernoulli_distribution","pos":[1867,1913]},{"content":"bernoulli_distribution::param_type","pos":[2067,2101]},{"pos":[2147,2235],"content":"The property member <ph id=\"ph1\">`p()`</ph> returns the currently stored distribution parameter value <ph id=\"ph2\">`p`</ph>.","source":"The property member `p()` returns the currently stored distribution parameter value `p`."},{"pos":[2242,2356],"content":"For more information about distribution classes and their members, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","source":"For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md)."},{"pos":[2363,2557],"content":"For detailed information about the Bernoulli distribution discrete probability function, see the Wolfram MathWorld article <bpt id=\"p1\">[</bpt>Bernoulli Distribution<ept id=\"p1\">](http://go.microsoft.com/fwlink/LinkId=398467)</ept>.","source":"For detailed information about the Bernoulli distribution discrete probability function, see the Wolfram MathWorld article [Bernoulli Distribution](http://go.microsoft.com/fwlink/LinkId=398467)."},{"content":"Example","pos":[2566,2573]},{"content":"Output","pos":[3925,3931]},{"content":"Requirements","pos":[4301,4313]},{"pos":[4317,4338],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>random&gt;","source":"**Header:** \\<random>"},{"pos":[4345,4363],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[4436,4482],"content":"bernoulli_distribution::bernoulli_distribution"},{"content":"Constructs the distribution.","pos":[4486,4514]},{"content":"Parameters","pos":[4648,4658]},{"content":"The stored <ph id=\"ph1\">`p`</ph> distribution parameter.","pos":[4669,4707],"source":" The stored `p` distribution parameter."},{"content":"The parameter structure used to construct the distribution.","pos":[4724,4783]},{"content":"Remarks","pos":[4793,4800]},{"pos":[4806,4819],"content":"Precondition:"},{"pos":[4844,4930],"content":"The first constructor constructs an object whose stored <ph id=\"ph1\">`p`</ph> value holds the value <ph id=\"ph2\">`p`</ph>.","source":"The first constructor constructs an object whose stored `p` value holds the value `p`."},{"content":"The second constructor constructs an object whose stored parameters are initialized from <ph id=\"ph1\">`parm`</ph>.","pos":[4937,5033],"source":"The second constructor constructs an object whose stored parameters are initialized from `parm`."},{"content":"You can obtain and set the current parameters of an existing distribution by calling the <ph id=\"ph1\">`param()`</ph> member function.","pos":[5034,5149],"source":" You can obtain and set the current parameters of an existing distribution by calling the `param()` member function."},{"pos":[5156,5283],"content":"For more information and a code example, see <bpt id=\"p1\">[</bpt>binomial_distribution Class<ept id=\"p1\">](../standard-library/binomial-distribution-class.md)</ept>.","source":"For more information and a code example, see [binomial_distribution Class](../standard-library/binomial-distribution-class.md)."},{"pos":[5344,5378],"content":"bernoulli_distribution::param_type"},{"content":"Contains the parameters of the distribution.","pos":[5382,5426]},{"content":"struct param_type {","pos":[5432,5451]},{"content":"typedef bernoulli_distribution distribution_type;","pos":[5457,5506]},{"content":"param_type(double p = 0.5); double p() const; .....","pos":[5512,5569],"source":"   param_type(double p = 0.5);\n   double p() const;\n   ....."},{"content":"bool operator==(const param_type&amp; right) const; bool operator!=(const param_type&amp; right) const; };","pos":[5575,5679],"source":"   bool operator==(const param_type& right) const;\n   bool operator!=(const param_type& right) const;\n   };"},{"content":"Parameters","pos":[5689,5699]},{"pos":[5703,5804],"content":"See parent topic <bpt id=\"p1\">[</bpt>bernoulli_distribution Class<ept id=\"p1\">](../standard-library/bernoulli-distribution-class.md)</ept>.","source":"See parent topic [bernoulli_distribution Class](../standard-library/bernoulli-distribution-class.md)."},{"content":"Remarks","pos":[5814,5821]},{"pos":[5827,5840],"content":"Precondition:"},{"pos":[5865,6108],"content":"This structure can be passed to the distribution's class constructor at instantiation, to the <ph id=\"ph1\">`param()`</ph> member function to set the stored parameters of an existing distribution, and to <ph id=\"ph2\">`operator()`</ph> to be used in place of the stored parameters.","source":"This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters."},{"content":"See Also","pos":[6117,6125]},{"content":"random&gt;","pos":[6132,6139],"source":"random>"}],"content":"---\ntitle: \"bernoulli_distribution Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"tr1.bernoulli_distribution\"\n  - \"random/std::tr1::bernoulli_distribution\"\n  - \"std.tr1.bernoulli_distribution\"\n  - \"bernoulli_distribution\"\n  - \"tr1::bernoulli_distribution\"\n  - \"std::tr1::bernoulli_distribution\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"bernoulli_distribution class\"\n  - \"bernoulli_distribution class [TR1]\"\nms.assetid: 586bcde1-95ca-411a-bf17-4aaf19482f34\ncaps.latest.revision: 22\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# bernoulli_distribution Class\nGenerates a Bernoulli distribution.  \n  \n## Syntax  \n```  \nclass bernoulli_distribution  \n   {  \n   public:  \n// types  \n   typedef bool result_type;  \n   struct param_type;  \n// constructors and reset functions  \n   explicit bernoulli_distribution(double p = 0.5);\n   explicit bernoulli_distribution(const param_type& parm);\n   void reset();\n   // generating functions  \n   template <class URNG>  \n   result_type operator()(URNG& gen);\n   template <class URNG>  \n   result_type operator()(URNG& gen, const param_type& parm);\n   // property functions  \n   double p() const;\n   param_type param() const;\n   void param(const param_type& parm);\n   result_type min() const;\n   result_type max() const;\n   };  \n```\n  \n## Remarks  \n The class describes a distribution that produces values of type `bool`, distributed according to the Bernoulli distribution discrete probability function. The following table links to articles about individual members.  \n  \n||||  \n|-|-|-|  \n|[bernoulli_distribution::bernoulli_distribution](#bernoulli_distribution__bernoulli_distribution)|`bernoulli_distribution::p`|`bernoulli_distribution::param`|  \n|`bernoulli_distribution::operator()`||[bernoulli_distribution::param_type](#bernoulli_distribution__param_type)|  \n  \n The property member `p()` returns the currently stored distribution parameter value `p`.  \n  \n For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md).  \n  \n For detailed information about the Bernoulli distribution discrete probability function, see the Wolfram MathWorld article [Bernoulli Distribution](http://go.microsoft.com/fwlink/LinkId=398467).  \n  \n## Example  \n  \n```cpp  \n// compile with: /EHsc /W4  \n#include <random>   \n#include <iostream>  \n#include <iomanip>  \n#include <string>  \n#include <map>  \n  \nvoid test(const double p, const int s) {  \n  \n    // uncomment to use a non-deterministic seed  \n    //    std::random_device rd;  \n    //    std::mt19937 gen(rd());  \n    std::mt19937 gen(1729);  \n  \n    std::bernoulli_distribution distr(p);  \n  \n    std::cout << \"p == \" << distr.p() << std::endl;  \n  \n    // generate the distribution as a histogram  \n    std::map<bool, int> histogram;  \n    for (int i = 0; i < s; ++i) {  \n        ++histogram[distr(gen)];  \n    }  \n  \n    // print results  \n    std::cout << \"Histogram for \" << s << \" samples:\" << std::endl;  \n    for (const auto& elem : histogram) {  \n        std::cout << std::boolalpha << std::setw(5) << elem.first << ' ' << std::string(elem.second, ':') << std::endl;  \n    }  \n    std::cout << std::endl;  \n}  \n  \nint main()  \n{  \n    double p_dist = 0.5;  \n    int samples = 100;  \n  \n    std::cout << \"Use CTRL-Z to bypass data entry and run using default values.\" << std::endl;  \n    std::cout << \"Enter a double value for p distribution (where 0.0 <= p <= 1.0): \";  \n    std::cin >> p_dist;  \n    std::cout << \"Enter an integer value for a sample count: \";  \n    std::cin >> samples;  \n  \n    test(p_dist, samples);  \n}  \n  \n```  \n  \n## Output  \n  \n```  \nUse CTRL-Z to bypass data entry and run using default values.  \nEnter a double value for p distribution (where 0.0 <= p <= 1.0): .45  \nEnter an integer value for a sample count: 100  \np == 0.45  \nHistogram for 100 samples:  \nfalse :::::::::::::::::::::::::::::::::::::::::::::::::::::  \n    true :::::::::::::::::::::::::::::::::::::::::::::::  \n```  \n  \n## Requirements  \n **Header:** \\<random>  \n  \n **Namespace:** std  \n  \n##  <a name=\"bernoulli_distribution__bernoulli_distribution\"></a>  bernoulli_distribution::bernoulli_distribution  \n Constructs the distribution.  \n  \n```  \nexplicit bernoulli_distribution(double p = 0.5);\n\n \nexplicit bernoulli_distribution(const param_type& parm);\n```  \n  \n### Parameters  \n `p`  \n The stored `p` distribution parameter.  \n  \n `parm`  \n The parameter structure used to construct the distribution.  \n  \n### Remarks  \n **Precondition:** `0.0 ≤ p ≤ 1.0`  \n  \n The first constructor constructs an object whose stored `p` value holds the value `p`.  \n  \n The second constructor constructs an object whose stored parameters are initialized from `parm`. You can obtain and set the current parameters of an existing distribution by calling the `param()` member function.  \n  \n For more information and a code example, see [binomial_distribution Class](../standard-library/binomial-distribution-class.md).  \n  \n##  <a name=\"bernoulli_distribution__param_type\"></a>  bernoulli_distribution::param_type  \n Contains the parameters of the distribution.  \n  \nstruct param_type {  \n   typedef bernoulli_distribution distribution_type;  \n   param_type(double p = 0.5);\n   double p() const;\n   .....  \n   bool operator==(const param_type& right) const;\n   bool operator!=(const param_type& right) const;\n   };  \n  \n### Parameters  \n See parent topic [bernoulli_distribution Class](../standard-library/bernoulli-distribution-class.md).  \n  \n### Remarks  \n **Precondition:** `0.0 ≤ p ≤ 1.0`  \n  \n This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters.  \n  \n## See Also  \n [\\<random>](../standard-library/random.md)\n\n\n"}