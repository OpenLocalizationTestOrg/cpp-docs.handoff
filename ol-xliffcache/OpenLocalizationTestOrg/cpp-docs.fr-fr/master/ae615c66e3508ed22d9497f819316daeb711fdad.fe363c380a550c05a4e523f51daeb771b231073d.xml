{"nodes":[{"pos":[12,65],"content":"Aggregation and Class Factory Macros | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Aggregation and Class Factory Macros | Microsoft Docs","pos":[0,53]}]},{"content":"Aggregation and Class Factory Macros","pos":[640,676]},{"content":"These macros provide ways of controlling aggregation and of declaring class factories.","pos":[677,763]},{"content":"DECLARE_AGGREGATABLE","pos":[785,805]},{"content":"Declares that your object can be aggregated (the default).","pos":[830,888]},{"content":"DECLARE_CLASSFACTORY","pos":[894,914]},{"pos":[939,1069],"content":"Declares the class factory to be <bpt id=\"p1\">[</bpt>CComClassFactory<ept id=\"p1\">](../../atl/reference/ccomclassfactory-class.md)</ept>, the ATL default class factory.","source":"Declares the class factory to be [CComClassFactory](../../atl/reference/ccomclassfactory-class.md), the ATL default class factory."},{"content":"DECLARE_CLASSFACTORY_EX","pos":[1075,1098]},{"content":"Declares your class factory object to be the class factory.","pos":[1126,1185]},{"content":"DECLARE_CLASSFACTORY2","pos":[1191,1212]},{"pos":[1238,1339],"content":"Declares <bpt id=\"p1\">[</bpt>CComClassFactory2<ept id=\"p1\">](../../atl/reference/ccomclassfactory2-class.md)</ept> to be the class factory.","source":"Declares [CComClassFactory2](../../atl/reference/ccomclassfactory2-class.md) to be the class factory."},{"content":"DECLARE_CLASSFACTORY_AUTO_THREAD","pos":[1345,1377]},{"pos":[1414,1533],"content":"Declares <bpt id=\"p1\">[</bpt>CComClassFactoryAutoThread<ept id=\"p1\">](../../atl/reference/ccomclassfactoryautothread-class.md)</ept> to be the class factory.","source":"Declares [CComClassFactoryAutoThread](../../atl/reference/ccomclassfactoryautothread-class.md) to be the class factory."},{"content":"DECLARE_CLASSFACTORY_SINGLETON","pos":[1539,1569]},{"pos":[1604,1721],"content":"Declares <bpt id=\"p1\">[</bpt>CComClassFactorySingleton<ept id=\"p1\">](../../atl/reference/ccomclassfactorysingleton-class.md)</ept> to be the class factory.","source":"Declares [CComClassFactorySingleton](../../atl/reference/ccomclassfactorysingleton-class.md) to be the class factory."},{"content":"DECLARE_GET_CONTROLLING_UNKNOWN","pos":[1727,1758]},{"pos":[1794,1846],"content":"Declares a virtual <ph id=\"ph1\">`GetControllingUnknown`</ph> function.","source":"Declares a virtual `GetControllingUnknown` function."},{"content":"DECLARE_NOT_AGGREGATABLE","pos":[1852,1876]},{"content":"Declares that your object cannot be aggregated.","pos":[1905,1952]},{"content":"DECLARE_ONLY_AGGREGATABLE","pos":[1958,1983]},{"content":"Declares that your object must be aggregated.","pos":[2013,2058]},{"content":"DECLARE_POLY_AGGREGATABLE","pos":[2064,2089]},{"content":"Checks the value of the outer unknown and declares your object aggregatable or not aggregatable, as appropriate.","pos":[2119,2231]},{"content":"DECLARE_PROTECT_FINAL_CONSTRUCT","pos":[2237,2268]},{"content":"Protects the outer object from deletion during construction of an inner object.","pos":[2304,2383]},{"content":"DECLARE_VIEW_STATUS","pos":[2389,2408]},{"pos":[2432,2484],"content":"Specifies the <bpt id=\"p1\">**</bpt>VIEWSTATUS<ept id=\"p1\">**</ept> flags to the container.","source":"Specifies the **VIEWSTATUS** flags to the container."},{"pos":[2532,2552],"content":"DECLARE_AGGREGATABLE"},{"content":"Specifies that your object can be aggregated.","pos":[2556,2601]},{"content":"Parameters","pos":[2650,2660]},{"content":"x","pos":[2665,2666]},{"content":"[in] The name of the class you are defining as aggregatable.","pos":[2671,2731]},{"content":"Remarks","pos":[2741,2748]},{"content":"<bpt id=\"p1\">[</bpt>CComCoClass<ept id=\"p1\">](../../atl/reference/ccomcoclass-class.md)</ept> contains this macro to specify the default aggregation model.","pos":[2752,2869],"source":"[CComCoClass](../../atl/reference/ccomcoclass-class.md) contains this macro to specify the default aggregation model."},{"content":"To override this default, specify either the <bpt id=\"p1\">[</bpt>DECLARE_NOT_AGGREGATABLE<ept id=\"p1\">](#declare_not_aggregatable)</ept> or <bpt id=\"p2\">[</bpt>DECLARE_ONLY_AGGREGATABLE<ept id=\"p2\">](#declare_only_aggregatable)</ept> macro in your class definition.","pos":[2870,3059],"source":" To override this default, specify either the [DECLARE_NOT_AGGREGATABLE](#declare_not_aggregatable) or [DECLARE_ONLY_AGGREGATABLE](#declare_only_aggregatable) macro in your class definition."},{"content":"Example","pos":[3069,3076]},{"pos":[3091,3112],"content":"NVC_ATL_Windowing#121"},{"pos":[3229,3249],"content":"DECLARE_CLASSFACTORY"},{"pos":[3253,3352],"content":"Declares <bpt id=\"p1\">[</bpt>CComClassFactory<ept id=\"p1\">](../../atl/reference/ccomclassfactory-class.md)</ept> to be the class factory.","source":"Declares [CComClassFactory](../../atl/reference/ccomclassfactory-class.md) to be the class factory."},{"content":"Remarks","pos":[3398,3405]},{"pos":[3409,3534],"content":"<bpt id=\"p1\">[</bpt>CComCoClass<ept id=\"p1\">](../../atl/reference/ccomcoclass-class.md)</ept> uses this macro to declare the default class factory for your object.","source":"[CComCoClass](../../atl/reference/ccomcoclass-class.md) uses this macro to declare the default class factory for your object."},{"content":"Example","pos":[3544,3551]},{"pos":[3566,3580],"content":"NVC_ATL_COM#55"},{"pos":[3699,3721],"content":"CComClassFactory Class"},{"pos":[3725,3837],"content":"This class implements the <bpt id=\"p1\">[</bpt>IClassFactory<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms694364)</ept> interface.","source":"This class implements the [IClassFactory](http://msdn.microsoft.com/library/windows/desktop/ms694364) interface."},{"content":"Remarks","pos":[3955,3962]},{"content":"implements the <bpt id=\"p1\">[</bpt>IClassFactory<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms694364)</ept> interface, which contains methods for creating an object of a particular CLSID, as well as locking the class factory in memory to allow new objects to be created more quickly.","pos":[3985,4251],"source":" implements the [IClassFactory](http://msdn.microsoft.com/library/windows/desktop/ms694364) interface, which contains methods for creating an object of a particular CLSID, as well as locking the class factory in memory to allow new objects to be created more quickly."},{"content":"<bpt id=\"p1\">**</bpt>IClassFactory<ept id=\"p1\">**</ept> must be implemented for every class that you register in the system registry and to which you assign a CLSID.","pos":[4252,4379],"source":"**IClassFactory** must be implemented for every class that you register in the system registry and to which you assign a CLSID."},{"content":"ATL objects normally acquire a class factory by deriving from <bpt id=\"p1\">[</bpt>CComCoClass<ept id=\"p1\">](../../atl/reference/ccomcoclass-class.md)</ept>.","pos":[4386,4504],"source":"ATL objects normally acquire a class factory by deriving from [CComCoClass](../../atl/reference/ccomcoclass-class.md)."},{"content":"This class includes the macro <bpt id=\"p1\">[</bpt>DECLARE_CLASSFACTORY<ept id=\"p1\">](#declare_classfactory)</ept>, which declares <ph id=\"ph1\">`CComClassFactory`</ph> as the default class factory.","pos":[4505,4645],"source":" This class includes the macro [DECLARE_CLASSFACTORY](#declare_classfactory), which declares `CComClassFactory` as the default class factory."},{"content":"To override this default, specify one of the <ph id=\"ph1\">`DECLARE_CLASSFACTORY`</ph><bpt id=\"p1\">*</bpt>XXX<ept id=\"p1\">*</ept> macros in your class definition.","pos":[4646,4751],"source":" To override this default, specify one of the `DECLARE_CLASSFACTORY`*XXX* macros in your class definition."},{"content":"For example, the <bpt id=\"p1\">[</bpt>DECLARE_CLASSFACTORY_EX<ept id=\"p1\">](#declare_classfactory_ex)</ept> macro uses the specified class for the class factory:","pos":[4752,4874],"source":" For example, the [DECLARE_CLASSFACTORY_EX](#declare_classfactory_ex) macro uses the specified class for the class factory:"},{"pos":[4892,4905],"content":"NVC_ATL_COM#8"},{"content":"The above class definition specifies that <bpt id=\"p1\">**</bpt>CMyClassFactory<ept id=\"p1\">**</ept> will be used as the object's default class factory.","pos":[4982,5095],"source":"The above class definition specifies that **CMyClassFactory** will be used as the object's default class factory."},{"content":"<bpt id=\"p1\">**</bpt>CMyClassFactory<ept id=\"p1\">**</ept> must derive from <ph id=\"ph1\">`CComClassFactory`</ph> and override <ph id=\"ph2\">`CreateInstance`</ph>.","pos":[5096,5182],"source":"**CMyClassFactory** must derive from `CComClassFactory` and override `CreateInstance`."},{"content":"ATL provides three other macros that declare a class factory:","pos":[5189,5250]},{"pos":[5258,5430],"content":"<bpt id=\"p1\">[</bpt>DECLARE_CLASSFACTORY2<ept id=\"p1\">](#declare_classfactory2)</ept>Ã‚ Ã‚ Ã‚ Uses <bpt id=\"p2\">[</bpt>CComClassFactory2<ept id=\"p2\">](../../atl/reference/ccomclassfactory2-class.md)</ept>, which controls creation through a license.","source":"[DECLARE_CLASSFACTORY2](#declare_classfactory2)Ã‚ Ã‚ Ã‚ Uses [CComClassFactory2](../../atl/reference/ccomclassfactory2-class.md), which controls creation through a license."},{"pos":[5438,5653],"content":"<bpt id=\"p1\">[</bpt>DECLARE_CLASSFACTORY_AUTO_THREAD<ept id=\"p1\">](#declare_classfactory_auto_thread)</ept>Ã‚ Ã‚ Ã‚ Uses <bpt id=\"p2\">[</bpt>CComClassFactoryAutoThread<ept id=\"p2\">](../../atl/reference/ccomclassfactoryautothread-class.md)</ept>, which creates objects in multiple apartments.","source":"[DECLARE_CLASSFACTORY_AUTO_THREAD](#declare_classfactory_auto_thread)Ã‚ Ã‚ Ã‚ Uses [CComClassFactoryAutoThread](../../atl/reference/ccomclassfactoryautothread-class.md), which creates objects in multiple apartments."},{"pos":[5661,5924],"content":"<bpt id=\"p1\">[</bpt>DECLARE_CLASSFACTORY_SINGLETON<ept id=\"p1\">](#declare_classfactory_singleton)</ept>Ã‚ Ã‚ Ã‚ Uses <bpt id=\"p2\">[</bpt>CComClassFactorySingleton<ept id=\"p2\">](../../atl/reference/ccomclassfactorysingleton-class.md)</ept>, which constructs a single <bpt id=\"p3\">[</bpt>CComObjectGlobal<ept id=\"p3\">](../../atl/reference/ccomobjectglobal-class.md)</ept> object.","source":"[DECLARE_CLASSFACTORY_SINGLETON](#declare_classfactory_singleton)Ã‚ Ã‚ Ã‚ Uses [CComClassFactorySingleton](../../atl/reference/ccomclassfactorysingleton-class.md), which constructs a single [CComObjectGlobal](../../atl/reference/ccomobjectglobal-class.md) object."},{"pos":[5974,5997],"content":"DECLARE_CLASSFACTORY_EX"},{"pos":[6001,6039],"content":"Declares <ph id=\"ph1\">`cf`</ph> to be the class factory.","source":"Declares `cf` to be the class factory."},{"content":"Parameters","pos":[6092,6102]},{"content":"[in] The name of the class that implements your class factory object.","pos":[6114,6183]},{"content":"Remarks","pos":[6193,6200]},{"pos":[6204,6347],"content":"The <ph id=\"ph1\">`cf`</ph> parameter must derive from <bpt id=\"p1\">[</bpt>CComClassFactory<ept id=\"p1\">](../../atl/reference/ccomclassfactory-class.md)</ept> and override the <ph id=\"ph2\">`CreateInstance`</ph> method.","source":"The `cf` parameter must derive from [CComClassFactory](../../atl/reference/ccomclassfactory-class.md) and override the `CreateInstance` method."},{"content":"<bpt id=\"p1\">[</bpt>CComCoClass<ept id=\"p1\">](../../atl/reference/ccomcoclass-class.md)</ept> includes the <bpt id=\"p2\">[</bpt>DECLARE_CLASSFACTORY<ept id=\"p2\">](#declare_classfactory)</ept> macro, which specifies <ph id=\"ph1\">`CComClassFactory`</ph> as the default class factory.","pos":[6354,6540],"source":"[CComCoClass](../../atl/reference/ccomcoclass-class.md) includes the [DECLARE_CLASSFACTORY](#declare_classfactory) macro, which specifies `CComClassFactory` as the default class factory."},{"content":"However, by including the <ph id=\"ph1\">`DECLARE_CLASSFACTORY_EX`</ph> macro in your object's class definition, you override this default.","pos":[6541,6660],"source":" However, by including the `DECLARE_CLASSFACTORY_EX` macro in your object's class definition, you override this default."},{"content":"Example","pos":[6670,6677]},{"pos":[6692,6705],"content":"NVC_ATL_COM#8"},{"pos":[6823,6844],"content":"DECLARE_CLASSFACTORY2"},{"pos":[6848,6949],"content":"Declares <bpt id=\"p1\">[</bpt>CComClassFactory2<ept id=\"p1\">](../../atl/reference/ccomclassfactory2-class.md)</ept> to be the class factory.","source":"Declares [CComClassFactory2](../../atl/reference/ccomclassfactory2-class.md) to be the class factory."},{"content":"Parameters","pos":[7001,7011]},{"content":"lic","pos":[7016,7019]},{"content":"[in] A class that implements <ph id=\"ph1\">`VerifyLicenseKey`</ph>, <ph id=\"ph2\">`GetLicenseKey`</ph>, and <ph id=\"ph3\">`IsLicenseValid`</ph>.","pos":[7024,7111],"source":" [in] A class that implements `VerifyLicenseKey`, `GetLicenseKey`, and `IsLicenseValid`."},{"content":"Remarks","pos":[7121,7128]},{"content":"<bpt id=\"p1\">[</bpt>CComCoClass<ept id=\"p1\">](../../atl/reference/ccomcoclass-class.md)</ept> includes the <bpt id=\"p2\">[</bpt>DECLARE_CLASSFACTORY<ept id=\"p2\">](#declare_classfactory)</ept> macro, which specifies <bpt id=\"p3\">[</bpt>CComClassFactory<ept id=\"p3\">](../../atl/reference/ccomclassfactory-class.md)</ept> as the default class factory.","pos":[7132,7365],"source":"[CComCoClass](../../atl/reference/ccomcoclass-class.md) includes the [DECLARE_CLASSFACTORY](#declare_classfactory) macro, which specifies [CComClassFactory](../../atl/reference/ccomclassfactory-class.md) as the default class factory."},{"content":"However, by including the <ph id=\"ph1\">`DECLARE_CLASSFACTORY2`</ph> macro in your object's class definition, you override this default.","pos":[7366,7483],"source":" However, by including the `DECLARE_CLASSFACTORY2` macro in your object's class definition, you override this default."},{"content":"Example","pos":[7493,7500]},{"pos":[7515,7528],"content":"NVC_ATL_COM#2"},{"pos":[7648,7671],"content":"CComClassFactory2 Class"},{"pos":[7675,7788],"content":"This class implements the <bpt id=\"p1\">[</bpt>IClassFactory2<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms692720)</ept> interface.","source":"This class implements the [IClassFactory2](http://msdn.microsoft.com/library/windows/desktop/ms692720) interface."},{"content":"Parameters","pos":[7960,7970]},{"content":"license","pos":[7975,7982]},{"content":"A class that implements the following static functions:","pos":[7987,8042]},{"pos":[8050,8102],"content":"<bpt id=\"p1\">**</bpt>static BOOL VerifyLicenseKey( BSTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`bstr`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","source":"**static BOOL VerifyLicenseKey( BSTR** `bstr` **);**"},{"pos":[8110,8187],"content":"<bpt id=\"p1\">**</bpt>static BOOL GetLicenseKey( DWORD<ept id=\"p1\">**</ept> <ph id=\"ph1\">`dwReserved`</ph> <bpt id=\"p2\">**</bpt>, BSTR<ph id=\"ph2\">\\*</ph><ept id=\"p2\">**</ept> <ph id=\"ph3\">`pBstr`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**static BOOL GetLicenseKey( DWORD** `dwReserved` **, BSTR\\*** `pBstr` **);**"},{"content":"static BOOL IsLicenseValid( );","pos":[8197,8227]},{"content":"Remarks","pos":[8239,8246]},{"content":"implements the <bpt id=\"p1\">[</bpt>IClassFactory2<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms692720)</ept> interface, which is an extension of <bpt id=\"p2\">[</bpt>IClassFactory<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms694364)</ept>.","pos":[8270,8474],"source":" implements the [IClassFactory2](http://msdn.microsoft.com/library/windows/desktop/ms692720) interface, which is an extension of [IClassFactory](http://msdn.microsoft.com/library/windows/desktop/ms694364)."},{"content":"<bpt id=\"p1\">**</bpt>IClassFactory2<ept id=\"p1\">**</ept> controls object creation through a license.","pos":[8475,8537],"source":"**IClassFactory2** controls object creation through a license."},{"content":"A class factory executing on a licensed machine can provide a run-time license key.","pos":[8538,8621]},{"content":"This license key allows an application to instantiate objects when a full machine license does not exist.","pos":[8622,8727]},{"content":"ATL objects normally acquire a class factory by deriving from <bpt id=\"p1\">[</bpt>CComCoClass<ept id=\"p1\">](../../atl/reference/ccomcoclass-class.md)</ept>.","pos":[8734,8852],"source":"ATL objects normally acquire a class factory by deriving from [CComCoClass](../../atl/reference/ccomcoclass-class.md)."},{"content":"This class includes the macro <bpt id=\"p1\">[</bpt>DECLARE_CLASSFACTORY<ept id=\"p1\">](#declare_classfactory)</ept>, which declares <bpt id=\"p2\">[</bpt>CComClassFactory<ept id=\"p2\">](../../atl/reference/ccomclassfactory-class.md)</ept> as the default class factory.","pos":[8853,9040],"source":" This class includes the macro [DECLARE_CLASSFACTORY](#declare_classfactory), which declares [CComClassFactory](../../atl/reference/ccomclassfactory-class.md) as the default class factory."},{"content":"To use <ph id=\"ph1\">`CComClassFactory2`</ph>, specify the <bpt id=\"p1\">[</bpt>DECLARE_CLASSFACTORY2<ept id=\"p1\">](#declare_classfactory2)</ept> macro in your object's class definition.","pos":[9041,9169],"source":" To use `CComClassFactory2`, specify the [DECLARE_CLASSFACTORY2](#declare_classfactory2) macro in your object's class definition."},{"content":"For example:","pos":[9170,9182]},{"pos":[9200,9213],"content":"NVC_ATL_COM#2"},{"content":"<bpt id=\"p1\">**</bpt>CMyLicense<ept id=\"p1\">**</ept>, the template parameter to <ph id=\"ph1\">`CComClassFactory2`</ph>, must implement the static functions <ph id=\"ph2\">`VerifyLicenseKey`</ph>, <ph id=\"ph3\">`GetLicenseKey`</ph>, and <ph id=\"ph4\">`IsLicenseValid`</ph>.","pos":[9290,9447],"source":"**CMyLicense**, the template parameter to `CComClassFactory2`, must implement the static functions `VerifyLicenseKey`, `GetLicenseKey`, and `IsLicenseValid`."},{"content":"The following is an example of a simple license class:","pos":[9448,9502]},{"pos":[9520,9533],"content":"NVC_ATL_COM#3"},{"content":"derives from both <bpt id=\"p1\">**</bpt>CComClassFactory2Base<ept id=\"p1\">**</ept> and <bpt id=\"p2\">*</bpt>license<ept id=\"p2\">*</ept>.","pos":[9630,9688],"source":" derives from both **CComClassFactory2Base** and *license*."},{"content":"<bpt id=\"p1\">**</bpt>CComClassFactory2Base<ept id=\"p1\">**</ept>, in turn, derives from <bpt id=\"p2\">**</bpt>IClassFactory2<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>CComObjectRootEx<ph id=\"ph1\">\\&lt;</ph> CComGlobalsThreadModel &gt;<ept id=\"p3\">**</ept>.","pos":[9689,9809],"source":"**CComClassFactory2Base**, in turn, derives from **IClassFactory2** and **CComObjectRootEx\\< CComGlobalsThreadModel >**."},{"pos":[9868,9900],"content":"DECLARE_CLASSFACTORY_AUTO_THREAD"},{"pos":[9904,10023],"content":"Declares <bpt id=\"p1\">[</bpt>CComClassFactoryAutoThread<ept id=\"p1\">](../../atl/reference/ccomclassfactoryautothread-class.md)</ept> to be the class factory.","source":"Declares [CComClassFactoryAutoThread](../../atl/reference/ccomclassfactoryautothread-class.md) to be the class factory."},{"content":"Remarks","pos":[10081,10088]},{"content":"<bpt id=\"p1\">[</bpt>CComCoClass<ept id=\"p1\">](../../atl/reference/ccomcoclass-class.md)</ept> includes the <bpt id=\"p2\">[</bpt>DECLARE_CLASSFACTORY<ept id=\"p2\">](#declare_classfactory)</ept> macro, which specifies <bpt id=\"p3\">[</bpt>CComClassFactory<ept id=\"p3\">](../../atl/reference/ccomclassfactory-class.md)</ept> as the default class factory.","pos":[10092,10325],"source":"[CComCoClass](../../atl/reference/ccomcoclass-class.md) includes the [DECLARE_CLASSFACTORY](#declare_classfactory) macro, which specifies [CComClassFactory](../../atl/reference/ccomclassfactory-class.md) as the default class factory."},{"content":"However, by including the <ph id=\"ph1\">`DECLARE_CLASSFACTORY_AUTO_THREAD`</ph> macro in your object's class definition, you override this default.","pos":[10326,10454],"source":" However, by including the `DECLARE_CLASSFACTORY_AUTO_THREAD` macro in your object's class definition, you override this default."},{"pos":[10461,10589],"content":"When you create objects in multiple apartments (in an out-of-proc server), add <ph id=\"ph1\">`DECLARE_CLASSFACTORY_AUTO_THREAD`</ph> to your class.","source":"When you create objects in multiple apartments (in an out-of-proc server), add `DECLARE_CLASSFACTORY_AUTO_THREAD` to your class."},{"content":"Example","pos":[10599,10606]},{"pos":[10621,10634],"content":"NVC_ATL_COM#9"},{"pos":[10763,10795],"content":"CComClassFactoryAutoThread Class"},{"pos":[10799,10968],"content":"This class implements the <bpt id=\"p1\">[</bpt>IClassFactory<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms694364)</ept> interface, and allows objects to be created in multiple apartments.","source":"This class implements the [IClassFactory](http://msdn.microsoft.com/library/windows/desktop/ms694364) interface, and allows objects to be created in multiple apartments."},{"pos":[10976,11086],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the Windows Runtime.","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the Windows Runtime.","pos":[14,108]}]},{"content":"Remarks","pos":[11214,11221]},{"content":"is similar to <bpt id=\"p1\">[</bpt>CComClassFactory<ept id=\"p1\">](../../atl/reference/ccomclassfactory-class.md)</ept>, but allows objects to be created in multiple apartments.","pos":[11254,11391],"source":" is similar to [CComClassFactory](../../atl/reference/ccomclassfactory-class.md), but allows objects to be created in multiple apartments."},{"content":"To take advantage of this support, derive your EXE module from <bpt id=\"p1\">[</bpt>CComAutoThreadModule<ept id=\"p1\">](../../atl/reference/ccomautothreadmodule-class.md)</ept>.","pos":[11392,11529],"source":" To take advantage of this support, derive your EXE module from [CComAutoThreadModule](../../atl/reference/ccomautothreadmodule-class.md)."},{"content":"ATL objects normally acquire a class factory by deriving from <bpt id=\"p1\">[</bpt>CComCoClass<ept id=\"p1\">](../../atl/reference/ccomcoclass-class.md)</ept>.","pos":[11536,11654],"source":"ATL objects normally acquire a class factory by deriving from [CComCoClass](../../atl/reference/ccomcoclass-class.md)."},{"content":"This class includes the macro <bpt id=\"p1\">[</bpt>DECLARE_CLASSFACTORY<ept id=\"p1\">](#declare_classfactory)</ept>, which declares <bpt id=\"p2\">[</bpt>CComClassFactory<ept id=\"p2\">](../../atl/reference/ccomclassfactory-class.md)</ept> as the default class factory.","pos":[11655,11842],"source":" This class includes the macro [DECLARE_CLASSFACTORY](#declare_classfactory), which declares [CComClassFactory](../../atl/reference/ccomclassfactory-class.md) as the default class factory."},{"content":"To use <ph id=\"ph1\">`CComClassFactoryAutoThread`</ph>, specify the <bpt id=\"p1\">[</bpt>DECLARE_CLASSFACTORY_AUTO_THREAD<ept id=\"p1\">](#declare_classfactory_auto_thread)</ept> macro in your object's class definition.","pos":[11843,12002],"source":" To use `CComClassFactoryAutoThread`, specify the [DECLARE_CLASSFACTORY_AUTO_THREAD](#declare_classfactory_auto_thread) macro in your object's class definition."},{"content":"For example:","pos":[12003,12015]},{"pos":[12033,12046],"content":"NVC_ATL_COM#9"},{"pos":[12173,12203],"content":"DECLARE_CLASSFACTORY_SINGLETON"},{"pos":[12207,12324],"content":"Declares <bpt id=\"p1\">[</bpt>CComClassFactorySingleton<ept id=\"p1\">](../../atl/reference/ccomclassfactorysingleton-class.md)</ept> to be the class factory.","source":"Declares [CComClassFactorySingleton](../../atl/reference/ccomclassfactorysingleton-class.md) to be the class factory."},{"content":"Parameters","pos":[12385,12395]},{"content":"[in] The name of your class object.","pos":[12408,12443]},{"content":"Remarks","pos":[12453,12460]},{"content":"<bpt id=\"p1\">[</bpt>CComCoClass<ept id=\"p1\">](../../atl/reference/ccomcoclass-class.md)</ept> includes the <bpt id=\"p2\">[</bpt>DECLARE_CLASSFACTORY<ept id=\"p2\">](#declare_classfactory)</ept> macro, which specifies <bpt id=\"p3\">[</bpt>CComClassFactory<ept id=\"p3\">](../../atl/reference/ccomclassfactory-class.md)</ept> as the default class factory.","pos":[12464,12697],"source":"[CComCoClass](../../atl/reference/ccomcoclass-class.md) includes the [DECLARE_CLASSFACTORY](#declare_classfactory) macro, which specifies [CComClassFactory](../../atl/reference/ccomclassfactory-class.md) as the default class factory."},{"content":"However, by including the <ph id=\"ph1\">`DECLARE_CLASSFACTORY_SINGLETON`</ph> macro in your object's class definition, you override this default.","pos":[12698,12824],"source":" However, by including the `DECLARE_CLASSFACTORY_SINGLETON` macro in your object's class definition, you override this default."},{"content":"Example","pos":[12834,12841]},{"pos":[12856,12870],"content":"NVC_ATL_COM#10"},{"pos":[12998,13029],"content":"CComClassFactorySingleton Class"},{"pos":[13033,13227],"content":"This class derives from <bpt id=\"p1\">[</bpt>CComClassFactory<ept id=\"p1\">](../../atl/reference/ccomclassfactory-class.md)</ept> and uses <bpt id=\"p2\">[</bpt>CComObjectGlobal<ept id=\"p2\">](../../atl/reference/ccomobjectglobal-class.md)</ept> to construct a single object.","source":"This class derives from [CComClassFactory](../../atl/reference/ccomclassfactory-class.md) and uses [CComObjectGlobal](../../atl/reference/ccomobjectglobal-class.md) to construct a single object."},{"pos":[13235,13345],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the Windows Runtime.","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the Windows Runtime.","pos":[14,108]}]},{"content":"Parameters","pos":[13444,13454]},{"content":"Your class.","pos":[13465,13476]},{"content":"derives from <bpt id=\"p1\">[</bpt>CComClassFactory<ept id=\"p1\">](../../atl/reference/ccomclassfactory-class.md)</ept> and uses <bpt id=\"p2\">[</bpt>CComObjectGlobal<ept id=\"p2\">](../../atl/reference/ccomobjectglobal-class.md)</ept> to construct a single object.","pos":[13511,13694],"source":" derives from [CComClassFactory](../../atl/reference/ccomclassfactory-class.md) and uses [CComObjectGlobal](../../atl/reference/ccomobjectglobal-class.md) to construct a single object."},{"content":"Each call to the <ph id=\"ph1\">`CreateInstance`</ph> method simply queries this object for an interface pointer.","pos":[13695,13788],"source":" Each call to the `CreateInstance` method simply queries this object for an interface pointer."},{"content":"Remarks","pos":[13798,13805]},{"content":"ATL objects normally acquire a class factory by deriving from <bpt id=\"p1\">[</bpt>CComCoClass<ept id=\"p1\">](../../atl/reference/ccomcoclass-class.md)</ept>.","pos":[13809,13927],"source":"ATL objects normally acquire a class factory by deriving from [CComCoClass](../../atl/reference/ccomcoclass-class.md)."},{"content":"This class includes the macro <bpt id=\"p1\">[</bpt>DECLARE_CLASSFACTORY<ept id=\"p1\">](#declare_classfactory)</ept>, which declares <ph id=\"ph1\">`CComClassFactory`</ph> as the default class factory.","pos":[13928,14068],"source":" This class includes the macro [DECLARE_CLASSFACTORY](#declare_classfactory), which declares `CComClassFactory` as the default class factory."},{"content":"To use <ph id=\"ph1\">`CComClassFactorySingleton`</ph>, specify the <bpt id=\"p1\">[</bpt>DECLARE_CLASSFACTORY_SINGLETON<ept id=\"p1\">](#declare_classfactory_singleton)</ept> macro in your object's class definition.","pos":[14069,14223],"source":" To use `CComClassFactorySingleton`, specify the [DECLARE_CLASSFACTORY_SINGLETON](#declare_classfactory_singleton) macro in your object's class definition."},{"content":"For example:","pos":[14224,14236]},{"pos":[14254,14268],"content":"NVC_ATL_COM#10"},{"pos":[14396,14427],"content":"DECLARE_GET_CONTROLLING_UNKNOWN"},{"pos":[14431,14483],"content":"Declares a virtual function <ph id=\"ph1\">`GetControllingUnknown`</ph>.","source":"Declares a virtual function `GetControllingUnknown`."},{"content":"Remarks","pos":[14540,14547]},{"pos":[14551,14704],"content":"Add this macro to your object if you get the compiler error message that <ph id=\"ph1\">`GetControllingUnknown`</ph> is undefined (for example, in <bpt id=\"p1\">**</bpt>CComAggregateCreator<ept id=\"p1\">**</ept>).","source":"Add this macro to your object if you get the compiler error message that `GetControllingUnknown` is undefined (for example, in **CComAggregateCreator**)."},{"pos":[14755,14779],"content":"DECLARE_NOT_AGGREGATABLE"},{"content":"Specifies that your object cannot be aggregated.","pos":[14783,14831]},{"content":"Parameters","pos":[14884,14894]},{"content":"x","pos":[14899,14900]},{"content":"[in] The name of the class object you are defining as not aggregatable.","pos":[14905,14976]},{"content":"Remarks","pos":[14986,14993]},{"pos":[15024,15148],"content":"causes <ph id=\"ph1\">`CreateInstance`</ph> to return an error ( <bpt id=\"p1\">**</bpt>CLASS_E_NOAGGREGATION<ept id=\"p1\">**</ept>) if an attempt is made to aggregate onto your object.","source":" causes `CreateInstance` to return an error ( **CLASS_E_NOAGGREGATION**) if an attempt is made to aggregate onto your object."},{"content":"By default, <bpt id=\"p1\">[</bpt>CComCoClass<ept id=\"p1\">](../../atl/reference/ccomcoclass-class.md)</ept> contains the <bpt id=\"p2\">[</bpt>DECLARE_AGGREGATABLE<ept id=\"p2\">](#declare_aggregatable)</ept> macro, which specifies that your object can be aggregated.","pos":[15155,15340],"source":"By default, [CComCoClass](../../atl/reference/ccomcoclass-class.md) contains the [DECLARE_AGGREGATABLE](#declare_aggregatable) macro, which specifies that your object can be aggregated."},{"content":"To override this default behavior, include <ph id=\"ph1\">`DECLARE_NOT_AGGREGATABLE`</ph> in your class definition.","pos":[15341,15436],"source":" To override this default behavior, include `DECLARE_NOT_AGGREGATABLE` in your class definition."},{"content":"Example","pos":[15446,15453]},{"pos":[15468,15489],"content":"NVC_ATL_Windowing#121"},{"pos":[15611,15636],"content":"DECLARE_ONLY_AGGREGATABLE"},{"content":"Specifies that your object must be aggregated.","pos":[15640,15686]},{"content":"Parameters","pos":[15740,15750]},{"content":"x","pos":[15755,15756]},{"content":"[in] The name of the class object you are defining as only aggregatable.","pos":[15761,15833]},{"content":"Remarks","pos":[15843,15850]},{"pos":[15882,15986],"content":"causes an error ( <bpt id=\"p1\">**</bpt>E_FAIL<ept id=\"p1\">**</ept>) if an attempt is made to <bpt id=\"p2\">**</bpt>CoCreate<ept id=\"p2\">**</ept> your object as nonaggregated object.","source":" causes an error ( **E_FAIL**) if an attempt is made to **CoCreate** your object as nonaggregated object."},{"content":"By default, <bpt id=\"p1\">[</bpt>CComCoClass<ept id=\"p1\">](../../atl/reference/ccomcoclass-class.md)</ept> contains the <bpt id=\"p2\">[</bpt>DECLARE_AGGREGATABLE<ept id=\"p2\">](#declare_aggregatable)</ept> macro, which specifies that your object can be aggregated.","pos":[15993,16178],"source":"By default, [CComCoClass](../../atl/reference/ccomcoclass-class.md) contains the [DECLARE_AGGREGATABLE](#declare_aggregatable) macro, which specifies that your object can be aggregated."},{"content":"To override this default behavior, include <ph id=\"ph1\">`DECLARE_ONLY_AGGREGATABLE`</ph> in your class definition.","pos":[16179,16275],"source":" To override this default behavior, include `DECLARE_ONLY_AGGREGATABLE` in your class definition."},{"content":"Example","pos":[16285,16292]},{"pos":[16307,16328],"content":"NVC_ATL_Windowing#125"},{"pos":[16450,16475],"content":"DECLARE_POLY_AGGREGATABLE"},{"pos":[16479,16580],"content":"Specifies that an instance of <bpt id=\"p1\">**</bpt>CComPolyObject <ph id=\"ph1\">\\&lt;</ph><ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>x<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt><ph id=\"ph2\">&gt;</ph><ept id=\"p3\">**</ept> is created when your object is created.","source":"Specifies that an instance of **CComPolyObject \\<** *x* **>** is created when your object is created."},{"content":"Parameters","pos":[16634,16644]},{"content":"x","pos":[16649,16650]},{"content":"[in] The name of the class object you are defining as aggregatable or not aggregatable.","pos":[16655,16742]},{"content":"Remarks","pos":[16752,16759]},{"content":"During creation, the value of the outer unknown is checked.","pos":[16763,16822]},{"content":"If it is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>IUnknown<ept id=\"p2\">**</ept> is implemented for a nonaggregated object.","pos":[16823,16897],"source":" If it is **NULL**, **IUnknown** is implemented for a nonaggregated object."},{"content":"If the outer unknown is not <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>IUnknown<ept id=\"p2\">**</ept> is implemented for an aggregated object.","pos":[16898,16989],"source":" If the outer unknown is not **NULL**, **IUnknown** is implemented for an aggregated object."},{"content":"The advantage of using <ph id=\"ph1\">`DECLARE_POLY_AGGREGATABLE`</ph> is that you avoid having both <ph id=\"ph2\">`CComAggObject`</ph> and <ph id=\"ph3\">`CComObject`</ph> in your module to handle the aggregated and nonaggregated cases.","pos":[16996,17174],"source":"The advantage of using `DECLARE_POLY_AGGREGATABLE` is that you avoid having both `CComAggObject` and `CComObject` in your module to handle the aggregated and nonaggregated cases."},{"content":"A single <ph id=\"ph1\">`CComPolyObject`</ph> object handles both cases.","pos":[17175,17227],"source":" A single `CComPolyObject` object handles both cases."},{"content":"This means only one copy of the vtable and one copy of the functions exist in your module.","pos":[17228,17318]},{"content":"If your vtable is large, this can substantially decrease your module size.","pos":[17319,17393]},{"content":"However, if your vtable is small, using <ph id=\"ph1\">`CComPolyObject`</ph> can result in a slightly larger module size because it is not optimized for an aggregated or nonaggregated object, as are <ph id=\"ph2\">`CComAggObject`</ph> and <ph id=\"ph3\">`CComObject`</ph>.","pos":[17394,17606],"source":" However, if your vtable is small, using `CComPolyObject` can result in a slightly larger module size because it is not optimized for an aggregated or nonaggregated object, as are `CComAggObject` and `CComObject`."},{"pos":[17613,17751],"content":"The <ph id=\"ph1\">`DECLARE_POLY_AGGREGATABLE`</ph> macro is automatically declared in your object if you use the ATL Control Wizard to create a full control.","source":"The `DECLARE_POLY_AGGREGATABLE` macro is automatically declared in your object if you use the ATL Control Wizard to create a full control."},{"pos":[17809,17840],"content":"DECLARE_PROTECT_FINAL_CONSTRUCT"},{"pos":[17845,18067],"content":"Protects your object from being deleted if (during <bpt id=\"p1\">[</bpt>FinalConstruct<ept id=\"p1\">](ccomobjectrootex-class.md#ccomobjectrootex__finalconstruct)</ept>) the internal aggregated object increments the reference count then decrements the count to 0.","source":"Protects your object from being deleted if (during [FinalConstruct](ccomobjectrootex-class.md#ccomobjectrootex__finalconstruct)) the internal aggregated object increments the reference count then decrements the count to 0."},{"pos":[18160,18179],"content":"DECLARE_VIEW_STATUS"},{"pos":[18183,18295],"content":"Place this macro in an ATL ActiveX control's control class to specify the <bpt id=\"p1\">**</bpt>VIEWSTATUS<ept id=\"p1\">**</ept> flags to the container.","source":"Place this macro in an ATL ActiveX control's control class to specify the **VIEWSTATUS** flags to the container."},{"content":"Parameters","pos":[18353,18363]},{"content":"[in] The <bpt id=\"p1\">**</bpt>VIEWSTATUS<ept id=\"p1\">**</ept> flags.","pos":[18384,18414],"source":" [in] The **VIEWSTATUS** flags."},{"content":"See <bpt id=\"p1\">[</bpt>VIEWSTATUS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms687201)</ept> for a list of flags.","pos":[18415,18512],"source":" See [VIEWSTATUS](http://msdn.microsoft.com/library/windows/desktop/ms687201) for a list of flags."},{"content":"Example","pos":[18522,18529]},{"pos":[18544,18565],"content":"NVC_ATL_Windowing#126"},{"content":"See Also","pos":[18644,18652]},{"content":"Macros","pos":[18657,18663]}],"content":"---\ntitle: \"Aggregation and Class Factory Macros | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"class factories, ATL macros\"\n  - \"aggregation [C++], ATL macros\"\nms.assetid: d99d379a-0eec-481f-8daa-252dac18f163\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Aggregation and Class Factory Macros\nThese macros provide ways of controlling aggregation and of declaring class factories.  \n  \n|||  \n|-|-|  \n|[DECLARE_AGGREGATABLE](#declare_aggregatable)|Declares that your object can be aggregated (the default).|  \n|[DECLARE_CLASSFACTORY](#declare_classfactory)|Declares the class factory to be [CComClassFactory](../../atl/reference/ccomclassfactory-class.md), the ATL default class factory.|  \n|[DECLARE_CLASSFACTORY_EX](#declare_classfactory_ex)|Declares your class factory object to be the class factory.|  \n|[DECLARE_CLASSFACTORY2](#declare_classfactory2)|Declares [CComClassFactory2](../../atl/reference/ccomclassfactory2-class.md) to be the class factory.|  \n|[DECLARE_CLASSFACTORY_AUTO_THREAD](#declare_classfactory_auto_thread)|Declares [CComClassFactoryAutoThread](../../atl/reference/ccomclassfactoryautothread-class.md) to be the class factory.|  \n|[DECLARE_CLASSFACTORY_SINGLETON](#declare_classfactory_singleton)|Declares [CComClassFactorySingleton](../../atl/reference/ccomclassfactorysingleton-class.md) to be the class factory.|  \n|[DECLARE_GET_CONTROLLING_UNKNOWN](#declare_get_controlling_unknown)|Declares a virtual `GetControllingUnknown` function.|  \n|[DECLARE_NOT_AGGREGATABLE](#declare_not_aggregatable)|Declares that your object cannot be aggregated.|  \n|[DECLARE_ONLY_AGGREGATABLE](#declare_only_aggregatable)|Declares that your object must be aggregated.|  \n|[DECLARE_POLY_AGGREGATABLE](#declare_poly_aggregatable)|Checks the value of the outer unknown and declares your object aggregatable or not aggregatable, as appropriate.|  \n|[DECLARE_PROTECT_FINAL_CONSTRUCT](#declare_protect_final_construct)|Protects the outer object from deletion during construction of an inner object.|  \n|[DECLARE_VIEW_STATUS](#declare_view_status)|Specifies the **VIEWSTATUS** flags to the container.|  \n  \n##  <a name=\"declare_aggregatable\"></a>  DECLARE_AGGREGATABLE  \n Specifies that your object can be aggregated.  \n  \n```\nDECLARE_AGGREGATABLE( x )\n```  \n  \n### Parameters  \n *x*  \n [in] The name of the class you are defining as aggregatable.  \n  \n### Remarks  \n [CComCoClass](../../atl/reference/ccomcoclass-class.md) contains this macro to specify the default aggregation model. To override this default, specify either the [DECLARE_NOT_AGGREGATABLE](#declare_not_aggregatable) or [DECLARE_ONLY_AGGREGATABLE](#declare_only_aggregatable) macro in your class definition.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#121](../../atl/codesnippet/cpp/aggregation-and-class-factory-macros_1.h)]  \n  \n##  <a name=\"declare_classfactory\"></a>  DECLARE_CLASSFACTORY  \n Declares [CComClassFactory](../../atl/reference/ccomclassfactory-class.md) to be the class factory.  \n  \n```\nDECLARE_CLASSFACTORY()\n```  \n  \n### Remarks  \n [CComCoClass](../../atl/reference/ccomcoclass-class.md) uses this macro to declare the default class factory for your object.  \n  \n### Example  \n [!code-cpp[NVC_ATL_COM#55](../../atl/codesnippet/cpp/aggregation-and-class-factory-macros_2.h)]  \n  \n##  <a name=\"ccomclassfactory_class\"></a>  CComClassFactory Class  \n This class implements the [IClassFactory](http://msdn.microsoft.com/library/windows/desktop/ms694364) interface.  \n  \n```\nclass CComClassFactory : public IClassFactory,\npublic CComObjectRootEx<CComGlobalsThreadModel>\n```  \n  \n### Remarks  \n `CComClassFactory` implements the [IClassFactory](http://msdn.microsoft.com/library/windows/desktop/ms694364) interface, which contains methods for creating an object of a particular CLSID, as well as locking the class factory in memory to allow new objects to be created more quickly. **IClassFactory** must be implemented for every class that you register in the system registry and to which you assign a CLSID.  \n  \n ATL objects normally acquire a class factory by deriving from [CComCoClass](../../atl/reference/ccomcoclass-class.md). This class includes the macro [DECLARE_CLASSFACTORY](#declare_classfactory), which declares `CComClassFactory` as the default class factory. To override this default, specify one of the `DECLARE_CLASSFACTORY`*XXX* macros in your class definition. For example, the [DECLARE_CLASSFACTORY_EX](#declare_classfactory_ex) macro uses the specified class for the class factory:  \n  \n [!code-cpp[NVC_ATL_COM#8](../../atl/codesnippet/cpp/aggregation-and-class-factory-macros_3.h)]  \n  \n The above class definition specifies that **CMyClassFactory** will be used as the object's default class factory. **CMyClassFactory** must derive from `CComClassFactory` and override `CreateInstance`.  \n  \n ATL provides three other macros that declare a class factory:  \n  \n- [DECLARE_CLASSFACTORY2](#declare_classfactory2)Ã‚ Ã‚ Ã‚ Uses [CComClassFactory2](../../atl/reference/ccomclassfactory2-class.md), which controls creation through a license.  \n  \n- [DECLARE_CLASSFACTORY_AUTO_THREAD](#declare_classfactory_auto_thread)Ã‚ Ã‚ Ã‚ Uses [CComClassFactoryAutoThread](../../atl/reference/ccomclassfactoryautothread-class.md), which creates objects in multiple apartments.  \n  \n- [DECLARE_CLASSFACTORY_SINGLETON](#declare_classfactory_singleton)Ã‚ Ã‚ Ã‚ Uses [CComClassFactorySingleton](../../atl/reference/ccomclassfactorysingleton-class.md), which constructs a single [CComObjectGlobal](../../atl/reference/ccomobjectglobal-class.md) object.  \n  \n##  <a name=\"declare_classfactory_ex\"></a>  DECLARE_CLASSFACTORY_EX  \n Declares `cf` to be the class factory.  \n  \n```\nDECLARE_CLASSFACTORY_EX( cf )\n```  \n  \n### Parameters  \n `cf`  \n [in] The name of the class that implements your class factory object.  \n  \n### Remarks  \n The `cf` parameter must derive from [CComClassFactory](../../atl/reference/ccomclassfactory-class.md) and override the `CreateInstance` method.  \n  \n [CComCoClass](../../atl/reference/ccomcoclass-class.md) includes the [DECLARE_CLASSFACTORY](#declare_classfactory) macro, which specifies `CComClassFactory` as the default class factory. However, by including the `DECLARE_CLASSFACTORY_EX` macro in your object's class definition, you override this default.  \n  \n### Example  \n [!code-cpp[NVC_ATL_COM#8](../../atl/codesnippet/cpp/aggregation-and-class-factory-macros_3.h)]  \n  \n##  <a name=\"declare_classfactory2\"></a>  DECLARE_CLASSFACTORY2  \n Declares [CComClassFactory2](../../atl/reference/ccomclassfactory2-class.md) to be the class factory.  \n  \n```\nDECLARE_CLASSFACTORY2( lic )\n```  \n  \n### Parameters  \n *lic*  \n [in] A class that implements `VerifyLicenseKey`, `GetLicenseKey`, and `IsLicenseValid`.  \n  \n### Remarks  \n [CComCoClass](../../atl/reference/ccomcoclass-class.md) includes the [DECLARE_CLASSFACTORY](#declare_classfactory) macro, which specifies [CComClassFactory](../../atl/reference/ccomclassfactory-class.md) as the default class factory. However, by including the `DECLARE_CLASSFACTORY2` macro in your object's class definition, you override this default.  \n  \n### Example  \n [!code-cpp[NVC_ATL_COM#2](../../atl/codesnippet/cpp/aggregation-and-class-factory-macros_4.h)]  \n  \n##  <a name=\"ccomclassfactory2_class\"></a>  CComClassFactory2 Class  \n This class implements the [IClassFactory2](http://msdn.microsoft.com/library/windows/desktop/ms692720) interface.  \n  \n```\ntemplate <class license>\nclass  CComClassFactory2 : public IClassFactory2,\n    public CComObjectRootEx<CComGlobalsThreadModel>,\n    public license\n```    \n  \n### Parameters  \n *license*  \n A class that implements the following static functions:  \n  \n- **static BOOL VerifyLicenseKey( BSTR** `bstr` **);**  \n  \n- **static BOOL GetLicenseKey( DWORD** `dwReserved` **, BSTR\\*** `pBstr` **);**  \n  \n- **static BOOL IsLicenseValid( );**  \n  \n### Remarks  \n `CComClassFactory2` implements the [IClassFactory2](http://msdn.microsoft.com/library/windows/desktop/ms692720) interface, which is an extension of [IClassFactory](http://msdn.microsoft.com/library/windows/desktop/ms694364). **IClassFactory2** controls object creation through a license. A class factory executing on a licensed machine can provide a run-time license key. This license key allows an application to instantiate objects when a full machine license does not exist.  \n  \n ATL objects normally acquire a class factory by deriving from [CComCoClass](../../atl/reference/ccomcoclass-class.md). This class includes the macro [DECLARE_CLASSFACTORY](#declare_classfactory), which declares [CComClassFactory](../../atl/reference/ccomclassfactory-class.md) as the default class factory. To use `CComClassFactory2`, specify the [DECLARE_CLASSFACTORY2](#declare_classfactory2) macro in your object's class definition. For example:  \n  \n [!code-cpp[NVC_ATL_COM#2](../../atl/codesnippet/cpp/aggregation-and-class-factory-macros_4.h)]  \n  \n **CMyLicense**, the template parameter to `CComClassFactory2`, must implement the static functions `VerifyLicenseKey`, `GetLicenseKey`, and `IsLicenseValid`. The following is an example of a simple license class:  \n  \n [!code-cpp[NVC_ATL_COM#3](../../atl/codesnippet/cpp/aggregation-and-class-factory-macros_5.h)]  \n  \n `CComClassFactory2` derives from both **CComClassFactory2Base** and *license*. **CComClassFactory2Base**, in turn, derives from **IClassFactory2** and **CComObjectRootEx\\< CComGlobalsThreadModel >**.  \n  \n##  <a name=\"declare_classfactory_auto_thread\"></a>  DECLARE_CLASSFACTORY_AUTO_THREAD  \n Declares [CComClassFactoryAutoThread](../../atl/reference/ccomclassfactoryautothread-class.md) to be the class factory.  \n  \n```\nDECLARE_CLASSFACTORY_AUTO_THREAD()\n```  \n  \n### Remarks  \n [CComCoClass](../../atl/reference/ccomcoclass-class.md) includes the [DECLARE_CLASSFACTORY](#declare_classfactory) macro, which specifies [CComClassFactory](../../atl/reference/ccomclassfactory-class.md) as the default class factory. However, by including the `DECLARE_CLASSFACTORY_AUTO_THREAD` macro in your object's class definition, you override this default.  \n  \n When you create objects in multiple apartments (in an out-of-proc server), add `DECLARE_CLASSFACTORY_AUTO_THREAD` to your class.  \n  \n### Example  \n [!code-cpp[NVC_ATL_COM#9](../../atl/codesnippet/cpp/aggregation-and-class-factory-macros_6.h)]  \n  \n##  <a name=\"ccomclassfactoryautothread_class\"></a>  CComClassFactoryAutoThread Class  \n This class implements the [IClassFactory](http://msdn.microsoft.com/library/windows/desktop/ms694364) interface, and allows objects to be created in multiple apartments.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the Windows Runtime.  \n  \n```\nclass CComClassFactoryAutoThread : public IClassFactory,\npublic CComObjectRootEx<CComGlobalsThreadModel>\n```  \n  \n### Remarks  \n `CComClassFactoryAutoThread` is similar to [CComClassFactory](../../atl/reference/ccomclassfactory-class.md), but allows objects to be created in multiple apartments. To take advantage of this support, derive your EXE module from [CComAutoThreadModule](../../atl/reference/ccomautothreadmodule-class.md).  \n  \n ATL objects normally acquire a class factory by deriving from [CComCoClass](../../atl/reference/ccomcoclass-class.md). This class includes the macro [DECLARE_CLASSFACTORY](#declare_classfactory), which declares [CComClassFactory](../../atl/reference/ccomclassfactory-class.md) as the default class factory. To use `CComClassFactoryAutoThread`, specify the [DECLARE_CLASSFACTORY_AUTO_THREAD](#declare_classfactory_auto_thread) macro in your object's class definition. For example:  \n  \n [!code-cpp[NVC_ATL_COM#9](../../atl/codesnippet/cpp/aggregation-and-class-factory-macros_6.h)]  \n  \n##  <a name=\"declare_classfactory_singleton\"></a>  DECLARE_CLASSFACTORY_SINGLETON  \n Declares [CComClassFactorySingleton](../../atl/reference/ccomclassfactorysingleton-class.md) to be the class factory.  \n  \n```\nDECLARE_CLASSFACTORY_SINGLETON( obj )\n```  \n  \n### Parameters  \n `obj`  \n [in] The name of your class object.  \n  \n### Remarks  \n [CComCoClass](../../atl/reference/ccomcoclass-class.md) includes the [DECLARE_CLASSFACTORY](#declare_classfactory) macro, which specifies [CComClassFactory](../../atl/reference/ccomclassfactory-class.md) as the default class factory. However, by including the `DECLARE_CLASSFACTORY_SINGLETON` macro in your object's class definition, you override this default.  \n  \n### Example  \n [!code-cpp[NVC_ATL_COM#10](../../atl/codesnippet/cpp/aggregation-and-class-factory-macros_7.h)]  \n  \n##  <a name=\"ccomclassfactorysingleton_class\"></a>  CComClassFactorySingleton Class  \n This class derives from [CComClassFactory](../../atl/reference/ccomclassfactory-class.md) and uses [CComObjectGlobal](../../atl/reference/ccomobjectglobal-class.md) to construct a single object.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the Windows Runtime.  \n  \n```\ntemplate<class T>\nclass CComClassFactorySingleton :\npublic CComClassFactory\n```  \n  \n### Parameters  \n `T`  \n Your class.  \n  \n `CComClassFactorySingleton` derives from [CComClassFactory](../../atl/reference/ccomclassfactory-class.md) and uses [CComObjectGlobal](../../atl/reference/ccomobjectglobal-class.md) to construct a single object. Each call to the `CreateInstance` method simply queries this object for an interface pointer.  \n  \n### Remarks  \n ATL objects normally acquire a class factory by deriving from [CComCoClass](../../atl/reference/ccomcoclass-class.md). This class includes the macro [DECLARE_CLASSFACTORY](#declare_classfactory), which declares `CComClassFactory` as the default class factory. To use `CComClassFactorySingleton`, specify the [DECLARE_CLASSFACTORY_SINGLETON](#declare_classfactory_singleton) macro in your object's class definition. For example:  \n  \n [!code-cpp[NVC_ATL_COM#10](../../atl/codesnippet/cpp/aggregation-and-class-factory-macros_7.h)]  \n  \n##  <a name=\"declare_get_controlling_unknown\"></a>  DECLARE_GET_CONTROLLING_UNKNOWN  \n Declares a virtual function `GetControllingUnknown`.  \n  \n```\nDECLARE_GET_CONTROLLING_UNKNOWN()\n```  \n  \n### Remarks  \n Add this macro to your object if you get the compiler error message that `GetControllingUnknown` is undefined (for example, in **CComAggregateCreator**).  \n  \n##  <a name=\"declare_not_aggregatable\"></a>  DECLARE_NOT_AGGREGATABLE  \n Specifies that your object cannot be aggregated.  \n  \n```\nDECLARE_NOT_AGGREGATABLE( x )\n```  \n  \n### Parameters  \n *x*  \n [in] The name of the class object you are defining as not aggregatable.  \n  \n### Remarks  \n `DECLARE_NOT_AGGREGATABLE` causes `CreateInstance` to return an error ( **CLASS_E_NOAGGREGATION**) if an attempt is made to aggregate onto your object.  \n  \n By default, [CComCoClass](../../atl/reference/ccomcoclass-class.md) contains the [DECLARE_AGGREGATABLE](#declare_aggregatable) macro, which specifies that your object can be aggregated. To override this default behavior, include `DECLARE_NOT_AGGREGATABLE` in your class definition.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#121](../../atl/codesnippet/cpp/aggregation-and-class-factory-macros_1.h)]  \n  \n##  <a name=\"declare_only_aggregatable\"></a>  DECLARE_ONLY_AGGREGATABLE  \n Specifies that your object must be aggregated.  \n  \n```\nDECLARE_ONLY_AGGREGATABLE( x )\n```  \n  \n### Parameters  \n *x*  \n [in] The name of the class object you are defining as only aggregatable.  \n  \n### Remarks  \n `DECLARE_ONLY_AGGREGATABLE` causes an error ( **E_FAIL**) if an attempt is made to **CoCreate** your object as nonaggregated object.  \n  \n By default, [CComCoClass](../../atl/reference/ccomcoclass-class.md) contains the [DECLARE_AGGREGATABLE](#declare_aggregatable) macro, which specifies that your object can be aggregated. To override this default behavior, include `DECLARE_ONLY_AGGREGATABLE` in your class definition.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#125](../../atl/codesnippet/cpp/aggregation-and-class-factory-macros_8.h)]  \n  \n##  <a name=\"declare_poly_aggregatable\"></a>  DECLARE_POLY_AGGREGATABLE  \n Specifies that an instance of **CComPolyObject \\<** *x* **>** is created when your object is created.  \n  \n```\nDECLARE_POLY_AGGREGATABLE( x )\n```  \n  \n### Parameters  \n *x*  \n [in] The name of the class object you are defining as aggregatable or not aggregatable.  \n  \n### Remarks  \n During creation, the value of the outer unknown is checked. If it is **NULL**, **IUnknown** is implemented for a nonaggregated object. If the outer unknown is not **NULL**, **IUnknown** is implemented for an aggregated object.  \n  \n The advantage of using `DECLARE_POLY_AGGREGATABLE` is that you avoid having both `CComAggObject` and `CComObject` in your module to handle the aggregated and nonaggregated cases. A single `CComPolyObject` object handles both cases. This means only one copy of the vtable and one copy of the functions exist in your module. If your vtable is large, this can substantially decrease your module size. However, if your vtable is small, using `CComPolyObject` can result in a slightly larger module size because it is not optimized for an aggregated or nonaggregated object, as are `CComAggObject` and `CComObject`.  \n  \n The `DECLARE_POLY_AGGREGATABLE` macro is automatically declared in your object if you use the ATL Control Wizard to create a full control.  \n  \n##  <a name=\"declare_protect_final_construct\"></a>  DECLARE_PROTECT_FINAL_CONSTRUCT  \n\n Protects your object from being deleted if (during [FinalConstruct](ccomobjectrootex-class.md#ccomobjectrootex__finalconstruct)) the internal aggregated object increments the reference count then decrements the count to 0.  \n  \n```\nDECLARE_PROTECT_FINAL_CONSTRUCT()\n```  \n  \n##  <a name=\"declare_view_status\"></a>  DECLARE_VIEW_STATUS  \n Place this macro in an ATL ActiveX control's control class to specify the **VIEWSTATUS** flags to the container.  \n  \n```\nDECLARE_VIEW_STATUS( statusFlags )\n```  \n  \n### Parameters  \n `statusFlags`  \n [in] The **VIEWSTATUS** flags. See [VIEWSTATUS](http://msdn.microsoft.com/library/windows/desktop/ms687201) for a list of flags.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#126](../../atl/codesnippet/cpp/aggregation-and-class-factory-macros_9.h)]  \n  \n## See Also  \n [Macros](../../atl/reference/atl-macros.md)\n"}