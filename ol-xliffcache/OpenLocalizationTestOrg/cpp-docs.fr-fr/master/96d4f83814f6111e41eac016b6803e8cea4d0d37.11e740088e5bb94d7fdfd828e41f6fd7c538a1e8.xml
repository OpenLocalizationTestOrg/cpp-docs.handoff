{"nodes":[{"pos":[12,47],"content":"CDocTemplate Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CDocTemplate Class | Microsoft Docs","pos":[0,35]}]},{"pos":[661,679],"content":"CDocTemplate Class","linkify":"CDocTemplate Class","nodes":[{"content":"CDocTemplate Class","pos":[0,18]}]},{"content":"An abstract base class that defines the basic functionality for document templates.","pos":[680,763]},{"pos":[772,778],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[843,850],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[860,882],"content":"Protected Constructors","linkify":"Protected Constructors","nodes":[{"content":"Protected Constructors","pos":[0,22]}]},{"content":"Name","pos":[889,893]},{"content":"Description","pos":[894,905]},{"pos":[943,1000],"content":"<bpt id=\"p1\">[</bpt>CDocTemplate::CDocTemplate<ept id=\"p1\">](#cdoctemplate__cdoctemplate)</ept>","source":"[CDocTemplate::CDocTemplate](#cdoctemplate__cdoctemplate)"},{"pos":[1001,1036],"content":"Constructs a <ph id=\"ph1\">`CDocTemplate`</ph> object.","source":"Constructs a `CDocTemplate` object."},{"pos":[1047,1061],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1068,1072]},{"content":"Description","pos":[1073,1084]},{"pos":[1122,1177],"content":"<bpt id=\"p1\">[</bpt>CDocTemplate::AddDocument<ept id=\"p1\">](#cdoctemplate__adddocument)</ept>","source":"[CDocTemplate::AddDocument](#cdoctemplate__adddocument)"},{"content":"Adds a document to a template.","pos":[1178,1208]},{"pos":[1213,1280],"content":"<bpt id=\"p1\">[</bpt>CDocTemplate::CloseAllDocuments<ept id=\"p1\">](#cdoctemplate__closealldocuments)</ept>","source":"[CDocTemplate::CloseAllDocuments](#cdoctemplate__closealldocuments)"},{"content":"Closes all documents associated with this template.","pos":[1281,1332]},{"pos":[1337,1404],"content":"<bpt id=\"p1\">[</bpt>CDocTemplate::CreateNewDocument<ept id=\"p1\">](#cdoctemplate__createnewdocument)</ept>","source":"[CDocTemplate::CreateNewDocument](#cdoctemplate__createnewdocument)"},{"content":"Creates a new document.","pos":[1405,1428]},{"pos":[1433,1494],"content":"<bpt id=\"p1\">[</bpt>CDocTemplate::CreateNewFrame<ept id=\"p1\">](#cdoctemplate__createnewframe)</ept>","source":"[CDocTemplate::CreateNewFrame](#cdoctemplate__createnewframe)"},{"content":"Creates a new frame window containing a document and view.","pos":[1495,1553]},{"pos":[1558,1619],"content":"<bpt id=\"p1\">[</bpt>CDocTemplate::CreateOleFrame<ept id=\"p1\">](#cdoctemplate__createoleframe)</ept>","source":"[CDocTemplate::CreateOleFrame](#cdoctemplate__createoleframe)"},{"content":"Creates an OLE-enabled frame window.","pos":[1620,1656]},{"pos":[1661,1730],"content":"<bpt id=\"p1\">[</bpt>CDocTemplate::CreatePreviewFrame<ept id=\"p1\">](#cdoctemplate__createpreviewframe)</ept>","source":"[CDocTemplate::CreatePreviewFrame](#cdoctemplate__createpreviewframe)"},{"content":"Creates a child frame used for Rich Preview.","pos":[1731,1775]},{"pos":[1780,1837],"content":"<bpt id=\"p1\">[</bpt>CDocTemplate::GetDocString<ept id=\"p1\">](#cdoctemplate__getdocstring)</ept>","source":"[CDocTemplate::GetDocString](#cdoctemplate__getdocstring)"},{"content":"Retrieves a string associated with the document type.","pos":[1838,1891]},{"pos":[1896,1967],"content":"<bpt id=\"p1\">[</bpt>CDocTemplate::GetFirstDocPosition<ept id=\"p1\">](#cdoctemplate__getfirstdocposition)</ept>","source":"[CDocTemplate::GetFirstDocPosition](#cdoctemplate__getfirstdocposition)"},{"content":"Retrieves the position of the first document associated with this template.","pos":[1968,2043]},{"pos":[2048,2101],"content":"<bpt id=\"p1\">[</bpt>CDocTemplate::GetNextDoc<ept id=\"p1\">](#cdoctemplate__getnextdoc)</ept>","source":"[CDocTemplate::GetNextDoc](#cdoctemplate__getnextdoc)"},{"content":"Retrieves a document and the position of the next one.","pos":[2102,2156]},{"pos":[2161,2230],"content":"<bpt id=\"p1\">[</bpt>CDocTemplate::InitialUpdateFrame<ept id=\"p1\">](#cdoctemplate__initialupdateframe)</ept>","source":"[CDocTemplate::InitialUpdateFrame](#cdoctemplate__initialupdateframe)"},{"content":"Initializes the frame window, and optionally makes it visible.","pos":[2231,2293]},{"pos":[2298,2355],"content":"<bpt id=\"p1\">[</bpt>CDocTemplate::LoadTemplate<ept id=\"p1\">](#cdoctemplate__loadtemplate)</ept>","source":"[CDocTemplate::LoadTemplate](#cdoctemplate__loadtemplate)"},{"pos":[2356,2420],"content":"Loads the resources for a given <ph id=\"ph1\">`CDocTemplate`</ph> or derived class.","source":"Loads the resources for a given `CDocTemplate` or derived class."},{"pos":[2425,2482],"content":"<bpt id=\"p1\">[</bpt>CDocTemplate::MatchDocType<ept id=\"p1\">](#cdoctemplate__matchdoctype)</ept>","source":"[CDocTemplate::MatchDocType](#cdoctemplate__matchdoctype)"},{"content":"Determines the degree of confidence in the match between a document type and this template.","pos":[2483,2574]},{"pos":[2579,2644],"content":"<bpt id=\"p1\">[</bpt>CDocTemplate::OpenDocumentFile<ept id=\"p1\">](#cdoctemplate__opendocumentfile)</ept>","source":"[CDocTemplate::OpenDocumentFile](#cdoctemplate__opendocumentfile)"},{"content":"Opens a file specified by a pathname.","pos":[2645,2682]},{"pos":[2687,2748],"content":"<bpt id=\"p1\">[</bpt>CDocTemplate::RemoveDocument<ept id=\"p1\">](#cdoctemplate__removedocument)</ept>","source":"[CDocTemplate::RemoveDocument](#cdoctemplate__removedocument)"},{"content":"Removes a document from a template.","pos":[2749,2784]},{"pos":[2789,2852],"content":"<bpt id=\"p1\">[</bpt>CDocTemplate::SaveAllModified<ept id=\"p1\">](#cdoctemplate__saveallmodified)</ept>","source":"[CDocTemplate::SaveAllModified](#cdoctemplate__saveallmodified)"},{"content":"Saves all documents associated with this template which have been modified.","pos":[2853,2928]},{"pos":[2933,2998],"content":"<bpt id=\"p1\">[</bpt>CDocTemplate::SetContainerInfo<ept id=\"p1\">](#cdoctemplate__setcontainerinfo)</ept>","source":"[CDocTemplate::SetContainerInfo](#cdoctemplate__setcontainerinfo)"},{"content":"Determines the resources for OLE containers when editing an in-place OLE item.","pos":[2999,3077]},{"pos":[3082,3145],"content":"<bpt id=\"p1\">[</bpt>CDocTemplate::SetDefaultTitle<ept id=\"p1\">](#cdoctemplate__setdefaulttitle)</ept>","source":"[CDocTemplate::SetDefaultTitle](#cdoctemplate__setdefaulttitle)"},{"content":"Displays the default title in the document window's title bar.","pos":[3146,3208]},{"pos":[3213,3274],"content":"<bpt id=\"p1\">[</bpt>CDocTemplate::SetPreviewInfo<ept id=\"p1\">](#cdoctemplate__setpreviewinfo)</ept>","source":"[CDocTemplate::SetPreviewInfo](#cdoctemplate__setpreviewinfo)"},{"content":"Setups out of process preview handler.","pos":[3275,3313]},{"pos":[3318,3377],"content":"<bpt id=\"p1\">[</bpt>CDocTemplate::SetServerInfo<ept id=\"p1\">](#cdoctemplate__setserverinfo)</ept>","source":"[CDocTemplate::SetServerInfo](#cdoctemplate__setserverinfo)"},{"content":"Determines the resources and classes when the server document is embedded or edited in-place.","pos":[3378,3471]},{"pos":[3481,3488],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You usually create one or more document templates in the implementation of your application's <ph id=\"ph1\">`InitInstance`</ph> function.","pos":[3492,3610],"source":"You usually create one or more document templates in the implementation of your application's `InitInstance` function."},{"content":"A document template defines the relationships among three types of classes:","pos":[3611,3686]},{"pos":[3696,3750],"content":"A document class, which you derive from <bpt id=\"p1\">**</bpt>CDocument<ept id=\"p1\">**</ept>.","source":"A document class, which you derive from **CDocument**."},{"content":"A view class, which displays data from the document class listed above.","pos":[3760,3831]},{"content":"You can derive this class from <ph id=\"ph1\">`CView`</ph>, <ph id=\"ph2\">`CScrollView`</ph>, <ph id=\"ph3\">`CFormView`</ph>, or <ph id=\"ph4\">`CEditView`</ph>.","pos":[3832,3915],"source":" You can derive this class from `CView`, `CScrollView`, `CFormView`, or `CEditView`."},{"content":"(You can also use <ph id=\"ph1\">`CEditView`</ph> directly.)","pos":[3916,3956],"source":" (You can also use `CEditView` directly.)"},{"content":"A frame window class, which contains the view.","pos":[3966,4012]},{"content":"For a single document interface (SDI) application, you derive this class from <ph id=\"ph1\">`CFrameWnd`</ph>.","pos":[4013,4103],"source":" For a single document interface (SDI) application, you derive this class from `CFrameWnd`."},{"content":"For a multiple document interface (MDI) application, you derive this class from <ph id=\"ph1\">`CMDIChildWnd`</ph>.","pos":[4104,4199],"source":" For a multiple document interface (MDI) application, you derive this class from `CMDIChildWnd`."},{"content":"If you don't need to customize the behavior of the frame window, you can use <ph id=\"ph1\">`CFrameWnd`</ph> or <ph id=\"ph2\">`CMDIChildWnd`</ph> directly without deriving your own class.","pos":[4200,4348],"source":" If you don't need to customize the behavior of the frame window, you can use `CFrameWnd` or `CMDIChildWnd` directly without deriving your own class."},{"content":"Your application has one document template for each type of document that it supports.","pos":[4355,4441]},{"content":"For example, if your application supports both spreadsheets and text documents, the application has two document template objects.","pos":[4442,4572]},{"content":"Each document template is responsible for creating and managing all the documents of its type.","pos":[4573,4667]},{"content":"The document template stores pointers to the <ph id=\"ph1\">`CRuntimeClass`</ph> objects for the document, view, and frame window classes.","pos":[4674,4792],"source":"The document template stores pointers to the `CRuntimeClass` objects for the document, view, and frame window classes."},{"content":"These <ph id=\"ph1\">`CRuntimeClass`</ph> objects are specified when constructing a document template.","pos":[4793,4875],"source":" These `CRuntimeClass` objects are specified when constructing a document template."},{"content":"The document template contains the ID of the resources used with the document type (such as menu, icon, or accelerator table resources).","pos":[4882,5018]},{"content":"The document template also has strings containing additional information about its document type.","pos":[5019,5116]},{"content":"These include the name of the document type (for example, \"Worksheet\") and the file extension (for example, \".xls\").","pos":[5117,5233]},{"content":"Optionally, it can contain other strings used by the application's user interface, the Windows File Manager, and Object Linking and Embedding (OLE) support.","pos":[5234,5390]},{"content":"If your application is an OLE container and/or server, the document template also defines the ID of the menu used during in-place activation.","pos":[5397,5538]},{"content":"If your application is an OLE server, the document template defines the ID of the toolbar and menu used during in-place activation.","pos":[5539,5670]},{"content":"You specify these additional OLE resources by calling <ph id=\"ph1\">`SetContainerInfo`</ph> and <ph id=\"ph2\">`SetServerInfo`</ph>.","pos":[5671,5764],"source":" You specify these additional OLE resources by calling `SetContainerInfo` and `SetServerInfo`."},{"content":"Because <ph id=\"ph1\">`CDocTemplate`</ph> is an abstract class, you cannot use the class directly.","pos":[5771,5850],"source":"Because `CDocTemplate` is an abstract class, you cannot use the class directly."},{"content":"A typical application uses one of the two <ph id=\"ph1\">`CDocTemplate`</ph>-derived classes provided by the Microsoft Foundation Class Library: <ph id=\"ph2\">`CSingleDocTemplate`</ph>, which implements SDI, and <ph id=\"ph3\">`CMultiDocTemplate`</ph>, which implements MDI.","pos":[5851,6066],"source":" A typical application uses one of the two `CDocTemplate`-derived classes provided by the Microsoft Foundation Class Library: `CSingleDocTemplate`, which implements SDI, and `CMultiDocTemplate`, which implements MDI."},{"content":"See those classes for more information on using document templates.","pos":[6067,6134]},{"pos":[6141,6295],"content":"If your application requires a user-interface paradigm that is fundamentally different from SDI or MDI, you can derive your own class from <ph id=\"ph1\">`CDocTemplate`</ph>.","source":"If your application requires a user-interface paradigm that is fundamentally different from SDI or MDI, you can derive your own class from `CDocTemplate`."},{"pos":[6302,6478],"content":"For more information on <ph id=\"ph1\">`CDocTemplate`</ph>, see <bpt id=\"p1\">[</bpt>Document Templates and the Document/View Creation Process<ept id=\"p1\">](../../mfc/document-templates-and-the-document-view-creation-process.md)</ept>.","source":"For more information on `CDocTemplate`, see [Document Templates and the Document/View Creation Process](../../mfc/document-templates-and-the-document-view-creation-process.md)."},{"pos":[6487,6508],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[6512,6559],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[6566,6619],"content":"<bpt id=\"p1\">[</bpt>CCmdTarget<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept>","source":"[CCmdTarget](../../mfc/reference/ccmdtarget-class.md)"},{"pos":[6649,6661],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[6665,6685],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxwin.h","source":"**Header:** afxwin.h"},{"pos":[6695,6762],"content":"<bpt id=\"p1\">&lt;a name=\"cdoctemplate__adddocument\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDocTemplate::AddDocument","linkify":"<a name=\"cdoctemplate__adddocument\"></a>  CDocTemplate::AddDocument","source":"<a name=\"cdoctemplate__adddocument\"></a>  CDocTemplate::AddDocument"},{"content":"Use this function to add a document to a template.","pos":[6766,6816]},{"pos":[6884,6894],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the document to be added.","pos":[6908,6946]},{"pos":[6956,6963],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The derived classes <bpt id=\"p1\">[</bpt>CMultiDocTemplate<ept id=\"p1\">](../../mfc/reference/cmultidoctemplate-class.md)</ept> and <bpt id=\"p2\">[</bpt>CSingleDocTemplate<ept id=\"p2\">](../../mfc/reference/csingledoctemplate-class.md)</ept> override this function.","pos":[6967,7152],"source":"The derived classes [CMultiDocTemplate](../../mfc/reference/cmultidoctemplate-class.md) and [CSingleDocTemplate](../../mfc/reference/csingledoctemplate-class.md) override this function."},{"content":"If you derive your own document-template class from <ph id=\"ph1\">`CDocTemplate`</ph>, your derived class must override this function.","pos":[7153,7268],"source":" If you derive your own document-template class from `CDocTemplate`, your derived class must override this function."},{"pos":[7278,7347],"content":"<bpt id=\"p1\">&lt;a name=\"cdoctemplate__cdoctemplate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDocTemplate::CDocTemplate","linkify":"<a name=\"cdoctemplate__cdoctemplate\"></a>  CDocTemplate::CDocTemplate","source":"<a name=\"cdoctemplate__cdoctemplate\"></a>  CDocTemplate::CDocTemplate"},{"pos":[7351,7386],"content":"Constructs a <ph id=\"ph1\">`CDocTemplate`</ph> object.","source":"Constructs a `CDocTemplate` object."},{"pos":[7548,7558],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the ID of the resources used with the document type.","pos":[7579,7641]},{"content":"This may include menu, icon, accelerator table, and string resources.","pos":[7642,7711]},{"content":"The string resource consists of up to seven substrings separated by the '\\n' character (the '\\n' character is needed as a place holder if a substring is not included; however, trailing '\\n' characters are not necessary); these substrings describe the document type.","pos":[7718,7983]},{"content":"For information on the substrings, see <bpt id=\"p1\">[</bpt>GetDocString<ept id=\"p1\">](#cdoctemplate__getdocstring)</ept>.","pos":[7984,8067],"source":" For information on the substrings, see [GetDocString](#cdoctemplate__getdocstring)."},{"content":"This string resource is found in the application's resource file.","pos":[8068,8133]},{"content":"For example:","pos":[8134,8146]},{"content":"Note that the string begins with a '\\n' character; this is because the first substring is not used for MDI applications and so is not included.","pos":[8341,8484]},{"content":"You can edit this string using the string editor; the entire string appears as a single entry in the String Editor, not as seven separate entries.","pos":[8485,8631]},{"content":"Points to the <ph id=\"ph1\">`CRuntimeClass`</ph> object of the document class.","pos":[8653,8712],"source":" Points to the `CRuntimeClass` object of the document class."},{"content":"This class is a <bpt id=\"p1\">**</bpt>CDocument<ept id=\"p1\">**</ept>-derived class you define to represent your documents.","pos":[8713,8796],"source":" This class is a **CDocument**-derived class you define to represent your documents."},{"content":"Points to the <ph id=\"ph1\">`CRuntimeClass`</ph> object of the frame window class.","pos":[8820,8883],"source":" Points to the `CRuntimeClass` object of the frame window class."},{"content":"This class can be a <ph id=\"ph1\">`CFrameWnd`</ph>-derived class, or it can be <ph id=\"ph2\">`CFrameWnd`</ph> itself if you want default behavior for your main frame window.","pos":[8884,9019],"source":" This class can be a `CFrameWnd`-derived class, or it can be `CFrameWnd` itself if you want default behavior for your main frame window."},{"content":"Points to the <ph id=\"ph1\">`CRuntimeClass`</ph> object of the view class.","pos":[9042,9097],"source":" Points to the `CRuntimeClass` object of the view class."},{"content":"This class is a <ph id=\"ph1\">`CView`</ph>-derived class you define to display your documents.","pos":[9098,9173],"source":" This class is a `CView`-derived class you define to display your documents."},{"pos":[9183,9190],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use this member function to construct a <ph id=\"ph1\">`CDocTemplate`</ph> object.","pos":[9194,9256],"source":"Use this member function to construct a `CDocTemplate` object."},{"content":"Dynamically allocate a <ph id=\"ph1\">`CDocTemplate`</ph> object and pass it to <bpt id=\"p1\">[</bpt>CWinApp::AddDocTemplate<ept id=\"p1\">](../../mfc/reference/cwinapp-class.md#cwinapp__adddoctemplate)</ept> from the <ph id=\"ph2\">`InitInstance`</ph> member function of your application class.","pos":[9257,9471],"source":" Dynamically allocate a `CDocTemplate` object and pass it to [CWinApp::AddDocTemplate](../../mfc/reference/cwinapp-class.md#cwinapp__adddoctemplate) from the `InitInstance` member function of your application class."},{"pos":[9481,9560],"content":"<bpt id=\"p1\">&lt;a name=\"cdoctemplate__closealldocuments\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDocTemplate::CloseAllDocuments","linkify":"<a name=\"cdoctemplate__closealldocuments\"></a>  CDocTemplate::CloseAllDocuments","source":"<a name=\"cdoctemplate__closealldocuments\"></a>  CDocTemplate::CloseAllDocuments"},{"content":"Call this member function to close all open documents.","pos":[9564,9618]},{"pos":[9693,9703],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies whether or not the session is being ended.","pos":[9724,9776]},{"content":"It is <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if the session is being ended; otherwise <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","pos":[9777,9843],"source":" It is **TRUE** if the session is being ended; otherwise **FALSE**."},{"pos":[9853,9860],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This member function is typically used as part of the File Exit command.","pos":[9864,9936]},{"content":"The default implementation of this function calls the <bpt id=\"p1\">[</bpt>CDocument::DeleteContents<ept id=\"p1\">](../../mfc/reference/cdocument-class.md#cdocument__deletecontents)</ept> member function to delete the document's data and then closes the frame windows for all the views attached to the document.","pos":[9937,10208],"source":" The default implementation of this function calls the [CDocument::DeleteContents](../../mfc/reference/cdocument-class.md#cdocument__deletecontents) member function to delete the document's data and then closes the frame windows for all the views attached to the document."},{"content":"Override this function if you want to require the user to perform special cleanup processing before the document is closed.","pos":[10215,10338]},{"content":"For example, if the document represents a record in a database, you may want to override this function to close the database.","pos":[10339,10464]},{"pos":[10474,10553],"content":"<bpt id=\"p1\">&lt;a name=\"cdoctemplate__createnewdocument\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDocTemplate::CreateNewDocument","linkify":"<a name=\"cdoctemplate__createnewdocument\"></a>  CDocTemplate::CreateNewDocument","source":"<a name=\"cdoctemplate__createnewdocument\"></a>  CDocTemplate::CreateNewDocument"},{"content":"Call this member function to create a new document of the type associated with this document template.","pos":[10557,10659]},{"pos":[10724,10736],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10740,10812],"content":"A pointer to the newly created document, or <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if an error occurs.","source":"A pointer to the newly created document, or **NULL** if an error occurs."},{"pos":[10822,10895],"content":"<bpt id=\"p1\">&lt;a name=\"cdoctemplate__createnewframe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDocTemplate::CreateNewFrame","linkify":"<a name=\"cdoctemplate__createnewframe\"></a>  CDocTemplate::CreateNewFrame","source":"<a name=\"cdoctemplate__createnewframe\"></a>  CDocTemplate::CreateNewFrame"},{"content":"Creates a new frame window containing a document and view.","pos":[10899,10957]},{"pos":[11064,11074],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The document to which the new frame window should refer.","pos":[11088,11144]},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[11145,11161],"source":" Can be **NULL**."},{"content":"The frame window on which the new frame window is to be based.","pos":[11180,11242]},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[11243,11259],"source":" Can be **NULL**."},{"pos":[11269,11281],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11285,11361],"content":"A pointer to the newly created frame window, or <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if an error occurs.","source":"A pointer to the newly created frame window, or **NULL** if an error occurs."},{"pos":[11371,11378],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`CreateNewFrame`</ph> uses the <ph id=\"ph2\">`CRuntimeClass`</ph> objects passed to the constructor to create a new frame window with a view and document attached.","pos":[11382,11521],"source":"`CreateNewFrame` uses the `CRuntimeClass` objects passed to the constructor to create a new frame window with a view and document attached."},{"content":"If the <ph id=\"ph1\">`pDoc`</ph> parameter is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the framework outputs a TRACE message.","pos":[11522,11597],"source":" If the `pDoc` parameter is **NULL**, the framework outputs a TRACE message."},{"content":"The <ph id=\"ph1\">`pOther`</ph> parameter is used to implement the Window New command.","pos":[11604,11671],"source":"The `pOther` parameter is used to implement the Window New command."},{"content":"It provides a frame window on which to model the new frame window.","pos":[11672,11738]},{"content":"The new frame window is usually created invisible.","pos":[11739,11789]},{"content":"Call this function to create frame windows outside the standard framework implementation of File New and File Open.","pos":[11790,11905]},{"pos":[11915,11988],"content":"<bpt id=\"p1\">&lt;a name=\"cdoctemplate__createoleframe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDocTemplate::CreateOleFrame","linkify":"<a name=\"cdoctemplate__createoleframe\"></a>  CDocTemplate::CreateOleFrame","source":"<a name=\"cdoctemplate__createoleframe\"></a>  CDocTemplate::CreateOleFrame"},{"content":"Creates an OLE frame window.","pos":[11992,12020]},{"pos":[12142,12152],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the frame's parent window.","pos":[12172,12211]},{"content":"A pointer to the document to which the new OLE frame window should refer.","pos":[12228,12301]},{"content":"Determines whether a view is created along with the frame.","pos":[12325,12383]},{"pos":[12393,12405],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12409,12471],"content":"A pointer to a frame window if successful; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"A pointer to a frame window if successful; otherwise **NULL**."},{"pos":[12481,12488],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12492,12544],"content":"If <ph id=\"ph1\">`bCreateView`</ph> is zero, an empty frame is created.","source":"If `bCreateView` is zero, an empty frame is created."},{"pos":[12554,12623],"content":"<bpt id=\"p1\">&lt;a name=\"cdoctemplate__getdocstring\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDocTemplate::GetDocString","linkify":"<a name=\"cdoctemplate__getdocstring\"></a>  CDocTemplate::GetDocString","source":"<a name=\"cdoctemplate__getdocstring\"></a>  CDocTemplate::GetDocString"},{"content":"Retrieves a string associated with the document type.","pos":[12627,12680]},{"pos":[12797,12807],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to a <ph id=\"ph1\">`CString`</ph> object that will contain the string when the function returns.","pos":[12824,12913],"source":" A reference to a `CString` object that will contain the string when the function returns."},{"content":"<bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>","pos":[12920,12927],"source":"*index*"},{"content":"An index of the substring being retrieved from the string that describes the document type.","pos":[12931,13022]},{"content":"This parameter can have one of the following values:","pos":[13023,13075]},{"content":"<bpt id=\"p1\">**</bpt>CDocTemplate::windowTitle<ept id=\"p1\">**</ept> Name that appears in the application window's title bar (for example, \"Microsoft Excel\").","pos":[13083,13202],"source":"**CDocTemplate::windowTitle** Name that appears in the application window's title bar (for example, \"Microsoft Excel\")."},{"content":"Present only in the document template for SDI applications.","pos":[13203,13262]},{"content":"<bpt id=\"p1\">**</bpt>CDocTemplate::docName<ept id=\"p1\">**</ept> Root for the default document name (for example, \"Sheet\").","pos":[13270,13354],"source":"**CDocTemplate::docName** Root for the default document name (for example, \"Sheet\")."},{"content":"This root, plus a number, is used for the default name of a new document of this type whenever the user chooses the New command from the File menu (for example, \"Sheet1\" or \"Sheet2\").","pos":[13355,13538]},{"content":"If not specified, \"Untitled\" is used as the default.","pos":[13539,13591]},{"content":"<bpt id=\"p1\">**</bpt>CDocTemplate::fileNewName<ept id=\"p1\">**</ept> Name of this document type.","pos":[13599,13656],"source":"**CDocTemplate::fileNewName** Name of this document type."},{"content":"If the application supports more than one type of document, this string is displayed in the File New dialog box (for example, \"Worksheet\").","pos":[13657,13796]},{"content":"If not specified, the document type is inaccessible using the File New command.","pos":[13797,13876]},{"content":"<bpt id=\"p1\">**</bpt>CDocTemplate::filterName<ept id=\"p1\">**</ept> Description of the document type and a wildcard filter matching documents of this type.","pos":[13884,14000],"source":"**CDocTemplate::filterName** Description of the document type and a wildcard filter matching documents of this type."},{"content":"This string is displayed in the List Files Of Type drop-down list in the File Open dialog box (for example, \"Worksheets (*.xls)\").","pos":[14001,14131]},{"content":"If not specified, the document type is inaccessible using the File Open command.","pos":[14132,14212]},{"content":"<bpt id=\"p1\">**</bpt>CDocTemplate::filterExt<ept id=\"p1\">**</ept> Extension for documents of this type (for example, \".xls\").","pos":[14220,14307],"source":"**CDocTemplate::filterExt** Extension for documents of this type (for example, \".xls\")."},{"content":"If not specified, the document type is inaccessible using the File Open command.","pos":[14308,14388]},{"content":"<bpt id=\"p1\">**</bpt>CDocTemplate::regFileTypeId<ept id=\"p1\">**</ept> Identifier for the document type to be stored in the registration database maintained by Windows.","pos":[14396,14525],"source":"**CDocTemplate::regFileTypeId** Identifier for the document type to be stored in the registration database maintained by Windows."},{"content":"This string is for internal use only (for example, \"ExcelWorksheet\").","pos":[14526,14595]},{"content":"If not specified, the document type cannot be registered with the Windows File Manager.","pos":[14596,14683]},{"content":"<bpt id=\"p1\">**</bpt>CDocTemplate::regFileTypeName<ept id=\"p1\">**</ept> Name of the document type to be stored in the registration database.","pos":[14691,14793],"source":"**CDocTemplate::regFileTypeName** Name of the document type to be stored in the registration database."},{"content":"This string may be displayed in dialog boxes of applications that access the registration database (for example, \"Microsoft Excel Worksheet\").","pos":[14794,14936]},{"pos":[14946,14958],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the specified substring was found; otherwise 0.","pos":[14962,15020]},{"pos":[15030,15037],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this function to retrieve a specific substring describing the document type.","pos":[15041,15122]},{"content":"The string containing these substrings is stored in the document template and is derived from a string in the resource file for the application.","pos":[15123,15267]},{"content":"The framework calls this function to get the strings it needs for the application's user interface.","pos":[15268,15367]},{"content":"If you have specified a filename extension for your application's documents, the framework also calls this function when adding an entry to the Windows registration database; this allows documents to be opened from the Windows File Manager.","pos":[15368,15608]},{"pos":[15615,15694],"content":"Call this function only if you are deriving your own class from <ph id=\"ph1\">`CDocTemplate`</ph>.","source":"Call this function only if you are deriving your own class from `CDocTemplate`."},{"pos":[15704,15787],"content":"<bpt id=\"p1\">&lt;a name=\"cdoctemplate__getfirstdocposition\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDocTemplate::GetFirstDocPosition","linkify":"<a name=\"cdoctemplate__getfirstdocposition\"></a>  CDocTemplate::GetFirstDocPosition","source":"<a name=\"cdoctemplate__getfirstdocposition\"></a>  CDocTemplate::GetFirstDocPosition"},{"content":"Retrieves the position of the first document associated with this template.","pos":[15791,15866]},{"pos":[15943,15955],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[15959,16111],"content":"A <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value that can be used to iterate through the list of documents associated with this document template; or <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept> if the list is empty.","source":"A **POSITION** value that can be used to iterate through the list of documents associated with this document template; or **NULL** if the list is empty."},{"pos":[16121,16128],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use this function to get the position of the first document in the list of documents associated with this template.","pos":[16132,16247]},{"content":"Use the <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value as an argument to <bpt id=\"p2\">[</bpt>CDocTemplate::GetNextDoc<ept id=\"p2\">](#cdoctemplate__getnextdoc)</ept> to iterate through the list of documents associated with the template.","pos":[16248,16417],"source":" Use the **POSITION** value as an argument to [CDocTemplate::GetNextDoc](#cdoctemplate__getnextdoc) to iterate through the list of documents associated with the template."},{"content":"<bpt id=\"p1\">[</bpt>CSingleDocTemplate<ept id=\"p1\">](../../mfc/reference/csingledoctemplate-class.md)</ept> and <bpt id=\"p2\">[</bpt>CMultiDocTemplate<ept id=\"p2\">](../../mfc/reference/cmultidoctemplate-class.md)</ept> both override this pure virtual function.","pos":[16424,16607],"source":"[CSingleDocTemplate](../../mfc/reference/csingledoctemplate-class.md) and [CMultiDocTemplate](../../mfc/reference/cmultidoctemplate-class.md) both override this pure virtual function."},{"content":"Any class you derive from <ph id=\"ph1\">`CDocTemplate`</ph> must also override this function.","pos":[16608,16682],"source":" Any class you derive from `CDocTemplate` must also override this function."},{"pos":[16692,16757],"content":"<bpt id=\"p1\">&lt;a name=\"cdoctemplate__getnextdoc\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDocTemplate::GetNextDoc","linkify":"<a name=\"cdoctemplate__getnextdoc\"></a>  CDocTemplate::GetNextDoc","source":"<a name=\"cdoctemplate__getnextdoc\"></a>  CDocTemplate::GetNextDoc"},{"pos":[16761,16883],"content":"Retrieves the list element identified by <ph id=\"ph1\">`rPos`</ph>, then sets <ph id=\"ph2\">`rPos`</ph> to the <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value of the next entry in the list.","source":"Retrieves the list element identified by `rPos`, then sets `rPos` to the **POSITION** value of the next entry in the list."},{"pos":[16967,16979],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the next document in the list of documents associated with this template.","pos":[16983,17069]},{"pos":[17079,17089],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to a <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value returned by a previous call to <bpt id=\"p2\">[</bpt>GetFirstDocPosition<ept id=\"p2\">](#cdoctemplate__getfirstdocposition)</ept> or <ph id=\"ph1\">`GetNextDoc`</ph>.","pos":[17103,17244],"source":" A reference to a **POSITION** value returned by a previous call to [GetFirstDocPosition](#cdoctemplate__getfirstdocposition) or `GetNextDoc`."},{"pos":[17254,17261],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17265,17363],"content":"If the retrieved element is the last in the list, then the new value of <ph id=\"ph1\">`rPos`</ph> is set to <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"If the retrieved element is the last in the list, then the new value of `rPos` is set to **NULL**."},{"pos":[17370,17534],"content":"You can use <ph id=\"ph1\">`GetNextDoc`</ph> in a forward iteration loop if you establish the initial position with a call to <bpt id=\"p1\">[</bpt>GetFirstDocPosition<ept id=\"p1\">](#cdoctemplate__getfirstdocposition)</ept>.","source":"You can use `GetNextDoc` in a forward iteration loop if you establish the initial position with a call to [GetFirstDocPosition](#cdoctemplate__getfirstdocposition)."},{"content":"You must ensure that your <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value represents a valid position in the list.","pos":[17541,17626],"source":"You must ensure that your **POSITION** value represents a valid position in the list."},{"content":"If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.","pos":[17627,17718]},{"pos":[17728,17809],"content":"<bpt id=\"p1\">&lt;a name=\"cdoctemplate__initialupdateframe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDocTemplate::InitialUpdateFrame","linkify":"<a name=\"cdoctemplate__initialupdateframe\"></a>  CDocTemplate::InitialUpdateFrame","source":"<a name=\"cdoctemplate__initialupdateframe\"></a>  CDocTemplate::InitialUpdateFrame"},{"content":"Initializes the frame window, and optionally makes it visible.","pos":[17813,17875]},{"pos":[18012,18022],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The frame window that needs the initial update.","pos":[18038,18085]},{"content":"The document to which the frame is associated.","pos":[18102,18148]},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[18149,18165],"source":" Can be **NULL**."},{"content":"Indicates whether the frame should become visible and active.","pos":[18190,18251]},{"pos":[18261,18268],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call <bpt id=\"p1\">**</bpt>IntitialUpdateFrame<ept id=\"p1\">**</ept> after creating a new frame with <ph id=\"ph1\">`CreateNewFrame`</ph>.","pos":[18272,18350],"source":"Call **IntitialUpdateFrame** after creating a new frame with `CreateNewFrame`."},{"content":"Calling this function causes the views in that frame window to receive their <ph id=\"ph1\">`OnInitialUpdate`</ph> calls.","pos":[18351,18452],"source":" Calling this function causes the views in that frame window to receive their `OnInitialUpdate` calls."},{"content":"Also, if there was not previously an active view, the primary view of the frame window is made active; the primary view is a view with a child ID of <bpt id=\"p1\">**</bpt>AFX_IDW_PANE_FIRST<ept id=\"p1\">**</ept>.","pos":[18453,18625],"source":" Also, if there was not previously an active view, the primary view of the frame window is made active; the primary view is a view with a child ID of **AFX_IDW_PANE_FIRST**."},{"content":"Finally, the frame window is made visible if <ph id=\"ph1\">`bMakeVisible`</ph> is non-zero.","pos":[18626,18698],"source":" Finally, the frame window is made visible if `bMakeVisible` is non-zero."},{"content":"If <ph id=\"ph1\">`bMakeVisible`</ph> is zero, the current focus and visible state of the frame window will remain unchanged.","pos":[18699,18804],"source":" If `bMakeVisible` is zero, the current focus and visible state of the frame window will remain unchanged."},{"content":"It is not necessary to call this function when using the framework's implementation of File New and File Open.","pos":[18811,18921]},{"pos":[18931,19000],"content":"<bpt id=\"p1\">&lt;a name=\"cdoctemplate__loadtemplate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDocTemplate::LoadTemplate","linkify":"<a name=\"cdoctemplate__loadtemplate\"></a>  CDocTemplate::LoadTemplate","source":"<a name=\"cdoctemplate__loadtemplate\"></a>  CDocTemplate::LoadTemplate"},{"pos":[19004,19068],"content":"Loads the resources for a given <ph id=\"ph1\">`CDocTemplate`</ph> or derived class.","source":"Loads the resources for a given `CDocTemplate` or derived class."},{"pos":[19122,19129],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This member function is called by the framework to load the resources for a given <ph id=\"ph1\">`CDocTemplate`</ph> or derived class.","pos":[19133,19247],"source":"This member function is called by the framework to load the resources for a given `CDocTemplate` or derived class."},{"content":"Normally it is called during construction, except when the template is being constructed globally.","pos":[19248,19346]},{"content":"In that case, the call to <ph id=\"ph1\">`LoadTemplate`</ph> is delayed until <bpt id=\"p1\">[</bpt>CWinApp::AddDocTemplate<ept id=\"p1\">](../../mfc/reference/cwinapp-class.md#cwinapp__adddoctemplate)</ept> is called.","pos":[19347,19503],"source":" In that case, the call to `LoadTemplate` is delayed until [CWinApp::AddDocTemplate](../../mfc/reference/cwinapp-class.md#cwinapp__adddoctemplate) is called."},{"pos":[19513,19582],"content":"<bpt id=\"p1\">&lt;a name=\"cdoctemplate__matchdoctype\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDocTemplate::MatchDocType","linkify":"<a name=\"cdoctemplate__matchdoctype\"></a>  CDocTemplate::MatchDocType","source":"<a name=\"cdoctemplate__matchdoctype\"></a>  CDocTemplate::MatchDocType"},{"content":"Determines the degree of confidence in the match between a document type and this template.","pos":[19586,19677]},{"pos":[19792,19802],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pathname of the file whose type is to be determined.","pos":[19824,19876]},{"content":"Pointer to a document that is assigned the matching document, if the file specified by <ph id=\"ph1\">`lpszPathName`</ph> is already open.","pos":[19899,20017],"source":" Pointer to a document that is assigned the matching document, if the file specified by `lpszPathName` is already open."},{"pos":[20027,20039],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20043,20116],"content":"A value from the <bpt id=\"p1\">**</bpt>Confidence<ept id=\"p1\">**</ept> enumeration, which is defined as follows:","source":"A value from the **Confidence** enumeration, which is defined as follows:"},{"pos":[20323,20330],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use this function to determine the type of document template to use for opening a file.","pos":[20334,20421]},{"content":"If your application supports multiple file types, for example, you can use this function to determine which of the available document templates is appropriate for a given file by calling <ph id=\"ph1\">`MatchDocType`</ph> for each template in turn, and choosing a template according to the confidence value returned.","pos":[20422,20718],"source":" If your application supports multiple file types, for example, you can use this function to determine which of the available document templates is appropriate for a given file by calling `MatchDocType` for each template in turn, and choosing a template according to the confidence value returned."},{"pos":[20725,20912],"content":"If the file specified by <ph id=\"ph1\">`lpszPathName`</ph> is already open, this function returns <bpt id=\"p1\">**</bpt>CDocTemplate::yesAlreadyOpen<ept id=\"p1\">**</ept> and copies the file's <bpt id=\"p2\">**</bpt>CDocument<ept id=\"p2\">**</ept> object into the object at <ph id=\"ph2\">`rpDocMatch`</ph>.","source":"If the file specified by `lpszPathName` is already open, this function returns **CDocTemplate::yesAlreadyOpen** and copies the file's **CDocument** object into the object at `rpDocMatch`."},{"content":"If the file is not open but the extension in <ph id=\"ph1\">`lpszPathName`</ph> matches the extension specified by <bpt id=\"p1\">**</bpt>CDocTemplate::filterExt<ept id=\"p1\">**</ept>, this function returns <bpt id=\"p2\">**</bpt>CDocTemplate::yesAttemptNative<ept id=\"p2\">**</ept> and sets <ph id=\"ph2\">`rpDocMatch`</ph> to <bpt id=\"p3\">**</bpt>NULL<ept id=\"p3\">**</ept>.","pos":[20919,21134],"source":"If the file is not open but the extension in `lpszPathName` matches the extension specified by **CDocTemplate::filterExt**, this function returns **CDocTemplate::yesAttemptNative** and sets `rpDocMatch` to **NULL**."},{"content":"For more information on <bpt id=\"p1\">**</bpt>CDocTemplate::filterExt<ept id=\"p1\">**</ept>, see <bpt id=\"p2\">[</bpt>CDocTemplate::GetDocString<ept id=\"p2\">](#cdoctemplate__getdocstring)</ept>.","pos":[21135,21250],"source":" For more information on **CDocTemplate::filterExt**, see [CDocTemplate::GetDocString](#cdoctemplate__getdocstring)."},{"pos":[21257,21339],"content":"If neither case is true, the function returns <bpt id=\"p1\">**</bpt>CDocTemplate::yesAttemptForeign<ept id=\"p1\">**</ept>.","source":"If neither case is true, the function returns **CDocTemplate::yesAttemptForeign**."},{"content":"The default implementation does not return <bpt id=\"p1\">**</bpt>CDocTemplate::maybeAttemptForeign<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>CDocTemplate::maybeAttemptNative<ept id=\"p2\">**</ept>.","pos":[21346,21467],"source":"The default implementation does not return **CDocTemplate::maybeAttemptForeign** or **CDocTemplate::maybeAttemptNative**."},{"content":"Override this function to implement type-matching logic appropriate to your application, perhaps using these two values from the <bpt id=\"p1\">**</bpt>Confidence<ept id=\"p1\">**</ept> enumeration.","pos":[21468,21624],"source":" Override this function to implement type-matching logic appropriate to your application, perhaps using these two values from the **Confidence** enumeration."},{"pos":[21634,21711],"content":"<bpt id=\"p1\">&lt;a name=\"cdoctemplate__opendocumentfile\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDocTemplate::OpenDocumentFile","linkify":"<a name=\"cdoctemplate__opendocumentfile\"></a>  CDocTemplate::OpenDocumentFile","source":"<a name=\"cdoctemplate__opendocumentfile\"></a>  CDocTemplate::OpenDocumentFile"},{"content":"Opens a file specified by a path.","pos":[21715,21748]},{"pos":[21937,21947],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`lpszPathName`</ph>","pos":[21951,21970],"source":"[in] `lpszPathName`"},{"content":"Pointer to the path of the file that contains the document to be opened.","pos":[21974,22046]},{"content":"[in] <ph id=\"ph1\">`bAddToMRU`</ph>","pos":[22053,22069],"source":"[in] `bAddToMRU`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> indicates the document is one of the most recent files; <ph id=\"ph2\">`FALSE`</ph> indicates the document is not one of the most recent files.","pos":[22072,22203],"source":" `TRUE` indicates the document is one of the most recent files; `FALSE` indicates the document is not one of the most recent files."},{"pos":[22213,22225],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22229,22317],"content":"A pointer to the document whose file is named by <ph id=\"ph1\">`lpszPathName`</ph>; <ph id=\"ph2\">`NULL`</ph> if unsuccessful.","source":"A pointer to the document whose file is named by `lpszPathName`; `NULL` if unsuccessful."},{"pos":[22327,22334],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Opens the file whose path is specified by <ph id=\"ph1\">`lpszPathName`</ph>.","pos":[22338,22395],"source":"Opens the file whose path is specified by `lpszPathName`."},{"content":"If <ph id=\"ph1\">`lpszPathName`</ph> is <ph id=\"ph2\">`NULL`</ph>, a new file that contains a document of the type associated with this template is created.","pos":[22396,22514],"source":" If `lpszPathName` is `NULL`, a new file that contains a document of the type associated with this template is created."},{"pos":[22524,22597],"content":"<bpt id=\"p1\">&lt;a name=\"cdoctemplate__removedocument\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDocTemplate::RemoveDocument","linkify":"<a name=\"cdoctemplate__removedocument\"></a>  CDocTemplate::RemoveDocument","source":"<a name=\"cdoctemplate__removedocument\"></a>  CDocTemplate::RemoveDocument"},{"pos":[22601,22700],"content":"Removes the document pointed to by <ph id=\"ph1\">`pDoc`</ph> from the list of documents associated with this template.","source":"Removes the document pointed to by `pDoc` from the list of documents associated with this template."},{"pos":[22771,22781],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to the document to be removed.","pos":[22795,22833]},{"pos":[22843,22850],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The derived classes <ph id=\"ph1\">`CMultiDocTemplate`</ph> and <ph id=\"ph2\">`CSingleDocTemplate`</ph> override this function.","pos":[22854,22942],"source":"The derived classes `CMultiDocTemplate` and `CSingleDocTemplate` override this function."},{"content":"If you derive your own document-template class from <ph id=\"ph1\">`CDocTemplate`</ph>, your derived class must override this function.","pos":[22943,23058],"source":" If you derive your own document-template class from `CDocTemplate`, your derived class must override this function."},{"pos":[23068,23143],"content":"<bpt id=\"p1\">&lt;a name=\"cdoctemplate__saveallmodified\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDocTemplate::SaveAllModified","linkify":"<a name=\"cdoctemplate__saveallmodified\"></a>  CDocTemplate::SaveAllModified","source":"<a name=\"cdoctemplate__saveallmodified\"></a>  CDocTemplate::SaveAllModified"},{"content":"Saves all documents that have been modified.","pos":[23147,23191]},{"pos":[23248,23260],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Non-zero if successful; otherwise 0.","pos":[23264,23300]},{"pos":[23310,23387],"content":"<bpt id=\"p1\">&lt;a name=\"cdoctemplate__setcontainerinfo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDocTemplate::SetContainerInfo","linkify":"<a name=\"cdoctemplate__setcontainerinfo\"></a>  CDocTemplate::SetContainerInfo","source":"<a name=\"cdoctemplate__setcontainerinfo\"></a>  CDocTemplate::SetContainerInfo"},{"content":"Determines the resources for OLE containers when editing an in-place OLE item.","pos":[23391,23469]},{"pos":[23546,23556],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The ID of the resources used when an embedded object is activated.","pos":[23588,23654]},{"pos":[23664,23671],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this function to set the resources to be used when an OLE object is in-place activated.","pos":[23675,23767]},{"content":"These resources may include menus and accelerator tables.","pos":[23768,23825]},{"content":"This function is usually called in the <bpt id=\"p1\">[</bpt>CWinApp::InitInstance<ept id=\"p1\">](../../mfc/reference/cwinapp-class.md#cwinapp__initinstance)</ept> function of your application.","pos":[23826,23978],"source":" This function is usually called in the [CWinApp::InitInstance](../../mfc/reference/cwinapp-class.md#cwinapp__initinstance) function of your application."},{"content":"The menu associated with <ph id=\"ph1\">`nIDOleInPlaceContainer`</ph> contains separators that allow the menu of the activated in-place item to merge with the menu of the container application.","pos":[23985,24158],"source":"The menu associated with `nIDOleInPlaceContainer` contains separators that allow the menu of the activated in-place item to merge with the menu of the container application."},{"content":"For more information about merging server and container menus, see the article <bpt id=\"p1\">[</bpt>Menus and Resources (OLE)<ept id=\"p1\">](../../mfc/menus-and-resources-ole.md)</ept>.","pos":[24159,24304],"source":" For more information about merging server and container menus, see the article [Menus and Resources (OLE)](../../mfc/menus-and-resources-ole.md)."},{"pos":[24314,24389],"content":"<bpt id=\"p1\">&lt;a name=\"cdoctemplate__setdefaulttitle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDocTemplate::SetDefaultTitle","linkify":"<a name=\"cdoctemplate__setdefaulttitle\"></a>  CDocTemplate::SetDefaultTitle","source":"<a name=\"cdoctemplate__setdefaulttitle\"></a>  CDocTemplate::SetDefaultTitle"},{"content":"Call this function to load the document's default title and display it in the document's title bar.","pos":[24393,24492]},{"pos":[24575,24585],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>pDocument<ept id=\"p1\">*</ept>","pos":[24589,24600],"source":"*pDocument*"},{"content":"Pointer to the document whose title is to be set.","pos":[24604,24653]},{"pos":[24663,24670],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[24674,24822],"content":"For information on the default title, see the description of <bpt id=\"p1\">**</bpt>CDocTemplate::docName<ept id=\"p1\">**</ept> in <bpt id=\"p2\">[</bpt>CDocTemplate::GetDocString<ept id=\"p2\">](#cdoctemplate__getdocstring)</ept>.","source":"For information on the default title, see the description of **CDocTemplate::docName** in [CDocTemplate::GetDocString](#cdoctemplate__getdocstring)."},{"pos":[24832,24903],"content":"<bpt id=\"p1\">&lt;a name=\"cdoctemplate__setserverinfo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDocTemplate::SetServerInfo","linkify":"<a name=\"cdoctemplate__setserverinfo\"></a>  CDocTemplate::SetServerInfo","source":"<a name=\"cdoctemplate__setserverinfo\"></a>  CDocTemplate::SetServerInfo"},{"content":"Determines the resources and classes when the server document is embedded or edited in-place.","pos":[24907,25000]},{"pos":[25195,25205],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>nIDOleEmbedding<ept id=\"p1\">*</ept>","pos":[25209,25226],"source":"*nIDOleEmbedding*"},{"content":"The ID of the resources used when an embedded object is opened in a separate window.","pos":[25230,25314]},{"content":"The ID of the resources used when an embedded object is activated in-place.","pos":[25346,25421]},{"content":"<bpt id=\"p1\">*</bpt>pOleFrameClass<ept id=\"p1\">*</ept>","pos":[25428,25444],"source":"*pOleFrameClass*"},{"content":"Pointer to a <bpt id=\"p1\">[</bpt>CRuntimeClass<ept id=\"p1\">](../../mfc/reference/cruntimeclass-structure.md)</ept> structure containing class information for the frame window object created when in-place activation occurs.","pos":[25448,25632],"source":" Pointer to a [CRuntimeClass](../../mfc/reference/cruntimeclass-structure.md) structure containing class information for the frame window object created when in-place activation occurs."},{"content":"<bpt id=\"p1\">*</bpt>pOleViewClass<ept id=\"p1\">*</ept>","pos":[25639,25654],"source":"*pOleViewClass*"},{"content":"Pointer to a <ph id=\"ph1\">`CRuntimeClass`</ph> structure containing class information for the view object created when in-place activation occurs.","pos":[25658,25786],"source":" Pointer to a `CRuntimeClass` structure containing class information for the view object created when in-place activation occurs."},{"pos":[25796,25803],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this member function to identify resources that will be used by the server application when the user requests activation of an embedded object.","pos":[25807,25955]},{"content":"These resources consist of menus and accelerator tables.","pos":[25956,26012]},{"content":"This function is usually called in the <ph id=\"ph1\">`InitInstance`</ph> of your application.","pos":[26013,26087],"source":" This function is usually called in the `InitInstance` of your application."},{"content":"The menu associated with <ph id=\"ph1\">`nIDOleInPlaceServer`</ph> contains separators that allow the server menu to merge with the menu of the container.","pos":[26094,26228],"source":"The menu associated with `nIDOleInPlaceServer` contains separators that allow the server menu to merge with the menu of the container."},{"content":"For more information about merging server and container menus, see the article <bpt id=\"p1\">[</bpt>Menus and Resources (OLE)<ept id=\"p1\">](../../mfc/menus-and-resources-ole.md)</ept>.","pos":[26229,26374],"source":" For more information about merging server and container menus, see the article [Menus and Resources (OLE)](../../mfc/menus-and-resources-ole.md)."},{"pos":[26384,26465],"content":"<bpt id=\"p1\">&lt;a name=\"cdoctemplate__createpreviewframe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDocTemplate::CreatePreviewFrame","linkify":"<a name=\"cdoctemplate__createpreviewframe\"></a>  CDocTemplate::CreatePreviewFrame","source":"<a name=\"cdoctemplate__createpreviewframe\"></a>  CDocTemplate::CreatePreviewFrame"},{"content":"Creates a child frame used for Rich Preview.","pos":[26469,26513]},{"pos":[26615,26625],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a parent window (usually provided by the Shell).","pos":[26645,26706]},{"content":"A pointer to a document object, whose content will be previewed.","pos":[26723,26787]},{"pos":[26797,26809],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[26813,26886],"content":"A valid pointer to a <ph id=\"ph1\">`CFrameWnd`</ph> object, or <ph id=\"ph2\">`NULL`</ph> if the creation fails.","source":"A valid pointer to a `CFrameWnd` object, or `NULL` if the creation fails."},{"pos":[26896,26903],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[26913,26986],"content":"<bpt id=\"p1\">&lt;a name=\"cdoctemplate__setpreviewinfo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDocTemplate::SetPreviewInfo","linkify":"<a name=\"cdoctemplate__setpreviewinfo\"></a>  CDocTemplate::SetPreviewInfo","source":"<a name=\"cdoctemplate__setpreviewinfo\"></a>  CDocTemplate::SetPreviewInfo"},{"content":"Sets up the out of process preview handler.","pos":[26990,27033]},{"pos":[27201,27211],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies a resource ID of the preview frame.","pos":[27236,27281]},{"content":"Specifies a pointer to a runtime class information structure of the preview frame.","pos":[27312,27394]},{"content":"Specifies a pointer to a runtime class information structure of the preview view.","pos":[27424,27505]},{"pos":[27515,27522],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[27531,27539],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>CCmdTarget Class<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[27543,27603],"source":"[CCmdTarget Class](../../mfc/reference/ccmdtarget-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[27606,27655],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CSingleDocTemplate Class<ept id=\"p1\">](../../mfc/reference/csingledoctemplate-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[27658,27735],"source":" [CSingleDocTemplate Class](../../mfc/reference/csingledoctemplate-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CMultiDocTemplate Class<ept id=\"p1\">](../../mfc/reference/cmultidoctemplate-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[27738,27813],"source":" [CMultiDocTemplate Class](../../mfc/reference/cmultidoctemplate-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CDocument Class<ept id=\"p1\">](../../mfc/reference/cdocument-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[27816,27875],"source":" [CDocument Class](../../mfc/reference/cdocument-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CView Class<ept id=\"p1\">](../../mfc/reference/cview-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[27878,27929],"source":" [CView Class](../../mfc/reference/cview-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CScrollView Class<ept id=\"p1\">](../../mfc/reference/cscrollview-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[27932,27995],"source":" [CScrollView Class](../../mfc/reference/cscrollview-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CEditView Class<ept id=\"p1\">](../../mfc/reference/ceditview-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[27998,28057],"source":" [CEditView Class](../../mfc/reference/ceditview-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CFormView Class<ept id=\"p1\">](../../mfc/reference/cformview-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[28060,28119],"source":" [CFormView Class](../../mfc/reference/cformview-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CFrameWnd Class<ept id=\"p1\">](../../mfc/reference/cframewnd-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[28122,28181],"source":" [CFrameWnd Class](../../mfc/reference/cframewnd-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CMDIChildWnd Class<ept id=\"p1\">](../../mfc/reference/cmdichildwnd-class.md)</ept>","pos":[28184,28248],"source":" [CMDIChildWnd Class](../../mfc/reference/cmdichildwnd-class.md)"}],"content":"---\ntitle: \"CDocTemplate Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CDocTemplate\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"document templates\"\n  - \"templates, document\"\n  - \"CDocTemplate class\"\nms.assetid: 14b41a1f-bf9d-4eac-b6a8-4c54ffcc77f6\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CDocTemplate Class\nAn abstract base class that defines the basic functionality for document templates.  \n  \n## Syntax  \n  \n```  \nclass CDocTemplate : public CCmdTarget  \n```  \n  \n## Members  \n  \n### Protected Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CDocTemplate::CDocTemplate](#cdoctemplate__cdoctemplate)|Constructs a `CDocTemplate` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CDocTemplate::AddDocument](#cdoctemplate__adddocument)|Adds a document to a template.|  \n|[CDocTemplate::CloseAllDocuments](#cdoctemplate__closealldocuments)|Closes all documents associated with this template.|  \n|[CDocTemplate::CreateNewDocument](#cdoctemplate__createnewdocument)|Creates a new document.|  \n|[CDocTemplate::CreateNewFrame](#cdoctemplate__createnewframe)|Creates a new frame window containing a document and view.|  \n|[CDocTemplate::CreateOleFrame](#cdoctemplate__createoleframe)|Creates an OLE-enabled frame window.|  \n|[CDocTemplate::CreatePreviewFrame](#cdoctemplate__createpreviewframe)|Creates a child frame used for Rich Preview.|  \n|[CDocTemplate::GetDocString](#cdoctemplate__getdocstring)|Retrieves a string associated with the document type.|  \n|[CDocTemplate::GetFirstDocPosition](#cdoctemplate__getfirstdocposition)|Retrieves the position of the first document associated with this template.|  \n|[CDocTemplate::GetNextDoc](#cdoctemplate__getnextdoc)|Retrieves a document and the position of the next one.|  \n|[CDocTemplate::InitialUpdateFrame](#cdoctemplate__initialupdateframe)|Initializes the frame window, and optionally makes it visible.|  \n|[CDocTemplate::LoadTemplate](#cdoctemplate__loadtemplate)|Loads the resources for a given `CDocTemplate` or derived class.|  \n|[CDocTemplate::MatchDocType](#cdoctemplate__matchdoctype)|Determines the degree of confidence in the match between a document type and this template.|  \n|[CDocTemplate::OpenDocumentFile](#cdoctemplate__opendocumentfile)|Opens a file specified by a pathname.|  \n|[CDocTemplate::RemoveDocument](#cdoctemplate__removedocument)|Removes a document from a template.|  \n|[CDocTemplate::SaveAllModified](#cdoctemplate__saveallmodified)|Saves all documents associated with this template which have been modified.|  \n|[CDocTemplate::SetContainerInfo](#cdoctemplate__setcontainerinfo)|Determines the resources for OLE containers when editing an in-place OLE item.|  \n|[CDocTemplate::SetDefaultTitle](#cdoctemplate__setdefaulttitle)|Displays the default title in the document window's title bar.|  \n|[CDocTemplate::SetPreviewInfo](#cdoctemplate__setpreviewinfo)|Setups out of process preview handler.|  \n|[CDocTemplate::SetServerInfo](#cdoctemplate__setserverinfo)|Determines the resources and classes when the server document is embedded or edited in-place.|  \n  \n## Remarks  \n You usually create one or more document templates in the implementation of your application's `InitInstance` function. A document template defines the relationships among three types of classes:  \n  \n-   A document class, which you derive from **CDocument**.  \n  \n-   A view class, which displays data from the document class listed above. You can derive this class from `CView`, `CScrollView`, `CFormView`, or `CEditView`. (You can also use `CEditView` directly.)  \n  \n-   A frame window class, which contains the view. For a single document interface (SDI) application, you derive this class from `CFrameWnd`. For a multiple document interface (MDI) application, you derive this class from `CMDIChildWnd`. If you don't need to customize the behavior of the frame window, you can use `CFrameWnd` or `CMDIChildWnd` directly without deriving your own class.  \n  \n Your application has one document template for each type of document that it supports. For example, if your application supports both spreadsheets and text documents, the application has two document template objects. Each document template is responsible for creating and managing all the documents of its type.  \n  \n The document template stores pointers to the `CRuntimeClass` objects for the document, view, and frame window classes. These `CRuntimeClass` objects are specified when constructing a document template.  \n  \n The document template contains the ID of the resources used with the document type (such as menu, icon, or accelerator table resources). The document template also has strings containing additional information about its document type. These include the name of the document type (for example, \"Worksheet\") and the file extension (for example, \".xls\"). Optionally, it can contain other strings used by the application's user interface, the Windows File Manager, and Object Linking and Embedding (OLE) support.  \n  \n If your application is an OLE container and/or server, the document template also defines the ID of the menu used during in-place activation. If your application is an OLE server, the document template defines the ID of the toolbar and menu used during in-place activation. You specify these additional OLE resources by calling `SetContainerInfo` and `SetServerInfo`.  \n  \n Because `CDocTemplate` is an abstract class, you cannot use the class directly. A typical application uses one of the two `CDocTemplate`-derived classes provided by the Microsoft Foundation Class Library: `CSingleDocTemplate`, which implements SDI, and `CMultiDocTemplate`, which implements MDI. See those classes for more information on using document templates.  \n  \n If your application requires a user-interface paradigm that is fundamentally different from SDI or MDI, you can derive your own class from `CDocTemplate`.  \n  \n For more information on `CDocTemplate`, see [Document Templates and the Document/View Creation Process](../../mfc/document-templates-and-the-document-view-creation-process.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n `CDocTemplate`  \n  \n## Requirements  \n **Header:** afxwin.h  \n  \n##  <a name=\"cdoctemplate__adddocument\"></a>  CDocTemplate::AddDocument  \n Use this function to add a document to a template.  \n  \n```  \nvirtual void AddDocument(CDocument* pDoc);\n```  \n  \n### Parameters  \n `pDoc`  \n A pointer to the document to be added.  \n  \n### Remarks  \n The derived classes [CMultiDocTemplate](../../mfc/reference/cmultidoctemplate-class.md) and [CSingleDocTemplate](../../mfc/reference/csingledoctemplate-class.md) override this function. If you derive your own document-template class from `CDocTemplate`, your derived class must override this function.  \n  \n##  <a name=\"cdoctemplate__cdoctemplate\"></a>  CDocTemplate::CDocTemplate  \n Constructs a `CDocTemplate` object.  \n  \n```  \nCDocTemplate (\n    UINT nIDResource,  \n    CRuntimeClass* pDocClass,  \n    CRuntimeClass* pFrameClass,  \n    CRuntimeClass* pViewClass);\n```  \n  \n### Parameters  \n `nIDResource`  \n Specifies the ID of the resources used with the document type. This may include menu, icon, accelerator table, and string resources.  \n  \n The string resource consists of up to seven substrings separated by the '\\n' character (the '\\n' character is needed as a place holder if a substring is not included; however, trailing '\\n' characters are not necessary); these substrings describe the document type. For information on the substrings, see [GetDocString](#cdoctemplate__getdocstring). This string resource is found in the application's resource file. For example:  \n  \n `// MYCALC.RC`  \n  \n `STRINGTABLE PRELOAD DISCARDABLE`  \n  \n `BEGIN`  \n  \n `IDR_SHEETTYPE \"\\nSheet\\nWorksheet\\nWorksheets (*.myc)\\n.myc\\n MyCalcSheet\\nMyCalc Worksheet\"`  \n  \n `END`  \n  \n Note that the string begins with a '\\n' character; this is because the first substring is not used for MDI applications and so is not included. You can edit this string using the string editor; the entire string appears as a single entry in the String Editor, not as seven separate entries.  \n  \n `pDocClass`  \n Points to the `CRuntimeClass` object of the document class. This class is a **CDocument**-derived class you define to represent your documents.  \n  \n `pFrameClass`  \n Points to the `CRuntimeClass` object of the frame window class. This class can be a `CFrameWnd`-derived class, or it can be `CFrameWnd` itself if you want default behavior for your main frame window.  \n  \n `pViewClass`  \n Points to the `CRuntimeClass` object of the view class. This class is a `CView`-derived class you define to display your documents.  \n  \n### Remarks  \n Use this member function to construct a `CDocTemplate` object. Dynamically allocate a `CDocTemplate` object and pass it to [CWinApp::AddDocTemplate](../../mfc/reference/cwinapp-class.md#cwinapp__adddoctemplate) from the `InitInstance` member function of your application class.  \n  \n##  <a name=\"cdoctemplate__closealldocuments\"></a>  CDocTemplate::CloseAllDocuments  \n Call this member function to close all open documents.  \n  \n```  \nvirtual void CloseAllDocuments(BOOL bEndSession);\n```  \n  \n### Parameters  \n `bEndSession`  \n Specifies whether or not the session is being ended. It is **TRUE** if the session is being ended; otherwise **FALSE**.  \n  \n### Remarks  \n This member function is typically used as part of the File Exit command. The default implementation of this function calls the [CDocument::DeleteContents](../../mfc/reference/cdocument-class.md#cdocument__deletecontents) member function to delete the document's data and then closes the frame windows for all the views attached to the document.  \n  \n Override this function if you want to require the user to perform special cleanup processing before the document is closed. For example, if the document represents a record in a database, you may want to override this function to close the database.  \n  \n##  <a name=\"cdoctemplate__createnewdocument\"></a>  CDocTemplate::CreateNewDocument  \n Call this member function to create a new document of the type associated with this document template.  \n  \n```  \nvirtual CDocument* CreateNewDocument();\n```  \n  \n### Return Value  \n A pointer to the newly created document, or **NULL** if an error occurs.  \n  \n##  <a name=\"cdoctemplate__createnewframe\"></a>  CDocTemplate::CreateNewFrame  \n Creates a new frame window containing a document and view.  \n  \n```  \nvirtual CFrameWnd* CreateNewFrame(\n    CDocument* pDoc,  \n    CFrameWnd* pOther);\n```  \n  \n### Parameters  \n `pDoc`  \n The document to which the new frame window should refer. Can be **NULL**.  \n  \n `pOther`  \n The frame window on which the new frame window is to be based. Can be **NULL**.  \n  \n### Return Value  \n A pointer to the newly created frame window, or **NULL** if an error occurs.  \n  \n### Remarks  \n `CreateNewFrame` uses the `CRuntimeClass` objects passed to the constructor to create a new frame window with a view and document attached. If the `pDoc` parameter is **NULL**, the framework outputs a TRACE message.  \n  \n The `pOther` parameter is used to implement the Window New command. It provides a frame window on which to model the new frame window. The new frame window is usually created invisible. Call this function to create frame windows outside the standard framework implementation of File New and File Open.  \n  \n##  <a name=\"cdoctemplate__createoleframe\"></a>  CDocTemplate::CreateOleFrame  \n Creates an OLE frame window.  \n  \n```  \nCFrameWnd* CreateOleFrame(\n    CWnd* pParentWnd,  \n    CDocument* pDoc,  \n    BOOL bCreateView);\n```  \n  \n### Parameters  \n `pParentWnd`  \n A pointer to the frame's parent window.  \n  \n `pDoc`  \n A pointer to the document to which the new OLE frame window should refer.  \n  \n `bCreateView`  \n Determines whether a view is created along with the frame.  \n  \n### Return Value  \n A pointer to a frame window if successful; otherwise **NULL**.  \n  \n### Remarks  \n If `bCreateView` is zero, an empty frame is created.  \n  \n##  <a name=\"cdoctemplate__getdocstring\"></a>  CDocTemplate::GetDocString  \n Retrieves a string associated with the document type.  \n  \n```  \nvirtual BOOL GetDocString(\n    CString& rString,  \n    enum DocStringIndex index) const;\n\n \n```  \n  \n### Parameters  \n `rString`  \n A reference to a `CString` object that will contain the string when the function returns.  \n  \n *index*  \n An index of the substring being retrieved from the string that describes the document type. This parameter can have one of the following values:  \n  \n- **CDocTemplate::windowTitle** Name that appears in the application window's title bar (for example, \"Microsoft Excel\"). Present only in the document template for SDI applications.  \n  \n- **CDocTemplate::docName** Root for the default document name (for example, \"Sheet\"). This root, plus a number, is used for the default name of a new document of this type whenever the user chooses the New command from the File menu (for example, \"Sheet1\" or \"Sheet2\"). If not specified, \"Untitled\" is used as the default.  \n  \n- **CDocTemplate::fileNewName** Name of this document type. If the application supports more than one type of document, this string is displayed in the File New dialog box (for example, \"Worksheet\"). If not specified, the document type is inaccessible using the File New command.  \n  \n- **CDocTemplate::filterName** Description of the document type and a wildcard filter matching documents of this type. This string is displayed in the List Files Of Type drop-down list in the File Open dialog box (for example, \"Worksheets (*.xls)\"). If not specified, the document type is inaccessible using the File Open command.  \n  \n- **CDocTemplate::filterExt** Extension for documents of this type (for example, \".xls\"). If not specified, the document type is inaccessible using the File Open command.  \n  \n- **CDocTemplate::regFileTypeId** Identifier for the document type to be stored in the registration database maintained by Windows. This string is for internal use only (for example, \"ExcelWorksheet\"). If not specified, the document type cannot be registered with the Windows File Manager.  \n  \n- **CDocTemplate::regFileTypeName** Name of the document type to be stored in the registration database. This string may be displayed in dialog boxes of applications that access the registration database (for example, \"Microsoft Excel Worksheet\").  \n  \n### Return Value  \n Nonzero if the specified substring was found; otherwise 0.  \n  \n### Remarks  \n Call this function to retrieve a specific substring describing the document type. The string containing these substrings is stored in the document template and is derived from a string in the resource file for the application. The framework calls this function to get the strings it needs for the application's user interface. If you have specified a filename extension for your application's documents, the framework also calls this function when adding an entry to the Windows registration database; this allows documents to be opened from the Windows File Manager.  \n  \n Call this function only if you are deriving your own class from `CDocTemplate`.  \n  \n##  <a name=\"cdoctemplate__getfirstdocposition\"></a>  CDocTemplate::GetFirstDocPosition  \n Retrieves the position of the first document associated with this template.  \n  \n```  \nvirtual POSITION GetFirstDocPosition() const = 0;  \n```  \n  \n### Return Value  \n A **POSITION** value that can be used to iterate through the list of documents associated with this document template; or **NULL** if the list is empty.  \n  \n### Remarks  \n Use this function to get the position of the first document in the list of documents associated with this template. Use the **POSITION** value as an argument to [CDocTemplate::GetNextDoc](#cdoctemplate__getnextdoc) to iterate through the list of documents associated with the template.  \n  \n [CSingleDocTemplate](../../mfc/reference/csingledoctemplate-class.md) and [CMultiDocTemplate](../../mfc/reference/cmultidoctemplate-class.md) both override this pure virtual function. Any class you derive from `CDocTemplate` must also override this function.  \n  \n##  <a name=\"cdoctemplate__getnextdoc\"></a>  CDocTemplate::GetNextDoc  \n Retrieves the list element identified by `rPos`, then sets `rPos` to the **POSITION** value of the next entry in the list.  \n  \n```  \nvirtual CDocument* GetNextDoc(POSITION& rPos) const = 0;  \n```  \n  \n### Return Value  \n A pointer to the next document in the list of documents associated with this template.  \n  \n### Parameters  \n `rPos`  \n A reference to a **POSITION** value returned by a previous call to [GetFirstDocPosition](#cdoctemplate__getfirstdocposition) or `GetNextDoc`.  \n  \n### Remarks  \n If the retrieved element is the last in the list, then the new value of `rPos` is set to **NULL**.  \n  \n You can use `GetNextDoc` in a forward iteration loop if you establish the initial position with a call to [GetFirstDocPosition](#cdoctemplate__getfirstdocposition).  \n  \n You must ensure that your **POSITION** value represents a valid position in the list. If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.  \n  \n##  <a name=\"cdoctemplate__initialupdateframe\"></a>  CDocTemplate::InitialUpdateFrame  \n Initializes the frame window, and optionally makes it visible.  \n  \n```  \nvirtual void InitialUpdateFrame(\n    CFrameWnd* pFrame,  \n    CDocument* pDoc,  \n    BOOL bMakeVisible = TRUE);\n```  \n  \n### Parameters  \n `pFrame`  \n The frame window that needs the initial update.  \n  \n `pDoc`  \n The document to which the frame is associated. Can be **NULL**.  \n  \n `bMakeVisible`  \n Indicates whether the frame should become visible and active.  \n  \n### Remarks  \n Call **IntitialUpdateFrame** after creating a new frame with `CreateNewFrame`. Calling this function causes the views in that frame window to receive their `OnInitialUpdate` calls. Also, if there was not previously an active view, the primary view of the frame window is made active; the primary view is a view with a child ID of **AFX_IDW_PANE_FIRST**. Finally, the frame window is made visible if `bMakeVisible` is non-zero. If `bMakeVisible` is zero, the current focus and visible state of the frame window will remain unchanged.  \n  \n It is not necessary to call this function when using the framework's implementation of File New and File Open.  \n  \n##  <a name=\"cdoctemplate__loadtemplate\"></a>  CDocTemplate::LoadTemplate  \n Loads the resources for a given `CDocTemplate` or derived class.  \n  \n```  \nvirtual void LoadTemplate();\n```  \n  \n### Remarks  \n This member function is called by the framework to load the resources for a given `CDocTemplate` or derived class. Normally it is called during construction, except when the template is being constructed globally. In that case, the call to `LoadTemplate` is delayed until [CWinApp::AddDocTemplate](../../mfc/reference/cwinapp-class.md#cwinapp__adddoctemplate) is called.  \n  \n##  <a name=\"cdoctemplate__matchdoctype\"></a>  CDocTemplate::MatchDocType  \n Determines the degree of confidence in the match between a document type and this template.  \n  \n```  \nvirtual Confidence MatchDocType(\n    LPCTSTR lpszPathName,  \n    CDocument*& rpDocMatch);\n```  \n  \n### Parameters  \n `lpszPathName`  \n Pathname of the file whose type is to be determined.  \n  \n `rpDocMatch`  \n Pointer to a document that is assigned the matching document, if the file specified by `lpszPathName` is already open.  \n  \n### Return Value  \n A value from the **Confidence** enumeration, which is defined as follows:  \n  \n `enum Confidence`  \n  \n `{`  \n  \n `noAttempt,`  \n  \n `maybeAttemptForeign,`  \n  \n `maybeAttemptNative,`  \n  \n `yesAttemptForeign,`  \n  \n `yesAttemptNative,`  \n  \n `yesAlreadyOpen`  \n  \n `};`  \n  \n### Remarks  \n Use this function to determine the type of document template to use for opening a file. If your application supports multiple file types, for example, you can use this function to determine which of the available document templates is appropriate for a given file by calling `MatchDocType` for each template in turn, and choosing a template according to the confidence value returned.  \n  \n If the file specified by `lpszPathName` is already open, this function returns **CDocTemplate::yesAlreadyOpen** and copies the file's **CDocument** object into the object at `rpDocMatch`.  \n  \n If the file is not open but the extension in `lpszPathName` matches the extension specified by **CDocTemplate::filterExt**, this function returns **CDocTemplate::yesAttemptNative** and sets `rpDocMatch` to **NULL**. For more information on **CDocTemplate::filterExt**, see [CDocTemplate::GetDocString](#cdoctemplate__getdocstring).  \n  \n If neither case is true, the function returns **CDocTemplate::yesAttemptForeign**.  \n  \n The default implementation does not return **CDocTemplate::maybeAttemptForeign** or **CDocTemplate::maybeAttemptNative**. Override this function to implement type-matching logic appropriate to your application, perhaps using these two values from the **Confidence** enumeration.  \n  \n##  <a name=\"cdoctemplate__opendocumentfile\"></a>  CDocTemplate::OpenDocumentFile  \n Opens a file specified by a path.  \n  \n```  \nvirtual CDocument* OpenDocumentFile(\n    LPCTSTR lpszPathName) = 0;  \n \nvirtual CDocument* OpenDocumentFile(\n    LPCTSTR lpszPathName,  \n    BOOL bAddToMRU) = 0;  \n```  \n  \n### Parameters  \n [in] `lpszPathName`  \n Pointer to the path of the file that contains the document to be opened.  \n  \n [in] `bAddToMRU`  \n `TRUE` indicates the document is one of the most recent files; `FALSE` indicates the document is not one of the most recent files.  \n  \n### Return Value  \n A pointer to the document whose file is named by `lpszPathName`; `NULL` if unsuccessful.  \n  \n### Remarks  \n Opens the file whose path is specified by `lpszPathName`. If `lpszPathName` is `NULL`, a new file that contains a document of the type associated with this template is created.  \n  \n##  <a name=\"cdoctemplate__removedocument\"></a>  CDocTemplate::RemoveDocument  \n Removes the document pointed to by `pDoc` from the list of documents associated with this template.  \n  \n```  \nvirtual void RemoveDocument(CDocument* pDoc);\n```  \n  \n### Parameters  \n `pDoc`  \n Pointer to the document to be removed.  \n  \n### Remarks  \n The derived classes `CMultiDocTemplate` and `CSingleDocTemplate` override this function. If you derive your own document-template class from `CDocTemplate`, your derived class must override this function.  \n  \n##  <a name=\"cdoctemplate__saveallmodified\"></a>  CDocTemplate::SaveAllModified  \n Saves all documents that have been modified.  \n  \n```  \nvirtual BOOL SaveAllModified();\n```  \n  \n### Return Value  \n Non-zero if successful; otherwise 0.  \n  \n##  <a name=\"cdoctemplate__setcontainerinfo\"></a>  CDocTemplate::SetContainerInfo  \n Determines the resources for OLE containers when editing an in-place OLE item.  \n  \n```  \nvoid SetContainerInfo(UINT nIDOleInPlaceContainer);\n```  \n  \n### Parameters  \n `nIDOleInPlaceContainer`  \n The ID of the resources used when an embedded object is activated.  \n  \n### Remarks  \n Call this function to set the resources to be used when an OLE object is in-place activated. These resources may include menus and accelerator tables. This function is usually called in the [CWinApp::InitInstance](../../mfc/reference/cwinapp-class.md#cwinapp__initinstance) function of your application.  \n  \n The menu associated with `nIDOleInPlaceContainer` contains separators that allow the menu of the activated in-place item to merge with the menu of the container application. For more information about merging server and container menus, see the article [Menus and Resources (OLE)](../../mfc/menus-and-resources-ole.md).  \n  \n##  <a name=\"cdoctemplate__setdefaulttitle\"></a>  CDocTemplate::SetDefaultTitle  \n Call this function to load the document's default title and display it in the document's title bar.  \n  \n```  \nvirtual void SetDefaultTitle(CDocument* pDocument) = 0;  \n```  \n  \n### Parameters  \n *pDocument*  \n Pointer to the document whose title is to be set.  \n  \n### Remarks  \n For information on the default title, see the description of **CDocTemplate::docName** in [CDocTemplate::GetDocString](#cdoctemplate__getdocstring).  \n  \n##  <a name=\"cdoctemplate__setserverinfo\"></a>  CDocTemplate::SetServerInfo  \n Determines the resources and classes when the server document is embedded or edited in-place.  \n  \n```  \nvoid SetServerInfo(\n    UINT nIDOleEmbedding,  \n    UINT nIDOleInPlaceServer = 0,  \n    CRuntimeClass* pOleFrameClass = NULL,  \n    CRuntimeClass* pOleViewClass = NULL);\n```  \n  \n### Parameters  \n *nIDOleEmbedding*  \n The ID of the resources used when an embedded object is opened in a separate window.  \n  \n `nIDOleInPlaceServer`  \n The ID of the resources used when an embedded object is activated in-place.  \n  \n *pOleFrameClass*  \n Pointer to a [CRuntimeClass](../../mfc/reference/cruntimeclass-structure.md) structure containing class information for the frame window object created when in-place activation occurs.  \n  \n *pOleViewClass*  \n Pointer to a `CRuntimeClass` structure containing class information for the view object created when in-place activation occurs.  \n  \n### Remarks  \n Call this member function to identify resources that will be used by the server application when the user requests activation of an embedded object. These resources consist of menus and accelerator tables. This function is usually called in the `InitInstance` of your application.  \n  \n The menu associated with `nIDOleInPlaceServer` contains separators that allow the server menu to merge with the menu of the container. For more information about merging server and container menus, see the article [Menus and Resources (OLE)](../../mfc/menus-and-resources-ole.md).  \n  \n##  <a name=\"cdoctemplate__createpreviewframe\"></a>  CDocTemplate::CreatePreviewFrame  \n Creates a child frame used for Rich Preview.  \n  \n```  \nCFrameWnd* CreatePreviewFrame(\n    CWnd* pParentWnd,  \n    CDocument* pDoc);\n```  \n  \n### Parameters  \n `pParentWnd`  \n A pointer to a parent window (usually provided by the Shell).  \n  \n `pDoc`  \n A pointer to a document object, whose content will be previewed.  \n  \n### Return Value  \n A valid pointer to a `CFrameWnd` object, or `NULL` if the creation fails.  \n  \n### Remarks  \n  \n##  <a name=\"cdoctemplate__setpreviewinfo\"></a>  CDocTemplate::SetPreviewInfo  \n Sets up the out of process preview handler.  \n  \n```  \nvoid SetPreviewInfo(\n    UINT nIDPreviewFrame,  \n    CRuntimeClass* pPreviewFrameClass = NULL,  \n    CRuntimeClass* pPreviewViewClass = NULL);\n```  \n  \n### Parameters  \n `nIDPreviewFrame`  \n Specifies a resource ID of the preview frame.  \n  \n `pPreviewFrameClass`  \n Specifies a pointer to a runtime class information structure of the preview frame.  \n  \n `pPreviewViewClass`  \n Specifies a pointer to a runtime class information structure of the preview view.  \n  \n### Remarks  \n  \n## See Also  \n [CCmdTarget Class](../../mfc/reference/ccmdtarget-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CSingleDocTemplate Class](../../mfc/reference/csingledoctemplate-class.md)   \n [CMultiDocTemplate Class](../../mfc/reference/cmultidoctemplate-class.md)   \n [CDocument Class](../../mfc/reference/cdocument-class.md)   \n [CView Class](../../mfc/reference/cview-class.md)   \n [CScrollView Class](../../mfc/reference/cscrollview-class.md)   \n [CEditView Class](../../mfc/reference/ceditview-class.md)   \n [CFormView Class](../../mfc/reference/cformview-class.md)   \n [CFrameWnd Class](../../mfc/reference/cframewnd-class.md)   \n [CMDIChildWnd Class](../../mfc/reference/cmdichildwnd-class.md)\n"}