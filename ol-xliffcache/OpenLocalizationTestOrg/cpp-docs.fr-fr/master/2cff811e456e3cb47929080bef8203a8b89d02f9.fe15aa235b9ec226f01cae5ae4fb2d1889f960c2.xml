{"nodes":[{"pos":[12,43],"content":"freelist Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"freelist Class | Microsoft Docs","pos":[0,31]}]},{"content":"freelist Class","pos":[675,689]},{"content":"Manages a list of memory blocks.","pos":[690,722]},{"content":"Syntax","pos":[731,737]},{"content":"Parameters","pos":[829,839]},{"content":"Parameter","pos":[846,855]},{"content":"Description","pos":[856,867]},{"content":"The number of elements in the array to be allocated.","pos":[915,967]},{"content":"The max class representing the maximum number of elements to be stored in the free list.","pos":[978,1066]},{"content":"The max class can be <bpt id=\"p1\">[</bpt>max_none<ept id=\"p1\">](../standard-library/max-none-class.md)</ept>, <bpt id=\"p2\">[</bpt>max_unbounded<ept id=\"p2\">](../standard-library/max-unbounded-class.md)</ept>, <bpt id=\"p3\">[</bpt>max_fixed_size<ept id=\"p3\">](../standard-library/max-fixed-size-class.md)</ept>, or <bpt id=\"p4\">[</bpt>max_variable_size<ept id=\"p4\">](../standard-library/max-variable-size-class.md)</ept>.","pos":[1067,1334],"source":" The max class can be [max_none](../standard-library/max-none-class.md), [max_unbounded](../standard-library/max-unbounded-class.md), [max_fixed_size](../standard-library/max-fixed-size-class.md), or [max_variable_size](../standard-library/max-variable-size-class.md)."},{"content":"Remarks","pos":[1344,1351]},{"pos":[1355,1500],"content":"This template class manages a list of memory blocks of size <ph id=\"ph1\">`Sz`</ph> with the maximum length of the list determined by the max class passed in <ph id=\"ph2\">`Max`</ph>.","source":"This template class manages a list of memory blocks of size `Sz` with the maximum length of the list determined by the max class passed in `Max`."},{"content":"Constructors","pos":[1510,1522]},{"content":"freelist","pos":[1544,1552]},{"pos":[1575,1615],"content":"Constructs an object of type <ph id=\"ph1\">`freelist`</ph>.","source":"Constructs an object of type `freelist`."},{"content":"Member Functions","pos":[1626,1642]},{"content":"pop","pos":[1664,1667]},{"content":"Removes the first memory block from the free list.","pos":[1685,1735]},{"content":"push","pos":[1741,1745]},{"content":"Adds a memory block to the list.","pos":[1764,1796]},{"content":"Requirements","pos":[1806,1818]},{"pos":[1822,1847],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>allocators&gt;","source":"**Header:** \\<allocators>"},{"pos":[1854,1875],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> stdext","source":"**Namespace:** stdext"},{"pos":[1920,1938],"content":"freelist::freelist"},{"pos":[1942,1982],"content":"Constructs an object of type <ph id=\"ph1\">`freelist`</ph>.","source":"Constructs an object of type `freelist`."},{"content":"Remarks","pos":[2017,2024]},{"pos":[2064,2077],"content":"freelist::pop"},{"content":"Removes the first memory block from the free list.","pos":[2081,2131]},{"content":"Return Value","pos":[2167,2179]},{"content":"Returns a pointer to the memory block removed from the list.","pos":[2183,2243]},{"content":"Remarks","pos":[2253,2260]},{"content":"The member function returns <ph id=\"ph1\">`NULL`</ph> if the list is empty.","pos":[2264,2320],"source":"The member function returns `NULL` if the list is empty."},{"content":"Otherwise, it removes the first memory block from the list.","pos":[2321,2380]},{"pos":[2421,2435],"content":"freelist::push"},{"content":"Adds a memory block to the list.","pos":[2439,2471]},{"content":"Parameters","pos":[2516,2526]},{"content":"Parameter","pos":[2533,2542]},{"content":"Description","pos":[2543,2554]},{"content":"A pointer to the memory block to be added to the free list.","pos":[2603,2662]},{"content":"Return Value","pos":[2673,2685]},{"pos":[2696,2800],"content":"if the <ph id=\"ph1\">`full`</ph> function of the max class returns <ph id=\"ph2\">`false`</ph>; otherwise, the <ph id=\"ph3\">`push`</ph> function returns <ph id=\"ph4\">`false`</ph>.","source":" if the `full` function of the max class returns `false`; otherwise, the `push` function returns `false`."},{"content":"Remarks","pos":[2810,2817]},{"pos":[2821,2965],"content":"If the <ph id=\"ph1\">`full`</ph> function of the max class returns <ph id=\"ph2\">`false`</ph>, this member function adds the memory block pointed to by <ph id=\"ph3\">`ptr`</ph> to the head of the list.","source":"If the `full` function of the max class returns `false`, this member function adds the memory block pointed to by `ptr` to the head of the list."},{"content":"See Also","pos":[2974,2982]},{"content":"allocators&gt;","pos":[2989,3000],"source":"allocators>"}],"content":"---\ntitle: \"freelist Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"stdext::freelist\"\n  - \"freelist\"\n  - \"stdext.freelist\"\n  - \"allocators/stdext::freelist\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"freelist class\"\nms.assetid: 8ad7e35c-4c80-4479-8ede-1a2497b06d71\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# freelist Class\nManages a list of memory blocks.  \n  \n## Syntax  \n  \n```\ntemplate <std::size_t Sz, class Max>  \nclass freelist\n : public Max\n```  \n  \n#### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`Sz`|The number of elements in the array to be allocated.|  \n|`Max`|The max class representing the maximum number of elements to be stored in the free list. The max class can be [max_none](../standard-library/max-none-class.md), [max_unbounded](../standard-library/max-unbounded-class.md), [max_fixed_size](../standard-library/max-fixed-size-class.md), or [max_variable_size](../standard-library/max-variable-size-class.md).|  \n  \n## Remarks  \n This template class manages a list of memory blocks of size `Sz` with the maximum length of the list determined by the max class passed in `Max`.  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[freelist](#freelist__freelist)|Constructs an object of type `freelist`.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[pop](#freelist__pop)|Removes the first memory block from the free list.|  \n|[push](#freelist__push)|Adds a memory block to the list.|  \n  \n## Requirements  \n **Header:** \\<allocators>  \n  \n **Namespace:** stdext  \n  \n##  <a name=\"freelist__freelist\"></a>  freelist::freelist  \n Constructs an object of type `freelist`.  \n  \n```\nfreelist();\n```  \n  \n### Remarks  \n  \n##  <a name=\"freelist__pop\"></a>  freelist::pop  \n Removes the first memory block from the free list.  \n  \n```\nvoid *pop();\n```  \n  \n### Return Value  \n Returns a pointer to the memory block removed from the list.  \n  \n### Remarks  \n The member function returns `NULL` if the list is empty. Otherwise, it removes the first memory block from the list.  \n  \n##  <a name=\"freelist__push\"></a>  freelist::push  \n Adds a memory block to the list.  \n  \n```\nbool push(void* ptr);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`ptr`|A pointer to the memory block to be added to the free list.|  \n  \n### Return Value  \n `true` if the `full` function of the max class returns `false`; otherwise, the `push` function returns `false`.  \n  \n### Remarks  \n If the `full` function of the max class returns `false`, this member function adds the memory block pointed to by `ptr` to the head of the list.  \n  \n## See Also  \n [\\<allocators>](../standard-library/allocators-header.md)\n\n\n\n"}