{"nodes":[{"pos":[12,78],"content":"F. New Features and Clarifications in Version 2.0 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"F. New Features and Clarifications in Version 2.0 | Microsoft Docs","pos":[0,66],"nodes":[{"content":"F.","pos":[0,2]},{"content":"New Features and Clarifications in Version 2.0 | Microsoft Docs","pos":[3,66]}]}]},{"content":"F.","pos":[558,560]},{"content":"New Features and Clarifications in Version 2.0","pos":[561,607]},{"content":"This appendix summarizes the key changes made to the OpenMP C/C++ specification in moving from version 1.0 to version 2.0.","pos":[608,730]},{"content":"The following items are new features added to the specification:","pos":[731,795]},{"pos":[805,920],"content":"Commas are permitted in OpenMP directives (<bpt id=\"p1\">[</bpt>Section 2.1<ept id=\"p1\">](../../parallel/openmp/2-1-directive-format.md)</ept> on page 7).","source":"Commas are permitted in OpenMP directives ([Section 2.1](../../parallel/openmp/2-1-directive-format.md) on page 7)."},{"content":"Addition of the <ph id=\"ph1\">`num_threads`</ph> clause.","pos":[930,967],"source":"Addition of the `num_threads` clause."},{"content":"This clause allows a user to request a specific number of threads for a parallel construct (<bpt id=\"p1\">[</bpt>Section 2.3<ept id=\"p1\">](../../parallel/openmp/2-3-parallel-construct.md)</ept> on page 8).","pos":[968,1134],"source":" This clause allows a user to request a specific number of threads for a parallel construct ([Section 2.3](../../parallel/openmp/2-3-parallel-construct.md) on page 8)."},{"pos":[1144,1316],"content":"The <ph id=\"ph1\">`threadprivate`</ph> directive has been extended to accept static block-scope variables (<bpt id=\"p1\">[</bpt>Section 2.7.1<ept id=\"p1\">](../../parallel/openmp/2-7-1-threadprivate-directive.md)</ept> on page 23).","source":"The `threadprivate` directive has been extended to accept static block-scope variables ([Section 2.7.1](../../parallel/openmp/2-7-1-threadprivate-directive.md) on page 23)."},{"pos":[1326,1610],"content":"C99 Variable Length Arrays are complete types, and thus can be specified anywhere complete types are allowed, for instance in the lists of <ph id=\"ph1\">`private`</ph>, <ph id=\"ph2\">`firstprivate`</ph>, and <ph id=\"ph3\">`lastprivate`</ph> clauses (<bpt id=\"p1\">[</bpt>Section 2.7.2<ept id=\"p1\">](../../parallel/openmp/2-7-2-data-sharing-attribute-clauses.md)</ept> on page 25).","source":"C99 Variable Length Arrays are complete types, and thus can be specified anywhere complete types are allowed, for instance in the lists of `private`, `firstprivate`, and `lastprivate` clauses ([Section 2.7.2](../../parallel/openmp/2-7-2-data-sharing-attribute-clauses.md) on page 25)."},{"pos":[1620,1783],"content":"A private variable in a parallel region can be marked private again in a nested directive (<bpt id=\"p1\">[</bpt>Section 2.7.2.1<ept id=\"p1\">](../../parallel/openmp/2-7-2-1-private.md)</ept> on page 25).","source":"A private variable in a parallel region can be marked private again in a nested directive ([Section 2.7.2.1](../../parallel/openmp/2-7-2-1-private.md) on page 25)."},{"content":"The <ph id=\"ph1\">`copyprivate`</ph> clause has been added.","pos":[1793,1833],"source":"The `copyprivate` clause has been added."},{"content":"It provides a mechanism to use a private variable to broadcast a value from one member of a team to the other members.","pos":[1834,1952]},{"content":"It is an alternative to using a shared variable for the value when providing such a shared variable would be difficult (for example, in a recursion requiring a different variable at each level).","pos":[1953,2147]},{"content":"The <ph id=\"ph1\">`copyprivate`</ph> clause can only appear on the <bpt id=\"p1\">**</bpt>single<ept id=\"p1\">**</ept> directive (<bpt id=\"p2\">[</bpt>Section 2.7.2.8<ept id=\"p2\">](../../parallel/openmp/2-7-2-8-copyprivate.md)</ept> on page 32).","pos":[2148,2294],"source":" The `copyprivate` clause can only appear on the **single** directive ([Section 2.7.2.8](../../parallel/openmp/2-7-2-8-copyprivate.md) on page 32)."},{"content":"Addition of timing routines <ph id=\"ph1\">`omp_get_wtick`</ph> and <ph id=\"ph2\">`omp_get_wtime`</ph> similar to the MPI routines.","pos":[2304,2396],"source":"Addition of timing routines `omp_get_wtick` and `omp_get_wtime` similar to the MPI routines."},{"content":"These functions are necessary for performing wall clock timings  (<bpt id=\"p1\">[</bpt>Section 3.3.1<ept id=\"p1\">](../../parallel/openmp/3-3-1-omp-get-wtime-function.md)</ept> on page 44 and <bpt id=\"p2\">[</bpt>Section 3.3.2<ept id=\"p2\">](../../parallel/openmp/3-3-2-omp-get-wtick-function.md)</ept> on page 45).","pos":[2397,2632],"source":" These functions are necessary for performing wall clock timings  ([Section 3.3.1](../../parallel/openmp/3-3-1-omp-get-wtime-function.md) on page 44 and [Section 3.3.2](../../parallel/openmp/3-3-2-omp-get-wtick-function.md) on page 45)."},{"content":"An appendix with a list of implementation-defined behaviors in OpenMP C/C++ has been added.","pos":[2642,2733]},{"content":"An implementation is required to define and document its behavior in these cases (<bpt id=\"p1\">[</bpt>Appendix E<ept id=\"p1\">](../../parallel/openmp/e-implementation-defined-behaviors-in-openmp-c-cpp.md)</ept> on page 97).","pos":[2734,2918],"source":" An implementation is required to define and document its behavior in these cases ([Appendix E](../../parallel/openmp/e-implementation-defined-behaviors-in-openmp-c-cpp.md) on page 97)."},{"content":"The following changes serve to clarify or correct features in the previous OpenMP API specification for C/C++:","pos":[2928,3038]},{"pos":[3052,3348],"content":"Clarified that the behavior of <ph id=\"ph1\">`omp_set_nested`</ph> and <ph id=\"ph2\">`omp_set_dynamic`</ph> when <ph id=\"ph3\">`omp_in_parallel`</ph> returns nonzero is undefined (<bpt id=\"p1\">[</bpt>Section 3.1.7<ept id=\"p1\">](../../parallel/openmp/3-1-7-omp-set-dynamic-function.md)</ept> on page 39, and <bpt id=\"p2\">[</bpt>Section 3.1.9<ept id=\"p2\">](../../parallel/openmp/3-1-9-omp-set-nested-function.md)</ept> on page 40).","source":"Clarified that the behavior of `omp_set_nested` and `omp_set_dynamic` when `omp_in_parallel` returns nonzero is undefined ([Section 3.1.7](../../parallel/openmp/3-1-7-omp-set-dynamic-function.md) on page 39, and [Section 3.1.9](../../parallel/openmp/3-1-9-omp-set-nested-function.md) on page 40)."},{"pos":[3362,3494],"content":"Clarified directive nesting when nested parallel is used (<bpt id=\"p1\">[</bpt>Section 2.9<ept id=\"p1\">](../../parallel/openmp/2-9-directive-nesting.md)</ept> on page 33).","source":"Clarified directive nesting when nested parallel is used ([Section 2.9](../../parallel/openmp/2-9-directive-nesting.md) on page 33)."},{"pos":[3508,3822],"content":"The lock initialization and lock destruction functions can be called in a parallel region (<bpt id=\"p1\">[</bpt>Section 3.2.1<ept id=\"p1\">](../../parallel/openmp/3-2-1-omp-init-lock-and-omp-init-nest-lock-functions.md)</ept> on page 42 and <bpt id=\"p2\">[</bpt>Section 3.2.2<ept id=\"p2\">](../../parallel/openmp/3-2-2-omp-destroy-lock-and-omp-destroy-nest-lock-functions.md)</ept> on page 42).","source":"The lock initialization and lock destruction functions can be called in a parallel region ([Section 3.2.1](../../parallel/openmp/3-2-1-omp-init-lock-and-omp-init-nest-lock-functions.md) on page 42 and [Section 3.2.2](../../parallel/openmp/3-2-2-omp-destroy-lock-and-omp-destroy-nest-lock-functions.md) on page 42)."},{"pos":[3836,3928],"content":"New examples have been added (<bpt id=\"p1\">[</bpt>Appendix A<ept id=\"p1\">](../../parallel/openmp/a-examples.md)</ept> on page 51).","source":"New examples have been added ([Appendix A](../../parallel/openmp/a-examples.md) on page 51)."}],"content":"---\ntitle: \"F. New Features and Clarifications in Version 2.0 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: 0d4beb66-f2d5-468c-8cd3-4b00dcbab061\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# F. New Features and Clarifications in Version 2.0\nThis appendix summarizes the key changes made to the OpenMP C/C++ specification in moving from version 1.0 to version 2.0. The following items are new features added to the specification:  \n  \n-   Commas are permitted in OpenMP directives ([Section 2.1](../../parallel/openmp/2-1-directive-format.md) on page 7).  \n  \n-   Addition of the `num_threads` clause. This clause allows a user to request a specific number of threads for a parallel construct ([Section 2.3](../../parallel/openmp/2-3-parallel-construct.md) on page 8).  \n  \n-   The `threadprivate` directive has been extended to accept static block-scope variables ([Section 2.7.1](../../parallel/openmp/2-7-1-threadprivate-directive.md) on page 23).  \n  \n-   C99 Variable Length Arrays are complete types, and thus can be specified anywhere complete types are allowed, for instance in the lists of `private`, `firstprivate`, and `lastprivate` clauses ([Section 2.7.2](../../parallel/openmp/2-7-2-data-sharing-attribute-clauses.md) on page 25).  \n  \n-   A private variable in a parallel region can be marked private again in a nested directive ([Section 2.7.2.1](../../parallel/openmp/2-7-2-1-private.md) on page 25).  \n  \n-   The `copyprivate` clause has been added. It provides a mechanism to use a private variable to broadcast a value from one member of a team to the other members. It is an alternative to using a shared variable for the value when providing such a shared variable would be difficult (for example, in a recursion requiring a different variable at each level). The `copyprivate` clause can only appear on the **single** directive ([Section 2.7.2.8](../../parallel/openmp/2-7-2-8-copyprivate.md) on page 32).  \n  \n-   Addition of timing routines `omp_get_wtick` and `omp_get_wtime` similar to the MPI routines. These functions are necessary for performing wall clock timings  ([Section 3.3.1](../../parallel/openmp/3-3-1-omp-get-wtime-function.md) on page 44 and [Section 3.3.2](../../parallel/openmp/3-3-2-omp-get-wtick-function.md) on page 45).  \n  \n-   An appendix with a list of implementation-defined behaviors in OpenMP C/C++ has been added. An implementation is required to define and document its behavior in these cases ([Appendix E](../../parallel/openmp/e-implementation-defined-behaviors-in-openmp-c-cpp.md) on page 97).  \n  \n-   The following changes serve to clarify or correct features in the previous OpenMP API specification for C/C++:  \n  \n    -   Clarified that the behavior of `omp_set_nested` and `omp_set_dynamic` when `omp_in_parallel` returns nonzero is undefined ([Section 3.1.7](../../parallel/openmp/3-1-7-omp-set-dynamic-function.md) on page 39, and [Section 3.1.9](../../parallel/openmp/3-1-9-omp-set-nested-function.md) on page 40).  \n  \n    -   Clarified directive nesting when nested parallel is used ([Section 2.9](../../parallel/openmp/2-9-directive-nesting.md) on page 33).  \n  \n    -   The lock initialization and lock destruction functions can be called in a parallel region ([Section 3.2.1](../../parallel/openmp/3-2-1-omp-init-lock-and-omp-init-nest-lock-functions.md) on page 42 and [Section 3.2.2](../../parallel/openmp/3-2-2-omp-destroy-lock-and-omp-destroy-nest-lock-functions.md) on page 42).  \n  \n    -   New examples have been added ([Appendix A](../../parallel/openmp/a-examples.md) on page 51)."}