{"nodes":[{"pos":[12,47],"content":"LOGBRUSH Structure | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"LOGBRUSH Structure | Microsoft Docs","pos":[0,35]}]},{"pos":[604,622],"content":"LOGBRUSH Structure","linkify":"LOGBRUSH Structure","nodes":[{"content":"LOGBRUSH Structure","pos":[0,18]}]},{"content":"The <ph id=\"ph1\">`LOGBRUSH`</ph> structure defines the style, color, and pattern of a physical brush.","pos":[623,706],"source":"The `LOGBRUSH` structure defines the style, color, and pattern of a physical brush."},{"content":"It is used by the Windows <bpt id=\"p1\">[</bpt>CreateBrushIndirect<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183487)</ept> and <bpt id=\"p2\">[</bpt>ExtCreatePen<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/dd162705)</ept> functions.","pos":[707,904],"source":" It is used by the Windows [CreateBrushIndirect](http://msdn.microsoft.com/library/windows/desktop/dd183487) and [ExtCreatePen](http://msdn.microsoft.com/library/windows/desktop/dd162705) functions."},{"pos":[913,919],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1064,1074],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the brush style.","pos":[1091,1117]},{"content":"The <ph id=\"ph1\">`lbStyle`</ph> member must be one of the following styles:","pos":[1118,1175],"source":" The `lbStyle` member must be one of the following styles:"},{"content":"<bpt id=\"p1\">**</bpt>BS_DIBPATTERN<ept id=\"p1\">**</ept> A pattern brush defined by a device-independent bitmap (DIB) specification.","pos":[1183,1276],"source":"**BS_DIBPATTERN** A pattern brush defined by a device-independent bitmap (DIB) specification."},{"content":"If <ph id=\"ph1\">`lbStyle`</ph> is <bpt id=\"p1\">**</bpt>BS_DIBPATTERN<ept id=\"p1\">**</ept>, the <bpt id=\"p2\">**</bpt>lbHatch<ept id=\"p2\">**</ept> member contains a handle to a packed DIB.","pos":[1277,1369],"source":" If `lbStyle` is **BS_DIBPATTERN**, the **lbHatch** member contains a handle to a packed DIB."},{"content":"<bpt id=\"p1\">**</bpt>BS_DIBPATTERNPT<ept id=\"p1\">**</ept> A pattern brush defined by a device-independent bitmap (DIB) specification.","pos":[1377,1472],"source":"**BS_DIBPATTERNPT** A pattern brush defined by a device-independent bitmap (DIB) specification."},{"content":"If <ph id=\"ph1\">`lbStyle`</ph> is <bpt id=\"p1\">**</bpt>BS_DIBPATTERNPT<ept id=\"p1\">**</ept>, the <bpt id=\"p2\">**</bpt>lbHatch<ept id=\"p2\">**</ept> member contains a pointer to a packed DIB.","pos":[1473,1568],"source":" If `lbStyle` is **BS_DIBPATTERNPT**, the **lbHatch** member contains a pointer to a packed DIB."},{"pos":[1576,1605],"content":"<bpt id=\"p1\">**</bpt>BS_HATCHED<ept id=\"p1\">**</ept> Hatched brush.","source":"**BS_HATCHED** Hatched brush."},{"pos":[1613,1640],"content":"<bpt id=\"p1\">**</bpt>BS_HOLLOW<ept id=\"p1\">**</ept> Hollow brush.","source":"**BS_HOLLOW** Hollow brush."},{"pos":[1648,1682],"content":"<bpt id=\"p1\">**</bpt>BS_NULL<ept id=\"p1\">**</ept> Same as <bpt id=\"p2\">**</bpt>BS_HOLLOW<ept id=\"p2\">**</ept>.","source":"**BS_NULL** Same as **BS_HOLLOW**."},{"pos":[1690,1746],"content":"<bpt id=\"p1\">**</bpt>BS_PATTERN<ept id=\"p1\">**</ept> Pattern brush defined by a memory bitmap.","source":"**BS_PATTERN** Pattern brush defined by a memory bitmap."},{"pos":[1754,1779],"content":"<bpt id=\"p1\">**</bpt>BS_SOLID<ept id=\"p1\">**</ept> Solid brush.","source":"**BS_SOLID** Solid brush."},{"pos":[1786,2310],"content":"`lbColor`  \nSpecifies the color in which the brush is to be drawn. If `lbStyle` is the **BS_HOLLOW** or **BS_PATTERN** style, **lbColor** is ignored. If `lbStyle` is **BS_DIBPATTERN** or **BS_DIBPATTERNBT**, the low-order word of **lbColor** specifies whether the **bmiColors** members of the [BITMAPINFO](../../mfc/reference/bitmapinfo-structure.md) structure contain explicit red, green, blue (RGB) values or indices into the currently realized logical palette. The **lbColor** member must be one of the following values:","leadings":[""," "],"nodes":[{"content":"Specifies the color in which the brush is to be drawn. If `lbStyle` is the **BS_HOLLOW** or **BS_PATTERN** style, **lbColor** is ignored. If `lbStyle` is **BS_DIBPATTERN** or **BS_DIBPATTERNBT**, the low-order word of **lbColor** specifies whether the **bmiColors** members of the [BITMAPINFO](../../mfc/reference/bitmapinfo-structure.md) structure contain explicit red, green, blue (RGB) values or indices into the currently realized logical palette. The **lbColor** member must be one of the following values:","pos":[12,523],"nodes":[{"content":"Specifies the color in which the brush is to be drawn.","pos":[0,54]},{"content":"If <ph id=\"ph1\">`lbStyle`</ph> is the <bpt id=\"p1\">**</bpt>BS_HOLLOW<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>BS_PATTERN<ept id=\"p2\">**</ept> style, <bpt id=\"p3\">**</bpt>lbColor<ept id=\"p3\">**</ept> is ignored.","pos":[55,137],"source":" If `lbStyle` is the **BS_HOLLOW** or **BS_PATTERN** style, **lbColor** is ignored."},{"content":"If <ph id=\"ph1\">`lbStyle`</ph> is <bpt id=\"p1\">**</bpt>BS_DIBPATTERN<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>BS_DIBPATTERNBT<ept id=\"p2\">**</ept>, the low-order word of <bpt id=\"p3\">**</bpt>lbColor<ept id=\"p3\">**</ept> specifies whether the <bpt id=\"p4\">**</bpt>bmiColors<ept id=\"p4\">**</ept> members of the <bpt id=\"p5\">[</bpt>BITMAPINFO<ept id=\"p5\">](../../mfc/reference/bitmapinfo-structure.md)</ept> structure contain explicit red, green, blue (RGB) values or indices into the currently realized logical palette.","pos":[138,451],"source":" If `lbStyle` is **BS_DIBPATTERN** or **BS_DIBPATTERNBT**, the low-order word of **lbColor** specifies whether the **bmiColors** members of the [BITMAPINFO](../../mfc/reference/bitmapinfo-structure.md) structure contain explicit red, green, blue (RGB) values or indices into the currently realized logical palette."},{"content":"The <bpt id=\"p1\">**</bpt>lbColor<ept id=\"p1\">**</ept> member must be one of the following values:","pos":[452,511],"source":" The **lbColor** member must be one of the following values:"}]}]},{"pos":[2318,2436],"content":"<bpt id=\"p1\">**</bpt>DIB_PAL_COLORS<ept id=\"p1\">**</ept> The color table consists of an array of 16-bit indices into the currently realized logical palette.","source":"**DIB_PAL_COLORS** The color table consists of an array of 16-bit indices into the currently realized logical palette."},{"pos":[2444,2507],"content":"<bpt id=\"p1\">**</bpt>DIB_RGB_COLORS<ept id=\"p1\">**</ept> The color table contains literal RGB values.","source":"**DIB_RGB_COLORS** The color table contains literal RGB values."},{"pos":[2514,2960],"content":"*lbHatch*  \nSpecifies a hatch style. The meaning depends on the brush style defined by `lbStyle`. If `lbStyle` is **BS_DIBPATTERN**, the **lbHatch** member contains a handle to a packed DIB. If `lbStyle` is **BS_DIBPATTERNPT**, the **lbHatch** member contains a pointer to a packed DIB. If `lbStyle` is **BS_HATCHED**, the **lbHatch** member specifies the orientation of the lines used to create the hatch. It can be one of the following values:","leadings":[""," "],"nodes":[{"content":"<bpt id=\"p1\">*</bpt>lbHatch<ept id=\"p1\">*</ept>","pos":[0,9],"source":"*lbHatch*"},{"content":"Specifies a hatch style. The meaning depends on the brush style defined by `lbStyle`. If `lbStyle` is **BS_DIBPATTERN**, the **lbHatch** member contains a handle to a packed DIB. If `lbStyle` is **BS_DIBPATTERNPT**, the **lbHatch** member contains a pointer to a packed DIB. If `lbStyle` is **BS_HATCHED**, the **lbHatch** member specifies the orientation of the lines used to create the hatch. It can be one of the following values:","pos":[12,445],"nodes":[{"content":"Specifies a hatch style.","pos":[0,24]},{"content":"The meaning depends on the brush style defined by <ph id=\"ph1\">`lbStyle`</ph>.","pos":[25,85],"source":" The meaning depends on the brush style defined by `lbStyle`."},{"content":"If <ph id=\"ph1\">`lbStyle`</ph> is <bpt id=\"p1\">**</bpt>BS_DIBPATTERN<ept id=\"p1\">**</ept>, the <bpt id=\"p2\">**</bpt>lbHatch<ept id=\"p2\">**</ept> member contains a handle to a packed DIB.","pos":[86,178],"source":" If `lbStyle` is **BS_DIBPATTERN**, the **lbHatch** member contains a handle to a packed DIB."},{"content":"If <ph id=\"ph1\">`lbStyle`</ph> is <bpt id=\"p1\">**</bpt>BS_DIBPATTERNPT<ept id=\"p1\">**</ept>, the <bpt id=\"p2\">**</bpt>lbHatch<ept id=\"p2\">**</ept> member contains a pointer to a packed DIB.","pos":[179,274],"source":" If `lbStyle` is **BS_DIBPATTERNPT**, the **lbHatch** member contains a pointer to a packed DIB."},{"content":"If <ph id=\"ph1\">`lbStyle`</ph> is <bpt id=\"p1\">**</bpt>BS_HATCHED<ept id=\"p1\">**</ept>, the <bpt id=\"p2\">**</bpt>lbHatch<ept id=\"p2\">**</ept> member specifies the orientation of the lines used to create the hatch.","pos":[275,394],"source":" If `lbStyle` is **BS_HATCHED**, the **lbHatch** member specifies the orientation of the lines used to create the hatch."},{"content":"It can be one of the following values:","pos":[395,433]}]}]},{"pos":[2968,3022],"content":"<ph id=\"ph1\">`HS_BDIAGONAL`</ph> A 45-degree upward, left-to-right hatch","source":"`HS_BDIAGONAL` A 45-degree upward, left-to-right hatch"},{"pos":[3030,3075],"content":"<ph id=\"ph1\">`HS_CROSS`</ph> Horizontal and vertical crosshatch","source":"`HS_CROSS` Horizontal and vertical crosshatch"},{"pos":[3083,3118],"content":"<ph id=\"ph1\">`HS_DIAGCROSS`</ph> 45-degree crosshatch","source":"`HS_DIAGCROSS` 45-degree crosshatch"},{"pos":[3126,3182],"content":"<ph id=\"ph1\">`HS_FDIAGONAL`</ph> A 45-degree downward, left-to-right hatch","source":"`HS_FDIAGONAL` A 45-degree downward, left-to-right hatch"},{"pos":[3190,3222],"content":"<ph id=\"ph1\">`HS_HORIZONTAL`</ph> Horizontal hatch","source":"`HS_HORIZONTAL` Horizontal hatch"},{"pos":[3230,3258],"content":"<ph id=\"ph1\">`HS_VERTICAL`</ph> Vertical hatch","source":"`HS_VERTICAL` Vertical hatch"},{"content":"If <ph id=\"ph1\">`lbStyle`</ph> is <bpt id=\"p1\">**</bpt>BS_PATTERN<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>lbHatch<ept id=\"p2\">**</ept> is a handle to the bitmap that defines the pattern.","pos":[3265,3360],"source":"If `lbStyle` is **BS_PATTERN**, **lbHatch** is a handle to the bitmap that defines the pattern."},{"content":"If <ph id=\"ph1\">`lbStyle`</ph> is <bpt id=\"p1\">**</bpt>BS_SOLID<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>BS_HOLLOW<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>lbHatch<ept id=\"p3\">**</ept> is ignored.","pos":[3361,3431],"source":" If `lbStyle` is **BS_SOLID** or **BS_HOLLOW**, **lbHatch** is ignored."},{"pos":[3440,3447],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3451,3701],"content":"Although <bpt id=\"p1\">**</bpt>lbColor<ept id=\"p1\">**</ept> controls the foreground color of a hatch brush, the <bpt id=\"p2\">[</bpt>CDC::SetBkMode<ept id=\"p2\">](../../mfc/reference/cdc-class.md#cdc__setbkmode)</ept> and <bpt id=\"p3\">[</bpt>CDC::SetBkColor<ept id=\"p3\">](../../mfc/reference/cdc-class.md#cdc__setbkcolor)</ept> functions control the background color.","source":"Although **lbColor** controls the foreground color of a hatch brush, the [CDC::SetBkMode](../../mfc/reference/cdc-class.md#cdc__setbkmode) and [CDC::SetBkColor](../../mfc/reference/cdc-class.md#cdc__setbkcolor) functions control the background color."},{"pos":[3710,3722],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3726,3746],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> wingdi.h","source":"**Header:** wingdi.h"},{"pos":[3755,3763],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Structures, Styles, Callbacks, and Message Maps<ept id=\"p1\">](../../mfc/reference/structures-styles-callbacks-and-message-maps.md)</ept><ph id=\"ph1\"> </ph>","pos":[3767,3886],"source":"[Structures, Styles, Callbacks, and Message Maps](../../mfc/reference/structures-styles-callbacks-and-message-maps.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CDC::GetCharABCWidths<ept id=\"p1\">](../../mfc/reference/cdc-class.md#cdc__getcharabcwidths)</ept>","pos":[3889,3969],"source":" [CDC::GetCharABCWidths](../../mfc/reference/cdc-class.md#cdc__getcharabcwidths)"}],"content":"---\ntitle: \"LOGBRUSH Structure | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"LOGBRUSH\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"LOGBRUSH structure\"\nms.assetid: 1bf96768-52c5-4444-9bb8-d41ba2e27e68\ncaps.latest.revision: 11\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# LOGBRUSH Structure\nThe `LOGBRUSH` structure defines the style, color, and pattern of a physical brush. It is used by the Windows [CreateBrushIndirect](http://msdn.microsoft.com/library/windows/desktop/dd183487) and [ExtCreatePen](http://msdn.microsoft.com/library/windows/desktop/dd162705) functions.  \n  \n## Syntax  \n  \n```  \ntypedef struct tag LOGBRUSH { /* lb */  \n    UINT lbStyle;  \n    COLORREF lbColor;  \n    LONG lbHatch;  \n} LOGBRUSH;  \n```  \n  \n#### Parameters  \n `lbStyle`  \n Specifies the brush style. The `lbStyle` member must be one of the following styles:  \n  \n- **BS_DIBPATTERN** A pattern brush defined by a device-independent bitmap (DIB) specification. If `lbStyle` is **BS_DIBPATTERN**, the **lbHatch** member contains a handle to a packed DIB.  \n  \n- **BS_DIBPATTERNPT** A pattern brush defined by a device-independent bitmap (DIB) specification. If `lbStyle` is **BS_DIBPATTERNPT**, the **lbHatch** member contains a pointer to a packed DIB.  \n  \n- **BS_HATCHED** Hatched brush.  \n  \n- **BS_HOLLOW** Hollow brush.  \n  \n- **BS_NULL** Same as **BS_HOLLOW**.  \n  \n- **BS_PATTERN** Pattern brush defined by a memory bitmap.  \n  \n- **BS_SOLID** Solid brush.  \n  \n `lbColor`  \n Specifies the color in which the brush is to be drawn. If `lbStyle` is the **BS_HOLLOW** or **BS_PATTERN** style, **lbColor** is ignored. If `lbStyle` is **BS_DIBPATTERN** or **BS_DIBPATTERNBT**, the low-order word of **lbColor** specifies whether the **bmiColors** members of the [BITMAPINFO](../../mfc/reference/bitmapinfo-structure.md) structure contain explicit red, green, blue (RGB) values or indices into the currently realized logical palette. The **lbColor** member must be one of the following values:  \n  \n- **DIB_PAL_COLORS** The color table consists of an array of 16-bit indices into the currently realized logical palette.  \n  \n- **DIB_RGB_COLORS** The color table contains literal RGB values.  \n  \n *lbHatch*  \n Specifies a hatch style. The meaning depends on the brush style defined by `lbStyle`. If `lbStyle` is **BS_DIBPATTERN**, the **lbHatch** member contains a handle to a packed DIB. If `lbStyle` is **BS_DIBPATTERNPT**, the **lbHatch** member contains a pointer to a packed DIB. If `lbStyle` is **BS_HATCHED**, the **lbHatch** member specifies the orientation of the lines used to create the hatch. It can be one of the following values:  \n  \n- `HS_BDIAGONAL` A 45-degree upward, left-to-right hatch  \n  \n- `HS_CROSS` Horizontal and vertical crosshatch  \n  \n- `HS_DIAGCROSS` 45-degree crosshatch  \n  \n- `HS_FDIAGONAL` A 45-degree downward, left-to-right hatch  \n  \n- `HS_HORIZONTAL` Horizontal hatch  \n  \n- `HS_VERTICAL` Vertical hatch  \n  \n If `lbStyle` is **BS_PATTERN**, **lbHatch** is a handle to the bitmap that defines the pattern. If `lbStyle` is **BS_SOLID** or **BS_HOLLOW**, **lbHatch** is ignored.  \n  \n## Remarks  \n Although **lbColor** controls the foreground color of a hatch brush, the [CDC::SetBkMode](../../mfc/reference/cdc-class.md#cdc__setbkmode) and [CDC::SetBkColor](../../mfc/reference/cdc-class.md#cdc__setbkcolor) functions control the background color.  \n  \n## Requirements  \n **Header:** wingdi.h  \n  \n## See Also  \n [Structures, Styles, Callbacks, and Message Maps](../../mfc/reference/structures-styles-callbacks-and-message-maps.md)   \n [CDC::GetCharABCWidths](../../mfc/reference/cdc-class.md#cdc__getcharabcwidths)\n\n"}