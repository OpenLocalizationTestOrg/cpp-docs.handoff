{"nodes":[{"pos":[12,53],"content":"&lt;locale&gt; functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>locale<ph id=\"ph2\">&amp;gt;</ph> functions | Microsoft Docs","pos":[0,41],"source":"&lt;locale&gt; functions | Microsoft Docs"}]},{"pos":[256,280],"content":"&lt;locale&gt; functions","linkify":"&lt;locale&gt; functions","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>locale<ph id=\"ph2\">&amp;gt;</ph> functions","pos":[0,24],"source":"&lt;locale&gt; functions"}]},{"pos":[299,322],"content":"<bpt id=\"p1\">[</bpt>has_facet<ept id=\"p1\">](#has_facet)</ept>","source":"[has_facet](#has_facet)"},{"pos":[323,342],"content":"<bpt id=\"p1\">[</bpt>isalnum<ept id=\"p1\">](#isalnum)</ept>","source":"[isalnum](#isalnum)"},{"pos":[343,362],"content":"<bpt id=\"p1\">[</bpt>isalpha<ept id=\"p1\">](#isalpha)</ept>","source":"[isalpha](#isalpha)"},{"pos":[367,386],"content":"<bpt id=\"p1\">[</bpt>iscntrl<ept id=\"p1\">](#iscntrl)</ept>","source":"[iscntrl](#iscntrl)"},{"pos":[387,406],"content":"<bpt id=\"p1\">[</bpt>isdigit<ept id=\"p1\">](#isdigit)</ept>","source":"[isdigit](#isdigit)"},{"pos":[407,426],"content":"<bpt id=\"p1\">[</bpt>isgraph<ept id=\"p1\">](#isgraph)</ept>","source":"[isgraph](#isgraph)"},{"pos":[431,450],"content":"<bpt id=\"p1\">[</bpt>islower<ept id=\"p1\">](#islower)</ept>","source":"[islower](#islower)"},{"pos":[451,470],"content":"<bpt id=\"p1\">[</bpt>isprint<ept id=\"p1\">](#isprint)</ept>","source":"[isprint](#isprint)"},{"pos":[471,490],"content":"<bpt id=\"p1\">[</bpt>ispunct<ept id=\"p1\">](#ispunct)</ept>","source":"[ispunct](#ispunct)"},{"pos":[495,514],"content":"<bpt id=\"p1\">[</bpt>isspace<ept id=\"p1\">](#isspace)</ept>","source":"[isspace](#isspace)"},{"pos":[515,534],"content":"<bpt id=\"p1\">[</bpt>isupper<ept id=\"p1\">](#isupper)</ept>","source":"[isupper](#isupper)"},{"pos":[535,556],"content":"<bpt id=\"p1\">[</bpt>isxdigit<ept id=\"p1\">](#isxdigit)</ept>","source":"[isxdigit](#isxdigit)"},{"pos":[561,580],"content":"<bpt id=\"p1\">[</bpt>tolower<ept id=\"p1\">](#tolower)</ept>","source":"[tolower](#tolower)"},{"pos":[581,600],"content":"<bpt id=\"p1\">[</bpt>toupper<ept id=\"p1\">](#toupper)</ept>","source":"[toupper](#toupper)"},{"pos":[601,624],"content":"<bpt id=\"p1\">[</bpt>use_facet<ept id=\"p1\">](#use_facet)</ept>","source":"[use_facet](#use_facet)"},{"pos":[635,670],"content":"<bpt id=\"p1\">&lt;a name=\"has_facet\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  has_facet","linkify":"<a name=\"has_facet\"></a>  has_facet","source":"<a name=\"has_facet\"></a>  has_facet"},{"content":"Tests if a particular facet is stored in a specified locale.","pos":[674,734]},{"pos":[819,829],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The locale to be tested for the presence of a facet.","pos":[842,894]},{"pos":[904,916],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[920,994],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the locale has the facet tested for; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if it does not.","source":"**true** if the locale has the facet tested for; **false** if it does not."},{"pos":[1004,1011],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1015,1207],"content":"The template function is useful for checking whether nonmandatory facets are listed in a locale before <ph id=\"ph1\">`use_facet`</ph> is called to avoid the exception that would be thrown if it were not present.","source":"The template function is useful for checking whether nonmandatory facets are listed in a locale before `use_facet` is called to avoid the exception that would be thrown if it were not present."},{"pos":[1217,1224],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1538,1569],"content":"<bpt id=\"p1\">&lt;a name=\"isalnum\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  isalnum","linkify":"<a name=\"isalnum\"></a>  isalnum","source":"<a name=\"isalnum\"></a>  isalnum"},{"content":"Tests whether an element in a locale is an alphabetic or a numeric character.","pos":[1573,1650]},{"pos":[1750,1760],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The alphanumeric element to be tested.","pos":[1772,1810]},{"content":"The locale containing the alphanumeric element to be tested.","pos":[1826,1886]},{"pos":[1896,1908],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1912,1983],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the element tested is alphanumeric; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if it is not.","source":"**true** if the element tested is alphanumeric; **false** if it is not."},{"pos":[1993,2000],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3197,3228],"content":"<bpt id=\"p1\">&lt;a name=\"isalpha\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  isalpha","linkify":"<a name=\"isalpha\"></a>  isalpha","source":"<a name=\"isalpha\"></a>  isalpha"},{"content":"Tests whether an element in a locale is an alphabetic character.","pos":[3232,3296]},{"pos":[3396,3406],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The element to be tested.","pos":[3418,3443]},{"content":"The locale containing the alphabetic element to be tested.","pos":[3459,3517]},{"pos":[3527,3539],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3543,3612],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the element tested is alphabetic; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if it is not.","source":"**true** if the element tested is alphabetic; **false** if it is not."},{"pos":[3622,3629],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template function returns <bpt id=\"p1\">[</bpt>use_facet<ept id=\"p1\">](../standard-library/locale-functions.md#use_facet)</ept><ph id=\"ph1\">&lt; </ph><bpt id=\"p2\">[</bpt>ctype<ept id=\"p2\">](../standard-library/ctype-class.md)</ept><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p3\">**</bpt>CharType<ept id=\"p3\">**</ept>&gt; &gt;( <ph id=\"ph3\">`Loc`</ph>).","pos":[3633,3797],"source":"The template function returns [use_facet](../standard-library/locale-functions.md#use_facet)< [ctype](../standard-library/ctype-class.md)\\< **CharType**> >( `Loc`)."},{"content":"<bpt id=\"p1\">[</bpt>is<ept id=\"p1\">](../standard-library/ctype-class.md#ctype__is)</ept>( <bpt id=\"p2\">**</bpt>ctype<ept id=\"p2\">**</ept><ph id=\"ph1\">\\&lt;</ph> <bpt id=\"p3\">**</bpt>CharType<ept id=\"p3\">**</ept>&gt;:: <bpt id=\"p4\">**</bpt>alpha<ept id=\"p4\">**</ept>, <ph id=\"ph2\">`Ch`</ph>).","pos":[3798,3895],"source":"[is](../standard-library/ctype-class.md#ctype__is)( **ctype**\\< **CharType**>:: **alpha**, `Ch`)."},{"pos":[3905,3912],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4918,4949],"content":"<bpt id=\"p1\">&lt;a name=\"iscntrl\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  iscntrl","linkify":"<a name=\"iscntrl\"></a>  iscntrl","source":"<a name=\"iscntrl\"></a>  iscntrl"},{"content":"Tests whether an element in a locale is a control character.","pos":[4953,5013]},{"pos":[5113,5123],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The element to be tested.","pos":[5135,5160]},{"content":"The locale containing the element to be tested.","pos":[5176,5223]},{"pos":[5233,5245],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5249,5327],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the element tested is a control character; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if it is not.","source":"**true** if the element tested is a control character; **false** if it is not."},{"pos":[5337,5344],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template function returns <bpt id=\"p1\">[</bpt>use_facet<ept id=\"p1\">](../standard-library/locale-functions.md#use_facet)</ept><ph id=\"ph1\">&lt; </ph><bpt id=\"p2\">[</bpt>ctype<ept id=\"p2\">](../standard-library/ctype-class.md)</ept><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p3\">**</bpt>CharType<ept id=\"p3\">**</ept>&gt; &gt;( <ph id=\"ph3\">`Loc`</ph>).","pos":[5348,5512],"source":"The template function returns [use_facet](../standard-library/locale-functions.md#use_facet)< [ctype](../standard-library/ctype-class.md)\\< **CharType**> >( `Loc`)."},{"content":"<bpt id=\"p1\">[</bpt>is<ept id=\"p1\">](../standard-library/ctype-class.md#ctype__is)</ept>( <bpt id=\"p2\">**</bpt>ctype<ept id=\"p2\">**</ept><ph id=\"ph1\">\\&lt;</ph> <bpt id=\"p3\">**</bpt>CharType<ept id=\"p3\">**</ept>&gt;:: <bpt id=\"p4\">**</bpt>cntrl<ept id=\"p4\">**</ept>, <ph id=\"ph2\">`Ch`</ph>).","pos":[5513,5610],"source":"[is](../standard-library/ctype-class.md#ctype__is)( **ctype**\\< **CharType**>:: **cntrl**, `Ch`)."},{"pos":[5620,5627],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6757,6788],"content":"<bpt id=\"p1\">&lt;a name=\"isdigit\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  isdigit","linkify":"<a name=\"isdigit\"></a>  isdigit","source":"<a name=\"isdigit\"></a>  isdigit"},{"content":"Tests whether an element in a locale is a numeric character.","pos":[6792,6852]},{"pos":[6952,6962],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The element to be tested.","pos":[6974,6999]},{"content":"The locale containing the element to be tested.","pos":[7015,7062]},{"pos":[7072,7084],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7088,7166],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the element tested is a numeric character; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if it is not.","source":"**true** if the element tested is a numeric character; **false** if it is not."},{"pos":[7176,7183],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template function returns <bpt id=\"p1\">[</bpt>use_facet<ept id=\"p1\">](../standard-library/locale-functions.md#use_facet)</ept><ph id=\"ph1\">&lt; </ph><bpt id=\"p2\">[</bpt>ctype<ept id=\"p2\">](../standard-library/ctype-class.md)</ept><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p3\">**</bpt>CharType<ept id=\"p3\">**</ept>&gt; &gt;( <ph id=\"ph3\">`Loc`</ph>).","pos":[7187,7351],"source":"The template function returns [use_facet](../standard-library/locale-functions.md#use_facet)< [ctype](../standard-library/ctype-class.md)\\< **CharType**> >( `Loc`)."},{"content":"<bpt id=\"p1\">[</bpt>is<ept id=\"p1\">](../standard-library/ctype-class.md#ctype__is)</ept>( <bpt id=\"p2\">**</bpt>ctype<ept id=\"p2\">**</ept><ph id=\"ph1\">\\&lt;</ph> <bpt id=\"p3\">**</bpt>CharType<ept id=\"p3\">**</ept>&gt;:: <bpt id=\"p4\">**</bpt>digit<ept id=\"p4\">**</ept>, <ph id=\"ph2\">`Ch`</ph>).","pos":[7352,7449],"source":"[is](../standard-library/ctype-class.md#ctype__is)( **ctype**\\< **CharType**>:: **digit**, `Ch`)."},{"pos":[7459,7466],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8530,8561],"content":"<bpt id=\"p1\">&lt;a name=\"isgraph\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  isgraph","linkify":"<a name=\"isgraph\"></a>  isgraph","source":"<a name=\"isgraph\"></a>  isgraph"},{"content":"Tests whether an element in a locale is an alphanumeric or punctuation character.","pos":[8565,8646]},{"pos":[8746,8756],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The element to be tested.","pos":[8768,8793]},{"content":"The locale containing the element to be tested.","pos":[8809,8856]},{"pos":[8866,8878],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8882,8983],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the element tested is an alphanumeric or a punctuation character; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if it is not.","source":"**true** if the element tested is an alphanumeric or a punctuation character; **false** if it is not."},{"pos":[8993,9000],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template function returns <bpt id=\"p1\">[</bpt>use_facet<ept id=\"p1\">](../standard-library/locale-functions.md#use_facet)</ept><ph id=\"ph1\">&lt; </ph><bpt id=\"p2\">[</bpt>ctype<ept id=\"p2\">](../standard-library/ctype-class.md)</ept><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p3\">**</bpt>CharType<ept id=\"p3\">**</ept>&gt; &gt;( <ph id=\"ph3\">`Loc`</ph>).","pos":[9004,9168],"source":"The template function returns [use_facet](../standard-library/locale-functions.md#use_facet)< [ctype](../standard-library/ctype-class.md)\\< **CharType**> >( `Loc`)."},{"content":"<bpt id=\"p1\">[</bpt>is<ept id=\"p1\">](../standard-library/ctype-class.md#ctype__is)</ept>( <bpt id=\"p2\">**</bpt>ctype<ept id=\"p2\">**</ept><ph id=\"ph1\">\\&lt;</ph> <bpt id=\"p3\">**</bpt>CharType<ept id=\"p3\">**</ept>&gt;:: <bpt id=\"p4\">**</bpt>graph<ept id=\"p4\">**</ept>, <ph id=\"ph2\">`Ch`</ph>).","pos":[9169,9266],"source":"[is](../standard-library/ctype-class.md#ctype__is)( **ctype**\\< **CharType**>:: **graph**, `Ch`)."},{"pos":[9276,9283],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10502,10533],"content":"<bpt id=\"p1\">&lt;a name=\"islower\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  islower","linkify":"<a name=\"islower\"></a>  islower","source":"<a name=\"islower\"></a>  islower"},{"content":"Tests whether an element in a locale is lower case.","pos":[10537,10588]},{"pos":[10688,10698],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The element to be tested.","pos":[10710,10735]},{"content":"The locale containing the element to be tested.","pos":[10751,10798]},{"pos":[10808,10820],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10824,10904],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the element tested is a lowercase character; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if it is not.","source":"**true** if the element tested is a lowercase character; **false** if it is not."},{"pos":[10914,10921],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template function returns <bpt id=\"p1\">[</bpt>use_facet<ept id=\"p1\">](../standard-library/locale-functions.md#use_facet)</ept><ph id=\"ph1\">&lt; </ph><bpt id=\"p2\">[</bpt>ctype<ept id=\"p2\">](../standard-library/ctype-class.md)</ept><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p3\">**</bpt>CharType<ept id=\"p3\">**</ept>&gt; &gt;( <ph id=\"ph3\">`Loc`</ph>).","pos":[10925,11089],"source":"The template function returns [use_facet](../standard-library/locale-functions.md#use_facet)< [ctype](../standard-library/ctype-class.md)\\< **CharType**> >( `Loc`)."},{"content":"<bpt id=\"p1\">[</bpt>is<ept id=\"p1\">](../standard-library/ctype-class.md#ctype__is)</ept>( <bpt id=\"p2\">**</bpt>ctype<ept id=\"p2\">**</ept><ph id=\"ph1\">\\&lt;</ph> <bpt id=\"p3\">**</bpt>CharType<ept id=\"p3\">**</ept>&gt;:: <bpt id=\"p4\">**</bpt>lower<ept id=\"p4\">**</ept>, <ph id=\"ph2\">`Ch`</ph>).","pos":[11090,11187],"source":"[is](../standard-library/ctype-class.md#ctype__is)( **ctype**\\< **CharType**>:: **lower**, `Ch`)."},{"pos":[11197,11204],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12279,12310],"content":"<bpt id=\"p1\">&lt;a name=\"isprint\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  isprint","linkify":"<a name=\"isprint\"></a>  isprint","source":"<a name=\"isprint\"></a>  isprint"},{"content":"Tests whether an element in a locale is a printable character.","pos":[12314,12376]},{"pos":[12476,12486],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The element to be tested.","pos":[12498,12523]},{"content":"The locale containing the element to be tested.","pos":[12539,12586]},{"pos":[12596,12608],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12612,12682],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the element tested is a printable; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if it is not.","source":"**true** if the element tested is a printable; **false** if it is not."},{"pos":[12692,12699],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template function returns <bpt id=\"p1\">[</bpt>use_facet<ept id=\"p1\">](../standard-library/locale-functions.md#use_facet)</ept><ph id=\"ph1\">&lt; </ph><bpt id=\"p2\">[</bpt>ctype<ept id=\"p2\">](../standard-library/ctype-class.md)</ept><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p3\">**</bpt>CharType<ept id=\"p3\">**</ept>&gt; &gt;( <ph id=\"ph3\">`Loc`</ph>).","pos":[12703,12867],"source":"The template function returns [use_facet](../standard-library/locale-functions.md#use_facet)< [ctype](../standard-library/ctype-class.md)\\< **CharType**> >( `Loc`)."},{"content":"<bpt id=\"p1\">[</bpt>is<ept id=\"p1\">](../standard-library/ctype-class.md#ctype__is)</ept>( <bpt id=\"p2\">**</bpt>ctype<ept id=\"p2\">**</ept><ph id=\"ph1\">\\&lt;</ph> <bpt id=\"p3\">**</bpt>CharType<ept id=\"p3\">**</ept>&gt;:: <bpt id=\"p4\">**</bpt>print<ept id=\"p4\">**</ept>, <ph id=\"ph2\">`Ch`</ph>).","pos":[12868,12965],"source":"[is](../standard-library/ctype-class.md#ctype__is)( **ctype**\\< **CharType**>:: **print**, `Ch`)."},{"pos":[12975,12982],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[14094,14125],"content":"<bpt id=\"p1\">&lt;a name=\"ispunct\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ispunct","linkify":"<a name=\"ispunct\"></a>  ispunct","source":"<a name=\"ispunct\"></a>  ispunct"},{"content":"Tests whether an element in a locale is a punctuation character.","pos":[14129,14193]},{"pos":[14293,14303],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The element to be tested.","pos":[14315,14340]},{"content":"The locale containing the element to be tested.","pos":[14356,14403]},{"pos":[14413,14425],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[14429,14511],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the element tested is a punctuation character; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if it is not.","source":"**true** if the element tested is a punctuation character; **false** if it is not."},{"pos":[14521,14528],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template function returns <bpt id=\"p1\">[</bpt>use_facet<ept id=\"p1\">](../standard-library/locale-functions.md#use_facet)</ept><ph id=\"ph1\">`&lt;`</ph><bpt id=\"p2\">[</bpt>ctype<ept id=\"p2\">](../standard-library/ctype-class.md)</ept><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p3\">**</bpt>CharType<ept id=\"p3\">**</ept>&gt; &gt;( <ph id=\"ph3\">`Loc`</ph>).","pos":[14532,14697],"source":"The template function returns [use_facet](../standard-library/locale-functions.md#use_facet)`<`[ctype](../standard-library/ctype-class.md)\\< **CharType**> >( `Loc`)."},{"content":"<bpt id=\"p1\">[</bpt>is<ept id=\"p1\">](../standard-library/ctype-class.md#ctype__is)</ept>( <bpt id=\"p2\">**</bpt>ctype<ept id=\"p2\">**</ept><ph id=\"ph1\">\\&lt;</ph> <bpt id=\"p3\">**</bpt>CharType<ept id=\"p3\">**</ept>&gt;:: <bpt id=\"p4\">**</bpt>punct<ept id=\"p4\">**</ept>, <ph id=\"ph2\">`Ch`</ph>).","pos":[14698,14795],"source":"[is](../standard-library/ctype-class.md#ctype__is)( **ctype**\\< **CharType**>:: **punct**, `Ch`)."},{"pos":[14805,14812],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[15899,15930],"content":"<bpt id=\"p1\">&lt;a name=\"isspace\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  isspace","linkify":"<a name=\"isspace\"></a>  isspace","source":"<a name=\"isspace\"></a>  isspace"},{"content":"Tests whether an element in a locale is a whitespace character.","pos":[15934,15997]},{"pos":[16097,16107],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The element to be tested.","pos":[16119,16144]},{"content":"The locale containing the element to be tested.","pos":[16160,16207]},{"pos":[16217,16229],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16233,16314],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the element tested is a whitespace character; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if it is not.","source":"**true** if the element tested is a whitespace character; **false** if it is not."},{"pos":[16324,16331],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template function returns <bpt id=\"p1\">[</bpt>use_facet<ept id=\"p1\">](../standard-library/locale-functions.md#use_facet)</ept><ph id=\"ph1\">&lt; </ph><bpt id=\"p2\">[</bpt>ctype<ept id=\"p2\">](../standard-library/ctype-class.md)</ept><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p3\">**</bpt>CharType<ept id=\"p3\">**</ept>&gt; &gt;( <ph id=\"ph3\">`Loc`</ph>).","pos":[16335,16499],"source":"The template function returns [use_facet](../standard-library/locale-functions.md#use_facet)< [ctype](../standard-library/ctype-class.md)\\< **CharType**> >( `Loc`)."},{"content":"<bpt id=\"p1\">[</bpt>is<ept id=\"p1\">](../standard-library/ctype-class.md#ctype__is)</ept>( <bpt id=\"p2\">**</bpt>ctype<ept id=\"p2\">**</ept><ph id=\"ph1\">\\&lt;</ph> <bpt id=\"p3\">**</bpt>CharType<ept id=\"p3\">**</ept>&gt;:: <bpt id=\"p4\">**</bpt>space<ept id=\"p4\">**</ept>, <ph id=\"ph2\">`Ch`</ph>).","pos":[16500,16597],"source":"[is](../standard-library/ctype-class.md#ctype__is)( **ctype**\\< **CharType**>:: **space**, `Ch`)."},{"pos":[16607,16614],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17716,17747],"content":"<bpt id=\"p1\">&lt;a name=\"isupper\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  isupper","linkify":"<a name=\"isupper\"></a>  isupper","source":"<a name=\"isupper\"></a>  isupper"},{"content":"Tests whether an element in a locale is in upper case.","pos":[17751,17805]},{"pos":[17905,17915],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The element to be tested.","pos":[17927,17952]},{"content":"The locale containing the element to be tested.","pos":[17968,18015]},{"pos":[18025,18037],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[18041,18122],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the element tested is an uppercase character; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if it is not.","source":"**true** if the element tested is an uppercase character; **false** if it is not."},{"pos":[18132,18139],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template function returns <bpt id=\"p1\">[</bpt>use_facet<ept id=\"p1\">](../standard-library/locale-functions.md#use_facet)</ept><ph id=\"ph1\">&lt; </ph><bpt id=\"p2\">[</bpt>ctype<ept id=\"p2\">](../standard-library/ctype-class.md)</ept><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p3\">**</bpt>CharType<ept id=\"p3\">**</ept>&gt; &gt;( <ph id=\"ph3\">`Loc`</ph>).","pos":[18143,18307],"source":"The template function returns [use_facet](../standard-library/locale-functions.md#use_facet)< [ctype](../standard-library/ctype-class.md)\\< **CharType**> >( `Loc`)."},{"content":"<bpt id=\"p1\">[</bpt>is<ept id=\"p1\">](../standard-library/ctype-class.md#ctype__is)</ept>( <bpt id=\"p2\">**</bpt>ctype<ept id=\"p2\">**</ept><ph id=\"ph1\">\\&lt;</ph> <bpt id=\"p3\">**</bpt>CharType<ept id=\"p3\">**</ept>&gt;:: <bpt id=\"p4\">**</bpt>upper<ept id=\"p4\">**</ept>, <ph id=\"ph2\">`Ch`</ph>).","pos":[18308,18405],"source":"[is](../standard-library/ctype-class.md#ctype__is)( **ctype**\\< **CharType**>:: **upper**, `Ch`)."},{"pos":[18415,18422],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[19497,19530],"content":"<bpt id=\"p1\">&lt;a name=\"isxdigit\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  isxdigit","linkify":"<a name=\"isxdigit\"></a>  isxdigit","source":"<a name=\"isxdigit\"></a>  isxdigit"},{"content":"Tests whether an element in a locale is a character used to represent a hexadecimal number.","pos":[19534,19625]},{"pos":[19726,19736],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The element to be tested.","pos":[19748,19773]},{"content":"The locale containing the element to be tested.","pos":[19789,19836]},{"pos":[19846,19858],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19862,19971],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the element tested is a character used to represent a hexadecimal number; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if it is not.","source":"**true** if the element tested is a character used to represent a hexadecimal number; **false** if it is not."},{"pos":[19981,19988],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template function returns <bpt id=\"p1\">[</bpt>use_facet<ept id=\"p1\">](../standard-library/locale-functions.md#use_facet)</ept><ph id=\"ph1\">&lt; </ph><bpt id=\"p2\">[</bpt>ctype<ept id=\"p2\">](../standard-library/ctype-class.md)</ept><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p3\">**</bpt>CharType<ept id=\"p3\">**</ept>&gt; &gt;( <ph id=\"ph3\">`Loc`</ph>).","pos":[19992,20156],"source":"The template function returns [use_facet](../standard-library/locale-functions.md#use_facet)< [ctype](../standard-library/ctype-class.md)\\< **CharType**> >( `Loc`)."},{"content":"<bpt id=\"p1\">[</bpt>is<ept id=\"p1\">](../standard-library/ctype-class.md#ctype__is)</ept>( <bpt id=\"p2\">**</bpt>ctype<ept id=\"p2\">**</ept><ph id=\"ph1\">\\&lt;</ph> <bpt id=\"p3\">**</bpt>CharType<ept id=\"p3\">**</ept>&gt;:: <bpt id=\"p4\">**</bpt>xdigit<ept id=\"p4\">**</ept>, <ph id=\"ph2\">`Ch`</ph>).","pos":[20157,20255],"source":"[is](../standard-library/ctype-class.md#ctype__is)( **ctype**\\< **CharType**>:: **xdigit**, `Ch`)."},{"content":"Hexadecimal digits use base 16 to represent numbers, using the numbers 0 through 9 plus case-insensitive letters A through F to represent the decimal numbers 0 through 15.","pos":[20262,20433]},{"pos":[20443,20450],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[21577,21608],"content":"<bpt id=\"p1\">&lt;a name=\"tolower\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  tolower","linkify":"<a name=\"tolower\"></a>  tolower","source":"<a name=\"tolower\"></a>  tolower"},{"content":"Converts a character to lower case.","pos":[21612,21647]},{"pos":[21751,21761],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The character to be converted to lower case.","pos":[21773,21817]},{"content":"The locale containing the character to be converted.","pos":[21833,21885]},{"pos":[21895,21907],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The character converted to lower case.","pos":[21911,21949]},{"pos":[21959,21966],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template function returns <bpt id=\"p1\">[</bpt>use_facet<ept id=\"p1\">](../standard-library/locale-functions.md#use_facet)</ept><ph id=\"ph1\">&lt; </ph><bpt id=\"p2\">[</bpt>ctype<ept id=\"p2\">](../standard-library/ctype-class.md)</ept><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p3\">**</bpt>CharType<ept id=\"p3\">**</ept>&gt; &gt;( <ph id=\"ph3\">`Loc`</ph>).","pos":[21970,22134],"source":"The template function returns [use_facet](../standard-library/locale-functions.md#use_facet)< [ctype](../standard-library/ctype-class.md)\\< **CharType**> >( `Loc`)."},{"content":"<bpt id=\"p1\">[</bpt>tolower<ept id=\"p1\">](../standard-library/ctype-class.md#ctype__tolower)</ept>( <ph id=\"ph1\">`Ch`</ph>).","pos":[22135,22203],"source":"[tolower](../standard-library/ctype-class.md#ctype__tolower)( `Ch`)."},{"pos":[22213,22220],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[22833,22864],"content":"<bpt id=\"p1\">&lt;a name=\"toupper\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  toupper","linkify":"<a name=\"toupper\"></a>  toupper","source":"<a name=\"toupper\"></a>  toupper"},{"content":"Converts a character to upper case.","pos":[22868,22903]},{"pos":[23007,23017],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The character to be converted to upper case.","pos":[23029,23073]},{"content":"The locale containing the character to be converted.","pos":[23089,23141]},{"pos":[23151,23163],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The character converted to upper case.","pos":[23167,23205]},{"pos":[23215,23222],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template function returns <bpt id=\"p1\">[</bpt>use_facet<ept id=\"p1\">](../standard-library/locale-functions.md#use_facet)</ept><ph id=\"ph1\">&lt; </ph><bpt id=\"p2\">[</bpt>ctype<ept id=\"p2\">](../standard-library/ctype-class.md)</ept><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p3\">**</bpt>CharType<ept id=\"p3\">**</ept>&gt; &gt;( <ph id=\"ph3\">`Loc`</ph>).","pos":[23226,23390],"source":"The template function returns [use_facet](../standard-library/locale-functions.md#use_facet)< [ctype](../standard-library/ctype-class.md)\\< **CharType**> >( `Loc`)."},{"content":"<bpt id=\"p1\">[</bpt>toupper<ept id=\"p1\">](../standard-library/ctype-class.md#ctype__toupper)</ept>( <ph id=\"ph1\">`Ch`</ph>).","pos":[23391,23459],"source":"[toupper](../standard-library/ctype-class.md#ctype__toupper)( `Ch`)."},{"pos":[23469,23476],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[24089,24124],"content":"<bpt id=\"p1\">&lt;a name=\"use_facet\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  use_facet","linkify":"<a name=\"use_facet\"></a>  use_facet","source":"<a name=\"use_facet\"></a>  use_facet"},{"content":"Returns a reference to a facet of a specified type stored in a locale.","pos":[24128,24198]},{"pos":[24291,24301],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The const locale containing the type of facet being referenced.","pos":[24314,24377]},{"pos":[24387,24399],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24403,24482],"content":"A reference to the facet of class <ph id=\"ph1\">`Facet`</ph> contained within the argument locale.","source":"A reference to the facet of class `Facet` contained within the argument locale."},{"pos":[24492,24499],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The reference to the facet returned by the template function remains valid as long as any copy of the containing locale exists.","pos":[24503,24630]},{"content":"If no such facet object of class <ph id=\"ph1\">`Facet`</ph> is listed in the argument locale, the function throws a <ph id=\"ph2\">`bad_cast`</ph> exception.","pos":[24631,24749],"source":" If no such facet object of class `Facet` is listed in the argument locale, the function throws a `bad_cast` exception."},{"pos":[24759,24766],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[25740,25748],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[25752,25794],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>locale&gt;<ept id=\"p1\">](../standard-library/locale.md)</ept>","source":"[\\<locale>](../standard-library/locale.md)"}],"content":"---\ntitle: \"&lt;locale&gt; functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: b06c1ceb-33a7-48d3-8d4b-2714bbb27f14\ncaps.latest.revision: 15\nmanager: \"ghogen\"\n---\n# &lt;locale&gt; functions\n||||  \n|-|-|-|  \n|[has_facet](#has_facet)|[isalnum](#isalnum)|[isalpha](#isalpha)|  \n|[iscntrl](#iscntrl)|[isdigit](#isdigit)|[isgraph](#isgraph)|  \n|[islower](#islower)|[isprint](#isprint)|[ispunct](#ispunct)|  \n|[isspace](#isspace)|[isupper](#isupper)|[isxdigit](#isxdigit)|  \n|[tolower](#tolower)|[toupper](#toupper)|[use_facet](#use_facet)|  \n  \n##  <a name=\"has_facet\"></a>  has_facet  \n Tests if a particular facet is stored in a specified locale.  \n  \n```  \ntemplate <class Facet>  \nbool has_facet(const locale& Loc);\n```  \n  \n### Parameters  \n `Loc`  \n The locale to be tested for the presence of a facet.  \n  \n### Return Value  \n **true** if the locale has the facet tested for; **false** if it does not.  \n  \n### Remarks  \n The template function is useful for checking whether nonmandatory facets are listed in a locale before `use_facet` is called to avoid the exception that would be thrown if it were not present.  \n  \n### Example  \n  \n```cpp  \n// locale_has_facet.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \nusing namespace std;  \n  \nint main( )  \n{  \n   locale loc ( \"German_Germany\" );  \n   bool result = has_facet <ctype<char> > ( loc );  \n   cout << result << endl;  \n}  \n```  \n  \n```Output  \n1  \n```  \n  \n##  <a name=\"isalnum\"></a>  isalnum  \n Tests whether an element in a locale is an alphabetic or a numeric character.  \n  \n```  \ntemplate <class CharType>  \nbool isalnum(CharType Ch, const locale& Loc)  \n```  \n  \n### Parameters  \n `Ch`  \n The alphanumeric element to be tested.  \n  \n `Loc`  \n The locale containing the alphanumeric element to be tested.  \n  \n### Return Value  \n **true** if the element tested is alphanumeric; **false** if it is not.  \n  \n### Example  \n  \n```cpp  \n// locale_isalnum.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n  \nusing namespace std;  \n  \nint main( )     \n{  \n   locale loc ( \"German_Germany\" );  \n   bool result1 = isalnum ( 'L', loc);  \n   bool result2 = isalnum ( '@', loc);  \n   bool result3 = isalnum ( '3', loc);  \n  \n   if ( result1 )  \n      cout << \"The character 'L' in the locale is \"  \n           << \"alphanumeric.\" << endl;  \n   else  \n      cout << \"The character 'L' in the locale is \"  \n           << \" not alphanumeric.\" << endl;  \n  \n   if ( result2 )  \n      cout << \"The character '@' in the locale is \"  \n           << \"alphanumeric.\" << endl;  \n   else  \n      cout << \"The character '@' in the locale is \"  \n           << \" not alphanumeric.\" << endl;  \n  \n   if ( result3 )  \n      cout << \"The character '3' in the locale is \"  \n           << \"alphanumeric.\" << endl;  \n   else  \n      cout << \"The character '3' in the locale is \"  \n           << \" not alphanumeric.\" << endl;  \n}  \n```  \n  \n```Output  \nThe character 'L' in the locale is alphanumeric.  \nThe character '@' in the locale is  not alphanumeric.  \nThe character '3' in the locale is alphanumeric.  \n```  \n  \n##  <a name=\"isalpha\"></a>  isalpha  \n Tests whether an element in a locale is an alphabetic character.  \n  \n```  \ntemplate <class CharType>  \nbool isalpha(CharType Ch, const locale& Loc)  \n```  \n  \n### Parameters  \n `Ch`  \n The element to be tested.  \n  \n `Loc`  \n The locale containing the alphabetic element to be tested.  \n  \n### Return Value  \n **true** if the element tested is alphabetic; **false** if it is not.  \n  \n### Remarks  \n The template function returns [use_facet](../standard-library/locale-functions.md#use_facet)< [ctype](../standard-library/ctype-class.md)\\< **CharType**> >( `Loc`). [is](../standard-library/ctype-class.md#ctype__is)( **ctype**\\< **CharType**>:: **alpha**, `Ch`).  \n  \n### Example  \n  \n```cpp  \n// locale_isalpha.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n  \nusing namespace std;  \n  \nint main( )     \n{  \n   locale loc ( \"German_Germany\" );  \n   bool result1 = isalpha ( 'L', loc);  \n   bool result2 = isalpha ( '@', loc);  \n   bool result3 = isalpha ( '3', loc);  \n  \n   if ( result1 )  \n      cout << \"The character 'L' in the locale is \"  \n           << \"alphabetic.\" << endl;  \n   else  \n      cout << \"The character 'L' in the locale is \"  \n           << \" not alphabetic.\" << endl;  \n  \n   if ( result2 )  \n      cout << \"The character '@' in the locale is \"  \n           << \"alphabetic.\" << endl;  \n   else  \n      cout << \"The character '@' in the locale is \"  \n           << \" not alphabetic.\" << endl;  \n  \n   if ( result3 )  \n      cout << \"The character '3' in the locale is \"  \n           << \"alphabetic.\" << endl;  \n   else  \n      cout << \"The character '3' in the locale is \"  \n           << \" not alphabetic.\" << endl;  \n}  \n```  \n  \n##  <a name=\"iscntrl\"></a>  iscntrl  \n Tests whether an element in a locale is a control character.  \n  \n```  \ntemplate <class CharType>  \nbool iscntrl(CharType Ch, const locale& Loc)  \n```  \n  \n### Parameters  \n `Ch`  \n The element to be tested.  \n  \n `Loc`  \n The locale containing the element to be tested.  \n  \n### Return Value  \n **true** if the element tested is a control character; **false** if it is not.  \n  \n### Remarks  \n The template function returns [use_facet](../standard-library/locale-functions.md#use_facet)< [ctype](../standard-library/ctype-class.md)\\< **CharType**> >( `Loc`). [is](../standard-library/ctype-class.md#ctype__is)( **ctype**\\< **CharType**>:: **cntrl**, `Ch`).  \n  \n### Example  \n  \n```cpp  \n// locale_iscntrl.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n  \nusing namespace std;  \n  \nint main( )     \n{  \n   locale loc ( \"German_Germany\" );  \n   bool result1 = iscntrl ( 'L', loc );  \n   bool result2 = iscntrl ( '\\n', loc );  \n   bool result3 = iscntrl ( '\\t', loc );  \n  \n   if ( result1 )  \n      cout << \"The character 'L' in the locale is \"  \n           << \"a control character.\" << endl;  \n   else  \n      cout << \"The character 'L' in the locale is \"  \n           << \" not a control character.\" << endl;  \n  \n   if ( result2 )  \n      cout << \"The character-set 'backslash-n' in the locale\\n is \"  \n           << \"a control character.\" << endl;  \n   else  \n      cout << \"The character-set 'backslash-n' in the locale\\n is \"  \n           << \" not a control character.\" << endl;  \n  \n   if ( result3 )  \n      cout << \"The character-set 'backslash-t' in the locale\\n is \"  \n           << \"a control character.\" << endl;  \n   else  \n      cout << \"The character-set 'backslash-n' in the locale \\n is \"  \n           << \" not a control character.\" << endl;  \n}  \n```  \n  \n##  <a name=\"isdigit\"></a>  isdigit  \n Tests whether an element in a locale is a numeric character.  \n  \n```  \ntemplate <class CharType>  \nbool isdigit(CharType Ch, const locale& Loc)  \n```  \n  \n### Parameters  \n `Ch`  \n The element to be tested.  \n  \n `Loc`  \n The locale containing the element to be tested.  \n  \n### Return Value  \n **true** if the element tested is a numeric character; **false** if it is not.  \n  \n### Remarks  \n The template function returns [use_facet](../standard-library/locale-functions.md#use_facet)< [ctype](../standard-library/ctype-class.md)\\< **CharType**> >( `Loc`). [is](../standard-library/ctype-class.md#ctype__is)( **ctype**\\< **CharType**>:: **digit**, `Ch`).  \n  \n### Example  \n  \n```cpp  \n// locale_is_digit.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n  \nusing namespace std;  \n  \nint main( )     \n{  \n   locale loc ( \"German_Germany\" );  \n   bool result1 = isdigit ( 'L', loc );  \n   bool result2 = isdigit ( '@', loc );  \n   bool result3 = isdigit ( '3', loc );  \n  \n   if ( result1 )  \n      cout << \"The character 'L' in the locale is \"  \n           << \"a numeric character.\" << endl;  \n   else  \n      cout << \"The character 'L' in the locale is \"  \n           << \" not a numeric character.\" << endl;  \n  \n   if ( result2 )  \n      cout << \"The character '@' in the locale is \"  \n           << \"a numeric character.\" << endl;  \n   else  \n      cout << \"The character '@' in the locale is \"  \n           << \" not a numeric character.\" << endl;  \n  \n   if ( result3 )  \n      cout << \"The character '3' in the locale is \"  \n           << \"a numeric character.\" << endl;  \n   else  \n      cout << \"The character '3' in the locale is \"  \n           << \" not a numeric character.\" << endl;  \n}  \n```  \n  \n##  <a name=\"isgraph\"></a>  isgraph  \n Tests whether an element in a locale is an alphanumeric or punctuation character.  \n  \n```  \ntemplate <class CharType>  \nbool isgraph(CharType Ch, const locale& Loc)  \n```  \n  \n### Parameters  \n `Ch`  \n The element to be tested.  \n  \n `Loc`  \n The locale containing the element to be tested.  \n  \n### Return Value  \n **true** if the element tested is an alphanumeric or a punctuation character; **false** if it is not.  \n  \n### Remarks  \n The template function returns [use_facet](../standard-library/locale-functions.md#use_facet)< [ctype](../standard-library/ctype-class.md)\\< **CharType**> >( `Loc`). [is](../standard-library/ctype-class.md#ctype__is)( **ctype**\\< **CharType**>:: **graph**, `Ch`).  \n  \n### Example  \n  \n```cpp  \n// locale_is_graph.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n  \nusing namespace std;  \n  \nint main( )  \n{  \n   locale loc ( \"German_Germany\" );  \n   bool result1 = isgraph ( 'L', loc );  \n   bool result2 = isgraph ( '\\t', loc );  \n   bool result3 = isgraph ( '.', loc );  \n  \n   if ( result1 )  \n      cout << \"The character 'L' in the locale is\\n \"  \n           << \"an alphanumeric or punctuation character.\" << endl;  \n   else  \n      cout << \"The character 'L' in the locale is\\n \"  \n           << \" not an alphanumeric or punctuation character.\" << endl;  \n  \n   if ( result2 )  \n      cout << \"The character 'backslash-t' in the locale is\\n \"  \n           << \"an alphanumeric or punctuation character.\" << endl;  \n   else  \n      cout << \"The character 'backslash-t' in the locale is\\n \"  \n           << \"not an alphanumeric or punctuation character.\" << endl;  \n  \n   if ( result3 )  \n      cout << \"The character '.' in the locale is\\n \"  \n           << \"an alphanumeric or punctuation character.\" << endl;  \n   else  \n      cout << \"The character '.' in the locale is\\n \"  \n           << \" not an alphanumeric or punctuation character.\" << endl;  \n}  \n```  \n  \n##  <a name=\"islower\"></a>  islower  \n Tests whether an element in a locale is lower case.  \n  \n```  \ntemplate <class CharType>  \nbool islower(CharType Ch, const locale& Loc)  \n```  \n  \n### Parameters  \n `Ch`  \n The element to be tested.  \n  \n `Loc`  \n The locale containing the element to be tested.  \n  \n### Return Value  \n **true** if the element tested is a lowercase character; **false** if it is not.  \n  \n### Remarks  \n The template function returns [use_facet](../standard-library/locale-functions.md#use_facet)< [ctype](../standard-library/ctype-class.md)\\< **CharType**> >( `Loc`). [is](../standard-library/ctype-class.md#ctype__is)( **ctype**\\< **CharType**>:: **lower**, `Ch`).  \n  \n### Example  \n  \n```cpp  \n// locale_islower.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n  \nusing namespace std;  \n  \nint main( )     \n{  \n   locale loc ( \"German_Germany\" );  \n   bool result1 = islower ( 'L', loc );  \n   bool result2 = islower ( 'n', loc );  \n   bool result3 = islower ( '3', loc );  \n  \n   if ( result1 )  \n      cout << \"The character 'L' in the locale is \"  \n           << \"a lowercase character.\" << endl;  \n   else  \n      cout << \"The character 'L' in the locale is \"  \n           << \" not a lowercase character.\" << endl;  \n  \n   if ( result2 )  \n      cout << \"The character 'n' in the locale is \"  \n           << \"a lowercase character.\" << endl;  \n   else  \n      cout << \"The character 'n' in the locale is \"  \n           << \" not a lowercase character.\" << endl;  \n  \n   if ( result3 )  \n      cout << \"The character '3' in the locale is \"  \n           << \"a lowercase character.\" << endl;  \n   else  \n      cout << \"The character '3' in the locale is \"  \n           << \" not a lowercase character.\" << endl;  \n}  \n```  \n  \n##  <a name=\"isprint\"></a>  isprint  \n Tests whether an element in a locale is a printable character.  \n  \n```  \ntemplate <class CharType>  \nbool isprint(CharType Ch, const locale& Loc)  \n```  \n  \n### Parameters  \n `Ch`  \n The element to be tested.  \n  \n `Loc`  \n The locale containing the element to be tested.  \n  \n### Return Value  \n **true** if the element tested is a printable; **false** if it is not.  \n  \n### Remarks  \n The template function returns [use_facet](../standard-library/locale-functions.md#use_facet)< [ctype](../standard-library/ctype-class.md)\\< **CharType**> >( `Loc`). [is](../standard-library/ctype-class.md#ctype__is)( **ctype**\\< **CharType**>:: **print**, `Ch`).  \n  \n### Example  \n  \n```cpp  \n// locale_isprint.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \nusing namespace std;  \n  \nint main( )     \n{  \n   locale loc ( \"German_Germany\" );  \n  \n   bool result1 = isprint ( 'L', loc );  \n   if ( result1 )  \n      cout << \"The character 'L' in the locale is \"  \n           << \"a printable character.\" << endl;  \n   else  \n      cout << \"The character 'L' in the locale is \"  \n           << \" not a printable character.\" << endl;  \n  \n   bool result2 = isprint( '\\t', loc );  \n   if ( result2 )  \n      cout << \"The character 'backslash-t' in the locale is \"  \n           << \"a printable character.\" << endl;  \n   else  \n      cout << \"The character 'backslash-t' in the locale is \"  \n           << \" not a printable character.\" << endl;  \n  \n   bool result3 = isprint( '\\n', loc );  \n   if ( result3 )  \n      cout << \"The character 'backslash-n' in the locale is \"  \n           << \"a printable character.\" << endl;  \n   else  \n      cout << \"The character 'backslash-n' in the locale is \"  \n           << \" not a printable character.\" << endl;  \n}  \n```  \n  \n##  <a name=\"ispunct\"></a>  ispunct  \n Tests whether an element in a locale is a punctuation character.  \n  \n```  \ntemplate <class CharType>  \nbool ispunct(CharType Ch, const locale& Loc)  \n```  \n  \n### Parameters  \n `Ch`  \n The element to be tested.  \n  \n `Loc`  \n The locale containing the element to be tested.  \n  \n### Return Value  \n **true** if the element tested is a punctuation character; **false** if it is not.  \n  \n### Remarks  \n The template function returns [use_facet](../standard-library/locale-functions.md#use_facet)`<`[ctype](../standard-library/ctype-class.md)\\< **CharType**> >( `Loc`). [is](../standard-library/ctype-class.md#ctype__is)( **ctype**\\< **CharType**>:: **punct**, `Ch`).  \n  \n### Example  \n  \n```cpp  \n// locale_ispunct.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n  \nusing namespace std;  \n  \nint main( )     \n{  \n   locale loc ( \"German_Germany\" );  \n   bool result1 = ispunct ( 'L', loc );  \n   bool result2 = ispunct ( ';', loc );  \n   bool result3 = ispunct ( '*', loc );  \n  \n   if ( result1 )  \n      cout << \"The character 'L' in the locale is \"  \n           << \"a punctuation character.\" << endl;  \n   else  \n      cout << \"The character 'L' in the locale is \"  \n           << \" not a punctuation character.\" << endl;  \n  \n   if ( result2 )  \n      cout << \"The character ';' in the locale is \"  \n           << \"a punctuation character.\" << endl;  \n   else  \n      cout << \"The character ';' in the locale is \"  \n           << \" not a punctuation character.\" << endl;  \n  \n   if ( result3 )  \n      cout << \"The character '*' in the locale is \"  \n           << \"a punctuation character.\" << endl;  \n   else  \n      cout << \"The character '*' in the locale is \"  \n           << \" not a punctuation character.\" << endl;  \n}  \n```  \n  \n##  <a name=\"isspace\"></a>  isspace  \n Tests whether an element in a locale is a whitespace character.  \n  \n```  \ntemplate <class CharType>  \nbool isspace(CharType Ch, const locale& Loc)  \n```  \n  \n### Parameters  \n `Ch`  \n The element to be tested.  \n  \n `Loc`  \n The locale containing the element to be tested.  \n  \n### Return Value  \n **true** if the element tested is a whitespace character; **false** if it is not.  \n  \n### Remarks  \n The template function returns [use_facet](../standard-library/locale-functions.md#use_facet)< [ctype](../standard-library/ctype-class.md)\\< **CharType**> >( `Loc`). [is](../standard-library/ctype-class.md#ctype__is)( **ctype**\\< **CharType**>:: **space**, `Ch`).  \n  \n### Example  \n  \n```cpp  \n// locale_isspace.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n  \nusing namespace std;  \n  \nint main( )     \n{  \n   locale loc ( \"German_Germany\" );  \n   bool result1 = isspace ( 'L', loc );  \n   bool result2 = isspace ( '\\n', loc );  \n   bool result3 = isspace ( ' ', loc );  \n  \n   if ( result1 )  \n      cout << \"The character 'L' in the locale is \"  \n           << \"a whitespace character.\" << endl;  \n   else  \n      cout << \"The character 'L' in the locale is \"  \n           << \" not a whitespace character.\" << endl;  \n  \n   if ( result2 )  \n      cout << \"The character 'backslash-n' in the locale is \"  \n           << \"a whitespace character.\" << endl;  \n   else  \n      cout << \"The character 'backslash-n' in the locale is \"  \n           << \" not a whitespace character.\" << endl;  \n  \n   if ( result3 )  \n      cout << \"The character ' ' in the locale is \"  \n           << \"a whitespace character.\" << endl;  \n   else  \n      cout << \"The character ' ' in the locale is \"  \n           << \" not a whitespace character.\" << endl;  \n}  \n```  \n  \n##  <a name=\"isupper\"></a>  isupper  \n Tests whether an element in a locale is in upper case.  \n  \n```  \ntemplate <class CharType>  \nbool isupper(CharType Ch, const locale& Loc)  \n```  \n  \n### Parameters  \n `Ch`  \n The element to be tested.  \n  \n `Loc`  \n The locale containing the element to be tested.  \n  \n### Return Value  \n **true** if the element tested is an uppercase character; **false** if it is not.  \n  \n### Remarks  \n The template function returns [use_facet](../standard-library/locale-functions.md#use_facet)< [ctype](../standard-library/ctype-class.md)\\< **CharType**> >( `Loc`). [is](../standard-library/ctype-class.md#ctype__is)( **ctype**\\< **CharType**>:: **upper**, `Ch`).  \n  \n### Example  \n  \n```cpp  \n// locale_isupper.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n  \nusing namespace std;  \n  \nint main( )     \n{  \n   locale loc ( \"German_Germany\" );  \n   bool result1 = isupper ( 'L', loc );  \n   bool result2 = isupper ( 'n', loc );  \n   bool result3 = isupper ( '3', loc );  \n  \n   if ( result1 )  \n      cout << \"The character 'L' in the locale is \"  \n           << \"a uppercase character.\" << endl;  \n   else  \n      cout << \"The character 'L' in the locale is \"  \n           << \" not a uppercase character.\" << endl;  \n  \n   if ( result2 )  \n      cout << \"The character 'n' in the locale is \"  \n           << \"a uppercase character.\" << endl;  \n   else  \n      cout << \"The character 'n' in the locale is \"  \n           << \" not a uppercase character.\" << endl;  \n  \n   if ( result3 )  \n      cout << \"The character '3' in the locale is \"  \n           << \"a uppercase character.\" << endl;  \n   else  \n      cout << \"The character '3' in the locale is \"  \n           << \" not a uppercase character.\" << endl;  \n}  \n```  \n  \n##  <a name=\"isxdigit\"></a>  isxdigit  \n Tests whether an element in a locale is a character used to represent a hexadecimal number.  \n  \n```  \ntemplate <class CharType>  \nbool isxdigit(CharType Ch, const locale& Loc)  \n```  \n  \n### Parameters  \n `Ch`  \n The element to be tested.  \n  \n `Loc`  \n The locale containing the element to be tested.  \n  \n### Return Value  \n **true** if the element tested is a character used to represent a hexadecimal number; **false** if it is not.  \n  \n### Remarks  \n The template function returns [use_facet](../standard-library/locale-functions.md#use_facet)< [ctype](../standard-library/ctype-class.md)\\< **CharType**> >( `Loc`). [is](../standard-library/ctype-class.md#ctype__is)( **ctype**\\< **CharType**>:: **xdigit**, `Ch`).  \n  \n Hexadecimal digits use base 16 to represent numbers, using the numbers 0 through 9 plus case-insensitive letters A through F to represent the decimal numbers 0 through 15.  \n  \n### Example  \n  \n```cpp  \n// locale_isxdigit.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n  \nusing namespace std;  \n  \nint main( )     \n{  \n   locale loc ( \"German_Germany\" );  \n   bool result1 = isxdigit ( '5', loc );  \n   bool result2 = isxdigit ( 'd', loc );  \n   bool result3 = isxdigit ( 'q', loc );  \n  \n   if ( result1 )  \n      cout << \"The character '5' in the locale is \"  \n           << \"a hexidecimal digit-character.\" << endl;  \n   else  \n      cout << \"The character '5' in the locale is \"  \n           << \" not a hexidecimal digit-character.\" << endl;  \n  \n   if ( result2 )  \n      cout << \"The character 'd' in the locale is \"  \n           << \"a hexidecimal digit-character.\" << endl;  \n   else  \n      cout << \"The character 'd' in the locale is \"  \n           << \" not a hexidecimal digit-character.\" << endl;  \n  \n   if ( result3 )  \n      cout << \"The character 'q' in the locale is \"  \n           << \"a hexidecimal digit-character.\" << endl;  \n   else  \n      cout << \"The character 'q' in the locale is \"  \n           << \" not a hexidecimal digit-character.\" << endl;  \n}  \n```  \n  \n##  <a name=\"tolower\"></a>  tolower  \n Converts a character to lower case.  \n  \n```  \ntemplate <class CharType>  \nCharType tolower(CharType Ch, const locale& Loc)  \n```  \n  \n### Parameters  \n `Ch`  \n The character to be converted to lower case.  \n  \n `Loc`  \n The locale containing the character to be converted.  \n  \n### Return Value  \n The character converted to lower case.  \n  \n### Remarks  \n The template function returns [use_facet](../standard-library/locale-functions.md#use_facet)< [ctype](../standard-library/ctype-class.md)\\< **CharType**> >( `Loc`). [tolower](../standard-library/ctype-class.md#ctype__tolower)( `Ch`).  \n  \n### Example  \n  \n```cpp  \n// locale_tolower.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \nusing namespace std;  \n  \nint main( )     \n{  \n   locale loc ( \"German_Germany\" );  \n   char result1 = tolower ( 'H', loc );  \n   cout << \"The lower case of 'H' in the locale is: \"  \n        << result1 << \".\" << endl;  \n   char result2 = tolower ( 'h', loc );  \n   cout << \"The lower case of 'h' in the locale is: \"  \n        << result2 << \".\" << endl;  \n   char result3 = tolower ( '$', loc );  \n   cout << \"The lower case of '$' in the locale is: \"  \n        << result3 << \".\" << endl;  \n}  \n```  \n  \n##  <a name=\"toupper\"></a>  toupper  \n Converts a character to upper case.  \n  \n```  \ntemplate <class CharType>  \nCharType toupper(CharType Ch, const locale& Loc)  \n```  \n  \n### Parameters  \n `Ch`  \n The character to be converted to upper case.  \n  \n `Loc`  \n The locale containing the character to be converted.  \n  \n### Return Value  \n The character converted to upper case.  \n  \n### Remarks  \n The template function returns [use_facet](../standard-library/locale-functions.md#use_facet)< [ctype](../standard-library/ctype-class.md)\\< **CharType**> >( `Loc`). [toupper](../standard-library/ctype-class.md#ctype__toupper)( `Ch`).  \n  \n### Example  \n  \n```cpp  \n// locale_toupper.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \nusing namespace std;  \n  \nint main( )     \n{  \n   locale loc ( \"German_Germany\" );  \n   char result1 = toupper ( 'h', loc );  \n   cout << \"The upper case of 'h' in the locale is: \"  \n        << result1 << \".\" << endl;  \n   char result2 = toupper ( 'H', loc );  \n   cout << \"The upper case of 'H' in the locale is: \"  \n        << result2 << \".\" << endl;  \n   char result3 = toupper ( '$', loc );  \n   cout << \"The upper case of '$' in the locale is: \"  \n        << result3 << \".\" << endl;  \n}  \n```  \n  \n##  <a name=\"use_facet\"></a>  use_facet  \n Returns a reference to a facet of a specified type stored in a locale.  \n  \n```  \ntemplate <class Facet>  \nconst Facet& use_facet(const locale& Loc);\n```  \n  \n### Parameters  \n `Loc`  \n The const locale containing the type of facet being referenced.  \n  \n### Return Value  \n A reference to the facet of class `Facet` contained within the argument locale.  \n  \n### Remarks  \n The reference to the facet returned by the template function remains valid as long as any copy of the containing locale exists. If no such facet object of class `Facet` is listed in the argument locale, the function throws a `bad_cast` exception.  \n  \n### Example  \n  \n```cpp  \n// locale_use_facet.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \nusing namespace std;  \n  \nint main( )     \n{  \n   locale loc1 ( \"German_Germany\" ), loc2 ( \"English_Australia\" );  \n   bool result1 = use_facet<ctype<char> > ( loc1 ).is(  \n   ctype_base::alpha, 'a'   \n);  \n   bool result2 = use_facet<ctype<char> > ( loc2 ).is( ctype_base::alpha, '!'  \n   );  \n  \n   if ( result1 )  \n      cout << \"The character 'a' in locale loc1 is alphabetic.\"   \n           << endl;  \n   else  \n      cout << \"The character 'a' in locale loc1 is not alphabetic.\"   \n           << endl;  \n  \n   if ( result2 )  \n      cout << \"The character '!' in locale loc2 is alphabetic.\"   \n           << endl;  \n   else  \n      cout << \"The character '!' in locale loc2 is not alphabetic.\"   \n           << endl;  \n}  \n```  \n  \n```Output  \nThe character 'a' in locale loc1 is alphabetic.  \nThe character '!' in locale loc2 is not alphabetic.  \n```  \n  \n## See Also  \n [\\<locale>](../standard-library/locale.md)\n\n"}