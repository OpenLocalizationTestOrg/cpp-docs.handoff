<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e765d7abbf486329a1f6889d4c841ca3046da926</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\recursive-timed-mutex-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">286e0ca9ba6bbfccaf7c032496bd13c916d8dd0a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0910eed1c49ab66dbba5c78713f3f96888fb5d17</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>recursive_timed_mutex Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>recursive_timed_mutex Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Represents a <bpt id="p1">*</bpt>timed mutex type<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Objects of this type are used to enforce mutual exclusion by using time-limited blocking within a program.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Unlike objects of type <bpt id="p1">[</bpt>timed_mutex<ept id="p1">](../standard-library/timed-mutex-class.md)</ept>, the effect of calling locking methods for <ph id="ph1">`recursive_timed_mutex`</ph> objects is well-defined.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>recursive_timed_mutex Constructor</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`recursive_timed_mutex`</ph> object that's not locked.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>~recursive_timed_mutex Destructor</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Releases any resources that are used by the <ph id="ph1">`recursive_timed_mutex`</ph> object.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>lock</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Blocks the calling thread until the thread obtains ownership of the <ph id="ph1">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>try_lock</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Attempts to obtain ownership of the <ph id="ph1">`mutex`</ph> without blocking.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>try_lock_for</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Attempts to obtain ownership of the <ph id="ph1">`mutex`</ph> for a specified time interval.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>try_lock_until</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Attempts to obtain ownership of the <ph id="ph1">`mutex`</ph> until a specified time.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>unlock</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Releases ownership of the <ph id="ph1">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> mutex</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>lock</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Blocks the calling thread until the thread obtains ownership of the <ph id="ph1">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If the calling thread already owns the <ph id="ph1">`mutex`</ph>, the method returns immediately, and the previous lock remains in effect.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>recursive_timed_mutex Constructor</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`recursive_timed_mutex`</ph> object that is not locked.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>~recursive_timed_mutex Destructor</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Releases any resources that are used by the <ph id="ph1">`recursive_timed_mutex`</ph> object.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If the object is locked when the destructor runs, the behavior is undefined.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>try_lock</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Attempts to obtain ownership of the <ph id="ph1">`mutex`</ph> without blocking.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>if the method successfully obtained ownership of the <ph id="ph1">`mutex`</ph> or if the calling thread already owns the <ph id="ph2">`mutex`</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If the calling thread already owns the <ph id="ph1">`mutex`</ph>, the function immediately returns <ph id="ph2">`true`</ph>, and the previous lock remains in effect.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>try_lock_for</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Attempts to obtain ownership of the <ph id="ph1">`mutex`</ph> without blocking.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>chrono::duration<ept id="p1">](../standard-library/duration-class.md)</ept> object that specifies the maximum amount of time that the method attempts to obtain ownership of the <ph id="ph1">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>if the method successfully obtains ownership of the <ph id="ph1">`mutex`</ph> or if the calling thread already owns the <ph id="ph2">`mutex`</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If the calling thread already owns the <ph id="ph1">`mutex`</ph>, the method immediately returns <ph id="ph2">`true`</ph>, and the previous lock remains in effect.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>try_lock_until</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Attempts to obtain ownership of the <ph id="ph1">`mutex`</ph> without blocking.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A point in time that specifies the threshold after which the method no longer attempts to obtain ownership of the <ph id="ph1">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>if the method successfully obtains ownership of the <ph id="ph1">`mutex`</ph> or if the calling thread already owns the <ph id="ph2">`mutex`</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If the calling thread already owns the <ph id="ph1">`mutex`</ph>, the method immediately returns <ph id="ph2">`true`</ph>, and the previous lock remains in effect.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>unlock</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Releases ownership of the <ph id="ph1">`mutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This method releases ownership of the <ph id="ph1">`mutex`</ph> only after it is called as many times as <bpt id="p1">[</bpt>lock<ept id="p1">](#recursive_timed_mutex__lock_method)</ept>, <bpt id="p2">[</bpt>try_lock<ept id="p2">](#recursive_timed_mutex__try_lock_method)</ept>, <bpt id="p3">[</bpt>try_lock_for<ept id="p3">](#recursive_timed_mutex__try_lock_for_method)</ept>, and <bpt id="p4">[</bpt>try_lock_until<ept id="p4">](#recursive_timed_mutex__try_lock_until_method)</ept> have been called successfully on the <ph id="ph2">`recursive_timed_mutex`</ph> object.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If the calling thread does not own the <ph id="ph1">`mutex`</ph>, the behavior is undefined.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Header Files Reference</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>mutex&gt;</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>