<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">358417b3ab76912d2b4158bd87a981d459a90b25</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\dotnet\how-to-marshal-arrays-using-pinvoke.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">014e1979974665c35513059986844a7979b710c4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8909950d2ae0aa1cf0de182fec59479ec747b656</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Marshal Arrays Using PInvoke | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Marshal Arrays Using PInvoke</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic explains how native functions that accept C-style strings can be called using the CLR string type &lt;xref:System.String&gt; using .NET Framework Platform Invoke support.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Visual C++ programmers are encouraged to use the C++ Interop features instead (when possible) because P/Invoke provides little compile-time error reporting, is not type-safe, and can be tedious to implement.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If the unmanaged API is packaged as a DLL and the source code is not available, P/Invoke is the only option (otherwise, see <bpt id="p1">[</bpt>Using C++ Interop (Implicit PInvoke)<ept id="p1">](../dotnet/using-cpp-interop-implicit-pinvoke.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Because native and managed arrays are laid out differently in memory, passing them successfully across the managed/unmanaged boundary requires conversion, or marshaling.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This topic demonstrates how an array of simple (blitable) items can be passed to native functions from managed code.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>As is true of managed/unmanaged data marshaling in general, the &lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt; attribute is used to create a managed entry point for each native function that will be used.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the case of functions that take arrays as arguments, the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt; attribute must be used as well to specify to the compiler how the data will be marshaled.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;xref:System.Runtime.InteropServices.UnmanagedType&gt; enumeration is used to indicate that the managed array will be marshaled as a C-style array.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following code consists of an unmanaged and a managed module.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The unmanaged module is a DLL that defines a function that accepts an array of integers.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The second module is a managed command-line application that imports this function, but defines it in terms of a managed array, and uses the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt; attribute to specify that the array should be converted to a native array when called.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The managed module is compiled with /clr, but /clr:pure works as well.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Note that no portion of the DLL is exposed to the managed code through the traditional #include directive.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In fact, because the DLL is accessed at run time only, problems with functions imported with &lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt; will not be detected at compile time.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Using Explicit PInvoke in C++ (DllImport Attribute)</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>