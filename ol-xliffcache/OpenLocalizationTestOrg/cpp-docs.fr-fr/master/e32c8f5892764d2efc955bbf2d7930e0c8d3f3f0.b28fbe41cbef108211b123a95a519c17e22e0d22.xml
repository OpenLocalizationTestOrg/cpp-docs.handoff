{"nodes":[{"pos":[12,50],"content":"&lt;new&gt; functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>new<ph id=\"ph2\">&amp;gt;</ph> functions | Microsoft Docs","pos":[0,38],"source":"&lt;new&gt; functions | Microsoft Docs"}]},{"pos":[253,274],"content":"&lt;new&gt; functions","linkify":"&lt;new&gt; functions","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>new<ph id=\"ph2\">&amp;gt;</ph> functions","pos":[0,21],"source":"&lt;new&gt; functions"}]},{"pos":[290,309],"content":"<bpt id=\"p1\">[</bpt>nothrow<ept id=\"p1\">](#nothrow)</ept>","source":"[nothrow](#nothrow)"},{"pos":[310,345],"content":"<bpt id=\"p1\">[</bpt>set_new_handler<ept id=\"p1\">](#set_new_handler)</ept>","source":"[set_new_handler](#set_new_handler)"},{"pos":[356,387],"content":"<bpt id=\"p1\">&lt;a name=\"nothrow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  nothrow","linkify":"<a name=\"nothrow\"></a>  nothrow","source":"<a name=\"nothrow\"></a>  nothrow"},{"pos":[391,489],"content":"Provides an object to be used as an argument for the <ph id=\"ph1\">`nothrow`</ph> versions of <bpt id=\"p1\">**</bpt>new<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>delete<ept id=\"p2\">**</ept>.","source":"Provides an object to be used as an argument for the `nothrow` versions of **new** and **delete**."},{"pos":[553,560],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[564,695],"content":"The object is used as a function argument to match the parameter type <bpt id=\"p1\">[</bpt>std::nothrow_t<ept id=\"p1\">](../standard-library/nothrow-t-structure.md)</ept>.","source":"The object is used as a function argument to match the parameter type [std::nothrow_t](../standard-library/nothrow-t-structure.md)."},{"pos":[705,712],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[717,940],"content":"See <bpt id=\"p1\">[</bpt>operator new<ept id=\"p1\">](../standard-library/new-operators.md#operator_new)</ept> and <bpt id=\"p2\">[</bpt>operator new&amp;#91;&amp;#93;<ept id=\"p2\">](../standard-library/new-operators.md#operator_new_arr)</ept> for examples of how <ph id=\"ph1\">`std::nothrow_t`</ph> is used as a function parameter.","source":"See [operator new](../standard-library/new-operators.md#operator_new) and [operator new&#91;&#93;](../standard-library/new-operators.md#operator_new_arr) for examples of how `std::nothrow_t` is used as a function parameter."},{"pos":[950,997],"content":"<bpt id=\"p1\">&lt;a name=\"set_new_handler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  set_new_handler","linkify":"<a name=\"set_new_handler\"></a>  set_new_handler","source":"<a name=\"set_new_handler\"></a>  set_new_handler"},{"pos":[1001,1107],"content":"Installs a user function that is to be called when <ph id=\"ph1\">`operator new`</ph> fails in its attempt to allocate memory.","source":"Installs a user function that is to be called when `operator new` fails in its attempt to allocate memory."},{"pos":[1187,1197],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The new_handler to be installed.","pos":[1211,1243]},{"pos":[1253,1265],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1269,1340],"content":"0 on the first call and the previous <ph id=\"ph1\">`new_handler`</ph> on subsequent calls.","source":"0 on the first call and the previous `new_handler` on subsequent calls."},{"pos":[1350,1357],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The function stores <ph id=\"ph1\">`Pnew`</ph> in a static <bpt id=\"p1\">[</bpt>new handler<ept id=\"p1\">](../standard-library/new-typedefs.md#new_handler)</ept> pointer that it maintains, then returns the value previously stored in the pointer.","pos":[1361,1546],"source":"The function stores `Pnew` in a static [new handler](../standard-library/new-typedefs.md#new_handler) pointer that it maintains, then returns the value previously stored in the pointer."},{"content":"The new handler is used by <bpt id=\"p1\">[</bpt>operator new<ept id=\"p1\">](../standard-library/new-operators.md#operator_new)</ept>( <bpt id=\"p2\">**</bpt>size_t<ept id=\"p2\">**</ept>).","pos":[1547,1653],"source":" The new handler is used by [operator new](../standard-library/new-operators.md#operator_new)( **size_t**)."},{"pos":[1663,1670],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2940,2948],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2952,2988],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>new&gt;<ept id=\"p1\">](../standard-library/new.md)</ept>","source":"[\\<new>](../standard-library/new.md)"}],"content":"---\ntitle: \"&lt;new&gt; functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: e250f06a-b025-4509-ae7a-5356d56aad7d\ncaps.latest.revision: 10\nmanager: \"ghogen\"\n---\n# &lt;new&gt; functions\n|||  \n|-|-|  \n|[nothrow](#nothrow)|[set_new_handler](#set_new_handler)|  \n  \n##  <a name=\"nothrow\"></a>  nothrow  \n Provides an object to be used as an argument for the `nothrow` versions of **new** and **delete**.  \n  \n```  \nextern const std::nothrow_t nothrow;  \n```  \n  \n### Remarks  \n The object is used as a function argument to match the parameter type [std::nothrow_t](../standard-library/nothrow-t-structure.md).  \n  \n### Example  \n  See [operator new](../standard-library/new-operators.md#operator_new) and [operator new&#91;&#93;](../standard-library/new-operators.md#operator_new_arr) for examples of how `std::nothrow_t` is used as a function parameter.  \n  \n##  <a name=\"set_new_handler\"></a>  set_new_handler  \n Installs a user function that is to be called when `operator new` fails in its attempt to allocate memory.  \n  \n```  \nnew_handler set_new_handler(new_handler Pnew) throw();\n```  \n  \n### Parameters  \n `Pnew`  \n The new_handler to be installed.  \n  \n### Return Value  \n 0 on the first call and the previous `new_handler` on subsequent calls.  \n  \n### Remarks  \n The function stores `Pnew` in a static [new handler](../standard-library/new-typedefs.md#new_handler) pointer that it maintains, then returns the value previously stored in the pointer. The new handler is used by [operator new](../standard-library/new-operators.md#operator_new)( **size_t**).  \n  \n### Example  \n  \n```cpp  \n// new_set_new_handler.cpp  \n// compile with: /EHsc  \n#include<new>  \n#include<iostream>  \n  \nusing namespace std;  \nvoid __cdecl newhandler( )  \n{  \n   cout << \"The new_handler is called:\" << endl;  \n   throw bad_alloc( );  \n   return;  \n}  \n  \nint main( )   \n{  \n   set_new_handler (newhandler);  \n   try  \n   {  \n      while ( 1 )   \n      {  \n         new int[5000000];  \n         cout << \"Allocating 5000000 ints.\" << endl;  \n      }  \n   }  \n   catch ( exception e )  \n   {  \n      cout << e.what( ) << endl;  \n   }  \n}  \n```  \n  \n```Output  \nAllocating 5000000 ints.  \nAllocating 5000000 ints.  \nAllocating 5000000 ints.  \nAllocating 5000000 ints.  \nAllocating 5000000 ints.  \nAllocating 5000000 ints.  \nAllocating 5000000 ints.  \nAllocating 5000000 ints.  \nAllocating 5000000 ints.  \nAllocating 5000000 ints.  \nAllocating 5000000 ints.  \nAllocating 5000000 ints.  \nAllocating 5000000 ints.  \nAllocating 5000000 ints.  \nAllocating 5000000 ints.  \nAllocating 5000000 ints.  \nAllocating 5000000 ints.  \nAllocating 5000000 ints.  \nAllocating 5000000 ints.  \nAllocating 5000000 ints.  \nAllocating 5000000 ints.  \nAllocating 5000000 ints.  \nAllocating 5000000 ints.  \nAllocating 5000000 ints.  \nThe new_handler is called:  \nbad allocation  \n```  \n  \n## See Also  \n [\\<new>](../standard-library/new.md)\n\n"}