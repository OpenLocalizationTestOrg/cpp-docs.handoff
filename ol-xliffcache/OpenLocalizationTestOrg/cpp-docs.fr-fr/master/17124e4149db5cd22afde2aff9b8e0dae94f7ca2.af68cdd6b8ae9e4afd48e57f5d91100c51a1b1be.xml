{"nodes":[{"pos":[12,43],"content":"time_get Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"time_get Class | Microsoft Docs","pos":[0,31]}]},{"pos":[664,678],"content":"time_get Class","linkify":"time_get Class","nodes":[{"content":"time_get Class","pos":[0,14]}]},{"pos":[679,821],"content":"The template class describes an object that can serve as a locale facet to control conversions of sequences of type <ph id=\"ph1\">`CharType`</ph> to time values.","source":"The template class describes an object that can serve as a locale facet to control conversions of sequences of type `CharType` to time values."},{"pos":[830,836],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[986,996],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type used within a program to encode characters.","pos":[1014,1066]},{"content":"The iterator from which the time values are read.","pos":[1092,1141]},{"pos":[1150,1157],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"As with any locale facet, the static object ID has an initial stored value of zero.","pos":[1161,1244]},{"content":"The first attempt to access its stored value stores a unique positive value in <bpt id=\"p1\">**</bpt>id.<ept id=\"p1\">**</ept>","pos":[1245,1331],"source":" The first attempt to access its stored value stores a unique positive value in **id.**"},{"pos":[1341,1353],"content":"Constructors","linkify":"Constructors","nodes":[{"content":"Constructors","pos":[0,12]}]},{"pos":[1374,1405],"content":"<bpt id=\"p1\">[</bpt>time_get<ept id=\"p1\">](#time_get__time_get)</ept>","source":"[time_get](#time_get__time_get)"},{"pos":[1406,1453],"content":"The constructor for objects of type <ph id=\"ph1\">`time_get`</ph>.","source":"The constructor for objects of type `time_get`."},{"pos":[1464,1472],"content":"Typedefs","linkify":"Typedefs","nodes":[{"content":"Typedefs","pos":[0,8]}]},{"pos":[1493,1526],"content":"<bpt id=\"p1\">[</bpt>char_type<ept id=\"p1\">](#time_get__char_type)</ept>","source":"[char_type](#time_get__char_type)"},{"content":"A type that is used to describe a character used by a locale.","pos":[1527,1588]},{"pos":[1593,1626],"content":"<bpt id=\"p1\">[</bpt>iter_type<ept id=\"p1\">](#time_get__iter_type)</ept>","source":"[iter_type](#time_get__iter_type)"},{"content":"A type that describes an input iterator.","pos":[1627,1667]},{"pos":[1678,1694],"content":"Member Functions","linkify":"Member Functions","nodes":[{"content":"Member Functions","pos":[0,16]}]},{"pos":[1715,1750],"content":"<bpt id=\"p1\">[</bpt>date_order<ept id=\"p1\">](#time_get__date_order)</ept>","source":"[date_order](#time_get__date_order)"},{"content":"Returns the date order used by a facet.","pos":[1751,1790]},{"pos":[1795,1836],"content":"<bpt id=\"p1\">[</bpt>do_date_order<ept id=\"p1\">](#time_get__do_date_order)</ept>","source":"[do_date_order](#time_get__do_date_order)"},{"content":"A protected virtual member function that is called to return the date order used by a facet.","pos":[1837,1929]},{"pos":[1934,1961],"content":"<bpt id=\"p1\">[</bpt>do_get<ept id=\"p1\">](#time_get__do_get)</ept>","source":"[do_get](#time_get__do_get)"},{"content":"Reads and converts character data to a time value.","pos":[1962,2012]},{"pos":[2017,2054],"content":"<bpt id=\"p1\">[</bpt>do_get_date<ept id=\"p1\">](#time_get__do_get_date)</ept>","source":"[do_get_date](#time_get__do_get_date)"},{"pos":[2055,2181],"content":"A protected virtual member function that is called to parse a string as the date produced by the <ph id=\"ph1\">`x`</ph> specifier for <ph id=\"ph2\">`strftime`</ph>.","source":"A protected virtual member function that is called to parse a string as the date produced by the `x` specifier for `strftime`."},{"pos":[2186,2233],"content":"<bpt id=\"p1\">[</bpt>do_get_monthname<ept id=\"p1\">](#time_get__do_get_monthname)</ept>","source":"[do_get_monthname](#time_get__do_get_monthname)"},{"content":"A protected virtual member function that is called to parse a string as the name of the month.","pos":[2234,2328]},{"pos":[2333,2370],"content":"<bpt id=\"p1\">[</bpt>do_get_time<ept id=\"p1\">](#time_get__do_get_time)</ept>","source":"[do_get_time](#time_get__do_get_time)"},{"pos":[2371,2497],"content":"A protected virtual member function that is called to parse a string as the date produced by the <ph id=\"ph1\">`X`</ph> specifier for <ph id=\"ph2\">`strftime`</ph>.","source":"A protected virtual member function that is called to parse a string as the date produced by the `X` specifier for `strftime`."},{"pos":[2502,2545],"content":"<bpt id=\"p1\">[</bpt>do_get_weekday<ept id=\"p1\">](#time_get__do_get_weekday)</ept>","source":"[do_get_weekday](#time_get__do_get_weekday)"},{"content":"A protected virtual member function that is called to parse a string as the name of the day of the week.","pos":[2546,2650]},{"pos":[2655,2692],"content":"<bpt id=\"p1\">[</bpt>do_get_year<ept id=\"p1\">](#time_get__do_get_year)</ept>","source":"[do_get_year](#time_get__do_get_year)"},{"content":"A protected virtual member function that is called to parses a string as the name of the year.","pos":[2693,2787]},{"pos":[2792,2813],"content":"<bpt id=\"p1\">[</bpt>get<ept id=\"p1\">](#time_get__get)</ept>","source":"[get](#time_get__get)"},{"content":"Reads from a source of character data and converts that data to a time that is stored in a time struct.","pos":[2814,2917]},{"pos":[2922,2953],"content":"<bpt id=\"p1\">[</bpt>get_date<ept id=\"p1\">](#time_get__get_date)</ept>","source":"[get_date](#time_get__get_date)"},{"pos":[2954,3027],"content":"Parses a string as the date produced by the <ph id=\"ph1\">`x`</ph> specifier for <ph id=\"ph2\">`strftime`</ph>.","source":"Parses a string as the date produced by the `x` specifier for `strftime`."},{"pos":[3032,3073],"content":"<bpt id=\"p1\">[</bpt>get_monthname<ept id=\"p1\">](#time_get__get_monthname)</ept>","source":"[get_monthname](#time_get__get_monthname)"},{"content":"Parses a string as the name of the month.","pos":[3074,3115]},{"pos":[3120,3151],"content":"<bpt id=\"p1\">[</bpt>get_time<ept id=\"p1\">](#time_get__get_time)</ept>","source":"[get_time](#time_get__get_time)"},{"pos":[3152,3225],"content":"Parses a string as the date produced by the <ph id=\"ph1\">`X`</ph> specifier for <ph id=\"ph2\">`strftime`</ph>.","source":"Parses a string as the date produced by the `X` specifier for `strftime`."},{"pos":[3230,3267],"content":"<bpt id=\"p1\">[</bpt>get_weekday<ept id=\"p1\">](#time_get__get_weekday)</ept>","source":"[get_weekday](#time_get__get_weekday)"},{"content":"Parses a string as the name of the day of the week.","pos":[3268,3319]},{"pos":[3324,3355],"content":"<bpt id=\"p1\">[</bpt>get_year<ept id=\"p1\">](#time_get__get_year)</ept>","source":"[get_year](#time_get__get_year)"},{"content":"Parses a string as the name of the year.","pos":[3356,3396]},{"pos":[3406,3418],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3422,3443],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>locale&gt;","source":"**Header:** \\<locale>"},{"pos":[3450,3468],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[3478,3533],"content":"<bpt id=\"p1\">&lt;a name=\"time_get__char_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  time_get::char_type","linkify":"<a name=\"time_get__char_type\"></a>  time_get::char_type","source":"<a name=\"time_get__char_type\"></a>  time_get::char_type"},{"content":"A type that is used to describe a character used by a locale.","pos":[3537,3598]},{"pos":[3653,3660],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3664,3726],"content":"The type is a synonym for the template parameter <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>.","source":"The type is a synonym for the template parameter **CharType**."},{"pos":[3736,3793],"content":"<bpt id=\"p1\">&lt;a name=\"time_get__date_order\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  time_get::date_order","linkify":"<a name=\"time_get__date_order\"></a>  time_get::date_order","source":"<a name=\"time_get__date_order\"></a>  time_get::date_order"},{"content":"Returns the date order used by a facet.","pos":[3797,3836]},{"pos":[3891,3903],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The date order used by a facet.","pos":[3907,3938]},{"pos":[3948,3955],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3959,4029],"content":"The member function returns <bpt id=\"p1\">[</bpt>do_date_order<ept id=\"p1\">](#time_get__do_date_order)</ept>.","source":"The member function returns [do_date_order](#time_get__do_date_order)."},{"pos":[4039,4046],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5062,5125],"content":"<bpt id=\"p1\">&lt;a name=\"time_get__do_date_order\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  time_get::do_date_order","linkify":"<a name=\"time_get__do_date_order\"></a>  time_get::do_date_order","source":"<a name=\"time_get__do_date_order\"></a>  time_get::do_date_order"},{"content":"A protected virtual member function that is called to return the date order used by a facet.","pos":[5129,5221]},{"pos":[5287,5299],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The date order used by a facet.","pos":[5303,5334]},{"pos":[5344,5351],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The virtual protected member function returns a value of type <bpt id=\"p1\">**</bpt>time_base::dateorder<ept id=\"p1\">**</ept>, which describes the order in which date components are matched by <bpt id=\"p2\">[</bpt>do_get_date<ept id=\"p2\">](#time_get__do_get_date)</ept>.","pos":[5355,5547],"source":"The virtual protected member function returns a value of type **time_base::dateorder**, which describes the order in which date components are matched by [do_get_date](#time_get__do_get_date)."},{"content":"In this implementation, the value is <bpt id=\"p1\">**</bpt>time_base::mdy<ept id=\"p1\">**</ept>, corresponding to dates of the form December 2, 1979.","pos":[5548,5657],"source":" In this implementation, the value is **time_base::mdy**, corresponding to dates of the form December 2, 1979."},{"pos":[5667,5674],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5679,5764],"content":"See the example for <bpt id=\"p1\">[</bpt>date_order<ept id=\"p1\">](#time_get__date_order)</ept>, which calls <ph id=\"ph1\">`do_date_order`</ph>.","source":"See the example for [date_order](#time_get__date_order), which calls `do_date_order`."},{"pos":[5774,5823],"content":"<bpt id=\"p1\">&lt;a name=\"time_get__do_get\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  time_get::do_get","linkify":"<a name=\"time_get__do_get\"></a>  time_get::do_get","source":"<a name=\"time_get__do_get\"></a>  time_get::do_get"},{"content":"Reads and converts character data to a time value.","pos":[5827,5877]},{"content":"Accepts one conversion specifier and modifier.","pos":[5878,5924]},{"pos":[6140,6150],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An Input iterator that indicates the start of the sequence to convert.","pos":[6166,6236]},{"content":"An Input iterator that indicates the end of the sequence.","pos":[6254,6311]},{"content":"A stream object.","pos":[6332,6348]},{"content":"A field in _Iosbase where appropriate bitmask elements are set to indicate errors.","pos":[6367,6449]},{"content":"A pointer to the time structure where the time is to be stored.","pos":[6465,6528]},{"content":"A conversion specifier character.","pos":[6545,6578]},{"content":"An optional modifier character.","pos":[6595,6626]},{"pos":[6636,6648],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns an iterator that designates the first unconverted element.","pos":[6652,6718]},{"content":"A conversion failure sets <ph id=\"ph1\">`ios_base::failbit`</ph> in <ph id=\"ph2\">`_State`</ph> and returns <ph id=\"ph3\">` first`</ph>.","pos":[6719,6798],"source":" A conversion failure sets `ios_base::failbit` in `_State` and returns ` first`."},{"pos":[6808,6815],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The virtual member function converts and skips one or more input elements in the range <ph id=\"ph1\">`[`` first``,`</ph> <ph id=\"ph2\">` last``)`</ph> to determine the values stored in one or more members of <ph id=\"ph3\">`*pt`</ph>.","pos":[6819,6995],"source":"The virtual member function converts and skips one or more input elements in the range `[`` first``,` ` last``)` to determine the values stored in one or more members of `*pt`."},{"content":"A conversion failure sets <ph id=\"ph1\">`ios_base::failbit`</ph> in <ph id=\"ph2\">`_State`</ph> and returns <ph id=\"ph3\">` first`</ph>.","pos":[6996,7075],"source":" A conversion failure sets `ios_base::failbit` in `_State` and returns ` first`."},{"content":"Otherwise, the function returns an iterator designating the first unconverted element.","pos":[7076,7162]},{"content":"The conversion specifiers are:","pos":[7169,7199]},{"pos":[7206,7292],"content":"<ph id=\"ph1\">`'a'`</ph> or <ph id=\"ph2\">`'A'`</ph> -- behaves the same as <bpt id=\"p1\">[</bpt>time_get::get_weekday<ept id=\"p1\">](#time_get__get_weekday)</ept>.","source":"`'a'` or `'A'` -- behaves the same as [time_get::get_weekday](#time_get__get_weekday)."},{"pos":[7299,7397],"content":"<ph id=\"ph1\">`'b'`</ph>, <ph id=\"ph2\">`'B'`</ph>, or <ph id=\"ph3\">`'h'`</ph> -- behaves the same as <bpt id=\"p1\">[</bpt>time_get::get_monthname<ept id=\"p1\">](#time_get__get_monthname)</ept>.","source":"`'b'`, `'B'`, or `'h'` -- behaves the same as [time_get::get_monthname](#time_get__get_monthname)."},{"pos":[7404,7459],"content":"<ph id=\"ph1\">`'c'`</ph> -- behaves the same as <ph id=\"ph2\">`\"%b %d %H : %M : %S %Y\"`</ph>.","source":"`'c'` -- behaves the same as `\"%b %d %H : %M : %S %Y\"`."},{"pos":[7466,7593],"content":"<ph id=\"ph1\">`'C'`</ph> -- converts a decimal input field in the range [0, 99] to the value <ph id=\"ph2\">`val`</ph> and stores <ph id=\"ph3\">`val * 100 - 1900`</ph> in <ph id=\"ph4\">`pt-&amp;tm_year`</ph>.","source":"`'C'` -- converts a decimal input field in the range [0, 99] to the value `val` and stores `val * 100 - 1900` in `pt-&tm_year`."},{"pos":[7600,7708],"content":"<ph id=\"ph1\">`'d'`</ph> or <ph id=\"ph2\">`'e'`</ph> -- converts a decimal input field in the range [1, 31] and stores its value in <ph id=\"ph3\">`pt-&amp;tm_mday`</ph>.","source":"`'d'` or `'e'` -- converts a decimal input field in the range [1, 31] and stores its value in `pt-&tm_mday`."},{"pos":[7715,7761],"content":"<ph id=\"ph1\">`'D'`</ph> -- behaves the same as <ph id=\"ph2\">`\"%m / %d / %y\"`</ph>.","source":"`'D'` -- behaves the same as `\"%m / %d / %y\"`."},{"pos":[7768,7867],"content":"<ph id=\"ph1\">`'H'`</ph> -- converts a decimal input field in the range [0, 23] and stores its value in <ph id=\"ph2\">`pt-&amp;tm_hour`</ph>.","source":"`'H'` -- converts a decimal input field in the range [0, 23] and stores its value in `pt-&tm_hour`."},{"pos":[7874,7973],"content":"<ph id=\"ph1\">`'I'`</ph> -- converts a decimal input field in the range [0, 11] and stores its value in <ph id=\"ph2\">`pt-&amp;tm_hour`</ph>.","source":"`'I'` -- converts a decimal input field in the range [0, 11] and stores its value in `pt-&tm_hour`."},{"pos":[7980,8080],"content":"<ph id=\"ph1\">`'j'`</ph> -- converts a decimal input field in the range [1, 366] and stores its value in <ph id=\"ph2\">`pt-&amp;tm_yday`</ph>.","source":"`'j'` -- converts a decimal input field in the range [1, 366] and stores its value in `pt-&tm_yday`."},{"pos":[8087,8228],"content":"<ph id=\"ph1\">`'m'`</ph> -- converts a decimal input field in the range [1, 12] to the value <ph id=\"ph2\">`val`</ph> and stores <ph id=\"ph3\">`val - 1`</ph> in and stores its value in <ph id=\"ph4\">`pt-&amp;tm_mon`</ph>.","source":"`'m'` -- converts a decimal input field in the range [1, 12] to the value `val` and stores `val - 1` in and stores its value in `pt-&tm_mon`."},{"pos":[8235,8333],"content":"<ph id=\"ph1\">`'M'`</ph> -- converts a decimal input field in the range [0, 59] and stores its value in <ph id=\"ph2\">`pt-&amp;tm_min`</ph>.","source":"`'M'` -- converts a decimal input field in the range [0, 59] and stores its value in `pt-&tm_min`."},{"pos":[8340,8384],"content":"<ph id=\"ph1\">`'n'`</ph> or <ph id=\"ph2\">`'t'`</ph> -- behaves the same as <ph id=\"ph3\">`\" \"`</ph>.","source":"`'n'` or `'t'` -- behaves the same as `\" \"`."},{"pos":[8391,8490],"content":"<ph id=\"ph1\">`'p'`</ph> -- converts \"AM\" or \"am\" to zero and \"PM\" or \"PM\" to 12 and adds this value to <ph id=\"ph2\">`pt-&amp;tm_hour`</ph>.","source":"`'p'` -- converts \"AM\" or \"am\" to zero and \"PM\" or \"PM\" to 12 and adds this value to `pt-&tm_hour`."},{"pos":[8497,8546],"content":"<ph id=\"ph1\">`'r'`</ph> -- behaves the same as <ph id=\"ph2\">`\"%I : %M : %S %p\"`</ph>.","source":"`'r'` -- behaves the same as `\"%I : %M : %S %p\"`."},{"pos":[8553,8592],"content":"<ph id=\"ph1\">`'R'`</ph> -- behaves the same as <ph id=\"ph2\">`\"%H %M\"`</ph>.","source":"`'R'` -- behaves the same as `\"%H %M\"`."},{"pos":[8599,8697],"content":"<ph id=\"ph1\">`'S'`</ph> -- converts a decimal input field in the range [0, 59] and stores its value in <ph id=\"ph2\">`pt-&amp;tm_sec`</ph>.","source":"`'S'` -- converts a decimal input field in the range [0, 59] and stores its value in `pt-&tm_sec`."},{"pos":[8704,8758],"content":"<ph id=\"ph1\">`'T'`</ph> or <ph id=\"ph2\">`'X'`</ph> -- behaves the same as <ph id=\"ph3\">`\"%H : %M : S\"`</ph>.","source":"`'T'` or `'X'` -- behaves the same as `\"%H : %M : S\"`."},{"pos":[8765,8864],"content":"<ph id=\"ph1\">`'U'`</ph> -- converts a decimal input field in the range [0, 53] and stores its value in <ph id=\"ph2\">`pt-&amp;tm_yday`</ph>.","source":"`'U'` -- converts a decimal input field in the range [0, 53] and stores its value in `pt-&tm_yday`."},{"pos":[8871,8969],"content":"<ph id=\"ph1\">`'w'`</ph> -- converts a decimal input field in the range [0, 6] and stores its value in <ph id=\"ph2\">`pt-&amp;tm_wday`</ph>.","source":"`'w'` -- converts a decimal input field in the range [0, 6] and stores its value in `pt-&tm_wday`."},{"pos":[8976,9075],"content":"<ph id=\"ph1\">`'W'`</ph> -- converts a decimal input field in the range [0, 53] and stores its value in <ph id=\"ph2\">`pt-&amp;tm_yday`</ph>.","source":"`'W'` -- converts a decimal input field in the range [0, 53] and stores its value in `pt-&tm_yday`."},{"pos":[9082,9128],"content":"<ph id=\"ph1\">`'x'`</ph> -- behaves the same as <ph id=\"ph2\">`\"%d / %m / %y\"`</ph>.","source":"`'x'` -- behaves the same as `\"%d / %m / %y\"`."},{"pos":[9135,9271],"content":"<ph id=\"ph1\">`'y'`</ph> -- converts a decimal input field in the range [0, 99] to the value <ph id=\"ph2\">`val`</ph> and stores <ph id=\"ph3\">`val &lt; 69  val + 100 : val`</ph> in <ph id=\"ph4\">`pt-&amp;tm_year`</ph>.","source":"`'y'` -- converts a decimal input field in the range [0, 99] to the value `val` and stores `val < 69  val + 100 : val` in `pt-&tm_year`."},{"pos":[9278,9349],"content":"<ph id=\"ph1\">`'Y'`</ph> -- behaves the same as <bpt id=\"p1\">[</bpt>time_get::get_year<ept id=\"p1\">](#time_get__get_year)</ept>.","source":"`'Y'` -- behaves the same as [time_get::get_year](#time_get__get_year)."},{"content":"Any other conversion specifier sets <ph id=\"ph1\">`ios_base::failbit`</ph> in <ph id=\"ph2\">`state`</ph> and returns.","pos":[9356,9435],"source":"Any other conversion specifier sets `ios_base::failbit` in `state` and returns."},{"content":"In this implementation, any modifier has no effect.","pos":[9436,9487]},{"pos":[9497,9556],"content":"<bpt id=\"p1\">&lt;a name=\"time_get__do_get_date\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  time_get::do_get_date","linkify":"<a name=\"time_get__do_get_date\"></a>  time_get::do_get_date","source":"<a name=\"time_get__do_get_date\"></a>  time_get::do_get_date"},{"pos":[9560,9686],"content":"A protected virtual member function that is called to parse a string as the date produced by the <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> specifier for <ph id=\"ph1\">`strftime`</ph>.","source":"A protected virtual member function that is called to parse a string as the date produced by the *x* specifier for `strftime`."},{"pos":[9853,9863],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Input iterator addressing the beginning of the sequence to be converted.","pos":[9879,9951]},{"content":"Input iterator addressing the end of the sequence to be converted.","pos":[9969,10035]},{"content":"A format flag which when set indicates that the currency symbol is optional; otherwise, it is required.","pos":[10056,10159]},{"content":"Sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.","pos":[10178,10283]},{"content":"A pointer to where the date information is to be stored.","pos":[10299,10355]},{"pos":[10365,10377],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An input iterator addressing the first element beyond the input field.","pos":[10381,10451]},{"pos":[10461,10468],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The virtual protected member function tries to match sequential elements beginning at first in the sequence [ <ph id=\"ph1\">` first`</ph>, <ph id=\"ph2\">` last`</ph>) until it has recognized a complete, nonempty date input field.","pos":[10472,10663],"source":"The virtual protected member function tries to match sequential elements beginning at first in the sequence [ ` first`, ` last`) until it has recognized a complete, nonempty date input field."},{"content":"If successful, it converts this field to its equivalent value as the components <bpt id=\"p1\">**</bpt>tm::tm_mon<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>tm::tm_day<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>tm::tm_year<ept id=\"p3\">**</ept>, and stores the results in _ <bpt id=\"p4\">*</bpt>Pt<ept id=\"p4\">*</ept><ph id=\"ph1\">-&gt; </ph><bpt id=\"p5\">**</bpt>tm_mon<ept id=\"p5\">**</ept>, <ph id=\"ph2\">\\_</ph> <bpt id=\"p6\">*</bpt>Pt<ept id=\"p6\">*</ept><ph id=\"ph3\">-&gt; </ph><bpt id=\"p7\">**</bpt>tm_day<ept id=\"p7\">**</ept> and <ph id=\"ph4\">\\_</ph> <bpt id=\"p8\">*</bpt>Pt<ept id=\"p8\">*</ept><ph id=\"ph5\">-&gt; </ph><bpt id=\"p9\">**</bpt>tm_year<ept id=\"p9\">**</ept>, respectively.","pos":[10664,10905],"source":" If successful, it converts this field to its equivalent value as the components **tm::tm_mon**, **tm::tm_day**, and **tm::tm_year**, and stores the results in _ *Pt*-> **tm_mon**, \\_ *Pt*-> **tm_day** and \\_ *Pt*-> **tm_year**, respectively."},{"content":"It returns an iterator designating the first element beyond the date input field.","pos":[10906,10987]},{"content":"Otherwise, the function sets <ph id=\"ph1\">`_Iosbase`</ph><bpt id=\"p1\">**</bpt>::failbit<ept id=\"p1\">**</ept> in <ph id=\"ph2\">`_State`</ph>.","pos":[10988,11053],"source":" Otherwise, the function sets `_Iosbase`**::failbit** in `_State`."},{"content":"It returns an iterator designating the first element beyond any prefix of a valid date input field.","pos":[11054,11153]},{"content":"In either case, if the return value equals <ph id=\"ph1\">` last`</ph>, the function sets <ph id=\"ph2\">`ios_base::eofbit`</ph> in <ph id=\"ph3\">`_State`</ph>.","pos":[11154,11255],"source":" In either case, if the return value equals ` last`, the function sets `ios_base::eofbit` in `_State`."},{"content":"The format for the date input field is locale dependent.","pos":[11262,11318]},{"content":"For the default locale, the date input field has the form MMM DD, YYYY, where:","pos":[11319,11397]},{"pos":[11407,11493],"content":"MMM is matched by calling <bpt id=\"p1\">[</bpt>get_monthname<ept id=\"p1\">](#time_get__get_monthname)</ept>, giving the month.","source":"MMM is matched by calling [get_monthname](#time_get__get_monthname), giving the month."},{"content":"DD is a sequence of decimal digits whose corresponding numeric value must be in the range [1, 31], giving the day of the month.","pos":[11503,11630]},{"pos":[11640,11716],"content":"YYYY is matched by calling <bpt id=\"p1\">[</bpt>get_year<ept id=\"p1\">](#time_get__get_year)</ept>, giving the year.","source":"YYYY is matched by calling [get_year](#time_get__get_year), giving the year."},{"content":"The literal spaces and commas must match corresponding elements in the input sequence.","pos":[11723,11809]},{"pos":[11819,11826],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11831,11910],"content":"See the example for <bpt id=\"p1\">[</bpt>get_date<ept id=\"p1\">](#time_get__get_date)</ept>, which calls <ph id=\"ph1\">`do_get_date`</ph>.","source":"See the example for [get_date](#time_get__get_date), which calls `do_get_date`."},{"pos":[11920,11989],"content":"<bpt id=\"p1\">&lt;a name=\"time_get__do_get_monthname\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  time_get::do_get_monthname","linkify":"<a name=\"time_get__do_get_monthname\"></a>  time_get::do_get_monthname","source":"<a name=\"time_get__do_get_monthname\"></a>  time_get::do_get_monthname"},{"content":"A protected virtual member function that is called to parse a string as the name of the month.","pos":[11993,12087]},{"pos":[12259,12269],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Input iterator addressing the beginning of the sequence to be converted.","pos":[12285,12357]},{"content":"Input iterator addressing the end of the sequence to be converted.","pos":[12375,12441]},{"content":"Unused.","pos":[12462,12469]},{"content":"An output parameter that sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.","pos":[12488,12618]},{"content":"A pointer to where the month information is to be stored.","pos":[12634,12691]},{"pos":[12701,12713],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An input iterator addressing the first element beyond the input field.","pos":[12717,12787]},{"pos":[12797,12804],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The virtual protected member function tries to match sequential elements beginning at first in the sequence [ <ph id=\"ph1\">` first`</ph>, <ph id=\"ph2\">` last`</ph>) until it has recognized a complete, nonempty month input field.","pos":[12808,13000],"source":"The virtual protected member function tries to match sequential elements beginning at first in the sequence [ ` first`, ` last`) until it has recognized a complete, nonempty month input field."},{"content":"If successful, it converts this field to its equivalent value as the component <bpt id=\"p1\">**</bpt>tm::tm_mon<ept id=\"p1\">**</ept>, and stores the result in _ <bpt id=\"p2\">*</bpt>Pt<ept id=\"p2\">*</ept><ph id=\"ph1\">-&gt; </ph><bpt id=\"p3\">**</bpt>tm_mon<ept id=\"p3\">**</ept>.","pos":[13001,13141],"source":" If successful, it converts this field to its equivalent value as the component **tm::tm_mon**, and stores the result in _ *Pt*-> **tm_mon**."},{"content":"It returns an iterator designating the first element beyond the month input field.","pos":[13142,13224]},{"content":"Otherwise, the function sets <ph id=\"ph1\">`ios_base::failbit`</ph> in <ph id=\"ph2\">\\_</ph> <bpt id=\"p1\">*</bpt>State<ept id=\"p1\">*</ept>.","pos":[13225,13288],"source":" Otherwise, the function sets `ios_base::failbit` in \\_ *State*."},{"content":"It returns an iterator designating the first element beyond any prefix of a valid month input field.","pos":[13289,13389]},{"content":"In either case, if the return value equals <ph id=\"ph1\">` last`</ph>, the function sets <ph id=\"ph2\">`ios_base::eofbit`</ph> in <ph id=\"ph3\">\\_</ph> <bpt id=\"p1\">*</bpt>State<ept id=\"p1\">*</ept>.","pos":[13390,13493],"source":" In either case, if the return value equals ` last`, the function sets `ios_base::eofbit` in \\_ *State*."},{"content":"The month input field is a sequence that matches the longest of a set of locale-specific sequences, such as Jan, January, Feb, February, and so on.","pos":[13500,13647]},{"content":"The converted value is the number of months since January.","pos":[13648,13706]},{"pos":[13716,13723],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13728,13822],"content":"See the example for <bpt id=\"p1\">[</bpt>get_monthname<ept id=\"p1\">](#time_get__get_monthname)</ept>, which calls <ph id=\"ph1\">`do_get_monthname`</ph>.","source":"See the example for [get_monthname](#time_get__get_monthname), which calls `do_get_monthname`."},{"pos":[13832,13891],"content":"<bpt id=\"p1\">&lt;a name=\"time_get__do_get_time\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  time_get::do_get_time","linkify":"<a name=\"time_get__do_get_time\"></a>  time_get::do_get_time","source":"<a name=\"time_get__do_get_time\"></a>  time_get::do_get_time"},{"pos":[13895,14021],"content":"A protected virtual member function that is called to parse a string as the date produced by the <bpt id=\"p1\">*</bpt>X<ept id=\"p1\">*</ept> specifier for <ph id=\"ph1\">`strftime`</ph>.","source":"A protected virtual member function that is called to parse a string as the date produced by the *X* specifier for `strftime`."},{"pos":[14188,14198],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Input iterator addressing the beginning of the sequence to be converted.","pos":[14214,14286]},{"content":"Input iterator addressing the end of the sequence to be converted.","pos":[14304,14370]},{"content":"Unused.","pos":[14391,14398]},{"content":"Sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.","pos":[14417,14522]},{"content":"A pointer to where the date information is to be stored.","pos":[14538,14594]},{"pos":[14604,14616],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An input iterator addressing the first element beyond the input field.","pos":[14620,14690]},{"pos":[14700,14707],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The virtual protected member function tries to match sequential elements beginning at first in the sequence [ <ph id=\"ph1\">` first`</ph>, <ph id=\"ph2\">` last`</ph>) until it has recognized a complete, nonempty time input field.","pos":[14711,14902],"source":"The virtual protected member function tries to match sequential elements beginning at first in the sequence [ ` first`, ` last`) until it has recognized a complete, nonempty time input field."},{"content":"If successful, it converts this field to its equivalent value as the components <bpt id=\"p1\">**</bpt>tm::tm_hour<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>tm::tm_min<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>tm::tm_sec<ept id=\"p3\">**</ept>, and stores the results in _ <bpt id=\"p4\">*</bpt>Pt<ept id=\"p4\">*</ept><ph id=\"ph1\">-&gt; </ph><bpt id=\"p5\">**</bpt>tm_hour<ept id=\"p5\">**</ept>, <ph id=\"ph2\">\\_</ph> <bpt id=\"p6\">*</bpt>Pt<ept id=\"p6\">*</ept><ph id=\"ph3\">-&gt; </ph><bpt id=\"p7\">**</bpt>tm_min<ept id=\"p7\">**</ept>, and <ph id=\"ph4\">\\_</ph> <bpt id=\"p8\">*</bpt>Pt<ept id=\"p8\">*</ept><ph id=\"ph5\">-&gt; </ph><bpt id=\"p9\">**</bpt>tm_sec<ept id=\"p9\">**</ept>, respectively.","pos":[14903,15145],"source":" If successful, it converts this field to its equivalent value as the components **tm::tm_hour**, **tm::tm_min**, and **tm::tm_sec**, and stores the results in _ *Pt*-> **tm_hour**, \\_ *Pt*-> **tm_min**, and \\_ *Pt*-> **tm_sec**, respectively."},{"content":"It returns an iterator designating the first element beyond the time input field.","pos":[15146,15227]},{"content":"Otherwise, the function sets <ph id=\"ph1\">`ios_base::failbit`</ph> in <ph id=\"ph2\">\\_</ph> <bpt id=\"p1\">*</bpt>State<ept id=\"p1\">*</ept>.","pos":[15228,15291],"source":" Otherwise, the function sets `ios_base::failbit` in \\_ *State*."},{"content":"It returns an iterator designating the first element beyond any prefix of a valid time input field.","pos":[15292,15391]},{"content":"In either case, if the return value equals <ph id=\"ph1\">` last`</ph>, the function sets <ph id=\"ph2\">`ios_base::eofbit`</ph> in <ph id=\"ph3\">\\_</ph> <bpt id=\"p1\">*</bpt>State<ept id=\"p1\">*</ept>.","pos":[15392,15495],"source":" In either case, if the return value equals ` last`, the function sets `ios_base::eofbit` in \\_ *State*."},{"content":"In this implementation, the time input field has the form HH:MM:SS, where:","pos":[15502,15576]},{"content":"HH is a sequence of decimal digits whose corresponding numeric value must be in the range [0, 24), giving the hour of the day.","pos":[15586,15712]},{"content":"MM is a sequence of decimal digits whose corresponding numeric value must be in the range [0, 60), giving the minutes past the hour.","pos":[15722,15854]},{"content":"SS is a sequence of decimal digits whose corresponding numeric value must be in the range [0, 60), giving the seconds past the minute.","pos":[15864,15998]},{"content":"The literal colons must match corresponding elements in the input sequence.","pos":[16005,16080]},{"pos":[16090,16097],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[16102,16181],"content":"See the example for <bpt id=\"p1\">[</bpt>get_time<ept id=\"p1\">](#time_get__get_time)</ept>, which calls <ph id=\"ph1\">`do_get_time`</ph>.","source":"See the example for [get_time](#time_get__get_time), which calls `do_get_time`."},{"pos":[16191,16256],"content":"<bpt id=\"p1\">&lt;a name=\"time_get__do_get_weekday\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  time_get::do_get_weekday","linkify":"<a name=\"time_get__do_get_weekday\"></a>  time_get::do_get_weekday","source":"<a name=\"time_get__do_get_weekday\"></a>  time_get::do_get_weekday"},{"content":"A protected virtual member function that is called to parse a string as the name of the day of the week.","pos":[16260,16364]},{"pos":[16534,16544],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Input iterator addressing the beginning of the sequence to be converted.","pos":[16560,16632]},{"content":"Input iterator addressing the end of the sequence to be converted.","pos":[16650,16716]},{"content":"A format flag which when set indicates that the currency symbol is optional; otherwise, it is required.","pos":[16737,16840]},{"content":"Sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.","pos":[16859,16964]},{"content":"A pointer to where the weekday information is to be stored.","pos":[16980,17039]},{"pos":[17049,17061],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An input iterator addressing the first element beyond the input field.","pos":[17065,17135]},{"pos":[17145,17152],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The virtual protected member function tries to match sequential elements beginning at <ph id=\"ph1\">` first`</ph> in the sequence [ <ph id=\"ph2\">` first`</ph>, <ph id=\"ph3\">` last`</ph>) until it has recognized a complete, nonempty weekday input field.","pos":[17156,17353],"source":"The virtual protected member function tries to match sequential elements beginning at ` first` in the sequence [ ` first`, ` last`) until it has recognized a complete, nonempty weekday input field."},{"content":"If successful, it converts this field to its equivalent value as the component <bpt id=\"p1\">**</bpt>tm::tm_wday<ept id=\"p1\">**</ept>, and stores the result in _ <bpt id=\"p2\">*</bpt>Pt<ept id=\"p2\">*</ept><ph id=\"ph1\">-&gt; </ph><bpt id=\"p3\">**</bpt>tm_wday<ept id=\"p3\">**</ept>.","pos":[17354,17496],"source":" If successful, it converts this field to its equivalent value as the component **tm::tm_wday**, and stores the result in _ *Pt*-> **tm_wday**."},{"content":"It returns an iterator designating the first element beyond the weekday input field.","pos":[17497,17581]},{"content":"Otherwise, the function sets <ph id=\"ph1\">`ios_base::failbit`</ph> in <ph id=\"ph2\">\\_</ph> <bpt id=\"p1\">*</bpt>State<ept id=\"p1\">*</ept>.","pos":[17582,17645],"source":" Otherwise, the function sets `ios_base::failbit` in \\_ *State*."},{"content":"It returns an iterator designating the first element beyond any prefix of a valid weekday input field.","pos":[17646,17748]},{"content":"In either case, if the return value equals <ph id=\"ph1\">` last`</ph>, the function sets <ph id=\"ph2\">`ios_base::eofbit`</ph> in <ph id=\"ph3\">\\_</ph> <bpt id=\"p1\">*</bpt>State<ept id=\"p1\">*</ept>.","pos":[17749,17852],"source":" In either case, if the return value equals ` last`, the function sets `ios_base::eofbit` in \\_ *State*."},{"content":"The weekday input field is a sequence that matches the longest of a set of locale-specific sequences, such as Sun, Sunday, Mon, Monday, and so on.","pos":[17859,18005]},{"content":"The converted value is the number of days since Sunday.","pos":[18006,18061]},{"pos":[18071,18078],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[18083,18171],"content":"See the example for <bpt id=\"p1\">[</bpt>get_weekday<ept id=\"p1\">](#time_get__get_weekday)</ept>, which calls <ph id=\"ph1\">`do_get_weekday`</ph>.","source":"See the example for [get_weekday](#time_get__get_weekday), which calls `do_get_weekday`."},{"pos":[18181,18240],"content":"<bpt id=\"p1\">&lt;a name=\"time_get__do_get_year\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  time_get::do_get_year","linkify":"<a name=\"time_get__do_get_year\"></a>  time_get::do_get_year","source":"<a name=\"time_get__do_get_year\"></a>  time_get::do_get_year"},{"content":"A protected virtual member function that is called to parses a string as the name of the year.","pos":[18244,18338]},{"pos":[18505,18515],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Input iterator addressing the beginning of the sequence to be converted.","pos":[18531,18603]},{"content":"Input iterator addressing the end of the sequence to be converted.","pos":[18621,18687]},{"content":"A format flag which when set indicates that the currency symbol is optional; otherwise, it is required.","pos":[18708,18811]},{"content":"Sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.","pos":[18830,18935]},{"content":"A pointer to where the year information is to be stored.","pos":[18951,19007]},{"pos":[19017,19029],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An input iterator addressing the first element beyond the input field.","pos":[19033,19103]},{"pos":[19113,19120],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The virtual protected member function tries to match sequential elements beginning at <ph id=\"ph1\">` first`</ph> in the sequence [ <ph id=\"ph2\">` first`</ph>, <ph id=\"ph3\">` last`</ph>) until it has recognized a complete, nonempty year input field.","pos":[19124,19318],"source":"The virtual protected member function tries to match sequential elements beginning at ` first` in the sequence [ ` first`, ` last`) until it has recognized a complete, nonempty year input field."},{"content":"If successful, it converts this field to its equivalent value as the component <bpt id=\"p1\">**</bpt>tm::tm_year<ept id=\"p1\">**</ept>, and stores the result in _ <bpt id=\"p2\">*</bpt>Pt<ept id=\"p2\">*</ept><ph id=\"ph1\">-&gt; </ph><bpt id=\"p3\">**</bpt>tm_year<ept id=\"p3\">**</ept>.","pos":[19319,19461],"source":" If successful, it converts this field to its equivalent value as the component **tm::tm_year**, and stores the result in _ *Pt*-> **tm_year**."},{"content":"It returns an iterator designating the first element beyond the year input field.","pos":[19462,19543]},{"content":"Otherwise, the function sets <ph id=\"ph1\">`ios_base::failbit`</ph> in <ph id=\"ph2\">\\_</ph> <bpt id=\"p1\">*</bpt>State<ept id=\"p1\">*</ept>.","pos":[19544,19607],"source":" Otherwise, the function sets `ios_base::failbit` in \\_ *State*."},{"content":"It returns an iterator designating the first element beyond any prefix of a valid year input field.","pos":[19608,19707]},{"content":"In either case, if the return value equals <ph id=\"ph1\">` last`</ph>, the function sets <ph id=\"ph2\">`ios_base::eofbit`</ph> in <ph id=\"ph3\">\\_</ph> <bpt id=\"p1\">*</bpt>State<ept id=\"p1\">*</ept>.","pos":[19708,19811],"source":" In either case, if the return value equals ` last`, the function sets `ios_base::eofbit` in \\_ *State*."},{"content":"The year input field is a sequence of decimal digits whose corresponding numeric value must be in the range [1900, 2036).","pos":[19818,19939]},{"content":"The stored value is this value minus 1900.","pos":[19940,19982]},{"content":"In this implementation, values in the range [69, 136) represent the range of years [1969, 2036).","pos":[19983,20079]},{"content":"Values in the range [0, 69) are also permissible, but may represent either the range of years [1900, 1969) or [2000, 2069), depending on the specific translation environment.","pos":[20080,20254]},{"pos":[20264,20271],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[20276,20355],"content":"See the example for <bpt id=\"p1\">[</bpt>get_year<ept id=\"p1\">](#time_get__get_year)</ept>, which calls <ph id=\"ph1\">`do_get_year`</ph>.","source":"See the example for [get_year](#time_get__get_year), which calls `do_get_year`."},{"pos":[20365,20408],"content":"<bpt id=\"p1\">&lt;a name=\"time_get__get\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  time_get::get","linkify":"<a name=\"time_get__get\"></a>  time_get::get","source":"<a name=\"time_get__get\"></a>  time_get::get"},{"content":"Reads from a source of character data and converts that data to a time that is stored in a time struct.","pos":[20412,20515]},{"content":"The first function accepts one conversion specifier and modifier, the second accepts several.","pos":[20516,20609]},{"pos":[21012,21022],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Input iterator that indicates where the sequence to be converted starts.","pos":[21038,21110]},{"content":"Input iterator that indicates the end of the sequence to be converted.","pos":[21128,21198]},{"content":"The stream.","pos":[21219,21230]},{"content":"The appropriate bitmask elements are set for the stream state to indicate errors.","pos":[21249,21330]},{"content":"Pointer to the time structure where the time is to be stored.","pos":[21346,21407]},{"content":"A conversion specifier character.","pos":[21424,21457]},{"content":"An optional modifier character.","pos":[21474,21505]},{"content":"Points to where the format directives start.","pos":[21528,21572]},{"content":"Points to the end of the format directives.","pos":[21594,21637]},{"pos":[21647,21659],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns an iterator to the first character after the data that was used to assign the time struct *_Pt.","pos":[21663,21766]},{"pos":[21776,21783],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[21787,21911],"content":"The first member function returns <ph id=\"ph1\">`do_get`</ph> <ph id=\"ph2\">`(`` first``,`</ph> <ph id=\"ph3\">` last``,`</ph> <ph id=\"ph4\">`_Iosbase``,`</ph> <ph id=\"ph5\">`_State``,`</ph> <ph id=\"ph6\">`_Pt``,`</ph> <ph id=\"ph7\">`_Fmt``,`</ph> <ph id=\"ph8\">`_Mod``)`</ph>.","source":"The first member function returns `do_get` `(`` first``,` ` last``,` `_Iosbase``,` `_State``,` `_Pt``,` `_Fmt``,` `_Mod``)`."},{"content":"The second member function calls <ph id=\"ph1\">`do_get`</ph> under the control of the format delimited by <ph id=\"ph2\">`[``_Fmt_first``,``_Fmt_last``)`</ph>.","pos":[21918,22038],"source":"The second member function calls `do_get` under the control of the format delimited by `[``_Fmt_first``,``_Fmt_last``)`."},{"content":"It treats the format as a sequence of fields, each of which determines the conversion of zero or more input elements delimited by <ph id=\"ph1\">`[first, last)`</ph>.","pos":[22039,22185],"source":" It treats the format as a sequence of fields, each of which determines the conversion of zero or more input elements delimited by `[first, last)`."},{"content":"It returns an iterator designating the first unconverted element.","pos":[22186,22251]},{"content":"There are three kinds of fields:","pos":[22252,22284]},{"content":"A per cent (%) in the format, followed by an optional modifier <ph id=\"ph1\">`mod`</ph> in the set [EOQ#], followed by a conversion specifier <ph id=\"ph2\">`fmt`</ph>, replaces <ph id=\"ph3\">`first`</ph> with the value returned by <ph id=\"ph4\">`do_get`</ph> <ph id=\"ph5\">`(`` first``,`</ph> <ph id=\"ph6\">` last``,`</ph> <ph id=\"ph7\">`_Iosbase``,`</ph> <ph id=\"ph8\">`_State``,`</ph> <ph id=\"ph9\">`_Pt``,`</ph> <ph id=\"ph10\">`_Fmt``,`</ph> <ph id=\"ph11\">`_Mod``)`</ph>.","pos":[22291,22555],"source":"A per cent (%) in the format, followed by an optional modifier `mod` in the set [EOQ#], followed by a conversion specifier `fmt`, replaces `first` with the value returned by `do_get` `(`` first``,` ` last``,` `_Iosbase``,` `_State``,` `_Pt``,` `_Fmt``,` `_Mod``)`."},{"content":"A conversion failure sets <ph id=\"ph1\">`ios_base::failbit`</ph> in <ph id=\"ph2\">`state`</ph> and returns.","pos":[22556,22625],"source":" A conversion failure sets `ios_base::failbit` in `state` and returns."},{"content":"A whitespace element in the format skips past zero or more input whitespace elements.","pos":[22632,22717]},{"content":"Any other element in the format must match the next input element, which is skipped.","pos":[22724,22808]},{"content":"A match failure sets <ph id=\"ph1\">`ios_base::failbit`</ph> in <ph id=\"ph2\">`state`</ph> and returns.","pos":[22809,22873],"source":" A match failure sets `ios_base::failbit` in `state` and returns."},{"pos":[22883,22936],"content":"<bpt id=\"p1\">&lt;a name=\"time_get__get_date\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  time_get::get_date","linkify":"<a name=\"time_get__get_date\"></a>  time_get::get_date","source":"<a name=\"time_get__get_date\"></a>  time_get::get_date"},{"pos":[22940,23013],"content":"Parses a string as the date produced by the <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> specifier for <ph id=\"ph1\">`strftime`</ph>.","source":"Parses a string as the date produced by the *x* specifier for `strftime`."},{"pos":[23169,23179],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Input iterator addressing the beginning of the sequence to be converted.","pos":[23195,23267]},{"content":"Input iterator addressing the end of the sequence to be converted.","pos":[23285,23351]},{"content":"A format flag which when set indicates that the currency symbol is optional; otherwise, it is required.","pos":[23372,23475]},{"content":"Sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.","pos":[23494,23599]},{"content":"A pointer to where the date information is to be stored.","pos":[23615,23671]},{"pos":[23681,23693],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An input iterator addressing the first element beyond the input field.","pos":[23697,23767]},{"pos":[23777,23784],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[23788,23903],"content":"The member function returns <bpt id=\"p1\">[</bpt>do_get_date<ept id=\"p1\">](#time_get__do_get_date)</ept>( <ph id=\"ph1\">` first`</ph>, <ph id=\"ph2\">` last`</ph>, <ph id=\"ph3\">`_Iosbase`</ph>, <ph id=\"ph4\">`_State`</ph>, <ph id=\"ph5\">`_Pt`</ph>).","source":"The member function returns [do_get_date](#time_get__do_get_date)( ` first`, ` last`, `_Iosbase`, `_State`, `_Pt`)."},{"content":"Note that months are counted from 0 to 11.","pos":[23910,23952]},{"pos":[23962,23969],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[25333,25396],"content":"<bpt id=\"p1\">&lt;a name=\"time_get__get_monthname\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  time_get::get_monthname","linkify":"<a name=\"time_get__get_monthname\"></a>  time_get::get_monthname","source":"<a name=\"time_get__get_monthname\"></a>  time_get::get_monthname"},{"content":"Parses a string as the name of the month.","pos":[25400,25441]},{"pos":[25602,25612],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Input iterator addressing the beginning of the sequence to be converted.","pos":[25628,25700]},{"content":"Input iterator addressing the end of the sequence to be converted.","pos":[25718,25784]},{"content":"Unused.","pos":[25805,25812]},{"content":"An output parameter that sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.","pos":[25831,25961]},{"content":"A pointer to where the month information is to be stored.","pos":[25977,26034]},{"pos":[26044,26056],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An input iterator addressing the first element beyond the input field.","pos":[26060,26130]},{"pos":[26140,26147],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[26151,26276],"content":"The member function returns <bpt id=\"p1\">[</bpt>do_get_monthname<ept id=\"p1\">](#time_get__do_get_monthname)</ept>( <ph id=\"ph1\">` first`</ph>, <ph id=\"ph2\">` last`</ph>, <ph id=\"ph3\">`_Iosbase`</ph>, <ph id=\"ph4\">`_State`</ph>, <ph id=\"ph5\">`_Pt`</ph>).","source":"The member function returns [do_get_monthname](#time_get__do_get_monthname)( ` first`, ` last`, `_Iosbase`, `_State`, `_Pt`)."},{"pos":[26286,26293],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[27670,27723],"content":"<bpt id=\"p1\">&lt;a name=\"time_get__get_time\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  time_get::get_time","linkify":"<a name=\"time_get__get_time\"></a>  time_get::get_time","source":"<a name=\"time_get__get_time\"></a>  time_get::get_time"},{"pos":[27727,27800],"content":"Parses a string as the date produced by the <bpt id=\"p1\">*</bpt>X<ept id=\"p1\">*</ept> specifier for <ph id=\"ph1\">`strftime`</ph>.","source":"Parses a string as the date produced by the *X* specifier for `strftime`."},{"pos":[27956,27966],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Input iterator addressing the beginning of the sequence to be converted.","pos":[27982,28054]},{"content":"Input iterator addressing the end of the sequence to be converted.","pos":[28072,28138]},{"content":"Unused.","pos":[28159,28166]},{"content":"Sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.","pos":[28185,28290]},{"content":"A pointer to where the date information is to be stored.","pos":[28306,28362]},{"pos":[28372,28384],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An input iterator addressing the first element beyond the input field.","pos":[28388,28458]},{"pos":[28468,28475],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[28479,28594],"content":"The member function returns <bpt id=\"p1\">[</bpt>do_get_time<ept id=\"p1\">](#time_get__do_get_time)</ept>( <ph id=\"ph1\">` first`</ph>, <ph id=\"ph2\">` last`</ph>, <ph id=\"ph3\">`_Iosbase`</ph>, <ph id=\"ph4\">`_State`</ph>, <ph id=\"ph5\">`_Pt`</ph>).","source":"The member function returns [do_get_time](#time_get__do_get_time)( ` first`, ` last`, `_Iosbase`, `_State`, `_Pt`)."},{"pos":[28604,28611],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[29707,29766],"content":"<bpt id=\"p1\">&lt;a name=\"time_get__get_weekday\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  time_get::get_weekday","linkify":"<a name=\"time_get__get_weekday\"></a>  time_get::get_weekday","source":"<a name=\"time_get__get_weekday\"></a>  time_get::get_weekday"},{"content":"Parses a string as the name of the day of the week.","pos":[29770,29821]},{"pos":[29980,29990],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Input iterator addressing the beginning of the sequence to be converted.","pos":[30006,30078]},{"content":"Input iterator addressing the end of the sequence to be converted.","pos":[30096,30162]},{"content":"A format flag which when set indicates that the currency symbol is optional; otherwise, it is required.","pos":[30183,30286]},{"content":"Sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.","pos":[30305,30410]},{"content":"A pointer to where the weekday information is to be stored.","pos":[30426,30485]},{"pos":[30495,30507],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An input iterator addressing the first element beyond the input field.","pos":[30511,30581]},{"pos":[30591,30598],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[30602,30723],"content":"The member function returns <bpt id=\"p1\">[</bpt>do_get_weekday<ept id=\"p1\">](#time_get__do_get_weekday)</ept>( <ph id=\"ph1\">` first`</ph>, <ph id=\"ph2\">` last`</ph>, <ph id=\"ph3\">`_Iosbase`</ph>, <ph id=\"ph4\">`_State`</ph>, <ph id=\"ph5\">`_Pt`</ph>).","source":"The member function returns [do_get_weekday](#time_get__do_get_weekday)( ` first`, ` last`, `_Iosbase`, `_State`, `_Pt`)."},{"pos":[30733,30740],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[31758,31811],"content":"<bpt id=\"p1\">&lt;a name=\"time_get__get_year\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  time_get::get_year","linkify":"<a name=\"time_get__get_year\"></a>  time_get::get_year","source":"<a name=\"time_get__get_year\"></a>  time_get::get_year"},{"content":"Parses a string as the name of the year.","pos":[31815,31855]},{"pos":[32011,32021],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Input iterator addressing the beginning of the sequence to be converted.","pos":[32037,32109]},{"content":"Input iterator addressing the end of the sequence to be converted.","pos":[32127,32193]},{"content":"A format flag which when set indicates that the currency symbol is optional; otherwise, it is required.","pos":[32214,32317]},{"content":"Sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.","pos":[32336,32441]},{"content":"A pointer to where the year information is to be stored.","pos":[32457,32513]},{"pos":[32523,32535],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An input iterator addressing the first element beyond the input field.","pos":[32539,32609]},{"pos":[32619,32626],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[32630,32745],"content":"The member function returns <bpt id=\"p1\">[</bpt>do_get_year<ept id=\"p1\">](#time_get__do_get_year)</ept>( <ph id=\"ph1\">` first`</ph>, <ph id=\"ph2\">` last`</ph>, <ph id=\"ph3\">`_Iosbase`</ph>, <ph id=\"ph4\">`_State`</ph>, <ph id=\"ph5\">`_Pt`</ph>).","source":"The member function returns [do_get_year](#time_get__do_get_year)( ` first`, ` last`, `_Iosbase`, `_State`, `_Pt`)."},{"pos":[32755,32762],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[33757,33812],"content":"<bpt id=\"p1\">&lt;a name=\"time_get__iter_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  time_get::iter_type","linkify":"<a name=\"time_get__iter_type\"></a>  time_get::iter_type","source":"<a name=\"time_get__iter_type\"></a>  time_get::iter_type"},{"content":"A type that describes an input iterator.","pos":[33816,33856]},{"pos":[33916,33923],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[33927,33994],"content":"The type is a synonym for the template parameter <bpt id=\"p1\">**</bpt>InputIterator<ept id=\"p1\">**</ept>.","source":"The type is a synonym for the template parameter **InputIterator**."},{"pos":[34004,34057],"content":"<bpt id=\"p1\">&lt;a name=\"time_get__time_get\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  time_get::time_get","linkify":"<a name=\"time_get__time_get\"></a>  time_get::time_get","source":"<a name=\"time_get__time_get\"></a>  time_get::time_get"},{"pos":[34061,34108],"content":"The constructor for objects of type <ph id=\"ph1\">`time_get`</ph>.","source":"The constructor for objects of type `time_get`."},{"pos":[34170,34180],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Integer value used to specify the type of memory management for the object.","pos":[34195,34270]},{"pos":[34280,34287],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[34291,34364],"content":"The possible values for the <ph id=\"ph1\">`_Refs`</ph> parameter and their significance are:","source":"The possible values for the `_Refs` parameter and their significance are:"},{"content":"0: The lifetime of the object is managed by the locales that contain it.","pos":[34374,34446]},{"content":"1: The lifetime of the object must be manually managed.","pos":[34456,34511]},{"content":"<ph id=\"ph1\">\\&gt;</ph> 0: These values are not defined.","pos":[34521,34556],"source":"\\> 0: These values are not defined."},{"content":"No direct examples are possible, because the destructor is protected.","pos":[34563,34632]},{"pos":[34639,34767],"content":"The constructor initializes its base object with <bpt id=\"p1\">**</bpt>locale::<ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>facet<ept id=\"p2\">](../standard-library/locale-class.md#facet_class)</ept>( <ph id=\"ph1\">`_Refs`</ph>).","source":"The constructor initializes its base object with **locale::**[facet](../standard-library/locale-class.md#facet_class)( `_Refs`)."},{"pos":[34776,34784],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>locale&gt;<ept id=\"p1\">](../standard-library/locale.md)</ept><ph id=\"ph2\"> </ph>","pos":[34788,34831],"source":"[\\<locale>](../standard-library/locale.md) "},{"content":"<bpt id=\"p1\"> [</bpt>time_base Class<ept id=\"p1\">](../standard-library/time-base-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[34834,34893],"source":" [time_base Class](../standard-library/time-base-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept>","pos":[34896,35006],"source":" [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)"}],"content":"---\ntitle: \"time_get Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.time_get\"\n  - \"xloctime/std::time_get\"\n  - \"time_get\"\n  - \"std::time_get\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"time_get class\"\nms.assetid: 869d5f5b-dbab-4628-8333-bdea7e272023\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# time_get Class\nThe template class describes an object that can serve as a locale facet to control conversions of sequences of type `CharType` to time values.  \n  \n## Syntax  \n  \n```  \ntemplate <class CharType,  \n    class InputIterator = istreambuf_iterator<CharType>>  \nclass time_get : public time_base;  \n```  \n  \n#### Parameters  \n `CharType`  \n The type used within a program to encode characters.  \n  \n `InputIterator`  \n The iterator from which the time values are read.  \n  \n## Remarks  \n As with any locale facet, the static object ID has an initial stored value of zero. The first attempt to access its stored value stores a unique positive value in **id.**  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[time_get](#time_get__time_get)|The constructor for objects of type `time_get`.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[char_type](#time_get__char_type)|A type that is used to describe a character used by a locale.|  \n|[iter_type](#time_get__iter_type)|A type that describes an input iterator.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[date_order](#time_get__date_order)|Returns the date order used by a facet.|  \n|[do_date_order](#time_get__do_date_order)|A protected virtual member function that is called to return the date order used by a facet.|  \n|[do_get](#time_get__do_get)|Reads and converts character data to a time value.|  \n|[do_get_date](#time_get__do_get_date)|A protected virtual member function that is called to parse a string as the date produced by the `x` specifier for `strftime`.|  \n|[do_get_monthname](#time_get__do_get_monthname)|A protected virtual member function that is called to parse a string as the name of the month.|  \n|[do_get_time](#time_get__do_get_time)|A protected virtual member function that is called to parse a string as the date produced by the `X` specifier for `strftime`.|  \n|[do_get_weekday](#time_get__do_get_weekday)|A protected virtual member function that is called to parse a string as the name of the day of the week.|  \n|[do_get_year](#time_get__do_get_year)|A protected virtual member function that is called to parses a string as the name of the year.|  \n|[get](#time_get__get)|Reads from a source of character data and converts that data to a time that is stored in a time struct.|  \n|[get_date](#time_get__get_date)|Parses a string as the date produced by the `x` specifier for `strftime`.|  \n|[get_monthname](#time_get__get_monthname)|Parses a string as the name of the month.|  \n|[get_time](#time_get__get_time)|Parses a string as the date produced by the `X` specifier for `strftime`.|  \n|[get_weekday](#time_get__get_weekday)|Parses a string as the name of the day of the week.|  \n|[get_year](#time_get__get_year)|Parses a string as the name of the year.|  \n  \n## Requirements  \n **Header:** \\<locale>  \n  \n **Namespace:** std  \n  \n##  <a name=\"time_get__char_type\"></a>  time_get::char_type  \n A type that is used to describe a character used by a locale.  \n  \n```  \ntypedef CharType char_type;  \n```  \n  \n### Remarks  \n The type is a synonym for the template parameter **CharType**.  \n  \n##  <a name=\"time_get__date_order\"></a>  time_get::date_order  \n Returns the date order used by a facet.  \n  \n```  \ndateorder date_order() const;\n```  \n  \n### Return Value  \n The date order used by a facet.  \n  \n### Remarks  \n The member function returns [do_date_order](#time_get__do_date_order).  \n  \n### Example  \n  \n```cpp  \n// time_get_date_order.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n#include <sstream>  \n#include <time.h>  \nusing namespace std;  \nvoid po( char *p )  \n{  \n   locale loc( p );  \n  \n   time_get <char>::dateorder order = use_facet <time_get <char> >( loc ).date_order ( );  \n   cout << loc.name( );  \n   switch (order){  \n      case time_base::dmy: cout << \"(day, month, year)\" << endl;  \n      break;  \n      case time_base::mdy: cout << \"(month, day, year)\" << endl;  \n      break;  \n      case time_base::ydm: cout << \"(year, day, month)\" << endl;  \n      break;  \n      case time_base::ymd: cout << \"(year, month, day)\"<< endl;  \n      break;  \n      case time_base::no_order: cout << \"(no_order)\"<< endl;  \n      break;  \n   }  \n}  \n  \nint main( )  \n{  \n   po( \"C\" );  \n   po( \"german\" );  \n   po( \"English_Britain\" );  \n}  \n```  \n  \n```Output  \nC(month, day, year)  \nGerman_Germany.1252(day, month, year)  \nEnglish_United Kingdom.1252(day, month, year)  \n```  \n  \n##  <a name=\"time_get__do_date_order\"></a>  time_get::do_date_order  \n A protected virtual member function that is called to return the date order used by a facet.  \n  \n```  \nvirtual dateorder do_date_order() const;\n```  \n  \n### Return Value  \n The date order used by a facet.  \n  \n### Remarks  \n The virtual protected member function returns a value of type **time_base::dateorder**, which describes the order in which date components are matched by [do_get_date](#time_get__do_get_date). In this implementation, the value is **time_base::mdy**, corresponding to dates of the form December 2, 1979.  \n  \n### Example  \n  See the example for [date_order](#time_get__date_order), which calls `do_date_order`.  \n  \n##  <a name=\"time_get__do_get\"></a>  time_get::do_get  \n Reads and converts character data to a time value. Accepts one conversion specifier and modifier.  \n  \n```  \nvirtual iter_type  \n    do_get(\n iter_type first,   \n    iter_type last,  \n    ios_base& _Iosbase,   \n    ios_base::iostate& _State,   \n    tm* _Pt,  \n    char _Fmt,   \n    char _Mod) const;\n```  \n  \n### Parameters  \n ` first`  \n An Input iterator that indicates the start of the sequence to convert.  \n  \n ` last`  \n An Input iterator that indicates the end of the sequence.  \n  \n `_Iosbase`  \n A stream object.  \n  \n `_State`  \n A field in _Iosbase where appropriate bitmask elements are set to indicate errors.  \n  \n `_Pt`  \n A pointer to the time structure where the time is to be stored.  \n  \n `_Fmt`  \n A conversion specifier character.  \n  \n `_Mod`  \n An optional modifier character.  \n  \n### Return Value  \n Returns an iterator that designates the first unconverted element. A conversion failure sets `ios_base::failbit` in `_State` and returns ` first`.  \n  \n### Remarks  \n The virtual member function converts and skips one or more input elements in the range `[`` first``,` ` last``)` to determine the values stored in one or more members of `*pt`. A conversion failure sets `ios_base::failbit` in `_State` and returns ` first`. Otherwise, the function returns an iterator designating the first unconverted element.  \n  \n The conversion specifiers are:  \n  \n `'a'` or `'A'` -- behaves the same as [time_get::get_weekday](#time_get__get_weekday).  \n  \n `'b'`, `'B'`, or `'h'` -- behaves the same as [time_get::get_monthname](#time_get__get_monthname).  \n  \n `'c'` -- behaves the same as `\"%b %d %H : %M : %S %Y\"`.  \n  \n `'C'` -- converts a decimal input field in the range [0, 99] to the value `val` and stores `val * 100 - 1900` in `pt-&tm_year`.  \n  \n `'d'` or `'e'` -- converts a decimal input field in the range [1, 31] and stores its value in `pt-&tm_mday`.  \n  \n `'D'` -- behaves the same as `\"%m / %d / %y\"`.  \n  \n `'H'` -- converts a decimal input field in the range [0, 23] and stores its value in `pt-&tm_hour`.  \n  \n `'I'` -- converts a decimal input field in the range [0, 11] and stores its value in `pt-&tm_hour`.  \n  \n `'j'` -- converts a decimal input field in the range [1, 366] and stores its value in `pt-&tm_yday`.  \n  \n `'m'` -- converts a decimal input field in the range [1, 12] to the value `val` and stores `val - 1` in and stores its value in `pt-&tm_mon`.  \n  \n `'M'` -- converts a decimal input field in the range [0, 59] and stores its value in `pt-&tm_min`.  \n  \n `'n'` or `'t'` -- behaves the same as `\" \"`.  \n  \n `'p'` -- converts \"AM\" or \"am\" to zero and \"PM\" or \"PM\" to 12 and adds this value to `pt-&tm_hour`.  \n  \n `'r'` -- behaves the same as `\"%I : %M : %S %p\"`.  \n  \n `'R'` -- behaves the same as `\"%H %M\"`.  \n  \n `'S'` -- converts a decimal input field in the range [0, 59] and stores its value in `pt-&tm_sec`.  \n  \n `'T'` or `'X'` -- behaves the same as `\"%H : %M : S\"`.  \n  \n `'U'` -- converts a decimal input field in the range [0, 53] and stores its value in `pt-&tm_yday`.  \n  \n `'w'` -- converts a decimal input field in the range [0, 6] and stores its value in `pt-&tm_wday`.  \n  \n `'W'` -- converts a decimal input field in the range [0, 53] and stores its value in `pt-&tm_yday`.  \n  \n `'x'` -- behaves the same as `\"%d / %m / %y\"`.  \n  \n `'y'` -- converts a decimal input field in the range [0, 99] to the value `val` and stores `val < 69  val + 100 : val` in `pt-&tm_year`.  \n  \n `'Y'` -- behaves the same as [time_get::get_year](#time_get__get_year).  \n  \n Any other conversion specifier sets `ios_base::failbit` in `state` and returns. In this implementation, any modifier has no effect.  \n  \n##  <a name=\"time_get__do_get_date\"></a>  time_get::do_get_date  \n A protected virtual member function that is called to parse a string as the date produced by the *x* specifier for `strftime`.  \n  \n```  \nvirtual iter_type do_get_date(iter_type first,\n    iter_type last,\n    ios_base& _Iosbase,\n    ios_base::iostate& _State,\n    tm* _Pt) const;\n```  \n  \n### Parameters  \n ` first`  \n Input iterator addressing the beginning of the sequence to be converted.  \n  \n ` last`  \n Input iterator addressing the end of the sequence to be converted.  \n  \n `_Iosbase`  \n A format flag which when set indicates that the currency symbol is optional; otherwise, it is required.  \n  \n `_State`  \n Sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.  \n  \n `_Pt`  \n A pointer to where the date information is to be stored.  \n  \n### Return Value  \n An input iterator addressing the first element beyond the input field.  \n  \n### Remarks  \n The virtual protected member function tries to match sequential elements beginning at first in the sequence [ ` first`, ` last`) until it has recognized a complete, nonempty date input field. If successful, it converts this field to its equivalent value as the components **tm::tm_mon**, **tm::tm_day**, and **tm::tm_year**, and stores the results in _ *Pt*-> **tm_mon**, \\_ *Pt*-> **tm_day** and \\_ *Pt*-> **tm_year**, respectively. It returns an iterator designating the first element beyond the date input field. Otherwise, the function sets `_Iosbase`**::failbit** in `_State`. It returns an iterator designating the first element beyond any prefix of a valid date input field. In either case, if the return value equals ` last`, the function sets `ios_base::eofbit` in `_State`.  \n  \n The format for the date input field is locale dependent. For the default locale, the date input field has the form MMM DD, YYYY, where:  \n  \n-   MMM is matched by calling [get_monthname](#time_get__get_monthname), giving the month.  \n  \n-   DD is a sequence of decimal digits whose corresponding numeric value must be in the range [1, 31], giving the day of the month.  \n  \n-   YYYY is matched by calling [get_year](#time_get__get_year), giving the year.  \n  \n The literal spaces and commas must match corresponding elements in the input sequence.  \n  \n### Example  \n  See the example for [get_date](#time_get__get_date), which calls `do_get_date`.  \n  \n##  <a name=\"time_get__do_get_monthname\"></a>  time_get::do_get_monthname  \n A protected virtual member function that is called to parse a string as the name of the month.  \n  \n```  \nvirtual iter_type do_get_monthname(iter_type first,\n    iter_type last,\n    ios_base& _Iosbase,\n    ios_base::iostate& _State,\n    tm* _Pt) const;\n```  \n  \n### Parameters  \n ` first`  \n Input iterator addressing the beginning of the sequence to be converted.  \n  \n ` last`  \n Input iterator addressing the end of the sequence to be converted.  \n  \n `_Iosbase`  \n Unused.  \n  \n `_State`  \n An output parameter that sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.  \n  \n `_Pt`  \n A pointer to where the month information is to be stored.  \n  \n### Return Value  \n An input iterator addressing the first element beyond the input field.  \n  \n### Remarks  \n The virtual protected member function tries to match sequential elements beginning at first in the sequence [ ` first`, ` last`) until it has recognized a complete, nonempty month input field. If successful, it converts this field to its equivalent value as the component **tm::tm_mon**, and stores the result in _ *Pt*-> **tm_mon**. It returns an iterator designating the first element beyond the month input field. Otherwise, the function sets `ios_base::failbit` in \\_ *State*. It returns an iterator designating the first element beyond any prefix of a valid month input field. In either case, if the return value equals ` last`, the function sets `ios_base::eofbit` in \\_ *State*.  \n  \n The month input field is a sequence that matches the longest of a set of locale-specific sequences, such as Jan, January, Feb, February, and so on. The converted value is the number of months since January.  \n  \n### Example  \n  See the example for [get_monthname](#time_get__get_monthname), which calls `do_get_monthname`.  \n  \n##  <a name=\"time_get__do_get_time\"></a>  time_get::do_get_time  \n A protected virtual member function that is called to parse a string as the date produced by the *X* specifier for `strftime`.  \n  \n```  \nvirtual iter_type do_get_time(iter_type first,\n    iter_type last,\n    ios_base& _Iosbase,\n    ios_base::iostate& _State,\n    tm* _Pt) const;\n```  \n  \n### Parameters  \n ` first`  \n Input iterator addressing the beginning of the sequence to be converted.  \n  \n ` last`  \n Input iterator addressing the end of the sequence to be converted.  \n  \n `_Iosbase`  \n Unused.  \n  \n `_State`  \n Sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.  \n  \n `_Pt`  \n A pointer to where the date information is to be stored.  \n  \n### Return Value  \n An input iterator addressing the first element beyond the input field.  \n  \n### Remarks  \n The virtual protected member function tries to match sequential elements beginning at first in the sequence [ ` first`, ` last`) until it has recognized a complete, nonempty time input field. If successful, it converts this field to its equivalent value as the components **tm::tm_hour**, **tm::tm_min**, and **tm::tm_sec**, and stores the results in _ *Pt*-> **tm_hour**, \\_ *Pt*-> **tm_min**, and \\_ *Pt*-> **tm_sec**, respectively. It returns an iterator designating the first element beyond the time input field. Otherwise, the function sets `ios_base::failbit` in \\_ *State*. It returns an iterator designating the first element beyond any prefix of a valid time input field. In either case, if the return value equals ` last`, the function sets `ios_base::eofbit` in \\_ *State*.  \n  \n In this implementation, the time input field has the form HH:MM:SS, where:  \n  \n-   HH is a sequence of decimal digits whose corresponding numeric value must be in the range [0, 24), giving the hour of the day.  \n  \n-   MM is a sequence of decimal digits whose corresponding numeric value must be in the range [0, 60), giving the minutes past the hour.  \n  \n-   SS is a sequence of decimal digits whose corresponding numeric value must be in the range [0, 60), giving the seconds past the minute.  \n  \n The literal colons must match corresponding elements in the input sequence.  \n  \n### Example  \n  See the example for [get_time](#time_get__get_time), which calls `do_get_time`.  \n  \n##  <a name=\"time_get__do_get_weekday\"></a>  time_get::do_get_weekday  \n A protected virtual member function that is called to parse a string as the name of the day of the week.  \n  \n```  \nvirtual iter_type do_get_weekday(iter_type first,\n    iter_type last,\n    ios_base& _Iosbase,\n    ios_base::iostate& _State,\n    tm* _Pt) const;\n```  \n  \n### Parameters  \n ` first`  \n Input iterator addressing the beginning of the sequence to be converted.  \n  \n ` last`  \n Input iterator addressing the end of the sequence to be converted.  \n  \n `_Iosbase`  \n A format flag which when set indicates that the currency symbol is optional; otherwise, it is required.  \n  \n `_State`  \n Sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.  \n  \n `_Pt`  \n A pointer to where the weekday information is to be stored.  \n  \n### Return Value  \n An input iterator addressing the first element beyond the input field.  \n  \n### Remarks  \n The virtual protected member function tries to match sequential elements beginning at ` first` in the sequence [ ` first`, ` last`) until it has recognized a complete, nonempty weekday input field. If successful, it converts this field to its equivalent value as the component **tm::tm_wday**, and stores the result in _ *Pt*-> **tm_wday**. It returns an iterator designating the first element beyond the weekday input field. Otherwise, the function sets `ios_base::failbit` in \\_ *State*. It returns an iterator designating the first element beyond any prefix of a valid weekday input field. In either case, if the return value equals ` last`, the function sets `ios_base::eofbit` in \\_ *State*.  \n  \n The weekday input field is a sequence that matches the longest of a set of locale-specific sequences, such as Sun, Sunday, Mon, Monday, and so on. The converted value is the number of days since Sunday.  \n  \n### Example  \n  See the example for [get_weekday](#time_get__get_weekday), which calls `do_get_weekday`.  \n  \n##  <a name=\"time_get__do_get_year\"></a>  time_get::do_get_year  \n A protected virtual member function that is called to parses a string as the name of the year.  \n  \n```  \nvirtual iter_type do_get_year(iter_type first,\n    iter_type last,\n    ios_base& _Iosbase,\n    ios_base::iostate& _State,\n    tm* _Pt) const;\n```  \n  \n### Parameters  \n ` first`  \n Input iterator addressing the beginning of the sequence to be converted.  \n  \n ` last`  \n Input iterator addressing the end of the sequence to be converted.  \n  \n `_Iosbase`  \n A format flag which when set indicates that the currency symbol is optional; otherwise, it is required.  \n  \n `_State`  \n Sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.  \n  \n `_Pt`  \n A pointer to where the year information is to be stored.  \n  \n### Return Value  \n An input iterator addressing the first element beyond the input field.  \n  \n### Remarks  \n The virtual protected member function tries to match sequential elements beginning at ` first` in the sequence [ ` first`, ` last`) until it has recognized a complete, nonempty year input field. If successful, it converts this field to its equivalent value as the component **tm::tm_year**, and stores the result in _ *Pt*-> **tm_year**. It returns an iterator designating the first element beyond the year input field. Otherwise, the function sets `ios_base::failbit` in \\_ *State*. It returns an iterator designating the first element beyond any prefix of a valid year input field. In either case, if the return value equals ` last`, the function sets `ios_base::eofbit` in \\_ *State*.  \n  \n The year input field is a sequence of decimal digits whose corresponding numeric value must be in the range [1900, 2036). The stored value is this value minus 1900. In this implementation, values in the range [69, 136) represent the range of years [1969, 2036). Values in the range [0, 69) are also permissible, but may represent either the range of years [1900, 1969) or [2000, 2069), depending on the specific translation environment.  \n  \n### Example  \n  See the example for [get_year](#time_get__get_year), which calls `do_get_year`.  \n  \n##  <a name=\"time_get__get\"></a>  time_get::get  \n Reads from a source of character data and converts that data to a time that is stored in a time struct. The first function accepts one conversion specifier and modifier, the second accepts several.  \n  \n```  \niter_type get(\n    iter_type first,   \n    iter_type last,  \n    ios_base& _Iosbase,   \n    ios_base::iostate& _State,   \n    tm* _Pt,  \n    char _Fmt,   \n    char _Mod) const;\n\n \niter_type get(\n    iter_type first,   \n    iter_type last,  \n    ios_base& _Iosbase,   \n    ios_base::iostate& _State,   \n    tm* _Pt,  \n    char_type* _Fmt_first, \n    char_type* _Fmt_last) const;\n```  \n  \n### Parameters  \n ` first`  \n Input iterator that indicates where the sequence to be converted starts.  \n  \n ` last`  \n Input iterator that indicates the end of the sequence to be converted.  \n  \n `_Iosbase`  \n The stream.  \n  \n `_State`  \n The appropriate bitmask elements are set for the stream state to indicate errors.  \n  \n `_Pt`  \n Pointer to the time structure where the time is to be stored.  \n  \n `_Fmt`  \n A conversion specifier character.  \n  \n `_Mod`  \n An optional modifier character.  \n  \n `_Fmt_first`  \n Points to where the format directives start.  \n  \n `_Fmt_last`  \n Points to the end of the format directives.  \n  \n### Return Value  \n Returns an iterator to the first character after the data that was used to assign the time struct *_Pt.  \n  \n### Remarks  \n The first member function returns `do_get` `(`` first``,` ` last``,` `_Iosbase``,` `_State``,` `_Pt``,` `_Fmt``,` `_Mod``)`.  \n  \n The second member function calls `do_get` under the control of the format delimited by `[``_Fmt_first``,``_Fmt_last``)`. It treats the format as a sequence of fields, each of which determines the conversion of zero or more input elements delimited by `[first, last)`. It returns an iterator designating the first unconverted element. There are three kinds of fields:  \n  \n A per cent (%) in the format, followed by an optional modifier `mod` in the set [EOQ#], followed by a conversion specifier `fmt`, replaces `first` with the value returned by `do_get` `(`` first``,` ` last``,` `_Iosbase``,` `_State``,` `_Pt``,` `_Fmt``,` `_Mod``)`. A conversion failure sets `ios_base::failbit` in `state` and returns.  \n  \n A whitespace element in the format skips past zero or more input whitespace elements.  \n  \n Any other element in the format must match the next input element, which is skipped. A match failure sets `ios_base::failbit` in `state` and returns.  \n  \n##  <a name=\"time_get__get_date\"></a>  time_get::get_date  \n Parses a string as the date produced by the *x* specifier for `strftime`.  \n  \n```  \niter_type get_date(iter_type first,\n    iter_type last,\n    ios_base& _Iosbase,\n    ios_base::iostate& _State,\n    tm* _Pt) const;\n```  \n  \n### Parameters  \n ` first`  \n Input iterator addressing the beginning of the sequence to be converted.  \n  \n ` last`  \n Input iterator addressing the end of the sequence to be converted.  \n  \n `_Iosbase`  \n A format flag which when set indicates that the currency symbol is optional; otherwise, it is required.  \n  \n `_State`  \n Sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.  \n  \n `_Pt`  \n A pointer to where the date information is to be stored.  \n  \n### Return Value  \n An input iterator addressing the first element beyond the input field.  \n  \n### Remarks  \n The member function returns [do_get_date](#time_get__do_get_date)( ` first`, ` last`, `_Iosbase`, `_State`, `_Pt`).  \n  \n Note that months are counted from 0 to 11.  \n  \n### Example  \n  \n```cpp  \n// time_get_get_date.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n#include <sstream>  \n#include <time.h>  \nusing namespace std;  \nint main( )  \n{  \n   locale loc;  \n   basic_stringstream< char > pszGetF, pszPutF, pszGetI, pszPutI;  \n   ios_base::iostate st = 0;  \n   struct tm t;  \n   memset(&t, 0, sizeof(struct tm));  \n  \n   pszGetF << \"July 4, 2000\";  \n   pszGetF.imbue( loc );  \n   basic_istream<char>::_Iter i = use_facet <time_get<char> >  \n   (loc).get_date(basic_istream<char>::_Iter(pszGetF.rdbuf( ) ),  \n            basic_istream<char>::_Iter(0), pszGetF, st, &t);  \n  \n   if ( st & ios_base::failbit )  \n      cout << \"time_get(\"<< pszGetF.rdbuf( )->str( )<< \") FAILED on char: \" << *i << endl;  \n   else  \n  \n      cout << \"time_get(\"<< pszGetF.rdbuf( )->str( )<< \") =\"  \n      << \"\\ntm_sec: \" << t.tm_sec  \n      << \"\\ntm_min: \" << t.tm_min  \n      << \"\\ntm_hour: \" << t.tm_hour  \n      << \"\\ntm_mday: \" << t.tm_mday  \n      << \"\\ntm_mon: \" << t.tm_mon  \n      << \"\\ntm_year: \" << t.tm_year  \n      << \"\\ntm_wday: \" << t.tm_wday  \n      << \"\\ntm_yday: \" << t.tm_yday  \n      << \"\\ntm_isdst: \" << t.tm_isdst  \n      << endl;  \n}  \n```  \n  \n```Output  \ntime_get(July 4, 2000) =  \ntm_sec: 0  \ntm_min: 0  \ntm_hour: 0  \ntm_mday: 4  \ntm_mon: 6  \ntm_year: 100  \ntm_wday: 0  \ntm_yday: 0  \ntm_isdst: 0  \n```  \n  \n##  <a name=\"time_get__get_monthname\"></a>  time_get::get_monthname  \n Parses a string as the name of the month.  \n  \n```  \niter_type get_monthname(iter_type first,\n    iter_type last,\n    ios_base& _Iosbase,\n    ios_base::iostate& _State,\n    tm* _Pt) const;\n```  \n  \n### Parameters  \n ` first`  \n Input iterator addressing the beginning of the sequence to be converted.  \n  \n ` last`  \n Input iterator addressing the end of the sequence to be converted.  \n  \n `_Iosbase`  \n Unused.  \n  \n `_State`  \n An output parameter that sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.  \n  \n `_Pt`  \n A pointer to where the month information is to be stored.  \n  \n### Return Value  \n An input iterator addressing the first element beyond the input field.  \n  \n### Remarks  \n The member function returns [do_get_monthname](#time_get__do_get_monthname)( ` first`, ` last`, `_Iosbase`, `_State`, `_Pt`).  \n  \n### Example  \n  \n```cpp  \n// time_get_get_monthname.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n#include <sstream>  \n#include <time.h>  \nusing namespace std;  \nint main( )  \n{  \n   locale loc ( \"French\" );  \n   basic_stringstream<char> pszGetF, pszPutF, pszGetI, pszPutI;  \n   ios_base::iostate st = 0;  \n   struct tm t;  \n   memset( &t, 0, sizeof( struct tm ) );  \n  \n   pszGetF << \"juillet\";  \n   pszGetF.imbue( loc );  \n   basic_istream<char>::_Iter i = use_facet <time_get <char> >  \n   (loc).get_monthname(basic_istream<char>::_Iter(pszGetF.rdbuf( )),  \n              basic_istream<char>::_Iter(0), pszGetF, st, &t);  \n  \n   if (st & ios_base::failbit)  \n      cout << \"time_get(\"<< pszGetF.rdbuf( )->str( )<< \") FAILED on char: \" << *i << endl;  \n   else  \n  \n      cout << \"time_get(\"<< pszGetF.rdbuf( )->str( )<< \") =\"  \n      << \"\\ntm_sec: \" << t.tm_sec  \n      << \"\\ntm_min: \" << t.tm_min  \n      << \"\\ntm_hour: \" << t.tm_hour  \n      << \"\\ntm_mday: \" << t.tm_mday  \n      << \"\\ntm_mon: \" << t.tm_mon  \n      << \"\\ntm_year: \" << t.tm_year  \n      << \"\\ntm_wday: \" << t.tm_wday  \n      << \"\\ntm_yday: \" << t.tm_yday  \n      << \"\\ntm_isdst: \" << t.tm_isdst  \n      << endl;  \n}  \n```  \n  \n```Output  \ntime_get(juillet) =  \ntm_sec: 0  \ntm_min: 0  \ntm_hour: 0  \ntm_mday: 0  \ntm_mon: 6  \ntm_year: 0  \ntm_wday: 0  \ntm_yday: 0  \ntm_isdst: 0  \n```  \n  \n##  <a name=\"time_get__get_time\"></a>  time_get::get_time  \n Parses a string as the date produced by the *X* specifier for `strftime`.  \n  \n```  \niter_type get_time(iter_type first,\n    iter_type last,\n    ios_base& _Iosbase,\n    ios_base::iostate& _State,\n    tm* _Pt) const;\n```  \n  \n### Parameters  \n ` first`  \n Input iterator addressing the beginning of the sequence to be converted.  \n  \n ` last`  \n Input iterator addressing the end of the sequence to be converted.  \n  \n `_Iosbase`  \n Unused.  \n  \n `_State`  \n Sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.  \n  \n `_Pt`  \n A pointer to where the date information is to be stored.  \n  \n### Return Value  \n An input iterator addressing the first element beyond the input field.  \n  \n### Remarks  \n The member function returns [do_get_time](#time_get__do_get_time)( ` first`, ` last`, `_Iosbase`, `_State`, `_Pt`).  \n  \n### Example  \n  \n```cpp  \n// time_get_get_time.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n#include <sstream>  \n#include <time.h>  \nusing namespace std;  \nint main( )  \n{  \n   locale loc;  \n   basic_stringstream<char> pszGetF, pszPutF, pszGetI, pszPutI;  \n   ios_base::iostate st = 0;  \n   struct tm t;  \n   memset( &t, 0, sizeof( struct tm ) );  \n  \n   pszGetF << \"11:13:20\";  \n   pszGetF.imbue( loc );  \n   basic_istream<char>::_Iter i = use_facet   \n      <time_get <char> >  \n      (loc).get_time(basic_istream<char>::_Iter(pszGetF.rdbuf( )),  \n               basic_istream<char>::_Iter(0), pszGetF, st, &t);  \n  \n   if (st & ios_base::failbit)  \n      cout << \"time_get::get_time(\"<< pszGetF.rdbuf( )->str( )<< \") FAILED on char: \" << *i << endl;  \n   else  \n  \n      cout << \"time_get::get_time(\"<< pszGetF.rdbuf( )->str( )<< \") =\"  \n      << \"\\ntm_sec: \" << t.tm_sec  \n      << \"\\ntm_min: \" << t.tm_min  \n      << \"\\ntm_hour: \" << t.tm_hour  \n      << endl;  \n}  \n```  \n  \n```Output  \ntime_get::get_time(11:13:20) =  \ntm_sec: 20  \ntm_min: 13  \ntm_hour: 11  \n```  \n  \n##  <a name=\"time_get__get_weekday\"></a>  time_get::get_weekday  \n Parses a string as the name of the day of the week.  \n  \n```  \niter_type get_weekday(iter_type first,\n    iter_type last,\n    ios_base& _Iosbase,\n    ios_base::iostate& _State,\n    tm* _Pt) const;\n```  \n  \n### Parameters  \n ` first`  \n Input iterator addressing the beginning of the sequence to be converted.  \n  \n ` last`  \n Input iterator addressing the end of the sequence to be converted.  \n  \n `_Iosbase`  \n A format flag which when set indicates that the currency symbol is optional; otherwise, it is required.  \n  \n `_State`  \n Sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.  \n  \n `_Pt`  \n A pointer to where the weekday information is to be stored.  \n  \n### Return Value  \n An input iterator addressing the first element beyond the input field.  \n  \n### Remarks  \n The member function returns [do_get_weekday](#time_get__do_get_weekday)( ` first`, ` last`, `_Iosbase`, `_State`, `_Pt`).  \n  \n### Example  \n  \n```cpp  \n// time_get_get_weekday.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n#include <sstream>  \n#include <time.h>  \nusing namespace std;  \nint main( )  \n{  \n   locale loc ( \"French\" );  \n   basic_stringstream< char > pszGetF, pszPutF, pszGetI, pszPutI;  \n   ios_base::iostate st = 0;  \n   struct tm t;  \n   memset( &t, 0, sizeof( struct tm ) );  \n  \n   pszGetF << \"mercredi\";  \n   pszGetF.imbue(loc);  \n   basic_istream<char>::_Iter i = use_facet   \n      <time_get<char> >  \n      (loc).get_weekday(basic_istream<char>::_Iter(pszGetF.rdbuf( )),     \n               basic_istream<char>::_Iter(0), pszGetF, st, &t);  \n  \n   if (st & ios_base::failbit)  \n      cout << \"time_get::get_time(\"<< pszGetF.rdbuf( )->str( )<< \") FAILED on char: \" << *i << endl;  \n   else  \n  \n      cout << \"time_get::get_time(\"<< pszGetF.rdbuf( )->str( )<< \") =\"  \n      << \"\\ntm_wday: \" << t.tm_wday  \n      << endl;  \n}  \n```  \n  \n```Output  \ntime_get::get_time(mercredi) =  \ntm_wday: 3  \n```  \n  \n##  <a name=\"time_get__get_year\"></a>  time_get::get_year  \n Parses a string as the name of the year.  \n  \n```  \niter_type get_year(iter_type first,\n    iter_type last,\n    ios_base& _Iosbase,\n    ios_base::iostate& _State,\n    tm* _Pt) const;\n```  \n  \n### Parameters  \n ` first`  \n Input iterator addressing the beginning of the sequence to be converted.  \n  \n ` last`  \n Input iterator addressing the end of the sequence to be converted.  \n  \n `_Iosbase`  \n A format flag which when set indicates that the currency symbol is optional; otherwise, it is required.  \n  \n `_State`  \n Sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.  \n  \n `_Pt`  \n A pointer to where the year information is to be stored.  \n  \n### Return Value  \n An input iterator addressing the first element beyond the input field.  \n  \n### Remarks  \n The member function returns [do_get_year](#time_get__do_get_year)( ` first`, ` last`, `_Iosbase`, `_State`, `_Pt`).  \n  \n### Example  \n  \n```cpp  \n// time_get_get_year.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n#include <sstream>  \n#include <time.h>  \nusing namespace std;  \nint main( )  \n{  \n   locale loc;  \n   basic_stringstream<char> pszGetF, pszPutF, pszGetI, pszPutI;  \n   ios_base::iostate st = 0;  \n   struct tm t;  \n   memset( &t, 0, sizeof( struct tm ) );  \n  \n   pszGetF << \"1928\";  \n  \n   pszGetF.imbue( loc );  \n   basic_istream<char>::_Iter i = use_facet   \n      <time_get<char> >  \n      (loc).get_year(basic_istream<char>::_Iter(pszGetF.rdbuf( )),     \n               basic_istream<char>::_Iter(0), pszGetF, st, &t);  \n  \n   if (st & ios_base::failbit)  \n      cout << \"time_get::get_year(\"<< pszGetF.rdbuf( )->str( )<< \") FAILED on char: \" << *i << endl;  \n   else  \n  \n      cout << \"time_get::get_year(\"<< pszGetF.rdbuf( )->str( )<< \") =\"  \n      << \"\\ntm_year: \" << t.tm_year  \n      << endl;  \n}  \n```  \n  \n```Output  \ntime_get::get_year(1928) =  \ntm_year: 28  \n```  \n  \n##  <a name=\"time_get__iter_type\"></a>  time_get::iter_type  \n A type that describes an input iterator.  \n  \n```  \ntypedef InputIterator iter_type;  \n```  \n  \n### Remarks  \n The type is a synonym for the template parameter **InputIterator**.  \n  \n##  <a name=\"time_get__time_get\"></a>  time_get::time_get  \n The constructor for objects of type `time_get`.  \n  \n```  \nexplicit time_get(size_t _Refs = 0);\n```  \n  \n### Parameters  \n `_Refs`  \n Integer value used to specify the type of memory management for the object.  \n  \n### Remarks  \n The possible values for the `_Refs` parameter and their significance are:  \n  \n-   0: The lifetime of the object is managed by the locales that contain it.  \n  \n-   1: The lifetime of the object must be manually managed.  \n  \n-   \\> 0: These values are not defined.  \n  \n No direct examples are possible, because the destructor is protected.  \n  \n The constructor initializes its base object with **locale::**[facet](../standard-library/locale-class.md#facet_class)( `_Refs`).  \n  \n## See Also  \n [\\<locale>](../standard-library/locale.md)   \n [time_base Class](../standard-library/time-base-class.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)\n\n"}