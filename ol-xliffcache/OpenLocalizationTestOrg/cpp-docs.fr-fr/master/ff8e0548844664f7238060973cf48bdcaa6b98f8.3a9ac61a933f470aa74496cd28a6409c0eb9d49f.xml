{"nodes":[{"pos":[12,45],"content":"Inline Functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Inline Functions | Microsoft Docs","pos":[0,33]}]},{"content":"Inline Functions","pos":[653,669]},{"content":"Microsoft Specific","pos":[672,690]},{"content":"The <ph id=\"ph1\">`__inline`</ph> keyword tells the compiler to substitute the code within the function definition for every instance of a function call.","pos":[699,833],"source":"The `__inline` keyword tells the compiler to substitute the code within the function definition for every instance of a function call."},{"content":"However, substitution occurs only at the compiler's discretion.","pos":[834,897]},{"content":"For example, the compiler does not inline a function if its address is taken or if it is too large to inline.","pos":[898,1007]},{"content":"For a function to be considered as a candidate for inlining, it must use the new-style function definition.","pos":[1014,1121]},{"content":"Use this form to specify an inline function:","pos":[1128,1172]},{"pos":[1190,1220],"content":"<bpt id=\"p1\">*</bpt>type<ept id=\"p1\">*</ept>opt<bpt id=\"p2\">*</bpt>function-definition<ept id=\"p2\">*</ept>","source":"*type*opt*function-definition*"},{"content":"The use of inline functions generates faster code and can sometimes generate smaller code than the equivalent function call generates for the following reasons:","pos":[1230,1390]},{"content":"It saves the time required to execute function calls.","pos":[1400,1453]},{"content":"Small inline functions, perhaps three lines or less, create less code than the equivalent function call because the compiler doesn't generate code to handle arguments and a return value.","pos":[1463,1649]},{"content":"Functions generated inline are subject to code optimizations not available to normal functions because the compiler does not perform interprocedural optimizations.","pos":[1659,1822]},{"content":"Functions using <ph id=\"ph1\">`__inline`</ph> should not be confused with inline assembler code.","pos":[1829,1906],"source":"Functions using `__inline` should not be confused with inline assembler code."},{"content":"See <bpt id=\"p1\">[</bpt>Inline Assembler<ept id=\"p1\">](../c-language/inline-assembler-c.md)</ept> for more information.","pos":[1907,1988],"source":" See [Inline Assembler](../c-language/inline-assembler-c.md) for more information."},{"content":"END Microsoft Specific","pos":[1997,2019]},{"content":"See Also","pos":[2030,2038]},{"content":"inline, __inline, <ph id=\"ph1\">\\_</ph>_forceinline","pos":[2043,2075],"source":"inline, __inline, \\__forceinline"}],"content":"---\ntitle: \"Inline Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"fast code\"\n  - \"inline functions, __inline keyword\"\n  - \"functions [C++], inline functions\"\nms.assetid: 00f4b2ff-8ad0-4165-9f4c-2ef157d03f31\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Inline Functions\n**Microsoft Specific**  \n  \n The `__inline` keyword tells the compiler to substitute the code within the function definition for every instance of a function call. However, substitution occurs only at the compiler's discretion. For example, the compiler does not inline a function if its address is taken or if it is too large to inline.  \n  \n For a function to be considered as a candidate for inlining, it must use the new-style function definition.  \n  \n Use this form to specify an inline function:  \n  \n `__inline` *type*opt*function-definition*`;`  \n  \n The use of inline functions generates faster code and can sometimes generate smaller code than the equivalent function call generates for the following reasons:  \n  \n-   It saves the time required to execute function calls.  \n  \n-   Small inline functions, perhaps three lines or less, create less code than the equivalent function call because the compiler doesn't generate code to handle arguments and a return value.  \n  \n-   Functions generated inline are subject to code optimizations not available to normal functions because the compiler does not perform interprocedural optimizations.  \n  \n Functions using `__inline` should not be confused with inline assembler code. See [Inline Assembler](../c-language/inline-assembler-c.md) for more information.  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [inline, __inline, \\__forceinline](../cpp/inline-functions-cpp.md)\n\n"}