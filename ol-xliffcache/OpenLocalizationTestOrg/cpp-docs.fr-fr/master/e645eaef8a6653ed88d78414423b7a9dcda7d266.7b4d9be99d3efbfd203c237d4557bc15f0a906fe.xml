{"nodes":[{"pos":[12,60],"content":"hash_map::equal_range (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"hash_map::equal_range (STL-CLR) | Microsoft Docs","pos":[0,48]}]},{"content":"hash_map::equal_range (STL/CLR)","pos":[650,681]},{"content":"Finds range that matches a specified key.","pos":[682,723]},{"content":"Syntax","pos":[732,738]},{"content":"Parameters","pos":[826,836]},{"content":"key","pos":[840,843]},{"content":"Key value to search for.","pos":[847,871]},{"content":"Remarks","pos":[880,887]},{"content":"The member function returns a pair of iterators <ph id=\"ph1\">`cliext::pair&lt;iterator, iterator&gt;(`</ph> <bpt id=\"p1\">[</bpt>hash_map::lower_bound (STL/CLR)<ept id=\"p1\">](../dotnet/hash-map-lower-bound-stl-clr.md)</ept><ph id=\"ph2\">`(``key``),`</ph> <bpt id=\"p2\">[</bpt>hash_map::upper_bound (STL/CLR)<ept id=\"p2\">](../dotnet/hash-map-upper-bound-stl-clr.md)</ept><ph id=\"ph3\">`(``key``))`</ph>.","pos":[891,1153],"source":"The member function returns a pair of iterators `cliext::pair<iterator, iterator>(` [hash_map::lower_bound (STL/CLR)](../dotnet/hash-map-lower-bound-stl-clr.md)`(``key``),` [hash_map::upper_bound (STL/CLR)](../dotnet/hash-map-upper-bound-stl-clr.md)`(``key``))`."},{"content":"You use it to determine the range of elements currently in the controlled sequence that match a specified key.","pos":[1154,1264]},{"content":"Example","pos":[1273,1280]},{"content":"Requirements","pos":[2501,2513]},{"pos":[2517,2547],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/hash_map&gt;","source":"**Header:** \\<cliext/hash_map>"},{"pos":[2554,2575],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2584,2592]},{"content":"hash_map (STL/CLR)","pos":[2597,2615]},{"content":"hash_map::count (STL/CLR)","pos":[2653,2678]},{"content":"hash_map::find (STL/CLR)","pos":[2722,2746]},{"content":"hash_map::lower_bound (STL/CLR)","pos":[2789,2820]},{"content":"hash_map::upper_bound (STL/CLR)","pos":[2870,2901]}],"content":"---\ntitle: \"hash_map::equal_range (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::hash_map::equal_range\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"equal_range member [STL/CLR]\"\nms.assetid: 9b9a18b8-42fd-4d17-91bd-df85e583cf61\ncaps.latest.revision: 18\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# hash_map::equal_range (STL/CLR)\nFinds range that matches a specified key.  \n  \n## Syntax  \n  \n```  \ncliext::pair<iterator, iterator> equal_range(key_type key);  \n```  \n  \n#### Parameters  \n key  \n Key value to search for.  \n  \n## Remarks  \n The member function returns a pair of iterators `cliext::pair<iterator, iterator>(` [hash_map::lower_bound (STL/CLR)](../dotnet/hash-map-lower-bound-stl-clr.md)`(``key``),` [hash_map::upper_bound (STL/CLR)](../dotnet/hash-map-upper-bound-stl-clr.md)`(``key``))`. You use it to determine the range of elements currently in the controlled sequence that match a specified key.  \n  \n## Example  \n  \n```  \n// cliext_hash_map_equal_range.cpp   \n// compile with: /clr   \n#include <cliext/hash_map>   \n  \ntypedef cliext::hash_map<wchar_t, int> Myhash_map;   \ntypedef Myhash_map::pair_iter_iter Pairii;   \nint main()   \n    {   \n    Myhash_map c1;   \n    c1.insert(Myhash_map::make_value(L'a', 1));   \n    c1.insert(Myhash_map::make_value(L'b', 2));   \n    c1.insert(Myhash_map::make_value(L'c', 3));   \n  \n// display contents \" [a 1] [b 2] [c 3]\"   \n    for each (Myhash_map::value_type elem in c1)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n// display results of failed search   \n    Pairii pair1 = c1.equal_range(L'x');   \n    System::Console::WriteLine(\"equal_range(L'x') empty = {0}\",   \n        pair1.first == pair1.second);   \n  \n// display results of successful search   \n    pair1 = c1.equal_range(L'b');   \n    for (; pair1.first != pair1.second; ++pair1.first)   \n        System::Console::Write(\" [{0} {1}]\",   \n            pair1.first->first, pair1.first->second);   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n [a 1] [b 2] [c 3]  \nequal_range(L'x') empty = True  \n [b 2]  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/hash_map>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [hash_map (STL/CLR)](../dotnet/hash-map-stl-clr.md)   \n [hash_map::count (STL/CLR)](../dotnet/hash-map-count-stl-clr.md)   \n [hash_map::find (STL/CLR)](../dotnet/hash-map-find-stl-clr.md)   \n [hash_map::lower_bound (STL/CLR)](../dotnet/hash-map-lower-bound-stl-clr.md)   \n [hash_map::upper_bound (STL/CLR)](../dotnet/hash-map-upper-bound-stl-clr.md)"}