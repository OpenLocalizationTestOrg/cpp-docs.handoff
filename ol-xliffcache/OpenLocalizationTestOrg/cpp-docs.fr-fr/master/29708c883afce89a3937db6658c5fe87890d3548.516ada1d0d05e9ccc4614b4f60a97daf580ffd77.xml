{"nodes":[{"pos":[12,54],"content":"CMFCColorMenuButton Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMFCColorMenuButton Class | Microsoft Docs","pos":[0,42]}]},{"content":"CMFCColorMenuButton Class","pos":[631,656]},{"pos":[657,771],"content":"The <ph id=\"ph1\">`CMFCColorMenuButton`</ph> class supports a menu command or a toolbar button that starts a color picker dialog box.","source":"The `CMFCColorMenuButton` class supports a menu command or a toolbar button that starts a color picker dialog box."},{"content":"Syntax","pos":[780,786]},{"content":"Members","pos":[869,876]},{"content":"Public Constructors","pos":[886,905]},{"content":"Name","pos":[912,916]},{"content":"Description","pos":[917,928]},{"content":"CMFCColorMenuButton::CMFCColorMenuButton","pos":[967,1007]},{"pos":[1052,1094],"content":"Constructs a <ph id=\"ph1\">`CMFCColorMenuButton`</ph> object.","source":"Constructs a `CMFCColorMenuButton` object."},{"content":"Public Methods","pos":[1105,1119]},{"content":"Name","pos":[1126,1130]},{"content":"Description","pos":[1131,1142]},{"content":"CMFCColorMenuButton::EnableAutomaticButton","pos":[1181,1223]},{"content":"Enables and disables an \"automatic\" button that is positioned above the regular color buttons.","pos":[1270,1364]},{"content":"(The standard system automatic button is labeled <bpt id=\"p1\">**</bpt>Automatic<ept id=\"p1\">**</ept>.)","pos":[1365,1429],"source":" (The standard system automatic button is labeled **Automatic**.)"},{"content":"CMFCColorMenuButton::EnableDocumentColors","pos":[1435,1476]},{"content":"Enables the display of document-specific colors instead of system colors.","pos":[1522,1595]},{"content":"CMFCColorMenuButton::EnableOtherButton","pos":[1601,1639]},{"content":"Enables and disables an \"other\" button that is positioned below the regular color buttons.","pos":[1682,1772]},{"content":"(The standard system \"other\" button is labeled <bpt id=\"p1\">**</bpt>More Colors…<ept id=\"p1\">**</ept>.)","pos":[1773,1838],"source":" (The standard system \"other\" button is labeled **More Colors…**.)"},{"content":"CMFCColorMenuButton::EnableTearOff","pos":[1844,1878]},{"content":"Enables the ability to tear off a color pane.","pos":[1917,1962]},{"content":"CMFCColorMenuButton::GetAutomaticColor","pos":[1968,2006]},{"content":"Retrieves the current automatic color.","pos":[2049,2087]},{"content":"CMFCColorMenuButton::GetColor","pos":[2093,2122]},{"content":"Retrieves the current button's color.","pos":[2156,2193]},{"content":"CMFCColorMenuButton::GetColorByCmdID","pos":[2199,2235]},{"content":"Retrieves the color that corresponds to a specified command ID.","pos":[2276,2339]},{"content":"CMFCColorMenuButton::OnChangeParentWnd","pos":[2345,2383]},{"content":"Called by the framework when the parent window changes.","pos":[2426,2481]},{"content":"CMFCColorMenuButton::OpenColorDialog","pos":[2487,2523]},{"content":"Opens a color selection dialog box.","pos":[2564,2599]},{"content":"CMFCColorMenuButton::SetColor","pos":[2605,2634]},{"content":"Sets the color of the current color button.","pos":[2668,2711]},{"content":"CMFCColorMenuButton::SetColorByCmdID","pos":[2717,2753]},{"content":"Sets the color of the specified color menu button.","pos":[2794,2844]},{"content":"CMFCColorMenuButton::SetColorName","pos":[2850,2883]},{"content":"Sets a new name for the specified color.","pos":[2921,2961]},{"content":"CMFCColorMenuButton::SetColumnsNumber","pos":[2967,3004]},{"pos":[3046,3119],"content":"Sets the number of columns that are displayed by a <ph id=\"ph1\">`CMFCColorBar`</ph> object.","source":"Sets the number of columns that are displayed by a `CMFCColorBar` object."},{"content":"Protected Methods","pos":[3130,3147]},{"content":"Name","pos":[3154,3158]},{"content":"Description","pos":[3159,3170]},{"content":"CMFCColorMenuButton::CopyFrom","pos":[3209,3238]},{"content":"Copies another toolbar button to the current button.","pos":[3272,3324]},{"content":"CMFCColorMenuButton::CreatePopupMenu","pos":[3330,3366]},{"content":"Creates a color picker dialog box.","pos":[3407,3441]},{"content":"CMFCColorMenuButton::IsEmptyMenuAllowed","pos":[3447,3486]},{"content":"Indicates whether empty menus are supported.","pos":[3530,3574]},{"content":"CMFCColorMenuButton::OnDraw","pos":[3580,3607]},{"content":"Called by the framework to display an image on a button.","pos":[3639,3695]},{"content":"CMFCColorMenuButton::OnDrawOnCustomizeList","pos":[3701,3743]},{"pos":[3790,3915],"content":"Called by the framework before a <ph id=\"ph1\">`CMFCColorMenuButton`</ph> object is displayed in the list of a toolbar customization dialog box.","source":"Called by the framework before a `CMFCColorMenuButton` object is displayed in the list of a toolbar customization dialog box."},{"content":"Remarks","pos":[3925,3932]},{"content":"To replace the original menu command or toolbar button with a <ph id=\"ph1\">`CMFCColorMenuButton`</ph> object, create the <ph id=\"ph2\">`CMFCColorMenuButton`</ph> object, set any appropriate <bpt id=\"p1\">[</bpt>CMFCColorBar Class<ept id=\"p1\">](../../mfc/reference/cmfccolorbar-class.md)</ept> styles, and then call the <ph id=\"ph3\">`ReplaceButton`</ph> method of the <bpt id=\"p2\">[</bpt>CMFCToolBar Class<ept id=\"p2\">](../../mfc/reference/cmfctoolbar-class.md)</ept> class.","pos":[3936,4277],"source":"To replace the original menu command or toolbar button with a `CMFCColorMenuButton` object, create the `CMFCColorMenuButton` object, set any appropriate [CMFCColorBar Class](../../mfc/reference/cmfccolorbar-class.md) styles, and then call the `ReplaceButton` method of the [CMFCToolBar Class](../../mfc/reference/cmfctoolbar-class.md) class."},{"content":"If you customize a toolbar, call the <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog::ReplaceButton<ept id=\"p1\">](../../mfc/reference/cmfctoolbarscustomizedialog-class.md#cmfctoolbarscustomizedialog__replacebutton)</ept> method.","pos":[4278,4468],"source":" If you customize a toolbar, call the [CMFCToolBarsCustomizeDialog::ReplaceButton](../../mfc/reference/cmfctoolbarscustomizedialog-class.md#cmfctoolbarscustomizedialog__replacebutton) method."},{"content":"The color picker dialog box is created during the processing of the <bpt id=\"p1\">[</bpt>CMFCColorMenuButton::CreatePopupMenu<ept id=\"p1\">](#cmfccolormenubutton__createpopupmenu)</ept> event handler.","pos":[4475,4635],"source":"The color picker dialog box is created during the processing of the [CMFCColorMenuButton::CreatePopupMenu](#cmfccolormenubutton__createpopupmenu) event handler."},{"content":"The event handler notifies the parent frame with a <ph id=\"ph1\">`WM_COMMAND`</ph> message.","pos":[4636,4708],"source":" The event handler notifies the parent frame with a `WM_COMMAND` message."},{"content":"The <ph id=\"ph1\">`CMFCColorMenuButton`</ph> object sends the control ID that is assigned to the original menu command or toolbar button.","pos":[4709,4827],"source":" The `CMFCColorMenuButton` object sends the control ID that is assigned to the original menu command or toolbar button."},{"content":"Example","pos":[4836,4843]},{"content":"The following example demonstrates how to create and configure a color menu button by using various methods in the <ph id=\"ph1\">`CMFCColorMenuButton`</ph> class.","pos":[4847,4990],"source":"The following example demonstrates how to create and configure a color menu button by using various methods in the `CMFCColorMenuButton` class."},{"content":"In the example, a <ph id=\"ph1\">`CPalette`</ph> object is first created and then used to construct an object of the <ph id=\"ph2\">`CMFCColorMenuButton`</ph> class.","pos":[4991,5116],"source":" In the example, a `CPalette` object is first created and then used to construct an object of the `CMFCColorMenuButton` class."},{"content":"The <ph id=\"ph1\">`CMFCColorMenuButton`</ph> object is then configured by enabling its automatic and other buttons, and setting its color and the number of columns.","pos":[5117,5262],"source":" The `CMFCColorMenuButton` object is then configured by enabling its automatic and other buttons, and setting its color and the number of columns."},{"content":"This code is part of the <bpt id=\"p1\">[</bpt>Word Pad sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[5263,5335],"source":" This code is part of the [Word Pad sample](../../visual-cpp-samples.md)."},{"content":"NVC_MFC_WordPad#5","pos":[5353,5370]},{"content":"NVC_MFC_WordPad#6","pos":[5453,5470]},{"content":"Inheritance Hierarchy","pos":[5550,5571]},{"content":"CObject","pos":[5576,5583]},{"content":"CMFCToolBarButton","pos":[5630,5647]},{"content":"CMFCToolBarMenuButton","pos":[5704,5725]},{"content":"CMFCColorMenuButton","pos":[5786,5805]},{"content":"Requirements","pos":[5865,5877]},{"pos":[5881,5913],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxcolormenubutton.h","source":"**Header:** afxcolormenubutton.h"},{"pos":[5980,6020],"content":"CMFCColorMenuButton::CMFCColorMenuButton"},{"pos":[6024,6066],"content":"Constructs a <ph id=\"ph1\">`CMFCColorMenuButton`</ph> object.","source":"Constructs a `CMFCColorMenuButton` object."},{"content":"Parameters","pos":[6212,6222]},{"content":"[in]","pos":[6226,6230]},{"content":"A button command ID.","pos":[6244,6264]},{"content":"[in]","pos":[6271,6275]},{"content":"The button text.","pos":[6290,6306]},{"content":"[in]","pos":[6313,6317]},{"content":"A pointer to the button's color palette.","pos":[6332,6372]},{"content":"Return Value","pos":[6382,6394]},{"content":"Remarks","pos":[6404,6411]},{"content":"The first constructor is the default constructor.","pos":[6415,6464]},{"content":"The object's current color and automatic color are initialized to black (RGB(0, 0, 0)).","pos":[6465,6552]},{"content":"The second constructor initializes the button to the color that corresponds to the specified command ID.","pos":[6559,6663]},{"pos":[6719,6748],"content":"CMFCColorMenuButton::CopyFrom"},{"pos":[6752,6871],"content":"Copies one <bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbarmenubutton-class.md)</ept>-derived object to another.","source":"Copies one [CMFCToolBarMenuButton Class](../../mfc/reference/cmfctoolbarmenubutton-class.md)-derived object to another."},{"content":"Parameters","pos":[6949,6959]},{"content":"[in]","pos":[6963,6967]},{"content":"Source button to copy.","pos":[6977,6999]},{"content":"Remarks","pos":[7009,7016]},{"pos":[7020,7112],"content":"Override this method to copy objects that are derived from the <ph id=\"ph1\">`CMFCColorMenuButton`</ph> object.","source":"Override this method to copy objects that are derived from the `CMFCColorMenuButton` object."},{"pos":[7175,7211],"content":"CMFCColorMenuButton::CreatePopupMenu"},{"content":"Creates a color picker dialog box.","pos":[7215,7249]},{"content":"Return Value","pos":[7316,7328]},{"content":"An object that represents a color picker dialog box.","pos":[7332,7384]},{"content":"Remarks","pos":[7394,7401]},{"content":"This method is called by the framework when the user presses a color menu button.","pos":[7405,7486]},{"pos":[7555,7597],"content":"CMFCColorMenuButton::EnableAutomaticButton"},{"content":"Enables and disables an \"automatic\" button that is positioned above the regular color buttons.","pos":[7601,7695]},{"content":"(The standard system automatic button is labeled <bpt id=\"p1\">**</bpt>Automatic<ept id=\"p1\">**</ept>.)","pos":[7696,7760],"source":" (The standard system automatic button is labeled **Automatic**.)"},{"content":"Parameters","pos":[7893,7903]},{"content":"[in]","pos":[7907,7911]},{"content":"Specifies the button text that is displayed when the button becomes automatic.","pos":[7927,8005]},{"content":"[in]","pos":[8012,8016]},{"content":"Specifies a new automatic color.","pos":[8037,8069]},{"content":"[in]","pos":[8076,8080]},{"content":"Specifies whether the button is automatic or not.","pos":[8094,8143]},{"content":"Remarks","pos":[8153,8160]},{"content":"The automatic button applies the current default color.","pos":[8164,8219]},{"pos":[8287,8328],"content":"CMFCColorMenuButton::EnableDocumentColors"},{"content":"Enables the display of document-specific colors instead of system colors.","pos":[8332,8405]},{"content":"Parameters","pos":[8506,8516]},{"content":"[in]","pos":[8520,8524]},{"content":"Specifies the button text.","pos":[8540,8566]},{"content":"[in]","pos":[8573,8577]},{"content":"to display document-specific colors or <ph id=\"ph1\">`FALSE`</ph> to display system colors.","pos":[8598,8670],"source":" to display document-specific colors or `FALSE` to display system colors."},{"content":"Remarks","pos":[8680,8687]},{"content":"Use this method to display the current document colors or the system palette colors when the user clicks a color menu button.","pos":[8691,8816]},{"pos":[8881,8919],"content":"CMFCColorMenuButton::EnableOtherButton"},{"content":"Enables and disables an \"other\" button that is positioned below the regular color buttons.","pos":[8923,9013]},{"content":"(The standard system \"other\" button is labeled <bpt id=\"p1\">**</bpt>More Colors…<ept id=\"p1\">**</ept>.)","pos":[9014,9079],"source":" (The standard system \"other\" button is labeled **More Colors…**.)"},{"content":"Parameters","pos":[9207,9217]},{"content":"[in]","pos":[9221,9225]},{"content":"Specifies the button text.","pos":[9241,9267]},{"content":"[in]","pos":[9274,9278]},{"content":"Specify <ph id=\"ph1\">`TRUE`</ph> to display the <ph id=\"ph2\">`CMFCColorDialog`</ph> dialog box, or <ph id=\"ph3\">`FALSE`</ph> to display the standard system color dialog box.","pos":[9297,9416],"source":" Specify `TRUE` to display the `CMFCColorDialog` dialog box, or `FALSE` to display the standard system color dialog box."},{"content":"[in]","pos":[9423,9427]},{"content":"Specify <ph id=\"ph1\">`TRUE`</ph> to display the \"other\" button; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[9441,9506],"source":" Specify `TRUE` to display the \"other\" button; otherwise, `FALSE`."},{"content":"The default is <ph id=\"ph1\">`TRUE`</ph>.","pos":[9507,9529],"source":" The default is `TRUE`."},{"content":"Remarks","pos":[9539,9546]},{"pos":[9607,9641],"content":"CMFCColorMenuButton::EnableTearOff"},{"content":"Enables the ability to tear off a color pane.","pos":[9645,9690]},{"content":"Parameters","pos":[9810,9820]},{"content":"[in]","pos":[9824,9828]},{"content":"Specifies the ID for the tear-off pane.","pos":[9839,9878]},{"content":"[in]","pos":[9885,9889]},{"content":"Specifies the number of columns in the vertically docked color pane while in tear-off state.","pos":[9912,10004]},{"content":"[in]","pos":[10011,10015]},{"content":"Specifies the number of rows for the horizontally docked color pane while in tear-off state.","pos":[10035,10127]},{"content":"Remarks","pos":[10137,10144]},{"pos":[10148,10279],"content":"Call this method to enable the \"tear-off\" feature for the color pane that pops up when the <ph id=\"ph1\">`CMFCColorMenuButton`</ph> button is pressed.","source":"Call this method to enable the \"tear-off\" feature for the color pane that pops up when the `CMFCColorMenuButton` button is pressed."},{"pos":[10344,10382],"content":"CMFCColorMenuButton::GetAutomaticColor"},{"content":"Retrieves the current automatic color.","pos":[10386,10424]},{"content":"Return Value","pos":[10488,10500]},{"content":"An RGB color value that represents the current automatic color.","pos":[10504,10567]},{"content":"Remarks","pos":[10577,10584]},{"pos":[10588,10740],"content":"Call this method to obtain the automatic color that is set by <bpt id=\"p1\">[</bpt>CMFCColorMenuButton::EnableAutomaticButton<ept id=\"p1\">](#cmfccolormenubutton__enableautomaticbutton)</ept>.","source":"Call this method to obtain the automatic color that is set by [CMFCColorMenuButton::EnableAutomaticButton](#cmfccolormenubutton__enableautomaticbutton)."},{"pos":[10796,10825],"content":"CMFCColorMenuButton::GetColor"},{"content":"Retrieves the current button's color.","pos":[10829,10866]},{"content":"Return Value","pos":[10921,10933]},{"content":"The color of the button.","pos":[10937,10961]},{"content":"Remarks","pos":[10971,10978]},{"pos":[11041,11077],"content":"CMFCColorMenuButton::GetColorByCmdID"},{"content":"Retrieves the color that corresponds to a specified command ID.","pos":[11081,11144]},{"content":"Parameters","pos":[11216,11226]},{"content":"[in]","pos":[11230,11234]},{"content":"A command ID.","pos":[11248,11261]},{"content":"Return Value","pos":[11271,11283]},{"content":"The color that corresponds to the specified command ID.","pos":[11287,11342]},{"content":"Remarks","pos":[11352,11359]},{"content":"Use this method when you have several color buttons in an application.","pos":[11363,11433]},{"content":"When the user clicks a color button, the button sends its command ID in a <ph id=\"ph1\">`WM_COMMAND`</ph> message to its parent.","pos":[11434,11543],"source":" When the user clicks a color button, the button sends its command ID in a `WM_COMMAND` message to its parent."},{"content":"The <ph id=\"ph1\">`GetColorByCmdID`</ph> method uses the command ID to retrieve the corresponding color.","pos":[11544,11629],"source":" The `GetColorByCmdID` method uses the command ID to retrieve the corresponding color."},{"pos":[11695,11734],"content":"CMFCColorMenuButton::IsEmptyMenuAllowed"},{"content":"Indicates whether empty menus are supported.","pos":[11738,11782]},{"content":"Return Value","pos":[11851,11863]},{"content":"Nonzero if empty menus are allowed; otherwise, zero.","pos":[11867,11919]},{"content":"Remarks","pos":[11929,11936]},{"content":"Empty menus are supported by default.","pos":[11940,11977]},{"content":"Override this method to change this behavior in derived class.","pos":[11978,12040]},{"pos":[12105,12143],"content":"CMFCColorMenuButton::OnChangeParentWnd"},{"content":"Called by the framework when the parent window changes.","pos":[12147,12202]},{"content":"Parameters","pos":[12277,12287]},{"content":"[in]","pos":[12291,12295]},{"content":"A pointer to the new parent window.","pos":[12312,12347]},{"content":"Remarks","pos":[12357,12364]},{"pos":[12418,12445],"content":"CMFCColorMenuButton::OnDraw"},{"content":"Called by the framework to display an image on a button.","pos":[12449,12505]},{"content":"Parameters","pos":[12777,12787]},{"content":"[in]","pos":[12791,12795]},{"content":"A pointer to a device context.","pos":[12805,12835]},{"content":"[in]","pos":[12842,12846]},{"content":"A rectangle that bounds the area to be redrawn.","pos":[12857,12904]},{"content":"[in]","pos":[12911,12915]},{"content":"Points to a list of toolbar images.","pos":[12929,12964]},{"content":"[in]","pos":[12971,12975]},{"content":"to specify that the toolbar is in a horizontal docked state; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","pos":[12994,13074],"source":" to specify that the toolbar is in a horizontal docked state; otherwise, `FALSE`."},{"content":"The default is <ph id=\"ph1\">`TRUE`</ph>.","pos":[13075,13097],"source":" The default is `TRUE`."},{"content":"[in]","pos":[13104,13108]},{"content":"to specify that the application is in customization mode; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","pos":[13136,13213],"source":" to specify that the application is in customization mode; otherwise, `FALSE`."},{"content":"The default is <ph id=\"ph1\">`FALSE`</ph>.","pos":[13214,13237],"source":" The default is `FALSE`."},{"content":"[in]","pos":[13244,13248]},{"content":"to specify that the button is highlighted; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","pos":[13272,13334],"source":" to specify that the button is highlighted; otherwise, `FALSE`."},{"content":"The default is <ph id=\"ph1\">`FALSE`</ph>.","pos":[13335,13358],"source":" The default is `FALSE`."},{"content":"[in]","pos":[13365,13369]},{"content":"to specify that the button's border is displayed; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","pos":[13394,13463],"source":" to specify that the button's border is displayed; otherwise, `FALSE`."},{"content":"The default is <ph id=\"ph1\">`TRUE`</ph>.","pos":[13464,13486],"source":" The default is `TRUE`."},{"content":"[in]","pos":[13493,13497]},{"content":"to specify that disabled buttons are grayed (dimmed) out; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","pos":[13531,13608],"source":" to specify that disabled buttons are grayed (dimmed) out; otherwise, `FALSE`."},{"content":"The default is <ph id=\"ph1\">`TRUE`</ph>.","pos":[13609,13631],"source":" The default is `TRUE`."},{"content":"Remarks","pos":[13641,13648]},{"pos":[13717,13759],"content":"CMFCColorMenuButton::OnDrawOnCustomizeList"},{"pos":[13763,13888],"content":"Called by the framework before a <ph id=\"ph1\">`CMFCColorMenuButton`</ph> object is displayed in the list of a toolbar customization dialog box.","source":"Called by the framework before a `CMFCColorMenuButton` object is displayed in the list of a toolbar customization dialog box."},{"content":"Parameters","pos":[14010,14020]},{"content":"[in]","pos":[14024,14028]},{"content":"A pointer to a device context.","pos":[14038,14068]},{"content":"[in]","pos":[14075,14079]},{"content":"A rectangle that bounds the button to be drawn.","pos":[14090,14137]},{"content":"[in]","pos":[14144,14148]},{"content":"specifies that the button is in selected state; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","pos":[14171,14238],"source":" specifies that the button is in selected state; otherwise, `FALSE`."},{"content":"Return Value","pos":[14248,14260]},{"content":"The width of the button.","pos":[14264,14288]},{"content":"Remarks","pos":[14298,14305]},{"pos":[14309,14454],"content":"This method is called by the framework when a <ph id=\"ph1\">`CMFCColorMenuButton`</ph> object is displayed in the list box during the toolbar customization process.","source":"This method is called by the framework when a `CMFCColorMenuButton` object is displayed in the list box during the toolbar customization process."},{"pos":[14517,14553],"content":"CMFCColorMenuButton::OpenColorDialog"},{"content":"Opens a color selection dialog box.","pos":[14557,14592]},{"content":"Parameters","pos":[14707,14717]},{"content":"[in]","pos":[14721,14725]},{"content":"The default color that is selected in the color dialog box.","pos":[14744,14803]},{"content":"[out]","pos":[14810,14815]},{"content":"Returns the color that the user selects from the color dialog box.","pos":[14830,14896]},{"content":"Return Value","pos":[14906,14918]},{"content":"Nonzero if the user selects a new color; otherwise, zero.","pos":[14922,14979]},{"content":"Remarks","pos":[14989,14996]},{"content":"When the menu button is clicked, call this method to open a color dialog box.","pos":[15000,15077]},{"content":"If the return value is nonzero, the color that the user selects is stored in the <ph id=\"ph1\">`colorRes`</ph> parameter.","pos":[15078,15180],"source":" If the return value is nonzero, the color that the user selects is stored in the `colorRes` parameter."},{"content":"Use the <bpt id=\"p1\">[</bpt>CMFCColorMenuButton::EnableOtherButton<ept id=\"p1\">](#cmfccolormenubutton__enableotherbutton)</ept> method to switch between the standard color dialog box and the <bpt id=\"p2\">[</bpt>CMFCColorDialog Class<ept id=\"p2\">](../../mfc/reference/cmfccolordialog-class.md)</ept> dialog box.","pos":[15181,15415],"source":" Use the [CMFCColorMenuButton::EnableOtherButton](#cmfccolormenubutton__enableotherbutton) method to switch between the standard color dialog box and the [CMFCColorDialog Class](../../mfc/reference/cmfccolordialog-class.md) dialog box."},{"pos":[15471,15500],"content":"CMFCColorMenuButton::SetColor"},{"content":"Sets the color of the current color button.","pos":[15504,15547]},{"content":"Parameters","pos":[15639,15649]},{"content":"[in]","pos":[15653,15657]},{"content":"An RGB color value.","pos":[15667,15686]},{"content":"[in]","pos":[15693,15697]},{"content":"to apply the <ph id=\"ph1\">`clr`</ph> parameter color to any associated menu button or toolbar button; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[15718,15821],"source":" to apply the `clr` parameter color to any associated menu button or toolbar button; otherwise, `FALSE`."},{"content":"Remarks","pos":[15831,15838]},{"content":"Call this method to change the color of the current color button.","pos":[15842,15907]},{"content":"If the <ph id=\"ph1\">`bNotify`</ph> parameter is nonzero, the color of the corresponding button on any associated popup menu or toolbar is changed to the color specified by the <ph id=\"ph2\">`clr`</ph> parameter.","pos":[15908,16082],"source":" If the `bNotify` parameter is nonzero, the color of the corresponding button on any associated popup menu or toolbar is changed to the color specified by the `clr` parameter."},{"pos":[16145,16181],"content":"CMFCColorMenuButton::SetColorByCmdID"},{"content":"Sets the color of the specified color menu button.","pos":[16185,16235]},{"content":"Parameters","pos":[16330,16340]},{"content":"[in]","pos":[16344,16348]},{"content":"The resource ID of a color menu button.","pos":[16362,16401]},{"content":"[in]","pos":[16408,16412]},{"content":"An RGB color value.","pos":[16424,16443]},{"pos":[16503,16536],"content":"CMFCColorMenuButton::SetColorName"},{"content":"Sets a new name for the specified color.","pos":[16540,16580]},{"content":"Parameters","pos":[16682,16692]},{"content":"[in]","pos":[16696,16700]},{"content":"The RGB value of the color whose name changes.","pos":[16712,16758]},{"content":"[in]","pos":[16765,16769]},{"content":"The new name of the color.","pos":[16783,16809]},{"content":"Remarks","pos":[16819,16826]},{"pos":[16890,16927],"content":"CMFCColorMenuButton::SetColumnsNumber"},{"pos":[16931,17066],"content":"Sets the number of columns to display in a color selection control ( <bpt id=\"p1\">[</bpt>CMFCColorBar<ept id=\"p1\">](../../mfc/reference/cmfccolorbar-class.md)</ept> object).","source":"Sets the number of columns to display in a color selection control ( [CMFCColorBar](../../mfc/reference/cmfccolorbar-class.md) object)."},{"content":"Parameters","pos":[17128,17138]},{"content":"[in]","pos":[17142,17146]},{"content":"The number of columns to display.","pos":[17161,17194]},{"content":"Remarks","pos":[17204,17211]},{"content":"See Also","pos":[17220,17228]},{"content":"Hierarchy Chart","pos":[17233,17248]},{"content":"Classes","pos":[17285,17292]},{"content":"CMFCColorBar Class","pos":[17335,17353]},{"content":"CMFCToolBar Class","pos":[17403,17420]},{"content":"CMFCToolBarsCustomizeDialog Class","pos":[17469,17502]},{"content":"CMFCColorButton Class","pos":[17567,17588]}],"content":"---\ntitle: \"CMFCColorMenuButton Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMFCColorMenuButton\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CMFCColorMenuButton class\"\nms.assetid: 42685704-e994-4f7b-9553-62283c27b754\ncaps.latest.revision: 29\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMFCColorMenuButton Class\nThe `CMFCColorMenuButton` class supports a menu command or a toolbar button that starts a color picker dialog box.  \n  \n## Syntax  \n  \n```  \nclass CMFCColorMenuButton : public CMFCToolBarMenuButton  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCColorMenuButton::CMFCColorMenuButton](#cmfccolormenubutton__cmfccolormenubutton)|Constructs a `CMFCColorMenuButton` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCColorMenuButton::EnableAutomaticButton](#cmfccolormenubutton__enableautomaticbutton)|Enables and disables an \"automatic\" button that is positioned above the regular color buttons. (The standard system automatic button is labeled **Automatic**.)|  \n|[CMFCColorMenuButton::EnableDocumentColors](#cmfccolormenubutton__enabledocumentcolors)|Enables the display of document-specific colors instead of system colors.|  \n|[CMFCColorMenuButton::EnableOtherButton](#cmfccolormenubutton__enableotherbutton)|Enables and disables an \"other\" button that is positioned below the regular color buttons. (The standard system \"other\" button is labeled **More Colors…**.)|  \n|[CMFCColorMenuButton::EnableTearOff](#cmfccolormenubutton__enabletearoff)|Enables the ability to tear off a color pane.|  \n|[CMFCColorMenuButton::GetAutomaticColor](#cmfccolormenubutton__getautomaticcolor)|Retrieves the current automatic color.|  \n|[CMFCColorMenuButton::GetColor](#cmfccolormenubutton__getcolor)|Retrieves the current button's color.|  \n|[CMFCColorMenuButton::GetColorByCmdID](#cmfccolormenubutton__getcolorbycmdid)|Retrieves the color that corresponds to a specified command ID.|  \n|[CMFCColorMenuButton::OnChangeParentWnd](#cmfccolormenubutton__onchangeparentwnd)|Called by the framework when the parent window changes.|  \n|[CMFCColorMenuButton::OpenColorDialog](#cmfccolormenubutton__opencolordialog)|Opens a color selection dialog box.|  \n|[CMFCColorMenuButton::SetColor](#cmfccolormenubutton__setcolor)|Sets the color of the current color button.|  \n|[CMFCColorMenuButton::SetColorByCmdID](#cmfccolormenubutton__setcolorbycmdid)|Sets the color of the specified color menu button.|  \n|[CMFCColorMenuButton::SetColorName](#cmfccolormenubutton__setcolorname)|Sets a new name for the specified color.|  \n|[CMFCColorMenuButton::SetColumnsNumber](#cmfccolormenubutton__setcolumnsnumber)|Sets the number of columns that are displayed by a `CMFCColorBar` object.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCColorMenuButton::CopyFrom](#cmfccolormenubutton__copyfrom)|Copies another toolbar button to the current button.|  \n|[CMFCColorMenuButton::CreatePopupMenu](#cmfccolormenubutton__createpopupmenu)|Creates a color picker dialog box.|  \n|[CMFCColorMenuButton::IsEmptyMenuAllowed](#cmfccolormenubutton__isemptymenuallowed)|Indicates whether empty menus are supported.|  \n|[CMFCColorMenuButton::OnDraw](#cmfccolormenubutton__ondraw)|Called by the framework to display an image on a button.|  \n|[CMFCColorMenuButton::OnDrawOnCustomizeList](#cmfccolormenubutton__ondrawoncustomizelist)|Called by the framework before a `CMFCColorMenuButton` object is displayed in the list of a toolbar customization dialog box.|  \n  \n## Remarks  \n To replace the original menu command or toolbar button with a `CMFCColorMenuButton` object, create the `CMFCColorMenuButton` object, set any appropriate [CMFCColorBar Class](../../mfc/reference/cmfccolorbar-class.md) styles, and then call the `ReplaceButton` method of the [CMFCToolBar Class](../../mfc/reference/cmfctoolbar-class.md) class. If you customize a toolbar, call the [CMFCToolBarsCustomizeDialog::ReplaceButton](../../mfc/reference/cmfctoolbarscustomizedialog-class.md#cmfctoolbarscustomizedialog__replacebutton) method.  \n  \n The color picker dialog box is created during the processing of the [CMFCColorMenuButton::CreatePopupMenu](#cmfccolormenubutton__createpopupmenu) event handler. The event handler notifies the parent frame with a `WM_COMMAND` message. The `CMFCColorMenuButton` object sends the control ID that is assigned to the original menu command or toolbar button.  \n  \n## Example  \n The following example demonstrates how to create and configure a color menu button by using various methods in the `CMFCColorMenuButton` class. In the example, a `CPalette` object is first created and then used to construct an object of the `CMFCColorMenuButton` class. The `CMFCColorMenuButton` object is then configured by enabling its automatic and other buttons, and setting its color and the number of columns. This code is part of the [Word Pad sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_WordPad#5](../../mfc/reference/codesnippet/cpp/cmfccolormenubutton-class_1.h)]  \n[!code-cpp[NVC_MFC_WordPad#6](../../mfc/reference/codesnippet/cpp/cmfccolormenubutton-class_2.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CMFCToolBarButton](../../mfc/reference/cmfctoolbarbutton-class.md)  \n  \n [CMFCToolBarMenuButton](../../mfc/reference/cmfctoolbarmenubutton-class.md)  \n  \n [CMFCColorMenuButton](../../mfc/reference/cmfccolormenubutton-class.md)  \n  \n## Requirements  \n **Header:** afxcolormenubutton.h  \n  \n##  <a name=\"cmfccolormenubutton__cmfccolormenubutton\"></a>  CMFCColorMenuButton::CMFCColorMenuButton  \n Constructs a `CMFCColorMenuButton` object.  \n  \n```  \nCMFCColorMenuButton();\n\n \nCMFCColorMenuButton(\n    UINT uiCmdID,  \n    LPCTSTR lpszText,  \n    CPalette* pPalette=NULL);\n```  \n  \n### Parameters  \n [in] `uiCmdID`  \n A button command ID.  \n  \n [in] `lpszText`  \n The button text.  \n  \n [in] `pPalette`  \n A pointer to the button's color palette.  \n  \n### Return Value  \n  \n### Remarks  \n The first constructor is the default constructor. The object's current color and automatic color are initialized to black (RGB(0, 0, 0)).  \n  \n The second constructor initializes the button to the color that corresponds to the specified command ID.  \n  \n##  <a name=\"cmfccolormenubutton__copyfrom\"></a>  CMFCColorMenuButton::CopyFrom  \n Copies one [CMFCToolBarMenuButton Class](../../mfc/reference/cmfctoolbarmenubutton-class.md)-derived object to another.  \n  \n```  \nvirtual void CopyFrom(const CMFCToolBarButton& src);\n```  \n  \n### Parameters  \n [in] `src`  \n Source button to copy.  \n  \n### Remarks  \n Override this method to copy objects that are derived from the `CMFCColorMenuButton` object.  \n  \n##  <a name=\"cmfccolormenubutton__createpopupmenu\"></a>  CMFCColorMenuButton::CreatePopupMenu  \n Creates a color picker dialog box.  \n  \n```  \nvirtual CMFCPopupMenu* CreatePopupMenu();\n```  \n  \n### Return Value  \n An object that represents a color picker dialog box.  \n  \n### Remarks  \n This method is called by the framework when the user presses a color menu button.  \n  \n##  <a name=\"cmfccolormenubutton__enableautomaticbutton\"></a>  CMFCColorMenuButton::EnableAutomaticButton  \n Enables and disables an \"automatic\" button that is positioned above the regular color buttons. (The standard system automatic button is labeled **Automatic**.)  \n  \n```  \nvoid EnableAutomaticButton(\n    LPCTSTR lpszLabel,  \n    COLORREF colorAutomatic,  \n    BOOL bEnable=TRUE);\n```  \n  \n### Parameters  \n [in] `lpszLabel`  \n Specifies the button text that is displayed when the button becomes automatic.  \n  \n [in] `colorAutomatic`  \n Specifies a new automatic color.  \n  \n [in] `bEnable`  \n Specifies whether the button is automatic or not.  \n  \n### Remarks  \n The automatic button applies the current default color.  \n  \n##  <a name=\"cmfccolormenubutton__enabledocumentcolors\"></a>  CMFCColorMenuButton::EnableDocumentColors  \n Enables the display of document-specific colors instead of system colors.  \n  \n```  \nvoid EnableDocumentColors(\n    LPCTSTR lpszLabel,  \n    BOOL bEnable=TRUE);\n```  \n  \n### Parameters  \n [in] `lpszLabel`  \n Specifies the button text.  \n  \n [in] `bEnable`  \n `TRUE` to display document-specific colors or `FALSE` to display system colors.  \n  \n### Remarks  \n Use this method to display the current document colors or the system palette colors when the user clicks a color menu button.  \n  \n##  <a name=\"cmfccolormenubutton__enableotherbutton\"></a>  CMFCColorMenuButton::EnableOtherButton  \n Enables and disables an \"other\" button that is positioned below the regular color buttons. (The standard system \"other\" button is labeled **More Colors…**.)  \n  \n```  \nvoid EnableOtherButton(\n    LPCTSTR lpszLabel,  \n    BOOL bAltColorDlg=TRUE,  \n    BOOL bEnable=TRUE);\n```  \n  \n### Parameters  \n [in] `lpszLabel`  \n Specifies the button text.  \n  \n [in] `bAltColorDlg`  \n Specify `TRUE` to display the `CMFCColorDialog` dialog box, or `FALSE` to display the standard system color dialog box.  \n  \n [in] `bEnable`  \n Specify `TRUE` to display the \"other\" button; otherwise, `FALSE`. The default is `TRUE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfccolormenubutton__enabletearoff\"></a>  CMFCColorMenuButton::EnableTearOff  \n Enables the ability to tear off a color pane.  \n  \n```  \nvoid EnableTearOff(\n    UINT uiID,  \n    int nVertDockColumns=-1,  \n    int nHorzDockRows=-1);\n```  \n  \n### Parameters  \n [in] `uiID`  \n Specifies the ID for the tear-off pane.  \n  \n [in] `nVertDockColumns`  \n Specifies the number of columns in the vertically docked color pane while in tear-off state.  \n  \n [in] `nHorzDockRows`  \n Specifies the number of rows for the horizontally docked color pane while in tear-off state.  \n  \n### Remarks  \n Call this method to enable the \"tear-off\" feature for the color pane that pops up when the `CMFCColorMenuButton` button is pressed.  \n  \n##  <a name=\"cmfccolormenubutton__getautomaticcolor\"></a>  CMFCColorMenuButton::GetAutomaticColor  \n Retrieves the current automatic color.  \n  \n```  \nCOLORREF GetAutomaticColor() const;\n\n \n```  \n  \n### Return Value  \n An RGB color value that represents the current automatic color.  \n  \n### Remarks  \n Call this method to obtain the automatic color that is set by [CMFCColorMenuButton::EnableAutomaticButton](#cmfccolormenubutton__enableautomaticbutton).  \n  \n##  <a name=\"cmfccolormenubutton__getcolor\"></a>  CMFCColorMenuButton::GetColor  \n Retrieves the current button's color.  \n  \n```  \nCOLORREF GetColor() const;\n\n \n```  \n  \n### Return Value  \n The color of the button.  \n  \n### Remarks  \n  \n##  <a name=\"cmfccolormenubutton__getcolorbycmdid\"></a>  CMFCColorMenuButton::GetColorByCmdID  \n Retrieves the color that corresponds to a specified command ID.  \n  \n```  \nstatic COLORREF GetColorByCmdID(UINT uiCmdID);\n```  \n  \n### Parameters  \n [in] `uiCmdID`  \n A command ID.  \n  \n### Return Value  \n The color that corresponds to the specified command ID.  \n  \n### Remarks  \n Use this method when you have several color buttons in an application. When the user clicks a color button, the button sends its command ID in a `WM_COMMAND` message to its parent. The `GetColorByCmdID` method uses the command ID to retrieve the corresponding color.  \n  \n##  <a name=\"cmfccolormenubutton__isemptymenuallowed\"></a>  CMFCColorMenuButton::IsEmptyMenuAllowed  \n Indicates whether empty menus are supported.  \n  \n```  \nvirtual BOOL IsEmptyMenuAllowed() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if empty menus are allowed; otherwise, zero.  \n  \n### Remarks  \n Empty menus are supported by default. Override this method to change this behavior in derived class.  \n  \n##  <a name=\"cmfccolormenubutton__onchangeparentwnd\"></a>  CMFCColorMenuButton::OnChangeParentWnd  \n Called by the framework when the parent window changes.  \n  \n```  \nvirtual void OnChangeParentWnd(CWnd* pWndParent);\n```  \n  \n### Parameters  \n [in] `pWndParent`  \n A pointer to the new parent window.  \n  \n### Remarks  \n  \n##  <a name=\"cmfccolormenubutton__ondraw\"></a>  CMFCColorMenuButton::OnDraw  \n Called by the framework to display an image on a button.  \n  \n```  \nvirtual void OnDraw(\n    CDC* pDC,  \n    const CRect& rect,  \n    CMFCToolBarImages* pImages,  \n    BOOL bHorz=TRUE,  \n    BOOL bCustomizeMode=FALSE,  \n    BOOL bHighlight=FALSE,  \n    BOOL bDrawBorder=TRUE,  \n    BOOL bGrayDisabledButtons=TRUE);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n A rectangle that bounds the area to be redrawn.  \n  \n [in] `pImages`  \n Points to a list of toolbar images.  \n  \n [in] `bHorz`  \n `TRUE` to specify that the toolbar is in a horizontal docked state; otherwise, `FALSE`. The default is `TRUE`.  \n  \n [in] `bCustomizeMode`  \n `TRUE` to specify that the application is in customization mode; otherwise, `FALSE`. The default is `FALSE`.  \n  \n [in] `bHighlight`  \n `TRUE` to specify that the button is highlighted; otherwise, `FALSE`. The default is `FALSE`.  \n  \n [in] `bDrawBorder`  \n `TRUE` to specify that the button's border is displayed; otherwise, `FALSE`. The default is `TRUE`.  \n  \n [in] `bGrayDisabledButtons`  \n `TRUE` to specify that disabled buttons are grayed (dimmed) out; otherwise, `FALSE`. The default is `TRUE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfccolormenubutton__ondrawoncustomizelist\"></a>  CMFCColorMenuButton::OnDrawOnCustomizeList  \n Called by the framework before a `CMFCColorMenuButton` object is displayed in the list of a toolbar customization dialog box.  \n  \n```  \nvirtual int OnDrawOnCustomizeList(\n    CDC* pDC,  \n    const CRect& rect,  \n    BOOL bSelected);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n A rectangle that bounds the button to be drawn.  \n  \n [in] `bSelected`  \n `TRUE` specifies that the button is in selected state; otherwise, `FALSE`.  \n  \n### Return Value  \n The width of the button.  \n  \n### Remarks  \n This method is called by the framework when a `CMFCColorMenuButton` object is displayed in the list box during the toolbar customization process.  \n  \n##  <a name=\"cmfccolormenubutton__opencolordialog\"></a>  CMFCColorMenuButton::OpenColorDialog  \n Opens a color selection dialog box.  \n  \n```  \nvirtual BOOL OpenColorDialog(\n    const COLORREF colorDefault,  \n    COLORREF& colorRes);\n```  \n  \n### Parameters  \n [in] `colorDefault`  \n The default color that is selected in the color dialog box.  \n  \n [out] `colorRes`  \n Returns the color that the user selects from the color dialog box.  \n  \n### Return Value  \n Nonzero if the user selects a new color; otherwise, zero.  \n  \n### Remarks  \n When the menu button is clicked, call this method to open a color dialog box. If the return value is nonzero, the color that the user selects is stored in the `colorRes` parameter. Use the [CMFCColorMenuButton::EnableOtherButton](#cmfccolormenubutton__enableotherbutton) method to switch between the standard color dialog box and the [CMFCColorDialog Class](../../mfc/reference/cmfccolordialog-class.md) dialog box.  \n  \n##  <a name=\"cmfccolormenubutton__setcolor\"></a>  CMFCColorMenuButton::SetColor  \n Sets the color of the current color button.  \n  \n```  \nvirtual void SetColor(\n    COLORREF clr,  \n    BOOL bNotify=TRUE);\n```  \n  \n### Parameters  \n [in] `clr`  \n An RGB color value.  \n  \n [in] `bNotify`  \n `TRUE` to apply the `clr` parameter color to any associated menu button or toolbar button; otherwise, `FALSE`.  \n  \n### Remarks  \n Call this method to change the color of the current color button. If the `bNotify` parameter is nonzero, the color of the corresponding button on any associated popup menu or toolbar is changed to the color specified by the `clr` parameter.  \n  \n##  <a name=\"cmfccolormenubutton__setcolorbycmdid\"></a>  CMFCColorMenuButton::SetColorByCmdID  \n Sets the color of the specified color menu button.  \n  \n```  \nstatic void SetColorByCmdID(\n    UINT uiCmdID,  \n    COLORREF color);\n```  \n  \n### Parameters  \n [in] `uiCmdID`  \n The resource ID of a color menu button.  \n  \n [in] `color`  \n An RGB color value.  \n  \n##  <a name=\"cmfccolormenubutton__setcolorname\"></a>  CMFCColorMenuButton::SetColorName  \n Sets a new name for the specified color.  \n  \n```  \nstatic void SetColorName(\n    COLORREF color,  \n    const CString& strName);\n```  \n  \n### Parameters  \n [in] `color`  \n The RGB value of the color whose name changes.  \n  \n [in] `strName`  \n The new name of the color.  \n  \n### Remarks  \n  \n##  <a name=\"cmfccolormenubutton__setcolumnsnumber\"></a>  CMFCColorMenuButton::SetColumnsNumber  \n Sets the number of columns to display in a color selection control ( [CMFCColorBar](../../mfc/reference/cmfccolorbar-class.md) object).  \n  \n```  \nvoid SetColumnsNumber(int nColumns);\n```  \n  \n### Parameters  \n [in] `nColumns`  \n The number of columns to display.  \n  \n### Remarks  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CMFCColorBar Class](../../mfc/reference/cmfccolorbar-class.md)   \n [CMFCToolBar Class](../../mfc/reference/cmfctoolbar-class.md)   \n [CMFCToolBarsCustomizeDialog Class](../../mfc/reference/cmfctoolbarscustomizedialog-class.md)   \n [CMFCColorButton Class](../../mfc/reference/cmfccolorbutton-class.md)\n"}