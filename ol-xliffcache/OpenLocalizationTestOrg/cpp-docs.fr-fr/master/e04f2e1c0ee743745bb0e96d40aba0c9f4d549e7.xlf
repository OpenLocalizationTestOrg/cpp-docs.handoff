<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e04f2e1c0ee743745bb0e96d40aba0c9f4d549e7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\pointer-declarations.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ed8c2fa0c5bacd8deb0b9662e2ba8d2330eced76</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">20c10d4c4ac359bf5f8f76f7e0618ed469e2d123</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Pointer Declarations | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Pointer Declarations</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A "pointer declaration" names a pointer variable and specifies the type of the object to which the variable points.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A variable declared as a pointer holds a memory address.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>opt<bpt id="p1">*</bpt>direct-declarator<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>direct-declarator<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>identifier</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>(<ept id="p1">**</ept>  <bpt id="p2">*</bpt>declarator<ept id="p2">*</ept>  <bpt id="p3">**</bpt>)<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>direct-declarator<ept id="p1">*</ept>  <bpt id="p2">**</bpt>[<ept id="p2">**</ept>  <bpt id="p3">*</bpt>constant-expression<ept id="p3">*</ept>opt<bpt id="p4">**</bpt>]<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>direct-declarator<ept id="p1">*</ept>  <bpt id="p2">**</bpt>(<ept id="p2">**</ept>  <bpt id="p3">*</bpt>parameter-type-list<ept id="p3">*</ept>  <bpt id="p4">**</bpt>)<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>direct-declarator<ept id="p1">*</ept>  <bpt id="p2">**</bpt>(<ept id="p2">**</ept>  <bpt id="p3">*</bpt>identifier-list<ept id="p3">*</ept>opt<bpt id="p4">**</bpt>)<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> <bpt id="p2">*</bpt>type-qualifier-list<ept id="p2">*</ept>opt</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> <bpt id="p2">*</bpt>type-qualifier-list<ept id="p2">*</ept>opt</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>type-qualifier-list<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>type-qualifier</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>type-qualifier-list type-qualifier</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>type-specifier<ept id="p1">*</ept> gives the type of the object, which can be any basic, structure, or union type.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Pointer variables can also point to functions, arrays, and other pointers.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>(For information on declaring and interpreting more complex pointer types, refer to <bpt id="p1">[</bpt>Interpreting More Complex Declarators<ept id="p1">](../c-language/interpreting-more-complex-declarators.md)</ept>.)</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>By making the <bpt id="p1">*</bpt>type-specifier<ept id="p1">*</ept> <ph id="ph1">`void`</ph>, you can delay specification of the type to which the pointer refers.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Such an item is referred to as a "pointer to <ph id="ph1">`void`</ph>" and is written as <ph id="ph2">`void *`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A variable declared as a pointer to <ph id="ph1">`void`</ph> can be used to point to an object of any type.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>However, to perform most operations on the pointer or on the object to which it points, the type to which it points must be explicitly specified for each operation.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>(Variables of type <bpt id="p1">**</bpt>char <ph id="ph1">\*</ph><ept id="p1">**</ept> and type <bpt id="p2">**</bpt>void <ph id="ph2">\*</ph><ept id="p2">**</ept> are assignment-compatible without a type cast.) Such conversion can be accomplished with a type cast (see <bpt id="p3">[</bpt>Type-Cast Conversions<ept id="p3">](../c-language/type-cast-conversions.md)</ept> for more information).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>type-qualifier<ept id="p1">*</ept> can be either <bpt id="p2">**</bpt>const<ept id="p2">**</ept> or <ph id="ph1">`volatile`</ph>, or both.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>These specify, respectively, that the pointer cannot be modified by the program itself (<bpt id="p1">**</bpt>const<ept id="p1">**</ept>), or that the pointer can legitimately be modified by some process beyond the control of the program (<ph id="ph1">`volatile`</ph>).</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>Type Qualifiers<ept id="p1">](../c-language/type-qualifiers.md)</ept> for more information on <bpt id="p2">**</bpt>const<ept id="p2">**</ept> and <ph id="ph1">`volatile`</ph>.)</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`declarator`</ph> names the variable and can include a type modifier.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, if <ph id="ph1">`declarator`</ph> represents an array, the type of the pointer is modified to be a pointer to an array.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can declare a pointer to a structure, union, or enumeration type before you define the structure, union, or enumeration type.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You declare the pointer by using the structure or union tag as shown in the examples below.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Such declarations are allowed because the compiler does not need to know the size of the structure or union to allocate space for the pointer variable.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following examples illustrate pointer declarations.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`message`</ph> pointer points to a variable with <ph id="ph2">`char`</ph> type.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`pointers`</ph> array has 10 elements; each element is a pointer to a variable with <ph id="ph2">`int`</ph> type.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The pointer variable points to an array with 10 elements.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Each element in this array has <ph id="ph1">`int`</ph> type.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The pointer <ph id="ph1">`x`</ph> can be modified to point to a different <ph id="ph2">`int`</ph> value, but the value to which it points cannot be modified.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The variable <ph id="ph1">`y`</ph> in these declarations is declared as a constant pointer to an <ph id="ph2">`int`</ph> value.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The value it points to can be modified, but the pointer itself must always point to the same location: the address of <ph id="ph1">`fixed_object`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Similarly, <ph id="ph1">`z`</ph> is a constant pointer, but it is also declared to point to an <ph id="ph2">`int`</ph> whose value cannot be modified by the program.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The additional specifier <ph id="ph1">`volatile`</ph> indicates that although the value of the <bpt id="p1">**</bpt>const int<ept id="p1">**</ept> pointed to by <ph id="ph2">`z`</ph> cannot be modified by the program, it could legitimately be modified by a process running concurrently with the program.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The declaration of <ph id="ph1">`w`</ph> specifies that the program cannot change the value pointed to and that the program cannot modify the pointer.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This example declares two pointer variables, <ph id="ph1">`next`</ph> and <ph id="ph2">`previous`</ph>, that point to the structure type <ph id="ph3">`list`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This declaration can appear before the definition of the <ph id="ph1">`list`</ph> structure type (see the next example), as long as the <ph id="ph2">`list`</ph> type definition has the same visibility as the declaration.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The variable <ph id="ph1">`line`</ph> has the structure type named <ph id="ph2">`list`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`list`</ph> structure type has three members: the first member is a pointer to a <ph id="ph2">`char`</ph> value, the second is an <ph id="ph3">`int`</ph> value, and the third is a pointer to another <ph id="ph4">`list`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The variable <ph id="ph1">`record`</ph> has the structure type <ph id="ph2">`id`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">`pname`</ph> is declared as a pointer to another structure type named <ph id="ph2">`name`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This declaration can appear before the <ph id="ph1">`name`</ph> type is defined.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Declarators and Variable Declarations</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>