{"nodes":[{"pos":[12,51],"content":"iterator_traits Struct | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"iterator_traits Struct | Microsoft Docs","pos":[0,39]}]},{"content":"iterator_traits Struct","pos":[736,758]},{"content":"A template helper struct used to specify all the critical type definitions that an iterator should have.","pos":[759,863]},{"content":"Syntax","pos":[872,878]},{"content":"Remarks","pos":[1257,1264]},{"content":"The template struct defines the member types","pos":[1268,1312]},{"pos":[1320,1389],"content":"<bpt id=\"p1\">**</bpt>iterator_category<ept id=\"p1\">**</ept>: a synonym for <bpt id=\"p2\">**</bpt>Iterator::iterator_category<ept id=\"p2\">**</ept>.","source":"**iterator_category**: a synonym for **Iterator::iterator_category**."},{"pos":[1409,1450],"content":": a synonym for <bpt id=\"p1\">**</bpt>Iterator::value_type<ept id=\"p1\">**</ept>.","source":": a synonym for **Iterator::value_type**."},{"pos":[1475,1521],"content":": a synonym for <bpt id=\"p1\">**</bpt>Iterator::difference_type<ept id=\"p1\">**</ept>.","source":": a synonym for **Iterator::difference_type**."},{"pos":[1544,1590],"content":": a synonym for <bpt id=\"p1\">**</bpt>Iterator::difference_type.<ept id=\"p1\">**</ept>","source":": a synonym for **Iterator::difference_type.**"},{"pos":[1598,1647],"content":"<bpt id=\"p1\">**</bpt>pointer<ept id=\"p1\">**</ept>: a synonym for <bpt id=\"p2\">**</bpt>Iterator::pointer<ept id=\"p2\">**</ept>.","source":"**pointer**: a synonym for **Iterator::pointer**."},{"pos":[1655,1708],"content":"<bpt id=\"p1\">**</bpt>reference<ept id=\"p1\">**</ept>: a synonym for <bpt id=\"p2\">**</bpt>Iterator::reference<ept id=\"p2\">**</ept>.","source":"**reference**: a synonym for **Iterator::reference**."},{"pos":[1715,1847],"content":"The partial specializations determine the critical types associated with an object pointer of type <bpt id=\"p1\">**</bpt>Type <ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> or const <bpt id=\"p2\">**</bpt>Type <ph id=\"ph2\">\\*</ph><ept id=\"p2\">**</ept>.","source":"The partial specializations determine the critical types associated with an object pointer of type **Type \\*** or const **Type \\***."},{"content":"In this implementation you can also use several template functions that do not make use of partial specialization:","pos":[1854,1968]},{"content":"which determine several of the same types more indirectly.","pos":[2469,2527]},{"content":"You use these functions as arguments on a function call.","pos":[2528,2584]},{"content":"Their sole purpose is to supply a useful template class parameter to the called function.","pos":[2585,2674]},{"content":"Example","pos":[2683,2690]},{"content":"Requirements","pos":[3510,3522]},{"pos":[3526,3549],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>iterator&gt;","source":"**Header:** \\<iterator>"},{"pos":[3556,3574],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[3583,3591]},{"content":"iterator&gt;","pos":[3598,3607],"source":"iterator>"},{"content":"Thread Safety in the C++ Standard Library","pos":[3647,3688]},{"content":"C++ Standard Library Reference","pos":[3761,3791]}],"content":"---\ntitle: \"iterator_traits Struct | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std::iterator_traits\"\n  - \"xutility/std::iterator_traits\"\n  - \"iterator_traits\"\n  - \"std.iterator_traits\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"iterator_traits struct\"\n  - \"iterator_traits class\"\nms.assetid: 8b92c2c5-f658-402f-8ca1-e7ae301b8514\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# iterator_traits Struct\nA template helper struct used to specify all the critical type definitions that an iterator should have.  \n  \n## Syntax  \n\n```    \nstruct iterator_traits {\n   typedef typename Iterator::iterator_category iterator_category;\n   typedef typename Iterator::value_type value_type;\n   typedef typename Iterator::difference_type difference_type;\n   typedef difference_type distance_type;\n   typedef typename Iterator::pointer pointer;\n   typedef typename Iterator::reference reference;\n   };  \n```    \n## Remarks  \n The template struct defines the member types  \n  \n- **iterator_category**: a synonym for **Iterator::iterator_category**.  \n  \n- `value_type`: a synonym for **Iterator::value_type**.  \n  \n- `difference_type`: a synonym for **Iterator::difference_type**.  \n  \n- `distance_type`: a synonym for **Iterator::difference_type.**  \n  \n- **pointer**: a synonym for **Iterator::pointer**.  \n  \n- **reference**: a synonym for **Iterator::reference**.  \n  \n The partial specializations determine the critical types associated with an object pointer of type **Type \\*** or const **Type \\***.  \n  \n In this implementation you can also use several template functions that do not make use of partial specialization:  \n  \n```cpp\ntemplate <class Category, class Type, class Diff>\nC _Iter_cat(const iterator<Category, Ty, Diff>&);\n\ntemplate <class Ty>\nrandom_access_iterator_tag _Iter_cat(const Ty *);\n\ntemplate <class Category, class Ty, class Diff>\nTy *val_type(const iterator<Category, Ty, Diff>&);\n\ntemplate <class Ty>\nTy *val_type(const Ty *);\n\ntemplate <class Category, class Ty, class Diff>\nDiff *_Dist_type(const iterator<Category, Ty, Diff>&);\n\ntemplate <class Ty>\nptrdiff_t *_Dist_type(const Ty *);\n```  \n  \n which determine several of the same types more indirectly. You use these functions as arguments on a function call. Their sole purpose is to supply a useful template class parameter to the called function.  \n  \n## Example  \n  \n```cpp  \n// iterator_traits.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <iterator>  \n#include <vector>  \n#include <list>  \n  \nusing namespace std;  \n  \ntemplate< class it >  \nvoid  \nfunction( it i1, it i2 )  \n{  \n   iterator_traits<it>::iterator_category cat;  \n   cout << typeid( cat ).name( ) << endl;  \n   while ( i1 != i2 )  \n   {  \n      iterator_traits<it>::value_type x;  \n      x = *i1;  \n      cout << x << \" \";  \n      i1++;  \n   };     \n   cout << endl;  \n};  \n  \nint main( )   \n{  \n   vector<char> vc( 10,'a' );  \n   list<int> li( 10 );  \n   function( vc.begin( ), vc.end( ) );  \n   function( li.begin( ), li.end( ) );  \n}  \n\\* Output:   \nstruct std::random_access_iterator_tag  \na a a a a a a a a a   \nstruct std::bidirectional_iterator_tag  \n0 0 0 0 0 0 0 0 0 0   \n*\\  \n```  \n  \n## Requirements  \n **Header:** \\<iterator>  \n  \n **Namespace:** std  \n  \n## See Also  \n [\\<iterator>](../standard-library/iterator.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}