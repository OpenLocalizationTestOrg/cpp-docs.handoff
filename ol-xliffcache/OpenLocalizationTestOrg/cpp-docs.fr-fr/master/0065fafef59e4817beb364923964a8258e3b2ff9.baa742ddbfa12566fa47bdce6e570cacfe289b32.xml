{"nodes":[{"pos":[12,44],"content":"CFrameWnd Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CFrameWnd Class | Microsoft Docs","pos":[0,32]}]},{"pos":[723,738],"content":"CFrameWnd Class","linkify":"CFrameWnd Class","nodes":[{"content":"CFrameWnd Class","pos":[0,15]}]},{"content":"Provides the functionality of a Windows single document interface (SDI) overlapped or pop-up frame window, along with members for managing the window.","pos":[739,889]},{"pos":[898,904],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[960,967],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[977,996],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1003,1007]},{"content":"Description","pos":[1008,1019]},{"pos":[1057,1102],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::CFrameWnd<ept id=\"p1\">](#cframewnd__cframewnd)</ept>","source":"[CFrameWnd::CFrameWnd](#cframewnd__cframewnd)"},{"pos":[1103,1135],"content":"Constructs a <ph id=\"ph1\">`CFrameWnd`</ph> object.","source":"Constructs a `CFrameWnd` object."},{"pos":[1146,1160],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1167,1171]},{"content":"Description","pos":[1172,1183]},{"pos":[1221,1274],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::ActivateFrame<ept id=\"p1\">](#cframewnd__activateframe)</ept>","source":"[CFrameWnd::ActivateFrame](#cframewnd__activateframe)"},{"content":"Makes the frame visible and available to the user.","pos":[1275,1325]},{"pos":[1330,1387],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::BeginModalState<ept id=\"p1\">](#cframewnd__beginmodalstate)</ept>","source":"[CFrameWnd::BeginModalState](#cframewnd__beginmodalstate)"},{"content":"Sets the frame window to modal.","pos":[1388,1419]},{"pos":[1424,1463],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::Create<ept id=\"p1\">](#cframewnd__create)</ept>","source":"[CFrameWnd::Create](#cframewnd__create)"},{"pos":[1464,1558],"content":"Call to create and initialize the Windows frame window associated with the <ph id=\"ph1\">`CFrameWnd`</ph> object.","source":"Call to create and initialize the Windows frame window associated with the `CFrameWnd` object."},{"pos":[1563,1610],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::CreateView<ept id=\"p1\">](#cframewnd__createview)</ept>","source":"[CFrameWnd::CreateView](#cframewnd__createview)"},{"pos":[1611,1674],"content":"Creates a view within a frame that is not derived from <ph id=\"ph1\">`CView`</ph>.","source":"Creates a view within a frame that is not derived from `CView`."},{"pos":[1679,1734],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::DockControlBar<ept id=\"p1\">](#cframewnd__dockcontrolbar)</ept>","source":"[CFrameWnd::DockControlBar](#cframewnd__dockcontrolbar)"},{"content":"Docks a control bar.","pos":[1735,1755]},{"pos":[1760,1813],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::EnableDocking<ept id=\"p1\">](#cframewnd__enabledocking)</ept>","source":"[CFrameWnd::EnableDocking](#cframewnd__enabledocking)"},{"content":"Allows a control bar to be docked.","pos":[1814,1848]},{"pos":[1853,1906],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::EndModalState<ept id=\"p1\">](#cframewnd__endmodalstate)</ept>","source":"[CFrameWnd::EndModalState](#cframewnd__endmodalstate)"},{"content":"Ends the frame window's modal state.","pos":[1907,1943]},{"content":"Enables all of the windows disabled by <ph id=\"ph1\">`BeginModalState`</ph>.","pos":[1944,2001],"source":" Enables all of the windows disabled by `BeginModalState`."},{"pos":[2006,2063],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::FloatControlBar<ept id=\"p1\">](#cframewnd__floatcontrolbar)</ept>","source":"[CFrameWnd::FloatControlBar](#cframewnd__floatcontrolbar)"},{"content":"Floats a control bar.","pos":[2064,2085]},{"pos":[2090,2151],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::GetActiveDocument<ept id=\"p1\">](#cframewnd__getactivedocument)</ept>","source":"[CFrameWnd::GetActiveDocument](#cframewnd__getactivedocument)"},{"pos":[2152,2192],"content":"Returns the active <bpt id=\"p1\">**</bpt>CDocument<ept id=\"p1\">**</ept> object.","source":"Returns the active **CDocument** object."},{"pos":[2197,2252],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::GetActiveFrame<ept id=\"p1\">](#cframewnd__getactiveframe)</ept>","source":"[CFrameWnd::GetActiveFrame](#cframewnd__getactiveframe)"},{"pos":[2253,2291],"content":"Returns the active <ph id=\"ph1\">`CFrameWnd`</ph> object.","source":"Returns the active `CFrameWnd` object."},{"pos":[2296,2349],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::GetActiveView<ept id=\"p1\">](#cframewnd__getactiveview)</ept>","source":"[CFrameWnd::GetActiveView](#cframewnd__getactiveview)"},{"pos":[2350,2384],"content":"Returns the active <ph id=\"ph1\">`CView`</ph> object.","source":"Returns the active `CView` object."},{"pos":[2389,2442],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::GetControlBar<ept id=\"p1\">](#cframewnd__getcontrolbar)</ept>","source":"[CFrameWnd::GetControlBar](#cframewnd__getcontrolbar)"},{"content":"Retrieves the control bar.","pos":[2443,2469]},{"pos":[2474,2525],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::GetDockState<ept id=\"p1\">](#cframewnd__getdockstate)</ept>","source":"[CFrameWnd::GetDockState](#cframewnd__getdockstate)"},{"content":"Retrieves the dock state of a frame window.","pos":[2526,2569]},{"pos":[2574,2631],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::GetMenuBarState<ept id=\"p1\">](#cframewnd__getmenubarstate)</ept>","source":"[CFrameWnd::GetMenuBarState](#cframewnd__getmenubarstate)"},{"content":"Retrieves the display state of the menu in the current MFC application.","pos":[2632,2703]},{"pos":[2708,2775],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::GetMenuBarVisibility<ept id=\"p1\">](#cframewnd__getmenubarvisibility)</ept>","source":"[CFrameWnd::GetMenuBarVisibility](#cframewnd__getmenubarvisibility)"},{"content":"Indicates whether the default behavior of the menu in the current MFC application is  either hidden or visible.","pos":[2776,2887]},{"pos":[2892,2945],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::GetMessageBar<ept id=\"p1\">](#cframewnd__getmessagebar)</ept>","source":"[CFrameWnd::GetMessageBar](#cframewnd__getmessagebar)"},{"content":"Returns a pointer to the status bar belonging to the frame window.","pos":[2946,3012]},{"pos":[3017,3076],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::GetMessageString<ept id=\"p1\">](#cframewnd__getmessagestring)</ept>","source":"[CFrameWnd::GetMessageString](#cframewnd__getmessagestring)"},{"content":"Retrieves message corresponding to a command ID.","pos":[3077,3125]},{"pos":[3130,3173],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::GetTitle<ept id=\"p1\">](#cframewnd__gettitle)</ept>","source":"[CFrameWnd::GetTitle](#cframewnd__gettitle)"},{"content":"Retrieves the title of the related control bar.","pos":[3174,3221]},{"pos":[3226,3289],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::InitialUpdateFrame<ept id=\"p1\">](#cframewnd__initialupdateframe)</ept>","source":"[CFrameWnd::InitialUpdateFrame](#cframewnd__initialupdateframe)"},{"pos":[3290,3391],"content":"Causes the <ph id=\"ph1\">`OnInitialUpdate`</ph> member function belonging to all views in the frame window to be called.","source":"Causes the `OnInitialUpdate` member function belonging to all views in the frame window to be called."},{"pos":[3396,3447],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::InModalState<ept id=\"p1\">](#cframewnd__inmodalstate)</ept>","source":"[CFrameWnd::InModalState](#cframewnd__inmodalstate)"},{"content":"Returns a value indicating whether or not a frame window is in a modal state.","pos":[3448,3525]},{"pos":[3530,3577],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::IsTracking<ept id=\"p1\">](#cframewnd__istracking)</ept>","source":"[CFrameWnd::IsTracking](#cframewnd__istracking)"},{"content":"Determines if splitter bar is currently being moved.","pos":[3578,3630]},{"pos":[3635,3690],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::LoadAccelTable<ept id=\"p1\">](#cframewnd__loadacceltable)</ept>","source":"[CFrameWnd::LoadAccelTable](#cframewnd__loadacceltable)"},{"content":"Call to load an accelerator table.","pos":[3691,3725]},{"pos":[3730,3781],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::LoadBarState<ept id=\"p1\">](#cframewnd__loadbarstate)</ept>","source":"[CFrameWnd::LoadBarState](#cframewnd__loadbarstate)"},{"content":"Call to restore control bar settings.","pos":[3782,3819]},{"pos":[3824,3869],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::LoadFrame<ept id=\"p1\">](#cframewnd__loadframe)</ept>","source":"[CFrameWnd::LoadFrame](#cframewnd__loadframe)"},{"content":"Call to dynamically create a frame window from resource information.","pos":[3870,3938]},{"pos":[3943,4010],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::NegotiateBorderSpace<ept id=\"p1\">](#cframewnd__negotiateborderspace)</ept>","source":"[CFrameWnd::NegotiateBorderSpace](#cframewnd__negotiateborderspace)"},{"content":"Negotiates border space in the frame window.","pos":[4011,4055]},{"pos":[4060,4107],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::OnBarCheck<ept id=\"p1\">](#cframewnd__onbarcheck)</ept>","source":"[CFrameWnd::OnBarCheck](#cframewnd__onbarcheck)"},{"content":"Called whenever an action is performed on the specified control bar.","pos":[4108,4176]},{"pos":[4181,4234],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::OnContextHelp<ept id=\"p1\">](#cframewnd__oncontexthelp)</ept>","source":"[CFrameWnd::OnContextHelp](#cframewnd__oncontexthelp)"},{"content":"Handles SHIFT+F1 Help for in-place items.","pos":[4235,4276]},{"pos":[4281,4340],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::OnSetPreviewMode<ept id=\"p1\">](#cframewnd__onsetpreviewmode)</ept>","source":"[CFrameWnd::OnSetPreviewMode](#cframewnd__onsetpreviewmode)"},{"content":"Sets the application's main frame window into and out of print-preview mode.","pos":[4341,4417]},{"pos":[4422,4493],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::OnUpdateControlBarMenu<ept id=\"p1\">](#cframewnd__onupdatecontrolbarmenu)</ept>","source":"[CFrameWnd::OnUpdateControlBarMenu](#cframewnd__onupdatecontrolbarmenu)"},{"content":"Called by the framework when the associated menu is updated.","pos":[4494,4554]},{"pos":[4559,4610],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::RecalcLayout<ept id=\"p1\">](#cframewnd__recalclayout)</ept>","source":"[CFrameWnd::RecalcLayout](#cframewnd__recalclayout)"},{"pos":[4611,4666],"content":"Repositions the control bars of the <ph id=\"ph1\">`CFrameWnd`</ph> object.","source":"Repositions the control bars of the `CFrameWnd` object."},{"pos":[4671,4722],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::SaveBarState<ept id=\"p1\">](#cframewnd__savebarstate)</ept>","source":"[CFrameWnd::SaveBarState](#cframewnd__savebarstate)"},{"content":"Call to save control bar settings.","pos":[4723,4757]},{"pos":[4762,4829],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::SetActivePreviewView<ept id=\"p1\">](#cframewnd__setactivepreviewview)</ept>","source":"[CFrameWnd::SetActivePreviewView](#cframewnd__setactivepreviewview)"},{"content":"Designates the specified view to be the active view for Rich Preview.","pos":[4830,4899]},{"pos":[4904,4957],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::SetActiveView<ept id=\"p1\">](#cframewnd__setactiveview)</ept>","source":"[CFrameWnd::SetActiveView](#cframewnd__setactiveview)"},{"pos":[4958,4989],"content":"Sets the active <ph id=\"ph1\">`CView`</ph> object.","source":"Sets the active `CView` object."},{"pos":[4994,5045],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::SetDockState<ept id=\"p1\">](#cframewnd__setdockstate)</ept>","source":"[CFrameWnd::SetDockState](#cframewnd__setdockstate)"},{"content":"Call to dock the frame window in the main window.","pos":[5046,5095]},{"pos":[5100,5157],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::SetMenuBarState<ept id=\"p1\">](#cframewnd__setmenubarstate)</ept>","source":"[CFrameWnd::SetMenuBarState](#cframewnd__setmenubarstate)"},{"content":"Sets the display state of the menu in the current MFC application to hidden or displayed.","pos":[5158,5247]},{"pos":[5252,5319],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::SetMenuBarVisibility<ept id=\"p1\">](#cframewnd__setmenubarvisibility)</ept>","source":"[CFrameWnd::SetMenuBarVisibility](#cframewnd__setmenubarvisibility)"},{"content":"Sets the default behavior of the menu in the current MFC application to be either hidden or visible.","pos":[5320,5420]},{"pos":[5425,5480],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::SetMessageText<ept id=\"p1\">](#cframewnd__setmessagetext)</ept>","source":"[CFrameWnd::SetMessageText](#cframewnd__setmessagetext)"},{"content":"Sets the text of a standard status bar.","pos":[5481,5520]},{"pos":[5525,5596],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::SetProgressBarPosition<ept id=\"p1\">](#cframewnd__setprogressbarposition)</ept>","source":"[CFrameWnd::SetProgressBarPosition](#cframewnd__setprogressbarposition)"},{"content":"Sets current position for Windows 7 progress bar displayed on taskbar.","pos":[5597,5667]},{"pos":[5672,5737],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::SetProgressBarRange<ept id=\"p1\">](#cframewnd__setprogressbarrange)</ept>","source":"[CFrameWnd::SetProgressBarRange](#cframewnd__setprogressbarrange)"},{"content":"Sets range for Windows 7 progress bar displayed on taskbar.","pos":[5738,5797]},{"pos":[5802,5867],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::SetProgressBarState<ept id=\"p1\">](#cframewnd__setprogressbarstate)</ept>","source":"[CFrameWnd::SetProgressBarState](#cframewnd__setprogressbarstate)"},{"content":"Sets the type and state of the progress indicator displayed on a taskbar button.","pos":[5868,5948]},{"pos":[5953,6022],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::SetTaskbarOverlayIcon<ept id=\"p1\">](#cframewnd__settaskbaroverlayicon)</ept>","source":"[CFrameWnd::SetTaskbarOverlayIcon](#cframewnd__settaskbaroverlayicon)"},{"content":"Overloaded.","pos":[6023,6034]},{"content":"Applies an overlay to a taskbar button to indicate application status or a notification to the user.","pos":[6035,6135]},{"pos":[6140,6183],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::SetTitle<ept id=\"p1\">](#cframewnd__settitle)</ept>","source":"[CFrameWnd::SetTitle](#cframewnd__settitle)"},{"content":"Sets the title of the related control bar.","pos":[6184,6226]},{"pos":[6231,6286],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::ShowControlBar<ept id=\"p1\">](#cframewnd__showcontrolbar)</ept>","source":"[CFrameWnd::ShowControlBar](#cframewnd__showcontrolbar)"},{"content":"Call to show the control bar.","pos":[6287,6316]},{"pos":[6321,6380],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::ShowOwnedWindows<ept id=\"p1\">](#cframewnd__showownedwindows)</ept>","source":"[CFrameWnd::ShowOwnedWindows](#cframewnd__showownedwindows)"},{"pos":[6381,6446],"content":"Shows all windows that are descendants of the <ph id=\"ph1\">`CFrameWnd`</ph> object.","source":"Shows all windows that are descendants of the `CFrameWnd` object."},{"pos":[6457,6474],"content":"Protected Methods","linkify":"Protected Methods","nodes":[{"content":"Protected Methods","pos":[0,17]}]},{"content":"Name","pos":[6481,6485]},{"content":"Description","pos":[6486,6497]},{"pos":[6535,6590],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::OnCreateClient<ept id=\"p1\">](#cframewnd__oncreateclient)</ept>","source":"[CFrameWnd::OnCreateClient](#cframewnd__oncreateclient)"},{"content":"Creates a client window for the frame.","pos":[6591,6629]},{"pos":[6634,6687],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::OnHideMenuBar<ept id=\"p1\">](#cframewnd__onhidemenubar)</ept>","source":"[CFrameWnd::OnHideMenuBar](#cframewnd__onhidemenubar)"},{"content":"Called before the menu in the current MFC application is hidden.","pos":[6688,6752]},{"pos":[6757,6810],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::OnShowMenuBar<ept id=\"p1\">](#cframewnd__onshowmenubar)</ept>","source":"[CFrameWnd::OnShowMenuBar](#cframewnd__onshowmenubar)"},{"content":"Called before the menu in the current MFC application is displayed.","pos":[6811,6878]},{"pos":[6889,6908],"content":"Public Data Members","linkify":"Public Data Members","nodes":[{"content":"Public Data Members","pos":[0,19]}]},{"content":"Name","pos":[6915,6919]},{"content":"Description","pos":[6920,6931]},{"pos":[6969,7030],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::m_bAutoMenuEnable<ept id=\"p1\">](#cframewnd__m_bautomenuenable)</ept>","source":"[CFrameWnd::m_bAutoMenuEnable](#cframewnd__m_bautomenuenable)"},{"content":"Controls automatic enable and disable functionality for menu items.","pos":[7031,7098]},{"pos":[7103,7152],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd::rectDefault<ept id=\"p1\">](#cframewnd__rectdefault)</ept>","source":"[CFrameWnd::rectDefault](#cframewnd__rectdefault)"},{"pos":[7153,7294],"content":"Pass this static <ph id=\"ph1\">`CRect`</ph> as a parameter when creating a <ph id=\"ph2\">`CFrameWnd`</ph> object to allow Windows to choose the window's initial size and position.","source":"Pass this static `CRect` as a parameter when creating a `CFrameWnd` object to allow Windows to choose the window's initial size and position."},{"pos":[7304,7311],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To create a useful frame window for your application, derive a class from <ph id=\"ph1\">`CFrameWnd`</ph>.","pos":[7315,7401],"source":"To create a useful frame window for your application, derive a class from `CFrameWnd`."},{"content":"Add member variables to the derived class to store data specific to your application.","pos":[7402,7487]},{"content":"Implement message-handler member functions and a message map in the derived class to specify what happens when messages are directed to the window.","pos":[7488,7635]},{"content":"There are three ways to construct a frame window:","pos":[7642,7691]},{"pos":[7701,7758],"content":"Directly construct it using <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](#cframewnd__create)</ept>.","source":"Directly construct it using [Create](#cframewnd__create)."},{"pos":[7768,7831],"content":"Directly construct it using <bpt id=\"p1\">[</bpt>LoadFrame<ept id=\"p1\">](#cframewnd__loadframe)</ept>.","source":"Directly construct it using [LoadFrame](#cframewnd__loadframe)."},{"content":"Indirectly construct it using a document template.","pos":[7841,7891]},{"content":"Before you call either <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> or <ph id=\"ph1\">`LoadFrame`</ph>, you must construct the frame-window object on the heap using the C++ <bpt id=\"p2\">**</bpt>new<ept id=\"p2\">**</ept> operator.","pos":[7898,8034],"source":"Before you call either **Create** or `LoadFrame`, you must construct the frame-window object on the heap using the C++ **new** operator."},{"content":"Before calling <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>, you can also register a window class with the <bpt id=\"p2\">[</bpt>AfxRegisterWndClass<ept id=\"p2\">](../../mfc/reference/application-information-and-management.md#afxregisterwndclass)</ept> global function to set the icon and class styles for the frame.","pos":[8035,8276],"source":" Before calling **Create**, you can also register a window class with the [AfxRegisterWndClass](../../mfc/reference/application-information-and-management.md#afxregisterwndclass) global function to set the icon and class styles for the frame."},{"pos":[8283,8381],"content":"Use the <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> member function to pass the frame's creation parameters as immediate arguments.","source":"Use the **Create** member function to pass the frame's creation parameters as immediate arguments."},{"content":"<ph id=\"ph1\">`LoadFrame`</ph> requires fewer arguments than <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>, and instead retrieves most of its default values from resources, including the frame's caption, icon, accelerator table, and menu.","pos":[8388,8572],"source":"`LoadFrame` requires fewer arguments than **Create**, and instead retrieves most of its default values from resources, including the frame's caption, icon, accelerator table, and menu."},{"content":"To be accessible by <ph id=\"ph1\">`LoadFrame`</ph>, all these resources must have the same resource ID (for example, <bpt id=\"p1\">**</bpt>IDR_MAINFRAME<ept id=\"p1\">**</ept>).","pos":[8573,8690],"source":" To be accessible by `LoadFrame`, all these resources must have the same resource ID (for example, **IDR_MAINFRAME**)."},{"content":"When a <ph id=\"ph1\">`CFrameWnd`</ph> object contains views and documents, they are created indirectly by the framework instead of directly by the programmer.","pos":[8697,8836],"source":"When a `CFrameWnd` object contains views and documents, they are created indirectly by the framework instead of directly by the programmer."},{"content":"The <ph id=\"ph1\">`CDocTemplate`</ph> object orchestrates the creation of the frame, the creation of the containing views, and the connection of the views to the appropriate document.","pos":[8837,9001],"source":" The `CDocTemplate` object orchestrates the creation of the frame, the creation of the containing views, and the connection of the views to the appropriate document."},{"content":"The parameters of the <ph id=\"ph1\">`CDocTemplate`</ph> constructor specify the <ph id=\"ph2\">`CRuntimeClass`</ph> of the three classes involved (document, frame, and view).","pos":[9002,9137],"source":" The parameters of the `CDocTemplate` constructor specify the `CRuntimeClass` of the three classes involved (document, frame, and view)."},{"content":"A <ph id=\"ph1\">`CRuntimeClass`</ph> object is used by the framework to dynamically create new frames when specified by the user (for example, by using the File New command or the multiple document interface (MDI) Window New command).","pos":[9138,9353],"source":" A `CRuntimeClass` object is used by the framework to dynamically create new frames when specified by the user (for example, by using the File New command or the multiple document interface (MDI) Window New command)."},{"pos":[9360,9515],"content":"A frame-window class derived from <ph id=\"ph1\">`CFrameWnd`</ph> must be declared with <ph id=\"ph2\">`DECLARE_DYNCREATE`</ph> in order for the above <ph id=\"ph3\">`RUNTIME_CLASS`</ph> mechanism to work correctly.","source":"A frame-window class derived from `CFrameWnd` must be declared with `DECLARE_DYNCREATE` in order for the above `RUNTIME_CLASS` mechanism to work correctly."},{"pos":[9522,9658],"content":"A <ph id=\"ph1\">`CFrameWnd`</ph> contains default implementations to perform the following functions of a main window in a typical application for Windows:","source":"A `CFrameWnd` contains default implementations to perform the following functions of a main window in a typical application for Windows:"},{"content":"A <ph id=\"ph1\">`CFrameWnd`</ph> frame window keeps track of a currently active view that is independent of the Windows active window or the current input focus.","pos":[9668,9810],"source":"A `CFrameWnd` frame window keeps track of a currently active view that is independent of the Windows active window or the current input focus."},{"content":"When the frame is reactivated, the active view is notified by calling <ph id=\"ph1\">`CView::OnActivateView`</ph>.","pos":[9811,9905],"source":" When the frame is reactivated, the active view is notified by calling `CView::OnActivateView`."},{"pos":[9915,10145],"content":"Command messages and many common frame-notification messages, including those handled by the <ph id=\"ph1\">`OnSetFocus`</ph>, <ph id=\"ph2\">`OnHScroll`</ph>, and <ph id=\"ph3\">`OnVScroll`</ph> functions of <ph id=\"ph4\">`CWnd`</ph>, are delegated by a <ph id=\"ph5\">`CFrameWnd`</ph> frame window to the currently active view.","source":"Command messages and many common frame-notification messages, including those handled by the `OnSetFocus`, `OnHScroll`, and `OnVScroll` functions of `CWnd`, are delegated by a `CFrameWnd` frame window to the currently active view."},{"content":"The currently active view (or currently active MDI child frame window in the case of an MDI frame) can determine the caption of the frame window.","pos":[10155,10300]},{"content":"This feature can be disabled by turning off the <bpt id=\"p1\">**</bpt>FWS_ADDTOTITLE<ept id=\"p1\">**</ept> style bit of the frame window.","pos":[10301,10398],"source":" This feature can be disabled by turning off the **FWS_ADDTOTITLE** style bit of the frame window."},{"content":"A <ph id=\"ph1\">`CFrameWnd`</ph> frame window manages the positioning of the control bars, views, and other child windows inside the frame window's client area.","pos":[10408,10549],"source":"A `CFrameWnd` frame window manages the positioning of the control bars, views, and other child windows inside the frame window's client area."},{"content":"A frame window also does idle-time updating of toolbar and other control-bar buttons.","pos":[10550,10635]},{"content":"A <ph id=\"ph1\">`CFrameWnd`</ph> frame window also has default implementations of commands for toggling on and off the toolbar and status bar.","pos":[10636,10759],"source":" A `CFrameWnd` frame window also has default implementations of commands for toggling on and off the toolbar and status bar."},{"content":"A <ph id=\"ph1\">`CFrameWnd`</ph> frame window manages the main menu bar.","pos":[10769,10822],"source":"A `CFrameWnd` frame window manages the main menu bar."},{"content":"When a pop-up menu is displayed, the frame window uses the <bpt id=\"p1\">**</bpt>UPDATE_COMMAND_UI<ept id=\"p1\">**</ept> mechanism to determine which menu items should be enabled, disabled, or checked.","pos":[10823,10984],"source":" When a pop-up menu is displayed, the frame window uses the **UPDATE_COMMAND_UI** mechanism to determine which menu items should be enabled, disabled, or checked."},{"content":"When the user selects a menu item, the frame window updates the status bar with the message string for that command.","pos":[10985,11101]},{"pos":[11111,11224],"content":"A <ph id=\"ph1\">`CFrameWnd`</ph> frame window has an optional accelerator table that automatically translates keyboard accelerators.","source":"A `CFrameWnd` frame window has an optional accelerator table that automatically translates keyboard accelerators."},{"content":"A <ph id=\"ph1\">`CFrameWnd`</ph> frame window has an optional help ID set with <ph id=\"ph2\">`LoadFrame`</ph> that is used for context-sensitive help.","pos":[11234,11346],"source":"A `CFrameWnd` frame window has an optional help ID set with `LoadFrame` that is used for context-sensitive help."},{"content":"A frame window is the main orchestrator of semimodal states such as context-sensitive help (SHIFT+F1) and print-preview modes.","pos":[11347,11473]},{"content":"A <ph id=\"ph1\">`CFrameWnd`</ph> frame window will open a file dragged from the File Manager and dropped on the frame window.","pos":[11483,11589],"source":"A `CFrameWnd` frame window will open a file dragged from the File Manager and dropped on the frame window."},{"content":"If a file extension is registered and associated with the application, the frame window responds to the dynamic data exchange (DDE) open request that occurs when the user opens a data file in the File Manager or when the <bpt id=\"p1\">**</bpt>ShellExecute<ept id=\"p1\">**</ept> Windows function is called.","pos":[11590,11855],"source":" If a file extension is registered and associated with the application, the frame window responds to the dynamic data exchange (DDE) open request that occurs when the user opens a data file in the File Manager or when the **ShellExecute** Windows function is called."},{"pos":[11865,12096],"content":"If the frame window is the main application window (that is, <ph id=\"ph1\">`CWinThread::m_pMainWnd`</ph>), when the user closes the application, the frame window prompts the user to save any modified documents (for <ph id=\"ph2\">`OnClose`</ph> and <ph id=\"ph3\">`OnQueryEndSession`</ph>).","source":"If the frame window is the main application window (that is, `CWinThread::m_pMainWnd`), when the user closes the application, the frame window prompts the user to save any modified documents (for `OnClose` and `OnQueryEndSession`)."},{"content":"If the frame window is the main application window, the frame window is the context for running WinHelp.","pos":[12106,12210]},{"content":"Closing the frame window will shut down WINHELP.EXE if it was launched for help for this application.","pos":[12211,12312]},{"content":"Do not use the C++ <bpt id=\"p1\">**</bpt>delete<ept id=\"p1\">**</ept> operator to destroy a frame window.","pos":[12319,12384],"source":"Do not use the C++ **delete** operator to destroy a frame window."},{"content":"Use <ph id=\"ph1\">`CWnd::DestroyWindow`</ph> instead.","pos":[12385,12419],"source":" Use `CWnd::DestroyWindow` instead."},{"content":"The <ph id=\"ph1\">`CFrameWnd`</ph> implementation of <ph id=\"ph2\">`PostNcDestroy`</ph> will delete the C++ object when the window is destroyed.","pos":[12420,12526],"source":" The `CFrameWnd` implementation of `PostNcDestroy` will delete the C++ object when the window is destroyed."},{"content":"When the user closes the frame window, the default <ph id=\"ph1\">`OnClose`</ph> handler will call <ph id=\"ph2\">`DestroyWindow`</ph>.","pos":[12527,12622],"source":" When the user closes the frame window, the default `OnClose` handler will call `DestroyWindow`."},{"pos":[12629,12714],"content":"For more information on <ph id=\"ph1\">`CFrameWnd`</ph>, see <bpt id=\"p1\">[</bpt>Frame Windows<ept id=\"p1\">](../../mfc/frame-windows.md)</ept>.","source":"For more information on `CFrameWnd`, see [Frame Windows](../../mfc/frame-windows.md)."},{"pos":[12723,12744],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[12748,12795],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[12802,12855],"content":"<bpt id=\"p1\">[</bpt>CCmdTarget<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept>","source":"[CCmdTarget](../../mfc/reference/ccmdtarget-class.md)"},{"pos":[12862,12903],"content":"<bpt id=\"p1\">[</bpt>CWnd<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept>","source":"[CWnd](../../mfc/reference/cwnd-class.md)"},{"pos":[12930,12942],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[12946,12966],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxwin.h","source":"**Header:** afxwin.h"},{"pos":[12976,13041],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__activateframe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::ActivateFrame","linkify":"<a name=\"cframewnd__activateframe\"></a>  CFrameWnd::ActivateFrame","source":"<a name=\"cframewnd__activateframe\"></a>  CFrameWnd::ActivateFrame"},{"content":"Call this member function to activate and restore the frame window so that it is visible and available to the user.","pos":[13045,13160]},{"pos":[13232,13242],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the parameter to pass to <bpt id=\"p1\">[</bpt>CWnd::ShowWindow<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__showwindow)</ept>.","pos":[13260,13366],"source":" Specifies the parameter to pass to [CWnd::ShowWindow](../../mfc/reference/cwnd-class.md#cwnd__showwindow)."},{"content":"By default, the frame is shown and correctly restored.","pos":[13367,13421]},{"pos":[13431,13438],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This member function is usually called after a non-user interface event such as a DDE, OLE, or other event that may show the frame window or its contents to the user.","pos":[13442,13608]},{"content":"The default implementation activates the frame and brings it to the top of the Z-order and, if necessary, carries out the same steps for the application's main frame window.","pos":[13615,13788]},{"content":"Override this member function to change how a frame is activated.","pos":[13795,13860]},{"content":"For example, you can force MDI child windows to be maximized.","pos":[13861,13922]},{"content":"Add the appropriate functionality, then call the base class version with an explicit <ph id=\"ph1\">`nCmdShow`</ph>.","pos":[13923,14019],"source":" Add the appropriate functionality, then call the base class version with an explicit `nCmdShow`."},{"pos":[14029,14036],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[14040,14130],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCWindowing#1<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cframewnd-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCWindowing#1](../../mfc/reference/codesnippet/cpp/cframewnd-class_1.cpp)]"},{"pos":[14140,14209],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__beginmodalstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::BeginModalState","linkify":"<a name=\"cframewnd__beginmodalstate\"></a>  CFrameWnd::BeginModalState","source":"<a name=\"cframewnd__beginmodalstate\"></a>  CFrameWnd::BeginModalState"},{"content":"Call this member function to make a frame window modal.","pos":[14213,14268]},{"pos":[14325,14382],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__cframewnd\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::CFrameWnd","linkify":"<a name=\"cframewnd__cframewnd\"></a>  CFrameWnd::CFrameWnd","source":"<a name=\"cframewnd__cframewnd\"></a>  CFrameWnd::CFrameWnd"},{"pos":[14386,14464],"content":"Constructs a <ph id=\"ph1\">`CFrameWnd`</ph> object, but does not create the visible frame window.","source":"Constructs a `CFrameWnd` object, but does not create the visible frame window."},{"pos":[14502,14509],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14513,14558],"content":"Call <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> to create the visible window.","source":"Call **Create** to create the visible window."},{"pos":[14568,14619],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__create\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::Create","linkify":"<a name=\"cframewnd__create\"></a>  CFrameWnd::Create","source":"<a name=\"cframewnd__create\"></a>  CFrameWnd::Create"},{"pos":[14623,14717],"content":"Call to create and initialize the Windows frame window associated with the <ph id=\"ph1\">`CFrameWnd`</ph> object.","source":"Call to create and initialize the Windows frame window associated with the `CFrameWnd` object."},{"pos":[15034,15044],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to a null-terminated character string that names the Windows class.","pos":[15067,15141]},{"content":"The class name can be any name registered with the <ph id=\"ph1\">`AfxRegisterWndClass`</ph> global function or the <bpt id=\"p1\">**</bpt>RegisterClass<ept id=\"p1\">**</ept> Windows function.","pos":[15142,15273],"source":" The class name can be any name registered with the `AfxRegisterWndClass` global function or the **RegisterClass** Windows function."},{"content":"If <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, uses the predefined default <ph id=\"ph1\">`CFrameWnd`</ph> attributes.","pos":[15274,15338],"source":" If **NULL**, uses the predefined default `CFrameWnd` attributes."},{"content":"Points to a null-terminated character string that represents the window name.","pos":[15365,15442]},{"content":"Used as text for the title bar.","pos":[15443,15474]},{"content":"Specifies the window <bpt id=\"p1\">[</bpt>style<ept id=\"p1\">](../../mfc/reference/window-styles.md)</ept> attributes.","pos":[15494,15572],"source":" Specifies the window [style](../../mfc/reference/window-styles.md) attributes."},{"content":"Include the <bpt id=\"p1\">**</bpt>FWS_ADDTOTITLE<ept id=\"p1\">**</ept> style if you want the title bar to automatically display the name of the document represented in the window.","pos":[15573,15712],"source":" Include the **FWS_ADDTOTITLE** style if you want the title bar to automatically display the name of the document represented in the window."},{"content":"Specifies the size and position of the window.","pos":[15729,15775]},{"content":"The <ph id=\"ph1\">`rectDefault`</ph> value allows Windows to specify the size and position of the new window.","pos":[15776,15866],"source":" The `rectDefault` value allows Windows to specify the size and position of the new window."},{"content":"Specifies the parent window of this frame window.","pos":[15889,15938]},{"content":"This parameter should be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> for top-level frame windows.","pos":[15939,16001],"source":" This parameter should be **NULL** for top-level frame windows."},{"content":"<bpt id=\"p1\">*</bpt>lpszMenuName<ept id=\"p1\">*</ept>","pos":[16008,16022],"source":"*lpszMenuName*"},{"content":"Identifies the name of the menu resource to be used with the window.","pos":[16026,16094]},{"content":"Use <bpt id=\"p1\">**</bpt>MAKEINTRESOURCE<ept id=\"p1\">**</ept> if the menu has an integer ID instead of a string.","pos":[16095,16169],"source":" Use **MAKEINTRESOURCE** if the menu has an integer ID instead of a string."},{"content":"This parameter can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[16170,16201],"source":" This parameter can be **NULL**."},{"content":"Specifies the window extended <bpt id=\"p1\">[</bpt>style<ept id=\"p1\">](../../mfc/reference/extended-window-styles.md)</ept> attributes.","pos":[16223,16319],"source":" Specifies the window extended [style](../../mfc/reference/extended-window-styles.md) attributes."},{"content":"Specifies a pointer to a <bpt id=\"p1\">[</bpt>CCreateContext<ept id=\"p1\">](../../mfc/reference/ccreatecontext-structure.md)</ept> structure.","pos":[16340,16441],"source":" Specifies a pointer to a [CCreateContext](../../mfc/reference/ccreatecontext-structure.md) structure."},{"content":"This parameter can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[16442,16473],"source":" This parameter can be **NULL**."},{"pos":[16483,16495],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if initialization is successful; otherwise 0.","pos":[16499,16552]},{"pos":[16562,16569],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Construct a <ph id=\"ph1\">`CFrameWnd`</ph> object in two steps.","pos":[16573,16617],"source":"Construct a `CFrameWnd` object in two steps."},{"content":"First, invoke the constructor, which constructs the <ph id=\"ph1\">`CFrameWnd`</ph> object, and then call <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>, which creates the Windows frame window and attaches it to the <ph id=\"ph2\">`CFrameWnd`</ph> object.","pos":[16618,16797],"source":" First, invoke the constructor, which constructs the `CFrameWnd` object, and then call **Create**, which creates the Windows frame window and attaches it to the `CFrameWnd` object."},{"content":"<bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> initializes the window's class name and window name and registers default values for its style, parent, and associated menu.","pos":[16798,16933],"source":"**Create** initializes the window's class name and window name and registers default values for its style, parent, and associated menu."},{"pos":[16940,17056],"content":"Use <ph id=\"ph1\">`LoadFrame`</ph> rather than <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> to load the frame window from a resource instead of specifying its arguments.","source":"Use `LoadFrame` rather than **Create** to load the frame window from a resource instead of specifying its arguments."},{"pos":[17066,17125],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__createview\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::CreateView","linkify":"<a name=\"cframewnd__createview\"></a>  CFrameWnd::CreateView","source":"<a name=\"cframewnd__createview\"></a>  CFrameWnd::CreateView"},{"pos":[17129,17179],"content":"Call <ph id=\"ph1\">`CreateView`</ph> to create a view within a frame.","source":"Call `CreateView` to create a view within a frame."},{"pos":[17290,17300],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the type of view and document.","pos":[17318,17358]},{"content":"The ID number of a view.","pos":[17374,17398]},{"pos":[17408,17420],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17424,17485],"content":"Pointer to a <ph id=\"ph1\">`CWnd`</ph> object if successful; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"Pointer to a `CWnd` object if successful; otherwise **NULL**."},{"pos":[17495,17502],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use this member function to create \"views\" that are not <ph id=\"ph1\">`CView`</ph>-derived within a frame.","pos":[17506,17593],"source":"Use this member function to create \"views\" that are not `CView`-derived within a frame."},{"content":"After calling <ph id=\"ph1\">`CreateView`</ph>, you must manually set the view to active and set it to be visible; these tasks are not automatically performed by <ph id=\"ph2\">`CreateView`</ph>.","pos":[17594,17749],"source":" After calling `CreateView`, you must manually set the view to active and set it to be visible; these tasks are not automatically performed by `CreateView`."},{"pos":[17759,17826],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__dockcontrolbar\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::DockControlBar","linkify":"<a name=\"cframewnd__dockcontrolbar\"></a>  CFrameWnd::DockControlBar","source":"<a name=\"cframewnd__dockcontrolbar\"></a>  CFrameWnd::DockControlBar"},{"content":"Causes a control bar to be docked to the frame window.","pos":[17830,17884]},{"pos":[18010,18020],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to the control bar to be docked.","pos":[18034,18073]},{"content":"Determines which sides of the frame window to consider for docking.","pos":[18096,18163]},{"content":"It can be 0, or one or more of the following:","pos":[18164,18209]},{"pos":[18217,18280],"content":"<ph id=\"ph1\">`AFX_IDW_DOCKBAR_TOP`</ph> Dock to the top side of the frame window.","source":"`AFX_IDW_DOCKBAR_TOP` Dock to the top side of the frame window."},{"pos":[18288,18359],"content":"<bpt id=\"p1\">**</bpt>AFX_IDW_DOCKBAR_BOTTOM<ept id=\"p1\">**</ept> Dock to the bottom side of the frame window.","source":"**AFX_IDW_DOCKBAR_BOTTOM** Dock to the bottom side of the frame window."},{"pos":[18367,18432],"content":"<ph id=\"ph1\">`AFX_IDW_DOCKBAR_LEFT`</ph> Dock to the left side of the frame window.","source":"`AFX_IDW_DOCKBAR_LEFT` Dock to the left side of the frame window."},{"pos":[18440,18507],"content":"<ph id=\"ph1\">`AFX_IDW_DOCKBAR_RIGHT`</ph> Dock to the right side of the frame window.","source":"`AFX_IDW_DOCKBAR_RIGHT` Dock to the right side of the frame window."},{"content":"If 0, the control bar can be docked to any side enabled for docking in the destination frame window.","pos":[18514,18614]},{"pos":[18621,18759],"content":"`lpRect`  \nDetermines, in screen coordinates, where the control bar will be docked in the nonclient area of the destination frame window.","leadings":[""," "],"nodes":[{"content":"Determines, in screen coordinates, where the control bar will be docked in the nonclient area of the destination frame window.","pos":[11,137]}]},{"pos":[18769,18776],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The control bar will be docked to one of the sides of the frame window specified in the calls to both <bpt id=\"p1\">[</bpt>CControlBar::EnableDocking<ept id=\"p1\">](../../mfc/reference/ccontrolbar-class.md#ccontrolbar__enabledocking)</ept> and <bpt id=\"p2\">[</bpt>CFrameWnd::EnableDocking<ept id=\"p2\">](#cframewnd__enabledocking)</ept>.","pos":[18780,19038],"source":"The control bar will be docked to one of the sides of the frame window specified in the calls to both [CControlBar::EnableDocking](../../mfc/reference/ccontrolbar-class.md#ccontrolbar__enabledocking) and [CFrameWnd::EnableDocking](#cframewnd__enabledocking)."},{"content":"The side chosen is determined by <ph id=\"ph1\">`nDockBarID`</ph>.","pos":[19039,19085],"source":" The side chosen is determined by `nDockBarID`."},{"pos":[19095,19160],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__enabledocking\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::EnableDocking","linkify":"<a name=\"cframewnd__enabledocking\"></a>  CFrameWnd::EnableDocking","source":"<a name=\"cframewnd__enabledocking\"></a>  CFrameWnd::EnableDocking"},{"content":"Call this function to enable dockable control bars in a frame window.","pos":[19164,19233]},{"pos":[19297,19307],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies which sides of the frame window can serve as docking sites for control bars.","pos":[19328,19414]},{"content":"It can be one or more of the following:","pos":[19415,19454]},{"pos":[19462,19524],"content":"<ph id=\"ph1\">`CBRS_ALIGN_TOP`</ph> Allows docking at the top of the client area.","source":"`CBRS_ALIGN_TOP` Allows docking at the top of the client area."},{"pos":[19532,19600],"content":"<ph id=\"ph1\">`CBRS_ALIGN_BOTTOM`</ph> Allows docking at the bottom of the client area.","source":"`CBRS_ALIGN_BOTTOM` Allows docking at the bottom of the client area."},{"pos":[19608,19677],"content":"<ph id=\"ph1\">`CBRS_ALIGN_LEFT`</ph> Allows docking on the left side of the client area.","source":"`CBRS_ALIGN_LEFT` Allows docking on the left side of the client area."},{"pos":[19685,19756],"content":"<ph id=\"ph1\">`CBRS_ALIGN_RIGHT`</ph> Allows docking on the right side of the client area.","source":"`CBRS_ALIGN_RIGHT` Allows docking on the right side of the client area."},{"pos":[19764,19827],"content":"<ph id=\"ph1\">`CBRS_ALIGN_ANY`</ph> Allows docking on any side of the client area.","source":"`CBRS_ALIGN_ANY` Allows docking on any side of the client area."},{"pos":[19837,19844],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, control bars will be docked to a side of the frame window in the following order: top, bottom, left, right.","pos":[19848,19967]},{"pos":[19977,19984],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[19989,20084],"content":"See the example for <bpt id=\"p1\">[</bpt>CToolBar::Create<ept id=\"p1\">](../../mfc/reference/ctoolbar-class.md#ctoolbar__create)</ept>.","source":"See the example for [CToolBar::Create](../../mfc/reference/ctoolbar-class.md#ctoolbar__create)."},{"pos":[20094,20159],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__endmodalstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::EndModalState","linkify":"<a name=\"cframewnd__endmodalstate\"></a>  CFrameWnd::EndModalState","source":"<a name=\"cframewnd__endmodalstate\"></a>  CFrameWnd::EndModalState"},{"content":"Call this member function to change a frame window from modal to modeless.","pos":[20163,20237]},{"pos":[20292,20299],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[20303,20405],"content":"<ph id=\"ph1\">`EndModalState`</ph> enables all of the windows disabled by <bpt id=\"p1\">[</bpt>BeginModalState<ept id=\"p1\">](#cframewnd__beginmodalstate)</ept>.","source":"`EndModalState` enables all of the windows disabled by [BeginModalState](#cframewnd__beginmodalstate)."},{"pos":[20415,20484],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__floatcontrolbar\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::FloatControlBar","linkify":"<a name=\"cframewnd__floatcontrolbar\"></a>  CFrameWnd::FloatControlBar","source":"<a name=\"cframewnd__floatcontrolbar\"></a>  CFrameWnd::FloatControlBar"},{"content":"Call this function to cause a control bar to not be docked to the frame window.","pos":[20488,20567]},{"pos":[20696,20706],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to the control bar to be floated.","pos":[20720,20760]},{"content":"The location, in screen coordinates, where the top left corner of the control bar will be placed.","pos":[20778,20875]},{"content":"Specifies whether to align the control bar horizontally or vertically within its new frame window.","pos":[20895,20993]},{"content":"It can be any one of the following:","pos":[20994,21029]},{"pos":[21037,21089],"content":"<ph id=\"ph1\">`CBRS_ALIGN_TOP`</ph> Orients the control bar vertically.","source":"`CBRS_ALIGN_TOP` Orients the control bar vertically."},{"pos":[21097,21152],"content":"<ph id=\"ph1\">`CBRS_ALIGN_BOTTOM`</ph> Orients the control bar vertically.","source":"`CBRS_ALIGN_BOTTOM` Orients the control bar vertically."},{"pos":[21160,21215],"content":"<ph id=\"ph1\">`CBRS_ALIGN_LEFT`</ph> Orients the control bar horizontally.","source":"`CBRS_ALIGN_LEFT` Orients the control bar horizontally."},{"pos":[21223,21279],"content":"<ph id=\"ph1\">`CBRS_ALIGN_RIGHT`</ph> Orients the control bar horizontally.","source":"`CBRS_ALIGN_RIGHT` Orients the control bar horizontally."},{"content":"If styles are passed specifying both horizontal and vertical orientation, the toolbar will be oriented horizontally.","pos":[21286,21402]},{"pos":[21412,21419],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, this is done at application startup when the program is restoring settings from the previous execution.","pos":[21423,21537]},{"content":"This function is called by the framework when the user causes a drop operation by releasing the left mouse button while dragging the control bar over a location that is not available for docking.","pos":[21544,21739]},{"pos":[21749,21822],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__getactivedocument\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::GetActiveDocument","linkify":"<a name=\"cframewnd__getactivedocument\"></a>  CFrameWnd::GetActiveDocument","source":"<a name=\"cframewnd__getactivedocument\"></a>  CFrameWnd::GetActiveDocument"},{"pos":[21826,21937],"content":"Call this member function to obtain a pointer to the current <bpt id=\"p1\">**</bpt>CDocument<ept id=\"p1\">**</ept> attached to the current active view.","source":"Call this member function to obtain a pointer to the current **CDocument** attached to the current active view."},{"pos":[22002,22014],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the current <bpt id=\"p1\">[</bpt>CDocument<ept id=\"p1\">](../../mfc/reference/cdocument-class.md)</ept>.","pos":[22018,22095],"source":"A pointer to the current [CDocument](../../mfc/reference/cdocument-class.md)."},{"content":"If there is no current document, returns <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[22096,22146],"source":" If there is no current document, returns **NULL**."},{"pos":[22156,22223],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__getactiveframe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::GetActiveFrame","linkify":"<a name=\"cframewnd__getactiveframe\"></a>  CFrameWnd::GetActiveFrame","source":"<a name=\"cframewnd__getactiveframe\"></a>  CFrameWnd::GetActiveFrame"},{"content":"Call this member function to obtain a pointer to the active multiple document interface (MDI) child window of an MDI frame window.","pos":[22227,22357]},{"pos":[22419,22431],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the active MDI child window.","pos":[22435,22476]},{"content":"If the application is an SDI application, or the MDI frame window has no active document, the implicit <bpt id=\"p1\">**</bpt>this<ept id=\"p1\">**</ept> pointer will be returned.","pos":[22477,22614],"source":" If the application is an SDI application, or the MDI frame window has no active document, the implicit **this** pointer will be returned."},{"pos":[22624,22631],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[22635,22766],"content":"If there is no active MDI child or the application is a single document interface (SDI), the implicit <bpt id=\"p1\">**</bpt>this<ept id=\"p1\">**</ept> pointer is returned.","source":"If there is no active MDI child or the application is a single document interface (SDI), the implicit **this** pointer is returned."},{"pos":[22776,22841],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__getactiveview\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::GetActiveView","linkify":"<a name=\"cframewnd__getactiveview\"></a>  CFrameWnd::GetActiveView","source":"<a name=\"cframewnd__getactiveview\"></a>  CFrameWnd::GetActiveView"},{"pos":[22845,22961],"content":"Call this member function to obtain a pointer to the active view (if any) attached to a frame window ( <ph id=\"ph1\">`CFrameWnd`</ph>).","source":"Call this member function to obtain a pointer to the active view (if any) attached to a frame window ( `CFrameWnd`)."},{"pos":[23019,23031],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the current <bpt id=\"p1\">[</bpt>CView<ept id=\"p1\">](../../mfc/reference/cview-class.md)</ept>.","pos":[23035,23104],"source":"A pointer to the current [CView](../../mfc/reference/cview-class.md)."},{"content":"If there is no current view, returns <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[23105,23151],"source":" If there is no current view, returns **NULL**."},{"pos":[23161,23168],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function returns <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> when called for an MDI main frame window ( <ph id=\"ph1\">`CMDIFrameWnd`</ph>).","pos":[23172,23262],"source":"This function returns **NULL** when called for an MDI main frame window ( `CMDIFrameWnd`)."},{"content":"In an MDI application, the MDI main frame window does not have a view associated with it.","pos":[23263,23352]},{"content":"Instead, each individual child window ( <ph id=\"ph1\">`CMDIChildWnd`</ph>) has one or more associated views.","pos":[23353,23442],"source":" Instead, each individual child window ( `CMDIChildWnd`) has one or more associated views."},{"content":"The active view in an MDI application can be obtained by first finding the active MDI child window and then finding the active view for that child window.","pos":[23443,23597]},{"content":"The active MDI child window can be found by calling the function <ph id=\"ph1\">`MDIGetActive`</ph> or <bpt id=\"p1\">**</bpt>GetActiveFrame<ept id=\"p1\">**</ept> as demonstrated in the following:","pos":[23598,23733],"source":" The active MDI child window can be found by calling the function `MDIGetActive` or **GetActiveFrame** as demonstrated in the following:"},{"pos":[23740,23830],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCWindowing#2<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cframewnd-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCWindowing#2](../../mfc/reference/codesnippet/cpp/cframewnd-class_2.cpp)]"},{"pos":[23840,23905],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__getcontrolbar\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::GetControlBar","linkify":"<a name=\"cframewnd__getcontrolbar\"></a>  CFrameWnd::GetControlBar","source":"<a name=\"cframewnd__getcontrolbar\"></a>  CFrameWnd::GetControlBar"},{"pos":[23909,23995],"content":"Call <ph id=\"ph1\">`GetControlBar`</ph> to gain access to the control bar that is associated with the ID.","source":"Call `GetControlBar` to gain access to the control bar that is associated with the ID."},{"pos":[24058,24068],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The ID number of a control bar.","pos":[24081,24112]},{"pos":[24122,24134],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the control bar that is associated with the ID.","pos":[24138,24198]},{"pos":[24208,24215],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`nID`</ph> parameter refers to the unique identifier passed to the <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> method of the control bar.","pos":[24219,24322],"source":"The `nID` parameter refers to the unique identifier passed to the **Create** method of the control bar."},{"content":"For more information on control bars, refer to the topic entitled <bpt id=\"p1\">[</bpt>Control Bars<ept id=\"p1\">](../../mfc/control-bars.md)</ept>.","pos":[24323,24431],"source":" For more information on control bars, refer to the topic entitled [Control Bars](../../mfc/control-bars.md)."},{"pos":[24438,24559],"content":"<ph id=\"ph1\">`GetControlBar`</ph> will return the control bar even if it is floating and thus is not currently a child window of the frame.","source":"`GetControlBar` will return the control bar even if it is floating and thus is not currently a child window of the frame."},{"pos":[24569,24632],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__getdockstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::GetDockState","linkify":"<a name=\"cframewnd__getdockstate\"></a>  CFrameWnd::GetDockState","source":"<a name=\"cframewnd__getdockstate\"></a>  CFrameWnd::GetDockState"},{"pos":[24636,24752],"content":"Call this member function to store state information about the frame window's control bars in a <ph id=\"ph1\">`CDockState`</ph> object.","source":"Call this member function to store state information about the frame window's control bars in a `CDockState` object."},{"pos":[24824,24834],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Contains the current state of the frame window's control bars upon return.","pos":[24849,24923]},{"pos":[24933,24940],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can then write the contents of <ph id=\"ph1\">`CDockState`</ph> to storage using <ph id=\"ph2\">`CDockState::SaveState`</ph> or <ph id=\"ph3\">`Serialize`</ph>.","pos":[24944,25048],"source":"You can then write the contents of `CDockState` to storage using `CDockState::SaveState` or `Serialize`."},{"content":"If you later want to restore the control bars to a previous state, load the state with <ph id=\"ph1\">`CDockState::LoadState`</ph> or <ph id=\"ph2\">`Serialize`</ph>, then call <ph id=\"ph3\">`SetDockState`</ph> to apply the previous state to the frame window's control bars.","pos":[25049,25264],"source":" If you later want to restore the control bars to a previous state, load the state with `CDockState::LoadState` or `Serialize`, then call `SetDockState` to apply the previous state to the frame window's control bars."},{"pos":[25274,25343],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__getmenubarstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::GetMenuBarState","linkify":"<a name=\"cframewnd__getmenubarstate\"></a>  CFrameWnd::GetMenuBarState","source":"<a name=\"cframewnd__getmenubarstate\"></a>  CFrameWnd::GetMenuBarState"},{"content":"Retrieves the display state of the menu in the current MFC application.","pos":[25347,25418]},{"pos":[25476,25488],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The return value can have the following values:","pos":[25492,25539]},{"content":"AFX_MBS_VISIBLE (0x01) – The menu is visible.","pos":[25549,25594]},{"content":"AFX_MBS_HIDDEN (0x02) – The menu is hidden.","pos":[25604,25647]},{"pos":[25657,25664],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[25668,25830],"content":"If a runtime error occurs, this method asserts in Debug mode and raises an exception derived from the <bpt id=\"p1\">[</bpt>CException<ept id=\"p1\">](../../mfc/reference/cexception-class.md)</ept> class.","source":"If a runtime error occurs, this method asserts in Debug mode and raises an exception derived from the [CException](../../mfc/reference/cexception-class.md) class."},{"pos":[25840,25919],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__getmenubarvisibility\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::GetMenuBarVisibility","linkify":"<a name=\"cframewnd__getmenubarvisibility\"></a>  CFrameWnd::GetMenuBarVisibility","source":"<a name=\"cframewnd__getmenubarvisibility\"></a>  CFrameWnd::GetMenuBarVisibility"},{"content":"Indicates whether the default state of the menu in the current MFC application is hidden or visible.","pos":[25923,26023]},{"pos":[26097,26109],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"This method returns one of the following values:","pos":[26113,26161]},{"content":"AFX_MBV_KEEPVISIBLE (0x01) - The menu is displayed at all times, and by default does not have the focus.","pos":[26171,26275]},{"content":"AFX_MBV_DISPLAYONFOCUS (0x02) - The menu is hidden by default.","pos":[26285,26347]},{"content":"If the menu is hidden, press the ALT key to display the menu and give it the focus.","pos":[26348,26431]},{"content":"If the menu is displayed, press the ALT or ESC key to hide it.","pos":[26432,26494]},{"content":"AFX_MBV_ DISPLAYONFOCUS (0x02) &amp;#124; AFX_MBV_DISPLAYONF10 (0x04) (bitwise combination (OR)) - The menu is hidden by default.","pos":[26504,26629],"source":"AFX_MBV_ DISPLAYONFOCUS (0x02) &#124; AFX_MBV_DISPLAYONF10 (0x04) (bitwise combination (OR)) - The menu is hidden by default."},{"content":"If the menu is hidden, press the F10 key to display the menu and give it the focus.","pos":[26630,26713]},{"content":"If the menu is displayed, press the F10 key to toggle the focus on or off the menu.","pos":[26714,26797]},{"content":"The menu is displayed until you press the ALT or ESC key to hide it.","pos":[26798,26866]},{"pos":[26876,26883],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[26887,27049],"content":"If a runtime error occurs, this method asserts in Debug mode and raises an exception derived from the <bpt id=\"p1\">[</bpt>CException<ept id=\"p1\">](../../mfc/reference/cexception-class.md)</ept> class.","source":"If a runtime error occurs, this method asserts in Debug mode and raises an exception derived from the [CException](../../mfc/reference/cexception-class.md) class."},{"pos":[27059,27124],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__getmessagebar\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::GetMessageBar","linkify":"<a name=\"cframewnd__getmessagebar\"></a>  CFrameWnd::GetMessageBar","source":"<a name=\"cframewnd__getmessagebar\"></a>  CFrameWnd::GetMessageBar"},{"content":"Call this member function to get a pointer to the status bar.","pos":[27128,27189]},{"pos":[27245,27257],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Pointer to the status-bar window.","pos":[27261,27294]},{"pos":[27304,27375],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__getmessagestring\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::GetMessageString","linkify":"<a name=\"cframewnd__getmessagestring\"></a>  CFrameWnd::GetMessageString","source":"<a name=\"cframewnd__getmessagestring\"></a>  CFrameWnd::GetMessageString"},{"content":"Override this function to provide custom strings for command IDs.","pos":[27379,27444]},{"pos":[27549,27559],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Resource ID of the desired message.","pos":[27572,27607]},{"content":"<ph id=\"ph1\"> `CString`</ph> object into which to place the message.","pos":[27627,27677],"source":" `CString` object into which to place the message."},{"pos":[27687,27694],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation simply loads the string specified by <ph id=\"ph1\">`nID`</ph> from the resource file.","pos":[27698,27791],"source":"The default implementation simply loads the string specified by `nID` from the resource file."},{"content":"This function is called by the framework when the message string in the status bar needs updating.","pos":[27792,27890]},{"pos":[27900,27955],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__gettitle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::GetTitle","linkify":"<a name=\"cframewnd__gettitle\"></a>  CFrameWnd::GetTitle","source":"<a name=\"cframewnd__gettitle\"></a>  CFrameWnd::GetTitle"},{"content":"Retrieves the title of the window object.","pos":[27959,28000]},{"pos":[28054,28066],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[28070,28189],"content":"A <bpt id=\"p1\">[</bpt>CString<ept id=\"p1\">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object containing the current title of the window object.","source":"A [CString](../../atl-mfc-shared/reference/cstringt-class.md) object containing the current title of the window object."},{"pos":[28199,28274],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__initialupdateframe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::InitialUpdateFrame","linkify":"<a name=\"cframewnd__initialupdateframe\"></a>  CFrameWnd::InitialUpdateFrame","source":"<a name=\"cframewnd__initialupdateframe\"></a>  CFrameWnd::InitialUpdateFrame"},{"pos":[28278,28350],"content":"Call <bpt id=\"p1\">**</bpt>IntitialUpdateFrame<ept id=\"p1\">**</ept> after creating a new frame with <bpt id=\"p2\">**</bpt>Create<ept id=\"p2\">**</ept>.","source":"Call **IntitialUpdateFrame** after creating a new frame with **Create**."},{"pos":[28447,28457],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to the document to which the frame window is associated.","pos":[28471,28534]},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[28535,28551],"source":" Can be **NULL**."},{"content":"If <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, indicates that the frame should become visible and active.","pos":[28576,28647],"source":" If **TRUE**, indicates that the frame should become visible and active."},{"content":"If <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>, no descendants are made visible.","pos":[28648,28694],"source":" If **FALSE**, no descendants are made visible."},{"pos":[28704,28711],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[28715,28799],"content":"This causes all views in that frame window to receive their <ph id=\"ph1\">`OnInitialUpdate`</ph> calls.","source":"This causes all views in that frame window to receive their `OnInitialUpdate` calls."},{"content":"Also, if there was not previously an active view, the primary view of the frame window is made active.","pos":[28806,28908]},{"content":"The primary view is a view with a child ID of <bpt id=\"p1\">**</bpt>AFX_IDW_PANE_FIRST<ept id=\"p1\">**</ept>.","pos":[28909,28978],"source":" The primary view is a view with a child ID of **AFX_IDW_PANE_FIRST**."},{"content":"Finally, the frame window is made visible if <ph id=\"ph1\">`bMakeVisible`</ph> is nonzero.","pos":[28979,29050],"source":" Finally, the frame window is made visible if `bMakeVisible` is nonzero."},{"content":"If <ph id=\"ph1\">`bMakeVisible`</ph> is 0, the current focus and visible state of the frame window will remain unchanged.","pos":[29051,29153],"source":" If `bMakeVisible` is 0, the current focus and visible state of the frame window will remain unchanged."},{"content":"It is not necessary to call this function when using the framework's implementation of File New and File Open.","pos":[29154,29264]},{"pos":[29274,29337],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__inmodalstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::InModalState","linkify":"<a name=\"cframewnd__inmodalstate\"></a>  CFrameWnd::InModalState","source":"<a name=\"cframewnd__inmodalstate\"></a>  CFrameWnd::InModalState"},{"content":"Call this member function to check if a frame window is modal or modeless.","pos":[29341,29415]},{"pos":[29470,29482],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if yes; otherwise 0.","pos":[29486,29514]},{"pos":[29524,29583],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__istracking\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::IsTracking","linkify":"<a name=\"cframewnd__istracking\"></a>  CFrameWnd::IsTracking","source":"<a name=\"cframewnd__istracking\"></a>  CFrameWnd::IsTracking"},{"content":"Call this member function to determine if the splitter bar in the window is currently being moved.","pos":[29587,29685]},{"pos":[29738,29750],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if a splitter operation is in progress; otherwise 0.","pos":[29754,29814]},{"pos":[29824,29891],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__loadacceltable\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::LoadAccelTable","linkify":"<a name=\"cframewnd__loadacceltable\"></a>  CFrameWnd::LoadAccelTable","source":"<a name=\"cframewnd__loadacceltable\"></a>  CFrameWnd::LoadAccelTable"},{"content":"Call to load the specified accelerator table.","pos":[29895,29940]},{"pos":[30012,30022],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Identifies the name of the accelerator resource.","pos":[30048,30096]},{"content":"Use <bpt id=\"p1\">**</bpt>MAKEINTRESOURCE<ept id=\"p1\">**</ept> if the resource is identified with an integer ID.","pos":[30097,30170],"source":" Use **MAKEINTRESOURCE** if the resource is identified with an integer ID."},{"pos":[30180,30192],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the accelerator table was successfully loaded; otherwise 0.","pos":[30196,30266]},{"pos":[30276,30283],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Only one table can be loaded at a time.","pos":[30287,30326]},{"content":"Accelerator tables loaded from resources are freed automatically when the application terminates.","pos":[30333,30430]},{"pos":[30437,30636],"content":"If you call <ph id=\"ph1\">`LoadFrame`</ph> to create the frame window, the framework loads an accelerator table along with the menu and icon resources, and a subsequent call to this member function is then unnecessary.","source":"If you call `LoadFrame` to create the frame window, the framework loads an accelerator table along with the menu and icon resources, and a subsequent call to this member function is then unnecessary."},{"pos":[30646,30709],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__loadbarstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::LoadBarState","linkify":"<a name=\"cframewnd__loadbarstate\"></a>  CFrameWnd::LoadBarState","source":"<a name=\"cframewnd__loadbarstate\"></a>  CFrameWnd::LoadBarState"},{"content":"Call this function to restore the settings of each control bar owned by the frame window.","pos":[30713,30802]},{"pos":[30871,30881],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Name of a section in the initialization (INI) file or a key in the Windows registry where state information is stored.","pos":[30906,31024]},{"pos":[31034,31041],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Information restored includes visibility, horizontal/vertical orientation, docking state, and control-bar position.","pos":[31045,31160]},{"content":"The settings you want to restore must be written to the registry before you call <ph id=\"ph1\">`LoadBarState`</ph>.","pos":[31167,31263],"source":"The settings you want to restore must be written to the registry before you call `LoadBarState`."},{"content":"Write the information to the registry by calling <bpt id=\"p1\">[</bpt>CWinApp::SetRegistryKey<ept id=\"p1\">](../../mfc/reference/cwinapp-class.md#cwinapp__setregistrykey)</ept>.","pos":[31264,31401],"source":" Write the information to the registry by calling [CWinApp::SetRegistryKey](../../mfc/reference/cwinapp-class.md#cwinapp__setregistrykey)."},{"content":"Write the information to the INI file by calling <bpt id=\"p1\">[</bpt>SaveBarState<ept id=\"p1\">](#cframewnd__savebarstate)</ept>.","pos":[31402,31492],"source":" Write the information to the INI file by calling [SaveBarState](#cframewnd__savebarstate)."},{"pos":[31502,31559],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__loadframe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::LoadFrame","linkify":"<a name=\"cframewnd__loadframe\"></a>  CFrameWnd::LoadFrame","source":"<a name=\"cframewnd__loadframe\"></a>  CFrameWnd::LoadFrame"},{"content":"Call to dynamically create a frame window from resource information.","pos":[31563,31631]},{"pos":[31840,31850],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The ID of shared resources associated with the frame window.","pos":[31871,31931]},{"content":"<bpt id=\"p1\">*</bpt>dwDefaultStyle<ept id=\"p1\">*</ept>","pos":[31938,31954],"source":"*dwDefaultStyle*"},{"content":"The frame's <bpt id=\"p1\">[</bpt>style<ept id=\"p1\">](../../mfc/reference/window-styles.md)</ept>.","pos":[31958,32016],"source":" The frame's [style](../../mfc/reference/window-styles.md)."},{"content":"Include the <bpt id=\"p1\">**</bpt>FWS_ADDTOTITLE<ept id=\"p1\">**</ept> style if you want the title bar to automatically display the name of the document represented in the window.","pos":[32017,32156],"source":" Include the **FWS_ADDTOTITLE** style if you want the title bar to automatically display the name of the document represented in the window."},{"content":"A pointer to the frame's parent.","pos":[32179,32211]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>CCreateContext<ept id=\"p1\">](../../mfc/reference/ccreatecontext-structure.md)</ept> structure.","pos":[32232,32323],"source":" A pointer to a [CCreateContext](../../mfc/reference/ccreatecontext-structure.md) structure."},{"content":"This parameter can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[32324,32355],"source":" This parameter can be **NULL**."},{"pos":[32365,32372],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Construct a <ph id=\"ph1\">`CFrameWnd`</ph> object in two steps.","pos":[32376,32420],"source":"Construct a `CFrameWnd` object in two steps."},{"content":"First, invoke the constructor, which constructs the <ph id=\"ph1\">`CFrameWnd`</ph> object, and then call <ph id=\"ph2\">`LoadFrame`</ph>, which loads the Windows frame window and associated resources and attaches the frame window to the <ph id=\"ph3\">`CFrameWnd`</ph> object.","pos":[32421,32638],"source":" First, invoke the constructor, which constructs the `CFrameWnd` object, and then call `LoadFrame`, which loads the Windows frame window and associated resources and attaches the frame window to the `CFrameWnd` object."},{"content":"The <ph id=\"ph1\">`nIDResource`</ph> parameter specifies the menu, the accelerator table, the icon, and the string resource of the title for the frame window.","pos":[32639,32778],"source":" The `nIDResource` parameter specifies the menu, the accelerator table, the icon, and the string resource of the title for the frame window."},{"pos":[32785,32915],"content":"Use the <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> member function rather than <ph id=\"ph1\">`LoadFrame`</ph> when you want to specify all of the frame window's creation parameters.","source":"Use the **Create** member function rather than `LoadFrame` when you want to specify all of the frame window's creation parameters."},{"pos":[32922,33018],"content":"The framework calls <ph id=\"ph1\">`LoadFrame`</ph> when it creates a frame window using a document template object.","source":"The framework calls `LoadFrame` when it creates a frame window using a document template object."},{"content":"The framework uses the <ph id=\"ph1\">`pContext`</ph> argument to specify the objects to be connected to the frame window, including any contained view objects.","pos":[33025,33165],"source":"The framework uses the `pContext` argument to specify the objects to be connected to the frame window, including any contained view objects."},{"content":"You can set the <ph id=\"ph1\">`pContext`</ph> argument to <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> when you call <ph id=\"ph2\">`LoadFrame`</ph>.","pos":[33166,33240],"source":" You can set the `pContext` argument to **NULL** when you call `LoadFrame`."},{"pos":[33250,33323],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__m_bautomenuenable\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::m_bAutoMenuEnable","linkify":"<a name=\"cframewnd__m_bautomenuenable\"></a>  CFrameWnd::m_bAutoMenuEnable","source":"<a name=\"cframewnd__m_bautomenuenable\"></a>  CFrameWnd::m_bAutoMenuEnable"},{"pos":[33327,33523],"content":"When this data member is enabled (which is the default), menu items that do not have <ph id=\"ph1\">`ON_UPDATE_COMMAND_UI`</ph> or <ph id=\"ph2\">`ON_COMMAND`</ph> handlers will be automatically disabled when the user pulls down a menu.","source":"When this data member is enabled (which is the default), menu items that do not have `ON_UPDATE_COMMAND_UI` or `ON_COMMAND` handlers will be automatically disabled when the user pulls down a menu."},{"pos":[33574,33581],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[33585,33698],"content":"Menu items that have an <ph id=\"ph1\">`ON_COMMAND`</ph> handler but no <ph id=\"ph2\">`ON_UPDATE_COMMAND_UI`</ph> handler will be automatically enabled.","source":"Menu items that have an `ON_COMMAND` handler but no `ON_UPDATE_COMMAND_UI` handler will be automatically enabled."},{"content":"When this data member is set, menu items are automatically enabled in the same way that toolbar buttons are enabled.","pos":[33705,33821]},{"pos":[33829,33897],"content":"[!NOTE]\n`m_bAutoMenuEnable` has no effect on top-level menu items.","leadings":["","> "],"nodes":[{"content":"<ph id=\"ph1\">`m_bAutoMenuEnable`</ph> has no effect on top-level menu items.","pos":[8,66],"source":"`m_bAutoMenuEnable` has no effect on top-level menu items."}]},{"pos":[33904,34103],"content":"This data member simplifies the implementation of optional commands based on the current selection and reduces the need to write <ph id=\"ph1\">`ON_UPDATE_COMMAND_UI`</ph> handlers for enabling and disabling menu items.","source":"This data member simplifies the implementation of optional commands based on the current selection and reduces the need to write `ON_UPDATE_COMMAND_UI` handlers for enabling and disabling menu items."},{"pos":[34113,34120],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[34124,34214],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCWindowing#3<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cframewnd-class_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCWindowing#3](../../mfc/reference/codesnippet/cpp/cframewnd-class_3.cpp)]"},{"pos":[34224,34303],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__negotiateborderspace\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::NegotiateBorderSpace","linkify":"<a name=\"cframewnd__negotiateborderspace\"></a>  CFrameWnd::NegotiateBorderSpace","source":"<a name=\"cframewnd__negotiateborderspace\"></a>  CFrameWnd::NegotiateBorderSpace"},{"content":"Call this member function to negotiate border space in a frame window during OLE inplace activation.","pos":[34307,34407]},{"pos":[34516,34526],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>nBorderCmd<ept id=\"p1\">*</ept>","pos":[34530,34542],"source":"*nBorderCmd*"},{"content":"Contains one of the following values from the <bpt id=\"p1\">**</bpt>enum BorderCmd<ept id=\"p1\">**</ept>:","pos":[34546,34611],"source":" Contains one of the following values from the **enum BorderCmd**:"},{"pos":[34619,34636],"content":"<bpt id=\"p1\">**</bpt>borderGet<ept id=\"p1\">**</ept> = 1","source":"**borderGet** = 1"},{"pos":[34644,34665],"content":"<bpt id=\"p1\">**</bpt>borderRequest<ept id=\"p1\">**</ept> = 2","source":"**borderRequest** = 2"},{"pos":[34673,34690],"content":"<bpt id=\"p1\">**</bpt>borderSet<ept id=\"p1\">**</ept> = 3","source":"**borderSet** = 3"},{"pos":[34697,34897],"content":"`lpRectBorder`  \nPointer to a [RECT](../../mfc/reference/rect-structure1.md) structure or a [CRect](../../atl-mfc-shared/reference/crect-class.md) object that specifies the coordinates of the border.","leadings":[""," "],"nodes":[{"content":"Pointer to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> structure or a <bpt id=\"p2\">[</bpt>CRect<ept id=\"p2\">](../../atl-mfc-shared/reference/crect-class.md)</ept> object that specifies the coordinates of the border.","pos":[17,199],"source":"Pointer to a [RECT](../../mfc/reference/rect-structure1.md) structure or a [CRect](../../atl-mfc-shared/reference/crect-class.md) object that specifies the coordinates of the border."}]},{"pos":[34907,34919],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[34923,34958]},{"pos":[34968,34975],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[34979,35068],"content":"This member function is the <bpt id=\"p1\">**</bpt>CFrameWnd<ept id=\"p1\">**</ept> implementation of OLE border space negotiation.","source":"This member function is the **CFrameWnd** implementation of OLE border space negotiation."},{"pos":[35078,35137],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__onbarcheck\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::OnBarCheck","linkify":"<a name=\"cframewnd__onbarcheck\"></a>  CFrameWnd::OnBarCheck","source":"<a name=\"cframewnd__onbarcheck\"></a>  CFrameWnd::OnBarCheck"},{"content":"Called whenever an action is performed on the specified control bar.","pos":[35141,35209]},{"pos":[35269,35279],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The ID of the control bar being shown.","pos":[35292,35330]},{"pos":[35340,35352],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the control bar existed; otherwise 0.","pos":[35356,35404]},{"pos":[35414,35479],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__oncontexthelp\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::OnContextHelp","linkify":"<a name=\"cframewnd__oncontexthelp\"></a>  CFrameWnd::OnContextHelp","source":"<a name=\"cframewnd__oncontexthelp\"></a>  CFrameWnd::OnContextHelp"},{"content":"Handles SHIFT+F1 Help for in-place items.","pos":[35483,35524]},{"pos":[35579,35586],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To enable context-sensitive help, you must add an","pos":[35590,35639]},{"pos":[35646,35728],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocViewSDI#16<ept id=\"p2\">](../../mfc/codesnippet/cpp/cframewnd-class_4.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocViewSDI#16](../../mfc/codesnippet/cpp/cframewnd-class_4.cpp)]"},{"pos":[35735,35875],"content":"statement to your <ph id=\"ph1\">`CFrameWnd`</ph> class message map and also add an accelerator-table entry, typically SHIFT+F1, to enable this member function.","source":"statement to your `CFrameWnd` class message map and also add an accelerator-table entry, typically SHIFT+F1, to enable this member function."},{"content":"If your application is an OLE Container, <ph id=\"ph1\">`OnContextHelp`</ph> puts all in-place items contained within the frame window object into Help mode.","pos":[35882,36019],"source":"If your application is an OLE Container, `OnContextHelp` puts all in-place items contained within the frame window object into Help mode."},{"content":"The cursor changes to an arrow and a question mark, and the user can then move the mouse pointer and press the left mouse button to select a dialog box, window, menu, or command button.","pos":[36020,36205]},{"content":"This member function calls the Windows function <ph id=\"ph1\">`WinHelp`</ph> with the Help context of the object under the cursor.","pos":[36206,36317],"source":" This member function calls the Windows function `WinHelp` with the Help context of the object under the cursor."},{"pos":[36327,36394],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__oncreateclient\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::OnCreateClient","linkify":"<a name=\"cframewnd__oncreateclient\"></a>  CFrameWnd::OnCreateClient","source":"<a name=\"cframewnd__oncreateclient\"></a>  CFrameWnd::OnCreateClient"},{"pos":[36398,36457],"content":"Called by the framework during the execution of <ph id=\"ph1\">`OnCreate`</ph>.","source":"Called by the framework during the execution of `OnCreate`."},{"pos":[36569,36579],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a Windows <bpt id=\"p1\">[</bpt>CREATESTRUCT<ept id=\"p1\">](../../mfc/reference/createstruct-structure.md)</ept> structure <bpt id=\"p2\">*</bpt>.<ept id=\"p2\">*</ept>","pos":[36593,36691],"source":" A pointer to a Windows [CREATESTRUCT](../../mfc/reference/createstruct-structure.md) structure *.*"},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>CCreateContext<ept id=\"p1\">](../../mfc/reference/ccreatecontext-structure.md)</ept> structure <bpt id=\"p2\">*</bpt>.<ept id=\"p2\">*</ept>","pos":[36712,36806],"source":" A pointer to a [CCreateContext](../../mfc/reference/ccreatecontext-structure.md) structure *.*"},{"pos":[36816,36828],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[36832,36867]},{"pos":[36877,36884],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Never call this function.","pos":[36888,36913]},{"pos":[36920,37046],"content":"The default implementation of this function creates a <ph id=\"ph1\">`CView`</ph> object from the information provided in <ph id=\"ph2\">`pContext`</ph>, if possible.","source":"The default implementation of this function creates a `CView` object from the information provided in `pContext`, if possible."},{"content":"Override this function to override values passed in the <ph id=\"ph1\">`CCreateContext`</ph> object or to change the way controls in the main client area of the frame window are created.","pos":[37053,37219],"source":"Override this function to override values passed in the `CCreateContext` object or to change the way controls in the main client area of the frame window are created."},{"content":"The <ph id=\"ph1\">`CCreateContext`</ph> members you can override are described in the <bpt id=\"p1\">[</bpt>CCreateContext<ept id=\"p1\">](../../mfc/reference/ccreatecontext-structure.md)</ept> class.","pos":[37220,37359],"source":" The `CCreateContext` members you can override are described in the [CCreateContext](../../mfc/reference/ccreatecontext-structure.md) class."},{"pos":[37367,37655],"content":"[!NOTE]\n Do not replace values passed in the `CREATESTRUCT` structure. They are for informational use only. If you want to override the initial window rectangle, for example, override the `CWnd` member function [PreCreateWindow](../../mfc/reference/cwnd-class.md#cwnd__precreatewindow).","leadings":["","> "],"nodes":[{"content":" Do not replace values passed in the `CREATESTRUCT` structure. They are for informational use only. If you want to override the initial window rectangle, for example, override the `CWnd` member function [PreCreateWindow](../../mfc/reference/cwnd-class.md#cwnd__precreatewindow).","pos":[8,286],"nodes":[{"content":"Do not replace values passed in the <ph id=\"ph1\">`CREATESTRUCT`</ph> structure.","pos":[1,62],"source":" Do not replace values passed in the `CREATESTRUCT` structure."},{"content":"They are for informational use only.","pos":[63,99]},{"content":"If you want to override the initial window rectangle, for example, override the <ph id=\"ph1\">`CWnd`</ph> member function <bpt id=\"p1\">[</bpt>PreCreateWindow<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__precreatewindow)</ept>.","pos":[100,278],"source":" If you want to override the initial window rectangle, for example, override the `CWnd` member function [PreCreateWindow](../../mfc/reference/cwnd-class.md#cwnd__precreatewindow)."}]}]},{"pos":[37665,37730],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__onhidemenubar\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::OnHideMenuBar","linkify":"<a name=\"cframewnd__onhidemenubar\"></a>  CFrameWnd::OnHideMenuBar","source":"<a name=\"cframewnd__onhidemenubar\"></a>  CFrameWnd::OnHideMenuBar"},{"content":"This function is called when the system is about to hide the menu bar in the current MFC application.","pos":[37734,37835]},{"pos":[37890,37897],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event handler enables your application to perform custom actions when the system is about to hide the menu.","pos":[37901,38013]},{"content":"You cannot prevent the menu from being hidden, but you can, for example, call other methods to retrieve the menu style or state.","pos":[38014,38142]},{"pos":[38152,38223],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__onsetpreviewmode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::OnSetPreviewMode","linkify":"<a name=\"cframewnd__onsetpreviewmode\"></a>  CFrameWnd::OnSetPreviewMode","source":"<a name=\"cframewnd__onsetpreviewmode\"></a>  CFrameWnd::OnSetPreviewMode"},{"content":"Call this member function to set the application's main frame window into and out of print-preview mode.","pos":[38227,38331]},{"pos":[38441,38451],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>bPreview<ept id=\"p1\">*</ept>","pos":[38455,38465],"source":"*bPreview*"},{"content":"Specifies whether or not to place the application in print-preview mode.","pos":[38469,38541]},{"content":"Set to <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> to place in print preview, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> to cancel preview mode.","pos":[38542,38618],"source":" Set to **TRUE** to place in print preview, **FALSE** to cancel preview mode."},{"content":"A pointer to a <bpt id=\"p1\">**</bpt>CPrintPreviewState<ept id=\"p1\">**</ept> structure.","pos":[38637,38685],"source":" A pointer to a **CPrintPreviewState** structure."},{"pos":[38695,38702],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation disables all standard toolbars and hides the main menu and the main client window.","pos":[38706,38815]},{"content":"This turns MDI frame windows into temporary SDI frame windows.","pos":[38816,38878]},{"content":"Override this member function to customize the hiding and showing of control bars and other frame window parts during print preview.","pos":[38885,39017]},{"content":"Call the base class implementation from within the overridden version.","pos":[39018,39088]},{"pos":[39098,39163],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__onshowmenubar\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::OnShowMenuBar","linkify":"<a name=\"cframewnd__onshowmenubar\"></a>  CFrameWnd::OnShowMenuBar","source":"<a name=\"cframewnd__onshowmenubar\"></a>  CFrameWnd::OnShowMenuBar"},{"content":"This function is called when the system is about to display the menu bar in the current MFC application.","pos":[39167,39271]},{"pos":[39326,39333],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event handler enables your application to perform custom actions when the menu is about to be displayed.","pos":[39337,39446]},{"content":"You cannot prevent the menu from being displayed, but you can, for example, call other methods to retrieve the menu style or state.","pos":[39447,39578]},{"pos":[39588,39671],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__onupdatecontrolbarmenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::OnUpdateControlBarMenu","linkify":"<a name=\"cframewnd__onupdatecontrolbarmenu\"></a>  CFrameWnd::OnUpdateControlBarMenu","source":"<a name=\"cframewnd__onupdatecontrolbarmenu\"></a>  CFrameWnd::OnUpdateControlBarMenu"},{"content":"Called by the framework when the associated menu is updated.","pos":[39675,39735]},{"pos":[39813,39823],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>CCmdUI<ept id=\"p1\">](../../mfc/reference/ccmdui-class.md)</ept> object representing the menu that generated the update command.","pos":[39839,39963],"source":" A pointer to a [CCmdUI](../../mfc/reference/ccmdui-class.md) object representing the menu that generated the update command."},{"content":"The update handler calls the <bpt id=\"p1\">[</bpt>Enable<ept id=\"p1\">](../../mfc/reference/ccmdui-class.md#ccmdui__enable)</ept> member function of the <ph id=\"ph1\">`CCmdUI`</ph> object through <ph id=\"ph2\">`pCmdUI`</ph> to update the user interface.","pos":[39964,40139],"source":" The update handler calls the [Enable](../../mfc/reference/ccmdui-class.md#ccmdui__enable) member function of the `CCmdUI` object through `pCmdUI` to update the user interface."},{"pos":[40149,40212],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__recalclayout\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::RecalcLayout","linkify":"<a name=\"cframewnd__recalclayout\"></a>  CFrameWnd::RecalcLayout","source":"<a name=\"cframewnd__recalclayout\"></a>  CFrameWnd::RecalcLayout"},{"content":"Called by the framework when the standard control bars are toggled on or off or when the frame window is resized.","pos":[40216,40329]},{"pos":[40402,40412],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Determines whether the active in-place item for the frame window receives notification of the layout change.","pos":[40429,40537]},{"content":"If <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, the item is notified; otherwise <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","pos":[40538,40593],"source":" If **TRUE**, the item is notified; otherwise **FALSE**."},{"pos":[40603,40610],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[40614,40837],"content":"The default implementation of this member function calls the <ph id=\"ph1\">`CWnd`</ph> member function <ph id=\"ph2\">`RepositionBars`</ph> to reposition all the control bars in the frame as well as in the main client window (usually a <ph id=\"ph3\">`CView`</ph> or <bpt id=\"p1\">**</bpt>MDICLIENT<ept id=\"p1\">**</ept>).","source":"The default implementation of this member function calls the `CWnd` member function `RepositionBars` to reposition all the control bars in the frame as well as in the main client window (usually a `CView` or **MDICLIENT**)."},{"content":"Override this member function to control the appearance and behavior of control bars after the layout of the frame window has changed.","pos":[40844,40978]},{"content":"For example, call it when you turn control bars on or off or add another control bar.","pos":[40979,41064]},{"pos":[41074,41135],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__rectdefault\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::rectDefault","linkify":"<a name=\"cframewnd__rectdefault\"></a>  CFrameWnd::rectDefault","source":"<a name=\"cframewnd__rectdefault\"></a>  CFrameWnd::rectDefault"},{"pos":[41139,41268],"content":"Pass this static <ph id=\"ph1\">`CRect`</ph> as a parameter when creating a window to allow Windows to choose the window's initial size and position.","source":"Pass this static `CRect` as a parameter when creating a window to allow Windows to choose the window's initial size and position."},{"pos":[41336,41399],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__savebarstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::SaveBarState","linkify":"<a name=\"cframewnd__savebarstate\"></a>  CFrameWnd::SaveBarState","source":"<a name=\"cframewnd__savebarstate\"></a>  CFrameWnd::SaveBarState"},{"content":"Call this function to store information about each control bar owned by the frame window.","pos":[41403,41492]},{"pos":[41570,41580],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Name of a section in the initialization file or a key in the Windows registry where state information is stored.","pos":[41605,41717]},{"pos":[41727,41734],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This information can be read from the initialization file using <bpt id=\"p1\">[</bpt>LoadBarState<ept id=\"p1\">](#cframewnd__loadbarstate)</ept>.","pos":[41738,41843],"source":"This information can be read from the initialization file using [LoadBarState](#cframewnd__loadbarstate)."},{"content":"Information stored includes visibility, horizontal/vertical orientation, docking state, and control bar position.","pos":[41844,41957]},{"pos":[41967,42046],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__setactivepreviewview\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::SetActivePreviewView","linkify":"<a name=\"cframewnd__setactivepreviewview\"></a>  CFrameWnd::SetActivePreviewView","source":"<a name=\"cframewnd__setactivepreviewview\"></a>  CFrameWnd::SetActivePreviewView"},{"content":"Designates the specified view to be the active view for Rich Preview.","pos":[42050,42119]},{"pos":[42188,42198],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a view to be activated.","pos":[42216,42252]},{"pos":[42262,42269],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[42279,42344],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__setactiveview\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::SetActiveView","linkify":"<a name=\"cframewnd__setactiveview\"></a>  CFrameWnd::SetActiveView","source":"<a name=\"cframewnd__setactiveview\"></a>  CFrameWnd::SetActiveView"},{"content":"Call this member function to set the active view.","pos":[42348,42397]},{"pos":[42491,42501],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>pViewNew<ept id=\"p1\">*</ept>","pos":[42505,42515],"source":"*pViewNew*"},{"content":"Specifies a pointer to a <bpt id=\"p1\">[</bpt>CView<ept id=\"p1\">](../../mfc/reference/cview-class.md)</ept> object, or <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept> for no active view.","pos":[42519,42627],"source":" Specifies a pointer to a [CView](../../mfc/reference/cview-class.md) object, or **NULL** for no active view."},{"content":"Specifies whether the view is to be notified of activation.","pos":[42647,42706]},{"content":"If <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`OnActivateView`</ph> is called for the new view; if <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>, it is not.","pos":[42707,42789],"source":" If **TRUE**, `OnActivateView` is called for the new view; if **FALSE**, it is not."},{"pos":[42799,42806],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework will call this function automatically as the user changes the focus to a view within the frame window.","pos":[42810,42926]},{"content":"You can explicitly call <ph id=\"ph1\">`SetActiveView`</ph> to change the focus to the specified view.","pos":[42927,43009],"source":" You can explicitly call `SetActiveView` to change the focus to the specified view."},{"pos":[43019,43082],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__setdockstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::SetDockState","linkify":"<a name=\"cframewnd__setdockstate\"></a>  CFrameWnd::SetDockState","source":"<a name=\"cframewnd__setdockstate\"></a>  CFrameWnd::SetDockState"},{"pos":[43086,43206],"content":"Call this member function to apply state information stored in a <ph id=\"ph1\">`CDockState`</ph> object to the frame window's control bars.","source":"Call this member function to apply state information stored in a `CDockState` object to the frame window's control bars."},{"pos":[43275,43285],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Apply the stored state to the frame window's control bars.","pos":[43300,43358]},{"pos":[43368,43375],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To restore a previous state of the control bars, you can load the stored state with <ph id=\"ph1\">`CDockState::LoadState`</ph> or <ph id=\"ph2\">`Serialize`</ph>, then use <ph id=\"ph3\">`SetDockState`</ph> to apply it to the frame window's control bars.","pos":[43379,43574],"source":"To restore a previous state of the control bars, you can load the stored state with `CDockState::LoadState` or `Serialize`, then use `SetDockState` to apply it to the frame window's control bars."},{"content":"The previous state is stored in the <ph id=\"ph1\">`CDockState`</ph> object with <ph id=\"ph2\">`GetDockState`</ph>","pos":[43575,43650],"source":" The previous state is stored in the `CDockState` object with `GetDockState`"},{"pos":[43660,43729],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__setmenubarstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::SetMenuBarState","linkify":"<a name=\"cframewnd__setmenubarstate\"></a>  CFrameWnd::SetMenuBarState","source":"<a name=\"cframewnd__setmenubarstate\"></a>  CFrameWnd::SetMenuBarState"},{"content":"Sets the display state of the menu in the current MFC application to hidden or displayed.","pos":[43733,43822]},{"pos":[43891,43901],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[43908,43917]},{"content":"Description","pos":[43918,43929]},{"pos":[43972,43985],"content":"[in] <ph id=\"ph1\">`nState`</ph>","source":"[in] `nState`"},{"content":"Specifies whether to display or hide the menu.","pos":[43986,44032]},{"content":"The <ph id=\"ph1\">`nState`</ph> parameter can have the following values:","pos":[44033,44086],"source":" The `nState` parameter can have the following values:"},{"content":"-   AFX_MBS_VISIBLE (0x01) – Displays the menu if it is hidden, but has no effect if it is visible.","pos":[44099,44198]},{"content":"-   AFX_MBS_HIDDEN (0x02) – Hides the menu if it is visible, but has no effect if it is hidden.","pos":[44204,44299]},{"pos":[44310,44322],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[44326,44404],"content":"<ph id=\"ph1\">`true`</ph> if this method successfully changes the menu state; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this method successfully changes the menu state; otherwise, `false`."},{"pos":[44414,44421],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[44425,44587],"content":"If a runtime error occurs, this method asserts in Debug mode and raises an exception derived from the <bpt id=\"p1\">[</bpt>CException<ept id=\"p1\">](../../mfc/reference/cexception-class.md)</ept> class.","source":"If a runtime error occurs, this method asserts in Debug mode and raises an exception derived from the [CException](../../mfc/reference/cexception-class.md) class."},{"pos":[44597,44676],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__setmenubarvisibility\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::SetMenuBarVisibility","linkify":"<a name=\"cframewnd__setmenubarvisibility\"></a>  CFrameWnd::SetMenuBarVisibility","source":"<a name=\"cframewnd__setmenubarvisibility\"></a>  CFrameWnd::SetMenuBarVisibility"},{"content":"Sets the default behavior of the menu in the current MFC application to be either hidden or visible.","pos":[44680,44780]},{"pos":[44854,44864],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[44871,44880]},{"content":"Description","pos":[44881,44892]},{"pos":[44935,44948],"content":"[in] <ph id=\"ph1\">`nStyle`</ph>","source":"[in] `nStyle`"},{"content":"Specifies whether the menu is by default hidden, or is visible and has the focus.","pos":[44949,45030]},{"content":"The <ph id=\"ph1\">`nStyle`</ph> parameter can have the following values:","pos":[45031,45084],"source":" The `nStyle` parameter can have the following values:"},{"content":"-   AFX_MBV_KEEPVISIBLE (0x01) -","pos":[45097,45129]},{"content":"The menu is displayed at all times, and by default does not have the focus.","pos":[45140,45215]},{"content":"-   AFX_MBV_DISPLAYONFOCUS (0x02) -","pos":[45221,45256]},{"content":"The menu is hidden by default.","pos":[45267,45297]},{"content":"If the menu is hidden, press the ALT key to display the menu and give it the focus.","pos":[45298,45381]},{"content":"If the menu is displayed, press the ALT or ESC key to hide menu.","pos":[45382,45446]},{"content":"-   AFX_MBV_ DISPLAYONFOCUS (0x02) &amp;#124; AFX_MBV_DISPLAYONF10 (0x04)","pos":[45452,45521],"source":"-   AFX_MBV_ DISPLAYONFOCUS (0x02) &#124; AFX_MBV_DISPLAYONF10 (0x04)"},{"content":"(bitwise combination (OR)) - The menu is hidden by default.","pos":[45532,45591]},{"content":"If the menu is hidden, press the F10 key to display the menu and give it the focus.","pos":[45592,45675]},{"content":"If the menu is displayed, press the F10 key to toggle the focus on or off the menu.","pos":[45676,45759]},{"content":"The menu is displayed until you press the ALT or ESC key to hide it.","pos":[45760,45828]},{"pos":[45839,45846],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the value of the <ph id=\"ph1\">`nStyle`</ph> parameter is not valid, this method asserts in Debug mode and raises <bpt id=\"p1\">[</bpt>CInvalidArgException<ept id=\"p1\">](../../mfc/reference/cinvalidargexception-class.md)</ept> in Release mode.","pos":[45850,46038],"source":"If the value of the `nStyle` parameter is not valid, this method asserts in Debug mode and raises [CInvalidArgException](../../mfc/reference/cinvalidargexception-class.md) in Release mode."},{"content":"In case of other runtime errors, this method asserts in Debug mode and raises an exception derived from the <bpt id=\"p1\">[</bpt>CException<ept id=\"p1\">](../../mfc/reference/cexception-class.md)</ept> class.","pos":[46039,46207],"source":" In case of other runtime errors, this method asserts in Debug mode and raises an exception derived from the [CException](../../mfc/reference/cexception-class.md) class."},{"pos":[46214,46363],"content":"This method affects the state of menus in applications written for <ph id=\"ph1\">[!INCLUDE[windowsver](../../build/reference/includes/windowsver_md.md)]</ph> and later.","source":"This method affects the state of menus in applications written for [!INCLUDE[windowsver](../../build/reference/includes/windowsver_md.md)] and later."},{"pos":[46373,46440],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__setmessagetext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::SetMessageText","linkify":"<a name=\"cframewnd__setmessagetext\"></a>  CFrameWnd::SetMessageText","source":"<a name=\"cframewnd__setmessagetext\"></a>  CFrameWnd::SetMessageText"},{"content":"Call this function to place a string in the status-bar pane that has an ID of 0.","pos":[46444,46524]},{"pos":[46622,46632],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to the string to be placed on the status bar.","pos":[46650,46702]},{"content":"String resource ID of the string to be placed on the status bar.","pos":[46718,46782]},{"pos":[46792,46799],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This is typically the leftmost, and longest, pane of the status bar.","pos":[46803,46871]},{"pos":[46881,46964],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__setprogressbarposition\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::SetProgressBarPosition","linkify":"<a name=\"cframewnd__setprogressbarposition\"></a>  CFrameWnd::SetProgressBarPosition","source":"<a name=\"cframewnd__setprogressbarposition\"></a>  CFrameWnd::SetProgressBarPosition"},{"content":"Sets the current position for the Windows 7 progress bar displayed on the taskbar.","pos":[46968,47050]},{"pos":[47122,47132],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the position to set.","pos":[47154,47184]},{"content":"It must be within the range set by <ph id=\"ph1\">`SetProgressBarRange`</ph>.","pos":[47185,47242],"source":" It must be within the range set by `SetProgressBarRange`."},{"pos":[47252,47259],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[47269,47346],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__setprogressbarrange\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::SetProgressBarRange","linkify":"<a name=\"cframewnd__setprogressbarrange\"></a>  CFrameWnd::SetProgressBarRange","source":"<a name=\"cframewnd__setprogressbarrange\"></a>  CFrameWnd::SetProgressBarRange"},{"content":"Sets the range for the Windows 7 progress bar displayed on the taskbar.","pos":[47350,47421]},{"pos":[47513,47523],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Minimal value.","pos":[47542,47556]},{"content":"Maximal value.","pos":[47578,47592]},{"pos":[47602,47609],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[47619,47696],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__setprogressbarstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::SetProgressBarState","linkify":"<a name=\"cframewnd__setprogressbarstate\"></a>  CFrameWnd::SetProgressBarState","source":"<a name=\"cframewnd__setprogressbarstate\"></a>  CFrameWnd::SetProgressBarState"},{"content":"Sets the type and state of the progress indicator displayed on a taskbar button.","pos":[47700,47780]},{"pos":[47849,47859],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Flags that control the current state of the progress button.","pos":[47877,47937]},{"content":"Specify only one of the following flags because all states are mutually exclusive: TBPF_NOPROGRESS, TBPF_INDETERMINATE, TBPF_NORMAL, TBPF_ERROR, TBPF_PAUSED.","pos":[47938,48095]},{"pos":[48105,48112],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[48122,48203],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__settaskbaroverlayicon\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::SetTaskbarOverlayIcon","linkify":"<a name=\"cframewnd__settaskbaroverlayicon\"></a>  CFrameWnd::SetTaskbarOverlayIcon","source":"<a name=\"cframewnd__settaskbaroverlayicon\"></a>  CFrameWnd::SetTaskbarOverlayIcon"},{"content":"Overloaded.","pos":[48207,48218]},{"content":"Applies an overlay to a taskbar button to indicate application status or to notify the user.","pos":[48219,48311]},{"pos":[48488,48498],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the Resource ID of an icon to use as the overlay.","pos":[48519,48578]},{"content":"See description for <ph id=\"ph1\">`hIcon`</ph> for details.","pos":[48579,48619],"source":" See description for `hIcon` for details."},{"content":"A pointer to a string that provides an alt text version of the information conveyed by the overlay, for accessibility purposes.","pos":[48642,48769]},{"content":"The handle of an icon to use as the overlay.","pos":[48787,48831]},{"content":"This should be a small icon, measuring 16x16 pixels at 96 dots per inch (dpi).","pos":[48832,48910]},{"content":"If an overlay icon is already applied to the taskbar button, that existing overlay is replaced.","pos":[48911,49006]},{"content":"This value can be <ph id=\"ph1\">`NULL`</ph>.","pos":[49007,49032],"source":" This value can be `NULL`."},{"content":"How a <ph id=\"ph1\">`NULL`</ph> value is handled depends on whether the taskbar button represents a single window or a group of windows.","pos":[49033,49150],"source":" How a `NULL` value is handled depends on whether the taskbar button represents a single window or a group of windows."},{"content":"It is the responsibility of the calling application to free <ph id=\"ph1\">`hIcon`</ph> when it is no longer needed.","pos":[49151,49247],"source":" It is the responsibility of the calling application to free `hIcon` when it is no longer needed."},{"pos":[49257,49269],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[49273,49379],"content":"<ph id=\"ph1\">`TRUE`</ph> if successful; <ph id=\"ph2\">`FALSE`</ph> if OS version is less than Windows 7 or if an error occurs setting the icon.","source":"`TRUE` if successful; `FALSE` if OS version is less than Windows 7 or if an error occurs setting the icon."},{"pos":[49389,49396],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[49406,49461],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__settitle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::SetTitle","linkify":"<a name=\"cframewnd__settitle\"></a>  CFrameWnd::SetTitle","source":"<a name=\"cframewnd__settitle\"></a>  CFrameWnd::SetTitle"},{"content":"Sets the title of the window object.","pos":[49465,49501]},{"pos":[49560,49570],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a character string containing the title of the window object.","pos":[49589,49663]},{"pos":[49673,49740],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__showcontrolbar\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::ShowControlBar","linkify":"<a name=\"cframewnd__showcontrolbar\"></a>  CFrameWnd::ShowControlBar","source":"<a name=\"cframewnd__showcontrolbar\"></a>  CFrameWnd::ShowControlBar"},{"content":"Call this member function to show or hide the control bar.","pos":[49744,49802]},{"pos":[49909,49919],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to the control bar to be shown or hidden.","pos":[49933,49982]},{"content":"If <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, specifies that the control bar is to be shown.","pos":[50000,50059],"source":" If **TRUE**, specifies that the control bar is to be shown."},{"content":"If <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>, specifies that the control bar is to be hidden.","pos":[50060,50121],"source":" If **FALSE**, specifies that the control bar is to be hidden."},{"content":"<bpt id=\"p1\">*</bpt>bDelay<ept id=\"p1\">*</ept>","pos":[50128,50136],"source":"*bDelay*"},{"content":"If <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, delay showing the control bar.","pos":[50140,50183],"source":" If **TRUE**, delay showing the control bar."},{"content":"If <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>, show the control bar immediately.","pos":[50184,50231],"source":" If **FALSE**, show the control bar immediately."},{"pos":[50241,50312],"content":"<bpt id=\"p1\">&lt;a name=\"cframewnd__showownedwindows\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWnd::ShowOwnedWindows","linkify":"<a name=\"cframewnd__showownedwindows\"></a>  CFrameWnd::ShowOwnedWindows","source":"<a name=\"cframewnd__showownedwindows\"></a>  CFrameWnd::ShowOwnedWindows"},{"pos":[50316,50409],"content":"Call this member function to show all windows that are descendants of the <ph id=\"ph1\">`CFrameWnd`</ph> object.","source":"Call this member function to show all windows that are descendants of the `CFrameWnd` object."},{"pos":[50469,50479],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies whether the owned windows are to be shown or hidden.","pos":[50494,50556]},{"pos":[50565,50573],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>CWnd Class<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[50577,50625],"source":"[CWnd Class](../../mfc/reference/cwnd-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[50628,50677],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CWnd Class<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[50680,50729],"source":" [CWnd Class](../../mfc/reference/cwnd-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CMDIFrameWnd Class<ept id=\"p1\">](../../mfc/reference/cmdiframewnd-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[50732,50797],"source":" [CMDIFrameWnd Class](../../mfc/reference/cmdiframewnd-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CMDIChildWnd Class<ept id=\"p1\">](../../mfc/reference/cmdichildwnd-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[50800,50865],"source":" [CMDIChildWnd Class](../../mfc/reference/cmdichildwnd-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CView Class<ept id=\"p1\">](../../mfc/reference/cview-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[50868,50919],"source":" [CView Class](../../mfc/reference/cview-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CDocTemplate Class<ept id=\"p1\">](../../mfc/reference/cdoctemplate-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[50922,50987],"source":" [CDocTemplate Class](../../mfc/reference/cdoctemplate-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CRuntimeClass Structure<ept id=\"p1\">](../../mfc/reference/cruntimeclass-structure.md)</ept>","pos":[50990,51064],"source":" [CRuntimeClass Structure](../../mfc/reference/cruntimeclass-structure.md)"}],"content":"---\ntitle: \"CFrameWnd Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CFrameWnd\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"frame window classes, base class\"\n  - \"single document interface (SDI), frame windows\"\n  - \"frame windows, creating\"\n  - \"CFrameWnd class\"\nms.assetid: e2220aba-5bf4-4002-b960-fbcafcad01f1\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CFrameWnd Class\nProvides the functionality of a Windows single document interface (SDI) overlapped or pop-up frame window, along with members for managing the window.  \n  \n## Syntax  \n  \n```  \nclass CFrameWnd : public CWnd  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CFrameWnd::CFrameWnd](#cframewnd__cframewnd)|Constructs a `CFrameWnd` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CFrameWnd::ActivateFrame](#cframewnd__activateframe)|Makes the frame visible and available to the user.|  \n|[CFrameWnd::BeginModalState](#cframewnd__beginmodalstate)|Sets the frame window to modal.|  \n|[CFrameWnd::Create](#cframewnd__create)|Call to create and initialize the Windows frame window associated with the `CFrameWnd` object.|  \n|[CFrameWnd::CreateView](#cframewnd__createview)|Creates a view within a frame that is not derived from `CView`.|  \n|[CFrameWnd::DockControlBar](#cframewnd__dockcontrolbar)|Docks a control bar.|  \n|[CFrameWnd::EnableDocking](#cframewnd__enabledocking)|Allows a control bar to be docked.|  \n|[CFrameWnd::EndModalState](#cframewnd__endmodalstate)|Ends the frame window's modal state. Enables all of the windows disabled by `BeginModalState`.|  \n|[CFrameWnd::FloatControlBar](#cframewnd__floatcontrolbar)|Floats a control bar.|  \n|[CFrameWnd::GetActiveDocument](#cframewnd__getactivedocument)|Returns the active **CDocument** object.|  \n|[CFrameWnd::GetActiveFrame](#cframewnd__getactiveframe)|Returns the active `CFrameWnd` object.|  \n|[CFrameWnd::GetActiveView](#cframewnd__getactiveview)|Returns the active `CView` object.|  \n|[CFrameWnd::GetControlBar](#cframewnd__getcontrolbar)|Retrieves the control bar.|  \n|[CFrameWnd::GetDockState](#cframewnd__getdockstate)|Retrieves the dock state of a frame window.|  \n|[CFrameWnd::GetMenuBarState](#cframewnd__getmenubarstate)|Retrieves the display state of the menu in the current MFC application.|  \n|[CFrameWnd::GetMenuBarVisibility](#cframewnd__getmenubarvisibility)|Indicates whether the default behavior of the menu in the current MFC application is  either hidden or visible.|  \n|[CFrameWnd::GetMessageBar](#cframewnd__getmessagebar)|Returns a pointer to the status bar belonging to the frame window.|  \n|[CFrameWnd::GetMessageString](#cframewnd__getmessagestring)|Retrieves message corresponding to a command ID.|  \n|[CFrameWnd::GetTitle](#cframewnd__gettitle)|Retrieves the title of the related control bar.|  \n|[CFrameWnd::InitialUpdateFrame](#cframewnd__initialupdateframe)|Causes the `OnInitialUpdate` member function belonging to all views in the frame window to be called.|  \n|[CFrameWnd::InModalState](#cframewnd__inmodalstate)|Returns a value indicating whether or not a frame window is in a modal state.|  \n|[CFrameWnd::IsTracking](#cframewnd__istracking)|Determines if splitter bar is currently being moved.|  \n|[CFrameWnd::LoadAccelTable](#cframewnd__loadacceltable)|Call to load an accelerator table.|  \n|[CFrameWnd::LoadBarState](#cframewnd__loadbarstate)|Call to restore control bar settings.|  \n|[CFrameWnd::LoadFrame](#cframewnd__loadframe)|Call to dynamically create a frame window from resource information.|  \n|[CFrameWnd::NegotiateBorderSpace](#cframewnd__negotiateborderspace)|Negotiates border space in the frame window.|  \n|[CFrameWnd::OnBarCheck](#cframewnd__onbarcheck)|Called whenever an action is performed on the specified control bar.|  \n|[CFrameWnd::OnContextHelp](#cframewnd__oncontexthelp)|Handles SHIFT+F1 Help for in-place items.|  \n|[CFrameWnd::OnSetPreviewMode](#cframewnd__onsetpreviewmode)|Sets the application's main frame window into and out of print-preview mode.|  \n|[CFrameWnd::OnUpdateControlBarMenu](#cframewnd__onupdatecontrolbarmenu)|Called by the framework when the associated menu is updated.|  \n|[CFrameWnd::RecalcLayout](#cframewnd__recalclayout)|Repositions the control bars of the `CFrameWnd` object.|  \n|[CFrameWnd::SaveBarState](#cframewnd__savebarstate)|Call to save control bar settings.|  \n|[CFrameWnd::SetActivePreviewView](#cframewnd__setactivepreviewview)|Designates the specified view to be the active view for Rich Preview.|  \n|[CFrameWnd::SetActiveView](#cframewnd__setactiveview)|Sets the active `CView` object.|  \n|[CFrameWnd::SetDockState](#cframewnd__setdockstate)|Call to dock the frame window in the main window.|  \n|[CFrameWnd::SetMenuBarState](#cframewnd__setmenubarstate)|Sets the display state of the menu in the current MFC application to hidden or displayed.|  \n|[CFrameWnd::SetMenuBarVisibility](#cframewnd__setmenubarvisibility)|Sets the default behavior of the menu in the current MFC application to be either hidden or visible.|  \n|[CFrameWnd::SetMessageText](#cframewnd__setmessagetext)|Sets the text of a standard status bar.|  \n|[CFrameWnd::SetProgressBarPosition](#cframewnd__setprogressbarposition)|Sets current position for Windows 7 progress bar displayed on taskbar.|  \n|[CFrameWnd::SetProgressBarRange](#cframewnd__setprogressbarrange)|Sets range for Windows 7 progress bar displayed on taskbar.|  \n|[CFrameWnd::SetProgressBarState](#cframewnd__setprogressbarstate)|Sets the type and state of the progress indicator displayed on a taskbar button.|  \n|[CFrameWnd::SetTaskbarOverlayIcon](#cframewnd__settaskbaroverlayicon)|Overloaded. Applies an overlay to a taskbar button to indicate application status or a notification to the user.|  \n|[CFrameWnd::SetTitle](#cframewnd__settitle)|Sets the title of the related control bar.|  \n|[CFrameWnd::ShowControlBar](#cframewnd__showcontrolbar)|Call to show the control bar.|  \n|[CFrameWnd::ShowOwnedWindows](#cframewnd__showownedwindows)|Shows all windows that are descendants of the `CFrameWnd` object.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CFrameWnd::OnCreateClient](#cframewnd__oncreateclient)|Creates a client window for the frame.|  \n|[CFrameWnd::OnHideMenuBar](#cframewnd__onhidemenubar)|Called before the menu in the current MFC application is hidden.|  \n|[CFrameWnd::OnShowMenuBar](#cframewnd__onshowmenubar)|Called before the menu in the current MFC application is displayed.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CFrameWnd::m_bAutoMenuEnable](#cframewnd__m_bautomenuenable)|Controls automatic enable and disable functionality for menu items.|  \n|[CFrameWnd::rectDefault](#cframewnd__rectdefault)|Pass this static `CRect` as a parameter when creating a `CFrameWnd` object to allow Windows to choose the window's initial size and position.|  \n  \n## Remarks  \n To create a useful frame window for your application, derive a class from `CFrameWnd`. Add member variables to the derived class to store data specific to your application. Implement message-handler member functions and a message map in the derived class to specify what happens when messages are directed to the window.  \n  \n There are three ways to construct a frame window:  \n  \n-   Directly construct it using [Create](#cframewnd__create).  \n  \n-   Directly construct it using [LoadFrame](#cframewnd__loadframe).  \n  \n-   Indirectly construct it using a document template.  \n  \n Before you call either **Create** or `LoadFrame`, you must construct the frame-window object on the heap using the C++ **new** operator. Before calling **Create**, you can also register a window class with the [AfxRegisterWndClass](../../mfc/reference/application-information-and-management.md#afxregisterwndclass) global function to set the icon and class styles for the frame.  \n  \n Use the **Create** member function to pass the frame's creation parameters as immediate arguments.  \n  \n `LoadFrame` requires fewer arguments than **Create**, and instead retrieves most of its default values from resources, including the frame's caption, icon, accelerator table, and menu. To be accessible by `LoadFrame`, all these resources must have the same resource ID (for example, **IDR_MAINFRAME**).  \n  \n When a `CFrameWnd` object contains views and documents, they are created indirectly by the framework instead of directly by the programmer. The `CDocTemplate` object orchestrates the creation of the frame, the creation of the containing views, and the connection of the views to the appropriate document. The parameters of the `CDocTemplate` constructor specify the `CRuntimeClass` of the three classes involved (document, frame, and view). A `CRuntimeClass` object is used by the framework to dynamically create new frames when specified by the user (for example, by using the File New command or the multiple document interface (MDI) Window New command).  \n  \n A frame-window class derived from `CFrameWnd` must be declared with `DECLARE_DYNCREATE` in order for the above `RUNTIME_CLASS` mechanism to work correctly.  \n  \n A `CFrameWnd` contains default implementations to perform the following functions of a main window in a typical application for Windows:  \n  \n-   A `CFrameWnd` frame window keeps track of a currently active view that is independent of the Windows active window or the current input focus. When the frame is reactivated, the active view is notified by calling `CView::OnActivateView`.  \n  \n-   Command messages and many common frame-notification messages, including those handled by the `OnSetFocus`, `OnHScroll`, and `OnVScroll` functions of `CWnd`, are delegated by a `CFrameWnd` frame window to the currently active view.  \n  \n-   The currently active view (or currently active MDI child frame window in the case of an MDI frame) can determine the caption of the frame window. This feature can be disabled by turning off the **FWS_ADDTOTITLE** style bit of the frame window.  \n  \n-   A `CFrameWnd` frame window manages the positioning of the control bars, views, and other child windows inside the frame window's client area. A frame window also does idle-time updating of toolbar and other control-bar buttons. A `CFrameWnd` frame window also has default implementations of commands for toggling on and off the toolbar and status bar.  \n  \n-   A `CFrameWnd` frame window manages the main menu bar. When a pop-up menu is displayed, the frame window uses the **UPDATE_COMMAND_UI** mechanism to determine which menu items should be enabled, disabled, or checked. When the user selects a menu item, the frame window updates the status bar with the message string for that command.  \n  \n-   A `CFrameWnd` frame window has an optional accelerator table that automatically translates keyboard accelerators.  \n  \n-   A `CFrameWnd` frame window has an optional help ID set with `LoadFrame` that is used for context-sensitive help. A frame window is the main orchestrator of semimodal states such as context-sensitive help (SHIFT+F1) and print-preview modes.  \n  \n-   A `CFrameWnd` frame window will open a file dragged from the File Manager and dropped on the frame window. If a file extension is registered and associated with the application, the frame window responds to the dynamic data exchange (DDE) open request that occurs when the user opens a data file in the File Manager or when the **ShellExecute** Windows function is called.  \n  \n-   If the frame window is the main application window (that is, `CWinThread::m_pMainWnd`), when the user closes the application, the frame window prompts the user to save any modified documents (for `OnClose` and `OnQueryEndSession`).  \n  \n-   If the frame window is the main application window, the frame window is the context for running WinHelp. Closing the frame window will shut down WINHELP.EXE if it was launched for help for this application.  \n  \n Do not use the C++ **delete** operator to destroy a frame window. Use `CWnd::DestroyWindow` instead. The `CFrameWnd` implementation of `PostNcDestroy` will delete the C++ object when the window is destroyed. When the user closes the frame window, the default `OnClose` handler will call `DestroyWindow`.  \n  \n For more information on `CFrameWnd`, see [Frame Windows](../../mfc/frame-windows.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n `CFrameWnd`  \n  \n## Requirements  \n **Header:** afxwin.h  \n  \n##  <a name=\"cframewnd__activateframe\"></a>  CFrameWnd::ActivateFrame  \n Call this member function to activate and restore the frame window so that it is visible and available to the user.  \n  \n```  \nvirtual void ActivateFrame(int nCmdShow = -1);\n```  \n  \n### Parameters  \n `nCmdShow`  \n Specifies the parameter to pass to [CWnd::ShowWindow](../../mfc/reference/cwnd-class.md#cwnd__showwindow). By default, the frame is shown and correctly restored.  \n  \n### Remarks  \n This member function is usually called after a non-user interface event such as a DDE, OLE, or other event that may show the frame window or its contents to the user.  \n  \n The default implementation activates the frame and brings it to the top of the Z-order and, if necessary, carries out the same steps for the application's main frame window.  \n  \n Override this member function to change how a frame is activated. For example, you can force MDI child windows to be maximized. Add the appropriate functionality, then call the base class version with an explicit `nCmdShow`.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#1](../../mfc/reference/codesnippet/cpp/cframewnd-class_1.cpp)]  \n  \n##  <a name=\"cframewnd__beginmodalstate\"></a>  CFrameWnd::BeginModalState  \n Call this member function to make a frame window modal.  \n  \n```  \nvirtual void BeginModalState();\n```  \n  \n##  <a name=\"cframewnd__cframewnd\"></a>  CFrameWnd::CFrameWnd  \n Constructs a `CFrameWnd` object, but does not create the visible frame window.  \n  \n```  \nCFrameWnd();\n```  \n  \n### Remarks  \n Call **Create** to create the visible window.  \n  \n##  <a name=\"cframewnd__create\"></a>  CFrameWnd::Create  \n Call to create and initialize the Windows frame window associated with the `CFrameWnd` object.  \n  \n```  \nvirtual BOOL Create(\n    LPCTSTR lpszClassName,  \n    LPCTSTR lpszWindowName,  \n    DWORD dwStyle = WS_OVERLAPPEDWINDOW,  \n    const RECT& rect = rectDefault,  \n    CWnd* pParentWnd = NULL,  \n    LPCTSTR lpszMenuName = NULL,  \n    DWORD dwExStyle = 0,  \n    CCreateContext* pContext = NULL);\n```  \n  \n### Parameters  \n `lpszClassName`  \n Points to a null-terminated character string that names the Windows class. The class name can be any name registered with the `AfxRegisterWndClass` global function or the **RegisterClass** Windows function. If **NULL**, uses the predefined default `CFrameWnd` attributes.  \n  \n `lpszWindowName`  \n Points to a null-terminated character string that represents the window name. Used as text for the title bar.  \n  \n `dwStyle`  \n Specifies the window [style](../../mfc/reference/window-styles.md) attributes. Include the **FWS_ADDTOTITLE** style if you want the title bar to automatically display the name of the document represented in the window.  \n  \n `rect`  \n Specifies the size and position of the window. The `rectDefault` value allows Windows to specify the size and position of the new window.  \n  \n `pParentWnd`  \n Specifies the parent window of this frame window. This parameter should be **NULL** for top-level frame windows.  \n  \n *lpszMenuName*  \n Identifies the name of the menu resource to be used with the window. Use **MAKEINTRESOURCE** if the menu has an integer ID instead of a string. This parameter can be **NULL**.  \n  \n `dwExStyle`  \n Specifies the window extended [style](../../mfc/reference/extended-window-styles.md) attributes.  \n  \n `pContext`  \n Specifies a pointer to a [CCreateContext](../../mfc/reference/ccreatecontext-structure.md) structure. This parameter can be **NULL**.  \n  \n### Return Value  \n Nonzero if initialization is successful; otherwise 0.  \n  \n### Remarks  \n Construct a `CFrameWnd` object in two steps. First, invoke the constructor, which constructs the `CFrameWnd` object, and then call **Create**, which creates the Windows frame window and attaches it to the `CFrameWnd` object. **Create** initializes the window's class name and window name and registers default values for its style, parent, and associated menu.  \n  \n Use `LoadFrame` rather than **Create** to load the frame window from a resource instead of specifying its arguments.  \n  \n##  <a name=\"cframewnd__createview\"></a>  CFrameWnd::CreateView  \n Call `CreateView` to create a view within a frame.  \n  \n```  \nCWnd* CreateView(\n    CCreateContext* pContext,  \n    UINT nID = AFX_IDW_PANE_FIRST);\n```  \n  \n### Parameters  \n `pContext`  \n Specifies the type of view and document.  \n  \n `nID`  \n The ID number of a view.  \n  \n### Return Value  \n Pointer to a `CWnd` object if successful; otherwise **NULL**.  \n  \n### Remarks  \n Use this member function to create \"views\" that are not `CView`-derived within a frame. After calling `CreateView`, you must manually set the view to active and set it to be visible; these tasks are not automatically performed by `CreateView`.  \n  \n##  <a name=\"cframewnd__dockcontrolbar\"></a>  CFrameWnd::DockControlBar  \n Causes a control bar to be docked to the frame window.  \n  \n```  \nvoid DockControlBar(\n    CControlBar* pBar,  \n    UINT nDockBarID = 0,  \n    LPCRECT lpRect = NULL);\n```  \n  \n### Parameters  \n `pBar`  \n Points to the control bar to be docked.  \n  \n `nDockBarID`  \n Determines which sides of the frame window to consider for docking. It can be 0, or one or more of the following:  \n  \n- `AFX_IDW_DOCKBAR_TOP` Dock to the top side of the frame window.  \n  \n- **AFX_IDW_DOCKBAR_BOTTOM** Dock to the bottom side of the frame window.  \n  \n- `AFX_IDW_DOCKBAR_LEFT` Dock to the left side of the frame window.  \n  \n- `AFX_IDW_DOCKBAR_RIGHT` Dock to the right side of the frame window.  \n  \n If 0, the control bar can be docked to any side enabled for docking in the destination frame window.  \n  \n `lpRect`  \n Determines, in screen coordinates, where the control bar will be docked in the nonclient area of the destination frame window.  \n  \n### Remarks  \n The control bar will be docked to one of the sides of the frame window specified in the calls to both [CControlBar::EnableDocking](../../mfc/reference/ccontrolbar-class.md#ccontrolbar__enabledocking) and [CFrameWnd::EnableDocking](#cframewnd__enabledocking). The side chosen is determined by `nDockBarID`.  \n  \n##  <a name=\"cframewnd__enabledocking\"></a>  CFrameWnd::EnableDocking  \n Call this function to enable dockable control bars in a frame window.  \n  \n```  \nvoid EnableDocking(DWORD dwDockStyle);\n```  \n  \n### Parameters  \n `dwDockStyle`  \n Specifies which sides of the frame window can serve as docking sites for control bars. It can be one or more of the following:  \n  \n- `CBRS_ALIGN_TOP` Allows docking at the top of the client area.  \n  \n- `CBRS_ALIGN_BOTTOM` Allows docking at the bottom of the client area.  \n  \n- `CBRS_ALIGN_LEFT` Allows docking on the left side of the client area.  \n  \n- `CBRS_ALIGN_RIGHT` Allows docking on the right side of the client area.  \n  \n- `CBRS_ALIGN_ANY` Allows docking on any side of the client area.  \n  \n### Remarks  \n By default, control bars will be docked to a side of the frame window in the following order: top, bottom, left, right.  \n  \n### Example  \n  See the example for [CToolBar::Create](../../mfc/reference/ctoolbar-class.md#ctoolbar__create).  \n  \n##  <a name=\"cframewnd__endmodalstate\"></a>  CFrameWnd::EndModalState  \n Call this member function to change a frame window from modal to modeless.  \n  \n```  \nvirtual void EndModalState();\n```  \n  \n### Remarks  \n `EndModalState` enables all of the windows disabled by [BeginModalState](#cframewnd__beginmodalstate).  \n  \n##  <a name=\"cframewnd__floatcontrolbar\"></a>  CFrameWnd::FloatControlBar  \n Call this function to cause a control bar to not be docked to the frame window.  \n  \n```  \nvoid FloatControlBar(\n    CControlBar* pBar,  \n    CPoint point,  \n    DWORD dwStyle = CBRS_ALIGN_TOP);\n```  \n  \n### Parameters  \n `pBar`  \n Points to the control bar to be floated.  \n  \n `point`  \n The location, in screen coordinates, where the top left corner of the control bar will be placed.  \n  \n `dwStyle`  \n Specifies whether to align the control bar horizontally or vertically within its new frame window. It can be any one of the following:  \n  \n- `CBRS_ALIGN_TOP` Orients the control bar vertically.  \n  \n- `CBRS_ALIGN_BOTTOM` Orients the control bar vertically.  \n  \n- `CBRS_ALIGN_LEFT` Orients the control bar horizontally.  \n  \n- `CBRS_ALIGN_RIGHT` Orients the control bar horizontally.  \n  \n If styles are passed specifying both horizontal and vertical orientation, the toolbar will be oriented horizontally.  \n  \n### Remarks  \n Typically, this is done at application startup when the program is restoring settings from the previous execution.  \n  \n This function is called by the framework when the user causes a drop operation by releasing the left mouse button while dragging the control bar over a location that is not available for docking.  \n  \n##  <a name=\"cframewnd__getactivedocument\"></a>  CFrameWnd::GetActiveDocument  \n Call this member function to obtain a pointer to the current **CDocument** attached to the current active view.  \n  \n```  \nvirtual CDocument* GetActiveDocument();\n```  \n  \n### Return Value  \n A pointer to the current [CDocument](../../mfc/reference/cdocument-class.md). If there is no current document, returns **NULL**.  \n  \n##  <a name=\"cframewnd__getactiveframe\"></a>  CFrameWnd::GetActiveFrame  \n Call this member function to obtain a pointer to the active multiple document interface (MDI) child window of an MDI frame window.  \n  \n```  \nvirtual CFrameWnd* GetActiveFrame();\n```  \n  \n### Return Value  \n A pointer to the active MDI child window. If the application is an SDI application, or the MDI frame window has no active document, the implicit **this** pointer will be returned.  \n  \n### Remarks  \n If there is no active MDI child or the application is a single document interface (SDI), the implicit **this** pointer is returned.  \n  \n##  <a name=\"cframewnd__getactiveview\"></a>  CFrameWnd::GetActiveView  \n Call this member function to obtain a pointer to the active view (if any) attached to a frame window ( `CFrameWnd`).  \n  \n```  \nCView* GetActiveView() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the current [CView](../../mfc/reference/cview-class.md). If there is no current view, returns **NULL**.  \n  \n### Remarks  \n This function returns **NULL** when called for an MDI main frame window ( `CMDIFrameWnd`). In an MDI application, the MDI main frame window does not have a view associated with it. Instead, each individual child window ( `CMDIChildWnd`) has one or more associated views. The active view in an MDI application can be obtained by first finding the active MDI child window and then finding the active view for that child window. The active MDI child window can be found by calling the function `MDIGetActive` or **GetActiveFrame** as demonstrated in the following:  \n  \n [!code-cpp[NVC_MFCWindowing#2](../../mfc/reference/codesnippet/cpp/cframewnd-class_2.cpp)]  \n  \n##  <a name=\"cframewnd__getcontrolbar\"></a>  CFrameWnd::GetControlBar  \n Call `GetControlBar` to gain access to the control bar that is associated with the ID.  \n  \n```  \nCControlBar* GetControlBar(UINT nID);\n```  \n  \n### Parameters  \n `nID`  \n The ID number of a control bar.  \n  \n### Return Value  \n A pointer to the control bar that is associated with the ID.  \n  \n### Remarks  \n The `nID` parameter refers to the unique identifier passed to the **Create** method of the control bar. For more information on control bars, refer to the topic entitled [Control Bars](../../mfc/control-bars.md).  \n  \n `GetControlBar` will return the control bar even if it is floating and thus is not currently a child window of the frame.  \n  \n##  <a name=\"cframewnd__getdockstate\"></a>  CFrameWnd::GetDockState  \n Call this member function to store state information about the frame window's control bars in a `CDockState` object.  \n  \n```  \nvoid GetDockState(CDockState& state) const;\n\n \n```  \n  \n### Parameters  \n `state`  \n Contains the current state of the frame window's control bars upon return.  \n  \n### Remarks  \n You can then write the contents of `CDockState` to storage using `CDockState::SaveState` or `Serialize`. If you later want to restore the control bars to a previous state, load the state with `CDockState::LoadState` or `Serialize`, then call `SetDockState` to apply the previous state to the frame window's control bars.  \n  \n##  <a name=\"cframewnd__getmenubarstate\"></a>  CFrameWnd::GetMenuBarState  \n Retrieves the display state of the menu in the current MFC application.  \n  \n```  \nvirtual DWORD GetMenuBarState();\n```  \n  \n### Return Value  \n The return value can have the following values:  \n  \n-   AFX_MBS_VISIBLE (0x01) – The menu is visible.  \n  \n-   AFX_MBS_HIDDEN (0x02) – The menu is hidden.  \n  \n### Remarks  \n If a runtime error occurs, this method asserts in Debug mode and raises an exception derived from the [CException](../../mfc/reference/cexception-class.md) class.  \n  \n##  <a name=\"cframewnd__getmenubarvisibility\"></a>  CFrameWnd::GetMenuBarVisibility  \n Indicates whether the default state of the menu in the current MFC application is hidden or visible.  \n  \n```  \nvirtual DWORD CFrameWnd::GetMenuBarVisibility();\n```  \n  \n### Return Value  \n This method returns one of the following values:  \n  \n-   AFX_MBV_KEEPVISIBLE (0x01) - The menu is displayed at all times, and by default does not have the focus.  \n  \n-   AFX_MBV_DISPLAYONFOCUS (0x02) - The menu is hidden by default. If the menu is hidden, press the ALT key to display the menu and give it the focus. If the menu is displayed, press the ALT or ESC key to hide it.  \n  \n-   AFX_MBV_ DISPLAYONFOCUS (0x02) &#124; AFX_MBV_DISPLAYONF10 (0x04) (bitwise combination (OR)) - The menu is hidden by default. If the menu is hidden, press the F10 key to display the menu and give it the focus. If the menu is displayed, press the F10 key to toggle the focus on or off the menu. The menu is displayed until you press the ALT or ESC key to hide it.  \n  \n### Remarks  \n If a runtime error occurs, this method asserts in Debug mode and raises an exception derived from the [CException](../../mfc/reference/cexception-class.md) class.  \n  \n##  <a name=\"cframewnd__getmessagebar\"></a>  CFrameWnd::GetMessageBar  \n Call this member function to get a pointer to the status bar.  \n  \n```  \nvirtual CWnd* GetMessageBar();\n```  \n  \n### Return Value  \n Pointer to the status-bar window.  \n  \n##  <a name=\"cframewnd__getmessagestring\"></a>  CFrameWnd::GetMessageString  \n Override this function to provide custom strings for command IDs.  \n  \n```  \nvirtual void GetMessageString(\n    UINT nID,  \n    CString& rMessage) const;\n\n \n```  \n  \n### Parameters  \n `nID`  \n Resource ID of the desired message.  \n  \n `rMessage`  \n `CString` object into which to place the message.  \n  \n### Remarks  \n The default implementation simply loads the string specified by `nID` from the resource file. This function is called by the framework when the message string in the status bar needs updating.  \n  \n##  <a name=\"cframewnd__gettitle\"></a>  CFrameWnd::GetTitle  \n Retrieves the title of the window object.  \n  \n```  \nCString GetTitle() const;\n\n \n```  \n  \n### Return Value  \n A [CString](../../atl-mfc-shared/reference/cstringt-class.md) object containing the current title of the window object.  \n  \n##  <a name=\"cframewnd__initialupdateframe\"></a>  CFrameWnd::InitialUpdateFrame  \n Call **IntitialUpdateFrame** after creating a new frame with **Create**.  \n  \n```  \nvoid InitialUpdateFrame(\n    CDocument* pDoc,  \n    BOOL bMakeVisible);\n```  \n  \n### Parameters  \n `pDoc`  \n Points to the document to which the frame window is associated. Can be **NULL**.  \n  \n `bMakeVisible`  \n If **TRUE**, indicates that the frame should become visible and active. If **FALSE**, no descendants are made visible.  \n  \n### Remarks  \n This causes all views in that frame window to receive their `OnInitialUpdate` calls.  \n  \n Also, if there was not previously an active view, the primary view of the frame window is made active. The primary view is a view with a child ID of **AFX_IDW_PANE_FIRST**. Finally, the frame window is made visible if `bMakeVisible` is nonzero. If `bMakeVisible` is 0, the current focus and visible state of the frame window will remain unchanged. It is not necessary to call this function when using the framework's implementation of File New and File Open.  \n  \n##  <a name=\"cframewnd__inmodalstate\"></a>  CFrameWnd::InModalState  \n Call this member function to check if a frame window is modal or modeless.  \n  \n```  \nBOOL InModalState() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if yes; otherwise 0.  \n  \n##  <a name=\"cframewnd__istracking\"></a>  CFrameWnd::IsTracking  \n Call this member function to determine if the splitter bar in the window is currently being moved.  \n  \n```  \nBOOL IsTracking() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if a splitter operation is in progress; otherwise 0.  \n  \n##  <a name=\"cframewnd__loadacceltable\"></a>  CFrameWnd::LoadAccelTable  \n Call to load the specified accelerator table.  \n  \n```  \nBOOL LoadAccelTable(LPCTSTR lpszResourceName);\n```  \n  \n### Parameters  \n `lpszResourceName`  \n Identifies the name of the accelerator resource. Use **MAKEINTRESOURCE** if the resource is identified with an integer ID.  \n  \n### Return Value  \n Nonzero if the accelerator table was successfully loaded; otherwise 0.  \n  \n### Remarks  \n Only one table can be loaded at a time.  \n  \n Accelerator tables loaded from resources are freed automatically when the application terminates.  \n  \n If you call `LoadFrame` to create the frame window, the framework loads an accelerator table along with the menu and icon resources, and a subsequent call to this member function is then unnecessary.  \n  \n##  <a name=\"cframewnd__loadbarstate\"></a>  CFrameWnd::LoadBarState  \n Call this function to restore the settings of each control bar owned by the frame window.  \n  \n```  \nvoid LoadBarState(LPCTSTR lpszProfileName);\n```  \n  \n### Parameters  \n `lpszProfileName`  \n Name of a section in the initialization (INI) file or a key in the Windows registry where state information is stored.  \n  \n### Remarks  \n Information restored includes visibility, horizontal/vertical orientation, docking state, and control-bar position.  \n  \n The settings you want to restore must be written to the registry before you call `LoadBarState`. Write the information to the registry by calling [CWinApp::SetRegistryKey](../../mfc/reference/cwinapp-class.md#cwinapp__setregistrykey). Write the information to the INI file by calling [SaveBarState](#cframewnd__savebarstate).  \n  \n##  <a name=\"cframewnd__loadframe\"></a>  CFrameWnd::LoadFrame  \n Call to dynamically create a frame window from resource information.  \n  \n```  \nvirtual BOOL LoadFrame(\n    UINT nIDResource,  \n    DWORD dwDefaultStyle = WS_OVERLAPPEDWINDOW | FWS_ADDTOTITLE,  \n    CWnd* pParentWnd = NULL,  \n    CCreateContext* pContext = NULL);\n```  \n  \n### Parameters  \n `nIDResource`  \n The ID of shared resources associated with the frame window.  \n  \n *dwDefaultStyle*  \n The frame's [style](../../mfc/reference/window-styles.md). Include the **FWS_ADDTOTITLE** style if you want the title bar to automatically display the name of the document represented in the window.  \n  \n `pParentWnd`  \n A pointer to the frame's parent.  \n  \n `pContext`  \n A pointer to a [CCreateContext](../../mfc/reference/ccreatecontext-structure.md) structure. This parameter can be **NULL**.  \n  \n### Remarks  \n Construct a `CFrameWnd` object in two steps. First, invoke the constructor, which constructs the `CFrameWnd` object, and then call `LoadFrame`, which loads the Windows frame window and associated resources and attaches the frame window to the `CFrameWnd` object. The `nIDResource` parameter specifies the menu, the accelerator table, the icon, and the string resource of the title for the frame window.  \n  \n Use the **Create** member function rather than `LoadFrame` when you want to specify all of the frame window's creation parameters.  \n  \n The framework calls `LoadFrame` when it creates a frame window using a document template object.  \n  \n The framework uses the `pContext` argument to specify the objects to be connected to the frame window, including any contained view objects. You can set the `pContext` argument to **NULL** when you call `LoadFrame`.  \n  \n##  <a name=\"cframewnd__m_bautomenuenable\"></a>  CFrameWnd::m_bAutoMenuEnable  \n When this data member is enabled (which is the default), menu items that do not have `ON_UPDATE_COMMAND_UI` or `ON_COMMAND` handlers will be automatically disabled when the user pulls down a menu.  \n  \n```  \nBOOL m_bAutoMenuEnable;  \n```  \n  \n### Remarks  \n Menu items that have an `ON_COMMAND` handler but no `ON_UPDATE_COMMAND_UI` handler will be automatically enabled.  \n  \n When this data member is set, menu items are automatically enabled in the same way that toolbar buttons are enabled.  \n  \n> [!NOTE]\n> `m_bAutoMenuEnable` has no effect on top-level menu items.  \n  \n This data member simplifies the implementation of optional commands based on the current selection and reduces the need to write `ON_UPDATE_COMMAND_UI` handlers for enabling and disabling menu items.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#3](../../mfc/reference/codesnippet/cpp/cframewnd-class_3.cpp)]  \n  \n##  <a name=\"cframewnd__negotiateborderspace\"></a>  CFrameWnd::NegotiateBorderSpace  \n Call this member function to negotiate border space in a frame window during OLE inplace activation.  \n  \n```  \nvirtual BOOL NegotiateBorderSpace(\n    UINT nBorderCmd,  \n    LPRECT lpRectBorder);\n```  \n  \n### Parameters  \n *nBorderCmd*  \n Contains one of the following values from the **enum BorderCmd**:  \n  \n- **borderGet** = 1  \n  \n- **borderRequest** = 2  \n  \n- **borderSet** = 3  \n  \n `lpRectBorder`  \n Pointer to a [RECT](../../mfc/reference/rect-structure1.md) structure or a [CRect](../../atl-mfc-shared/reference/crect-class.md) object that specifies the coordinates of the border.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n This member function is the **CFrameWnd** implementation of OLE border space negotiation.  \n  \n##  <a name=\"cframewnd__onbarcheck\"></a>  CFrameWnd::OnBarCheck  \n Called whenever an action is performed on the specified control bar.  \n  \n```  \nafx_msg BOOL OnBarCheck(UINT nID);\n```  \n  \n### Parameters  \n `nID`  \n The ID of the control bar being shown.  \n  \n### Return Value  \n Nonzero if the control bar existed; otherwise 0.  \n  \n##  <a name=\"cframewnd__oncontexthelp\"></a>  CFrameWnd::OnContextHelp  \n Handles SHIFT+F1 Help for in-place items.  \n  \n```  \nafx_msg void OnContextHelp();\n```  \n  \n### Remarks  \n To enable context-sensitive help, you must add an  \n  \n [!code-cpp[NVC_MFCDocViewSDI#16](../../mfc/codesnippet/cpp/cframewnd-class_4.cpp)]  \n  \n statement to your `CFrameWnd` class message map and also add an accelerator-table entry, typically SHIFT+F1, to enable this member function.  \n  \n If your application is an OLE Container, `OnContextHelp` puts all in-place items contained within the frame window object into Help mode. The cursor changes to an arrow and a question mark, and the user can then move the mouse pointer and press the left mouse button to select a dialog box, window, menu, or command button. This member function calls the Windows function `WinHelp` with the Help context of the object under the cursor.  \n  \n##  <a name=\"cframewnd__oncreateclient\"></a>  CFrameWnd::OnCreateClient  \n Called by the framework during the execution of `OnCreate`.  \n  \n```  \nvirtual BOOL OnCreateClient(\n    LPCREATESTRUCT lpcs,  \n    CCreateContext* pContext);\n```  \n  \n### Parameters  \n `lpcs`  \n A pointer to a Windows [CREATESTRUCT](../../mfc/reference/createstruct-structure.md) structure *.*  \n  \n `pContext`  \n A pointer to a [CCreateContext](../../mfc/reference/ccreatecontext-structure.md) structure *.*  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n Never call this function.  \n  \n The default implementation of this function creates a `CView` object from the information provided in `pContext`, if possible.  \n  \n Override this function to override values passed in the `CCreateContext` object or to change the way controls in the main client area of the frame window are created. The `CCreateContext` members you can override are described in the [CCreateContext](../../mfc/reference/ccreatecontext-structure.md) class.  \n  \n> [!NOTE]\n>  Do not replace values passed in the `CREATESTRUCT` structure. They are for informational use only. If you want to override the initial window rectangle, for example, override the `CWnd` member function [PreCreateWindow](../../mfc/reference/cwnd-class.md#cwnd__precreatewindow).  \n  \n##  <a name=\"cframewnd__onhidemenubar\"></a>  CFrameWnd::OnHideMenuBar  \n This function is called when the system is about to hide the menu bar in the current MFC application.  \n  \n```  \nvirtual void OnHideMenuBar();\n```  \n  \n### Remarks  \n This event handler enables your application to perform custom actions when the system is about to hide the menu. You cannot prevent the menu from being hidden, but you can, for example, call other methods to retrieve the menu style or state.  \n  \n##  <a name=\"cframewnd__onsetpreviewmode\"></a>  CFrameWnd::OnSetPreviewMode  \n Call this member function to set the application's main frame window into and out of print-preview mode.  \n  \n```  \nvirtual void OnSetPreviewMode(\n    BOOL bPreview,  \n    CPrintPreviewState* pState);\n```  \n  \n### Parameters  \n *bPreview*  \n Specifies whether or not to place the application in print-preview mode. Set to **TRUE** to place in print preview, **FALSE** to cancel preview mode.  \n  \n `pState`  \n A pointer to a **CPrintPreviewState** structure.  \n  \n### Remarks  \n The default implementation disables all standard toolbars and hides the main menu and the main client window. This turns MDI frame windows into temporary SDI frame windows.  \n  \n Override this member function to customize the hiding and showing of control bars and other frame window parts during print preview. Call the base class implementation from within the overridden version.  \n  \n##  <a name=\"cframewnd__onshowmenubar\"></a>  CFrameWnd::OnShowMenuBar  \n This function is called when the system is about to display the menu bar in the current MFC application.  \n  \n```  \nvirtual void OnShowMenuBar();\n```  \n  \n### Remarks  \n This event handler enables your application to perform custom actions when the menu is about to be displayed. You cannot prevent the menu from being displayed, but you can, for example, call other methods to retrieve the menu style or state.  \n  \n##  <a name=\"cframewnd__onupdatecontrolbarmenu\"></a>  CFrameWnd::OnUpdateControlBarMenu  \n Called by the framework when the associated menu is updated.  \n  \n```  \nafx_msg void OnUpdateControlBarMenu(CCmdUI* pCmdUI);\n```  \n  \n### Parameters  \n `pCmdUI`  \n A pointer to a [CCmdUI](../../mfc/reference/ccmdui-class.md) object representing the menu that generated the update command. The update handler calls the [Enable](../../mfc/reference/ccmdui-class.md#ccmdui__enable) member function of the `CCmdUI` object through `pCmdUI` to update the user interface.  \n  \n##  <a name=\"cframewnd__recalclayout\"></a>  CFrameWnd::RecalcLayout  \n Called by the framework when the standard control bars are toggled on or off or when the frame window is resized.  \n  \n```  \nvirtual void RecalcLayout(BOOL bNotify = TRUE);\n```  \n  \n### Parameters  \n `bNotify`  \n Determines whether the active in-place item for the frame window receives notification of the layout change. If **TRUE**, the item is notified; otherwise **FALSE**.  \n  \n### Remarks  \n The default implementation of this member function calls the `CWnd` member function `RepositionBars` to reposition all the control bars in the frame as well as in the main client window (usually a `CView` or **MDICLIENT**).  \n  \n Override this member function to control the appearance and behavior of control bars after the layout of the frame window has changed. For example, call it when you turn control bars on or off or add another control bar.  \n  \n##  <a name=\"cframewnd__rectdefault\"></a>  CFrameWnd::rectDefault  \n Pass this static `CRect` as a parameter when creating a window to allow Windows to choose the window's initial size and position.  \n  \n```  \nstatic AFX_DATA const CRect rectDefault;  \n```  \n  \n##  <a name=\"cframewnd__savebarstate\"></a>  CFrameWnd::SaveBarState  \n Call this function to store information about each control bar owned by the frame window.  \n  \n```  \nvoid SaveBarState(LPCTSTR lpszProfileName) const;\n\n \n```  \n  \n### Parameters  \n `lpszProfileName`  \n Name of a section in the initialization file or a key in the Windows registry where state information is stored.  \n  \n### Remarks  \n This information can be read from the initialization file using [LoadBarState](#cframewnd__loadbarstate). Information stored includes visibility, horizontal/vertical orientation, docking state, and control bar position.  \n  \n##  <a name=\"cframewnd__setactivepreviewview\"></a>  CFrameWnd::SetActivePreviewView  \n Designates the specified view to be the active view for Rich Preview.  \n  \n```  \nvoid SetActivePreviewView(CView* pViewNew);\n```  \n  \n### Parameters  \n `pViewNew`  \n A pointer to a view to be activated.  \n  \n### Remarks  \n  \n##  <a name=\"cframewnd__setactiveview\"></a>  CFrameWnd::SetActiveView  \n Call this member function to set the active view.  \n  \n```  \nvoid SetActiveView(\n    CView* pViewNew,  \n    BOOL bNotify = TRUE);\n```  \n  \n### Parameters  \n *pViewNew*  \n Specifies a pointer to a [CView](../../mfc/reference/cview-class.md) object, or **NULL** for no active view.  \n  \n `bNotify`  \n Specifies whether the view is to be notified of activation. If **TRUE**, `OnActivateView` is called for the new view; if **FALSE**, it is not.  \n  \n### Remarks  \n The framework will call this function automatically as the user changes the focus to a view within the frame window. You can explicitly call `SetActiveView` to change the focus to the specified view.  \n  \n##  <a name=\"cframewnd__setdockstate\"></a>  CFrameWnd::SetDockState  \n Call this member function to apply state information stored in a `CDockState` object to the frame window's control bars.  \n  \n```  \nvoid SetDockState(const CDockState& state);\n```  \n  \n### Parameters  \n `state`  \n Apply the stored state to the frame window's control bars.  \n  \n### Remarks  \n To restore a previous state of the control bars, you can load the stored state with `CDockState::LoadState` or `Serialize`, then use `SetDockState` to apply it to the frame window's control bars. The previous state is stored in the `CDockState` object with `GetDockState`  \n  \n##  <a name=\"cframewnd__setmenubarstate\"></a>  CFrameWnd::SetMenuBarState  \n Sets the display state of the menu in the current MFC application to hidden or displayed.  \n  \n```  \nvirtual BOOL SetMenuBarState(DWORD nState);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `nState`|Specifies whether to display or hide the menu. The `nState` parameter can have the following values:<br /><br /> -   AFX_MBS_VISIBLE (0x01) – Displays the menu if it is hidden, but has no effect if it is visible.<br />-   AFX_MBS_HIDDEN (0x02) – Hides the menu if it is visible, but has no effect if it is hidden.|  \n  \n### Return Value  \n `true` if this method successfully changes the menu state; otherwise, `false`.  \n  \n### Remarks  \n If a runtime error occurs, this method asserts in Debug mode and raises an exception derived from the [CException](../../mfc/reference/cexception-class.md) class.  \n  \n##  <a name=\"cframewnd__setmenubarvisibility\"></a>  CFrameWnd::SetMenuBarVisibility  \n Sets the default behavior of the menu in the current MFC application to be either hidden or visible.  \n  \n```  \nvirtual void SetMenuBarVisibility(DWORD nStyle);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `nStyle`|Specifies whether the menu is by default hidden, or is visible and has the focus. The `nStyle` parameter can have the following values:<br /><br /> -   AFX_MBV_KEEPVISIBLE (0x01) -<br />     The menu is displayed at all times, and by default does not have the focus.<br />-   AFX_MBV_DISPLAYONFOCUS (0x02) -<br />     The menu is hidden by default. If the menu is hidden, press the ALT key to display the menu and give it the focus. If the menu is displayed, press the ALT or ESC key to hide menu.<br />-   AFX_MBV_ DISPLAYONFOCUS (0x02) &#124; AFX_MBV_DISPLAYONF10 (0x04)<br />     (bitwise combination (OR)) - The menu is hidden by default. If the menu is hidden, press the F10 key to display the menu and give it the focus. If the menu is displayed, press the F10 key to toggle the focus on or off the menu. The menu is displayed until you press the ALT or ESC key to hide it.|  \n  \n### Remarks  \n If the value of the `nStyle` parameter is not valid, this method asserts in Debug mode and raises [CInvalidArgException](../../mfc/reference/cinvalidargexception-class.md) in Release mode. In case of other runtime errors, this method asserts in Debug mode and raises an exception derived from the [CException](../../mfc/reference/cexception-class.md) class.  \n  \n This method affects the state of menus in applications written for [!INCLUDE[windowsver](../../build/reference/includes/windowsver_md.md)] and later.  \n  \n##  <a name=\"cframewnd__setmessagetext\"></a>  CFrameWnd::SetMessageText  \n Call this function to place a string in the status-bar pane that has an ID of 0.  \n  \n```  \nvoid SetMessageText(LPCTSTR lpszText);\n\n \nvoid SetMessageText(UINT nID);\n```  \n  \n### Parameters  \n `lpszText`  \n Points to the string to be placed on the status bar.  \n  \n `nID`  \n String resource ID of the string to be placed on the status bar.  \n  \n### Remarks  \n This is typically the leftmost, and longest, pane of the status bar.  \n  \n##  <a name=\"cframewnd__setprogressbarposition\"></a>  CFrameWnd::SetProgressBarPosition  \n Sets the current position for the Windows 7 progress bar displayed on the taskbar.  \n  \n```  \nvoid SetProgressBarPosition(int nProgressPos);\n```  \n  \n### Parameters  \n `nProgressPos`  \n Specifies the position to set. It must be within the range set by `SetProgressBarRange`.  \n  \n### Remarks  \n  \n##  <a name=\"cframewnd__setprogressbarrange\"></a>  CFrameWnd::SetProgressBarRange  \n Sets the range for the Windows 7 progress bar displayed on the taskbar.  \n  \n```  \nvoid SetProgressBarRange(\n    int nRangeMin,  \n    int nRangeMax);\n```  \n  \n### Parameters  \n `nRangeMin`  \n Minimal value.  \n  \n `nRangeMax`  \n Maximal value.  \n  \n### Remarks  \n  \n##  <a name=\"cframewnd__setprogressbarstate\"></a>  CFrameWnd::SetProgressBarState  \n Sets the type and state of the progress indicator displayed on a taskbar button.  \n  \n```  \nvoid SetProgressBarState(TBPFLAG tbpFlags);\n```  \n  \n### Parameters  \n `tbpFlags`  \n Flags that control the current state of the progress button. Specify only one of the following flags because all states are mutually exclusive: TBPF_NOPROGRESS, TBPF_INDETERMINATE, TBPF_NORMAL, TBPF_ERROR, TBPF_PAUSED.  \n  \n### Remarks  \n  \n##  <a name=\"cframewnd__settaskbaroverlayicon\"></a>  CFrameWnd::SetTaskbarOverlayIcon  \n Overloaded. Applies an overlay to a taskbar button to indicate application status or to notify the user.  \n  \n```  \nBOOL SetTaskbarOverlayIcon(\n    UINT nIDResource,  \n    LPCTSTR lpcszDescr);\n\n \nBOOL SetTaskbarOverlayIcon(\n    HICON hIcon,  \n    LPCTSTR lpcszDescr);\n```  \n  \n### Parameters  \n `nIDResource`  \n Specifies the Resource ID of an icon to use as the overlay. See description for `hIcon` for details.  \n  \n `lpcszDescr`  \n A pointer to a string that provides an alt text version of the information conveyed by the overlay, for accessibility purposes.  \n  \n `hIcon`  \n The handle of an icon to use as the overlay. This should be a small icon, measuring 16x16 pixels at 96 dots per inch (dpi). If an overlay icon is already applied to the taskbar button, that existing overlay is replaced. This value can be `NULL`. How a `NULL` value is handled depends on whether the taskbar button represents a single window or a group of windows. It is the responsibility of the calling application to free `hIcon` when it is no longer needed.  \n  \n### Return Value  \n `TRUE` if successful; `FALSE` if OS version is less than Windows 7 or if an error occurs setting the icon.  \n  \n### Remarks  \n  \n##  <a name=\"cframewnd__settitle\"></a>  CFrameWnd::SetTitle  \n Sets the title of the window object.  \n  \n```  \nvoid SetTitle(LPCTSTR lpszTitle);\n```  \n  \n### Parameters  \n `lpszTitle`  \n A pointer to a character string containing the title of the window object.  \n  \n##  <a name=\"cframewnd__showcontrolbar\"></a>  CFrameWnd::ShowControlBar  \n Call this member function to show or hide the control bar.  \n  \n```  \nvoid ShowControlBar(\n    CControlBar* pBar,  \n    BOOL bShow,  \n    BOOL bDelay);\n```  \n  \n### Parameters  \n `pBar`  \n Pointer to the control bar to be shown or hidden.  \n  \n `bShow`  \n If **TRUE**, specifies that the control bar is to be shown. If **FALSE**, specifies that the control bar is to be hidden.  \n  \n *bDelay*  \n If **TRUE**, delay showing the control bar. If **FALSE**, show the control bar immediately.  \n  \n##  <a name=\"cframewnd__showownedwindows\"></a>  CFrameWnd::ShowOwnedWindows  \n Call this member function to show all windows that are descendants of the `CFrameWnd` object.  \n  \n```  \nvoid ShowOwnedWindows(BOOL bShow);\n```  \n  \n### Parameters  \n `bShow`  \n Specifies whether the owned windows are to be shown or hidden.  \n  \n## See Also  \n [CWnd Class](../../mfc/reference/cwnd-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CWnd Class](../../mfc/reference/cwnd-class.md)   \n [CMDIFrameWnd Class](../../mfc/reference/cmdiframewnd-class.md)   \n [CMDIChildWnd Class](../../mfc/reference/cmdichildwnd-class.md)   \n [CView Class](../../mfc/reference/cview-class.md)   \n [CDocTemplate Class](../../mfc/reference/cdoctemplate-class.md)   \n [CRuntimeClass Structure](../../mfc/reference/cruntimeclass-structure.md)\n"}