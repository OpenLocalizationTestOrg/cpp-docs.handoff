{"nodes":[{"pos":[12,42],"content":"ISource Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ISource Class | Microsoft Docs","pos":[0,30]}]},{"pos":[613,626],"content":"ISource Class","linkify":"ISource Class","nodes":[{"content":"ISource Class","pos":[0,13]}]},{"content":"The <ph id=\"ph1\">`ISource`</ph> class is the interface for all source blocks.","pos":[627,686],"source":"The `ISource` class is the interface for all source blocks."},{"content":"Source blocks propagate messages to <ph id=\"ph1\">`ITarget`</ph> blocks.","pos":[687,740],"source":" Source blocks propagate messages to `ITarget` blocks."},{"pos":[749,755],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[812,822],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The data type of the payload within the messages produced by the source block.","pos":[833,911]},{"pos":[920,927],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[937,952],"content":"Public Typedefs","linkify":"Public Typedefs","nodes":[{"content":"Public Typedefs","pos":[0,15]}]},{"content":"Name","pos":[959,963]},{"content":"Description","pos":[964,975]},{"pos":[1027,1048],"content":"A type alias for <ph id=\"ph1\">`T`</ph>.","source":"A type alias for `T`."},{"pos":[1059,1078],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1085,1089]},{"content":"Description","pos":[1090,1101]},{"pos":[1139,1176],"content":"<bpt id=\"p1\">[</bpt>ISource::~ISource Destructor<ept id=\"p1\">](#dtor)</ept>","source":"[ISource::~ISource Destructor](#dtor)"},{"pos":[1177,1207],"content":"Destroys the <ph id=\"ph1\">`ISource`</ph> object.","source":"Destroys the `ISource` object."},{"pos":[1218,1232],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1239,1243]},{"content":"Description","pos":[1244,1255]},{"pos":[1293,1326],"content":"<bpt id=\"p1\">[</bpt>ISource::accept Method<ept id=\"p1\">](#accept)</ept>","source":"[ISource::accept Method](#accept)"},{"pos":[1327,1460],"content":"When overridden in a derived class, accepts a message that was offered by this <ph id=\"ph1\">`ISource`</ph> block, transferring ownership to the caller.","source":"When overridden in a derived class, accepts a message that was offered by this `ISource` block, transferring ownership to the caller."},{"pos":[1465,1508],"content":"<bpt id=\"p1\">[</bpt>ISource::acquire_ref Method<ept id=\"p1\">](#acquire_ref)</ept>","source":"[ISource::acquire_ref Method](#acquire_ref)"},{"pos":[1509,1617],"content":"When overridden in a derived class, acquires a reference count on this <ph id=\"ph1\">`ISource`</ph> block, to prevent deletion.","source":"When overridden in a derived class, acquires a reference count on this `ISource` block, to prevent deletion."},{"pos":[1622,1657],"content":"<bpt id=\"p1\">[</bpt>ISource::consume Method<ept id=\"p1\">](#consume)</ept>","source":"[ISource::consume Method](#consume)"},{"pos":[1658,1834],"content":"When overridden in a derived class, consumes a message previously offered by this <ph id=\"ph1\">`ISource`</ph> block and successfully reserved by the target, transferring ownership to the caller.","source":"When overridden in a derived class, consumes a message previously offered by this `ISource` block and successfully reserved by the target, transferring ownership to the caller."},{"pos":[1839,1882],"content":"<bpt id=\"p1\">[</bpt>ISource::link_target Method<ept id=\"p1\">](#link_target)</ept>","source":"[ISource::link_target Method](#link_target)"},{"pos":[1883,1964],"content":"When overridden in a derived class, links a target block to this <ph id=\"ph1\">`ISource`</ph> block.","source":"When overridden in a derived class, links a target block to this `ISource` block."},{"pos":[1969,2004],"content":"<bpt id=\"p1\">[</bpt>ISource::release Method<ept id=\"p1\">](#release)</ept>","source":"[ISource::release Method](#release)"},{"content":"When overridden in a derived class, releases a previous successful message reservation.","pos":[2005,2092]},{"pos":[2097,2140],"content":"<bpt id=\"p1\">[</bpt>ISource::release_ref Method<ept id=\"p1\">](#release_ref)</ept>","source":"[ISource::release_ref Method](#release_ref)"},{"pos":[2141,2228],"content":"When overridden in a derived class, releases a reference count on this <ph id=\"ph1\">`ISource`</ph> block.","source":"When overridden in a derived class, releases a reference count on this `ISource` block."},{"pos":[2233,2268],"content":"<bpt id=\"p1\">[</bpt>ISource::reserve Method<ept id=\"p1\">](#reserve)</ept>","source":"[ISource::reserve Method](#reserve)"},{"pos":[2269,2367],"content":"When overridden in a derived class, reserves a message previously offered by this <ph id=\"ph1\">`ISource`</ph> block.","source":"When overridden in a derived class, reserves a message previously offered by this `ISource` block."},{"pos":[2372,2419],"content":"<bpt id=\"p1\">[</bpt>ISource::unlink_target Method<ept id=\"p1\">](#unlink_target)</ept>","source":"[ISource::unlink_target Method](#unlink_target)"},{"pos":[2420,2539],"content":"When overridden in a derived class, unlinks a target block from this <ph id=\"ph1\">`ISource`</ph> block, if found to be previously linked.","source":"When overridden in a derived class, unlinks a target block from this `ISource` block, if found to be previously linked."},{"pos":[2544,2593],"content":"<bpt id=\"p1\">[</bpt>ISource::unlink_targets Method<ept id=\"p1\">](#unlink_targets)</ept>","source":"[ISource::unlink_targets Method](#unlink_targets)"},{"pos":[2594,2682],"content":"When overridden in a derived class, unlinks all target blocks from this <ph id=\"ph1\">`ISource`</ph> block.","source":"When overridden in a derived class, unlinks all target blocks from this `ISource` block."},{"pos":[2692,2699],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2703,2816],"content":"For more information, see <bpt id=\"p1\">[</bpt>Asynchronous Message Blocks<ept id=\"p1\">](../../../parallel/concrt/asynchronous-message-blocks.md)</ept>.","source":"For more information, see [Asynchronous Message Blocks](../../../parallel/concrt/asynchronous-message-blocks.md)."},{"pos":[2825,2846],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[2868,2880],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2884,2904],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> agents.h","source":"**Header:** agents.h"},{"pos":[2911,2937],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[2947,2992],"content":"<bpt id=\"p1\">&lt;a name=\"accept\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ISource::accept Method","linkify":"<a name=\"accept\"></a>  ISource::accept Method","source":"<a name=\"accept\"></a>  ISource::accept Method"},{"pos":[2996,3129],"content":"When overridden in a derived class, accepts a message that was offered by this <ph id=\"ph1\">`ISource`</ph> block, transferring ownership to the caller.","source":"When overridden in a derived class, accepts a message that was offered by this `ISource` block, transferring ownership to the caller."},{"pos":[3255,3265],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the offered <ph id=\"ph2\">`message`</ph> object.","pos":[3281,3343],"source":" The `runtime_object_identity` of the offered `message` object."},{"content":"A pointer to the target block that is calling the <ph id=\"ph1\">`accept`</ph> method.","pos":[3364,3430],"source":" A pointer to the target block that is calling the `accept` method."},{"pos":[3440,3452],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the message that the caller now has ownership of.","pos":[3456,3518]},{"pos":[3528,3535],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`accept`</ph> method is called by a target while a message is being offered by this <ph id=\"ph2\">`ISource`</ph> block.","pos":[3539,3638],"source":"The `accept` method is called by a target while a message is being offered by this `ISource` block."},{"content":"The message pointer returned may be different from the one passed into the <ph id=\"ph1\">`propagate`</ph> method of the <ph id=\"ph2\">`ITarget`</ph> block, if this source decides to make a copy of the message.","pos":[3639,3810],"source":" The message pointer returned may be different from the one passed into the `propagate` method of the `ITarget` block, if this source decides to make a copy of the message."},{"pos":[3820,3875],"content":"<bpt id=\"p1\">&lt;a name=\"acquire_ref\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ISource::acquire_ref Method","linkify":"<a name=\"acquire_ref\"></a>  ISource::acquire_ref Method","source":"<a name=\"acquire_ref\"></a>  ISource::acquire_ref Method"},{"pos":[3879,3987],"content":"When overridden in a derived class, acquires a reference count on this <ph id=\"ph1\">`ISource`</ph> block, to prevent deletion.","source":"When overridden in a derived class, acquires a reference count on this `ISource` block, to prevent deletion."},{"pos":[4070,4080],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the target block that is calling this method.","pos":[4098,4156]},{"pos":[4166,4173],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4177,4290],"content":"This method is called by an <ph id=\"ph1\">`ITarget`</ph> object that is being linked to this source during the <ph id=\"ph2\">`link_target`</ph> method.","source":"This method is called by an `ITarget` object that is being linked to this source during the `link_target` method."},{"pos":[4300,4347],"content":"<bpt id=\"p1\">&lt;a name=\"consume\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ISource::consume Method","linkify":"<a name=\"consume\"></a>  ISource::consume Method","source":"<a name=\"consume\"></a>  ISource::consume Method"},{"pos":[4351,4527],"content":"When overridden in a derived class, consumes a message previously offered by this <ph id=\"ph1\">`ISource`</ph> block and successfully reserved by the target, transferring ownership to the caller.","source":"When overridden in a derived class, consumes a message previously offered by this `ISource` block and successfully reserved by the target, transferring ownership to the caller."},{"pos":[4654,4664],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the reserved <ph id=\"ph2\">`message`</ph> object.","pos":[4680,4743],"source":" The `runtime_object_identity` of the reserved `message` object."},{"content":"A pointer to the target block that is calling the <ph id=\"ph1\">`consume`</ph> method.","pos":[4764,4831],"source":" A pointer to the target block that is calling the `consume` method."},{"pos":[4841,4853],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4857,4928],"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object that the caller now has ownership of.","source":"A pointer to the `message` object that the caller now has ownership of."},{"pos":[4938,4945],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4949,5066],"content":"The <ph id=\"ph1\">`consume`</ph> method is similar to <ph id=\"ph2\">`accept`</ph>, but must always be preceded by a call to <ph id=\"ph3\">`reserve`</ph> that returned <ph id=\"ph4\">`true`</ph>.","source":"The `consume` method is similar to `accept`, but must always be preceded by a call to `reserve` that returned `true`."},{"pos":[5076,5125],"content":"<bpt id=\"p1\">&lt;a name=\"dtor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ISource::~ISource Destructor","linkify":"<a name=\"dtor\"></a>  ISource::~ISource Destructor","source":"<a name=\"dtor\"></a>  ISource::~ISource Destructor"},{"pos":[5129,5159],"content":"Destroys the <ph id=\"ph1\">`ISource`</ph> object.","source":"Destroys the `ISource` object."},{"pos":[5202,5257],"content":"<bpt id=\"p1\">&lt;a name=\"link_target\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ISource::link_target Method","linkify":"<a name=\"link_target\"></a>  ISource::link_target Method","source":"<a name=\"link_target\"></a>  ISource::link_target Method"},{"pos":[5261,5342],"content":"When overridden in a derived class, links a target block to this <ph id=\"ph1\">`ISource`</ph> block.","source":"When overridden in a derived class, links a target block to this `ISource` block."},{"pos":[5425,5435],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the target block being linked to this <ph id=\"ph1\">`ISource`</ph> block.","pos":[5453,5520],"source":" A pointer to the target block being linked to this `ISource` block."},{"pos":[5530,5577],"content":"<bpt id=\"p1\">&lt;a name=\"release\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ISource::release Method","linkify":"<a name=\"release\"></a>  ISource::release Method","source":"<a name=\"release\"></a>  ISource::release Method"},{"content":"When overridden in a derived class, releases a previous successful message reservation.","pos":[5581,5668]},{"pos":[5788,5798],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the reserved <ph id=\"ph2\">`message`</ph> object.","pos":[5814,5877],"source":" The `runtime_object_identity` of the reserved `message` object."},{"content":"A pointer to the target block that is calling the <ph id=\"ph1\">`release`</ph> method.","pos":[5898,5965],"source":" A pointer to the target block that is calling the `release` method."},{"pos":[5975,6030],"content":"<bpt id=\"p1\">&lt;a name=\"release_ref\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ISource::release_ref Method","linkify":"<a name=\"release_ref\"></a>  ISource::release_ref Method","source":"<a name=\"release_ref\"></a>  ISource::release_ref Method"},{"pos":[6034,6121],"content":"When overridden in a derived class, releases a reference count on this <ph id=\"ph1\">`ISource`</ph> block.","source":"When overridden in a derived class, releases a reference count on this `ISource` block."},{"pos":[6204,6214],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the target block that is calling this method.","pos":[6232,6290]},{"pos":[6300,6307],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called by an <ph id=\"ph1\">`ITarget`</ph> object that is being unlinked from this source.","pos":[6311,6396],"source":"This method is called by an `ITarget` object that is being unlinked from this source."},{"content":"The source block is allowed to release any resources reserved for the target block.","pos":[6397,6480]},{"pos":[6490,6537],"content":"<bpt id=\"p1\">&lt;a name=\"reserve\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ISource::reserve Method","linkify":"<a name=\"reserve\"></a>  ISource::reserve Method","source":"<a name=\"reserve\"></a>  ISource::reserve Method"},{"pos":[6541,6639],"content":"When overridden in a derived class, reserves a message previously offered by this <ph id=\"ph1\">`ISource`</ph> block.","source":"When overridden in a derived class, reserves a message previously offered by this `ISource` block."},{"pos":[6759,6769],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the offered <ph id=\"ph2\">`message`</ph> object.","pos":[6785,6847],"source":" The `runtime_object_identity` of the offered `message` object."},{"content":"A pointer to the target block that is calling the <ph id=\"ph1\">`reserve`</ph> method.","pos":[6868,6935],"source":" A pointer to the target block that is calling the `reserve` method."},{"pos":[6945,6957],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`true`</ph> if the message was successfully reserved, <ph id=\"ph2\">`false`</ph> otherwise.","pos":[6961,7028],"source":"`true` if the message was successfully reserved, `false` otherwise."},{"content":"Reservations can fail for many reasons, including: the message was already reserved or accepted by another target, the source could deny reservations, and so forth.","pos":[7029,7193]},{"pos":[7203,7210],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7214,7368],"content":"After you call <ph id=\"ph1\">`reserve`</ph>, if it succeeds, you must call either <ph id=\"ph2\">`consume`</ph> or <ph id=\"ph3\">`release`</ph> in order to take or give up possession of the message, respectively.","source":"After you call `reserve`, if it succeeds, you must call either `consume` or `release` in order to take or give up possession of the message, respectively."},{"pos":[7378,7437],"content":"<bpt id=\"p1\">&lt;a name=\"unlink_target\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ISource::unlink_target Method","linkify":"<a name=\"unlink_target\"></a>  ISource::unlink_target Method","source":"<a name=\"unlink_target\"></a>  ISource::unlink_target Method"},{"pos":[7441,7560],"content":"When overridden in a derived class, unlinks a target block from this <ph id=\"ph1\">`ISource`</ph> block, if found to be previously linked.","source":"When overridden in a derived class, unlinks a target block from this `ISource` block, if found to be previously linked."},{"pos":[7645,7655],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the target block being unlinked from this <ph id=\"ph1\">`ISource`</ph> block.","pos":[7673,7744],"source":" A pointer to the target block being unlinked from this `ISource` block."},{"pos":[7754,7815],"content":"<bpt id=\"p1\">&lt;a name=\"unlink_targets\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ISource::unlink_targets Method","linkify":"<a name=\"unlink_targets\"></a>  ISource::unlink_targets Method","source":"<a name=\"unlink_targets\"></a>  ISource::unlink_targets Method"},{"pos":[7819,7907],"content":"When overridden in a derived class, unlinks all target blocks from this <ph id=\"ph1\">`ISource`</ph> block.","source":"When overridden in a derived class, unlinks all target blocks from this `ISource` block."},{"pos":[7964,7972],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>concurrency Namespace<ept id=\"p1\">](concurrency-namespace.md)</ept><ph id=\"ph1\"> </ph>","pos":[7976,8026],"source":"[concurrency Namespace](concurrency-namespace.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ITarget Class<ept id=\"p1\">](itarget-class.md)</ept>","pos":[8029,8063],"source":" [ITarget Class](itarget-class.md)"}],"content":"---\ntitle: \"ISource Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"agents/concurrency::ISource\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ISource class\"\nms.assetid: c7b73463-42f6-4dcc-801a-81379b12d35a\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ISource Class\nThe `ISource` class is the interface for all source blocks. Source blocks propagate messages to `ITarget` blocks.  \n  \n## Syntax  \n  \n```\ntemplate<class T>\nclass ISource;\n```  \n  \n#### Parameters  \n `T`  \n The data type of the payload within the messages produced by the source block.  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`source_type`|A type alias for `T`.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[ISource::~ISource Destructor](#dtor)|Destroys the `ISource` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[ISource::accept Method](#accept)|When overridden in a derived class, accepts a message that was offered by this `ISource` block, transferring ownership to the caller.|  \n|[ISource::acquire_ref Method](#acquire_ref)|When overridden in a derived class, acquires a reference count on this `ISource` block, to prevent deletion.|  \n|[ISource::consume Method](#consume)|When overridden in a derived class, consumes a message previously offered by this `ISource` block and successfully reserved by the target, transferring ownership to the caller.|  \n|[ISource::link_target Method](#link_target)|When overridden in a derived class, links a target block to this `ISource` block.|  \n|[ISource::release Method](#release)|When overridden in a derived class, releases a previous successful message reservation.|  \n|[ISource::release_ref Method](#release_ref)|When overridden in a derived class, releases a reference count on this `ISource` block.|  \n|[ISource::reserve Method](#reserve)|When overridden in a derived class, reserves a message previously offered by this `ISource` block.|  \n|[ISource::unlink_target Method](#unlink_target)|When overridden in a derived class, unlinks a target block from this `ISource` block, if found to be previously linked.|  \n|[ISource::unlink_targets Method](#unlink_targets)|When overridden in a derived class, unlinks all target blocks from this `ISource` block.|  \n  \n## Remarks  \n For more information, see [Asynchronous Message Blocks](../../../parallel/concrt/asynchronous-message-blocks.md).  \n  \n## Inheritance Hierarchy  \n `ISource`  \n  \n## Requirements  \n **Header:** agents.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"accept\"></a>  ISource::accept Method  \n When overridden in a derived class, accepts a message that was offered by this `ISource` block, transferring ownership to the caller.  \n  \n```\nvirtual message<T>* accept(\n    runtime_object_identity _MsgId,\n    _Inout_ ITarget<T>* _PTarget) = 0;\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the offered `message` object.  \n  \n `_PTarget`  \n A pointer to the target block that is calling the `accept` method.  \n  \n### Return Value  \n A pointer to the message that the caller now has ownership of.  \n  \n### Remarks  \n The `accept` method is called by a target while a message is being offered by this `ISource` block. The message pointer returned may be different from the one passed into the `propagate` method of the `ITarget` block, if this source decides to make a copy of the message.  \n  \n##  <a name=\"acquire_ref\"></a>  ISource::acquire_ref Method  \n When overridden in a derived class, acquires a reference count on this `ISource` block, to prevent deletion.  \n  \n```\nvirtual void acquire_ref(_Inout_ ITarget<T>* _PTarget) = 0;\n```  \n  \n### Parameters  \n `_PTarget`  \n A pointer to the target block that is calling this method.  \n  \n### Remarks  \n This method is called by an `ITarget` object that is being linked to this source during the `link_target` method.  \n  \n##  <a name=\"consume\"></a>  ISource::consume Method  \n When overridden in a derived class, consumes a message previously offered by this `ISource` block and successfully reserved by the target, transferring ownership to the caller.  \n  \n```\nvirtual message<T>* consume(\n    runtime_object_identity _MsgId,\n    _Inout_ ITarget<T>* _PTarget) = 0;\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the reserved `message` object.  \n  \n `_PTarget`  \n A pointer to the target block that is calling the `consume` method.  \n  \n### Return Value  \n A pointer to the `message` object that the caller now has ownership of.  \n  \n### Remarks  \n The `consume` method is similar to `accept`, but must always be preceded by a call to `reserve` that returned `true`.  \n  \n##  <a name=\"dtor\"></a>  ISource::~ISource Destructor  \n Destroys the `ISource` object.  \n  \n```\nvirtual ~ISource();\n```  \n  \n##  <a name=\"link_target\"></a>  ISource::link_target Method  \n When overridden in a derived class, links a target block to this `ISource` block.  \n  \n```\nvirtual void link_target(_Inout_ ITarget<T>* _PTarget) = 0;\n```  \n  \n### Parameters  \n `_PTarget`  \n A pointer to the target block being linked to this `ISource` block.  \n  \n##  <a name=\"release\"></a>  ISource::release Method  \n When overridden in a derived class, releases a previous successful message reservation.  \n  \n```\nvirtual void release(\n    runtime_object_identity _MsgId,\n    _Inout_ ITarget<T>* _PTarget) = 0;\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the reserved `message` object.  \n  \n `_PTarget`  \n A pointer to the target block that is calling the `release` method.  \n  \n##  <a name=\"release_ref\"></a>  ISource::release_ref Method  \n When overridden in a derived class, releases a reference count on this `ISource` block.  \n  \n```\nvirtual void release_ref(_Inout_ ITarget<T>* _PTarget) = 0;\n```  \n  \n### Parameters  \n `_PTarget`  \n A pointer to the target block that is calling this method.  \n  \n### Remarks  \n This method is called by an `ITarget` object that is being unlinked from this source. The source block is allowed to release any resources reserved for the target block.  \n  \n##  <a name=\"reserve\"></a>  ISource::reserve Method  \n When overridden in a derived class, reserves a message previously offered by this `ISource` block.  \n  \n```\nvirtual bool reserve(\n    runtime_object_identity _MsgId,\n    _Inout_ ITarget<T>* _PTarget) = 0;\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the offered `message` object.  \n  \n `_PTarget`  \n A pointer to the target block that is calling the `reserve` method.  \n  \n### Return Value  \n `true` if the message was successfully reserved, `false` otherwise. Reservations can fail for many reasons, including: the message was already reserved or accepted by another target, the source could deny reservations, and so forth.  \n  \n### Remarks  \n After you call `reserve`, if it succeeds, you must call either `consume` or `release` in order to take or give up possession of the message, respectively.  \n  \n##  <a name=\"unlink_target\"></a>  ISource::unlink_target Method  \n When overridden in a derived class, unlinks a target block from this `ISource` block, if found to be previously linked.  \n  \n```\nvirtual void unlink_target(_Inout_ ITarget<T>* _PTarget) = 0;\n```  \n  \n### Parameters  \n `_PTarget`  \n A pointer to the target block being unlinked from this `ISource` block.  \n  \n##  <a name=\"unlink_targets\"></a>  ISource::unlink_targets Method  \n When overridden in a derived class, unlinks all target blocks from this `ISource` block.  \n  \n```\nvirtual void unlink_targets() = 0;\n```  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)   \n [ITarget Class](itarget-class.md)\n"}