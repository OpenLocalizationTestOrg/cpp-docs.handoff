<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05c199d5156cd54580e68b9547b7085bef72ae22</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\storage-and-alignment-of-structures.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4274f2024f1487d04016e701bf8bf817c8d4dd33</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe019f2f1290d74c8b52041c08a3b8a7d2d56a47</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Storage and Alignment of Structures | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Storage and Alignment of Structures</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Structure members are stored sequentially in the order in which they are declared: the first member has the lowest memory address and the last member the highest.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Every data object has an <bpt id="p1">*</bpt>alignment-requirement<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For structures, the requirement is the largest of its members.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Every object is allocated an <bpt id="p1">*</bpt>offset<ept id="p1">*</ept> so that</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>offset<ept id="p1">*</ept> <ph id="ph1">`%`</ph> <bpt id="p2">*</bpt>alignment-requirement<ept id="p2">*</ept> <ph id="ph2">`==`</ph> 0</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Adjacent bit fields are packed into the same 1-, 2-, or 4-byte allocation unit if the integral types are the same size and if the next bit field fits into the current allocation unit without crossing the boundary imposed by the common alignment requirements of the bit fields.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To conserve space or to conform to existing data structures, you may want to store structures more or less compactly.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>/Zp<ept id="p1">](../build/reference/zp-struct-member-alignment.md)</ept>[<bpt id="p2">*</bpt>n<ept id="p2">*</ept>] compiler option and the <bpt id="p3">[</bpt>#pragma pack<ept id="p3">](../preprocessor/pack.md)</ept> control how structure data is "packed" into memory.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When you use the /Zp[<bpt id="p1">*</bpt>n<ept id="p1">*</ept>] option, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is 1, 2, 4, 8, or 16, each structure member after the first is stored on byte boundaries that are either the alignment requirement of the field or the packing size (<bpt id="p3">*</bpt>n<ept id="p3">*</ept>), whichever is smaller.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Expressed as a formula, the byte boundaries are the</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>n<ept id="p1">*</ept> is the packing size expressed with the /Zp[<bpt id="p2">*</bpt>n<ept id="p2">*</ept>] option and <bpt id="p3">*</bpt>item<ept id="p3">*</ept> is the structure member.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The default packing size is /Zp8.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To use the <ph id="ph1">`pack`</ph> pragma to specify packing other than the packing specified on the command line for a particular structure, give the <ph id="ph2">`pack`</ph> pragma, where the packing size is 1, 2, 4, 8, or 16, before the structure.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To reinstate the packing given on the command line, specify the <ph id="ph1">`pack`</ph> pragma with no arguments.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Bit fields default to size <bpt id="p1">**</bpt>long<ept id="p1">**</ept> for the Microsoft C compiler.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Structure members are aligned on the size of the type or the /Zp[<bpt id="p1">*</bpt>n<ept id="p1">*</ept>] size, whichever is smaller.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The default size is 4.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Structure Declarations</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>