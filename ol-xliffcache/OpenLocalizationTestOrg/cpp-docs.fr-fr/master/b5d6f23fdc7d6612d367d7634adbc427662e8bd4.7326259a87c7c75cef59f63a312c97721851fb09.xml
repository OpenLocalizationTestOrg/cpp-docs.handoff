{"nodes":[{"pos":[12,75],"content":"sscanf_s, _sscanf_s_l, swscanf_s, _swscanf_s_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"sscanf_s, _sscanf_s_l, swscanf_s, _swscanf_s_l | Microsoft Docs","pos":[0,63]}]},{"content":"sscanf_s, _sscanf_s_l, swscanf_s, _swscanf_s_l","pos":[1386,1432]},{"content":"Reads formatted data from a string.","pos":[1433,1468]},{"content":"These versions of <bpt id=\"p1\">[</bpt>sscanf, _sscanf_l, swscanf, _swscanf_l<ept id=\"p1\">](../../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md)</ept> have security enhancements, as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1469,1732],"source":" These versions of [sscanf, _sscanf_l, swscanf, _swscanf_l](../../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md) have security enhancements, as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"content":"Syntax","pos":[1741,1747]},{"content":"Parameters","pos":[2209,2219]},{"content":"Stored data","pos":[2235,2246]},{"content":"Format-control string.","pos":[2265,2287]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Format Specification Fields: scanf and wscanf Functions<ept id=\"p1\">](../../c-runtime-library/format-specification-fields-scanf-and-wscanf-functions.md)</ept>.","pos":[2288,2455],"source":" For more information, see [Format Specification Fields: scanf and wscanf Functions](../../c-runtime-library/format-specification-fields-scanf-and-wscanf-functions.md)."},{"content":"Optional arguments","pos":[2476,2494]},{"content":"The locale to use","pos":[2513,2530]},{"content":"Return Value","pos":[2539,2551]},{"content":"Each of these functions returns the number of fields that are successfully converted and assigned; the return value does not include fields that were read but not assigned.","pos":[2555,2727]},{"content":"A return value of 0 indicates that no fields were assigned.","pos":[2728,2787]},{"content":"The return value is <ph id=\"ph1\">`EOF`</ph> for an error or if the end of the string is reached before the first conversion.","pos":[2788,2894],"source":" The return value is `EOF` for an error or if the end of the string is reached before the first conversion."},{"content":"If <ph id=\"ph1\">`buffer`</ph> or <ph id=\"ph2\">`format`</ph> is a <ph id=\"ph3\">`NULL`</ph> pointer, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2901,3076],"source":"If `buffer` or `format` is a `NULL` pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions return -1 and set <ph id=\"ph1\">`errno`</ph> to","pos":[3077,3158],"source":" If execution is allowed to continue, these functions return -1 and set `errno` to "},{"pos":[3174,3345],"content":"For information about these and other error codes, see <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For information about these and other error codes, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"Remarks","pos":[3354,3361]},{"content":"The <ph id=\"ph1\">`sscanf_s`</ph> function reads data from <ph id=\"ph2\">`buffer`</ph> into the location that's given by each <ph id=\"ph3\">`argument`</ph>.","pos":[3365,3464],"source":"The `sscanf_s` function reads data from `buffer` into the location that's given by each `argument`."},{"content":"The arguments after the format string specify pointers to variables that have a type that corresponds to a type specifier in <ph id=\"ph1\">`format`</ph>.","pos":[3465,3599],"source":" The arguments after the format string specify pointers to variables that have a type that corresponds to a type specifier in `format`."},{"content":"Unlike the less secure version <ph id=\"ph1\">`sscanf`</ph>, a buffer size parameter is required when you use the type field characters <ph id=\"ph2\">`c`</ph>, <ph id=\"ph3\">`C`</ph>, <ph id=\"ph4\">`s`</ph>, <ph id=\"ph5\">`S`</ph>, or string control sets that are enclosed in <ph id=\"ph6\">`[]`</ph>.","pos":[3600,3785],"source":" Unlike the less secure version `sscanf`, a buffer size parameter is required when you use the type field characters `c`, `C`, `s`, `S`, or string control sets that are enclosed in `[]`."},{"content":"The buffer size in characters must be supplied as an additional parameter immediately after each buffer parameter that requires it.","pos":[3786,3917]},{"content":"For example, if you are reading into a string, the buffer size for that string is passed as follows:","pos":[3918,4018]},{"content":"The buffer size includes the terminating null.","pos":[4159,4205]},{"content":"A width specification field may be used to ensure that the token that's read in will fit into the buffer.","pos":[4206,4311]},{"content":"If no width specification field is used, and the token read in is too big to fit in the buffer, nothing is written to that buffer.","pos":[4312,4442]},{"content":"In the case of characters, a single character may be read as follows:","pos":[4449,4518]},{"content":"This example reads a single character from the input string and then stores it in a wide-character buffer.","pos":[4587,4693]},{"content":"When you read multiple characters for non-null terminated strings, unsigned integers are used as the width specification and the buffer size.","pos":[4694,4835]},{"pos":[4943,5180],"content":"For more information, see <bpt id=\"p1\">[</bpt>scanf_s, _scanf_s_l, wscanf_s, _wscanf_s_l<ept id=\"p1\">](../../c-runtime-library/reference/scanf-s-scanf-s-l-wscanf-s-wscanf-s-l.md)</ept> and <bpt id=\"p2\">[</bpt>scanf Type Field Characters<ept id=\"p2\">](../../c-runtime-library/scanf-type-field-characters.md)</ept>.","source":"For more information, see [scanf_s, _scanf_s_l, wscanf_s, _wscanf_s_l](../../c-runtime-library/reference/scanf-s-scanf-s-l-wscanf-s-wscanf-s-l.md) and [scanf Type Field Characters](../../c-runtime-library/scanf-type-field-characters.md)."},{"pos":[5188,5370],"content":"[!NOTE]\n The size parameter is of type `unsigned`, not `size_t`. When compiling for 64-bit targets, use a static cast to convert `_countof` or `sizeof` results to the correct size.","leadings":["","> "],"nodes":[{"content":" The size parameter is of type `unsigned`, not `size_t`. When compiling for 64-bit targets, use a static cast to convert `_countof` or `sizeof` results to the correct size.","pos":[8,180],"nodes":[{"content":"The size parameter is of type <ph id=\"ph1\">`unsigned`</ph>, not <ph id=\"ph2\">`size_t`</ph>.","pos":[1,56],"source":" The size parameter is of type `unsigned`, not `size_t`."},{"content":"When compiling for 64-bit targets, use a static cast to convert <ph id=\"ph1\">`_countof`</ph> or <ph id=\"ph2\">`sizeof`</ph> results to the correct size.","pos":[57,172],"source":" When compiling for 64-bit targets, use a static cast to convert `_countof` or `sizeof` results to the correct size."}]}]},{"content":"The <ph id=\"ph1\">`format`</ph> argument controls the interpretation of the input fields and has the same form and function as the <ph id=\"ph2\">`format`</ph> argument for the <ph id=\"ph3\">`scanf_s`</ph> function.","pos":[5377,5534],"source":"The `format` argument controls the interpretation of the input fields and has the same form and function as the `format` argument for the `scanf_s` function."},{"content":"If copying occurs between strings that overlap, the behavior is undefined.","pos":[5535,5609]},{"content":"is a wide-character version of <ph id=\"ph1\">`sscanf_s;`</ph> the arguments to <ph id=\"ph2\">`swscanf_s`</ph> are wide-character strings.","pos":[5628,5727],"source":" is a wide-character version of `sscanf_s;` the arguments to `swscanf_s` are wide-character strings."},{"content":"does not handle multibyte hexadecimal characters.","pos":[5739,5788]},{"content":"does not handle Unicode full-width hexadecimal or \"compatibility zone\" characters.","pos":[5801,5883]},{"content":"Otherwise, <ph id=\"ph1\">`swscanf_s`</ph> and <ph id=\"ph2\">`sscanf_s`</ph> behave identically.","pos":[5884,5941],"source":" Otherwise, `swscanf_s` and `sscanf_s` behave identically."},{"pos":[5948,6116],"content":"The versions of these functions that have the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter that's passed in instead of the current thread locale.","source":"The versions of these functions that have the `_l` suffix are identical except that they use the locale parameter that's passed in instead of the current thread locale."},{"content":"Generic-Text Routine Mappings","pos":[6126,6155]},{"content":"TCHAR.H routine","pos":[6162,6177]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[6178,6206],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[6207,6220]},{"content":"_UNICODE defined","pos":[6221,6237]},{"content":"Requirements","pos":[6468,6480]},{"content":"Routine","pos":[6487,6494]},{"content":"Required header","pos":[6495,6510]},{"pos":[6565,6566],"content":","},{"content":"stdio.h&gt;","pos":[6583,6591],"source":"stdio.h>"},{"pos":[6607,6608],"content":","},{"content":"stdio.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[6626,6648],"source":"stdio.h> or \\<wchar.h>"},{"pos":[6656,6760],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"Example","pos":[6769,6776]},{"content":".NET Framework Equivalent","pos":[7704,7729]},{"pos":[7733,7853],"content":"See <ph id=\"ph1\">`Parse`</ph> methods, such as <bpt id=\"p1\">[</bpt>System::Double::Parse<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.double.parse.aspx)</ept>.","source":"See `Parse` methods, such as [System::Double::Parse](https://msdn.microsoft.com/en-us/library/system.double.parse.aspx)."},{"content":"See Also","pos":[7862,7870]},{"content":"Stream I/O","pos":[7875,7885]},{"content":"fscanf, _fscanf_l, fwscanf, _fwscanf_l","pos":[7931,7969]},{"content":"scanf, _scanf_l, wscanf, _wscanf_l","pos":[8048,8082]},{"content":"sprintf, _sprintf_l, swprintf, _swprintf_l, <ph id=\"ph1\">\\_</ph>_swprintf_l","pos":[8157,8214],"source":"sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l"},{"content":"snprintf, _snprintf, _snprintf_l, _snwprintf, _snwprintf_l","pos":[8308,8366]}],"content":"---\ntitle: \"sscanf_s, _sscanf_s_l, swscanf_s, _swscanf_s_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_sscanf_s_l\"\n  - \"sscanf_s\"\n  - \"_swscanf_s_l\"\n  - \"swscanf_s\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_stscanf_s\"\n  - \"sscanf_s\"\n  - \"swscanf_s\"\n  - \"_swscanf_s_l\"\n  - \"_stscanf_s_l\"\n  - \"_sscanf_s_l\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"stscanf_s_l function\"\n  - \"stscanf_s function\"\n  - \"swscanf_s function\"\n  - \"swscanf_s_l function\"\n  - \"sscanf_s_l function\"\n  - \"_stscanf_s_l function\"\n  - \"strings [C++], reading data from\"\n  - \"sscanf_s function\"\n  - \"_swscanf_s_l function\"\n  - \"_stscanf_s function\"\n  - \"reading data, strings\"\n  - \"strings [C++], reading\"\n  - \"_sscanf_s_l function\"\nms.assetid: 956e65c8-00a5-43e8-a2f2-0f547ac9e56c\ncaps.latest.revision: 30\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# sscanf_s, _sscanf_s_l, swscanf_s, _swscanf_s_l\nReads formatted data from a string. These versions of [sscanf, _sscanf_l, swscanf, _swscanf_l](../../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md) have security enhancements, as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nint sscanf_s(  \n   const char *buffer,  \n   const char *format [,  \n   argument ] ...  \n);  \nint _sscanf_s_l(  \n   const char *buffer,  \n   const char *format,  \n   locale_t locale [,  \n   argument ] ...  \n);  \nint swscanf_s(  \n   const wchar_t *buffer,  \n   const wchar_t *format [,  \n   argument ] ...  \n);  \nint _swscanf_s_l(  \n   const wchar_t *buffer,  \n   const wchar_t *format,  \n   locale_t locale [,  \n   argument ] ...  \n);  \n```  \n  \n#### Parameters  \n `buffer`  \n Stored data  \n  \n `format`  \n Format-control string. For more information, see [Format Specification Fields: scanf and wscanf Functions](../../c-runtime-library/format-specification-fields-scanf-and-wscanf-functions.md).  \n  \n `argument`  \n Optional arguments  \n  \n `locale`  \n The locale to use  \n  \n## Return Value  \n Each of these functions returns the number of fields that are successfully converted and assigned; the return value does not include fields that were read but not assigned. A return value of 0 indicates that no fields were assigned. The return value is `EOF` for an error or if the end of the string is reached before the first conversion.  \n  \n If `buffer` or `format` is a `NULL` pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions return -1 and set `errno` to `EINVAL`  \n  \n For information about these and other error codes, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n The `sscanf_s` function reads data from `buffer` into the location that's given by each `argument`. The arguments after the format string specify pointers to variables that have a type that corresponds to a type specifier in `format`. Unlike the less secure version `sscanf`, a buffer size parameter is required when you use the type field characters `c`, `C`, `s`, `S`, or string control sets that are enclosed in `[]`. The buffer size in characters must be supplied as an additional parameter immediately after each buffer parameter that requires it. For example, if you are reading into a string, the buffer size for that string is passed as follows:  \n  \n `wchar_t ws[10];`  \n  \n `swscanf_s(in_str, L\"%9s\", ws, (unsigned)_countof(ws)); // buffer size is 10, width specification is 9`  \n  \n The buffer size includes the terminating null. A width specification field may be used to ensure that the token that's read in will fit into the buffer. If no width specification field is used, and the token read in is too big to fit in the buffer, nothing is written to that buffer.  \n  \n In the case of characters, a single character may be read as follows:  \n  \n `wchar_t wc;`  \n  \n `swscanf_s(in_str, L\"%c\", &wc, 1);`  \n  \n This example reads a single character from the input string and then stores it in a wide-character buffer. When you read multiple characters for non-null terminated strings, unsigned integers are used as the width specification and the buffer size.  \n  \n `char c[4];`  \n  \n `sscanf_s(input, \"%4c\", &c, (unsigned)_countof(c)); // not null terminated`  \n  \n For more information, see [scanf_s, _scanf_s_l, wscanf_s, _wscanf_s_l](../../c-runtime-library/reference/scanf-s-scanf-s-l-wscanf-s-wscanf-s-l.md) and [scanf Type Field Characters](../../c-runtime-library/scanf-type-field-characters.md).  \n  \n> [!NOTE]\n>  The size parameter is of type `unsigned`, not `size_t`. When compiling for 64-bit targets, use a static cast to convert `_countof` or `sizeof` results to the correct size.  \n  \n The `format` argument controls the interpretation of the input fields and has the same form and function as the `format` argument for the `scanf_s` function. If copying occurs between strings that overlap, the behavior is undefined.  \n  \n `swscanf_s` is a wide-character version of `sscanf_s;` the arguments to `swscanf_s` are wide-character strings. `sscanf_s` does not handle multibyte hexadecimal characters. `swscanf_s` does not handle Unicode full-width hexadecimal or \"compatibility zone\" characters. Otherwise, `swscanf_s` and `sscanf_s` behave identically.  \n  \n The versions of these functions that have the `_l` suffix are identical except that they use the locale parameter that's passed in instead of the current thread locale.  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_stscanf_s`|`sscanf_s`|`sscanf_s`|`swscanf_s`|  \n|`_stscanf_s_l`|`_sscanf_s_l`|`_sscanf_s_l`|`_swscanf_s_l`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`sscanf_s`, `_sscanf_s_l`|\\<stdio.h>|  \n|`swscanf_s`, `_swscanf_s_l`|\\<stdio.h> or \\<wchar.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n// crt_sscanf_s.c  \n// This program uses sscanf_s to read data items  \n// from a string named tokenstring, then displays them.  \n  \n#include <stdio.h>  \n#include <stdlib.h>  \n  \nint main( void )  \n{  \n   char  tokenstring[] = \"15 12 14...\";  \n   char  s[81];  \n   char  c;  \n   int   i;  \n   float fp;  \n  \n   // Input various data from tokenstring:  \n   // max 80 character string plus NULL terminator  \n   sscanf_s( tokenstring, \"%s\", s, (unsigned)_countof(s) );  \n   sscanf_s( tokenstring, \"%c\", &c, (unsigned)sizeof(char) );  \n   sscanf_s( tokenstring, \"%d\", &i );  \n   sscanf_s( tokenstring, \"%f\", &fp );  \n  \n   // Output the data read  \n   printf_s( \"String    = %s\\n\", s );  \n   printf_s( \"Character = %c\\n\", c );  \n   printf_s( \"Integer:  = %d\\n\", i );  \n   printf_s( \"Real:     = %f\\n\", fp );  \n}  \n```  \n  \n```Output  \nString    = 15  \nCharacter = 1  \nInteger:  = 15  \nReal:     = 15.000000  \n```  \n  \n## .NET Framework Equivalent  \n See `Parse` methods, such as [System::Double::Parse](https://msdn.microsoft.com/en-us/library/system.double.parse.aspx).  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [fscanf, _fscanf_l, fwscanf, _fwscanf_l](../../c-runtime-library/reference/fscanf-fscanf-l-fwscanf-fwscanf-l.md)   \n [scanf, _scanf_l, wscanf, _wscanf_l](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)   \n [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)   \n [snprintf, _snprintf, _snprintf_l, _snwprintf, _snwprintf_l](../../c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l.md)"}