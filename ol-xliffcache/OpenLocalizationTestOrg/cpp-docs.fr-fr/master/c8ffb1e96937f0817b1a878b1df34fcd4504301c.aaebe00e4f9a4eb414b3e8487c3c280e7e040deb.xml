{"nodes":[{"pos":[12,51],"content":"_aligned_offset_malloc | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_aligned_offset_malloc | Microsoft Docs","pos":[0,39]}]},{"pos":[1055,1077],"content":"_aligned_offset_malloc","linkify":"_aligned_offset_malloc","nodes":[{"content":"_aligned_offset_malloc","pos":[0,22]}]},{"content":"Allocates memory on a specified alignment boundary.","pos":[1078,1129]},{"pos":[1138,1144],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1270,1280],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`size`</ph>","pos":[1284,1295],"source":"[in] `size`"},{"content":"The size of the requested memory allocation.","pos":[1299,1343]},{"content":"[in] <ph id=\"ph1\">`alignment`</ph>","pos":[1350,1366],"source":"[in] `alignment`"},{"content":"The alignment value, which must be an integer power of 2.","pos":[1370,1427]},{"content":"[in] <ph id=\"ph1\">`offset`</ph>","pos":[1434,1447],"source":"[in] `offset`"},{"content":"The offset into the memory allocation to force the alignment.","pos":[1451,1512]},{"pos":[1521,1533],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1537,1620],"content":"A pointer to the memory block that was allocated or <ph id=\"ph1\">`NULL`</ph> if the operation failed.","source":"A pointer to the memory block that was allocated or `NULL` if the operation failed."},{"pos":[1629,1636],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1640,1791],"content":"<ph id=\"ph1\">`_aligned_offset_malloc`</ph> is useful in situations where alignment is needed on a nested element; for example, if alignment was needed on a nested class.","source":"`_aligned_offset_malloc` is useful in situations where alignment is needed on a nested element; for example, if alignment was needed on a nested class."},{"pos":[1798,1925],"content":"<ph id=\"ph1\">`_aligned_offset_malloc`</ph> is based on <ph id=\"ph2\">`malloc`</ph>; for more information, see <bpt id=\"p1\">[</bpt>malloc<ept id=\"p1\">](../../c-runtime-library/reference/malloc.md)</ept>.","source":"`_aligned_offset_malloc` is based on `malloc`; for more information, see [malloc](../../c-runtime-library/reference/malloc.md)."},{"content":"<ph id=\"ph1\">`_aligned_offset_malloc`</ph> is marked <ph id=\"ph2\">`__declspec(noalias)`</ph> and <ph id=\"ph3\">`__declspec(restrict)`</ph>, meaning that the function is guaranteed not to modify global variables and that the pointer returned is not aliased.","pos":[1932,2133],"source":"`_aligned_offset_malloc` is marked `__declspec(noalias)` and `__declspec(restrict)`, meaning that the function is guaranteed not to modify global variables and that the pointer returned is not aliased."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>noalias<ept id=\"p1\">](../../cpp/noalias.md)</ept> and <bpt id=\"p2\">[</bpt>restrict<ept id=\"p2\">](../../cpp/restrict.md)</ept>.","pos":[2134,2230],"source":" For more information, see [noalias](../../cpp/noalias.md) and [restrict](../../cpp/restrict.md)."},{"content":"This function sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`ENOMEM`</ph> if the memory allocation failed or if the requested size was greater than <ph id=\"ph3\">`_HEAP_MAXREQ`</ph>.","pos":[2237,2365],"source":"This function sets `errno` to `ENOMEM` if the memory allocation failed or if the requested size was greater than `_HEAP_MAXREQ`."},{"content":"For more information about <ph id=\"ph1\">`errno`</ph>, see <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","pos":[2366,2522],"source":" For more information about `errno`, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"Also, <ph id=\"ph1\">`_aligned_offset_malloc`</ph> validates its parameters.","pos":[2523,2579],"source":" Also, `_aligned_offset_malloc` validates its parameters."},{"content":"If <ph id=\"ph1\">`alignment`</ph> is not a power of 2 or if <ph id=\"ph2\">`offset`</ph> is greater than or equal to <ph id=\"ph3\">`size`</ph> and nonzero, this function invokes the invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2580,2819],"source":" If `alignment` is not a power of 2 or if `offset` is greater than or equal to `size` and nonzero, this function invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, this function returns <ph id=\"ph1\">`NULL`</ph> and sets <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`EINVAL`</ph>.","pos":[2820,2915],"source":" If execution is allowed to continue, this function returns `NULL` and sets `errno` to `EINVAL`."},{"pos":[2924,2936],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[2943,2950]},{"content":"Required header","pos":[2951,2966]},{"content":"<ph id=\"ph1\">\\&lt;</ph>malloc.h&gt;","pos":[3036,3047],"source":"\\<malloc.h>"},{"pos":[3057,3064],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3068,3165],"content":"For more information, see <bpt id=\"p1\">[</bpt>_aligned_malloc<ept id=\"p1\">](../../c-runtime-library/reference/aligned-malloc.md)</ept>.","source":"For more information, see [_aligned_malloc](../../c-runtime-library/reference/aligned-malloc.md)."},{"pos":[3174,3182],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3186,3245],"content":"<bpt id=\"p1\">[</bpt>Data Alignment<ept id=\"p1\">](../../c-runtime-library/data-alignment.md)</ept>","source":"[Data Alignment](../../c-runtime-library/data-alignment.md)"}],"content":"---\ntitle: \"_aligned_offset_malloc | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_aligned_offset_malloc\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-heap-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_aligned_offset_malloc\"\n  - \"aligned_offset_malloc\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_aligned_offset_malloc function\"\n  - \"aligned_offset_malloc function\"\nms.assetid: 447681a3-7c95-4655-86ba-fa3a4ca4c521\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _aligned_offset_malloc\nAllocates memory on a specified alignment boundary.  \n  \n## Syntax  \n  \n```  \nvoid * _aligned_offset_malloc(  \n   size_t size,   \n   size_t alignment,   \n   size_t offset  \n);  \n```  \n  \n#### Parameters  \n [in] `size`  \n The size of the requested memory allocation.  \n  \n [in] `alignment`  \n The alignment value, which must be an integer power of 2.  \n  \n [in] `offset`  \n The offset into the memory allocation to force the alignment.  \n  \n## Return Value  \n A pointer to the memory block that was allocated or `NULL` if the operation failed.  \n  \n## Remarks  \n `_aligned_offset_malloc` is useful in situations where alignment is needed on a nested element; for example, if alignment was needed on a nested class.  \n  \n `_aligned_offset_malloc` is based on `malloc`; for more information, see [malloc](../../c-runtime-library/reference/malloc.md).  \n  \n `_aligned_offset_malloc` is marked `__declspec(noalias)` and `__declspec(restrict)`, meaning that the function is guaranteed not to modify global variables and that the pointer returned is not aliased. For more information, see [noalias](../../cpp/noalias.md) and [restrict](../../cpp/restrict.md).  \n  \n This function sets `errno` to `ENOMEM` if the memory allocation failed or if the requested size was greater than `_HEAP_MAXREQ`. For more information about `errno`, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md). Also, `_aligned_offset_malloc` validates its parameters. If `alignment` is not a power of 2 or if `offset` is greater than or equal to `size` and nonzero, this function invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, this function returns `NULL` and sets `errno` to `EINVAL`.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_aligned_offset_malloc`|\\<malloc.h>|  \n  \n## Example  \n For more information, see [_aligned_malloc](../../c-runtime-library/reference/aligned-malloc.md).  \n  \n## See Also  \n [Data Alignment](../../c-runtime-library/data-alignment.md)"}