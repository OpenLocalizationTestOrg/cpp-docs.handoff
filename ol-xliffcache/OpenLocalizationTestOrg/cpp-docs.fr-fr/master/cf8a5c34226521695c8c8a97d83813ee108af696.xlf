<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cf8a5c34226521695c8c8a97d83813ee108af696</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cinternetfile-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2fb02cd226c0336629f98d0bf213712668d522d3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b5c739440ca2a95d1bb6e5903c7dcd3bd4f2f926</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CInternetFile Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CInternetFile Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Allows access to files on remote systems that use Internet protocols.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Protected Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CInternetFile::CInternetFile</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CInternetFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CInternetFile::Abort</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Closes the file, ignoring all warnings and errors.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CInternetFile::Close</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Closes a <ph id="ph1">`CInternetFile`</ph> and frees its resources.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CInternetFile::Flush</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Flushes the contents of the write buffer and makes sure the data in memory is written to the target machine.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CInternetFile::GetLength</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Returns the size of the file.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CInternetFile::Read</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Reads the number of specified bytes.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CInternetFile::ReadString</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Reads a stream of characters.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CInternetFile::Seek</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Repositions the pointer in an open file.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CInternetFile::SetReadBufferSize</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Sets the size of the buffer where data will be read.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CInternetFile::SetWriteBufferSize</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Sets the size of the buffer where data will be written.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CInternetFile::Write</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Writes the number of specified bytes.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CInternetFile::WriteString</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Writes a null-terminated string to a file.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>CInternetFile::operator HINTERNET</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A casting operator for an Internet handle.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Protected Data Members</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>CInternetFile::m_hFile</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A handle to a file.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Provides a base class for the <bpt id="p1">[</bpt>CHttpFile<ept id="p1">](../../mfc/reference/chttpfile-class.md)</ept> and <bpt id="p2">[</bpt>CGopherFile<ept id="p2">](../../mfc/reference/cgopherfile-class.md)</ept> file classes.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You never create a <ph id="ph1">`CInternetFile`</ph> object directly.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Instead, create an object of one of its derived classes by calling <bpt id="p1">[</bpt>CGopherConnection::OpenFile<ept id="p1">](../../mfc/reference/cgopherconnection-class.md#cgopherconnection__openfile)</ept> or <bpt id="p2">[</bpt>CHttpConnection::OpenRequest<ept id="p2">](../../mfc/reference/chttpconnection-class.md#chttpconnection__openrequest)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You also can create a <ph id="ph1">`CInternetFile`</ph> object by calling <bpt id="p1">[</bpt>CFtpConnection::OpenFile<ept id="p1">](../../mfc/reference/cftpconnection-class.md#cftpconnection__openfile)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CInternetFile`</ph> member functions <bpt id="p1">**</bpt>Open<ept id="p1">**</ept>, <ph id="ph2">`LockRange`</ph>, <ph id="ph3">`UnlockRange`</ph>, and <ph id="ph4">`Duplicate`</ph> are not implemented for <ph id="ph5">`CInternetFile`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If you call these functions on a <ph id="ph1">`CInternetFile`</ph> object, you will get a <bpt id="p1">[</bpt>CNotSupportedException<ept id="p1">](../../mfc/reference/cnotsupportedexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To learn more about how <ph id="ph1">`CInternetFile`</ph> works with the other MFC Internet classes, see the article <bpt id="p1">[</bpt>Internet Programming with WinInet<ept id="p1">](../../mfc/win32-internet-extensions-wininet.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>CFile</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>CStdioFile</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxinet.h</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>CInternetFile::Abort</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Closes the file associated with this object and makes the file unavailable for reading or writing.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If you have not closed the file before destroying the object, the destructor closes it for you.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>When handling exceptions, <bpt id="p1">**</bpt>Abort<ept id="p1">**</ept> differs from <bpt id="p2">[</bpt>Close<ept id="p2">](#cinternetfile__close)</ept> in two important ways.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>First, the <bpt id="p1">**</bpt>Abort<ept id="p1">**</ept> function does not throw an exception on failures because it ignores failures.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Second, <bpt id="p1">**</bpt>Abort<ept id="p1">**</ept> does not <bpt id="p2">**</bpt>ASSERT<ept id="p2">**</ept> if the file has not been opened or was closed previously.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CInternetFile::CInternetFile</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This member function is called when a <ph id="ph1">`CInternetFile`</ph> object is created.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A handle to an Internet file.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the file name.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CInternetConnection<ept id="p1">](../../mfc/reference/cinternetconnection-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>bReadMode</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Indicates whether the file is read-only.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A handle to an Internet session.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the name of the server.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The context identifier for the <ph id="ph1">`CInternetFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>WinInet Basics<ept id="p1">](../../mfc/wininet-basics.md)</ept> for more information about the context identifier.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>You never create a <ph id="ph1">`CInternetFile`</ph> object directly.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Instead, create an object of one of its derived classes by calling <bpt id="p1">[</bpt>CGopherConnection::OpenFile<ept id="p1">](../../mfc/reference/cgopherconnection-class.md#cgopherconnection__openfile)</ept> or <bpt id="p2">[</bpt>CHttpConnection::OpenRequest<ept id="p2">](../../mfc/reference/chttpconnection-class.md#chttpconnection__openrequest)</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You also can create a <ph id="ph1">`CInternetFile`</ph> object by calling <bpt id="p1">[</bpt>CFtpConnection::OpenFile<ept id="p1">](../../mfc/reference/cftpconnection-class.md#cftpconnection__openfile)</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>CInternetFile::Close</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Closes a <ph id="ph1">`CInternetFile`</ph> and frees any of its resources.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If the file was opened for writing, there is an implicit call to <bpt id="p1">[</bpt>Flush<ept id="p1">](#cinternetfile__flush)</ept> to assure that all buffered data is written to the host.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You should call <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> when you are finished using a file.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>CInternetFile::Flush</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Call this member function to flush the contents of the write buffer.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`Flush`</ph> to assure that all data in memory has actually been written to the target machine and to assure your transaction with the host machine has been completed.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>is only effective on <ph id="ph1">`CInternetFile`</ph> objects opened for writing.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>CInternetFile::GetLength</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Returns the size of the file.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>CInternetFile::m_hFile</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A handle to the file associated with this object.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>CInternetFile::operator HINTERNET</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Use this operator to get the Windows handle for the current Internet session.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>CInternetFile::Read</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Call this member function to read into the given memory, starting at <ph id="ph1">`lpvBuf`</ph>, the specified number of bytes, <ph id="ph2">`nCount`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>A pointer to a memory address to which file data is read.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The number of bytes to be written.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The number of bytes transferred to the buffer.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The return value may be less than <ph id="ph1">`nCount`</ph> if the end of file was reached.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The function returns the number of bytes actually read — a number that may be less than <ph id="ph1">`nCount`</ph> if the file ends.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>If an error occurs while reading the file, the function throws a <bpt id="p1">[</bpt>CInternetException<ept id="p1">](../../mfc/reference/cinternetexception-class.md)</ept> object that describes the error.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Note that reading past the end of the file is not considered an error and no exception will be thrown.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>To ensure all data is retrieved, an application must continue to call the <bpt id="p1">**</bpt>CInternetFile::Read<ept id="p1">**</ept> method until the method returns zero.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>CInternetFile::ReadString</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Call this member function to read a stream of characters until it finds a newline character.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>A pointer to a string which will receive the line being read.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The maximum number of characters to be read.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>A reference to the <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object that receives the read line.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A pointer to the buffer containing plain data retrieved from the <bpt id="p1">[</bpt>CInternetFile<ept id="p1">](../../mfc/reference/cinternetfile-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Regardless of the data type of the buffer passed to this method, it does not perform any manipulations on the data (for example, conversion to Unicode), so you must map the returned data to the structure you expect, as if the <bpt id="p1">**</bpt>void<ph id="ph1">\*</ph><ept id="p1">**</ept> type were returned.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if end-of-file was reached without reading any data; or, if boolean, <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> if end-of-file was reached without reading any data.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The function places the resulting line into the memory referenced by the <ph id="ph1">`pstr`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>It stops reading characters when it reaches the maximum number of characters, specified by <ph id="ph1">`nMax`</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The buffer always receives a terminating null character.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>If you call <ph id="ph1">`ReadString`</ph> without first calling <bpt id="p1">[</bpt>SetReadBufferSize<ept id="p1">](#cinternetfile__setreadbuffersize)</ept>, you will get a buffer of 4096 bytes.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>CInternetFile::Seek</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Call this member function to reposition the pointer in a previously opened file.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Offset in bytes to move the read/write pointer in the file.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Relative reference for the offset.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Must be one of the following values:</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CFile::begin<ept id="p1">**</ept> Move the file pointer <ph id="ph1">`lOff`</ph> bytes forward from the beginning of the file.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CFile::current<ept id="p1">**</ept> Move the file pointer <ph id="ph1">`lOff`</ph> bytes from the current position in the file.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CFile::end<ept id="p1">**</ept> Move the file pointer <ph id="ph1">`lOff`</ph> bytes from the end of the file.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>must be negative to seek into the existing file; positive values will seek past the end of the file.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The new byte offset from the beginning of the file if the requested position is legal; otherwise, the value is undefined and a <bpt id="p1">[</bpt>CInternetException<ept id="p1">](../../mfc/reference/cinternetexception-class.md)</ept> object is thrown.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Seek`</ph> function permits random access to a file's contents by moving the pointer a specified amount, absolutely or relatively.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>No data is actually read during the seek.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>At this time, a call to this member function is only supported for data associated with <ph id="ph1">`CHttpFile`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>It is not supported for FTP or gopher requests.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>If you call <ph id="ph1">`Seek`</ph> for one of these unsupported services, it will pass back you to the Win32 error code <bpt id="p1">**</bpt>ERROR_INTERNET_INVALID_OPERATION<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>When a file is opened, the file pointer is at offset 0, the beginning of the file.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`Seek`</ph> may cause an implicit call to <bpt id="p1">[</bpt>Flush<ept id="p1">](#cinternetfile__flush)</ept>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>See the example for the base class implementation ( <bpt id="p1">[</bpt>CFile::Seek<ept id="p1">](../../mfc/reference/cfile-class.md#cfile__seek)</ept>).</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>CInternetFile::SetReadBufferSize</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Call this member function to set the size of the temporary read buffer used by a <ph id="ph1">`CInternetFile`</ph>-derived object.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>nReadSize</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The desired buffer size in bytes.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>If the call fails, the Win32 function <bpt id="p1">[</bpt>GetLastError<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679360)</ept> may be called to determine the cause of the error.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The underlying WinInet APIs do not perform buffering, so choose a buffer size that allows your application to read data efficiently, regardless of the amount of data to be read.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>If each call to <bpt id="p1">[</bpt>Read<ept id="p1">](#cinternetfile__read)</ept> normally involves a large aount of data (for example, four or more kilobytes), you should not need a buffer.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>However, if you call <bpt id="p1">**</bpt>Read<ept id="p1">**</ept> to get small chunks of data, or if you use <bpt id="p2">[</bpt>ReadString<ept id="p2">](#cinternetfile__readstring)</ept> to read individual lines at a time, then a read buffer improves application performance.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>By default, a <ph id="ph1">`CInternetFile`</ph> object does not provide any buffering for reading.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>If you call this member function, you must be sure that the file has been opened for read access.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>You can increase the buffer size at any time, but shrinking the buffer will have no effect.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>If you call <bpt id="p1">[</bpt>ReadString<ept id="p1">](#cinternetfile__readstring)</ept> without first calling <ph id="ph1">`SetReadBufferSize`</ph>, you will get a buffer of 4096 bytes.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>CInternetFile::SetWriteBufferSize</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Call this member function to set the size of the temporary write buffer used by a <ph id="ph1">`CInternetFile`</ph>-derived object.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>nWriteSize</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The size of the buffer in bytes.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>If the call fails, the Win32 function <bpt id="p1">[</bpt>GetLastError<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679360)</ept> may be called to determine the cause of the error.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The underlying WinInet APIs don't perform buffering, so choose a buffer size that allows your application to write data efficiently regardless of the amount of data to be written.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>If each call to <bpt id="p1">[</bpt>Write<ept id="p1">](#cinternetfile__write)</ept> normally involves a large amount of data (for example, four or more kilobytes at a time), you should not need a buffer.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>However, if you call <bpt id="p1">[</bpt>Write<ept id="p1">](#cinternetfile__write)</ept> to write small chunks of data, a write buffer improves your application's performance.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>By default, a <ph id="ph1">`CInternetFile`</ph> object does not provide any buffering for writing.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>If you call this member function, you must be sure that the file has been opened for write access.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>You can change the size of the write buffer at any time, but doing so causes an implicit call to <bpt id="p1">[</bpt>Flush<ept id="p1">](#cinternetfile__flush)</ept>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>CInternetFile::Write</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Call this member function to write into the given memory, <ph id="ph1">`lpvBuf`</ph>, the specified number of bytes, <ph id="ph2">`nCount`</ph>.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>A pointer to the first byte to be written.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Specifies the number of bytes to be written.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>If any error occurs while writing the data, the function throws a <bpt id="p1">[</bpt>CInternetException<ept id="p1">](../../mfc/reference/cinternetexception-class.md)</ept> object describing the error.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>CInternetFile::WriteString</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>This function writes a null-terminated string to the associated file.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the contents to be written.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>If any error occurs while writing the data, the function throws a <bpt id="p1">[</bpt>CInternetException<ept id="p1">](../../mfc/reference/cinternetexception-class.md)</ept> object describing the error.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>CStdioFile Class</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>CInternetConnection Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>