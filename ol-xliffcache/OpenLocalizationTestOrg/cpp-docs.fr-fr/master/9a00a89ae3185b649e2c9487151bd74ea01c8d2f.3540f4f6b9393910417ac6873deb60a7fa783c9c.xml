{"nodes":[{"pos":[12,50],"content":"CNoWorkerThread Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CNoWorkerThread Class | Microsoft Docs","pos":[0,38]}]},{"pos":[672,693],"content":"CNoWorkerThread Class","linkify":"CNoWorkerThread Class","nodes":[{"content":"CNoWorkerThread Class","pos":[0,21]}]},{"pos":[694,833],"content":"Use this class as the argument for the <ph id=\"ph1\">`MonitorClass`</ph> template parameter to cache classes if you want to disable dynamic cache maintenance.","source":"Use this class as the argument for the `MonitorClass` template parameter to cache classes if you want to disable dynamic cache maintenance."},{"pos":[841,951],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the Windows Runtime.","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the Windows Runtime.","pos":[14,108]}]},{"pos":[960,966],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1010,1017],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1027,1041],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1048,1052]},{"content":"Description","pos":[1053,1064]},{"pos":[1102,1159],"content":"<bpt id=\"p1\">[</bpt>CNoWorkerThread::AddHandle<ept id=\"p1\">](#cnoworkerthread__addhandle)</ept>","source":"[CNoWorkerThread::AddHandle](#cnoworkerthread__addhandle)"},{"pos":[1160,1285],"content":"Non-functional equivalent of <bpt id=\"p1\">[</bpt>CWorkerThread::AddHandle<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__addhandle)</ept>.","source":"Non-functional equivalent of [CWorkerThread::AddHandle](../../atl/reference/cworkerthread-class.md#cworkerthread__addhandle)."},{"pos":[1290,1345],"content":"<bpt id=\"p1\">[</bpt>CNoWorkerThread::AddTimer<ept id=\"p1\">](#cnoworkerthread__addtimer)</ept>","source":"[CNoWorkerThread::AddTimer](#cnoworkerthread__addtimer)"},{"pos":[1346,1469],"content":"Non-functional equivalent of <bpt id=\"p1\">[</bpt>CWorkerThread::AddTimer<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__addtimer)</ept>.","source":"Non-functional equivalent of [CWorkerThread::AddTimer](../../atl/reference/cworkerthread-class.md#cworkerthread__addtimer)."},{"pos":[1474,1543],"content":"<bpt id=\"p1\">[</bpt>CNoWorkerThread::GetThreadHandle<ept id=\"p1\">](#cnoworkerthread__getthreadhandle)</ept>","source":"[CNoWorkerThread::GetThreadHandle](#cnoworkerthread__getthreadhandle)"},{"pos":[1544,1681],"content":"Non-functional equivalent of <bpt id=\"p1\">[</bpt>CWorkerThread::GetThreadHandle<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__getthreadhandle)</ept>.","source":"Non-functional equivalent of [CWorkerThread::GetThreadHandle](../../atl/reference/cworkerthread-class.md#cworkerthread__getthreadhandle)."},{"pos":[1686,1747],"content":"<bpt id=\"p1\">[</bpt>CNoWorkerThread::GetThreadId<ept id=\"p1\">](#cnoworkerthread__getthreadid)</ept>","source":"[CNoWorkerThread::GetThreadId](#cnoworkerthread__getthreadid)"},{"pos":[1748,1877],"content":"Non-functional equivalent of <bpt id=\"p1\">[</bpt>CWorkerThread::GetThreadId<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__getthreadid)</ept>.","source":"Non-functional equivalent of [CWorkerThread::GetThreadId](../../atl/reference/cworkerthread-class.md#cworkerthread__getthreadid)."},{"pos":[1882,1941],"content":"<bpt id=\"p1\">[</bpt>CNoWorkerThread::Initialize<ept id=\"p1\">](#cnoworkerthread__initialize)</ept>","source":"[CNoWorkerThread::Initialize](#cnoworkerthread__initialize)"},{"pos":[1942,2069],"content":"Non-functional equivalent of <bpt id=\"p1\">[</bpt>CWorkerThread::Initialize<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__initialize)</ept>.","source":"Non-functional equivalent of [CWorkerThread::Initialize](../../atl/reference/cworkerthread-class.md#cworkerthread__initialize)."},{"pos":[2074,2137],"content":"<bpt id=\"p1\">[</bpt>CNoWorkerThread::RemoveHandle<ept id=\"p1\">](#cnoworkerthread__removehandle)</ept>","source":"[CNoWorkerThread::RemoveHandle](#cnoworkerthread__removehandle)"},{"pos":[2138,2269],"content":"Non-functional equivalent of <bpt id=\"p1\">[</bpt>CWorkerThread::RemoveHandle<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__removehandle)</ept>.","source":"Non-functional equivalent of [CWorkerThread::RemoveHandle](../../atl/reference/cworkerthread-class.md#cworkerthread__removehandle)."},{"pos":[2274,2329],"content":"<bpt id=\"p1\">[</bpt>CNoWorkerThread::Shutdown<ept id=\"p1\">](#cnoworkerthread__shutdown)</ept>","source":"[CNoWorkerThread::Shutdown](#cnoworkerthread__shutdown)"},{"pos":[2330,2453],"content":"Non-functional equivalent of <bpt id=\"p1\">[</bpt>CWorkerThread::Shutdown<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__shutdown)</ept>.","source":"Non-functional equivalent of [CWorkerThread::Shutdown](../../atl/reference/cworkerthread-class.md#cworkerthread__shutdown)."},{"pos":[2463,2470],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This class provides the same public interface as <bpt id=\"p1\">[</bpt>CWorkerThread<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md)</ept>.","pos":[2474,2583],"source":"This class provides the same public interface as [CWorkerThread](../../atl/reference/cworkerthread-class.md)."},{"content":"This interface is expected to be provided by the <ph id=\"ph1\">`MonitorClass`</ph> template parameter to cache classes.","pos":[2584,2684],"source":" This interface is expected to be provided by the `MonitorClass` template parameter to cache classes."},{"content":"The methods in this class are implemented to do nothing.","pos":[2691,2747]},{"content":"The methods that return an HRESULT always return S_OK, and the methods that return a HANDLE or thread ID always return 0.","pos":[2748,2869]},{"pos":[2878,2890],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2894,2915],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlutil.h","source":"**Header:** atlutil.h"},{"pos":[2925,2994],"content":"<bpt id=\"p1\">&lt;a name=\"cnoworkerthread__addhandle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CNoWorkerThread::AddHandle","linkify":"<a name=\"cnoworkerthread__addhandle\"></a>  CNoWorkerThread::AddHandle","source":"<a name=\"cnoworkerthread__addhandle\"></a>  CNoWorkerThread::AddHandle"},{"pos":[2998,3123],"content":"Non-functional equivalent of <bpt id=\"p1\">[</bpt>CWorkerThread::AddHandle<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__addhandle)</ept>.","source":"Non-functional equivalent of [CWorkerThread::AddHandle](../../atl/reference/cworkerthread-class.md#cworkerthread__addhandle)."},{"pos":[3267,3279],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Always returns S_OK.","pos":[3283,3303]},{"pos":[3313,3320],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The implementation provided by this class does nothing.","pos":[3324,3379]},{"pos":[3389,3456],"content":"<bpt id=\"p1\">&lt;a name=\"cnoworkerthread__addtimer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CNoWorkerThread::AddTimer","linkify":"<a name=\"cnoworkerthread__addtimer\"></a>  CNoWorkerThread::AddTimer","source":"<a name=\"cnoworkerthread__addtimer\"></a>  CNoWorkerThread::AddTimer"},{"pos":[3460,3583],"content":"Non-functional equivalent of <bpt id=\"p1\">[</bpt>CWorkerThread::AddTimer<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__addtimer)</ept>.","source":"Non-functional equivalent of [CWorkerThread::AddTimer](../../atl/reference/cworkerthread-class.md#cworkerthread__addtimer)."},{"pos":[3756,3768],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Always returns S_OK.","pos":[3772,3792]},{"pos":[3802,3809],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The implementation provided by this class does nothing.","pos":[3813,3868]},{"pos":[3878,3959],"content":"<bpt id=\"p1\">&lt;a name=\"cnoworkerthread__getthreadhandle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CNoWorkerThread::GetThreadHandle","linkify":"<a name=\"cnoworkerthread__getthreadhandle\"></a>  CNoWorkerThread::GetThreadHandle","source":"<a name=\"cnoworkerthread__getthreadhandle\"></a>  CNoWorkerThread::GetThreadHandle"},{"pos":[3963,4100],"content":"Non-functional equivalent of <bpt id=\"p1\">[</bpt>CWorkerThread::GetThreadHandle<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__getthreadhandle)</ept>.","source":"Non-functional equivalent of [CWorkerThread::GetThreadHandle](../../atl/reference/cworkerthread-class.md#cworkerthread__getthreadhandle)."},{"pos":[4157,4169],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Always returns NULL.","pos":[4173,4193]},{"pos":[4203,4210],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The implementation provided by this class does nothing.","pos":[4214,4269]},{"pos":[4279,4352],"content":"<bpt id=\"p1\">&lt;a name=\"cnoworkerthread__getthreadid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CNoWorkerThread::GetThreadId","linkify":"<a name=\"cnoworkerthread__getthreadid\"></a>  CNoWorkerThread::GetThreadId","source":"<a name=\"cnoworkerthread__getthreadid\"></a>  CNoWorkerThread::GetThreadId"},{"pos":[4356,4485],"content":"Non-functional equivalent of <bpt id=\"p1\">[</bpt>CWorkerThread::GetThreadId<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__getthreadid)</ept>.","source":"Non-functional equivalent of [CWorkerThread::GetThreadId](../../atl/reference/cworkerthread-class.md#cworkerthread__getthreadid)."},{"pos":[4537,4549],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Always returns 0.","pos":[4553,4570]},{"pos":[4580,4587],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The implementation provided by this class does nothing.","pos":[4591,4646]},{"pos":[4656,4727],"content":"<bpt id=\"p1\">&lt;a name=\"cnoworkerthread__initialize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CNoWorkerThread::Initialize","linkify":"<a name=\"cnoworkerthread__initialize\"></a>  CNoWorkerThread::Initialize","source":"<a name=\"cnoworkerthread__initialize\"></a>  CNoWorkerThread::Initialize"},{"pos":[4731,4858],"content":"Non-functional equivalent of <bpt id=\"p1\">[</bpt>CWorkerThread::Initialize<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__initialize)</ept>.","source":"Non-functional equivalent of [CWorkerThread::Initialize](../../atl/reference/cworkerthread-class.md#cworkerthread__initialize)."},{"pos":[4911,4923],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Always returns S_OK.","pos":[4927,4947]},{"pos":[4957,4964],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The implementation provided by this class does nothing.","pos":[4968,5023]},{"pos":[5033,5108],"content":"<bpt id=\"p1\">&lt;a name=\"cnoworkerthread__removehandle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CNoWorkerThread::RemoveHandle","linkify":"<a name=\"cnoworkerthread__removehandle\"></a>  CNoWorkerThread::RemoveHandle","source":"<a name=\"cnoworkerthread__removehandle\"></a>  CNoWorkerThread::RemoveHandle"},{"pos":[5112,5243],"content":"Non-functional equivalent of <bpt id=\"p1\">[</bpt>CWorkerThread::RemoveHandle<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__removehandle)</ept>.","source":"Non-functional equivalent of [CWorkerThread::RemoveHandle](../../atl/reference/cworkerthread-class.md#cworkerthread__removehandle)."},{"pos":[5319,5331],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Always returns S_OK.","pos":[5335,5355]},{"pos":[5365,5372],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The implementation provided by this class does nothing.","pos":[5376,5431]},{"pos":[5441,5508],"content":"<bpt id=\"p1\">&lt;a name=\"cnoworkerthread__shutdown\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CNoWorkerThread::Shutdown","linkify":"<a name=\"cnoworkerthread__shutdown\"></a>  CNoWorkerThread::Shutdown","source":"<a name=\"cnoworkerthread__shutdown\"></a>  CNoWorkerThread::Shutdown"},{"pos":[5512,5635],"content":"Non-functional equivalent of <bpt id=\"p1\">[</bpt>CWorkerThread::Shutdown<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__shutdown)</ept>.","source":"Non-functional equivalent of [CWorkerThread::Shutdown](../../atl/reference/cworkerthread-class.md#cworkerthread__shutdown)."},{"pos":[5723,5735],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Always returns S_OK.","pos":[5739,5759]},{"pos":[5769,5776],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The implementation provided by this class does nothing.","pos":[5780,5835]}],"content":"---\ntitle: \"CNoWorkerThread Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL::CNoWorkerThread\"\n  - \"ATL.CNoWorkerThread\"\n  - \"CNoWorkerThread\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CNoWorkerThread class\"\nms.assetid: 29f06bae-b658-4aac-9c14-331e996d25d1\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CNoWorkerThread Class\nUse this class as the argument for the `MonitorClass` template parameter to cache classes if you want to disable dynamic cache maintenance.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the Windows Runtime.  \n  \n## Syntax  \n  \n```\nclass CNoWorkerThread\n```  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CNoWorkerThread::AddHandle](#cnoworkerthread__addhandle)|Non-functional equivalent of [CWorkerThread::AddHandle](../../atl/reference/cworkerthread-class.md#cworkerthread__addhandle).|  \n|[CNoWorkerThread::AddTimer](#cnoworkerthread__addtimer)|Non-functional equivalent of [CWorkerThread::AddTimer](../../atl/reference/cworkerthread-class.md#cworkerthread__addtimer).|  \n|[CNoWorkerThread::GetThreadHandle](#cnoworkerthread__getthreadhandle)|Non-functional equivalent of [CWorkerThread::GetThreadHandle](../../atl/reference/cworkerthread-class.md#cworkerthread__getthreadhandle).|  \n|[CNoWorkerThread::GetThreadId](#cnoworkerthread__getthreadid)|Non-functional equivalent of [CWorkerThread::GetThreadId](../../atl/reference/cworkerthread-class.md#cworkerthread__getthreadid).|  \n|[CNoWorkerThread::Initialize](#cnoworkerthread__initialize)|Non-functional equivalent of [CWorkerThread::Initialize](../../atl/reference/cworkerthread-class.md#cworkerthread__initialize).|  \n|[CNoWorkerThread::RemoveHandle](#cnoworkerthread__removehandle)|Non-functional equivalent of [CWorkerThread::RemoveHandle](../../atl/reference/cworkerthread-class.md#cworkerthread__removehandle).|  \n|[CNoWorkerThread::Shutdown](#cnoworkerthread__shutdown)|Non-functional equivalent of [CWorkerThread::Shutdown](../../atl/reference/cworkerthread-class.md#cworkerthread__shutdown).|  \n  \n## Remarks  \n This class provides the same public interface as [CWorkerThread](../../atl/reference/cworkerthread-class.md). This interface is expected to be provided by the `MonitorClass` template parameter to cache classes.  \n  \n The methods in this class are implemented to do nothing. The methods that return an HRESULT always return S_OK, and the methods that return a HANDLE or thread ID always return 0.  \n  \n## Requirements  \n **Header:** atlutil.h  \n  \n##  <a name=\"cnoworkerthread__addhandle\"></a>  CNoWorkerThread::AddHandle  \n Non-functional equivalent of [CWorkerThread::AddHandle](../../atl/reference/cworkerthread-class.md#cworkerthread__addhandle).  \n  \n```\nHRESULT AddHandle(HANDLE /* hObject\n */,\n    IWorkerThreadClient* /* pClient\n */,\n    DWORD_PTR /* dwParam\n */) throw();\n```  \n  \n### Return Value  \n Always returns S_OK.  \n  \n### Remarks  \n The implementation provided by this class does nothing.  \n  \n##  <a name=\"cnoworkerthread__addtimer\"></a>  CNoWorkerThread::AddTimer  \n Non-functional equivalent of [CWorkerThread::AddTimer](../../atl/reference/cworkerthread-class.md#cworkerthread__addtimer).  \n  \n```\nHRESULT AddTimer(DWORD /* dwInterval\n */,\n    IWorkerThreadClient* /* pClient\n */,\n    DWORD_PTR /* dwParam\n */,\n    HANDLE* /* phTimer\n */) throw();\n```  \n  \n### Return Value  \n Always returns S_OK.  \n  \n### Remarks  \n The implementation provided by this class does nothing.  \n  \n##  <a name=\"cnoworkerthread__getthreadhandle\"></a>  CNoWorkerThread::GetThreadHandle  \n Non-functional equivalent of [CWorkerThread::GetThreadHandle](../../atl/reference/cworkerthread-class.md#cworkerthread__getthreadhandle).  \n  \n```\nHANDLE GetThreadHandle() throw();\n```  \n  \n### Return Value  \n Always returns NULL.  \n  \n### Remarks  \n The implementation provided by this class does nothing.  \n  \n##  <a name=\"cnoworkerthread__getthreadid\"></a>  CNoWorkerThread::GetThreadId  \n Non-functional equivalent of [CWorkerThread::GetThreadId](../../atl/reference/cworkerthread-class.md#cworkerthread__getthreadid).  \n  \n```\nDWORD GetThreadId() throw();\n```  \n  \n### Return Value  \n Always returns 0.  \n  \n### Remarks  \n The implementation provided by this class does nothing.  \n  \n##  <a name=\"cnoworkerthread__initialize\"></a>  CNoWorkerThread::Initialize  \n Non-functional equivalent of [CWorkerThread::Initialize](../../atl/reference/cworkerthread-class.md#cworkerthread__initialize).  \n  \n```\nHRESULT Initialize() throw();\n```  \n  \n### Return Value  \n Always returns S_OK.  \n  \n### Remarks  \n The implementation provided by this class does nothing.  \n  \n##  <a name=\"cnoworkerthread__removehandle\"></a>  CNoWorkerThread::RemoveHandle  \n Non-functional equivalent of [CWorkerThread::RemoveHandle](../../atl/reference/cworkerthread-class.md#cworkerthread__removehandle).  \n  \n```\nHRESULT RemoveHandle(HANDLE /* hObject\n */) throw();\n```  \n  \n### Return Value  \n Always returns S_OK.  \n  \n### Remarks  \n The implementation provided by this class does nothing.  \n  \n##  <a name=\"cnoworkerthread__shutdown\"></a>  CNoWorkerThread::Shutdown  \n Non-functional equivalent of [CWorkerThread::Shutdown](../../atl/reference/cworkerthread-class.md#cworkerthread__shutdown).  \n  \n```\nHRESULT Shutdown(DWORD dwWait = ATL_WORKER_THREAD_WAIT) throw();\n```  \n  \n### Return Value  \n Always returns S_OK.  \n  \n### Remarks  \n The implementation provided by this class does nothing.\n\n\n\n\n\n\n\n\n\n"}