<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">91fb85679fd6c66bc97974912a2de688f494d5e9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\error-messages\tool-errors\linker-tools-error-lnk2022.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f701ecebe84dd2cf001ba0fcf32cabf9c0596b55</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8590d20e6e8a0c853f7b168a86b01c37e417453e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Linker Tools Error LNK2022 | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Linker Tools Error LNK2022</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>metadata operation failed (HRESULT) : error_message</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The linker detected an error while merging metadata.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The metadata errors must be resolved to link successfully.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>One way to diagnose this problem is to run <bpt id="p1">**</bpt>ildasm â€“tokens<ept id="p1">**</ept> on the object files to find which types have the tokens listed in <ph id="ph1">`error_message`</ph>, and look for differences.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In metadata, two different types with the same name is not valid, even if the just LayoutType attribute is different.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>One reason for LNK2022 is when a type (such as a struct) exists in multiple compilands with the same name, but with conflicting definitions, and when you compile with <bpt id="p1">[</bpt>/clr<ept id="p1">](../../build/reference/clr-common-language-runtime-compilation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In this case, make sure that the type has an identical definition in all compilands.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The type name is listed in <ph id="ph1">`error_message`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Another possible cause for LNK2022 is when the linker finds a metadata file in a different location than was specified to the compiler (with <bpt id="p1">[</bpt>#using<ept id="p1">](../../preprocessor/hash-using-directive-cpp.md)</ept> ).</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Make sure that the metadata file (.dll or .netmodule) is in the same location when passed to the linker, as it was when it was passed to the compiler.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When building an ATL application, the use of <bpt id="p1">[</bpt>_ATL_MIXED<ept id="p1">](http://msdn.microsoft.com/Library/11b59a83-7098-43e2-9f7b-408299930966)</ept> is required in all compilands, if it is used in at least one.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following sample defines an empty type.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This sample shows that you cannot link two source code files that contain types of the same name but different definitions.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following sample generates LNK2022.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>