{"nodes":[{"pos":[12,48],"content":"CRichEditCtrl Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CRichEditCtrl Class | Microsoft Docs","pos":[0,36]}]},{"pos":[683,702],"content":"CRichEditCtrl Class","linkify":"CRichEditCtrl Class","nodes":[{"content":"CRichEditCtrl Class","pos":[0,19]}]},{"content":"Provides the functionality of the rich edit control.","pos":[703,755]},{"pos":[764,770],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[830,837],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[847,866],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[873,877]},{"content":"Description","pos":[878,889]},{"pos":[927,988],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::CRichEditCtrl<ept id=\"p1\">](#cricheditctrl__cricheditctrl)</ept>","source":"[CRichEditCtrl::CRichEditCtrl](#cricheditctrl__cricheditctrl)"},{"pos":[989,1025],"content":"Constructs a <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Constructs a `CRichEditCtrl` object."},{"pos":[1036,1050],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1057,1061]},{"content":"Description","pos":[1062,1073]},{"pos":[1111,1162],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::CanPaste<ept id=\"p1\">](#cricheditctrl__canpaste)</ept>","source":"[CRichEditCtrl::CanPaste](#cricheditctrl__canpaste)"},{"content":"Determines if the contents of the Clipboard can be pasted into this rich edit control.","pos":[1163,1249]},{"pos":[1254,1303],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::CanRedo<ept id=\"p1\">](#cricheditctrl__canredo)</ept>","source":"[CRichEditCtrl::CanRedo](#cricheditctrl__canredo)"},{"content":"Determines whether there are any actions in the control's redo queue.","pos":[1304,1373]},{"pos":[1378,1427],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::CanUndo<ept id=\"p1\">](#cricheditctrl__canundo)</ept>","source":"[CRichEditCtrl::CanUndo](#cricheditctrl__canundo)"},{"content":"Determines if an editing operation can be undone.","pos":[1428,1477]},{"pos":[1482,1539],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::CharFromPos<ept id=\"p1\">](#cricheditctrl__charfrompos)</ept>","source":"[CRichEditCtrl::CharFromPos](#cricheditctrl__charfrompos)"},{"content":"Retrieves information about the character closest to a specified point in the client area of an edit control.","pos":[1540,1649]},{"pos":[1654,1699],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::Clear<ept id=\"p1\">](#cricheditctrl__clear)</ept>","source":"[CRichEditCtrl::Clear](#cricheditctrl__clear)"},{"content":"Clears the current selection.","pos":[1700,1729]},{"pos":[1734,1777],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::Copy<ept id=\"p1\">](#cricheditctrl__copy)</ept>","source":"[CRichEditCtrl::Copy](#cricheditctrl__copy)"},{"content":"Copies the current selection to the Clipboard.","pos":[1778,1824]},{"pos":[1829,1876],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::Create<ept id=\"p1\">](#cricheditctrl__create)</ept>","source":"[CRichEditCtrl::Create](#cricheditctrl__create)"},{"pos":[1877,1966],"content":"Creates the Windows rich edit control and associates it with this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Creates the Windows rich edit control and associates it with this `CRichEditCtrl` object."},{"pos":[1971,2022],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::CreateEx<ept id=\"p1\">](#cricheditctrl__createex)</ept>","source":"[CRichEditCtrl::CreateEx](#cricheditctrl__createex)"},{"pos":[2023,2155],"content":"Creates the Windows rich edit control with the specified extended Windows styles and associates it with this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Creates the Windows rich edit control with the specified extended Windows styles and associates it with this `CRichEditCtrl` object."},{"pos":[2160,2201],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::Cut<ept id=\"p1\">](#cricheditctrl__cut)</ept>","source":"[CRichEditCtrl::Cut](#cricheditctrl__cut)"},{"content":"Cuts the current selection to the Clipboard.","pos":[2202,2246]},{"pos":[2251,2308],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::DisplayBand<ept id=\"p1\">](#cricheditctrl__displayband)</ept>","source":"[CRichEditCtrl::DisplayBand](#cricheditctrl__displayband)"},{"pos":[2309,2375],"content":"Displays a portion of the contents of this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Displays a portion of the contents of this `CRichEditCtrl` object."},{"pos":[2380,2445],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::EmptyUndoBuffer<ept id=\"p1\">](#cricheditctrl__emptyundobuffer)</ept>","source":"[CRichEditCtrl::EmptyUndoBuffer](#cricheditctrl__emptyundobuffer)"},{"pos":[2446,2507],"content":"Resets (clears) the undo flag of this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Resets (clears) the undo flag of this `CRichEditCtrl` object."},{"pos":[2512,2563],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::FindText<ept id=\"p1\">](#cricheditctrl__findtext)</ept>","source":"[CRichEditCtrl::FindText](#cricheditctrl__findtext)"},{"pos":[2564,2612],"content":"Locates text within this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Locates text within this `CRichEditCtrl` object."},{"pos":[2617,2678],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::FindWordBreak<ept id=\"p1\">](#cricheditctrl__findwordbreak)</ept>","source":"[CRichEditCtrl::FindWordBreak](#cricheditctrl__findwordbreak)"},{"content":"Finds the next word break before or after the specified character position, or retrieves information about the character at that position.","pos":[2679,2817]},{"pos":[2822,2879],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::FormatRange<ept id=\"p1\">](#cricheditctrl__formatrange)</ept>","source":"[CRichEditCtrl::FormatRange](#cricheditctrl__formatrange)"},{"content":"Formats a range of text for the target output device.","pos":[2880,2933]},{"pos":[2938,2993],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::GetCharPos<ept id=\"p1\">](#cricheditctrl__getcharpos)</ept>","source":"[CRichEditCtrl::GetCharPos](#cricheditctrl__getcharpos)"},{"pos":[2994,3074],"content":"Determines the location of a given character within this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Determines the location of a given character within this `CRichEditCtrl` object."},{"pos":[3079,3154],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::GetDefaultCharFormat<ept id=\"p1\">](#cricheditctrl__getdefaultcharformat)</ept>","source":"[CRichEditCtrl::GetDefaultCharFormat](#cricheditctrl__getdefaultcharformat)"},{"pos":[3155,3248],"content":"Retrieves the current default character formatting attributes in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Retrieves the current default character formatting attributes in this `CRichEditCtrl` object."},{"pos":[3253,3312],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::GetEventMask<ept id=\"p1\">](#cricheditctrl__geteventmask)</ept>","source":"[CRichEditCtrl::GetEventMask](#cricheditctrl__geteventmask)"},{"pos":[3313,3370],"content":"Retrieves the event mask for this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Retrieves the event mask for this `CRichEditCtrl` object."},{"pos":[3375,3448],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::GetFirstVisibleLine<ept id=\"p1\">](#cricheditctrl__getfirstvisibleline)</ept>","source":"[CRichEditCtrl::GetFirstVisibleLine](#cricheditctrl__getfirstvisibleline)"},{"pos":[3449,3516],"content":"Determines the topmost visible line in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Determines the topmost visible line in this `CRichEditCtrl` object."},{"pos":[3521,3586],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::GetIRichEditOle<ept id=\"p1\">](#cricheditctrl__getiricheditole)</ept>","source":"[CRichEditCtrl::GetIRichEditOle](#cricheditctrl__getiricheditole)"},{"pos":[3587,3666],"content":"Retrieves a pointer to the <ph id=\"ph1\">`IRichEditOle`</ph> interface for this rich edit control.","source":"Retrieves a pointer to the `IRichEditOle` interface for this rich edit control."},{"pos":[3671,3730],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::GetLimitText<ept id=\"p1\">](#cricheditctrl__getlimittext)</ept>","source":"[CRichEditCtrl::GetLimitText](#cricheditctrl__getlimittext)"},{"pos":[3731,3818],"content":"Gets the limit on the amount of text a user can enter into this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Gets the limit on the amount of text a user can enter into this `CRichEditCtrl` object."},{"pos":[3823,3872],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::GetLine<ept id=\"p1\">](#cricheditctrl__getline)</ept>","source":"[CRichEditCtrl::GetLine](#cricheditctrl__getline)"},{"pos":[3873,3931],"content":"Retrieves a line of text from this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Retrieves a line of text from this `CRichEditCtrl` object."},{"pos":[3936,3995],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::GetLineCount<ept id=\"p1\">](#cricheditctrl__getlinecount)</ept>","source":"[CRichEditCtrl::GetLineCount](#cricheditctrl__getlinecount)"},{"pos":[3996,4057],"content":"Retrieves the number of lines in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Retrieves the number of lines in this `CRichEditCtrl` object."},{"pos":[4062,4115],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::GetModify<ept id=\"p1\">](#cricheditctrl__getmodify)</ept>","source":"[CRichEditCtrl::GetModify](#cricheditctrl__getmodify)"},{"pos":[4116,4207],"content":"Determines if the contents of this <ph id=\"ph1\">`CRichEditCtrl`</ph> object have changed since the last save.","source":"Determines if the contents of this `CRichEditCtrl` object have changed since the last save."},{"pos":[4212,4267],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::GetOptions<ept id=\"p1\">](#cricheditctrl__getoptions)</ept>","source":"[CRichEditCtrl::GetOptions](#cricheditctrl__getoptions)"},{"content":"Retrieves the rich edit control options.","pos":[4268,4308]},{"pos":[4313,4374],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::GetParaFormat<ept id=\"p1\">](#cricheditctrl__getparaformat)</ept>","source":"[CRichEditCtrl::GetParaFormat](#cricheditctrl__getparaformat)"},{"pos":[4375,4477],"content":"Retrieves the paragraph formatting attributes in the current selection in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Retrieves the paragraph formatting attributes in the current selection in this `CRichEditCtrl` object."},{"pos":[4482,4545],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::GetPunctuation<ept id=\"p1\">](#cricheditctrl__getpunctuation)</ept>","source":"[CRichEditCtrl::GetPunctuation](#cricheditctrl__getpunctuation)"},{"content":"Retrieves the current punctuation characters for the rich edit control.","pos":[4546,4617]},{"content":"This message is available only in Asian-language versions of the operating system.","pos":[4618,4700]},{"pos":[4705,4754],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::GetRect<ept id=\"p1\">](#cricheditctrl__getrect)</ept>","source":"[CRichEditCtrl::GetRect](#cricheditctrl__getrect)"},{"pos":[4755,4822],"content":"Retrieves the formatting rectangle for this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Retrieves the formatting rectangle for this `CRichEditCtrl` object."},{"pos":[4827,4884],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::GetRedoName<ept id=\"p1\">](#cricheditctrl__getredoname)</ept>","source":"[CRichEditCtrl::GetRedoName](#cricheditctrl__getredoname)"},{"content":"Retrieves the type of the next action, if any, in the control's redo queue.","pos":[4885,4960]},{"pos":[4965,5012],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::GetSel<ept id=\"p1\">](#cricheditctrl__getsel)</ept>","source":"[CRichEditCtrl::GetSel](#cricheditctrl__getsel)"},{"pos":[5013,5108],"content":"Gets the starting and ending positions of the current selection in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Gets the starting and ending positions of the current selection in this `CRichEditCtrl` object."},{"pos":[5113,5192],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::GetSelectionCharFormat<ept id=\"p1\">](#cricheditctrl__getselectioncharformat)</ept>","source":"[CRichEditCtrl::GetSelectionCharFormat](#cricheditctrl__getselectioncharformat)"},{"pos":[5193,5295],"content":"Retrieves the character formatting attributes in the current selection in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Retrieves the character formatting attributes in the current selection in this `CRichEditCtrl` object."},{"pos":[5300,5367],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::GetSelectionType<ept id=\"p1\">](#cricheditctrl__getselectiontype)</ept>","source":"[CRichEditCtrl::GetSelectionType](#cricheditctrl__getselectiontype)"},{"pos":[5368,5455],"content":"Retrieves the type of contents in the current selection in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Retrieves the type of contents in the current selection in this `CRichEditCtrl` object."},{"pos":[5460,5515],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::GetSelText<ept id=\"p1\">](#cricheditctrl__getseltext)</ept>","source":"[CRichEditCtrl::GetSelText](#cricheditctrl__getseltext)"},{"pos":[5516,5585],"content":"Gets the text of the current selection in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object","source":"Gets the text of the current selection in this `CRichEditCtrl` object"},{"pos":[5590,5651],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::GetTextLength<ept id=\"p1\">](#cricheditctrl__gettextlength)</ept>","source":"[CRichEditCtrl::GetTextLength](#cricheditctrl__gettextlength)"},{"content":"Retrieves the length of the text, in characters, in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","pos":[5652,5732],"source":"Retrieves the length of the text, in characters, in this `CRichEditCtrl` object."},{"content":"Does not include the terminating null character.","pos":[5733,5781]},{"pos":[5786,5851],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::GetTextLengthEx<ept id=\"p1\">](#cricheditctrl__gettextlengthex)</ept>","source":"[CRichEditCtrl::GetTextLengthEx](#cricheditctrl__gettextlengthex)"},{"content":"Retrieves the number of characters or bytes in the rich edit view.","pos":[5852,5918]},{"content":"Accepts a list of flags to indicate the method of determining length of the text in a rich edit control","pos":[5919,6022]},{"pos":[6027,6084],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::GetTextMode<ept id=\"p1\">](#cricheditctrl__gettextmode)</ept>","source":"[CRichEditCtrl::GetTextMode](#cricheditctrl__gettextmode)"},{"content":"Retrieves the current text mode and undo level of a rich edit control.","pos":[6085,6155]},{"pos":[6160,6219],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::GetTextRange<ept id=\"p1\">](#cricheditctrl__gettextrange)</ept>","source":"[CRichEditCtrl::GetTextRange](#cricheditctrl__gettextrange)"},{"content":"Retrieves the specified range of text.","pos":[6220,6258]},{"pos":[6263,6320],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::GetUndoName<ept id=\"p1\">](#cricheditctrl__getundoname)</ept>","source":"[CRichEditCtrl::GetUndoName](#cricheditctrl__getundoname)"},{"content":"Retrieves the type of the next undo action, if any.","pos":[6321,6372]},{"pos":[6377,6442],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::GetWordWrapMode<ept id=\"p1\">](#cricheditctrl__getwordwrapmode)</ept>","source":"[CRichEditCtrl::GetWordWrapMode](#cricheditctrl__getwordwrapmode)"},{"content":"Retrieves the current word wrapping and word breaking options for the rich edit control.","pos":[6443,6531]},{"content":"This message is available only in Asian-language versions of the operating system.","pos":[6532,6614]},{"pos":[6619,6680],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::HideSelection<ept id=\"p1\">](#cricheditctrl__hideselection)</ept>","source":"[CRichEditCtrl::HideSelection](#cricheditctrl__hideselection)"},{"content":"Shows or hides the current selection.","pos":[6681,6718]},{"pos":[6723,6776],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::LimitText<ept id=\"p1\">](#cricheditctrl__limittext)</ept>","source":"[CRichEditCtrl::LimitText](#cricheditctrl__limittext)"},{"pos":[6777,6852],"content":"Limits the amount of text a user can enter into the <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Limits the amount of text a user can enter into the `CRichEditCtrl` object."},{"pos":[6857,6916],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::LineFromChar<ept id=\"p1\">](#cricheditctrl__linefromchar)</ept>","source":"[CRichEditCtrl::LineFromChar](#cricheditctrl__linefromchar)"},{"content":"Determines which line contains the given character.","pos":[6917,6968]},{"pos":[6973,7026],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::LineIndex<ept id=\"p1\">](#cricheditctrl__lineindex)</ept>","source":"[CRichEditCtrl::LineIndex](#cricheditctrl__lineindex)"},{"pos":[7027,7104],"content":"Retrieves the character index of a given line in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Retrieves the character index of a given line in this `CRichEditCtrl` object."},{"pos":[7109,7164],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::LineLength<ept id=\"p1\">](#cricheditctrl__linelength)</ept>","source":"[CRichEditCtrl::LineLength](#cricheditctrl__linelength)"},{"pos":[7165,7233],"content":"Retrieves the length of a given line in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Retrieves the length of a given line in this `CRichEditCtrl` object."},{"pos":[7238,7293],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::LineScroll<ept id=\"p1\">](#cricheditctrl__linescroll)</ept>","source":"[CRichEditCtrl::LineScroll](#cricheditctrl__linescroll)"},{"pos":[7294,7342],"content":"Scrolls the text in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Scrolls the text in this `CRichEditCtrl` object."},{"pos":[7347,7392],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::Paste<ept id=\"p1\">](#cricheditctrl__paste)</ept>","source":"[CRichEditCtrl::Paste](#cricheditctrl__paste)"},{"content":"Inserts the contents of the Clipboard into this rich edit control.","pos":[7393,7459]},{"pos":[7464,7523],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::PasteSpecial<ept id=\"p1\">](#cricheditctrl__pastespecial)</ept>","source":"[CRichEditCtrl::PasteSpecial](#cricheditctrl__pastespecial)"},{"content":"Inserts the contents of the Clipboard into this rich edit control in the specified data format.","pos":[7524,7619]},{"pos":[7624,7681],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::PosFromChar<ept id=\"p1\">](#cricheditctrl__posfromchar)</ept>","source":"[CRichEditCtrl::PosFromChar](#cricheditctrl__posfromchar)"},{"content":"Retrieves the client area coordinates of a specified character in an edit control.","pos":[7682,7764]},{"pos":[7769,7812],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::Redo<ept id=\"p1\">](#cricheditctrl__redo)</ept>","source":"[CRichEditCtrl::Redo](#cricheditctrl__redo)"},{"content":"Redoes the next action in the control's redo queue.","pos":[7813,7864]},{"pos":[7869,7924],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::ReplaceSel<ept id=\"p1\">](#cricheditctrl__replacesel)</ept>","source":"[CRichEditCtrl::ReplaceSel](#cricheditctrl__replacesel)"},{"pos":[7925,8007],"content":"Replaces the current selection in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object with specified text.","source":"Replaces the current selection in this `CRichEditCtrl` object with specified text."},{"pos":[8012,8073],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::RequestResize<ept id=\"p1\">](#cricheditctrl__requestresize)</ept>","source":"[CRichEditCtrl::RequestResize](#cricheditctrl__requestresize)"},{"pos":[8074,8146],"content":"Forces this <ph id=\"ph1\">`CRichEditCtrl`</ph> object to send request resize notifications.","source":"Forces this `CRichEditCtrl` object to send request resize notifications."},{"pos":[8151,8218],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::SetAutoURLDetect<ept id=\"p1\">](#cricheditctrl__setautourldetect)</ept>","source":"[CRichEditCtrl::SetAutoURLDetect](#cricheditctrl__setautourldetect)"},{"content":"Indicates if the auto URL detection is active in a rich edit control.","pos":[8219,8288]},{"pos":[8293,8364],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::SetBackgroundColor<ept id=\"p1\">](#cricheditctrl__setbackgroundcolor)</ept>","source":"[CRichEditCtrl::SetBackgroundColor](#cricheditctrl__setbackgroundcolor)"},{"pos":[8365,8422],"content":"Sets the background color in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Sets the background color in this `CRichEditCtrl` object."},{"pos":[8427,8502],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::SetDefaultCharFormat<ept id=\"p1\">](#cricheditctrl__setdefaultcharformat)</ept>","source":"[CRichEditCtrl::SetDefaultCharFormat](#cricheditctrl__setdefaultcharformat)"},{"pos":[8503,8591],"content":"Sets the current default character formatting attributes in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Sets the current default character formatting attributes in this `CRichEditCtrl` object."},{"pos":[8596,8655],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::SetEventMask<ept id=\"p1\">](#cricheditctrl__seteventmask)</ept>","source":"[CRichEditCtrl::SetEventMask](#cricheditctrl__seteventmask)"},{"pos":[8656,8708],"content":"Sets the event mask for this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Sets the event mask for this `CRichEditCtrl` object."},{"pos":[8713,8766],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::SetModify<ept id=\"p1\">](#cricheditctrl__setmodify)</ept>","source":"[CRichEditCtrl::SetModify](#cricheditctrl__setmodify)"},{"pos":[8767,8836],"content":"Sets or clears the modification flag for this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Sets or clears the modification flag for this `CRichEditCtrl` object."},{"pos":[8841,8904],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::SetOLECallback<ept id=\"p1\">](#cricheditctrl__setolecallback)</ept>","source":"[CRichEditCtrl::SetOLECallback](#cricheditctrl__setolecallback)"},{"pos":[8905,8975],"content":"Sets the <ph id=\"ph1\">`IRichEditOleCallback`</ph> COM object for this rich edit control.","source":"Sets the `IRichEditOleCallback` COM object for this rich edit control."},{"pos":[8980,9035],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::SetOptions<ept id=\"p1\">](#cricheditctrl__setoptions)</ept>","source":"[CRichEditCtrl::SetOptions](#cricheditctrl__setoptions)"},{"pos":[9036,9085],"content":"Sets the options for this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Sets the options for this `CRichEditCtrl` object."},{"pos":[9090,9151],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::SetParaFormat<ept id=\"p1\">](#cricheditctrl__setparaformat)</ept>","source":"[CRichEditCtrl::SetParaFormat](#cricheditctrl__setparaformat)"},{"pos":[9152,9249],"content":"Sets the paragraph formatting attributes in the current selection in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Sets the paragraph formatting attributes in the current selection in this `CRichEditCtrl` object."},{"pos":[9254,9317],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::SetPunctuation<ept id=\"p1\">](#cricheditctrl__setpunctuation)</ept>","source":"[CRichEditCtrl::SetPunctuation](#cricheditctrl__setpunctuation)"},{"content":"Sets the punctuation characters for a rich edit control.","pos":[9318,9374]},{"content":"This message is available only in Asian-language versions of the operating system.","pos":[9375,9457]},{"pos":[9462,9519],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::SetReadOnly<ept id=\"p1\">](#cricheditctrl__setreadonly)</ept>","source":"[CRichEditCtrl::SetReadOnly](#cricheditctrl__setreadonly)"},{"pos":[9520,9578],"content":"Sets the read-only option for this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Sets the read-only option for this `CRichEditCtrl` object."},{"pos":[9583,9632],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::SetRect<ept id=\"p1\">](#cricheditctrl__setrect)</ept>","source":"[CRichEditCtrl::SetRect](#cricheditctrl__setrect)"},{"pos":[9633,9695],"content":"Sets the formatting rectangle for this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Sets the formatting rectangle for this `CRichEditCtrl` object."},{"pos":[9700,9747],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::SetSel<ept id=\"p1\">](#cricheditctrl__setsel)</ept>","source":"[CRichEditCtrl::SetSel](#cricheditctrl__setsel)"},{"pos":[9748,9798],"content":"Sets the selection in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Sets the selection in this `CRichEditCtrl` object."},{"pos":[9803,9882],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::SetSelectionCharFormat<ept id=\"p1\">](#cricheditctrl__setselectioncharformat)</ept>","source":"[CRichEditCtrl::SetSelectionCharFormat](#cricheditctrl__setselectioncharformat)"},{"pos":[9883,9980],"content":"Sets the character formatting attributes in the current selection in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Sets the character formatting attributes in the current selection in this `CRichEditCtrl` object."},{"pos":[9985,10050],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::SetTargetDevice<ept id=\"p1\">](#cricheditctrl__settargetdevice)</ept>","source":"[CRichEditCtrl::SetTargetDevice](#cricheditctrl__settargetdevice)"},{"pos":[10051,10113],"content":"Sets the target output device for this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Sets the target output device for this `CRichEditCtrl` object."},{"pos":[10118,10175],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::SetTextMode<ept id=\"p1\">](#cricheditctrl__settextmode)</ept>","source":"[CRichEditCtrl::SetTextMode](#cricheditctrl__settextmode)"},{"content":"Sets the text mode or undo level of a rich edit control.","pos":[10176,10232]},{"content":"The message fails if the control contains text.","pos":[10233,10280]},{"pos":[10285,10344],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::SetUndoLimit<ept id=\"p1\">](#cricheditctrl__setundolimit)</ept>","source":"[CRichEditCtrl::SetUndoLimit](#cricheditctrl__setundolimit)"},{"content":"Sets the maximum number of actions that can stored in the undo queue.","pos":[10345,10414]},{"pos":[10419,10488],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::SetWordCharFormat<ept id=\"p1\">](#cricheditctrl__setwordcharformat)</ept>","source":"[CRichEditCtrl::SetWordCharFormat](#cricheditctrl__setwordcharformat)"},{"pos":[10489,10581],"content":"Sets the character formatting attributes in the current word in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Sets the character formatting attributes in the current word in this `CRichEditCtrl` object."},{"pos":[10586,10651],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::SetWordWrapMode<ept id=\"p1\">](#cricheditctrl__setwordwrapmode)</ept>","source":"[CRichEditCtrl::SetWordWrapMode](#cricheditctrl__setwordwrapmode)"},{"content":"Sets the word-wrapping and word-breaking options for the rich edit control.","pos":[10652,10727]},{"content":"This message is available only in Asian-language versions of the operating system.","pos":[10728,10810]},{"pos":[10815,10880],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::StopGroupTyping<ept id=\"p1\">](#cricheditctrl__stopgrouptyping)</ept>","source":"[CRichEditCtrl::StopGroupTyping](#cricheditctrl__stopgrouptyping)"},{"content":"Stops the control from collecting additional typing actions into the current undo action.","pos":[10881,10970]},{"content":"The control stores the next typing action, if any, into a new action in the undo queue.","pos":[10971,11058]},{"pos":[11063,11114],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::StreamIn<ept id=\"p1\">](#cricheditctrl__streamin)</ept>","source":"[CRichEditCtrl::StreamIn](#cricheditctrl__streamin)"},{"pos":[11115,11182],"content":"Inserts text from an input stream into this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Inserts text from an input stream into this `CRichEditCtrl` object."},{"pos":[11187,11240],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::StreamOut<ept id=\"p1\">](#cricheditctrl__streamout)</ept>","source":"[CRichEditCtrl::StreamOut](#cricheditctrl__streamout)"},{"pos":[11241,11308],"content":"Stores text from this <ph id=\"ph1\">`CRichEditCtrl`</ph> object into an output stream.","source":"Stores text from this `CRichEditCtrl` object into an output stream."},{"pos":[11313,11356],"content":"<bpt id=\"p1\">[</bpt>CRichEditCtrl::Undo<ept id=\"p1\">](#cricheditctrl__undo)</ept>","source":"[CRichEditCtrl::Undo](#cricheditctrl__undo)"},{"content":"Reverses the last editing operation.","pos":[11357,11393]},{"pos":[11403,11410],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A \"rich edit control\" is a window in which the user can enter and edit text.","pos":[11414,11490]},{"content":"The text can be assigned character and paragraph formatting, and can include embedded OLE objects.","pos":[11491,11589]},{"content":"Rich edit controls provide a programming interface for formatting text.","pos":[11590,11661]},{"content":"However, an application must implement any user interface components necessary to make formatting operations available to the user.","pos":[11662,11793]},{"content":"This Windows Common control (and therefore the <ph id=\"ph1\">`CRichEditCtrl`</ph> class) is available only to programs running under Windows 95/98 and Windows NT versions 3.51 and later.","pos":[11800,11967],"source":"This Windows Common control (and therefore the `CRichEditCtrl` class) is available only to programs running under Windows 95/98 and Windows NT versions 3.51 and later."},{"content":"The <ph id=\"ph1\">`CRichEditCtrl`</ph> class supports versions 2.0 and 3.0 of the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> rich edit control.","pos":[11968,12101],"source":" The `CRichEditCtrl` class supports versions 2.0 and 3.0 of the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] rich edit control."},{"pos":[12109,12639],"content":"[!CAUTION]\n If you are using a rich edit control in a dialog box (regardless whether your application is SDI, MDI, or dialog-based), you must call [AfxInitRichEdit](application-information-and-management.md#afxinitrichedit) once before the dialog box is displayed. A typical place to call this function is in your program's `InitInstance` member function. You do not need to call it for each time you display the dialog box, only the first time. You do not have to call `AfxInitRichEdit` if you are working with `CRichEditView`.","leadings":["","> "],"nodes":[{"content":" If you are using a rich edit control in a dialog box (regardless whether your application is SDI, MDI, or dialog-based), you must call [AfxInitRichEdit](application-information-and-management.md#afxinitrichedit) once before the dialog box is displayed. A typical place to call this function is in your program's `InitInstance` member function. You do not need to call it for each time you display the dialog box, only the first time. You do not have to call `AfxInitRichEdit` if you are working with `CRichEditView`.","pos":[11,528],"nodes":[{"content":"If you are using a rich edit control in a dialog box (regardless whether your application is SDI, MDI, or dialog-based), you must call <bpt id=\"p1\">[</bpt>AfxInitRichEdit<ept id=\"p1\">](application-information-and-management.md#afxinitrichedit)</ept> once before the dialog box is displayed.","pos":[1,253],"source":" If you are using a rich edit control in a dialog box (regardless whether your application is SDI, MDI, or dialog-based), you must call [AfxInitRichEdit](application-information-and-management.md#afxinitrichedit) once before the dialog box is displayed."},{"content":"A typical place to call this function is in your program's <ph id=\"ph1\">`InitInstance`</ph> member function.","pos":[254,344],"source":" A typical place to call this function is in your program's `InitInstance` member function."},{"content":"You do not need to call it for each time you display the dialog box, only the first time.","pos":[345,434]},{"content":"You do not have to call <ph id=\"ph1\">`AfxInitRichEdit`</ph> if you are working with <ph id=\"ph2\">`CRichEditView`</ph>.","pos":[435,517],"source":" You do not have to call `AfxInitRichEdit` if you are working with `CRichEditView`."}]}]},{"pos":[12646,12697],"content":"For more information on using <ph id=\"ph1\">`CRichEditCtrl`</ph>, see:","source":"For more information on using `CRichEditCtrl`, see:"},{"pos":[12705,12742],"content":"<bpt id=\"p1\">[</bpt>Controls<ept id=\"p1\">](../../mfc/controls-mfc.md)</ept>","source":"[Controls](../../mfc/controls-mfc.md)"},{"pos":[12750,12805],"content":"<bpt id=\"p1\">[</bpt>Using CRichEditCtrl<ept id=\"p1\">](../../mfc/using-cricheditctrl.md)</ept>","source":"[Using CRichEditCtrl](../../mfc/using-cricheditctrl.md)"},{"content":"Knowledge Base article Q259949 : INFO: SetCaretPos() Is Not Appropriate with CEdit or CRichEditCtrl Controls","pos":[12815,12923]},{"pos":[12930,13063],"content":"For an example of using a rich edit control in an MFC application, see the <bpt id=\"p1\">[</bpt>WORDPAD<ept id=\"p1\">](../../visual-cpp-samples.md)</ept> sample application.","source":"For an example of using a rich edit control in an MFC application, see the [WORDPAD](../../visual-cpp-samples.md) sample application."},{"pos":[13072,13093],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[13097,13144],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[13151,13204],"content":"<bpt id=\"p1\">[</bpt>CCmdTarget<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept>","source":"[CCmdTarget](../../mfc/reference/ccmdtarget-class.md)"},{"pos":[13211,13252],"content":"<bpt id=\"p1\">[</bpt>CWnd<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept>","source":"[CWnd](../../mfc/reference/cwnd-class.md)"},{"pos":[13283,13295],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[13299,13319],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxcmn.h","source":"**Header:** afxcmn.h"},{"pos":[13329,13392],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__canpaste\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::CanPaste","linkify":"<a name=\"cricheditctrl__canpaste\"></a>  CRichEditCtrl::CanPaste","source":"<a name=\"cricheditctrl__canpaste\"></a>  CRichEditCtrl::CanPaste"},{"content":"Determines if the rich edit control can paste the specified Clipboard format.","pos":[13396,13473]},{"pos":[13540,13550],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The Clipboard data format to query.","pos":[13567,13602]},{"content":"This parameter can be one of the predefined Clipboard formats or the value returned by <bpt id=\"p1\">[</bpt>RegisterClipboardFormat<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms649049)</ept>.","pos":[13603,13776],"source":" This parameter can be one of the predefined Clipboard formats or the value returned by [RegisterClipboardFormat](http://msdn.microsoft.com/library/windows/desktop/ms649049)."},{"pos":[13786,13798],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the Clipboard format can be pasted; otherwise 0.","pos":[13802,13861]},{"pos":[13871,13878],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[13882,13959],"content":"If <ph id=\"ph1\">`nFormat`</ph> is 0, <ph id=\"ph2\">`CanPaste`</ph> will try any format currently on the Clipboard.","source":"If `nFormat` is 0, `CanPaste` will try any format currently on the Clipboard."},{"pos":[13966,14232],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_CANPASTE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787993)</ept> message and <bpt id=\"p2\">[</bpt>RegisterClipboardFormat<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms649049)</ept> function in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_CANPASTE](http://msdn.microsoft.com/library/windows/desktop/bb787993) message and [RegisterClipboardFormat](http://msdn.microsoft.com/library/windows/desktop/ms649049) function in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[14242,14249],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[14253,14352],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#1<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#1](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_1.cpp)]"},{"pos":[14362,14423],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__canredo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::CanRedo","linkify":"<a name=\"cricheditctrl__canredo\"></a>  CRichEditCtrl::CanRedo","source":"<a name=\"cricheditctrl__canredo\"></a>  CRichEditCtrl::CanRedo"},{"content":"Determines if the redo queue contains any actions.","pos":[14427,14477]},{"pos":[14527,14539],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the redo queue contains actions, otherwise 0.","pos":[14543,14599]},{"pos":[14609,14616],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To discover the name of the operation in the redo queue, call <bpt id=\"p1\">[</bpt>CRichEditCtrl::GetRedoName<ept id=\"p1\">](#cricheditctrl__getredoname)</ept>.","pos":[14620,14740],"source":"To discover the name of the operation in the redo queue, call [CRichEditCtrl::GetRedoName](#cricheditctrl__getredoname)."},{"content":"To redo the most recent Undo operation, call <bpt id=\"p1\">[</bpt>Redo<ept id=\"p1\">](#cricheditctrl__redo)</ept>.","pos":[14741,14815],"source":" To redo the most recent Undo operation, call [Redo](#cricheditctrl__redo)."},{"pos":[14822,14980],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_CANREDO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787995)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_CANREDO](http://msdn.microsoft.com/library/windows/desktop/bb787995) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[14990,15051],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__canundo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::CanUndo","linkify":"<a name=\"cricheditctrl__canundo\"></a>  CRichEditCtrl::CanUndo","source":"<a name=\"cricheditctrl__canundo\"></a>  CRichEditCtrl::CanUndo"},{"content":"Determines if the last editing operation can be undone.","pos":[15055,15110]},{"pos":[15160,15172],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[15176,15313],"content":"Nonzero if the last edit operation can be undone by a call to the <bpt id=\"p1\">[</bpt>Undo<ept id=\"p1\">](#cricheditctrl__undo)</ept> member function; 0 if it cannot be undone.","source":"Nonzero if the last edit operation can be undone by a call to the [Undo](#cricheditctrl__undo) member function; 0 if it cannot be undone."},{"pos":[15323,15330],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[15334,15492],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_CANUNDO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775468)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_CANUNDO](http://msdn.microsoft.com/library/windows/desktop/bb775468) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[15502,15509],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[15513,15612],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#2<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#2](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_2.cpp)]"},{"pos":[15622,15691],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__charfrompos\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::CharFromPos","linkify":"<a name=\"cricheditctrl__charfrompos\"></a>  CRichEditCtrl::CharFromPos","source":"<a name=\"cricheditctrl__charfrompos\"></a>  CRichEditCtrl::CharFromPos"},{"pos":[15695,15782],"content":"Retrieves information about the character at the point specified by the parameter <ph id=\"ph1\">`pt`</ph>.","source":"Retrieves information about the character at the point specified by the parameter `pt`."},{"pos":[15844,15854],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">[</bpt>CPoint<ept id=\"p1\">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object containing the coordinates of the specified point.","pos":[15866,15982],"source":" A [CPoint](../../atl-mfc-shared/reference/cpoint-class.md) object containing the coordinates of the specified point."},{"pos":[15992,16004],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The zero-based character index of the character nearest the specified point.","pos":[16008,16084]},{"content":"If the specified point is beyond the last character in the control, the return value indicates the last character in the control.","pos":[16085,16214]},{"pos":[16224,16231],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This member function works with a rich edit control.","pos":[16235,16287]},{"content":"To get the information for an edit control, call <bpt id=\"p1\">[</bpt>CEdit::CharFromPos<ept id=\"p1\">](../../mfc/reference/cedit-class.md#cedit__charfrompos)</ept>.","pos":[16288,16413],"source":" To get the information for an edit control, call [CEdit::CharFromPos](../../mfc/reference/cedit-class.md#cedit__charfrompos)."},{"pos":[16420,16582],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_CHARFROMPOS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761566)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_CHARFROMPOS](http://msdn.microsoft.com/library/windows/desktop/bb761566) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[16592,16649],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__clear\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::Clear","linkify":"<a name=\"cricheditctrl__clear\"></a>  CRichEditCtrl::Clear","source":"<a name=\"cricheditctrl__clear\"></a>  CRichEditCtrl::Clear"},{"content":"Deletes (clears) the current selection (if any) in the rich edit control.","pos":[16653,16726]},{"pos":[16765,16772],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[16776,16886],"content":"The deletion performed by <bpt id=\"p1\">**</bpt>Clear<ept id=\"p1\">**</ept> can be undone by calling the <bpt id=\"p2\">[</bpt>Undo<ept id=\"p2\">](#cricheditctrl__undo)</ept> member function.","source":"The deletion performed by **Clear** can be undone by calling the [Undo](#cricheditctrl__undo) member function."},{"pos":[16893,17028],"content":"To delete the current selection and place the deleted contents onto the Clipboard, call the <bpt id=\"p1\">[</bpt>Cut<ept id=\"p1\">](#cricheditctrl__cut)</ept> member function.","source":"To delete the current selection and place the deleted contents onto the Clipboard, call the [Cut](#cricheditctrl__cut) member function."},{"pos":[17035,17191],"content":"For more information, see <bpt id=\"p1\">[</bpt>WM_CLEAR<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms649020)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [WM_CLEAR](http://msdn.microsoft.com/library/windows/desktop/ms649020) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[17201,17208],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17212,17311],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#3<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#3](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_3.cpp)]"},{"pos":[17321,17376],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__copy\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::Copy","linkify":"<a name=\"cricheditctrl__copy\"></a>  CRichEditCtrl::Copy","source":"<a name=\"cricheditctrl__copy\"></a>  CRichEditCtrl::Copy"},{"content":"Copies the current selection (if any) in the rich edit control to the Clipboard.","pos":[17380,17460]},{"pos":[17498,17505],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17509,17664],"content":"For more information, see <bpt id=\"p1\">[</bpt>WM_COPY<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms649022)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [WM_COPY](http://msdn.microsoft.com/library/windows/desktop/ms649022) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[17674,17681],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17685,17784],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#4<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_4.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#4](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_4.cpp)]"},{"pos":[17794,17853],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__create\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::Create","linkify":"<a name=\"cricheditctrl__create\"></a>  CRichEditCtrl::Create","source":"<a name=\"cricheditctrl__create\"></a>  CRichEditCtrl::Create"},{"pos":[17857,17946],"content":"Creates the Windows rich edit control and associates it with this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Creates the Windows rich edit control and associates it with this `CRichEditCtrl` object."},{"pos":[18076,18086],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the edit control's style.","pos":[18103,18138]},{"content":"Apply a combination of the window styles listed in the <bpt id=\"p1\">**</bpt>Remarks<ept id=\"p1\">**</ept> section below, and <bpt id=\"p2\">[</bpt>edit control styles<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb775464)</ept>, described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[18139,18377],"source":" Apply a combination of the window styles listed in the **Remarks** section below, and [edit control styles](http://msdn.microsoft.com/library/windows/desktop/bb775464), described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Specifies the edit control's size and position.","pos":[18394,18441]},{"content":"Can be a <bpt id=\"p1\">[</bpt>CRect<ept id=\"p1\">](../../atl-mfc-shared/reference/crect-class.md)</ept> object or <bpt id=\"p2\">[</bpt>RECT<ept id=\"p2\">](../../mfc/reference/rect-structure1.md)</ept> structure.","pos":[18442,18573],"source":" Can be a [CRect](../../atl-mfc-shared/reference/crect-class.md) object or [RECT](../../mfc/reference/rect-structure1.md) structure."},{"content":"Specifies the edit control's parent window (often a <bpt id=\"p1\">[</bpt>CDialog<ept id=\"p1\">](../../mfc/reference/cdialog-class.md)</ept>).","pos":[18596,18697],"source":" Specifies the edit control's parent window (often a [CDialog](../../mfc/reference/cdialog-class.md))."},{"content":"It must not be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[18698,18722],"source":" It must not be **NULL**."},{"content":"Specifies the edit control's ID.","pos":[18738,18770]},{"pos":[18780,18792],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if initialization is successful; otherwise, 0.","pos":[18796,18850]},{"pos":[18860,18867],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You construct a <ph id=\"ph1\">`CRichEditCtrl`</ph> object in two steps.","pos":[18871,18923],"source":"You construct a `CRichEditCtrl` object in two steps."},{"content":"First, call the <bpt id=\"p1\">[</bpt>CRichEditCtrl<ept id=\"p1\">](#cricheditctrl__cricheditctrl)</ept> constructor, then call <bpt id=\"p2\">**</bpt>Create<ept id=\"p2\">**</ept>, which creates the Windows edit control and attaches it to the <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","pos":[18924,19107],"source":" First, call the [CRichEditCtrl](#cricheditctrl__cricheditctrl) constructor, then call **Create**, which creates the Windows edit control and attaches it to the `CRichEditCtrl` object."},{"content":"When you create a rich edit control with this function, first you must load the necessary common controls library.","pos":[19114,19228]},{"content":"To load the libary, call the global function <bpt id=\"p1\">[</bpt>AfxInitRichEdit<ept id=\"p1\">](application-information-and-management.md#afxinitrichedit)</ept>, which in turn initializes the common controls library.","pos":[19229,19406],"source":" To load the libary, call the global function [AfxInitRichEdit](application-information-and-management.md#afxinitrichedit), which in turn initializes the common controls library."},{"content":"You need to call <ph id=\"ph1\">`AfxInitRichEdit`</ph> only once in your process.","pos":[19407,19468],"source":" You need to call `AfxInitRichEdit` only once in your process."},{"pos":[19475,19829],"content":"When <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> executes, Windows sends the <bpt id=\"p2\">[</bpt>WM_NCCREATE<ept id=\"p2\">](../../mfc/reference/cwnd-class.md#cwnd__onnccreate)</ept>, <bpt id=\"p3\">[</bpt>WM_NCCALCSIZE<ept id=\"p3\">](../../mfc/reference/cwnd-class.md#cwnd__onnccalcsize)</ept>, <bpt id=\"p4\">[</bpt>WM_CREATE<ept id=\"p4\">](../../mfc/reference/cwnd-class.md#cwnd__oncreate)</ept>, and <bpt id=\"p5\">[</bpt>WM_GETMINMAXINFO<ept id=\"p5\">](../../mfc/reference/cwnd-class.md#cwnd__ongetminmaxinfo)</ept> messages to the edit control.","source":"When **Create** executes, Windows sends the [WM_NCCREATE](../../mfc/reference/cwnd-class.md#cwnd__onnccreate), [WM_NCCALCSIZE](../../mfc/reference/cwnd-class.md#cwnd__onnccalcsize), [WM_CREATE](../../mfc/reference/cwnd-class.md#cwnd__oncreate), and [WM_GETMINMAXINFO](../../mfc/reference/cwnd-class.md#cwnd__ongetminmaxinfo) messages to the edit control."},{"content":"These messages are handled by default by the <bpt id=\"p1\">[</bpt>OnNcCreate<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__onnccreate)</ept>, <bpt id=\"p2\">[</bpt>OnNcCalcSize<ept id=\"p2\">](../../mfc/reference/cwnd-class.md#cwnd__onnccalcsize)</ept>, <bpt id=\"p3\">[</bpt>OnCreate<ept id=\"p3\">](../../mfc/reference/cwnd-class.md#cwnd__oncreate)</ept>, and <bpt id=\"p4\">[</bpt>OnGetMinMaxInfo<ept id=\"p4\">](../../mfc/reference/cwnd-class.md#cwnd__ongetminmaxinfo)</ept> member functions in the <ph id=\"ph1\">`CWnd`</ph> base class.","pos":[19836,20200],"source":"These messages are handled by default by the [OnNcCreate](../../mfc/reference/cwnd-class.md#cwnd__onnccreate), [OnNcCalcSize](../../mfc/reference/cwnd-class.md#cwnd__onnccalcsize), [OnCreate](../../mfc/reference/cwnd-class.md#cwnd__oncreate), and [OnGetMinMaxInfo](../../mfc/reference/cwnd-class.md#cwnd__ongetminmaxinfo) member functions in the `CWnd` base class."},{"content":"To extend the default message handling, derive a class from <ph id=\"ph1\">`CRichEditCtrl`</ph>, add a message map to the new class, and override the above message-handler member functions.","pos":[20201,20370],"source":" To extend the default message handling, derive a class from `CRichEditCtrl`, add a message map to the new class, and override the above message-handler member functions."},{"content":"Override <ph id=\"ph1\">`OnCreate`</ph>, for example, to perform needed initialization for the new class.","pos":[20371,20456],"source":" Override `OnCreate`, for example, to perform needed initialization for the new class."},{"pos":[20463,20556],"content":"Apply the following <bpt id=\"p1\">[</bpt>window styles<ept id=\"p1\">](../../mfc/reference/window-styles.md)</ept> to an edit control.","source":"Apply the following [window styles](../../mfc/reference/window-styles.md) to an edit control."},{"pos":[20564,20584],"content":"<bpt id=\"p1\">**</bpt>WS_CHILD<ept id=\"p1\">**</ept> Always.","source":"**WS_CHILD** Always."},{"pos":[20592,20615],"content":"<bpt id=\"p1\">**</bpt>WS_VISIBLE<ept id=\"p1\">**</ept> Usually.","source":"**WS_VISIBLE** Usually."},{"pos":[20623,20646],"content":"<bpt id=\"p1\">**</bpt>WS_DISABLED<ept id=\"p1\">**</ept> Rarely.","source":"**WS_DISABLED** Rarely."},{"pos":[20654,20685],"content":"<bpt id=\"p1\">**</bpt>WS_GROUP<ept id=\"p1\">**</ept> To group controls.","source":"**WS_GROUP** To group controls."},{"pos":[20693,20753],"content":"<bpt id=\"p1\">**</bpt>WS_TABSTOP<ept id=\"p1\">**</ept> To include edit control in the tabbing order.","source":"**WS_TABSTOP** To include edit control in the tabbing order."},{"pos":[20760,20940],"content":"For more information about window styles, see <bpt id=\"p1\">[</bpt>CreateWindow<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632679)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information about window styles, see [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[20950,20957],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[20961,21060],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#5<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_5.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#5](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_5.cpp)]"},{"pos":[21070,21133],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__createex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::CreateEx","linkify":"<a name=\"cricheditctrl__createex\"></a>  CRichEditCtrl::CreateEx","source":"<a name=\"cricheditctrl__createex\"></a>  CRichEditCtrl::CreateEx"},{"pos":[21137,21222],"content":"Creates a control (a child window) and associates it with the <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Creates a control (a child window) and associates it with the `CRichEditCtrl` object."},{"pos":[21377,21387],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the extended style of the control being created.","pos":[21406,21464]},{"content":"For a list of extended Windows styles, see the <ph id=\"ph1\">`dwExStyle`</ph> parameter for <bpt id=\"p1\">[</bpt>CreateWindowEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632680)</ept> in the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[21465,21674],"source":" For a list of extended Windows styles, see the `dwExStyle` parameter for [CreateWindowEx](http://msdn.microsoft.com/library/windows/desktop/ms632680) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Specifies the edit control's style.","pos":[21694,21729]},{"content":"Apply a combination of the window styles listed in the <bpt id=\"p1\">**</bpt>Remarks<ept id=\"p1\">**</ept> section of <bpt id=\"p2\">[</bpt>Create<ept id=\"p2\">](#cricheditctrl__create)</ept> and <bpt id=\"p3\">[</bpt>edit control styles<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/bb775464)</ept>, described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[21730,21997],"source":" Apply a combination of the window styles listed in the **Remarks** section of [Create](#cricheditctrl__create) and [edit control styles](http://msdn.microsoft.com/library/windows/desktop/bb775464), described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"A reference to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure describing the size and position of the window to be created, in client coordinates of <ph id=\"ph1\">`pParentWnd`</ph>.","pos":[22014,22208],"source":" A reference to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure describing the size and position of the window to be created, in client coordinates of `pParentWnd`."},{"content":"A pointer to the window that is the control's parent.","pos":[22231,22284]},{"content":"The control's child-window ID.","pos":[22300,22330]},{"pos":[22340,22352],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[22356,22391]},{"pos":[22401,22408],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[22412,22542],"content":"Use <ph id=\"ph1\">`CreateEx`</ph> instead of <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> to apply extended Windows styles, specified by the Windows extended style preface <bpt id=\"p2\">**</bpt>WS_EX_<ept id=\"p2\">**</ept>.","source":"Use `CreateEx` instead of **Create** to apply extended Windows styles, specified by the Windows extended style preface **WS_EX_**."},{"pos":[22552,22625],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__cricheditctrl\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::CRichEditCtrl","linkify":"<a name=\"cricheditctrl__cricheditctrl\"></a>  CRichEditCtrl::CRichEditCtrl","source":"<a name=\"cricheditctrl__cricheditctrl\"></a>  CRichEditCtrl::CRichEditCtrl"},{"pos":[22629,22665],"content":"Constructs a <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Constructs a `CRichEditCtrl` object."},{"pos":[22707,22714],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[22718,22798],"content":"Use <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](#cricheditctrl__create)</ept> to construct the Windows rich edit control.","source":"Use [Create](#cricheditctrl__create) to construct the Windows rich edit control."},{"pos":[22808,22815],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[22819,22918],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#6<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_6.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#6](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_6.cpp)]"},{"pos":[22928,22981],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__cut\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::Cut","linkify":"<a name=\"cricheditctrl__cut\"></a>  CRichEditCtrl::Cut","source":"<a name=\"cricheditctrl__cut\"></a>  CRichEditCtrl::Cut"},{"content":"Delete (cuts) the current selection (if any) in the rich edit control and copies the deleted text to the Clipboard.","pos":[22985,23100]},{"pos":[23137,23144],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[23148,23256],"content":"The deletion performed by <bpt id=\"p1\">**</bpt>Cut<ept id=\"p1\">**</ept> can be undone by calling the <bpt id=\"p2\">[</bpt>Undo<ept id=\"p2\">](#cricheditctrl__undo)</ept> member function.","source":"The deletion performed by **Cut** can be undone by calling the [Undo](#cricheditctrl__undo) member function."},{"pos":[23263,23404],"content":"To delete the current selection without placing the deleted text into the Clipboard, call the <bpt id=\"p1\">[</bpt>Clear<ept id=\"p1\">](#cricheditctrl__clear)</ept> member function.","source":"To delete the current selection without placing the deleted text into the Clipboard, call the [Clear](#cricheditctrl__clear) member function."},{"pos":[23411,23565],"content":"For more information, see <bpt id=\"p1\">[</bpt>WM_CUT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms649023)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [WM_CUT](http://msdn.microsoft.com/library/windows/desktop/ms649023) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[23575,23582],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[23586,23685],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#7<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_7.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#7](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_7.cpp)]"},{"pos":[23695,23764],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__displayband\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::DisplayBand","linkify":"<a name=\"cricheditctrl__displayband\"></a>  CRichEditCtrl::DisplayBand","source":"<a name=\"cricheditctrl__displayband\"></a>  CRichEditCtrl::DisplayBand"},{"pos":[23768,23920],"content":"Displays a portion of the contents of the rich edit control (text and OLE items), as previously formatted by <bpt id=\"p1\">[</bpt>FormatRange<ept id=\"p1\">](#cricheditctrl__formatrange)</ept>.","source":"Displays a portion of the contents of the rich edit control (text and OLE items), as previously formatted by [FormatRange](#cricheditctrl__formatrange)."},{"pos":[23984,23994],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> or <bpt id=\"p2\">[</bpt>CRect<ept id=\"p2\">](../../atl-mfc-shared/reference/crect-class.md)</ept> object specifying the area of the device to display the text.","pos":[24016,24195],"source":" Pointer to a [RECT](../../mfc/reference/rect-structure1.md) or [CRect](../../atl-mfc-shared/reference/crect-class.md) object specifying the area of the device to display the text."},{"pos":[24205,24217],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the display of the formatted text succeeds, otherwise, 0.","pos":[24221,24289]},{"pos":[24299,24306],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[24310,24397],"content":"The text and OLE items are clipped to the area specified by the pointer <ph id=\"ph1\">`pDisplayRect`</ph>.","source":"The text and OLE items are clipped to the area specified by the pointer `pDisplayRect`."},{"pos":[24404,24566],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_DISPLAYBAND<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787997)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_DISPLAYBAND](http://msdn.microsoft.com/library/windows/desktop/bb787997) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[24576,24583],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[24588,24666],"content":"See the example for <bpt id=\"p1\">[</bpt>CRichEditCtrl::FormatRange<ept id=\"p1\">](#cricheditctrl__formatrange)</ept>.","source":"See the example for [CRichEditCtrl::FormatRange](#cricheditctrl__formatrange)."},{"pos":[24676,24753],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__emptyundobuffer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::EmptyUndoBuffer","linkify":"<a name=\"cricheditctrl__emptyundobuffer\"></a>  CRichEditCtrl::EmptyUndoBuffer","source":"<a name=\"cricheditctrl__emptyundobuffer\"></a>  CRichEditCtrl::EmptyUndoBuffer"},{"content":"Resets (clear) the undo flag of this rich edit control.","pos":[24757,24812]},{"pos":[24861,24868],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The control will now be unable to undo the last editing operation.","pos":[24872,24938]},{"content":"The undo flag is set whenever an operation within the rich edit control can be undone.","pos":[24939,25025]},{"pos":[25032,25222],"content":"The undo flag is automatically cleared whenever you call the <bpt id=\"p1\">[</bpt>CWnd<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept> member function <bpt id=\"p2\">[</bpt>SetWindowText<ept id=\"p2\">](../../mfc/reference/cwnd-class.md#cwnd__setwindowtext)</ept>.","source":"The undo flag is automatically cleared whenever you call the [CWnd](../../mfc/reference/cwnd-class.md) member function [SetWindowText](../../mfc/reference/cwnd-class.md#cwnd__setwindowtext)."},{"pos":[25229,25395],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_EMPTYUNDOBUFFER<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761568)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_EMPTYUNDOBUFFER](http://msdn.microsoft.com/library/windows/desktop/bb761568) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[25405,25412],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[25416,25515],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#8<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_8.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#8](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_8.cpp)]"},{"pos":[25525,25588],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__findtext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::FindText","linkify":"<a name=\"cricheditctrl__findtext\"></a>  CRichEditCtrl::FindText","source":"<a name=\"cricheditctrl__findtext\"></a>  CRichEditCtrl::FindText"},{"content":"Finds text within the rich edit control.","pos":[25592,25632]},{"pos":[25730,25740],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"For a list of possible values, see <ph id=\"ph1\">`wParam`</ph> in <bpt id=\"p1\">[</bpt>EM_FINDTEXTEXT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb788011)</ept> in the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[25757,25940],"source":" For a list of possible values, see `wParam` in [EM_FINDTEXTEXT](http://msdn.microsoft.com/library/windows/desktop/bb788011) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"<bpt id=\"p1\">*</bpt>pFindText<ept id=\"p1\">*</ept>","pos":[25947,25958],"source":"*pFindText*"},{"content":"Pointer to the <bpt id=\"p1\">[</bpt>FINDTEXTEX<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787909)</ept> structure giving the parameters for the search and returning the range where the match was found.","pos":[25962,26147],"source":" Pointer to the [FINDTEXTEX](http://msdn.microsoft.com/library/windows/desktop/bb787909) structure giving the parameters for the search and returning the range where the match was found."},{"pos":[26157,26169],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Zero-based character position of the next match; – 1 if there are no more matches.","pos":[26173,26255]},{"pos":[26265,26272],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[26276,26473],"content":"You can search either up or down by setting the proper range parameters in the <bpt id=\"p1\">[</bpt>CHARRANGE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787885)</ept> structure within the <bpt id=\"p2\">**</bpt>FINDTEXTEX<ept id=\"p2\">**</ept> structure.","source":"You can search either up or down by setting the proper range parameters in the [CHARRANGE](http://msdn.microsoft.com/library/windows/desktop/bb787885) structure within the **FINDTEXTEX** structure."},{"pos":[26480,26736],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_FINDTEXTEX<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb788011)</ept> message and <bpt id=\"p2\">[</bpt>FINDTEXTEX<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb787909)</ept> structure in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_FINDTEXTEX](http://msdn.microsoft.com/library/windows/desktop/bb788011) message and [FINDTEXTEX](http://msdn.microsoft.com/library/windows/desktop/bb787909) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[26746,26753],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[26757,26856],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#9<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_9.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#9](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_9.cpp)]"},{"pos":[26866,26939],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__findwordbreak\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::FindWordBreak","linkify":"<a name=\"cricheditctrl__findwordbreak\"></a>  CRichEditCtrl::FindWordBreak","source":"<a name=\"cricheditctrl__findwordbreak\"></a>  CRichEditCtrl::FindWordBreak"},{"pos":[26943,27020],"content":"Finds the next word break before or after the position specified by <ph id=\"ph1\">`nStart`</ph>.","source":"Finds the next word break before or after the position specified by `nStart`."},{"pos":[27112,27122],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Indicates the action to take.","pos":[27137,27166]},{"content":"For a list of possible values, see the description for the parameter <ph id=\"ph1\">`code`</ph> in <bpt id=\"p1\">**</bpt>EM_FINDWORDBREAK<ept id=\"p1\">**</ept> in the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[27167,27326],"source":" For a list of possible values, see the description for the parameter `code` in **EM_FINDWORDBREAK** in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"The zero-based character position from which to start.","pos":[27345,27399]},{"pos":[27409,27421],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Based on the parameter <ph id=\"ph1\">`nCode`</ph>.","pos":[27425,27456],"source":"Based on the parameter `nCode`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_FINDWORDBREAK<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb788018)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[27457,27621],"source":" For more information, see [EM_FINDWORDBREAK](http://msdn.microsoft.com/library/windows/desktop/bb788018) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[27631,27638],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can use this member function to retrieve information about a character at a given position.","pos":[27642,27737]},{"pos":[27747,27816],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__formatrange\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::FormatRange","linkify":"<a name=\"cricheditctrl__formatrange\"></a>  CRichEditCtrl::FormatRange","source":"<a name=\"cricheditctrl__formatrange\"></a>  CRichEditCtrl::FormatRange"},{"content":"Formats a range of text in a rich edit control for a specific device.","pos":[27820,27889]},{"pos":[27983,27993],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>pfr<ept id=\"p1\">*</ept>","pos":[27997,28002],"source":"*pfr*"},{"content":"Pointer to the <bpt id=\"p1\">[</bpt>FORMATRANGE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787911)</ept> structure which contains information about the output device.","pos":[28006,28156],"source":" Pointer to the [FORMATRANGE](http://msdn.microsoft.com/library/windows/desktop/bb787911) structure which contains information about the output device."},{"content":"<bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> indicates that cached information within the rich edit control can be freed.","pos":[28157,28242],"source":"**NULL** indicates that cached information within the rich edit control can be freed."},{"content":"<bpt id=\"p1\">*</bpt>bDisplay<ept id=\"p1\">*</ept>","pos":[28249,28259],"source":"*bDisplay*"},{"content":"Indicates if the text should be rendered.","pos":[28263,28304]},{"content":"If <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>, the text is just measured.","pos":[28305,28345],"source":" If **FALSE**, the text is just measured."},{"pos":[28355,28367],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The index of the last character that fits in the region plus one.","pos":[28371,28436]},{"pos":[28446,28453],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[28457,28546],"content":"Typically, this call is followed by a call to <bpt id=\"p1\">[</bpt>DisplayBand<ept id=\"p1\">](#cricheditctrl__displayband)</ept>.","source":"Typically, this call is followed by a call to [DisplayBand](#cricheditctrl__displayband)."},{"pos":[28553,28811],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_FORMATRANGE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb788020)</ept> message and <bpt id=\"p2\">[</bpt>FORMATRANGE<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb787911)</ept> structure in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_FORMATRANGE](http://msdn.microsoft.com/library/windows/desktop/bb788020) message and [FORMATRANGE](http://msdn.microsoft.com/library/windows/desktop/bb787911) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[28821,28828],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[28832,28933],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#10<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_10.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#10](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_10.cpp)]"},{"pos":[28943,29010],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__getcharpos\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::GetCharPos","linkify":"<a name=\"cricheditctrl__getcharpos\"></a>  CRichEditCtrl::GetCharPos","source":"<a name=\"cricheditctrl__getcharpos\"></a>  CRichEditCtrl::GetCharPos"},{"pos":[29014,29106],"content":"Gets the position (top-left corner) of a given character within this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Gets the position (top-left corner) of a given character within this `CRichEditCtrl` object."},{"pos":[29171,29181],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Zero-based index of the character.","pos":[29196,29230]},{"pos":[29240,29252],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[29256,29330],"content":"The location of the top-left corner of the character specified by <ph id=\"ph1\">`lChar`</ph>.","source":"The location of the top-left corner of the character specified by `lChar`."},{"pos":[29340,29347],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The character is specified by giving its zero-based index value.","pos":[29351,29415]},{"content":"If <ph id=\"ph1\">`lChar`</ph> is greater than the index of the last character in this <ph id=\"ph2\">`CRichEditCtrl`</ph> object, the return value specifies the coordinates of the character position just past the last character in this <ph id=\"ph3\">`CRichEditCtrl`</ph> object.","pos":[29416,29636],"source":" If `lChar` is greater than the index of the last character in this `CRichEditCtrl` object, the return value specifies the coordinates of the character position just past the last character in this `CRichEditCtrl` object."},{"pos":[29643,29805],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_POSFROMCHAR<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761631)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_POSFROMCHAR](http://msdn.microsoft.com/library/windows/desktop/bb761631) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[29815,29902],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__getdefaultcharformat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::GetDefaultCharFormat","linkify":"<a name=\"cricheditctrl__getdefaultcharformat\"></a>  CRichEditCtrl::GetDefaultCharFormat","source":"<a name=\"cricheditctrl__getdefaultcharformat\"></a>  CRichEditCtrl::GetDefaultCharFormat"},{"pos":[29906,29986],"content":"Gets the default character formatting attributes of this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Gets the default character formatting attributes of this `CRichEditCtrl` object."},{"pos":[30120,30130],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"In the first version, a pointer to a <bpt id=\"p1\">**</bpt>CHARFORMAT<ept id=\"p1\">**</ept> structure holding the default character formatting attributes.","pos":[30142,30256],"source":" In the first version, a pointer to a **CHARFORMAT** structure holding the default character formatting attributes."},{"pos":[30263,30448],"content":"In the second version, a pointer to a <bpt id=\"p1\">**</bpt>CHARFORMAT2<ept id=\"p1\">**</ept> structure, which is a Rich Edit 2.0 extension to the <bpt id=\"p2\">**</bpt>CHARFORMAT<ept id=\"p2\">**</ept> structure, holding the default character formatting attributes.","source":"In the second version, a pointer to a **CHARFORMAT2** structure, which is a Rich Edit 2.0 extension to the **CHARFORMAT** structure, holding the default character formatting attributes."},{"pos":[30458,30470],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The <bpt id=\"p1\">**</bpt>dwMask<ept id=\"p1\">**</ept> data member of <ph id=\"ph1\">`cf`</ph>.","pos":[30474,30509],"source":"The **dwMask** data member of `cf`."},{"content":"It specified the default character formatting attributes.","pos":[30510,30567]},{"pos":[30577,30584],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[30588,30760],"content":"For more information, see the <bpt id=\"p1\">**</bpt>EM_GETCHARFORMAT<ept id=\"p1\">**</ept> message and the <bpt id=\"p2\">**</bpt>CHARFORMAT<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>CHARFORMAT2<ept id=\"p3\">**</ept> structures in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see the **EM_GETCHARFORMAT** message and the **CHARFORMAT** and **CHARFORMAT2** structures in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[30770,30777],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[30782,30863],"content":"See the example for <bpt id=\"p1\">[</bpt>SetDefaultCharFormat<ept id=\"p1\">](#cricheditctrl__setdefaultcharformat)</ept>.","source":"See the example for [SetDefaultCharFormat](#cricheditctrl__setdefaultcharformat)."},{"pos":[30873,30944],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__geteventmask\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::GetEventMask","linkify":"<a name=\"cricheditctrl__geteventmask\"></a>  CRichEditCtrl::GetEventMask","source":"<a name=\"cricheditctrl__geteventmask\"></a>  CRichEditCtrl::GetEventMask"},{"pos":[30948,31000],"content":"Gets the event mask for this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Gets the event mask for this `CRichEditCtrl` object."},{"pos":[31055,31067],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[31071,31118],"content":"The event mask for this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"The event mask for this `CRichEditCtrl` object."},{"pos":[31128,31135],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[31139,31246],"content":"The event mask specifies which notification messages the <ph id=\"ph1\">`CRichEditCtrl`</ph> object sends to its parent window.","source":"The event mask specifies which notification messages the `CRichEditCtrl` object sends to its parent window."},{"pos":[31253,31416],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_GETEVENTMASK<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb788032)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_GETEVENTMASK](http://msdn.microsoft.com/library/windows/desktop/bb788032) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[31426,31433],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[31438,31518],"content":"See the example for <bpt id=\"p1\">[</bpt>CRichEditCtrl::SetEventMask<ept id=\"p1\">](#cricheditctrl__seteventmask)</ept>.","source":"See the example for [CRichEditCtrl::SetEventMask](#cricheditctrl__seteventmask)."},{"pos":[31528,31613],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__getfirstvisibleline\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::GetFirstVisibleLine","linkify":"<a name=\"cricheditctrl__getfirstvisibleline\"></a>  CRichEditCtrl::GetFirstVisibleLine","source":"<a name=\"cricheditctrl__getfirstvisibleline\"></a>  CRichEditCtrl::GetFirstVisibleLine"},{"pos":[31617,31684],"content":"Determines the topmost visible line in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Determines the topmost visible line in this `CRichEditCtrl` object."},{"pos":[31745,31757],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[31761,31839],"content":"Zero-based index of the uppermost visible line in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Zero-based index of the uppermost visible line in this `CRichEditCtrl` object."},{"pos":[31849,31856],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[31860,32030],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_GETFIRSTVISIBLELINE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761574)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_GETFIRSTVISIBLELINE](http://msdn.microsoft.com/library/windows/desktop/bb761574) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[32040,32047],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[32051,32152],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#11<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_11.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#11](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_11.cpp)]"},{"pos":[32162,32239],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__getiricheditole\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::GetIRichEditOle","linkify":"<a name=\"cricheditctrl__getiricheditole\"></a>  CRichEditCtrl::GetIRichEditOle","source":"<a name=\"cricheditctrl__getiricheditole\"></a>  CRichEditCtrl::GetIRichEditOle"},{"pos":[32243,32315],"content":"Accesses the <bpt id=\"p1\">**</bpt>IRichEditOle<ept id=\"p1\">**</ept> interface for this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Accesses the **IRichEditOle** interface for this `CRichEditCtrl` object."},{"pos":[32382,32394],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[32398,32618],"content":"Pointer to the <bpt id=\"p1\">[</bpt>IRichEditOle<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774306)</ept> interface that can be used to access this <ph id=\"ph1\">`CRichEditCtrl`</ph> object's OLE functionality; <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept> if the interface is not accessible.","source":"Pointer to the [IRichEditOle](http://msdn.microsoft.com/library/windows/desktop/bb774306) interface that can be used to access this `CRichEditCtrl` object's OLE functionality; **NULL** if the interface is not accessible."},{"pos":[32628,32635],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[32639,32716],"content":"Use this interface to access this <ph id=\"ph1\">`CRichEditCtrl`</ph> object's OLE functionality.","source":"Use this interface to access this `CRichEditCtrl` object's OLE functionality."},{"pos":[32723,32986],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_GETOLEINTERFACE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb788041)</ept> message and <bpt id=\"p2\">[</bpt>IRichEditOle<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb774306)</ept> interface in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_GETOLEINTERFACE](http://msdn.microsoft.com/library/windows/desktop/bb788041) message and [IRichEditOle](http://msdn.microsoft.com/library/windows/desktop/bb774306) interface in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[32996,33067],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__getlimittext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::GetLimitText","linkify":"<a name=\"cricheditctrl__getlimittext\"></a>  CRichEditCtrl::GetLimitText","source":"<a name=\"cricheditctrl__getlimittext\"></a>  CRichEditCtrl::GetLimitText"},{"pos":[33071,33123],"content":"Gets the text limit for this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Gets the text limit for this `CRichEditCtrl` object."},{"pos":[33178,33190],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[33194,33260],"content":"The current text limit, in bytes, for this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"The current text limit, in bytes, for this `CRichEditCtrl` object."},{"pos":[33270,33277],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The text limit is the maximum amount of text, in bytes, the rich edit control can accept.","pos":[33281,33370]},{"pos":[33377,33540],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_GETLIMITTEXT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761582)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_GETLIMITTEXT](http://msdn.microsoft.com/library/windows/desktop/bb761582) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[33550,33557],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[33561,33662],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#12<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_12.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#12](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_12.cpp)]"},{"pos":[33672,33733],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__getline\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::GetLine","linkify":"<a name=\"cricheditctrl__getline\"></a>  CRichEditCtrl::GetLine","source":"<a name=\"cricheditctrl__getline\"></a>  CRichEditCtrl::GetLine"},{"pos":[33737,33795],"content":"Retrieves a line of text from this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Retrieves a line of text from this `CRichEditCtrl` object."},{"pos":[33972,33982],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Zero-based index of the line to retrieve.","pos":[33998,34039]},{"content":"Points to the buffer to receive the text.","pos":[34062,34103]},{"content":"The first word of the buffer must specify the maximum number of bytes that can be copied into the buffer.","pos":[34104,34209]},{"content":"Maximum number of characters that can be copied into <ph id=\"ph1\">`lpszBuffer`</ph>.","pos":[34232,34298],"source":" Maximum number of characters that can be copied into `lpszBuffer`."},{"content":"The second form of <ph id=\"ph1\">`GetLine`</ph> places this value into the first word of the buffer specified by <ph id=\"ph2\">`lpszBuffer`</ph>.","pos":[34299,34406],"source":" The second form of `GetLine` places this value into the first word of the buffer specified by `lpszBuffer`."},{"pos":[34416,34428],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34432,34482],"content":"The number of characters copied into <ph id=\"ph1\">`lpszBuffer`</ph>.","source":"The number of characters copied into `lpszBuffer`."},{"pos":[34492,34499],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The copied line does not contain a terminating null character.","pos":[34503,34565]},{"pos":[34573,34719],"content":"[!NOTE]\n Because the first word of the buffer stores the number of characters to be copied, make sure that your buffer is at least 4 bytes long.","leadings":["","> "],"nodes":[{"content":"Because the first word of the buffer stores the number of characters to be copied, make sure that your buffer is at least 4 bytes long.","pos":[9,144]}]},{"pos":[34726,34884],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_GETLINE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761584)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_GETLINE](http://msdn.microsoft.com/library/windows/desktop/bb761584) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[34894,34901],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[34906,34971],"content":"See the example for <bpt id=\"p1\">[</bpt>GetLineCount<ept id=\"p1\">](#cricheditctrl__getlinecount)</ept>.","source":"See the example for [GetLineCount](#cricheditctrl__getlinecount)."},{"pos":[34981,35052],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__getlinecount\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::GetLineCount","linkify":"<a name=\"cricheditctrl__getlinecount\"></a>  CRichEditCtrl::GetLineCount","source":"<a name=\"cricheditctrl__getlinecount\"></a>  CRichEditCtrl::GetLineCount"},{"pos":[35056,35116],"content":"Retrieves the number of lines in the <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Retrieves the number of lines in the `CRichEditCtrl` object."},{"pos":[35170,35182],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[35186,35237],"content":"The number of lines in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"The number of lines in this `CRichEditCtrl` object."},{"pos":[35247,35254],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[35258,35421],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_GETLINECOUNT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761586)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_GETLINECOUNT](http://msdn.microsoft.com/library/windows/desktop/bb761586) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[35431,35438],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[35442,35543],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#13<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_13.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#13](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_13.cpp)]"},{"pos":[35553,35618],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__getmodify\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::GetModify","linkify":"<a name=\"cricheditctrl__getmodify\"></a>  CRichEditCtrl::GetModify","source":"<a name=\"cricheditctrl__getmodify\"></a>  CRichEditCtrl::GetModify"},{"pos":[35622,35699],"content":"Determines if the contents of this <ph id=\"ph1\">`CRichEditCtrl`</ph> object have been modified.","source":"Determines if the contents of this `CRichEditCtrl` object have been modified."},{"pos":[35751,35763],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[35767,35849],"content":"Nonzero if the text in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object has been modified; otherwise 0.","source":"Nonzero if the text in this `CRichEditCtrl` object has been modified; otherwise 0."},{"pos":[35859,35866],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Windows maintains an internal flag indicating whether the contents of the rich edit control have been changed.","pos":[35870,35980]},{"content":"This flag is cleared when the edit control is first created and can also be cleared by calling the <bpt id=\"p1\">[</bpt>SetModify<ept id=\"p1\">](#cricheditctrl__setmodify)</ept> member function.","pos":[35981,36135],"source":" This flag is cleared when the edit control is first created and can also be cleared by calling the [SetModify](#cricheditctrl__setmodify) member function."},{"pos":[36142,36302],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_GETMODIFY<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761592)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_GETMODIFY](http://msdn.microsoft.com/library/windows/desktop/bb761592) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[36312,36319],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[36323,36424],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#14<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_14.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#14](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_14.cpp)]"},{"pos":[36434,36501],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__getoptions\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::GetOptions","linkify":"<a name=\"cricheditctrl__getoptions\"></a>  CRichEditCtrl::GetOptions","source":"<a name=\"cricheditctrl__getoptions\"></a>  CRichEditCtrl::GetOptions"},{"content":"Retrieves the options currently set for the rich edit control.","pos":[36505,36567]},{"pos":[36620,36632],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A combination of the current option flag values.","pos":[36636,36684]},{"content":"For a list of these values, see the <bpt id=\"p1\">*</bpt>fOptions<ept id=\"p1\">*</ept> parameter in the <bpt id=\"p2\">[</bpt>EM_SETOPTIONS<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb774254)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[36685,36906],"source":" For a list of these values, see the *fOptions* parameter in the [EM_SETOPTIONS](http://msdn.microsoft.com/library/windows/desktop/bb774254) message, as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[36916,36989],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__getparaformat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::GetParaFormat","linkify":"<a name=\"cricheditctrl__getparaformat\"></a>  CRichEditCtrl::GetParaFormat","source":"<a name=\"cricheditctrl__getparaformat\"></a>  CRichEditCtrl::GetParaFormat"},{"content":"Gets the paragraph formatting attributes of the current selection.","pos":[36993,37059]},{"pos":[37179,37189],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"In the first version, a pointer to a <bpt id=\"p1\">[</bpt>PARAFORMAT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787940)</ept> structure to hold the paragraph formatting attributes of the current selection.","pos":[37201,37390],"source":" In the first version, a pointer to a [PARAFORMAT](http://msdn.microsoft.com/library/windows/desktop/bb787940) structure to hold the paragraph formatting attributes of the current selection."},{"pos":[37397,37640],"content":"In the second version, a pointer to a <bpt id=\"p1\">[</bpt>PARAFORMAT2<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787942)</ept> structure, which is a Rich Edit 2.0 extension to the <bpt id=\"p2\">**</bpt>PARAFORMAT<ept id=\"p2\">**</ept> structure, holding the default character formatting attributes.","source":"In the second version, a pointer to a [PARAFORMAT2](http://msdn.microsoft.com/library/windows/desktop/bb787942) structure, which is a Rich Edit 2.0 extension to the **PARAFORMAT** structure, holding the default character formatting attributes."},{"pos":[37650,37662],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The <bpt id=\"p1\">**</bpt>dwMask<ept id=\"p1\">**</ept> data member of <ph id=\"ph1\">`pf`</ph>.","pos":[37666,37701],"source":"The **dwMask** data member of `pf`."},{"content":"It specifies the paragraph formatting attributes that are consistent throughout the current selection.","pos":[37702,37804]},{"pos":[37814,37821],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If more than one paragraph is selected, <ph id=\"ph1\">`pf`</ph> receives the attributes of the first selected paragraph.","pos":[37825,37926],"source":"If more than one paragraph is selected, `pf` receives the attributes of the first selected paragraph."},{"content":"The return value specifies which attributes are consistent throughout the selection.","pos":[37927,38011]},{"pos":[38018,38248],"content":"For more information, see the <bpt id=\"p1\">[</bpt>EM_GETPARAFORMAT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774182)</ept> message and the <bpt id=\"p2\">**</bpt>PARAFORMAT<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>PARAFORMAT2<ept id=\"p3\">**</ept> structures in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see the [EM_GETPARAFORMAT](http://msdn.microsoft.com/library/windows/desktop/bb774182) message and the **PARAFORMAT** and **PARAFORMAT2** structures in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[38258,38265],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[38270,38352],"content":"See the example for <bpt id=\"p1\">[</bpt>CRichEditCtrl::SetParaFormat<ept id=\"p1\">](#cricheditctrl__setparaformat)</ept>.","source":"See the example for [CRichEditCtrl::SetParaFormat](#cricheditctrl__setparaformat)."},{"pos":[38362,38437],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__getpunctuation\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::GetPunctuation","linkify":"<a name=\"cricheditctrl__getpunctuation\"></a>  CRichEditCtrl::GetPunctuation","source":"<a name=\"cricheditctrl__getpunctuation\"></a>  CRichEditCtrl::GetPunctuation"},{"content":"Gets the current punctuation characters in a rich edit control.","pos":[38441,38504]},{"pos":[38603,38613],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The punctuation type flag, as described in the <ph id=\"ph1\">`fType`</ph> parameter of <bpt id=\"p1\">[</bpt>EM_GETPUNCTUATION<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774184)</ept> in the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[38628,38835],"source":" The punctuation type flag, as described in the `fType` parameter of [EM_GETPUNCTUATION](http://msdn.microsoft.com/library/windows/desktop/bb774184) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>PUNCTUATION<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787944)</ept> structure, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[38854,39026],"source":" A pointer to a [PUNCTUATION](http://msdn.microsoft.com/library/windows/desktop/bb787944) structure, as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[39036,39048],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the operation succeeded, otherwise 0.","pos":[39052,39100]},{"pos":[39110,39117],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This member function is available with only the Asian-language versions of the operating system.","pos":[39121,39217]},{"pos":[39227,39288],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__getrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::GetRect","linkify":"<a name=\"cricheditctrl__getrect\"></a>  CRichEditCtrl::GetRect","source":"<a name=\"cricheditctrl__getrect\"></a>  CRichEditCtrl::GetRect"},{"pos":[39292,39359],"content":"Retrieves the formatting rectangle for this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Retrieves the formatting rectangle for this `CRichEditCtrl` object."},{"pos":[39422,39432],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\"> [</bpt>CRect<ept id=\"p1\">](../../atl-mfc-shared/reference/crect-class.md)</ept> or pointer to a <bpt id=\"p2\">[</bpt>RECT<ept id=\"p2\">](../../mfc/reference/rect-structure1.md)</ept> to receive the formatting rectangle of this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","pos":[39447,39633],"source":" [CRect](../../atl-mfc-shared/reference/crect-class.md) or pointer to a [RECT](../../mfc/reference/rect-structure1.md) to receive the formatting rectangle of this `CRichEditCtrl` object."},{"pos":[39643,39650],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The formatting rectangle is the bounding rectangle for the text.","pos":[39654,39718]},{"content":"This value is independent of the size of the <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","pos":[39719,39787],"source":" This value is independent of the size of the `CRichEditCtrl` object."},{"pos":[39794,39952],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_GETRECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761596)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_GETRECT](http://msdn.microsoft.com/library/windows/desktop/bb761596) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[39962,39969],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[39974,40033],"content":"See the example for <bpt id=\"p1\">[</bpt>LimitText<ept id=\"p1\">](#cricheditctrl__limittext)</ept>.","source":"See the example for [LimitText](#cricheditctrl__limittext)."},{"pos":[40043,40112],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__getredoname\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::GetRedoName","linkify":"<a name=\"cricheditctrl__getredoname\"></a>  CRichEditCtrl::GetRedoName","source":"<a name=\"cricheditctrl__getredoname\"></a>  CRichEditCtrl::GetRedoName"},{"content":"Retrieves the type of the next available action in the redo queue, if any.","pos":[40116,40190]},{"pos":[40250,40262],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If successful, <ph id=\"ph1\">`GetRedoName`</ph> returns the <bpt id=\"p1\">[</bpt>UNDONAMEID<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774365)</ept> enumeration type indicating the type of the next action in the control's redo queue.","pos":[40266,40464],"source":"If successful, `GetRedoName` returns the [UNDONAMEID](http://msdn.microsoft.com/library/windows/desktop/bb774365) enumeration type indicating the type of the next action in the control's redo queue."},{"content":"If the redo queue is empty, or if the redo action in the queue is of an unknown type, <ph id=\"ph1\">`GetRedoName`</ph> returns 0.","pos":[40465,40575],"source":" If the redo queue is empty, or if the redo action in the queue is of an unknown type, `GetRedoName` returns 0."},{"pos":[40585,40592],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The types of actions that can be undone or redone include typing, delete, drag-drop, cut, and paste operations.","pos":[40596,40707]},{"content":"This information can be useful for applications that provide an extended user interface for Undo and Redo operations, such as a drop-down list box of redoable actions.","pos":[40708,40875]},{"pos":[40885,40944],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__getsel\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::GetSel","linkify":"<a name=\"cricheditctrl__getsel\"></a>  CRichEditCtrl::GetSel","source":"<a name=\"cricheditctrl__getsel\"></a>  CRichEditCtrl::GetSel"},{"pos":[40948,41025],"content":"Retrieves the bounds of the current selection in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Retrieves the bounds of the current selection in this `CRichEditCtrl` object."},{"pos":[41161,41171],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Reference to a <bpt id=\"p1\">[</bpt>CHARRANGE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787885)</ept> structure to receive the bounds of the current selection.","pos":[41183,41327],"source":" Reference to a [CHARRANGE](http://msdn.microsoft.com/library/windows/desktop/bb787885) structure to receive the bounds of the current selection."},{"content":"Zero-based index of the first character in the current selection.","pos":[41350,41415]},{"content":"Zero-based index of the last character in the current selection.","pos":[41436,41500]},{"pos":[41510,41517],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The two forms of this function provide alternate ways to get the bounds for the selection.","pos":[41521,41611]},{"content":"Brief descriptions of these forms follow:","pos":[41612,41653]},{"pos":[41661,41789],"content":"<bpt id=\"p1\">**</bpt>GetSel(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`cr`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> This form uses the <bpt id=\"p3\">**</bpt>CHARRANGE<ept id=\"p3\">**</ept> structure with its <bpt id=\"p4\">**</bpt>cpMin<ept id=\"p4\">**</ept> and <bpt id=\"p5\">**</bpt>cpMax<ept id=\"p5\">**</ept> members to return the bounds.","source":"**GetSel(** `cr` **)** This form uses the **CHARRANGE** structure with its **cpMin** and **cpMax** members to return the bounds."},{"pos":[41797,41920],"content":"<bpt id=\"p1\">**</bpt>GetSel(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nStartChar`</ph> <bpt id=\"p2\">**</bpt>,<ept id=\"p2\">**</ept> <ph id=\"ph2\">`nEndChar`</ph> <bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept> This form returns the bounds in the parameters <ph id=\"ph3\">`nStartChar`</ph> and <ph id=\"ph4\">`nEndChar`</ph>.","source":"**GetSel(** `nStartChar` **,** `nEndChar` **)** This form returns the bounds in the parameters `nStartChar` and `nEndChar`."},{"pos":[41927,42058],"content":"The selection includes everything if the beginning ( <bpt id=\"p1\">**</bpt>cpMin<ept id=\"p1\">**</ept> or <ph id=\"ph1\">`nStartChar`</ph>) is 0 and the end ( <bpt id=\"p2\">**</bpt>cpMax<ept id=\"p2\">**</ept> or <ph id=\"ph2\">`nEndChar`</ph>) is – 1.","source":"The selection includes everything if the beginning ( **cpMin** or `nStartChar`) is 0 and the end ( **cpMax** or `nEndChar`) is – 1."},{"pos":[42065,42318],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_EXGETSEL<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb788001)</ept> message and <bpt id=\"p2\">[</bpt>CHARRANGE<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb787885)</ept> structure in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_EXGETSEL](http://msdn.microsoft.com/library/windows/desktop/bb788001) message and [CHARRANGE](http://msdn.microsoft.com/library/windows/desktop/bb787885) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[42328,42335],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[42339,42440],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#15<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_15.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#15](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_15.cpp)]"},{"pos":[42450,42541],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__getselectioncharformat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::GetSelectionCharFormat","linkify":"<a name=\"cricheditctrl__getselectioncharformat\"></a>  CRichEditCtrl::GetSelectionCharFormat","source":"<a name=\"cricheditctrl__getselectioncharformat\"></a>  CRichEditCtrl::GetSelectionCharFormat"},{"content":"Gets the character formatting attributes of the current selection.","pos":[42545,42611]},{"pos":[42749,42759],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"In the first version, a pointer to a <bpt id=\"p1\">[</bpt>CHARFORMAT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787881)</ept> structure to receive the character formatting attributes of the current selection.","pos":[42771,42963],"source":" In the first version, a pointer to a [CHARFORMAT](http://msdn.microsoft.com/library/windows/desktop/bb787881) structure to receive the character formatting attributes of the current selection."},{"pos":[42970,43232],"content":"In the second version, a pointer to a <bpt id=\"p1\">[</bpt>CHARFORMAT2<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787883)</ept> structure, which is a Rich Edit 2.0 extension to the <bpt id=\"p2\">**</bpt>CHARFORMAT<ept id=\"p2\">**</ept> structure to receive the character formatting attributes of the current selection.","source":"In the second version, a pointer to a [CHARFORMAT2](http://msdn.microsoft.com/library/windows/desktop/bb787883) structure, which is a Rich Edit 2.0 extension to the **CHARFORMAT** structure to receive the character formatting attributes of the current selection."},{"pos":[43242,43254],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The <bpt id=\"p1\">**</bpt>dwMask<ept id=\"p1\">**</ept> data member of <ph id=\"ph1\">`cf`</ph>.","pos":[43258,43293],"source":"The **dwMask** data member of `cf`."},{"content":"It specifies the character formatting attributes that are consistent throughout the current selection.","pos":[43294,43396]},{"pos":[43406,43413],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`cf`</ph> parameter receives the attributes of the first character in the current selection.","pos":[43417,43508],"source":"The `cf` parameter receives the attributes of the first character in the current selection."},{"content":"The return value specifies which attributes are consistent throughout the selection.","pos":[43509,43593]},{"pos":[43600,43830],"content":"For more information, see the <bpt id=\"p1\">[</bpt>EM_GETCHARFORMAT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb788026)</ept> message and the <bpt id=\"p2\">**</bpt>CHARFORMAT<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>CHARFORMAT2<ept id=\"p3\">**</ept> structures in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see the [EM_GETCHARFORMAT](http://msdn.microsoft.com/library/windows/desktop/bb788026) message and the **CHARFORMAT** and **CHARFORMAT2** structures in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[43840,43847],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[43852,43937],"content":"See the example for <bpt id=\"p1\">[</bpt>SetSelectionCharFormat<ept id=\"p1\">](#cricheditctrl__setselectioncharformat)</ept>.","source":"See the example for [SetSelectionCharFormat](#cricheditctrl__setselectioncharformat)."},{"pos":[43947,44026],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__getselectiontype\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::GetSelectionType","linkify":"<a name=\"cricheditctrl__getselectiontype\"></a>  CRichEditCtrl::GetSelectionType","source":"<a name=\"cricheditctrl__getselectiontype\"></a>  CRichEditCtrl::GetSelectionType"},{"pos":[44030,44091],"content":"Determines the selection type in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Determines the selection type in this `CRichEditCtrl` object."},{"pos":[44150,44162],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Flags indicating the contents of the current selection.","pos":[44166,44221]},{"content":"A combination of the following flags:","pos":[44222,44259]},{"pos":[44267,44324],"content":"<ph id=\"ph1\">`SEL_EMPTY`</ph> Indicates that there is no current selection.","source":"`SEL_EMPTY` Indicates that there is no current selection."},{"pos":[44332,44394],"content":"<ph id=\"ph1\">`SEL_TEXT`</ph> Indicates that the current selection contains text.","source":"`SEL_TEXT` Indicates that the current selection contains text."},{"pos":[44402,44483],"content":"<ph id=\"ph1\">`SEL_OBJECT`</ph> Indicates that the current selection contains at least one OLE item.","source":"`SEL_OBJECT` Indicates that the current selection contains at least one OLE item."},{"pos":[44491,44585],"content":"<ph id=\"ph1\">`SEL_MULTICHAR`</ph> Indicates that the current selection contains more than one character of text.","source":"`SEL_MULTICHAR` Indicates that the current selection contains more than one character of text."},{"pos":[44593,44682],"content":"<ph id=\"ph1\">`SEL_MULTIOBJECT`</ph> Indicates that the current selection contains more than one OLE object.","source":"`SEL_MULTIOBJECT` Indicates that the current selection contains more than one OLE object."},{"pos":[44692,44699],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[44703,44867],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_SELECTIONTYPE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774223)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_SELECTIONTYPE](http://msdn.microsoft.com/library/windows/desktop/bb774223) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[44877,44884],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[44888,44989],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#16<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_16.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#16](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_16.cpp)]"},{"pos":[44999,45066],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__getseltext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::GetSelText","linkify":"<a name=\"cricheditctrl__getseltext\"></a>  CRichEditCtrl::GetSelText","source":"<a name=\"cricheditctrl__getseltext\"></a>  CRichEditCtrl::GetSelText"},{"pos":[45070,45147],"content":"Retrieves the text from the current selection in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Retrieves the text from the current selection in this `CRichEditCtrl` object."},{"pos":[45244,45254],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to the buffer to receive the text in the current selection.","pos":[45269,45336]},{"pos":[45346,45358],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Depends on the form:","pos":[45362,45382]},{"pos":[45390,45501],"content":"<bpt id=\"p1\">**</bpt>GetSelText(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`lpBuf`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> The number of characters copied into <ph id=\"ph2\">`lpBuf`</ph>, not including the null termination.","source":"**GetSelText(** `lpBuf` **)** The number of characters copied into `lpBuf`, not including the null termination."},{"pos":[45509,45571],"content":"<bpt id=\"p1\">**</bpt>GetSelText( )<ept id=\"p1\">**</ept> The string containing the current selection.","source":"**GetSelText( )** The string containing the current selection."},{"pos":[45581,45588],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you use the first form, <bpt id=\"p1\">**</bpt>GetSelText(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`lpBuf`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept>, you must ensure that the buffer is large enough for the text it will receive.","pos":[45592,45727],"source":"If you use the first form, **GetSelText(** `lpBuf` **)**, you must ensure that the buffer is large enough for the text it will receive."},{"content":"Call <bpt id=\"p1\">[</bpt>GetSel<ept id=\"p1\">](#cricheditctrl__getsel)</ept> to determine the number of characters in the current selection.","pos":[45728,45829],"source":" Call [GetSel](#cricheditctrl__getsel) to determine the number of characters in the current selection."},{"pos":[45836,45997],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_GETSELTEXT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774190)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_GETSELTEXT](http://msdn.microsoft.com/library/windows/desktop/bb774190) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[46007,46014],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[46019,46107],"content":"See the example for <bpt id=\"p1\">[</bpt>CRichEditCtrl::GetSelectionType<ept id=\"p1\">](#cricheditctrl__getselectiontype)</ept>.","source":"See the example for [CRichEditCtrl::GetSelectionType](#cricheditctrl__getselectiontype)."},{"pos":[46117,46190],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__gettextlength\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::GetTextLength","linkify":"<a name=\"cricheditctrl__gettextlength\"></a>  CRichEditCtrl::GetTextLength","source":"<a name=\"cricheditctrl__gettextlength\"></a>  CRichEditCtrl::GetTextLength"},{"pos":[46194,46320],"content":"Retrieves the length of the text, in characters, in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object, not including the terminating null character.","source":"Retrieves the length of the text, in characters, in this `CRichEditCtrl` object, not including the terminating null character."},{"pos":[46376,46388],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[46392,46446],"content":"The length of the text in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"The length of the text in this `CRichEditCtrl` object."},{"pos":[46456,46463],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[46467,46631],"content":"For more information, see <bpt id=\"p1\">[</bpt>WM_GETTEXTLENGTH<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632628)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [WM_GETTEXTLENGTH](http://msdn.microsoft.com/library/windows/desktop/ms632628) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[46641,46648],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[46652,46753],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#17<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_17.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#17](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_17.cpp)]"},{"pos":[46763,46840],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__gettextlengthex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::GetTextLengthEx","linkify":"<a name=\"cricheditctrl__gettextlengthex\"></a>  CRichEditCtrl::GetTextLengthEx","source":"<a name=\"cricheditctrl__gettextlengthex\"></a>  CRichEditCtrl::GetTextLengthEx"},{"content":"Calculates the length of the text in the rich edit control.","pos":[46844,46903]},{"pos":[47006,47016],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Value specifying the method to be used in determining the text length.","pos":[47033,47103]},{"content":"This member can be one or more of the values listed in the flags member of <bpt id=\"p1\">[</bpt>GETTEXTLENGTHEX<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787915)</ept> described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[47104,47326],"source":" This member can be one or more of the values listed in the flags member of [GETTEXTLENGTHEX](http://msdn.microsoft.com/library/windows/desktop/bb787915) described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Code page for translation (CP_ACP for ANSI Code Page, 1200 for Unicode).","pos":[47348,47420]},{"pos":[47430,47442],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of characters or bytes in the edit control.","pos":[47446,47500]},{"content":"If incompatible flags were set in <ph id=\"ph1\">`dwFlags`</ph>, this member function returns <ph id=\"ph2\">`E_INVALIDARG`</ph>.","pos":[47501,47590],"source":" If incompatible flags were set in `dwFlags`, this member function returns `E_INVALIDARG`."},{"pos":[47600,47607],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`GetTextLengthEx`</ph> provides additional ways of determining the length of the text.","pos":[47611,47692],"source":"`GetTextLengthEx` provides additional ways of determining the length of the text."},{"content":"It supports the Rich Edit 2.0 functionality.","pos":[47693,47737]},{"content":"See <bpt id=\"p1\">[</bpt>About Rich Edit Controls<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787873)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>for more information.","pos":[47738,47908],"source":" See [About Rich Edit Controls](http://msdn.microsoft.com/library/windows/desktop/bb787873) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]for more information."},{"pos":[47918,47987],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__gettextmode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::GetTextMode","linkify":"<a name=\"cricheditctrl__gettextmode\"></a>  CRichEditCtrl::GetTextMode","source":"<a name=\"cricheditctrl__gettextmode\"></a>  CRichEditCtrl::GetTextMode"},{"content":"Retrieves the current text mode and undo level of a rich edit control.","pos":[47991,48061]},{"pos":[48115,48127],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A set of bit flags from the <bpt id=\"p1\">[</bpt>TEXTMODE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774364)</ept> enumeration type, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[48131,48320],"source":"A set of bit flags from the [TEXTMODE](http://msdn.microsoft.com/library/windows/desktop/bb774364) enumeration type, as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"The flags indicate the current text mode and undo level of the control.","pos":[48321,48392]},{"pos":[48402,48473],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__gettextrange\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::GetTextRange","linkify":"<a name=\"cricheditctrl__gettextrange\"></a>  CRichEditCtrl::GetTextRange","source":"<a name=\"cricheditctrl__gettextrange\"></a>  CRichEditCtrl::GetTextRange"},{"content":"Gets the specified range of characters.","pos":[48477,48516]},{"pos":[48628,48638],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The character position index immediately preceding the first character in the range.","pos":[48654,48738]},{"content":"The character position immediately following the last character in the range.","pos":[48756,48833]},{"content":"A reference to a <bpt id=\"p1\">[</bpt>CString<ept id=\"p1\">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object that will receive the text.","pos":[48855,48966],"source":" A reference to a [CString](../../atl-mfc-shared/reference/cstringt-class.md) object that will receive the text."},{"pos":[48976,48988],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of characters copied, not including the terminating null character.","pos":[48992,49070]},{"pos":[49080,49087],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[49091,49254],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_GETTEXTRANGE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774199)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_GETTEXTRANGE](http://msdn.microsoft.com/library/windows/desktop/bb774199) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"<ph id=\"ph1\">`GetTextRange`</ph> supports the Rich Edit 2.0 functionality.","pos":[49261,49317],"source":"`GetTextRange` supports the Rich Edit 2.0 functionality."},{"content":"See <bpt id=\"p1\">[</bpt>About Rich Edit Controls<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787873)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>for more information.","pos":[49318,49488],"source":" See [About Rich Edit Controls](http://msdn.microsoft.com/library/windows/desktop/bb787873) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]for more information."},{"pos":[49498,49567],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__getundoname\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::GetUndoName","linkify":"<a name=\"cricheditctrl__getundoname\"></a>  CRichEditCtrl::GetUndoName","source":"<a name=\"cricheditctrl__getundoname\"></a>  CRichEditCtrl::GetUndoName"},{"content":"Retrieves the type of the next available action in the undo queue, if any.","pos":[49571,49645]},{"pos":[49705,49717],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If an undo action is in the control's undo queue, <ph id=\"ph1\">`GetUndoName`</ph> returns the <bpt id=\"p1\">[</bpt>UNDONAMEID<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774365)</ept> enumeration type indicating the type of the next action in the queue.","pos":[49721,49939],"source":"If an undo action is in the control's undo queue, `GetUndoName` returns the [UNDONAMEID](http://msdn.microsoft.com/library/windows/desktop/bb774365) enumeration type indicating the type of the next action in the queue."},{"content":"If the undo queue is empty, or if the undo action in the queue is of an unknown type, <ph id=\"ph1\">`GetUndoName`</ph> returns 0.","pos":[49940,50050],"source":" If the undo queue is empty, or if the undo action in the queue is of an unknown type, `GetUndoName` returns 0."},{"pos":[50060,50067],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The types of actions that can be undone or redone include typing, delete, drag-drop, cut, and paste operations.","pos":[50071,50182]},{"content":"This information can be useful for applications that provide an extended user interface for Undo and Redo operations, such as a drop-down list box of actions that can be undone.","pos":[50183,50360]},{"pos":[50370,50447],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__getwordwrapmode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::GetWordWrapMode","linkify":"<a name=\"cricheditctrl__getwordwrapmode\"></a>  CRichEditCtrl::GetWordWrapMode","source":"<a name=\"cricheditctrl__getwordwrapmode\"></a>  CRichEditCtrl::GetWordWrapMode"},{"content":"Retrieves the current word wrapping and word breaking options for the rich edit control.","pos":[50451,50539]},{"pos":[50597,50609],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current word wrapping and word breaking options.","pos":[50613,50665]},{"content":"These options are described in <bpt id=\"p1\">[</bpt>EM_SETWORDWRAPMODE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774294)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[50666,50837],"source":" These options are described in [EM_SETWORDWRAPMODE](http://msdn.microsoft.com/library/windows/desktop/bb774294) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[50847,50854],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This member function is available only for Asian-language versions of the operating system.","pos":[50858,50949]},{"pos":[50959,51032],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__hideselection\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::HideSelection","linkify":"<a name=\"cricheditctrl__hideselection\"></a>  CRichEditCtrl::HideSelection","source":"<a name=\"cricheditctrl__hideselection\"></a>  CRichEditCtrl::HideSelection"},{"content":"Changes the visibility of the selection.","pos":[51036,51076]},{"pos":[51156,51166],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Indicates if the selection should be shown or hidden, <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> to hide the selection.","pos":[51181,51266],"source":" Indicates if the selection should be shown or hidden, **TRUE** to hide the selection."},{"content":"Indicates if this change in visibility for the selection should be permanent.","pos":[51284,51361]},{"pos":[51371,51378],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When <ph id=\"ph1\">`bPerm`</ph> is <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, it changes the <ph id=\"ph2\">`ECO_NOHIDESEL`</ph> option for this <ph id=\"ph3\">`CRichEditCtrl`</ph> object.","pos":[51382,51478],"source":"When `bPerm` is **TRUE**, it changes the `ECO_NOHIDESEL` option for this `CRichEditCtrl` object."},{"content":"For a brief description of this option, see <bpt id=\"p1\">[</bpt>SetOptions<ept id=\"p1\">](#cricheditctrl__setoptions)</ept>.","pos":[51479,51564],"source":" For a brief description of this option, see [SetOptions](#cricheditctrl__setoptions)."},{"content":"You can use this function to set all the options for this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","pos":[51565,51646],"source":" You can use this function to set all the options for this `CRichEditCtrl` object."},{"pos":[51653,51817],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_HIDESELECTION<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774210)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_HIDESELECTION](http://msdn.microsoft.com/library/windows/desktop/bb774210) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[51827,51834],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[51838,51939],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#18<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_18.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#18](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_18.cpp)]"},{"pos":[51949,52014],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__limittext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::LimitText","linkify":"<a name=\"cricheditctrl__limittext\"></a>  CRichEditCtrl::LimitText","source":"<a name=\"cricheditctrl__limittext\"></a>  CRichEditCtrl::LimitText"},{"content":"Limits the length of the text that the user can enter into an edit control.","pos":[52018,52093]},{"pos":[52151,52161],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the length (in bytes) of the text that the user can enter.","pos":[52177,52245]},{"content":"If this parameter is 0 (the default value), the text length is set to 64K bytes.","pos":[52246,52326]},{"pos":[52336,52343],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Changing the text limit restricts only the text the user can enter.","pos":[52347,52414]},{"content":"It has no effect on any text already in the edit control, nor does it affect the length of the text copied to the edit control by the <bpt id=\"p1\">[</bpt>SetWindowText<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__setwindowtext)</ept> member function in <ph id=\"ph1\">`CWnd`</ph>.","pos":[52415,52646],"source":" It has no effect on any text already in the edit control, nor does it affect the length of the text copied to the edit control by the [SetWindowText](../../mfc/reference/cwnd-class.md#cwnd__setwindowtext) member function in `CWnd`."},{"content":"If an application uses the <ph id=\"ph1\">`SetWindowText`</ph> function to place more text into an edit control than is specified in the call to <ph id=\"ph2\">`LimitText`</ph>, the user can delete any of the text within the edit control.","pos":[52647,52845],"source":" If an application uses the `SetWindowText` function to place more text into an edit control than is specified in the call to `LimitText`, the user can delete any of the text within the edit control."},{"content":"However, the text limit will prevent the user from replacing the existing text with new text, unless deleting the current selection causes the text to fall below the text limit.","pos":[52846,53023]},{"pos":[53031,53105],"content":"[!NOTE]\n For the text limit, each OLE item counts as a single character.","leadings":["","> "],"nodes":[{"content":"For the text limit, each OLE item counts as a single character.","pos":[9,72]}]},{"pos":[53112,53274],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_EXLIMITTEXT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb788003)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_EXLIMITTEXT](http://msdn.microsoft.com/library/windows/desktop/bb788003) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[53284,53291],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[53295,53396],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#19<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_19.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#19](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_19.cpp)]"},{"pos":[53406,53477],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__linefromchar\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::LineFromChar","linkify":"<a name=\"cricheditctrl__linefromchar\"></a>  CRichEditCtrl::LineFromChar","source":"<a name=\"cricheditctrl__linefromchar\"></a>  CRichEditCtrl::LineFromChar"},{"content":"Retrieves the line number of the line that contains the specified character index.","pos":[53481,53563]},{"pos":[53629,53639],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Contains the zero-based index value for the desired character in the text of the edit control, or contains –1.","pos":[53655,53765]},{"content":"If <ph id=\"ph1\">`nIndex`</ph> is –1, it specifies the current line, that is, the line that contains the caret.","pos":[53766,53858],"source":" If `nIndex` is –1, it specifies the current line, that is, the line that contains the caret."},{"pos":[53868,53880],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The zero-based line number of the line containing the character index specified by <ph id=\"ph1\">`nIndex`</ph>.","pos":[53884,53976],"source":"The zero-based line number of the line containing the character index specified by `nIndex`."},{"content":"If <ph id=\"ph1\">`nIndex`</ph> is –1, the number of the line that contains the first character of the selection is returned.","pos":[53977,54082],"source":" If `nIndex` is –1, the number of the line that contains the first character of the selection is returned."},{"content":"If there is no selection, the current line number is returned.","pos":[54083,54145]},{"pos":[54155,54162],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A character index is the number of characters from the beginning of the rich edit control.","pos":[54166,54256]},{"content":"For character counting, an OLE item is counted as a single character.","pos":[54257,54326]},{"pos":[54333,54498],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_EXLINEFROMCHAR<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb788005)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_EXLINEFROMCHAR](http://msdn.microsoft.com/library/windows/desktop/bb788005) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[54508,54515],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[54519,54620],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#20<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_20.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#20](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_20.cpp)]"},{"pos":[54630,54695],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__lineindex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::LineIndex","linkify":"<a name=\"cricheditctrl__lineindex\"></a>  CRichEditCtrl::LineIndex","source":"<a name=\"cricheditctrl__lineindex\"></a>  CRichEditCtrl::LineIndex"},{"pos":[54699,54774],"content":"Retrieves the character index of a line within this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Retrieves the character index of a line within this `CRichEditCtrl` object."},{"pos":[54839,54849],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Contains the index value for the desired line in the text of the edit control, or contains –1.","pos":[54864,54958]},{"content":"If <ph id=\"ph1\">`nLine`</ph> is –1, it specifies the current line, that is, the line that contains the caret.","pos":[54959,55050],"source":" If `nLine` is –1, it specifies the current line, that is, the line that contains the caret."},{"pos":[55060,55072],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[55076,55220],"content":"The character index of the line specified in <ph id=\"ph1\">`nLine`</ph> or –1 if the specified line number is greater then the number of lines in the edit control.","source":"The character index of the line specified in `nLine` or –1 if the specified line number is greater then the number of lines in the edit control."},{"pos":[55230,55237],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The character index is the number of characters from the beginning of the rich edit control to the specified line.","pos":[55241,55355]},{"pos":[55362,55522],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_LINEINDEX<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761611)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_LINEINDEX](http://msdn.microsoft.com/library/windows/desktop/bb761611) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[55532,55539],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[55543,55644],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#21<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_21.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#21](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_21.cpp)]"},{"pos":[55654,55721],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__linelength\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::LineLength","linkify":"<a name=\"cricheditctrl__linelength\"></a>  CRichEditCtrl::LineLength","source":"<a name=\"cricheditctrl__linelength\"></a>  CRichEditCtrl::LineLength"},{"content":"Retrieves the length of a line in a rich edit control.","pos":[55725,55779]},{"pos":[55845,55855],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the character index of a character in the line whose length is to be retrieved.","pos":[55870,55959]},{"content":"If this parameter is –1, the length of the current line (the line that contains the caret) is returned, not including the length of any selected text within the line.","pos":[55960,56126]},{"content":"When <ph id=\"ph1\">`LineLength`</ph> is called for a single-line edit control, this parameter is ignored.","pos":[56127,56213],"source":" When `LineLength` is called for a single-line edit control, this parameter is ignored."},{"pos":[56223,56235],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"When <ph id=\"ph1\">`LineLength`</ph> is called for a multiple-line edit control, the return value is the length (in bytes) of the line specified by <ph id=\"ph2\">`nLine`</ph>.","pos":[56239,56376],"source":"When `LineLength` is called for a multiple-line edit control, the return value is the length (in bytes) of the line specified by `nLine`."},{"content":"When <ph id=\"ph1\">`LineLength`</ph> is called for a single-line edit control, the return value is the length (in bytes) of the text in the edit control.","pos":[56377,56511],"source":" When `LineLength` is called for a single-line edit control, the return value is the length (in bytes) of the text in the edit control."},{"pos":[56521,56528],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[56532,56684],"content":"Use the <bpt id=\"p1\">[</bpt>LineIndex<ept id=\"p1\">](#cricheditctrl__lineindex)</ept> member function to retrieve a character index for a given line number within this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Use the [LineIndex](#cricheditctrl__lineindex) member function to retrieve a character index for a given line number within this `CRichEditCtrl` object."},{"pos":[56691,56852],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_LINELENGTH<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761613)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_LINELENGTH](http://msdn.microsoft.com/library/windows/desktop/bb761613) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[56862,56869],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[56874,56933],"content":"See the example for <bpt id=\"p1\">[</bpt>LineIndex<ept id=\"p1\">](#cricheditctrl__lineindex)</ept>.","source":"See the example for [LineIndex](#cricheditctrl__lineindex)."},{"pos":[56943,57010],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__linescroll\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::LineScroll","linkify":"<a name=\"cricheditctrl__linescroll\"></a>  CRichEditCtrl::LineScroll","source":"<a name=\"cricheditctrl__linescroll\"></a>  CRichEditCtrl::LineScroll"},{"content":"Scrolls the text of a multiple-line edit control.","pos":[57014,57063]},{"pos":[57144,57154],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the number of lines to scroll vertically.","pos":[57170,57221]},{"content":"Specifies the number of character positions to scroll horizontally.","pos":[57240,57307]},{"content":"This value is ignored if the rich edit control has either the <bpt id=\"p1\">**</bpt>ES_RIGHT<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>ES_CENTER<ept id=\"p2\">**</ept> style.","pos":[57308,57406],"source":" This value is ignored if the rich edit control has either the **ES_RIGHT** or **ES_CENTER** style."},{"content":"<bpt id=\"p1\">[</bpt>Edit styles<ept id=\"p1\">](../../mfc/reference/edit-styles.md)</ept> are specified in <bpt id=\"p2\">[</bpt>Create<ept id=\"p2\">](#cricheditctrl__create)</ept>.","pos":[57407,57507],"source":"[Edit styles](../../mfc/reference/edit-styles.md) are specified in [Create](#cricheditctrl__create)."},{"pos":[57517,57524],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The edit control does not scroll vertically past the last line of text in the edit control.","pos":[57528,57619]},{"content":"If the current line plus the number of lines specified by <ph id=\"ph1\">`nLines`</ph> exceeds the total number of lines in the edit control, the value is adjusted so that the last line of the edit control is scrolled to the top of the edit-control window.","pos":[57620,57856],"source":" If the current line plus the number of lines specified by `nLines` exceeds the total number of lines in the edit control, the value is adjusted so that the last line of the edit control is scrolled to the top of the edit-control window."},{"pos":[57863,57947],"content":"<ph id=\"ph1\">`LineScroll`</ph> can be used to scroll horizontally past the last character of any line.","source":"`LineScroll` can be used to scroll horizontally past the last character of any line."},{"pos":[57954,58115],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_LINESCROLL<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761615)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_LINESCROLL](http://msdn.microsoft.com/library/windows/desktop/bb761615) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[58125,58132],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[58137,58216],"content":"See the example for <bpt id=\"p1\">[</bpt>GetFirstVisibleLine<ept id=\"p1\">](#cricheditctrl__getfirstvisibleline)</ept>.","source":"See the example for [GetFirstVisibleLine](#cricheditctrl__getfirstvisibleline)."},{"pos":[58226,58283],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__paste\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::Paste","linkify":"<a name=\"cricheditctrl__paste\"></a>  CRichEditCtrl::Paste","source":"<a name=\"cricheditctrl__paste\"></a>  CRichEditCtrl::Paste"},{"pos":[58287,58398],"content":"Inserts the data from the Clipboard into the <ph id=\"ph1\">`CRichEditCtrl`</ph> at the insertion point, the location of the caret.","source":"Inserts the data from the Clipboard into the `CRichEditCtrl` at the insertion point, the location of the caret."},{"pos":[58437,58444],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Data is inserted only if the Clipboard contains data in a recognized format.","pos":[58448,58524]},{"pos":[58531,58687],"content":"For more information, see <bpt id=\"p1\">[</bpt>WM_PASTE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms649028)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [WM_PASTE](http://msdn.microsoft.com/library/windows/desktop/ms649028) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[58697,58704],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[58708,58809],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#22<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_22.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#22](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_22.cpp)]"},{"pos":[58819,58890],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__pastespecial\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::PasteSpecial","linkify":"<a name=\"cricheditctrl__pastespecial\"></a>  CRichEditCtrl::PasteSpecial","source":"<a name=\"cricheditctrl__pastespecial\"></a>  CRichEditCtrl::PasteSpecial"},{"pos":[58894,58970],"content":"Pastes data in a specific Clipboard format into this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Pastes data in a specific Clipboard format into this `CRichEditCtrl` object."},{"pos":[59088,59098],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>nClipFormat<ept id=\"p1\">*</ept>","pos":[59102,59115],"source":"*nClipFormat*"},{"content":"Clipboard format to paste into this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","pos":[59119,59178],"source":" Clipboard format to paste into this `CRichEditCtrl` object."},{"content":"<bpt id=\"p1\">*</bpt>dvAspect<ept id=\"p1\">*</ept>","pos":[59185,59195],"source":"*dvAspect*"},{"content":"Device aspect for the data to be retrieved from the Clipboard.","pos":[59199,59261]},{"content":"<bpt id=\"p1\">*</bpt>hMF<ept id=\"p1\">*</ept>","pos":[59268,59273],"source":"*hMF*"},{"content":"Handle to the metafile containing the iconic view of the object to be pasted.","pos":[59277,59354]},{"pos":[59364,59371],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The new material is inserted at the insertion point, the location of the caret.","pos":[59375,59454]},{"pos":[59461,59624],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_PASTESPECIAL<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774214)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_PASTESPECIAL](http://msdn.microsoft.com/library/windows/desktop/bb774214) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[59634,59641],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[59645,59746],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#23<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_23.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#23](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_23.cpp)]"},{"pos":[59756,59825],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__posfromchar\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::PosFromChar","linkify":"<a name=\"cricheditctrl__posfromchar\"></a>  CRichEditCtrl::PosFromChar","source":"<a name=\"cricheditctrl__posfromchar\"></a>  CRichEditCtrl::PosFromChar"},{"content":"Retrieves the client area coordinates of a specified character in an edit control.","pos":[59829,59911]},{"pos":[59977,59987],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The zero-based index of the character.","pos":[60002,60040]},{"pos":[60050,60062],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The position of the character, (x, y).","pos":[60066,60104]},{"content":"For a single-line edit control, the y-coordinate is always zero.","pos":[60105,60169]},{"pos":[60179,60186],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[60190,60352],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_POSFROMCHAR<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761631)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_POSFROMCHAR](http://msdn.microsoft.com/library/windows/desktop/bb761631) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[60362,60417],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__redo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::Redo","linkify":"<a name=\"cricheditctrl__redo\"></a>  CRichEditCtrl::Redo","source":"<a name=\"cricheditctrl__redo\"></a>  CRichEditCtrl::Redo"},{"content":"Redoes the next action in the control's redo queue.","pos":[60421,60472]},{"pos":[60510,60522],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise, 0.","pos":[60526,60562]},{"pos":[60572,60579],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[60583,60738],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_REDO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774218)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_REDO](http://msdn.microsoft.com/library/windows/desktop/bb774218) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[60748,60815],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__replacesel\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::ReplaceSel","linkify":"<a name=\"cricheditctrl__replacesel\"></a>  CRichEditCtrl::ReplaceSel","source":"<a name=\"cricheditctrl__replacesel\"></a>  CRichEditCtrl::ReplaceSel"},{"pos":[60819,60905],"content":"Replaces the current selection in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object with the specified text.","source":"Replaces the current selection in this `CRichEditCtrl` object with the specified text."},{"pos":[61002,61012],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to a null-terminated string containing the replacement text.","pos":[61033,61101]},{"content":"To specify that this function can be undone, set the value of this parameter to <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>.","pos":[61122,61211],"source":" To specify that this function can be undone, set the value of this parameter to **TRUE**."},{"content":"The default value is <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>.","pos":[61212,61243],"source":" The default value is **FALSE**."},{"pos":[61253,61260],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[61264,61401],"content":"To replace all the text in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object, use <bpt id=\"p1\">[</bpt>CWnd::SetWindowText<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__setwindowtext)</ept>.","source":"To replace all the text in this `CRichEditCtrl` object, use [CWnd::SetWindowText](../../mfc/reference/cwnd-class.md#cwnd__setwindowtext)."},{"content":"If there is no current selection, the replacement text is inserted at the insertion point, that is, the current caret location.","pos":[61408,61535]},{"content":"This function will format the inserted text with the existing character formatting.","pos":[61542,61625]},{"content":"When replacing the entire range of text (by calling <ph id=\"ph1\">`SetSel`</ph>(0,-1) before calling <ph id=\"ph2\">`ReplaceSel`</ph>), there is an end of paragraph character that retains the previous paragraph's formatting, which in inherited by the newly inserted text.","pos":[61626,61858],"source":" When replacing the entire range of text (by calling `SetSel`(0,-1) before calling `ReplaceSel`), there is an end of paragraph character that retains the previous paragraph's formatting, which in inherited by the newly inserted text."},{"pos":[61865,62026],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_REPLACESEL<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761633)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_REPLACESEL](http://msdn.microsoft.com/library/windows/desktop/bb761633) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[62036,62043],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[62048,62107],"content":"See the example for <bpt id=\"p1\">[</bpt>LineIndex<ept id=\"p1\">](#cricheditctrl__lineindex)</ept>.","source":"See the example for [LineIndex](#cricheditctrl__lineindex)."},{"pos":[62117,62190],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__requestresize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::RequestResize","linkify":"<a name=\"cricheditctrl__requestresize\"></a>  CRichEditCtrl::RequestResize","source":"<a name=\"cricheditctrl__requestresize\"></a>  CRichEditCtrl::RequestResize"},{"pos":[62194,62301],"content":"Forces this <ph id=\"ph1\">`CRichEditCtrl`</ph> object to send <bpt id=\"p1\">**</bpt>EN_REQUESTRESIZE<ept id=\"p1\">**</ept> notification messages to its parent window.","source":"Forces this `CRichEditCtrl` object to send **EN_REQUESTRESIZE** notification messages to its parent window."},{"pos":[62348,62355],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[62359,62504],"content":"This function is useful during <bpt id=\"p1\">[</bpt>CWnd::OnSize<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__onsize)</ept> processing for a bottomless <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"This function is useful during [CWnd::OnSize](../../mfc/reference/cwnd-class.md#cwnd__onsize) processing for a bottomless `CRichEditCtrl` object."},{"pos":[62511,62827],"content":"For more information, see the <bpt id=\"p1\">[</bpt>EM_REQUESTRESIZE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774220)</ept> message and the <bpt id=\"p2\">**</bpt>Bottomless Rich Edit Controls<ept id=\"p2\">**</ept> section of <bpt id=\"p3\">[</bpt>About Rich Edit Controls<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/bb787873)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see the [EM_REQUESTRESIZE](http://msdn.microsoft.com/library/windows/desktop/bb774220) message and the **Bottomless Rich Edit Controls** section of [About Rich Edit Controls](http://msdn.microsoft.com/library/windows/desktop/bb787873) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[62837,62916],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__setautourldetect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::SetAutoURLDetect","linkify":"<a name=\"cricheditctrl__setautourldetect\"></a>  CRichEditCtrl::SetAutoURLDetect","source":"<a name=\"cricheditctrl__setautourldetect\"></a>  CRichEditCtrl::SetAutoURLDetect"},{"content":"Sets the rich edit control to automatically detect a URL.","pos":[62920,62977]},{"pos":[63046,63056],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies whether the control is set to automatically detect a URL.","pos":[63073,63140]},{"content":"If <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, it is enabled.","pos":[63141,63168],"source":" If **TRUE**, it is enabled."},{"content":"If <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>, it is disabled.","pos":[63169,63198],"source":" If **FALSE**, it is disabled."},{"pos":[63208,63220],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Zero if successful, otherwise nonzero.","pos":[63224,63262]},{"content":"For example, the message may fail due to insufficient memory.","pos":[63263,63324]},{"pos":[63334,63341],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If enabled, the rich edit control will scan the text to determine if it matches a standard URL format.","pos":[63345,63447]},{"content":"For a list of these URL formats, see <bpt id=\"p1\">[</bpt>EM_AUTOURLDETECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787991)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[63448,63623],"source":" For a list of these URL formats, see [EM_AUTOURLDETECT](http://msdn.microsoft.com/library/windows/desktop/bb787991) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[63631,63969],"content":"[!NOTE]\n Do not set `SetAutoURLDetect` to **TRUE** if your edit control uses the **CFE_LINK** effect for text other than URLs. `SetAutoURLDetect` enables this effect for URLs and disables it for all other text. See [EN_LINK](http://msdn.microsoft.com/library/windows/desktop/bb787970) for more information about the **CFE_LINK** effect.","leadings":["","> "],"nodes":[{"content":" Do not set `SetAutoURLDetect` to **TRUE** if your edit control uses the **CFE_LINK** effect for text other than URLs. `SetAutoURLDetect` enables this effect for URLs and disables it for all other text. See [EN_LINK](http://msdn.microsoft.com/library/windows/desktop/bb787970) for more information about the **CFE_LINK** effect.","pos":[8,336],"nodes":[{"content":"Do not set <ph id=\"ph1\">`SetAutoURLDetect`</ph> to <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if your edit control uses the <bpt id=\"p2\">**</bpt>CFE_LINK<ept id=\"p2\">**</ept> effect for text other than URLs.","pos":[1,118],"source":" Do not set `SetAutoURLDetect` to **TRUE** if your edit control uses the **CFE_LINK** effect for text other than URLs."},{"content":"<ph id=\"ph1\">`SetAutoURLDetect`</ph> enables this effect for URLs and disables it for all other text.","pos":[119,202],"source":"`SetAutoURLDetect` enables this effect for URLs and disables it for all other text."},{"content":"See <bpt id=\"p1\">[</bpt>EN_LINK<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787970)</ept> for more information about the <bpt id=\"p2\">**</bpt>CFE_LINK<ept id=\"p2\">**</ept> effect.","pos":[203,328],"source":" See [EN_LINK](http://msdn.microsoft.com/library/windows/desktop/bb787970) for more information about the **CFE_LINK** effect."}]}]},{"pos":[63979,64062],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__setbackgroundcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::SetBackgroundColor","linkify":"<a name=\"cricheditctrl__setbackgroundcolor\"></a>  CRichEditCtrl::SetBackgroundColor","source":"<a name=\"cricheditctrl__setbackgroundcolor\"></a>  CRichEditCtrl::SetBackgroundColor"},{"pos":[64066,64124],"content":"Sets the background color for this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Sets the background color for this `CRichEditCtrl` object."},{"pos":[64218,64228],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Indicates if the background color should be set to the system value.","pos":[64247,64315]},{"content":"If this value is <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`cr`</ph> is ignored.","pos":[64316,64359],"source":" If this value is **TRUE**, `cr` is ignored."},{"content":"The requested background color.","pos":[64374,64405]},{"content":"Used only if <ph id=\"ph1\">`bSysColor`</ph> is <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>.","pos":[64406,64444],"source":" Used only if `bSysColor` is **FALSE**."},{"pos":[64454,64466],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[64470,64532],"content":"The previous background color for this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"The previous background color for this `CRichEditCtrl` object."},{"pos":[64542,64549],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[64553,64700],"content":"The background color can be set to the system value or to a specified <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> value.","source":"The background color can be set to the system value or to a specified [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) value."},{"pos":[64707,64964],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_SETBKGNDCOLOR<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774228)</ept> message and <bpt id=\"p2\">[</bpt>COLORREF<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> structure in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_SETBKGNDCOLOR](http://msdn.microsoft.com/library/windows/desktop/bb774228) message and [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[64974,64981],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[64985,65086],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#24<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_24.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#24](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_24.cpp)]"},{"pos":[65096,65183],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__setdefaultcharformat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::SetDefaultCharFormat","linkify":"<a name=\"cricheditctrl__setdefaultcharformat\"></a>  CRichEditCtrl::SetDefaultCharFormat","source":"<a name=\"cricheditctrl__setdefaultcharformat\"></a>  CRichEditCtrl::SetDefaultCharFormat"},{"pos":[65187,65272],"content":"Sets the character formatting attributes for new text in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Sets the character formatting attributes for new text in this `CRichEditCtrl` object."},{"pos":[65387,65397],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"In the first version, a pointer to a <bpt id=\"p1\">[</bpt>CHARFORMAT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787881)</ept> structure containing the new default character formatting attributes.","pos":[65409,65588],"source":" In the first version, a pointer to a [CHARFORMAT](http://msdn.microsoft.com/library/windows/desktop/bb787881) structure containing the new default character formatting attributes."},{"pos":[65595,65841],"content":"In the second version, a pointer to a <bpt id=\"p1\">[</bpt>CHARFORMAT2<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787883)</ept> structure, which is a Rich Edit 2.0 extension to the <bpt id=\"p2\">**</bpt>CHARFORMAT<ept id=\"p2\">**</ept> structure, containing the default character formatting attributes.","source":"In the second version, a pointer to a [CHARFORMAT2](http://msdn.microsoft.com/library/windows/desktop/bb787883) structure, which is a Rich Edit 2.0 extension to the **CHARFORMAT** structure, containing the default character formatting attributes."},{"pos":[65851,65863],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise, 0.","pos":[65867,65903]},{"pos":[65913,65920],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[65924,66016],"content":"Only the attributes specified by the <bpt id=\"p1\">**</bpt>dwMask<ept id=\"p1\">**</ept> member of <ph id=\"ph1\">`cf`</ph> are changed by this function.","source":"Only the attributes specified by the **dwMask** member of `cf` are changed by this function."},{"pos":[66023,66253],"content":"For more information, see the <bpt id=\"p1\">[</bpt>EM_SETCHARFORMAT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774230)</ept> message and the <bpt id=\"p2\">**</bpt>CHARFORMAT<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>CHARFORMAT2<ept id=\"p3\">**</ept> structures in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see the [EM_SETCHARFORMAT](http://msdn.microsoft.com/library/windows/desktop/bb774230) message and the **CHARFORMAT** and **CHARFORMAT2** structures in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[66263,66270],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[66274,66375],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#25<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_25.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#25](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_25.cpp)]"},{"pos":[66385,66456],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__seteventmask\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::SetEventMask","linkify":"<a name=\"cricheditctrl__seteventmask\"></a>  CRichEditCtrl::SetEventMask","source":"<a name=\"cricheditctrl__seteventmask\"></a>  CRichEditCtrl::SetEventMask"},{"pos":[66460,66512],"content":"Sets the event mask for this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Sets the event mask for this `CRichEditCtrl` object."},{"pos":[66576,66586],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>dwEventMask<ept id=\"p1\">*</ept>","pos":[66590,66603],"source":"*dwEventMask*"},{"content":"The new event mask for this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","pos":[66607,66658],"source":" The new event mask for this `CRichEditCtrl` object."},{"pos":[66668,66680],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The previous event mask.","pos":[66684,66708]},{"pos":[66718,66725],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[66729,66836],"content":"The event mask specifies which notification messages the <ph id=\"ph1\">`CRichEditCtrl`</ph> object sends to its parent window.","source":"The event mask specifies which notification messages the `CRichEditCtrl` object sends to its parent window."},{"pos":[66843,67006],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_SETEVENTMASK<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774238)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_SETEVENTMASK](http://msdn.microsoft.com/library/windows/desktop/bb774238) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[67016,67023],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[67027,67128],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#26<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_26.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#26](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_26.cpp)]"},{"pos":[67138,67203],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__setmodify\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::SetModify","linkify":"<a name=\"cricheditctrl__setmodify\"></a>  CRichEditCtrl::SetModify","source":"<a name=\"cricheditctrl__setmodify\"></a>  CRichEditCtrl::SetModify"},{"content":"Sets or clears the modified flag for an edit control.","pos":[67207,67260]},{"pos":[67324,67334],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A value of <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> indicates that the text has been modified, and a value of <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> indicates it is unmodified.","pos":[67353,67468],"source":" A value of **TRUE** indicates that the text has been modified, and a value of **FALSE** indicates it is unmodified."},{"content":"By default, the modified flag is set.","pos":[67469,67506]},{"pos":[67516,67523],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The modified flag indicates whether or not the text within the edit control has been modified.","pos":[67527,67621]},{"content":"It is automatically set whenever the user changes the text.","pos":[67622,67681]},{"content":"Its value can be retrieved with the <bpt id=\"p1\">[</bpt>GetModify<ept id=\"p1\">](#cricheditctrl__getmodify)</ept> member function.","pos":[67682,67773],"source":" Its value can be retrieved with the [GetModify](#cricheditctrl__getmodify) member function."},{"pos":[67780,67940],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_SETMODIFY<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761651)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_SETMODIFY](http://msdn.microsoft.com/library/windows/desktop/bb761651) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[67950,67957],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[67962,68021],"content":"See the example for <bpt id=\"p1\">[</bpt>GetModify<ept id=\"p1\">](#cricheditctrl__getmodify)</ept>.","source":"See the example for [GetModify](#cricheditctrl__getmodify)."},{"pos":[68031,68106],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__setolecallback\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::SetOLECallback","linkify":"<a name=\"cricheditctrl__setolecallback\"></a>  CRichEditCtrl::SetOLECallback","source":"<a name=\"cricheditctrl__setolecallback\"></a>  CRichEditCtrl::SetOLECallback"},{"pos":[68110,68234],"content":"Gives this <ph id=\"ph1\">`CRichEditCtrl`</ph> object an <bpt id=\"p1\">**</bpt>IRichEditOleCallback<ept id=\"p1\">**</ept> object to use to access OLE-related resources and information.","source":"Gives this `CRichEditCtrl` object an **IRichEditOleCallback** object to use to access OLE-related resources and information."},{"pos":[68313,68323],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to an <bpt id=\"p1\">[</bpt>IRichEditOleCallback<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774308)</ept> object that this <ph id=\"ph1\">`CRichEditCtrl`</ph> object will use to get OLE-related resources and information.","pos":[68342,68533],"source":" Pointer to an [IRichEditOleCallback](http://msdn.microsoft.com/library/windows/desktop/bb774308) object that this `CRichEditCtrl` object will use to get OLE-related resources and information."},{"pos":[68543,68555],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise, 0.","pos":[68559,68595]},{"pos":[68605,68612],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[68616,68806],"content":"This <ph id=\"ph1\">`CRichEditCtrl`</ph> object will call <bpt id=\"p1\">[</bpt>IUnknown::AddRef<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms691379)</ept> to increment the usage count for the COM object specified by <ph id=\"ph2\">`pCallback`</ph>.","source":"This `CRichEditCtrl` object will call [IUnknown::AddRef](http://msdn.microsoft.com/library/windows/desktop/ms691379) to increment the usage count for the COM object specified by `pCallback`."},{"pos":[68813,69083],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_SETOLECALLBACK<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774252)</ept> message and <bpt id=\"p2\">[</bpt>IRichEditOleCallback<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb774308)</ept> interface in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_SETOLECALLBACK](http://msdn.microsoft.com/library/windows/desktop/bb774252) message and [IRichEditOleCallback](http://msdn.microsoft.com/library/windows/desktop/bb774308) interface in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[69093,69160],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__setoptions\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::SetOptions","linkify":"<a name=\"cricheditctrl__setoptions\"></a>  CRichEditCtrl::SetOptions","source":"<a name=\"cricheditctrl__setoptions\"></a>  CRichEditCtrl::SetOptions"},{"pos":[69164,69213],"content":"Sets the options for this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Sets the options for this `CRichEditCtrl` object."},{"pos":[69291,69301],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>wOp<ept id=\"p1\">*</ept>","pos":[69305,69310],"source":"*wOp*"},{"content":"Indicates the type of operation.","pos":[69314,69346]},{"content":"One of the following values:","pos":[69347,69375]},{"pos":[69383,69443],"content":"<ph id=\"ph1\">`ECOOP_SET`</ph> Set the options to those specified by <ph id=\"ph2\">`dwFlags`</ph>.","source":"`ECOOP_SET` Set the options to those specified by `dwFlags`."},{"pos":[69451,69524],"content":"<ph id=\"ph1\">`ECOOP_OR`</ph> Combine the current options with those specified by <ph id=\"ph2\">`dwFlags`</ph>.","source":"`ECOOP_OR` Combine the current options with those specified by `dwFlags`."},{"pos":[69532,69615],"content":"<ph id=\"ph1\">`ECOOP_AND`</ph> Retain only those current options that are also specified by <ph id=\"ph2\">`dwFlags`</ph>.","source":"`ECOOP_AND` Retain only those current options that are also specified by `dwFlags`."},{"pos":[69623,69707],"content":"<ph id=\"ph1\">`ECOOP_XOR`</ph> Retain only those current options that are <bpt id=\"p1\">*</bpt>not<ept id=\"p1\">*</ept> specified by <ph id=\"ph2\">`dwFlags`</ph>.","source":"`ECOOP_XOR` Retain only those current options that are *not* specified by `dwFlags`."},{"pos":[69714,69796],"content":"`dwFlags`  \nRich edit options. The flag values are listed in the Remarks section.","leadings":[""," "],"nodes":[{"content":"Rich edit options. The flag values are listed in the Remarks section.","pos":[12,81],"nodes":[{"content":"Rich edit options.","pos":[0,18]},{"content":"The flag values are listed in the Remarks section.","pos":[19,69]}]}]},{"pos":[69806,69813],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The options can be a combination of the following values:","pos":[69817,69874]},{"pos":[69882,69947],"content":"<ph id=\"ph1\">`ECO_AUTOWORDSELECTION`</ph> Automatic word selection on double-click.","source":"`ECO_AUTOWORDSELECTION` Automatic word selection on double-click."},{"content":"<ph id=\"ph1\">`ECO_AUTOVSCROLL`</ph> Automatically scrolls text to the right by 10 characters when the user types a character at the end of the line.","pos":[69955,70085],"source":"`ECO_AUTOVSCROLL` Automatically scrolls text to the right by 10 characters when the user types a character at the end of the line."},{"content":"When the user presses the ENTER key, the control scrolls all text back to position zero.","pos":[70086,70174]},{"pos":[70182,70292],"content":"<ph id=\"ph1\">`ECO_AUTOHSCROLL`</ph> Automatically scrolls text up one page when the user presses the ENTER key on the last line.","source":"`ECO_AUTOHSCROLL` Automatically scrolls text up one page when the user presses the ENTER key on the last line."},{"content":"<ph id=\"ph1\">`ECO_NOHIDESEL`</ph> Negates the default behavior for an edit control.","pos":[70300,70365],"source":"`ECO_NOHIDESEL` Negates the default behavior for an edit control."},{"content":"The default behavior hides the selection when the control loses the input focus and shows the selection when the control receives the input focus.","pos":[70366,70512]},{"content":"If you specify <ph id=\"ph1\">`ECO_NOHIDESEL`</ph>, the selected text is inverted, even if the control does not have the focus.","pos":[70513,70620],"source":" If you specify `ECO_NOHIDESEL`, the selected text is inverted, even if the control does not have the focus."},{"pos":[70628,70709],"content":"<ph id=\"ph1\">`ECO_READONLY`</ph> Prevents the user from typing or editing text in the edit control.","source":"`ECO_READONLY` Prevents the user from typing or editing text in the edit control."},{"content":"<ph id=\"ph1\">`ECO_WANTRETURN`</ph> Specifies that a carriage return be inserted when the user presses the ENTER key while entering text into a multiple-line rich edit control in a dialog box.","pos":[70717,70890],"source":"`ECO_WANTRETURN` Specifies that a carriage return be inserted when the user presses the ENTER key while entering text into a multiple-line rich edit control in a dialog box."},{"content":"If you do not specify this style, pressing the ENTER key sends a command to the rich edit control's parent window, which mimics clicking the parent window's default button (for example, the OK button in a dialog box).","pos":[70891,71108]},{"content":"This style has no effect on a single-line edit control.","pos":[71109,71164]},{"content":"<ph id=\"ph1\">`ECO_SAVESEL`</ph> Preserves the selection when the control loses the focus.","pos":[71172,71243],"source":"`ECO_SAVESEL` Preserves the selection when the control loses the focus."},{"content":"By default, the entire contents of the control are selected when it regains the focus.","pos":[71244,71330]},{"content":"<ph id=\"ph1\">`ECO_VERTICAL`</ph> Draws text and objects in a vertical direction.","pos":[71338,71400],"source":"`ECO_VERTICAL` Draws text and objects in a vertical direction."},{"content":"Available for Asian languages only.","pos":[71401,71436]},{"pos":[71443,71604],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_SETOPTIONS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774254)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_SETOPTIONS](http://msdn.microsoft.com/library/windows/desktop/bb774254) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[71614,71621],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[71625,71726],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#27<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_27.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#27](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_27.cpp)]"},{"pos":[71736,71809],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__setparaformat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::SetParaFormat","linkify":"<a name=\"cricheditctrl__setparaformat\"></a>  CRichEditCtrl::SetParaFormat","source":"<a name=\"cricheditctrl__setparaformat\"></a>  CRichEditCtrl::SetParaFormat"},{"pos":[71813,71911],"content":"Sets the paragraph formatting attributes for the current selection in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Sets the paragraph formatting attributes for the current selection in this `CRichEditCtrl` object."},{"pos":[72012,72022],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"In the first version, a pointer to a <bpt id=\"p1\">[</bpt>PARAFORMAT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787940)</ept> structure containing the new default paragraph formatting attributes.","pos":[72034,72213],"source":" In the first version, a pointer to a [PARAFORMAT](http://msdn.microsoft.com/library/windows/desktop/bb787940) structure containing the new default paragraph formatting attributes."},{"pos":[72220,72463],"content":"In the second version, a pointer to a <bpt id=\"p1\">[</bpt>PARAFORMAT2<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787942)</ept> structure, which is a Rich Edit 2.0 extension to the <bpt id=\"p2\">**</bpt>PARAFORMAT<ept id=\"p2\">**</ept> structure, holding the default character formatting attributes.","source":"In the second version, a pointer to a [PARAFORMAT2](http://msdn.microsoft.com/library/windows/desktop/bb787942) structure, which is a Rich Edit 2.0 extension to the **PARAFORMAT** structure, holding the default character formatting attributes."},{"pos":[72473,72485],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise, 0.","pos":[72489,72525]},{"pos":[72535,72542],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[72546,72638],"content":"Only the attributes specified by the <bpt id=\"p1\">**</bpt>dwMask<ept id=\"p1\">**</ept> member of <ph id=\"ph1\">`pf`</ph> are changed by this function.","source":"Only the attributes specified by the **dwMask** member of `pf` are changed by this function."},{"pos":[72645,72875],"content":"For more information, see the <bpt id=\"p1\">[</bpt>EM_SETPARAFORMAT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774276)</ept> message and the <bpt id=\"p2\">**</bpt>PARAFORMAT<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>PARAFORMAT2<ept id=\"p3\">**</ept> structures in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see the [EM_SETPARAFORMAT](http://msdn.microsoft.com/library/windows/desktop/bb774276) message and the **PARAFORMAT** and **PARAFORMAT2** structures in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[72885,72892],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[72896,72997],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#28<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_28.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#28](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_28.cpp)]"},{"pos":[73007,73082],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__setpunctuation\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::SetPunctuation","linkify":"<a name=\"cricheditctrl__setpunctuation\"></a>  CRichEditCtrl::SetPunctuation","source":"<a name=\"cricheditctrl__setpunctuation\"></a>  CRichEditCtrl::SetPunctuation"},{"content":"Sets the punctuation in a rich edit control.","pos":[73086,73130]},{"pos":[73220,73230],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The punctuation flag.","pos":[73245,73266]},{"content":"For a list of possible values, see the <ph id=\"ph1\">`fType`</ph> parameter for <bpt id=\"p1\">[</bpt>EM_SETPUNCTUATION<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774278)</ept> in the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[73267,73467],"source":" For a list of possible values, see the `fType` parameter for [EM_SETPUNCTUATION](http://msdn.microsoft.com/library/windows/desktop/bb774278) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>PUNCTUATION<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787944)</ept> structure, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[73486,73658],"source":" A pointer to a [PUNCTUATION](http://msdn.microsoft.com/library/windows/desktop/bb787944) structure, as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[73668,73680],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful, otherwise 0.","pos":[73684,73719]},{"pos":[73729,73736],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This member function is available for only Asian-language versions of the operating system.","pos":[73740,73831]},{"pos":[73841,73910],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__setreadonly\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::SetReadOnly","linkify":"<a name=\"cricheditctrl__setreadonly\"></a>  CRichEditCtrl::SetReadOnly","source":"<a name=\"cricheditctrl__setreadonly\"></a>  CRichEditCtrl::SetReadOnly"},{"pos":[73914,73980],"content":"Changes the <ph id=\"ph1\">`ECO_READONLY`</ph> option for this <ph id=\"ph2\">`CRichEditCtrl`</ph> object.","source":"Changes the `ECO_READONLY` option for this `CRichEditCtrl` object."},{"pos":[74046,74056],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Indicates if this <ph id=\"ph1\">`CRichEditCtrl`</ph> object should be read only.","pos":[74075,74136],"source":" Indicates if this `CRichEditCtrl` object should be read only."},{"pos":[74146,74158],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise, 0.","pos":[74162,74198]},{"pos":[74208,74215],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For a brief description of this option, see <bpt id=\"p1\">[</bpt>SetOptions<ept id=\"p1\">](#cricheditctrl__setoptions)</ept>.","pos":[74219,74304],"source":"For a brief description of this option, see [SetOptions](#cricheditctrl__setoptions)."},{"content":"You can use this function to set all the options for this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","pos":[74305,74386],"source":" You can use this function to set all the options for this `CRichEditCtrl` object."},{"pos":[74393,74555],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_SETREADONLY<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761655)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_SETREADONLY](http://msdn.microsoft.com/library/windows/desktop/bb761655) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[74565,74572],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[74576,74677],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#29<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_29.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#29](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_29.cpp)]"},{"pos":[74687,74748],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__setrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::SetRect","linkify":"<a name=\"cricheditctrl__setrect\"></a>  CRichEditCtrl::SetRect","source":"<a name=\"cricheditctrl__setrect\"></a>  CRichEditCtrl::SetRect"},{"pos":[74752,74814],"content":"Sets the formatting rectangle for this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Sets the formatting rectangle for this `CRichEditCtrl` object."},{"pos":[74869,74879],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\"> [</bpt>CRect<ept id=\"p1\">](../../atl-mfc-shared/reference/crect-class.md)</ept> or pointer to a <bpt id=\"p2\">[</bpt>RECT<ept id=\"p2\">](../../mfc/reference/rect-structure1.md)</ept> that indicates the new bounds for the formatting rectangle.","pos":[74894,75072],"source":" [CRect](../../atl-mfc-shared/reference/crect-class.md) or pointer to a [RECT](../../mfc/reference/rect-structure1.md) that indicates the new bounds for the formatting rectangle."},{"pos":[75082,75089],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The formatting rectangle is the limiting rectangle for the text.","pos":[75093,75157]},{"content":"The limiting rectangle is independent of the size of the rich edit control window.","pos":[75158,75240]},{"content":"When this <ph id=\"ph1\">`CRichEditCtrl`</ph> object is first created, the formatting rectangle is the same size as the client area of the window.","pos":[75241,75367],"source":" When this `CRichEditCtrl` object is first created, the formatting rectangle is the same size as the client area of the window."},{"content":"Use <ph id=\"ph1\">`SetRect`</ph> to make the formatting rectangle larger or smaller than the rich edit window.","pos":[75368,75459],"source":" Use `SetRect` to make the formatting rectangle larger or smaller than the rich edit window."},{"pos":[75466,75624],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_SETRECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761657)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_SETRECT](http://msdn.microsoft.com/library/windows/desktop/bb761657) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[75634,75641],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[75645,75746],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#30<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_30.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#30](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_30.cpp)]"},{"pos":[75756,75815],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__setsel\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::SetSel","linkify":"<a name=\"cricheditctrl__setsel\"></a>  CRichEditCtrl::SetSel","source":"<a name=\"cricheditctrl__setsel\"></a>  CRichEditCtrl::SetSel"},{"pos":[75819,75873],"content":"Sets the selection within this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Sets the selection within this `CRichEditCtrl` object."},{"pos":[75990,76000],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Zero-based index of the first character for the selection.","pos":[76020,76078]},{"content":"Zero-based index of the last character for the selection.","pos":[76099,76156]},{"content":"<bpt id=\"p1\"> [</bpt>CHARRANGE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787885)</ept> structure which holds the bounds of the current selection.","pos":[76170,76301],"source":" [CHARRANGE](http://msdn.microsoft.com/library/windows/desktop/bb787885) structure which holds the bounds of the current selection."},{"pos":[76311,76318],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The two forms of this function provide alternate ways to set the bounds for the selection.","pos":[76322,76412]},{"content":"Brief descriptions of these forms follow:","pos":[76413,76454]},{"pos":[76462,76587],"content":"<bpt id=\"p1\">**</bpt>SetSel(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`cr`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> This form uses the <bpt id=\"p3\">**</bpt>CHARRANGE<ept id=\"p3\">**</ept> structure with its <bpt id=\"p4\">**</bpt>cpMin<ept id=\"p4\">**</ept> and <bpt id=\"p5\">**</bpt>cpMax<ept id=\"p5\">**</ept> members to set the bounds.","source":"**SetSel(** `cr` **)** This form uses the **CHARRANGE** structure with its **cpMin** and **cpMax** members to set the bounds."},{"pos":[76595,76718],"content":"<bpt id=\"p1\">**</bpt>SetSel(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nStartChar`</ph> <bpt id=\"p2\">**</bpt>,<ept id=\"p2\">**</ept> <ph id=\"ph2\">`nEndChar`</ph> <bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept> This form use the parameters <ph id=\"ph3\">`nStartChar`</ph> and <ph id=\"ph4\">`nEndChar`</ph> to set the bounds.","source":"**SetSel(** `nStartChar` **,** `nEndChar` **)** This form use the parameters `nStartChar` and `nEndChar` to set the bounds."},{"content":"The caret is placed at the end of the selection indicated by the greater of the start ( <bpt id=\"p1\">**</bpt>cpMin<ept id=\"p1\">**</ept> or <ph id=\"ph1\">`nStartChar`</ph>) and end ( <bpt id=\"p2\">**</bpt>cpMax<ept id=\"p2\">**</ept> or <ph id=\"ph2\">`nEndChar`</ph>) indices.","pos":[76725,76883],"source":"The caret is placed at the end of the selection indicated by the greater of the start ( **cpMin** or `nStartChar`) and end ( **cpMax** or `nEndChar`) indices."},{"content":"This function scrolls the contents of the <ph id=\"ph1\">`CRichEditCtrl`</ph> so that the caret is visible.","pos":[76884,76971],"source":" This function scrolls the contents of the `CRichEditCtrl` so that the caret is visible."},{"pos":[76978,77095],"content":"To select all the text in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object, call <ph id=\"ph2\">`SetSel`</ph> with a start index of 0 and an end index of – 1.","source":"To select all the text in this `CRichEditCtrl` object, call `SetSel` with a start index of 0 and an end index of – 1."},{"pos":[77102,77355],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_EXSETSEL<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb788007)</ept> message and <bpt id=\"p2\">[</bpt>CHARRANGE<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb787885)</ept> structure in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_EXSETSEL](http://msdn.microsoft.com/library/windows/desktop/bb788007) message and [CHARRANGE](http://msdn.microsoft.com/library/windows/desktop/bb787885) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[77365,77372],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[77377,77430],"content":"See the example for <bpt id=\"p1\">[</bpt>GetSel<ept id=\"p1\">](#cricheditctrl__getsel)</ept>.","source":"See the example for [GetSel](#cricheditctrl__getsel)."},{"pos":[77440,77531],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__setselectioncharformat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::SetSelectionCharFormat","linkify":"<a name=\"cricheditctrl__setselectioncharformat\"></a>  CRichEditCtrl::SetSelectionCharFormat","source":"<a name=\"cricheditctrl__setselectioncharformat\"></a>  CRichEditCtrl::SetSelectionCharFormat"},{"pos":[77535,77645],"content":"Sets the character formatting attributes for the text in the current selection in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Sets the character formatting attributes for the text in the current selection in this `CRichEditCtrl` object."},{"pos":[77764,77774],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"In the first version, a pointer to a <bpt id=\"p1\">[</bpt>CHARFORMAT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787881)</ept> structure containing the new character formatting attributes for the current selection.","pos":[77786,77983],"source":" In the first version, a pointer to a [CHARFORMAT](http://msdn.microsoft.com/library/windows/desktop/bb787881) structure containing the new character formatting attributes for the current selection."},{"pos":[77990,78258],"content":"In the second version, a pointer to a <bpt id=\"p1\">[</bpt>CHARFORMAT2<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787883)</ept> structure, which is a Rich Edit 2.0 extension to the <bpt id=\"p2\">**</bpt>CHARFORMAT<ept id=\"p2\">**</ept> structure, containing the new character formatting attributes for the current selection.","source":"In the second version, a pointer to a [CHARFORMAT2](http://msdn.microsoft.com/library/windows/desktop/bb787883) structure, which is a Rich Edit 2.0 extension to the **CHARFORMAT** structure, containing the new character formatting attributes for the current selection."},{"pos":[78268,78280],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise, 0.","pos":[78284,78320]},{"pos":[78330,78337],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[78341,78433],"content":"Only the attributes specified by the <bpt id=\"p1\">**</bpt>dwMask<ept id=\"p1\">**</ept> member of <ph id=\"ph1\">`cf`</ph> are changed by this function.","source":"Only the attributes specified by the **dwMask** member of `cf` are changed by this function."},{"pos":[78440,78662],"content":"For more information, see the <bpt id=\"p1\">[</bpt>EM_SETCHARFORMAT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774230)</ept> and the <bpt id=\"p2\">**</bpt>CHARFORMAT<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>CHARFORMAT2<ept id=\"p3\">**</ept> structures in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see the [EM_SETCHARFORMAT](http://msdn.microsoft.com/library/windows/desktop/bb774230) and the **CHARFORMAT** and **CHARFORMAT2** structures in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[78672,78679],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[78683,78784],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#31<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_31.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#31](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_31.cpp)]"},{"pos":[78794,78871],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__settargetdevice\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::SetTargetDevice","linkify":"<a name=\"cricheditctrl__settargetdevice\"></a>  CRichEditCtrl::SetTargetDevice","source":"<a name=\"cricheditctrl__settargetdevice\"></a>  CRichEditCtrl::SetTargetDevice"},{"pos":[78875,79003],"content":"Sets the target device and line width used for WYSIWYG (what you see is what you get) formatting in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Sets the target device and line width used for WYSIWYG (what you see is what you get) formatting in this `CRichEditCtrl` object."},{"pos":[79149,79159],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Handle to the device context for the new target device.","pos":[79172,79227]},{"content":"<bpt id=\"p1\">*</bpt>lLineWidth<ept id=\"p1\">*</ept>","pos":[79234,79246],"source":"*lLineWidth*"},{"content":"Line width to use for formatting.","pos":[79250,79283]},{"content":"<bpt id=\"p1\"> [</bpt>CDC<ept id=\"p1\">](../../mfc/reference/cdc-class.md)</ept> for the new target device.","pos":[79297,79364],"source":" [CDC](../../mfc/reference/cdc-class.md) for the new target device."},{"pos":[79374,79386],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise, 0.","pos":[79390,79426]},{"pos":[79436,79443],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If this function is successful, the rich edit control owns the device context passed as a parameter.","pos":[79447,79547]},{"content":"In that case, the calling function should not destroy the device context.","pos":[79548,79621]},{"pos":[79628,79794],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_SETTARGETDEVICE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774282)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_SETTARGETDEVICE](http://msdn.microsoft.com/library/windows/desktop/bb774282) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[79804,79811],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[79815,79916],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#32<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_32.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#32](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_32.cpp)]"},{"pos":[79926,79995],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__settextmode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::SetTextMode","linkify":"<a name=\"cricheditctrl__settextmode\"></a>  CRichEditCtrl::SetTextMode","source":"<a name=\"cricheditctrl__settextmode\"></a>  CRichEditCtrl::SetTextMode"},{"content":"Sets the text mode or undo and redo level for a rich edit control.","pos":[79999,80065]},{"pos":[80120,80130],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>fMode<ept id=\"p1\">*</ept>","pos":[80134,80141],"source":"*fMode*"},{"content":"Specifies the new settings for the control's text mode and undo level parameters.","pos":[80145,80226]},{"content":"For a list of the possible values, see the mode parameter for <bpt id=\"p1\">[</bpt>EM_SETTEXTMODE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774286)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[80227,80425],"source":" For a list of the possible values, see the mode parameter for [EM_SETTEXTMODE](http://msdn.microsoft.com/library/windows/desktop/bb774286) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[80435,80447],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Zero if successful, otherwise nonzero.","pos":[80451,80489]},{"pos":[80499,80506],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[80510,80629],"content":"For a description of the text modes, see <bpt id=\"p1\">**</bpt>EM_SETTEXTMODE<ept id=\"p1\">**</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For a description of the text modes, see **EM_SETTEXTMODE** in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"This member function fails if the control contains text.","pos":[80636,80692]},{"content":"To make sure the control is empty, send a <bpt id=\"p1\">[</bpt>WM_SETTEXT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632644)</ept> message with an empty string.","pos":[80693,80837],"source":" To make sure the control is empty, send a [WM_SETTEXT](http://msdn.microsoft.com/library/windows/desktop/ms632644) message with an empty string."},{"pos":[80847,80918],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__setundolimit\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::SetUndoLimit","linkify":"<a name=\"cricheditctrl__setundolimit\"></a>  CRichEditCtrl::SetUndoLimit","source":"<a name=\"cricheditctrl__setundolimit\"></a>  CRichEditCtrl::SetUndoLimit"},{"content":"Sets the maximum number of actions that can stored in the undo queue.","pos":[80922,80991]},{"pos":[81048,81058],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>nLimit<ept id=\"p1\">*</ept>","pos":[81062,81070],"source":"*nLimit*"},{"content":"Specifies the maximum number of actions that can be stored in the undo queue.","pos":[81074,81151]},{"content":"Set to zero to disable Undo.","pos":[81152,81180]},{"pos":[81190,81202],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The new maximum number of undo actions for the rich edit control.","pos":[81206,81271]},{"pos":[81281,81288],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, the maximum number of actions in the undo queue is 100.","pos":[81292,81359]},{"content":"If you increase this number, there must be enough available memory to accommodate the new number.","pos":[81360,81457]},{"content":"For better performance, set the limit to the smallest possible value.","pos":[81458,81527]},{"pos":[81537,81618],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__setwordcharformat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::SetWordCharFormat","linkify":"<a name=\"cricheditctrl__setwordcharformat\"></a>  CRichEditCtrl::SetWordCharFormat","source":"<a name=\"cricheditctrl__setwordcharformat\"></a>  CRichEditCtrl::SetWordCharFormat"},{"pos":[81622,81726],"content":"Sets the character formatting attributes for the currently selected word in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object.","source":"Sets the character formatting attributes for the currently selected word in this `CRichEditCtrl` object."},{"pos":[81835,81845],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"In the first version, a pointer to a <bpt id=\"p1\">[</bpt>CHARFORMAT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787881)</ept> structure containing the new character formatting attributes for the currently selected word.","pos":[81857,82060],"source":" In the first version, a pointer to a [CHARFORMAT](http://msdn.microsoft.com/library/windows/desktop/bb787881) structure containing the new character formatting attributes for the currently selected word."},{"pos":[82067,82341],"content":"In the second version, a pointer to a <bpt id=\"p1\">[</bpt>CHARFORMAT2<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787883)</ept> structure, which is a Rich Edit 2.0 extension to the <bpt id=\"p2\">**</bpt>CHARFORMAT<ept id=\"p2\">**</ept> structure, containing the new character formatting attributes for the currently selected word.","source":"In the second version, a pointer to a [CHARFORMAT2](http://msdn.microsoft.com/library/windows/desktop/bb787883) structure, which is a Rich Edit 2.0 extension to the **CHARFORMAT** structure, containing the new character formatting attributes for the currently selected word."},{"pos":[82351,82363],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise, 0.","pos":[82367,82403]},{"pos":[82413,82420],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[82424,82516],"content":"Only the attributes specified by the <bpt id=\"p1\">**</bpt>dwMask<ept id=\"p1\">**</ept> member of <ph id=\"ph1\">`cf`</ph> are changed by this function.","source":"Only the attributes specified by the **dwMask** member of `cf` are changed by this function."},{"pos":[82523,82753],"content":"For more information, see the <bpt id=\"p1\">[</bpt>EM_SETCHARFORMAT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774230)</ept> message and the <bpt id=\"p2\">**</bpt>CHARFORMAT<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>CHARFORMAT2<ept id=\"p3\">**</ept> structures in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see the [EM_SETCHARFORMAT](http://msdn.microsoft.com/library/windows/desktop/bb774230) message and the **CHARFORMAT** and **CHARFORMAT2** structures in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[82763,82770],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[82774,82875],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#33<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_33.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#33](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_33.cpp)]"},{"pos":[82885,82962],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__setwordwrapmode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::SetWordWrapMode","linkify":"<a name=\"cricheditctrl__setwordwrapmode\"></a>  CRichEditCtrl::SetWordWrapMode","source":"<a name=\"cricheditctrl__setwordwrapmode\"></a>  CRichEditCtrl::SetWordWrapMode"},{"content":"Sets the word-wrapping and word-breaking options for the rich edit control.","pos":[82966,83041]},{"pos":[83110,83120],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The options to set for word wrapping and word breaking.","pos":[83136,83191]},{"content":"For a list of possible options, see <bpt id=\"p1\">[</bpt>EM_SETWORDWRAPMODE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774294)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[83192,83368],"source":" For a list of possible options, see [EM_SETWORDWRAPMODE](http://msdn.microsoft.com/library/windows/desktop/bb774294) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[83378,83390],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current word-wrapping and word-breaking options.","pos":[83394,83446]},{"pos":[83456,83463],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This message is available only in Asian-language versions of the operating system.","pos":[83467,83549]},{"pos":[83559,83636],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__stopgrouptyping\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::StopGroupTyping","linkify":"<a name=\"cricheditctrl__stopgrouptyping\"></a>  CRichEditCtrl::StopGroupTyping","source":"<a name=\"cricheditctrl__stopgrouptyping\"></a>  CRichEditCtrl::StopGroupTyping"},{"content":"Stops the control from collecting additional typing actions into the current undo action.","pos":[83640,83729]},{"pos":[83778,83785],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The control stores the next typing action, if any, into a new action in the undo queue.","pos":[83789,83876]},{"pos":[83883,84049],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_STOPGROUPTYPING<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774300)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_STOPGROUPTYPING](http://msdn.microsoft.com/library/windows/desktop/bb774300) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[84059,84122],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__streamin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::StreamIn","linkify":"<a name=\"cricheditctrl__streamin\"></a>  CRichEditCtrl::StreamIn","source":"<a name=\"cricheditctrl__streamin\"></a>  CRichEditCtrl::StreamIn"},{"pos":[84126,84213],"content":"Replaces text in this <ph id=\"ph1\">`CRichEditCtrl`</ph> object with text from the specified input stream.","source":"Replaces text in this `CRichEditCtrl` object with text from the specified input stream."},{"pos":[84293,84303],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Flags specifying the input data formats.","pos":[84320,84360]},{"content":"See the Remarks section for more information.","pos":[84361,84406]},{"content":"<bpt id=\"p1\"> [</bpt>EDITSTREAM<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787891)</ept> structure specifying the input stream.","pos":[84420,84532],"source":" [EDITSTREAM](http://msdn.microsoft.com/library/windows/desktop/bb787891) structure specifying the input stream."},{"content":"See the Remarks section for more information.","pos":[84533,84578]},{"pos":[84588,84600],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Number of characters read from the input stream.","pos":[84604,84652]},{"pos":[84662,84669],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[84673,84725],"content":"The value of <ph id=\"ph1\">`nFormat`</ph> must be one of the following:","source":"The value of `nFormat` must be one of the following:"},{"pos":[84733,84771],"content":"<ph id=\"ph1\">`SF_TEXT`</ph> Indicates reading text only.","source":"`SF_TEXT` Indicates reading text only."},{"pos":[84779,84826],"content":"<ph id=\"ph1\">`SF_RTF`</ph> Indicates reading text and formatting.","source":"`SF_RTF` Indicates reading text and formatting."},{"content":"Either of these values can be combined with <ph id=\"ph1\">`SFF_SELECTION`</ph>.","pos":[84833,84893],"source":"Either of these values can be combined with `SFF_SELECTION`."},{"content":"If <ph id=\"ph1\">`SFF_SELECTION`</ph> is specified, <ph id=\"ph2\">`StreamIn`</ph> replaces the current selection with the contents of the input stream.","pos":[84894,85007],"source":" If `SFF_SELECTION` is specified, `StreamIn` replaces the current selection with the contents of the input stream."},{"content":"If it is not specified, <ph id=\"ph1\">`StreamIn`</ph> replaces the entire contents of this <ph id=\"ph2\">`CRichEditCtrl`</ph> object.","pos":[85008,85103],"source":" If it is not specified, `StreamIn` replaces the entire contents of this `CRichEditCtrl` object."},{"content":"In the <bpt id=\"p1\">**</bpt>EDITSTREAM<ept id=\"p1\">**</ept> parameter <ph id=\"ph1\">`es`</ph>, you specify a callback function that fills a buffer with text.","pos":[85110,85210],"source":"In the **EDITSTREAM** parameter `es`, you specify a callback function that fills a buffer with text."},{"content":"This callback function is called repeatedly, until the input stream is exhausted.","pos":[85211,85292]},{"pos":[85299,85553],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_STREAMIN<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774302)</ept> message and <bpt id=\"p2\">[</bpt>EDITSTREAM<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb787891)</ept> structure in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_STREAMIN](http://msdn.microsoft.com/library/windows/desktop/bb774302) message and [EDITSTREAM](http://msdn.microsoft.com/library/windows/desktop/bb787891) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[85563,85570],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[85574,85675],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#34<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_34.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#34](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_34.cpp)]"},{"pos":[85682,85783],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#35<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_35.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#35](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_35.cpp)]"},{"pos":[85793,85858],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__streamout\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::StreamOut","linkify":"<a name=\"cricheditctrl__streamout\"></a>  CRichEditCtrl::StreamOut","source":"<a name=\"cricheditctrl__streamout\"></a>  CRichEditCtrl::StreamOut"},{"pos":[85862,85948],"content":"Writes out the contents of this <ph id=\"ph1\">`CRichEditCtrl`</ph> object to the specified output stream.","source":"Writes out the contents of this `CRichEditCtrl` object to the specified output stream."},{"pos":[86029,86039],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Flags specifying the output data formats.","pos":[86056,86097]},{"content":"See the Remarks section for more information.","pos":[86098,86143]},{"content":"<bpt id=\"p1\"> [</bpt>EDITSTREAM<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787891)</ept> structure specifying the output stream.","pos":[86157,86270],"source":" [EDITSTREAM](http://msdn.microsoft.com/library/windows/desktop/bb787891) structure specifying the output stream."},{"content":"See the Remarks section for more information.","pos":[86271,86316]},{"pos":[86326,86338],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Number of characters written to the output stream.","pos":[86342,86392]},{"pos":[86402,86409],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[86413,86465],"content":"The value of <ph id=\"ph1\">`nFormat`</ph> must be one of the following:","source":"The value of `nFormat` must be one of the following:"},{"pos":[86473,86511],"content":"<ph id=\"ph1\">`SF_TEXT`</ph> Indicates writing text only.","source":"`SF_TEXT` Indicates writing text only."},{"pos":[86519,86566],"content":"<ph id=\"ph1\">`SF_RTF`</ph> Indicates writing text and formatting.","source":"`SF_RTF` Indicates writing text and formatting."},{"pos":[86574,86660],"content":"<ph id=\"ph1\">`SF_RTFNOOBJS`</ph> Indicates writing text and formatting, replacing OLE items with spaces.","source":"`SF_RTFNOOBJS` Indicates writing text and formatting, replacing OLE items with spaces."},{"pos":[86668,86763],"content":"<ph id=\"ph1\">`SF_TEXTIZED`</ph> Indicates writing text and formatting, with textual representations of OLE items.","source":"`SF_TEXTIZED` Indicates writing text and formatting, with textual representations of OLE items."},{"content":"Any of these values can be combined with <ph id=\"ph1\">`SFF_SELECTION`</ph>.","pos":[86770,86827],"source":"Any of these values can be combined with `SFF_SELECTION`."},{"content":"If <ph id=\"ph1\">`SFF_SELECTION`</ph> is specified, <ph id=\"ph2\">`StreamOut`</ph> writes out the current selection into the output stream.","pos":[86828,86929],"source":" If `SFF_SELECTION` is specified, `StreamOut` writes out the current selection into the output stream."},{"content":"If it is not specified, <ph id=\"ph1\">`StreamOut`</ph> writes out the entire contents of this <ph id=\"ph2\">`CRichEditCtrl`</ph> object.","pos":[86930,87028],"source":" If it is not specified, `StreamOut` writes out the entire contents of this `CRichEditCtrl` object."},{"content":"In the <bpt id=\"p1\">**</bpt>EDITSTREAM<ept id=\"p1\">**</ept> parameter <ph id=\"ph1\">`es`</ph>, you specify a callback function which fills a buffer with text.","pos":[87035,87136],"source":"In the **EDITSTREAM** parameter `es`, you specify a callback function which fills a buffer with text."},{"content":"This callback function is called repeatedly, until the output stream is exhausted.","pos":[87137,87219]},{"pos":[87226,87481],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_STREAMOUT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774304)</ept> message and <bpt id=\"p2\">[</bpt>EDITSTREAM<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb787891)</ept> structure in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_STREAMOUT](http://msdn.microsoft.com/library/windows/desktop/bb774304) message and [EDITSTREAM](http://msdn.microsoft.com/library/windows/desktop/bb787891) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[87491,87498],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[87502,87603],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#36<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_36.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#36](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_36.cpp)]"},{"pos":[87610,87711],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CRichEditCtrl#37<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_37.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CRichEditCtrl#37](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_37.cpp)]"},{"pos":[87721,87776],"content":"<bpt id=\"p1\">&lt;a name=\"cricheditctrl__undo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRichEditCtrl::Undo","linkify":"<a name=\"cricheditctrl__undo\"></a>  CRichEditCtrl::Undo","source":"<a name=\"cricheditctrl__undo\"></a>  CRichEditCtrl::Undo"},{"content":"Undoes the last operation in the rich edit control.","pos":[87780,87831]},{"pos":[87869,87881],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the undo operation is successful; otherwise, 0.","pos":[87885,87943]},{"pos":[87953,87960],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An undo operation can also be undone.","pos":[87964,88001]},{"content":"For example, you can restore deleted text with the first call to <bpt id=\"p1\">**</bpt>Undo<ept id=\"p1\">**</ept>.","pos":[88002,88076],"source":" For example, you can restore deleted text with the first call to **Undo**."},{"content":"As long as there is no intervening edit operation, you can remove the text again with a second call to <bpt id=\"p1\">**</bpt>Undo<ept id=\"p1\">**</ept>.","pos":[88077,88189],"source":" As long as there is no intervening edit operation, you can remove the text again with a second call to **Undo**."},{"pos":[88196,88351],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_UNDO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761670)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_UNDO](http://msdn.microsoft.com/library/windows/desktop/bb761670) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[88361,88368],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[88373,88428],"content":"See the example for <bpt id=\"p1\">[</bpt>CanUndo<ept id=\"p1\">](#cricheditctrl__canundo)</ept>.","source":"See the example for [CanUndo](#cricheditctrl__canundo)."},{"pos":[88437,88445],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>MFC Sample WORDPAD<ept id=\"p1\">](../../visual-cpp-samples.md)</ept><ph id=\"ph1\"> </ph>","pos":[88449,88499],"source":"[MFC Sample WORDPAD](../../visual-cpp-samples.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CWnd Class<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[88502,88551],"source":" [CWnd Class](../../mfc/reference/cwnd-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[88554,88603],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CEdit Class<ept id=\"p1\">](../../mfc/reference/cedit-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[88606,88657],"source":" [CEdit Class](../../mfc/reference/cedit-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CRichEditView Class<ept id=\"p1\">](../../mfc/reference/cricheditview-class.md)</ept>","pos":[88660,88726],"source":" [CRichEditView Class](../../mfc/reference/cricheditview-class.md)"}],"content":"---\ntitle: \"CRichEditCtrl Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CRichEditCtrl\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CRichEditCtrl class, common controls\"\n  - \"CRichEditCtrl class\"\n  - \"formatted text [C++]\"\nms.assetid: 2be52788-822c-4c27-aafd-2471231e74eb\ncaps.latest.revision: 26\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CRichEditCtrl Class\nProvides the functionality of the rich edit control.  \n  \n## Syntax  \n  \n```  \nclass CRichEditCtrl : public CWnd  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CRichEditCtrl::CRichEditCtrl](#cricheditctrl__cricheditctrl)|Constructs a `CRichEditCtrl` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CRichEditCtrl::CanPaste](#cricheditctrl__canpaste)|Determines if the contents of the Clipboard can be pasted into this rich edit control.|  \n|[CRichEditCtrl::CanRedo](#cricheditctrl__canredo)|Determines whether there are any actions in the control's redo queue.|  \n|[CRichEditCtrl::CanUndo](#cricheditctrl__canundo)|Determines if an editing operation can be undone.|  \n|[CRichEditCtrl::CharFromPos](#cricheditctrl__charfrompos)|Retrieves information about the character closest to a specified point in the client area of an edit control.|  \n|[CRichEditCtrl::Clear](#cricheditctrl__clear)|Clears the current selection.|  \n|[CRichEditCtrl::Copy](#cricheditctrl__copy)|Copies the current selection to the Clipboard.|  \n|[CRichEditCtrl::Create](#cricheditctrl__create)|Creates the Windows rich edit control and associates it with this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::CreateEx](#cricheditctrl__createex)|Creates the Windows rich edit control with the specified extended Windows styles and associates it with this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::Cut](#cricheditctrl__cut)|Cuts the current selection to the Clipboard.|  \n|[CRichEditCtrl::DisplayBand](#cricheditctrl__displayband)|Displays a portion of the contents of this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::EmptyUndoBuffer](#cricheditctrl__emptyundobuffer)|Resets (clears) the undo flag of this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::FindText](#cricheditctrl__findtext)|Locates text within this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::FindWordBreak](#cricheditctrl__findwordbreak)|Finds the next word break before or after the specified character position, or retrieves information about the character at that position.|  \n|[CRichEditCtrl::FormatRange](#cricheditctrl__formatrange)|Formats a range of text for the target output device.|  \n|[CRichEditCtrl::GetCharPos](#cricheditctrl__getcharpos)|Determines the location of a given character within this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::GetDefaultCharFormat](#cricheditctrl__getdefaultcharformat)|Retrieves the current default character formatting attributes in this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::GetEventMask](#cricheditctrl__geteventmask)|Retrieves the event mask for this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::GetFirstVisibleLine](#cricheditctrl__getfirstvisibleline)|Determines the topmost visible line in this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::GetIRichEditOle](#cricheditctrl__getiricheditole)|Retrieves a pointer to the `IRichEditOle` interface for this rich edit control.|  \n|[CRichEditCtrl::GetLimitText](#cricheditctrl__getlimittext)|Gets the limit on the amount of text a user can enter into this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::GetLine](#cricheditctrl__getline)|Retrieves a line of text from this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::GetLineCount](#cricheditctrl__getlinecount)|Retrieves the number of lines in this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::GetModify](#cricheditctrl__getmodify)|Determines if the contents of this `CRichEditCtrl` object have changed since the last save.|  \n|[CRichEditCtrl::GetOptions](#cricheditctrl__getoptions)|Retrieves the rich edit control options.|  \n|[CRichEditCtrl::GetParaFormat](#cricheditctrl__getparaformat)|Retrieves the paragraph formatting attributes in the current selection in this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::GetPunctuation](#cricheditctrl__getpunctuation)|Retrieves the current punctuation characters for the rich edit control. This message is available only in Asian-language versions of the operating system.|  \n|[CRichEditCtrl::GetRect](#cricheditctrl__getrect)|Retrieves the formatting rectangle for this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::GetRedoName](#cricheditctrl__getredoname)|Retrieves the type of the next action, if any, in the control's redo queue.|  \n|[CRichEditCtrl::GetSel](#cricheditctrl__getsel)|Gets the starting and ending positions of the current selection in this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::GetSelectionCharFormat](#cricheditctrl__getselectioncharformat)|Retrieves the character formatting attributes in the current selection in this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::GetSelectionType](#cricheditctrl__getselectiontype)|Retrieves the type of contents in the current selection in this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::GetSelText](#cricheditctrl__getseltext)|Gets the text of the current selection in this `CRichEditCtrl` object|  \n|[CRichEditCtrl::GetTextLength](#cricheditctrl__gettextlength)|Retrieves the length of the text, in characters, in this `CRichEditCtrl` object. Does not include the terminating null character.|  \n|[CRichEditCtrl::GetTextLengthEx](#cricheditctrl__gettextlengthex)|Retrieves the number of characters or bytes in the rich edit view. Accepts a list of flags to indicate the method of determining length of the text in a rich edit control|  \n|[CRichEditCtrl::GetTextMode](#cricheditctrl__gettextmode)|Retrieves the current text mode and undo level of a rich edit control.|  \n|[CRichEditCtrl::GetTextRange](#cricheditctrl__gettextrange)|Retrieves the specified range of text.|  \n|[CRichEditCtrl::GetUndoName](#cricheditctrl__getundoname)|Retrieves the type of the next undo action, if any.|  \n|[CRichEditCtrl::GetWordWrapMode](#cricheditctrl__getwordwrapmode)|Retrieves the current word wrapping and word breaking options for the rich edit control. This message is available only in Asian-language versions of the operating system.|  \n|[CRichEditCtrl::HideSelection](#cricheditctrl__hideselection)|Shows or hides the current selection.|  \n|[CRichEditCtrl::LimitText](#cricheditctrl__limittext)|Limits the amount of text a user can enter into the `CRichEditCtrl` object.|  \n|[CRichEditCtrl::LineFromChar](#cricheditctrl__linefromchar)|Determines which line contains the given character.|  \n|[CRichEditCtrl::LineIndex](#cricheditctrl__lineindex)|Retrieves the character index of a given line in this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::LineLength](#cricheditctrl__linelength)|Retrieves the length of a given line in this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::LineScroll](#cricheditctrl__linescroll)|Scrolls the text in this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::Paste](#cricheditctrl__paste)|Inserts the contents of the Clipboard into this rich edit control.|  \n|[CRichEditCtrl::PasteSpecial](#cricheditctrl__pastespecial)|Inserts the contents of the Clipboard into this rich edit control in the specified data format.|  \n|[CRichEditCtrl::PosFromChar](#cricheditctrl__posfromchar)|Retrieves the client area coordinates of a specified character in an edit control.|  \n|[CRichEditCtrl::Redo](#cricheditctrl__redo)|Redoes the next action in the control's redo queue.|  \n|[CRichEditCtrl::ReplaceSel](#cricheditctrl__replacesel)|Replaces the current selection in this `CRichEditCtrl` object with specified text.|  \n|[CRichEditCtrl::RequestResize](#cricheditctrl__requestresize)|Forces this `CRichEditCtrl` object to send request resize notifications.|  \n|[CRichEditCtrl::SetAutoURLDetect](#cricheditctrl__setautourldetect)|Indicates if the auto URL detection is active in a rich edit control.|  \n|[CRichEditCtrl::SetBackgroundColor](#cricheditctrl__setbackgroundcolor)|Sets the background color in this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::SetDefaultCharFormat](#cricheditctrl__setdefaultcharformat)|Sets the current default character formatting attributes in this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::SetEventMask](#cricheditctrl__seteventmask)|Sets the event mask for this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::SetModify](#cricheditctrl__setmodify)|Sets or clears the modification flag for this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::SetOLECallback](#cricheditctrl__setolecallback)|Sets the `IRichEditOleCallback` COM object for this rich edit control.|  \n|[CRichEditCtrl::SetOptions](#cricheditctrl__setoptions)|Sets the options for this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::SetParaFormat](#cricheditctrl__setparaformat)|Sets the paragraph formatting attributes in the current selection in this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::SetPunctuation](#cricheditctrl__setpunctuation)|Sets the punctuation characters for a rich edit control. This message is available only in Asian-language versions of the operating system.|  \n|[CRichEditCtrl::SetReadOnly](#cricheditctrl__setreadonly)|Sets the read-only option for this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::SetRect](#cricheditctrl__setrect)|Sets the formatting rectangle for this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::SetSel](#cricheditctrl__setsel)|Sets the selection in this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::SetSelectionCharFormat](#cricheditctrl__setselectioncharformat)|Sets the character formatting attributes in the current selection in this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::SetTargetDevice](#cricheditctrl__settargetdevice)|Sets the target output device for this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::SetTextMode](#cricheditctrl__settextmode)|Sets the text mode or undo level of a rich edit control. The message fails if the control contains text.|  \n|[CRichEditCtrl::SetUndoLimit](#cricheditctrl__setundolimit)|Sets the maximum number of actions that can stored in the undo queue.|  \n|[CRichEditCtrl::SetWordCharFormat](#cricheditctrl__setwordcharformat)|Sets the character formatting attributes in the current word in this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::SetWordWrapMode](#cricheditctrl__setwordwrapmode)|Sets the word-wrapping and word-breaking options for the rich edit control. This message is available only in Asian-language versions of the operating system.|  \n|[CRichEditCtrl::StopGroupTyping](#cricheditctrl__stopgrouptyping)|Stops the control from collecting additional typing actions into the current undo action. The control stores the next typing action, if any, into a new action in the undo queue.|  \n|[CRichEditCtrl::StreamIn](#cricheditctrl__streamin)|Inserts text from an input stream into this `CRichEditCtrl` object.|  \n|[CRichEditCtrl::StreamOut](#cricheditctrl__streamout)|Stores text from this `CRichEditCtrl` object into an output stream.|  \n|[CRichEditCtrl::Undo](#cricheditctrl__undo)|Reverses the last editing operation.|  \n  \n## Remarks  \n A \"rich edit control\" is a window in which the user can enter and edit text. The text can be assigned character and paragraph formatting, and can include embedded OLE objects. Rich edit controls provide a programming interface for formatting text. However, an application must implement any user interface components necessary to make formatting operations available to the user.  \n  \n This Windows Common control (and therefore the `CRichEditCtrl` class) is available only to programs running under Windows 95/98 and Windows NT versions 3.51 and later. The `CRichEditCtrl` class supports versions 2.0 and 3.0 of the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] rich edit control.  \n  \n> [!CAUTION]\n>  If you are using a rich edit control in a dialog box (regardless whether your application is SDI, MDI, or dialog-based), you must call [AfxInitRichEdit](application-information-and-management.md#afxinitrichedit) once before the dialog box is displayed. A typical place to call this function is in your program's `InitInstance` member function. You do not need to call it for each time you display the dialog box, only the first time. You do not have to call `AfxInitRichEdit` if you are working with `CRichEditView`.  \n  \n For more information on using `CRichEditCtrl`, see:  \n  \n- [Controls](../../mfc/controls-mfc.md)  \n  \n- [Using CRichEditCtrl](../../mfc/using-cricheditctrl.md)  \n  \n-   Knowledge Base article Q259949 : INFO: SetCaretPos() Is Not Appropriate with CEdit or CRichEditCtrl Controls  \n  \n For an example of using a rich edit control in an MFC application, see the [WORDPAD](../../visual-cpp-samples.md) sample application.  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n `CRichEditCtrl`  \n  \n## Requirements  \n **Header:** afxcmn.h  \n  \n##  <a name=\"cricheditctrl__canpaste\"></a>  CRichEditCtrl::CanPaste  \n Determines if the rich edit control can paste the specified Clipboard format.  \n  \n```  \nBOOL CanPaste(UINT nFormat = 0) const;\n\n \n```  \n  \n### Parameters  \n `nFormat`  \n The Clipboard data format to query. This parameter can be one of the predefined Clipboard formats or the value returned by [RegisterClipboardFormat](http://msdn.microsoft.com/library/windows/desktop/ms649049).  \n  \n### Return Value  \n Nonzero if the Clipboard format can be pasted; otherwise 0.  \n  \n### Remarks  \n If `nFormat` is 0, `CanPaste` will try any format currently on the Clipboard.  \n  \n For more information, see [EM_CANPASTE](http://msdn.microsoft.com/library/windows/desktop/bb787993) message and [RegisterClipboardFormat](http://msdn.microsoft.com/library/windows/desktop/ms649049) function in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#1](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_1.cpp)]  \n  \n##  <a name=\"cricheditctrl__canredo\"></a>  CRichEditCtrl::CanRedo  \n Determines if the redo queue contains any actions.  \n  \n```  \nBOOL CanRedo() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if the redo queue contains actions, otherwise 0.  \n  \n### Remarks  \n To discover the name of the operation in the redo queue, call [CRichEditCtrl::GetRedoName](#cricheditctrl__getredoname). To redo the most recent Undo operation, call [Redo](#cricheditctrl__redo).  \n  \n For more information, see [EM_CANREDO](http://msdn.microsoft.com/library/windows/desktop/bb787995) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cricheditctrl__canundo\"></a>  CRichEditCtrl::CanUndo  \n Determines if the last editing operation can be undone.  \n  \n```  \nBOOL CanUndo() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if the last edit operation can be undone by a call to the [Undo](#cricheditctrl__undo) member function; 0 if it cannot be undone.  \n  \n### Remarks  \n For more information, see [EM_CANUNDO](http://msdn.microsoft.com/library/windows/desktop/bb775468) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#2](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_2.cpp)]  \n  \n##  <a name=\"cricheditctrl__charfrompos\"></a>  CRichEditCtrl::CharFromPos  \n Retrieves information about the character at the point specified by the parameter `pt`.  \n  \n```  \nint CharFromPos(CPoint pt) const;\n\n \n```  \n  \n### Parameters  \n `pt`  \n A [CPoint](../../atl-mfc-shared/reference/cpoint-class.md) object containing the coordinates of the specified point.  \n  \n### Return Value  \n The zero-based character index of the character nearest the specified point. If the specified point is beyond the last character in the control, the return value indicates the last character in the control.  \n  \n### Remarks  \n This member function works with a rich edit control. To get the information for an edit control, call [CEdit::CharFromPos](../../mfc/reference/cedit-class.md#cedit__charfrompos).  \n  \n For more information, see [EM_CHARFROMPOS](http://msdn.microsoft.com/library/windows/desktop/bb761566) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cricheditctrl__clear\"></a>  CRichEditCtrl::Clear  \n Deletes (clears) the current selection (if any) in the rich edit control.  \n  \n```  \nvoid Clear();\n```  \n  \n### Remarks  \n The deletion performed by **Clear** can be undone by calling the [Undo](#cricheditctrl__undo) member function.  \n  \n To delete the current selection and place the deleted contents onto the Clipboard, call the [Cut](#cricheditctrl__cut) member function.  \n  \n For more information, see [WM_CLEAR](http://msdn.microsoft.com/library/windows/desktop/ms649020) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#3](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_3.cpp)]  \n  \n##  <a name=\"cricheditctrl__copy\"></a>  CRichEditCtrl::Copy  \n Copies the current selection (if any) in the rich edit control to the Clipboard.  \n  \n```  \nvoid Copy();\n```  \n  \n### Remarks  \n For more information, see [WM_COPY](http://msdn.microsoft.com/library/windows/desktop/ms649022) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#4](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_4.cpp)]  \n  \n##  <a name=\"cricheditctrl__create\"></a>  CRichEditCtrl::Create  \n Creates the Windows rich edit control and associates it with this `CRichEditCtrl` object.  \n  \n```  \nvirtual BOOL Create(\n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    UINT nID);\n```  \n  \n### Parameters  \n `dwStyle`  \n Specifies the edit control's style. Apply a combination of the window styles listed in the **Remarks** section below, and [edit control styles](http://msdn.microsoft.com/library/windows/desktop/bb775464), described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `rect`  \n Specifies the edit control's size and position. Can be a [CRect](../../atl-mfc-shared/reference/crect-class.md) object or [RECT](../../mfc/reference/rect-structure1.md) structure.  \n  \n `pParentWnd`  \n Specifies the edit control's parent window (often a [CDialog](../../mfc/reference/cdialog-class.md)). It must not be **NULL**.  \n  \n `nID`  \n Specifies the edit control's ID.  \n  \n### Return Value  \n Nonzero if initialization is successful; otherwise, 0.  \n  \n### Remarks  \n You construct a `CRichEditCtrl` object in two steps. First, call the [CRichEditCtrl](#cricheditctrl__cricheditctrl) constructor, then call **Create**, which creates the Windows edit control and attaches it to the `CRichEditCtrl` object.  \n  \n When you create a rich edit control with this function, first you must load the necessary common controls library. To load the libary, call the global function [AfxInitRichEdit](application-information-and-management.md#afxinitrichedit), which in turn initializes the common controls library. You need to call `AfxInitRichEdit` only once in your process.  \n  \n When **Create** executes, Windows sends the [WM_NCCREATE](../../mfc/reference/cwnd-class.md#cwnd__onnccreate), [WM_NCCALCSIZE](../../mfc/reference/cwnd-class.md#cwnd__onnccalcsize), [WM_CREATE](../../mfc/reference/cwnd-class.md#cwnd__oncreate), and [WM_GETMINMAXINFO](../../mfc/reference/cwnd-class.md#cwnd__ongetminmaxinfo) messages to the edit control.  \n  \n These messages are handled by default by the [OnNcCreate](../../mfc/reference/cwnd-class.md#cwnd__onnccreate), [OnNcCalcSize](../../mfc/reference/cwnd-class.md#cwnd__onnccalcsize), [OnCreate](../../mfc/reference/cwnd-class.md#cwnd__oncreate), and [OnGetMinMaxInfo](../../mfc/reference/cwnd-class.md#cwnd__ongetminmaxinfo) member functions in the `CWnd` base class. To extend the default message handling, derive a class from `CRichEditCtrl`, add a message map to the new class, and override the above message-handler member functions. Override `OnCreate`, for example, to perform needed initialization for the new class.  \n  \n Apply the following [window styles](../../mfc/reference/window-styles.md) to an edit control.  \n  \n- **WS_CHILD** Always.  \n  \n- **WS_VISIBLE** Usually.  \n  \n- **WS_DISABLED** Rarely.  \n  \n- **WS_GROUP** To group controls.  \n  \n- **WS_TABSTOP** To include edit control in the tabbing order.  \n  \n For more information about window styles, see [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#5](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_5.cpp)]  \n  \n##  <a name=\"cricheditctrl__createex\"></a>  CRichEditCtrl::CreateEx  \n Creates a control (a child window) and associates it with the `CRichEditCtrl` object.  \n  \n```  \nvirtual BOOL CreateEx(\n    DWORD dwExStyle,  \n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    UINT nID);\n```  \n  \n### Parameters  \n `dwExStyle`  \n Specifies the extended style of the control being created. For a list of extended Windows styles, see the `dwExStyle` parameter for [CreateWindowEx](http://msdn.microsoft.com/library/windows/desktop/ms632680) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `dwStyle`  \n Specifies the edit control's style. Apply a combination of the window styles listed in the **Remarks** section of [Create](#cricheditctrl__create) and [edit control styles](http://msdn.microsoft.com/library/windows/desktop/bb775464), described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `rect`  \n A reference to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure describing the size and position of the window to be created, in client coordinates of `pParentWnd`.  \n  \n `pParentWnd`  \n A pointer to the window that is the control's parent.  \n  \n `nID`  \n The control's child-window ID.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n Use `CreateEx` instead of **Create** to apply extended Windows styles, specified by the Windows extended style preface **WS_EX_**.  \n  \n##  <a name=\"cricheditctrl__cricheditctrl\"></a>  CRichEditCtrl::CRichEditCtrl  \n Constructs a `CRichEditCtrl` object.  \n  \n```  \nCRichEditCtrl();\n```  \n  \n### Remarks  \n Use [Create](#cricheditctrl__create) to construct the Windows rich edit control.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#6](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_6.cpp)]  \n  \n##  <a name=\"cricheditctrl__cut\"></a>  CRichEditCtrl::Cut  \n Delete (cuts) the current selection (if any) in the rich edit control and copies the deleted text to the Clipboard.  \n  \n```  \nvoid Cut();\n```  \n  \n### Remarks  \n The deletion performed by **Cut** can be undone by calling the [Undo](#cricheditctrl__undo) member function.  \n  \n To delete the current selection without placing the deleted text into the Clipboard, call the [Clear](#cricheditctrl__clear) member function.  \n  \n For more information, see [WM_CUT](http://msdn.microsoft.com/library/windows/desktop/ms649023) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#7](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_7.cpp)]  \n  \n##  <a name=\"cricheditctrl__displayband\"></a>  CRichEditCtrl::DisplayBand  \n Displays a portion of the contents of the rich edit control (text and OLE items), as previously formatted by [FormatRange](#cricheditctrl__formatrange).  \n  \n```  \nBOOL DisplayBand(LPRECT pDisplayRect);\n```  \n  \n### Parameters  \n `pDisplayRect`  \n Pointer to a [RECT](../../mfc/reference/rect-structure1.md) or [CRect](../../atl-mfc-shared/reference/crect-class.md) object specifying the area of the device to display the text.  \n  \n### Return Value  \n Nonzero if the display of the formatted text succeeds, otherwise, 0.  \n  \n### Remarks  \n The text and OLE items are clipped to the area specified by the pointer `pDisplayRect`.  \n  \n For more information, see [EM_DISPLAYBAND](http://msdn.microsoft.com/library/windows/desktop/bb787997) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CRichEditCtrl::FormatRange](#cricheditctrl__formatrange).  \n  \n##  <a name=\"cricheditctrl__emptyundobuffer\"></a>  CRichEditCtrl::EmptyUndoBuffer  \n Resets (clear) the undo flag of this rich edit control.  \n  \n```  \nvoid EmptyUndoBuffer();\n```  \n  \n### Remarks  \n The control will now be unable to undo the last editing operation. The undo flag is set whenever an operation within the rich edit control can be undone.  \n  \n The undo flag is automatically cleared whenever you call the [CWnd](../../mfc/reference/cwnd-class.md) member function [SetWindowText](../../mfc/reference/cwnd-class.md#cwnd__setwindowtext).  \n  \n For more information, see [EM_EMPTYUNDOBUFFER](http://msdn.microsoft.com/library/windows/desktop/bb761568) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#8](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_8.cpp)]  \n  \n##  <a name=\"cricheditctrl__findtext\"></a>  CRichEditCtrl::FindText  \n Finds text within the rich edit control.  \n  \n```  \nlong FindText(\n    DWORD dwFlags,  \n    FINDTEXTEX* pFindText) const;\n\n \n```  \n  \n### Parameters  \n `dwFlags`  \n For a list of possible values, see `wParam` in [EM_FINDTEXTEXT](http://msdn.microsoft.com/library/windows/desktop/bb788011) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n *pFindText*  \n Pointer to the [FINDTEXTEX](http://msdn.microsoft.com/library/windows/desktop/bb787909) structure giving the parameters for the search and returning the range where the match was found.  \n  \n### Return Value  \n Zero-based character position of the next match; – 1 if there are no more matches.  \n  \n### Remarks  \n You can search either up or down by setting the proper range parameters in the [CHARRANGE](http://msdn.microsoft.com/library/windows/desktop/bb787885) structure within the **FINDTEXTEX** structure.  \n  \n For more information, see [EM_FINDTEXTEX](http://msdn.microsoft.com/library/windows/desktop/bb788011) message and [FINDTEXTEX](http://msdn.microsoft.com/library/windows/desktop/bb787909) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#9](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_9.cpp)]  \n  \n##  <a name=\"cricheditctrl__findwordbreak\"></a>  CRichEditCtrl::FindWordBreak  \n Finds the next word break before or after the position specified by `nStart`.  \n  \n```  \nDWORD FindWordBreak(\n    UINT nCode,  \n    DWORD nStart) const;\n\n \n```  \n  \n### Parameters  \n `nCode`  \n Indicates the action to take. For a list of possible values, see the description for the parameter `code` in **EM_FINDWORDBREAK** in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `nStart`  \n The zero-based character position from which to start.  \n  \n### Return Value  \n Based on the parameter `nCode`. For more information, see [EM_FINDWORDBREAK](http://msdn.microsoft.com/library/windows/desktop/bb788018) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Remarks  \n You can use this member function to retrieve information about a character at a given position.  \n  \n##  <a name=\"cricheditctrl__formatrange\"></a>  CRichEditCtrl::FormatRange  \n Formats a range of text in a rich edit control for a specific device.  \n  \n```  \nlong FormatRange(\n    FORMATRANGE* pfr,  \n    BOOL bDisplay = TRUE);\n```  \n  \n### Parameters  \n *pfr*  \n Pointer to the [FORMATRANGE](http://msdn.microsoft.com/library/windows/desktop/bb787911) structure which contains information about the output device. **NULL** indicates that cached information within the rich edit control can be freed.  \n  \n *bDisplay*  \n Indicates if the text should be rendered. If **FALSE**, the text is just measured.  \n  \n### Return Value  \n The index of the last character that fits in the region plus one.  \n  \n### Remarks  \n Typically, this call is followed by a call to [DisplayBand](#cricheditctrl__displayband).  \n  \n For more information, see [EM_FORMATRANGE](http://msdn.microsoft.com/library/windows/desktop/bb788020) message and [FORMATRANGE](http://msdn.microsoft.com/library/windows/desktop/bb787911) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#10](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_10.cpp)]  \n  \n##  <a name=\"cricheditctrl__getcharpos\"></a>  CRichEditCtrl::GetCharPos  \n Gets the position (top-left corner) of a given character within this `CRichEditCtrl` object.  \n  \n```  \nCPoint GetCharPos(long lChar) const;\n\n \n```  \n  \n### Parameters  \n `lChar`  \n Zero-based index of the character.  \n  \n### Return Value  \n The location of the top-left corner of the character specified by `lChar`.  \n  \n### Remarks  \n The character is specified by giving its zero-based index value. If `lChar` is greater than the index of the last character in this `CRichEditCtrl` object, the return value specifies the coordinates of the character position just past the last character in this `CRichEditCtrl` object.  \n  \n For more information, see [EM_POSFROMCHAR](http://msdn.microsoft.com/library/windows/desktop/bb761631) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cricheditctrl__getdefaultcharformat\"></a>  CRichEditCtrl::GetDefaultCharFormat  \n Gets the default character formatting attributes of this `CRichEditCtrl` object.  \n  \n```  \nDWORD GetDefaultCharFormat(CHARFORMAT& cf) const;\n\n \n \nDWORD GetDefaultCharFormat(CHARFORMAT2& cf) const;\n\n \n```  \n  \n### Parameters  \n `cf`  \n In the first version, a pointer to a **CHARFORMAT** structure holding the default character formatting attributes.  \n  \n In the second version, a pointer to a **CHARFORMAT2** structure, which is a Rich Edit 2.0 extension to the **CHARFORMAT** structure, holding the default character formatting attributes.  \n  \n### Return Value  \n The **dwMask** data member of `cf`. It specified the default character formatting attributes.  \n  \n### Remarks  \n For more information, see the **EM_GETCHARFORMAT** message and the **CHARFORMAT** and **CHARFORMAT2** structures in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [SetDefaultCharFormat](#cricheditctrl__setdefaultcharformat).  \n  \n##  <a name=\"cricheditctrl__geteventmask\"></a>  CRichEditCtrl::GetEventMask  \n Gets the event mask for this `CRichEditCtrl` object.  \n  \n```  \nlong GetEventMask() const;\n\n \n```  \n  \n### Return Value  \n The event mask for this `CRichEditCtrl` object.  \n  \n### Remarks  \n The event mask specifies which notification messages the `CRichEditCtrl` object sends to its parent window.  \n  \n For more information, see [EM_GETEVENTMASK](http://msdn.microsoft.com/library/windows/desktop/bb788032) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CRichEditCtrl::SetEventMask](#cricheditctrl__seteventmask).  \n  \n##  <a name=\"cricheditctrl__getfirstvisibleline\"></a>  CRichEditCtrl::GetFirstVisibleLine  \n Determines the topmost visible line in this `CRichEditCtrl` object.  \n  \n```  \nint GetFirstVisibleLine() const;\n\n \n```  \n  \n### Return Value  \n Zero-based index of the uppermost visible line in this `CRichEditCtrl` object.  \n  \n### Remarks  \n For more information, see [EM_GETFIRSTVISIBLELINE](http://msdn.microsoft.com/library/windows/desktop/bb761574) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#11](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_11.cpp)]  \n  \n##  <a name=\"cricheditctrl__getiricheditole\"></a>  CRichEditCtrl::GetIRichEditOle  \n Accesses the **IRichEditOle** interface for this `CRichEditCtrl` object.  \n  \n```  \nIRichEditOle* GetIRichEditOle() const;\n\n \n```  \n  \n### Return Value  \n Pointer to the [IRichEditOle](http://msdn.microsoft.com/library/windows/desktop/bb774306) interface that can be used to access this `CRichEditCtrl` object's OLE functionality; **NULL** if the interface is not accessible.  \n  \n### Remarks  \n Use this interface to access this `CRichEditCtrl` object's OLE functionality.  \n  \n For more information, see [EM_GETOLEINTERFACE](http://msdn.microsoft.com/library/windows/desktop/bb788041) message and [IRichEditOle](http://msdn.microsoft.com/library/windows/desktop/bb774306) interface in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cricheditctrl__getlimittext\"></a>  CRichEditCtrl::GetLimitText  \n Gets the text limit for this `CRichEditCtrl` object.  \n  \n```  \nlong GetLimitText() const;\n\n \n```  \n  \n### Return Value  \n The current text limit, in bytes, for this `CRichEditCtrl` object.  \n  \n### Remarks  \n The text limit is the maximum amount of text, in bytes, the rich edit control can accept.  \n  \n For more information, see [EM_GETLIMITTEXT](http://msdn.microsoft.com/library/windows/desktop/bb761582) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#12](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_12.cpp)]  \n  \n##  <a name=\"cricheditctrl__getline\"></a>  CRichEditCtrl::GetLine  \n Retrieves a line of text from this `CRichEditCtrl` object.  \n  \n```  \nint GetLine(\n    int nIndex,  \n    LPTSTR lpszBuffer) const;\n\n \n \nint GetLine(\n    int nIndex,  \n    LPTSTR lpszBuffer,  \n    int nMaxLength) const;\n\n \n```  \n  \n### Parameters  \n `nIndex`  \n Zero-based index of the line to retrieve.  \n  \n `lpszBuffer`  \n Points to the buffer to receive the text. The first word of the buffer must specify the maximum number of bytes that can be copied into the buffer.  \n  \n `nMaxLength`  \n Maximum number of characters that can be copied into `lpszBuffer`. The second form of `GetLine` places this value into the first word of the buffer specified by `lpszBuffer`.  \n  \n### Return Value  \n The number of characters copied into `lpszBuffer`.  \n  \n### Remarks  \n The copied line does not contain a terminating null character.  \n  \n> [!NOTE]\n>  Because the first word of the buffer stores the number of characters to be copied, make sure that your buffer is at least 4 bytes long.  \n  \n For more information, see [EM_GETLINE](http://msdn.microsoft.com/library/windows/desktop/bb761584) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [GetLineCount](#cricheditctrl__getlinecount).  \n  \n##  <a name=\"cricheditctrl__getlinecount\"></a>  CRichEditCtrl::GetLineCount  \n Retrieves the number of lines in the `CRichEditCtrl` object.  \n  \n```  \nint GetLineCount() const;\n\n \n```  \n  \n### Return Value  \n The number of lines in this `CRichEditCtrl` object.  \n  \n### Remarks  \n For more information, see [EM_GETLINECOUNT](http://msdn.microsoft.com/library/windows/desktop/bb761586) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#13](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_13.cpp)]  \n  \n##  <a name=\"cricheditctrl__getmodify\"></a>  CRichEditCtrl::GetModify  \n Determines if the contents of this `CRichEditCtrl` object have been modified.  \n  \n```  \nBOOL GetModify() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if the text in this `CRichEditCtrl` object has been modified; otherwise 0.  \n  \n### Remarks  \n Windows maintains an internal flag indicating whether the contents of the rich edit control have been changed. This flag is cleared when the edit control is first created and can also be cleared by calling the [SetModify](#cricheditctrl__setmodify) member function.  \n  \n For more information, see [EM_GETMODIFY](http://msdn.microsoft.com/library/windows/desktop/bb761592) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#14](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_14.cpp)]  \n  \n##  <a name=\"cricheditctrl__getoptions\"></a>  CRichEditCtrl::GetOptions  \n Retrieves the options currently set for the rich edit control.  \n  \n```  \nUINT GetOptions() const;\n\n \n```  \n  \n### Return Value  \n A combination of the current option flag values. For a list of these values, see the *fOptions* parameter in the [EM_SETOPTIONS](http://msdn.microsoft.com/library/windows/desktop/bb774254) message, as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cricheditctrl__getparaformat\"></a>  CRichEditCtrl::GetParaFormat  \n Gets the paragraph formatting attributes of the current selection.  \n  \n```  \nDWORD GetParaFormat(PARAFORMAT& pf) const;\n\n \n \nDWORD GetParaFormat(PARAFORMAT2& pf) const;\n\n \n```  \n  \n### Parameters  \n `pf`  \n In the first version, a pointer to a [PARAFORMAT](http://msdn.microsoft.com/library/windows/desktop/bb787940) structure to hold the paragraph formatting attributes of the current selection.  \n  \n In the second version, a pointer to a [PARAFORMAT2](http://msdn.microsoft.com/library/windows/desktop/bb787942) structure, which is a Rich Edit 2.0 extension to the **PARAFORMAT** structure, holding the default character formatting attributes.  \n  \n### Return Value  \n The **dwMask** data member of `pf`. It specifies the paragraph formatting attributes that are consistent throughout the current selection.  \n  \n### Remarks  \n If more than one paragraph is selected, `pf` receives the attributes of the first selected paragraph. The return value specifies which attributes are consistent throughout the selection.  \n  \n For more information, see the [EM_GETPARAFORMAT](http://msdn.microsoft.com/library/windows/desktop/bb774182) message and the **PARAFORMAT** and **PARAFORMAT2** structures in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CRichEditCtrl::SetParaFormat](#cricheditctrl__setparaformat).  \n  \n##  <a name=\"cricheditctrl__getpunctuation\"></a>  CRichEditCtrl::GetPunctuation  \n Gets the current punctuation characters in a rich edit control.  \n  \n```  \nBOOL GetPunctuation(\n    UINT fType,  \n    PUNCTUATION* lpPunc) const;\n\n \n```  \n  \n### Parameters  \n `fType`  \n The punctuation type flag, as described in the `fType` parameter of [EM_GETPUNCTUATION](http://msdn.microsoft.com/library/windows/desktop/bb774184) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `lpPunc`  \n A pointer to a [PUNCTUATION](http://msdn.microsoft.com/library/windows/desktop/bb787944) structure, as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Return Value  \n Nonzero if the operation succeeded, otherwise 0.  \n  \n### Remarks  \n This member function is available with only the Asian-language versions of the operating system.  \n  \n##  <a name=\"cricheditctrl__getrect\"></a>  CRichEditCtrl::GetRect  \n Retrieves the formatting rectangle for this `CRichEditCtrl` object.  \n  \n```  \nvoid GetRect(LPRECT lpRect) const;\n\n \n```  \n  \n### Parameters  \n `lpRect`  \n [CRect](../../atl-mfc-shared/reference/crect-class.md) or pointer to a [RECT](../../mfc/reference/rect-structure1.md) to receive the formatting rectangle of this `CRichEditCtrl` object.  \n  \n### Remarks  \n The formatting rectangle is the bounding rectangle for the text. This value is independent of the size of the `CRichEditCtrl` object.  \n  \n For more information, see [EM_GETRECT](http://msdn.microsoft.com/library/windows/desktop/bb761596) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [LimitText](#cricheditctrl__limittext).  \n  \n##  <a name=\"cricheditctrl__getredoname\"></a>  CRichEditCtrl::GetRedoName  \n Retrieves the type of the next available action in the redo queue, if any.  \n  \n```  \nUNDONAMEID GetRedoName() const;\n\n \n```  \n  \n### Return Value  \n If successful, `GetRedoName` returns the [UNDONAMEID](http://msdn.microsoft.com/library/windows/desktop/bb774365) enumeration type indicating the type of the next action in the control's redo queue. If the redo queue is empty, or if the redo action in the queue is of an unknown type, `GetRedoName` returns 0.  \n  \n### Remarks  \n The types of actions that can be undone or redone include typing, delete, drag-drop, cut, and paste operations. This information can be useful for applications that provide an extended user interface for Undo and Redo operations, such as a drop-down list box of redoable actions.  \n  \n##  <a name=\"cricheditctrl__getsel\"></a>  CRichEditCtrl::GetSel  \n Retrieves the bounds of the current selection in this `CRichEditCtrl` object.  \n  \n```  \nvoid GetSel(\n    CHARRANGE& cr) const;\n\n \n \nvoid GetSel(\n    long& nStartChar,  \n    long& nEndChar) const;\n\n \n```  \n  \n### Parameters  \n `cr`  \n Reference to a [CHARRANGE](http://msdn.microsoft.com/library/windows/desktop/bb787885) structure to receive the bounds of the current selection.  \n  \n `nStartChar`  \n Zero-based index of the first character in the current selection.  \n  \n `nEndChar`  \n Zero-based index of the last character in the current selection.  \n  \n### Remarks  \n The two forms of this function provide alternate ways to get the bounds for the selection. Brief descriptions of these forms follow:  \n  \n- **GetSel(** `cr` **)** This form uses the **CHARRANGE** structure with its **cpMin** and **cpMax** members to return the bounds.  \n  \n- **GetSel(** `nStartChar` **,** `nEndChar` **)** This form returns the bounds in the parameters `nStartChar` and `nEndChar`.  \n  \n The selection includes everything if the beginning ( **cpMin** or `nStartChar`) is 0 and the end ( **cpMax** or `nEndChar`) is – 1.  \n  \n For more information, see [EM_EXGETSEL](http://msdn.microsoft.com/library/windows/desktop/bb788001) message and [CHARRANGE](http://msdn.microsoft.com/library/windows/desktop/bb787885) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#15](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_15.cpp)]  \n  \n##  <a name=\"cricheditctrl__getselectioncharformat\"></a>  CRichEditCtrl::GetSelectionCharFormat  \n Gets the character formatting attributes of the current selection.  \n  \n```  \nDWORD GetSelectionCharFormat(CHARFORMAT& cf) const;\n\n \n \nDWORD GetSelectionCharFormat(CHARFORMAT2& cf) const;\n\n \n```  \n  \n### Parameters  \n `cf`  \n In the first version, a pointer to a [CHARFORMAT](http://msdn.microsoft.com/library/windows/desktop/bb787881) structure to receive the character formatting attributes of the current selection.  \n  \n In the second version, a pointer to a [CHARFORMAT2](http://msdn.microsoft.com/library/windows/desktop/bb787883) structure, which is a Rich Edit 2.0 extension to the **CHARFORMAT** structure to receive the character formatting attributes of the current selection.  \n  \n### Return Value  \n The **dwMask** data member of `cf`. It specifies the character formatting attributes that are consistent throughout the current selection.  \n  \n### Remarks  \n The `cf` parameter receives the attributes of the first character in the current selection. The return value specifies which attributes are consistent throughout the selection.  \n  \n For more information, see the [EM_GETCHARFORMAT](http://msdn.microsoft.com/library/windows/desktop/bb788026) message and the **CHARFORMAT** and **CHARFORMAT2** structures in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [SetSelectionCharFormat](#cricheditctrl__setselectioncharformat).  \n  \n##  <a name=\"cricheditctrl__getselectiontype\"></a>  CRichEditCtrl::GetSelectionType  \n Determines the selection type in this `CRichEditCtrl` object.  \n  \n```  \nWORD GetSelectionType() const;\n\n \n```  \n  \n### Return Value  \n Flags indicating the contents of the current selection. A combination of the following flags:  \n  \n- `SEL_EMPTY` Indicates that there is no current selection.  \n  \n- `SEL_TEXT` Indicates that the current selection contains text.  \n  \n- `SEL_OBJECT` Indicates that the current selection contains at least one OLE item.  \n  \n- `SEL_MULTICHAR` Indicates that the current selection contains more than one character of text.  \n  \n- `SEL_MULTIOBJECT` Indicates that the current selection contains more than one OLE object.  \n  \n### Remarks  \n For more information, see [EM_SELECTIONTYPE](http://msdn.microsoft.com/library/windows/desktop/bb774223) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#16](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_16.cpp)]  \n  \n##  <a name=\"cricheditctrl__getseltext\"></a>  CRichEditCtrl::GetSelText  \n Retrieves the text from the current selection in this `CRichEditCtrl` object.  \n  \n```  \nlong GetSelText(LPSTR lpBuf) const;\n\n \n \nCString GetSelText() const;\n\n \n```  \n  \n### Parameters  \n `lpBuf`  \n Pointer to the buffer to receive the text in the current selection.  \n  \n### Return Value  \n Depends on the form:  \n  \n- **GetSelText(** `lpBuf` **)** The number of characters copied into `lpBuf`, not including the null termination.  \n  \n- **GetSelText( )** The string containing the current selection.  \n  \n### Remarks  \n If you use the first form, **GetSelText(** `lpBuf` **)**, you must ensure that the buffer is large enough for the text it will receive. Call [GetSel](#cricheditctrl__getsel) to determine the number of characters in the current selection.  \n  \n For more information, see [EM_GETSELTEXT](http://msdn.microsoft.com/library/windows/desktop/bb774190) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CRichEditCtrl::GetSelectionType](#cricheditctrl__getselectiontype).  \n  \n##  <a name=\"cricheditctrl__gettextlength\"></a>  CRichEditCtrl::GetTextLength  \n Retrieves the length of the text, in characters, in this `CRichEditCtrl` object, not including the terminating null character.  \n  \n```  \nlong GetTextLength() const;\n\n \n```  \n  \n### Return Value  \n The length of the text in this `CRichEditCtrl` object.  \n  \n### Remarks  \n For more information, see [WM_GETTEXTLENGTH](http://msdn.microsoft.com/library/windows/desktop/ms632628) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#17](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_17.cpp)]  \n  \n##  <a name=\"cricheditctrl__gettextlengthex\"></a>  CRichEditCtrl::GetTextLengthEx  \n Calculates the length of the text in the rich edit control.  \n  \n```  \nlong GetTextLengthEx(\n    DWORD dwFlags,  \n    UINT uCodePage = -1) const;\n\n \n```  \n  \n### Parameters  \n `dwFlags`  \n Value specifying the method to be used in determining the text length. This member can be one or more of the values listed in the flags member of [GETTEXTLENGTHEX](http://msdn.microsoft.com/library/windows/desktop/bb787915) described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `uCodePage`  \n Code page for translation (CP_ACP for ANSI Code Page, 1200 for Unicode).  \n  \n### Return Value  \n The number of characters or bytes in the edit control. If incompatible flags were set in `dwFlags`, this member function returns `E_INVALIDARG`.  \n  \n### Remarks  \n `GetTextLengthEx` provides additional ways of determining the length of the text. It supports the Rich Edit 2.0 functionality. See [About Rich Edit Controls](http://msdn.microsoft.com/library/windows/desktop/bb787873) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]for more information.  \n  \n##  <a name=\"cricheditctrl__gettextmode\"></a>  CRichEditCtrl::GetTextMode  \n Retrieves the current text mode and undo level of a rich edit control.  \n  \n```  \nUINT GetTextMode() const;\n\n \n```  \n  \n### Return Value  \n A set of bit flags from the [TEXTMODE](http://msdn.microsoft.com/library/windows/desktop/bb774364) enumeration type, as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. The flags indicate the current text mode and undo level of the control.  \n  \n##  <a name=\"cricheditctrl__gettextrange\"></a>  CRichEditCtrl::GetTextRange  \n Gets the specified range of characters.  \n  \n```  \nint GetTextRange(\n    int nFirst,  \n    int nLast,  \n    CString& refString) const;\n\n \n```  \n  \n### Parameters  \n `nFirst`  \n The character position index immediately preceding the first character in the range.  \n  \n `nLast`  \n The character position immediately following the last character in the range.  \n  \n `refString`  \n A reference to a [CString](../../atl-mfc-shared/reference/cstringt-class.md) object that will receive the text.  \n  \n### Return Value  \n The number of characters copied, not including the terminating null character.  \n  \n### Remarks  \n For more information, see [EM_GETTEXTRANGE](http://msdn.microsoft.com/library/windows/desktop/bb774199) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `GetTextRange` supports the Rich Edit 2.0 functionality. See [About Rich Edit Controls](http://msdn.microsoft.com/library/windows/desktop/bb787873) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]for more information.  \n  \n##  <a name=\"cricheditctrl__getundoname\"></a>  CRichEditCtrl::GetUndoName  \n Retrieves the type of the next available action in the undo queue, if any.  \n  \n```  \nUNDONAMEID GetUndoName() const;\n\n \n```  \n  \n### Return Value  \n If an undo action is in the control's undo queue, `GetUndoName` returns the [UNDONAMEID](http://msdn.microsoft.com/library/windows/desktop/bb774365) enumeration type indicating the type of the next action in the queue. If the undo queue is empty, or if the undo action in the queue is of an unknown type, `GetUndoName` returns 0.  \n  \n### Remarks  \n The types of actions that can be undone or redone include typing, delete, drag-drop, cut, and paste operations. This information can be useful for applications that provide an extended user interface for Undo and Redo operations, such as a drop-down list box of actions that can be undone.  \n  \n##  <a name=\"cricheditctrl__getwordwrapmode\"></a>  CRichEditCtrl::GetWordWrapMode  \n Retrieves the current word wrapping and word breaking options for the rich edit control.  \n  \n```  \nUINT GetWordWrapMode() const;\n\n \n```  \n  \n### Return Value  \n The current word wrapping and word breaking options. These options are described in [EM_SETWORDWRAPMODE](http://msdn.microsoft.com/library/windows/desktop/bb774294) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Remarks  \n This member function is available only for Asian-language versions of the operating system.  \n  \n##  <a name=\"cricheditctrl__hideselection\"></a>  CRichEditCtrl::HideSelection  \n Changes the visibility of the selection.  \n  \n```  \nvoid HideSelection(\n    BOOL bHide,  \n    BOOL bPerm);\n```  \n  \n### Parameters  \n `bHide`  \n Indicates if the selection should be shown or hidden, **TRUE** to hide the selection.  \n  \n `bPerm`  \n Indicates if this change in visibility for the selection should be permanent.  \n  \n### Remarks  \n When `bPerm` is **TRUE**, it changes the `ECO_NOHIDESEL` option for this `CRichEditCtrl` object. For a brief description of this option, see [SetOptions](#cricheditctrl__setoptions). You can use this function to set all the options for this `CRichEditCtrl` object.  \n  \n For more information, see [EM_HIDESELECTION](http://msdn.microsoft.com/library/windows/desktop/bb774210) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#18](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_18.cpp)]  \n  \n##  <a name=\"cricheditctrl__limittext\"></a>  CRichEditCtrl::LimitText  \n Limits the length of the text that the user can enter into an edit control.  \n  \n```  \nvoid LimitText(long nChars = 0);\n```  \n  \n### Parameters  \n `nChars`  \n Specifies the length (in bytes) of the text that the user can enter. If this parameter is 0 (the default value), the text length is set to 64K bytes.  \n  \n### Remarks  \n Changing the text limit restricts only the text the user can enter. It has no effect on any text already in the edit control, nor does it affect the length of the text copied to the edit control by the [SetWindowText](../../mfc/reference/cwnd-class.md#cwnd__setwindowtext) member function in `CWnd`. If an application uses the `SetWindowText` function to place more text into an edit control than is specified in the call to `LimitText`, the user can delete any of the text within the edit control. However, the text limit will prevent the user from replacing the existing text with new text, unless deleting the current selection causes the text to fall below the text limit.  \n  \n> [!NOTE]\n>  For the text limit, each OLE item counts as a single character.  \n  \n For more information, see [EM_EXLIMITTEXT](http://msdn.microsoft.com/library/windows/desktop/bb788003) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#19](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_19.cpp)]  \n  \n##  <a name=\"cricheditctrl__linefromchar\"></a>  CRichEditCtrl::LineFromChar  \n Retrieves the line number of the line that contains the specified character index.  \n  \n```  \nlong LineFromChar(long nIndex) const;\n\n \n```  \n  \n### Parameters  \n `nIndex`  \n Contains the zero-based index value for the desired character in the text of the edit control, or contains –1. If `nIndex` is –1, it specifies the current line, that is, the line that contains the caret.  \n  \n### Return Value  \n The zero-based line number of the line containing the character index specified by `nIndex`. If `nIndex` is –1, the number of the line that contains the first character of the selection is returned. If there is no selection, the current line number is returned.  \n  \n### Remarks  \n A character index is the number of characters from the beginning of the rich edit control. For character counting, an OLE item is counted as a single character.  \n  \n For more information, see [EM_EXLINEFROMCHAR](http://msdn.microsoft.com/library/windows/desktop/bb788005) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#20](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_20.cpp)]  \n  \n##  <a name=\"cricheditctrl__lineindex\"></a>  CRichEditCtrl::LineIndex  \n Retrieves the character index of a line within this `CRichEditCtrl` object.  \n  \n```  \nint LineIndex(int nLine = -1) const;\n\n \n```  \n  \n### Parameters  \n `nLine`  \n Contains the index value for the desired line in the text of the edit control, or contains –1. If `nLine` is –1, it specifies the current line, that is, the line that contains the caret.  \n  \n### Return Value  \n The character index of the line specified in `nLine` or –1 if the specified line number is greater then the number of lines in the edit control.  \n  \n### Remarks  \n The character index is the number of characters from the beginning of the rich edit control to the specified line.  \n  \n For more information, see [EM_LINEINDEX](http://msdn.microsoft.com/library/windows/desktop/bb761611) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#21](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_21.cpp)]  \n  \n##  <a name=\"cricheditctrl__linelength\"></a>  CRichEditCtrl::LineLength  \n Retrieves the length of a line in a rich edit control.  \n  \n```  \nint LineLength(int nLine = -1) const;\n\n \n```  \n  \n### Parameters  \n `nLine`  \n Specifies the character index of a character in the line whose length is to be retrieved. If this parameter is –1, the length of the current line (the line that contains the caret) is returned, not including the length of any selected text within the line. When `LineLength` is called for a single-line edit control, this parameter is ignored.  \n  \n### Return Value  \n When `LineLength` is called for a multiple-line edit control, the return value is the length (in bytes) of the line specified by `nLine`. When `LineLength` is called for a single-line edit control, the return value is the length (in bytes) of the text in the edit control.  \n  \n### Remarks  \n Use the [LineIndex](#cricheditctrl__lineindex) member function to retrieve a character index for a given line number within this `CRichEditCtrl` object.  \n  \n For more information, see [EM_LINELENGTH](http://msdn.microsoft.com/library/windows/desktop/bb761613) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [LineIndex](#cricheditctrl__lineindex).  \n  \n##  <a name=\"cricheditctrl__linescroll\"></a>  CRichEditCtrl::LineScroll  \n Scrolls the text of a multiple-line edit control.  \n  \n```  \nvoid LineScroll(\n    int nLines,  \n    int nChars = 0);\n```  \n  \n### Parameters  \n `nLines`  \n Specifies the number of lines to scroll vertically.  \n  \n `nChars`  \n Specifies the number of character positions to scroll horizontally. This value is ignored if the rich edit control has either the **ES_RIGHT** or **ES_CENTER** style. [Edit styles](../../mfc/reference/edit-styles.md) are specified in [Create](#cricheditctrl__create).  \n  \n### Remarks  \n The edit control does not scroll vertically past the last line of text in the edit control. If the current line plus the number of lines specified by `nLines` exceeds the total number of lines in the edit control, the value is adjusted so that the last line of the edit control is scrolled to the top of the edit-control window.  \n  \n `LineScroll` can be used to scroll horizontally past the last character of any line.  \n  \n For more information, see [EM_LINESCROLL](http://msdn.microsoft.com/library/windows/desktop/bb761615) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [GetFirstVisibleLine](#cricheditctrl__getfirstvisibleline).  \n  \n##  <a name=\"cricheditctrl__paste\"></a>  CRichEditCtrl::Paste  \n Inserts the data from the Clipboard into the `CRichEditCtrl` at the insertion point, the location of the caret.  \n  \n```  \nvoid Paste();\n```  \n  \n### Remarks  \n Data is inserted only if the Clipboard contains data in a recognized format.  \n  \n For more information, see [WM_PASTE](http://msdn.microsoft.com/library/windows/desktop/ms649028) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#22](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_22.cpp)]  \n  \n##  <a name=\"cricheditctrl__pastespecial\"></a>  CRichEditCtrl::PasteSpecial  \n Pastes data in a specific Clipboard format into this `CRichEditCtrl` object.  \n  \n```  \nvoid PasteSpecial(\n    UINT nClipFormat,  \n    DWORD dvAspect = 0,  \n    HMETAFILE hMF = 0);\n```  \n  \n### Parameters  \n *nClipFormat*  \n Clipboard format to paste into this `CRichEditCtrl` object.  \n  \n *dvAspect*  \n Device aspect for the data to be retrieved from the Clipboard.  \n  \n *hMF*  \n Handle to the metafile containing the iconic view of the object to be pasted.  \n  \n### Remarks  \n The new material is inserted at the insertion point, the location of the caret.  \n  \n For more information, see [EM_PASTESPECIAL](http://msdn.microsoft.com/library/windows/desktop/bb774214) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#23](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_23.cpp)]  \n  \n##  <a name=\"cricheditctrl__posfromchar\"></a>  CRichEditCtrl::PosFromChar  \n Retrieves the client area coordinates of a specified character in an edit control.  \n  \n```  \nCPoint PosFromChar(UINT nChar) const;\n\n \n```  \n  \n### Parameters  \n `nChar`  \n The zero-based index of the character.  \n  \n### Return Value  \n The position of the character, (x, y). For a single-line edit control, the y-coordinate is always zero.  \n  \n### Remarks  \n For more information, see [EM_POSFROMCHAR](http://msdn.microsoft.com/library/windows/desktop/bb761631) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cricheditctrl__redo\"></a>  CRichEditCtrl::Redo  \n Redoes the next action in the control's redo queue.  \n  \n```  \nBOOL Redo();\n```  \n  \n### Return Value  \n Nonzero if successful; otherwise, 0.  \n  \n### Remarks  \n For more information, see [EM_REDO](http://msdn.microsoft.com/library/windows/desktop/bb774218) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cricheditctrl__replacesel\"></a>  CRichEditCtrl::ReplaceSel  \n Replaces the current selection in this `CRichEditCtrl` object with the specified text.  \n  \n```  \nvoid ReplaceSel(\n    LPCTSTR lpszNewText,  \n    BOOL bCanUndo = FALSE);\n```  \n  \n### Parameters  \n `lpszNewText`  \n Pointer to a null-terminated string containing the replacement text.  \n  \n `bCanUndo`  \n To specify that this function can be undone, set the value of this parameter to **TRUE**. The default value is **FALSE**.  \n  \n### Remarks  \n To replace all the text in this `CRichEditCtrl` object, use [CWnd::SetWindowText](../../mfc/reference/cwnd-class.md#cwnd__setwindowtext).  \n  \n If there is no current selection, the replacement text is inserted at the insertion point, that is, the current caret location.  \n  \n This function will format the inserted text with the existing character formatting. When replacing the entire range of text (by calling `SetSel`(0,-1) before calling `ReplaceSel`), there is an end of paragraph character that retains the previous paragraph's formatting, which in inherited by the newly inserted text.  \n  \n For more information, see [EM_REPLACESEL](http://msdn.microsoft.com/library/windows/desktop/bb761633) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [LineIndex](#cricheditctrl__lineindex).  \n  \n##  <a name=\"cricheditctrl__requestresize\"></a>  CRichEditCtrl::RequestResize  \n Forces this `CRichEditCtrl` object to send **EN_REQUESTRESIZE** notification messages to its parent window.  \n  \n```  \nvoid RequestResize();\n```  \n  \n### Remarks  \n This function is useful during [CWnd::OnSize](../../mfc/reference/cwnd-class.md#cwnd__onsize) processing for a bottomless `CRichEditCtrl` object.  \n  \n For more information, see the [EM_REQUESTRESIZE](http://msdn.microsoft.com/library/windows/desktop/bb774220) message and the **Bottomless Rich Edit Controls** section of [About Rich Edit Controls](http://msdn.microsoft.com/library/windows/desktop/bb787873) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cricheditctrl__setautourldetect\"></a>  CRichEditCtrl::SetAutoURLDetect  \n Sets the rich edit control to automatically detect a URL.  \n  \n```  \nBOOL SetAutoURLDetect(BOOL bEnable = TRUE);\n```  \n  \n### Parameters  \n `bEnable`  \n Specifies whether the control is set to automatically detect a URL. If **TRUE**, it is enabled. If **FALSE**, it is disabled.  \n  \n### Return Value  \n Zero if successful, otherwise nonzero. For example, the message may fail due to insufficient memory.  \n  \n### Remarks  \n If enabled, the rich edit control will scan the text to determine if it matches a standard URL format. For a list of these URL formats, see [EM_AUTOURLDETECT](http://msdn.microsoft.com/library/windows/desktop/bb787991) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n> [!NOTE]\n>  Do not set `SetAutoURLDetect` to **TRUE** if your edit control uses the **CFE_LINK** effect for text other than URLs. `SetAutoURLDetect` enables this effect for URLs and disables it for all other text. See [EN_LINK](http://msdn.microsoft.com/library/windows/desktop/bb787970) for more information about the **CFE_LINK** effect.  \n  \n##  <a name=\"cricheditctrl__setbackgroundcolor\"></a>  CRichEditCtrl::SetBackgroundColor  \n Sets the background color for this `CRichEditCtrl` object.  \n  \n```  \nCOLORREF SetBackgroundColor(\n    BOOL bSysColor,  \n    COLORREF cr);\n```  \n  \n### Parameters  \n `bSysColor`  \n Indicates if the background color should be set to the system value. If this value is **TRUE**, `cr` is ignored.  \n  \n `cr`  \n The requested background color. Used only if `bSysColor` is **FALSE**.  \n  \n### Return Value  \n The previous background color for this `CRichEditCtrl` object.  \n  \n### Remarks  \n The background color can be set to the system value or to a specified [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) value.  \n  \n For more information, see [EM_SETBKGNDCOLOR](http://msdn.microsoft.com/library/windows/desktop/bb774228) message and [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#24](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_24.cpp)]  \n  \n##  <a name=\"cricheditctrl__setdefaultcharformat\"></a>  CRichEditCtrl::SetDefaultCharFormat  \n Sets the character formatting attributes for new text in this `CRichEditCtrl` object.  \n  \n```  \nBOOL SetDefaultCharFormat(CHARFORMAT& cf);\n\n \nBOOL SetDefaultCharFormat(CHARFORMAT2& cf);\n```  \n  \n### Parameters  \n `cf`  \n In the first version, a pointer to a [CHARFORMAT](http://msdn.microsoft.com/library/windows/desktop/bb787881) structure containing the new default character formatting attributes.  \n  \n In the second version, a pointer to a [CHARFORMAT2](http://msdn.microsoft.com/library/windows/desktop/bb787883) structure, which is a Rich Edit 2.0 extension to the **CHARFORMAT** structure, containing the default character formatting attributes.  \n  \n### Return Value  \n Nonzero if successful; otherwise, 0.  \n  \n### Remarks  \n Only the attributes specified by the **dwMask** member of `cf` are changed by this function.  \n  \n For more information, see the [EM_SETCHARFORMAT](http://msdn.microsoft.com/library/windows/desktop/bb774230) message and the **CHARFORMAT** and **CHARFORMAT2** structures in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#25](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_25.cpp)]  \n  \n##  <a name=\"cricheditctrl__seteventmask\"></a>  CRichEditCtrl::SetEventMask  \n Sets the event mask for this `CRichEditCtrl` object.  \n  \n```  \nDWORD SetEventMask(DWORD dwEventMask);\n```  \n  \n### Parameters  \n *dwEventMask*  \n The new event mask for this `CRichEditCtrl` object.  \n  \n### Return Value  \n The previous event mask.  \n  \n### Remarks  \n The event mask specifies which notification messages the `CRichEditCtrl` object sends to its parent window.  \n  \n For more information, see [EM_SETEVENTMASK](http://msdn.microsoft.com/library/windows/desktop/bb774238) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#26](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_26.cpp)]  \n  \n##  <a name=\"cricheditctrl__setmodify\"></a>  CRichEditCtrl::SetModify  \n Sets or clears the modified flag for an edit control.  \n  \n```  \nvoid SetModify(BOOL bModified = TRUE);\n```  \n  \n### Parameters  \n `bModified`  \n A value of **TRUE** indicates that the text has been modified, and a value of **FALSE** indicates it is unmodified. By default, the modified flag is set.  \n  \n### Remarks  \n The modified flag indicates whether or not the text within the edit control has been modified. It is automatically set whenever the user changes the text. Its value can be retrieved with the [GetModify](#cricheditctrl__getmodify) member function.  \n  \n For more information, see [EM_SETMODIFY](http://msdn.microsoft.com/library/windows/desktop/bb761651) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [GetModify](#cricheditctrl__getmodify).  \n  \n##  <a name=\"cricheditctrl__setolecallback\"></a>  CRichEditCtrl::SetOLECallback  \n Gives this `CRichEditCtrl` object an **IRichEditOleCallback** object to use to access OLE-related resources and information.  \n  \n```  \nBOOL SetOLECallback(IRichEditOleCallback* pCallback);\n```  \n  \n### Parameters  \n `pCallback`  \n Pointer to an [IRichEditOleCallback](http://msdn.microsoft.com/library/windows/desktop/bb774308) object that this `CRichEditCtrl` object will use to get OLE-related resources and information.  \n  \n### Return Value  \n Nonzero if successful; otherwise, 0.  \n  \n### Remarks  \n This `CRichEditCtrl` object will call [IUnknown::AddRef](http://msdn.microsoft.com/library/windows/desktop/ms691379) to increment the usage count for the COM object specified by `pCallback`.  \n  \n For more information, see [EM_SETOLECALLBACK](http://msdn.microsoft.com/library/windows/desktop/bb774252) message and [IRichEditOleCallback](http://msdn.microsoft.com/library/windows/desktop/bb774308) interface in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cricheditctrl__setoptions\"></a>  CRichEditCtrl::SetOptions  \n Sets the options for this `CRichEditCtrl` object.  \n  \n```  \nvoid SetOptions(\n    WORD wOp,  \n    DWORD dwFlags);\n```  \n  \n### Parameters  \n *wOp*  \n Indicates the type of operation. One of the following values:  \n  \n- `ECOOP_SET` Set the options to those specified by `dwFlags`.  \n  \n- `ECOOP_OR` Combine the current options with those specified by `dwFlags`.  \n  \n- `ECOOP_AND` Retain only those current options that are also specified by `dwFlags`.  \n  \n- `ECOOP_XOR` Retain only those current options that are *not* specified by `dwFlags`.  \n  \n `dwFlags`  \n Rich edit options. The flag values are listed in the Remarks section.  \n  \n### Remarks  \n The options can be a combination of the following values:  \n  \n- `ECO_AUTOWORDSELECTION` Automatic word selection on double-click.  \n  \n- `ECO_AUTOVSCROLL` Automatically scrolls text to the right by 10 characters when the user types a character at the end of the line. When the user presses the ENTER key, the control scrolls all text back to position zero.  \n  \n- `ECO_AUTOHSCROLL` Automatically scrolls text up one page when the user presses the ENTER key on the last line.  \n  \n- `ECO_NOHIDESEL` Negates the default behavior for an edit control. The default behavior hides the selection when the control loses the input focus and shows the selection when the control receives the input focus. If you specify `ECO_NOHIDESEL`, the selected text is inverted, even if the control does not have the focus.  \n  \n- `ECO_READONLY` Prevents the user from typing or editing text in the edit control.  \n  \n- `ECO_WANTRETURN` Specifies that a carriage return be inserted when the user presses the ENTER key while entering text into a multiple-line rich edit control in a dialog box. If you do not specify this style, pressing the ENTER key sends a command to the rich edit control's parent window, which mimics clicking the parent window's default button (for example, the OK button in a dialog box). This style has no effect on a single-line edit control.  \n  \n- `ECO_SAVESEL` Preserves the selection when the control loses the focus. By default, the entire contents of the control are selected when it regains the focus.  \n  \n- `ECO_VERTICAL` Draws text and objects in a vertical direction. Available for Asian languages only.  \n  \n For more information, see [EM_SETOPTIONS](http://msdn.microsoft.com/library/windows/desktop/bb774254) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#27](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_27.cpp)]  \n  \n##  <a name=\"cricheditctrl__setparaformat\"></a>  CRichEditCtrl::SetParaFormat  \n Sets the paragraph formatting attributes for the current selection in this `CRichEditCtrl` object.  \n  \n```  \nBOOL SetParaFormat(PARAFORMAT& pf);\n\n \nBOOL SetParaFormat(PARAFORMAT2& pf);\n```  \n  \n### Parameters  \n `pf`  \n In the first version, a pointer to a [PARAFORMAT](http://msdn.microsoft.com/library/windows/desktop/bb787940) structure containing the new default paragraph formatting attributes.  \n  \n In the second version, a pointer to a [PARAFORMAT2](http://msdn.microsoft.com/library/windows/desktop/bb787942) structure, which is a Rich Edit 2.0 extension to the **PARAFORMAT** structure, holding the default character formatting attributes.  \n  \n### Return Value  \n Nonzero if successful; otherwise, 0.  \n  \n### Remarks  \n Only the attributes specified by the **dwMask** member of `pf` are changed by this function.  \n  \n For more information, see the [EM_SETPARAFORMAT](http://msdn.microsoft.com/library/windows/desktop/bb774276) message and the **PARAFORMAT** and **PARAFORMAT2** structures in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#28](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_28.cpp)]  \n  \n##  <a name=\"cricheditctrl__setpunctuation\"></a>  CRichEditCtrl::SetPunctuation  \n Sets the punctuation in a rich edit control.  \n  \n```  \nBOOL SetPunctuation(\n    UINT fType,  \n    PUNCTUATION* lpPunc);\n```  \n  \n### Parameters  \n `fType`  \n The punctuation flag. For a list of possible values, see the `fType` parameter for [EM_SETPUNCTUATION](http://msdn.microsoft.com/library/windows/desktop/bb774278) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `lpPunc`  \n A pointer to a [PUNCTUATION](http://msdn.microsoft.com/library/windows/desktop/bb787944) structure, as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Return Value  \n Nonzero if successful, otherwise 0.  \n  \n### Remarks  \n This member function is available for only Asian-language versions of the operating system.  \n  \n##  <a name=\"cricheditctrl__setreadonly\"></a>  CRichEditCtrl::SetReadOnly  \n Changes the `ECO_READONLY` option for this `CRichEditCtrl` object.  \n  \n```  \nBOOL SetReadOnly(BOOL bReadOnly = TRUE);\n```  \n  \n### Parameters  \n `bReadOnly`  \n Indicates if this `CRichEditCtrl` object should be read only.  \n  \n### Return Value  \n Nonzero if successful; otherwise, 0.  \n  \n### Remarks  \n For a brief description of this option, see [SetOptions](#cricheditctrl__setoptions). You can use this function to set all the options for this `CRichEditCtrl` object.  \n  \n For more information, see [EM_SETREADONLY](http://msdn.microsoft.com/library/windows/desktop/bb761655) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#29](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_29.cpp)]  \n  \n##  <a name=\"cricheditctrl__setrect\"></a>  CRichEditCtrl::SetRect  \n Sets the formatting rectangle for this `CRichEditCtrl` object.  \n  \n```  \nvoid SetRect(LPCRECT lpRect);\n```  \n  \n### Parameters  \n `lpRect`  \n [CRect](../../atl-mfc-shared/reference/crect-class.md) or pointer to a [RECT](../../mfc/reference/rect-structure1.md) that indicates the new bounds for the formatting rectangle.  \n  \n### Remarks  \n The formatting rectangle is the limiting rectangle for the text. The limiting rectangle is independent of the size of the rich edit control window. When this `CRichEditCtrl` object is first created, the formatting rectangle is the same size as the client area of the window. Use `SetRect` to make the formatting rectangle larger or smaller than the rich edit window.  \n  \n For more information, see [EM_SETRECT](http://msdn.microsoft.com/library/windows/desktop/bb761657) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#30](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_30.cpp)]  \n  \n##  <a name=\"cricheditctrl__setsel\"></a>  CRichEditCtrl::SetSel  \n Sets the selection within this `CRichEditCtrl` object.  \n  \n```  \nvoid SetSel(\n    long nStartChar,  \n    long nEndChar);\n\n \nvoid SetSel(\n    CHARRANGE& cr);\n```  \n  \n### Parameters  \n `nStartChar`  \n Zero-based index of the first character for the selection.  \n  \n `nEndChar`  \n Zero-based index of the last character for the selection.  \n  \n `cr`  \n [CHARRANGE](http://msdn.microsoft.com/library/windows/desktop/bb787885) structure which holds the bounds of the current selection.  \n  \n### Remarks  \n The two forms of this function provide alternate ways to set the bounds for the selection. Brief descriptions of these forms follow:  \n  \n- **SetSel(** `cr` **)** This form uses the **CHARRANGE** structure with its **cpMin** and **cpMax** members to set the bounds.  \n  \n- **SetSel(** `nStartChar` **,** `nEndChar` **)** This form use the parameters `nStartChar` and `nEndChar` to set the bounds.  \n  \n The caret is placed at the end of the selection indicated by the greater of the start ( **cpMin** or `nStartChar`) and end ( **cpMax** or `nEndChar`) indices. This function scrolls the contents of the `CRichEditCtrl` so that the caret is visible.  \n  \n To select all the text in this `CRichEditCtrl` object, call `SetSel` with a start index of 0 and an end index of – 1.  \n  \n For more information, see [EM_EXSETSEL](http://msdn.microsoft.com/library/windows/desktop/bb788007) message and [CHARRANGE](http://msdn.microsoft.com/library/windows/desktop/bb787885) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [GetSel](#cricheditctrl__getsel).  \n  \n##  <a name=\"cricheditctrl__setselectioncharformat\"></a>  CRichEditCtrl::SetSelectionCharFormat  \n Sets the character formatting attributes for the text in the current selection in this `CRichEditCtrl` object.  \n  \n```  \nBOOL SetSelectionCharFormat(CHARFORMAT& cf);\n\n \nBOOL SetSelectionCharFormat(CHARFORMAT2& cf);\n```  \n  \n### Parameters  \n `cf`  \n In the first version, a pointer to a [CHARFORMAT](http://msdn.microsoft.com/library/windows/desktop/bb787881) structure containing the new character formatting attributes for the current selection.  \n  \n In the second version, a pointer to a [CHARFORMAT2](http://msdn.microsoft.com/library/windows/desktop/bb787883) structure, which is a Rich Edit 2.0 extension to the **CHARFORMAT** structure, containing the new character formatting attributes for the current selection.  \n  \n### Return Value  \n Nonzero if successful; otherwise, 0.  \n  \n### Remarks  \n Only the attributes specified by the **dwMask** member of `cf` are changed by this function.  \n  \n For more information, see the [EM_SETCHARFORMAT](http://msdn.microsoft.com/library/windows/desktop/bb774230) and the **CHARFORMAT** and **CHARFORMAT2** structures in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#31](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_31.cpp)]  \n  \n##  <a name=\"cricheditctrl__settargetdevice\"></a>  CRichEditCtrl::SetTargetDevice  \n Sets the target device and line width used for WYSIWYG (what you see is what you get) formatting in this `CRichEditCtrl` object.  \n  \n```  \nBOOL SetTargetDevice(\n    HDC hDC,  \n    long lLineWidth);\n\n \nBOOL SetTargetDevice(\n    CDC& dc,  \n    long lLineWidth);\n```  \n  \n### Parameters  \n `hDC`  \n Handle to the device context for the new target device.  \n  \n *lLineWidth*  \n Line width to use for formatting.  \n  \n `dc`  \n [CDC](../../mfc/reference/cdc-class.md) for the new target device.  \n  \n### Return Value  \n Nonzero if successful; otherwise, 0.  \n  \n### Remarks  \n If this function is successful, the rich edit control owns the device context passed as a parameter. In that case, the calling function should not destroy the device context.  \n  \n For more information, see [EM_SETTARGETDEVICE](http://msdn.microsoft.com/library/windows/desktop/bb774282) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#32](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_32.cpp)]  \n  \n##  <a name=\"cricheditctrl__settextmode\"></a>  CRichEditCtrl::SetTextMode  \n Sets the text mode or undo and redo level for a rich edit control.  \n  \n```  \nBOOL SetTextMode(UINT fMode);\n```  \n  \n### Parameters  \n *fMode*  \n Specifies the new settings for the control's text mode and undo level parameters. For a list of the possible values, see the mode parameter for [EM_SETTEXTMODE](http://msdn.microsoft.com/library/windows/desktop/bb774286) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Return Value  \n Zero if successful, otherwise nonzero.  \n  \n### Remarks  \n For a description of the text modes, see **EM_SETTEXTMODE** in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n This member function fails if the control contains text. To make sure the control is empty, send a [WM_SETTEXT](http://msdn.microsoft.com/library/windows/desktop/ms632644) message with an empty string.  \n  \n##  <a name=\"cricheditctrl__setundolimit\"></a>  CRichEditCtrl::SetUndoLimit  \n Sets the maximum number of actions that can stored in the undo queue.  \n  \n```  \nUINT SetUndoLimit(UINT nLimit);\n```  \n  \n### Parameters  \n *nLimit*  \n Specifies the maximum number of actions that can be stored in the undo queue. Set to zero to disable Undo.  \n  \n### Return Value  \n The new maximum number of undo actions for the rich edit control.  \n  \n### Remarks  \n By default, the maximum number of actions in the undo queue is 100. If you increase this number, there must be enough available memory to accommodate the new number. For better performance, set the limit to the smallest possible value.  \n  \n##  <a name=\"cricheditctrl__setwordcharformat\"></a>  CRichEditCtrl::SetWordCharFormat  \n Sets the character formatting attributes for the currently selected word in this `CRichEditCtrl` object.  \n  \n```  \nBOOL SetWordCharFormat(CHARFORMAT& cf);\n\n \nBOOL SetWordCharFormat(CHARFORMAT2& cf);\n```  \n  \n### Parameters  \n `cf`  \n In the first version, a pointer to a [CHARFORMAT](http://msdn.microsoft.com/library/windows/desktop/bb787881) structure containing the new character formatting attributes for the currently selected word.  \n  \n In the second version, a pointer to a [CHARFORMAT2](http://msdn.microsoft.com/library/windows/desktop/bb787883) structure, which is a Rich Edit 2.0 extension to the **CHARFORMAT** structure, containing the new character formatting attributes for the currently selected word.  \n  \n### Return Value  \n Nonzero if successful; otherwise, 0.  \n  \n### Remarks  \n Only the attributes specified by the **dwMask** member of `cf` are changed by this function.  \n  \n For more information, see the [EM_SETCHARFORMAT](http://msdn.microsoft.com/library/windows/desktop/bb774230) message and the **CHARFORMAT** and **CHARFORMAT2** structures in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#33](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_33.cpp)]  \n  \n##  <a name=\"cricheditctrl__setwordwrapmode\"></a>  CRichEditCtrl::SetWordWrapMode  \n Sets the word-wrapping and word-breaking options for the rich edit control.  \n  \n```  \nUINT SetWordWrapMode(UINT uFlags) const;\n\n \n```  \n  \n### Parameters  \n `uFlags`  \n The options to set for word wrapping and word breaking. For a list of possible options, see [EM_SETWORDWRAPMODE](http://msdn.microsoft.com/library/windows/desktop/bb774294) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Return Value  \n The current word-wrapping and word-breaking options.  \n  \n### Remarks  \n This message is available only in Asian-language versions of the operating system.  \n  \n##  <a name=\"cricheditctrl__stopgrouptyping\"></a>  CRichEditCtrl::StopGroupTyping  \n Stops the control from collecting additional typing actions into the current undo action.  \n  \n```  \nvoid StopGroupTyping();\n```  \n  \n### Remarks  \n The control stores the next typing action, if any, into a new action in the undo queue.  \n  \n For more information, see [EM_STOPGROUPTYPING](http://msdn.microsoft.com/library/windows/desktop/bb774300) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cricheditctrl__streamin\"></a>  CRichEditCtrl::StreamIn  \n Replaces text in this `CRichEditCtrl` object with text from the specified input stream.  \n  \n```  \nlong StreamIn(\n    int nFormat,  \n    EDITSTREAM& es);\n```  \n  \n### Parameters  \n `nFormat`  \n Flags specifying the input data formats. See the Remarks section for more information.  \n  \n `es`  \n [EDITSTREAM](http://msdn.microsoft.com/library/windows/desktop/bb787891) structure specifying the input stream. See the Remarks section for more information.  \n  \n### Return Value  \n Number of characters read from the input stream.  \n  \n### Remarks  \n The value of `nFormat` must be one of the following:  \n  \n- `SF_TEXT` Indicates reading text only.  \n  \n- `SF_RTF` Indicates reading text and formatting.  \n  \n Either of these values can be combined with `SFF_SELECTION`. If `SFF_SELECTION` is specified, `StreamIn` replaces the current selection with the contents of the input stream. If it is not specified, `StreamIn` replaces the entire contents of this `CRichEditCtrl` object.  \n  \n In the **EDITSTREAM** parameter `es`, you specify a callback function that fills a buffer with text. This callback function is called repeatedly, until the input stream is exhausted.  \n  \n For more information, see [EM_STREAMIN](http://msdn.microsoft.com/library/windows/desktop/bb774302) message and [EDITSTREAM](http://msdn.microsoft.com/library/windows/desktop/bb787891) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#34](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_34.cpp)]  \n  \n [!code-cpp[NVC_MFC_CRichEditCtrl#35](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_35.cpp)]  \n  \n##  <a name=\"cricheditctrl__streamout\"></a>  CRichEditCtrl::StreamOut  \n Writes out the contents of this `CRichEditCtrl` object to the specified output stream.  \n  \n```  \nlong StreamOut(\n    int nFormat,  \n    EDITSTREAM& es);\n```  \n  \n### Parameters  \n `nFormat`  \n Flags specifying the output data formats. See the Remarks section for more information.  \n  \n `es`  \n [EDITSTREAM](http://msdn.microsoft.com/library/windows/desktop/bb787891) structure specifying the output stream. See the Remarks section for more information.  \n  \n### Return Value  \n Number of characters written to the output stream.  \n  \n### Remarks  \n The value of `nFormat` must be one of the following:  \n  \n- `SF_TEXT` Indicates writing text only.  \n  \n- `SF_RTF` Indicates writing text and formatting.  \n  \n- `SF_RTFNOOBJS` Indicates writing text and formatting, replacing OLE items with spaces.  \n  \n- `SF_TEXTIZED` Indicates writing text and formatting, with textual representations of OLE items.  \n  \n Any of these values can be combined with `SFF_SELECTION`. If `SFF_SELECTION` is specified, `StreamOut` writes out the current selection into the output stream. If it is not specified, `StreamOut` writes out the entire contents of this `CRichEditCtrl` object.  \n  \n In the **EDITSTREAM** parameter `es`, you specify a callback function which fills a buffer with text. This callback function is called repeatedly, until the output stream is exhausted.  \n  \n For more information, see [EM_STREAMOUT](http://msdn.microsoft.com/library/windows/desktop/bb774304) message and [EDITSTREAM](http://msdn.microsoft.com/library/windows/desktop/bb787891) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CRichEditCtrl#36](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_36.cpp)]  \n  \n [!code-cpp[NVC_MFC_CRichEditCtrl#37](../../mfc/reference/codesnippet/cpp/cricheditctrl-class_37.cpp)]  \n  \n##  <a name=\"cricheditctrl__undo\"></a>  CRichEditCtrl::Undo  \n Undoes the last operation in the rich edit control.  \n  \n```  \nBOOL Undo();\n```  \n  \n### Return Value  \n Nonzero if the undo operation is successful; otherwise, 0.  \n  \n### Remarks  \n An undo operation can also be undone. For example, you can restore deleted text with the first call to **Undo**. As long as there is no intervening edit operation, you can remove the text again with a second call to **Undo**.  \n  \n For more information, see [EM_UNDO](http://msdn.microsoft.com/library/windows/desktop/bb761670) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CanUndo](#cricheditctrl__canundo).  \n  \n## See Also  \n [MFC Sample WORDPAD](../../visual-cpp-samples.md)   \n [CWnd Class](../../mfc/reference/cwnd-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CEdit Class](../../mfc/reference/cedit-class.md)   \n [CRichEditView Class](../../mfc/reference/cricheditview-class.md)\n"}