{"nodes":[{"pos":[12,51],"content":"system_clock Structure | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"system_clock Structure | Microsoft Docs","pos":[0,39]}]},{"pos":[585,607],"content":"system_clock Structure","linkify":"system_clock Structure","nodes":[{"content":"system_clock Structure","pos":[0,22]}]},{"pos":[608,685],"content":"Represents a <bpt id=\"p1\">*</bpt>clock type<ept id=\"p1\">*</ept> that is based on the real-time clock of the system.","source":"Represents a *clock type* that is based on the real-time clock of the system."},{"pos":[694,700],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[747,754],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A <bpt id=\"p1\">*</bpt>clock type<ept id=\"p1\">*</ept> is used to obtain the current time as UTC.","pos":[758,815],"source":"A *clock type* is used to obtain the current time as UTC."},{"content":"The type embodies an instantiation of <bpt id=\"p1\">[</bpt>duration<ept id=\"p1\">](../standard-library/duration-class.md)</ept> and the class template <bpt id=\"p2\">[</bpt>time_point<ept id=\"p2\">](../standard-library/time-point-class.md)</ept>, and defines a static member function <ph id=\"ph1\">`now()`</ph> that returns the time.","pos":[816,1049],"source":" The type embodies an instantiation of [duration](../standard-library/duration-class.md) and the class template [time_point](../standard-library/time-point-class.md), and defines a static member function `now()` that returns the time."},{"pos":[1056,1227],"content":"A clock is <bpt id=\"p1\">*</bpt>monotonic<ept id=\"p1\">*</ept> if the value that is returned by a first call to <ph id=\"ph1\">`now()`</ph> is always less than or equal to the value that is returned by a subsequent call to <ph id=\"ph2\">`now()`</ph>.","source":"A clock is *monotonic* if the value that is returned by a first call to `now()` is always less than or equal to the value that is returned by a subsequent call to `now()`."},{"pos":[1234,1323],"content":"A clock is <bpt id=\"p1\">*</bpt>steady<ept id=\"p1\">*</ept> if it is <bpt id=\"p2\">*</bpt>monotonic<ept id=\"p2\">*</ept> and if the time between clock ticks is constant.","source":"A clock is *steady* if it is *monotonic* and if the time between clock ticks is constant."},{"pos":[1330,1416],"content":"In this implementation, a <ph id=\"ph1\">`system_clock`</ph> is synonymous with a <ph id=\"ph2\">`high_resolution_clock`</ph>.","source":"In this implementation, a `system_clock` is synonymous with a `high_resolution_clock`."},{"pos":[1425,1432],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1442,1457],"content":"Public Typedefs","linkify":"Public Typedefs","nodes":[{"content":"Public Typedefs","pos":[0,15]}]},{"content":"Name","pos":[1464,1468]},{"content":"Description","pos":[1469,1480]},{"pos":[1543,1581],"content":"A synonym for <ph id=\"ph1\">`duration&lt;rep, period&gt;`</ph>.","source":"A synonym for `duration<rep, period>`."},{"pos":[1609,1719],"content":"A synonym for the type that is used to represent the tick period in the contained instantiation of <ph id=\"ph1\">`duration`</ph>.","source":"A synonym for the type that is used to represent the tick period in the contained instantiation of `duration`."},{"pos":[1744,1864],"content":"A synonym for the type that is used to represent the number of clock ticks in the contained instantiation of <ph id=\"ph1\">`duration`</ph>.","source":"A synonym for the type that is used to represent the number of clock ticks in the contained instantiation of `duration`."},{"pos":[1896,2095],"content":"A synonym for <ph id=\"ph1\">`time_point&lt;Clock, duration&gt;`</ph>, where <ph id=\"ph2\">`Clock`</ph> is a synonym for either the clock type itself or another clock type that is based on the same epoch and has the same nested <ph id=\"ph3\">`duration`</ph> type.","source":"A synonym for `time_point<Clock, duration>`, where `Clock` is a synonym for either the clock type itself or another clock type that is based on the same epoch and has the same nested `duration` type."},{"pos":[2106,2120],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[2127,2131]},{"content":"Description","pos":[2132,2143]},{"pos":[2181,2250],"content":"<bpt id=\"p1\">[</bpt>system_clock::from_time_t Method<ept id=\"p1\">](#system_clock__from_time_t_method)</ept>","source":"[system_clock::from_time_t Method](#system_clock__from_time_t_method)"},{"content":"Static.","pos":[2251,2258]},{"content":"Returns a <ph id=\"ph1\">`time_point`</ph> that most closely approximates a specified time.","pos":[2259,2330],"source":" Returns a `time_point` that most closely approximates a specified time."},{"pos":[2335,2388],"content":"<bpt id=\"p1\">[</bpt>system_clock::now Method<ept id=\"p1\">](#system_clock__now_method)</ept>","source":"[system_clock::now Method](#system_clock__now_method)"},{"content":"Static.","pos":[2389,2396]},{"content":"Returns the current time.","pos":[2397,2422]},{"pos":[2427,2492],"content":"<bpt id=\"p1\">[</bpt>system_clock::to_time_t Method<ept id=\"p1\">](#system_clock__to_time_t_method)</ept>","source":"[system_clock::to_time_t Method](#system_clock__to_time_t_method)"},{"content":"Static.","pos":[2493,2500]},{"content":"Returns a <ph id=\"ph1\">`time_t`</ph> object that most closely approximates a specified <ph id=\"ph2\">`time_point`</ph>.","pos":[2501,2583],"source":" Returns a `time_t` object that most closely approximates a specified `time_point`."},{"pos":[2594,2610],"content":"Public Constants","linkify":"Public Constants","nodes":[{"content":"Public Constants","pos":[0,16]}]},{"content":"Name","pos":[2617,2621]},{"content":"Description","pos":[2622,2633]},{"pos":[2671,2746],"content":"<bpt id=\"p1\">[</bpt>system_clock::is_monotonic Constant<ept id=\"p1\">](#system_clock__is_monotonic_constant)</ept>","source":"[system_clock::is_monotonic Constant](#system_clock__is_monotonic_constant)"},{"content":"Specifies whether the clock type is monotonic.","pos":[2747,2793]},{"pos":[2798,2867],"content":"<bpt id=\"p1\">[</bpt>system_clock::is_steady Constant<ept id=\"p1\">](#system_clock__is_steady_constant)</ept>","source":"[system_clock::is_steady Constant](#system_clock__is_steady_constant)"},{"content":"Specifies whether the clock type is steady.","pos":[2868,2911]},{"pos":[2921,2933],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2937,2955],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> chrono","source":"**Header:** chrono"},{"pos":[2962,2988],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std::chrono","source":"**Namespace:** std::chrono"},{"pos":[2998,3079],"content":"<bpt id=\"p1\">&lt;a name=\"system_clock__from_time_t_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  system_clock::from_time_t Method","linkify":"<a name=\"system_clock__from_time_t_method\"></a>  system_clock::from_time_t Method","source":"<a name=\"system_clock__from_time_t_method\"></a>  system_clock::from_time_t Method"},{"pos":[3083,3234],"content":"Static method that returns a <bpt id=\"p1\">[</bpt>time_point<ept id=\"p1\">](../standard-library/time-point-class.md)</ept> that most closely approximates the time that is represented by <ph id=\"ph1\">`Tm`</ph>.","source":"Static method that returns a [time_point](../standard-library/time-point-class.md) that most closely approximates the time that is represented by `Tm`."},{"pos":[3312,3322],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">[</bpt>time_t<ept id=\"p1\">](../c-runtime-library/standard-types.md)</ept> object.","pos":[3334,3392],"source":" A [time_t](../c-runtime-library/standard-types.md) object."},{"pos":[3402,3489],"content":"<bpt id=\"p1\">&lt;a name=\"system_clock__is_monotonic_constant\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  system_clock::is_monotonic Constant","linkify":"<a name=\"system_clock__is_monotonic_constant\"></a>  system_clock::is_monotonic Constant","source":"<a name=\"system_clock__is_monotonic_constant\"></a>  system_clock::is_monotonic Constant"},{"content":"Static value that specifies whether the clock type is monotonic.","pos":[3493,3557]},{"pos":[3624,3636],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3640,3716],"content":"In this implementation, <ph id=\"ph1\">`system_clock::is_monotonic`</ph> always returns <ph id=\"ph2\">`false`</ph>.","source":"In this implementation, `system_clock::is_monotonic` always returns `false`."},{"pos":[3726,3733],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3737,3908],"content":"A clock is <bpt id=\"p1\">*</bpt>monotonic<ept id=\"p1\">*</ept> if the value that is returned by a first call to <ph id=\"ph1\">`now()`</ph> is always less than or equal to the value that is returned by a subsequent call to <ph id=\"ph2\">`now()`</ph>.","source":"A clock is *monotonic* if the value that is returned by a first call to `now()` is always less than or equal to the value that is returned by a subsequent call to `now()`."},{"pos":[3918,3999],"content":"<bpt id=\"p1\">&lt;a name=\"system_clock__is_steady_constant\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  system_clock::is_steady Constant","linkify":"<a name=\"system_clock__is_steady_constant\"></a>  system_clock::is_steady Constant","source":"<a name=\"system_clock__is_steady_constant\"></a>  system_clock::is_steady Constant"},{"pos":[4003,4066],"content":"Static value that specifies whether the clock type is <bpt id=\"p1\">*</bpt>steady<ept id=\"p1\">*</ept>.","source":"Static value that specifies whether the clock type is *steady*."},{"pos":[4130,4142],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4146,4219],"content":"In this implementation, <ph id=\"ph1\">`system_clock::is_steady`</ph> always returns <ph id=\"ph2\">`false`</ph>.","source":"In this implementation, `system_clock::is_steady` always returns `false`."},{"pos":[4229,4236],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4240,4367],"content":"A clock is <bpt id=\"p1\">*</bpt>steady<ept id=\"p1\">*</ept> if it is <bpt id=\"p2\">[</bpt>monotonic<ept id=\"p2\">](#system_clock__is_monotonic_constant)</ept> and if the time between clock ticks is constant.","source":"A clock is *steady* if it is [monotonic](#system_clock__is_monotonic_constant) and if the time between clock ticks is constant."},{"pos":[4377,4442],"content":"<bpt id=\"p1\">&lt;a name=\"system_clock__now_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  system_clock::now Method","linkify":"<a name=\"system_clock__now_method\"></a>  system_clock::now Method","source":"<a name=\"system_clock__now_method\"></a>  system_clock::now Method"},{"content":"Static method that returns the current time.","pos":[4446,4490]},{"pos":[4551,4563],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4567,4663],"content":"A <bpt id=\"p1\">[</bpt>time_point<ept id=\"p1\">](../standard-library/time-point-class.md)</ept> object that represents the current time.","source":"A [time_point](../standard-library/time-point-class.md) object that represents the current time."},{"pos":[4673,4750],"content":"<bpt id=\"p1\">&lt;a name=\"system_clock__to_time_t_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  system_clock::to_time_t Method","linkify":"<a name=\"system_clock__to_time_t_method\"></a>  system_clock::to_time_t Method","source":"<a name=\"system_clock__to_time_t_method\"></a>  system_clock::to_time_t Method"},{"pos":[4754,4902],"content":"Static method that returns a <bpt id=\"p1\">[</bpt>time_t<ept id=\"p1\">](../c-runtime-library/standard-types.md)</ept> that most closely approximates the time that is represented by <ph id=\"ph1\">`Time`</ph>.","source":"Static method that returns a [time_t](../c-runtime-library/standard-types.md) that most closely approximates the time that is represented by `Time`."},{"pos":[4987,4997],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">[</bpt>time_point<ept id=\"p1\">](../standard-library/time-point-class.md)</ept> object.","pos":[5011,5074],"source":" A [time_point](../standard-library/time-point-class.md) object."},{"pos":[5083,5091],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Header Files Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-header-files.md)</ept><ph id=\"ph1\"> </ph>","pos":[5095,5178],"source":"[Header Files Reference](../standard-library/cpp-standard-library-header-files.md) "},{"content":"<bpt id=\"p1\"> [</bpt><ph id=\"ph1\">\\&lt;</ph>chrono&gt;<ept id=\"p1\">](../standard-library/chrono.md)</ept><ph id=\"ph2\"> </ph>","pos":[5181,5225],"source":" [\\<chrono>](../standard-library/chrono.md) "},{"content":"<bpt id=\"p1\"> [</bpt>steady_clock struct<ept id=\"p1\">](../standard-library/steady-clock-struct.md)</ept>","pos":[5228,5294],"source":" [steady_clock struct](../standard-library/steady-clock-struct.md)"}],"content":"---\ntitle: \"system_clock Structure | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"chrono/std::chrono::system_clock\"\ndev_langs: \n  - \"C++\"\nms.assetid: a97bd46e-267a-4836-9f7d-af1f664e99ae\ncaps.latest.revision: 14\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# system_clock Structure\nRepresents a *clock type* that is based on the real-time clock of the system.  \n  \n## Syntax  \n  \n```  \nstruct system_clock;  \n```  \n  \n## Remarks  \n A *clock type* is used to obtain the current time as UTC. The type embodies an instantiation of [duration](../standard-library/duration-class.md) and the class template [time_point](../standard-library/time-point-class.md), and defines a static member function `now()` that returns the time.  \n  \n A clock is *monotonic* if the value that is returned by a first call to `now()` is always less than or equal to the value that is returned by a subsequent call to `now()`.  \n  \n A clock is *steady* if it is *monotonic* and if the time between clock ticks is constant.  \n  \n In this implementation, a `system_clock` is synonymous with a `high_resolution_clock`.  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`system_clock::duration`|A synonym for `duration<rep, period>`.|  \n|`system_clock::period`|A synonym for the type that is used to represent the tick period in the contained instantiation of `duration`.|  \n|`system_clock::rep`|A synonym for the type that is used to represent the number of clock ticks in the contained instantiation of `duration`.|  \n|`system_clock::time_point`|A synonym for `time_point<Clock, duration>`, where `Clock` is a synonym for either the clock type itself or another clock type that is based on the same epoch and has the same nested `duration` type.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[system_clock::from_time_t Method](#system_clock__from_time_t_method)|Static. Returns a `time_point` that most closely approximates a specified time.|  \n|[system_clock::now Method](#system_clock__now_method)|Static. Returns the current time.|  \n|[system_clock::to_time_t Method](#system_clock__to_time_t_method)|Static. Returns a `time_t` object that most closely approximates a specified `time_point`.|  \n  \n### Public Constants  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[system_clock::is_monotonic Constant](#system_clock__is_monotonic_constant)|Specifies whether the clock type is monotonic.|  \n|[system_clock::is_steady Constant](#system_clock__is_steady_constant)|Specifies whether the clock type is steady.|  \n  \n## Requirements  \n **Header:** chrono  \n  \n **Namespace:** std::chrono  \n  \n##  <a name=\"system_clock__from_time_t_method\"></a>  system_clock::from_time_t Method  \n Static method that returns a [time_point](../standard-library/time-point-class.md) that most closely approximates the time that is represented by `Tm`.  \n  \n```  \nstatic time_point from_time_t(time_t Tm) noexcept;  \n```  \n  \n### Parameters  \n `Tm`  \n A [time_t](../c-runtime-library/standard-types.md) object.  \n  \n##  <a name=\"system_clock__is_monotonic_constant\"></a>  system_clock::is_monotonic Constant  \n Static value that specifies whether the clock type is monotonic.  \n  \n```  \nstatic const bool is_monotonic = false;  \n```  \n  \n### Return Value  \n In this implementation, `system_clock::is_monotonic` always returns `false`.  \n  \n### Remarks  \n A clock is *monotonic* if the value that is returned by a first call to `now()` is always less than or equal to the value that is returned by a subsequent call to `now()`.  \n  \n##  <a name=\"system_clock__is_steady_constant\"></a>  system_clock::is_steady Constant  \n Static value that specifies whether the clock type is *steady*.  \n  \n```  \nstatic const bool is_steady = false;  \n```  \n  \n### Return Value  \n In this implementation, `system_clock::is_steady` always returns `false`.  \n  \n### Remarks  \n A clock is *steady* if it is [monotonic](#system_clock__is_monotonic_constant) and if the time between clock ticks is constant.  \n  \n##  <a name=\"system_clock__now_method\"></a>  system_clock::now Method  \n Static method that returns the current time.  \n  \n```  \nstatic time_point now() noexcept;  \n```  \n  \n### Return Value  \n A [time_point](../standard-library/time-point-class.md) object that represents the current time.  \n  \n##  <a name=\"system_clock__to_time_t_method\"></a>  system_clock::to_time_t Method  \n Static method that returns a [time_t](../c-runtime-library/standard-types.md) that most closely approximates the time that is represented by `Time`.  \n  \n```  \nstatic time_t to_time_t(const time_point& Time) noexcept;  \n```  \n  \n### Parameters  \n `Time`  \n A [time_point](../standard-library/time-point-class.md) object.  \n  \n## See Also  \n [Header Files Reference](../standard-library/cpp-standard-library-header-files.md)   \n [\\<chrono>](../standard-library/chrono.md)   \n [steady_clock struct](../standard-library/steady-clock-struct.md)\n"}