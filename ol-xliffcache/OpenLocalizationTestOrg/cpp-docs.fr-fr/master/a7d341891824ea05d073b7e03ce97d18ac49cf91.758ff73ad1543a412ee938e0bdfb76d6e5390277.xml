{"nodes":[{"pos":[12,51],"content":"critical_section Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"critical_section Class | Microsoft Docs","pos":[0,39]}]},{"content":"critical_section Class","pos":[640,662]},{"content":"A non-reentrant mutex which is explicitly aware of the Concurrency Runtime.","pos":[663,738]},{"content":"Syntax","pos":[747,753]},{"content":"Members","pos":[799,806]},{"content":"Public Typedefs","pos":[816,831]},{"content":"Name","pos":[838,842]},{"content":"Description","pos":[843,854]},{"pos":[913,956],"content":"A reference to a <ph id=\"ph1\">`critical_section`</ph> object.","source":"A reference to a `critical_section` object."},{"content":"Public Classes","pos":[967,981]},{"content":"Name","pos":[988,992]},{"content":"Description","pos":[993,1004]},{"content":"critical_section::scoped_lock Class","pos":[1043,1078]},{"pos":[1118,1181],"content":"An exception safe RAII wrapper for a <ph id=\"ph1\">`critical_section`</ph> object.","source":"An exception safe RAII wrapper for a `critical_section` object."},{"content":"Public Constructors","pos":[1192,1211]},{"content":"Name","pos":[1218,1222]},{"content":"Description","pos":[1223,1234]},{"content":"critical_section::critical_section Constructor","pos":[1273,1319]},{"content":"Constructs a new critical section.","pos":[1328,1362]},{"content":"critical_section::~critical_section Destructor","pos":[1368,1414]},{"content":"Destroys a critical section.","pos":[1423,1451]},{"content":"Public Methods","pos":[1462,1476]},{"content":"Name","pos":[1483,1487]},{"content":"Description","pos":[1488,1499]},{"content":"critical_section::lock Method","pos":[1538,1567]},{"content":"Acquires this critical section.","pos":[1576,1607]},{"content":"critical_section::native_handle Method","pos":[1613,1651]},{"content":"Returns a platform specific native handle, if one exists.","pos":[1669,1726]},{"content":"critical_section::try_lock Method","pos":[1732,1765]},{"content":"Tries to acquire the lock without blocking.","pos":[1778,1821]},{"content":"critical_section::try_lock_for Method","pos":[1827,1864]},{"content":"Tries to acquire the lock without blocking for a specific number of milliseconds.","pos":[1881,1962]},{"content":"critical_section::unlock Method","pos":[1968,1999]},{"content":"Unlocks the critical section.","pos":[2010,2039]},{"content":"Remarks","pos":[2049,2056]},{"pos":[2060,2181],"content":"For more information, see <bpt id=\"p1\">[</bpt>Synchronization Data Structures<ept id=\"p1\">](../../../parallel/concrt/synchronization-data-structures.md)</ept>.","source":"For more information, see [Synchronization Data Structures](../../../parallel/concrt/synchronization-data-structures.md)."},{"content":"Inheritance Hierarchy","pos":[2190,2211]},{"content":"Requirements","pos":[2242,2254]},{"pos":[2258,2278],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> concrt.h","source":"**Header:** concrt.h"},{"pos":[2285,2311],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[2342,2388],"content":"critical_section::critical_section Constructor"},{"content":"Constructs a new critical section.","pos":[2392,2426]},{"pos":[2490,2536],"content":"critical_section::~critical_section Destructor"},{"content":"Destroys a critical section.","pos":[2540,2568]},{"content":"Remarks","pos":[2612,2619]},{"content":"It is expected that the lock is no longer held when the destructor runs.","pos":[2623,2695]},{"content":"Allowing the critical section to destruct with the lock still held results in undefined behavior.","pos":[2696,2793]},{"pos":[2824,2853],"content":"critical_section::lock Method"},{"content":"Acquires this critical section.","pos":[2857,2888]},{"content":"Remarks","pos":[2924,2931]},{"pos":[2935,3106],"content":"It is often safer to utilize the <bpt id=\"p1\">[</bpt>scoped_lock<ept id=\"p1\">](#critical_section__scoped_lock_class)</ept> construct to acquire and release a <ph id=\"ph1\">`critical_section`</ph> object in an exception safe way.","source":"It is often safer to utilize the [scoped_lock](#critical_section__scoped_lock_class) construct to acquire and release a `critical_section` object in an exception safe way."},{"pos":[3113,3233],"content":"If the lock is already held by the calling context, an <bpt id=\"p1\">[</bpt>improper_lock<ept id=\"p1\">](improper-lock-class.md)</ept> exception will be thrown.","source":"If the lock is already held by the calling context, an [improper_lock](improper-lock-class.md) exception will be thrown."},{"pos":[3273,3311],"content":"critical_section::native_handle Method"},{"content":"Returns a platform specific native handle, if one exists.","pos":[3315,3372]},{"content":"Return Value","pos":[3431,3443]},{"content":"A reference to the critical section.","pos":[3447,3483]},{"content":"Remarks","pos":[3493,3500]},{"content":"A <ph id=\"ph1\">`critical_section`</ph> object is not associated with a platform specific native handle for the Windows operating system.","pos":[3504,3622],"source":"A `critical_section` object is not associated with a platform specific native handle for the Windows operating system."},{"content":"The method simply returns a reference to the object itself.","pos":[3623,3682]},{"pos":[3744,3779],"content":"critical_section::scoped_lock Class"},{"pos":[3783,3846],"content":"An exception safe RAII wrapper for a <ph id=\"ph1\">`critical_section`</ph> object.","source":"An exception safe RAII wrapper for a `critical_section` object."},{"pos":[3939,3993],"content":"critical_section::scoped_lock::scoped_lock Constructor"},{"content":"Constructs a <ph id=\"ph1\">`scoped_lock`</ph> object and acquires the <ph id=\"ph2\">`critical_section`</ph> object passed in the <ph id=\"ph3\">`_Critical_section`</ph> parameter.","pos":[3997,4118],"source":"Constructs a `scoped_lock` object and acquires the `critical_section` object passed in the `_Critical_section` parameter."},{"content":"If the critical section is held by another thread, this call will block.","pos":[4119,4191]},{"content":"Parameters","pos":[4281,4291]},{"content":"The critical section to lock.","pos":[4318,4347]},{"pos":[4408,4462],"content":"critical_section::scoped_lock::~scoped_lock Destructor"},{"pos":[4466,4560],"content":"Destroys a <ph id=\"ph1\">`scoped_lock`</ph> object and releases the critical section supplied in its constructor.","source":"Destroys a `scoped_lock` object and releases the critical section supplied in its constructor."},{"pos":[4624,4657],"content":"critical_section::try_lock Method"},{"content":"Tries to acquire the lock without blocking.","pos":[4661,4704]},{"content":"Return Value","pos":[4744,4756]},{"pos":[4760,4833],"content":"If the lock was acquired, the value <ph id=\"ph1\">`true`</ph>; otherwise, the value <ph id=\"ph2\">`false`</ph>.","source":"If the lock was acquired, the value `true`; otherwise, the value `false`."},{"pos":[4872,4909],"content":"critical_section::try_lock_for Method"},{"content":"Tries to acquire the lock without blocking for a specific number of milliseconds.","pos":[4913,4994]},{"content":"Parameters","pos":[5059,5069]},{"content":"The number of milliseconds to wait before timing out.","pos":[5087,5140]},{"content":"Return Value","pos":[5150,5162]},{"pos":[5166,5239],"content":"If the lock was acquired, the value <ph id=\"ph1\">`true`</ph>; otherwise, the value <ph id=\"ph2\">`false`</ph>.","source":"If the lock was acquired, the value `true`; otherwise, the value `false`."},{"pos":[5272,5303],"content":"critical_section::unlock Method"},{"content":"Unlocks the critical section.","pos":[5307,5336]},{"content":"See Also","pos":[5373,5381]},{"content":"concurrency Namespace","pos":[5386,5407]},{"content":"reader_writer_lock Class","pos":[5440,5464]}],"content":"---\ntitle: \"critical_section Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"concrt/concurrency::critical_section\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"critical_section class\"\nms.assetid: fa3c89d6-be5d-4d1b-bddb-8232814e6cf6\ncaps.latest.revision: 23\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# critical_section Class\nA non-reentrant mutex which is explicitly aware of the Concurrency Runtime.  \n  \n## Syntax  \n  \n```\nclass critical_section;\n```  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`native_handle_type`|A reference to a `critical_section` object.|  \n  \n### Public Classes  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[critical_section::scoped_lock Class](#critical_section__scoped_lock_class)|An exception safe RAII wrapper for a `critical_section` object.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[critical_section::critical_section Constructor](#ctor)|Constructs a new critical section.|  \n|[critical_section::~critical_section Destructor](#dtor)|Destroys a critical section.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[critical_section::lock Method](#lock)|Acquires this critical section.|  \n|[critical_section::native_handle Method](#native_handle)|Returns a platform specific native handle, if one exists.|  \n|[critical_section::try_lock Method](#try_lock)|Tries to acquire the lock without blocking.|  \n|[critical_section::try_lock_for Method](#try_lock_for)|Tries to acquire the lock without blocking for a specific number of milliseconds.|  \n|[critical_section::unlock Method](#unlock)|Unlocks the critical section.|  \n  \n## Remarks  \n For more information, see [Synchronization Data Structures](../../../parallel/concrt/synchronization-data-structures.md).  \n  \n## Inheritance Hierarchy  \n `critical_section`  \n  \n## Requirements  \n **Header:** concrt.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"ctor\"></a>  critical_section::critical_section Constructor  \n Constructs a new critical section.  \n  \n```\ncritical_section();\n```  \n  \n##  <a name=\"dtor\"></a>  critical_section::~critical_section Destructor  \n Destroys a critical section.  \n  \n```\n~critical_section();\n```  \n  \n### Remarks  \n It is expected that the lock is no longer held when the destructor runs. Allowing the critical section to destruct with the lock still held results in undefined behavior.  \n  \n##  <a name=\"lock\"></a>  critical_section::lock Method  \n Acquires this critical section.  \n  \n```\nvoid lock();\n```  \n  \n### Remarks  \n It is often safer to utilize the [scoped_lock](#critical_section__scoped_lock_class) construct to acquire and release a `critical_section` object in an exception safe way.  \n  \n If the lock is already held by the calling context, an [improper_lock](improper-lock-class.md) exception will be thrown.  \n  \n##  <a name=\"native_handle\"></a>  critical_section::native_handle Method  \n Returns a platform specific native handle, if one exists.  \n  \n```\nnative_handle_type native_handle();\n```  \n  \n### Return Value  \n A reference to the critical section.  \n  \n### Remarks  \n A `critical_section` object is not associated with a platform specific native handle for the Windows operating system. The method simply returns a reference to the object itself.  \n  \n##  <a name=\"critical_section__scoped_lock_class\"></a>  critical_section::scoped_lock Class  \n An exception safe RAII wrapper for a `critical_section` object.  \n  \n```\nclass scoped_lock;\n```  \n  \n##  <a name=\"critical_section__scoped_lock_ctor\"></a>  critical_section::scoped_lock::scoped_lock Constructor  \n Constructs a `scoped_lock` object and acquires the `critical_section` object passed in the `_Critical_section` parameter. If the critical section is held by another thread, this call will block.  \n  \n```\nexplicit _CRTIMP scoped_lock(critical_section& _Critical_section);\n```  \n  \n### Parameters  \n `_Critical_section`  \n The critical section to lock.  \n  \n##  <a name=\"critical_section__scoped_lock_dtor\"></a>  critical_section::scoped_lock::~scoped_lock Destructor  \n Destroys a `scoped_lock` object and releases the critical section supplied in its constructor.  \n  \n```\n~scoped_lock();\n```  \n  \n##  <a name=\"try_lock\"></a>  critical_section::try_lock Method  \n Tries to acquire the lock without blocking.  \n  \n```\nbool try_lock();\n```  \n  \n### Return Value  \n If the lock was acquired, the value `true`; otherwise, the value `false`.  \n  \n##  <a name=\"try_lock_for\"></a>  critical_section::try_lock_for Method  \n Tries to acquire the lock without blocking for a specific number of milliseconds.  \n  \n```\nbool try_lock_for(unsigned int _Timeout);\n```  \n  \n### Parameters  \n `_Timeout`  \n The number of milliseconds to wait before timing out.  \n  \n### Return Value  \n If the lock was acquired, the value `true`; otherwise, the value `false`.  \n  \n##  <a name=\"unlock\"></a>  critical_section::unlock Method  \n Unlocks the critical section.  \n  \n```\nvoid unlock();\n```  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)   \n [reader_writer_lock Class](reader-writer-lock-class.md)\n"}