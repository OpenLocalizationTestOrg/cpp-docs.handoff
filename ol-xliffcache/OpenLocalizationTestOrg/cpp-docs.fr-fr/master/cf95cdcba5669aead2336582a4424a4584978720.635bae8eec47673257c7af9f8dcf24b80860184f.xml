{"nodes":[{"pos":[12,48],"content":"const_cast Operator | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"const_cast Operator | Microsoft Docs","pos":[0,36]}]},{"content":"const_cast Operator","pos":[644,663]},{"pos":[664,745],"content":"Removes the <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`volatile`</ph>, and <bpt id=\"p2\">**</bpt>__unaligned<ept id=\"p2\">**</ept> attribute(s) from a class.","source":"Removes the **const**, `volatile`, and **__unaligned** attribute(s) from a class."},{"content":"Syntax","pos":[754,760]},{"content":"Remarks","pos":[842,849]},{"content":"A pointer to any object type or a pointer to a data member can be explicitly converted to a type that is identical except for the <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`volatile`</ph>, and <bpt id=\"p2\">**</bpt>__unaligned<ept id=\"p2\">**</ept> qualifiers.","pos":[853,1037],"source":"A pointer to any object type or a pointer to a data member can be explicitly converted to a type that is identical except for the **const**, `volatile`, and **__unaligned** qualifiers."},{"content":"For pointers and references, the result will refer to the original object.","pos":[1038,1112]},{"content":"For pointers to data members, the result will refer to the same member as the original (uncast) pointer to data member.","pos":[1113,1232]},{"content":"Depending on the type of the referenced object, a write operation through the resulting pointer, reference, or pointer to data member might produce undefined behavior.","pos":[1233,1400]},{"pos":[1407,1507],"content":"You cannot use the <ph id=\"ph1\">`const_cast`</ph> operator to directly override a constant variable's constant status.","source":"You cannot use the `const_cast` operator to directly override a constant variable's constant status."},{"pos":[1514,1620],"content":"The <ph id=\"ph1\">`const_cast`</ph> operator converts a null pointer value to the null pointer value of the destination type.","source":"The `const_cast` operator converts a null pointer value to the null pointer value of the destination type."},{"content":"Example","pos":[1629,1636]},{"content":"On the line containing the <ph id=\"ph1\">`const_cast`</ph>, the data type of the <ph id=\"ph2\">`this`</ph> pointer is <ph id=\"ph3\">`const CCTest *`</ph>.","pos":[2188,2285],"source":"On the line containing the `const_cast`, the data type of the `this` pointer is `const CCTest *`."},{"content":"The <ph id=\"ph1\">`const_cast`</ph> operator changes the data type of the <ph id=\"ph2\">`this`</ph> pointer to <ph id=\"ph3\">`CCTest *`</ph>, allowing the member <ph id=\"ph4\">`number`</ph> to be modified.","pos":[2286,2415],"source":" The `const_cast` operator changes the data type of the `this` pointer to `CCTest *`, allowing the member `number` to be modified."},{"content":"The cast lasts only for the remainder of the statement in which it appears.","pos":[2416,2491]},{"content":"See Also","pos":[2500,2508]},{"content":"Casting Operators","pos":[2513,2530]},{"content":"Keywords","pos":[2566,2574]}],"content":"---\ntitle: \"const_cast Operator | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"const_cast\"\n  - \"const_cast_cpp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"const_cast keyword [C++]\"\nms.assetid: 4d8bb203-ef33-4a10-9f9f-c64d4fbc1687\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# const_cast Operator\nRemoves the **const**, `volatile`, and **__unaligned** attribute(s) from a class.  \n  \n## Syntax  \n  \n```  \n  \nconst_cast <   \ntype-id  \n > (   \nexpression  \n )  \n  \n```  \n  \n## Remarks  \n A pointer to any object type or a pointer to a data member can be explicitly converted to a type that is identical except for the **const**, `volatile`, and **__unaligned** qualifiers. For pointers and references, the result will refer to the original object. For pointers to data members, the result will refer to the same member as the original (uncast) pointer to data member. Depending on the type of the referenced object, a write operation through the resulting pointer, reference, or pointer to data member might produce undefined behavior.  \n  \n You cannot use the `const_cast` operator to directly override a constant variable's constant status.  \n  \n The `const_cast` operator converts a null pointer value to the null pointer value of the destination type.  \n  \n## Example  \n  \n```  \n// expre_const_cast_Operator.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nusing namespace std;  \nclass CCTest {  \npublic:  \n   void setNumber( int );  \n   void printNumber() const;  \nprivate:  \n   int number;  \n};  \n  \nvoid CCTest::setNumber( int num ) { number = num; }  \n  \nvoid CCTest::printNumber() const {  \n   cout << \"\\nBefore: \" << number;  \n   const_cast< CCTest * >( this )->number--;  \n   cout << \"\\nAfter: \" << number;  \n}  \n  \nint main() {  \n   CCTest X;  \n   X.setNumber( 8 );  \n   X.printNumber();  \n}  \n```  \n  \n On the line containing the `const_cast`, the data type of the `this` pointer is `const CCTest *`. The `const_cast` operator changes the data type of the `this` pointer to `CCTest *`, allowing the member `number` to be modified. The cast lasts only for the remainder of the statement in which it appears.  \n  \n## See Also  \n [Casting Operators](../cpp/casting-operators.md)   \n [Keywords](../cpp/keywords-cpp.md)"}