{"nodes":[{"pos":[12,63],"content":"-J (Default char Type Is unsigned) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"-J (Default char Type Is unsigned) | Microsoft Docs","pos":[0,51]}]},{"content":"/J (Default char Type Is unsigned)","pos":[879,913]},{"pos":[914,1058],"content":"Changes the default <ph id=\"ph1\">`char`</ph> type from <ph id=\"ph2\">`signed char`</ph> to <ph id=\"ph3\">`unsigned char`</ph>, and the <ph id=\"ph4\">`char`</ph> type is zero-extended when it is widened to an <ph id=\"ph5\">`int`</ph> type.","source":"Changes the default `char` type from `signed char` to `unsigned char`, and the `char` type is zero-extended when it is widened to an `int` type."},{"content":"Syntax","pos":[1067,1073]},{"content":"Remarks","pos":[1102,1109]},{"pos":[1113,1272],"content":"If a <ph id=\"ph1\">`char`</ph> value is explicitly declared as <ph id=\"ph2\">`signed`</ph>, the <bpt id=\"p1\">**</bpt>/J<ept id=\"p1\">**</ept> option does not affect it, and the value is sign-extended when it is widened to an <ph id=\"ph3\">`int`</ph> type.","source":"If a `char` value is explicitly declared as `signed`, the **/J** option does not affect it, and the value is sign-extended when it is widened to an `int` type."},{"pos":[1279,1420],"content":"The <bpt id=\"p1\">**</bpt>/J<ept id=\"p1\">**</ept> option defines <ph id=\"ph1\">`_CHAR_UNSIGNED`</ph>, which is used with <ph id=\"ph2\">`#ifndef`</ph> in the LIMITS.h file to define the range of the default <ph id=\"ph3\">`char`</ph> type.","source":"The **/J** option defines `_CHAR_UNSIGNED`, which is used with `#ifndef` in the LIMITS.h file to define the range of the default `char` type."},{"content":"ANSI C and C++ do not require a specific implementation of the <ph id=\"ph1\">`char`</ph> type.","pos":[1427,1502],"source":"ANSI C and C++ do not require a specific implementation of the `char` type."},{"content":"This option is useful when you are working with character data that will eventually be translated into a language other than English.","pos":[1503,1636]},{"pos":[1644,1865],"content":"[!NOTE]\n If you use this compiler option with ATL/MFC, an error might be generated. Although you could disable this error by defining `_ATL_ALLOW_CHAR_UNSIGNED`, this workaround is not supported and may not always work.","leadings":["","> "],"nodes":[{"content":" If you use this compiler option with ATL/MFC, an error might be generated. Although you could disable this error by defining `_ATL_ALLOW_CHAR_UNSIGNED`, this workaround is not supported and may not always work.","pos":[8,219],"nodes":[{"content":"If you use this compiler option with ATL/MFC, an error might be generated.","pos":[1,75]},{"content":"Although you could disable this error by defining <ph id=\"ph1\">`_ATL_ALLOW_CHAR_UNSIGNED`</ph>, this workaround is not supported and may not always work.","pos":[76,211],"source":" Although you could disable this error by defining `_ATL_ALLOW_CHAR_UNSIGNED`, this workaround is not supported and may not always work."}]}]},{"content":"To set this compiler option in the Visual Studio development environment","pos":[1875,1947]},{"pos":[1957,2053],"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, open the shortcut menu for the project and then choose <bpt id=\"p2\">**</bpt>Properties<ept id=\"p2\">**</ept>.","source":"In **Solution Explorer**, open the shortcut menu for the project and then choose **Properties**."},{"pos":[2063,2212],"content":"In the project <bpt id=\"p1\">**</bpt>Property Pages<ept id=\"p1\">**</ept> dialog box, in the left pane under <bpt id=\"p2\">**</bpt>Configuration Properties<ept id=\"p2\">**</ept>, expand <bpt id=\"p3\">**</bpt>C/C++<ept id=\"p3\">**</ept> and then select <bpt id=\"p4\">**</bpt>Command Line<ept id=\"p4\">**</ept>.","source":"In the project **Property Pages** dialog box, in the left pane under **Configuration Properties**, expand **C/C++** and then select **Command Line**."},{"pos":[2222,2293],"content":"In the <bpt id=\"p1\">**</bpt>Additional Options<ept id=\"p1\">**</ept> pane, specify the <bpt id=\"p2\">**</bpt>/J<ept id=\"p2\">**</ept> compiler option.","source":"In the **Additional Options** pane, specify the **/J** compiler option."},{"content":"To set this compiler option programmatically","pos":[2303,2347]},{"content":"See &lt;xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.DefaultCharIsUnsigned%2A&gt;.","pos":[2357,2449],"source":"See <xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.DefaultCharIsUnsigned%2A>."},{"content":"See Also","pos":[2458,2466]},{"content":"Compiler Options","pos":[2471,2487]},{"content":"Setting Compiler Options","pos":[2537,2561]},{"content":"Working with Project Properties","pos":[2619,2650]}],"content":"---\ntitle: \"-J (Default char Type Is unsigned) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"VC.Project.VCCLCompilerTool.DefaultCharIsUnsigned\"\n  - \"VC.Project.VCCLWCECompilerTool.DefaultCharIsUnsigned\"\n  - \"/j\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"defaults, char type\"\n  - \"char data type\"\n  - \"-J compiler option [C++]\"\n  - \"/J compiler option [C++]\"\n  - \"J compiler option [C++]\"\n  - \"default char type is unsigned\"\nms.assetid: 50973667-6638-491e-9c41-bff73acae19f\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# /J (Default char Type Is unsigned)\nChanges the default `char` type from `signed char` to `unsigned char`, and the `char` type is zero-extended when it is widened to an `int` type.  \n  \n## Syntax  \n  \n```  \n/J  \n```  \n  \n## Remarks  \n If a `char` value is explicitly declared as `signed`, the **/J** option does not affect it, and the value is sign-extended when it is widened to an `int` type.  \n  \n The **/J** option defines `_CHAR_UNSIGNED`, which is used with `#ifndef` in the LIMITS.h file to define the range of the default `char` type.  \n  \n ANSI C and C++ do not require a specific implementation of the `char` type. This option is useful when you are working with character data that will eventually be translated into a language other than English.  \n  \n> [!NOTE]\n>  If you use this compiler option with ATL/MFC, an error might be generated. Although you could disable this error by defining `_ATL_ALLOW_CHAR_UNSIGNED`, this workaround is not supported and may not always work.  \n  \n### To set this compiler option in the Visual Studio development environment  \n  \n1.  In **Solution Explorer**, open the shortcut menu for the project and then choose **Properties**.  \n  \n2.  In the project **Property Pages** dialog box, in the left pane under **Configuration Properties**, expand **C/C++** and then select **Command Line**.  \n  \n3.  In the **Additional Options** pane, specify the **/J** compiler option.  \n  \n### To set this compiler option programmatically  \n  \n-   See <xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.DefaultCharIsUnsigned%2A>.  \n  \n## See Also  \n [Compiler Options](../../build/reference/compiler-options.md)   \n [Setting Compiler Options](../../build/reference/setting-compiler-options.md)   \n [Working with Project Properties](../../ide/working-with-project-properties.md)"}