{"nodes":[{"pos":[12,75],"content":"Debugging and Error Reporting Global Functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Debugging and Error Reporting Global Functions | Microsoft Docs","pos":[0,63]}]},{"content":"Debugging and Error Reporting Global Functions","pos":[619,665]},{"content":"These functions provide useful debugging and trace facilities.","pos":[666,728]},{"content":"AtlHresultFromLastError","pos":[750,773]},{"pos":[847,909],"content":"Returns a <ph id=\"ph1\">`GetLastError`</ph> error code in the form of an HRESULT.","source":"Returns a `GetLastError` error code in the form of an HRESULT."},{"content":"AtlHresultFromWin32","pos":[915,934]},{"content":"Converts a Win32 error code into an HRESULT.","pos":[1008,1052]},{"content":"AtlReportError","pos":[1058,1072]},{"pos":[1146,1206],"content":"Sets up <bpt id=\"p1\">**</bpt>IErrorInfo<ept id=\"p1\">**</ept> to provide error details to a client.","source":"Sets up **IErrorInfo** to provide error details to a client."},{"content":"AtlThrow","pos":[1212,1220]},{"pos":[1294,1319],"content":"Throws a <ph id=\"ph1\">`CAtlException`</ph>.","source":"Throws a `CAtlException`."},{"content":"AtlThrowLastWin32","pos":[1325,1342]},{"pos":[1416,1513],"content":"Call this function to signal an error based on the result of the Windows function <ph id=\"ph1\">`GetLastError`</ph>.","source":"Call this function to signal an error based on the result of the Windows function `GetLastError`."},{"pos":[1564,1587],"content":"AtlHresultFromLastError"},{"content":"Returns the calling thread's last-error code value in the form of an HRESULT.","pos":[1591,1668]},{"content":"Remarks","pos":[1726,1733]},{"pos":[1763,1904],"content":"calls <ph id=\"ph1\">`GetLastError`</ph> to obtain the last error and returns the error after converting it to an HRESULT using the <bpt id=\"p1\">**</bpt>HRESULT_FROM_WIN32<ept id=\"p1\">**</ept> macro.","source":" calls `GetLastError` to obtain the last error and returns the error after converting it to an HRESULT using the **HRESULT_FROM_WIN32** macro."},{"pos":[1950,1969],"content":"AtlHresultFromWin32"},{"content":"Converts a Win32 error code into an HRESULT.","pos":[1973,2017]},{"content":"Parameters","pos":[2081,2091]},{"content":"error","pos":[2096,2101]},{"content":"The error value to convert.","pos":[2106,2133]},{"content":"Remarks","pos":[2143,2150]},{"pos":[2154,2238],"content":"Converts a Win32 error code into an HRESULT, using the macro <bpt id=\"p1\">**</bpt>HRESULT_FROM_WIN32<ept id=\"p1\">**</ept>.","source":"Converts a Win32 error code into an HRESULT, using the macro **HRESULT_FROM_WIN32**."},{"pos":[2246,2429],"content":"[!NOTE]\n Instead of using **HRESULT_FROM_WIN32(GetLastError())**, use the function [AtlHresultFromLastError](http://msdn.microsoft.com/library/74530d7d-3c91-484c-acf3-aff755715d66).","leadings":["","> "],"nodes":[{"content":"Instead of using <bpt id=\"p1\">**</bpt>HRESULT_FROM_WIN32(GetLastError())<ept id=\"p1\">**</ept>, use the function <bpt id=\"p2\">[</bpt>AtlHresultFromLastError<ept id=\"p2\">](http://msdn.microsoft.com/library/74530d7d-3c91-484c-acf3-aff755715d66)</ept>.","pos":[9,181],"source":" Instead of using **HRESULT_FROM_WIN32(GetLastError())**, use the function [AtlHresultFromLastError](http://msdn.microsoft.com/library/74530d7d-3c91-484c-acf3-aff755715d66)."}]},{"pos":[2470,2484],"content":"AtlReportError"},{"pos":[2488,2577],"content":"Sets up the <ph id=\"ph1\">`IErrorInfo`</ph> interface to provide error information to clients of the object.","source":"Sets up the `IErrorInfo` interface to provide error information to clients of the object."},{"content":"Parameters","pos":[3674,3684]},{"content":"[in] The CLSID of the object reporting the error.","pos":[3699,3748]},{"content":"[in] The string describing the error.","pos":[3769,3806]},{"content":"The Unicode versions specify that <ph id=\"ph1\">`lpszDesc`</ph> is of type <bpt id=\"p1\">**</bpt>LPCOLESTR<ept id=\"p1\">**</ept>; the ANSI version specifies a type of <ph id=\"ph2\">`LPCSTR`</ph>.","pos":[3807,3924],"source":" The Unicode versions specify that `lpszDesc` is of type **LPCOLESTR**; the ANSI version specifies a type of `LPCSTR`."},{"content":"[in] The IID of the interface defining the error or <ph id=\"ph1\">`GUID_NULL`</ph> if the error is defined by the operating system.","pos":[3940,4052],"source":" [in] The IID of the interface defining the error or `GUID_NULL` if the error is defined by the operating system."},{"content":"[in] The <ph id=\"ph1\">`HRESULT`</ph> you want returned to the caller.","pos":[4069,4120],"source":" [in] The `HRESULT` you want returned to the caller."},{"content":"[in] The resource identifier where the error description string is stored.","pos":[4136,4210]},{"content":"This value should lie between 0x0200 and 0xFFFF, inclusively.","pos":[4211,4272]},{"content":"In debug builds, an <bpt id=\"p1\">**</bpt>ASSERT<ept id=\"p1\">**</ept> will result if <ph id=\"ph1\">`nID`</ph> does not index a valid string.","pos":[4273,4355],"source":" In debug builds, an **ASSERT** will result if `nID` does not index a valid string."},{"content":"In release builds, the error description string will be set to \"Unknown Error.\"","pos":[4356,4435]},{"content":"[in] The help context identifier for the error.","pos":[4456,4503]},{"content":"[in] The path and name of the help file describing the error.","pos":[4528,4589]},{"content":"[in] The handle to the resource.","pos":[4607,4639]},{"content":"By default, this parameter is <bpt id=\"p1\">**</bpt>__AtlBaseModuleModule::GetResourceInstance<ept id=\"p1\">**</ept>, where <bpt id=\"p2\">**</bpt>__AtlBaseModuleModule<ept id=\"p2\">**</ept> is the global instance of <bpt id=\"p3\">[</bpt>CAtlBaseModule<ept id=\"p3\">](../../atl/reference/catlbasemodule-class.md)</ept> or a class derived from it.","pos":[4640,4865],"source":" By default, this parameter is **__AtlBaseModuleModule::GetResourceInstance**, where **__AtlBaseModuleModule** is the global instance of [CAtlBaseModule](../../atl/reference/catlbasemodule-class.md) or a class derived from it."},{"content":"Return Value","pos":[4875,4887]},{"content":"If the <ph id=\"ph1\">`hRes`</ph> parameter is nonzero, returns the value of <ph id=\"ph2\">`hRes`</ph>.","pos":[4891,4955],"source":"If the `hRes` parameter is nonzero, returns the value of `hRes`."},{"content":"If <ph id=\"ph1\">`hRes`</ph> is zero, then the first four versions of <ph id=\"ph2\">`AtlReportError`</ph> return <ph id=\"ph3\">`DISP_E_EXCEPTION`</ph>.","pos":[4956,5050],"source":" If `hRes` is zero, then the first four versions of `AtlReportError` return `DISP_E_EXCEPTION`."},{"content":"The last two versions return the result of the macro <bpt id=\"p1\">**</bpt>MAKE_HRESULT( 1, FACILITY_ITF,<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nID`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept>.","pos":[5051,5151],"source":" The last two versions return the result of the macro **MAKE_HRESULT( 1, FACILITY_ITF,** `nID` **)**."},{"content":"Remarks","pos":[5161,5168]},{"content":"The string <bpt id=\"p1\">*</bpt>lpszDesc<ept id=\"p1\">*</ept> is used as the text description of the error.","pos":[5172,5239],"source":"The string *lpszDesc* is used as the text description of the error."},{"content":"When the client receives the <ph id=\"ph1\">`hRes`</ph> you return from <ph id=\"ph2\">`AtlReportError`</ph>, the client can access the <bpt id=\"p1\">**</bpt>IErrorInfo<ept id=\"p1\">**</ept> structure for details about the error.","pos":[5240,5389],"source":" When the client receives the `hRes` you return from `AtlReportError`, the client can access the **IErrorInfo** structure for details about the error."},{"content":"Example","pos":[5399,5406]},{"pos":[5421,5435],"content":"NVC_ATL_COM#52"},{"pos":[5525,5815],"content":"[!CAUTION]\n Do not use `AtlReportError` in C++ catch handlers. Some overrides of these functions use the ATL string conversion macros internally, which in turn use the `_alloca` function internally. Using `AtlReportError` in a C++ catch handler can cause exceptions in C++ catch handlers.","leadings":["","> "],"nodes":[{"content":" Do not use `AtlReportError` in C++ catch handlers. Some overrides of these functions use the ATL string conversion macros internally, which in turn use the `_alloca` function internally. Using `AtlReportError` in a C++ catch handler can cause exceptions in C++ catch handlers.","pos":[11,288],"nodes":[{"content":"Do not use <ph id=\"ph1\">`AtlReportError`</ph> in C++ catch handlers.","pos":[1,51],"source":" Do not use `AtlReportError` in C++ catch handlers."},{"content":"Some overrides of these functions use the ATL string conversion macros internally, which in turn use the <ph id=\"ph1\">`_alloca`</ph> function internally.","pos":[52,187],"source":" Some overrides of these functions use the ATL string conversion macros internally, which in turn use the `_alloca` function internally."},{"content":"Using <ph id=\"ph1\">`AtlReportError`</ph> in a C++ catch handler can cause exceptions in C++ catch handlers.","pos":[188,277],"source":" Using `AtlReportError` in a C++ catch handler can cause exceptions in C++ catch handlers."}]}]},{"pos":[5850,5858],"content":"AtlThrow"},{"pos":[5862,5933],"content":"Call this function to signal an error based on a <ph id=\"ph1\">`HRESULT`</ph> status code.","source":"Call this function to signal an error based on a `HRESULT` status code."},{"content":"Parameters","pos":[6011,6021]},{"content":"Standard HRESULT value.","pos":[6033,6056]},{"content":"Remarks","pos":[6066,6073]},{"content":"This function is used by ATL and MFC code in the event of an error condition.","pos":[6077,6154]},{"content":"It can also be called from your own code.","pos":[6155,6196]},{"content":"The default implementation of this function depends on the definition of the symbol <bpt id=\"p1\">**</bpt>_ATL_NO_EXCEPTIONS<ept id=\"p1\">**</ept> and on the type of project, MFC or ATL.","pos":[6197,6343],"source":" The default implementation of this function depends on the definition of the symbol **_ATL_NO_EXCEPTIONS** and on the type of project, MFC or ATL."},{"content":"In all cases, this function traces the HRESULT to the debugger.","pos":[6350,6413]},{"content":"In Visual Studio 2015 Update 3 and later, this function is attributed __declspec(noreturn) to avoid spurious SAL warnings.","pos":[6420,6542]},{"pos":[6549,6797],"content":"If <bpt id=\"p1\">**</bpt>_ATL_NO_EXCEPTIONS<ept id=\"p1\">**</ept> is not defined in an MFC project, this function throws a <bpt id=\"p2\">[</bpt>CMemoryException<ept id=\"p2\">](../../mfc/reference/cmemoryexception-class.md)</ept> or a <bpt id=\"p3\">[</bpt>COleException<ept id=\"p3\">](../../mfc/reference/coleexception-class.md)</ept> based on the value of the HRESULT.","source":"If **_ATL_NO_EXCEPTIONS** is not defined in an MFC project, this function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md) or a [COleException](../../mfc/reference/coleexception-class.md) based on the value of the HRESULT."},{"pos":[6804,6946],"content":"If <bpt id=\"p1\">**</bpt>_ATL_NO_EXCEPTIONS<ept id=\"p1\">**</ept> is not defined in an ATL project, the function throws a <bpt id=\"p2\">[</bpt>CAtlException<ept id=\"p2\">](../../atl/reference/catlexception-class.md)</ept>.","source":"If **_ATL_NO_EXCEPTIONS** is not defined in an ATL project, the function throws a [CAtlException](../../atl/reference/catlexception-class.md)."},{"pos":[6953,7065],"content":"If <bpt id=\"p1\">**</bpt>_ATL_NO_EXCEPTIONS<ept id=\"p1\">**</ept> is defined, the function causes an assertion failure instead of throwing an exception.","source":"If **_ATL_NO_EXCEPTIONS** is defined, the function causes an assertion failure instead of throwing an exception."},{"content":"For ATL projects, it is possible to provide your own implementation of this function to be used by ATL in the event of a failure.","pos":[7072,7201]},{"content":"To do this, define your own function with the same signature as <ph id=\"ph1\">`AtlThrow`</ph> and #define <ph id=\"ph2\">`AtlThrow`</ph> to be the name of your function.","pos":[7202,7332],"source":" To do this, define your own function with the same signature as `AtlThrow` and #define `AtlThrow` to be the name of your function."},{"content":"This must be done before including atlexcept.h (which means that it must be done prior to including any ATL headers since atlbase.h includes atlexcept.h).","pos":[7333,7487]},{"content":"Attribute your function <ph id=\"ph1\">`__declspec(noreturn)`</ph> to avoid spurious SAL warnings.","pos":[7488,7566],"source":" Attribute your function `__declspec(noreturn)` to avoid spurious SAL warnings."},{"content":"Example","pos":[7576,7583]},{"pos":[7598,7618],"content":"NVC_ATL_Windowing#95"},{"pos":[7742,7759],"content":"AtlThrowLastWin32"},{"pos":[7763,7860],"content":"Call this function to signal an error based on the result of the Windows function <ph id=\"ph1\">`GetLastError`</ph>.","source":"Call this function to signal an error based on the result of the Windows function `GetLastError`."},{"content":"Remarks","pos":[7916,7923]},{"pos":[7927,7993],"content":"This function traces the result of <ph id=\"ph1\">`GetLastError`</ph> to the debugger.","source":"This function traces the result of `GetLastError` to the debugger."},{"pos":[8000,8260],"content":"If <bpt id=\"p1\">**</bpt>_ATL_NO_EXCEPTIONS<ept id=\"p1\">**</ept> is not defined in an MFC project, this function throws a <bpt id=\"p2\">[</bpt>CMemoryException<ept id=\"p2\">](../../mfc/reference/cmemoryexception-class.md)</ept> or a <bpt id=\"p3\">[</bpt>COleException<ept id=\"p3\">](../../mfc/reference/coleexception-class.md)</ept> based on the value returned by <ph id=\"ph1\">`GetLastError`</ph>.","source":"If **_ATL_NO_EXCEPTIONS** is not defined in an MFC project, this function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md) or a [COleException](../../mfc/reference/coleexception-class.md) based on the value returned by `GetLastError`."},{"pos":[8267,8409],"content":"If <bpt id=\"p1\">**</bpt>_ATL_NO_EXCEPTIONS<ept id=\"p1\">**</ept> is not defined in an ATL project, the function throws a <bpt id=\"p2\">[</bpt>CAtlException<ept id=\"p2\">](../../atl/reference/catlexception-class.md)</ept>.","source":"If **_ATL_NO_EXCEPTIONS** is not defined in an ATL project, the function throws a [CAtlException](../../atl/reference/catlexception-class.md)."},{"pos":[8416,8528],"content":"If <bpt id=\"p1\">**</bpt>_ATL_NO_EXCEPTIONS<ept id=\"p1\">**</ept> is defined, the function causes an assertion failure instead of throwing an exception.","source":"If **_ATL_NO_EXCEPTIONS** is defined, the function causes an assertion failure instead of throwing an exception."},{"content":"See Also","pos":[8537,8545]},{"content":"Functions","pos":[8550,8559]},{"content":"Debugging and Error Reporting Macros","pos":[8604,8640]}],"content":"---\ntitle: \"Debugging and Error Reporting Global Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"functions [ATL], error reporting\"\nms.assetid: 11339c02-98cd-428d-b3b9-7deeb155a6a3\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Debugging and Error Reporting Global Functions\nThese functions provide useful debugging and trace facilities.  \n  \n|||  \n|-|-|  \n|[AtlHresultFromLastError](http://msdn.microsoft.com/library/74530d7d-3c91-484c-acf3-aff755715d66)|Returns a `GetLastError` error code in the form of an HRESULT.|  \n|[AtlHresultFromWin32](http://msdn.microsoft.com/library/63add2dd-274c-4e72-a98c-040b93413a2f)|Converts a Win32 error code into an HRESULT.|  \n|[AtlReportError](http://msdn.microsoft.com/library/86b046a5-ea18-4ecf-9aab-40fc1eab847c)|Sets up **IErrorInfo** to provide error details to a client.|  \n|[AtlThrow](http://msdn.microsoft.com/library/2bd111da-8170-488d-914a-c9bf6b6765f7)|Throws a `CAtlException`.|  \n|[AtlThrowLastWin32](http://msdn.microsoft.com/library/8bce8e56-c7cd-4ebb-8c62-80ebc63a3d07)|Call this function to signal an error based on the result of the Windows function `GetLastError`.|  \n  \n##  <a name=\"atlhresultfromlasterror\"></a>  AtlHresultFromLastError  \n Returns the calling thread's last-error code value in the form of an HRESULT.  \n  \n```\nHRESULT AtlHresultFromLastError();\n```  \n  \n### Remarks  \n `AtlHresultFromLastError` calls `GetLastError` to obtain the last error and returns the error after converting it to an HRESULT using the **HRESULT_FROM_WIN32** macro.  \n  \n##  <a name=\"atlhresultfromwin32\"></a>  AtlHresultFromWin32  \n Converts a Win32 error code into an HRESULT.  \n  \n```\nAtlHresultFromWin32{\n    DWORD error\n };\n```  \n  \n### Parameters  \n *error*  \n The error value to convert.  \n  \n### Remarks  \n Converts a Win32 error code into an HRESULT, using the macro **HRESULT_FROM_WIN32**.  \n  \n> [!NOTE]\n>  Instead of using **HRESULT_FROM_WIN32(GetLastError())**, use the function [AtlHresultFromLastError](http://msdn.microsoft.com/library/74530d7d-3c91-484c-acf3-aff755715d66).  \n  \n##  <a name=\"atlreporterror\"></a>  AtlReportError  \n Sets up the `IErrorInfo` interface to provide error information to clients of the object.  \n  \n```\nHRESULT     WINAPI\n    AtlReportError(\n const CLSID& clsid,\n    LPCOLESTR lpszDesc,\n    const IID& iid = GUID_NULL,\n    HRESULT hRes = 0);\n\n    HRESULT WINAPI\n    AtlReportError(\n const CLSID& clsid,\n    LPCOLESTR lpszDesc,\n    DWORD dwHelpID,\n    LPCOLESTR lpszHelpFile,\n    const IID& iid = GUID_NULL,\n    HRESULT hRes = 0);\n\n    HRESULT WINAPI\n    AtlReportError(\n const CLSID& clsid,\n    LPCSTR lpszDesc,\n    const IID& iid = GUID_NULL,\n    HRESULT hRes = 0);\n\n    HRESULT WINAPI\n    AtlReportError(\n const CLSID& clsid,\n    LPCSTR lpszDesc,\n    DWORD dwHelpID,\n    LPCSTR lpszHelpFile,\n    const IID& iid = GUID_NULL,\n    HRESULT hRes = 0);\n\n    HRESULT WINAPI\n    AtlReportError(\n const CLSID& clsid,\n    UINT nID,\n    const IID& iid = GUID_NULL,\n    HRESULT hRes = 0,\n    HINSTANCE hInst = _AtlBaseModule.GetResourceInstance());\n\n    HRESULT WINAPI\n    AtlReportError(\n const CLSID& clsid,\n    UINT nID,\n    DWORD dwHelpID,\n    LPCOLESTR lpszHelpFile,\n    const IID& iid = GUID_NULL,\n    HRESULT hRes = 0,\n    HINSTANCE hInst = _AtlBaseModule.GetResourceInstance());\n```  \n  \n### Parameters  \n `clsid`  \n [in] The CLSID of the object reporting the error.  \n  \n `lpszDesc`  \n [in] The string describing the error. The Unicode versions specify that `lpszDesc` is of type **LPCOLESTR**; the ANSI version specifies a type of `LPCSTR`.  \n  \n `iid`  \n [in] The IID of the interface defining the error or `GUID_NULL` if the error is defined by the operating system.  \n  \n `hRes`  \n [in] The `HRESULT` you want returned to the caller.  \n  \n `nID`  \n [in] The resource identifier where the error description string is stored. This value should lie between 0x0200 and 0xFFFF, inclusively. In debug builds, an **ASSERT** will result if `nID` does not index a valid string. In release builds, the error description string will be set to \"Unknown Error.\"  \n  \n `dwHelpID`  \n [in] The help context identifier for the error.  \n  \n `lpszHelpFile`  \n [in] The path and name of the help file describing the error.  \n  \n `hInst`  \n [in] The handle to the resource. By default, this parameter is **__AtlBaseModuleModule::GetResourceInstance**, where **__AtlBaseModuleModule** is the global instance of [CAtlBaseModule](../../atl/reference/catlbasemodule-class.md) or a class derived from it.  \n  \n### Return Value  \n If the `hRes` parameter is nonzero, returns the value of `hRes`. If `hRes` is zero, then the first four versions of `AtlReportError` return `DISP_E_EXCEPTION`. The last two versions return the result of the macro **MAKE_HRESULT( 1, FACILITY_ITF,** `nID` **)**.  \n  \n### Remarks  \n The string *lpszDesc* is used as the text description of the error. When the client receives the `hRes` you return from `AtlReportError`, the client can access the **IErrorInfo** structure for details about the error.  \n  \n### Example  \n [!code-cpp[NVC_ATL_COM#52](../../atl/codesnippet/cpp/debugging-and-error-reporting-global-functions_1.cpp)]  \n  \n> [!CAUTION]\n>  Do not use `AtlReportError` in C++ catch handlers. Some overrides of these functions use the ATL string conversion macros internally, which in turn use the `_alloca` function internally. Using `AtlReportError` in a C++ catch handler can cause exceptions in C++ catch handlers.  \n  \n##  <a name=\"atlthrow\"></a>  AtlThrow  \n Call this function to signal an error based on a `HRESULT` status code.  \n  \n```\n__declspec(noreturn) inline void AtlThrow(HRESULT hr);\n```  \n  \n### Parameters  \n `hr`  \n Standard HRESULT value.  \n  \n### Remarks  \n This function is used by ATL and MFC code in the event of an error condition. It can also be called from your own code. The default implementation of this function depends on the definition of the symbol **_ATL_NO_EXCEPTIONS** and on the type of project, MFC or ATL.  \n  \n In all cases, this function traces the HRESULT to the debugger.  \n  \n In Visual Studio 2015 Update 3 and later, this function is attributed __declspec(noreturn) to avoid spurious SAL warnings.  \n  \n If **_ATL_NO_EXCEPTIONS** is not defined in an MFC project, this function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md) or a [COleException](../../mfc/reference/coleexception-class.md) based on the value of the HRESULT.  \n  \n If **_ATL_NO_EXCEPTIONS** is not defined in an ATL project, the function throws a [CAtlException](../../atl/reference/catlexception-class.md).  \n  \n If **_ATL_NO_EXCEPTIONS** is defined, the function causes an assertion failure instead of throwing an exception.  \n  \n For ATL projects, it is possible to provide your own implementation of this function to be used by ATL in the event of a failure. To do this, define your own function with the same signature as `AtlThrow` and #define `AtlThrow` to be the name of your function. This must be done before including atlexcept.h (which means that it must be done prior to including any ATL headers since atlbase.h includes atlexcept.h). Attribute your function `__declspec(noreturn)` to avoid spurious SAL warnings.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#95](../../atl/codesnippet/cpp/debugging-and-error-reporting-global-functions_2.h)]  \n  \n##  <a name=\"atlthrowlastwin32\"></a>  AtlThrowLastWin32  \n Call this function to signal an error based on the result of the Windows function `GetLastError`.  \n  \n```\ninline void AtlThrowLastWin32();\n```  \n  \n### Remarks  \n This function traces the result of `GetLastError` to the debugger.  \n  \n If **_ATL_NO_EXCEPTIONS** is not defined in an MFC project, this function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md) or a [COleException](../../mfc/reference/coleexception-class.md) based on the value returned by `GetLastError`.  \n  \n If **_ATL_NO_EXCEPTIONS** is not defined in an ATL project, the function throws a [CAtlException](../../atl/reference/catlexception-class.md).  \n  \n If **_ATL_NO_EXCEPTIONS** is defined, the function causes an assertion failure instead of throwing an exception.  \n  \n## See Also  \n [Functions](../../atl/reference/atl-functions.md)   \n [Debugging and Error Reporting Macros](../../atl/reference/debugging-and-error-reporting-macros.md)\n\n\n\n\n\n\n\n\n\n"}