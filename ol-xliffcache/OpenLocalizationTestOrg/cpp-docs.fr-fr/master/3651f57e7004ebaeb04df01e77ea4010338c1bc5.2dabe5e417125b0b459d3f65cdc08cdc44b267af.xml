{"nodes":[{"pos":[12,74],"content":"Explicit Specialization of Function Templates | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Explicit Specialization of Function Templates | Microsoft Docs","pos":[0,62]}]},{"content":"Explicit Specialization of Function Templates","pos":[814,859]},{"content":"With a function template, you can define special behavior for a specific type by providing an explicit specialization (override) of the function template for that type.","pos":[860,1028]},{"content":"For example:","pos":[1029,1041]},{"content":"This declaration enables you to define a different function for <bpt id=\"p1\">**</bpt>double<ept id=\"p1\">**</ept> variables.","pos":[1109,1194],"source":"This declaration enables you to define a different function for **double** variables."},{"content":"Like non-template functions, standard type conversions (such as promoting a variable of type <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>double<ept id=\"p2\">**</ept>) are applied.","pos":[1195,1325],"source":" Like non-template functions, standard type conversions (such as promoting a variable of type **float** to **double**) are applied."},{"content":"Example","pos":[1334,1341]},{"content":"See Also","pos":[1745,1753]},{"content":"Function Templates","pos":[1758,1776]}],"content":"---\ntitle: \"Explicit Specialization of Function Templates | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"overriding, functions\"\n  - \"function templates, specialization\"\n  - \"explicit specialization of function templates\"\n  - \"declaring functions, specialization of function template\"\n  - \"specialization of function templates\"\nms.assetid: eb0fcb73-eaed-42a1-9b83-14b055a34bf8\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Explicit Specialization of Function Templates\nWith a function template, you can define special behavior for a specific type by providing an explicit specialization (override) of the function template for that type. For example:  \n  \n```  \ntemplate<> void MySwap(double a, double b);  \n```  \n  \n This declaration enables you to define a different function for **double** variables. Like non-template functions, standard type conversions (such as promoting a variable of type **float** to **double**) are applied.  \n  \n## Example  \n  \n```  \n// explicit_specialization.cpp  \ntemplate<class T> void f(T t)  \n{  \n};  \n  \n// Explicit specialization of f with 'char' with the  \n// template argument explicitly specified:  \n//  \ntemplate<> void f<char>(char c)  \n{  \n}  \n  \n// Explicit specialization of f with 'double' with the  \n// template argument deduced:  \n//  \ntemplate<> void f(double d)  \n{  \n}  \nint main()  \n{  \n}  \n```  \n  \n## See Also  \n [Function Templates](../cpp/function-templates.md)"}