{"nodes":[{"pos":[12,52],"content":"IRowsetChangeImpl Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"IRowsetChangeImpl Class | Microsoft Docs","pos":[0,40]}]},{"content":"IRowsetChangeImpl Class","pos":[751,774]},{"pos":[775,928],"content":"The OLE DB Templates implementation of the <bpt id=\"p1\">[</bpt>IRowsetChange<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/ms715790.aspx)</ept> interface in the OLE DB specification.","source":"The OLE DB Templates implementation of the [IRowsetChange](https://msdn.microsoft.com/en-us/library/ms715790.aspx) interface in the OLE DB specification."},{"content":"Syntax","pos":[937,943]},{"content":"Parameters","pos":[1227,1237]},{"content":"A class derived from <ph id=\"ph1\">`IRowsetChangeImpl`</ph>.","pos":[1248,1289],"source":" A class derived from `IRowsetChangeImpl`."},{"content":"The user record.","pos":[1309,1325]},{"content":"The base class for the interface, such as <ph id=\"ph1\">`IRowsetChange`</ph>.","pos":[1351,1409],"source":" The base class for the interface, such as `IRowsetChange`."},{"content":"The storage unit for the row handle.","pos":[1430,1466]},{"content":"The storage unit for all row handles held by the provider.","pos":[1487,1545]},{"content":"Members","pos":[1554,1561]},{"content":"Interface Methods (Used with IRowsetChange)","pos":[1571,1614]},{"content":"DeleteRows","pos":[1636,1646]},{"content":"Deletes rows from the rowset.","pos":[1698,1727]},{"content":"InsertRow","pos":[1733,1742]},{"content":"Inserts a row into the rowset.","pos":[1793,1823]},{"content":"SetData","pos":[1829,1836]},{"content":"Sets data values in one or more columns.","pos":[1885,1925]},{"content":"Implementation Method (Callback)","pos":[1936,1968]},{"content":"FlushData","pos":[1990,1999]},{"content":"Overidden by provider to commit data to its store.","pos":[2050,2100]},{"content":"Remarks","pos":[2110,2117]},{"content":"This interface is responsible for immediate write operations to a data store.","pos":[2121,2198]},{"content":"\"Immediate\" means that when the end user (the person using the consumer) makes any changes, those changes are immediately transmitted to the data store (and cannot be undone).","pos":[2199,2374]},{"pos":[2401,2550],"content":"implements the OLE DB <ph id=\"ph1\">`IRowsetChange`</ph> interface, which enables updating of values of columns in existing rows, deleting rows, and inserting new rows.","source":" implements the OLE DB `IRowsetChange` interface, which enables updating of values of columns in existing rows, deleting rows, and inserting new rows."},{"pos":[2557,2666],"content":"The OLE DB Templates implementation supports all the base methods (<ph id=\"ph1\">`SetData`</ph>, <ph id=\"ph2\">`InsertRow`</ph>, and <ph id=\"ph3\">`DeleteRows`</ph>).","source":"The OLE DB Templates implementation supports all the base methods (`SetData`, `InsertRow`, and `DeleteRows`)."},{"pos":[2674,2804],"content":"[!IMPORTANT]\n It is strongly recommended that you read the following documentation BEFORE attempting to implement your provider:","leadings":["","> "],"nodes":[{"content":"It is strongly recommended that you read the following documentation BEFORE attempting to implement your provider:","pos":[14,128]}]},{"content":"Creating an Updatable Provider","pos":[2815,2845]},{"pos":[2908,2956],"content":"Chapter 6 of the <bpt id=\"p1\">*</bpt>OLE DB Programmer's Reference<ept id=\"p1\">*</ept>","source":"Chapter 6 of the *OLE DB Programmer's Reference*"},{"pos":[2966,3035],"content":"Also see how the <ph id=\"ph1\">`RUpdateRowset`</ph> class is used in the UpdatePV sample","source":"Also see how the `RUpdateRowset` class is used in the UpdatePV sample"},{"content":"Requirements","pos":[3044,3056]},{"pos":[3060,3079],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atldb.h","source":"**Header:** atldb.h"},{"content":"See Also","pos":[3088,3096]},{"content":"OLE DB Provider Templates","pos":[3101,3126]},{"content":"OLE DB Provider Template Architecture","pos":[3184,3221]}],"content":"---\ntitle: \"IRowsetChangeImpl Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"ATL::IRowsetChangeImpl\"\n  - \"IRowsetChangeImpl\"\n  - \"ATL.IRowsetChangeImpl\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"providers, updatable\"\n  - \"updatable providers, immediate update\"\n  - \"IRowsetChangeImpl class\"\nms.assetid: 1e9fee15-ed9e-4387-af8f-215569beca6c\ncaps.latest.revision: 11\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# IRowsetChangeImpl Class\nThe OLE DB Templates implementation of the [IRowsetChange](https://msdn.microsoft.com/en-us/library/ms715790.aspx) interface in the OLE DB specification.  \n  \n## Syntax  \n  \n```  \ntemplate <  \n   class T,   \n   class Storage,   \n   class BaseInterface = IRowsetChange,   \n   class RowClass = CSimpleRow,   \n   class MapClass = CAtlMap < RowClass::KeyType, RowClass* >   \n>  \nclass ATL_NO_VTABLE IRowsetChangeImpl : public BaseInterface  \n```  \n  \n#### Parameters  \n `T`  \n A class derived from `IRowsetChangeImpl`.  \n  \n `Storage`  \n The user record.  \n  \n `BaseInterface`  \n The base class for the interface, such as `IRowsetChange`.  \n  \n `RowClass`  \n The storage unit for the row handle.  \n  \n `MapClass`  \n The storage unit for all row handles held by the provider.  \n  \n## Members  \n  \n### Interface Methods (Used with IRowsetChange)  \n  \n|||  \n|-|-|  \n|[DeleteRows](../../data/oledb/irowsetchangeimpl-deleterows.md)|Deletes rows from the rowset.|  \n|[InsertRow](../../data/oledb/irowsetchangeimpl-insertrow.md)|Inserts a row into the rowset.|  \n|[SetData](../../data/oledb/irowsetchangeimpl-setdata.md)|Sets data values in one or more columns.|  \n  \n### Implementation Method (Callback)  \n  \n|||  \n|-|-|  \n|[FlushData](../../data/oledb/irowsetchangeimpl-flushdata.md)|Overidden by provider to commit data to its store.|  \n  \n## Remarks  \n This interface is responsible for immediate write operations to a data store. \"Immediate\" means that when the end user (the person using the consumer) makes any changes, those changes are immediately transmitted to the data store (and cannot be undone).  \n  \n `IRowsetChangeImpl` implements the OLE DB `IRowsetChange` interface, which enables updating of values of columns in existing rows, deleting rows, and inserting new rows.  \n  \n The OLE DB Templates implementation supports all the base methods (`SetData`, `InsertRow`, and `DeleteRows`).  \n  \n> [!IMPORTANT]\n>  It is strongly recommended that you read the following documentation BEFORE attempting to implement your provider:  \n  \n-   [Creating an Updatable Provider](../../data/oledb/creating-an-updatable-provider.md)  \n  \n-   Chapter 6 of the *OLE DB Programmer's Reference*  \n  \n-   Also see how the `RUpdateRowset` class is used in the UpdatePV sample  \n  \n## Requirements  \n **Header:** atldb.h  \n  \n## See Also  \n [OLE DB Provider Templates](../../data/oledb/ole-db-provider-templates-cpp.md)   \n [OLE DB Provider Template Architecture](../../data/oledb/ole-db-provider-template-architecture.md)"}