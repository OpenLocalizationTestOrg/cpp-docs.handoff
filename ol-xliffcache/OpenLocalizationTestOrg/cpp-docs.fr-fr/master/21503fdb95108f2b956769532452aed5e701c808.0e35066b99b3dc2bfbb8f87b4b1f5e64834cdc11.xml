{"nodes":[{"pos":[12,47],"content":"override Specifier | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"override Specifier | Microsoft Docs","pos":[0,35]}]},{"content":"override Specifier","pos":[586,604]},{"pos":[605,719],"content":"You can use the <ph id=\"ph1\">`override`</ph> keyword to designate member functions that override a virtual function in a base class.","source":"You can use the `override` keyword to designate member functions that override a virtual function in a base class."},{"content":"Syntax","pos":[728,734]},{"content":"Remarks","pos":[794,801]},{"pos":[816,957],"content":"is context-sensitive and has special meaning only when it's used after a member function declaration; otherwise, it's not a reserved keyword."},{"content":"Example","pos":[966,973]},{"content":"Use <ph id=\"ph1\">`override`</ph> to help prevent inadvertent inheritance behavior in your code.","pos":[977,1054],"source":"Use `override` to help prevent inadvertent inheritance behavior in your code."},{"content":"The following example shows where, without using <ph id=\"ph1\">`override`</ph>, the member function behavior of the derived class may not have been intended.","pos":[1055,1193],"source":" The following example shows where, without using `override`, the member function behavior of the derived class may not have been intended."},{"content":"The compiler doesn't emit any errors for this code.","pos":[1194,1245]},{"pos":[1981,2086],"content":"When you use <ph id=\"ph1\">`override`</ph>, the compiler generates errors instead of silently creating new member functions.","source":"When you use `override`, the compiler generates errors instead of silently creating new member functions."},{"pos":[2927,3063],"content":"To specify that functions cannot be overridden and that classes cannot be inherited, use the <bpt id=\"p1\">[</bpt>final<ept id=\"p1\">](../cpp/final-specifier.md)</ept> keyword.","source":"To specify that functions cannot be overridden and that classes cannot be inherited, use the [final](../cpp/final-specifier.md) keyword."},{"content":"See Also","pos":[3072,3080]},{"content":"final Specifier","pos":[3085,3100]},{"content":"Keywords","pos":[3134,3142]}],"content":"---\ntitle: \"override Specifier | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"override Identifier\"\nms.assetid: b286fb46-9374-4ad8-b2e7-4607119b6133\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# override Specifier\nYou can use the `override` keyword to designate member functions that override a virtual function in a base class.  \n  \n## Syntax  \n  \n```  \n  \nfunction-declaration override;  \n```  \n  \n## Remarks  \n `override` is context-sensitive and has special meaning only when it's used after a member function declaration; otherwise, it's not a reserved keyword.  \n  \n## Example  \n Use `override` to help prevent inadvertent inheritance behavior in your code. The following example shows where, without using `override`, the member function behavior of the derived class may not have been intended. The compiler doesn't emit any errors for this code.  \n  \n```cpp  \nclass BaseClass  \n{  \n    virtual void funcA();  \n    virtual void funcB() const;  \n    virtual void funcC(int = 0);  \n    void funcD();  \n};  \n  \nclass DerivedClass: public BaseClass  \n{  \n    virtual void funcA(); // ok, works as intended  \n  \n    virtual void funcB(); // DerivedClass::funcB() is non-const, so it does not  \n                          // override BaseClass::funcB() const and it is a new member function  \n  \n    virtual void funcC(double = 0.0); // DerivedClass::funcC(double) has a different  \n                                      // parameter type than BaseClass::funcC(int), so  \n                                      // DerivedClass::funcC(double) is a new member function  \n  \n};  \n  \n```  \n  \n When you use `override`, the compiler generates errors instead of silently creating new member functions.  \n  \n```cpp  \nclass BaseClass  \n{  \n    virtual void funcA();  \n    virtual void funcB() const;  \n    virtual void funcC(int = 0);  \n    void funcD();  \n};  \n  \nclass DerivedClass: public BaseClass  \n{  \n    virtual void funcA() override; // ok  \n  \n    virtual void funcB() override; // compiler error: DerivedClass::funcB() does not   \n                                   // override BaseClass::funcB() const  \n  \n    virtual void funcC( double = 0.0 ) override; // compiler error:   \n                                                 // DerivedClass::funcC(double) does not   \n                                                 // override BaseClass::funcC(int)  \n  \n    void funcD() override; // compiler error: DerivedClass::funcD() does not   \n                           // override the non-virtual BaseClass::funcD()  \n};  \n  \n```  \n  \n To specify that functions cannot be overridden and that classes cannot be inherited, use the [final](../cpp/final-specifier.md) keyword.  \n  \n## See Also  \n [final Specifier](../cpp/final-specifier.md)   \n [Keywords](../cpp/keywords-cpp.md)   \n "}