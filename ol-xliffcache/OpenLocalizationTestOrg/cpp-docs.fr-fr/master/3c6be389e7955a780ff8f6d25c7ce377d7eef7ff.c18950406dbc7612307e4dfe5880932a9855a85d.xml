{"nodes":[{"pos":[12,68],"content":"Explicitly Unloading a Delay-Loaded DLL | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Explicitly Unloading a Delay-Loaded DLL | Microsoft Docs","pos":[0,56]}]},{"content":"Explicitly Unloading a Delay-Loaded DLL","pos":[709,748]},{"content":"The <bpt id=\"p1\">[</bpt>/delay<ept id=\"p1\">](../../build/reference/delay-delay-load-import-settings.md)</ept>:unload linker option allows you to unload a DLL that was delay loaded.","pos":[749,891],"source":"The [/delay](../../build/reference/delay-delay-load-import-settings.md):unload linker option allows you to unload a DLL that was delay loaded."},{"content":"By default, when your code unloads the DLL (using /delay:unload and <bpt id=\"p1\">**</bpt>__FUnloadDelayLoadedDLL2<ept id=\"p1\">**</ept>), the delay-loaded imports remain in the import address table (IAT).","pos":[892,1057],"source":" By default, when your code unloads the DLL (using /delay:unload and **__FUnloadDelayLoadedDLL2**), the delay-loaded imports remain in the import address table (IAT)."},{"content":"However, if you use /delay:unload on the linker command line, the helper function will support the explicit unloading of the DLL, resetting the IAT to its original form; the now-invalid pointers will be overwritten.","pos":[1058,1273]},{"content":"The IAT is a field in the <bpt id=\"p1\">[</bpt>ImgDelayDescr<ept id=\"p1\">](../../build/reference/calling-conventions-parameters-and-return-type.md)</ept> that contains the address of a copy of the original IAT (if it exists).","pos":[1274,1460],"source":" The IAT is a field in the [ImgDelayDescr](../../build/reference/calling-conventions-parameters-and-return-type.md) that contains the address of a copy of the original IAT (if it exists)."},{"content":"Example","pos":[1469,1476]},{"content":"Code","pos":[1486,1490]},{"content":"Comments","pos":[2063,2071]},{"content":"Important notes on unloading a delay-loaded DLL:","pos":[2075,2123]},{"pos":[2133,2248],"content":"You can find the implementation of the <bpt id=\"p1\">**</bpt>__FUnloadDelayLoadedDLL2<ept id=\"p1\">**</ept> function in the file \\VC7\\INCLUDE\\DELAYHLP.CPP.","source":"You can find the implementation of the **__FUnloadDelayLoadedDLL2** function in the file \\VC7\\INCLUDE\\DELAYHLP.CPP."},{"content":"The name parameter of the <bpt id=\"p1\">**</bpt>__FUnloadDelayLoadedDLL2<ept id=\"p1\">**</ept> function must exactly match (including case) what the import library contains (that string is also in the import table in the image).","pos":[2258,2446],"source":"The name parameter of the **__FUnloadDelayLoadedDLL2** function must exactly match (including case) what the import library contains (that string is also in the import table in the image)."},{"content":"You can view the contents of the import library with <bpt id=\"p1\">[</bpt>DUMPBIN /DEPENDENTS<ept id=\"p1\">](../../build/reference/dependents.md)</ept>.","pos":[2447,2559],"source":" You can view the contents of the import library with [DUMPBIN /DEPENDENTS](../../build/reference/dependents.md)."},{"content":"If a case-insensitive string match is desired, you can update <bpt id=\"p1\">**</bpt>__FUnloadDelayLoadedDLL2<ept id=\"p1\">**</ept> to use one of the CRT string functions or a Windows API call.","pos":[2560,2712],"source":" If a case-insensitive string match is desired, you can update **__FUnloadDelayLoadedDLL2** to use one of the CRT string functions or a Windows API call."},{"pos":[2719,2830],"content":"See <bpt id=\"p1\">[</bpt>Unloading a Delay-Loaded DLL<ept id=\"p1\">](../../build/reference/unloading-a-delay-loaded-dll.md)</ept> for more information.","source":"See [Unloading a Delay-Loaded DLL](../../build/reference/unloading-a-delay-loaded-dll.md) for more information."},{"content":"See Also","pos":[2839,2847]},{"content":"Linker Support for Delay-Loaded DLLs","pos":[2852,2888]}],"content":"---\ntitle: \"Explicitly Unloading a Delay-Loaded DLL | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"/DELAY:UNLOAD linker option\"\n  - \"DELAY:UNLOAD linker option\"\n  - \"__FUnloadDelayLoadedDLL2\"\n  - \"delayed loading of DLLs, unloading\"\nms.assetid: 1c4c5172-fd06-45d3-9e4f-f12343176b3c\ncaps.latest.revision: 7\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Explicitly Unloading a Delay-Loaded DLL\nThe [/delay](../../build/reference/delay-delay-load-import-settings.md):unload linker option allows you to unload a DLL that was delay loaded. By default, when your code unloads the DLL (using /delay:unload and **__FUnloadDelayLoadedDLL2**), the delay-loaded imports remain in the import address table (IAT). However, if you use /delay:unload on the linker command line, the helper function will support the explicit unloading of the DLL, resetting the IAT to its original form; the now-invalid pointers will be overwritten. The IAT is a field in the [ImgDelayDescr](../../build/reference/calling-conventions-parameters-and-return-type.md) that contains the address of a copy of the original IAT (if it exists).  \n  \n## Example  \n  \n### Code  \n  \n```  \n// link with /link /DELAYLOAD:MyDLL.dll /DELAY:UNLOAD  \n#include <windows.h>  \n#include <delayimp.h>  \n#include \"MyDll.h\"  \n#include <stdio.h>  \n  \n#pragma comment(lib, \"delayimp\")  \n#pragma comment(lib, \"MyDll\")  \nint main()  \n{  \n    BOOL TestReturn;  \n    // MyDLL.DLL will load at this point  \n    fnMyDll();  \n  \n    //MyDLL.dll will unload at this point  \n    TestReturn = __FUnloadDelayLoadedDLL2(\"MyDll.dll\");  \n  \n    if (TestReturn)  \n        printf_s(\"\\nDLL was unloaded\");  \n    else  \n        printf_s(\"\\nDLL was not unloaded\");  \n}  \n```  \n  \n### Comments  \n Important notes on unloading a delay-loaded DLL:  \n  \n-   You can find the implementation of the **__FUnloadDelayLoadedDLL2** function in the file \\VC7\\INCLUDE\\DELAYHLP.CPP.  \n  \n-   The name parameter of the **__FUnloadDelayLoadedDLL2** function must exactly match (including case) what the import library contains (that string is also in the import table in the image). You can view the contents of the import library with [DUMPBIN /DEPENDENTS](../../build/reference/dependents.md). If a case-insensitive string match is desired, you can update **__FUnloadDelayLoadedDLL2** to use one of the CRT string functions or a Windows API call.  \n  \n See [Unloading a Delay-Loaded DLL](../../build/reference/unloading-a-delay-loaded-dll.md) for more information.  \n  \n## See Also  \n [Linker Support for Delay-Loaded DLLs](../../build/reference/linker-support-for-delay-loaded-dlls.md)"}