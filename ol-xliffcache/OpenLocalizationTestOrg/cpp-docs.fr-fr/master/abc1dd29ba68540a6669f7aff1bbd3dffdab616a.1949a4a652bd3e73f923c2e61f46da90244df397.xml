{"nodes":[{"pos":[12,54],"content":"&lt;allocators&gt; macros | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>allocators<ph id=\"ph2\">&amp;gt;</ph> macros | Microsoft Docs","pos":[0,42],"source":"&lt;allocators&gt; macros | Microsoft Docs"}]},{"pos":[257,282],"content":"&lt;allocators&gt; macros","linkify":"&lt;allocators&gt; macros","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>allocators<ph id=\"ph2\">&amp;gt;</ph> macros","pos":[0,25],"source":"&lt;allocators&gt; macros"}]},{"pos":[301,334],"content":"<bpt id=\"p1\">[</bpt>ALLOCATOR_DECL<ept id=\"p1\">](#allocator_decl)</ept>","source":"[ALLOCATOR_DECL](#allocator_decl)"},{"pos":[335,370],"content":"<bpt id=\"p1\">[</bpt>CACHE_CHUNKLIST<ept id=\"p1\">](#cache_chunklist)</ept>","source":"[CACHE_CHUNKLIST](#cache_chunklist)"},{"pos":[371,404],"content":"<bpt id=\"p1\">[</bpt>CACHE_FREELIST<ept id=\"p1\">](#cache_freelist)</ept>","source":"[CACHE_FREELIST](#cache_freelist)"},{"pos":[409,442],"content":"<bpt id=\"p1\">[</bpt>CACHE_SUBALLOC<ept id=\"p1\">](#cache_suballoc)</ept>","source":"[CACHE_SUBALLOC](#cache_suballoc)"},{"pos":[443,472],"content":"<bpt id=\"p1\">[</bpt>SYNC_DEFAULT<ept id=\"p1\">](#sync_default)</ept>","source":"[SYNC_DEFAULT](#sync_default)"},{"pos":[483,528],"content":"<bpt id=\"p1\">&lt;a name=\"allocator_decl\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ALLOCATOR_DECL","linkify":"<a name=\"allocator_decl\"></a>  ALLOCATOR_DECL","source":"<a name=\"allocator_decl\"></a>  ALLOCATOR_DECL"},{"content":"Yields an allocator template class.","pos":[532,567]},{"pos":[649,656],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[660,924],"content":"The macro yields a template definition <ph id=\"ph1\">`template &lt;class Type&gt; class name {.....}`</ph> and a specialization <ph id=\"ph2\">`template &lt;&gt; class name&lt;void&gt; {.....}`</ph> which together define an allocator template class that uses the synchronization filter <ph id=\"ph3\">`sync`</ph> and a cache of type <ph id=\"ph4\">`cache`</ph>.","source":"The macro yields a template definition `template <class Type> class name {.....}` and a specialization `template <> class name<void> {.....}` which together define an allocator template class that uses the synchronization filter `sync` and a cache of type `cache`."},{"content":"For compilers that can compile rebind, the resulting template definition looks like this:","pos":[931,1020]},{"content":"For compilers that cannot compile rebind the resulting template definition looks like this:","pos":[1141,1232]},{"pos":[1577,1624],"content":"<bpt id=\"p1\">&lt;a name=\"cache_chunklist\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CACHE_CHUNKLIST","linkify":"<a name=\"cache_chunklist\"></a>  CACHE_CHUNKLIST","source":"<a name=\"cache_chunklist\"></a>  CACHE_CHUNKLIST"},{"pos":[1628,1687],"content":"Yields <ph id=\"ph1\">`stdext::allocators::cache_chunklist&lt;sizeof(Type)&gt;`</ph>.","source":"Yields `stdext::allocators::cache_chunklist<sizeof(Type)>`."},{"pos":[1748,1755],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1765,1810],"content":"<bpt id=\"p1\">&lt;a name=\"cache_freelist\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CACHE_FREELIST","linkify":"<a name=\"cache_freelist\"></a>  CACHE_FREELIST","source":"<a name=\"cache_freelist\"></a>  CACHE_FREELIST"},{"pos":[1814,1877],"content":"Yields <ph id=\"ph1\">`stdext::allocators::cache_freelist&lt;sizeof(Type), max&gt;`</ph>.","source":"Yields `stdext::allocators::cache_freelist<sizeof(Type), max>`."},{"pos":[1942,1949],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1959,2004],"content":"<bpt id=\"p1\">&lt;a name=\"cache_suballoc\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CACHE_SUBALLOC","linkify":"<a name=\"cache_suballoc\"></a>  CACHE_SUBALLOC","source":"<a name=\"cache_suballoc\"></a>  CACHE_SUBALLOC"},{"pos":[2008,2066],"content":"Yields <ph id=\"ph1\">`stdext::allocators::cache_suballoc&lt;sizeof(Type)&gt;`</ph>.","source":"Yields `stdext::allocators::cache_suballoc<sizeof(Type)>`."},{"pos":[2126,2133],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2143,2184],"content":"<bpt id=\"p1\">&lt;a name=\"sync_default\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  SYNC_DEFAULT","linkify":"<a name=\"sync_default\"></a>  SYNC_DEFAULT","source":"<a name=\"sync_default\"></a>  SYNC_DEFAULT"},{"content":"Yields a synchronization filter.","pos":[2188,2220]},{"pos":[2280,2287],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2291,2524],"content":"If a compiler supports compiling both single-threaded and multi-threaded applications, for single-threaded applications the macro yields <ph id=\"ph1\">`stdext::allocators::sync_none`</ph>; in all other cases it yields <ph id=\"ph2\">`stdext::allocators::sync_shared`</ph>.","source":"If a compiler supports compiling both single-threaded and multi-threaded applications, for single-threaded applications the macro yields `stdext::allocators::sync_none`; in all other cases it yields `stdext::allocators::sync_shared`."},{"pos":[2533,2541],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2545,2602],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>allocators&gt;<ept id=\"p1\">](../standard-library/allocators-header.md)</ept>","source":"[\\<allocators>](../standard-library/allocators-header.md)"}],"content":"---\ntitle: \"&lt;allocators&gt; macros | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 9cb5ee07-1ff9-4594-ae32-3c8c6efb511a\ncaps.latest.revision: 12\nmanager: \"ghogen\"\n---\n# &lt;allocators&gt; macros\n||||  \n|-|-|-|  \n|[ALLOCATOR_DECL](#allocator_decl)|[CACHE_CHUNKLIST](#cache_chunklist)|[CACHE_FREELIST](#cache_freelist)|  \n|[CACHE_SUBALLOC](#cache_suballoc)|[SYNC_DEFAULT](#sync_default)|  \n  \n##  <a name=\"allocator_decl\"></a>  ALLOCATOR_DECL  \n Yields an allocator template class.  \n  \n```\n#define ALLOCATOR_DECL(cache, sync, name) <alloc_template>\n```  \n  \n### Remarks  \n The macro yields a template definition `template <class Type> class name {.....}` and a specialization `template <> class name<void> {.....}` which together define an allocator template class that uses the synchronization filter `sync` and a cache of type `cache`.  \n  \n For compilers that can compile rebind, the resulting template definition looks like this:  \n```  \nstruct rebind\n   {    /* convert a name<Type> to a name<Other> */\n   typedef name<Other> other;\n   };  \n ```  \n For compilers that cannot compile rebind the resulting template definition looks like this:  \n  \n```\ntemplate <class Type<class name\n    : public stdext::allocators::allocator_base<Type,\n    sync<stdext::allocators::rts_alloc<cache>>>\n{\npublic:\n    name() {}\n    template <class Other>\n    name(const name<Other>&) {}\n    template <class Other>\n    name& operator= (const name<Other>&)\n    {\n        return *this;\n    }\n};\n```  \n  \n##  <a name=\"cache_chunklist\"></a>  CACHE_CHUNKLIST  \n Yields `stdext::allocators::cache_chunklist<sizeof(Type)>`.  \n  \n```\n#define CACHE_CHUNKLIST <cache_class>\n```  \n  \n### Remarks  \n  \n##  <a name=\"cache_freelist\"></a>  CACHE_FREELIST  \n Yields `stdext::allocators::cache_freelist<sizeof(Type), max>`.  \n  \n```\n#define CACHE_FREELIST(max) <cache_class>\n```  \n  \n### Remarks  \n  \n##  <a name=\"cache_suballoc\"></a>  CACHE_SUBALLOC  \n Yields `stdext::allocators::cache_suballoc<sizeof(Type)>`.  \n  \n```\n#define CACHE_SUBALLOC <cache_class>\n```  \n  \n### Remarks  \n  \n##  <a name=\"sync_default\"></a>  SYNC_DEFAULT  \n Yields a synchronization filter.  \n  \n```\n#define SYNC_DEFAULT <sync_template>\n```  \n  \n### Remarks  \n If a compiler supports compiling both single-threaded and multi-threaded applications, for single-threaded applications the macro yields `stdext::allocators::sync_none`; in all other cases it yields `stdext::allocators::sync_shared`.  \n  \n## See Also  \n [\\<allocators>](../standard-library/allocators-header.md)\n\n\n\n\n"}