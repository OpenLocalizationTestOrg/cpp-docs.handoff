{"nodes":[{"pos":[12,89],"content":"Recordset: Obtaining SUMs and Other Aggregate Results (ODBC) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Recordset: Obtaining SUMs and Other Aggregate Results (ODBC) | Microsoft Docs","pos":[0,77]}]},{"content":"Recordset: Obtaining SUMs and Other Aggregate Results (ODBC)","pos":[958,1018]},{"content":"This topic applies to the MFC ODBC classes.","pos":[1019,1062]},{"pos":[1069,1180],"content":"This topic explains how to obtain aggregate results using the following <bpt id=\"p1\">[</bpt>SQL<ept id=\"p1\">](../../data/odbc/sql.md)</ept> keywords:","source":"This topic explains how to obtain aggregate results using the following [SQL](../../data/odbc/sql.md) keywords:"},{"pos":[1190,1270],"content":"<bpt id=\"p1\">**</bpt>SUM<ept id=\"p1\">**</ept> Calculates the total of the values in a column with a numeric data type.","source":"**SUM** Calculates the total of the values in a column with a numeric data type."},{"pos":[1280,1353],"content":"<bpt id=\"p1\">**</bpt>MIN<ept id=\"p1\">**</ept> Extracts the smallest value in a column with a numeric data type.","source":"**MIN** Extracts the smallest value in a column with a numeric data type."},{"pos":[1363,1435],"content":"<bpt id=\"p1\">**</bpt>MAX<ept id=\"p1\">**</ept> Extracts the largest value in a column with a numeric data type.","source":"**MAX** Extracts the largest value in a column with a numeric data type."},{"pos":[1445,1536],"content":"<bpt id=\"p1\">**</bpt>AVG<ept id=\"p1\">**</ept> Calculates an average value of all the values in a column with a numeric data type.","source":"**AVG** Calculates an average value of all the values in a column with a numeric data type."},{"pos":[1546,1614],"content":"<bpt id=\"p1\">**</bpt>COUNT<ept id=\"p1\">**</ept> Counts the number of records in a column of any data type.","source":"**COUNT** Counts the number of records in a column of any data type."},{"content":"You use these SQL functions to obtain statistical information about the records in a data source rather than to extract records from the data source.","pos":[1621,1770]},{"content":"The recordset that is created usually consists of a single record (if all columns are aggregates) that contains a value.","pos":[1771,1891]},{"content":"(There might be more than one record if you used a <bpt id=\"p1\">**</bpt>GROUP BY<ept id=\"p1\">**</ept> clause.) This value is the result of the calculation or extraction performed by the SQL function.","pos":[1892,2053],"source":" (There might be more than one record if you used a **GROUP BY** clause.) This value is the result of the calculation or extraction performed by the SQL function."},{"pos":[2061,2215],"content":"[!TIP]\n To add a SQL **GROUP BY** clause (and possibly a **HAVING** clause) to your SQL statement, append it to the end of **m_strFilter**. For example:","leadings":["","> "],"nodes":[{"content":" To add a SQL **GROUP BY** clause (and possibly a **HAVING** clause) to your SQL statement, append it to the end of **m_strFilter**. For example:","pos":[7,152],"nodes":[{"content":"To add a SQL <bpt id=\"p1\">**</bpt>GROUP BY<ept id=\"p1\">**</ept> clause (and possibly a <bpt id=\"p2\">**</bpt>HAVING<ept id=\"p2\">**</ept> clause) to your SQL statement, append it to the end of <bpt id=\"p3\">**</bpt>m_strFilter<ept id=\"p3\">**</ept>.","pos":[1,132],"source":" To add a SQL **GROUP BY** clause (and possibly a **HAVING** clause) to your SQL statement, append it to the end of **m_strFilter**."},{"content":"For example:","pos":[133,145]}]}]},{"content":"You can limit the number of records you use to obtain aggregate results by filtering and sorting the columns.","pos":[2291,2400]},{"pos":[2408,2527],"content":"[!CAUTION]\n Some aggregation operators return a different data type from the columns over which they are aggregating.","leadings":["","> "],"nodes":[{"content":"Some aggregation operators return a different data type from the columns over which they are aggregating.","pos":[12,117]}]},{"pos":[2537,2661],"content":"<bpt id=\"p1\">**</bpt>SUM<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>AVG<ept id=\"p2\">**</ept> might return the next larger data type (for example, calling with <ph id=\"ph1\">`int`</ph> returns <bpt id=\"p3\">**</bpt>LONG<ept id=\"p3\">**</ept> or <bpt id=\"p4\">**</bpt>double<ept id=\"p4\">**</ept>).","source":"**SUM** and **AVG** might return the next larger data type (for example, calling with `int` returns **LONG** or **double**)."},{"pos":[2671,2739],"content":"<bpt id=\"p1\">**</bpt>COUNT<ept id=\"p1\">**</ept> usually returns <bpt id=\"p2\">**</bpt>LONG<ept id=\"p2\">**</ept> regardless of target column type.","source":"**COUNT** usually returns **LONG** regardless of target column type."},{"pos":[2749,2825],"content":"<bpt id=\"p1\">**</bpt>MAX<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>MIN<ept id=\"p2\">**</ept> return the same data type as the columns they calculate.","source":"**MAX** and **MIN** return the same data type as the columns they calculate."},{"content":"For example, the <bpt id=\"p1\">**</bpt>Add Class<ept id=\"p1\">**</ept> wizard creates <ph id=\"ph1\">`long`</ph> <ph id=\"ph2\">`m_lSales`</ph> to accommodate a Sales column, but you need to replace this with a <ph id=\"ph3\">`double m_dblSumSales`</ph> data member to accommodate the aggregate result.","pos":[2836,3038],"source":"For example, the **Add Class** wizard creates `long` `m_lSales` to accommodate a Sales column, but you need to replace this with a `double m_dblSumSales` data member to accommodate the aggregate result."},{"content":"See the following example.","pos":[3039,3065]},{"content":"To obtain an aggregate result for a recordset","pos":[3076,3121]},{"pos":[3131,3319],"content":"Create a recordset as described in <bpt id=\"p1\">[</bpt>Adding an MFC ODBC Consumer<ept id=\"p1\">](../../mfc/reference/adding-an-mfc-odbc-consumer.md)</ept> containing the columns from which you want to obtain aggregate results.","source":"Create a recordset as described in [Adding an MFC ODBC Consumer](../../mfc/reference/adding-an-mfc-odbc-consumer.md) containing the columns from which you want to obtain aggregate results."},{"content":"Modify the <bpt id=\"p1\">[</bpt>DoFieldExchange<ept id=\"p1\">](../../mfc/reference/crecordset-class.md#crecordset__dofieldexchange)</ept> function for the recordset.","pos":[3329,3454],"source":"Modify the [DoFieldExchange](../../mfc/reference/crecordset-class.md#crecordset__dofieldexchange) function for the recordset."},{"content":"Replace the string representing the column name (the second argument of the <bpt id=\"p1\">[</bpt>RFX<ept id=\"p1\">](../../data/odbc/record-field-exchange-using-rfx.md)</ept> function calls) with a string representing the aggregation function on the column.","pos":[3455,3671],"source":" Replace the string representing the column name (the second argument of the [RFX](../../data/odbc/record-field-exchange-using-rfx.md) function calls) with a string representing the aggregation function on the column."},{"content":"For example, replace:","pos":[3672,3693]},{"content":"with:","pos":[3767,3772]},{"content":"Open the recordset.","pos":[3856,3875]},{"content":"The result of the aggregation operation is left in <ph id=\"ph1\">`m_dblSumSales`</ph>.","pos":[3876,3943],"source":" The result of the aggregation operation is left in `m_dblSumSales`."},{"pos":[3951,4166],"content":"[!NOTE]\n The wizard actually assigns data member names without Hungarian prefixes. For example, the wizard would produce `m_Sales` for a Sales column, rather than the `m_lSales` name used earlier for illustration.","leadings":["","> "],"nodes":[{"content":" The wizard actually assigns data member names without Hungarian prefixes. For example, the wizard would produce `m_Sales` for a Sales column, rather than the `m_lSales` name used earlier for illustration.","pos":[8,213],"nodes":[{"content":"The wizard actually assigns data member names without Hungarian prefixes.","pos":[1,74]},{"content":"For example, the wizard would produce <ph id=\"ph1\">`m_Sales`</ph> for a Sales column, rather than the <ph id=\"ph2\">`m_lSales`</ph> name used earlier for illustration.","pos":[75,205],"source":" For example, the wizard would produce `m_Sales` for a Sales column, rather than the `m_lSales` name used earlier for illustration."}]}]},{"pos":[4173,4382],"content":"If you are using a <bpt id=\"p1\">[</bpt>CRecordView<ept id=\"p1\">](../../mfc/reference/crecordview-class.md)</ept> class to view the data, you have to change the DDX function call to display the new data member value; in this case, changing it from:","source":"If you are using a [CRecordView](../../mfc/reference/crecordview-class.md) class to view the data, you have to change the DDX function call to display the new data member value; in this case, changing it from:"},{"content":"To:","pos":[4466,4469]},{"content":"See Also","pos":[4560,4568]},{"content":"Recordset (ODBC)","pos":[4573,4589]},{"content":"Recordset: How Recordsets Select Records (ODBC)","pos":[4631,4678]}],"content":"---\ntitle: \"Recordset: Obtaining SUMs and Other Aggregate Results (ODBC) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"SQL, retrieving aggregate values from recordsets\"\n  - \"recordsets, retrieving SQL aggregate values\"\n  - \"retrieving SQL aggregate values from recordsets\"\n  - \"ODBC recordsets, retrieving SQL aggregate values\"\n  - \"SQL aggregate values\"\n  - \"SQL Server projects, retrieving aggregate values from recordsets\"\n  - \"SQL aggregate values, retrieving from recordsets\"\nms.assetid: 94500662-22a4-443e-82d7-acbe6eca447b\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Recordset: Obtaining SUMs and Other Aggregate Results (ODBC)\nThis topic applies to the MFC ODBC classes.  \n  \n This topic explains how to obtain aggregate results using the following [SQL](../../data/odbc/sql.md) keywords:  \n  \n-   **SUM** Calculates the total of the values in a column with a numeric data type.  \n  \n-   **MIN** Extracts the smallest value in a column with a numeric data type.  \n  \n-   **MAX** Extracts the largest value in a column with a numeric data type.  \n  \n-   **AVG** Calculates an average value of all the values in a column with a numeric data type.  \n  \n-   **COUNT** Counts the number of records in a column of any data type.  \n  \n You use these SQL functions to obtain statistical information about the records in a data source rather than to extract records from the data source. The recordset that is created usually consists of a single record (if all columns are aggregates) that contains a value. (There might be more than one record if you used a **GROUP BY** clause.) This value is the result of the calculation or extraction performed by the SQL function.  \n  \n> [!TIP]\n>  To add a SQL **GROUP BY** clause (and possibly a **HAVING** clause) to your SQL statement, append it to the end of **m_strFilter**. For example:  \n  \n```  \nm_strFilter = \"sales > 10 GROUP BY SALESPERSON_ID\";  \n```  \n  \n You can limit the number of records you use to obtain aggregate results by filtering and sorting the columns.  \n  \n> [!CAUTION]\n>  Some aggregation operators return a different data type from the columns over which they are aggregating.  \n  \n-   **SUM** and **AVG** might return the next larger data type (for example, calling with `int` returns **LONG** or **double**).  \n  \n-   **COUNT** usually returns **LONG** regardless of target column type.  \n  \n-   **MAX** and **MIN** return the same data type as the columns they calculate.  \n  \n     For example, the **Add Class** wizard creates `long` `m_lSales` to accommodate a Sales column, but you need to replace this with a `double m_dblSumSales` data member to accommodate the aggregate result. See the following example.  \n  \n#### To obtain an aggregate result for a recordset  \n  \n1.  Create a recordset as described in [Adding an MFC ODBC Consumer](../../mfc/reference/adding-an-mfc-odbc-consumer.md) containing the columns from which you want to obtain aggregate results.  \n  \n2.  Modify the [DoFieldExchange](../../mfc/reference/crecordset-class.md#crecordset__dofieldexchange) function for the recordset. Replace the string representing the column name (the second argument of the [RFX](../../data/odbc/record-field-exchange-using-rfx.md) function calls) with a string representing the aggregation function on the column. For example, replace:  \n  \n    ```  \n    RFX_Long(pFX, \"Sales\", m_lSales);  \n    ```  \n  \n     with:  \n  \n    ```  \n    RFX_Double(pFX, \"Sum(Sales)\", m_dblSumSales)  \n    ```  \n  \n3.  Open the recordset. The result of the aggregation operation is left in `m_dblSumSales`.  \n  \n> [!NOTE]\n>  The wizard actually assigns data member names without Hungarian prefixes. For example, the wizard would produce `m_Sales` for a Sales column, rather than the `m_lSales` name used earlier for illustration.  \n  \n If you are using a [CRecordView](../../mfc/reference/crecordview-class.md) class to view the data, you have to change the DDX function call to display the new data member value; in this case, changing it from:  \n  \n```  \nDDX_FieldText(pDX, IDC_SUMSALES, m_pSet->m_lSales, m_pSet);  \n```  \n  \n To:  \n  \n```  \nDDX_FieldText(pDX, IDC_SUMSALES, m_pSet->m_dblSumSales, m_pSet);  \n```  \n  \n## See Also  \n [Recordset (ODBC)](../../data/odbc/recordset-odbc.md)   \n [Recordset: How Recordsets Select Records (ODBC)](../../data/odbc/recordset-how-recordsets-select-records-odbc.md)"}