{"nodes":[{"pos":[12,36],"content":"bsearch | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"bsearch | Microsoft Docs","pos":[0,24]}]},{"content":"bsearch","pos":[967,974]},{"content":"Performs a binary search of a sorted array.","pos":[975,1018]},{"content":"A more secure version of this function is available; see <bpt id=\"p1\">[</bpt>bsearch_s<ept id=\"p1\">](../../c-runtime-library/reference/bsearch-s.md)</ept>.","pos":[1019,1136],"source":" A more secure version of this function is available; see [bsearch_s](../../c-runtime-library/reference/bsearch-s.md)."},{"content":"Syntax","pos":[1145,1151]},{"content":"Parameters","pos":[1349,1359]},{"content":"Object to search for.","pos":[1372,1393]},{"content":"Pointer to base of search data.","pos":[1410,1441]},{"content":"Number of elements.","pos":[1457,1476]},{"content":"Width of elements.","pos":[1494,1512]},{"content":"Callback function that compares two elements.","pos":[1532,1577]},{"content":"The first is a pointer to the key for the search and the second is a pointer to the array element to be compared with the key.","pos":[1578,1704]},{"content":"Return Value","pos":[1713,1725]},{"content":"returns a pointer to an occurrence of <ph id=\"ph1\">`key`</ph> in the array pointed to by <ph id=\"ph2\">`base`</ph>.","pos":[1739,1817],"source":" returns a pointer to an occurrence of `key` in the array pointed to by `base`."},{"content":"If <ph id=\"ph1\">`key`</ph> is not found, the function returns <ph id=\"ph2\">`NULL`</ph>.","pos":[1818,1869],"source":" If `key` is not found, the function returns `NULL`."},{"content":"If the array is not in ascending sort order or contains duplicate records with identical keys, the result is unpredictable.","pos":[1870,1993]},{"content":"Remarks","pos":[2002,2009]},{"content":"The <ph id=\"ph1\">`bsearch`</ph> function performs a binary search of a sorted array of <ph id=\"ph2\">`num`</ph> elements, each of <ph id=\"ph3\">`width`</ph> bytes in size.","pos":[2013,2128],"source":"The `bsearch` function performs a binary search of a sorted array of `num` elements, each of `width` bytes in size."},{"content":"The <ph id=\"ph1\">`base`</ph> value is a pointer to the base of the array to be searched, and <ph id=\"ph2\">`key`</ph> is the value being sought.","pos":[2129,2236],"source":" The `base` value is a pointer to the base of the array to be searched, and `key` is the value being sought."},{"content":"The <ph id=\"ph1\">`compare`</ph> parameter is a pointer to a user-supplied routine that compares the requested key to an array element and returns one of the following values specifying their relationship:","pos":[2237,2423],"source":" The `compare` parameter is a pointer to a user-supplied routine that compares the requested key to an array element and returns one of the following values specifying their relationship:"},{"pos":[2430,2465],"content":"Value returned by <ph id=\"ph1\">`compare`</ph> routine","source":"Value returned by `compare` routine"},{"content":"Description","pos":[2466,2477]},{"content":"0","pos":[2549,2550]},{"content":"Key is less than array element.","pos":[2551,2582]},{"content":"0","pos":[2587,2588]},{"content":"Key is equal to array element.","pos":[2589,2619]},{"content":"&gt; 0","pos":[2624,2627],"source":"> 0"},{"content":"Key is greater than array element.","pos":[2628,2662]},{"content":"This function validates its parameters.","pos":[2670,2709]},{"content":"If <ph id=\"ph1\">`compare`</ph>, <ph id=\"ph2\">`key`</ph> or <ph id=\"ph3\">`num`</ph> is <ph id=\"ph4\">`NULL`</ph>, or if <ph id=\"ph5\">`base`</ph> is <ph id=\"ph6\">`NULL`</ph> and *<ph id=\"ph7\">`num`</ph> is nonzero, or if <ph id=\"ph8\">`width`</ph> is zero, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2710,2949],"source":" If `compare`, `key` or `num` is `NULL`, or if `base` is `NULL` and *`num` is nonzero, or if `width` is zero, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`EINVAL`</ph> and the function returns <ph id=\"ph3\">`NULL`</ph>.","pos":[2950,3046],"source":" If execution is allowed to continue, `errno` is set to `EINVAL` and the function returns `NULL`."},{"content":"Requirements","pos":[3055,3067]},{"content":"Routine","pos":[3074,3081]},{"content":"Required header","pos":[3082,3097]},{"content":"stdlib.h&gt; and <ph id=\"ph1\">\\&lt;</ph>search.h&gt;","pos":[3154,3179],"source":"stdlib.h> and \\<search.h>"},{"pos":[3187,3311],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[3320,3327]},{"content":"This program sorts a string array with qsort, and then uses bsearch to find the word \"cat\".","pos":[3331,3422]},{"content":".NET Framework Equivalent","pos":[4578,4603]},{"content":"System::Collections::ArrayList::BinarySearch","pos":[4608,4652]},{"content":"See Also","pos":[4751,4759]},{"content":"Searching and Sorting","pos":[4764,4785]},{"content":"_lfind","pos":[4842,4848]},{"content":"_lsearch","pos":[4899,4907]},{"content":"qsort","pos":[4960,4965]}],"content":"---\ntitle: \"bsearch | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"bsearch\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-utility-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"bsearch\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"arrays [CRT], binary search\"\n  - \"bsearch function\"\nms.assetid: e0ad2f47-e7dd-49ed-8288-870457a14a2c\ncaps.latest.revision: 22\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# bsearch\nPerforms a binary search of a sorted array. A more secure version of this function is available; see [bsearch_s](../../c-runtime-library/reference/bsearch-s.md).  \n  \n## Syntax  \n  \n```  \nvoid *bsearch(   \n   const void *key,  \n   const void *base,  \n   size_t num,  \n   size_t width,  \n   int ( __cdecl *compare ) (const void *key, const void *datum)   \n);  \n```  \n  \n#### Parameters  \n `key`  \n Object to search for.  \n  \n `base`  \n Pointer to base of search data.  \n  \n `num`  \n Number of elements.  \n  \n `width`  \n Width of elements.  \n  \n `compare`  \n Callback function that compares two elements. The first is a pointer to the key for the search and the second is a pointer to the array element to be compared with the key.  \n  \n## Return Value  \n `bsearch` returns a pointer to an occurrence of `key` in the array pointed to by `base`. If `key` is not found, the function returns `NULL`. If the array is not in ascending sort order or contains duplicate records with identical keys, the result is unpredictable.  \n  \n## Remarks  \n The `bsearch` function performs a binary search of a sorted array of `num` elements, each of `width` bytes in size. The `base` value is a pointer to the base of the array to be searched, and `key` is the value being sought. The `compare` parameter is a pointer to a user-supplied routine that compares the requested key to an array element and returns one of the following values specifying their relationship:  \n  \n|Value returned by `compare` routine|Description|  \n|-----------------------------------------|-----------------|  \n|\\< 0|Key is less than array element.|  \n|0|Key is equal to array element.|  \n|> 0|Key is greater than array element.|  \n  \n This function validates its parameters. If `compare`, `key` or `num` is `NULL`, or if `base` is `NULL` and *`num` is nonzero, or if `width` is zero, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, `errno` is set to `EINVAL` and the function returns `NULL`.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`bsearch`|\\<stdlib.h> and \\<search.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n This program sorts a string array with qsort, and then uses bsearch to find the word \"cat\".  \n  \n```  \n// crt_bsearch.c  \n#include <search.h>  \n#include <string.h>  \n#include <stdio.h>  \n  \nint compare( char **arg1, char **arg2 )  \n{  \n   /* Compare all of both strings: */  \n   return _strcmpi( *arg1, *arg2 );  \n}  \n  \nint main( void )  \n{  \n   char *arr[] = {\"dog\", \"pig\", \"horse\", \"cat\", \"human\", \"rat\", \"cow\", \"goat\"};  \n   char **result;  \n   char *key = \"cat\";  \n   int i;  \n  \n   /* Sort using Quicksort algorithm: */  \n   qsort( (void *)arr, sizeof(arr)/sizeof(arr[0]), sizeof( char * ), (int (*)(const   \n   void*, const void*))compare );  \n  \n   for( i = 0; i < sizeof(arr)/sizeof(arr[0]); ++i )    /* Output sorted list */  \n      printf( \"%s \", arr[i] );  \n  \n   /* Find the word \"cat\" using a binary search algorithm: */  \n   result = (char **)bsearch( (char *) &key, (char *)arr, sizeof(arr)/sizeof(arr[0]),  \n                              sizeof( char * ), (int (*)(const void*, const void*))compare );  \n   if( result )  \n      printf( \"\\n%s found at %Fp\\n\", *result, result );  \n   else  \n      printf( \"\\nCat not found!\\n\" );  \n}  \n```  \n  \n```Output  \ncat cow dog goat horse human pig rat  \ncat found at 002F0F04  \n```  \n  \n## .NET Framework Equivalent  \n [System::Collections::ArrayList::BinarySearch](https://msdn.microsoft.com/en-us/library/system.collections.arraylist.binarysearch.aspx)  \n  \n## See Also  \n [Searching and Sorting](../../c-runtime-library/searching-and-sorting.md)   \n [_lfind](../../c-runtime-library/reference/lfind.md)   \n [_lsearch](../../c-runtime-library/reference/lsearch.md)   \n [qsort](../../c-runtime-library/reference/qsort.md)"}