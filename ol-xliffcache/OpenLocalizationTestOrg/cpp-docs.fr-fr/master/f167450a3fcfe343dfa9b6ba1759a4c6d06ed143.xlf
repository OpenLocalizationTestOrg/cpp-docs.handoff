<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f167450a3fcfe343dfa9b6ba1759a4c6d06ed143</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\atl-collection-classes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eab18318af5d1ab9204940a8e6dedf6cd089211b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ea7eb25f00bba25b0ad6a308fcc01fae202f36f3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ATL Collection Classes | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ATL Collection Classes</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>ATL provides many classes for storing and accessing data.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Which class you decide to use depends on several factors, including:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The amount of data to be stored</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Efficiency versus performance in accessing the data</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The ability to access the data by index or by key</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>How the data is ordered</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Personal preference</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Small Collection Classes</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>ATL provides the following array classes for dealing with small numbers of objects.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>However, these classes are limited and designed for use internally by ATL.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It is not recommended that you use them in your programs.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Type of data storage</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CSimpleArray</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Implements an array class for dealing with small numbers of objects.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CSimpleMap</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Implements a mapping class for dealing with small numbers of objects.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>General Purpose Collection Classes</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The follow classes implement arrays, lists, and maps and are provided as general purpose collection classes:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Type of data storage</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CAtlArray</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Implements an array.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CAtlList</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Implements a list.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CAtlMap</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Implements a mapping structure, whereby data can be referenced by key or value.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CRBMap</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Implements a mapping structure using the Red-Black algorithm.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CRBMultiMap</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Implements a Red-Black multimapping structure.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>These classes will trap many programming errors when used in debug builds, but for sake of performance, these checks will not be performed in retail builds.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Specialized Collection Classes</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>More specialized collection classes are also provided for managing memory pointers and interface pointers:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Purpose</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>CAutoPtrArray</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Provides methods useful when constructing an array of smart pointers.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>CAutoPtrList</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Provides methods useful when constructing a list of smart pointers.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>CComUnkArray</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Stores <ph id="ph1">`IUnknown`</ph> pointers and is designed to be used as a parameter to the <bpt id="p1">[</bpt>IConnectionPointImpl<ept id="p1">](../atl/reference/iconnectionpointimpl-class.md)</ept> template class.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>CHeapPtrList</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Provides methods useful when constructing a list of heap pointers.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>CInterfaceArray</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Provides methods useful when constructing an array of COM interface pointers.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>CInterfaceList</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Provides methods useful when constructing a list of COM interface pointers.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Choosing a Collection Class</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Each of the available collection classes offers different performance characteristics, as shown in the table below.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Columns 2 and 3 describe each class's ordering and access characteristics.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In the table, the term "ordered" means that the order in which items are inserted and deleted determines their order in the collection; it does not mean the items are sorted on their contents.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The term "indexed" means that the items in the collection can be retrieved by an integer index, much like items in a typical array.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Columns 4 and 5 describe each class's performance.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In applications that require many insertions into the collection, insertion speed might be especially important; for other applications, lookup speed may be more important.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Column 6 describes whether each shape allows duplicate elements.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The performance of a given collection class operation is expressed in terms of the relationship between the time required to complete the operation and the number of elements in the collection.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>An operation taking an amount of time that increases linearly as the number of elements increases is described as an O(n) algorithm.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>By contrast, an operation taking a period of time that increases less and less as the number of elements increases is described as an O(log n) algorithm.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Therefore, in terms of performance, O(log n) algorithms outperform O(n) algorithms more and more as the number of elements increases.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Collection Shape Features</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Shape</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Ordered</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Indexed</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Insert an</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>element</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Search for</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>specified element</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Duplicate</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>elements</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>List</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Fast (constant time)</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Slow O(n)</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Array</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>By int (constant time)</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Slow O(n) except if inserting at end, in which case constant time</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Slow O(n)</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Map</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>By key (constant time)</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Fast (constant time)</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Fast (constant time)</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>No (keys) Yes (values)</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Red-Black Map</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Yes (by key)</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>By key O(log n)</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Fast O(log n)</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Fast O(log n)</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Red-Black Multimap</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Yes (by key)</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>By key O(log n) (multiple values per key)</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Fast O(log n)</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Fast O(log n)</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Yes (multiple values per key)</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Using CTraits Objects</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>As the ATL collection classes can be used to store a wide range of user-defined data types, it can be useful to be able to override important functions such as comparisons.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This is achieved using the CTraits classes.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>CTraits classes are similar to, but more flexible than, the MFC collection class helper functions; see <bpt id="p1">[</bpt>Collection Class Helpers<ept id="p1">](../mfc/reference/collection-class-helpers.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>When constructing your collection class, you have the option of specifying a CTraits class.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>This class will contain the code that will perform operations such as comparisons when called by the other methods that make up the collection class.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>For example, if your list object contains your own user-defined structures, you may want to redefine the equality test to only compare certain member variables.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>In this way, the list object's Find method will operate in a more useful manner.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Utilities#112</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Comments</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For a list of the CTraits classes, see <bpt id="p1">[</bpt>Collection Classes<ept id="p1">](../atl/collection-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The following diagram shows the class hierarchy for the CTraits classes.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Traits hierarchy for collection classes</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Collection Classes Samples</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The following samples demonstrate the collection classes:</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>MMXSwarm Sample</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>DynamicConsumer Sample</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>UpdatePV Sample</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Marquee Sample</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Concepts</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Collection Classes</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>