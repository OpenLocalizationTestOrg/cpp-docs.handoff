{"nodes":[{"pos":[12,78],"content":"How to: Implement is and as C# Keywords (C++-CLI) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Implement is and as C# Keywords (C++-CLI) | Microsoft Docs","pos":[0,66]}]},{"content":"How to: Implement is and as C# Keywords (C++/CLI)","pos":[645,694]},{"pos":[695,794],"content":"This topic shows how to implement the functionality of the <ph id=\"ph1\">`is`</ph> and <ph id=\"ph2\">`as`</ph> C# keywords in Visual C++.","source":"This topic shows how to implement the functionality of the `is` and `as` C# keywords in Visual C++."},{"content":"Example","pos":[803,810]},{"content":"See Also","pos":[1482,1490]},{"content":"Interoperability with Other .NET Languages (C++/CLI)","pos":[1495,1547]}],"content":"---\ntitle: \"How to: Implement is and as C# Keywords (C++-CLI) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"get-started-article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"as C# keyword [C++]\"\n  - \"is C# keyword [C++]\"\nms.assetid: bc66c0d1-696b-480d-977c-5d9d1ad1ece6\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Implement is and as C# Keywords (C++/CLI)\nThis topic shows how to implement the functionality of the `is` and `as` C# keywords in Visual C++.  \n  \n## Example  \n  \n```  \n// CS_is_as.cpp  \n// compile with: /clr  \nusing namespace System;  \n  \ninterface class I {  \npublic:  \n   void F();  \n};  \n  \nref struct C : public I {  \n   virtual void F( void ) { }  \n};  \n  \ntemplate < class T, class U >   \nBoolean isinst(U u) {  \n   return dynamic_cast< T >(u) != nullptr;  \n}  \n  \nint main() {  \n   C ^ c = gcnew C();  \n   I ^ i = safe_cast< I ^ >(c);   // is (maps to castclass in IL)  \n   I ^ ii = dynamic_cast< I ^ >(c);   // as (maps to isinst in IL)  \n  \n   // simulate 'as':  \n   Object ^ o = \"f\";  \n   if ( isinst< String ^ >(o) )  \n      Console::WriteLine(\"o is a string\");  \n}  \n```  \n  \n```Output  \no is a string  \n```  \n  \n## See Also  \n [Interoperability with Other .NET Languages (C++/CLI)](../dotnet/interoperability-with-other-dotnet-languages-cpp-cli.md)"}