{"nodes":[{"pos":[12,43],"content":"Window Objects | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Window Objects | Microsoft Docs","pos":[0,31]}]},{"content":"Window Objects","pos":[867,881]},{"content":"MFC supplies class <bpt id=\"p1\">[</bpt>CWnd<ept id=\"p1\">](../mfc/reference/cwnd-class.md)</ept> to encapsulate the <ph id=\"ph1\">`HWND`</ph> handle of a window.","pos":[882,985],"source":"MFC supplies class [CWnd](../mfc/reference/cwnd-class.md) to encapsulate the `HWND` handle of a window."},{"content":"The <ph id=\"ph1\">`CWnd`</ph> object is a C++ window object, distinct from the <ph id=\"ph2\">`HWND`</ph> that represents a Windows window but containing it.","pos":[986,1104],"source":" The `CWnd` object is a C++ window object, distinct from the `HWND` that represents a Windows window but containing it."},{"content":"Use <ph id=\"ph1\">`CWnd`</ph> to derive your own child window classes, or use one of the many MFC classes derived from <ph id=\"ph2\">`CWnd`</ph>.","pos":[1105,1212],"source":" Use `CWnd` to derive your own child window classes, or use one of the many MFC classes derived from `CWnd`."},{"content":"Class <ph id=\"ph1\">`CWnd`</ph> is the base class for all windows, including frame windows, dialog boxes, child windows, controls, and control bars such as toolbars.","pos":[1213,1359],"source":" Class `CWnd` is the base class for all windows, including frame windows, dialog boxes, child windows, controls, and control bars such as toolbars."},{"content":"A good understanding of <bpt id=\"p1\">[</bpt>the relationship between a C++ window object and an HWND<ept id=\"p1\">](../mfc/relationship-between-a-cpp-window-object-and-an-hwnd.md)</ept> is crucial for effective programming with MFC.","pos":[1360,1553],"source":" A good understanding of [the relationship between a C++ window object and an HWND](../mfc/relationship-between-a-cpp-window-object-and-an-hwnd.md) is crucial for effective programming with MFC."},{"content":"MFC provides some default functionality and management of windows, but you can derive your own class from <ph id=\"ph1\">`CWnd`</ph> and use its member functions to customize the provided functionality.","pos":[1560,1742],"source":"MFC provides some default functionality and management of windows, but you can derive your own class from `CWnd` and use its member functions to customize the provided functionality."},{"content":"You can create child windows by constructing a <ph id=\"ph1\">`CWnd`</ph> object and calling its <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](../mfc/reference/cwnd-class.md#cwnd__create)</ept> member function, then customize the child windows using <ph id=\"ph2\">`CWnd`</ph> member functions.","pos":[1743,1954],"source":" You can create child windows by constructing a `CWnd` object and calling its [Create](../mfc/reference/cwnd-class.md#cwnd__create) member function, then customize the child windows using `CWnd` member functions."},{"content":"You can embed objects derived from <bpt id=\"p1\">[</bpt>CView<ept id=\"p1\">](../mfc/reference/cview-class.md)</ept>, such as form views or tree views, in a frame window.","pos":[1955,2084],"source":" You can embed objects derived from [CView](../mfc/reference/cview-class.md), such as form views or tree views, in a frame window."},{"content":"And you can support multiple views of your documents via splitter panes, supplied by class <bpt id=\"p1\">[</bpt>CSplitterWnd<ept id=\"p1\">](../mfc/reference/csplitterwnd-class.md)</ept>.","pos":[2085,2231],"source":" And you can support multiple views of your documents via splitter panes, supplied by class [CSplitterWnd](../mfc/reference/csplitterwnd-class.md)."},{"pos":[2238,2379],"content":"Each object derived from class <ph id=\"ph1\">`CWnd`</ph> contains a message map, through which you can map Windows messages or command IDs to your own handlers.","source":"Each object derived from class `CWnd` contains a message map, through which you can map Windows messages or command IDs to your own handlers."},{"pos":[2386,2542],"content":"The general literature on programming for Windows is a good resource for learning how to use the <ph id=\"ph1\">`CWnd`</ph> member functions, which encapsulate the <ph id=\"ph2\">`HWND`</ph> APIs.","source":"The general literature on programming for Windows is a good resource for learning how to use the `CWnd` member functions, which encapsulate the `HWND` APIs."},{"content":"Functions for Operating On a CWnd","pos":[2551,2584]},{"content":"and its <bpt id=\"p1\">[</bpt>derived window classes<ept id=\"p1\">](../mfc/derived-window-classes.md)</ept> provide constructors, destructors, and member functions to initialize the object, create the underlying Windows structures, and access the encapsulated <ph id=\"ph1\">`HWND`</ph>.","pos":[2595,2821],"source":" and its [derived window classes](../mfc/derived-window-classes.md) provide constructors, destructors, and member functions to initialize the object, create the underlying Windows structures, and access the encapsulated `HWND`."},{"content":"also provides member functions that encapsulate Windows APIs for sending messages, accessing the window's state, converting coordinates, updating, scrolling, accessing the Clipboard, and many other tasks.","pos":[2829,3033]},{"content":"Most Windows window-management APIs that take an <ph id=\"ph1\">`HWND`</ph> argument are encapsulated as member functions of <ph id=\"ph2\">`CWnd`</ph>.","pos":[3034,3146],"source":" Most Windows window-management APIs that take an `HWND` argument are encapsulated as member functions of `CWnd`."},{"content":"The names of the functions and their parameters are preserved in the <ph id=\"ph1\">`CWnd`</ph> member function.","pos":[3147,3239],"source":" The names of the functions and their parameters are preserved in the `CWnd` member function."},{"content":"For details about the Windows APIs encapsulated by <ph id=\"ph1\">`CWnd`</ph>, see class <bpt id=\"p1\">[</bpt>CWnd<ept id=\"p1\">](../mfc/reference/cwnd-class.md)</ept>.","pos":[3240,3348],"source":" For details about the Windows APIs encapsulated by `CWnd`, see class [CWnd](../mfc/reference/cwnd-class.md)."},{"content":"CWnd and Windows Messages","pos":[3357,3382]},{"content":"One of the primary purposes of <ph id=\"ph1\">`CWnd`</ph> is to provide an interface for handling Windows messages, such as <ph id=\"ph2\">`WM_PAINT`</ph> or <ph id=\"ph3\">`WM_MOUSEMOVE`</ph>.","pos":[3386,3519],"source":"One of the primary purposes of `CWnd` is to provide an interface for handling Windows messages, such as `WM_PAINT` or `WM_MOUSEMOVE`."},{"content":"Many of the member functions of <ph id=\"ph1\">`CWnd`</ph> are handlers for standard messages — those beginning with the identifier <bpt id=\"p1\">**</bpt>afx_msg<ept id=\"p1\">**</ept> and the prefix \"On,\" such as <ph id=\"ph2\">`OnPaint`</ph> and <bpt id=\"p2\">**</bpt>OnMouseMove<ept id=\"p2\">**</ept>.","pos":[3520,3703],"source":" Many of the member functions of `CWnd` are handlers for standard messages — those beginning with the identifier **afx_msg** and the prefix \"On,\" such as `OnPaint` and **OnMouseMove**."},{"content":"<bpt id=\"p1\">[</bpt>Message Handling and Mapping<ept id=\"p1\">](../mfc/message-handling-and-mapping.md)</ept> covers messages and message handling in detail.","pos":[3704,3822],"source":"[Message Handling and Mapping](../mfc/message-handling-and-mapping.md) covers messages and message handling in detail."},{"content":"The information there applies equally to the framework's windows and those that you create yourself for special purposes.","pos":[3823,3944]},{"content":"What do you want to know more about","pos":[3954,3989]},{"content":"The relationship between a C++ window object and an HWND","pos":[4000,4056]},{"content":"Derived window classes","pos":[4132,4154]},{"content":"Creating windows","pos":[4200,4216]},{"content":"Destroying window objects","pos":[4256,4281]},{"content":"Detaching a CWnd from Its HWND","pos":[4330,4360]},{"content":"Working with window objects","pos":[4414,4441]},{"pos":[4491,4589],"content":"<bpt id=\"p1\">[</bpt>Device contexts<ept id=\"p1\">](../mfc/device-contexts.md)</ept>: objects that make Windows drawing device independent","source":"[Device contexts](../mfc/device-contexts.md): objects that make Windows drawing device independent"},{"pos":[4599,4693],"content":"<bpt id=\"p1\">[</bpt>Graphic objects<ept id=\"p1\">](../mfc/graphic-objects.md)</ept>: pens, brushes, fonts, bitmaps, palettes, regions","source":"[Graphic objects](../mfc/graphic-objects.md): pens, brushes, fonts, bitmaps, palettes, regions"},{"content":"See Also","pos":[4702,4710]},{"content":"Windows","pos":[4715,4722]}],"content":"---\ntitle: \"Window Objects | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"objects [C++], window\"\n  - \"Windows window [C++]\"\n  - \"MFC [C++], windows\"\n  - \"frame windows [C++], C++ window objects\"\n  - \"window objects [C++]\"\n  - \"windows [C++], C++ window objects\"\n  - \"window messages [C++]\"\n  - \"HWND\"\n  - \"messages [C++], Windows\"\n  - \"Visual C++, window objects\"\n  - \"HWND, window objects\"\nms.assetid: 28b33ce2-af05-4617-9d03-1cb9a02be687\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Window Objects\nMFC supplies class [CWnd](../mfc/reference/cwnd-class.md) to encapsulate the `HWND` handle of a window. The `CWnd` object is a C++ window object, distinct from the `HWND` that represents a Windows window but containing it. Use `CWnd` to derive your own child window classes, or use one of the many MFC classes derived from `CWnd`. Class `CWnd` is the base class for all windows, including frame windows, dialog boxes, child windows, controls, and control bars such as toolbars. A good understanding of [the relationship between a C++ window object and an HWND](../mfc/relationship-between-a-cpp-window-object-and-an-hwnd.md) is crucial for effective programming with MFC.  \n  \n MFC provides some default functionality and management of windows, but you can derive your own class from `CWnd` and use its member functions to customize the provided functionality. You can create child windows by constructing a `CWnd` object and calling its [Create](../mfc/reference/cwnd-class.md#cwnd__create) member function, then customize the child windows using `CWnd` member functions. You can embed objects derived from [CView](../mfc/reference/cview-class.md), such as form views or tree views, in a frame window. And you can support multiple views of your documents via splitter panes, supplied by class [CSplitterWnd](../mfc/reference/csplitterwnd-class.md).  \n  \n Each object derived from class `CWnd` contains a message map, through which you can map Windows messages or command IDs to your own handlers.  \n  \n The general literature on programming for Windows is a good resource for learning how to use the `CWnd` member functions, which encapsulate the `HWND` APIs.  \n  \n## Functions for Operating On a CWnd  \n `CWnd` and its [derived window classes](../mfc/derived-window-classes.md) provide constructors, destructors, and member functions to initialize the object, create the underlying Windows structures, and access the encapsulated `HWND`. `CWnd` also provides member functions that encapsulate Windows APIs for sending messages, accessing the window's state, converting coordinates, updating, scrolling, accessing the Clipboard, and many other tasks. Most Windows window-management APIs that take an `HWND` argument are encapsulated as member functions of `CWnd`. The names of the functions and their parameters are preserved in the `CWnd` member function. For details about the Windows APIs encapsulated by `CWnd`, see class [CWnd](../mfc/reference/cwnd-class.md).  \n  \n## CWnd and Windows Messages  \n One of the primary purposes of `CWnd` is to provide an interface for handling Windows messages, such as `WM_PAINT` or `WM_MOUSEMOVE`. Many of the member functions of `CWnd` are handlers for standard messages — those beginning with the identifier **afx_msg** and the prefix \"On,\" such as `OnPaint` and **OnMouseMove**. [Message Handling and Mapping](../mfc/message-handling-and-mapping.md) covers messages and message handling in detail. The information there applies equally to the framework's windows and those that you create yourself for special purposes.  \n  \n### What do you want to know more about  \n  \n-   [The relationship between a C++ window object and an HWND](../mfc/relationship-between-a-cpp-window-object-and-an-hwnd.md)  \n  \n-   [Derived window classes](../mfc/derived-window-classes.md)  \n  \n-   [Creating windows](../mfc/creating-windows.md)  \n  \n-   [Destroying window objects](../mfc/destroying-window-objects.md)  \n  \n-   [Detaching a CWnd from Its HWND](../mfc/detaching-a-cwnd-from-its-hwnd.md)  \n  \n-   [Working with window objects](../mfc/working-with-window-objects.md)  \n  \n-   [Device contexts](../mfc/device-contexts.md): objects that make Windows drawing device independent  \n  \n-   [Graphic objects](../mfc/graphic-objects.md): pens, brushes, fonts, bitmaps, palettes, regions  \n  \n## See Also  \n [Windows](../mfc/windows.md)\n\n"}