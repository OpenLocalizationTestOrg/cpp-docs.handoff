{"nodes":[{"pos":[12,60],"content":"Multithreading with C++ and MFC | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Multithreading with C++ and MFC | Microsoft Docs","pos":[0,48]}]},{"content":"Multithreading with C++ and MFC","pos":[891,922]},{"content":"The Microsoft Foundation Class (MFC) library provides support for multithreaded applications.","pos":[923,1016]},{"content":"This topic describes processes and threads and the MFC approach to multithreading.","pos":[1017,1099]},{"content":"A process is an executing instance of an application.","pos":[1106,1159]},{"content":"For example, when you double-click the Notepad icon, you start a process that runs Notepad.","pos":[1160,1251]},{"content":"A thread is a path of execution within a process.","pos":[1258,1307]},{"content":"When you start Notepad, the operating system creates a process and begins executing the primary thread of that process.","pos":[1308,1427]},{"content":"When this thread terminates, so does the process.","pos":[1428,1477]},{"content":"This primary thread is supplied to the operating system by the startup code in the form of a function address.","pos":[1478,1588]},{"content":"Usually, it is the address of the <bpt id=\"p1\">**</bpt>main<ept id=\"p1\">**</ept> or <ph id=\"ph1\">`WinMain`</ph> function that is supplied.","pos":[1589,1671],"source":" Usually, it is the address of the **main** or `WinMain` function that is supplied."},{"content":"You can create additional threads in your application if you want.","pos":[1678,1744]},{"content":"You might want to do this to handle background or maintenance tasks when you do not want the user to wait for them to complete.","pos":[1745,1872]},{"content":"All threads in MFC applications are represented by <bpt id=\"p1\">[</bpt>CWinThread<ept id=\"p1\">](../mfc/reference/cwinthread-class.md)</ept> objects.","pos":[1873,1983],"source":" All threads in MFC applications are represented by [CWinThread](../mfc/reference/cwinthread-class.md) objects."},{"content":"In most situations, you do not even have to explicitly create these objects; instead call the framework helper function <bpt id=\"p1\">[</bpt>AfxBeginThread<ept id=\"p1\">](http://msdn.microsoft.com/library/e9e8684d-24f7-4599-8fdf-1f4f560a753b)</ept>, which creates the <ph id=\"ph1\">`CWinThread`</ph> object for you.","pos":[1984,2240],"source":" In most situations, you do not even have to explicitly create these objects; instead call the framework helper function [AfxBeginThread](http://msdn.microsoft.com/library/e9e8684d-24f7-4599-8fdf-1f4f560a753b), which creates the `CWinThread` object for you."},{"content":"MFC distinguishes two types of threads: user-interface threads and worker threads.","pos":[2247,2329]},{"content":"User-interface threads are commonly used to handle user input and respond to events and messages generated by the user.","pos":[2330,2449]},{"content":"Worker threads are commonly used to complete tasks, such as recalculation, that do not require user input.","pos":[2450,2556]},{"content":"The Win32 API does not distinguish between types of threads; it just needs to know the thread's starting address so it can begin to execute the thread.","pos":[2557,2708]},{"content":"MFC handles user-interface threads specially by supplying a message pump for events in the user interface.","pos":[2709,2815]},{"content":"is an example of a user-interface thread object, because it derives from <ph id=\"ph1\">`CWinThread`</ph> and handles events and messages generated by the user.","pos":[2826,2966],"source":" is an example of a user-interface thread object, because it derives from `CWinThread` and handles events and messages generated by the user."},{"content":"Special attention should be given to situations where more than one thread might require access to the same object.","pos":[2973,3088]},{"content":"<bpt id=\"p1\">[</bpt>Multithreading: Programming Tips<ept id=\"p1\">](../parallel/multithreading-programming-tips.md)</ept> describes techniques that you can use to get around problems that might arise in these situations.","pos":[3089,3270],"source":"[Multithreading: Programming Tips](../parallel/multithreading-programming-tips.md) describes techniques that you can use to get around problems that might arise in these situations."},{"content":"<bpt id=\"p1\">[</bpt>Multithreading: How to Use the Synchronization Classes<ept id=\"p1\">](../parallel/multithreading-how-to-use-the-synchronization-classes.md)</ept> describes how to use the classes that are available to synchronize access from multiple threads to a single object.","pos":[3271,3513],"source":"[Multithreading: How to Use the Synchronization Classes](../parallel/multithreading-how-to-use-the-synchronization-classes.md) describes how to use the classes that are available to synchronize access from multiple threads to a single object."},{"content":"Writing and debugging multithreaded programming is inherently a complicated and tricky undertaking, because you must ensure that objects are not accessed by more than one thread at a time.","pos":[3520,3708]},{"content":"The multithreading topics do not teach the basics of multithreaded programming, only how to use MFC in your multithreaded program.","pos":[3709,3839]},{"content":"The multithreaded MFC samples included in Visual C++ illustrate a few multithreaded Adding Functionality and Win32 APIs not encompassed by MFC; however, they are only intended to be a starting point.","pos":[3840,4039]},{"pos":[4046,4304],"content":"For more information about how the operating system handles processes and threads, see <bpt id=\"p1\">[</bpt>Processes and Threads<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms684841)</ept> in the <ph id=\"ph1\">[!INCLUDE[winsdkshort](../atl-mfc-shared/reference/includes/winsdkshort_md.md)]</ph>.","source":"For more information about how the operating system handles processes and threads, see [Processes and Threads](http://msdn.microsoft.com/library/windows/desktop/ms684841) in the [!INCLUDE[winsdkshort](../atl-mfc-shared/reference/includes/winsdkshort_md.md)]."},{"content":"For more information about MFC multithreading support, see the following topics:","pos":[4311,4391]},{"content":"Multithreading: Creating User-Interface Threads","pos":[4402,4449]},{"content":"Multithreading: Creating Worker Threads","pos":[4524,4563]},{"content":"Multithreading: How to Use the Synchronization Classes","pos":[4630,4684]},{"content":"Multithreading: Terminating Threads","pos":[4766,4801]},{"content":"Multithreading: Programming Tips","pos":[4864,4896]},{"content":"Multithreading: When to Use the Synchronization Classes","pos":[4956,5011]},{"content":"See Also","pos":[5092,5100]},{"content":"Multithreading Support for Older Code (Visual C++)","pos":[5105,5155]}],"content":"---\ntitle: \"Multithreading with C++ and MFC | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"MFC [C++], multithreading\"\n  - \"threading [C++], MFC\"\n  - \"worker threads [C++]\"\n  - \"synchronization classes [C++]\"\n  - \"synchronization [C++], multithreading\"\n  - \"threading [MFC], about threading\"\n  - \"CWinThread class, purpose of\"\n  - \"multithreading [C++], MFC\"\n  - \"threading [MFC]\"\n  - \"user interface threads [C++]\"\nms.assetid: 979605f8-3988-44b5-ac9c-b8cce7fcce14\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Multithreading with C++ and MFC\nThe Microsoft Foundation Class (MFC) library provides support for multithreaded applications. This topic describes processes and threads and the MFC approach to multithreading.  \n  \n A process is an executing instance of an application. For example, when you double-click the Notepad icon, you start a process that runs Notepad.  \n  \n A thread is a path of execution within a process. When you start Notepad, the operating system creates a process and begins executing the primary thread of that process. When this thread terminates, so does the process. This primary thread is supplied to the operating system by the startup code in the form of a function address. Usually, it is the address of the **main** or `WinMain` function that is supplied.  \n  \n You can create additional threads in your application if you want. You might want to do this to handle background or maintenance tasks when you do not want the user to wait for them to complete. All threads in MFC applications are represented by [CWinThread](../mfc/reference/cwinthread-class.md) objects. In most situations, you do not even have to explicitly create these objects; instead call the framework helper function [AfxBeginThread](http://msdn.microsoft.com/library/e9e8684d-24f7-4599-8fdf-1f4f560a753b), which creates the `CWinThread` object for you.  \n  \n MFC distinguishes two types of threads: user-interface threads and worker threads. User-interface threads are commonly used to handle user input and respond to events and messages generated by the user. Worker threads are commonly used to complete tasks, such as recalculation, that do not require user input. The Win32 API does not distinguish between types of threads; it just needs to know the thread's starting address so it can begin to execute the thread. MFC handles user-interface threads specially by supplying a message pump for events in the user interface. `CWinApp` is an example of a user-interface thread object, because it derives from `CWinThread` and handles events and messages generated by the user.  \n  \n Special attention should be given to situations where more than one thread might require access to the same object. [Multithreading: Programming Tips](../parallel/multithreading-programming-tips.md) describes techniques that you can use to get around problems that might arise in these situations. [Multithreading: How to Use the Synchronization Classes](../parallel/multithreading-how-to-use-the-synchronization-classes.md) describes how to use the classes that are available to synchronize access from multiple threads to a single object.  \n  \n Writing and debugging multithreaded programming is inherently a complicated and tricky undertaking, because you must ensure that objects are not accessed by more than one thread at a time. The multithreading topics do not teach the basics of multithreaded programming, only how to use MFC in your multithreaded program. The multithreaded MFC samples included in Visual C++ illustrate a few multithreaded Adding Functionality and Win32 APIs not encompassed by MFC; however, they are only intended to be a starting point.  \n  \n For more information about how the operating system handles processes and threads, see [Processes and Threads](http://msdn.microsoft.com/library/windows/desktop/ms684841) in the [!INCLUDE[winsdkshort](../atl-mfc-shared/reference/includes/winsdkshort_md.md)].  \n  \n For more information about MFC multithreading support, see the following topics:  \n  \n-   [Multithreading: Creating User-Interface Threads](../parallel/multithreading-creating-user-interface-threads.md)  \n  \n-   [Multithreading: Creating Worker Threads](../parallel/multithreading-creating-worker-threads.md)  \n  \n-   [Multithreading: How to Use the Synchronization Classes](../parallel/multithreading-how-to-use-the-synchronization-classes.md)  \n  \n-   [Multithreading: Terminating Threads](../parallel/multithreading-terminating-threads.md)  \n  \n-   [Multithreading: Programming Tips](../parallel/multithreading-programming-tips.md)  \n  \n-   [Multithreading: When to Use the Synchronization Classes](../parallel/multithreading-when-to-use-the-synchronization-classes.md)  \n  \n## See Also  \n [Multithreading Support for Older Code (Visual C++)](../parallel/multithreading-support-for-older-code-visual-cpp.md)"}