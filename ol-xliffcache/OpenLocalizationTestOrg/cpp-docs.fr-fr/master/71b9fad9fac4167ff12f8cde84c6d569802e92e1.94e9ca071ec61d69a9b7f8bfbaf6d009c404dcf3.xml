{"nodes":[{"pos":[12,47],"content":"COleDocument Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"COleDocument Class | Microsoft Docs","pos":[0,35]}]},{"content":"COleDocument Class","pos":[764,782]},{"content":"The base class for OLE documents that support visual editing.","pos":[783,844]},{"content":"Syntax","pos":[853,859]},{"content":"Members","pos":[923,930]},{"content":"Public Constructors","pos":[940,959]},{"content":"Name","pos":[966,970]},{"content":"Description","pos":[971,982]},{"content":"COleDocument::COleDocument","pos":[1021,1047]},{"pos":[1078,1113],"content":"Constructs a <ph id=\"ph1\">`COleDocument`</ph> object.","source":"Constructs a `COleDocument` object."},{"content":"Public Methods","pos":[1124,1138]},{"content":"Name","pos":[1145,1149]},{"content":"Description","pos":[1150,1161]},{"content":"COleDocument::AddItem","pos":[1200,1221]},{"content":"Adds an item to the list of items maintained by the document.","pos":[1247,1308]},{"content":"COleDocument::ApplyPrintDevice","pos":[1314,1344]},{"content":"Sets the print-target device for all client items in the document.","pos":[1379,1445]},{"content":"COleDocument::EnableCompoundFile","pos":[1451,1483]},{"content":"Causes documents to be stored using the OLE Structured Storage file format.","pos":[1520,1595]},{"content":"COleDocument::GetInPlaceActiveItem","pos":[1601,1635]},{"content":"Returns the OLE item that is currently in-place active.","pos":[1674,1729]},{"content":"COleDocument::GetNextClientItem","pos":[1735,1766]},{"content":"Gets the next client item for iterating.","pos":[1802,1842]},{"content":"COleDocument::GetNextItem","pos":[1848,1873]},{"content":"Gets the next document item for iterating.","pos":[1903,1945]},{"content":"COleDocument::GetNextServerItem","pos":[1951,1982]},{"content":"Gets the next server item for iterating.","pos":[2018,2058]},{"content":"COleDocument::GetPrimarySelectedItem","pos":[2064,2100]},{"content":"Returns the primary selected OLE item in the document.","pos":[2141,2195]},{"content":"COleDocument::GetStartPosition","pos":[2201,2231]},{"content":"Gets the initial position to begin iteration.","pos":[2266,2311]},{"content":"COleDocument::HasBlankItems","pos":[2317,2344]},{"content":"Checks for blank items in the document.","pos":[2376,2415]},{"content":"COleDocument::OnShowViews","pos":[2421,2446]},{"content":"Called when the document becomes visible or invisible.","pos":[2476,2530]},{"content":"COleDocument::RemoveItem","pos":[2536,2560]},{"content":"Removes an item from the list of items maintained by the document.","pos":[2589,2655]},{"content":"COleDocument::UpdateModifiedFlag","pos":[2661,2693]},{"content":"Marks the document as modified if any of the contained OLE items have been modified.","pos":[2730,2814]},{"content":"Protected Methods","pos":[2825,2842]},{"content":"Name","pos":[2849,2853]},{"content":"Description","pos":[2854,2865]},{"content":"COleDocument::OnEditChangeIcon","pos":[2904,2934]},{"content":"Handles events in the Change Icon menu command.","pos":[2969,3016]},{"content":"COleDocument::OnEditConvert","pos":[3022,3049]},{"content":"Handles the conversion of an embedded or linked object from one type to another.","pos":[3081,3161]},{"content":"COleDocument::OnEditLinks","pos":[3167,3192]},{"content":"Handles events in the Links command on the Edit menu.","pos":[3222,3275]},{"content":"COleDocument::OnFileSendMail","pos":[3281,3309]},{"content":"Sends a mail message with the document attached.","pos":[3342,3390]},{"content":"COleDocument::OnUpdateEditChangeIcon","pos":[3396,3432]},{"content":"Called by the framework to update the command UI for the Edit/Change Icon menu option.","pos":[3473,3559]},{"content":"COleDocument::OnUpdateEditLinksMenu","pos":[3565,3600]},{"content":"Called by the framework to update the command UI for the Edit/Links menu option.","pos":[3640,3720]},{"content":"COleDocument::OnUpdateObjectVerbMenu","pos":[3726,3762]},{"pos":[3803,3945],"content":"Called by the framework to update the command UI for the Edit/ <bpt id=\"p1\">*</bpt>ObjectName<ept id=\"p1\">*</ept> menu option and the Verb submenu accessed from Edit/ <bpt id=\"p2\">*</bpt>ObjectName<ept id=\"p2\">*</ept>.","source":"Called by the framework to update the command UI for the Edit/ *ObjectName* menu option and the Verb submenu accessed from Edit/ *ObjectName*."},{"content":"COleDocument::OnUpdatePasteLinkMenu","pos":[3951,3986]},{"content":"Called by the framework to update the command UI for the Paste Special menu option.","pos":[4026,4109]},{"content":"COleDocument::OnUpdatePasteMenu","pos":[4115,4146]},{"content":"Called by the framework to update the command UI for the Paste menu option.","pos":[4182,4257]},{"content":"Remarks","pos":[4267,4274]},{"pos":[4293,4448],"content":"is derived from <bpt id=\"p1\">**</bpt>CDocument<ept id=\"p1\">**</ept>, which allows your OLE applications to use the document/view architecture provided by the Microsoft Foundation Class Library.","source":" is derived from **CDocument**, which allows your OLE applications to use the document/view architecture provided by the Microsoft Foundation Class Library."},{"content":"treats a document as a collection of <bpt id=\"p1\">[</bpt>CDocItem<ept id=\"p1\">](../../mfc/reference/cdocitem-class.md)</ept> objects to handle OLE items.","pos":[4470,4585],"source":" treats a document as a collection of [CDocItem](../../mfc/reference/cdocitem-class.md) objects to handle OLE items."},{"content":"Both container and server applications require such an architecture because their documents must be able to contain OLE items.","pos":[4586,4712]},{"content":"The <bpt id=\"p1\">[</bpt>COleServerItem<ept id=\"p1\">](../../mfc/reference/coleserveritem-class.md)</ept> and <bpt id=\"p2\">[</bpt>COleClientItem<ept id=\"p2\">](../../mfc/reference/coleclientitem-class.md)</ept> classes, both derived from <ph id=\"ph1\">`CDocItem`</ph>, manage the interactions between applications and OLE items.","pos":[4713,4943],"source":" The [COleServerItem](../../mfc/reference/coleserveritem-class.md) and [COleClientItem](../../mfc/reference/coleclientitem-class.md) classes, both derived from `CDocItem`, manage the interactions between applications and OLE items."},{"content":"If you are writing a simple container application, derive your document class from <ph id=\"ph1\">`COleDocument`</ph>.","pos":[4950,5048],"source":"If you are writing a simple container application, derive your document class from `COleDocument`."},{"content":"If you are writing a container application that supports linking to the embedded items contained by its documents, derive your document class from <bpt id=\"p1\">[</bpt>COleLinkingDoc<ept id=\"p1\">](../../mfc/reference/colelinkingdoc-class.md)</ept>.","pos":[5049,5258],"source":" If you are writing a container application that supports linking to the embedded items contained by its documents, derive your document class from [COleLinkingDoc](../../mfc/reference/colelinkingdoc-class.md)."},{"content":"If you are writing a server application or combination container/server, derive your document class from <bpt id=\"p1\">[</bpt>COleServerDoc<ept id=\"p1\">](../../mfc/reference/coleserverdoc-class.md)</ept>.","pos":[5259,5424],"source":" If you are writing a server application or combination container/server, derive your document class from [COleServerDoc](../../mfc/reference/coleserverdoc-class.md)."},{"content":"and <ph id=\"ph1\">`COleServerDoc`</ph> are derived from <ph id=\"ph2\">`COleDocument`</ph>, so these classes inherit all the services available in <ph id=\"ph3\">`COleDocument`</ph> and <bpt id=\"p1\">**</bpt>CDocument<ept id=\"p1\">**</ept>.","pos":[5442,5583],"source":" and `COleServerDoc` are derived from `COleDocument`, so these classes inherit all the services available in `COleDocument` and **CDocument**."},{"content":"To use <ph id=\"ph1\">`COleDocument`</ph>, derive a class from it and add functionality to manage the application's non-OLE data as well as embedded or linked items.","pos":[5590,5735],"source":"To use `COleDocument`, derive a class from it and add functionality to manage the application's non-OLE data as well as embedded or linked items."},{"content":"If you define <ph id=\"ph1\">`CDocItem`</ph>-derived classes to store the application's native data, you can use the default implementation defined by <ph id=\"ph2\">`COleDocument`</ph> to store both your OLE and non-OLE data.","pos":[5736,5922],"source":" If you define `CDocItem`-derived classes to store the application's native data, you can use the default implementation defined by `COleDocument` to store both your OLE and non-OLE data."},{"content":"You can also design your own data structures for storing your non-OLE data separately from the OLE items.","pos":[5923,6028]},{"content":"For more information, see the article <bpt id=\"p1\">[</bpt>Containers: Compound Files<ept id=\"p1\">](../../mfc/containers-compound-files.md)</ept>..","pos":[6029,6137],"source":" For more information, see the article [Containers: Compound Files](../../mfc/containers-compound-files.md).."},{"content":"<bpt id=\"p1\">**</bpt>CDocument<ept id=\"p1\">**</ept> supports sending your document via mail if mail support (MAPI) is present.","pos":[6144,6232],"source":"**CDocument** supports sending your document via mail if mail support (MAPI) is present."},{"content":"has updated <bpt id=\"p1\">[</bpt>OnFileSendMail<ept id=\"p1\">](#coledocument__onfilesendmail)</ept> to handle compound documents correctly.","pos":[6248,6347],"source":" has updated [OnFileSendMail](#coledocument__onfilesendmail) to handle compound documents correctly."},{"content":"For more information, see the articles <bpt id=\"p1\">[</bpt>MAPI<ept id=\"p1\">](../../mfc/mapi.md)</ept> and <bpt id=\"p2\">[</bpt>MAPI Support in MFC<ept id=\"p2\">](../../mfc/mapi-support-in-mfc.md)</ept>..","pos":[6348,6474],"source":" For more information, see the articles [MAPI](../../mfc/mapi.md) and [MAPI Support in MFC](../../mfc/mapi-support-in-mfc.md).."},{"content":"Inheritance Hierarchy","pos":[6483,6504]},{"content":"CObject","pos":[6509,6516]},{"content":"CCmdTarget","pos":[6563,6573]},{"content":"CDocument","pos":[6623,6632]},{"content":"Requirements","pos":[6703,6715]},{"pos":[6719,6739],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxole.h","source":"**Header:** afxole.h"},{"pos":[6787,6808],"content":"COleDocument::AddItem"},{"content":"Call this function to add an item to the document.","pos":[6812,6862]},{"content":"Parameters","pos":[6926,6936]},{"content":"Pointer to the document item being added.","pos":[6951,6992]},{"content":"Remarks","pos":[7002,7009]},{"pos":[7013,7173],"content":"You do not need to call this function explicitly when it is called by the <ph id=\"ph1\">`COleClientItem`</ph> or <ph id=\"ph2\">`COleServerItem`</ph> constructor that accepts a pointer to a document.","source":"You do not need to call this function explicitly when it is called by the `COleClientItem` or `COleServerItem` constructor that accepts a pointer to a document."},{"pos":[7230,7260],"content":"COleDocument::ApplyPrintDevice"},{"pos":[7264,7443],"content":"Call this function to change the print-target device for all embedded <bpt id=\"p1\">[</bpt>COleClientItem<ept id=\"p1\">](../../mfc/reference/coleclientitem-class.md)</ept> items in your application's container document.","source":"Call this function to change the print-target device for all embedded [COleClientItem](../../mfc/reference/coleclientitem-class.md) items in your application's container document."},{"content":"Parameters","pos":[7565,7575]},{"content":"Pointer to a <bpt id=\"p1\">**</bpt>DVTARGETDEVICE<ept id=\"p1\">**</ept> data structure, which contains information about the new print-target device.","pos":[7588,7697],"source":" Pointer to a **DVTARGETDEVICE** data structure, which contains information about the new print-target device."},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[7698,7714],"source":" Can be **NULL**."},{"content":"Pointer to a <bpt id=\"p1\">**</bpt>PRINTDLG<ept id=\"p1\">**</ept> data structure, which contains information about the new print-target device.","pos":[7730,7833],"source":" Pointer to a **PRINTDLG** data structure, which contains information about the new print-target device."},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[7834,7850],"source":" Can be **NULL**."},{"content":"Return Value","pos":[7860,7872]},{"content":"Nonzero if the function was successful; otherwise 0.","pos":[7876,7928]},{"content":"Remarks","pos":[7938,7945]},{"content":"This function updates the print-target device for all items but does not refresh the presentation cache for those items.","pos":[7949,8069]},{"content":"To update the presentation cache for an item, call <bpt id=\"p1\">[</bpt>COleClientItem::UpdateLink<ept id=\"p1\">](../../mfc/reference/coleclientitem-class.md#coleclientitem__updatelink)</ept>.","pos":[8070,8222],"source":" To update the presentation cache for an item, call [COleClientItem::UpdateLink](../../mfc/reference/coleclientitem-class.md#coleclientitem__updatelink)."},{"content":"The arguments to this function contain information that OLE uses to identify the target device.","pos":[8229,8324]},{"content":"The <bpt id=\"p1\">[</bpt>PRINTDLG<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms646843)</ept> structure contains information that Windows uses to initialize the common Print dialog box.","pos":[8325,8491],"source":" The [PRINTDLG](http://msdn.microsoft.com/library/windows/desktop/ms646843) structure contains information that Windows uses to initialize the common Print dialog box."},{"content":"After the user closes the dialog box, Windows returns information about the user's selections in this structure.","pos":[8492,8604]},{"content":"The <ph id=\"ph1\">`m_pd`</ph> member of a <bpt id=\"p1\">[</bpt>CPrintDialog<ept id=\"p1\">](../../mfc/reference/cprintdialog-class.md)</ept> object is a <bpt id=\"p2\">**</bpt>PRINTDLG<ept id=\"p2\">**</ept> structure.","pos":[8605,8721],"source":" The `m_pd` member of a [CPrintDialog](../../mfc/reference/cprintdialog-class.md) object is a **PRINTDLG** structure."},{"pos":[8728,8898],"content":"For more information, see the <bpt id=\"p1\">[</bpt>PRINTDLG<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms646843)</ept> structure in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see the [PRINTDLG](http://msdn.microsoft.com/library/windows/desktop/ms646843) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[8905,9081],"content":"For more information, see the <bpt id=\"p1\">[</bpt>DVTARGETDEVICE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms686613)</ept> structure in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see the [DVTARGETDEVICE](http://msdn.microsoft.com/library/windows/desktop/ms686613) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[9134,9160],"content":"COleDocument::COleDocument"},{"pos":[9164,9199],"content":"Constructs a <ph id=\"ph1\">`COleDocument`</ph> object.","source":"Constructs a `COleDocument` object."},{"pos":[9289,9321],"content":"COleDocument::EnableCompoundFile"},{"content":"Call this function if you want to store the document using the compound-file format.","pos":[9325,9409]},{"content":"Parameters","pos":[9480,9490]},{"content":"Specifies whether compound file support is enabled or disabled.","pos":[9507,9570]},{"content":"Remarks","pos":[9580,9587]},{"content":"This is also called structured storage.","pos":[9591,9630]},{"content":"You typically call this function from the constructor of your <ph id=\"ph1\">`COleDocument`</ph>-derived class.","pos":[9631,9722],"source":" You typically call this function from the constructor of your `COleDocument`-derived class."},{"content":"For more information about compound documents, see the article <bpt id=\"p1\">[</bpt>Containers: Compound Files<ept id=\"p1\">](../../mfc/containers-compound-files.md)</ept>..","pos":[9723,9856],"source":" For more information about compound documents, see the article [Containers: Compound Files](../../mfc/containers-compound-files.md).."},{"content":"If you do not call this member function, documents will be stored in a nonstructured (\"flat\") file format.","pos":[9863,9969]},{"content":"After compound file support is enabled or disabled for a document, the setting should not be changed during the document's lifetime.","pos":[9976,10108]},{"pos":[10169,10203],"content":"COleDocument::GetInPlaceActiveItem"},{"pos":[10207,10344],"content":"Call this function to get the OLE item that is currently activated in place in the frame window containing the view identified by <ph id=\"ph1\">`pWnd`</ph>.","source":"Call this function to get the OLE item that is currently activated in place in the frame window containing the view identified by `pWnd`."},{"content":"Parameters","pos":[10427,10437]},{"content":"Pointer to the window that displays the container document.","pos":[10451,10510]},{"content":"Return Value","pos":[10520,10532]},{"pos":[10536,10661],"content":"A pointer to the single, in-place active OLE item; <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if there is no OLE item currently in the \"in-place active\" state.","source":"A pointer to the single, in-place active OLE item; **NULL** if there is no OLE item currently in the \"in-place active\" state."},{"pos":[10719,10750],"content":"COleDocument::GetNextClientItem"},{"content":"Call this function repeatedly to access each of the client items in your document.","pos":[10754,10836]},{"content":"Parameters","pos":[10920,10930]},{"content":"A reference to a <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value set by a previous call to <ph id=\"ph1\">`GetNextClientItem`</ph>; the initial value is returned by the <ph id=\"ph2\">`GetStartPosition`</ph> member function.","pos":[10943,11098],"source":" A reference to a **POSITION** value set by a previous call to `GetNextClientItem`; the initial value is returned by the `GetStartPosition` member function."},{"content":"Return Value","pos":[11108,11120]},{"pos":[11124,11221],"content":"A pointer to the next client item in the document, or <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if there are no more client items.","source":"A pointer to the next client item in the document, or **NULL** if there are no more client items."},{"content":"Remarks","pos":[11231,11238]},{"pos":[11242,11362],"content":"After each call, the value of <ph id=\"ph1\">`pos`</ph> is set for the next item in the document, which might or might not be a client item.","source":"After each call, the value of `pos` is set for the next item in the document, which might or might not be a client item."},{"content":"Example","pos":[11372,11379]},{"pos":[11394,11415],"content":"NVC_MFCOleContainer#1"},{"pos":[11521,11546],"content":"COleDocument::GetNextItem"},{"content":"Call this function repeatedly to access each of the items in your document.","pos":[11550,11625]},{"content":"Parameters","pos":[11705,11715]},{"content":"A reference to a <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value set by a previous call to <ph id=\"ph1\">`GetNextItem`</ph>; the initial value is returned by the <ph id=\"ph2\">`GetStartPosition`</ph> member function.","pos":[11728,11877],"source":" A reference to a **POSITION** value set by a previous call to `GetNextItem`; the initial value is returned by the `GetStartPosition` member function."},{"content":"Return Value","pos":[11887,11899]},{"content":"A pointer to the document item at the specified position.","pos":[11903,11960]},{"content":"Remarks","pos":[11970,11977]},{"content":"After each call, the value of <ph id=\"ph1\">`pos`</ph> is set to the <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value of the next item in the document.","pos":[11981,12083],"source":"After each call, the value of `pos` is set to the **POSITION** value of the next item in the document."},{"content":"If the retrieved element is the last element in the document, the new value of <ph id=\"ph1\">`pos`</ph> is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[12084,12181],"source":" If the retrieved element is the last element in the document, the new value of `pos` is **NULL**."},{"content":"Example","pos":[12191,12198]},{"pos":[12213,12234],"content":"NVC_MFCOleContainer#2"},{"pos":[12346,12377],"content":"COleDocument::GetNextServerItem"},{"content":"Call this function repeatedly to access each of the server items in your document.","pos":[12381,12463]},{"content":"Parameters","pos":[12547,12557]},{"content":"A reference to a <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value set by a previous call to <ph id=\"ph1\">`GetNextServerItem`</ph>; the initial value is returned by the <ph id=\"ph2\">`GetStartPosition`</ph> member function.","pos":[12570,12725],"source":" A reference to a **POSITION** value set by a previous call to `GetNextServerItem`; the initial value is returned by the `GetStartPosition` member function."},{"content":"Return Value","pos":[12735,12747]},{"pos":[12751,12848],"content":"A pointer to the next server item in the document, or <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if there are no more server items.","source":"A pointer to the next server item in the document, or **NULL** if there are no more server items."},{"content":"Remarks","pos":[12858,12865]},{"pos":[12869,12989],"content":"After each call, the value of <ph id=\"ph1\">`pos`</ph> is set for the next item in the document, which might or might not be a server item.","source":"After each call, the value of `pos` is set for the next item in the document, which might or might not be a server item."},{"content":"Example","pos":[12999,13006]},{"pos":[13021,13039],"content":"NVC_MFCOleServer#2"},{"pos":[13156,13192],"content":"COleDocument::GetPrimarySelectedItem"},{"content":"Called by the framework to retrieve the currently selected OLE item in the specified view.","pos":[13196,13286]},{"content":"Parameters","pos":[13373,13383]},{"content":"Pointer to the active view object displaying the document.","pos":[13398,13456]},{"content":"Return Value","pos":[13466,13478]},{"pos":[13482,13596],"content":"A pointer to the single, selected OLE item; <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if no OLE items are selected or if more than one is selected.","source":"A pointer to the single, selected OLE item; **NULL** if no OLE items are selected or if more than one is selected."},{"content":"Remarks","pos":[13606,13613]},{"content":"The default implementation searches the list of contained OLE items for a single selected item and returns a pointer to it.","pos":[13617,13740]},{"content":"If there is no item selected, or if there is more than one item selected, the function returns <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[13741,13845],"source":" If there is no item selected, or if there is more than one item selected, the function returns **NULL**."},{"content":"You must override the <ph id=\"ph1\">`CView::IsSelected`</ph> member function in your view class for this function to work.","pos":[13846,13949],"source":" You must override the `CView::IsSelected` member function in your view class for this function to work."},{"content":"Override this function if you have your own method of storing contained OLE items.","pos":[13950,14032]},{"pos":[14089,14119],"content":"COleDocument::GetStartPosition"},{"content":"Call this function to get the position of the first item in the document.","pos":[14123,14196]},{"content":"Return Value","pos":[14267,14279]},{"pos":[14283,14408],"content":"A <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value that can be used to begin iterating through the document's items; <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept> if the document has no items.","source":"A **POSITION** value that can be used to begin iterating through the document's items; **NULL** if the document has no items."},{"content":"Remarks","pos":[14418,14425]},{"pos":[14429,14515],"content":"Pass the value returned to <ph id=\"ph1\">`GetNextItem`</ph>, <ph id=\"ph2\">`GetNextClientItem`</ph>, or <ph id=\"ph3\">`GetNextServerItem`</ph>.","source":"Pass the value returned to `GetNextItem`, `GetNextClientItem`, or `GetNextServerItem`."},{"pos":[14569,14596],"content":"COleDocument::HasBlankItems"},{"content":"Call this function to determine whether the document contains any blank items.","pos":[14600,14678]},{"content":"Return Value","pos":[14734,14746]},{"content":"Nonzero if the document contains any blank items; otherwise 0.","pos":[14750,14812]},{"content":"Remarks","pos":[14822,14829]},{"content":"A blank item is one whose rectangle is empty.","pos":[14833,14878]},{"pos":[14935,14965],"content":"COleDocument::OnEditChangeIcon"},{"content":"Displays the OLE Change Icon dialog box and changes the icon representing the currently selected OLE item to the icon the user selects in the dialog box.","pos":[14969,15122]},{"content":"Remarks","pos":[15180,15187]},{"pos":[15210,15279],"content":"creates and launches a <ph id=\"ph1\">`COleChangeIconDialog`</ph> Change Icon dialog box.","source":" creates and launches a `COleChangeIconDialog` Change Icon dialog box."},{"pos":[15333,15360],"content":"COleDocument::OnEditConvert"},{"content":"Displays the OLE Convert dialog box and converts or activates the currently selected OLE item according to user selections in the dialog box.","pos":[15364,15505]},{"content":"Remarks","pos":[15560,15567]},{"pos":[15587,15649],"content":"creates and launches a <ph id=\"ph1\">`COleConvertDialog`</ph> Convert dialog box.","source":" creates and launches a `COleConvertDialog` Convert dialog box."},{"content":"An example of conversion is converting a Microsoft Word document into a WordPad document.","pos":[15656,15745]},{"pos":[15797,15822],"content":"COleDocument::OnEditLinks"},{"content":"Displays the OLE Edit/Links dialog box.","pos":[15826,15865]},{"content":"Remarks","pos":[15918,15925]},{"pos":[15943,16051],"content":"creates and launches a <ph id=\"ph1\">`COleLinksDialog`</ph> Links dialog box that allows the user to change the linked objects.","source":" creates and launches a `COleLinksDialog` Links dialog box that allows the user to change the linked objects."},{"pos":[16106,16134],"content":"COleDocument::OnFileSendMail"},{"content":"Sends a message via the resident mail host (if any) with the document as an attachment.","pos":[16138,16225]},{"content":"Remarks","pos":[16281,16288]},{"content":"calls <ph id=\"ph1\">`OnSaveDocument`</ph> to serialize (save) untitled and modified documents to a temporary file, which is then sent via electronic mail.","pos":[16309,16444],"source":" calls `OnSaveDocument` to serialize (save) untitled and modified documents to a temporary file, which is then sent via electronic mail."},{"content":"If the document has not been modified, a temporary file is not needed; the original is sent.","pos":[16445,16537]},{"content":"loads MAPI32.DLL if it has not already been loaded.","pos":[16555,16606]},{"pos":[16613,16725],"content":"Unlike the implementation of <ph id=\"ph1\">`OnFileSendMail`</ph> for <bpt id=\"p1\">**</bpt>CDocument<ept id=\"p1\">**</ept>, this function handles compound files correctly.","source":"Unlike the implementation of `OnFileSendMail` for **CDocument**, this function handles compound files correctly."},{"pos":[16732,16865],"content":"For more information, see the <bpt id=\"p1\">[</bpt>MAPI Topics<ept id=\"p1\">](../../mfc/mapi.md)</ept> and <bpt id=\"p2\">[</bpt>MAPI Support in MFC<ept id=\"p2\">](../../mfc/mapi-support-in-mfc.md)</ept> articles..","source":"For more information, see the [MAPI Topics](../../mfc/mapi.md) and [MAPI Support in MFC](../../mfc/mapi-support-in-mfc.md) articles.."},{"pos":[16917,16942],"content":"COleDocument::OnShowViews"},{"content":"The framework calls this function after the document's visibility state changes.","pos":[16946,17026]},{"content":"Parameters","pos":[17092,17102]},{"content":"Indicates whether the document has become visible or invisible.","pos":[17120,17183]},{"content":"Remarks","pos":[17193,17200]},{"content":"The default version of this function does nothing.","pos":[17204,17254]},{"content":"Override it if your application must perform any special processing when the document's visibility changes.","pos":[17255,17362]},{"pos":[17425,17461],"content":"COleDocument::OnUpdateEditChangeIcon"},{"content":"Called by the framework to update the Change Icon command on the Edit menu.","pos":[17465,17540]},{"content":"Parameters","pos":[17618,17628]},{"content":"A pointer to a <ph id=\"ph1\">`CCmdUI`</ph> structure that represents the menu that generated the update command.","pos":[17644,17737],"source":" A pointer to a `CCmdUI` structure that represents the menu that generated the update command."},{"content":"The update handler calls the <bpt id=\"p1\">**</bpt>Enable<ept id=\"p1\">**</ept> member function of the <ph id=\"ph1\">`CCmdUI`</ph> structure through <ph id=\"ph2\">`pCmdUI`</ph> to update the user interface.","pos":[17738,17866],"source":" The update handler calls the **Enable** member function of the `CCmdUI` structure through `pCmdUI` to update the user interface."},{"content":"Remarks","pos":[17876,17883]},{"content":"updates the command's user interface depending on whether or not a valid icon exists in the document.","pos":[17912,18013]},{"content":"Override this function to change the behavior.","pos":[18014,18060]},{"pos":[18122,18157],"content":"COleDocument::OnUpdateEditLinksMenu"},{"content":"Called by the framework to update the Links command on the Edit menu.","pos":[18161,18230]},{"content":"Parameters","pos":[18307,18317]},{"content":"A pointer to a <ph id=\"ph1\">`CCmdUI`</ph> structure that represents the menu that generated the update command.","pos":[18333,18426],"source":" A pointer to a `CCmdUI` structure that represents the menu that generated the update command."},{"content":"The update handler calls the <bpt id=\"p1\">**</bpt>Enable<ept id=\"p1\">**</ept> member function of the <ph id=\"ph1\">`CCmdUI`</ph> structure through <ph id=\"ph2\">`pCmdUI`</ph> to update the user interface.","pos":[18427,18555],"source":" The update handler calls the **Enable** member function of the `CCmdUI` structure through `pCmdUI` to update the user interface."},{"content":"Remarks","pos":[18565,18572]},{"content":"Starting with the first OLE item in the document, <ph id=\"ph1\">`OnUpdateEditLinksMenu`</ph> accesses each item, tests whether the item is a link, and, if it is a link, enables the Links command.","pos":[18576,18752],"source":"Starting with the first OLE item in the document, `OnUpdateEditLinksMenu` accesses each item, tests whether the item is a link, and, if it is a link, enables the Links command."},{"content":"Override this function to change the behavior.","pos":[18753,18799]},{"pos":[18862,18898],"content":"COleDocument::OnUpdateObjectVerbMenu"},{"pos":[18902,19113],"content":"Called by the framework to update the <bpt id=\"p1\">*</bpt>ObjectName<ept id=\"p1\">*</ept> command on the Edit menu and the Verb submenu accessed from the <bpt id=\"p2\">*</bpt>ObjectName<ept id=\"p2\">*</ept> command, where <bpt id=\"p3\">*</bpt>ObjectName<ept id=\"p3\">*</ept> is the name of the OLE object embedded in the document.","source":"Called by the framework to update the *ObjectName* command on the Edit menu and the Verb submenu accessed from the *ObjectName* command, where *ObjectName* is the name of the OLE object embedded in the document."},{"content":"Parameters","pos":[19191,19201]},{"content":"A pointer to a <ph id=\"ph1\">`CCmdUI`</ph> structure that represents the menu that generated the update command.","pos":[19217,19310],"source":" A pointer to a `CCmdUI` structure that represents the menu that generated the update command."},{"content":"The update handler calls the <bpt id=\"p1\">**</bpt>Enable<ept id=\"p1\">**</ept> member function of the <ph id=\"ph1\">`CCmdUI`</ph> structure through <ph id=\"ph2\">`pCmdUI`</ph> to update the user interface.","pos":[19311,19439],"source":" The update handler calls the **Enable** member function of the `CCmdUI` structure through `pCmdUI` to update the user interface."},{"content":"Remarks","pos":[19449,19456]},{"content":"updates the <bpt id=\"p1\">*</bpt>ObjectName<ept id=\"p1\">*</ept> command's user interface depending on whether or not a valid object exists in the document.","pos":[19485,19601],"source":" updates the *ObjectName* command's user interface depending on whether or not a valid object exists in the document."},{"content":"If an object exists, the <bpt id=\"p1\">*</bpt>ObjectName<ept id=\"p1\">*</ept> command on the Edit menu is enabled.","pos":[19602,19676],"source":" If an object exists, the *ObjectName* command on the Edit menu is enabled."},{"content":"When this menu command is selected, the Verb submenu is displayed.","pos":[19677,19743]},{"content":"The Verb submenu contains all the verb commands available for the object, such as Edit, Properties, and so on.","pos":[19744,19854]},{"content":"Override this function to change the behavior.","pos":[19855,19901]},{"pos":[19963,19998],"content":"COleDocument::OnUpdatePasteLinkMenu"},{"content":"Called by the framework to determine whether a linked OLE item can be pasted from the Clipboard.","pos":[20002,20098]},{"content":"Parameters","pos":[20175,20185]},{"content":"A pointer to a <ph id=\"ph1\">`CCmdUI`</ph> structure that represents the menu that generated the update command.","pos":[20201,20294],"source":" A pointer to a `CCmdUI` structure that represents the menu that generated the update command."},{"content":"The update handler calls the <bpt id=\"p1\">**</bpt>Enable<ept id=\"p1\">**</ept> member function of the <ph id=\"ph1\">`CCmdUI`</ph> structure through <ph id=\"ph2\">`pCmdUI`</ph> to update the user interface.","pos":[20295,20423],"source":" The update handler calls the **Enable** member function of the `CCmdUI` structure through `pCmdUI` to update the user interface."},{"content":"Remarks","pos":[20433,20440]},{"content":"The Paste Special menu command is enabled or disabled depending on whether the item can be pasted into the document or not.","pos":[20444,20567]},{"pos":[20625,20656],"content":"COleDocument::OnUpdatePasteMenu"},{"content":"Called by the framework to determine whether an embedded OLE item can be pasted from the Clipboard.","pos":[20660,20759]},{"content":"Parameters","pos":[20832,20842]},{"content":"A pointer to a <ph id=\"ph1\">`CCmdUI`</ph> structure that represents the menu that generated the update command.","pos":[20858,20951],"source":" A pointer to a `CCmdUI` structure that represents the menu that generated the update command."},{"content":"The update handler calls the <bpt id=\"p1\">**</bpt>Enable<ept id=\"p1\">**</ept> member function of the <ph id=\"ph1\">`CCmdUI`</ph> structure through <ph id=\"ph2\">`pCmdUI`</ph> to update the user interface.","pos":[20952,21080],"source":" The update handler calls the **Enable** member function of the `CCmdUI` structure through `pCmdUI` to update the user interface."},{"content":"Remarks","pos":[21090,21097]},{"content":"The Paste menu command and button are enabled or disabled depending on whether the item can be pasted into the document or not.","pos":[21101,21228]},{"pos":[21279,21303],"content":"COleDocument::RemoveItem"},{"content":"Call this function to remove an item from the document.","pos":[21307,21362]},{"content":"Parameters","pos":[21429,21439]},{"content":"Pointer to the document item to be removed.","pos":[21454,21497]},{"content":"Remarks","pos":[21507,21514]},{"pos":[21518,21652],"content":"You typically do not need to call this function explicitly; it is called by the destructors for <ph id=\"ph1\">`COleClientItem`</ph> and <ph id=\"ph2\">`COleServerItem`</ph>.","source":"You typically do not need to call this function explicitly; it is called by the destructors for `COleClientItem` and `COleServerItem`."},{"pos":[21711,21743],"content":"COleDocument::UpdateModifiedFlag"},{"content":"Call this function to mark the document as modified if any of the contained OLE items have been modified.","pos":[21747,21852]},{"content":"Remarks","pos":[21912,21919]},{"content":"This allows the framework to prompt the user to save the document before closing, even if the native data in the document has not been modified.","pos":[21923,22067]},{"content":"See Also","pos":[22076,22084]},{"content":"MFC Sample CONTAINER","pos":[22089,22109]},{"content":"MFC Sample MFCBIND","pos":[22145,22163]},{"content":"CDocument Class","pos":[22199,22214]},{"content":"Hierarchy Chart","pos":[22261,22276]}],"content":"---\ntitle: \"COleDocument Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"COleDocument\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"COleDocument class\"\n  - \"OLE documents, base class\"\n  - \"OLE containers, client items\"\n  - \"visual editing, OLE document base class\"\n  - \"OLE documents\"\n  - \"documents, OLE\"\nms.assetid: dc2ecb99-03e1-44c7-bb69-48056dd1b672\ncaps.latest.revision: 23\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# COleDocument Class\nThe base class for OLE documents that support visual editing.  \n  \n## Syntax  \n  \n```  \nclass COleDocument : public CDocument  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[COleDocument::COleDocument](#coledocument__coledocument)|Constructs a `COleDocument` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[COleDocument::AddItem](#coledocument__additem)|Adds an item to the list of items maintained by the document.|  \n|[COleDocument::ApplyPrintDevice](#coledocument__applyprintdevice)|Sets the print-target device for all client items in the document.|  \n|[COleDocument::EnableCompoundFile](#coledocument__enablecompoundfile)|Causes documents to be stored using the OLE Structured Storage file format.|  \n|[COleDocument::GetInPlaceActiveItem](#coledocument__getinplaceactiveitem)|Returns the OLE item that is currently in-place active.|  \n|[COleDocument::GetNextClientItem](#coledocument__getnextclientitem)|Gets the next client item for iterating.|  \n|[COleDocument::GetNextItem](#coledocument__getnextitem)|Gets the next document item for iterating.|  \n|[COleDocument::GetNextServerItem](#coledocument__getnextserveritem)|Gets the next server item for iterating.|  \n|[COleDocument::GetPrimarySelectedItem](#coledocument__getprimaryselecteditem)|Returns the primary selected OLE item in the document.|  \n|[COleDocument::GetStartPosition](#coledocument__getstartposition)|Gets the initial position to begin iteration.|  \n|[COleDocument::HasBlankItems](#coledocument__hasblankitems)|Checks for blank items in the document.|  \n|[COleDocument::OnShowViews](#coledocument__onshowviews)|Called when the document becomes visible or invisible.|  \n|[COleDocument::RemoveItem](#coledocument__removeitem)|Removes an item from the list of items maintained by the document.|  \n|[COleDocument::UpdateModifiedFlag](#coledocument__updatemodifiedflag)|Marks the document as modified if any of the contained OLE items have been modified.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[COleDocument::OnEditChangeIcon](#coledocument__oneditchangeicon)|Handles events in the Change Icon menu command.|  \n|[COleDocument::OnEditConvert](#coledocument__oneditconvert)|Handles the conversion of an embedded or linked object from one type to another.|  \n|[COleDocument::OnEditLinks](#coledocument__oneditlinks)|Handles events in the Links command on the Edit menu.|  \n|[COleDocument::OnFileSendMail](#coledocument__onfilesendmail)|Sends a mail message with the document attached.|  \n|[COleDocument::OnUpdateEditChangeIcon](#coledocument__onupdateeditchangeicon)|Called by the framework to update the command UI for the Edit/Change Icon menu option.|  \n|[COleDocument::OnUpdateEditLinksMenu](#coledocument__onupdateeditlinksmenu)|Called by the framework to update the command UI for the Edit/Links menu option.|  \n|[COleDocument::OnUpdateObjectVerbMenu](#coledocument__onupdateobjectverbmenu)|Called by the framework to update the command UI for the Edit/ *ObjectName* menu option and the Verb submenu accessed from Edit/ *ObjectName*.|  \n|[COleDocument::OnUpdatePasteLinkMenu](#coledocument__onupdatepastelinkmenu)|Called by the framework to update the command UI for the Paste Special menu option.|  \n|[COleDocument::OnUpdatePasteMenu](#coledocument__onupdatepastemenu)|Called by the framework to update the command UI for the Paste menu option.|  \n  \n## Remarks  \n `COleDocument` is derived from **CDocument**, which allows your OLE applications to use the document/view architecture provided by the Microsoft Foundation Class Library.  \n  \n `COleDocument` treats a document as a collection of [CDocItem](../../mfc/reference/cdocitem-class.md) objects to handle OLE items. Both container and server applications require such an architecture because their documents must be able to contain OLE items. The [COleServerItem](../../mfc/reference/coleserveritem-class.md) and [COleClientItem](../../mfc/reference/coleclientitem-class.md) classes, both derived from `CDocItem`, manage the interactions between applications and OLE items.  \n  \n If you are writing a simple container application, derive your document class from `COleDocument`. If you are writing a container application that supports linking to the embedded items contained by its documents, derive your document class from [COleLinkingDoc](../../mfc/reference/colelinkingdoc-class.md). If you are writing a server application or combination container/server, derive your document class from [COleServerDoc](../../mfc/reference/coleserverdoc-class.md). `COleLinkingDoc` and `COleServerDoc` are derived from `COleDocument`, so these classes inherit all the services available in `COleDocument` and **CDocument**.  \n  \n To use `COleDocument`, derive a class from it and add functionality to manage the application's non-OLE data as well as embedded or linked items. If you define `CDocItem`-derived classes to store the application's native data, you can use the default implementation defined by `COleDocument` to store both your OLE and non-OLE data. You can also design your own data structures for storing your non-OLE data separately from the OLE items. For more information, see the article [Containers: Compound Files](../../mfc/containers-compound-files.md)..  \n  \n **CDocument** supports sending your document via mail if mail support (MAPI) is present. `COleDocument` has updated [OnFileSendMail](#coledocument__onfilesendmail) to handle compound documents correctly. For more information, see the articles [MAPI](../../mfc/mapi.md) and [MAPI Support in MFC](../../mfc/mapi-support-in-mfc.md)..  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CDocument](../../mfc/reference/cdocument-class.md)  \n  \n `COleDocument`  \n  \n## Requirements  \n **Header:** afxole.h  \n  \n##  <a name=\"coledocument__additem\"></a>  COleDocument::AddItem  \n Call this function to add an item to the document.  \n  \n```  \nvirtual void AddItem(CDocItem* pItem);\n```  \n  \n### Parameters  \n `pItem`  \n Pointer to the document item being added.  \n  \n### Remarks  \n You do not need to call this function explicitly when it is called by the `COleClientItem` or `COleServerItem` constructor that accepts a pointer to a document.  \n  \n##  <a name=\"coledocument__applyprintdevice\"></a>  COleDocument::ApplyPrintDevice  \n Call this function to change the print-target device for all embedded [COleClientItem](../../mfc/reference/coleclientitem-class.md) items in your application's container document.  \n  \n```  \nBOOL ApplyPrintDevice(const DVTARGETDEVICE* ptd);\n\n \nBOOL ApplyPrintDevice(const PRINTDLG* ppd);\n```  \n  \n### Parameters  \n `ptd`  \n Pointer to a **DVTARGETDEVICE** data structure, which contains information about the new print-target device. Can be **NULL**.  \n  \n `ppd`  \n Pointer to a **PRINTDLG** data structure, which contains information about the new print-target device. Can be **NULL**.  \n  \n### Return Value  \n Nonzero if the function was successful; otherwise 0.  \n  \n### Remarks  \n This function updates the print-target device for all items but does not refresh the presentation cache for those items. To update the presentation cache for an item, call [COleClientItem::UpdateLink](../../mfc/reference/coleclientitem-class.md#coleclientitem__updatelink).  \n  \n The arguments to this function contain information that OLE uses to identify the target device. The [PRINTDLG](http://msdn.microsoft.com/library/windows/desktop/ms646843) structure contains information that Windows uses to initialize the common Print dialog box. After the user closes the dialog box, Windows returns information about the user's selections in this structure. The `m_pd` member of a [CPrintDialog](../../mfc/reference/cprintdialog-class.md) object is a **PRINTDLG** structure.  \n  \n For more information, see the [PRINTDLG](http://msdn.microsoft.com/library/windows/desktop/ms646843) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n For more information, see the [DVTARGETDEVICE](http://msdn.microsoft.com/library/windows/desktop/ms686613) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"coledocument__coledocument\"></a>  COleDocument::COleDocument  \n Constructs a `COleDocument` object.  \n  \n```  \nCOleDocument();\n```  \n  \n##  <a name=\"coledocument__enablecompoundfile\"></a>  COleDocument::EnableCompoundFile  \n Call this function if you want to store the document using the compound-file format.  \n  \n```  \nvoid EnableCompoundFile(BOOL bEnable = TRUE);\n```  \n  \n### Parameters  \n `bEnable`  \n Specifies whether compound file support is enabled or disabled.  \n  \n### Remarks  \n This is also called structured storage. You typically call this function from the constructor of your `COleDocument`-derived class. For more information about compound documents, see the article [Containers: Compound Files](../../mfc/containers-compound-files.md)..  \n  \n If you do not call this member function, documents will be stored in a nonstructured (\"flat\") file format.  \n  \n After compound file support is enabled or disabled for a document, the setting should not be changed during the document's lifetime.  \n  \n##  <a name=\"coledocument__getinplaceactiveitem\"></a>  COleDocument::GetInPlaceActiveItem  \n Call this function to get the OLE item that is currently activated in place in the frame window containing the view identified by `pWnd`.  \n  \n```  \nvirtual COleClientItem* GetInPlaceActiveItem(CWnd* pWnd);\n```  \n  \n### Parameters  \n `pWnd`  \n Pointer to the window that displays the container document.  \n  \n### Return Value  \n A pointer to the single, in-place active OLE item; **NULL** if there is no OLE item currently in the \"in-place active\" state.  \n  \n##  <a name=\"coledocument__getnextclientitem\"></a>  COleDocument::GetNextClientItem  \n Call this function repeatedly to access each of the client items in your document.  \n  \n```  \nCOleClientItem* GetNextClientItem(POSITION& pos) const;\n\n \n```  \n  \n### Parameters  \n `pos`  \n A reference to a **POSITION** value set by a previous call to `GetNextClientItem`; the initial value is returned by the `GetStartPosition` member function.  \n  \n### Return Value  \n A pointer to the next client item in the document, or **NULL** if there are no more client items.  \n  \n### Remarks  \n After each call, the value of `pos` is set for the next item in the document, which might or might not be a client item.  \n  \n### Example  \n [!code-cpp[NVC_MFCOleContainer#1](../../mfc/codesnippet/cpp/coledocument-class_1.cpp)]  \n  \n##  <a name=\"coledocument__getnextitem\"></a>  COleDocument::GetNextItem  \n Call this function repeatedly to access each of the items in your document.  \n  \n```  \nvirtual CDocItem* GetNextItem(POSITION& pos) const;\n\n \n```  \n  \n### Parameters  \n `pos`  \n A reference to a **POSITION** value set by a previous call to `GetNextItem`; the initial value is returned by the `GetStartPosition` member function.  \n  \n### Return Value  \n A pointer to the document item at the specified position.  \n  \n### Remarks  \n After each call, the value of `pos` is set to the **POSITION** value of the next item in the document. If the retrieved element is the last element in the document, the new value of `pos` is **NULL**.  \n  \n### Example  \n [!code-cpp[NVC_MFCOleContainer#2](../../mfc/codesnippet/cpp/coledocument-class_2.cpp)]  \n  \n##  <a name=\"coledocument__getnextserveritem\"></a>  COleDocument::GetNextServerItem  \n Call this function repeatedly to access each of the server items in your document.  \n  \n```  \nCOleServerItem* GetNextServerItem(POSITION& pos) const;\n\n \n```  \n  \n### Parameters  \n `pos`  \n A reference to a **POSITION** value set by a previous call to `GetNextServerItem`; the initial value is returned by the `GetStartPosition` member function.  \n  \n### Return Value  \n A pointer to the next server item in the document, or **NULL** if there are no more server items.  \n  \n### Remarks  \n After each call, the value of `pos` is set for the next item in the document, which might or might not be a server item.  \n  \n### Example  \n [!code-cpp[NVC_MFCOleServer#2](../../mfc/codesnippet/cpp/coledocument-class_3.cpp)]  \n  \n##  <a name=\"coledocument__getprimaryselecteditem\"></a>  COleDocument::GetPrimarySelectedItem  \n Called by the framework to retrieve the currently selected OLE item in the specified view.  \n  \n```  \nvirtual COleClientItem* GetPrimarySelectedItem(CView* pView);\n```  \n  \n### Parameters  \n `pView`  \n Pointer to the active view object displaying the document.  \n  \n### Return Value  \n A pointer to the single, selected OLE item; **NULL** if no OLE items are selected or if more than one is selected.  \n  \n### Remarks  \n The default implementation searches the list of contained OLE items for a single selected item and returns a pointer to it. If there is no item selected, or if there is more than one item selected, the function returns **NULL**. You must override the `CView::IsSelected` member function in your view class for this function to work. Override this function if you have your own method of storing contained OLE items.  \n  \n##  <a name=\"coledocument__getstartposition\"></a>  COleDocument::GetStartPosition  \n Call this function to get the position of the first item in the document.  \n  \n```  \nvirtual POSITION GetStartPosition() const;\n\n \n```  \n  \n### Return Value  \n A **POSITION** value that can be used to begin iterating through the document's items; **NULL** if the document has no items.  \n  \n### Remarks  \n Pass the value returned to `GetNextItem`, `GetNextClientItem`, or `GetNextServerItem`.  \n  \n##  <a name=\"coledocument__hasblankitems\"></a>  COleDocument::HasBlankItems  \n Call this function to determine whether the document contains any blank items.  \n  \n```  \nBOOL HasBlankItems() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if the document contains any blank items; otherwise 0.  \n  \n### Remarks  \n A blank item is one whose rectangle is empty.  \n  \n##  <a name=\"coledocument__oneditchangeicon\"></a>  COleDocument::OnEditChangeIcon  \n Displays the OLE Change Icon dialog box and changes the icon representing the currently selected OLE item to the icon the user selects in the dialog box.  \n  \n```  \nafx_msg void OnEditChangeIcon();\n```  \n  \n### Remarks  \n `OnEditChangeIcon` creates and launches a `COleChangeIconDialog` Change Icon dialog box.  \n  \n##  <a name=\"coledocument__oneditconvert\"></a>  COleDocument::OnEditConvert  \n Displays the OLE Convert dialog box and converts or activates the currently selected OLE item according to user selections in the dialog box.  \n  \n```  \nafx_msg void OnEditConvert();\n```  \n  \n### Remarks  \n `OnEditConvert` creates and launches a `COleConvertDialog` Convert dialog box.  \n  \n An example of conversion is converting a Microsoft Word document into a WordPad document.  \n  \n##  <a name=\"coledocument__oneditlinks\"></a>  COleDocument::OnEditLinks  \n Displays the OLE Edit/Links dialog box.  \n  \n```  \nafx_msg void OnEditLinks();\n```  \n  \n### Remarks  \n `OnEditLinks` creates and launches a `COleLinksDialog` Links dialog box that allows the user to change the linked objects.  \n  \n##  <a name=\"coledocument__onfilesendmail\"></a>  COleDocument::OnFileSendMail  \n Sends a message via the resident mail host (if any) with the document as an attachment.  \n  \n```  \nafx_msg void OnFileSendMail();\n```  \n  \n### Remarks  \n `OnFileSendMail` calls `OnSaveDocument` to serialize (save) untitled and modified documents to a temporary file, which is then sent via electronic mail. If the document has not been modified, a temporary file is not needed; the original is sent. `OnFileSendMail` loads MAPI32.DLL if it has not already been loaded.  \n  \n Unlike the implementation of `OnFileSendMail` for **CDocument**, this function handles compound files correctly.  \n  \n For more information, see the [MAPI Topics](../../mfc/mapi.md) and [MAPI Support in MFC](../../mfc/mapi-support-in-mfc.md) articles..  \n  \n##  <a name=\"coledocument__onshowviews\"></a>  COleDocument::OnShowViews  \n The framework calls this function after the document's visibility state changes.  \n  \n```  \nvirtual void OnShowViews(BOOL bVisible);\n```  \n  \n### Parameters  \n `bVisible`  \n Indicates whether the document has become visible or invisible.  \n  \n### Remarks  \n The default version of this function does nothing. Override it if your application must perform any special processing when the document's visibility changes.  \n  \n##  <a name=\"coledocument__onupdateeditchangeicon\"></a>  COleDocument::OnUpdateEditChangeIcon  \n Called by the framework to update the Change Icon command on the Edit menu.  \n  \n```  \nafx_msg void OnUpdateEditChangeIcon(CCmdUI* pCmdUI);\n```  \n  \n### Parameters  \n `pCmdUI`  \n A pointer to a `CCmdUI` structure that represents the menu that generated the update command. The update handler calls the **Enable** member function of the `CCmdUI` structure through `pCmdUI` to update the user interface.  \n  \n### Remarks  \n `OnUpdateEditChangeIcon` updates the command's user interface depending on whether or not a valid icon exists in the document. Override this function to change the behavior.  \n  \n##  <a name=\"coledocument__onupdateeditlinksmenu\"></a>  COleDocument::OnUpdateEditLinksMenu  \n Called by the framework to update the Links command on the Edit menu.  \n  \n```  \nafx_msg void OnUpdateEditLinksMenu(CCmdUI* pCmdUI);\n```  \n  \n### Parameters  \n `pCmdUI`  \n A pointer to a `CCmdUI` structure that represents the menu that generated the update command. The update handler calls the **Enable** member function of the `CCmdUI` structure through `pCmdUI` to update the user interface.  \n  \n### Remarks  \n Starting with the first OLE item in the document, `OnUpdateEditLinksMenu` accesses each item, tests whether the item is a link, and, if it is a link, enables the Links command. Override this function to change the behavior.  \n  \n##  <a name=\"coledocument__onupdateobjectverbmenu\"></a>  COleDocument::OnUpdateObjectVerbMenu  \n Called by the framework to update the *ObjectName* command on the Edit menu and the Verb submenu accessed from the *ObjectName* command, where *ObjectName* is the name of the OLE object embedded in the document.  \n  \n```  \nafx_msg void OnUpdateObjectVerbMenu(CCmdUI* pCmdUI);\n```  \n  \n### Parameters  \n `pCmdUI`  \n A pointer to a `CCmdUI` structure that represents the menu that generated the update command. The update handler calls the **Enable** member function of the `CCmdUI` structure through `pCmdUI` to update the user interface.  \n  \n### Remarks  \n `OnUpdateObjectVerbMenu` updates the *ObjectName* command's user interface depending on whether or not a valid object exists in the document. If an object exists, the *ObjectName* command on the Edit menu is enabled. When this menu command is selected, the Verb submenu is displayed. The Verb submenu contains all the verb commands available for the object, such as Edit, Properties, and so on. Override this function to change the behavior.  \n  \n##  <a name=\"coledocument__onupdatepastelinkmenu\"></a>  COleDocument::OnUpdatePasteLinkMenu  \n Called by the framework to determine whether a linked OLE item can be pasted from the Clipboard.  \n  \n```  \nafx_msg void OnUpdatePasteLinkMenu(CCmdUI* pCmdUI);\n```  \n  \n### Parameters  \n `pCmdUI`  \n A pointer to a `CCmdUI` structure that represents the menu that generated the update command. The update handler calls the **Enable** member function of the `CCmdUI` structure through `pCmdUI` to update the user interface.  \n  \n### Remarks  \n The Paste Special menu command is enabled or disabled depending on whether the item can be pasted into the document or not.  \n  \n##  <a name=\"coledocument__onupdatepastemenu\"></a>  COleDocument::OnUpdatePasteMenu  \n Called by the framework to determine whether an embedded OLE item can be pasted from the Clipboard.  \n  \n```  \nafx_msg void OnUpdatePasteMenu(CCmdUI* pCmdUI);\n```  \n  \n### Parameters  \n `pCmdUI`  \n A pointer to a `CCmdUI` structure that represents the menu that generated the update command. The update handler calls the **Enable** member function of the `CCmdUI` structure through `pCmdUI` to update the user interface.  \n  \n### Remarks  \n The Paste menu command and button are enabled or disabled depending on whether the item can be pasted into the document or not.  \n  \n##  <a name=\"coledocument__removeitem\"></a>  COleDocument::RemoveItem  \n Call this function to remove an item from the document.  \n  \n```  \nvirtual void RemoveItem(CDocItem* pItem);\n```  \n  \n### Parameters  \n `pItem`  \n Pointer to the document item to be removed.  \n  \n### Remarks  \n You typically do not need to call this function explicitly; it is called by the destructors for `COleClientItem` and `COleServerItem`.  \n  \n##  <a name=\"coledocument__updatemodifiedflag\"></a>  COleDocument::UpdateModifiedFlag  \n Call this function to mark the document as modified if any of the contained OLE items have been modified.  \n  \n```  \nvirtual void UpdateModifiedFlag();\n```  \n  \n### Remarks  \n This allows the framework to prompt the user to save the document before closing, even if the native data in the document has not been modified.  \n  \n## See Also  \n [MFC Sample CONTAINER](../../visual-cpp-samples.md)   \n [MFC Sample MFCBIND](../../visual-cpp-samples.md)   \n [CDocument Class](../../mfc/reference/cdocument-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)\n\n\n\n"}