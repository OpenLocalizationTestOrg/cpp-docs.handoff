{"nodes":[{"pos":[12,40],"content":"CEdit Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CEdit Class | Microsoft Docs","pos":[0,28]}]},{"content":"CEdit Class","pos":[839,850]},{"content":"Provides the functionality of a Windows edit control.","pos":[851,904]},{"content":"Syntax","pos":[913,919]},{"content":"Members","pos":[971,978]},{"content":"Public Constructors","pos":[988,1007]},{"content":"Name","pos":[1014,1018]},{"content":"Description","pos":[1019,1030]},{"content":"CEdit::CEdit","pos":[1069,1081]},{"pos":[1098,1134],"content":"Constructs a <ph id=\"ph1\">`CEdit`</ph> control object.","source":"Constructs a `CEdit` control object."},{"content":"Public Methods","pos":[1145,1159]},{"content":"Name","pos":[1166,1170]},{"content":"Description","pos":[1171,1182]},{"content":"CEdit::CanUndo","pos":[1221,1235]},{"content":"Determines whether an edit-control operation can be undone.","pos":[1254,1313]},{"content":"CEdit::CharFromPos","pos":[1319,1337]},{"content":"Retrieves the line and character indexes for the character closest to a specified position.","pos":[1360,1451]},{"content":"CEdit::Clear","pos":[1457,1469]},{"content":"Deletes (clears) the current selection (if any) in the edit control.","pos":[1486,1554]},{"content":"CEdit::Copy","pos":[1560,1571]},{"pos":[1587,1684],"content":"Copies the current selection (if any) in the edit control to the Clipboard in <bpt id=\"p1\">**</bpt>CF_TEXT<ept id=\"p1\">**</ept> format.","source":"Copies the current selection (if any) in the edit control to the Clipboard in **CF_TEXT** format."},{"content":"CEdit::Create","pos":[1690,1703]},{"pos":[1721,1792],"content":"Creates the Windows edit control and attaches it to the <ph id=\"ph1\">`CEdit`</ph> object.","source":"Creates the Windows edit control and attaches it to the `CEdit` object."},{"content":"CEdit::Cut","pos":[1798,1808]},{"pos":[1823,1956],"content":"Deletes (cuts) the current selection (if any) in the edit control and copies the deleted text to the Clipboard in <bpt id=\"p1\">**</bpt>CF_TEXT<ept id=\"p1\">**</ept> format.","source":"Deletes (cuts) the current selection (if any) in the edit control and copies the deleted text to the Clipboard in **CF_TEXT** format."},{"content":"CEdit::EmptyUndoBuffer","pos":[1962,1984]},{"content":"Resets (clears) the undo flag of an edit control.","pos":[2011,2060]},{"content":"CEdit::FmtLines","pos":[2066,2081]},{"content":"Sets the inclusion of soft line-break characters on or off within a multiple-line edit control.","pos":[2101,2196]},{"content":"CEdit::GetCueBanner","pos":[2202,2221]},{"content":"Retrieves the text that is displayed as the text cue, or tip, in an edit control when the control is empty and does not have focus.","pos":[2245,2376]},{"content":"CEdit::GetFirstVisibleLine","pos":[2382,2408]},{"content":"Determines the topmost visible line in an edit control.","pos":[2439,2494]},{"content":"CEdit::GetHandle","pos":[2500,2516]},{"content":"Retrieves a handle to the memory that is currently allocated for a multiple-line edit control.","pos":[2537,2631]},{"content":"CEdit::GetHighlight","pos":[2637,2656]},{"content":"Gets the indexes of the starting and ending characters in a range of text that is highlighted in the current edit control.","pos":[2680,2802]},{"content":"CEdit::GetLimitText","pos":[2808,2827]},{"pos":[2851,2908],"content":"Gets the maximum amount of text this <ph id=\"ph1\">`CEdit`</ph> can contain.","source":"Gets the maximum amount of text this `CEdit` can contain."},{"content":"CEdit::GetLine","pos":[2914,2928]},{"content":"Retrieves a line of text from an edit control.","pos":[2947,2993]},{"content":"CEdit::GetLineCount","pos":[2999,3018]},{"content":"Retrieves the number of lines in a multiple-line edit control.","pos":[3042,3104]},{"content":"CEdit::GetMargins","pos":[3110,3127]},{"pos":[3149,3198],"content":"Gets the left and right margins for this <ph id=\"ph1\">`CEdit`</ph>.","source":"Gets the left and right margins for this `CEdit`."},{"content":"CEdit::GetModify","pos":[3204,3220]},{"content":"Determines whether the contents of an edit control have been modified.","pos":[3241,3311]},{"content":"CEdit::GetPasswordChar","pos":[3317,3339]},{"content":"Retrieves the password character displayed in an edit control when the user enters text.","pos":[3366,3454]},{"content":"CEdit::GetRect","pos":[3460,3474]},{"content":"Gets the formatting rectangle of an edit control.","pos":[3493,3542]},{"content":"CEdit::GetSel","pos":[3548,3561]},{"content":"Gets the first and last character positions of the current selection in an edit control.","pos":[3579,3667]},{"content":"CEdit::HideBalloonTip","pos":[3673,3694]},{"content":"Hides any balloon tip associated with the current edit control.","pos":[3720,3783]},{"content":"CEdit::LimitText","pos":[3789,3805]},{"content":"Limits the length of the text that the user can enter into an edit control.","pos":[3826,3901]},{"content":"CEdit::LineFromChar","pos":[3907,3926]},{"content":"Retrieves the line number of the line that contains the specified character index.","pos":[3950,4032]},{"content":"CEdit::LineIndex","pos":[4038,4054]},{"content":"Retrieves the character index of a line within a multiple-line edit control.","pos":[4075,4151]},{"content":"CEdit::LineLength","pos":[4157,4174]},{"content":"Retrieves the length of a line in an edit control.","pos":[4196,4246]},{"content":"CEdit::LineScroll","pos":[4252,4269]},{"content":"Scrolls the text of a multiple-line edit control.","pos":[4291,4340]},{"content":"CEdit::Paste","pos":[4346,4358]},{"content":"Inserts the data from the Clipboard into the edit control at the current cursor position.","pos":[4375,4464]},{"content":"Data is inserted only if the Clipboard contains data in <bpt id=\"p1\">**</bpt>CF_TEXT<ept id=\"p1\">**</ept> format.","pos":[4465,4540],"source":" Data is inserted only if the Clipboard contains data in **CF_TEXT** format."},{"content":"CEdit::PosFromChar","pos":[4546,4564]},{"content":"Retrieves the coordinates of the upper-left corner of a specified character index.","pos":[4587,4669]},{"content":"CEdit::ReplaceSel","pos":[4675,4692]},{"content":"Replaces the current selection in an edit control with the specified text.","pos":[4714,4788]},{"content":"CEdit::SetCueBanner","pos":[4794,4813]},{"content":"Sets the text that is displayed as the text cue, or tip, in an edit control when the control is empty and does not have focus.","pos":[4837,4963]},{"content":"CEdit::SetHandle","pos":[4969,4985]},{"content":"Sets the handle to the local memory that will be used by a multiple-line edit control.","pos":[5006,5092]},{"content":"CEdit::SetHighlight","pos":[5098,5117]},{"content":"Highlights a range of text that is displayed in the current edit control.","pos":[5141,5214]},{"content":"CEdit::SetLimitText","pos":[5220,5239]},{"pos":[5263,5320],"content":"Sets the maximum amount of text this <ph id=\"ph1\">`CEdit`</ph> can contain.","source":"Sets the maximum amount of text this `CEdit` can contain."},{"content":"CEdit::SetMargins","pos":[5326,5343]},{"pos":[5365,5414],"content":"Sets the left and right margins for this <ph id=\"ph1\">`CEdit`</ph>.","source":"Sets the left and right margins for this `CEdit`."},{"content":"CEdit::SetModify","pos":[5420,5436]},{"content":"Sets or clears the modification flag for an edit control.","pos":[5457,5514]},{"content":"CEdit::SetPasswordChar","pos":[5520,5542]},{"content":"Sets or removes a password character displayed in an edit control when the user enters text.","pos":[5569,5661]},{"content":"CEdit::SetReadOnly","pos":[5667,5685]},{"content":"Sets the read-only state of an edit control.","pos":[5708,5752]},{"content":"CEdit::SetRect","pos":[5758,5772]},{"content":"Sets the formatting rectangle of a multiple-line edit control and updates the control.","pos":[5791,5877]},{"content":"CEdit::SetRectNP","pos":[5883,5899]},{"content":"Sets the formatting rectangle of a multiple-line edit control without redrawing the control window.","pos":[5920,6019]},{"content":"CEdit::SetSel","pos":[6025,6038]},{"content":"Selects a range of characters in an edit control.","pos":[6056,6105]},{"content":"CEdit::SetTabStops","pos":[6111,6129]},{"content":"Sets the tab stops in a multiple-line edit control.","pos":[6152,6203]},{"content":"CEdit::ShowBalloonTip","pos":[6209,6230]},{"content":"Displays a balloon tip that is associated with the current edit control.","pos":[6256,6328]},{"content":"CEdit::Undo","pos":[6334,6345]},{"content":"Reverses the last edit-control operation.","pos":[6361,6402]},{"content":"Remarks","pos":[6412,6419]},{"content":"An edit control is a rectangular child window in which the user can enter text.","pos":[6423,6502]},{"content":"You can create an edit control either from a dialog template or directly in your code.","pos":[6509,6595]},{"content":"In both cases, first call the constructor <ph id=\"ph1\">`CEdit`</ph> to construct the <ph id=\"ph2\">`CEdit`</ph> object, then call the <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](#cedit__create)</ept> member function to create the Windows edit control and attach it to the <ph id=\"ph3\">`CEdit`</ph> object.","pos":[6596,6805],"source":" In both cases, first call the constructor `CEdit` to construct the `CEdit` object, then call the [Create](#cedit__create) member function to create the Windows edit control and attach it to the `CEdit` object."},{"content":"Construction can be a one-step process in a class derived from <ph id=\"ph1\">`CEdit`</ph>.","pos":[6812,6883],"source":"Construction can be a one-step process in a class derived from `CEdit`."},{"content":"Write a constructor for the derived class and call <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> from within the constructor.","pos":[6884,6974],"source":" Write a constructor for the derived class and call **Create** from within the constructor."},{"content":"inherits significant functionality from <ph id=\"ph1\">`CWnd`</ph>.","pos":[6989,7036],"source":" inherits significant functionality from `CWnd`."},{"content":"To set and retrieve text from a <ph id=\"ph1\">`CEdit`</ph> object, use the <ph id=\"ph2\">`CWnd`</ph> member functions <bpt id=\"p1\">[</bpt>SetWindowText<ept id=\"p1\">](cwnd-class.md#cwnd__setwindowtext)</ept> and <bpt id=\"p2\">[</bpt>GetWindowText<ept id=\"p2\">](cwnd-class.md#cwnd__getwindowtext)</ept>, which set or get the entire contents of an edit control, even if it is a multiline control.","pos":[7037,7315],"source":" To set and retrieve text from a `CEdit` object, use the `CWnd` member functions [SetWindowText](cwnd-class.md#cwnd__setwindowtext) and [GetWindowText](cwnd-class.md#cwnd__getwindowtext), which set or get the entire contents of an edit control, even if it is a multiline control."},{"content":"Text lines in a multiline control are separated by '\\r\\n' character sequences.","pos":[7316,7394]},{"content":"Also, if an edit control is multiline, get and set part of the control's text by calling the <ph id=\"ph1\">`CEdit`</ph> member functions <bpt id=\"p1\">[</bpt>GetLine<ept id=\"p1\">](#cedit__getline)</ept>, <bpt id=\"p2\">[</bpt>SetSel<ept id=\"p2\">](#cedit__setsel)</ept>, <bpt id=\"p3\">[</bpt>GetSel<ept id=\"p3\">](#cedit__getsel)</ept>, and <bpt id=\"p4\">[</bpt>ReplaceSel<ept id=\"p4\">](#cedit__replacesel)</ept>.","pos":[7395,7630],"source":" Also, if an edit control is multiline, get and set part of the control's text by calling the `CEdit` member functions [GetLine](#cedit__getline), [SetSel](#cedit__setsel), [GetSel](#cedit__getsel), and [ReplaceSel](#cedit__replacesel)."},{"pos":[7637,7866],"content":"If you want to handle Windows notification messages sent by an edit control to its parent (usually a class derived from <ph id=\"ph1\">`CDialog`</ph>), add a message-map entry and message-handler member function to the parent class for each message.","source":"If you want to handle Windows notification messages sent by an edit control to its parent (usually a class derived from `CDialog`), add a message-map entry and message-handler member function to the parent class for each message."},{"content":"Each message-map entry takes the following form:","pos":[7873,7921]},{"pos":[7928,7974],"content":"<bpt id=\"p1\">**</bpt>ON_<ept id=\"p1\">**</ept>Notification <bpt id=\"p2\">**</bpt>(<ept id=\"p2\">**</ept> <bpt id=\"p3\">*</bpt>id, memberFxn<ept id=\"p3\">*</ept><bpt id=\"p4\">**</bpt>)<ept id=\"p4\">**</ept>","source":"**ON_**Notification **(** *id, memberFxn***)**"},{"pos":[7981,8170],"content":"where <ph id=\"ph1\">`id`</ph> specifies the child window ID of the edit control sending the notification, and <ph id=\"ph2\">`memberFxn`</ph> is the name of the parent member function you have written to handle the notification.","source":"where `id` specifies the child window ID of the edit control sending the notification, and `memberFxn` is the name of the parent member function you have written to handle the notification."},{"content":"The parent's function prototype is as follows:","pos":[8177,8223]},{"pos":[8230,8265],"content":"<bpt id=\"p1\">**</bpt>afx_msg<ept id=\"p1\">**</ept> void memberFxn <bpt id=\"p2\">**</bpt>( );<ept id=\"p2\">**</ept>","source":"**afx_msg** void memberFxn **( );**"},{"content":"Following is a list of potential message-map entries and a description of the cases in which they would be sent to the parent:","pos":[8272,8398]},{"content":"<bpt id=\"p1\">**</bpt>ON_EN_CHANGE<ept id=\"p1\">**</ept> The user has taken an action that may have altered text in an edit control.","pos":[8406,8498],"source":"**ON_EN_CHANGE** The user has taken an action that may have altered text in an edit control."},{"content":"Unlike the <bpt id=\"p1\">**</bpt>EN_UPDATE<ept id=\"p1\">**</ept> notification message, this notification message is sent after Windows updates the display.","pos":[8499,8614],"source":" Unlike the **EN_UPDATE** notification message, this notification message is sent after Windows updates the display."},{"pos":[8622,8715],"content":"<bpt id=\"p1\">**</bpt>ON_EN_ERRSPACE<ept id=\"p1\">**</ept> The edit control cannot allocate enough memory to meet a specific request.","source":"**ON_EN_ERRSPACE** The edit control cannot allocate enough memory to meet a specific request."},{"content":"<bpt id=\"p1\">**</bpt>ON_EN_HSCROLL<ept id=\"p1\">**</ept> The user clicks an edit control's horizontal scroll bar.","pos":[8723,8797],"source":"**ON_EN_HSCROLL** The user clicks an edit control's horizontal scroll bar."},{"content":"The parent window is notified before the screen is updated.","pos":[8798,8857]},{"pos":[8865,8924],"content":"<bpt id=\"p1\">**</bpt>ON_EN_KILLFOCUS<ept id=\"p1\">**</ept> The edit control loses the input focus.","source":"**ON_EN_KILLFOCUS** The edit control loses the input focus."},{"content":"<bpt id=\"p1\">**</bpt>ON_EN_MAXTEXT<ept id=\"p1\">**</ept> The current insertion has exceeded the specified number of characters for the edit control and has been truncated.","pos":[8932,9064],"source":"**ON_EN_MAXTEXT** The current insertion has exceeded the specified number of characters for the edit control and has been truncated."},{"content":"Also sent when an edit control does not have the <bpt id=\"p1\">**</bpt>ES_AUTOHSCROLL<ept id=\"p1\">**</ept> style and the number of characters to be inserted would exceed the width of the edit control.","pos":[9065,9226],"source":" Also sent when an edit control does not have the **ES_AUTOHSCROLL** style and the number of characters to be inserted would exceed the width of the edit control."},{"content":"Also sent when an edit control does not have the <bpt id=\"p1\">**</bpt>ES_AUTOVSCROLL<ept id=\"p1\">**</ept> style and the total number of lines resulting from a text insertion would exceed the height of the edit control.","pos":[9227,9407],"source":" Also sent when an edit control does not have the **ES_AUTOVSCROLL** style and the total number of lines resulting from a text insertion would exceed the height of the edit control."},{"pos":[9415,9485],"content":"<bpt id=\"p1\">**</bpt>ON_EN_SETFOCUS<ept id=\"p1\">**</ept> Sent when an edit control receives the input focus.","source":"**ON_EN_SETFOCUS** Sent when an edit control receives the input focus."},{"content":"<bpt id=\"p1\">**</bpt>ON_EN_UPDATE<ept id=\"p1\">**</ept> The edit control is about to display altered text.","pos":[9493,9560],"source":"**ON_EN_UPDATE** The edit control is about to display altered text."},{"content":"Sent after the control has formatted the text but before it screens the text so that the window size can be altered, if necessary.","pos":[9561,9691]},{"content":"<bpt id=\"p1\">**</bpt>ON_EN_VSCROLL<ept id=\"p1\">**</ept> The user clicks an edit control's vertical scroll bar.","pos":[9699,9771],"source":"**ON_EN_VSCROLL** The user clicks an edit control's vertical scroll bar."},{"content":"The parent window is notified before the screen is updated.","pos":[9772,9831]},{"pos":[9838,9972],"content":"If you create a <ph id=\"ph1\">`CEdit`</ph> object within a dialog box, the <ph id=\"ph2\">`CEdit`</ph> object is automatically destroyed when the user closes the dialog box.","source":"If you create a `CEdit` object within a dialog box, the `CEdit` object is automatically destroyed when the user closes the dialog box."},{"pos":[9979,10140],"content":"If you create a <ph id=\"ph1\">`CEdit`</ph> object from a dialog resource using the dialog editor, the <ph id=\"ph2\">`CEdit`</ph> object is automatically destroyed when the user closes the dialog box.","source":"If you create a `CEdit` object from a dialog resource using the dialog editor, the `CEdit` object is automatically destroyed when the user closes the dialog box."},{"content":"If you create a <ph id=\"ph1\">`CEdit`</ph> object within a window, you may also need to destroy it.","pos":[10147,10227],"source":"If you create a `CEdit` object within a window, you may also need to destroy it."},{"content":"If you create the <ph id=\"ph1\">`CEdit`</ph> object on the stack, it is destroyed automatically.","pos":[10228,10305],"source":" If you create the `CEdit` object on the stack, it is destroyed automatically."},{"content":"If you create the <ph id=\"ph1\">`CEdit`</ph> object on the heap by using the <bpt id=\"p1\">**</bpt>new<ept id=\"p1\">**</ept> function, you must call <bpt id=\"p2\">**</bpt>delete<ept id=\"p2\">**</ept> on the object to destroy it when the user terminates the Windows edit control.","pos":[10306,10485],"source":" If you create the `CEdit` object on the heap by using the **new** function, you must call **delete** on the object to destroy it when the user terminates the Windows edit control."},{"content":"If you allocate any memory in the <ph id=\"ph1\">`CEdit`</ph> object, override the <ph id=\"ph2\">`CEdit`</ph> destructor to dispose of the allocations.","pos":[10486,10598],"source":" If you allocate any memory in the `CEdit` object, override the `CEdit` destructor to dispose of the allocations."},{"content":"To modify certain styles in an edit control (such as <bpt id=\"p1\">**</bpt>ES_READONLY<ept id=\"p1\">**</ept>) you must send specific messages to the control instead of using <bpt id=\"p2\">[</bpt>ModifyStyle<ept id=\"p2\">](cwnd-class.md#cwnd__modifystyle)</ept>.","pos":[10605,10786],"source":"To modify certain styles in an edit control (such as **ES_READONLY**) you must send specific messages to the control instead of using [ModifyStyle](cwnd-class.md#cwnd__modifystyle)."},{"content":"See <bpt id=\"p1\">[</bpt>Edit Control Styles<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775464)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[10787,10932],"source":" See [Edit Control Styles](http://msdn.microsoft.com/library/windows/desktop/bb775464) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[10939,10976],"content":"For more information on <ph id=\"ph1\">`CEdit`</ph>, see:","source":"For more information on `CEdit`, see:"},{"content":"Controls","pos":[10985,10993]},{"content":"Knowledge Base article Q259949 : INFO: SetCaretPos() Is Not Appropriate with CEdit or CRichEditCtrl Controls","pos":[11031,11139]},{"content":"Inheritance Hierarchy","pos":[11148,11169]},{"content":"CObject","pos":[11174,11181]},{"content":"CCmdTarget","pos":[11208,11218]},{"content":"CWnd","pos":[11248,11252]},{"content":"Requirements","pos":[11291,11303]},{"pos":[11307,11327],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxwin.h","source":"**Header:** afxwin.h"},{"pos":[11368,11382],"content":"CEdit::CanUndo"},{"content":"Call this function to determine if the last edit operation can be undone.","pos":[11386,11459]},{"content":"Return Value","pos":[11509,11521]},{"pos":[11525,11642],"content":"Nonzero if the last edit operation can be undone by a call to the <bpt id=\"p1\">**</bpt>Undo<ept id=\"p1\">**</ept> member function; 0 if it cannot be undone.","source":"Nonzero if the last edit operation can be undone by a call to the **Undo** member function; 0 if it cannot be undone."},{"content":"Remarks","pos":[11652,11659]},{"pos":[11663,11821],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_CANUNDO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775468)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_CANUNDO](http://msdn.microsoft.com/library/windows/desktop/bb775468) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[11831,11838]},{"pos":[11843,11891],"content":"See the example for <bpt id=\"p1\">[</bpt>CEdit::Undo<ept id=\"p1\">](#cedit__undo)</ept>.","source":"See the example for [CEdit::Undo](#cedit__undo)."},{"pos":[11930,11942],"content":"CEdit::CEdit"},{"pos":[11946,11974],"content":"Constructs a <ph id=\"ph1\">`CEdit`</ph> object.","source":"Constructs a `CEdit` object."},{"content":"Remarks","pos":[12008,12015]},{"pos":[12019,12086],"content":"Use <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](#cedit__create)</ept> to construct the Windows edit control.","source":"Use [Create](#cedit__create) to construct the Windows edit control."},{"content":"Example","pos":[12096,12103]},{"pos":[12118,12133],"content":"NVC_MFC_CEdit#1"},{"pos":[12235,12253],"content":"CEdit::CharFromPos"},{"pos":[12257,12398],"content":"Call this function to retrieve the zero-based line and character indices of the character nearest the specified point in this <ph id=\"ph1\">`CEdit`</ph> control","source":"Call this function to retrieve the zero-based line and character indices of the character nearest the specified point in this `CEdit` control"},{"content":"Parameters","pos":[12460,12470]},{"content":"The coordinates of a point in the client area of this <ph id=\"ph1\">`CEdit`</ph> object.","pos":[12482,12551],"source":" The coordinates of a point in the client area of this `CEdit` object."},{"content":"Return Value","pos":[12561,12573]},{"pos":[12577,12670],"content":"The character index in the low-order <bpt id=\"p1\">**</bpt>WORD<ept id=\"p1\">**</ept>, and the line index in the high-order <bpt id=\"p2\">**</bpt>WORD<ept id=\"p2\">**</ept>.","source":"The character index in the low-order **WORD**, and the line index in the high-order **WORD**."},{"content":"Remarks","pos":[12680,12687]},{"pos":[12695,12785],"content":"[!NOTE]\n This member function is available beginning with Windows 95 and Windows NT 4.0.","leadings":["","> "],"nodes":[{"content":"This member function is available beginning with Windows 95 and Windows NT 4.0.","pos":[9,88]}]},{"pos":[12792,12954],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_CHARFROMPOS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761566)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_CHARFROMPOS](http://msdn.microsoft.com/library/windows/desktop/bb761566) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[12964,12971]},{"pos":[12986,13001],"content":"NVC_MFC_CEdit#3"},{"pos":[13097,13109],"content":"CEdit::Clear"},{"content":"Call this function to delete (clear) the current selection (if any) in the edit control.","pos":[13113,13201]},{"content":"Remarks","pos":[13240,13247]},{"pos":[13251,13353],"content":"The deletion performed by <bpt id=\"p1\">**</bpt>Clear<ept id=\"p1\">**</ept> can be undone by calling the <bpt id=\"p2\">[</bpt>Undo<ept id=\"p2\">](#cedit__undo)</ept> member function.","source":"The deletion performed by **Clear** can be undone by calling the [Undo](#cedit__undo) member function."},{"pos":[13360,13487],"content":"To delete the current selection and place the deleted contents into the Clipboard, call the <bpt id=\"p1\">[</bpt>Cut<ept id=\"p1\">](#cedit__cut)</ept> member function.","source":"To delete the current selection and place the deleted contents into the Clipboard, call the [Cut](#cedit__cut) member function."},{"pos":[13494,13650],"content":"For more information, see <bpt id=\"p1\">[</bpt>WM_CLEAR<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms649020)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [WM_CLEAR](http://msdn.microsoft.com/library/windows/desktop/ms649020) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[13660,13667]},{"pos":[13682,13697],"content":"NVC_MFC_CEdit#4"},{"pos":[13792,13803],"content":"CEdit::Copy"},{"pos":[13807,13923],"content":"Call this function to coy the current selection (if any) in the edit control to the Clipboard in <bpt id=\"p1\">**</bpt>CF_TEXT<ept id=\"p1\">**</ept> format.","source":"Call this function to coy the current selection (if any) in the edit control to the Clipboard in **CF_TEXT** format."},{"content":"Remarks","pos":[13961,13968]},{"pos":[13972,14127],"content":"For more information, see <bpt id=\"p1\">[</bpt>WM_COPY<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms649022)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [WM_COPY](http://msdn.microsoft.com/library/windows/desktop/ms649022) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[14137,14144]},{"pos":[14159,14174],"content":"NVC_MFC_CEdit#5"},{"pos":[14271,14284],"content":"CEdit::Create"},{"pos":[14288,14359],"content":"Creates the Windows edit control and attaches it to the <ph id=\"ph1\">`CEdit`</ph> object.","source":"Creates the Windows edit control and attaches it to the `CEdit` object."},{"content":"Parameters","pos":[14489,14499]},{"content":"Specifies the edit control's style.","pos":[14516,14551]},{"content":"Apply any combination of <bpt id=\"p1\">[</bpt>edit styles<ept id=\"p1\">](edit-styles.md)</ept> to the control.","pos":[14552,14622],"source":" Apply any combination of [edit styles](edit-styles.md) to the control."},{"content":"Specifies the edit control's size and position.","pos":[14639,14686]},{"content":"Can be a <ph id=\"ph1\">`CRect`</ph> object or <ph id=\"ph2\">`RECT`</ph> structure.","pos":[14687,14731],"source":" Can be a `CRect` object or `RECT` structure."},{"content":"Specifies the edit control's parent window (usually a <ph id=\"ph1\">`CDialog`</ph>).","pos":[14754,14819],"source":" Specifies the edit control's parent window (usually a `CDialog`)."},{"content":"It must not be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[14820,14844],"source":" It must not be **NULL**."},{"content":"Specifies the edit control's ID.","pos":[14860,14892]},{"content":"Return Value","pos":[14902,14914]},{"content":"Nonzero if initialization is successful; otherwise 0.","pos":[14918,14971]},{"content":"Remarks","pos":[14981,14988]},{"content":"You construct a <ph id=\"ph1\">`CEdit`</ph> object in two steps.","pos":[14992,15036],"source":"You construct a `CEdit` object in two steps."},{"content":"First, call the <ph id=\"ph1\">`CEdit`</ph> constructor and then call <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>, which creates the Windows edit control and attaches it to the <ph id=\"ph2\">`CEdit`</ph> object.","pos":[15037,15176],"source":" First, call the `CEdit` constructor and then call **Create**, which creates the Windows edit control and attaches it to the `CEdit` object."},{"pos":[15183,15564],"content":"When <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> executes, Windows sends the <bpt id=\"p2\">[</bpt>WM_NCCREATE<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms632635)</ept>, <bpt id=\"p3\">[</bpt>WM_NCCALCSIZE<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/ms632634)</ept>, <bpt id=\"p4\">[</bpt>WM_CREATE<ept id=\"p4\">](http://msdn.microsoft.com/library/windows/desktop/ms632619)</ept>, and <bpt id=\"p5\">[</bpt>WM_GETMINMAXINFO<ept id=\"p5\">](http://msdn.microsoft.com/library/windows/desktop/ms632626)</ept> messages to the edit control.","source":"When **Create** executes, Windows sends the [WM_NCCREATE](http://msdn.microsoft.com/library/windows/desktop/ms632635), [WM_NCCALCSIZE](http://msdn.microsoft.com/library/windows/desktop/ms632634), [WM_CREATE](http://msdn.microsoft.com/library/windows/desktop/ms632619), and [WM_GETMINMAXINFO](http://msdn.microsoft.com/library/windows/desktop/ms632626) messages to the edit control."},{"content":"These messages are handled by default by the <bpt id=\"p1\">[</bpt>OnNcCreate<ept id=\"p1\">](cwnd-class.md#cwnd__onnccreate)</ept>, <bpt id=\"p2\">[</bpt>OnNcCalcSize<ept id=\"p2\">](cwnd-class.md#cwnd__onnccalcsize)</ept>, <bpt id=\"p3\">[</bpt>OnCreate<ept id=\"p3\">](cwnd-class.md#cwnd__oncreate)</ept>, and <bpt id=\"p4\">[</bpt>OnGetMinMaxInfo<ept id=\"p4\">](cwnd-class.md#cwnd__ongetminmaxinfo)</ept> member functions in the <ph id=\"ph1\">`CWnd`</ph> base class.","pos":[15571,15855],"source":"These messages are handled by default by the [OnNcCreate](cwnd-class.md#cwnd__onnccreate), [OnNcCalcSize](cwnd-class.md#cwnd__onnccalcsize), [OnCreate](cwnd-class.md#cwnd__oncreate), and [OnGetMinMaxInfo](cwnd-class.md#cwnd__ongetminmaxinfo) member functions in the `CWnd` base class."},{"content":"To extend the default message handling, derive a class from <ph id=\"ph1\">`CEdit`</ph>, add a message map to the new class, and override the above message-handler member functions.","pos":[15856,16017],"source":" To extend the default message handling, derive a class from `CEdit`, add a message map to the new class, and override the above message-handler member functions."},{"content":"Override <ph id=\"ph1\">`OnCreate`</ph>, for example, to perform needed initialization for the new class.","pos":[16018,16103],"source":" Override `OnCreate`, for example, to perform needed initialization for the new class."},{"pos":[16110,16183],"content":"Apply the following <bpt id=\"p1\">[</bpt>window styles<ept id=\"p1\">](window-styles.md)</ept> to an edit control.","source":"Apply the following [window styles](window-styles.md) to an edit control."},{"pos":[16191,16210],"content":"<bpt id=\"p1\">**</bpt>WS_CHILD<ept id=\"p1\">**</ept> Always","source":"**WS_CHILD** Always"},{"pos":[16218,16240],"content":"<bpt id=\"p1\">**</bpt>WS_VISIBLE<ept id=\"p1\">**</ept> Usually","source":"**WS_VISIBLE** Usually"},{"pos":[16248,16270],"content":"<bpt id=\"p1\">**</bpt>WS_DISABLED<ept id=\"p1\">**</ept> Rarely","source":"**WS_DISABLED** Rarely"},{"pos":[16278,16308],"content":"<bpt id=\"p1\">**</bpt>WS_GROUP<ept id=\"p1\">**</ept> To group controls","source":"**WS_GROUP** To group controls"},{"pos":[16316,16375],"content":"<bpt id=\"p1\">**</bpt>WS_TABSTOP<ept id=\"p1\">**</ept> To include edit control in the tabbing order","source":"**WS_TABSTOP** To include edit control in the tabbing order"},{"content":"Example","pos":[16385,16392]},{"pos":[16407,16422],"content":"NVC_MFC_CEdit#2"},{"pos":[16516,16526],"content":"CEdit::Cut"},{"pos":[16530,16681],"content":"Call this function to delete (cut) the current selection (if any) in the edit control and copy the deleted text to the Clipboard in <bpt id=\"p1\">**</bpt>CF_TEXT<ept id=\"p1\">**</ept> format.","source":"Call this function to delete (cut) the current selection (if any) in the edit control and copy the deleted text to the Clipboard in **CF_TEXT** format."},{"content":"Remarks","pos":[16718,16725]},{"pos":[16729,16829],"content":"The deletion performed by <bpt id=\"p1\">**</bpt>Cut<ept id=\"p1\">**</ept> can be undone by calling the <bpt id=\"p2\">[</bpt>Undo<ept id=\"p2\">](#cedit__undo)</ept> member function.","source":"The deletion performed by **Cut** can be undone by calling the [Undo](#cedit__undo) member function."},{"pos":[16836,16969],"content":"To delete the current selection without placing the deleted text into the Clipboard, call the <bpt id=\"p1\">[</bpt>Clear<ept id=\"p1\">](#cedit__clear)</ept> member function.","source":"To delete the current selection without placing the deleted text into the Clipboard, call the [Clear](#cedit__clear) member function."},{"pos":[16976,17130],"content":"For more information, see <bpt id=\"p1\">[</bpt>WM_CUT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms649023)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [WM_CUT](http://msdn.microsoft.com/library/windows/desktop/ms649023) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[17140,17147]},{"pos":[17162,17177],"content":"NVC_MFC_CEdit#6"},{"pos":[17283,17305],"content":"CEdit::EmptyUndoBuffer"},{"content":"Call this function to reset (clear) the undo flag of an edit control.","pos":[17309,17378]},{"content":"Remarks","pos":[17427,17434]},{"content":"The edit control will now be unable to undo the last operation.","pos":[17438,17501]},{"content":"The undo flag is set whenever an operation within the edit control can be undone.","pos":[17502,17583]},{"pos":[17590,17781],"content":"The undo flag is automatically cleared whenever the <bpt id=\"p1\">[</bpt>SetWindowText<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__setwindowtext)</ept> or <bpt id=\"p2\">[</bpt>SetHandle<ept id=\"p2\">](#cedit__sethandle)</ept><ph id=\"ph1\">`CWnd`</ph> member functions are called.","source":"The undo flag is automatically cleared whenever the [SetWindowText](../../mfc/reference/cwnd-class.md#cwnd__setwindowtext) or [SetHandle](#cedit__sethandle)`CWnd` member functions are called."},{"pos":[17788,17954],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_EMPTYUNDOBUFFER<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761568)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_EMPTYUNDOBUFFER](http://msdn.microsoft.com/library/windows/desktop/bb761568) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[17964,17971]},{"pos":[17986,18001],"content":"NVC_MFC_CEdit#7"},{"pos":[18100,18115],"content":"CEdit::FmtLines"},{"content":"Call this function to set the inclusion of soft line-break characters on or off within a multiple-line edit control.","pos":[18119,18235]},{"content":"Parameters","pos":[18289,18299]},{"content":"bAddEOL","pos":[18304,18311]},{"content":"Specifies whether soft line-break characters are to be inserted.","pos":[18316,18380]},{"content":"A value of <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> inserts the characters; a value of <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> removes them.","pos":[18381,18459],"source":" A value of **TRUE** inserts the characters; a value of **FALSE** removes them."},{"content":"Return Value","pos":[18469,18481]},{"content":"Nonzero if any formatting occurs; otherwise 0.","pos":[18485,18531]},{"content":"Remarks","pos":[18541,18548]},{"content":"A soft line break consists of two carriage returns and a linefeed inserted at the end of a line that is broken because of word wrapping.","pos":[18552,18688]},{"content":"A hard line break consists of one carriage return and a linefeed.","pos":[18689,18754]},{"content":"Lines that end with a hard line break are not affected by <ph id=\"ph1\">`FmtLines`</ph>.","pos":[18755,18824],"source":" Lines that end with a hard line break are not affected by `FmtLines`."},{"pos":[18831,18911],"content":"Windows will only respond if the <ph id=\"ph1\">`CEdit`</ph> object is a multiple-line edit control.","source":"Windows will only respond if the `CEdit` object is a multiple-line edit control."},{"content":"only affects the buffer returned by <bpt id=\"p1\">[</bpt>GetHandle<ept id=\"p1\">](#cedit__gethandle)</ept> and the text returned by <bpt id=\"p2\">[</bpt>WM_GETTEXT<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms632627)</ept>.","pos":[18929,19094],"source":" only affects the buffer returned by [GetHandle](#cedit__gethandle) and the text returned by [WM_GETTEXT](http://msdn.microsoft.com/library/windows/desktop/ms632627)."},{"content":"It has no impact on the display of the text within the edit control.","pos":[19095,19163]},{"pos":[19170,19329],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_FMTLINES<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761570)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_FMTLINES](http://msdn.microsoft.com/library/windows/desktop/bb761570) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[19339,19346]},{"pos":[19361,19376],"content":"NVC_MFC_CEdit#8"},{"pos":[19479,19498],"content":"CEdit::GetCueBanner"},{"content":"Retrieves the text that is displayed as the text cue, or tip, in an edit control when the control is empty.","pos":[19502,19609]},{"content":"Parameters","pos":[19738,19748]},{"content":"[out]","pos":[19752,19757]},{"content":"A pointer to a string that contains the cue text.","pos":[19772,19821]},{"content":"[in]","pos":[19828,19832]},{"content":"The number of characters that can be received.","pos":[19846,19892]},{"content":"This number includes the terminating <ph id=\"ph1\">`NULL`</ph> character.","pos":[19893,19947],"source":" This number includes the terminating `NULL` character."},{"content":"Return Value","pos":[19957,19969]},{"pos":[19973,20051],"content":"For the first overload, <ph id=\"ph1\">`true`</ph> if the method is successful; otherwise <ph id=\"ph2\">`false`</ph>.","source":"For the first overload, `true` if the method is successful; otherwise `false`."},{"pos":[20058,20223],"content":"For the second overload, a <bpt id=\"p1\">[</bpt>CString<ept id=\"p1\">](../../atl-mfc-shared/using-cstring.md)</ept> that contains the cue text if the method is successful; otherwise, the empty string (\"\").","source":"For the second overload, a [CString](../../atl-mfc-shared/using-cstring.md) that contains the cue text if the method is successful; otherwise, the empty string (\"\")."},{"content":"Remarks","pos":[20233,20240]},{"content":"This method sends the <bpt id=\"p1\">[</bpt>EM_GETCUEBANNER<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761572)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[20244,20431],"source":"This method sends the [EM_GETCUEBANNER](http://msdn.microsoft.com/library/windows/desktop/bb761572) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>Edit_GetCueBannerText<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761695)</ept> macro.","pos":[20432,20552],"source":" For more information, see the [Edit_GetCueBannerText](http://msdn.microsoft.com/library/windows/desktop/bb761695) macro."},{"pos":[20605,20631],"content":"CEdit::GetFirstVisibleLine"},{"content":"Call this function to determine the topmost visible line in an edit control.","pos":[20635,20711]},{"content":"Return Value","pos":[20772,20784]},{"content":"The zero-based index of the topmost visible line.","pos":[20788,20837]},{"content":"For single-line edit controls, the return value is 0.","pos":[20838,20891]},{"content":"Remarks","pos":[20901,20908]},{"pos":[20912,21082],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_GETFIRSTVISIBLELINE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761574)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_GETFIRSTVISIBLELINE](http://msdn.microsoft.com/library/windows/desktop/bb761574) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[21092,21099]},{"pos":[21114,21129],"content":"NVC_MFC_CEdit#9"},{"pos":[21229,21245],"content":"CEdit::GetHandle"},{"content":"Call this function to retrieve a handle to the memory currently allocated for a multiple-line edit control.","pos":[21249,21356]},{"content":"Return Value","pos":[21410,21422]},{"content":"A local memory handle that identifies the buffer holding the contents of the edit control.","pos":[21426,21516]},{"content":"If an error occurs, such as sending the message to a single-line edit control, the return value is 0.","pos":[21517,21618]},{"content":"Remarks","pos":[21628,21635]},{"pos":[21639,21787],"content":"The handle is a local memory handle and may be used by any of the <bpt id=\"p1\">**</bpt>Local<ept id=\"p1\">**</ept> Windows memory functions that take a local memory handle as a parameter.","source":"The handle is a local memory handle and may be used by any of the **Local** Windows memory functions that take a local memory handle as a parameter."},{"pos":[21794,21857],"content":"<bpt id=\"p1\">**</bpt>GetHandle<ept id=\"p1\">**</ept> is processed only by multiple-line edit controls.","source":"**GetHandle** is processed only by multiple-line edit controls."},{"content":"Call <bpt id=\"p1\">**</bpt>GetHandle<ept id=\"p1\">**</ept> for a multiple-line edit control in a dialog box only if the dialog box was created with the <bpt id=\"p2\">**</bpt>DS_LOCALEDIT<ept id=\"p2\">**</ept> style flag set.","pos":[21864,22008],"source":"Call **GetHandle** for a multiple-line edit control in a dialog box only if the dialog box was created with the **DS_LOCALEDIT** style flag set."},{"content":"If the <bpt id=\"p1\">**</bpt>DS_LOCALEDIT<ept id=\"p1\">**</ept> style is not set, you will still get a nonzero return value, but you will not be able to use the returned value.","pos":[22009,22145],"source":" If the **DS_LOCALEDIT** style is not set, you will still get a nonzero return value, but you will not be able to use the returned value."},{"pos":[22153,22360],"content":"[!NOTE]\n**GetHandle** will not work with Windows 95/98. If you call **GetHandle** in Windows 95/98, it will return **NULL**. **GetHandle** will work as documented under Windows NT, versions 3.51 and later.","leadings":["","> "],"nodes":[{"content":"**GetHandle** will not work with Windows 95/98. If you call **GetHandle** in Windows 95/98, it will return **NULL**. **GetHandle** will work as documented under Windows NT, versions 3.51 and later.","pos":[8,205],"nodes":[{"content":"<bpt id=\"p1\">**</bpt>GetHandle<ept id=\"p1\">**</ept> will not work with Windows 95/98.","pos":[0,47],"source":"**GetHandle** will not work with Windows 95/98."},{"content":"If you call <bpt id=\"p1\">**</bpt>GetHandle<ept id=\"p1\">**</ept> in Windows 95/98, it will return <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>.","pos":[48,116],"source":" If you call **GetHandle** in Windows 95/98, it will return **NULL**."},{"content":"<bpt id=\"p1\">**</bpt>GetHandle<ept id=\"p1\">**</ept> will work as documented under Windows NT, versions 3.51 and later.","pos":[117,197],"source":"**GetHandle** will work as documented under Windows NT, versions 3.51 and later."}]}]},{"pos":[22367,22527],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_GETHANDLE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761576)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_GETHANDLE](http://msdn.microsoft.com/library/windows/desktop/bb761576) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[22537,22544]},{"pos":[22559,22575],"content":"NVC_MFC_CEdit#10"},{"pos":[22679,22698],"content":"CEdit::GetHighlight"},{"content":"Gets the indexes of the first and last characters in a range of text that is highlighted in the current edit control.","pos":[22702,22819]},{"content":"Parameters","pos":[22914,22924]},{"content":"Parameter","pos":[22931,22940]},{"content":"Description","pos":[22941,22952]},{"pos":[22995,23000],"content":"[out]"},{"content":"Zero-based index of the first character in the range of text that is highlighted.","pos":[23013,23094]},{"pos":[23099,23104],"content":"[out]"},{"content":"Zero-based index of the last character in the range of text that is highlighted.","pos":[23115,23195]},{"content":"Return Value","pos":[23206,23218]},{"pos":[23229,23278],"content":"if this method is successful; otherwise, <ph id=\"ph1\">`false`</ph>.","source":" if this method is successful; otherwise, `false`."},{"content":"Remarks","pos":[23288,23295]},{"pos":[23299,23483],"content":"This method sends the <bpt id=\"p1\">[</bpt>EM_GETHILITE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761578)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [EM_GETHILITE](http://msdn.microsoft.com/library/windows/desktop/bb761578) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[23529,23548],"content":"CEdit::GetLimitText"},{"pos":[23552,23624],"content":"Call this member function to get the text limit for this <ph id=\"ph1\">`CEdit`</ph> object.","source":"Call this member function to get the text limit for this `CEdit` object."},{"content":"Return Value","pos":[23679,23691]},{"pos":[23695,23753],"content":"The current text limit, in bytes, for this <ph id=\"ph1\">`CEdit`</ph> object.","source":"The current text limit, in bytes, for this `CEdit` object."},{"content":"Remarks","pos":[23763,23770]},{"content":"The text limit is the maximum amount of text, in bytes, that the edit control can accept.","pos":[23774,23863]},{"pos":[23871,23961],"content":"[!NOTE]\n This member function is available beginning with Windows 95 and Windows NT 4.0.","leadings":["","> "],"nodes":[{"content":"This member function is available beginning with Windows 95 and Windows NT 4.0.","pos":[9,88]}]},{"pos":[23968,24131],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_GETLIMITTEXT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761582)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_GETLIMITTEXT](http://msdn.microsoft.com/library/windows/desktop/bb761582) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[24141,24148]},{"pos":[24163,24179],"content":"NVC_MFC_CEdit#11"},{"pos":[24278,24292],"content":"CEdit::GetLine"},{"pos":[24296,24393],"content":"Call this function to retrieve a line of text from an edit control and places it in <ph id=\"ph1\">`lpszBuffer`</ph>.","source":"Call this function to retrieve a line of text from an edit control and places it in `lpszBuffer`."},{"content":"Parameters","pos":[24570,24580]},{"content":"Specifies the line number to retrieve from a multiple-line edit control.","pos":[24596,24668]},{"content":"Line numbers are zero-based; a value of 0 specifies the first line.","pos":[24669,24736]},{"content":"This parameter is ignored by a single-line edit control.","pos":[24737,24793]},{"content":"Points to the buffer that receives a copy of the line.","pos":[24816,24870]},{"content":"The first word of the buffer must specify the maximum number of characters that can be copied to the buffer.","pos":[24871,24979]},{"content":"Specifies the maximum number of bytes that can be copied to the buffer.","pos":[25002,25073]},{"content":"places this value in the first word of <ph id=\"ph1\">`lpszBuffer`</ph> before making the call to Windows.","pos":[25084,25170],"source":" places this value in the first word of `lpszBuffer` before making the call to Windows."},{"content":"Return Value","pos":[25180,25192]},{"content":"The number of bytes actually copied.","pos":[25196,25232]},{"content":"The return value is 0 if the line number specified by <ph id=\"ph1\">`nIndex`</ph> is greater than the number of lines in the edit control.","pos":[25233,25352],"source":" The return value is 0 if the line number specified by `nIndex` is greater than the number of lines in the edit control."},{"content":"Remarks","pos":[25362,25369]},{"content":"The copied line does not contain a null-termination character.","pos":[25373,25435]},{"pos":[25442,25600],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_GETLINE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761584)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_GETLINE](http://msdn.microsoft.com/library/windows/desktop/bb761584) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[25610,25617]},{"pos":[25622,25686],"content":"See the example for <bpt id=\"p1\">[</bpt>CEdit::GetLineCount<ept id=\"p1\">](#cedit__getlinecount)</ept>.","source":"See the example for [CEdit::GetLineCount](#cedit__getlinecount)."},{"pos":[25732,25751],"content":"CEdit::GetLineCount"},{"content":"Call this function to retrieve the number of lines in a multiple-line edit control.","pos":[25755,25838]},{"content":"Return Value","pos":[25892,25904]},{"content":"An integer containing the number of lines in the multiple-line edit control.","pos":[25908,25984]},{"content":"If no text has been entered into the edit control, the return value is 1.","pos":[25985,26058]},{"content":"Remarks","pos":[26068,26075]},{"pos":[26094,26143],"content":"is only processed by multiple-line edit controls."},{"pos":[26150,26313],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_GETLINECOUNT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761586)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_GETLINECOUNT](http://msdn.microsoft.com/library/windows/desktop/bb761586) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[26323,26330]},{"pos":[26345,26361],"content":"NVC_MFC_CEdit#12"},{"pos":[26463,26480],"content":"CEdit::GetMargins"},{"content":"Call this member function to retrieve the left and right margins of this edit control.","pos":[26484,26570]},{"content":"Return Value","pos":[26624,26636]},{"pos":[26640,26756],"content":"The width of the left margin in the low-order <bpt id=\"p1\">**</bpt>WORD<ept id=\"p1\">**</ept> and the width of the right margin in the high-order <bpt id=\"p2\">**</bpt>WORD<ept id=\"p2\">**</ept>.","source":"The width of the left margin in the low-order **WORD** and the width of the right margin in the high-order **WORD**."},{"content":"Remarks","pos":[26766,26773]},{"content":"Margins are measured in pixels.","pos":[26777,26808]},{"pos":[26816,26906],"content":"[!NOTE]\n This member function is available beginning with Windows 95 and Windows NT 4.0.","leadings":["","> "],"nodes":[{"content":"This member function is available beginning with Windows 95 and Windows NT 4.0.","pos":[9,88]}]},{"pos":[26913,27074],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_GETMARGINS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761590)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_GETMARGINS](http://msdn.microsoft.com/library/windows/desktop/bb761590) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[27084,27091]},{"pos":[27096,27184],"content":"See the example for <bpt id=\"p1\">[</bpt>CEditView::GetEditCtrl<ept id=\"p1\">](ceditview-class.md#ceditview__geteditctrl)</ept>.","source":"See the example for [CEditView::GetEditCtrl](ceditview-class.md#ceditview__geteditctrl)."},{"pos":[27227,27243],"content":"CEdit::GetModify"},{"content":"Call this function to determine whether the contents of an edit control have been modified.","pos":[27247,27338]},{"content":"Return Value","pos":[27390,27402]},{"content":"Nonzero if the edit-control contents have been modified; 0 if they have remained unchanged.","pos":[27406,27497]},{"content":"Remarks","pos":[27507,27514]},{"content":"Windows maintains an internal flag indicating whether the contents of the edit control have been changed.","pos":[27518,27623]},{"content":"This flag is cleared when the edit control is first created and may also be cleared by calling the <bpt id=\"p1\">[</bpt>SetModify<ept id=\"p1\">](#cedit__setmodify)</ept> member function.","pos":[27624,27770],"source":" This flag is cleared when the edit control is first created and may also be cleared by calling the [SetModify](#cedit__setmodify) member function."},{"pos":[27777,27937],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_GETMODIFY<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761592)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_GETMODIFY](http://msdn.microsoft.com/library/windows/desktop/bb761592) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[27947,27954]},{"pos":[27969,27985],"content":"NVC_MFC_CEdit#13"},{"pos":[28092,28114],"content":"CEdit::GetPasswordChar"},{"content":"Call this function to retrieve the password character that is displayed in an edit control when the user enters text.","pos":[28118,28235]},{"content":"Return Value","pos":[28294,28306]},{"content":"Specifies the character to be displayed instead of the character that the user typed.","pos":[28310,28395]},{"content":"The return value is <ph id=\"ph1\">`NULL`</ph> if no password character exists.","pos":[28396,28455],"source":" The return value is `NULL` if no password character exists."},{"content":"Remarks","pos":[28465,28472]},{"content":"If you create the edit control with the <bpt id=\"p1\">**</bpt>ES_PASSWORD<ept id=\"p1\">**</ept> style, the DLL that supports the control determines the default password character.","pos":[28476,28615],"source":"If you create the edit control with the **ES_PASSWORD** style, the DLL that supports the control determines the default password character."},{"content":"The manifest or the <bpt id=\"p1\">[</bpt>InitCommonControlsEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775697)</ept> method determines which DLL supports the edit control.","pos":[28616,28773],"source":" The manifest or the [InitCommonControlsEx](http://msdn.microsoft.com/library/windows/desktop/bb775697) method determines which DLL supports the edit control."},{"content":"If user32.dll supports the edit control, the default password character is ASTERISK ('*', U+002A).","pos":[28774,28872]},{"content":"If comctl32.dll version 6 supports the edit control, the default character is BLACK CIRCLE ('●', U+25CF).","pos":[28873,28978]},{"content":"For more information about which DLL and version supports the common controls, see <bpt id=\"p1\">[</bpt>Shell and Common Controls Versions<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb776779)</ept>.","pos":[28979,29159],"source":" For more information about which DLL and version supports the common controls, see [Shell and Common Controls Versions](http://msdn.microsoft.com/library/windows/desktop/bb776779)."},{"pos":[29166,29356],"content":"This method sends the <bpt id=\"p1\">[</bpt>EM_GETPASSWORDCHAR<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761594)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [EM_GETPASSWORDCHAR](http://msdn.microsoft.com/library/windows/desktop/bb761594) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[29366,29373]},{"pos":[29388,29404],"content":"NVC_MFC_CEdit#14"},{"pos":[29503,29517],"content":"CEdit::GetRect"},{"content":"Call this function to get the formatting rectangle of an edit control.","pos":[29521,29591]},{"content":"Parameters","pos":[29654,29664]},{"content":"Points to the <ph id=\"ph1\">`RECT`</ph> structure that receives the formatting rectangle.","pos":[29680,29750],"source":" Points to the `RECT` structure that receives the formatting rectangle."},{"content":"Remarks","pos":[29760,29767]},{"content":"The formatting rectangle is the limiting rectangle of the text, which is independent of the size of the edit-control window.","pos":[29771,29895]},{"pos":[29902,30061],"content":"The formatting rectangle of a multiple-line edit control can be modified by the <bpt id=\"p1\">[</bpt>SetRect<ept id=\"p1\">](#cedit__setrect)</ept> and <bpt id=\"p2\">[</bpt>SetRectNP<ept id=\"p2\">](#cedit__setrectnp)</ept> member functions.","source":"The formatting rectangle of a multiple-line edit control can be modified by the [SetRect](#cedit__setrect) and [SetRectNP](#cedit__setrectnp) member functions."},{"pos":[30068,30226],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_GETRECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761596)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_GETRECT](http://msdn.microsoft.com/library/windows/desktop/bb761596) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[30236,30243]},{"pos":[30248,30306],"content":"See the example for <bpt id=\"p1\">[</bpt>CEdit::LimitText<ept id=\"p1\">](#cedit__limittext)</ept>.","source":"See the example for [CEdit::LimitText](#cedit__limittext)."},{"pos":[30346,30359],"content":"CEdit::GetSel"},{"content":"Call this function to get the starting and ending character positions of the current selection (if any) in an edit control, using either the return value or the parameters.","pos":[30363,30535]},{"content":"Parameters","pos":[30652,30662]},{"content":"Reference to an integer that will receive the position of the first character in the current selection.","pos":[30682,30785]},{"content":"Reference to an integer that will receive the position of the first nonselected character past the end of the current selection.","pos":[30806,30934]},{"content":"Return Value","pos":[30944,30956]},{"pos":[30960,31175],"content":"The version that returns a <ph id=\"ph1\">`DWORD`</ph> returns a value that contains the starting position in the low-order word and the position of the first nonselected character after the end of the selection in the high-order word.","source":"The version that returns a `DWORD` returns a value that contains the starting position in the low-order word and the position of the first nonselected character after the end of the selection in the high-order word."},{"content":"Remarks","pos":[31185,31192]},{"pos":[31196,31353],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_GETSEL<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761598)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_GETSEL](http://msdn.microsoft.com/library/windows/desktop/bb761598) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[31363,31370]},{"pos":[31385,31401],"content":"NVC_MFC_CEdit#15"},{"pos":[31507,31528],"content":"CEdit::HideBalloonTip"},{"content":"Hides any balloon tip associated with the current edit control.","pos":[31532,31595]},{"content":"Return Value","pos":[31643,31655]},{"pos":[31666,31715],"content":"if this method is successful; otherwise, <ph id=\"ph1\">`false`</ph>.","source":" if this method is successful; otherwise, `false`."},{"content":"Remarks","pos":[31725,31732]},{"pos":[31736,31927],"content":"This function sends the <bpt id=\"p1\">[</bpt>EM_HIDEBALLOONTIP<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761604)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This function sends the [EM_HIDEBALLOONTIP](http://msdn.microsoft.com/library/windows/desktop/bb761604) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[31970,31986],"content":"CEdit::LimitText"},{"content":"Call this function to limit the length of the text that the user may enter into an edit control.","pos":[31990,32086]},{"content":"Parameters","pos":[32143,32153]},{"content":"Specifies the length (in bytes) of the text that the user can enter.","pos":[32169,32237]},{"content":"If this parameter is 0, the text length is set to <bpt id=\"p1\">**</bpt>UINT_MAX<ept id=\"p1\">**</ept> bytes.","pos":[32238,32307],"source":" If this parameter is 0, the text length is set to **UINT_MAX** bytes."},{"content":"This is the default behavior.","pos":[32308,32337]},{"content":"Remarks","pos":[32347,32354]},{"content":"Changing the text limit restricts only the text the user can enter.","pos":[32358,32425]},{"content":"It has no effect on any text already in the edit control, nor does it affect the length of the text copied to the edit control by the <bpt id=\"p1\">[</bpt>SetWindowText<ept id=\"p1\">](cwnd-class.md#cwnd__setwindowtext)</ept> member function in <ph id=\"ph1\">`CWnd`</ph>.","pos":[32426,32637],"source":" It has no effect on any text already in the edit control, nor does it affect the length of the text copied to the edit control by the [SetWindowText](cwnd-class.md#cwnd__setwindowtext) member function in `CWnd`."},{"content":"If an application uses the <ph id=\"ph1\">`SetWindowText`</ph> function to place more text into an edit control than is specified in the call to <ph id=\"ph2\">`LimitText`</ph>, the user can delete any of the text within the edit control.","pos":[32638,32836],"source":" If an application uses the `SetWindowText` function to place more text into an edit control than is specified in the call to `LimitText`, the user can delete any of the text within the edit control."},{"content":"However, the text limit will prevent the user from replacing the existing text with new text, unless deleting the current selection causes the text to fall below the text limit.","pos":[32837,33014]},{"pos":[33022,33134],"content":"[!NOTE]\n In Win32 (Windows NT and Windows 95/98), [SetLimitText](#cedit__setlimittext) replaces this function.","leadings":["","> "],"nodes":[{"content":"In Win32 (Windows NT and Windows 95/98), <bpt id=\"p1\">[</bpt>SetLimitText<ept id=\"p1\">](#cedit__setlimittext)</ept> replaces this function.","pos":[9,110],"source":" In Win32 (Windows NT and Windows 95/98), [SetLimitText](#cedit__setlimittext) replaces this function."}]},{"pos":[33141,33301],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_LIMITTEXT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761607)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_LIMITTEXT](http://msdn.microsoft.com/library/windows/desktop/bb761607) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[33311,33318]},{"pos":[33333,33349],"content":"NVC_MFC_CEdit#17"},{"pos":[33453,33472],"content":"CEdit::LineFromChar"},{"content":"Call this function to retrieve the line number of the line that contains the specified character index.","pos":[33476,33579]},{"content":"Parameters","pos":[33648,33658]},{"content":"Contains the zero-based index value for the desired character in the text of the edit control, or contains –1.","pos":[33674,33784]},{"content":"If <ph id=\"ph1\">`nIndex`</ph> is –1, it specifies the current line, that is, the line that contains the caret.","pos":[33785,33877],"source":" If `nIndex` is –1, it specifies the current line, that is, the line that contains the caret."},{"content":"Return Value","pos":[33887,33899]},{"content":"The zero-based line number of the line containing the character index specified by <ph id=\"ph1\">`nIndex`</ph>.","pos":[33903,33995],"source":"The zero-based line number of the line containing the character index specified by `nIndex`."},{"content":"If <ph id=\"ph1\">`nIndex`</ph> is –1, the number of the line that contains the first character of the selection is returned.","pos":[33996,34101],"source":" If `nIndex` is –1, the number of the line that contains the first character of the selection is returned."},{"content":"If there is no selection, the current line number is returned.","pos":[34102,34164]},{"content":"Remarks","pos":[34174,34181]},{"content":"A character index is the number of characters from the beginning of the edit control.","pos":[34185,34270]},{"content":"This member function is only used by multiple-line edit controls.","pos":[34277,34342]},{"pos":[34349,34512],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_LINEFROMCHAR<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761609)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_LINEFROMCHAR](http://msdn.microsoft.com/library/windows/desktop/bb761609) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[34522,34529]},{"pos":[34544,34560],"content":"NVC_MFC_CEdit#18"},{"pos":[34661,34677],"content":"CEdit::LineIndex"},{"content":"Call this function to retrieve the character index of a line within a multiple-line edit control.","pos":[34681,34778]},{"content":"Parameters","pos":[34843,34853]},{"content":"Contains the index value for the desired line in the text of the edit control, or contains –1.","pos":[34868,34962]},{"content":"If <ph id=\"ph1\">`nLine`</ph> is –1, it specifies the current line, that is, the line that contains the caret.","pos":[34963,35054],"source":" If `nLine` is –1, it specifies the current line, that is, the line that contains the caret."},{"content":"Return Value","pos":[35064,35076]},{"pos":[35080,35224],"content":"The character index of the line specified in <ph id=\"ph1\">`nLine`</ph> or –1 if the specified line number is greater than the number of lines in the edit control.","source":"The character index of the line specified in `nLine` or –1 if the specified line number is greater than the number of lines in the edit control."},{"content":"Remarks","pos":[35234,35241]},{"content":"The character index is the number of characters from the beginning of the edit control to the specified line.","pos":[35245,35354]},{"content":"This member function is only processed by multiple-line edit controls.","pos":[35361,35431]},{"pos":[35438,35598],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_LINEINDEX<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761611)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_LINEINDEX](http://msdn.microsoft.com/library/windows/desktop/bb761611) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[35608,35615]},{"pos":[35630,35646],"content":"NVC_MFC_CEdit#19"},{"pos":[35748,35765],"content":"CEdit::LineLength"},{"content":"Retrieves the length of a line in an edit control.","pos":[35769,35819]},{"content":"Parameters","pos":[35885,35895]},{"content":"The zero-based index of a character in the line whose length is to be retrieved.","pos":[35910,35990]},{"content":"The default value is -1.","pos":[35991,36015]},{"content":"Return Value","pos":[36025,36037]},{"pos":[36041,36149],"content":"For single-line edit controls, the return value is the length, in <ph id=\"ph1\">`TCHAR`</ph>s, of the text in the edit control.","source":"For single-line edit controls, the return value is the length, in `TCHAR`s, of the text in the edit control."},{"content":"For multiline edit controls, the return value is the length, in <ph id=\"ph1\">`TCHAR`</ph>s, of the line specified by the <ph id=\"ph2\">`nLine`</ph> parameter.","pos":[36156,36277],"source":"For multiline edit controls, the return value is the length, in `TCHAR`s, of the line specified by the `nLine` parameter."},{"content":"For <ph id=\"ph1\">[!INCLUDE[vcpransi](../../atl-mfc-shared/reference/includes/vcpransi_md.md)]</ph> text, the length is the number of bytes in the line; for Unicode text, the length is the number of characters in the line.","pos":[36278,36481],"source":" For [!INCLUDE[vcpransi](../../atl-mfc-shared/reference/includes/vcpransi_md.md)] text, the length is the number of bytes in the line; for Unicode text, the length is the number of characters in the line."},{"content":"The length does not include the carriage-return character at the end of the line.","pos":[36482,36563]},{"pos":[36570,36674],"content":"If the <ph id=\"ph1\">`nLine`</ph> parameter is more than the number of characters in the control, the return value is zero.","source":"If the `nLine` parameter is more than the number of characters in the control, the return value is zero."},{"content":"If the <ph id=\"ph1\">`nLine`</ph> parameter is –1, the return value is the number of unselected characters in the lines that contain selected characters.","pos":[36681,36815],"source":"If the `nLine` parameter is –1, the return value is the number of unselected characters in the lines that contain selected characters."},{"content":"For example, if the selection extends from the fourth character of one line through the eighth character from the end of the next line, the return value is 10.","pos":[36816,36975]},{"content":"That is, three characters on the first line and seven on the next.","pos":[36976,37042]},{"pos":[37049,37211],"content":"For more information about the <ph id=\"ph1\">`TCHAR`</ph> type, see the <ph id=\"ph2\">`TCHAR`</ph> row in the table in <bpt id=\"p1\">[</bpt>Windows Data Types<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa383751)</ept>.","source":"For more information about the `TCHAR` type, see the `TCHAR` row in the table in [Windows Data Types](http://msdn.microsoft.com/library/windows/desktop/aa383751)."},{"content":"Remarks","pos":[37221,37228]},{"pos":[37232,37427],"content":"This method is supported by the <bpt id=\"p1\">[</bpt>EM_LINELENGTH<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761613)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method is supported by the [EM_LINELENGTH](http://msdn.microsoft.com/library/windows/desktop/bb761613) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[37437,37444]},{"pos":[37449,37507],"content":"See the example for <bpt id=\"p1\">[</bpt>CEdit::LineIndex<ept id=\"p1\">](#cedit__lineindex)</ept>.","source":"See the example for [CEdit::LineIndex](#cedit__lineindex)."},{"pos":[37551,37568],"content":"CEdit::LineScroll"},{"content":"Call this function to scroll the text of a multiple-line edit control.","pos":[37572,37642]},{"content":"Parameters","pos":[37723,37733]},{"content":"Specifies the number of lines to scroll vertically.","pos":[37749,37800]},{"content":"Specifies the number of character positions to scroll horizontally.","pos":[37819,37886]},{"content":"This value is ignored if the edit control has either the <bpt id=\"p1\">**</bpt>ES_RIGHT<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>ES_CENTER<ept id=\"p2\">**</ept> style.","pos":[37887,37980],"source":" This value is ignored if the edit control has either the **ES_RIGHT** or **ES_CENTER** style."},{"content":"Remarks","pos":[37990,37997]},{"content":"This member function is processed only by multiple-line edit controls.","pos":[38001,38071]},{"content":"The edit control does not scroll vertically past the last line of text in the edit control.","pos":[38078,38169]},{"content":"If the current line plus the number of lines specified by <ph id=\"ph1\">`nLines`</ph> exceeds the total number of lines in the edit control, the value is adjusted so that the last line of the edit control is scrolled to the top of the edit-control window.","pos":[38170,38406],"source":" If the current line plus the number of lines specified by `nLines` exceeds the total number of lines in the edit control, the value is adjusted so that the last line of the edit control is scrolled to the top of the edit-control window."},{"pos":[38426,38497],"content":"can be used to scroll horizontally past the last character of any line."},{"pos":[38504,38665],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_LINESCROLL<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761615)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_LINESCROLL](http://msdn.microsoft.com/library/windows/desktop/bb761615) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[38675,38682]},{"pos":[38687,38765],"content":"See the example for <bpt id=\"p1\">[</bpt>CEdit::GetFirstVisibleLine<ept id=\"p1\">](#cedit__getfirstvisibleline)</ept>.","source":"See the example for [CEdit::GetFirstVisibleLine](#cedit__getfirstvisibleline)."},{"pos":[38804,38816],"content":"CEdit::Paste"},{"pos":[38820,38917],"content":"Call this function to insert the data from the Clipboard into the <ph id=\"ph1\">`CEdit`</ph> at the insertion point.","source":"Call this function to insert the data from the Clipboard into the `CEdit` at the insertion point."},{"content":"Remarks","pos":[38956,38963]},{"pos":[38967,39042],"content":"Data is inserted only if the Clipboard contains data in <bpt id=\"p1\">**</bpt>CF_TEXT<ept id=\"p1\">**</ept> format.","source":"Data is inserted only if the Clipboard contains data in **CF_TEXT** format."},{"pos":[39049,39205],"content":"For more information, see <bpt id=\"p1\">[</bpt>WM_PASTE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms649028)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [WM_PASTE](http://msdn.microsoft.com/library/windows/desktop/ms649028) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[39215,39222]},{"pos":[39237,39253],"content":"NVC_MFC_CEdit#20"},{"pos":[39356,39374],"content":"CEdit::PosFromChar"},{"pos":[39378,39483],"content":"Call this function to get the position (top-left corner) of a given character within this <ph id=\"ph1\">`CEdit`</ph> object.","source":"Call this function to get the position (top-left corner) of a given character within this `CEdit` object."},{"content":"Parameters","pos":[39549,39559]},{"content":"The zero-based index of the specified character.","pos":[39574,39622]},{"content":"Return Value","pos":[39632,39644]},{"pos":[39648,39725],"content":"The coordinates of the top-left corner of the character specified by <ph id=\"ph1\">`nChar`</ph>.","source":"The coordinates of the top-left corner of the character specified by `nChar`."},{"content":"Remarks","pos":[39735,39742]},{"content":"The character is specified by giving its zero-based index value.","pos":[39746,39810]},{"content":"If <ph id=\"ph1\">`nChar`</ph> is greater than the index of the last character in this <ph id=\"ph2\">`CEdit`</ph> object, the return value specifies the coordinates of the character position just past the last character in this <ph id=\"ph3\">`CEdit`</ph> object.","pos":[39811,40015],"source":" If `nChar` is greater than the index of the last character in this `CEdit` object, the return value specifies the coordinates of the character position just past the last character in this `CEdit` object."},{"pos":[40023,40113],"content":"[!NOTE]\n This member function is available beginning with Windows 95 and Windows NT 4.0.","leadings":["","> "],"nodes":[{"content":"This member function is available beginning with Windows 95 and Windows NT 4.0.","pos":[9,88]}]},{"pos":[40120,40282],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_POSFROMCHAR<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761631)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_POSFROMCHAR](http://msdn.microsoft.com/library/windows/desktop/bb761631) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[40292,40299]},{"pos":[40304,40368],"content":"See the example for <bpt id=\"p1\">[</bpt>CEdit::LineFromChar<ept id=\"p1\">](#cedit__linefromchar)</ept>.","source":"See the example for [CEdit::LineFromChar](#cedit__linefromchar)."},{"pos":[40412,40429],"content":"CEdit::ReplaceSel"},{"pos":[40433,40545],"content":"Call this function to replace the current selection in an edit control with the text specified by <ph id=\"ph1\">`lpszNewText`</ph>.","source":"Call this function to replace the current selection in an edit control with the text specified by `lpszNewText`."},{"content":"Parameters","pos":[40636,40646]},{"content":"Points to a null-terminated string containing the replacement text.","pos":[40667,40734]},{"content":"To specify that this function can be undone, set the value of this parameter to <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> .","pos":[40755,40845],"source":" To specify that this function can be undone, set the value of this parameter to **TRUE** ."},{"content":"The default value is <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>.","pos":[40846,40877],"source":" The default value is **FALSE**."},{"content":"Remarks","pos":[40887,40894]},{"content":"Replaces only a portion of the text in an edit control.","pos":[40898,40953]},{"content":"If you want to replace all of the text, use the <bpt id=\"p1\">[</bpt>CWnd::SetWindowText<ept id=\"p1\">](cwnd-class.md#cwnd__setwindowtext)</ept> member function.","pos":[40954,41075],"source":" If you want to replace all of the text, use the [CWnd::SetWindowText](cwnd-class.md#cwnd__setwindowtext) member function."},{"content":"If there is no current selection, the replacement text is inserted at the current cursor location.","pos":[41082,41180]},{"pos":[41187,41348],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_REPLACESEL<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761633)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_REPLACESEL](http://msdn.microsoft.com/library/windows/desktop/bb761633) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[41358,41365]},{"pos":[41370,41428],"content":"See the example for <bpt id=\"p1\">[</bpt>CEdit::LineIndex<ept id=\"p1\">](#cedit__lineindex)</ept>.","source":"See the example for [CEdit::LineIndex](#cedit__lineindex)."},{"pos":[41474,41493],"content":"CEdit::SetCueBanner"},{"content":"Sets the text that is displayed as the text cue, or tip, in an edit control when the control is empty.","pos":[41497,41599]},{"content":"Parameters","pos":[41749,41759]},{"content":"[in]","pos":[41763,41767]},{"content":"Pointer to a string that contains the cue to display in the edit control.","pos":[41782,41855]},{"content":"[in]","pos":[41862,41866]},{"content":"If <ph id=\"ph1\">`false`</ph>, the cue banner is not drawn when the user clicks in the edit control and gives the control the focus.","pos":[41889,42002],"source":" If `false`, the cue banner is not drawn when the user clicks in the edit control and gives the control the focus."},{"content":"If <ph id=\"ph1\">`true`</ph>, the cue banner is drawn even when the control has focus.","pos":[42009,42076],"source":"If `true`, the cue banner is drawn even when the control has focus."},{"content":"The cue banner disappears when the user starts to type in the control.","pos":[42077,42147]},{"pos":[42154,42183],"content":"The default value is <ph id=\"ph1\">`false`</ph>.","source":"The default value is `false`."},{"content":"Return Value","pos":[42193,42205]},{"pos":[42216,42263],"content":"if the method is successful; otherwise <ph id=\"ph1\">`false`</ph>.","source":" if the method is successful; otherwise `false`."},{"content":"Remarks","pos":[42273,42280]},{"content":"This method sends the <bpt id=\"p1\">[</bpt>EM_SETCUEBANNER<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761639)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[42284,42471],"source":"This method sends the [EM_SETCUEBANNER](http://msdn.microsoft.com/library/windows/desktop/bb761639) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>Edit_SetCueBannerTextFocused<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761703)</ept> macro.","pos":[42472,42599],"source":" For more information, see the [Edit_SetCueBannerTextFocused](http://msdn.microsoft.com/library/windows/desktop/bb761703) macro."},{"content":"Example","pos":[42609,42616]},{"pos":[42620,42710],"content":"The following example demonstrates the <bpt id=\"p1\">[</bpt>CEdit::SetCueBanner<ept id=\"p1\">](#cedit__setcuebanner)</ept> method.","source":"The following example demonstrates the [CEdit::SetCueBanner](#cedit__setcuebanner) method."},{"pos":[42728,42746],"content":"NVC_MFC_CEdit_s1#2"},{"pos":[42847,42863],"content":"CEdit::SetHandle"},{"content":"Call this function to set the handle to the local memory that will be used by a multiple-line edit control.","pos":[42867,42974]},{"content":"Parameters","pos":[43031,43041]},{"content":"hBuffer","pos":[43046,43053]},{"content":"Contains a handle to the local memory.","pos":[43058,43096]},{"content":"This handle must have been created by a previous call to the <bpt id=\"p1\">[</bpt>LocalAlloc<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa366723)</ept> Windows function using the <bpt id=\"p2\">**</bpt>LMEM_MOVEABLE<ept id=\"p2\">**</ept> flag.","pos":[43097,43281],"source":" This handle must have been created by a previous call to the [LocalAlloc](http://msdn.microsoft.com/library/windows/desktop/aa366723) Windows function using the **LMEM_MOVEABLE** flag."},{"content":"The memory is assumed to contain a null-terminated string.","pos":[43282,43340]},{"content":"If this is not the case, the first byte of the allocated memory should be set to 0.","pos":[43341,43424]},{"content":"Remarks","pos":[43434,43441]},{"content":"The edit control will then use this buffer to store the currently displayed text instead of allocating its own buffer.","pos":[43445,43563]},{"content":"This member function is processed only by multiple-line edit controls.","pos":[43570,43640]},{"pos":[43647,43869],"content":"Before an application sets a new memory handle, it should use the <bpt id=\"p1\">[</bpt>GetHandle<ept id=\"p1\">](#cedit__gethandle)</ept> member function to get the handle to the current memory buffer and free that memory using the <bpt id=\"p2\">**</bpt>LocalFree<ept id=\"p2\">**</ept> Windows function.","source":"Before an application sets a new memory handle, it should use the [GetHandle](#cedit__gethandle) member function to get the handle to the current memory buffer and free that memory using the **LocalFree** Windows function."},{"content":"clears the undo buffer (the <bpt id=\"p1\">[</bpt>CanUndo<ept id=\"p1\">](#cedit__canundo)</ept> member function then returns 0) and the internal modification flag (the <bpt id=\"p2\">[</bpt>GetModify<ept id=\"p2\">](#cedit__getmodify)</ept> member function then returns 0).","pos":[43888,44078],"source":" clears the undo buffer (the [CanUndo](#cedit__canundo) member function then returns 0) and the internal modification flag (the [GetModify](#cedit__getmodify) member function then returns 0)."},{"content":"The edit-control window is redrawn.","pos":[44079,44114]},{"pos":[44121,44283],"content":"You can use this member function in a multiple-line edit control in a dialog box only if you have created the dialog box with the <bpt id=\"p1\">**</bpt>DS_LOCALEDIT<ept id=\"p1\">**</ept> style flag set.","source":"You can use this member function in a multiple-line edit control in a dialog box only if you have created the dialog box with the **DS_LOCALEDIT** style flag set."},{"pos":[44291,44498],"content":"[!NOTE]\n**GetHandle** will not work with Windows 95/98. If you call **GetHandle** in Windows 95/98, it will return **NULL**. **GetHandle** will work as documented under Windows NT, versions 3.51 and later.","leadings":["","> "],"nodes":[{"content":"**GetHandle** will not work with Windows 95/98. If you call **GetHandle** in Windows 95/98, it will return **NULL**. **GetHandle** will work as documented under Windows NT, versions 3.51 and later.","pos":[8,205],"nodes":[{"content":"<bpt id=\"p1\">**</bpt>GetHandle<ept id=\"p1\">**</ept> will not work with Windows 95/98.","pos":[0,47],"source":"**GetHandle** will not work with Windows 95/98."},{"content":"If you call <bpt id=\"p1\">**</bpt>GetHandle<ept id=\"p1\">**</ept> in Windows 95/98, it will return <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>.","pos":[48,116],"source":" If you call **GetHandle** in Windows 95/98, it will return **NULL**."},{"content":"<bpt id=\"p1\">**</bpt>GetHandle<ept id=\"p1\">**</ept> will work as documented under Windows NT, versions 3.51 and later.","pos":[117,197],"source":"**GetHandle** will work as documented under Windows NT, versions 3.51 and later."}]}]},{"pos":[44505,44816],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_SETHANDLE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761641)</ept>, <bpt id=\"p2\">[</bpt>LocalAlloc<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/aa366723)</ept>, and <bpt id=\"p3\">[</bpt>LocalFree<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/aa366730)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_SETHANDLE](http://msdn.microsoft.com/library/windows/desktop/bb761641), [LocalAlloc](http://msdn.microsoft.com/library/windows/desktop/aa366723), and [LocalFree](http://msdn.microsoft.com/library/windows/desktop/aa366730) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[44826,44833]},{"pos":[44848,44864],"content":"NVC_MFC_CEdit#22"},{"pos":[44968,44987],"content":"CEdit::SetHighlight"},{"content":"Highlights a range of text that is displayed in the current edit control.","pos":[44991,45064]},{"content":"Parameters","pos":[45146,45156]},{"content":"Parameter","pos":[45163,45172]},{"content":"Description","pos":[45173,45184]},{"pos":[45227,45231],"content":"[in]"},{"content":"Zero-based index of the first character in the range of text to highlight.","pos":[45243,45317]},{"pos":[45322,45326],"content":"[in]"},{"content":"Zero-based index of the last character in the range of text to highlight.","pos":[45336,45409]},{"content":"Remarks","pos":[45420,45427]},{"pos":[45431,45615],"content":"This method sends the <bpt id=\"p1\">[</bpt>EM_SETHILITE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761643)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [EM_SETHILITE](http://msdn.microsoft.com/library/windows/desktop/bb761643) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[45661,45680],"content":"CEdit::SetLimitText"},{"pos":[45684,45756],"content":"Call this member function to set the text limit for this <ph id=\"ph1\">`CEdit`</ph> object.","source":"Call this member function to set the text limit for this `CEdit` object."},{"content":"Parameters","pos":[45811,45821]},{"content":"The new text limit, in characters.","pos":[45835,45869]},{"content":"Remarks","pos":[45879,45886]},{"content":"The text limit is the maximum amount of text, in characters, that the edit control can accept.","pos":[45890,45984]},{"content":"Changing the text limit restricts only the text the user can enter.","pos":[45991,46058]},{"content":"It has no effect on any text already in the edit control, nor does it affect the length of the text copied to the edit control by the <bpt id=\"p1\">[</bpt>SetWindowText<ept id=\"p1\">](cwnd-class.md#cwnd__setwindowtext)</ept> member function in <ph id=\"ph1\">`CWnd`</ph>.","pos":[46059,46270],"source":" It has no effect on any text already in the edit control, nor does it affect the length of the text copied to the edit control by the [SetWindowText](cwnd-class.md#cwnd__setwindowtext) member function in `CWnd`."},{"content":"If an application uses the <ph id=\"ph1\">`SetWindowText`</ph> function to place more text into an edit control than is specified in the call to <ph id=\"ph2\">`LimitText`</ph>, the user can delete any of the text within the edit control.","pos":[46271,46469],"source":" If an application uses the `SetWindowText` function to place more text into an edit control than is specified in the call to `LimitText`, the user can delete any of the text within the edit control."},{"content":"However, the text limit will prevent the user from replacing the existing text with new text, unless deleting the current selection causes the text to fall below the text limit.","pos":[46470,46647]},{"pos":[46654,46717],"content":"This function replaces <bpt id=\"p1\">[</bpt>LimitText<ept id=\"p1\">](#cedit__limittext)</ept> in Win32.","source":"This function replaces [LimitText](#cedit__limittext) in Win32."},{"pos":[46724,46887],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_SETLIMITTEXT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761647)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_SETLIMITTEXT](http://msdn.microsoft.com/library/windows/desktop/bb761647) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[46897,46904]},{"pos":[46909,46997],"content":"See the example for <bpt id=\"p1\">[</bpt>CEditView::GetEditCtrl<ept id=\"p1\">](ceditview-class.md#ceditview__geteditctrl)</ept>.","source":"See the example for [CEditView::GetEditCtrl](ceditview-class.md#ceditview__geteditctrl)."},{"pos":[47041,47058],"content":"CEdit::SetMargins"},{"content":"Call this method to set the left and right margins of this edit control.","pos":[47062,47134]},{"content":"Parameters","pos":[47212,47222]},{"content":"nLeft","pos":[47227,47232]},{"content":"The width of the new left margin, in pixels.","pos":[47237,47281]},{"content":"nRight","pos":[47289,47295]},{"content":"The width of the new right margin, in pixels.","pos":[47300,47345]},{"content":"Remarks","pos":[47355,47362]},{"pos":[47370,47460],"content":"[!NOTE]\n This member function is available beginning with Windows 95 and Windows NT 4.0.","leadings":["","> "],"nodes":[{"content":"This member function is available beginning with Windows 95 and Windows NT 4.0.","pos":[9,88]}]},{"pos":[47467,47628],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_SETMARGINS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761649)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_SETMARGINS](http://msdn.microsoft.com/library/windows/desktop/bb761649) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[47638,47645]},{"pos":[47650,47738],"content":"See the example for <bpt id=\"p1\">[</bpt>CEditView::GetEditCtrl<ept id=\"p1\">](ceditview-class.md#ceditview__geteditctrl)</ept>.","source":"See the example for [CEditView::GetEditCtrl](ceditview-class.md#ceditview__geteditctrl)."},{"pos":[47781,47797],"content":"CEdit::SetModify"},{"content":"Call this function to set or clear the modified flag for an edit control.","pos":[47801,47874]},{"content":"Parameters","pos":[47938,47948]},{"content":"A value of <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> indicates that the text has been modified, and a value of <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> indicates it is unmodified.","pos":[47967,48082],"source":" A value of **TRUE** indicates that the text has been modified, and a value of **FALSE** indicates it is unmodified."},{"content":"By default, the modified flag is set.","pos":[48083,48120]},{"content":"Remarks","pos":[48130,48137]},{"content":"The modified flag indicates whether or not the text within the edit control has been modified.","pos":[48141,48235]},{"content":"It is automatically set whenever the user changes the text.","pos":[48236,48295]},{"content":"Its value may be retrieved with the <bpt id=\"p1\">[</bpt>GetModify<ept id=\"p1\">](#cedit__getmodify)</ept> member function.","pos":[48296,48379],"source":" Its value may be retrieved with the [GetModify](#cedit__getmodify) member function."},{"pos":[48386,48546],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_SETMODIFY<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761651)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_SETMODIFY](http://msdn.microsoft.com/library/windows/desktop/bb761651) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[48556,48563]},{"pos":[48568,48626],"content":"See the example for <bpt id=\"p1\">[</bpt>CEdit::GetModify<ept id=\"p1\">](#cedit__getmodify)</ept>.","source":"See the example for [CEdit::GetModify](#cedit__getmodify)."},{"pos":[48675,48697],"content":"CEdit::SetPasswordChar"},{"content":"Call this function to set or remove a password character displayed in an edit control when the user types text.","pos":[48701,48812]},{"content":"Parameters","pos":[48869,48879]},{"content":"ch","pos":[48884,48886]},{"content":"Specifies the character to be displayed in place of the character typed by the user.","pos":[48891,48975]},{"content":"If <bpt id=\"p1\">*</bpt>ch<ept id=\"p1\">*</ept> is 0, the actual characters typed by the user are displayed.","pos":[48976,49044],"source":" If *ch* is 0, the actual characters typed by the user are displayed."},{"content":"Remarks","pos":[49054,49061]},{"content":"When a password character is set, that character is displayed for each character the user types.","pos":[49065,49161]},{"content":"This member function has no effect on a multiple-line edit control.","pos":[49168,49235]},{"pos":[49242,49377],"content":"When the <ph id=\"ph1\">`SetPasswordChar`</ph> member function is called, <ph id=\"ph2\">`CEdit`</ph> will redraw all visible characters using the character specified by <bpt id=\"p1\">*</bpt>ch<ept id=\"p1\">*</ept>.","source":"When the `SetPasswordChar` member function is called, `CEdit` will redraw all visible characters using the character specified by *ch*."},{"content":"If the edit control is created with the <bpt id=\"p1\">[</bpt>ES_PASSWORD<ept id=\"p1\">](edit-styles.md)</ept> style, the default password character is set to an asterisk ( <bpt id=\"p2\">**</bpt><ph id=\"ph1\">\\*</ph><ept id=\"p2\">**</ept>).","pos":[49384,49524],"source":"If the edit control is created with the [ES_PASSWORD](edit-styles.md) style, the default password character is set to an asterisk ( **\\***)."},{"content":"This style is removed if <ph id=\"ph1\">`SetPasswordChar`</ph> is called with <bpt id=\"p1\">*</bpt>ch<ept id=\"p1\">*</ept> set to 0.","pos":[49525,49597],"source":" This style is removed if `SetPasswordChar` is called with *ch* set to 0."},{"pos":[49604,49770],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_SETPASSWORDCHAR<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761653)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_SETPASSWORDCHAR](http://msdn.microsoft.com/library/windows/desktop/bb761653) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[49780,49787]},{"pos":[49802,49818],"content":"NVC_MFC_CEdit#16"},{"pos":[49921,49939],"content":"CEdit::SetReadOnly"},{"content":"Calls this function to set the read-only state of an edit control.","pos":[49943,50009]},{"content":"Parameters","pos":[50075,50085]},{"content":"Specifies whether to set or remove the read-only state of the edit control.","pos":[50104,50179]},{"content":"A value of <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> sets the state to read-only; a value of <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> sets the state to read/write.","pos":[50180,50279],"source":" A value of **TRUE** sets the state to read-only; a value of **FALSE** sets the state to read/write."},{"content":"Return Value","pos":[50289,50301]},{"content":"Nonzero if the operation is successful, or 0 if an error occurs.","pos":[50305,50369]},{"content":"Remarks","pos":[50379,50386]},{"pos":[50390,50543],"content":"The current setting can be found by testing the <bpt id=\"p1\">[</bpt>ES_READONLY<ept id=\"p1\">](edit-styles.md)</ept> flag in the return value of <bpt id=\"p2\">[</bpt>CWnd::GetStyle<ept id=\"p2\">](cwnd-class.md#cwnd__getstyle)</ept>.","source":"The current setting can be found by testing the [ES_READONLY](edit-styles.md) flag in the return value of [CWnd::GetStyle](cwnd-class.md#cwnd__getstyle)."},{"pos":[50550,50712],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_SETREADONLY<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761655)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_SETREADONLY](http://msdn.microsoft.com/library/windows/desktop/bb761655) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[50722,50729]},{"pos":[50744,50760],"content":"NVC_MFC_CEdit#23"},{"pos":[50859,50873],"content":"CEdit::SetRect"},{"content":"Call this function to set the dimensions of a rectangle using the specified coordinates.","pos":[50877,50965]},{"content":"Parameters","pos":[51020,51030]},{"content":"Points to the <ph id=\"ph1\">`RECT`</ph> structure or <ph id=\"ph2\">`CRect`</ph> object that specifies the new dimensions of the formatting rectangle.","pos":[51046,51157],"source":" Points to the `RECT` structure or `CRect` object that specifies the new dimensions of the formatting rectangle."},{"content":"Remarks","pos":[51167,51174]},{"content":"This member is processed only by multiple-line edit controls.","pos":[51178,51239]},{"content":"Use <ph id=\"ph1\">`SetRect`</ph> to set the formatting rectangle of a multiple-line edit control.","pos":[51246,51324],"source":"Use `SetRect` to set the formatting rectangle of a multiple-line edit control."},{"content":"The formatting rectangle is the limiting rectangle of the text, which is independent of the size of the edit-control window.","pos":[51325,51449]},{"content":"When the edit control is first created, the formatting rectangle is the same as the client area of the edit-control window.","pos":[51450,51573]},{"content":"By using the <ph id=\"ph1\">`SetRect`</ph> member function, an application can make the formatting rectangle larger or smaller than the edit-control window.","pos":[51574,51710],"source":" By using the `SetRect` member function, an application can make the formatting rectangle larger or smaller than the edit-control window."},{"content":"If the edit control has no scroll bar, text will be clipped, not wrapped, if the formatting rectangle is made larger than the window.","pos":[51717,51850]},{"content":"If the edit control contains a border, the formatting rectangle is reduced by the size of the border.","pos":[51851,51952]},{"content":"If you adjust the rectangle returned by the <ph id=\"ph1\">`GetRect`</ph> member function, you must remove the size of the border before you pass the rectangle to <ph id=\"ph2\">`SetRect`</ph>.","pos":[51953,52106],"source":" If you adjust the rectangle returned by the `GetRect` member function, you must remove the size of the border before you pass the rectangle to `SetRect`."},{"pos":[52113,52199],"content":"When <ph id=\"ph1\">`SetRect`</ph> is called, the edit control's text is also reformatted and redisplayed.","source":"When `SetRect` is called, the edit control's text is also reformatted and redisplayed."},{"pos":[52206,52364],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_SETRECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761657)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_SETRECT](http://msdn.microsoft.com/library/windows/desktop/bb761657) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[52374,52381]},{"pos":[52396,52412],"content":"NVC_MFC_CEdit#24"},{"pos":[52513,52529],"content":"CEdit::SetRectNP"},{"content":"Call this function to set the formatting rectangle of a multiple-line edit control.","pos":[52533,52616]},{"content":"Parameters","pos":[52673,52683]},{"content":"Points to a <ph id=\"ph1\">`RECT`</ph> structure or <ph id=\"ph2\">`CRect`</ph> object that specifies the new dimensions of the rectangle.","pos":[52699,52797],"source":" Points to a `RECT` structure or `CRect` object that specifies the new dimensions of the rectangle."},{"content":"Remarks","pos":[52807,52814]},{"content":"The formatting rectangle is the limiting rectangle of the text, which is independent of the size of the edit-control window.","pos":[52818,52942]},{"pos":[52961,53058],"content":"is identical to the <ph id=\"ph1\">`SetRect`</ph> member function except that the edit-control window is not redrawn.","source":" is identical to the `SetRect` member function except that the edit-control window is not redrawn."},{"content":"When the edit control is first created, the formatting rectangle is the same as the client area of the edit-control window.","pos":[53065,53188]},{"content":"By calling the <ph id=\"ph1\">`SetRectNP`</ph> member function, an application can make the formatting rectangle larger or smaller than the edit-control window.","pos":[53189,53329],"source":" By calling the `SetRectNP` member function, an application can make the formatting rectangle larger or smaller than the edit-control window."},{"content":"If the edit control has no scroll bar, text will be clipped, not wrapped, if the formatting rectangle is made larger than the window.","pos":[53336,53469]},{"content":"This member is processed only by multiple-line edit controls.","pos":[53476,53537]},{"pos":[53544,53704],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_SETRECTNP<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761659)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_SETRECTNP](http://msdn.microsoft.com/library/windows/desktop/bb761659) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[53714,53721]},{"pos":[53726,53780],"content":"See the example for <bpt id=\"p1\">[</bpt>CEdit::SetRect<ept id=\"p1\">](#cedit__setrect)</ept>.","source":"See the example for [CEdit::SetRect](#cedit__setrect)."},{"pos":[53820,53833],"content":"CEdit::SetSel"},{"content":"Call this function to select a range of characters in an edit control.","pos":[53837,53907]},{"content":"Parameters","pos":[54086,54096]},{"content":"dwSelection","pos":[54101,54112]},{"content":"Specifies the starting position in the low-order word and the ending position in the high-order word.","pos":[54117,54218]},{"content":"If the low-order word is 0 and the high-order word is –1, all the text in the edit control is selected.","pos":[54219,54322]},{"content":"If the low-order word is –1, any current selection is removed.","pos":[54323,54385]},{"content":"bNoScroll","pos":[54393,54402]},{"content":"Indicates whether the caret should be scrolled into view.","pos":[54407,54464]},{"content":"If <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>, the caret is scrolled into view.","pos":[54465,54511],"source":" If **FALSE**, the caret is scrolled into view."},{"content":"If <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, the caret is not scrolled into view.","pos":[54512,54561],"source":" If **TRUE**, the caret is not scrolled into view."},{"content":"Specifies the starting position.","pos":[54584,54616]},{"content":"If <ph id=\"ph1\">`nStartChar`</ph> is 0 and <ph id=\"ph2\">`nEndChar`</ph> is –1, all the text in the edit control is selected.","pos":[54617,54705],"source":" If `nStartChar` is 0 and `nEndChar` is –1, all the text in the edit control is selected."},{"content":"If <ph id=\"ph1\">`nStartChar`</ph> is –1, any current selection is removed.","pos":[54706,54762],"source":" If `nStartChar` is –1, any current selection is removed."},{"content":"Specifies the ending position.","pos":[54783,54813]},{"content":"Remarks","pos":[54823,54830]},{"pos":[54834,54991],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_SETSEL<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761661)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_SETSEL](http://msdn.microsoft.com/library/windows/desktop/bb761661) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[55001,55008]},{"pos":[55013,55065],"content":"See the example for <bpt id=\"p1\">[</bpt>CEdit::GetSel<ept id=\"p1\">](#cedit__getsel)</ept>.","source":"See the example for [CEdit::GetSel](#cedit__getsel)."},{"pos":[55110,55128],"content":"CEdit::SetTabStops"},{"content":"Call this function to set the tab stops in a multiple-line edit control.","pos":[55132,55204]},{"content":"Parameters","pos":[55363,55373]},{"content":"Specifies that tab stops are to be set at every <ph id=\"ph1\">`cxEachStop`</ph> dialog units.","pos":[55393,55467],"source":" Specifies that tab stops are to be set at every `cxEachStop` dialog units."},{"content":"Specifies the number of tab stops contained in <ph id=\"ph1\">`rgTabStops`</ph>.","pos":[55489,55549],"source":" Specifies the number of tab stops contained in `rgTabStops`."},{"content":"This number must be greater than 1.","pos":[55550,55585]},{"content":"Points to an array of unsigned integers specifying the tab stops in dialog units.","pos":[55608,55689]},{"content":"A dialog unit is a horizontal or vertical distance.","pos":[55690,55741]},{"content":"One horizontal dialog unit is equal to one-fourth of the current dialog base width unit, and 1 vertical dialog unit is equal to one-eighth of the current dialog base height unit.","pos":[55742,55920]},{"content":"The dialog base units are computed based on the height and width of the current system font.","pos":[55921,56013]},{"content":"The <bpt id=\"p1\">**</bpt>GetDialogBaseUnits<ept id=\"p1\">**</ept> Windows function returns the current dialog base units in pixels.","pos":[56014,56106],"source":" The **GetDialogBaseUnits** Windows function returns the current dialog base units in pixels."},{"content":"Return Value","pos":[56116,56128]},{"content":"Nonzero if the tabs were set; otherwise 0.","pos":[56132,56174]},{"content":"Remarks","pos":[56184,56191]},{"content":"When text is copied to a multiple-line edit control, any tab character in the text will cause space to be generated up to the next tab stop.","pos":[56195,56335]},{"content":"To set tab stops to the default size of 32 dialog units, call the parameterless version of this member function.","pos":[56342,56454]},{"content":"To set tab stops to a size other than 32, call the version with the <ph id=\"ph1\">`cxEachStop`</ph> parameter.","pos":[56455,56546],"source":" To set tab stops to a size other than 32, call the version with the `cxEachStop` parameter."},{"content":"To set tab stops to an array of sizes, use the version with two parameters.","pos":[56547,56622]},{"content":"This member function is only processed by multiple-line edit controls.","pos":[56629,56699]},{"content":"does not automatically redraw the edit window.","pos":[56720,56766]},{"content":"If you change the tab stops for text already in the edit control, call <bpt id=\"p1\">[</bpt>CWnd::InvalidateRect<ept id=\"p1\">](cwnd-class.md#cwnd__invalidaterect)</ept> to redraw the edit window.","pos":[56767,56923],"source":" If you change the tab stops for text already in the edit control, call [CWnd::InvalidateRect](cwnd-class.md#cwnd__invalidaterect) to redraw the edit window."},{"pos":[56930,57177],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_SETTABSTOPS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761663)</ept> and <bpt id=\"p2\">[</bpt>GetDialogBaseUnits<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms645475)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_SETTABSTOPS](http://msdn.microsoft.com/library/windows/desktop/bb761663) and [GetDialogBaseUnits](http://msdn.microsoft.com/library/windows/desktop/ms645475) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[57187,57194]},{"pos":[57199,57287],"content":"See the example for <bpt id=\"p1\">[</bpt>CEditView::SetTabStops<ept id=\"p1\">](ceditview-class.md#ceditview__settabstops)</ept>.","source":"See the example for [CEditView::SetTabStops](ceditview-class.md#ceditview__settabstops)."},{"pos":[57335,57356],"content":"CEdit::ShowBalloonTip"},{"content":"Displays a balloon tip that is associated with the current edit control.","pos":[57360,57432]},{"content":"Parameters","pos":[57620,57630]},{"content":"Parameter","pos":[57637,57646]},{"content":"Description","pos":[57647,57658]},{"pos":[57701,57705],"content":"[in]"},{"pos":[57724,57856],"content":"Pointer to an <bpt id=\"p1\">[</bpt>EDITBALLOONTIP<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775466)</ept> structure that describes the balloon tip.","source":"Pointer to an [EDITBALLOONTIP](http://msdn.microsoft.com/library/windows/desktop/bb775466) structure that describes the balloon tip."},{"pos":[57861,57865],"content":"[in]"},{"content":"Pointer to a Unicode string that contains the title of the balloon tip.","pos":[57878,57949]},{"pos":[57954,57958],"content":"[in]"},{"content":"Pointer to a Unicode string that contains the balloon tip text.","pos":[57970,58033]},{"pos":[58038,58042],"content":"[in]"},{"content":"An <ph id=\"ph1\">`INT`</ph> that specifies the type of icon to associate with the balloon tip.","pos":[58053,58128],"source":"An `INT` that specifies the type of icon to associate with the balloon tip."},{"content":"The default value is <ph id=\"ph1\">`TTI_NONE`</ph>.","pos":[58129,58161],"source":" The default value is `TTI_NONE`."},{"content":"For more information, see the <ph id=\"ph1\">`ttiIcon`</ph> member of the <bpt id=\"p1\">[</bpt>EDITBALLOONTIP<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775466)</ept> structure.","pos":[58162,58303],"source":" For more information, see the `ttiIcon` member of the [EDITBALLOONTIP](http://msdn.microsoft.com/library/windows/desktop/bb775466) structure."},{"content":"Return Value","pos":[58314,58326]},{"pos":[58337,58386],"content":"if this method is successful; otherwise, <ph id=\"ph1\">`false`</ph>.","source":" if this method is successful; otherwise, `false`."},{"content":"Remarks","pos":[58396,58403]},{"content":"This function sends the <bpt id=\"p1\">[</bpt>EM_SHOWBALLOONTIP<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761668)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[58407,58598],"source":"This function sends the [EM_SHOWBALLOONTIP](http://msdn.microsoft.com/library/windows/desktop/bb761668) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>Edit_ShowBalloonTip<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761707)</ept> macro.","pos":[58599,58717],"source":" For more information, see the [Edit_ShowBalloonTip](http://msdn.microsoft.com/library/windows/desktop/bb761707) macro."},{"content":"Example","pos":[58727,58734]},{"content":"The following code example defines a variable, <ph id=\"ph1\">`m_cedit`</ph>, that is used to access the current edit control.","pos":[58738,58844],"source":"The following code example defines a variable, `m_cedit`, that is used to access the current edit control."},{"content":"This variable is used in the next example.","pos":[58845,58887]},{"pos":[58905,58923],"content":"NVC_MFC_CEdit_s1#1"},{"content":"Example","pos":[58989,58996]},{"content":"The following code example displays a balloon tip for an edit control.","pos":[59000,59070]},{"content":"The <bpt id=\"p1\">[</bpt>CEdit::ShowBalloonTip<ept id=\"p1\">](#cedit__showballoontip)</ept> method specifies a title and balloon tip text.","pos":[59071,59169],"source":" The [CEdit::ShowBalloonTip](#cedit__showballoontip) method specifies a title and balloon tip text."},{"pos":[59187,59205],"content":"NVC_MFC_CEdit_s1#3"},{"pos":[59301,59312],"content":"CEdit::Undo"},{"content":"Call this function to undo the last edit-control operation.","pos":[59316,59375]},{"content":"Return Value","pos":[59413,59425]},{"content":"For a single-line edit control, the return value is always nonzero.","pos":[59429,59496]},{"content":"For a multiple-line edit control, the return value is nonzero if the undo operation is successful, or 0 if the undo operation fails.","pos":[59497,59629]},{"content":"Remarks","pos":[59639,59646]},{"content":"An undo operation can also be undone.","pos":[59650,59687]},{"content":"For example, you can restore deleted text with the first call to <bpt id=\"p1\">**</bpt>Undo<ept id=\"p1\">**</ept>.","pos":[59688,59762],"source":" For example, you can restore deleted text with the first call to **Undo**."},{"content":"As long as there is no intervening edit operation, you can remove the text again with a second call to <bpt id=\"p1\">**</bpt>Undo<ept id=\"p1\">**</ept>.","pos":[59763,59875],"source":" As long as there is no intervening edit operation, you can remove the text again with a second call to **Undo**."},{"pos":[59882,60037],"content":"For more information, see <bpt id=\"p1\">[</bpt>EM_UNDO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761670)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [EM_UNDO](http://msdn.microsoft.com/library/windows/desktop/bb761670) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[60047,60054]},{"pos":[60069,60085],"content":"NVC_MFC_CEdit#25"},{"content":"See Also","pos":[60152,60160]},{"content":"MFC Sample CALCDRIV","pos":[60165,60184]},{"content":"MFC Sample CMNCTRL2","pos":[60220,60239]},{"content":"CWnd Class","pos":[60275,60285]},{"content":"Hierarchy Chart","pos":[60327,60342]},{"content":"CWnd Class","pos":[60379,60389]},{"content":"CButton Class","pos":[60411,60424]},{"content":"CComboBox Class","pos":[60449,60464]},{"content":"CListBox Class","pos":[60491,60505]},{"content":"CScrollBar Class","pos":[60531,60547]},{"content":"CStatic Class","pos":[60575,60588]},{"content":"CDialog Class","pos":[60613,60626]}],"content":"---\ntitle: \"CEdit Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CEdit\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"separators, in multiline edit controls\"\n  - \"text editors\"\n  - \"controls [MFC], edit\"\n  - \"text editors, CEdit class\"\n  - \"edit controls, classes\"\n  - \"multiline edit control\"\n  - \"CEdit class\"\n  - \"line separators in multiline edit controls\"\n  - \"edit controls\"\nms.assetid: b1533c30-7f10-4663-88d3-8b7f2c9f7024\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CEdit Class\nProvides the functionality of a Windows edit control.  \n  \n## Syntax  \n  \n```  \nclass CEdit : public CWnd  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CEdit::CEdit](#cedit__cedit)|Constructs a `CEdit` control object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CEdit::CanUndo](#cedit__canundo)|Determines whether an edit-control operation can be undone.|  \n|[CEdit::CharFromPos](#cedit__charfrompos)|Retrieves the line and character indexes for the character closest to a specified position.|  \n|[CEdit::Clear](#cedit__clear)|Deletes (clears) the current selection (if any) in the edit control.|  \n|[CEdit::Copy](#cedit__copy)|Copies the current selection (if any) in the edit control to the Clipboard in **CF_TEXT** format.|  \n|[CEdit::Create](#cedit__create)|Creates the Windows edit control and attaches it to the `CEdit` object.|  \n|[CEdit::Cut](#cedit__cut)|Deletes (cuts) the current selection (if any) in the edit control and copies the deleted text to the Clipboard in **CF_TEXT** format.|  \n|[CEdit::EmptyUndoBuffer](#cedit__emptyundobuffer)|Resets (clears) the undo flag of an edit control.|  \n|[CEdit::FmtLines](#cedit__fmtlines)|Sets the inclusion of soft line-break characters on or off within a multiple-line edit control.|  \n|[CEdit::GetCueBanner](#cedit__getcuebanner)|Retrieves the text that is displayed as the text cue, or tip, in an edit control when the control is empty and does not have focus.|  \n|[CEdit::GetFirstVisibleLine](#cedit__getfirstvisibleline)|Determines the topmost visible line in an edit control.|  \n|[CEdit::GetHandle](#cedit__gethandle)|Retrieves a handle to the memory that is currently allocated for a multiple-line edit control.|  \n|[CEdit::GetHighlight](#cedit__gethighlight)|Gets the indexes of the starting and ending characters in a range of text that is highlighted in the current edit control.|  \n|[CEdit::GetLimitText](#cedit__getlimittext)|Gets the maximum amount of text this `CEdit` can contain.|  \n|[CEdit::GetLine](#cedit__getline)|Retrieves a line of text from an edit control.|  \n|[CEdit::GetLineCount](#cedit__getlinecount)|Retrieves the number of lines in a multiple-line edit control.|  \n|[CEdit::GetMargins](#cedit__getmargins)|Gets the left and right margins for this `CEdit`.|  \n|[CEdit::GetModify](#cedit__getmodify)|Determines whether the contents of an edit control have been modified.|  \n|[CEdit::GetPasswordChar](#cedit__getpasswordchar)|Retrieves the password character displayed in an edit control when the user enters text.|  \n|[CEdit::GetRect](#cedit__getrect)|Gets the formatting rectangle of an edit control.|  \n|[CEdit::GetSel](#cedit__getsel)|Gets the first and last character positions of the current selection in an edit control.|  \n|[CEdit::HideBalloonTip](#cedit__hideballoontip)|Hides any balloon tip associated with the current edit control.|  \n|[CEdit::LimitText](#cedit__limittext)|Limits the length of the text that the user can enter into an edit control.|  \n|[CEdit::LineFromChar](#cedit__linefromchar)|Retrieves the line number of the line that contains the specified character index.|  \n|[CEdit::LineIndex](#cedit__lineindex)|Retrieves the character index of a line within a multiple-line edit control.|  \n|[CEdit::LineLength](#cedit__linelength)|Retrieves the length of a line in an edit control.|  \n|[CEdit::LineScroll](#cedit__linescroll)|Scrolls the text of a multiple-line edit control.|  \n|[CEdit::Paste](#cedit__paste)|Inserts the data from the Clipboard into the edit control at the current cursor position. Data is inserted only if the Clipboard contains data in **CF_TEXT** format.|  \n|[CEdit::PosFromChar](#cedit__posfromchar)|Retrieves the coordinates of the upper-left corner of a specified character index.|  \n|[CEdit::ReplaceSel](#cedit__replacesel)|Replaces the current selection in an edit control with the specified text.|  \n|[CEdit::SetCueBanner](#cedit__setcuebanner)|Sets the text that is displayed as the text cue, or tip, in an edit control when the control is empty and does not have focus.|  \n|[CEdit::SetHandle](#cedit__sethandle)|Sets the handle to the local memory that will be used by a multiple-line edit control.|  \n|[CEdit::SetHighlight](#cedit__sethighlight)|Highlights a range of text that is displayed in the current edit control.|  \n|[CEdit::SetLimitText](#cedit__setlimittext)|Sets the maximum amount of text this `CEdit` can contain.|  \n|[CEdit::SetMargins](#cedit__setmargins)|Sets the left and right margins for this `CEdit`.|  \n|[CEdit::SetModify](#cedit__setmodify)|Sets or clears the modification flag for an edit control.|  \n|[CEdit::SetPasswordChar](#cedit__setpasswordchar)|Sets or removes a password character displayed in an edit control when the user enters text.|  \n|[CEdit::SetReadOnly](#cedit__setreadonly)|Sets the read-only state of an edit control.|  \n|[CEdit::SetRect](#cedit__setrect)|Sets the formatting rectangle of a multiple-line edit control and updates the control.|  \n|[CEdit::SetRectNP](#cedit__setrectnp)|Sets the formatting rectangle of a multiple-line edit control without redrawing the control window.|  \n|[CEdit::SetSel](#cedit__setsel)|Selects a range of characters in an edit control.|  \n|[CEdit::SetTabStops](#cedit__settabstops)|Sets the tab stops in a multiple-line edit control.|  \n|[CEdit::ShowBalloonTip](#cedit__showballoontip)|Displays a balloon tip that is associated with the current edit control.|  \n|[CEdit::Undo](#cedit__undo)|Reverses the last edit-control operation.|  \n  \n## Remarks  \n An edit control is a rectangular child window in which the user can enter text.  \n  \n You can create an edit control either from a dialog template or directly in your code. In both cases, first call the constructor `CEdit` to construct the `CEdit` object, then call the [Create](#cedit__create) member function to create the Windows edit control and attach it to the `CEdit` object.  \n  \n Construction can be a one-step process in a class derived from `CEdit`. Write a constructor for the derived class and call **Create** from within the constructor.  \n  \n `CEdit` inherits significant functionality from `CWnd`. To set and retrieve text from a `CEdit` object, use the `CWnd` member functions [SetWindowText](cwnd-class.md#cwnd__setwindowtext) and [GetWindowText](cwnd-class.md#cwnd__getwindowtext), which set or get the entire contents of an edit control, even if it is a multiline control. Text lines in a multiline control are separated by '\\r\\n' character sequences. Also, if an edit control is multiline, get and set part of the control's text by calling the `CEdit` member functions [GetLine](#cedit__getline), [SetSel](#cedit__setsel), [GetSel](#cedit__getsel), and [ReplaceSel](#cedit__replacesel).  \n  \n If you want to handle Windows notification messages sent by an edit control to its parent (usually a class derived from `CDialog`), add a message-map entry and message-handler member function to the parent class for each message.  \n  \n Each message-map entry takes the following form:  \n  \n **ON_**Notification **(** *id, memberFxn***)**  \n  \n where `id` specifies the child window ID of the edit control sending the notification, and `memberFxn` is the name of the parent member function you have written to handle the notification.  \n  \n The parent's function prototype is as follows:  \n  \n **afx_msg** void memberFxn **( );**  \n  \n Following is a list of potential message-map entries and a description of the cases in which they would be sent to the parent:  \n  \n- **ON_EN_CHANGE** The user has taken an action that may have altered text in an edit control. Unlike the **EN_UPDATE** notification message, this notification message is sent after Windows updates the display.  \n  \n- **ON_EN_ERRSPACE** The edit control cannot allocate enough memory to meet a specific request.  \n  \n- **ON_EN_HSCROLL** The user clicks an edit control's horizontal scroll bar. The parent window is notified before the screen is updated.  \n  \n- **ON_EN_KILLFOCUS** The edit control loses the input focus.  \n  \n- **ON_EN_MAXTEXT** The current insertion has exceeded the specified number of characters for the edit control and has been truncated. Also sent when an edit control does not have the **ES_AUTOHSCROLL** style and the number of characters to be inserted would exceed the width of the edit control. Also sent when an edit control does not have the **ES_AUTOVSCROLL** style and the total number of lines resulting from a text insertion would exceed the height of the edit control.  \n  \n- **ON_EN_SETFOCUS** Sent when an edit control receives the input focus.  \n  \n- **ON_EN_UPDATE** The edit control is about to display altered text. Sent after the control has formatted the text but before it screens the text so that the window size can be altered, if necessary.  \n  \n- **ON_EN_VSCROLL** The user clicks an edit control's vertical scroll bar. The parent window is notified before the screen is updated.  \n  \n If you create a `CEdit` object within a dialog box, the `CEdit` object is automatically destroyed when the user closes the dialog box.  \n  \n If you create a `CEdit` object from a dialog resource using the dialog editor, the `CEdit` object is automatically destroyed when the user closes the dialog box.  \n  \n If you create a `CEdit` object within a window, you may also need to destroy it. If you create the `CEdit` object on the stack, it is destroyed automatically. If you create the `CEdit` object on the heap by using the **new** function, you must call **delete** on the object to destroy it when the user terminates the Windows edit control. If you allocate any memory in the `CEdit` object, override the `CEdit` destructor to dispose of the allocations.  \n  \n To modify certain styles in an edit control (such as **ES_READONLY**) you must send specific messages to the control instead of using [ModifyStyle](cwnd-class.md#cwnd__modifystyle). See [Edit Control Styles](http://msdn.microsoft.com/library/windows/desktop/bb775464) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n For more information on `CEdit`, see:  \n  \n- [Controls](../../mfc/controls-mfc.md)  \n  \n-   Knowledge Base article Q259949 : INFO: SetCaretPos() Is Not Appropriate with CEdit or CRichEditCtrl Controls  \n  \n## Inheritance Hierarchy  \n [CObject](cobject-class.md)  \n  \n [CCmdTarget](ccmdtarget-class.md)  \n  \n [CWnd](cwnd-class.md)  \n  \n `CEdit`  \n  \n## Requirements  \n **Header:** afxwin.h  \n  \n##  <a name=\"cedit__canundo\"></a>  CEdit::CanUndo  \n Call this function to determine if the last edit operation can be undone.  \n  \n```  \nBOOL CanUndo() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if the last edit operation can be undone by a call to the **Undo** member function; 0 if it cannot be undone.  \n  \n### Remarks  \n For more information, see [EM_CANUNDO](http://msdn.microsoft.com/library/windows/desktop/bb775468) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CEdit::Undo](#cedit__undo).  \n  \n##  <a name=\"cedit__cedit\"></a>  CEdit::CEdit  \n Constructs a `CEdit` object.  \n  \n```  \nCEdit();\n```  \n  \n### Remarks  \n Use [Create](#cedit__create) to construct the Windows edit control.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CEdit#1](../../mfc/reference/codesnippet/cpp/cedit-class_1.cpp)]  \n  \n##  <a name=\"cedit__charfrompos\"></a>  CEdit::CharFromPos  \n Call this function to retrieve the zero-based line and character indices of the character nearest the specified point in this `CEdit` control  \n  \n```  \nint CharFromPos(CPoint pt) const;\n\n \n```  \n  \n### Parameters  \n `pt`  \n The coordinates of a point in the client area of this `CEdit` object.  \n  \n### Return Value  \n The character index in the low-order **WORD**, and the line index in the high-order **WORD**.  \n  \n### Remarks  \n  \n> [!NOTE]\n>  This member function is available beginning with Windows 95 and Windows NT 4.0.  \n  \n For more information, see [EM_CHARFROMPOS](http://msdn.microsoft.com/library/windows/desktop/bb761566) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CEdit#3](../../mfc/reference/codesnippet/cpp/cedit-class_2.cpp)]  \n  \n##  <a name=\"cedit__clear\"></a>  CEdit::Clear  \n Call this function to delete (clear) the current selection (if any) in the edit control.  \n  \n```  \nvoid Clear();\n```  \n  \n### Remarks  \n The deletion performed by **Clear** can be undone by calling the [Undo](#cedit__undo) member function.  \n  \n To delete the current selection and place the deleted contents into the Clipboard, call the [Cut](#cedit__cut) member function.  \n  \n For more information, see [WM_CLEAR](http://msdn.microsoft.com/library/windows/desktop/ms649020) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CEdit#4](../../mfc/reference/codesnippet/cpp/cedit-class_3.cpp)]  \n  \n##  <a name=\"cedit__copy\"></a>  CEdit::Copy  \n Call this function to coy the current selection (if any) in the edit control to the Clipboard in **CF_TEXT** format.  \n  \n```  \nvoid Copy();\n```  \n  \n### Remarks  \n For more information, see [WM_COPY](http://msdn.microsoft.com/library/windows/desktop/ms649022) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CEdit#5](../../mfc/reference/codesnippet/cpp/cedit-class_4.cpp)]  \n  \n##  <a name=\"cedit__create\"></a>  CEdit::Create  \n Creates the Windows edit control and attaches it to the `CEdit` object.  \n  \n```  \nvirtual BOOL Create(\n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    UINT nID);\n```  \n  \n### Parameters  \n `dwStyle`  \n Specifies the edit control's style. Apply any combination of [edit styles](edit-styles.md) to the control.  \n  \n `rect`  \n Specifies the edit control's size and position. Can be a `CRect` object or `RECT` structure.  \n  \n `pParentWnd`  \n Specifies the edit control's parent window (usually a `CDialog`). It must not be **NULL**.  \n  \n `nID`  \n Specifies the edit control's ID.  \n  \n### Return Value  \n Nonzero if initialization is successful; otherwise 0.  \n  \n### Remarks  \n You construct a `CEdit` object in two steps. First, call the `CEdit` constructor and then call **Create**, which creates the Windows edit control and attaches it to the `CEdit` object.  \n  \n When **Create** executes, Windows sends the [WM_NCCREATE](http://msdn.microsoft.com/library/windows/desktop/ms632635), [WM_NCCALCSIZE](http://msdn.microsoft.com/library/windows/desktop/ms632634), [WM_CREATE](http://msdn.microsoft.com/library/windows/desktop/ms632619), and [WM_GETMINMAXINFO](http://msdn.microsoft.com/library/windows/desktop/ms632626) messages to the edit control.  \n  \n These messages are handled by default by the [OnNcCreate](cwnd-class.md#cwnd__onnccreate), [OnNcCalcSize](cwnd-class.md#cwnd__onnccalcsize), [OnCreate](cwnd-class.md#cwnd__oncreate), and [OnGetMinMaxInfo](cwnd-class.md#cwnd__ongetminmaxinfo) member functions in the `CWnd` base class. To extend the default message handling, derive a class from `CEdit`, add a message map to the new class, and override the above message-handler member functions. Override `OnCreate`, for example, to perform needed initialization for the new class.  \n  \n Apply the following [window styles](window-styles.md) to an edit control.  \n  \n- **WS_CHILD** Always  \n  \n- **WS_VISIBLE** Usually  \n  \n- **WS_DISABLED** Rarely  \n  \n- **WS_GROUP** To group controls  \n  \n- **WS_TABSTOP** To include edit control in the tabbing order  \n  \n### Example  \n [!code-cpp[NVC_MFC_CEdit#2](../../mfc/reference/codesnippet/cpp/cedit-class_5.cpp)]  \n  \n##  <a name=\"cedit__cut\"></a>  CEdit::Cut  \n Call this function to delete (cut) the current selection (if any) in the edit control and copy the deleted text to the Clipboard in **CF_TEXT** format.  \n  \n```  \nvoid Cut();\n```  \n  \n### Remarks  \n The deletion performed by **Cut** can be undone by calling the [Undo](#cedit__undo) member function.  \n  \n To delete the current selection without placing the deleted text into the Clipboard, call the [Clear](#cedit__clear) member function.  \n  \n For more information, see [WM_CUT](http://msdn.microsoft.com/library/windows/desktop/ms649023) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CEdit#6](../../mfc/reference/codesnippet/cpp/cedit-class_6.cpp)]  \n  \n##  <a name=\"cedit__emptyundobuffer\"></a>  CEdit::EmptyUndoBuffer  \n Call this function to reset (clear) the undo flag of an edit control.  \n  \n```  \nvoid EmptyUndoBuffer();\n```  \n  \n### Remarks  \n The edit control will now be unable to undo the last operation. The undo flag is set whenever an operation within the edit control can be undone.  \n  \n The undo flag is automatically cleared whenever the [SetWindowText](../../mfc/reference/cwnd-class.md#cwnd__setwindowtext) or [SetHandle](#cedit__sethandle)`CWnd` member functions are called.  \n  \n For more information, see [EM_EMPTYUNDOBUFFER](http://msdn.microsoft.com/library/windows/desktop/bb761568) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CEdit#7](../../mfc/reference/codesnippet/cpp/cedit-class_7.cpp)]  \n  \n##  <a name=\"cedit__fmtlines\"></a>  CEdit::FmtLines  \n Call this function to set the inclusion of soft line-break characters on or off within a multiple-line edit control.  \n  \n```  \nBOOL FmtLines(BOOL bAddEOL);\n```  \n  \n### Parameters  \n *bAddEOL*  \n Specifies whether soft line-break characters are to be inserted. A value of **TRUE** inserts the characters; a value of **FALSE** removes them.  \n  \n### Return Value  \n Nonzero if any formatting occurs; otherwise 0.  \n  \n### Remarks  \n A soft line break consists of two carriage returns and a linefeed inserted at the end of a line that is broken because of word wrapping. A hard line break consists of one carriage return and a linefeed. Lines that end with a hard line break are not affected by `FmtLines`.  \n  \n Windows will only respond if the `CEdit` object is a multiple-line edit control.  \n  \n `FmtLines` only affects the buffer returned by [GetHandle](#cedit__gethandle) and the text returned by [WM_GETTEXT](http://msdn.microsoft.com/library/windows/desktop/ms632627). It has no impact on the display of the text within the edit control.  \n  \n For more information, see [EM_FMTLINES](http://msdn.microsoft.com/library/windows/desktop/bb761570) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CEdit#8](../../mfc/reference/codesnippet/cpp/cedit-class_8.cpp)]  \n  \n##  <a name=\"cedit__getcuebanner\"></a>  CEdit::GetCueBanner  \n Retrieves the text that is displayed as the text cue, or tip, in an edit control when the control is empty.  \n  \n```  \nBOOL GetCueBanner(\n    LPWSTR lpszText,  \n    int cchText) const;\n\n \n \nCString GetCueBanner() const;\n\n \n```  \n  \n### Parameters  \n [out] `lpszText`  \n A pointer to a string that contains the cue text.  \n  \n [in] `cchText`  \n The number of characters that can be received. This number includes the terminating `NULL` character.  \n  \n### Return Value  \n For the first overload, `true` if the method is successful; otherwise `false`.  \n  \n For the second overload, a [CString](../../atl-mfc-shared/using-cstring.md) that contains the cue text if the method is successful; otherwise, the empty string (\"\").  \n  \n### Remarks  \n This method sends the [EM_GETCUEBANNER](http://msdn.microsoft.com/library/windows/desktop/bb761572) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. For more information, see the [Edit_GetCueBannerText](http://msdn.microsoft.com/library/windows/desktop/bb761695) macro.  \n  \n##  <a name=\"cedit__getfirstvisibleline\"></a>  CEdit::GetFirstVisibleLine  \n Call this function to determine the topmost visible line in an edit control.  \n  \n```  \nint GetFirstVisibleLine() const;\n\n \n```  \n  \n### Return Value  \n The zero-based index of the topmost visible line. For single-line edit controls, the return value is 0.  \n  \n### Remarks  \n For more information, see [EM_GETFIRSTVISIBLELINE](http://msdn.microsoft.com/library/windows/desktop/bb761574) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CEdit#9](../../mfc/reference/codesnippet/cpp/cedit-class_9.cpp)]  \n  \n##  <a name=\"cedit__gethandle\"></a>  CEdit::GetHandle  \n Call this function to retrieve a handle to the memory currently allocated for a multiple-line edit control.  \n  \n```  \nHLOCAL GetHandle() const;\n\n \n```  \n  \n### Return Value  \n A local memory handle that identifies the buffer holding the contents of the edit control. If an error occurs, such as sending the message to a single-line edit control, the return value is 0.  \n  \n### Remarks  \n The handle is a local memory handle and may be used by any of the **Local** Windows memory functions that take a local memory handle as a parameter.  \n  \n **GetHandle** is processed only by multiple-line edit controls.  \n  \n Call **GetHandle** for a multiple-line edit control in a dialog box only if the dialog box was created with the **DS_LOCALEDIT** style flag set. If the **DS_LOCALEDIT** style is not set, you will still get a nonzero return value, but you will not be able to use the returned value.  \n  \n> [!NOTE]\n> **GetHandle** will not work with Windows 95/98. If you call **GetHandle** in Windows 95/98, it will return **NULL**. **GetHandle** will work as documented under Windows NT, versions 3.51 and later.  \n  \n For more information, see [EM_GETHANDLE](http://msdn.microsoft.com/library/windows/desktop/bb761576) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CEdit#10](../../mfc/reference/codesnippet/cpp/cedit-class_10.cpp)]  \n  \n##  <a name=\"cedit__gethighlight\"></a>  CEdit::GetHighlight  \n Gets the indexes of the first and last characters in a range of text that is highlighted in the current edit control.  \n  \n```  \nBOOL GetHighlight(\n    int* pichStart,   \n    int* pichEnd) const;\n\n \n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[out] `pichStart`|Zero-based index of the first character in the range of text that is highlighted.|  \n|[out] `pichEnd`|Zero-based index of the last character in the range of text that is highlighted.|  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n This method sends the [EM_GETHILITE](http://msdn.microsoft.com/library/windows/desktop/bb761578) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cedit__getlimittext\"></a>  CEdit::GetLimitText  \n Call this member function to get the text limit for this `CEdit` object.  \n  \n```  \nUINT GetLimitText() const;\n\n \n```  \n  \n### Return Value  \n The current text limit, in bytes, for this `CEdit` object.  \n  \n### Remarks  \n The text limit is the maximum amount of text, in bytes, that the edit control can accept.  \n  \n> [!NOTE]\n>  This member function is available beginning with Windows 95 and Windows NT 4.0.  \n  \n For more information, see [EM_GETLIMITTEXT](http://msdn.microsoft.com/library/windows/desktop/bb761582) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CEdit#11](../../mfc/reference/codesnippet/cpp/cedit-class_11.cpp)]  \n  \n##  <a name=\"cedit__getline\"></a>  CEdit::GetLine  \n Call this function to retrieve a line of text from an edit control and places it in `lpszBuffer`.  \n  \n```  \nint GetLine(\n    int nIndex,  \n    LPTSTR lpszBuffer) const;\n\n \n \nint GetLine(\n    int nIndex,  \n    LPTSTR lpszBuffer,  \n    int nMaxLength) const;\n\n \n```  \n  \n### Parameters  \n `nIndex`  \n Specifies the line number to retrieve from a multiple-line edit control. Line numbers are zero-based; a value of 0 specifies the first line. This parameter is ignored by a single-line edit control.  \n  \n `lpszBuffer`  \n Points to the buffer that receives a copy of the line. The first word of the buffer must specify the maximum number of characters that can be copied to the buffer.  \n  \n `nMaxLength`  \n Specifies the maximum number of bytes that can be copied to the buffer. `GetLine` places this value in the first word of `lpszBuffer` before making the call to Windows.  \n  \n### Return Value  \n The number of bytes actually copied. The return value is 0 if the line number specified by `nIndex` is greater than the number of lines in the edit control.  \n  \n### Remarks  \n The copied line does not contain a null-termination character.  \n  \n For more information, see [EM_GETLINE](http://msdn.microsoft.com/library/windows/desktop/bb761584) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CEdit::GetLineCount](#cedit__getlinecount).  \n  \n##  <a name=\"cedit__getlinecount\"></a>  CEdit::GetLineCount  \n Call this function to retrieve the number of lines in a multiple-line edit control.  \n  \n```  \nint GetLineCount() const;\n\n \n```  \n  \n### Return Value  \n An integer containing the number of lines in the multiple-line edit control. If no text has been entered into the edit control, the return value is 1.  \n  \n### Remarks  \n `GetLineCount` is only processed by multiple-line edit controls.  \n  \n For more information, see [EM_GETLINECOUNT](http://msdn.microsoft.com/library/windows/desktop/bb761586) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CEdit#12](../../mfc/reference/codesnippet/cpp/cedit-class_12.cpp)]  \n  \n##  <a name=\"cedit__getmargins\"></a>  CEdit::GetMargins  \n Call this member function to retrieve the left and right margins of this edit control.  \n  \n```  \nDWORD GetMargins() const;\n\n \n```  \n  \n### Return Value  \n The width of the left margin in the low-order **WORD** and the width of the right margin in the high-order **WORD**.  \n  \n### Remarks  \n Margins are measured in pixels.  \n  \n> [!NOTE]\n>  This member function is available beginning with Windows 95 and Windows NT 4.0.  \n  \n For more information, see [EM_GETMARGINS](http://msdn.microsoft.com/library/windows/desktop/bb761590) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CEditView::GetEditCtrl](ceditview-class.md#ceditview__geteditctrl).  \n  \n##  <a name=\"cedit__getmodify\"></a>  CEdit::GetModify  \n Call this function to determine whether the contents of an edit control have been modified.  \n  \n```  \nBOOL GetModify() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if the edit-control contents have been modified; 0 if they have remained unchanged.  \n  \n### Remarks  \n Windows maintains an internal flag indicating whether the contents of the edit control have been changed. This flag is cleared when the edit control is first created and may also be cleared by calling the [SetModify](#cedit__setmodify) member function.  \n  \n For more information, see [EM_GETMODIFY](http://msdn.microsoft.com/library/windows/desktop/bb761592) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CEdit#13](../../mfc/reference/codesnippet/cpp/cedit-class_13.cpp)]  \n  \n##  <a name=\"cedit__getpasswordchar\"></a>  CEdit::GetPasswordChar  \n Call this function to retrieve the password character that is displayed in an edit control when the user enters text.  \n  \n```  \nTCHAR GetPasswordChar() const;\n\n \n```  \n  \n### Return Value  \n Specifies the character to be displayed instead of the character that the user typed. The return value is `NULL` if no password character exists.  \n  \n### Remarks  \n If you create the edit control with the **ES_PASSWORD** style, the DLL that supports the control determines the default password character. The manifest or the [InitCommonControlsEx](http://msdn.microsoft.com/library/windows/desktop/bb775697) method determines which DLL supports the edit control. If user32.dll supports the edit control, the default password character is ASTERISK ('*', U+002A). If comctl32.dll version 6 supports the edit control, the default character is BLACK CIRCLE ('●', U+25CF). For more information about which DLL and version supports the common controls, see [Shell and Common Controls Versions](http://msdn.microsoft.com/library/windows/desktop/bb776779).  \n  \n This method sends the [EM_GETPASSWORDCHAR](http://msdn.microsoft.com/library/windows/desktop/bb761594) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CEdit#14](../../mfc/reference/codesnippet/cpp/cedit-class_14.cpp)]  \n  \n##  <a name=\"cedit__getrect\"></a>  CEdit::GetRect  \n Call this function to get the formatting rectangle of an edit control.  \n  \n```  \nvoid GetRect(LPRECT lpRect) const;\n\n \n```  \n  \n### Parameters  \n `lpRect`  \n Points to the `RECT` structure that receives the formatting rectangle.  \n  \n### Remarks  \n The formatting rectangle is the limiting rectangle of the text, which is independent of the size of the edit-control window.  \n  \n The formatting rectangle of a multiple-line edit control can be modified by the [SetRect](#cedit__setrect) and [SetRectNP](#cedit__setrectnp) member functions.  \n  \n For more information, see [EM_GETRECT](http://msdn.microsoft.com/library/windows/desktop/bb761596) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CEdit::LimitText](#cedit__limittext).  \n  \n##  <a name=\"cedit__getsel\"></a>  CEdit::GetSel  \n Call this function to get the starting and ending character positions of the current selection (if any) in an edit control, using either the return value or the parameters.  \n  \n```  \nDWORD GetSel() const;\n\n \n \nvoid GetSel(\n    int& nStartChar,  \n    int& nEndChar) const;\n\n \n```  \n  \n### Parameters  \n `nStartChar`  \n Reference to an integer that will receive the position of the first character in the current selection.  \n  \n `nEndChar`  \n Reference to an integer that will receive the position of the first nonselected character past the end of the current selection.  \n  \n### Return Value  \n The version that returns a `DWORD` returns a value that contains the starting position in the low-order word and the position of the first nonselected character after the end of the selection in the high-order word.  \n  \n### Remarks  \n For more information, see [EM_GETSEL](http://msdn.microsoft.com/library/windows/desktop/bb761598) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CEdit#15](../../mfc/reference/codesnippet/cpp/cedit-class_15.cpp)]  \n  \n##  <a name=\"cedit__hideballoontip\"></a>  CEdit::HideBalloonTip  \n Hides any balloon tip associated with the current edit control.  \n  \n```  \nBOOL HideBalloonTip();\n```  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n This function sends the [EM_HIDEBALLOONTIP](http://msdn.microsoft.com/library/windows/desktop/bb761604) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cedit__limittext\"></a>  CEdit::LimitText  \n Call this function to limit the length of the text that the user may enter into an edit control.  \n  \n```  \nvoid LimitText(int nChars = 0);\n```  \n  \n### Parameters  \n `nChars`  \n Specifies the length (in bytes) of the text that the user can enter. If this parameter is 0, the text length is set to **UINT_MAX** bytes. This is the default behavior.  \n  \n### Remarks  \n Changing the text limit restricts only the text the user can enter. It has no effect on any text already in the edit control, nor does it affect the length of the text copied to the edit control by the [SetWindowText](cwnd-class.md#cwnd__setwindowtext) member function in `CWnd`. If an application uses the `SetWindowText` function to place more text into an edit control than is specified in the call to `LimitText`, the user can delete any of the text within the edit control. However, the text limit will prevent the user from replacing the existing text with new text, unless deleting the current selection causes the text to fall below the text limit.  \n  \n> [!NOTE]\n>  In Win32 (Windows NT and Windows 95/98), [SetLimitText](#cedit__setlimittext) replaces this function.  \n  \n For more information, see [EM_LIMITTEXT](http://msdn.microsoft.com/library/windows/desktop/bb761607) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CEdit#17](../../mfc/reference/codesnippet/cpp/cedit-class_16.cpp)]  \n  \n##  <a name=\"cedit__linefromchar\"></a>  CEdit::LineFromChar  \n Call this function to retrieve the line number of the line that contains the specified character index.  \n  \n```  \nint LineFromChar(int nIndex = -1) const;\n\n \n```  \n  \n### Parameters  \n `nIndex`  \n Contains the zero-based index value for the desired character in the text of the edit control, or contains –1. If `nIndex` is –1, it specifies the current line, that is, the line that contains the caret.  \n  \n### Return Value  \n The zero-based line number of the line containing the character index specified by `nIndex`. If `nIndex` is –1, the number of the line that contains the first character of the selection is returned. If there is no selection, the current line number is returned.  \n  \n### Remarks  \n A character index is the number of characters from the beginning of the edit control.  \n  \n This member function is only used by multiple-line edit controls.  \n  \n For more information, see [EM_LINEFROMCHAR](http://msdn.microsoft.com/library/windows/desktop/bb761609) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CEdit#18](../../mfc/reference/codesnippet/cpp/cedit-class_17.cpp)]  \n  \n##  <a name=\"cedit__lineindex\"></a>  CEdit::LineIndex  \n Call this function to retrieve the character index of a line within a multiple-line edit control.  \n  \n```  \nint LineIndex(int nLine = -1) const;\n\n \n```  \n  \n### Parameters  \n `nLine`  \n Contains the index value for the desired line in the text of the edit control, or contains –1. If `nLine` is –1, it specifies the current line, that is, the line that contains the caret.  \n  \n### Return Value  \n The character index of the line specified in `nLine` or –1 if the specified line number is greater than the number of lines in the edit control.  \n  \n### Remarks  \n The character index is the number of characters from the beginning of the edit control to the specified line.  \n  \n This member function is only processed by multiple-line edit controls.  \n  \n For more information, see [EM_LINEINDEX](http://msdn.microsoft.com/library/windows/desktop/bb761611) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CEdit#19](../../mfc/reference/codesnippet/cpp/cedit-class_18.cpp)]  \n  \n##  <a name=\"cedit__linelength\"></a>  CEdit::LineLength  \n Retrieves the length of a line in an edit control.  \n  \n```  \nint LineLength(int nLine = -1) const;\n\n \n```  \n  \n### Parameters  \n `nLine`  \n The zero-based index of a character in the line whose length is to be retrieved. The default value is -1.  \n  \n### Return Value  \n For single-line edit controls, the return value is the length, in `TCHAR`s, of the text in the edit control.  \n  \n For multiline edit controls, the return value is the length, in `TCHAR`s, of the line specified by the `nLine` parameter. For [!INCLUDE[vcpransi](../../atl-mfc-shared/reference/includes/vcpransi_md.md)] text, the length is the number of bytes in the line; for Unicode text, the length is the number of characters in the line. The length does not include the carriage-return character at the end of the line.  \n  \n If the `nLine` parameter is more than the number of characters in the control, the return value is zero.  \n  \n If the `nLine` parameter is –1, the return value is the number of unselected characters in the lines that contain selected characters. For example, if the selection extends from the fourth character of one line through the eighth character from the end of the next line, the return value is 10. That is, three characters on the first line and seven on the next.  \n  \n For more information about the `TCHAR` type, see the `TCHAR` row in the table in [Windows Data Types](http://msdn.microsoft.com/library/windows/desktop/aa383751).  \n  \n### Remarks  \n This method is supported by the [EM_LINELENGTH](http://msdn.microsoft.com/library/windows/desktop/bb761613) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CEdit::LineIndex](#cedit__lineindex).  \n  \n##  <a name=\"cedit__linescroll\"></a>  CEdit::LineScroll  \n Call this function to scroll the text of a multiple-line edit control.  \n  \n```  \nvoid LineScroll(\n    int nLines,  \n    int nChars = 0);\n```  \n  \n### Parameters  \n `nLines`  \n Specifies the number of lines to scroll vertically.  \n  \n `nChars`  \n Specifies the number of character positions to scroll horizontally. This value is ignored if the edit control has either the **ES_RIGHT** or **ES_CENTER** style.  \n  \n### Remarks  \n This member function is processed only by multiple-line edit controls.  \n  \n The edit control does not scroll vertically past the last line of text in the edit control. If the current line plus the number of lines specified by `nLines` exceeds the total number of lines in the edit control, the value is adjusted so that the last line of the edit control is scrolled to the top of the edit-control window.  \n  \n `LineScroll` can be used to scroll horizontally past the last character of any line.  \n  \n For more information, see [EM_LINESCROLL](http://msdn.microsoft.com/library/windows/desktop/bb761615) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CEdit::GetFirstVisibleLine](#cedit__getfirstvisibleline).  \n  \n##  <a name=\"cedit__paste\"></a>  CEdit::Paste  \n Call this function to insert the data from the Clipboard into the `CEdit` at the insertion point.  \n  \n```  \nvoid Paste();\n```  \n  \n### Remarks  \n Data is inserted only if the Clipboard contains data in **CF_TEXT** format.  \n  \n For more information, see [WM_PASTE](http://msdn.microsoft.com/library/windows/desktop/ms649028) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CEdit#20](../../mfc/reference/codesnippet/cpp/cedit-class_19.cpp)]  \n  \n##  <a name=\"cedit__posfromchar\"></a>  CEdit::PosFromChar  \n Call this function to get the position (top-left corner) of a given character within this `CEdit` object.  \n  \n```  \nCPoint PosFromChar(UINT nChar) const;\n\n \n```  \n  \n### Parameters  \n `nChar`  \n The zero-based index of the specified character.  \n  \n### Return Value  \n The coordinates of the top-left corner of the character specified by `nChar`.  \n  \n### Remarks  \n The character is specified by giving its zero-based index value. If `nChar` is greater than the index of the last character in this `CEdit` object, the return value specifies the coordinates of the character position just past the last character in this `CEdit` object.  \n  \n> [!NOTE]\n>  This member function is available beginning with Windows 95 and Windows NT 4.0.  \n  \n For more information, see [EM_POSFROMCHAR](http://msdn.microsoft.com/library/windows/desktop/bb761631) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CEdit::LineFromChar](#cedit__linefromchar).  \n  \n##  <a name=\"cedit__replacesel\"></a>  CEdit::ReplaceSel  \n Call this function to replace the current selection in an edit control with the text specified by `lpszNewText`.  \n  \n```  \nvoid ReplaceSel(\n    LPCTSTR lpszNewText, BOOL bCanUndo = FALSE);\n```  \n  \n### Parameters  \n `lpszNewText`  \n Points to a null-terminated string containing the replacement text.  \n  \n `bCanUndo`  \n To specify that this function can be undone, set the value of this parameter to **TRUE** . The default value is **FALSE**.  \n  \n### Remarks  \n Replaces only a portion of the text in an edit control. If you want to replace all of the text, use the [CWnd::SetWindowText](cwnd-class.md#cwnd__setwindowtext) member function.  \n  \n If there is no current selection, the replacement text is inserted at the current cursor location.  \n  \n For more information, see [EM_REPLACESEL](http://msdn.microsoft.com/library/windows/desktop/bb761633) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CEdit::LineIndex](#cedit__lineindex).  \n  \n##  <a name=\"cedit__setcuebanner\"></a>  CEdit::SetCueBanner  \n Sets the text that is displayed as the text cue, or tip, in an edit control when the control is empty.  \n  \n```  \nBOOL SetCueBanner(\n    LPCWSTR lpszText);\n\n \nBOOL SetCueBanner(\n    LPCWSTR lpszText,   \n    BOOL fDrawWhenFocused = FALSE);\n```  \n  \n### Parameters  \n [in] `lpszText`  \n Pointer to a string that contains the cue to display in the edit control.  \n  \n [in] `fDrawWhenFocused`  \n If `false`, the cue banner is not drawn when the user clicks in the edit control and gives the control the focus.  \n  \n If `true`, the cue banner is drawn even when the control has focus. The cue banner disappears when the user starts to type in the control.  \n  \n The default value is `false`.  \n  \n### Return Value  \n `true` if the method is successful; otherwise `false`.  \n  \n### Remarks  \n This method sends the [EM_SETCUEBANNER](http://msdn.microsoft.com/library/windows/desktop/bb761639) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. For more information, see the [Edit_SetCueBannerTextFocused](http://msdn.microsoft.com/library/windows/desktop/bb761703) macro.  \n  \n### Example  \n The following example demonstrates the [CEdit::SetCueBanner](#cedit__setcuebanner) method.  \n  \n [!code-cpp[NVC_MFC_CEdit_s1#2](../../mfc/reference/codesnippet/cpp/cedit-class_20.cpp)]  \n  \n##  <a name=\"cedit__sethandle\"></a>  CEdit::SetHandle  \n Call this function to set the handle to the local memory that will be used by a multiple-line edit control.  \n  \n```  \nvoid SetHandle(HLOCAL hBuffer);\n```  \n  \n### Parameters  \n *hBuffer*  \n Contains a handle to the local memory. This handle must have been created by a previous call to the [LocalAlloc](http://msdn.microsoft.com/library/windows/desktop/aa366723) Windows function using the **LMEM_MOVEABLE** flag. The memory is assumed to contain a null-terminated string. If this is not the case, the first byte of the allocated memory should be set to 0.  \n  \n### Remarks  \n The edit control will then use this buffer to store the currently displayed text instead of allocating its own buffer.  \n  \n This member function is processed only by multiple-line edit controls.  \n  \n Before an application sets a new memory handle, it should use the [GetHandle](#cedit__gethandle) member function to get the handle to the current memory buffer and free that memory using the **LocalFree** Windows function.  \n  \n `SetHandle` clears the undo buffer (the [CanUndo](#cedit__canundo) member function then returns 0) and the internal modification flag (the [GetModify](#cedit__getmodify) member function then returns 0). The edit-control window is redrawn.  \n  \n You can use this member function in a multiple-line edit control in a dialog box only if you have created the dialog box with the **DS_LOCALEDIT** style flag set.  \n  \n> [!NOTE]\n> **GetHandle** will not work with Windows 95/98. If you call **GetHandle** in Windows 95/98, it will return **NULL**. **GetHandle** will work as documented under Windows NT, versions 3.51 and later.  \n  \n For more information, see [EM_SETHANDLE](http://msdn.microsoft.com/library/windows/desktop/bb761641), [LocalAlloc](http://msdn.microsoft.com/library/windows/desktop/aa366723), and [LocalFree](http://msdn.microsoft.com/library/windows/desktop/aa366730) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CEdit#22](../../mfc/reference/codesnippet/cpp/cedit-class_21.cpp)]  \n  \n##  <a name=\"cedit__sethighlight\"></a>  CEdit::SetHighlight  \n Highlights a range of text that is displayed in the current edit control.  \n  \n```  \nvoid SetHighlight(\n    int ichStart,   \n    int ichEnd);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `ichStart`|Zero-based index of the first character in the range of text to highlight.|  \n|[in] `ichEnd`|Zero-based index of the last character in the range of text to highlight.|  \n  \n### Remarks  \n This method sends the [EM_SETHILITE](http://msdn.microsoft.com/library/windows/desktop/bb761643) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cedit__setlimittext\"></a>  CEdit::SetLimitText  \n Call this member function to set the text limit for this `CEdit` object.  \n  \n```  \nvoid SetLimitText(UINT nMax);\n```  \n  \n### Parameters  \n `nMax`  \n The new text limit, in characters.  \n  \n### Remarks  \n The text limit is the maximum amount of text, in characters, that the edit control can accept.  \n  \n Changing the text limit restricts only the text the user can enter. It has no effect on any text already in the edit control, nor does it affect the length of the text copied to the edit control by the [SetWindowText](cwnd-class.md#cwnd__setwindowtext) member function in `CWnd`. If an application uses the `SetWindowText` function to place more text into an edit control than is specified in the call to `LimitText`, the user can delete any of the text within the edit control. However, the text limit will prevent the user from replacing the existing text with new text, unless deleting the current selection causes the text to fall below the text limit.  \n  \n This function replaces [LimitText](#cedit__limittext) in Win32.  \n  \n For more information, see [EM_SETLIMITTEXT](http://msdn.microsoft.com/library/windows/desktop/bb761647) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CEditView::GetEditCtrl](ceditview-class.md#ceditview__geteditctrl).  \n  \n##  <a name=\"cedit__setmargins\"></a>  CEdit::SetMargins  \n Call this method to set the left and right margins of this edit control.  \n  \n```  \nvoid SetMargins(\n    UINT nLeft,  \n    UINT nRight);\n```  \n  \n### Parameters  \n *nLeft*  \n The width of the new left margin, in pixels.  \n  \n *nRight*  \n The width of the new right margin, in pixels.  \n  \n### Remarks  \n  \n> [!NOTE]\n>  This member function is available beginning with Windows 95 and Windows NT 4.0.  \n  \n For more information, see [EM_SETMARGINS](http://msdn.microsoft.com/library/windows/desktop/bb761649) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CEditView::GetEditCtrl](ceditview-class.md#ceditview__geteditctrl).  \n  \n##  <a name=\"cedit__setmodify\"></a>  CEdit::SetModify  \n Call this function to set or clear the modified flag for an edit control.  \n  \n```  \nvoid SetModify(BOOL bModified = TRUE);\n```  \n  \n### Parameters  \n `bModified`  \n A value of **TRUE** indicates that the text has been modified, and a value of **FALSE** indicates it is unmodified. By default, the modified flag is set.  \n  \n### Remarks  \n The modified flag indicates whether or not the text within the edit control has been modified. It is automatically set whenever the user changes the text. Its value may be retrieved with the [GetModify](#cedit__getmodify) member function.  \n  \n For more information, see [EM_SETMODIFY](http://msdn.microsoft.com/library/windows/desktop/bb761651) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CEdit::GetModify](#cedit__getmodify).  \n  \n##  <a name=\"cedit__setpasswordchar\"></a>  CEdit::SetPasswordChar  \n Call this function to set or remove a password character displayed in an edit control when the user types text.  \n  \n```  \nvoid SetPasswordChar(TCHAR ch);\n```  \n  \n### Parameters  \n *ch*  \n Specifies the character to be displayed in place of the character typed by the user. If *ch* is 0, the actual characters typed by the user are displayed.  \n  \n### Remarks  \n When a password character is set, that character is displayed for each character the user types.  \n  \n This member function has no effect on a multiple-line edit control.  \n  \n When the `SetPasswordChar` member function is called, `CEdit` will redraw all visible characters using the character specified by *ch*.  \n  \n If the edit control is created with the [ES_PASSWORD](edit-styles.md) style, the default password character is set to an asterisk ( **\\***). This style is removed if `SetPasswordChar` is called with *ch* set to 0.  \n  \n For more information, see [EM_SETPASSWORDCHAR](http://msdn.microsoft.com/library/windows/desktop/bb761653) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CEdit#16](../../mfc/reference/codesnippet/cpp/cedit-class_22.cpp)]  \n  \n##  <a name=\"cedit__setreadonly\"></a>  CEdit::SetReadOnly  \n Calls this function to set the read-only state of an edit control.  \n  \n```  \nBOOL SetReadOnly(BOOL bReadOnly = TRUE);\n```  \n  \n### Parameters  \n `bReadOnly`  \n Specifies whether to set or remove the read-only state of the edit control. A value of **TRUE** sets the state to read-only; a value of **FALSE** sets the state to read/write.  \n  \n### Return Value  \n Nonzero if the operation is successful, or 0 if an error occurs.  \n  \n### Remarks  \n The current setting can be found by testing the [ES_READONLY](edit-styles.md) flag in the return value of [CWnd::GetStyle](cwnd-class.md#cwnd__getstyle).  \n  \n For more information, see [EM_SETREADONLY](http://msdn.microsoft.com/library/windows/desktop/bb761655) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CEdit#23](../../mfc/reference/codesnippet/cpp/cedit-class_23.cpp)]  \n  \n##  <a name=\"cedit__setrect\"></a>  CEdit::SetRect  \n Call this function to set the dimensions of a rectangle using the specified coordinates.  \n  \n```  \nvoid SetRect(LPCRECT lpRect);\n```  \n  \n### Parameters  \n `lpRect`  \n Points to the `RECT` structure or `CRect` object that specifies the new dimensions of the formatting rectangle.  \n  \n### Remarks  \n This member is processed only by multiple-line edit controls.  \n  \n Use `SetRect` to set the formatting rectangle of a multiple-line edit control. The formatting rectangle is the limiting rectangle of the text, which is independent of the size of the edit-control window. When the edit control is first created, the formatting rectangle is the same as the client area of the edit-control window. By using the `SetRect` member function, an application can make the formatting rectangle larger or smaller than the edit-control window.  \n  \n If the edit control has no scroll bar, text will be clipped, not wrapped, if the formatting rectangle is made larger than the window. If the edit control contains a border, the formatting rectangle is reduced by the size of the border. If you adjust the rectangle returned by the `GetRect` member function, you must remove the size of the border before you pass the rectangle to `SetRect`.  \n  \n When `SetRect` is called, the edit control's text is also reformatted and redisplayed.  \n  \n For more information, see [EM_SETRECT](http://msdn.microsoft.com/library/windows/desktop/bb761657) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CEdit#24](../../mfc/reference/codesnippet/cpp/cedit-class_24.cpp)]  \n  \n##  <a name=\"cedit__setrectnp\"></a>  CEdit::SetRectNP  \n Call this function to set the formatting rectangle of a multiple-line edit control.  \n  \n```  \nvoid SetRectNP(LPCRECT lpRect);\n```  \n  \n### Parameters  \n `lpRect`  \n Points to a `RECT` structure or `CRect` object that specifies the new dimensions of the rectangle.  \n  \n### Remarks  \n The formatting rectangle is the limiting rectangle of the text, which is independent of the size of the edit-control window.  \n  \n `SetRectNP` is identical to the `SetRect` member function except that the edit-control window is not redrawn.  \n  \n When the edit control is first created, the formatting rectangle is the same as the client area of the edit-control window. By calling the `SetRectNP` member function, an application can make the formatting rectangle larger or smaller than the edit-control window.  \n  \n If the edit control has no scroll bar, text will be clipped, not wrapped, if the formatting rectangle is made larger than the window.  \n  \n This member is processed only by multiple-line edit controls.  \n  \n For more information, see [EM_SETRECTNP](http://msdn.microsoft.com/library/windows/desktop/bb761659) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CEdit::SetRect](#cedit__setrect).  \n  \n##  <a name=\"cedit__setsel\"></a>  CEdit::SetSel  \n Call this function to select a range of characters in an edit control.  \n  \n```  \nvoid SetSel(\n    DWORD dwSelection,  \n    BOOL bNoScroll = FALSE);\n\n \nvoid SetSel(\n    int nStartChar,  \n    int nEndChar,  \n    BOOL bNoScroll = FALSE);\n```  \n  \n### Parameters  \n *dwSelection*  \n Specifies the starting position in the low-order word and the ending position in the high-order word. If the low-order word is 0 and the high-order word is –1, all the text in the edit control is selected. If the low-order word is –1, any current selection is removed.  \n  \n *bNoScroll*  \n Indicates whether the caret should be scrolled into view. If **FALSE**, the caret is scrolled into view. If **TRUE**, the caret is not scrolled into view.  \n  \n `nStartChar`  \n Specifies the starting position. If `nStartChar` is 0 and `nEndChar` is –1, all the text in the edit control is selected. If `nStartChar` is –1, any current selection is removed.  \n  \n `nEndChar`  \n Specifies the ending position.  \n  \n### Remarks  \n For more information, see [EM_SETSEL](http://msdn.microsoft.com/library/windows/desktop/bb761661) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CEdit::GetSel](#cedit__getsel).  \n  \n##  <a name=\"cedit__settabstops\"></a>  CEdit::SetTabStops  \n Call this function to set the tab stops in a multiple-line edit control.  \n  \n```  \nvoid SetTabStops();\n\n \nBOOL SetTabStops(\n    const int& cxEachStop);\n\n \nBOOL SetTabStops(\n    int nTabStops,  \n    LPINT rgTabStops);\n```  \n  \n### Parameters  \n `cxEachStop`  \n Specifies that tab stops are to be set at every `cxEachStop` dialog units.  \n  \n `nTabStops`  \n Specifies the number of tab stops contained in `rgTabStops`. This number must be greater than 1.  \n  \n `rgTabStops`  \n Points to an array of unsigned integers specifying the tab stops in dialog units. A dialog unit is a horizontal or vertical distance. One horizontal dialog unit is equal to one-fourth of the current dialog base width unit, and 1 vertical dialog unit is equal to one-eighth of the current dialog base height unit. The dialog base units are computed based on the height and width of the current system font. The **GetDialogBaseUnits** Windows function returns the current dialog base units in pixels.  \n  \n### Return Value  \n Nonzero if the tabs were set; otherwise 0.  \n  \n### Remarks  \n When text is copied to a multiple-line edit control, any tab character in the text will cause space to be generated up to the next tab stop.  \n  \n To set tab stops to the default size of 32 dialog units, call the parameterless version of this member function. To set tab stops to a size other than 32, call the version with the `cxEachStop` parameter. To set tab stops to an array of sizes, use the version with two parameters.  \n  \n This member function is only processed by multiple-line edit controls.  \n  \n `SetTabStops` does not automatically redraw the edit window. If you change the tab stops for text already in the edit control, call [CWnd::InvalidateRect](cwnd-class.md#cwnd__invalidaterect) to redraw the edit window.  \n  \n For more information, see [EM_SETTABSTOPS](http://msdn.microsoft.com/library/windows/desktop/bb761663) and [GetDialogBaseUnits](http://msdn.microsoft.com/library/windows/desktop/ms645475) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CEditView::SetTabStops](ceditview-class.md#ceditview__settabstops).  \n  \n##  <a name=\"cedit__showballoontip\"></a>  CEdit::ShowBalloonTip  \n Displays a balloon tip that is associated with the current edit control.  \n  \n```  \nBOOL ShowBalloonTip(\n    PEDITBALLOONTIP pEditBalloonTip);\n\n \nBOOL ShowBalloonTip(\n    LPCWSTR lpszTitle,   \n    LPCWSTR lpszText,   \n    INT ttiIcon = TTI_NONE);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `pEditBalloonTip`|Pointer to an [EDITBALLOONTIP](http://msdn.microsoft.com/library/windows/desktop/bb775466) structure that describes the balloon tip.|  \n|[in] `lpszTitle`|Pointer to a Unicode string that contains the title of the balloon tip.|  \n|[in] `lpszText`|Pointer to a Unicode string that contains the balloon tip text.|  \n|[in] `ttiIcon`|An `INT` that specifies the type of icon to associate with the balloon tip. The default value is `TTI_NONE`. For more information, see the `ttiIcon` member of the [EDITBALLOONTIP](http://msdn.microsoft.com/library/windows/desktop/bb775466) structure.|  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n This function sends the [EM_SHOWBALLOONTIP](http://msdn.microsoft.com/library/windows/desktop/bb761668) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. For more information, see the [Edit_ShowBalloonTip](http://msdn.microsoft.com/library/windows/desktop/bb761707) macro.  \n  \n### Example  \n The following code example defines a variable, `m_cedit`, that is used to access the current edit control. This variable is used in the next example.  \n  \n [!code-cpp[NVC_MFC_CEdit_s1#1](../../mfc/reference/codesnippet/cpp/cedit-class_25.h)]  \n  \n### Example  \n The following code example displays a balloon tip for an edit control. The [CEdit::ShowBalloonTip](#cedit__showballoontip) method specifies a title and balloon tip text.  \n  \n [!code-cpp[NVC_MFC_CEdit_s1#3](../../mfc/reference/codesnippet/cpp/cedit-class_26.cpp)]  \n  \n##  <a name=\"cedit__undo\"></a>  CEdit::Undo  \n Call this function to undo the last edit-control operation.  \n  \n```  \nBOOL Undo();\n```  \n  \n### Return Value  \n For a single-line edit control, the return value is always nonzero. For a multiple-line edit control, the return value is nonzero if the undo operation is successful, or 0 if the undo operation fails.  \n  \n### Remarks  \n An undo operation can also be undone. For example, you can restore deleted text with the first call to **Undo**. As long as there is no intervening edit operation, you can remove the text again with a second call to **Undo**.  \n  \n For more information, see [EM_UNDO](http://msdn.microsoft.com/library/windows/desktop/bb761670) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CEdit#25](../../mfc/reference/codesnippet/cpp/cedit-class_27.cpp)]  \n  \n## See Also  \n [MFC Sample CALCDRIV](../../visual-cpp-samples.md)   \n [MFC Sample CMNCTRL2](../../visual-cpp-samples.md)   \n [CWnd Class](../../mfc/reference/cwnd-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CWnd Class](cwnd-class.md)   \n [CButton Class](cbutton-class.md)   \n [CComboBox Class](ccombobox-class.md)   \n [CListBox Class](clistbox-class.md)   \n [CScrollBar Class](cscrollbar-class.md)   \n [CStatic Class](cstatic-class.md)   \n [CDialog Class](cdialog-class.md)\n"}