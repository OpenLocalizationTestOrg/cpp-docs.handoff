{"nodes":[{"pos":[12,39],"content":"C Comments | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"C Comments | Microsoft Docs","pos":[0,27]}]},{"content":"C Comments","pos":[679,689]},{"content":"A \"comment\" is a sequence of characters beginning with a forward slash/asterisk combination (<bpt id=\"p1\">**</bpt><ph id=\"ph1\">/\\*</ph><ept id=\"p1\">**</ept>) that is treated as a single white-space character by the compiler and is otherwise ignored.","pos":[690,883],"source":"A \"comment\" is a sequence of characters beginning with a forward slash/asterisk combination (**/\\***) that is treated as a single white-space character by the compiler and is otherwise ignored."},{"content":"A comment can include any combination of characters from the representable character set, including newline characters, but excluding the \"end comment\" delimiter (<bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*/</ph><ept id=\"p1\">**</ept>).","pos":[884,1056],"source":" A comment can include any combination of characters from the representable character set, including newline characters, but excluding the \"end comment\" delimiter (**\\*/**)."},{"content":"Comments can occupy more than one line but cannot be nested.","pos":[1057,1117]},{"content":"Comments can appear anywhere a white-space character is allowed.","pos":[1124,1188]},{"content":"Since the compiler treats a comment as a single white-space character, you cannot include comments within tokens.","pos":[1189,1302]},{"content":"The compiler ignores the characters in the comment.","pos":[1303,1354]},{"content":"Use comments to document your code.","pos":[1361,1396]},{"content":"This example is a comment accepted by the compiler:","pos":[1397,1448]},{"content":"Comments can appear on the same line as a code statement:","pos":[1562,1619]},{"content":"You can choose to precede functions or program modules with a descriptive comment block:","pos":[1692,1780]},{"content":"Since comments cannot contain nested comments, this example causes an error:","pos":[1888,1964]},{"content":"The error occurs because the compiler recognizes the first <ph id=\"ph1\">`*/`</ph>, after the words <ph id=\"ph2\">`Open file`</ph>, as the end of the comment.","pos":[2126,2246],"source":"The error occurs because the compiler recognizes the first `*/`, after the words `Open file`, as the end of the comment."},{"content":"It tries to process the remaining text and produces an error when it finds the <ph id=\"ph1\">`*/`</ph> outside a comment.","pos":[2247,2349],"source":" It tries to process the remaining text and produces an error when it finds the `*/` outside a comment."},{"content":"While you can use comments to render certain lines of code inactive for test purposes, the preprocessor directives <ph id=\"ph1\">`#if`</ph> and <ph id=\"ph2\">`#endif`</ph> and conditional compilation are a useful alternative for this task.","pos":[2356,2557],"source":"While you can use comments to render certain lines of code inactive for test purposes, the preprocessor directives `#if` and `#endif` and conditional compilation are a useful alternative for this task."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Preprocessor Directives<ept id=\"p1\">](../preprocessor/preprocessor-directives.md)</ept> in the <bpt id=\"p2\">*</bpt>Preprocessor Reference<ept id=\"p2\">*</ept>.","pos":[2558,2686],"source":" For more information, see [Preprocessor Directives](../preprocessor/preprocessor-directives.md) in the *Preprocessor Reference*."},{"content":"Microsoft Specific","pos":[2695,2713]},{"content":"The Microsoft compiler also supports single-line comments preceded by two forward slashes (<bpt id=\"p1\">**</bpt><ph id=\"ph1\">//</ph><ept id=\"p1\">**</ept>).","pos":[2722,2821],"source":"The Microsoft compiler also supports single-line comments preceded by two forward slashes (**//**)."},{"content":"If you compile with /Za (ANSI standard), these comments generate errors.","pos":[2822,2894]},{"content":"These comments cannot extend to a second line.","pos":[2895,2941]},{"content":"Comments beginning with two forward slashes (<bpt id=\"p1\">**</bpt><ph id=\"ph1\">//</ph><ept id=\"p1\">**</ept>) are terminated by the next newline character that is not preceded by an escape character.","pos":[2992,3134],"source":"Comments beginning with two forward slashes (**//**) are terminated by the next newline character that is not preceded by an escape character."},{"content":"In the next example, the newline character is preceded by a backslash (<bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\\\</ph><ept id=\"p1\">**</ept>), creating an \"escape sequence.\"","pos":[3135,3245],"source":" In the next example, the newline character is preceded by a backslash (**\\\\**), creating an \"escape sequence.\""},{"content":"This escape sequence causes the compiler to treat the next line as part of the previous line.","pos":[3246,3339]},{"content":"(For more information, see <bpt id=\"p1\">[</bpt>Escape Sequences<ept id=\"p1\">](../c-language/escape-sequences.md)</ept>.)","pos":[3340,3422],"source":" (For more information, see [Escape Sequences](../c-language/escape-sequences.md).)"},{"pos":[3474,3523],"content":"Therefore, the <ph id=\"ph1\">`i++;`</ph> statement is commented out.","source":"Therefore, the `i++;` statement is commented out."},{"content":"The default for Microsoft C is that the Microsoft extensions are enabled.","pos":[3530,3603]},{"content":"Use /Za to disable these extensions.","pos":[3604,3640]},{"content":"END Microsoft Specific","pos":[3649,3671]},{"content":"See Also","pos":[3682,3690]},{"content":"C Tokens","pos":[3695,3703]}],"content":"---\ntitle: \"C Comments | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"code comments, C code\"\n  - \"comments, documenting code\"\n  - \"comments, C code\"\n  - \"/* */ comment delimiters\"\n  - \"comments\"\nms.assetid: 0f5f2825-e673-49e7-8669-94e2f5294989\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# C Comments\nA \"comment\" is a sequence of characters beginning with a forward slash/asterisk combination (**/\\***) that is treated as a single white-space character by the compiler and is otherwise ignored. A comment can include any combination of characters from the representable character set, including newline characters, but excluding the \"end comment\" delimiter (**\\*/**). Comments can occupy more than one line but cannot be nested.  \n  \n Comments can appear anywhere a white-space character is allowed. Since the compiler treats a comment as a single white-space character, you cannot include comments within tokens. The compiler ignores the characters in the comment.  \n  \n Use comments to document your code. This example is a comment accepted by the compiler:  \n  \n```  \n/* Comments can contain keywords such as  \n   for and while without generating errors. */  \n```  \n  \n Comments can appear on the same line as a code statement:  \n  \n```  \nprintf( \"Hello\\n\" );  /* Comments can go here */  \n```  \n  \n You can choose to precede functions or program modules with a descriptive comment block:  \n  \n```  \n/* MATHERR.C illustrates writing an error routine   \n * for math functions.   \n */   \n```  \n  \n Since comments cannot contain nested comments, this example causes an error:  \n  \n```  \n/* Comment out this routine for testing   \n  \n   /* Open file */  \n    fh = _open( \"myfile.c\", _O_RDONLY );  \n    .  \n    .  \n    .  \n */  \n```  \n  \n The error occurs because the compiler recognizes the first `*/`, after the words `Open file`, as the end of the comment. It tries to process the remaining text and produces an error when it finds the `*/` outside a comment.  \n  \n While you can use comments to render certain lines of code inactive for test purposes, the preprocessor directives `#if` and `#endif` and conditional compilation are a useful alternative for this task. For more information, see [Preprocessor Directives](../preprocessor/preprocessor-directives.md) in the *Preprocessor Reference*.  \n  \n **Microsoft Specific**  \n  \n The Microsoft compiler also supports single-line comments preceded by two forward slashes (**//**). If you compile with /Za (ANSI standard), these comments generate errors. These comments cannot extend to a second line.  \n  \n```  \n// This is a valid comment  \n```  \n  \n Comments beginning with two forward slashes (**//**) are terminated by the next newline character that is not preceded by an escape character. In the next example, the newline character is preceded by a backslash (**\\\\**), creating an \"escape sequence.\" This escape sequence causes the compiler to treat the next line as part of the previous line. (For more information, see [Escape Sequences](../c-language/escape-sequences.md).)  \n  \n```  \n// my comment \\  \n    i++;   \n```  \n  \n Therefore, the `i++;` statement is commented out.  \n  \n The default for Microsoft C is that the Microsoft extensions are enabled. Use /Za to disable these extensions.  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [C Tokens](../c-language/c-tokens.md)"}