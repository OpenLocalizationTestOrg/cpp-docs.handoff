{"nodes":[{"pos":[12,43],"content":"CListBox Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CListBox Class | Microsoft Docs","pos":[0,31]}]},{"pos":[615,629],"content":"CListBox Class","linkify":"CListBox Class","nodes":[{"content":"CListBox Class","pos":[0,14]}]},{"content":"Provides the functionality of a Windows list box.","pos":[630,679]},{"pos":[688,694],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[749,756],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[766,785],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[792,796]},{"content":"Description","pos":[797,808]},{"pos":[846,887],"content":"<bpt id=\"p1\">[</bpt>CListBox::CListBox<ept id=\"p1\">](#clistbox__clistbox)</ept>","source":"[CListBox::CListBox](#clistbox__clistbox)"},{"pos":[888,919],"content":"Constructs a <ph id=\"ph1\">`CListBox`</ph> object.","source":"Constructs a `CListBox` object."},{"pos":[930,944],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[951,955]},{"content":"Description","pos":[956,967]},{"pos":[1005,1048],"content":"<bpt id=\"p1\">[</bpt>CListBox::AddString<ept id=\"p1\">](#clistbox__addstring)</ept>","source":"[CListBox::AddString](#clistbox__addstring)"},{"content":"Adds a string to a list box.","pos":[1049,1077]},{"pos":[1082,1127],"content":"<bpt id=\"p1\">[</bpt>CListBox::CharToItem<ept id=\"p1\">](#clistbox__chartoitem)</ept>","source":"[CListBox::CharToItem](#clistbox__chartoitem)"},{"pos":[1128,1225],"content":"Override to provide custom <ph id=\"ph1\">`WM_CHAR`</ph> handling for owner-draw list boxes which don't have strings.","source":"Override to provide custom `WM_CHAR` handling for owner-draw list boxes which don't have strings."},{"pos":[1230,1277],"content":"<bpt id=\"p1\">[</bpt>CListBox::CompareItem<ept id=\"p1\">](#clistbox__compareitem)</ept>","source":"[CListBox::CompareItem](#clistbox__compareitem)"},{"content":"Called by the framework to determine the position of a new item in a sorted owner-draw list box.","pos":[1278,1374]},{"pos":[1379,1416],"content":"<bpt id=\"p1\">[</bpt>CListBox::Create<ept id=\"p1\">](#clistbox__create)</ept>","source":"[CListBox::Create](#clistbox__create)"},{"pos":[1417,1487],"content":"Creates the Windows list box and attaches it to the <ph id=\"ph1\">`CListBox`</ph> object.","source":"Creates the Windows list box and attaches it to the `CListBox` object."},{"pos":[1492,1537],"content":"<bpt id=\"p1\">[</bpt>CListBox::DeleteItem<ept id=\"p1\">](#clistbox__deleteitem)</ept>","source":"[CListBox::DeleteItem](#clistbox__deleteitem)"},{"content":"Called by the framework when the user deletes an item from an owner-draw list box.","pos":[1538,1620]},{"pos":[1625,1674],"content":"<bpt id=\"p1\">[</bpt>CListBox::DeleteString<ept id=\"p1\">](#clistbox__deletestring)</ept>","source":"[CListBox::DeleteString](#clistbox__deletestring)"},{"content":"Deletes a string from a list box.","pos":[1675,1708]},{"pos":[1713,1744],"content":"<bpt id=\"p1\">[</bpt>CListBox::Dir<ept id=\"p1\">](#clistbox__dir)</ept>","source":"[CListBox::Dir](#clistbox__dir)"},{"content":"Adds filenames, drives, or both from the current directory to a list box.","pos":[1745,1818]},{"pos":[1823,1864],"content":"<bpt id=\"p1\">[</bpt>CListBox::DrawItem<ept id=\"p1\">](#clistbox__drawitem)</ept>","source":"[CListBox::DrawItem](#clistbox__drawitem)"},{"content":"Called by the framework when a visual aspect of an owner-draw list box changes.","pos":[1865,1944]},{"pos":[1949,1994],"content":"<bpt id=\"p1\">[</bpt>CListBox::FindString<ept id=\"p1\">](#clistbox__findstring)</ept>","source":"[CListBox::FindString](#clistbox__findstring)"},{"content":"Searches for a string in a list box.","pos":[1995,2031]},{"pos":[2036,2091],"content":"<bpt id=\"p1\">[</bpt>CListBox::FindStringExact<ept id=\"p1\">](#clistbox__findstringexact)</ept>","source":"[CListBox::FindStringExact](#clistbox__findstringexact)"},{"content":"Finds the first list-box string that matches a specified string.","pos":[2092,2156]},{"pos":[2161,2214],"content":"<bpt id=\"p1\">[</bpt>CListBox::GetAnchorIndex<ept id=\"p1\">](#clistbox__getanchorindex)</ept>","source":"[CListBox::GetAnchorIndex](#clistbox__getanchorindex)"},{"content":"Retrieves the zero-based index of the current anchor item in a list box.","pos":[2215,2287]},{"pos":[2292,2343],"content":"<bpt id=\"p1\">[</bpt>CListBox::GetCaretIndex<ept id=\"p1\">](#clistbox__getcaretindex)</ept>","source":"[CListBox::GetCaretIndex](#clistbox__getcaretindex)"},{"content":"Determines the index of the item that has the focus rectangle in a multiple-selection list box.","pos":[2344,2439]},{"pos":[2444,2485],"content":"<bpt id=\"p1\">[</bpt>CListBox::GetCount<ept id=\"p1\">](#clistbox__getcount)</ept>","source":"[CListBox::GetCount](#clistbox__getcount)"},{"content":"Returns the number of strings in a list box.","pos":[2486,2530]},{"pos":[2535,2578],"content":"<bpt id=\"p1\">[</bpt>CListBox::GetCurSel<ept id=\"p1\">](#clistbox__getcursel)</ept>","source":"[CListBox::GetCurSel](#clistbox__getcursel)"},{"content":"Returns the zero-based index of the currently selected string in a list box.","pos":[2579,2655]},{"pos":[2660,2723],"content":"<bpt id=\"p1\">[</bpt>CListBox::GetHorizontalExtent<ept id=\"p1\">](#clistbox__gethorizontalextent)</ept>","source":"[CListBox::GetHorizontalExtent](#clistbox__gethorizontalextent)"},{"content":"Returns the width in pixels that a list box can be scrolled horizontally.","pos":[2724,2797]},{"pos":[2802,2849],"content":"<bpt id=\"p1\">[</bpt>CListBox::GetItemData<ept id=\"p1\">](#clistbox__getitemdata)</ept>","source":"[CListBox::GetItemData](#clistbox__getitemdata)"},{"content":"Returns the 32-bit value associated with the list-box item.","pos":[2850,2909]},{"pos":[2914,2967],"content":"<bpt id=\"p1\">[</bpt>CListBox::GetItemDataPtr<ept id=\"p1\">](#clistbox__getitemdataptr)</ept>","source":"[CListBox::GetItemDataPtr](#clistbox__getitemdataptr)"},{"content":"Returns a pointer to a list-box item.","pos":[2968,3005]},{"pos":[3010,3061],"content":"<bpt id=\"p1\">[</bpt>CListBox::GetItemHeight<ept id=\"p1\">](#clistbox__getitemheight)</ept>","source":"[CListBox::GetItemHeight](#clistbox__getitemheight)"},{"content":"Determines the height of items in a list box.","pos":[3062,3107]},{"pos":[3112,3159],"content":"<bpt id=\"p1\">[</bpt>CListBox::GetItemRect<ept id=\"p1\">](#clistbox__getitemrect)</ept>","source":"[CListBox::GetItemRect](#clistbox__getitemrect)"},{"content":"Returns the bounding rectangle of the list-box item as it is currently displayed.","pos":[3160,3241]},{"pos":[3246,3299],"content":"<bpt id=\"p1\">[</bpt>CListBox::GetListBoxInfo<ept id=\"p1\">](#clistbox__getlistboxinfo)</ept>","source":"[CListBox::GetListBoxInfo](#clistbox__getlistboxinfo)"},{"content":"Retrieves the number of items per column.","pos":[3300,3341]},{"pos":[3346,3389],"content":"<bpt id=\"p1\">[</bpt>CListBox::GetLocale<ept id=\"p1\">](#clistbox__getlocale)</ept>","source":"[CListBox::GetLocale](#clistbox__getlocale)"},{"content":"Retrieves the locale identifier for a list box.","pos":[3390,3437]},{"pos":[3442,3479],"content":"<bpt id=\"p1\">[</bpt>CListBox::GetSel<ept id=\"p1\">](#clistbox__getsel)</ept>","source":"[CListBox::GetSel](#clistbox__getsel)"},{"content":"Returns the selection state of a list-box item.","pos":[3480,3527]},{"pos":[3532,3579],"content":"<bpt id=\"p1\">[</bpt>CListBox::GetSelCount<ept id=\"p1\">](#clistbox__getselcount)</ept>","source":"[CListBox::GetSelCount](#clistbox__getselcount)"},{"content":"Returns the number of strings currently selected in a multiple-selection list box.","pos":[3580,3662]},{"pos":[3667,3714],"content":"<bpt id=\"p1\">[</bpt>CListBox::GetSelItems<ept id=\"p1\">](#clistbox__getselitems)</ept>","source":"[CListBox::GetSelItems](#clistbox__getselitems)"},{"content":"Returns the indices of the strings currently selected in a list box.","pos":[3715,3783]},{"pos":[3788,3827],"content":"<bpt id=\"p1\">[</bpt>CListBox::GetText<ept id=\"p1\">](#clistbox__gettext)</ept>","source":"[CListBox::GetText](#clistbox__gettext)"},{"content":"Copies a list-box item into a buffer.","pos":[3828,3865]},{"pos":[3870,3915],"content":"<bpt id=\"p1\">[</bpt>CListBox::GetTextLen<ept id=\"p1\">](#clistbox__gettextlen)</ept>","source":"[CListBox::GetTextLen](#clistbox__gettextlen)"},{"content":"Returns the length in bytes of a list-box item.","pos":[3916,3963]},{"pos":[3968,4015],"content":"<bpt id=\"p1\">[</bpt>CListBox::GetTopIndex<ept id=\"p1\">](#clistbox__gettopindex)</ept>","source":"[CListBox::GetTopIndex](#clistbox__gettopindex)"},{"content":"Returns the index of the first visible string in a list box.","pos":[4016,4076]},{"pos":[4081,4128],"content":"<bpt id=\"p1\">[</bpt>CListBox::InitStorage<ept id=\"p1\">](#clistbox__initstorage)</ept>","source":"[CListBox::InitStorage](#clistbox__initstorage)"},{"content":"Preallocates blocks of memory for list box items and strings.","pos":[4129,4190]},{"pos":[4195,4244],"content":"<bpt id=\"p1\">[</bpt>CListBox::InsertString<ept id=\"p1\">](#clistbox__insertstring)</ept>","source":"[CListBox::InsertString](#clistbox__insertstring)"},{"content":"Inserts a string at a specific location in a list box.","pos":[4245,4299]},{"pos":[4304,4355],"content":"<bpt id=\"p1\">[</bpt>CListBox::ItemFromPoint<ept id=\"p1\">](#clistbox__itemfrompoint)</ept>","source":"[CListBox::ItemFromPoint](#clistbox__itemfrompoint)"},{"content":"Returns the index of the list-box item nearest a point.","pos":[4356,4411]},{"pos":[4416,4463],"content":"<bpt id=\"p1\">[</bpt>CListBox::MeasureItem<ept id=\"p1\">](#clistbox__measureitem)</ept>","source":"[CListBox::MeasureItem](#clistbox__measureitem)"},{"content":"Called by the framework when an owner-draw list box is created to determine list-box dimensions.","pos":[4464,4560]},{"pos":[4565,4614],"content":"<bpt id=\"p1\">[</bpt>CListBox::ResetContent<ept id=\"p1\">](#clistbox__resetcontent)</ept>","source":"[CListBox::ResetContent](#clistbox__resetcontent)"},{"content":"Clears all the entries from a list box.","pos":[4615,4654]},{"pos":[4659,4708],"content":"<bpt id=\"p1\">[</bpt>CListBox::SelectString<ept id=\"p1\">](#clistbox__selectstring)</ept>","source":"[CListBox::SelectString](#clistbox__selectstring)"},{"content":"Searches for and selects a string in a single-selection list box.","pos":[4709,4774]},{"pos":[4779,4828],"content":"<bpt id=\"p1\">[</bpt>CListBox::SelItemRange<ept id=\"p1\">](#clistbox__selitemrange)</ept>","source":"[CListBox::SelItemRange](#clistbox__selitemrange)"},{"content":"Selects or deselects a range of strings in a multiple-selection list box.","pos":[4829,4902]},{"pos":[4907,4960],"content":"<bpt id=\"p1\">[</bpt>CListBox::SetAnchorIndex<ept id=\"p1\">](#clistbox__setanchorindex)</ept>","source":"[CListBox::SetAnchorIndex](#clistbox__setanchorindex)"},{"content":"Sets the anchor in a multiple-selection list box to begin an extended selection.","pos":[4961,5041]},{"pos":[5046,5097],"content":"<bpt id=\"p1\">[</bpt>CListBox::SetCaretIndex<ept id=\"p1\">](#clistbox__setcaretindex)</ept>","source":"[CListBox::SetCaretIndex](#clistbox__setcaretindex)"},{"content":"Sets the focus rectangle to the item at the specified index in a multiple-selection list box.","pos":[5098,5191]},{"pos":[5196,5249],"content":"<bpt id=\"p1\">[</bpt>CListBox::SetColumnWidth<ept id=\"p1\">](#clistbox__setcolumnwidth)</ept>","source":"[CListBox::SetColumnWidth](#clistbox__setcolumnwidth)"},{"content":"Sets the column width of a multicolumn list box.","pos":[5250,5298]},{"pos":[5303,5346],"content":"<bpt id=\"p1\">[</bpt>CListBox::SetCurSel<ept id=\"p1\">](#clistbox__setcursel)</ept>","source":"[CListBox::SetCurSel](#clistbox__setcursel)"},{"content":"Selects a list-box string.","pos":[5347,5373]},{"pos":[5378,5441],"content":"<bpt id=\"p1\">[</bpt>CListBox::SetHorizontalExtent<ept id=\"p1\">](#clistbox__sethorizontalextent)</ept>","source":"[CListBox::SetHorizontalExtent](#clistbox__sethorizontalextent)"},{"content":"Sets the width in pixels that a list box can be scrolled horizontally.","pos":[5442,5512]},{"pos":[5517,5564],"content":"<bpt id=\"p1\">[</bpt>CListBox::SetItemData<ept id=\"p1\">](#clistbox__setitemdata)</ept>","source":"[CListBox::SetItemData](#clistbox__setitemdata)"},{"content":"Sets the 32-bit value associated with the list-box item.","pos":[5565,5621]},{"pos":[5626,5679],"content":"<bpt id=\"p1\">[</bpt>CListBox::SetItemDataPtr<ept id=\"p1\">](#clistbox__setitemdataptr)</ept>","source":"[CListBox::SetItemDataPtr](#clistbox__setitemdataptr)"},{"content":"Sets a pointer to the list-box item.","pos":[5680,5716]},{"pos":[5721,5772],"content":"<bpt id=\"p1\">[</bpt>CListBox::SetItemHeight<ept id=\"p1\">](#clistbox__setitemheight)</ept>","source":"[CListBox::SetItemHeight](#clistbox__setitemheight)"},{"content":"Sets the height of items in a list box.","pos":[5773,5812]},{"pos":[5817,5860],"content":"<bpt id=\"p1\">[</bpt>CListBox::SetLocale<ept id=\"p1\">](#clistbox__setlocale)</ept>","source":"[CListBox::SetLocale](#clistbox__setlocale)"},{"content":"Sets the locale identifier for a list box.","pos":[5861,5903]},{"pos":[5908,5945],"content":"<bpt id=\"p1\">[</bpt>CListBox::SetSel<ept id=\"p1\">](#clistbox__setsel)</ept>","source":"[CListBox::SetSel](#clistbox__setsel)"},{"content":"Selects or deselects a list-box item in a multiple-selection list box.","pos":[5946,6016]},{"pos":[6021,6068],"content":"<bpt id=\"p1\">[</bpt>CListBox::SetTabStops<ept id=\"p1\">](#clistbox__settabstops)</ept>","source":"[CListBox::SetTabStops](#clistbox__settabstops)"},{"content":"Sets the tab-stop positions in a list box.","pos":[6069,6111]},{"pos":[6116,6163],"content":"<bpt id=\"p1\">[</bpt>CListBox::SetTopIndex<ept id=\"p1\">](#clistbox__settopindex)</ept>","source":"[CListBox::SetTopIndex](#clistbox__settopindex)"},{"content":"Sets the zero-based index of the first visible string in a list box.","pos":[6164,6232]},{"pos":[6237,6282],"content":"<bpt id=\"p1\">[</bpt>CListBox::VKeyToItem<ept id=\"p1\">](#clistbox__vkeytoitem)</ept>","source":"[CListBox::VKeyToItem](#clistbox__vkeytoitem)"},{"pos":[6283,6392],"content":"Override to provide custom <ph id=\"ph1\">`WM_KEYDOWN`</ph> handling for list boxes with the <bpt id=\"p1\">**</bpt>LBS_WANTKEYBOARDINPUT<ept id=\"p1\">**</ept> style set.","source":"Override to provide custom `WM_KEYDOWN` handling for list boxes with the **LBS_WANTKEYBOARDINPUT** style set."},{"pos":[6402,6409],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A list box displays a list of items, such as filenames, that the user can view and select.","pos":[6413,6503]},{"content":"In a single-selection list box, the user can select only one item.","pos":[6510,6576]},{"content":"In a multiple-selection list box, a range of items can be selected.","pos":[6577,6644]},{"content":"When the user selects an item, it is highlighted and the list box sends a notification message to the parent window.","pos":[6645,6761]},{"content":"You can create a list box either from a dialog template or directly in your code.","pos":[6768,6849]},{"content":"To create it directly, construct the <ph id=\"ph1\">`CListBox`</ph> object, then call the <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](#clistbox__create)</ept> member function to create the Windows list-box control and attach it to the <ph id=\"ph2\">`CListBox`</ph> object.","pos":[6850,7042],"source":" To create it directly, construct the `CListBox` object, then call the [Create](#clistbox__create) member function to create the Windows list-box control and attach it to the `CListBox` object."},{"content":"To use a list box in a dialog template, declare a list-box variable in your dialog box class, then use <ph id=\"ph1\">`DDX_Control`</ph> in your dialog box class's <ph id=\"ph2\">`DoDataExchange`</ph> function to connect the member variable to the control.","pos":[7043,7259],"source":" To use a list box in a dialog template, declare a list-box variable in your dialog box class, then use `DDX_Control` in your dialog box class's `DoDataExchange` function to connect the member variable to the control."},{"content":"(this is done for you automatically when you add a control variable to your dialog box class.)","pos":[7260,7354]},{"content":"Construction can be a one-step process in a class derived from <ph id=\"ph1\">`CListBox`</ph>.","pos":[7361,7435],"source":"Construction can be a one-step process in a class derived from `CListBox`."},{"content":"Write a constructor for the derived class and call <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> from within the constructor.","pos":[7436,7526],"source":" Write a constructor for the derived class and call **Create** from within the constructor."},{"pos":[7533,7795],"content":"If you want to handle Windows notification messages sent by a list box to its parent (usually a class derived from <bpt id=\"p1\">[</bpt>CDialog<ept id=\"p1\">](../../mfc/reference/cdialog-class.md)</ept>), add a message-map entry and message-handler member function to the parent class for each message.","source":"If you want to handle Windows notification messages sent by a list box to its parent (usually a class derived from [CDialog](../../mfc/reference/cdialog-class.md)), add a message-map entry and message-handler member function to the parent class for each message."},{"content":"Each message-map entry takes the following form:","pos":[7802,7850]},{"pos":[7898,8090],"content":"where <ph id=\"ph1\">`id`</ph> specifies the child window ID of the list-box control sending the notification and <ph id=\"ph2\">`memberFxn`</ph> is the name of the parent member function you have written to handle the notification.","source":"where `id` specifies the child window ID of the list-box control sending the notification and `memberFxn` is the name of the parent member function you have written to handle the notification."},{"content":"The parent's function prototype is as follows:","pos":[8097,8143]},{"content":"Following is a list of potential message-map entries and a description of the cases in which they would be sent to the parent:","pos":[8185,8311]},{"content":"<bpt id=\"p1\">**</bpt>ON_LBN_DBLCLK<ept id=\"p1\">**</ept> The user double-clicks a string in a list box.","pos":[8319,8383],"source":"**ON_LBN_DBLCLK** The user double-clicks a string in a list box."},{"content":"Only a list box that has the <bpt id=\"p1\">[</bpt>LBS_NOTIFY<ept id=\"p1\">](../../mfc/reference/list-box-styles.md)</ept> style will send this notification message.","pos":[8384,8508],"source":" Only a list box that has the [LBS_NOTIFY](../../mfc/reference/list-box-styles.md) style will send this notification message."},{"pos":[8516,8599],"content":"<bpt id=\"p1\">**</bpt>ON_LBN_ERRSPACE<ept id=\"p1\">**</ept> The list box cannot allocate enough memory to meet the request.","source":"**ON_LBN_ERRSPACE** The list box cannot allocate enough memory to meet the request."},{"pos":[8607,8667],"content":"<bpt id=\"p1\">**</bpt>ON_LBN_KILLFOCUS<ept id=\"p1\">**</ept> The list box is losing the input focus.","source":"**ON_LBN_KILLFOCUS** The list box is losing the input focus."},{"content":"<bpt id=\"p1\">**</bpt>ON_LBN_SELCANCEL<ept id=\"p1\">**</ept> The current list-box selection is canceled.","pos":[8675,8739],"source":"**ON_LBN_SELCANCEL** The current list-box selection is canceled."},{"content":"This message is only sent when a list box has the <bpt id=\"p1\">**</bpt>LBS_NOTIFY<ept id=\"p1\">**</ept> style.","pos":[8740,8811],"source":" This message is only sent when a list box has the **LBS_NOTIFY** style."},{"content":"<bpt id=\"p1\">**</bpt>ON_LBN_SELCHANGE<ept id=\"p1\">**</ept> The selection in the list box has changed.","pos":[8819,8882],"source":"**ON_LBN_SELCHANGE** The selection in the list box has changed."},{"content":"This notification is not sent if the selection is changed by the <bpt id=\"p1\">[</bpt>CListBox::SetCurSel<ept id=\"p1\">](#clistbox__setcursel)</ept> member function.","pos":[8883,9008],"source":" This notification is not sent if the selection is changed by the [CListBox::SetCurSel](#clistbox__setcursel) member function."},{"content":"This notification applies only to a list box that has the <bpt id=\"p1\">**</bpt>LBS_NOTIFY<ept id=\"p1\">**</ept> style.","pos":[9009,9088],"source":" This notification applies only to a list box that has the **LBS_NOTIFY** style."},{"content":"The <bpt id=\"p1\">**</bpt>LBN_SELCHANGE<ept id=\"p1\">**</ept> notification message is sent for a multiple-selection list box whenever the user presses an arrow key, even if the selection does not change.","pos":[9089,9252],"source":" The **LBN_SELCHANGE** notification message is sent for a multiple-selection list box whenever the user presses an arrow key, even if the selection does not change."},{"pos":[9260,9322],"content":"<bpt id=\"p1\">**</bpt>ON_LBN_SETFOCUS<ept id=\"p1\">**</ept> The list box is receiving the input focus.","source":"**ON_LBN_SETFOCUS** The list box is receiving the input focus."},{"pos":[9330,9423],"content":"<bpt id=\"p1\">**</bpt>ON_WM_CHARTOITEM<ept id=\"p1\">**</ept> An owner-draw list box that has no strings receives a <ph id=\"ph1\">`WM_CHAR`</ph> message.","source":"**ON_WM_CHARTOITEM** An owner-draw list box that has no strings receives a `WM_CHAR` message."},{"pos":[9431,9536],"content":"<bpt id=\"p1\">**</bpt>ON_WM_VKEYTOITEM<ept id=\"p1\">**</ept> A list box with the <bpt id=\"p2\">**</bpt>LBS_WANTKEYBOARDINPUT<ept id=\"p2\">**</ept> style receives a <ph id=\"ph1\">`WM_KEYDOWN`</ph> message.","source":"**ON_WM_VKEYTOITEM** A list box with the **LBS_WANTKEYBOARDINPUT** style receives a `WM_KEYDOWN` message."},{"pos":[9543,9711],"content":"If you create a <ph id=\"ph1\">`CListBox`</ph> object within a dialog box (through a dialog resource), the <ph id=\"ph2\">`CListBox`</ph> object is automatically destroyed when the user closes the dialog box.","source":"If you create a `CListBox` object within a dialog box (through a dialog resource), the `CListBox` object is automatically destroyed when the user closes the dialog box."},{"content":"If you create a <ph id=\"ph1\">`CListBox`</ph> object within a window, you may need to destroy the <ph id=\"ph2\">`CListBox`</ph> object.","pos":[9718,9815],"source":"If you create a `CListBox` object within a window, you may need to destroy the `CListBox` object."},{"content":"If you create the <ph id=\"ph1\">`CListBox`</ph> object on the stack, it is destroyed automatically.","pos":[9816,9896],"source":" If you create the `CListBox` object on the stack, it is destroyed automatically."},{"content":"If you create the <ph id=\"ph1\">`CListBox`</ph> object on the heap by using the <bpt id=\"p1\">**</bpt>new<ept id=\"p1\">**</ept> function, you must call <bpt id=\"p2\">**</bpt>delete<ept id=\"p2\">**</ept> on the object to destroy it when the user closes the parent window.","pos":[9897,10068],"source":" If you create the `CListBox` object on the heap by using the **new** function, you must call **delete** on the object to destroy it when the user closes the parent window."},{"pos":[10075,10192],"content":"If you allocate any memory in the <ph id=\"ph1\">`CListBox`</ph> object, override the <ph id=\"ph2\">`CListBox`</ph> destructor to dispose of the allocation.","source":"If you allocate any memory in the `CListBox` object, override the `CListBox` destructor to dispose of the allocation."},{"pos":[10201,10222],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[10226,10273],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[10280,10333],"content":"<bpt id=\"p1\">[</bpt>CCmdTarget<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept>","source":"[CCmdTarget](../../mfc/reference/ccmdtarget-class.md)"},{"pos":[10340,10381],"content":"<bpt id=\"p1\">[</bpt>CWnd<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept>","source":"[CWnd](../../mfc/reference/cwnd-class.md)"},{"pos":[10407,10419],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[10423,10443],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxwin.h","source":"**Header:** afxwin.h"},{"pos":[10453,10508],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__addstring\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::AddString","linkify":"<a name=\"clistbox__addstring\"></a>  CListBox::AddString","source":"<a name=\"clistbox__addstring\"></a>  CListBox::AddString"},{"content":"Adds a string to a list box.","pos":[10512,10540]},{"pos":[10598,10608],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to the null-terminated string that is to be added.","pos":[10626,10683]},{"pos":[10693,10705],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The zero-based index to the string in the list box.","pos":[10709,10760]},{"content":"The return value is <bpt id=\"p1\">**</bpt>LB_ERR<ept id=\"p1\">**</ept> if an error occurs; the return value is <bpt id=\"p2\">**</bpt>LB_ERRSPACE<ept id=\"p2\">**</ept> if insufficient space is available to store the new string.","pos":[10761,10907],"source":" The return value is **LB_ERR** if an error occurs; the return value is **LB_ERRSPACE** if insufficient space is available to store the new string."},{"pos":[10917,10924],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the list box was not created with the <bpt id=\"p1\">[</bpt>LBS_SORT<ept id=\"p1\">](../../mfc/reference/list-box-styles.md)</ept> style, the string is added to the end of the list.","pos":[10928,11070],"source":"If the list box was not created with the [LBS_SORT](../../mfc/reference/list-box-styles.md) style, the string is added to the end of the list."},{"content":"Otherwise, the string is inserted into the list, and the list is sorted.","pos":[11071,11143]},{"content":"If the list box was created with the <bpt id=\"p1\">**</bpt>LBS_SORT<ept id=\"p1\">**</ept> style but not the <bpt id=\"p2\">[</bpt>LBS_HASSTRINGS<ept id=\"p2\">](../../mfc/reference/list-box-styles.md)</ept> style, the framework sorts the list by one or more calls to the <ph id=\"ph1\">`CompareItem`</ph> member function.","pos":[11144,11363],"source":" If the list box was created with the **LBS_SORT** style but not the [LBS_HASSTRINGS](../../mfc/reference/list-box-styles.md) style, the framework sorts the list by one or more calls to the `CompareItem` member function."},{"pos":[11370,11478],"content":"Use <bpt id=\"p1\">[</bpt>InsertString<ept id=\"p1\">](#clistbox__insertstring)</ept> to insert a string into a specific location within the list box.","source":"Use [InsertString](#clistbox__insertstring) to insert a string into a specific location within the list box."},{"pos":[11488,11495],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11499,11578],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#3<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#3](../../mfc/codesnippet/cpp/clistbox-class_1.cpp)]"},{"pos":[11588,11645],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__chartoitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::CharToItem","linkify":"<a name=\"clistbox__chartoitem\"></a>  CListBox::CharToItem","source":"<a name=\"clistbox__chartoitem\"></a>  CListBox::CharToItem"},{"pos":[11649,11760],"content":"Called by the framework when the list box's parent window receives a <ph id=\"ph1\">`WM_CHARTOITEM`</ph> message from the list box.","source":"Called by the framework when the list box's parent window receives a `WM_CHARTOITEM` message from the list box."},{"pos":[11844,11854],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The ANSI code of the character the user typed.","pos":[11868,11914]},{"content":"The current position of the list-box caret.","pos":[11933,11976]},{"pos":[11986,11998],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns – 1 or – 2 for no further action or a nonnegative number to specify an index of a list-box item on which to perform the default action for the keystroke.","pos":[12002,12163]},{"content":"The default implementation returns – 1.","pos":[12164,12203]},{"pos":[12213,12220],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12224,12367],"content":"The <ph id=\"ph1\">`WM_CHARTOITEM`</ph> message is sent by the list box when it receives a <ph id=\"ph2\">`WM_CHAR`</ph> message, but only if the list box meets all of these criteria:","source":"The `WM_CHARTOITEM` message is sent by the list box when it receives a `WM_CHAR` message, but only if the list box meets all of these criteria:"},{"content":"Is an owner-draw list box.","pos":[12377,12403]},{"pos":[12413,12498],"content":"Does not have the <bpt id=\"p1\">[</bpt>LBS_HASSTRINGS<ept id=\"p1\">](../../mfc/reference/list-box-styles.md)</ept> style set.","source":"Does not have the [LBS_HASSTRINGS](../../mfc/reference/list-box-styles.md) style set."},{"content":"Has at least one item.","pos":[12508,12530]},{"content":"You should never call this function yourself.","pos":[12537,12582]},{"content":"Override this function to provide your own custom handling of keyboard messages.","pos":[12583,12663]},{"content":"In your override, you must return a value to tell the framework what action you performed.","pos":[12670,12760]},{"content":"A return value of – 1 or – 2 indicates that you handled all aspects of selecting the item and requires no further action by the list box.","pos":[12761,12898]},{"content":"Before returning – 1 or – 2, you could set the selection or move the caret or both.","pos":[12899,12982]},{"content":"To set the selection, use <bpt id=\"p1\">[</bpt>SetCurSel<ept id=\"p1\">](#clistbox__setcursel)</ept> or <bpt id=\"p2\">[</bpt>SetSel<ept id=\"p2\">](#clistbox__setsel)</ept>.","pos":[12983,13074],"source":" To set the selection, use [SetCurSel](#clistbox__setcursel) or [SetSel](#clistbox__setsel)."},{"content":"To move the caret, use <bpt id=\"p1\">[</bpt>SetCaretIndex<ept id=\"p1\">](#clistbox__setcaretindex)</ept>.","pos":[13075,13140],"source":" To move the caret, use [SetCaretIndex](#clistbox__setcaretindex)."},{"content":"A return value of 0 or greater specifies the index of an item in the list box and indicates that the list box should perform the default action for the keystroke on the given item.","pos":[13147,13327]},{"pos":[13337,13344],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13348,13427],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#4<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#4](../../mfc/codesnippet/cpp/clistbox-class_2.cpp)]"},{"pos":[13437,13490],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__clistbox\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::CListBox","linkify":"<a name=\"clistbox__clistbox\"></a>  CListBox::CListBox","source":"<a name=\"clistbox__clistbox\"></a>  CListBox::CListBox"},{"pos":[13494,13525],"content":"Constructs a <ph id=\"ph1\">`CListBox`</ph> object.","source":"Constructs a `CListBox` object."},{"pos":[13562,13569],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You construct a <ph id=\"ph1\">`CListBox`</ph> object in two steps.","pos":[13573,13620],"source":"You construct a `CListBox` object in two steps."},{"content":"First, call the constructor <bpt id=\"p1\">**</bpt>ClistBox<ept id=\"p1\">**</ept> and then call <bpt id=\"p2\">**</bpt>Create<ept id=\"p2\">**</ept>, which initializes the Windows list box and attaches it to the <ph id=\"ph1\">`CListBox`</ph>.","pos":[13621,13761],"source":" First, call the constructor **ClistBox** and then call **Create**, which initializes the Windows list box and attaches it to the `CListBox`."},{"pos":[13771,13778],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13782,13861],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#1<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#1](../../mfc/codesnippet/cpp/clistbox-class_3.cpp)]"},{"pos":[13871,13930],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__compareitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::CompareItem","linkify":"<a name=\"clistbox__compareitem\"></a>  CListBox::CompareItem","source":"<a name=\"clistbox__compareitem\"></a>  CListBox::CompareItem"},{"content":"Called by the framework to determine the relative position of a new item in a sorted owner-draw list box.","pos":[13934,14039]},{"pos":[14130,14140],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A long pointer to a <ph id=\"ph1\">`COMPAREITEMSTRUCT`</ph> structure.","pos":[14169,14219],"source":" A long pointer to a `COMPAREITEMSTRUCT` structure."},{"pos":[14229,14241],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Indicates the relative position of the two items described in the <bpt id=\"p1\">[</bpt>COMPAREITEMSTRUCT<ept id=\"p1\">](../../mfc/reference/compareitemstruct-structure.md)</ept> structure.","pos":[14245,14393],"source":"Indicates the relative position of the two items described in the [COMPAREITEMSTRUCT](../../mfc/reference/compareitemstruct-structure.md) structure."},{"content":"It may be any of the following values:","pos":[14394,14432]},{"content":"Value","pos":[14439,14444]},{"content":"Meaning","pos":[14445,14452]},{"content":"–1","pos":[14487,14489]},{"content":"Item 1 sorts before item 2.","pos":[14490,14517]},{"content":"0","pos":[14522,14523]},{"content":"Item 1 and item 2 sort the same.","pos":[14524,14556]},{"content":"1","pos":[14561,14562]},{"content":"Item 1 sorts after item 2.","pos":[14563,14589]},{"pos":[14597,14733],"content":"See <bpt id=\"p1\">[</bpt>CWnd::OnCompareItem<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__oncompareitem)</ept> for a description of the <ph id=\"ph1\">`COMPAREITEMSTRUCT`</ph> structure.","source":"See [CWnd::OnCompareItem](../../mfc/reference/cwnd-class.md#cwnd__oncompareitem) for a description of the `COMPAREITEMSTRUCT` structure."},{"pos":[14743,14750],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, this member function does nothing.","pos":[14754,14800]},{"content":"If you create an owner-draw list box with the <bpt id=\"p1\">**</bpt>LBS_SORT<ept id=\"p1\">**</ept> style, you must override this member function to assist the framework in sorting new items added to the list box.","pos":[14801,14973],"source":" If you create an owner-draw list box with the **LBS_SORT** style, you must override this member function to assist the framework in sorting new items added to the list box."},{"pos":[14983,14990],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[14994,15073],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#5<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_4.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#5](../../mfc/codesnippet/cpp/clistbox-class_4.cpp)]"},{"pos":[15083,15132],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__create\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::Create","linkify":"<a name=\"clistbox__create\"></a>  CListBox::Create","source":"<a name=\"clistbox__create\"></a>  CListBox::Create"},{"pos":[15136,15206],"content":"Creates the Windows list box and attaches it to the <ph id=\"ph1\">`CListBox`</ph> object.","source":"Creates the Windows list box and attaches it to the `CListBox` object."},{"pos":[15336,15346],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the style of the list box.","pos":[15363,15399]},{"content":"Apply any combination of <bpt id=\"p1\">[</bpt>list-box styles<ept id=\"p1\">](../../mfc/reference/list-box-styles.md)</ept> to the box.","pos":[15400,15494],"source":" Apply any combination of [list-box styles](../../mfc/reference/list-box-styles.md) to the box."},{"content":"Specifies the list-box size and position.","pos":[15511,15552]},{"content":"Can be either a <ph id=\"ph1\">`CRect`</ph> object or a <ph id=\"ph2\">`RECT`</ph> structure.","pos":[15553,15606],"source":" Can be either a `CRect` object or a `RECT` structure."},{"content":"Specifies the list box's parent window (usually a <ph id=\"ph1\">`CDialog`</ph> object).","pos":[15629,15697],"source":" Specifies the list box's parent window (usually a `CDialog` object)."},{"content":"It must not be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[15698,15722],"source":" It must not be **NULL**."},{"content":"Specifies the list box's control ID.","pos":[15738,15774]},{"pos":[15784,15796],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[15800,15835]},{"pos":[15845,15852],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You construct a <ph id=\"ph1\">`CListBox`</ph> object in two steps.","pos":[15856,15903],"source":"You construct a `CListBox` object in two steps."},{"content":"First, call the constructor and then call <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>, which initializes the Windows list box and attaches it to the <ph id=\"ph1\">`CListBox`</ph> object.","pos":[15904,16038],"source":" First, call the constructor and then call **Create**, which initializes the Windows list box and attaches it to the `CListBox` object."},{"pos":[16045,16403],"content":"When <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> executes, Windows sends the <bpt id=\"p2\">[</bpt>WM_NCCREATE<ept id=\"p2\">](../../mfc/reference/cwnd-class.md#cwnd__onnccreate)</ept>, <bpt id=\"p3\">[</bpt>WM_CREATE<ept id=\"p3\">](../../mfc/reference/cwnd-class.md#cwnd__oncreate)</ept>, <bpt id=\"p4\">[</bpt>WM_NCCALCSIZE<ept id=\"p4\">](../../mfc/reference/cwnd-class.md#cwnd__onnccalcsize)</ept>, and <bpt id=\"p5\">[</bpt>WM_GETMINMAXINFO<ept id=\"p5\">](../../mfc/reference/cwnd-class.md#cwnd__ongetminmaxinfo)</ept> messages to the list-box control.","source":"When **Create** executes, Windows sends the [WM_NCCREATE](../../mfc/reference/cwnd-class.md#cwnd__onnccreate), [WM_CREATE](../../mfc/reference/cwnd-class.md#cwnd__oncreate), [WM_NCCALCSIZE](../../mfc/reference/cwnd-class.md#cwnd__onnccalcsize), and [WM_GETMINMAXINFO](../../mfc/reference/cwnd-class.md#cwnd__ongetminmaxinfo) messages to the list-box control."},{"content":"These messages are handled by default by the <bpt id=\"p1\">[</bpt>OnNcCreate<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__onnccreate)</ept>, <bpt id=\"p2\">[</bpt>OnCreate<ept id=\"p2\">](../../mfc/reference/cwnd-class.md#cwnd__oncreate)</ept>, <bpt id=\"p3\">[</bpt>OnNcCalcSize<ept id=\"p3\">](../../mfc/reference/cwnd-class.md#cwnd__onnccalcsize)</ept>, and <bpt id=\"p4\">[</bpt>OnGetMinMaxInfo<ept id=\"p4\">](../../mfc/reference/cwnd-class.md#cwnd__ongetminmaxinfo)</ept> member functions in the <ph id=\"ph1\">`CWnd`</ph> base class.","pos":[16410,16774],"source":"These messages are handled by default by the [OnNcCreate](../../mfc/reference/cwnd-class.md#cwnd__onnccreate), [OnCreate](../../mfc/reference/cwnd-class.md#cwnd__oncreate), [OnNcCalcSize](../../mfc/reference/cwnd-class.md#cwnd__onnccalcsize), and [OnGetMinMaxInfo](../../mfc/reference/cwnd-class.md#cwnd__ongetminmaxinfo) member functions in the `CWnd` base class."},{"content":"To extend the default message handling, derive a class from <ph id=\"ph1\">`CListBox`</ph>, add a message map to the new class, and override the preceding message-handler member functions.","pos":[16775,16943],"source":" To extend the default message handling, derive a class from `CListBox`, add a message map to the new class, and override the preceding message-handler member functions."},{"content":"Override <ph id=\"ph1\">`OnCreate`</ph>, for example, to perform needed initialization for a new class.","pos":[16944,17027],"source":" Override `OnCreate`, for example, to perform needed initialization for a new class."},{"pos":[17034,17130],"content":"Apply the following <bpt id=\"p1\">[</bpt>window styles<ept id=\"p1\">](../../mfc/reference/window-styles.md)</ept> to a list-box control.","source":"Apply the following [window styles](../../mfc/reference/window-styles.md) to a list-box control."},{"pos":[17138,17157],"content":"<bpt id=\"p1\">**</bpt>WS_CHILD<ept id=\"p1\">**</ept> Always","source":"**WS_CHILD** Always"},{"pos":[17165,17187],"content":"<bpt id=\"p1\">**</bpt>WS_VISIBLE<ept id=\"p1\">**</ept> Usually","source":"**WS_VISIBLE** Usually"},{"pos":[17195,17217],"content":"<bpt id=\"p1\">**</bpt>WS_DISABLED<ept id=\"p1\">**</ept> Rarely","source":"**WS_DISABLED** Rarely"},{"pos":[17225,17268],"content":"<bpt id=\"p1\">**</bpt>WS_VSCROLL<ept id=\"p1\">**</ept> To add a vertical scroll bar","source":"**WS_VSCROLL** To add a vertical scroll bar"},{"pos":[17276,17321],"content":"<bpt id=\"p1\">**</bpt>WS_HSCROLL<ept id=\"p1\">**</ept> To add a horizontal scroll bar","source":"**WS_HSCROLL** To add a horizontal scroll bar"},{"pos":[17329,17359],"content":"<bpt id=\"p1\">**</bpt>WS_GROUP<ept id=\"p1\">**</ept> To group controls","source":"**WS_GROUP** To group controls"},{"pos":[17367,17414],"content":"<bpt id=\"p1\">**</bpt>WS_TABSTOP<ept id=\"p1\">**</ept> To allow tabbing to this control","source":"**WS_TABSTOP** To allow tabbing to this control"},{"pos":[17424,17431],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17435,17514],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#2<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_5.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#2](../../mfc/codesnippet/cpp/clistbox-class_5.cpp)]"},{"pos":[17524,17581],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__deleteitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::DeleteItem","linkify":"<a name=\"clistbox__deleteitem\"></a>  CListBox::DeleteItem","source":"<a name=\"clistbox__deleteitem\"></a>  CListBox::DeleteItem"},{"pos":[17585,17701],"content":"Called by the framework when the user deletes an item from an owner-draw <ph id=\"ph1\">`CListBox`</ph> object or destroys the list box.","source":"Called by the framework when the user deletes an item from an owner-draw `CListBox` object or destroys the list box."},{"pos":[17790,17800],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A long pointer to a Windows <bpt id=\"p1\">[</bpt>DELETEITEMSTRUCT<ept id=\"p1\">](../../mfc/reference/deleteitemstruct-structure.md)</ept> structure that contains information about the deleted item.","pos":[17828,17985],"source":" A long pointer to a Windows [DELETEITEMSTRUCT](../../mfc/reference/deleteitemstruct-structure.md) structure that contains information about the deleted item."},{"pos":[17995,18002],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation of this function does nothing.","pos":[18006,18063]},{"content":"Override this function to redraw an owner-draw list box as needed.","pos":[18064,18130]},{"pos":[18137,18270],"content":"See <bpt id=\"p1\">[</bpt>CWnd::OnDeleteItem<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__ondeleteitem)</ept> for a description of the <ph id=\"ph1\">`DELETEITEMSTRUCT`</ph> structure.","source":"See [CWnd::OnDeleteItem](../../mfc/reference/cwnd-class.md#cwnd__ondeleteitem) for a description of the `DELETEITEMSTRUCT` structure."},{"pos":[18280,18287],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[18291,18370],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#6<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_6.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#6](../../mfc/codesnippet/cpp/clistbox-class_6.cpp)]"},{"pos":[18380,18441],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__deletestring\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::DeleteString","linkify":"<a name=\"clistbox__deletestring\"></a>  CListBox::DeleteString","source":"<a name=\"clistbox__deletestring\"></a>  CListBox::DeleteString"},{"pos":[18445,18501],"content":"Deletes the item in position <ph id=\"ph1\">`nIndex`</ph> from the list box.","source":"Deletes the item in position `nIndex` from the list box."},{"pos":[18557,18567],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the zero-based index of the string to be deleted.","pos":[18583,18642]},{"pos":[18652,18664],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A count of the strings remaining in the list.","pos":[18668,18713]},{"content":"The return value is <bpt id=\"p1\">**</bpt>LB_ERR<ept id=\"p1\">**</ept> if <ph id=\"ph1\">`nIndex`</ph> specifies an index greater than the number of items in the list.","pos":[18714,18821],"source":" The return value is **LB_ERR** if `nIndex` specifies an index greater than the number of items in the list."},{"pos":[18831,18838],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"All items following <ph id=\"ph1\">`nIndex`</ph> now move down one position.","pos":[18842,18898],"source":"All items following `nIndex` now move down one position."},{"content":"For example, if a list box contains two items, deleting the first item will cause the remaining item to now be in the first position.","pos":[18899,19032]},{"content":"<ph id=\"ph1\">`nIndex`</ph>=0 for the item in the first position.","pos":[19033,19079],"source":"`nIndex`=0 for the item in the first position."},{"pos":[19089,19096],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[19100,19179],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#7<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_7.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#7](../../mfc/codesnippet/cpp/clistbox-class_7.cpp)]"},{"pos":[19189,19232],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__dir\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::Dir","linkify":"<a name=\"clistbox__dir\"></a>  CListBox::Dir","source":"<a name=\"clistbox__dir\"></a>  CListBox::Dir"},{"content":"Adds a list of filenames, drives, or both to a list box.","pos":[19236,19292]},{"pos":[19370,19380],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Can be any combination of the <ph id=\"ph1\">`enum`</ph> values described in <bpt id=\"p1\">**</bpt>CFile::GetStatu<ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>s<ept id=\"p2\">](../../mfc/reference/cfile-class.md#cfile__getstatus)</ept>, or any combination of the following values:","pos":[19394,19571],"source":" Can be any combination of the `enum` values described in **CFile::GetStatu**[s](../../mfc/reference/cfile-class.md#cfile__getstatus), or any combination of the following values:"},{"content":"Value","pos":[19578,19583]},{"content":"Meaning","pos":[19584,19591]},{"content":"0x0000","pos":[19626,19632]},{"content":"File can be read from or written to.","pos":[19633,19669]},{"content":"0x0001","pos":[19674,19680]},{"content":"File can be read from but not written to.","pos":[19681,19722]},{"content":"0x0002","pos":[19727,19733]},{"content":"File is hidden and does not appear in a directory listing.","pos":[19734,19792]},{"content":"0x0004","pos":[19797,19803]},{"content":"File is a system file.","pos":[19804,19826]},{"content":"0x0010","pos":[19831,19837]},{"pos":[19838,19897],"content":"The name specified by <ph id=\"ph1\">`lpszWildCard`</ph> specifies a directory.","source":"The name specified by `lpszWildCard` specifies a directory."},{"content":"0x0020","pos":[19902,19908]},{"content":"File has been archived.","pos":[19909,19932]},{"content":"0x4000","pos":[19937,19943]},{"pos":[19944,20011],"content":"Include all drives that match the name specified by <ph id=\"ph1\">`lpszWildCard`</ph>.","source":"Include all drives that match the name specified by `lpszWildCard`."},{"content":"0x8000","pos":[20016,20022]},{"content":"Exclusive flag.","pos":[20023,20038]},{"content":"If the exclusive flag is set, only files of the specified type are listed.","pos":[20039,20113]},{"content":"Otherwise, files of the specified type are listed in addition to \"normal\" files.","pos":[20114,20194]},{"content":"Points to a file-specification string.","pos":[20220,20258]},{"content":"The string can contain wildcards (for example, *.<ph id=\"ph1\">\\*</ph>).","pos":[20259,20312],"source":" The string can contain wildcards (for example, *.\\*)."},{"pos":[20322,20334],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The zero-based index of the last filename added to the list.","pos":[20338,20398]},{"content":"The return value is <bpt id=\"p1\">**</bpt>LB_ERR<ept id=\"p1\">**</ept> if an error occurs; the return value is <bpt id=\"p2\">**</bpt>LB_ERRSPACE<ept id=\"p2\">**</ept> if insufficient space is available to store the new strings.","pos":[20399,20546],"source":" The return value is **LB_ERR** if an error occurs; the return value is **LB_ERRSPACE** if insufficient space is available to store the new strings."},{"pos":[20556,20563],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[20567,20646],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#8<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_8.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#8](../../mfc/codesnippet/cpp/clistbox-class_8.cpp)]"},{"pos":[20656,20709],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__drawitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::DrawItem","linkify":"<a name=\"clistbox__drawitem\"></a>  CListBox::DrawItem","source":"<a name=\"clistbox__drawitem\"></a>  CListBox::DrawItem"},{"content":"Called by the framework when a visual aspect of an owner-draw list box changes.","pos":[20713,20792]},{"pos":[20875,20885],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A long pointer to a <bpt id=\"p1\">[</bpt>DRAWITEMSTRUCT<ept id=\"p1\">](../../mfc/reference/drawitemstruct-structure.md)</ept> structure that contains information about the type of drawing required.","pos":[20911,21068],"source":" A long pointer to a [DRAWITEMSTRUCT](../../mfc/reference/drawitemstruct-structure.md) structure that contains information about the type of drawing required."},{"pos":[21078,21085],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[21089,21218],"content":"The <bpt id=\"p1\">**</bpt>itemAction<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>itemState<ept id=\"p2\">**</ept> members of the <ph id=\"ph1\">`DRAWITEMSTRUCT`</ph> structure define the drawing action that is to be performed.","source":"The **itemAction** and **itemState** members of the `DRAWITEMSTRUCT` structure define the drawing action that is to be performed."},{"content":"By default, this member function does nothing.","pos":[21225,21271]},{"content":"Override this member function to implement drawing for an owner-draw <ph id=\"ph1\">`CListBox`</ph> object.","pos":[21272,21359],"source":" Override this member function to implement drawing for an owner-draw `CListBox` object."},{"content":"The application should restore all graphics device interface (GDI) objects selected for the display context supplied in <ph id=\"ph1\">`lpDrawItemStruct`</ph> before this member function terminates.","pos":[21360,21538],"source":" The application should restore all graphics device interface (GDI) objects selected for the display context supplied in `lpDrawItemStruct` before this member function terminates."},{"pos":[21545,21672],"content":"See <bpt id=\"p1\">[</bpt>CWnd::OnDrawItem<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__ondrawitem)</ept> for a description of the <ph id=\"ph1\">`DRAWITEMSTRUCT`</ph> structure.","source":"See [CWnd::OnDrawItem](../../mfc/reference/cwnd-class.md#cwnd__ondrawitem) for a description of the `DRAWITEMSTRUCT` structure."},{"pos":[21682,21689],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[21693,21772],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#9<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_9.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#9](../../mfc/codesnippet/cpp/clistbox-class_9.cpp)]"},{"pos":[21782,21839],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__findstring\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::FindString","linkify":"<a name=\"clistbox__findstring\"></a>  CListBox::FindString","source":"<a name=\"clistbox__findstring\"></a>  CListBox::FindString"},{"content":"Finds the first string in a list box that contains the specified prefix without changing the list-box selection.","pos":[21843,21955]},{"pos":[22051,22061],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Contains the zero-based index of the item before the first item to be searched.","pos":[22082,22161]},{"content":"When the search reaches the bottom of the list box, it continues from the top of the list box back to the item specified by <ph id=\"ph1\">`nStartAfter`</ph>.","pos":[22162,22300],"source":" When the search reaches the bottom of the list box, it continues from the top of the list box back to the item specified by `nStartAfter`."},{"content":"If <ph id=\"ph1\">`nStartAfter`</ph> is –1, the entire list box is searched from the beginning.","pos":[22301,22376],"source":" If `nStartAfter` is –1, the entire list box is searched from the beginning."},{"content":"Points to the null-terminated string that contains the prefix to search for.","pos":[22397,22473]},{"content":"The search is case independent, so this string may contain any combination of uppercase and lowercase letters.","pos":[22474,22584]},{"pos":[22594,22606],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22610,22698],"content":"The zero-based index of the matching item, or <bpt id=\"p1\">**</bpt>LB_ERR<ept id=\"p1\">**</ept> if the search was unsuccessful.","source":"The zero-based index of the matching item, or **LB_ERR** if the search was unsuccessful."},{"pos":[22708,22715],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[22719,22816],"content":"Use the <bpt id=\"p1\">[</bpt>SelectString<ept id=\"p1\">](#clistbox__selectstring)</ept> member function to both find and select a string.","source":"Use the [SelectString](#clistbox__selectstring) member function to both find and select a string."},{"pos":[22826,22833],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[22837,22918],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#10<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_10.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#10](../../mfc/codesnippet/cpp/clistbox-class_10.cpp)]"},{"pos":[22928,22995],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__findstringexact\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::FindStringExact","linkify":"<a name=\"clistbox__findstringexact\"></a>  CListBox::FindStringExact","source":"<a name=\"clistbox__findstringexact\"></a>  CListBox::FindStringExact"},{"pos":[22999,23079],"content":"Finds the first list-box string that matches the string specified in <ph id=\"ph1\">`lpszFind`</ph>.","source":"Finds the first list-box string that matches the string specified in `lpszFind`."},{"pos":[23180,23190],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the zero-based index of the item before the first item to be searched.","pos":[23211,23291]},{"content":"When the search reaches the bottom of the list box, it continues from the top of the list box back to the item specified by <ph id=\"ph1\">`nIndexStart`</ph>.","pos":[23292,23430],"source":" When the search reaches the bottom of the list box, it continues from the top of the list box back to the item specified by `nIndexStart`."},{"content":"If <ph id=\"ph1\">`nIndexStart`</ph> is –1, the entire list box is searched from the beginning.","pos":[23431,23506],"source":" If `nIndexStart` is –1, the entire list box is searched from the beginning."},{"content":"Points to the null-terminated string to search for.","pos":[23527,23578]},{"content":"This string can contain a complete filename, including the extension.","pos":[23579,23648]},{"content":"The search is not case sensitive, so the string can contain any combination of uppercase and lowercase letters.","pos":[23649,23760]},{"pos":[23770,23782],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23786,23863],"content":"The index of the matching item, or <bpt id=\"p1\">**</bpt>LB_ERR<ept id=\"p1\">**</ept> if the search was unsuccessful.","source":"The index of the matching item, or **LB_ERR** if the search was unsuccessful."},{"pos":[23873,23880],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[23884,24126],"content":"If the list box was created with an owner-draw style but without the <bpt id=\"p1\">[</bpt>LBS_HASSTRINGS<ept id=\"p1\">](../../mfc/reference/list-box-styles.md)</ept> style, the <ph id=\"ph1\">`FindStringExact`</ph> member function attempts to match the doubleword value against the value of <ph id=\"ph2\">`lpszFind`</ph>.","source":"If the list box was created with an owner-draw style but without the [LBS_HASSTRINGS](../../mfc/reference/list-box-styles.md) style, the `FindStringExact` member function attempts to match the doubleword value against the value of `lpszFind`."},{"pos":[24136,24143],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[24147,24228],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#11<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_11.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#11](../../mfc/codesnippet/cpp/clistbox-class_11.cpp)]"},{"pos":[24238,24303],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__getanchorindex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::GetAnchorIndex","linkify":"<a name=\"clistbox__getanchorindex\"></a>  CListBox::GetAnchorIndex","source":"<a name=\"clistbox__getanchorindex\"></a>  CListBox::GetAnchorIndex"},{"content":"Retrieves the zero-based index of the current anchor item in the list box.","pos":[24307,24381]},{"pos":[24437,24449],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24453,24527],"content":"The index of the current anchor item, if successful; otherwise <bpt id=\"p1\">**</bpt>LB_ERR<ept id=\"p1\">**</ept>.","source":"The index of the current anchor item, if successful; otherwise **LB_ERR**."},{"pos":[24537,24544],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In a multiple-selection list box, the anchor item is the first or last item in a block of contiguous selected items.","pos":[24548,24664]},{"pos":[24674,24681],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[24686,24760],"content":"See the example for <bpt id=\"p1\">[</bpt>CListBox::SetAnchorIndex<ept id=\"p1\">](#clistbox__setanchorindex)</ept>.","source":"See the example for [CListBox::SetAnchorIndex](#clistbox__setanchorindex)."},{"pos":[24770,24833],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__getcaretindex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::GetCaretIndex","linkify":"<a name=\"clistbox__getcaretindex\"></a>  CListBox::GetCaretIndex","source":"<a name=\"clistbox__getcaretindex\"></a>  CListBox::GetCaretIndex"},{"content":"Determines the index of the item that has the focus rectangle in a multiple-selection list box.","pos":[24837,24932]},{"pos":[24987,24999],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The zero-based index of the item that has the focus rectangle in a list box.","pos":[25003,25079]},{"content":"If the list box is a single-selection list box, the return value is the index of the item that is selected, if any.","pos":[25080,25195]},{"pos":[25205,25212],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The item may or may not be selected.","pos":[25216,25252]},{"pos":[25262,25269],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[25274,25346],"content":"See the example for <bpt id=\"p1\">[</bpt>CListBox::SetCaretIndex<ept id=\"p1\">](#clistbox__setcaretindex)</ept>.","source":"See the example for [CListBox::SetCaretIndex](#clistbox__setcaretindex)."},{"pos":[25356,25409],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__getcount\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::GetCount","linkify":"<a name=\"clistbox__getcount\"></a>  CListBox::GetCount","source":"<a name=\"clistbox__getcount\"></a>  CListBox::GetCount"},{"content":"Retrieves the number of items in a list box.","pos":[25413,25457]},{"pos":[25507,25519],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[25523,25593],"content":"The number of items in the list box, or <bpt id=\"p1\">**</bpt>LB_ERR<ept id=\"p1\">**</ept> if an error occurs.","source":"The number of items in the list box, or **LB_ERR** if an error occurs."},{"pos":[25603,25610],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned count is one greater than the index value of the last item (the index is zero-based).","pos":[25614,25712]},{"pos":[25722,25729],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[25733,25814],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#12<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_12.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#12](../../mfc/codesnippet/cpp/clistbox-class_12.cpp)]"},{"pos":[25824,25879],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__getcursel\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::GetCurSel","linkify":"<a name=\"clistbox__getcursel\"></a>  CListBox::GetCurSel","source":"<a name=\"clistbox__getcursel\"></a>  CListBox::GetCurSel"},{"content":"Retrieves the zero-based index of the currently selected item, if any, in a single-selection list box.","pos":[25883,25985]},{"pos":[26036,26048],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The zero-based index of the currently selected item if it is a single-selection list box.","pos":[26052,26141]},{"content":"It is <ph id=\"ph1\">`LB_ERR`</ph> if no item is currently selected.","pos":[26142,26190],"source":" It is `LB_ERR` if no item is currently selected."},{"content":"In a multiple-selection list box, the index of the item that has the focus.","pos":[26197,26272]},{"pos":[26282,26289],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Do not call <ph id=\"ph1\">`GetCurSel`</ph> for a multiple-selection list box.","pos":[26293,26351],"source":"Do not call `GetCurSel` for a multiple-selection list box."},{"content":"Use <bpt id=\"p1\">[</bpt>CListBox::GetSelItems<ept id=\"p1\">](#clistbox__getselitems)</ept> instead.","pos":[26352,26412],"source":" Use [CListBox::GetSelItems](#clistbox__getselitems) instead."},{"pos":[26422,26429],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[26433,26514],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#13<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_13.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#13](../../mfc/codesnippet/cpp/clistbox-class_13.cpp)]"},{"pos":[26524,26599],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__gethorizontalextent\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::GetHorizontalExtent","linkify":"<a name=\"clistbox__gethorizontalextent\"></a>  CListBox::GetHorizontalExtent","source":"<a name=\"clistbox__gethorizontalextent\"></a>  CListBox::GetHorizontalExtent"},{"content":"Retrieves from the list box the width in pixels by which it can be scrolled horizontally.","pos":[26603,26692]},{"pos":[26753,26765],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The scrollable width of the list box, in pixels.","pos":[26769,26817]},{"pos":[26827,26834],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This is applicable only if the list box has a horizontal scroll bar.","pos":[26838,26906]},{"pos":[26916,26923],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[26927,27008],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#14<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_14.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#14](../../mfc/codesnippet/cpp/clistbox-class_14.cpp)]"},{"pos":[27018,27077],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__getitemdata\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::GetItemData","linkify":"<a name=\"clistbox__getitemdata\"></a>  CListBox::GetItemData","source":"<a name=\"clistbox__getitemdata\"></a>  CListBox::GetItemData"},{"content":"Retrieves the application-supplied doubleword value associated with the specified list-box item.","pos":[27081,27177]},{"pos":[27246,27256],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the zero-based index of the item in the list box.","pos":[27272,27331]},{"pos":[27341,27353],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[27357,27433],"content":"The 32-bit value associated with the item, or <bpt id=\"p1\">**</bpt>LB_ERR<ept id=\"p1\">**</ept> if an error occurs.","source":"The 32-bit value associated with the item, or **LB_ERR** if an error occurs."},{"pos":[27443,27450],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[27454,27554],"content":"The doubleword value was the <ph id=\"ph1\">`dwItemData`</ph> parameter of a <bpt id=\"p1\">[</bpt>SetItemData<ept id=\"p1\">](#clistbox__setitemdata)</ept> call.","source":"The doubleword value was the `dwItemData` parameter of a [SetItemData](#clistbox__setitemdata) call."},{"pos":[27564,27571],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[27575,27656],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#15<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_15.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#15](../../mfc/codesnippet/cpp/clistbox-class_15.cpp)]"},{"pos":[27666,27731],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__getitemdataptr\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::GetItemDataPtr","linkify":"<a name=\"clistbox__getitemdataptr\"></a>  CListBox::GetItemDataPtr","source":"<a name=\"clistbox__getitemdataptr\"></a>  CListBox::GetItemDataPtr"},{"pos":[27735,27854],"content":"Retrieves the application-supplied 32-bit value associated with the specified list-box item as a pointer ( <bpt id=\"p1\">**</bpt>void<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>).","source":"Retrieves the application-supplied 32-bit value associated with the specified list-box item as a pointer ( **void\\***)."},{"pos":[27922,27932],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the zero-based index of the item in the list box.","pos":[27948,28007]},{"pos":[28017,28029],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Retrieves a pointer, or –1 if an error occurs.","pos":[28033,28079]},{"pos":[28089,28096],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[28100,28181],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#16<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_16.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#16](../../mfc/codesnippet/cpp/clistbox-class_16.cpp)]"},{"pos":[28191,28254],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__getitemheight\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::GetItemHeight","linkify":"<a name=\"clistbox__getitemheight\"></a>  CListBox::GetItemHeight","source":"<a name=\"clistbox__getitemheight\"></a>  CListBox::GetItemHeight"},{"content":"Determines the height of items in a list box.","pos":[28258,28303]},{"pos":[28368,28378],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the zero-based index of the item in the list box.","pos":[28394,28453]},{"content":"This parameter is used only if the list box has the <bpt id=\"p1\">**</bpt>LBS_OWNERDRAWVARIABLE<ept id=\"p1\">**</ept> style; otherwise, it should be set to 0.","pos":[28454,28572],"source":" This parameter is used only if the list box has the **LBS_OWNERDRAWVARIABLE** style; otherwise, it should be set to 0."},{"pos":[28582,28594],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height, in pixels, of the items in the list box.","pos":[28598,28650]},{"content":"If the list box has the <bpt id=\"p1\">[</bpt>LBS_OWNERDRAWVARIABLE<ept id=\"p1\">](../../mfc/reference/list-box-styles.md)</ept> style, the return value is the height of the item specified by <ph id=\"ph1\">`nIndex`</ph>.","pos":[28651,28811],"source":" If the list box has the [LBS_OWNERDRAWVARIABLE](../../mfc/reference/list-box-styles.md) style, the return value is the height of the item specified by `nIndex`."},{"content":"If an error occurs, the return value is <bpt id=\"p1\">**</bpt>LB_ERR<ept id=\"p1\">**</ept>.","pos":[28812,28863],"source":" If an error occurs, the return value is **LB_ERR**."},{"pos":[28873,28880],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[28884,28965],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#17<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_17.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#17](../../mfc/codesnippet/cpp/clistbox-class_17.cpp)]"},{"pos":[28975,29034],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__getitemrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::GetItemRect","linkify":"<a name=\"clistbox__getitemrect\"></a>  CListBox::GetItemRect","source":"<a name=\"clistbox__getitemrect\"></a>  CListBox::GetItemRect"},{"content":"Retrieves the dimensions of the rectangle that bounds a list-box item as it is currently displayed in the list-box window.","pos":[29038,29160]},{"pos":[29249,29259],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the zero-based index of the item.","pos":[29275,29318]},{"content":"Specifies a long pointer to a <bpt id=\"p1\">[</bpt>RECT structure<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> that receives the list-box client coordinates of the item.","pos":[29337,29482],"source":" Specifies a long pointer to a [RECT structure](../../mfc/reference/rect-structure1.md) that receives the list-box client coordinates of the item."},{"pos":[29492,29504],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[29508,29538],"content":"<bpt id=\"p1\">**</bpt>LB_ERR<ept id=\"p1\">**</ept> if an error occurs.","source":"**LB_ERR** if an error occurs."},{"pos":[29548,29555],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[29559,29640],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#18<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_18.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#18](../../mfc/codesnippet/cpp/clistbox-class_18.cpp)]"},{"pos":[29650,29715],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__getlistboxinfo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::GetListBoxInfo","linkify":"<a name=\"clistbox__getlistboxinfo\"></a>  CListBox::GetListBoxInfo","source":"<a name=\"clistbox__getlistboxinfo\"></a>  CListBox::GetListBoxInfo"},{"content":"Retrieves the number of items per column.","pos":[29719,29760]},{"pos":[29818,29830],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[29834,29886],"content":"Number of items per column of the <ph id=\"ph1\">`CListBox`</ph> object.","source":"Number of items per column of the `CListBox` object."},{"pos":[29896,29903],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[29907,30123],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LB_GETLISTBOXINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775208)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LB_GETLISTBOXINFO](http://msdn.microsoft.com/library/windows/desktop/bb775208) message, as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[30133,30188],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__getlocale\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::GetLocale","linkify":"<a name=\"clistbox__getlocale\"></a>  CListBox::GetLocale","source":"<a name=\"clistbox__getlocale\"></a>  CListBox::GetLocale"},{"content":"Retrieves the locale used by the list box.","pos":[30192,30234]},{"pos":[30286,30298],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The locale identifier (LCID) value for the strings in the list box.","pos":[30302,30369]},{"pos":[30379,30386],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The locale is used, for example, to determine the sort order of the strings in a sorted list box.","pos":[30390,30487]},{"pos":[30497,30504],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[30509,30573],"content":"See the example for <bpt id=\"p1\">[</bpt>CListBox::SetLocale<ept id=\"p1\">](#clistbox__setlocale)</ept>.","source":"See the example for [CListBox::SetLocale](#clistbox__setlocale)."},{"pos":[30583,30632],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__getsel\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::GetSel","linkify":"<a name=\"clistbox__getsel\"></a>  CListBox::GetSel","source":"<a name=\"clistbox__getsel\"></a>  CListBox::GetSel"},{"content":"Retrieves the selection state of an item.","pos":[30636,30677]},{"pos":[30735,30745],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the zero-based index of the item.","pos":[30761,30804]},{"pos":[30814,30826],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A positive number if the specified item is selected; otherwise, it is 0.","pos":[30830,30902]},{"content":"The return value is <ph id=\"ph1\">`LB_ERR`</ph> if an error occurs.","pos":[30903,30951],"source":" The return value is `LB_ERR` if an error occurs."},{"pos":[30961,30968],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This member function works with both single- and multiple-selection list boxes.","pos":[30972,31051]},{"pos":[31058,31169],"content":"To retrieve the index of the currently-selected list box item, use <bpt id=\"p1\">[</bpt>CListBox::GetCurSel<ept id=\"p1\">](#clistbox__getcursel)</ept>.","source":"To retrieve the index of the currently-selected list box item, use [CListBox::GetCurSel](#clistbox__getcursel)."},{"pos":[31179,31186],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[31190,31271],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#19<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_19.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#19](../../mfc/codesnippet/cpp/clistbox-class_19.cpp)]"},{"pos":[31281,31340],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__getselcount\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::GetSelCount","linkify":"<a name=\"clistbox__getselcount\"></a>  CListBox::GetSelCount","source":"<a name=\"clistbox__getselcount\"></a>  CListBox::GetSelCount"},{"content":"Retrieves the total number of selected items in a multiple-selection list box.","pos":[31344,31422]},{"pos":[31475,31487],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The count of selected items in a list box.","pos":[31491,31533]},{"content":"If the list box is a single-selection list box, the return value is <bpt id=\"p1\">**</bpt>LB_ERR<ept id=\"p1\">**</ept>.","pos":[31534,31613],"source":" If the list box is a single-selection list box, the return value is **LB_ERR**."},{"pos":[31623,31630],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[31635,31703],"content":"See the example for <bpt id=\"p1\">[</bpt>CListBox::GetSelItems<ept id=\"p1\">](#clistbox__getselitems)</ept>.","source":"See the example for [CListBox::GetSelItems](#clistbox__getselitems)."},{"pos":[31713,31772],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__getselitems\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::GetSelItems","linkify":"<a name=\"clistbox__getselitems\"></a>  CListBox::GetSelItems","source":"<a name=\"clistbox__getselitems\"></a>  CListBox::GetSelItems"},{"content":"Fills a buffer with an array of integers that specifies the item numbers of selected items in a multiple-selection list box.","pos":[31776,31900]},{"pos":[31992,32002],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the maximum number of selected items whose item numbers are to be placed in the buffer.","pos":[32021,32118]},{"content":"Specifies a pointer to a buffer large enough for the number of integers specified by <ph id=\"ph1\">`nMaxItems`</ph>.","pos":[32138,32235],"source":" Specifies a pointer to a buffer large enough for the number of integers specified by `nMaxItems`."},{"pos":[32245,32257],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The actual number of items placed in the buffer.","pos":[32261,32309]},{"content":"If the list box is a single-selection list box, the return value is <ph id=\"ph1\">`LB_ERR`</ph>.","pos":[32310,32387],"source":" If the list box is a single-selection list box, the return value is `LB_ERR`."},{"pos":[32397,32404],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[32408,32489],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#20<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_20.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#20](../../mfc/codesnippet/cpp/clistbox-class_20.cpp)]"},{"pos":[32499,32550],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__gettext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::GetText","linkify":"<a name=\"clistbox__gettext\"></a>  CListBox::GetText","source":"<a name=\"clistbox__gettext\"></a>  CListBox::GetText"},{"content":"Gets a string from a list box.","pos":[32554,32584]},{"pos":[32739,32749],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the zero-based index of the string to be retrieved.","pos":[32765,32826]},{"content":"Points to the buffer that receives the string.","pos":[32849,32895]},{"content":"The buffer must have sufficient space for the string and a terminating null character.","pos":[32896,32982]},{"content":"The size of the string can be determined ahead of time by calling the <ph id=\"ph1\">`GetTextLen`</ph> member function.","pos":[32983,33082],"source":" The size of the string can be determined ahead of time by calling the `GetTextLen` member function."},{"content":"A reference to a <ph id=\"ph1\">`CString`</ph> object.","pos":[33102,33136],"source":" A reference to a `CString` object."},{"pos":[33146,33158],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The length (in bytes) of the string, excluding the terminating null character.","pos":[33162,33240]},{"content":"If <ph id=\"ph1\">`nIndex`</ph> does not specify a valid index, the return value is <bpt id=\"p1\">**</bpt>LB_ERR<ept id=\"p1\">**</ept>.","pos":[33241,33316],"source":" If `nIndex` does not specify a valid index, the return value is **LB_ERR**."},{"pos":[33326,33333],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[33337,33423],"content":"The second form of this member function fills a <ph id=\"ph1\">`CString`</ph> object with the string text.","source":"The second form of this member function fills a `CString` object with the string text."},{"pos":[33433,33440],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[33444,33525],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#21<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_21.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#21](../../mfc/codesnippet/cpp/clistbox-class_21.cpp)]"},{"pos":[33535,33592],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__gettextlen\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::GetTextLen","linkify":"<a name=\"clistbox__gettextlen\"></a>  CListBox::GetTextLen","source":"<a name=\"clistbox__gettextlen\"></a>  CListBox::GetTextLen"},{"content":"Gets the length of a string in a list-box item.","pos":[33596,33643]},{"pos":[33705,33715],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the zero-based index of the string.","pos":[33731,33776]},{"pos":[33786,33798],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The length of the string in characters, excluding the terminating null character.","pos":[33802,33883]},{"content":"If <ph id=\"ph1\">`nIndex`</ph> does not specify a valid index, the return value is <bpt id=\"p1\">**</bpt>LB_ERR<ept id=\"p1\">**</ept>.","pos":[33884,33959],"source":" If `nIndex` does not specify a valid index, the return value is **LB_ERR**."},{"pos":[33969,33976],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[33981,34041],"content":"See the example for <bpt id=\"p1\">[</bpt>CListBox::GetText<ept id=\"p1\">](#clistbox__gettext)</ept>.","source":"See the example for [CListBox::GetText](#clistbox__gettext)."},{"pos":[34051,34110],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__gettopindex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::GetTopIndex","linkify":"<a name=\"clistbox__gettopindex\"></a>  CListBox::GetTopIndex","source":"<a name=\"clistbox__gettopindex\"></a>  CListBox::GetTopIndex"},{"content":"Retrieves the zero-based index of the first visible item in a list box.","pos":[34114,34185]},{"pos":[34238,34250],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34254,34351],"content":"The zero-based index of the first visible item in a list box if successful, <bpt id=\"p1\">**</bpt>LB_ERR<ept id=\"p1\">**</ept> otherwise.","source":"The zero-based index of the first visible item in a list box if successful, **LB_ERR** otherwise."},{"pos":[34361,34368],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Initially, item 0 is at the top of the list box, but if the list box is scrolled, another item may be at the top.","pos":[34372,34485]},{"pos":[34495,34502],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[34506,34587],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#22<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_22.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#22](../../mfc/codesnippet/cpp/clistbox-class_22.cpp)]"},{"pos":[34597,34656],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__initstorage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::InitStorage","linkify":"<a name=\"clistbox__initstorage\"></a>  CListBox::InitStorage","source":"<a name=\"clistbox__initstorage\"></a>  CListBox::InitStorage"},{"content":"Allocates memory for storing list-box items.","pos":[34660,34704]},{"pos":[34782,34792],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the number of items to add.","pos":[34808,34845]},{"content":"Specifies the amount of memory, in bytes, to allocate for item strings.","pos":[34864,34935]},{"pos":[34945,34957],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34961,35138],"content":"If successful, the maximum number of items that the list box can store before a memory reallocation is needed, otherwise <bpt id=\"p1\">**</bpt>LB_ERRSPACE<ept id=\"p1\">**</ept>, meaning not enough memory is available.","source":"If successful, the maximum number of items that the list box can store before a memory reallocation is needed, otherwise **LB_ERRSPACE**, meaning not enough memory is available."},{"pos":[35148,35155],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[35159,35232],"content":"Call this function before adding a large number of items to a <ph id=\"ph1\">`CListBox`</ph>.","source":"Call this function before adding a large number of items to a `CListBox`."},{"content":"This function helps speed up the initialization of list boxes that have a large number of items (more than 100).","pos":[35239,35351]},{"content":"It preallocates the specified amount of memory so that subsequent <bpt id=\"p1\">[</bpt>AddString<ept id=\"p1\">](#clistbox__addstring)</ept>, <bpt id=\"p2\">[</bpt>InsertString<ept id=\"p2\">](#clistbox__insertstring)</ept>, and <bpt id=\"p3\">[</bpt>Dir<ept id=\"p3\">](#clistbox__dir)</ept> functions take the shortest possible time.","pos":[35352,35562],"source":" It preallocates the specified amount of memory so that subsequent [AddString](#clistbox__addstring), [InsertString](#clistbox__insertstring), and [Dir](#clistbox__dir) functions take the shortest possible time."},{"content":"You can use estimates for the parameters.","pos":[35563,35604]},{"content":"If you overestimate, some extra memory is allocated; if you underestimate, the normal allocation is used for items that exceed the preallocated amount.","pos":[35605,35756]},{"content":"Windows 95/98 only: The <ph id=\"ph1\">`nItems`</ph> parameter is limited to 16-bit values.","pos":[35763,35834],"source":"Windows 95/98 only: The `nItems` parameter is limited to 16-bit values."},{"content":"This means list boxes cannot contain more than 32,767 items.","pos":[35835,35895]},{"content":"Although the number of items is restricted, the total size of the items in a list box is limited only by available memory.","pos":[35896,36018]},{"pos":[36028,36035],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[36039,36120],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#23<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_23.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#23](../../mfc/codesnippet/cpp/clistbox-class_23.cpp)]"},{"pos":[36130,36191],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__insertstring\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::InsertString","linkify":"<a name=\"clistbox__insertstring\"></a>  CListBox::InsertString","source":"<a name=\"clistbox__insertstring\"></a>  CListBox::InsertString"},{"content":"Inserts a string into the list box.","pos":[36195,36230]},{"pos":[36314,36324],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the zero-based index of the position to insert the string.","pos":[36340,36408]},{"content":"If this parameter is –1, the string is added to the end of the list.","pos":[36409,36477]},{"content":"Points to the null-terminated string that is to be inserted.","pos":[36498,36558]},{"pos":[36568,36580],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The zero-based index of the position at which the string was inserted.","pos":[36584,36654]},{"content":"The return value is <bpt id=\"p1\">**</bpt>LB_ERR<ept id=\"p1\">**</ept> if an error occurs; the return value is <bpt id=\"p2\">**</bpt>LB_ERRSPACE<ept id=\"p2\">**</ept> if insufficient space is available to store the new string.","pos":[36655,36801],"source":" The return value is **LB_ERR** if an error occurs; the return value is **LB_ERRSPACE** if insufficient space is available to store the new string."},{"pos":[36811,36818],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[36822,37000],"content":"Unlike the <bpt id=\"p1\">[</bpt>AddString<ept id=\"p1\">](#clistbox__addstring)</ept> member function, <ph id=\"ph1\">`InsertString`</ph> does not cause a list with the <bpt id=\"p2\">[</bpt>LBS_SORT<ept id=\"p2\">](../../mfc/reference/list-box-styles.md)</ept> style to be sorted.","source":"Unlike the [AddString](#clistbox__addstring) member function, `InsertString` does not cause a list with the [LBS_SORT](../../mfc/reference/list-box-styles.md) style to be sorted."},{"pos":[37010,37017],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[37021,37102],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#24<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_24.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#24](../../mfc/codesnippet/cpp/clistbox-class_24.cpp)]"},{"pos":[37112,37175],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__itemfrompoint\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::ItemFromPoint","linkify":"<a name=\"clistbox__itemfrompoint\"></a>  CListBox::ItemFromPoint","source":"<a name=\"clistbox__itemfrompoint\"></a>  CListBox::ItemFromPoint"},{"pos":[37179,37244],"content":"Determines the list-box item nearest the point specified in <ph id=\"ph1\">`pt`</ph>.","source":"Determines the list-box item nearest the point specified in `pt`."},{"pos":[37336,37346],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Point for which to find the nearest item, specified relative to the upper-left corner of the client area of the list box.","pos":[37358,37479]},{"content":"Reference to a <ph id=\"ph1\">`BOOL`</ph> variable which will be set to <ph id=\"ph2\">`TRUE`</ph> if <ph id=\"ph3\">`pt`</ph> is outside the client area of the nearest list box item, <ph id=\"ph4\">`FALSE`</ph> if <ph id=\"ph5\">`pt`</ph> is inside the client area of the nearest list box item.","pos":[37500,37695],"source":" Reference to a `BOOL` variable which will be set to `TRUE` if `pt` is outside the client area of the nearest list box item, `FALSE` if `pt` is inside the client area of the nearest list box item."},{"pos":[37705,37717],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37721,37782],"content":"The index of the nearest item to the point specified in <ph id=\"ph1\">`pt`</ph>.","source":"The index of the nearest item to the point specified in `pt`."},{"pos":[37792,37799],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You could use this function to determine which list-box item the mouse cursor moves over.","pos":[37803,37892]},{"pos":[37902,37909],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[37914,37988],"content":"See the example for <bpt id=\"p1\">[</bpt>CListBox::SetAnchorIndex<ept id=\"p1\">](#clistbox__setanchorindex)</ept>.","source":"See the example for [CListBox::SetAnchorIndex](#clistbox__setanchorindex)."},{"pos":[37998,38057],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__measureitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::MeasureItem","linkify":"<a name=\"clistbox__measureitem\"></a>  CListBox::MeasureItem","source":"<a name=\"clistbox__measureitem\"></a>  CListBox::MeasureItem"},{"content":"Called by the framework when a list box with an owner-draw style is created.","pos":[38061,38137]},{"pos":[38229,38239],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A long pointer to a <bpt id=\"p1\">[</bpt>MEASUREITEMSTRUCT<ept id=\"p1\">](../../mfc/reference/measureitemstruct-structure.md)</ept> structure.","pos":[38268,38370],"source":" A long pointer to a [MEASUREITEMSTRUCT](../../mfc/reference/measureitemstruct-structure.md) structure."},{"pos":[38380,38387],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, this member function does nothing.","pos":[38391,38437]},{"content":"Override this member function and fill in the <ph id=\"ph1\">`MEASUREITEMSTRUCT`</ph> structure to inform Windows of the list-box dimensions.","pos":[38438,38559],"source":" Override this member function and fill in the `MEASUREITEMSTRUCT` structure to inform Windows of the list-box dimensions."},{"content":"If the list box is created with the <bpt id=\"p1\">[</bpt>LBS_OWNERDRAWVARIABLE<ept id=\"p1\">](../../mfc/reference/list-box-styles.md)</ept> style, the framework calls this member function for each item in the list box.","pos":[38560,38738],"source":" If the list box is created with the [LBS_OWNERDRAWVARIABLE](../../mfc/reference/list-box-styles.md) style, the framework calls this member function for each item in the list box."},{"content":"Otherwise, this member is called only once.","pos":[38739,38782]},{"pos":[38789,39062],"content":"For further information about using the <bpt id=\"p1\">[</bpt>LBS_OWNERDRAWFIXED<ept id=\"p1\">](../../mfc/reference/list-box-styles.md)</ept> style in an owner-draw list box created with the <ph id=\"ph1\">`SubclassDlgItem`</ph> member function of <ph id=\"ph2\">`CWnd`</ph>, see the discussion in <bpt id=\"p2\">[</bpt>Technical Note 14<ept id=\"p2\">](../../mfc/tn014-custom-controls.md)</ept>.","source":"For further information about using the [LBS_OWNERDRAWFIXED](../../mfc/reference/list-box-styles.md) style in an owner-draw list box created with the `SubclassDlgItem` member function of `CWnd`, see the discussion in [Technical Note 14](../../mfc/tn014-custom-controls.md)."},{"pos":[39069,39210],"content":"See <bpt id=\"p1\">[</bpt>CWnd::OnMeasureItem<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__onmeasureitem)</ept> for a description of the <ph id=\"ph1\">`MEASUREITEMSTRUCT`</ph> structure <bpt id=\"p2\">**</bpt>.<ept id=\"p2\">**</ept>","source":"See [CWnd::OnMeasureItem](../../mfc/reference/cwnd-class.md#cwnd__onmeasureitem) for a description of the `MEASUREITEMSTRUCT` structure **.**"},{"pos":[39220,39227],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[39231,39312],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#25<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_25.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#25](../../mfc/codesnippet/cpp/clistbox-class_25.cpp)]"},{"pos":[39322,39383],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__resetcontent\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::ResetContent","linkify":"<a name=\"clistbox__resetcontent\"></a>  CListBox::ResetContent","source":"<a name=\"clistbox__resetcontent\"></a>  CListBox::ResetContent"},{"content":"Removes all items from a list box.","pos":[39387,39421]},{"pos":[39467,39474],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[39478,39559],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#26<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_26.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#26](../../mfc/codesnippet/cpp/clistbox-class_26.cpp)]"},{"pos":[39569,39630],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__selectstring\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::SelectString","linkify":"<a name=\"clistbox__selectstring\"></a>  CListBox::SelectString","source":"<a name=\"clistbox__selectstring\"></a>  CListBox::SelectString"},{"content":"Searches for a list-box item that matches the specified string, and if a matching item is found, it selects the item.","pos":[39634,39751]},{"pos":[39840,39850],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Contains the zero-based index of the item before the first item to be searched.","pos":[39871,39950]},{"content":"When the search reaches the bottom of the list box, it continues from the top of the list box back to the item specified by <ph id=\"ph1\">`nStartAfter`</ph>.","pos":[39951,40089],"source":" When the search reaches the bottom of the list box, it continues from the top of the list box back to the item specified by `nStartAfter`."},{"content":"If <ph id=\"ph1\">`nStartAfter`</ph> is –1, the entire list box is searched from the beginning.","pos":[40090,40165],"source":" If `nStartAfter` is –1, the entire list box is searched from the beginning."},{"content":"Points to the null-terminated string that contains the prefix to search for.","pos":[40186,40262]},{"content":"The search is case independent, so this string may contain any combination of uppercase and lowercase letters.","pos":[40263,40373]},{"pos":[40383,40395],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The index of the selected item if the search was successful.","pos":[40399,40459]},{"content":"If the search was unsuccessful, the return value is <bpt id=\"p1\">**</bpt>LB_ERR<ept id=\"p1\">**</ept> and the current selection is not changed.","pos":[40460,40564],"source":" If the search was unsuccessful, the return value is **LB_ERR** and the current selection is not changed."},{"pos":[40574,40581],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The list box is scrolled, if necessary, to bring the selected item into view.","pos":[40585,40662]},{"pos":[40669,40798],"content":"This member function cannot be used with a list box that has the <bpt id=\"p1\">[</bpt>LBS_MULTIPLESEL<ept id=\"p1\">](../../mfc/reference/list-box-styles.md)</ept> style.","source":"This member function cannot be used with a list box that has the [LBS_MULTIPLESEL](../../mfc/reference/list-box-styles.md) style."},{"pos":[40805,40941],"content":"An item is selected only if its initial characters (from the starting point) match the characters in the string specified by <ph id=\"ph1\">`lpszItem`</ph>.","source":"An item is selected only if its initial characters (from the starting point) match the characters in the string specified by `lpszItem`."},{"pos":[40948,41029],"content":"Use the <ph id=\"ph1\">`FindString`</ph> member function to find a string without selecting the item.","source":"Use the `FindString` member function to find a string without selecting the item."},{"pos":[41039,41046],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[41050,41131],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#27<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_27.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#27](../../mfc/codesnippet/cpp/clistbox-class_27.cpp)]"},{"pos":[41141,41202],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__selitemrange\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::SelItemRange","linkify":"<a name=\"clistbox__selitemrange\"></a>  CListBox::SelItemRange","source":"<a name=\"clistbox__selitemrange\"></a>  CListBox::SelItemRange"},{"content":"Selects multiple consecutive items in a multiple-selection list box.","pos":[41206,41274]},{"pos":[41379,41389],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies how to set the selection.","pos":[41406,41441]},{"content":"If <ph id=\"ph1\">`bSelect`</ph> is <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, the string is selected and highlighted; if <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>, the highlight is removed and the string is no longer selected.","pos":[41442,41584],"source":" If `bSelect` is **TRUE**, the string is selected and highlighted; if **FALSE**, the highlight is removed and the string is no longer selected."},{"content":"Specifies the zero-based index of the first item to set.","pos":[41607,41663]},{"content":"Specifies the zero-based index of the last item to set.","pos":[41685,41740]},{"pos":[41750,41762],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[41766,41796],"content":"<bpt id=\"p1\">**</bpt>LB_ERR<ept id=\"p1\">**</ept> if an error occurs.","source":"**LB_ERR** if an error occurs."},{"pos":[41806,41813],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use this member function only with multiple-selection list boxes.","pos":[41817,41882]},{"content":"If you need to select only one item in a multiple-selection list box — that is, if <ph id=\"ph1\">`nFirstItem`</ph> is equal to <ph id=\"ph2\">`nLastItem`</ph> — call the <bpt id=\"p1\">[</bpt>SetSel<ept id=\"p1\">](#clistbox__setsel)</ept> member function instead.","pos":[41883,42066],"source":" If you need to select only one item in a multiple-selection list box — that is, if `nFirstItem` is equal to `nLastItem` — call the [SetSel](#clistbox__setsel) member function instead."},{"pos":[42076,42083],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[42087,42168],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#28<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_28.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#28](../../mfc/codesnippet/cpp/clistbox-class_28.cpp)]"},{"pos":[42178,42243],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__setanchorindex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::SetAnchorIndex","linkify":"<a name=\"clistbox__setanchorindex\"></a>  CListBox::SetAnchorIndex","source":"<a name=\"clistbox__setanchorindex\"></a>  CListBox::SetAnchorIndex"},{"content":"Sets the anchor in a multiple-selection list box to begin an extended selection.","pos":[42247,42327]},{"pos":[42385,42395],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the zero-based index of the list-box item that will be the anchor.","pos":[42411,42487]},{"pos":[42497,42504],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In a multiple-selection list box, the anchor item is the first or last item in a block of contiguous selected items.","pos":[42508,42624]},{"pos":[42634,42641],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[42645,42726],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#29<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_29.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#29](../../mfc/codesnippet/cpp/clistbox-class_29.cpp)]"},{"pos":[42736,42799],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__setcaretindex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::SetCaretIndex","linkify":"<a name=\"clistbox__setcaretindex\"></a>  CListBox::SetCaretIndex","source":"<a name=\"clistbox__setcaretindex\"></a>  CListBox::SetCaretIndex"},{"content":"Sets the focus rectangle to the item at the specified index in a multiple-selection list box.","pos":[42803,42896]},{"pos":[42984,42994],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the zero-based index of the item to receive the focus rectangle in the list box.","pos":[43010,43100]},{"content":"<bpt id=\"p1\">*</bpt>bScroll<ept id=\"p1\">*</ept>","pos":[43107,43116],"source":"*bScroll*"},{"content":"If this value is 0, the item is scrolled until it is fully visible.","pos":[43120,43187]},{"content":"If this value is not 0, the item is scrolled until it is at least partially visible.","pos":[43188,43272]},{"pos":[43282,43294],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[43298,43328],"content":"<bpt id=\"p1\">**</bpt>LB_ERR<ept id=\"p1\">**</ept> if an error occurs.","source":"**LB_ERR** if an error occurs."},{"pos":[43338,43345],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the item is not visible, it is scrolled into view.","pos":[43349,43402]},{"pos":[43412,43419],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[43423,43504],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#30<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_30.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#30](../../mfc/codesnippet/cpp/clistbox-class_30.cpp)]"},{"pos":[43514,43579],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__setcolumnwidth\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::SetColumnWidth","linkify":"<a name=\"clistbox__setcolumnwidth\"></a>  CListBox::SetColumnWidth","source":"<a name=\"clistbox__setcolumnwidth\"></a>  CListBox::SetColumnWidth"},{"pos":[43583,43732],"content":"Sets the width in pixels of all columns in a multicolumn list box (created with the <bpt id=\"p1\">[</bpt>LBS_MULTICOLUMN<ept id=\"p1\">](../../mfc/reference/list-box-styles.md)</ept> style).","source":"Sets the width in pixels of all columns in a multicolumn list box (created with the [LBS_MULTICOLUMN](../../mfc/reference/list-box-styles.md) style)."},{"pos":[43791,43801],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the width in pixels of all columns.","pos":[43818,43863]},{"pos":[43873,43880],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[43884,43965],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#31<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_31.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#31](../../mfc/codesnippet/cpp/clistbox-class_31.cpp)]"},{"pos":[43975,44030],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__setcursel\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::SetCurSel","linkify":"<a name=\"clistbox__setcursel\"></a>  CListBox::SetCurSel","source":"<a name=\"clistbox__setcursel\"></a>  CListBox::SetCurSel"},{"content":"Selects a string and scrolls it into view, if necessary.","pos":[44034,44090]},{"pos":[44143,44153],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the zero-based index of the string to be selected.","pos":[44170,44230]},{"content":"If <ph id=\"ph1\">`nSelect`</ph> is –1, the list box is set to have no selection.","pos":[44231,44292],"source":" If `nSelect` is –1, the list box is set to have no selection."},{"pos":[44302,44314],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[44318,44346],"content":"<ph id=\"ph1\">`LB_ERR`</ph> if an error occurs.","source":"`LB_ERR` if an error occurs."},{"pos":[44356,44363],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When the new string is selected, the list box removes the highlight from the previously selected string.","pos":[44367,44471]},{"content":"Use this member function only with single-selection list boxes.","pos":[44478,44541]},{"pos":[44548,44653],"content":"To set or remove a selection in a multiple-selection list box, use <bpt id=\"p1\">[</bpt>CListBox::SetSel<ept id=\"p1\">](#clistbox__setsel)</ept>.","source":"To set or remove a selection in a multiple-selection list box, use [CListBox::SetSel](#clistbox__setsel)."},{"pos":[44663,44670],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[44674,44755],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#32<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_32.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#32](../../mfc/codesnippet/cpp/clistbox-class_32.cpp)]"},{"pos":[44765,44840],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__sethorizontalextent\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::SetHorizontalExtent","linkify":"<a name=\"clistbox__sethorizontalextent\"></a>  CListBox::SetHorizontalExtent","source":"<a name=\"clistbox__sethorizontalextent\"></a>  CListBox::SetHorizontalExtent"},{"content":"Sets the width, in pixels, by which a list box can be scrolled horizontally.","pos":[44844,44920]},{"pos":[44985,44995],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>cxExtent<ept id=\"p1\">*</ept>","pos":[44999,45009],"source":"*cxExtent*"},{"content":"Specifies the number of pixels by which the list box can be scrolled horizontally.","pos":[45013,45095]},{"pos":[45105,45112],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the size of the list box is smaller than this value, the horizontal scroll bar will horizontally scroll items in the list box.","pos":[45116,45245]},{"content":"If the list box is as large or larger than this value, the horizontal scroll bar is hidden.","pos":[45246,45337]},{"pos":[45344,45493],"content":"To respond to a call to <ph id=\"ph1\">`SetHorizontalExtent`</ph>, the list box must have been defined with the <bpt id=\"p1\">[</bpt>WS_HSCROLL<ept id=\"p1\">](../../mfc/reference/window-styles.md)</ept> style.","source":"To respond to a call to `SetHorizontalExtent`, the list box must have been defined with the [WS_HSCROLL](../../mfc/reference/window-styles.md) style."},{"content":"This member function is not useful for multicolumn list boxes.","pos":[45500,45562]},{"content":"For multicolumn list boxes, call the <ph id=\"ph1\">`SetColumnWidth`</ph> member function.","pos":[45563,45633],"source":" For multicolumn list boxes, call the `SetColumnWidth` member function."},{"pos":[45643,45650],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[45654,45735],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#33<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_33.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#33](../../mfc/codesnippet/cpp/clistbox-class_33.cpp)]"},{"pos":[45745,45804],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__setitemdata\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::SetItemData","linkify":"<a name=\"clistbox__setitemdata\"></a>  CListBox::SetItemData","source":"<a name=\"clistbox__setitemdata\"></a>  CListBox::SetItemData"},{"content":"Sets a 32-bit value associated with the specified item in a list box.","pos":[45808,45877]},{"pos":[45964,45974],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the zero-based index of the item.","pos":[45990,46033]},{"content":"Specifies the value to be associated with the item.","pos":[46056,46107]},{"pos":[46117,46129],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[46133,46163],"content":"<bpt id=\"p1\">**</bpt>LB_ERR<ept id=\"p1\">**</ept> if an error occurs.","source":"**LB_ERR** if an error occurs."},{"pos":[46173,46180],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[46184,46265],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#34<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_34.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#34](../../mfc/codesnippet/cpp/clistbox-class_34.cpp)]"},{"pos":[46275,46340],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__setitemdataptr\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::SetItemDataPtr","linkify":"<a name=\"clistbox__setitemdataptr\"></a>  CListBox::SetItemDataPtr","source":"<a name=\"clistbox__setitemdataptr\"></a>  CListBox::SetItemDataPtr"},{"pos":[46344,46457],"content":"Sets the 32-bit value associated with the specified item in a list box to be the specified pointer ( <bpt id=\"p1\">**</bpt>void<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>).","source":"Sets the 32-bit value associated with the specified item in a list box to be the specified pointer ( **void\\***)."},{"pos":[46538,46548],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the zero-based index of the item.","pos":[46564,46607]},{"content":"Specifies the pointer to be associated with the item.","pos":[46625,46678]},{"pos":[46688,46700],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[46704,46734],"content":"<bpt id=\"p1\">**</bpt>LB_ERR<ept id=\"p1\">**</ept> if an error occurs.","source":"**LB_ERR** if an error occurs."},{"pos":[46744,46751],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This pointer remains valid for the life of the list box, even though the item's relative position within the list box might change as items are added or removed.","pos":[46755,46916]},{"content":"Hence, the item's index within the box can change, but the pointer remains reliable.","pos":[46917,47001]},{"pos":[47011,47018],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[47022,47103],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#35<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_35.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#35](../../mfc/codesnippet/cpp/clistbox-class_35.cpp)]"},{"pos":[47113,47176],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__setitemheight\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::SetItemHeight","linkify":"<a name=\"clistbox__setitemheight\"></a>  CListBox::SetItemHeight","source":"<a name=\"clistbox__setitemheight\"></a>  CListBox::SetItemHeight"},{"content":"Sets the height of items in a list box.","pos":[47180,47219]},{"pos":[47305,47315],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the zero-based index of the item in the list box.","pos":[47331,47390]},{"content":"This parameter is used only if the list box has the <bpt id=\"p1\">**</bpt>LBS_OWNERDRAWVARIABLE<ept id=\"p1\">**</ept> style; otherwise, it should be set to 0.","pos":[47391,47509],"source":" This parameter is used only if the list box has the **LBS_OWNERDRAWVARIABLE** style; otherwise, it should be set to 0."},{"content":"Specifies the height, in pixels, of the item.","pos":[47534,47579]},{"pos":[47589,47601],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[47605,47650],"content":"<bpt id=\"p1\">**</bpt>LB_ERR<ept id=\"p1\">**</ept> if the index or height is invalid.","source":"**LB_ERR** if the index or height is invalid."},{"pos":[47660,47667],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the list box has the <bpt id=\"p1\">[</bpt>LBS_OWNERDRAWVARIABLE<ept id=\"p1\">](../../mfc/reference/list-box-styles.md)</ept> style, this function sets the height of the item specified by <ph id=\"ph1\">`nIndex`</ph>.","pos":[47671,47830],"source":"If the list box has the [LBS_OWNERDRAWVARIABLE](../../mfc/reference/list-box-styles.md) style, this function sets the height of the item specified by `nIndex`."},{"content":"Otherwise, this function sets the height of all items in the list box.","pos":[47831,47901]},{"pos":[47911,47918],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[47922,48003],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#36<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_36.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#36](../../mfc/codesnippet/cpp/clistbox-class_36.cpp)]"},{"pos":[48013,48068],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__setlocale\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::SetLocale","linkify":"<a name=\"clistbox__setlocale\"></a>  CListBox::SetLocale","source":"<a name=\"clistbox__setlocale\"></a>  CListBox::SetLocale"},{"content":"Sets the locale identifier for this list box.","pos":[48072,48117]},{"pos":[48175,48185],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The new locale identifier (LCID) value to set for the list box.","pos":[48205,48268]},{"pos":[48278,48290],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The previous locale identifier (LCID) value for this list box.","pos":[48294,48356]},{"pos":[48366,48373],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If <bpt id=\"p1\">**</bpt>SetLocale<ept id=\"p1\">**</ept> is not called, the default locale is obtained from the system.","pos":[48377,48456],"source":"If **SetLocale** is not called, the default locale is obtained from the system."},{"content":"This system default locale can be modified by using Control Panel's Regional (or International) application.","pos":[48457,48565]},{"pos":[48575,48582],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[48586,48667],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#37<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_37.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#37](../../mfc/codesnippet/cpp/clistbox-class_37.cpp)]"},{"pos":[48677,48726],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__setsel\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::SetSel","linkify":"<a name=\"clistbox__setsel\"></a>  CListBox::SetSel","source":"<a name=\"clistbox__setsel\"></a>  CListBox::SetSel"},{"content":"Selects a string in a multiple-selection list box.","pos":[48730,48780]},{"pos":[48861,48871],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Contains the zero-based index of the string to be set.","pos":[48887,48941]},{"content":"If –1, the selection is added to or removed from all strings, depending on the value of <ph id=\"ph1\">`bSelect`</ph>.","pos":[48942,49040],"source":" If –1, the selection is added to or removed from all strings, depending on the value of `bSelect`."},{"content":"Specifies how to set the selection.","pos":[49060,49095]},{"content":"If <ph id=\"ph1\">`bSelect`</ph> is <ph id=\"ph2\">`TRUE`</ph>, the string is selected and highlighted; if <ph id=\"ph3\">`FALSE`</ph>, the highlight is removed and the string is no longer selected.","pos":[49096,49234],"source":" If `bSelect` is `TRUE`, the string is selected and highlighted; if `FALSE`, the highlight is removed and the string is no longer selected."},{"content":"The specified string is selected and highlighted by default.","pos":[49235,49295]},{"pos":[49305,49317],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[49321,49349],"content":"<ph id=\"ph1\">`LB_ERR`</ph> if an error occurs.","source":"`LB_ERR` if an error occurs."},{"pos":[49359,49366],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use this member function only with multiple-selection list boxes.","pos":[49370,49435]},{"pos":[49442,49542],"content":"To select an item from a single-selection list box, use <bpt id=\"p1\">[</bpt>CListBox::SetCurSel<ept id=\"p1\">](#clistbox__setcursel)</ept>.","source":"To select an item from a single-selection list box, use [CListBox::SetCurSel](#clistbox__setcursel)."},{"pos":[49552,49559],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[49563,49644],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#38<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_38.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#38](../../mfc/codesnippet/cpp/clistbox-class_38.cpp)]"},{"pos":[49654,49713],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__settabstops\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::SetTabStops","linkify":"<a name=\"clistbox__settabstops\"></a>  CListBox::SetTabStops","source":"<a name=\"clistbox__settabstops\"></a>  CListBox::SetTabStops"},{"content":"Sets the tab-stop positions in a list box.","pos":[49717,49759]},{"pos":[49918,49928],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Tab stops are set at every <ph id=\"ph1\">`cxEachStop`</ph> dialog units.","pos":[49948,50001],"source":" Tab stops are set at every `cxEachStop` dialog units."},{"content":"See <bpt id=\"p1\">*</bpt>rgTabStops<ept id=\"p1\">*</ept> for a description of a dialog unit.","pos":[50002,50054],"source":" See *rgTabStops* for a description of a dialog unit."},{"content":"Specifies the number of tab stops to have in the list box.","pos":[50076,50134]},{"content":"Points to the first member of an array of integers containing the tab-stop positions in dialog units.","pos":[50157,50258]},{"content":"A dialog unit is a horizontal or vertical distance.","pos":[50259,50310]},{"content":"One horizontal dialog unit is equal to one-fourth of the current dialog base width unit, and one vertical dialog unit is equal to one-eighth of the current dialog base height unit.","pos":[50311,50491]},{"content":"The dialog base units are computed based on the height and width of the current system font.","pos":[50492,50584]},{"content":"The <bpt id=\"p1\">**</bpt>GetDialogBaseUnits<ept id=\"p1\">**</ept> Windows function returns the current dialog base units in pixels.","pos":[50585,50677],"source":" The **GetDialogBaseUnits** Windows function returns the current dialog base units in pixels."},{"content":"The tab stops must be sorted in increasing order; back tabs are not allowed.","pos":[50678,50754]},{"pos":[50764,50776],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if all the tabs were set; otherwise 0.","pos":[50780,50826]},{"pos":[50836,50843],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To set tab stops to the default size of 2 dialog units, call the parameterless version of this member function.","pos":[50847,50958]},{"content":"To set tab stops to a size other than 2, call the version with the <ph id=\"ph1\">`cxEachStop`</ph> argument.","pos":[50959,51048],"source":" To set tab stops to a size other than 2, call the version with the `cxEachStop` argument."},{"content":"To set tab stops to an array of sizes, use the version with the <ph id=\"ph1\">`rgTabStops`</ph> and <ph id=\"ph2\">`nTabStops`</ph> arguments.","pos":[51055,51158],"source":"To set tab stops to an array of sizes, use the version with the `rgTabStops` and `nTabStops` arguments."},{"content":"A tab stop will be set for each value in <ph id=\"ph1\">`rgTabStops`</ph>, up to the number specified by <ph id=\"ph2\">`nTabStops`</ph>.","pos":[51159,51256],"source":" A tab stop will be set for each value in `rgTabStops`, up to the number specified by `nTabStops`."},{"pos":[51263,51431],"content":"To respond to a call to the <ph id=\"ph1\">`SetTabStops`</ph> member function, the list box must have been created with the <bpt id=\"p1\">[</bpt>LBS_USETABSTOPS<ept id=\"p1\">](../../mfc/reference/list-box-styles.md)</ept> style.","source":"To respond to a call to the `SetTabStops` member function, the list box must have been created with the [LBS_USETABSTOPS](../../mfc/reference/list-box-styles.md) style."},{"pos":[51441,51448],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[51452,51533],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#39<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_39.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#39](../../mfc/codesnippet/cpp/clistbox-class_39.cpp)]"},{"pos":[51543,51602],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__settopindex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::SetTopIndex","linkify":"<a name=\"clistbox__settopindex\"></a>  CListBox::SetTopIndex","source":"<a name=\"clistbox__settopindex\"></a>  CListBox::SetTopIndex"},{"content":"Ensures that a particular list-box item is visible.","pos":[51606,51657]},{"pos":[51711,51721],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the zero-based index of the list-box item.","pos":[51737,51789]},{"pos":[51799,51811],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[51815,51868],"content":"Zero if successful, or <bpt id=\"p1\">**</bpt>LB_ERR<ept id=\"p1\">**</ept> if an error occurs.","source":"Zero if successful, or **LB_ERR** if an error occurs."},{"pos":[51878,51885],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[51889,52045],"content":"The system scrolls the list box until either the item specified by <ph id=\"ph1\">`nIndex`</ph> appears at the top of the list box or the maximum scroll range has been reached.","source":"The system scrolls the list box until either the item specified by `nIndex` appears at the top of the list box or the maximum scroll range has been reached."},{"pos":[52055,52062],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[52066,52147],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#40<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_40.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#40](../../mfc/codesnippet/cpp/clistbox-class_40.cpp)]"},{"pos":[52157,52214],"content":"<bpt id=\"p1\">&lt;a name=\"clistbox__vkeytoitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListBox::VKeyToItem","linkify":"<a name=\"clistbox__vkeytoitem\"></a>  CListBox::VKeyToItem","source":"<a name=\"clistbox__vkeytoitem\"></a>  CListBox::VKeyToItem"},{"pos":[52218,52329],"content":"Called by the framework when the list box's parent window receives a <ph id=\"ph1\">`WM_VKEYTOITEM`</ph> message from the list box.","source":"Called by the framework when the list box's parent window receives a `WM_VKEYTOITEM` message from the list box."},{"pos":[52413,52423],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The virtual key code of the key the user pressed.","pos":[52437,52486]},{"content":"For a list of of standard virtual key codes, see Winuser.h","pos":[52487,52545]},{"content":"The current position of the list-box caret.","pos":[52564,52607]},{"pos":[52617,52629],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns – 2 for no further action, – 1 for default action, or a nonnegative number to specify an index of a list box item on which to perform the default action for the keystroke.","pos":[52633,52812]},{"pos":[52822,52829],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[52833,52979],"content":"The <ph id=\"ph1\">`WM_VKEYTOITEM`</ph> message is sent by the list box when it receives a <ph id=\"ph2\">`WM_KEYDOWN`</ph> message, but only if the list box meets both of the following:","source":"The `WM_VKEYTOITEM` message is sent by the list box when it receives a `WM_KEYDOWN` message, but only if the list box meets both of the following:"},{"pos":[52989,53071],"content":"Has the <bpt id=\"p1\">[</bpt>LBS_WANTKEYBOARDINPUT<ept id=\"p1\">](../../mfc/reference/list-box-styles.md)</ept> style set.","source":"Has the [LBS_WANTKEYBOARDINPUT](../../mfc/reference/list-box-styles.md) style set."},{"content":"Has at least one item.","pos":[53081,53103]},{"content":"You should never call this function yourself.","pos":[53110,53155]},{"content":"Override this function to provide your own custom handling of keyboard messages.","pos":[53156,53236]},{"content":"You must return a value to tell the framework what action your override performed.","pos":[53243,53325]},{"content":"A return value of – 2 indicates that the application handled all aspects of selecting the item and requires no further action by the list box.","pos":[53326,53468]},{"content":"Before returning – 2, you could set the selection or move the caret or both.","pos":[53469,53545]},{"content":"To set the selection, use <bpt id=\"p1\">[</bpt>SetCurSel<ept id=\"p1\">](#clistbox__setcursel)</ept> or <bpt id=\"p2\">[</bpt>SetSel<ept id=\"p2\">](#clistbox__setsel)</ept>.","pos":[53546,53637],"source":" To set the selection, use [SetCurSel](#clistbox__setcursel) or [SetSel](#clistbox__setsel)."},{"content":"To move the caret, use <bpt id=\"p1\">[</bpt>SetCaretIndex<ept id=\"p1\">](#clistbox__setcaretindex)</ept>.","pos":[53638,53703],"source":" To move the caret, use [SetCaretIndex](#clistbox__setcaretindex)."},{"content":"A return value of – 1 indicates that the list box should perform the default action in response to the keystroke.The default implementation returns – 1.","pos":[53710,53862]},{"content":"A return value of 0 or greater specifies the index of an item in the list box and indicates that the list box should perform the default action for the keystroke on the given item.","pos":[53869,54049]},{"pos":[54059,54066],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[54070,54151],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CListBox#41<ept id=\"p2\">](../../mfc/codesnippet/cpp/clistbox-class_41.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CListBox#41](../../mfc/codesnippet/cpp/clistbox-class_41.cpp)]"},{"pos":[54160,54168],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>MFC Sample CTRLTEST<ept id=\"p1\">](../../visual-cpp-samples.md)</ept><ph id=\"ph1\"> </ph>","pos":[54172,54223],"source":"[MFC Sample CTRLTEST](../../visual-cpp-samples.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CWnd Class<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[54226,54275],"source":" [CWnd Class](../../mfc/reference/cwnd-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[54278,54327],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CWnd Class<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[54330,54379],"source":" [CWnd Class](../../mfc/reference/cwnd-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CButton Class<ept id=\"p1\">](../../mfc/reference/cbutton-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[54382,54437],"source":" [CButton Class](../../mfc/reference/cbutton-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CComboBox Class<ept id=\"p1\">](../../mfc/reference/ccombobox-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[54440,54499],"source":" [CComboBox Class](../../mfc/reference/ccombobox-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CEdit Class<ept id=\"p1\">](../../mfc/reference/cedit-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[54502,54553],"source":" [CEdit Class](../../mfc/reference/cedit-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CScrollBar Class<ept id=\"p1\">](../../mfc/reference/cscrollbar-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[54556,54617],"source":" [CScrollBar Class](../../mfc/reference/cscrollbar-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CStatic Class<ept id=\"p1\">](../../mfc/reference/cstatic-class.md)</ept>","pos":[54620,54674],"source":" [CStatic Class](../../mfc/reference/cstatic-class.md)"}],"content":"---\ntitle: \"CListBox Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CListBox\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CListBox class\"\n  - \"list boxes\"\nms.assetid: 7ba3c699-c286-4cd9-9066-532c41ec05d1\ncaps.latest.revision: 26\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CListBox Class\nProvides the functionality of a Windows list box.  \n  \n## Syntax  \n  \n```  \nclass CListBox : public CWnd  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CListBox::CListBox](#clistbox__clistbox)|Constructs a `CListBox` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CListBox::AddString](#clistbox__addstring)|Adds a string to a list box.|  \n|[CListBox::CharToItem](#clistbox__chartoitem)|Override to provide custom `WM_CHAR` handling for owner-draw list boxes which don't have strings.|  \n|[CListBox::CompareItem](#clistbox__compareitem)|Called by the framework to determine the position of a new item in a sorted owner-draw list box.|  \n|[CListBox::Create](#clistbox__create)|Creates the Windows list box and attaches it to the `CListBox` object.|  \n|[CListBox::DeleteItem](#clistbox__deleteitem)|Called by the framework when the user deletes an item from an owner-draw list box.|  \n|[CListBox::DeleteString](#clistbox__deletestring)|Deletes a string from a list box.|  \n|[CListBox::Dir](#clistbox__dir)|Adds filenames, drives, or both from the current directory to a list box.|  \n|[CListBox::DrawItem](#clistbox__drawitem)|Called by the framework when a visual aspect of an owner-draw list box changes.|  \n|[CListBox::FindString](#clistbox__findstring)|Searches for a string in a list box.|  \n|[CListBox::FindStringExact](#clistbox__findstringexact)|Finds the first list-box string that matches a specified string.|  \n|[CListBox::GetAnchorIndex](#clistbox__getanchorindex)|Retrieves the zero-based index of the current anchor item in a list box.|  \n|[CListBox::GetCaretIndex](#clistbox__getcaretindex)|Determines the index of the item that has the focus rectangle in a multiple-selection list box.|  \n|[CListBox::GetCount](#clistbox__getcount)|Returns the number of strings in a list box.|  \n|[CListBox::GetCurSel](#clistbox__getcursel)|Returns the zero-based index of the currently selected string in a list box.|  \n|[CListBox::GetHorizontalExtent](#clistbox__gethorizontalextent)|Returns the width in pixels that a list box can be scrolled horizontally.|  \n|[CListBox::GetItemData](#clistbox__getitemdata)|Returns the 32-bit value associated with the list-box item.|  \n|[CListBox::GetItemDataPtr](#clistbox__getitemdataptr)|Returns a pointer to a list-box item.|  \n|[CListBox::GetItemHeight](#clistbox__getitemheight)|Determines the height of items in a list box.|  \n|[CListBox::GetItemRect](#clistbox__getitemrect)|Returns the bounding rectangle of the list-box item as it is currently displayed.|  \n|[CListBox::GetListBoxInfo](#clistbox__getlistboxinfo)|Retrieves the number of items per column.|  \n|[CListBox::GetLocale](#clistbox__getlocale)|Retrieves the locale identifier for a list box.|  \n|[CListBox::GetSel](#clistbox__getsel)|Returns the selection state of a list-box item.|  \n|[CListBox::GetSelCount](#clistbox__getselcount)|Returns the number of strings currently selected in a multiple-selection list box.|  \n|[CListBox::GetSelItems](#clistbox__getselitems)|Returns the indices of the strings currently selected in a list box.|  \n|[CListBox::GetText](#clistbox__gettext)|Copies a list-box item into a buffer.|  \n|[CListBox::GetTextLen](#clistbox__gettextlen)|Returns the length in bytes of a list-box item.|  \n|[CListBox::GetTopIndex](#clistbox__gettopindex)|Returns the index of the first visible string in a list box.|  \n|[CListBox::InitStorage](#clistbox__initstorage)|Preallocates blocks of memory for list box items and strings.|  \n|[CListBox::InsertString](#clistbox__insertstring)|Inserts a string at a specific location in a list box.|  \n|[CListBox::ItemFromPoint](#clistbox__itemfrompoint)|Returns the index of the list-box item nearest a point.|  \n|[CListBox::MeasureItem](#clistbox__measureitem)|Called by the framework when an owner-draw list box is created to determine list-box dimensions.|  \n|[CListBox::ResetContent](#clistbox__resetcontent)|Clears all the entries from a list box.|  \n|[CListBox::SelectString](#clistbox__selectstring)|Searches for and selects a string in a single-selection list box.|  \n|[CListBox::SelItemRange](#clistbox__selitemrange)|Selects or deselects a range of strings in a multiple-selection list box.|  \n|[CListBox::SetAnchorIndex](#clistbox__setanchorindex)|Sets the anchor in a multiple-selection list box to begin an extended selection.|  \n|[CListBox::SetCaretIndex](#clistbox__setcaretindex)|Sets the focus rectangle to the item at the specified index in a multiple-selection list box.|  \n|[CListBox::SetColumnWidth](#clistbox__setcolumnwidth)|Sets the column width of a multicolumn list box.|  \n|[CListBox::SetCurSel](#clistbox__setcursel)|Selects a list-box string.|  \n|[CListBox::SetHorizontalExtent](#clistbox__sethorizontalextent)|Sets the width in pixels that a list box can be scrolled horizontally.|  \n|[CListBox::SetItemData](#clistbox__setitemdata)|Sets the 32-bit value associated with the list-box item.|  \n|[CListBox::SetItemDataPtr](#clistbox__setitemdataptr)|Sets a pointer to the list-box item.|  \n|[CListBox::SetItemHeight](#clistbox__setitemheight)|Sets the height of items in a list box.|  \n|[CListBox::SetLocale](#clistbox__setlocale)|Sets the locale identifier for a list box.|  \n|[CListBox::SetSel](#clistbox__setsel)|Selects or deselects a list-box item in a multiple-selection list box.|  \n|[CListBox::SetTabStops](#clistbox__settabstops)|Sets the tab-stop positions in a list box.|  \n|[CListBox::SetTopIndex](#clistbox__settopindex)|Sets the zero-based index of the first visible string in a list box.|  \n|[CListBox::VKeyToItem](#clistbox__vkeytoitem)|Override to provide custom `WM_KEYDOWN` handling for list boxes with the **LBS_WANTKEYBOARDINPUT** style set.|  \n  \n## Remarks  \n A list box displays a list of items, such as filenames, that the user can view and select.  \n  \n In a single-selection list box, the user can select only one item. In a multiple-selection list box, a range of items can be selected. When the user selects an item, it is highlighted and the list box sends a notification message to the parent window.  \n  \n You can create a list box either from a dialog template or directly in your code. To create it directly, construct the `CListBox` object, then call the [Create](#clistbox__create) member function to create the Windows list-box control and attach it to the `CListBox` object. To use a list box in a dialog template, declare a list-box variable in your dialog box class, then use `DDX_Control` in your dialog box class's `DoDataExchange` function to connect the member variable to the control. (this is done for you automatically when you add a control variable to your dialog box class.)  \n  \n Construction can be a one-step process in a class derived from `CListBox`. Write a constructor for the derived class and call **Create** from within the constructor.  \n  \n If you want to handle Windows notification messages sent by a list box to its parent (usually a class derived from [CDialog](../../mfc/reference/cdialog-class.md)), add a message-map entry and message-handler member function to the parent class for each message.  \n  \n Each message-map entry takes the following form:  \n  \n `ON_Notification( id, memberFxn )`  \n  \n where `id` specifies the child window ID of the list-box control sending the notification and `memberFxn` is the name of the parent member function you have written to handle the notification.  \n  \n The parent's function prototype is as follows:  \n  \n `afx_msg void memberFxn( );`  \n  \n Following is a list of potential message-map entries and a description of the cases in which they would be sent to the parent:  \n  \n- **ON_LBN_DBLCLK** The user double-clicks a string in a list box. Only a list box that has the [LBS_NOTIFY](../../mfc/reference/list-box-styles.md) style will send this notification message.  \n  \n- **ON_LBN_ERRSPACE** The list box cannot allocate enough memory to meet the request.  \n  \n- **ON_LBN_KILLFOCUS** The list box is losing the input focus.  \n  \n- **ON_LBN_SELCANCEL** The current list-box selection is canceled. This message is only sent when a list box has the **LBS_NOTIFY** style.  \n  \n- **ON_LBN_SELCHANGE** The selection in the list box has changed. This notification is not sent if the selection is changed by the [CListBox::SetCurSel](#clistbox__setcursel) member function. This notification applies only to a list box that has the **LBS_NOTIFY** style. The **LBN_SELCHANGE** notification message is sent for a multiple-selection list box whenever the user presses an arrow key, even if the selection does not change.  \n  \n- **ON_LBN_SETFOCUS** The list box is receiving the input focus.  \n  \n- **ON_WM_CHARTOITEM** An owner-draw list box that has no strings receives a `WM_CHAR` message.  \n  \n- **ON_WM_VKEYTOITEM** A list box with the **LBS_WANTKEYBOARDINPUT** style receives a `WM_KEYDOWN` message.  \n  \n If you create a `CListBox` object within a dialog box (through a dialog resource), the `CListBox` object is automatically destroyed when the user closes the dialog box.  \n  \n If you create a `CListBox` object within a window, you may need to destroy the `CListBox` object. If you create the `CListBox` object on the stack, it is destroyed automatically. If you create the `CListBox` object on the heap by using the **new** function, you must call **delete** on the object to destroy it when the user closes the parent window.  \n  \n If you allocate any memory in the `CListBox` object, override the `CListBox` destructor to dispose of the allocation.  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n `CListBox`  \n  \n## Requirements  \n **Header:** afxwin.h  \n  \n##  <a name=\"clistbox__addstring\"></a>  CListBox::AddString  \n Adds a string to a list box.  \n  \n```  \nint AddString(LPCTSTR lpszItem);\n```  \n  \n### Parameters  \n `lpszItem`  \n Points to the null-terminated string that is to be added.  \n  \n### Return Value  \n The zero-based index to the string in the list box. The return value is **LB_ERR** if an error occurs; the return value is **LB_ERRSPACE** if insufficient space is available to store the new string.  \n  \n### Remarks  \n If the list box was not created with the [LBS_SORT](../../mfc/reference/list-box-styles.md) style, the string is added to the end of the list. Otherwise, the string is inserted into the list, and the list is sorted. If the list box was created with the **LBS_SORT** style but not the [LBS_HASSTRINGS](../../mfc/reference/list-box-styles.md) style, the framework sorts the list by one or more calls to the `CompareItem` member function.  \n  \n Use [InsertString](#clistbox__insertstring) to insert a string into a specific location within the list box.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#3](../../mfc/codesnippet/cpp/clistbox-class_1.cpp)]  \n  \n##  <a name=\"clistbox__chartoitem\"></a>  CListBox::CharToItem  \n Called by the framework when the list box's parent window receives a `WM_CHARTOITEM` message from the list box.  \n  \n```  \nvirtual int CharToItem(\n    UINT nKey,  \n    UINT nIndex);\n```  \n  \n### Parameters  \n `nKey`  \n The ANSI code of the character the user typed.  \n  \n `nIndex`  \n The current position of the list-box caret.  \n  \n### Return Value  \n Returns – 1 or – 2 for no further action or a nonnegative number to specify an index of a list-box item on which to perform the default action for the keystroke. The default implementation returns – 1.  \n  \n### Remarks  \n The `WM_CHARTOITEM` message is sent by the list box when it receives a `WM_CHAR` message, but only if the list box meets all of these criteria:  \n  \n-   Is an owner-draw list box.  \n  \n-   Does not have the [LBS_HASSTRINGS](../../mfc/reference/list-box-styles.md) style set.  \n  \n-   Has at least one item.  \n  \n You should never call this function yourself. Override this function to provide your own custom handling of keyboard messages.  \n  \n In your override, you must return a value to tell the framework what action you performed. A return value of – 1 or – 2 indicates that you handled all aspects of selecting the item and requires no further action by the list box. Before returning – 1 or – 2, you could set the selection or move the caret or both. To set the selection, use [SetCurSel](#clistbox__setcursel) or [SetSel](#clistbox__setsel). To move the caret, use [SetCaretIndex](#clistbox__setcaretindex).  \n  \n A return value of 0 or greater specifies the index of an item in the list box and indicates that the list box should perform the default action for the keystroke on the given item.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#4](../../mfc/codesnippet/cpp/clistbox-class_2.cpp)]  \n  \n##  <a name=\"clistbox__clistbox\"></a>  CListBox::CListBox  \n Constructs a `CListBox` object.  \n  \n```  \nCListBox();\n```  \n  \n### Remarks  \n You construct a `CListBox` object in two steps. First, call the constructor **ClistBox** and then call **Create**, which initializes the Windows list box and attaches it to the `CListBox`.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#1](../../mfc/codesnippet/cpp/clistbox-class_3.cpp)]  \n  \n##  <a name=\"clistbox__compareitem\"></a>  CListBox::CompareItem  \n Called by the framework to determine the relative position of a new item in a sorted owner-draw list box.  \n  \n```  \nvirtual int CompareItem(LPCOMPAREITEMSTRUCT lpCompareItemStruct);\n```  \n  \n### Parameters  \n `lpCompareItemStruct`  \n A long pointer to a `COMPAREITEMSTRUCT` structure.  \n  \n### Return Value  \n Indicates the relative position of the two items described in the [COMPAREITEMSTRUCT](../../mfc/reference/compareitemstruct-structure.md) structure. It may be any of the following values:  \n  \n|Value|Meaning|  \n|-----------|-------------|  \n|–1|Item 1 sorts before item 2.|  \n|0|Item 1 and item 2 sort the same.|  \n|1|Item 1 sorts after item 2.|  \n  \n See [CWnd::OnCompareItem](../../mfc/reference/cwnd-class.md#cwnd__oncompareitem) for a description of the `COMPAREITEMSTRUCT` structure.  \n  \n### Remarks  \n By default, this member function does nothing. If you create an owner-draw list box with the **LBS_SORT** style, you must override this member function to assist the framework in sorting new items added to the list box.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#5](../../mfc/codesnippet/cpp/clistbox-class_4.cpp)]  \n  \n##  <a name=\"clistbox__create\"></a>  CListBox::Create  \n Creates the Windows list box and attaches it to the `CListBox` object.  \n  \n```  \nvirtual BOOL Create(\n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    UINT nID);\n```  \n  \n### Parameters  \n `dwStyle`  \n Specifies the style of the list box. Apply any combination of [list-box styles](../../mfc/reference/list-box-styles.md) to the box.  \n  \n `rect`  \n Specifies the list-box size and position. Can be either a `CRect` object or a `RECT` structure.  \n  \n `pParentWnd`  \n Specifies the list box's parent window (usually a `CDialog` object). It must not be **NULL**.  \n  \n `nID`  \n Specifies the list box's control ID.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n You construct a `CListBox` object in two steps. First, call the constructor and then call **Create**, which initializes the Windows list box and attaches it to the `CListBox` object.  \n  \n When **Create** executes, Windows sends the [WM_NCCREATE](../../mfc/reference/cwnd-class.md#cwnd__onnccreate), [WM_CREATE](../../mfc/reference/cwnd-class.md#cwnd__oncreate), [WM_NCCALCSIZE](../../mfc/reference/cwnd-class.md#cwnd__onnccalcsize), and [WM_GETMINMAXINFO](../../mfc/reference/cwnd-class.md#cwnd__ongetminmaxinfo) messages to the list-box control.  \n  \n These messages are handled by default by the [OnNcCreate](../../mfc/reference/cwnd-class.md#cwnd__onnccreate), [OnCreate](../../mfc/reference/cwnd-class.md#cwnd__oncreate), [OnNcCalcSize](../../mfc/reference/cwnd-class.md#cwnd__onnccalcsize), and [OnGetMinMaxInfo](../../mfc/reference/cwnd-class.md#cwnd__ongetminmaxinfo) member functions in the `CWnd` base class. To extend the default message handling, derive a class from `CListBox`, add a message map to the new class, and override the preceding message-handler member functions. Override `OnCreate`, for example, to perform needed initialization for a new class.  \n  \n Apply the following [window styles](../../mfc/reference/window-styles.md) to a list-box control.  \n  \n- **WS_CHILD** Always  \n  \n- **WS_VISIBLE** Usually  \n  \n- **WS_DISABLED** Rarely  \n  \n- **WS_VSCROLL** To add a vertical scroll bar  \n  \n- **WS_HSCROLL** To add a horizontal scroll bar  \n  \n- **WS_GROUP** To group controls  \n  \n- **WS_TABSTOP** To allow tabbing to this control  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#2](../../mfc/codesnippet/cpp/clistbox-class_5.cpp)]  \n  \n##  <a name=\"clistbox__deleteitem\"></a>  CListBox::DeleteItem  \n Called by the framework when the user deletes an item from an owner-draw `CListBox` object or destroys the list box.  \n  \n```  \nvirtual void DeleteItem(LPDELETEITEMSTRUCT lpDeleteItemStruct);\n```  \n  \n### Parameters  \n `lpDeleteItemStruct`  \n A long pointer to a Windows [DELETEITEMSTRUCT](../../mfc/reference/deleteitemstruct-structure.md) structure that contains information about the deleted item.  \n  \n### Remarks  \n The default implementation of this function does nothing. Override this function to redraw an owner-draw list box as needed.  \n  \n See [CWnd::OnDeleteItem](../../mfc/reference/cwnd-class.md#cwnd__ondeleteitem) for a description of the `DELETEITEMSTRUCT` structure.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#6](../../mfc/codesnippet/cpp/clistbox-class_6.cpp)]  \n  \n##  <a name=\"clistbox__deletestring\"></a>  CListBox::DeleteString  \n Deletes the item in position `nIndex` from the list box.  \n  \n```  \nint DeleteString(UINT nIndex);\n```  \n  \n### Parameters  \n `nIndex`  \n Specifies the zero-based index of the string to be deleted.  \n  \n### Return Value  \n A count of the strings remaining in the list. The return value is **LB_ERR** if `nIndex` specifies an index greater than the number of items in the list.  \n  \n### Remarks  \n All items following `nIndex` now move down one position. For example, if a list box contains two items, deleting the first item will cause the remaining item to now be in the first position. `nIndex`=0 for the item in the first position.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#7](../../mfc/codesnippet/cpp/clistbox-class_7.cpp)]  \n  \n##  <a name=\"clistbox__dir\"></a>  CListBox::Dir  \n Adds a list of filenames, drives, or both to a list box.  \n  \n```  \nint Dir(\n    UINT attr,  \n    LPCTSTR lpszWildCard);\n```  \n  \n### Parameters  \n `attr`  \n Can be any combination of the `enum` values described in **CFile::GetStatu**[s](../../mfc/reference/cfile-class.md#cfile__getstatus), or any combination of the following values:  \n  \n|Value|Meaning|  \n|-----------|-------------|  \n|0x0000|File can be read from or written to.|  \n|0x0001|File can be read from but not written to.|  \n|0x0002|File is hidden and does not appear in a directory listing.|  \n|0x0004|File is a system file.|  \n|0x0010|The name specified by `lpszWildCard` specifies a directory.|  \n|0x0020|File has been archived.|  \n|0x4000|Include all drives that match the name specified by `lpszWildCard`.|  \n|0x8000|Exclusive flag. If the exclusive flag is set, only files of the specified type are listed. Otherwise, files of the specified type are listed in addition to \"normal\" files.|  \n  \n `lpszWildCard`  \n Points to a file-specification string. The string can contain wildcards (for example, *.\\*).  \n  \n### Return Value  \n The zero-based index of the last filename added to the list. The return value is **LB_ERR** if an error occurs; the return value is **LB_ERRSPACE** if insufficient space is available to store the new strings.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#8](../../mfc/codesnippet/cpp/clistbox-class_8.cpp)]  \n  \n##  <a name=\"clistbox__drawitem\"></a>  CListBox::DrawItem  \n Called by the framework when a visual aspect of an owner-draw list box changes.  \n  \n```  \nvirtual void DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct);\n```  \n  \n### Parameters  \n `lpDrawItemStruct`  \n A long pointer to a [DRAWITEMSTRUCT](../../mfc/reference/drawitemstruct-structure.md) structure that contains information about the type of drawing required.  \n  \n### Remarks  \n The **itemAction** and **itemState** members of the `DRAWITEMSTRUCT` structure define the drawing action that is to be performed.  \n  \n By default, this member function does nothing. Override this member function to implement drawing for an owner-draw `CListBox` object. The application should restore all graphics device interface (GDI) objects selected for the display context supplied in `lpDrawItemStruct` before this member function terminates.  \n  \n See [CWnd::OnDrawItem](../../mfc/reference/cwnd-class.md#cwnd__ondrawitem) for a description of the `DRAWITEMSTRUCT` structure.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#9](../../mfc/codesnippet/cpp/clistbox-class_9.cpp)]  \n  \n##  <a name=\"clistbox__findstring\"></a>  CListBox::FindString  \n Finds the first string in a list box that contains the specified prefix without changing the list-box selection.  \n  \n```  \nint FindString(\n    int nStartAfter,  \n    LPCTSTR lpszItem) const;\n\n \n```  \n  \n### Parameters  \n `nStartAfter`  \n Contains the zero-based index of the item before the first item to be searched. When the search reaches the bottom of the list box, it continues from the top of the list box back to the item specified by `nStartAfter`. If `nStartAfter` is –1, the entire list box is searched from the beginning.  \n  \n `lpszItem`  \n Points to the null-terminated string that contains the prefix to search for. The search is case independent, so this string may contain any combination of uppercase and lowercase letters.  \n  \n### Return Value  \n The zero-based index of the matching item, or **LB_ERR** if the search was unsuccessful.  \n  \n### Remarks  \n Use the [SelectString](#clistbox__selectstring) member function to both find and select a string.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#10](../../mfc/codesnippet/cpp/clistbox-class_10.cpp)]  \n  \n##  <a name=\"clistbox__findstringexact\"></a>  CListBox::FindStringExact  \n Finds the first list-box string that matches the string specified in `lpszFind`.  \n  \n```  \nint FindStringExact(\n    int nIndexStart,  \n    LPCTSTR lpszFind) const;\n\n \n```  \n  \n### Parameters  \n `nIndexStart`  \n Specifies the zero-based index of the item before the first item to be searched. When the search reaches the bottom of the list box, it continues from the top of the list box back to the item specified by `nIndexStart`. If `nIndexStart` is –1, the entire list box is searched from the beginning.  \n  \n `lpszFind`  \n Points to the null-terminated string to search for. This string can contain a complete filename, including the extension. The search is not case sensitive, so the string can contain any combination of uppercase and lowercase letters.  \n  \n### Return Value  \n The index of the matching item, or **LB_ERR** if the search was unsuccessful.  \n  \n### Remarks  \n If the list box was created with an owner-draw style but without the [LBS_HASSTRINGS](../../mfc/reference/list-box-styles.md) style, the `FindStringExact` member function attempts to match the doubleword value against the value of `lpszFind`.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#11](../../mfc/codesnippet/cpp/clistbox-class_11.cpp)]  \n  \n##  <a name=\"clistbox__getanchorindex\"></a>  CListBox::GetAnchorIndex  \n Retrieves the zero-based index of the current anchor item in the list box.  \n  \n```  \nint GetAnchorIndex() const;\n\n \n```  \n  \n### Return Value  \n The index of the current anchor item, if successful; otherwise **LB_ERR**.  \n  \n### Remarks  \n In a multiple-selection list box, the anchor item is the first or last item in a block of contiguous selected items.  \n  \n### Example  \n  See the example for [CListBox::SetAnchorIndex](#clistbox__setanchorindex).  \n  \n##  <a name=\"clistbox__getcaretindex\"></a>  CListBox::GetCaretIndex  \n Determines the index of the item that has the focus rectangle in a multiple-selection list box.  \n  \n```  \nint GetCaretIndex() const;\n\n \n```  \n  \n### Return Value  \n The zero-based index of the item that has the focus rectangle in a list box. If the list box is a single-selection list box, the return value is the index of the item that is selected, if any.  \n  \n### Remarks  \n The item may or may not be selected.  \n  \n### Example  \n  See the example for [CListBox::SetCaretIndex](#clistbox__setcaretindex).  \n  \n##  <a name=\"clistbox__getcount\"></a>  CListBox::GetCount  \n Retrieves the number of items in a list box.  \n  \n```  \nint GetCount() const;\n\n \n```  \n  \n### Return Value  \n The number of items in the list box, or **LB_ERR** if an error occurs.  \n  \n### Remarks  \n The returned count is one greater than the index value of the last item (the index is zero-based).  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#12](../../mfc/codesnippet/cpp/clistbox-class_12.cpp)]  \n  \n##  <a name=\"clistbox__getcursel\"></a>  CListBox::GetCurSel  \n Retrieves the zero-based index of the currently selected item, if any, in a single-selection list box.  \n  \n```  \nint GetCurSel() const;\n\n \n```  \n  \n### Return Value  \n The zero-based index of the currently selected item if it is a single-selection list box. It is `LB_ERR` if no item is currently selected.  \n  \n In a multiple-selection list box, the index of the item that has the focus.  \n  \n### Remarks  \n Do not call `GetCurSel` for a multiple-selection list box. Use [CListBox::GetSelItems](#clistbox__getselitems) instead.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#13](../../mfc/codesnippet/cpp/clistbox-class_13.cpp)]  \n  \n##  <a name=\"clistbox__gethorizontalextent\"></a>  CListBox::GetHorizontalExtent  \n Retrieves from the list box the width in pixels by which it can be scrolled horizontally.  \n  \n```  \nint GetHorizontalExtent() const;\n\n \n```  \n  \n### Return Value  \n The scrollable width of the list box, in pixels.  \n  \n### Remarks  \n This is applicable only if the list box has a horizontal scroll bar.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#14](../../mfc/codesnippet/cpp/clistbox-class_14.cpp)]  \n  \n##  <a name=\"clistbox__getitemdata\"></a>  CListBox::GetItemData  \n Retrieves the application-supplied doubleword value associated with the specified list-box item.  \n  \n```  \nDWORD_PTR GetItemData(int nIndex) const;\n\n \n```  \n  \n### Parameters  \n `nIndex`  \n Specifies the zero-based index of the item in the list box.  \n  \n### Return Value  \n The 32-bit value associated with the item, or **LB_ERR** if an error occurs.  \n  \n### Remarks  \n The doubleword value was the `dwItemData` parameter of a [SetItemData](#clistbox__setitemdata) call.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#15](../../mfc/codesnippet/cpp/clistbox-class_15.cpp)]  \n  \n##  <a name=\"clistbox__getitemdataptr\"></a>  CListBox::GetItemDataPtr  \n Retrieves the application-supplied 32-bit value associated with the specified list-box item as a pointer ( **void\\***).  \n  \n```  \nvoid* GetItemDataPtr(int nIndex) const;\n\n \n```  \n  \n### Parameters  \n `nIndex`  \n Specifies the zero-based index of the item in the list box.  \n  \n### Return Value  \n Retrieves a pointer, or –1 if an error occurs.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#16](../../mfc/codesnippet/cpp/clistbox-class_16.cpp)]  \n  \n##  <a name=\"clistbox__getitemheight\"></a>  CListBox::GetItemHeight  \n Determines the height of items in a list box.  \n  \n```  \nint GetItemHeight(int nIndex) const;\n\n \n```  \n  \n### Parameters  \n `nIndex`  \n Specifies the zero-based index of the item in the list box. This parameter is used only if the list box has the **LBS_OWNERDRAWVARIABLE** style; otherwise, it should be set to 0.  \n  \n### Return Value  \n The height, in pixels, of the items in the list box. If the list box has the [LBS_OWNERDRAWVARIABLE](../../mfc/reference/list-box-styles.md) style, the return value is the height of the item specified by `nIndex`. If an error occurs, the return value is **LB_ERR**.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#17](../../mfc/codesnippet/cpp/clistbox-class_17.cpp)]  \n  \n##  <a name=\"clistbox__getitemrect\"></a>  CListBox::GetItemRect  \n Retrieves the dimensions of the rectangle that bounds a list-box item as it is currently displayed in the list-box window.  \n  \n```  \nint GetItemRect(\n    int nIndex,  \n    LPRECT lpRect) const;\n\n \n```  \n  \n### Parameters  \n `nIndex`  \n Specifies the zero-based index of the item.  \n  \n `lpRect`  \n Specifies a long pointer to a [RECT structure](../../mfc/reference/rect-structure1.md) that receives the list-box client coordinates of the item.  \n  \n### Return Value  \n **LB_ERR** if an error occurs.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#18](../../mfc/codesnippet/cpp/clistbox-class_18.cpp)]  \n  \n##  <a name=\"clistbox__getlistboxinfo\"></a>  CListBox::GetListBoxInfo  \n Retrieves the number of items per column.  \n  \n```  \nDWORD GetListBoxInfo() const;\n\n \n```  \n  \n### Return Value  \n Number of items per column of the `CListBox` object.  \n  \n### Remarks  \n This member function emulates the functionality of the [LB_GETLISTBOXINFO](http://msdn.microsoft.com/library/windows/desktop/bb775208) message, as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"clistbox__getlocale\"></a>  CListBox::GetLocale  \n Retrieves the locale used by the list box.  \n  \n```  \nLCID GetLocale() const;\n\n \n```  \n  \n### Return Value  \n The locale identifier (LCID) value for the strings in the list box.  \n  \n### Remarks  \n The locale is used, for example, to determine the sort order of the strings in a sorted list box.  \n  \n### Example  \n  See the example for [CListBox::SetLocale](#clistbox__setlocale).  \n  \n##  <a name=\"clistbox__getsel\"></a>  CListBox::GetSel  \n Retrieves the selection state of an item.  \n  \n```  \nint GetSel(int nIndex) const;\n\n \n```  \n  \n### Parameters  \n `nIndex`  \n Specifies the zero-based index of the item.  \n  \n### Return Value  \n A positive number if the specified item is selected; otherwise, it is 0. The return value is `LB_ERR` if an error occurs.  \n  \n### Remarks  \n This member function works with both single- and multiple-selection list boxes.  \n  \n To retrieve the index of the currently-selected list box item, use [CListBox::GetCurSel](#clistbox__getcursel).  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#19](../../mfc/codesnippet/cpp/clistbox-class_19.cpp)]  \n  \n##  <a name=\"clistbox__getselcount\"></a>  CListBox::GetSelCount  \n Retrieves the total number of selected items in a multiple-selection list box.  \n  \n```  \nint GetSelCount() const;\n\n \n```  \n  \n### Return Value  \n The count of selected items in a list box. If the list box is a single-selection list box, the return value is **LB_ERR**.  \n  \n### Example  \n  See the example for [CListBox::GetSelItems](#clistbox__getselitems).  \n  \n##  <a name=\"clistbox__getselitems\"></a>  CListBox::GetSelItems  \n Fills a buffer with an array of integers that specifies the item numbers of selected items in a multiple-selection list box.  \n  \n```  \nint GetSelItems(\n    int nMaxItems,  \n    LPINT rgIndex) const;\n\n \n```  \n  \n### Parameters  \n `nMaxItems`  \n Specifies the maximum number of selected items whose item numbers are to be placed in the buffer.  \n  \n `rgIndex`  \n Specifies a pointer to a buffer large enough for the number of integers specified by `nMaxItems`.  \n  \n### Return Value  \n The actual number of items placed in the buffer. If the list box is a single-selection list box, the return value is `LB_ERR`.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#20](../../mfc/codesnippet/cpp/clistbox-class_20.cpp)]  \n  \n##  <a name=\"clistbox__gettext\"></a>  CListBox::GetText  \n Gets a string from a list box.  \n  \n```  \nint GetText(\n    int nIndex,  \n    LPTSTR lpszBuffer) const;\n\n \n \nvoid GetText(\n    int nIndex,  \n    CString& rString) const;\n\n \n```  \n  \n### Parameters  \n `nIndex`  \n Specifies the zero-based index of the string to be retrieved.  \n  \n `lpszBuffer`  \n Points to the buffer that receives the string. The buffer must have sufficient space for the string and a terminating null character. The size of the string can be determined ahead of time by calling the `GetTextLen` member function.  \n  \n `rString`  \n A reference to a `CString` object.  \n  \n### Return Value  \n The length (in bytes) of the string, excluding the terminating null character. If `nIndex` does not specify a valid index, the return value is **LB_ERR**.  \n  \n### Remarks  \n The second form of this member function fills a `CString` object with the string text.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#21](../../mfc/codesnippet/cpp/clistbox-class_21.cpp)]  \n  \n##  <a name=\"clistbox__gettextlen\"></a>  CListBox::GetTextLen  \n Gets the length of a string in a list-box item.  \n  \n```  \nint GetTextLen(int nIndex) const;\n\n \n```  \n  \n### Parameters  \n `nIndex`  \n Specifies the zero-based index of the string.  \n  \n### Return Value  \n The length of the string in characters, excluding the terminating null character. If `nIndex` does not specify a valid index, the return value is **LB_ERR**.  \n  \n### Example  \n  See the example for [CListBox::GetText](#clistbox__gettext).  \n  \n##  <a name=\"clistbox__gettopindex\"></a>  CListBox::GetTopIndex  \n Retrieves the zero-based index of the first visible item in a list box.  \n  \n```  \nint GetTopIndex() const;\n\n \n```  \n  \n### Return Value  \n The zero-based index of the first visible item in a list box if successful, **LB_ERR** otherwise.  \n  \n### Remarks  \n Initially, item 0 is at the top of the list box, but if the list box is scrolled, another item may be at the top.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#22](../../mfc/codesnippet/cpp/clistbox-class_22.cpp)]  \n  \n##  <a name=\"clistbox__initstorage\"></a>  CListBox::InitStorage  \n Allocates memory for storing list-box items.  \n  \n```  \nint InitStorage(\n    int nItems,  \n    UINT nBytes);\n```  \n  \n### Parameters  \n `nItems`  \n Specifies the number of items to add.  \n  \n `nBytes`  \n Specifies the amount of memory, in bytes, to allocate for item strings.  \n  \n### Return Value  \n If successful, the maximum number of items that the list box can store before a memory reallocation is needed, otherwise **LB_ERRSPACE**, meaning not enough memory is available.  \n  \n### Remarks  \n Call this function before adding a large number of items to a `CListBox`.  \n  \n This function helps speed up the initialization of list boxes that have a large number of items (more than 100). It preallocates the specified amount of memory so that subsequent [AddString](#clistbox__addstring), [InsertString](#clistbox__insertstring), and [Dir](#clistbox__dir) functions take the shortest possible time. You can use estimates for the parameters. If you overestimate, some extra memory is allocated; if you underestimate, the normal allocation is used for items that exceed the preallocated amount.  \n  \n Windows 95/98 only: The `nItems` parameter is limited to 16-bit values. This means list boxes cannot contain more than 32,767 items. Although the number of items is restricted, the total size of the items in a list box is limited only by available memory.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#23](../../mfc/codesnippet/cpp/clistbox-class_23.cpp)]  \n  \n##  <a name=\"clistbox__insertstring\"></a>  CListBox::InsertString  \n Inserts a string into the list box.  \n  \n```  \nint InsertString(\n    int nIndex,  \n    LPCTSTR lpszItem);\n```  \n  \n### Parameters  \n `nIndex`  \n Specifies the zero-based index of the position to insert the string. If this parameter is –1, the string is added to the end of the list.  \n  \n `lpszItem`  \n Points to the null-terminated string that is to be inserted.  \n  \n### Return Value  \n The zero-based index of the position at which the string was inserted. The return value is **LB_ERR** if an error occurs; the return value is **LB_ERRSPACE** if insufficient space is available to store the new string.  \n  \n### Remarks  \n Unlike the [AddString](#clistbox__addstring) member function, `InsertString` does not cause a list with the [LBS_SORT](../../mfc/reference/list-box-styles.md) style to be sorted.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#24](../../mfc/codesnippet/cpp/clistbox-class_24.cpp)]  \n  \n##  <a name=\"clistbox__itemfrompoint\"></a>  CListBox::ItemFromPoint  \n Determines the list-box item nearest the point specified in `pt`.  \n  \n```  \nUINT ItemFromPoint(\n    CPoint pt,  \n    BOOL& bOutside) const;\n\n \n```  \n  \n### Parameters  \n `pt`  \n Point for which to find the nearest item, specified relative to the upper-left corner of the client area of the list box.  \n  \n `bOutside`  \n Reference to a `BOOL` variable which will be set to `TRUE` if `pt` is outside the client area of the nearest list box item, `FALSE` if `pt` is inside the client area of the nearest list box item.  \n  \n### Return Value  \n The index of the nearest item to the point specified in `pt`.  \n  \n### Remarks  \n You could use this function to determine which list-box item the mouse cursor moves over.  \n  \n### Example  \n  See the example for [CListBox::SetAnchorIndex](#clistbox__setanchorindex).  \n  \n##  <a name=\"clistbox__measureitem\"></a>  CListBox::MeasureItem  \n Called by the framework when a list box with an owner-draw style is created.  \n  \n```  \nvirtual void MeasureItem(LPMEASUREITEMSTRUCT lpMeasureItemStruct);\n```  \n  \n### Parameters  \n `lpMeasureItemStruct`  \n A long pointer to a [MEASUREITEMSTRUCT](../../mfc/reference/measureitemstruct-structure.md) structure.  \n  \n### Remarks  \n By default, this member function does nothing. Override this member function and fill in the `MEASUREITEMSTRUCT` structure to inform Windows of the list-box dimensions. If the list box is created with the [LBS_OWNERDRAWVARIABLE](../../mfc/reference/list-box-styles.md) style, the framework calls this member function for each item in the list box. Otherwise, this member is called only once.  \n  \n For further information about using the [LBS_OWNERDRAWFIXED](../../mfc/reference/list-box-styles.md) style in an owner-draw list box created with the `SubclassDlgItem` member function of `CWnd`, see the discussion in [Technical Note 14](../../mfc/tn014-custom-controls.md).  \n  \n See [CWnd::OnMeasureItem](../../mfc/reference/cwnd-class.md#cwnd__onmeasureitem) for a description of the `MEASUREITEMSTRUCT` structure **.**  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#25](../../mfc/codesnippet/cpp/clistbox-class_25.cpp)]  \n  \n##  <a name=\"clistbox__resetcontent\"></a>  CListBox::ResetContent  \n Removes all items from a list box.  \n  \n```  \nvoid ResetContent();\n```  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#26](../../mfc/codesnippet/cpp/clistbox-class_26.cpp)]  \n  \n##  <a name=\"clistbox__selectstring\"></a>  CListBox::SelectString  \n Searches for a list-box item that matches the specified string, and if a matching item is found, it selects the item.  \n  \n```  \nint SelectString(\n    int nStartAfter,  \n    LPCTSTR lpszItem);\n```  \n  \n### Parameters  \n `nStartAfter`  \n Contains the zero-based index of the item before the first item to be searched. When the search reaches the bottom of the list box, it continues from the top of the list box back to the item specified by `nStartAfter`. If `nStartAfter` is –1, the entire list box is searched from the beginning.  \n  \n `lpszItem`  \n Points to the null-terminated string that contains the prefix to search for. The search is case independent, so this string may contain any combination of uppercase and lowercase letters.  \n  \n### Return Value  \n The index of the selected item if the search was successful. If the search was unsuccessful, the return value is **LB_ERR** and the current selection is not changed.  \n  \n### Remarks  \n The list box is scrolled, if necessary, to bring the selected item into view.  \n  \n This member function cannot be used with a list box that has the [LBS_MULTIPLESEL](../../mfc/reference/list-box-styles.md) style.  \n  \n An item is selected only if its initial characters (from the starting point) match the characters in the string specified by `lpszItem`.  \n  \n Use the `FindString` member function to find a string without selecting the item.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#27](../../mfc/codesnippet/cpp/clistbox-class_27.cpp)]  \n  \n##  <a name=\"clistbox__selitemrange\"></a>  CListBox::SelItemRange  \n Selects multiple consecutive items in a multiple-selection list box.  \n  \n```  \nint SelItemRange(\n    BOOL bSelect,  \n    int nFirstItem,  \n    int nLastItem);\n```  \n  \n### Parameters  \n `bSelect`  \n Specifies how to set the selection. If `bSelect` is **TRUE**, the string is selected and highlighted; if **FALSE**, the highlight is removed and the string is no longer selected.  \n  \n `nFirstItem`  \n Specifies the zero-based index of the first item to set.  \n  \n `nLastItem`  \n Specifies the zero-based index of the last item to set.  \n  \n### Return Value  \n **LB_ERR** if an error occurs.  \n  \n### Remarks  \n Use this member function only with multiple-selection list boxes. If you need to select only one item in a multiple-selection list box — that is, if `nFirstItem` is equal to `nLastItem` — call the [SetSel](#clistbox__setsel) member function instead.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#28](../../mfc/codesnippet/cpp/clistbox-class_28.cpp)]  \n  \n##  <a name=\"clistbox__setanchorindex\"></a>  CListBox::SetAnchorIndex  \n Sets the anchor in a multiple-selection list box to begin an extended selection.  \n  \n```  \nvoid SetAnchorIndex(int nIndex);\n```  \n  \n### Parameters  \n `nIndex`  \n Specifies the zero-based index of the list-box item that will be the anchor.  \n  \n### Remarks  \n In a multiple-selection list box, the anchor item is the first or last item in a block of contiguous selected items.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#29](../../mfc/codesnippet/cpp/clistbox-class_29.cpp)]  \n  \n##  <a name=\"clistbox__setcaretindex\"></a>  CListBox::SetCaretIndex  \n Sets the focus rectangle to the item at the specified index in a multiple-selection list box.  \n  \n```  \nint SetCaretIndex(\n    int nIndex,  \n    BOOL bScroll = TRUE);\n```  \n  \n### Parameters  \n `nIndex`  \n Specifies the zero-based index of the item to receive the focus rectangle in the list box.  \n  \n *bScroll*  \n If this value is 0, the item is scrolled until it is fully visible. If this value is not 0, the item is scrolled until it is at least partially visible.  \n  \n### Return Value  \n **LB_ERR** if an error occurs.  \n  \n### Remarks  \n If the item is not visible, it is scrolled into view.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#30](../../mfc/codesnippet/cpp/clistbox-class_30.cpp)]  \n  \n##  <a name=\"clistbox__setcolumnwidth\"></a>  CListBox::SetColumnWidth  \n Sets the width in pixels of all columns in a multicolumn list box (created with the [LBS_MULTICOLUMN](../../mfc/reference/list-box-styles.md) style).  \n  \n```  \nvoid SetColumnWidth(int cxWidth);\n```  \n  \n### Parameters  \n `cxWidth`  \n Specifies the width in pixels of all columns.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#31](../../mfc/codesnippet/cpp/clistbox-class_31.cpp)]  \n  \n##  <a name=\"clistbox__setcursel\"></a>  CListBox::SetCurSel  \n Selects a string and scrolls it into view, if necessary.  \n  \n```  \nint SetCurSel(int nSelect);\n```  \n  \n### Parameters  \n `nSelect`  \n Specifies the zero-based index of the string to be selected. If `nSelect` is –1, the list box is set to have no selection.  \n  \n### Return Value  \n `LB_ERR` if an error occurs.  \n  \n### Remarks  \n When the new string is selected, the list box removes the highlight from the previously selected string.  \n  \n Use this member function only with single-selection list boxes.  \n  \n To set or remove a selection in a multiple-selection list box, use [CListBox::SetSel](#clistbox__setsel).  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#32](../../mfc/codesnippet/cpp/clistbox-class_32.cpp)]  \n  \n##  <a name=\"clistbox__sethorizontalextent\"></a>  CListBox::SetHorizontalExtent  \n Sets the width, in pixels, by which a list box can be scrolled horizontally.  \n  \n```  \nvoid SetHorizontalExtent(int cxExtent);\n```  \n  \n### Parameters  \n *cxExtent*  \n Specifies the number of pixels by which the list box can be scrolled horizontally.  \n  \n### Remarks  \n If the size of the list box is smaller than this value, the horizontal scroll bar will horizontally scroll items in the list box. If the list box is as large or larger than this value, the horizontal scroll bar is hidden.  \n  \n To respond to a call to `SetHorizontalExtent`, the list box must have been defined with the [WS_HSCROLL](../../mfc/reference/window-styles.md) style.  \n  \n This member function is not useful for multicolumn list boxes. For multicolumn list boxes, call the `SetColumnWidth` member function.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#33](../../mfc/codesnippet/cpp/clistbox-class_33.cpp)]  \n  \n##  <a name=\"clistbox__setitemdata\"></a>  CListBox::SetItemData  \n Sets a 32-bit value associated with the specified item in a list box.  \n  \n```  \nint SetItemData(\n    int nIndex,  \n    DWORD_PTR dwItemData);\n```  \n  \n### Parameters  \n `nIndex`  \n Specifies the zero-based index of the item.  \n  \n `dwItemData`  \n Specifies the value to be associated with the item.  \n  \n### Return Value  \n **LB_ERR** if an error occurs.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#34](../../mfc/codesnippet/cpp/clistbox-class_34.cpp)]  \n  \n##  <a name=\"clistbox__setitemdataptr\"></a>  CListBox::SetItemDataPtr  \n Sets the 32-bit value associated with the specified item in a list box to be the specified pointer ( **void\\***).  \n  \n```  \nint SetItemDataPtr(\n    int nIndex,  \n    void* pData);\n```  \n  \n### Parameters  \n `nIndex`  \n Specifies the zero-based index of the item.  \n  \n `pData`  \n Specifies the pointer to be associated with the item.  \n  \n### Return Value  \n **LB_ERR** if an error occurs.  \n  \n### Remarks  \n This pointer remains valid for the life of the list box, even though the item's relative position within the list box might change as items are added or removed. Hence, the item's index within the box can change, but the pointer remains reliable.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#35](../../mfc/codesnippet/cpp/clistbox-class_35.cpp)]  \n  \n##  <a name=\"clistbox__setitemheight\"></a>  CListBox::SetItemHeight  \n Sets the height of items in a list box.  \n  \n```  \nint SetItemHeight(\n    int nIndex,  \n    UINT cyItemHeight);\n```  \n  \n### Parameters  \n `nIndex`  \n Specifies the zero-based index of the item in the list box. This parameter is used only if the list box has the **LBS_OWNERDRAWVARIABLE** style; otherwise, it should be set to 0.  \n  \n `cyItemHeight`  \n Specifies the height, in pixels, of the item.  \n  \n### Return Value  \n **LB_ERR** if the index or height is invalid.  \n  \n### Remarks  \n If the list box has the [LBS_OWNERDRAWVARIABLE](../../mfc/reference/list-box-styles.md) style, this function sets the height of the item specified by `nIndex`. Otherwise, this function sets the height of all items in the list box.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#36](../../mfc/codesnippet/cpp/clistbox-class_36.cpp)]  \n  \n##  <a name=\"clistbox__setlocale\"></a>  CListBox::SetLocale  \n Sets the locale identifier for this list box.  \n  \n```  \nLCID SetLocale(LCID nNewLocale);\n```  \n  \n### Parameters  \n `nNewLocale`  \n The new locale identifier (LCID) value to set for the list box.  \n  \n### Return Value  \n The previous locale identifier (LCID) value for this list box.  \n  \n### Remarks  \n If **SetLocale** is not called, the default locale is obtained from the system. This system default locale can be modified by using Control Panel's Regional (or International) application.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#37](../../mfc/codesnippet/cpp/clistbox-class_37.cpp)]  \n  \n##  <a name=\"clistbox__setsel\"></a>  CListBox::SetSel  \n Selects a string in a multiple-selection list box.  \n  \n```  \nint SetSel(\n    int nIndex,  \n    BOOL bSelect = TRUE);\n```  \n  \n### Parameters  \n `nIndex`  \n Contains the zero-based index of the string to be set. If –1, the selection is added to or removed from all strings, depending on the value of `bSelect`.  \n  \n `bSelect`  \n Specifies how to set the selection. If `bSelect` is `TRUE`, the string is selected and highlighted; if `FALSE`, the highlight is removed and the string is no longer selected. The specified string is selected and highlighted by default.  \n  \n### Return Value  \n `LB_ERR` if an error occurs.  \n  \n### Remarks  \n Use this member function only with multiple-selection list boxes.  \n  \n To select an item from a single-selection list box, use [CListBox::SetCurSel](#clistbox__setcursel).  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#38](../../mfc/codesnippet/cpp/clistbox-class_38.cpp)]  \n  \n##  <a name=\"clistbox__settabstops\"></a>  CListBox::SetTabStops  \n Sets the tab-stop positions in a list box.  \n  \n```  \nvoid SetTabStops();\n\n \nBOOL SetTabStops(\n    const int& cxEachStop);\n\n \nBOOL SetTabStops(\n    int nTabStops,  \n    LPINT rgTabStops);\n```  \n  \n### Parameters  \n `cxEachStop`  \n Tab stops are set at every `cxEachStop` dialog units. See *rgTabStops* for a description of a dialog unit.  \n  \n `nTabStops`  \n Specifies the number of tab stops to have in the list box.  \n  \n `rgTabStops`  \n Points to the first member of an array of integers containing the tab-stop positions in dialog units. A dialog unit is a horizontal or vertical distance. One horizontal dialog unit is equal to one-fourth of the current dialog base width unit, and one vertical dialog unit is equal to one-eighth of the current dialog base height unit. The dialog base units are computed based on the height and width of the current system font. The **GetDialogBaseUnits** Windows function returns the current dialog base units in pixels. The tab stops must be sorted in increasing order; back tabs are not allowed.  \n  \n### Return Value  \n Nonzero if all the tabs were set; otherwise 0.  \n  \n### Remarks  \n To set tab stops to the default size of 2 dialog units, call the parameterless version of this member function. To set tab stops to a size other than 2, call the version with the `cxEachStop` argument.  \n  \n To set tab stops to an array of sizes, use the version with the `rgTabStops` and `nTabStops` arguments. A tab stop will be set for each value in `rgTabStops`, up to the number specified by `nTabStops`.  \n  \n To respond to a call to the `SetTabStops` member function, the list box must have been created with the [LBS_USETABSTOPS](../../mfc/reference/list-box-styles.md) style.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#39](../../mfc/codesnippet/cpp/clistbox-class_39.cpp)]  \n  \n##  <a name=\"clistbox__settopindex\"></a>  CListBox::SetTopIndex  \n Ensures that a particular list-box item is visible.  \n  \n```  \nint SetTopIndex(int nIndex);\n```  \n  \n### Parameters  \n `nIndex`  \n Specifies the zero-based index of the list-box item.  \n  \n### Return Value  \n Zero if successful, or **LB_ERR** if an error occurs.  \n  \n### Remarks  \n The system scrolls the list box until either the item specified by `nIndex` appears at the top of the list box or the maximum scroll range has been reached.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#40](../../mfc/codesnippet/cpp/clistbox-class_40.cpp)]  \n  \n##  <a name=\"clistbox__vkeytoitem\"></a>  CListBox::VKeyToItem  \n Called by the framework when the list box's parent window receives a `WM_VKEYTOITEM` message from the list box.  \n  \n```  \nvirtual int VKeyToItem(\n    UINT nKey,  \n    UINT nIndex);\n```  \n  \n### Parameters  \n `nKey`  \n The virtual key code of the key the user pressed. For a list of of standard virtual key codes, see Winuser.h  \n  \n `nIndex`  \n The current position of the list-box caret.  \n  \n### Return Value  \n Returns – 2 for no further action, – 1 for default action, or a nonnegative number to specify an index of a list box item on which to perform the default action for the keystroke.  \n  \n### Remarks  \n The `WM_VKEYTOITEM` message is sent by the list box when it receives a `WM_KEYDOWN` message, but only if the list box meets both of the following:  \n  \n-   Has the [LBS_WANTKEYBOARDINPUT](../../mfc/reference/list-box-styles.md) style set.  \n  \n-   Has at least one item.  \n  \n You should never call this function yourself. Override this function to provide your own custom handling of keyboard messages.  \n  \n You must return a value to tell the framework what action your override performed. A return value of – 2 indicates that the application handled all aspects of selecting the item and requires no further action by the list box. Before returning – 2, you could set the selection or move the caret or both. To set the selection, use [SetCurSel](#clistbox__setcursel) or [SetSel](#clistbox__setsel). To move the caret, use [SetCaretIndex](#clistbox__setcaretindex).  \n  \n A return value of – 1 indicates that the list box should perform the default action in response to the keystroke.The default implementation returns – 1.  \n  \n A return value of 0 or greater specifies the index of an item in the list box and indicates that the list box should perform the default action for the keystroke on the given item.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CListBox#41](../../mfc/codesnippet/cpp/clistbox-class_41.cpp)]  \n  \n## See Also  \n [MFC Sample CTRLTEST](../../visual-cpp-samples.md)   \n [CWnd Class](../../mfc/reference/cwnd-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CWnd Class](../../mfc/reference/cwnd-class.md)   \n [CButton Class](../../mfc/reference/cbutton-class.md)   \n [CComboBox Class](../../mfc/reference/ccombobox-class.md)   \n [CEdit Class](../../mfc/reference/cedit-class.md)   \n [CScrollBar Class](../../mfc/reference/cscrollbar-class.md)   \n [CStatic Class](../../mfc/reference/cstatic-class.md)\n"}