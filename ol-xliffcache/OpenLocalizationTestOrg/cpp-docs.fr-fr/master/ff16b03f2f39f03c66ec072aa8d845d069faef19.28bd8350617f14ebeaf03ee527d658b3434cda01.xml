{"nodes":[{"pos":[12,44],"content":"Event Sink Maps | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Event Sink Maps | Microsoft Docs","pos":[0,32]}]},{"content":"Event Sink Maps","pos":[608,623]},{"content":"When an embedded OLE control fires an event, the control's container receives the event using a mechanism, called an \"event sink map,\" supplied by MFC.","pos":[624,775]},{"content":"This event sink map designates handler functions for each specific event, as well as parameters of those events.","pos":[776,888]},{"content":"For more information on event sink maps, see the article <bpt id=\"p1\">[</bpt>ActiveX Control Containers<ept id=\"p1\">](../../mfc/activex-control-containers.md)</ept>.","pos":[889,1016],"source":" For more information on event sink maps, see the article [ActiveX Control Containers](../../mfc/activex-control-containers.md)."},{"content":"Event Sink Maps","pos":[1026,1041]},{"content":"BEGIN_EVENTSINK_MAP","pos":[1063,1082]},{"content":"Starts the definition of an event sink map.","pos":[1106,1149]},{"content":"DECLARE_EVENTSINK_MAP","pos":[1155,1176]},{"content":"Declares an event sink map.","pos":[1202,1229]},{"content":"END_EVENTSINK_MAP","pos":[1235,1252]},{"content":"Ends the definition of an event sink map.","pos":[1274,1315]},{"content":"ON_EVENT","pos":[1321,1329]},{"content":"Defines an event handler for a specific event.","pos":[1342,1388]},{"content":"ON_EVENT_RANGE","pos":[1394,1408]},{"content":"Defines an event handler for a specific event fired from a set of OLE controls.","pos":[1427,1506]},{"content":"ON_EVENT_REFLECT","pos":[1512,1528]},{"content":"Receives events fired by the control before they are handled by the control's container.","pos":[1549,1637]},{"content":"ON_PROPNOTIFY","pos":[1643,1656]},{"content":"Defines a handler for handling property notifications from an OLE control.","pos":[1674,1748]},{"content":"ON_PROPNOTIFY_RANGE","pos":[1754,1773]},{"content":"Defines a handler for handling property notifications from a set of OLE controls.","pos":[1797,1878]},{"content":"ON_PROPNOTIFY_REFLECT","pos":[1884,1905]},{"content":"Receives property notifications sent by the control before they are handled by the control's container.","pos":[1931,2034]},{"pos":[2081,2100],"content":"BEGIN_EVENTSINK_MAP"},{"content":"Begins the definition of your event sink map.","pos":[2104,2149]},{"content":"Parameters","pos":[2218,2228]},{"content":"Specifies the name of the control class whose event sink map this is.","pos":[2246,2315]},{"content":"Specifies the name of the base class of <ph id=\"ph1\">`theClass`</ph>.","pos":[2337,2388],"source":" Specifies the name of the base class of `theClass`."},{"content":"Remarks","pos":[2398,2405]},{"pos":[2409,2680],"content":"In the implementation (.cpp) file that defines the member functions for your class, start the event sink map with the <ph id=\"ph1\">`BEGIN_EVENTSINK_MAP`</ph> macro, then add macro entries for each event to be notified of, and complete the event sink map with the <ph id=\"ph2\">`END_EVENTSINK_MAP`</ph> macro.","source":"In the implementation (.cpp) file that defines the member functions for your class, start the event sink map with the `BEGIN_EVENTSINK_MAP` macro, then add macro entries for each event to be notified of, and complete the event sink map with the `END_EVENTSINK_MAP` macro."},{"pos":[2687,2841],"content":"For more information on event sink maps and OLE control containers, see the article <bpt id=\"p1\">[</bpt>ActiveX Control Containers<ept id=\"p1\">](../../mfc/activex-control-containers.md)</ept>.","source":"For more information on event sink maps and OLE control containers, see the article [ActiveX Control Containers](../../mfc/activex-control-containers.md)."},{"pos":[2889,2910],"content":"DECLARE_EVENTSINK_MAP"},{"content":"An OLE container can provide an event sink map to specify the events your container will be notified of.","pos":[2914,3018]},{"content":"Remarks","pos":[3071,3078]},{"content":"Use the <ph id=\"ph1\">`DECLARE_EVENTSINK_MAP`</ph> macro at the end of your class declaration.","pos":[3082,3157],"source":"Use the `DECLARE_EVENTSINK_MAP` macro at the end of your class declaration."},{"content":"Then, in the .CPP file that defines the member functions for the class, use the <ph id=\"ph1\">`BEGIN_EVENTSINK_MAP`</ph> macro, macro entries for each of the events to be notified of, and the <ph id=\"ph2\">`END_EVENTSINK_MAP`</ph> macro to declare the end of the event sink list.","pos":[3158,3399],"source":" Then, in the .CPP file that defines the member functions for the class, use the `BEGIN_EVENTSINK_MAP` macro, macro entries for each of the events to be notified of, and the `END_EVENTSINK_MAP` macro to declare the end of the event sink list."},{"pos":[3406,3533],"content":"For more information on event sink maps, see the article <bpt id=\"p1\">[</bpt>ActiveX Control Containers<ept id=\"p1\">](../../mfc/activex-control-containers.md)</ept>.","source":"For more information on event sink maps, see the article [ActiveX Control Containers](../../mfc/activex-control-containers.md)."},{"pos":[3577,3594],"content":"END_EVENTSINK_MAP"},{"content":"Ends the definition of your event sink map.","pos":[3598,3641]},{"pos":[3715,3723],"content":"ON_EVENT"},{"pos":[3727,3825],"content":"Use the <ph id=\"ph1\">`ON_EVENT`</ph> macro to define an event handler function for an event fired by an OLE control.","source":"Use the `ON_EVENT` macro to define an event handler function for an event fired by an OLE control."},{"content":"Parameters","pos":[3907,3917]},{"content":"The class to which this event sink map belongs.","pos":[3935,3982]},{"content":"The control ID of the OLE control.","pos":[3997,4031]},{"content":"The dispatch ID of the event fired by the control.","pos":[4050,4100]},{"content":"Pointer to a member function that handles the event.","pos":[4123,4175]},{"content":"This function should have a <bpt id=\"p1\">**</bpt>BOOL<ept id=\"p1\">**</ept> return type, and parameter types that match the event's parameters (see <ph id=\"ph1\">`vtsParams`</ph>).","pos":[4176,4298],"source":" This function should have a **BOOL** return type, and parameter types that match the event's parameters (see `vtsParams`)."},{"content":"The function should return <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> to indicate the event was handled; otherwise <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","pos":[4299,4390],"source":" The function should return **TRUE** to indicate the event was handled; otherwise **FALSE**."},{"content":"A sequence of <bpt id=\"p1\">**</bpt>VTS_<ept id=\"p1\">**</ept> constants that specifies the types of the parameters for the event.","pos":[4412,4502],"source":" A sequence of **VTS_** constants that specifies the types of the parameters for the event."},{"content":"These are the same constants that are used in dispatch map entries such as <ph id=\"ph1\">`DISP_FUNCTION`</ph>.","pos":[4503,4594],"source":" These are the same constants that are used in dispatch map entries such as `DISP_FUNCTION`."},{"content":"Remarks","pos":[4604,4611]},{"content":"The <ph id=\"ph1\">`vtsParams`</ph> argument is a space-separated list of values from the <bpt id=\"p1\">**</bpt>VTS_<ept id=\"p1\">**</ept> constants.","pos":[4615,4704],"source":"The `vtsParams` argument is a space-separated list of values from the **VTS_** constants."},{"content":"One or more of these values separated by spaces (not commas) specifies the function's parameter list.","pos":[4705,4806]},{"content":"For example:","pos":[4807,4819]},{"pos":[4837,4857],"content":"NVC_MFCAutomation#11"},{"pos":[4915,4982],"content":"specifies a list containing a short integer followed by a <bpt id=\"p1\">**</bpt>BOOL<ept id=\"p1\">**</ept>.","source":"specifies a list containing a short integer followed by a **BOOL**."},{"pos":[4989,5074],"content":"For a list of the <bpt id=\"p1\">**</bpt>VTS_<ept id=\"p1\">**</ept> constants, see <bpt id=\"p2\">[</bpt>EVENT_CUSTOM<ept id=\"p2\">](event-maps.md#event_custom)</ept>.","source":"For a list of the **VTS_** constants, see [EVENT_CUSTOM](event-maps.md#event_custom)."},{"pos":[5115,5129],"content":"ON_EVENT_RANGE"},{"pos":[5133,5291],"content":"Use the <ph id=\"ph1\">`ON_EVENT_RANGE`</ph> macro to define an event handler function for an event fired by any OLE control having a control ID within a contiguous range of IDs.","source":"Use the `ON_EVENT_RANGE` macro to define an event handler function for an event fired by any OLE control having a control ID within a contiguous range of IDs."},{"content":"Parameters","pos":[5394,5404]},{"content":"The class to which this event sink map belongs.","pos":[5422,5469]},{"content":"The control ID of the first OLE control in the range.","pos":[5489,5542]},{"content":"The control ID of the last OLE control in the range.","pos":[5561,5613]},{"content":"The dispatch ID of the event fired by the control.","pos":[5632,5682]},{"content":"Pointer to a member function that handles the event.","pos":[5705,5757]},{"content":"This function should have a <bpt id=\"p1\">**</bpt>BOOL<ept id=\"p1\">**</ept> return type, a first parameter of type <bpt id=\"p2\">**</bpt>UINT<ept id=\"p2\">**</ept> (for the control ID), and additional parameter types that match the event's parameters (see <ph id=\"ph1\">`vtsParams`</ph>).","pos":[5758,5948],"source":" This function should have a **BOOL** return type, a first parameter of type **UINT** (for the control ID), and additional parameter types that match the event's parameters (see `vtsParams`)."},{"content":"The function should return <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> to indicate the event was handled; otherwise <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","pos":[5949,6040],"source":" The function should return **TRUE** to indicate the event was handled; otherwise **FALSE**."},{"content":"A sequence of <bpt id=\"p1\">**</bpt>VTS_<ept id=\"p1\">**</ept> constants that specifies the types of the parameters for the event.","pos":[6062,6152],"source":" A sequence of **VTS_** constants that specifies the types of the parameters for the event."},{"content":"The first constant should be of type <bpt id=\"p1\">**</bpt>VTS_I4<ept id=\"p1\">**</ept>, for the control ID.","pos":[6153,6221],"source":" The first constant should be of type **VTS_I4**, for the control ID."},{"content":"These are the same constants that are used in dispatch map entries such as <ph id=\"ph1\">`DISP_FUNCTION`</ph>.","pos":[6222,6313],"source":" These are the same constants that are used in dispatch map entries such as `DISP_FUNCTION`."},{"content":"Remarks","pos":[6323,6330]},{"content":"The <ph id=\"ph1\">`vtsParams`</ph> argument is a space-separated list of values from the <bpt id=\"p1\">**</bpt>VTS_<ept id=\"p1\">**</ept> constants.","pos":[6334,6423],"source":"The `vtsParams` argument is a space-separated list of values from the **VTS_** constants."},{"content":"One or more of these values separated by spaces (not commas) specifies the function's parameter list.","pos":[6424,6525]},{"content":"For example:","pos":[6526,6538]},{"pos":[6556,6576],"content":"NVC_MFCAutomation#11"},{"pos":[6634,6701],"content":"specifies a list containing a short integer followed by a <bpt id=\"p1\">**</bpt>BOOL<ept id=\"p1\">**</ept>.","source":"specifies a list containing a short integer followed by a **BOOL**."},{"pos":[6708,6793],"content":"For a list of the <bpt id=\"p1\">**</bpt>VTS_<ept id=\"p1\">**</ept> constants, see <bpt id=\"p2\">[</bpt>EVENT_CUSTOM<ept id=\"p2\">](event-maps.md#event_custom)</ept>.","source":"For a list of the **VTS_** constants, see [EVENT_CUSTOM](event-maps.md#event_custom)."},{"content":"Example","pos":[6803,6810]},{"content":"The following example demonstrates an event handler, for the MouseDown event, implemented for three controls ( <ph id=\"ph1\">`IDC_MYCTRL1`</ph> through <ph id=\"ph2\">`IDC_MYCTRL3`</ph>).","pos":[6814,6962],"source":"The following example demonstrates an event handler, for the MouseDown event, implemented for three controls ( `IDC_MYCTRL1` through `IDC_MYCTRL3`)."},{"content":"The event handler function, <ph id=\"ph1\">`OnRangeMouseDown`</ph>, is declared in the header file of the dialog class ( <ph id=\"ph2\">`CMyDlg`</ph>) as:","pos":[6963,7077],"source":" The event handler function, `OnRangeMouseDown`, is declared in the header file of the dialog class ( `CMyDlg`) as:"},{"pos":[7095,7115],"content":"NVC_MFCAutomation#12"},{"content":"The code below is defined in the implementation file of the dialog class.","pos":[7171,7244]},{"pos":[7262,7282],"content":"NVC_MFCAutomation#13"},{"pos":[7376,7392],"content":"ON_EVENT_REFLECT"},{"pos":[7396,7581],"content":"The <ph id=\"ph1\">`ON_EVENT_REFLECT`</ph> macro, when used in the event sink map of an OLE control's wrapper class, receives events fired by the control before they are handled by the control's container.","source":"The `ON_EVENT_REFLECT` macro, when used in the event sink map of an OLE control's wrapper class, receives events fired by the control before they are handled by the control's container."},{"content":"Parameters","pos":[7668,7678]},{"content":"The class to which this event sink map belongs.","pos":[7696,7743]},{"content":"dispid","pos":[7750,7756]},{"content":"The dispatch ID of the event fired by the control.","pos":[7760,7810]},{"content":"Pointer to a member function that handles the event.","pos":[7833,7885]},{"content":"This function should have a <bpt id=\"p1\">**</bpt>BOOL<ept id=\"p1\">**</ept> return type and parameter types that match the event's parameters (see <ph id=\"ph1\">`vtsParams`</ph>).","pos":[7886,8007],"source":" This function should have a **BOOL** return type and parameter types that match the event's parameters (see `vtsParams`)."},{"content":"The function should return <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> to indicate the event was handled; otherwise <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","pos":[8008,8099],"source":" The function should return **TRUE** to indicate the event was handled; otherwise **FALSE**."},{"content":"A sequence of <bpt id=\"p1\">**</bpt>VTS_<ept id=\"p1\">**</ept> constants that specifies the types of the parameters for the event.","pos":[8121,8211],"source":" A sequence of **VTS_** constants that specifies the types of the parameters for the event."},{"content":"These are the same constants that are used in dispatch map entries such as <ph id=\"ph1\">`DISP_FUNCTION`</ph>.","pos":[8212,8303],"source":" These are the same constants that are used in dispatch map entries such as `DISP_FUNCTION`."},{"content":"Remarks","pos":[8313,8320]},{"pos":[8324,8413],"content":"The <ph id=\"ph1\">`vtsParams`</ph> argument is a space-separated list of values from the <bpt id=\"p1\">**</bpt>VTS_<ept id=\"p1\">**</ept> constants.","source":"The `vtsParams` argument is a space-separated list of values from the **VTS_** constants."},{"content":"One or more of these values separated by spaces (not commas) specifies the function's parameter list.","pos":[8420,8521]},{"content":"For example:","pos":[8522,8534]},{"pos":[8552,8572],"content":"NVC_MFCAutomation#11"},{"pos":[8630,8697],"content":"specifies a list containing a short integer followed by a <bpt id=\"p1\">**</bpt>BOOL<ept id=\"p1\">**</ept>.","source":"specifies a list containing a short integer followed by a **BOOL**."},{"pos":[8704,8789],"content":"For a list of the <bpt id=\"p1\">**</bpt>VTS_<ept id=\"p1\">**</ept> constants, see <bpt id=\"p2\">[</bpt>EVENT_CUSTOM<ept id=\"p2\">](event-maps.md#event_custom)</ept>.","source":"For a list of the **VTS_** constants, see [EVENT_CUSTOM](event-maps.md#event_custom)."},{"pos":[8829,8842],"content":"ON_PROPNOTIFY"},{"pos":[8846,8966],"content":"Use the <ph id=\"ph1\">`ON_PROPNOTIFY`</ph> macro to define an event sink map entry for handling property notifications from an OLE control.","source":"Use the `ON_PROPNOTIFY` macro to define an event sink map entry for handling property notifications from an OLE control."},{"content":"Parameters","pos":[9056,9066]},{"content":"The class to which this event sink map belongs.","pos":[9084,9131]},{"content":"The control ID of the OLE control.","pos":[9146,9180]},{"content":"The dispatch ID of the property involved in the notification.","pos":[9199,9260]},{"content":"Pointer to a member function that handles the <bpt id=\"p1\">**</bpt>OnRequestEdit<ept id=\"p1\">**</ept> notification for this property.","pos":[9283,9378],"source":" Pointer to a member function that handles the **OnRequestEdit** notification for this property."},{"content":"This function should have a <bpt id=\"p1\">**</bpt>BOOL<ept id=\"p1\">**</ept> return type and a <bpt id=\"p2\">**</bpt>BOOL<ph id=\"ph1\">\\*</ph><ept id=\"p2\">**</ept> parameter.","pos":[9379,9455],"source":" This function should have a **BOOL** return type and a **BOOL\\*** parameter."},{"content":"This function should set the parameter to <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> to allow the property to change and <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> to disallow.","pos":[9456,9565],"source":" This function should set the parameter to **TRUE** to allow the property to change and **FALSE** to disallow."},{"content":"The function should return <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> to indicate the notification was handled; otherwise <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","pos":[9566,9664],"source":" The function should return **TRUE** to indicate the notification was handled; otherwise **FALSE**."},{"content":"Pointer to a member function that handles the <bpt id=\"p1\">**</bpt>OnChanged<ept id=\"p1\">**</ept> notification for this property.","pos":[9687,9778],"source":" Pointer to a member function that handles the **OnChanged** notification for this property."},{"content":"The function should have a <bpt id=\"p1\">**</bpt>BOOL<ept id=\"p1\">**</ept> return type and a <bpt id=\"p2\">**</bpt>UINT<ept id=\"p2\">**</ept> parameter.","pos":[9779,9852],"source":" The function should have a **BOOL** return type and a **UINT** parameter."},{"content":"The function should return <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> to indicate that notification was handled; otherwise <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","pos":[9853,9952],"source":" The function should return **TRUE** to indicate that notification was handled; otherwise **FALSE**."},{"content":"Remarks","pos":[9962,9969]},{"content":"The <ph id=\"ph1\">`vtsParams`</ph> argument is a space-separated list of values from the <bpt id=\"p1\">**</bpt>VTS_<ept id=\"p1\">**</ept> constants.","pos":[9973,10062],"source":"The `vtsParams` argument is a space-separated list of values from the **VTS_** constants."},{"content":"One or more of these values separated by spaces (not commas) specifies the function's parameter list.","pos":[10063,10164]},{"content":"For example:","pos":[10165,10177]},{"pos":[10195,10215],"content":"NVC_MFCAutomation#11"},{"pos":[10273,10340],"content":"specifies a list containing a short integer followed by a <bpt id=\"p1\">**</bpt>BOOL<ept id=\"p1\">**</ept>.","source":"specifies a list containing a short integer followed by a **BOOL**."},{"pos":[10347,10432],"content":"For a list of the <bpt id=\"p1\">**</bpt>VTS_<ept id=\"p1\">**</ept> constants, see <bpt id=\"p2\">[</bpt>EVENT_CUSTOM<ept id=\"p2\">](event-maps.md#event_custom)</ept>.","source":"For a list of the **VTS_** constants, see [EVENT_CUSTOM](event-maps.md#event_custom)."},{"pos":[10478,10497],"content":"ON_PROPNOTIFY_RANGE"},{"pos":[10501,10681],"content":"Use the <ph id=\"ph1\">`ON_PROPNOTIFY_RANGE`</ph> macro to define an event sink map entry for handling property notifications from any OLE control having a control ID within a contiguous range of IDs.","source":"Use the `ON_PROPNOTIFY_RANGE` macro to define an event sink map entry for handling property notifications from any OLE control having a control ID within a contiguous range of IDs."},{"content":"Parameters","pos":[10791,10801]},{"content":"The class to which this event sink map belongs.","pos":[10819,10866]},{"content":"The control ID of the first OLE control in the range.","pos":[10886,10939]},{"content":"The control ID of the last OLE control in the range.","pos":[10958,11010]},{"content":"The dispatch ID of the property involved in the notification.","pos":[11029,11090]},{"content":"Pointer to a member function that handles the <bpt id=\"p1\">**</bpt>OnRequestEdit<ept id=\"p1\">**</ept> notification for this property.","pos":[11113,11208],"source":" Pointer to a member function that handles the **OnRequestEdit** notification for this property."},{"content":"This function should have a <bpt id=\"p1\">**</bpt>BOOL<ept id=\"p1\">**</ept> return type and <bpt id=\"p2\">**</bpt>UINT<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>BOOL<ph id=\"ph1\">\\*</ph><ept id=\"p3\">**</ept> parameters.","pos":[11209,11297],"source":" This function should have a **BOOL** return type and **UINT** and **BOOL\\*** parameters."},{"content":"The function should set the parameter to <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> to allow the property to change and <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> to disallow.","pos":[11298,11406],"source":" The function should set the parameter to **TRUE** to allow the property to change and **FALSE** to disallow."},{"content":"The function should return <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> to indicate that notification was handled; otherwise <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","pos":[11407,11506],"source":" The function should return **TRUE** to indicate that notification was handled; otherwise **FALSE**."},{"content":"Pointer to a member function that handles the <bpt id=\"p1\">**</bpt>OnChanged<ept id=\"p1\">**</ept> notification for this property.","pos":[11529,11620],"source":" Pointer to a member function that handles the **OnChanged** notification for this property."},{"content":"The function should have a <bpt id=\"p1\">**</bpt>BOOL<ept id=\"p1\">**</ept> return type and a <bpt id=\"p2\">**</bpt>UINT<ept id=\"p2\">**</ept> parameter.","pos":[11621,11694],"source":" The function should have a **BOOL** return type and a **UINT** parameter."},{"content":"The function should return <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> to indicate that notification was handled; otherwise <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","pos":[11695,11794],"source":" The function should return **TRUE** to indicate that notification was handled; otherwise **FALSE**."},{"pos":[11842,11863],"content":"ON_PROPNOTIFY_REFLECT"},{"pos":[11867,12072],"content":"The <ph id=\"ph1\">`ON_PROPNOTIFY_REFLECT`</ph> macro, when used in the event sink map of an OLE control's wrapper class, receives property notifications sent by the control before they are handled by the control's container.","source":"The `ON_PROPNOTIFY_REFLECT` macro, when used in the event sink map of an OLE control's wrapper class, receives property notifications sent by the control before they are handled by the control's container."},{"content":"Parameters","pos":[12167,12177]},{"content":"The class to which this event sink map belongs.","pos":[12195,12242]},{"content":"The dispatch ID of the property involved in the notification.","pos":[12261,12322]},{"content":"Pointer to a member function that handles the <bpt id=\"p1\">**</bpt>OnRequestEdit<ept id=\"p1\">**</ept> notification for this property.","pos":[12345,12440],"source":" Pointer to a member function that handles the **OnRequestEdit** notification for this property."},{"content":"This function should have a <bpt id=\"p1\">**</bpt>BOOL<ept id=\"p1\">**</ept> return type and a <bpt id=\"p2\">**</bpt>BOOL<ph id=\"ph1\">\\*</ph><ept id=\"p2\">**</ept> parameter.","pos":[12441,12517],"source":" This function should have a **BOOL** return type and a **BOOL\\*** parameter."},{"content":"This function should set the parameter to <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> to allow the property to change and <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> to disallow.","pos":[12518,12627],"source":" This function should set the parameter to **TRUE** to allow the property to change and **FALSE** to disallow."},{"content":"The function should return <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> to indicate the notification was handled; otherwise <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","pos":[12628,12726],"source":" The function should return **TRUE** to indicate the notification was handled; otherwise **FALSE**."},{"content":"Pointer to a member function that handles the <bpt id=\"p1\">**</bpt>OnChanged<ept id=\"p1\">**</ept> notification for this property.","pos":[12749,12840],"source":" Pointer to a member function that handles the **OnChanged** notification for this property."},{"content":"The function should have a <bpt id=\"p1\">**</bpt>BOOL<ept id=\"p1\">**</ept> return type and no parameters.","pos":[12841,12907],"source":" The function should have a **BOOL** return type and no parameters."},{"content":"The function should return <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> to indicate the notification was handled; otherwise <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","pos":[12908,13006],"source":" The function should return **TRUE** to indicate the notification was handled; otherwise **FALSE**."},{"content":"See Also","pos":[13015,13023]},{"content":"Macros and Globals","pos":[13028,13046]}],"content":"---\ntitle: \"Event Sink Maps | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"vc.mfc.macros.maps\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"event sink maps\"\nms.assetid: a9757eb2-5f4a-45ec-a2cd-ce5eec85b16f\ncaps.latest.revision: 14\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Event Sink Maps\nWhen an embedded OLE control fires an event, the control's container receives the event using a mechanism, called an \"event sink map,\" supplied by MFC. This event sink map designates handler functions for each specific event, as well as parameters of those events. For more information on event sink maps, see the article [ActiveX Control Containers](../../mfc/activex-control-containers.md).  \n  \n### Event Sink Maps  \n  \n|||  \n|-|-|  \n|[BEGIN_EVENTSINK_MAP](#begin_eventsink_map)|Starts the definition of an event sink map.|  \n|[DECLARE_EVENTSINK_MAP](#declare_eventsink_map)|Declares an event sink map.|  \n|[END_EVENTSINK_MAP](#end_eventsink_map)|Ends the definition of an event sink map.|  \n|[ON_EVENT](#on_event)|Defines an event handler for a specific event.|  \n|[ON_EVENT_RANGE](#on_event_range)|Defines an event handler for a specific event fired from a set of OLE controls.|  \n|[ON_EVENT_REFLECT](#on_event_reflect)|Receives events fired by the control before they are handled by the control's container.|  \n|[ON_PROPNOTIFY](#on_propnotify)|Defines a handler for handling property notifications from an OLE control.|  \n|[ON_PROPNOTIFY_RANGE](#on_propnotify_range)|Defines a handler for handling property notifications from a set of OLE controls.|  \n|[ON_PROPNOTIFY_REFLECT](#on_propnotify_reflect)|Receives property notifications sent by the control before they are handled by the control's container.|  \n  \n##  <a name=\"begin_eventsink_map\"></a>  BEGIN_EVENTSINK_MAP  \n Begins the definition of your event sink map.  \n  \n```   \nBEGIN_EVENTSINK_MAP(theClass, baseClass)  \n```  \n  \n### Parameters  \n `theClass`  \n Specifies the name of the control class whose event sink map this is.  \n  \n `baseClass`  \n Specifies the name of the base class of `theClass`.  \n  \n### Remarks  \n In the implementation (.cpp) file that defines the member functions for your class, start the event sink map with the `BEGIN_EVENTSINK_MAP` macro, then add macro entries for each event to be notified of, and complete the event sink map with the `END_EVENTSINK_MAP` macro.  \n  \n For more information on event sink maps and OLE control containers, see the article [ActiveX Control Containers](../../mfc/activex-control-containers.md).  \n  \n##  <a name=\"declare_eventsink_map\"></a>  DECLARE_EVENTSINK_MAP  \n An OLE container can provide an event sink map to specify the events your container will be notified of.  \n  \n```   \nDECLARE_EVENTSINK_MAP()   \n```  \n  \n### Remarks  \n Use the `DECLARE_EVENTSINK_MAP` macro at the end of your class declaration. Then, in the .CPP file that defines the member functions for the class, use the `BEGIN_EVENTSINK_MAP` macro, macro entries for each of the events to be notified of, and the `END_EVENTSINK_MAP` macro to declare the end of the event sink list.  \n  \n For more information on event sink maps, see the article [ActiveX Control Containers](../../mfc/activex-control-containers.md).  \n  \n##  <a name=\"end_eventsink_map\"></a>  END_EVENTSINK_MAP  \n Ends the definition of your event sink map.  \n  \n```   \nEND_EVENTSINK_MAP()   \n```  \n  \n##  <a name=\"on_event\"></a>  ON_EVENT  \n Use the `ON_EVENT` macro to define an event handler function for an event fired by an OLE control.  \n  \n```   \nON_EVENT(theClass, id, dispid, pfnHandler,  vtsParams) \n```  \n  \n### Parameters  \n `theClass`  \n The class to which this event sink map belongs.  \n  \n `id`  \n The control ID of the OLE control.  \n  \n `dispid`  \n The dispatch ID of the event fired by the control.  \n  \n `pfnHandler`  \n Pointer to a member function that handles the event. This function should have a **BOOL** return type, and parameter types that match the event's parameters (see `vtsParams`). The function should return **TRUE** to indicate the event was handled; otherwise **FALSE**.  \n  \n `vtsParams`  \n A sequence of **VTS_** constants that specifies the types of the parameters for the event. These are the same constants that are used in dispatch map entries such as `DISP_FUNCTION`.  \n  \n### Remarks  \n The `vtsParams` argument is a space-separated list of values from the **VTS_** constants. One or more of these values separated by spaces (not commas) specifies the function's parameter list. For example:  \n  \n [!code-cpp[NVC_MFCAutomation#11](../../mfc/codesnippet/cpp/event-sink-maps_1.cpp)]  \n  \n specifies a list containing a short integer followed by a **BOOL**.  \n  \n For a list of the **VTS_** constants, see [EVENT_CUSTOM](event-maps.md#event_custom).  \n  \n##  <a name=\"on_event_range\"></a>  ON_EVENT_RANGE  \n Use the `ON_EVENT_RANGE` macro to define an event handler function for an event fired by any OLE control having a control ID within a contiguous range of IDs.  \n  \n```   \nON_EVENT_RANGE(theClass, idFirst, idLast, dispid, pfnHandler,  vtsParams)   \n```  \n  \n### Parameters  \n `theClass`  \n The class to which this event sink map belongs.  \n  \n `idFirst`  \n The control ID of the first OLE control in the range.  \n  \n `idLast`  \n The control ID of the last OLE control in the range.  \n  \n `dispid`  \n The dispatch ID of the event fired by the control.  \n  \n `pfnHandler`  \n Pointer to a member function that handles the event. This function should have a **BOOL** return type, a first parameter of type **UINT** (for the control ID), and additional parameter types that match the event's parameters (see `vtsParams`). The function should return **TRUE** to indicate the event was handled; otherwise **FALSE**.  \n  \n `vtsParams`  \n A sequence of **VTS_** constants that specifies the types of the parameters for the event. The first constant should be of type **VTS_I4**, for the control ID. These are the same constants that are used in dispatch map entries such as `DISP_FUNCTION`.  \n  \n### Remarks  \n The `vtsParams` argument is a space-separated list of values from the **VTS_** constants. One or more of these values separated by spaces (not commas) specifies the function's parameter list. For example:  \n  \n [!code-cpp[NVC_MFCAutomation#11](../../mfc/codesnippet/cpp/event-sink-maps_1.cpp)]  \n  \n specifies a list containing a short integer followed by a **BOOL**.  \n  \n For a list of the **VTS_** constants, see [EVENT_CUSTOM](event-maps.md#event_custom).  \n  \n### Example  \n The following example demonstrates an event handler, for the MouseDown event, implemented for three controls ( `IDC_MYCTRL1` through `IDC_MYCTRL3`). The event handler function, `OnRangeMouseDown`, is declared in the header file of the dialog class ( `CMyDlg`) as:  \n  \n [!code-cpp[NVC_MFCAutomation#12](../../mfc/codesnippet/cpp/event-sink-maps_2.h)]  \n  \n The code below is defined in the implementation file of the dialog class.  \n  \n [!code-cpp[NVC_MFCAutomation#13](../../mfc/codesnippet/cpp/event-sink-maps_3.cpp)]  \n  \n##  <a name=\"on_event_reflect\"></a>  ON_EVENT_REFLECT  \n The `ON_EVENT_REFLECT` macro, when used in the event sink map of an OLE control's wrapper class, receives events fired by the control before they are handled by the control's container.  \n  \n```   \nON_EVENT_REFLECT(theClass,  dispid, pfnHandler,  vtsParams) \n```  \n  \n### Parameters  \n `theClass`  \n The class to which this event sink map belongs.  \n  \n dispid  \n The dispatch ID of the event fired by the control.  \n  \n `pfnHandler`  \n Pointer to a member function that handles the event. This function should have a **BOOL** return type and parameter types that match the event's parameters (see `vtsParams`). The function should return **TRUE** to indicate the event was handled; otherwise **FALSE**.  \n  \n `vtsParams`  \n A sequence of **VTS_** constants that specifies the types of the parameters for the event. These are the same constants that are used in dispatch map entries such as `DISP_FUNCTION`.  \n  \n### Remarks  \n The `vtsParams` argument is a space-separated list of values from the **VTS_** constants.  \n  \n One or more of these values separated by spaces (not commas) specifies the function's parameter list. For example:  \n  \n [!code-cpp[NVC_MFCAutomation#11](../../mfc/codesnippet/cpp/event-sink-maps_1.cpp)]  \n  \n specifies a list containing a short integer followed by a **BOOL**.  \n  \n For a list of the **VTS_** constants, see [EVENT_CUSTOM](event-maps.md#event_custom).  \n  \n##  <a name=\"on_propnotify\"></a>  ON_PROPNOTIFY  \n Use the `ON_PROPNOTIFY` macro to define an event sink map entry for handling property notifications from an OLE control.  \n  \n```   \nON_PROPNOTIFY(theClass, id, dispid, pfnRequest, pfnChanged)  \n \n```  \n  \n### Parameters  \n `theClass`  \n The class to which this event sink map belongs.  \n  \n `id`  \n The control ID of the OLE control.  \n  \n `dispid`  \n The dispatch ID of the property involved in the notification.  \n  \n `pfnRequest`  \n Pointer to a member function that handles the **OnRequestEdit** notification for this property. This function should have a **BOOL** return type and a **BOOL\\*** parameter. This function should set the parameter to **TRUE** to allow the property to change and **FALSE** to disallow. The function should return **TRUE** to indicate the notification was handled; otherwise **FALSE**.  \n  \n `pfnChanged`  \n Pointer to a member function that handles the **OnChanged** notification for this property. The function should have a **BOOL** return type and a **UINT** parameter. The function should return **TRUE** to indicate that notification was handled; otherwise **FALSE**.  \n  \n### Remarks  \n The `vtsParams` argument is a space-separated list of values from the **VTS_** constants. One or more of these values separated by spaces (not commas) specifies the function's parameter list. For example:  \n  \n [!code-cpp[NVC_MFCAutomation#11](../../mfc/codesnippet/cpp/event-sink-maps_1.cpp)]  \n  \n specifies a list containing a short integer followed by a **BOOL**.  \n  \n For a list of the **VTS_** constants, see [EVENT_CUSTOM](event-maps.md#event_custom).  \n  \n##  <a name=\"on_propnotify_range\"></a>  ON_PROPNOTIFY_RANGE  \n Use the `ON_PROPNOTIFY_RANGE` macro to define an event sink map entry for handling property notifications from any OLE control having a control ID within a contiguous range of IDs.  \n  \n```  \n \nON_PROPNOTIFY_RANGE(theClass, idFirst, idLast, dispid, pfnRequest, pfnChanged)  \n \n```  \n  \n### Parameters  \n `theClass`  \n The class to which this event sink map belongs.  \n  \n `idFirst`  \n The control ID of the first OLE control in the range.  \n  \n `idLast`  \n The control ID of the last OLE control in the range.  \n  \n `dispid`  \n The dispatch ID of the property involved in the notification.  \n  \n `pfnRequest`  \n Pointer to a member function that handles the **OnRequestEdit** notification for this property. This function should have a **BOOL** return type and **UINT** and **BOOL\\*** parameters. The function should set the parameter to **TRUE** to allow the property to change and **FALSE** to disallow. The function should return **TRUE** to indicate that notification was handled; otherwise **FALSE**.  \n  \n `pfnChanged`  \n Pointer to a member function that handles the **OnChanged** notification for this property. The function should have a **BOOL** return type and a **UINT** parameter. The function should return **TRUE** to indicate that notification was handled; otherwise **FALSE**.  \n  \n##  <a name=\"on_propnotify_reflect\"></a>  ON_PROPNOTIFY_REFLECT  \n The `ON_PROPNOTIFY_REFLECT` macro, when used in the event sink map of an OLE control's wrapper class, receives property notifications sent by the control before they are handled by the control's container.  \n  \n```  \n \nON_PROPNOTIFY_REFLECT(theClass, dispid, pfnRequest, pfnChanged)  \n \n```  \n  \n### Parameters  \n `theClass`  \n The class to which this event sink map belongs.  \n  \n `dispid`  \n The dispatch ID of the property involved in the notification.  \n  \n `pfnRequest`  \n Pointer to a member function that handles the **OnRequestEdit** notification for this property. This function should have a **BOOL** return type and a **BOOL\\*** parameter. This function should set the parameter to **TRUE** to allow the property to change and **FALSE** to disallow. The function should return **TRUE** to indicate the notification was handled; otherwise **FALSE**.  \n  \n `pfnChanged`  \n Pointer to a member function that handles the **OnChanged** notification for this property. The function should have a **BOOL** return type and no parameters. The function should return **TRUE** to indicate the notification was handled; otherwise **FALSE**.  \n  \n## See Also  \n [Macros and Globals](../../mfc/reference/mfc-macros-and-globals.md)\n"}