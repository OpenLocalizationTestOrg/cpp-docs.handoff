{"nodes":[{"pos":[12,46],"content":"add_pointer Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"add_pointer Class | Microsoft Docs","pos":[0,34]}]},{"content":"add_pointer Class","pos":[763,780]},{"content":"Makes a pointer-to-type from a specified type.","pos":[781,827]},{"content":"Syntax","pos":[836,842]},{"content":"Parameters","pos":[987,997]},{"content":"The type to modify.","pos":[1009,1028]},{"content":"Remarks","pos":[1037,1044]},{"pos":[1048,1124],"content":"The member typedef type names the same type as <ph id=\"ph1\">`remove_reference&lt;T&gt;::type*`</ph>.","source":"The member typedef type names the same type as `remove_reference<T>::type*`."},{"content":"Because it is invalid to make a pointer from a reference, <ph id=\"ph1\">`add_pointer`</ph> removes the reference, if any, from the specified type before it makes a pointer-to-type.","pos":[1131,1292],"source":"Because it is invalid to make a pointer from a reference, `add_pointer` removes the reference, if any, from the specified type before it makes a pointer-to-type."},{"content":"Consequently, you can use a type with <ph id=\"ph1\">`add_pointer`</ph> without being concerned about whether the type is a reference.","pos":[1293,1407],"source":" Consequently, you can use a type with `add_pointer` without being concerned about whether the type is a reference."},{"content":"Example","pos":[1416,1423]},{"pos":[1427,1529],"content":"The following example demonstrates that <ph id=\"ph1\">`add_pointer`</ph> of a type is the same as a pointer to that type.","source":"The following example demonstrates that `add_pointer` of a type is the same as a pointer to that type."},{"content":"Requirements","pos":[1897,1909]},{"pos":[1913,1938],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> &lt;type_traits&gt;","source":"**Header:** <type_traits>"},{"pos":[1945,1963],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[1972,1980]},{"content":"&lt;type_traits&gt;","pos":[1985,1998],"source":"<type_traits>"},{"content":"remove_pointer Class","pos":[2041,2061]}],"content":"---\ntitle: \"add_pointer Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std::tr1::add_pointer\"\n  - \"std.tr1.add_pointer\"\n  - \"add_pointer\"\n  - \"std.add_pointer\"\n  - \"std::add_pointer\"\n  - \"type_traits/std::add_pointer\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"add_pointer class [TR1]\"\n  - \"add_pointer\"\nms.assetid: d8095cb0-6578-4143-b78f-87f82485298c\ncaps.latest.revision: 22\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# add_pointer Class\nMakes a pointer-to-type from a specified type.  \n  \n## Syntax  \n  \n```  \ntemplate <class Ty>  \nstruct add_pointer;  \n \ntemplate <class T>using add_pointer_t = typename add_pointer<T>::type;  \n```  \n  \n#### Parameters  \n `Ty`  \n The type to modify.  \n  \n## Remarks  \n The member typedef type names the same type as `remove_reference<T>::type*`.  \n  \n Because it is invalid to make a pointer from a reference, `add_pointer` removes the reference, if any, from the specified type before it makes a pointer-to-type. Consequently, you can use a type with `add_pointer` without being concerned about whether the type is a reference.  \n  \n## Example  \n The following example demonstrates that `add_pointer` of a type is the same as a pointer to that type.  \n  \n```  \n#include <type_traits>   \n#include <iostream>   \n  \nint main()   \n    {   \n    std::add_pointer_t<int> *p = (int **)0;   \n  \n    p = p;  // to quiet \"unused\" warning   \n    std::cout << \"add_pointer_t<int> == \"   \n        << typeid(*p).name() << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \nadd_pointer_t<int> == int *  \n```  \n  \n## Requirements  \n **Header:** <type_traits>  \n  \n **Namespace:** std  \n  \n## See Also  \n [<type_traits>](../standard-library/type-traits.md)   \n [remove_pointer Class](../standard-library/remove-pointer-class.md)\n"}