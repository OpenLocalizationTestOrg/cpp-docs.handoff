{"nodes":[{"pos":[12,53],"content":"CMultiPaneFrameWnd Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMultiPaneFrameWnd Class | Microsoft Docs","pos":[0,41]}]},{"content":"CMultiPaneFrameWnd Class","pos":[628,652]},{"content":"The <ph id=\"ph1\">`CMultiPaneFrameWnd`</ph> class extends <bpt id=\"p1\">[</bpt>CPaneFrameWnd Class<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md)</ept>.","pos":[653,758],"source":"The `CMultiPaneFrameWnd` class extends [CPaneFrameWnd Class](../../mfc/reference/cpaneframewnd-class.md)."},{"content":"It can support multiple panes.","pos":[759,789]},{"content":"Instead of a single embedded handle to a control bar, <ph id=\"ph1\">`CMultiPaneFrameWnd`</ph> contains a <bpt id=\"p1\">[</bpt>CPaneContainerManager Class<ept id=\"p1\">](../../mfc/reference/cpanecontainermanager-class.md)</ept> object that enables the user to dock one <ph id=\"ph2\">`CMultiPaneFrameWnd`</ph> to another and dynamically create multiple floating, tabbed windows.","pos":[790,1088],"source":" Instead of a single embedded handle to a control bar, `CMultiPaneFrameWnd` contains a [CPaneContainerManager Class](../../mfc/reference/cpanecontainermanager-class.md) object that enables the user to dock one `CMultiPaneFrameWnd` to another and dynamically create multiple floating, tabbed windows."},{"content":"Syntax","pos":[1097,1103]},{"content":"Members","pos":[1177,1184]},{"content":"Public Methods","pos":[1194,1208]},{"content":"Name","pos":[1215,1219]},{"content":"Description","pos":[1220,1231]},{"content":"CMultiPaneFrameWnd::AddPane","pos":[1270,1297]},{"content":"Adds a pane.","pos":[1329,1341]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::AddPane<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__addpane)</ept>.)","pos":[1342,1446],"source":" (Overrides [CPaneFrameWnd::AddPane](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__addpane).)"},{"content":"CMultiPaneFrameWnd::AddRecentPane","pos":[1452,1485]},{"content":"CMultiPaneFrameWnd::AdjustLayout","pos":[1529,1561]},{"content":"Adjusts the layout of the mini-frame window.","pos":[1598,1642]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::AdjustLayout<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__adjustlayout)</ept>.)","pos":[1643,1757],"source":" (Overrides [CPaneFrameWnd::AdjustLayout](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__adjustlayout).)"},{"content":"CMultiPaneFrameWnd::AdjustPaneFrames","pos":[1763,1799]},{"pos":[1840,1962],"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::AdjustPaneFrames<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__adjustpaneframes)</ept>.)","source":"(Overrides [CPaneFrameWnd::AdjustPaneFrames](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__adjustpaneframes).)"},{"content":"CMultiPaneFrameWnd::CalcExpectedDockedRect","pos":[1968,2010]},{"content":"Calculates the expected rectangle of a docked window.","pos":[2057,2110]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::CalcExpectedDockedRect<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__calcexpecteddockedrect)</ept>.)","pos":[2111,2245],"source":" (Overrides [CPaneFrameWnd::CalcExpectedDockedRect](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__calcexpecteddockedrect).)"},{"content":"CMultiPaneFrameWnd::CanBeAttached","pos":[2251,2284]},{"content":"Determines whether the current pane can dock to another pane or frame window.","pos":[2322,2399]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::CanBeAttached<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__canbeattached)</ept>.)","pos":[2400,2516],"source":" (Overrides [CPaneFrameWnd::CanBeAttached](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__canbeattached).)"},{"content":"CMultiPaneFrameWnd::CanBeDockedToPane","pos":[2522,2559]},{"content":"Determines whether the mini-frame window can dock to a pane.","pos":[2601,2661]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::CanBeDockedToPane<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__canbedockedtopane)</ept>.)","pos":[2662,2786],"source":" (Overrides [CPaneFrameWnd::CanBeDockedToPane](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__canbedockedtopane).)"},{"content":"CMultiPaneFrameWnd::CheckGripperVisibility","pos":[2792,2834]},{"pos":[2881,3015],"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::CheckGripperVisibility<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__checkgrippervisibility)</ept>.)","source":"(Overrides [CPaneFrameWnd::CheckGripperVisibility](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__checkgrippervisibility).)"},{"content":"CMultiPaneFrameWnd::CloseMiniFrame","pos":[3021,3055]},{"pos":[3094,3138],"content":"(Overrides <ph id=\"ph1\">`CPaneFrameWnd::CloseMiniFrame`</ph>.)","source":"(Overrides `CPaneFrameWnd::CloseMiniFrame`.)"},{"content":"CMultiPaneFrameWnd::ConvertToTabbedDocument","pos":[3144,3187]},{"content":"Converts the pane to a tabbed document.","pos":[3235,3274]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::ConvertToTabbedDocument<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__converttotabbeddocument)</ept>.)","pos":[3275,3411],"source":" (Overrides [CPaneFrameWnd::ConvertToTabbedDocument](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__converttotabbeddocument).)"},{"content":"CMultiPaneFrameWnd::DockFrame","pos":[3417,3446]},{"content":"CMultiPaneFrameWnd::DockPane","pos":[3486,3514]},{"content":"Docks the pane.","pos":[3547,3562]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::DockPane<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__dockpane)</ept>.)","pos":[3563,3669],"source":" (Overrides [CPaneFrameWnd::DockPane](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__dockpane).)"},{"content":"CMultiPaneFrameWnd::DockRecentPaneToMainFrame","pos":[3675,3720]},{"content":"CMultiPaneFrameWnd::GetCaptionText","pos":[3776,3810]},{"content":"Returns the caption text.","pos":[3849,3874]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::GetCaptionText<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__getcaptiontext)</ept>.)","pos":[3875,3993],"source":" (Overrides [CPaneFrameWnd::GetCaptionText](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__getcaptiontext).)"},{"content":"CMultiPaneFrameWnd::GetPaneContainerManager","pos":[3999,4042]},{"content":"Returns a reference to the internal container manager object.","pos":[4090,4151]},{"content":"CMultiPaneFrameWnd::GetFirstVisiblePane","pos":[4157,4196]},{"content":"Returns the first visible pane that is contained in a mini-frame window.","pos":[4240,4312]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::GetFirstVisiblePane<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__getfirstvisiblepane)</ept>.)","pos":[4313,4441],"source":" (Overrides [CPaneFrameWnd::GetFirstVisiblePane](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__getfirstvisiblepane).)"},{"content":"CMultiPaneFrameWnd::GetPane","pos":[4447,4474]},{"content":"Returns a pane that is contained in the mini-frame window.","pos":[4506,4564]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::GetPane<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__getpane)</ept>.)","pos":[4565,4669],"source":" (Overrides [CPaneFrameWnd::GetPane](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__getpane).)"},{"content":"CMultiPaneFrameWnd::GetPaneCount","pos":[4675,4707]},{"content":"Returns the number of panes that are contained in a mini-frame window.","pos":[4744,4814]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::GetPaneCount<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__getpanecount)</ept>.)","pos":[4815,4929],"source":" (Overrides [CPaneFrameWnd::GetPaneCount](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__getpanecount).)"},{"content":"CMultiPaneFrameWnd::GetVisiblePaneCount","pos":[4935,4974]},{"content":"Returns the number of visible panes that are contained in a mini-frame window.","pos":[5018,5096]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::GetVisiblePaneCount<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__getvisiblepanecount)</ept>.)","pos":[5097,5225],"source":" (Overrides [CPaneFrameWnd::GetVisiblePaneCount](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__getvisiblepanecount).)"},{"content":"CMultiPaneFrameWnd::InsertPane","pos":[5231,5261]},{"content":"CMultiPaneFrameWnd::LoadState","pos":[5302,5331]},{"content":"Loads the pane's state from the registry.","pos":[5365,5406]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::LoadState<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__loadstate)</ept>.)","pos":[5407,5515],"source":" (Overrides [CPaneFrameWnd::LoadState](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__loadstate).)"},{"content":"CMultiPaneFrameWnd::OnDockToRecentPos","pos":[5521,5558]},{"content":"Docks the mini-frame window at its most recent position.","pos":[5600,5656]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::OnDockToRecentPos<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__ondocktorecentpos)</ept>.)","pos":[5657,5781],"source":" (Overrides [CPaneFrameWnd::OnDockToRecentPos](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__ondocktorecentpos).)"},{"content":"CMultiPaneFrameWnd::OnKillRollUpTimer","pos":[5787,5824]},{"content":"Stops the rollup timer.","pos":[5866,5889]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::OnKillRollUpTimer<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__onkillrolluptimer)</ept>.)","pos":[5890,6014],"source":" (Overrides [CPaneFrameWnd::OnKillRollUpTimer](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__onkillrolluptimer).)"},{"content":"CMultiPaneFrameWnd::OnPaneRecalcLayout","pos":[6020,6058]},{"content":"Adjusts the layout of a pane inside a mini-frame window.","pos":[6101,6157]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::OnPaneRecalcLayout<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__onpanerecalclayout)</ept>.)","pos":[6158,6284],"source":" (Overrides [CPaneFrameWnd::OnPaneRecalcLayout](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__onpanerecalclayout).)"},{"content":"CMultiPaneFrameWnd::OnSetRollUpTimer","pos":[6290,6326]},{"content":"Sets the rollup timer.","pos":[6367,6389]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::OnSetRollUpTimer<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__onsetrolluptimer)</ept>.)","pos":[6390,6512],"source":" (Overrides [CPaneFrameWnd::OnSetRollUpTimer](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__onsetrolluptimer).)"},{"content":"CMultiPaneFrameWnd::OnShowPane","pos":[6518,6548]},{"content":"Called by the framework when a pane in the mini-frame window is hidden or displayed.","pos":[6583,6667]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::OnShowPane<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__onshowpane)</ept>.)","pos":[6668,6778],"source":" (Overrides [CPaneFrameWnd::OnShowPane](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__onshowpane).)"},{"content":"CMultiPaneFrameWnd::PaneFromPoint","pos":[6784,6817]},{"content":"Returns a pane if it contains a user-supplied point inside a mini-frame window.","pos":[6855,6934]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::PaneFromPoint<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__panefrompoint)</ept>.)","pos":[6935,7051],"source":" (Overrides [CPaneFrameWnd::PaneFromPoint](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__panefrompoint).)"},{"content":"CMultiPaneFrameWnd::RemoveNonValidPanes","pos":[7057,7096]},{"content":"Called by the framework to remove non-valid panes.","pos":[7140,7190]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::RemoveNonValidPanes<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__removenonvalidpanes)</ept>.)","pos":[7191,7319],"source":" (Overrides [CPaneFrameWnd::RemoveNonValidPanes](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__removenonvalidpanes).)"},{"content":"CMultiPaneFrameWnd::RemovePane","pos":[7325,7355]},{"content":"Removes a pane from the mini-frame window.","pos":[7390,7432]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::RemovePane<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__removepane)</ept>.)","pos":[7433,7543],"source":" (Overrides [CPaneFrameWnd::RemovePane](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__removepane).)"},{"content":"CMultiPaneFrameWnd::ReplacePane","pos":[7549,7580]},{"content":"Replaces one pane with another.","pos":[7616,7647]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::ReplacePane<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__replacepane)</ept>.)","pos":[7648,7760],"source":" (Overrides [CPaneFrameWnd::ReplacePane](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__replacepane).)"},{"content":"CMultiPaneFrameWnd::SaveState","pos":[7766,7795]},{"content":"Saves the pane's state to the registry.","pos":[7829,7868]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::SaveState<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__savestate)</ept>.)","pos":[7869,7977],"source":" (Overrides [CPaneFrameWnd::SaveState](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__savestate).)"},{"content":"CMultiPaneFrameWnd::Serialize","pos":[7983,8012]},{"pos":[8046,8085],"content":"(Overrides <ph id=\"ph1\">`CPaneFrameWnd::Serialize`</ph>.)","source":"(Overrides `CPaneFrameWnd::Serialize`.)"},{"content":"CMultiPaneFrameWnd::SetDockState","pos":[8091,8123]},{"content":"Sets the docking state.","pos":[8160,8183]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::SetDockState<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__setdockstate)</ept>.)","pos":[8184,8298],"source":" (Overrides [CPaneFrameWnd::SetDockState](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__setdockstate).)"},{"content":"CMultiPaneFrameWnd::SetLastFocusedPane","pos":[8304,8342]},{"content":"CMultiPaneFrameWnd::SetPreDockState","pos":[8391,8426]},{"content":"Sets the predocking state.","pos":[8466,8492]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::SetPreDockState<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__setpredockstate)</ept>.)","pos":[8493,8613],"source":" (Overrides [CPaneFrameWnd::SetPreDockState](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__setpredockstate).)"},{"content":"CMultiPaneFrameWnd::StoreRecentDockSiteInfo","pos":[8619,8662]},{"pos":[8710,8846],"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::StoreRecentDockSiteInfo<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__storerecentdocksiteinfo)</ept>.)","source":"(Overrides [CPaneFrameWnd::StoreRecentDockSiteInfo](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__storerecentdocksiteinfo).)"},{"content":"CMultiPaneFrameWnd::StoreRecentTabRelatedInfo","pos":[8852,8897]},{"pos":[8947,9087],"content":"(Overrides <bpt id=\"p1\">[</bpt>CPaneFrameWnd::StoreRecentTabRelatedInfo<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__storerecenttabrelatedinfo)</ept>.)","source":"(Overrides [CPaneFrameWnd::StoreRecentTabRelatedInfo](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__storerecenttabrelatedinfo).)"},{"content":"Remarks","pos":[9097,9104]},{"pos":[9108,9238],"content":"Most of the methods in this class override methods in the <bpt id=\"p1\">[</bpt>CPaneFrameWnd Class<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md)</ept> class.","source":"Most of the methods in this class override methods in the [CPaneFrameWnd Class](../../mfc/reference/cpaneframewnd-class.md) class."},{"pos":[9245,9443],"content":"If a pane uses the <ph id=\"ph1\">`AFX_CBRS_AUTO_ROLLUP`</ph> style and the user docks that pane to a multi-pane frame window, the user can roll up the window regardless of the style settings of the other docked panes.","source":"If a pane uses the `AFX_CBRS_AUTO_ROLLUP` style and the user docks that pane to a multi-pane frame window, the user can roll up the window regardless of the style settings of the other docked panes."},{"pos":[9450,9583],"content":"The framework automatically creates a <ph id=\"ph1\">`CMultiPaneFrameWnd`</ph> object when the user floats a pane that uses the <ph id=\"ph2\">`CBRS_FLOAT_MULTI`</ph> style.","source":"The framework automatically creates a `CMultiPaneFrameWnd` object when the user floats a pane that uses the `CBRS_FLOAT_MULTI` style."},{"pos":[9590,9753],"content":"For information about deriving a class from the <ph id=\"ph1\">`CPaneFrameWnd`</ph> class and creating it dynamically, see <bpt id=\"p1\">[</bpt>CPaneFrameWnd<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md)</ept>.","source":"For information about deriving a class from the `CPaneFrameWnd` class and creating it dynamically, see [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md)."},{"content":"Example","pos":[9762,9769]},{"content":"The following example demonstrates how to retrieve a pointer to a <ph id=\"ph1\">`CMultiPaneFrameWnd`</ph> object.","pos":[9773,9867],"source":"The following example demonstrates how to retrieve a pointer to a `CMultiPaneFrameWnd` object."},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>Set Pane Size sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[9868,9953],"source":" This code snippet is part of the [Set Pane Size sample](../../visual-cpp-samples.md)."},{"pos":[9971,9992],"content":"NVC_MFC_SetPaneSize#4"},{"content":"Inheritance Hierarchy","pos":[10071,10092]},{"content":"CObject","pos":[10097,10104]},{"content":"CCmdTarget","pos":[10151,10161]},{"content":"CWnd","pos":[10211,10215]},{"content":"CPaneFrameWnd","pos":[10259,10272]},{"content":"CMultiPaneFrameWnd","pos":[10325,10343]},{"content":"Requirements","pos":[10402,10414]},{"pos":[10418,10452],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxMultiPaneFrameWnd.h","source":"**Header:** afxMultiPaneFrameWnd.h"},{"pos":[10506,10533],"content":"CMultiPaneFrameWnd::AddPane"},{"content":"Parameters","pos":[10700,10710]},{"pos":[10714,10718],"content":"[in]"},{"content":"Remarks","pos":[10735,10742]},{"pos":[10802,10835],"content":"CMultiPaneFrameWnd::AddRecentPane"},{"content":"Parameters","pos":[11012,11022]},{"pos":[11026,11030],"content":"[in]"},{"content":"Return Value","pos":[11047,11059]},{"content":"Remarks","pos":[11069,11076]},{"pos":[11135,11167],"content":"CMultiPaneFrameWnd::AdjustLayout"},{"content":"Remarks","pos":[11324,11331]},{"pos":[11394,11430],"content":"CMultiPaneFrameWnd::AdjustPaneFrames"},{"content":"Remarks","pos":[11591,11598]},{"pos":[11667,11709],"content":"CMultiPaneFrameWnd::CalcExpectedDockedRect"},{"content":"Parameters","pos":[12001,12011]},{"content":"[in]","pos":[12015,12019]},{"content":"[in]","pos":[12036,12040]},{"content":"[in]","pos":[12054,12058]},{"content":"[in]","pos":[12075,12079]},{"content":"[in]","pos":[12094,12098]},{"content":"Remarks","pos":[12122,12129]},{"pos":[12189,12222],"content":"CMultiPaneFrameWnd::CanBeAttached"},{"content":"Return Value","pos":[12389,12401]},{"content":"Remarks","pos":[12411,12418]},{"pos":[12482,12519],"content":"CMultiPaneFrameWnd::CanBeDockedToPane"},{"content":"Parameters","pos":[12722,12732]},{"pos":[12736,12740],"content":"[in]"},{"content":"Return Value","pos":[12764,12776]},{"content":"Remarks","pos":[12786,12793]},{"pos":[12862,12904],"content":"CMultiPaneFrameWnd::CheckGripperVisibility"},{"content":"Remarks","pos":[13071,13078]},{"pos":[13139,13173],"content":"CMultiPaneFrameWnd::CloseMiniFrame"},{"content":"Remarks","pos":[13332,13339]},{"pos":[13409,13452],"content":"CMultiPaneFrameWnd::ConvertToTabbedDocument"},{"content":"Remarks","pos":[13620,13627]},{"pos":[13683,13712],"content":"CMultiPaneFrameWnd::DockFrame"},{"content":"Parameters","pos":[13932,13942]},{"content":"[in]","pos":[13946,13950]},{"content":"[in]","pos":[13969,13973]},{"content":"Return Value","pos":[13996,14008]},{"content":"Remarks","pos":[14018,14025]},{"pos":[14080,14108],"content":"CMultiPaneFrameWnd::DockPane"},{"content":"Parameters","pos":[14286,14296]},{"pos":[14300,14304],"content":"[in]"},{"content":"Return Value","pos":[14327,14339]},{"content":"Remarks","pos":[14349,14356]},{"pos":[14428,14473],"content":"CMultiPaneFrameWnd::DockRecentPaneToMainFrame"},{"content":"Parameters","pos":[14662,14672]},{"pos":[14676,14680],"content":"[in]"},{"content":"Remarks","pos":[14697,14704]},{"pos":[14765,14799],"content":"CMultiPaneFrameWnd::GetCaptionText"},{"content":"Return Value","pos":[14961,14973]},{"content":"Remarks","pos":[14983,14990]},{"pos":[15056,15095],"content":"CMultiPaneFrameWnd::GetFirstVisiblePane"},{"content":"Return Value","pos":[15269,15281]},{"content":"Remarks","pos":[15291,15298]},{"pos":[15352,15379],"content":"CMultiPaneFrameWnd::GetPane"},{"content":"Return Value","pos":[15541,15553]},{"content":"Remarks","pos":[15563,15570]},{"pos":[15640,15683],"content":"CMultiPaneFrameWnd::GetPaneContainerManager"},{"content":"Returns a reference to the internal container manager object.","pos":[15687,15748]},{"content":"Return Value","pos":[15823,15835]},{"content":"A reference to the internal container manager object.","pos":[15839,15892]},{"content":"Remarks","pos":[15902,15909]},{"pos":[15913,16049],"content":"This method can be used to access the internal <bpt id=\"p1\">[</bpt>CPaneContainerManager Class<ept id=\"p1\">](../../mfc/reference/cpanecontainermanager-class.md)</ept> object.","source":"This method can be used to access the internal [CPaneContainerManager Class](../../mfc/reference/cpanecontainermanager-class.md) object."},{"pos":[16108,16140],"content":"CMultiPaneFrameWnd::GetPaneCount"},{"content":"Return Value","pos":[16305,16317]},{"content":"Remarks","pos":[16327,16334]},{"pos":[16400,16439],"content":"CMultiPaneFrameWnd::GetVisiblePaneCount"},{"content":"Return Value","pos":[16611,16623]},{"content":"Remarks","pos":[16633,16640]},{"pos":[16697,16727],"content":"CMultiPaneFrameWnd::InsertPane"},{"content":"Parameters","pos":[16954,16964]},{"content":"[in]","pos":[16968,16972]},{"content":"[in]","pos":[16990,16994]},{"content":"[in]","pos":[17008,17012]},{"content":"Return Value","pos":[17031,17043]},{"content":"Remarks","pos":[17053,17060]},{"pos":[17116,17145],"content":"CMultiPaneFrameWnd::LoadState"},{"content":"Parameters","pos":[17363,17373]},{"content":"[in]","pos":[17377,17381]},{"content":"[in]","pos":[17403,17407]},{"content":"Return Value","pos":[17424,17436]},{"content":"Remarks","pos":[17446,17453]},{"pos":[17517,17554],"content":"CMultiPaneFrameWnd::OnDockToRecentPos"},{"content":"Remarks","pos":[17716,17723]},{"pos":[17787,17824],"content":"CMultiPaneFrameWnd::OnKillRollUpTimer"},{"content":"Remarks","pos":[17986,17993]},{"pos":[18058,18096],"content":"CMultiPaneFrameWnd::OnPaneRecalcLayout"},{"content":"Remarks","pos":[18259,18266]},{"pos":[18329,18365],"content":"CMultiPaneFrameWnd::OnSetRollUpTimer"},{"content":"Remarks","pos":[18526,18533]},{"pos":[18590,18620],"content":"CMultiPaneFrameWnd::OnShowPane"},{"content":"Parameters","pos":[18817,18827]},{"content":"[in]","pos":[18831,18835]},{"content":"[in]","pos":[18846,18850]},{"content":"Remarks","pos":[18868,18875]},{"pos":[18935,18968],"content":"CMultiPaneFrameWnd::PaneFromPoint"},{"content":"Parameters","pos":[19202,19212]},{"content":"[in]","pos":[19216,19220]},{"content":"[in]","pos":[19232,19236]},{"content":"[in]","pos":[19255,19259]},{"content":"Return Value","pos":[19288,19300]},{"content":"Remarks","pos":[19310,19317]},{"pos":[19383,19422],"content":"CMultiPaneFrameWnd::RemoveNonValidPanes"},{"content":"Remarks","pos":[19586,19593]},{"pos":[19650,19680],"content":"CMultiPaneFrameWnd::RemovePane"},{"content":"Parameters","pos":[19921,19931]},{"content":"[in]","pos":[19935,19939]},{"content":"[in]","pos":[19950,19954]},{"content":"[in]","pos":[19969,19973]},{"content":"Remarks","pos":[20003,20010]},{"pos":[20068,20099],"content":"CMultiPaneFrameWnd::ReplacePane"},{"content":"Parameters","pos":[20312,20322]},{"content":"[in]","pos":[20326,20330]},{"content":"[in]","pos":[20344,20348]},{"content":"Remarks","pos":[20376,20383]},{"pos":[20439,20468],"content":"CMultiPaneFrameWnd::SaveState"},{"content":"Parameters","pos":[20686,20696]},{"content":"[in]","pos":[20700,20704]},{"content":"[in]","pos":[20726,20730]},{"content":"Return Value","pos":[20747,20759]},{"content":"Remarks","pos":[20769,20776]},{"pos":[20832,20861],"content":"CMultiPaneFrameWnd::Serialize"},{"content":"Parameters","pos":[21027,21037]},{"pos":[21041,21045],"content":"[in]"},{"content":"Remarks","pos":[21060,21067]},{"pos":[21126,21158],"content":"CMultiPaneFrameWnd::SetDockState"},{"content":"Parameters","pos":[21344,21354]},{"pos":[21358,21362],"content":"[in]"},{"content":"Remarks","pos":[21387,21394]},{"pos":[21459,21497],"content":"CMultiPaneFrameWnd::SetLastFocusedPane"},{"content":"Parameters","pos":[21661,21671]},{"pos":[21675,21679],"content":"[in]"},{"content":"Remarks","pos":[21696,21703]},{"pos":[21765,21800],"content":"CMultiPaneFrameWnd::SetPreDockState"},{"content":"Parameters","pos":[22076,22086]},{"content":"[in]","pos":[22090,22094]},{"content":"[in]","pos":[22113,22117]},{"content":"[in]","pos":[22134,22138]},{"content":"Return Value","pos":[22161,22173]},{"content":"Remarks","pos":[22183,22190]},{"pos":[22260,22303],"content":"CMultiPaneFrameWnd::StoreRecentDockSiteInfo"},{"content":"Parameters","pos":[22482,22492]},{"pos":[22496,22500],"content":"[in]"},{"content":"Remarks","pos":[22517,22524]},{"pos":[22596,22641],"content":"CMultiPaneFrameWnd::StoreRecentTabRelatedInfo"},{"content":"Parameters","pos":[22875,22885]},{"content":"[in]","pos":[22889,22893]},{"content":"[in]","pos":[22911,22915]},{"content":"Remarks","pos":[22938,22945]},{"content":"See Also","pos":[22954,22962]},{"content":"Hierarchy Chart","pos":[22967,22982]},{"content":"Classes","pos":[23019,23026]},{"content":"CPaneFrameWnd Class","pos":[23069,23088]}],"content":"---\ntitle: \"CMultiPaneFrameWnd Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMultiPaneFrameWnd\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CMultiPaneFrameWnd class\"\nms.assetid: 989a548e-0d70-46b7-a513-8cf740e1be3e\ncaps.latest.revision: 36\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMultiPaneFrameWnd Class\nThe `CMultiPaneFrameWnd` class extends [CPaneFrameWnd Class](../../mfc/reference/cpaneframewnd-class.md). It can support multiple panes. Instead of a single embedded handle to a control bar, `CMultiPaneFrameWnd` contains a [CPaneContainerManager Class](../../mfc/reference/cpanecontainermanager-class.md) object that enables the user to dock one `CMultiPaneFrameWnd` to another and dynamically create multiple floating, tabbed windows.  \n  \n## Syntax  \n  \n```  \nclass CMultiPaneFrameWnd : public CPaneFrameWnd  \n```  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMultiPaneFrameWnd::AddPane](#cmultipaneframewnd__addpane)|Adds a pane. (Overrides [CPaneFrameWnd::AddPane](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__addpane).)|  \n|[CMultiPaneFrameWnd::AddRecentPane](#cmultipaneframewnd__addrecentpane)||  \n|[CMultiPaneFrameWnd::AdjustLayout](#cmultipaneframewnd__adjustlayout)|Adjusts the layout of the mini-frame window. (Overrides [CPaneFrameWnd::AdjustLayout](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__adjustlayout).)|  \n|[CMultiPaneFrameWnd::AdjustPaneFrames](#cmultipaneframewnd__adjustpaneframes)|(Overrides [CPaneFrameWnd::AdjustPaneFrames](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__adjustpaneframes).)|  \n|[CMultiPaneFrameWnd::CalcExpectedDockedRect](#cmultipaneframewnd__calcexpecteddockedrect)|Calculates the expected rectangle of a docked window. (Overrides [CPaneFrameWnd::CalcExpectedDockedRect](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__calcexpecteddockedrect).)|  \n|[CMultiPaneFrameWnd::CanBeAttached](#cmultipaneframewnd__canbeattached)|Determines whether the current pane can dock to another pane or frame window. (Overrides [CPaneFrameWnd::CanBeAttached](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__canbeattached).)|  \n|[CMultiPaneFrameWnd::CanBeDockedToPane](#cmultipaneframewnd__canbedockedtopane)|Determines whether the mini-frame window can dock to a pane. (Overrides [CPaneFrameWnd::CanBeDockedToPane](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__canbedockedtopane).)|  \n|[CMultiPaneFrameWnd::CheckGripperVisibility](#cmultipaneframewnd__checkgrippervisibility)|(Overrides [CPaneFrameWnd::CheckGripperVisibility](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__checkgrippervisibility).)|  \n|[CMultiPaneFrameWnd::CloseMiniFrame](#cmultipaneframewnd__closeminiframe)|(Overrides `CPaneFrameWnd::CloseMiniFrame`.)|  \n|[CMultiPaneFrameWnd::ConvertToTabbedDocument](#cmultipaneframewnd__converttotabbeddocument)|Converts the pane to a tabbed document. (Overrides [CPaneFrameWnd::ConvertToTabbedDocument](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__converttotabbeddocument).)|  \n|[CMultiPaneFrameWnd::DockFrame](#cmultipaneframewnd__dockframe)||  \n|[CMultiPaneFrameWnd::DockPane](#cmultipaneframewnd__dockpane)|Docks the pane. (Overrides [CPaneFrameWnd::DockPane](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__dockpane).)|  \n|[CMultiPaneFrameWnd::DockRecentPaneToMainFrame](#cmultipaneframewnd__dockrecentpanetomainframe)||  \n|[CMultiPaneFrameWnd::GetCaptionText](#cmultipaneframewnd__getcaptiontext)|Returns the caption text. (Overrides [CPaneFrameWnd::GetCaptionText](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__getcaptiontext).)|  \n|[CMultiPaneFrameWnd::GetPaneContainerManager](#cmultipaneframewnd__getpanecontainermanager)|Returns a reference to the internal container manager object.|  \n|[CMultiPaneFrameWnd::GetFirstVisiblePane](#cmultipaneframewnd__getfirstvisiblepane)|Returns the first visible pane that is contained in a mini-frame window. (Overrides [CPaneFrameWnd::GetFirstVisiblePane](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__getfirstvisiblepane).)|  \n|[CMultiPaneFrameWnd::GetPane](#cmultipaneframewnd__getpane)|Returns a pane that is contained in the mini-frame window. (Overrides [CPaneFrameWnd::GetPane](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__getpane).)|  \n|[CMultiPaneFrameWnd::GetPaneCount](#cmultipaneframewnd__getpanecount)|Returns the number of panes that are contained in a mini-frame window. (Overrides [CPaneFrameWnd::GetPaneCount](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__getpanecount).)|  \n|[CMultiPaneFrameWnd::GetVisiblePaneCount](#cmultipaneframewnd__getvisiblepanecount)|Returns the number of visible panes that are contained in a mini-frame window. (Overrides [CPaneFrameWnd::GetVisiblePaneCount](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__getvisiblepanecount).)|  \n|[CMultiPaneFrameWnd::InsertPane](#cmultipaneframewnd__insertpane)||  \n|[CMultiPaneFrameWnd::LoadState](#cmultipaneframewnd__loadstate)|Loads the pane's state from the registry. (Overrides [CPaneFrameWnd::LoadState](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__loadstate).)|  \n|[CMultiPaneFrameWnd::OnDockToRecentPos](#cmultipaneframewnd__ondocktorecentpos)|Docks the mini-frame window at its most recent position. (Overrides [CPaneFrameWnd::OnDockToRecentPos](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__ondocktorecentpos).)|  \n|[CMultiPaneFrameWnd::OnKillRollUpTimer](#cmultipaneframewnd__onkillrolluptimer)|Stops the rollup timer. (Overrides [CPaneFrameWnd::OnKillRollUpTimer](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__onkillrolluptimer).)|  \n|[CMultiPaneFrameWnd::OnPaneRecalcLayout](#cmultipaneframewnd__onpanerecalclayout)|Adjusts the layout of a pane inside a mini-frame window. (Overrides [CPaneFrameWnd::OnPaneRecalcLayout](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__onpanerecalclayout).)|  \n|[CMultiPaneFrameWnd::OnSetRollUpTimer](#cmultipaneframewnd__onsetrolluptimer)|Sets the rollup timer. (Overrides [CPaneFrameWnd::OnSetRollUpTimer](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__onsetrolluptimer).)|  \n|[CMultiPaneFrameWnd::OnShowPane](#cmultipaneframewnd__onshowpane)|Called by the framework when a pane in the mini-frame window is hidden or displayed. (Overrides [CPaneFrameWnd::OnShowPane](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__onshowpane).)|  \n|[CMultiPaneFrameWnd::PaneFromPoint](#cmultipaneframewnd__panefrompoint)|Returns a pane if it contains a user-supplied point inside a mini-frame window. (Overrides [CPaneFrameWnd::PaneFromPoint](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__panefrompoint).)|  \n|[CMultiPaneFrameWnd::RemoveNonValidPanes](#cmultipaneframewnd__removenonvalidpanes)|Called by the framework to remove non-valid panes. (Overrides [CPaneFrameWnd::RemoveNonValidPanes](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__removenonvalidpanes).)|  \n|[CMultiPaneFrameWnd::RemovePane](#cmultipaneframewnd__removepane)|Removes a pane from the mini-frame window. (Overrides [CPaneFrameWnd::RemovePane](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__removepane).)|  \n|[CMultiPaneFrameWnd::ReplacePane](#cmultipaneframewnd__replacepane)|Replaces one pane with another. (Overrides [CPaneFrameWnd::ReplacePane](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__replacepane).)|  \n|[CMultiPaneFrameWnd::SaveState](#cmultipaneframewnd__savestate)|Saves the pane's state to the registry. (Overrides [CPaneFrameWnd::SaveState](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__savestate).)|  \n|[CMultiPaneFrameWnd::Serialize](#cmultipaneframewnd__serialize)|(Overrides `CPaneFrameWnd::Serialize`.)|  \n|[CMultiPaneFrameWnd::SetDockState](#cmultipaneframewnd__setdockstate)|Sets the docking state. (Overrides [CPaneFrameWnd::SetDockState](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__setdockstate).)|  \n|[CMultiPaneFrameWnd::SetLastFocusedPane](#cmultipaneframewnd__setlastfocusedpane)||  \n|[CMultiPaneFrameWnd::SetPreDockState](#cmultipaneframewnd__setpredockstate)|Sets the predocking state. (Overrides [CPaneFrameWnd::SetPreDockState](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__setpredockstate).)|  \n|[CMultiPaneFrameWnd::StoreRecentDockSiteInfo](#cmultipaneframewnd__storerecentdocksiteinfo)|(Overrides [CPaneFrameWnd::StoreRecentDockSiteInfo](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__storerecentdocksiteinfo).)|  \n|[CMultiPaneFrameWnd::StoreRecentTabRelatedInfo](#cmultipaneframewnd__storerecenttabrelatedinfo)|(Overrides [CPaneFrameWnd::StoreRecentTabRelatedInfo](../../mfc/reference/cpaneframewnd-class.md#cpaneframewnd__storerecenttabrelatedinfo).)|  \n  \n## Remarks  \n Most of the methods in this class override methods in the [CPaneFrameWnd Class](../../mfc/reference/cpaneframewnd-class.md) class.  \n  \n If a pane uses the `AFX_CBRS_AUTO_ROLLUP` style and the user docks that pane to a multi-pane frame window, the user can roll up the window regardless of the style settings of the other docked panes.  \n  \n The framework automatically creates a `CMultiPaneFrameWnd` object when the user floats a pane that uses the `CBRS_FLOAT_MULTI` style.  \n  \n For information about deriving a class from the `CPaneFrameWnd` class and creating it dynamically, see [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md).  \n  \n## Example  \n The following example demonstrates how to retrieve a pointer to a `CMultiPaneFrameWnd` object. This code snippet is part of the [Set Pane Size sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_SetPaneSize#4](../../mfc/reference/codesnippet/cpp/cmultipaneframewnd-class_1.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md)  \n  \n [CMultiPaneFrameWnd](../../mfc/reference/cmultipaneframewnd-class.md)  \n  \n## Requirements  \n **Header:** afxMultiPaneFrameWnd.h  \n  \n##  <a name=\"cmultipaneframewnd__addpane\"></a>  CMultiPaneFrameWnd::AddPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void AddPane(CBasePane* pWnd);\n```  \n  \n### Parameters  \n [in] `pWnd`  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__addrecentpane\"></a>  CMultiPaneFrameWnd::AddRecentPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL AddRecentPane(CDockablePane* pBar);\n```  \n  \n### Parameters  \n [in] `pBar`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__adjustlayout\"></a>  CMultiPaneFrameWnd::AdjustLayout  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void AdjustLayout();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__adjustpaneframes\"></a>  CMultiPaneFrameWnd::AdjustPaneFrames  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void AdjustPaneFrames();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__calcexpecteddockedrect\"></a>  CMultiPaneFrameWnd::CalcExpectedDockedRect  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void CalcExpectedDockedRect(\n    CWnd* pWndToDock,  \n    CPoint ptMouse,  \n    CRect& rectResult,  \n    BOOL& bDrawTab,  \n    CDockablePane** ppTargetBar);\n```  \n  \n### Parameters  \n [in] `pWndToDock`  \n [in] `ptMouse`  \n [in] `rectResult`  \n [in] `bDrawTab`  \n [in] `ppTargetBar`  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__canbeattached\"></a>  CMultiPaneFrameWnd::CanBeAttached  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL CanBeAttached() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__canbedockedtopane\"></a>  CMultiPaneFrameWnd::CanBeDockedToPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL CanBeDockedToPane(const CDockablePane* pDockingBar) const;\n\n \n```  \n  \n### Parameters  \n [in] `pDockingBar`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__checkgrippervisibility\"></a>  CMultiPaneFrameWnd::CheckGripperVisibility  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void CheckGripperVisibility();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__closeminiframe\"></a>  CMultiPaneFrameWnd::CloseMiniFrame  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void CloseMiniFrame();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__converttotabbeddocument\"></a>  CMultiPaneFrameWnd::ConvertToTabbedDocument  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void ConvertToTabbedDocument();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__dockframe\"></a>  CMultiPaneFrameWnd::DockFrame  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL DockFrame(\n    CPaneFrameWnd* pDockedFrame,  \n    AFX_DOCK_METHOD dockMethod);\n```  \n  \n### Parameters  \n [in] `pDockedFrame`  \n [in] `dockMethod`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__dockpane\"></a>  CMultiPaneFrameWnd::DockPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL DockPane(CDockablePane* pDockedBar);\n```  \n  \n### Parameters  \n [in] `pDockedBar`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__dockrecentpanetomainframe\"></a>  CMultiPaneFrameWnd::DockRecentPaneToMainFrame  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void DockRecentPaneToMainFrame(CDockablePane* pBar);\n```  \n  \n### Parameters  \n [in] `pBar`  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__getcaptiontext\"></a>  CMultiPaneFrameWnd::GetCaptionText  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual CString GetCaptionText();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__getfirstvisiblepane\"></a>  CMultiPaneFrameWnd::GetFirstVisiblePane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual CWnd* GetFirstVisiblePane() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__getpane\"></a>  CMultiPaneFrameWnd::GetPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual CWnd* GetPane() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__getpanecontainermanager\"></a>  CMultiPaneFrameWnd::GetPaneContainerManager  \n Returns a reference to the internal container manager object.  \n  \n```  \nCPaneContainerManager& GetPaneContainerManager();\n```  \n  \n### Return Value  \n A reference to the internal container manager object.  \n  \n### Remarks  \n This method can be used to access the internal [CPaneContainerManager Class](../../mfc/reference/cpanecontainermanager-class.md) object.  \n  \n##  <a name=\"cmultipaneframewnd__getpanecount\"></a>  CMultiPaneFrameWnd::GetPaneCount  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual int GetPaneCount() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__getvisiblepanecount\"></a>  CMultiPaneFrameWnd::GetVisiblePaneCount  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual int GetVisiblePaneCount() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__insertpane\"></a>  CMultiPaneFrameWnd::InsertPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL InsertPane(\n    CBasePane* pControlBar,  \n    CBasePane* pTarget,  \n    BOOL bAfter);\n```  \n  \n### Parameters  \n [in] `pControlBar`  \n [in] `pTarget`  \n [in] `bAfter`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__loadstate\"></a>  CMultiPaneFrameWnd::LoadState  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL LoadState(\n    LPCTSTR lpszProfileName = NULL,  \n    UINT uiID = (UINT) -1);\n```  \n  \n### Parameters  \n [in] `lpszProfileName`  \n [in] `uiID`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__ondocktorecentpos\"></a>  CMultiPaneFrameWnd::OnDockToRecentPos  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDockToRecentPos();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__onkillrolluptimer\"></a>  CMultiPaneFrameWnd::OnKillRollUpTimer  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnKillRollUpTimer();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__onpanerecalclayout\"></a>  CMultiPaneFrameWnd::OnPaneRecalcLayout  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnPaneRecalcLayout();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__onsetrolluptimer\"></a>  CMultiPaneFrameWnd::OnSetRollUpTimer  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnSetRollUpTimer();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__onshowpane\"></a>  CMultiPaneFrameWnd::OnShowPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnShowPane(\n    CDockablePane* pBar,  \n    BOOL bShow);\n```  \n  \n### Parameters  \n [in] `pBar`  \n [in] `bShow`  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__panefrompoint\"></a>  CMultiPaneFrameWnd::PaneFromPoint  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual CBasePane* PaneFromPoint(\n    CPoint point,  \n    int nSensitivity,  \n    BOOL bCheckVisibility);\n```  \n  \n### Parameters  \n [in] `point`  \n [in] `nSensitivity`  \n [in] `bCheckVisibility`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__removenonvalidpanes\"></a>  CMultiPaneFrameWnd::RemoveNonValidPanes  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void RemoveNonValidPanes();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__removepane\"></a>  CMultiPaneFrameWnd::RemovePane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void RemovePane(\n    CBasePane* pBar,  \n    BOOL bDestroy = FALSE,  \n    BOOL bNoDelayedDestroy = TRUE);\n```  \n  \n### Parameters  \n [in] `pBar`  \n [in] `bDestroy`  \n [in] `bNoDelayedDestroy`  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__replacepane\"></a>  CMultiPaneFrameWnd::ReplacePane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void ReplacePane(\n    CBasePane* pBarOrg,  \n    CBasePane* pBarReplaceWith);\n```  \n  \n### Parameters  \n [in] `pBarOrg`  \n [in] `pBarReplaceWith`  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__savestate\"></a>  CMultiPaneFrameWnd::SaveState  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL SaveState(\n    LPCTSTR lpszProfileName = NULL,  \n    UINT uiID = (UINT) -1);\n```  \n  \n### Parameters  \n [in] `lpszProfileName`  \n [in] `uiID`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__serialize\"></a>  CMultiPaneFrameWnd::Serialize  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void Serialize(CArchive& ar);\n```  \n  \n### Parameters  \n [in] `ar`  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__setdockstate\"></a>  CMultiPaneFrameWnd::SetDockState  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void SetDockState(CDockingManager* pDockManager);\n```  \n  \n### Parameters  \n [in] `pDockManager`  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__setlastfocusedpane\"></a>  CMultiPaneFrameWnd::SetLastFocusedPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetLastFocusedPane(HWND hwnd);\n```  \n  \n### Parameters  \n [in] `hwnd`  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__setpredockstate\"></a>  CMultiPaneFrameWnd::SetPreDockState  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL SetPreDockState(\n    AFX_PREDOCK_STATE preDockState,  \n    CBasePane* pBarToDock = NULL,  \n    AFX_DOCK_METHOD dockMethod = DM_MOUSE);\n```  \n  \n### Parameters  \n [in] `preDockState`  \n [in] `pBarToDock`  \n [in] `dockMethod`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__storerecentdocksiteinfo\"></a>  CMultiPaneFrameWnd::StoreRecentDockSiteInfo  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void StoreRecentDockSiteInfo(CPane* pBar);\n```  \n  \n### Parameters  \n [in] `pBar`  \n  \n### Remarks  \n  \n##  <a name=\"cmultipaneframewnd__storerecenttabrelatedinfo\"></a>  CMultiPaneFrameWnd::StoreRecentTabRelatedInfo  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void StoreRecentTabRelatedInfo(\n    CDockablePane* pDockingBar,  \n    CDockablePane* pTabbedBar);\n```  \n  \n### Parameters  \n [in] `pDockingBar`  \n [in] `pTabbedBar`  \n  \n### Remarks  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CPaneFrameWnd Class](../../mfc/reference/cpaneframewnd-class.md)\n"}