{"nodes":[{"pos":[12,51],"content":"switch Statement (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"switch Statement (C++) | Microsoft Docs","pos":[0,39]}]},{"content":"switch Statement (C++)","pos":[768,790]},{"content":"Allows selection among multiple sections of code, depending on the value of an integral expression.","pos":[791,890]},{"content":"Syntax","pos":[899,905]},{"content":"Remarks","pos":[1032,1039]},{"content":"The <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> must be of an integral type or of a class type for which there is an unambiguous conversion to integral type.","pos":[1043,1169],"source":"The *expression* must be of an integral type or of a class type for which there is an unambiguous conversion to integral type."},{"content":"Integral promotion is performed as described in <bpt id=\"p1\">[</bpt>Standard Conversions<ept id=\"p1\">](standard-conversions.md)</ept>.","pos":[1170,1266],"source":" Integral promotion is performed as described in [Standard Conversions](standard-conversions.md)."},{"content":"The <ph id=\"ph1\">`switch`</ph> statement body consists of a series of <bpt id=\"p1\">**</bpt>case<ept id=\"p1\">**</ept> labels and an optional <bpt id=\"p2\">**</bpt>default<ept id=\"p2\">**</ept> label.","pos":[1273,1375],"source":"The `switch` statement body consists of a series of **case** labels and an optional **default** label."},{"content":"No two constant expressions in <bpt id=\"p1\">**</bpt>case<ept id=\"p1\">**</ept> statements can evaluate to the same value.","pos":[1376,1458],"source":" No two constant expressions in **case** statements can evaluate to the same value."},{"content":"The <bpt id=\"p1\">**</bpt>default<ept id=\"p1\">**</ept> label can appear only once.","pos":[1459,1502],"source":" The **default** label can appear only once."},{"content":"The labeled statements are not syntactic requirements, but the <ph id=\"ph1\">`switch`</ph> statement is meaningless without them.","pos":[1503,1613],"source":" The labeled statements are not syntactic requirements, but the `switch` statement is meaningless without them."},{"content":"The default statement need not come at the end; it can appear anywhere in the body of the switch statement.","pos":[1616,1723]},{"content":"A case or default label can only appear inside a switch statement.","pos":[1724,1790]},{"content":"The <bpt id=\"p1\">*</bpt>constant-expression<ept id=\"p1\">*</ept> in each <bpt id=\"p2\">**</bpt>case<ept id=\"p2\">**</ept> label is converted to the type of <bpt id=\"p3\">*</bpt>expression<ept id=\"p3\">*</ept> and compared with <bpt id=\"p4\">*</bpt>expression<ept id=\"p4\">*</ept> for equality.","pos":[1797,1931],"source":"The *constant-expression* in each **case** label is converted to the type of *expression* and compared with *expression* for equality."},{"content":"Control passes to the statement whose <bpt id=\"p1\">**</bpt>case<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>constant-expression<ept id=\"p2\">*</ept> matches the value of <bpt id=\"p3\">*</bpt>expression<ept id=\"p3\">*</ept>.","pos":[1932,2035],"source":" Control passes to the statement whose **case** *constant-expression* matches the value of *expression*."},{"content":"The resulting behavior is shown in the following table.","pos":[2036,2091]},{"content":"Switch Statement Behavior","pos":[2101,2126]},{"content":"Condition","pos":[2133,2142]},{"content":"Action","pos":[2143,2149]},{"content":"Converted value matches that of the promoted controlling expression.","pos":[2187,2255]},{"content":"Control is transferred to the statement following that label.","pos":[2256,2317]},{"pos":[2322,2419],"content":"None of the constants match the constants in the <bpt id=\"p1\">**</bpt>case<ept id=\"p1\">**</ept> labels; a <bpt id=\"p2\">**</bpt>default<ept id=\"p2\">**</ept> label is present.","source":"None of the constants match the constants in the **case** labels; a **default** label is present."},{"pos":[2420,2468],"content":"Control is transferred to the <bpt id=\"p1\">**</bpt>default<ept id=\"p1\">**</ept> label.","source":"Control is transferred to the **default** label."},{"pos":[2473,2572],"content":"None of the constants match the constants in the <bpt id=\"p1\">**</bpt>case<ept id=\"p1\">**</ept> labels; <bpt id=\"p2\">**</bpt>default<ept id=\"p2\">**</ept> label is not present.","source":"None of the constants match the constants in the **case** labels; **default** label is not present."},{"pos":[2573,2642],"content":"Control is transferred to the statement after the <ph id=\"ph1\">`switch`</ph> statement.","source":"Control is transferred to the statement after the `switch` statement."},{"content":"If a matching expression is found, control is not impeded by subsequent <bpt id=\"p1\">**</bpt>case<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>default<ept id=\"p2\">**</ept> labels.","pos":[2650,2753],"source":"If a matching expression is found, control is not impeded by subsequent **case** or **default** labels."},{"content":"The <bpt id=\"p1\">[</bpt>break<ept id=\"p1\">](../cpp/break-statement-cpp.md)</ept> statement is used to stop execution and transfer control to the statement after the <ph id=\"ph1\">`switch`</ph> statement.","pos":[2754,2900],"source":" The [break](../cpp/break-statement-cpp.md) statement is used to stop execution and transfer control to the statement after the `switch` statement."},{"content":"Without a <bpt id=\"p1\">**</bpt>break<ept id=\"p1\">**</ept> statement, every statement from the matched <bpt id=\"p2\">**</bpt>case<ept id=\"p2\">**</ept> label to the end of the <ph id=\"ph1\">`switch`</ph>, including the <bpt id=\"p3\">**</bpt>default<ept id=\"p3\">**</ept>, is executed.","pos":[2901,3047],"source":" Without a **break** statement, every statement from the matched **case** label to the end of the `switch`, including the **default**, is executed."},{"content":"For example:","pos":[3048,3060]},{"content":"In the above example, <ph id=\"ph1\">`capa`</ph> is incremented if <ph id=\"ph2\">`c`</ph> is an uppercase <ph id=\"ph3\">`A`</ph>.","pos":[3676,3747],"source":"In the above example, `capa` is incremented if `c` is an uppercase `A`."},{"content":"The <ph id=\"ph1\">`break`</ph> statement after <ph id=\"ph2\">`capa++`</ph> terminates execution of the <ph id=\"ph3\">`switch`</ph> statement body and control passes to the <ph id=\"ph4\">`while`</ph> loop.","pos":[3748,3876],"source":" The `break` statement after `capa++` terminates execution of the `switch` statement body and control passes to the `while` loop."},{"content":"Without the <ph id=\"ph1\">`break`</ph> statement, <ph id=\"ph2\">`lettera`</ph> and <ph id=\"ph3\">`nota`</ph> would also be incremented.","pos":[3877,3955],"source":" Without the `break` statement, `lettera` and `nota` would also be incremented."},{"content":"A similar purpose is served by the <ph id=\"ph1\">`break`</ph> statement for <ph id=\"ph2\">`case 'a'`</ph>.","pos":[3956,4024],"source":" A similar purpose is served by the `break` statement for `case 'a'`."},{"content":"If <ph id=\"ph1\">`c`</ph> is a lowercase <ph id=\"ph2\">`a`</ph>, <ph id=\"ph3\">`lettera`</ph> is incremented and the <ph id=\"ph4\">`break`</ph> statement terminates the <ph id=\"ph5\">`switch`</ph> statement body.","pos":[4025,4142],"source":" If `c` is a lowercase `a`, `lettera` is incremented and the `break` statement terminates the `switch` statement body."},{"content":"If <ph id=\"ph1\">`c`</ph> is not an <ph id=\"ph2\">`a`</ph> or <ph id=\"ph3\">`A`</ph>, the <ph id=\"ph4\">`default`</ph> statement is executed.","pos":[4143,4208],"source":" If `c` is not an `a` or `A`, the `default` statement is executed."},{"content":"An inner block of a <ph id=\"ph1\">`switch`</ph> statement can contain definitions with initializations as long as they are reachable — that is, not bypassed by all possible execution paths.","pos":[4215,4385],"source":"An inner block of a `switch` statement can contain definitions with initializations as long as they are reachable — that is, not bypassed by all possible execution paths."},{"content":"Names introduced using these declarations have local scope.","pos":[4386,4445]},{"content":"For example:","pos":[4446,4458]},{"content":"A <ph id=\"ph1\">`switch`</ph> statement can be nested.","pos":[5222,5257],"source":"A `switch` statement can be nested."},{"content":"In such cases, <bpt id=\"p1\">**</bpt>case<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>default<ept id=\"p2\">**</ept> labels associate with the closest <ph id=\"ph1\">`switch`</ph> statement that encloses them.","pos":[5258,5369],"source":" In such cases, **case** or **default** labels associate with the closest `switch` statement that encloses them."},{"content":"Microsoft Specific","pos":[5378,5396]},{"content":"Microsoft C does not limit the number of case values in a <ph id=\"ph1\">`switch`</ph> statement.","pos":[5400,5477],"source":"Microsoft C does not limit the number of case values in a `switch` statement."},{"content":"The number is limited only by the available memory.","pos":[5478,5529]},{"content":"ANSI C requires at least 257 case labels be allowed in a <ph id=\"ph1\">`switch`</ph> statement.","pos":[5530,5606],"source":" ANSI C requires at least 257 case labels be allowed in a `switch` statement."},{"content":"The default for Microsoft C is that the Microsoft extensions are enabled.","pos":[5613,5686]},{"content":"Use the <bpt id=\"p1\">[</bpt>/Za<ept id=\"p1\">](../build/reference/za-ze-disable-language-extensions.md)</ept> compiler option to disable these extensions.","pos":[5687,5802],"source":" Use the [/Za](../build/reference/za-ze-disable-language-extensions.md) compiler option to disable these extensions."},{"content":"END Microsoft Specific","pos":[5811,5833]},{"content":"See Also","pos":[5842,5850]},{"content":"Selection Statements","pos":[5855,5875]},{"content":"Keywords","pos":[5918,5926]}],"content":"---\ntitle: \"switch Statement (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"default\"\n  - \"default_cpp\"\n  - \"switch\"\n  - \"switch_cpp\"\n  - \"case\"\n  - \"case_cpp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"switch keyword [C++]\"\n  - \"case keyword [C++], in switch statements\"\n  - \"default keyword [C++]\"\nms.assetid: 6c3f3ed3-5593-463c-8f4b-b33742b455c6\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# switch Statement (C++)\nAllows selection among multiple sections of code, depending on the value of an integral expression.  \n  \n## Syntax  \n  \n```  \n  \n      switch ( expression )  \n   case constant-expression : statement  \n   [default  : statement]  \n```  \n  \n## Remarks  \n The *expression* must be of an integral type or of a class type for which there is an unambiguous conversion to integral type. Integral promotion is performed as described in [Standard Conversions](standard-conversions.md).  \n  \n The `switch` statement body consists of a series of **case** labels and an optional **default** label. No two constant expressions in **case** statements can evaluate to the same value. The **default** label can appear only once. The labeled statements are not syntactic requirements, but the `switch` statement is meaningless without them.   The default statement need not come at the end; it can appear anywhere in the body of the switch statement. A case or default label can only appear inside a switch statement.  \n  \n The *constant-expression* in each **case** label is converted to the type of *expression* and compared with *expression* for equality. Control passes to the statement whose **case** *constant-expression* matches the value of *expression*. The resulting behavior is shown in the following table.  \n  \n### Switch Statement Behavior  \n  \n|Condition|Action|  \n|---------------|------------|  \n|Converted value matches that of the promoted controlling expression.|Control is transferred to the statement following that label.|  \n|None of the constants match the constants in the **case** labels; a **default** label is present.|Control is transferred to the **default** label.|  \n|None of the constants match the constants in the **case** labels; **default** label is not present.|Control is transferred to the statement after the `switch` statement.|  \n  \n If a matching expression is found, control is not impeded by subsequent **case** or **default** labels. The [break](../cpp/break-statement-cpp.md) statement is used to stop execution and transfer control to the statement after the `switch` statement. Without a **break** statement, every statement from the matched **case** label to the end of the `switch`, including the **default**, is executed. For example:  \n  \n```  \n// switch_statement1.cpp  \n#include <stdio.h>  \n  \nint main() {  \n   char *buffer = \"Any character stream\";  \n   int capa, lettera, nota;  \n   char c;  \n   capa = lettera = nota = 0;  \n  \n   while ( c = *buffer++ )   // Walks buffer until NULL  \n   {  \n      switch ( c )  \n      {  \n         case 'A':  \n            capa++;  \n            break;  \n         case 'a':  \n            lettera++;  \n            break;  \n         default:  \n            nota++;  \n      }  \n   }  \n   printf_s( \"\\nUppercase a: %d\\nLowercase a: %d\\nTotal: %d\\n\",  \n      capa, lettera, (capa + lettera + nota) );  \n}  \n```  \n  \n In the above example, `capa` is incremented if `c` is an uppercase `A`. The `break` statement after `capa++` terminates execution of the `switch` statement body and control passes to the `while` loop. Without the `break` statement, `lettera` and `nota` would also be incremented. A similar purpose is served by the `break` statement for `case 'a'`. If `c` is a lowercase `a`, `lettera` is incremented and the `break` statement terminates the `switch` statement body. If `c` is not an `a` or `A`, the `default` statement is executed.  \n  \n An inner block of a `switch` statement can contain definitions with initializations as long as they are reachable — that is, not bypassed by all possible execution paths. Names introduced using these declarations have local scope. For example:  \n  \n```  \n// switch_statement2.cpp  \n// C2360 expected  \n#include <iostream>  \nusing namespace std;  \nint main(int argc, char *argv[])  \n{  \n   switch( tolower( *argv[1] ) )  \n   {  \n       // Error. Unreachable declaration.  \n       char szChEntered[] = \"Character entered was: \";  \n  \n   case 'a' :  \n       {  \n       // Declaration of szChEntered OK. Local scope.  \n       char szChEntered[] = \"Character entered was: \";  \n       cout << szChEntered << \"a\\n\";  \n       }  \n       break;  \n  \n   case 'b' :  \n       // Value of szChEntered undefined.  \n       cout << szChEntered << \"b\\n\";  \n       break;  \n  \n   default:  \n       // Value of szChEntered undefined.  \n       cout << szChEntered << \"neither a nor b\\n\";  \n       break;  \n   }  \n}  \n```  \n  \n A `switch` statement can be nested. In such cases, **case** or **default** labels associate with the closest `switch` statement that encloses them.  \n  \n## Microsoft Specific  \n Microsoft C does not limit the number of case values in a `switch` statement. The number is limited only by the available memory. ANSI C requires at least 257 case labels be allowed in a `switch` statement.  \n  \n The default for Microsoft C is that the Microsoft extensions are enabled. Use the [/Za](../build/reference/za-ze-disable-language-extensions.md) compiler option to disable these extensions.  \n  \n## END Microsoft Specific  \n  \n## See Also  \n [Selection Statements](../cpp/selection-statements-cpp.md)   \n [Keywords](../cpp/keywords-cpp.md)   \n "}