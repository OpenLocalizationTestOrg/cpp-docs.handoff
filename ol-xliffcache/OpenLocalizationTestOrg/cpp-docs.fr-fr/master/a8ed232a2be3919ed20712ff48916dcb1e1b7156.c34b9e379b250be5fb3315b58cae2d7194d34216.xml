{"nodes":[{"pos":[12,51],"content":"concurrent_queue Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"concurrent_queue Class | Microsoft Docs","pos":[0,39]}]},{"pos":[703,725],"content":"concurrent_queue Class","linkify":"concurrent_queue Class","nodes":[{"content":"concurrent_queue Class","pos":[0,22]}]},{"content":"The <ph id=\"ph1\">`concurrent_queue`</ph> class is a sequence container class that allows first-in, first-out access to its elements.","pos":[726,840],"source":"The `concurrent_queue` class is a sequence container class that allows first-in, first-out access to its elements."},{"content":"It enables a limited set of concurrency-safe operations, such as <ph id=\"ph1\">`push`</ph> and <ph id=\"ph2\">`try_pop`</ph>.","pos":[841,927],"source":" It enables a limited set of concurrency-safe operations, such as `push` and `try_pop`."},{"pos":[936,942],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1080,1090],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The data type of the elements to be stored in the queue.","pos":[1101,1157]},{"content":"The type that represents the stored allocator object that encapsulates details about the allocation and deallocation of memory for this concurrent queue.","pos":[1173,1326]},{"content":"This argument is optional and the default value is <ph id=\"ph1\">`allocator&lt;``T``&gt;`</ph>.","pos":[1327,1397],"source":" This argument is optional and the default value is `allocator<``T``>`."},{"pos":[1406,1413],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1423,1438],"content":"Public Typedefs","linkify":"Public Typedefs","nodes":[{"content":"Public Typedefs","pos":[0,15]}]},{"content":"Name","pos":[1445,1449]},{"content":"Description","pos":[1450,1461]},{"content":"A type that represents the allocator class for the concurrent queue.","pos":[1516,1584]},{"pos":[1606,1700],"content":"A type that represents a non-thread-safe <ph id=\"ph1\">`const`</ph> iterator over elements in a concurrent queue.","source":"A type that represents a non-thread-safe `const` iterator over elements in a concurrent queue."},{"pos":[1723,1852],"content":"A type that provides a reference to a <ph id=\"ph1\">`const`</ph> element stored in a concurrent queue for reading and performing <ph id=\"ph2\">`const`</ph> operations.","source":"A type that provides a reference to a `const` element stored in a concurrent queue for reading and performing `const` operations."},{"content":"A type that provides the signed distance between two elements in a concurrent queue.","pos":[1875,1959]},{"content":"A type that represents a non-thread-safe iterator over the elements in a concurrent queue.","pos":[1975,2065]},{"content":"A type that provides a reference to an element stored in a concurrent queue.","pos":[2082,2158]},{"content":"A type that counts the number of elements in a concurrent queue.","pos":[2175,2239]},{"content":"A type that represents the data type stored in a concurrent queue.","pos":[2257,2323]},{"pos":[2334,2353],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[2360,2364]},{"content":"Description","pos":[2365,2376]},{"pos":[2414,2469],"content":"<bpt id=\"p1\">[</bpt>concurrent_queue::concurrent_queue Constructor<ept id=\"p1\">](#ctor)</ept>","source":"[concurrent_queue::concurrent_queue Constructor](#ctor)"},{"content":"Overloaded.","pos":[2470,2481]},{"content":"Constructs a concurrent queue.","pos":[2482,2512]},{"pos":[2517,2572],"content":"<bpt id=\"p1\">[</bpt>concurrent_queue::~concurrent_queue Destructor<ept id=\"p1\">](#dtor)</ept>","source":"[concurrent_queue::~concurrent_queue Destructor](#dtor)"},{"content":"Destroys the concurrent queue.","pos":[2573,2603]},{"pos":[2614,2628],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[2635,2639]},{"content":"Description","pos":[2640,2651]},{"pos":[2689,2729],"content":"<bpt id=\"p1\">[</bpt>concurrent_queue::clear Method<ept id=\"p1\">](#clear)</ept>","source":"[concurrent_queue::clear Method](#clear)"},{"content":"Clears the concurrent queue, destroying any currently enqueued elements.","pos":[2730,2802]},{"content":"This method is not concurrency-safe.","pos":[2803,2839]},{"pos":[2844,2884],"content":"<bpt id=\"p1\">[</bpt>concurrent_queue::empty Method<ept id=\"p1\">](#empty)</ept>","source":"[concurrent_queue::empty Method](#empty)"},{"content":"Tests if the concurrent queue is empty at the moment this method is called.","pos":[2885,2960]},{"content":"This method is concurrency-safe.","pos":[2961,2993]},{"pos":[2998,3054],"content":"<bpt id=\"p1\">[</bpt>concurrent_queue::get_allocator Method<ept id=\"p1\">](#get_allocator)</ept>","source":"[concurrent_queue::get_allocator Method](#get_allocator)"},{"content":"Returns a copy of the allocator used to construct the concurrent queue.","pos":[3055,3126]},{"content":"This method is concurrency-safe.","pos":[3127,3159]},{"pos":[3164,3202],"content":"<bpt id=\"p1\">[</bpt>concurrent_queue::push Method<ept id=\"p1\">](#push)</ept>","source":"[concurrent_queue::push Method](#push)"},{"content":"Overloaded.","pos":[3203,3214]},{"content":"Enqueues an item at tail end of the concurrent queue.","pos":[3215,3268]},{"content":"This method is concurrency-safe.","pos":[3269,3301]},{"pos":[3306,3350],"content":"<bpt id=\"p1\">[</bpt>concurrent_queue::try_pop Method<ept id=\"p1\">](#try_pop)</ept>","source":"[concurrent_queue::try_pop Method](#try_pop)"},{"content":"Dequeues an item from the queue if one is available.","pos":[3351,3403]},{"content":"This method is concurrency-safe.","pos":[3404,3436]},{"pos":[3441,3495],"content":"<bpt id=\"p1\">[</bpt>concurrent_queue::unsafe_begin Method<ept id=\"p1\">](#unsafe_begin)</ept>","source":"[concurrent_queue::unsafe_begin Method](#unsafe_begin)"},{"content":"Overloaded.","pos":[3496,3507]},{"content":"Returns an iterator of type <ph id=\"ph1\">`iterator`</ph> or <ph id=\"ph2\">`const_iterator`</ph> to the beginning of the concurrent queue.","pos":[3508,3608],"source":" Returns an iterator of type `iterator` or `const_iterator` to the beginning of the concurrent queue."},{"content":"This method is not concurrency-safe.","pos":[3609,3645]},{"pos":[3650,3700],"content":"<bpt id=\"p1\">[</bpt>concurrent_queue::unsafe_end Method<ept id=\"p1\">](#unsafe_end)</ept>","source":"[concurrent_queue::unsafe_end Method](#unsafe_end)"},{"content":"Overloaded.","pos":[3701,3712]},{"content":"Returns an iterator of type <ph id=\"ph1\">`iterator`</ph> or <ph id=\"ph2\">`const_iterator`</ph> to the end of the concurrent queue.","pos":[3713,3807],"source":" Returns an iterator of type `iterator` or `const_iterator` to the end of the concurrent queue."},{"content":"This method is not concurrency-safe.","pos":[3808,3844]},{"pos":[3849,3901],"content":"<bpt id=\"p1\">[</bpt>concurrent_queue::unsafe_size Method<ept id=\"p1\">](#unsafe_size)</ept>","source":"[concurrent_queue::unsafe_size Method](#unsafe_size)"},{"content":"Returns the number of items in the queue.","pos":[3902,3943]},{"content":"This method is not concurrency-safe.","pos":[3944,3980]},{"pos":[3990,3997],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4001,4122],"content":"For more information, see <bpt id=\"p1\">[</bpt>Parallel Containers and Objects<ept id=\"p1\">](../../../parallel/concrt/parallel-containers-and-objects.md)</ept>.","source":"For more information, see [Parallel Containers and Objects](../../../parallel/concrt/parallel-containers-and-objects.md)."},{"pos":[4131,4152],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[4183,4195],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4199,4229],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> concurrent_queue.h","source":"**Header:** concurrent_queue.h"},{"pos":[4236,4262],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[4272,4324],"content":"<bpt id=\"p1\">&lt;a name=\"clear\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_queue::clear Method","linkify":"<a name=\"clear\"></a>  concurrent_queue::clear Method","source":"<a name=\"clear\"></a>  concurrent_queue::clear Method"},{"content":"Clears the concurrent queue, destroying any currently enqueued elements.","pos":[4328,4400]},{"content":"This method is not concurrency-safe.","pos":[4401,4437]},{"pos":[4474,4541],"content":"<bpt id=\"p1\">&lt;a name=\"ctor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_queue::concurrent_queue Constructor","linkify":"<a name=\"ctor\"></a>  concurrent_queue::concurrent_queue Constructor","source":"<a name=\"ctor\"></a>  concurrent_queue::concurrent_queue Constructor"},{"content":"Constructs a concurrent queue.","pos":[4545,4575]},{"pos":[4986,4996],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type of the input iterator that specifies a range of values.","pos":[5020,5084]},{"content":"The allocator class to use with this object.","pos":[5100,5144]},{"content":"The source <ph id=\"ph1\">`concurrent_queue`</ph> object to copy or move elements from.","pos":[5164,5231],"source":" The source `concurrent_queue` object to copy or move elements from."},{"content":"Position of the first element in the range of elements to be copied.","pos":[5250,5318]},{"content":"Position of the first element beyond the range of elements to be copied.","pos":[5335,5407]},{"pos":[5417,5424],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5428,5502],"content":"All constructors store an allocator object <ph id=\"ph1\">`_Al`</ph> and initialize the queue.","source":"All constructors store an allocator object `_Al` and initialize the queue."},{"content":"The first constructor specifies an empty initial queue and explicitly specifies the allocator type to be used.","pos":[5509,5619]},{"pos":[5626,5700],"content":"The second constructor specifies a copy of the concurrent queue <ph id=\"ph1\">`_OtherQ`</ph>.","source":"The second constructor specifies a copy of the concurrent queue `_OtherQ`."},{"pos":[5707,5780],"content":"The third constructor specifies a move of the concurrent queue <ph id=\"ph1\">`_OtherQ`</ph>.","source":"The third constructor specifies a move of the concurrent queue `_OtherQ`."},{"pos":[5787,5878],"content":"The fourth constructor specifies values supplied by the iterator range [ <ph id=\"ph1\">`_Begin`</ph>, <ph id=\"ph2\">`_End`</ph>).","source":"The fourth constructor specifies values supplied by the iterator range [ `_Begin`, `_End`)."},{"pos":[5888,5955],"content":"<bpt id=\"p1\">&lt;a name=\"dtor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_queue::~concurrent_queue Destructor","linkify":"<a name=\"dtor\"></a>  concurrent_queue::~concurrent_queue Destructor","source":"<a name=\"dtor\"></a>  concurrent_queue::~concurrent_queue Destructor"},{"content":"Destroys the concurrent queue.","pos":[5959,5989]},{"pos":[6033,6085],"content":"<bpt id=\"p1\">&lt;a name=\"empty\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_queue::empty Method","linkify":"<a name=\"empty\"></a>  concurrent_queue::empty Method","source":"<a name=\"empty\"></a>  concurrent_queue::empty Method"},{"content":"Tests if the concurrent queue is empty at the moment this method is called.","pos":[6089,6164]},{"content":"This method is concurrency-safe.","pos":[6165,6197]},{"pos":[6240,6252],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6256,6340],"content":"<ph id=\"ph1\">`true`</ph> if the concurrent queue was empty at the moment we looked, <ph id=\"ph2\">`false`</ph> otherwise.","source":"`true` if the concurrent queue was empty at the moment we looked, `false` otherwise."},{"pos":[6350,6357],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6361,6556],"content":"While this method is concurrency-safe with respect to calls to the methods <ph id=\"ph1\">`push`</ph>, <ph id=\"ph2\">`try_pop`</ph>, and <ph id=\"ph3\">`empty`</ph>, the value returned might be incorrect by the time it is inspected by the calling thread.","source":"While this method is concurrency-safe with respect to calls to the methods `push`, `try_pop`, and `empty`, the value returned might be incorrect by the time it is inspected by the calling thread."},{"pos":[6566,6634],"content":"<bpt id=\"p1\">&lt;a name=\"get_allocator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_queue::get_allocator Method","linkify":"<a name=\"get_allocator\"></a>  concurrent_queue::get_allocator Method","source":"<a name=\"get_allocator\"></a>  concurrent_queue::get_allocator Method"},{"content":"Returns a copy of the allocator used to construct the concurrent queue.","pos":[6638,6709]},{"content":"This method is concurrency-safe.","pos":[6710,6742]},{"pos":[6803,6815],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A copy of the allocator used to construct the concurrent queue.","pos":[6819,6882]},{"pos":[6892,6942],"content":"<bpt id=\"p1\">&lt;a name=\"push\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_queue::push Method","linkify":"<a name=\"push\"></a>  concurrent_queue::push Method","source":"<a name=\"push\"></a>  concurrent_queue::push Method"},{"content":"Enqueues an item at tail end of the concurrent queue.","pos":[6946,6999]},{"content":"This method is concurrency-safe.","pos":[7000,7032]},{"pos":[7103,7113],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The item to be added to the queue.","pos":[7127,7161]},{"pos":[7171,7178],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7182,7277],"content":"<ph id=\"ph1\">`push`</ph> is concurrency-safe with respect to calls to the methods <ph id=\"ph2\">`push`</ph>, <ph id=\"ph3\">`try_pop`</ph>, and <ph id=\"ph4\">`empty`</ph>.","source":"`push` is concurrency-safe with respect to calls to the methods `push`, `try_pop`, and `empty`."},{"pos":[7287,7343],"content":"<bpt id=\"p1\">&lt;a name=\"try_pop\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_queue::try_pop Method","linkify":"<a name=\"try_pop\"></a>  concurrent_queue::try_pop Method","source":"<a name=\"try_pop\"></a>  concurrent_queue::try_pop Method"},{"content":"Dequeues an item from the queue if one is available.","pos":[7347,7399]},{"content":"This method is concurrency-safe.","pos":[7400,7432]},{"pos":[7479,7489],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to a location to store the dequeued item.","pos":[7504,7557]},{"pos":[7567,7579],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7583,7646],"content":"<ph id=\"ph1\">`true`</ph> if an item was successfully dequeued, <ph id=\"ph2\">`false`</ph> otherwise.","source":"`true` if an item was successfully dequeued, `false` otherwise."},{"pos":[7656,7663],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If an item was successfully dequeued, the parameter <ph id=\"ph1\">`_Dest`</ph> receives the dequeued value, the original value held in the queue is destroyed, and this function returns <ph id=\"ph2\">`true`</ph>.","pos":[7667,7840],"source":"If an item was successfully dequeued, the parameter `_Dest` receives the dequeued value, the original value held in the queue is destroyed, and this function returns `true`."},{"content":"If there was no item to dequeue, this function returns <ph id=\"ph1\">`false`</ph> without blocking, and the contents of the <ph id=\"ph2\">`_Dest`</ph> parameter are undefined.","pos":[7841,7978],"source":" If there was no item to dequeue, this function returns `false` without blocking, and the contents of the `_Dest` parameter are undefined."},{"pos":[7985,8083],"content":"<ph id=\"ph1\">`try_pop`</ph> is concurrency-safe with respect to calls to the methods <ph id=\"ph2\">`push`</ph>, <ph id=\"ph3\">`try_pop`</ph>, and <ph id=\"ph4\">`empty`</ph>.","source":"`try_pop` is concurrency-safe with respect to calls to the methods `push`, `try_pop`, and `empty`."},{"pos":[8093,8159],"content":"<bpt id=\"p1\">&lt;a name=\"unsafe_begin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_queue::unsafe_begin Method","linkify":"<a name=\"unsafe_begin\"></a>  concurrent_queue::unsafe_begin Method","source":"<a name=\"unsafe_begin\"></a>  concurrent_queue::unsafe_begin Method"},{"content":"Returns an iterator of type <ph id=\"ph1\">`iterator`</ph> or <ph id=\"ph2\">`const_iterator`</ph> to the beginning of the concurrent queue.","pos":[8163,8263],"source":"Returns an iterator of type `iterator` or `const_iterator` to the beginning of the concurrent queue."},{"content":"This method is not concurrency-safe.","pos":[8264,8300]},{"pos":[8386,8398],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8402,8501],"content":"An iterator of type <ph id=\"ph1\">`iterator`</ph> or <ph id=\"ph2\">`const_iterator`</ph> to the beginning of the concurrent queue object.","source":"An iterator of type `iterator` or `const_iterator` to the beginning of the concurrent queue object."},{"pos":[8511,8518],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8522,8702],"content":"The iterators for the <ph id=\"ph1\">`concurrent_queue`</ph> class are primarily intended for debugging, as they are slow, and iteration is not concurrency-safe with respect to other queue operations.","source":"The iterators for the `concurrent_queue` class are primarily intended for debugging, as they are slow, and iteration is not concurrency-safe with respect to other queue operations."},{"pos":[8712,8774],"content":"<bpt id=\"p1\">&lt;a name=\"unsafe_end\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_queue::unsafe_end Method","linkify":"<a name=\"unsafe_end\"></a>  concurrent_queue::unsafe_end Method","source":"<a name=\"unsafe_end\"></a>  concurrent_queue::unsafe_end Method"},{"content":"Returns an iterator of type <ph id=\"ph1\">`iterator`</ph> or <ph id=\"ph2\">`const_iterator`</ph> to the end of the concurrent queue.","pos":[8778,8872],"source":"Returns an iterator of type `iterator` or `const_iterator` to the end of the concurrent queue."},{"content":"This method is not concurrency-safe.","pos":[8873,8909]},{"pos":[8991,9003],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9007,9093],"content":"An iterator of type <ph id=\"ph1\">`iterator`</ph> or <ph id=\"ph2\">`const_iterator`</ph> to the end of the concurrent queue.","source":"An iterator of type `iterator` or `const_iterator` to the end of the concurrent queue."},{"pos":[9103,9110],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9114,9294],"content":"The iterators for the <ph id=\"ph1\">`concurrent_queue`</ph> class are primarily intended for debugging, as they are slow, and iteration is not concurrency-safe with respect to other queue operations.","source":"The iterators for the `concurrent_queue` class are primarily intended for debugging, as they are slow, and iteration is not concurrency-safe with respect to other queue operations."},{"pos":[9304,9368],"content":"<bpt id=\"p1\">&lt;a name=\"unsafe_size\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_queue::unsafe_size Method","linkify":"<a name=\"unsafe_size\"></a>  concurrent_queue::unsafe_size Method","source":"<a name=\"unsafe_size\"></a>  concurrent_queue::unsafe_size Method"},{"content":"Returns the number of items in the queue.","pos":[9372,9413]},{"content":"This method is not concurrency-safe.","pos":[9414,9450]},{"pos":[9504,9516],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The size of the concurrent queue.","pos":[9520,9553]},{"pos":[9563,9570],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9574,9726],"content":"<ph id=\"ph1\">`unsafe_size`</ph> is not concurrency-safe and can produce incorrect results if called concurrently with calls to the methods <ph id=\"ph2\">`push`</ph>, <ph id=\"ph3\">`try_pop`</ph>, and <ph id=\"ph4\">`empty`</ph>.","source":"`unsafe_size` is not concurrency-safe and can produce incorrect results if called concurrently with calls to the methods `push`, `try_pop`, and `empty`."},{"pos":[9735,9743],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[9747,9796],"content":"<bpt id=\"p1\">[</bpt>concurrency Namespace<ept id=\"p1\">](concurrency-namespace.md)</ept>","source":"[concurrency Namespace](concurrency-namespace.md)"}],"content":"---\ntitle: \"concurrent_queue Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"concurrent_queue/concurrency::concurrent_queue\"\n  - \"concurrent_queue/Concurrency::concurrent_queue\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"concurrent_queue class\"\nms.assetid: c2218996-d0ea-40e9-b002-e9a15b085f51\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# concurrent_queue Class\nThe `concurrent_queue` class is a sequence container class that allows first-in, first-out access to its elements. It enables a limited set of concurrency-safe operations, such as `push` and `try_pop`.  \n  \n## Syntax  \n  \n```\ntemplate<typename T, class _Ax>\nclass concurrent_queue: public ::Concurrency::details::_Concurrent_queue_base_v4;\n```  \n  \n#### Parameters  \n `T`  \n The data type of the elements to be stored in the queue.  \n  \n `_Ax`  \n The type that represents the stored allocator object that encapsulates details about the allocation and deallocation of memory for this concurrent queue. This argument is optional and the default value is `allocator<``T``>`.  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`allocator_type`|A type that represents the allocator class for the concurrent queue.|  \n|`const_iterator`|A type that represents a non-thread-safe `const` iterator over elements in a concurrent queue.|  \n|`const_reference`|A type that provides a reference to a `const` element stored in a concurrent queue for reading and performing `const` operations.|  \n|`difference_type`|A type that provides the signed distance between two elements in a concurrent queue.|  \n|`iterator`|A type that represents a non-thread-safe iterator over the elements in a concurrent queue.|  \n|`reference`|A type that provides a reference to an element stored in a concurrent queue.|  \n|`size_type`|A type that counts the number of elements in a concurrent queue.|  \n|`value_type`|A type that represents the data type stored in a concurrent queue.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[concurrent_queue::concurrent_queue Constructor](#ctor)|Overloaded. Constructs a concurrent queue.|  \n|[concurrent_queue::~concurrent_queue Destructor](#dtor)|Destroys the concurrent queue.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[concurrent_queue::clear Method](#clear)|Clears the concurrent queue, destroying any currently enqueued elements. This method is not concurrency-safe.|  \n|[concurrent_queue::empty Method](#empty)|Tests if the concurrent queue is empty at the moment this method is called. This method is concurrency-safe.|  \n|[concurrent_queue::get_allocator Method](#get_allocator)|Returns a copy of the allocator used to construct the concurrent queue. This method is concurrency-safe.|  \n|[concurrent_queue::push Method](#push)|Overloaded. Enqueues an item at tail end of the concurrent queue. This method is concurrency-safe.|  \n|[concurrent_queue::try_pop Method](#try_pop)|Dequeues an item from the queue if one is available. This method is concurrency-safe.|  \n|[concurrent_queue::unsafe_begin Method](#unsafe_begin)|Overloaded. Returns an iterator of type `iterator` or `const_iterator` to the beginning of the concurrent queue. This method is not concurrency-safe.|  \n|[concurrent_queue::unsafe_end Method](#unsafe_end)|Overloaded. Returns an iterator of type `iterator` or `const_iterator` to the end of the concurrent queue. This method is not concurrency-safe.|  \n|[concurrent_queue::unsafe_size Method](#unsafe_size)|Returns the number of items in the queue. This method is not concurrency-safe.|  \n  \n## Remarks  \n For more information, see [Parallel Containers and Objects](../../../parallel/concrt/parallel-containers-and-objects.md).  \n  \n## Inheritance Hierarchy  \n `concurrent_queue`  \n  \n## Requirements  \n **Header:** concurrent_queue.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"clear\"></a>  concurrent_queue::clear Method  \n Clears the concurrent queue, destroying any currently enqueued elements. This method is not concurrency-safe.  \n  \n```\nvoid clear();\n```  \n  \n##  <a name=\"ctor\"></a>  concurrent_queue::concurrent_queue Constructor  \n Constructs a concurrent queue.  \n  \n```\nexplicit concurrent_queue(\n    const allocator_type& _Al = allocator_type());\n\nconcurrent_queue(\n    const concurrent_queue& _OtherQ,\n    const allocator_type& _Al = allocator_type());\n\nconcurrent_queue(\n    concurrent_queue&& _OtherQ,\n    const allocator_type& _Al = allocator_type());\n\ntemplate<typename _InputIterator>\nconcurrent_queue(_InputIterator _Begin,\n    _InputIterator _End);\n```  \n  \n### Parameters  \n `_InputIterator`  \n The type of the input iterator that specifies a range of values.  \n  \n `_Al`  \n The allocator class to use with this object.  \n  \n `_OtherQ`  \n The source `concurrent_queue` object to copy or move elements from.  \n  \n `_Begin`  \n Position of the first element in the range of elements to be copied.  \n  \n `_End`  \n Position of the first element beyond the range of elements to be copied.  \n  \n### Remarks  \n All constructors store an allocator object `_Al` and initialize the queue.  \n  \n The first constructor specifies an empty initial queue and explicitly specifies the allocator type to be used.  \n  \n The second constructor specifies a copy of the concurrent queue `_OtherQ`.  \n  \n The third constructor specifies a move of the concurrent queue `_OtherQ`.  \n  \n The fourth constructor specifies values supplied by the iterator range [ `_Begin`, `_End`).  \n  \n##  <a name=\"dtor\"></a>  concurrent_queue::~concurrent_queue Destructor  \n Destroys the concurrent queue.  \n  \n```\n~concurrent_queue();\n```  \n  \n##  <a name=\"empty\"></a>  concurrent_queue::empty Method  \n Tests if the concurrent queue is empty at the moment this method is called. This method is concurrency-safe.  \n  \n```\nbool empty() const;\n```  \n  \n### Return Value  \n `true` if the concurrent queue was empty at the moment we looked, `false` otherwise.  \n  \n### Remarks  \n While this method is concurrency-safe with respect to calls to the methods `push`, `try_pop`, and `empty`, the value returned might be incorrect by the time it is inspected by the calling thread.  \n  \n##  <a name=\"get_allocator\"></a>  concurrent_queue::get_allocator Method  \n Returns a copy of the allocator used to construct the concurrent queue. This method is concurrency-safe.  \n  \n```\nallocator_type get_allocator() const;\n```  \n  \n### Return Value  \n A copy of the allocator used to construct the concurrent queue.  \n  \n##  <a name=\"push\"></a>  concurrent_queue::push Method  \n Enqueues an item at tail end of the concurrent queue. This method is concurrency-safe.  \n  \n```\nvoid push(const T& _Src);\n\nvoid push(T&& _Src);\n```  \n  \n### Parameters  \n `_Src`  \n The item to be added to the queue.  \n  \n### Remarks  \n `push` is concurrency-safe with respect to calls to the methods `push`, `try_pop`, and `empty`.  \n  \n##  <a name=\"try_pop\"></a>  concurrent_queue::try_pop Method  \n Dequeues an item from the queue if one is available. This method is concurrency-safe.  \n  \n```\nbool try_pop(T& _Dest);\n```  \n  \n### Parameters  \n `_Dest`  \n A reference to a location to store the dequeued item.  \n  \n### Return Value  \n `true` if an item was successfully dequeued, `false` otherwise.  \n  \n### Remarks  \n If an item was successfully dequeued, the parameter `_Dest` receives the dequeued value, the original value held in the queue is destroyed, and this function returns `true`. If there was no item to dequeue, this function returns `false` without blocking, and the contents of the `_Dest` parameter are undefined.  \n  \n `try_pop` is concurrency-safe with respect to calls to the methods `push`, `try_pop`, and `empty`.  \n  \n##  <a name=\"unsafe_begin\"></a>  concurrent_queue::unsafe_begin Method  \n Returns an iterator of type `iterator` or `const_iterator` to the beginning of the concurrent queue. This method is not concurrency-safe.  \n  \n```\niterator unsafe_begin();\n\nconst_iterator unsafe_begin() const;\n```  \n  \n### Return Value  \n An iterator of type `iterator` or `const_iterator` to the beginning of the concurrent queue object.  \n  \n### Remarks  \n The iterators for the `concurrent_queue` class are primarily intended for debugging, as they are slow, and iteration is not concurrency-safe with respect to other queue operations.  \n  \n##  <a name=\"unsafe_end\"></a>  concurrent_queue::unsafe_end Method  \n Returns an iterator of type `iterator` or `const_iterator` to the end of the concurrent queue. This method is not concurrency-safe.  \n  \n```\niterator unsafe_end();\n\nconst_iterator unsafe_end() const;\n```  \n  \n### Return Value  \n An iterator of type `iterator` or `const_iterator` to the end of the concurrent queue.  \n  \n### Remarks  \n The iterators for the `concurrent_queue` class are primarily intended for debugging, as they are slow, and iteration is not concurrency-safe with respect to other queue operations.  \n  \n##  <a name=\"unsafe_size\"></a>  concurrent_queue::unsafe_size Method  \n Returns the number of items in the queue. This method is not concurrency-safe.  \n  \n```\nsize_type unsafe_size() const;\n```  \n  \n### Return Value  \n The size of the concurrent queue.  \n  \n### Remarks  \n `unsafe_size` is not concurrency-safe and can produce incorrect results if called concurrently with calls to the methods `push`, `try_pop`, and `empty`.  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)\n"}