{"nodes":[{"pos":[12,54],"content":"Member Function Templates | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Member Function Templates | Microsoft Docs","pos":[0,42]}]},{"content":"Member Function Templates","pos":[610,635]},{"content":"The term member template refers to both member function templates and nested class templates.","pos":[636,729]},{"content":"Member function templates are template functions that are members of a class or class template.","pos":[730,825]},{"content":"Member functions can be function templates in several contexts.","pos":[832,895]},{"content":"All functions of class templates are generic but are not referred to as member templates or member function templates.","pos":[896,1014]},{"content":"If these member functions take their own template arguments, they are considered to be member function templates.","pos":[1015,1128]},{"content":"Example","pos":[1137,1144]},{"content":"Member function templates of nontemplate or template classes are declared as function templates with their template parameters.","pos":[1148,1275]},{"content":"Example","pos":[1468,1475]},{"content":"The following example shows a member function template of a template class.","pos":[1479,1554]},{"content":"Example","pos":[1755,1762]},{"content":"Additionally, in Visual Studio .NET 2003 and later, member templates can also be defined outside of a class.","pos":[1766,1874]},{"content":"Example","pos":[2159,2166]},{"content":"Local classes are not allowed to have member templates.","pos":[2170,2225]},{"content":"Member template functions cannot be virtual functions and cannot override virtual functions from a base class when they are declared with the same name as a base class virtual function.","pos":[2232,2417]},{"content":"Visual C++ .NET 2003 introduced support for templated user-defined conversions.","pos":[2424,2503]},{"content":"The following sample works in Visual C++ .NET 2003 as specified in the standard.","pos":[2504,2584]},{"content":"See Also","pos":[2886,2894]},{"content":"Function Templates","pos":[2899,2917]}],"content":"---\ntitle: \"Member Function Templates | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"function templates, member functions\"\nms.assetid: 83d51835-6a27-40ed-997c-7d90dc9182d8\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Member Function Templates\nThe term member template refers to both member function templates and nested class templates. Member function templates are template functions that are members of a class or class template.  \n  \n Member functions can be function templates in several contexts. All functions of class templates are generic but are not referred to as member templates or member function templates. If these member functions take their own template arguments, they are considered to be member function templates.  \n  \n## Example  \n Member function templates of nontemplate or template classes are declared as function templates with their template parameters.  \n  \n```  \n// member_function_templates.cpp  \nstruct X  \n{  \n   template <class T> void mf(T* t) {}  \n};  \n  \nint main()  \n{  \n   int i;  \n   X* x = new X();  \n   x->mf(&i);  \n}  \n```  \n  \n## Example  \n The following example shows a member function template of a template class.  \n  \n```  \n// member_function_templates2.cpp  \ntemplate<typename T>  \nclass X  \n{  \npublic:  \n   template<typename U>  \n   void mf(const U &u)  \n   {  \n   }  \n};  \n  \nint main()  \n{  \n}  \n```  \n  \n## Example  \n Additionally, in Visual Studio .NET 2003 and later, member templates can also be defined outside of a class.  \n  \n```  \n// defining_member_templates_outside_class.cpp  \ntemplate<typename T>  \nclass X  \n{  \npublic:  \n   template<typename U>  \n   void mf(const U &u);  \n};  \n  \ntemplate<typename T> template <typename U>  \nvoid X<T>::mf(const U &u)  \n{  \n}  \n  \nint main()  \n{  \n}  \n```  \n  \n## Example  \n Local classes are not allowed to have member templates.  \n  \n Member template functions cannot be virtual functions and cannot override virtual functions from a base class when they are declared with the same name as a base class virtual function.  \n  \n Visual C++ .NET 2003 introduced support for templated user-defined conversions. The following sample works in Visual C++ .NET 2003 as specified in the standard.  \n  \n```  \n// templated_user_defined_conversions.cpp  \ntemplate <class T>  \nstruct S  \n{  \n   template <class U> operator S<U>()  \n   {  \n      return S<U>();  \n   }  \n};  \n  \nint main()  \n{  \n   S<int> s1;  \n   S<long> s2 = s1;  // Convert s1 using UDC and copy constructs S<long>.  \n}  \n```  \n  \n## See Also  \n [Function Templates](../cpp/function-templates.md)"}