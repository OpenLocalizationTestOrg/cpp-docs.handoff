{"nodes":[{"pos":[12,55],"content":"COleControlContainer Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"COleControlContainer Class | Microsoft Docs","pos":[0,43]}]},{"pos":[722,748],"content":"COleControlContainer Class","linkify":"COleControlContainer Class","nodes":[{"content":"COleControlContainer Class","pos":[0,26]}]},{"content":"Acts as a control container for ActiveX controls.","pos":[749,798]},{"pos":[807,813],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[886,893],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[903,922],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[929,933]},{"content":"Description","pos":[934,945]},{"pos":[983,1072],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::COleControlContainer<ept id=\"p1\">](#colecontrolcontainer__colecontrolcontainer)</ept>","source":"[COleControlContainer::COleControlContainer](#colecontrolcontainer__colecontrolcontainer)"},{"pos":[1073,1116],"content":"Constructs a <ph id=\"ph1\">`COleControlContainer`</ph> object.","source":"Constructs a `COleControlContainer` object."},{"pos":[1127,1141],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1148,1152]},{"content":"Description","pos":[1153,1164]},{"pos":[1202,1285],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::AttachControlSite<ept id=\"p1\">](#colecontrolcontainer__attachcontrolsite)</ept>","source":"[COleControlContainer::AttachControlSite](#colecontrolcontainer__attachcontrolsite)"},{"content":"Creates a control site, hosted by the container.","pos":[1286,1334]},{"pos":[1339,1448],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::BroadcastAmbientPropertyChange<ept id=\"p1\">](#colecontrolcontainer__broadcastambientpropertychange)</ept>","source":"[COleControlContainer::BroadcastAmbientPropertyChange](#colecontrolcontainer__broadcastambientpropertychange)"},{"content":"Informs all hosted controls that an ambient property has changed.","pos":[1449,1514]},{"pos":[1519,1596],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::CheckDlgButton<ept id=\"p1\">](#colecontrolcontainer__checkdlgbutton)</ept>","source":"[COleControlContainer::CheckDlgButton](#colecontrolcontainer__checkdlgbutton)"},{"content":"Modifies the specified button control.","pos":[1597,1635]},{"pos":[1640,1721],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::CheckRadioButton<ept id=\"p1\">](#colecontrolcontainer__checkradiobutton)</ept>","source":"[COleControlContainer::CheckRadioButton](#colecontrolcontainer__checkradiobutton)"},{"content":"Selects the specified radio button of a group.","pos":[1722,1768]},{"pos":[1773,1848],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::CreateControl<ept id=\"p1\">](#colecontrolcontainer__createcontrol)</ept>","source":"[COleControlContainer::CreateControl](#colecontrolcontainer__createcontrol)"},{"content":"Creates a hosted ActiveX control.","pos":[1849,1882]},{"pos":[1887,1962],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::CreateOleFont<ept id=\"p1\">](#colecontrolcontainer__createolefont)</ept>","source":"[COleControlContainer::CreateOleFont](#colecontrolcontainer__createolefont)"},{"content":"Creates an OLE font.","pos":[1963,1983]},{"pos":[1988,2053],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::FindItem<ept id=\"p1\">](#colecontrolcontainer__finditem)</ept>","source":"[COleControlContainer::FindItem](#colecontrolcontainer__finditem)"},{"content":"Returns the custom site of the specified control.","pos":[2054,2103]},{"pos":[2108,2187],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::FreezeAllEvents<ept id=\"p1\">](#colecontrolcontainer__freezeallevents)</ept>","source":"[COleControlContainer::FreezeAllEvents](#colecontrolcontainer__freezeallevents)"},{"content":"Determines if the control site is accepting events.","pos":[2188,2239]},{"pos":[2244,2321],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::GetAmbientProp<ept id=\"p1\">](#colecontrolcontainer__getambientprop)</ept>","source":"[COleControlContainer::GetAmbientProp](#colecontrolcontainer__getambientprop)"},{"content":"Retrieves the specified ambient property.","pos":[2322,2363]},{"pos":[2368,2437],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::GetDlgItem<ept id=\"p1\">](#colecontrolcontainer__getdlgitem)</ept>","source":"[COleControlContainer::GetDlgItem](#colecontrolcontainer__getdlgitem)"},{"content":"Retrieves the specified dialog control.","pos":[2438,2477]},{"pos":[2482,2557],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::GetDlgItemInt<ept id=\"p1\">](#colecontrolcontainer__getdlgitemint)</ept>","source":"[COleControlContainer::GetDlgItemInt](#colecontrolcontainer__getdlgitemint)"},{"content":"Retrieves the value of the specified dialog control.","pos":[2558,2610]},{"pos":[2615,2692],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::GetDlgItemText<ept id=\"p1\">](#colecontrolcontainer__getdlgitemtext)</ept>","source":"[COleControlContainer::GetDlgItemText](#colecontrolcontainer__getdlgitemtext)"},{"content":"Retrieves the caption of the specified dialog control.","pos":[2693,2747]},{"pos":[2752,2829],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::HandleSetFocus<ept id=\"p1\">](#colecontrolcontainer__handlesetfocus)</ept>","source":"[COleControlContainer::HandleSetFocus](#colecontrolcontainer__handlesetfocus)"},{"pos":[2830,2889],"content":"Determines if the container handles <ph id=\"ph1\">`WM_SETFOCUS`</ph> messages.","source":"Determines if the container handles `WM_SETFOCUS` messages."},{"pos":[2894,2989],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::HandleWindowlessMessage<ept id=\"p1\">](#colecontrolcontainer__handlewindowlessmessage)</ept>","source":"[COleControlContainer::HandleWindowlessMessage](#colecontrolcontainer__handlewindowlessmessage)"},{"content":"Handles messages sent to a windowless control.","pos":[2990,3036]},{"pos":[3041,3126],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::IsDlgButtonChecked<ept id=\"p1\">](#colecontrolcontainer__isdlgbuttonchecked)</ept>","source":"[COleControlContainer::IsDlgButtonChecked](#colecontrolcontainer__isdlgbuttonchecked)"},{"content":"Determines the state of the specified button.","pos":[3127,3172]},{"pos":[3177,3240],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::OnPaint<ept id=\"p1\">](#colecontrolcontainer__onpaint)</ept>","source":"[COleControlContainer::OnPaint](#colecontrolcontainer__onpaint)"},{"content":"Called to repaint a portion of the container.","pos":[3241,3286]},{"pos":[3291,3364],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::OnUIActivate<ept id=\"p1\">](#colecontrolcontainer__onuiactivate)</ept>","source":"[COleControlContainer::OnUIActivate](#colecontrolcontainer__onuiactivate)"},{"content":"Called when a control is about to be in-place activated.","pos":[3365,3421]},{"pos":[3426,3503],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::OnUIDeactivate<ept id=\"p1\">](#colecontrolcontainer__onuideactivate)</ept>","source":"[COleControlContainer::OnUIDeactivate](#colecontrolcontainer__onuideactivate)"},{"content":"Called when a control is about to be deactivated.","pos":[3504,3553]},{"pos":[3558,3635],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::ScrollChildren<ept id=\"p1\">](#colecontrolcontainer__scrollchildren)</ept>","source":"[COleControlContainer::ScrollChildren](#colecontrolcontainer__scrollchildren)"},{"content":"Called by the framework when scroll messages are received from a child window.","pos":[3636,3714]},{"pos":[3719,3804],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::SendDlgItemMessage<ept id=\"p1\">](#colecontrolcontainer__senddlgitemmessage)</ept>","source":"[COleControlContainer::SendDlgItemMessage](#colecontrolcontainer__senddlgitemmessage)"},{"content":"Sends a message to the specified control.","pos":[3805,3846]},{"pos":[3851,3926],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::SetDlgItemInt<ept id=\"p1\">](#colecontrolcontainer__setdlgitemint)</ept>","source":"[COleControlContainer::SetDlgItemInt](#colecontrolcontainer__setdlgitemint)"},{"content":"Sets the value of the specified control.","pos":[3927,3967]},{"pos":[3972,4049],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::SetDlgItemText<ept id=\"p1\">](#colecontrolcontainer__setdlgitemtext)</ept>","source":"[COleControlContainer::SetDlgItemText](#colecontrolcontainer__setdlgitemtext)"},{"content":"Sets the text of the specified control.","pos":[4050,4089]},{"pos":[4100,4119],"content":"Public Data Members","linkify":"Public Data Members","nodes":[{"content":"Public Data Members","pos":[0,19]}]},{"content":"Name","pos":[4126,4130]},{"content":"Description","pos":[4131,4142]},{"pos":[4180,4245],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::m_crBack<ept id=\"p1\">](#colecontrolcontainer__m_crback)</ept>","source":"[COleControlContainer::m_crBack](#colecontrolcontainer__m_crback)"},{"content":"The background color of the container.","pos":[4246,4284]},{"pos":[4289,4354],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::m_crFore<ept id=\"p1\">](#colecontrolcontainer__m_crfore)</ept>","source":"[COleControlContainer::m_crFore](#colecontrolcontainer__m_crfore)"},{"content":"The foreground color of the container.","pos":[4355,4393]},{"pos":[4398,4481],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::m_listSitesOrWnds<ept id=\"p1\">](#colecontrolcontainer__m_listsitesorwnds)</ept>","source":"[COleControlContainer::m_listSitesOrWnds](#colecontrolcontainer__m_listsitesorwnds)"},{"content":"A list of the supported control sites.","pos":[4482,4520]},{"pos":[4525,4616],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::m_nWindowlessControls<ept id=\"p1\">](#colecontrolcontainer__m_nwindowlesscontrols)</ept>","source":"[COleControlContainer::m_nWindowlessControls](#colecontrolcontainer__m_nwindowlesscontrols)"},{"content":"The number of hosted windowless controls.","pos":[4617,4658]},{"pos":[4663,4732],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::m_pOleFont<ept id=\"p1\">](#colecontrolcontainer__m_polefont)</ept>","source":"[COleControlContainer::m_pOleFont](#colecontrolcontainer__m_polefont)"},{"content":"A pointer to the OLE font of the custom control site.","pos":[4733,4786]},{"pos":[4791,4868],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::m_pSiteCapture<ept id=\"p1\">](#colecontrolcontainer__m_psitecapture)</ept>","source":"[COleControlContainer::m_pSiteCapture](#colecontrolcontainer__m_psitecapture)"},{"content":"Pointer to the capture control site.","pos":[4869,4905]},{"pos":[4910,4983],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::m_pSiteFocus<ept id=\"p1\">](#colecontrolcontainer__m_psitefocus)</ept>","source":"[COleControlContainer::m_pSiteFocus](#colecontrolcontainer__m_psitefocus)"},{"content":"Pointer to the control that currently has input focus.","pos":[4984,5038]},{"pos":[5043,5122],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::m_pSiteUIActive<ept id=\"p1\">](#colecontrolcontainer__m_psiteuiactive)</ept>","source":"[COleControlContainer::m_pSiteUIActive](#colecontrolcontainer__m_psiteuiactive)"},{"content":"Pointer to the control that is currently in-place activated.","pos":[5123,5183]},{"pos":[5188,5249],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::m_pWnd<ept id=\"p1\">](#colecontrolcontainer__m_pwnd)</ept>","source":"[COleControlContainer::m_pWnd](#colecontrolcontainer__m_pwnd)"},{"content":"Pointer to the window implementing the control container.","pos":[5250,5307]},{"pos":[5312,5379],"content":"<bpt id=\"p1\">[</bpt>COleControlContainer::m_siteMap<ept id=\"p1\">](#colecontrolcontainer__m_sitemap)</ept>","source":"[COleControlContainer::m_siteMap](#colecontrolcontainer__m_sitemap)"},{"content":"The site map.","pos":[5380,5393]},{"pos":[5403,5410],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This is done by providing support for one or more ActiveX control sites (implemented by <ph id=\"ph1\">`COleControlSite`</ph>).","pos":[5414,5521],"source":"This is done by providing support for one or more ActiveX control sites (implemented by `COleControlSite`)."},{"content":"<ph id=\"ph1\">`COleControlContainer`</ph> fully implements the <bpt id=\"p1\">[</bpt>IOleInPlaceFrame<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms692770)</ept> and <bpt id=\"p2\">[</bpt>IOleContainer<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms690103)</ept> interfaces, allowing the contained ActiveX controls to fulfill their qualifications as in-place items.","pos":[5522,5827],"source":"`COleControlContainer` fully implements the [IOleInPlaceFrame](http://msdn.microsoft.com/library/windows/desktop/ms692770) and [IOleContainer](http://msdn.microsoft.com/library/windows/desktop/ms690103) interfaces, allowing the contained ActiveX controls to fulfill their qualifications as in-place items."},{"pos":[5834,6019],"content":"Commonly, this class is used in conjunction with <ph id=\"ph1\">`COccManager`</ph> and <ph id=\"ph2\">`COleControlSite`</ph> to implement a custom ActiveX control container, with custom sites for one or more ActiveX controls.","source":"Commonly, this class is used in conjunction with `COccManager` and `COleControlSite` to implement a custom ActiveX control container, with custom sites for one or more ActiveX controls."},{"pos":[6028,6049],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[6053,6100],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[6107,6160],"content":"<bpt id=\"p1\">[</bpt>CCmdTarget<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept>","source":"[CCmdTarget](../../mfc/reference/ccmdtarget-class.md)"},{"pos":[6198,6210],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[6214,6234],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxocc.h","source":"**Header:** afxocc.h"},{"pos":[6244,6339],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__attachcontrolsite\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::AttachControlSite","linkify":"<a name=\"colecontrolcontainer__attachcontrolsite\"></a>  COleControlContainer::AttachControlSite","source":"<a name=\"colecontrolcontainer__attachcontrolsite\"></a>  COleControlContainer::AttachControlSite"},{"content":"Called by the framework to create and attach a control site.","pos":[6343,6403]},{"pos":[6563,6573],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a <ph id=\"ph1\">`CWnd`</ph> object.","pos":[6587,6616],"source":" A pointer to a `CWnd` object."},{"content":"The ID of the control to be attached.","pos":[6633,6670]},{"pos":[6680,6687],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this function if you want to customize this process.","pos":[6691,6752]},{"pos":[6760,6927],"content":"[!NOTE]\n Use the first form of this function if you are statically linking to the MFC library. Use the second form if you are dynamically linking to the MFC library.","leadings":["","> "],"nodes":[{"content":" Use the first form of this function if you are statically linking to the MFC library. Use the second form if you are dynamically linking to the MFC library.","pos":[8,165],"nodes":[{"content":"Use the first form of this function if you are statically linking to the MFC library.","pos":[1,86]},{"content":"Use the second form if you are dynamically linking to the MFC library.","pos":[87,157]}]}]},{"pos":[6937,7058],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__broadcastambientpropertychange\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::BroadcastAmbientPropertyChange","linkify":"<a name=\"colecontrolcontainer__broadcastambientpropertychange\"></a>  COleControlContainer::BroadcastAmbientPropertyChange","source":"<a name=\"colecontrolcontainer__broadcastambientpropertychange\"></a>  COleControlContainer::BroadcastAmbientPropertyChange"},{"content":"Informs all hosted controls that an ambient property has changed.","pos":[7062,7127]},{"pos":[7212,7222],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The dispatch ID of the ambient property being changed.","pos":[7238,7292]},{"pos":[7302,7309],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function is called by the framework when an ambient property has changed value.","pos":[7313,7397]},{"content":"Override this function to customize this behavior.","pos":[7398,7448]},{"pos":[7458,7547],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__checkdlgbutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::CheckDlgButton","linkify":"<a name=\"colecontrolcontainer__checkdlgbutton\"></a>  COleControlContainer::CheckDlgButton","source":"<a name=\"colecontrolcontainer__checkdlgbutton\"></a>  COleControlContainer::CheckDlgButton"},{"content":"Modifies the current state of the button.","pos":[7551,7592]},{"pos":[7685,7695],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The ID of the button to be modified.","pos":[7714,7750]},{"content":"Specifies the state of the button.","pos":[7769,7803]},{"content":"Can be one of the following:","pos":[7804,7832]},{"pos":[7840,7889],"content":"<bpt id=\"p1\">**</bpt>BST_CHECKED<ept id=\"p1\">**</ept> Sets the button state to checked.","source":"**BST_CHECKED** Sets the button state to checked."},{"content":"<bpt id=\"p1\">**</bpt>BST_INDETERMINATE<ept id=\"p1\">**</ept> Sets the button state to grayed, indicating an indeterminate state.","pos":[7897,7986],"source":"**BST_INDETERMINATE** Sets the button state to grayed, indicating an indeterminate state."},{"content":"Use this value only if the button has the <bpt id=\"p1\">**</bpt>BS_3STATE<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>BS_AUTO3STATE<ept id=\"p2\">**</ept> style.","pos":[7987,8070],"source":" Use this value only if the button has the **BS_3STATE** or **BS_AUTO3STATE** style."},{"pos":[8078,8129],"content":"<bpt id=\"p1\">**</bpt>BST_UNCHECKED<ept id=\"p1\">**</ept> Sets the button state to cleared.","source":"**BST_UNCHECKED** Sets the button state to cleared."},{"pos":[8139,8232],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__checkradiobutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::CheckRadioButton","linkify":"<a name=\"colecontrolcontainer__checkradiobutton\"></a>  COleControlContainer::CheckRadioButton","source":"<a name=\"colecontrolcontainer__checkradiobutton\"></a>  COleControlContainer::CheckRadioButton"},{"content":"Selects a specified radio button in a group and clears the remaining buttons in the group.","pos":[8236,8326]},{"pos":[8458,8468],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the identifier of the first radio button in the group.","pos":[8492,8556]},{"content":"Specifies the identifier of the last radio button in the group.","pos":[8582,8645]},{"content":"Specifies the identifier of the radio button to be checked.","pos":[8672,8731]},{"pos":[8741,8842],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__colecontrolcontainer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::COleControlContainer","linkify":"<a name=\"colecontrolcontainer__colecontrolcontainer\"></a>  COleControlContainer::COleControlContainer","source":"<a name=\"colecontrolcontainer__colecontrolcontainer\"></a>  COleControlContainer::COleControlContainer"},{"pos":[8846,8889],"content":"Constructs a <ph id=\"ph1\">`COleControlContainer`</ph> object.","source":"Constructs a `COleControlContainer` object."},{"pos":[8957,8967],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the parent window of the control container.","pos":[8981,9037]},{"pos":[9047,9054],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9058,9166],"content":"Once the object has been successfully created, add a custom control site with a call to <ph id=\"ph1\">`AttachControlSite`</ph>.","source":"Once the object has been successfully created, add a custom control site with a call to `AttachControlSite`."},{"pos":[9176,9263],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__createcontrol\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::CreateControl","linkify":"<a name=\"colecontrolcontainer__createcontrol\"></a>  COleControlContainer::CreateControl","source":"<a name=\"colecontrolcontainer__createcontrol\"></a>  COleControlContainer::CreateControl"},{"pos":[9267,9344],"content":"Creates an ActiveX control, hosted by the specified <ph id=\"ph1\">`COleControlSite`</ph> object.","source":"Creates an ActiveX control, hosted by the specified `COleControlSite` object."},{"pos":[9959,9969],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the window object representing the control.","pos":[9987,10043]},{"content":"The unique class ID of the control.","pos":[10061,10096]},{"content":"A pointer to the text to be displayed in the control.","pos":[10123,10176]},{"content":"Sets the value of the control's Caption or Text property (if any).","pos":[10177,10243]},{"content":"If <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the control's Caption or Text property is not changed.","pos":[10244,10311],"source":" If **NULL**, the control's Caption or Text property is not changed."},{"content":"Windows styles.","pos":[10331,10346]},{"content":"The available styles are listed under the <bpt id=\"p1\">**</bpt>Remarks<ept id=\"p1\">**</ept> section.","pos":[10347,10409],"source":" The available styles are listed under the **Remarks** section."},{"content":"Specifies the control's size and position.","pos":[10426,10468]},{"content":"It can be either a <ph id=\"ph1\">`CRect`</ph> object or a <ph id=\"ph2\">`RECT`</ph> structure.","pos":[10469,10525],"source":" It can be either a `CRect` object or a `RECT` structure."},{"content":"Specifies the control's child window ID.","pos":[10541,10581]},{"content":"A pointer to a <ph id=\"ph1\">`CFile`</ph> containing the persistent state for the control.","pos":[10602,10673],"source":" A pointer to a `CFile` containing the persistent state for the control."},{"content":"The default value is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, indicating that the control initializes itself without restoring its state from any persistent storage.","pos":[10674,10808],"source":" The default value is **NULL**, indicating that the control initializes itself without restoring its state from any persistent storage."},{"content":"If not <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, it should be a pointer to a <ph id=\"ph1\">`CFile`</ph>-derived object that contains the control's persistent data, in the form of either a stream or a storage.","pos":[10809,10966],"source":" If not **NULL**, it should be a pointer to a `CFile`-derived object that contains the control's persistent data, in the form of either a stream or a storage."},{"content":"This data could have been saved in a previous activation of the client.","pos":[10967,11038]},{"content":"The <ph id=\"ph1\">`CFile`</ph> can contain other data, but must have its read-write pointer set to the first byte of persistent data at the time of the call to <ph id=\"ph2\">`CreateControl`</ph>.","pos":[11039,11196],"source":" The `CFile` can contain other data, but must have its read-write pointer set to the first byte of persistent data at the time of the call to `CreateControl`."},{"content":"Indicates whether the data in <ph id=\"ph1\">`pPersist`</ph> should be interpreted as <ph id=\"ph2\">`IStorage`</ph> or <ph id=\"ph3\">`IStream`</ph> data.","pos":[11217,11312],"source":" Indicates whether the data in `pPersist` should be interpreted as `IStorage` or `IStream` data."},{"content":"If the data in <ph id=\"ph1\">`pPersist`</ph> is a storage, <ph id=\"ph2\">`bStorage`</ph> should be <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>.","pos":[11313,11383],"source":" If the data in `pPersist` is a storage, `bStorage` should be **TRUE**."},{"content":"If the data in <ph id=\"ph1\">`pPersist`</ph> is a stream, <ph id=\"ph2\">`bStorage`</ph> should be <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>.","pos":[11384,11454],"source":" If the data in `pPersist` is a stream, `bStorage` should be **FALSE**."},{"content":"The default value is <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>.","pos":[11455,11486],"source":" The default value is **FALSE**."},{"content":"Optional license key data.","pos":[11509,11535]},{"content":"This data is needed only for creating controls that require a run-time license key.","pos":[11536,11619]},{"content":"If the control supports licensing, you must provide a license key for the creation of the control to succeed.","pos":[11620,11729]},{"content":"The default value is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[11730,11760],"source":" The default value is **NULL**."},{"content":"<bpt id=\"p1\">*</bpt>ppNewSite<ept id=\"p1\">*</ept>","pos":[11767,11778],"source":"*ppNewSite*"},{"content":"A pointer to the existing control site that will host the control being created.","pos":[11782,11862]},{"content":"The default value is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, indicating that a new control site will be automatically created and attached to the new control.","pos":[11863,11991],"source":" The default value is **NULL**, indicating that a new control site will be automatically created and attached to the new control."},{"content":"A pointer to a <bpt id=\"p1\">**</bpt>POINT<ept id=\"p1\">**</ept> structure that contains the upper-left corner of the control.","pos":[12007,12093],"source":" A pointer to a **POINT** structure that contains the upper-left corner of the control."},{"content":"The size of the control is determined by the value of <bpt id=\"p1\">*</bpt>psize<ept id=\"p1\">*</ept>.","pos":[12094,12156],"source":" The size of the control is determined by the value of *psize*."},{"content":"The <ph id=\"ph1\">`ppt`</ph> and <bpt id=\"p1\">*</bpt>psize<ept id=\"p1\">*</ept> values are an optional method of specifying the size and position of the control.","pos":[12157,12260],"source":" The `ppt` and *psize* values are an optional method of specifying the size and position of the control."},{"content":"<bpt id=\"p1\">*</bpt>psize<ept id=\"p1\">*</ept>","pos":[12267,12274],"source":"*psize*"},{"content":"A pointer to a <bpt id=\"p1\">**</bpt>SIZE<ept id=\"p1\">**</ept> structure that contains the size of the control.","pos":[12278,12350],"source":" A pointer to a **SIZE** structure that contains the size of the control."},{"content":"The upper-left corner is determined by the value of <ph id=\"ph1\">`ppt`</ph>.","pos":[12351,12409],"source":" The upper-left corner is determined by the value of `ppt`."},{"content":"The <ph id=\"ph1\">`ppt`</ph> and <bpt id=\"p1\">*</bpt>psize<ept id=\"p1\">*</ept> values are an optional method of specifying the size and position of the control.","pos":[12410,12513],"source":" The `ppt` and *psize* values are an optional method of specifying the size and position of the control."},{"pos":[12523,12535],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[12539,12574]},{"pos":[12584,12591],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12595,12673],"content":"Only a subset of the Windows <ph id=\"ph1\">`dwStyle`</ph> flags are supported by <ph id=\"ph2\">`CreateControl`</ph>:","source":"Only a subset of the Windows `dwStyle` flags are supported by `CreateControl`:"},{"content":"<bpt id=\"p1\">**</bpt>WS_VISIBLE<ept id=\"p1\">**</ept> Creates a window that is initially visible.","pos":[12681,12739],"source":"**WS_VISIBLE** Creates a window that is initially visible."},{"content":"Required if you want the control to be visible immediately, like ordinary windows.","pos":[12740,12822]},{"content":"<bpt id=\"p1\">**</bpt>WS_DISABLED<ept id=\"p1\">**</ept> Creates a window that is initially disabled.","pos":[12830,12890],"source":"**WS_DISABLED** Creates a window that is initially disabled."},{"content":"A disabled window cannot receive input from the user.","pos":[12891,12944]},{"content":"Can be set if the control has an Enabled property.","pos":[12945,12995]},{"content":"<ph id=\"ph1\">`WS_BORDER`</ph> Creates a window with a thin-line border.","pos":[13003,13056],"source":"`WS_BORDER` Creates a window with a thin-line border."},{"content":"Can be set if control has a BorderStyle property.","pos":[13057,13106]},{"content":"<bpt id=\"p1\">**</bpt>WS_GROUP<ept id=\"p1\">**</ept> Specifies the first control of a group of controls.","pos":[13114,13178],"source":"**WS_GROUP** Specifies the first control of a group of controls."},{"content":"The user can change the keyboard focus from one control in the group to the next by using the direction keys.","pos":[13179,13288]},{"content":"All controls defined with the <bpt id=\"p1\">**</bpt>WS_GROUP<ept id=\"p1\">**</ept> style after the first control belong to the same group.","pos":[13289,13387],"source":" All controls defined with the **WS_GROUP** style after the first control belong to the same group."},{"content":"The next control with the <bpt id=\"p1\">**</bpt>WS_GROUP<ept id=\"p1\">**</ept> style ends the group and starts the next group.","pos":[13388,13474],"source":" The next control with the **WS_GROUP** style ends the group and starts the next group."},{"content":"<bpt id=\"p1\">**</bpt>WS_TABSTOP<ept id=\"p1\">**</ept> Specifies a control that can receive the keyboard focus when the user presses the TAB key.","pos":[13482,13587],"source":"**WS_TABSTOP** Specifies a control that can receive the keyboard focus when the user presses the TAB key."},{"content":"Pressing the TAB key changes the keyboard focus to the next control of the <bpt id=\"p1\">**</bpt>WS_TABSTOP<ept id=\"p1\">**</ept> style.","pos":[13588,13684],"source":" Pressing the TAB key changes the keyboard focus to the next control of the **WS_TABSTOP** style."},{"content":"Use the second overload to create default-sized controls.","pos":[13691,13748]},{"pos":[13758,13845],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__createolefont\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::CreateOleFont","linkify":"<a name=\"colecontrolcontainer__createolefont\"></a>  COleControlContainer::CreateOleFont","source":"<a name=\"colecontrolcontainer__createolefont\"></a>  COleControlContainer::CreateOleFont"},{"content":"Creates an OLE font.","pos":[13849,13869]},{"pos":[13928,13938],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the font to be used by the control container.","pos":[13953,14011]},{"pos":[14021,14098],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__finditem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::FindItem","linkify":"<a name=\"colecontrolcontainer__finditem\"></a>  COleControlContainer::FindItem","source":"<a name=\"colecontrolcontainer__finditem\"></a>  COleControlContainer::FindItem"},{"content":"Finds the custom site that hosts the specified item.","pos":[14102,14154]},{"pos":[14233,14243],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The identifier of the item to be found.","pos":[14256,14295]},{"pos":[14305,14317],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the custom site of the specified item.","pos":[14321,14372]},{"pos":[14382,14473],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__freezeallevents\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::FreezeAllEvents","linkify":"<a name=\"colecontrolcontainer__freezeallevents\"></a>  COleControlContainer::FreezeAllEvents","source":"<a name=\"colecontrolcontainer__freezeallevents\"></a>  COleControlContainer::FreezeAllEvents"},{"content":"Determines if the container will ignore events from the attached control sites or accept them.","pos":[14477,14571]},{"pos":[14632,14642],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Nonzero if events will be processed; otherwise 0.","pos":[14659,14708]},{"pos":[14718,14725],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14733,14923],"content":"[!NOTE]\n The control is not required to stop firing events if requested by the control container. It can continue firing but all subsequent events will be ignored by the control container.","leadings":["","> "],"nodes":[{"content":" The control is not required to stop firing events if requested by the control container. It can continue firing but all subsequent events will be ignored by the control container.","pos":[8,188],"nodes":[{"content":"The control is not required to stop firing events if requested by the control container.","pos":[1,89]},{"content":"It can continue firing but all subsequent events will be ignored by the control container.","pos":[90,180]}]}]},{"pos":[14933,15022],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__getambientprop\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::GetAmbientProp","linkify":"<a name=\"colecontrolcontainer__getambientprop\"></a>  COleControlContainer::GetAmbientProp","source":"<a name=\"colecontrolcontainer__getambientprop\"></a>  COleControlContainer::GetAmbientProp"},{"content":"Retrieves the value of a specified ambient property.","pos":[15026,15078]},{"pos":[15209,15219],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a control site from which the ambient property will be retrieved.","pos":[15234,15312]},{"content":"The dispatch ID of the desired ambient property.","pos":[15331,15379]},{"content":"<bpt id=\"p1\">*</bpt>pVarResult<ept id=\"p1\">*</ept>","pos":[15386,15398],"source":"*pVarResult*"},{"content":"A pointer to the value of the ambient property.","pos":[15402,15449]},{"pos":[15459,15471],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[15475,15510]},{"pos":[15520,15601],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__getdlgitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::GetDlgItem","linkify":"<a name=\"colecontrolcontainer__getdlgitem\"></a>  COleControlContainer::GetDlgItem","source":"<a name=\"colecontrolcontainer__getdlgitem\"></a>  COleControlContainer::GetDlgItem"},{"content":"Retrieves a pointer to the specified control or child window in a dialog box or other window.","pos":[15605,15698]},{"pos":[15841,15851],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Identifier of the dialog item to retrieve.","pos":[15864,15906]},{"content":"A pointer to the handle of the specified dialog item's window object.","pos":[15924,15993]},{"pos":[16003,16015],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the dialog item's window.","pos":[16019,16057]},{"pos":[16067,16154],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__getdlgitemint\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::GetDlgItemInt","linkify":"<a name=\"colecontrolcontainer__getdlgitemint\"></a>  COleControlContainer::GetDlgItemInt","source":"<a name=\"colecontrolcontainer__getdlgitemint\"></a>  COleControlContainer::GetDlgItemInt"},{"content":"Retrieves the value of the translated text of the given control.","pos":[16158,16222]},{"pos":[16339,16349],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The identifier of the control.","pos":[16362,16392]},{"content":"Pointer to a Boolean variable that receives a function success/failure value ( <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> indicates success, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> indicates failure).","pos":[16412,16548],"source":" Pointer to a Boolean variable that receives a function success/failure value ( **TRUE** indicates success, **FALSE** indicates failure)."},{"content":"Specifies whether the function should examine the text for a minus sign at the beginning and return a signed integer value if it finds one.","pos":[16568,16707]},{"content":"If the <ph id=\"ph1\">`bSigned`</ph> parameter is <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, specifying that the value to be retrieved is a signed integer value, cast the return value to an <ph id=\"ph2\">`int`</ph> type.","pos":[16708,16856],"source":" If the `bSigned` parameter is **TRUE**, specifying that the value to be retrieved is a signed integer value, cast the return value to an `int` type."},{"content":"To get extended error information, call <bpt id=\"p1\">[</bpt>GetLastError<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms679360)</ept>.","pos":[16857,16972],"source":" To get extended error information, call [GetLastError](http://msdn.microsoft.com/library/windows/desktop/ms679360)."},{"pos":[16982,16994],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16998,17135],"content":"If successful, the variable pointed to by <ph id=\"ph1\">`lpTrans`</ph> is set to <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, and the return value is the translated value of the control text.","source":"If successful, the variable pointed to by `lpTrans` is set to **TRUE**, and the return value is the translated value of the control text."},{"content":"If the function fails, the variable pointed to by <ph id=\"ph1\">`lpTrans`</ph> is set to <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>, and the return value is zero.","pos":[17142,17252],"source":"If the function fails, the variable pointed to by `lpTrans` is set to **FALSE**, and the return value is zero."},{"content":"Note that, since zero is a possible translated value, a return value of zero does not by itself indicate failure.","pos":[17253,17366]},{"pos":[17373,17460],"content":"If <ph id=\"ph1\">`lpTrans`</ph> is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the function returns no information about success or failure.","source":"If `lpTrans` is **NULL**, the function returns no information about success or failure."},{"pos":[17470,17477],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The function translates the retrieved text by stripping any extra spaces at the beginning of the text and then converting the decimal digits.","pos":[17481,17622]},{"content":"The function stops translating when it reaches the end of the text or encounters a nonnumeric character.","pos":[17623,17727]},{"pos":[17734,17873],"content":"This function returns zero if the translated value is greater than <bpt id=\"p1\">**</bpt>INT_MAX<ept id=\"p1\">**</ept> (for signed numbers) or <bpt id=\"p2\">**</bpt>UINT_MAX<ept id=\"p2\">**</ept> (for unsigned numbers).","source":"This function returns zero if the translated value is greater than **INT_MAX** (for signed numbers) or **UINT_MAX** (for unsigned numbers)."},{"pos":[17883,17972],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__getdlgitemtext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::GetDlgItemText","linkify":"<a name=\"colecontrolcontainer__getdlgitemtext\"></a>  COleControlContainer::GetDlgItemText","source":"<a name=\"colecontrolcontainer__getdlgitemtext\"></a>  COleControlContainer::GetDlgItemText"},{"content":"Retrieves the text of the given control.","pos":[17976,18016]},{"pos":[18133,18143],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The identifier of the control.","pos":[18156,18186]},{"content":"Pointer to the text of the control.","pos":[18204,18239]},{"content":"Specifies the maximum length, in characters, of the string to be copied to the buffer pointed to by <ph id=\"ph1\">`lpStr`</ph>.","pos":[18261,18369],"source":" Specifies the maximum length, in characters, of the string to be copied to the buffer pointed to by `lpStr`."},{"content":"If the length of the string exceeds the limit, the string is truncated.","pos":[18370,18441]},{"pos":[18451,18463],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If the function succeeds, the return value specifies the number of characters copied to the buffer, not including the terminating null character.","pos":[18467,18612]},{"content":"If the function fails, the return value is zero.","pos":[18619,18667]},{"content":"To get extended error information, call <bpt id=\"p1\">[</bpt>GetLastError<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms679360)</ept>.","pos":[18668,18783],"source":" To get extended error information, call [GetLastError](http://msdn.microsoft.com/library/windows/desktop/ms679360)."},{"pos":[18793,18882],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__handlesetfocus\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::HandleSetFocus","linkify":"<a name=\"colecontrolcontainer__handlesetfocus\"></a>  COleControlContainer::HandleSetFocus","source":"<a name=\"colecontrolcontainer__handlesetfocus\"></a>  COleControlContainer::HandleSetFocus"},{"pos":[18886,18945],"content":"Determines if the container handles <ph id=\"ph1\">`WM_SETFOCUS`</ph> messages.","source":"Determines if the container handles `WM_SETFOCUS` messages."},{"pos":[19001,19013],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19017,19089],"content":"Nonzero if the container handles <ph id=\"ph1\">`WM_SETFOCUS`</ph> messages; otherwise zero.","source":"Nonzero if the container handles `WM_SETFOCUS` messages; otherwise zero."},{"pos":[19099,19206],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__handlewindowlessmessage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::HandleWindowlessMessage","linkify":"<a name=\"colecontrolcontainer__handlewindowlessmessage\"></a>  COleControlContainer::HandleWindowlessMessage","source":"<a name=\"colecontrolcontainer__handlewindowlessmessage\"></a>  COleControlContainer::HandleWindowlessMessage"},{"content":"Processes window messages for windowless controls.","pos":[19210,19260]},{"pos":[19409,19419],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The identifier for the window message, provided by Windows.","pos":[19436,19495]},{"content":"Parameter of the message; provided by Windows.","pos":[19514,19560]},{"content":"Specifies additional message-specific information.","pos":[19561,19611]},{"content":"The contents of this parameter depend on the value of the <ph id=\"ph1\">`message`</ph> parameter.","pos":[19612,19690],"source":" The contents of this parameter depend on the value of the `message` parameter."},{"content":"Parameter of the message; provided by Windows.","pos":[19709,19755]},{"content":"Specifies additional message-specific information.","pos":[19756,19806]},{"content":"The contents of this parameter depend on the value of the <ph id=\"ph1\">`message`</ph> parameter.","pos":[19807,19885],"source":" The contents of this parameter depend on the value of the `message` parameter."},{"content":"<bpt id=\"p1\">*</bpt>plResult<ept id=\"p1\">*</ept>","pos":[19892,19902],"source":"*plResult*"},{"content":"Windows result code.","pos":[19906,19926]},{"content":"Specifies the result of the message processing and depends on the message sent.","pos":[19927,20006]},{"pos":[20016,20028],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[20032,20070]},{"pos":[20080,20087],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this function to customize the handling of windowless control messages.","pos":[20091,20171]},{"pos":[20181,20278],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__isdlgbuttonchecked\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::IsDlgButtonChecked","linkify":"<a name=\"colecontrolcontainer__isdlgbuttonchecked\"></a>  COleControlContainer::IsDlgButtonChecked","source":"<a name=\"colecontrolcontainer__isdlgbuttonchecked\"></a>  COleControlContainer::IsDlgButtonChecked"},{"content":"Determines the state of the specified button.","pos":[20282,20327]},{"pos":[20409,20419],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The identifier of the button control.","pos":[20438,20475]},{"pos":[20485,20497],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The return value, from a button created with the <bpt id=\"p1\">**</bpt>BS_AUTOCHECKBOX<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>BS_AUTORADIOBUTTON<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>BS_AUTO3STATE<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>BS_CHECKBOX<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>BS_RADIOBUTTON<ept id=\"p5\">**</ept>, or <bpt id=\"p6\">**</bpt>BS_3STATE<ept id=\"p6\">**</ept> style.","pos":[20501,20674],"source":"The return value, from a button created with the **BS_AUTOCHECKBOX**, **BS_AUTORADIOBUTTON**, **BS_AUTO3STATE**, **BS_CHECKBOX**, **BS_RADIOBUTTON**, or **BS_3STATE** style."},{"content":"Can be one of the following:","pos":[20675,20703]},{"pos":[20711,20745],"content":"<bpt id=\"p1\">**</bpt>BST_CHECKED<ept id=\"p1\">**</ept> Button is checked.","source":"**BST_CHECKED** Button is checked."},{"pos":[20753,20905],"content":"<bpt id=\"p1\">**</bpt>BST_INDETERMINATE<ept id=\"p1\">**</ept> Button is grayed, indicating an indeterminate state (applies only if the button has the <bpt id=\"p2\">**</bpt>BS_3STATE<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>BS_AUTO3STATE<ept id=\"p3\">**</ept> style).","source":"**BST_INDETERMINATE** Button is grayed, indicating an indeterminate state (applies only if the button has the **BS_3STATE** or **BS_AUTO3STATE** style)."},{"pos":[20913,20949],"content":"<bpt id=\"p1\">**</bpt>BST_UNCHECKED<ept id=\"p1\">**</ept> Button is cleared.","source":"**BST_UNCHECKED** Button is cleared."},{"pos":[20959,20966],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the button is a three-state control, the member function determines whether it is dimmed, checked, or neither.","pos":[20970,21083]},{"pos":[21093,21170],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__m_crback\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::m_crBack","linkify":"<a name=\"colecontrolcontainer__m_crback\"></a>  COleControlContainer::m_crBack","source":"<a name=\"colecontrolcontainer__m_crback\"></a>  COleControlContainer::m_crBack"},{"content":"The background color of the container.","pos":[21174,21212]},{"pos":[21258,21335],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__m_crfore\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::m_crFore","linkify":"<a name=\"colecontrolcontainer__m_crfore\"></a>  COleControlContainer::m_crFore","source":"<a name=\"colecontrolcontainer__m_crfore\"></a>  COleControlContainer::m_crFore"},{"content":"The foreground color of the container.","pos":[21339,21377]},{"pos":[21423,21518],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__m_listsitesorwnds\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::m_listSitesOrWnds","linkify":"<a name=\"colecontrolcontainer__m_listsitesorwnds\"></a>  COleControlContainer::m_listSitesOrWnds","source":"<a name=\"colecontrolcontainer__m_listsitesorwnds\"></a>  COleControlContainer::m_listSitesOrWnds"},{"content":"A list of the control sites hosted by the container.","pos":[21522,21574]},{"pos":[21667,21770],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__m_nwindowlesscontrols\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::m_nWindowlessControls","linkify":"<a name=\"colecontrolcontainer__m_nwindowlesscontrols\"></a>  COleControlContainer::m_nWindowlessControls","source":"<a name=\"colecontrolcontainer__m_nwindowlesscontrols\"></a>  COleControlContainer::m_nWindowlessControls"},{"content":"The number of windowless controls hosted by the control container.","pos":[21774,21840]},{"pos":[21894,21975],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__m_polefont\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::m_pOleFont","linkify":"<a name=\"colecontrolcontainer__m_polefont\"></a>  COleControlContainer::m_pOleFont","source":"<a name=\"colecontrolcontainer__m_polefont\"></a>  COleControlContainer::m_pOleFont"},{"content":"A pointer to the OLE font of the custom control site.","pos":[21979,22032]},{"pos":[22082,22171],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__m_psitecapture\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::m_pSiteCapture","linkify":"<a name=\"colecontrolcontainer__m_psitecapture\"></a>  COleControlContainer::m_pSiteCapture","source":"<a name=\"colecontrolcontainer__m_psitecapture\"></a>  COleControlContainer::m_pSiteCapture"},{"content":"Pointer to the capture control site.","pos":[22175,22211]},{"pos":[22271,22356],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__m_psitefocus\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::m_pSiteFocus","linkify":"<a name=\"colecontrolcontainer__m_psitefocus\"></a>  COleControlContainer::m_pSiteFocus","source":"<a name=\"colecontrolcontainer__m_psitefocus\"></a>  COleControlContainer::m_pSiteFocus"},{"content":"A pointer to the control site that currently has input focus.","pos":[22360,22421]},{"pos":[22479,22570],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__m_psiteuiactive\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::m_pSiteUIActive","linkify":"<a name=\"colecontrolcontainer__m_psiteuiactive\"></a>  COleControlContainer::m_pSiteUIActive","source":"<a name=\"colecontrolcontainer__m_psiteuiactive\"></a>  COleControlContainer::m_pSiteUIActive"},{"content":"A pointer to the control site that is in-place activated.","pos":[22574,22631]},{"pos":[22692,22765],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__m_pwnd\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::m_pWnd","linkify":"<a name=\"colecontrolcontainer__m_pwnd\"></a>  COleControlContainer::m_pWnd","source":"<a name=\"colecontrolcontainer__m_pwnd\"></a>  COleControlContainer::m_pWnd"},{"content":"A pointer to the window object associated with the container.","pos":[22769,22830]},{"pos":[22871,22950],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__m_sitemap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::m_siteMap","linkify":"<a name=\"colecontrolcontainer__m_sitemap\"></a>  COleControlContainer::m_siteMap","source":"<a name=\"colecontrolcontainer__m_sitemap\"></a>  COleControlContainer::m_siteMap"},{"content":"The site map.","pos":[22954,22967]},{"pos":[23018,23093],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__onpaint\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::OnPaint","linkify":"<a name=\"colecontrolcontainer__onpaint\"></a>  COleControlContainer::OnPaint","source":"<a name=\"colecontrolcontainer__onpaint\"></a>  COleControlContainer::OnPaint"},{"pos":[23097,23151],"content":"Called by the framework to handle <ph id=\"ph1\">`WM_PAINT`</ph> requests.","source":"Called by the framework to handle `WM_PAINT` requests."},{"pos":[23208,23218],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the device context used by the container.","pos":[23231,23285]},{"pos":[23295,23307],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the message was handled; otherwise zero.","pos":[23311,23362]},{"pos":[23372,23379],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this function to customize the painting process.","pos":[23383,23440]},{"pos":[23450,23535],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__onuiactivate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::OnUIActivate","linkify":"<a name=\"colecontrolcontainer__onuiactivate\"></a>  COleControlContainer::OnUIActivate","source":"<a name=\"colecontrolcontainer__onuiactivate\"></a>  COleControlContainer::OnUIActivate"},{"pos":[23539,23643],"content":"Called by the framework when the control site, pointed to by <ph id=\"ph1\">`pSite`</ph>, is about to be activated in-place.","source":"Called by the framework when the control site, pointed to by `pSite`, is about to be activated in-place."},{"pos":[23719,23729],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the control site about to be in-place activated.","pos":[23744,23805]},{"pos":[23815,23822],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In-place activation means that the container's main menu is replaced with an in-place composite menu.","pos":[23826,23927]},{"pos":[23937,24026],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__onuideactivate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::OnUIDeactivate","linkify":"<a name=\"colecontrolcontainer__onuideactivate\"></a>  COleControlContainer::OnUIDeactivate","source":"<a name=\"colecontrolcontainer__onuideactivate\"></a>  COleControlContainer::OnUIDeactivate"},{"pos":[24030,24127],"content":"Called by the framework when the control site, pointed to by <ph id=\"ph1\">`pSite`</ph>, is about to be deactivated.","source":"Called by the framework when the control site, pointed to by `pSite`, is about to be deactivated."},{"pos":[24205,24215],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the control site about to be deactivated.","pos":[24230,24284]},{"pos":[24294,24301],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this notification is received, the container should reinstall its user interface and take focus.","pos":[24305,24406]},{"pos":[24416,24505],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__scrollchildren\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::ScrollChildren","linkify":"<a name=\"colecontrolcontainer__scrollchildren\"></a>  COleControlContainer::ScrollChildren","source":"<a name=\"colecontrolcontainer__scrollchildren\"></a>  COleControlContainer::ScrollChildren"},{"content":"Called by the framework when scroll messages are received from a child window.","pos":[24509,24587]},{"pos":[24668,24678],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The amount, in pixels, of scrolling along the x-axis.","pos":[24690,24743]},{"content":"<bpt id=\"p1\">*</bpt>dy<ept id=\"p1\">*</ept>","pos":[24750,24754],"source":"*dy*"},{"content":"The amount, in pixels, of scrolling along the y-axis.","pos":[24758,24811]},{"pos":[24821,24918],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__senddlgitemmessage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::SendDlgItemMessage","linkify":"<a name=\"colecontrolcontainer__senddlgitemmessage\"></a>  COleControlContainer::SendDlgItemMessage","source":"<a name=\"colecontrolcontainer__senddlgitemmessage\"></a>  COleControlContainer::SendDlgItemMessage"},{"content":"Sends a message to the specified control.","pos":[24922,24963]},{"pos":[25100,25110],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the identifier of the control that receives the message.","pos":[25123,25189]},{"content":"Specifies the message to be sent.","pos":[25209,25242]},{"content":"Specifies additional message-specific information.","pos":[25261,25311]},{"content":"Specifies additional message-specific information.","pos":[25330,25380]},{"pos":[25390,25477],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__setdlgitemint\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::SetDlgItemInt","linkify":"<a name=\"colecontrolcontainer__setdlgitemint\"></a>  COleControlContainer::SetDlgItemInt","source":"<a name=\"colecontrolcontainer__setdlgitemint\"></a>  COleControlContainer::SetDlgItemInt"},{"content":"Sets the text of a control in a dialog box to the string representation of a specified integer value.","pos":[25481,25582]},{"pos":[25688,25698],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The identifier of the control.","pos":[25711,25741]},{"content":"The integer value to be displayed.","pos":[25760,25794]},{"content":"Specifies whether the <ph id=\"ph1\">`nValue`</ph> parameter is signed or unsigned.","pos":[25814,25877],"source":" Specifies whether the `nValue` parameter is signed or unsigned."},{"content":"If this parameter is <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`nValue`</ph> is signed.","pos":[25878,25928],"source":" If this parameter is **TRUE**, `nValue` is signed."},{"content":"If this parameter is <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> and <ph id=\"ph1\">`nValue`</ph> is less than zero, a minus sign is placed before the first digit in the string.","pos":[25929,26051],"source":" If this parameter is **TRUE** and `nValue` is less than zero, a minus sign is placed before the first digit in the string."},{"content":"If this parameter is <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`nValue`</ph> is unsigned.","pos":[26052,26105],"source":" If this parameter is **FALSE**, `nValue` is unsigned."},{"pos":[26115,26204],"content":"<bpt id=\"p1\">&lt;a name=\"colecontrolcontainer__setdlgitemtext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleControlContainer::SetDlgItemText","linkify":"<a name=\"colecontrolcontainer__setdlgitemtext\"></a>  COleControlContainer::SetDlgItemText","source":"<a name=\"colecontrolcontainer__setdlgitemtext\"></a>  COleControlContainer::SetDlgItemText"},{"pos":[26208,26289],"content":"Sets the text of the specified control, using the text contained in <ph id=\"ph1\">`lpszString`</ph>.","source":"Sets the text of the specified control, using the text contained in `lpszString`."},{"pos":[26383,26393],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The identifier of the control.","pos":[26406,26436]},{"content":"Pointer to the text of the control.","pos":[26459,26494]},{"pos":[26503,26511],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>CCmdTarget Class<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[26515,26575],"source":"[CCmdTarget Class](../../mfc/reference/ccmdtarget-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[26578,26627],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>COleControlSite Class<ept id=\"p1\">](../../mfc/reference/colecontrolsite-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[26630,26701],"source":" [COleControlSite Class](../../mfc/reference/colecontrolsite-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>COccManager Class<ept id=\"p1\">](../../mfc/reference/coccmanager-class.md)</ept>","pos":[26704,26766],"source":" [COccManager Class](../../mfc/reference/coccmanager-class.md)"}],"content":"---\ntitle: \"COleControlContainer Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"COleControlContainer\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"custom controls [MFC], sites\"\n  - \"COleControlContainer class\"\n  - \"ActiveX control containers [C++], control site\"\nms.assetid: f7ce9246-0fb7-4f07-a83a-6c2390d0fdf8\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# COleControlContainer Class\nActs as a control container for ActiveX controls.  \n  \n## Syntax  \n  \n```  \nclass COleControlContainer : public CCmdTarget  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[COleControlContainer::COleControlContainer](#colecontrolcontainer__colecontrolcontainer)|Constructs a `COleControlContainer` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[COleControlContainer::AttachControlSite](#colecontrolcontainer__attachcontrolsite)|Creates a control site, hosted by the container.|  \n|[COleControlContainer::BroadcastAmbientPropertyChange](#colecontrolcontainer__broadcastambientpropertychange)|Informs all hosted controls that an ambient property has changed.|  \n|[COleControlContainer::CheckDlgButton](#colecontrolcontainer__checkdlgbutton)|Modifies the specified button control.|  \n|[COleControlContainer::CheckRadioButton](#colecontrolcontainer__checkradiobutton)|Selects the specified radio button of a group.|  \n|[COleControlContainer::CreateControl](#colecontrolcontainer__createcontrol)|Creates a hosted ActiveX control.|  \n|[COleControlContainer::CreateOleFont](#colecontrolcontainer__createolefont)|Creates an OLE font.|  \n|[COleControlContainer::FindItem](#colecontrolcontainer__finditem)|Returns the custom site of the specified control.|  \n|[COleControlContainer::FreezeAllEvents](#colecontrolcontainer__freezeallevents)|Determines if the control site is accepting events.|  \n|[COleControlContainer::GetAmbientProp](#colecontrolcontainer__getambientprop)|Retrieves the specified ambient property.|  \n|[COleControlContainer::GetDlgItem](#colecontrolcontainer__getdlgitem)|Retrieves the specified dialog control.|  \n|[COleControlContainer::GetDlgItemInt](#colecontrolcontainer__getdlgitemint)|Retrieves the value of the specified dialog control.|  \n|[COleControlContainer::GetDlgItemText](#colecontrolcontainer__getdlgitemtext)|Retrieves the caption of the specified dialog control.|  \n|[COleControlContainer::HandleSetFocus](#colecontrolcontainer__handlesetfocus)|Determines if the container handles `WM_SETFOCUS` messages.|  \n|[COleControlContainer::HandleWindowlessMessage](#colecontrolcontainer__handlewindowlessmessage)|Handles messages sent to a windowless control.|  \n|[COleControlContainer::IsDlgButtonChecked](#colecontrolcontainer__isdlgbuttonchecked)|Determines the state of the specified button.|  \n|[COleControlContainer::OnPaint](#colecontrolcontainer__onpaint)|Called to repaint a portion of the container.|  \n|[COleControlContainer::OnUIActivate](#colecontrolcontainer__onuiactivate)|Called when a control is about to be in-place activated.|  \n|[COleControlContainer::OnUIDeactivate](#colecontrolcontainer__onuideactivate)|Called when a control is about to be deactivated.|  \n|[COleControlContainer::ScrollChildren](#colecontrolcontainer__scrollchildren)|Called by the framework when scroll messages are received from a child window.|  \n|[COleControlContainer::SendDlgItemMessage](#colecontrolcontainer__senddlgitemmessage)|Sends a message to the specified control.|  \n|[COleControlContainer::SetDlgItemInt](#colecontrolcontainer__setdlgitemint)|Sets the value of the specified control.|  \n|[COleControlContainer::SetDlgItemText](#colecontrolcontainer__setdlgitemtext)|Sets the text of the specified control.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[COleControlContainer::m_crBack](#colecontrolcontainer__m_crback)|The background color of the container.|  \n|[COleControlContainer::m_crFore](#colecontrolcontainer__m_crfore)|The foreground color of the container.|  \n|[COleControlContainer::m_listSitesOrWnds](#colecontrolcontainer__m_listsitesorwnds)|A list of the supported control sites.|  \n|[COleControlContainer::m_nWindowlessControls](#colecontrolcontainer__m_nwindowlesscontrols)|The number of hosted windowless controls.|  \n|[COleControlContainer::m_pOleFont](#colecontrolcontainer__m_polefont)|A pointer to the OLE font of the custom control site.|  \n|[COleControlContainer::m_pSiteCapture](#colecontrolcontainer__m_psitecapture)|Pointer to the capture control site.|  \n|[COleControlContainer::m_pSiteFocus](#colecontrolcontainer__m_psitefocus)|Pointer to the control that currently has input focus.|  \n|[COleControlContainer::m_pSiteUIActive](#colecontrolcontainer__m_psiteuiactive)|Pointer to the control that is currently in-place activated.|  \n|[COleControlContainer::m_pWnd](#colecontrolcontainer__m_pwnd)|Pointer to the window implementing the control container.|  \n|[COleControlContainer::m_siteMap](#colecontrolcontainer__m_sitemap)|The site map.|  \n  \n## Remarks  \n This is done by providing support for one or more ActiveX control sites (implemented by `COleControlSite`). `COleControlContainer` fully implements the [IOleInPlaceFrame](http://msdn.microsoft.com/library/windows/desktop/ms692770) and [IOleContainer](http://msdn.microsoft.com/library/windows/desktop/ms690103) interfaces, allowing the contained ActiveX controls to fulfill their qualifications as in-place items.  \n  \n Commonly, this class is used in conjunction with `COccManager` and `COleControlSite` to implement a custom ActiveX control container, with custom sites for one or more ActiveX controls.  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n `COleControlContainer`  \n  \n## Requirements  \n **Header:** afxocc.h  \n  \n##  <a name=\"colecontrolcontainer__attachcontrolsite\"></a>  COleControlContainer::AttachControlSite  \n Called by the framework to create and attach a control site.  \n  \n```  \nvirtual void AttachControlSite(\n    CWnd* pWnd,  \n    UINT nIDC = 0);\n\n \nvoid AttachControlSite(\n    CWnd* pWnd,  \n    UINT nIDC = 0);\n```  \n  \n### Parameters  \n `pWnd`  \n A pointer to a `CWnd` object.  \n  \n `nIDC`  \n The ID of the control to be attached.  \n  \n### Remarks  \n Override this function if you want to customize this process.  \n  \n> [!NOTE]\n>  Use the first form of this function if you are statically linking to the MFC library. Use the second form if you are dynamically linking to the MFC library.  \n  \n##  <a name=\"colecontrolcontainer__broadcastambientpropertychange\"></a>  COleControlContainer::BroadcastAmbientPropertyChange  \n Informs all hosted controls that an ambient property has changed.  \n  \n```  \nvirtual void BroadcastAmbientPropertyChange(DISPID dispid);\n```  \n  \n### Parameters  \n `dispid`  \n The dispatch ID of the ambient property being changed.  \n  \n### Remarks  \n This function is called by the framework when an ambient property has changed value. Override this function to customize this behavior.  \n  \n##  <a name=\"colecontrolcontainer__checkdlgbutton\"></a>  COleControlContainer::CheckDlgButton  \n Modifies the current state of the button.  \n  \n```  \nvirtual void CheckDlgButton(\n    int nIDButton,  \n    UINT nCheck);\n```  \n  \n### Parameters  \n `nIDButton`  \n The ID of the button to be modified.  \n  \n `nCheck`  \n Specifies the state of the button. Can be one of the following:  \n  \n- **BST_CHECKED** Sets the button state to checked.  \n  \n- **BST_INDETERMINATE** Sets the button state to grayed, indicating an indeterminate state. Use this value only if the button has the **BS_3STATE** or **BS_AUTO3STATE** style.  \n  \n- **BST_UNCHECKED** Sets the button state to cleared.  \n  \n##  <a name=\"colecontrolcontainer__checkradiobutton\"></a>  COleControlContainer::CheckRadioButton  \n Selects a specified radio button in a group and clears the remaining buttons in the group.  \n  \n```  \nvirtual void CheckRadioButton(\n    int nIDFirstButton,  \n    int nIDLastButton,  \n    int nIDCheckButton);\n```  \n  \n### Parameters  \n `nIDFirstButton`  \n Specifies the identifier of the first radio button in the group.  \n  \n `nIDLastButton`  \n Specifies the identifier of the last radio button in the group.  \n  \n `nIDCheckButton`  \n Specifies the identifier of the radio button to be checked.  \n  \n##  <a name=\"colecontrolcontainer__colecontrolcontainer\"></a>  COleControlContainer::COleControlContainer  \n Constructs a `COleControlContainer` object.  \n  \n```  \nexplicit COleControlContainer(CWnd* pWnd);\n```  \n  \n### Parameters  \n `pWnd`  \n A pointer to the parent window of the control container.  \n  \n### Remarks  \n Once the object has been successfully created, add a custom control site with a call to `AttachControlSite`.  \n  \n##  <a name=\"colecontrolcontainer__createcontrol\"></a>  COleControlContainer::CreateControl  \n Creates an ActiveX control, hosted by the specified `COleControlSite` object.  \n  \n```  \nBOOL CreateControl(\n    CWnd* pWndCtrl,  \n    REFCLSID clsid,  \n    LPCTSTR lpszWindowName,  \n    DWORD dwStyle,  \n    const RECT& rect,  \n    UINT nID,  \n    CFile* pPersist =NULL,  \n    BOOL bStorage =FALSE,  \n    BSTR bstrLicKey =NULL,  \n    COleControlSite** ppNewSite =NULL);\n\n \nBOOL CreateControl(\n    CWnd* pWndCtrl,  \n    REFCLSID clsid,  \n    LPCTSTR lpszWindowName,  \n    DWORD dwStyle,  \n    const POINT* ppt,  \n    const SIZE* psize,  \n    UINT nID,  \n    CFile* pPersist =NULL,  \n    BOOL bStorage =FALSE,  \n    BSTR bstrLicKey =NULL,  \n    COleControlSite** ppNewSite =NULL);\n```  \n  \n### Parameters  \n `pWndCtrl`  \n A pointer to the window object representing the control.  \n  \n `clsid`  \n The unique class ID of the control.  \n  \n `lpszWindowName`  \n A pointer to the text to be displayed in the control. Sets the value of the control's Caption or Text property (if any). If **NULL**, the control's Caption or Text property is not changed.  \n  \n `dwStyle`  \n Windows styles. The available styles are listed under the **Remarks** section.  \n  \n `rect`  \n Specifies the control's size and position. It can be either a `CRect` object or a `RECT` structure.  \n  \n `nID`  \n Specifies the control's child window ID.  \n  \n `pPersist`  \n A pointer to a `CFile` containing the persistent state for the control. The default value is **NULL**, indicating that the control initializes itself without restoring its state from any persistent storage. If not **NULL**, it should be a pointer to a `CFile`-derived object that contains the control's persistent data, in the form of either a stream or a storage. This data could have been saved in a previous activation of the client. The `CFile` can contain other data, but must have its read-write pointer set to the first byte of persistent data at the time of the call to `CreateControl`.  \n  \n `bStorage`  \n Indicates whether the data in `pPersist` should be interpreted as `IStorage` or `IStream` data. If the data in `pPersist` is a storage, `bStorage` should be **TRUE**. If the data in `pPersist` is a stream, `bStorage` should be **FALSE**. The default value is **FALSE**.  \n  \n `bstrLicKey`  \n Optional license key data. This data is needed only for creating controls that require a run-time license key. If the control supports licensing, you must provide a license key for the creation of the control to succeed. The default value is **NULL**.  \n  \n *ppNewSite*  \n A pointer to the existing control site that will host the control being created. The default value is **NULL**, indicating that a new control site will be automatically created and attached to the new control.  \n  \n `ppt`  \n A pointer to a **POINT** structure that contains the upper-left corner of the control. The size of the control is determined by the value of *psize*. The `ppt` and *psize* values are an optional method of specifying the size and position of the control.  \n  \n *psize*  \n A pointer to a **SIZE** structure that contains the size of the control. The upper-left corner is determined by the value of `ppt`. The `ppt` and *psize* values are an optional method of specifying the size and position of the control.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n Only a subset of the Windows `dwStyle` flags are supported by `CreateControl`:  \n  \n- **WS_VISIBLE** Creates a window that is initially visible. Required if you want the control to be visible immediately, like ordinary windows.  \n  \n- **WS_DISABLED** Creates a window that is initially disabled. A disabled window cannot receive input from the user. Can be set if the control has an Enabled property.  \n  \n- `WS_BORDER` Creates a window with a thin-line border. Can be set if control has a BorderStyle property.  \n  \n- **WS_GROUP** Specifies the first control of a group of controls. The user can change the keyboard focus from one control in the group to the next by using the direction keys. All controls defined with the **WS_GROUP** style after the first control belong to the same group. The next control with the **WS_GROUP** style ends the group and starts the next group.  \n  \n- **WS_TABSTOP** Specifies a control that can receive the keyboard focus when the user presses the TAB key. Pressing the TAB key changes the keyboard focus to the next control of the **WS_TABSTOP** style.  \n  \n Use the second overload to create default-sized controls.  \n  \n##  <a name=\"colecontrolcontainer__createolefont\"></a>  COleControlContainer::CreateOleFont  \n Creates an OLE font.  \n  \n```  \nvoid CreateOleFont(CFont* pFont);\n```  \n  \n### Parameters  \n `pFont`  \n A pointer to the font to be used by the control container.  \n  \n##  <a name=\"colecontrolcontainer__finditem\"></a>  COleControlContainer::FindItem  \n Finds the custom site that hosts the specified item.  \n  \n```  \nvirtual COleControlSite* FindItem(UINT nID) const;\n\n \n```  \n  \n### Parameters  \n `nID`  \n The identifier of the item to be found.  \n  \n### Return Value  \n A pointer to the custom site of the specified item.  \n  \n##  <a name=\"colecontrolcontainer__freezeallevents\"></a>  COleControlContainer::FreezeAllEvents  \n Determines if the container will ignore events from the attached control sites or accept them.  \n  \n```  \nvoid FreezeAllEvents(BOOL bFreeze);\n```  \n  \n### Parameters  \n `bFreeze`  \n Nonzero if events will be processed; otherwise 0.  \n  \n### Remarks  \n  \n> [!NOTE]\n>  The control is not required to stop firing events if requested by the control container. It can continue firing but all subsequent events will be ignored by the control container.  \n  \n##  <a name=\"colecontrolcontainer__getambientprop\"></a>  COleControlContainer::GetAmbientProp  \n Retrieves the value of a specified ambient property.  \n  \n```  \nvirtual BOOL GetAmbientProp(\n    COleControlSite* pSite,  \n    DISPID dispid,  \n    VARIANT* pvarResult);\n```  \n  \n### Parameters  \n `pSite`  \n A pointer to a control site from which the ambient property will be retrieved.  \n  \n `dispid`  \n The dispatch ID of the desired ambient property.  \n  \n *pVarResult*  \n A pointer to the value of the ambient property.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n##  <a name=\"colecontrolcontainer__getdlgitem\"></a>  COleControlContainer::GetDlgItem  \n Retrieves a pointer to the specified control or child window in a dialog box or other window.  \n  \n```  \nvirtual CWnd* GetDlgItem(\n    int nID) const;\n\n \n \nvirtual void GetDlgItem(\n    int nID,  \n    HWND* phWnd) const;\n\n \n```  \n  \n### Parameters  \n `nID`  \n Identifier of the dialog item to retrieve.  \n  \n `phWnd`  \n A pointer to the handle of the specified dialog item's window object.  \n  \n### Return Value  \n A pointer to the dialog item's window.  \n  \n##  <a name=\"colecontrolcontainer__getdlgitemint\"></a>  COleControlContainer::GetDlgItemInt  \n Retrieves the value of the translated text of the given control.  \n  \n```  \nvirtual UINT GetDlgItemInt(\n    int nID,  \n    BOOL* lpTrans,  \n    BOOL bSigned) const;\n\n \n```  \n  \n### Parameters  \n `nID`  \n The identifier of the control.  \n  \n `lpTrans`  \n Pointer to a Boolean variable that receives a function success/failure value ( **TRUE** indicates success, **FALSE** indicates failure).  \n  \n `bSigned`  \n Specifies whether the function should examine the text for a minus sign at the beginning and return a signed integer value if it finds one. If the `bSigned` parameter is **TRUE**, specifying that the value to be retrieved is a signed integer value, cast the return value to an `int` type. To get extended error information, call [GetLastError](http://msdn.microsoft.com/library/windows/desktop/ms679360).  \n  \n### Return Value  \n If successful, the variable pointed to by `lpTrans` is set to **TRUE**, and the return value is the translated value of the control text.  \n  \n If the function fails, the variable pointed to by `lpTrans` is set to **FALSE**, and the return value is zero. Note that, since zero is a possible translated value, a return value of zero does not by itself indicate failure.  \n  \n If `lpTrans` is **NULL**, the function returns no information about success or failure.  \n  \n### Remarks  \n The function translates the retrieved text by stripping any extra spaces at the beginning of the text and then converting the decimal digits. The function stops translating when it reaches the end of the text or encounters a nonnumeric character.  \n  \n This function returns zero if the translated value is greater than **INT_MAX** (for signed numbers) or **UINT_MAX** (for unsigned numbers).  \n  \n##  <a name=\"colecontrolcontainer__getdlgitemtext\"></a>  COleControlContainer::GetDlgItemText  \n Retrieves the text of the given control.  \n  \n```  \nvirtual int GetDlgItemText(\n    int nID,  \n    LPTSTR lpStr,  \n    int nMaxCount) const;\n\n \n```  \n  \n### Parameters  \n `nID`  \n The identifier of the control.  \n  \n `lpStr`  \n Pointer to the text of the control.  \n  \n `nMaxCount`  \n Specifies the maximum length, in characters, of the string to be copied to the buffer pointed to by `lpStr`. If the length of the string exceeds the limit, the string is truncated.  \n  \n### Return Value  \n If the function succeeds, the return value specifies the number of characters copied to the buffer, not including the terminating null character.  \n  \n If the function fails, the return value is zero. To get extended error information, call [GetLastError](http://msdn.microsoft.com/library/windows/desktop/ms679360).  \n  \n##  <a name=\"colecontrolcontainer__handlesetfocus\"></a>  COleControlContainer::HandleSetFocus  \n Determines if the container handles `WM_SETFOCUS` messages.  \n  \n```  \nvirtual BOOL HandleSetFocus();\n```  \n  \n### Return Value  \n Nonzero if the container handles `WM_SETFOCUS` messages; otherwise zero.  \n  \n##  <a name=\"colecontrolcontainer__handlewindowlessmessage\"></a>  COleControlContainer::HandleWindowlessMessage  \n Processes window messages for windowless controls.  \n  \n```  \nvirtual BOOL HandleWindowlessMessage(\n    UINT message,  \n    WPARAM wParam,  \n    LPARAM lParam,  \n    LRESULT* plResult);\n```  \n  \n### Parameters  \n `message`  \n The identifier for the window message, provided by Windows.  \n  \n `wParam`  \n Parameter of the message; provided by Windows. Specifies additional message-specific information. The contents of this parameter depend on the value of the `message` parameter.  \n  \n `lParam`  \n Parameter of the message; provided by Windows. Specifies additional message-specific information. The contents of this parameter depend on the value of the `message` parameter.  \n  \n *plResult*  \n Windows result code. Specifies the result of the message processing and depends on the message sent.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n Override this function to customize the handling of windowless control messages.  \n  \n##  <a name=\"colecontrolcontainer__isdlgbuttonchecked\"></a>  COleControlContainer::IsDlgButtonChecked  \n Determines the state of the specified button.  \n  \n```  \nvirtual UINT IsDlgButtonChecked(int nIDButton) const;\n\n \n```  \n  \n### Parameters  \n `nIDButton`  \n The identifier of the button control.  \n  \n### Return Value  \n The return value, from a button created with the **BS_AUTOCHECKBOX**, **BS_AUTORADIOBUTTON**, **BS_AUTO3STATE**, **BS_CHECKBOX**, **BS_RADIOBUTTON**, or **BS_3STATE** style. Can be one of the following:  \n  \n- **BST_CHECKED** Button is checked.  \n  \n- **BST_INDETERMINATE** Button is grayed, indicating an indeterminate state (applies only if the button has the **BS_3STATE** or **BS_AUTO3STATE** style).  \n  \n- **BST_UNCHECKED** Button is cleared.  \n  \n### Remarks  \n If the button is a three-state control, the member function determines whether it is dimmed, checked, or neither.  \n  \n##  <a name=\"colecontrolcontainer__m_crback\"></a>  COleControlContainer::m_crBack  \n The background color of the container.  \n  \n```  \nCOLORREF m_crBack;  \n```  \n  \n##  <a name=\"colecontrolcontainer__m_crfore\"></a>  COleControlContainer::m_crFore  \n The foreground color of the container.  \n  \n```  \nCOLORREF m_crFore;  \n```  \n  \n##  <a name=\"colecontrolcontainer__m_listsitesorwnds\"></a>  COleControlContainer::m_listSitesOrWnds  \n A list of the control sites hosted by the container.  \n  \n```  \nCTypedPtrList<CPtrList, COleControlSiteOrWnd*> m_listSitesOrWnds;  \n```  \n  \n##  <a name=\"colecontrolcontainer__m_nwindowlesscontrols\"></a>  COleControlContainer::m_nWindowlessControls  \n The number of windowless controls hosted by the control container.  \n  \n```  \nint m_nWindowlessControls;  \n```  \n  \n##  <a name=\"colecontrolcontainer__m_polefont\"></a>  COleControlContainer::m_pOleFont  \n A pointer to the OLE font of the custom control site.  \n  \n```  \nLPFONTDISP m_pOleFont;  \n```  \n  \n##  <a name=\"colecontrolcontainer__m_psitecapture\"></a>  COleControlContainer::m_pSiteCapture  \n Pointer to the capture control site.  \n  \n```  \nCOleControlSite* m_pSiteCapture;  \n```  \n  \n##  <a name=\"colecontrolcontainer__m_psitefocus\"></a>  COleControlContainer::m_pSiteFocus  \n A pointer to the control site that currently has input focus.  \n  \n```  \nCOleControlSite* m_pSiteFocus;  \n```  \n  \n##  <a name=\"colecontrolcontainer__m_psiteuiactive\"></a>  COleControlContainer::m_pSiteUIActive  \n A pointer to the control site that is in-place activated.  \n  \n```  \nCOleControlSite* m_pSiteUIActive;  \n```  \n  \n##  <a name=\"colecontrolcontainer__m_pwnd\"></a>  COleControlContainer::m_pWnd  \n A pointer to the window object associated with the container.  \n  \n```  \nCWnd* m_pWnd;  \n```  \n  \n##  <a name=\"colecontrolcontainer__m_sitemap\"></a>  COleControlContainer::m_siteMap  \n The site map.  \n  \n```  \nCMapPtrToPtr m_siteMap;  \n```  \n  \n##  <a name=\"colecontrolcontainer__onpaint\"></a>  COleControlContainer::OnPaint  \n Called by the framework to handle `WM_PAINT` requests.  \n  \n```  \nvirtual BOOL OnPaint(CDC* pDC);\n```  \n  \n### Parameters  \n `pDC`  \n A pointer to the device context used by the container.  \n  \n### Return Value  \n Nonzero if the message was handled; otherwise zero.  \n  \n### Remarks  \n Override this function to customize the painting process.  \n  \n##  <a name=\"colecontrolcontainer__onuiactivate\"></a>  COleControlContainer::OnUIActivate  \n Called by the framework when the control site, pointed to by `pSite`, is about to be activated in-place.  \n  \n```  \nvirtual void OnUIActivate(COleControlSite* pSite);\n```  \n  \n### Parameters  \n `pSite`  \n A pointer to the control site about to be in-place activated.  \n  \n### Remarks  \n In-place activation means that the container's main menu is replaced with an in-place composite menu.  \n  \n##  <a name=\"colecontrolcontainer__onuideactivate\"></a>  COleControlContainer::OnUIDeactivate  \n Called by the framework when the control site, pointed to by `pSite`, is about to be deactivated.  \n  \n```  \nvirtual void OnUIDeactivate(COleControlSite* pSite);\n```  \n  \n### Parameters  \n `pSite`  \n A pointer to the control site about to be deactivated.  \n  \n### Remarks  \n When this notification is received, the container should reinstall its user interface and take focus.  \n  \n##  <a name=\"colecontrolcontainer__scrollchildren\"></a>  COleControlContainer::ScrollChildren  \n Called by the framework when scroll messages are received from a child window.  \n  \n```  \nvirtual void ScrollChildren(\n    int dx,  \n    int dy);\n```  \n  \n### Parameters  \n `dx`  \n The amount, in pixels, of scrolling along the x-axis.  \n  \n *dy*  \n The amount, in pixels, of scrolling along the y-axis.  \n  \n##  <a name=\"colecontrolcontainer__senddlgitemmessage\"></a>  COleControlContainer::SendDlgItemMessage  \n Sends a message to the specified control.  \n  \n```  \nvirtual LRESULT SendDlgItemMessage(\n    int nID,  \n    UINT message,  \n    WPARAM wParam,  \n    LPARAM lParam);\n```  \n  \n### Parameters  \n `nID`  \n Specifies the identifier of the control that receives the message.  \n  \n `message`  \n Specifies the message to be sent.  \n  \n `wParam`  \n Specifies additional message-specific information.  \n  \n `lParam`  \n Specifies additional message-specific information.  \n  \n##  <a name=\"colecontrolcontainer__setdlgitemint\"></a>  COleControlContainer::SetDlgItemInt  \n Sets the text of a control in a dialog box to the string representation of a specified integer value.  \n  \n```  \nvirtual void SetDlgItemInt(\n    int nID,  \n    UINT nValue,  \n    BOOL bSigned);\n```  \n  \n### Parameters  \n `nID`  \n The identifier of the control.  \n  \n `nValue`  \n The integer value to be displayed.  \n  \n `bSigned`  \n Specifies whether the `nValue` parameter is signed or unsigned. If this parameter is **TRUE**, `nValue` is signed. If this parameter is **TRUE** and `nValue` is less than zero, a minus sign is placed before the first digit in the string. If this parameter is **FALSE**, `nValue` is unsigned.  \n  \n##  <a name=\"colecontrolcontainer__setdlgitemtext\"></a>  COleControlContainer::SetDlgItemText  \n Sets the text of the specified control, using the text contained in `lpszString`.  \n  \n```  \nvirtual void SetDlgItemText(\n    int nID,  \n    LPCTSTR lpszString);\n```  \n  \n### Parameters  \n `nID`  \n The identifier of the control.  \n  \n `lpszString`  \n Pointer to the text of the control.  \n  \n## See Also  \n [CCmdTarget Class](../../mfc/reference/ccmdtarget-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [COleControlSite Class](../../mfc/reference/colecontrolsite-class.md)   \n [COccManager Class](../../mfc/reference/coccmanager-class.md)\n"}