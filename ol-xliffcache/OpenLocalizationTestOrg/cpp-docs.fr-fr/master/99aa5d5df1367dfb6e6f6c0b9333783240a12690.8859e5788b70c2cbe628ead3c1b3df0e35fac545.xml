{"nodes":[{"pos":[12,43],"content":"&lt;vector&gt; | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"vector<ph id=\"ph1\">&amp;gt;</ph> | Microsoft Docs","pos":[4,31],"source":"vector&gt; | Microsoft Docs"}]},{"content":"vector","pos":[638,644]},{"content":"Defines the container template class vector and several supporting templates.","pos":[649,726]},{"content":"The <ph id=\"ph1\">`vector`</ph> is a container that organizes elements of a given type in a linear sequence.","pos":[733,822],"source":"The `vector` is a container that organizes elements of a given type in a linear sequence."},{"content":"It enables fast random access to any element, and dynamic additions and removals to and from the sequence.","pos":[823,929]},{"content":"The <ph id=\"ph1\">`vector`</ph> is the preferred container for a sequence when random-access performance is at a premium.","pos":[930,1032],"source":" The `vector` is the preferred container for a sequence when random-access performance is at a premium."},{"content":"For more information about the class <ph id=\"ph1\">`vector`</ph>, see <bpt id=\"p1\">[</bpt>vector Class<ept id=\"p1\">](../standard-library/vector-class.md)</ept>.","pos":[1039,1142],"source":"For more information about the class `vector`, see [vector Class](../standard-library/vector-class.md)."},{"content":"For information about the specialization <ph id=\"ph1\">`vector&lt;bool&gt;`</ph>, see <bpt id=\"p1\">[</bpt>vector<ph id=\"ph2\">\\&lt;</ph>bool&gt; Class<ept id=\"p1\">](../standard-library/vector-bool-class.md)</ept>.","pos":[1143,1268],"source":" For information about the specialization `vector<bool>`, see [vector\\<bool> Class](../standard-library/vector-bool-class.md)."},{"content":"Syntax","pos":[1277,1283]},{"content":"Parameters","pos":[2554,2564]},{"content":"Type","pos":[2568,2572]},{"content":"The template parameter for the type of data stored in the vector.","pos":[2576,2641]},{"content":"Allocator","pos":[2648,2657]},{"content":"The template parameter for the stored allocator object responsible for memory allocation and deallocation.","pos":[2661,2767]},{"content":"The first (left) vector in a compare operation","pos":[2785,2831]},{"content":"The second (right) vector in a compare operation.","pos":[2850,2899]},{"content":"Operators","pos":[2909,2918]},{"content":"operator!","pos":[2940,2949]},{"content":"=","pos":[2950,2951]},{"content":"Tests if the vector object on the left side of the operator is not equal to the vector object on the right side.","pos":[3007,3119]},{"content":"operator&lt;","pos":[3125,3134],"source":"operator<"},{"content":"Tests if the vector object on the left side of the operator is less than the vector object on the right side.","pos":[3190,3299]},{"content":"operator","pos":[3305,3313]},{"content":"Tests if the vector object on the left side of the operator is less than or equal to the vector object on the right side.","pos":[3375,3496]},{"content":"operator==","pos":[3502,3512]},{"content":"Tests if the vector object on the left side of the operator is equal to the vector object on the right side.","pos":[3570,3678]},{"content":"operator&gt;","pos":[3684,3693],"source":"operator>"},{"content":"Tests if the vector object on the left side of the operator is greater than the vector object on the right side.","pos":[3749,3861]},{"content":"operator&gt;=","pos":[3867,3877],"source":"operator>="},{"content":"Tests if the vector object on the left side of the operator is greater than or equal to the vector object on the right side.","pos":[3936,4060]},{"content":"Classes","pos":[4071,4078]},{"content":"vector Class","pos":[4100,4112]},{"content":"A template class of sequence containers that arrange elements of a given type in a linear arrangement and allow fast random access to any element.","pos":[4151,4297]},{"content":"Specializations","pos":[4308,4323]},{"content":"vector<ph id=\"ph1\">\\&lt;</ph>bool&gt; Class","pos":[4345,4364],"source":"vector\\<bool> Class"},{"pos":[4408,4556],"content":"A full specialization of the template class vector for elements of type <ph id=\"ph1\">`bool`</ph> with an allocator for the underlying type used by the specialization.","source":"A full specialization of the template class vector for elements of type `bool` with an allocator for the underlying type used by the specialization."},{"content":"Requirements","pos":[4566,4578]},{"pos":[4582,4603],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>vector&gt;","source":"**Header:** \\<vector>"},{"pos":[4610,4628],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[4637,4645]},{"content":"Header Files Reference","pos":[4650,4672]},{"content":"Thread Safety in the C++ Standard Library","pos":[4737,4778]},{"content":"C++ Standard Library Reference","pos":[4851,4881]}],"content":"---\ntitle: \"&lt;vector&gt; | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"<vector>\"\n  - \"std.<vector>\"\n  - \"std::<vector>\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"vector header\"\nms.assetid: c1431ad8-c0b6-4dbb-89c4-5f651e432d7f\ncaps.latest.revision: 25\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# &lt;vector&gt;\nDefines the container template class vector and several supporting templates.  \n  \n The `vector` is a container that organizes elements of a given type in a linear sequence. It enables fast random access to any element, and dynamic additions and removals to and from the sequence. The `vector` is the preferred container for a sequence when random-access performance is at a premium.  \n  \n For more information about the class `vector`, see [vector Class](../standard-library/vector-class.md). For information about the specialization `vector<bool>`, see [vector\\<bool> Class](../standard-library/vector-bool-class.md).  \n  \n## Syntax  \n  \n```  \nnamespace std {  \ntemplate <class Type, class Allocator>  \nclass vector;  \ntemplate <class Allocator>  \nclass vector<bool>;  \n \ntemplate <class Allocator>  \nstruct hash<vector<bool, Allocator>>;  \n // TEMPLATE FUNCTIONS  \ntemplate <class Type, class Allocator>  \nbool operator== (\n    const vector<Type, Allocator>& left,  \n    const vector<Type, Allocator>& right);\n\ntemplate <class Type, class Allocator>  \nbool operator!= (\n    const vector<Type, Allocator>& left,  \n    const vector<Type, Allocator>& right);\n\ntemplate <class Type, class Allocator>  \nbool operator<(\n    const vector<Type, Allocator>& left,  \n    const vector<Type, Allocator>& right);\n\ntemplate <class Type, class Allocator>  \nbool operator> (\n    const vector<Type, Allocator>& left,  \n    const vector<Type, Allocator>& right);\n\ntemplate <class Type, class Allocator>  \nbool operator<= (\n    const vector<Type, Allocator>& left,  \n    const vector<Type, Allocator>& right);\n\ntemplate <class Type, class Allocator>  \nbool operator>= (\n    const vector<Type, Allocator>& left,  \n    const vector<Type, Allocator>& right);\n\ntemplate <class Type, class Allocator>  \nvoid swap (\n    vector<Type, Allocator>& left,  \n    vector<Type, Allocator>& right);\n\n}  // namespace std  \n```  \n  \n#### Parameters  \n Type  \n The template parameter for the type of data stored in the vector.  \n  \n Allocator  \n The template parameter for the stored allocator object responsible for memory allocation and deallocation.  \n  \n ` left`  \n The first (left) vector in a compare operation  \n  \n ` right`  \n The second (right) vector in a compare operation.  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[operator! =](../standard-library/vector-operators.md#operator_neq)|Tests if the vector object on the left side of the operator is not equal to the vector object on the right side.|  \n|[operator<](../standard-library/vector-operators.md#operator_lt_)|Tests if the vector object on the left side of the operator is less than the vector object on the right side.|  \n|[operator\\<=](../standard-library/vector-operators.md#operator_lt__eq)|Tests if the vector object on the left side of the operator is less than or equal to the vector object on the right side.|  \n|[operator==](../standard-library/vector-operators.md#operator_eq_eq)|Tests if the vector object on the left side of the operator is equal to the vector object on the right side.|  \n|[operator>](../standard-library/vector-operators.md#operator_gt_)|Tests if the vector object on the left side of the operator is greater than the vector object on the right side.|  \n|[operator>=](../standard-library/vector-operators.md#operator_gt__eq)|Tests if the vector object on the left side of the operator is greater than or equal to the vector object on the right side.|  \n  \n### Classes  \n  \n|||  \n|-|-|  \n|[vector Class](../standard-library/vector-class.md)|A template class of sequence containers that arrange elements of a given type in a linear arrangement and allow fast random access to any element.|  \n  \n### Specializations  \n  \n|||  \n|-|-|  \n|[vector\\<bool> Class](../standard-library/vector-bool-class.md)|A full specialization of the template class vector for elements of type `bool` with an allocator for the underlying type used by the specialization.|  \n  \n## Requirements  \n **Header:** \\<vector>  \n  \n **Namespace:** std  \n  \n## See Also  \n [Header Files Reference](../standard-library/cpp-standard-library-header-files.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n"}