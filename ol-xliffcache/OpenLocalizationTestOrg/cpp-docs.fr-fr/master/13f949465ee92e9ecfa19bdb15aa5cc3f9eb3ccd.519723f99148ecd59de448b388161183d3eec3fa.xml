{"nodes":[{"pos":[12,60],"content":"&lt;unordered_set&gt; operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"unordered_set<ph id=\"ph1\">&amp;gt;</ph> operators | Microsoft Docs","pos":[4,48],"source":"unordered_set&gt; operators | Microsoft Docs"}]},{"content":"unordered_set<ph id=\"ph1\">&amp;gt;</ph> operators","pos":[266,293],"source":"unordered_set&gt; operators"},{"content":"operator!=","pos":[316,326]},{"content":"operator==","pos":[344,354]},{"content":"operator!=","pos":[374,384]},{"content":"operator==","pos":[421,431]},{"pos":[508,518],"content":"operator!="},{"pos":[522,699],"content":"Tests whether the <bpt id=\"p1\">[</bpt>unordered_set<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept> object on the left side of the operator is not equal to the unordered_set object on the right side.","source":"Tests whether the [unordered_set](../standard-library/unordered-set-class.md) object on the left side of the operator is not equal to the unordered_set object on the right side."},{"content":"Parameters","pos":[852,862]},{"content":"An object of type <ph id=\"ph1\">`unordered_set`</ph>.","pos":[876,910],"source":" An object of type `unordered_set`."},{"content":"An object of type <ph id=\"ph1\">`unordered_set`</ph>.","pos":[928,962],"source":" An object of type `unordered_set`."},{"content":"Return Value","pos":[972,984]},{"pos":[995,1058],"content":"if the unordered_sets are not equal; <ph id=\"ph1\">`false`</ph> if they are equal.","source":" if the unordered_sets are not equal; `false` if they are equal."},{"content":"Remarks","pos":[1068,1075]},{"content":"The comparison between unordered_set objects is not affected by the arbitrary order in which they store their elements.","pos":[1079,1198]},{"content":"Two unordered_sets are equal if they have the same number of elements and the elements in one container are a permutation of the elements in the other container.","pos":[1199,1360]},{"content":"Otherwise, they are unequal.","pos":[1361,1389]},{"content":"Example","pos":[1399,1406]},{"content":"Output:","pos":[2097,2104]},{"pos":[2217,2227],"content":"operator=="},{"pos":[2231,2404],"content":"Tests whether the <bpt id=\"p1\">[</bpt>unordered_set<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept> object on the left side of the operator is equal to the unordered_set object on the right side.","source":"Tests whether the [unordered_set](../standard-library/unordered-set-class.md) object on the left side of the operator is equal to the unordered_set object on the right side."},{"content":"Parameters","pos":[2557,2567]},{"content":"An object of type <ph id=\"ph1\">`unordered_set`</ph>.","pos":[2581,2615],"source":" An object of type `unordered_set`."},{"content":"An object of type <ph id=\"ph1\">`unordered_set`</ph>.","pos":[2633,2667],"source":" An object of type `unordered_set`."},{"content":"Return Value","pos":[2677,2689]},{"pos":[2700,2763],"content":"if the unordered_sets are equal; <ph id=\"ph1\">`false`</ph> if they are not equal.","source":" if the unordered_sets are equal; `false` if they are not equal."},{"content":"Remarks","pos":[2773,2780]},{"content":"The comparison between unordered_set objects is not affected by the arbitrary order in which they store their elements.","pos":[2784,2903]},{"content":"Two unordered_sets are equal if they have the same number of elements and the elements in one container are a permutation of the elements in the other container.","pos":[2904,3065]},{"content":"Otherwise, they are unequal.","pos":[3066,3094]},{"content":"Example","pos":[3104,3111]},{"content":"Output:","pos":[3802,3809]},{"pos":[3940,3950],"content":"operator!="},{"pos":[3954,4146],"content":"Tests whether the <bpt id=\"p1\">[</bpt>unordered_multiset<ept id=\"p1\">](../standard-library/unordered-multiset-class.md)</ept> object on the left side of the operator is not equal to the unordered_multiset object on the right side.","source":"Tests whether the [unordered_multiset](../standard-library/unordered-multiset-class.md) object on the left side of the operator is not equal to the unordered_multiset object on the right side."},{"content":"Parameters","pos":[4309,4319]},{"content":"An object of type <ph id=\"ph1\">`unordered_multiset`</ph>.","pos":[4333,4372],"source":" An object of type `unordered_multiset`."},{"content":"An object of type <ph id=\"ph1\">`unordered_multiset`</ph>.","pos":[4390,4429],"source":" An object of type `unordered_multiset`."},{"content":"Return Value","pos":[4439,4451]},{"pos":[4462,4530],"content":"if the unordered_multisets are not equal; <ph id=\"ph1\">`false`</ph> if they are equal.","source":" if the unordered_multisets are not equal; `false` if they are equal."},{"content":"Remarks","pos":[4540,4547]},{"content":"The comparison between unordered_multiset objects is not affected by the arbitrary order in which they store their elements.","pos":[4551,4675]},{"content":"Two unordered_multisets are equal if they have the same number of elements and the elements in one container are a permutation of the elements in the other container.","pos":[4676,4842]},{"content":"Otherwise, they are unequal.","pos":[4843,4871]},{"content":"Example","pos":[4881,4888]},{"content":"Output:","pos":[5655,5662]},{"pos":[5794,5804],"content":"operator=="},{"pos":[5808,5996],"content":"Tests whether the <bpt id=\"p1\">[</bpt>unordered_multiset<ept id=\"p1\">](../standard-library/unordered-multiset-class.md)</ept> object on the left side of the operator is equal to the unordered_multiset object on the right side.","source":"Tests whether the [unordered_multiset](../standard-library/unordered-multiset-class.md) object on the left side of the operator is equal to the unordered_multiset object on the right side."},{"content":"Parameters","pos":[6159,6169]},{"content":"An object of type <ph id=\"ph1\">`unordered_multiset`</ph>.","pos":[6183,6222],"source":" An object of type `unordered_multiset`."},{"content":"An object of type <ph id=\"ph1\">`unordered_multiset`</ph>.","pos":[6240,6279],"source":" An object of type `unordered_multiset`."},{"content":"Return Value","pos":[6289,6301]},{"pos":[6312,6380],"content":"if the unordered_multisets are equal; <ph id=\"ph1\">`false`</ph> if they are not equal.","source":" if the unordered_multisets are equal; `false` if they are not equal."},{"content":"Remarks","pos":[6390,6397]},{"content":"The comparison between unordered_multiset objects is not affected by the arbitrary order in which they store their elements.","pos":[6401,6525]},{"content":"Two unordered_multisets are equal if they have the same number of elements and the elements in one container are a permutation of the elements in the other container.","pos":[6526,6692]},{"content":"Otherwise, they are unequal.","pos":[6693,6721]},{"content":"Example","pos":[6731,6738]},{"content":"Output:","pos":[7505,7512]},{"content":"See Also","pos":[7594,7602]},{"content":"&lt;unordered_set&gt;","pos":[7607,7622],"source":"<unordered_set>"}],"content":"---\ntitle: \"&lt;unordered_set&gt; operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 8653eea6-12f2-4dd7-aa2f-db38a71599a0\ncaps.latest.revision: 7\nmanager: \"ghogen\"\n---\n# &lt;unordered_set&gt; operators\n|||||  \n|-|-|-|-|  \n|[operator!=](#operator_neq)|[operator==](#operator_eq_eq)|[operator!=](#operator_neq_unordered_multiset)|[operator==](#operator_eq_eq_unordered_multiset)|  \n  \n##  <a name=\"operator_neq\"></a>  operator!=  \n Tests whether the [unordered_set](../standard-library/unordered-set-class.md) object on the left side of the operator is not equal to the unordered_set object on the right side.  \n  \n```\nbool operator!=(const unordered_set <Key, Hash, Pred, Allocator>& left, const unordered_set <Key, Hash, Pred, Allocator>& right);\n```  \n  \n### Parameters  \n `left`  \n An object of type `unordered_set`.  \n  \n `right`  \n An object of type `unordered_set`.  \n  \n### Return Value  \n `true` if the unordered_sets are not equal; `false` if they are equal.  \n  \n### Remarks  \n The comparison between unordered_set objects is not affected by the arbitrary order in which they store their elements. Two unordered_sets are equal if they have the same number of elements and the elements in one container are a permutation of the elements in the other container. Otherwise, they are unequal.  \n  \n### Example  \n  \n```cpp  \n  \n// unordered_set_ne.cpp   \n// compile by using: cl.exe /EHsc /nologo /W4 /MTd   \n#include <unordered_set>   \n#include <iostream>   \n#include <ios>  \n  \nint main()   \n{   \n    using namespace std;  \n  \n    unordered_set<char> c1, c2, c3;  \n  \n    c1.insert('a');   \n    c1.insert('b');   \n    c1.insert('c');   \n  \n    c2.insert('c');   \n    c2.insert('a');   \n    c2.insert('d');   \n  \n    c3.insert('c');   \n    c3.insert('a');   \n    c3.insert('b');   \n  \n   cout << boolalpha;  \n   cout << \"c1 != c2: \" << (c1 != c2) << endl;   \n   cout << \"c1 != c3: \" << (c1 != c3) << endl;   \n   cout << \"c2 != c3: \" << (c2 != c3) << endl;   \n  \n    return (0);   \n}  \n  \n```  \n  \n **Output:**  \n  \n `c1 != c2: true`  \n  \n `c1 != c3: false`  \n  \n `c2 != c3: true`  \n  \n##  <a name=\"operator_eq_eq\"></a>  operator==  \n Tests whether the [unordered_set](../standard-library/unordered-set-class.md) object on the left side of the operator is equal to the unordered_set object on the right side.  \n  \n```\nbool operator==(const unordered_set <Key, Hash, Pred, Allocator>& left, const unordered_set <Key, Hash, Pred, Allocator>& right);\n```  \n  \n### Parameters  \n `left`  \n An object of type `unordered_set`.  \n  \n `right`  \n An object of type `unordered_set`.  \n  \n### Return Value  \n `true` if the unordered_sets are equal; `false` if they are not equal.  \n  \n### Remarks  \n The comparison between unordered_set objects is not affected by the arbitrary order in which they store their elements. Two unordered_sets are equal if they have the same number of elements and the elements in one container are a permutation of the elements in the other container. Otherwise, they are unequal.  \n  \n### Example  \n  \n```cpp  \n  \n// unordered_set_eq.cpp   \n// compile by using: cl.exe /EHsc /nologo /W4 /MTd   \n#include <unordered_set>   \n#include <iostream>   \n#include <ios>  \n  \nint main()   \n{   \n    using namespace std;  \n  \n    unordered_set<char> c1, c2, c3;  \n  \n    c1.insert('a');   \n    c1.insert('b');   \n    c1.insert('c');   \n  \n    c2.insert('c');   \n    c2.insert('a');   \n    c2.insert('d');   \n  \n    c3.insert('c');   \n    c3.insert('a');   \n    c3.insert('b');   \n  \n   cout << boolalpha;  \n   cout << \"c1 == c2: \" << (c1 == c2) << endl;   \n   cout << \"c1 == c3: \" << (c1 == c3) << endl;   \n   cout << \"c2 == c3: \" << (c2 == c3) << endl;   \n  \n    return (0);   \n}  \n  \n```  \n  \n **Output:**  \n  \n `c1 == c2: false`  \n  \n `c1 == c3: true`  \n  \n `c2 == c3: false`  \n  \n##  <a name=\"operator_neq_unordered_multiset\"></a>  operator!=  \n Tests whether the [unordered_multiset](../standard-library/unordered-multiset-class.md) object on the left side of the operator is not equal to the unordered_multiset object on the right side.  \n  \n```\nbool operator!=(const unordered_multiset <Key, Hash, Pred, Allocator>& left, const unordered_multiset <Key, Hash, Pred, Allocator>& right);\n```  \n  \n### Parameters  \n `left`  \n An object of type `unordered_multiset`.  \n  \n `right`  \n An object of type `unordered_multiset`.  \n  \n### Return Value  \n `true` if the unordered_multisets are not equal; `false` if they are equal.  \n  \n### Remarks  \n The comparison between unordered_multiset objects is not affected by the arbitrary order in which they store their elements. Two unordered_multisets are equal if they have the same number of elements and the elements in one container are a permutation of the elements in the other container. Otherwise, they are unequal.  \n  \n### Example  \n  \n```cpp  \n// unordered_multiset_ne.cpp   \n// compile by using: cl.exe /EHsc /nologo /W4 /MTd   \n#include <unordered_set>   \n#include <iostream>   \n#include <ios>  \n  \nint main()   \n{   \n    using namespace std;  \n  \n    unordered_multiset<char> c1, c2, c3;  \n  \n    c1.insert('a');   \n    c1.insert('b');   \n    c1.insert('c');   \n    c1.insert('c');   \n  \n    c2.insert('c');   \n    c2.insert('c');   \n    c2.insert('a');   \n    c2.insert('d');   \n  \n    c3.insert('c');   \n    c3.insert('c');   \n    c3.insert('a');   \n    c3.insert('b');   \n  \n   cout << boolalpha;  \n   cout << \"c1 != c2: \" << (c1 != c2) << endl;   \n   cout << \"c1 != c3: \" << (c1 != c3) << endl;   \n   cout << \"c2 != c3: \" << (c2 != c3) << endl;   \n  \n    return (0);   \n}  \n  \n```  \n  \n **Output:**  \n  \n `c1 != c2: true`  \n  \n `c1 != c3: false`  \n  \n `c2 != c3: true`  \n  \n##  <a name=\"operator_eq_eq_unordered_multiset\"></a>  operator==  \n Tests whether the [unordered_multiset](../standard-library/unordered-multiset-class.md) object on the left side of the operator is equal to the unordered_multiset object on the right side.  \n  \n```\nbool operator==(const unordered_multiset <Key, Hash, Pred, Allocator>& left, const unordered_multiset <Key, Hash, Pred, Allocator>& right);\n```  \n  \n### Parameters  \n `left`  \n An object of type `unordered_multiset`.  \n  \n `right`  \n An object of type `unordered_multiset`.  \n  \n### Return Value  \n `true` if the unordered_multisets are equal; `false` if they are not equal.  \n  \n### Remarks  \n The comparison between unordered_multiset objects is not affected by the arbitrary order in which they store their elements. Two unordered_multisets are equal if they have the same number of elements and the elements in one container are a permutation of the elements in the other container. Otherwise, they are unequal.  \n  \n### Example  \n  \n```cpp  \n// unordered_multiset_eq.cpp   \n// compile by using: cl.exe /EHsc /nologo /W4 /MTd   \n#include <unordered_set>   \n#include <iostream>   \n#include <ios>  \n  \nint main()   \n{   \n    using namespace std;  \n  \n    unordered_multiset<char> c1, c2, c3;  \n  \n    c1.insert('a');   \n    c1.insert('b');   \n    c1.insert('c');   \n    c1.insert('c');   \n  \n    c2.insert('c');   \n    c2.insert('c');   \n    c2.insert('a');   \n    c2.insert('d');   \n  \n    c3.insert('c');   \n    c3.insert('c');   \n    c3.insert('a');   \n    c3.insert('b');   \n  \n   cout << boolalpha;  \n   cout << \"c1 == c2: \" << (c1 == c2) << endl;   \n   cout << \"c1 == c3: \" << (c1 == c3) << endl;   \n   cout << \"c2 == c3: \" << (c2 == c3) << endl;   \n  \n    return (0);   \n}  \n  \n```  \n  \n **Output:**  \n  \n `c1 == c2: false`  \n  \n `c1 == c3: true`  \n  \n `c2 == c3: false`  \n  \n## See Also  \n [<unordered_set>](../standard-library/unordered-set.md)\n\n\n\n"}