{"nodes":[{"pos":[12,61],"content":"concurrency namespace constants1 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"concurrency namespace constants1 | Microsoft Docs","pos":[0,49]}]},{"pos":[303,334],"content":"concurrency namespace constants","linkify":"concurrency namespace constants","nodes":[{"content":"concurrency namespace constants","pos":[0,31]}]},{"pos":[353,386],"content":"<bpt id=\"p1\">[</bpt>AgentEventGuid<ept id=\"p1\">](#agenteventguid)</ept>","source":"[AgentEventGuid](#agenteventguid)"},{"pos":[387,430],"content":"<bpt id=\"p1\">[</bpt>CONCRT_RM_VERSION_1<ept id=\"p1\">](#concrt_rm_version_1)</ept>","source":"[CONCRT_RM_VERSION_1](#concrt_rm_version_1)"},{"pos":[431,492],"content":"<bpt id=\"p1\">[</bpt>COOPERATIVE_TIMEOUT_INFINITE<ept id=\"p1\">](#cooperative_timeout_infinite)</ept>","source":"[COOPERATIVE_TIMEOUT_INFINITE](#cooperative_timeout_infinite)"},{"pos":[497,550],"content":"<bpt id=\"p1\">[</bpt>COOPERATIVE_WAIT_TIMEOUT<ept id=\"p1\">](#cooperative_wait_timeout)</ept>","source":"[COOPERATIVE_WAIT_TIMEOUT](#cooperative_wait_timeout)"},{"pos":[551,584],"content":"<bpt id=\"p1\">[</bpt>ChoreEventGuid<ept id=\"p1\">](#choreeventguid)</ept>","source":"[ChoreEventGuid](#choreeventguid)"},{"pos":[585,620],"content":"<bpt id=\"p1\">[</bpt>ConcRTEventGuid<ept id=\"p1\">](#concrteventguid)</ept>","source":"[ConcRTEventGuid](#concrteventguid)"},{"pos":[625,668],"content":"<bpt id=\"p1\">[</bpt>ConcRT_ProviderGuid<ept id=\"p1\">](#concrt_providerguid)</ept>","source":"[ConcRT_ProviderGuid](#concrt_providerguid)"},{"pos":[669,706],"content":"<bpt id=\"p1\">[</bpt>ContextEventGuid<ept id=\"p1\">](#contexteventguid)</ept>","source":"[ContextEventGuid](#contexteventguid)"},{"pos":[707,758],"content":"<bpt id=\"p1\">[</bpt>INHERIT_THREAD_PRIORITY<ept id=\"p1\">](#inherit_thread_priority)</ept>","source":"[INHERIT_THREAD_PRIORITY](#inherit_thread_priority)"},{"pos":[763,794],"content":"<bpt id=\"p1\">[</bpt>LockEventGuid<ept id=\"p1\">](#lockeventguid)</ept>","source":"[LockEventGuid](#lockeventguid)"},{"pos":[795,842],"content":"<bpt id=\"p1\">[</bpt>MaxExecutionResources<ept id=\"p1\">](#maxexecutionresources)</ept>","source":"[MaxExecutionResources](#maxexecutionresources)"},{"pos":[843,894],"content":"<bpt id=\"p1\">[</bpt>PPLParallelForEventGuid<ept id=\"p1\">](#pplparallelforeventguid)</ept>","source":"[PPLParallelForEventGuid](#pplparallelforeventguid)"},{"pos":[899,958],"content":"<bpt id=\"p1\">[</bpt>PPLParallelForeachEventGuid<ept id=\"p1\">](#pplparallelforeacheventguid)</ept>","source":"[PPLParallelForeachEventGuid](#pplparallelforeacheventguid)"},{"pos":[959,1016],"content":"<bpt id=\"p1\">[</bpt>PPLParallelInvokeEventGuid<ept id=\"p1\">](#pplparallelinvokeeventguid)</ept>","source":"[PPLParallelInvokeEventGuid](#pplparallelinvokeeventguid)"},{"pos":[1017,1070],"content":"<bpt id=\"p1\">[</bpt>ResourceManagerEventGuid<ept id=\"p1\">](#resourcemanagereventguid)</ept>","source":"[ResourceManagerEventGuid](#resourcemanagereventguid)"},{"pos":[1075,1124],"content":"<bpt id=\"p1\">[</bpt>ScheduleGroupEventGuid<ept id=\"p1\">](#schedulegroupeventguid)</ept>","source":"[ScheduleGroupEventGuid](#schedulegroupeventguid)"},{"pos":[1125,1166],"content":"<bpt id=\"p1\">[</bpt>SchedulerEventGuid<ept id=\"p1\">](#schedulereventguid)</ept>","source":"[SchedulerEventGuid](#schedulereventguid)"},{"pos":[1167,1222],"content":"<bpt id=\"p1\">[</bpt>VirtualProcessorEventGuid<ept id=\"p1\">](#virtualprocessoreventguid)</ept>","source":"[VirtualProcessorEventGuid](#virtualprocessoreventguid)"},{"pos":[1233,1278],"content":"<bpt id=\"p1\">&lt;a name=\"agenteventguid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AgentEventGuid","linkify":"<a name=\"agenteventguid\"></a>  AgentEventGuid","source":"<a name=\"agenteventguid\"></a>  AgentEventGuid"},{"content":"A category GUID ({B9B5B78C-0713-4898-A21A-C67949DCED07}) describing ETW events fired by the Agents library in the Concurrency Runtime.","pos":[1282,1416]},{"pos":[1570,1615],"content":"<bpt id=\"p1\">&lt;a name=\"choreeventguid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ChoreEventGuid","linkify":"<a name=\"choreeventguid\"></a>  ChoreEventGuid","source":"<a name=\"choreeventguid\"></a>  ChoreEventGuid"},{"content":"A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to chores or tasks.","pos":[1619,1735]},{"pos":[1897,1904],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This category of events is not currently fired by the Concurrency Runtime.","pos":[1908,1982]},{"pos":[1992,2047],"content":"<bpt id=\"p1\">&lt;a name=\"concrt_providerguid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ConcRT_ProviderGuid","linkify":"<a name=\"concrt_providerguid\"></a>  ConcRT_ProviderGuid","source":"<a name=\"concrt_providerguid\"></a>  ConcRT_ProviderGuid"},{"content":"The ETW provider GUID for the Concurrency Runtime.","pos":[2051,2101]},{"pos":[2268,2323],"content":"<bpt id=\"p1\">&lt;a name=\"concrt_rm_version_1\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CONCRT_RM_VERSION_1","linkify":"<a name=\"concrt_rm_version_1\"></a>  CONCRT_RM_VERSION_1","source":"<a name=\"concrt_rm_version_1\"></a>  CONCRT_RM_VERSION_1"},{"content":"Indicates support of the Resource Manager interface defined in Visual Studio 2010.","pos":[2327,2409]},{"pos":[2485,2532],"content":"<bpt id=\"p1\">&lt;a name=\"concrteventguid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ConcRTEventGuid","linkify":"<a name=\"concrteventguid\"></a>  ConcRTEventGuid","source":"<a name=\"concrteventguid\"></a>  ConcRTEventGuid"},{"content":"A category GUID describing ETW events fired by the Concurrency Runtime that are not more specifically described by another category.","pos":[2536,2668]},{"pos":[2831,2838],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This category of events is not currently fired by the Concurrency Runtime.","pos":[2842,2916]},{"pos":[2926,2999],"content":"<bpt id=\"p1\">&lt;a name=\"cooperative_timeout_infinite\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COOPERATIVE_TIMEOUT_INFINITE","linkify":"<a name=\"cooperative_timeout_infinite\"></a>  COOPERATIVE_TIMEOUT_INFINITE","source":"<a name=\"cooperative_timeout_infinite\"></a>  COOPERATIVE_TIMEOUT_INFINITE"},{"content":"Value indicating that a wait should never time out.","pos":[3003,3054]},{"pos":[3145,3210],"content":"<bpt id=\"p1\">&lt;a name=\"cooperative_wait_timeout\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COOPERATIVE_WAIT_TIMEOUT","linkify":"<a name=\"cooperative_wait_timeout\"></a>  COOPERATIVE_WAIT_TIMEOUT","source":"<a name=\"cooperative_wait_timeout\"></a>  COOPERATIVE_WAIT_TIMEOUT"},{"content":"Value indicating that a wait timed out.","pos":[3214,3253]},{"pos":[3326,3375],"content":"<bpt id=\"p1\">&lt;a name=\"contexteventguid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ContextEventGuid","linkify":"<a name=\"contexteventguid\"></a>  ContextEventGuid","source":"<a name=\"contexteventguid\"></a>  ContextEventGuid"},{"content":"A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to contexts.","pos":[3379,3488]},{"pos":[3652,3715],"content":"<bpt id=\"p1\">&lt;a name=\"inherit_thread_priority\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  INHERIT_THREAD_PRIORITY","linkify":"<a name=\"inherit_thread_priority\"></a>  INHERIT_THREAD_PRIORITY","source":"<a name=\"inherit_thread_priority\"></a>  INHERIT_THREAD_PRIORITY"},{"pos":[3719,3908],"content":"Special value for the policy key <ph id=\"ph1\">`ContextPriority`</ph> indicating that the thread priority of all contexts in the scheduler should be the same as that of the thread which created the scheduler.","source":"Special value for the policy key `ContextPriority` indicating that the thread priority of all contexts in the scheduler should be the same as that of the thread which created the scheduler."},{"pos":[3988,4031],"content":"<bpt id=\"p1\">&lt;a name=\"lockeventguid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  LockEventGuid","linkify":"<a name=\"lockeventguid\"></a>  LockEventGuid","source":"<a name=\"lockeventguid\"></a>  LockEventGuid"},{"content":"A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to locks.","pos":[4035,4141]},{"pos":[4302,4309],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This category of events is not currently fired by the Concurrency Runtime.","pos":[4313,4387]},{"pos":[4397,4456],"content":"<bpt id=\"p1\">&lt;a name=\"maxexecutionresources\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  MaxExecutionResources","linkify":"<a name=\"maxexecutionresources\"></a>  MaxExecutionResources","source":"<a name=\"maxexecutionresources\"></a>  MaxExecutionResources"},{"content":"Special value for the policy keys <ph id=\"ph1\">`MinConcurrency`</ph> and <ph id=\"ph2\">`MaxConcurrency`</ph>.","pos":[4460,4532],"source":"Special value for the policy keys `MinConcurrency` and `MaxConcurrency`."},{"content":"Defaults to the number of hardware threads on the machine in the absence of other constraints.","pos":[4533,4627]},{"pos":[4705,4768],"content":"<bpt id=\"p1\">&lt;a name=\"pplparallelforeventguid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  PPLParallelForEventGuid","linkify":"<a name=\"pplparallelforeventguid\"></a>  PPLParallelForEventGuid","source":"<a name=\"pplparallelforeventguid\"></a>  PPLParallelForEventGuid"},{"pos":[4772,4909],"content":"A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to usage of the <ph id=\"ph1\">`parallel_for`</ph> function.","source":"A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to usage of the `parallel_for` function."},{"pos":[5080,5151],"content":"<bpt id=\"p1\">&lt;a name=\"pplparallelforeacheventguid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  PPLParallelForeachEventGuid","linkify":"<a name=\"pplparallelforeacheventguid\"></a>  PPLParallelForeachEventGuid","source":"<a name=\"pplparallelforeacheventguid\"></a>  PPLParallelForeachEventGuid"},{"pos":[5155,5297],"content":"A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to usage of the <ph id=\"ph1\">`parallel_for_each`</ph> function.","source":"A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to usage of the `parallel_for_each` function."},{"pos":[5471,5540],"content":"<bpt id=\"p1\">&lt;a name=\"pplparallelinvokeeventguid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  PPLParallelInvokeEventGuid","linkify":"<a name=\"pplparallelinvokeeventguid\"></a>  PPLParallelInvokeEventGuid","source":"<a name=\"pplparallelinvokeeventguid\"></a>  PPLParallelInvokeEventGuid"},{"pos":[5544,5684],"content":"A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to usage of the <ph id=\"ph1\">`parallel_invoke`</ph> function.","source":"A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to usage of the `parallel_invoke` function."},{"pos":[5858,5923],"content":"<bpt id=\"p1\">&lt;a name=\"resourcemanagereventguid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ResourceManagerEventGuid","linkify":"<a name=\"resourcemanagereventguid\"></a>  ResourceManagerEventGuid","source":"<a name=\"resourcemanagereventguid\"></a>  ResourceManagerEventGuid"},{"content":"A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to the resource manager.","pos":[5927,6048]},{"pos":[6220,6227],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This category of events is not currently fired by the Concurrency Runtime.","pos":[6231,6305]},{"pos":[6315,6376],"content":"<bpt id=\"p1\">&lt;a name=\"schedulegroupeventguid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ScheduleGroupEventGuid","linkify":"<a name=\"schedulegroupeventguid\"></a>  ScheduleGroupEventGuid","source":"<a name=\"schedulegroupeventguid\"></a>  ScheduleGroupEventGuid"},{"content":"A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to schedule groups.","pos":[6380,6496]},{"pos":[6666,6673],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This category of events is not currently fired by the Concurrency Runtime.","pos":[6677,6751]},{"pos":[6761,6814],"content":"<bpt id=\"p1\">&lt;a name=\"schedulereventguid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  SchedulerEventGuid","linkify":"<a name=\"schedulereventguid\"></a>  SchedulerEventGuid","source":"<a name=\"schedulereventguid\"></a>  SchedulerEventGuid"},{"content":"A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to scheduler activity.","pos":[6818,6937]},{"pos":[7103,7170],"content":"<bpt id=\"p1\">&lt;a name=\"virtualprocessoreventguid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  VirtualProcessorEventGuid","linkify":"<a name=\"virtualprocessoreventguid\"></a>  VirtualProcessorEventGuid","source":"<a name=\"virtualprocessoreventguid\"></a>  VirtualProcessorEventGuid"},{"content":"A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to virtual processors.","pos":[7174,7293]},{"pos":[7465,7473],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[7477,7526],"content":"<bpt id=\"p1\">[</bpt>concurrency Namespace<ept id=\"p1\">](concurrency-namespace.md)</ept>","source":"[concurrency Namespace](concurrency-namespace.md)"}],"content":"---\ntitle: \"concurrency namespace constants1 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 6f81fc4c-b10c-479e-8717-9c292360d5a0\ncaps.latest.revision: 5\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\n---\n# concurrency namespace constants\n||||  \n|-|-|-|  \n|[AgentEventGuid](#agenteventguid)|[CONCRT_RM_VERSION_1](#concrt_rm_version_1)|[COOPERATIVE_TIMEOUT_INFINITE](#cooperative_timeout_infinite)|  \n|[COOPERATIVE_WAIT_TIMEOUT](#cooperative_wait_timeout)|[ChoreEventGuid](#choreeventguid)|[ConcRTEventGuid](#concrteventguid)|  \n|[ConcRT_ProviderGuid](#concrt_providerguid)|[ContextEventGuid](#contexteventguid)|[INHERIT_THREAD_PRIORITY](#inherit_thread_priority)|  \n|[LockEventGuid](#lockeventguid)|[MaxExecutionResources](#maxexecutionresources)|[PPLParallelForEventGuid](#pplparallelforeventguid)|  \n|[PPLParallelForeachEventGuid](#pplparallelforeacheventguid)|[PPLParallelInvokeEventGuid](#pplparallelinvokeeventguid)|[ResourceManagerEventGuid](#resourcemanagereventguid)|  \n|[ScheduleGroupEventGuid](#schedulegroupeventguid)|[SchedulerEventGuid](#schedulereventguid)|[VirtualProcessorEventGuid](#virtualprocessoreventguid)|  \n  \n##  <a name=\"agenteventguid\"></a>  AgentEventGuid  \n A category GUID ({B9B5B78C-0713-4898-A21A-C67949DCED07}) describing ETW events fired by the Agents library in the Concurrency Runtime.  \n  \n```\nconst __declspec(selectany) GUID AgentEventGuid = {0xb9b5b78c, 0x713, 0x4898, { 0xa2, 0x1a, 0xc6, 0x79, 0x49, 0xdc, 0xed, 0x7 } };\n```  \n  \n##  <a name=\"choreeventguid\"></a>  ChoreEventGuid  \n A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to chores or tasks.  \n  \n```\nconst __declspec(selectany) GUID ChoreEventGuid = \n    { 0x7E854EC7, 0xCDC4, 0x405a, { 0xB5, 0xB2, 0xAA, 0xF7, 0xC9, 0xE7, 0xD4, 0x0C } };\n```  \n  \n### Remarks  \n This category of events is not currently fired by the Concurrency Runtime.  \n  \n##  <a name=\"concrt_providerguid\"></a>  ConcRT_ProviderGuid  \n The ETW provider GUID for the Concurrency Runtime.  \n  \n```\nconst __declspec(selectany) GUID ConcRT_ProviderGuid = \n    { 0xF7B697A3, 0x4DB5, 0x4d3b, { 0xBE, 0x71, 0xC4, 0xD2, 0x84, 0xE6, 0x59, 0x2F } };\n```  \n  \n##  <a name=\"concrt_rm_version_1\"></a>  CONCRT_RM_VERSION_1  \n Indicates support of the Resource Manager interface defined in Visual Studio 2010.  \n  \n```\nconst unsigned int CONCRT_RM_VERSION_1 = 0x00010000;\n```  \n  \n##  <a name=\"concrteventguid\"></a>  ConcRTEventGuid  \n A category GUID describing ETW events fired by the Concurrency Runtime that are not more specifically described by another category.  \n  \n```\nconst __declspec(selectany) GUID ConcRTEventGuid = \n    { 0x72B14A7D, 0x704C, 0x423e, { 0x92, 0xF8, 0x7E, 0x6D, 0x64, 0xBC, 0xB9, 0x2A } };\n```  \n  \n### Remarks  \n This category of events is not currently fired by the Concurrency Runtime.  \n  \n##  <a name=\"cooperative_timeout_infinite\"></a>  COOPERATIVE_TIMEOUT_INFINITE  \n Value indicating that a wait should never time out.  \n  \n```\nconst unsigned int COOPERATIVE_TIMEOUT_INFINITE = (unsigned int)-1;\n```  \n  \n##  <a name=\"cooperative_wait_timeout\"></a>  COOPERATIVE_WAIT_TIMEOUT  \n Value indicating that a wait timed out.  \n  \n```\nconst size_t COOPERATIVE_WAIT_TIMEOUT = SIZE_MAX;\n```  \n  \n##  <a name=\"contexteventguid\"></a>  ContextEventGuid  \n A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to contexts.  \n  \n```\nconst __declspec(selectany) GUID ContextEventGuid = \n    { 0x5727A00F, 0x50BE, 0x4519, { 0x82, 0x56, 0xF7, 0x69, 0x98, 0x71, 0xFE, 0xCB } };\n```  \n  \n##  <a name=\"inherit_thread_priority\"></a>  INHERIT_THREAD_PRIORITY  \n Special value for the policy key `ContextPriority` indicating that the thread priority of all contexts in the scheduler should be the same as that of the thread which created the scheduler.  \n  \n```\nconst unsigned int INHERIT_THREAD_PRIORITY = 0x0000F000;\n```  \n  \n##  <a name=\"lockeventguid\"></a>  LockEventGuid  \n A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to locks.  \n  \n```\nconst __declspec(selectany) GUID LockEventGuid = \n    { 0x79A60DC6, 0x5FC8, 0x4952, { 0xA4, 0x1C, 0x11, 0x63, 0xAE, 0xEC, 0x5E, 0xB8 } };\n```  \n  \n### Remarks  \n This category of events is not currently fired by the Concurrency Runtime.  \n  \n##  <a name=\"maxexecutionresources\"></a>  MaxExecutionResources  \n Special value for the policy keys `MinConcurrency` and `MaxConcurrency`. Defaults to the number of hardware threads on the machine in the absence of other constraints.  \n  \n```\nconst unsigned int MaxExecutionResources = 0xFFFFFFFF;\n```  \n  \n##  <a name=\"pplparallelforeventguid\"></a>  PPLParallelForEventGuid  \n A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to usage of the `parallel_for` function.  \n  \n```\nconst __declspec(selectany) GUID PPLParallelForEventGuid = \n    { 0x31c8da6b, 0x6165, 0x4042, { 0x8b, 0x92, 0x94, 0x9e, 0x31, 0x5f, 0x4d, 0x84 } };\n```  \n  \n##  <a name=\"pplparallelforeacheventguid\"></a>  PPLParallelForeachEventGuid  \n A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to usage of the `parallel_for_each` function.  \n  \n```\nconst __declspec(selectany) GUID PPLParallelForeachEventGuid = \n    { 0x5cb7d785, 0x9d66, 0x465d, { 0xba, 0xe1, 0x46, 0x11, 0x6, 0x1b, 0x54, 0x34 } };\n```  \n  \n##  <a name=\"pplparallelinvokeeventguid\"></a>  PPLParallelInvokeEventGuid  \n A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to usage of the `parallel_invoke` function.  \n  \n```\nconst __declspec(selectany) GUID PPLParallelInvokeEventGuid = \n    { 0xd1b5b133, 0xec3d, 0x49f4, { 0x98, 0xa3, 0x46, 0x4d, 0x1a, 0x9e, 0x46, 0x82 } };\n```  \n  \n##  <a name=\"resourcemanagereventguid\"></a>  ResourceManagerEventGuid  \n A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to the resource manager.  \n  \n```\nconst __declspec(selectany) GUID ResourceManagerEventGuid = \n    { 0x2718D25B, 0x5BF5, 0x4479, { 0x8E, 0x88, 0xBA, 0xBC, 0x64, 0xBD, 0xBF, 0xCA } };\n```  \n  \n### Remarks  \n This category of events is not currently fired by the Concurrency Runtime.  \n  \n##  <a name=\"schedulegroupeventguid\"></a>  ScheduleGroupEventGuid  \n A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to schedule groups.  \n  \n```\nconst __declspec(selectany) GUID ScheduleGroupEventGuid = \n    { 0xE8A3BF1F, 0xA86B, 0x4390, { 0x9C, 0x60, 0x53, 0x90, 0xB9, 0x69, 0xD2, 0x2C } };\n```  \n  \n### Remarks  \n This category of events is not currently fired by the Concurrency Runtime.  \n  \n##  <a name=\"schedulereventguid\"></a>  SchedulerEventGuid  \n A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to scheduler activity.  \n  \n```\nconst __declspec(selectany) GUID SchedulerEventGuid = \n    { 0xE2091F8A, 0x1E0A, 0x4731, { 0x84, 0xA2, 0x0D, 0xD5, 0x7C, 0x8A, 0x52, 0x61 } };\n```  \n  \n##  <a name=\"virtualprocessoreventguid\"></a>  VirtualProcessorEventGuid  \n A category GUID describing ETW events fired by the Concurrency Runtime that are directly related to virtual processors.  \n  \n```\nconst __declspec(selectany) GUID VirtualProcessorEventGuid = \n    { 0x2f27805f, 0x1676, 0x4ecc, { 0x96, 0xfa, 0x7e, 0xb0, 0x9d, 0x44, 0x30, 0x2f } };\n```  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)\n"}