{"nodes":[{"pos":[12,47],"content":"identity Structure | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"identity Structure | Microsoft Docs","pos":[0,35]}]},{"pos":[692,710],"content":"identity Structure","linkify":"identity Structure","nodes":[{"content":"identity Structure","pos":[0,18]}]},{"content":"A struct that provides a type definition as the template parameter.","pos":[711,778]},{"pos":[787,793],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[905,915],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[922,931]},{"content":"Description","pos":[932,943]},{"content":"The value to identify.","pos":[993,1015]},{"pos":[1025,1032],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The class contains the public type definition <ph id=\"ph1\">`type`</ph>, which is the same as the template parameter Type.","pos":[1036,1139],"source":"The class contains the public type definition `type`, which is the same as the template parameter Type."},{"content":"It is used in conjunction with template function <bpt id=\"p1\">[</bpt>forward<ept id=\"p1\">](../standard-library/utility-functions.md#forward)</ept> to ensure that a function parameter has the desired type.","pos":[1140,1306],"source":" It is used in conjunction with template function [forward](../standard-library/utility-functions.md#forward) to ensure that a function parameter has the desired type."},{"pos":[1313,1440],"content":"For compatibility with older code, the class also defines the identity function <ph id=\"ph1\">`operator()`</ph> which returns its argument <ph id=\"ph2\">`left`</ph>.","source":"For compatibility with older code, the class also defines the identity function `operator()` which returns its argument `left`."},{"pos":[1449,1461],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1465,1487],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>utility&gt;","source":"**Header:** \\<utility>"},{"pos":[1494,1512],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[1521,1529],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[1533,1577],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>utility&gt;<ept id=\"p1\">](../standard-library/utility.md)</ept>","source":"[\\<utility>](../standard-library/utility.md)"}],"content":"---\ntitle: \"identity Structure | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std::identity\"\n  - \"utility/std::identity\"\n  - \"identity\"\n  - \"std.identity\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"identity class\"\n  - \"identity structure\"\nms.assetid: 990756fd-7969-4b39-ad7e-0878e8dac8fd\ncaps.latest.revision: 15\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# identity Structure\nA struct that provides a type definition as the template parameter.  \n  \n## Syntax  \n```  \nstruct identity {\n   typedef Type type;\n   Type operator()(const Type& left) const;\n   };  \n```  \n#### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`left`|The value to identify.|  \n  \n## Remarks  \n The class contains the public type definition `type`, which is the same as the template parameter Type. It is used in conjunction with template function [forward](../standard-library/utility-functions.md#forward) to ensure that a function parameter has the desired type.  \n  \n For compatibility with older code, the class also defines the identity function `operator()` which returns its argument `left`.  \n  \n## Requirements  \n **Header:** \\<utility>  \n  \n **Namespace:** std  \n  \n## See Also  \n [\\<utility>](../standard-library/utility.md)\n\n\n\n"}