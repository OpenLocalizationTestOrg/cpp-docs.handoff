<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">14dabf252d32b51a85dc96bfb7e9b0df987c9002</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cwnd-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f23eadfdcc6cf502b043bdd8b90b8203db3286e0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a06aae3e656e76bf5c6f44713215d8f13a4c9a8a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CWnd Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CWnd Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides the base functionality of all window classes in the Microsoft Foundation Class Library.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CWnd::CWnd</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CWnd::accDoDefaultAction</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Called by the framework to perform the object's default action.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CWnd::accHitTest</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the child element or child object at a given point on the screen.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CWnd::accLocation</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the specified object's current screen location.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CWnd::accNavigate</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Called by the framework to traverse to another user interface element within a container and if possible, retrieve the object.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CWnd::accSelect</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Called by the framework to modify the selection or move the keyboard focus of the specified object.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CWnd::AnimateWindow</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Animates the associated window object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CWnd::ArrangeIconicWindows</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Arranges all the minimized (iconic) child windows.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CWnd::Attach</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Attaches a Windows handle to a <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CWnd::BeginModalState</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Call this member function to make a frame window modal.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CWnd::BeginPaint</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Prepares <ph id="ph1">`CWnd`</ph> for painting.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CWnd::BindDefaultProperty</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Binds the calling object's default simple bound property, as marked in the type library, to a cursor associated with a data-source control.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>CWnd::BindProperty</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Binds a cursor-bound property on a data-bound control to a data-source control and registers that relationship with the MFC binding manager.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>CWnd::BringWindowToTop</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Brings <ph id="ph1">`CWnd`</ph> to the top of a stack of overlapping windows.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>CWnd::CalcWindowRect</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Called to calculate the window rectangle from the client rectangle.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>CWnd::CancelToolTips</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Disables the tooltip control.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>CWnd::CenterWindow</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Centers a window relative to its parent.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>CWnd::ChangeClipboardChain</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Removes <ph id="ph1">`CWnd`</ph> from the chain of Clipboard viewers.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>CWnd::CheckDlgButton</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Places a check mark next to or removes a check mark from a button control.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>CWnd::CheckRadioButton</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Checks the specified radio button and removes the check mark from all other radio buttons in the specified group of buttons.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>CWnd::ChildWindowFromPoint</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Determines which, if any, of the child windows contains the specified point.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>CWnd::ClientToScreen</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Converts the client coordinates of a given point or rectangle on the display to screen coordinates.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>CWnd::CloseWindow</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Minimizes the window.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>CWnd::ContinueModal</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Continues a window's modal status.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>CWnd::Create</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Creates and initializes the child window associated with the <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>CWnd::CreateAccessibleProxy</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Creates an Active Accessibility proxy for the specified object.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>CWnd::CreateCaret</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Creates a new shape for the system caret and gets ownership of the caret.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>CWnd::CreateControl</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Create an ActiveX control that will be represented in an MFC program by a <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>CWnd::CreateEx</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Creates a Windows overlapped, pop-up, or child window and attaches it to a <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>CWnd::CreateGrayCaret</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Creates a gray block for the system caret and gets ownership of the caret.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>CWnd::CreateSolidCaret</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Creates a solid block for the system caret and gets ownership of the caret.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>CWnd::DeleteTempMap</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Called automatically by the <ph id="ph1">`CWinApp`</ph> idle-time handler and deletes any temporary <ph id="ph2">`CWnd`</ph> objects created by <ph id="ph3">`FromHandle`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>CWnd::DestroyWindow</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Destroys the attached Windows window.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>CWnd::Detach</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Detaches a Windows handle from a <ph id="ph1">`CWnd`</ph> object and returns the handle.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>CWnd::DlgDirList</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Fills a list box with a file or directory listing.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>CWnd::DlgDirListComboBox</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Fills the list box of a combo box with a file or directory listing.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>CWnd::DlgDirSelect</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Retrieves the current selection from a list box.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>CWnd::DlgDirSelectComboBox</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Retrieves the current selection from the list box of a combo box.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>CWnd::DragAcceptFiles</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Indicates the window will accept dragged files.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>CWnd::DragDetect</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Captures the mouse and tracks its movement until the user releases the left button, presses the ESC key, or moves the mouse outside the drag rectangle around the specified point.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>CWnd::DrawAnimatedRects</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Draws a wire-frame rectangle and animates it to indicate the opening of an icon or the minimizing or maximizing of a window.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>CWnd::DrawCaption</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Draws a caption.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>CWnd::DrawMenuBar</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Redraws the menu bar.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>CWnd::EnableActiveAccessibility</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Enables user-defined <ph id="ph1">`Active Accessibility`</ph> functions.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>CWnd::EnableDynamicLayout</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Enables the position and size of child windows to adjust dynamically when the user resizes the window.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>CWnd::EnableD2DSupport</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Enables or disables window <ph id="ph1">`D2D`</ph> support.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Call this method before the main window is initialized.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>CWnd::EnableScrollBar</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Enables or disables one or both arrows of a scroll bar.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>CWnd::EnableScrollBarCtrl</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Enables or disables a sibling scroll-bar control.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>CWnd::EnableToolTips</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Enables the tooltip control.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>CWnd::EnableTrackingToolTips</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Enables the tooltip control in tracking mode.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>CWnd::EnableWindow</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Enables or disables mouse and keyboard input.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>CWnd::EndModalLoop</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Ends a window's modal status.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>CWnd::EndModalState</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Call this member function to change a frame window from modal to modeless.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>CWnd::EndPaint</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Marks the end of painting.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>CWnd::ExecuteDlgInit</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Initiates a dialog resource.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>CWnd::FilterToolTipMessage</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Retrieves the title or text associated with a control in a dialog box.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>CWnd::FindWindow</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Returns the handle of the window, which is identified by its window name and window class.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>CWnd::FindWindowEx</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Returns the handle of the window, which is identified by its window name and window class.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>CWnd::FlashWindow</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Flashes the window once.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>CWnd::FlashWindowEx</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Flashes the window with additional functionality.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>CWnd::FromHandle</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a <ph id="ph1">`CWnd`</ph> object when given a handle to a window.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`CWnd`</ph> object is not attached to the handle, a temporary <ph id="ph2">`CWnd`</ph> object is created and attached.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>CWnd::FromHandlePermanent</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a <ph id="ph1">`CWnd`</ph> object when given a handle to a window.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`CWnd`</ph> object is not attached to the handle, a temporary <ph id="ph2">`CWnd`</ph> object is created and attached.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>CWnd::get_accChild</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the address of an <ph id="ph1">`IDispatch`</ph> interface for the specified child.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>CWnd::get_accChildCount</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the number of children belonging to this object.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>CWnd::get_accDefaultAction</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve a string that describes the object's default action.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>CWnd::get_accDescription</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Called by framework to retrieve a string that describes the visual appearance of the specified object.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>CWnd::get_accFocus</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the object that has the keyboard focus.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>CWnd::get_accHelp</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve an object's <bpt id="p1">**</bpt>Help<ept id="p1">**</ept> property string.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>CWnd::get_accHelpTopic</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the full path of the <ph id="ph1">`WinHelp`</ph> file associated with the specified object and the identifier of the appropriate topic within that file.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>CWnd::get_accKeyboardShortcut</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the specified object's shortcut key or access key.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>CWnd::get_accName</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the name of the specified object.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>CWnd::get_accParent</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the <ph id="ph1">`IDispatch`</ph> interface of the object's parent.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>CWnd::get_accRole</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve information that describes the role of the specified object.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>CWnd::get_accSelection</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the selected children of this object.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>CWnd::get_accState</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the current state of the specified object.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>CWnd::get_accValue</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the value of the specified object.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>CWnd::GetActiveWindow</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Retrieves the active window.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>CWnd::GetAncestor</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Retrieves the ancestor window object of the specified window.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>CWnd::GetCapture</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Retrieves the <ph id="ph1">`CWnd`</ph> that has the mouse capture.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>CWnd::GetCaretPos</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Retrieves the client coordinates of the caret's current position.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>CWnd::GetCheckedRadioButton</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Returns the ID of the currently checked radio button in a group of buttons.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>CWnd::GetClientRect</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Gets the dimensions of the <ph id="ph1">`CWnd`</ph> client area.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>CWnd::GetClipboardOwner</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the current owner of the Clipboard.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>CWnd::GetClipboardViewer</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the first window in the chain of Clipboard viewers.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>CWnd::GetControlUnknown</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to an unknown ActiveX control.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>CWnd::GetDC</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Retrieves a display context for the client area.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>CWnd::GetDCEx</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Retrieves a display context for the client area, and enables clipping while drawing.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>CWnd::GetDCRenderTarget</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Retrieves the device context (DC) render target for the <ph id="ph1">`CWnd`</ph> window.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>CWnd::GetDescendantWindow</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Searches all descendant windows and returns the window with the specified ID.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>CWnd::GetDesktopWindow</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Retrieves the Windows desktop window.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>CWnd::GetDlgCtrlID</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`CWnd`</ph> is a child window, calling this function returns its ID value.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>CWnd::GetDlgItem</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Retrieves the control with the specified ID from the specified dialog box.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>CWnd::GetDlgItemInt</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Translates the text of a control in the given dialog box to an integer value.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>CWnd::GetDlgItemText</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Retrieves the caption or text associated with a control.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>CWnd::GetDSCCursor</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the underlying cursor that is defined by the DataSource, UserName, Password, and SQL properties of a data-source control.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>CWnd::GetDynamicLayout</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the dynamic layout manager object.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>CWnd::GetExStyle</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Returns the window's extended style.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>CWnd::GetFocus</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Retrieves the <ph id="ph1">`CWnd`</ph> that currently has the input focus.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>CWnd::GetFont</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Retrieves the current font.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>CWnd::GetForegroundWindow</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the foreground window (the top-level window with which the user is currently working).</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>CWnd::GetIcon</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Retrieves the handle to an icon.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>CWnd::GetLastActivePopup</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Determines which pop-up window owned by <ph id="ph1">`CWnd`</ph> was most recently active.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>CWnd::GetLayeredWindowAttributes</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Retrieves the opacity and transparency color key of a layered window.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>CWnd::GetMenu</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the specified menu.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>CWnd::GetNextDlgGroupItem</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Searches for the next (or previous) control within a group of controls.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>CWnd::GetNextDlgTabItem</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Retrieves the first control with the <bpt id="p1">[</bpt>WS_TABSTOP<ept id="p1">](window-styles.md)</ept> style that follows (or precedes) the specified control.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>CWnd::GetNextWindow</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Returns the next (or previous) window in the window manager's list.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>CWnd::GetOleControlSite</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Retrieves the custom site for the specified ActiveX control.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>CWnd::GetOpenClipboardWindow</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the window that currently has the Clipboard open.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>CWnd::GetOwner</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the owner of a <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>CWnd::GetParent</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Retrieves the parent window of <ph id="ph1">`CWnd`</ph> (if any).</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>CWnd::GetParentFrame</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Retrieves the <ph id="ph1">`CWnd`</ph> object's parent frame window.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>CWnd::GetParentOwner</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a child window's parent window.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>CWnd::GetProperty</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Retrieves an ActiveX control property.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>CWnd::GetRenderTarget</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Gets a render target that is associated with this window.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>CWnd::GetSafeHwnd</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`m_hWnd`</ph>, or <ph id="ph2">`NULL`</ph> if the <ph id="ph3">`this`</ph> pointer is <ph id="ph4">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>CWnd::GetSafeOwner</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Retrieves the safe owner for the given window.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>CWnd::GetScrollBarCtrl</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Returns a sibling scroll-bar control.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>CWnd::GetScrollBarInfo</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Retrieves information about the specified scroll bar.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>CWnd::GetScrollInfo</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Retrieves the information that the <ph id="ph1">`SCROLLINFO`</ph> structure maintains about a scroll bar.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>CWnd::GetScrollLimit</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Retrieves the limit of the scroll bar.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>CWnd::GetScrollPos</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Retrieves the current position of a scroll box.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>CWnd::GetScrollRange</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Copies the current minimum and maximum scroll-bar positions for the given scroll bar.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>CWnd::GetStyle</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Returns the current window style.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>CWnd::GetSystemMenu</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Allows the application to access the Control menu for copying and modification.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>CWnd::GetTitleBarInfo</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Retrieves information about the specified title bar.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>CWnd::GetTopLevelFrame</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Retrieves the window's top-level frame window.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>CWnd::GetTopLevelOwner</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Retrieves the top-level window.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>CWnd::GetTopLevelParent</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Retrieves the window's top-level parent.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>CWnd::GetTopWindow</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Returns the first child window that belongs to the <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>CWnd::GetUpdateRect</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Retrieves the coordinates of the smallest rectangle that completely encloses the <ph id="ph1">`CWnd`</ph> update region.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>CWnd::GetUpdateRgn</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Retrieves the <ph id="ph1">`CWnd`</ph> update region.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>CWnd::GetWindow</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Returns the window with the specified relationship to this window.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>CWnd::GetWindowContextHelpId</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Retrieves the help context identifier.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>CWnd::GetWindowDC</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Retrieves the display context for the whole window, including the caption bar, menus, and scroll bars.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>CWnd::GetWindowedChildCount</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Returns the number of associated child windows.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>CWnd::GetWindowInfo</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Returns information about the window.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>CWnd::GetWindowlessChildCount</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Returns the number of associated windowless child windows.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>CWnd::GetWindowPlacement</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Retrieves the show state and the normal (restored), minimized, and maximized positions of a window.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>CWnd::GetWindowRect</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Gets the screen coordinates of <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>CWnd::GetWindowRgn</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Retrieves a copy of the window region of a window.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>CWnd::GetWindowText</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Returns the window text or caption title (if it has one).</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>CWnd::GetWindowTextLength</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Returns the length of the window's text or caption title.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>CWnd::HideCaret</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Hides the caret by removing it from the display screen.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>CWnd::HiliteMenuItem</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Highlights or removes the highlighting from a top-level (menu-bar) menu item.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>CWnd::HtmlHelp</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Called to initiate the HTMLHelp application.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>CWnd::Invalidate</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Invalidates the entire client area.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>CWnd::InvalidateRect</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Invalidates the client area within the given rectangle by adding that rectangle to the current update region.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>CWnd::InvalidateRgn</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Invalidates the client area within the given region by adding that region to the current update region.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>CWnd::InvokeHelper</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Invokes an ActiveX control method or property.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>CWnd::IsChild</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Indicates whether <ph id="ph1">`CWnd`</ph> is a child window or other direct descendant of the specified window.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>CWnd::IsD2DSupportEnabled</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Determines whether <ph id="ph1">`D2D`</ph> support is enabled.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>CWnd::IsDialogMessage</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Determines whether the given message is intended for the modeless dialog box and, if so, processes it.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>CWnd::IsDlgButtonChecked</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Determines whether a button control is checked.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>CWnd::IsDynamicLayoutEnabled</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Determines whether dynamic layout is enabled on this window.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>If dynamic layout is enabled, the position and size of child windows can change when the user resizes the parent window.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>CWnd::IsIconic</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Determines whether <ph id="ph1">`CWnd`</ph> is minimized (iconic).</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>CWnd::IsTouchWindow</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Specifies whether <ph id="ph1">`CWnd`</ph> has touch support.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>CWnd::IsWindowEnabled</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Determines whether the window is enabled for mouse and keyboard input.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>CWnd::IsWindowVisible</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Determines whether the window is visible.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>CWnd::IsZoomed</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Determines whether <ph id="ph1">`CWnd`</ph> is maximized.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>CWnd::KillTimer</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Kills a system timer.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>CWnd::LockWindowUpdate</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Disables or reenables drawing in the given window.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>CWnd::MapWindowPoints</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Converts (maps) a set of points from the coordinate space of the <ph id="ph1">`CWnd`</ph> to the coordinate space of another window.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>CWnd::MessageBox</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Creates and displays a window that contains an application-supplied message and caption.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>CWnd::ModifyStyle</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Modifies the current window style.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>CWnd::ModifyStyleEx</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Modifies the window's extended style.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>CWnd::MoveWindow</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Changes the position and dimensions of <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>CWnd::NotifyWinEvent</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Signals the system that a predefined event occurred.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>CWnd::OnAmbientProperty</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Implement ambient property values.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>CWnd::OnDrawIconicThumbnailOrLivePreview</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Called by the framework when it needs to obtain a bitmap to be displayed on Windows 7 tab thumbnail, or on the client for application peek.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>CWnd::OnHelp</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Handles F1 Help within the application (using the current context).</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>CWnd::OnHelpFinder</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Handles the <ph id="ph1">`ID_HELP_FINDER`</ph> and <ph id="ph2">`ID_DEFAULT_HELP`</ph> commands.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>CWnd::OnHelpIndex</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Handles the <ph id="ph1">`ID_HELP_INDEX`</ph> command and provides a default Help topic.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>CWnd::OnHelpUsing</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Handles the <ph id="ph1">`ID_HELP_USING`</ph> command.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>CWnd::OnToolHitTest</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Determines whether a point is in the bounding rectangle of the specified tool and retrieves information about the tool.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>CWnd::OpenClipboard</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Opens the Clipboard.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>Other applications will not be able to modify the Clipboard until the Windows <bpt id="p1">[</bpt>CloseClipboard<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms649035)</ept> function is called.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>CWnd::PaintWindowlessControls</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Draws windowless controls on the control container.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>CWnd::PostMessage</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Places a message in the application queue, then returns without waiting for the window to process the message.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>CWnd::PreCreateWindow</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Called before the creation of the Windows window attached to this <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>CWnd::PreSubclassWindow</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Allows other necessary subclassing to occur before <bpt id="p1">[</bpt>SubclassWindow<ept id="p1">](#cwnd__subclasswindow)</ept> is called.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>CWnd::PreTranslateMessage</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Used by <ph id="ph1">`CWinApp`</ph> to filter window messages before they are dispatched to the <ph id="ph2">`TranslateMessage`</ph> and <ph id="ph3">`DispatchMessage`</ph> Windows functions.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>CWnd::Print</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Draws the current window in the specified device context.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>CWnd::PrintClient</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Draws any window in the specified device context (usually a printer device context).</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>CWnd::PrintWindow</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Copies a visual window into the specified device context, typically a printer DC.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>CWnd::RedrawWindow</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Updates the specified rectangle or region in the client area.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>CWnd::RegisterTouchWindow</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Register/Unregister window Windows touch support.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>CWnd::ReleaseDC</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Releases client and window device contexts, freeing them for use by other applications.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>CWnd::RepositionBars</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>Repositions control bars in the client area.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>CWnd::RunModalLoop</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Retrieves, translates, or dispatches messages for a window that is in modal status.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>CWnd::ScreenToClient</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Converts the screen coordinates of a given point or rectangle on the display to client coordinates.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>CWnd::ScrollWindow</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Scrolls the contents of the client area.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>CWnd::ScrollWindowEx</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Scrolls the contents of the client area.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Similar to <ph id="ph1">`ScrollWindow`</ph>, with additional features.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>CWnd::SendChildNotifyLastMsg</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Provides a notification message to a child window, from the parent window, so the child window can handle a task.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>CWnd::SendDlgItemMessage</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Sends a message to the specified control.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>CWnd::SendMessage</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Sends a message to the <ph id="ph1">`CWnd`</ph> object and does not return until it has processed the message.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>CWnd::SendMessageToDescendants</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Sends a message to all descendant windows of the window.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>CWnd::SendNotifyMessage</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Sends the specified message to the window and returns as soon as possible, depending on whether the calling thread created the window.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>CWnd::SetActiveWindow</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>Activates the window.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>CWnd::SetCapture</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Causes all subsequent mouse input to be sent to the <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>CWnd::SetCaretPos</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Moves the caret to a specified position.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>CWnd::SetClipboardViewer</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Adds <ph id="ph1">`CWnd`</ph> to the chain of windows that are notified whenever the contents of the Clipboard are changed.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>CWnd::SetDlgCtrlID</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Sets the window or control ID for the window (which can be any child window, not only a control in a dialog box).</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>CWnd::SetDlgItemInt</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Sets the text of a control to the string that represents an integer value.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>CWnd::SetDlgItemText</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Sets the caption or text of a control in the specified dialog box.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>CWnd::SetFocus</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Claims the input focus.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>CWnd::SetFont</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Sets the current font.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>CWnd::SetForegroundWindow</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Puts the thread that created the window into the foreground and activates the window.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>CWnd::SetIcon</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Sets the handle to a specific icon.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>CWnd::SetLayeredWindowAttributes</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Sets the opacity and transparency color key of a layered window.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>CWnd::SetMenu</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Sets the menu to the specified menu.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>CWnd::SetOwner</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Changes the owner of a <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>CWnd::SetParent</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>Changes the parent window.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>CWnd::SetProperty</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Sets an ActiveX control property.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>CWnd::SetRedraw</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Allows changes in <ph id="ph1">`CWnd`</ph> to be redrawn or prevents changes from being redrawn.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>CWnd::SetScrollInfo</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Sets information about the scroll bar.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>CWnd::SetScrollPos</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>Sets the current position of a scroll box and, if specified, redraws the scroll bar to reflect the new position.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>CWnd::SetScrollRange</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Sets minimum and maximum position values for the given scroll bar.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>CWnd::SetTimer</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Installs a system timer that sends a <bpt id="p1">[</bpt>WM_TIMER<ept id="p1">](#cwnd__ontimer)</ept> message when triggered.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>CWnd::SetWindowContextHelpId</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Sets the help context identifier.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>CWnd::SetWindowPlacement</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Sets the show state and the normal (restored), minimized, and maximized positions for a window.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>CWnd::SetWindowPos</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Changes the size, position, and ordering of child, pop-up, and top-level windows.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>CWnd::SetWindowRgn</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>Sets the region of a window.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>CWnd::SetWindowText</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>Sets the window text or caption title (if it has one) to the specified text.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>CWnd::ShowCaret</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Shows the caret on the display at the caret's current position.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Once shown, the caret begins flashing automatically.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>CWnd::ShowOwnedPopups</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>Shows or hides all pop-up windows owned by the window.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>CWnd::ShowScrollBar</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Displays or hides a scroll bar.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>CWnd::ShowWindow</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>Shows or hides the window.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>CWnd::SubclassDlgItem</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>Attaches a Windows control to a <ph id="ph1">`CWnd`</ph> object and makes it route messages through the <ph id="ph2">`CWnd`</ph>'s message map.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>CWnd::SubclassWindow</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>Attaches a window to a <ph id="ph1">`CWnd`</ph> object and makes it route messages through the <ph id="ph2">`CWnd`</ph>'s message map.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>CWnd::UnlockWindowUpdate</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>Unlocks a window that was locked with <ph id="ph1">`CWnd::LockWindowUpdate`</ph>.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>CWnd::UnsubclassWindow</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>Detaches a window from a <ph id="ph1">`CWnd`</ph> object</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>CWnd::UpdateData</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Initializes or retrieves data from a dialog box.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>CWnd::UpdateDialogControls</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Call to update the state of dialog buttons and other controls.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>CWnd::UpdateLayeredWindow</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>Updates the position, size, shape, content, and translucency of a layered window.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>CWnd::UpdateWindow</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>Updates the client area.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>CWnd::ValidateRect</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>Validates the client area within the given rectangle by removing the rectangle from the current update region.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>CWnd::ValidateRgn</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>Validates the client area within the given region by removing the region from the current update region.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>CWnd::WindowFromPoint</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Identifies the window that contains the given point.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>CWnd::WinHelp</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>Called to initiate the WinHelp application.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>Protected Methods</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>CWnd::Default</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>Calls the default window procedure, which provides default processing for any window messages that an application does not process.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>CWnd::DefWindowProc</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>Calls the default window procedure, which provides default processing for any window messages that an application does not process.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>CWnd::DoDataExchange</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>For dialog data exchange and validation.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>Called by <ph id="ph1">`UpdateData`</ph>.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>CWnd::GetCurrentMessage</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the message this window is currently processing.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>Should only be called when in an <ph id="ph1">`On`</ph><bpt id="p1">*</bpt>Message<ept id="p1">*</ept> message-handler member function.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>CWnd::InitDynamicLayout</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>Called by the framework to initialize the dynamic layout for the window.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>CWnd::LoadDynamicLayoutResource</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>Loads dynamic layout information from the resource file.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>CWnd::OnActivate</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>Called when <ph id="ph1">`CWnd`</ph> is being activated or deactivated.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>CWnd::OnActivateApp</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Called when the application is about to be activated or deactivated.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>CWnd::OnAppCommand</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>Called when the user generates an application command event.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>CWnd::OnAskCbFormatName</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>Called by a Clipboard viewer application when a Clipboard owner will display the Clipboard contents.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>CWnd::OnCancelMode</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>Called to allow <ph id="ph1">`CWnd`</ph> to cancel any internal modes, such as mouse capture.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>CWnd::OnCaptureChanged</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>Sends a message to the window that is losing the mouse capture.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>CWnd::OnChangeCbChain</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>Notifies that a specified window is being removed from the chain.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>CWnd::OnChangeUIState</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Called when the user interface (UI) state should be changed.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>CWnd::OnChar</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>Called when a keystroke translates to a non-system character.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>CWnd::OnCharToItem</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>Called by a child list box with the <bpt id="p1">[</bpt>LBS_WANTKEYBOARDINPUT<ept id="p1">](list-box-styles.md)</ept> style in response to a <bpt id="p2">[</bpt>WM_CHAR<ept id="p2">](#cwnd__onchar)</ept> message.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>CWnd::OnChildActivate</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>Called for multiple document interface (MDI) child windows whenever the size or position of <ph id="ph1">`CWnd`</ph> changes or <ph id="ph2">`CWnd`</ph> is activated.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>CWnd::OnChildNotify</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>Called by a parent window to give a notifying control a chance to respond to a control notification.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>CWnd::OnClipboardUpdate</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>Called when the contents of the clipboard have changed.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>CWnd::OnClose</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>Called as a signal that <ph id="ph1">`CWnd`</ph> should be closed.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>CWnd::OnColorizationColorChanged</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>Called when the rendering policy for the non-client area has changed.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>CWnd::OnCommand</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>Called when the user selects a command.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>CWnd::OnCompacting</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>Called when Windows detects that system memory is low.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>CWnd::OnCompareItem</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>Called to determine the relative position of a new item in a child sorted owner-draw combo box or list box.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>CWnd::OnCompositionChanged</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>Called for all top-level windows when the Desktop Window Manager (DWM) composition is enabled or disabled.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>CWnd::OnContextMenu</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>Called when the user clicks the right mouse button in the window.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>CWnd::OnCopyData</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>Copies data from one application to another.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>CWnd::OnCreate</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>Called as a part of window creation.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>CWnd::OnCtlColor</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>Called if <ph id="ph1">`CWnd`</ph> is the parent of a control when the control is about to be drawn.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>CWnd::OnDeadChar</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>Called when a keystroke translates to a nonsystem dead character (such as accent characters).</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>CWnd::OnDeleteItem</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>Called when an owner-draw child list box or combo box is destroyed or when items are removed from the control.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>CWnd::OnDestroy</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>Called when <ph id="ph1">`CWnd`</ph> is being destroyed.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>CWnd::OnDestroyClipboard</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>Called when the Clipboard is emptied through a call to the Windows <bpt id="p1">[</bpt>EmptyClipboard<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms649037)</ept> function.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>CWnd::OnDeviceChange</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>Notifies an application or device driver of a change to the hardware configuration of a device or the computer.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>CWnd::OnDevModeChange</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>Called for all top-level windows when the user changes device-mode settings.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>CWnd::OnDrawClipboard</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>Called when the contents of the Clipboard change.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>CWnd::OnDrawItem</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>Called when a visual aspect of an owner-draw child button control, combo-box control, list-box control, or menu needs to be drawn.</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>CWnd::OnDropFiles</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>Called when the user releases the left mouse button over a window that has registered itself as the recipient of dropped files.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>CWnd::OnEnable</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>Called when <ph id="ph1">`CWnd`</ph> is enabled or disabled.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>CWnd::OnEndSession</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>Called when the session is ending.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>CWnd::OnEnterIdle</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>Called to inform an application's main window procedure that a modal dialog box or a menu is entering an idle state.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>CWnd::OnEnterMenuLoop</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>Called when a menu modal loop has been entered.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>CWnd::OnEnterSizeMove</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>Called after the affected window enters a moving or sizing modal loop.</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>CWnd::OnEraseBkgnd</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>Called when the window background needs erasing.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>CWnd::OnExitMenuLoop</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>Called when a menu modal loop has been exited.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>CWnd::OnExitSizeMove</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>Called after the affected window exits a moving or sizing modal loop.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>CWnd::OnFontChange</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>Called when the pool of font resources changes.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>CWnd::OnGetDlgCode</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>Called for a control so the control can process arrow-key and TAB-key input itself.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>CWnd::OnGetMinMaxInfo</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>Called whenever Windows needs to know the maximized position or dimensions, or the minimum or maximum tracking size.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>CWnd::OnHelpInfo</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>Called by the framework when the user presses the F1 key.</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>CWnd::OnHotKey</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>Called when the user presses a system-wide hot key.</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>CWnd::OnHScroll</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>Called when the user clicks the horizontal scroll bar of <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>CWnd::OnHScrollClipboard</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>Called when a Clipboard owner should scroll the Clipboard image, invalidate the appropriate section, and update the scroll-bar values.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>CWnd::OnIconEraseBkgnd</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>Called when <ph id="ph1">`CWnd`</ph> is minimized (iconic) and the background of the icon must be filled before painting the icon.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>CWnd::OnInitMenu</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>Called when a menu is about to become active.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>CWnd::OnInitMenuPopup</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>Called when a pop-up menu is about to become active.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>CWnd::OnInputDeviceChange</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>Called when an I/O device is added or removed from the system.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>CWnd::OnInputLangChange</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>Called after an application's input language has been changed.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>CWnd::OnInputLangChangeRequest</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>Called when the user chooses a new input language.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>CWnd::OnKeyDown</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>Called when a nonsystem key is pressed.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>CWnd::OnKeyUp</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>Called when a nonsystem key is released.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>CWnd::OnKillFocus</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>Called immediately before <ph id="ph1">`CWnd`</ph> loses the input focus.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>CWnd::OnLButtonDblClk</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>Called when the user double-clicks the left mouse button.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>CWnd::OnLButtonDown</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>Called when the user presses the left mouse button.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>CWnd::OnLButtonUp</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>Called when the user releases the left mouse button.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>CWnd::OnMButtonDblClk</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>Called when the user double-clicks the middle mouse button.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>CWnd::OnMButtonDown</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>Called when the user presses the middle mouse button.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>CWnd::OnMButtonUp</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>Called when the user releases the middle mouse button.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>CWnd::OnMDIActivate</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>Called when an MDI child window is activated or deactivated.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>CWnd::OnMeasureItem</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>Called for an owner-draw child combo box, list box, or menu item when the control is created.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>informs Windows of the dimensions of the control.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>CWnd::OnMenuChar</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>Called when the user presses a menu mnemonic character that doesn't match any of the predefined mnemonics in the current menu.</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>CWnd::OnMenuDrag</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>Called when the user begins to drag a menu item.</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>CWnd::OnMenuGetObject</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>Called when the mouse cursor enters a menu item or moves from the center of the item to the top or bottom of the item.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>CWnd::OnMenuRButtonUp</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>Called when the user releases the right mouse button while the cursor is on a menu item.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>CWnd::OnMenuSelect</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>Called when the user selects a menu item.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>CWnd::OnMouseActivate</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>Called when the cursor is in an inactive window and the user presses a mouse button.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>CWnd::OnMouseHover</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>Called when the cursor hovers over the client area of the window for the period of time specified in a prior call to <bpt id="p1">[</bpt>TrackMouseEvent<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646265)</ept>.</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>CWnd::OnMouseHWheel</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>Called when the current window is composed by the Desktop Window Manager (DWM), and that window is maximized.</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>CWnd::OnMouseLeave</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>Called when the cursor leaves the client area of the window specified in a prior call to <bpt id="p1">[</bpt>TrackMouseEvent<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646265)</ept>.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>CWnd::OnMouseMove</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>Called when the mouse cursor moves.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>CWnd::OnMouseWheel</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>Called when a user rotates the mouse wheel.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>Uses Windows NT 4.0 message handling.</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>CWnd::OnMove</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>Called after the position of the <ph id="ph1">`CWnd`</ph> has been changed.</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>CWnd::OnMoving</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>Indicates that a user is moving a <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcActivate</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>Called when the non-client area needs to be changed to indicate an active or inactive state.</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcCalcSize</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>Called when the size and position of the client area need to be calculated.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcCreate</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>Called prior to <bpt id="p1">[</bpt>OnCreate<ept id="p1">](#cwnd__oncreate)</ept> when the non-client area is being created.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcDestroy</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>Called when the non-client area is being destroyed.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcHitTest</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>Called by Windows every time the mouse is moved if <ph id="ph1">`CWnd`</ph> contains the cursor or has captured mouse input with <ph id="ph2">`SetCapture`</ph>.</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcLButtonDblClk</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>Called when the user double-clicks the left mouse button while the cursor is within a non-client area of <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcLButtonDown</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>Called when the user presses the left mouse button while the cursor is within a non-client area of <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcLButtonUp</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>Called when the user releases the left mouse button while the cursor is within a non-client area of <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcMButtonDblClk</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>Called when the user double-clicks the middle mouse button while the cursor is within a non-client area of <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcMButtonDown</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>Called when the user presses the middle mouse button while the cursor is within a non-client area of <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcMButtonUp</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>Called when the user releases the middle mouse button while the cursor is within a non-client area of <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcMouseHover</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>Called when the cursor hovers over the non-client area of the window for the period of time specified in a prior call to <bpt id="p1">[</bpt>TrackMouseEvent<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646265)</ept>.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcMouseLeave</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the cursor leaves the non-client area of the window specified in a prior call to <bpt id="p1">[</bpt>TrackMouseEvent<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646265)</ept>.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcMouseMove</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>Called when the cursor is moved within a non-client area of <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcPaint</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>Called when the non-client area needs painting.</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcRButtonDblClk</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>Called when the user double-clicks the right mouse button while the cursor is within a non-client area of <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcRButtonDown</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>Called when the user presses the right mouse button while the cursor is within a non-client area of <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcRButtonUp</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>Called when the user releases the right mouse button while the cursor is within a non-client area of <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcRenderingChanged</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>Called when the rendering policy for the non-client area has changed.</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcXButtonDblClk</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>Called when the user double-clicks XBUTTON1 or XBUTTON2 while the cursor is in the non-client area of a window.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcXButtonDown</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>Called when the user presses XBUTTON1 or XBUTTON2 of the mouse while the cursor is in the non-client area of a window.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcXButtonUp</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>Called when the user releases XBUTTON1 or XBUTTON2 of the mouse while the cursor is in the non-client area of a window.</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>CWnd::OnNextMenu</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>Called when the right or left arrow key is used to switch between the menu bar and the system menu.</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>CWnd::OnNotify</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>Called by the framework to inform a parent window an event has occurred in one of its controls or that the control needs information.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>CWnd::OnNotifyFormat</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>Called to determine if the current window accepts ANSI or Unicode structures in the WM_NOTIFY notification message.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>CWnd::OnPaint</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>Called to repaint a portion of the window.</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>CWnd::OnPaintClipboard</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>Called when the client area of the Clipboard viewer needs repainting.</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>CWnd::OnPaletteChanged</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>Called to allow windows that use a color palette to realize their logical palettes and update their client areas.</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>CWnd::OnPaletteIsChanging</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>Informs other applications when an application is going to realize its logical palette.</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>CWnd::OnParentNotify</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>Called when a child window is created or destroyed, or when the user clicks a mouse button while the cursor is over the child window.</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>CWnd::OnPowerBroadcast</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>Called when a power-management event occurs.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>CWnd::OnQueryDragIcon</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>Called when a minimized (iconic) <ph id="ph1">`CWnd`</ph> is about to be dragged by the user.</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>CWnd::OnQueryEndSession</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>Called when the user chooses to end the Windows session.</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>CWnd::OnQueryNewPalette</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>Informs <ph id="ph1">`CWnd`</ph> that it is about to receive the input focus.</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>CWnd::OnQueryOpen</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>Called when <ph id="ph1">`CWnd`</ph> is an icon and the user requests that the icon be opened.</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>CWnd::OnQueryUIState</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>Called to retrieve the user interface (UI) state for a window.</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>CWnd::OnRawInput</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>Called when the current window gets raw input.</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>CWnd::OnRButtonDblClk</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>Called when the user double-clicks the right mouse button.</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>CWnd::OnRButtonDown</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>Called when the user presses the right mouse button.</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>CWnd::OnRButtonUp</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>Called when the user releases the right mouse button.</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>CWnd::OnRenderAllFormats</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>Called when the owner application is being destroyed and needs to render all its formats.</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>CWnd::OnRenderFormat</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>Called for the Clipboard owner when a particular format with delayed rendering needs to be rendered.</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>CWnd::OnSessionChange</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>Called to notify an application of a change in session state.</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>CWnd::OnSetCursor</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>Called if mouse input is not captured and the mouse causes cursor movement within a window.</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>CWnd::OnSetFocus</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>Called after <ph id="ph1">`CWnd`</ph> gains the input focus.</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>CWnd::OnSettingChange</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>Called when the Win32 <ph id="ph1">`SystemParametersInfo`</ph> function changes a system-wide setting.</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>CWnd::OnShowWindow</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>Called when <ph id="ph1">`CWnd`</ph> is to be hidden or shown.</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>CWnd::OnSize</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>Called after the size of <ph id="ph1">`CWnd`</ph> has changed.</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>CWnd::OnSizeClipboard</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>Called when the size of the client area of the Clipboard-viewer window has changed.</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>CWnd::OnSizing</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>Indicates that the user is resizing the rectangle.</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>CWnd::OnSpoolerStatus</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source>Called from Print Manager whenever a job is added to or removed from the Print Manager queue.</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>CWnd::OnStyleChanged</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>Indicates that the <bpt id="p1">[</bpt>SetWindowLong<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633591)</ept> Windows function has changed one or more of the window's styles.</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>CWnd::OnStyleChanging</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>Indicates that the <bpt id="p1">[</bpt>SetWindowLong<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633591)</ept> Windows function is about to change one or more of the window's styles.</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>CWnd::OnSysChar</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>Called when a keystroke translates to a system character.</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>CWnd::OnSysColorChange</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>Called for all top-level windows when a change is made in the system color setting.</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>CWnd::OnSysCommand</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>Called when the user selects a command from the Control menu, or when the user selects the Maximize or Minimize button.</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>CWnd::OnSysDeadChar</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>Called when a keystroke translates to a system dead character (such as accent characters).</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>CWnd::OnSysKeyDown</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>Called when the user holds down the ALT key and then presses another key.</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>CWnd::OnSysKeyUp</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source>Called when the user releases a key that was pressed while the ALT key was held down.</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>CWnd::OnTCard</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>Called when the user clicks an authorable button.</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>CWnd::OnTimeChange</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>Called for all top-level windows after the system time changes.</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>CWnd::OnTimer</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>Called after each interval specified in <bpt id="p1">[</bpt>SetTimer<ept id="p1">](#cwnd__settimer)</ept>.</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source>CWnd::OnTouchInput</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>Process single input from Windows touch.</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>CWnd::OnTouchInputs</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source>Process inputs from Windows touch.</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>CWnd::OnUniChar</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>Called when a key is pressed.</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>That is, the current window has the keyboard focus and a <bpt id="p1">[</bpt>WM_KEYDOWN<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646280)</ept> message is translated by the <bpt id="p2">[</bpt>TranslateMessage<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms644955)</ept> function.</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>CWnd::OnUnInitMenuPopup</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>Called when a drop-down menu or submenu has been destroyed.</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>CWnd::OnUpdateUIState</source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>Called to change the user interface (UI) state for the specified window and all its child windows.</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source>CWnd::OnUserChanged</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source>Called after the user has logged on or off.</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source>CWnd::OnVKeyToItem</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>Called by a list box owned by <ph id="ph1">`CWnd`</ph> in response to a <bpt id="p1">[</bpt>WM_KEYDOWN<ept id="p1">](#cwnd__onkeydown)</ept> message.</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>CWnd::OnVScroll</source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>Called when the user clicks the window's vertical scroll bar.</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source>CWnd::OnVScrollClipboard</source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source>Called when the owner should scroll the Clipboard image, invalidate the appropriate section, and update the scroll-bar values.</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>CWnd::OnWindowPosChanged</source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>Called when the size, position, or Z-order has changed as a result of a call to <bpt id="p1">[</bpt>SetWindowPos<ept id="p1">](#cwnd__setwindowpos)</ept> or another window-management function.</source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>CWnd::OnWindowPosChanging</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>Called when the size, position, or Z-order is about to change as a result of a call to <bpt id="p1">[</bpt>SetWindowPos<ept id="p1">](#cwnd__setwindowpos)</ept> or another window-management function.</source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>CWnd::OnWinIniChange</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>Called for all top-level windows after the Windows initialization file, WIN.INI, is changed.</source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>CWnd::OnWndMsg</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>Indicates if a windows message was handled.</source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve">
          <source>CWnd::OnXButtonDblClk</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve">
          <source>Called when the user double-clicks XBUTTON1 or XBUTTON2 while the cursor is in the client area of a window.</source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source>CWnd::OnXButtonDown</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>Called when the user presses XBUTTON1 or XBUTTON2 while the cursor is in the client area of a window.</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>CWnd::OnXButtonUp</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>Called when the user releases XBUTTON1 or XBUTTON2 while the cursor is in the client area of a window.</source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>CWnd::PostNcDestroy</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>This virtual function is called by the default <bpt id="p1">[</bpt>OnNcDestroy<ept id="p1">](#cwnd__onncdestroy)</ept> function after the window has been destroyed.</source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source>CWnd::ReflectChildNotify</source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>Helper function which reflects a message to its source.</source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>CWnd::ReflectLastMsg</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>Reflects the last message to the child window.</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source>CWnd::ResizeDynamicLayout</source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>Called by the framework when the window size changes to adjust the layout of child windows, if dynamic layout is enabled for the window.</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source>CWnd::WindowProc</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source>Provides a window procedure for a <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source>The default dispatches messages through the message map.</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source>CWnd::operator HWND</source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>Call to get a handle to a window.</source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>CWnd::operator !=</source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve">
          <source>Determines if a window is not the same as the window whose handle is <bpt id="p1">[</bpt>m_hWnd<ept id="p1">](#cwnd__m_hwnd)</ept>.</source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve">
          <source>CWnd::operator ==</source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source>Determines if a window is the same as the window whose handle is <bpt id="p1">[</bpt>m_hWnd<ept id="p1">](#cwnd__m_hwnd)</ept>.</source>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve">
          <source>CWnd::m_hWnd</source>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source>Indicates the <ph id="ph1">`HWND`</ph> attached to this <ph id="ph2">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CWnd`</ph> object is distinct from a Windows window, but the two are tightly linked.</source>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CWnd`</ph> object is created or destroyed by the <ph id="ph2">`CWnd`</ph> constructor and destructor.</source>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve">
          <source>The Windows window, on the other hand, is a data structure internal to Windows that is created by a <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> member function and destroyed by the <ph id="ph1">`CWnd`</ph> virtual destructor.</source>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>DestroyWindow<ept id="p1">](#cwnd__destroywindow)</ept> function destroys the Windows window without destroying the object.</source>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CWnd`</ph> class and the message-map mechanism hide the <bpt id="p1">**</bpt>WndProc<ept id="p1">**</ept> function.</source>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>Incoming Windows notification messages are automatically routed through the message map to the proper <bpt id="p1">**</bpt>On<ept id="p1">**</ept><bpt id="p2">*</bpt>Message<ept id="p2">*</ept><ph id="ph1">`CWnd`</ph> member functions.</source>
        </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve">
          <source>You override an <bpt id="p1">**</bpt>On<ept id="p1">**</ept><bpt id="p2">*</bpt>Message<ept id="p2">*</ept> member function to handle a member's particular message in your derived classes.</source>
        </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CWnd`</ph> class also lets you create a Windows child window for your application.</source>
        </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source>Derive a class from <ph id="ph1">`CWnd`</ph>, then add member variables to the derived class to store data specific to your application.</source>
        </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source>Implement message-handler member functions and a message map in the derived class to specify what happens when messages are directed to the window.</source>
        </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve">
          <source>You create a child window in two steps.</source>
        </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve">
          <source>First, call the constructor <ph id="ph1">`CWnd`</ph> to construct the <ph id="ph2">`CWnd`</ph> object, then call the <bpt id="p1">[</bpt>Create<ept id="p1">](#cwnd__create)</ept> member function to create the child window and attach it to the <ph id="ph3">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve">
          <source>When the user terminates your child window, destroy the <ph id="ph1">`CWnd`</ph> object, or call the <ph id="ph2">`DestroyWindow`</ph> member function to remove the window and destroy its data structures.</source>
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>Within the Microsoft Foundation Class Library, further classes are derived from <ph id="ph1">`CWnd`</ph> to provide specific window types.</source>
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve">
          <source>Many of these classes, including <bpt id="p1">[</bpt>CFrameWnd<ept id="p1">](../../mfc/reference/cframewnd-class.md)</ept>, <bpt id="p2">[</bpt>CMDIFrameWnd<ept id="p2">](../../mfc/reference/cmdiframewnd-class.md)</ept>, <bpt id="p3">[</bpt>CMDIChildWnd<ept id="p3">](../../mfc/reference/cmdichildwnd-class.md)</ept>, <bpt id="p4">[</bpt>CView<ept id="p4">](../../mfc/reference/cview-class.md)</ept>, and <bpt id="p5">[</bpt>CDialog<ept id="p5">](../../mfc/reference/cdialog-class.md)</ept>, are designed for further derivation.</source>
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve">
          <source>The control classes derived from <ph id="ph1">`CWnd`</ph>, such as <bpt id="p1">[</bpt>CButton<ept id="p1">](../../mfc/reference/cbutton-class.md)</ept>, can be used directly or can be used for further derivation of classes.</source>
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve">
          <source>For more information on using <ph id="ph1">`CWnd`</ph>, see <bpt id="p1">[</bpt>Frame Windows<ept id="p1">](../../mfc/frame-windows.md)</ept> and <bpt id="p2">[</bpt>Window Objects<ept id="p2">](../../mfc/window-objects.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source>CCmdTarget</source>
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxwin.h</source>
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source>CWnd::accDoDefaultAction</source>
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve">
          <source>Called by the framework to perform the object's default action.</source>
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve">
          <source>Specifies whether the default action to be invoked is that of the object or one of the object's child elements.</source>
        </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve">
          <source>This parameter can be either CHILDID_SELF (to perform the object's default action) or a child ID (to perform the default action of one of the object's child elements).</source>
        </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, a COM error code on failure.</source>
        </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">**</bpt>Return Values<ept id="p1">**</ept> in <bpt id="p2">[</bpt>IAccessible::accDoDefaultAction<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd318470)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source>This function is part of MFC's <bpt id="p1">[</bpt>Active Accessibility<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd373592)</ept> support.</source>
        </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve">
          <source>Override this function in your <ph id="ph1">`CWnd`</ph>-derived class to perform your object's default action.</source>
        </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>IAccessible::accDoDefaultAction<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318470)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve">
          <source>CWnd::accHitTest</source>
        </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the child element or child object at a given point on the screen.</source>
        </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve">
          <source>X-coordinate of the point to be hit tested (in screen units).</source>
        </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve">
          <source>Y-coordinate of the point to be hit tested (in screen units).</source>
        </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve">
          <source>Receives information identifying the object at the point specified by <ph id="ph1">`xLeft`</ph> and <ph id="ph2">`yTop`</ph>.</source>
        </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">*</bpt>pvarID<ept id="p1">*</ept> in <bpt id="p2">[</bpt>IAccessible::accHitTest<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd318471)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, a COM error code on failure.</source>
        </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">**</bpt>Return Values<ept id="p1">**</ept> in <bpt id="p2">**</bpt>IAccessible::accHitTest<ept id="p2">**</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve">
          <source>This function is part of MFC's <bpt id="p1">[</bpt>Active Accessibility<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd373592)</ept> support.</source>
        </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve">
          <source>Override this function in your <ph id="ph1">`CWnd`</ph>-derived class if you have nonwindowed user interface elements (other than windowless ActiveX controls, which MFC handles).</source>
        </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>IAccessible::accHitTest<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318471)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve">
          <source>CWnd::accLocation</source>
        </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the specified object's current screen location.</source>
        </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source>pxLeft</source>
        </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve">
          <source>Receives x-coordinate of the object's upper-left corner (in screen units).</source>
        </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve">
          <source>pyTop</source>
        </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve">
          <source>Receives y-coordinate of the object's upper-left corner (in screen units).</source>
        </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve">
          <source>pcxWidth</source>
        </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve">
          <source>Receives width of the object (in screen units).</source>
        </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve">
          <source>pcyHeight</source>
        </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve">
          <source>Receives height of the object (in screen units).</source>
        </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve">
          <source>Specifies whether the location to be retrieved is that of the object or one of the object's child elements.</source>
        </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve">
          <source>This parameter can be either CHILDID_SELF (to obtain information about the object) or a child ID (to obtain information about the object's child element).</source>
        </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, a COM error code on failure.</source>
        </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">**</bpt>Return Values<ept id="p1">**</ept> in <bpt id="p2">**</bpt>IAccessible::accLocation<ept id="p2">**</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve">
          <source>Override this function in your <ph id="ph1">`CWnd`</ph>-derived class if you have nonwindowed user interface elements (other than windowless ActiveX controls, which MFC handles).</source>
        </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">**</bpt>IAccessible::accLocation<ept id="p1">**</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve">
          <source>CWnd::accNavigate</source>
        </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve">
          <source>Called by the framework to traverse to another user interface element within a container and if possible, retrieve the object.</source>
        </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source>Specifies the direction to navigate.</source>
        </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">`navDir`</ph> in <bpt id="p1">[</bpt>IAccessible::accNavigate<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318473)</ept> in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve">
          <source>Specifies the starting object.</source>
        </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">`varStart`</ph> in <bpt id="p1">**</bpt>IAccessible::accNavigate<ept id="p1">**</ept> in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve">
          <source>pvarEndUpAt</source>
        </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve">
          <source>Receives information about the destination user interface object.</source>
        </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">*</bpt>pvarEnd<ept id="p1">*</ept> in <bpt id="p2">**</bpt>IAccessible::accNavigate<ept id="p2">**</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, a COM error code on failure.</source>
        </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">**</bpt>Return Values<ept id="p1">**</ept> in <bpt id="p2">**</bpt>IAccessible::accNavigate<ept id="p2">**</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve">
          <source>This function is part of MFC's <bpt id="p1">[</bpt>Active Accessibility<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd373592)</ept> support.</source>
        </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve">
          <source>Override this function in your <ph id="ph1">`CWnd`</ph>-derived class if you have nonwindowed user interface elements (other than windowless ActiveX controls, which MFC handles).</source>
        </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>IAccessible::accNavigate<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318473)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve">
          <source>CWnd::accSelect</source>
        </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve">
          <source>Called by the framework to modify the selection or move the keyboard focus of the specified object.</source>
        </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve">
          <source>Specifies how to change the current selection or focus.</source>
        </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">`flagsSelect`</ph> in <bpt id="p1">[</bpt>IAccessible::accSelect<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318474)</ept> in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve">
          <source>Specifies the object to be selected.</source>
        </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve">
          <source>This parameter can be either CHILDID_SELF (to select the object itself) or a child ID (to select one of the object's children).</source>
        </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, a COM error code on failure.</source>
        </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">**</bpt>Return Values<ept id="p1">**</ept> in <bpt id="p2">**</bpt>IAccessible::accSelect<ept id="p2">**</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve">
          <source>This function is part of MFC's <bpt id="p1">[</bpt>Active Accessibility<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd373592)</ept> support.</source>
        </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve">
          <source>Override this function in your <ph id="ph1">`CWnd`</ph>-derived class if you have nonwindowed user interface elements (other than windowless ActiveX controls, which MFC handles).</source>
        </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>IAccessible::accSelect<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318474)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve">
          <source>CWnd::AnimateWindow</source>
        </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve">
          <source>Produces special effects when showing or hiding windows.</source>
        </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve">
          <source>dwTime</source>
        </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve">
          <source>Specifies how long it takes to play the animation, in milliseconds.</source>
        </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve">
          <source>Typically, an animation takes 200 milliseconds to play.</source>
        </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve">
          <source>Specifies the type of animation.</source>
        </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve">
          <source>For a full list of possible values, see <bpt id="p1">[</bpt>AnimateWindow<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632669)</ept>.</source>
        </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve">
          <source>Nonzero if the function succeeds; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the function <bpt id="p1">[</bpt>AnimateWindow<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632669)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve">
          <source>CWnd::ArrangeIconicWindows</source>
        </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve">
          <source>Arranges all the minimized (iconic) child windows.</source>
        </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve">
          <source>The height of one row of icons if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve">
          <source>This member function also arranges icons on the desktop window, which covers the entire screen.</source>
        </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>GetDesktopWindow<ept id="p1">](#cwnd__getdesktopwindow)</ept> member function retrieves a pointer to the desktop window object.</source>
        </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve">
          <source>To arrange iconic MDI child windows in an MDI client window, call <bpt id="p1">[</bpt>CMDIFrameWnd::MDIIconArrange<ept id="p1">](../../mfc/reference/cmdiframewnd-class.md#cmdiframewnd__mdiiconarrange)</ept>.</source>
        </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#66</source>
        </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve">
          <source>CWnd::Attach</source>
        </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve">
          <source>Attaches a Windows window to a <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve">
          <source>Specifies a handle to a Windows window.</source>
        </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve">
          <source>This example shows how to use Attach and Detach to map to the MDI client window.</source>
        </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#67</source>
        </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#68</source>
        </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#69</source>
        </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve">
          <source>CWnd::BeginModalState</source>
        </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve">
          <source>Call this member function to make a frame window modal.</source>
        </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve">
          <source>CWnd::BeginPaint</source>
        </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve">
          <source>Prepares <ph id="ph1">`CWnd`</ph> for painting and fills a <ph id="ph2">`PAINTSTRUCT`</ph> data structure with information about the painting.</source>
        </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve">
          <source>Points to the <bpt id="p1">[</bpt>PAINTSTRUCT<ept id="p1">](../../mfc/reference/paintstruct-structure.md)</ept> structure that is to receive painting information.</source>
        </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve">
          <source>Identifies the device context for <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve">
          <source>The pointer may be temporary and should not be stored beyond the scope of <bpt id="p1">[</bpt>EndPaint<ept id="p1">](#cwnd__endpaint)</ept>.</source>
        </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve">
          <source>The paint structure contains a RECT data structure that has the smallest rectangle that completely encloses the update region and a flag that specifies whether the background has been erased.</source>
        </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve">
          <source>The update region is set by the <bpt id="p1">[</bpt>Invalidate<ept id="p1">](#cwnd__invalidate)</ept>, <bpt id="p2">[</bpt>InvalidateRect<ept id="p2">](#cwnd__invalidaterect)</ept>, or <bpt id="p3">[</bpt>InvalidateRgn<ept id="p3">](#cwnd__invalidatergn)</ept> member functions and by the system after it sizes, moves, creates, scrolls, or performs any other operation that affects the client area.</source>
        </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve">
          <source>If the update region is marked for erasing, <ph id="ph1">`BeginPaint`</ph> sends an <bpt id="p1">[</bpt>WM_ONERASEBKGND<ept id="p1">](#cwnd__onerasebkgnd)</ept> message.</source>
        </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve">
          <source>Do not call the <ph id="ph1">`BeginPaint`</ph> member function except in response to a <bpt id="p1">[</bpt>WM_PAINT<ept id="p1">](#cwnd__onpaint)</ept> message.</source>
        </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve">
          <source>Each call to the <ph id="ph1">`BeginPaint`</ph> member function must have a matching call to the <bpt id="p1">[</bpt>EndPaint<ept id="p1">](#cwnd__endpaint)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve">
          <source>If the caret is in the area to be painted, the <ph id="ph1">`BeginPaint`</ph> member function automatically hides the caret to prevent it from being erased.</source>
        </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#70</source>
        </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve">
          <source>CWnd::BindDefaultProperty</source>
        </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve">
          <source>Binds the calling object's default simple bound property (such as an edit control), as marked in the type library, to the underlying cursor that is defined by the DataSource, UserName, Password, and SQL properties of the data-source control.</source>
        </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve">
          <source>Specifies the DISPID of a property on a data-bound control that is to be bound to a data-source control.</source>
        </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve">
          <source>Specifies the type of the property to be bound — for example, <ph id="ph1">`VT_BSTR`</ph>, <bpt id="p1">**</bpt>VT_VARIANT<ept id="p1">**</ept>, and so on.</source>
        </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve">
          <source>Specifies the name of the column, in the cursor provided by the data-source control, to which the property will be bound.</source>
        </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve">
          <source>Points to the window that hosts the data-source control to which the property will be bound.</source>
        </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`GetDlgItem`</ph> with the resource ID of the DCS's host window to retrieve this pointer.</source>
        </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CWnd`</ph> object on which you call this function must be a data-bound control.</source>
        </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve">
          <source>might be used in the following context:</source>
        </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxDataBinding#1</source>
        </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxDataBinding#2</source>
        </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxDataBinding#3</source>
        </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve">
          <source>CWnd::BindProperty</source>
        </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve">
          <source>Binds a cursor-bound property on a data-bound control (such as a grid control) to a data-source control and registers that relationship with the MFC binding manager.</source>
        </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve">
          <source>dwDispId</source>
        </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve">
          <source>Specifies the DISPID of a property on a data-bound control that is to be bound to a data-source control.</source>
        </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve">
          <source>Points to the window that hosts the data-source control to which the property will be bound.</source>
        </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`GetDlgItem`</ph> with the resource ID of the DCS's host window to retrieve this pointer.</source>
        </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CWnd`</ph> object on which you call this function must be a data-bound control.</source>
        </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve">
          <source>might be used in the following context:</source>
        </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxDataBinding#1</source>
        </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxDataBinding#4</source>
        </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxDataBinding#3</source>
        </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve">
          <source>CWnd::BringWindowToTop</source>
        </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve">
          <source>Brings <ph id="ph1">`CWnd`</ph> to the top of a stack of overlapping windows.</source>
        </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve">
          <source>In addition, <ph id="ph1">`BringWindowToTop`</ph> activates pop-up, top-level, and MDI child windows.</source>
        </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`BringWindowToTop`</ph> member function should be used to uncover any window that is partially or completely obscured by any overlapping windows.</source>
        </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve">
          <source>This function just calls the Win32 <bpt id="p1">[</bpt>BringWindowToTop<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632673\(v=vs.85\).aspx)</ept> function.</source>
        </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>SetWindowPos<ept id="p1">](#cwnd__setwindowpos)</ept> function to change a window's position in the Z-order.</source>
        </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`BringWindowToTop`</ph> function does not change the window style to make it a top-level window.</source>
        </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>What's the difference between HWND_TOP and HWND_TOPMOST<ept id="p1">](http://blogs.msdn.com/b/oldnewthing/archive/2005/11/21/495246.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#71</source>
        </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve">
          <source>CWnd::CalcWindowRect</source>
        </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve">
          <source>Calculates the window rectangle that can contain the specified client rectangle.</source>
        </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve">
          <source>[in, out]</source>
        </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve">
          <source>Pointer to a rectangle structure.</source>
        </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve">
          <source>On input, this structure contains the client rectangle.</source>
        </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve">
          <source>After the method is finished, this structure contains the window rectangle that can contain the specified client rectangle.</source>
        </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`CWnd::adjustBorder`</ph> to calculate window coordinates without the <ph id="ph2">`WS_EX_CLIENTEDGE`</ph> style; otherwise, use <ph id="ph3">`CWnd::adjustOutside`</ph>.</source>
        </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve">
          <source>The size of the calculated window rectangle does not include space for a menu bar.</source>
        </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve">
          <source>For more usage restrictions, see <bpt id="p1">[</bpt>AdjustWindowRectEx<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632667)</ept>.</source>
        </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#72</source>
        </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve">
          <source>CWnd::CancelToolTips</source>
        </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve">
          <source>Call this member function to remove a tool tip from the screen if a tool tip is currently displayed.</source>
        </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve">
          <source>bKeys</source>
        </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>TRUE<ept id="p1">**</ept> to cancel tool tips when a key is pressed and set the status bar text to the default; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve">
          <source>Using this member function has no effect on tool tips managed by your code.</source>
        </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve">
          <source>It only affects the tool tip control managed by <bpt id="p1">[</bpt>CWnd::EnableToolTips<ept id="p1">](#cwnd__enabletooltips)</ept>.</source>
        </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#73</source>
        </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve">
          <source>CWnd::CenterWindow</source>
        </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve">
          <source>Centers a window relative to its parent.</source>
        </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve">
          <source>Pointer to an alternate window relative to which it will be centered (other than the parent window).</source>
        </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve">
          <source>Usually called from <bpt id="p1">[</bpt>CDialog::OnInitDialog<ept id="p1">](../../mfc/reference/cdialog-class.md#cdialog__oninitdialog)</ept> to center dialog boxes relative to the main window of the application.</source>
        </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve">
          <source>By default, the function centers child windows relative to their parent window, and pop-up windows relative to their owner.</source>
        </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve">
          <source>If the pop-up window is not owned, it is centered relative to the screen.</source>
        </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve">
          <source>To center a window relative to a specific window which is not the owner or parent, the <ph id="ph1">`pAlternateOwner`</ph> parameter may be set to a valid window.</source>
        </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve">
          <source>To force centering relative to the screen, pass the value returned by <bpt id="p1">[</bpt>CWnd::GetDesktopWindow<ept id="p1">](#cwnd__getdesktopwindow)</ept> as <ph id="ph1">`pAlternateOwner`</ph>.</source>
        </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#74</source>
        </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve">
          <source>CWnd::ChangeClipboardChain</source>
        </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve">
          <source>Removes <ph id="ph1">`CWnd`</ph> from the chain of Clipboard viewers and makes the window specified by <ph id="ph2">`hWndNext`</ph> the descendant of the <ph id="ph3">`CWnd`</ph> ancestor in the chain.</source>
        </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve">
          <source>Identifies the window that follows <ph id="ph1">`CWnd`</ph> in the Clipboard-viewer chain.</source>
        </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve">
          <source>CWnd::CheckDlgButton</source>
        </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve">
          <source>Selects (places a check mark next to) or clears (removes a check mark from) a button, or it changes the state of a three-state button.</source>
        </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve">
          <source>Specifies the button to be modified.</source>
        </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve">
          <source>Specifies the action to take.</source>
        </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nCheck`</ph> is nonzero, the <ph id="ph2">`CheckDlgButton`</ph> member function places a check mark next to the button; if 0, the check mark is removed.</source>
        </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve">
          <source>For three-state buttons, if <ph id="ph1">`nCheck`</ph> is 2, the button state is indeterminate.</source>
        </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CheckDlgButton`</ph> function sends a <bpt id="p1">[</bpt>BM_SETCHECK<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775989)</ept> message to the specified button.</source>
        </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#75</source>
        </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve">
          <source>CWnd::CheckRadioButton</source>
        </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve">
          <source>Selects (adds a check mark to) a given radio button in a group and clears (removes a check mark from) all other radio buttons in the group.</source>
        </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve">
          <source>Specifies the integer identifier of the first radio button in the group.</source>
        </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve">
          <source>Specifies the integer identifier of the last radio button in the group.</source>
        </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve">
          <source>Specifies the integer identifier of the radio button to be checked.</source>
        </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CheckRadioButton`</ph> function sends a <bpt id="p1">[</bpt>BM_SETCHECK<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775989)</ept> message to the specified radio button.</source>
        </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#76</source>
        </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve">
          <source>CWnd::ChildWindowFromPoint</source>
        </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve">
          <source>Determines which, if any, of the child windows belonging to <ph id="ph1">`CWnd`</ph> contains the specified point.</source>
        </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve">
          <source>Specifies the client coordinates of the point to be tested.</source>
        </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve">
          <source>nflags</source>
        </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve">
          <source>Specifies which child windows to skip.</source>
        </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve">
          <source>This parameter can be a combination of the following values:</source>
        </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve">
          <source>CWP_ALL</source>
        </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve">
          <source>Do not skip any child windows</source>
        </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve">
          <source>CWP_SKIPINVISIBLE</source>
        </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve">
          <source>Skip invisible child windows</source>
        </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve">
          <source>CWP_SKIPDISABLED</source>
        </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve">
          <source>Skip disabled child windows</source>
        </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve">
          <source>CWP_SKIPTRANSPARENT</source>
        </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve">
          <source>Skip transparent child windows</source>
        </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve">
          <source>Identifies the child window that contains the point.</source>
        </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve">
          <source>It is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if the given point lies outside of the client area.</source>
        </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve">
          <source>If the point is within the client area but is not contained within any child window, <ph id="ph1">`CWnd`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve">
          <source>This member function will return a hidden or disabled child window that contains the specified point.</source>
        </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve">
          <source>More than one window may contain the given point.</source>
        </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve">
          <source>However, this function returns only the <ph id="ph1">`CWnd`</ph>* of the first window encountered that contains the point.</source>
        </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CWnd`</ph>* that is returned may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#77</source>
        </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve">
          <source>CWnd::ClientToScreen</source>
        </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve">
          <source>Converts the client coordinates of a given point or rectangle on the display to screen coordinates.</source>
        </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>POINT structure<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> or <ph id="ph1">`CPoint`</ph> object that contains the client coordinates to be converted.</source>
        </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>RECT structure<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> or <ph id="ph1">`CRect`</ph> object that contains the client coordinates to be converted.</source>
        </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ClientToScreen`</ph> member function uses the client coordinates in the <bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> or <ph id="ph2">`RECT`</ph> structure or the <ph id="ph3">`CPoint`</ph> or <ph id="ph4">`CRect`</ph> object pointed to by <ph id="ph5">`lpPoint`</ph> or <ph id="ph6">`lpRect`</ph> to compute new screen coordinates; it then replaces the coordinates in the structure with the new coordinates.</source>
        </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve">
          <source>The new screen coordinates are relative to the upper-left corner of the system display.</source>
        </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ClientToScreen`</ph> member function assumes that the given point or rectangle is in client coordinates.</source>
        </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#78</source>
        </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve">
          <source>CWnd::CloseWindow</source>
        </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve">
          <source>Minimizes the window.</source>
        </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the function <bpt id="p1">[</bpt>CloseWindow<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632678)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve">
          <source>CWnd::ContinueModal</source>
        </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve">
          <source>This member function is called by <bpt id="p1">[</bpt>RunModalLoop<ept id="p1">](#cwnd__runmodalloop)</ept> to determine when the modal state should be exited.</source>
        </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve">
          <source>Nonzero if modal loop is to be continued; 0 when <bpt id="p1">[</bpt>EndModalLoop<ept id="p1">](#cwnd__endmodalloop)</ept> is called.</source>
        </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve">
          <source>By default, it returns non-zero until <ph id="ph1">`EndModalLoop`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve">
          <source>CWnd::Create</source>
        </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve">
          <source>Creates the specified child window and attaches it to the <bpt id="p1">[</bpt>CWnd<ept id="p1">](../../mfc/reference/cwnd-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve">
          <source>Pointer to a null-terminated string that contains the name of a registered system window class; or the name of a predefined system window class.</source>
        </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve">
          <source>Pointer to a null-terminated string that contains the window display name; otherwise <ph id="ph1">`NULL`</ph> for no window display name.</source>
        </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve">
          <source>Bitwise combination (OR) of <bpt id="p1">[</bpt>window styles<ept id="p1">](../../mfc/reference/window-styles.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WS_POPUP`</ph> option is not a valid style.</source>
        </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve">
          <source>The size and location of the window relative to the top-left corner of the parent window.</source>
        </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve">
          <source>Pointer to the parent window.</source>
        </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve">
          <source>ID of the window.</source>
        </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>CCreateContext<ept id="p1">](../../mfc/reference/ccreatecontext-structure.md)</ept> structure that is used to customize the document-view architecture for the application.</source>
        </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve">
          <source>if the method was successful; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve">
          <source>now assigns the hMenu member of its <ph id="ph1">`CREATESTRUCT`</ph> parameter to the <ph id="ph2">`this`</ph> pointer if the menu is <ph id="ph3">`NULL`</ph> and the style contains <ph id="ph4">`WS_CHILD`</ph>.</source>
        </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve">
          <source>For proper functionality, ensure that your dialog control has an ID that is not <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve">
          <source>This change fixes a crash in managed/native interop scenarios.</source>
        </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`TRACE`</ph> statement in <ph id="ph2">`CWnd::Create`</ph> alerts the developer of the problem.</source>
        </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>AfxRegisterWndClass<ept id="p1">](../../mfc/reference/application-information-and-management.md#afxregisterwndclass)</ept> function to register window classes.</source>
        </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve">
          <source>User defined window classes are available in the module where they are registered.</source>
        </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CWnd::OnCreate<ept id="p1">](#cwnd__oncreate)</ept> method is called before the <ph id="ph1">`Create`</ph> method returns, and before the window becomes visible.</source>
        </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#79</source>
        </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve">
          <source>CWnd::CreateAccessibleProxy</source>
        </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve">
          <source>Creates an Active Accessibility proxy for the specified object.</source>
        </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve">
          <source>Identifies the object accessed by the Active Accessibility proxy.</source>
        </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve">
          <source>Can be one of the following values</source>
        </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve">
          <source>OBJID_CLIENT</source>
        </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve">
          <source>Refers to the window's client area.</source>
        </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve">
          <source>Provides additional message-dependent information.</source>
        </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve">
          <source>A pointer to an <bpt id="p1">**</bpt>LRESULT<ept id="p1">**</ept> that stores the result code.</source>
        </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve">
          <source>Creates an Active Accessibility proxy for the specified object.</source>
        </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve">
          <source>CWnd::CreateCaret</source>
        </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve">
          <source>Creates a new shape for the system caret and claims ownership of the caret.</source>
        </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve">
          <source>Identifies the bitmap that defines the caret shape.</source>
        </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve">
          <source>The bitmap must have previously been created by the <bpt id="p1">[</bpt>CBitmap::CreateBitmap<ept id="p1">](../../mfc/reference/cbitmap-class.md#cbitmap__createbitmap)</ept> member function, the <bpt id="p2">[</bpt>CreateDIBitmap<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd183491)</ept> Windows function, or the <bpt id="p3">[</bpt>CBitmap::LoadBitmap<ept id="p3">](../../mfc/reference/cbitmap-class.md#cbitmap__loadbitmap)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve">
          <source>automatically destroys the previous caret shape, if any, regardless of which window owns the caret.</source>
        </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve">
          <source>Once created, the caret is initially hidden.</source>
        </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve">
          <source>To show the caret, the <bpt id="p1">[</bpt>ShowCaret<ept id="p1">](#cwnd__showcaret)</ept> member function must be called.</source>
        </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve">
          <source>The system caret is a shared resource.</source>
        </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve">
          <source>should create a caret only when it has the input focus or is active.</source>
        </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve">
          <source>It should destroy the caret before it loses the input focus or becomes inactive.</source>
        </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#80</source>
        </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve">
          <source>CWnd::CreateControl</source>
        </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve">
          <source>Use this member function to create an ActiveX control that will be represented in the MFC program by a <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve">
          <source>pszClass</source>
        </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve">
          <source>This string may contain the OLE "short name" (ProgID) for the class, e.g., "CIRC3.Circ3Ctrl.1".</source>
        </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve">
          <source>The name needs to match the same name registered by the control.</source>
        </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve">
          <source>Alternatively, the string may contain the string form of a <bpt id="p1">**</bpt>CLSID<ept id="p1">**</ept>, contained in braces, e.g., "{9DBAFCCF-592F-101B-85CE-00608CEC297B}".</source>
        </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve">
          <source>In either case, <ph id="ph1">`CreateControl`</ph> converts the string to the corresponding class ID.</source>
        </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve">
          <source>pszWindowName</source>
        </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve">
          <source>A pointer to the text to be displayed in the control.</source>
        </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve">
          <source>Sets the value of the control's Caption or Text property (if any).</source>
        </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the control's Caption or Text property is not changed.</source>
        </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve">
          <source>Windows styles.</source>
        </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve">
          <source>The available styles are listed under Remarks.</source>
        </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve">
          <source>Specifies the control's size and position.</source>
        </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve">
          <source>It can be either a <bpt id="p1">[</bpt>CRect<ept id="p1">](../../atl-mfc-shared/reference/crect-class.md)</ept> object or a <bpt id="p2">[</bpt>RECT structure<ept id="p2">](../../mfc/reference/rect-structure1.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>POINT structure<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> or <ph id="ph1">`CPoint`</ph> object that contains the upper left corner of the control.</source>
        </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>SIZE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure or <ph id="ph1">`CSize`</ph> object that contains the control's size</source>
        </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve">
          <source>Specifies the control's parent window.</source>
        </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve">
          <source>It must not be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve">
          <source>Specifies the control's ID.</source>
        </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CFile<ept id="p1">](../../mfc/reference/cfile-class.md)</ept> containing the persistent state for the control.</source>
        </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, indicating that the control initializes itself without restoring its state from any persistent storage.</source>
        </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve">
          <source>If not <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, it should be a pointer to a <ph id="ph1">`CFile`</ph>-derived object which contains the control's persistent data, in the form of either a stream or a storage.</source>
        </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve">
          <source>This data could have been saved in a previous activation of the client.</source>
        </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CFile`</ph> can contain other data, but must have its read-write pointer set to the first byte of persistent data at the time of the call to <ph id="ph2">`CreateControl`</ph>.</source>
        </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve">
          <source>Indicates whether the data in <ph id="ph1">`pPersist`</ph> should be interpreted as IStorage or IStream data.</source>
        </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve">
          <source>If the data in <ph id="ph1">`pPersist`</ph> is a storage, <ph id="ph2">`bStorage`</ph> should be <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve">
          <source>If the data in <ph id="ph1">`pPersist`</ph> is a stream, <ph id="ph2">`bStorage`</ph> should be <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>bstrLicKe<ept id="p1">*</ept>y</source>
        </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve">
          <source>Optional license key data.</source>
        </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve">
          <source>This data is needed only for creating controls that require a run-time license key.</source>
        </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve">
          <source>If the control supports licensing, you must provide a license key for the creation of the control to succeed.</source>
        </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve">
          <source>The unique class ID of the control.</source>
        </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve">
          <source>is a direct analog of the <bpt id="p1">[</bpt>CWnd::Create<ept id="p1">](#cwnd__create)</ept> function, which creates the window for a <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve">
          <source>creates an ActiveX control instead of an ordinary window.</source>
        </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve">
          <source>Only a subset of the Windows <ph id="ph1">`dwStyle`</ph> flags are supported for <ph id="ph2">`CreateControl`</ph>:</source>
        </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_VISIBLE<ept id="p1">**</ept> Creates a window that is initially visible.</source>
        </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve">
          <source>Required if you want the control to be visible immediately, like ordinary windows.</source>
        </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_DISABLED<ept id="p1">**</ept> Creates a window that is initially disabled.</source>
        </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve">
          <source>A disabled window cannot receive input from the user.</source>
        </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve">
          <source>Can be set if the control has an Enabled property.</source>
        </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve">
          <source>Creates a window with a thin-line border.</source>
        </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve">
          <source>Can be set if control has a BorderStyle property.</source>
        </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_GROUP<ept id="p1">**</ept> Specifies the first control of a group of controls.</source>
        </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve">
          <source>The user can change the keyboard focus from one control in the group to the next by using the direction keys.</source>
        </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve">
          <source>All controls defined with the <bpt id="p1">**</bpt>WS_GROUP<ept id="p1">**</ept> style after the first control belong to the same group.</source>
        </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve">
          <source>The next control with the <bpt id="p1">**</bpt>WS_GROUP<ept id="p1">**</ept> style ends the group and starts the next group.</source>
        </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_TABSTOP<ept id="p1">**</ept> Specifies a control that can receive the keyboard focus when the user presses the TAB key.</source>
        </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve">
          <source>Pressing the TAB key changes the keyboard focus to the next control of the <bpt id="p1">**</bpt>WS_TABSTOP<ept id="p1">**</ept> style.</source>
        </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#81</source>
        </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve">
          <source>CWnd::CreateEx</source>
        </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve">
          <source>Creates the specified window and attaches it to the <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve">
          <source>Bitwise combination (OR) of <bpt id="p1">[</bpt>extended window styles<ept id="p1">](../../mfc/reference/extended-window-styles.md)</ept>; otherwise <ph id="ph1">`NULL`</ph> for the default extended window style.</source>
        </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve">
          <source>Pointer to a null-terminated string that contains the name of a registered system window class; or the name of a predefined system window class.</source>
        </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve">
          <source>Pointer to a null-terminated string that contains the window display name; otherwise <ph id="ph1">`NULL`</ph> for no window display name.</source>
        </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve">
          <source>Bitwise combination (OR) of <bpt id="p1">[</bpt>window styles<ept id="p1">](../../mfc/reference/window-styles.md)</ept>; otherwise <ph id="ph1">`NULL`</ph> for the default window style.</source>
        </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve">
          <source>The initial horizontal distance of the window from the left side of the screen or the parent window.</source>
        </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve">
          <source>The initial vertical distance of the window from the top of the screen or the parent window.</source>
        </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve">
          <source>The width, in pixels, of the window.</source>
        </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve">
          <source>The height, in pixels, of the window.</source>
        </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve">
          <source>For a child window, the handle to the parent window; otherwise, the handle of the owner window if the window has an owner.</source>
        </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve">
          <source>For a child window, the window ID; otherwise, the ID of a menu for the window.</source>
        </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve">
          <source>Pointer to user data that is passed to the <bpt id="p1">[</bpt>CWnd::OnCreate<ept id="p1">](#cwnd__oncreate)</ept> method in the <ph id="ph1">`lpCreateParams`</ph> field.</source>
        </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve">
          <source>The size and location of the window relative to the screen or the parent window.</source>
        </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve">
          <source>For a child window, pointer to the parent window; otherwise, pointer to the owner window if the window has an owner.</source>
        </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve">
          <source>For a child window, the window ID; otherwise, the ID of a menu for the window.</source>
        </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve">
          <source>if the method was successful; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve">
          <source>now assigns the hMenu member of its <ph id="ph1">`CREATESTRUCT`</ph> parameter to the <ph id="ph2">`this`</ph> pointer if the menu is <ph id="ph3">`NULL`</ph> and the style contains <ph id="ph4">`WS_CHILD`</ph>.</source>
        </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve">
          <source>For proper functionality, ensure that your dialog control has an ID that is not <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve">
          <source>This change fixes a crash in managed/native interop scenarios.</source>
        </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`TRACE`</ph> statement in <ph id="ph2">`CWnd::Create`</ph> alerts the developer of the problem.</source>
        </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve">
          <source>The default extended window style is <ph id="ph1">`WS_EX_LEFT`</ph>.</source>
        </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve">
          <source>The default window style is <ph id="ph1">`WS_OVERLAPPED`</ph>.</source>
        </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>AfxRegisterWndClass<ept id="p1">](../../mfc/reference/application-information-and-management.md#afxregisterwndclass)</ept> function to register window classes.</source>
        </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve">
          <source>User defined window classes are available in the module where they are registered.</source>
        </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve">
          <source>Dimensions for child windows are relative to the top-left corner of the client area of the parent window.</source>
        </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve">
          <source>Dimensions for top-level windows are relative to the top-left corner of the screen.</source>
        </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CWnd::OnCreate<ept id="p1">](#cwnd__oncreate)</ept> method is called before the <ph id="ph1">`CreateEx`</ph> method returns, and before the window becomes visible.</source>
        </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#82</source>
        </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve">
          <source>CWnd::CreateGrayCaret</source>
        </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve">
          <source>Creates a gray rectangle for the system caret and claims ownership of the caret.</source>
        </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve">
          <source>Specifies the width of the caret (in logical units).</source>
        </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve">
          <source>If this parameter is 0, the width is set to the system-defined window-border width.</source>
        </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve">
          <source>Specifies the height of the caret (in logical units).</source>
        </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve">
          <source>If this parameter is 0, the height is set to the system-defined window-border height.</source>
        </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve">
          <source>The caret shape can be a line or a block.</source>
        </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve">
          <source>The parameters <ph id="ph1">`nWidth`</ph> and <ph id="ph2">`nHeight`</ph> specify the caret's width and height (in logical units); the exact width and height (in pixels) depend on the mapping mode.</source>
        </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve">
          <source>The system's window-border width or height can be retrieved by the <bpt id="p1">[</bpt>GetSystemMetrics<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724385)</ept> Windows function with the <bpt id="p2">**</bpt>SM_CXBORDER<ept id="p2">**</ept> and <bpt id="p3">**</bpt>SM_CYBORDER<ept id="p3">**</ept> indexes.</source>
        </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve">
          <source>Using the window-border width or height ensures that the caret will be visible on a high-resolution display.</source>
        </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CreateGrayCaret`</ph> member function automatically destroys the previous caret shape, if any, regardless of which window owns the caret.</source>
        </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve">
          <source>Once created, the caret is initially hidden.</source>
        </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve">
          <source>To show the caret, the <bpt id="p1">[</bpt>ShowCaret<ept id="p1">](#cwnd__showcaret)</ept> member function must be called.</source>
        </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve">
          <source>The system caret is a shared resource.</source>
        </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve">
          <source>should create a caret only when it has the input focus or is active.</source>
        </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve">
          <source>It should destroy the caret before it loses the input focus or becomes inactive.</source>
        </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#83</source>
        </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve">
          <source>CWnd::CreateSolidCaret</source>
        </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve">
          <source>Creates a solid rectangle for the system caret and claims ownership of the caret.</source>
        </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve">
          <source>Specifies the width of the caret (in logical units).</source>
        </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve">
          <source>If this parameter is 0, the width is set to the system-defined window-border width.</source>
        </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve">
          <source>Specifies the height of the caret (in logical units).</source>
        </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve">
          <source>If this parameter is 0, the height is set to the system-defined window-border height.</source>
        </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve">
          <source>The caret shape can be a line or block.</source>
        </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve">
          <source>The parameters <ph id="ph1">`nWidth`</ph> and <ph id="ph2">`nHeight`</ph> specify the caret's width and height (in logical units); the exact width and height (in pixels) depend on the mapping mode.</source>
        </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve">
          <source>The system's window-border width or height can be retrieved by the <bpt id="p1">[</bpt>GetSystemMetrics<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724385)</ept> Windows function with the <bpt id="p2">**</bpt>SM_CXBORDER<ept id="p2">**</ept> and <bpt id="p3">**</bpt>SM_CYBORDER<ept id="p3">**</ept> indexes.</source>
        </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve">
          <source>Using the window-border width or height ensures that the caret will be visible on a high-resolution display.</source>
        </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CreateSolidCaret`</ph> member function automatically destroys the previous caret shape, if any, regardless of which window owns the caret.</source>
        </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve">
          <source>Once created, the caret is initially hidden.</source>
        </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve">
          <source>To show the caret, the <bpt id="p1">[</bpt>ShowCaret<ept id="p1">](#cwnd__showcaret)</ept> member function must be called.</source>
        </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve">
          <source>The system caret is a shared resource.</source>
        </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve">
          <source>should create a caret only when it has the input focus or is active.</source>
        </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve">
          <source>It should destroy the caret before it loses the input focus or becomes inactive.</source>
        </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#84</source>
        </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve">
          <source>CWnd::CWnd</source>
        </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve">
          <source>The Windows window is not created and attached until the <bpt id="p1">[</bpt>CreateEx<ept id="p1">](#cwnd__createex)</ept> or <bpt id="p2">[</bpt>Create<ept id="p2">](#cwnd__create)</ept> member function is called.</source>
        </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve">
          <source>CWnd::Default</source>
        </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve">
          <source>Calls the default window procedure.</source>
        </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve">
          <source>Depends on the message sent.</source>
        </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve">
          <source>The default window procedure provides default processing for any window message that an application does not process.</source>
        </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve">
          <source>This member function ensures that every message is processed.</source>
        </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#85</source>
        </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve">
          <source>CWnd::DefWindowProc</source>
        </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve">
          <source>Calls the default window procedure, which provides default processing for any window message that an application does not process.</source>
        </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve">
          <source>Specifies the Windows message to be processed.</source>
        </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve">
          <source>Specifies additional message-dependent information.</source>
        </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve">
          <source>Specifies additional message-dependent information.</source>
        </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve">
          <source>Depends on the message sent.</source>
        </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve">
          <source>This member function ensures that every message is processed.</source>
        </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve">
          <source>It should be called with the same parameters as those received by the window procedure.</source>
        </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve">
          <source>CWnd::DeleteTempMap</source>
        </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve">
          <source>Called automatically by the idle time handler of the <ph id="ph1">`CWinApp`</ph> object.</source>
        </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve">
          <source>Deletes any temporary <ph id="ph1">`CWnd`</ph> objects created by the <ph id="ph2">`FromHandle`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#86</source>
        </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve">
          <source>CWnd::DestroyWindow</source>
        </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve">
          <source>Destroys the Windows window attached to the <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve">
          <source>Nonzero if the window is destroyed; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DestroyWindow`</ph> member function sends appropriate messages to the window to deactivate it and remove the input focus.</source>
        </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve">
          <source>It also destroys the window's menu, flushes the application queue, destroys outstanding timers, removes Clipboard ownership, and breaks the Clipboard-viewer chain if <ph id="ph1">`CWnd`</ph> is at the top of the viewer chain.</source>
        </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve">
          <source>It sends <bpt id="p1">[</bpt>WM_DESTROY<ept id="p1">](#cwnd__ondestroy)</ept> and <bpt id="p2">[</bpt>WM_NCDESTROY<ept id="p2">](#cwnd__onncdestroy)</ept> messages to the window.</source>
        </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve">
          <source>It does not destroy the <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve">
          <source>is a place holder for performing cleanup.</source>
        </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`DestroyWindow`</ph> is a virtual function, it is shown in any <ph id="ph2">`CWnd`</ph>-derived class in Class View.</source>
        </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve">
          <source>But even if you override this function in your <ph id="ph1">`CWnd`</ph>-derived class, <ph id="ph2">`DestroyWindow`</ph> is not necessarily called.</source>
        </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`DestroyWindow`</ph> is not called in the MFC code, then you have to explicitly call it in your own code if you want it to be called.</source>
        </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve">
          <source>Assume, for example, you have overridden <ph id="ph1">`DestroyWindow`</ph> in a <ph id="ph2">`CView`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve">
          <source>Since MFC source code does not call <ph id="ph1">`DestroyWindow`</ph> in any of its <ph id="ph2">`CFrameWnd`</ph>-derived classes, your overridden <ph id="ph3">`DestroyWindow`</ph> will not be called unless you call it explicitly.</source>
        </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve">
          <source>If the window is the parent of any windows, these child windows are automatically destroyed when the parent window is destroyed.</source>
        </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DestroyWindow`</ph> member function destroys child windows first and then the window itself.</source>
        </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DestroyWindow`</ph> member function also destroys modeless dialog boxes created by <bpt id="p1">[</bpt>CDialog::Create<ept id="p1">](../../mfc/reference/cdialog-class.md#cdialog__create)</ept>.</source>
        </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`CWnd`</ph> being destroyed is a child window and does not have the <bpt id="p1">[</bpt>WS_EX_NOPARENTNOTIFY<ept id="p1">](../../mfc/reference/extended-window-styles.md)</ept> style set, then the <bpt id="p2">[</bpt>WM_PARENTNOTIFY <ept id="p2">](https://msdn.microsoft.com/library/ms632638.aspx)</ept>       message is sent to the parent.</source>
        </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#87</source>
        </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve">
          <source>CWnd::Detach</source>
        </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve">
          <source>Detaches a Windows handle from a <ph id="ph1">`CWnd`</ph> object and returns the handle.</source>
        </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`HWND`</ph> to the Windows object.</source>
        </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CWnd::Attach<ept id="p1">](#cwnd__attach)</ept>.</source>
        </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve">
          <source>CWnd::DlgDirList</source>
        </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve">
          <source>Fills a list box with a file or directory listing.</source>
        </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that contains the path or filename.</source>
        </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve">
          <source>modifies this string, which should be long enough to contain the modifications.</source>
        </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve">
          <source>For more information, see the following "Remarks" section.</source>
        </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve">
          <source>Specifies the identifier of a list box.</source>
        </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nIDListBox`</ph> is 0, <ph id="ph2">`DlgDirList`</ph> assumes that no list box exists and does not attempt to fill one.</source>
        </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve">
          <source>Specifies the identifier of the static-text control used to display the current drive and directory.</source>
        </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nIDStaticPath`</ph> is 0, <ph id="ph2">`DlgDirList`</ph> assumes that no such text control is present.</source>
        </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve">
          <source>Specifies the attributes of the files to be displayed.</source>
        </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve">
          <source>It can be any combination of the following values:</source>
        </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DDL_READWRITE<ept id="p1">**</ept> Read-write data files with no additional attributes.</source>
        </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DDL_READONLY<ept id="p1">**</ept> Read-only files.</source>
        </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DDL_HIDDEN<ept id="p1">**</ept> Hidden files.</source>
        </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DDL_SYSTEM<ept id="p1">**</ept> System files.</source>
        </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DDL_DIRECTORY<ept id="p1">**</ept> Directories.</source>
        </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DDL_ARCHIVE<ept id="p1">**</ept> Archives.</source>
        </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DDL_POSTMSGS LB_DIR<ept id="p1">**</ept> flag.</source>
        </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>LB_DIR<ept id="p1">**</ept> flag is set, Windows places the messages generated by <ph id="ph1">`DlgDirList`</ph> in the application's queue; otherwise, they are sent directly to the dialog-box procedure.</source>
        </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DDL_DRIVES<ept id="p1">**</ept> Drives.</source>
        </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>DDL_DRIVES<ept id="p1">**</ept> flag is set, the <bpt id="p2">**</bpt>DDL_EXCLUSIVE<ept id="p2">**</ept> flag is set automatically.</source>
        </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve">
          <source>Therefore, to create a directory listing that includes drives and files, you must call <ph id="ph1">`DlgDirList`</ph> twice: once with the <bpt id="p1">**</bpt>DDL_DRIVES<ept id="p1">**</ept> flag set and once with the flags for the rest of the list.</source>
        </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DDL_EXCLUSIVE<ept id="p1">**</ept> Exclusive bit.</source>
        </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve">
          <source>If the exclusive bit is set, only files of the specified type are listed; otherwise normal files and files of the specified type are listed.</source>
        </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve">
          <source>sends <bpt id="p1">[</bpt>LB_RESETCONTENT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb761325)</ept> and <bpt id="p2">[</bpt>LB_DIR<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb775185)</ept> messages to the list box.</source>
        </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve">
          <source>It fills the list box specified by <ph id="ph1">`nIDListBox`</ph> with the names of all files that match the path given by <ph id="ph2">`lpPathSpec`</ph>.</source>
        </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpPathSpec`</ph> parameter has the following form:</source>
        </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">`drive`</ph> is a drive letter, <ph id="ph2">`directory`</ph> is a valid directory name, and <bpt id="p1">*</bpt>filename<ept id="p1">*</ept> is a valid filename that must contain at least one wildcard.</source>
        </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve">
          <source>The wildcards are a question mark ( ****), which means match any character, and an asterisk ( <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept>), meaning match any number of characters.</source>
        </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve">
          <source>If you specify a 0-length string for <ph id="ph1">`lpPathSpec`</ph>, or if you specify only a directory name but do not include any file specification, the string will be changed to "*.<ph id="ph2">\*</ph>".</source>
        </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpPathSpec`</ph> includes a drive and/or directory name, the current drive and directory are changed to the designated drive and directory before the list box is filled.</source>
        </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve">
          <source>The text control identified by <ph id="ph1">`nIDStaticPath`</ph> is also updated with the new drive and/or directory name.</source>
        </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve">
          <source>After the list box is filled, <ph id="ph1">`lpPathSpec`</ph> is updated by removing the drive and/or directory portion of the path.</source>
        </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#88</source>
        </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve">
          <source>CWnd::DlgDirListComboBox</source>
        </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve">
          <source>Fills the list box of a combo box with a file or directory listing.</source>
        </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that contains the path or filename.</source>
        </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve">
          <source>modifies this string, so this data should not be in the form of a string literal.</source>
        </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve">
          <source>See the following "Remarks" section.</source>
        </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve">
          <source>Specifies the identifier of a combo box in a dialog box.</source>
        </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nIDComboBox`</ph> is 0, <ph id="ph2">`DlgDirListComboBox`</ph> assumes that no combo box exists and does not attempt to fill one.</source>
        </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve">
          <source>Specifies the identifier of the static-text control used to display the current drive and directory.</source>
        </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nIDStaticPath`</ph> is 0, <ph id="ph2">`DlgDirListComboBox`</ph> assumes that no such text control is present.</source>
        </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve">
          <source>Specifies DOS file attributes of the files to be displayed.</source>
        </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve">
          <source>It can be any combination of the following values:</source>
        </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DDL_READWRITE<ept id="p1">**</ept> Read-write data files with no additional attributes.</source>
        </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DDL_READONLY<ept id="p1">**</ept> Read-only files.</source>
        </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DDL_HIDDEN<ept id="p1">**</ept> Hidden files.</source>
        </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DDL_SYSTEM<ept id="p1">**</ept> System files.</source>
        </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DDL_DIRECTORY<ept id="p1">**</ept> Directories.</source>
        </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DDL_ARCHIVE<ept id="p1">**</ept> Archives.</source>
        </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DDL_POSTMSGS CB_DIR<ept id="p1">**</ept> flag.</source>
        </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>CB_DIR<ept id="p1">**</ept> flag is set, Windows places the messages generated by <ph id="ph1">`DlgDirListComboBox`</ph> in the application's queue; otherwise, they are sent directly to the dialog-box procedure.</source>
        </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DDL_DRIVES<ept id="p1">**</ept> Drives.</source>
        </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>DDL_DRIVES<ept id="p1">**</ept> flag is set, the <bpt id="p2">**</bpt>DDL_EXCLUSIVE<ept id="p2">**</ept> flag is set automatically.</source>
        </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve">
          <source>Therefore, to create a directory listing that includes drives and files, you must call <ph id="ph1">`DlgDirListComboBox`</ph> twice: once with the <bpt id="p1">**</bpt>DDL_DRIVES<ept id="p1">**</ept> flag set and once with the flags for the rest of the list.</source>
        </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DDL_EXCLUSIVE<ept id="p1">**</ept> Exclusive bit.</source>
        </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve">
          <source>If the exclusive bit is set, only files of the specified type are listed; otherwise normal files and files of the specified type are listed.</source>
        </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve">
          <source>Specifies the outcome of the function.</source>
        </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve">
          <source>It is nonzero if a listing was made, even an empty listing.</source>
        </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve">
          <source>A 0 return value implies that the input string did not contain a valid search path.</source>
        </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve">
          <source>sends <bpt id="p1">[</bpt>CB_RESETCONTENT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775878)</ept> and <bpt id="p2">[</bpt>CB_DIR<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb775832)</ept> messages to the combo box.</source>
        </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve">
          <source>It fills the list box of the combo box specified by <ph id="ph1">`nIDComboBox`</ph> with the names of all files that match the path given by <ph id="ph2">`lpPathSpec`</ph>.</source>
        </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpPathSpec`</ph> parameter has the following form:</source>
        </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">`drive`</ph> is a drive letter, <ph id="ph2">`directory`</ph> is a valid directory name, and <bpt id="p1">*</bpt>filename<ept id="p1">*</ept> is a valid filename that must contain at least one wildcard.</source>
        </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve">
          <source>The wildcards are a question mark ( ****), which means match any character, and an asterisk ( <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept>), which means match any number of characters.</source>
        </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve">
          <source>If you specify a zero-length string for <ph id="ph1">`lpPathSpec`</ph>, the current directory will be used and <ph id="ph2">`lpPathSpec`</ph> will not be modified.</source>
        </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve">
          <source>If you specify only a directory name but do not include any file specification, the string will be changed to "*".</source>
        </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpPathSpec`</ph> includes a drive and/or directory name, the current drive and directory are changed to the designated drive and directory before the list box is filled.</source>
        </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve">
          <source>The text control identified by <ph id="ph1">`nIDStaticPath`</ph> is also updated with the new drive and/or directory name.</source>
        </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve">
          <source>After the combo-box list box is filled, <ph id="ph1">`lpPathSpec`</ph> is updated by removing the drive and/or directory portion of the path.</source>
        </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#89</source>
        </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve">
          <source>CWnd::DlgDirSelect</source>
        </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve">
          <source>Retrieves the current selection from a list box.</source>
        </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve">
          <source>Points to a buffer that is to receive the current selection in the list box.</source>
        </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve">
          <source>Specifies the integer ID of a list box in the dialog box.</source>
        </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve">
          <source>It assumes that the list box has been filled by the <bpt id="p1">[</bpt>DlgDirList<ept id="p1">](#cwnd__dlgdirlist)</ept> member function and that the selection is a drive letter, a file, or a directory name.</source>
        </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DlgDirSelect`</ph> member function copies the selection to the buffer given by <ph id="ph2">`lpString`</ph>.</source>
        </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve">
          <source>If there is no selection, <ph id="ph1">`lpString`</ph> does not change.</source>
        </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve">
          <source>sends <bpt id="p1">[</bpt>LB_GETCURSEL<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775197)</ept> and <bpt id="p2">[</bpt>LB_GETTEXT<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb761313)</ept> messages to the list box.</source>
        </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve">
          <source>It does not allow more than one filename to be returned from a list box.</source>
        </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve">
          <source>The list box must not be a multiple-selection list box.</source>
        </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve">
          <source>CWnd::DlgDirSelectComboBox</source>
        </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve">
          <source>Retrieves the current selection from the list box of a combo box.</source>
        </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve">
          <source>Points to a buffer that is to receive the selected path.</source>
        </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve">
          <source>Specifies the integer ID of the combo box in the dialog box.</source>
        </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve">
          <source>It assumes that the list box has been filled by the <bpt id="p1">[</bpt>DlgDirListComboBox<ept id="p1">](#cwnd__dlgdirlistcombobox)</ept> member function and that the selection is a drive letter, a file, or a directory name.</source>
        </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DlgDirSelectComboBox`</ph> member function copies the selection to the specified buffer.</source>
        </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve">
          <source>If there is no selection, the contents of the buffer are not changed.</source>
        </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve">
          <source>sends <bpt id="p1">[</bpt>CB_GETCURSEL<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775845)</ept> and <bpt id="p2">[</bpt>CB_GETLBTEXT<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb775862)</ept> messages to the combo box.</source>
        </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve">
          <source>It does not allow more than one filename to be returned from a combo box.</source>
        </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve">
          <source>CWnd::DoDataExchange</source>
        </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve">
          <source>Called by the framework to exchange and validate dialog data.</source>
        </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CDataExchange`</ph> object.</source>
        </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve">
          <source>Never call this function directly.</source>
        </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve">
          <source>It is called by the <bpt id="p1">[</bpt>UpdateData<ept id="p1">](#cwnd__updatedata)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`UpdateData`</ph> to initialize a dialog box's controls or retrieve data from a dialog box.</source>
        </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve">
          <source>When you derive an application-specific dialog class from <bpt id="p1">[</bpt>CDialog<ept id="p1">](../../mfc/reference/cdialog-class.md)</ept>, you need to override this member function if you wish to utilize the framework's automatic data exchange and validation.</source>
        </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve">
          <source>The Add Variable wizard will write an overridden version of this member function for you containing the desired "data map" of dialog data exchange (DDX) and validation (DDV) global function calls.</source>
        </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve">
          <source>To automatically generate an overridden version of this member function, first create a dialog resource with the dialog editor, then derive an application-specific dialog class.</source>
        </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve">
          <source>Then use the Add Variable wizard to associate variables, data, and validation ranges with various controls in the new dialog box.</source>
        </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve">
          <source>The wizard then writes the overridden <ph id="ph1">`DoDataExchange`</ph>, which contains a data map.</source>
        </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve">
          <source>The following is an example DDX/DDV code block generated by the Add Variable wizard:</source>
        </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#90</source>
        </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DoDataExchange`</ph> overridden member function must precede the macro statements in your source file.</source>
        </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve">
          <source>For more information on dialog data exchange and validation, see <bpt id="p1">[</bpt>Displaying and Manipulating Data in a Form<ept id="p1">](../../data/odbc/displaying-and-manipulating-data-in-a-form.md)</ept> and <bpt id="p2">[</bpt>Dialog Data Exchange and Validation<ept id="p2">](../../mfc/dialog-data-exchange-and-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve">
          <source>For a description of the DDX_ and DDV_ macros generated by the Add Variable wizard, see <bpt id="p1">[</bpt>Technical Note 26<ept id="p1">](../../mfc/tn026-ddx-and-ddv-routines.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve">
          <source>CWnd::DragAcceptFiles</source>
        </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve">
          <source>Call this member function from within a window, using a <ph id="ph1">`CWnd`</ph> pointer, in your application's <bpt id="p1">[</bpt>CWinApp::InitInstance<ept id="p1">](../../mfc/reference/cwinapp-class.md#cwinapp__initinstance)</ept> function to indicate that the window accepts dropped files from the Windows File Manager or File Explorer.</source>
        </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve">
          <source>BAccept</source>
        </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve">
          <source>Flag that indicates whether dragged files are accepted.</source>
        </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve">
          <source>Only the window that calls <ph id="ph1">`DragAcceptFiles`</ph> with the <ph id="ph2">`bAccept`</ph> parameter set to <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> has identified itself as able to process the Windows message <ph id="ph3">`WM_DROPFILES`</ph>.</source>
        </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve">
          <source>For example, in an MDI application, if the <ph id="ph1">`CMDIFrameWnd`</ph> window pointer is used in the <ph id="ph2">`DragAcceptFiles`</ph> function call, only the <ph id="ph3">`CMDIFrameWnd`</ph> window gets the <ph id="ph4">`WM_DROPFILES`</ph> message.</source>
        </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve">
          <source>This message is not sent to all open <ph id="ph1">`CMDIChildWnd`</ph> windows.</source>
        </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve">
          <source>For a <ph id="ph1">`CMDIChildWnd`</ph> window to receive this message, you must call <ph id="ph2">`DragAcceptFiles`</ph> with the <ph id="ph3">`CMDIChildWnd`</ph> window pointer.</source>
        </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve">
          <source>To discontinue receiving dragged files, call the member function with <ph id="ph1">`bAccept`</ph> set to <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve">
          <source>CWnd::DragDetect</source>
        </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve">
          <source>Captures the mouse and tracks its movement until the user releases the left button, presses the ESC key, or moves the mouse outside the drag rectangle around the specified point.</source>
        </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve">
          <source>Initial position of the mouse, in screen coordinates.</source>
        </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve">
          <source>The function determines the coordinates of the drag rectangle by using this point.</source>
        </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve">
          <source>If the user moved the mouse outside of the drag rectangle while holding down the left button , the return value is nonzero.</source>
        </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve">
          <source>If the user did not move the mouse outside of the drag rectangle while holding down the left button , the return value is zero.</source>
        </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the function <bpt id="p1">[</bpt>DragDetect<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646256)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve">
          <source>CWnd::DrawAnimatedRects</source>
        </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve">
          <source>Draws a wire-frame rectangle and animates it to indicate the opening of an icon or the minimizing or maximizing of a window.</source>
        </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve">
          <source>idAni</source>
        </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve">
          <source>Specifies the type of animation.</source>
        </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve">
          <source>If you specify <bpt id="p1">**</bpt>IDANI_CAPTION<ept id="p1">**</ept>, the window caption will animate from the position specified by <ph id="ph1">`lprcFrom`</ph> to the position specified by <ph id="ph2">`lprcTo`</ph>.</source>
        </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve">
          <source>The effect is similar to minimizing or maximizing a window.</source>
        </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>RECT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure specifying the location and size of the icon or minimized window.</source>
        </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>RECT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure specifying the location and size of the restored window</source>
        </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve">
          <source>Nonzero if the function succeeds; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the function <bpt id="p1">[</bpt>DrawAnimatedRects<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162475)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve">
          <source>CWnd::DrawCaption</source>
        </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve">
          <source>Draws a window caption.</source>
        </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve">
          <source>A pointer to a device context.</source>
        </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve">
          <source>The function draws the window caption into this device context.</source>
        </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve">
          <source>A pointer to a RECT structure that specifies the bounding rectangle for the window caption.</source>
        </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve">
          <source>Specifies drawing options.</source>
        </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve">
          <source>For a complete list of values, see <bpt id="p1">[</bpt>DrawCaption<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162476)</ept>.</source>
        </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve">
          <source>Nonzero if the function succeeds; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the function <bpt id="p1">[</bpt>DrawCaption<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162476)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve">
          <source>CWnd::DrawMenuBar</source>
        </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve">
          <source>Redraws the menu bar.</source>
        </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve">
          <source>If a menu bar is changed after Windows has created the window, call this function to draw the changed menu bar.</source>
        </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CWnd::GetMenu<ept id="p1">](#cwnd__getmenu)</ept>.</source>
        </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve">
          <source>CWnd::EnableActiveAccessibility</source>
        </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve">
          <source>Enables user-defined Active Accessibility functions.</source>
        </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve">
          <source>MFC's default Active Accessibility support is sufficient for standard windows and controls, including ActiveX controls; however, if your <ph id="ph1">`CWnd`</ph>-derived class contains nonwindowed user interface elements, MFC has no way of knowing about them.</source>
        </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve">
          <source>In that case, you must override the appropriate <bpt id="p1">[</bpt>Active Accessibility member functions<ept id="p1">](http://msdn.microsoft.com/en-us/68af04ac-4eb9-4b7d-b33f-c45512097a74)</ept> in your class, and you must call <bpt id="p2">**</bpt>EnableActiveAccessibility<ept id="p2">**</ept> in the class's constructor.</source>
        </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve">
          <source>CWnd::EnableDynamicLayout</source>
        </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve">
          <source>Enables or disables the dynamic layout manager.</source>
        </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve">
          <source>When dynamic layout is enabled, the position and size of child windows can adjust dynamically when the user resizes the window.</source>
        </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve">
          <source>TRUE to enable dynamic layout; FALSE to disable dynamic layout.</source>
        </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve">
          <source>If you want to enable dynamic layout, you have to do more than just call this method.</source>
        </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve">
          <source>You also have to provide dynamic layout information which species how the controls in the window respond to size changes.</source>
        </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve">
          <source>You can specify this information in the resource editor, or programmatically, for each control.</source>
        </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Dynamic Layout<ept id="p1">](../../mfc/dynamic-layout.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve">
          <source>CWnd::EnableD2DSupport</source>
        </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve">
          <source>Enables or disables window D2D support.</source>
        </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve">
          <source>Call this method before the main window is initialized.</source>
        </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve">
          <source>Specifies whether to turn on, or off D2D support.</source>
        </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve">
          <source>Species whether to use the Device Context (DC) render target, CDCRenderTarget.</source>
        </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve">
          <source>If FALSE, CHwndRenderTarget is used.</source>
        </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve">
          <source>CWnd::EnableScrollBar</source>
        </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve">
          <source>Enables or disables one or both arrows of a scroll bar.</source>
        </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve">
          <source>nSBFlags</source>
        </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve">
          <source>Specifies the scroll-bar type.</source>
        </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve">
          <source>Can have one of the following values:</source>
        </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_BOTH<ept id="p1">**</ept> Enables or disables the arrows of the horizontal and vertical scroll bars associated with the window.</source>
        </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_HORZ<ept id="p1">**</ept> Enables or disables the arrows of the horizontal scroll bar associated with the window.</source>
        </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_VERT<ept id="p1">**</ept> Enables or disables the arrows of the vertical scroll bar associated with the window.</source>
        </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve">
          <source>Specifies whether the scroll-bar arrows are enabled or disabled and which arrows are enabled or disabled.</source>
        </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve">
          <source>Can have one of the following values:</source>
        </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ESB_ENABLE_BOTH<ept id="p1">**</ept> Enables both arrows of a scroll bar (default).</source>
        </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ESB_DISABLE_LTUP<ept id="p1">**</ept> Disables the left arrow of a horizontal scroll bar or the up arrow of a vertical scroll bar.</source>
        </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ESB_DISABLE_RTDN<ept id="p1">**</ept> Disables the right arrow of a horizontal scroll bar or the down arrow of a vertical scroll bar.</source>
        </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ESB_DISABLE_BOTH<ept id="p1">**</ept> Disables both arrows of a scroll bar.</source>
        </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve">
          <source>Nonzero if the arrows are enabled or disabled as specified.</source>
        </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve">
          <source>Otherwise it is 0, which indicates that the arrows are already in the requested state or that an error occurred.</source>
        </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve">
          <source>CWnd::EnableScrollBarCtrl</source>
        </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve">
          <source>Enables or disables the scroll bar for this window.</source>
        </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve">
          <source>The scroll-bar identifier.</source>
        </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve">
          <source>Specifies whether the scroll bar is to be enabled or disabled.</source>
        </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve">
          <source>If the window has a sibling scroll-bar control, that scroll bar is used; otherwise the window's own scroll bar is used.</source>
        </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve">
          <source>CWnd::EnableToolTips</source>
        </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve">
          <source>Enables tool tips for the given window.</source>
        </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve">
          <source>Specifies whether the tool tip control is enabled or disabled.</source>
        </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> enables the control; <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> disables the control.</source>
        </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if tool tips are enabled; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve">
          <source>Override <bpt id="p1">[</bpt>OnToolHitTest<ept id="p1">](#cwnd__ontoolhittest)</ept> to provide the <bpt id="p2">[</bpt>TOOLINFO<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb760256)</ept> struct or structs for the window.</source>
        </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve">
          <source>Some windows, such as <bpt id="p1">[</bpt>CToolBar<ept id="p1">](../../mfc/reference/ctoolbar-class.md)</ept>, provide a built-in implementation of <bpt id="p2">[</bpt>OnToolHitTest<ept id="p2">](#cwnd__ontoolhittest)</ept>.</source>
        </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>TOOLINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb760256)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for more information on this structure.</source>
        </trans-unit>
        <trans-unit id="1733" translate="yes" xml:space="preserve">
          <source>Simply calling <ph id="ph1">`EnableToolTips`</ph> is not enough to display tool tips for your child controls unless the parent window is derived from <ph id="ph2">`CFrameWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="1734" translate="yes" xml:space="preserve">
          <source>This is because <ph id="ph1">`CFrameWnd`</ph> provides a default handler for the <bpt id="p1">**</bpt>TTN_NEEDTEXT<ept id="p1">**</ept> notification.</source>
        </trans-unit>
        <trans-unit id="1735" translate="yes" xml:space="preserve">
          <source>If your parent window is not derived from <ph id="ph1">`CFrameWnd`</ph>, that is, if it is a dialog box or a form view, tool tips for your child controls will not display correctly unless you provide a handler for the <bpt id="p1">**</bpt>TTN_NEEDTEXT<ept id="p1">**</ept> tool tip notification.</source>
        </trans-unit>
        <trans-unit id="1736" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Tool Tips<ept id="p1">](../../mfc/tool-tips-in-windows-not-derived-from-cframewnd.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1737" translate="yes" xml:space="preserve">
          <source>The default tool tips provided for your windows by <ph id="ph1">`EnableToolTips`</ph> do not have text associated with them.</source>
        </trans-unit>
        <trans-unit id="1738" translate="yes" xml:space="preserve">
          <source>To retrieve text for the tool tip to display, the <bpt id="p1">**</bpt>TTN_NEEDTEXT<ept id="p1">**</ept> notification is sent to the tool tip control's parent window just before the tool tip window is displayed.</source>
        </trans-unit>
        <trans-unit id="1739" translate="yes" xml:space="preserve">
          <source>If there is no handler for this message to assign some value to the <ph id="ph1">`pszText`</ph> member of the <bpt id="p1">**</bpt>TOOLTIPTEXT<ept id="p1">**</ept> structure, there will be no text displayed for the tool tip.</source>
        </trans-unit>
        <trans-unit id="1740" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1741" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#91</source>
        </trans-unit>
        <trans-unit id="1742" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#92</source>
        </trans-unit>
        <trans-unit id="1743" translate="yes" xml:space="preserve">
          <source>CWnd::EnableTrackingToolTips</source>
        </trans-unit>
        <trans-unit id="1744" translate="yes" xml:space="preserve">
          <source>Enables or disables tracking tooltips.</source>
        </trans-unit>
        <trans-unit id="1745" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1746" translate="yes" xml:space="preserve">
          <source>Specifies whether tracking tool tips are enabled or disabled.</source>
        </trans-unit>
        <trans-unit id="1747" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the tracking tool tips will be enabled.</source>
        </trans-unit>
        <trans-unit id="1748" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, the tracking tool tips will be disabled.</source>
        </trans-unit>
        <trans-unit id="1749" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1750" translate="yes" xml:space="preserve">
          <source>Indicates the state before the <ph id="ph1">`EnableWindow`</ph> member function was called.</source>
        </trans-unit>
        <trans-unit id="1751" translate="yes" xml:space="preserve">
          <source>The return value is nonzero if the window was previously disabled.</source>
        </trans-unit>
        <trans-unit id="1752" translate="yes" xml:space="preserve">
          <source>The return value is 0 if the window was previously enabled or an error occurred.</source>
        </trans-unit>
        <trans-unit id="1753" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1754" translate="yes" xml:space="preserve">
          <source>Tracking tool tips are tool tip windows that you can dynamically position on the screen.</source>
        </trans-unit>
        <trans-unit id="1755" translate="yes" xml:space="preserve">
          <source>By rapidly updating the position, the tool tip window appears to move smoothly, or "track."</source>
        </trans-unit>
        <trans-unit id="1756" translate="yes" xml:space="preserve">
          <source>This functionality can be useful if you need tool tip text to follow the position of the pointer as it moves.</source>
        </trans-unit>
        <trans-unit id="1757" translate="yes" xml:space="preserve">
          <source>CWnd::EnableWindow</source>
        </trans-unit>
        <trans-unit id="1758" translate="yes" xml:space="preserve">
          <source>Enables or disables mouse and keyboard input.</source>
        </trans-unit>
        <trans-unit id="1759" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1760" translate="yes" xml:space="preserve">
          <source>Specifies whether the given window is to be enabled or disabled.</source>
        </trans-unit>
        <trans-unit id="1761" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the window will be enabled.</source>
        </trans-unit>
        <trans-unit id="1762" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, the window will be disabled.</source>
        </trans-unit>
        <trans-unit id="1763" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1764" translate="yes" xml:space="preserve">
          <source>Indicates the state before the <ph id="ph1">`EnableWindow`</ph> member function was called.</source>
        </trans-unit>
        <trans-unit id="1765" translate="yes" xml:space="preserve">
          <source>The return value is nonzero if the window was previously disabled.</source>
        </trans-unit>
        <trans-unit id="1766" translate="yes" xml:space="preserve">
          <source>The return value is 0 if the window was previously enabled or an error occurred.</source>
        </trans-unit>
        <trans-unit id="1767" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1768" translate="yes" xml:space="preserve">
          <source>When input is disabled, input such as mouse clicks and keystrokes is ignored.</source>
        </trans-unit>
        <trans-unit id="1769" translate="yes" xml:space="preserve">
          <source>When input is enabled, the window processes all input.</source>
        </trans-unit>
        <trans-unit id="1770" translate="yes" xml:space="preserve">
          <source>If the enabled state is changing, the <bpt id="p1">[</bpt>WM_ENABLE<ept id="p1">](#cwnd__onenable)</ept> message is sent before this function returns.</source>
        </trans-unit>
        <trans-unit id="1771" translate="yes" xml:space="preserve">
          <source>If disabled, all child windows are implicitly disabled, although they are not sent <ph id="ph1">`WM_ENABLE`</ph> messages.</source>
        </trans-unit>
        <trans-unit id="1772" translate="yes" xml:space="preserve">
          <source>A window must be enabled before it can be activated.</source>
        </trans-unit>
        <trans-unit id="1773" translate="yes" xml:space="preserve">
          <source>For example, if an application is displaying a modeless dialog box and has disabled its main window, the main window must be enabled before the dialog box is destroyed.</source>
        </trans-unit>
        <trans-unit id="1774" translate="yes" xml:space="preserve">
          <source>Otherwise, another window will get the input focus and be activated.</source>
        </trans-unit>
        <trans-unit id="1775" translate="yes" xml:space="preserve">
          <source>If a child window is disabled, it is ignored when Windows tries to determine which window should get mouse messages.</source>
        </trans-unit>
        <trans-unit id="1776" translate="yes" xml:space="preserve">
          <source>By default, a window is enabled when it is created.</source>
        </trans-unit>
        <trans-unit id="1777" translate="yes" xml:space="preserve">
          <source>An application can specify the <bpt id="p1">**</bpt>WS_DISABLED<ept id="p1">**</ept> style in the <bpt id="p2">[</bpt>Create<ept id="p2">](#cwnd__create)</ept> or <bpt id="p3">[</bpt>CreateEx<ept id="p3">](#cwnd__createex)</ept> member function to create a window that is initially disabled.</source>
        </trans-unit>
        <trans-unit id="1778" translate="yes" xml:space="preserve">
          <source>After a window has been created, an application can also use the <ph id="ph1">`EnableWindow`</ph> member function to enable or disable the window.</source>
        </trans-unit>
        <trans-unit id="1779" translate="yes" xml:space="preserve">
          <source>An application can use this function to enable or disable a control in a dialog box.</source>
        </trans-unit>
        <trans-unit id="1780" translate="yes" xml:space="preserve">
          <source>A disabled control cannot receive the input focus, nor can a user access it.</source>
        </trans-unit>
        <trans-unit id="1781" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1782" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#93</source>
        </trans-unit>
        <trans-unit id="1783" translate="yes" xml:space="preserve">
          <source>CWnd::EndModalLoop</source>
        </trans-unit>
        <trans-unit id="1784" translate="yes" xml:space="preserve">
          <source>Terminates a call to <ph id="ph1">`RunModalLoop`</ph>.</source>
        </trans-unit>
        <trans-unit id="1785" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1786" translate="yes" xml:space="preserve">
          <source>Contains the value to be returned to the caller of <bpt id="p1">[</bpt>RunModalLoop<ept id="p1">](#cwnd__runmodalloop)</ept>.</source>
        </trans-unit>
        <trans-unit id="1787" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1788" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nResult`</ph> parameter is propagated to the return value from <ph id="ph2">`RunModalLoop`</ph>.</source>
        </trans-unit>
        <trans-unit id="1789" translate="yes" xml:space="preserve">
          <source>CWnd::EndModalState</source>
        </trans-unit>
        <trans-unit id="1790" translate="yes" xml:space="preserve">
          <source>Call this member function to change a frame window from modal to modeless.</source>
        </trans-unit>
        <trans-unit id="1791" translate="yes" xml:space="preserve">
          <source>CWnd::EndPaint</source>
        </trans-unit>
        <trans-unit id="1792" translate="yes" xml:space="preserve">
          <source>Marks the end of painting in the given window.</source>
        </trans-unit>
        <trans-unit id="1793" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1794" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>PAINTSTRUCT<ept id="p1">](../../mfc/reference/paintstruct-structure.md)</ept> structure that contains the painting information retrieved by the <bpt id="p2">[</bpt>BeginPaint<ept id="p2">](#cwnd__beginpaint)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="1795" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1796" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`EndPaint`</ph> member function is required for each call to the <ph id="ph2">`BeginPaint`</ph> member function, but only after painting is complete.</source>
        </trans-unit>
        <trans-unit id="1797" translate="yes" xml:space="preserve">
          <source>If the caret was hidden by the <ph id="ph1">`BeginPaint`</ph> member function, <ph id="ph2">`EndPaint`</ph> restores the caret to the screen.</source>
        </trans-unit>
        <trans-unit id="1798" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1799" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CWnd::BeginPaint<ept id="p1">](#cwnd__beginpaint)</ept>.</source>
        </trans-unit>
        <trans-unit id="1800" translate="yes" xml:space="preserve">
          <source>CWnd::ExecuteDlgInit</source>
        </trans-unit>
        <trans-unit id="1801" translate="yes" xml:space="preserve">
          <source>Initiates a dialog resource.</source>
        </trans-unit>
        <trans-unit id="1802" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1803" translate="yes" xml:space="preserve">
          <source>A pointer to a null-terminated string specifying the name of the resource.</source>
        </trans-unit>
        <trans-unit id="1804" translate="yes" xml:space="preserve">
          <source>A pointer to a resource.</source>
        </trans-unit>
        <trans-unit id="1805" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1806" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if a dialog resource is executed; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1807" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1808" translate="yes" xml:space="preserve">
          <source>will use resources bound to the executing module, or resources from other sources.</source>
        </trans-unit>
        <trans-unit id="1809" translate="yes" xml:space="preserve">
          <source>To accomplish this, <ph id="ph1">`ExecuteDlgInit`</ph> finds a resource handle by calling <ph id="ph2">`AfxFindResourceHandle`</ph>.</source>
        </trans-unit>
        <trans-unit id="1810" translate="yes" xml:space="preserve">
          <source>If your MFC application does not use the shared DLL (MFCx0[U][D].DLL), <bpt id="p1">**</bpt>AfxFindResourceHandle<ept id="p1">**</ept> calls <bpt id="p2">[</bpt>AfxGetResourceHandle<ept id="p2">](http://msdn.microsoft.com/library/d0eff6c4-f566-471a-96b7-a5a70a751a92)</ept>, which returns the current resource handle for the executable.</source>
        </trans-unit>
        <trans-unit id="1811" translate="yes" xml:space="preserve">
          <source>If your MFC application that uses MFCx0[U][D].DLL, <ph id="ph1">`AfxFindResourceHandle`</ph> traverses the <bpt id="p1">**</bpt>CDynLinkLibrary<ept id="p1">**</ept> object list of shared and extension DLLs looking for the correct resource handle.</source>
        </trans-unit>
        <trans-unit id="1812" translate="yes" xml:space="preserve">
          <source>CWnd::FilterToolTipMessage</source>
        </trans-unit>
        <trans-unit id="1813" translate="yes" xml:space="preserve">
          <source>Called by the framework to display tool tip messages.</source>
        </trans-unit>
        <trans-unit id="1814" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1815" translate="yes" xml:space="preserve">
          <source>A pointer to the tool tip message.</source>
        </trans-unit>
        <trans-unit id="1816" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1817" translate="yes" xml:space="preserve">
          <source>In most MFC applications this method is called by the framework from <bpt id="p1">[</bpt>PreTranslateMessage<ept id="p1">](#cwnd__pretranslatemessage)</ept> and <bpt id="p2">[</bpt>EnableToolTips<ept id="p2">](#cwnd__enabletooltips)</ept>, and you do not need to call it yourself.</source>
        </trans-unit>
        <trans-unit id="1818" translate="yes" xml:space="preserve">
          <source>However, in certain applications, for example some ActiveX controls, these methods might not be invoked by the framework, and you will need to call FilterToolTipMessage yourself.</source>
        </trans-unit>
        <trans-unit id="1819" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Methods of Creating Tool Tips<ept id="p1">](../../mfc/methods-of-creating-tool-tips.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1820" translate="yes" xml:space="preserve">
          <source>CWnd::FindWindow</source>
        </trans-unit>
        <trans-unit id="1821" translate="yes" xml:space="preserve">
          <source>Returns the top-level <ph id="ph1">`CWnd`</ph> whose window class is given by <ph id="ph2">`lpszClassName`</ph> and whose window name, or title, is given by <ph id="ph3">`lpszWindowName`</ph>.</source>
        </trans-unit>
        <trans-unit id="1822" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1823" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that specifies the window's class name (a <bpt id="p1">**</bpt>WNDCLASS<ept id="p1">**</ept> structure).</source>
        </trans-unit>
        <trans-unit id="1824" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpClassName`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, all class names match.</source>
        </trans-unit>
        <trans-unit id="1825" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that specifies the window name (the window's title).</source>
        </trans-unit>
        <trans-unit id="1826" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpWindowName`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, all window names match.</source>
        </trans-unit>
        <trans-unit id="1827" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1828" translate="yes" xml:space="preserve">
          <source>Identifies the window that has the specified class name and window name.</source>
        </trans-unit>
        <trans-unit id="1829" translate="yes" xml:space="preserve">
          <source>It is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if no such window is found.</source>
        </trans-unit>
        <trans-unit id="1830" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CWnd`</ph>* may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="1831" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1832" translate="yes" xml:space="preserve">
          <source>This function does not search child windows.</source>
        </trans-unit>
        <trans-unit id="1833" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1834" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#94</source>
        </trans-unit>
        <trans-unit id="1835" translate="yes" xml:space="preserve">
          <source>CWnd::FindWindowEx</source>
        </trans-unit>
        <trans-unit id="1836" translate="yes" xml:space="preserve">
          <source>Retrieves the window object whose class name and window name match the specified strings.</source>
        </trans-unit>
        <trans-unit id="1837" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1838" translate="yes" xml:space="preserve">
          <source>hwndParent</source>
        </trans-unit>
        <trans-unit id="1839" translate="yes" xml:space="preserve">
          <source>Handle to the parent window whose child windows are to be searched.</source>
        </trans-unit>
        <trans-unit id="1840" translate="yes" xml:space="preserve">
          <source>hwndChildAfter</source>
        </trans-unit>
        <trans-unit id="1841" translate="yes" xml:space="preserve">
          <source>Handle to a child window.</source>
        </trans-unit>
        <trans-unit id="1842" translate="yes" xml:space="preserve">
          <source>The search begins with the next child window in the Z order.</source>
        </trans-unit>
        <trans-unit id="1843" translate="yes" xml:space="preserve">
          <source>The child window must be a direct child window of <bpt id="p1">*</bpt>hwndParent<ept id="p1">*</ept>, not just a descendant window.</source>
        </trans-unit>
        <trans-unit id="1844" translate="yes" xml:space="preserve">
          <source>Pointer to a null-terminated string that specifies the class name or a class atom created by a previous call to the <bpt id="p1">[</bpt>RegisterClass<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633586)</ept> or <bpt id="p2">[</bpt>RegisterClassEx<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms633587)</ept>.</source>
        </trans-unit>
        <trans-unit id="1845" translate="yes" xml:space="preserve">
          <source>lpszWindow</source>
        </trans-unit>
        <trans-unit id="1846" translate="yes" xml:space="preserve">
          <source>Pointer to a null-terminated string that specifies the window name (the window's title).</source>
        </trans-unit>
        <trans-unit id="1847" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, all window names match.</source>
        </trans-unit>
        <trans-unit id="1848" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1849" translate="yes" xml:space="preserve">
          <source>If the function succeeds, the return value is a pointer to the window object having the specified class and window names.</source>
        </trans-unit>
        <trans-unit id="1850" translate="yes" xml:space="preserve">
          <source>If the function fails, the return value is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1851" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1852" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the function <bpt id="p1">[</bpt>FindWindowEx<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633500)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1853" translate="yes" xml:space="preserve">
          <source>CWnd::FlashWindow</source>
        </trans-unit>
        <trans-unit id="1854" translate="yes" xml:space="preserve">
          <source>Flashes the given window once.</source>
        </trans-unit>
        <trans-unit id="1855" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1856" translate="yes" xml:space="preserve">
          <source>Specifies whether the <ph id="ph1">`CWnd`</ph> is to be flashed or returned to its original state.</source>
        </trans-unit>
        <trans-unit id="1857" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CWnd`</ph> is flashed from one state to the other if <ph id="ph2">`bInvert`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="1858" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bInvert`</ph> is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, the window is returned to its original state (either active or inactive).</source>
        </trans-unit>
        <trans-unit id="1859" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1860" translate="yes" xml:space="preserve">
          <source>Nonzero if the window was active before the call to the <ph id="ph1">`FlashWindow`</ph> member function; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="1861" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1862" translate="yes" xml:space="preserve">
          <source>For successive flashing, create a system timer and repeatedly call <ph id="ph1">`FlashWindow`</ph>.</source>
        </trans-unit>
        <trans-unit id="1863" translate="yes" xml:space="preserve">
          <source>Flashing the <ph id="ph1">`CWnd`</ph> means changing the appearance of its title bar as if the <ph id="ph2">`CWnd`</ph> were changing from inactive to active status, or vice versa.</source>
        </trans-unit>
        <trans-unit id="1864" translate="yes" xml:space="preserve">
          <source>(An inactive title bar changes to an active title bar; an active title bar changes to an inactive title bar.)</source>
        </trans-unit>
        <trans-unit id="1865" translate="yes" xml:space="preserve">
          <source>Typically, a window is flashed to inform the user that it requires attention but that it does not currently have the input focus.</source>
        </trans-unit>
        <trans-unit id="1866" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`bInvert`</ph> parameter should be <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> only when the window is getting the input focus and will no longer be flashing; it should be <bpt id="p2">**</bpt>TRUE<ept id="p2">**</ept> on successive calls while waiting to get the input focus.</source>
        </trans-unit>
        <trans-unit id="1867" translate="yes" xml:space="preserve">
          <source>This function always returns nonzero for minimized windows.</source>
        </trans-unit>
        <trans-unit id="1868" translate="yes" xml:space="preserve">
          <source>If the window is minimized, <ph id="ph1">`FlashWindow`</ph> will simply flash the window's icon; <ph id="ph2">`bInvert`</ph> is ignored for minimized windows.</source>
        </trans-unit>
        <trans-unit id="1869" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="1870" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#95</source>
        </trans-unit>
        <trans-unit id="1871" translate="yes" xml:space="preserve">
          <source>CWnd::FlashWindowEx</source>
        </trans-unit>
        <trans-unit id="1872" translate="yes" xml:space="preserve">
          <source>Flashes the given window.</source>
        </trans-unit>
        <trans-unit id="1873" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1874" translate="yes" xml:space="preserve">
          <source>Specifies the flash status.</source>
        </trans-unit>
        <trans-unit id="1875" translate="yes" xml:space="preserve">
          <source>For a complete list of values, see the <bpt id="p1">[</bpt>FLASHWINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679348)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="1876" translate="yes" xml:space="preserve">
          <source>Specifies the number of times to flash the window.</source>
        </trans-unit>
        <trans-unit id="1877" translate="yes" xml:space="preserve">
          <source>Specifies the rate, in milliseconds, at which the window will be flashed.</source>
        </trans-unit>
        <trans-unit id="1878" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`dwTimeout`</ph> is zero, the function uses the default cursor blink rate.</source>
        </trans-unit>
        <trans-unit id="1879" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1880" translate="yes" xml:space="preserve">
          <source>The return value specifies the window's state before the call to the <ph id="ph1">`FlashWindowEx`</ph> function.</source>
        </trans-unit>
        <trans-unit id="1881" translate="yes" xml:space="preserve">
          <source>If the window caption was drawn as active before the call, the return value is nonzero.</source>
        </trans-unit>
        <trans-unit id="1882" translate="yes" xml:space="preserve">
          <source>Otherwise, the return value is zero.</source>
        </trans-unit>
        <trans-unit id="1883" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1884" translate="yes" xml:space="preserve">
          <source>This method emulates the functionality of the function <bpt id="p1">[</bpt>FlashWindowEx<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679347)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1885" translate="yes" xml:space="preserve">
          <source>CWnd::FromHandle</source>
        </trans-unit>
        <trans-unit id="1886" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a <ph id="ph1">`CWnd`</ph> object when given a handle to a window.</source>
        </trans-unit>
        <trans-unit id="1887" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`CWnd`</ph> object is not attached to the handle, a temporary <ph id="ph2">`CWnd`</ph> object is created and attached.</source>
        </trans-unit>
        <trans-unit id="1888" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1889" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`HWND`</ph> of a Windows window.</source>
        </trans-unit>
        <trans-unit id="1890" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1891" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a <ph id="ph1">`CWnd`</ph> object when given a handle to a window.</source>
        </trans-unit>
        <trans-unit id="1892" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`CWnd`</ph> object is not attached to the handle, a temporary <ph id="ph2">`CWnd`</ph> object is created and attached.</source>
        </trans-unit>
        <trans-unit id="1893" translate="yes" xml:space="preserve">
          <source>The pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="1894" translate="yes" xml:space="preserve">
          <source>CWnd::FromHandlePermanent</source>
        </trans-unit>
        <trans-unit id="1895" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a <ph id="ph1">`CWnd`</ph> object when given a handle to a window.</source>
        </trans-unit>
        <trans-unit id="1896" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1897" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`HWND`</ph> of a Windows window.</source>
        </trans-unit>
        <trans-unit id="1898" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1899" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="1900" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1901" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`CWnd`</ph> object is not attached to the handle, <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> is returned.</source>
        </trans-unit>
        <trans-unit id="1902" translate="yes" xml:space="preserve">
          <source>This function, unlike <bpt id="p1">[</bpt>FromHandle<ept id="p1">](#cwnd__fromhandle)</ept>, does not create temporary objects.</source>
        </trans-unit>
        <trans-unit id="1903" translate="yes" xml:space="preserve">
          <source>CWnd::get_accChild</source>
        </trans-unit>
        <trans-unit id="1904" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the address of an <ph id="ph1">`IDispatch`</ph> interface for the specified child.</source>
        </trans-unit>
        <trans-unit id="1905" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1906" translate="yes" xml:space="preserve">
          <source>Identifies the child whose <ph id="ph1">`IDispatch`</ph> interface is to be retrieved.</source>
        </trans-unit>
        <trans-unit id="1907" translate="yes" xml:space="preserve">
          <source>ppdispChild</source>
        </trans-unit>
        <trans-unit id="1908" translate="yes" xml:space="preserve">
          <source>Receives the address of the child object's <ph id="ph1">`IDispatch`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="1909" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1910" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, a COM error code on failure.</source>
        </trans-unit>
        <trans-unit id="1911" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">**</bpt>Return Values<ept id="p1">**</ept> in <bpt id="p2">[</bpt>IAccessible::get_accChild<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd318475)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1912" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1913" translate="yes" xml:space="preserve">
          <source>This function is part of MFC's <bpt id="p1">[</bpt>Active Accessibility<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd373592)</ept> support.</source>
        </trans-unit>
        <trans-unit id="1914" translate="yes" xml:space="preserve">
          <source>Override this function in your <ph id="ph1">`CWnd`</ph>-derived class if you have nonwindowed user interface elements (other than windowless ActiveX controls, which MFC handles).</source>
        </trans-unit>
        <trans-unit id="1915" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>IAccessible::get_accChild<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318475)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1916" translate="yes" xml:space="preserve">
          <source>CWnd::get_accChildCount</source>
        </trans-unit>
        <trans-unit id="1917" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the number of children belonging to this object.</source>
        </trans-unit>
        <trans-unit id="1918" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1919" translate="yes" xml:space="preserve">
          <source>pcountChildren</source>
        </trans-unit>
        <trans-unit id="1920" translate="yes" xml:space="preserve">
          <source>Receives the number of children.</source>
        </trans-unit>
        <trans-unit id="1921" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1922" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, a COM error code on failure.</source>
        </trans-unit>
        <trans-unit id="1923" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">**</bpt>Return Values<ept id="p1">**</ept> in <bpt id="p2">[</bpt>IAccessible::get_accChildCount<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd318476)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1924" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1925" translate="yes" xml:space="preserve">
          <source>This function is part of MFC's <bpt id="p1">[</bpt>Active Accessibility<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd373592)</ept> support.</source>
        </trans-unit>
        <trans-unit id="1926" translate="yes" xml:space="preserve">
          <source>Override this function in your <ph id="ph1">`CWnd`</ph>-derived class if you have nonwindowed user interface elements (other than windowless ActiveX controls, which MFC handles).</source>
        </trans-unit>
        <trans-unit id="1927" translate="yes" xml:space="preserve">
          <source>Call the base class version and then add the nonwindowed child elements.</source>
        </trans-unit>
        <trans-unit id="1928" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>IAccessible::get_accChildCount<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318476)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1929" translate="yes" xml:space="preserve">
          <source>CWnd::get_accDefaultAction</source>
        </trans-unit>
        <trans-unit id="1930" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve a string that describes the object's default action.</source>
        </trans-unit>
        <trans-unit id="1931" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1932" translate="yes" xml:space="preserve">
          <source>Specifies whether the default action to be retrieved is that of the object or one of the object's child elements.</source>
        </trans-unit>
        <trans-unit id="1933" translate="yes" xml:space="preserve">
          <source>This parameter can be either CHILDID_SELF (to obtain information about the object) or a child ID (to obtain information about the object's child element).</source>
        </trans-unit>
        <trans-unit id="1934" translate="yes" xml:space="preserve">
          <source>pszDefaultAction</source>
        </trans-unit>
        <trans-unit id="1935" translate="yes" xml:space="preserve">
          <source>Address of a <ph id="ph1">`BSTR`</ph> that receives a localized string describing the default action for the specified object, or NULL if this object has no default action.</source>
        </trans-unit>
        <trans-unit id="1936" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1937" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, a COM error code on failure.</source>
        </trans-unit>
        <trans-unit id="1938" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">**</bpt>Return Values<ept id="p1">**</ept> in <bpt id="p2">[</bpt>IAccessible::get_accDefaultAction<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd318477)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1939" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1940" translate="yes" xml:space="preserve">
          <source>This function is part of MFC's <bpt id="p1">[</bpt>Active Accessibility<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd373592)</ept> support.</source>
        </trans-unit>
        <trans-unit id="1941" translate="yes" xml:space="preserve">
          <source>Override this function in your <ph id="ph1">`CWnd`</ph>-derived class to describe your object's default action.</source>
        </trans-unit>
        <trans-unit id="1942" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>IAccessible::get_accDefaultAction<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318477)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1943" translate="yes" xml:space="preserve">
          <source>CWnd::get_accDescription</source>
        </trans-unit>
        <trans-unit id="1944" translate="yes" xml:space="preserve">
          <source>Called by framework to retrieve a string that describes the visual appearance of the specified object.</source>
        </trans-unit>
        <trans-unit id="1945" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1946" translate="yes" xml:space="preserve">
          <source>Specifies whether the description to be retrieved is that of the object or one of the object's child elements.</source>
        </trans-unit>
        <trans-unit id="1947" translate="yes" xml:space="preserve">
          <source>This parameter can be either CHILDID_SELF (to obtain information about the object) or a child ID (to obtain information about the object's child element).</source>
        </trans-unit>
        <trans-unit id="1948" translate="yes" xml:space="preserve">
          <source>Address of a <ph id="ph1">`BSTR`</ph> that receives a localized string describing the specified object, or NULL if no description is available for this object.</source>
        </trans-unit>
        <trans-unit id="1949" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1950" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, a COM error code on failure.</source>
        </trans-unit>
        <trans-unit id="1951" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">**</bpt>Return Values<ept id="p1">**</ept> in <bpt id="p2">[</bpt>IAccessible::get_accDescription<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd318478)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1952" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1953" translate="yes" xml:space="preserve">
          <source>This function is part of MFC's <bpt id="p1">[</bpt>Active Accessibility<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd373592)</ept> support.</source>
        </trans-unit>
        <trans-unit id="1954" translate="yes" xml:space="preserve">
          <source>Override this function in your <ph id="ph1">`CWnd`</ph>-derived class to describe your object.</source>
        </trans-unit>
        <trans-unit id="1955" translate="yes" xml:space="preserve">
          <source>Call the base class version and add your description.</source>
        </trans-unit>
        <trans-unit id="1956" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>IAccessible::get_accDescription<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318478)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1957" translate="yes" xml:space="preserve">
          <source>CWnd::get_accFocus</source>
        </trans-unit>
        <trans-unit id="1958" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the object that has the keyboard focus.</source>
        </trans-unit>
        <trans-unit id="1959" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1960" translate="yes" xml:space="preserve">
          <source>Receives information about the object that has the focus.</source>
        </trans-unit>
        <trans-unit id="1961" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">*</bpt>pvarID<ept id="p1">*</ept> in <bpt id="p2">[</bpt>IAccessible::get_accFocus<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd318479)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1962" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1963" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, a COM error code on failure.</source>
        </trans-unit>
        <trans-unit id="1964" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">**</bpt>Return Values<ept id="p1">**</ept> in <bpt id="p2">**</bpt>IAccessible::get_accFocus<ept id="p2">**</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1965" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1966" translate="yes" xml:space="preserve">
          <source>This function is part of MFC's <bpt id="p1">[</bpt>Active Accessibility<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd373592)</ept> support.</source>
        </trans-unit>
        <trans-unit id="1967" translate="yes" xml:space="preserve">
          <source>Override this function in your <ph id="ph1">`CWnd`</ph>-derived class if you have nonwindowed user interface elements (other than windowless ActiveX controls, which MFC handles).</source>
        </trans-unit>
        <trans-unit id="1968" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>IAccessible::get_accFocus<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318479)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1969" translate="yes" xml:space="preserve">
          <source>CWnd::get_accHelp</source>
        </trans-unit>
        <trans-unit id="1970" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve an object's <bpt id="p1">**</bpt>Help<ept id="p1">**</ept> property string.</source>
        </trans-unit>
        <trans-unit id="1971" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1972" translate="yes" xml:space="preserve">
          <source>Specifies whether the help information to be retrieved is that of the object or one of the object's child elements.</source>
        </trans-unit>
        <trans-unit id="1973" translate="yes" xml:space="preserve">
          <source>This parameter can be either CHILDID_SELF (to obtain information about the object) or a child ID (to obtain information about the object's child element).</source>
        </trans-unit>
        <trans-unit id="1974" translate="yes" xml:space="preserve">
          <source>pszHelp</source>
        </trans-unit>
        <trans-unit id="1975" translate="yes" xml:space="preserve">
          <source>Address of a <ph id="ph1">`BSTR`</ph> that receives the localized string containing the help information for the specified object, or NULL if no help information is available.</source>
        </trans-unit>
        <trans-unit id="1976" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1977" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, a COM error code on failure.</source>
        </trans-unit>
        <trans-unit id="1978" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">**</bpt>Return Values<ept id="p1">**</ept> in <bpt id="p2">[</bpt>IAccessible::get_accHelp<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd318480)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1979" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1980" translate="yes" xml:space="preserve">
          <source>This function is part of MFC's <bpt id="p1">[</bpt>Active Accessibility<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd373592)</ept> support.</source>
        </trans-unit>
        <trans-unit id="1981" translate="yes" xml:space="preserve">
          <source>Override this function in your <ph id="ph1">`CWnd`</ph>-derived class to provide help text for your object.</source>
        </trans-unit>
        <trans-unit id="1982" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>IAccessible::get_accHelp<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318480)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1983" translate="yes" xml:space="preserve">
          <source>CWnd::get_accHelpTopic</source>
        </trans-unit>
        <trans-unit id="1984" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the full path of the <bpt id="p1">**</bpt>WinHelp<ept id="p1">**</ept> file associated with the specified object and the identifier of the appropriate topic within that file.</source>
        </trans-unit>
        <trans-unit id="1985" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="1986" translate="yes" xml:space="preserve">
          <source>Address of a <ph id="ph1">`BSTR`</ph> that receives the full path of the <ph id="ph2">`WinHelp`</ph> file associated with the specified object, if any.</source>
        </trans-unit>
        <trans-unit id="1987" translate="yes" xml:space="preserve">
          <source>Specifies whether the Help topic to be retrieved is that of the object or one of the object's child elements.</source>
        </trans-unit>
        <trans-unit id="1988" translate="yes" xml:space="preserve">
          <source>This parameter can be either CHILDID_SELF (to obtain a Help topic for the object) or a child ID (to obtain a Help topic for one of the object's child elements).</source>
        </trans-unit>
        <trans-unit id="1989" translate="yes" xml:space="preserve">
          <source>Identifies the Help file topic associated with the specified object.</source>
        </trans-unit>
        <trans-unit id="1990" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">`pidTopic`</ph> in <bpt id="p1">[</bpt>IAccessible::get_accHelpTopic<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318481)</ept> in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1991" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="1992" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, a COM error code on failure.</source>
        </trans-unit>
        <trans-unit id="1993" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">**</bpt>Return Values<ept id="p1">**</ept> in <bpt id="p2">**</bpt>IAccessible::get_accHelpTopic<ept id="p2">**</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1994" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="1995" translate="yes" xml:space="preserve">
          <source>This function is part of MFC's <bpt id="p1">[</bpt>Active Accessibility<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd373592)</ept> support.</source>
        </trans-unit>
        <trans-unit id="1996" translate="yes" xml:space="preserve">
          <source>Override this function in your <ph id="ph1">`CWnd`</ph>-derived class to provide help information about your object.</source>
        </trans-unit>
        <trans-unit id="1997" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>IAccessible::get_accHelpTopic<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318481)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1998" translate="yes" xml:space="preserve">
          <source>CWnd::get_accKeyboardShortcut</source>
        </trans-unit>
        <trans-unit id="1999" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the specified object's shortcut key or access key.</source>
        </trans-unit>
        <trans-unit id="2000" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2001" translate="yes" xml:space="preserve">
          <source>Specifies whether the keyboard shortcut to be retrieved is that of the object or one of the object's child elements.</source>
        </trans-unit>
        <trans-unit id="2002" translate="yes" xml:space="preserve">
          <source>This parameter can be either CHILDID_SELF (to obtain information about the object) or a child ID (to obtain information about the object's child element).</source>
        </trans-unit>
        <trans-unit id="2003" translate="yes" xml:space="preserve">
          <source>pszKeyboardShortcut</source>
        </trans-unit>
        <trans-unit id="2004" translate="yes" xml:space="preserve">
          <source>Address of a <ph id="ph1">`BSTR`</ph> that receives a localized string identifying the keyboard shortcut, or NULL if no keyboard shortcut is associated with the specified object.</source>
        </trans-unit>
        <trans-unit id="2005" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2006" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, a COM error code on failure.</source>
        </trans-unit>
        <trans-unit id="2007" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">**</bpt>Return Values<ept id="p1">**</ept> in <bpt id="p2">[</bpt>IAccessible::get_accKeyboardShortcut<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd318482)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2008" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2009" translate="yes" xml:space="preserve">
          <source>This function is part of MFC's <bpt id="p1">[</bpt>Active Accessibility<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd373592)</ept> support.</source>
        </trans-unit>
        <trans-unit id="2010" translate="yes" xml:space="preserve">
          <source>Override this function in your <ph id="ph1">`CWnd`</ph>-derived class to identify the keyboard shortcut for your object.</source>
        </trans-unit>
        <trans-unit id="2011" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>IAccessible::get_accKeyboardShortcut<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318482)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2012" translate="yes" xml:space="preserve">
          <source>CWnd::get_accName</source>
        </trans-unit>
        <trans-unit id="2013" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the name of the specified object.</source>
        </trans-unit>
        <trans-unit id="2014" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2015" translate="yes" xml:space="preserve">
          <source>Specifies whether the name to be retrieved is that of the object or one of the object's child elements.</source>
        </trans-unit>
        <trans-unit id="2016" translate="yes" xml:space="preserve">
          <source>This parameter can be either CHILDID_SELF (to obtain information about the object) or a child ID (to obtain information about the object's child element).</source>
        </trans-unit>
        <trans-unit id="2017" translate="yes" xml:space="preserve">
          <source>Address of a <ph id="ph1">`BSTR`</ph> that receives a string containing the specified object's name.</source>
        </trans-unit>
        <trans-unit id="2018" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2019" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, a COM error code on failure.</source>
        </trans-unit>
        <trans-unit id="2020" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">**</bpt>Return Values<ept id="p1">**</ept> in <bpt id="p2">[</bpt>IAccessible::get_accName<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd318483)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2021" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2022" translate="yes" xml:space="preserve">
          <source>This function is part of MFC's <bpt id="p1">[</bpt>Active Accessibility<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd373592)</ept> support.</source>
        </trans-unit>
        <trans-unit id="2023" translate="yes" xml:space="preserve">
          <source>Override this function in your <ph id="ph1">`CWnd`</ph>-derived class to return the name of your object.</source>
        </trans-unit>
        <trans-unit id="2024" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>IAccessible::get_accName<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318483)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2025" translate="yes" xml:space="preserve">
          <source>CWnd::get_accParent</source>
        </trans-unit>
        <trans-unit id="2026" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the <ph id="ph1">`IDispatch`</ph> interface of the object's parent.</source>
        </trans-unit>
        <trans-unit id="2027" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2028" translate="yes" xml:space="preserve">
          <source>ppdispParent</source>
        </trans-unit>
        <trans-unit id="2029" translate="yes" xml:space="preserve">
          <source>Receives the address of the parent object's <ph id="ph1">`IDispatch`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="2030" translate="yes" xml:space="preserve">
          <source>The variable is set to NULL if no parent exists, or if the child cannot access its parent.</source>
        </trans-unit>
        <trans-unit id="2031" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2032" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, a COM error code on failure.</source>
        </trans-unit>
        <trans-unit id="2033" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">**</bpt>Return Values<ept id="p1">**</ept> in <bpt id="p2">[</bpt>IAccessible::get_accParent<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd318484)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2034" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2035" translate="yes" xml:space="preserve">
          <source>This function is part of MFC's <bpt id="p1">[</bpt>Active Accessibility<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd373592)</ept> support.</source>
        </trans-unit>
        <trans-unit id="2036" translate="yes" xml:space="preserve">
          <source>In most cases you don't have to override this function.</source>
        </trans-unit>
        <trans-unit id="2037" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>IAccessible::get_accParent<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318484)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2038" translate="yes" xml:space="preserve">
          <source>CWnd::get_accRole</source>
        </trans-unit>
        <trans-unit id="2039" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve information that describes the role of the specified object.</source>
        </trans-unit>
        <trans-unit id="2040" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2041" translate="yes" xml:space="preserve">
          <source>Specifies whether the role information to be retrieved is that of the object or one of the object's child elements.</source>
        </trans-unit>
        <trans-unit id="2042" translate="yes" xml:space="preserve">
          <source>This parameter can be either CHILDID_SELF (to obtain information about the object) or a child ID (to obtain information about the object's child element).</source>
        </trans-unit>
        <trans-unit id="2043" translate="yes" xml:space="preserve">
          <source>Receives the role information.</source>
        </trans-unit>
        <trans-unit id="2044" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">`pvarRole`</ph> in <bpt id="p1">[</bpt>IAccessible::get_accRole<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318485)</ept> in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2045" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2046" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, a COM error code on failure.</source>
        </trans-unit>
        <trans-unit id="2047" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">**</bpt>Return Values<ept id="p1">**</ept> in <bpt id="p2">**</bpt>IAccessible::get_accRole<ept id="p2">**</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2048" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2049" translate="yes" xml:space="preserve">
          <source>This function is part of MFC's <bpt id="p1">[</bpt>Active Accessibility<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd373592)</ept> support.</source>
        </trans-unit>
        <trans-unit id="2050" translate="yes" xml:space="preserve">
          <source>Override this function in your <ph id="ph1">`CWnd`</ph>-derived class if you have nonwindowed user interface elements (other than windowless ActiveX controls, which MFC handles).</source>
        </trans-unit>
        <trans-unit id="2051" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>IAccessible::get_accRole<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318485)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2052" translate="yes" xml:space="preserve">
          <source>CWnd::get_accSelection</source>
        </trans-unit>
        <trans-unit id="2053" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the selected children of this object.</source>
        </trans-unit>
        <trans-unit id="2054" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2055" translate="yes" xml:space="preserve">
          <source>Receives information about which children are selected.</source>
        </trans-unit>
        <trans-unit id="2056" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">`pvarChildren`</ph> in <bpt id="p1">[</bpt>IAccessible::get_accSelection<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318486)</ept> in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2057" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2058" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, a COM error code on failure.</source>
        </trans-unit>
        <trans-unit id="2059" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">**</bpt>Return Values<ept id="p1">**</ept> in <bpt id="p2">**</bpt>IAccessible::get_accSelection<ept id="p2">**</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2060" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2061" translate="yes" xml:space="preserve">
          <source>This function is part of MFC's <bpt id="p1">[</bpt>Active Accessibility<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd373592)</ept> support.</source>
        </trans-unit>
        <trans-unit id="2062" translate="yes" xml:space="preserve">
          <source>Override this function in your <ph id="ph1">`CWnd`</ph>-derived class if you have nonwindowed user interface elements (other than windowless ActiveX controls, which MFC handles).</source>
        </trans-unit>
        <trans-unit id="2063" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>IAccessible::get_accSelection<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318486)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2064" translate="yes" xml:space="preserve">
          <source>CWnd::get_accState</source>
        </trans-unit>
        <trans-unit id="2065" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the current state of the specified object.</source>
        </trans-unit>
        <trans-unit id="2066" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2067" translate="yes" xml:space="preserve">
          <source>Specifies whether the state information to be retrieved is that of the object or one of the object's child elements.</source>
        </trans-unit>
        <trans-unit id="2068" translate="yes" xml:space="preserve">
          <source>This parameter can be either CHILDID_SELF (to obtain information about the object) or a child ID (to obtain information about the object's child element).</source>
        </trans-unit>
        <trans-unit id="2069" translate="yes" xml:space="preserve">
          <source>Receives information about the object's state.</source>
        </trans-unit>
        <trans-unit id="2070" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">`pvarState`</ph> in <bpt id="p1">[</bpt>IAccessible::get_accState<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318487)</ept> in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2071" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2072" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, a COM error code on failure.</source>
        </trans-unit>
        <trans-unit id="2073" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">**</bpt>Return Values<ept id="p1">**</ept> in <bpt id="p2">**</bpt>IAccessible::get_accState<ept id="p2">**</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2074" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2075" translate="yes" xml:space="preserve">
          <source>This function is part of MFC's <bpt id="p1">[</bpt>Active Accessibility<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd373592)</ept> support.</source>
        </trans-unit>
        <trans-unit id="2076" translate="yes" xml:space="preserve">
          <source>Override this function in your <ph id="ph1">`CWnd`</ph>-derived class if you have nonwindowed user interface elements (other than windowless ActiveX controls, which MFC handles).</source>
        </trans-unit>
        <trans-unit id="2077" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>IAccessible::get_accState<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318487)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2078" translate="yes" xml:space="preserve">
          <source>CWnd::get_accValue</source>
        </trans-unit>
        <trans-unit id="2079" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the value of the specified object.</source>
        </trans-unit>
        <trans-unit id="2080" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2081" translate="yes" xml:space="preserve">
          <source>Specifies whether the value information to be retrieved is that of the object or one of the object's child elements.</source>
        </trans-unit>
        <trans-unit id="2082" translate="yes" xml:space="preserve">
          <source>This parameter can be either CHILDID_SELF (to obtain information about the object) or a child ID (to obtain information about the object's child element).</source>
        </trans-unit>
        <trans-unit id="2083" translate="yes" xml:space="preserve">
          <source>Address of the <ph id="ph1">`BSTR`</ph> that receives a localized string containing the object's current value.</source>
        </trans-unit>
        <trans-unit id="2084" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2085" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, a COM error code on failure.</source>
        </trans-unit>
        <trans-unit id="2086" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">**</bpt>Return Values<ept id="p1">**</ept> in <bpt id="p2">[</bpt>IAccessible::get_accValue<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd318488)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2087" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2088" translate="yes" xml:space="preserve">
          <source>This function is part of MFC's <bpt id="p1">[</bpt>Active Accessibility<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd373592)</ept> support.</source>
        </trans-unit>
        <trans-unit id="2089" translate="yes" xml:space="preserve">
          <source>Override this function in your <ph id="ph1">`CWnd`</ph>-derived class if you have nonwindowed user interface elements (other than windowless ActiveX controls, which MFC handles).</source>
        </trans-unit>
        <trans-unit id="2090" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>IAccessible::get_accValue<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318488)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2091" translate="yes" xml:space="preserve">
          <source>CWnd::GetActiveWindow</source>
        </trans-unit>
        <trans-unit id="2092" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the active window.</source>
        </trans-unit>
        <trans-unit id="2093" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2094" translate="yes" xml:space="preserve">
          <source>The active window or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if no window was active at the time of the call.</source>
        </trans-unit>
        <trans-unit id="2095" translate="yes" xml:space="preserve">
          <source>The pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="2096" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2097" translate="yes" xml:space="preserve">
          <source>The active window is either the window that has the current input focus or the window explicitly made active by the <bpt id="p1">[</bpt>SetActiveWindow<ept id="p1">](#cwnd__setactivewindow)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="2098" translate="yes" xml:space="preserve">
          <source>CWnd::GetAncestor</source>
        </trans-unit>
        <trans-unit id="2099" translate="yes" xml:space="preserve">
          <source>Retrieves the ancestor window object of the specified window.</source>
        </trans-unit>
        <trans-unit id="2100" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2101" translate="yes" xml:space="preserve">
          <source>gaFlags</source>
        </trans-unit>
        <trans-unit id="2102" translate="yes" xml:space="preserve">
          <source>Specifies the ancestor to be retrieved.</source>
        </trans-unit>
        <trans-unit id="2103" translate="yes" xml:space="preserve">
          <source>For a complete list of possible values, see <bpt id="p1">[</bpt>GetAncestor<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633502)</ept>.</source>
        </trans-unit>
        <trans-unit id="2104" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2105" translate="yes" xml:space="preserve">
          <source>If the function succeeds, the return value is a pointer to the ancestor window object.</source>
        </trans-unit>
        <trans-unit id="2106" translate="yes" xml:space="preserve">
          <source>If the function fails, the return value is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2107" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2108" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the function <bpt id="p1">[</bpt>GetAncestor<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633502)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2109" translate="yes" xml:space="preserve">
          <source>CWnd::GetCapture</source>
        </trans-unit>
        <trans-unit id="2110" translate="yes" xml:space="preserve">
          <source>Retrieves the window that has the mouse capture.</source>
        </trans-unit>
        <trans-unit id="2111" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2112" translate="yes" xml:space="preserve">
          <source>Identifies the window that has the mouse capture.</source>
        </trans-unit>
        <trans-unit id="2113" translate="yes" xml:space="preserve">
          <source>It is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if no window has the mouse capture.</source>
        </trans-unit>
        <trans-unit id="2114" translate="yes" xml:space="preserve">
          <source>The return value may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="2115" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2116" translate="yes" xml:space="preserve">
          <source>Only one window has the mouse capture at any given time.</source>
        </trans-unit>
        <trans-unit id="2117" translate="yes" xml:space="preserve">
          <source>A window receives the mouse capture when the <bpt id="p1">[</bpt>SetCapture<ept id="p1">](#cwnd__setcapture)</ept> member function is called.</source>
        </trans-unit>
        <trans-unit id="2118" translate="yes" xml:space="preserve">
          <source>This window receives mouse input whether or not the cursor is within its borders.</source>
        </trans-unit>
        <trans-unit id="2119" translate="yes" xml:space="preserve">
          <source>CWnd::GetCaretPos</source>
        </trans-unit>
        <trans-unit id="2120" translate="yes" xml:space="preserve">
          <source>Retrieves the client coordinates of the caret's current position and returns them as a <ph id="ph1">`CPoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="2121" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CPoint<ept id="p1">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object containing the coordinates of the caret's position.</source>
        </trans-unit>
        <trans-unit id="2123" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2124" translate="yes" xml:space="preserve">
          <source>The caret position is given in the client coordinates of the <ph id="ph1">`CWnd`</ph> window.</source>
        </trans-unit>
        <trans-unit id="2125" translate="yes" xml:space="preserve">
          <source>CWnd::GetCheckedRadioButton</source>
        </trans-unit>
        <trans-unit id="2126" translate="yes" xml:space="preserve">
          <source>Retrieves the ID of the currently checked radio button in the specified group.</source>
        </trans-unit>
        <trans-unit id="2127" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2128" translate="yes" xml:space="preserve">
          <source>Specifies the integer identifier of the first radio button in the group.</source>
        </trans-unit>
        <trans-unit id="2129" translate="yes" xml:space="preserve">
          <source>Specifies the integer identifier of the last radio button in the group.</source>
        </trans-unit>
        <trans-unit id="2130" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2131" translate="yes" xml:space="preserve">
          <source>ID of the checked radio button, or 0 if none is selected.</source>
        </trans-unit>
        <trans-unit id="2132" translate="yes" xml:space="preserve">
          <source>CWnd::GetClientRect</source>
        </trans-unit>
        <trans-unit id="2133" translate="yes" xml:space="preserve">
          <source>Copies the client coordinates of the <ph id="ph1">`CWnd`</ph> client area into the structure pointed to by <ph id="ph2">`lpRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="2134" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2135" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>RECT structure<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> or a <ph id="ph1">`CRect`</ph> object to receive the client coordinates.</source>
        </trans-unit>
        <trans-unit id="2136" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>left<ept id="p1">**</ept> and <bpt id="p2">**</bpt>top<ept id="p2">**</ept> members will be 0.</source>
        </trans-unit>
        <trans-unit id="2137" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>right<ept id="p1">**</ept> and <bpt id="p2">**</bpt>bottom<ept id="p2">**</ept> members will contain the width and height of the window.</source>
        </trans-unit>
        <trans-unit id="2138" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2139" translate="yes" xml:space="preserve">
          <source>The client coordinates specify the upper-left and lower-right corners of the client area.</source>
        </trans-unit>
        <trans-unit id="2140" translate="yes" xml:space="preserve">
          <source>Since client coordinates are relative to the upper-left corners of the <ph id="ph1">`CWnd`</ph> client area, the coordinates of the upper-left corner are (0,0).</source>
        </trans-unit>
        <trans-unit id="2141" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="2142" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CWnd::IsIconic<ept id="p1">](#cwnd__isiconic)</ept>.</source>
        </trans-unit>
        <trans-unit id="2143" translate="yes" xml:space="preserve">
          <source>CWnd::GetClipboardOwner</source>
        </trans-unit>
        <trans-unit id="2144" translate="yes" xml:space="preserve">
          <source>Retrieves the current owner of the Clipboard.</source>
        </trans-unit>
        <trans-unit id="2145" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2146" translate="yes" xml:space="preserve">
          <source>Identifies the window that owns the Clipboard if the function is successful.</source>
        </trans-unit>
        <trans-unit id="2147" translate="yes" xml:space="preserve">
          <source>Otherwise, it is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2148" translate="yes" xml:space="preserve">
          <source>The returned pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="2149" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2150" translate="yes" xml:space="preserve">
          <source>The Clipboard can still contain data even if it is not currently owned.</source>
        </trans-unit>
        <trans-unit id="2151" translate="yes" xml:space="preserve">
          <source>CWnd::GetClipboardViewer</source>
        </trans-unit>
        <trans-unit id="2152" translate="yes" xml:space="preserve">
          <source>Retrieves the first window in the Clipboard-viewer chain.</source>
        </trans-unit>
        <trans-unit id="2153" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2154" translate="yes" xml:space="preserve">
          <source>Identifies the window currently responsible for displaying the Clipboard if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> (for example, if there is no viewer).</source>
        </trans-unit>
        <trans-unit id="2155" translate="yes" xml:space="preserve">
          <source>The returned pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="2156" translate="yes" xml:space="preserve">
          <source>CWnd::GetControlUnknown</source>
        </trans-unit>
        <trans-unit id="2157" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve a pointer to an unknown OLE control.</source>
        </trans-unit>
        <trans-unit id="2158" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2159" translate="yes" xml:space="preserve">
          <source>A pointer to the <bpt id="p1">[</bpt>IUnknown<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms680509)</ept> interface of the OLE control represented by this <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="2160" translate="yes" xml:space="preserve">
          <source>If this object does not represent an OLE control, the return value is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2161" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2162" translate="yes" xml:space="preserve">
          <source>You should not release this <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> pointer.</source>
        </trans-unit>
        <trans-unit id="2163" translate="yes" xml:space="preserve">
          <source>Typically, you would use to obtain a specific interface of the control.</source>
        </trans-unit>
        <trans-unit id="2164" translate="yes" xml:space="preserve">
          <source>The interface pointer returned by <bpt id="p1">**</bpt>GetControlUnknown<ept id="p1">**</ept> is not reference-counted.</source>
        </trans-unit>
        <trans-unit id="2165" translate="yes" xml:space="preserve">
          <source>Do not call <bpt id="p1">[</bpt>IUnknown::Release<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms682317)</ept> on the pointer unless you have previously called <bpt id="p2">[</bpt>IUnknown::AddRef<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms691379)</ept> on it.</source>
        </trans-unit>
        <trans-unit id="2166" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="2167" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#96</source>
        </trans-unit>
        <trans-unit id="2168" translate="yes" xml:space="preserve">
          <source>CWnd::GetCurrentMessage</source>
        </trans-unit>
        <trans-unit id="2169" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the message this window is currently processing.</source>
        </trans-unit>
        <trans-unit id="2170" translate="yes" xml:space="preserve">
          <source>Should only be called when in an <bpt id="p1">**</bpt>On<ept id="p1">**</ept><bpt id="p2">*</bpt>Message<ept id="p2">*</ept> message-handler member function.</source>
        </trans-unit>
        <trans-unit id="2171" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2172" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the <bpt id="p1">[</bpt>MSG<ept id="p1">](../../mfc/reference/msg-structure1.md)</ept> structure that contains the message the window is currently processing.</source>
        </trans-unit>
        <trans-unit id="2173" translate="yes" xml:space="preserve">
          <source>Should only be called when in an <bpt id="p1">**</bpt>On<ept id="p1">**</ept><bpt id="p2">*</bpt>Message<ept id="p2">*</ept> handler.</source>
        </trans-unit>
        <trans-unit id="2174" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="2175" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CMDIFrameWnd::MDICascade<ept id="p1">](../../mfc/reference/cmdiframewnd-class.md#cmdiframewnd__mdicascade)</ept>.</source>
        </trans-unit>
        <trans-unit id="2176" translate="yes" xml:space="preserve">
          <source>CWnd::GetDC</source>
        </trans-unit>
        <trans-unit id="2177" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to a common, class, or private device context for the client area depending on the class style specified for the <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="2178" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2179" translate="yes" xml:space="preserve">
          <source>Identifies the device context for the <ph id="ph1">`CWnd`</ph> client area if successful; otherwise, the return value is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2180" translate="yes" xml:space="preserve">
          <source>The pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="2181" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2182" translate="yes" xml:space="preserve">
          <source>For common device contexts, <ph id="ph1">`GetDC`</ph> assigns default attributes to the context each time it is retrieved.</source>
        </trans-unit>
        <trans-unit id="2183" translate="yes" xml:space="preserve">
          <source>For class and private contexts, <ph id="ph1">`GetDC`</ph> leaves the previously assigned attributes unchanged.</source>
        </trans-unit>
        <trans-unit id="2184" translate="yes" xml:space="preserve">
          <source>The device context can be used in subsequent graphics device interface (GDI) functions to draw in the client area.</source>
        </trans-unit>
        <trans-unit id="2185" translate="yes" xml:space="preserve">
          <source>Unless the device context belongs to a window class, the <bpt id="p1">[</bpt>ReleaseDC<ept id="p1">](#cwnd__releasedc)</ept> member function must be called to release the context after painting.</source>
        </trans-unit>
        <trans-unit id="2186" translate="yes" xml:space="preserve">
          <source>A device context belonging to the <ph id="ph1">`CWnd`</ph> class is returned by the <ph id="ph2">`GetDC`</ph> member function if <bpt id="p1">**</bpt>CS_CLASSDC<ept id="p1">**</ept>, <bpt id="p2">**</bpt>CS_OWNDC<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>CS_PARENTDC<ept id="p3">**</ept> was specified as a style in the <bpt id="p4">**</bpt>WNDCLASS<ept id="p4">**</ept> structure when the class was registered.</source>
        </trans-unit>
        <trans-unit id="2187" translate="yes" xml:space="preserve">
          <source>CWnd::GetDCEx</source>
        </trans-unit>
        <trans-unit id="2188" translate="yes" xml:space="preserve">
          <source>Retrieves the handle of a device context for the <ph id="ph1">`CWnd`</ph> window.</source>
        </trans-unit>
        <trans-unit id="2189" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2190" translate="yes" xml:space="preserve">
          <source>Identifies a clipping region that may be combined with the visible region of the client window.</source>
        </trans-unit>
        <trans-unit id="2191" translate="yes" xml:space="preserve">
          <source>Can have one of the following preset values:</source>
        </trans-unit>
        <trans-unit id="2192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DCX_CACHE<ept id="p1">**</ept> Returns a device context from the cache rather than the <bpt id="p2">**</bpt>OWNDC<ept id="p2">**</ept> or <bpt id="p3">**</bpt>CLASSDC<ept id="p3">**</ept> window.</source>
        </trans-unit>
        <trans-unit id="2193" translate="yes" xml:space="preserve">
          <source>Overrides <bpt id="p1">**</bpt>CS_OWNDC<ept id="p1">**</ept> and <bpt id="p2">**</bpt>CS_CLASSDC<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DCX_CLIPCHILDREN<ept id="p1">**</ept> Excludes the visible regions of all child windows below the <ph id="ph1">`CWnd`</ph> window.</source>
        </trans-unit>
        <trans-unit id="2195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DCX_CLIPSIBLINGS<ept id="p1">**</ept> Excludes the visible regions of all sibling windows above the <ph id="ph1">`CWnd`</ph> window.</source>
        </trans-unit>
        <trans-unit id="2196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DCX_EXCLUDERGN<ept id="p1">**</ept> Excludes the clipping region identified by <ph id="ph1">`prgnClip`</ph> from the visible region of the returned device context.</source>
        </trans-unit>
        <trans-unit id="2197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DCX_INTERSECTRGN<ept id="p1">**</ept> Intersects the clipping region identified by <ph id="ph1">`prgnClip`</ph> within the visible region of the returned device context.</source>
        </trans-unit>
        <trans-unit id="2198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DCX_LOCKWINDOWUPDATE<ept id="p1">**</ept> Allows drawing even if there is a <ph id="ph1">`LockWindowUpdate`</ph> call in effect that would otherwise exclude this window.</source>
        </trans-unit>
        <trans-unit id="2199" translate="yes" xml:space="preserve">
          <source>This value is used for drawing during tracking.</source>
        </trans-unit>
        <trans-unit id="2200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DCX_PARENTCLIP<ept id="p1">**</ept> Uses the visible region of the parent window and ignores the parent window's <bpt id="p2">**</bpt>WS_CLIPCHILDREN<ept id="p2">**</ept> and <bpt id="p3">**</bpt>WS_PARENTDC<ept id="p3">**</ept> style bits.</source>
        </trans-unit>
        <trans-unit id="2201" translate="yes" xml:space="preserve">
          <source>This value sets the device context's origin to the upper-left corner of the <ph id="ph1">`CWnd`</ph> window.</source>
        </trans-unit>
        <trans-unit id="2202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DCX_WINDOW<ept id="p1">**</ept> Returns a device context that corresponds to the window rectangle rather than the client rectangle.</source>
        </trans-unit>
        <trans-unit id="2203" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2204" translate="yes" xml:space="preserve">
          <source>The device context for the specified window if the function is successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2205" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2206" translate="yes" xml:space="preserve">
          <source>The device context can be used in subsequent GDI functions to draw in the client area.</source>
        </trans-unit>
        <trans-unit id="2207" translate="yes" xml:space="preserve">
          <source>This function, which is an extension to the <bpt id="p1">[</bpt>GetDC<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144871)</ept> function, gives an application more control over how and whether a device context for a window is clipped.</source>
        </trans-unit>
        <trans-unit id="2208" translate="yes" xml:space="preserve">
          <source>Unless the device context belongs to a window class, the <bpt id="p1">[</bpt>ReleaseDC<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162920)</ept> function must be called to release the context after drawing.</source>
        </trans-unit>
        <trans-unit id="2209" translate="yes" xml:space="preserve">
          <source>Since only five common device contexts are available at any given time, failure to release a device context can prevent other applications from gaining access to a device context.</source>
        </trans-unit>
        <trans-unit id="2210" translate="yes" xml:space="preserve">
          <source>To obtain a cached device context, an application must specify <bpt id="p1">[</bpt>DCX_CACHE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144873)</ept>.</source>
        </trans-unit>
        <trans-unit id="2211" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>DCX_CACHE<ept id="p1">**</ept> is not specified and the window is neither <bpt id="p2">**</bpt>CS_OWNDC<ept id="p2">**</ept> nor <bpt id="p3">[</bpt>CS_CLASSDC<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms633576)</ept>, this function returns <bpt id="p4">**</bpt>NULL<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2212" translate="yes" xml:space="preserve">
          <source>A device context with special characteristics is returned by the <bpt id="p1">[</bpt>GetDCEx<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144873)</ept> function if the <bpt id="p2">**</bpt>CS_CLASSDC<ept id="p2">**</ept>, <bpt id="p3">[</bpt>CS_OWNDC<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms633576)</ept>, or <bpt id="p4">[</bpt>CS_PARENTDC<ept id="p4">](http://msdn.microsoft.com/library/windows/desktop/ms633576)</ept> style was specified in the <bpt id="p5">[</bpt>WNDCLASS<ept id="p5">](http://msdn.microsoft.com/library/windows/desktop/ms633576)</ept> structure when the class was registered.</source>
        </trans-unit>
        <trans-unit id="2213" translate="yes" xml:space="preserve">
          <source>For more information about these characteristics, see the description of the <bpt id="p1">**</bpt>WNDCLASS<ept id="p1">**</ept> structure in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2214" translate="yes" xml:space="preserve">
          <source>CWnd::GetDCRenderTarget</source>
        </trans-unit>
        <trans-unit id="2215" translate="yes" xml:space="preserve">
          <source>Retrieves the device context (DC) render target for the <ph id="ph1">`CWnd`</ph> window.</source>
        </trans-unit>
        <trans-unit id="2216" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2217" translate="yes" xml:space="preserve">
          <source>The device context render target for the specified window if the function is successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2218" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2219" translate="yes" xml:space="preserve">
          <source>CWnd::GetDescendantWindow</source>
        </trans-unit>
        <trans-unit id="2220" translate="yes" xml:space="preserve">
          <source>Call this member function to find the descendant window specified by the given ID.</source>
        </trans-unit>
        <trans-unit id="2221" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2222" translate="yes" xml:space="preserve">
          <source>Specifies the identifier of the control or child window to be retrieved.</source>
        </trans-unit>
        <trans-unit id="2223" translate="yes" xml:space="preserve">
          <source>Specifies whether the window to be returned can be temporary.</source>
        </trans-unit>
        <trans-unit id="2224" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, only a permanent window can be returned; if <bpt id="p2">**</bpt>FALSE,<ept id="p2">**</ept> the function can return a temporary window.</source>
        </trans-unit>
        <trans-unit id="2225" translate="yes" xml:space="preserve">
          <source>For more information on temporary windows see <bpt id="p1">[</bpt>Technical Note 3<ept id="p1">](../../mfc/tn003-mapping-of-windows-handles-to-objects.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2226" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2227" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CWnd`</ph> object, or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if no child window is found.</source>
        </trans-unit>
        <trans-unit id="2228" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2229" translate="yes" xml:space="preserve">
          <source>This member function searches the entire tree of child windows, not only the windows that are immediate children.</source>
        </trans-unit>
        <trans-unit id="2230" translate="yes" xml:space="preserve">
          <source>CWnd::GetDesktopWindow</source>
        </trans-unit>
        <trans-unit id="2231" translate="yes" xml:space="preserve">
          <source>Returns the Windows desktop window.</source>
        </trans-unit>
        <trans-unit id="2232" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2233" translate="yes" xml:space="preserve">
          <source>Identifies the Windows desktop window.</source>
        </trans-unit>
        <trans-unit id="2234" translate="yes" xml:space="preserve">
          <source>This pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="2235" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2236" translate="yes" xml:space="preserve">
          <source>The desktop window covers the entire screen and is the area on top of which all icons and other windows are painted.</source>
        </trans-unit>
        <trans-unit id="2237" translate="yes" xml:space="preserve">
          <source>CWnd::GetDlgCtrlID</source>
        </trans-unit>
        <trans-unit id="2238" translate="yes" xml:space="preserve">
          <source>Returns the window or control ID value for any child window, not only that of a control in a dialog box.</source>
        </trans-unit>
        <trans-unit id="2239" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2240" translate="yes" xml:space="preserve">
          <source>The numeric identifier of the <ph id="ph1">`CWnd`</ph> child window if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2241" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2242" translate="yes" xml:space="preserve">
          <source>Since top-level windows do not have an ID value, the return value of this function is invalid if the <ph id="ph1">`CWnd`</ph> is a top-level window.</source>
        </trans-unit>
        <trans-unit id="2243" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="2244" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CWnd::OnCtlColor<ept id="p1">](#cwnd__onctlcolor)</ept>.</source>
        </trans-unit>
        <trans-unit id="2245" translate="yes" xml:space="preserve">
          <source>CWnd::GetDlgItem</source>
        </trans-unit>
        <trans-unit id="2246" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the specified control or child window in a dialog box or other window.</source>
        </trans-unit>
        <trans-unit id="2247" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2248" translate="yes" xml:space="preserve">
          <source>Specifies the identifier of the control or child window to be retrieved.</source>
        </trans-unit>
        <trans-unit id="2249" translate="yes" xml:space="preserve">
          <source>A pointer to a child window.</source>
        </trans-unit>
        <trans-unit id="2250" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2251" translate="yes" xml:space="preserve">
          <source>A pointer to the given control or child window.</source>
        </trans-unit>
        <trans-unit id="2252" translate="yes" xml:space="preserve">
          <source>If no control with the integer ID given by the <ph id="ph1">`nID`</ph> parameter exists, the value is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2253" translate="yes" xml:space="preserve">
          <source>The returned pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="2254" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2255" translate="yes" xml:space="preserve">
          <source>The pointer returned is usually cast to the type of control identified by <ph id="ph1">`nID`</ph>.</source>
        </trans-unit>
        <trans-unit id="2256" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="2257" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#97</source>
        </trans-unit>
        <trans-unit id="2258" translate="yes" xml:space="preserve">
          <source>CWnd::GetDlgItemInt</source>
        </trans-unit>
        <trans-unit id="2259" translate="yes" xml:space="preserve">
          <source>Retrieves the text of the control identified by <ph id="ph1">`nID`</ph>.</source>
        </trans-unit>
        <trans-unit id="2260" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2261" translate="yes" xml:space="preserve">
          <source>Specifies the integer identifier of the dialog-box control to be translated.</source>
        </trans-unit>
        <trans-unit id="2262" translate="yes" xml:space="preserve">
          <source>Points to the Boolean variable that is to receive the translated flag.</source>
        </trans-unit>
        <trans-unit id="2263" translate="yes" xml:space="preserve">
          <source>Specifies whether the value to be retrieved is signed.</source>
        </trans-unit>
        <trans-unit id="2264" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2265" translate="yes" xml:space="preserve">
          <source>Specifies the translated value of the dialog-box item text.</source>
        </trans-unit>
        <trans-unit id="2266" translate="yes" xml:space="preserve">
          <source>Since 0 is a valid return value, <ph id="ph1">`lpTrans`</ph> must be used to detect errors.</source>
        </trans-unit>
        <trans-unit id="2267" translate="yes" xml:space="preserve">
          <source>If a signed return value is desired, cast it as an <ph id="ph1">`int`</ph> type.</source>
        </trans-unit>
        <trans-unit id="2268" translate="yes" xml:space="preserve">
          <source>The function returns 0 if the translated number is greater than INT_MAX (for signed numbers) or UINT_MAX (for unsigned).</source>
        </trans-unit>
        <trans-unit id="2269" translate="yes" xml:space="preserve">
          <source>When errors occur, such as encountering nonnumeric characters and exceeding the above maximum, <ph id="ph1">`GetDlgItemInt`</ph> copies 0 to the location pointed to by <ph id="ph2">`lpTrans`</ph>.</source>
        </trans-unit>
        <trans-unit id="2270" translate="yes" xml:space="preserve">
          <source>If there are no errors, <ph id="ph1">`lpTrans`</ph> receives a nonzero value.</source>
        </trans-unit>
        <trans-unit id="2271" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpTrans`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, <ph id="ph2">`GetDlgItemInt`</ph> does not warn about errors.</source>
        </trans-unit>
        <trans-unit id="2272" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2273" translate="yes" xml:space="preserve">
          <source>It translates the text of the specified control in the given dialog box into an integer value by stripping any extra spaces at the beginning of the text and converting decimal digits.</source>
        </trans-unit>
        <trans-unit id="2274" translate="yes" xml:space="preserve">
          <source>It stops the translation when it reaches the end of the text or encounters any nonnumeric character.</source>
        </trans-unit>
        <trans-unit id="2275" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bSigned`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, <ph id="ph2">`GetDlgItemInt`</ph> checks for a minus sign (–) at the beginning of the text and translates the text into a signed number.</source>
        </trans-unit>
        <trans-unit id="2276" translate="yes" xml:space="preserve">
          <source>Otherwise, it creates an unsigned value.</source>
        </trans-unit>
        <trans-unit id="2277" translate="yes" xml:space="preserve">
          <source>It sends a <bpt id="p1">[</bpt>WM_GETTEXT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632627)</ept> message to the control.</source>
        </trans-unit>
        <trans-unit id="2278" translate="yes" xml:space="preserve">
          <source>CWnd::GetDlgItemText</source>
        </trans-unit>
        <trans-unit id="2279" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the title or text associated with a control in a dialog box.</source>
        </trans-unit>
        <trans-unit id="2280" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2281" translate="yes" xml:space="preserve">
          <source>Specifies the integer identifier of the control whose title is to be retrieved.</source>
        </trans-unit>
        <trans-unit id="2282" translate="yes" xml:space="preserve">
          <source>Points to the buffer to receive the control's title or text.</source>
        </trans-unit>
        <trans-unit id="2283" translate="yes" xml:space="preserve">
          <source>Specifies the maximum length (in characters) of the string to be copied to <ph id="ph1">`lpStr`</ph>.</source>
        </trans-unit>
        <trans-unit id="2284" translate="yes" xml:space="preserve">
          <source>If the string is longer than <ph id="ph1">`nMaxCount`</ph>, it is truncated.</source>
        </trans-unit>
        <trans-unit id="2285" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2286" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2287" translate="yes" xml:space="preserve">
          <source>Specifies the actual number of characters copied to the buffer, not including the terminating null character.</source>
        </trans-unit>
        <trans-unit id="2288" translate="yes" xml:space="preserve">
          <source>The value is 0 if no text is copied.</source>
        </trans-unit>
        <trans-unit id="2289" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2290" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GetDlgItemText`</ph> member function copies the text to the location pointed to by <ph id="ph2">`lpStr`</ph> and returns a count of the number of bytes it copies.</source>
        </trans-unit>
        <trans-unit id="2291" translate="yes" xml:space="preserve">
          <source>CWnd::GetDSCCursor</source>
        </trans-unit>
        <trans-unit id="2292" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve a pointer to the underlying cursor that is defined by the DataSource, UserName, Password, and SQL properties of the data-source control.</source>
        </trans-unit>
        <trans-unit id="2293" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2294" translate="yes" xml:space="preserve">
          <source>A pointer to a cursor that is defined by a data-source control.</source>
        </trans-unit>
        <trans-unit id="2295" translate="yes" xml:space="preserve">
          <source>MFC takes care of calling <ph id="ph1">`AddRef`</ph> for the pointer.</source>
        </trans-unit>
        <trans-unit id="2296" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2297" translate="yes" xml:space="preserve">
          <source>Use the returned pointer to set the ICursor property of a complex data-bound control, such as the data-bound grid control.</source>
        </trans-unit>
        <trans-unit id="2298" translate="yes" xml:space="preserve">
          <source>A data-source control will not become active until the first bound control requests its cursor.</source>
        </trans-unit>
        <trans-unit id="2299" translate="yes" xml:space="preserve">
          <source>This can happen either explicitly by a call to <ph id="ph1">`GetDSCCursor`</ph> or implicitly by the MFC binding manager.</source>
        </trans-unit>
        <trans-unit id="2300" translate="yes" xml:space="preserve">
          <source>In either case, you can force a data-source control to become active by calling <ph id="ph1">`GetDSCCursor`</ph> and then calling <bpt id="p1">**</bpt>Release<ept id="p1">**</ept> on the returned pointer to <bpt id="p2">**</bpt>IUnknown<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2301" translate="yes" xml:space="preserve">
          <source>Activation will cause the data-source control to attempt to connect to the underlying data source.</source>
        </trans-unit>
        <trans-unit id="2302" translate="yes" xml:space="preserve">
          <source>The returned pointer might be used in the following context:</source>
        </trans-unit>
        <trans-unit id="2303" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="2304" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxDataBinding#1</source>
        </trans-unit>
        <trans-unit id="2305" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxDataBinding#5</source>
        </trans-unit>
        <trans-unit id="2306" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxDataBinding#3</source>
        </trans-unit>
        <trans-unit id="2307" translate="yes" xml:space="preserve">
          <source>CWnd::GetDynamicLayout</source>
        </trans-unit>
        <trans-unit id="2308" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the dynamic layout manager object.</source>
        </trans-unit>
        <trans-unit id="2309" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2310" translate="yes" xml:space="preserve">
          <source>A pointer to the dynamic layout manager object, or NULL if dynamic layout is not enabled.</source>
        </trans-unit>
        <trans-unit id="2311" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2312" translate="yes" xml:space="preserve">
          <source>The window object owns and manages the lifetime of the returned pointer, so it should only be used to access the object; do not delete the pointer or store the pointer permanently.</source>
        </trans-unit>
        <trans-unit id="2313" translate="yes" xml:space="preserve">
          <source>CWnd::GetExStyle</source>
        </trans-unit>
        <trans-unit id="2314" translate="yes" xml:space="preserve">
          <source>Returns the window's extended style.</source>
        </trans-unit>
        <trans-unit id="2315" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2316" translate="yes" xml:space="preserve">
          <source>The window's extended style.</source>
        </trans-unit>
        <trans-unit id="2317" translate="yes" xml:space="preserve">
          <source>For more information about the extended window styles used in MFC, see <bpt id="p1">[</bpt>Extended Window Styles<ept id="p1">](../../mfc/reference/extended-window-styles.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2318" translate="yes" xml:space="preserve">
          <source>CWnd::GetFocus</source>
        </trans-unit>
        <trans-unit id="2319" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the <ph id="ph1">`CWnd`</ph> that currently has the input focus.</source>
        </trans-unit>
        <trans-unit id="2320" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2321" translate="yes" xml:space="preserve">
          <source>A pointer to the window that has the current focus, or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if there is no focus window.</source>
        </trans-unit>
        <trans-unit id="2322" translate="yes" xml:space="preserve">
          <source>The pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="2323" translate="yes" xml:space="preserve">
          <source>CWnd::GetFont</source>
        </trans-unit>
        <trans-unit id="2324" translate="yes" xml:space="preserve">
          <source>Sends the <ph id="ph1">`WM_GETFONT`</ph> message to the window to retrieve the current font.</source>
        </trans-unit>
        <trans-unit id="2325" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2326" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>CFont<ept id="p1">](../../mfc/reference/cfont-class.md)</ept> object that is attached to the current font for the window.</source>
        </trans-unit>
        <trans-unit id="2327" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2328" translate="yes" xml:space="preserve">
          <source>This method has no effect unless the window processes the <ph id="ph1">`WM_GETFONT`</ph> message.</source>
        </trans-unit>
        <trans-unit id="2329" translate="yes" xml:space="preserve">
          <source>Many MFC classes that derive from <ph id="ph1">`CWnd`</ph> process this message because they are attached to a predefined window class that includes a message handler for the <ph id="ph2">`WM_GETFONT`</ph> message.</source>
        </trans-unit>
        <trans-unit id="2330" translate="yes" xml:space="preserve">
          <source>To use this method, classes that you derive from <ph id="ph1">`CWnd`</ph> must define a method handler for the <ph id="ph2">`WM_GETFONT`</ph> message.</source>
        </trans-unit>
        <trans-unit id="2331" translate="yes" xml:space="preserve">
          <source>CWnd::GetForegroundWindow</source>
        </trans-unit>
        <trans-unit id="2332" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the foreground window (the window with which the user is currently working).</source>
        </trans-unit>
        <trans-unit id="2333" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2334" translate="yes" xml:space="preserve">
          <source>A pointer to the foreground window.</source>
        </trans-unit>
        <trans-unit id="2335" translate="yes" xml:space="preserve">
          <source>This may be a temporary <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="2336" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2337" translate="yes" xml:space="preserve">
          <source>The foreground window applies only to top-level windows (frame windows or dialog boxes).</source>
        </trans-unit>
        <trans-unit id="2338" translate="yes" xml:space="preserve">
          <source>CWnd::GetIcon</source>
        </trans-unit>
        <trans-unit id="2339" translate="yes" xml:space="preserve">
          <source>Call this member function to get the handle to either a big (32x32) or the handle to a small (16x16) icon, as indicated by <ph id="ph1">`bBigIcon`</ph>.</source>
        </trans-unit>
        <trans-unit id="2340" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2341" translate="yes" xml:space="preserve">
          <source>Specifies a 32 pixel by 32 pixel icon if <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>; specifies a 16 pixel by 16 pixel icon if <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2342" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2343" translate="yes" xml:space="preserve">
          <source>A handle to an icon.</source>
        </trans-unit>
        <trans-unit id="2344" translate="yes" xml:space="preserve">
          <source>If unsuccessful, returns <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2345" translate="yes" xml:space="preserve">
          <source>CWnd::GetLastActivePopup</source>
        </trans-unit>
        <trans-unit id="2346" translate="yes" xml:space="preserve">
          <source>Determines which pop-up window owned by <ph id="ph1">`CWnd`</ph> was most recently active.</source>
        </trans-unit>
        <trans-unit id="2347" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2348" translate="yes" xml:space="preserve">
          <source>Identifies the most recently active pop-up window.</source>
        </trans-unit>
        <trans-unit id="2349" translate="yes" xml:space="preserve">
          <source>The return value will be the window itself if any of the following conditions are met:</source>
        </trans-unit>
        <trans-unit id="2350" translate="yes" xml:space="preserve">
          <source>The window itself was most recently active.</source>
        </trans-unit>
        <trans-unit id="2351" translate="yes" xml:space="preserve">
          <source>The window does not own any pop-up windows.</source>
        </trans-unit>
        <trans-unit id="2352" translate="yes" xml:space="preserve">
          <source>The window is not a top-level window or is owned by another window.</source>
        </trans-unit>
        <trans-unit id="2353" translate="yes" xml:space="preserve">
          <source>The pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="2354" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="2355" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CWnd::FindWindow<ept id="p1">](#cwnd__findwindow)</ept>.</source>
        </trans-unit>
        <trans-unit id="2356" translate="yes" xml:space="preserve">
          <source>CWnd::GetLayeredWindowAttributes</source>
        </trans-unit>
        <trans-unit id="2357" translate="yes" xml:space="preserve">
          <source>Retrieves the opacity and transparency color key of a layered window.</source>
        </trans-unit>
        <trans-unit id="2358" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2359" translate="yes" xml:space="preserve">
          <source>pcrKey</source>
        </trans-unit>
        <trans-unit id="2360" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">**</bpt>COLORREF<ept id="p1">**</ept> value that receives the transparency color key to be used when composing the layered window.</source>
        </trans-unit>
        <trans-unit id="2361" translate="yes" xml:space="preserve">
          <source>All pixels painted by the window in this color will be transparent.</source>
        </trans-unit>
        <trans-unit id="2362" translate="yes" xml:space="preserve">
          <source>This can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if the argument is not needed.</source>
        </trans-unit>
        <trans-unit id="2363" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">**</bpt>BYTE<ept id="p1">**</ept> that receives the Alpha value used to describe the opacity of the layered window.</source>
        </trans-unit>
        <trans-unit id="2364" translate="yes" xml:space="preserve">
          <source>When the variable referred to by <ph id="ph1">`pbAlpha`</ph> is 0, the window is completely transparent.</source>
        </trans-unit>
        <trans-unit id="2365" translate="yes" xml:space="preserve">
          <source>When the variable referred to by <ph id="ph1">`pbAlpha`</ph> is 255, the window is opaque.</source>
        </trans-unit>
        <trans-unit id="2366" translate="yes" xml:space="preserve">
          <source>This can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if the argument is not needed.</source>
        </trans-unit>
        <trans-unit id="2367" translate="yes" xml:space="preserve">
          <source>pdwFlags</source>
        </trans-unit>
        <trans-unit id="2368" translate="yes" xml:space="preserve">
          <source>Pointer to a <ph id="ph1">`DWORD`</ph> that receives a layering flag.</source>
        </trans-unit>
        <trans-unit id="2369" translate="yes" xml:space="preserve">
          <source>This can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if the argument is not needed.</source>
        </trans-unit>
        <trans-unit id="2370" translate="yes" xml:space="preserve">
          <source>For a complete list of possible values, see <bpt id="p1">[</bpt>GetLayeredWindowAttributes<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633508)</ept>.</source>
        </trans-unit>
        <trans-unit id="2371" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2372" translate="yes" xml:space="preserve">
          <source>Nonzero if the function succeeds; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2373" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2374" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the function <bpt id="p1">[</bpt>GetLayeredWindowAttributes<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633508)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2375" translate="yes" xml:space="preserve">
          <source>CWnd::GetMenu</source>
        </trans-unit>
        <trans-unit id="2376" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the menu for this window.</source>
        </trans-unit>
        <trans-unit id="2377" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2378" translate="yes" xml:space="preserve">
          <source>Identifies the menu.</source>
        </trans-unit>
        <trans-unit id="2379" translate="yes" xml:space="preserve">
          <source>The value is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if <ph id="ph1">`CWnd`</ph> has no menu.</source>
        </trans-unit>
        <trans-unit id="2380" translate="yes" xml:space="preserve">
          <source>The return value is undefined if <ph id="ph1">`CWnd`</ph> is a child window.</source>
        </trans-unit>
        <trans-unit id="2381" translate="yes" xml:space="preserve">
          <source>The returned pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="2382" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2383" translate="yes" xml:space="preserve">
          <source>This function should not be used for child windows because they do not have a menu.</source>
        </trans-unit>
        <trans-unit id="2384" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="2385" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#98</source>
        </trans-unit>
        <trans-unit id="2386" translate="yes" xml:space="preserve">
          <source>CWnd::GetMenuBarInfo</source>
        </trans-unit>
        <trans-unit id="2387" translate="yes" xml:space="preserve">
          <source>Retrieves information about the specified menu bar.</source>
        </trans-unit>
        <trans-unit id="2388" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2389" translate="yes" xml:space="preserve">
          <source>Specifies the menu object.</source>
        </trans-unit>
        <trans-unit id="2390" translate="yes" xml:space="preserve">
          <source>For a list of possible values, see <bpt id="p1">[</bpt>GetMenuBarInfo<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647833)</ept>.</source>
        </trans-unit>
        <trans-unit id="2391" translate="yes" xml:space="preserve">
          <source>Specifies the item for which to retrieve information.</source>
        </trans-unit>
        <trans-unit id="2392" translate="yes" xml:space="preserve">
          <source>If this parameter is zero, the function retrieves information about the menu itself.</source>
        </trans-unit>
        <trans-unit id="2393" translate="yes" xml:space="preserve">
          <source>If this parameter is 1, the function retrieves information about the first item on the menu, and so on.</source>
        </trans-unit>
        <trans-unit id="2394" translate="yes" xml:space="preserve">
          <source>pmbi</source>
        </trans-unit>
        <trans-unit id="2395" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>MENUBARINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647564)</ept> structure that receives the information.</source>
        </trans-unit>
        <trans-unit id="2396" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2397" translate="yes" xml:space="preserve">
          <source>Nonzero if the function succeeds; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2398" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2399" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the function <bpt id="p1">[</bpt>GetMenuBarInfo<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647833)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2400" translate="yes" xml:space="preserve">
          <source>CWnd::GetNextDlgGroupItem</source>
        </trans-unit>
        <trans-unit id="2401" translate="yes" xml:space="preserve">
          <source>Searches for the previous or next control within a group of controls in a dialog box.</source>
        </trans-unit>
        <trans-unit id="2402" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2403" translate="yes" xml:space="preserve">
          <source>Identifies the control to be used as the starting point for the search.</source>
        </trans-unit>
        <trans-unit id="2404" translate="yes" xml:space="preserve">
          <source>Specifies how the function is to search the group of controls in the dialog box.</source>
        </trans-unit>
        <trans-unit id="2405" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the function searches for the previous control in the group; if <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>, it searches for the next control in the group.</source>
        </trans-unit>
        <trans-unit id="2406" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">**</bpt>COleControlSiteOrWnd<ept id="p1">**</ept> control.</source>
        </trans-unit>
        <trans-unit id="2407" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`COleControlSiteOrWnd`</ph>, see <bpt id="p1">**</bpt>Remarks<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2408" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2409" translate="yes" xml:space="preserve">
          <source>Pointer to the previous or next control in the group if the member function is successful.</source>
        </trans-unit>
        <trans-unit id="2410" translate="yes" xml:space="preserve">
          <source>The returned pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="2411" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2412" translate="yes" xml:space="preserve">
          <source>A group of controls begins with a control that was created with the <bpt id="p1">[</bpt>WS_GROUP<ept id="p1">](../../mfc/reference/window-styles.md)</ept> style and ends with the last control that was not created with the <bpt id="p2">**</bpt>WS_GROUP<ept id="p2">**</ept> style.</source>
        </trans-unit>
        <trans-unit id="2413" translate="yes" xml:space="preserve">
          <source>By default, the <ph id="ph1">`GetNextDlgGroupItem`</ph> member function returns a pointer to the next control in the group.</source>
        </trans-unit>
        <trans-unit id="2414" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`pWndCtl`</ph> identifies the first control in the group and <ph id="ph2">`bPrevious`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, <ph id="ph3">`GetNextDlgGroupItem`</ph> returns a pointer to the last control in the group.</source>
        </trans-unit>
        <trans-unit id="2415" translate="yes" xml:space="preserve">
          <source>Because MFC supports windowless ActiveX controls, standard ActiveX controls, and windows, referring to a control by only an HWND no longer suffices.</source>
        </trans-unit>
        <trans-unit id="2416" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`COleControlSiteOrWnd`</ph> object includes information that identifies the object as a windowed ActiveX control, a windowless ActiveX control, or a window, as follows:</source>
        </trans-unit>
        <trans-unit id="2417" translate="yes" xml:space="preserve">
          <source>Control or window type</source>
        </trans-unit>
        <trans-unit id="2418" translate="yes" xml:space="preserve">
          <source>Identifying information</source>
        </trans-unit>
        <trans-unit id="2419" translate="yes" xml:space="preserve">
          <source>Windowed ActiveX control</source>
        </trans-unit>
        <trans-unit id="2420" translate="yes" xml:space="preserve">
          <source>Contains an HWND and associates a <bpt id="p1">[</bpt>COleControlSite<ept id="p1">](../../mfc/reference/colecontrolsite-class.md)</ept> object with it.</source>
        </trans-unit>
        <trans-unit id="2421" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`m_hWnd`</ph> member of <ph id="ph2">`COleControlSiteOrWnd`</ph> is set to the HWND of the control, and the <bpt id="p1">**</bpt>m_pSite<ept id="p1">**</ept> member points to the control's <ph id="ph3">`COleControlSite`</ph>.</source>
        </trans-unit>
        <trans-unit id="2422" translate="yes" xml:space="preserve">
          <source>Windowless ActiveX control</source>
        </trans-unit>
        <trans-unit id="2423" translate="yes" xml:space="preserve">
          <source>Contains no <ph id="ph1">`HWND`</ph>.</source>
        </trans-unit>
        <trans-unit id="2424" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>m_pSite<ept id="p1">**</ept> member of <ph id="ph1">`COleControlSiteOrWnd`</ph> points to the control's <ph id="ph2">`COleControlSite`</ph>, and the <bpt id="p2">**</bpt>m_hWnd<ept id="p2">**</ept> member is <bpt id="p3">**</bpt>NULL<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2425" translate="yes" xml:space="preserve">
          <source>Standard window</source>
        </trans-unit>
        <trans-unit id="2426" translate="yes" xml:space="preserve">
          <source>Contains just an <ph id="ph1">`HWND`</ph>.</source>
        </trans-unit>
        <trans-unit id="2427" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`m_hWnd`</ph> member of <ph id="ph2">`COleControlSiteOrWnd`</ph> is set to the <ph id="ph3">`HWND`</ph> of the window, and the <bpt id="p1">**</bpt>m_pSite<ept id="p1">**</ept> member is <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2428" translate="yes" xml:space="preserve">
          <source>CWnd::GetNextDlgTabItem</source>
        </trans-unit>
        <trans-unit id="2429" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the first control that was created with the <bpt id="p1">[</bpt>WS_TABSTOP<ept id="p1">](window-styles.md)</ept> style and that precedes or follows the specified control.</source>
        </trans-unit>
        <trans-unit id="2430" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2431" translate="yes" xml:space="preserve">
          <source>Identifies the control to be used as the starting point for the search.</source>
        </trans-unit>
        <trans-unit id="2432" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">**</bpt>COleControlSiteOrWnd<ept id="p1">**</ept> control.</source>
        </trans-unit>
        <trans-unit id="2433" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`COleControlSiteOrWnd`</ph>, see <bpt id="p1">[</bpt>CWnd::GetNextDlgGroupItem<ept id="p1">](#cwnd__getnextdlggroupitem)</ept>.</source>
        </trans-unit>
        <trans-unit id="2434" translate="yes" xml:space="preserve">
          <source>Specifies how the function is to search the dialog box.</source>
        </trans-unit>
        <trans-unit id="2435" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the function searches for the previous control in the dialog box; if <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>, it searches for the next control.</source>
        </trans-unit>
        <trans-unit id="2436" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2437" translate="yes" xml:space="preserve">
          <source>Pointer to the previous or next control that has the <bpt id="p1">**</bpt>WS_TABSTOP<ept id="p1">**</ept> style, if the member function is successful.</source>
        </trans-unit>
        <trans-unit id="2438" translate="yes" xml:space="preserve">
          <source>The returned pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="2439" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`COleControlSiteOrWnd`</ph>, see <bpt id="p1">[</bpt>CWnd::GetNextDlgGroupItem<ept id="p1">](#cwnd__getnextdlggroupitem)</ept>.</source>
        </trans-unit>
        <trans-unit id="2440" translate="yes" xml:space="preserve">
          <source>CWnd::GetNextWindow</source>
        </trans-unit>
        <trans-unit id="2441" translate="yes" xml:space="preserve">
          <source>Searches for the next (or previous) window in the window manager's list.</source>
        </trans-unit>
        <trans-unit id="2442" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2443" translate="yes" xml:space="preserve">
          <source>Specifies whether the function returns a pointer to the next window or the previous window.</source>
        </trans-unit>
        <trans-unit id="2444" translate="yes" xml:space="preserve">
          <source>It can be either <bpt id="p1">**</bpt>GW_HWNDNEXT<ept id="p1">**</ept>, which returns the window that follows the <ph id="ph1">`CWnd`</ph> object on the window manager's list, or <bpt id="p2">**</bpt>GW_HWNDPREV<ept id="p2">**</ept>, which returns the previous window on the window manager's list.</source>
        </trans-unit>
        <trans-unit id="2445" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2446" translate="yes" xml:space="preserve">
          <source>Identifies the next (or the previous) window in the window manager's list if the member function is successful.</source>
        </trans-unit>
        <trans-unit id="2447" translate="yes" xml:space="preserve">
          <source>The returned pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="2448" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2449" translate="yes" xml:space="preserve">
          <source>The window manager's list contains entries for all top-level windows, their associated child windows, and the child windows of any child windows.</source>
        </trans-unit>
        <trans-unit id="2450" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`CWnd`</ph> is a top-level window, the function searches for the next (or previous) top-level window; if <ph id="ph2">`CWnd`</ph> is a child window, the function searches for the next (or previous) child window.</source>
        </trans-unit>
        <trans-unit id="2451" translate="yes" xml:space="preserve">
          <source>CWnd::GetOleControlSite</source>
        </trans-unit>
        <trans-unit id="2452" translate="yes" xml:space="preserve">
          <source>Retrieves the custom site for the specified ActiveX control.</source>
        </trans-unit>
        <trans-unit id="2453" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2454" translate="yes" xml:space="preserve">
          <source>The ID of the ActiveX control.</source>
        </trans-unit>
        <trans-unit id="2455" translate="yes" xml:space="preserve">
          <source>CWnd::GetOpenClipboardWindow</source>
        </trans-unit>
        <trans-unit id="2456" translate="yes" xml:space="preserve">
          <source>Retrieves the handle of the window that currently has the Clipboard open.</source>
        </trans-unit>
        <trans-unit id="2457" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2458" translate="yes" xml:space="preserve">
          <source>The handle of the window that currently has the Clipboard open if the function is successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2459" translate="yes" xml:space="preserve">
          <source>CWnd::GetOwner</source>
        </trans-unit>
        <trans-unit id="2460" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the owner of the window.</source>
        </trans-unit>
        <trans-unit id="2461" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2462" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="2463" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2464" translate="yes" xml:space="preserve">
          <source>If the window has no owner, then a pointer to the parent window object is returned by default.</source>
        </trans-unit>
        <trans-unit id="2465" translate="yes" xml:space="preserve">
          <source>Note that the relationship between the owner and the owned differs from the parent-child aspect in several important aspects.</source>
        </trans-unit>
        <trans-unit id="2466" translate="yes" xml:space="preserve">
          <source>For example, a window with a parent is confined to its parent window's client area.</source>
        </trans-unit>
        <trans-unit id="2467" translate="yes" xml:space="preserve">
          <source>Owned windows can be drawn at any location on the desktop.</source>
        </trans-unit>
        <trans-unit id="2468" translate="yes" xml:space="preserve">
          <source>The ownership concept of this function is different from the ownership concept of <bpt id="p1">[</bpt>GetWindow<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633515)</ept>.</source>
        </trans-unit>
        <trans-unit id="2469" translate="yes" xml:space="preserve">
          <source>CWnd::GetParent</source>
        </trans-unit>
        <trans-unit id="2470" translate="yes" xml:space="preserve">
          <source>Call this function to get a pointer to a child window's parent window (if any).</source>
        </trans-unit>
        <trans-unit id="2471" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2472" translate="yes" xml:space="preserve">
          <source>See the Return Values section in <bpt id="p1">[</bpt>GetParent<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633510)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2473" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2474" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GetParent`</ph> function returns a pointer to the immediate parent (if it exists).</source>
        </trans-unit>
        <trans-unit id="2475" translate="yes" xml:space="preserve">
          <source>In contrast, the <bpt id="p1">[</bpt>GetParentOwner<ept id="p1">](#cwnd__getparentowner)</ept> function returns a pointer to the most immediate parent or owner window that is not a child window (does not have the <bpt id="p2">**</bpt>WS_CHILD<ept id="p2">**</ept> style).</source>
        </trans-unit>
        <trans-unit id="2476" translate="yes" xml:space="preserve">
          <source>If you have a child window within a child window <ph id="ph1">`GetParent`</ph> and <ph id="ph2">`GetParentOwner`</ph> return different results.</source>
        </trans-unit>
        <trans-unit id="2477" translate="yes" xml:space="preserve">
          <source>CWnd::GetParentFrame</source>
        </trans-unit>
        <trans-unit id="2478" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the parent frame window.</source>
        </trans-unit>
        <trans-unit id="2479" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2480" translate="yes" xml:space="preserve">
          <source>A pointer to a frame window if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2481" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2482" translate="yes" xml:space="preserve">
          <source>The member function searches up the parent chain until a <bpt id="p1">[</bpt>CFrameWnd<ept id="p1">](../../mfc/reference/cframewnd-class.md)</ept> (or derived class) object is found.</source>
        </trans-unit>
        <trans-unit id="2483" translate="yes" xml:space="preserve">
          <source>CWnd::GetParentOwner</source>
        </trans-unit>
        <trans-unit id="2484" translate="yes" xml:space="preserve">
          <source>Call this member function to get a pointer to a child window's parent window or owner window.</source>
        </trans-unit>
        <trans-unit id="2485" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2486" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="2487" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`CWnd`</ph> object is not attached to the handle, a temporary <ph id="ph2">`CWnd`</ph> object is created and attached.</source>
        </trans-unit>
        <trans-unit id="2488" translate="yes" xml:space="preserve">
          <source>The pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="2489" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2490" translate="yes" xml:space="preserve">
          <source>returns a pointer to the most immediate parent or owner window that is not a child window (does not have the <bpt id="p1">**</bpt>WS_CHILD<ept id="p1">**</ept> style).</source>
        </trans-unit>
        <trans-unit id="2491" translate="yes" xml:space="preserve">
          <source>The current owner window can be set with <bpt id="p1">[</bpt>SetOwner<ept id="p1">](#cwnd__setowner)</ept>.</source>
        </trans-unit>
        <trans-unit id="2492" translate="yes" xml:space="preserve">
          <source>By default, the parent of a window is its owner.</source>
        </trans-unit>
        <trans-unit id="2493" translate="yes" xml:space="preserve">
          <source>In contrast, the <bpt id="p1">[</bpt>GetParent<ept id="p1">](#cwnd__getparent)</ept> function returns a pointer to the immediate parent, whether it is a child window or not.</source>
        </trans-unit>
        <trans-unit id="2494" translate="yes" xml:space="preserve">
          <source>If you have a child window within a child window <ph id="ph1">`GetParent`</ph> and <ph id="ph2">`GetParentOwner`</ph> return different results.</source>
        </trans-unit>
        <trans-unit id="2495" translate="yes" xml:space="preserve">
          <source>CWnd::GetProperty</source>
        </trans-unit>
        <trans-unit id="2496" translate="yes" xml:space="preserve">
          <source>Call this member function to get the ActiveX control property specified by <ph id="ph1">`dwDispID`</ph>.</source>
        </trans-unit>
        <trans-unit id="2497" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2498" translate="yes" xml:space="preserve">
          <source>Identifies the property to be retrieved.</source>
        </trans-unit>
        <trans-unit id="2499" translate="yes" xml:space="preserve">
          <source>Specifies the type of the property to be retrieved.</source>
        </trans-unit>
        <trans-unit id="2500" translate="yes" xml:space="preserve">
          <source>For possible values, see the Remarks section for <bpt id="p1">[</bpt>COleDispatchDriver::InvokeHelper<ept id="p1">](../../mfc/reference/coledispatchdriver-class.md#coledispatchdriver__invokehelper)</ept>.</source>
        </trans-unit>
        <trans-unit id="2501" translate="yes" xml:space="preserve">
          <source>Address of the variable that will that will receive the property value.</source>
        </trans-unit>
        <trans-unit id="2502" translate="yes" xml:space="preserve">
          <source>It must match the type specified by <ph id="ph1">`vtProp`</ph>.</source>
        </trans-unit>
        <trans-unit id="2503" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2504" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GetProperty<ept id="p1">**</ept> returns the value through <ph id="ph1">`pvProp`</ph>.</source>
        </trans-unit>
        <trans-unit id="2505" translate="yes" xml:space="preserve">
          <source>This function should be called only on a <ph id="ph1">`CWnd`</ph> object that represents an ActiveX control.</source>
        </trans-unit>
        <trans-unit id="2506" translate="yes" xml:space="preserve">
          <source>For more information about using this member function with ActiveX Control Containers, see the article <bpt id="p1">[</bpt>ActiveX Control Containers: Programming ActiveX Controls in an ActiveX Control Container<ept id="p1">](../../mfc/programming-activex-controls-in-a-activex-control-container.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2507" translate="yes" xml:space="preserve">
          <source>CWnd::GetRenderTarget</source>
        </trans-unit>
        <trans-unit id="2508" translate="yes" xml:space="preserve">
          <source>Gets a render target that is associated with this window.</source>
        </trans-unit>
        <trans-unit id="2509" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2510" translate="yes" xml:space="preserve">
          <source>Pointer to the render target or NULL.</source>
        </trans-unit>
        <trans-unit id="2511" translate="yes" xml:space="preserve">
          <source>CWnd::GetSafeHwnd</source>
        </trans-unit>
        <trans-unit id="2512" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`m_hWnd`</ph>, or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if the <bpt id="p2">**</bpt>this<ept id="p2">**</ept> pointer is <bpt id="p3">**</bpt>NULL<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2513" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2514" translate="yes" xml:space="preserve">
          <source>Returns the window handle for a window.</source>
        </trans-unit>
        <trans-unit id="2515" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if the <ph id="ph1">`CWnd`</ph> is not attached to a window or if it is used with a <bpt id="p2">**</bpt>NULL CWnd<ept id="p2">**</ept> pointer.</source>
        </trans-unit>
        <trans-unit id="2516" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="2517" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CWnd::SubclassWindow<ept id="p1">](#cwnd__subclasswindow)</ept>.</source>
        </trans-unit>
        <trans-unit id="2518" translate="yes" xml:space="preserve">
          <source>CWnd::GetSafeOwner</source>
        </trans-unit>
        <trans-unit id="2519" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the owner window that should be used for dialog boxes or other modal windows.</source>
        </trans-unit>
        <trans-unit id="2520" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2521" translate="yes" xml:space="preserve">
          <source>A pointer to a parent <ph id="ph1">`CWnd`</ph> window.</source>
        </trans-unit>
        <trans-unit id="2522" translate="yes" xml:space="preserve">
          <source>May be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2523" translate="yes" xml:space="preserve">
          <source>pWndTop</source>
        </trans-unit>
        <trans-unit id="2524" translate="yes" xml:space="preserve">
          <source>A pointer to the window that is currently on top.</source>
        </trans-unit>
        <trans-unit id="2525" translate="yes" xml:space="preserve">
          <source>May be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2526" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2527" translate="yes" xml:space="preserve">
          <source>A pointer to the safe owner for the given window.</source>
        </trans-unit>
        <trans-unit id="2528" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2529" translate="yes" xml:space="preserve">
          <source>The safe owner is the first non-child parent window of <ph id="ph1">`pParent`</ph>.</source>
        </trans-unit>
        <trans-unit id="2530" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`pParent`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the thread's main window (retrieved via <bpt id="p2">[</bpt>AfxGetMainWnd<ept id="p2">](../../mfc/reference/application-information-and-management.md#afxgetmainwnd)</ept>) is used to find an owner.</source>
        </trans-unit>
        <trans-unit id="2531" translate="yes" xml:space="preserve">
          <source>The framework itself uses this function to determine the correct owner window for dialog boxes and property sheets where the owner is not specified.</source>
        </trans-unit>
        <trans-unit id="2532" translate="yes" xml:space="preserve">
          <source>CWnd::GetScrollBarCtrl</source>
        </trans-unit>
        <trans-unit id="2533" translate="yes" xml:space="preserve">
          <source>Call this member function to obtain a pointer to the specified sibling scroll bar or splitter window.</source>
        </trans-unit>
        <trans-unit id="2534" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2535" translate="yes" xml:space="preserve">
          <source>Specifies the type of scroll bar.</source>
        </trans-unit>
        <trans-unit id="2536" translate="yes" xml:space="preserve">
          <source>The parameter can take one of the following values:</source>
        </trans-unit>
        <trans-unit id="2537" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_HORZ<ept id="p1">**</ept> Retrieves the position of the horizontal scroll bar.</source>
        </trans-unit>
        <trans-unit id="2538" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_VERT<ept id="p1">**</ept> Retrieves the position of the vertical scroll bar.</source>
        </trans-unit>
        <trans-unit id="2539" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2540" translate="yes" xml:space="preserve">
          <source>A sibling scroll-bar control, or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if none.</source>
        </trans-unit>
        <trans-unit id="2541" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2542" translate="yes" xml:space="preserve">
          <source>This member function does not operate on scroll bars created when the <bpt id="p1">**</bpt>WS_HSCROLL<ept id="p1">**</ept> or <bpt id="p2">**</bpt>WS_VSCROLL<ept id="p2">**</ept> bits are set during the creation of a window.</source>
        </trans-unit>
        <trans-unit id="2543" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CWnd`</ph> implementation of this function simply returns <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2544" translate="yes" xml:space="preserve">
          <source>Derived classes, such as <ph id="ph1">`CView`</ph>, implement the described functionality.</source>
        </trans-unit>
        <trans-unit id="2545" translate="yes" xml:space="preserve">
          <source>CWnd::GetScrollBarInfo</source>
        </trans-unit>
        <trans-unit id="2546" translate="yes" xml:space="preserve">
          <source>Retrieves information about the specified scroll bar.</source>
        </trans-unit>
        <trans-unit id="2547" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2548" translate="yes" xml:space="preserve">
          <source>Specifies the menu object.</source>
        </trans-unit>
        <trans-unit id="2549" translate="yes" xml:space="preserve">
          <source>For a list of possible values, see <bpt id="p1">[</bpt>GetScrollBarInfo<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787581)</ept>.</source>
        </trans-unit>
        <trans-unit id="2550" translate="yes" xml:space="preserve">
          <source>psbi</source>
        </trans-unit>
        <trans-unit id="2551" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>SCROLLBARINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787535)</ept> structure that receives the information.</source>
        </trans-unit>
        <trans-unit id="2552" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2553" translate="yes" xml:space="preserve">
          <source>Nonzero if the function succeeds; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2554" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2555" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the function <bpt id="p1">[</bpt>GetScrollBarInfo<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787581)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2556" translate="yes" xml:space="preserve">
          <source>CWnd::GetScrollInfo</source>
        </trans-unit>
        <trans-unit id="2557" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the information that the <ph id="ph1">`SCROLLINFO`</ph> structure maintains about a scroll bar.</source>
        </trans-unit>
        <trans-unit id="2558" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2559" translate="yes" xml:space="preserve">
          <source>Specifies whether the scroll bar is a control or part of a window's nonclient area.</source>
        </trans-unit>
        <trans-unit id="2560" translate="yes" xml:space="preserve">
          <source>If it is part of the nonclient area, <ph id="ph1">`nBar`</ph> also indicates whether the scroll bar is positioned horizontally, vertically, or both.</source>
        </trans-unit>
        <trans-unit id="2561" translate="yes" xml:space="preserve">
          <source>It must be one of the following:</source>
        </trans-unit>
        <trans-unit id="2562" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_CTL<ept id="p1">**</ept> Retrieves the parameters for a scroll bar control.</source>
        </trans-unit>
        <trans-unit id="2563" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`m_hWnd`</ph> data member must be the handle of the scroll bar control.</source>
        </trans-unit>
        <trans-unit id="2564" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_HORZ<ept id="p1">**</ept> Retrieves the parameters for the window's standard horizontal scroll bar.</source>
        </trans-unit>
        <trans-unit id="2565" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_VERT<ept id="p1">**</ept> Retrieves the parameters for the window's standard vertical scroll bar.</source>
        </trans-unit>
        <trans-unit id="2566" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>SCROLLINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787537)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="2567" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for more information about this structure.</source>
        </trans-unit>
        <trans-unit id="2568" translate="yes" xml:space="preserve">
          <source>Specifies the scroll bar parameters to retrieve.</source>
        </trans-unit>
        <trans-unit id="2569" translate="yes" xml:space="preserve">
          <source>The default specifies a combination of <bpt id="p1">**</bpt>SIF_PAGE<ept id="p1">**</ept>, <bpt id="p2">**</bpt>SIF_POS<ept id="p2">**</ept>, <bpt id="p3">**</bpt>SIF_TRACKPOS<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>SIF_RANGE<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2570" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">`SCROLLINFO`</ph> for more information on the <bpt id="p1">*</bpt>nMask<ept id="p1">*</ept> values.</source>
        </trans-unit>
        <trans-unit id="2571" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2572" translate="yes" xml:space="preserve">
          <source>If the message retrieved any values, the return is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2573" translate="yes" xml:space="preserve">
          <source>Otherwise, it is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2574" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2575" translate="yes" xml:space="preserve">
          <source>enables applications to use 32-bit scroll positions.</source>
        </trans-unit>
        <trans-unit id="2576" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>SCROLLINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787537)</ept> structure contains information about a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (the thumb).</source>
        </trans-unit>
        <trans-unit id="2577" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">`SCROLLINFO`</ph> structure topic in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for more information about changing the structure defaults.</source>
        </trans-unit>
        <trans-unit id="2578" translate="yes" xml:space="preserve">
          <source>The MFC Windows message handlers that indicate scroll-bar position, <bpt id="p1">[</bpt>CWnd::OnHScroll<ept id="p1">](#cwnd__onhscroll)</ept> and <bpt id="p2">[</bpt>CWnd::OnVScroll<ept id="p2">](#cwnd__onvscroll)</ept>, provide only 16 bits of position data.</source>
        </trans-unit>
        <trans-unit id="2579" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`SetScrollInfo`</ph> provide 32 bits of scroll-bar position data.</source>
        </trans-unit>
        <trans-unit id="2580" translate="yes" xml:space="preserve">
          <source>Thus, an application can call <ph id="ph1">`GetScrollInfo`</ph> while processing either <ph id="ph2">`CWnd::OnHScroll`</ph> or <ph id="ph3">`CWnd::OnVScroll`</ph> to obtain 32-bit scroll-bar position data.</source>
        </trans-unit>
        <trans-unit id="2581" translate="yes" xml:space="preserve">
          <source>CWnd::GetScrollLimit</source>
        </trans-unit>
        <trans-unit id="2582" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the maximum scrolling position of the scroll bar.</source>
        </trans-unit>
        <trans-unit id="2583" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2584" translate="yes" xml:space="preserve">
          <source>Specifies the type of scroll bar.</source>
        </trans-unit>
        <trans-unit id="2585" translate="yes" xml:space="preserve">
          <source>The parameter can take one of the following values:</source>
        </trans-unit>
        <trans-unit id="2586" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_HORZ<ept id="p1">**</ept> Retrieves the scroll limit of the horizontal scroll bar.</source>
        </trans-unit>
        <trans-unit id="2587" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_VERT<ept id="p1">**</ept> Retrieves the scroll limit of the vertical scroll bar.</source>
        </trans-unit>
        <trans-unit id="2588" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2589" translate="yes" xml:space="preserve">
          <source>Specifies the maximum position of a scroll bar if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2590" translate="yes" xml:space="preserve">
          <source>CWnd::GetScrollPos</source>
        </trans-unit>
        <trans-unit id="2591" translate="yes" xml:space="preserve">
          <source>Retrieves the current position of the scroll box of a scroll bar.</source>
        </trans-unit>
        <trans-unit id="2592" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2593" translate="yes" xml:space="preserve">
          <source>Specifies the scroll bar to examine.</source>
        </trans-unit>
        <trans-unit id="2594" translate="yes" xml:space="preserve">
          <source>The parameter can take one of the following values:</source>
        </trans-unit>
        <trans-unit id="2595" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_HORZ<ept id="p1">**</ept> Retrieves the position of the horizontal scroll bar.</source>
        </trans-unit>
        <trans-unit id="2596" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_VERT<ept id="p1">**</ept> Retrieves the position of the vertical scroll bar.</source>
        </trans-unit>
        <trans-unit id="2597" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2598" translate="yes" xml:space="preserve">
          <source>Specifies the current position of the scroll box in the scroll bar if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2599" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2600" translate="yes" xml:space="preserve">
          <source>The current position is a relative value that depends on the current scrolling range.</source>
        </trans-unit>
        <trans-unit id="2601" translate="yes" xml:space="preserve">
          <source>For example, if the scrolling range is 50 to 100 and the scroll box is in the middle of the bar, the current position is 75.</source>
        </trans-unit>
        <trans-unit id="2602" translate="yes" xml:space="preserve">
          <source>CWnd::GetScrollRange</source>
        </trans-unit>
        <trans-unit id="2603" translate="yes" xml:space="preserve">
          <source>Copies the current minimum and maximum scroll-bar positions for the given scroll bar to the locations specified by <ph id="ph1">`lpMinPos`</ph> and <ph id="ph2">`lpMaxPos`</ph>.</source>
        </trans-unit>
        <trans-unit id="2604" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2605" translate="yes" xml:space="preserve">
          <source>Specifies the scroll bar to examine.</source>
        </trans-unit>
        <trans-unit id="2606" translate="yes" xml:space="preserve">
          <source>The parameter can take one of the following values:</source>
        </trans-unit>
        <trans-unit id="2607" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_HORZ<ept id="p1">**</ept> Retrieves the position of the horizontal scroll bar.</source>
        </trans-unit>
        <trans-unit id="2608" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_VERT<ept id="p1">**</ept> Retrieves the position of the vertical scroll bar.</source>
        </trans-unit>
        <trans-unit id="2609" translate="yes" xml:space="preserve">
          <source>Points to the integer variable that is to receive the minimum position.</source>
        </trans-unit>
        <trans-unit id="2610" translate="yes" xml:space="preserve">
          <source>Points to the integer variable that is to receive the maximum position.</source>
        </trans-unit>
        <trans-unit id="2611" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2612" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`CWnd`</ph> does not have a scroll bar, then the <ph id="ph2">`GetScrollRange`</ph> member function copies 0 to <ph id="ph3">`lpMinPos`</ph> and <ph id="ph4">`lpMaxPos`</ph>.</source>
        </trans-unit>
        <trans-unit id="2613" translate="yes" xml:space="preserve">
          <source>The default range for a standard scroll bar is 0 to 100.</source>
        </trans-unit>
        <trans-unit id="2614" translate="yes" xml:space="preserve">
          <source>The default range for a scroll-bar control is empty (both values are 0).</source>
        </trans-unit>
        <trans-unit id="2615" translate="yes" xml:space="preserve">
          <source>CWnd::GetStyle</source>
        </trans-unit>
        <trans-unit id="2616" translate="yes" xml:space="preserve">
          <source>Returns the current window style.</source>
        </trans-unit>
        <trans-unit id="2617" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2618" translate="yes" xml:space="preserve">
          <source>The window's style.</source>
        </trans-unit>
        <trans-unit id="2619" translate="yes" xml:space="preserve">
          <source>For more information about the window styles used in MFC, see <bpt id="p1">[</bpt>Window Styles<ept id="p1">](../../mfc/reference/window-styles.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2620" translate="yes" xml:space="preserve">
          <source>CWnd::GetSystemMenu</source>
        </trans-unit>
        <trans-unit id="2621" translate="yes" xml:space="preserve">
          <source>Allows the application to access the Control menu for copying and modification.</source>
        </trans-unit>
        <trans-unit id="2622" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2623" translate="yes" xml:space="preserve">
          <source>Specifies the action to be taken.</source>
        </trans-unit>
        <trans-unit id="2624" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bRevert`</ph> is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, <ph id="ph2">`GetSystemMenu`</ph> returns a handle to a copy of the Control menu currently in use.</source>
        </trans-unit>
        <trans-unit id="2625" translate="yes" xml:space="preserve">
          <source>This copy is initially identical to the Control menu but can be modified.</source>
        </trans-unit>
        <trans-unit id="2626" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bRevert`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, <ph id="ph2">`GetSystemMenu`</ph> resets the Control menu back to the default state.</source>
        </trans-unit>
        <trans-unit id="2627" translate="yes" xml:space="preserve">
          <source>The previous, possibly modified, Control menu, if any, is destroyed.</source>
        </trans-unit>
        <trans-unit id="2628" translate="yes" xml:space="preserve">
          <source>The return value is undefined in this case.</source>
        </trans-unit>
        <trans-unit id="2629" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2630" translate="yes" xml:space="preserve">
          <source>Identifies a copy of the Control menu if <ph id="ph1">`bRevert`</ph> is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2631" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bRevert`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the return value is undefined.</source>
        </trans-unit>
        <trans-unit id="2632" translate="yes" xml:space="preserve">
          <source>The returned pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="2633" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2634" translate="yes" xml:space="preserve">
          <source>Any window that does not use <ph id="ph1">`GetSystemMenu`</ph> to make its own copy of the Control menu receives the standard Control menu.</source>
        </trans-unit>
        <trans-unit id="2635" translate="yes" xml:space="preserve">
          <source>The pointer returned by the <ph id="ph1">`GetSystemMenu`</ph> member function can be used with the <bpt id="p1">[</bpt>CMenu::AppendMenu<ept id="p1">](../../mfc/reference/cmenu-class.md#cmenu__appendmenu)</ept>, <bpt id="p2">[</bpt>CMenu::InsertMenu<ept id="p2">](../../mfc/reference/cmenu-class.md#cmenu__insertmenu)</ept>, or <bpt id="p3">[</bpt>CMenu::ModifyMenu<ept id="p3">](../../mfc/reference/cmenu-class.md#cmenu__modifymenu)</ept> functions to change the Control menu.</source>
        </trans-unit>
        <trans-unit id="2636" translate="yes" xml:space="preserve">
          <source>The Control menu initially contains items identified with various ID values such as <bpt id="p1">**</bpt>SC_CLOSE<ept id="p1">**</ept>, <bpt id="p2">**</bpt>SC_MOVE<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>SC_SIZE<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2637" translate="yes" xml:space="preserve">
          <source>Items on the Control menu generate <bpt id="p1">[</bpt>WM_SYSCOMMAND<ept id="p1">](#cwnd__onsyscommand)</ept> messages.</source>
        </trans-unit>
        <trans-unit id="2638" translate="yes" xml:space="preserve">
          <source>All predefined Control-menu items have ID numbers greater than 0xF000.</source>
        </trans-unit>
        <trans-unit id="2639" translate="yes" xml:space="preserve">
          <source>If an application adds items to the Control menu, it should use ID numbers less than F000.</source>
        </trans-unit>
        <trans-unit id="2640" translate="yes" xml:space="preserve">
          <source>Windows may automatically make items unavailable on the standard Control menu.</source>
        </trans-unit>
        <trans-unit id="2641" translate="yes" xml:space="preserve">
          <source>can carry out its own selection or unavailability by responding to the <bpt id="p1">[</bpt>WM_INITMENU<ept id="p1">](#cwnd__oninitmenu)</ept> messages, which are sent before any menu is displayed.</source>
        </trans-unit>
        <trans-unit id="2642" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="2643" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#99</source>
        </trans-unit>
        <trans-unit id="2644" translate="yes" xml:space="preserve">
          <source>CWnd::GetTitleBarInfo</source>
        </trans-unit>
        <trans-unit id="2645" translate="yes" xml:space="preserve">
          <source>Retrieves information about the specified title bar.</source>
        </trans-unit>
        <trans-unit id="2646" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2647" translate="yes" xml:space="preserve">
          <source>pti</source>
        </trans-unit>
        <trans-unit id="2648" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>TITLEBARINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632608)</ept> structure that receives the information.</source>
        </trans-unit>
        <trans-unit id="2649" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2650" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the function <bpt id="p1">[</bpt>GetTitleBarInfo<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633513)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2651" translate="yes" xml:space="preserve">
          <source>CWnd::GetTopLevelFrame</source>
        </trans-unit>
        <trans-unit id="2652" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the window's top level frame window, if any.</source>
        </trans-unit>
        <trans-unit id="2653" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2654" translate="yes" xml:space="preserve">
          <source>Identifies the top-level frame window of the window.</source>
        </trans-unit>
        <trans-unit id="2655" translate="yes" xml:space="preserve">
          <source>The returned pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="2656" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2657" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`CWnd`</ph> has no attached window, or its top-level parent is not a <bpt id="p1">[</bpt>CFrameWnd<ept id="p1">](../../mfc/reference/cframewnd-class.md)</ept>-derived object, this function returns <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2658" translate="yes" xml:space="preserve">
          <source>CWnd::GetTopLevelOwner</source>
        </trans-unit>
        <trans-unit id="2659" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the top-level window.</source>
        </trans-unit>
        <trans-unit id="2660" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2661" translate="yes" xml:space="preserve">
          <source>Identifies the top-level window.</source>
        </trans-unit>
        <trans-unit id="2662" translate="yes" xml:space="preserve">
          <source>The returned pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="2663" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2664" translate="yes" xml:space="preserve">
          <source>The top-level window is the window that is a child of the desktop.</source>
        </trans-unit>
        <trans-unit id="2665" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`CWnd`</ph> has no attached window, this function returns <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2666" translate="yes" xml:space="preserve">
          <source>CWnd::GetTopLevelParent</source>
        </trans-unit>
        <trans-unit id="2667" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the window's top-level parent.</source>
        </trans-unit>
        <trans-unit id="2668" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2669" translate="yes" xml:space="preserve">
          <source>Identifies the top-level parent window of the window.</source>
        </trans-unit>
        <trans-unit id="2670" translate="yes" xml:space="preserve">
          <source>The returned pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="2671" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2672" translate="yes" xml:space="preserve">
          <source>is similar to <bpt id="p1">[</bpt>GetTopLevelFrame<ept id="p1">](#cwnd__gettoplevelframe)</ept> and <bpt id="p2">[</bpt>GetTopLevelOwner<ept id="p2">](#cwnd__gettoplevelowner)</ept>; however, it ignores the value set as the current owner window.</source>
        </trans-unit>
        <trans-unit id="2673" translate="yes" xml:space="preserve">
          <source>CWnd::GetTopWindow</source>
        </trans-unit>
        <trans-unit id="2674" translate="yes" xml:space="preserve">
          <source>Searches for the top-level child window that belongs to <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="2675" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2676" translate="yes" xml:space="preserve">
          <source>Identifies the top-level child window in a <ph id="ph1">`CWnd`</ph> linked list of child windows.</source>
        </trans-unit>
        <trans-unit id="2677" translate="yes" xml:space="preserve">
          <source>If no child windows exist, the value is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2678" translate="yes" xml:space="preserve">
          <source>The returned pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="2679" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2680" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`CWnd`</ph> has no children, this function returns <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2681" translate="yes" xml:space="preserve">
          <source>CWnd::GetUpdateRect</source>
        </trans-unit>
        <trans-unit id="2682" translate="yes" xml:space="preserve">
          <source>Retrieves the coordinates of the smallest rectangle that completely encloses the update region.</source>
        </trans-unit>
        <trans-unit id="2683" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2684" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`CRect`</ph> object or <bpt id="p1">[</bpt>RECT structure<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> that is to receive the client coordinates of the update that encloses the update region.</source>
        </trans-unit>
        <trans-unit id="2685" translate="yes" xml:space="preserve">
          <source>Set this parameter to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> to determine whether an update region exists within the <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="2686" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpRect`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the <ph id="ph2">`GetUpdateRect`</ph> member function returns nonzero if an update region exists and 0 if one does not.</source>
        </trans-unit>
        <trans-unit id="2687" translate="yes" xml:space="preserve">
          <source>This provides a way to determine whether a <ph id="ph1">`WM_PAINT`</ph> message resulted from an invalid area.</source>
        </trans-unit>
        <trans-unit id="2688" translate="yes" xml:space="preserve">
          <source>Do not set this parameter to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> in Windows version 3.0 and earlier.</source>
        </trans-unit>
        <trans-unit id="2689" translate="yes" xml:space="preserve">
          <source>Specifies whether the background in the update region is to be erased.</source>
        </trans-unit>
        <trans-unit id="2690" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2691" translate="yes" xml:space="preserve">
          <source>Specifies the status of the update region.</source>
        </trans-unit>
        <trans-unit id="2692" translate="yes" xml:space="preserve">
          <source>The value is nonzero if the update region is not empty; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2693" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`lpRect`</ph> parameter is set to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the return value is nonzero if an update region exists; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2694" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2695" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`CWnd`</ph> was created with the <bpt id="p1">**</bpt>CS_OWNDC<ept id="p1">**</ept> style and the mapping mode is not <ph id="ph2">`MM_TEXT`</ph>, the <ph id="ph3">`GetUpdateRect`</ph> member function gives the rectangle in logical coordinates.</source>
        </trans-unit>
        <trans-unit id="2696" translate="yes" xml:space="preserve">
          <source>Otherwise, <ph id="ph1">`GetUpdateRect`</ph> gives the rectangle in client coordinates.</source>
        </trans-unit>
        <trans-unit id="2697" translate="yes" xml:space="preserve">
          <source>If there is no update region, <ph id="ph1">`GetUpdateRect`</ph> sets the rectangle to be empty (sets all coordinates to 0).</source>
        </trans-unit>
        <trans-unit id="2698" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`bErase`</ph> parameter specifies whether <ph id="ph2">`GetUpdateRect`</ph> should erase the background of the update region.</source>
        </trans-unit>
        <trans-unit id="2699" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bErase`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> and the update region is not empty, the background is erased.</source>
        </trans-unit>
        <trans-unit id="2700" translate="yes" xml:space="preserve">
          <source>To erase the background, <ph id="ph1">`GetUpdateRect`</ph> sends the <bpt id="p1">[</bpt>WM_ERASEBKGND<ept id="p1">](#cwnd__onerasebkgnd)</ept> message.</source>
        </trans-unit>
        <trans-unit id="2701" translate="yes" xml:space="preserve">
          <source>The update rectangle retrieved by the <bpt id="p1">[</bpt>BeginPaint<ept id="p1">](#cwnd__beginpaint)</ept> member function is identical to that retrieved by the <ph id="ph1">`GetUpdateRect`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="2702" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`BeginPaint`</ph> member function automatically validates the update region, so any call to <ph id="ph2">`GetUpdateRect`</ph> made immediately after a call to <ph id="ph3">`BeginPaint`</ph> retrieves an empty update region.</source>
        </trans-unit>
        <trans-unit id="2703" translate="yes" xml:space="preserve">
          <source>CWnd::GetUpdateRgn</source>
        </trans-unit>
        <trans-unit id="2704" translate="yes" xml:space="preserve">
          <source>Retrieves the update region into a region identified by <ph id="ph1">`pRgn`</ph>.</source>
        </trans-unit>
        <trans-unit id="2705" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2706" translate="yes" xml:space="preserve">
          <source>Identifies the update region.</source>
        </trans-unit>
        <trans-unit id="2707" translate="yes" xml:space="preserve">
          <source>Specifies whether the background will be erased and nonclient areas of child windows will be drawn.</source>
        </trans-unit>
        <trans-unit id="2708" translate="yes" xml:space="preserve">
          <source>If the value is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, no drawing is done.</source>
        </trans-unit>
        <trans-unit id="2709" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2710" translate="yes" xml:space="preserve">
          <source>Specifies a short-integer flag that indicates the type of resulting region.</source>
        </trans-unit>
        <trans-unit id="2711" translate="yes" xml:space="preserve">
          <source>The value can take any one of the following:</source>
        </trans-unit>
        <trans-unit id="2712" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SIMPLEREGION<ept id="p1">**</ept> The region has no overlapping borders.</source>
        </trans-unit>
        <trans-unit id="2713" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COMPLEXREGION<ept id="p1">**</ept> The region has overlapping borders.</source>
        </trans-unit>
        <trans-unit id="2714" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULLREGION<ept id="p1">**</ept> The region is empty.</source>
        </trans-unit>
        <trans-unit id="2715" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ERROR<ept id="p1">**</ept> No region was created.</source>
        </trans-unit>
        <trans-unit id="2716" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2717" translate="yes" xml:space="preserve">
          <source>The coordinates of this region are relative to the upper-left corner (client coordinates).</source>
        </trans-unit>
        <trans-unit id="2718" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>BeginPaint<ept id="p1">](#cwnd__beginpaint)</ept> member function automatically validates the update region, so any call to <ph id="ph1">`GetUpdateRgn`</ph> made immediately after a call to <ph id="ph2">`BeginPaint`</ph> retrieves an empty update region.</source>
        </trans-unit>
        <trans-unit id="2719" translate="yes" xml:space="preserve">
          <source>CWnd::GetWindow</source>
        </trans-unit>
        <trans-unit id="2720" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the window requested, or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if none.</source>
        </trans-unit>
        <trans-unit id="2721" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2722" translate="yes" xml:space="preserve">
          <source>Specifies the relationship between <ph id="ph1">`CWnd`</ph> and the returned window.</source>
        </trans-unit>
        <trans-unit id="2723" translate="yes" xml:space="preserve">
          <source>It can take one of the following values:</source>
        </trans-unit>
        <trans-unit id="2724" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GW_CHILD<ept id="p1">**</ept> Identifies the <ph id="ph1">`CWnd`</ph> first child window.</source>
        </trans-unit>
        <trans-unit id="2725" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GW_HWNDFIRST<ept id="p1">**</ept> If <ph id="ph1">`CWnd`</ph> is a child window, returns the first sibling window.</source>
        </trans-unit>
        <trans-unit id="2726" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns the first top-level window in the list.</source>
        </trans-unit>
        <trans-unit id="2727" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GW_HWNDLAST<ept id="p1">**</ept> If <ph id="ph1">`CWnd`</ph> is a child window, returns the last sibling window.</source>
        </trans-unit>
        <trans-unit id="2728" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns the last top-level window in the list.</source>
        </trans-unit>
        <trans-unit id="2729" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GW_HWNDNEXT<ept id="p1">**</ept> Returns the next window on the window manager's list.</source>
        </trans-unit>
        <trans-unit id="2730" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GW_HWNDPREV<ept id="p1">**</ept> Returns the previous window on the window manager's list.</source>
        </trans-unit>
        <trans-unit id="2731" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GW_OWNER<ept id="p1">**</ept> Identifies the <ph id="ph1">`CWnd`</ph> owner.</source>
        </trans-unit>
        <trans-unit id="2732" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2733" translate="yes" xml:space="preserve">
          <source>The returned pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="2734" translate="yes" xml:space="preserve">
          <source>CWnd::GetWindowContextHelpId</source>
        </trans-unit>
        <trans-unit id="2735" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the help context identifier, if any, associated with the window.</source>
        </trans-unit>
        <trans-unit id="2736" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2737" translate="yes" xml:space="preserve">
          <source>The help context identifier.</source>
        </trans-unit>
        <trans-unit id="2738" translate="yes" xml:space="preserve">
          <source>Returns 0 if the window has none.</source>
        </trans-unit>
        <trans-unit id="2739" translate="yes" xml:space="preserve">
          <source>CWnd::GetWindowedChildCount</source>
        </trans-unit>
        <trans-unit id="2740" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the number of associated child windows.</source>
        </trans-unit>
        <trans-unit id="2741" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2742" translate="yes" xml:space="preserve">
          <source>The number of child windows associated with the <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="2743" translate="yes" xml:space="preserve">
          <source>CWnd::GetWindowDC</source>
        </trans-unit>
        <trans-unit id="2744" translate="yes" xml:space="preserve">
          <source>Retrieves the display context for the entire window, including caption bar, menus, and scroll bars.</source>
        </trans-unit>
        <trans-unit id="2745" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2746" translate="yes" xml:space="preserve">
          <source>Identifies the display context for the given window if the function is successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2747" translate="yes" xml:space="preserve">
          <source>The returned pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="2748" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ReleaseDC<ept id="p1">](#cwnd__releasedc)</ept> should be called once for each successful call to <ph id="ph1">`GetWindowDC`</ph>.</source>
        </trans-unit>
        <trans-unit id="2749" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2750" translate="yes" xml:space="preserve">
          <source>A window display context permits painting anywhere in <ph id="ph1">`CWnd`</ph>, since the origin of the context is the upper-left corner of <ph id="ph2">`CWnd`</ph> instead of the client area.</source>
        </trans-unit>
        <trans-unit id="2751" translate="yes" xml:space="preserve">
          <source>Default attributes are assigned to the display context each time it retrieves the context.</source>
        </trans-unit>
        <trans-unit id="2752" translate="yes" xml:space="preserve">
          <source>Previous attributes are lost.</source>
        </trans-unit>
        <trans-unit id="2753" translate="yes" xml:space="preserve">
          <source>is intended to be used for special painting effects within the <ph id="ph1">`CWnd`</ph> nonclient area.</source>
        </trans-unit>
        <trans-unit id="2754" translate="yes" xml:space="preserve">
          <source>Painting in nonclient areas of any window is not recommended.</source>
        </trans-unit>
        <trans-unit id="2755" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>GetSystemMetrics<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724385)</ept> Windows function can be used to retrieve the dimensions of various parts of the nonclient area, such as the caption bar, menu, and scroll bars.</source>
        </trans-unit>
        <trans-unit id="2756" translate="yes" xml:space="preserve">
          <source>After painting is complete, the <bpt id="p1">[</bpt>ReleaseDC<ept id="p1">](#cwnd__releasedc)</ept> member function must be called to release the display context.</source>
        </trans-unit>
        <trans-unit id="2757" translate="yes" xml:space="preserve">
          <source>Failure to release the display context will seriously affect painting requested by applications due to limitations on the number of device contexts that can be open at the same time.</source>
        </trans-unit>
        <trans-unit id="2758" translate="yes" xml:space="preserve">
          <source>CWnd::GetWindowInfo</source>
        </trans-unit>
        <trans-unit id="2759" translate="yes" xml:space="preserve">
          <source>Retrieves information about the window.</source>
        </trans-unit>
        <trans-unit id="2760" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2761" translate="yes" xml:space="preserve">
          <source>pwi</source>
        </trans-unit>
        <trans-unit id="2762" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>WINDOWINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632610)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="2763" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2764" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the function <bpt id="p1">[</bpt>GetWindowInfo<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633516)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2765" translate="yes" xml:space="preserve">
          <source>CWnd::GetWindowlessChildCount</source>
        </trans-unit>
        <trans-unit id="2766" translate="yes" xml:space="preserve">
          <source>Retrieves the number of associated windowless child windows.</source>
        </trans-unit>
        <trans-unit id="2767" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2768" translate="yes" xml:space="preserve">
          <source>The number of windowless child windows associated with the <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="2769" translate="yes" xml:space="preserve">
          <source>CWnd::GetWindowPlacement</source>
        </trans-unit>
        <trans-unit id="2770" translate="yes" xml:space="preserve">
          <source>Retrieves the show state and the normal (restored), minimized, and maximized positions of a window.</source>
        </trans-unit>
        <trans-unit id="2771" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2772" translate="yes" xml:space="preserve">
          <source>Points to the <ph id="ph1">`WINDOWPLACEMENT`</ph> structure that receives the show state and position information.</source>
        </trans-unit>
        <trans-unit id="2773" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2774" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2775" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2776" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>flags<ept id="p1">**</ept> member of the <bpt id="p2">[</bpt>WINDOWPLACEMENT<ept id="p2">](../../mfc/reference/windowplacement-structure.md)</ept> structure retrieved by this function is always 0.</source>
        </trans-unit>
        <trans-unit id="2777" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`CWnd`</ph> is maximized, the <bpt id="p1">**</bpt>showCmd<ept id="p1">**</ept> member of <ph id="ph2">`WINDOWPLACEMENT`</ph> is <bpt id="p2">**</bpt>SW_SHOWMAXIMIZED<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2778" translate="yes" xml:space="preserve">
          <source>If the window is minimized, it is <bpt id="p1">**</bpt>SW_SHOWMINIMIZED.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="2779" translate="yes" xml:space="preserve">
          <source>It is <bpt id="p1">**</bpt>SW_SHOWNORMAL<ept id="p1">**</ept> otherwise.</source>
        </trans-unit>
        <trans-unit id="2780" translate="yes" xml:space="preserve">
          <source>CWnd::GetWindowRect</source>
        </trans-unit>
        <trans-unit id="2781" translate="yes" xml:space="preserve">
          <source>Copies the dimensions of the bounding rectangle of the <ph id="ph1">`CWnd`</ph> object to the structure pointed to by <ph id="ph2">`lpRect`</ph>.</source>
        </trans-unit>
        <trans-unit id="2782" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2783" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`CRect`</ph> object or a <bpt id="p1">[</bpt>RECT structure<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> that will receive the screen coordinates of the upper-left and lower-right corners.</source>
        </trans-unit>
        <trans-unit id="2784" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2785" translate="yes" xml:space="preserve">
          <source>The dimensions are given in screen coordinates relative to the upper-left corner of the display screen.</source>
        </trans-unit>
        <trans-unit id="2786" translate="yes" xml:space="preserve">
          <source>The dimensions of the caption, border, and scroll bars, if present, are included.</source>
        </trans-unit>
        <trans-unit id="2787" translate="yes" xml:space="preserve">
          <source>CWnd::GetWindowRgn</source>
        </trans-unit>
        <trans-unit id="2788" translate="yes" xml:space="preserve">
          <source>Call this member function to get the window region of a window.</source>
        </trans-unit>
        <trans-unit id="2789" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2790" translate="yes" xml:space="preserve">
          <source>A handle to a window region.</source>
        </trans-unit>
        <trans-unit id="2791" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2792" translate="yes" xml:space="preserve">
          <source>The return value specifies the type of the region that the function obtains.</source>
        </trans-unit>
        <trans-unit id="2793" translate="yes" xml:space="preserve">
          <source>It can be one of the following values:</source>
        </trans-unit>
        <trans-unit id="2794" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULLREGION<ept id="p1">**</ept> The region is empty.</source>
        </trans-unit>
        <trans-unit id="2795" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SIMPLEREGION<ept id="p1">**</ept> The region is a single rectangle.</source>
        </trans-unit>
        <trans-unit id="2796" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COMPLEXREGION<ept id="p1">**</ept> The region is more than one rectangle.</source>
        </trans-unit>
        <trans-unit id="2797" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ERROR<ept id="p1">**</ept> An error occurred; the region is unaffected.</source>
        </trans-unit>
        <trans-unit id="2798" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2799" translate="yes" xml:space="preserve">
          <source>The window region determines the area within the window where the operating system permits drawing.</source>
        </trans-unit>
        <trans-unit id="2800" translate="yes" xml:space="preserve">
          <source>The operating system does not display any portion of a window that lies outside of the window region.</source>
        </trans-unit>
        <trans-unit id="2801" translate="yes" xml:space="preserve">
          <source>The coordinates of a window's window region are relative to the upper-left corner of the window, not the client area of the window.</source>
        </trans-unit>
        <trans-unit id="2802" translate="yes" xml:space="preserve">
          <source>To set the window region of a window, call <bpt id="p1">[</bpt>CWnd::SetWindowRgn<ept id="p1">](#cwnd__setwindowrgn)</ept>.</source>
        </trans-unit>
        <trans-unit id="2803" translate="yes" xml:space="preserve">
          <source>CWnd::GetWindowText</source>
        </trans-unit>
        <trans-unit id="2804" translate="yes" xml:space="preserve">
          <source>Copies the <ph id="ph1">`CWnd`</ph> caption title (if it has one) into the buffer pointed to by <ph id="ph2">`lpszStringBuf`</ph> or into the destination string <ph id="ph3">`rString`</ph>.</source>
        </trans-unit>
        <trans-unit id="2805" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2806" translate="yes" xml:space="preserve">
          <source>Points to the buffer that is to receive the copied string of the window's title.</source>
        </trans-unit>
        <trans-unit id="2807" translate="yes" xml:space="preserve">
          <source>Specifies the maximum number of characters to be copied to the buffer, including the terminating null character.</source>
        </trans-unit>
        <trans-unit id="2808" translate="yes" xml:space="preserve">
          <source>If the string is longer than the number of characters specified in <ph id="ph1">`nMaxCount`</ph>, it is truncated.</source>
        </trans-unit>
        <trans-unit id="2809" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object that is to receive the copied string of the window's title.</source>
        </trans-unit>
        <trans-unit id="2810" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2811" translate="yes" xml:space="preserve">
          <source>Specifies the length, in characters, of the copied string, not including the terminating null character.</source>
        </trans-unit>
        <trans-unit id="2812" translate="yes" xml:space="preserve">
          <source>It is 0 if <ph id="ph1">`CWnd`</ph> has no caption or if the caption is empty.</source>
        </trans-unit>
        <trans-unit id="2813" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2814" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`CWnd`</ph> object is a control, the <ph id="ph2">`GetWindowText`</ph> member function copies the text within the control instead of copying the caption.</source>
        </trans-unit>
        <trans-unit id="2815" translate="yes" xml:space="preserve">
          <source>This member function causes the <bpt id="p1">[</bpt>WM_GETTEXT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632627)</ept> message to be sent to the <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="2816" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="2817" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CWnd::SetWindowText<ept id="p1">](#cwnd__setwindowtext)</ept>.</source>
        </trans-unit>
        <trans-unit id="2818" translate="yes" xml:space="preserve">
          <source>CWnd::GetWindowTextLength</source>
        </trans-unit>
        <trans-unit id="2819" translate="yes" xml:space="preserve">
          <source>Returns the length of the <ph id="ph1">`CWnd`</ph> object caption title.</source>
        </trans-unit>
        <trans-unit id="2820" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2821" translate="yes" xml:space="preserve">
          <source>Specifies the text length in characters, not including any null-termination character.</source>
        </trans-unit>
        <trans-unit id="2822" translate="yes" xml:space="preserve">
          <source>The value is 0 if no such text exists.</source>
        </trans-unit>
        <trans-unit id="2823" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2824" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`CWnd`</ph> is a control, the <ph id="ph2">`GetWindowTextLength`</ph> member function returns the length of the text within the control instead of the caption.</source>
        </trans-unit>
        <trans-unit id="2825" translate="yes" xml:space="preserve">
          <source>This member function causes the <bpt id="p1">[</bpt>WM_GETTEXTLENGTH<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632628)</ept> message to be sent to the <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="2826" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="2827" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CWnd::SetWindowText<ept id="p1">](#cwnd__setwindowtext)</ept>.</source>
        </trans-unit>
        <trans-unit id="2828" translate="yes" xml:space="preserve">
          <source>CWnd::HideCaret</source>
        </trans-unit>
        <trans-unit id="2829" translate="yes" xml:space="preserve">
          <source>Hides the caret by removing it from the display screen.</source>
        </trans-unit>
        <trans-unit id="2830" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2831" translate="yes" xml:space="preserve">
          <source>Although the caret is no longer visible, it can be displayed again by using the <bpt id="p1">[</bpt>ShowCaret<ept id="p1">](#cwnd__showcaret)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="2832" translate="yes" xml:space="preserve">
          <source>Hiding the caret does not destroy its current shape.</source>
        </trans-unit>
        <trans-unit id="2833" translate="yes" xml:space="preserve">
          <source>Hiding is cumulative.</source>
        </trans-unit>
        <trans-unit id="2834" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`HideCaret`</ph> has been called five times in a row, the <ph id="ph2">`ShowCaret`</ph> member function must be called five times before the caret will be shown.</source>
        </trans-unit>
        <trans-unit id="2835" translate="yes" xml:space="preserve">
          <source>CWnd::HiliteMenuItem</source>
        </trans-unit>
        <trans-unit id="2836" translate="yes" xml:space="preserve">
          <source>Highlights or removes the highlight from a top-level (menu-bar) menu item.</source>
        </trans-unit>
        <trans-unit id="2837" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2838" translate="yes" xml:space="preserve">
          <source>Identifies the top-level menu that contains the item to be highlighted.</source>
        </trans-unit>
        <trans-unit id="2839" translate="yes" xml:space="preserve">
          <source>Specifies the menu item to be highlighted, depending on the value of the <ph id="ph1">`nHilite`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="2840" translate="yes" xml:space="preserve">
          <source>Specifies whether the menu item is highlighted or the highlight is removed.</source>
        </trans-unit>
        <trans-unit id="2841" translate="yes" xml:space="preserve">
          <source>It can be a combination of <bpt id="p1">**</bpt>MF_HILITE<ept id="p1">**</ept> or <bpt id="p2">**</bpt>MF_UNHILITE<ept id="p2">**</ept> with <bpt id="p3">**</bpt>MF_BYCOMMAND<ept id="p3">**</ept> or <bpt id="p4">**</bpt>MF_BYPOSITION<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2842" translate="yes" xml:space="preserve">
          <source>The values can be combined using the bitwise OR operator.</source>
        </trans-unit>
        <trans-unit id="2843" translate="yes" xml:space="preserve">
          <source>These values have the following meanings:</source>
        </trans-unit>
        <trans-unit id="2844" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_BYCOMMAND<ept id="p1">**</ept> Interprets <ph id="ph1">`nIDHiliteItem`</ph> as the menu-item ID (the default interpretation).</source>
        </trans-unit>
        <trans-unit id="2845" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_BYPOSITION<ept id="p1">**</ept> Interprets <ph id="ph1">`nIDHiliteItem`</ph> as the zero-based offset of the menu item.</source>
        </trans-unit>
        <trans-unit id="2846" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_HILITE<ept id="p1">**</ept> Highlights the item.</source>
        </trans-unit>
        <trans-unit id="2847" translate="yes" xml:space="preserve">
          <source>If this value is not given, the highlight is removed from the item.</source>
        </trans-unit>
        <trans-unit id="2848" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_UNHILITE<ept id="p1">**</ept> Removes the highlight from the item.</source>
        </trans-unit>
        <trans-unit id="2849" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2850" translate="yes" xml:space="preserve">
          <source>Specifies whether the menu item was highlighted.</source>
        </trans-unit>
        <trans-unit id="2851" translate="yes" xml:space="preserve">
          <source>Nonzero if the item was highlighted; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2852" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2853" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MF_HILITE<ept id="p1">**</ept> and <bpt id="p2">**</bpt>MF_UNHILITE<ept id="p2">**</ept> flags can be used only with this member function; they cannot be used with the <bpt id="p3">[</bpt>CMenu::ModifyMenu<ept id="p3">](../../mfc/reference/cmenu-class.md#cmenu__modifymenu)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="2854" translate="yes" xml:space="preserve">
          <source>CWnd::HtmlHelp</source>
        </trans-unit>
        <trans-unit id="2855" translate="yes" xml:space="preserve">
          <source>Call this member function to invoke the HTMLHelp application.</source>
        </trans-unit>
        <trans-unit id="2856" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2857" translate="yes" xml:space="preserve">
          <source>Specifies additional data.</source>
        </trans-unit>
        <trans-unit id="2858" translate="yes" xml:space="preserve">
          <source>The value used depends on the value of the <ph id="ph1">`nCmd`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="2859" translate="yes" xml:space="preserve">
          <source>Specifies the type of help requested.</source>
        </trans-unit>
        <trans-unit id="2860" translate="yes" xml:space="preserve">
          <source>For a list of possible values and how they affect the <ph id="ph1">`dwData`</ph> parameter, see the <ph id="ph2">`uCommand`</ph> parameter described in the HTML Help API Reference in the <ph id="ph3">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2861" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2862" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CWinApp::HtmlHelp<ept id="p1">](../../mfc/reference/cwinapp-class.md#cwinapp__htmlhelp)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="2863" translate="yes" xml:space="preserve">
          <source>CWnd::InitDynamicLayout</source>
        </trans-unit>
        <trans-unit id="2864" translate="yes" xml:space="preserve">
          <source>Called by the framework to initialize dynamic layout for a window.</source>
        </trans-unit>
        <trans-unit id="2865" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2866" translate="yes" xml:space="preserve">
          <source>Do not call this method directly.</source>
        </trans-unit>
        <trans-unit id="2867" translate="yes" xml:space="preserve">
          <source>CWnd::Invalidate</source>
        </trans-unit>
        <trans-unit id="2868" translate="yes" xml:space="preserve">
          <source>Invalidates the entire client area of <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="2869" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2870" translate="yes" xml:space="preserve">
          <source>Specifies whether the background within the update region is to be erased.</source>
        </trans-unit>
        <trans-unit id="2871" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2872" translate="yes" xml:space="preserve">
          <source>The client area is marked for painting when the next <bpt id="p1">[</bpt>WM_PAINT<ept id="p1">](#cwnd__onpaint)</ept> message occurs.</source>
        </trans-unit>
        <trans-unit id="2873" translate="yes" xml:space="preserve">
          <source>The region can also be validated before a <ph id="ph1">`WM_PAINT`</ph> message occurs by the <bpt id="p1">[</bpt>ValidateRect<ept id="p1">](#cwnd__validaterect)</ept> or <bpt id="p2">[</bpt>ValidateRgn<ept id="p2">](#cwnd__validatergn)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="2874" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`bErase`</ph> parameter specifies whether the background within the update area is to be erased when the update region is processed.</source>
        </trans-unit>
        <trans-unit id="2875" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bErase`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the background is erased when the <bpt id="p2">[</bpt>BeginPaint<ept id="p2">](#cwnd__beginpaint)</ept> member function is called; if <ph id="ph2">`bErase`</ph> is <bpt id="p3">**</bpt>FALSE<ept id="p3">**</ept>, the background remains unchanged.</source>
        </trans-unit>
        <trans-unit id="2876" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bErase`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> for any part of the update region, the background in the entire region, not just in the given part, is erased.</source>
        </trans-unit>
        <trans-unit id="2877" translate="yes" xml:space="preserve">
          <source>Windows sends a <bpt id="p1">[</bpt>WM_PAINT<ept id="p1">](#cwnd__onpaint)</ept> message whenever the <ph id="ph1">`CWnd`</ph> update region is not empty and there are no other messages in the application queue for that window.</source>
        </trans-unit>
        <trans-unit id="2878" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="2879" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CWnd::UpdateWindow<ept id="p1">](#cwnd__updatewindow)</ept>.</source>
        </trans-unit>
        <trans-unit id="2880" translate="yes" xml:space="preserve">
          <source>CWnd::InvalidateRect</source>
        </trans-unit>
        <trans-unit id="2881" translate="yes" xml:space="preserve">
          <source>Invalidates the client area within the given rectangle by adding that rectangle to the <ph id="ph1">`CWnd`</ph> update region.</source>
        </trans-unit>
        <trans-unit id="2882" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2883" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`CRect`</ph> object or a <bpt id="p1">[</bpt>RECT structure<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> that contains the rectangle (in client coordinates) to be added to the update region.</source>
        </trans-unit>
        <trans-unit id="2884" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpRect`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the entire client area is added to the region.</source>
        </trans-unit>
        <trans-unit id="2885" translate="yes" xml:space="preserve">
          <source>Specifies whether the background within the update region is to be erased.</source>
        </trans-unit>
        <trans-unit id="2886" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2887" translate="yes" xml:space="preserve">
          <source>The invalidated rectangle, along with all other areas in the update region, is marked for painting when the next <bpt id="p1">[</bpt>WM_PAINT<ept id="p1">](#cwnd__onpaint)</ept> message is sent.</source>
        </trans-unit>
        <trans-unit id="2888" translate="yes" xml:space="preserve">
          <source>The invalidated areas accumulate in the update region until the region is processed when the next <ph id="ph1">`WM_PAINT`</ph> call occurs, or until the region is validated by the <bpt id="p1">[</bpt>ValidateRect<ept id="p1">](#cwnd__validaterect)</ept> or <bpt id="p2">[</bpt>ValidateRgn<ept id="p2">](#cwnd__validatergn)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="2889" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`bErase`</ph> parameter specifies whether the background within the update area is to be erased when the update region is processed.</source>
        </trans-unit>
        <trans-unit id="2890" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bErase`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the background is erased when the <bpt id="p2">[</bpt>BeginPaint<ept id="p2">](#cwnd__beginpaint)</ept> member function is called; if <ph id="ph2">`bErase`</ph> is <bpt id="p3">**</bpt>FALSE<ept id="p3">**</ept>, the background remains unchanged.</source>
        </trans-unit>
        <trans-unit id="2891" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bErase`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> for any part of the update region, the background in the entire region is erased, not just in the given part.</source>
        </trans-unit>
        <trans-unit id="2892" translate="yes" xml:space="preserve">
          <source>Windows sends a <bpt id="p1">[</bpt>WM_PAINT<ept id="p1">](#cwnd__onpaint)</ept> message whenever the <ph id="ph1">`CWnd`</ph> update region is not empty and there are no other messages in the application queue for that window.</source>
        </trans-unit>
        <trans-unit id="2893" translate="yes" xml:space="preserve">
          <source>CWnd::InvalidateRgn</source>
        </trans-unit>
        <trans-unit id="2894" translate="yes" xml:space="preserve">
          <source>Invalidates the client area within the given region by adding it to the current update region of <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="2895" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2896" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CRgn<ept id="p1">](../../mfc/reference/crgn-class.md)</ept> object that identifies the region to be added to the update region.</source>
        </trans-unit>
        <trans-unit id="2897" translate="yes" xml:space="preserve">
          <source>The region is assumed to have client coordinates.</source>
        </trans-unit>
        <trans-unit id="2898" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the entire client area is added to the update region.</source>
        </trans-unit>
        <trans-unit id="2899" translate="yes" xml:space="preserve">
          <source>Specifies whether the background within the update region is to be erased.</source>
        </trans-unit>
        <trans-unit id="2900" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2901" translate="yes" xml:space="preserve">
          <source>The invalidated region, along with all other areas in the update region, is marked for painting when the <bpt id="p1">[</bpt>WM_PAINT<ept id="p1">](#cwnd__onpaint)</ept> message is next sent.</source>
        </trans-unit>
        <trans-unit id="2902" translate="yes" xml:space="preserve">
          <source>The invalidated areas accumulate in the update region until the region is processed when a <ph id="ph1">`WM_PAINT`</ph> message is next sent, or until the region is validated by the <bpt id="p1">[</bpt>ValidateRect<ept id="p1">](#cwnd__validaterect)</ept> or <bpt id="p2">[</bpt>ValidateRgn<ept id="p2">](#cwnd__validatergn)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="2903" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`bErase`</ph> parameter specifies whether the background within the update area is to be erased when the update region is processed.</source>
        </trans-unit>
        <trans-unit id="2904" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bErase`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the background is erased when the <bpt id="p2">[</bpt>BeginPaint<ept id="p2">](#cwnd__beginpaint)</ept> member function is called; if <ph id="ph2">`bErase`</ph> is <bpt id="p3">**</bpt>FALSE<ept id="p3">**</ept>, the background remains unchanged.</source>
        </trans-unit>
        <trans-unit id="2905" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bErase`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> for any part of the update region, the background in the entire region, not just in the given part, is erased.</source>
        </trans-unit>
        <trans-unit id="2906" translate="yes" xml:space="preserve">
          <source>Windows sends a <bpt id="p1">[</bpt>WM_PAINT<ept id="p1">](#cwnd__onpaint)</ept> message whenever the <ph id="ph1">`CWnd`</ph> update region is not empty and there are no other messages in the application queue for that window.</source>
        </trans-unit>
        <trans-unit id="2907" translate="yes" xml:space="preserve">
          <source>The given region must have been previously created by one of the region functions.</source>
        </trans-unit>
        <trans-unit id="2908" translate="yes" xml:space="preserve">
          <source>CWnd::InvokeHelper</source>
        </trans-unit>
        <trans-unit id="2909" translate="yes" xml:space="preserve">
          <source>Call this member function to invoke the ActiveX Control method or property specified by <ph id="ph1">`dwDispID`</ph>, in the context specified by <ph id="ph2">`wFlags`</ph>.</source>
        </trans-unit>
        <trans-unit id="2910" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2911" translate="yes" xml:space="preserve">
          <source>Identifies the method or property to be invoked.</source>
        </trans-unit>
        <trans-unit id="2912" translate="yes" xml:space="preserve">
          <source>Flags describing the context of the call to <bpt id="p1">**</bpt>IDispatch::Invoke<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="2913" translate="yes" xml:space="preserve">
          <source>Specifies the type of the return value.</source>
        </trans-unit>
        <trans-unit id="2914" translate="yes" xml:space="preserve">
          <source>For possible values, see the Remarks section for <bpt id="p1">[</bpt>COleDispatchDriver::InvokeHelper<ept id="p1">](../../mfc/reference/coledispatchdriver-class.md#coledispatchdriver__invokehelper)</ept>.</source>
        </trans-unit>
        <trans-unit id="2915" translate="yes" xml:space="preserve">
          <source>Address of the variable that will that will receive the property value or return value.</source>
        </trans-unit>
        <trans-unit id="2916" translate="yes" xml:space="preserve">
          <source>It must match the type specified by <ph id="ph1">`vtRet`</ph>.</source>
        </trans-unit>
        <trans-unit id="2917" translate="yes" xml:space="preserve">
          <source>Pointer to a null-terminated string of bytes specifying the types of the parameters following <ph id="ph1">`pbParamInfo`</ph>.</source>
        </trans-unit>
        <trans-unit id="2918" translate="yes" xml:space="preserve">
          <source>For possible values, see the Remarks section for <ph id="ph1">`COleDispatchDriver::InvokeHelper`</ph>.</source>
        </trans-unit>
        <trans-unit id="2919" translate="yes" xml:space="preserve">
          <source>...</source>
        </trans-unit>
        <trans-unit id="2920" translate="yes" xml:space="preserve">
          <source>Variable List of parameters, of types specified in <ph id="ph1">`pbParamInfo`</ph>.</source>
        </trans-unit>
        <trans-unit id="2921" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2922" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`pbParamInfo`</ph> parameter specifies the types of the parameters passed to the method or property.</source>
        </trans-unit>
        <trans-unit id="2923" translate="yes" xml:space="preserve">
          <source>The variable list of arguments is represented by <bpt id="p1">*</bpt>...<ept id="p1">*</ept> in the syntax declaration.</source>
        </trans-unit>
        <trans-unit id="2924" translate="yes" xml:space="preserve">
          <source>This function converts the parameters to <bpt id="p1">**</bpt>VARIANTARG<ept id="p1">**</ept> values, then invokes the <bpt id="p2">**</bpt>IDispatch::Invoke<ept id="p2">**</ept> method on the ActiveX control.</source>
        </trans-unit>
        <trans-unit id="2925" translate="yes" xml:space="preserve">
          <source>If the call to <bpt id="p1">**</bpt>IDispatch::Invoke<ept id="p1">**</ept> fails, this function will throw an exception.</source>
        </trans-unit>
        <trans-unit id="2926" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`SCODE`</ph> (status code) returned by <bpt id="p1">**</bpt>IDispatch::Invoke<ept id="p1">**</ept> is <ph id="ph2">`DISP_E_EXCEPTION`</ph>, this function throws a <bpt id="p2">[</bpt>COleException<ept id="p2">](../../mfc/reference/coleexception-class.md)</ept> object, otherwise it throws a <bpt id="p3">[</bpt>COleDispatchException<ept id="p3">](../../mfc/reference/coledispatchexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2927" translate="yes" xml:space="preserve">
          <source>This function should be called only on a <ph id="ph1">`CWnd`</ph> object that represents an ActiveX control.</source>
        </trans-unit>
        <trans-unit id="2928" translate="yes" xml:space="preserve">
          <source>For more information about using this member function with ActiveX Control Containers, see the article <bpt id="p1">[</bpt>ActiveX Control Containers: Programming ActiveX Controls in an ActiveX Control Container<ept id="p1">](../../mfc/programming-activex-controls-in-a-activex-control-container.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2929" translate="yes" xml:space="preserve">
          <source>CWnd::IsChild</source>
        </trans-unit>
        <trans-unit id="2930" translate="yes" xml:space="preserve">
          <source>Indicates whether the window specified by <ph id="ph1">`pWnd`</ph> is a child window or other direct descendant of <ph id="ph2">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="2931" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2932" translate="yes" xml:space="preserve">
          <source>Identifies the window to be tested.</source>
        </trans-unit>
        <trans-unit id="2933" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2934" translate="yes" xml:space="preserve">
          <source>Specifies the outcome of the function.</source>
        </trans-unit>
        <trans-unit id="2935" translate="yes" xml:space="preserve">
          <source>The value is nonzero if the window identified by <ph id="ph1">`pWnd`</ph> is a child window of <ph id="ph2">`CWnd`</ph>; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2936" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2937" translate="yes" xml:space="preserve">
          <source>A child window is the direct descendant of <ph id="ph1">`CWnd`</ph> if the <ph id="ph2">`CWnd`</ph> object is in the chain of parent windows that leads from the original pop-up window to the child window.</source>
        </trans-unit>
        <trans-unit id="2938" translate="yes" xml:space="preserve">
          <source>CWnd::IsD2DSupportEnabled</source>
        </trans-unit>
        <trans-unit id="2939" translate="yes" xml:space="preserve">
          <source>Determines whether D2D support is enabled.</source>
        </trans-unit>
        <trans-unit id="2940" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2941" translate="yes" xml:space="preserve">
          <source>TRUE if the feature is enabled; otherwise FALSE.</source>
        </trans-unit>
        <trans-unit id="2942" translate="yes" xml:space="preserve">
          <source>CWnd::IsDialogMessage</source>
        </trans-unit>
        <trans-unit id="2943" translate="yes" xml:space="preserve">
          <source>Call this member function to determine whether the given message is intended for a modeless dialog box; if it is, this function processes the message.</source>
        </trans-unit>
        <trans-unit id="2944" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2945" translate="yes" xml:space="preserve">
          <source>Points to an <bpt id="p1">[</bpt>MSG<ept id="p1">](../../mfc/reference/msg-structure1.md)</ept> structure that contains the message to be checked.</source>
        </trans-unit>
        <trans-unit id="2946" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2947" translate="yes" xml:space="preserve">
          <source>Specifies whether the member function has processed the given message.</source>
        </trans-unit>
        <trans-unit id="2948" translate="yes" xml:space="preserve">
          <source>It is nonzero if the message has been processed; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2949" translate="yes" xml:space="preserve">
          <source>If the return is 0, call the <bpt id="p1">[</bpt>CWnd::PreTranslateMessage<ept id="p1">](#cwnd__pretranslatemessage)</ept> member function of the base class to process the message.</source>
        </trans-unit>
        <trans-unit id="2950" translate="yes" xml:space="preserve">
          <source>In an override of the <ph id="ph1">`CWnd::PreTranslateMessage`</ph> member function the code looks like this :</source>
        </trans-unit>
        <trans-unit id="2951" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#100</source>
        </trans-unit>
        <trans-unit id="2952" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2953" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`IsDialogMessage`</ph> function processes a message, it checks for keyboard messages and converts them to selection commands for the corresponding dialog box.</source>
        </trans-unit>
        <trans-unit id="2954" translate="yes" xml:space="preserve">
          <source>For example, the TAB key selects the next control or group of controls, and the DOWN ARROW key selects the next control in a group.</source>
        </trans-unit>
        <trans-unit id="2955" translate="yes" xml:space="preserve">
          <source>You must not pass a message processed by <ph id="ph1">`IsDialogMessage`</ph> to the <bpt id="p1">[</bpt>TranslateMessage<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms644955)</ept> or <bpt id="p2">[</bpt>DispatchMessage<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms644934)</ept> Windows functions, because it has already been processed.</source>
        </trans-unit>
        <trans-unit id="2956" translate="yes" xml:space="preserve">
          <source>CWnd::IsDlgButtonChecked</source>
        </trans-unit>
        <trans-unit id="2957" translate="yes" xml:space="preserve">
          <source>Determines whether a button control has a check mark next to it.</source>
        </trans-unit>
        <trans-unit id="2958" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="2959" translate="yes" xml:space="preserve">
          <source>Specifies the integer identifier of the button control.</source>
        </trans-unit>
        <trans-unit id="2960" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2961" translate="yes" xml:space="preserve">
          <source>Nonzero if the given control is checked, and 0 if it is not checked.</source>
        </trans-unit>
        <trans-unit id="2962" translate="yes" xml:space="preserve">
          <source>Only radio buttons and check boxes can be checked.</source>
        </trans-unit>
        <trans-unit id="2963" translate="yes" xml:space="preserve">
          <source>For three-state buttons, the return value can be 2 if the button is indeterminate.</source>
        </trans-unit>
        <trans-unit id="2964" translate="yes" xml:space="preserve">
          <source>This member function returns 0 for a pushbutton.</source>
        </trans-unit>
        <trans-unit id="2965" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2966" translate="yes" xml:space="preserve">
          <source>If the button is a three-state control, the member function determines whether it is dimmed, checked, or neither.</source>
        </trans-unit>
        <trans-unit id="2967" translate="yes" xml:space="preserve">
          <source>CWnd::IsDynamicLayoutEnabled</source>
        </trans-unit>
        <trans-unit id="2968" translate="yes" xml:space="preserve">
          <source>Determines whether dynamic layout is enabled on this window.</source>
        </trans-unit>
        <trans-unit id="2969" translate="yes" xml:space="preserve">
          <source>If dynamic layout is enabled, the position and size of child windows can change when the user resizes the parent window.</source>
        </trans-unit>
        <trans-unit id="2970" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2971" translate="yes" xml:space="preserve">
          <source>TRUE if dynamic layout is enabled; otherwise FALSE.</source>
        </trans-unit>
        <trans-unit id="2972" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2973" translate="yes" xml:space="preserve">
          <source>CWnd::IsIconic</source>
        </trans-unit>
        <trans-unit id="2974" translate="yes" xml:space="preserve">
          <source>Specifies whether <ph id="ph1">`CWnd`</ph> is minimized (iconic).</source>
        </trans-unit>
        <trans-unit id="2975" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2976" translate="yes" xml:space="preserve">
          <source>Nonzero if <ph id="ph1">`CWnd`</ph> is minimized; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2977" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="2978" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#101</source>
        </trans-unit>
        <trans-unit id="2979" translate="yes" xml:space="preserve">
          <source>CWnd::IsTouchWindow</source>
        </trans-unit>
        <trans-unit id="2980" translate="yes" xml:space="preserve">
          <source>Specifies whether <ph id="ph1">`CWnd`</ph> has touch support.</source>
        </trans-unit>
        <trans-unit id="2981" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2982" translate="yes" xml:space="preserve">
          <source>if <ph id="ph1">`CWnd`</ph> has touch support; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="2983" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2984" translate="yes" xml:space="preserve">
          <source>CWnd::IsWindowEnabled</source>
        </trans-unit>
        <trans-unit id="2985" translate="yes" xml:space="preserve">
          <source>Specifies whether <ph id="ph1">`CWnd`</ph> is enabled for mouse and keyboard input.</source>
        </trans-unit>
        <trans-unit id="2986" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2987" translate="yes" xml:space="preserve">
          <source>Nonzero if <ph id="ph1">`CWnd`</ph> is enabled; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="2988" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="2989" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#102</source>
        </trans-unit>
        <trans-unit id="2990" translate="yes" xml:space="preserve">
          <source>CWnd::IsWindowVisible</source>
        </trans-unit>
        <trans-unit id="2991" translate="yes" xml:space="preserve">
          <source>Determines the visibility state of the given window.</source>
        </trans-unit>
        <trans-unit id="2992" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="2993" translate="yes" xml:space="preserve">
          <source>Nonzero if <ph id="ph1">`CWnd`</ph> is visible (has the <bpt id="p1">[</bpt>WS_VISIBLE<ept id="p1">](../../mfc/reference/window-styles.md)</ept> style bit set, and parent window is visible).</source>
        </trans-unit>
        <trans-unit id="2994" translate="yes" xml:space="preserve">
          <source>Because the return value reflects the state of the <bpt id="p1">**</bpt>WS_VISIBLE<ept id="p1">**</ept> style bit, the return value may be nonzero even though <ph id="ph1">`CWnd`</ph> is totally obscured by other windows.</source>
        </trans-unit>
        <trans-unit id="2995" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="2996" translate="yes" xml:space="preserve">
          <source>A window possesses a visibility state indicated by the <bpt id="p1">**</bpt>WS_VISIBLE<ept id="p1">**</ept> style bit.</source>
        </trans-unit>
        <trans-unit id="2997" translate="yes" xml:space="preserve">
          <source>When this style bit is set with a call to the <bpt id="p1">[</bpt>ShowWindow<ept id="p1">](#cwnd__showwindow)</ept> member function, the window is displayed and subsequent drawing to the window is displayed as long as the window has the style bit set.</source>
        </trans-unit>
        <trans-unit id="2998" translate="yes" xml:space="preserve">
          <source>Any drawing to a window that has the <bpt id="p1">**</bpt>WS_VISIBLE<ept id="p1">**</ept> style will not be displayed if the window is covered by other windows or is clipped by its parent window.</source>
        </trans-unit>
        <trans-unit id="2999" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="3000" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#103</source>
        </trans-unit>
        <trans-unit id="3001" translate="yes" xml:space="preserve">
          <source>CWnd::IsZoomed</source>
        </trans-unit>
        <trans-unit id="3002" translate="yes" xml:space="preserve">
          <source>Determines whether <ph id="ph1">`CWnd`</ph> has been maximized.</source>
        </trans-unit>
        <trans-unit id="3003" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3004" translate="yes" xml:space="preserve">
          <source>Nonzero if <ph id="ph1">`CWnd`</ph> is maximized; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="3005" translate="yes" xml:space="preserve">
          <source>CWnd::KillTimer</source>
        </trans-unit>
        <trans-unit id="3006" translate="yes" xml:space="preserve">
          <source>Kills the timer event identified by <ph id="ph1">`nIDEvent`</ph> from the earlier call to <ph id="ph2">`SetTimer`</ph>.</source>
        </trans-unit>
        <trans-unit id="3007" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3008" translate="yes" xml:space="preserve">
          <source>The value of the timer event passed to <bpt id="p1">[</bpt>SetTimer<ept id="p1">](#cwnd__settimer)</ept>.</source>
        </trans-unit>
        <trans-unit id="3009" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3010" translate="yes" xml:space="preserve">
          <source>Specifies the outcome of the function.</source>
        </trans-unit>
        <trans-unit id="3011" translate="yes" xml:space="preserve">
          <source>The value is nonzero if the event was killed.</source>
        </trans-unit>
        <trans-unit id="3012" translate="yes" xml:space="preserve">
          <source>It is 0 if the <ph id="ph1">`KillTimer`</ph> member function could not find the specified timer event.</source>
        </trans-unit>
        <trans-unit id="3013" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3014" translate="yes" xml:space="preserve">
          <source>Pending <bpt id="p1">[</bpt>WM_TIMER<ept id="p1">](#cwnd__ontimer)</ept> messages associated with the timer are not removed from the message queue.</source>
        </trans-unit>
        <trans-unit id="3015" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="3016" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CWnd::SetTimer<ept id="p1">](#cwnd__settimer)</ept>.</source>
        </trans-unit>
        <trans-unit id="3017" translate="yes" xml:space="preserve">
          <source>CWnd::LoadDynamicLayoutResource</source>
        </trans-unit>
        <trans-unit id="3018" translate="yes" xml:space="preserve">
          <source>Called by the framework to load dynamic layout information from the resource file.</source>
        </trans-unit>
        <trans-unit id="3019" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3020" translate="yes" xml:space="preserve">
          <source>The name of the resource that contains the desired dynamic layout information for this window.</source>
        </trans-unit>
        <trans-unit id="3021" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3022" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful.</source>
        </trans-unit>
        <trans-unit id="3023" translate="yes" xml:space="preserve">
          <source>It is 0 if a failure occurs.</source>
        </trans-unit>
        <trans-unit id="3024" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3025" translate="yes" xml:space="preserve">
          <source>Do not call this method directly.</source>
        </trans-unit>
        <trans-unit id="3026" translate="yes" xml:space="preserve">
          <source>CWnd::LockWindowUpdate</source>
        </trans-unit>
        <trans-unit id="3027" translate="yes" xml:space="preserve">
          <source>Disables drawing in the given window.</source>
        </trans-unit>
        <trans-unit id="3028" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3029" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful.</source>
        </trans-unit>
        <trans-unit id="3030" translate="yes" xml:space="preserve">
          <source>It is 0 if a failure occurs or if the <ph id="ph1">`LockWindowUpdate`</ph> function has been used to lock another window.</source>
        </trans-unit>
        <trans-unit id="3031" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3032" translate="yes" xml:space="preserve">
          <source>A locked window cannot be moved.</source>
        </trans-unit>
        <trans-unit id="3033" translate="yes" xml:space="preserve">
          <source>Only one window can be locked at a time.</source>
        </trans-unit>
        <trans-unit id="3034" translate="yes" xml:space="preserve">
          <source>To unlock a window locked with <ph id="ph1">`LockWindowUpdate`</ph>, call <bpt id="p1">[</bpt>UnlockWindowUpdate<ept id="p1">](#cwnd__unlockwindowupdate)</ept>.</source>
        </trans-unit>
        <trans-unit id="3035" translate="yes" xml:space="preserve">
          <source>If an application with a locked window (or any locked child windows) calls the <bpt id="p1">[</bpt>GetDC,<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144871)</ept> <bpt id="p2">[</bpt>GetDCEx,<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd144873)</ept> or <bpt id="p3">[</bpt>BeginPaint<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/dd183362)</ept> Windows function, the called function returns a device context whose visible region is empty.</source>
        </trans-unit>
        <trans-unit id="3036" translate="yes" xml:space="preserve">
          <source>This will occur until the application unlocks the window by calling the <ph id="ph1">`UnlockWindowUpdate`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="3037" translate="yes" xml:space="preserve">
          <source>While window updates are locked, the system keeps track of the bounding rectangle of any drawing operations to device contexts associated with a locked window.</source>
        </trans-unit>
        <trans-unit id="3038" translate="yes" xml:space="preserve">
          <source>When drawing is reenabled, this bounding rectangle is invalidated in the locked window and its child windows to force an eventual <bpt id="p1">[</bpt>WM_PAINT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145213)</ept> message to update the screen.</source>
        </trans-unit>
        <trans-unit id="3039" translate="yes" xml:space="preserve">
          <source>If no drawing has occurred while the window updates were locked, no area is invalidated.</source>
        </trans-unit>
        <trans-unit id="3040" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`LockWindowUpdate`</ph> member function does not make the given window invisible and does not clear the <bpt id="p1">[</bpt>WS_VISIBLE<ept id="p1">](../../mfc/reference/window-styles.md)</ept> style bit.</source>
        </trans-unit>
        <trans-unit id="3041" translate="yes" xml:space="preserve">
          <source>CWnd::m_hWnd</source>
        </trans-unit>
        <trans-unit id="3042" translate="yes" xml:space="preserve">
          <source>The handle of the Windows window attached to this <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="3043" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3044" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`m_hWnd`</ph> data member is a public variable of type <ph id="ph2">`HWND`</ph>.</source>
        </trans-unit>
        <trans-unit id="3045" translate="yes" xml:space="preserve">
          <source>CWnd::MapWindowPoints</source>
        </trans-unit>
        <trans-unit id="3046" translate="yes" xml:space="preserve">
          <source>Converts (maps) a set of points from the coordinate space of the <ph id="ph1">`CWnd`</ph> to the coordinate space of another window.</source>
        </trans-unit>
        <trans-unit id="3047" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3048" translate="yes" xml:space="preserve">
          <source>pwndTo</source>
        </trans-unit>
        <trans-unit id="3049" translate="yes" xml:space="preserve">
          <source>Identifies the window to which points are converted.</source>
        </trans-unit>
        <trans-unit id="3050" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the points are converted to screen coordinates.</source>
        </trans-unit>
        <trans-unit id="3051" translate="yes" xml:space="preserve">
          <source>Specifies the rectangle whose points are to be converted.</source>
        </trans-unit>
        <trans-unit id="3052" translate="yes" xml:space="preserve">
          <source>The first version of this function is available only for Windows 3.1 and later.</source>
        </trans-unit>
        <trans-unit id="3053" translate="yes" xml:space="preserve">
          <source>A pointer to an array of <bpt id="p1">[</bpt>POINT structure<ept id="p1">](../../mfc/reference/point-structure1.md)</ept> that contain the set of points to be converted.</source>
        </trans-unit>
        <trans-unit id="3054" translate="yes" xml:space="preserve">
          <source>Specifies the number of <bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> structures in the array pointed to by <ph id="ph1">`lpPoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="3055" translate="yes" xml:space="preserve">
          <source>CWnd::MessageBox</source>
        </trans-unit>
        <trans-unit id="3056" translate="yes" xml:space="preserve">
          <source>Creates and displays a window that contains an application-supplied message and caption, plus a combination of the predefined icons and pushbuttons described in the <bpt id="p1">[</bpt>Message-Box Styles<ept id="p1">](../../mfc/reference/message-box-styles.md)</ept> list.</source>
        </trans-unit>
        <trans-unit id="3057" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3058" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`CString`</ph> object or null-terminated string containing the message to be displayed.</source>
        </trans-unit>
        <trans-unit id="3059" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`CString`</ph> object or null-terminated string to be used for the message-box caption.</source>
        </trans-unit>
        <trans-unit id="3060" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpszCaption`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the default caption "Error" is used.</source>
        </trans-unit>
        <trans-unit id="3061" translate="yes" xml:space="preserve">
          <source>Specifies the contents and behavior of the message box.</source>
        </trans-unit>
        <trans-unit id="3062" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3063" translate="yes" xml:space="preserve">
          <source>This method utilizes the <bpt id="p1">[</bpt>MessageBox<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645505)</ept> function as defined in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="3064" translate="yes" xml:space="preserve">
          <source>This method returns the result of calling this function.</source>
        </trans-unit>
        <trans-unit id="3065" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3066" translate="yes" xml:space="preserve">
          <source>Use the global function <bpt id="p1">[</bpt>AfxMessageBox<ept id="p1">](../../mfc/reference/cstring-formatting-and-message-box-display.md#afxmessagebox)</ept> instead of this member function to implement a message box in your application.</source>
        </trans-unit>
        <trans-unit id="3067" translate="yes" xml:space="preserve">
          <source>The following shows the various system icons that can be used in a message box:</source>
        </trans-unit>
        <trans-unit id="3068" translate="yes" xml:space="preserve">
          <source>Stop &amp;#40;x&amp;#41; icon</source>
        </trans-unit>
        <trans-unit id="3069" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MB_ICONHAND<ept id="p1">**</ept>, <bpt id="p2">**</bpt>MB_ICONSTOP<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>MB_ICONERROR<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="3070" translate="yes" xml:space="preserve">
          <source>Help &amp;#40;&amp;#41; icon</source>
        </trans-unit>
        <trans-unit id="3071" translate="yes" xml:space="preserve">
          <source>MB_ICONQUESTION</source>
        </trans-unit>
        <trans-unit id="3072" translate="yes" xml:space="preserve">
          <source>Important &amp;#40;&amp;#33;&amp;#41; icon</source>
        </trans-unit>
        <trans-unit id="3073" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MB_ICONEXCLAMATION<ept id="p1">**</ept> and <bpt id="p2">**</bpt>MB_ICONWARNING<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="3074" translate="yes" xml:space="preserve">
          <source>Information &amp;#40;i&amp;#41; icon</source>
        </trans-unit>
        <trans-unit id="3075" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MB_ICONASTERISK<ept id="p1">**</ept> and <bpt id="p2">**</bpt>MB_ICONINFORMATION<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="3076" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="3077" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#104</source>
        </trans-unit>
        <trans-unit id="3078" translate="yes" xml:space="preserve">
          <source>CWnd::ModifyStyle</source>
        </trans-unit>
        <trans-unit id="3079" translate="yes" xml:space="preserve">
          <source>Call this member function to modify a window's style.</source>
        </trans-unit>
        <trans-unit id="3080" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3081" translate="yes" xml:space="preserve">
          <source>Specifies window styles to be removed during style modification.</source>
        </trans-unit>
        <trans-unit id="3082" translate="yes" xml:space="preserve">
          <source>Specifies window styles to be added during style modification.</source>
        </trans-unit>
        <trans-unit id="3083" translate="yes" xml:space="preserve">
          <source>Flags to be passed to <bpt id="p1">[</bpt>SetWindowPos<ept id="p1">](#cwnd__setwindowpos)</ept>, or zero if <ph id="ph1">`SetWindowPos`</ph> should not be called.</source>
        </trans-unit>
        <trans-unit id="3084" translate="yes" xml:space="preserve">
          <source>The default is zero.</source>
        </trans-unit>
        <trans-unit id="3085" translate="yes" xml:space="preserve">
          <source>See the Remarks section for a list of preset flags.</source>
        </trans-unit>
        <trans-unit id="3086" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3087" translate="yes" xml:space="preserve">
          <source>Nonzero if style was successfully modified; otherwise, 0.</source>
        </trans-unit>
        <trans-unit id="3088" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3089" translate="yes" xml:space="preserve">
          <source>Styles to be added or removed can be combined by using the bitwise OR (&amp;#124;) operator.</source>
        </trans-unit>
        <trans-unit id="3090" translate="yes" xml:space="preserve">
          <source>See the topics <bpt id="p1">[</bpt>Window Styles<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632600)</ept> and <bpt id="p2">[</bpt>CreateWindow<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms632679)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for information about the available window styles.</source>
        </trans-unit>
        <trans-unit id="3091" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nFlags`</ph> is nonzero, <ph id="ph2">`ModifyStyle`</ph> calls the Windows API function <bpt id="p1">[</bpt>SetWindowPos<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633545)</ept> and redraws the window by combining <ph id="ph3">`nFlags`</ph> with the following four preset flags:</source>
        </trans-unit>
        <trans-unit id="3092" translate="yes" xml:space="preserve">
          <source>Retains the current size.</source>
        </trans-unit>
        <trans-unit id="3093" translate="yes" xml:space="preserve">
          <source>Retains the current position.</source>
        </trans-unit>
        <trans-unit id="3094" translate="yes" xml:space="preserve">
          <source>Retains the current Z order.</source>
        </trans-unit>
        <trans-unit id="3095" translate="yes" xml:space="preserve">
          <source>Does not activate the window.</source>
        </trans-unit>
        <trans-unit id="3096" translate="yes" xml:space="preserve">
          <source>To modify a window's extended styles, see <bpt id="p1">[</bpt>ModifyStyleEx<ept id="p1">](#cwnd__modifystyleex)</ept>.</source>
        </trans-unit>
        <trans-unit id="3097" translate="yes" xml:space="preserve">
          <source>For some styles in certain controls (the <bpt id="p1">**</bpt>ES_READONLY<ept id="p1">**</ept> style in the edit control, for example), <bpt id="p2">**</bpt>ModifyStyle<ept id="p2">**</ept> may not properly change the style because the control may need to perform special internal processing.</source>
        </trans-unit>
        <trans-unit id="3098" translate="yes" xml:space="preserve">
          <source>In these cases, a corresponding message to change the style will be available ( <bpt id="p1">**</bpt>EM_SETREADONLY<ept id="p1">**</ept> in the example mentioned).</source>
        </trans-unit>
        <trans-unit id="3099" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="3100" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#105</source>
        </trans-unit>
        <trans-unit id="3101" translate="yes" xml:space="preserve">
          <source>CWnd::ModifyStyleEx</source>
        </trans-unit>
        <trans-unit id="3102" translate="yes" xml:space="preserve">
          <source>Call this member function to modify a window's extended style.</source>
        </trans-unit>
        <trans-unit id="3103" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3104" translate="yes" xml:space="preserve">
          <source>Specifies extended styles to be removed during style modification.</source>
        </trans-unit>
        <trans-unit id="3105" translate="yes" xml:space="preserve">
          <source>Specifies extended styles to be added during style modification.</source>
        </trans-unit>
        <trans-unit id="3106" translate="yes" xml:space="preserve">
          <source>Flags to be passed to <bpt id="p1">[</bpt>SetWindowPos<ept id="p1">](#cwnd__setwindowpos)</ept>, or zero if <ph id="ph1">`SetWindowPos`</ph> should not be called.</source>
        </trans-unit>
        <trans-unit id="3107" translate="yes" xml:space="preserve">
          <source>The default is zero.</source>
        </trans-unit>
        <trans-unit id="3108" translate="yes" xml:space="preserve">
          <source>See the Remarks section for a list of preset flags.</source>
        </trans-unit>
        <trans-unit id="3109" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3110" translate="yes" xml:space="preserve">
          <source>Nonzero if style was successfully modified; otherwise, 0.</source>
        </trans-unit>
        <trans-unit id="3111" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3112" translate="yes" xml:space="preserve">
          <source>Styles to be added or removed can be combined by using the bitwise OR (&amp;#124;) operator.</source>
        </trans-unit>
        <trans-unit id="3113" translate="yes" xml:space="preserve">
          <source>See the topics <bpt id="p1">[</bpt>Extended Window Styles<ept id="p1">](../../mfc/reference/extended-window-styles.md)</ept> in this book and <bpt id="p2">[</bpt>CreateWindowEx<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms632680)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for information about the available extended styles</source>
        </trans-unit>
        <trans-unit id="3114" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nFlags`</ph> is nonzero, <ph id="ph2">`ModifyStyleEx`</ph> calls the Windows API function <bpt id="p1">[</bpt>SetWindowPos<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633545)</ept> and redraws the window by combining <ph id="ph3">`nFlags`</ph> with the following four preset flags:</source>
        </trans-unit>
        <trans-unit id="3115" translate="yes" xml:space="preserve">
          <source>Retains the current size.</source>
        </trans-unit>
        <trans-unit id="3116" translate="yes" xml:space="preserve">
          <source>Retains the current position.</source>
        </trans-unit>
        <trans-unit id="3117" translate="yes" xml:space="preserve">
          <source>Retains the current Z order.</source>
        </trans-unit>
        <trans-unit id="3118" translate="yes" xml:space="preserve">
          <source>Does not activate the window.</source>
        </trans-unit>
        <trans-unit id="3119" translate="yes" xml:space="preserve">
          <source>To modify windows using regular window styles, see <bpt id="p1">[</bpt>ModifyStyle<ept id="p1">](#cwnd__modifystyle)</ept>.</source>
        </trans-unit>
        <trans-unit id="3120" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="3121" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#106</source>
        </trans-unit>
        <trans-unit id="3122" translate="yes" xml:space="preserve">
          <source>CWnd::MoveWindow</source>
        </trans-unit>
        <trans-unit id="3123" translate="yes" xml:space="preserve">
          <source>Changes the position and dimensions.</source>
        </trans-unit>
        <trans-unit id="3124" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3125" translate="yes" xml:space="preserve">
          <source>x</source>
        </trans-unit>
        <trans-unit id="3126" translate="yes" xml:space="preserve">
          <source>Specifies the new position of the left side of the <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="3127" translate="yes" xml:space="preserve">
          <source>y</source>
        </trans-unit>
        <trans-unit id="3128" translate="yes" xml:space="preserve">
          <source>Specifies the new position of the top of the <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="3129" translate="yes" xml:space="preserve">
          <source>Specifies the new width of the <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="3130" translate="yes" xml:space="preserve">
          <source>Specifies the new height of the <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="3131" translate="yes" xml:space="preserve">
          <source>Specifies whether <ph id="ph1">`CWnd`</ph> is to be repainted.</source>
        </trans-unit>
        <trans-unit id="3132" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, <ph id="ph1">`CWnd`</ph> receives a <bpt id="p2">[</bpt>WM_PAINT<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd145213)</ept> message in its <bpt id="p3">[</bpt>OnPaint<ept id="p3">](#cwnd__onpaint)</ept> message handler as usual.</source>
        </trans-unit>
        <trans-unit id="3133" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, no repainting of any kind occurs.</source>
        </trans-unit>
        <trans-unit id="3134" translate="yes" xml:space="preserve">
          <source>This applies to the client area, to the nonclient area (including the title and scroll bars), and to any part of the parent window uncovered as a result of <ph id="ph1">`CWnd`</ph>'s move.</source>
        </trans-unit>
        <trans-unit id="3135" translate="yes" xml:space="preserve">
          <source>When this parameter is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, the application must explicitly invalidate or redraw any parts of <ph id="ph1">`CWnd`</ph> and parent window that must be redrawn.</source>
        </trans-unit>
        <trans-unit id="3136" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CRect<ept id="p1">](../../atl-mfc-shared/reference/crect-class.md)</ept> object or <bpt id="p2">[</bpt>RECT structure<ept id="p2">](../../mfc/reference/rect-structure1.md)</ept> that specifies the new size and position.</source>
        </trans-unit>
        <trans-unit id="3137" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3138" translate="yes" xml:space="preserve">
          <source>For a top-level <ph id="ph1">`CWnd`</ph> object, the <bpt id="p1">*</bpt>x<ept id="p1">*</ept> and <bpt id="p2">*</bpt>y<ept id="p2">*</ept> parameters are relative to the upper-left corner of the screen.</source>
        </trans-unit>
        <trans-unit id="3139" translate="yes" xml:space="preserve">
          <source>For a child <ph id="ph1">`CWnd`</ph> object, they are relative to the upper-left corner of the parent window's client area.</source>
        </trans-unit>
        <trans-unit id="3140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MoveWindow`</ph> function sends the <bpt id="p1">[</bpt>WM_GETMINMAXINFO<ept id="p1">](#cwnd__ongetminmaxinfo)</ept> message.</source>
        </trans-unit>
        <trans-unit id="3141" translate="yes" xml:space="preserve">
          <source>Handling this message gives <ph id="ph1">`CWnd`</ph> the opportunity to modify the default values for the largest and smallest possible windows.</source>
        </trans-unit>
        <trans-unit id="3142" translate="yes" xml:space="preserve">
          <source>If the parameters to the <ph id="ph1">`MoveWindow`</ph> member function exceed these values, the values can be replaced by the minimum or maximum values in the <ph id="ph2">`WM_GETMINMAXINFO`</ph> handler.</source>
        </trans-unit>
        <trans-unit id="3143" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="3144" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CWnd::ClientToScreen<ept id="p1">](#cwnd__clienttoscreen)</ept>.</source>
        </trans-unit>
        <trans-unit id="3145" translate="yes" xml:space="preserve">
          <source>CWnd::NotifyWinEvent</source>
        </trans-unit>
        <trans-unit id="3146" translate="yes" xml:space="preserve">
          <source>Signals the system that a predefined event occurred.</source>
        </trans-unit>
        <trans-unit id="3147" translate="yes" xml:space="preserve">
          <source>If any client applications have registered a hook function for the event, the system calls the client's hook function.</source>
        </trans-unit>
        <trans-unit id="3148" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3149" translate="yes" xml:space="preserve">
          <source>Specifies the event that occurred.</source>
        </trans-unit>
        <trans-unit id="3150" translate="yes" xml:space="preserve">
          <source>This value must be one of the <bpt id="p1">[</bpt>event constants<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318066)</ept>.</source>
        </trans-unit>
        <trans-unit id="3151" translate="yes" xml:space="preserve">
          <source>idObjectType</source>
        </trans-unit>
        <trans-unit id="3152" translate="yes" xml:space="preserve">
          <source>Identifies the kind of object that generated the event.</source>
        </trans-unit>
        <trans-unit id="3153" translate="yes" xml:space="preserve">
          <source>This value is one of the predefined <bpt id="p1">[</bpt>object identifiers<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd373606)</ept> or a custom object ID value.</source>
        </trans-unit>
        <trans-unit id="3154" translate="yes" xml:space="preserve">
          <source>Identifies whether the event was generated by an object or a child element of the object.</source>
        </trans-unit>
        <trans-unit id="3155" translate="yes" xml:space="preserve">
          <source>If this value is <bpt id="p1">**</bpt>CHILDID_SELF<ept id="p1">**</ept>, the event was generated by the object itself.</source>
        </trans-unit>
        <trans-unit id="3156" translate="yes" xml:space="preserve">
          <source>If not, this value is the child ID of the element that generated the event.</source>
        </trans-unit>
        <trans-unit id="3157" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3158" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the function <bpt id="p1">[</bpt>NotifyWinEvent<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd373603)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="3159" translate="yes" xml:space="preserve">
          <source>CWnd::OnActivate</source>
        </trans-unit>
        <trans-unit id="3160" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when a <ph id="ph1">`CWnd`</ph> object is being activated or deactivated.</source>
        </trans-unit>
        <trans-unit id="3161" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3162" translate="yes" xml:space="preserve">
          <source>Specifies whether the <ph id="ph1">`CWnd`</ph> is being activated or deactivated.</source>
        </trans-unit>
        <trans-unit id="3163" translate="yes" xml:space="preserve">
          <source>It can be one of the following values:</source>
        </trans-unit>
        <trans-unit id="3164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WA_INACTIVE<ept id="p1">**</ept> The window is being deactivated.</source>
        </trans-unit>
        <trans-unit id="3165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WA_ACTIVE<ept id="p1">**</ept> The window is being activated through some method other than a mouse click (for example, by use of the keyboard interface to select the window).</source>
        </trans-unit>
        <trans-unit id="3166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WA_CLICKACTIVE<ept id="p1">**</ept> The window is being activated by a mouse click.</source>
        </trans-unit>
        <trans-unit id="3167" translate="yes" xml:space="preserve">
          <source>pWndOther</source>
        </trans-unit>
        <trans-unit id="3168" translate="yes" xml:space="preserve">
          <source>Pointer to the <ph id="ph1">`CWnd`</ph> being activated or deactivated.</source>
        </trans-unit>
        <trans-unit id="3169" translate="yes" xml:space="preserve">
          <source>The pointer can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, and it may be temporary.</source>
        </trans-unit>
        <trans-unit id="3170" translate="yes" xml:space="preserve">
          <source>bMinimized</source>
        </trans-unit>
        <trans-unit id="3171" translate="yes" xml:space="preserve">
          <source>Specifies the minimized state of the <ph id="ph1">`CWnd`</ph> being activated or deactivated.</source>
        </trans-unit>
        <trans-unit id="3172" translate="yes" xml:space="preserve">
          <source>A value of <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> indicates the window is minimized.</source>
        </trans-unit>
        <trans-unit id="3173" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the <ph id="ph1">`CWnd`</ph> is being activated; otherwise deactivated.</source>
        </trans-unit>
        <trans-unit id="3174" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3175" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`CWnd`</ph> object is activated with a mouse click, it will also receive an <bpt id="p1">[</bpt>OnMouseActivate<ept id="p1">](#cwnd__onmouseactivate)</ept> member function call.</source>
        </trans-unit>
        <trans-unit id="3176" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3177" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3178" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3179" translate="yes" xml:space="preserve">
          <source>CWnd::OnActivateApp</source>
        </trans-unit>
        <trans-unit id="3180" translate="yes" xml:space="preserve">
          <source>The framework calls this member function to all top-level windows of the task being activated and for all top-level windows of the task being deactivated.</source>
        </trans-unit>
        <trans-unit id="3181" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3182" translate="yes" xml:space="preserve">
          <source>Specifies whether the <ph id="ph1">`CWnd`</ph> is being activated or deactivated.</source>
        </trans-unit>
        <trans-unit id="3183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> means the <ph id="ph1">`CWnd`</ph> is being activated.</source>
        </trans-unit>
        <trans-unit id="3184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> means the <ph id="ph1">`CWnd`</ph> is being deactivated.</source>
        </trans-unit>
        <trans-unit id="3185" translate="yes" xml:space="preserve">
          <source>dwThreadID</source>
        </trans-unit>
        <trans-unit id="3186" translate="yes" xml:space="preserve">
          <source>Specifies the value of the thread ID.</source>
        </trans-unit>
        <trans-unit id="3187" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bActive`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, <bpt id="p2">*</bpt>dwThreadID<ept id="p2">*</ept> identifies the thread that owns the <ph id="ph2">`CWnd`</ph> being deactivated.</source>
        </trans-unit>
        <trans-unit id="3188" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bActive`</ph> is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, <bpt id="p2">*</bpt>dwThreadID<ept id="p2">*</ept> identifies the thread that owns the <ph id="ph2">`CWnd`</ph> being activated.</source>
        </trans-unit>
        <trans-unit id="3189" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3190" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3191" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3192" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3193" translate="yes" xml:space="preserve">
          <source>CWnd::OnAmbientProperty</source>
        </trans-unit>
        <trans-unit id="3194" translate="yes" xml:space="preserve">
          <source>The framework calls this member function to obtain ambient property values from a window that contains OLE controls.</source>
        </trans-unit>
        <trans-unit id="3195" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3196" translate="yes" xml:space="preserve">
          <source>Pointer to the site of the control that requested the ambient property.</source>
        </trans-unit>
        <trans-unit id="3197" translate="yes" xml:space="preserve">
          <source>The dispatch ID of the requested ambient property.</source>
        </trans-unit>
        <trans-unit id="3198" translate="yes" xml:space="preserve">
          <source>Pointer to a caller-allocated <ph id="ph1">`VARIANT`</ph> structure, through which the ambient property's value will be returned.</source>
        </trans-unit>
        <trans-unit id="3199" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if the ambient property is supported; <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> if not.</source>
        </trans-unit>
        <trans-unit id="3201" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3202" translate="yes" xml:space="preserve">
          <source>Override this function to alter the default ambient property values returned by an OLE control container to its controls.</source>
        </trans-unit>
        <trans-unit id="3203" translate="yes" xml:space="preserve">
          <source>Any ambient property requests not handled by an overriding function should be forwarded to the base class implementation.</source>
        </trans-unit>
        <trans-unit id="3204" translate="yes" xml:space="preserve">
          <source>CWnd::OnAppCommand</source>
        </trans-unit>
        <trans-unit id="3205" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user generates an application command event.</source>
        </trans-unit>
        <trans-unit id="3206" translate="yes" xml:space="preserve">
          <source>Such an event occurs when the user clicks an application command button or types an application command key.</source>
        </trans-unit>
        <trans-unit id="3207" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3208" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="3209" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="3210" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="3211" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>CWnd<ept id="p1">](../../mfc/reference/cwnd-class.md)</ept> object that represents the window where the user clicked the comman button or pressed the command key.</source>
        </trans-unit>
        <trans-unit id="3212" translate="yes" xml:space="preserve">
          <source>This window can be a child window of the window receiving the message.</source>
        </trans-unit>
        <trans-unit id="3213" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="3214" translate="yes" xml:space="preserve">
          <source>Indicates the application command.</source>
        </trans-unit>
        <trans-unit id="3215" translate="yes" xml:space="preserve">
          <source>For a list of possible values, see the commands under the <bpt id="p1">*</bpt>cmd<ept id="p1">*</ept> section of the <ph id="ph1">`lParam`</ph> parameter of <bpt id="p2">[</bpt>WM_APPCOMMAND<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms646275)</ept>.</source>
        </trans-unit>
        <trans-unit id="3216" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="3217" translate="yes" xml:space="preserve">
          <source>The input device that generated the input event.</source>
        </trans-unit>
        <trans-unit id="3218" translate="yes" xml:space="preserve">
          <source>For a list of possible values, see the devices under the <bpt id="p1">*</bpt>uDevice<ept id="p1">*</ept> section of the <ph id="ph1">`lParam`</ph> parameter of <bpt id="p2">[</bpt>WM_APPCOMMAND<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms646275)</ept>.</source>
        </trans-unit>
        <trans-unit id="3219" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="3220" translate="yes" xml:space="preserve">
          <source>Indicates any virtual keys that are down, such as the CTRL key or the left mouse button.</source>
        </trans-unit>
        <trans-unit id="3221" translate="yes" xml:space="preserve">
          <source>For a list of possible values, see the keys under the <bpt id="p1">*</bpt>dwKeys<ept id="p1">*</ept> section of the <ph id="ph1">`lParam`</ph> parameter of <bpt id="p2">[</bpt>WM_APPCOMMAND<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms646275)</ept>.</source>
        </trans-unit>
        <trans-unit id="3222" translate="yes" xml:space="preserve">
          <source>For more information, see the "Message Parameters" subheading in <bpt id="p1">[</bpt>About Mouse Input<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645601)</ept>.</source>
        </trans-unit>
        <trans-unit id="3223" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3224" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_APPCOMMAND<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646275)</ept> notification, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="3225" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3226" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3227" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3228" translate="yes" xml:space="preserve">
          <source>CWnd::OnAskCbFormatName</source>
        </trans-unit>
        <trans-unit id="3229" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the Clipboard contains a data handle for the <ph id="ph1">`CF_OWNERDISPLAY`</ph> format (that is, when the Clipboard owner will display the Clipboard contents).</source>
        </trans-unit>
        <trans-unit id="3230" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3231" translate="yes" xml:space="preserve">
          <source>Specifies the maximum number of bytes to copy.</source>
        </trans-unit>
        <trans-unit id="3232" translate="yes" xml:space="preserve">
          <source>Points to the buffer where the copy of the format name is to be stored.</source>
        </trans-unit>
        <trans-unit id="3233" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3234" translate="yes" xml:space="preserve">
          <source>The Clipboard owner should provide a name for its format.</source>
        </trans-unit>
        <trans-unit id="3235" translate="yes" xml:space="preserve">
          <source>Override this member function and copy the name of the <ph id="ph1">`CF_OWNERDISPLAY`</ph> format into the specified buffer, not exceeding the maximum number of bytes specified.</source>
        </trans-unit>
        <trans-unit id="3236" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3237" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3238" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3239" translate="yes" xml:space="preserve">
          <source>CWnd::OnCancelMode</source>
        </trans-unit>
        <trans-unit id="3240" translate="yes" xml:space="preserve">
          <source>The framework calls this member function to inform <ph id="ph1">`CWnd`</ph> to cancel any internal mode.</source>
        </trans-unit>
        <trans-unit id="3241" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3242" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`CWnd`</ph> object has the focus, its <ph id="ph2">`OnCancelMode`</ph> member function is called when a dialog box or message box is displayed.</source>
        </trans-unit>
        <trans-unit id="3243" translate="yes" xml:space="preserve">
          <source>This gives the <ph id="ph1">`CWnd`</ph> the opportunity to cancel modes such as mouse capture.</source>
        </trans-unit>
        <trans-unit id="3244" translate="yes" xml:space="preserve">
          <source>The default implementation responds by calling the <bpt id="p1">[</bpt>ReleaseCapture<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646261)</ept> Windows function.</source>
        </trans-unit>
        <trans-unit id="3245" translate="yes" xml:space="preserve">
          <source>Override this member function in your derived class to handle other modes.</source>
        </trans-unit>
        <trans-unit id="3246" translate="yes" xml:space="preserve">
          <source>CWnd::OnCaptureChanged</source>
        </trans-unit>
        <trans-unit id="3247" translate="yes" xml:space="preserve">
          <source>The framework calls this member function to notify the window that is losing the mouse capture.</source>
        </trans-unit>
        <trans-unit id="3248" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3249" translate="yes" xml:space="preserve">
          <source>A pointer to the window to gain mouse capture</source>
        </trans-unit>
        <trans-unit id="3250" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3251" translate="yes" xml:space="preserve">
          <source>A window receives this message even if it calls <bpt id="p1">[</bpt>ReleaseCapture<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646261)</ept> itself.</source>
        </trans-unit>
        <trans-unit id="3252" translate="yes" xml:space="preserve">
          <source>An application should not attempt to set the mouse capture in response to this message.</source>
        </trans-unit>
        <trans-unit id="3253" translate="yes" xml:space="preserve">
          <source>When it receives this message, a window should redraw itself, if necessary, to reflect the new mouse-capture state.</source>
        </trans-unit>
        <trans-unit id="3254" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for information on the <ph id="ph2">`ReleaseCapture`</ph> Windows function.</source>
        </trans-unit>
        <trans-unit id="3255" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3256" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3257" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3258" translate="yes" xml:space="preserve">
          <source>CWnd::OnChangeCbChain</source>
        </trans-unit>
        <trans-unit id="3259" translate="yes" xml:space="preserve">
          <source>The framework calls this member function for each window in the Clipboard-viewer chain to notify it that a window is being removed from the chain.</source>
        </trans-unit>
        <trans-unit id="3260" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3261" translate="yes" xml:space="preserve">
          <source>Specifies the window handle that is being removed from the Clipboard-viewer chain.</source>
        </trans-unit>
        <trans-unit id="3262" translate="yes" xml:space="preserve">
          <source>Specifies the window handle that follows the window being removed from the Clipboard-viewer chain.</source>
        </trans-unit>
        <trans-unit id="3263" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3264" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`CWnd`</ph> object that receives an <ph id="ph2">`OnChangeCbChain`</ph> call should use the <bpt id="p1">[</bpt>SendMessage<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms644950)</ept> Windows function to send the <bpt id="p2">[</bpt>WM_CHANGECBCHAIN<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms649019)</ept> message to the next window in the Clipboard-viewer chain (the handle returned by <ph id="ph3">`SetClipboardViewer`</ph>).</source>
        </trans-unit>
        <trans-unit id="3265" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`hWndRemove`</ph> is the next window in the chain, the window specified by <ph id="ph2">`hWndAfter`</ph> becomes the next window, and Clipboard messages are passed on to it.</source>
        </trans-unit>
        <trans-unit id="3266" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3267" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3268" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3269" translate="yes" xml:space="preserve">
          <source>CWnd::OnChangeUIState</source>
        </trans-unit>
        <trans-unit id="3270" translate="yes" xml:space="preserve">
          <source>Called when the user interface (UI) state should be changed.</source>
        </trans-unit>
        <trans-unit id="3271" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3272" translate="yes" xml:space="preserve">
          <source>Specifies the action to be taken.</source>
        </trans-unit>
        <trans-unit id="3273" translate="yes" xml:space="preserve">
          <source>Can be one of the following values:</source>
        </trans-unit>
        <trans-unit id="3274" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UIS_CLEAR<ept id="p1">**</ept> The UI state element (specified by <ph id="ph1">`nUIElement`</ph>) should be hidden.</source>
        </trans-unit>
        <trans-unit id="3275" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UIS_INITIALIZE<ept id="p1">**</ept> The UI state element (specified by <ph id="ph1">`nUIElement`</ph>) should be changed based on the last input event.</source>
        </trans-unit>
        <trans-unit id="3276" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">**</bpt>Remarks<ept id="p1">**</ept> section of <bpt id="p2">[</bpt>WM_CHANGEUISTATE<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms646342)</ept>.</source>
        </trans-unit>
        <trans-unit id="3277" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UIS_SET<ept id="p1">**</ept> The UI state element (specified by <ph id="ph1">`nUIElement`</ph>) should be visible.</source>
        </trans-unit>
        <trans-unit id="3278" translate="yes" xml:space="preserve">
          <source>Specifies which UI state elements are affected or the style of the control.</source>
        </trans-unit>
        <trans-unit id="3279" translate="yes" xml:space="preserve">
          <source>Can be one of the following values:</source>
        </trans-unit>
        <trans-unit id="3280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UISF_HIDEACCEL<ept id="p1">**</ept> Keyboard accelerators.</source>
        </trans-unit>
        <trans-unit id="3281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UISF_HIDEFOCUS<ept id="p1">**</ept> Focus indicators.</source>
        </trans-unit>
        <trans-unit id="3282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UISF_ACTIVE Windows XP:<ept id="p1">**</ept> A control should be drawn in the style used for active controls.</source>
        </trans-unit>
        <trans-unit id="3283" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3284" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the <bpt id="p1">[</bpt>WM_CHANGEUISTATE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646342)</ept> message, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="3285" translate="yes" xml:space="preserve">
          <source>CWnd::OnChar</source>
        </trans-unit>
        <trans-unit id="3286" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when a keystroke translates to a nonsystem character.</source>
        </trans-unit>
        <trans-unit id="3287" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3288" translate="yes" xml:space="preserve">
          <source>Contains the character code value of the key.</source>
        </trans-unit>
        <trans-unit id="3289" translate="yes" xml:space="preserve">
          <source>Contains the repeat count, the number of times the keystroke is repeated when user holds down the key.</source>
        </trans-unit>
        <trans-unit id="3290" translate="yes" xml:space="preserve">
          <source>Contains the scan code, key-transition code, previous key state, and context code, as shown in the following list:</source>
        </trans-unit>
        <trans-unit id="3291" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="3292" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="3293" translate="yes" xml:space="preserve">
          <source>0-15</source>
        </trans-unit>
        <trans-unit id="3294" translate="yes" xml:space="preserve">
          <source>Specifies the repeat count.</source>
        </trans-unit>
        <trans-unit id="3295" translate="yes" xml:space="preserve">
          <source>The value is the number of times the keystroke is repeated as a result of the user holding down the key.</source>
        </trans-unit>
        <trans-unit id="3296" translate="yes" xml:space="preserve">
          <source>16-23</source>
        </trans-unit>
        <trans-unit id="3297" translate="yes" xml:space="preserve">
          <source>Specifies the scan code.</source>
        </trans-unit>
        <trans-unit id="3298" translate="yes" xml:space="preserve">
          <source>The value depends on the original equipment manufacturer (OEM)</source>
        </trans-unit>
        <trans-unit id="3299" translate="yes" xml:space="preserve">
          <source>24</source>
        </trans-unit>
        <trans-unit id="3300" translate="yes" xml:space="preserve">
          <source>Specifies whether the key is an extended key, such as the right-hand ALT and CTRL keys that appear on an enhanced 101- or 102-key keyboard.</source>
        </trans-unit>
        <trans-unit id="3301" translate="yes" xml:space="preserve">
          <source>The value is 1 if it is an extended key; otherwise, it is 0.</source>
        </trans-unit>
        <trans-unit id="3302" translate="yes" xml:space="preserve">
          <source>25-28</source>
        </trans-unit>
        <trans-unit id="3303" translate="yes" xml:space="preserve">
          <source>Used internally by Windows.</source>
        </trans-unit>
        <trans-unit id="3304" translate="yes" xml:space="preserve">
          <source>29</source>
        </trans-unit>
        <trans-unit id="3305" translate="yes" xml:space="preserve">
          <source>Specifies the context code.</source>
        </trans-unit>
        <trans-unit id="3306" translate="yes" xml:space="preserve">
          <source>The value is 1 if the ALT key is held down while the key is pressed; otherwise, the value is 0.</source>
        </trans-unit>
        <trans-unit id="3307" translate="yes" xml:space="preserve">
          <source>30</source>
        </trans-unit>
        <trans-unit id="3308" translate="yes" xml:space="preserve">
          <source>Specifies the previous key state.</source>
        </trans-unit>
        <trans-unit id="3309" translate="yes" xml:space="preserve">
          <source>The value is 1 if the key is down before the message is sent, or it is 0 if the key is up.</source>
        </trans-unit>
        <trans-unit id="3310" translate="yes" xml:space="preserve">
          <source>31</source>
        </trans-unit>
        <trans-unit id="3311" translate="yes" xml:space="preserve">
          <source>Specifies the transition state.</source>
        </trans-unit>
        <trans-unit id="3312" translate="yes" xml:space="preserve">
          <source>The value is 1 if the key is being released, or it is 0 if the key is being pressed.</source>
        </trans-unit>
        <trans-unit id="3313" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3314" translate="yes" xml:space="preserve">
          <source>This function is called before the <bpt id="p1">[</bpt>OnKeyUp<ept id="p1">](#cwnd__onkeyup)</ept> member function and after the <bpt id="p2">[</bpt>OnKeyDown<ept id="p2">](#cwnd__onkeydown)</ept> member function are called.</source>
        </trans-unit>
        <trans-unit id="3315" translate="yes" xml:space="preserve">
          <source>contains the value of the keyboard key being pressed or released.</source>
        </trans-unit>
        <trans-unit id="3316" translate="yes" xml:space="preserve">
          <source>Because there is not necessarily a one-to-one correspondence between keys pressed and <ph id="ph1">`OnChar`</ph> calls generated, the information in <ph id="ph2">`nFlags`</ph> is generally not useful to applications.</source>
        </trans-unit>
        <trans-unit id="3317" translate="yes" xml:space="preserve">
          <source>The information in <ph id="ph1">`nFlags`</ph> applies only to the most recent call to the <ph id="ph2">`OnKeyUp`</ph> member function or the <ph id="ph3">`OnKeyDown`</ph> member function that precedes the call to <ph id="ph4">`OnChar`</ph>.</source>
        </trans-unit>
        <trans-unit id="3318" translate="yes" xml:space="preserve">
          <source>For IBM Enhanced 101- and 102-key keyboards, enhanced keys are the right ALT and the right CTRL keys on the main section of the keyboard; the INS, DEL, HOME, END, PAGE UP, PAGE DOWN, and arrow keys in the clusters to the left of the numeric keypad; and the slash (/) and ENTER keys in the numeric keypad.</source>
        </trans-unit>
        <trans-unit id="3319" translate="yes" xml:space="preserve">
          <source>Some other keyboards may support the extended-key bit in <ph id="ph1">`nFlags`</ph>.</source>
        </trans-unit>
        <trans-unit id="3320" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3321" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3322" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3323" translate="yes" xml:space="preserve">
          <source>CWnd::OnCharToItem</source>
        </trans-unit>
        <trans-unit id="3324" translate="yes" xml:space="preserve">
          <source>Called when a list box with the <bpt id="p1">[</bpt>LBS_WANTKEYBOARDINPUT<ept id="p1">](../../mfc/reference/list-box-styles.md)</ept> style sends its owner a <bpt id="p2">[</bpt>WM_CHARTOITEM<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb761358)</ept> message in response to a <bpt id="p3">[</bpt>WM_CHAR<ept id="p3">](#cwnd__onchar)</ept> message.</source>
        </trans-unit>
        <trans-unit id="3325" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3326" translate="yes" xml:space="preserve">
          <source>Specifies the value of the key pressed by the user.</source>
        </trans-unit>
        <trans-unit id="3327" translate="yes" xml:space="preserve">
          <source>Specifies a pointer to the list box.</source>
        </trans-unit>
        <trans-unit id="3328" translate="yes" xml:space="preserve">
          <source>It may be temporary.</source>
        </trans-unit>
        <trans-unit id="3329" translate="yes" xml:space="preserve">
          <source>Specifies the current caret position.</source>
        </trans-unit>
        <trans-unit id="3330" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3331" translate="yes" xml:space="preserve">
          <source>The framework calls this member function to specify the action that the application performed in response to the call.</source>
        </trans-unit>
        <trans-unit id="3332" translate="yes" xml:space="preserve">
          <source>A return value of –2 indicates that the application handled all aspects of selecting the item and wants no further action by the list box.</source>
        </trans-unit>
        <trans-unit id="3333" translate="yes" xml:space="preserve">
          <source>A return value of –1 indicates that the list box should perform the default action in response to the keystroke.</source>
        </trans-unit>
        <trans-unit id="3334" translate="yes" xml:space="preserve">
          <source>A return value of 0 or greater specifies the zero-based index of an item in the list box and indicates that the list box should perform the default action for the keystroke on the given item.</source>
        </trans-unit>
        <trans-unit id="3335" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3336" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3337" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3338" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3339" translate="yes" xml:space="preserve">
          <source>CWnd::OnChildActivate</source>
        </trans-unit>
        <trans-unit id="3340" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`CWnd`</ph> object is a multiple document interface (MDI) child window, <ph id="ph2">`OnChildActivate`</ph> is called by the framework when the user clicks the window's title bar or when the window is activated, moved, or sized.</source>
        </trans-unit>
        <trans-unit id="3341" translate="yes" xml:space="preserve">
          <source>CWnd::OnChildNotify</source>
        </trans-unit>
        <trans-unit id="3342" translate="yes" xml:space="preserve">
          <source>This member function is called by this window's parent window when it receives a notification message that applies to this window.</source>
        </trans-unit>
        <trans-unit id="3343" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3344" translate="yes" xml:space="preserve">
          <source>A Windows message number sent to a parent window.</source>
        </trans-unit>
        <trans-unit id="3345" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>wparam<ept id="p1">**</ept> associated with the message.</source>
        </trans-unit>
        <trans-unit id="3346" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>lparam<ept id="p1">**</ept> associated with the message.</source>
        </trans-unit>
        <trans-unit id="3347" translate="yes" xml:space="preserve">
          <source>A pointer to a value to be returned from the parent's window procedure.</source>
        </trans-unit>
        <trans-unit id="3348" translate="yes" xml:space="preserve">
          <source>This pointer will be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if no return value is expected.</source>
        </trans-unit>
        <trans-unit id="3349" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3350" translate="yes" xml:space="preserve">
          <source>Nonzero if this window is responsible for handling the message sent to its parent; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="3351" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3352" translate="yes" xml:space="preserve">
          <source>Never call this member function directly.</source>
        </trans-unit>
        <trans-unit id="3353" translate="yes" xml:space="preserve">
          <source>The default implementation of this member function returns 0, which means that the parent should handle the message.</source>
        </trans-unit>
        <trans-unit id="3354" translate="yes" xml:space="preserve">
          <source>Override this member function to extend the manner in which a control responds to notification messages.</source>
        </trans-unit>
        <trans-unit id="3355" translate="yes" xml:space="preserve">
          <source>CWnd::OnClipboardUpdate</source>
        </trans-unit>
        <trans-unit id="3356" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the contents of the clipboard have changed.</source>
        </trans-unit>
        <trans-unit id="3357" translate="yes" xml:space="preserve">
          <source>CWnd::OnClose</source>
        </trans-unit>
        <trans-unit id="3358" translate="yes" xml:space="preserve">
          <source>The framework calls this member function as a signal that the <ph id="ph1">`CWnd`</ph> or an application is to terminate.</source>
        </trans-unit>
        <trans-unit id="3359" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3360" translate="yes" xml:space="preserve">
          <source>The default implementation calls <ph id="ph1">`DestroyWindow`</ph>.</source>
        </trans-unit>
        <trans-unit id="3361" translate="yes" xml:space="preserve">
          <source>CWnd::OnColorizationColorChanged</source>
        </trans-unit>
        <trans-unit id="3362" translate="yes" xml:space="preserve">
          <source>The framework calls this member when the rendering policy for the nonclient area has changed.</source>
        </trans-unit>
        <trans-unit id="3363" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3364" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="3365" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="3366" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="3367" translate="yes" xml:space="preserve">
          <source>Specifies the new colorization color.</source>
        </trans-unit>
        <trans-unit id="3368" translate="yes" xml:space="preserve">
          <source>The color format is a hexadecimal number of the form 0xAARRGGBB, where each of the four components ranges from 0x00 through 0xFF.</source>
        </trans-unit>
        <trans-unit id="3369" translate="yes" xml:space="preserve">
          <source>The AA component is the alpha value, RR is the color red, GG is green, and BB is blue.</source>
        </trans-unit>
        <trans-unit id="3370" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="3371" translate="yes" xml:space="preserve">
          <source>if the new color is blended with opacity; <ph id="ph1">`false`</ph> if it is not.</source>
        </trans-unit>
        <trans-unit id="3372" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3373" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_DWMNCRENDERINGCHANGED<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd388198)</ept> notification message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="3374" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3375" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3376" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3377" translate="yes" xml:space="preserve">
          <source>CWnd::OnCommand</source>
        </trans-unit>
        <trans-unit id="3378" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user selects an item from a menu, when a child control sends a notification message, or when an accelerator keystroke is translated.</source>
        </trans-unit>
        <trans-unit id="3379" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3380" translate="yes" xml:space="preserve">
          <source>The low-order word of <ph id="ph1">`wParam`</ph> identifies the command ID of the menu item, control, or accelerator.</source>
        </trans-unit>
        <trans-unit id="3381" translate="yes" xml:space="preserve">
          <source>The high-order word of <ph id="ph1">`wParam`</ph> specifies the notification message if the message is from a control.</source>
        </trans-unit>
        <trans-unit id="3382" translate="yes" xml:space="preserve">
          <source>If the message is from an accelerator, the high-order word is 1.</source>
        </trans-unit>
        <trans-unit id="3383" translate="yes" xml:space="preserve">
          <source>If the message is from a menu, the high-order word is 0.</source>
        </trans-unit>
        <trans-unit id="3384" translate="yes" xml:space="preserve">
          <source>Identifies the control that sends the message if the message is from a control.</source>
        </trans-unit>
        <trans-unit id="3385" translate="yes" xml:space="preserve">
          <source>Otherwise, <ph id="ph1">`lParam`</ph> is 0.</source>
        </trans-unit>
        <trans-unit id="3386" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3387" translate="yes" xml:space="preserve">
          <source>An application returns nonzero if it processes this message; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="3388" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3389" translate="yes" xml:space="preserve">
          <source>processes the message map for control notification and <ph id="ph1">`ON_COMMAND`</ph> entries, and calls the appropriate member function.</source>
        </trans-unit>
        <trans-unit id="3390" translate="yes" xml:space="preserve">
          <source>Override this member function in your derived class to handle the <bpt id="p1">[</bpt>WM_COMMAND<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647591)</ept> message.</source>
        </trans-unit>
        <trans-unit id="3391" translate="yes" xml:space="preserve">
          <source>An override will not process the message map unless the base class <ph id="ph1">`OnCommand`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="3392" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3393" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3394" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3395" translate="yes" xml:space="preserve">
          <source>CWnd::OnCompacting</source>
        </trans-unit>
        <trans-unit id="3396" translate="yes" xml:space="preserve">
          <source>The framework calls this member function for all top-level windows when Windows detects that more than 12.5 percent of system time over a 30- to 60-second interval is being spent compacting memory.</source>
        </trans-unit>
        <trans-unit id="3397" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3398" translate="yes" xml:space="preserve">
          <source>nCpuTime</source>
        </trans-unit>
        <trans-unit id="3399" translate="yes" xml:space="preserve">
          <source>Specifies the ratio of CPU time currently spent by Windows compacting memory to CPU time spent performing other operations.</source>
        </trans-unit>
        <trans-unit id="3400" translate="yes" xml:space="preserve">
          <source>For example, 8000h represents 50 percent of CPU time spent compacting memory.</source>
        </trans-unit>
        <trans-unit id="3401" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3402" translate="yes" xml:space="preserve">
          <source>This indicates that system memory is low.</source>
        </trans-unit>
        <trans-unit id="3403" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`CWnd`</ph> object receives this call, it should free as much memory as possible, taking into account the current level of activity of the application and the total number of applications running in Windows.</source>
        </trans-unit>
        <trans-unit id="3404" translate="yes" xml:space="preserve">
          <source>The application can call the Windows function to determine how many applications are running.</source>
        </trans-unit>
        <trans-unit id="3405" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3406" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3407" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3408" translate="yes" xml:space="preserve">
          <source>CWnd::OnCompareItem</source>
        </trans-unit>
        <trans-unit id="3409" translate="yes" xml:space="preserve">
          <source>The framework calls this member function to specify the relative position of a new item in a child sorted owner-draw combo or list box.</source>
        </trans-unit>
        <trans-unit id="3410" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3411" translate="yes" xml:space="preserve">
          <source>The identifier of the control that sent the <ph id="ph1">`WM_COMPAREITEM`</ph> message.</source>
        </trans-unit>
        <trans-unit id="3412" translate="yes" xml:space="preserve">
          <source>Contains a long pointer to a <bpt id="p1">[</bpt>COMPAREITEMSTRUCT<ept id="p1">](../../mfc/reference/compareitemstruct-structure.md)</ept> data structure that contains the identifiers and application-supplied data for two items in the combo or list box.</source>
        </trans-unit>
        <trans-unit id="3413" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3414" translate="yes" xml:space="preserve">
          <source>Indicates the relative position of the two items.</source>
        </trans-unit>
        <trans-unit id="3415" translate="yes" xml:space="preserve">
          <source>It may be any of the following values:</source>
        </trans-unit>
        <trans-unit id="3416" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="3417" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="3418" translate="yes" xml:space="preserve">
          <source>–1</source>
        </trans-unit>
        <trans-unit id="3419" translate="yes" xml:space="preserve">
          <source>Item 1 sorts before item 2.</source>
        </trans-unit>
        <trans-unit id="3420" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="3421" translate="yes" xml:space="preserve">
          <source>Item 1 and item 2 sort the same.</source>
        </trans-unit>
        <trans-unit id="3422" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="3423" translate="yes" xml:space="preserve">
          <source>Item 1 sorts after item 2.</source>
        </trans-unit>
        <trans-unit id="3424" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3425" translate="yes" xml:space="preserve">
          <source>If a combo or list box is created with the <bpt id="p1">[</bpt>CBS_SORT<ept id="p1">](../../mfc/reference/combo-box-styles.md)</ept> or <bpt id="p2">[</bpt>LBS_SORT<ept id="p2">](../../mfc/reference/list-box-styles.md)</ept> style, Windows sends the combo-box or list-box owner a <ph id="ph1">`WM_COMPAREITEM`</ph> message whenever the application adds a new item.</source>
        </trans-unit>
        <trans-unit id="3426" translate="yes" xml:space="preserve">
          <source>Two items in the combo or list box are reformed in a <ph id="ph1">`COMPAREITEMSTRUCT`</ph> structure pointed to by <ph id="ph2">`lpCompareItemStruct`</ph>.</source>
        </trans-unit>
        <trans-unit id="3427" translate="yes" xml:space="preserve">
          <source>should return a value that indicates which of the items should appear before the other.</source>
        </trans-unit>
        <trans-unit id="3428" translate="yes" xml:space="preserve">
          <source>Typically, Windows makes this call several times until it determines the exact position for the new item.</source>
        </trans-unit>
        <trans-unit id="3429" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>hwndItem<ept id="p1">**</ept> member of the <ph id="ph1">`COMPAREITEMSTRUCT`</ph> structure belongs to a <bpt id="p2">[</bpt>CListBox<ept id="p2">](../../mfc/reference/clistbox-class.md)</ept> or <bpt id="p3">[</bpt>CComboBox<ept id="p3">](../../mfc/reference/ccombobox-class.md)</ept> object, then the <ph id="ph2">`CompareItem`</ph> virtual function of the appropriate class is called.</source>
        </trans-unit>
        <trans-unit id="3430" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">`CComboBox::CompareItem`</ph> or <ph id="ph2">`CListBox::CompareItem`</ph> in your derived <ph id="ph3">`CListBox`</ph> or <ph id="ph4">`CComboBox`</ph> class to do the item comparison.</source>
        </trans-unit>
        <trans-unit id="3431" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3432" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3433" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3434" translate="yes" xml:space="preserve">
          <source>CWnd::OnCompositionChanged</source>
        </trans-unit>
        <trans-unit id="3435" translate="yes" xml:space="preserve">
          <source>The framework calls this member function for all top-level windows when the Desktop Window Manager (DWM) composition is enabled or disabled.</source>
        </trans-unit>
        <trans-unit id="3436" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3437" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_DWMCOMPOSITIONCHANGED<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd388199)</ept> notification, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="3438" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3439" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3440" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3441" translate="yes" xml:space="preserve">
          <source>CWnd::OnContextMenu</source>
        </trans-unit>
        <trans-unit id="3442" translate="yes" xml:space="preserve">
          <source>Called by the framework when the user has clicked the right mouse button (right clicked) in the window.</source>
        </trans-unit>
        <trans-unit id="3443" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3444" translate="yes" xml:space="preserve">
          <source>Handle to the window in which the user right clicked the mouse.</source>
        </trans-unit>
        <trans-unit id="3445" translate="yes" xml:space="preserve">
          <source>This can be a child window of the window receiving the message.</source>
        </trans-unit>
        <trans-unit id="3446" translate="yes" xml:space="preserve">
          <source>For more information about processing this message, see the Remarks section.</source>
        </trans-unit>
        <trans-unit id="3447" translate="yes" xml:space="preserve">
          <source>Position of the cursor, in screen coordinates, at the time of the mouse click.</source>
        </trans-unit>
        <trans-unit id="3448" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3449" translate="yes" xml:space="preserve">
          <source>You can process this message by displaying a context menu using the <bpt id="p1">[</bpt>TrackPopupMenu<ept id="p1">](../../mfc/reference/cmenu-class.md#cmenu__trackpopupmenu)</ept>.</source>
        </trans-unit>
        <trans-unit id="3450" translate="yes" xml:space="preserve">
          <source>If you do not display a context menu you should pass this message onto the <bpt id="p1">[</bpt>DefWindowProc<ept id="p1">](#cwnd__defwindowproc)</ept> function.</source>
        </trans-unit>
        <trans-unit id="3451" translate="yes" xml:space="preserve">
          <source>If your window is a child window, <ph id="ph1">`DefWindowProc`</ph> sends the message to the parent.</source>
        </trans-unit>
        <trans-unit id="3452" translate="yes" xml:space="preserve">
          <source>Otherwise, <ph id="ph1">`DefWindowProc`</ph> displays a default context menu if the specified position is in the window's caption.</source>
        </trans-unit>
        <trans-unit id="3453" translate="yes" xml:space="preserve">
          <source>CWnd::OnCopyData</source>
        </trans-unit>
        <trans-unit id="3454" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to copy data from one application to another.</source>
        </trans-unit>
        <trans-unit id="3455" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3456" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CWnd<ept id="p1">](../../mfc/reference/cwnd-class.md)</ept> object that is sending the data.</source>
        </trans-unit>
        <trans-unit id="3457" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>COPYDATASTRUCT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms649010)</ept> structure that contains the data being sent.</source>
        </trans-unit>
        <trans-unit id="3458" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3459" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if the receiving application successfully accepts the data.</source>
        </trans-unit>
        <trans-unit id="3460" translate="yes" xml:space="preserve">
          <source>Otherwise, returns <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="3461" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3462" translate="yes" xml:space="preserve">
          <source>The data being passed must not contain pointers or other references to objects not accessible to the application receiving the data.</source>
        </trans-unit>
        <trans-unit id="3463" translate="yes" xml:space="preserve">
          <source>While the data is being copied, it must not be changed by another thread of the sending process.</source>
        </trans-unit>
        <trans-unit id="3464" translate="yes" xml:space="preserve">
          <source>The receiving application should consider the data read-only.</source>
        </trans-unit>
        <trans-unit id="3465" translate="yes" xml:space="preserve">
          <source>The structure pointed to by the parameter <ph id="ph1">`pCopyDataStruct`</ph> is valid only during the transfer of data; however, the receiving application should not free the memory associated with the structure.</source>
        </trans-unit>
        <trans-unit id="3466" translate="yes" xml:space="preserve">
          <source>If the receiving application needs access to the data after this function returns, it must copy the data received to a local buffer.</source>
        </trans-unit>
        <trans-unit id="3467" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3468" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3469" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3470" translate="yes" xml:space="preserve">
          <source>CWnd::OnCreate</source>
        </trans-unit>
        <trans-unit id="3471" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when an application requests that the Windows window be created by calling the <bpt id="p1">[</bpt>Create<ept id="p1">](#cwnd__create)</ept> or <bpt id="p2">[</bpt>CreateEx<ept id="p2">](#cwnd__createex)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="3472" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3473" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>CREATESTRUCT<ept id="p1">](../../mfc/reference/createstruct-structure.md)</ept> structure that contains information about the <ph id="ph1">`CWnd`</ph> object being created.</source>
        </trans-unit>
        <trans-unit id="3474" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3475" translate="yes" xml:space="preserve">
          <source>must return 0 to continue the creation of the <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="3476" translate="yes" xml:space="preserve">
          <source>If the application returns –1, the window will be destroyed.</source>
        </trans-unit>
        <trans-unit id="3477" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3478" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CWnd`</ph> object receives this call after the window is created but before it becomes visible.</source>
        </trans-unit>
        <trans-unit id="3479" translate="yes" xml:space="preserve">
          <source>is called before the <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> or <ph id="ph1">`CreateEx`</ph> member function returns.</source>
        </trans-unit>
        <trans-unit id="3480" translate="yes" xml:space="preserve">
          <source>Override this member function to perform any needed initialization of a derived class.</source>
        </trans-unit>
        <trans-unit id="3481" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CREATESTRUCT`</ph> structure contains copies of the parameters used to create the window.</source>
        </trans-unit>
        <trans-unit id="3482" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3483" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3484" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3485" translate="yes" xml:space="preserve">
          <source>CWnd::OnCtlColor</source>
        </trans-unit>
        <trans-unit id="3486" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when a child control is about to be drawn.</source>
        </trans-unit>
        <trans-unit id="3487" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3488" translate="yes" xml:space="preserve">
          <source>Contains a pointer to the display context for the child window.</source>
        </trans-unit>
        <trans-unit id="3489" translate="yes" xml:space="preserve">
          <source>May be temporary.</source>
        </trans-unit>
        <trans-unit id="3490" translate="yes" xml:space="preserve">
          <source>Contains a pointer to the control asking for the color.</source>
        </trans-unit>
        <trans-unit id="3491" translate="yes" xml:space="preserve">
          <source>May be temporary.</source>
        </trans-unit>
        <trans-unit id="3492" translate="yes" xml:space="preserve">
          <source>Contains one of the following values, specifying the type of control:</source>
        </trans-unit>
        <trans-unit id="3493" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CTLCOLOR_BTN<ept id="p1">**</ept> Button control</source>
        </trans-unit>
        <trans-unit id="3494" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CTLCOLOR_DLG<ept id="p1">**</ept> Dialog box</source>
        </trans-unit>
        <trans-unit id="3495" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CTLCOLOR_EDIT<ept id="p1">**</ept> Edit control</source>
        </trans-unit>
        <trans-unit id="3496" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CTLCOLOR_LISTBOX<ept id="p1">**</ept> List-box control</source>
        </trans-unit>
        <trans-unit id="3497" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CTLCOLOR_MSGBOX<ept id="p1">**</ept> Message box</source>
        </trans-unit>
        <trans-unit id="3498" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CTLCOLOR_SCROLLBAR<ept id="p1">**</ept> Scroll-bar control</source>
        </trans-unit>
        <trans-unit id="3499" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CTLCOLOR_STATIC<ept id="p1">**</ept> Static control</source>
        </trans-unit>
        <trans-unit id="3500" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3501" translate="yes" xml:space="preserve">
          <source>must return a handle to the brush that is to be used for painting the control background.</source>
        </trans-unit>
        <trans-unit id="3502" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3503" translate="yes" xml:space="preserve">
          <source>Most controls send this message to their parent (usually a dialog box) to prepare the <ph id="ph1">`pDC`</ph> for drawing the control using the correct colors.</source>
        </trans-unit>
        <trans-unit id="3504" translate="yes" xml:space="preserve">
          <source>To change the text color, call the <ph id="ph1">`SetTextColor`</ph> member function with the desired red, green, and blue (RGB) values.</source>
        </trans-unit>
        <trans-unit id="3505" translate="yes" xml:space="preserve">
          <source>To change the background color of a single-line edit control, set the brush handle in both the <bpt id="p1">**</bpt>CTLCOLOR_EDIT<ept id="p1">**</ept> and <bpt id="p2">**</bpt>CTLCOLOR_MSGBOX<ept id="p2">**</ept> message codes, and call the <bpt id="p3">[</bpt>CDC::SetBkColor<ept id="p3">](../../mfc/reference/cdc-class.md#cdc__setbkcolor)</ept> function in response to the <bpt id="p4">**</bpt>CTLCOLOR_EDIT<ept id="p4">**</ept> code.</source>
        </trans-unit>
        <trans-unit id="3506" translate="yes" xml:space="preserve">
          <source>will not be called for the list box of a drop-down combo box because the drop-down list box is actually a child of the combo box and not a child of the window.</source>
        </trans-unit>
        <trans-unit id="3507" translate="yes" xml:space="preserve">
          <source>To change the color of the drop-down list box, create a <ph id="ph1">`CComboBox`</ph> with an override of <ph id="ph2">`OnCtlColor`</ph> that checks for <bpt id="p1">**</bpt>CTLCOLOR_LISTBOX<ept id="p1">**</ept> in the <ph id="ph3">`nCtlColor`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="3508" translate="yes" xml:space="preserve">
          <source>In this handler, the <ph id="ph1">`SetBkColor`</ph> member function must be used to set the background color for the text.</source>
        </trans-unit>
        <trans-unit id="3509" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3510" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3511" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3512" translate="yes" xml:space="preserve">
          <source>To add the following method to your dialog class, use the Visual Studio properties pane to add a message handler for WM_CTLCOLOR.</source>
        </trans-unit>
        <trans-unit id="3513" translate="yes" xml:space="preserve">
          <source>Alternatively, you can manually add an ON_WM_CTLCOLOR() entry to the message map.</source>
        </trans-unit>
        <trans-unit id="3514" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="3515" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#107</source>
        </trans-unit>
        <trans-unit id="3516" translate="yes" xml:space="preserve">
          <source>CWnd::OnDeadChar</source>
        </trans-unit>
        <trans-unit id="3517" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the <bpt id="p1">[</bpt>OnKeyUp<ept id="p1">](#cwnd__onkeyup)</ept> member function and the <bpt id="p2">[</bpt>OnKeyDown<ept id="p2">](#cwnd__onkeydown)</ept> member functions are called.</source>
        </trans-unit>
        <trans-unit id="3518" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3519" translate="yes" xml:space="preserve">
          <source>Specifies the dead-key character value.</source>
        </trans-unit>
        <trans-unit id="3520" translate="yes" xml:space="preserve">
          <source>Specifies the repeat count.</source>
        </trans-unit>
        <trans-unit id="3521" translate="yes" xml:space="preserve">
          <source>Specifies the scan code, key-transition code, previous key state, and context code, as shown in the following list:</source>
        </trans-unit>
        <trans-unit id="3522" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="3523" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="3524" translate="yes" xml:space="preserve">
          <source>0–7</source>
        </trans-unit>
        <trans-unit id="3525" translate="yes" xml:space="preserve">
          <source>Scan code (OEM-dependent value).</source>
        </trans-unit>
        <trans-unit id="3526" translate="yes" xml:space="preserve">
          <source>Low byte of high-order word.</source>
        </trans-unit>
        <trans-unit id="3527" translate="yes" xml:space="preserve">
          <source>8</source>
        </trans-unit>
        <trans-unit id="3528" translate="yes" xml:space="preserve">
          <source>Extended key, such as a function key or a key on the numeric keypad (1 if it is an extended key; otherwise 0).</source>
        </trans-unit>
        <trans-unit id="3529" translate="yes" xml:space="preserve">
          <source>9–10</source>
        </trans-unit>
        <trans-unit id="3530" translate="yes" xml:space="preserve">
          <source>Not used.</source>
        </trans-unit>
        <trans-unit id="3531" translate="yes" xml:space="preserve">
          <source>11–12</source>
        </trans-unit>
        <trans-unit id="3532" translate="yes" xml:space="preserve">
          <source>Used internally by Windows.</source>
        </trans-unit>
        <trans-unit id="3533" translate="yes" xml:space="preserve">
          <source>13</source>
        </trans-unit>
        <trans-unit id="3534" translate="yes" xml:space="preserve">
          <source>Context code (1 if the ALT key is held down while the key is pressed; otherwise 0).</source>
        </trans-unit>
        <trans-unit id="3535" translate="yes" xml:space="preserve">
          <source>14</source>
        </trans-unit>
        <trans-unit id="3536" translate="yes" xml:space="preserve">
          <source>Previous key state (1 if the key is down before the call, 0 if the key is up).</source>
        </trans-unit>
        <trans-unit id="3537" translate="yes" xml:space="preserve">
          <source>15</source>
        </trans-unit>
        <trans-unit id="3538" translate="yes" xml:space="preserve">
          <source>Transition state (1 if the key is being released, 0 if the key is being pressed).</source>
        </trans-unit>
        <trans-unit id="3539" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3540" translate="yes" xml:space="preserve">
          <source>This member function can be used to specify the character value of a dead key.</source>
        </trans-unit>
        <trans-unit id="3541" translate="yes" xml:space="preserve">
          <source>A dead key is a key, such as the umlaut (double-dot) character, that is combined with other characters to form a composite character.</source>
        </trans-unit>
        <trans-unit id="3542" translate="yes" xml:space="preserve">
          <source>For example, the umlaut-O character consists of the dead key, umlaut, and the O key.</source>
        </trans-unit>
        <trans-unit id="3543" translate="yes" xml:space="preserve">
          <source>An application typically uses <ph id="ph1">`OnDeadChar`</ph> to give the user feedback about each key pressed.</source>
        </trans-unit>
        <trans-unit id="3544" translate="yes" xml:space="preserve">
          <source>For example, an application can display the accent in the current character position without moving the caret.</source>
        </trans-unit>
        <trans-unit id="3545" translate="yes" xml:space="preserve">
          <source>Since there is not necessarily a one-to-one correspondence between keys pressed and <ph id="ph1">`OnDeadChar`</ph> calls, the information in <ph id="ph2">`nFlags`</ph> is generally not useful to applications.</source>
        </trans-unit>
        <trans-unit id="3546" translate="yes" xml:space="preserve">
          <source>The information in <ph id="ph1">`nFlags`</ph> applies only to the most recent call to the <bpt id="p1">[</bpt>OnKeyUp<ept id="p1">](#cwnd__onkeyup)</ept> member function or the <bpt id="p2">[</bpt>OnKeyDown<ept id="p2">](#cwnd__onkeydown)</ept> member function that precedes the <ph id="ph2">`OnDeadChar`</ph> call.</source>
        </trans-unit>
        <trans-unit id="3547" translate="yes" xml:space="preserve">
          <source>For IBM Enhanced 101- and 102-key keyboards, enhanced keys are the right ALT and the right CTRL keys on the main section of the keyboard; the INS, DEL, HOME, END, PAGE UP, PAGE DOWN, and arrow keys in the clusters to the left of the numeric keypad; and the slash (/) and ENTER keys in the numeric keypad.</source>
        </trans-unit>
        <trans-unit id="3548" translate="yes" xml:space="preserve">
          <source>Some other keyboards may support the extended-key bit in <ph id="ph1">`nFlags`</ph>.</source>
        </trans-unit>
        <trans-unit id="3549" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3550" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3551" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3552" translate="yes" xml:space="preserve">
          <source>CWnd::OnDeleteItem</source>
        </trans-unit>
        <trans-unit id="3553" translate="yes" xml:space="preserve">
          <source>The framework calls this member function to inform the owner of an owner-draw list box or combo box that the list box or combo box is destroyed or that items have been removed by <bpt id="p1">[</bpt>CComboBox::DeleteString<ept id="p1">](../../mfc/reference/ccombobox-class.md#ccombobox__deletestring)</ept>, <bpt id="p2">[</bpt>CListBox::DeleteString<ept id="p2">](../../mfc/reference/clistbox-class.md#clistbox__deletestring)</ept>, <bpt id="p3">[</bpt>CComboBox::ResetContent<ept id="p3">](../../mfc/reference/ccombobox-class.md#ccombobox__resetcontent)</ept>, or <bpt id="p4">[</bpt>CListBox::ResetContent<ept id="p4">](../../mfc/reference/clistbox-class.md#clistbox__resetcontent)</ept>.</source>
        </trans-unit>
        <trans-unit id="3554" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3555" translate="yes" xml:space="preserve">
          <source>The identifier of the control that sent the <ph id="ph1">`WM_DELETEITEM`</ph> message.</source>
        </trans-unit>
        <trans-unit id="3556" translate="yes" xml:space="preserve">
          <source>Specifies a long pointer to a <bpt id="p1">[</bpt>DELETEITEMSTRUCT<ept id="p1">](../../mfc/reference/deleteitemstruct-structure.md)</ept> data structure that contains information about the deleted list box item.</source>
        </trans-unit>
        <trans-unit id="3557" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3558" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>hwndItem<ept id="p1">**</ept> member of the <ph id="ph1">`DELETEITEMSTRUCT`</ph> structure belongs to a combo box or list box, then the <ph id="ph2">`DeleteItem`</ph> virtual function of the appropriate class is called.</source>
        </trans-unit>
        <trans-unit id="3559" translate="yes" xml:space="preserve">
          <source>Override the <ph id="ph1">`DeleteItem`</ph> member function of the appropriate control's class to delete item-specific data.</source>
        </trans-unit>
        <trans-unit id="3560" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3561" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3562" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3563" translate="yes" xml:space="preserve">
          <source>CWnd::OnDestroy</source>
        </trans-unit>
        <trans-unit id="3564" translate="yes" xml:space="preserve">
          <source>The framework calls this member function to inform the <ph id="ph1">`CWnd`</ph> object that it is being destroyed.</source>
        </trans-unit>
        <trans-unit id="3565" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3566" translate="yes" xml:space="preserve">
          <source>is called after the <ph id="ph1">`CWnd`</ph> object is removed from the screen.</source>
        </trans-unit>
        <trans-unit id="3567" translate="yes" xml:space="preserve">
          <source>is called first for the <ph id="ph1">`CWnd`</ph> being destroyed, then for the child windows of <ph id="ph2">`CWnd`</ph> as they are destroyed.</source>
        </trans-unit>
        <trans-unit id="3568" translate="yes" xml:space="preserve">
          <source>It can be assumed that all child windows still exist while <ph id="ph1">`OnDestroy`</ph> runs.</source>
        </trans-unit>
        <trans-unit id="3569" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`CWnd`</ph> object being destroyed is part of the Clipboard-viewer chain (set by calling the <bpt id="p1">[</bpt>SetClipboardViewer<ept id="p1">](#cwnd__setclipboardviewer)</ept> member function), the <ph id="ph2">`CWnd`</ph> must remove itself from the Clipboard-viewer chain by calling the <bpt id="p2">[</bpt>ChangeClipboardChain<ept id="p2">](#cwnd__changeclipboardchain)</ept> member function before returning from the <ph id="ph3">`OnDestroy`</ph> function.</source>
        </trans-unit>
        <trans-unit id="3570" translate="yes" xml:space="preserve">
          <source>CWnd::OnDestroyClipboard</source>
        </trans-unit>
        <trans-unit id="3571" translate="yes" xml:space="preserve">
          <source>The framework calls this member function for the Clipboard owner when the Clipboard is emptied through a call to the <bpt id="p1">[</bpt>EmptyClipboard<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms649037)</ept> Windows function.</source>
        </trans-unit>
        <trans-unit id="3572" translate="yes" xml:space="preserve">
          <source>CWnd::OnDeviceChange</source>
        </trans-unit>
        <trans-unit id="3573" translate="yes" xml:space="preserve">
          <source>The framework calls this member function to notify an application or device driver of a change to the hardware configuration of a device or the computer.</source>
        </trans-unit>
        <trans-unit id="3574" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3575" translate="yes" xml:space="preserve">
          <source>nEventType</source>
        </trans-unit>
        <trans-unit id="3576" translate="yes" xml:space="preserve">
          <source>An event type.</source>
        </trans-unit>
        <trans-unit id="3577" translate="yes" xml:space="preserve">
          <source>See the Remarks section for a description of the available values</source>
        </trans-unit>
        <trans-unit id="3578" translate="yes" xml:space="preserve">
          <source>The address of a structure that contains event-specific data.</source>
        </trans-unit>
        <trans-unit id="3579" translate="yes" xml:space="preserve">
          <source>Its meaning depends on the given event.</source>
        </trans-unit>
        <trans-unit id="3580" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3581" translate="yes" xml:space="preserve">
          <source>For devices that offer software-controllable features, such as ejection and locking, the operating system typically sends a <bpt id="p1">**</bpt>DBT_DEVICEREMOVEPENDING<ept id="p1">**</ept> message to let applications and device drivers end their use of the device gracefully.</source>
        </trans-unit>
        <trans-unit id="3582" translate="yes" xml:space="preserve">
          <source>If the operating system forcefully removes of a device, it may not send a <bpt id="p1">**</bpt>DBT_DEVICEQUERYREMOVE<ept id="p1">**</ept> message before doing so.</source>
        </trans-unit>
        <trans-unit id="3583" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>nEvent<ept id="p1">*</ept> parameter can be one of these values:</source>
        </trans-unit>
        <trans-unit id="3584" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DBT_DEVICEARRIVAL<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa363205)</ept> A device has been inserted and is now available.</source>
        </trans-unit>
        <trans-unit id="3585" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DBT_DEVICEQUERYREMOVE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa363206)</ept> Permission to remove a device is requested.</source>
        </trans-unit>
        <trans-unit id="3586" translate="yes" xml:space="preserve">
          <source>Any application can deny this request and cancel the removal.</source>
        </trans-unit>
        <trans-unit id="3587" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DBT_DEVICEQUERYREMOVEFAILED<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa363207)</ept> Request to remove a device has been canceled.</source>
        </trans-unit>
        <trans-unit id="3588" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DBT_DEVICEREMOVEPENDING<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa363209)</ept> Device is about to be removed.</source>
        </trans-unit>
        <trans-unit id="3589" translate="yes" xml:space="preserve">
          <source>Cannot be denied.</source>
        </trans-unit>
        <trans-unit id="3590" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DBT_DEVICEREMOVECOMPLETE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa363208)</ept> Device has been removed.</source>
        </trans-unit>
        <trans-unit id="3591" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DBT_DEVICETYPESPECIFIC<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa363210)</ept> Device-specific event.</source>
        </trans-unit>
        <trans-unit id="3592" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DBT_CONFIGCHANGED<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa363203)</ept> Current configuration has changed.</source>
        </trans-unit>
        <trans-unit id="3593" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DBT_DEVNODES_CHANGED<ept id="p1">**</ept> Device node has changed.</source>
        </trans-unit>
        <trans-unit id="3594" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3595" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3596" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3597" translate="yes" xml:space="preserve">
          <source>CWnd::OnDevModeChange</source>
        </trans-unit>
        <trans-unit id="3598" translate="yes" xml:space="preserve">
          <source>The framework calls this member function for all top-level <ph id="ph1">`CWnd`</ph> objects when the user changes device-mode settings.</source>
        </trans-unit>
        <trans-unit id="3599" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3600" translate="yes" xml:space="preserve">
          <source>lpDeviceName</source>
        </trans-unit>
        <trans-unit id="3601" translate="yes" xml:space="preserve">
          <source>Points to the device name specified in the Windows initialization file, WIN.INI.</source>
        </trans-unit>
        <trans-unit id="3602" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3603" translate="yes" xml:space="preserve">
          <source>Applications that handle the <ph id="ph1">`WM_DEVMODECHANGE`</ph> message may reinitialize their device-mode settings.</source>
        </trans-unit>
        <trans-unit id="3604" translate="yes" xml:space="preserve">
          <source>Applications that use the Windows <bpt id="p1">**</bpt>ExtDeviceMode<ept id="p1">**</ept> function to save and restore device settings typically do not process this function.</source>
        </trans-unit>
        <trans-unit id="3605" translate="yes" xml:space="preserve">
          <source>This function is not called when the user changes the default printer from Control Panel.</source>
        </trans-unit>
        <trans-unit id="3606" translate="yes" xml:space="preserve">
          <source>In this case, the <ph id="ph1">`OnWinIniChange`</ph> function is called.</source>
        </trans-unit>
        <trans-unit id="3607" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3608" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3609" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3610" translate="yes" xml:space="preserve">
          <source>CWnd::OnDrawClipboard</source>
        </trans-unit>
        <trans-unit id="3611" translate="yes" xml:space="preserve">
          <source>The framework calls this member function for each window in the Clipboard-viewer chain when the contents of the Clipboard change.</source>
        </trans-unit>
        <trans-unit id="3612" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3613" translate="yes" xml:space="preserve">
          <source>Only applications that have joined the Clipboard-viewer chain by calling the <bpt id="p1">[</bpt>SetClipboardViewer<ept id="p1">](#cwnd__setclipboardviewer)</ept> member function need to respond to this call.</source>
        </trans-unit>
        <trans-unit id="3614" translate="yes" xml:space="preserve">
          <source>Each window that receives an <ph id="ph1">`OnDrawClipboard`</ph> call should call the <bpt id="p1">[</bpt>SendMessage<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms644950)</ept> Windows function to pass a <bpt id="p2">[</bpt>WM_DRAWCLIPBOARD<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms649025)</ept> message on to the next window in the Clipboard-viewer chain.</source>
        </trans-unit>
        <trans-unit id="3615" translate="yes" xml:space="preserve">
          <source>The handle of the next window is returned by the <bpt id="p1">[</bpt>SetClipboardViewer<ept id="p1">](#cwnd__setclipboardviewer)</ept> member function; it may be modified in response to an <bpt id="p2">[</bpt>OnChangeCbChain<ept id="p2">](#cwnd__onchangecbchain)</ept> member function call.</source>
        </trans-unit>
        <trans-unit id="3616" translate="yes" xml:space="preserve">
          <source>CWnd::OnDrawIconicThumbnailOrLivePreview</source>
        </trans-unit>
        <trans-unit id="3617" translate="yes" xml:space="preserve">
          <source>Called by the framework when it needs to obtain a bitmap to be displayed on Windows 7 tab thumbnail, or on the client for application peek.</source>
        </trans-unit>
        <trans-unit id="3618" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3619" translate="yes" xml:space="preserve">
          <source>Specifies the device context.</source>
        </trans-unit>
        <trans-unit id="3620" translate="yes" xml:space="preserve">
          <source>Specifies the bounding rectangle of the area to render.</source>
        </trans-unit>
        <trans-unit id="3621" translate="yes" xml:space="preserve">
          <source>Specifies the size of the target thumbnail.</source>
        </trans-unit>
        <trans-unit id="3622" translate="yes" xml:space="preserve">
          <source>Should be ignored if <ph id="ph1">`bIsThumbnail`</ph> is <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="3623" translate="yes" xml:space="preserve">
          <source>Specifies whether this method is called for iconic thumbnail or live preview (peek).</source>
        </trans-unit>
        <trans-unit id="3624" translate="yes" xml:space="preserve">
          <source>[out] Set it to <ph id="ph1">`TRUE`</ph> if your implementation initializes the alpha channel of a bitmap selected in <ph id="ph2">`dc`</ph>.</source>
        </trans-unit>
        <trans-unit id="3625" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3626" translate="yes" xml:space="preserve">
          <source>Override this method in a derived class and draw on the specified device context in order to customize thumbnail and peek.</source>
        </trans-unit>
        <trans-unit id="3627" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bThumbnail`</ph> is <ph id="ph2">`TRUE`</ph>, <ph id="ph3">`szRequiredThumbnailSize`</ph> can be ignored.</source>
        </trans-unit>
        <trans-unit id="3628" translate="yes" xml:space="preserve">
          <source>In this case you should be aware that you draw full sized bitmap (that is, a bitmap that covers the whole client area).</source>
        </trans-unit>
        <trans-unit id="3629" translate="yes" xml:space="preserve">
          <source>The device context ( <ph id="ph1">`dc`</ph>) comes with selected 32 bits bitmap.</source>
        </trans-unit>
        <trans-unit id="3630" translate="yes" xml:space="preserve">
          <source>The default implementation sends WM_PRINT to this window with PRF_CLIENT, PRF_CHILDREN, and PRF_NONCLIENT flags.</source>
        </trans-unit>
        <trans-unit id="3631" translate="yes" xml:space="preserve">
          <source>CWnd::OnDrawItem</source>
        </trans-unit>
        <trans-unit id="3632" translate="yes" xml:space="preserve">
          <source>The framework calls this member function for the owner of an owner-draw button control, combo-box control, list-box control, or menu when a visual aspect of the control or menu has changed.</source>
        </trans-unit>
        <trans-unit id="3633" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3634" translate="yes" xml:space="preserve">
          <source>Contains the identifier of the control that sent the <ph id="ph1">`WM_DRAWITEM`</ph> message.</source>
        </trans-unit>
        <trans-unit id="3635" translate="yes" xml:space="preserve">
          <source>If a menu sent the message, <ph id="ph1">`nIDCtl`</ph> contains 0.</source>
        </trans-unit>
        <trans-unit id="3636" translate="yes" xml:space="preserve">
          <source>Specifies a long pointer to a <ph id="ph1">`DRAWITEMSTRUCT`</ph> data structure that contains information about the item to be drawn and the type of drawing required.</source>
        </trans-unit>
        <trans-unit id="3637" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3638" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>itemAction<ept id="p1">**</ept> member of the <bpt id="p2">[</bpt>DRAWITEMSTRUCT<ept id="p2">](../../mfc/reference/drawitemstruct-structure.md)</ept> structure defines the drawing operation that is to be performed.</source>
        </trans-unit>
        <trans-unit id="3639" translate="yes" xml:space="preserve">
          <source>The data in this member allows the owner of the control to determine what drawing action is required.</source>
        </trans-unit>
        <trans-unit id="3640" translate="yes" xml:space="preserve">
          <source>Before returning from processing this message, an application should ensure that the device context identified by the <ph id="ph1">`hDC`</ph> member of the <ph id="ph2">`DRAWITEMSTRUCT`</ph> structure is restored to the default state.</source>
        </trans-unit>
        <trans-unit id="3641" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>hwndItem<ept id="p1">**</ept> member belongs to a <bpt id="p2">[</bpt>CButton<ept id="p2">](../../mfc/reference/cbutton-class.md)</ept>, <bpt id="p3">[</bpt>CMenu<ept id="p3">](../../mfc/reference/cmenu-class.md)</ept>, <bpt id="p4">[</bpt>CListBox<ept id="p4">](../../mfc/reference/clistbox-class.md)</ept>, or <bpt id="p5">[</bpt>CComboBox<ept id="p5">](../../mfc/reference/ccombobox-class.md)</ept> object, then the <ph id="ph1">`DrawItem`</ph> virtual function of the appropriate class is called.</source>
        </trans-unit>
        <trans-unit id="3642" translate="yes" xml:space="preserve">
          <source>Override the <ph id="ph1">`DrawItem`</ph> member function of the appropriate control's class to draw the item.</source>
        </trans-unit>
        <trans-unit id="3643" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3644" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3645" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3646" translate="yes" xml:space="preserve">
          <source>CWnd::OnDropFiles</source>
        </trans-unit>
        <trans-unit id="3647" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user releases the left mouse button over a window that has registered itself as the recipient of dropped files.</source>
        </trans-unit>
        <trans-unit id="3648" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3649" translate="yes" xml:space="preserve">
          <source>hDropInfo</source>
        </trans-unit>
        <trans-unit id="3650" translate="yes" xml:space="preserve">
          <source>A pointer to an internal data structure that describes the dropped files.</source>
        </trans-unit>
        <trans-unit id="3651" translate="yes" xml:space="preserve">
          <source>This handle is used by the <bpt id="p1">**</bpt>DragFinish<ept id="p1">**</ept>, <bpt id="p2">**</bpt>DragQueryFile<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>DragQueryPoint<ept id="p3">**</ept> Windows functions to retrieve information about the dropped files.</source>
        </trans-unit>
        <trans-unit id="3652" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3653" translate="yes" xml:space="preserve">
          <source>Typically, a derived class will be designed to support dropped files and it will register itself during window construction.</source>
        </trans-unit>
        <trans-unit id="3654" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3655" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3656" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3657" translate="yes" xml:space="preserve">
          <source>CWnd::OnEnable</source>
        </trans-unit>
        <trans-unit id="3658" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when an application changes the enabled state of the <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="3659" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3660" translate="yes" xml:space="preserve">
          <source>Specifies whether the <ph id="ph1">`CWnd`</ph> object has been enabled or disabled.</source>
        </trans-unit>
        <trans-unit id="3661" translate="yes" xml:space="preserve">
          <source>This parameter is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if the <ph id="ph1">`CWnd`</ph> has been enabled; it is <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> if the <ph id="ph2">`CWnd`</ph> has been disabled.</source>
        </trans-unit>
        <trans-unit id="3662" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3663" translate="yes" xml:space="preserve">
          <source>is called before the <bpt id="p1">[</bpt>EnableWindow<ept id="p1">](#cwnd__enablewindow)</ept> member function returns, but after the window enabled state ( <bpt id="p2">[</bpt>WS_DISABLED<ept id="p2">](../../mfc/reference/window-styles.md)</ept> style bit) has changed.</source>
        </trans-unit>
        <trans-unit id="3664" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3665" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3666" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3667" translate="yes" xml:space="preserve">
          <source>CWnd::OnEndSession</source>
        </trans-unit>
        <trans-unit id="3668" translate="yes" xml:space="preserve">
          <source>The framework calls this member function after the <ph id="ph1">`CWnd`</ph> object has returned a nonzero value from a <bpt id="p1">[</bpt>OnQueryEndSession<ept id="p1">](#cwnd__onqueryendsession)</ept> member function call.</source>
        </trans-unit>
        <trans-unit id="3669" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3670" translate="yes" xml:space="preserve">
          <source>Specifies whether or not the session is being ended.</source>
        </trans-unit>
        <trans-unit id="3671" translate="yes" xml:space="preserve">
          <source>It is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if the session is being ended; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="3672" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3673" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OnEndSession`</ph> call informs the <ph id="ph2">`CWnd`</ph> object whether the session is actually ending.</source>
        </trans-unit>
        <trans-unit id="3674" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bEnding`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, Windows can terminate any time after all applications have returned from processing this call.</source>
        </trans-unit>
        <trans-unit id="3675" translate="yes" xml:space="preserve">
          <source>Consequently, have an application perform all tasks required for termination within <ph id="ph1">`OnEndSession`</ph>.</source>
        </trans-unit>
        <trans-unit id="3676" translate="yes" xml:space="preserve">
          <source>You do not need to call the <bpt id="p1">[</bpt>DestroyWindow<ept id="p1">](#cwnd__destroywindow)</ept> member function or <bpt id="p2">[</bpt>PostQuitMessage<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms644945)</ept> Windows function when the session is ending.</source>
        </trans-unit>
        <trans-unit id="3677" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3678" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3679" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3680" translate="yes" xml:space="preserve">
          <source>CWnd::OnEnterIdle</source>
        </trans-unit>
        <trans-unit id="3681" translate="yes" xml:space="preserve">
          <source>The framework calls this member function to inform an application's main window procedure that a modal dialog box or a menu is entering an idle state.</source>
        </trans-unit>
        <trans-unit id="3682" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3683" translate="yes" xml:space="preserve">
          <source>Specifies whether the message is the result of a dialog box or a menu being displayed.</source>
        </trans-unit>
        <trans-unit id="3684" translate="yes" xml:space="preserve">
          <source>This parameter can be one of the following values:</source>
        </trans-unit>
        <trans-unit id="3685" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MSGF_DIALOGBOX<ept id="p1">**</ept> The system is idle because a dialog box is being displayed.</source>
        </trans-unit>
        <trans-unit id="3686" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MSGF_MENU<ept id="p1">**</ept> The system is idle because a menu is being displayed.</source>
        </trans-unit>
        <trans-unit id="3687" translate="yes" xml:space="preserve">
          <source>pWho</source>
        </trans-unit>
        <trans-unit id="3688" translate="yes" xml:space="preserve">
          <source>Specifies a pointer to the dialog box (if <ph id="ph1">`nWhy`</ph> is <bpt id="p1">**</bpt>MSGF_DIALOGBOX<ept id="p1">**</ept>), or the window that contains the displayed menu (if <ph id="ph2">`nWhy`</ph> is <bpt id="p2">**</bpt>MSGF_MENU<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="3689" translate="yes" xml:space="preserve">
          <source>This pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="3690" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3691" translate="yes" xml:space="preserve">
          <source>A modal dialog box or menu enters an idle state when no messages are waiting in its queue after it has processed one or more previous messages.</source>
        </trans-unit>
        <trans-unit id="3692" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3693" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3694" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3695" translate="yes" xml:space="preserve">
          <source>CWnd::OnEnterMenuLoop</source>
        </trans-unit>
        <trans-unit id="3696" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when a menu modal loop has been entered.</source>
        </trans-unit>
        <trans-unit id="3697" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3698" translate="yes" xml:space="preserve">
          <source>Specifies whether the menu involved is a popup menu.</source>
        </trans-unit>
        <trans-unit id="3699" translate="yes" xml:space="preserve">
          <source>Has a nonzero value if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="3700" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3701" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3702" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3703" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3704" translate="yes" xml:space="preserve">
          <source>CWnd::OnEnterSizeMove</source>
        </trans-unit>
        <trans-unit id="3705" translate="yes" xml:space="preserve">
          <source>The framework calls this member function one time after the affected window enters a moving or sizing modal loop.</source>
        </trans-unit>
        <trans-unit id="3706" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3707" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_ENTERSIZEMOVE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632622)</ept> notification, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="3708" translate="yes" xml:space="preserve">
          <source>A window enters a moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the <bpt id="p1">[</bpt>WM_SYSCOMMAND<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646360)</ept> message to the <bpt id="p2">[</bpt>CWnd::DefWindowProc<ept id="p2">](#cwnd__defwindowproc)</ept> function and the <ph id="ph1">`wParam`</ph> parameter of that message specifies <ph id="ph2">`SC_MOVE`</ph> or <ph id="ph3">`SC_SIZE`</ph>.</source>
        </trans-unit>
        <trans-unit id="3709" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3710" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3711" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3712" translate="yes" xml:space="preserve">
          <source>CWnd::OnEraseBkgnd</source>
        </trans-unit>
        <trans-unit id="3713" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the <ph id="ph1">`CWnd`</ph> object background needs erasing (for example, when resized).</source>
        </trans-unit>
        <trans-unit id="3714" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3715" translate="yes" xml:space="preserve">
          <source>Specifies the device-context object.</source>
        </trans-unit>
        <trans-unit id="3716" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3717" translate="yes" xml:space="preserve">
          <source>Nonzero if it erases the background; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="3718" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3719" translate="yes" xml:space="preserve">
          <source>It is called to prepare an invalidated region for painting.</source>
        </trans-unit>
        <trans-unit id="3720" translate="yes" xml:space="preserve">
          <source>The default implementation erases the background using the window class background brush specified by the <bpt id="p1">**</bpt>hbrBackground<ept id="p1">**</ept> member of the window class structure.</source>
        </trans-unit>
        <trans-unit id="3721" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>hbrBackground<ept id="p1">**</ept> member is <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>, your overridden version of <ph id="ph1">`OnEraseBkgnd`</ph> should erase the background color.</source>
        </trans-unit>
        <trans-unit id="3722" translate="yes" xml:space="preserve">
          <source>Your version should also align the origin of the intended brush with the <ph id="ph1">`CWnd`</ph> coordinates by first calling <bpt id="p1">[</bpt>UnrealizeObject<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145164)</ept> for the brush, and then selecting the brush.</source>
        </trans-unit>
        <trans-unit id="3723" translate="yes" xml:space="preserve">
          <source>An overridden <ph id="ph1">`OnEraseBkgnd`</ph> should return nonzero in response to <ph id="ph2">`WM_ERASEBKGND`</ph> if it processes the message and erases the background; this indicates that no further erasing is required.</source>
        </trans-unit>
        <trans-unit id="3724" translate="yes" xml:space="preserve">
          <source>If it returns 0, the window will remain marked as needing to be erased.</source>
        </trans-unit>
        <trans-unit id="3725" translate="yes" xml:space="preserve">
          <source>(Typically, this means that the <bpt id="p1">**</bpt>fErase<ept id="p1">**</ept> member of the <ph id="ph1">`PAINTSTRUCT`</ph> structure will be <bpt id="p2">**</bpt>TRUE<ept id="p2">**</ept>.)</source>
        </trans-unit>
        <trans-unit id="3726" translate="yes" xml:space="preserve">
          <source>Windows assumes the background is computed with the <ph id="ph1">`MM_TEXT`</ph> mapping mode.</source>
        </trans-unit>
        <trans-unit id="3727" translate="yes" xml:space="preserve">
          <source>If the device context is using any other mapping mode, the area erased may not be within the visible part of the client area.</source>
        </trans-unit>
        <trans-unit id="3728" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3729" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3730" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3731" translate="yes" xml:space="preserve">
          <source>CWnd::OnExitMenuLoop</source>
        </trans-unit>
        <trans-unit id="3732" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when a menu modal loop has been exited.</source>
        </trans-unit>
        <trans-unit id="3733" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3734" translate="yes" xml:space="preserve">
          <source>Specifies whether the menu involved is a pop-up menu.</source>
        </trans-unit>
        <trans-unit id="3735" translate="yes" xml:space="preserve">
          <source>Has a nonzero value if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="3736" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3737" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3738" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3739" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3740" translate="yes" xml:space="preserve">
          <source>CWnd::OnExitSizeMove</source>
        </trans-unit>
        <trans-unit id="3741" translate="yes" xml:space="preserve">
          <source>The framework calls this member function one time after the affected window exits a moving or sizing modal loop.</source>
        </trans-unit>
        <trans-unit id="3742" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3743" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_EXITSIZEMOVE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632623)</ept> notification, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="3744" translate="yes" xml:space="preserve">
          <source>A window enters a moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the <bpt id="p1">[</bpt>WM_SYSCOMMAND<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646360)</ept> message to the <bpt id="p2">[</bpt>CWnd::DefWindowProc<ept id="p2">](#cwnd__defwindowproc)</ept> function and the <ph id="ph1">`wParam`</ph> parameter of that message specifies <ph id="ph2">`SC_MOVE`</ph> or <ph id="ph3">`SC_SIZE`</ph>.</source>
        </trans-unit>
        <trans-unit id="3745" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3746" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3747" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3748" translate="yes" xml:space="preserve">
          <source>CWnd::OnFontChange</source>
        </trans-unit>
        <trans-unit id="3749" translate="yes" xml:space="preserve">
          <source>All top-level windows in the system receive an <ph id="ph1">`OnFontChange`</ph> call from the framework after the application changes the pool of font resources.</source>
        </trans-unit>
        <trans-unit id="3750" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3751" translate="yes" xml:space="preserve">
          <source>An application that adds or removes fonts from the system (for example, through the <bpt id="p1">[</bpt>AddFontResource<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd183326)</ept> or <bpt id="p2">[</bpt>RemoveFontResource<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd162922)</ept> Windows function) should send the <bpt id="p3">[</bpt>WM_FONTCHANGE<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/dd145211)</ept> message to all top-level windows.</source>
        </trans-unit>
        <trans-unit id="3752" translate="yes" xml:space="preserve">
          <source>To send this message, use the <bpt id="p1">[</bpt>SendMessage<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms644950)</ept> Windows function with the <ph id="ph1">`hWnd`</ph> parameter set to <bpt id="p2">**</bpt>HWND_BROADCAST<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="3753" translate="yes" xml:space="preserve">
          <source>CWnd::OnGetDlgCode</source>
        </trans-unit>
        <trans-unit id="3754" translate="yes" xml:space="preserve">
          <source>Called for a control so the control can process arrow-key and TAB-key input itself.</source>
        </trans-unit>
        <trans-unit id="3755" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3756" translate="yes" xml:space="preserve">
          <source>One or more of the following values, indicating which type of input the application processes:</source>
        </trans-unit>
        <trans-unit id="3757" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DLGC_BUTTON<ept id="p1">**</ept> Button (generic).</source>
        </trans-unit>
        <trans-unit id="3758" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DLGC_DEFPUSHBUTTON<ept id="p1">**</ept> Default pushbutton.</source>
        </trans-unit>
        <trans-unit id="3759" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DLGC_HASSETSEL EM_SETSEL<ept id="p1">**</ept> messages.</source>
        </trans-unit>
        <trans-unit id="3760" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DLGC_UNDEFPUSHBUTTON<ept id="p1">**</ept> No default pushbutton processing.</source>
        </trans-unit>
        <trans-unit id="3761" translate="yes" xml:space="preserve">
          <source>(An application can use this flag with <bpt id="p1">**</bpt>DLGC_BUTTON<ept id="p1">**</ept> to indicate that it processes button input but relies on the system for default pushbutton processing.)</source>
        </trans-unit>
        <trans-unit id="3762" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DLGC_RADIOBUTTON<ept id="p1">**</ept> Radio button.</source>
        </trans-unit>
        <trans-unit id="3763" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DLGC_STATIC<ept id="p1">**</ept> Static control.</source>
        </trans-unit>
        <trans-unit id="3764" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DLGC_WANTALLKEYS<ept id="p1">**</ept> All keyboard input.</source>
        </trans-unit>
        <trans-unit id="3765" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DLGC_WANTARROWS<ept id="p1">**</ept> Arrow keys.</source>
        </trans-unit>
        <trans-unit id="3766" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DLGC_WANTCHARS<ept id="p1">**</ept> <ph id="ph1">`WM_CHAR`</ph> messages.</source>
        </trans-unit>
        <trans-unit id="3767" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DLGC_WANTMESSAGE<ept id="p1">**</ept> All keyboard input.</source>
        </trans-unit>
        <trans-unit id="3768" translate="yes" xml:space="preserve">
          <source>The application passes this message on to the control.</source>
        </trans-unit>
        <trans-unit id="3769" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DLGC_WANTTAB<ept id="p1">**</ept> TAB key.</source>
        </trans-unit>
        <trans-unit id="3770" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3771" translate="yes" xml:space="preserve">
          <source>Normally, Windows handles all arrow-key and TAB-key input to a <ph id="ph1">`CWnd`</ph> control.</source>
        </trans-unit>
        <trans-unit id="3772" translate="yes" xml:space="preserve">
          <source>By overriding <ph id="ph1">`OnGetDlgCode`</ph>, a <ph id="ph2">`CWnd`</ph> control can choose a particular type of input to process itself.</source>
        </trans-unit>
        <trans-unit id="3773" translate="yes" xml:space="preserve">
          <source>The default <ph id="ph1">`OnGetDlgCode`</ph> functions for the predefined control classes return a code appropriate for each class.</source>
        </trans-unit>
        <trans-unit id="3774" translate="yes" xml:space="preserve">
          <source>CWnd::OnGetMinMaxInfo</source>
        </trans-unit>
        <trans-unit id="3775" translate="yes" xml:space="preserve">
          <source>The framework calls this member function whenever Windows needs to know the maximized position or dimensions, or the minimum or maximum tracking size.</source>
        </trans-unit>
        <trans-unit id="3776" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3777" translate="yes" xml:space="preserve">
          <source>lpMMI</source>
        </trans-unit>
        <trans-unit id="3778" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`MINMAXINFO`</ph> structure that contains information about a window's maximized size and position and its minimum and maximum tracking size.</source>
        </trans-unit>
        <trans-unit id="3779" translate="yes" xml:space="preserve">
          <source>For more about this structure, see the <bpt id="p1">[</bpt>MINMAXINFO<ept id="p1">](../../mfc/reference/minmaxinfo-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="3780" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3781" translate="yes" xml:space="preserve">
          <source>The maximized size is the size of the window when its borders are fully extended.</source>
        </trans-unit>
        <trans-unit id="3782" translate="yes" xml:space="preserve">
          <source>The maximum tracking size of the window is the largest window size that can be achieved by using the borders to size the window.</source>
        </trans-unit>
        <trans-unit id="3783" translate="yes" xml:space="preserve">
          <source>The minimum tracking size of the window is the smallest window size that can be achieved by using the borders to size the window.</source>
        </trans-unit>
        <trans-unit id="3784" translate="yes" xml:space="preserve">
          <source>Windows fills in an array of points specifying default values for the various positions and dimensions.</source>
        </trans-unit>
        <trans-unit id="3785" translate="yes" xml:space="preserve">
          <source>The application may change these values in <ph id="ph1">`OnGetMinMaxInfo`</ph>.</source>
        </trans-unit>
        <trans-unit id="3786" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3787" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3788" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3789" translate="yes" xml:space="preserve">
          <source>CWnd::OnHelp</source>
        </trans-unit>
        <trans-unit id="3790" translate="yes" xml:space="preserve">
          <source>Handles F1 Help within the application (using the current context).</source>
        </trans-unit>
        <trans-unit id="3791" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3792" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CWinApp::OnHelp<ept id="p1">](../../mfc/reference/cwinapp-class.md#cwinapp__onhelp)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="3793" translate="yes" xml:space="preserve">
          <source>CWnd::OnHelpFinder</source>
        </trans-unit>
        <trans-unit id="3794" translate="yes" xml:space="preserve">
          <source>Handles the <bpt id="p1">**</bpt>ID_HELP_FINDER<ept id="p1">**</ept> and <bpt id="p2">**</bpt>ID_DEFAULT_HELP<ept id="p2">**</ept> commands.</source>
        </trans-unit>
        <trans-unit id="3795" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3796" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CWinApp::OnHelpFinder<ept id="p1">](../../mfc/reference/cwinapp-class.md#cwinapp__onhelpfinder)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="3797" translate="yes" xml:space="preserve">
          <source>CWnd::OnHelpIndex</source>
        </trans-unit>
        <trans-unit id="3798" translate="yes" xml:space="preserve">
          <source>Handles the <bpt id="p1">**</bpt>ID_HELP_INDEX<ept id="p1">**</ept> command and provides a default Help topic.</source>
        </trans-unit>
        <trans-unit id="3799" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3800" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CWinApp::OnHelpIndex<ept id="p1">](../../mfc/reference/cwinapp-class.md#cwinapp__onhelpindex)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="3801" translate="yes" xml:space="preserve">
          <source>CWnd::OnHelpInfo</source>
        </trans-unit>
        <trans-unit id="3802" translate="yes" xml:space="preserve">
          <source>Called by the framework when the user presses the F1 key.</source>
        </trans-unit>
        <trans-unit id="3803" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3804" translate="yes" xml:space="preserve">
          <source>lpHelpInfo</source>
        </trans-unit>
        <trans-unit id="3805" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>HELPINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773313)</ept> structure that contains information about the menu item, control, dialog box, or window for which help is requested.</source>
        </trans-unit>
        <trans-unit id="3806" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="3807" translate="yes" xml:space="preserve">
          <source>Returns TRUE if a window has the keyboard focus or if a menu is active within a window.</source>
        </trans-unit>
        <trans-unit id="3808" translate="yes" xml:space="preserve">
          <source>If no window has the keyboard focus, returns FALSE.</source>
        </trans-unit>
        <trans-unit id="3809" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3810" translate="yes" xml:space="preserve">
          <source>If a menu is active when F1 is pressed, <bpt id="p1">**</bpt>WM_HELP<ept id="p1">**</ept> is sent to the window associated with the menu; otherwise, <bpt id="p2">**</bpt>WM_HELP<ept id="p2">**</ept> is sent to the window that has the keyboard focus.</source>
        </trans-unit>
        <trans-unit id="3811" translate="yes" xml:space="preserve">
          <source>If no window has the keyboard focus, <bpt id="p1">**</bpt>WM_HELP<ept id="p1">**</ept> is sent to the currently active window.</source>
        </trans-unit>
        <trans-unit id="3812" translate="yes" xml:space="preserve">
          <source>CWnd::OnHelpUsing</source>
        </trans-unit>
        <trans-unit id="3813" translate="yes" xml:space="preserve">
          <source>Handles the <bpt id="p1">**</bpt>ID_HELP_USING<ept id="p1">**</ept> command.</source>
        </trans-unit>
        <trans-unit id="3814" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3815" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CWinApp::OnHelpUsing<ept id="p1">](../../mfc/reference/cwinapp-class.md#cwinapp__onhelpusing)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="3816" translate="yes" xml:space="preserve">
          <source>CWnd::OnHotKey</source>
        </trans-unit>
        <trans-unit id="3817" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user presses a system-wide hot key.</source>
        </trans-unit>
        <trans-unit id="3818" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3819" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="3820" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="3821" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="3822" translate="yes" xml:space="preserve">
          <source>Identifier for the hot key that generated the message.</source>
        </trans-unit>
        <trans-unit id="3823" translate="yes" xml:space="preserve">
          <source>If the message was generated by a system-defined hot key, this parameter will be one of the following values:</source>
        </trans-unit>
        <trans-unit id="3824" translate="yes" xml:space="preserve">
          <source>- The snap desktop hot key was pressed.</source>
        </trans-unit>
        <trans-unit id="3825" translate="yes" xml:space="preserve">
          <source>- The snap window hot key was pressed.</source>
        </trans-unit>
        <trans-unit id="3826" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="3827" translate="yes" xml:space="preserve">
          <source>A bitwise combination (OR) of flags that indicate the keys that were pressed in combination with the key specified by the <ph id="ph1">`nKey2`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="3828" translate="yes" xml:space="preserve">
          <source>The possible values are:</source>
        </trans-unit>
        <trans-unit id="3829" translate="yes" xml:space="preserve">
          <source>- Either ALT key was held down.</source>
        </trans-unit>
        <trans-unit id="3830" translate="yes" xml:space="preserve">
          <source>- Either CTRL key was held down.</source>
        </trans-unit>
        <trans-unit id="3831" translate="yes" xml:space="preserve">
          <source>- Either SHIFT key was held down.</source>
        </trans-unit>
        <trans-unit id="3832" translate="yes" xml:space="preserve">
          <source>- Either WINDOWS key was held down.</source>
        </trans-unit>
        <trans-unit id="3833" translate="yes" xml:space="preserve">
          <source>These keys are labeled with the Microsoft Windows logo.</source>
        </trans-unit>
        <trans-unit id="3834" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="3835" translate="yes" xml:space="preserve">
          <source>The virtual key code of the hot key.</source>
        </trans-unit>
        <trans-unit id="3836" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3837" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_HOTKEY<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646279)</ept> notification, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="3838" translate="yes" xml:space="preserve">
          <source>This message is placed at the top of the message queue associated with the thread that registered the hot key.</source>
        </trans-unit>
        <trans-unit id="3839" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>RegisterHotKey<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646309)</ept> function to register a system-wide hot key.</source>
        </trans-unit>
        <trans-unit id="3840" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3841" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3842" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3843" translate="yes" xml:space="preserve">
          <source>CWnd::OnHScroll</source>
        </trans-unit>
        <trans-unit id="3844" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user clicks a window's horizontal scroll bar.</source>
        </trans-unit>
        <trans-unit id="3845" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3846" translate="yes" xml:space="preserve">
          <source>Specifies a scroll-bar code that indicates the user's scrolling request.</source>
        </trans-unit>
        <trans-unit id="3847" translate="yes" xml:space="preserve">
          <source>This parameter can be one of the following:</source>
        </trans-unit>
        <trans-unit id="3848" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_LEFT<ept id="p1">**</ept> Scroll to far left.</source>
        </trans-unit>
        <trans-unit id="3849" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_ENDSCROLL<ept id="p1">**</ept> End scroll.</source>
        </trans-unit>
        <trans-unit id="3850" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_LINELEFT<ept id="p1">**</ept> Scroll left.</source>
        </trans-unit>
        <trans-unit id="3851" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_LINERIGHT<ept id="p1">**</ept> Scroll right.</source>
        </trans-unit>
        <trans-unit id="3852" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_PAGELEFT<ept id="p1">**</ept> Scroll one page left.</source>
        </trans-unit>
        <trans-unit id="3853" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_PAGERIGHT<ept id="p1">**</ept> Scroll one page right.</source>
        </trans-unit>
        <trans-unit id="3854" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_RIGHT<ept id="p1">**</ept> Scroll to far right.</source>
        </trans-unit>
        <trans-unit id="3855" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_THUMBPOSITION<ept id="p1">**</ept> Scroll to absolute position.</source>
        </trans-unit>
        <trans-unit id="3856" translate="yes" xml:space="preserve">
          <source>The current position is specified by the <ph id="ph1">`nPos`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="3857" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_THUMBTRACK<ept id="p1">**</ept> Drag scroll box to specified position.</source>
        </trans-unit>
        <trans-unit id="3858" translate="yes" xml:space="preserve">
          <source>The current position is specified by the <ph id="ph1">`nPos`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="3859" translate="yes" xml:space="preserve">
          <source>Specifies the scroll-box position if the scroll-bar code is <bpt id="p1">**</bpt>SB_THUMBPOSITION<ept id="p1">**</ept> or <bpt id="p2">**</bpt>SB_THUMBTRACK<ept id="p2">**</ept>; otherwise, not used.</source>
        </trans-unit>
        <trans-unit id="3860" translate="yes" xml:space="preserve">
          <source>Depending on the initial scroll range, <ph id="ph1">`nPos`</ph> may be negative and should be cast to an <ph id="ph2">`int`</ph> if necessary.</source>
        </trans-unit>
        <trans-unit id="3861" translate="yes" xml:space="preserve">
          <source>If the scroll message came from a scroll-bar control, contains a pointer to the control.</source>
        </trans-unit>
        <trans-unit id="3862" translate="yes" xml:space="preserve">
          <source>If the user clicked a window's scroll bar, this parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="3863" translate="yes" xml:space="preserve">
          <source>The pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="3864" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3865" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>SB_THUMBTRACK<ept id="p1">**</ept> scroll-bar code typically is used by applications that give some feedback while the scroll box is being dragged.</source>
        </trans-unit>
        <trans-unit id="3866" translate="yes" xml:space="preserve">
          <source>If an application scrolls the contents controlled by the scroll bar, it must also reset the position of the scroll box with the <bpt id="p1">[</bpt>SetScrollPos<ept id="p1">](#cwnd__setscrollpos)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="3867" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3868" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3869" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3870" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="3871" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#108</source>
        </trans-unit>
        <trans-unit id="3872" translate="yes" xml:space="preserve">
          <source>CWnd::OnHScrollClipboard</source>
        </trans-unit>
        <trans-unit id="3873" translate="yes" xml:space="preserve">
          <source>The Clipboard owner's <ph id="ph1">`OnHScrollClipboard`</ph> member function is called by the Clipboard viewer when the Clipboard data has the <ph id="ph2">`CF_OWNERDISPLAY`</ph> format and there is an event in the Clipboard viewer's horizontal scroll bar.</source>
        </trans-unit>
        <trans-unit id="3874" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3875" translate="yes" xml:space="preserve">
          <source>Specifies a pointer to a Clipboard-viewer window.</source>
        </trans-unit>
        <trans-unit id="3876" translate="yes" xml:space="preserve">
          <source>The pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="3877" translate="yes" xml:space="preserve">
          <source>Specifies one of the following scroll-bar codes in the low-order word:</source>
        </trans-unit>
        <trans-unit id="3878" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_BOTTOM<ept id="p1">**</ept> Scroll to lower right.</source>
        </trans-unit>
        <trans-unit id="3879" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_ENDSCROLL<ept id="p1">**</ept> End scroll.</source>
        </trans-unit>
        <trans-unit id="3880" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_LINEDOWN<ept id="p1">**</ept> Scroll one line down.</source>
        </trans-unit>
        <trans-unit id="3881" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_LINEUP<ept id="p1">**</ept> Scroll one line up.</source>
        </trans-unit>
        <trans-unit id="3882" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_PAGEDOWN<ept id="p1">**</ept> Scroll one page down.</source>
        </trans-unit>
        <trans-unit id="3883" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_PAGEUP<ept id="p1">**</ept> Scroll one page up.</source>
        </trans-unit>
        <trans-unit id="3884" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_THUMBPOSITION<ept id="p1">**</ept> Scroll to the absolute position.</source>
        </trans-unit>
        <trans-unit id="3885" translate="yes" xml:space="preserve">
          <source>The current position is provided in <ph id="ph1">`nPos`</ph>.</source>
        </trans-unit>
        <trans-unit id="3886" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_TOP<ept id="p1">**</ept> Scroll to upper left.</source>
        </trans-unit>
        <trans-unit id="3887" translate="yes" xml:space="preserve">
          <source>Contains the scroll-box position if the scroll-bar code is <bpt id="p1">**</bpt>SB_THUMBPOSITION<ept id="p1">**</ept>; otherwise not used.</source>
        </trans-unit>
        <trans-unit id="3888" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3889" translate="yes" xml:space="preserve">
          <source>The owner should scroll the Clipboard image, invalidate the appropriate section, and update the scroll-bar values.</source>
        </trans-unit>
        <trans-unit id="3890" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3891" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3892" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3893" translate="yes" xml:space="preserve">
          <source>CWnd::OnIconEraseBkgnd</source>
        </trans-unit>
        <trans-unit id="3894" translate="yes" xml:space="preserve">
          <source>The framework calls this member function for a minimized (iconic) <ph id="ph1">`CWnd`</ph> object when the background of the icon must be filled before painting the icon.</source>
        </trans-unit>
        <trans-unit id="3895" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3896" translate="yes" xml:space="preserve">
          <source>Specifies the device-context object of the icon.</source>
        </trans-unit>
        <trans-unit id="3897" translate="yes" xml:space="preserve">
          <source>May be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="3898" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3899" translate="yes" xml:space="preserve">
          <source>receives this call only if a class icon is defined for the window default implementation; otherwise <bpt id="p1">[</bpt>OnEraseBkgnd<ept id="p1">](#cwnd__onerasebkgnd)</ept> is called.</source>
        </trans-unit>
        <trans-unit id="3900" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>DefWindowProc<ept id="p1">](#cwnd__defwindowproc)</ept> member function fills the icon background with the background brush of the parent window.</source>
        </trans-unit>
        <trans-unit id="3901" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3902" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3903" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3904" translate="yes" xml:space="preserve">
          <source>CWnd::OnInitMenu</source>
        </trans-unit>
        <trans-unit id="3905" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when a menu is about to become active.</source>
        </trans-unit>
        <trans-unit id="3906" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3907" translate="yes" xml:space="preserve">
          <source>Specifies the menu to be initialized.</source>
        </trans-unit>
        <trans-unit id="3908" translate="yes" xml:space="preserve">
          <source>May be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="3909" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3910" translate="yes" xml:space="preserve">
          <source>is called when the user clicks an item on the menu bar or presses a menu key.</source>
        </trans-unit>
        <trans-unit id="3911" translate="yes" xml:space="preserve">
          <source>Override this member function to modify the menu before it is displayed.</source>
        </trans-unit>
        <trans-unit id="3912" translate="yes" xml:space="preserve">
          <source>is only called once, when a menu is first accessed (for example, when a user clicks an item on the menu bar).</source>
        </trans-unit>
        <trans-unit id="3913" translate="yes" xml:space="preserve">
          <source>This method does not provide information about menu items.</source>
        </trans-unit>
        <trans-unit id="3914" translate="yes" xml:space="preserve">
          <source>As the user moves to items within the menu (for example, by moving the mouse across several menu items) the function is not called again.</source>
        </trans-unit>
        <trans-unit id="3915" translate="yes" xml:space="preserve">
          <source>Once the user exits from the menu (for example, by clicking on the application client area) and later clicks an item on the menu bar, the function will be called again.</source>
        </trans-unit>
        <trans-unit id="3916" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3917" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3918" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3919" translate="yes" xml:space="preserve">
          <source>CWnd::OnInitMenuPopup</source>
        </trans-unit>
        <trans-unit id="3920" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when a pop-up menu is about to become active.</source>
        </trans-unit>
        <trans-unit id="3921" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3922" translate="yes" xml:space="preserve">
          <source>pPopupMenu</source>
        </trans-unit>
        <trans-unit id="3923" translate="yes" xml:space="preserve">
          <source>Specifies the menu object of the pop-up menu.</source>
        </trans-unit>
        <trans-unit id="3924" translate="yes" xml:space="preserve">
          <source>May be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="3925" translate="yes" xml:space="preserve">
          <source>Specifies the index of the pop-up menu in the main menu.</source>
        </trans-unit>
        <trans-unit id="3926" translate="yes" xml:space="preserve">
          <source>bSysMenu</source>
        </trans-unit>
        <trans-unit id="3927" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>TRUE<ept id="p1">**</ept> if the pop-up menu is the Control menu; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="3928" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3929" translate="yes" xml:space="preserve">
          <source>This allows an application to modify the pop-up menu before it is displayed without changing the entire menu.</source>
        </trans-unit>
        <trans-unit id="3930" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3931" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3932" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3933" translate="yes" xml:space="preserve">
          <source>CWnd::OnInputDeviceChange</source>
        </trans-unit>
        <trans-unit id="3934" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when an I/O device is added or removed from the system.</source>
        </trans-unit>
        <trans-unit id="3935" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3936" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="3937" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="3938" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="3939" translate="yes" xml:space="preserve">
          <source>This flag can contain the following values:</source>
        </trans-unit>
        <trans-unit id="3940" translate="yes" xml:space="preserve">
          <source>- A new device has been added to the system.</source>
        </trans-unit>
        <trans-unit id="3941" translate="yes" xml:space="preserve">
          <source>- A device has been removed from the system.</source>
        </trans-unit>
        <trans-unit id="3942" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3943" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_INPUT_DEVICE_CHANGE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645591)</ept> notification, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="3944" translate="yes" xml:space="preserve">
          <source>The is a generic input device message.</source>
        </trans-unit>
        <trans-unit id="3945" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3946" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3947" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3948" translate="yes" xml:space="preserve">
          <source>CWnd::OnInputLangChange</source>
        </trans-unit>
        <trans-unit id="3949" translate="yes" xml:space="preserve">
          <source>The framework calls this member for the topmost affected window after an application's input language has been changed.</source>
        </trans-unit>
        <trans-unit id="3950" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3951" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="3952" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="3953" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="3954" translate="yes" xml:space="preserve">
          <source>The character set of the new locale.</source>
        </trans-unit>
        <trans-unit id="3955" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">`lfCharSet`</ph> parameter of the <bpt id="p1">[</bpt>LOGFONT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145037)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="3956" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="3957" translate="yes" xml:space="preserve">
          <source>The input locale identifier.</source>
        </trans-unit>
        <trans-unit id="3958" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Language Identifier Constants and Strings<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318693)</ept>.</source>
        </trans-unit>
        <trans-unit id="3959" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3960" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_INPUTLANGCHANGE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632629)</ept> notification message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="3961" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3962" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3963" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3964" translate="yes" xml:space="preserve">
          <source>CWnd::OnInputLangChangeRequest</source>
        </trans-unit>
        <trans-unit id="3965" translate="yes" xml:space="preserve">
          <source>The framework calls this member for window with the focus when the user chooses a new input language.</source>
        </trans-unit>
        <trans-unit id="3966" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3967" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="3968" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="3969" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="3970" translate="yes" xml:space="preserve">
          <source>A bitwise (OR) combination of flags that indicate the new locale was selected from the previous or next locale in the installed list of locales, or that the new input locale's keyboard layout can be used with the system character set.</source>
        </trans-unit>
        <trans-unit id="3971" translate="yes" xml:space="preserve">
          <source>The possible values are <ph id="ph1">`INPUTLANGCHANGE_BACKWARD`</ph>, <ph id="ph2">`INPUTLANGCHANGE_FORWARD`</ph>, and <ph id="ph3">`INPUTLANGCHANGE_SYSCHARSET`</ph>.</source>
        </trans-unit>
        <trans-unit id="3972" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="3973" translate="yes" xml:space="preserve">
          <source>The input locale identifier.</source>
        </trans-unit>
        <trans-unit id="3974" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Language Identifier Constants and Strings<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318693)</ept>.</source>
        </trans-unit>
        <trans-unit id="3975" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="3976" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_INPUTLANGCHANGEREQUEST<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632630)</ept> notification message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="3977" translate="yes" xml:space="preserve">
          <source>This message is posted when the user chooses a new input language with either a hotkey that is specified in the keyboard control panel application, or from the indicator on the system taskbar.</source>
        </trans-unit>
        <trans-unit id="3978" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="3979" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="3980" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="3981" translate="yes" xml:space="preserve">
          <source>CWnd::OnKeyDown</source>
        </trans-unit>
        <trans-unit id="3982" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when a nonsystem key is pressed.</source>
        </trans-unit>
        <trans-unit id="3983" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="3984" translate="yes" xml:space="preserve">
          <source>Specifies the virtual key code of the given key.</source>
        </trans-unit>
        <trans-unit id="3985" translate="yes" xml:space="preserve">
          <source>For a list of of standard virtual key codes, see Winuser.h</source>
        </trans-unit>
        <trans-unit id="3986" translate="yes" xml:space="preserve">
          <source>Repeat count (the number of times the keystroke is repeated as a result of the user holding down the key).</source>
        </trans-unit>
        <trans-unit id="3987" translate="yes" xml:space="preserve">
          <source>Specifies the scan code, key-transition code, previous key state, and context code, as shown in the following list:</source>
        </trans-unit>
        <trans-unit id="3988" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="3989" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="3990" translate="yes" xml:space="preserve">
          <source>0–7</source>
        </trans-unit>
        <trans-unit id="3991" translate="yes" xml:space="preserve">
          <source>Scan code (OEM-dependent value).</source>
        </trans-unit>
        <trans-unit id="3992" translate="yes" xml:space="preserve">
          <source>8</source>
        </trans-unit>
        <trans-unit id="3993" translate="yes" xml:space="preserve">
          <source>Extended key, such as a function key or a key on the numeric keypad (1 if it is an extended key).</source>
        </trans-unit>
        <trans-unit id="3994" translate="yes" xml:space="preserve">
          <source>9–10</source>
        </trans-unit>
        <trans-unit id="3995" translate="yes" xml:space="preserve">
          <source>Not used.</source>
        </trans-unit>
        <trans-unit id="3996" translate="yes" xml:space="preserve">
          <source>11–12</source>
        </trans-unit>
        <trans-unit id="3997" translate="yes" xml:space="preserve">
          <source>Used internally by Windows.</source>
        </trans-unit>
        <trans-unit id="3998" translate="yes" xml:space="preserve">
          <source>13</source>
        </trans-unit>
        <trans-unit id="3999" translate="yes" xml:space="preserve">
          <source>Context code (1 if the ALT key is held down while the key is pressed; otherwise 0).</source>
        </trans-unit>
        <trans-unit id="4000" translate="yes" xml:space="preserve">
          <source>14</source>
        </trans-unit>
        <trans-unit id="4001" translate="yes" xml:space="preserve">
          <source>Previous key state (1 if the key is down before the call, 0 if the key is up).</source>
        </trans-unit>
        <trans-unit id="4002" translate="yes" xml:space="preserve">
          <source>15</source>
        </trans-unit>
        <trans-unit id="4003" translate="yes" xml:space="preserve">
          <source>Transition state (1 if the key is being released, 0 if the key is being pressed).</source>
        </trans-unit>
        <trans-unit id="4004" translate="yes" xml:space="preserve">
          <source>For a <ph id="ph1">`WM_KEYDOWN`</ph> message, the key-transition bit (bit 15) is 0 and the context-code bit (bit 13) is 0.</source>
        </trans-unit>
        <trans-unit id="4005" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4006" translate="yes" xml:space="preserve">
          <source>A nonsystem key is a keyboard key that is pressed when the ALT key is not pressed or a keyboard key that is pressed when <ph id="ph1">`CWnd`</ph> has the input focus.</source>
        </trans-unit>
        <trans-unit id="4007" translate="yes" xml:space="preserve">
          <source>Because of auto-repeat, more than one <ph id="ph1">`OnKeyDown`</ph> call may occur before an <bpt id="p1">[</bpt>OnKeyUp<ept id="p1">](#cwnd__onkeyup)</ept> member function call is made.</source>
        </trans-unit>
        <trans-unit id="4008" translate="yes" xml:space="preserve">
          <source>The bit that indicates the previous key state can be used to determine whether the <ph id="ph1">`OnKeyDown`</ph> call is the first down transition or a repeated down transition.</source>
        </trans-unit>
        <trans-unit id="4009" translate="yes" xml:space="preserve">
          <source>For IBM Enhanced 101- and 102-key keyboards, enhanced keys are the right ALT and the right CTRL keys on the main section of the keyboard; the INS, DEL, HOME, END, PAGE UP, PAGE DOWN, and arrow keys in the clusters to the left of the numeric keypad; and the slash (/) and ENTER keys in the numeric keypad.</source>
        </trans-unit>
        <trans-unit id="4010" translate="yes" xml:space="preserve">
          <source>Some other keyboards may support the extended-key bit in <ph id="ph1">`nFlags`</ph>.</source>
        </trans-unit>
        <trans-unit id="4011" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4012" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4013" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4014" translate="yes" xml:space="preserve">
          <source>CWnd::OnKeyUp</source>
        </trans-unit>
        <trans-unit id="4015" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when a nonsystem key is released.</source>
        </trans-unit>
        <trans-unit id="4016" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4017" translate="yes" xml:space="preserve">
          <source>Specifies the virtual key code of the given key.</source>
        </trans-unit>
        <trans-unit id="4018" translate="yes" xml:space="preserve">
          <source>For a list of of standard virtual key codes, see Winuser.h</source>
        </trans-unit>
        <trans-unit id="4019" translate="yes" xml:space="preserve">
          <source>Repeat count (the number of times the keystroke is repeated as a result of the user holding down the key).</source>
        </trans-unit>
        <trans-unit id="4020" translate="yes" xml:space="preserve">
          <source>Specifies the scan code, key-transition code, previous key state, and context code, as shown in the following list:</source>
        </trans-unit>
        <trans-unit id="4021" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="4022" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="4023" translate="yes" xml:space="preserve">
          <source>0–7</source>
        </trans-unit>
        <trans-unit id="4024" translate="yes" xml:space="preserve">
          <source>Scan code (OEM-dependent value).</source>
        </trans-unit>
        <trans-unit id="4025" translate="yes" xml:space="preserve">
          <source>Low byte of high-order word.</source>
        </trans-unit>
        <trans-unit id="4026" translate="yes" xml:space="preserve">
          <source>8</source>
        </trans-unit>
        <trans-unit id="4027" translate="yes" xml:space="preserve">
          <source>Extended key, such as a function key or a key on the numeric keypad (1 if it is an extended key; otherwise 0).</source>
        </trans-unit>
        <trans-unit id="4028" translate="yes" xml:space="preserve">
          <source>9–10</source>
        </trans-unit>
        <trans-unit id="4029" translate="yes" xml:space="preserve">
          <source>Not used.</source>
        </trans-unit>
        <trans-unit id="4030" translate="yes" xml:space="preserve">
          <source>11–12</source>
        </trans-unit>
        <trans-unit id="4031" translate="yes" xml:space="preserve">
          <source>Used internally by Windows.</source>
        </trans-unit>
        <trans-unit id="4032" translate="yes" xml:space="preserve">
          <source>13</source>
        </trans-unit>
        <trans-unit id="4033" translate="yes" xml:space="preserve">
          <source>Context code (1 if the ALT key is held down while the key is pressed; otherwise 0).</source>
        </trans-unit>
        <trans-unit id="4034" translate="yes" xml:space="preserve">
          <source>14</source>
        </trans-unit>
        <trans-unit id="4035" translate="yes" xml:space="preserve">
          <source>Previous key state (1 if the key is down before the call, 0 if the key is up).</source>
        </trans-unit>
        <trans-unit id="4036" translate="yes" xml:space="preserve">
          <source>15</source>
        </trans-unit>
        <trans-unit id="4037" translate="yes" xml:space="preserve">
          <source>Transition state (1 if the key is being released, 0 if the key is being pressed).</source>
        </trans-unit>
        <trans-unit id="4038" translate="yes" xml:space="preserve">
          <source>For a <ph id="ph1">`WM_KEYUP`</ph> message, the key-transition bit (bit 15) is 1 and the context-code bit (bit 13) is 0.</source>
        </trans-unit>
        <trans-unit id="4039" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4040" translate="yes" xml:space="preserve">
          <source>A nonsystem key is a keyboard key that is pressed when the ALT key is not pressed or a keyboard key that is pressed when the <ph id="ph1">`CWnd`</ph> has the input focus.</source>
        </trans-unit>
        <trans-unit id="4041" translate="yes" xml:space="preserve">
          <source>For IBM Enhanced 101- and 102-key keyboards, enhanced keys are the right ALT and the right CTRL keys on the main section of the keyboard; the INS, DEL, HOME, END, PAGE UP, PAGE DOWN, and arrow keys in the clusters to the left of the numeric keypad; and the slash (/) and ENTER keys in the numeric keypad.</source>
        </trans-unit>
        <trans-unit id="4042" translate="yes" xml:space="preserve">
          <source>Some other keyboards may support the extended-key bit in <ph id="ph1">`nFlags`</ph>.</source>
        </trans-unit>
        <trans-unit id="4043" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4044" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4045" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4046" translate="yes" xml:space="preserve">
          <source>CWnd::OnKillFocus</source>
        </trans-unit>
        <trans-unit id="4047" translate="yes" xml:space="preserve">
          <source>The framework calls this member function immediately before losing the input focus.</source>
        </trans-unit>
        <trans-unit id="4048" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4049" translate="yes" xml:space="preserve">
          <source>pNewWnd</source>
        </trans-unit>
        <trans-unit id="4050" translate="yes" xml:space="preserve">
          <source>Specifies a pointer to the window that receives the input focus (may be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> or may be temporary).</source>
        </trans-unit>
        <trans-unit id="4051" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4052" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`CWnd`</ph> object is displaying a caret, the caret should be destroyed at this point.</source>
        </trans-unit>
        <trans-unit id="4053" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4054" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4055" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4056" translate="yes" xml:space="preserve">
          <source>CWnd::OnLButtonDblClk</source>
        </trans-unit>
        <trans-unit id="4057" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user double-clicks the left mouse button.</source>
        </trans-unit>
        <trans-unit id="4058" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4059" translate="yes" xml:space="preserve">
          <source>Indicates whether various virtual keys are down.</source>
        </trans-unit>
        <trans-unit id="4060" translate="yes" xml:space="preserve">
          <source>This parameter can be any combination of the following values:</source>
        </trans-unit>
        <trans-unit id="4061" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_CONTROL<ept id="p1">**</ept> Set if the CTRL key is down.</source>
        </trans-unit>
        <trans-unit id="4062" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_LBUTTON<ept id="p1">**</ept> Set if the left mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4063" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_MBUTTON<ept id="p1">**</ept> Set if the middle mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4064" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_RBUTTON<ept id="p1">**</ept> Set if the right mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4065" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_SHIFT<ept id="p1">**</ept> Set if the SHIFT key is down.</source>
        </trans-unit>
        <trans-unit id="4066" translate="yes" xml:space="preserve">
          <source>Specifies the x- and y-coordinate of the cursor.</source>
        </trans-unit>
        <trans-unit id="4067" translate="yes" xml:space="preserve">
          <source>These coordinates are always relative to the upper-left corner of the window.</source>
        </trans-unit>
        <trans-unit id="4068" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4069" translate="yes" xml:space="preserve">
          <source>Only windows that have the <bpt id="p1">**</bpt>CS_DBLCLKS<ept id="p1">**</ept> <bpt id="p2">[</bpt>WNDCLASS<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms633576)</ept> style will receive <ph id="ph1">`OnLButtonDblClk`</ph> calls.</source>
        </trans-unit>
        <trans-unit id="4070" translate="yes" xml:space="preserve">
          <source>This is the default for Microsoft Foundation Class windows.</source>
        </trans-unit>
        <trans-unit id="4071" translate="yes" xml:space="preserve">
          <source>Windows calls <ph id="ph1">`OnLButtonDblClk`</ph> when the user presses, releases, and then presses the left mouse button again within the system's double-click time limit.</source>
        </trans-unit>
        <trans-unit id="4072" translate="yes" xml:space="preserve">
          <source>Double-clicking the left mouse button actually generates four events: <bpt id="p1">[</bpt>WM_LBUTTONDOWN<ept id="p1">](#cwnd__onlbuttondown)</ept>, <bpt id="p2">[</bpt>WM_LBUTTONUP<ept id="p2">](#cwnd__onlbuttonup)</ept> messages, the <ph id="ph1">`WM_LBUTTONDBLCLK`</ph> call, and another <ph id="ph2">`WM_LBUTTONUP`</ph> message when the button is released.</source>
        </trans-unit>
        <trans-unit id="4073" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4074" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4075" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4076" translate="yes" xml:space="preserve">
          <source>CWnd::OnLButtonDown</source>
        </trans-unit>
        <trans-unit id="4077" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user presses the left mouse button.</source>
        </trans-unit>
        <trans-unit id="4078" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4079" translate="yes" xml:space="preserve">
          <source>Indicates whether various virtual keys are down.</source>
        </trans-unit>
        <trans-unit id="4080" translate="yes" xml:space="preserve">
          <source>This parameter can be any combination of the following values:</source>
        </trans-unit>
        <trans-unit id="4081" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_CONTROL<ept id="p1">**</ept> Set if the CTRL key is down.</source>
        </trans-unit>
        <trans-unit id="4082" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_LBUTTON<ept id="p1">**</ept> Set if the left mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4083" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_MBUTTON<ept id="p1">**</ept> Set if the middle mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4084" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_RBUTTON<ept id="p1">**</ept> Set if the right mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4085" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_SHIFT<ept id="p1">**</ept> Set if the SHIFT key is down.</source>
        </trans-unit>
        <trans-unit id="4086" translate="yes" xml:space="preserve">
          <source>Specifies the x- and y-coordinate of the cursor.</source>
        </trans-unit>
        <trans-unit id="4087" translate="yes" xml:space="preserve">
          <source>These coordinates are always relative to the upper-left corner of the window.</source>
        </trans-unit>
        <trans-unit id="4088" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4089" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4090" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4091" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4092" translate="yes" xml:space="preserve">
          <source>CWnd::OnLButtonUp</source>
        </trans-unit>
        <trans-unit id="4093" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user releases the left mouse button.</source>
        </trans-unit>
        <trans-unit id="4094" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4095" translate="yes" xml:space="preserve">
          <source>Indicates whether various virtual keys are down.</source>
        </trans-unit>
        <trans-unit id="4096" translate="yes" xml:space="preserve">
          <source>This parameter can be any combination of the following values:</source>
        </trans-unit>
        <trans-unit id="4097" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_CONTROL<ept id="p1">**</ept> Set if the CTRL key is down.</source>
        </trans-unit>
        <trans-unit id="4098" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_MBUTTON<ept id="p1">**</ept> Set if the middle mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4099" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_RBUTTON<ept id="p1">**</ept> Set if the right mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4100" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_SHIFT<ept id="p1">**</ept> Set if the SHIFT key is down.</source>
        </trans-unit>
        <trans-unit id="4101" translate="yes" xml:space="preserve">
          <source>Specifies the x- and y-coordinate of the cursor.</source>
        </trans-unit>
        <trans-unit id="4102" translate="yes" xml:space="preserve">
          <source>These coordinates are always relative to the upper-left corner of the window.</source>
        </trans-unit>
        <trans-unit id="4103" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4104" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4105" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4106" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4107" translate="yes" xml:space="preserve">
          <source>CWnd::OnMButtonDblClk</source>
        </trans-unit>
        <trans-unit id="4108" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user double-clicks the middle mouse button.</source>
        </trans-unit>
        <trans-unit id="4109" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4110" translate="yes" xml:space="preserve">
          <source>Indicates whether various virtual keys are down.</source>
        </trans-unit>
        <trans-unit id="4111" translate="yes" xml:space="preserve">
          <source>This parameter can be any combination of the following values:</source>
        </trans-unit>
        <trans-unit id="4112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_CONTROL<ept id="p1">**</ept> Set if the CTRL key is down.</source>
        </trans-unit>
        <trans-unit id="4113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_LBUTTON<ept id="p1">**</ept> Set if the left mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_MBUTTON<ept id="p1">**</ept> Set if the middle mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_RBUTTON<ept id="p1">**</ept> Set if the right mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_SHIFT<ept id="p1">**</ept> Set if the SHIFT key is down.</source>
        </trans-unit>
        <trans-unit id="4117" translate="yes" xml:space="preserve">
          <source>Specifies the x- and y-coordinate of the cursor.</source>
        </trans-unit>
        <trans-unit id="4118" translate="yes" xml:space="preserve">
          <source>These coordinates are always relative to the upper-left corner of the window.</source>
        </trans-unit>
        <trans-unit id="4119" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4120" translate="yes" xml:space="preserve">
          <source>Only windows that have the <bpt id="p1">**</bpt>CS_DBLCLKS<ept id="p1">**</ept> <bpt id="p2">[</bpt>WNDCLASS<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms633576)</ept> style will receive <ph id="ph1">`OnMButtonDblClk`</ph> calls.</source>
        </trans-unit>
        <trans-unit id="4121" translate="yes" xml:space="preserve">
          <source>This is the default for all Microsoft Foundation Class windows.</source>
        </trans-unit>
        <trans-unit id="4122" translate="yes" xml:space="preserve">
          <source>Windows generates an <ph id="ph1">`OnMButtonDblClk`</ph> call when the user presses, releases, and then presses the middle mouse button again within the system's double-click time limit.</source>
        </trans-unit>
        <trans-unit id="4123" translate="yes" xml:space="preserve">
          <source>Double-clicking the middle mouse button actually generates four events: <bpt id="p1">[</bpt>WM_MBUTTONDOWN<ept id="p1">](#cwnd__onmbuttondown)</ept> and <bpt id="p2">[</bpt>WM_MBUTTONUP<ept id="p2">](#cwnd__onmbuttonup)</ept> messages, the <ph id="ph1">`WM_MBUTTONDBLCLK`</ph> call, and another <ph id="ph2">`WM_MBUTTONUP`</ph> message.</source>
        </trans-unit>
        <trans-unit id="4124" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4125" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4126" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4127" translate="yes" xml:space="preserve">
          <source>CWnd::OnMButtonDown</source>
        </trans-unit>
        <trans-unit id="4128" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user presses the middle mouse button.</source>
        </trans-unit>
        <trans-unit id="4129" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4130" translate="yes" xml:space="preserve">
          <source>Indicates whether various virtual keys are down.</source>
        </trans-unit>
        <trans-unit id="4131" translate="yes" xml:space="preserve">
          <source>This parameter can be any combination of the following values:</source>
        </trans-unit>
        <trans-unit id="4132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_CONTROL<ept id="p1">**</ept> Set if the CTRL key is down.</source>
        </trans-unit>
        <trans-unit id="4133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_LBUTTON<ept id="p1">**</ept> Set if the left mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_MBUTTON<ept id="p1">**</ept> Set if the middle mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_RBUTTON<ept id="p1">**</ept> Set if the right mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_SHIFT<ept id="p1">**</ept> Set if the SHIFT key is down.</source>
        </trans-unit>
        <trans-unit id="4137" translate="yes" xml:space="preserve">
          <source>Specifies the x- and y-coordinate of the cursor.</source>
        </trans-unit>
        <trans-unit id="4138" translate="yes" xml:space="preserve">
          <source>These coordinates are always relative to the upper-left corner of the window.</source>
        </trans-unit>
        <trans-unit id="4139" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4140" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4141" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4142" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4143" translate="yes" xml:space="preserve">
          <source>CWnd::OnMButtonUp</source>
        </trans-unit>
        <trans-unit id="4144" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user releases the middle mouse button.</source>
        </trans-unit>
        <trans-unit id="4145" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4146" translate="yes" xml:space="preserve">
          <source>Indicates whether various virtual keys are down.</source>
        </trans-unit>
        <trans-unit id="4147" translate="yes" xml:space="preserve">
          <source>This parameter can be any combination of the following values:</source>
        </trans-unit>
        <trans-unit id="4148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_CONTROL<ept id="p1">**</ept> Set if the CTRL key is down.</source>
        </trans-unit>
        <trans-unit id="4149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_LBUTTON<ept id="p1">**</ept> Set if the left mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_RBUTTON<ept id="p1">**</ept> Set if the right mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_SHIFT<ept id="p1">**</ept> Set if the SHIFT key is down.</source>
        </trans-unit>
        <trans-unit id="4152" translate="yes" xml:space="preserve">
          <source>Specifies the x- and y-coordinate of the cursor.</source>
        </trans-unit>
        <trans-unit id="4153" translate="yes" xml:space="preserve">
          <source>These coordinates are always relative to the upper-left corner of the window.</source>
        </trans-unit>
        <trans-unit id="4154" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4155" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4156" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4157" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4158" translate="yes" xml:space="preserve">
          <source>CWnd::OnMDIActivate</source>
        </trans-unit>
        <trans-unit id="4159" translate="yes" xml:space="preserve">
          <source>The framework calls this member function for the child window being deactivated and the child window being activated.</source>
        </trans-unit>
        <trans-unit id="4160" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4161" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>TRUE<ept id="p1">**</ept> if the child is being activated and <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> if it is being deactivated.</source>
        </trans-unit>
        <trans-unit id="4162" translate="yes" xml:space="preserve">
          <source>Contains a pointer to the MDI child window to be activated.</source>
        </trans-unit>
        <trans-unit id="4163" translate="yes" xml:space="preserve">
          <source>When received by an MDI child window, <ph id="ph1">`pActivateWnd`</ph> contains a pointer to the child window being activated.</source>
        </trans-unit>
        <trans-unit id="4164" translate="yes" xml:space="preserve">
          <source>This pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="4165" translate="yes" xml:space="preserve">
          <source>pDeactivateWnd</source>
        </trans-unit>
        <trans-unit id="4166" translate="yes" xml:space="preserve">
          <source>Contains a pointer to the MDI child window being deactivated.</source>
        </trans-unit>
        <trans-unit id="4167" translate="yes" xml:space="preserve">
          <source>This pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="4168" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4169" translate="yes" xml:space="preserve">
          <source>An MDI child window is activated independently of the MDI frame window.</source>
        </trans-unit>
        <trans-unit id="4170" translate="yes" xml:space="preserve">
          <source>When the frame becomes active, the child window that was last activated with a <ph id="ph1">`OnMDIActivate`</ph> call receives an <bpt id="p1">[</bpt>WM_NCACTIVATE<ept id="p1">](#cwnd__onncactivate)</ept> message to draw an active window frame and caption bar, but it does not receive another <ph id="ph2">`OnMDIActivate`</ph> call.</source>
        </trans-unit>
        <trans-unit id="4171" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4172" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4173" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4174" translate="yes" xml:space="preserve">
          <source>CWnd::OnMeasureItem</source>
        </trans-unit>
        <trans-unit id="4175" translate="yes" xml:space="preserve">
          <source>The framework calls this member function by the framework for the owner of an owner-draw button, combo box, list box, or menu item when the control is created.</source>
        </trans-unit>
        <trans-unit id="4176" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4177" translate="yes" xml:space="preserve">
          <source>The ID of the control.</source>
        </trans-unit>
        <trans-unit id="4178" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>MEASUREITEMSTRUCT<ept id="p1">](../../mfc/reference/measureitemstruct-structure.md)</ept> data structure that contains the dimensions of the owner-draw control.</source>
        </trans-unit>
        <trans-unit id="4179" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4180" translate="yes" xml:space="preserve">
          <source>Override this member function and fill in the <ph id="ph1">`MEASUREITEMSTRUCT`</ph> data structure pointed to by <ph id="ph2">`lpMeasureItemStruct`</ph> and return; this informs Windows of the dimensions of the control and allows Windows to process user interaction with the control correctly.</source>
        </trans-unit>
        <trans-unit id="4181" translate="yes" xml:space="preserve">
          <source>If a list box or combo box is created with the <bpt id="p1">[</bpt>LBS_OWNERDRAWVARIABLE<ept id="p1">](../../mfc/reference/list-box-styles.md)</ept> or <bpt id="p2">[</bpt>CBS_OWNERDRAWVARIABLE<ept id="p2">](../../mfc/reference/combo-box-styles.md)</ept> style, the framework calls this function for the owner for each item in the control; otherwise this function is called once.</source>
        </trans-unit>
        <trans-unit id="4182" translate="yes" xml:space="preserve">
          <source>Windows initiates the call to <ph id="ph1">`OnMeasureItem`</ph> for the owner of combo boxes and list boxes created with the <bpt id="p1">**</bpt>OWNERDRAWFIXED<ept id="p1">**</ept> style before sending the <bpt id="p2">[</bpt>WM_INITDIALOG<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms645428)</ept> message.</source>
        </trans-unit>
        <trans-unit id="4183" translate="yes" xml:space="preserve">
          <source>As a result, when the owner receives this call, Windows has not yet determined the height and width of the font used in the control; function calls and calculations that require these values should occur in the main function of the application or library.</source>
        </trans-unit>
        <trans-unit id="4184" translate="yes" xml:space="preserve">
          <source>If the item being measured is a <ph id="ph1">`CMenu`</ph>, <ph id="ph2">`CListBox`</ph> or <ph id="ph3">`CComboBox`</ph> object, then the <ph id="ph4">`MeasureItem`</ph> virtual function of the appropriate class is called.</source>
        </trans-unit>
        <trans-unit id="4185" translate="yes" xml:space="preserve">
          <source>Override the <ph id="ph1">`MeasureItem`</ph> member function of the appropriate control's class to calculate and set the size of each item.</source>
        </trans-unit>
        <trans-unit id="4186" translate="yes" xml:space="preserve">
          <source>will be called only if the control's class is created at run time, or it is created with the <bpt id="p1">**</bpt>LBS_OWNERDRAWVARIABLE<ept id="p1">**</ept> or <bpt id="p2">**</bpt>CBS_OWNERDRAWVARIABLE<ept id="p2">**</ept> style.</source>
        </trans-unit>
        <trans-unit id="4187" translate="yes" xml:space="preserve">
          <source>If the control is created by the dialog editor, <ph id="ph1">`OnMeasureItem`</ph> will not be called.</source>
        </trans-unit>
        <trans-unit id="4188" translate="yes" xml:space="preserve">
          <source>This is because the <bpt id="p1">[</bpt>WM_MEASUREITEM<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775925)</ept> message is sent early in the creation process of the control.</source>
        </trans-unit>
        <trans-unit id="4189" translate="yes" xml:space="preserve">
          <source>If you subclass by using <ph id="ph1">`DDX_Control`</ph>, <ph id="ph2">`SubclassDlgItem`</ph>, or <ph id="ph3">`SubclassWindow`</ph>, the subclassing usually occurs after the creation process.</source>
        </trans-unit>
        <trans-unit id="4190" translate="yes" xml:space="preserve">
          <source>Therefore, there is no way to handle the <bpt id="p1">[</bpt>WM_MEASUREITEM<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775925)</ept> message in the control's <ph id="ph1">`OnChildNotify`</ph> function, which is the mechanism MFC uses to implement <bpt id="p2">**</bpt>ON_WM_MEASUREITEM_REFLECT<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="4191" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4192" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4193" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4194" translate="yes" xml:space="preserve">
          <source>CWnd::OnMenuChar</source>
        </trans-unit>
        <trans-unit id="4195" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user presses a menu mnemonic character that doesn't match any of the predefined mnemonics in the current menu.</source>
        </trans-unit>
        <trans-unit id="4196" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4197" translate="yes" xml:space="preserve">
          <source>Depending on the build settings, specifies the ANSI or Unicode character that the user pressed.</source>
        </trans-unit>
        <trans-unit id="4198" translate="yes" xml:space="preserve">
          <source>Contains the <bpt id="p1">**</bpt>MF_POPUP<ept id="p1">**</ept> flag if the menu is a pop-up menu.</source>
        </trans-unit>
        <trans-unit id="4199" translate="yes" xml:space="preserve">
          <source>It contains the <bpt id="p1">**</bpt>MF_SYSMENU<ept id="p1">**</ept> flag if the menu is a Control menu.</source>
        </trans-unit>
        <trans-unit id="4200" translate="yes" xml:space="preserve">
          <source>Contains a pointer to the selected <ph id="ph1">`CMenu`</ph>.</source>
        </trans-unit>
        <trans-unit id="4201" translate="yes" xml:space="preserve">
          <source>The pointer may be temporary and should not be stored.</source>
        </trans-unit>
        <trans-unit id="4202" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="4203" translate="yes" xml:space="preserve">
          <source>The high-order word of the return value should contain one of the following command codes:</source>
        </trans-unit>
        <trans-unit id="4204" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="4205" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="4206" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="4207" translate="yes" xml:space="preserve">
          <source>Tells Windows to discard the character that the user pressed and creates a short beep on the system speaker.</source>
        </trans-unit>
        <trans-unit id="4208" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="4209" translate="yes" xml:space="preserve">
          <source>Tells Windows to close the current menu.</source>
        </trans-unit>
        <trans-unit id="4210" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="4211" translate="yes" xml:space="preserve">
          <source>Informs Windows that the low-order word of the return value contains the item number for a specific item.</source>
        </trans-unit>
        <trans-unit id="4212" translate="yes" xml:space="preserve">
          <source>This item is selected by Windows.</source>
        </trans-unit>
        <trans-unit id="4213" translate="yes" xml:space="preserve">
          <source>The low-order word is ignored if the high-order word contains 0 or 1.</source>
        </trans-unit>
        <trans-unit id="4214" translate="yes" xml:space="preserve">
          <source>Applications should process this message when accelerator (shortcut) keys are used to select bitmaps placed in a menu.</source>
        </trans-unit>
        <trans-unit id="4215" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4216" translate="yes" xml:space="preserve">
          <source>It is sent to the <ph id="ph1">`CWnd`</ph> that owns the menu.</source>
        </trans-unit>
        <trans-unit id="4217" translate="yes" xml:space="preserve">
          <source>is also called when the user presses ALT and any other key, even if the key does not correspond to a mnemonic character.</source>
        </trans-unit>
        <trans-unit id="4218" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">`pMenu`</ph> points to the menu owned by the <ph id="ph2">`CWnd`</ph>, and <ph id="ph3">`nFlags`</ph> is 0.</source>
        </trans-unit>
        <trans-unit id="4219" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4220" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4221" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4222" translate="yes" xml:space="preserve">
          <source>CWnd::OnMenuDrag</source>
        </trans-unit>
        <trans-unit id="4223" translate="yes" xml:space="preserve">
          <source>The framework calls this member function of the current drag-and-drop menu when the user begins to drag a menu item.</source>
        </trans-unit>
        <trans-unit id="4224" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4225" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="4226" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="4227" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4228" translate="yes" xml:space="preserve">
          <source>The index position of the menu item when the drag operation begins.</source>
        </trans-unit>
        <trans-unit id="4229" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4230" translate="yes" xml:space="preserve">
          <source>Pointer to the <bpt id="p1">[</bpt>CMenu<ept id="p1">](../../mfc/reference/cmenu-class.md)</ept> object that contains the menu item.</source>
        </trans-unit>
        <trans-unit id="4231" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="4232" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="4233" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="4234" translate="yes" xml:space="preserve">
          <source>The menu should remain active.</source>
        </trans-unit>
        <trans-unit id="4235" translate="yes" xml:space="preserve">
          <source>If the mouse is released, it should be ignored.</source>
        </trans-unit>
        <trans-unit id="4236" translate="yes" xml:space="preserve">
          <source>The menu should be ended.</source>
        </trans-unit>
        <trans-unit id="4237" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4238" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_MENUDRAG<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647606)</ept> notification, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="4239" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4240" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4241" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4242" translate="yes" xml:space="preserve">
          <source>CWnd::OnMenuGetObject</source>
        </trans-unit>
        <trans-unit id="4243" translate="yes" xml:space="preserve">
          <source>The framework calls this member function of the current drag-and-drop menu when the mouse cursor enters a menu item or moves from the center of the item to the top or bottom of the item.</source>
        </trans-unit>
        <trans-unit id="4244" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4245" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="4246" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="4247" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4248" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>MENUGETOBJECTINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647572)</ept> structure that contains information about the drag-and-drop menu the mouse cursor is on.</source>
        </trans-unit>
        <trans-unit id="4249" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="4250" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="4251" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="4252" translate="yes" xml:space="preserve">
          <source>An interface pointer that supports drop-and-drag operations is returned in the <ph id="ph1">`pvObj`</ph> member of the <bpt id="p1">[</bpt>MENUGETOBJECTINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647572)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="4253" translate="yes" xml:space="preserve">
          <source>Currently, only the <bpt id="p1">[</bpt>IDropTarget<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms679679)</ept> interface is supported.</source>
        </trans-unit>
        <trans-unit id="4254" translate="yes" xml:space="preserve">
          <source>No drop-and-drag interface is supported.</source>
        </trans-unit>
        <trans-unit id="4255" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4256" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_MENUGETOBJECT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647607)</ept> notification, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="4257" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4258" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4259" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4260" translate="yes" xml:space="preserve">
          <source>CWnd::OnMenuRButtonUp</source>
        </trans-unit>
        <trans-unit id="4261" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user releases the right mouse button while the cursor is on a menu item.</source>
        </trans-unit>
        <trans-unit id="4262" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4263" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="4264" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="4265" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4266" translate="yes" xml:space="preserve">
          <source>The index position of the menu item when the right mouse button was released.</source>
        </trans-unit>
        <trans-unit id="4267" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4268" translate="yes" xml:space="preserve">
          <source>Pointer to the <bpt id="p1">[</bpt>CMenu<ept id="p1">](../../mfc/reference/cmenu-class.md)</ept> object that contains the menu item.</source>
        </trans-unit>
        <trans-unit id="4269" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4270" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_MENURBUTTONUP<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647610)</ept> notification, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="4271" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>WM_MENURBUTTONUP<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647610)</ept> message enables an application to provide a context-sensitive menu for the menu item specified in the message.</source>
        </trans-unit>
        <trans-unit id="4272" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4273" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4274" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4275" translate="yes" xml:space="preserve">
          <source>CWnd::OnMenuSelect</source>
        </trans-unit>
        <trans-unit id="4276" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`CWnd`</ph> object is associated with a menu, <ph id="ph2">`OnMenuSelect`</ph> is called by the framework when the user selects a menu item.</source>
        </trans-unit>
        <trans-unit id="4277" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4278" translate="yes" xml:space="preserve">
          <source>Identifies the item selected.</source>
        </trans-unit>
        <trans-unit id="4279" translate="yes" xml:space="preserve">
          <source>If the selected item is a menu item, <ph id="ph1">`nItemID`</ph> contains the menu-item ID.</source>
        </trans-unit>
        <trans-unit id="4280" translate="yes" xml:space="preserve">
          <source>If the selected item contains a pop-up menu, <ph id="ph1">`nItemID`</ph> contains the pop-up menu index, and <bpt id="p1">*</bpt>hSysMenu<ept id="p1">*</ept> contains the handle of the main (clicked-on) menu.</source>
        </trans-unit>
        <trans-unit id="4281" translate="yes" xml:space="preserve">
          <source>Contains a combination of the following menu flags:</source>
        </trans-unit>
        <trans-unit id="4282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_BITMAP<ept id="p1">**</ept> Item is a bitmap.</source>
        </trans-unit>
        <trans-unit id="4283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_CHECKED<ept id="p1">**</ept> Item is checked.</source>
        </trans-unit>
        <trans-unit id="4284" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_DISABLED<ept id="p1">**</ept> Item is disabled.</source>
        </trans-unit>
        <trans-unit id="4285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_GRAYED<ept id="p1">**</ept> Item is dimmed.</source>
        </trans-unit>
        <trans-unit id="4286" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_MOUSESELECT<ept id="p1">**</ept> Item was selected with a mouse.</source>
        </trans-unit>
        <trans-unit id="4287" translate="yes" xml:space="preserve">
          <source>Item is an owner-draw item.</source>
        </trans-unit>
        <trans-unit id="4288" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_POPUP<ept id="p1">**</ept> Item contains a pop-up menu.</source>
        </trans-unit>
        <trans-unit id="4289" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_SEPARATOR<ept id="p1">**</ept> Item is a menu-item separator.</source>
        </trans-unit>
        <trans-unit id="4290" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MF_SYSMENU<ept id="p1">**</ept> Item is contained in the Control menu.</source>
        </trans-unit>
        <trans-unit id="4291" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nFlags`</ph> contains <bpt id="p1">**</bpt>MF_SYSMENU<ept id="p1">**</ept>, identifies the menu associated with the message.</source>
        </trans-unit>
        <trans-unit id="4292" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nFlags`</ph> contains <bpt id="p1">**</bpt>MF_POPUP<ept id="p1">**</ept>, identifies the handle of the main menu.</source>
        </trans-unit>
        <trans-unit id="4293" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nFlags`</ph> contains neither <bpt id="p1">**</bpt>MF_SYSMENU<ept id="p1">**</ept> nor <bpt id="p2">**</bpt>MF_POPUP<ept id="p2">**</ept>, it is unused.</source>
        </trans-unit>
        <trans-unit id="4294" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4295" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nFlags`</ph> contains 0xFFFF and <ph id="ph2">`hSysMenu`</ph> contains 0, Windows has closed the menu because the user pressed the ESC key or clicked outside the menu.</source>
        </trans-unit>
        <trans-unit id="4296" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4297" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4298" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4299" translate="yes" xml:space="preserve">
          <source>CWnd::OnMouseActivate</source>
        </trans-unit>
        <trans-unit id="4300" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the cursor is in an inactive window and the user presses a mouse button.</source>
        </trans-unit>
        <trans-unit id="4301" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4302" translate="yes" xml:space="preserve">
          <source>pDesktopWnd</source>
        </trans-unit>
        <trans-unit id="4303" translate="yes" xml:space="preserve">
          <source>Specifies a pointer to the top-level parent window of the window being activated.</source>
        </trans-unit>
        <trans-unit id="4304" translate="yes" xml:space="preserve">
          <source>The pointer may be temporary and should not be stored.</source>
        </trans-unit>
        <trans-unit id="4305" translate="yes" xml:space="preserve">
          <source>Specifies the <bpt id="p1">[</bpt>hit-test<ept id="p1">](#cwnd__onnchittest)</ept> area code.</source>
        </trans-unit>
        <trans-unit id="4306" translate="yes" xml:space="preserve">
          <source>A hit test is a test that determines the location of the cursor.</source>
        </trans-unit>
        <trans-unit id="4307" translate="yes" xml:space="preserve">
          <source>Specifies the mouse message number.</source>
        </trans-unit>
        <trans-unit id="4308" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="4309" translate="yes" xml:space="preserve">
          <source>Specifies whether to activate the <ph id="ph1">`CWnd`</ph> and whether to discard the mouse event.</source>
        </trans-unit>
        <trans-unit id="4310" translate="yes" xml:space="preserve">
          <source>It must be one of the following values:</source>
        </trans-unit>
        <trans-unit id="4311" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MA_ACTIVATE<ept id="p1">**</ept> Activate <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="4312" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MA_NOACTIVATE<ept id="p1">**</ept> Do not activate <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="4313" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MA_ACTIVATEANDEAT<ept id="p1">**</ept> Activate <ph id="ph1">`CWnd`</ph> object and discard the mouse event.</source>
        </trans-unit>
        <trans-unit id="4314" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MA_NOACTIVATEANDEAT<ept id="p1">**</ept> Do not activate <ph id="ph1">`CWnd`</ph> object and discard the mouse event.</source>
        </trans-unit>
        <trans-unit id="4315" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4316" translate="yes" xml:space="preserve">
          <source>The default implementation passes this message to the parent window before any processing occurs.</source>
        </trans-unit>
        <trans-unit id="4317" translate="yes" xml:space="preserve">
          <source>If the parent window returns <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, processing is halted.</source>
        </trans-unit>
        <trans-unit id="4318" translate="yes" xml:space="preserve">
          <source>For a description of the individual hit-test area codes, see the <bpt id="p1">[</bpt>OnNcHitTest<ept id="p1">](#cwnd__onnchittest)</ept> member function</source>
        </trans-unit>
        <trans-unit id="4319" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4320" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4321" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4322" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="4323" translate="yes" xml:space="preserve">
          <source>NVC_MFCAxCtl#9</source>
        </trans-unit>
        <trans-unit id="4324" translate="yes" xml:space="preserve">
          <source>CWnd::OnMouseHover</source>
        </trans-unit>
        <trans-unit id="4325" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the cursor hovers over the client area of the window for the period of time specified in a prior call to <bpt id="p1">[</bpt>TrackMouseEvent<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646265)</ept>.</source>
        </trans-unit>
        <trans-unit id="4326" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4327" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="4328" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="4329" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4330" translate="yes" xml:space="preserve">
          <source>A bitwise combination (OR) of flags that indicate which modifier keys are pressed.</source>
        </trans-unit>
        <trans-unit id="4331" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`MK_CONTROL`</ph> flag indicates that the CTRL key is pressed.</source>
        </trans-unit>
        <trans-unit id="4332" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4333" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CPoint<ept id="p1">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object that specifies the <bpt id="p2">*</bpt>x<ept id="p2">*</ept> and <bpt id="p3">*</bpt>y<ept id="p3">*</ept> coordinates of the cursor relative to the upper-left corner of the client area.</source>
        </trans-unit>
        <trans-unit id="4334" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4335" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_MOUSEHOVER<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645613)</ept> notification, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="4336" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nFlags`</ph> parameter can be a combination of modifier keys listed in the following table.</source>
        </trans-unit>
        <trans-unit id="4337" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>About Mouse Input<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645601)</ept>.</source>
        </trans-unit>
        <trans-unit id="4338" translate="yes" xml:space="preserve">
          <source>Modifier Key</source>
        </trans-unit>
        <trans-unit id="4339" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="4340" translate="yes" xml:space="preserve">
          <source>MK_CONTROL</source>
        </trans-unit>
        <trans-unit id="4341" translate="yes" xml:space="preserve">
          <source>The CTRL key is pressed.</source>
        </trans-unit>
        <trans-unit id="4342" translate="yes" xml:space="preserve">
          <source>MK_LBUTTON</source>
        </trans-unit>
        <trans-unit id="4343" translate="yes" xml:space="preserve">
          <source>The left mouse button is pressed.</source>
        </trans-unit>
        <trans-unit id="4344" translate="yes" xml:space="preserve">
          <source>MK_MBUTTON</source>
        </trans-unit>
        <trans-unit id="4345" translate="yes" xml:space="preserve">
          <source>The middle mouse button is pressed.</source>
        </trans-unit>
        <trans-unit id="4346" translate="yes" xml:space="preserve">
          <source>MK_RBUTTON</source>
        </trans-unit>
        <trans-unit id="4347" translate="yes" xml:space="preserve">
          <source>The right mouse button is pressed.</source>
        </trans-unit>
        <trans-unit id="4348" translate="yes" xml:space="preserve">
          <source>MK_SHIFT</source>
        </trans-unit>
        <trans-unit id="4349" translate="yes" xml:space="preserve">
          <source>The SHIFT key is pressed.</source>
        </trans-unit>
        <trans-unit id="4350" translate="yes" xml:space="preserve">
          <source>MK_XBUTTON1</source>
        </trans-unit>
        <trans-unit id="4351" translate="yes" xml:space="preserve">
          <source>The XBUTTON1 mouse button of the Microsoft IntelliMouse is pressed.</source>
        </trans-unit>
        <trans-unit id="4352" translate="yes" xml:space="preserve">
          <source>MK_XBUTTON2</source>
        </trans-unit>
        <trans-unit id="4353" translate="yes" xml:space="preserve">
          <source>The XBUTTON2 mouse button of the Microsoft IntelliMouse is pressed.</source>
        </trans-unit>
        <trans-unit id="4354" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4355" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4356" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4357" translate="yes" xml:space="preserve">
          <source>CWnd::OnMouseHWheel</source>
        </trans-unit>
        <trans-unit id="4358" translate="yes" xml:space="preserve">
          <source>The framework calls this member when the current window is composed by the Desktop Window Manager (DWM), and that window is maximized.</source>
        </trans-unit>
        <trans-unit id="4359" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4360" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="4361" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="4362" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4363" translate="yes" xml:space="preserve">
          <source>A bitwise combination (OR) of flags that indicate which modifier keys are pressed.</source>
        </trans-unit>
        <trans-unit id="4364" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`MK_CONTROL`</ph> flag indicates that the CTRL key is pressed.</source>
        </trans-unit>
        <trans-unit id="4365" translate="yes" xml:space="preserve">
          <source>For a list of flags, see the "Message Parameters" subheading in <bpt id="p1">[</bpt>About Mouse Input<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645601)</ept>.</source>
        </trans-unit>
        <trans-unit id="4366" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4367" translate="yes" xml:space="preserve">
          <source>Indicates the distance the wheel is rotated, expressed in multiples or divisions of <ph id="ph1">`WHEEL_DELTA`</ph>, which is 120.</source>
        </trans-unit>
        <trans-unit id="4368" translate="yes" xml:space="preserve">
          <source>A positive value indicates that the wheel was rotated to the right; a negative value indicates that the wheel was rotated to the left.</source>
        </trans-unit>
        <trans-unit id="4369" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4370" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CPoint<ept id="p1">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object that specifies the <bpt id="p2">*</bpt>x<ept id="p2">*</ept> and <bpt id="p3">*</bpt>y<ept id="p3">*</ept> coordinates of the cursor relative to the upper-left corner of the client area.</source>
        </trans-unit>
        <trans-unit id="4371" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4372" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_MOUSEHWHEEL<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645614)</ept> notification message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="4373" translate="yes" xml:space="preserve">
          <source>This message is sent to the window that has the focus when the mouse's horizontal scroll wheel is tilted or rotated.</source>
        </trans-unit>
        <trans-unit id="4374" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4375" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4376" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4377" translate="yes" xml:space="preserve">
          <source>CWnd::OnMouseLeave</source>
        </trans-unit>
        <trans-unit id="4378" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the cursor leaves the client area of the window specified in a prior call to <bpt id="p1">[</bpt>TrackMouseEvent<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646265)</ept>.</source>
        </trans-unit>
        <trans-unit id="4379" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4380" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_MOUSELEAVE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645615)</ept> notification, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="4381" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4382" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4383" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4384" translate="yes" xml:space="preserve">
          <source>CWnd::OnMouseMove</source>
        </trans-unit>
        <trans-unit id="4385" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the mouse cursor moves.</source>
        </trans-unit>
        <trans-unit id="4386" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4387" translate="yes" xml:space="preserve">
          <source>Indicates whether various virtual keys are down.</source>
        </trans-unit>
        <trans-unit id="4388" translate="yes" xml:space="preserve">
          <source>This parameter can be any combination of the following values:</source>
        </trans-unit>
        <trans-unit id="4389" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_CONTROL<ept id="p1">**</ept> Set if the CTRL key is down.</source>
        </trans-unit>
        <trans-unit id="4390" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_LBUTTON<ept id="p1">**</ept> Set if the left mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4391" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_MBUTTON<ept id="p1">**</ept> Set if the middle mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4392" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_RBUTTON<ept id="p1">**</ept> Set if the right mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4393" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_SHIFT<ept id="p1">**</ept> Set if the SHIFT key is down.</source>
        </trans-unit>
        <trans-unit id="4394" translate="yes" xml:space="preserve">
          <source>Specifies the x- and y-coordinate of the cursor.</source>
        </trans-unit>
        <trans-unit id="4395" translate="yes" xml:space="preserve">
          <source>These coordinates are always relative to the upper-left corner of the window.</source>
        </trans-unit>
        <trans-unit id="4396" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4397" translate="yes" xml:space="preserve">
          <source>If the mouse is not captured, the <ph id="ph1">`WM_MOUSEMOVE`</ph> message is received by the <ph id="ph2">`CWnd`</ph> object beneath the mouse cursor; otherwise, the message goes to the window that has captured the mouse.</source>
        </trans-unit>
        <trans-unit id="4398" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4399" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4400" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4401" translate="yes" xml:space="preserve">
          <source>CWnd::OnMouseWheel</source>
        </trans-unit>
        <trans-unit id="4402" translate="yes" xml:space="preserve">
          <source>The framework calls this member function as a user rotates the mouse wheel and encounters the wheel's next notch.</source>
        </trans-unit>
        <trans-unit id="4403" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4404" translate="yes" xml:space="preserve">
          <source>Indicates whether various virtual keys are down.</source>
        </trans-unit>
        <trans-unit id="4405" translate="yes" xml:space="preserve">
          <source>This parameter can be any combination of the following values:</source>
        </trans-unit>
        <trans-unit id="4406" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_CONTROL<ept id="p1">**</ept> Set if the CTRL key is down.</source>
        </trans-unit>
        <trans-unit id="4407" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_LBUTTON<ept id="p1">**</ept> Set if the left mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4408" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_MBUTTON<ept id="p1">**</ept> Set if the middle mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4409" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_RBUTTON<ept id="p1">**</ept> Set if the right mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4410" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_SHIFT<ept id="p1">**</ept> Set if the SHIFT key is down.</source>
        </trans-unit>
        <trans-unit id="4411" translate="yes" xml:space="preserve">
          <source>Indicates distance rotated.</source>
        </trans-unit>
        <trans-unit id="4412" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`zDelta`</ph> value is expressed in multiples or divisions of <bpt id="p1">**</bpt>WHEEL_DELTA<ept id="p1">**</ept>, which is 120.</source>
        </trans-unit>
        <trans-unit id="4413" translate="yes" xml:space="preserve">
          <source>A value less than zero indicates rotating back (toward the user) while a value greater than zero indicates rotating forward (away from the user).</source>
        </trans-unit>
        <trans-unit id="4414" translate="yes" xml:space="preserve">
          <source>The user can reverse this response by changing the Wheel setting in the mouse software.</source>
        </trans-unit>
        <trans-unit id="4415" translate="yes" xml:space="preserve">
          <source>See the Remarks for more information about this parameter.</source>
        </trans-unit>
        <trans-unit id="4416" translate="yes" xml:space="preserve">
          <source>Specifies the x- and y-coordinate of the cursor.</source>
        </trans-unit>
        <trans-unit id="4417" translate="yes" xml:space="preserve">
          <source>These coordinates are always relative to the upper-left corner of the screen.</source>
        </trans-unit>
        <trans-unit id="4418" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="4419" translate="yes" xml:space="preserve">
          <source>Nonzero if mouse wheel scrolling is enabled; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="4420" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4421" translate="yes" xml:space="preserve">
          <source>Unless overridden, <ph id="ph1">`OnMouseWheel`</ph> calls the default of <bpt id="p1">[</bpt>WM_MOUSEWHEEL<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645617)</ept>.</source>
        </trans-unit>
        <trans-unit id="4422" translate="yes" xml:space="preserve">
          <source>Windows automatically routes the message to the control or child window that has the focus.</source>
        </trans-unit>
        <trans-unit id="4423" translate="yes" xml:space="preserve">
          <source>The Win32 function <bpt id="p1">[</bpt>DefWindowProc<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633572)</ept> propagates the message up the parent chain to the window that processes it.</source>
        </trans-unit>
        <trans-unit id="4424" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`zDelta`</ph> parameter is a multiple of <bpt id="p1">**</bpt>WHEEL_DELTA<ept id="p1">**</ept>, which is set at 120.</source>
        </trans-unit>
        <trans-unit id="4425" translate="yes" xml:space="preserve">
          <source>This value is the threshold for an action to be taken, and one such action (for example, scrolling forward one notch) should occur for each delta.</source>
        </trans-unit>
        <trans-unit id="4426" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WHEEL_DELTA<ept id="p1">**</ept> was set to 120 to allow for finer-resolution wheels, such as a freely-rotating wheel with no notches.</source>
        </trans-unit>
        <trans-unit id="4427" translate="yes" xml:space="preserve">
          <source>A finer-resolution wheel sends more messages per rotation, but each message has a smaller delta value.</source>
        </trans-unit>
        <trans-unit id="4428" translate="yes" xml:space="preserve">
          <source>To use such a wheel, either add the incoming <ph id="ph1">`zDelta`</ph> values until <bpt id="p1">**</bpt>WHEEL_DELTA<ept id="p1">**</ept> is reached (so that you get the same response for a given delta-rotation), or scroll partial lines in response to the more frequent messages.</source>
        </trans-unit>
        <trans-unit id="4429" translate="yes" xml:space="preserve">
          <source>You can also choose a scroll granularity and accumulate deltas until <bpt id="p1">**</bpt>WHEEL_DELTA<ept id="p1">**</ept> is reached.</source>
        </trans-unit>
        <trans-unit id="4430" translate="yes" xml:space="preserve">
          <source>Override this member function to provide your own mouse-wheel scrolling behavior.</source>
        </trans-unit>
        <trans-unit id="4431" translate="yes" xml:space="preserve">
          <source>handles messages for Windows NT 4.0 and later versions.</source>
        </trans-unit>
        <trans-unit id="4432" translate="yes" xml:space="preserve">
          <source>For Windows 95/98 or Windows NT 3.51 message handling, use <bpt id="p1">[</bpt>OnRegisteredMouseWheel<ept id="p1">](#cwnd__onregisteredmousewheel)</ept>.</source>
        </trans-unit>
        <trans-unit id="4433" translate="yes" xml:space="preserve">
          <source>CWnd::OnMove</source>
        </trans-unit>
        <trans-unit id="4434" translate="yes" xml:space="preserve">
          <source>The framework calls this member function after the <ph id="ph1">`CWnd`</ph> object has been moved.</source>
        </trans-unit>
        <trans-unit id="4435" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4436" translate="yes" xml:space="preserve">
          <source>x</source>
        </trans-unit>
        <trans-unit id="4437" translate="yes" xml:space="preserve">
          <source>Specifies the new x-coordinate location of the upper-left corner of the client area.</source>
        </trans-unit>
        <trans-unit id="4438" translate="yes" xml:space="preserve">
          <source>This new location is given in screen coordinates for overlapped and pop-up windows, and parent-client coordinates for child windows.</source>
        </trans-unit>
        <trans-unit id="4439" translate="yes" xml:space="preserve">
          <source>y</source>
        </trans-unit>
        <trans-unit id="4440" translate="yes" xml:space="preserve">
          <source>Specifies the new y-coordinate location of the upper-left corner of the client area.</source>
        </trans-unit>
        <trans-unit id="4441" translate="yes" xml:space="preserve">
          <source>This new location is given in screen coordinates for overlapped and pop-up windows, and parent-client coordinates for child windows.</source>
        </trans-unit>
        <trans-unit id="4442" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4443" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4444" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4445" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4446" translate="yes" xml:space="preserve">
          <source>CWnd::OnMoving</source>
        </trans-unit>
        <trans-unit id="4447" translate="yes" xml:space="preserve">
          <source>The framework calls this member function while a user is moving a <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="4448" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4449" translate="yes" xml:space="preserve">
          <source>The edge of window to be moved.</source>
        </trans-unit>
        <trans-unit id="4450" translate="yes" xml:space="preserve">
          <source>Address of the <bpt id="p1">[</bpt>CRect<ept id="p1">](../../atl-mfc-shared/reference/crect-class.md)</ept> or <bpt id="p2">[</bpt>RECT structure<ept id="p2">](../../mfc/reference/rect-structure1.md)</ept> that will contain the item's coordinates.</source>
        </trans-unit>
        <trans-unit id="4451" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4452" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4453" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4454" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4455" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcActivate</source>
        </trans-unit>
        <trans-unit id="4456" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the nonclient area needs to be changed to indicate an active or inactive state.</source>
        </trans-unit>
        <trans-unit id="4457" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4458" translate="yes" xml:space="preserve">
          <source>Specifies when a caption bar or icon needs to be changed to indicate an active or inactive state.</source>
        </trans-unit>
        <trans-unit id="4459" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`bActive`</ph> parameter is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if an active caption or icon is to be drawn.</source>
        </trans-unit>
        <trans-unit id="4460" translate="yes" xml:space="preserve">
          <source>It is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> for an inactive caption or icon.</source>
        </trans-unit>
        <trans-unit id="4461" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="4462" translate="yes" xml:space="preserve">
          <source>Nonzero if Windows should proceed with default processing; 0 to prevent the caption bar or icon from being deactivated.</source>
        </trans-unit>
        <trans-unit id="4463" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4464" translate="yes" xml:space="preserve">
          <source>The default implementation draws the title bar and title-bar text in their active colors if <ph id="ph1">`bActive`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> and in their inactive colors if <ph id="ph2">`bActive`</ph> is <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="4465" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4466" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4467" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4468" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcCalcSize</source>
        </trans-unit>
        <trans-unit id="4469" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the size and position of the client area needs to be calculated.</source>
        </trans-unit>
        <trans-unit id="4470" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4471" translate="yes" xml:space="preserve">
          <source>Specifies whether the application should specify which part of the client area contains valid information.</source>
        </trans-unit>
        <trans-unit id="4472" translate="yes" xml:space="preserve">
          <source>Windows will copy the valid information to the specified area within the new client area.</source>
        </trans-unit>
        <trans-unit id="4473" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the application should specify which part of the client area is valid.</source>
        </trans-unit>
        <trans-unit id="4474" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>NCCALCSIZE_PARAMS<ept id="p1">](../../mfc/reference/nccalcsize-params-structure.md)</ept> data structure that contains information an application can use to calculate the new size and position of the <ph id="ph1">`CWnd`</ph> rectangle (including client area, borders, caption, scroll bars, and so on).</source>
        </trans-unit>
        <trans-unit id="4475" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4476" translate="yes" xml:space="preserve">
          <source>By processing this message, an application can control the contents of the window's client area when the size or position of the window changes.</source>
        </trans-unit>
        <trans-unit id="4477" translate="yes" xml:space="preserve">
          <source>Regardless of the value of <ph id="ph1">`bCalcValidRects`</ph>, the first rectangle in the array specified by the <bpt id="p1">**</bpt>rgrc<ept id="p1">**</ept> structure member of the <ph id="ph2">`NCCALCSIZE_PARAMS`</ph> structure contains the coordinates of the window.</source>
        </trans-unit>
        <trans-unit id="4478" translate="yes" xml:space="preserve">
          <source>For a child window, the coordinates are relative to the parent window's client area.</source>
        </trans-unit>
        <trans-unit id="4479" translate="yes" xml:space="preserve">
          <source>For top-level windows, the coordinates are screen coordinates.</source>
        </trans-unit>
        <trans-unit id="4480" translate="yes" xml:space="preserve">
          <source>An application should modify the <bpt id="p1">**</bpt>rgrc[0]<ept id="p1">**</ept> rectangle to reflect the size and position of the client area.</source>
        </trans-unit>
        <trans-unit id="4481" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>rgrc[1]<ept id="p1">**</ept> and <bpt id="p2">**</bpt>rgrc[2]<ept id="p2">**</ept> rectangles are valid only if <ph id="ph1">`bCalcValidRects`</ph> is <bpt id="p3">**</bpt>TRUE<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="4482" translate="yes" xml:space="preserve">
          <source>In this case, the <bpt id="p1">**</bpt>rgrc[1]<ept id="p1">**</ept> rectangle contains the coordinates of the window before it was moved or resized.</source>
        </trans-unit>
        <trans-unit id="4483" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>rgrc[2]<ept id="p1">**</ept> rectangle contains the coordinates of the window's client area before the window was moved.</source>
        </trans-unit>
        <trans-unit id="4484" translate="yes" xml:space="preserve">
          <source>All coordinates are relative to the parent window or screen.</source>
        </trans-unit>
        <trans-unit id="4485" translate="yes" xml:space="preserve">
          <source>The default implementation calculates the size of the client area based on the window characteristics (presence of scroll bars, menu, and so on), and places the result in <ph id="ph1">`lpncsp`</ph>.</source>
        </trans-unit>
        <trans-unit id="4486" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4487" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4488" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4489" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcCreate</source>
        </trans-unit>
        <trans-unit id="4490" translate="yes" xml:space="preserve">
          <source>The framework calls this member function prior to the <bpt id="p1">[</bpt>WM_CREATE<ept id="p1">](#cwnd__oncreate)</ept> message when the <ph id="ph1">`CWnd`</ph> object is first created.</source>
        </trans-unit>
        <trans-unit id="4491" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4492" translate="yes" xml:space="preserve">
          <source>Points to the <bpt id="p1">[</bpt>CREATESTRUCT<ept id="p1">](../../mfc/reference/createstruct-structure.md)</ept> data structure for <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="4493" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="4494" translate="yes" xml:space="preserve">
          <source>Nonzero if the nonclient area is created.</source>
        </trans-unit>
        <trans-unit id="4495" translate="yes" xml:space="preserve">
          <source>It is 0 if an error occurs; the <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> function will return <bpt id="p2">**</bpt>failure<ept id="p2">**</ept> in this case.</source>
        </trans-unit>
        <trans-unit id="4496" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4497" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4498" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4499" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4500" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcDestroy</source>
        </trans-unit>
        <trans-unit id="4501" translate="yes" xml:space="preserve">
          <source>Called by the framework when the nonclient area is being destroyed, and is the last member function called when the Windows window is destroyed.</source>
        </trans-unit>
        <trans-unit id="4502" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4503" translate="yes" xml:space="preserve">
          <source>The default implementation performs some cleanup, then calls the virtual member function <bpt id="p1">[</bpt>PostNcDestroy<ept id="p1">](#cwnd__postncdestroy)</ept>.</source>
        </trans-unit>
        <trans-unit id="4504" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">`PostNcDestroy`</ph> if you want to perform your own cleanup, such as a <bpt id="p1">**</bpt>delete this<ept id="p1">**</ept> operation.</source>
        </trans-unit>
        <trans-unit id="4505" translate="yes" xml:space="preserve">
          <source>If you override <ph id="ph1">`OnNcDestroy`</ph>, you must call <ph id="ph2">`OnNcDestroy`</ph> in your base class to ensure that any memory internally allocated for the window is freed.</source>
        </trans-unit>
        <trans-unit id="4506" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcHitTest</source>
        </trans-unit>
        <trans-unit id="4507" translate="yes" xml:space="preserve">
          <source>The framework calls this member function for the <ph id="ph1">`CWnd`</ph> object that contains the cursor (or the <ph id="ph2">`CWnd`</ph> object that used the <bpt id="p1">[</bpt>SetCapture<ept id="p1">](#cwnd__setcapture)</ept> member function to capture the mouse input) every time the mouse is moved.</source>
        </trans-unit>
        <trans-unit id="4508" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4509" translate="yes" xml:space="preserve">
          <source>Contains the x- and y-coordinates of the cursor.</source>
        </trans-unit>
        <trans-unit id="4510" translate="yes" xml:space="preserve">
          <source>These coordinates are always screen coordinates.</source>
        </trans-unit>
        <trans-unit id="4511" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="4512" translate="yes" xml:space="preserve">
          <source>One of the mouse hit-test enumerated values listed below.</source>
        </trans-unit>
        <trans-unit id="4513" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4514" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4515" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4516" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4517" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcLButtonDblClk</source>
        </trans-unit>
        <trans-unit id="4518" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user double-clicks the left mouse button while the cursor is within a nonclient area of <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="4519" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4520" translate="yes" xml:space="preserve">
          <source>Specifies the <bpt id="p1">[</bpt>hit-test code<ept id="p1">](#cwnd__onnchittest)</ept>.</source>
        </trans-unit>
        <trans-unit id="4521" translate="yes" xml:space="preserve">
          <source>A hit test is a test that determines the location of the cursor.</source>
        </trans-unit>
        <trans-unit id="4522" translate="yes" xml:space="preserve">
          <source>Specifies a <ph id="ph1">`CPoint`</ph> object that contains the x and y screen coordinates of the cursor position.</source>
        </trans-unit>
        <trans-unit id="4523" translate="yes" xml:space="preserve">
          <source>These coordinates are always relative to the upper-left corner of the screen.</source>
        </trans-unit>
        <trans-unit id="4524" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4525" translate="yes" xml:space="preserve">
          <source>If appropriate, the <bpt id="p1">[</bpt>WM_SYSCOMMAND<ept id="p1">](#cwnd__onsyscommand)</ept> message is sent.</source>
        </trans-unit>
        <trans-unit id="4526" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4527" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4528" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4529" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcLButtonDown</source>
        </trans-unit>
        <trans-unit id="4530" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user presses the left mouse button while the cursor is within a nonclient area of the <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="4531" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4532" translate="yes" xml:space="preserve">
          <source>Specifies the <bpt id="p1">[</bpt>hit-test code<ept id="p1">](#cwnd__onnchittest)</ept>.</source>
        </trans-unit>
        <trans-unit id="4533" translate="yes" xml:space="preserve">
          <source>A hit test is a test that determines the location of the cursor.</source>
        </trans-unit>
        <trans-unit id="4534" translate="yes" xml:space="preserve">
          <source>Specifies a <ph id="ph1">`CPoint`</ph> object that contains the x and y screen coordinates of the cursor position.</source>
        </trans-unit>
        <trans-unit id="4535" translate="yes" xml:space="preserve">
          <source>These coordinates are always relative to the upper-left corner of the screen.</source>
        </trans-unit>
        <trans-unit id="4536" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4537" translate="yes" xml:space="preserve">
          <source>If appropriate, the <bpt id="p1">[</bpt>WM_SYSCOMMAND<ept id="p1">](#cwnd__onsyscommand)</ept> is sent.</source>
        </trans-unit>
        <trans-unit id="4538" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4539" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4540" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcLButtonUp</source>
        </trans-unit>
        <trans-unit id="4541" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user releases the left mouse button while the cursor is within a nonclient area.</source>
        </trans-unit>
        <trans-unit id="4542" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4543" translate="yes" xml:space="preserve">
          <source>Specifies the <bpt id="p1">[</bpt>hit-test code<ept id="p1">](#cwnd__onnchittest)</ept>.</source>
        </trans-unit>
        <trans-unit id="4544" translate="yes" xml:space="preserve">
          <source>A hit test is a test that determines the location of the cursor.</source>
        </trans-unit>
        <trans-unit id="4545" translate="yes" xml:space="preserve">
          <source>Specifies a <ph id="ph1">`CPoint`</ph> object that contains the x and y screen coordinates of the cursor position.</source>
        </trans-unit>
        <trans-unit id="4546" translate="yes" xml:space="preserve">
          <source>These coordinates are always relative to the upper-left corner of the screen.</source>
        </trans-unit>
        <trans-unit id="4547" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4548" translate="yes" xml:space="preserve">
          <source>If appropriate, <bpt id="p1">[</bpt>WM_SYSCOMMAND<ept id="p1">](#cwnd__onsyscommand)</ept> is sent.</source>
        </trans-unit>
        <trans-unit id="4549" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4550" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4551" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4552" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcMButtonDblClk</source>
        </trans-unit>
        <trans-unit id="4553" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user double-clicks the middle mouse button while the cursor is within a nonclient area.</source>
        </trans-unit>
        <trans-unit id="4554" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4555" translate="yes" xml:space="preserve">
          <source>Specifies the <bpt id="p1">[</bpt>hit-test code<ept id="p1">](#cwnd__onnchittest)</ept>.</source>
        </trans-unit>
        <trans-unit id="4556" translate="yes" xml:space="preserve">
          <source>A hit test is a test that determines the location of the cursor.</source>
        </trans-unit>
        <trans-unit id="4557" translate="yes" xml:space="preserve">
          <source>Specifies a <ph id="ph1">`CPoint`</ph> object that contains the x and y screen coordinates of the cursor position.</source>
        </trans-unit>
        <trans-unit id="4558" translate="yes" xml:space="preserve">
          <source>These coordinates are always relative to the upper-left corner of the screen.</source>
        </trans-unit>
        <trans-unit id="4559" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4560" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4561" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4562" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4563" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcMButtonDown</source>
        </trans-unit>
        <trans-unit id="4564" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user presses the middle mouse button while the cursor is within a nonclient area.</source>
        </trans-unit>
        <trans-unit id="4565" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4566" translate="yes" xml:space="preserve">
          <source>Specifies the <bpt id="p1">[</bpt>hit-test code<ept id="p1">](#cwnd__onnchittest)</ept>.</source>
        </trans-unit>
        <trans-unit id="4567" translate="yes" xml:space="preserve">
          <source>A hit test is a test that determines the location of the cursor.</source>
        </trans-unit>
        <trans-unit id="4568" translate="yes" xml:space="preserve">
          <source>Specifies a <ph id="ph1">`CPoint`</ph> object that contains the x and y screen coordinates of the cursor position.</source>
        </trans-unit>
        <trans-unit id="4569" translate="yes" xml:space="preserve">
          <source>These coordinates are always relative to the upper-left corner of the screen.</source>
        </trans-unit>
        <trans-unit id="4570" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4571" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4572" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4573" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4574" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcMButtonUp</source>
        </trans-unit>
        <trans-unit id="4575" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user releases the middle mouse button while the cursor is within a nonclient area.</source>
        </trans-unit>
        <trans-unit id="4576" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4577" translate="yes" xml:space="preserve">
          <source>Specifies the <bpt id="p1">[</bpt>hit-test code<ept id="p1">](#cwnd__onnchittest)</ept>.</source>
        </trans-unit>
        <trans-unit id="4578" translate="yes" xml:space="preserve">
          <source>A hit test is a test that determines the location of the cursor.</source>
        </trans-unit>
        <trans-unit id="4579" translate="yes" xml:space="preserve">
          <source>Specifies a <ph id="ph1">`CPoint`</ph> object that contains the x and y screen coordinates of the cursor position.</source>
        </trans-unit>
        <trans-unit id="4580" translate="yes" xml:space="preserve">
          <source>These coordinates are always relative to the upper-left corner of the screen.</source>
        </trans-unit>
        <trans-unit id="4581" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4582" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4583" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4584" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4585" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcMouseHover</source>
        </trans-unit>
        <trans-unit id="4586" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the cursor hovers over the nonclient area of the window for the period of time specified in a prior call to <bpt id="p1">[</bpt>TrackMouseEvent<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646265)</ept>.</source>
        </trans-unit>
        <trans-unit id="4587" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4588" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="4589" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="4590" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4591" translate="yes" xml:space="preserve">
          <source>The hit-test value returned by the <bpt id="p1">[</bpt>CWnd::DefWindowProc<ept id="p1">](#cwnd__defwindowproc)</ept> function as a result of processing the <bpt id="p2">[</bpt>WM_NCHITTEST<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms645618)</ept> message.</source>
        </trans-unit>
        <trans-unit id="4592" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4593" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CPoint<ept id="p1">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object that specifies the <bpt id="p2">*</bpt>x<ept id="p2">*</ept> and <bpt id="p3">*</bpt>y<ept id="p3">*</ept> coordinates of the cursor relative to the upper-left corner of the screen.</source>
        </trans-unit>
        <trans-unit id="4594" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4595" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_NCMOUSEHOVER<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645625)</ept> notification, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="4596" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4597" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4598" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4599" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcMouseLeave</source>
        </trans-unit>
        <trans-unit id="4600" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the cursor leaves the nonclient area of the window specified in a prior call to <bpt id="p1">[</bpt>TrackMouseEvent<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646265)</ept>.</source>
        </trans-unit>
        <trans-unit id="4601" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4602" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_NCMOUSELEAVE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645626)</ept> notification, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="4603" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4604" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4605" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4606" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcMouseMove</source>
        </trans-unit>
        <trans-unit id="4607" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the cursor is moved within a nonclient area.</source>
        </trans-unit>
        <trans-unit id="4608" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4609" translate="yes" xml:space="preserve">
          <source>Specifies the <bpt id="p1">[</bpt>hit-test code<ept id="p1">](#cwnd__onnchittest)</ept>.</source>
        </trans-unit>
        <trans-unit id="4610" translate="yes" xml:space="preserve">
          <source>A hit test is a test that determines the location of the cursor.</source>
        </trans-unit>
        <trans-unit id="4611" translate="yes" xml:space="preserve">
          <source>Specifies a <ph id="ph1">`CPoint`</ph> object that contains the x and y screen coordinates of the cursor position.</source>
        </trans-unit>
        <trans-unit id="4612" translate="yes" xml:space="preserve">
          <source>These coordinates are always relative to the upper-left corner of the screen.</source>
        </trans-unit>
        <trans-unit id="4613" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4614" translate="yes" xml:space="preserve">
          <source>If appropriate, the <bpt id="p1">[</bpt>WM_SYSCOMMAND<ept id="p1">](#cwnd__onsyscommand)</ept> message is sent.</source>
        </trans-unit>
        <trans-unit id="4615" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4616" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4617" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4618" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcPaint</source>
        </trans-unit>
        <trans-unit id="4619" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the nonclient area needs to be painted.</source>
        </trans-unit>
        <trans-unit id="4620" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4621" translate="yes" xml:space="preserve">
          <source>The default implementation paints the window frame.</source>
        </trans-unit>
        <trans-unit id="4622" translate="yes" xml:space="preserve">
          <source>An application can override this call and paint its own custom window frame.</source>
        </trans-unit>
        <trans-unit id="4623" translate="yes" xml:space="preserve">
          <source>The clipping region is always rectangular, even if the shape of the frame is altered.</source>
        </trans-unit>
        <trans-unit id="4624" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcRButtonDblClk</source>
        </trans-unit>
        <trans-unit id="4625" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user double-clicks the right mouse button while the cursor is within a nonclient area of <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="4626" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4627" translate="yes" xml:space="preserve">
          <source>Specifies the <bpt id="p1">[</bpt>hit-test code<ept id="p1">](#cwnd__onnchittest)</ept>.</source>
        </trans-unit>
        <trans-unit id="4628" translate="yes" xml:space="preserve">
          <source>A hit test is a test that determines the location of the cursor.</source>
        </trans-unit>
        <trans-unit id="4629" translate="yes" xml:space="preserve">
          <source>Specifies a <ph id="ph1">`CPoint`</ph> object that contains the x and y screen coordinates of the cursor position.</source>
        </trans-unit>
        <trans-unit id="4630" translate="yes" xml:space="preserve">
          <source>These coordinates are always relative to the upper-left corner of the screen.</source>
        </trans-unit>
        <trans-unit id="4631" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4632" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4633" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4634" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4635" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcRButtonDown</source>
        </trans-unit>
        <trans-unit id="4636" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user presses the right mouse button while the cursor is within a nonclient area.</source>
        </trans-unit>
        <trans-unit id="4637" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4638" translate="yes" xml:space="preserve">
          <source>Specifies the <bpt id="p1">[</bpt>hit-test code<ept id="p1">](#cwnd__onnchittest)</ept>.</source>
        </trans-unit>
        <trans-unit id="4639" translate="yes" xml:space="preserve">
          <source>A hit test is a test that determines the location of the cursor.</source>
        </trans-unit>
        <trans-unit id="4640" translate="yes" xml:space="preserve">
          <source>Specifies a <ph id="ph1">`CPoint`</ph> object that contains the x and y screen coordinates of the cursor position.</source>
        </trans-unit>
        <trans-unit id="4641" translate="yes" xml:space="preserve">
          <source>These coordinates are always relative to the upper-left corner of the screen.</source>
        </trans-unit>
        <trans-unit id="4642" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4643" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4644" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4645" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4646" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcRButtonUp</source>
        </trans-unit>
        <trans-unit id="4647" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user releases the right mouse button while the cursor is within a nonclient area.</source>
        </trans-unit>
        <trans-unit id="4648" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4649" translate="yes" xml:space="preserve">
          <source>Specifies the <bpt id="p1">[</bpt>hit-test code<ept id="p1">](#cwnd__onnchittest)</ept>.</source>
        </trans-unit>
        <trans-unit id="4650" translate="yes" xml:space="preserve">
          <source>A hit test is a test that determines the location of the cursor.</source>
        </trans-unit>
        <trans-unit id="4651" translate="yes" xml:space="preserve">
          <source>Specifies a <ph id="ph1">`CPoint`</ph> object that contains the x and y screen coordinates of the cursor position.</source>
        </trans-unit>
        <trans-unit id="4652" translate="yes" xml:space="preserve">
          <source>These coordinates are always relative to the upper-left corner of the screen.</source>
        </trans-unit>
        <trans-unit id="4653" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4654" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4655" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4656" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4657" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcRenderingChanged</source>
        </trans-unit>
        <trans-unit id="4658" translate="yes" xml:space="preserve">
          <source>The framework calls this member when the rendering policy for the nonclient area has changed.</source>
        </trans-unit>
        <trans-unit id="4659" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4660" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="4661" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="4662" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4663" translate="yes" xml:space="preserve">
          <source>if Desktop Window Manager (DWM) rendering is enabled for the nonclient area of the window; <ph id="ph1">`false`</ph> if rendering is disabled.</source>
        </trans-unit>
        <trans-unit id="4664" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4665" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_DWMNCRENDERINGCHANGED<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd388200)</ept> notification, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="4666" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4667" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4668" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4669" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcXButtonDblClk</source>
        </trans-unit>
        <trans-unit id="4670" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user double-clicks XBUTTON1 or XBUTTON2 while the cursor is in the nonclient area of a window.</source>
        </trans-unit>
        <trans-unit id="4671" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4672" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="4673" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="4674" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4675" translate="yes" xml:space="preserve">
          <source>The hit-test value returned by the <bpt id="p1">[</bpt>CWnd::DefWindowProc<ept id="p1">](#cwnd__defwindowproc)</ept> function as a result of processing the <bpt id="p2">[</bpt>WM_NCHITTEST<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms645618)</ept> message.</source>
        </trans-unit>
        <trans-unit id="4676" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4677" translate="yes" xml:space="preserve">
          <source>A value of <ph id="ph1">`XBUTTON1`</ph> if the first Microsoft Intellimouse X button is double-clicked, or <ph id="ph2">`XBUTTON2`</ph> if the second X button is double-clicked.</source>
        </trans-unit>
        <trans-unit id="4678" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4679" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CPoint<ept id="p1">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object that specifies the <bpt id="p2">*</bpt>x<ept id="p2">*</ept> and <bpt id="p3">*</bpt>y<ept id="p3">*</ept> coordinates of the cursor relative to the upper-left corner of the client area.</source>
        </trans-unit>
        <trans-unit id="4680" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4681" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_XBUTTONDBLCLK<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646244)</ept> notification, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="4682" translate="yes" xml:space="preserve">
          <source>This message is posted to the window that contains the cursor.</source>
        </trans-unit>
        <trans-unit id="4683" translate="yes" xml:space="preserve">
          <source>If a window has captured the mouse, this message is not posted.</source>
        </trans-unit>
        <trans-unit id="4684" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4685" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4686" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4687" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcXButtonDown</source>
        </trans-unit>
        <trans-unit id="4688" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user presses XBUTTON1 or XBUTTON2 of the mouse while the cursor is in the nonclient area of a window.</source>
        </trans-unit>
        <trans-unit id="4689" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4690" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="4691" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="4692" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4693" translate="yes" xml:space="preserve">
          <source>The hit-test value returned by the <bpt id="p1">[</bpt>CWnd::DefWindowProc<ept id="p1">](#cwnd__defwindowproc)</ept> function as a result of processing the <bpt id="p2">[</bpt>WM_NCHITTEST<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms645618)</ept> message.</source>
        </trans-unit>
        <trans-unit id="4694" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4695" translate="yes" xml:space="preserve">
          <source>A value of <ph id="ph1">`XBUTTON1`</ph> if the first mouse X button is pressed, or <ph id="ph2">`XBUTTON2`</ph> if the second X button is pressed.</source>
        </trans-unit>
        <trans-unit id="4696" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4697" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CPoint<ept id="p1">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object that specifies the <bpt id="p2">*</bpt>x<ept id="p2">*</ept> and <bpt id="p3">*</bpt>y<ept id="p3">*</ept> coordinates of the cursor relative to the upper-left corner of the screen.</source>
        </trans-unit>
        <trans-unit id="4698" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4699" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_NCXBUTTONDOWN<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645632)</ept> notification, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="4700" translate="yes" xml:space="preserve">
          <source>This message is posted to the window that contains the cursor.</source>
        </trans-unit>
        <trans-unit id="4701" translate="yes" xml:space="preserve">
          <source>If a window has captured the mouse, this message is not posted.</source>
        </trans-unit>
        <trans-unit id="4702" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4703" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4704" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4705" translate="yes" xml:space="preserve">
          <source>CWnd::OnNcXButtonUp</source>
        </trans-unit>
        <trans-unit id="4706" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user releases XBUTTON1 or XBUTTON2 of the mouse while the cursor is in the nonclient area of a window.</source>
        </trans-unit>
        <trans-unit id="4707" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4708" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="4709" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="4710" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4711" translate="yes" xml:space="preserve">
          <source>The hit-test value returned by the <bpt id="p1">[</bpt>CWnd::DefWindowProc<ept id="p1">](#cwnd__defwindowproc)</ept> function as a result of processing the <bpt id="p2">[</bpt>WM_NCHITTEST<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms645618)</ept> message.</source>
        </trans-unit>
        <trans-unit id="4712" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4713" translate="yes" xml:space="preserve">
          <source>A value of <ph id="ph1">`XBUTTON1`</ph> if the first mouse X button is released, or <ph id="ph2">`XBUTTON2`</ph> if the second X button is released.</source>
        </trans-unit>
        <trans-unit id="4714" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4715" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CPoint<ept id="p1">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object that specifies the <bpt id="p2">*</bpt>x<ept id="p2">*</ept> and <bpt id="p3">*</bpt>y<ept id="p3">*</ept> coordinates of the cursor relative to the upper-left corner of the screen.</source>
        </trans-unit>
        <trans-unit id="4716" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4717" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_NCXBUTTONUP<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646240)</ept> notification, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="4718" translate="yes" xml:space="preserve">
          <source>This message is posted to the window that contains the cursor.</source>
        </trans-unit>
        <trans-unit id="4719" translate="yes" xml:space="preserve">
          <source>If a window has captured the mouse, this message is not posted.</source>
        </trans-unit>
        <trans-unit id="4720" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4721" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4722" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4723" translate="yes" xml:space="preserve">
          <source>CWnd::OnNextMenu</source>
        </trans-unit>
        <trans-unit id="4724" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when when the right or left arrow key is used to switch between the menu bar and the system menu.</source>
        </trans-unit>
        <trans-unit id="4725" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4726" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="4727" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="4728" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4729" translate="yes" xml:space="preserve">
          <source>A bitwise combination (OR) of flags that indicate which modifier keys are pressed.</source>
        </trans-unit>
        <trans-unit id="4730" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`MK_CONTROL`</ph> flag indicates that the CTRL key is pressed.</source>
        </trans-unit>
        <trans-unit id="4731" translate="yes" xml:space="preserve">
          <source>For a list of flags, see the "Message Parameters" subheading in <bpt id="p1">[</bpt>About Mouse Input<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645601)</ept>.</source>
        </trans-unit>
        <trans-unit id="4732" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4733" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>MDINEXTMENU<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647561)</ept> structure that contains information about the menu to be activated.</source>
        </trans-unit>
        <trans-unit id="4734" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4735" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_UNINITMENUPOPUP<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647614)</ept> notification, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="4736" translate="yes" xml:space="preserve">
          <source>In response to this message, your application can set the <ph id="ph1">`hmenuNext`</ph> member of the <bpt id="p1">[</bpt>MDINEXTMENU<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647561)</ept> structure to specify the menu to switch to, and the <ph id="ph2">`hwndNext`</ph> member to specify the window to receive menu notification messages.</source>
        </trans-unit>
        <trans-unit id="4737" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4738" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4739" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4740" translate="yes" xml:space="preserve">
          <source>CWnd::OnNotify</source>
        </trans-unit>
        <trans-unit id="4741" translate="yes" xml:space="preserve">
          <source>The framework calls this member function to inform the parent window of a control that an event has occurred in the control or that the control requires some kind of information.</source>
        </trans-unit>
        <trans-unit id="4742" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4743" translate="yes" xml:space="preserve">
          <source>Identifies the control that sends the message if the message is from a control.</source>
        </trans-unit>
        <trans-unit id="4744" translate="yes" xml:space="preserve">
          <source>Otherwise, <ph id="ph1">`wParam`</ph> is 0.</source>
        </trans-unit>
        <trans-unit id="4745" translate="yes" xml:space="preserve">
          <source>Pointer to a notification message ( <bpt id="p1">**</bpt>NMHDR<ept id="p1">**</ept>) structure that contains the notification code and additional information.</source>
        </trans-unit>
        <trans-unit id="4746" translate="yes" xml:space="preserve">
          <source>For some notification messages, this parameter points to a larger structure that has the <bpt id="p1">**</bpt>NMHDR<ept id="p1">**</ept> structure as its first member.</source>
        </trans-unit>
        <trans-unit id="4747" translate="yes" xml:space="preserve">
          <source>Pointer to an <bpt id="p1">**</bpt>LRESULT<ept id="p1">**</ept> variable in which to store the result code if the message is handled.</source>
        </trans-unit>
        <trans-unit id="4748" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="4749" translate="yes" xml:space="preserve">
          <source>An application returns nonzero if it processes this message; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="4750" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4751" translate="yes" xml:space="preserve">
          <source>processes the message map for control notification.</source>
        </trans-unit>
        <trans-unit id="4752" translate="yes" xml:space="preserve">
          <source>Override this member function in your derived class to handle the <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> message.</source>
        </trans-unit>
        <trans-unit id="4753" translate="yes" xml:space="preserve">
          <source>An override will not process the message map unless the base class <ph id="ph1">`OnNotify`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="4754" translate="yes" xml:space="preserve">
          <source>For more information on the WM_NOTIFY message, see Technical Note 61 (TN061), <bpt id="p1">[</bpt>ON_NOTIFY and WM_NOTIFY messages<ept id="p1">](../../mfc/tn061-on-notify-and-wm-notify-messages.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="4755" translate="yes" xml:space="preserve">
          <source>You may also be interested the related topics described in <bpt id="p1">[</bpt>Control Topics<ept id="p1">](../../mfc/controls-mfc.md)</ept>, and TN062, <bpt id="p2">[</bpt>Message Reflection for Windows Controls<ept id="p2">](../../mfc/tn062-message-reflection-for-windows-controls.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="4756" translate="yes" xml:space="preserve">
          <source>CWnd::OnNotifyFormat</source>
        </trans-unit>
        <trans-unit id="4757" translate="yes" xml:space="preserve">
          <source>The framework calls this member function to determine if the current window accepts ANSI or Unicode structures in the WM_NOTIFY notification message.</source>
        </trans-unit>
        <trans-unit id="4758" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4759" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="4760" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="4761" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4762" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CWnd<ept id="p1">](../../mfc/reference/cwnd-class.md)</ept> object that represents the window sending the <bpt id="p2">[</bpt>WM_NOTIFY<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb775583)</ept> message.</source>
        </trans-unit>
        <trans-unit id="4763" translate="yes" xml:space="preserve">
          <source>This parameter is the pointer to a control if the <ph id="ph1">`nCommand`</ph> parameter is <ph id="ph2">`NF_QUERY`</ph>, or the pointer to the parent window of a control if <ph id="ph3">`nCommand`</ph> is <ph id="ph4">`NF_REQUERY`</ph>.</source>
        </trans-unit>
        <trans-unit id="4764" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4765" translate="yes" xml:space="preserve">
          <source>A command value that specializes the <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> message.</source>
        </trans-unit>
        <trans-unit id="4766" translate="yes" xml:space="preserve">
          <source>The possible values are:</source>
        </trans-unit>
        <trans-unit id="4767" translate="yes" xml:space="preserve">
          <source>The message is a query to determine whether ANSI or Unicode structures should be used in <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> messages.</source>
        </trans-unit>
        <trans-unit id="4768" translate="yes" xml:space="preserve">
          <source>This message is sent from a control to its parent window during the creation of a control, and in response to the <ph id="ph1">`NF_REQUERY`</ph> form of this message.</source>
        </trans-unit>
        <trans-unit id="4769" translate="yes" xml:space="preserve">
          <source>The message is a request for a control to send the <ph id="ph1">`NF_QUERY`</ph> form of this message to its parent window.</source>
        </trans-unit>
        <trans-unit id="4770" translate="yes" xml:space="preserve">
          <source>This request is sent from the parent window, and asks the control to requery the parent about the type of structure to use in <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> messages.</source>
        </trans-unit>
        <trans-unit id="4771" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`nCommand`</ph> parameter is <ph id="ph2">`NF_REQUERY`</ph>, the return value is the result of the requery operation.</source>
        </trans-unit>
        <trans-unit id="4772" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="4773" translate="yes" xml:space="preserve">
          <source>Return value</source>
        </trans-unit>
        <trans-unit id="4774" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="4775" translate="yes" xml:space="preserve">
          <source>ANSI structures should be used in <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> messages sent by the control.</source>
        </trans-unit>
        <trans-unit id="4776" translate="yes" xml:space="preserve">
          <source>Unicode structures should be used in <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> messages sent by the control.</source>
        </trans-unit>
        <trans-unit id="4777" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="4778" translate="yes" xml:space="preserve">
          <source>An error occurred.</source>
        </trans-unit>
        <trans-unit id="4779" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4780" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_NOTIFYFORMAT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775584)</ept> notification, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="4781" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> messages are sent from a common control to its parent window, and from the parent window to the common control.</source>
        </trans-unit>
        <trans-unit id="4782" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4783" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4784" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4785" translate="yes" xml:space="preserve">
          <source>CWnd::OnPaint</source>
        </trans-unit>
        <trans-unit id="4786" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when Windows or an application makes a request to repaint a portion of an application's window.</source>
        </trans-unit>
        <trans-unit id="4787" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4788" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>WM_PAINT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145137)</ept> message is sent when the <bpt id="p2">[</bpt>UpdateWindow<ept id="p2">](#cwnd__updatewindow)</ept> or <bpt id="p3">[</bpt>RedrawWindow<ept id="p3">](#cwnd__redrawwindow)</ept> member function is called.</source>
        </trans-unit>
        <trans-unit id="4789" translate="yes" xml:space="preserve">
          <source>A window may receive internal paint messages as a result of calling the <ph id="ph1">`RedrawWindow`</ph> member function with the <bpt id="p1">**</bpt>RDW_INTERNALPAINT<ept id="p1">**</ept> flag set.</source>
        </trans-unit>
        <trans-unit id="4790" translate="yes" xml:space="preserve">
          <source>In this case, the window may not have an update region.</source>
        </trans-unit>
        <trans-unit id="4791" translate="yes" xml:space="preserve">
          <source>An application should call the <bpt id="p1">[</bpt>GetUpdateRect<ept id="p1">](#cwnd__getupdaterect)</ept> member function to determine whether the window has an update region.</source>
        </trans-unit>
        <trans-unit id="4792" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`GetUpdateRect`</ph> returns 0, the application should not call the <bpt id="p1">[</bpt>BeginPaint<ept id="p1">](#cwnd__beginpaint)</ept> and <bpt id="p2">[</bpt>EndPaint<ept id="p2">](#cwnd__endpaint)</ept> member functions.</source>
        </trans-unit>
        <trans-unit id="4793" translate="yes" xml:space="preserve">
          <source>It is an application's responsibility to check for any necessary internal repainting or updating by looking at its internal data structures for each <ph id="ph1">`WM_PAINT`</ph> message because a <ph id="ph2">`WM_PAINT`</ph> message may have been caused by both an invalid area and a call to the <ph id="ph3">`RedrawWindow`</ph> member function with the <bpt id="p1">**</bpt>RDW_INTERNALPAINT<ept id="p1">**</ept> flag set.</source>
        </trans-unit>
        <trans-unit id="4794" translate="yes" xml:space="preserve">
          <source>An internal <ph id="ph1">`WM_PAINT`</ph> message is sent only once by Windows.</source>
        </trans-unit>
        <trans-unit id="4795" translate="yes" xml:space="preserve">
          <source>After an internal <ph id="ph1">`WM_PAINT`</ph> message is sent to a window by the <ph id="ph2">`UpdateWindow`</ph> member function, no further <ph id="ph3">`WM_PAINT`</ph> messages will be sent or posted until the window is invalidated or until the <ph id="ph4">`RedrawWindow`</ph> member function is called again with the <bpt id="p1">**</bpt>RDW_INTERNALPAINT<ept id="p1">**</ept> flag set.</source>
        </trans-unit>
        <trans-unit id="4796" translate="yes" xml:space="preserve">
          <source>For information on rendering an image in document/view applications, see <bpt id="p1">[</bpt>CView::OnDraw<ept id="p1">](../../mfc/reference/cview-class.md#cview__ondraw)</ept>.</source>
        </trans-unit>
        <trans-unit id="4797" translate="yes" xml:space="preserve">
          <source>For more information about using <bpt id="p1">**</bpt>WM_Paint<ept id="p1">**</ept>, see the following topics in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>:</source>
        </trans-unit>
        <trans-unit id="4798" translate="yes" xml:space="preserve">
          <source>The WM_PAINT Message</source>
        </trans-unit>
        <trans-unit id="4799" translate="yes" xml:space="preserve">
          <source>Using the WM_PAINT Message</source>
        </trans-unit>
        <trans-unit id="4800" translate="yes" xml:space="preserve">
          <source>CWnd::OnPaintClipboard</source>
        </trans-unit>
        <trans-unit id="4801" translate="yes" xml:space="preserve">
          <source>A Clipboard owner's <ph id="ph1">`OnPaintClipboard`</ph> member function is called by a Clipboard viewer when the Clipboard owner has placed data on the Clipboard in the <ph id="ph2">`CF_OWNERDISPLAY`</ph> format and the Clipboard viewer's client area needs repainting.</source>
        </trans-unit>
        <trans-unit id="4802" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4803" translate="yes" xml:space="preserve">
          <source>Specifies a pointer to the Clipboard-application window.</source>
        </trans-unit>
        <trans-unit id="4804" translate="yes" xml:space="preserve">
          <source>The pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="4805" translate="yes" xml:space="preserve">
          <source>hPaintStruct</source>
        </trans-unit>
        <trans-unit id="4806" translate="yes" xml:space="preserve">
          <source>Identifies a <bpt id="p1">[</bpt>PAINTSTRUCT<ept id="p1">](../../mfc/reference/paintstruct-structure.md)</ept> data structure that defines what part of the client area to paint.</source>
        </trans-unit>
        <trans-unit id="4807" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4808" translate="yes" xml:space="preserve">
          <source>To determine whether the entire client area or just a portion of it needs repainting, the Clipboard owner must compare the dimensions of the drawing area given in the <bpt id="p1">**</bpt>rcpaint<ept id="p1">**</ept> member of the <ph id="ph1">`PAINTSTRUCT`</ph> structure to the dimensions given in the most recent <bpt id="p2">[</bpt>OnSizeClipboard<ept id="p2">](#cwnd__onsizeclipboard)</ept> member function call.</source>
        </trans-unit>
        <trans-unit id="4809" translate="yes" xml:space="preserve">
          <source>should use the <bpt id="p1">[</bpt>GlobalLock<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa366584)</ept> Windows function to lock the memory that contains the <ph id="ph1">`PAINTSTRUCT`</ph> data structure and unlock that memory with the <bpt id="p2">[</bpt>GlobalUnlock<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/aa366595)</ept> Windows function before it exits.</source>
        </trans-unit>
        <trans-unit id="4810" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4811" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4812" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4813" translate="yes" xml:space="preserve">
          <source>CWnd::OnPaletteChanged</source>
        </trans-unit>
        <trans-unit id="4814" translate="yes" xml:space="preserve">
          <source>The framework calls this member function for all top-level windows after the window with input focus has realized its logical palette, thereby changing the system palette.</source>
        </trans-unit>
        <trans-unit id="4815" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4816" translate="yes" xml:space="preserve">
          <source>Specifies a pointer to the window that caused the system palette to change.</source>
        </trans-unit>
        <trans-unit id="4817" translate="yes" xml:space="preserve">
          <source>The pointer may be temporary and should not be stored.</source>
        </trans-unit>
        <trans-unit id="4818" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4819" translate="yes" xml:space="preserve">
          <source>This call allows a window without the input focus that uses a color palette to realize its logical palettes and update its client area.</source>
        </trans-unit>
        <trans-unit id="4820" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OnPaletteChanged`</ph> member function is called for all top-level and overlapped windows, including the one that changed the system palette and caused the <ph id="ph2">`WM_PALETTECHANGED`</ph> message to be sent.</source>
        </trans-unit>
        <trans-unit id="4821" translate="yes" xml:space="preserve">
          <source>If any child window uses a color palette, this message must be passed on to it.</source>
        </trans-unit>
        <trans-unit id="4822" translate="yes" xml:space="preserve">
          <source>To avoid an infinite loop, the window shouldn't realize its palette unless it determines that <ph id="ph1">`pFocusWnd`</ph> does not contain a pointer to itself.</source>
        </trans-unit>
        <trans-unit id="4823" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4824" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4825" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4826" translate="yes" xml:space="preserve">
          <source>CWnd::OnPaletteIsChanging</source>
        </trans-unit>
        <trans-unit id="4827" translate="yes" xml:space="preserve">
          <source>The framework calls this member function to inform applications that an application is going to realize its logical palette.</source>
        </trans-unit>
        <trans-unit id="4828" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4829" translate="yes" xml:space="preserve">
          <source>pRealizeWnd</source>
        </trans-unit>
        <trans-unit id="4830" translate="yes" xml:space="preserve">
          <source>Specifies the window that is about to realize its logical palette.</source>
        </trans-unit>
        <trans-unit id="4831" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4832" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4833" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4834" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4835" translate="yes" xml:space="preserve">
          <source>CWnd::OnParentNotify</source>
        </trans-unit>
        <trans-unit id="4836" translate="yes" xml:space="preserve">
          <source>A parent's <ph id="ph1">`OnParentNotify`</ph> member function is called by the framework when its child window is created or destroyed, or when the user clicks a mouse button while the cursor is over the child window.</source>
        </trans-unit>
        <trans-unit id="4837" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4838" translate="yes" xml:space="preserve">
          <source>Specifies the event for which the parent is being notified and the identifier of the child window.</source>
        </trans-unit>
        <trans-unit id="4839" translate="yes" xml:space="preserve">
          <source>The event is the low-order word of <ph id="ph1">`message`</ph>.</source>
        </trans-unit>
        <trans-unit id="4840" translate="yes" xml:space="preserve">
          <source>If the event is <ph id="ph1">`WM_CREATE`</ph> or <ph id="ph2">`WM_DESTROY`</ph>, the high-order word of <ph id="ph3">`message`</ph> is the identifier of the child window; otherwise, the high-order word is undefined.</source>
        </trans-unit>
        <trans-unit id="4841" translate="yes" xml:space="preserve">
          <source>The event (low-order word of <ph id="ph1">`message`</ph>) can be any of these values:</source>
        </trans-unit>
        <trans-unit id="4842" translate="yes" xml:space="preserve">
          <source>The child window is being created.</source>
        </trans-unit>
        <trans-unit id="4843" translate="yes" xml:space="preserve">
          <source>The child window is being destroyed.</source>
        </trans-unit>
        <trans-unit id="4844" translate="yes" xml:space="preserve">
          <source>The user has placed the mouse cursor over the child window and clicked the left mouse button.</source>
        </trans-unit>
        <trans-unit id="4845" translate="yes" xml:space="preserve">
          <source>The user has placed the mouse cursor over the child window and clicked the middle mouse button.</source>
        </trans-unit>
        <trans-unit id="4846" translate="yes" xml:space="preserve">
          <source>The user has placed the mouse cursor over the child window and clicked the right mouse button.</source>
        </trans-unit>
        <trans-unit id="4847" translate="yes" xml:space="preserve">
          <source>If the event (low-order word) of <ph id="ph1">`message`</ph> is <ph id="ph2">`WM_CREATE`</ph> or <ph id="ph3">`WM_DESTROY`</ph>, <ph id="ph4">`lParam`</ph> specifies the window handle of the child window; otherwise <ph id="ph5">`lParam`</ph> contains the x and y coordinates of the cursor.</source>
        </trans-unit>
        <trans-unit id="4848" translate="yes" xml:space="preserve">
          <source>The x coordinate is in the low-order word and the y coordinate is in the high-order word.</source>
        </trans-unit>
        <trans-unit id="4849" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4850" translate="yes" xml:space="preserve">
          <source>When the child window is being created, the system calls <ph id="ph1">`OnParentNotify`</ph> just before the <bpt id="p1">[</bpt>Create<ept id="p1">](#cwnd__create)</ept> member function that creates the window returns.</source>
        </trans-unit>
        <trans-unit id="4851" translate="yes" xml:space="preserve">
          <source>When the child window is being destroyed, the system calls <ph id="ph1">`OnParentNotify`</ph> before any processing takes place to destroy the window.</source>
        </trans-unit>
        <trans-unit id="4852" translate="yes" xml:space="preserve">
          <source>is called for all ancestor windows of the child window, including the top-level window.</source>
        </trans-unit>
        <trans-unit id="4853" translate="yes" xml:space="preserve">
          <source>All child windows except those that have the <bpt id="p1">[</bpt>WS_EX_NOPARENTNOTIFY<ept id="p1">](../../mfc/reference/extended-window-styles.md)</ept> style send this message to their parent windows.</source>
        </trans-unit>
        <trans-unit id="4854" translate="yes" xml:space="preserve">
          <source>By default, child windows in a dialog box have the <bpt id="p1">**</bpt>WS_EX_NOPARENTNOTIFY<ept id="p1">**</ept> style unless the child window was created without this style by calling the <bpt id="p2">[</bpt>CreateEx<ept id="p2">](#cwnd__createex)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="4855" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4856" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4857" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4858" translate="yes" xml:space="preserve">
          <source>CWnd::OnPowerBroadcast</source>
        </trans-unit>
        <trans-unit id="4859" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when a power-management event occurs.</source>
        </trans-unit>
        <trans-unit id="4860" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4861" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="4862" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="4863" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4864" translate="yes" xml:space="preserve">
          <source>The power-management event.</source>
        </trans-unit>
        <trans-unit id="4865" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4866" translate="yes" xml:space="preserve">
          <source>Event-specific data.</source>
        </trans-unit>
        <trans-unit id="4867" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="4868" translate="yes" xml:space="preserve">
          <source>If the event is a request, return <ph id="ph1">`true`</ph> to grant the request, or <ph id="ph2">`BROADCAST_QUERY_DENY`</ph> to deny the request.</source>
        </trans-unit>
        <trans-unit id="4869" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4870" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_POWERBROADCAST<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa373247)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="4871" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nPowerEvent`</ph> parameter specifies events such as battery power is low, the power status has changed, permission to suspend operation is requested or denied, an operation is resuming automatically after an event, the system is suspending operation, or an operation is resuming after suspension.</source>
        </trans-unit>
        <trans-unit id="4872" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nEventData`</ph> parameter is typically not used.</source>
        </trans-unit>
        <trans-unit id="4873" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">`wParam`</ph> and <ph id="ph2">`lParam`</ph> parameters of the <bpt id="p1">[</bpt>WM_POWERBROADCAST<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa373247)</ept> message.</source>
        </trans-unit>
        <trans-unit id="4874" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4875" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4876" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4877" translate="yes" xml:space="preserve">
          <source>CWnd::OnQueryDragIcon</source>
        </trans-unit>
        <trans-unit id="4878" translate="yes" xml:space="preserve">
          <source>The framework calls this member function by a minimized (iconic) window that does not have an icon defined for its class.</source>
        </trans-unit>
        <trans-unit id="4879" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="4880" translate="yes" xml:space="preserve">
          <source>A doubleword value that contains a cursor or icon handle in the low-order word.</source>
        </trans-unit>
        <trans-unit id="4881" translate="yes" xml:space="preserve">
          <source>The cursor or icon must be compatible with the display driver's resolution.</source>
        </trans-unit>
        <trans-unit id="4882" translate="yes" xml:space="preserve">
          <source>If the application returns <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the system displays the default cursor.</source>
        </trans-unit>
        <trans-unit id="4883" translate="yes" xml:space="preserve">
          <source>The default return value is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="4884" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4885" translate="yes" xml:space="preserve">
          <source>The system makes this call to obtain the cursor to display while the user drags the minimized window.</source>
        </trans-unit>
        <trans-unit id="4886" translate="yes" xml:space="preserve">
          <source>If an application returns the handle of an icon or cursor, the system converts it to black-and-white.</source>
        </trans-unit>
        <trans-unit id="4887" translate="yes" xml:space="preserve">
          <source>If an application returns a handle, the handle must identify a monochrome cursor or icon compatible with the display driver's resolution.</source>
        </trans-unit>
        <trans-unit id="4888" translate="yes" xml:space="preserve">
          <source>The application can call the <bpt id="p1">[</bpt>CWinApp::LoadCursor<ept id="p1">](../../mfc/reference/cwinapp-class.md#cwinapp__loadcursor)</ept> or <bpt id="p2">[</bpt>CWinApp::LoadIcon<ept id="p2">](../../mfc/reference/cwinapp-class.md#cwinapp__loadicon)</ept> member functions to load a cursor or icon from the resources in its executable file and to obtain this handle.</source>
        </trans-unit>
        <trans-unit id="4889" translate="yes" xml:space="preserve">
          <source>CWnd::OnQueryEndSession</source>
        </trans-unit>
        <trans-unit id="4890" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user chooses to end the Windows session or when an application calls the <bpt id="p1">[</bpt>ExitWindows<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa376867)</ept> Windows function.</source>
        </trans-unit>
        <trans-unit id="4891" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="4892" translate="yes" xml:space="preserve">
          <source>Nonzero if an application can be conveniently shut down; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="4893" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4894" translate="yes" xml:space="preserve">
          <source>If any application returns 0, the Windows session is not ended.</source>
        </trans-unit>
        <trans-unit id="4895" translate="yes" xml:space="preserve">
          <source>Windows stops calling <ph id="ph1">`OnQueryEndSession`</ph> as soon as one application returns 0 and sends the <bpt id="p1">[</bpt>WM_ENDSESSION<ept id="p1">](#cwnd__onendsession)</ept> message with a parameter value of <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> for any application that has already returned nonzero.</source>
        </trans-unit>
        <trans-unit id="4896" translate="yes" xml:space="preserve">
          <source>CWnd::OnQueryNewPalette</source>
        </trans-unit>
        <trans-unit id="4897" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the <ph id="ph1">`CWnd`</ph> object is about to receive the input focus, giving the <ph id="ph2">`CWnd`</ph> an opportunity to realize its logical palette when it receives the focus.</source>
        </trans-unit>
        <trans-unit id="4898" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="4899" translate="yes" xml:space="preserve">
          <source>Nonzero if the <ph id="ph1">`CWnd`</ph> realizes its logical palette; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="4900" translate="yes" xml:space="preserve">
          <source>CWnd::OnQueryOpen</source>
        </trans-unit>
        <trans-unit id="4901" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the <ph id="ph1">`CWnd`</ph> object is minimized and the user requests that the <ph id="ph2">`CWnd`</ph> be restored to its preminimized size and position.</source>
        </trans-unit>
        <trans-unit id="4902" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="4903" translate="yes" xml:space="preserve">
          <source>Nonzero if the icon can be opened, or 0 to prevent the icon from being opened.</source>
        </trans-unit>
        <trans-unit id="4904" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4905" translate="yes" xml:space="preserve">
          <source>While in <ph id="ph1">`OnQueryOpen`</ph>, <ph id="ph2">`CWnd`</ph> should not perform any action that would cause an activation or focus change (for example, creating a dialog box).</source>
        </trans-unit>
        <trans-unit id="4906" translate="yes" xml:space="preserve">
          <source>CWnd::OnQueryUIState</source>
        </trans-unit>
        <trans-unit id="4907" translate="yes" xml:space="preserve">
          <source>Called to retrieve the user interface (UI) state for a window.</source>
        </trans-unit>
        <trans-unit id="4908" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="4909" translate="yes" xml:space="preserve">
          <source>The return value is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if the focus indicators and the keyboard accelerators are visible.</source>
        </trans-unit>
        <trans-unit id="4910" translate="yes" xml:space="preserve">
          <source>Otherwise, the return value can be one or more of the following values:</source>
        </trans-unit>
        <trans-unit id="4911" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UISF_HIDEFOCUS<ept id="p1">**</ept> Focus indicators are hidden.</source>
        </trans-unit>
        <trans-unit id="4912" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UISF_HIDEACCEL<ept id="p1">**</ept> Keyboard accelerators are hidden.</source>
        </trans-unit>
        <trans-unit id="4913" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UISF_ACTIVE Windows XP:<ept id="p1">**</ept> A control should be drawn in the style used for active controls.</source>
        </trans-unit>
        <trans-unit id="4914" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4915" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the <bpt id="p1">[</bpt>WM_QUERYUISTATE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646355)</ept> message, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="4916" translate="yes" xml:space="preserve">
          <source>CWnd::OnRawInput</source>
        </trans-unit>
        <trans-unit id="4917" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the current window gets raw input.</source>
        </trans-unit>
        <trans-unit id="4918" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4919" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="4920" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="4921" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4922" translate="yes" xml:space="preserve">
          <source>Input code that indicates whether the input occurred while the application was in the foreground or not.</source>
        </trans-unit>
        <trans-unit id="4923" translate="yes" xml:space="preserve">
          <source>In either case, the application must call <bpt id="p1">[</bpt>CWnd::DefWindowProc<ept id="p1">](#cwnd__defwindowproc)</ept> so the system can perform cleanup.</source>
        </trans-unit>
        <trans-unit id="4924" translate="yes" xml:space="preserve">
          <source>This parameter can be one of the following values:</source>
        </trans-unit>
        <trans-unit id="4925" translate="yes" xml:space="preserve">
          <source>- Input occurred while the application was in the foreground.</source>
        </trans-unit>
        <trans-unit id="4926" translate="yes" xml:space="preserve">
          <source>- Input occurred while the application was not in the foreground.</source>
        </trans-unit>
        <trans-unit id="4927" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="4928" translate="yes" xml:space="preserve">
          <source>Handle to a <bpt id="p1">[</bpt>RAWINPUT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645562)</ept> structure that contains the raw input from the device.</source>
        </trans-unit>
        <trans-unit id="4929" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4930" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_INPUT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646275)</ept> notification, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="4931" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4932" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4933" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4934" translate="yes" xml:space="preserve">
          <source>CWnd::OnRButtonDblClk</source>
        </trans-unit>
        <trans-unit id="4935" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user double-clicks the right mouse button.</source>
        </trans-unit>
        <trans-unit id="4936" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4937" translate="yes" xml:space="preserve">
          <source>Indicates whether various virtual keys are down.</source>
        </trans-unit>
        <trans-unit id="4938" translate="yes" xml:space="preserve">
          <source>This parameter can be any combination of the following values:</source>
        </trans-unit>
        <trans-unit id="4939" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_CONTROL<ept id="p1">**</ept> Set if CTRL key is down.</source>
        </trans-unit>
        <trans-unit id="4940" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_LBUTTON<ept id="p1">**</ept> Set if left mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4941" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_MBUTTON<ept id="p1">**</ept> Set if middle mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4942" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_RBUTTON<ept id="p1">**</ept> Set if right mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4943" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_SHIFT<ept id="p1">**</ept> Set if SHIFT key is down.</source>
        </trans-unit>
        <trans-unit id="4944" translate="yes" xml:space="preserve">
          <source>Specifies the x and y coordinates of the cursor.</source>
        </trans-unit>
        <trans-unit id="4945" translate="yes" xml:space="preserve">
          <source>These coordinates are always relative to the upper-left corner of the window.</source>
        </trans-unit>
        <trans-unit id="4946" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4947" translate="yes" xml:space="preserve">
          <source>Only windows that have the <bpt id="p1">**</bpt>CS_DBLCLKS<ept id="p1">**</ept> <bpt id="p2">[</bpt>WNDCLASS<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms633576)</ept> style can receive <ph id="ph1">`OnRButtonDblClk`</ph> calls.</source>
        </trans-unit>
        <trans-unit id="4948" translate="yes" xml:space="preserve">
          <source>This is the default for windows within the Microsoft Foundation Class Library.</source>
        </trans-unit>
        <trans-unit id="4949" translate="yes" xml:space="preserve">
          <source>Windows calls <ph id="ph1">`OnRButtonDblClk`</ph> when the user presses, releases, and then again presses the right mouse button within the system's double-click time limit.</source>
        </trans-unit>
        <trans-unit id="4950" translate="yes" xml:space="preserve">
          <source>Double-clicking the right mouse button actually generates four events: <bpt id="p1">[</bpt>WM_RBUTTONDOWN<ept id="p1">](#cwnd__onrbuttondown)</ept> and <bpt id="p2">[</bpt>WM_RBUTTONUP<ept id="p2">](#cwnd__onrbuttonup)</ept> messages, the <ph id="ph1">`OnRButtonDblClk`</ph> call, and another <ph id="ph2">`WM_RBUTTONUP`</ph> message when the button is released.</source>
        </trans-unit>
        <trans-unit id="4951" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4952" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4953" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4954" translate="yes" xml:space="preserve">
          <source>CWnd::OnRButtonDown</source>
        </trans-unit>
        <trans-unit id="4955" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user presses the right mouse button.</source>
        </trans-unit>
        <trans-unit id="4956" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4957" translate="yes" xml:space="preserve">
          <source>Indicates whether various virtual keys are down.</source>
        </trans-unit>
        <trans-unit id="4958" translate="yes" xml:space="preserve">
          <source>This parameter can be any combination of the following values:</source>
        </trans-unit>
        <trans-unit id="4959" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_CONTROL<ept id="p1">**</ept> Set if CTRL key is down.</source>
        </trans-unit>
        <trans-unit id="4960" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_LBUTTON<ept id="p1">**</ept> Set if left mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4961" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_MBUTTON<ept id="p1">**</ept> Set if middle mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4962" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_RBUTTON<ept id="p1">**</ept> Set if right mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4963" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_SHIFT<ept id="p1">**</ept> Set if SHIFT key is down.</source>
        </trans-unit>
        <trans-unit id="4964" translate="yes" xml:space="preserve">
          <source>Specifies the x and y coordinates of the cursor.</source>
        </trans-unit>
        <trans-unit id="4965" translate="yes" xml:space="preserve">
          <source>These coordinates are always relative to the upper-left corner of the window.</source>
        </trans-unit>
        <trans-unit id="4966" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4967" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4968" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4969" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4970" translate="yes" xml:space="preserve">
          <source>CWnd::OnRButtonUp</source>
        </trans-unit>
        <trans-unit id="4971" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user releases the right mouse button.</source>
        </trans-unit>
        <trans-unit id="4972" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4973" translate="yes" xml:space="preserve">
          <source>Indicates whether various virtual keys are down.</source>
        </trans-unit>
        <trans-unit id="4974" translate="yes" xml:space="preserve">
          <source>This parameter can be any combination of the following values:</source>
        </trans-unit>
        <trans-unit id="4975" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_CONTROL<ept id="p1">**</ept> Set if CTRL key is down.</source>
        </trans-unit>
        <trans-unit id="4976" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_LBUTTON<ept id="p1">**</ept> Set if left mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4977" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_MBUTTON<ept id="p1">**</ept> Set if middle mouse button is down.</source>
        </trans-unit>
        <trans-unit id="4978" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MK_SHIFT<ept id="p1">**</ept> Set if SHIFT key is down.</source>
        </trans-unit>
        <trans-unit id="4979" translate="yes" xml:space="preserve">
          <source>Specifies the x and y coordinates of the cursor.</source>
        </trans-unit>
        <trans-unit id="4980" translate="yes" xml:space="preserve">
          <source>These coordinates are always relative to the upper-left corner of the window.</source>
        </trans-unit>
        <trans-unit id="4981" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4982" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="4983" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="4984" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="4985" translate="yes" xml:space="preserve">
          <source>CWnd::OnRegisteredMouseWheel</source>
        </trans-unit>
        <trans-unit id="4986" translate="yes" xml:space="preserve">
          <source>The framework calls this member function as a user rotates the mouse wheel and encounters the wheel's next notch.</source>
        </trans-unit>
        <trans-unit id="4987" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="4988" translate="yes" xml:space="preserve">
          <source>Horizontal position of the pointer.</source>
        </trans-unit>
        <trans-unit id="4989" translate="yes" xml:space="preserve">
          <source>Vertical position of the pointer.</source>
        </trans-unit>
        <trans-unit id="4990" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="4991" translate="yes" xml:space="preserve">
          <source>Insignificant at this time.</source>
        </trans-unit>
        <trans-unit id="4992" translate="yes" xml:space="preserve">
          <source>Always zero.</source>
        </trans-unit>
        <trans-unit id="4993" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="4994" translate="yes" xml:space="preserve">
          <source>Unless overridden, <ph id="ph1">`OnRegisteredMouseWheel`</ph> routes the message to the appropriate window (the parent window with focus), and calls the <bpt id="p1">[</bpt>WM_MOUSEWHEEL<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645617)</ept> handler for that window.</source>
        </trans-unit>
        <trans-unit id="4995" translate="yes" xml:space="preserve">
          <source>Override this member function to provide your own message routing or to alter the mouse-wheel scrolling behavior.</source>
        </trans-unit>
        <trans-unit id="4996" translate="yes" xml:space="preserve">
          <source>handles messages for Windows 95/98 and Windows NT 3.51.</source>
        </trans-unit>
        <trans-unit id="4997" translate="yes" xml:space="preserve">
          <source>For Windows NT 4.0 message handling, use <bpt id="p1">[</bpt>OnMouseWheel<ept id="p1">](#cwnd__onmousewheel)</ept>.</source>
        </trans-unit>
        <trans-unit id="4998" translate="yes" xml:space="preserve">
          <source>CWnd::OnRenderAllFormats</source>
        </trans-unit>
        <trans-unit id="4999" translate="yes" xml:space="preserve">
          <source>The Clipboard owner's <ph id="ph1">`OnRenderAllFormats`</ph> member function is called by the framework when the owner application is being destroyed.</source>
        </trans-unit>
        <trans-unit id="5000" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5001" translate="yes" xml:space="preserve">
          <source>The Clipboard owner should render the data in all the formats it is capable of generating and pass a data handle for each format to the Clipboard by calling the <bpt id="p1">[</bpt>SetClipboardData<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms649051)</ept> Windows function.</source>
        </trans-unit>
        <trans-unit id="5002" translate="yes" xml:space="preserve">
          <source>This ensures that the Clipboard contains valid data even though the application that rendered the data is destroyed.</source>
        </trans-unit>
        <trans-unit id="5003" translate="yes" xml:space="preserve">
          <source>The application should call the <bpt id="p1">[</bpt>OpenClipboard<ept id="p1">](#cwnd__openclipboard)</ept> member function before calling the <bpt id="p2">[</bpt>SetClipboardData<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms649051)</ept> Windows function and call the <bpt id="p3">[</bpt>CloseClipboard<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms649035)</ept> Windows function afterward.</source>
        </trans-unit>
        <trans-unit id="5004" translate="yes" xml:space="preserve">
          <source>CWnd::OnRenderFormat</source>
        </trans-unit>
        <trans-unit id="5005" translate="yes" xml:space="preserve">
          <source>The Clipboard owner's <ph id="ph1">`OnRenderFormat`</ph> member function is called by the framework when a particular format with delayed rendering needs to be rendered.</source>
        </trans-unit>
        <trans-unit id="5006" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5007" translate="yes" xml:space="preserve">
          <source>Specifies the Clipboard format.</source>
        </trans-unit>
        <trans-unit id="5008" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5009" translate="yes" xml:space="preserve">
          <source>The receiver should render the data in that format and pass it to the Clipboard by calling the <bpt id="p1">[</bpt>SetClipboardData<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms649051)</ept> Windows function.</source>
        </trans-unit>
        <trans-unit id="5010" translate="yes" xml:space="preserve">
          <source>Do not call the <ph id="ph1">`OpenClipboard`</ph> member function or the <bpt id="p1">**</bpt>CloseClipboard<ept id="p1">**</ept> Windows function from within <ph id="ph2">`OnRenderFormat`</ph>.</source>
        </trans-unit>
        <trans-unit id="5011" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5012" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5013" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5014" translate="yes" xml:space="preserve">
          <source>CWnd::OnSessionChange</source>
        </trans-unit>
        <trans-unit id="5015" translate="yes" xml:space="preserve">
          <source>The framework calls this member function to notify an application of a change in session state.</source>
        </trans-unit>
        <trans-unit id="5016" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5017" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="5018" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="5019" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="5020" translate="yes" xml:space="preserve">
          <source>A status code describes the session state change.</source>
        </trans-unit>
        <trans-unit id="5021" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="5022" translate="yes" xml:space="preserve">
          <source>A session identifier.</source>
        </trans-unit>
        <trans-unit id="5023" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5024" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_WTSSESSION_CHANGE<ept id="p1">](http://msdn.microsoft.com/library/aa383828)</ept> notification, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="5025" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nSessionState`</ph> parameter specifies that a session is connected or disconnected from the console or a remote terminal, a user logged on or off, a session is locked or unlocked, or a session has changed to remote-controlled status.</source>
        </trans-unit>
        <trans-unit id="5026" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">`wParam`</ph> parameter of the the <bpt id="p1">[</bpt>WM_WTSSESSION_CHANGE<ept id="p1">](http://msdn.microsoft.com/library/aa383828)</ept> message.</source>
        </trans-unit>
        <trans-unit id="5027" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5028" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5029" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5030" translate="yes" xml:space="preserve">
          <source>CWnd::OnSetCursor</source>
        </trans-unit>
        <trans-unit id="5031" translate="yes" xml:space="preserve">
          <source>The framework calls this member function if mouse input is not captured and the mouse causes cursor movement within the <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="5032" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5033" translate="yes" xml:space="preserve">
          <source>Specifies a pointer to the window that contains the cursor.</source>
        </trans-unit>
        <trans-unit id="5034" translate="yes" xml:space="preserve">
          <source>The pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="5035" translate="yes" xml:space="preserve">
          <source>Specifies the <bpt id="p1">[</bpt>hit-test<ept id="p1">](#cwnd__onnchittest)</ept> area code.</source>
        </trans-unit>
        <trans-unit id="5036" translate="yes" xml:space="preserve">
          <source>The hit test determines the cursor's location.</source>
        </trans-unit>
        <trans-unit id="5037" translate="yes" xml:space="preserve">
          <source>Specifies the mouse message number.</source>
        </trans-unit>
        <trans-unit id="5038" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="5039" translate="yes" xml:space="preserve">
          <source>Nonzero to halt further processing, or 0 to continue.</source>
        </trans-unit>
        <trans-unit id="5040" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5041" translate="yes" xml:space="preserve">
          <source>The default implementation calls the parent window's <ph id="ph1">`OnSetCursor`</ph> before processing.</source>
        </trans-unit>
        <trans-unit id="5042" translate="yes" xml:space="preserve">
          <source>If the parent window returns <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, further processing is halted.</source>
        </trans-unit>
        <trans-unit id="5043" translate="yes" xml:space="preserve">
          <source>Calling the parent window gives the parent window control over the cursor's setting in a child window.</source>
        </trans-unit>
        <trans-unit id="5044" translate="yes" xml:space="preserve">
          <source>The default implementation sets the cursor to an arrow if it is not in the client area or to the registered-class cursor if it is.</source>
        </trans-unit>
        <trans-unit id="5045" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nHitTest`</ph> is <bpt id="p1">**</bpt>HTERROR<ept id="p1">**</ept> and <ph id="ph2">`message`</ph> is a mouse button-down message, the <bpt id="p2">**</bpt>MessageBeep<ept id="p2">**</ept> member function is called.</source>
        </trans-unit>
        <trans-unit id="5046" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`message`</ph> parameter is 0 when <ph id="ph2">`CWnd`</ph> enters menu mode.</source>
        </trans-unit>
        <trans-unit id="5047" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5048" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5049" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5050" translate="yes" xml:space="preserve">
          <source>CWnd::OnSetFocus</source>
        </trans-unit>
        <trans-unit id="5051" translate="yes" xml:space="preserve">
          <source>The framework calls this member function after gaining the input focus.</source>
        </trans-unit>
        <trans-unit id="5052" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5053" translate="yes" xml:space="preserve">
          <source>pOldWnd</source>
        </trans-unit>
        <trans-unit id="5054" translate="yes" xml:space="preserve">
          <source>Contains the <ph id="ph1">`CWnd`</ph> object that loses the input focus (may be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="5055" translate="yes" xml:space="preserve">
          <source>The pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="5056" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5057" translate="yes" xml:space="preserve">
          <source>To display a caret, <ph id="ph1">`CWnd`</ph> should call the appropriate caret functions at this point.</source>
        </trans-unit>
        <trans-unit id="5058" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5059" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5060" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5061" translate="yes" xml:space="preserve">
          <source>CWnd::OnSettingChange</source>
        </trans-unit>
        <trans-unit id="5062" translate="yes" xml:space="preserve">
          <source>The framework calls <ph id="ph1">`OnSettingChange`</ph> for all top-level windows when the Win32 SystemParametersInfo function changes a system-wide setting.</source>
        </trans-unit>
        <trans-unit id="5063" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5064" translate="yes" xml:space="preserve">
          <source>When the system sends the message as a result of a <bpt id="p1">**</bpt>SystemParametersInfo<ept id="p1">**</ept> call, this parameter is a flag that indicates the system parameter that was changed.</source>
        </trans-unit>
        <trans-unit id="5065" translate="yes" xml:space="preserve">
          <source>For a list of values, see <bpt id="p1">[</bpt>SystemParametersInfo<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724947)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="5066" translate="yes" xml:space="preserve">
          <source>When an application sends the message, this parameter must be 0.</source>
        </trans-unit>
        <trans-unit id="5067" translate="yes" xml:space="preserve">
          <source>Points to a string that specifies the name of the section that has changed.</source>
        </trans-unit>
        <trans-unit id="5068" translate="yes" xml:space="preserve">
          <source>(The string does not include the square brackets that enclose the section name.)</source>
        </trans-unit>
        <trans-unit id="5069" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5070" translate="yes" xml:space="preserve">
          <source>An application should send the message to all top-level windows when it makes changes to system parameters, and Windows will send the message if the user changes settings via the Control Panel.</source>
        </trans-unit>
        <trans-unit id="5071" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ON_WM_SETTINGCHANGE<ept id="p1">**</ept> message is similar to the <bpt id="p2">**</bpt>ON_WM_WININICHANGE<ept id="p2">**</ept> message, with the following difference:</source>
        </trans-unit>
        <trans-unit id="5072" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>ON_WM_SETTINGCHANGE<ept id="p1">**</ept> when running Windows NT 4.0 or newer, or under Windows 95/98.</source>
        </trans-unit>
        <trans-unit id="5073" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>ON_WININICHANGE<ept id="p1">**</ept> when running Windows NT 3.51 or older.</source>
        </trans-unit>
        <trans-unit id="5074" translate="yes" xml:space="preserve">
          <source>This message is now obsolete.</source>
        </trans-unit>
        <trans-unit id="5075" translate="yes" xml:space="preserve">
          <source>You should have only one of these macros in your message map.</source>
        </trans-unit>
        <trans-unit id="5076" translate="yes" xml:space="preserve">
          <source>To write a program that works for both Windows 95/98 and Windows NT 4.0, write a handler for <bpt id="p1">**</bpt>ON_WM_SETTINGCHANGE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="5077" translate="yes" xml:space="preserve">
          <source>Under Windows NT 3.51, your handler will be called by <ph id="ph1">`OnSettingChange`</ph> and <ph id="ph2">`uFlags`</ph> and will always be zero.</source>
        </trans-unit>
        <trans-unit id="5078" translate="yes" xml:space="preserve">
          <source>CWnd::OnShowWindow</source>
        </trans-unit>
        <trans-unit id="5079" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the <ph id="ph1">`CWnd`</ph> object is about to be hidden or shown.</source>
        </trans-unit>
        <trans-unit id="5080" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5081" translate="yes" xml:space="preserve">
          <source>Specifies whether a window is being shown.</source>
        </trans-unit>
        <trans-unit id="5082" translate="yes" xml:space="preserve">
          <source>It is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if the window is being shown; it is <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> if the window is being hidden.</source>
        </trans-unit>
        <trans-unit id="5083" translate="yes" xml:space="preserve">
          <source>Specifies the status of the window being shown.</source>
        </trans-unit>
        <trans-unit id="5084" translate="yes" xml:space="preserve">
          <source>It is 0 if the message is sent because of a <ph id="ph1">`ShowWindow`</ph> member function call; otherwise <ph id="ph2">`nStatus`</ph> is one of the following:</source>
        </trans-unit>
        <trans-unit id="5085" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SW_PARENTCLOSING<ept id="p1">**</ept> Parent window is closing (being made iconic) or a pop-up window is being hidden.</source>
        </trans-unit>
        <trans-unit id="5086" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SW_PARENTOPENING<ept id="p1">**</ept> Parent window is opening (being displayed) or a pop-up window is being shown.</source>
        </trans-unit>
        <trans-unit id="5087" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5088" translate="yes" xml:space="preserve">
          <source>A window is hidden or shown when the <ph id="ph1">`ShowWindow`</ph> member function is called, when an overlapped window is maximized or restored, or when an overlapped or pop-up window is closed (made iconic) or opened (displayed on the screen).</source>
        </trans-unit>
        <trans-unit id="5089" translate="yes" xml:space="preserve">
          <source>When an overlapped window is closed, all pop-up windows associated with that window are hidden.</source>
        </trans-unit>
        <trans-unit id="5090" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5091" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5092" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5093" translate="yes" xml:space="preserve">
          <source>CWnd::OnSize</source>
        </trans-unit>
        <trans-unit id="5094" translate="yes" xml:space="preserve">
          <source>The framework calls this member function after the window's size has changed.</source>
        </trans-unit>
        <trans-unit id="5095" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5096" translate="yes" xml:space="preserve">
          <source>Specifies the type of resizing requested.</source>
        </trans-unit>
        <trans-unit id="5097" translate="yes" xml:space="preserve">
          <source>This parameter can be one of the following values:</source>
        </trans-unit>
        <trans-unit id="5098" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SIZE_MAXIMIZED<ept id="p1">**</ept> Window has been maximized.</source>
        </trans-unit>
        <trans-unit id="5099" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SIZE_MINIMIZED<ept id="p1">**</ept> Window has been minimized.</source>
        </trans-unit>
        <trans-unit id="5100" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SIZE_RESTORED<ept id="p1">**</ept> Window has been resized, but neither <bpt id="p2">**</bpt>SIZE_MINIMIZED<ept id="p2">**</ept> nor <bpt id="p3">**</bpt>SIZE_MAXIMIZED<ept id="p3">**</ept> applies.</source>
        </trans-unit>
        <trans-unit id="5101" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SIZE_MAXHIDE<ept id="p1">**</ept> Message is sent to all pop-up windows when some other window is maximized.</source>
        </trans-unit>
        <trans-unit id="5102" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SIZE_MAXSHOW<ept id="p1">**</ept> Message is sent to all pop-up windows when some other window has been restored to its former size.</source>
        </trans-unit>
        <trans-unit id="5103" translate="yes" xml:space="preserve">
          <source>Specifies the new width of the client area.</source>
        </trans-unit>
        <trans-unit id="5104" translate="yes" xml:space="preserve">
          <source>Specifies the new height of the client area.</source>
        </trans-unit>
        <trans-unit id="5105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5106" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">[</bpt>SetScrollPos<ept id="p1">](#cwnd__setscrollpos)</ept> or <bpt id="p2">[</bpt>MoveWindow<ept id="p2">](#cwnd__movewindow)</ept> member function is called for a child window from <ph id="ph1">`OnSize`</ph>, the <ph id="ph2">`bRedraw`</ph> parameter of <ph id="ph3">`SetScrollPos`</ph> or <ph id="ph4">`MoveWindow`</ph> should be nonzero to cause the <ph id="ph5">`CWnd`</ph> to be repainted.</source>
        </trans-unit>
        <trans-unit id="5107" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5108" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5109" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5110" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="5111" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#109</source>
        </trans-unit>
        <trans-unit id="5112" translate="yes" xml:space="preserve">
          <source>CWnd::OnSizeClipboard</source>
        </trans-unit>
        <trans-unit id="5113" translate="yes" xml:space="preserve">
          <source>The Clipboard owner's <ph id="ph1">`OnSizeClipboard`</ph> member function is called by the Clipboard viewer when the Clipboard contains data with the <ph id="ph2">`CF_OWNERDISPLAY`</ph> attribute and the size of the client area of the Clipboard-viewer window has changed.</source>
        </trans-unit>
        <trans-unit id="5114" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5115" translate="yes" xml:space="preserve">
          <source>Identifies the Clipboard-application window.</source>
        </trans-unit>
        <trans-unit id="5116" translate="yes" xml:space="preserve">
          <source>The pointer may be temporary and should not be stored.</source>
        </trans-unit>
        <trans-unit id="5117" translate="yes" xml:space="preserve">
          <source>hRect</source>
        </trans-unit>
        <trans-unit id="5118" translate="yes" xml:space="preserve">
          <source>Identifies a global memory object.</source>
        </trans-unit>
        <trans-unit id="5119" translate="yes" xml:space="preserve">
          <source>The memory object contains a RECT data structure that specifies the area for the Clipboard owner to paint.</source>
        </trans-unit>
        <trans-unit id="5120" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OnSizeClipboard`</ph> member function is called with a null rectangle (0,0,0,0) as the new size when the Clipboard application is about to be destroyed or minimized.</source>
        </trans-unit>
        <trans-unit id="5122" translate="yes" xml:space="preserve">
          <source>This permits the Clipboard owner to free its display resources.</source>
        </trans-unit>
        <trans-unit id="5123" translate="yes" xml:space="preserve">
          <source>Within <ph id="ph1">`OnSizeClipboard`</ph>, an application must use the <bpt id="p1">[</bpt>GlobalLock<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa366584)</ept> Windows function to lock the memory that contains the RECT data structure.</source>
        </trans-unit>
        <trans-unit id="5124" translate="yes" xml:space="preserve">
          <source>Have the application unlock that memory with the <bpt id="p1">[</bpt>GlobalUnlock<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa366595)</ept> Windows function before it yields or returns control.</source>
        </trans-unit>
        <trans-unit id="5125" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5126" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5127" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5128" translate="yes" xml:space="preserve">
          <source>CWnd::OnSizing</source>
        </trans-unit>
        <trans-unit id="5129" translate="yes" xml:space="preserve">
          <source>The framework calls this member function to indicate that the user is resizing the rectangle.</source>
        </trans-unit>
        <trans-unit id="5130" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5131" translate="yes" xml:space="preserve">
          <source>The edge of window to be moved.</source>
        </trans-unit>
        <trans-unit id="5132" translate="yes" xml:space="preserve">
          <source>Address of the <bpt id="p1">[</bpt>CRect<ept id="p1">](../../atl-mfc-shared/reference/crect-class.md)</ept> or <bpt id="p2">[</bpt>RECT structure<ept id="p2">](../../mfc/reference/rect-structure1.md)</ept> that will contain the item's coordinates.</source>
        </trans-unit>
        <trans-unit id="5133" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5134" translate="yes" xml:space="preserve">
          <source>By processing this message, an application can monitor the size and position of the drag rectangle and, if needed, change its size or position.</source>
        </trans-unit>
        <trans-unit id="5135" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5136" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5137" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5138" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="5139" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#110</source>
        </trans-unit>
        <trans-unit id="5140" translate="yes" xml:space="preserve">
          <source>CWnd::OnSpoolerStatus</source>
        </trans-unit>
        <trans-unit id="5141" translate="yes" xml:space="preserve">
          <source>The framework calls this member function from Print Manager whenever a job is added to or removed from the Print Manager queue.</source>
        </trans-unit>
        <trans-unit id="5142" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5143" translate="yes" xml:space="preserve">
          <source>Specifies the <bpt id="p1">**</bpt>SP_JOBSTATUS<ept id="p1">**</ept> flag.</source>
        </trans-unit>
        <trans-unit id="5144" translate="yes" xml:space="preserve">
          <source>nJobs</source>
        </trans-unit>
        <trans-unit id="5145" translate="yes" xml:space="preserve">
          <source>Specifies the number of jobs remaining in the Print Manager queue.</source>
        </trans-unit>
        <trans-unit id="5146" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5147" translate="yes" xml:space="preserve">
          <source>This call is for informational purposes only.</source>
        </trans-unit>
        <trans-unit id="5148" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5149" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5150" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5151" translate="yes" xml:space="preserve">
          <source>CWnd::OnStyleChanged</source>
        </trans-unit>
        <trans-unit id="5152" translate="yes" xml:space="preserve">
          <source>The framework calls this member function after the <bpt id="p1">[</bpt>SetWindowLong<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633591)</ept> function has changed one or more of the window's styles.</source>
        </trans-unit>
        <trans-unit id="5153" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5154" translate="yes" xml:space="preserve">
          <source>Specifies whether the window's extended or nonextended styles have changed.</source>
        </trans-unit>
        <trans-unit id="5155" translate="yes" xml:space="preserve">
          <source>This parameter can be a combination of the following values:</source>
        </trans-unit>
        <trans-unit id="5156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GWL_EXSTYLE<ept id="p1">**</ept> The window's extended styles have changed.</source>
        </trans-unit>
        <trans-unit id="5157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GWL_STYLE<ept id="p1">**</ept> The window's nonextended styles have changed.</source>
        </trans-unit>
        <trans-unit id="5158" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>STYLESTRUCT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632607)</ept> structure that contains the new styles for the window.</source>
        </trans-unit>
        <trans-unit id="5159" translate="yes" xml:space="preserve">
          <source>An application can examine the styles, but it can not change them.</source>
        </trans-unit>
        <trans-unit id="5160" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5161" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5162" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5163" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5164" translate="yes" xml:space="preserve">
          <source>CWnd::OnStyleChanging</source>
        </trans-unit>
        <trans-unit id="5165" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the <bpt id="p1">[</bpt>SetWindowLong<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633591)</ept> function is about to change one or more of the window's styles.</source>
        </trans-unit>
        <trans-unit id="5166" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5167" translate="yes" xml:space="preserve">
          <source>Specifies whether the window's extended or nonextended styles have changed.</source>
        </trans-unit>
        <trans-unit id="5168" translate="yes" xml:space="preserve">
          <source>This parameter can be a combination of the following values:</source>
        </trans-unit>
        <trans-unit id="5169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GWL_EXSTYLE<ept id="p1">**</ept> The window's extended styles have changed.</source>
        </trans-unit>
        <trans-unit id="5170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GWL_STYLE<ept id="p1">**</ept> The window's nonextended styles have changed.</source>
        </trans-unit>
        <trans-unit id="5171" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>STYLESTRUCT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632607)</ept> structure that contains the new styles for the window.</source>
        </trans-unit>
        <trans-unit id="5172" translate="yes" xml:space="preserve">
          <source>An application can examine the styles and change them.</source>
        </trans-unit>
        <trans-unit id="5173" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5174" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5175" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5176" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5177" translate="yes" xml:space="preserve">
          <source>CWnd::OnSysChar</source>
        </trans-unit>
        <trans-unit id="5178" translate="yes" xml:space="preserve">
          <source>The framework calls this member function if <ph id="ph1">`CWnd`</ph> has the input focus and the <bpt id="p1">[</bpt>WM_SYSKEYUP<ept id="p1">](#cwnd__onsyskeyup)</ept> and <bpt id="p2">[</bpt>WM_SYSKEYDOWN<ept id="p2">](#cwnd__onsyskeydown)</ept> messages are translated.</source>
        </trans-unit>
        <trans-unit id="5179" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5180" translate="yes" xml:space="preserve">
          <source>Specifies the ASCII-character key code of a Control-menu key.</source>
        </trans-unit>
        <trans-unit id="5181" translate="yes" xml:space="preserve">
          <source>Specifies the repeat count (the number of times the keystroke is repeated as a result of the user holding down the key).</source>
        </trans-unit>
        <trans-unit id="5182" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nFlags`</ph> parameter can have these values:</source>
        </trans-unit>
        <trans-unit id="5183" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="5184" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="5185" translate="yes" xml:space="preserve">
          <source>0-15</source>
        </trans-unit>
        <trans-unit id="5186" translate="yes" xml:space="preserve">
          <source>Specifies the repeat count.</source>
        </trans-unit>
        <trans-unit id="5187" translate="yes" xml:space="preserve">
          <source>The value is the number of times the keystroke is repeated as a result of the user holding down the key..</source>
        </trans-unit>
        <trans-unit id="5188" translate="yes" xml:space="preserve">
          <source>16-23</source>
        </trans-unit>
        <trans-unit id="5189" translate="yes" xml:space="preserve">
          <source>Specifies the scan code.</source>
        </trans-unit>
        <trans-unit id="5190" translate="yes" xml:space="preserve">
          <source>The value depends on the original equipment manufacturer (OEM)</source>
        </trans-unit>
        <trans-unit id="5191" translate="yes" xml:space="preserve">
          <source>24</source>
        </trans-unit>
        <trans-unit id="5192" translate="yes" xml:space="preserve">
          <source>Specifies whether the key is an extended key, such as the right-hand ALT and CTRL keys that appear on an enhanced 101- or 102-key keyboard.</source>
        </trans-unit>
        <trans-unit id="5193" translate="yes" xml:space="preserve">
          <source>The value is 1 if it is an extended key; otherwise, it is 0.</source>
        </trans-unit>
        <trans-unit id="5194" translate="yes" xml:space="preserve">
          <source>25-28</source>
        </trans-unit>
        <trans-unit id="5195" translate="yes" xml:space="preserve">
          <source>Used internally by Windows.</source>
        </trans-unit>
        <trans-unit id="5196" translate="yes" xml:space="preserve">
          <source>29</source>
        </trans-unit>
        <trans-unit id="5197" translate="yes" xml:space="preserve">
          <source>Specifies the context code.</source>
        </trans-unit>
        <trans-unit id="5198" translate="yes" xml:space="preserve">
          <source>The value is 1 if the ALT key is held down while the key is pressed; otherwise, the value is 0.</source>
        </trans-unit>
        <trans-unit id="5199" translate="yes" xml:space="preserve">
          <source>30</source>
        </trans-unit>
        <trans-unit id="5200" translate="yes" xml:space="preserve">
          <source>Specifies the previous key state.</source>
        </trans-unit>
        <trans-unit id="5201" translate="yes" xml:space="preserve">
          <source>The value is 1 if the key is down before the message is sent, or it is 0 if the key is up.</source>
        </trans-unit>
        <trans-unit id="5202" translate="yes" xml:space="preserve">
          <source>31</source>
        </trans-unit>
        <trans-unit id="5203" translate="yes" xml:space="preserve">
          <source>Specifies the transition state.</source>
        </trans-unit>
        <trans-unit id="5204" translate="yes" xml:space="preserve">
          <source>The value is 1 if the key is being released, or it is 0 if the key is being pressed.</source>
        </trans-unit>
        <trans-unit id="5205" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5206" translate="yes" xml:space="preserve">
          <source>It specifies the virtual key code of the Control-menu key.</source>
        </trans-unit>
        <trans-unit id="5207" translate="yes" xml:space="preserve">
          <source>(For a list of of standard virtual key codes, see Winuser.h)</source>
        </trans-unit>
        <trans-unit id="5208" translate="yes" xml:space="preserve">
          <source>When the context code is 0, <ph id="ph1">`WM_SYSCHAR`</ph> can pass the <bpt id="p1">[</bpt>WM_SYSCHAR<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646357)</ept> message to the <bpt id="p2">[</bpt>TranslateAccelerator<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms646373)</ept> Windows function, which will handle it as though it were a normal key message instead of a system character-key.</source>
        </trans-unit>
        <trans-unit id="5209" translate="yes" xml:space="preserve">
          <source>This allows accelerator keys to be used with the active window even if the active window does not have the input focus.</source>
        </trans-unit>
        <trans-unit id="5210" translate="yes" xml:space="preserve">
          <source>For IBM Enhanced 101- and 102-key keyboards, enhanced keys are the right ALT and the right CTRL keys on the main section of the keyboard; the INS, DEL, HOME, END, PAGE UP, PAGE DOWN, and arrow keys in the clusters to the left of the numeric keypad; and the slash (/) and ENTER keys in the numeric keypad.</source>
        </trans-unit>
        <trans-unit id="5211" translate="yes" xml:space="preserve">
          <source>Some other keyboards may support the extended-key bit in <ph id="ph1">`nFlags`</ph>.</source>
        </trans-unit>
        <trans-unit id="5212" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5213" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5214" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5215" translate="yes" xml:space="preserve">
          <source>CWnd::OnSysColorChange</source>
        </trans-unit>
        <trans-unit id="5216" translate="yes" xml:space="preserve">
          <source>The framework calls this member function for all top-level windows when a change is made in the system color setting.</source>
        </trans-unit>
        <trans-unit id="5217" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5218" translate="yes" xml:space="preserve">
          <source>Windows calls <ph id="ph1">`OnSysColorChange`</ph> for any window that is affected by a system color change.</source>
        </trans-unit>
        <trans-unit id="5219" translate="yes" xml:space="preserve">
          <source>Applications that have brushes that use the existing system colors should delete those brushes and re-create them with the new system colors.</source>
        </trans-unit>
        <trans-unit id="5220" translate="yes" xml:space="preserve">
          <source>CWnd::OnSysCommand</source>
        </trans-unit>
        <trans-unit id="5221" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user selects a command from the Control menu, or when the user selects the Maximize or the Minimize button.</source>
        </trans-unit>
        <trans-unit id="5222" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5223" translate="yes" xml:space="preserve">
          <source>Specifies the type of system command requested.</source>
        </trans-unit>
        <trans-unit id="5224" translate="yes" xml:space="preserve">
          <source>This parameter can be any one of the following values:</source>
        </trans-unit>
        <trans-unit id="5225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SC_CLOSE<ept id="p1">**</ept> Close the <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="5226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SC_HOTKEY<ept id="p1">**</ept> Activate the <ph id="ph1">`CWnd`</ph> object associated with the application-specified hot key.</source>
        </trans-unit>
        <trans-unit id="5227" translate="yes" xml:space="preserve">
          <source>The low-order word of <ph id="ph1">`lParam`</ph> identifies the <ph id="ph2">`HWND`</ph> of the window to activate.</source>
        </trans-unit>
        <trans-unit id="5228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SC_HSCROLL<ept id="p1">**</ept> Scroll horizontally.</source>
        </trans-unit>
        <trans-unit id="5229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SC_KEYMENU<ept id="p1">**</ept> Retrieve a menu through a keystroke.</source>
        </trans-unit>
        <trans-unit id="5230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SC_MAXIMIZE<ept id="p1">**</ept> (or <bpt id="p2">**</bpt>SC_ZOOM<ept id="p2">**</ept>)   Maximize the <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="5231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SC_MINIMIZE<ept id="p1">**</ept> (or <bpt id="p2">**</bpt>SC_ICON<ept id="p2">**</ept>)   Minimize the <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="5232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SC_MOUSEMENU<ept id="p1">**</ept> Retrieve a menu through a mouse click.</source>
        </trans-unit>
        <trans-unit id="5233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SC_MOVE<ept id="p1">**</ept> Move the <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="5234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SC_NEXTWINDOW<ept id="p1">**</ept> Move to the next window.</source>
        </trans-unit>
        <trans-unit id="5235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SC_PREVWINDOW<ept id="p1">**</ept> Move to the previous window.</source>
        </trans-unit>
        <trans-unit id="5236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SC_RESTORE<ept id="p1">**</ept> Restore window to normal position and size.</source>
        </trans-unit>
        <trans-unit id="5237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SC_SCREENSAVE<ept id="p1">**</ept> Executes the screen-saver application specified in the [boot] section of the SYSTEM.INI file.</source>
        </trans-unit>
        <trans-unit id="5238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SC_SIZE<ept id="p1">**</ept> Size the <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="5239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SC_TASKLIST<ept id="p1">**</ept> Execute or activate the Windows Task Manager application.</source>
        </trans-unit>
        <trans-unit id="5240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SC_VSCROLL<ept id="p1">**</ept> Scroll vertically.</source>
        </trans-unit>
        <trans-unit id="5241" translate="yes" xml:space="preserve">
          <source>If a Control-menu command is chosen with the mouse, <ph id="ph1">`lParam`</ph> contains the cursor coordinates.</source>
        </trans-unit>
        <trans-unit id="5242" translate="yes" xml:space="preserve">
          <source>The low-order word contains the x coordinate, and the high-order word contains the y coordinate.</source>
        </trans-unit>
        <trans-unit id="5243" translate="yes" xml:space="preserve">
          <source>Otherwise this parameter is not used.</source>
        </trans-unit>
        <trans-unit id="5244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SC_HOTKEY<ept id="p1">**</ept> Activate the window associated with the application-specified hot key.</source>
        </trans-unit>
        <trans-unit id="5245" translate="yes" xml:space="preserve">
          <source>The low-order word of <ph id="ph1">`lParam`</ph> identifies the window to activate.</source>
        </trans-unit>
        <trans-unit id="5246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SC_SCREENSAVE<ept id="p1">**</ept> Execute the screen-save application specified in the Desktop section of Control Panel.</source>
        </trans-unit>
        <trans-unit id="5247" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5248" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`OnSysCommand`</ph> carries out the Control-menu request for the predefined actions specified in the preceding table.</source>
        </trans-unit>
        <trans-unit id="5249" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">`WM_SYSCOMMAND`</ph> messages, the four low-order bits of the <ph id="ph2">`nID`</ph> parameter are used internally by Windows.</source>
        </trans-unit>
        <trans-unit id="5250" translate="yes" xml:space="preserve">
          <source>When an application tests the value of <ph id="ph1">`nID`</ph>, it must combine the value 0xFFF0 with the <ph id="ph2">`nID`</ph> value by using the bitwise-AND operator to obtain the correct result.</source>
        </trans-unit>
        <trans-unit id="5251" translate="yes" xml:space="preserve">
          <source>The menu items in a Control menu can be modified with the <ph id="ph1">`GetSystemMenu`</ph>, <ph id="ph2">`AppendMenu`</ph>, <ph id="ph3">`InsertMenu`</ph>, and <ph id="ph4">`ModifyMenu`</ph> member functions.</source>
        </trans-unit>
        <trans-unit id="5252" translate="yes" xml:space="preserve">
          <source>Applications that modify the Control menu must process <ph id="ph1">`WM_SYSCOMMAND`</ph> messages, and any <ph id="ph2">`WM_SYSCOMMAND`</ph> messages not handled by the application must be passed on to <ph id="ph3">`OnSysCommand`</ph>.</source>
        </trans-unit>
        <trans-unit id="5253" translate="yes" xml:space="preserve">
          <source>Any command values added by an application must be processed by the application and cannot be passed to <ph id="ph1">`OnSysCommand`</ph>.</source>
        </trans-unit>
        <trans-unit id="5254" translate="yes" xml:space="preserve">
          <source>An application can carry out any system command at any time by passing a <ph id="ph1">`WM_SYSCOMMAND`</ph> message to <ph id="ph2">`OnSysCommand`</ph>.</source>
        </trans-unit>
        <trans-unit id="5255" translate="yes" xml:space="preserve">
          <source>Accelerator (shortcut) keystrokes that are defined to select items from the Control menu are translated into <ph id="ph1">`OnSysCommand`</ph> calls; all other accelerator keystrokes are translated into <bpt id="p1">[</bpt>WM_COMMAND<ept id="p1">](#cwnd__oncommand)</ept> messages.</source>
        </trans-unit>
        <trans-unit id="5256" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5257" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5258" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5259" translate="yes" xml:space="preserve">
          <source>CWnd::OnSysDeadChar</source>
        </trans-unit>
        <trans-unit id="5260" translate="yes" xml:space="preserve">
          <source>The framework calls this member function if the <ph id="ph1">`CWnd`</ph> object has the input focus when the <bpt id="p1">[</bpt>OnSysKeyUp<ept id="p1">](#cwnd__onsyskeyup)</ept> or <bpt id="p2">[</bpt>OnSysKeyDown<ept id="p2">](#cwnd__onsyskeydown)</ept> member function is called.</source>
        </trans-unit>
        <trans-unit id="5261" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5262" translate="yes" xml:space="preserve">
          <source>Specifies the dead-key character value.</source>
        </trans-unit>
        <trans-unit id="5263" translate="yes" xml:space="preserve">
          <source>Specifies the repeat count.</source>
        </trans-unit>
        <trans-unit id="5264" translate="yes" xml:space="preserve">
          <source>Specifies the scan code, key-transition code, previous key state, and context code, as shown in the following list:</source>
        </trans-unit>
        <trans-unit id="5265" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="5266" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="5267" translate="yes" xml:space="preserve">
          <source>0–7</source>
        </trans-unit>
        <trans-unit id="5268" translate="yes" xml:space="preserve">
          <source>Scan code (OEM-dependent value).</source>
        </trans-unit>
        <trans-unit id="5269" translate="yes" xml:space="preserve">
          <source>Low byte of high-order word.</source>
        </trans-unit>
        <trans-unit id="5270" translate="yes" xml:space="preserve">
          <source>8</source>
        </trans-unit>
        <trans-unit id="5271" translate="yes" xml:space="preserve">
          <source>Extended key, such as a function key or a key on the numeric keypad (1 if it is an extended key; otherwise 0).</source>
        </trans-unit>
        <trans-unit id="5272" translate="yes" xml:space="preserve">
          <source>9–10</source>
        </trans-unit>
        <trans-unit id="5273" translate="yes" xml:space="preserve">
          <source>Not used.</source>
        </trans-unit>
        <trans-unit id="5274" translate="yes" xml:space="preserve">
          <source>11–12</source>
        </trans-unit>
        <trans-unit id="5275" translate="yes" xml:space="preserve">
          <source>Used internally by Windows.</source>
        </trans-unit>
        <trans-unit id="5276" translate="yes" xml:space="preserve">
          <source>13</source>
        </trans-unit>
        <trans-unit id="5277" translate="yes" xml:space="preserve">
          <source>Context code (1 if the ALT key is held down while the key is pressed; otherwise 0).</source>
        </trans-unit>
        <trans-unit id="5278" translate="yes" xml:space="preserve">
          <source>14</source>
        </trans-unit>
        <trans-unit id="5279" translate="yes" xml:space="preserve">
          <source>Previous key state (1 if the key is down before the call, 0 if the key is up).</source>
        </trans-unit>
        <trans-unit id="5280" translate="yes" xml:space="preserve">
          <source>15</source>
        </trans-unit>
        <trans-unit id="5281" translate="yes" xml:space="preserve">
          <source>Transition state (1 if the key is being released, 0 if the key is being pressed).</source>
        </trans-unit>
        <trans-unit id="5282" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5283" translate="yes" xml:space="preserve">
          <source>It specifies the character value of a dead key.</source>
        </trans-unit>
        <trans-unit id="5284" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5285" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5286" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5287" translate="yes" xml:space="preserve">
          <source>CWnd::OnSysKeyDown</source>
        </trans-unit>
        <trans-unit id="5288" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`CWnd`</ph> object has the input focus, the <ph id="ph2">`OnSysKeyDown`</ph> member function is called by the framework when the user holds down the ALT key and then presses another key.</source>
        </trans-unit>
        <trans-unit id="5289" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5290" translate="yes" xml:space="preserve">
          <source>Specifies the virtual key code of the key being pressed.</source>
        </trans-unit>
        <trans-unit id="5291" translate="yes" xml:space="preserve">
          <source>For a list of of standard virtual key codes, see Winuser.h</source>
        </trans-unit>
        <trans-unit id="5292" translate="yes" xml:space="preserve">
          <source>Specifies the repeat count.</source>
        </trans-unit>
        <trans-unit id="5293" translate="yes" xml:space="preserve">
          <source>Specifies the scan code, key-transition code, previous key state, and context code, as shown in the following list:</source>
        </trans-unit>
        <trans-unit id="5294" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="5295" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="5296" translate="yes" xml:space="preserve">
          <source>0–7</source>
        </trans-unit>
        <trans-unit id="5297" translate="yes" xml:space="preserve">
          <source>Scan code (OEM-dependent value).</source>
        </trans-unit>
        <trans-unit id="5298" translate="yes" xml:space="preserve">
          <source>Low byte of high-order word.</source>
        </trans-unit>
        <trans-unit id="5299" translate="yes" xml:space="preserve">
          <source>8</source>
        </trans-unit>
        <trans-unit id="5300" translate="yes" xml:space="preserve">
          <source>Extended key, such as a function key or a key on the numeric keypad (1 if it is an extended key; otherwise 0).</source>
        </trans-unit>
        <trans-unit id="5301" translate="yes" xml:space="preserve">
          <source>9–10</source>
        </trans-unit>
        <trans-unit id="5302" translate="yes" xml:space="preserve">
          <source>Not used.</source>
        </trans-unit>
        <trans-unit id="5303" translate="yes" xml:space="preserve">
          <source>11–12</source>
        </trans-unit>
        <trans-unit id="5304" translate="yes" xml:space="preserve">
          <source>Used internally by Windows.</source>
        </trans-unit>
        <trans-unit id="5305" translate="yes" xml:space="preserve">
          <source>13</source>
        </trans-unit>
        <trans-unit id="5306" translate="yes" xml:space="preserve">
          <source>Context code (1 if the ALT key is held down while the key is pressed, 0 otherwise).</source>
        </trans-unit>
        <trans-unit id="5307" translate="yes" xml:space="preserve">
          <source>14</source>
        </trans-unit>
        <trans-unit id="5308" translate="yes" xml:space="preserve">
          <source>Previous key state (1 if the key is down before the message is sent, 0 if the key is up).</source>
        </trans-unit>
        <trans-unit id="5309" translate="yes" xml:space="preserve">
          <source>15</source>
        </trans-unit>
        <trans-unit id="5310" translate="yes" xml:space="preserve">
          <source>Transition state (1 if the key is being released, 0 if the key is being pressed).</source>
        </trans-unit>
        <trans-unit id="5311" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`OnSysKeyDown`</ph> calls, the key-transition bit (bit 15) is 0.</source>
        </trans-unit>
        <trans-unit id="5312" translate="yes" xml:space="preserve">
          <source>The context-code bit (bit 13) is 1 if the ALT key is down while the key is pressed; it is 0 if the message is sent to the active window because no window has the input focus.</source>
        </trans-unit>
        <trans-unit id="5313" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5314" translate="yes" xml:space="preserve">
          <source>If no window currently has the input focus, the active window's <ph id="ph1">`OnSysKeyDown`</ph> member function is called.</source>
        </trans-unit>
        <trans-unit id="5315" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CWnd`</ph> object that receives the message can distinguish between these two contexts by checking the context code in <ph id="ph2">`nFlags`</ph>.</source>
        </trans-unit>
        <trans-unit id="5316" translate="yes" xml:space="preserve">
          <source>When the context code is 0, the <ph id="ph1">`WM_SYSKEYDOWN`</ph> message received by <ph id="ph2">`OnSysKeyDown`</ph> can be passed to the <bpt id="p1">[</bpt>TranslateAccelerator<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646373)</ept> Windows function, which will handle it as though it were a normal key message instead of a system-key message.</source>
        </trans-unit>
        <trans-unit id="5317" translate="yes" xml:space="preserve">
          <source>This allows accelerator keys to be used with the active window even if the active window does not have the input focus.</source>
        </trans-unit>
        <trans-unit id="5318" translate="yes" xml:space="preserve">
          <source>Because of auto-repeat, more than one <ph id="ph1">`OnSysKeyDown`</ph> call may occur before the <bpt id="p1">[</bpt>WM_SYSKEYUP<ept id="p1">](#cwnd__onsyskeyup)</ept> message is received.</source>
        </trans-unit>
        <trans-unit id="5319" translate="yes" xml:space="preserve">
          <source>The previous key state (bit 14) can be used to determine whether the <ph id="ph1">`OnSysKeyDown`</ph> call indicates the first down transition or a repeated down transition.</source>
        </trans-unit>
        <trans-unit id="5320" translate="yes" xml:space="preserve">
          <source>For IBM Enhanced 101- and 102-key keyboards, enhanced keys are the right ALT and the right CTRL keys on the main section of the keyboard; the INS, DEL, HOME, END, PAGE UP, PAGE DOWN, and arrow keys in the clusters to the left of the numeric keypad; and the slash (/) and ENTER keys in the numeric keypad.</source>
        </trans-unit>
        <trans-unit id="5321" translate="yes" xml:space="preserve">
          <source>Some other keyboards may support the extended-key bit in <ph id="ph1">`nFlags`</ph>.</source>
        </trans-unit>
        <trans-unit id="5322" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5323" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5324" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5325" translate="yes" xml:space="preserve">
          <source>CWnd::OnSysKeyUp</source>
        </trans-unit>
        <trans-unit id="5326" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`CWnd`</ph> object has the focus, the <ph id="ph2">`OnSysKeyUp`</ph> member function is called by the framework when the user releases a key that was pressed while the ALT key was held down.</source>
        </trans-unit>
        <trans-unit id="5327" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5328" translate="yes" xml:space="preserve">
          <source>Specifies the virtual key code of the key being pressed.</source>
        </trans-unit>
        <trans-unit id="5329" translate="yes" xml:space="preserve">
          <source>For a list of of standard virtual key codes, see Winuser.h</source>
        </trans-unit>
        <trans-unit id="5330" translate="yes" xml:space="preserve">
          <source>Specifies the repeat count.</source>
        </trans-unit>
        <trans-unit id="5331" translate="yes" xml:space="preserve">
          <source>Specifies the scan code, key-transition code, previous key state, and context code, as shown in the following list:</source>
        </trans-unit>
        <trans-unit id="5332" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="5333" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="5334" translate="yes" xml:space="preserve">
          <source>0–7</source>
        </trans-unit>
        <trans-unit id="5335" translate="yes" xml:space="preserve">
          <source>Scan code (OEM-dependent value).</source>
        </trans-unit>
        <trans-unit id="5336" translate="yes" xml:space="preserve">
          <source>Low byte of high-order word.</source>
        </trans-unit>
        <trans-unit id="5337" translate="yes" xml:space="preserve">
          <source>8</source>
        </trans-unit>
        <trans-unit id="5338" translate="yes" xml:space="preserve">
          <source>Extended key, such as a function key or a key on the numeric keypad (1 if it is an extended key; otherwise 0).</source>
        </trans-unit>
        <trans-unit id="5339" translate="yes" xml:space="preserve">
          <source>9–10</source>
        </trans-unit>
        <trans-unit id="5340" translate="yes" xml:space="preserve">
          <source>Not used.</source>
        </trans-unit>
        <trans-unit id="5341" translate="yes" xml:space="preserve">
          <source>11–12</source>
        </trans-unit>
        <trans-unit id="5342" translate="yes" xml:space="preserve">
          <source>Used internally by Windows.</source>
        </trans-unit>
        <trans-unit id="5343" translate="yes" xml:space="preserve">
          <source>13</source>
        </trans-unit>
        <trans-unit id="5344" translate="yes" xml:space="preserve">
          <source>Context code (1 if the ALT key is held down while the key is pressed, 0 otherwise).</source>
        </trans-unit>
        <trans-unit id="5345" translate="yes" xml:space="preserve">
          <source>14</source>
        </trans-unit>
        <trans-unit id="5346" translate="yes" xml:space="preserve">
          <source>Previous key state (1 if the key is down before the message is sent, 0 if the key is up).</source>
        </trans-unit>
        <trans-unit id="5347" translate="yes" xml:space="preserve">
          <source>15</source>
        </trans-unit>
        <trans-unit id="5348" translate="yes" xml:space="preserve">
          <source>Transition state (1 if the key is being released, 0 if the key is being pressed).</source>
        </trans-unit>
        <trans-unit id="5349" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`OnSysKeyUp`</ph> calls, the key-transition bit (bit 15) is 1.</source>
        </trans-unit>
        <trans-unit id="5350" translate="yes" xml:space="preserve">
          <source>The context-code bit (bit 13) is 1 if the ALT key is down while the key is pressed; it is 0 if the message is sent to the active window because no window has the input focus.</source>
        </trans-unit>
        <trans-unit id="5351" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5352" translate="yes" xml:space="preserve">
          <source>If no window currently has the input focus, the active window's <ph id="ph1">`OnSysKeyUp`</ph> member function is called.</source>
        </trans-unit>
        <trans-unit id="5353" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CWnd`</ph> object that receives the call can distinguish between these two contexts by checking the context code in <ph id="ph2">`nFlags`</ph>.</source>
        </trans-unit>
        <trans-unit id="5354" translate="yes" xml:space="preserve">
          <source>When the context code is 0, the <ph id="ph1">`WM_SYSKEYUP`</ph> message received by <ph id="ph2">`OnSysKeyUp`</ph> can be passed to the <bpt id="p1">[</bpt>TranslateAccelerator<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646373)</ept> Windows function, which will handle it as though it were a normal key message instead of a system-key message.</source>
        </trans-unit>
        <trans-unit id="5355" translate="yes" xml:space="preserve">
          <source>This allows accelerator (shortcut) keys to be used with the active window even if the active window does not have the input focus.</source>
        </trans-unit>
        <trans-unit id="5356" translate="yes" xml:space="preserve">
          <source>For IBM Enhanced 101- and 102-key keyboards, enhanced keys are the right ALT and the right CTRL keys on the main section of the keyboard; the INS, DEL, HOME, END, PAGE UP, PAGE DOWN, and arrow keys in the clusters to the left of the numeric keypad; and the slash (/) and ENTER keys in the numeric keypad.</source>
        </trans-unit>
        <trans-unit id="5357" translate="yes" xml:space="preserve">
          <source>Some other keyboards may support the extended-key bit in <ph id="ph1">`nFlags`</ph>.</source>
        </trans-unit>
        <trans-unit id="5358" translate="yes" xml:space="preserve">
          <source>For non-U.S. Enhanced 102-key keyboards, the right ALT key is handled as the CTRL+ALT key combination.</source>
        </trans-unit>
        <trans-unit id="5359" translate="yes" xml:space="preserve">
          <source>The following shows the sequence of messages and calls that result when the user presses and releases this key:</source>
        </trans-unit>
        <trans-unit id="5360" translate="yes" xml:space="preserve">
          <source>Sequence</source>
        </trans-unit>
        <trans-unit id="5361" translate="yes" xml:space="preserve">
          <source>Function Accessed</source>
        </trans-unit>
        <trans-unit id="5362" translate="yes" xml:space="preserve">
          <source>Message Passed</source>
        </trans-unit>
        <trans-unit id="5363" translate="yes" xml:space="preserve">
          <source>1.</source>
        </trans-unit>
        <trans-unit id="5364" translate="yes" xml:space="preserve">
          <source>WM_KEYDOWN</source>
        </trans-unit>
        <trans-unit id="5365" translate="yes" xml:space="preserve">
          <source>VK_CONTROL</source>
        </trans-unit>
        <trans-unit id="5366" translate="yes" xml:space="preserve">
          <source>2.</source>
        </trans-unit>
        <trans-unit id="5367" translate="yes" xml:space="preserve">
          <source>WM_KEYDOWN</source>
        </trans-unit>
        <trans-unit id="5368" translate="yes" xml:space="preserve">
          <source>VK_MENU</source>
        </trans-unit>
        <trans-unit id="5369" translate="yes" xml:space="preserve">
          <source>3.</source>
        </trans-unit>
        <trans-unit id="5370" translate="yes" xml:space="preserve">
          <source>WM_KEYUP</source>
        </trans-unit>
        <trans-unit id="5371" translate="yes" xml:space="preserve">
          <source>VK_CONTROL</source>
        </trans-unit>
        <trans-unit id="5372" translate="yes" xml:space="preserve">
          <source>4.</source>
        </trans-unit>
        <trans-unit id="5373" translate="yes" xml:space="preserve">
          <source>WM_SYSKEYUP</source>
        </trans-unit>
        <trans-unit id="5374" translate="yes" xml:space="preserve">
          <source>VK_MENU</source>
        </trans-unit>
        <trans-unit id="5375" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5376" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5377" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5378" translate="yes" xml:space="preserve">
          <source>CWnd::OnTCard</source>
        </trans-unit>
        <trans-unit id="5379" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user clicks an authorable button.</source>
        </trans-unit>
        <trans-unit id="5380" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5381" translate="yes" xml:space="preserve">
          <source>Indicates the action the user has taken.</source>
        </trans-unit>
        <trans-unit id="5382" translate="yes" xml:space="preserve">
          <source>This parameter can be one of these values:</source>
        </trans-unit>
        <trans-unit id="5383" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IDABORT<ept id="p1">**</ept> The user clicked an authorable Abort button.</source>
        </trans-unit>
        <trans-unit id="5384" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IDCANCEL<ept id="p1">**</ept> The user clicked an authorable Cancel button.</source>
        </trans-unit>
        <trans-unit id="5385" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IDCLOSE<ept id="p1">**</ept> The user closed the training card.</source>
        </trans-unit>
        <trans-unit id="5386" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IDHELP<ept id="p1">**</ept> The user clicked an authorable Windows Help button.</source>
        </trans-unit>
        <trans-unit id="5387" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IDIGNORE<ept id="p1">**</ept> The user clicked an authorable Ignore button.</source>
        </trans-unit>
        <trans-unit id="5388" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IDOK<ept id="p1">**</ept> The user clicked an authorable OK button.</source>
        </trans-unit>
        <trans-unit id="5389" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IDNO<ept id="p1">**</ept> The user clicked an authorable No button.</source>
        </trans-unit>
        <trans-unit id="5390" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IDRETRY<ept id="p1">**</ept> The user clicked an authorable Retry button.</source>
        </trans-unit>
        <trans-unit id="5391" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HELP_TCARD_DATA<ept id="p1">**</ept> The user clicked an authorable button.</source>
        </trans-unit>
        <trans-unit id="5392" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dwActionData`</ph> parameter contains a long integer specified by the help author.</source>
        </trans-unit>
        <trans-unit id="5393" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HELP_TCARD_NEXT<ept id="p1">**</ept> The user clicked an authorable Next button.</source>
        </trans-unit>
        <trans-unit id="5394" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HELP_TCARD_OTHER_CALLER<ept id="p1">**</ept> Another application has requested training cards.</source>
        </trans-unit>
        <trans-unit id="5395" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IDYES<ept id="p1">**</ept> The user clicked an authorable Yes button.</source>
        </trans-unit>
        <trans-unit id="5396" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`idAction`</ph> specifies <bpt id="p1">**</bpt>HELP_TCARD_DATA<ept id="p1">**</ept>, this parameter is a long integer specified by the help author.</source>
        </trans-unit>
        <trans-unit id="5397" translate="yes" xml:space="preserve">
          <source>Otherwise, this parameter is zero.</source>
        </trans-unit>
        <trans-unit id="5398" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5399" translate="yes" xml:space="preserve">
          <source>This function is called only when an application has initiated a training card with Windows Help.</source>
        </trans-unit>
        <trans-unit id="5400" translate="yes" xml:space="preserve">
          <source>An application initiates a training card by specifying the <bpt id="p1">**</bpt>HELP_TCARD<ept id="p1">**</ept> command in a call to the <bpt id="p2">[</bpt>WinHelp<ept id="p2">](../../mfc/reference/cwinapp-class.md#cwinapp__winhelp)</ept> function.</source>
        </trans-unit>
        <trans-unit id="5401" translate="yes" xml:space="preserve">
          <source>CWnd::OnTimeChange</source>
        </trans-unit>
        <trans-unit id="5402" translate="yes" xml:space="preserve">
          <source>The framework calls this member function after the system time is changed.</source>
        </trans-unit>
        <trans-unit id="5403" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5404" translate="yes" xml:space="preserve">
          <source>Have any application that changes the system time send this message to all top-level windows.</source>
        </trans-unit>
        <trans-unit id="5405" translate="yes" xml:space="preserve">
          <source>To send the <ph id="ph1">`WM_TIMECHANGE`</ph> message to all top-level windows, an application can use the <bpt id="p1">[</bpt>SendMessage<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms644950)</ept> Windows function with its <bpt id="p2">*</bpt>hwnd<ept id="p2">*</ept> parameter set to <bpt id="p3">**</bpt>HWND_BROADCAST<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="5406" translate="yes" xml:space="preserve">
          <source>CWnd::OnTimer</source>
        </trans-unit>
        <trans-unit id="5407" translate="yes" xml:space="preserve">
          <source>The framework calls this member function after each interval specified in the <bpt id="p1">[</bpt>SetTimer<ept id="p1">](#cwnd__settimer)</ept> member function used to install a timer.</source>
        </trans-unit>
        <trans-unit id="5408" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5409" translate="yes" xml:space="preserve">
          <source>Specifies the identifier of the timer.</source>
        </trans-unit>
        <trans-unit id="5410" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5411" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>DispatchMessage<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms644934)</ept> Windows function sends a <bpt id="p2">[</bpt>WM_TIMER<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms644902)</ept> message when no other messages are in the application's message queue.</source>
        </trans-unit>
        <trans-unit id="5412" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5413" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5414" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5415" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="5416" translate="yes" xml:space="preserve">
          <source>See the example in <bpt id="p1">[</bpt>CWnd::SetTimer<ept id="p1">](#cwnd__settimer)</ept>.</source>
        </trans-unit>
        <trans-unit id="5417" translate="yes" xml:space="preserve">
          <source>CWnd::OnToolHitTest</source>
        </trans-unit>
        <trans-unit id="5418" translate="yes" xml:space="preserve">
          <source>The framework calls this member function to detemine whether a point is in the bounding rectangle of the specified tool.</source>
        </trans-unit>
        <trans-unit id="5419" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5420" translate="yes" xml:space="preserve">
          <source>Specifies the x- and y-coordinate of the cursor.</source>
        </trans-unit>
        <trans-unit id="5421" translate="yes" xml:space="preserve">
          <source>These coordinates are always relative to the upper-left corner of the window</source>
        </trans-unit>
        <trans-unit id="5422" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>TOOLINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb760256)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="5423" translate="yes" xml:space="preserve">
          <source>The following structure values are set by default:</source>
        </trans-unit>
        <trans-unit id="5424" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>hwnd<ept id="p1">*</ept><ph id="ph1"> = `m_hWnd`</ph> Handle to a window</source>
        </trans-unit>
        <trans-unit id="5425" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>(UINT)hWndChild<ept id="p1">**</ept> Handle to a child window</source>
        </trans-unit>
        <trans-unit id="5426" translate="yes" xml:space="preserve">
          <source>&amp;#124;= <bpt id="p1">**</bpt>TTF_IDISHWND<ept id="p1">**</ept> Handle of the tool</source>
        </trans-unit>
        <trans-unit id="5427" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>LPSTR_TEXTCALLBACK<ept id="p1">**</ept> Pointer to the string that is to be displayed in the specified window</source>
        </trans-unit>
        <trans-unit id="5428" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="5429" translate="yes" xml:space="preserve">
          <source>If the tooltip control was found, the window control ID.</source>
        </trans-unit>
        <trans-unit id="5430" translate="yes" xml:space="preserve">
          <source>If the tooltip control was not found, -1.</source>
        </trans-unit>
        <trans-unit id="5431" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5432" translate="yes" xml:space="preserve">
          <source>If the point is in the rectangle, it retrieves information about the tool.</source>
        </trans-unit>
        <trans-unit id="5433" translate="yes" xml:space="preserve">
          <source>If the area with which the tooltip is associated is not a button, <ph id="ph1">`OnToolHitTest`</ph> sets the structure flags to <bpt id="p1">**</bpt>TTF_NOTBUTTON<ept id="p1">**</ept> and <bpt id="p2">**</bpt>TTF_CENTERTIP<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="5434" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">`OnToolHitTest`</ph> to provide different information than the default provides.</source>
        </trans-unit>
        <trans-unit id="5435" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>TOOLINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb760256)</ept>, in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>, for more information about the structure.</source>
        </trans-unit>
        <trans-unit id="5436" translate="yes" xml:space="preserve">
          <source>CWnd::OnTouchInput</source>
        </trans-unit>
        <trans-unit id="5437" translate="yes" xml:space="preserve">
          <source>Process single input from Windows touch.</source>
        </trans-unit>
        <trans-unit id="5438" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5439" translate="yes" xml:space="preserve">
          <source>Point where screen has been touched (in the client coordinates).</source>
        </trans-unit>
        <trans-unit id="5440" translate="yes" xml:space="preserve">
          <source>Number of touch input.</source>
        </trans-unit>
        <trans-unit id="5441" translate="yes" xml:space="preserve">
          <source>Total number of touch inputs.</source>
        </trans-unit>
        <trans-unit id="5442" translate="yes" xml:space="preserve">
          <source>Pointer to TOUCHINPUT structure.</source>
        </trans-unit>
        <trans-unit id="5443" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="5444" translate="yes" xml:space="preserve">
          <source>if the application processes Windows touch input; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="5445" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5446" translate="yes" xml:space="preserve">
          <source>CWnd::OnTouchInputs</source>
        </trans-unit>
        <trans-unit id="5447" translate="yes" xml:space="preserve">
          <source>Processes inputs from Windows touch.</source>
        </trans-unit>
        <trans-unit id="5448" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5449" translate="yes" xml:space="preserve">
          <source>Total number of Windows touch inputs.</source>
        </trans-unit>
        <trans-unit id="5450" translate="yes" xml:space="preserve">
          <source>Array of TOUCHINPUT.</source>
        </trans-unit>
        <trans-unit id="5451" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="5452" translate="yes" xml:space="preserve">
          <source>if application processes Windows touch inputs; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="5453" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5454" translate="yes" xml:space="preserve">
          <source>CWnd::OnUniChar</source>
        </trans-unit>
        <trans-unit id="5455" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when a key is pressed.</source>
        </trans-unit>
        <trans-unit id="5456" translate="yes" xml:space="preserve">
          <source>That is, the current window has the keyboard focus and a <bpt id="p1">[</bpt>WM_KEYDOWN<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646280)</ept> message is translated by the <bpt id="p2">[</bpt>TranslateMessage<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms644955)</ept> function.</source>
        </trans-unit>
        <trans-unit id="5457" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5458" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="5459" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="5460" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="5461" translate="yes" xml:space="preserve">
          <source>Specifies the character code of the pressed key.</source>
        </trans-unit>
        <trans-unit id="5462" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="5463" translate="yes" xml:space="preserve">
          <source>Specifies the repeat count for the current message.</source>
        </trans-unit>
        <trans-unit id="5464" translate="yes" xml:space="preserve">
          <source>The value is the number of times the keystroke is autorepeated as a result of the user holding down the key.</source>
        </trans-unit>
        <trans-unit id="5465" translate="yes" xml:space="preserve">
          <source>If the keystroke is held long enough, multiple messages are sent.</source>
        </trans-unit>
        <trans-unit id="5466" translate="yes" xml:space="preserve">
          <source>However, the repeat count is not cumulative.</source>
        </trans-unit>
        <trans-unit id="5467" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="5468" translate="yes" xml:space="preserve">
          <source>Flags that specify the scan code, extended key, context code, previous key state, and transition state, as shown in the following table:</source>
        </trans-unit>
        <trans-unit id="5469" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>0-7:<ept id="p1">**</ept> Specifies the scan code.</source>
        </trans-unit>
        <trans-unit id="5470" translate="yes" xml:space="preserve">
          <source>The value depends on the original equipment manufacturer (OEM).</source>
        </trans-unit>
        <trans-unit id="5471" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>8:<ept id="p1">**</ept> Specifies an extended key, such as the right-hand ALT and CTRL keys that appear on an enhanced 101 or 102-key keyboard.</source>
        </trans-unit>
        <trans-unit id="5472" translate="yes" xml:space="preserve">
          <source>The flag is 1 if the key is an extended key; otherwise, it is 0.</source>
        </trans-unit>
        <trans-unit id="5473" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>9-12:<ept id="p1">**</ept>  Used internally by Windows.</source>
        </trans-unit>
        <trans-unit id="5474" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>13:<ept id="p1">**</ept>  Specifies the context code.</source>
        </trans-unit>
        <trans-unit id="5475" translate="yes" xml:space="preserve">
          <source>The flag is 1 if the ALT key is held down while the key is pressed; otherwise, the value is 0.</source>
        </trans-unit>
        <trans-unit id="5476" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>14:<ept id="p1">**</ept>  Specifies the previous key state.</source>
        </trans-unit>
        <trans-unit id="5477" translate="yes" xml:space="preserve">
          <source>The flag is 1 if the key is down before the message is sent, or 0 if the key is up.</source>
        </trans-unit>
        <trans-unit id="5478" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>15:<ept id="p1">**</ept>  Specifies the transition state.</source>
        </trans-unit>
        <trans-unit id="5479" translate="yes" xml:space="preserve">
          <source>The flag is 1 if the key is being released, or 0 if the key is being pressed.</source>
        </trans-unit>
        <trans-unit id="5480" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5481" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_UNICHAR<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646288)</ept> notification, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="5482" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>WM_UNICHAR<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646288)</ept> message is designed to send or post Unicode characters to ANSI windows.</source>
        </trans-unit>
        <trans-unit id="5483" translate="yes" xml:space="preserve">
          <source>It is equivalent to the <bpt id="p1">[</bpt>WM_CHAR<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646276)</ept> message, but uses Unicode Transformation Format-32 encoding (UTF-32), whereas the <bpt id="p2">[</bpt>WM_CHAR<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms646276)</ept> message uses UTF-16.</source>
        </trans-unit>
        <trans-unit id="5484" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5485" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5486" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5487" translate="yes" xml:space="preserve">
          <source>CWnd::OnUnInitMenuPopup</source>
        </trans-unit>
        <trans-unit id="5488" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when a drop-down menu or submenu has been destroyed.</source>
        </trans-unit>
        <trans-unit id="5489" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5490" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="5491" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="5492" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="5493" translate="yes" xml:space="preserve">
          <source>Pointer to the <bpt id="p1">[</bpt>CMenu<ept id="p1">](../../mfc/reference/cmenu-class.md)</ept> object that represents the menu or submenu.</source>
        </trans-unit>
        <trans-unit id="5494" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="5495" translate="yes" xml:space="preserve">
          <source>The menu that was destroyed.</source>
        </trans-unit>
        <trans-unit id="5496" translate="yes" xml:space="preserve">
          <source>Currently, it can only be the window menu, <ph id="ph1">`MF_SYSMENU`</ph>.</source>
        </trans-unit>
        <trans-unit id="5497" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5498" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_UNINITMENUPOPUP<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647614)</ept> notification, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="5499" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5500" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5501" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5502" translate="yes" xml:space="preserve">
          <source>CWnd::OnUpdateUIState</source>
        </trans-unit>
        <trans-unit id="5503" translate="yes" xml:space="preserve">
          <source>Called to to change the user interface (UI) state for the specified window and all its child windows.</source>
        </trans-unit>
        <trans-unit id="5504" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5505" translate="yes" xml:space="preserve">
          <source>Specifies the action to be performed.</source>
        </trans-unit>
        <trans-unit id="5506" translate="yes" xml:space="preserve">
          <source>Can be one of the following values:</source>
        </trans-unit>
        <trans-unit id="5507" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UIS_CLEAR<ept id="p1">**</ept> The UI state element (specified by <ph id="ph1">`nUIElement`</ph>) should be hidden.</source>
        </trans-unit>
        <trans-unit id="5508" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UIS_INITIALIZE<ept id="p1">**</ept> The UI state element (specified by <ph id="ph1">`nUIElement`</ph>) should be changed based on the last input event.</source>
        </trans-unit>
        <trans-unit id="5509" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">**</bpt>Remarks<ept id="p1">**</ept> section of <bpt id="p2">[</bpt>WM_UPDATEISTATE<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms646361)</ept>.</source>
        </trans-unit>
        <trans-unit id="5510" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UIS_SET<ept id="p1">**</ept> The UI state element (specified by <ph id="ph1">`nUIElement`</ph>) should be visible.</source>
        </trans-unit>
        <trans-unit id="5511" translate="yes" xml:space="preserve">
          <source>Specifies which UI state elements are affected or the style of the control.</source>
        </trans-unit>
        <trans-unit id="5512" translate="yes" xml:space="preserve">
          <source>Can be one of the following values:</source>
        </trans-unit>
        <trans-unit id="5513" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UISF_HIDEACCEL<ept id="p1">**</ept> Keyboard accelerators.</source>
        </trans-unit>
        <trans-unit id="5514" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UISF_HIDEFOCUS<ept id="p1">**</ept> Focus indicators.</source>
        </trans-unit>
        <trans-unit id="5515" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UISF_ACTIVE Windows XP:<ept id="p1">**</ept> A control should be drawn in the style used for active controls.</source>
        </trans-unit>
        <trans-unit id="5516" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5517" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the <bpt id="p1">[</bpt>WM_UPDATEUISTATE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646361)</ept> message, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="5518" translate="yes" xml:space="preserve">
          <source>CWnd::OnUserChanged</source>
        </trans-unit>
        <trans-unit id="5519" translate="yes" xml:space="preserve">
          <source>The framework calls this member for all windows after the user has logged on or off.</source>
        </trans-unit>
        <trans-unit id="5520" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5521" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_USERCHANGED<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632651)</ept> notification message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="5522" translate="yes" xml:space="preserve">
          <source>When the user logs on or off, the operating system updates user-specific settings.</source>
        </trans-unit>
        <trans-unit id="5523" translate="yes" xml:space="preserve">
          <source>The system sends this message immediately after updating the settings.</source>
        </trans-unit>
        <trans-unit id="5524" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5525" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5526" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5527" translate="yes" xml:space="preserve">
          <source>CWnd::OnVKeyToItem</source>
        </trans-unit>
        <trans-unit id="5528" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`CWnd`</ph> object owns a list box with the <bpt id="p1">[</bpt>LBS_WANTKEYBOARDINPUT<ept id="p1">](../../mfc/reference/list-box-styles.md)</ept> style, the list box will send the <ph id="ph2">`WM_VKEYTOITEM`</ph> message in response to a <ph id="ph3">`WM_KEYDOWN`</ph> message.</source>
        </trans-unit>
        <trans-unit id="5529" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5530" translate="yes" xml:space="preserve">
          <source>Specifies the virtual key code of the key that the user pressed.</source>
        </trans-unit>
        <trans-unit id="5531" translate="yes" xml:space="preserve">
          <source>For a list of of standard virtual key codes, see Winuser.h</source>
        </trans-unit>
        <trans-unit id="5532" translate="yes" xml:space="preserve">
          <source>Specifies a pointer to the list box.</source>
        </trans-unit>
        <trans-unit id="5533" translate="yes" xml:space="preserve">
          <source>The pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="5534" translate="yes" xml:space="preserve">
          <source>Specifies the current caret position.</source>
        </trans-unit>
        <trans-unit id="5535" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="5536" translate="yes" xml:space="preserve">
          <source>Specifies the action that the application performed in response to the message.</source>
        </trans-unit>
        <trans-unit id="5537" translate="yes" xml:space="preserve">
          <source>A return value of –2 indicates that the application handled all aspects of selecting the item and requires no further action by the list box.</source>
        </trans-unit>
        <trans-unit id="5538" translate="yes" xml:space="preserve">
          <source>A return value of –1 indicates that the list box should perform the default action in response to the keystroke.</source>
        </trans-unit>
        <trans-unit id="5539" translate="yes" xml:space="preserve">
          <source>A return value of 0 or greater specifies the zero-based index of an item in the list box and indicates that the list box should perform the default action for the keystroke on the given item.</source>
        </trans-unit>
        <trans-unit id="5540" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5541" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework only for list boxes that have the <bpt id="p1">[</bpt>LBS_HASSTRINGS<ept id="p1">](../../mfc/reference/list-box-styles.md)</ept> style.</source>
        </trans-unit>
        <trans-unit id="5542" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5543" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5544" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5545" translate="yes" xml:space="preserve">
          <source>CWnd::OnVScroll</source>
        </trans-unit>
        <trans-unit id="5546" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user clicks the window's vertical scroll bar.</source>
        </trans-unit>
        <trans-unit id="5547" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5548" translate="yes" xml:space="preserve">
          <source>Specifies a scroll-bar code that indicates the user's scrolling request.</source>
        </trans-unit>
        <trans-unit id="5549" translate="yes" xml:space="preserve">
          <source>This parameter can be one of the following:</source>
        </trans-unit>
        <trans-unit id="5550" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_BOTTOM<ept id="p1">**</ept> Scroll to bottom.</source>
        </trans-unit>
        <trans-unit id="5551" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_ENDSCROLL<ept id="p1">**</ept> End scroll.</source>
        </trans-unit>
        <trans-unit id="5552" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_LINEDOWN<ept id="p1">**</ept> Scroll one line down.</source>
        </trans-unit>
        <trans-unit id="5553" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_LINEUP<ept id="p1">**</ept> Scroll one line up.</source>
        </trans-unit>
        <trans-unit id="5554" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_PAGEDOWN<ept id="p1">**</ept> Scroll one page down.</source>
        </trans-unit>
        <trans-unit id="5555" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_PAGEUP<ept id="p1">**</ept> Scroll one page up.</source>
        </trans-unit>
        <trans-unit id="5556" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_THUMBPOSITION<ept id="p1">**</ept> Scroll to the absolute position.</source>
        </trans-unit>
        <trans-unit id="5557" translate="yes" xml:space="preserve">
          <source>The current position is provided in <ph id="ph1">`nPos`</ph>.</source>
        </trans-unit>
        <trans-unit id="5558" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_THUMBTRACK<ept id="p1">**</ept> Drag scroll box to specified position.</source>
        </trans-unit>
        <trans-unit id="5559" translate="yes" xml:space="preserve">
          <source>The current position is provided in <ph id="ph1">`nPos`</ph>.</source>
        </trans-unit>
        <trans-unit id="5560" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_TOP<ept id="p1">**</ept> Scroll to top.</source>
        </trans-unit>
        <trans-unit id="5561" translate="yes" xml:space="preserve">
          <source>Contains the current scroll-box position if the scroll-bar code is <bpt id="p1">**</bpt>SB_THUMBPOSITION<ept id="p1">**</ept> or <bpt id="p2">**</bpt>SB_THUMBTRACK<ept id="p2">**</ept>; otherwise not used.</source>
        </trans-unit>
        <trans-unit id="5562" translate="yes" xml:space="preserve">
          <source>Depending on the initial scroll range, <ph id="ph1">`nPos`</ph> may be negative and should be cast to an <ph id="ph2">`int`</ph> if necessary.</source>
        </trans-unit>
        <trans-unit id="5563" translate="yes" xml:space="preserve">
          <source>If the scroll message came from a scroll-bar control, contains a pointer to the control.</source>
        </trans-unit>
        <trans-unit id="5564" translate="yes" xml:space="preserve">
          <source>If the user clicked a window's scroll bar, this parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="5565" translate="yes" xml:space="preserve">
          <source>The pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="5566" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5567" translate="yes" xml:space="preserve">
          <source>typically is used by applications that give some feedback while the scroll box is being dragged.</source>
        </trans-unit>
        <trans-unit id="5568" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`OnVScroll`</ph> scrolls the contents of the <ph id="ph2">`CWnd`</ph> object, it must also reset the position of the scroll box with the <bpt id="p1">[</bpt>SetScrollPos<ept id="p1">](#cwnd__setscrollpos)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="5569" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5570" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5571" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5572" translate="yes" xml:space="preserve">
          <source>CWnd::OnVScrollClipboard</source>
        </trans-unit>
        <trans-unit id="5573" translate="yes" xml:space="preserve">
          <source>The Clipboard owner's <ph id="ph1">`OnVScrollClipboard`</ph> member function is called by the Clipboard viewer when the Clipboard data has the <ph id="ph2">`CF_OWNERDISPLAY`</ph> format and there is an event in the Clipboard viewer's vertical scroll bar.</source>
        </trans-unit>
        <trans-unit id="5574" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5575" translate="yes" xml:space="preserve">
          <source>Specifies a pointer to a Clipboard-viewer window.</source>
        </trans-unit>
        <trans-unit id="5576" translate="yes" xml:space="preserve">
          <source>The pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="5577" translate="yes" xml:space="preserve">
          <source>Specifies one of the following scroll-bar values:</source>
        </trans-unit>
        <trans-unit id="5578" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_BOTTOM<ept id="p1">**</ept> Scroll to bottom.</source>
        </trans-unit>
        <trans-unit id="5579" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_ENDSCROLL<ept id="p1">**</ept> End scroll.</source>
        </trans-unit>
        <trans-unit id="5580" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_LINEDOWN<ept id="p1">**</ept> Scroll one line down.</source>
        </trans-unit>
        <trans-unit id="5581" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_LINEUP<ept id="p1">**</ept> Scroll one line up.</source>
        </trans-unit>
        <trans-unit id="5582" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_PAGEDOWN<ept id="p1">**</ept> Scroll one page down.</source>
        </trans-unit>
        <trans-unit id="5583" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_PAGEUP<ept id="p1">**</ept> Scroll one page up.</source>
        </trans-unit>
        <trans-unit id="5584" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_THUMBPOSITION<ept id="p1">**</ept> Scroll to the absolute position.</source>
        </trans-unit>
        <trans-unit id="5585" translate="yes" xml:space="preserve">
          <source>The current position is provided in <ph id="ph1">`nPos`</ph>.</source>
        </trans-unit>
        <trans-unit id="5586" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_TOP<ept id="p1">**</ept> Scroll to top.</source>
        </trans-unit>
        <trans-unit id="5587" translate="yes" xml:space="preserve">
          <source>Contains the scroll-box position if the scroll-bar code is <bpt id="p1">**</bpt>SB_THUMBPOSITION<ept id="p1">**</ept>; otherwise <ph id="ph1">`nPos`</ph> is not used.</source>
        </trans-unit>
        <trans-unit id="5588" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5589" translate="yes" xml:space="preserve">
          <source>The owner should scroll the Clipboard image, invalidate the appropriate section, and update the scroll-bar values.</source>
        </trans-unit>
        <trans-unit id="5590" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5591" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5592" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5593" translate="yes" xml:space="preserve">
          <source>CWnd::OnWindowMaximizedChanged</source>
        </trans-unit>
        <trans-unit id="5594" translate="yes" xml:space="preserve">
          <source>The framework calls this member when the current window is maximized, and the window is composed by the Desktop Window Manager (DWM).</source>
        </trans-unit>
        <trans-unit id="5595" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5596" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="5597" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="5598" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="5599" translate="yes" xml:space="preserve">
          <source>if the current window is maximized, and <ph id="ph1">`false`</ph> if it is not.</source>
        </trans-unit>
        <trans-unit id="5600" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5601" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_DWMWINDOWMAXIMIZEDCHANGE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd388201)</ept> notification message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="5602" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5603" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5604" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5605" translate="yes" xml:space="preserve">
          <source>CWnd::OnWindowPosChanged</source>
        </trans-unit>
        <trans-unit id="5606" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the size, position, or Z-order has changed as a result of a call to the <bpt id="p1">[</bpt>SetWindowPos<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633545)</ept> member function or another window-management function.</source>
        </trans-unit>
        <trans-unit id="5607" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5608" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>WINDOWPOS<ept id="p1">](../../mfc/reference/windowpos-structure1.md)</ept> data structure that contains information about the window's new size and position.</source>
        </trans-unit>
        <trans-unit id="5609" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5610" translate="yes" xml:space="preserve">
          <source>The default implementation sends the <bpt id="p1">[</bpt>WM_SIZE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632646)</ept> and <bpt id="p2">[</bpt>WM_MOVE<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms632631)</ept> messages to the window.</source>
        </trans-unit>
        <trans-unit id="5611" translate="yes" xml:space="preserve">
          <source>These messages are not sent if an application handles the <ph id="ph1">`OnWindowPosChanged`</ph> call without calling its base class.</source>
        </trans-unit>
        <trans-unit id="5612" translate="yes" xml:space="preserve">
          <source>It is more efficient to perform any move or size change processing during the call to <ph id="ph1">`OnWindowPosChanged`</ph> without calling its base class.</source>
        </trans-unit>
        <trans-unit id="5613" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5614" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5615" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5616" translate="yes" xml:space="preserve">
          <source>CWnd::OnWindowPosChanging</source>
        </trans-unit>
        <trans-unit id="5617" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the size, position, or Z-order is about to change as a result of a call to the <bpt id="p1">[</bpt>SetWindowPos<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633545)</ept> member function or another window-management function.</source>
        </trans-unit>
        <trans-unit id="5618" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5619" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`WINDOWPOS`</ph> data structure that contains information about the window's new size and position.</source>
        </trans-unit>
        <trans-unit id="5620" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5621" translate="yes" xml:space="preserve">
          <source>An application can prevent changes to the window by setting or clearing the appropriate bits in the <bpt id="p1">**</bpt>flags<ept id="p1">**</ept> member of the <bpt id="p2">[</bpt>WINDOWPOS<ept id="p2">](../../mfc/reference/windowpos-structure1.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="5622" translate="yes" xml:space="preserve">
          <source>For a window with the <bpt id="p1">[</bpt>WS_OVERLAPPED<ept id="p1">](../../mfc/reference/window-styles.md)</ept> or <bpt id="p2">[</bpt>WS_THICKFRAME<ept id="p2">](../../mfc/reference/window-styles.md)</ept> style, the default implementation sends a <bpt id="p3">[</bpt>WM_GETMINMAXINFO<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms632626)</ept> message to the window.</source>
        </trans-unit>
        <trans-unit id="5623" translate="yes" xml:space="preserve">
          <source>This is done to validate the new size and position of the window and to enforce the <bpt id="p1">**</bpt>CS_BYTEALIGNCLIENT<ept id="p1">**</ept> and <bpt id="p2">**</bpt>CS_BYTEALIGN<ept id="p2">**</ept> client styles.</source>
        </trans-unit>
        <trans-unit id="5624" translate="yes" xml:space="preserve">
          <source>An application can override this functionality by not calling its base class.</source>
        </trans-unit>
        <trans-unit id="5625" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5626" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5627" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5628" translate="yes" xml:space="preserve">
          <source>CWnd::OnWinIniChange</source>
        </trans-unit>
        <trans-unit id="5629" translate="yes" xml:space="preserve">
          <source>The framework calls this member function after a change has been made to the Windows initialization file, WIN.INI.</source>
        </trans-unit>
        <trans-unit id="5630" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5631" translate="yes" xml:space="preserve">
          <source>Points to a string that specifies the name of the section that has changed.</source>
        </trans-unit>
        <trans-unit id="5632" translate="yes" xml:space="preserve">
          <source>(The string does not include the square brackets that enclose the section name.)</source>
        </trans-unit>
        <trans-unit id="5633" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5634" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>SystemParametersInfo<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724947)</ept> Windows function calls <ph id="ph1">`OnWinIniChange`</ph> after an application uses the function to change a setting in the WIN.INI file.</source>
        </trans-unit>
        <trans-unit id="5635" translate="yes" xml:space="preserve">
          <source>To send the <ph id="ph1">`WM_WININICHANGE`</ph> message to all top-level windows, an application can use the <bpt id="p1">[</bpt>SendMessage<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms644950)</ept> Windows function with its <bpt id="p2">*</bpt>hwnd<ept id="p2">*</ept> parameter set to <bpt id="p3">**</bpt>HWND_BROADCAST<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="5636" translate="yes" xml:space="preserve">
          <source>If an application changes many different sections in WIN.INI at the same time, the application should send one <ph id="ph1">`WM_WININICHANGE`</ph> message with <ph id="ph2">`lpszSection`</ph> set to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="5637" translate="yes" xml:space="preserve">
          <source>Otherwise, an application should send <ph id="ph1">`WM_WININICHANGE`</ph> each time it makes a change to WIN.INI.</source>
        </trans-unit>
        <trans-unit id="5638" translate="yes" xml:space="preserve">
          <source>If an application receives an <ph id="ph1">`OnWinIniChange`</ph> call with <ph id="ph2">`lpszSection`</ph> set to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the application should check all sections in WIN.INI that affect the application.</source>
        </trans-unit>
        <trans-unit id="5639" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5640" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5641" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5642" translate="yes" xml:space="preserve">
          <source>CWnd::OnWndMsg</source>
        </trans-unit>
        <trans-unit id="5643" translate="yes" xml:space="preserve">
          <source>This member function is called by <ph id="ph1">`WindowProc`</ph>, or is called during message reflection.</source>
        </trans-unit>
        <trans-unit id="5644" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5645" translate="yes" xml:space="preserve">
          <source>Specifies the message to be sent.</source>
        </trans-unit>
        <trans-unit id="5646" translate="yes" xml:space="preserve">
          <source>Specifies additional message-dependent information.</source>
        </trans-unit>
        <trans-unit id="5647" translate="yes" xml:space="preserve">
          <source>Specifies additional message-dependent information.</source>
        </trans-unit>
        <trans-unit id="5648" translate="yes" xml:space="preserve">
          <source>The return value of <bpt id="p1">[</bpt>WindowProc<ept id="p1">](#cwnd__windowproc)</ept>.</source>
        </trans-unit>
        <trans-unit id="5649" translate="yes" xml:space="preserve">
          <source>Depends on the message; may be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="5650" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="5651" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if message was handled; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="5652" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5653" translate="yes" xml:space="preserve">
          <source>determines the message type and either calls the appropriate framework function (for example, <bpt id="p1">[</bpt>OnCommand<ept id="p1">](#cwnd__oncommand)</ept> for <bpt id="p2">**</bpt>WM_COMMAND<ept id="p2">**</ept>) or finds the appropriate message in the message map.</source>
        </trans-unit>
        <trans-unit id="5654" translate="yes" xml:space="preserve">
          <source>For more information about message reflection, see <bpt id="p1">[</bpt>Handling Reflected Messages<ept id="p1">](../../mfc/handling-reflected-messages.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="5655" translate="yes" xml:space="preserve">
          <source>CWnd::OnXButtonDblClk</source>
        </trans-unit>
        <trans-unit id="5656" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user double-clicks XBUTTON1 or XBUTTON2 while the cursor is in the client area of a window.</source>
        </trans-unit>
        <trans-unit id="5657" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5658" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="5659" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="5660" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="5661" translate="yes" xml:space="preserve">
          <source>A bitwise combination (OR) of flags that indicate which modifier keys are pressed.</source>
        </trans-unit>
        <trans-unit id="5662" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`MK_CONTROL`</ph> flag indicates that the CTRL key is pressed.</source>
        </trans-unit>
        <trans-unit id="5663" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="5664" translate="yes" xml:space="preserve">
          <source>A value of <ph id="ph1">`XBUTTON1`</ph> if the first Microsoft Intellimouse X button is double-clicked, or <ph id="ph2">`XBUTTON2`</ph> if the second X button is double-clicked.</source>
        </trans-unit>
        <trans-unit id="5665" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="5666" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CPoint<ept id="p1">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object that specifies the <bpt id="p2">*</bpt>x<ept id="p2">*</ept> and <bpt id="p3">*</bpt>y<ept id="p3">*</ept> coordinates of the cursor relative to the upper-left corner of the client area.</source>
        </trans-unit>
        <trans-unit id="5667" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5668" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_XBUTTONDBLCLK<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646244)</ept> notification, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="5669" translate="yes" xml:space="preserve">
          <source>If the mouse is not captured, the message is posted to the window beneath the cursor.</source>
        </trans-unit>
        <trans-unit id="5670" translate="yes" xml:space="preserve">
          <source>Otherwise, the message is posted to the window that has captured the mouse.</source>
        </trans-unit>
        <trans-unit id="5671" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nFlags`</ph> parameter can be a combination of modifier keys listed in the following table.</source>
        </trans-unit>
        <trans-unit id="5672" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>About Mouse Input<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645601)</ept>.</source>
        </trans-unit>
        <trans-unit id="5673" translate="yes" xml:space="preserve">
          <source>Modifier Key</source>
        </trans-unit>
        <trans-unit id="5674" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="5675" translate="yes" xml:space="preserve">
          <source>MK_CONTROL</source>
        </trans-unit>
        <trans-unit id="5676" translate="yes" xml:space="preserve">
          <source>The CTRL key is pressed.</source>
        </trans-unit>
        <trans-unit id="5677" translate="yes" xml:space="preserve">
          <source>MK_LBUTTON</source>
        </trans-unit>
        <trans-unit id="5678" translate="yes" xml:space="preserve">
          <source>The left mouse button is pressed.</source>
        </trans-unit>
        <trans-unit id="5679" translate="yes" xml:space="preserve">
          <source>MK_MBUTTON</source>
        </trans-unit>
        <trans-unit id="5680" translate="yes" xml:space="preserve">
          <source>The middle mouse button is pressed.</source>
        </trans-unit>
        <trans-unit id="5681" translate="yes" xml:space="preserve">
          <source>MK_RBUTTON</source>
        </trans-unit>
        <trans-unit id="5682" translate="yes" xml:space="preserve">
          <source>The right mouse button is pressed.</source>
        </trans-unit>
        <trans-unit id="5683" translate="yes" xml:space="preserve">
          <source>MK_SHIFT</source>
        </trans-unit>
        <trans-unit id="5684" translate="yes" xml:space="preserve">
          <source>The SHIFT key is pressed.</source>
        </trans-unit>
        <trans-unit id="5685" translate="yes" xml:space="preserve">
          <source>MK_XBUTTON1</source>
        </trans-unit>
        <trans-unit id="5686" translate="yes" xml:space="preserve">
          <source>The XBUTTON1 mouse button of the Microsoft IntelliMouse is pressed.</source>
        </trans-unit>
        <trans-unit id="5687" translate="yes" xml:space="preserve">
          <source>MK_XBUTTON2</source>
        </trans-unit>
        <trans-unit id="5688" translate="yes" xml:space="preserve">
          <source>The XBUTTON2 mouse button of the Microsoft IntelliMouse is pressed.</source>
        </trans-unit>
        <trans-unit id="5689" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5690" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5691" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5692" translate="yes" xml:space="preserve">
          <source>CWnd::OnXButtonDown</source>
        </trans-unit>
        <trans-unit id="5693" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user presses XBUTTON1 or XBUTTON2 while the cursor is in the client area of a window.</source>
        </trans-unit>
        <trans-unit id="5694" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5695" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="5696" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="5697" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="5698" translate="yes" xml:space="preserve">
          <source>A bitwise combination (OR) of flags that indicate which modifier keys are pressed.</source>
        </trans-unit>
        <trans-unit id="5699" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`MK_CONTROL`</ph> flag indicates that the CTRL key is pressed.</source>
        </trans-unit>
        <trans-unit id="5700" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="5701" translate="yes" xml:space="preserve">
          <source>A value of <ph id="ph1">`XBUTTON1`</ph> if the first Microsoft Intellimouse X button was clicked, or <ph id="ph2">`XBUTTON2`</ph> if the second X button was clicked.</source>
        </trans-unit>
        <trans-unit id="5702" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="5703" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CPoint<ept id="p1">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object that specifies the <bpt id="p2">*</bpt>x<ept id="p2">*</ept> and <bpt id="p3">*</bpt>y<ept id="p3">*</ept> coordinates of the cursor relative to the upper-left corner of the client area.</source>
        </trans-unit>
        <trans-unit id="5704" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5705" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_XBUTTONDOWN<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646245)</ept> notification, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="5706" translate="yes" xml:space="preserve">
          <source>If the mouse is not captured, the message is posted to the window beneath the cursor.</source>
        </trans-unit>
        <trans-unit id="5707" translate="yes" xml:space="preserve">
          <source>Otherwise, the message is posted to the window that has captured the mouse.</source>
        </trans-unit>
        <trans-unit id="5708" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nFlags`</ph> parameter can be a combination of modifier keys listed in the following table.</source>
        </trans-unit>
        <trans-unit id="5709" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>About Mouse Input<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645601)</ept>.</source>
        </trans-unit>
        <trans-unit id="5710" translate="yes" xml:space="preserve">
          <source>Modifier Key</source>
        </trans-unit>
        <trans-unit id="5711" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="5712" translate="yes" xml:space="preserve">
          <source>MK_CONTROL</source>
        </trans-unit>
        <trans-unit id="5713" translate="yes" xml:space="preserve">
          <source>The CTRL key is pressed.</source>
        </trans-unit>
        <trans-unit id="5714" translate="yes" xml:space="preserve">
          <source>MK_LBUTTON</source>
        </trans-unit>
        <trans-unit id="5715" translate="yes" xml:space="preserve">
          <source>The left mouse button is pressed.</source>
        </trans-unit>
        <trans-unit id="5716" translate="yes" xml:space="preserve">
          <source>MK_MBUTTON</source>
        </trans-unit>
        <trans-unit id="5717" translate="yes" xml:space="preserve">
          <source>The middle mouse button is pressed.</source>
        </trans-unit>
        <trans-unit id="5718" translate="yes" xml:space="preserve">
          <source>MK_RBUTTON</source>
        </trans-unit>
        <trans-unit id="5719" translate="yes" xml:space="preserve">
          <source>The right mouse button is pressed.</source>
        </trans-unit>
        <trans-unit id="5720" translate="yes" xml:space="preserve">
          <source>MK_SHIFT</source>
        </trans-unit>
        <trans-unit id="5721" translate="yes" xml:space="preserve">
          <source>The SHIFT key is pressed.</source>
        </trans-unit>
        <trans-unit id="5722" translate="yes" xml:space="preserve">
          <source>MK_XBUTTON1</source>
        </trans-unit>
        <trans-unit id="5723" translate="yes" xml:space="preserve">
          <source>The XBUTTON1 mouse button of the Microsoft IntelliMouse is pressed.</source>
        </trans-unit>
        <trans-unit id="5724" translate="yes" xml:space="preserve">
          <source>MK_XBUTTON2</source>
        </trans-unit>
        <trans-unit id="5725" translate="yes" xml:space="preserve">
          <source>The XBUTTON2 mouse button of the Microsoft IntelliMouse is pressed.</source>
        </trans-unit>
        <trans-unit id="5726" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5727" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5728" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5729" translate="yes" xml:space="preserve">
          <source>CWnd::OnXButtonUp</source>
        </trans-unit>
        <trans-unit id="5730" translate="yes" xml:space="preserve">
          <source>The framework calls this member function when the user releases XBUTTON1 or XBUTTON2 while the cursor is in the client area of a window.</source>
        </trans-unit>
        <trans-unit id="5731" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5732" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="5733" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="5734" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="5735" translate="yes" xml:space="preserve">
          <source>A bitwise combination (OR) of flags that indicate which modifier keys are pressed.</source>
        </trans-unit>
        <trans-unit id="5736" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`MK_CONTROL`</ph> flag indicates that the CTRL key is pressed.</source>
        </trans-unit>
        <trans-unit id="5737" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="5738" translate="yes" xml:space="preserve">
          <source>A value of <ph id="ph1">`XBUTTON1`</ph> if the first Microsoft Intellimouse X button was double-clicked, or <ph id="ph2">`XBUTTON2`</ph> if the second X button was double-clicked.</source>
        </trans-unit>
        <trans-unit id="5739" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="5740" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CPoint<ept id="p1">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object that specifies the <bpt id="p2">*</bpt>x<ept id="p2">*</ept> and <bpt id="p3">*</bpt>y<ept id="p3">*</ept> coordinates of the cursor relative to the upper-left corner of the client area.</source>
        </trans-unit>
        <trans-unit id="5741" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5742" translate="yes" xml:space="preserve">
          <source>This method receives the <bpt id="p1">[</bpt>WM_XBUTTONUP<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646246)</ept> notification, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="5743" translate="yes" xml:space="preserve">
          <source>If the mouse is not captured, the message is posted to the window beneath the cursor.</source>
        </trans-unit>
        <trans-unit id="5744" translate="yes" xml:space="preserve">
          <source>Otherwise, the message is posted to the window that has captured the mouse.</source>
        </trans-unit>
        <trans-unit id="5745" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nFlags`</ph> parameter can be a combination of modifier keys listed in the following table.</source>
        </trans-unit>
        <trans-unit id="5746" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>About Mouse Input<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645601)</ept>.</source>
        </trans-unit>
        <trans-unit id="5747" translate="yes" xml:space="preserve">
          <source>Modifier Key</source>
        </trans-unit>
        <trans-unit id="5748" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="5749" translate="yes" xml:space="preserve">
          <source>MK_CONTROL</source>
        </trans-unit>
        <trans-unit id="5750" translate="yes" xml:space="preserve">
          <source>The CTRL key is pressed.</source>
        </trans-unit>
        <trans-unit id="5751" translate="yes" xml:space="preserve">
          <source>MK_LBUTTON</source>
        </trans-unit>
        <trans-unit id="5752" translate="yes" xml:space="preserve">
          <source>The left mouse button is pressed.</source>
        </trans-unit>
        <trans-unit id="5753" translate="yes" xml:space="preserve">
          <source>MK_MBUTTON</source>
        </trans-unit>
        <trans-unit id="5754" translate="yes" xml:space="preserve">
          <source>The middle mouse button is pressed.</source>
        </trans-unit>
        <trans-unit id="5755" translate="yes" xml:space="preserve">
          <source>MK_RBUTTON</source>
        </trans-unit>
        <trans-unit id="5756" translate="yes" xml:space="preserve">
          <source>The right mouse button is pressed.</source>
        </trans-unit>
        <trans-unit id="5757" translate="yes" xml:space="preserve">
          <source>MK_SHIFT</source>
        </trans-unit>
        <trans-unit id="5758" translate="yes" xml:space="preserve">
          <source>The SHIFT key is pressed.</source>
        </trans-unit>
        <trans-unit id="5759" translate="yes" xml:space="preserve">
          <source>MK_XBUTTON1</source>
        </trans-unit>
        <trans-unit id="5760" translate="yes" xml:space="preserve">
          <source>The XBUTTON1 mouse button of the Microsoft IntelliMouse is pressed.</source>
        </trans-unit>
        <trans-unit id="5761" translate="yes" xml:space="preserve">
          <source>MK_XBUTTON2</source>
        </trans-unit>
        <trans-unit id="5762" translate="yes" xml:space="preserve">
          <source>The XBUTTON2 mouse button of the Microsoft IntelliMouse is pressed.</source>
        </trans-unit>
        <trans-unit id="5763" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow your application to handle a Windows message.</source>
        </trans-unit>
        <trans-unit id="5764" translate="yes" xml:space="preserve">
          <source>The parameters passed to your function reflect the parameters received by the framework when the message was received.</source>
        </trans-unit>
        <trans-unit id="5765" translate="yes" xml:space="preserve">
          <source>If you call the base-class implementation of this function, that implementation will use the parameters originally passed with the message and not the parameters you supply to the function.</source>
        </trans-unit>
        <trans-unit id="5766" translate="yes" xml:space="preserve">
          <source>CWnd::OpenClipboard</source>
        </trans-unit>
        <trans-unit id="5767" translate="yes" xml:space="preserve">
          <source>Opens the Clipboard.</source>
        </trans-unit>
        <trans-unit id="5768" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="5769" translate="yes" xml:space="preserve">
          <source>Nonzero if the Clipboard is opened via <ph id="ph1">`CWnd`</ph>, or 0 if another application or window has the Clipboard open.</source>
        </trans-unit>
        <trans-unit id="5770" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5771" translate="yes" xml:space="preserve">
          <source>Other applications will not be able to modify the Clipboard until the <bpt id="p1">[</bpt>CloseClipboard<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms649035)</ept> Windows function is called.</source>
        </trans-unit>
        <trans-unit id="5772" translate="yes" xml:space="preserve">
          <source>The current <ph id="ph1">`CWnd`</ph> object will not become the owner of the Clipboard until the <bpt id="p1">[</bpt>EmptyClipboard<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms649037)</ept> Windows function is called.</source>
        </trans-unit>
        <trans-unit id="5773" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="5774" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#111</source>
        </trans-unit>
        <trans-unit id="5775" translate="yes" xml:space="preserve">
          <source>CWnd::operator HWND</source>
        </trans-unit>
        <trans-unit id="5776" translate="yes" xml:space="preserve">
          <source>Use this operator to get the handle to the <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="5777" translate="yes" xml:space="preserve">
          <source>CWnd::operator !=</source>
        </trans-unit>
        <trans-unit id="5778" translate="yes" xml:space="preserve">
          <source>Compares two <ph id="ph1">`CWnd`</ph> objects to determine if they do not have the same <bpt id="p1">[</bpt>m_hWnd<ept id="p1">](#cwnd__m_hwnd)</ept>.</source>
        </trans-unit>
        <trans-unit id="5779" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5780" translate="yes" xml:space="preserve">
          <source>A reference to a <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="5781" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="5782" translate="yes" xml:space="preserve">
          <source>Nonzero if equal; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="5783" translate="yes" xml:space="preserve">
          <source>CWnd::operator ==</source>
        </trans-unit>
        <trans-unit id="5784" translate="yes" xml:space="preserve">
          <source>Compares two <ph id="ph1">`CWnd`</ph> objects to determine if they have the same <bpt id="p1">[</bpt>m_hWnd<ept id="p1">](#cwnd__m_hwnd)</ept>.</source>
        </trans-unit>
        <trans-unit id="5785" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5786" translate="yes" xml:space="preserve">
          <source>A reference to a <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="5787" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="5788" translate="yes" xml:space="preserve">
          <source>Nonzero if equal; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="5789" translate="yes" xml:space="preserve">
          <source>CWnd::PaintWindowlessControls</source>
        </trans-unit>
        <trans-unit id="5790" translate="yes" xml:space="preserve">
          <source>Draws windowless controls on the control container.</source>
        </trans-unit>
        <trans-unit id="5791" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5792" translate="yes" xml:space="preserve">
          <source>The device context on which to draw the windowless controls.</source>
        </trans-unit>
        <trans-unit id="5793" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="5794" translate="yes" xml:space="preserve">
          <source>Returns TRUE if there is a control container and the windowless controls are drawn successfully, otherwise FALSE.</source>
        </trans-unit>
        <trans-unit id="5795" translate="yes" xml:space="preserve">
          <source>CWnd::PostMessage</source>
        </trans-unit>
        <trans-unit id="5796" translate="yes" xml:space="preserve">
          <source>Places a message in the window's message queue and then returns without waiting for the corresponding window to process the message.</source>
        </trans-unit>
        <trans-unit id="5797" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5798" translate="yes" xml:space="preserve">
          <source>Specifies the message to be posted.</source>
        </trans-unit>
        <trans-unit id="5799" translate="yes" xml:space="preserve">
          <source>Specifies additional message information.</source>
        </trans-unit>
        <trans-unit id="5800" translate="yes" xml:space="preserve">
          <source>The content of this parameter depends on the message being posted.</source>
        </trans-unit>
        <trans-unit id="5801" translate="yes" xml:space="preserve">
          <source>Specifies additional message information.</source>
        </trans-unit>
        <trans-unit id="5802" translate="yes" xml:space="preserve">
          <source>The content of this parameter depends on the message being posted.</source>
        </trans-unit>
        <trans-unit id="5803" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="5804" translate="yes" xml:space="preserve">
          <source>Nonzero if the message is posted; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="5805" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5806" translate="yes" xml:space="preserve">
          <source>Messages in a message queue are retrieved by calls to the <bpt id="p1">[</bpt>GetMessage<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms644936)</ept> or <bpt id="p2">[</bpt>PeekMessage<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms644943)</ept> Windows function.</source>
        </trans-unit>
        <trans-unit id="5807" translate="yes" xml:space="preserve">
          <source>The Windows <bpt id="p1">[</bpt>PostMessage<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms644944)</ept> function can be used to access another application.</source>
        </trans-unit>
        <trans-unit id="5808" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="5809" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>AfxGetMainWnd<ept id="p1">](../../mfc/reference/application-information-and-management.md#afxgetmainwnd)</ept>.</source>
        </trans-unit>
        <trans-unit id="5810" translate="yes" xml:space="preserve">
          <source>CWnd::PostNcDestroy</source>
        </trans-unit>
        <trans-unit id="5811" translate="yes" xml:space="preserve">
          <source>Called by the default <bpt id="p1">[</bpt>OnNcDestroy<ept id="p1">](#cwnd__onncdestroy)</ept> member function after the window has been destroyed.</source>
        </trans-unit>
        <trans-unit id="5812" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5813" translate="yes" xml:space="preserve">
          <source>Derived classes can use this function for custom cleanup such as the deletion of the <bpt id="p1">**</bpt>this<ept id="p1">**</ept> pointer.</source>
        </trans-unit>
        <trans-unit id="5814" translate="yes" xml:space="preserve">
          <source>CWnd::PreCreateWindow</source>
        </trans-unit>
        <trans-unit id="5815" translate="yes" xml:space="preserve">
          <source>Called by the framework before the creation of the Windows window attached to this <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="5816" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5817" translate="yes" xml:space="preserve">
          <source>cs</source>
        </trans-unit>
        <trans-unit id="5818" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CREATESTRUCT<ept id="p1">](../../mfc/reference/createstruct-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="5819" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="5820" translate="yes" xml:space="preserve">
          <source>Nonzero if the window creation should continue; 0 to indicate creation failure.</source>
        </trans-unit>
        <trans-unit id="5821" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5822" translate="yes" xml:space="preserve">
          <source>now assigns the hMenu member of <ph id="ph1">`cs`</ph> to the <ph id="ph2">`this`</ph> pointer if the menu is <ph id="ph3">`NULL`</ph> and the style contains <ph id="ph4">`WS_CHILD`</ph>.</source>
        </trans-unit>
        <trans-unit id="5823" translate="yes" xml:space="preserve">
          <source>For proper functionality, ensure that your dialog control has an ID that is not <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="5824" translate="yes" xml:space="preserve">
          <source>This change fixes a crash in managed/native interop scenarios.</source>
        </trans-unit>
        <trans-unit id="5825" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`TRACE`</ph> statement in <ph id="ph2">`CWnd::Create`</ph> alerts the developer of the problem.</source>
        </trans-unit>
        <trans-unit id="5826" translate="yes" xml:space="preserve">
          <source>Never call this function directly.</source>
        </trans-unit>
        <trans-unit id="5827" translate="yes" xml:space="preserve">
          <source>The default implementation of this function checks for a <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> window class name and substitutes an appropriate default.</source>
        </trans-unit>
        <trans-unit id="5828" translate="yes" xml:space="preserve">
          <source>Override this member function to modify the <ph id="ph1">`CREATESTRUCT`</ph> structure before the window is created.</source>
        </trans-unit>
        <trans-unit id="5829" translate="yes" xml:space="preserve">
          <source>Each class derived from <ph id="ph1">`CWnd`</ph> adds its own functionality to its override of <ph id="ph2">`PreCreateWindow`</ph>.</source>
        </trans-unit>
        <trans-unit id="5830" translate="yes" xml:space="preserve">
          <source>By design, these derivations of <ph id="ph1">`PreCreateWindow`</ph> are not documented.</source>
        </trans-unit>
        <trans-unit id="5831" translate="yes" xml:space="preserve">
          <source>To determine the styles appropriate to each class and the interdependencies between the styles, you can examine the MFC source code for your application's base class.</source>
        </trans-unit>
        <trans-unit id="5832" translate="yes" xml:space="preserve">
          <source>If you choose to override <bpt id="p1">**</bpt>PreCreateWindow,<ept id="p1">**</ept> you can determine whether the styles used in your application's base class provide the functionality you need by using information gathered from the MFC source code.</source>
        </trans-unit>
        <trans-unit id="5833" translate="yes" xml:space="preserve">
          <source>For more information on changing window styles, see the <bpt id="p1">[</bpt>Changing the Styles of a Window Created by MFC<ept id="p1">](../../mfc/changing-the-styles-of-a-window-created-by-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="5834" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="5835" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#112</source>
        </trans-unit>
        <trans-unit id="5836" translate="yes" xml:space="preserve">
          <source>CWnd::PreSubclassWindow</source>
        </trans-unit>
        <trans-unit id="5837" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to allow other necessary subclassing to occur before the window is subclassed.</source>
        </trans-unit>
        <trans-unit id="5838" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5839" translate="yes" xml:space="preserve">
          <source>Overriding this member function allows for dynamic subclassing of controls.</source>
        </trans-unit>
        <trans-unit id="5840" translate="yes" xml:space="preserve">
          <source>It is an advanced overridable.</source>
        </trans-unit>
        <trans-unit id="5841" translate="yes" xml:space="preserve">
          <source>CWnd::PreTranslateMessage</source>
        </trans-unit>
        <trans-unit id="5842" translate="yes" xml:space="preserve">
          <source>Used by class <bpt id="p1">[</bpt>CWinApp<ept id="p1">](../../mfc/reference/cwinapp-class.md)</ept> to translate window messages before they are dispatched to the <bpt id="p2">[</bpt>TranslateMessage<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms644955)</ept> and <bpt id="p3">[</bpt>DispatchMessage<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms644934)</ept> Windows functions.</source>
        </trans-unit>
        <trans-unit id="5843" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5844" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>MSG<ept id="p1">](../../mfc/reference/msg-structure1.md)</ept> structure that contains the message to process.</source>
        </trans-unit>
        <trans-unit id="5845" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="5846" translate="yes" xml:space="preserve">
          <source>Nonzero if the message was translated and should not be dispatched; 0 if the message was not translated and should be dispatched.</source>
        </trans-unit>
        <trans-unit id="5847" translate="yes" xml:space="preserve">
          <source>CWnd::Print</source>
        </trans-unit>
        <trans-unit id="5848" translate="yes" xml:space="preserve">
          <source>Call this member function to draw the current window in the specified device context, which is most commonly in a printer device context.</source>
        </trans-unit>
        <trans-unit id="5849" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5850" translate="yes" xml:space="preserve">
          <source>A pointer to a device context.</source>
        </trans-unit>
        <trans-unit id="5851" translate="yes" xml:space="preserve">
          <source>Specifies the drawing options.</source>
        </trans-unit>
        <trans-unit id="5852" translate="yes" xml:space="preserve">
          <source>This parameter can be one or more of these flags:</source>
        </trans-unit>
        <trans-unit id="5853" translate="yes" xml:space="preserve">
          <source>Draw the window only if it is visible.</source>
        </trans-unit>
        <trans-unit id="5854" translate="yes" xml:space="preserve">
          <source>Draw all visible children windows.</source>
        </trans-unit>
        <trans-unit id="5855" translate="yes" xml:space="preserve">
          <source>Draw the client area of the window.</source>
        </trans-unit>
        <trans-unit id="5856" translate="yes" xml:space="preserve">
          <source>Erase the background before drawing the window.</source>
        </trans-unit>
        <trans-unit id="5857" translate="yes" xml:space="preserve">
          <source>Draw the nonclient area of the window.</source>
        </trans-unit>
        <trans-unit id="5858" translate="yes" xml:space="preserve">
          <source>Draw all owned windows.</source>
        </trans-unit>
        <trans-unit id="5859" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5860" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CWnd::DefWindowProc<ept id="p1">](#cwnd__defwindowproc)</ept> function processes this message based on which drawing option is specified:</source>
        </trans-unit>
        <trans-unit id="5861" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`PRF_CHECKVISIBLE`</ph> is specified and the window is not visible, do nothing.</source>
        </trans-unit>
        <trans-unit id="5862" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`PRF_NONCLIENT`</ph> is specified, draw the nonclient area in the given device context.</source>
        </trans-unit>
        <trans-unit id="5863" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`PRF_ERASEBKGND`</ph> is specified, send the window a <bpt id="p1">[</bpt>WM_ERASEBKGND<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms648055)</ept> message.</source>
        </trans-unit>
        <trans-unit id="5864" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`PRF_CLIENT`</ph> is specified, send the window a <bpt id="p1">[</bpt>WM_PRINTCLIENT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145217)</ept> message.</source>
        </trans-unit>
        <trans-unit id="5865" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`PRF_CHILDREN`</ph> is set, send each visible child window a <bpt id="p1">[</bpt>WM_PRINT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145216)</ept> message.</source>
        </trans-unit>
        <trans-unit id="5866" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`PRF_OWNED`</ph> is set, send each visible owned window a <ph id="ph2">`WM_PRINT`</ph> message.</source>
        </trans-unit>
        <trans-unit id="5867" translate="yes" xml:space="preserve">
          <source>CWnd::PrintClient</source>
        </trans-unit>
        <trans-unit id="5868" translate="yes" xml:space="preserve">
          <source>Call this member function to draw any window in the specified device context (usually a printer device context).</source>
        </trans-unit>
        <trans-unit id="5869" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5870" translate="yes" xml:space="preserve">
          <source>A pointer to a device context.</source>
        </trans-unit>
        <trans-unit id="5871" translate="yes" xml:space="preserve">
          <source>Specifies drawing options.</source>
        </trans-unit>
        <trans-unit id="5872" translate="yes" xml:space="preserve">
          <source>This parameter can be one or more of these flags:</source>
        </trans-unit>
        <trans-unit id="5873" translate="yes" xml:space="preserve">
          <source>Draw the window only if it is visible.</source>
        </trans-unit>
        <trans-unit id="5874" translate="yes" xml:space="preserve">
          <source>Draw all visible children windows.</source>
        </trans-unit>
        <trans-unit id="5875" translate="yes" xml:space="preserve">
          <source>Draw the client area of the window.</source>
        </trans-unit>
        <trans-unit id="5876" translate="yes" xml:space="preserve">
          <source>Erase the background before drawing the window.</source>
        </trans-unit>
        <trans-unit id="5877" translate="yes" xml:space="preserve">
          <source>Draw the nonclient area of the window.</source>
        </trans-unit>
        <trans-unit id="5878" translate="yes" xml:space="preserve">
          <source>Draw all owned windows.</source>
        </trans-unit>
        <trans-unit id="5879" translate="yes" xml:space="preserve">
          <source>CWnd::PrintWindow</source>
        </trans-unit>
        <trans-unit id="5880" translate="yes" xml:space="preserve">
          <source>Copies a visual window into the specified device context, typically a printer DC.</source>
        </trans-unit>
        <trans-unit id="5881" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5882" translate="yes" xml:space="preserve">
          <source>A pointer to the device context to be printed to.</source>
        </trans-unit>
        <trans-unit id="5883" translate="yes" xml:space="preserve">
          <source>Specifies the drawing options.</source>
        </trans-unit>
        <trans-unit id="5884" translate="yes" xml:space="preserve">
          <source>For a list of possible values, see <bpt id="p1">[</bpt>PrintWindow<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162869)</ept>.</source>
        </trans-unit>
        <trans-unit id="5885" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="5886" translate="yes" xml:space="preserve">
          <source>Nonzero if the function succeeds; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="5887" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5888" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the function <bpt id="p1">[</bpt>PrintWindow<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162869)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="5889" translate="yes" xml:space="preserve">
          <source>CWnd::RedrawWindow</source>
        </trans-unit>
        <trans-unit id="5890" translate="yes" xml:space="preserve">
          <source>Updates the specified rectangle or region in the given window's client area.</source>
        </trans-unit>
        <trans-unit id="5891" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5892" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>RECT structure<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> containing the coordinates of the update rectangle.</source>
        </trans-unit>
        <trans-unit id="5893" translate="yes" xml:space="preserve">
          <source>This parameter is ignored if <bpt id="p1">*</bpt>prgnUpdate<ept id="p1">*</ept> contains a valid region handle.</source>
        </trans-unit>
        <trans-unit id="5894" translate="yes" xml:space="preserve">
          <source>prgnUpdate</source>
        </trans-unit>
        <trans-unit id="5895" translate="yes" xml:space="preserve">
          <source>Identifies the update region.</source>
        </trans-unit>
        <trans-unit id="5896" translate="yes" xml:space="preserve">
          <source>If both <bpt id="p1">*</bpt>prgnUpdate<ept id="p1">*</ept> and <ph id="ph1">`lpRectUpdate`</ph> are <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>, the entire client area is added to the update region.</source>
        </trans-unit>
        <trans-unit id="5897" translate="yes" xml:space="preserve">
          <source>The following flags are used to invalidate the window:</source>
        </trans-unit>
        <trans-unit id="5898" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RDW_ERASE<ept id="p1">**</ept> Causes the window to receive a <bpt id="p2">[</bpt>WM_ERASEBKGND<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms648055)</ept> message when the window is repainted.</source>
        </trans-unit>
        <trans-unit id="5899" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>RDW_INVALIDATE<ept id="p1">**</ept> flag must also be specified; otherwise <bpt id="p2">**</bpt>RDW_ERASE<ept id="p2">**</ept> has no effect.</source>
        </trans-unit>
        <trans-unit id="5900" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RDW_FRAME<ept id="p1">**</ept> Causes any part of the nonclient area of the window that intersects the update region to receive a <bpt id="p2">[</bpt>WM_NCPAINT<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd145212)</ept> message.</source>
        </trans-unit>
        <trans-unit id="5901" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>RDW_INVALIDATE<ept id="p1">**</ept> flag must also be specified; otherwise <bpt id="p2">**</bpt>RDW_FRAME<ept id="p2">**</ept> has no effect.</source>
        </trans-unit>
        <trans-unit id="5902" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RDW_INTERNALPAINT<ept id="p1">**</ept> Causes a <bpt id="p2">[</bpt>WM_PAINT<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd145213)</ept> message to be posted to the window regardless of whether the window contains an invalid region.</source>
        </trans-unit>
        <trans-unit id="5903" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RDW_INVALIDATE<ept id="p1">**</ept> Invalidate <ph id="ph1">`lpRectUpdate`</ph> or <bpt id="p2">*</bpt>prgnUpdate<ept id="p2">*</ept> (only one may be not <bpt id="p3">**</bpt>NULL<ept id="p3">**</ept>).</source>
        </trans-unit>
        <trans-unit id="5904" translate="yes" xml:space="preserve">
          <source>If both are <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the entire window is invalidated.</source>
        </trans-unit>
        <trans-unit id="5905" translate="yes" xml:space="preserve">
          <source>The following flags are used to validate the window:</source>
        </trans-unit>
        <trans-unit id="5906" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RDW_NOERASE<ept id="p1">**</ept> Suppresses any pending <ph id="ph1">`WM_ERASEBKGND`</ph> messages.</source>
        </trans-unit>
        <trans-unit id="5907" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RDW_NOFRAME<ept id="p1">**</ept> Suppresses any pending <ph id="ph1">`WM_NCPAINT`</ph> messages.</source>
        </trans-unit>
        <trans-unit id="5908" translate="yes" xml:space="preserve">
          <source>This flag must be used with <bpt id="p1">**</bpt>RDW_VALIDATE<ept id="p1">**</ept> and is typically used with <bpt id="p2">**</bpt>RDW_NOCHILDREN<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="5909" translate="yes" xml:space="preserve">
          <source>This option should be used with care, as it could prevent parts of a window from painting properly.</source>
        </trans-unit>
        <trans-unit id="5910" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RDW_NOINTERNALPAINT<ept id="p1">**</ept> Suppresses any pending internal <ph id="ph1">`WM_PAINT`</ph> messages.</source>
        </trans-unit>
        <trans-unit id="5911" translate="yes" xml:space="preserve">
          <source>This flag does not affect <ph id="ph1">`WM_PAINT`</ph> messages resulting from invalid areas.</source>
        </trans-unit>
        <trans-unit id="5912" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RDW_VALIDATE<ept id="p1">**</ept> Validates <ph id="ph1">`lpRectUpdate`</ph> or <bpt id="p2">*</bpt>prgnUpdate<ept id="p2">*</ept> (only one may be not <bpt id="p3">**</bpt>NULL<ept id="p3">**</ept>).</source>
        </trans-unit>
        <trans-unit id="5913" translate="yes" xml:space="preserve">
          <source>If both are <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the entire window is validated.</source>
        </trans-unit>
        <trans-unit id="5914" translate="yes" xml:space="preserve">
          <source>This flag does not affect internal <ph id="ph1">`WM_PAINT`</ph> messages.</source>
        </trans-unit>
        <trans-unit id="5915" translate="yes" xml:space="preserve">
          <source>The following flags control when repainting occurs.</source>
        </trans-unit>
        <trans-unit id="5916" translate="yes" xml:space="preserve">
          <source>Painting is not performed by the <ph id="ph1">`RedrawWindow`</ph> function unless one of these bits is specified.</source>
        </trans-unit>
        <trans-unit id="5917" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RDW_ERASENOW<ept id="p1">**</ept> Causes the affected windows (as specified by the <bpt id="p2">**</bpt>RDW_ALLCHILDREN<ept id="p2">**</ept> and <bpt id="p3">**</bpt>RDW_NOCHILDREN<ept id="p3">**</ept> flags) to receive <ph id="ph1">`WM_NCPAINT`</ph> and <ph id="ph2">`WM_ERASEBKGND`</ph> messages, if necessary, before the function returns.</source>
        </trans-unit>
        <trans-unit id="5918" translate="yes" xml:space="preserve">
          <source>messages are deferred.</source>
        </trans-unit>
        <trans-unit id="5919" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RDW_UPDATENOW<ept id="p1">**</ept> Causes the affected windows (as specified by the <bpt id="p2">**</bpt>RDW_ALLCHILDREN<ept id="p2">**</ept> and <bpt id="p3">**</bpt>RDW_NOCHILDREN<ept id="p3">**</ept> flags) to receive <ph id="ph1">`WM_NCPAINT`</ph>, <ph id="ph2">`WM_ERASEBKGND`</ph>, and <ph id="ph3">`WM_PAINT`</ph> messages, if necessary, before the function returns.</source>
        </trans-unit>
        <trans-unit id="5920" translate="yes" xml:space="preserve">
          <source>By default, the windows affected by the <ph id="ph1">`RedrawWindow`</ph> function depend on whether the specified window has the <bpt id="p1">**</bpt>WS_CLIPCHILDREN<ept id="p1">**</ept> style.</source>
        </trans-unit>
        <trans-unit id="5921" translate="yes" xml:space="preserve">
          <source>The child windows of <bpt id="p1">**</bpt>WS_CLIPCHILDREN<ept id="p1">**</ept> windows are not affected.</source>
        </trans-unit>
        <trans-unit id="5922" translate="yes" xml:space="preserve">
          <source>However, those windows that are not <bpt id="p1">**</bpt>WS_CLIPCHILDREN<ept id="p1">**</ept> windows are recursively validated or invalidated until a <bpt id="p2">**</bpt>WS_CLIPCHILDREN<ept id="p2">**</ept> window is encountered.</source>
        </trans-unit>
        <trans-unit id="5923" translate="yes" xml:space="preserve">
          <source>The following flags control which windows are affected by the <ph id="ph1">`RedrawWindow`</ph> function:</source>
        </trans-unit>
        <trans-unit id="5924" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RDW_ALLCHILDREN<ept id="p1">**</ept> Includes child windows, if any, in the repainting operation.</source>
        </trans-unit>
        <trans-unit id="5925" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RDW_NOCHILDREN<ept id="p1">**</ept> Excludes child windows, if any, from the repainting operation.</source>
        </trans-unit>
        <trans-unit id="5926" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="5927" translate="yes" xml:space="preserve">
          <source>Nonzero if the window was redrawn successfully; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="5928" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5929" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`RedrawWindow`</ph> member function is used to invalidate part of the desktop window, that window does not receive a <bpt id="p1">[</bpt>WM_PAINT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145213)</ept> message.</source>
        </trans-unit>
        <trans-unit id="5930" translate="yes" xml:space="preserve">
          <source>To repaint the desktop, an application should use <bpt id="p1">[</bpt>CWnd::ValidateRgn<ept id="p1">](#cwnd__validatergn)</ept>, <bpt id="p2">[</bpt>CWnd::InvalidateRgn<ept id="p2">](#cwnd__invalidatergn)</ept>, <bpt id="p3">[</bpt>CWnd::UpdateWindow<ept id="p3">](#cwnd__updatewindow)</ept>, or <bpt id="p4">[</bpt>RedrawWindow<ept id="p4">](http://msdn.microsoft.com/library/windows/desktop/dd162911)</ept></source>
        </trans-unit>
        <trans-unit id="5931" translate="yes" xml:space="preserve">
          <source>CWnd::ReflectChildNotify</source>
        </trans-unit>
        <trans-unit id="5932" translate="yes" xml:space="preserve">
          <source>This message function is called by the framework from <bpt id="p1">[</bpt>OnChildNotify<ept id="p1">](#cwnd__onchildnotify)</ept>.</source>
        </trans-unit>
        <trans-unit id="5933" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5934" translate="yes" xml:space="preserve">
          <source>Specifies the message to be reflected.</source>
        </trans-unit>
        <trans-unit id="5935" translate="yes" xml:space="preserve">
          <source>Specifies additional message-dependent information.</source>
        </trans-unit>
        <trans-unit id="5936" translate="yes" xml:space="preserve">
          <source>Specifies additional message-dependent information.</source>
        </trans-unit>
        <trans-unit id="5937" translate="yes" xml:space="preserve">
          <source>The result generated by the child window to be returned by the parent window.</source>
        </trans-unit>
        <trans-unit id="5938" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="5939" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="5940" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if message was reflected; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="5941" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5942" translate="yes" xml:space="preserve">
          <source>It is a helper function which reflects <ph id="ph1">`message`</ph> to its source.</source>
        </trans-unit>
        <trans-unit id="5943" translate="yes" xml:space="preserve">
          <source>Reflected messages are sent directly to <bpt id="p1">[</bpt>CWnd::OnWndMsg<ept id="p1">](#cwnd__onwndmsg)</ept> or <bpt id="p2">[</bpt>CCmdTarget::OnCmdMsg<ept id="p2">](../../mfc/reference/ccmdtarget-class.md#ccmdtarget__oncmdmsg)</ept>.</source>
        </trans-unit>
        <trans-unit id="5944" translate="yes" xml:space="preserve">
          <source>For more information about message reflection, see <bpt id="p1">[</bpt>Handling Reflected Messages<ept id="p1">](../../mfc/handling-reflected-messages.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="5945" translate="yes" xml:space="preserve">
          <source>CWnd::ReflectLastMsg</source>
        </trans-unit>
        <trans-unit id="5946" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to reflect the last message to the child window.</source>
        </trans-unit>
        <trans-unit id="5947" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5948" translate="yes" xml:space="preserve">
          <source>A handle to a child window.</source>
        </trans-unit>
        <trans-unit id="5949" translate="yes" xml:space="preserve">
          <source>The result generated by the child window to be returned by the parent window.</source>
        </trans-unit>
        <trans-unit id="5950" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="5951" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="5952" translate="yes" xml:space="preserve">
          <source>Nonzero if the message was handled; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="5953" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5954" translate="yes" xml:space="preserve">
          <source>This member function calls <bpt id="p1">[</bpt>SendChildNotifyLastMsg<ept id="p1">](#cwnd__sendchildnotifylastmsg)</ept> if the window identified by <ph id="ph1">`hWndChild`</ph> is an OLE control or a window in the permanent map.</source>
        </trans-unit>
        <trans-unit id="5955" translate="yes" xml:space="preserve">
          <source>For more information about message reflection, see <bpt id="p1">[</bpt>Handling Reflected Messages<ept id="p1">](../../mfc/handling-reflected-messages.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="5956" translate="yes" xml:space="preserve">
          <source>CWnd::ReleaseDC</source>
        </trans-unit>
        <trans-unit id="5957" translate="yes" xml:space="preserve">
          <source>Releases a device context, freeing it for use by other applications.</source>
        </trans-unit>
        <trans-unit id="5958" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5959" translate="yes" xml:space="preserve">
          <source>Identifies the device context to be released.</source>
        </trans-unit>
        <trans-unit id="5960" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="5961" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="5962" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5963" translate="yes" xml:space="preserve">
          <source>The effect of the <ph id="ph1">`ReleaseDC`</ph> member function depends on the device-context type.</source>
        </trans-unit>
        <trans-unit id="5964" translate="yes" xml:space="preserve">
          <source>The application must call the <ph id="ph1">`ReleaseDC`</ph> member function for each call to the <bpt id="p1">[</bpt>GetWindowDC<ept id="p1">](#cwnd__getwindowdc)</ept> member function and for each call to the <bpt id="p2">[</bpt>GetDC<ept id="p2">](#cwnd__getdc)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="5965" translate="yes" xml:space="preserve">
          <source>CWnd::RepositionBars</source>
        </trans-unit>
        <trans-unit id="5966" translate="yes" xml:space="preserve">
          <source>Called to reposition and resize control bars in the client area of a window.</source>
        </trans-unit>
        <trans-unit id="5967" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5968" translate="yes" xml:space="preserve">
          <source>The ID of the first in a range of control bars to reposition and resize.</source>
        </trans-unit>
        <trans-unit id="5969" translate="yes" xml:space="preserve">
          <source>The ID of the last in a range of control bars to reposition and resize.</source>
        </trans-unit>
        <trans-unit id="5970" translate="yes" xml:space="preserve">
          <source>Specifies ID of pane that fills the rest of the client area.</source>
        </trans-unit>
        <trans-unit id="5971" translate="yes" xml:space="preserve">
          <source>Can have one of the following values:</source>
        </trans-unit>
        <trans-unit id="5972" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CWnd::reposDefault<ept id="p1">**</ept> Performs the layout of the control bars.</source>
        </trans-unit>
        <trans-unit id="5973" translate="yes" xml:space="preserve">
          <source>is not used and can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="5974" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CWnd::reposQuery<ept id="p1">**</ept> The layout of the control bars is not done; instead <ph id="ph1">`lpRectParam`</ph> is initialized with the size of the client area, as if the layout had actually been done.</source>
        </trans-unit>
        <trans-unit id="5975" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CWnd::reposExtra<ept id="p1">**</ept> Adds the values of <ph id="ph1">`lpRectParam`</ph> to the client area of <ph id="ph2">`nIDLast`</ph> and also performs the layout <bpt id="p2">*</bpt>.<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="5976" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>RECT structure<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept>; the usage of which depends on the value of <ph id="ph1">`nFlag`</ph>.</source>
        </trans-unit>
        <trans-unit id="5977" translate="yes" xml:space="preserve">
          <source>lpRectClient</source>
        </trans-unit>
        <trans-unit id="5978" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>RECT structure<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> containing the available client area.</source>
        </trans-unit>
        <trans-unit id="5979" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the window's client area will be used.</source>
        </trans-unit>
        <trans-unit id="5980" translate="yes" xml:space="preserve">
          <source>Indicates whether the bar should be stretched to the size of the frame.</source>
        </trans-unit>
        <trans-unit id="5981" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5982" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nIDFirst`</ph> and <ph id="ph2">`nIDLast`</ph> parameters define a range of control-bar IDs to be repositioned in the client area.</source>
        </trans-unit>
        <trans-unit id="5983" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nIDLeftOver`</ph> parameter specifies the ID of the child window (normally the view) which is repositioned and resized to fill the rest of the client area not filled by control bars.</source>
        </trans-unit>
        <trans-unit id="5984" translate="yes" xml:space="preserve">
          <source>CWnd::RunModalLoop</source>
        </trans-unit>
        <trans-unit id="5985" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve, translate, or dispatch messages until <bpt id="p1">[</bpt>ContinueModal<ept id="p1">](#cwnd__continuemodal)</ept> returns <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="5986" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="5987" translate="yes" xml:space="preserve">
          <source>Specifies the Windows message to be sent.</source>
        </trans-unit>
        <trans-unit id="5988" translate="yes" xml:space="preserve">
          <source>Can be one of the following values:</source>
        </trans-unit>
        <trans-unit id="5989" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MLF_NOIDLEMSG<ept id="p1">**</ept> Don't send <bpt id="p2">[</bpt>WM_ENTERIDLE<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms645422)</ept> messages to the parent.</source>
        </trans-unit>
        <trans-unit id="5990" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MLF_NOKICKIDLE<ept id="p1">**</ept> Don't send <bpt id="p2">**</bpt>WM_KICKIDLE<ept id="p2">**</ept> messages to the window.</source>
        </trans-unit>
        <trans-unit id="5991" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MLF_SHOWONIDLE<ept id="p1">**</ept> Show the window when message queue goes idle.</source>
        </trans-unit>
        <trans-unit id="5992" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="5993" translate="yes" xml:space="preserve">
          <source>Specifies the value of the <ph id="ph1">`nResult`</ph> parameter passed to the <bpt id="p1">[</bpt>EndModalLoop<ept id="p1">](#cwnd__endmodalloop)</ept> member function, which is then used to end the modal loop.</source>
        </trans-unit>
        <trans-unit id="5994" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="5995" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`ContinueModal`</ph> returns <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> after <ph id="ph2">`EndModalLoop`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="5996" translate="yes" xml:space="preserve">
          <source>Returns the value provided as <ph id="ph1">`nResult`</ph> to <ph id="ph2">`EndModalLoop`</ph>.</source>
        </trans-unit>
        <trans-unit id="5997" translate="yes" xml:space="preserve">
          <source>CWnd::ScreenToClient</source>
        </trans-unit>
        <trans-unit id="5998" translate="yes" xml:space="preserve">
          <source>Converts the screen coordinates of a given point or rectangle on the display to client coordinates.</source>
        </trans-unit>
        <trans-unit id="5999" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6000" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>CPoint<ept id="p1">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object or <bpt id="p2">[</bpt>POINT structure<ept id="p2">](../../mfc/reference/point-structure1.md)</ept> that contains the screen coordinates to be converted.</source>
        </trans-unit>
        <trans-unit id="6001" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>CRect<ept id="p1">](../../atl-mfc-shared/reference/crect-class.md)</ept> object or <bpt id="p2">[</bpt>RECT structure<ept id="p2">](../../mfc/reference/rect-structure1.md)</ept> that contains the screen coordinates to be converted.</source>
        </trans-unit>
        <trans-unit id="6002" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6003" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ScreenToClient`</ph> member function replaces the screen coordinates given in <ph id="ph2">`lpPoint`</ph> or <ph id="ph3">`lpRect`</ph> with client coordinates.</source>
        </trans-unit>
        <trans-unit id="6004" translate="yes" xml:space="preserve">
          <source>The new coordinates are relative to the upper-left corner of the <ph id="ph1">`CWnd`</ph> client area.</source>
        </trans-unit>
        <trans-unit id="6005" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="6006" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CListCtrl::GetItemRect<ept id="p1">](../../mfc/reference/clistctrl-class.md#clistctrl__getitemrect)</ept>.</source>
        </trans-unit>
        <trans-unit id="6007" translate="yes" xml:space="preserve">
          <source>CWnd::ScrollWindow</source>
        </trans-unit>
        <trans-unit id="6008" translate="yes" xml:space="preserve">
          <source>Scrolls the contents of the client area of the current <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="6009" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6010" translate="yes" xml:space="preserve">
          <source>Specifies the amount, in device units, of horizontal scrolling.</source>
        </trans-unit>
        <trans-unit id="6011" translate="yes" xml:space="preserve">
          <source>This parameter must be a negative value to scroll to the left.</source>
        </trans-unit>
        <trans-unit id="6012" translate="yes" xml:space="preserve">
          <source>Specifies the amount, in device units, of vertical scrolling.</source>
        </trans-unit>
        <trans-unit id="6013" translate="yes" xml:space="preserve">
          <source>This parameter must be a negative value to scroll up.</source>
        </trans-unit>
        <trans-unit id="6014" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>CRect<ept id="p1">](../../atl-mfc-shared/reference/crect-class.md)</ept> object or <bpt id="p2">[</bpt>RECT structure<ept id="p2">](../../mfc/reference/rect-structure1.md)</ept> that specifies the portion of the client area to be scrolled.</source>
        </trans-unit>
        <trans-unit id="6015" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpRect`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the entire client area is scrolled.</source>
        </trans-unit>
        <trans-unit id="6016" translate="yes" xml:space="preserve">
          <source>The caret is repositioned if the cursor rectangle intersects the scroll rectangle.</source>
        </trans-unit>
        <trans-unit id="6017" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`CRect`</ph> object or <ph id="ph2">`RECT`</ph> structure that specifies the clipping rectangle to scroll.</source>
        </trans-unit>
        <trans-unit id="6018" translate="yes" xml:space="preserve">
          <source>Only bits inside this rectangle are scrolled.</source>
        </trans-unit>
        <trans-unit id="6019" translate="yes" xml:space="preserve">
          <source>Bits outside this rectangle are not affected even if they are in the <ph id="ph1">`lpRect`</ph> rectangle.</source>
        </trans-unit>
        <trans-unit id="6020" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpClipRect`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, no clipping is performed on the scroll rectangle.</source>
        </trans-unit>
        <trans-unit id="6021" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6022" translate="yes" xml:space="preserve">
          <source>If the caret is in the <ph id="ph1">`CWnd`</ph> being scrolled, <ph id="ph2">`ScrollWindow`</ph> automatically hides the caret to prevent it from being erased and then restores the caret after the scroll is finished.</source>
        </trans-unit>
        <trans-unit id="6023" translate="yes" xml:space="preserve">
          <source>The caret position is adjusted accordingly.</source>
        </trans-unit>
        <trans-unit id="6024" translate="yes" xml:space="preserve">
          <source>The area uncovered by the <ph id="ph1">`ScrollWindow`</ph> member function is not repainted but is combined into the current <ph id="ph2">`CWnd`</ph> object's update region.</source>
        </trans-unit>
        <trans-unit id="6025" translate="yes" xml:space="preserve">
          <source>The application will eventually receive a <bpt id="p1">[</bpt>WM_PAINT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145213)</ept> message notifying it that the region needs repainting.</source>
        </trans-unit>
        <trans-unit id="6026" translate="yes" xml:space="preserve">
          <source>To repaint the uncovered area at the same time the scrolling is done, call the <bpt id="p1">[</bpt>UpdateWindow<ept id="p1">](#cwnd__updatewindow)</ept> member function immediately after calling <ph id="ph1">`ScrollWindow`</ph>.</source>
        </trans-unit>
        <trans-unit id="6027" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpRect`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the positions of any child windows in the window are offset by the amount specified by <ph id="ph2">`xAmount`</ph> and <ph id="ph3">`yAmount`</ph>, and any invalid (unpainted) areas in the <ph id="ph4">`CWnd`</ph> are also offset.</source>
        </trans-unit>
        <trans-unit id="6028" translate="yes" xml:space="preserve">
          <source>is faster when <ph id="ph1">`lpRect`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="6029" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpRect`</ph> is not <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the positions of child windows are not changed, and invalid areas in <ph id="ph2">`CWnd`</ph> are not offset.</source>
        </trans-unit>
        <trans-unit id="6030" translate="yes" xml:space="preserve">
          <source>To prevent updating problems when <ph id="ph1">`lpRect`</ph> is not <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, call the <ph id="ph2">`UpdateWindow`</ph> member function to repaint <ph id="ph3">`CWnd`</ph> before calling <ph id="ph4">`ScrollWindow`</ph>.</source>
        </trans-unit>
        <trans-unit id="6031" translate="yes" xml:space="preserve">
          <source>CWnd::ScrollWindowEx</source>
        </trans-unit>
        <trans-unit id="6032" translate="yes" xml:space="preserve">
          <source>Scrolls the contents of a window's client area.</source>
        </trans-unit>
        <trans-unit id="6033" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6034" translate="yes" xml:space="preserve">
          <source>Specifies the amount, in device units, of horizontal scrolling.</source>
        </trans-unit>
        <trans-unit id="6035" translate="yes" xml:space="preserve">
          <source>This parameter must have a negative value to scroll to the left.</source>
        </trans-unit>
        <trans-unit id="6036" translate="yes" xml:space="preserve">
          <source>dy</source>
        </trans-unit>
        <trans-unit id="6037" translate="yes" xml:space="preserve">
          <source>Specifies the amount, in device units, of vertical scrolling.</source>
        </trans-unit>
        <trans-unit id="6038" translate="yes" xml:space="preserve">
          <source>This parameter must have a negative value to scroll up.</source>
        </trans-unit>
        <trans-unit id="6039" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>RECT structure<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> that specifies the portion of the client area to be scrolled.</source>
        </trans-unit>
        <trans-unit id="6040" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the entire client area is scrolled.</source>
        </trans-unit>
        <trans-unit id="6041" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`RECT`</ph> structure that specifies the clipping rectangle to scroll.</source>
        </trans-unit>
        <trans-unit id="6042" translate="yes" xml:space="preserve">
          <source>This structure takes precedence over the rectangle pointed to by <ph id="ph1">`lpRectScroll`</ph>.</source>
        </trans-unit>
        <trans-unit id="6043" translate="yes" xml:space="preserve">
          <source>Only bits inside this rectangle are scrolled.</source>
        </trans-unit>
        <trans-unit id="6044" translate="yes" xml:space="preserve">
          <source>Bits outside this rectangle are not affected even if they are in the <ph id="ph1">`lpRectScroll`</ph> rectangle.</source>
        </trans-unit>
        <trans-unit id="6045" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, no clipping is performed on the scroll rectangle.</source>
        </trans-unit>
        <trans-unit id="6046" translate="yes" xml:space="preserve">
          <source>prgnUpdate</source>
        </trans-unit>
        <trans-unit id="6047" translate="yes" xml:space="preserve">
          <source>Identifies the region that is modified to hold the region invalidated by scrolling.</source>
        </trans-unit>
        <trans-unit id="6048" translate="yes" xml:space="preserve">
          <source>This parameter may be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="6049" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`RECT`</ph> structure that will receive the boundaries of the rectangle invalidated by scrolling.</source>
        </trans-unit>
        <trans-unit id="6050" translate="yes" xml:space="preserve">
          <source>This parameter may be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="6051" translate="yes" xml:space="preserve">
          <source>Can have one of the following values:</source>
        </trans-unit>
        <trans-unit id="6052" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SW_ERASE<ept id="p1">**</ept> When specified with <bpt id="p2">**</bpt>SW_INVALIDATE<ept id="p2">**</ept>, erases the newly invalidated region by sending a <bpt id="p3">[</bpt>WM_ERASEBKGND<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms648055)</ept> message to the window.</source>
        </trans-unit>
        <trans-unit id="6053" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SW_INVALIDATE<ept id="p1">**</ept> Invalidates the region identified by <bpt id="p2">*</bpt>prgnUpdate<ept id="p2">*</ept> after scrolling.</source>
        </trans-unit>
        <trans-unit id="6054" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SW_SCROLLCHILDREN<ept id="p1">**</ept> Scrolls all child windows that intersect the rectangle pointed to by <ph id="ph1">`lpRectScroll`</ph> by the number of pixels specified in <ph id="ph2">`dx`</ph> and <bpt id="p2">*</bpt>dy<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="6055" translate="yes" xml:space="preserve">
          <source>Windows sends a <bpt id="p1">[</bpt>WM_MOVE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632631)</ept> message to all child windows that intersect <ph id="ph1">`lpRectScroll`</ph>, even if they do not move.</source>
        </trans-unit>
        <trans-unit id="6056" translate="yes" xml:space="preserve">
          <source>The caret is repositioned when a child window is scrolled and the cursor rectangle intersects the scroll rectangle.</source>
        </trans-unit>
        <trans-unit id="6057" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6058" translate="yes" xml:space="preserve">
          <source>The return value is <bpt id="p1">**</bpt>SIMPLEREGION<ept id="p1">**</ept> (rectangular invalidated region), <bpt id="p2">**</bpt>COMPLEXREGION<ept id="p2">**</ept> (nonrectangular invalidated region; overlapping rectangles), or <bpt id="p3">**</bpt>NULLREGION<ept id="p3">**</ept> (no invalidated region), if the function is successful; otherwise the return value is <bpt id="p4">**</bpt>ERROR<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="6059" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6060" translate="yes" xml:space="preserve">
          <source>This function is similar to the <bpt id="p1">[</bpt>ScrollWindow<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787591)</ept> function, with some additional features.</source>
        </trans-unit>
        <trans-unit id="6061" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">[</bpt>SW_INVALIDATE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787593)</ept> and <bpt id="p2">[</bpt>SW_ERASE<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb787593)</ept> are not specified, the <ph id="ph1">`ScrollWindowEx`</ph> member function does not invalidate the area that is scrolled away from.</source>
        </trans-unit>
        <trans-unit id="6062" translate="yes" xml:space="preserve">
          <source>If either of these flags is set, <ph id="ph1">`ScrollWindowEx`</ph> invalidates this area.</source>
        </trans-unit>
        <trans-unit id="6063" translate="yes" xml:space="preserve">
          <source>The area is not updated until the application calls the <bpt id="p1">[</bpt>UpdateWindow<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145167)</ept> member function, calls the <bpt id="p2">[</bpt>RedrawWindow<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd162911)</ept> member function (specifying <bpt id="p3">[</bpt>RDW_UPDATENOW<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/dd162911)</ept> or <bpt id="p4">[</bpt>RDW_ERASENOW<ept id="p4">](http://msdn.microsoft.com/library/windows/desktop/dd162911)</ept>), or retrieves the <bpt id="p5">[</bpt>WM_PAINT<ept id="p5">](http://msdn.microsoft.com/library/windows/desktop/dd145213)</ept> message from the application queue.</source>
        </trans-unit>
        <trans-unit id="6064" translate="yes" xml:space="preserve">
          <source>If the window has the <bpt id="p1">[</bpt>WS_CLIPCHILDREN<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632679)</ept> style, the returned areas specified by <bpt id="p2">*</bpt>prgnUpdate<ept id="p2">*</ept> and <ph id="ph1">`lpRectUpdate`</ph> represent the total area of the scrolled window that must be updated, including any areas in child windows that need updating.</source>
        </trans-unit>
        <trans-unit id="6065" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">[</bpt>SW_SCROLLCHILDREN<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787593)</ept> flag is specified, Windows will not properly update the screen if part of a child window is scrolled.</source>
        </trans-unit>
        <trans-unit id="6066" translate="yes" xml:space="preserve">
          <source>The part of the scrolled child window that lies outside the source rectangle will not be erased and will not be redrawn properly in its new destination.</source>
        </trans-unit>
        <trans-unit id="6067" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>DeferWindowPos<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632681)</ept> Windows function to move child windows that do not lie completely within the <ph id="ph1">`lpRectScroll`</ph> rectangle.</source>
        </trans-unit>
        <trans-unit id="6068" translate="yes" xml:space="preserve">
          <source>The cursor is repositioned if the <bpt id="p1">**</bpt>SW_SCROLLCHILDREN<ept id="p1">**</ept> flag is set and the caret rectangle intersects the scroll rectangle.</source>
        </trans-unit>
        <trans-unit id="6069" translate="yes" xml:space="preserve">
          <source>All input and output coordinates (for <ph id="ph1">`lpRectScroll`</ph>, <ph id="ph2">`lpRectClip`</ph>, <ph id="ph3">`lpRectUpdate`</ph>, and <bpt id="p1">*</bpt>prgnUpdate<ept id="p1">*</ept>) are assumed to be in client coordinates, regardless of whether the window has the <bpt id="p2">**</bpt>CS_OWNDC<ept id="p2">**</ept> or <bpt id="p3">**</bpt>CS_CLASSDC<ept id="p3">**</ept> class style.</source>
        </trans-unit>
        <trans-unit id="6070" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>LPtoDP<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145042)</ept> and <bpt id="p2">[</bpt>DPtoLP<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd162474)</ept> Windows functions to convert to and from logical coordinates, if necessary.</source>
        </trans-unit>
        <trans-unit id="6071" translate="yes" xml:space="preserve">
          <source>CWnd::SendChildNotifyLastMsg</source>
        </trans-unit>
        <trans-unit id="6072" translate="yes" xml:space="preserve">
          <source>This member function is called by the framework to provide a notification message to a child window, from the parent window, so the child window can handle a task.</source>
        </trans-unit>
        <trans-unit id="6073" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6074" translate="yes" xml:space="preserve">
          <source>The result generated by the child window to be returned by the parent window.</source>
        </trans-unit>
        <trans-unit id="6075" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6076" translate="yes" xml:space="preserve">
          <source>Nonzero if the child window has handled the message sent to its parent; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="6077" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6078" translate="yes" xml:space="preserve">
          <source>send the current message to the source if it is a message that is reflected.</source>
        </trans-unit>
        <trans-unit id="6079" translate="yes" xml:space="preserve">
          <source>For more information about message reflection, see <bpt id="p1">[</bpt>Handling Reflected Messages<ept id="p1">](../../mfc/handling-reflected-messages.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="6080" translate="yes" xml:space="preserve">
          <source>CWnd::SendDlgItemMessage</source>
        </trans-unit>
        <trans-unit id="6081" translate="yes" xml:space="preserve">
          <source>Sends a message to a control.</source>
        </trans-unit>
        <trans-unit id="6082" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6083" translate="yes" xml:space="preserve">
          <source>Specifies the identifier of the dialog control that will receive the message.</source>
        </trans-unit>
        <trans-unit id="6084" translate="yes" xml:space="preserve">
          <source>Specifies the message to be sent.</source>
        </trans-unit>
        <trans-unit id="6085" translate="yes" xml:space="preserve">
          <source>Specifies additional message-dependent information.</source>
        </trans-unit>
        <trans-unit id="6086" translate="yes" xml:space="preserve">
          <source>Specifies additional message-dependent information.</source>
        </trans-unit>
        <trans-unit id="6087" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6088" translate="yes" xml:space="preserve">
          <source>Specifies the value returned by the control's window procedure, or 0 if the control was not found.</source>
        </trans-unit>
        <trans-unit id="6089" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6090" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SendDlgItemMessage`</ph> member function does not return until the message has been processed.</source>
        </trans-unit>
        <trans-unit id="6091" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`SendDlgItemMessage`</ph> is identical to obtaining a <ph id="ph2">`CWnd`</ph>* to the given control and calling the <bpt id="p1">[</bpt>SendMessage<ept id="p1">](#cwnd__sendmessage)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="6092" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="6093" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#113</source>
        </trans-unit>
        <trans-unit id="6094" translate="yes" xml:space="preserve">
          <source>CWnd::SendMessage</source>
        </trans-unit>
        <trans-unit id="6095" translate="yes" xml:space="preserve">
          <source>Sends the specified message to this window.</source>
        </trans-unit>
        <trans-unit id="6096" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6097" translate="yes" xml:space="preserve">
          <source>Specifies the message to be sent.</source>
        </trans-unit>
        <trans-unit id="6098" translate="yes" xml:space="preserve">
          <source>Specifies additional message-dependent information.</source>
        </trans-unit>
        <trans-unit id="6099" translate="yes" xml:space="preserve">
          <source>Specifies additional message-dependent information.</source>
        </trans-unit>
        <trans-unit id="6100" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6101" translate="yes" xml:space="preserve">
          <source>The result of the message processing; its value depends on the message sent.</source>
        </trans-unit>
        <trans-unit id="6102" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6103" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>SendMessage<ept id="p1">**</ept> member function calls the window procedure directly and does not return until that window procedure has processed the message.</source>
        </trans-unit>
        <trans-unit id="6104" translate="yes" xml:space="preserve">
          <source>This is in contrast to the <bpt id="p1">[</bpt>PostMessage<ept id="p1">](#cwnd__postmessage)</ept> member function, which places the message into the window's message queue and returns immediately.</source>
        </trans-unit>
        <trans-unit id="6105" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="6106" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#101</source>
        </trans-unit>
        <trans-unit id="6107" translate="yes" xml:space="preserve">
          <source>CWnd::SendMessageToDescendants</source>
        </trans-unit>
        <trans-unit id="6108" translate="yes" xml:space="preserve">
          <source>Call this member function to send the specified Windows message to all descendant windows.</source>
        </trans-unit>
        <trans-unit id="6109" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6110" translate="yes" xml:space="preserve">
          <source>Specifies the message to be sent.</source>
        </trans-unit>
        <trans-unit id="6111" translate="yes" xml:space="preserve">
          <source>Specifies additional message-dependent information.</source>
        </trans-unit>
        <trans-unit id="6112" translate="yes" xml:space="preserve">
          <source>Specifies additional message-dependent information.</source>
        </trans-unit>
        <trans-unit id="6113" translate="yes" xml:space="preserve">
          <source>Specifies the level to which to search.</source>
        </trans-unit>
        <trans-unit id="6114" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, recursively search all children; if <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>, search only immediate children.</source>
        </trans-unit>
        <trans-unit id="6115" translate="yes" xml:space="preserve">
          <source>Specifies whether the message will be received by temporary windows.</source>
        </trans-unit>
        <trans-unit id="6116" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, temporary windows can receive the message; if <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>, only permanent windows receive the message.</source>
        </trans-unit>
        <trans-unit id="6117" translate="yes" xml:space="preserve">
          <source>For more information on temporary windows see <bpt id="p1">[</bpt>Technical Note 3<ept id="p1">](../../mfc/tn003-mapping-of-windows-handles-to-objects.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="6118" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6119" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bDeep`</ph> is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, the message is sent just to the immediate children of the window; otherwise the message is sent to all descendant windows.</source>
        </trans-unit>
        <trans-unit id="6120" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bDeep`</ph> and <ph id="ph2">`bOnlyPerm`</ph> are <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the search continues below temporary windows.</source>
        </trans-unit>
        <trans-unit id="6121" translate="yes" xml:space="preserve">
          <source>In this case, only permanent windows encountered during the search receive the message.</source>
        </trans-unit>
        <trans-unit id="6122" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bDeep`</ph> is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, the message is sent only to the immediate children of the window.</source>
        </trans-unit>
        <trans-unit id="6123" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="6124" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#114</source>
        </trans-unit>
        <trans-unit id="6125" translate="yes" xml:space="preserve">
          <source>CWnd::SendNotifyMessage</source>
        </trans-unit>
        <trans-unit id="6126" translate="yes" xml:space="preserve">
          <source>Sends the specified message to the window.</source>
        </trans-unit>
        <trans-unit id="6127" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6128" translate="yes" xml:space="preserve">
          <source>Specifies the message to be sent.</source>
        </trans-unit>
        <trans-unit id="6129" translate="yes" xml:space="preserve">
          <source>Specifies additional message-dependent information.</source>
        </trans-unit>
        <trans-unit id="6130" translate="yes" xml:space="preserve">
          <source>Specifies additional message-dependent information.</source>
        </trans-unit>
        <trans-unit id="6131" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6132" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="6133" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6134" translate="yes" xml:space="preserve">
          <source>If the window was created by the calling thread, <ph id="ph1">`SendNotifyMessage`</ph> calls the window procedure for the window and does not return until the window procedure has processed the message.</source>
        </trans-unit>
        <trans-unit id="6135" translate="yes" xml:space="preserve">
          <source>If the window was created by a different thread, <ph id="ph1">`SendNotifyMessage`</ph> passes the message to the window procedure and returns immediately; it does not wait for the window procedure to finish processing the message.</source>
        </trans-unit>
        <trans-unit id="6136" translate="yes" xml:space="preserve">
          <source>CWnd::SetActiveWindow</source>
        </trans-unit>
        <trans-unit id="6137" translate="yes" xml:space="preserve">
          <source>Makes <ph id="ph1">`CWnd`</ph> the active window.</source>
        </trans-unit>
        <trans-unit id="6138" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6139" translate="yes" xml:space="preserve">
          <source>The window that was previously active.</source>
        </trans-unit>
        <trans-unit id="6140" translate="yes" xml:space="preserve">
          <source>The returned pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="6141" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SetActiveWindow`</ph> member function should be used with care since it allows an application to arbitrarily take over the active window and input focus.</source>
        </trans-unit>
        <trans-unit id="6143" translate="yes" xml:space="preserve">
          <source>Normally, Windows takes care of all activation.</source>
        </trans-unit>
        <trans-unit id="6144" translate="yes" xml:space="preserve">
          <source>CWnd::SetCapture</source>
        </trans-unit>
        <trans-unit id="6145" translate="yes" xml:space="preserve">
          <source>Causes all subsequent mouse input to be sent to the current <ph id="ph1">`CWnd`</ph> object regardless of the position of the cursor.</source>
        </trans-unit>
        <trans-unit id="6146" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6147" translate="yes" xml:space="preserve">
          <source>A pointer to the window object that previously received all mouse input.</source>
        </trans-unit>
        <trans-unit id="6148" translate="yes" xml:space="preserve">
          <source>It is <ph id="ph1">`NULL`</ph> if there is no such window.</source>
        </trans-unit>
        <trans-unit id="6149" translate="yes" xml:space="preserve">
          <source>The returned pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="6150" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6151" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`CWnd`</ph> no longer requires all mouse input, the application should call the <bpt id="p1">[</bpt>ReleaseCapture<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646261)</ept> function so that other windows can receive mouse input.</source>
        </trans-unit>
        <trans-unit id="6152" translate="yes" xml:space="preserve">
          <source>While mouse input is captured, no <ph id="ph1">`WM_NCHITTEST`</ph> or <ph id="ph2">`WM_SETCURSOR`</ph> messages are sent to the active window.</source>
        </trans-unit>
        <trans-unit id="6153" translate="yes" xml:space="preserve">
          <source>CWnd::SetCaretPos</source>
        </trans-unit>
        <trans-unit id="6154" translate="yes" xml:space="preserve">
          <source>Sets the position of the caret.</source>
        </trans-unit>
        <trans-unit id="6155" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6156" translate="yes" xml:space="preserve">
          <source>Specifies the new x and y coordinates (in client coordinates) of the caret.</source>
        </trans-unit>
        <trans-unit id="6157" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SetCaretPos`</ph> member function moves the caret only if it is owned by a window in the current task.</source>
        </trans-unit>
        <trans-unit id="6159" translate="yes" xml:space="preserve">
          <source>moves the caret whether or not the caret is hidden.</source>
        </trans-unit>
        <trans-unit id="6160" translate="yes" xml:space="preserve">
          <source>The caret is a shared resource.</source>
        </trans-unit>
        <trans-unit id="6161" translate="yes" xml:space="preserve">
          <source>A window should not move the caret if it does not own the caret.</source>
        </trans-unit>
        <trans-unit id="6162" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="6163" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#115</source>
        </trans-unit>
        <trans-unit id="6164" translate="yes" xml:space="preserve">
          <source>CWnd::SetClipboardViewer</source>
        </trans-unit>
        <trans-unit id="6165" translate="yes" xml:space="preserve">
          <source>Adds this window to the chain of windows that are notified (by means of the <ph id="ph1">`WM_DRAWCLIPBOARD`</ph> message) whenever the content of the Clipboard is changed.</source>
        </trans-unit>
        <trans-unit id="6166" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6167" translate="yes" xml:space="preserve">
          <source>A handle to the next window in the Clipboard-viewer chain if successful.</source>
        </trans-unit>
        <trans-unit id="6168" translate="yes" xml:space="preserve">
          <source>Applications should save this handle (it can be stored as a member variable) and use it when responding to Clipboard-viewer chain messages.</source>
        </trans-unit>
        <trans-unit id="6169" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6170" translate="yes" xml:space="preserve">
          <source>A window that is part of the Clipboard-viewer chain must respond to <bpt id="p1">[</bpt>WM_DRAWCLIPBOARD<ept id="p1">](#cwnd__ondrawclipboard)</ept>, <bpt id="p2">[</bpt>WM_CHANGECBCHAIN<ept id="p2">](#cwnd__onchangecbchain)</ept>, and <bpt id="p3">[</bpt>WM_DESTROY<ept id="p3">](#cwnd__ondestroy)</ept> messages and pass the message to the next window in the chain.</source>
        </trans-unit>
        <trans-unit id="6171" translate="yes" xml:space="preserve">
          <source>This member function sends a <ph id="ph1">`WM_DRAWCLIPBOARD`</ph> message to the window.</source>
        </trans-unit>
        <trans-unit id="6172" translate="yes" xml:space="preserve">
          <source>Since the handle to the next window in the Clipboard-viewer chain has not yet been returned, the application should not pass on the <ph id="ph1">`WM_DRAWCLIPBOARD`</ph> message that it receives during the call to <ph id="ph2">`SetClipboardViewer`</ph>.</source>
        </trans-unit>
        <trans-unit id="6173" translate="yes" xml:space="preserve">
          <source>To remove itself from the Clipboard-viewer chain, an application must call the <bpt id="p1">[</bpt>ChangeClipboardChain<ept id="p1">](#cwnd__changeclipboardchain)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="6174" translate="yes" xml:space="preserve">
          <source>CWnd::SetDlgCtrlID</source>
        </trans-unit>
        <trans-unit id="6175" translate="yes" xml:space="preserve">
          <source>Sets the window ID or control ID for the window to a new value.</source>
        </trans-unit>
        <trans-unit id="6176" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6177" translate="yes" xml:space="preserve">
          <source>The new value to set for the control's identifier.</source>
        </trans-unit>
        <trans-unit id="6178" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6179" translate="yes" xml:space="preserve">
          <source>The previous identifier of the window, if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="6180" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6181" translate="yes" xml:space="preserve">
          <source>The window can be any child window, not only a control in a dialog box.</source>
        </trans-unit>
        <trans-unit id="6182" translate="yes" xml:space="preserve">
          <source>The window cannot be a top-level window.</source>
        </trans-unit>
        <trans-unit id="6183" translate="yes" xml:space="preserve">
          <source>CWnd::SetDlgItemInt</source>
        </trans-unit>
        <trans-unit id="6184" translate="yes" xml:space="preserve">
          <source>Sets the text of a given control in a dialog box to the string representation of a specified integer value.</source>
        </trans-unit>
        <trans-unit id="6185" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6186" translate="yes" xml:space="preserve">
          <source>Specifies the integer ID of the control to be changed.</source>
        </trans-unit>
        <trans-unit id="6187" translate="yes" xml:space="preserve">
          <source>Specifies the integer value used to generate the item text.</source>
        </trans-unit>
        <trans-unit id="6188" translate="yes" xml:space="preserve">
          <source>Specifies whether the integer value is signed or unsigned.</source>
        </trans-unit>
        <trans-unit id="6189" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, <ph id="ph1">`nValue`</ph> is signed.</source>
        </trans-unit>
        <trans-unit id="6190" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> and <ph id="ph1">`nValue`</ph> is less than 0, a minus sign is placed before the first digit in the string.</source>
        </trans-unit>
        <trans-unit id="6191" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, <ph id="ph1">`nValue`</ph> is unsigned.</source>
        </trans-unit>
        <trans-unit id="6192" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6193" translate="yes" xml:space="preserve">
          <source>sends a <bpt id="p1">[</bpt>WM_SETTEXT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632644)</ept> message to the given control.</source>
        </trans-unit>
        <trans-unit id="6194" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="6195" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CWnd::SetDlgItemText<ept id="p1">](#cwnd__setdlgitemtext)</ept>.</source>
        </trans-unit>
        <trans-unit id="6196" translate="yes" xml:space="preserve">
          <source>CWnd::SetDlgItemText</source>
        </trans-unit>
        <trans-unit id="6197" translate="yes" xml:space="preserve">
          <source>Sets the caption or text of a control owned by a window or dialog box.</source>
        </trans-unit>
        <trans-unit id="6198" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6199" translate="yes" xml:space="preserve">
          <source>Identifies the control whose text is to be set.</source>
        </trans-unit>
        <trans-unit id="6200" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object or null-terminated string that contains the text to be copied to the control.</source>
        </trans-unit>
        <trans-unit id="6201" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6202" translate="yes" xml:space="preserve">
          <source>sends a <bpt id="p1">[</bpt>WM_SETTEXT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632644)</ept> message to the given control.</source>
        </trans-unit>
        <trans-unit id="6203" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="6204" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#116</source>
        </trans-unit>
        <trans-unit id="6205" translate="yes" xml:space="preserve">
          <source>CWnd::SetForegroundWindow</source>
        </trans-unit>
        <trans-unit id="6206" translate="yes" xml:space="preserve">
          <source>Puts the thread that created the window into the foreground and activates the window.</source>
        </trans-unit>
        <trans-unit id="6207" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6208" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="6209" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6210" translate="yes" xml:space="preserve">
          <source>Keyboard input is directed to the window, and various visual cues are changed for the user.</source>
        </trans-unit>
        <trans-unit id="6211" translate="yes" xml:space="preserve">
          <source>The foreground window is the window with which the user is currently working.</source>
        </trans-unit>
        <trans-unit id="6212" translate="yes" xml:space="preserve">
          <source>The foreground window applies only to top-level windows (frame windows or dialogs boxes).</source>
        </trans-unit>
        <trans-unit id="6213" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="6214" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CWnd::FindWindow<ept id="p1">](#cwnd__findwindow)</ept>.</source>
        </trans-unit>
        <trans-unit id="6215" translate="yes" xml:space="preserve">
          <source>CWnd::SetFocus</source>
        </trans-unit>
        <trans-unit id="6216" translate="yes" xml:space="preserve">
          <source>Claims the input focus.</source>
        </trans-unit>
        <trans-unit id="6217" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6218" translate="yes" xml:space="preserve">
          <source>A pointer to the window object that previously had the input focus.</source>
        </trans-unit>
        <trans-unit id="6219" translate="yes" xml:space="preserve">
          <source>It is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if there is no such window.</source>
        </trans-unit>
        <trans-unit id="6220" translate="yes" xml:space="preserve">
          <source>The returned pointer may be temporary and should not be stored.</source>
        </trans-unit>
        <trans-unit id="6221" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6222" translate="yes" xml:space="preserve">
          <source>The input focus directs all subsequent keyboard input to this window.</source>
        </trans-unit>
        <trans-unit id="6223" translate="yes" xml:space="preserve">
          <source>Any window that previously had the input focus loses it.</source>
        </trans-unit>
        <trans-unit id="6224" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SetFocus`</ph> member function sends a <bpt id="p1">[</bpt>WM_KILLFOCUS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646282)</ept> message to the window that loses the input focus and a <bpt id="p2">[</bpt>WM_SETFOCUS<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms646283)</ept> message to the window that receives the input focus.</source>
        </trans-unit>
        <trans-unit id="6225" translate="yes" xml:space="preserve">
          <source>It also activates either the window or its parent.</source>
        </trans-unit>
        <trans-unit id="6226" translate="yes" xml:space="preserve">
          <source>If the current window is active but does not have the focus (that is, no window has the focus), any key pressed will produce the messages <bpt id="p1">[</bpt>WM_SYSCHAR<ept id="p1">](#cwnd__onsyschar)</ept>, <bpt id="p2">[</bpt>WM_SYSKEYDOWN<ept id="p2">](#cwnd__onsyskeydown)</ept>, or <bpt id="p3">[</bpt>WM_SYSKEYUP<ept id="p3">](#cwnd__onsyskeyup)</ept>.</source>
        </trans-unit>
        <trans-unit id="6227" translate="yes" xml:space="preserve">
          <source>CWnd::SetFont</source>
        </trans-unit>
        <trans-unit id="6228" translate="yes" xml:space="preserve">
          <source>Sends the <ph id="ph1">`WM_SETFONT`</ph> message to the window to use the specified font.</source>
        </trans-unit>
        <trans-unit id="6229" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6230" translate="yes" xml:space="preserve">
          <source>Pointer to a <ph id="ph1">`CFont`</ph> object.</source>
        </trans-unit>
        <trans-unit id="6231" translate="yes" xml:space="preserve">
          <source>for the window to redraw immediately after it processes the <ph id="ph1">`WM_SETFONT`</ph> message; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="6232" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6233" translate="yes" xml:space="preserve">
          <source>This method has no effect unless the window processes the <ph id="ph1">`WM_SETFONT`</ph> message.</source>
        </trans-unit>
        <trans-unit id="6234" translate="yes" xml:space="preserve">
          <source>Many MFC classes that derive from <ph id="ph1">`CWnd`</ph> process this message because they are attached to a predefined window class that includes a message handler for the <ph id="ph2">`WM_SETFONT`</ph> message.</source>
        </trans-unit>
        <trans-unit id="6235" translate="yes" xml:space="preserve">
          <source>To use this method, classes that you derive from <ph id="ph1">`CWnd`</ph> must define a method handler for the <ph id="ph2">`WM_SETFONT`</ph> message.</source>
        </trans-unit>
        <trans-unit id="6236" translate="yes" xml:space="preserve">
          <source>CWnd::SetIcon</source>
        </trans-unit>
        <trans-unit id="6237" translate="yes" xml:space="preserve">
          <source>Call this member function to set the handle to a specific icon, as identified by <ph id="ph1">`hIcon`</ph>.</source>
        </trans-unit>
        <trans-unit id="6238" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6239" translate="yes" xml:space="preserve">
          <source>A handle to a previous icon.</source>
        </trans-unit>
        <trans-unit id="6240" translate="yes" xml:space="preserve">
          <source>Specifies a 32 pixel by 32 pixel icon if <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>; specifies a 16 pixel by 16 pixel icon if <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="6241" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6242" translate="yes" xml:space="preserve">
          <source>A handle to an icon.</source>
        </trans-unit>
        <trans-unit id="6243" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6244" translate="yes" xml:space="preserve">
          <source>When the window class is registered, it selects an icon.</source>
        </trans-unit>
        <trans-unit id="6245" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="6246" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CWnd::GetSystemMenu<ept id="p1">](#cwnd__getsystemmenu)</ept>.</source>
        </trans-unit>
        <trans-unit id="6247" translate="yes" xml:space="preserve">
          <source>CWnd::SetLayeredWindowAttributes</source>
        </trans-unit>
        <trans-unit id="6248" translate="yes" xml:space="preserve">
          <source>Sets the opacity and transparency color key of a layered window.</source>
        </trans-unit>
        <trans-unit id="6249" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6250" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">**</bpt>COLORREF<ept id="p1">**</ept> value that specifies the transparency color key to be used when composing the layered window.</source>
        </trans-unit>
        <trans-unit id="6251" translate="yes" xml:space="preserve">
          <source>All pixels painted by the window in this color will be transparent.</source>
        </trans-unit>
        <trans-unit id="6252" translate="yes" xml:space="preserve">
          <source>To generate a <bpt id="p1">**</bpt>COLORREF<ept id="p1">**</ept>, use the RGB macro.</source>
        </trans-unit>
        <trans-unit id="6253" translate="yes" xml:space="preserve">
          <source>Alpha value used to describe the opacity of the layered window.</source>
        </trans-unit>
        <trans-unit id="6254" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">**</bpt>SourceConstantAlpha<ept id="p1">**</ept> member of the <bpt id="p2">[</bpt>BLENDFUNCTION<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd183393)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="6255" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`bAlpha`</ph> is 0, the window is completely transparent.</source>
        </trans-unit>
        <trans-unit id="6256" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`bAlpha`</ph> is 255, the window is opaque.</source>
        </trans-unit>
        <trans-unit id="6257" translate="yes" xml:space="preserve">
          <source>Specifies an action to take.</source>
        </trans-unit>
        <trans-unit id="6258" translate="yes" xml:space="preserve">
          <source>This parameter can be one or more of the following values.</source>
        </trans-unit>
        <trans-unit id="6259" translate="yes" xml:space="preserve">
          <source>For a list of possible values, see <bpt id="p1">[</bpt>SetLayeredWindowAttributes<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633540)</ept>.</source>
        </trans-unit>
        <trans-unit id="6260" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6261" translate="yes" xml:space="preserve">
          <source>Nonzero if the function succeeds; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="6262" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6263" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the function <bpt id="p1">[</bpt>SetLayeredWindowAttributes<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633540)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="6264" translate="yes" xml:space="preserve">
          <source>CWnd::SetMenu</source>
        </trans-unit>
        <trans-unit id="6265" translate="yes" xml:space="preserve">
          <source>Sets the current menu to the specified menu.</source>
        </trans-unit>
        <trans-unit id="6266" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6267" translate="yes" xml:space="preserve">
          <source>Identifies the new menu.</source>
        </trans-unit>
        <trans-unit id="6268" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the current menu is removed.</source>
        </trans-unit>
        <trans-unit id="6269" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6270" translate="yes" xml:space="preserve">
          <source>Nonzero if the menu is changed; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="6271" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6272" translate="yes" xml:space="preserve">
          <source>Causes the window to be redrawn to reflect the menu change.</source>
        </trans-unit>
        <trans-unit id="6273" translate="yes" xml:space="preserve">
          <source>will not destroy a previous menu.</source>
        </trans-unit>
        <trans-unit id="6274" translate="yes" xml:space="preserve">
          <source>An application should call the <bpt id="p1">[</bpt>CMenu::DestroyMenu<ept id="p1">](../../mfc/reference/cmenu-class.md#cmenu__destroymenu)</ept> member function to accomplish this task.</source>
        </trans-unit>
        <trans-unit id="6275" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="6276" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CMenu::LoadMenu<ept id="p1">](../../mfc/reference/cmenu-class.md#cmenu__loadmenu)</ept>.</source>
        </trans-unit>
        <trans-unit id="6277" translate="yes" xml:space="preserve">
          <source>CWnd::SetOwner</source>
        </trans-unit>
        <trans-unit id="6278" translate="yes" xml:space="preserve">
          <source>Sets the current window's owner to the specified window object.</source>
        </trans-unit>
        <trans-unit id="6279" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6280" translate="yes" xml:space="preserve">
          <source>pOwnerWnd</source>
        </trans-unit>
        <trans-unit id="6281" translate="yes" xml:space="preserve">
          <source>Identifies the new owner of the window object.</source>
        </trans-unit>
        <trans-unit id="6282" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the window object has no owner.</source>
        </trans-unit>
        <trans-unit id="6283" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6284" translate="yes" xml:space="preserve">
          <source>This owner can then receive command messages from the current window object.</source>
        </trans-unit>
        <trans-unit id="6285" translate="yes" xml:space="preserve">
          <source>By default, the parent of the current window is its owner.</source>
        </trans-unit>
        <trans-unit id="6286" translate="yes" xml:space="preserve">
          <source>It is often useful to establish connections between window objects that are unrelated to the window hierarchy.</source>
        </trans-unit>
        <trans-unit id="6287" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">[</bpt>CToolBar<ept id="p1">](../../mfc/reference/ctoolbar-class.md)</ept> sends notifications to its owner instead of to its parent.</source>
        </trans-unit>
        <trans-unit id="6288" translate="yes" xml:space="preserve">
          <source>This allows the toolbar to become the child of one window (such as an OLE container application window) while sending notifications to another window (such as the in-place frame window).</source>
        </trans-unit>
        <trans-unit id="6289" translate="yes" xml:space="preserve">
          <source>Furthermore, when a server window is deactivated or activated during in-place editing, any window owned by the frame window is hidden or shown.</source>
        </trans-unit>
        <trans-unit id="6290" translate="yes" xml:space="preserve">
          <source>This ownership is explicitly set with a call to <ph id="ph1">`SetOwner`</ph>.</source>
        </trans-unit>
        <trans-unit id="6291" translate="yes" xml:space="preserve">
          <source>The ownership concept of this function is different from the ownership concept of <bpt id="p1">[</bpt>GetWindow<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633515)</ept>.</source>
        </trans-unit>
        <trans-unit id="6292" translate="yes" xml:space="preserve">
          <source>CWnd::SetParent</source>
        </trans-unit>
        <trans-unit id="6293" translate="yes" xml:space="preserve">
          <source>Changes the parent window of a child window.</source>
        </trans-unit>
        <trans-unit id="6294" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6295" translate="yes" xml:space="preserve">
          <source>pWndNewParent</source>
        </trans-unit>
        <trans-unit id="6296" translate="yes" xml:space="preserve">
          <source>Identifies the new parent window.</source>
        </trans-unit>
        <trans-unit id="6297" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6298" translate="yes" xml:space="preserve">
          <source>A pointer to the previous parent window object if successful.</source>
        </trans-unit>
        <trans-unit id="6299" translate="yes" xml:space="preserve">
          <source>The returned pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="6300" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6301" translate="yes" xml:space="preserve">
          <source>If the child window is visible, Windows performs the appropriate redrawing and repainting.</source>
        </trans-unit>
        <trans-unit id="6302" translate="yes" xml:space="preserve">
          <source>CWnd::SetProperty</source>
        </trans-unit>
        <trans-unit id="6303" translate="yes" xml:space="preserve">
          <source>Call this member function to set the OLE control property specified by <ph id="ph1">`dwDispID`</ph>.</source>
        </trans-unit>
        <trans-unit id="6304" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6305" translate="yes" xml:space="preserve">
          <source>Identifies the property to be set.</source>
        </trans-unit>
        <trans-unit id="6306" translate="yes" xml:space="preserve">
          <source>Specifies the type of the property to be set.</source>
        </trans-unit>
        <trans-unit id="6307" translate="yes" xml:space="preserve">
          <source>For possible values, see the Remarks section for <bpt id="p1">[</bpt>COleDispatchDriver::InvokeHelper<ept id="p1">](../../mfc/reference/coledispatchdriver-class.md#coledispatchdriver__invokehelper)</ept>.</source>
        </trans-unit>
        <trans-unit id="6308" translate="yes" xml:space="preserve">
          <source>...</source>
        </trans-unit>
        <trans-unit id="6309" translate="yes" xml:space="preserve">
          <source>A single parameter of the type specified by <ph id="ph1">`vtProp`</ph>.</source>
        </trans-unit>
        <trans-unit id="6310" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6311" translate="yes" xml:space="preserve">
          <source>This function should be called only on a <ph id="ph1">`CWnd`</ph> object that represents an OLE control.</source>
        </trans-unit>
        <trans-unit id="6312" translate="yes" xml:space="preserve">
          <source>For more information about using this member function with OLE Control Containers, see the article <bpt id="p1">[</bpt>ActiveX Control Containers: Programming ActiveX Controls in an ActiveX Control Container<ept id="p1">](../../mfc/programming-activex-controls-in-a-activex-control-container.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="6313" translate="yes" xml:space="preserve">
          <source>CWnd::SetRedraw</source>
        </trans-unit>
        <trans-unit id="6314" translate="yes" xml:space="preserve">
          <source>An application calls <ph id="ph1">`SetRedraw`</ph> to allow changes to be redrawn or to prevent changes from being redrawn.</source>
        </trans-unit>
        <trans-unit id="6315" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6316" translate="yes" xml:space="preserve">
          <source>Specifies the state of the redraw flag.</source>
        </trans-unit>
        <trans-unit id="6317" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the redraw flag is set; if <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>, the flag is cleared.</source>
        </trans-unit>
        <trans-unit id="6318" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6319" translate="yes" xml:space="preserve">
          <source>This member function sets or clears the redraw flag.</source>
        </trans-unit>
        <trans-unit id="6320" translate="yes" xml:space="preserve">
          <source>While the redraw flag is cleared, the contents will not be updated after each change and will not be repainted until the redraw flag is set.</source>
        </trans-unit>
        <trans-unit id="6321" translate="yes" xml:space="preserve">
          <source>For example, an application that needs to add several items to a list box can clear the redraw flag, add the items, and then set the redraw flag.</source>
        </trans-unit>
        <trans-unit id="6322" translate="yes" xml:space="preserve">
          <source>Finally, the application can call the <bpt id="p1">[</bpt>Invalidate<ept id="p1">](#cwnd__invalidate)</ept> or <bpt id="p2">[</bpt>InvalidateRect<ept id="p2">](#cwnd__invalidaterect)</ept> member function to cause the list box to be repainted.</source>
        </trans-unit>
        <trans-unit id="6323" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="6324" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#117</source>
        </trans-unit>
        <trans-unit id="6325" translate="yes" xml:space="preserve">
          <source>CWnd::SetScrollInfo</source>
        </trans-unit>
        <trans-unit id="6326" translate="yes" xml:space="preserve">
          <source>Call this member function to set the information that the <ph id="ph1">`SCROLLINFO`</ph> structure maintains about a scroll bar.</source>
        </trans-unit>
        <trans-unit id="6327" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6328" translate="yes" xml:space="preserve">
          <source>Specifies whether the scroll bar is a control or part of a window's nonclient area.</source>
        </trans-unit>
        <trans-unit id="6329" translate="yes" xml:space="preserve">
          <source>If it is part of the nonclient area, nBar also indicates whether the scroll bar is positioned horizontally, vertically, or both.</source>
        </trans-unit>
        <trans-unit id="6330" translate="yes" xml:space="preserve">
          <source>It must be one of the following:</source>
        </trans-unit>
        <trans-unit id="6331" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_CTL<ept id="p1">**</ept> Contains the parameters for a scroll bar control.</source>
        </trans-unit>
        <trans-unit id="6332" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`m_hWnd`</ph> data member must be the handle of the scroll bar control.</source>
        </trans-unit>
        <trans-unit id="6333" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_HORZ<ept id="p1">**</ept> Specifies that the window is a horizontal scroll bar.</source>
        </trans-unit>
        <trans-unit id="6334" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_VERT<ept id="p1">**</ept> Specifies that the window is a vertical scroll bar.</source>
        </trans-unit>
        <trans-unit id="6335" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>SCROLLINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787537)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="6336" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for more information about this structure.</source>
        </trans-unit>
        <trans-unit id="6337" translate="yes" xml:space="preserve">
          <source>Specifies whether the scroll bar should be redrawn to reflect the new position.</source>
        </trans-unit>
        <trans-unit id="6338" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bRedraw`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the scroll bar is redrawn.</source>
        </trans-unit>
        <trans-unit id="6339" translate="yes" xml:space="preserve">
          <source>If it is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, it is not redrawn.</source>
        </trans-unit>
        <trans-unit id="6340" translate="yes" xml:space="preserve">
          <source>The scroll bar is redrawn by default.</source>
        </trans-unit>
        <trans-unit id="6341" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6342" translate="yes" xml:space="preserve">
          <source>If successful, the return is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="6343" translate="yes" xml:space="preserve">
          <source>Otherwise, it is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="6344" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6345" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>SCROLLINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787537)</ept> structure contains information about a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (the thumb).</source>
        </trans-unit>
        <trans-unit id="6346" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">`SCROLLINFO`</ph> structure topic in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for more information about changing the structure defaults.</source>
        </trans-unit>
        <trans-unit id="6347" translate="yes" xml:space="preserve">
          <source>The MFC Windows message handlers that indicate scroll-bar position, <bpt id="p1">[</bpt>CWnd::OnHScroll<ept id="p1">](#cwnd__onhscroll)</ept> and <bpt id="p2">[</bpt>CWnd::OnVScroll<ept id="p2">](#cwnd__onvscroll)</ept>, provide only 16 bits of position data.</source>
        </trans-unit>
        <trans-unit id="6348" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GetScrollInfo<ept id="p1">](#cwnd__getscrollinfo)</ept> and <ph id="ph1">`SetScrollInfo`</ph> provide 32 bits of scroll-bar position data.</source>
        </trans-unit>
        <trans-unit id="6349" translate="yes" xml:space="preserve">
          <source>Thus, an application can call <ph id="ph1">`GetScrollInfo`</ph> while processing either <ph id="ph2">`CWnd::OnHScroll`</ph> or <ph id="ph3">`CWnd::OnVScroll`</ph> to obtain 32-bit scroll-bar position data.</source>
        </trans-unit>
        <trans-unit id="6350" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CWnd::GetScrollInfo<ept id="p1">](#cwnd__getscrollinfo)</ept> enables applications to use 32-bit scroll-bar positions.</source>
        </trans-unit>
        <trans-unit id="6351" translate="yes" xml:space="preserve">
          <source>CWnd::SetScrollPos</source>
        </trans-unit>
        <trans-unit id="6352" translate="yes" xml:space="preserve">
          <source>Sets the current position of a scroll box and, if requested, redraws the scroll bar to reflect the new position of the scroll box.</source>
        </trans-unit>
        <trans-unit id="6353" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6354" translate="yes" xml:space="preserve">
          <source>Specifies the scroll bar to be set.</source>
        </trans-unit>
        <trans-unit id="6355" translate="yes" xml:space="preserve">
          <source>This parameter can be either of the following:</source>
        </trans-unit>
        <trans-unit id="6356" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_HORZ<ept id="p1">**</ept> Sets the position of the scroll box in the horizontal scroll bar of the window.</source>
        </trans-unit>
        <trans-unit id="6357" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_VERT<ept id="p1">**</ept> Sets the position of the scroll box in the vertical scroll bar of the window.</source>
        </trans-unit>
        <trans-unit id="6358" translate="yes" xml:space="preserve">
          <source>Specifies the new position of the scroll box.</source>
        </trans-unit>
        <trans-unit id="6359" translate="yes" xml:space="preserve">
          <source>It must be within the scrolling range.</source>
        </trans-unit>
        <trans-unit id="6360" translate="yes" xml:space="preserve">
          <source>Specifies whether the scroll bar should be repainted to reflect the new scroll-box position.</source>
        </trans-unit>
        <trans-unit id="6361" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the scroll bar is repainted; if <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>, the scroll bar is not repainted.</source>
        </trans-unit>
        <trans-unit id="6362" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6363" translate="yes" xml:space="preserve">
          <source>The previous position of the scroll box.</source>
        </trans-unit>
        <trans-unit id="6364" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6365" translate="yes" xml:space="preserve">
          <source>Setting <ph id="ph1">`bRedraw`</ph> to <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> is useful whenever the scroll bar will be redrawn by a subsequent call to another function.</source>
        </trans-unit>
        <trans-unit id="6366" translate="yes" xml:space="preserve">
          <source>CWnd::SetScrollRange</source>
        </trans-unit>
        <trans-unit id="6367" translate="yes" xml:space="preserve">
          <source>Sets minimum and maximum position values for the given scroll bar.</source>
        </trans-unit>
        <trans-unit id="6368" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6369" translate="yes" xml:space="preserve">
          <source>Specifies the scroll bar to be set.</source>
        </trans-unit>
        <trans-unit id="6370" translate="yes" xml:space="preserve">
          <source>This parameter can be either of the following values:</source>
        </trans-unit>
        <trans-unit id="6371" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_HORZ<ept id="p1">**</ept> Sets the range of the horizontal scroll bar of the window.</source>
        </trans-unit>
        <trans-unit id="6372" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_VERT<ept id="p1">**</ept> Sets the range of the vertical scroll bar of the window.</source>
        </trans-unit>
        <trans-unit id="6373" translate="yes" xml:space="preserve">
          <source>Specifies the minimum scrolling position.</source>
        </trans-unit>
        <trans-unit id="6374" translate="yes" xml:space="preserve">
          <source>Specifies the maximum scrolling position.</source>
        </trans-unit>
        <trans-unit id="6375" translate="yes" xml:space="preserve">
          <source>Specifies whether the scroll bar should be redrawn to reflect the change.</source>
        </trans-unit>
        <trans-unit id="6376" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bRedraw`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the scroll bar is redrawn; if <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>, the scroll bar is not redrawn.</source>
        </trans-unit>
        <trans-unit id="6377" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6378" translate="yes" xml:space="preserve">
          <source>It can also be used to hide or show standard scroll bars.</source>
        </trans-unit>
        <trans-unit id="6379" translate="yes" xml:space="preserve">
          <source>An application should not call this function to hide a scroll bar while processing a scroll-bar notification message.</source>
        </trans-unit>
        <trans-unit id="6380" translate="yes" xml:space="preserve">
          <source>If the call to <ph id="ph1">`SetScrollRange`</ph> immediately follows a call to the <bpt id="p1">[</bpt>SetScrollPos<ept id="p1">](#cwnd__setscrollpos)</ept> member function, the <ph id="ph2">`bRedraw`</ph> parameter in the <ph id="ph3">`SetScrollPos`</ph> member function should be 0 to prevent the scroll bar from being drawn twice.</source>
        </trans-unit>
        <trans-unit id="6381" translate="yes" xml:space="preserve">
          <source>The default range for a standard scroll bar is 0 through 100.</source>
        </trans-unit>
        <trans-unit id="6382" translate="yes" xml:space="preserve">
          <source>The default range for a scroll bar control is empty (both the <ph id="ph1">`nMinPos`</ph> and <ph id="ph2">`nMaxPos`</ph> values are 0).</source>
        </trans-unit>
        <trans-unit id="6383" translate="yes" xml:space="preserve">
          <source>The difference between the values specified by <ph id="ph1">`nMinPos`</ph> and <ph id="ph2">`nMaxPos`</ph> must not be greater than <bpt id="p1">**</bpt>INT_MAX<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="6384" translate="yes" xml:space="preserve">
          <source>CWnd::SetTimer</source>
        </trans-unit>
        <trans-unit id="6385" translate="yes" xml:space="preserve">
          <source>Installs a system timer.</source>
        </trans-unit>
        <trans-unit id="6386" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6387" translate="yes" xml:space="preserve">
          <source>Specifies a nonzero timer identifier.</source>
        </trans-unit>
        <trans-unit id="6388" translate="yes" xml:space="preserve">
          <source>If the timer identifier is unique, this same value is returned by <ph id="ph1">`SetTimer`</ph>.</source>
        </trans-unit>
        <trans-unit id="6389" translate="yes" xml:space="preserve">
          <source>Otherwise, <ph id="ph1">`SetTimer`</ph> determines a new unique value and returns that.</source>
        </trans-unit>
        <trans-unit id="6390" translate="yes" xml:space="preserve">
          <source>For a window timer (which has a NULL callback function), the value must be unique only for other windows timers that are associated with the current window.</source>
        </trans-unit>
        <trans-unit id="6391" translate="yes" xml:space="preserve">
          <source>For a callback timer, the value must be unique for all timers in all processes.</source>
        </trans-unit>
        <trans-unit id="6392" translate="yes" xml:space="preserve">
          <source>Therefore, when you create a callback timer, it is more likely that the returned value might differ from the value you specify.</source>
        </trans-unit>
        <trans-unit id="6393" translate="yes" xml:space="preserve">
          <source>Specifies the time-out value, or interval, in milliseconds.</source>
        </trans-unit>
        <trans-unit id="6394" translate="yes" xml:space="preserve">
          <source>Specifies the address of the application-supplied <ph id="ph1">`TimerProc`</ph> callback function that processes the <bpt id="p1">[</bpt>WM_TIMER<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms644902)</ept> messages.</source>
        </trans-unit>
        <trans-unit id="6395" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`NULL`</ph>, the <ph id="ph2">`WM_TIMER`</ph> messages are placed in the message queue of the application and handled by the <ph id="ph3">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="6396" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6397" translate="yes" xml:space="preserve">
          <source>The timer identifier of the new timer if the function is successful.</source>
        </trans-unit>
        <trans-unit id="6398" translate="yes" xml:space="preserve">
          <source>This value may or may not be equal to the value passed in through the <ph id="ph1">`nIDEvent`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="6399" translate="yes" xml:space="preserve">
          <source>An application should always pass the return value to the <bpt id="p1">[</bpt>KillTimer<ept id="p1">](#cwnd__killtimer)</ept> member function to kill the timer.</source>
        </trans-unit>
        <trans-unit id="6400" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise, 0.</source>
        </trans-unit>
        <trans-unit id="6401" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6402" translate="yes" xml:space="preserve">
          <source>An interval value is specified, and every time the interval elapses, the system posts a <ph id="ph1">`WM_TIMER`</ph> message to the installing message queue of the installing application or passes the message to an application-defined <ph id="ph2">`TimerProc`</ph> callback function.</source>
        </trans-unit>
        <trans-unit id="6403" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpfnTimer`</ph> callback function need not be named <ph id="ph2">`TimerProc`</ph>, but it must be declared as static and defined as follows.</source>
        </trans-unit>
        <trans-unit id="6404" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="6405" translate="yes" xml:space="preserve">
          <source>This example uses <ph id="ph1">`CWnd::SetTimer`</ph>, <ph id="ph2">`CWnd::OnTimer`</ph>, and <ph id="ph3">`CWnd::KillTimer`</ph> to handle <ph id="ph4">`WM_TIMER`</ph> messages.</source>
        </trans-unit>
        <trans-unit id="6406" translate="yes" xml:space="preserve">
          <source>The first timer is set up to send a <ph id="ph1">`WM_TIMER`</ph> message to the main frame window every 2 seconds in <ph id="ph2">`OnStartTimer`</ph>.</source>
        </trans-unit>
        <trans-unit id="6407" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OnTimer`</ph> event handler handles <ph id="ph2">`WM_TIMER`</ph> messages for the main frame window.</source>
        </trans-unit>
        <trans-unit id="6408" translate="yes" xml:space="preserve">
          <source>This method causes the PC speaker to beep every 2 seconds.</source>
        </trans-unit>
        <trans-unit id="6409" translate="yes" xml:space="preserve">
          <source>The second timer sends a message to the callback function every 3.75 seconds.</source>
        </trans-unit>
        <trans-unit id="6410" translate="yes" xml:space="preserve">
          <source>will stop both timers by calling <ph id="ph1">`CWnd::KillTimer`</ph> for each timer ID.</source>
        </trans-unit>
        <trans-unit id="6411" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#118</source>
        </trans-unit>
        <trans-unit id="6412" translate="yes" xml:space="preserve">
          <source>CWnd::SetWindowContextHelpId</source>
        </trans-unit>
        <trans-unit id="6413" translate="yes" xml:space="preserve">
          <source>Call this member function to associate a help context identifier with the specified window.</source>
        </trans-unit>
        <trans-unit id="6414" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6415" translate="yes" xml:space="preserve">
          <source>The help context identifier.</source>
        </trans-unit>
        <trans-unit id="6416" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6417" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="6418" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6419" translate="yes" xml:space="preserve">
          <source>If a child window does not have a help context identifier, it inherits the identifier of its parent window.</source>
        </trans-unit>
        <trans-unit id="6420" translate="yes" xml:space="preserve">
          <source>Likewise, if an owned window does not have a help context identifier, it inherits the identifier of its owner window.</source>
        </trans-unit>
        <trans-unit id="6421" translate="yes" xml:space="preserve">
          <source>This inheritance of help context identifiers allows an application to set just one identifier for a dialog box and all of its controls.</source>
        </trans-unit>
        <trans-unit id="6422" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="6423" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#119</source>
        </trans-unit>
        <trans-unit id="6424" translate="yes" xml:space="preserve">
          <source>CWnd::SetWindowPlacement</source>
        </trans-unit>
        <trans-unit id="6425" translate="yes" xml:space="preserve">
          <source>Sets the show state and the normal (restored), minimized, and maximized positions for a window.</source>
        </trans-unit>
        <trans-unit id="6426" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6427" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>WINDOWPLACEMENT<ept id="p1">](../../mfc/reference/windowplacement-structure.md)</ept> structure that specifies the new show state and positions.</source>
        </trans-unit>
        <trans-unit id="6428" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6429" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="6430" translate="yes" xml:space="preserve">
          <source>CWnd::SetWindowPos</source>
        </trans-unit>
        <trans-unit id="6431" translate="yes" xml:space="preserve">
          <source>Changes the size, position, and Z-order of child, pop-up, and top-level windows.</source>
        </trans-unit>
        <trans-unit id="6432" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6433" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">`CWnd`</ph> object that will precede (be higher than) this <ph id="ph2">`CWnd`</ph> object in the Z-order.</source>
        </trans-unit>
        <trans-unit id="6434" translate="yes" xml:space="preserve">
          <source>This parameter can be a pointer to a <ph id="ph1">`CWnd`</ph> or a <bpt id="p1">**</bpt>Pointer<ept id="p1">**</ept> to one of the following values:</source>
        </trans-unit>
        <trans-unit id="6435" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>wndBottom<ept id="p1">**</ept> Places the window at the bottom of the Z-order.</source>
        </trans-unit>
        <trans-unit id="6436" translate="yes" xml:space="preserve">
          <source>If this <ph id="ph1">`CWnd`</ph> is a topmost window, the window loses its topmost status; the system places the window at the bottom of all other windows.</source>
        </trans-unit>
        <trans-unit id="6437" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>wndTop<ept id="p1">**</ept> Places the window at the top of the Z-order.</source>
        </trans-unit>
        <trans-unit id="6438" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>wndTopMost<ept id="p1">**</ept> Places the window above all non-topmost windows.</source>
        </trans-unit>
        <trans-unit id="6439" translate="yes" xml:space="preserve">
          <source>The window maintains its topmost position even when it is deactivated.</source>
        </trans-unit>
        <trans-unit id="6440" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>wndNoTopMost<ept id="p1">**</ept> Repositions the window to the top of all non-topmost windows (that is, behind all topmost windows).</source>
        </trans-unit>
        <trans-unit id="6441" translate="yes" xml:space="preserve">
          <source>This flag has no effect if the window is already a non-topmost window.</source>
        </trans-unit>
        <trans-unit id="6442" translate="yes" xml:space="preserve">
          <source>For rules about how to use this parameter, see the "Remarks" section of this topic.</source>
        </trans-unit>
        <trans-unit id="6443" translate="yes" xml:space="preserve">
          <source>x</source>
        </trans-unit>
        <trans-unit id="6444" translate="yes" xml:space="preserve">
          <source>Specifies the new position of the left side of the window.</source>
        </trans-unit>
        <trans-unit id="6445" translate="yes" xml:space="preserve">
          <source>y</source>
        </trans-unit>
        <trans-unit id="6446" translate="yes" xml:space="preserve">
          <source>Specifies the new position of the top of the window.</source>
        </trans-unit>
        <trans-unit id="6447" translate="yes" xml:space="preserve">
          <source>Specifies the new width of the window.</source>
        </trans-unit>
        <trans-unit id="6448" translate="yes" xml:space="preserve">
          <source>Specifies the new height of the window.</source>
        </trans-unit>
        <trans-unit id="6449" translate="yes" xml:space="preserve">
          <source>Specifies sizing and positioning options.</source>
        </trans-unit>
        <trans-unit id="6450" translate="yes" xml:space="preserve">
          <source>This parameter can be a combination of the following flags:</source>
        </trans-unit>
        <trans-unit id="6451" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SWP_DRAWFRAME<ept id="p1">**</ept> Draws a frame (defined when the window was created) around the window.</source>
        </trans-unit>
        <trans-unit id="6452" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SWP_FRAMECHANGED<ept id="p1">**</ept> Sends a <ph id="ph1">`WM_NCCALCSIZE`</ph> message to the window, even if the window's size is not being changed.</source>
        </trans-unit>
        <trans-unit id="6453" translate="yes" xml:space="preserve">
          <source>If this flag is not specified, <ph id="ph1">`WM_NCCALCSIZE`</ph> is sent only when the window's size is being changed.</source>
        </trans-unit>
        <trans-unit id="6454" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SWP_HIDEWINDOW<ept id="p1">**</ept> Hides the window.</source>
        </trans-unit>
        <trans-unit id="6455" translate="yes" xml:space="preserve">
          <source>Does not activate the window.</source>
        </trans-unit>
        <trans-unit id="6456" translate="yes" xml:space="preserve">
          <source>If this flag is not set, the window is activated and moved to the top of either the topmost or the non-topmost group (depending on the setting of the <ph id="ph1">`pWndInsertAfter`</ph> parameter).</source>
        </trans-unit>
        <trans-unit id="6457" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SWP_NOCOPYBITS<ept id="p1">**</ept> Discards the entire contents of the client area.</source>
        </trans-unit>
        <trans-unit id="6458" translate="yes" xml:space="preserve">
          <source>If this flag is not specified, the valid contents of the client area are saved and copied back into the client area after the window is sized or repositioned.</source>
        </trans-unit>
        <trans-unit id="6459" translate="yes" xml:space="preserve">
          <source>Retains current position (ignores the <bpt id="p1">*</bpt>x<ept id="p1">*</ept> and <bpt id="p2">*</bpt>y<ept id="p2">*</ept> parameters).</source>
        </trans-unit>
        <trans-unit id="6460" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SWP_NOOWNERZORDER<ept id="p1">**</ept> Does not change the owner window's position in the Z-order.</source>
        </trans-unit>
        <trans-unit id="6461" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SWP_NOREDRAW<ept id="p1">**</ept> Does not redraw changes.</source>
        </trans-unit>
        <trans-unit id="6462" translate="yes" xml:space="preserve">
          <source>If this flag is set, no repainting of any kind occurs.</source>
        </trans-unit>
        <trans-unit id="6463" translate="yes" xml:space="preserve">
          <source>This applies to the client area, the nonclient area (including the title and scroll bars), and any part of the parent window uncovered as a result of the moved window.</source>
        </trans-unit>
        <trans-unit id="6464" translate="yes" xml:space="preserve">
          <source>When this flag is set, the application must explicitly invalidate or redraw any parts of the window and parent window that must be redrawn.</source>
        </trans-unit>
        <trans-unit id="6465" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SWP_NOREPOSITION<ept id="p1">**</ept> Same as <bpt id="p2">**</bpt>SWP_NOOWNERZORDER<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="6466" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SWP_NOSENDCHANGING<ept id="p1">**</ept> Prevents the window from receiving the <ph id="ph1">`WM_WINDOWPOSCHANGING`</ph> message.</source>
        </trans-unit>
        <trans-unit id="6467" translate="yes" xml:space="preserve">
          <source>Retains current size (ignores the <ph id="ph1">`cx`</ph> and <ph id="ph2">`cy`</ph> parameters).</source>
        </trans-unit>
        <trans-unit id="6468" translate="yes" xml:space="preserve">
          <source>Retains current ordering (ignores <ph id="ph1">`pWndInsertAfter`</ph>).</source>
        </trans-unit>
        <trans-unit id="6469" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SWP_SHOWWINDOW<ept id="p1">**</ept> Displays the window.</source>
        </trans-unit>
        <trans-unit id="6470" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6471" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise, 0.</source>
        </trans-unit>
        <trans-unit id="6472" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6473" translate="yes" xml:space="preserve">
          <source>Windows are ordered on the screen according to their Z-order; the window at the top of the Z-order appears on top of all other windows in the order.</source>
        </trans-unit>
        <trans-unit id="6474" translate="yes" xml:space="preserve">
          <source>All coordinates for child windows are client coordinates (relative to the upper-left corner of the parent window's client area).</source>
        </trans-unit>
        <trans-unit id="6475" translate="yes" xml:space="preserve">
          <source>A window can be moved to the top of the Z-order either by setting the <ph id="ph1">`pWndInsertAfter`</ph> parameter to <bpt id="p1">**</bpt>&amp;wndTopMost<ept id="p1">**</ept> and ensuring that the <ph id="ph2">`SWP_NOZORDER`</ph> flag is not set or by setting a window's Z-order so that it is above any existing topmost windows.</source>
        </trans-unit>
        <trans-unit id="6476" translate="yes" xml:space="preserve">
          <source>When a non-topmost window is made topmost, its owned windows are also made topmost.</source>
        </trans-unit>
        <trans-unit id="6477" translate="yes" xml:space="preserve">
          <source>Its owners are not changed.</source>
        </trans-unit>
        <trans-unit id="6478" translate="yes" xml:space="preserve">
          <source>A topmost window is no longer topmost if it is repositioned to the bottom ( <bpt id="p1">**</bpt>&amp;wndBottom<ept id="p1">**</ept>) of the Z-order or after any non-topmost window.</source>
        </trans-unit>
        <trans-unit id="6479" translate="yes" xml:space="preserve">
          <source>When a topmost window is made non-topmost, all of its owners and its owned windows are also made non-topmost windows.</source>
        </trans-unit>
        <trans-unit id="6480" translate="yes" xml:space="preserve">
          <source>If neither <ph id="ph1">`SWP_NOACTIVATE`</ph> nor <ph id="ph2">`SWP_NOZORDER`</ph> is specified (that is, when the application requests that a window be simultaneously activated and placed in the specified Z-order), the value specified in <ph id="ph3">`pWndInsertAfter`</ph> is used only in the following circumstances:</source>
        </trans-unit>
        <trans-unit id="6481" translate="yes" xml:space="preserve">
          <source>Neither <bpt id="p1">**</bpt>&amp;wndTopMost<ept id="p1">**</ept> nor <bpt id="p2">**</bpt>&amp;wndNoTopMost<ept id="p2">**</ept> is specified in the <ph id="ph1">`pWndInsertAfter`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="6482" translate="yes" xml:space="preserve">
          <source>This window is not the active window.</source>
        </trans-unit>
        <trans-unit id="6483" translate="yes" xml:space="preserve">
          <source>An application cannot activate an inactive window without also bringing it to the top of the Z-order.</source>
        </trans-unit>
        <trans-unit id="6484" translate="yes" xml:space="preserve">
          <source>Applications can change the Z-order of an activated window without restrictions.</source>
        </trans-unit>
        <trans-unit id="6485" translate="yes" xml:space="preserve">
          <source>A non-topmost window may own a topmost window, but not vice versa.</source>
        </trans-unit>
        <trans-unit id="6486" translate="yes" xml:space="preserve">
          <source>Any window (for example, a dialog box) owned by a topmost window is itself made a topmost window to ensure that all owned windows stay above their owner.</source>
        </trans-unit>
        <trans-unit id="6487" translate="yes" xml:space="preserve">
          <source>With Windows versions 3.1 and later, windows can be moved to the top of the Z-order and locked there by setting their <bpt id="p1">**</bpt>WS_EX_TOPMOST<ept id="p1">**</ept> styles.</source>
        </trans-unit>
        <trans-unit id="6488" translate="yes" xml:space="preserve">
          <source>Such a topmost window maintains its topmost position even when deactivated.</source>
        </trans-unit>
        <trans-unit id="6489" translate="yes" xml:space="preserve">
          <source>For example, selecting the WinHelp Always On Top command makes the Help window topmost, and it then remains visible when you return to your application.</source>
        </trans-unit>
        <trans-unit id="6490" translate="yes" xml:space="preserve">
          <source>To create a topmost window, call <ph id="ph1">`SetWindowPos`</ph> with the <ph id="ph2">`pWndInsertAfter`</ph> parameter equal to <bpt id="p1">**</bpt>&amp;wndTopMost<ept id="p1">**</ept>, or set the <bpt id="p2">**</bpt>WS_EX_TOPMOST<ept id="p2">**</ept> style when you create the window.</source>
        </trans-unit>
        <trans-unit id="6491" translate="yes" xml:space="preserve">
          <source>If the Z-order contains any windows with the <bpt id="p1">**</bpt>WS_EX_TOPMOST<ept id="p1">**</ept> style, a window moved with the <bpt id="p2">**</bpt>&amp;wndTopMost<ept id="p2">**</ept> value is placed at the top of all non-topmost windows, but below any topmost windows.</source>
        </trans-unit>
        <trans-unit id="6492" translate="yes" xml:space="preserve">
          <source>When an application activates an inactive window without the <bpt id="p1">**</bpt>WS_EX_TOPMOST<ept id="p1">**</ept> bit, the window is moved above all non-topmost windows but below any topmost windows.</source>
        </trans-unit>
        <trans-unit id="6493" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`SetWindowPos`</ph> is called when the <ph id="ph2">`pWndInsertAfter`</ph> parameter is <bpt id="p1">**</bpt>&amp;wndBottom<ept id="p1">**</ept> and <ph id="ph3">`CWnd`</ph> is a topmost window, the window loses its topmost status ( <bpt id="p2">**</bpt>WS_EX_TOPMOST<ept id="p2">**</ept> is cleared), and the system places the window at the bottom of the Z-order.</source>
        </trans-unit>
        <trans-unit id="6494" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="6495" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#120</source>
        </trans-unit>
        <trans-unit id="6496" translate="yes" xml:space="preserve">
          <source>CWnd::SetWindowRgn</source>
        </trans-unit>
        <trans-unit id="6497" translate="yes" xml:space="preserve">
          <source>Call this member function to set a window's region.</source>
        </trans-unit>
        <trans-unit id="6498" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6499" translate="yes" xml:space="preserve">
          <source>A handle to a region.</source>
        </trans-unit>
        <trans-unit id="6500" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the operating system redraws the window after setting the region; otherwise, it does not.</source>
        </trans-unit>
        <trans-unit id="6501" translate="yes" xml:space="preserve">
          <source>Typically, set <ph id="ph1">`bRedraw`</ph> to <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if the window is visible.</source>
        </trans-unit>
        <trans-unit id="6502" translate="yes" xml:space="preserve">
          <source>If set to <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the system sends the <ph id="ph1">`WM_WINDOWPOSCHANGING`</ph> and <ph id="ph2">`WM_WINDOWPOSCHANGED`</ph> messages to the window.</source>
        </trans-unit>
        <trans-unit id="6503" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6504" translate="yes" xml:space="preserve">
          <source>If the function succeeds, the return value is nonzero.</source>
        </trans-unit>
        <trans-unit id="6505" translate="yes" xml:space="preserve">
          <source>If the function fails, the return value is zero.</source>
        </trans-unit>
        <trans-unit id="6506" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6507" translate="yes" xml:space="preserve">
          <source>The coordinates of a window's window region are relative to the upper-left corner of the window, not the client area of the window.</source>
        </trans-unit>
        <trans-unit id="6508" translate="yes" xml:space="preserve">
          <source>After a successful call to <ph id="ph1">`SetWindowRgn`</ph>, the operating system owns the region specified by the region handle <ph id="ph2">`hRgn`</ph>.</source>
        </trans-unit>
        <trans-unit id="6509" translate="yes" xml:space="preserve">
          <source>The operating system does not make a copy of the region, so do not make any further function calls with this region handle, and do not close this region handle.</source>
        </trans-unit>
        <trans-unit id="6510" translate="yes" xml:space="preserve">
          <source>CWnd::SetWindowText</source>
        </trans-unit>
        <trans-unit id="6511" translate="yes" xml:space="preserve">
          <source>Sets the window's title to the specified text.</source>
        </trans-unit>
        <trans-unit id="6512" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6513" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object or null-terminated string to be used as the new title or control text.</source>
        </trans-unit>
        <trans-unit id="6514" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6515" translate="yes" xml:space="preserve">
          <source>If the window is a control, the text within the control is set.</source>
        </trans-unit>
        <trans-unit id="6516" translate="yes" xml:space="preserve">
          <source>This function causes a <bpt id="p1">[</bpt>WM_SETTEXT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632644)</ept> message to be sent to this window.</source>
        </trans-unit>
        <trans-unit id="6517" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="6518" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#121</source>
        </trans-unit>
        <trans-unit id="6519" translate="yes" xml:space="preserve">
          <source>CWnd::ShowCaret</source>
        </trans-unit>
        <trans-unit id="6520" translate="yes" xml:space="preserve">
          <source>Shows the caret on the screen at the caret's current position.</source>
        </trans-unit>
        <trans-unit id="6521" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6522" translate="yes" xml:space="preserve">
          <source>Once shown, the caret begins flashing automatically.</source>
        </trans-unit>
        <trans-unit id="6523" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ShowCaret`</ph> member function shows the caret only if it has a current shape and has not been hidden two or more times consecutively.</source>
        </trans-unit>
        <trans-unit id="6524" translate="yes" xml:space="preserve">
          <source>If the caret is not owned by this window, the caret is not shown.</source>
        </trans-unit>
        <trans-unit id="6525" translate="yes" xml:space="preserve">
          <source>Hiding the caret is cumulative.</source>
        </trans-unit>
        <trans-unit id="6526" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">[</bpt>HideCaret<ept id="p1">](#cwnd__hidecaret)</ept> member function has been called five times consecutively, <ph id="ph1">`ShowCaret`</ph> must be called five times to show the caret.</source>
        </trans-unit>
        <trans-unit id="6527" translate="yes" xml:space="preserve">
          <source>The caret is a shared resource.</source>
        </trans-unit>
        <trans-unit id="6528" translate="yes" xml:space="preserve">
          <source>The window should show the caret only when it has the input focus or is active.</source>
        </trans-unit>
        <trans-unit id="6529" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="6530" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CWnd::CreateCaret<ept id="p1">](#cwnd__createcaret)</ept>.</source>
        </trans-unit>
        <trans-unit id="6531" translate="yes" xml:space="preserve">
          <source>CWnd::ShowOwnedPopups</source>
        </trans-unit>
        <trans-unit id="6532" translate="yes" xml:space="preserve">
          <source>Shows or hides all pop-up windows owned by this window.</source>
        </trans-unit>
        <trans-unit id="6533" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6534" translate="yes" xml:space="preserve">
          <source>Specifies whether pop-up windows are to be shown or hidden.</source>
        </trans-unit>
        <trans-unit id="6535" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, all hidden pop-up windows are shown.</source>
        </trans-unit>
        <trans-unit id="6536" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, all visible pop-up windows are hidden.</source>
        </trans-unit>
        <trans-unit id="6537" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="6538" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CWnd::SetWindowPos<ept id="p1">](#cwnd__setwindowpos)</ept>.</source>
        </trans-unit>
        <trans-unit id="6539" translate="yes" xml:space="preserve">
          <source>CWnd::ShowScrollBar</source>
        </trans-unit>
        <trans-unit id="6540" translate="yes" xml:space="preserve">
          <source>Shows or hides a scroll bar.</source>
        </trans-unit>
        <trans-unit id="6541" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6542" translate="yes" xml:space="preserve">
          <source>Specifies whether the scroll bar is a control or part of a window's nonclient area.</source>
        </trans-unit>
        <trans-unit id="6543" translate="yes" xml:space="preserve">
          <source>If it is part of the nonclient area, <ph id="ph1">`nBar`</ph> also indicates whether the scroll bar is positioned horizontally, vertically, or both.</source>
        </trans-unit>
        <trans-unit id="6544" translate="yes" xml:space="preserve">
          <source>It must be one of the following:</source>
        </trans-unit>
        <trans-unit id="6545" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_BOTH<ept id="p1">**</ept> Specifies the horizontal and vertical scroll bars of the window.</source>
        </trans-unit>
        <trans-unit id="6546" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_HORZ<ept id="p1">**</ept> Specifies that the window is a horizontal scroll bar.</source>
        </trans-unit>
        <trans-unit id="6547" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SB_VERT<ept id="p1">**</ept> Specifies that the window is a vertical scroll bar.</source>
        </trans-unit>
        <trans-unit id="6548" translate="yes" xml:space="preserve">
          <source>Specifies whether Windows shows or hides the scroll bar.</source>
        </trans-unit>
        <trans-unit id="6549" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the scroll bar is shown; otherwise the scroll bar is hidden.</source>
        </trans-unit>
        <trans-unit id="6550" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6551" translate="yes" xml:space="preserve">
          <source>An application should not call <ph id="ph1">`ShowScrollBar`</ph> to hide a scroll bar while processing a scroll-bar notification message.</source>
        </trans-unit>
        <trans-unit id="6552" translate="yes" xml:space="preserve">
          <source>CWnd::ShowWindow</source>
        </trans-unit>
        <trans-unit id="6553" translate="yes" xml:space="preserve">
          <source>Sets the visibility state of the window.</source>
        </trans-unit>
        <trans-unit id="6554" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6555" translate="yes" xml:space="preserve">
          <source>Specifies how the <ph id="ph1">`CWnd`</ph> is to be shown.</source>
        </trans-unit>
        <trans-unit id="6556" translate="yes" xml:space="preserve">
          <source>It must be one of the following values:</source>
        </trans-unit>
        <trans-unit id="6557" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SW_HIDE<ept id="p1">**</ept> Hides this window and passes activation to another window.</source>
        </trans-unit>
        <trans-unit id="6558" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SW_MINIMIZE<ept id="p1">**</ept> Minimizes the window and activates the top-level window in the system's list.</source>
        </trans-unit>
        <trans-unit id="6559" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SW_RESTORE<ept id="p1">**</ept> Activates and displays the window.</source>
        </trans-unit>
        <trans-unit id="6560" translate="yes" xml:space="preserve">
          <source>If the window is minimized or maximized, Windows restores it to its original size and position.</source>
        </trans-unit>
        <trans-unit id="6561" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SW_SHOW<ept id="p1">**</ept> Activates the window and displays it in its current size and position.</source>
        </trans-unit>
        <trans-unit id="6562" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SW_SHOWMAXIMIZED<ept id="p1">**</ept> Activates the window and displays it as a maximized window.</source>
        </trans-unit>
        <trans-unit id="6563" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SW_SHOWMINIMIZED<ept id="p1">**</ept> Activates the window and displays it as an icon.</source>
        </trans-unit>
        <trans-unit id="6564" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SW_SHOWMINNOACTIVE<ept id="p1">**</ept> Displays the window as an icon.</source>
        </trans-unit>
        <trans-unit id="6565" translate="yes" xml:space="preserve">
          <source>The window that is currently active remains active.</source>
        </trans-unit>
        <trans-unit id="6566" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SW_SHOWNA<ept id="p1">**</ept> Displays the window in its current state.</source>
        </trans-unit>
        <trans-unit id="6567" translate="yes" xml:space="preserve">
          <source>The window that is currently active remains active.</source>
        </trans-unit>
        <trans-unit id="6568" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SW_SHOWNOACTIVATE<ept id="p1">**</ept> Displays the window in its most recent size and position.</source>
        </trans-unit>
        <trans-unit id="6569" translate="yes" xml:space="preserve">
          <source>The window that is currently active remains active.</source>
        </trans-unit>
        <trans-unit id="6570" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SW_SHOWNORMAL<ept id="p1">**</ept> Activates and displays the window.</source>
        </trans-unit>
        <trans-unit id="6571" translate="yes" xml:space="preserve">
          <source>If the window is minimized or maximized, Windows restores it to its original size and position.</source>
        </trans-unit>
        <trans-unit id="6572" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6573" translate="yes" xml:space="preserve">
          <source>Nonzero if the window was previously visible; 0 if the <ph id="ph1">`CWnd`</ph> was previously hidden.</source>
        </trans-unit>
        <trans-unit id="6574" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6575" translate="yes" xml:space="preserve">
          <source>must be called only once per application for the main window with <bpt id="p1">[</bpt>CWinApp::m_nCmdShow<ept id="p1">](../../mfc/reference/cwinapp-class.md#cwinapp__m_ncmdshow)</ept>.</source>
        </trans-unit>
        <trans-unit id="6576" translate="yes" xml:space="preserve">
          <source>Subsequent calls to <ph id="ph1">`ShowWindow`</ph> must use one of the values listed above instead of the one specified by <ph id="ph2">`CWinApp::m_nCmdShow`</ph>.</source>
        </trans-unit>
        <trans-unit id="6577" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="6578" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CWnd::CalcWindowRect<ept id="p1">](#cwnd__calcwindowrect)</ept>.</source>
        </trans-unit>
        <trans-unit id="6579" translate="yes" xml:space="preserve">
          <source>CWnd::SubclassDlgItem</source>
        </trans-unit>
        <trans-unit id="6580" translate="yes" xml:space="preserve">
          <source>Call this member function to "dynamically subclass" a control created from a dialog template and attach it to this <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="6581" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6582" translate="yes" xml:space="preserve">
          <source>The control's ID.</source>
        </trans-unit>
        <trans-unit id="6583" translate="yes" xml:space="preserve">
          <source>The control's parent (usually a dialog box).</source>
        </trans-unit>
        <trans-unit id="6584" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6585" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="6586" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6587" translate="yes" xml:space="preserve">
          <source>When a control is dynamically subclassed, windows messages will route through the <ph id="ph1">`CWnd`</ph>'s message map and call message handlers in the <ph id="ph2">`CWnd`</ph>'s class first.</source>
        </trans-unit>
        <trans-unit id="6588" translate="yes" xml:space="preserve">
          <source>Messages that are passed to the base class will be passed to the default message handler in the control.</source>
        </trans-unit>
        <trans-unit id="6589" translate="yes" xml:space="preserve">
          <source>This member function attaches the Windows control to a <ph id="ph1">`CWnd`</ph> object and replaces the control's <bpt id="p1">**</bpt>WndProc<ept id="p1">**</ept> and <bpt id="p2">**</bpt>AfxWndProc<ept id="p2">**</ept> functions.</source>
        </trans-unit>
        <trans-unit id="6590" translate="yes" xml:space="preserve">
          <source>The function stores the old <bpt id="p1">**</bpt>WndProc<ept id="p1">**</ept> in the location returned by the <ph id="ph1">`GetSuperWndProcAddr`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="6591" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="6592" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#122</source>
        </trans-unit>
        <trans-unit id="6593" translate="yes" xml:space="preserve">
          <source>CWnd::SubclassWindow</source>
        </trans-unit>
        <trans-unit id="6594" translate="yes" xml:space="preserve">
          <source>Call this member function to "dynamically subclass" a window and attach it to this <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="6595" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6596" translate="yes" xml:space="preserve">
          <source>A handle to the window.</source>
        </trans-unit>
        <trans-unit id="6597" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6598" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="6599" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6600" translate="yes" xml:space="preserve">
          <source>When a window is dynamically subclassed, windows messages will route through the <ph id="ph1">`CWnd`</ph>'s message map and call message handlers in the <ph id="ph2">`CWnd`</ph>'s class first.</source>
        </trans-unit>
        <trans-unit id="6601" translate="yes" xml:space="preserve">
          <source>Messages that are passed to the base class will be passed to the default message handler in the window.</source>
        </trans-unit>
        <trans-unit id="6602" translate="yes" xml:space="preserve">
          <source>This member function attaches the Windows control to a <ph id="ph1">`CWnd`</ph> object and replaces the window's <bpt id="p1">**</bpt>WndProc<ept id="p1">**</ept> and <bpt id="p2">**</bpt>AfxWndProc<ept id="p2">**</ept> functions.</source>
        </trans-unit>
        <trans-unit id="6603" translate="yes" xml:space="preserve">
          <source>The function stores a pointer to the old <bpt id="p1">**</bpt>WndProc<ept id="p1">**</ept> in the <ph id="ph1">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="6604" translate="yes" xml:space="preserve">
          <source>The window must not already be attached to an MFC object when this function is called.</source>
        </trans-unit>
        <trans-unit id="6605" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="6606" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#123</source>
        </trans-unit>
        <trans-unit id="6607" translate="yes" xml:space="preserve">
          <source>CWnd::UnlockWindowUpdate</source>
        </trans-unit>
        <trans-unit id="6608" translate="yes" xml:space="preserve">
          <source>Call this member function to unlock a window that was locked with <ph id="ph1">`CWnd::LockWindowUpdate`</ph>.</source>
        </trans-unit>
        <trans-unit id="6609" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6610" translate="yes" xml:space="preserve">
          <source>Only one window at a time can be locked using <ph id="ph1">`LockWindowUpdate`</ph>.</source>
        </trans-unit>
        <trans-unit id="6611" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CWnd::LockWindowUpdate<ept id="p1">](#cwnd__lockwindowupdate)</ept> or the Win32 function <bpt id="p2">[</bpt>LockWindowUpdate<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd145034)</ept> for more information on locking windows.</source>
        </trans-unit>
        <trans-unit id="6612" translate="yes" xml:space="preserve">
          <source>CWnd::UnsubclassWindow</source>
        </trans-unit>
        <trans-unit id="6613" translate="yes" xml:space="preserve">
          <source>Call this member function to set <bpt id="p1">**</bpt>WndProc<ept id="p1">**</ept> back to its original value and detach the window identified by <ph id="ph1">`HWND`</ph> from the <bpt id="p2">**</bpt>CWnd<ept id="p2">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="6614" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6615" translate="yes" xml:space="preserve">
          <source>A handle to the unsubclassed window.</source>
        </trans-unit>
        <trans-unit id="6616" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="6617" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CWnd::SubclassWindow<ept id="p1">](#cwnd__subclasswindow)</ept>.</source>
        </trans-unit>
        <trans-unit id="6618" translate="yes" xml:space="preserve">
          <source>CWnd::UpdateData</source>
        </trans-unit>
        <trans-unit id="6619" translate="yes" xml:space="preserve">
          <source>Call this member function to initialize data in a dialog box, or to retrieve and validate dialog data.</source>
        </trans-unit>
        <trans-unit id="6620" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6621" translate="yes" xml:space="preserve">
          <source>Flag that indicates whether dialog box is being initialized ( <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>) or data is being retrieved ( <bpt id="p2">**</bpt>TRUE<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="6622" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6623" translate="yes" xml:space="preserve">
          <source>Nonzero if the operation is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="6624" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>bSaveAndValidat<ept id="p1">*</ept>e is <bpt id="p2">**</bpt>TRUE<ept id="p2">**</ept>, then a return value of nonzero means that the data is successfully validated.</source>
        </trans-unit>
        <trans-unit id="6625" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6626" translate="yes" xml:space="preserve">
          <source>The framework automatically calls <ph id="ph1">`UpdateData`</ph> with <ph id="ph2">`bSaveAndValidate`</ph> set to <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> when a modal dialog box is created in the default implementation of <bpt id="p2">[</bpt>CDialog::OnInitDialog<ept id="p2">](../../mfc/reference/cdialog-class.md#cdialog__oninitdialog)</ept>.</source>
        </trans-unit>
        <trans-unit id="6627" translate="yes" xml:space="preserve">
          <source>The call occurs before the dialog box is visible.</source>
        </trans-unit>
        <trans-unit id="6628" translate="yes" xml:space="preserve">
          <source>The default implementation of <bpt id="p1">[</bpt>CDialog::OnOK<ept id="p1">](../../mfc/reference/cdialog-class.md#cdialog__onok)</ept> calls this member function with <ph id="ph1">`bSaveAndValidate`</ph> set to <bpt id="p2">**</bpt>TRUE<ept id="p2">**</ept> to retrieve the data, and if successful, will close the dialog box.</source>
        </trans-unit>
        <trans-unit id="6629" translate="yes" xml:space="preserve">
          <source>(If the Cancel button is clicked in the dialog box, the dialog box is closed without the data being retrieved.)</source>
        </trans-unit>
        <trans-unit id="6630" translate="yes" xml:space="preserve">
          <source>CWnd::UpdateDialogControls</source>
        </trans-unit>
        <trans-unit id="6631" translate="yes" xml:space="preserve">
          <source>Call this member function to update the state of dialog buttons and other controls in a dialog box or window that uses the <bpt id="p1">[</bpt>ON_UPDATE_COMMAND_UI<ept id="p1">](http://msdn.microsoft.com/library/c4de3c21-2d2e-4b89-a4ce-d0c0e2d9edc4)</ept> callback mechanism.</source>
        </trans-unit>
        <trans-unit id="6632" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6633" translate="yes" xml:space="preserve">
          <source>Points to the main frame window of the application, and is used for routing update messages <bpt id="p1">*</bpt>.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="6634" translate="yes" xml:space="preserve">
          <source>Flag that indicates whether a control that has no update handler should be automatically displayed as disabled.</source>
        </trans-unit>
        <trans-unit id="6635" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6636" translate="yes" xml:space="preserve">
          <source>If a child control does not have a handler and <ph id="ph1">`bDisableIfNoHndler`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, then the child control will be disabled.</source>
        </trans-unit>
        <trans-unit id="6637" translate="yes" xml:space="preserve">
          <source>The framework calls this member function for controls in dialog bars or toolbars as part of the application's idle processing.</source>
        </trans-unit>
        <trans-unit id="6638" translate="yes" xml:space="preserve">
          <source>CWnd::UpdateLayeredWindow</source>
        </trans-unit>
        <trans-unit id="6639" translate="yes" xml:space="preserve">
          <source>Updates the position, size, shape, content, and translucency of a layered window.</source>
        </trans-unit>
        <trans-unit id="6640" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6641" translate="yes" xml:space="preserve">
          <source>A pointer to a device context for the screen.</source>
        </trans-unit>
        <trans-unit id="6642" translate="yes" xml:space="preserve">
          <source>It is used for palette color matching when the window contents are updated.</source>
        </trans-unit>
        <trans-unit id="6643" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`pDCDst`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the default palette will be used.</source>
        </trans-unit>
        <trans-unit id="6644" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`pDCSrc`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, <ph id="ph2">`pDCDst`</ph> must be <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="6645" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> structure specifying the new screen position of the layered window.</source>
        </trans-unit>
        <trans-unit id="6646" translate="yes" xml:space="preserve">
          <source>If the current position is not changing, <ph id="ph1">`pptDst`</ph> can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="6647" translate="yes" xml:space="preserve">
          <source>psize</source>
        </trans-unit>
        <trans-unit id="6648" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">**</bpt>SIZE<ept id="p1">**</ept> structure that specifies the new size of the layered window.</source>
        </trans-unit>
        <trans-unit id="6649" translate="yes" xml:space="preserve">
          <source>If the size of the window is not changing, <bpt id="p1">*</bpt>psize<ept id="p1">*</ept> can be <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="6650" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`pDCSrc`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, <bpt id="p2">*</bpt>psize<ept id="p2">*</ept> must be <bpt id="p3">**</bpt>NULL<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="6651" translate="yes" xml:space="preserve">
          <source>A pointer to a DC for the surface that defines the layered window.</source>
        </trans-unit>
        <trans-unit id="6652" translate="yes" xml:space="preserve">
          <source>If the shape and visual context of the window are not changing, <ph id="ph1">`pDCSrc`</ph> can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="6653" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> structure that specifies the location of the layer in the device context.</source>
        </trans-unit>
        <trans-unit id="6654" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`pDCSrc`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, <ph id="ph2">`pptSrc`</ph> should be <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="6655" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">**</bpt>COLORREF<ept id="p1">**</ept> value that specifies the transparency color key to be used when composing the layered window.</source>
        </trans-unit>
        <trans-unit id="6656" translate="yes" xml:space="preserve">
          <source>All pixels painted by the window in this color will be transparent.</source>
        </trans-unit>
        <trans-unit id="6657" translate="yes" xml:space="preserve">
          <source>To generate a <bpt id="p1">**</bpt>COLORREF<ept id="p1">**</ept>, use the RGB macro.</source>
        </trans-unit>
        <trans-unit id="6658" translate="yes" xml:space="preserve">
          <source>pblend</source>
        </trans-unit>
        <trans-unit id="6659" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>BLENDFUNCTION<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd183393)</ept> structure that specifies the transparency value to be used when composing the layered window.</source>
        </trans-unit>
        <trans-unit id="6660" translate="yes" xml:space="preserve">
          <source>Specifies an action to take.</source>
        </trans-unit>
        <trans-unit id="6661" translate="yes" xml:space="preserve">
          <source>This parameter can be one or more of the following values.</source>
        </trans-unit>
        <trans-unit id="6662" translate="yes" xml:space="preserve">
          <source>For a list of possible values, see <bpt id="p1">[</bpt>UpdateLayeredWindow<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633556)</ept>.</source>
        </trans-unit>
        <trans-unit id="6663" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6664" translate="yes" xml:space="preserve">
          <source>Nonzero if the function succeeds; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="6665" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6666" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the function <bpt id="p1">[</bpt>UpdateLayeredWindow<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633556)</ept>, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="6667" translate="yes" xml:space="preserve">
          <source>CWnd::UpdateWindow</source>
        </trans-unit>
        <trans-unit id="6668" translate="yes" xml:space="preserve">
          <source>Updates the client area by sending a <bpt id="p1">[</bpt>WM_PAINT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd145213)</ept> message if the update region is not empty.</source>
        </trans-unit>
        <trans-unit id="6669" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6670" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`UpdateWindow`</ph> member function sends a <ph id="ph2">`WM_PAINT`</ph> message directly, bypassing the application queue.</source>
        </trans-unit>
        <trans-unit id="6671" translate="yes" xml:space="preserve">
          <source>If the update region is empty, <ph id="ph1">`WM_PAINT`</ph> is not sent.</source>
        </trans-unit>
        <trans-unit id="6672" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="6673" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#124</source>
        </trans-unit>
        <trans-unit id="6674" translate="yes" xml:space="preserve">
          <source>CWnd::ValidateRect</source>
        </trans-unit>
        <trans-unit id="6675" translate="yes" xml:space="preserve">
          <source>Validates the client area within the given rectangle by removing the rectangle from the update region of the window.</source>
        </trans-unit>
        <trans-unit id="6676" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6677" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>CRect<ept id="p1">](../../atl-mfc-shared/reference/crect-class.md)</ept> object or <bpt id="p2">[</bpt>RECT structure<ept id="p2">](../../mfc/reference/rect-structure1.md)</ept> that contains client coordinates of the rectangle to be removed from the update region.</source>
        </trans-unit>
        <trans-unit id="6678" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpRect`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the entire window is validated.</source>
        </trans-unit>
        <trans-unit id="6679" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6680" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>BeginPaint<ept id="p1">](#cwnd__beginpaint)</ept> member function automatically validates the entire client area.</source>
        </trans-unit>
        <trans-unit id="6681" translate="yes" xml:space="preserve">
          <source>Neither the <ph id="ph1">`ValidateRect`</ph> nor the <bpt id="p1">[</bpt>ValidateRgn<ept id="p1">](#cwnd__validatergn)</ept> member function should be called if a portion of the update region needs to be validated before <bpt id="p2">[</bpt>WM_PAINT<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd145213)</ept> is next generated.</source>
        </trans-unit>
        <trans-unit id="6682" translate="yes" xml:space="preserve">
          <source>Windows continues to generate <ph id="ph1">`WM_PAINT`</ph> messages until the current update region is validated.</source>
        </trans-unit>
        <trans-unit id="6683" translate="yes" xml:space="preserve">
          <source>CWnd::ValidateRgn</source>
        </trans-unit>
        <trans-unit id="6684" translate="yes" xml:space="preserve">
          <source>Validates the client area within the given region by removing the region from the current update region of the window.</source>
        </trans-unit>
        <trans-unit id="6685" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6686" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CRgn<ept id="p1">](../../mfc/reference/crgn-class.md)</ept> object that identifies a region that defines the area to be removed from the update region.</source>
        </trans-unit>
        <trans-unit id="6687" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the entire client area is removed.</source>
        </trans-unit>
        <trans-unit id="6688" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6689" translate="yes" xml:space="preserve">
          <source>The given region must have been created previously by a region function.</source>
        </trans-unit>
        <trans-unit id="6690" translate="yes" xml:space="preserve">
          <source>The region coordinates are assumed to be client coordinates.</source>
        </trans-unit>
        <trans-unit id="6691" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>BeginPaint<ept id="p1">](#cwnd__beginpaint)</ept> member function automatically validates the entire client area.</source>
        </trans-unit>
        <trans-unit id="6692" translate="yes" xml:space="preserve">
          <source>Neither the <bpt id="p1">[</bpt>ValidateRect<ept id="p1">](#cwnd__validaterect)</ept> nor the <ph id="ph1">`ValidateRgn`</ph> member function should be called if a portion of the update region must be validated before the next <bpt id="p2">[</bpt>WM_PAINT<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/dd145213)</ept> message is generated.</source>
        </trans-unit>
        <trans-unit id="6693" translate="yes" xml:space="preserve">
          <source>CWnd::WindowFromPoint</source>
        </trans-unit>
        <trans-unit id="6694" translate="yes" xml:space="preserve">
          <source>Retrieves the window that contains the specified point; <ph id="ph1">`point`</ph> must specify the screen coordinates of a point on the screen.</source>
        </trans-unit>
        <trans-unit id="6695" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6696" translate="yes" xml:space="preserve">
          <source>Specifies a <bpt id="p1">[</bpt>CPoint<ept id="p1">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object or <bpt id="p2">[</bpt>POINT<ept id="p2">](../../mfc/reference/point-structure1.md)</ept> data structure that defines the point to be checked.</source>
        </trans-unit>
        <trans-unit id="6697" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6698" translate="yes" xml:space="preserve">
          <source>A pointer to the window object in which the point lies.</source>
        </trans-unit>
        <trans-unit id="6699" translate="yes" xml:space="preserve">
          <source>It is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if no window exists at the given point.</source>
        </trans-unit>
        <trans-unit id="6700" translate="yes" xml:space="preserve">
          <source>The returned pointer may be temporary and should not be stored for later use.</source>
        </trans-unit>
        <trans-unit id="6701" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6702" translate="yes" xml:space="preserve">
          <source>does not retrieve a hidden or disabled window, even if the point is within the window.</source>
        </trans-unit>
        <trans-unit id="6703" translate="yes" xml:space="preserve">
          <source>An application should use the <bpt id="p1">[</bpt>ChildWindowFromPoint<ept id="p1">](#cwnd__childwindowfrompoint)</ept> member function for a nonrestrictive search.</source>
        </trans-unit>
        <trans-unit id="6704" translate="yes" xml:space="preserve">
          <source>CWnd::WindowProc</source>
        </trans-unit>
        <trans-unit id="6705" translate="yes" xml:space="preserve">
          <source>Provides a Windows procedure ( <ph id="ph1">`WindowProc`</ph>) for a <ph id="ph2">`CWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="6706" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6707" translate="yes" xml:space="preserve">
          <source>Specifies the Windows message to be processed.</source>
        </trans-unit>
        <trans-unit id="6708" translate="yes" xml:space="preserve">
          <source>Provides additional information used in processing the message.</source>
        </trans-unit>
        <trans-unit id="6709" translate="yes" xml:space="preserve">
          <source>The parameter value depends on the message.</source>
        </trans-unit>
        <trans-unit id="6710" translate="yes" xml:space="preserve">
          <source>Provides additional information used in processing the message.</source>
        </trans-unit>
        <trans-unit id="6711" translate="yes" xml:space="preserve">
          <source>The parameter value depends on the message.</source>
        </trans-unit>
        <trans-unit id="6712" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6713" translate="yes" xml:space="preserve">
          <source>The return value depends on the message.</source>
        </trans-unit>
        <trans-unit id="6714" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6715" translate="yes" xml:space="preserve">
          <source>It dispatches messages through the window's message map.</source>
        </trans-unit>
        <trans-unit id="6716" translate="yes" xml:space="preserve">
          <source>CWnd::WinHelp</source>
        </trans-unit>
        <trans-unit id="6717" translate="yes" xml:space="preserve">
          <source>Called to initiate the WinHelp application.</source>
        </trans-unit>
        <trans-unit id="6718" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6719" translate="yes" xml:space="preserve">
          <source>Specifies additional data.</source>
        </trans-unit>
        <trans-unit id="6720" translate="yes" xml:space="preserve">
          <source>The value used depends on the value of the <ph id="ph1">`nCmd`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="6721" translate="yes" xml:space="preserve">
          <source>Specifies the type of help requested.</source>
        </trans-unit>
        <trans-unit id="6722" translate="yes" xml:space="preserve">
          <source>For a list of possible values and how they affect the <ph id="ph1">`dwData`</ph> parameter, see the <bpt id="p1">[</bpt>WinHelp<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb762267)</ept> Windows function in the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="6723" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6724" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CWinApp::WinHelp<ept id="p1">](../../mfc/reference/cwinapp-class.md#cwinapp__winhelp)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="6725" translate="yes" xml:space="preserve">
          <source>CWnd::RegisterTouchWindow</source>
        </trans-unit>
        <trans-unit id="6726" translate="yes" xml:space="preserve">
          <source>Registers or unregisters Windows touch support.</source>
        </trans-unit>
        <trans-unit id="6727" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="6728" translate="yes" xml:space="preserve">
          <source>indicates register Windows touch support; <ph id="ph1">`FALSE`</ph> otherwise.</source>
        </trans-unit>
        <trans-unit id="6729" translate="yes" xml:space="preserve">
          <source>A set of bit flags that specify optional modifications.</source>
        </trans-unit>
        <trans-unit id="6730" translate="yes" xml:space="preserve">
          <source>This field may contain 0 or one of the following values: TWF_FINETOUCH, TWF_WANTPALM.</source>
        </trans-unit>
        <trans-unit id="6731" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="6732" translate="yes" xml:space="preserve">
          <source>if successful; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="6733" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6734" translate="yes" xml:space="preserve">
          <source>CWnd::ResizeDynamicLayout</source>
        </trans-unit>
        <trans-unit id="6735" translate="yes" xml:space="preserve">
          <source>Called by the framework when the window size changes to adjust the layout of child windows, if dynamic layout is enabled for the window.</source>
        </trans-unit>
        <trans-unit id="6736" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="6737" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="6738" translate="yes" xml:space="preserve">
          <source>CCmdTarget Class</source>
        </trans-unit>
        <trans-unit id="6739" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="6740" translate="yes" xml:space="preserve">
          <source>CFrameWnd Class</source>
        </trans-unit>
        <trans-unit id="6741" translate="yes" xml:space="preserve">
          <source>CView Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>