{"nodes":[{"pos":[12,44],"content":"_cputs, _cputws | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_cputs, _cputws | Microsoft Docs","pos":[0,32]}]},{"pos":[1143,1158],"content":"_cputs, _cputws","linkify":"_cputs, _cputws","nodes":[{"content":"_cputs, _cputws","pos":[0,15]}]},{"content":"Puts a string to the console.","pos":[1159,1188]},{"pos":[1196,1456],"content":"[!IMPORTANT]\n This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[13,258],"nodes":[{"content":"This API cannot be used in applications that execute in the <ph id=\"ph1\">[!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]</ph>.","pos":[1,117],"source":" This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[118,245],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"pos":[1465,1471],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1587,1597],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Output string.","pos":[1610,1624]},{"pos":[1633,1645],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If successful, <ph id=\"ph1\">`_cputs`</ph> returns 0.","pos":[1649,1683],"source":"If successful, `_cputs` returns 0."},{"content":"If the function fails, it returns a nonzero value.","pos":[1684,1734]},{"pos":[1743,1750],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_cputs`</ph> function writes the null-terminated string that's pointed to by <ph id=\"ph2\">`str`</ph> directly to the console.","pos":[1754,1861],"source":"The `_cputs` function writes the null-terminated string that's pointed to by `str` directly to the console."},{"content":"A carriage return-line feed (CR-LF) combination is not automatically appended to the string.","pos":[1862,1954]},{"content":"This function validates its parameter.","pos":[1961,1999]},{"content":"If <ph id=\"ph1\">`str`</ph> is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the invalid parameter handler is invoked, as described in <bpt id=\"p2\">[</bpt>Parameter Validation<ept id=\"p2\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2000,2152],"source":" If `str` is **NULL**, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`EINVAL`</ph> and -1 is returned.","pos":[2153,2236],"source":" If execution is allowed to continue, `errno` is set to `EINVAL` and -1 is returned."},{"pos":[2246,2275],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"Tchar.h routine","pos":[2282,2297]},{"content":"_UNICODE and _MBCS not defined","pos":[2298,2328]},{"content":"_MBCS defined","pos":[2329,2342]},{"content":"_UNICODE defined","pos":[2343,2359]},{"pos":[2474,2485],"content":"<bpt id=\"p1\">**</bpt>_cputts<ept id=\"p1\">**</ept>","source":"**_cputts**"},{"pos":[2523,2535],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[2542,2549]},{"content":"Required header","pos":[2550,2565]},{"content":"Optional header","pos":[2566,2581]},{"content":"<ph id=\"ph1\">\\&lt;</ph>conio.h&gt;","pos":[2657,2667],"source":"\\<conio.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>errno.h&gt;","pos":[2668,2678],"source":"\\<errno.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>conio.h&gt;","pos":[2693,2703],"source":"\\<conio.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>errno.h&gt;","pos":[2704,2714],"source":"\\<errno.h>"},{"pos":[2722,2820],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[2829,2838],"content":"Libraries","linkify":"Libraries","nodes":[{"content":"Libraries","pos":[0,9]}]},{"pos":[2842,2934],"content":"All versions of the <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept>.","source":"All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md)."},{"pos":[2943,2950],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4085,4091],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[4188,4196],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Console and Port I/O<ept id=\"p1\">](../../c-runtime-library/console-and-port-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[4200,4272],"source":"[Console and Port I/O](../../c-runtime-library/console-and-port-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_putch, _putwch<ept id=\"p1\">](../../c-runtime-library/reference/putch-putwch.md)</ept>","pos":[4275,4344],"source":" [_putch, _putwch](../../c-runtime-library/reference/putch-putwch.md)"}],"content":"---\ntitle: \"_cputs, _cputws | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_cputws\"\n  - \"_cputs\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-conio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"cputws\"\n  - \"_cputs\"\n  - \"_cputws\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"strings [C++], writing\"\n  - \"_cputs function\"\n  - \"_cputws function\"\n  - \"putting strings to the console\"\n  - \"cputs function\"\n  - \"console, sending strings to\"\n  - \"cputws function\"\nms.assetid: ec418484-0f8d-43ec-8d8b-198a556c659e\ncaps.latest.revision: 16\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _cputs, _cputws\nPuts a string to the console.  \n  \n> [!IMPORTANT]\n>  This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \n  \n      int _cputs(   \nconst char *str   \n);  \nint _cputws(  \nconst wchar_t *str   \n);  \n```  \n  \n#### Parameters  \n `str`  \n Output string.  \n  \n## Return Value  \n If successful, `_cputs` returns 0. If the function fails, it returns a nonzero value.  \n  \n## Remarks  \n The `_cputs` function writes the null-terminated string that's pointed to by `str` directly to the console. A carriage return-line feed (CR-LF) combination is not automatically appended to the string.  \n  \n This function validates its parameter. If `str` is **NULL**, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, `errno` is set to `EINVAL` and -1 is returned.  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|**_cputts**|`_cputs`|`_cputs`|`_cputws`|  \n  \n## Requirements  \n  \n|Routine|Required header|Optional header|  \n|-------------|---------------------|---------------------|  \n|`_cputs`|\\<conio.h>|\\<errno.h>|  \n|`_cputws`|\\<conio.h>|\\<errno.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Libraries  \n All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md).  \n  \n## Example  \n  \n```  \n  \n      // crt_cputs.c  \n// compile with: /c  \n// This program first displays a string to the console.  \n  \n#include <conio.h>  \n#include <errno.h>  \n  \nvoid print_to_console(char* buffer)  \n{  \n   int retval;  \n   retval = _cputs( buffer );  \n   if (retval)  \n   {  \n       if (errno == EINVAL)  \n       {  \n         _cputs( \"Invalid buffer in print_to_console.\\r\\n\");  \n       }  \n       else  \n         _cputs( \"Unexpected error in print_to_console.\\r\\n\");  \n   }  \n}  \n  \nvoid wprint_to_console(wchar_t* wbuffer)  \n{  \n   int retval;  \n   retval = _cputws( wbuffer );  \n   if (retval)  \n   {  \n       if (errno == EINVAL)  \n       {  \n         _cputws( L\"Invalid buffer in wprint_to_console.\\r\\n\");  \n       }  \n       else  \n         _cputws( L\"Unexpected error in wprint_to_console.\\r\\n\");  \n   }  \n}  \n  \nint main()  \n{  \n  \n   // String to print at console.   \n   // Notice the \\r (return) character.   \n   char* buffer = \"Hello world (courtesy of _cputs)!\\r\\n\";  \n   wchar_t *wbuffer = L\"Hello world (courtesy of _cputws)!\\r\\n\";  \n   print_to_console(buffer);  \n   wprint_to_console( wbuffer );  \n}  \n```  \n  \n## Output  \n  \n```  \nHello world (courtesy of _cputs)!  \nHello world (courtesy of _cputws)!  \n```  \n  \n## See Also  \n [Console and Port I/O](../../c-runtime-library/console-and-port-i-o.md)   \n [_putch, _putwch](../../c-runtime-library/reference/putch-putwch.md)"}