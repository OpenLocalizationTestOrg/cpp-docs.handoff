<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dd342560da4ee540d5153fd093ca9882c53b8dbc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\assembler\inline\accessing-c-or-cpp-data-in-asm-blocks.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e90c252b4dbac243ba53c4dc8ae60971ec294b97</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01aa49b6429bc82f8b93662475bc00e1acffd1a5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Accessing C or C++ Data in __asm Blocks | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Accessing C or C++ Data in __asm Blocks</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A great convenience of inline assembly is the ability to refer to C or C++ variables by name.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`__asm`</ph> block can refer to any symbols, including variable names, that are in scope where the block appears.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For instance, if the C variable <ph id="ph1">`var`</ph> is in scope, the instruction</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>stores the value of <ph id="ph1">`var`</ph> in EAX.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If a class, structure, or union member has a unique name, an <ph id="ph1">`__asm`</ph> block can refer to it using only the member name, without specifying the variable or <ph id="ph2">`typedef`</ph> name before the period (<bpt id="p1">**</bpt>.<ept id="p1">**</ept>) operator.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If the member name is not unique, however, you must place a variable or <ph id="ph1">`typedef`</ph> name immediately before the period operator.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, the structure types in the following sample share <ph id="ph1">`same_name`</ph> as their member name:.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If you declare variables with the types</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>all references to the member <ph id="ph1">`same_name`</ph> must use the variable name because <ph id="ph2">`same_name`</ph> is not unique.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>But the member <ph id="ph1">`weasel`</ph> has a unique name, so you can refer to it using only its member name:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Note that omitting the variable name is merely a coding convenience.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The same assembly instructions are generated whether or not the variable name is present.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can access data members in C++ without regard to access restrictions.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>However, you cannot call member functions.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Using C or C++ in __asm Blocks</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>