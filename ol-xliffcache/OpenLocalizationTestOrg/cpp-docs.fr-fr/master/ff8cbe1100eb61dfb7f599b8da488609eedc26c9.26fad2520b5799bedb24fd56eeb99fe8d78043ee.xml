{"nodes":[{"pos":[12,72],"content":"localtime_s, _localtime32_s, _localtime64_s | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"localtime_s, _localtime32_s, _localtime64_s | Microsoft Docs","pos":[0,60]}]},{"pos":[1224,1267],"content":"localtime_s, _localtime32_s, _localtime64_s","linkify":"localtime_s, _localtime32_s, _localtime64_s","nodes":[{"content":"localtime_s, _localtime32_s, _localtime64_s","pos":[0,43]}]},{"content":"Converts a time value and corrects for the local time zone.","pos":[1268,1327]},{"content":"These are versions of <bpt id=\"p1\">[</bpt>localtime, _localtime32, _localtime64<ept id=\"p1\">](../../c-runtime-library/reference/localtime-localtime32-localtime64.md)</ept> with security enhancements as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1328,1593],"source":" These are versions of [localtime, _localtime32, _localtime64](../../c-runtime-library/reference/localtime-localtime32-localtime64.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"pos":[1602,1608],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1867,1877],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to the time structure to be filled in.","pos":[1890,1936]},{"content":"Pointer to the stored time.","pos":[1953,1980]},{"pos":[1989,2001],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Zero if successful.","pos":[2005,2024]},{"content":"The return value is an error code if there is a failure.","pos":[2025,2081]},{"content":"Error codes are defined in Errno.h.","pos":[2082,2117]},{"content":"For a listing of these errors, see <bpt id=\"p1\">[</bpt>errno<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","pos":[2118,2229],"source":" For a listing of these errors, see [errno](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"pos":[2239,2255],"content":"Error Conditions","linkify":"Error Conditions","nodes":[{"content":"Error Conditions","pos":[0,16]}]},{"content":"Return value","pos":[2275,2287]},{"pos":[2288,2302],"content":"Value in <ph id=\"ph1\">`_tm`</ph>","source":"Value in `_tm`"},{"content":"Invokes invalid parameter handler","pos":[2303,2336]},{"content":"any","pos":[2457,2460]},{"content":"Not modified","pos":[2470,2482]},{"content":"Yes","pos":[2483,2486]},{"pos":[2491,2526],"content":"Not <ph id=\"ph1\">`NULL`</ph> (points to valid memory)","source":"Not `NULL` (points to valid memory)"},{"content":"All fields set to -1","pos":[2543,2563]},{"content":"Yes","pos":[2564,2567]},{"pos":[2572,2607],"content":"Not <ph id=\"ph1\">`NULL`</ph> (points to valid memory)","source":"Not `NULL` (points to valid memory)"},{"pos":[2608,2652],"content":"less than 0 or greater than <ph id=\"ph1\">`_MAX__TIME64_T`</ph>","source":"less than 0 or greater than `_MAX__TIME64_T`"},{"content":"All fields set to -1","pos":[2662,2682]},{"content":"No","pos":[2683,2685]},{"content":"In the case of the first two error conditions, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2693,2870],"source":"In the case of the first two error conditions, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and return <ph id=\"ph3\">`EINVAL`</ph>.","pos":[2871,2968],"source":" If execution is allowed to continue, these functions set `errno` to `EINVAL` and return `EINVAL`."},{"pos":[2977,2984],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_localtime32_s`</ph> function converts a time stored as a <bpt id=\"p1\">[</bpt>time_t<ept id=\"p1\">](../../c-runtime-library/standard-types.md)</ept> value and stores the result in a structure of type <ph id=\"ph2\">`tm`</ph>.","pos":[2988,3154],"source":"The `_localtime32_s` function converts a time stored as a [time_t](../../c-runtime-library/standard-types.md) value and stores the result in a structure of type `tm`."},{"content":"The <ph id=\"ph1\">`long`</ph> value <ph id=\"ph2\">`timer`</ph> represents the seconds elapsed since midnight (00:00:00), January 1, 1970, UTC.","pos":[3155,3259],"source":" The `long` value `timer` represents the seconds elapsed since midnight (00:00:00), January 1, 1970, UTC."},{"content":"This value is usually obtained from the <ph id=\"ph1\">`time`</ph> function.","pos":[3260,3316],"source":" This value is usually obtained from the `time` function."},{"content":"<ph id=\"ph1\">`_localtime32_s`</ph> corrects for the local time zone if the user first sets the global environment variable <ph id=\"ph2\">`TZ`</ph>.","pos":[3323,3433],"source":"`_localtime32_s` corrects for the local time zone if the user first sets the global environment variable `TZ`."},{"content":"When <ph id=\"ph1\">`TZ`</ph> is set, three other environment variables (<ph id=\"ph2\">`_timezone`</ph>, <ph id=\"ph3\">`_daylight`</ph>, and <ph id=\"ph4\">`_tzname`</ph>) are automatically set as well.","pos":[3434,3558],"source":" When `TZ` is set, three other environment variables (`_timezone`, `_daylight`, and `_tzname`) are automatically set as well."},{"content":"If the <ph id=\"ph1\">`TZ`</ph> variable is not set, <ph id=\"ph2\">`localtime32_s`</ph> attempts to use the time zone information specified in the Date/Time application in Control Panel.","pos":[3559,3706],"source":" If the `TZ` variable is not set, `localtime32_s` attempts to use the time zone information specified in the Date/Time application in Control Panel."},{"content":"If this information cannot be obtained, PST8PDT, which signifies the Pacific time zone, is used by default.","pos":[3707,3814]},{"content":"See <bpt id=\"p1\">[</bpt>_tzset<ept id=\"p1\">](../../c-runtime-library/reference/tzset.md)</ept> for a description of these variables.","pos":[3815,3909],"source":" See [_tzset](../../c-runtime-library/reference/tzset.md) for a description of these variables."},{"content":"<ph id=\"ph1\">`TZ`</ph> is a Microsoft extension and not part of the ANSI standard definition of <ph id=\"ph2\">`localtime`</ph>.","pos":[3910,4000],"source":"`TZ` is a Microsoft extension and not part of the ANSI standard definition of `localtime`."},{"pos":[4008,4108],"content":"[!NOTE]\n The target environment should try to determine whether daylight saving time is in effect.","leadings":["","> "],"nodes":[{"content":"The target environment should try to determine whether daylight saving time is in effect.","pos":[9,98]}]},{"pos":[4115,4356],"content":"<ph id=\"ph1\">`_localtime64_s`</ph>, which uses the <ph id=\"ph2\">`__time64_t`</ph> structure, allows dates to be expressed up through 23:59:59, December 31, 3000, coordinated universal time (UTC), whereas <ph id=\"ph3\">`_localtime32_s`</ph> represents dates through 23:59:59 January 18, 2038, UTC.","source":"`_localtime64_s`, which uses the `__time64_t` structure, allows dates to be expressed up through 23:59:59, December 31, 3000, coordinated universal time (UTC), whereas `_localtime32_s` represents dates through 23:59:59 January 18, 2038, UTC."},{"content":"<ph id=\"ph1\">`localtime_s`</ph> is an inline function which evaluates to <ph id=\"ph2\">`_localtime64_s`</ph>, and <ph id=\"ph3\">`time_t`</ph> is equivalent to <ph id=\"ph4\">`__time64_t`</ph>.","pos":[4363,4479],"source":"`localtime_s` is an inline function which evaluates to `_localtime64_s`, and `time_t` is equivalent to `__time64_t`."},{"content":"If you need to force the compiler to interpret <ph id=\"ph1\">`time_t`</ph> as the old 32-bit <ph id=\"ph2\">`time_t`</ph>, you can define <ph id=\"ph3\">`_USE_32BIT_TIME_T`</ph>.","pos":[4480,4599],"source":" If you need to force the compiler to interpret `time_t` as the old 32-bit `time_t`, you can define `_USE_32BIT_TIME_T`."},{"content":"Doing this will cause <ph id=\"ph1\">`localtime_s`</ph> to evaluate to <ph id=\"ph2\">`_localtime32_s`</ph>.","pos":[4600,4668],"source":" Doing this will cause `localtime_s` to evaluate to `_localtime32_s`."},{"content":"This is not recommended because your application may fail after January 18, 2038, and it is not allowed on 64-bit platforms.","pos":[4669,4793]},{"pos":[4800,4935],"content":"The fields of the structure type <bpt id=\"p1\">[</bpt>tm<ept id=\"p1\">](../../c-runtime-library/standard-types.md)</ept> store the following values, each of which is an <ph id=\"ph1\">`int`</ph>.","source":"The fields of the structure type [tm](../../c-runtime-library/standard-types.md) store the following values, each of which is an `int`."},{"content":"Seconds after minute (0 – 59).","pos":[4954,4984]},{"content":"Minutes after hour (0 – 59).","pos":[5003,5031]},{"content":"Hours after midnight (0 – 23).","pos":[5051,5081]},{"content":"Day of month (1 – 31).","pos":[5101,5123]},{"content":"Month (0 – 11; January = 0).","pos":[5142,5170]},{"content":"Year (current year minus 1900).","pos":[5190,5221]},{"content":"Day of week (0 – 6; Sunday = 0).","pos":[5241,5273]},{"content":"Day of year (0 – 365; January 1 = 0).","pos":[5293,5330]},{"content":"Positive value if daylight saving time is in effect; 0 if daylight saving time is not in effect; negative value if status of daylight saving time is unknown.","pos":[5351,5508]},{"content":"If the <ph id=\"ph1\">`TZ`</ph> environment variable is set, the C run-time library assumes rules appropriate to the United States for implementing the calculation of daylight saving time (DST).","pos":[5509,5683],"source":" If the `TZ` environment variable is set, the C run-time library assumes rules appropriate to the United States for implementing the calculation of daylight saving time (DST)."},{"pos":[5692,5704],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[5711,5718]},{"content":"Required header","pos":[5719,5734]},{"content":"<ph id=\"ph1\">\\&lt;</ph>time.h&gt;","pos":[5793,5802],"source":"\\<time.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>time.h&gt;","pos":[5824,5833],"source":"\\<time.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>time.h&gt;","pos":[5855,5864],"source":"\\<time.h>"},{"pos":[5872,5990],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[5999,6006],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7538,7551],"content":"Sample Output","linkify":"Sample Output","nodes":[{"content":"Sample Output","pos":[0,13]}]},{"pos":[7600,7625],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[7629,7735],"content":"<bpt id=\"p1\">[</bpt>System::DateTime::ToLocalTime<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.datetime.tolocaltime.aspx)</ept>","source":"[System::DateTime::ToLocalTime](https://msdn.microsoft.com/en-us/library/system.datetime.tolocaltime.aspx)"},{"pos":[7744,7752],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Time Management<ept id=\"p1\">](../../c-runtime-library/time-management.md)</ept><ph id=\"ph1\"> </ph>","pos":[7756,7818],"source":"[Time Management](../../c-runtime-library/time-management.md) "},{"content":"<bpt id=\"p1\"> [</bpt>asctime_s, _wasctime_s<ept id=\"p1\">](../../c-runtime-library/reference/asctime-s-wasctime-s.md)</ept><ph id=\"ph1\"> </ph>","pos":[7821,7906],"source":" [asctime_s, _wasctime_s](../../c-runtime-library/reference/asctime-s-wasctime-s.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ctime, _ctime32, _ctime64, _wctime, _wctime32, _wctime64<ept id=\"p1\">](../../c-runtime-library/reference/ctime-ctime32-ctime64-wctime-wctime32-wctime64.md)</ept><ph id=\"ph1\"> </ph>","pos":[7909,8054],"source":" [ctime, _ctime32, _ctime64, _wctime, _wctime32, _wctime64](../../c-runtime-library/reference/ctime-ctime32-ctime64-wctime-wctime32-wctime64.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_ftime, _ftime32, _ftime64<ept id=\"p1\">](../../c-runtime-library/reference/ftime-ftime32-ftime64.md)</ept><ph id=\"ph1\"> </ph>","pos":[8057,8147],"source":" [_ftime, _ftime32, _ftime64](../../c-runtime-library/reference/ftime-ftime32-ftime64.md) "},{"content":"<bpt id=\"p1\"> [</bpt>gmtime_s, _gmtime32_s, _gmtime64_s<ept id=\"p1\">](../../c-runtime-library/reference/gmtime-s-gmtime32-s-gmtime64-s.md)</ept><ph id=\"ph1\"> </ph>","pos":[8150,8257],"source":" [gmtime_s, _gmtime32_s, _gmtime64_s](../../c-runtime-library/reference/gmtime-s-gmtime32-s-gmtime64-s.md) "},{"content":"<bpt id=\"p1\"> [</bpt>localtime, _localtime32, _localtime64<ept id=\"p1\">](../../c-runtime-library/reference/localtime-localtime32-localtime64.md)</ept><ph id=\"ph1\"> </ph>","pos":[8260,8373],"source":" [localtime, _localtime32, _localtime64](../../c-runtime-library/reference/localtime-localtime32-localtime64.md) "},{"content":"<bpt id=\"p1\"> [</bpt>time, _time32, _time64<ept id=\"p1\">](../../c-runtime-library/reference/time-time32-time64.md)</ept><ph id=\"ph1\"> </ph>","pos":[8376,8459],"source":" [time, _time32, _time64](../../c-runtime-library/reference/time-time32-time64.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_tzset<ept id=\"p1\">](../../c-runtime-library/reference/tzset.md)</ept>","pos":[8462,8515],"source":" [_tzset](../../c-runtime-library/reference/tzset.md)"}],"content":"---\ntitle: \"localtime_s, _localtime32_s, _localtime64_s | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_localtime64_s\"\n  - \"_localtime32_s\"\n  - \"localtime_s\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-time-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_localtime32_s\"\n  - \"localtime32_s\"\n  - \"localtime_s\"\n  - \"localtime64_s\"\n  - \"_localtime64_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_localtime64_s function\"\n  - \"localtime32_s function\"\n  - \"_localtime32_s function\"\n  - \"localtime64_s function\"\n  - \"time, converting values\"\n  - \"localtime_s function\"\nms.assetid: 842d1dc7-d6f8-41d3-b340-108d4b90df54\ncaps.latest.revision: 23\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# localtime_s, _localtime32_s, _localtime64_s\nConverts a time value and corrects for the local time zone. These are versions of [localtime, _localtime32, _localtime64](../../c-runtime-library/reference/localtime-localtime32-localtime64.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nerrno_t localtime_s(  \n   struct tm* _tm,  \n   const time_t *time   \n);  \nerrno_t _localtime32_s(  \n   struct tm* _tm,  \n   const time32_t *time   \n);  \nerrno_t _localtime64_s(  \n   struct tm* _tm,  \n   const _time64_t *time   \n);  \n```  \n  \n#### Parameters  \n `_tm`  \n Pointer to the time structure to be filled in.  \n  \n `time`  \n Pointer to the stored time.  \n  \n## Return Value  \n Zero if successful. The return value is an error code if there is a failure. Error codes are defined in Errno.h. For a listing of these errors, see [errno](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n### Error Conditions  \n  \n|`_tm`|`time`|Return value|Value in `_tm`|Invokes invalid parameter handler|  \n|-----------|------------|------------------|--------------------|---------------------------------------|  \n|`NULL`|any|`EINVAL`|Not modified|Yes|  \n|Not `NULL` (points to valid memory)|`NULL`|`EINVAL`|All fields set to -1|Yes|  \n|Not `NULL` (points to valid memory)|less than 0 or greater than `_MAX__TIME64_T`|`EINVAL`|All fields set to -1|No|  \n  \n In the case of the first two error conditions, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions set `errno` to `EINVAL` and return `EINVAL`.  \n  \n## Remarks  \n The `_localtime32_s` function converts a time stored as a [time_t](../../c-runtime-library/standard-types.md) value and stores the result in a structure of type `tm`. The `long` value `timer` represents the seconds elapsed since midnight (00:00:00), January 1, 1970, UTC. This value is usually obtained from the `time` function.  \n  \n `_localtime32_s` corrects for the local time zone if the user first sets the global environment variable `TZ`. When `TZ` is set, three other environment variables (`_timezone`, `_daylight`, and `_tzname`) are automatically set as well. If the `TZ` variable is not set, `localtime32_s` attempts to use the time zone information specified in the Date/Time application in Control Panel. If this information cannot be obtained, PST8PDT, which signifies the Pacific time zone, is used by default. See [_tzset](../../c-runtime-library/reference/tzset.md) for a description of these variables. `TZ` is a Microsoft extension and not part of the ANSI standard definition of `localtime`.  \n  \n> [!NOTE]\n>  The target environment should try to determine whether daylight saving time is in effect.  \n  \n `_localtime64_s`, which uses the `__time64_t` structure, allows dates to be expressed up through 23:59:59, December 31, 3000, coordinated universal time (UTC), whereas `_localtime32_s` represents dates through 23:59:59 January 18, 2038, UTC.  \n  \n `localtime_s` is an inline function which evaluates to `_localtime64_s`, and `time_t` is equivalent to `__time64_t`. If you need to force the compiler to interpret `time_t` as the old 32-bit `time_t`, you can define `_USE_32BIT_TIME_T`. Doing this will cause `localtime_s` to evaluate to `_localtime32_s`. This is not recommended because your application may fail after January 18, 2038, and it is not allowed on 64-bit platforms.  \n  \n The fields of the structure type [tm](../../c-runtime-library/standard-types.md) store the following values, each of which is an `int`.  \n  \n `tm_sec`  \n Seconds after minute (0 – 59).  \n  \n `tm_min`  \n Minutes after hour (0 – 59).  \n  \n `tm_hour`  \n Hours after midnight (0 – 23).  \n  \n `tm_mday`  \n Day of month (1 – 31).  \n  \n `tm_mon`  \n Month (0 – 11; January = 0).  \n  \n `tm_year`  \n Year (current year minus 1900).  \n  \n `tm_wday`  \n Day of week (0 – 6; Sunday = 0).  \n  \n `tm_yday`  \n Day of year (0 – 365; January 1 = 0).  \n  \n `tm_isdst`  \n Positive value if daylight saving time is in effect; 0 if daylight saving time is not in effect; negative value if status of daylight saving time is unknown. If the `TZ` environment variable is set, the C run-time library assumes rules appropriate to the United States for implementing the calculation of daylight saving time (DST).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`localtime_s`|\\<time.h>|  \n|`_localtime32_s`|\\<time.h>|  \n|`_localtime64_s`|\\<time.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_localtime_s.c  \n/* This program uses _time64 to get the current time   \n * and then uses _localtime64_s() to convert this time to a structure   \n * representing the local time. The program converts the result   \n * from a 24-hour clock to a 12-hour clock and determines the   \n * proper extension (AM or PM).  \n */  \n  \n#include <stdio.h>  \n#include <string.h>  \n#include <time.h>  \n  \nint main( void )  \n{  \n        struct tm newtime;  \n        char am_pm[] = \"AM\";  \n        __time64_t long_time;  \n        char timebuf[26];  \n        errno_t err;  \n  \n        // Get time as 64-bit integer.  \n        _time64( &long_time );   \n        // Convert to local time.  \n        err = _localtime64_s( &newtime, &long_time );   \n        if (err)  \n        {  \n            printf(\"Invalid argument to _localtime64_s.\");  \n            exit(1);  \n        }  \n        if( newtime.tm_hour > 12 )        // Set up extension.   \n                strcpy_s( am_pm, sizeof(am_pm), \"PM\" );  \n        if( newtime.tm_hour > 12 )        // Convert from 24-hour   \n                newtime.tm_hour -= 12;    // to 12-hour clock.   \n        if( newtime.tm_hour == 0 )        // Set hour to 12 if midnight.  \n                newtime.tm_hour = 12;  \n  \n        // Convert to an ASCII representation.   \n        err = asctime_s(timebuf, 26, &newtime);  \n        if (err)  \n        {  \n           printf(\"Invalid argument to asctime_s.\");  \n           exit(1);  \n        }  \n        printf( \"%.19s %s\\n\", timebuf, am_pm );  \n}  \n```  \n  \n## Sample Output  \n  \n```  \nFri Apr 25 01:19:27 PM  \n```  \n  \n## .NET Framework Equivalent  \n [System::DateTime::ToLocalTime](https://msdn.microsoft.com/en-us/library/system.datetime.tolocaltime.aspx)  \n  \n## See Also  \n [Time Management](../../c-runtime-library/time-management.md)   \n [asctime_s, _wasctime_s](../../c-runtime-library/reference/asctime-s-wasctime-s.md)   \n [ctime, _ctime32, _ctime64, _wctime, _wctime32, _wctime64](../../c-runtime-library/reference/ctime-ctime32-ctime64-wctime-wctime32-wctime64.md)   \n [_ftime, _ftime32, _ftime64](../../c-runtime-library/reference/ftime-ftime32-ftime64.md)   \n [gmtime_s, _gmtime32_s, _gmtime64_s](../../c-runtime-library/reference/gmtime-s-gmtime32-s-gmtime64-s.md)   \n [localtime, _localtime32, _localtime64](../../c-runtime-library/reference/localtime-localtime32-localtime64.md)   \n [time, _time32, _time64](../../c-runtime-library/reference/time-time32-time64.md)   \n [_tzset](../../c-runtime-library/reference/tzset.md)"}