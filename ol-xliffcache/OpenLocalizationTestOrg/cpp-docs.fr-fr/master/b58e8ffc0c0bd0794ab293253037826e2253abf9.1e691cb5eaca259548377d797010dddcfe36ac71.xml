{"nodes":[{"pos":[12,56],"content":"Additive Operators: + and - | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Additive Operators: + and - | Microsoft Docs","pos":[0,44]}]},{"content":"Additive Operators: + and -","pos":[829,856]},{"content":"Syntax","pos":[860,866]},{"content":"Remarks","pos":[943,950]},{"content":"The additive operators are:","pos":[954,981]},{"pos":[991,1007],"content":"Addition (<bpt id=\"p1\">**</bpt><ph id=\"ph1\">+</ph><ept id=\"p1\">**</ept>)","source":"Addition (**+**)"},{"pos":[1017,1036],"content":"Subtraction (<bpt id=\"p1\">**</bpt>–<ept id=\"p1\">**</ept>)","source":"Subtraction (**–**)"},{"content":"These binary operators have left-to-right associativity.","pos":[1043,1099]},{"content":"The additive operators take operands of arithmetic or pointer types.","pos":[1106,1174]},{"content":"The result of the addition (<bpt id=\"p1\">**</bpt><ph id=\"ph1\">+</ph><ept id=\"p1\">**</ept>) operator is the sum of the operands.","pos":[1175,1246],"source":" The result of the addition (**+**) operator is the sum of the operands."},{"content":"The result of the subtraction (<bpt id=\"p1\">**</bpt>–<ept id=\"p1\">**</ept>) operator is the difference between the operands.","pos":[1247,1333],"source":" The result of the subtraction (**–**) operator is the difference between the operands."},{"content":"If one or both of the operands are pointers, they must be pointers to objects, not to functions.","pos":[1334,1430]},{"content":"If both operands are pointers, the results are not meaningful unless both are pointers to objects in the same array.","pos":[1431,1547]},{"content":"Additive operators take operands of <bpt id=\"p1\">*</bpt>arithmetic<ept id=\"p1\">*</ept>, <bpt id=\"p2\">*</bpt>integral<ept id=\"p2\">*</ept>, and <bpt id=\"p3\">*</bpt>scalar<ept id=\"p3\">*</ept> types.","pos":[1554,1635],"source":"Additive operators take operands of *arithmetic*, *integral*, and *scalar* types."},{"content":"These are defined in the following table.","pos":[1636,1677]},{"content":"Types Used with Additive Operators","pos":[1687,1721]},{"content":"Type","pos":[1728,1732]},{"content":"Meaning","pos":[1733,1740]},{"content":"arithmetic","pos":[1775,1785]},{"content":"Integral and floating types are collectively called \"arithmetic\" types.","pos":[1787,1858]},{"content":"integral","pos":[1864,1872]},{"content":"Types char and int of all sizes (long, short) and enumerations are \"integral\" types.","pos":[1874,1958]},{"content":"scalar","pos":[1964,1970]},{"content":"Scalar operands are operands of either arithmetic or pointer type.","pos":[1972,2038]},{"content":"The legal combinations for these operators are:","pos":[2046,2093]},{"pos":[2100,2127],"content":"<bpt id=\"p1\">*</bpt>arithmetic<ept id=\"p1\">*</ept><ph id=\"ph1\"> + </ph><bpt id=\"p2\">*</bpt>arithmetic<ept id=\"p2\">*</ept>","source":"*arithmetic* + *arithmetic*"},{"pos":[2134,2155],"content":"<bpt id=\"p1\">*</bpt>scalar<ept id=\"p1\">*</ept><ph id=\"ph1\"> + </ph><bpt id=\"p2\">*</bpt>integral<ept id=\"p2\">*</ept>","source":"*scalar* + *integral*"},{"pos":[2162,2183],"content":"<bpt id=\"p1\">*</bpt>integral<ept id=\"p1\">*</ept><ph id=\"ph1\"> + </ph><bpt id=\"p2\">*</bpt>scalar<ept id=\"p2\">*</ept>","source":"*integral* + *scalar*"},{"pos":[2190,2217],"content":"<bpt id=\"p1\">*</bpt>arithmetic<ept id=\"p1\">*</ept> – <bpt id=\"p2\">*</bpt>arithmetic<ept id=\"p2\">*</ept>","source":"*arithmetic* – *arithmetic*"},{"pos":[2224,2243],"content":"<bpt id=\"p1\">*</bpt>scalar<ept id=\"p1\">*</ept> – <bpt id=\"p2\">*</bpt>scalar<ept id=\"p2\">*</ept>","source":"*scalar* – *scalar*"},{"content":"Note that addition and subtraction are not equivalent operations.","pos":[2250,2315]},{"pos":[2322,2507],"content":"If both operands are of arithmetic type, the conversions covered in <bpt id=\"p1\">[</bpt>Standard Conversions<ept id=\"p1\">](standard-conversions.md)</ept> are applied to the operands, and the result is of the converted type.","source":"If both operands are of arithmetic type, the conversions covered in [Standard Conversions](standard-conversions.md) are applied to the operands, and the result is of the converted type."},{"content":"Example","pos":[2516,2523]},{"content":"Pointer addition","pos":[2928,2944]},{"content":"If one of the operands in an addition operation is a pointer to an array of objects, the other must be of integral type.","pos":[2948,3068]},{"content":"The result is a pointer that is of the same type as the original pointer and that points to another array element.","pos":[3069,3183]},{"content":"The following code fragment illustrates this concept:","pos":[3184,3237]},{"pos":[3484,3711],"content":"Although the integral value 1 is added to <ph id=\"ph1\">`pIntArray`</ph>, it does not mean \"add 1 to the address\"; rather it means \"adjust the pointer to point to the next object in the array\" that happens to be 2 bytes (or <ph id=\"ph2\">`sizeof( int )`</ph>) away.","source":"Although the integral value 1 is added to `pIntArray`, it does not mean \"add 1 to the address\"; rather it means \"adjust the pointer to point to the next object in the array\" that happens to be 2 bytes (or `sizeof( int )`) away."},{"pos":[3719,3895],"content":"[!NOTE]\n Code of the form `pIntArray = pIntArray + 1` is rarely found in C++ programs; to perform an increment, these forms are preferable: `pIntArray++` or `pIntArray += 1`.","leadings":["","> "],"nodes":[{"content":"Code of the form <ph id=\"ph1\">`pIntArray = pIntArray + 1`</ph> is rarely found in C++ programs; to perform an increment, these forms are preferable: <ph id=\"ph2\">`pIntArray++`</ph> or <ph id=\"ph3\">`pIntArray += 1`</ph>.","pos":[9,174],"source":" Code of the form `pIntArray = pIntArray + 1` is rarely found in C++ programs; to perform an increment, these forms are preferable: `pIntArray++` or `pIntArray += 1`."}]},{"content":"Pointer subtraction","pos":[3904,3923]},{"content":"If both operands are pointers, the result of subtraction is the difference (in array elements) between the operands.","pos":[3927,4043]},{"content":"The subtraction expression yields a signed integral result of type ptrdiff_t (defined in the standard include file STDDEF.H).","pos":[4044,4169]},{"content":"One of the operands can be of integral type, as long as it is the second operand.","pos":[4176,4257]},{"content":"The result of the subtraction is of the same type as the original pointer.","pos":[4258,4332]},{"content":"The value of the subtraction is a pointer to the (<bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept> – <bpt id=\"p2\">*</bpt>i<ept id=\"p2\">*</ept>)th array element, where <bpt id=\"p3\">*</bpt>n<ept id=\"p3\">*</ept> is the element pointed to by the original pointer and <bpt id=\"p4\">*</bpt>i<ept id=\"p4\">*</ept> is the integral value of the second operand.","pos":[4333,4523],"source":" The value of the subtraction is a pointer to the (*n* – *i*)th array element, where *n* is the element pointed to by the original pointer and *i* is the integral value of the second operand."},{"content":"See Also","pos":[4532,4540]},{"content":"Expressions with Binary Operators","pos":[4545,4578]},{"content":"C++ Built-in Operators, Precedence and Associativity","pos":[4630,4682]},{"content":"C Additive Operators","pos":[4752,4772]}],"content":"---\ntitle: \"Additive Operators: + and - | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"-\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"operators [C++], addition\"\n  - \"subtraction operator, additive operators\"\n  - \"+ operator, additive operators\"\n  - \"additive operators\"\n  - \"arithmetic operators [C++], additive operators\"\n  - \"- operator, additive operators in C++\"\nms.assetid: d4afafe7-e201-4c69-a649-37f17756e784\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Additive Operators: + and -\n## Syntax  \n  \n```  \nexpression + expression   \nexpression – expression  \n```  \n  \n## Remarks  \n The additive operators are:  \n  \n-   Addition (**+**)  \n  \n-   Subtraction (**–**)  \n  \n These binary operators have left-to-right associativity.  \n  \n The additive operators take operands of arithmetic or pointer types. The result of the addition (**+**) operator is the sum of the operands. The result of the subtraction (**–**) operator is the difference between the operands. If one or both of the operands are pointers, they must be pointers to objects, not to functions. If both operands are pointers, the results are not meaningful unless both are pointers to objects in the same array.  \n  \n Additive operators take operands of *arithmetic*, *integral*, and *scalar* types. These are defined in the following table.  \n  \n### Types Used with Additive Operators  \n  \n|Type|Meaning|  \n|----------|-------------|  \n|*arithmetic*|Integral and floating types are collectively called \"arithmetic\" types.|  \n|*integral*|Types char and int of all sizes (long, short) and enumerations are \"integral\" types.|  \n|*scalar*|Scalar operands are operands of either arithmetic or pointer type.|  \n  \n The legal combinations for these operators are:  \n  \n *arithmetic* + *arithmetic*  \n  \n *scalar* + *integral*  \n  \n *integral* + *scalar*  \n  \n *arithmetic* – *arithmetic*  \n  \n *scalar* – *scalar*  \n  \n Note that addition and subtraction are not equivalent operations.  \n  \n If both operands are of arithmetic type, the conversions covered in [Standard Conversions](standard-conversions.md) are applied to the operands, and the result is of the converted type.  \n  \n## Example  \n  \n```  \n// expre_Additive_Operators.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#define SIZE 5  \nusing namespace std;  \nint main() {  \n   int i = 5, j = 10;  \n   int n[SIZE] = { 0, 1, 2, 3, 4 };  \n   cout  << \"5 + 10 = \" << i + j << endl  \n         << \"5 - 10 = \" << i - j << endl;  \n  \n   // use pointer arithmetic on array  \n  \n   cout << \"n[3] = \" << *( n + 3 ) << endl;  \n}  \n```  \n  \n## Pointer addition  \n If one of the operands in an addition operation is a pointer to an array of objects, the other must be of integral type. The result is a pointer that is of the same type as the original pointer and that points to another array element. The following code fragment illustrates this concept:  \n  \n```  \nshort IntArray[10]; // Objects of type short occupy 2 bytes  \nshort *pIntArray = IntArray;  \n  \nfor( int i = 0; i < 10; ++i )  \n{  \n    *pIntArray = i;  \n    cout << *pIntArray << \"\\n\";  \n    pIntArray = pIntArray + 1;  \n}  \n```  \n  \n Although the integral value 1 is added to `pIntArray`, it does not mean \"add 1 to the address\"; rather it means \"adjust the pointer to point to the next object in the array\" that happens to be 2 bytes (or `sizeof( int )`) away.  \n  \n> [!NOTE]\n>  Code of the form `pIntArray = pIntArray + 1` is rarely found in C++ programs; to perform an increment, these forms are preferable: `pIntArray++` or `pIntArray += 1`.  \n  \n## Pointer subtraction  \n If both operands are pointers, the result of subtraction is the difference (in array elements) between the operands. The subtraction expression yields a signed integral result of type ptrdiff_t (defined in the standard include file STDDEF.H).  \n  \n One of the operands can be of integral type, as long as it is the second operand. The result of the subtraction is of the same type as the original pointer. The value of the subtraction is a pointer to the (*n* – *i*)th array element, where *n* is the element pointed to by the original pointer and *i* is the integral value of the second operand.  \n  \n## See Also  \n [Expressions with Binary Operators](../cpp/expressions-with-binary-operators.md)   \n [C++ Built-in Operators, Precedence and Associativity](../cpp/cpp-built-in-operators-precedence-and-associativity.md)   \n [C Additive Operators](../c-language/c-additive-operators.md)"}