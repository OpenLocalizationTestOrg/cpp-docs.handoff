{"nodes":[{"pos":[12,51],"content":"COleIPFrameWndEx Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"COleIPFrameWndEx Class | Microsoft Docs","pos":[0,39]}]},{"content":"COleIPFrameWndEx Class","pos":[648,670]},{"content":"The <ph id=\"ph1\">`COleIPFrameWndEx`</ph> class implements an OLE container that supports MFC.","pos":[671,746],"source":"The `COleIPFrameWndEx` class implements an OLE container that supports MFC."},{"content":"You must derive the in-place frame window class for your application from the <ph id=\"ph1\">`COleIPFrameWndEx`</ph> class, instead of deriving it from the <bpt id=\"p1\">[</bpt>COleIPFrameWnd<ept id=\"p1\">](../../mfc/reference/coleipframewnd-class.md)</ept>class.","pos":[747,950],"source":" You must derive the in-place frame window class for your application from the `COleIPFrameWndEx` class, instead of deriving it from the [COleIPFrameWnd](../../mfc/reference/coleipframewnd-class.md)class."},{"content":"Syntax","pos":[959,965]},{"content":"Members","pos":[1038,1045]},{"content":"Public Methods","pos":[1055,1069]},{"content":"Name","pos":[1076,1080]},{"content":"Description","pos":[1081,1092]},{"content":"COleIPFrameWndEx::AddDockSite","pos":[1131,1160]},{"content":"COleIPFrameWndEx::AddPane","pos":[1200,1225]},{"content":"COleIPFrameWndEx::AdjustDockingLayout","pos":[1261,1298]},{"content":"COleIPFrameWndEx::DockPane","pos":[1346,1372]},{"content":"COleIPFrameWndEx::DockPaneLeftOf","pos":[1409,1441]},{"content":"Docks one pane to the left of another pane.","pos":[1478,1521]},{"content":"COleIPFrameWndEx::EnableAutoHidePanes","pos":[1527,1564]},{"content":"COleIPFrameWndEx::EnableDocking","pos":[1612,1643]},{"content":"COleIPFrameWndEx::EnablePaneMenu","pos":[1685,1717]},{"content":"COleIPFrameWndEx::GetActivePopup","pos":[1760,1792]},{"content":"Returns a pointer to the currently displayed popup menu.","pos":[1829,1885]},{"content":"COleIPFrameWndEx::GetContainerFrameWindow","pos":[1891,1932]},{"content":"COleIPFrameWndEx::GetDefaultResId","pos":[1984,2017]},{"content":"Returns the resource ID of the frame window that you specified when the window was loaded.","pos":[2055,2145]},{"content":"COleIPFrameWndEx::GetDockFrame","pos":[2151,2181]},{"content":"COleIPFrameWndEx::GetDockingManager","pos":[2222,2257]},{"content":"COleIPFrameWndEx::GetMainFrame","pos":[2303,2333]},{"content":"COleIPFrameWndEx::GetMenuBar","pos":[2374,2402]},{"content":"Returns a pointer to the menu bar object attached to the frame window.","pos":[2435,2505]},{"content":"COleIPFrameWndEx::GetPane","pos":[2511,2536]},{"content":"COleIPFrameWndEx::GetTearOffBars","pos":[2572,2604]},{"content":"Returns a list of pane objects that are in a tear-off state.","pos":[2641,2701]},{"content":"COleIPFrameWndEx::GetToolbarButtonToolTipText","pos":[2707,2752]},{"content":"Called by the framework before the tooltip for a button is displayed.","pos":[2802,2871]},{"content":"COleIPFrameWndEx::InsertPane","pos":[2877,2905]},{"content":"COleIPFrameWndEx::IsMenuBarAvailable","pos":[2944,2980]},{"pos":[3021,3089],"content":"Determines whether the pointer to the menu bar object is not <ph id=\"ph1\">`NULL`</ph>.","source":"Determines whether the pointer to the menu bar object is not `NULL`."},{"content":"COleIPFrameWndEx::IsPointNearDockSite","pos":[3095,3132]},{"content":"COleIPFrameWndEx::LoadFrame","pos":[3180,3207]},{"pos":[3239,3279],"content":"(Overrides <ph id=\"ph1\">`COleIPFrameWnd::LoadFrame`</ph>.)","source":"(Overrides `COleIPFrameWnd::LoadFrame`.)"},{"content":"COleIPFrameWndEx::OnCloseDockingPane","pos":[3285,3321]},{"content":"COleIPFrameWndEx::OnCloseMiniFrame","pos":[3368,3402]},{"content":"COleIPFrameWndEx::OnClosePopupMenu","pos":[3447,3481]},{"content":"Called by the framework when an active pop-up menu processes a WM_DESTROY message.","pos":[3520,3602]},{"content":"COleIPFrameWndEx::OnCmdMsg","pos":[3608,3634]},{"pos":[3665,3699],"content":"(Overrides <ph id=\"ph1\">`CFrameWnd::OnCmdMsg`</ph>.)","source":"(Overrides `CFrameWnd::OnCmdMsg`.)"},{"content":"COleIPFrameWndEx::OnDrawMenuImage","pos":[3705,3738]},{"content":"Called by the framework when the image associated with a menu item is drawn.","pos":[3776,3852]},{"content":"COleIPFrameWndEx::OnDrawMenuLogo","pos":[3858,3890]},{"pos":[3927,4053],"content":"Called by the framework when a <bpt id=\"p1\">[</bpt>CMFCPopupMenu<ept id=\"p1\">](../../mfc/reference/cmfcpopupmenu-class.md)</ept>object processes a WM_PAINT message.","source":"Called by the framework when a [CMFCPopupMenu](../../mfc/reference/cmfcpopupmenu-class.md)object processes a WM_PAINT message."},{"content":"COleIPFrameWndEx::OnMenuButtonToolHitTest","pos":[4059,4100]},{"pos":[4146,4282],"content":"Called by the framework when a <bpt id=\"p1\">[</bpt>CMFCToolBarButton<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept>object processes WM_NCHITTEST message.","source":"Called by the framework when a [CMFCToolBarButton](../../mfc/reference/cmfctoolbarbutton-class.md)object processes WM_NCHITTEST message."},{"content":"COleIPFrameWndEx::OnMoveMiniFrame","pos":[4288,4321]},{"content":"COleIPFrameWndEx::OnSetPreviewMode","pos":[4365,4399]},{"content":"Call this member function to set the application's main frame window into and out of print-preview mode.","pos":[4438,4542]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CFrameWnd::OnSetPreviewMode<ept id=\"p1\">](../../mfc/reference/cframewnd-class.md#cframewnd__onsetpreviewmode)</ept>.)","pos":[4543,4653],"source":" (Overrides [CFrameWnd::OnSetPreviewMode](../../mfc/reference/cframewnd-class.md#cframewnd__onsetpreviewmode).)"},{"content":"COleIPFrameWndEx::OnShowCustomizePane","pos":[4659,4696]},{"content":"COleIPFrameWndEx::OnShowPanes","pos":[4744,4773]},{"content":"COleIPFrameWndEx::OnShowPopupMenu","pos":[4813,4846]},{"content":"Called by the framework when a pop-up menu is activated.","pos":[4884,4940]},{"content":"COleIPFrameWndEx::OnTearOffMenu","pos":[4946,4977]},{"content":"Called by the framework when a menu that has a tear-off bar is activated.","pos":[5013,5086]},{"content":"COleIPFrameWndEx::PaneFromPoint","pos":[5092,5123]},{"content":"COleIPFrameWndEx::PreTranslateMessage","pos":[5165,5202]},{"pos":[5244,5294],"content":"(Overrides <ph id=\"ph1\">`COleIPFrameWnd::PreTranslateMessage`</ph>.)","source":"(Overrides `COleIPFrameWnd::PreTranslateMessage`.)"},{"content":"COleIPFrameWndEx::RecalcLayout","pos":[5300,5330]},{"pos":[5365,5408],"content":"(Overrides <ph id=\"ph1\">`COleIPFrameWnd::RecalcLayout`</ph>.)","source":"(Overrides `COleIPFrameWnd::RecalcLayout`.)"},{"content":"COleIPFrameWndEx::RemovePaneFromDockManager","pos":[5414,5457]},{"content":"COleIPFrameWndEx::SetDockState","pos":[5511,5541]},{"content":"Applies the specified docking state to the panes that belong to the frame window.","pos":[5576,5657]},{"content":"COleIPFrameWndEx::SetupToolbarMenu","pos":[5663,5697]},{"content":"Modifies a toolbar object by searching for dummy items and replacing them with the specified user-defined items.","pos":[5736,5848]},{"content":"COleIPFrameWndEx::ShowPane","pos":[5854,5880]},{"content":"COleIPFrameWndEx::WinHelpA","pos":[5917,5943]},{"content":"Called by the framework to initiate the WinHelp application or context help.","pos":[5974,6050]},{"content":"Protected Methods","pos":[6061,6078]},{"content":"Name","pos":[6085,6089]},{"content":"Description","pos":[6090,6101]},{"content":"COleIPFrameWndEx::InitUserToobars","pos":[6140,6173]},{"content":"Tells the framework to initialize a range of control IDs that are assigned to user-defined toolbars.","pos":[6211,6311]},{"content":"Example","pos":[6321,6328]},{"content":"The following example demonstrates how to subclass an instance of the <ph id=\"ph1\">`COleIPFrameWndEx`</ph> class and over ride its methods.","pos":[6332,6453],"source":"The following example demonstrates how to subclass an instance of the `COleIPFrameWndEx` class and over ride its methods."},{"content":"The example shows how to over ride the <ph id=\"ph1\">`OnDestory`</ph> method, the <ph id=\"ph2\">`RepositionFrame`</ph> method, the <ph id=\"ph3\">`RecalcLayout`</ph> method, and the <ph id=\"ph4\">`CalcWindowRect`</ph> method.","pos":[6454,6602],"source":" The example shows how to over ride the `OnDestory` method, the `RepositionFrame` method, the `RecalcLayout` method, and the `CalcWindowRect` method."},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>Word Pad sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[6603,6683],"source":" This code snippet is part of the [Word Pad sample](../../visual-cpp-samples.md)."},{"pos":[6701,6718],"content":"NVC_MFC_WordPad#1"},{"content":"Inheritance Hierarchy","pos":[6795,6816]},{"content":"CObject","pos":[6821,6828]},{"content":"CCmdTarget","pos":[6875,6885]},{"content":"CWnd","pos":[6935,6939]},{"content":"CFrameWnd","pos":[6983,6992]},{"content":"COleIPFrameWnd","pos":[7041,7055]},{"content":"COleIPFrameWndEx","pos":[7109,7125]},{"content":"Requirements","pos":[7182,7194]},{"pos":[7198,7230],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxoleipframewndex.h","source":"**Header:** afxoleipframewndex.h"},{"pos":[7286,7315],"content":"COleIPFrameWndEx::AddDockSite"},{"content":"Remarks","pos":[7463,7470]},{"pos":[7522,7547],"content":"COleIPFrameWndEx::AddPane"},{"content":"Parameters","pos":[7743,7753]},{"content":"[in]","pos":[7757,7761]},{"content":"[in]","pos":[7779,7783]},{"content":"Return Value","pos":[7801,7813]},{"content":"Remarks","pos":[7823,7830]},{"pos":[7894,7931],"content":"COleIPFrameWndEx::AdjustDockingLayout"},{"content":"Parameters","pos":[8111,8121]},{"pos":[8125,8129],"content":"[in]"},{"content":"Remarks","pos":[8146,8153]},{"pos":[8206,8232],"content":"COleIPFrameWndEx::DockPane"},{"content":"Parameters","pos":[8453,8463]},{"content":"[in]","pos":[8467,8471]},{"content":"[in]","pos":[8482,8486]},{"content":"[in]","pos":[8503,8507]},{"content":"Remarks","pos":[8526,8533]},{"pos":[8592,8624],"content":"COleIPFrameWndEx::DockPaneLeftOf"},{"content":"Docks one pane to the left of another pane.","pos":[8628,8671]},{"content":"Parameters","pos":[8757,8767]},{"content":"[in]","pos":[8771,8775]},{"content":"A pointer to the pane to dock.","pos":[8786,8816]},{"content":"[in]","pos":[8823,8827]},{"content":"A pointer to the pane that serves as origin.","pos":[8841,8885]},{"content":"Return Value","pos":[8895,8907]},{"content":"Returns <ph id=\"ph1\">`TRUE`</ph> if the operation is successful.","pos":[8911,8957],"source":"Returns `TRUE` if the operation is successful."},{"content":"Otherwise returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[8958,8984],"source":" Otherwise returns `FALSE`."},{"content":"Remarks","pos":[8994,9001]},{"content":"Call this method to dock several pane objects in a predefined order.","pos":[9005,9073]},{"content":"This method docks the pane specified by <ph id=\"ph1\">`pBar`</ph> to the left of the pane specified by <ph id=\"ph2\">`pLeftOf`</ph>.","pos":[9074,9168],"source":" This method docks the pane specified by `pBar` to the left of the pane specified by `pLeftOf`."},{"pos":[9232,9269],"content":"COleIPFrameWndEx::EnableAutoHidePanes"},{"content":"Parameters","pos":[9442,9452]},{"pos":[9456,9460],"content":"[in]"},{"content":"Return Value","pos":[9484,9496]},{"content":"Remarks","pos":[9506,9513]},{"pos":[9571,9602],"content":"COleIPFrameWndEx::EnableDocking"},{"content":"Parameters","pos":[9769,9779]},{"pos":[9783,9787],"content":"[in]"},{"content":"Return Value","pos":[9811,9823]},{"content":"Remarks","pos":[9833,9840]},{"pos":[9899,9931],"content":"COleIPFrameWndEx::EnablePaneMenu"},{"content":"Parameters","pos":[10301,10311]},{"content":"[in]","pos":[10315,10319]},{"content":"[in]","pos":[10333,10337]},{"content":"[in]","pos":[10358,10362]},{"content":"[in]","pos":[10386,10390]},{"content":"[in]","pos":[10422,10426]},{"content":"[in]","pos":[10462,10466]},{"content":"Remarks","pos":[10505,10512]},{"pos":[10571,10603],"content":"COleIPFrameWndEx::GetActivePopup"},{"content":"Returns a pointer to the currently displayed pop-up menu.","pos":[10607,10664]},{"content":"Return Value","pos":[10731,10743]},{"pos":[10747,10801],"content":"A pointer to the active pop-up menu; otherwise <ph id=\"ph1\">`NULL`</ph>.","source":"A pointer to the active pop-up menu; otherwise `NULL`."},{"content":"Remarks","pos":[10811,10818]},{"pos":[10822,10966],"content":"Use this method to obtain a pointer to the <bpt id=\"p1\">[</bpt>CMFCPopupMenu Class<ept id=\"p1\">](../../mfc/reference/cmfcpopupmenu-class.md)</ept> object that is currently displayed.","source":"Use this method to obtain a pointer to the [CMFCPopupMenu Class](../../mfc/reference/cmfcpopupmenu-class.md) object that is currently displayed."},{"pos":[11034,11075],"content":"COleIPFrameWndEx::GetContainerFrameWindow"},{"content":"Return Value","pos":[11250,11262]},{"content":"Remarks","pos":[11272,11279]},{"pos":[11339,11372],"content":"COleIPFrameWndEx::GetDefaultResId"},{"content":"Returns the menu resource ID that was specified when the frame window loaded the menu.","pos":[11376,11462]},{"content":"Return Value","pos":[11520,11532]},{"content":"Returns the resource ID of the menu, or 0 if the frame window has no menu bar.","pos":[11536,11614]},{"content":"Remarks","pos":[11624,11631]},{"pos":[11635,11789],"content":"Call this function to retrieve the resource ID that was specified when the frame window loaded the menu resource by calling <ph id=\"ph1\">`COleIPFrameWndEx::LoadFrame`</ph>.","source":"Call this function to retrieve the resource ID that was specified when the frame window loaded the menu resource by calling `COleIPFrameWndEx::LoadFrame`."},{"pos":[11846,11876],"content":"COleIPFrameWndEx::GetDockFrame"},{"content":"Return Value","pos":[12031,12043]},{"content":"Remarks","pos":[12053,12060]},{"pos":[12122,12157],"content":"COleIPFrameWndEx::GetDockingManager"},{"content":"Return Value","pos":[12323,12335]},{"content":"Remarks","pos":[12345,12352]},{"pos":[12409,12439],"content":"COleIPFrameWndEx::GetMainFrame"},{"content":"Return Value","pos":[12594,12606]},{"content":"Remarks","pos":[12616,12623]},{"pos":[12678,12706],"content":"COleIPFrameWndEx::GetMenuBar"},{"content":"Returns a pointer to the menu bar object attached to the frame window.","pos":[12710,12780]},{"content":"Return Value","pos":[12847,12859]},{"content":"A pointer to the menu bar object.","pos":[12863,12896]},{"content":"Remarks","pos":[12906,12913]},{"pos":[12917,13026],"content":"Use this function to retrieve a pointer to the menu bar object that belongs to the <ph id=\"ph1\">`COleIPFrameWndEx`</ph> object.","source":"Use this function to retrieve a pointer to the menu bar object that belongs to the `COleIPFrameWndEx` object."},{"pos":[13078,13103],"content":"COleIPFrameWndEx::GetPane"},{"content":"Parameters","pos":[13261,13271]},{"pos":[13275,13279],"content":"[in]"},{"content":"Return Value","pos":[13295,13307]},{"content":"Remarks","pos":[13317,13324]},{"pos":[13383,13415],"content":"COleIPFrameWndEx::GetTearOffBars"},{"content":"Returns a list of pane objects that are in a tear-off state.","pos":[13419,13479]},{"content":"Return Value","pos":[13546,13558]},{"pos":[13562,13716],"content":"A reference to a <ph id=\"ph1\">`CObList`</ph> object that contains a collection of pointers to the <bpt id=\"p1\">[</bpt>CBasePane Class<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md)</ept>-derived objects.","source":"A reference to a `CObList` object that contains a collection of pointers to the [CBasePane Class](../../mfc/reference/cbasepane-class.md)-derived objects."},{"content":"Remarks","pos":[13726,13733]},{"content":"The <ph id=\"ph1\">`COleIPFrameWndEx`</ph> object maintains the collection of tear-off menus as a list of <bpt id=\"p1\">[</bpt>CBasePane Class<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md)</ept>-derived objects.","pos":[13737,13897],"source":"The `COleIPFrameWndEx` object maintains the collection of tear-off menus as a list of [CBasePane Class](../../mfc/reference/cbasepane-class.md)-derived objects."},{"content":"Use this method to retrieve a reference to this list.","pos":[13898,13951]},{"pos":[14023,14068],"content":"COleIPFrameWndEx::GetToolbarButtonToolTipText"},{"content":"Called by the framework before the tooltip for a button is displayed.","pos":[14072,14141]},{"content":"Parameters","pos":[14267,14277]},{"content":"[in]","pos":[14281,14285]},{"content":"Pointer to the button.","pos":[14299,14321]},{"content":"[in]","pos":[14328,14332]},{"content":"Pointer to the tooltip text.","pos":[14348,14376]},{"content":"Return Value","pos":[14386,14398]},{"content":"The default implementation returns 0.","pos":[14402,14439]},{"content":"Remarks","pos":[14449,14456]},{"content":"Override this function to customize the display of tooltips on toolbar buttons.","pos":[14460,14539]},{"pos":[14599,14632],"content":"COleIPFrameWndEx::InitUserToobars"},{"content":"Specifies a range of control IDs that the framework assigns to the user-defined toolbars.","pos":[14636,14725]},{"content":"Parameters","pos":[14864,14874]},{"content":"[in]","pos":[14878,14882]},{"content":"The registry entry where the library stores user toolbar settings.","pos":[14901,14967]},{"content":"[in]","pos":[14974,14978]},{"content":"Control ID assigned to the first user-defined toolbar.","pos":[15003,15057]},{"content":"[in]","pos":[15064,15068]},{"content":"Control ID assigned to the last user-defined toolbar.","pos":[15092,15145]},{"content":"Remarks","pos":[15155,15162]},{"content":"Use this function to initialize a range of control IDs for assignment to toolbars that users define dynamically.","pos":[15166,15278]},{"content":"The parameters <ph id=\"ph1\">`uiUserToolbarFirst`</ph> and <ph id=\"ph2\">`uiUserToolbarLast`</ph> define a range of allowed toolbar control IDs.","pos":[15279,15385],"source":" The parameters `uiUserToolbarFirst` and `uiUserToolbarLast` define a range of allowed toolbar control IDs."},{"content":"To disable the creation of user-defined toolbars, set <ph id=\"ph1\">`uiUserToolbarFirst`</ph> or <ph id=\"ph2\">`uiUserToolbarLast`</ph> to -1.","pos":[15386,15490],"source":" To disable the creation of user-defined toolbars, set `uiUserToolbarFirst` or `uiUserToolbarLast` to -1."},{"pos":[15545,15573],"content":"COleIPFrameWndEx::InsertPane"},{"content":"Parameters","pos":[15799,15809]},{"content":"[in]","pos":[15813,15817]},{"content":"[in]","pos":[15835,15839]},{"content":"[in]","pos":[15853,15857]},{"content":"Return Value","pos":[15876,15888]},{"content":"Remarks","pos":[15898,15905]},{"pos":[15968,16004],"content":"COleIPFrameWndEx::IsMenuBarAvailable"},{"pos":[16008,16068],"content":"Determines whether the pointer to the menu bar object is not"},{"content":"Return Value","pos":[16136,16148]},{"content":"Returns a non-zero value if the frame window has a menu bar; otherwise returns 0.","pos":[16152,16233]},{"content":"Remarks","pos":[16243,16250]},{"pos":[16254,16364],"content":"Call this method to determine whether the frame window maintains a non- <ph id=\"ph1\">`NULL`</ph> pointer to its menu bar object.","source":"Call this method to determine whether the frame window maintains a non- `NULL` pointer to its menu bar object."},{"pos":[16428,16465],"content":"COleIPFrameWndEx::IsPointNearDockSite"},{"content":"Parameters","pos":[16700,16710]},{"content":"[in]","pos":[16714,16718]},{"content":"[in]","pos":[16730,16734]},{"content":"[in]","pos":[16755,16759]},{"content":"Return Value","pos":[16782,16794]},{"content":"Remarks","pos":[16804,16811]},{"pos":[16865,16892],"content":"COleIPFrameWndEx::LoadFrame"},{"content":"Parameters","pos":[17204,17214]},{"content":"[in]","pos":[17218,17222]},{"content":"[in]","pos":[17240,17244]},{"content":"[in]","pos":[17265,17269]},{"content":"[in]","pos":[17286,17290]},{"content":"Return Value","pos":[17311,17323]},{"content":"Remarks","pos":[17333,17340]},{"pos":[17403,17439],"content":"COleIPFrameWndEx::OnCloseDockingPane"},{"content":"Parameters","pos":[17616,17626]},{"pos":[17630,17634],"content":"[in]"},{"content":"Return Value","pos":[17661,17673]},{"content":"Remarks","pos":[17683,17690]},{"pos":[17751,17785],"content":"COleIPFrameWndEx::OnCloseMiniFrame"},{"content":"Parameters","pos":[17960,17970]},{"pos":[17974,17978],"content":"[in]"},{"content":"Return Value","pos":[18005,18017]},{"content":"Remarks","pos":[18027,18034]},{"pos":[18095,18129],"content":"COleIPFrameWndEx::OnClosePopupMenu"},{"pos":[18133,18217],"content":"Called by the framework when an active pop-up menu processes a <ph id=\"ph1\">`WM_DESTROY`</ph> message.","source":"Called by the framework when an active pop-up menu processes a `WM_DESTROY` message."},{"content":"Parameters","pos":[18300,18310]},{"content":"[in]","pos":[18314,18318]},{"content":"A pointer to the pop-up menu object.","pos":[18335,18371]},{"content":"Remarks","pos":[18381,18388]},{"pos":[18392,18507],"content":"Override this method to receive notifications from <ph id=\"ph1\">`CMFCPopupMenu`</ph> objects when they process <ph id=\"ph2\">`WM_DESTROY`</ph> messages.","source":"Override this method to receive notifications from `CMFCPopupMenu` objects when they process `WM_DESTROY` messages."},{"pos":[18560,18586],"content":"COleIPFrameWndEx::OnCmdMsg"},{"content":"Parameters","pos":[18829,18839]},{"content":"[in]","pos":[18843,18847]},{"content":"[in]","pos":[18857,18861]},{"content":"[in]","pos":[18873,18877]},{"content":"[in]","pos":[18890,18894]},{"content":"Return Value","pos":[18919,18931]},{"content":"Remarks","pos":[18941,18948]},{"pos":[19008,19041],"content":"COleIPFrameWndEx::OnDrawMenuImage"},{"content":"Called by the framework when the image that is associated with a menu item is drawn.","pos":[19045,19129]},{"content":"Parameters","pos":[19277,19287]},{"content":"[in]","pos":[19291,19295]},{"content":"Pointer to the device context.","pos":[19305,19335]},{"content":"[in]","pos":[19342,19346]},{"content":"Pointer to the menu button.","pos":[19364,19391]},{"content":"[in]","pos":[19398,19402]},{"content":"The image associated with the menu item.","pos":[19418,19458]},{"content":"Return Value","pos":[19468,19480]},{"content":"The default implementation does nothing and returns 0.","pos":[19484,19538]},{"content":"Remarks","pos":[19548,19555]},{"pos":[19559,19713],"content":"Override this method if you want to customize image drawing for the menu items that belong to the menu bar owned by the <ph id=\"ph1\">`COleIPFrameWndEx`</ph>-derived object.","source":"Override this method if you want to customize image drawing for the menu items that belong to the menu bar owned by the `COleIPFrameWndEx`-derived object."},{"pos":[19772,19804],"content":"COleIPFrameWndEx::OnDrawMenuLogo"},{"pos":[19808,19936],"content":"Called by the framework when a <bpt id=\"p1\">[</bpt>CMFCPopupMenu<ept id=\"p1\">](../../mfc/reference/cmfcpopupmenu-class.md)</ept>object processes a <ph id=\"ph1\">`WM_PAINT`</ph> message.","source":"Called by the framework when a [CMFCPopupMenu](../../mfc/reference/cmfcpopupmenu-class.md)object processes a `WM_PAINT` message."},{"content":"Parameters","pos":[20062,20072]},{"content":"[in]","pos":[20076,20080]},{"content":"Pointer to the device context.","pos":[20090,20120]},{"content":"[in]","pos":[20127,20131]},{"content":"Pointer to the pop-up menu object.","pos":[20143,20177]},{"content":"[in]","pos":[20184,20188]},{"content":"Pointer to the logo to display.","pos":[20203,20234]},{"content":"Remarks","pos":[20244,20251]},{"content":"Override this method to display a logo on the pop-up menu associated with the menu bar owned by the <ph id=\"ph1\">`COleIPFrameWndEx`</ph>-derived object.","pos":[20255,20389],"source":"Override this method to display a logo on the pop-up menu associated with the menu bar owned by the `COleIPFrameWndEx`-derived object."},{"content":"The default implementation does nothing.","pos":[20390,20430]},{"pos":[20498,20539],"content":"COleIPFrameWndEx::OnMenuButtonToolHitTest"},{"pos":[20543,20683],"content":"Called by the framework when a <bpt id=\"p1\">[</bpt>CMFCToolBarButton<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept>object processes a <ph id=\"ph1\">`WM_NCHITTEST`</ph> message.","source":"Called by the framework when a [CMFCToolBarButton](../../mfc/reference/cmfctoolbarbutton-class.md)object processes a `WM_NCHITTEST` message."},{"content":"Parameters","pos":[20800,20810]},{"content":"[in] pButton","pos":[20814,20826]},{"content":"Pointer to a menu button.","pos":[20830,20855]},{"content":"[out] pTI","pos":[20862,20871]},{"content":"Pointer to a <ph id=\"ph1\">`TOOLINFO`</ph> structure.","pos":[20875,20909],"source":" Pointer to a `TOOLINFO` structure."},{"content":"Return Value","pos":[20919,20931]},{"content":"The default implementation does nothing and returns 0.","pos":[20935,20989]},{"content":"Your implementation should return a non-zero value if it fills the <ph id=\"ph1\">`pTI`</ph> parameter.","pos":[20990,21073],"source":" Your implementation should return a non-zero value if it fills the `pTI` parameter."},{"content":"Remarks","pos":[21083,21090]},{"content":"Override this method to provide ToolTip information about a specific menu item.","pos":[21094,21173]},{"pos":[21233,21266],"content":"COleIPFrameWndEx::OnMoveMiniFrame"},{"content":"Parameters","pos":[21438,21448]},{"pos":[21452,21456],"content":"[in]"},{"content":"Return Value","pos":[21475,21487]},{"content":"Remarks","pos":[21497,21504]},{"pos":[21565,21599],"content":"COleIPFrameWndEx::OnSetPreviewMode"},{"content":"Parameters","pos":[21812,21822]},{"content":"[in]","pos":[21826,21830]},{"content":"[in]","pos":[21845,21849]},{"content":"Remarks","pos":[21868,21875]},{"pos":[21939,21976],"content":"COleIPFrameWndEx::OnShowCustomizePane"},{"content":"Parameters","pos":[22193,22203]},{"content":"[in]","pos":[22207,22211]},{"content":"[in]","pos":[22227,22231]},{"content":"Return Value","pos":[22255,22267]},{"content":"Remarks","pos":[22277,22284]},{"pos":[22340,22369],"content":"COleIPFrameWndEx::OnShowPanes"},{"content":"Parameters","pos":[22535,22545]},{"pos":[22549,22553],"content":"[in]"},{"content":"Return Value","pos":[22571,22583]},{"content":"Remarks","pos":[22593,22600]},{"pos":[22660,22693],"content":"COleIPFrameWndEx::OnShowPopupMenu"},{"content":"Called by the framework when a pop-up menu is displayed.","pos":[22697,22753]},{"content":"Parameters","pos":[22835,22845]},{"content":"Pointer to the pop-up menu to be displayed.","pos":[22870,22913]},{"content":"Return Value","pos":[22923,22935]},{"content":"The default implementation does nothing and returns a non-zero value.","pos":[22939,23008]},{"content":"Your implementation should return <ph id=\"ph1\">`FALSE`</ph> if the pop-up menu cannot be displayed.","pos":[23009,23090],"source":" Your implementation should return `FALSE` if the pop-up menu cannot be displayed."},{"content":"Remarks","pos":[23100,23107]},{"content":"Override this method to customize the display of a pop-up menu.","pos":[23111,23174]},{"content":"For example, you could change the menu buttons to color menu buttons or initialize tear-off bars.","pos":[23175,23272]},{"pos":[23330,23361],"content":"COleIPFrameWndEx::OnTearOffMenu"},{"content":"Called by the framework when the user selects a menu that has a tear-off bar.","pos":[23365,23442]},{"content":"Parameters","pos":[23546,23556]},{"content":"[in]","pos":[23560,23564]},{"content":"A pointer to the pop-up menu that the user selected.","pos":[23581,23633]},{"content":"[in]","pos":[23640,23644]},{"content":"A pointer to the pane that hosts the menu.","pos":[23655,23697]},{"content":"Return Value","pos":[23707,23719]},{"content":"if you want the framework to activate the pop-up menu; otherwise <ph id=\"ph1\">`FALSE`</ph>.","pos":[23730,23803],"source":" if you want the framework to activate the pop-up menu; otherwise `FALSE`."},{"content":"The default value is <ph id=\"ph1\">`TRUE`</ph>.","pos":[23804,23832],"source":" The default value is `TRUE`."},{"content":"Remarks","pos":[23842,23849]},{"content":"Override this function if you want to customize the setup of the tear-off bar.","pos":[23853,23931]},{"pos":[23989,24020],"content":"COleIPFrameWndEx::PaneFromPoint"},{"content":"Parameters","pos":[24420,24430]},{"content":"[in]","pos":[24434,24438]},{"content":"[in]","pos":[24450,24454]},{"content":"[in]","pos":[24473,24477]},{"content":"[in]","pos":[24493,24497]},{"content":"[in]","pos":[24515,24519]},{"content":"Return Value","pos":[24543,24555]},{"content":"Remarks","pos":[24565,24572]},{"pos":[24636,24673],"content":"COleIPFrameWndEx::PreTranslateMessage"},{"content":"Parameters","pos":[24846,24856]},{"pos":[24860,24864],"content":"[in]"},{"content":"Return Value","pos":[24881,24893]},{"content":"Remarks","pos":[24903,24910]},{"pos":[24967,24997],"content":"COleIPFrameWndEx::RecalcLayout"},{"content":"Parameters","pos":[25173,25183]},{"pos":[25187,25191],"content":"[in]"},{"content":"Remarks","pos":[25211,25218]},{"pos":[25288,25331],"content":"COleIPFrameWndEx::RemovePaneFromDockManager"},{"content":"Parameters","pos":[25623,25633]},{"content":"[in]","pos":[25637,25641]},{"content":"[in]","pos":[25659,25663]},{"content":"[in]","pos":[25678,25682]},{"content":"[in]","pos":[25702,25706]},{"content":"[in]","pos":[25722,25726]},{"content":"Remarks","pos":[25754,25761]},{"pos":[25818,25848],"content":"COleIPFrameWndEx::SetDockState"},{"content":"Applies the specified docking state to panes that belong to the frame window.","pos":[25852,25929]},{"content":"Parameters","pos":[25998,26008]},{"content":"[in]","pos":[26012,26016]},{"content":"Specifies the docking state.","pos":[26028,26056]},{"content":"Remarks","pos":[26066,26073]},{"pos":[26077,26181],"content":"Use this function to specify a new docking state for panes that belong to the <ph id=\"ph1\">`COleIPFrameWndEx`</ph> object.","source":"Use this function to specify a new docking state for panes that belong to the `COleIPFrameWndEx` object."},{"pos":[26242,26276],"content":"COleIPFrameWndEx::SetupToolbarMenu"},{"content":"Modifies a toolbar object by searching for dummy items and replacing them with the specified user-defined items.","pos":[26280,26392]},{"content":"Parameters","pos":[26545,26555]},{"content":"[in]","pos":[26559,26563]},{"content":"A reference to a <bpt id=\"p1\">[</bpt>CMenu<ept id=\"p1\">](../../mfc/reference/cmenu-class.md)</ept> object to be modified.","pos":[26574,26657],"source":" A reference to a [CMenu](../../mfc/reference/cmenu-class.md) object to be modified."},{"content":"[in]","pos":[26664,26668]},{"content":"Specifies the first user-defined command.","pos":[26700,26741]},{"content":"[in]","pos":[26748,26752]},{"content":"Specifies the last user-defined command.","pos":[26783,26823]},{"content":"Remarks","pos":[26833,26840]},{"pos":[26893,26919],"content":"COleIPFrameWndEx::ShowPane"},{"content":"Parameters","pos":[27143,27153]},{"content":"[in]","pos":[27157,27161]},{"content":"[in]","pos":[27172,27176]},{"content":"[in]","pos":[27188,27192]},{"content":"[in]","pos":[27205,27209]},{"content":"Remarks","pos":[27231,27238]},{"pos":[27291,27317],"content":"COleIPFrameWndEx::WinHelpA"},{"content":"Called by the framework to initiate the WinHelp application or context help.","pos":[27321,27397]},{"content":"Parameters","pos":[27495,27505]},{"content":"[in] dwData","pos":[27509,27520]},{"content":"Specifies data as required for the type of help specified by <ph id=\"ph1\">`nCmd`</ph>.","pos":[27524,27592],"source":" Specifies data as required for the type of help specified by `nCmd`."},{"content":"[in]","pos":[27599,27603]},{"content":"Specifies the type of help requested.","pos":[27614,27651]},{"content":"For a list of possible values and how they affect the <ph id=\"ph1\">`dwData`</ph> parameter, see the <bpt id=\"p1\">[</bpt>WinHelp Function<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb762267)</ept> in the Windows SDK.","pos":[27652,27832],"source":" For a list of possible values and how they affect the `dwData` parameter, see the [WinHelp Function](http://msdn.microsoft.com/library/windows/desktop/bb762267) in the Windows SDK."},{"content":"Remarks","pos":[27842,27849]},{"content":"See Also","pos":[27858,27866]},{"content":"Hierarchy Chart","pos":[27871,27886]},{"content":"Classes","pos":[27923,27930]},{"content":"CFrameWndEx Class","pos":[27973,27990]},{"content":"CMDIFrameWndEx Class","pos":[28039,28059]}],"content":"---\ntitle: \"COleIPFrameWndEx Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"COleIPFrameWndEx\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"COleIPFrameWndEx class\"\nms.assetid: ebff1560-a1eb-4854-af00-95d4a192bd55\ncaps.latest.revision: 34\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# COleIPFrameWndEx Class\nThe `COleIPFrameWndEx` class implements an OLE container that supports MFC. You must derive the in-place frame window class for your application from the `COleIPFrameWndEx` class, instead of deriving it from the [COleIPFrameWnd](../../mfc/reference/coleipframewnd-class.md)class.  \n  \n## Syntax  \n  \n```  \nclass COleIPFrameWndEx : public COleIPFrameWnd  \n```  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[COleIPFrameWndEx::AddDockSite](#coleipframewndex__adddocksite)||  \n|[COleIPFrameWndEx::AddPane](#coleipframewndex__addpane)||  \n|[COleIPFrameWndEx::AdjustDockingLayout](#coleipframewndex__adjustdockinglayout)||  \n|[COleIPFrameWndEx::DockPane](#coleipframewndex__dockpane)||  \n|[COleIPFrameWndEx::DockPaneLeftOf](#coleipframewndex__dockpaneleftof)|Docks one pane to the left of another pane.|  \n|[COleIPFrameWndEx::EnableAutoHidePanes](#coleipframewndex__enableautohidepanes)||  \n|[COleIPFrameWndEx::EnableDocking](#coleipframewndex__enabledocking)||  \n|[COleIPFrameWndEx::EnablePaneMenu](#coleipframewndex__enablepanemenu)||  \n|[COleIPFrameWndEx::GetActivePopup](#coleipframewndex__getactivepopup)|Returns a pointer to the currently displayed popup menu.|  \n|[COleIPFrameWndEx::GetContainerFrameWindow](#coleipframewndex__getcontainerframewindow)||  \n|[COleIPFrameWndEx::GetDefaultResId](#coleipframewndex__getdefaultresid)|Returns the resource ID of the frame window that you specified when the window was loaded.|  \n|[COleIPFrameWndEx::GetDockFrame](#coleipframewndex__getdockframe)||  \n|[COleIPFrameWndEx::GetDockingManager](#coleipframewndex__getdockingmanager)||  \n|[COleIPFrameWndEx::GetMainFrame](#coleipframewndex__getmainframe)||  \n|[COleIPFrameWndEx::GetMenuBar](#coleipframewndex__getmenubar)|Returns a pointer to the menu bar object attached to the frame window.|  \n|[COleIPFrameWndEx::GetPane](#coleipframewndex__getpane)||  \n|[COleIPFrameWndEx::GetTearOffBars](#coleipframewndex__gettearoffbars)|Returns a list of pane objects that are in a tear-off state.|  \n|[COleIPFrameWndEx::GetToolbarButtonToolTipText](#coleipframewndex__gettoolbarbuttontooltiptext)|Called by the framework before the tooltip for a button is displayed.|  \n|[COleIPFrameWndEx::InsertPane](#coleipframewndex__insertpane)||  \n|[COleIPFrameWndEx::IsMenuBarAvailable](#coleipframewndex__ismenubaravailable)|Determines whether the pointer to the menu bar object is not `NULL`.|  \n|[COleIPFrameWndEx::IsPointNearDockSite](#coleipframewndex__ispointneardocksite)||  \n|[COleIPFrameWndEx::LoadFrame](#coleipframewndex__loadframe)|(Overrides `COleIPFrameWnd::LoadFrame`.)|  \n|[COleIPFrameWndEx::OnCloseDockingPane](#coleipframewndex__onclosedockingpane)||  \n|[COleIPFrameWndEx::OnCloseMiniFrame](#coleipframewndex__oncloseminiframe)||  \n|[COleIPFrameWndEx::OnClosePopupMenu](#coleipframewndex__onclosepopupmenu)|Called by the framework when an active pop-up menu processes a WM_DESTROY message.|  \n|[COleIPFrameWndEx::OnCmdMsg](#coleipframewndex__oncmdmsg)|(Overrides `CFrameWnd::OnCmdMsg`.)|  \n|[COleIPFrameWndEx::OnDrawMenuImage](#coleipframewndex__ondrawmenuimage)|Called by the framework when the image associated with a menu item is drawn.|  \n|[COleIPFrameWndEx::OnDrawMenuLogo](#coleipframewndex__ondrawmenulogo)|Called by the framework when a [CMFCPopupMenu](../../mfc/reference/cmfcpopupmenu-class.md)object processes a WM_PAINT message.|  \n|[COleIPFrameWndEx::OnMenuButtonToolHitTest](#coleipframewndex__onmenubuttontoolhittest)|Called by the framework when a [CMFCToolBarButton](../../mfc/reference/cmfctoolbarbutton-class.md)object processes WM_NCHITTEST message.|  \n|[COleIPFrameWndEx::OnMoveMiniFrame](#coleipframewndex__onmoveminiframe)||  \n|[COleIPFrameWndEx::OnSetPreviewMode](#coleipframewndex__onsetpreviewmode)|Call this member function to set the application's main frame window into and out of print-preview mode. (Overrides [CFrameWnd::OnSetPreviewMode](../../mfc/reference/cframewnd-class.md#cframewnd__onsetpreviewmode).)|  \n|[COleIPFrameWndEx::OnShowCustomizePane](#coleipframewndex__onshowcustomizepane)||  \n|[COleIPFrameWndEx::OnShowPanes](#coleipframewndex__onshowpanes)||  \n|[COleIPFrameWndEx::OnShowPopupMenu](#coleipframewndex__onshowpopupmenu)|Called by the framework when a pop-up menu is activated.|  \n|[COleIPFrameWndEx::OnTearOffMenu](#coleipframewndex__ontearoffmenu)|Called by the framework when a menu that has a tear-off bar is activated.|  \n|[COleIPFrameWndEx::PaneFromPoint](#coleipframewndex__panefrompoint)||  \n|[COleIPFrameWndEx::PreTranslateMessage](#coleipframewndex__pretranslatemessage)|(Overrides `COleIPFrameWnd::PreTranslateMessage`.)|  \n|[COleIPFrameWndEx::RecalcLayout](#coleipframewndex__recalclayout)|(Overrides `COleIPFrameWnd::RecalcLayout`.)|  \n|[COleIPFrameWndEx::RemovePaneFromDockManager](#coleipframewndex__removepanefromdockmanager)||  \n|[COleIPFrameWndEx::SetDockState](#coleipframewndex__setdockstate)|Applies the specified docking state to the panes that belong to the frame window.|  \n|[COleIPFrameWndEx::SetupToolbarMenu](#coleipframewndex__setuptoolbarmenu)|Modifies a toolbar object by searching for dummy items and replacing them with the specified user-defined items.|  \n|[COleIPFrameWndEx::ShowPane](#coleipframewndex__showpane)||  \n|[COleIPFrameWndEx::WinHelpA](#coleipframewndex__winhelpa)|Called by the framework to initiate the WinHelp application or context help.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[COleIPFrameWndEx::InitUserToobars](#coleipframewndex__initusertoobars)|Tells the framework to initialize a range of control IDs that are assigned to user-defined toolbars.|  \n  \n## Example  \n The following example demonstrates how to subclass an instance of the `COleIPFrameWndEx` class and over ride its methods. The example shows how to over ride the `OnDestory` method, the `RepositionFrame` method, the `RecalcLayout` method, and the `CalcWindowRect` method. This code snippet is part of the [Word Pad sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_WordPad#1](../../mfc/reference/codesnippet/cpp/coleipframewndex-class_1.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n [CFrameWnd](../../mfc/reference/cframewnd-class.md)  \n  \n [COleIPFrameWnd](../../mfc/reference/coleipframewnd-class.md)  \n  \n [COleIPFrameWndEx](../../mfc/reference/coleipframewndex-class.md)  \n  \n## Requirements  \n **Header:** afxoleipframewndex.h  \n  \n##  <a name=\"coleipframewndex__adddocksite\"></a>  COleIPFrameWndEx::AddDockSite  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid AddDockSite();\n```  \n  \n### Remarks  \n  \n##  <a name=\"coleipframewndex__addpane\"></a>  COleIPFrameWndEx::AddPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL AddPane(\n    CBasePane* pControlBar,  \n    BOOL bTail = TRUE);\n```  \n  \n### Parameters  \n [in] `pControlBar`  \n [in] `bTail`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"coleipframewndex__adjustdockinglayout\"></a>  COleIPFrameWndEx::AdjustDockingLayout  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void AdjustDockingLayout(HDWP hdwp = NULL);\n```  \n  \n### Parameters  \n [in] `hdwp`  \n  \n### Remarks  \n  \n##  <a name=\"coleipframewndex__dockpane\"></a>  COleIPFrameWndEx::DockPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid DockPane(\n    CBasePane* pBar,  \n    UINT nDockBarID = 0,  \n    LPCRECT lpRect = NULL);\n```  \n  \n### Parameters  \n [in] `pBar`  \n [in] `nDockBarID`  \n [in] `lpRect`  \n  \n### Remarks  \n  \n##  <a name=\"coleipframewndex__dockpaneleftof\"></a>  COleIPFrameWndEx::DockPaneLeftOf  \n Docks one pane to the left of another pane.  \n  \n```  \nBOOL DockPaneLeftOf(\n    CPane* pBar,  \n    CPane* pLeftOf);\n```  \n  \n### Parameters  \n [in] `pBar`  \n A pointer to the pane to dock.  \n  \n [in] `pLeftOf`  \n A pointer to the pane that serves as origin.  \n  \n### Return Value  \n Returns `TRUE` if the operation is successful. Otherwise returns `FALSE`.  \n  \n### Remarks  \n Call this method to dock several pane objects in a predefined order. This method docks the pane specified by `pBar` to the left of the pane specified by `pLeftOf`.  \n  \n##  <a name=\"coleipframewndex__enableautohidepanes\"></a>  COleIPFrameWndEx::EnableAutoHidePanes  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL EnableAutoHidePanes(DWORD dwDockStyle);\n```  \n  \n### Parameters  \n [in] `dwDockStyle`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"coleipframewndex__enabledocking\"></a>  COleIPFrameWndEx::EnableDocking  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL EnableDocking(DWORD dwDockStyle);\n```  \n  \n### Parameters  \n [in] `dwDockStyle`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"coleipframewndex__enablepanemenu\"></a>  COleIPFrameWndEx::EnablePaneMenu  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid EnablePaneMenu(\n    BOOL bEnable,  \n    UINT uiCustomizeCmd,  \n    const CString& strCustomizeLabel,  \n    UINT uiViewToolbarsMenuEntryID,  \n    BOOL bContextMenuShowsToolbarsOnly = FALSE,  \n    BOOL bViewMenuShowsToolbarsOnly = FALSE);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n [in] `uiCustomizeCmd`  \n [in] `strCustomizeLabel`  \n [in] `uiViewToolbarsMenuEntryID`  \n [in] `bContextMenuShowsToolbarsOnly`  \n [in] `bViewMenuShowsToolbarsOnly`  \n  \n### Remarks  \n  \n##  <a name=\"coleipframewndex__getactivepopup\"></a>  COleIPFrameWndEx::GetActivePopup  \n Returns a pointer to the currently displayed pop-up menu.  \n  \n```  \nCMFCPopupMenu* GetActivePopup() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the active pop-up menu; otherwise `NULL`.  \n  \n### Remarks  \n Use this method to obtain a pointer to the [CMFCPopupMenu Class](../../mfc/reference/cmfcpopupmenu-class.md) object that is currently displayed.  \n  \n##  <a name=\"coleipframewndex__getcontainerframewindow\"></a>  COleIPFrameWndEx::GetContainerFrameWindow  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCOleCntrFrameWndEx* GetContainerFrameWindow();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"coleipframewndex__getdefaultresid\"></a>  COleIPFrameWndEx::GetDefaultResId  \n Returns the menu resource ID that was specified when the frame window loaded the menu.  \n  \n```  \nUINT GetDefaultResId() const;\n\n \n```  \n  \n### Return Value  \n Returns the resource ID of the menu, or 0 if the frame window has no menu bar.  \n  \n### Remarks  \n Call this function to retrieve the resource ID that was specified when the frame window loaded the menu resource by calling `COleIPFrameWndEx::LoadFrame`.  \n  \n##  <a name=\"coleipframewndex__getdockframe\"></a>  COleIPFrameWndEx::GetDockFrame  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCFrameWnd* GetDockFrame();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"coleipframewndex__getdockingmanager\"></a>  COleIPFrameWndEx::GetDockingManager  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCDockingManager* GetDockingManager();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"coleipframewndex__getmainframe\"></a>  COleIPFrameWndEx::GetMainFrame  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCFrameWnd* GetMainFrame();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"coleipframewndex__getmenubar\"></a>  COleIPFrameWndEx::GetMenuBar  \n Returns a pointer to the menu bar object attached to the frame window.  \n  \n```  \nconst CMFCMenuBar* GetMenuBar() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the menu bar object.  \n  \n### Remarks  \n Use this function to retrieve a pointer to the menu bar object that belongs to the `COleIPFrameWndEx` object.  \n  \n##  <a name=\"coleipframewndex__getpane\"></a>  COleIPFrameWndEx::GetPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCBasePane* GetPane(UINT nID);\n```  \n  \n### Parameters  \n [in] `nID`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"coleipframewndex__gettearoffbars\"></a>  COleIPFrameWndEx::GetTearOffBars  \n Returns a list of pane objects that are in a tear-off state.  \n  \n```  \nconst CObList& GetTearOffBars() const;\n\n \n```  \n  \n### Return Value  \n A reference to a `CObList` object that contains a collection of pointers to the [CBasePane Class](../../mfc/reference/cbasepane-class.md)-derived objects.  \n  \n### Remarks  \n The `COleIPFrameWndEx` object maintains the collection of tear-off menus as a list of [CBasePane Class](../../mfc/reference/cbasepane-class.md)-derived objects. Use this method to retrieve a reference to this list.  \n  \n##  <a name=\"coleipframewndex__gettoolbarbuttontooltiptext\"></a>  COleIPFrameWndEx::GetToolbarButtonToolTipText  \n Called by the framework before the tooltip for a button is displayed.  \n  \n```  \nvirtual BOOL GetToolbarButtonToolTipText(\n    CMFCToolBarButton* pButton,  \n    CString& strTTText);\n```  \n  \n### Parameters  \n [in] `pButton`  \n Pointer to the button.  \n  \n [in] `strTTText`  \n Pointer to the tooltip text.  \n  \n### Return Value  \n The default implementation returns 0.  \n  \n### Remarks  \n Override this function to customize the display of tooltips on toolbar buttons.  \n  \n##  <a name=\"coleipframewndex__initusertoobars\"></a>  COleIPFrameWndEx::InitUserToobars  \n Specifies a range of control IDs that the framework assigns to the user-defined toolbars.  \n  \n```  \nvoid InitUserToolbars(\n    LPCTSTR lpszRegEntry,   \n    UINT uiUserToolbarFirst,   \n    UINT uiUserToolbarLast)  \n```  \n  \n### Parameters  \n [in] `lpszRegEntry`  \n The registry entry where the library stores user toolbar settings.  \n  \n [in] `uiUserToolbarFirst`  \n Control ID assigned to the first user-defined toolbar.  \n  \n [in] `uiUserToolbarLast`  \n Control ID assigned to the last user-defined toolbar.  \n  \n### Remarks  \n Use this function to initialize a range of control IDs for assignment to toolbars that users define dynamically. The parameters `uiUserToolbarFirst` and `uiUserToolbarLast` define a range of allowed toolbar control IDs. To disable the creation of user-defined toolbars, set `uiUserToolbarFirst` or `uiUserToolbarLast` to -1.  \n  \n##  <a name=\"coleipframewndex__insertpane\"></a>  COleIPFrameWndEx::InsertPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL InsertPane(\n    CBasePane* pControlBar,  \n    CBasePane* pTarget,  \n    BOOL bAfter = TRUE);\n```  \n  \n### Parameters  \n [in] `pControlBar`  \n [in] `pTarget`  \n [in] `bAfter`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"coleipframewndex__ismenubaravailable\"></a>  COleIPFrameWndEx::IsMenuBarAvailable  \n Determines whether the pointer to the menu bar object is not `NULL`  \n  \n```  \nBOOL IsMenuBarAvailable() const;\n\n \n```  \n  \n### Return Value  \n Returns a non-zero value if the frame window has a menu bar; otherwise returns 0.  \n  \n### Remarks  \n Call this method to determine whether the frame window maintains a non- `NULL` pointer to its menu bar object.  \n  \n##  <a name=\"coleipframewndex__ispointneardocksite\"></a>  COleIPFrameWndEx::IsPointNearDockSite  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsPointNearDockSite(\n    CPoint point,  \n    DWORD& dwBarAlignment,  \n    BOOL& bOuterEdge) const;\n\n \n```  \n  \n### Parameters  \n [in] `point`  \n [in] `dwBarAlignment`  \n [in] `bOuterEdge`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"coleipframewndex__loadframe\"></a>  COleIPFrameWndEx::LoadFrame  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL LoadFrame(\n    UINT nIDResource,  \n    DWORD dwDefaultStyle = WS_OVERLAPPEDWINDOW | FWS_ADDTOTITLE,  \n    CWnd* pParentWnd = NULL,  \n    CCreateContext* pContext = NULL);\n```  \n  \n### Parameters  \n [in] `nIDResource`  \n [in] `dwDefaultStyle`  \n [in] `pParentWnd`  \n [in] `pContext`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"coleipframewndex__onclosedockingpane\"></a>  COleIPFrameWndEx::OnCloseDockingPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL OnCloseDockingPane(CDockablePane*);\n```  \n  \n### Parameters  \n [in] `CDockablePane*`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"coleipframewndex__oncloseminiframe\"></a>  COleIPFrameWndEx::OnCloseMiniFrame  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL OnCloseMiniFrame(CPaneFrameWnd*);\n```  \n  \n### Parameters  \n [in] `CPaneFrameWnd*`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"coleipframewndex__onclosepopupmenu\"></a>  COleIPFrameWndEx::OnClosePopupMenu  \n Called by the framework when an active pop-up menu processes a `WM_DESTROY` message.  \n  \n```  \nvirtual void OnClosePopupMenu(CMFCPopupMenu* pMenuPopup);\n```  \n  \n### Parameters  \n [in] `pMenuPopup`  \n A pointer to the pop-up menu object.  \n  \n### Remarks  \n Override this method to receive notifications from `CMFCPopupMenu` objects when they process `WM_DESTROY` messages.  \n  \n##  <a name=\"coleipframewndex__oncmdmsg\"></a>  COleIPFrameWndEx::OnCmdMsg  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL OnCmdMsg(\n    UINT nID,  \n    int nCode,  \n    void* pExtra,  \n    AFX_CMDHANDLERINFO* pHandlerInfo);\n```  \n  \n### Parameters  \n [in] `nID`  \n [in] `nCode`  \n [in] `pExtra`  \n [in] `pHandlerInfo`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"coleipframewndex__ondrawmenuimage\"></a>  COleIPFrameWndEx::OnDrawMenuImage  \n Called by the framework when the image that is associated with a menu item is drawn.  \n  \n```  \nvirtual BOOL OnDrawMenuImage(\n    CDC* pDC,  \n    const CMFCToolBarMenuButton* pMenuButton,  \n    const CRect& rectImage);\n```  \n  \n### Parameters  \n [in] `pDC`  \n Pointer to the device context.  \n  \n [in] `pMenuButton`  \n Pointer to the menu button.  \n  \n [in] `rectImage`  \n The image associated with the menu item.  \n  \n### Return Value  \n The default implementation does nothing and returns 0.  \n  \n### Remarks  \n Override this method if you want to customize image drawing for the menu items that belong to the menu bar owned by the `COleIPFrameWndEx`-derived object.  \n  \n##  <a name=\"coleipframewndex__ondrawmenulogo\"></a>  COleIPFrameWndEx::OnDrawMenuLogo  \n Called by the framework when a [CMFCPopupMenu](../../mfc/reference/cmfcpopupmenu-class.md)object processes a `WM_PAINT` message.  \n  \n```  \nvirtual void OnDrawMenuLogo(\n    CDC* pDC,  \n    CMFCPopupMenu* pMenu,  \n    const CRect& rectLogo);\n```  \n  \n### Parameters  \n [in] `pDC`  \n Pointer to the device context.  \n  \n [in] `pMenu`  \n Pointer to the pop-up menu object.  \n  \n [in] `rectLogo`  \n Pointer to the logo to display.  \n  \n### Remarks  \n Override this method to display a logo on the pop-up menu associated with the menu bar owned by the `COleIPFrameWndEx`-derived object. The default implementation does nothing.  \n  \n##  <a name=\"coleipframewndex__onmenubuttontoolhittest\"></a>  COleIPFrameWndEx::OnMenuButtonToolHitTest  \n Called by the framework when a [CMFCToolBarButton](../../mfc/reference/cmfctoolbarbutton-class.md)object processes a `WM_NCHITTEST` message.  \n  \n```  \nvirtual BOOL OnMenuButtonToolHitTest(\n    CMFCToolBarButton* pButton,  \n    TOOLINFO* pTI);\n```  \n  \n### Parameters  \n [in] pButton  \n Pointer to a menu button.  \n  \n [out] pTI  \n Pointer to a `TOOLINFO` structure.  \n  \n### Return Value  \n The default implementation does nothing and returns 0. Your implementation should return a non-zero value if it fills the `pTI` parameter.  \n  \n### Remarks  \n Override this method to provide ToolTip information about a specific menu item.  \n  \n##  <a name=\"coleipframewndex__onmoveminiframe\"></a>  COleIPFrameWndEx::OnMoveMiniFrame  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL OnMoveMiniFrame(CWnd* pFrame);\n```  \n  \n### Parameters  \n [in] `pFrame`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"coleipframewndex__onsetpreviewmode\"></a>  COleIPFrameWndEx::OnSetPreviewMode  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnSetPreviewMode(\n    BOOL bPreview,  \n    CPrintPreviewState* pState);\n```  \n  \n### Parameters  \n [in] `bPreview`  \n [in] `pState`  \n  \n### Remarks  \n  \n##  <a name=\"coleipframewndex__onshowcustomizepane\"></a>  COleIPFrameWndEx::OnShowCustomizePane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL OnShowCustomizePane(\n    CMFCPopupMenu* pMenuPane,  \n    UINT uiToolbarID);\n```  \n  \n### Parameters  \n [in] `pMenuPane`  \n [in] `uiToolbarID`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"coleipframewndex__onshowpanes\"></a>  COleIPFrameWndEx::OnShowPanes  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL OnShowPanes(BOOL bShow);\n```  \n  \n### Parameters  \n [in] `bShow`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"coleipframewndex__onshowpopupmenu\"></a>  COleIPFrameWndEx::OnShowPopupMenu  \n Called by the framework when a pop-up menu is displayed.  \n  \n```  \nvirtual BOOL OnShowPopupMenu(CMFCPopupMenu* pMenuPopup);\n```  \n  \n### Parameters  \n `[in] pMenuPopup`  \n Pointer to the pop-up menu to be displayed.  \n  \n### Return Value  \n The default implementation does nothing and returns a non-zero value. Your implementation should return `FALSE` if the pop-up menu cannot be displayed.  \n  \n### Remarks  \n Override this method to customize the display of a pop-up menu. For example, you could change the menu buttons to color menu buttons or initialize tear-off bars.  \n  \n##  <a name=\"coleipframewndex__ontearoffmenu\"></a>  COleIPFrameWndEx::OnTearOffMenu  \n Called by the framework when the user selects a menu that has a tear-off bar.  \n  \n```  \nvirtual BOOL OnTearOffMenu(\n    CMFCPopupMenu* pMenuPopup,  \n    CPane* pBar);\n```  \n  \n### Parameters  \n [in] `pMenuPopup`  \n A pointer to the pop-up menu that the user selected.  \n  \n [in] `pBar`  \n A pointer to the pane that hosts the menu.  \n  \n### Return Value  \n `TRUE` if you want the framework to activate the pop-up menu; otherwise `FALSE`. The default value is `TRUE`.  \n  \n### Remarks  \n Override this function if you want to customize the setup of the tear-off bar.  \n  \n##  <a name=\"coleipframewndex__panefrompoint\"></a>  COleIPFrameWndEx::PaneFromPoint  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCBasePane* PaneFromPoint(\n    CPoint point,  \n    int nSensitivity,  \n    bool bExactBar,  \n    CRuntimeClass* pRTCBarType) const;\n\n \nCBasePane* PaneFromPoint(\n    CPoint point,  \n    int nSensitivity,  \n    DWORD& dwAlignment,  \n    CRuntimeClass* pRTCBarType) const;\n\n \n```  \n  \n### Parameters  \n [in] `point`  \n [in] `nSensitivity`  \n [in] `bExactBar`  \n [in] `pRTCBarType`  \n [in] `dwAlignment`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"coleipframewndex__pretranslatemessage\"></a>  COleIPFrameWndEx::PreTranslateMessage  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL PreTranslateMessage(MSG* pMsg);\n```  \n  \n### Parameters  \n [in] `pMsg`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"coleipframewndex__recalclayout\"></a>  COleIPFrameWndEx::RecalcLayout  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void RecalcLayout(BOOL bNotify = TRUE);\n```  \n  \n### Parameters  \n [in] `bNotify`  \n  \n### Remarks  \n  \n##  <a name=\"coleipframewndex__removepanefromdockmanager\"></a>  COleIPFrameWndEx::RemovePaneFromDockManager  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid RemovePaneFromDockManager(\n    CBasePane* pControlBar,  \n    BOOL bDestroy,  \n    BOOL bAdjustLayout,  \n    BOOL bAutoHide,  \n    CBasePane* pBarReplacement);\n```  \n  \n### Parameters  \n [in] `pControlBar`  \n [in] `bDestroy`  \n [in] `bAdjustLayout`  \n [in] `bAutoHide`  \n [in] `pBarReplacement`  \n  \n### Remarks  \n  \n##  <a name=\"coleipframewndex__setdockstate\"></a>  COleIPFrameWndEx::SetDockState  \n Applies the specified docking state to panes that belong to the frame window.  \n  \n```  \nvoid SetDockState(const CDockState& state);\n```  \n  \n### Parameters  \n [in] `state`  \n Specifies the docking state.  \n  \n### Remarks  \n Use this function to specify a new docking state for panes that belong to the `COleIPFrameWndEx` object.  \n  \n##  <a name=\"coleipframewndex__setuptoolbarmenu\"></a>  COleIPFrameWndEx::SetupToolbarMenu  \n Modifies a toolbar object by searching for dummy items and replacing them with the specified user-defined items.  \n  \n```  \nvoid SetupToolbarMenu(\n    CMenu& menu,  \n    const UINT uiViewUserToolbarCmdFirst,  \n    const UINT uiViewUserToolbarCmdLast);\n```  \n  \n### Parameters  \n [in] `menu`  \n A reference to a [CMenu](../../mfc/reference/cmenu-class.md) object to be modified.  \n  \n [in] `uiViewUserToolbarCmdFirst`  \n Specifies the first user-defined command.  \n  \n [in] `uiViewUserToolbarCmdLast`  \n Specifies the last user-defined command.  \n  \n### Remarks  \n  \n##  <a name=\"coleipframewndex__showpane\"></a>  COleIPFrameWndEx::ShowPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid ShowPane(\n    CBasePane* pBar,  \n    BOOL bShow,  \n    BOOL bDelay,  \n    BOOL bActivate);\n```  \n  \n### Parameters  \n [in] `pBar`  \n [in] `bShow`  \n [in] `bDelay`  \n [in] `bActivate`  \n  \n### Remarks  \n  \n##  <a name=\"coleipframewndex__winhelpa\"></a>  COleIPFrameWndEx::WinHelpA  \n Called by the framework to initiate the WinHelp application or context help.  \n  \n```  \nvirtual void WinHelp(\n    DWORD dwData,  \n    UINT nCmd = HELP_CONTEXT);\n```  \n  \n### Parameters  \n [in] dwData  \n Specifies data as required for the type of help specified by `nCmd`.  \n  \n [in] `nCmd`  \n Specifies the type of help requested. For a list of possible values and how they affect the `dwData` parameter, see the [WinHelp Function](http://msdn.microsoft.com/library/windows/desktop/bb762267) in the Windows SDK.  \n  \n### Remarks  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CFrameWndEx Class](../../mfc/reference/cframewndex-class.md)   \n [CMDIFrameWndEx Class](../../mfc/reference/cmdiframewndex-class.md)\n"}