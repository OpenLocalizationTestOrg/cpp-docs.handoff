{"nodes":[{"pos":[12,53],"content":"log, logf, log10, log10f | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"log, logf, log10, log10f | Microsoft Docs","pos":[0,41]}]},{"pos":[1142,1166],"content":"log, logf, log10, log10f","linkify":"log, logf, log10, log10f","nodes":[{"content":"log, logf, log10, log10f","pos":[0,24]}]},{"content":"Calculates logarithms.","pos":[1167,1189]},{"pos":[1198,1204],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1580,1590],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept>","pos":[1594,1597],"source":"*x*"},{"content":"Value whose logarithm is to be found.","pos":[1601,1638]},{"pos":[1647,1659],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The <bpt id=\"p1\">**</bpt>log<ept id=\"p1\">**</ept> functions return the natural logarithm (base e) of <bpt id=\"p2\">*</bpt>x<ept id=\"p2\">*</ept> if successful.","pos":[1663,1744],"source":"The **log** functions return the natural logarithm (base e) of *x* if successful."},{"content":"The log10 functions return the base-10 logarithm.","pos":[1745,1794]},{"content":"If <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> is negative, these functions return an indefinite, by default.","pos":[1795,1864],"source":" If *x* is negative, these functions return an indefinite, by default."},{"content":"If <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> is 0, they return INF (infinite).","pos":[1865,1905],"source":" If *x* is 0, they return INF (infinite)."},{"content":"Input","pos":[1912,1917]},{"content":"SEH Exception","pos":[1918,1931]},{"content":"Matherr Exception","pos":[1932,1949]},{"content":"± QNAN,IND","pos":[2014,2024]},{"content":"none","pos":[2025,2029]},{"content":"_DOMAIN","pos":[2030,2037]},{"content":"± 0","pos":[2042,2045]},{"content":"ZERODIVIDE","pos":[2046,2056]},{"content":"_SING","pos":[2057,2062]},{"content":"x &lt; 0","pos":[2067,2072],"source":"x < 0"},{"content":"INVALID","pos":[2073,2080]},{"content":"_DOMAIN","pos":[2081,2088]},{"content":"<bpt id=\"p1\">**</bpt>log<ept id=\"p1\">**</ept> and <ph id=\"ph1\">`log10`</ph> has an implementation that uses Streaming SIMD Extensions 2 (SSE2).","pos":[2096,2183],"source":"**log** and `log10` has an implementation that uses Streaming SIMD Extensions 2 (SSE2)."},{"content":"See <bpt id=\"p1\">[</bpt>_set_SSE2_enable<ept id=\"p1\">](../../c-runtime-library/reference/set-sse2-enable.md)</ept> for information and restrictions on using the SSE2 implementation.","pos":[2184,2327],"source":" See [_set_SSE2_enable](../../c-runtime-library/reference/set-sse2-enable.md) for information and restrictions on using the SSE2 implementation."},{"pos":[2336,2343],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"C++ allows overloading, so you can call overloads of <bpt id=\"p1\">**</bpt>log<ept id=\"p1\">**</ept> and <ph id=\"ph1\">`log10`</ph>.","pos":[2347,2420],"source":"C++ allows overloading, so you can call overloads of **log** and `log10`."},{"content":"In a C program, <bpt id=\"p1\">**</bpt>log<ept id=\"p1\">**</ept> and <ph id=\"ph1\">`log10`</ph> always take and return a double.","pos":[2421,2489],"source":" In a C program, **log** and `log10` always take and return a double."},{"pos":[2498,2510],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[2517,2524]},{"content":"Required header","pos":[2525,2540]},{"pos":[2585,2619],"content":"<bpt id=\"p1\">**</bpt>log<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`logf`</ph>, <ph id=\"ph2\">`log10`</ph>, <ph id=\"ph3\">`log10f`</ph>","source":"**log**, `logf`, `log10`, `log10f`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>math.h&gt;","pos":[2620,2629],"source":"\\<math.h>"},{"pos":[2637,2761],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[2770,2779],"content":"Libraries","linkify":"Libraries","nodes":[{"content":"Libraries","pos":[0,9]}]},{"pos":[2783,2875],"content":"All versions of the <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept>.","source":"All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md)."},{"pos":[2884,2891],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3298,3304],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"content":"To generate logarithms for other bases, use the mathematical relation: log base b of a == natural log (a) / natural log (b).","pos":[3384,3508]},{"pos":[3826,3832],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[3898,3923],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[3933,4015],"content":"<bpt id=\"p1\">[</bpt>System::Math::Log<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.math.log.aspx)</ept>","source":"[System::Math::Log](https://msdn.microsoft.com/en-us/library/system.math.log.aspx)"},{"pos":[4025,4111],"content":"<bpt id=\"p1\">[</bpt>System::Math::Log10<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.math.log10.aspx)</ept>","source":"[System::Math::Log10](https://msdn.microsoft.com/en-us/library/system.math.log10.aspx)"},{"pos":[4120,4128],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Floating-Point Support<ept id=\"p1\">](../../c-runtime-library/floating-point-support.md)</ept><ph id=\"ph1\"> </ph>","pos":[4132,4208],"source":"[Floating-Point Support](../../c-runtime-library/floating-point-support.md) "},{"content":"<bpt id=\"p1\"> [</bpt>exp, expf<ept id=\"p1\">](../../c-runtime-library/reference/exp-expf.md)</ept><ph id=\"ph1\"> </ph>","pos":[4211,4271],"source":" [exp, expf](../../c-runtime-library/reference/exp-expf.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_matherr<ept id=\"p1\">](../../c-runtime-library/reference/matherr.md)</ept><ph id=\"ph1\"> </ph>","pos":[4274,4332],"source":" [_matherr](../../c-runtime-library/reference/matherr.md) "},{"content":"<bpt id=\"p1\"> [</bpt>pow, powf, powl<ept id=\"p1\">](../../c-runtime-library/reference/pow-powf-powl.md)</ept><ph id=\"ph1\"> </ph>","pos":[4335,4406],"source":" [pow, powf, powl](../../c-runtime-library/reference/pow-powf-powl.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_CIlog<ept id=\"p1\">](../../c-runtime-library/cilog.md)</ept><ph id=\"ph1\"> </ph>","pos":[4409,4453],"source":" [_CIlog](../../c-runtime-library/cilog.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_CIlog10<ept id=\"p1\">](../../c-runtime-library/cilog10.md)</ept>","pos":[4456,4503],"source":" [_CIlog10](../../c-runtime-library/cilog10.md)"}],"content":"---\ntitle: \"log, logf, log10, log10f | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"log10f\"\n  - \"logf\"\n  - \"log10\"\n  - \"log\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-math-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"logf\"\n  - \"_log10l\"\n  - \"log\"\n  - \"_logl\"\n  - \"log10f\"\n  - \"log10\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"calculating logarithms\"\n  - \"log10f function\"\n  - \"log10 function\"\n  - \"log function\"\n  - \"logf function\"\n  - \"logarithms\"\nms.assetid: 7adc77c2-04f7-4245-a980-21215563cfae\ncaps.latest.revision: 10\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# log, logf, log10, log10f\nCalculates logarithms.  \n  \n## Syntax  \n  \n```  \n  \n      double log(  \n   double x   \n);  \nfloat log(  \n   float x  \n);  // C++ only  \nlong double log(  \n   long double x  \n);  // C++ only  \nfloat logf(  \n   float x   \n);  \ndouble log10(  \n   double x  \n);  \nfloat log10(  \n   float x  \n);  // C++ only  \nlong double log10(  \n   long double x  \n);  // C++ only  \nfloat log10f (  \n   float x  \n);  \n```  \n  \n#### Parameters  \n *x*  \n Value whose logarithm is to be found.  \n  \n## Return Value  \n The **log** functions return the natural logarithm (base e) of *x* if successful. The log10 functions return the base-10 logarithm. If *x* is negative, these functions return an indefinite, by default. If *x* is 0, they return INF (infinite).  \n  \n|Input|SEH Exception|Matherr Exception|  \n|-----------|-------------------|-----------------------|  \n|± QNAN,IND|none|_DOMAIN|  \n|± 0|ZERODIVIDE|_SING|  \n|x < 0|INVALID|_DOMAIN|  \n  \n **log** and `log10` has an implementation that uses Streaming SIMD Extensions 2 (SSE2). See [_set_SSE2_enable](../../c-runtime-library/reference/set-sse2-enable.md) for information and restrictions on using the SSE2 implementation.  \n  \n## Remarks  \n C++ allows overloading, so you can call overloads of **log** and `log10`. In a C program, **log** and `log10` always take and return a double.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|**log**, `logf`, `log10`, `log10f`|\\<math.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Libraries  \n All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md).  \n  \n## Example  \n  \n```  \n// crt_log.c  \n/* This program uses log and log10  \n * to calculate the natural logarithm and  \n * the base-10 logarithm of 9,000.  \n */  \n  \n#include <math.h>  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   double x = 9000.0;  \n   double y;  \n  \n   y = log( x );  \n   printf( \"log( %.2f ) = %f\\n\", x, y );  \n   y = log10( x );  \n   printf( \"log10( %.2f ) = %f\\n\", x, y );  \n}  \n```  \n  \n## Output  \n  \n```  \nlog( 9000.00 ) = 9.104980  \nlog10( 9000.00 ) = 3.954243  \n```  \n  \n To generate logarithms for other bases, use the mathematical relation: log base b of a == natural log (a) / natural log (b).  \n  \n```  \n// logbase.cpp  \n#include <math.h>  \n#include <stdio.h>  \n  \ndouble logbase(double a, double base)  \n{  \n   return log(a) / log(base);  \n}  \n  \nint main()  \n{  \n   double x = 65536;  \n   double result;  \n  \n   result = logbase(x, 2);  \n   printf(\"Log base 2 of %lf is %lf\\n\", x, result);  \n}  \n```  \n  \n## Output  \n  \n```  \nLog base 2 of 65536.000000 is 16.000000  \n```  \n  \n## .NET Framework Equivalent  \n  \n-   [System::Math::Log](https://msdn.microsoft.com/en-us/library/system.math.log.aspx)  \n  \n-   [System::Math::Log10](https://msdn.microsoft.com/en-us/library/system.math.log10.aspx)  \n  \n## See Also  \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [exp, expf](../../c-runtime-library/reference/exp-expf.md)   \n [_matherr](../../c-runtime-library/reference/matherr.md)   \n [pow, powf, powl](../../c-runtime-library/reference/pow-powf-powl.md)   \n [_CIlog](../../c-runtime-library/cilog.md)   \n [_CIlog10](../../c-runtime-library/cilog10.md)"}