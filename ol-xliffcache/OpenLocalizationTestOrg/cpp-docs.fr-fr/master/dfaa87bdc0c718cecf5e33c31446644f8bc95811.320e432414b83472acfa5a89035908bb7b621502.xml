{"nodes":[{"pos":[12,39],"content":"CUrl Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CUrl Class | Microsoft Docs","pos":[0,27]}]},{"content":"CUrl Class","pos":[617,627]},{"content":"This class represents a URL.","pos":[628,656]},{"content":"It allows you to manipulate each element of the URL independently of the others whether parsing an existing URL string or building a string from scratch.","pos":[657,810]},{"pos":[818,928],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the Windows Runtime.","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the Windows Runtime.","pos":[14,108]}]},{"content":"Syntax","pos":[937,943]},{"content":"Members","pos":[976,983]},{"content":"Public Constructors","pos":[993,1012]},{"content":"Name","pos":[1019,1023]},{"content":"Description","pos":[1024,1035]},{"content":"CUrl::CUrl","pos":[1074,1084]},{"content":"The constructor.","pos":[1099,1115]},{"content":"CUrl::~CUrl","pos":[1121,1132]},{"content":"The destructor.","pos":[1152,1167]},{"content":"Public Methods","pos":[1178,1192]},{"content":"Name","pos":[1199,1203]},{"content":"Description","pos":[1204,1215]},{"content":"CUrl::Canonicalize","pos":[1254,1272]},{"content":"Call this method to convert the URL string to canonical form.","pos":[1295,1356]},{"content":"CUrl::Clear","pos":[1362,1373]},{"content":"Call this method to clear all of the URL fields.","pos":[1389,1437]},{"content":"CUrl::CrackUrl","pos":[1443,1457]},{"content":"Call this method to decode and parse the URL.","pos":[1476,1521]},{"content":"CUrl::CreateUrl","pos":[1527,1542]},{"content":"Call this method to create the URL.","pos":[1562,1597]},{"content":"CUrl::GetExtraInfo","pos":[1603,1621]},{"pos":[1644,1728],"content":"Call this method to get extra information (such as <bpt id=\"p1\">*</bpt>text<ept id=\"p1\">*</ept> or # <bpt id=\"p2\">*</bpt>text<ept id=\"p2\">*</ept>) from the URL.","source":"Call this method to get extra information (such as *text* or # *text*) from the URL."},{"content":"CUrl::GetExtraInfoLength","pos":[1734,1758]},{"pos":[1787,1901],"content":"Call this method to get the length of the extra information (such as <bpt id=\"p1\">*</bpt>text<ept id=\"p1\">*</ept> or # <bpt id=\"p2\">*</bpt>text<ept id=\"p2\">*</ept>) to retrieve from the URL.","source":"Call this method to get the length of the extra information (such as *text* or # *text*) to retrieve from the URL."},{"content":"CUrl::GetHostName","pos":[1907,1924]},{"content":"Call this method to get the host name from the URL.","pos":[1946,1997]},{"content":"CUrl::GetHostNameLength","pos":[2003,2026]},{"content":"Call this method to get the length of the host name.","pos":[2054,2106]},{"content":"CUrl::GetPassword","pos":[2112,2129]},{"content":"Call this method to get the password from the URL.","pos":[2151,2201]},{"content":"CUrl::GetPasswordLength","pos":[2207,2230]},{"content":"Call this method to get the length of the password.","pos":[2258,2309]},{"content":"CUrl::GetPortNumber","pos":[2315,2334]},{"content":"Call this method to get the port number in terms of ATL_URL_PORT.","pos":[2358,2423]},{"content":"CUrl::GetScheme","pos":[2429,2444]},{"content":"Call this method to get the URL scheme.","pos":[2464,2503]},{"content":"CUrl::GetSchemeName","pos":[2509,2528]},{"content":"Call this method to get the URL scheme name.","pos":[2552,2596]},{"content":"CUrl::GetSchemeNameLength","pos":[2602,2627]},{"content":"Call this method to get the length of the URL scheme name.","pos":[2657,2715]},{"content":"CUrl::GetUrlLength","pos":[2721,2739]},{"content":"Call this method to get the URL length.","pos":[2762,2801]},{"content":"CUrl::GetUrlPath","pos":[2807,2823]},{"content":"Call this method to get the URL path.","pos":[2844,2881]},{"content":"CUrl::GetUrlPathLength","pos":[2887,2909]},{"content":"Call this method to get the URL path length.","pos":[2936,2980]},{"content":"CUrl::GetUserName","pos":[2986,3003]},{"content":"Call this method to get the user name from the URL.","pos":[3025,3076]},{"content":"CUrl::GetUserNameLength","pos":[3082,3105]},{"content":"Call this method to get the length of the user name.","pos":[3133,3185]},{"content":"CUrl::SetExtraInfo","pos":[3191,3209]},{"pos":[3232,3318],"content":"Call this method to set the extra information (such as <bpt id=\"p1\">*</bpt>text<ept id=\"p1\">*</ept> or # <bpt id=\"p2\">*</bpt>text<ept id=\"p2\">*</ept>) of the URL.","source":"Call this method to set the extra information (such as *text* or # *text*) of the URL."},{"content":"CUrl::SetHostName","pos":[3324,3341]},{"content":"Call this method to set the host name.","pos":[3363,3401]},{"content":"CUrl::SetPassword","pos":[3407,3424]},{"content":"Call this method to set the password.","pos":[3446,3483]},{"content":"CUrl::SetPortNumber","pos":[3489,3508]},{"content":"Call this method to set the port number in terms of ATL_URL_PORT.","pos":[3532,3597]},{"content":"CUrl::SetScheme","pos":[3603,3618]},{"content":"Call this method to set the URL scheme.","pos":[3638,3677]},{"content":"CUrl::SetSchemeName","pos":[3683,3702]},{"content":"Call this method to set the URL scheme name.","pos":[3726,3770]},{"content":"CUrl::SetUrlPath","pos":[3776,3792]},{"content":"Call this method to set the URL path.","pos":[3813,3850]},{"content":"CUrl::SetUserName","pos":[3856,3873]},{"content":"Call this method to set the user name.","pos":[3895,3933]},{"content":"Public Operators","pos":[3944,3960]},{"content":"Name","pos":[3967,3971]},{"content":"Description","pos":[3972,3983]},{"content":"CUrl::operator =","pos":[4022,4038]},{"pos":[4060,4125],"content":"Assigns the specified <ph id=\"ph1\">`CUrl`</ph> object to the current <ph id=\"ph2\">`CUrl`</ph> object.","source":"Assigns the specified `CUrl` object to the current `CUrl` object."},{"content":"Remarks","pos":[4135,4142]},{"content":"allows you to manipulate the fields of a URL, such as the path or port number.","pos":[4153,4231]},{"content":"understands URLs of the following form:","pos":[4239,4278]},{"content":"Scheme&gt;://<ph id=\"ph1\">\\&lt;</ph>UserName&gt;:<ph id=\"ph2\">\\&lt;</ph>Password&gt;@<ph id=\"ph3\">\\&lt;</ph>HostName&gt;:<ph id=\"ph4\">\\&lt;</ph>PortNumber&gt;/<ph id=\"ph5\">\\&lt;</ph>UrlPath&gt;<ph id=\"ph6\">\\&lt;</ph>ExtraInfo&gt;","pos":[4287,4369],"source":"Scheme>://\\<UserName>:\\<Password>@\\<HostName>:\\<PortNumber>/\\<UrlPath>\\<ExtraInfo>"},{"content":"(Some fields are optional.) For example, consider this URL:","pos":[4376,4435]},{"content":"http://someone:secret@www.microsoft.com:80/visualc/stuff.htm#contents","pos":[4442,4511]},{"pos":[4518,4573],"content":"<bpt id=\"p1\">[</bpt>CUrl::CrackUrl<ept id=\"p1\">](#curl__crackurl)</ept> parses it as follows:","source":"[CUrl::CrackUrl](#curl__crackurl) parses it as follows:"},{"pos":[4583,4646],"content":"Scheme: \"http\" or <bpt id=\"p1\">[</bpt>ATL_URL_SCHEME_HTTP<ept id=\"p1\">](atl-url-scheme-enum.md)</ept>","source":"Scheme: \"http\" or [ATL_URL_SCHEME_HTTP](atl-url-scheme-enum.md)"},{"content":"UserName: \"someone\"","pos":[4656,4675]},{"content":"Password: \"secret\"","pos":[4685,4703]},{"content":"HostName: \"www.microsoft.com\"","pos":[4713,4742]},{"content":"PortNumber: 80","pos":[4752,4766]},{"content":"UrlPath: \"visualc/stuff.htm\"","pos":[4776,4804]},{"content":"ExtraInfo: \"#contents\"","pos":[4814,4836]},{"content":"To manipulate the UrlPath field (for instance), you would use <bpt id=\"p1\">[</bpt>GetUrlPath<ept id=\"p1\">](#curl__geturlpath)</ept>, <bpt id=\"p2\">[</bpt>GetUrlPathLength<ept id=\"p2\">](#curl__geturlpathlength)</ept>, and <bpt id=\"p3\">[</bpt>SetUrlPath<ept id=\"p3\">](#curl__seturlpath)</ept>.","pos":[4843,5019],"source":"To manipulate the UrlPath field (for instance), you would use [GetUrlPath](#curl__geturlpath), [GetUrlPathLength](#curl__geturlpathlength), and [SetUrlPath](#curl__seturlpath)."},{"content":"You would use <bpt id=\"p1\">[</bpt>CreateUrl<ept id=\"p1\">](#curl__createurl)</ept> to create the complete URL string.","pos":[5020,5098],"source":" You would use [CreateUrl](#curl__createurl) to create the complete URL string."},{"content":"Requirements","pos":[5107,5119]},{"pos":[5123,5144],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlutil.h","source":"**Header:** atlutil.h"},{"pos":[5189,5207],"content":"CUrl::Canonicalize"},{"content":"Call this method to convert the URL string to canonical form.","pos":[5211,5272]},{"content":"Parameters","pos":[5348,5358]},{"content":"The flags that control canonicalization.","pos":[5375,5415]},{"content":"If no flags are specified ( <ph id=\"ph1\">`dwFlags`</ph> = 0), the method converts all unsafe characters and meta sequences (such as <ph id=\"ph2\">\\\\</ph>.,\\ .., and <ph id=\"ph3\">\\\\</ph>...) to escape sequences.","pos":[5416,5571],"source":" If no flags are specified ( `dwFlags` = 0), the method converts all unsafe characters and meta sequences (such as \\\\.,\\ .., and \\\\...) to escape sequences."},{"content":"can be one of the following values:","pos":[5582,5617]},{"content":"ATL_URL_BROWSER_MODE: Does not encode or decode characters after \"#\" or \"\" and does not remove trailing white space after \"\".","pos":[5627,5752]},{"content":"If this value is not specified, the entire URL is encoded and trailing white space is removed.","pos":[5753,5847]},{"content":"ATL_URL _DECODE: Converts all %XX sequences to characters, including escape sequences, before the URL is parsed.","pos":[5857,5969]},{"content":"ATL_URL _ENCODE_PERCENT: Encodes any percent signs encountered.","pos":[5979,6042]},{"content":"By default, percent signs are not encoded.","pos":[6043,6085]},{"content":"ATL_URL _ENCODE_SPACES_ONLY: Encodes spaces only.","pos":[6095,6144]},{"content":"ATL_URL _NO_ENCODE: Does not convert unsafe characters to escape sequences.","pos":[6154,6229]},{"content":"ATL_URL _NO_META: Does not remove meta sequences (such as \".\" and \"..\") from the URL.","pos":[6239,6324]},{"content":"Return Value","pos":[6334,6346]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[6350,6392]},{"content":"Remarks","pos":[6402,6409]},{"content":"Converting to canonical form involves converting unsafe characters and spaces to escape sequences.","pos":[6413,6511]},{"pos":[6549,6560],"content":"CUrl::Clear"},{"content":"Call this method to clear all of the URL fields.","pos":[6564,6612]},{"pos":[6695,6709],"content":"CUrl::CrackUrl"},{"content":"Call this method to decode and parse the URL.","pos":[6713,6758]},{"content":"Parameters","pos":[6841,6851]},{"content":"The URL.","pos":[6868,6876]},{"content":"Specify ATL_URL_DECODE or ATL_URL_ESCAPE to convert all escape characters in <ph id=\"ph1\">`lpszUrl`</ph> to their real values after parsing.","pos":[6896,7018],"source":" Specify ATL_URL_DECODE or ATL_URL_ESCAPE to convert all escape characters in `lpszUrl` to their real values after parsing."},{"content":"(Before Visual C++ 2005, ATL_URL_DECODE converted all escape characters before parsing.)","pos":[7019,7107]},{"content":"Return Value","pos":[7117,7129]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[7133,7175]},{"pos":[7217,7232],"content":"CUrl::CreateUrl"},{"content":"This method constructs a URL string from a CUrl object's component fields.","pos":[7236,7310]},{"content":"Parameters","pos":[7434,7444]},{"content":"lpszUrl","pos":[7449,7456]},{"content":"A string buffer to hold the complete URL string.","pos":[7461,7509]},{"content":"The maximum length of the <bpt id=\"p1\">*</bpt>lpszUrl<ept id=\"p1\">*</ept> string buffer.","pos":[7534,7584],"source":" The maximum length of the *lpszUrl* string buffer."},{"content":"Specify ATL_URL_ESCAPE to convert all escape characters in <bpt id=\"p1\">*</bpt>lpszUrl<ept id=\"p1\">*</ept> to their real values.","pos":[7604,7694],"source":" Specify ATL_URL_ESCAPE to convert all escape characters in *lpszUrl* to their real values."},{"content":"Return Value","pos":[7704,7716]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[7720,7762]},{"content":"Remarks","pos":[7772,7779]},{"content":"This method appends its individual fields in order to construct the complete URL string using the following format:","pos":[7783,7898]},{"content":"scheme&gt;://<ph id=\"ph1\">\\&lt;</ph>user&gt;:<ph id=\"ph2\">\\&lt;</ph>pass&gt;@<ph id=\"ph3\">\\&lt;</ph>domain&gt;:<ph id=\"ph4\">\\&lt;</ph>port&gt;<ph id=\"ph5\">\\&lt;</ph>path&gt;<ph id=\"ph6\">\\&lt;</ph>extra&gt;","pos":[7909,7967],"source":"scheme>://\\<user>:\\<pass>@\\<domain>:\\<port>\\<path>\\<extra>"},{"content":"When calling this method, the <ph id=\"ph1\">`pdwMaxLength`</ph> parameter should initially contain the maximum length of the string buffer referenced by the <bpt id=\"p1\">*</bpt>lpszUrl<ept id=\"p1\">*</ept> parameter.","pos":[7976,8134],"source":"When calling this method, the `pdwMaxLength` parameter should initially contain the maximum length of the string buffer referenced by the *lpszUrl* parameter."},{"content":"The value of the <ph id=\"ph1\">`pdwMaxLength`</ph> parameter will be updated with the actual length of the URL string.","pos":[8135,8234],"source":" The value of the `pdwMaxLength` parameter will be updated with the actual length of the URL string."},{"content":"Example","pos":[8244,8251]},{"content":"This sample demonstrates creation of a CUrl object and retrieving its URL string","pos":[8255,8335]},{"pos":[8353,8374],"content":"NVC_ATL_Utilities#133"},{"pos":[8457,8467],"content":"CUrl::CUrl"},{"content":"The constructor.","pos":[8471,8487]},{"content":"Parameters","pos":[8561,8571]},{"content":"The <ph id=\"ph1\">`CUrl`</ph> object to copy to create the URL.","pos":[8588,8632],"source":" The `CUrl` object to copy to create the URL."},{"pos":[8674,8685],"content":"CUrl::~CUrl"},{"content":"The destructor.","pos":[8689,8704]},{"pos":[8779,8797],"content":"CUrl::GetExtraInfo"},{"pos":[8801,8885],"content":"Call this method to get extra information (such as <bpt id=\"p1\">*</bpt>text<ept id=\"p1\">*</ept> or # <bpt id=\"p2\">*</bpt>text<ept id=\"p2\">*</ept>) from the URL.","source":"Call this method to get extra information (such as *text* or # *text*) from the URL."},{"content":"Return Value","pos":[8953,8965]},{"content":"Returns a string containing the extra information.","pos":[8969,9019]},{"pos":[9070,9094],"content":"CUrl::GetExtraInfoLength"},{"pos":[9098,9212],"content":"Call this method to get the length of the extra information (such as <bpt id=\"p1\">*</bpt>text<ept id=\"p1\">*</ept> or # <bpt id=\"p2\">*</bpt>text<ept id=\"p2\">*</ept>) to retrieve from the URL.","source":"Call this method to get the length of the extra information (such as *text* or # *text*) to retrieve from the URL."},{"content":"Return Value","pos":[9284,9296]},{"content":"Returns the length of the string containing the extra information.","pos":[9300,9366]},{"pos":[9410,9427],"content":"CUrl::GetHostName"},{"content":"Call this method to get the host name from the URL.","pos":[9431,9482]},{"content":"Return Value","pos":[9549,9561]},{"content":"Returns the host name.","pos":[9565,9587]},{"pos":[9637,9660],"content":"CUrl::GetHostNameLength"},{"content":"Call this method to get the length of the host name.","pos":[9664,9716]},{"content":"Return Value","pos":[9787,9799]},{"content":"Returns the host name length.","pos":[9803,9832]},{"pos":[9876,9893],"content":"CUrl::GetPassword"},{"content":"Call this method to get the password from the URL.","pos":[9897,9947]},{"content":"Return Value","pos":[10014,10026]},{"content":"Returns the password.","pos":[10030,10051]},{"pos":[10101,10124],"content":"CUrl::GetPasswordLength"},{"content":"Call this method to get the length of the password.","pos":[10128,10179]},{"content":"Return Value","pos":[10250,10262]},{"content":"Returns the password length.","pos":[10266,10294]},{"pos":[10340,10359],"content":"CUrl::GetPortNumber"},{"content":"Call this method to get the port number.","pos":[10363,10403]},{"content":"Return Value","pos":[10477,10489]},{"content":"Returns the port number.","pos":[10493,10517]},{"pos":[10559,10574],"content":"CUrl::GetScheme"},{"content":"Call this method to get the URL scheme.","pos":[10578,10617]},{"content":"Return Value","pos":[10689,10701]},{"pos":[10705,10797],"content":"Returns the <bpt id=\"p1\">[</bpt>ATL_URL_SCHEME<ept id=\"p1\">](atl-url-scheme-enum.md)</ept> value describing the scheme of the URL.","source":"Returns the [ATL_URL_SCHEME](atl-url-scheme-enum.md) value describing the scheme of the URL."},{"pos":[10843,10862],"content":"CUrl::GetSchemeName"},{"content":"Call this method to get the URL scheme name.","pos":[10866,10910]},{"content":"Return Value","pos":[10979,10991]},{"content":"Returns the URL scheme name (such as \"http\" or \"ftp\").","pos":[10995,11049]},{"pos":[11101,11126],"content":"CUrl::GetSchemeNameLength"},{"content":"Call this method to get the length of the URL scheme name.","pos":[11130,11188]},{"content":"Return Value","pos":[11261,11273]},{"content":"Returns the URL scheme name length.","pos":[11277,11312]},{"pos":[11357,11375],"content":"CUrl::GetUrlLength"},{"content":"Call this method to get the URL length.","pos":[11379,11418]},{"content":"Return Value","pos":[11484,11496]},{"content":"Returns the URL length.","pos":[11500,11523]},{"pos":[11566,11582],"content":"CUrl::GetUrlPath"},{"content":"Call this method to get the URL path.","pos":[11586,11623]},{"content":"Return Value","pos":[11689,11701]},{"content":"Returns the URL path.","pos":[11705,11726]},{"pos":[11775,11797],"content":"CUrl::GetUrlPathLength"},{"content":"Call this method to get the URL path length.","pos":[11801,11845]},{"content":"Return Value","pos":[11915,11927]},{"content":"Returns the URL path length.","pos":[11931,11959]},{"pos":[12003,12020],"content":"CUrl::GetUserName"},{"content":"Call this method to get the user name from the URL.","pos":[12024,12075]},{"content":"Return Value","pos":[12142,12154]},{"content":"Returns the user name.","pos":[12158,12180]},{"pos":[12230,12253],"content":"CUrl::GetUserNameLength"},{"content":"Call this method to get the length of the user name.","pos":[12257,12309]},{"content":"Return Value","pos":[12380,12392]},{"content":"Returns the user name length.","pos":[12396,12425]},{"pos":[12469,12485],"content":"CUrl::operator ="},{"pos":[12489,12554],"content":"Assigns the specified <ph id=\"ph1\">`CUrl`</ph> object to the current <ph id=\"ph2\">`CUrl`</ph> object.","source":"Assigns the specified `CUrl` object to the current `CUrl` object."},{"content":"Parameters","pos":[12624,12634]},{"content":"The <ph id=\"ph1\">`CUrl`</ph> object to copy into the current object.","pos":[12651,12701],"source":" The `CUrl` object to copy into the current object."},{"content":"Return Value","pos":[12711,12723]},{"content":"Returns a reference to the current object.","pos":[12727,12769]},{"pos":[12814,12832],"content":"CUrl::SetExtraInfo"},{"pos":[12836,12922],"content":"Call this method to set the extra information (such as <bpt id=\"p1\">*</bpt>text<ept id=\"p1\">*</ept> or # <bpt id=\"p2\">*</bpt>text<ept id=\"p2\">*</ept>) of the URL.","source":"Call this method to set the extra information (such as *text* or # *text*) of the URL."},{"content":"Parameters","pos":[12997,13007]},{"content":"lpszInfo","pos":[13012,13020]},{"content":"The string containing the extra information to include in the URL.","pos":[13025,13091]},{"content":"Return Value","pos":[13101,13113]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[13117,13159]},{"pos":[13203,13220],"content":"CUrl::SetHostName"},{"content":"Call this method to set the host name.","pos":[13224,13262]},{"content":"Parameters","pos":[13336,13346]},{"content":"The host name.","pos":[13364,13378]},{"content":"Return Value","pos":[13388,13400]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[13404,13446]},{"pos":[13490,13507],"content":"CUrl::SetPassword"},{"content":"Call this method to set the password.","pos":[13511,13548]},{"content":"Parameters","pos":[13622,13632]},{"content":"lpszPass","pos":[13637,13645]},{"content":"The password.","pos":[13650,13663]},{"content":"Return Value","pos":[13673,13685]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[13689,13731]},{"pos":[13777,13796],"content":"CUrl::SetPortNumber"},{"content":"Call this method to set the port number.","pos":[13800,13840]},{"content":"Parameters","pos":[13917,13927]},{"content":"nPrt","pos":[13932,13936]},{"content":"The port number.","pos":[13941,13957]},{"content":"Return Value","pos":[13967,13979]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[13983,14025]},{"pos":[14067,14082],"content":"CUrl::SetScheme"},{"content":"Call this method to set the URL scheme.","pos":[14086,14125]},{"content":"Parameters","pos":[14203,14213]},{"content":"One of the <bpt id=\"p1\">[</bpt>ATL_URL_SCHEME<ept id=\"p1\">](atl-url-scheme-enum.md)</ept> values for the scheme.","pos":[14230,14304],"source":" One of the [ATL_URL_SCHEME](atl-url-scheme-enum.md) values for the scheme."},{"content":"Return Value","pos":[14314,14326]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[14330,14372]},{"content":"Remarks","pos":[14382,14389]},{"pos":[14393,14479],"content":"You can also set the scheme by name (see <bpt id=\"p1\">[</bpt>CUrl::SetSchemeName<ept id=\"p1\">](#curl__setschemename)</ept>).","source":"You can also set the scheme by name (see [CUrl::SetSchemeName](#curl__setschemename))."},{"pos":[14525,14544],"content":"CUrl::SetSchemeName"},{"content":"Call this method to set the URL scheme name.","pos":[14548,14592]},{"content":"Parameters","pos":[14668,14678]},{"content":"lpszSchm","pos":[14683,14691]},{"content":"The URL scheme name.","pos":[14696,14716]},{"content":"Return Value","pos":[14726,14738]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[14742,14784]},{"content":"Remarks","pos":[14794,14801]},{"pos":[14805,14937],"content":"You can also set the scheme by using an <bpt id=\"p1\">[</bpt>ATL_URL_SCHEME<ept id=\"p1\">](atl-url-scheme-enum.md)</ept> constant (see <bpt id=\"p2\">[</bpt>CUrl::SetScheme<ept id=\"p2\">](#curl__setscheme)</ept>).","source":"You can also set the scheme by using an [ATL_URL_SCHEME](atl-url-scheme-enum.md) constant (see [CUrl::SetScheme](#curl__setscheme))."},{"pos":[14980,14996],"content":"CUrl::SetUrlPath"},{"content":"Call this method to set the URL path.","pos":[15000,15037]},{"content":"Parameters","pos":[15110,15120]},{"content":"The URL path.","pos":[15138,15151]},{"content":"Return Value","pos":[15161,15173]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[15177,15219]},{"pos":[15263,15280],"content":"CUrl::SetUserName"},{"content":"Call this method to set the user name.","pos":[15284,15322]},{"content":"Parameters","pos":[15396,15406]},{"content":"lpszUser","pos":[15411,15419]},{"content":"The user name.","pos":[15424,15438]},{"content":"Return Value","pos":[15448,15460]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[15464,15506]},{"content":"See Also","pos":[15515,15523]},{"content":"Classes","pos":[15528,15535]}],"content":"---\ntitle: \"CUrl Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL.CUrl\"\n  - \"CUrl\"\n  - \"ATL::CUrl\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CUrl class\"\nms.assetid: b3894d34-47b9-4961-9719-4197153793da\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CUrl Class\nThis class represents a URL. It allows you to manipulate each element of the URL independently of the others whether parsing an existing URL string or building a string from scratch.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the Windows Runtime.  \n  \n## Syntax  \n  \n```\nclass CUrl\n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CUrl::CUrl](#curl__curl)|The constructor.|  \n|[CUrl::~CUrl](#curl___dtorcurl)|The destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CUrl::Canonicalize](#curl__canonicalize)|Call this method to convert the URL string to canonical form.|  \n|[CUrl::Clear](#curl__clear)|Call this method to clear all of the URL fields.|  \n|[CUrl::CrackUrl](#curl__crackurl)|Call this method to decode and parse the URL.|  \n|[CUrl::CreateUrl](#curl__createurl)|Call this method to create the URL.|  \n|[CUrl::GetExtraInfo](#curl__getextrainfo)|Call this method to get extra information (such as *text* or # *text*) from the URL.|  \n|[CUrl::GetExtraInfoLength](#curl__getextrainfolength)|Call this method to get the length of the extra information (such as *text* or # *text*) to retrieve from the URL.|  \n|[CUrl::GetHostName](#curl__gethostname)|Call this method to get the host name from the URL.|  \n|[CUrl::GetHostNameLength](#curl__gethostnamelength)|Call this method to get the length of the host name.|  \n|[CUrl::GetPassword](#curl__getpassword)|Call this method to get the password from the URL.|  \n|[CUrl::GetPasswordLength](#curl__getpasswordlength)|Call this method to get the length of the password.|  \n|[CUrl::GetPortNumber](#curl__getportnumber)|Call this method to get the port number in terms of ATL_URL_PORT.|  \n|[CUrl::GetScheme](#curl__getscheme)|Call this method to get the URL scheme.|  \n|[CUrl::GetSchemeName](#curl__getschemename)|Call this method to get the URL scheme name.|  \n|[CUrl::GetSchemeNameLength](#curl__getschemenamelength)|Call this method to get the length of the URL scheme name.|  \n|[CUrl::GetUrlLength](#curl__geturllength)|Call this method to get the URL length.|  \n|[CUrl::GetUrlPath](#curl__geturlpath)|Call this method to get the URL path.|  \n|[CUrl::GetUrlPathLength](#curl__geturlpathlength)|Call this method to get the URL path length.|  \n|[CUrl::GetUserName](#curl__getusername)|Call this method to get the user name from the URL.|  \n|[CUrl::GetUserNameLength](#curl__getusernamelength)|Call this method to get the length of the user name.|  \n|[CUrl::SetExtraInfo](#curl__setextrainfo)|Call this method to set the extra information (such as *text* or # *text*) of the URL.|  \n|[CUrl::SetHostName](#curl__sethostname)|Call this method to set the host name.|  \n|[CUrl::SetPassword](#curl__setpassword)|Call this method to set the password.|  \n|[CUrl::SetPortNumber](#curl__setportnumber)|Call this method to set the port number in terms of ATL_URL_PORT.|  \n|[CUrl::SetScheme](#curl__setscheme)|Call this method to set the URL scheme.|  \n|[CUrl::SetSchemeName](#curl__setschemename)|Call this method to set the URL scheme name.|  \n|[CUrl::SetUrlPath](#curl__seturlpath)|Call this method to set the URL path.|  \n|[CUrl::SetUserName](#curl__setusername)|Call this method to set the user name.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CUrl::operator =](#curl__operator_eq)|Assigns the specified `CUrl` object to the current `CUrl` object.|  \n  \n## Remarks  \n `CUrl` allows you to manipulate the fields of a URL, such as the path or port number. `CUrl` understands URLs of the following form:  \n  \n \\<Scheme>://\\<UserName>:\\<Password>@\\<HostName>:\\<PortNumber>/\\<UrlPath>\\<ExtraInfo>  \n  \n (Some fields are optional.) For example, consider this URL:  \n  \n http://someone:secret@www.microsoft.com:80/visualc/stuff.htm#contents  \n  \n [CUrl::CrackUrl](#curl__crackurl) parses it as follows:  \n  \n-   Scheme: \"http\" or [ATL_URL_SCHEME_HTTP](atl-url-scheme-enum.md)  \n  \n-   UserName: \"someone\"  \n  \n-   Password: \"secret\"  \n  \n-   HostName: \"www.microsoft.com\"  \n  \n-   PortNumber: 80  \n  \n-   UrlPath: \"visualc/stuff.htm\"  \n  \n-   ExtraInfo: \"#contents\"  \n  \n To manipulate the UrlPath field (for instance), you would use [GetUrlPath](#curl__geturlpath), [GetUrlPathLength](#curl__geturlpathlength), and [SetUrlPath](#curl__seturlpath). You would use [CreateUrl](#curl__createurl) to create the complete URL string.  \n  \n## Requirements  \n **Header:** atlutil.h  \n  \n##  <a name=\"curl__canonicalize\"></a>  CUrl::Canonicalize  \n Call this method to convert the URL string to canonical form.  \n  \n```\ninline BOOL Canonicalize(DWORD dwFlags = 0) throw();\n```  \n  \n### Parameters  \n `dwFlags`  \n The flags that control canonicalization. If no flags are specified ( `dwFlags` = 0), the method converts all unsafe characters and meta sequences (such as \\\\.,\\ .., and \\\\...) to escape sequences. `dwFlags` can be one of the following values:  \n  \n-   ATL_URL_BROWSER_MODE: Does not encode or decode characters after \"#\" or \"\" and does not remove trailing white space after \"\". If this value is not specified, the entire URL is encoded and trailing white space is removed.  \n  \n-   ATL_URL _DECODE: Converts all %XX sequences to characters, including escape sequences, before the URL is parsed.  \n  \n-   ATL_URL _ENCODE_PERCENT: Encodes any percent signs encountered. By default, percent signs are not encoded.  \n  \n-   ATL_URL _ENCODE_SPACES_ONLY: Encodes spaces only.  \n  \n-   ATL_URL _NO_ENCODE: Does not convert unsafe characters to escape sequences.  \n  \n-   ATL_URL _NO_META: Does not remove meta sequences (such as \".\" and \"..\") from the URL.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n### Remarks  \n Converting to canonical form involves converting unsafe characters and spaces to escape sequences.  \n  \n##  <a name=\"curl__clear\"></a>  CUrl::Clear  \n Call this method to clear all of the URL fields.  \n  \n```\ninline void Clear() throw();\n```  \n  \n##  <a name=\"curl__crackurl\"></a>  CUrl::CrackUrl  \n Call this method to decode and parse the URL.  \n  \n```\nBOOL CrackUrl(LPCTSTR lpszUrl,  DWORD dwFlags = 0) throw();\n```  \n  \n### Parameters  \n `lpszUrl`  \n The URL.  \n  \n `dwFlags`  \n Specify ATL_URL_DECODE or ATL_URL_ESCAPE to convert all escape characters in `lpszUrl` to their real values after parsing. (Before Visual C++ 2005, ATL_URL_DECODE converted all escape characters before parsing.)  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n##  <a name=\"curl__createurl\"></a>  CUrl::CreateUrl  \n This method constructs a URL string from a CUrl object's component fields.  \n  \n```\ninline BOOL CreateUrl(LPTSTR lpszUrl,\n    DWORD* pdwMaxLength,\n    DWORD dwFlags = 0) const throw();\n```  \n  \n### Parameters  \n *lpszUrl*  \n A string buffer to hold the complete URL string.  \n  \n `pdwMaxLength`  \n The maximum length of the *lpszUrl* string buffer.  \n  \n `dwFlags`  \n Specify ATL_URL_ESCAPE to convert all escape characters in *lpszUrl* to their real values.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n### Remarks  \n This method appends its individual fields in order to construct the complete URL string using the following format:  \n  \n **\\<scheme>://\\<user>:\\<pass>@\\<domain>:\\<port>\\<path>\\<extra>**  \n  \n When calling this method, the `pdwMaxLength` parameter should initially contain the maximum length of the string buffer referenced by the *lpszUrl* parameter. The value of the `pdwMaxLength` parameter will be updated with the actual length of the URL string.  \n  \n### Example  \n This sample demonstrates creation of a CUrl object and retrieving its URL string  \n  \n [!code-cpp[NVC_ATL_Utilities#133](../../atl/codesnippet/cpp/curl-class_1.cpp)]  \n  \n##  <a name=\"curl__curl\"></a>  CUrl::CUrl  \n The constructor.  \n  \n```\nCUrl() throw();\nCUrl(const CUrl& urlThat) throw();\n```  \n  \n### Parameters  \n `urlThat`  \n The `CUrl` object to copy to create the URL.  \n  \n##  <a name=\"curl___dtorcurl\"></a>  CUrl::~CUrl  \n The destructor.  \n  \n```\n~CUrl() throw();\n```  \n  \n##  <a name=\"curl__getextrainfo\"></a>  CUrl::GetExtraInfo  \n Call this method to get extra information (such as *text* or # *text*) from the URL.  \n  \n```\ninline LPCTSTR GetExtraInfo() const throw();\n```  \n  \n### Return Value  \n Returns a string containing the extra information.  \n  \n##  <a name=\"curl__getextrainfolength\"></a>  CUrl::GetExtraInfoLength  \n Call this method to get the length of the extra information (such as *text* or # *text*) to retrieve from the URL.  \n  \n```\ninline DWORD GetExtraInfoLength() const throw();\n```  \n  \n### Return Value  \n Returns the length of the string containing the extra information.  \n  \n##  <a name=\"curl__gethostname\"></a>  CUrl::GetHostName  \n Call this method to get the host name from the URL.  \n  \n```\ninline LPCTSTR GetHostName() const throw();\n```  \n  \n### Return Value  \n Returns the host name.  \n  \n##  <a name=\"curl__gethostnamelength\"></a>  CUrl::GetHostNameLength  \n Call this method to get the length of the host name.  \n  \n```\ninline DWORD GetHostNameLength() const throw();\n```  \n  \n### Return Value  \n Returns the host name length.  \n  \n##  <a name=\"curl__getpassword\"></a>  CUrl::GetPassword  \n Call this method to get the password from the URL.  \n  \n```\ninline LPCTSTR GetPassword() const throw();\n```  \n  \n### Return Value  \n Returns the password.  \n  \n##  <a name=\"curl__getpasswordlength\"></a>  CUrl::GetPasswordLength  \n Call this method to get the length of the password.  \n  \n```\ninline DWORD GetPasswordLength() const throw();\n```  \n  \n### Return Value  \n Returns the password length.  \n  \n##  <a name=\"curl__getportnumber\"></a>  CUrl::GetPortNumber  \n Call this method to get the port number.  \n  \n```\ninline ATL_URL_PORT GetPortNumber() const throw();\n```  \n  \n### Return Value  \n Returns the port number.  \n  \n##  <a name=\"curl__getscheme\"></a>  CUrl::GetScheme  \n Call this method to get the URL scheme.  \n  \n```\ninline ATL_URL_SCHEME GetScheme() const throw();\n```  \n  \n### Return Value  \n Returns the [ATL_URL_SCHEME](atl-url-scheme-enum.md) value describing the scheme of the URL.  \n  \n##  <a name=\"curl__getschemename\"></a>  CUrl::GetSchemeName  \n Call this method to get the URL scheme name.  \n  \n```\ninline LPCTSTR GetSchemeName() const throw();\n```  \n  \n### Return Value  \n Returns the URL scheme name (such as \"http\" or \"ftp\").  \n  \n##  <a name=\"curl__getschemenamelength\"></a>  CUrl::GetSchemeNameLength  \n Call this method to get the length of the URL scheme name.  \n  \n```\ninline DWORD GetSchemeNameLength() const throw();\n```  \n  \n### Return Value  \n Returns the URL scheme name length.  \n  \n##  <a name=\"curl__geturllength\"></a>  CUrl::GetUrlLength  \n Call this method to get the URL length.  \n  \n```\ninline DWORD GetUrlLength() const throw();\n```  \n  \n### Return Value  \n Returns the URL length.  \n  \n##  <a name=\"curl__geturlpath\"></a>  CUrl::GetUrlPath  \n Call this method to get the URL path.  \n  \n```\ninline LPCTSTR GetUrlPath() const throw();\n```  \n  \n### Return Value  \n Returns the URL path.  \n  \n##  <a name=\"curl__geturlpathlength\"></a>  CUrl::GetUrlPathLength  \n Call this method to get the URL path length.  \n  \n```\ninline DWORD GetUrlPathLength() const throw();\n```  \n  \n### Return Value  \n Returns the URL path length.  \n  \n##  <a name=\"curl__getusername\"></a>  CUrl::GetUserName  \n Call this method to get the user name from the URL.  \n  \n```\ninline LPCTSTR GetUserName() const throw();\n```  \n  \n### Return Value  \n Returns the user name.  \n  \n##  <a name=\"curl__getusernamelength\"></a>  CUrl::GetUserNameLength  \n Call this method to get the length of the user name.  \n  \n```\ninline DWORD GetUserNameLength() const throw();\n```  \n  \n### Return Value  \n Returns the user name length.  \n  \n##  <a name=\"curl__operator_eq\"></a>  CUrl::operator =  \n Assigns the specified `CUrl` object to the current `CUrl` object.  \n  \n```\nCUrl& operator= (const CUrl& urlThat) throw();\n```  \n  \n### Parameters  \n `urlThat`  \n The `CUrl` object to copy into the current object.  \n  \n### Return Value  \n Returns a reference to the current object.  \n  \n##  <a name=\"curl__setextrainfo\"></a>  CUrl::SetExtraInfo  \n Call this method to set the extra information (such as *text* or # *text*) of the URL.  \n  \n```\ninline BOOL SetExtraInfo(LPCTSTR lpszInfo) throw();\n```  \n  \n### Parameters  \n *lpszInfo*  \n The string containing the extra information to include in the URL.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n##  <a name=\"curl__sethostname\"></a>  CUrl::SetHostName  \n Call this method to set the host name.  \n  \n```\ninline BOOL SetHostName(LPCTSTR lpszHost) throw();\n```  \n  \n### Parameters  \n `lpszHost`  \n The host name.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n##  <a name=\"curl__setpassword\"></a>  CUrl::SetPassword  \n Call this method to set the password.  \n  \n```\ninline BOOL SetPassword(LPCTSTR lpszPass) throw();\n```  \n  \n### Parameters  \n *lpszPass*  \n The password.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n##  <a name=\"curl__setportnumber\"></a>  CUrl::SetPortNumber  \n Call this method to set the port number.  \n  \n```\ninline BOOL SetPortNumber(ATL_URL_PORT nPrt) throw();\n```  \n  \n### Parameters  \n *nPrt*  \n The port number.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n##  <a name=\"curl__setscheme\"></a>  CUrl::SetScheme  \n Call this method to set the URL scheme.  \n  \n```\ninline BOOL SetScheme(ATL_URL_SCHEME nScheme) throw();\n```  \n  \n### Parameters  \n `nScheme`  \n One of the [ATL_URL_SCHEME](atl-url-scheme-enum.md) values for the scheme.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n### Remarks  \n You can also set the scheme by name (see [CUrl::SetSchemeName](#curl__setschemename)).  \n  \n##  <a name=\"curl__setschemename\"></a>  CUrl::SetSchemeName  \n Call this method to set the URL scheme name.  \n  \n```\ninline BOOL SetSchemeName(LPCTSTR lpszSchm) throw();\n```  \n  \n### Parameters  \n *lpszSchm*  \n The URL scheme name.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n### Remarks  \n You can also set the scheme by using an [ATL_URL_SCHEME](atl-url-scheme-enum.md) constant (see [CUrl::SetScheme](#curl__setscheme)).  \n  \n##  <a name=\"curl__seturlpath\"></a>  CUrl::SetUrlPath  \n Call this method to set the URL path.  \n  \n```\ninline BOOL SetUrlPath(LPCTSTR lpszPath) throw();\n```  \n  \n### Parameters  \n `lpszPath`  \n The URL path.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n##  <a name=\"curl__setusername\"></a>  CUrl::SetUserName  \n Call this method to set the user name.  \n  \n```\ninline BOOL SetUserName(LPCTSTR lpszUser) throw();\n```  \n  \n### Parameters  \n *lpszUser*  \n The user name.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n## See Also  \n [Classes](../../atl/reference/atl-classes.md)\n"}