{"nodes":[{"pos":[12,45],"content":"negate (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"negate (STL-CLR) | Microsoft Docs","pos":[0,33]}]},{"content":"negate (STL/CLR)","pos":[617,633]},{"content":"The template class describes a functor that, when called, returns its argument negated.","pos":[634,721]},{"content":"You use it specify a function object in terms of its argument type.","pos":[722,789]},{"content":"Syntax","pos":[798,804]},{"content":"Parameters","pos":[1248,1258]},{"content":"Arg","pos":[1262,1265]},{"content":"The type of the arguments.","pos":[1269,1295]},{"content":"Member Functions","pos":[1304,1320]},{"content":"Type Definition","pos":[1327,1342]},{"content":"Description","pos":[1343,1354]},{"content":"argument_type","pos":[1403,1416]},{"content":"The type of the functor argument.","pos":[1417,1450]},{"content":"delegate_type","pos":[1455,1468]},{"content":"The type of the generic delegate.","pos":[1469,1502]},{"content":"result_type","pos":[1507,1518]},{"content":"The type of the functor result.","pos":[1519,1550]},{"content":"Member","pos":[1558,1564]},{"content":"Description","pos":[1565,1576]},{"content":"negate","pos":[1616,1622]},{"content":"Constructs the functor.","pos":[1623,1646]},{"content":"Operator","pos":[1654,1662]},{"content":"Description","pos":[1663,1674]},{"content":"operator()","pos":[1716,1726]},{"content":"Computes the desired function.","pos":[1727,1757]},{"content":"operator delegate_type^","pos":[1762,1785]},{"content":"Casts the functor to a delegate.","pos":[1786,1818]},{"content":"Remarks","pos":[1828,1835]},{"content":"The template class describes a one-argument functor.","pos":[1839,1891]},{"content":"It defines the member operator <ph id=\"ph1\">`operator()`</ph> so that, when the object is called as a function, it returns its argument negated.","pos":[1892,2018],"source":" It defines the member operator `operator()` so that, when the object is called as a function, it returns its argument negated."},{"pos":[2025,2147],"content":"You can also pass the object as a function argument whose type is <ph id=\"ph1\">`delegate_type^`</ph> and it will be converted appropriately.","source":"You can also pass the object as a function argument whose type is `delegate_type^` and it will be converted appropriately."},{"content":"Example","pos":[2156,2163]},{"content":"Requirements","pos":[2965,2977]},{"pos":[2981,3013],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/functional&gt;","source":"**Header:** \\<cliext/functional>"},{"pos":[3020,3041],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[3050,3058]},{"content":"logical_not (STL/CLR)","pos":[3063,3084]}],"content":"---\ntitle: \"negate (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::negate\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"negate function [STL/CLR]\"\nms.assetid: 58e4c339-0dee-4db8-b2cc-de8920977039\ncaps.latest.revision: 18\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# negate (STL/CLR)\nThe template class describes a functor that, when called, returns its argument negated. You use it specify a function object in terms of its argument type.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Arg>  \n    ref class negate  \n    { // wrap operator()  \npublic:  \n    typedef Arg argument_type;  \n    typedef bool result_type;  \n    typedef Microsoft::VisualC::StlClr::UnaryDelegate<  \n        argument_type, result_type>  \n        delegate_type;  \n  \n    negate();  \n    negate(negate<Arg>% right);  \n  \n    result_type operator()(argument_type left);  \n    operator delegate_type^();  \n    };  \n```  \n  \n#### Parameters  \n Arg  \n The type of the arguments.  \n  \n## Member Functions  \n  \n|Type Definition|Description|  \n|---------------------|-----------------|  \n|argument_type|The type of the functor argument.|  \n|delegate_type|The type of the generic delegate.|  \n|result_type|The type of the functor result.|  \n  \n|Member|Description|  \n|------------|-----------------|  \n|negate|Constructs the functor.|  \n  \n|Operator|Description|  \n|--------------|-----------------|  \n|operator()|Computes the desired function.|  \n|operator delegate_type^|Casts the functor to a delegate.|  \n  \n## Remarks  \n The template class describes a one-argument functor. It defines the member operator `operator()` so that, when the object is called as a function, it returns its argument negated.  \n  \n You can also pass the object as a function argument whose type is `delegate_type^` and it will be converted appropriately.  \n  \n## Example  \n  \n```  \n// cliext_negate.cpp   \n// compile with: /clr   \n#include <cliext/algorithm>   \n#include <cliext/functional>   \n#include <cliext/vector>   \n  \ntypedef cliext::vector<int> Myvector;   \nint main()   \n    {   \n    Myvector c1;   \n    c1.push_back(4);   \n    c1.push_back(-3);   \n    Myvector c3(2, 0);   \n  \n// display initial contents \" 4 -3\"   \n    for each (int elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// transform and display   \n    cliext::transform(c1.begin(), c1.begin() + 2,   \n        c3.begin(), cliext::negate<int>());   \n    for each (int elem in c3)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n4 -3  \n-4 3  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/functional>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [logical_not (STL/CLR)](../dotnet/logical-not-stl-clr.md)"}