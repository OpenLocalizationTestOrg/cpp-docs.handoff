{"nodes":[{"pos":[12,62],"content":"_RPT, _RPTF, _RPTW, _RPTFW Macros | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_RPT, _RPTF, _RPTW, _RPTFW Macros | Microsoft Docs","pos":[0,50]}]},{"content":"_RPT, _RPTF, _RPTW, _RPTFW Macros","pos":[2068,2101]},{"content":"Tracks an application's progress by generating a debug report (debug version only).","pos":[2102,2185]},{"content":"Note that <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept> specifies the number of arguments in <ph id=\"ph1\">`args`</ph> and can be 0, 1, 2, 3, 4, or 5.","pos":[2186,2275],"source":" Note that *n* specifies the number of arguments in `args` and can be 0, 1, 2, 3, 4, or 5."},{"content":"Syntax","pos":[2284,2290]},{"content":"Parameters","pos":[2571,2581]},{"content":"Report type: <ph id=\"ph1\">`_CRT_WARN`</ph>, <ph id=\"ph2\">`_CRT_ERROR`</ph>, or <ph id=\"ph3\">`_CRT_ASSERT`</ph>.","pos":[2601,2658],"source":" Report type: `_CRT_WARN`, `_CRT_ERROR`, or `_CRT_ASSERT`."},{"content":"Format-control string used to create the user message.","pos":[2677,2731]},{"content":"Substitution arguments used by <ph id=\"ph1\">`format`</ph>.","pos":[2748,2788],"source":" Substitution arguments used by `format`."},{"content":"Remarks","pos":[2797,2804]},{"content":"All these macros take the <ph id=\"ph1\">`reportType`</ph>and <ph id=\"ph2\">`format`</ph>parameters.","pos":[2808,2869],"source":"All these macros take the `reportType`and `format`parameters."},{"content":"In addition, they might also take up to four additional arguments, signified by the number appended to the macro name.","pos":[2870,2988]},{"content":"For example, <ph id=\"ph1\">`_RPT0`</ph> and <ph id=\"ph2\">`_RPTF0`</ph> take no additional arguments, <ph id=\"ph3\">`_RPT1`</ph> and <ph id=\"ph4\">`_RPTF1`</ph> take <ph id=\"ph5\">`arg1`</ph>, <ph id=\"ph6\">`_RPT2`</ph> and <ph id=\"ph7\">`_RPTF2`</ph> take <ph id=\"ph8\">`arg1`</ph> and <ph id=\"ph9\">`arg2`</ph>, and so on.","pos":[2989,3142],"source":" For example, `_RPT0` and `_RPTF0` take no additional arguments, `_RPT1` and `_RPTF1` take `arg1`, `_RPT2` and `_RPTF2` take `arg1` and `arg2`, and so on."},{"content":"The <ph id=\"ph1\">`_RPT`</ph> and <ph id=\"ph2\">`_RPTF`</ph> macros are similar to the <bpt id=\"p1\">[</bpt>printf<ept id=\"p1\">](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)</ept> function, because they can be used to track an application's progress during the debugging process.","pos":[3149,3378],"source":"The `_RPT` and `_RPTF` macros are similar to the [printf](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md) function, because they can be used to track an application's progress during the debugging process."},{"content":"However, these macros are more flexible than <ph id=\"ph1\">`printf`</ph> because they do not need to be enclosed in <ph id=\"ph2\">`#ifdef`</ph> statements to prevent them from being called in a retail build of an application.","pos":[3379,3566],"source":" However, these macros are more flexible than `printf` because they do not need to be enclosed in `#ifdef` statements to prevent them from being called in a retail build of an application."},{"content":"This flexibility is achieved by using the <bpt id=\"p1\">[</bpt>_DEBUG<ept id=\"p1\">](../../c-runtime-library/debug.md)</ept> macro; the <ph id=\"ph1\">`_RPT`</ph> and <ph id=\"ph2\">`_RPTF`</ph> macros are only available when the <ph id=\"ph3\">`_DEBUG`</ph> flag is defined.","pos":[3567,3742],"source":" This flexibility is achieved by using the [_DEBUG](../../c-runtime-library/debug.md) macro; the `_RPT` and `_RPTF` macros are only available when the `_DEBUG` flag is defined."},{"content":"When <ph id=\"ph1\">`_DEBUG`</ph> is not defined, calls to these macros are removed during preprocessing.","pos":[3743,3828],"source":" When `_DEBUG` is not defined, calls to these macros are removed during preprocessing."},{"content":"The <ph id=\"ph1\">`_RPTW`</ph> and <ph id=\"ph2\">`_RPTFW`</ph> macros are wide-character versions of these macros.","pos":[3835,3911],"source":"The `_RPTW` and `_RPTFW` macros are wide-character versions of these macros."},{"content":"They are like <ph id=\"ph1\">`wprintf`</ph> and take wide-character strings as arguments.","pos":[3912,3981],"source":" They are like `wprintf` and take wide-character strings as arguments."},{"content":"The <ph id=\"ph1\">`_RPT`</ph> macros call the <bpt id=\"p1\">[</bpt>_CrtDbgReport<ept id=\"p1\">](../../c-runtime-library/reference/crtdbgreport-crtdbgreportw.md)</ept> function to generate a debug report with a user message.","pos":[3988,4152],"source":"The `_RPT` macros call the [_CrtDbgReport](../../c-runtime-library/reference/crtdbgreport-crtdbgreportw.md) function to generate a debug report with a user message."},{"content":"The <ph id=\"ph1\">`_RPTW`</ph> macros call the <ph id=\"ph2\">`_CrtDbgReportW`</ph> function to generate the same report with wide characters.","pos":[4153,4256],"source":" The `_RPTW` macros call the `_CrtDbgReportW` function to generate the same report with wide characters."},{"content":"The <ph id=\"ph1\">`_RPTF`</ph> and <ph id=\"ph2\">`_RPTFW`</ph> macros create a debug report with the source file and line number where the report macro was called, in addition to the user message.","pos":[4257,4415],"source":" The `_RPTF` and `_RPTFW` macros create a debug report with the source file and line number where the report macro was called, in addition to the user message."},{"content":"The user message is created by substituting the <ph id=\"ph1\">`arg`</ph>[<bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept>] arguments into the <ph id=\"ph2\">`format`</ph> string, using the same rules defined by the <bpt id=\"p2\">[</bpt>printf<ept id=\"p2\">](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)</ept> function.","pos":[4416,4637],"source":" The user message is created by substituting the `arg`[*n*] arguments into the `format` string, using the same rules defined by the [printf](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md) function."},{"content":"or <ph id=\"ph1\">`_CrtDbgReportW`</ph> generates the debug report and determines its destinations based on the current report modes and file defined for <ph id=\"ph2\">`reportType`</ph>.","pos":[4660,4807],"source":" or `_CrtDbgReportW` generates the debug report and determines its destinations based on the current report modes and file defined for `reportType`."},{"content":"The <bpt id=\"p1\">[</bpt>_CrtSetReportMode<ept id=\"p1\">](../../c-runtime-library/reference/crtsetreportmode.md)</ept> and <bpt id=\"p2\">[</bpt>_CrtSetReportFile<ept id=\"p2\">](../../c-runtime-library/reference/crtsetreportfile.md)</ept> functions are used to define the destinations for each report type.","pos":[4808,5033],"source":" The [_CrtSetReportMode](../../c-runtime-library/reference/crtsetreportmode.md) and [_CrtSetReportFile](../../c-runtime-library/reference/crtsetreportfile.md) functions are used to define the destinations for each report type."},{"pos":[5040,5176],"content":"If an <ph id=\"ph1\">`_RPT`</ph> macro is called and neither <ph id=\"ph2\">`_CrtSetReportMode`</ph> nor <ph id=\"ph3\">`_CrtSetReportFile`</ph> has been called, messages are displayed as follows.","source":"If an `_RPT` macro is called and neither `_CrtSetReportMode` nor `_CrtSetReportFile` has been called, messages are displayed as follows."},{"content":"Report type","pos":[5183,5194]},{"content":"Output destination","pos":[5195,5213]},{"content":"Warning text is not displayed.","pos":[5277,5307]},{"content":"A pop-up window.","pos":[5325,5341]},{"content":"Same as if <ph id=\"ph1\">`_CrtSetReportMode(_CRT_ERROR, _CRTDBG_MODE_WNDW);`</ph> had been specified.","pos":[5342,5424],"source":" Same as if `_CrtSetReportMode(_CRT_ERROR, _CRTDBG_MODE_WNDW);` had been specified."},{"pos":[5443,5464],"content":"Same as <ph id=\"ph1\">`_CRT_ERROR`</ph>.","source":"Same as `_CRT_ERROR`."},{"content":"When the destination is a debug message window and the user chooses the <bpt id=\"p1\">**</bpt>Retry<ept id=\"p1\">**</ept> button, <ph id=\"ph1\">`_CrtDbgReport`</ph> or <ph id=\"ph2\">`_CrtDbgReportW`</ph> returns 1, causing these macros to start the debugger, provided that just-in-time (JIT) debugging is enabled.","pos":[5472,5707],"source":"When the destination is a debug message window and the user chooses the **Retry** button, `_CrtDbgReport` or `_CrtDbgReportW` returns 1, causing these macros to start the debugger, provided that just-in-time (JIT) debugging is enabled."},{"content":"For more information about using these macros as a debugging error handling mechanism, see <bpt id=\"p1\">[</bpt>Using Macros for Verification and Reporting<ept id=\"p1\">](/visualstudio/debugger/macros-for-reporting)</ept>.","pos":[5708,5890],"source":" For more information about using these macros as a debugging error handling mechanism, see [Using Macros for Verification and Reporting](/visualstudio/debugger/macros-for-reporting)."},{"content":"Two other macros exist that generate a debug report.","pos":[5897,5949]},{"content":"The <bpt id=\"p1\">[</bpt>_ASSERT<ept id=\"p1\">](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md)</ept> macro generates a report, but only when its expression argument evaluates to FALSE.","pos":[5950,6119],"source":" The [_ASSERT](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md) macro generates a report, but only when its expression argument evaluates to FALSE."},{"content":"<bpt id=\"p1\">[</bpt>_ASSERTE<ept id=\"p1\">](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md)</ept> is exactly like <ph id=\"ph1\">`_ASSERT`</ph>, but includes the failed expression in the generated report.","pos":[6120,6289],"source":"[_ASSERTE](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md) is exactly like `_ASSERT`, but includes the failed expression in the generated report."},{"content":"Requirements","pos":[6298,6310]},{"content":"Macro","pos":[6317,6322]},{"content":"Required header","pos":[6323,6338]},{"pos":[6388,6394],"content":"macros"},{"content":"crtdbg.h&gt;","pos":[6397,6406],"source":"crtdbg.h>"},{"pos":[6419,6425],"content":"macros"},{"content":"crtdbg.h&gt;","pos":[6428,6437],"source":"crtdbg.h>"},{"pos":[6450,6456],"content":"macros"},{"content":"crtdbg.h&gt;","pos":[6459,6468],"source":"crtdbg.h>"},{"pos":[6482,6488],"content":"macros"},{"content":"crtdbg.h&gt;","pos":[6491,6500],"source":"crtdbg.h>"},{"pos":[6508,6626],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Libraries","pos":[6635,6644]},{"pos":[6648,6743],"content":"Debug versions of <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept> only.","source":"Debug versions of [C run-time libraries](../../c-runtime-library/crt-library-features.md) only."},{"content":"Although these are macros and are obtained by including Crtdbg.h, the application must link with one of the debug libraries because these macros call other run-time functions.","pos":[6750,6925]},{"content":"Example","pos":[6934,6941]},{"pos":[6945,7056],"content":"See the example in the <bpt id=\"p1\">[</bpt>_ASSERT<ept id=\"p1\">](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md)</ept> topic.","source":"See the example in the [_ASSERT](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md) topic."},{"content":".NET Framework Equivalent","pos":[7065,7090]},{"content":"Not applicable.","pos":[7094,7109]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[7110,7157],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[7158,7283],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[7292,7300]},{"content":"Debug Routines","pos":[7305,7319]}],"content":"---\ntitle: \"_RPT, _RPTF, _RPTW, _RPTFW Macros | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"RPT3\"\n  - \"RPTF4\"\n  - \"_RPT4\"\n  - \"RPT1\"\n  - \"_RPTF0\"\n  - \"RPTF3\"\n  - \"_RPTF4\"\n  - \"RPTF1\"\n  - \"RPT4\"\n  - \"_RPT1\"\n  - \"_RPT0\"\n  - \"RPT0\"\n  - \"_RPTF2\"\n  - \"RPTF0\"\n  - \"_RPT3\"\n  - \"_RPT2\"\n  - \"_RPTF3\"\n  - \"RPT2\"\n  - \"_RPTF1\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"debugging [CRT], using macros\"\n  - \"_RPTW3 macro\"\n  - \"_RPT0 macro\"\n  - \"RPTW4 macro\"\n  - \"_RPTF3 macro\"\n  - \"_RPTW4 macro\"\n  - \"RPTF4 macro\"\n  - \"RPTFW2 macro\"\n  - \"RPTW macros\"\n  - \"RPT1 macro\"\n  - \"_RPTF macros\"\n  - \"RPTFW3 macro\"\n  - \"_RPTW0 macro\"\n  - \"_RPTF0 macro\"\n  - \"macros, debugging with\"\n  - \"_RPTW2 macro\"\n  - \"RPTF3 macro\"\n  - \"RPT3 macro\"\n  - \"RPT0 macro\"\n  - \"_RPT macros\"\n  - \"RPTW3 macro\"\n  - \"_RPTFW macros\"\n  - \"debug reporting macros\"\n  - \"RPTF macros\"\n  - \"RPT macros\"\n  - \"_RPTW macros\"\n  - \"RPTF2 macro\"\n  - \"_RPTF1 macro\"\n  - \"_RPT1 macro\"\n  - \"_RPT4 macro\"\n  - \"_RPTFW2 macro\"\n  - \"_RPTFW1 macro\"\n  - \"RPTF0 macro\"\n  - \"_RPT2 macro\"\n  - \"RPTFW macros\"\n  - \"_RPTW1 macro\"\n  - \"_RPTFW0 macro\"\n  - \"RPT4 macro\"\n  - \"_RPT3 macro\"\n  - \"_RPTFW3 macro\"\n  - \"_RPTF4 macro\"\n  - \"_RPTFW4 macro\"\n  - \"_RPTF2 macro\"\n  - \"RPTW0 macro\"\n  - \"RPTFW4 macro\"\n  - \"RPTFW0 macro\"\n  - \"RPTW2 macro\"\n  - \"RPTF1 macro\"\n  - \"RPT2 macro\"\n  - \"RPTFW1 macro\"\n  - \"RPTW1 macro\"\nms.assetid: a5bf8b30-57f7-4971-8030-e773b7a1ae13\ncaps.latest.revision: 14\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _RPT, _RPTF, _RPTW, _RPTFW Macros\nTracks an application's progress by generating a debug report (debug version only). Note that *n* specifies the number of arguments in `args` and can be 0, 1, 2, 3, 4, or 5.  \n  \n## Syntax  \n  \n```  \n  \n      _RPT  \n      n  \n      (  \n   reportType,  \n   format,  \n...[args]  \n);  \n_RPTFn(  \n   reportType,  \n   format,  \n   [args]  \n);  \n_RPTWn(  \n   reportType,  \n   format   \n   [args]  \n);  \n_RPTFWn(  \n   reportType,  \n   format   \n   [args]  \n);  \n```  \n  \n#### Parameters  \n `reportType`  \n Report type: `_CRT_WARN`, `_CRT_ERROR`, or `_CRT_ASSERT`.  \n  \n `format`  \n Format-control string used to create the user message.  \n  \n `args`  \n Substitution arguments used by `format`.  \n  \n## Remarks  \n All these macros take the `reportType`and `format`parameters. In addition, they might also take up to four additional arguments, signified by the number appended to the macro name. For example, `_RPT0` and `_RPTF0` take no additional arguments, `_RPT1` and `_RPTF1` take `arg1`, `_RPT2` and `_RPTF2` take `arg1` and `arg2`, and so on.  \n  \n The `_RPT` and `_RPTF` macros are similar to the [printf](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md) function, because they can be used to track an application's progress during the debugging process. However, these macros are more flexible than `printf` because they do not need to be enclosed in `#ifdef` statements to prevent them from being called in a retail build of an application. This flexibility is achieved by using the [_DEBUG](../../c-runtime-library/debug.md) macro; the `_RPT` and `_RPTF` macros are only available when the `_DEBUG` flag is defined. When `_DEBUG` is not defined, calls to these macros are removed during preprocessing.  \n  \n The `_RPTW` and `_RPTFW` macros are wide-character versions of these macros. They are like `wprintf` and take wide-character strings as arguments.  \n  \n The `_RPT` macros call the [_CrtDbgReport](../../c-runtime-library/reference/crtdbgreport-crtdbgreportw.md) function to generate a debug report with a user message. The `_RPTW` macros call the `_CrtDbgReportW` function to generate the same report with wide characters. The `_RPTF` and `_RPTFW` macros create a debug report with the source file and line number where the report macro was called, in addition to the user message. The user message is created by substituting the `arg`[*n*] arguments into the `format` string, using the same rules defined by the [printf](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md) function.  \n  \n `_CrtDbgReport` or `_CrtDbgReportW` generates the debug report and determines its destinations based on the current report modes and file defined for `reportType`. The [_CrtSetReportMode](../../c-runtime-library/reference/crtsetreportmode.md) and [_CrtSetReportFile](../../c-runtime-library/reference/crtsetreportfile.md) functions are used to define the destinations for each report type.  \n  \n If an `_RPT` macro is called and neither `_CrtSetReportMode` nor `_CrtSetReportFile` has been called, messages are displayed as follows.  \n  \n|Report type|Output destination|  \n|-----------------|------------------------|  \n|`_CRT_WARN`|Warning text is not displayed.|  \n|`_CRT_ERROR`|A pop-up window. Same as if `_CrtSetReportMode(_CRT_ERROR, _CRTDBG_MODE_WNDW);` had been specified.|  \n|`_CRT_ASSERT`|Same as `_CRT_ERROR`.|  \n  \n When the destination is a debug message window and the user chooses the **Retry** button, `_CrtDbgReport` or `_CrtDbgReportW` returns 1, causing these macros to start the debugger, provided that just-in-time (JIT) debugging is enabled. For more information about using these macros as a debugging error handling mechanism, see [Using Macros for Verification and Reporting](/visualstudio/debugger/macros-for-reporting).  \n  \n Two other macros exist that generate a debug report. The [_ASSERT](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md) macro generates a report, but only when its expression argument evaluates to FALSE. [_ASSERTE](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md) is exactly like `_ASSERT`, but includes the failed expression in the generated report.  \n  \n## Requirements  \n  \n|Macro|Required header|  \n|-----------|---------------------|  \n|`_RPT` macros|\\<crtdbg.h>|  \n|`_RPTF` macros|\\<crtdbg.h>|  \n|`_RPTW` macros|\\<crtdbg.h>|  \n|`_RPTFW` macros|\\<crtdbg.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Libraries  \n Debug versions of [C run-time libraries](../../c-runtime-library/crt-library-features.md) only.  \n  \n Although these are macros and are obtained by including Crtdbg.h, the application must link with one of the debug libraries because these macros call other run-time functions.  \n  \n## Example  \n See the example in the [_ASSERT](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md) topic.  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Debug Routines](../../c-runtime-library/debug-routines.md)"}