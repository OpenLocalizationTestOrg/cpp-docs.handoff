{"nodes":[{"pos":[12,47],"content":"hash_compare Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"hash_compare Class | Microsoft Docs","pos":[0,35]}]},{"content":"hash_compare Class","pos":[691,709]},{"pos":[710,949],"content":"The template class describes an object that can be used by any of the hash associative containers — hash_map, hash_multimap, hash_set, or hash_multiset — as a default <bpt id=\"p1\">**</bpt>Traits<ept id=\"p1\">**</ept> parameter object to order and hash the elements they contain.","source":"The template class describes an object that can be used by any of the hash associative containers — hash_map, hash_multimap, hash_set, or hash_multiset — as a default **Traits** parameter object to order and hash the elements they contain."},{"content":"Syntax","pos":[958,964]},{"pos":[970,1252],"content":"class hash_compare { Traits comp; public: const size_t bucket_size = 4; const size_t min_buckets = 8; hash_compare(); hash_compare(Traits pred); size_t operator()(const Key&amp; key) const; bool operator()( const Key&amp; key1, const Key&amp; key2) const; };","source":"class hash_compare\n   {\n   Traits comp;\n   public:\n   const size_t bucket_size = 4;\n   const size_t min_buckets = 8;\n   hash_compare();\n   hash_compare(Traits pred);\n   size_t operator()(const Key& key) const;\n   bool operator()(\n   const Key& key1,\n   const Key& key2) const;\n   };"},{"content":"Remarks","pos":[1261,1268]},{"content":"Each hash associative container stores a hash traits object of type <bpt id=\"p1\">**</bpt>Traits<ept id=\"p1\">**</ept> (a template parameter).","pos":[1272,1374],"source":"Each hash associative container stores a hash traits object of type **Traits** (a template parameter)."},{"content":"You can derive a class from a specialization of hash_compare to selectively override certain functions and objects, or you can supply your own version of this class if you meet certain minimum requirements.","pos":[1375,1581]},{"content":"Specifically, for an object hash_comp of type <bpt id=\"p1\">**</bpt>hash_compare<ph id=\"ph1\">\\&lt;</ph>Key, Traits&gt;<ept id=\"p1\">**</ept>, the following behavior is required by the above containers:","pos":[1582,1719],"source":" Specifically, for an object hash_comp of type **hash_compare\\<Key, Traits>**, the following behavior is required by the above containers:"},{"content":"For all values <ph id=\"ph1\">`key`</ph> of type <bpt id=\"p1\">**</bpt>Key<ept id=\"p1\">**</ept>, the call <bpt id=\"p2\">**</bpt>hash_comp<ept id=\"p2\">**</ept>( <ph id=\"ph2\">`key`</ph>) serves as a hash function, which yields a distribution of values of type <bpt id=\"p3\">**</bpt>size_t<ept id=\"p3\">**</ept>.","pos":[1729,1882],"source":"For all values `key` of type **Key**, the call **hash_comp**( `key`) serves as a hash function, which yields a distribution of values of type **size_t**."},{"content":"The function supplied by hash_compare returns <ph id=\"ph1\">`key`</ph>.","pos":[1883,1935],"source":" The function supplied by hash_compare returns `key`."},{"content":"For any value <ph id=\"ph1\">`key1`</ph> of type <bpt id=\"p1\">**</bpt>Key<ept id=\"p1\">**</ept> that precedes <ph id=\"ph2\">`key2`</ph> in the sequence and has the same hash value (value returned by the hash function), <bpt id=\"p2\">**</bpt>hash_comp<ept id=\"p2\">**</ept>( <ph id=\"ph3\">`key2`</ph>, <ph id=\"ph4\">`key1`</ph>) is false.","pos":[1945,2126],"source":"For any value `key1` of type **Key** that precedes `key2` in the sequence and has the same hash value (value returned by the hash function), **hash_comp**( `key2`, `key1`) is false."},{"content":"The function must impose a total ordering on values of type <bpt id=\"p1\">**</bpt>Key<ept id=\"p1\">**</ept>.","pos":[2127,2195],"source":" The function must impose a total ordering on values of type **Key**."},{"content":"The function supplied by hash_compare returns <bpt id=\"p1\">*</bpt>comp<ept id=\"p1\">*</ept>( <ph id=\"ph1\">`key2`</ph>, <ph id=\"ph2\">`key1`</ph>) <ph id=\"ph3\">`,`</ph> where <bpt id=\"p2\">*</bpt>comp<ept id=\"p2\">*</ept> is a stored object of type <bpt id=\"p3\">**</bpt>Traits<ept id=\"p3\">**</ept> that you can specify when you construct the object hash_comp.","pos":[2196,2382],"source":" The function supplied by hash_compare returns *comp*( `key2`, `key1`) `,` where *comp* is a stored object of type **Traits** that you can specify when you construct the object hash_comp."},{"content":"For the default <bpt id=\"p1\">**</bpt>Traits<ept id=\"p1\">**</ept> parameter type <bpt id=\"p2\">**</bpt>less<ph id=\"ph1\">\\&lt;</ph>Key&gt;<ept id=\"p2\">**</ept>, sort keys never decrease in value.","pos":[2383,2475],"source":" For the default **Traits** parameter type **less\\<Key>**, sort keys never decrease in value."},{"content":"The integer constant <bpt id=\"p1\">**</bpt>bucket_size<ept id=\"p1\">**</ept> specifies the mean number of elements per \"bucket\" (hash-table entry) that the container should try not to exceed.","pos":[2485,2636],"source":"The integer constant **bucket_size** specifies the mean number of elements per \"bucket\" (hash-table entry) that the container should try not to exceed."},{"content":"It must be greater than zero.","pos":[2637,2666]},{"content":"The value supplied by hash_compare is 4.","pos":[2667,2707]},{"content":"The integer constant <bpt id=\"p1\">**</bpt>min_buckets<ept id=\"p1\">**</ept> specifies the minimum number of buckets to maintain in the hash table.","pos":[2717,2824],"source":"The integer constant **min_buckets** specifies the minimum number of buckets to maintain in the hash table."},{"content":"It must be a power of two and greater than zero.","pos":[2825,2873]},{"content":"The value supplied by hash_compare is 8.","pos":[2874,2914]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[2921,3159],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[3160,3249],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"content":"Example","pos":[3258,3265]},{"pos":[3269,3712],"content":"See examples for <bpt id=\"p1\">[</bpt>hash_map::hash_map<ept id=\"p1\">](../standard-library/hash-map-class.md#hash_map__hash_map)</ept>, <bpt id=\"p2\">[</bpt>hash_multimap::hash_multimap<ept id=\"p2\">](../standard-library/hash-multimap-class.md#hash_multimap__hash_multimap)</ept>, <bpt id=\"p3\">[</bpt>hash_set::hash_set<ept id=\"p3\">](../standard-library/hash-set-class.md#hash_set__hash_set)</ept>, and <bpt id=\"p4\">[</bpt>hash_multiset::hash_multiset<ept id=\"p4\">](../standard-library/hash-multiset-class.md#hash_multiset__hash_multiset)</ept>, for examples of how to declare and use hash_compare.","source":"See examples for [hash_map::hash_map](../standard-library/hash-map-class.md#hash_map__hash_map), [hash_multimap::hash_multimap](../standard-library/hash-multimap-class.md#hash_multimap__hash_multimap), [hash_set::hash_set](../standard-library/hash-set-class.md#hash_set__hash_set), and [hash_multiset::hash_multiset](../standard-library/hash-multiset-class.md#hash_multiset__hash_multiset), for examples of how to declare and use hash_compare."},{"content":"Requirements","pos":[3721,3733]},{"pos":[3737,3759],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> &lt;hash_map&gt;","source":"**Header:** <hash_map>"},{"pos":[3766,3787],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> stdext","source":"**Namespace:** stdext"},{"content":"See Also","pos":[3796,3804]},{"content":"Thread Safety in the C++ Standard Library","pos":[3809,3850]},{"content":"C++ Standard Library Reference","pos":[3923,3953]}],"content":"---\ntitle: \"hash_compare Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"hash_set/stdext::hash_compare\"\n  - \"std.hash_compare\"\n  - \"hash_compare\"\n  - \"std::hash_compare\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"hash_compare class\"\nms.assetid: d502bb59-de57-4585-beb9-00e3a998c0af\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# hash_compare Class\nThe template class describes an object that can be used by any of the hash associative containers — hash_map, hash_multimap, hash_set, or hash_multiset — as a default **Traits** parameter object to order and hash the elements they contain.  \n  \n## Syntax  \n  \nclass hash_compare\n   {\n   Traits comp;\n   public:\n   const size_t bucket_size = 4;\n   const size_t min_buckets = 8;\n   hash_compare();\n   hash_compare(Traits pred);\n   size_t operator()(const Key& key) const;\n   bool operator()(\n   const Key& key1,\n   const Key& key2) const;\n   };  \n  \n## Remarks  \n Each hash associative container stores a hash traits object of type **Traits** (a template parameter). You can derive a class from a specialization of hash_compare to selectively override certain functions and objects, or you can supply your own version of this class if you meet certain minimum requirements. Specifically, for an object hash_comp of type **hash_compare\\<Key, Traits>**, the following behavior is required by the above containers:  \n  \n-   For all values `key` of type **Key**, the call **hash_comp**( `key`) serves as a hash function, which yields a distribution of values of type **size_t**. The function supplied by hash_compare returns `key`.  \n  \n-   For any value `key1` of type **Key** that precedes `key2` in the sequence and has the same hash value (value returned by the hash function), **hash_comp**( `key2`, `key1`) is false. The function must impose a total ordering on values of type **Key**. The function supplied by hash_compare returns *comp*( `key2`, `key1`) `,` where *comp* is a stored object of type **Traits** that you can specify when you construct the object hash_comp. For the default **Traits** parameter type **less\\<Key>**, sort keys never decrease in value.  \n  \n-   The integer constant **bucket_size** specifies the mean number of elements per \"bucket\" (hash-table entry) that the container should try not to exceed. It must be greater than zero. The value supplied by hash_compare is 4.  \n  \n-   The integer constant **min_buckets** specifies the minimum number of buckets to maintain in the hash table. It must be a power of two and greater than zero. The value supplied by hash_compare is 8.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n## Example  \n See examples for [hash_map::hash_map](../standard-library/hash-map-class.md#hash_map__hash_map), [hash_multimap::hash_multimap](../standard-library/hash-multimap-class.md#hash_multimap__hash_multimap), [hash_set::hash_set](../standard-library/hash-set-class.md#hash_set__hash_set), and [hash_multiset::hash_multiset](../standard-library/hash-multiset-class.md#hash_multiset__hash_multiset), for examples of how to declare and use hash_compare.  \n  \n## Requirements  \n **Header:** <hash_map>  \n  \n **Namespace:** stdext  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}