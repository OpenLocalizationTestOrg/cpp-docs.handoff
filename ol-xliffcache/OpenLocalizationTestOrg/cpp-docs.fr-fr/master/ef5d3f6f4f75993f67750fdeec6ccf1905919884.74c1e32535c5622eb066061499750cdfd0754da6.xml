{"nodes":[{"pos":[12,41],"content":"Addition (+) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Addition (+) | Microsoft Docs","pos":[0,29]}]},{"content":"Addition (+)","pos":[583,595]},{"content":"The addition operator (<bpt id=\"p1\">**</bpt><ph id=\"ph1\">+</ph><ept id=\"p1\">**</ept>) causes its two operands to be added.","pos":[596,662],"source":"The addition operator (**+**) causes its two operands to be added."},{"content":"Both operands can be either integral or floating types, or one operand can be a pointer and the other an integer.","pos":[663,776]},{"content":"When an integer is added to a pointer, the integer value (<bpt id=\"p1\">*</bpt>i<ept id=\"p1\">*</ept>) is converted by multiplying it by the size of the value that the pointer addresses.","pos":[783,929],"source":"When an integer is added to a pointer, the integer value (*i*) is converted by multiplying it by the size of the value that the pointer addresses."},{"content":"After conversion, the integer value represents <bpt id=\"p1\">*</bpt>i<ept id=\"p1\">*</ept> memory positions, where each position has the length specified by the pointer type.","pos":[930,1064],"source":" After conversion, the integer value represents *i* memory positions, where each position has the length specified by the pointer type."},{"content":"When the converted integer value is added to the pointer value, the result is a new pointer value representing the address <bpt id=\"p1\">*</bpt>i<ept id=\"p1\">*</ept> positions from the original address.","pos":[1065,1228],"source":" When the converted integer value is added to the pointer value, the result is a new pointer value representing the address *i* positions from the original address."},{"content":"The new pointer value addresses a value of the same type as the original pointer value and therefore is the same as array indexing (see <bpt id=\"p1\">[</bpt>One-Dimensional Arrays<ept id=\"p1\">](../c-language/one-dimensional-arrays.md)</ept> and <bpt id=\"p2\">[</bpt>Multidimensional Arrays<ept id=\"p2\">](../c-language/multidimensional-arrays-c.md)</ept>).","pos":[1229,1506],"source":" The new pointer value addresses a value of the same type as the original pointer value and therefore is the same as array indexing (see [One-Dimensional Arrays](../c-language/one-dimensional-arrays.md) and [Multidimensional Arrays](../c-language/multidimensional-arrays-c.md))."},{"content":"If the sum pointer points outside the array, except at the first location beyond the high end, the result is undefined.","pos":[1507,1626]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Pointer Arithmetic<ept id=\"p1\">](../c-language/pointer-arithmetic.md)</ept>.","pos":[1627,1711],"source":" For more information, see [Pointer Arithmetic](../c-language/pointer-arithmetic.md)."},{"content":"See Also","pos":[1720,1728]},{"content":"C Additive Operators","pos":[1733,1753]}],"content":"---\ntitle: \"Addition (+) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"pointers, adding integers\"\nms.assetid: b9014fee-825d-46ef-91db-5d46807081fc\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Addition (+)\nThe addition operator (**+**) causes its two operands to be added. Both operands can be either integral or floating types, or one operand can be a pointer and the other an integer.  \n  \n When an integer is added to a pointer, the integer value (*i*) is converted by multiplying it by the size of the value that the pointer addresses. After conversion, the integer value represents *i* memory positions, where each position has the length specified by the pointer type. When the converted integer value is added to the pointer value, the result is a new pointer value representing the address *i* positions from the original address. The new pointer value addresses a value of the same type as the original pointer value and therefore is the same as array indexing (see [One-Dimensional Arrays](../c-language/one-dimensional-arrays.md) and [Multidimensional Arrays](../c-language/multidimensional-arrays-c.md)). If the sum pointer points outside the array, except at the first location beyond the high end, the result is undefined. For more information, see [Pointer Arithmetic](../c-language/pointer-arithmetic.md).  \n  \n## See Also  \n [C Additive Operators](../c-language/c-additive-operators.md)"}