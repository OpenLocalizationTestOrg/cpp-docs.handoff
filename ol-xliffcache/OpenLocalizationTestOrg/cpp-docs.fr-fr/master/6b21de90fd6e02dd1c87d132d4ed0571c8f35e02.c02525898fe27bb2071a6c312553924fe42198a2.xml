{"nodes":[{"pos":[12,47],"content":"otification Hooks | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"otification Hooks | Microsoft Docs","pos":[0,34]}]},{"content":"Notification Hooks","pos":[599,617]},{"content":"The notification hooks are called just before the following actions are taken in the helper routine:","pos":[618,718]},{"content":"The stored handle to the library is checked to see if it has already been loaded.","pos":[728,809]},{"pos":[819,876],"content":"<bpt id=\"p1\">**</bpt>LoadLibrary<ept id=\"p1\">**</ept> is called to attempt the load of the DLL.","source":"**LoadLibrary** is called to attempt the load of the DLL."},{"pos":[886,962],"content":"<bpt id=\"p1\">**</bpt>GetProcAddress<ept id=\"p1\">**</ept> is called to attempt to get the address of the procedure.","source":"**GetProcAddress** is called to attempt to get the address of the procedure."},{"content":"Return to the delay import load thunk.","pos":[972,1010]},{"content":"The notification hook is enabled:","pos":[1017,1050]},{"pos":[1060,1211],"content":"By supplying a new definition of the pointer <bpt id=\"p1\">**</bpt>__pfnDliNotifyHook2<ept id=\"p1\">**</ept> that is initialized to point to your own function that receives the notifications.","source":"By supplying a new definition of the pointer **__pfnDliNotifyHook2** that is initialized to point to your own function that receives the notifications."},{"content":"-or-","pos":[1222,1226]},{"pos":[1236,1367],"content":"By setting the pointer <bpt id=\"p1\">**</bpt>__pfnDliNotifyHook2<ept id=\"p1\">**</ept> to your hook function before any calls to the DLL that the program is delay loading.","source":"By setting the pointer **__pfnDliNotifyHook2** to your hook function before any calls to the DLL that the program is delay loading."},{"pos":[1374,1450],"content":"If the notification is <bpt id=\"p1\">**</bpt>dliStartProcessing<ept id=\"p1\">**</ept>, the hook function can return:","source":"If the notification is **dliStartProcessing**, the hook function can return:"},{"pos":[1457,1576],"content":"NULL  \nThe default helper handles the loading of the DLL. This is useful to be called just for informational purposes.","leadings":[""," "],"nodes":[{"content":"NULL","pos":[0,4]},{"content":"The default helper handles the loading of the DLL. This is useful to be called just for informational purposes.","pos":[7,118],"nodes":[{"content":"The default helper handles the loading of the DLL.","pos":[0,50]},{"content":"This is useful to be called just for informational purposes.","pos":[51,111]}]}]},{"pos":[1583,1686],"content":"function pointer  \nBypass the default delay-load handling. This lets you supply your own load handler.","leadings":[""," "],"nodes":[{"content":"function pointer","pos":[0,16]},{"content":"Bypass the default delay-load handling. This lets you supply your own load handler.","pos":[19,102],"nodes":[{"content":"Bypass the default delay-load handling.","pos":[0,39]},{"content":"This lets you supply your own load handler.","pos":[40,83]}]}]},{"pos":[1693,1772],"content":"If the notification is <bpt id=\"p1\">**</bpt>dliNotePreLoadLibrary<ept id=\"p1\">**</ept>, the hook function can return:","source":"If the notification is **dliNotePreLoadLibrary**, the hook function can return:"},{"content":"0, if it just wants informational notifications.","pos":[1782,1830]},{"content":"The HMODULE for the loaded DLL, if it loaded the DLL itself.","pos":[1840,1900]},{"pos":[1907,1989],"content":"If the notification is <bpt id=\"p1\">**</bpt>dliNotePreGetProcAddress<ept id=\"p1\">**</ept>, the hook function can return:","source":"If the notification is **dliNotePreGetProcAddress**, the hook function can return:"},{"content":"0, if it just wants informational notifications.","pos":[1999,2047]},{"content":"The imported function's address, if the hook function gets the address itself.","pos":[2057,2135]},{"pos":[2142,2235],"content":"If the notification is <bpt id=\"p1\">**</bpt>dliNoteEndProcessing<ept id=\"p1\">**</ept>, the hook function's return value is ignored.","source":"If the notification is **dliNoteEndProcessing**, the hook function's return value is ignored."},{"content":"If this pointer is initialized (nonzero), the delay load helper will invoke the function at certain notification points throughout its execution.","pos":[2242,2387]},{"content":"The function pointer has the following definition:","pos":[2388,2438]},{"content":"The notifications pass in a <bpt id=\"p1\">**</bpt>DelayLoadInfo<ept id=\"p1\">**</ept> structure to the hook function along with the notification value.","pos":[2959,3070],"source":"The notifications pass in a **DelayLoadInfo** structure to the hook function along with the notification value."},{"content":"This data is identical to that used by the delay load helper routine.","pos":[3071,3140]},{"content":"The notification value will be one of the values defined in <bpt id=\"p1\">[</bpt>Structure and Constant Definitions<ept id=\"p1\">](../../build/reference/structure-and-constant-definitions.md)</ept>.","pos":[3141,3299],"source":" The notification value will be one of the values defined in [Structure and Constant Definitions](../../build/reference/structure-and-constant-definitions.md)."},{"content":"See Also","pos":[3308,3316]},{"content":"Error Handling and Notification","pos":[3321,3352]}],"content":"---\ntitle: \"Notification Hooks | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"delayed loading of DLLs, notification hooks\"\nms.assetid: e9c291ed-2f2d-4319-a171-09800625256f\ncaps.latest.revision: 7\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Notification Hooks\nThe notification hooks are called just before the following actions are taken in the helper routine:  \n  \n-   The stored handle to the library is checked to see if it has already been loaded.  \n  \n-   **LoadLibrary** is called to attempt the load of the DLL.  \n  \n-   **GetProcAddress** is called to attempt to get the address of the procedure.  \n  \n-   Return to the delay import load thunk.  \n  \n The notification hook is enabled:  \n  \n-   By supplying a new definition of the pointer **__pfnDliNotifyHook2** that is initialized to point to your own function that receives the notifications.  \n  \n     -or-  \n  \n-   By setting the pointer **__pfnDliNotifyHook2** to your hook function before any calls to the DLL that the program is delay loading.  \n  \n If the notification is **dliStartProcessing**, the hook function can return:  \n  \n NULL  \n The default helper handles the loading of the DLL. This is useful to be called just for informational purposes.  \n  \n function pointer  \n Bypass the default delay-load handling. This lets you supply your own load handler.  \n  \n If the notification is **dliNotePreLoadLibrary**, the hook function can return:  \n  \n-   0, if it just wants informational notifications.  \n  \n-   The HMODULE for the loaded DLL, if it loaded the DLL itself.  \n  \n If the notification is **dliNotePreGetProcAddress**, the hook function can return:  \n  \n-   0, if it just wants informational notifications.  \n  \n-   The imported function's address, if the hook function gets the address itself.  \n  \n If the notification is **dliNoteEndProcessing**, the hook function's return value is ignored.  \n  \n If this pointer is initialized (nonzero), the delay load helper will invoke the function at certain notification points throughout its execution. The function pointer has the following definition:  \n  \n```  \n// The \"notify hook\" gets called for every call to the  \n// delay load helper.  This allows a user to hook every call and  \n// skip the delay load helper entirely.  \n//  \n// dliNotify == {  \n//  dliStartProcessing |  \n//  dliNotePreLoadLibrary  |  \n//  dliNotePreGetProc |  \n//  dliNoteEndProcessing}  \n//  on this call.  \n//  \nExternC  \nPfnDliHook   __pfnDliNotifyHook2;  \n  \n// This is the failure hook, dliNotify = {dliFailLoadLib|dliFailGetProc}  \nExternC  \nPfnDliHook   __pfnDliFailureHook2;  \n```  \n  \n The notifications pass in a **DelayLoadInfo** structure to the hook function along with the notification value. This data is identical to that used by the delay load helper routine. The notification value will be one of the values defined in [Structure and Constant Definitions](../../build/reference/structure-and-constant-definitions.md).  \n  \n## See Also  \n [Error Handling and Notification](../../build/reference/error-handling-and-notification.md)"}