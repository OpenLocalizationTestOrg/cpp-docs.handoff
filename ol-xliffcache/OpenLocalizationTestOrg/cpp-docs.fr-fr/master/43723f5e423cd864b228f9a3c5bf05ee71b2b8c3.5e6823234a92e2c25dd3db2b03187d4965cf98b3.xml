{"nodes":[{"pos":[12,48],"content":"basic_fstream Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"basic_fstream Class | Microsoft Docs","pos":[0,36]}]},{"pos":[693,712],"content":"basic_fstream Class","linkify":"basic_fstream Class","nodes":[{"content":"basic_fstream Class","pos":[0,19]}]},{"pos":[713,997],"content":"Describes an object that controls insertion and extraction of elements and encoded objects using a stream buffer of class <bpt id=\"p1\">[</bpt>basic_filebuf<ept id=\"p1\">](../standard-library/basic-filebuf-class.md)</ept><ph id=\"ph1\">&lt; </ph><ph id=\"ph2\">`Elem`</ph>, <ph id=\"ph3\">`Tr`</ph>&gt;, with elements of type <ph id=\"ph4\">`Elem`</ph>, whose character traits are determined by the class <ph id=\"ph5\">`Tr`</ph>.","source":"Describes an object that controls insertion and extraction of elements and encoded objects using a stream buffer of class [basic_filebuf](../standard-library/basic-filebuf-class.md)< `Elem`, `Tr`>, with elements of type `Elem`, whose character traits are determined by the class `Tr`."},{"pos":[1006,1012],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1148,1158],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The basic element of the file buffer.","pos":[1172,1209]},{"content":"The traits of the basic element of the file buffer (usually <ph id=\"ph1\">`char_traits`</ph><ph id=\"ph2\">&lt; </ph><ph id=\"ph3\">`Elem`</ph>&gt;).","pos":[1224,1308],"source":" The traits of the basic element of the file buffer (usually `char_traits`< `Elem`>)."},{"pos":[1317,1324],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1328,1396],"content":"The object stores an object of class <ph id=\"ph1\">`basic_filebuf`</ph><ph id=\"ph2\">&lt; </ph><ph id=\"ph3\">`Elem`</ph>, <ph id=\"ph4\">`Tr`</ph>&gt;.","source":"The object stores an object of class `basic_filebuf`< `Elem`, `Tr`>."},{"pos":[1404,1557],"content":"[!NOTE]\n The get pointer and put pointer of an fstream object are **NOT** independent of each other. If the get pointer moves, so does the put pointer.","leadings":["","> "],"nodes":[{"content":" The get pointer and put pointer of an fstream object are **NOT** independent of each other. If the get pointer moves, so does the put pointer.","pos":[8,151],"nodes":[{"content":"The get pointer and put pointer of an fstream object are <bpt id=\"p1\">**</bpt>NOT<ept id=\"p1\">**</ept> independent of each other.","pos":[1,92],"source":" The get pointer and put pointer of an fstream object are **NOT** independent of each other."},{"content":"If the get pointer moves, so does the put pointer.","pos":[93,143]}]}]},{"pos":[1566,1573],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1577,1688],"content":"The following example demonstrates how to create a <ph id=\"ph1\">`basic_fstream`</ph> object that can be read from and written to.","source":"The following example demonstrates how to create a `basic_fstream` object that can be read from and written to."},{"pos":[2315,2327],"content":"Constructors","linkify":"Constructors","nodes":[{"content":"Constructors","pos":[0,12]}]},{"pos":[2348,2394],"content":"<bpt id=\"p1\">[</bpt>basic_fstream<ept id=\"p1\">](#basic_fstream__basic_fstream)</ept>","source":"[basic_fstream](#basic_fstream__basic_fstream)"},{"pos":[2395,2440],"content":"Constructs an object of type <ph id=\"ph1\">`basic_fstream`</ph>.","source":"Constructs an object of type `basic_fstream`."},{"pos":[2451,2467],"content":"Member Functions","linkify":"Member Functions","nodes":[{"content":"Member Functions","pos":[0,16]}]},{"pos":[2488,2518],"content":"<bpt id=\"p1\">[</bpt>close<ept id=\"p1\">](#basic_fstream__close)</ept>","source":"[close](#basic_fstream__close)"},{"content":"Closes a file.","pos":[2519,2533]},{"pos":[2538,2572],"content":"<bpt id=\"p1\">[</bpt>is_open<ept id=\"p1\">](#basic_fstream__is_open)</ept>","source":"[is_open](#basic_fstream__is_open)"},{"content":"Determines if a file is open.","pos":[2573,2602]},{"pos":[2607,2635],"content":"<bpt id=\"p1\">[</bpt>open<ept id=\"p1\">](#basic_fstream__open)</ept>","source":"[open](#basic_fstream__open)"},{"content":"Opens a file.","pos":[2636,2649]},{"pos":[2654,2684],"content":"<bpt id=\"p1\">[</bpt>rdbuf<ept id=\"p1\">](#basic_fstream__rdbuf)</ept>","source":"[rdbuf](#basic_fstream__rdbuf)"},{"pos":[2685,2828],"content":"Returns the address of the stored stream buffer, of type pointer to <bpt id=\"p1\">[</bpt>basic_filebuf<ept id=\"p1\">](../standard-library/basic-filebuf-class.md)</ept><ph id=\"ph1\">&lt; </ph><ph id=\"ph2\">`Elem`</ph>, <ph id=\"ph3\">`Tr`</ph>&gt;.","source":"Returns the address of the stored stream buffer, of type pointer to [basic_filebuf](../standard-library/basic-filebuf-class.md)< `Elem`, `Tr`>."},{"pos":[2833,2861],"content":"<bpt id=\"p1\">[</bpt>swap<ept id=\"p1\">](#basic_fstream__swap)</ept>","source":"[swap](#basic_fstream__swap)"},{"pos":[2862,2950],"content":"Exchanges the content of this object with the content of another <ph id=\"ph1\">`basic_fstream`</ph> object.","source":"Exchanges the content of this object with the content of another `basic_fstream` object."},{"pos":[2960,2972],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2976,2998],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>fstream&gt;","source":"**Header:** \\<fstream>"},{"pos":[3005,3023],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[3033,3106],"content":"<bpt id=\"p1\">&lt;a name=\"basic_fstream__basic_fstream\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  basic_fstream::basic_fstream","linkify":"<a name=\"basic_fstream__basic_fstream\"></a>  basic_fstream::basic_fstream","source":"<a name=\"basic_fstream__basic_fstream\"></a>  basic_fstream::basic_fstream"},{"pos":[3110,3155],"content":"Constructs an object of type <ph id=\"ph1\">`basic_fstream`</ph>.","source":"Constructs an object of type `basic_fstream`."},{"pos":[3559,3569],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The name of the file to open.","pos":[3588,3617]},{"content":"One of the enumerations in <bpt id=\"p1\">[</bpt>ios_base::openmode<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__openmode)</ept>.","pos":[3635,3741],"source":" One of the enumerations in [ios_base::openmode](../standard-library/ios-base-class.md#ios_base__openmode)."},{"content":"The default file opening protection, equivalent to the <ph id=\"ph1\">`shflag`</ph> parameter in <bpt id=\"p1\">[</bpt>_fsopen, _wfsopen<ept id=\"p1\">](../c-runtime-library/reference/fsopen-wfsopen.md)</ept>.","pos":[3759,3906],"source":" The default file opening protection, equivalent to the `shflag` parameter in [_fsopen, _wfsopen](../c-runtime-library/reference/fsopen-wfsopen.md)."},{"pos":[3916,3923],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The first constructor initializes the base class by calling <bpt id=\"p1\">[</bpt>basic_iostream<ept id=\"p1\">](../standard-library/basic-iostream-class.md)</ept>( <bpt id=\"p2\">**</bpt>sb<ept id=\"p2\">**</ept>), where <bpt id=\"p3\">**</bpt>sb<ept id=\"p3\">**</ept> is the stored object of class <bpt id=\"p4\">[</bpt>basic_filebuf<ept id=\"p4\">](../standard-library/basic-filebuf-class.md)</ept><ph id=\"ph1\">\\&lt;</ph> <bpt id=\"p5\">**</bpt>Elem<ept id=\"p5\">**</ept>, <bpt id=\"p6\">**</bpt>Tr<ept id=\"p6\">**</ept>&gt;.","pos":[3927,4182],"source":"The first constructor initializes the base class by calling [basic_iostream](../standard-library/basic-iostream-class.md)( **sb**), where **sb** is the stored object of class [basic_filebuf](../standard-library/basic-filebuf-class.md)\\< **Elem**, **Tr**>."},{"content":"It also initializes <bpt id=\"p1\">**</bpt>sb<ept id=\"p1\">**</ept> by calling <ph id=\"ph1\">`basic_filebuf`</ph><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p2\">**</bpt>Elem<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Tr<ept id=\"p3\">**</ept>&gt;.","pos":[4183,4257],"source":" It also initializes **sb** by calling `basic_filebuf`\\< **Elem**, **Tr**>."},{"content":"The second and third constructors initializes the base class by calling <ph id=\"ph1\">`basic_iostream`</ph>( <bpt id=\"p1\">**</bpt>sb<ept id=\"p1\">**</ept>).","pos":[4264,4362],"source":"The second and third constructors initializes the base class by calling `basic_iostream`( **sb**)."},{"content":"It also initializes <bpt id=\"p1\">**</bpt>sb<ept id=\"p1\">**</ept> by calling <ph id=\"ph1\">`basic_filebuf`</ph><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p2\">**</bpt>Elem<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Tr<ept id=\"p3\">**</ept>&gt;, and then <bpt id=\"p4\">**</bpt>sb.<ept id=\"p4\">**</ept><bpt id=\"p5\">[</bpt>open<ept id=\"p5\">](../standard-library/basic-filebuf-class.md#basic_filebuf__open)</ept>(_ <bpt id=\"p6\">*</bpt>Filename<ept id=\"p6\">*</ept>, <ph id=\"ph3\">`_Mode`</ph>).","pos":[4363,4548],"source":" It also initializes **sb** by calling `basic_filebuf`\\< **Elem**, **Tr**>, and then **sb.**[open](../standard-library/basic-filebuf-class.md#basic_filebuf__open)(_ *Filename*, `_Mode`)."},{"content":"If the latter function returns a null pointer, the constructor calls <bpt id=\"p1\">[</bpt>setstate<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__setstate)</ept>( <bpt id=\"p2\">**</bpt>failbit<ept id=\"p2\">**</ept>).","pos":[4549,4703],"source":" If the latter function returns a null pointer, the constructor calls [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( **failbit**)."},{"pos":[4710,4817],"content":"The fourth constructor initializes the object with the contents of <ph id=\"ph1\">`right`</ph>, treated as an rvalue reference.","source":"The fourth constructor initializes the object with the contents of `right`, treated as an rvalue reference."},{"pos":[4827,4834],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4839,4943],"content":"See <bpt id=\"p1\">[</bpt>streampos<ept id=\"p1\">](../standard-library/ios-typedefs.md#streampos)</ept> for an example that uses <ph id=\"ph1\">`basic_fstream`</ph>.","source":"See [streampos](../standard-library/ios-typedefs.md#streampos) for an example that uses `basic_fstream`."},{"pos":[4953,5010],"content":"<bpt id=\"p1\">&lt;a name=\"basic_fstream__close\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  basic_fstream::close","linkify":"<a name=\"basic_fstream__close\"></a>  basic_fstream::close","source":"<a name=\"basic_fstream__close\"></a>  basic_fstream::close"},{"content":"Closes a file.","pos":[5014,5028]},{"pos":[5067,5074],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5078,5214],"content":"The member function calls <bpt id=\"p1\">[</bpt>rdbuf<ept id=\"p1\">](#basic_fstream__rdbuf)</ept><bpt id=\"p2\">**</bpt><ph id=\"ph1\">-&gt;</ph><ept id=\"p2\">**</ept> <bpt id=\"p3\">[</bpt>close<ept id=\"p3\">](../standard-library/basic-filebuf-class.md#basic_filebuf__close)</ept>.","source":"The member function calls [rdbuf](#basic_fstream__rdbuf)**->** [close](../standard-library/basic-filebuf-class.md#basic_filebuf__close)."},{"pos":[5224,5231],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5236,5367],"content":"See <bpt id=\"p1\">[</bpt>basic_filebuf::close<ept id=\"p1\">](../standard-library/basic-filebuf-class.md#basic_filebuf__close)</ept> for an example of how to use <bpt id=\"p2\">**</bpt>close<ept id=\"p2\">**</ept>.","source":"See [basic_filebuf::close](../standard-library/basic-filebuf-class.md#basic_filebuf__close) for an example of how to use **close**."},{"pos":[5377,5438],"content":"<bpt id=\"p1\">&lt;a name=\"basic_fstream__is_open\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  basic_fstream::is_open","linkify":"<a name=\"basic_fstream__is_open\"></a>  basic_fstream::is_open","source":"<a name=\"basic_fstream__is_open\"></a>  basic_fstream::is_open"},{"content":"Determines if a file is open.","pos":[5442,5471]},{"pos":[5518,5530],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5534,5584],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the file is open, <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> otherwise.","source":"**true** if the file is open, **false** otherwise."},{"pos":[5594,5601],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5605,5746],"content":"The member function returns <bpt id=\"p1\">[</bpt>rdbuf<ept id=\"p1\">](#basic_fstream__rdbuf)</ept><bpt id=\"p2\">**</bpt><ph id=\"ph1\">-&gt;</ph><ept id=\"p2\">**</ept><bpt id=\"p3\">[</bpt>is_open<ept id=\"p3\">](../standard-library/basic-filebuf-class.md#basic_filebuf__is_open)</ept>.","source":"The member function returns [rdbuf](#basic_fstream__rdbuf)**->**[is_open](../standard-library/basic-filebuf-class.md#basic_filebuf__is_open)."},{"pos":[5756,5763],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5768,5903],"content":"See <bpt id=\"p1\">[</bpt>basic_filebuf::is_open<ept id=\"p1\">](../standard-library/basic-filebuf-class.md#basic_filebuf__is_open)</ept> for an example of how to use <ph id=\"ph1\">`is_open`</ph>.","source":"See [basic_filebuf::is_open](../standard-library/basic-filebuf-class.md#basic_filebuf__is_open) for an example of how to use `is_open`."},{"pos":[5913,5968],"content":"<bpt id=\"p1\">&lt;a name=\"basic_fstream__open\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  basic_fstream::open","linkify":"<a name=\"basic_fstream__open\"></a>  basic_fstream::open","source":"<a name=\"basic_fstream__open\"></a>  basic_fstream::open"},{"content":"Opens a file.","pos":[5972,5985]},{"pos":[6453,6463],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The name of the file to open.","pos":[6482,6511]},{"content":"One of the enumerations in <bpt id=\"p1\">[</bpt>ios_base::openmode<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__openmode)</ept>.","pos":[6529,6635],"source":" One of the enumerations in [ios_base::openmode](../standard-library/ios-base-class.md#ios_base__openmode)."},{"content":"The default file opening protection, equivalent to the <ph id=\"ph1\">`shflag`</ph> parameter in <bpt id=\"p1\">[</bpt>_fsopen, _wfsopen<ept id=\"p1\">](../c-runtime-library/reference/fsopen-wfsopen.md)</ept>.","pos":[6653,6800],"source":" The default file opening protection, equivalent to the `shflag` parameter in [_fsopen, _wfsopen](../c-runtime-library/reference/fsopen-wfsopen.md)."},{"pos":[6810,6817],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The member function calls <bpt id=\"p1\">[</bpt>rdbuf<ept id=\"p1\">](#basic_fstream__rdbuf)</ept> <bpt id=\"p2\">**</bpt><ph id=\"ph1\">-&gt;</ph><ept id=\"p2\">**</ept> <bpt id=\"p3\">[</bpt>open<ept id=\"p3\">](../standard-library/basic-filebuf-class.md#basic_filebuf__open)</ept>(_ <bpt id=\"p4\">*</bpt>Filename<ept id=\"p4\">*</ept>, <ph id=\"ph2\">`_Mode`</ph>).","pos":[6821,6979],"source":"The member function calls [rdbuf](#basic_fstream__rdbuf) **->** [open](../standard-library/basic-filebuf-class.md#basic_filebuf__open)(_ *Filename*, `_Mode`)."},{"content":"If that function returns a null pointer, the function calls <bpt id=\"p1\">[</bpt>setstate<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__setstate)</ept>( <bpt id=\"p2\">**</bpt>failbit<ept id=\"p2\">**</ept>).","pos":[6980,7125],"source":" If that function returns a null pointer, the function calls [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( **failbit**)."},{"pos":[7135,7142],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7147,7275],"content":"See <bpt id=\"p1\">[</bpt>basic_filebuf::open<ept id=\"p1\">](../standard-library/basic-filebuf-class.md#basic_filebuf__open)</ept> for an example of how to use <bpt id=\"p2\">**</bpt>open<ept id=\"p2\">**</ept>.","source":"See [basic_filebuf::open](../standard-library/basic-filebuf-class.md#basic_filebuf__open) for an example of how to use **open**."},{"pos":[7285,7352],"content":"<bpt id=\"p1\">&lt;a name=\"basic_fstream__operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  basic_fstream::operator=","linkify":"<a name=\"basic_fstream__operator_eq\"></a>  basic_fstream::operator=","source":"<a name=\"basic_fstream__operator_eq\"></a>  basic_fstream::operator="},{"content":"Assigns to this object the content from a specified stream object.","pos":[7356,7422]},{"content":"This is a move assignment that involves an rvalue that does not leave a copy behind.","pos":[7423,7507]},{"pos":[7581,7591],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An lvalue reference to a <ph id=\"ph1\">`basic_fstream`</ph> object.","pos":[7607,7655],"source":" An lvalue reference to a `basic_fstream` object."},{"pos":[7665,7677],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7681,7697],"content":"Returns <ph id=\"ph1\">`*this`</ph>.","source":"Returns `*this`."},{"pos":[7707,7714],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7718,7840],"content":"The member operator replaces the contents of the object by using the contents of <ph id=\"ph1\">` right`</ph>, treated as an rvalue reference.","source":"The member operator replaces the contents of the object by using the contents of ` right`, treated as an rvalue reference."},{"pos":[7850,7907],"content":"<bpt id=\"p1\">&lt;a name=\"basic_fstream__rdbuf\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  basic_fstream::rdbuf","linkify":"<a name=\"basic_fstream__rdbuf\"></a>  basic_fstream::rdbuf","source":"<a name=\"basic_fstream__rdbuf\"></a>  basic_fstream::rdbuf"},{"pos":[7911,8059],"content":"Returns the address of the stored stream buffer, of type pointer to <bpt id=\"p1\">[</bpt>basic_filebuf<ept id=\"p1\">](../standard-library/basic-filebuf-class.md)</ept><ph id=\"ph1\">\\&lt;</ph> <bpt id=\"p2\">**</bpt>Elem<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Tr<ept id=\"p3\">**</ept>&gt;.","source":"Returns the address of the stored stream buffer, of type pointer to [basic_filebuf](../standard-library/basic-filebuf-class.md)\\< **Elem**, **Tr**>."},{"pos":[8124,8136],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The address of the stored stream buffer.","pos":[8140,8180]},{"pos":[8190,8197],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8202,8331],"content":"See <bpt id=\"p1\">[</bpt>basic_filebuf::close<ept id=\"p1\">](../standard-library/basic-filebuf-class.md#basic_filebuf__close)</ept> for an example of how to use <ph id=\"ph1\">`rdbuf`</ph>.","source":"See [basic_filebuf::close](../standard-library/basic-filebuf-class.md#basic_filebuf__close) for an example of how to use `rdbuf`."},{"pos":[8341,8396],"content":"<bpt id=\"p1\">&lt;a name=\"basic_fstream__swap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  basic_fstream::swap","linkify":"<a name=\"basic_fstream__swap\"></a>  basic_fstream::swap","source":"<a name=\"basic_fstream__swap\"></a>  basic_fstream::swap"},{"pos":[8400,8454],"content":"Exchanges the contents of two <ph id=\"ph1\">`basic_fstream`</ph> objects.","source":"Exchanges the contents of two `basic_fstream` objects."},{"pos":[8512,8522],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An <ph id=\"ph1\">`lvalue`</ph> reference to a <ph id=\"ph2\">`basic_fstream`</ph> object.","pos":[8538,8588],"source":" An `lvalue` reference to a `basic_fstream` object."},{"pos":[8598,8605],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8609,8696],"content":"The member function exchanges the contents of this object and the contents of <ph id=\"ph1\">` right`</ph>.","source":"The member function exchanges the contents of this object and the contents of ` right`."},{"pos":[8705,8713],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept><ph id=\"ph1\"> </ph>","pos":[8717,8827],"source":"[Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md) "},{"content":"<bpt id=\"p1\"> [</bpt>iostream Programming<ept id=\"p1\">](../standard-library/iostream-programming.md)</ept><ph id=\"ph1\"> </ph>","pos":[8830,8899],"source":" [iostream Programming](../standard-library/iostream-programming.md) "},{"content":"<bpt id=\"p1\"> [</bpt>iostreams Conventions<ept id=\"p1\">](../standard-library/iostreams-conventions.md)</ept>","pos":[8902,8972],"source":" [iostreams Conventions](../standard-library/iostreams-conventions.md)"}],"content":"---\ntitle: \"basic_fstream Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std::basic_fstream\"\n  - \"basic_fstream\"\n  - \"fstream/std::basic_fstream\"\n  - \"std.basic_fstream\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"basic_fstream class\"\nms.assetid: 8473817e-42a4-430b-82b8-b476c86bcf8a\ncaps.latest.revision: 24\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# basic_fstream Class\nDescribes an object that controls insertion and extraction of elements and encoded objects using a stream buffer of class [basic_filebuf](../standard-library/basic-filebuf-class.md)< `Elem`, `Tr`>, with elements of type `Elem`, whose character traits are determined by the class `Tr`.  \n  \n## Syntax  \n  \n```  \ntemplate <class Elem, class Tr = char_traits<Elem>>  \nclass basic_fstream : public basic_iostream<Elem, Tr>  \n```  \n  \n#### Parameters  \n `Elem`  \n The basic element of the file buffer.  \n  \n `Tr`  \n The traits of the basic element of the file buffer (usually `char_traits`< `Elem`>).  \n  \n## Remarks  \n The object stores an object of class `basic_filebuf`< `Elem`, `Tr`>.  \n  \n> [!NOTE]\n>  The get pointer and put pointer of an fstream object are **NOT** independent of each other. If the get pointer moves, so does the put pointer.  \n  \n## Example  \n The following example demonstrates how to create a `basic_fstream` object that can be read from and written to.  \n  \n```  \n// basic_fstream_class.cpp  \n// compile with: /EHsc  \n  \n#include <fstream>  \n#include <iostream>  \n  \nusing namespace std;  \n  \nint main(int argc, char **argv)  \n{  \n    fstream fs(\"fstream.txt\", ios::in | ios::out | ios::trunc);  \n    if (!fs.bad())  \n    {  \n        // Write to the file.  \n        fs << \"Writing to a basic_fstream object...\" << endl;  \n        fs.close();  \n  \n        // Dump the contents of the file to cout.  \n        fs.open(\"fstream.txt\", ios::in);  \n        cout << fs.rdbuf();  \n        fs.close();  \n    }  \n}  \n```  \n  \n```Output  \nWriting to a basic_fstream object...  \n```  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[basic_fstream](#basic_fstream__basic_fstream)|Constructs an object of type `basic_fstream`.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[close](#basic_fstream__close)|Closes a file.|  \n|[is_open](#basic_fstream__is_open)|Determines if a file is open.|  \n|[open](#basic_fstream__open)|Opens a file.|  \n|[rdbuf](#basic_fstream__rdbuf)|Returns the address of the stored stream buffer, of type pointer to [basic_filebuf](../standard-library/basic-filebuf-class.md)< `Elem`, `Tr`>.|  \n|[swap](#basic_fstream__swap)|Exchanges the content of this object with the content of another `basic_fstream` object.|  \n  \n## Requirements  \n **Header:** \\<fstream>  \n  \n **Namespace:** std  \n  \n##  <a name=\"basic_fstream__basic_fstream\"></a>  basic_fstream::basic_fstream  \n Constructs an object of type `basic_fstream`.  \n  \n```  \nbasic_fstream();\n\nexplicit basic_fstream(\n    const char* _Filename,  \n    ios_base::openmode _Mode = ios_base::in | ios_base::out,  \n    int _Prot = (int)ios_base::_Openprot);\n\nexplicit basic_fstream(\n    const wchar_t* _Filename,  \n    ios_base::openmode _Mode = ios_base::in | ios_base::out,  \n    int _Prot = (int)ios_base::_Openprot);\n\nbasic_fstream(basic_fstream&& right);\n```  \n  \n### Parameters  \n `_Filename`  \n The name of the file to open.  \n  \n `_Mode`  \n One of the enumerations in [ios_base::openmode](../standard-library/ios-base-class.md#ios_base__openmode).  \n  \n `_Prot`  \n The default file opening protection, equivalent to the `shflag` parameter in [_fsopen, _wfsopen](../c-runtime-library/reference/fsopen-wfsopen.md).  \n  \n### Remarks  \n The first constructor initializes the base class by calling [basic_iostream](../standard-library/basic-iostream-class.md)( **sb**), where **sb** is the stored object of class [basic_filebuf](../standard-library/basic-filebuf-class.md)\\< **Elem**, **Tr**>. It also initializes **sb** by calling `basic_filebuf`\\< **Elem**, **Tr**>.  \n  \n The second and third constructors initializes the base class by calling `basic_iostream`( **sb**). It also initializes **sb** by calling `basic_filebuf`\\< **Elem**, **Tr**>, and then **sb.**[open](../standard-library/basic-filebuf-class.md#basic_filebuf__open)(_ *Filename*, `_Mode`). If the latter function returns a null pointer, the constructor calls [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( **failbit**).  \n  \n The fourth constructor initializes the object with the contents of `right`, treated as an rvalue reference.  \n  \n### Example  \n  See [streampos](../standard-library/ios-typedefs.md#streampos) for an example that uses `basic_fstream`.  \n  \n##  <a name=\"basic_fstream__close\"></a>  basic_fstream::close  \n Closes a file.  \n  \n```  \nvoid close();\n```  \n  \n### Remarks  \n The member function calls [rdbuf](#basic_fstream__rdbuf)**->** [close](../standard-library/basic-filebuf-class.md#basic_filebuf__close).  \n  \n### Example  \n  See [basic_filebuf::close](../standard-library/basic-filebuf-class.md#basic_filebuf__close) for an example of how to use **close**.  \n  \n##  <a name=\"basic_fstream__is_open\"></a>  basic_fstream::is_open  \n Determines if a file is open.  \n  \n```  \nbool is_open() const;\n```  \n  \n### Return Value  \n **true** if the file is open, **false** otherwise.  \n  \n### Remarks  \n The member function returns [rdbuf](#basic_fstream__rdbuf)**->**[is_open](../standard-library/basic-filebuf-class.md#basic_filebuf__is_open).  \n  \n### Example  \n  See [basic_filebuf::is_open](../standard-library/basic-filebuf-class.md#basic_filebuf__is_open) for an example of how to use `is_open`.  \n  \n##  <a name=\"basic_fstream__open\"></a>  basic_fstream::open  \n Opens a file.  \n  \n```  \nvoid open(\n    const char* _Filename,  \n    ios_base::openmode _Mode = ios_base::in | ios_base::out,  \n    int _Prot = (int)ios_base::_Openprot);\n\nvoid open(\n    const char* _Filename,  \n    ios_base::openmode _Mode);\n\nvoid open(\n    const wchar_t* _Filename,  \n    ios_base::openmode _Mode = ios_base::in | ios_base::out,  \n    int _Prot = (int)ios_base::_Openprot);\n\nvoid open(\n    const wchar_t* _Filename,  \n    ios_base::openmode _Mode);\n```  \n  \n### Parameters  \n `_Filename`  \n The name of the file to open.  \n  \n `_Mode`  \n One of the enumerations in [ios_base::openmode](../standard-library/ios-base-class.md#ios_base__openmode).  \n  \n `_Prot`  \n The default file opening protection, equivalent to the `shflag` parameter in [_fsopen, _wfsopen](../c-runtime-library/reference/fsopen-wfsopen.md).  \n  \n### Remarks  \n The member function calls [rdbuf](#basic_fstream__rdbuf) **->** [open](../standard-library/basic-filebuf-class.md#basic_filebuf__open)(_ *Filename*, `_Mode`). If that function returns a null pointer, the function calls [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( **failbit**).  \n  \n### Example  \n  See [basic_filebuf::open](../standard-library/basic-filebuf-class.md#basic_filebuf__open) for an example of how to use **open**.  \n  \n##  <a name=\"basic_fstream__operator_eq\"></a>  basic_fstream::operator=  \n Assigns to this object the content from a specified stream object. This is a move assignment that involves an rvalue that does not leave a copy behind.  \n  \n```  \nbasic_fstream& operator=(basic_fstream&& right);\n```  \n  \n### Parameters  \n ` right`  \n An lvalue reference to a `basic_fstream` object.  \n  \n### Return Value  \n Returns `*this`.  \n  \n### Remarks  \n The member operator replaces the contents of the object by using the contents of ` right`, treated as an rvalue reference.  \n  \n##  <a name=\"basic_fstream__rdbuf\"></a>  basic_fstream::rdbuf  \n Returns the address of the stored stream buffer, of type pointer to [basic_filebuf](../standard-library/basic-filebuf-class.md)\\< **Elem**, **Tr**>.  \n  \n```  \nbasic_filebuf<Elem, Tr> *rdbuf() const \n```  \n  \n### Return Value  \n The address of the stored stream buffer.  \n  \n### Example  \n  See [basic_filebuf::close](../standard-library/basic-filebuf-class.md#basic_filebuf__close) for an example of how to use `rdbuf`.  \n  \n##  <a name=\"basic_fstream__swap\"></a>  basic_fstream::swap  \n Exchanges the contents of two `basic_fstream` objects.  \n  \n```  \nvoid swap(basic_fstream& right);\n```  \n  \n### Parameters  \n ` right`  \n An `lvalue` reference to a `basic_fstream` object.  \n  \n### Remarks  \n The member function exchanges the contents of this object and the contents of ` right`.  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [iostream Programming](../standard-library/iostream-programming.md)   \n [iostreams Conventions](../standard-library/iostreams-conventions.md)\n\n"}