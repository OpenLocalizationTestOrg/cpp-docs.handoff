{"nodes":[{"pos":[12,44],"content":"basic_ios Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"basic_ios Class | Microsoft Docs","pos":[0,32]}]},{"content":"basic_ios Class","pos":[665,680]},{"content":"The template class describes the storage and member functions common to both input streams (of template class <bpt id=\"p1\">[</bpt>basic_istream<ept id=\"p1\">](../standard-library/basic-istream-class.md)</ept>) and output streams (of template class <bpt id=\"p2\">[</bpt>basic_ostream<ept id=\"p2\">](../standard-library/basic-ostream-class.md)</ept>) that depend on the template parameters.","pos":[681,990],"source":"The template class describes the storage and member functions common to both input streams (of template class [basic_istream](../standard-library/basic-istream-class.md)) and output streams (of template class [basic_ostream](../standard-library/basic-ostream-class.md)) that depend on the template parameters."},{"content":"(The class <bpt id=\"p1\">[</bpt>ios_base<ept id=\"p1\">](../standard-library/ios-base-class.md)</ept> describes what is common and not dependent on template parameters.) An object of class <bpt id=\"p2\">**</bpt>basic_ios<ph id=\"ph1\">\\&lt;</ph>class Elem, class Traits&gt;<ept id=\"p2\">**</ept> helps control a stream with elements of type <bpt id=\"p3\">**</bpt>Elem<ept id=\"p3\">**</ept>, whose character traits are determined by the class <bpt id=\"p4\">**</bpt>Traits<ept id=\"p4\">**</ept>.","pos":[991,1297],"source":" (The class [ios_base](../standard-library/ios-base-class.md) describes what is common and not dependent on template parameters.) An object of class **basic_ios\\<class Elem, class Traits>** helps control a stream with elements of type **Elem**, whose character traits are determined by the class **Traits**."},{"content":"Syntax","pos":[1306,1312]},{"content":"Parameters","pos":[1414,1424]},{"content":"A type.","pos":[1438,1445]},{"content":"A variable of type <ph id=\"ph1\">`char_traits`</ph>.","pos":[1464,1497],"source":" A variable of type `char_traits`."},{"content":"Remarks","pos":[1506,1513]},{"pos":[1517,1584],"content":"An object of class <bpt id=\"p1\">**</bpt>basic_ios<ph id=\"ph1\">\\&lt;</ph>class Elem, class Traits&gt;<ept id=\"p1\">**</ept> stores:","source":"An object of class **basic_ios\\<class Elem, class Traits>** stores:"},{"pos":[1594,1708],"content":"A tie pointer to an object of type <bpt id=\"p1\">[</bpt>basic_istream<ept id=\"p1\">](../standard-library/basic-istream-class.md)</ept><bpt id=\"p2\">**</bpt><ph id=\"ph1\">\\&lt;</ph>Elem, Traits&gt;<ept id=\"p2\">**</ept>.","source":"A tie pointer to an object of type [basic_istream](../standard-library/basic-istream-class.md)**\\<Elem, Traits>**."},{"pos":[1718,1847],"content":"A stream buffer pointer to an object of type <bpt id=\"p1\">[</bpt>basic_streambuf<ept id=\"p1\">](../standard-library/basic-streambuf-class.md)</ept><bpt id=\"p2\">**</bpt><ph id=\"ph1\">\\&lt;</ph>Elem, Traits &gt;<ept id=\"p2\">**</ept>.","source":"A stream buffer pointer to an object of type [basic_streambuf](../standard-library/basic-streambuf-class.md)**\\<Elem, Traits >**."},{"pos":[1855,1919],"content":"<bpt id=\"p1\">[</bpt>Formatting information<ept id=\"p1\">](../standard-library/ios-base-class.md)</ept>.","source":"[Formatting information](../standard-library/ios-base-class.md)."},{"pos":[1927,2068],"content":"<bpt id=\"p1\">[</bpt>Stream state information<ept id=\"p1\">](../standard-library/ios-base-class.md)</ept> in a base object of type <bpt id=\"p2\">[</bpt>ios_base<ept id=\"p2\">](../standard-library/ios-base-class.md)</ept>.","source":"[Stream state information](../standard-library/ios-base-class.md) in a base object of type [ios_base](../standard-library/ios-base-class.md)."},{"pos":[2078,2128],"content":"A fill character in an object of type <ph id=\"ph1\">`char_type`</ph>.","source":"A fill character in an object of type `char_type`."},{"content":"Constructors","pos":[2138,2150]},{"content":"basic_ios","pos":[2172,2181]},{"pos":[2206,2239],"content":"Constructs the <ph id=\"ph1\">`basic_ios`</ph> class.","source":"Constructs the `basic_ios` class."},{"content":"Typedefs","pos":[2250,2258]},{"content":"char_type","pos":[2280,2289]},{"pos":[2314,2358],"content":"A synonym for the template parameter <ph id=\"ph1\">`Elem`</ph>.","source":"A synonym for the template parameter `Elem`."},{"content":"int_type","pos":[2364,2372]},{"pos":[2396,2429],"content":"A synonym for <ph id=\"ph1\">`Traits::int_type`</ph>.","source":"A synonym for `Traits::int_type`."},{"content":"off_type","pos":[2435,2443]},{"pos":[2467,2500],"content":"A synonym for <ph id=\"ph1\">`Traits::off_type`</ph>.","source":"A synonym for `Traits::off_type`."},{"content":"pos_type","pos":[2506,2514]},{"pos":[2538,2571],"content":"A synonym for <ph id=\"ph1\">`Traits::pos_type`</ph>.","source":"A synonym for `Traits::pos_type`."},{"content":"traits_type","pos":[2577,2588]},{"pos":[2615,2661],"content":"A synonym for the template parameter <ph id=\"ph1\">`Traits`</ph>.","source":"A synonym for the template parameter `Traits`."},{"content":"Member Functions","pos":[2672,2688]},{"content":"bad","pos":[2710,2713]},{"content":"Indicates a loss of integrity of the stream buffer.","pos":[2732,2783]},{"content":"clear","pos":[2789,2794]},{"content":"Clears all error flags.","pos":[2815,2838]},{"content":"copyfmt","pos":[2844,2851]},{"content":"Copies flags from one stream to another.","pos":[2874,2914]},{"content":"eof","pos":[2920,2923]},{"content":"Indicates if the end of a stream has been reached.","pos":[2942,2992]},{"content":"exceptions","pos":[2998,3008]},{"content":"Indicates which exceptions will be thrown by the stream.","pos":[3034,3090]},{"content":"fail","pos":[3096,3100]},{"content":"Indicates failure to extract a valid field from a stream.","pos":[3120,3177]},{"content":"fill","pos":[3183,3187]},{"content":"Specifies or returns the character that will be used when the text is not as wide as the stream.","pos":[3207,3303]},{"content":"good","pos":[3309,3313]},{"content":"Indicates the stream is in good condition.","pos":[3333,3375]},{"content":"imbue","pos":[3381,3386]},{"content":"Changes the locale.","pos":[3407,3426]},{"content":"init","pos":[3432,3436]},{"pos":[3456,3491],"content":"Called by <ph id=\"ph1\">`basic_ios`</ph> constructors.","source":"Called by `basic_ios` constructors."},{"content":"move","pos":[3497,3501]},{"content":"Moves all values, except the pointer to the stream buffer, from the parameter to the current object.","pos":[3521,3621]},{"content":"narrow","pos":[3627,3633]},{"pos":[3655,3704],"content":"Finds the equivalent char to a given <ph id=\"ph1\">`char_type`</ph>.","source":"Finds the equivalent char to a given `char_type`."},{"content":"rdbuf","pos":[3710,3715]},{"content":"Routes stream to specified buffer.","pos":[3736,3770]},{"content":"rdstate","pos":[3776,3783]},{"content":"Reads the state of bits for flags.","pos":[3806,3840]},{"content":"set_rdbuf","pos":[3846,3855]},{"content":"Assigns a stream buffer to be the read buffer for this stream object.","pos":[3880,3949]},{"content":"setstate","pos":[3955,3963]},{"content":"Sets additional flags.","pos":[3987,4009]},{"content":"swap","pos":[4015,4019]},{"content":"Exchanges the values in this <ph id=\"ph1\">`basic_ios`</ph> object for those of another <ph id=\"ph2\">`basic_ios`</ph> object.","pos":[4039,4127],"source":"Exchanges the values in this `basic_ios` object for those of another `basic_ios` object."},{"content":"The pointers to the stream buffers are not swapped.","pos":[4128,4179]},{"content":"tie","pos":[4185,4188]},{"content":"Ensures that one stream is processed before another stream.","pos":[4207,4266]},{"content":"widen","pos":[4272,4277]},{"pos":[4298,4347],"content":"Finds the equivalent <ph id=\"ph1\">`char_type`</ph> to a given char.","source":"Finds the equivalent `char_type` to a given char."},{"content":"Operators","pos":[4358,4367]},{"content":"explicit operator bool","pos":[4389,4411]},{"content":"Allows use of a <ph id=\"ph1\">`basic_ios`</ph> object as a <ph id=\"ph2\">`bool`</ph>.","pos":[4440,4487],"source":"Allows use of a `basic_ios` object as a `bool`."},{"content":"Automatic type conversion is disabled to prevent common, unintended side effects.","pos":[4488,4569]},{"content":"operator void *","pos":[4575,4590]},{"content":"Indicates if the stream is still good.","pos":[4624,4662]},{"content":"operator!","pos":[4668,4677]},{"content":"Indicates if the stream is not bad.","pos":[4705,4740]},{"content":"Requirements","pos":[4750,4762]},{"pos":[4766,4784],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>ios&gt;","source":"**Header:** \\<ios>"},{"pos":[4791,4809],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[4850,4864],"content":"basic_ios::bad"},{"content":"Indicates a loss of integrity of the stream buffer","pos":[4868,4918]},{"content":"Return Value","pos":[4961,4973]},{"pos":[4984,5036],"content":"if <ph id=\"ph1\">`rdstate &amp; badbit`</ph> is nonzero; otherwise <ph id=\"ph2\">`false`</ph>.","source":" if `rdstate & badbit` is nonzero; otherwise `false`."},{"pos":[5043,5158],"content":"For more information on <ph id=\"ph1\">`badbit`</ph>, see <bpt id=\"p1\">[</bpt>ios_base::iostate<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__iostate)</ept>.","source":"For more information on `badbit`, see [ios_base::iostate](../standard-library/ios-base-class.md#ios_base__iostate)."},{"content":"Example","pos":[5168,5175]},{"pos":[5493,5513],"content":"basic_ios::basic_ios"},{"content":"Constructs the basic_ios class.","pos":[5517,5548]},{"content":"Parameters","pos":[5643,5653]},{"content":"Standard buffer to store input or output elements.","pos":[5665,5715]},{"content":"Remarks","pos":[5725,5732]},{"content":"The first constructor initializes its member objects by calling <bpt id=\"p1\">[</bpt>init<ept id=\"p1\">](#basic_ios__init)</ept>(_ <bpt id=\"p2\">*</bpt>Sb<ept id=\"p2\">*</ept>).","pos":[5736,5833],"source":"The first constructor initializes its member objects by calling [init](#basic_ios__init)(_ *Sb*)."},{"content":"The second (protected) constructor leaves its member objects uninitialized.","pos":[5834,5909]},{"content":"A later call to <bpt id=\"p1\">**</bpt>init<ept id=\"p1\">**</ept> must initialize the object before it can be safely destroyed.","pos":[5910,5996],"source":" A later call to **init** must initialize the object before it can be safely destroyed."},{"pos":[6043,6063],"content":"basic_ios::char_type"},{"pos":[6067,6113],"content":"A synonym for the template parameter <bpt id=\"p1\">**</bpt>Elem<ept id=\"p1\">**</ept>.","source":"A synonym for the template parameter **Elem**."},{"pos":[6198,6214],"content":"basic_ios::clear"},{"content":"Clears all error flags.","pos":[6218,6241]},{"content":"Parameters","pos":[6355,6365]},{"content":"(optional)","pos":[6377,6387]},{"content":"The flags you want to set after clearing all flags.","pos":[6391,6442]},{"content":"Defaults to <ph id=\"ph1\">`goodbit`</ph>.","pos":[6443,6465],"source":" Defaults to `goodbit`."},{"content":"(optional)","pos":[6482,6492]},{"content":"Specifies whether the exception should be re-raised.","pos":[6496,6548]},{"content":"Defaults to <ph id=\"ph1\">`false`</ph> (will not re-raise the exception).","pos":[6549,6603],"source":" Defaults to `false` (will not re-raise the exception)."},{"content":"Remarks","pos":[6613,6620]},{"content":"The flags are <bpt id=\"p1\">**</bpt>goodbit<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>failbit<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>eofbit<ept id=\"p3\">**</ept>, and <bpt id=\"p4\">**</bpt>badbit<ept id=\"p4\">**</ept>.","pos":[6624,6691],"source":"The flags are **goodbit**, **failbit**, **eofbit**, and **badbit**."},{"content":"Test for these flags with <bpt id=\"p1\">[</bpt>good<ept id=\"p1\">](#basic_ios__good)</ept>, <bpt id=\"p2\">[</bpt>bad<ept id=\"p2\">](#basic_ios__bad)</ept>, <bpt id=\"p3\">[</bpt>eof<ept id=\"p3\">](#basic_ios__eof)</ept>, and <bpt id=\"p4\">[</bpt>fail<ept id=\"p4\">](#basic_ios__fail)</ept>","pos":[6692,6820],"source":" Test for these flags with [good](#basic_ios__good), [bad](#basic_ios__bad), [eof](#basic_ios__eof), and [fail](#basic_ios__fail)"},{"content":"The member function replaces the stored stream state information with:","pos":[6827,6897]},{"pos":[6912,6979],"content":"&amp;#124; <ph id=\"ph1\">`(`</ph><bpt id=\"p1\">[</bpt>rdbuf<ept id=\"p1\">](#basic_ios__rdbuf)</ept> != 0 <bpt id=\"p2\">**</bpt>goodbit<ept id=\"p2\">**</ept> : <bpt id=\"p3\">**</bpt>badbit<ept id=\"p3\">**</ept>)","source":" &#124; `(`[rdbuf](#basic_ios__rdbuf) != 0 **goodbit** : **badbit**)"},{"pos":[6986,7151],"content":"If <ph id=\"ph1\">`state`</ph><bpt id=\"p1\">**</bpt><ph id=\"ph2\">&amp;</ph><ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>exceptions<ept id=\"p2\">](#basic_ios__exceptions)</ept> is nonzero, it then throws an object of class <bpt id=\"p3\">[</bpt>failure<ept id=\"p3\">](../standard-library/ios-base-class.md#ios_base__failure)</ept>.","source":"If `state`**&**[exceptions](#basic_ios__exceptions) is nonzero, it then throws an object of class [failure](../standard-library/ios-base-class.md#ios_base__failure)."},{"content":"Example","pos":[7161,7168]},{"pos":[7173,7300],"content":"See <bpt id=\"p1\">[</bpt>rdstate<ept id=\"p1\">](#basic_ios__rdstate)</ept> and <bpt id=\"p2\">[</bpt>getline<ept id=\"p2\">](../standard-library/string-functions.md#getline)</ept> for examples using <bpt id=\"p3\">**</bpt>clear<ept id=\"p3\">**</ept>.","source":"See [rdstate](#basic_ios__rdstate) and [getline](../standard-library/string-functions.md#getline) for examples using **clear**."},{"pos":[7345,7363],"content":"basic_ios::copyfmt"},{"content":"Copies flags from one stream to another.","pos":[7367,7407]},{"content":"Parameters","pos":[7506,7516]},{"content":"The stream whose flags you want to copy.","pos":[7532,7572]},{"content":"Return Value","pos":[7582,7594]},{"pos":[7598,7668],"content":"The <bpt id=\"p1\">**</bpt>this<ept id=\"p1\">**</ept> object for the stream to which you are copying the flags.","source":"The **this** object for the stream to which you are copying the flags."},{"content":"Remarks","pos":[7678,7685]},{"content":"The member function reports the callback eventÂ erase_event.","pos":[7689,7749]},{"content":"It then copies from <ph id=\"ph1\">` right`</ph> into <bpt id=\"p1\">**</bpt><ph id=\"ph2\">\\*</ph>this<ept id=\"p1\">**</ept> the fill character, the tie pointer, and the formatting information.","pos":[7750,7863],"source":" It then copies from ` right` into **\\*this** the fill character, the tie pointer, and the formatting information."},{"content":"Before altering the exception mask, it reports the callback event copyfmt_event.","pos":[7864,7944]},{"content":"If, after the copy is complete, <bpt id=\"p1\">**</bpt>state &amp;<ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>exceptions<ept id=\"p2\">](#basic_ios__exceptions)</ept> is nonzero, the function effectively calls <bpt id=\"p3\">[</bpt>clear<ept id=\"p3\">](#basic_ios__clear)</ept> with the argument <bpt id=\"p4\">[</bpt>rdstate<ept id=\"p4\">](#basic_ios__rdstate)</ept>.","pos":[7945,8144],"source":" If, after the copy is complete, **state &**[exceptions](#basic_ios__exceptions) is nonzero, the function effectively calls [clear](#basic_ios__clear) with the argument [rdstate](#basic_ios__rdstate)."},{"content":"It returns <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>this<ept id=\"p1\">**</ept>.","pos":[8145,8167],"source":" It returns **\\*this**."},{"content":"Example","pos":[8177,8184]},{"pos":[8531,8545],"content":"basic_ios::eof"},{"content":"Indicates if the end of a stream has been reached.","pos":[8549,8599]},{"content":"Return Value","pos":[8642,8654]},{"pos":[8665,8726],"content":"if the end of the stream has been reached, <ph id=\"ph1\">`false`</ph> otherwise.","source":" if the end of the stream has been reached, `false` otherwise."},{"content":"Remarks","pos":[8736,8743]},{"content":"The member function returns <ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">[</bpt>rdstate<ept id=\"p1\">](#basic_ios__rdstate)</ept> <ph id=\"ph2\">`&amp; eofbit`</ph> is nonzero.","pos":[8747,8838],"source":"The member function returns `true` if [rdstate](#basic_ios__rdstate) `& eofbit` is nonzero."},{"content":"For more information on <ph id=\"ph1\">`eofbit`</ph>, see <bpt id=\"p1\">[</bpt>ios_base::iostate<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__iostate)</ept>.","pos":[8839,8954],"source":" For more information on `eofbit`, see [ios_base::iostate](../standard-library/ios-base-class.md#ios_base__iostate)."},{"content":"Example","pos":[8964,8971]},{"pos":[9421,9442],"content":"basic_ios::exceptions"},{"content":"Indicates which exceptions will be thrown by the stream.","pos":[9446,9502]},{"content":"Parameters","pos":[9630,9640]},{"content":"Newexcept","pos":[9645,9654]},{"content":"The flags that you want to throw an exception.","pos":[9659,9705]},{"content":"Return Value","pos":[9715,9727]},{"content":"The flags that are currently specified to thrown an exception for the stream.","pos":[9731,9808]},{"content":"Remarks","pos":[9818,9825]},{"content":"The first member function returns the stored exception mask.","pos":[9829,9889]},{"content":"The second member function stores <bpt id=\"p1\">*</bpt>_Except<ept id=\"p1\">*</ept> in the exception mask and returns its previous stored value.","pos":[9890,9994],"source":" The second member function stores *_Except* in the exception mask and returns its previous stored value."},{"content":"Note that storing a new exception mask can throw an exception just like the call <bpt id=\"p1\">[</bpt>clear<ept id=\"p1\">](#basic_ios__clear)</ept>( <bpt id=\"p2\">[</bpt>rdstate<ept id=\"p2\">](#basic_ios__rdstate)</ept> ).","pos":[9995,10137],"source":" Note that storing a new exception mask can throw an exception just like the call [clear](#basic_ios__clear)( [rdstate](#basic_ios__rdstate) )."},{"content":"Example","pos":[10147,10154]},{"pos":[10929,10944],"content":"basic_ios::fail"},{"content":"Indicates failure to extract a valid field from a stream.","pos":[10948,11005]},{"content":"Return Value","pos":[11049,11061]},{"pos":[11072,11157],"content":"if <bpt id=\"p1\">[</bpt>rdstate<ept id=\"p1\">](#basic_ios__rdstate)</ept> <ph id=\"ph1\">`&amp; (badbit|failbit)`</ph> is nonzero, otherwise <ph id=\"ph2\">`false`</ph>.","source":" if [rdstate](#basic_ios__rdstate) `& (badbit|failbit)` is nonzero, otherwise `false`."},{"pos":[11164,11280],"content":"For more information on <ph id=\"ph1\">`failbit`</ph>, see <bpt id=\"p1\">[</bpt>ios_base::iostate<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__iostate)</ept>.","source":"For more information on `failbit`, see [ios_base::iostate](../standard-library/ios-base-class.md#ios_base__iostate)."},{"content":"Example","pos":[11290,11297]},{"pos":[11562,11577],"content":"basic_ios::fill"},{"content":"Specifies or returns the character that will be used when the text is not as wide as the stream.","pos":[11581,11677]},{"content":"Parameters","pos":[11760,11770]},{"content":"The character you want as the fill character.","pos":[11784,11829]},{"content":"Return Value","pos":[11839,11851]},{"content":"The current fill character.","pos":[11855,11882]},{"content":"Remarks","pos":[11892,11899]},{"content":"The first member function returns the stored fill character.","pos":[11903,11963]},{"content":"The second member function stores <ph id=\"ph1\">`Char`</ph> in the fill character and returns its previous stored value.","pos":[11964,12065],"source":" The second member function stores `Char` in the fill character and returns its previous stored value."},{"content":"Example","pos":[12075,12082]},{"pos":[12475,12490],"content":"basic_ios::good"},{"content":"Indicates the stream is in good condition.","pos":[12494,12536]},{"content":"Return Value","pos":[12580,12592]},{"pos":[12603,12695],"content":"if <bpt id=\"p1\">[</bpt>rdstate<ept id=\"p1\">](#basic_ios__rdstate)</ept> <ph id=\"ph1\">`== goodbit`</ph> (no state flags are set), otherwise, <ph id=\"ph2\">`false`</ph>.","source":" if [rdstate](#basic_ios__rdstate) `== goodbit` (no state flags are set), otherwise, `false`."},{"pos":[12702,12818],"content":"For more information on <ph id=\"ph1\">`goodbit`</ph>, see <bpt id=\"p1\">[</bpt>ios_base::iostate<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__iostate)</ept>.","source":"For more information on `goodbit`, see [ios_base::iostate](../standard-library/ios-base-class.md#ios_base__iostate)."},{"content":"Example","pos":[12828,12835]},{"pos":[12840,12909],"content":"See <bpt id=\"p1\">[</bpt>basic_ios::bad<ept id=\"p1\">](#basic_ios__bad)</ept> for an example of using <ph id=\"ph1\">`good`</ph>.","source":"See [basic_ios::bad](#basic_ios__bad) for an example of using `good`."},{"pos":[12952,12968],"content":"basic_ios::imbue"},{"content":"Changes the locale.","pos":[12972,12991]},{"content":"Parameters","pos":[13050,13060]},{"content":"A locale string.","pos":[13073,13089]},{"content":"Return Value","pos":[13099,13111]},{"content":"The previous locale.","pos":[13115,13135]},{"content":"Remarks","pos":[13145,13152]},{"pos":[13156,13234],"content":"If <bpt id=\"p1\">[</bpt>rdbuf<ept id=\"p1\">](#basic_ios__rdbuf)</ept> is not a null pointer, the member function calls","source":"If [rdbuf](#basic_ios__rdbuf) is not a null pointer, the member function calls"},{"pos":[13251,13342],"content":"<bpt id=\"p1\">[</bpt>pubimbue<ept id=\"p1\">](../standard-library/basic-streambuf-class.md#basic_streambuf__pubimbue)</ept>(_ <bpt id=\"p2\">*</bpt>Loc<ept id=\"p2\">*</ept>)","source":"[pubimbue](../standard-library/basic-streambuf-class.md#basic_streambuf__pubimbue)(_ *Loc*)"},{"pos":[13349,13455],"content":"In any case, it returns <bpt id=\"p1\">[</bpt>ios_base::imbue<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__imbue)</ept>(_ <bpt id=\"p2\">*</bpt>Loc<ept id=\"p2\">*</ept>).","source":"In any case, it returns [ios_base::imbue](../standard-library/ios-base-class.md#ios_base__imbue)(_ *Loc*)."},{"content":"Example","pos":[13465,13472]},{"pos":[13784,13799],"content":"basic_ios::init"},{"content":"Called by basic_ios constructors.","pos":[13803,13836]},{"content":"Parameters","pos":[13930,13940]},{"content":"Standard buffer to store input or output elements.","pos":[13953,14003]},{"content":"Specifies whether this is a standard stream.","pos":[14022,14066]},{"content":"Remarks","pos":[14076,14083]},{"content":"The member function stores values in all member objects, so that:","pos":[14087,14152]},{"pos":[14160,14201],"content":"<bpt id=\"p1\">[</bpt>rdbuf<ept id=\"p1\">](#basic_ios__rdbuf)</ept> returns <bpt id=\"p2\">*</bpt>_Sb.<ept id=\"p2\">*</ept>","source":"[rdbuf](#basic_ios__rdbuf) returns *_Sb.*"},{"pos":[14209,14255],"content":"<bpt id=\"p1\">[</bpt>tie<ept id=\"p1\">](#basic_ios__tie)</ept> returns a null pointer.","source":"[tie](#basic_ios__tie) returns a null pointer."},{"pos":[14263,14478],"content":"<bpt id=\"p1\">[</bpt>rdstate<ept id=\"p1\">](#basic_ios__rdstate)</ept> returns <bpt id=\"p2\">[</bpt>goodbit<ept id=\"p2\">](../standard-library/ios-base-class.md#ios_base__iostate)</ept> if <ph id=\"ph1\">`_Sb`</ph> is nonzero; otherwise, it returns <bpt id=\"p3\">[</bpt>badbit<ept id=\"p3\">](../standard-library/ios-base-class.md#ios_base__iostate)</ept>.","source":"[rdstate](#basic_ios__rdstate) returns [goodbit](../standard-library/ios-base-class.md#ios_base__iostate) if `_Sb` is nonzero; otherwise, it returns [badbit](../standard-library/ios-base-class.md#ios_base__iostate)."},{"pos":[14486,14543],"content":"<bpt id=\"p1\">[</bpt>exceptions<ept id=\"p1\">](#basic_ios__exceptions)</ept> returns <bpt id=\"p2\">**</bpt>goodbit<ept id=\"p2\">**</ept>.","source":"[exceptions](#basic_ios__exceptions) returns **goodbit**."},{"pos":[14551,14760],"content":"<bpt id=\"p1\">[</bpt>flags<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__flags)</ept> returns <bpt id=\"p2\">[</bpt>skipws<ept id=\"p2\">](../standard-library/ios-base-class.md#ios_base__fmtflags)</ept> &amp;#124; <bpt id=\"p3\">[</bpt>dec<ept id=\"p3\">](../standard-library/ios-base-class.md#ios_base__fmtflags)</ept>.","source":"[flags](../standard-library/ios-base-class.md#ios_base__flags) returns [skipws](../standard-library/ios-base-class.md#ios_base__fmtflags) &#124; [dec](../standard-library/ios-base-class.md#ios_base__fmtflags)."},{"pos":[14768,14841],"content":"<bpt id=\"p1\">[</bpt>width<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__width)</ept> returns 0.","source":"[width](../standard-library/ios-base-class.md#ios_base__width) returns 0."},{"pos":[14849,14930],"content":"<bpt id=\"p1\">[</bpt>precision<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__precision)</ept> returns 6.","source":"[precision](../standard-library/ios-base-class.md#ios_base__precision) returns 6."},{"pos":[14938,14991],"content":"<bpt id=\"p1\">[</bpt>fill<ept id=\"p1\">](#basic_ios__fill)</ept> returns the space character.","source":"[fill](#basic_ios__fill) returns the space character."},{"pos":[14999,15090],"content":"<bpt id=\"p1\">[</bpt>getloc<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__getloc)</ept> returns <ph id=\"ph1\">`locale::classic`</ph>.","source":"[getloc](../standard-library/ios-base-class.md#ios_base__getloc) returns `locale::classic`."},{"pos":[15098,15289],"content":"<bpt id=\"p1\">[</bpt>iword<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__iword)</ept> returns zero, and <bpt id=\"p2\">[</bpt>pword<ept id=\"p2\">](../standard-library/ios-base-class.md#ios_base__pword)</ept> returns a null pointer for all argument values.","source":"[iword](../standard-library/ios-base-class.md#ios_base__iword) returns zero, and [pword](../standard-library/ios-base-class.md#ios_base__pword) returns a null pointer for all argument values."},{"pos":[15335,15354],"content":"basic_ios::int_type"},{"pos":[15358,15398],"content":"A synonym for <bpt id=\"p1\">**</bpt>traits_type::int_type<ept id=\"p1\">**</ept>.","source":"A synonym for **traits_type::int_type**."},{"pos":[15506,15521],"content":"basic_ios::move"},{"content":"Moves all values, except the pointer to the stream buffer, from the parameter to the current object.","pos":[15525,15625]},{"content":"Parameters","pos":[15681,15691]},{"content":"The <ph id=\"ph1\">`ios_base`</ph> object to move values from.","pos":[15706,15748],"source":" The `ios_base` object to move values from."},{"content":"Remarks","pos":[15758,15765]},{"content":"The protected member function moves all the values stored in <ph id=\"ph1\">` right`</ph> to <ph id=\"ph2\">`*this`</ph> except the stored <ph id=\"ph3\">`stream buffer pointer`</ph>, which is unchanged in <ph id=\"ph4\">` right`</ph> and set to a null pointer in <ph id=\"ph5\">`*this`</ph>.","pos":[15769,15961],"source":"The protected member function moves all the values stored in ` right` to `*this` except the stored `stream buffer pointer`, which is unchanged in ` right` and set to a null pointer in `*this`."},{"content":"The stored <ph id=\"ph1\">`tie pointer`</ph> is set to a null pointer in <ph id=\"ph2\">` right`</ph>.","pos":[15962,16024],"source":" The stored `tie pointer` is set to a null pointer in ` right`."},{"pos":[16068,16085],"content":"basic_ios::narrow"},{"pos":[16089,16138],"content":"Finds the equivalent char to a given <ph id=\"ph1\">`char_type`</ph>.","source":"Finds the equivalent char to a given `char_type`."},{"content":"Parameters","pos":[16221,16231]},{"content":"The <ph id=\"ph1\">`char`</ph> to convert.","pos":[16245,16267],"source":" The `char` to convert."},{"content":"The <ph id=\"ph1\">`char`</ph> that you want returned if no equivalent is found.","pos":[16287,16347],"source":" The `char` that you want returned if no equivalent is found."},{"content":"Return Value","pos":[16357,16369]},{"pos":[16373,16418],"content":"The equivalent <ph id=\"ph1\">`char`</ph> to a given <ph id=\"ph2\">`char_type`</ph>.","source":"The equivalent `char` to a given `char_type`."},{"content":"Remarks","pos":[16428,16435]},{"content":"The member function returns <bpt id=\"p1\">[</bpt>use_facet<ept id=\"p1\">](../standard-library/basic-filebuf-class.md#basic_filebuf__open)</ept><bpt id=\"p2\">**</bpt><ph id=\"ph1\">&lt;</ph><ept id=\"p2\">**</ept>Â <bpt id=\"p3\">**</bpt>ctype<ept id=\"p3\">**</ept><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p4\">**</bpt>E<ept id=\"p4\">**</ept>&gt; &gt;( <bpt id=\"p5\">[</bpt>getloc<ept id=\"p5\">](../standard-library/ios-base-class.md#ios_base__getloc)</ept>( ) ).","pos":[16439,16641],"source":"The member function returns [use_facet](../standard-library/basic-filebuf-class.md#basic_filebuf__open)**<**Â **ctype**\\< **E**> >( [getloc](../standard-library/ios-base-class.md#ios_base__getloc)( ) )."},{"content":"( <ph id=\"ph1\">`Char`</ph>, <ph id=\"ph2\">`Default`</ph>).","pos":[16650,16671],"source":"( `Char`, `Default`)."},{"content":"Example","pos":[16681,16688]},{"pos":[17070,17089],"content":"basic_ios::off_type"},{"pos":[17093,17133],"content":"A synonym for <bpt id=\"p1\">**</bpt>traits_type::off_type<ept id=\"p1\">**</ept>.","source":"A synonym for **traits_type::off_type**."},{"pos":[17255,17281],"content":"basic_ios::operator void *"},{"content":"Indicates if the stream is still good.","pos":[17285,17323]},{"content":"Return Value","pos":[17374,17386]},{"pos":[17390,17459],"content":"The operator returns a null pointer only if <bpt id=\"p1\">[</bpt>fail<ept id=\"p1\">](#basic_ios__fail)</ept>.","source":"The operator returns a null pointer only if [fail](#basic_ios__fail)."},{"content":"Example","pos":[17469,17476]},{"pos":[17764,17784],"content":"basic_ios::operator!"},{"content":"Indicates if the stream is not bad.","pos":[17788,17823]},{"content":"Return Value","pos":[17873,17885]},{"pos":[17889,17922],"content":"Returns <bpt id=\"p1\">[</bpt>fail<ept id=\"p1\">](#basic_ios__fail)</ept>.","source":"Returns [fail](#basic_ios__fail)."},{"content":"Example","pos":[17932,17939]},{"pos":[18211,18235],"content":"basic_ios::operator bool"},{"content":"Allows use of a <ph id=\"ph1\">`basic_ios`</ph> object as a <ph id=\"ph2\">`bool`</ph>.","pos":[18239,18286],"source":"Allows use of a `basic_ios` object as a `bool`."},{"content":"Automatic type conversion is disabled to prevent common, unintended side effects.","pos":[18287,18368]},{"content":"Remarks","pos":[18425,18432]},{"content":"The operator returns a value convertible to <ph id=\"ph1\">`false`</ph> only if <ph id=\"ph2\">`fail``()`</ph>.","pos":[18436,18507],"source":"The operator returns a value convertible to `false` only if `fail``()`."},{"content":"The return type is convertible only to <ph id=\"ph1\">`bool`</ph>, not to <ph id=\"ph2\">`void *`</ph> or other known scalar type.","pos":[18508,18598],"source":" The return type is convertible only to `bool`, not to `void *` or other known scalar type."},{"pos":[18644,18663],"content":"basic_ios::pos_type"},{"pos":[18667,18707],"content":"A synonym for <bpt id=\"p1\">**</bpt>traits_type::pos_type<ept id=\"p1\">**</ept>.","source":"A synonym for **traits_type::pos_type**."},{"pos":[18816,18832],"content":"basic_ios::rdbuf"},{"content":"Routes stream to specified buffer.","pos":[18836,18870]},{"content":"Parameters","pos":[19018,19028]},{"content":"A stream.","pos":[19041,19050]},{"content":"Remarks","pos":[19060,19067]},{"content":"The first member function returns the stored stream buffer pointer.","pos":[19071,19138]},{"pos":[19145,19261],"content":"The second member function stores <ph id=\"ph1\">`_Sb`</ph> in the stored stream buffer pointer and returns the previously stored value.","source":"The second member function stores `_Sb` in the stored stream buffer pointer and returns the previously stored value."},{"content":"Example","pos":[19271,19278]},{"pos":[19712,19730],"content":"basic_ios::rdstate"},{"content":"Reads the state of bits for flags.","pos":[19734,19768]},{"content":"Return Value","pos":[19820,19832]},{"content":"The stored stream state information.","pos":[19836,19872]},{"content":"Example","pos":[19882,19889]},{"pos":[20522,20541],"content":"basic_ios::setstate"},{"content":"Sets additional flags.","pos":[20545,20567]},{"content":"Parameters","pos":[20624,20634]},{"content":"Additional flags to set.","pos":[20650,20674]},{"content":"Remarks","pos":[20684,20691]},{"pos":[20695,20809],"content":"The member function effectively calls <bpt id=\"p1\">[</bpt>clear<ept id=\"p1\">](#basic_ios__clear)</ept>(_ <bpt id=\"p2\">*</bpt>State<ept id=\"p2\">*</ept> &amp;#124; <bpt id=\"p3\">[</bpt>rdstate<ept id=\"p3\">](#basic_ios__rdstate)</ept>).","source":"The member function effectively calls [clear](#basic_ios__clear)(_ *State* &#124; [rdstate](#basic_ios__rdstate))."},{"content":"Example","pos":[20819,20826]},{"pos":[21438,21458],"content":"basic_ios::set_rdbuf"},{"content":"Assigns a stream buffer to be the read buffer for this stream object.","pos":[21462,21531]},{"content":"Parameters","pos":[21610,21620]},{"content":"The stream buffer to become the read buffer.","pos":[21637,21681]},{"content":"Remarks","pos":[21691,21698]},{"pos":[21702,21805],"content":"The protected member function stores <ph id=\"ph1\">` strbuf`</ph> in the <ph id=\"ph2\">`stream buffer pointer`</ph>.It does not call <ph id=\"ph3\">`clear`</ph>.","source":"The protected member function stores ` strbuf` in the `stream buffer pointer`.It does not call `clear`."},{"pos":[21846,21860],"content":"basic_ios::tie"},{"content":"Ensures that one stream is processed before another stream.","pos":[21864,21923]},{"content":"Parameters","pos":[22062,22072]},{"content":"A stream.","pos":[22086,22095]},{"content":"Return Value","pos":[22105,22117]},{"content":"The first member function returns the stored tie pointer.","pos":[22121,22178]},{"content":"The second member function stores <ph id=\"ph1\">` str`</ph> in the tie pointer and returns its previous stored value.","pos":[22179,22277],"source":" The second member function stores ` str` in the tie pointer and returns its previous stored value."},{"content":"Remarks","pos":[22287,22294]},{"pos":[22304,22435],"content":"causes two streams to be synchronized, such that, operations on one stream occur after operations on the other stream are complete."},{"content":"Example","pos":[22445,22452]},{"content":"In this example, by tying cin to cout, it is guaranteed that the \"Enter a number:\" string will go to the console before the number itself is extracted from cin.","pos":[22457,22617]},{"content":"This eliminates the possibility that the \"Enter a number:\" string is still sitting in the buffer when the number is read, so that we are certain that the user actually has some prompt to respond to.","pos":[22618,22816]},{"content":"By default, cin and cout are tied.","pos":[22817,22851]},{"pos":[23088,23110],"content":"basic_ios::traits_type"},{"pos":[23114,23162],"content":"A synonym for the template parameter <bpt id=\"p1\">**</bpt>Traits<ept id=\"p1\">**</ept>.","source":"A synonym for the template parameter **Traits**."},{"pos":[23251,23267],"content":"basic_ios::widen"},{"pos":[23271,23322],"content":"Finds the equivalent <ph id=\"ph1\">`char_type`</ph> to a given <ph id=\"ph2\">`char`</ph>.","source":"Finds the equivalent `char_type` to a given `char`."},{"content":"Parameters","pos":[23382,23392]},{"content":"The character to convert.","pos":[23406,23431]},{"content":"Return Value","pos":[23441,23453]},{"pos":[23457,23508],"content":"Finds the equivalent <ph id=\"ph1\">`char_type`</ph> to a given <ph id=\"ph2\">`char`</ph>.","source":"Finds the equivalent `char_type` to a given `char`."},{"content":"Remarks","pos":[23518,23525]},{"content":"The member function returns <bpt id=\"p1\">[</bpt>use_facet<ept id=\"p1\">](../standard-library/basic-filebuf-class.md#basic_filebuf__open)</ept><ph id=\"ph1\">&lt; </ph><bpt id=\"p2\">**</bpt>ctype<ept id=\"p2\">**</ept><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p3\">**</bpt>E<ept id=\"p3\">**</ept>&gt; &gt;( <bpt id=\"p4\">[</bpt>getloc<ept id=\"p4\">](../standard-library/ios-base-class.md#ios_base__getloc)</ept>).","pos":[23529,23722],"source":"The member function returns [use_facet](../standard-library/basic-filebuf-class.md#basic_filebuf__open)< **ctype**\\< **E**> >( [getloc](../standard-library/ios-base-class.md#ios_base__getloc))."},{"content":"( <ph id=\"ph1\">`Char`</ph>).","pos":[23730,23740],"source":"( `Char`)."},{"content":"Example","pos":[23750,23757]},{"pos":[24117,24132],"content":"basic_ios::swap"},{"content":"Exchanges the values in this <ph id=\"ph1\">`basic_ios`</ph> object for those of another <ph id=\"ph2\">`basic_ios`</ph> object.","pos":[24136,24224],"source":"Exchanges the values in this `basic_ios` object for those of another `basic_ios` object."},{"content":"However, the pointers to the stream buffers are not swapped.","pos":[24225,24285]},{"content":"Parameters","pos":[24341,24351]},{"content":"The <ph id=\"ph1\">`basic_ios`</ph> object that is used to exchange values.","pos":[24366,24421],"source":" The `basic_ios` object that is used to exchange values."},{"content":"Remarks","pos":[24431,24438]},{"pos":[24442,24571],"content":"The protected member function exchanges all the values stored in <ph id=\"ph1\">` right`</ph> with <ph id=\"ph2\">`*this`</ph> except the stored <ph id=\"ph3\">`stream buffer pointer`</ph>.","source":"The protected member function exchanges all the values stored in ` right` with `*this` except the stored `stream buffer pointer`."},{"content":"See Also","pos":[24580,24588]},{"content":"Thread Safety in the C++ Standard Library","pos":[24593,24634]},{"content":"iostream Programming","pos":[24707,24727]},{"content":"iostreams Conventions","pos":[24779,24800]}],"content":"---\ntitle: \"basic_ios Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.basic_ios\"\n  - \"ios/std::basic_ios\"\n  - \"basic_ios\"\n  - \"std::basic_ios\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"basic_ios class\"\nms.assetid: 4fdcd8e1-62d2-4611-8a70-1e4f58434007\ncaps.latest.revision: 24\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# basic_ios Class\nThe template class describes the storage and member functions common to both input streams (of template class [basic_istream](../standard-library/basic-istream-class.md)) and output streams (of template class [basic_ostream](../standard-library/basic-ostream-class.md)) that depend on the template parameters. (The class [ios_base](../standard-library/ios-base-class.md) describes what is common and not dependent on template parameters.) An object of class **basic_ios\\<class Elem, class Traits>** helps control a stream with elements of type **Elem**, whose character traits are determined by the class **Traits**.  \n  \n## Syntax  \n  \n```  \n \ntemplate <class Elem, class Traits>  \nclass basic_ios : public ios_base  \n```  \n  \n#### Parameters  \n `Elem`  \n A type.  \n  \n `Traits`  \n A variable of type `char_traits`.  \n  \n## Remarks  \n An object of class **basic_ios\\<class Elem, class Traits>** stores:  \n  \n-   A tie pointer to an object of type [basic_istream](../standard-library/basic-istream-class.md)**\\<Elem, Traits>**.  \n  \n-   A stream buffer pointer to an object of type [basic_streambuf](../standard-library/basic-streambuf-class.md)**\\<Elem, Traits >**.  \n  \n- [Formatting information](../standard-library/ios-base-class.md).  \n  \n- [Stream state information](../standard-library/ios-base-class.md) in a base object of type [ios_base](../standard-library/ios-base-class.md).  \n  \n-   A fill character in an object of type `char_type`.  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[basic_ios](#basic_ios__basic_ios)|Constructs the `basic_ios` class.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[char_type](#basic_ios__char_type)|A synonym for the template parameter `Elem`.|  \n|[int_type](#basic_ios__int_type)|A synonym for `Traits::int_type`.|  \n|[off_type](#basic_ios__off_type)|A synonym for `Traits::off_type`.|  \n|[pos_type](#basic_ios__pos_type)|A synonym for `Traits::pos_type`.|  \n|[traits_type](#basic_ios__traits_type)|A synonym for the template parameter `Traits`.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[bad](#basic_ios__bad)|Indicates a loss of integrity of the stream buffer.|  \n|[clear](#basic_ios__clear)|Clears all error flags.|  \n|[copyfmt](#basic_ios__copyfmt)|Copies flags from one stream to another.|  \n|[eof](#basic_ios__eof)|Indicates if the end of a stream has been reached.|  \n|[exceptions](#basic_ios__exceptions)|Indicates which exceptions will be thrown by the stream.|  \n|[fail](#basic_ios__fail)|Indicates failure to extract a valid field from a stream.|  \n|[fill](#basic_ios__fill)|Specifies or returns the character that will be used when the text is not as wide as the stream.|  \n|[good](#basic_ios__good)|Indicates the stream is in good condition.|  \n|[imbue](#basic_ios__imbue)|Changes the locale.|  \n|[init](#basic_ios__init)|Called by `basic_ios` constructors.|  \n|[move](#basic_ios__move)|Moves all values, except the pointer to the stream buffer, from the parameter to the current object.|  \n|[narrow](#basic_ios__narrow)|Finds the equivalent char to a given `char_type`.|  \n|[rdbuf](#basic_ios__rdbuf)|Routes stream to specified buffer.|  \n|[rdstate](#basic_ios__rdstate)|Reads the state of bits for flags.|  \n|[set_rdbuf](#basic_ios__set_rdbuf)|Assigns a stream buffer to be the read buffer for this stream object.|  \n|[setstate](#basic_ios__setstate)|Sets additional flags.|  \n|[swap](#basic_ios__swap)|Exchanges the values in this `basic_ios` object for those of another `basic_ios` object. The pointers to the stream buffers are not swapped.|  \n|[tie](#basic_ios__tie)|Ensures that one stream is processed before another stream.|  \n|[widen](#basic_ios__widen)|Finds the equivalent `char_type` to a given char.|  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[explicit operator bool](#basic_ios__operator_bool)|Allows use of a `basic_ios` object as a `bool`. Automatic type conversion is disabled to prevent common, unintended side effects.|  \n|[operator void *](#basic_ios__operator_void_star)|Indicates if the stream is still good.|  \n|[operator!](#basic_ios__operator_not)|Indicates if the stream is not bad.|  \n  \n## Requirements  \n **Header:** \\<ios>  \n  \n **Namespace:** std  \n  \n##  <a name=\"basic_ios__bad\"></a>  basic_ios::bad  \n Indicates a loss of integrity of the stream buffer  \n  \n```  \nbool bad() const;\n```  \n  \n### Return Value  \n `true` if `rdstate & badbit` is nonzero; otherwise `false`.  \n  \n For more information on `badbit`, see [ios_base::iostate](../standard-library/ios-base-class.md#ios_base__iostate).  \n  \n### Example  \n  \n```cpp  \n  \n// basic_ios_bad.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nint main( void )  \n{  \n  using namespace std;  \n  bool b = cout.bad( );  \n  cout << boolalpha;  \n  cout << b << endl;  \n    \n  b = cout.good( );  \n  cout << b << endl;  \n}  \n  \n```  \n  \n##  <a name=\"basic_ios__basic_ios\"></a>  basic_ios::basic_ios  \n Constructs the basic_ios class.  \n  \n```   \nexplicit basic_ios(basic_streambuf<Elem,  Traits>* sb);\nbasic_ios();\n```  \n  \n### Parameters  \n `sb`  \n Standard buffer to store input or output elements.  \n  \n### Remarks  \n The first constructor initializes its member objects by calling [init](#basic_ios__init)(_ *Sb*). The second (protected) constructor leaves its member objects uninitialized. A later call to **init** must initialize the object before it can be safely destroyed.  \n  \n##  <a name=\"basic_ios__char_type\"></a>  basic_ios::char_type  \n A synonym for the template parameter **Elem**.  \n  \n```   \ntypedef Elem char_type;  \n```  \n  \n##  <a name=\"basic_ios__clear\"></a>  basic_ios::clear  \n Clears all error flags.  \n  \n```   \nvoid clear(iostate state = goodbit, bool reraise = false); \nvoid clear(io_state state);\n```  \n  \n### Parameters  \n `state` (optional)  \n The flags you want to set after clearing all flags. Defaults to `goodbit`.  \n  \n `reraise` (optional)  \n Specifies whether the exception should be re-raised. Defaults to `false` (will not re-raise the exception).  \n  \n### Remarks  \n The flags are **goodbit**, **failbit**, **eofbit**, and **badbit**. Test for these flags with [good](#basic_ios__good), [bad](#basic_ios__bad), [eof](#basic_ios__eof), and [fail](#basic_ios__fail)  \n  \n The member function replaces the stored stream state information with:  \n  \n `state` &#124; `(`[rdbuf](#basic_ios__rdbuf) != 0 **goodbit** : **badbit**)  \n  \n If `state`**&**[exceptions](#basic_ios__exceptions) is nonzero, it then throws an object of class [failure](../standard-library/ios-base-class.md#ios_base__failure).  \n  \n### Example  \n  See [rdstate](#basic_ios__rdstate) and [getline](../standard-library/string-functions.md#getline) for examples using **clear**.  \n  \n##  <a name=\"basic_ios__copyfmt\"></a>  basic_ios::copyfmt  \n Copies flags from one stream to another.  \n  \n```   \nbasic_ios<Elem, Traits>& copyfmt(\nconst basic_ios<Elem, Traits>& right);\n```  \n  \n### Parameters  \n ` right`  \n The stream whose flags you want to copy.  \n  \n### Return Value  \n The **this** object for the stream to which you are copying the flags.  \n  \n### Remarks  \n The member function reports the callback eventÂ erase_event. It then copies from ` right` into **\\*this** the fill character, the tie pointer, and the formatting information. Before altering the exception mask, it reports the callback event copyfmt_event. If, after the copy is complete, **state &**[exceptions](#basic_ios__exceptions) is nonzero, the function effectively calls [clear](#basic_ios__clear) with the argument [rdstate](#basic_ios__rdstate). It returns **\\*this**.  \n  \n### Example  \n  \n```cpp    \n// basic_ios_copyfmt.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <fstream>  \n  \nint main( )  \n{  \n  using namespace std;  \n  ofstream x( \"test.txt\" );  \n  int i = 10;  \n    \n  x << showpos;  \n  cout << i << endl;  \n  cout.copyfmt( x );  \n  cout << i << endl;  \n}  \n  \n```  \n  \n##  <a name=\"basic_ios__eof\"></a>  basic_ios::eof  \n Indicates if the end of a stream has been reached.  \n  \n```  \nbool eof() const;\n```  \n  \n### Return Value  \n `true` if the end of the stream has been reached, `false` otherwise.  \n  \n### Remarks  \n The member function returns `true` if [rdstate](#basic_ios__rdstate) `& eofbit` is nonzero. For more information on `eofbit`, see [ios_base::iostate](../standard-library/ios-base-class.md#ios_base__iostate).  \n  \n### Example  \n  \n```cpp    \n// basic_ios_eof.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <fstream>  \n  \nusing namespace std;  \n  \nint main( int argc, char* argv[] )  \n{  \n  fstream   fs;  \n  int n = 1;  \n  fs.open( \"basic_ios_eof.txt\" );   // an empty file  \n  cout << boolalpha  \n  cout << fs.eof() << endl;  \n  fs >> n;   // Read the char in the file  \n  cout << fs.eof() << endl;  \n}  \n  \n```  \n  \n##  <a name=\"basic_ios__exceptions\"></a>  basic_ios::exceptions  \n Indicates which exceptions will be thrown by the stream.  \n  \n```   \niostate exceptions() const; \nvoid exceptions(iostate Newexcept);\nvoid exceptions(io_state Newexcept);\n```  \n  \n### Parameters  \n *Newexcept*  \n The flags that you want to throw an exception.  \n  \n### Return Value  \n The flags that are currently specified to thrown an exception for the stream.  \n  \n### Remarks  \n The first member function returns the stored exception mask. The second member function stores *_Except* in the exception mask and returns its previous stored value. Note that storing a new exception mask can throw an exception just like the call [clear](#basic_ios__clear)( [rdstate](#basic_ios__rdstate) ).  \n  \n### Example  \n  \n```cpp  \n  \n// basic_ios_exceptions.cpp  \n// compile with: /EHsc /GR  \n#include <iostream>  \n  \nint main( )  \n{  \n  using namespace std;  \n    \n  cout << cout.exceptions( ) << endl;  \n  cout.exceptions( ios::eofbit );  \n  cout << cout.exceptions( ) << endl;  \n  try  \n  {  \n    cout.clear( ios::eofbit );   // Force eofbit on  \n  }  \n  catch ( exception &e )  \n  {  \n    cout.clear( );  \n    cout << \"Caught the exception.\" << endl;  \n    cout << \"Exception class: \" << typeid(e).name()  << endl;  \n    cout << \"Exception description: \" << e.what() << endl;  \n  }  \n}  \n  \n```  \n  \n```Output  \n  \n0  \n1  \nCaught the exception.  \nException class: class std::ios_base::failure  \nException description: ios_base::eofbit set   \n```  \n  \n##  <a name=\"basic_ios__fail\"></a>  basic_ios::fail  \n Indicates failure to extract a valid field from a stream.  \n  \n```  \nbool fail() const;\n```  \n  \n### Return Value  \n `true` if [rdstate](#basic_ios__rdstate) `& (badbit|failbit)` is nonzero, otherwise `false`.  \n  \n For more information on `failbit`, see [ios_base::iostate](../standard-library/ios-base-class.md#ios_base__iostate).  \n  \n### Example  \n  \n```cpp  \n  \n// basic_ios_fail.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nint main( void )  \n{  \n  using namespace std;  \n  bool b = cout.fail( );  \n  cout << boolalpha;  \n  cout << b << endl;  \n}  \n  \n```  \n  \n##  <a name=\"basic_ios__fill\"></a>  basic_ios::fill  \n Specifies or returns the character that will be used when the text is not as wide as the stream.  \n  \n```   \nchar_type fill() const; \nchar_type fill(char_type Char);\n```  \n  \n### Parameters  \n `Char`  \n The character you want as the fill character.  \n  \n### Return Value  \n The current fill character.  \n  \n### Remarks  \n The first member function returns the stored fill character. The second member function stores `Char` in the fill character and returns its previous stored value.  \n  \n### Example  \n  \n```cpp  \n  \n// basic_ios_fill.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <iomanip>  \n  \nint main( )  \n{  \n  using namespace std;  \n    \n  cout << setw( 5 ) << 'a' << endl;     \n  cout.fill( 'x' );  \n  cout << setw( 5 ) << 'a' << endl;      \n  cout << cout.fill( ) << endl;  \n}  \n  \n```  \n  \n```Output  \n  \na  \nxxxxa  \nx   \n```  \n  \n##  <a name=\"basic_ios__good\"></a>  basic_ios::good  \n Indicates the stream is in good condition.  \n  \n```  \nbool good() const;\n```  \n  \n### Return Value  \n `true` if [rdstate](#basic_ios__rdstate) `== goodbit` (no state flags are set), otherwise, `false`.  \n  \n For more information on `goodbit`, see [ios_base::iostate](../standard-library/ios-base-class.md#ios_base__iostate).  \n  \n### Example  \n  See [basic_ios::bad](#basic_ios__bad) for an example of using `good`.  \n  \n##  <a name=\"basic_ios__imbue\"></a>  basic_ios::imbue  \n Changes the locale.  \n  \n```   \nlocale imbue(const locale& Loc);\n```  \n  \n### Parameters  \n `Loc`  \n A locale string.  \n  \n### Return Value  \n The previous locale.  \n  \n### Remarks  \n If [rdbuf](#basic_ios__rdbuf) is not a null pointer, the member function calls  \n  \n `rdbuf`-> [pubimbue](../standard-library/basic-streambuf-class.md#basic_streambuf__pubimbue)(_ *Loc*)  \n  \n In any case, it returns [ios_base::imbue](../standard-library/ios-base-class.md#ios_base__imbue)(_ *Loc*).  \n  \n### Example  \n  \n```cpp  \n  \n// basic_ios_imbue.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <locale>  \n  \nint main( )  \n{  \n  using namespace std;  \n    \n  cout.imbue( locale( \"french_france\" ) );  \n  double x = 1234567.123456;  \n  cout << x << endl;  \n}  \n  \n```  \n  \n##  <a name=\"basic_ios__init\"></a>  basic_ios::init  \n Called by basic_ios constructors.  \n  \n```  \n \nvoid init(basic_streambuf<Elem,Traits>* _Sb, bool _Isstd = false);\n```  \n  \n### Parameters  \n `_Sb`  \n Standard buffer to store input or output elements.  \n  \n `_Isstd`  \n Specifies whether this is a standard stream.  \n  \n### Remarks  \n The member function stores values in all member objects, so that:  \n  \n- [rdbuf](#basic_ios__rdbuf) returns *_Sb.*  \n  \n- [tie](#basic_ios__tie) returns a null pointer.  \n  \n- [rdstate](#basic_ios__rdstate) returns [goodbit](../standard-library/ios-base-class.md#ios_base__iostate) if `_Sb` is nonzero; otherwise, it returns [badbit](../standard-library/ios-base-class.md#ios_base__iostate).  \n  \n- [exceptions](#basic_ios__exceptions) returns **goodbit**.  \n  \n- [flags](../standard-library/ios-base-class.md#ios_base__flags) returns [skipws](../standard-library/ios-base-class.md#ios_base__fmtflags) &#124; [dec](../standard-library/ios-base-class.md#ios_base__fmtflags).  \n  \n- [width](../standard-library/ios-base-class.md#ios_base__width) returns 0.  \n  \n- [precision](../standard-library/ios-base-class.md#ios_base__precision) returns 6.  \n  \n- [fill](#basic_ios__fill) returns the space character.  \n  \n- [getloc](../standard-library/ios-base-class.md#ios_base__getloc) returns `locale::classic`.  \n  \n- [iword](../standard-library/ios-base-class.md#ios_base__iword) returns zero, and [pword](../standard-library/ios-base-class.md#ios_base__pword) returns a null pointer for all argument values.  \n  \n##  <a name=\"basic_ios__int_type\"></a>  basic_ios::int_type  \n A synonym for **traits_type::int_type**.  \n  \n```  \ntypedef typename traits_type::int_type int_type;  \n```  \n  \n##  <a name=\"basic_ios__move\"></a>  basic_ios::move  \n Moves all values, except the pointer to the stream buffer, from the parameter to the current object.  \n  \n```   \nvoid move(basic_ios&& right);\n```  \n  \n### Parameters  \n `right`  \n The `ios_base` object to move values from.  \n  \n### Remarks  \n The protected member function moves all the values stored in ` right` to `*this` except the stored `stream buffer pointer`, which is unchanged in ` right` and set to a null pointer in `*this`. The stored `tie pointer` is set to a null pointer in ` right`.  \n  \n##  <a name=\"basic_ios__narrow\"></a>  basic_ios::narrow  \n Finds the equivalent char to a given `char_type`.  \n  \n```  \n \nchar narrow(char_type Char, char Default = '\\0') const;\n```  \n  \n### Parameters  \n `Char`  \n The `char` to convert.  \n  \n `Default`  \n The `char` that you want returned if no equivalent is found.  \n  \n### Return Value  \n The equivalent `char` to a given `char_type`.  \n  \n### Remarks  \n The member function returns [use_facet](../standard-library/basic-filebuf-class.md#basic_filebuf__open)**<**Â **ctype**\\< **E**> >( [getloc](../standard-library/ios-base-class.md#ios_base__getloc)( ) ). `narrow`( `Char`, `Default`).  \n  \n### Example  \n  \n```cpp  \n  \n// basic_ios_narrow.cpp  \n// compile with: /EHsc  \n#include <ios>  \n#include <iostream>  \n#include <wchar.h>  \n  \nint main( )  \n{  \n  using namespace std;  \n  wchar_t *x = L\"test\";  \n  char y[10];  \n  cout << x[0] << endl;  \n  wcout << x << endl;  \n  y[0] = wcout.narrow( x[0] );  \n  cout << y[0] << endl;  \n}  \n  \n```  \n  \n##  <a name=\"basic_ios__off_type\"></a>  basic_ios::off_type  \n A synonym for **traits_type::off_type**.  \n  \n```  \ntypedef typename traits_type::off_type off_type;  \n```  \n  \n##  <a name=\"basic_ios__operator_void_star\"></a>  basic_ios::operator void *  \n Indicates if the stream is still good.  \n  \n```  \n operator void *() const;\n```  \n  \n### Return Value  \n The operator returns a null pointer only if [fail](#basic_ios__fail).  \n  \n### Example  \n  \n```cpp  \n  \n// basic_ios_opgood.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nint main( )  \n{  \n  using namespace std;  \n  cout << (bool)(&cout != 0) << endl;   // Stream is still good  \n}  \n  \n```  \n  \n```Output  \n1  \n```  \n  \n##  <a name=\"basic_ios__operator_not\"></a>  basic_ios::operator!  \n Indicates if the stream is not bad.  \n  \n```   \nbool operator!() const;\n```  \n  \n### Return Value  \n Returns [fail](#basic_ios__fail).  \n  \n### Example  \n  \n```cpp  \n  \n// basic_ios_opbad.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nint main( )  \n{  \n  using namespace std;  \n  cout << !cout << endl;   // Stream is not bad  \n}  \n  \n```  \n  \n```Output  \n0  \n```  \n  \n##  <a name=\"basic_ios__operator_bool\"></a>  basic_ios::operator bool  \n Allows use of a `basic_ios` object as a `bool`. Automatic type conversion is disabled to prevent common, unintended side effects.  \n  \n```  \nexplicit operator bool() const;\n```  \n  \n### Remarks  \n The operator returns a value convertible to `false` only if `fail``()`. The return type is convertible only to `bool`, not to `void *` or other known scalar type.  \n  \n##  <a name=\"basic_ios__pos_type\"></a>  basic_ios::pos_type  \n A synonym for **traits_type::pos_type**.  \n  \n```  \ntypedef typename traits_type::pos_type pos_type;  \n```  \n  \n##  <a name=\"basic_ios__rdbuf\"></a>  basic_ios::rdbuf  \n Routes stream to specified buffer.  \n  \n```   \nbasic_streambuf<Elem, Traits> *rdbuf() const; \nbasic_streambuf<Elem, Traits> *rdbuf(\nbasic_streambuf<Elem, Traits>* _Sb);\n```  \n  \n### Parameters  \n `_Sb`  \n A stream.  \n  \n### Remarks  \n The first member function returns the stored stream buffer pointer.  \n  \n The second member function stores `_Sb` in the stored stream buffer pointer and returns the previously stored value.  \n  \n### Example  \n  \n```cpp  \n  \n// basic_ios_rdbuf.cpp  \n// compile with: /EHsc  \n#include <ios>  \n#include <iostream>  \n#include <fstream>  \n  \nint main( )  \n{  \n  using namespace std;  \n  ofstream file( \"rdbuf.txt\" );  \n  streambuf *x = cout.rdbuf( file.rdbuf( ) );  \n  cout << \"test\" << endl;   // Goes to file  \n  cout.rdbuf(x);  \n  cout << \"test2\" << endl;  \n}  \n  \n```  \n  \n```Output  \ntest2  \n```  \n  \n##  <a name=\"basic_ios__rdstate\"></a>  basic_ios::rdstate  \n Reads the state of bits for flags.  \n  \n```  \n \niostate rdstate() const;\n```  \n  \n### Return Value  \n The stored stream state information.  \n  \n### Example  \n  \n```cpp  \n  \n// basic_ios_rdstate.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <fstream>  \nusing namespace std;  \n  \nvoid TestFlags( ios& x )  \n{  \n  cout << ( x.rdstate( ) & ios::badbit ) << endl;  \n  cout << ( x.rdstate( ) & ios::failbit ) << endl;  \n  cout << ( x.rdstate( ) & ios::eofbit ) << endl;  \n  cout << endl;  \n}  \n  \nint main( )  \n{  \n  fstream x( \"c:\\test.txt\", ios::out );  \n  x.clear( );  \n  TestFlags( x );  \n  x.clear( ios::badbit | ios::failbit | ios::eofbit );  \n  TestFlags( x );  \n}  \n  \n```  \n  \n```Output  \n  \n0  \n0  \n0  \n  \n4  \n2  \n1   \n```  \n  \n##  <a name=\"basic_ios__setstate\"></a>  basic_ios::setstate  \n Sets additional flags.  \n  \n```   \nvoid setstate(iostate _State);\n```  \n  \n### Parameters  \n `_State`  \n Additional flags to set.  \n  \n### Remarks  \n The member function effectively calls [clear](#basic_ios__clear)(_ *State* &#124; [rdstate](#basic_ios__rdstate)).  \n  \n### Example  \n  \n```cpp    \n// basic_ios_setstate.cpp  \n// compile with: /EHsc  \n#include <ios>  \n#include <iostream>  \nusing namespace std;  \n  \nint main( )  \n{  \n  bool b = cout.bad( );  \n  cout << b << endl;   // Good  \n  cout.clear( ios::badbit );  \n  b = cout.bad( );  \n  // cout.clear( );  \n  cout << b << endl;   // Is bad, good  \n  b = cout.fail( );  \n  cout << b << endl;   // Not failed  \n  cout.setstate( ios::failbit );  \n  b = cout.fail( );  \n  cout.clear( );  \n  cout << b << endl;   // Is failed, good  \n  return 0;  \n}  \n  \n```  \n  \n```Output  \n  \n0  \n1   \n```  \n  \n##  <a name=\"basic_ios__set_rdbuf\"></a>  basic_ios::set_rdbuf  \n Assigns a stream buffer to be the read buffer for this stream object.  \n  \n```   \nvoid set_rdbuf(\nbasic_streambuf<Elem, Tr>* strbuf)  \n```  \n  \n### Parameters  \n ` strbuf`  \n The stream buffer to become the read buffer.  \n  \n### Remarks  \n The protected member function stores ` strbuf` in the `stream buffer pointer`.It does not call `clear`.  \n  \n##  <a name=\"basic_ios__tie\"></a>  basic_ios::tie  \n Ensures that one stream is processed before another stream.  \n  \n```  \n \nbasic_ostream<Elem, Traits> *tie() const; \nbasic_ostream<Elem, Traits> *tie(\nbasic_ostream<Elem, Traits>* str);\n```  \n  \n### Parameters  \n ` str`  \n A stream.  \n  \n### Return Value  \n The first member function returns the stored tie pointer. The second member function stores ` str` in the tie pointer and returns its previous stored value.  \n  \n### Remarks  \n `tie` causes two streams to be synchronized, such that, operations on one stream occur after operations on the other stream are complete.  \n  \n### Example  \n  In this example, by tying cin to cout, it is guaranteed that the \"Enter a number:\" string will go to the console before the number itself is extracted from cin. This eliminates the possibility that the \"Enter a number:\" string is still sitting in the buffer when the number is read, so that we are certain that the user actually has some prompt to respond to. By default, cin and cout are tied.  \n  \n```  \n  \n#include <ios>  \n#include <iostream>  \n  \nint main( )  \n{  \n  using namespace std;  \n  int i;  \n  cin.tie( &cout );  \n  cout << \"Enter a number:\";  \n  cin >> i;  \n}  \n  \n```  \n  \n##  <a name=\"basic_ios__traits_type\"></a>  basic_ios::traits_type  \n A synonym for the template parameter **Traits**.  \n  \n```   \ntypedef Traits traits_type;  \n```  \n  \n##  <a name=\"basic_ios__widen\"></a>  basic_ios::widen  \n Finds the equivalent `char_type` to a given `char`.  \n  \n```   \nchar_type widen(char Char) const;\n```  \n  \n### Parameters  \n `Char`  \n The character to convert.  \n  \n### Return Value  \n Finds the equivalent `char_type` to a given `char`.  \n  \n### Remarks  \n The member function returns [use_facet](../standard-library/basic-filebuf-class.md#basic_filebuf__open)< **ctype**\\< **E**> >( [getloc](../standard-library/ios-base-class.md#ios_base__getloc)). `widen`( `Char`).  \n  \n### Example  \n  \n```cpp    \n// basic_ios_widen.cpp  \n// compile with: /EHsc  \n#include <ios>  \n#include <iostream>  \n#include <wchar.h>  \n  \nint main( )  \n{  \n  using namespace std;  \n  char *z = \"Hello\";  \n  wchar_t y[2] = {0,0};  \n  cout << z[0] << endl;  \n  y[0] = wcout.widen( z[0] );  \n  wcout << &y[0] << endl;  \n}  \n  \n```  \n  \n##  <a name=\"basic_ios__swap\"></a>  basic_ios::swap  \n Exchanges the values in this `basic_ios` object for those of another `basic_ios` object. However, the pointers to the stream buffers are not swapped.  \n  \n```   \nvoid swap(basic_ios&& right);\n```  \n  \n### Parameters  \n `right`  \n The `basic_ios` object that is used to exchange values.  \n  \n### Remarks  \n The protected member function exchanges all the values stored in ` right` with `*this` except the stored `stream buffer pointer`.  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [iostream Programming](../standard-library/iostream-programming.md)   \n [iostreams Conventions](../standard-library/iostreams-conventions.md)\n\n"}