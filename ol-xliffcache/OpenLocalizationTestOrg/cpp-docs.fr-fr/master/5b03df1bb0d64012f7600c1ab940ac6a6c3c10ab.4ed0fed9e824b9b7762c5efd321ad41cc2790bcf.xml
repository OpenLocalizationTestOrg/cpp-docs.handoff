{"nodes":[{"pos":[12,49],"content":"multitype_join Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"multitype_join Class | Microsoft Docs","pos":[0,37]}]},{"content":"multitype_join Class","pos":[634,654]},{"pos":[655,874],"content":"A <ph id=\"ph1\">`multitype_join`</ph> messaging block is a multi-source, single-target messaging block that combines together messages of different types from each of its sources and offers a tuple of the combined messages to its targets.","source":"A `multitype_join` messaging block is a multi-source, single-target messaging block that combines together messages of different types from each of its sources and offers a tuple of the combined messages to its targets."},{"content":"Syntax","pos":[883,889]},{"content":"Parameters","pos":[1050,1060]},{"content":"The <ph id=\"ph1\">`tuple`</ph> payload type of the messages joined and propagated by the block.","pos":[1071,1147],"source":" The `tuple` payload type of the messages joined and propagated by the block."},{"content":"The kind of <ph id=\"ph1\">`join`</ph> block this is, either <ph id=\"ph2\">`greedy`</ph> or","pos":[1166,1218],"source":" The kind of `join` block this is, either `greedy` or "},{"content":"Members","pos":[1240,1247]},{"content":"Public Typedefs","pos":[1257,1272]},{"content":"Name","pos":[1279,1283]},{"content":"Description","pos":[1284,1295]},{"pos":[1340,1361],"content":"A type alias for <ph id=\"ph1\">`T`</ph>.","source":"A type alias for `T`."},{"content":"Public Constructors","pos":[1372,1391]},{"content":"Name","pos":[1398,1402]},{"content":"Description","pos":[1403,1414]},{"content":"multitype_join::multitype_join Constructor","pos":[1453,1495]},{"content":"Overloaded.","pos":[1504,1515]},{"content":"Constructs a <ph id=\"ph1\">`multitype_join`</ph> messaging block.","pos":[1516,1562],"source":" Constructs a `multitype_join` messaging block."},{"content":"multitype_join::~multitype_join Destructor","pos":[1568,1610]},{"pos":[1619,1665],"content":"Destroys the <ph id=\"ph1\">`multitype_join`</ph> messaging block.","source":"Destroys the `multitype_join` messaging block."},{"content":"Public Methods","pos":[1676,1690]},{"content":"Name","pos":[1697,1701]},{"content":"Description","pos":[1702,1713]},{"content":"multitype_join::accept Method","pos":[1752,1781]},{"pos":[1792,1896],"content":"Accepts a message that was offered by this <ph id=\"ph1\">`multitype_join`</ph> block, transferring ownership to the caller.","source":"Accepts a message that was offered by this `multitype_join` block, transferring ownership to the caller."},{"content":"multitype_join::acquire_ref Method","pos":[1902,1936]},{"pos":[1952,2041],"content":"Acquires a reference count on this <ph id=\"ph1\">`multitype_join`</ph> messaging block, to prevent deletion.","source":"Acquires a reference count on this `multitype_join` messaging block, to prevent deletion."},{"content":"multitype_join::consume Method","pos":[2047,2077]},{"pos":[2089,2245],"content":"Consumes a message previously offered by the <ph id=\"ph1\">`multitype_join`</ph> messaging block and successfully reserved by the target, transferring ownership to the caller.","source":"Consumes a message previously offered by the `multitype_join` messaging block and successfully reserved by the target, transferring ownership to the caller."},{"content":"multitype_join::link_target Method","pos":[2251,2285]},{"pos":[2301,2363],"content":"Links a target block to this <ph id=\"ph1\">`multitype_join`</ph> messaging block.","source":"Links a target block to this `multitype_join` messaging block."},{"content":"multitype_join::release Method","pos":[2369,2399]},{"content":"Releases a previous successful message reservation.","pos":[2411,2462]},{"content":"multitype_join::release_ref Method","pos":[2468,2502]},{"pos":[2518,2585],"content":"Releases a reference count on this <ph id=\"ph1\">`multiple_join`</ph> messaging block.","source":"Releases a reference count on this `multiple_join` messaging block."},{"content":"multitype_join::reserve Method","pos":[2591,2621]},{"pos":[2633,2712],"content":"Reserves a message previously offered by this <ph id=\"ph1\">`multitype_join`</ph> messaging block.","source":"Reserves a message previously offered by this `multitype_join` messaging block."},{"content":"multitype_join::unlink_target Method","pos":[2718,2754]},{"pos":[2772,2838],"content":"Unlinks a target block from this <ph id=\"ph1\">`multitype_join`</ph> messaging block.","source":"Unlinks a target block from this `multitype_join` messaging block."},{"content":"multitype_join::unlink_targets Method","pos":[2844,2881]},{"content":"Unlinks all targets from this <ph id=\"ph1\">`multitype_join`</ph> messaging block.","pos":[2900,2963],"source":"Unlinks all targets from this `multitype_join` messaging block."},{"content":"(Overrides <bpt id=\"p1\">[</bpt>ISource::unlink_targets<ept id=\"p1\">](isource-class.md#unlink_targets)</ept>.)","pos":[2964,3035],"source":" (Overrides [ISource::unlink_targets](isource-class.md#unlink_targets).)"},{"content":"Remarks","pos":[3045,3052]},{"pos":[3056,3169],"content":"For more information, see <bpt id=\"p1\">[</bpt>Asynchronous Message Blocks<ept id=\"p1\">](../../../parallel/concrt/asynchronous-message-blocks.md)</ept>.","source":"For more information, see [Asynchronous Message Blocks](../../../parallel/concrt/asynchronous-message-blocks.md)."},{"content":"Inheritance Hierarchy","pos":[3178,3199]},{"content":"ISource","pos":[3204,3211]},{"content":"Requirements","pos":[3262,3274]},{"pos":[3278,3298],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> agents.h","source":"**Header:** agents.h"},{"pos":[3305,3331],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[3364,3393],"content":"multitype_join::accept Method"},{"pos":[3397,3501],"content":"Accepts a message that was offered by this <ph id=\"ph1\">`multitype_join`</ph> block, transferring ownership to the caller.","source":"Accepts a message that was offered by this `multitype_join` block, transferring ownership to the caller."},{"content":"Parameters","pos":[3659,3669]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the offered <ph id=\"ph2\">`message`</ph> object.","pos":[3685,3747],"source":" The `runtime_object_identity` of the offered `message` object."},{"content":"A pointer to the target block that is calling the <ph id=\"ph1\">`accept`</ph> method.","pos":[3768,3834],"source":" A pointer to the target block that is calling the `accept` method."},{"content":"Return Value","pos":[3844,3856]},{"content":"A pointer to the message that the caller now has ownership of.","pos":[3860,3922]},{"pos":[3960,3994],"content":"multitype_join::acquire_ref Method"},{"pos":[3998,4087],"content":"Acquires a reference count on this <ph id=\"ph1\">`multitype_join`</ph> messaging block, to prevent deletion.","source":"Acquires a reference count on this `multitype_join` messaging block, to prevent deletion."},{"content":"Parameters","pos":[4184,4194]},{"content":"A pointer to the target block that is calling this method.","pos":[4212,4270]},{"content":"Remarks","pos":[4280,4287]},{"pos":[4291,4404],"content":"This method is called by an <ph id=\"ph1\">`ITarget`</ph> object that is being linked to this source during the <ph id=\"ph2\">`link_target`</ph> method.","source":"This method is called by an `ITarget` object that is being linked to this source during the `link_target` method."},{"pos":[4438,4468],"content":"multitype_join::consume Method"},{"pos":[4472,4628],"content":"Consumes a message previously offered by the <ph id=\"ph1\">`multitype_join`</ph> messaging block and successfully reserved by the target, transferring ownership to the caller.","source":"Consumes a message previously offered by the `multitype_join` messaging block and successfully reserved by the target, transferring ownership to the caller."},{"content":"Parameters","pos":[4787,4797]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the reserved <ph id=\"ph2\">`message`</ph> object.","pos":[4813,4876],"source":" The `runtime_object_identity` of the reserved `message` object."},{"content":"A pointer to the target block that is calling the <ph id=\"ph1\">`consume`</ph> method.","pos":[4897,4964],"source":" A pointer to the target block that is calling the `consume` method."},{"content":"Return Value","pos":[4974,4986]},{"pos":[4990,5061],"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object that the caller now has ownership of.","source":"A pointer to the `message` object that the caller now has ownership of."},{"content":"Remarks","pos":[5071,5078]},{"pos":[5082,5199],"content":"The <ph id=\"ph1\">`consume`</ph> method is similar to <ph id=\"ph2\">`accept`</ph>, but must always be preceded by a call to <ph id=\"ph3\">`reserve`</ph> that returned <ph id=\"ph4\">`true`</ph>.","source":"The `consume` method is similar to `accept`, but must always be preceded by a call to `reserve` that returned `true`."},{"pos":[5237,5271],"content":"multitype_join::link_target Method"},{"pos":[5275,5337],"content":"Links a target block to this <ph id=\"ph1\">`multitype_join`</ph> messaging block.","source":"Links a target block to this `multitype_join` messaging block."},{"content":"Parameters","pos":[5434,5444]},{"content":"A pointer to an <ph id=\"ph1\">`ITarget`</ph> block to link to this <ph id=\"ph2\">`multitype_join`</ph> messaging block.","pos":[5462,5543],"source":" A pointer to an `ITarget` block to link to this `multitype_join` messaging block."},{"pos":[5574,5616],"content":"multitype_join::multitype_join Constructor"},{"pos":[5620,5666],"content":"Constructs a <ph id=\"ph1\">`multitype_join`</ph> messaging block.","source":"Constructs a `multitype_join` messaging block."},{"content":"Parameters","pos":[5915,5925]},{"content":"A <ph id=\"ph1\">`tuple`</ph> of sources for this <ph id=\"ph2\">`multitype_join`</ph> messaging block.","pos":[5941,6004],"source":" A `tuple` of sources for this `multitype_join` messaging block."},{"content":"The <ph id=\"ph1\">`Scheduler`</ph> object within which the propagation task for the <ph id=\"ph2\">`multitype_join`</ph> messaging block is scheduled.","pos":[6028,6139],"source":" The `Scheduler` object within which the propagation task for the `multitype_join` messaging block is scheduled."},{"content":"The <ph id=\"ph1\">`ScheduleGroup`</ph> object within which the propagation task for the <ph id=\"ph2\">`multitype_join`</ph> messaging block is scheduled.","pos":[6167,6282],"source":" The `ScheduleGroup` object within which the propagation task for the `multitype_join` messaging block is scheduled."},{"content":"The <ph id=\"ph1\">`Scheduler`</ph> object used is implied by the schedule group.","pos":[6283,6344],"source":" The `Scheduler` object used is implied by the schedule group."},{"content":"A <ph id=\"ph1\">`multitype_join`</ph> messaging block to copy from.","pos":[6362,6410],"source":" A `multitype_join` messaging block to copy from."},{"content":"Note that the original object is orphaned, making this a move constructor.","pos":[6411,6485]},{"content":"Remarks","pos":[6495,6502]},{"pos":[6506,6617],"content":"The runtime uses the default scheduler if you do not specify the <ph id=\"ph1\">`_PScheduler`</ph> or <ph id=\"ph2\">`_PScheduleGroup`</ph> parameters.","source":"The runtime uses the default scheduler if you do not specify the `_PScheduler` or `_PScheduleGroup` parameters."},{"content":"Move construction is not performed under a lock, which means that it is up to the user to make sure that there are no light-weight tasks in flight at the time of moving.","pos":[6624,6793]},{"content":"Otherwise, numerous races can occur, leading to exceptions or inconsistent state.","pos":[6794,6875]},{"pos":[6906,6948],"content":"multitype_join::~multitype_join Destructor"},{"pos":[6952,6998],"content":"Destroys the <ph id=\"ph1\">`multitype_join`</ph> messaging block.","source":"Destroys the `multitype_join` messaging block."},{"pos":[7066,7096],"content":"multitype_join::release Method"},{"content":"Releases a previous successful message reservation.","pos":[7100,7151]},{"content":"Parameters","pos":[7287,7297]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the <ph id=\"ph2\">`message`</ph> object being released.","pos":[7313,7382],"source":" The `runtime_object_identity` of the `message` object being released."},{"content":"A pointer to the target block that is calling the <ph id=\"ph1\">`release`</ph> method.","pos":[7403,7470],"source":" A pointer to the target block that is calling the `release` method."},{"pos":[7508,7542],"content":"multitype_join::release_ref Method"},{"pos":[7546,7613],"content":"Releases a reference count on this <ph id=\"ph1\">`multiple_join`</ph> messaging block.","source":"Releases a reference count on this `multiple_join` messaging block."},{"content":"Parameters","pos":[7710,7720]},{"content":"A pointer to the target block that is calling this method.","pos":[7738,7796]},{"content":"Remarks","pos":[7806,7813]},{"content":"This method is called by an <ph id=\"ph1\">`ITarget`</ph> object that is being unlinked from this source.","pos":[7817,7902],"source":"This method is called by an `ITarget` object that is being unlinked from this source."},{"content":"The source block is allowed to release any resources reserved for the target block.","pos":[7903,7986]},{"pos":[8020,8050],"content":"multitype_join::reserve Method"},{"pos":[8054,8133],"content":"Reserves a message previously offered by this <ph id=\"ph1\">`multitype_join`</ph> messaging block.","source":"Reserves a message previously offered by this `multitype_join` messaging block."},{"content":"Parameters","pos":[8269,8279]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the <ph id=\"ph2\">`message`</ph> object being reserved.","pos":[8295,8364],"source":" The `runtime_object_identity` of the `message` object being reserved."},{"content":"A pointer to the target block that is calling the <ph id=\"ph1\">`reserve`</ph> method.","pos":[8385,8452],"source":" A pointer to the target block that is calling the `reserve` method."},{"content":"Return Value","pos":[8462,8474]},{"content":"if the message was successfully reserved, <ph id=\"ph1\">`false`</ph> otherwise.","pos":[8485,8545],"source":" if the message was successfully reserved, `false` otherwise."},{"content":"Reservations can fail for many reasons, including: the message was already reserved or accepted by another target, the source could deny reservations, and so forth.","pos":[8546,8710]},{"content":"Remarks","pos":[8720,8727]},{"pos":[8731,8885],"content":"After you call <ph id=\"ph1\">`reserve`</ph>, if it succeeds, you must call either <ph id=\"ph2\">`consume`</ph> or <ph id=\"ph3\">`release`</ph> in order to take or give up possession of the message, respectively.","source":"After you call `reserve`, if it succeeds, you must call either `consume` or `release` in order to take or give up possession of the message, respectively."},{"pos":[8925,8961],"content":"multitype_join::unlink_target Method"},{"pos":[8965,9031],"content":"Unlinks a target block from this <ph id=\"ph1\">`multitype_join`</ph> messaging block.","source":"Unlinks a target block from this `multitype_join` messaging block."},{"content":"Parameters","pos":[9130,9140]},{"content":"A pointer to an <ph id=\"ph1\">`ITarget`</ph> block to unlink from this <ph id=\"ph2\">`multitype_join`</ph> messaging block.","pos":[9158,9243],"source":" A pointer to an `ITarget` block to unlink from this `multitype_join` messaging block."},{"pos":[9284,9321],"content":"multitype_join::unlink_targets Method"},{"pos":[9325,9388],"content":"Unlinks all targets from this <ph id=\"ph1\">`multitype_join`</ph> messaging block.","source":"Unlinks all targets from this `multitype_join` messaging block."},{"content":"See Also","pos":[9443,9451]},{"content":"concurrency Namespace","pos":[9456,9477]},{"content":"choice Class","pos":[9510,9522]},{"content":"join Class","pos":[9546,9556]}],"content":"---\ntitle: \"multitype_join Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"agents/concurrency::multitype_join\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"multitype_join class\"\nms.assetid: 236e87a0-4867-49fd-869a-bef4010e49a7\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# multitype_join Class\nA `multitype_join` messaging block is a multi-source, single-target messaging block that combines together messages of different types from each of its sources and offers a tuple of the combined messages to its targets.  \n  \n## Syntax  \n  \n```  \ntemplate<\n    typename T,  \n    join_type _Jtype = non_greedy  \n>  \nclass multitype_join: public ISource<typename _Unwrap<T>::type>;  \n```  \n  \n#### Parameters  \n `T`  \n The `tuple` payload type of the messages joined and propagated by the block.  \n  \n `_Jtype`  \n The kind of `join` block this is, either `greedy` or `non_greedy`  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`type`|A type alias for `T`.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[multitype_join::multitype_join Constructor](#ctor)|Overloaded. Constructs a `multitype_join` messaging block.|  \n|[multitype_join::~multitype_join Destructor](#dtor)|Destroys the `multitype_join` messaging block.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[multitype_join::accept Method](#accept)|Accepts a message that was offered by this `multitype_join` block, transferring ownership to the caller.|  \n|[multitype_join::acquire_ref Method](#acquire_ref)|Acquires a reference count on this `multitype_join` messaging block, to prevent deletion.|  \n|[multitype_join::consume Method](#consume)|Consumes a message previously offered by the `multitype_join` messaging block and successfully reserved by the target, transferring ownership to the caller.|  \n|[multitype_join::link_target Method](#link_target)|Links a target block to this `multitype_join` messaging block.|  \n|[multitype_join::release Method](#release)|Releases a previous successful message reservation.|  \n|[multitype_join::release_ref Method](#release_ref)|Releases a reference count on this `multiple_join` messaging block.|  \n|[multitype_join::reserve Method](#reserve)|Reserves a message previously offered by this `multitype_join` messaging block.|  \n|[multitype_join::unlink_target Method](#unlink_target)|Unlinks a target block from this `multitype_join` messaging block.|  \n|[multitype_join::unlink_targets Method](#unlink_targets)|Unlinks all targets from this `multitype_join` messaging block. (Overrides [ISource::unlink_targets](isource-class.md#unlink_targets).)|  \n  \n## Remarks  \n For more information, see [Asynchronous Message Blocks](../../../parallel/concrt/asynchronous-message-blocks.md).  \n  \n## Inheritance Hierarchy  \n [ISource](isource-class.md)  \n  \n `multitype_join`  \n  \n## Requirements  \n **Header:** agents.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"accept\"></a>  multitype_join::accept Method  \n Accepts a message that was offered by this `multitype_join` block, transferring ownership to the caller.  \n  \n```  \nvirtual message<_Destination_type>* accept(\n    runtime_object_identity _MsgId,  \n    _Inout_ ITarget<_Destination_type>* _PTarget);\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the offered `message` object.  \n  \n `_PTarget`  \n A pointer to the target block that is calling the `accept` method.  \n  \n### Return Value  \n A pointer to the message that the caller now has ownership of.  \n  \n##  <a name=\"acquire_ref\"></a>  multitype_join::acquire_ref Method  \n Acquires a reference count on this `multitype_join` messaging block, to prevent deletion.  \n  \n```  \nvirtual void acquire_ref(_Inout_ ITarget<_Destination_type>* _PTarget);\n```  \n  \n### Parameters  \n `_PTarget`  \n A pointer to the target block that is calling this method.  \n  \n### Remarks  \n This method is called by an `ITarget` object that is being linked to this source during the `link_target` method.  \n  \n##  <a name=\"consume\"></a>  multitype_join::consume Method  \n Consumes a message previously offered by the `multitype_join` messaging block and successfully reserved by the target, transferring ownership to the caller.  \n  \n```  \nvirtual message<_Destination_type>* consume(\n    runtime_object_identity _MsgId,  \n    _Inout_ ITarget<_Destination_type>* _PTarget);\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the reserved `message` object.  \n  \n `_PTarget`  \n A pointer to the target block that is calling the `consume` method.  \n  \n### Return Value  \n A pointer to the `message` object that the caller now has ownership of.  \n  \n### Remarks  \n The `consume` method is similar to `accept`, but must always be preceded by a call to `reserve` that returned `true`.  \n  \n##  <a name=\"link_target\"></a>  multitype_join::link_target Method  \n Links a target block to this `multitype_join` messaging block.  \n  \n```  \nvirtual void link_target(_Inout_ ITarget<_Destination_type>* _PTarget);\n```  \n  \n### Parameters  \n `_PTarget`  \n A pointer to an `ITarget` block to link to this `multitype_join` messaging block.  \n  \n##  <a name=\"ctor\"></a>  multitype_join::multitype_join Constructor  \n Constructs a `multitype_join` messaging block.  \n  \n```  \nexplicit multitype_join(\n    T _Tuple);\n\n \nmultitype_join(\n    Scheduler& _PScheduler,  \n    T _Tuple);\n\n \nmultitype_join(\n    ScheduleGroup& _PScheduleGroup,  \n    T _Tuple);\n\n \nmultitype_join(\n    multitype_join&& _Join);\n```  \n  \n### Parameters  \n `_Tuple`  \n A `tuple` of sources for this `multitype_join` messaging block.  \n  \n `_PScheduler`  \n The `Scheduler` object within which the propagation task for the `multitype_join` messaging block is scheduled.  \n  \n `_PScheduleGroup`  \n The `ScheduleGroup` object within which the propagation task for the `multitype_join` messaging block is scheduled. The `Scheduler` object used is implied by the schedule group.  \n  \n `_Join`  \n A `multitype_join` messaging block to copy from. Note that the original object is orphaned, making this a move constructor.  \n  \n### Remarks  \n The runtime uses the default scheduler if you do not specify the `_PScheduler` or `_PScheduleGroup` parameters.  \n  \n Move construction is not performed under a lock, which means that it is up to the user to make sure that there are no light-weight tasks in flight at the time of moving. Otherwise, numerous races can occur, leading to exceptions or inconsistent state.  \n  \n##  <a name=\"dtor\"></a>  multitype_join::~multitype_join Destructor  \n Destroys the `multitype_join` messaging block.  \n  \n```  \n~multitype_join();\n```  \n  \n##  <a name=\"release\"></a>  multitype_join::release Method  \n Releases a previous successful message reservation.  \n  \n```  \nvirtual void release(\n    runtime_object_identity _MsgId,  \n    _Inout_ ITarget<_Destination_type>* _PTarget);\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the `message` object being released.  \n  \n `_PTarget`  \n A pointer to the target block that is calling the `release` method.  \n  \n##  <a name=\"release_ref\"></a>  multitype_join::release_ref Method  \n Releases a reference count on this `multiple_join` messaging block.  \n  \n```  \nvirtual void release_ref(_Inout_ ITarget<_Destination_type>* _PTarget);\n```  \n  \n### Parameters  \n `_PTarget`  \n A pointer to the target block that is calling this method.  \n  \n### Remarks  \n This method is called by an `ITarget` object that is being unlinked from this source. The source block is allowed to release any resources reserved for the target block.  \n  \n##  <a name=\"reserve\"></a>  multitype_join::reserve Method  \n Reserves a message previously offered by this `multitype_join` messaging block.  \n  \n```  \nvirtual bool reserve(\n    runtime_object_identity _MsgId,  \n    _Inout_ ITarget<_Destination_type>* _PTarget);\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the `message` object being reserved.  \n  \n `_PTarget`  \n A pointer to the target block that is calling the `reserve` method.  \n  \n### Return Value  \n `true` if the message was successfully reserved, `false` otherwise. Reservations can fail for many reasons, including: the message was already reserved or accepted by another target, the source could deny reservations, and so forth.  \n  \n### Remarks  \n After you call `reserve`, if it succeeds, you must call either `consume` or `release` in order to take or give up possession of the message, respectively.  \n  \n##  <a name=\"unlink_target\"></a>  multitype_join::unlink_target Method  \n Unlinks a target block from this `multitype_join` messaging block.  \n  \n```  \nvirtual void unlink_target(_Inout_ ITarget<_Destination_type>* _PTarget);\n```  \n  \n### Parameters  \n `_PTarget`  \n A pointer to an `ITarget` block to unlink from this `multitype_join` messaging block.  \n  \n##  <a name=\"unlink_targets\"></a>  multitype_join::unlink_targets Method  \n Unlinks all targets from this `multitype_join` messaging block.  \n  \n```  \nvirtual void unlink_targets();\n```  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)   \n [choice Class](choice-class.md)   \n [join Class](join-class.md)\n"}