{"nodes":[{"pos":[12,47],"content":"_locking Constants | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_locking Constants | Microsoft Docs","pos":[0,35]}]},{"content":"_locking Constants","pos":[893,911]},{"content":"Syntax","pos":[915,921]},{"content":"Remarks","pos":[978,985]},{"pos":[989,1093],"content":"The <bpt id=\"p1\">*</bpt>mode<ept id=\"p1\">*</ept> argument in the call to the <ph id=\"ph1\">`_locking`</ph> function specifies the locking action to be performed.","source":"The *mode* argument in the call to the `_locking` function specifies the locking action to be performed."},{"pos":[1100,1168],"content":"The <bpt id=\"p1\">*</bpt>mode<ept id=\"p1\">*</ept> argument must be one of the following manifest constants.","source":"The *mode* argument must be one of the following manifest constants."},{"content":"Locks the specified bytes.","pos":[1189,1215]},{"content":"If the bytes cannot be locked, the function tries again after 1 second.","pos":[1216,1287]},{"content":"If, after 10 attempts, the bytes cannot be locked, the function returns an error.","pos":[1288,1369]},{"content":"Same as <ph id=\"ph1\">`_LK_LOCK`</ph>.","pos":[1390,1409],"source":" Same as `_LK_LOCK`."},{"content":"Locks the specified bytes.","pos":[1431,1457]},{"content":"If bytes cannot be locked, the function returns an error.","pos":[1458,1515]},{"content":"Same as <ph id=\"ph1\">`_LK_NBLCK`</ph>.","pos":[1538,1558],"source":" Same as `_LK_NBLCK`."},{"content":"Unlocks the specified bytes.","pos":[1580,1608]},{"content":"(The bytes must have been previously locked.)","pos":[1609,1654]},{"content":"See Also","pos":[1663,1671]},{"content":"_locking","pos":[1676,1684]},{"content":"Global Constants","pos":[1734,1750]}],"content":"---\ntitle: \"_locking Constants | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"_LK_RLCK\"\n  - \"_LK_NBLCK\"\n  - \"_LK_LOCK\"\n  - \"_LK_NBRLCK\"\n  - \"_LK_UNLCK\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"LK_UNLCK constant\"\n  - \"LK_NBRLCK constant\"\n  - \"_LK_NBRLCK constant\"\n  - \"_LK_NBLCK constant\"\n  - \"_LK_LOCK constant\"\n  - \"LK_NBLCK constant\"\n  - \"_LK_UNLCK constant\"\n  - \"LK_RLCK constant\"\n  - \"_LK_RLCK constant\"\n  - \"LK_LOCK constant\"\nms.assetid: c3dc92c8-60e3-4d29-9f50-5d217627c8ad\ncaps.latest.revision: 7\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _locking Constants\n## Syntax  \n  \n```  \n  \n#include <sys/locking.h>  \n  \n```  \n  \n## Remarks  \n The *mode* argument in the call to the `_locking` function specifies the locking action to be performed.  \n  \n The *mode* argument must be one of the following manifest constants.  \n  \n `_LK_LOCK`  \n Locks the specified bytes. If the bytes cannot be locked, the function tries again after 1 second. If, after 10 attempts, the bytes cannot be locked, the function returns an error.  \n  \n `_LK_RLCK`  \n Same as `_LK_LOCK`.  \n  \n `_LK_NBLCK`  \n Locks the specified bytes. If bytes cannot be locked, the function returns an error.  \n  \n `_LK_NBRLCK`  \n Same as `_LK_NBLCK`.  \n  \n `_LK_UNLCK`  \n Unlocks the specified bytes. (The bytes must have been previously locked.)  \n  \n## See Also  \n [_locking](../c-runtime-library/reference/locking.md)   \n [Global Constants](../c-runtime-library/global-constants.md)"}