{"nodes":[{"pos":[12,41],"content":"_setmaxstdio | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_setmaxstdio | Microsoft Docs","pos":[0,29]}]},{"pos":[1021,1033],"content":"_setmaxstdio","linkify":"_setmaxstdio","nodes":[{"content":"_setmaxstdio","pos":[0,12]}]},{"pos":[1034,1114],"content":"Sets a maximum for the number of simultaneously open files at the <ph id=\"ph1\">`stdio`</ph> level.","source":"Sets a maximum for the number of simultaneously open files at the `stdio` level."},{"pos":[1123,1129],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1197,1207],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"New maximum for the number of simultaneously open files at the <ph id=\"ph1\">`stdio`</ph> level.","pos":[1223,1300],"source":" New maximum for the number of simultaneously open files at the `stdio` level."},{"pos":[1309,1321],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1325,1370],"content":"Returns <ph id=\"ph1\">`newmax`</ph> if successful; –1 otherwise.","source":"Returns `newmax` if successful; –1 otherwise."},{"content":"If <ph id=\"ph1\">`newmax`</ph> is less than <ph id=\"ph2\">`_IOB_ENTRIES`</ph> or greater then the maximum number of handles available in the operating system, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1377,1628],"source":"If `newmax` is less than `_IOB_ENTRIES` or greater then the maximum number of handles available in the operating system, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, this function returns -1 and sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[1629,1720],"source":" If execution is allowed to continue, this function returns -1 and sets `errno` to `EINVAL`."},{"pos":[1727,1898],"content":"For information about these and other error codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For information about these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"pos":[1907,1914],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1918,2051],"content":"The <ph id=\"ph1\">`_setmaxstdio`</ph> function changes the maximum value for the number of files that might be simultaneously open at the <ph id=\"ph2\">`stdio`</ph> level.","source":"The `_setmaxstdio` function changes the maximum value for the number of files that might be simultaneously open at the `stdio` level."},{"content":"C run-time I/O now supports many more open files on Win32 platforms than in previous versions.","pos":[2058,2152]},{"content":"Up to 2,048 files can be open simultaneously at the <bpt id=\"p1\">[</bpt>lowio level<ept id=\"p1\">](../../c-runtime-library/low-level-i-o.md)</ept> (that is, opened and accessed by means of the <ph id=\"ph1\">`_open`</ph>, <ph id=\"ph2\">`_read`</ph>, <ph id=\"ph3\">`_write`</ph>, and so forth family of I/O functions).","pos":[2153,2373],"source":" Up to 2,048 files can be open simultaneously at the [lowio level](../../c-runtime-library/low-level-i-o.md) (that is, opened and accessed by means of the `_open`, `_read`, `_write`, and so forth family of I/O functions)."},{"content":"Up to 512 files can be open simultaneously at the <bpt id=\"p1\">[</bpt>stdio level<ept id=\"p1\">](../../c-runtime-library/stream-i-o.md)</ept> (that is, opened and accessed by means of the <ph id=\"ph1\">`fopen`</ph>, <ph id=\"ph2\">`fgetc`</ph>, <ph id=\"ph3\">`fputc`</ph>, and so forth family of functions).","pos":[2374,2584],"source":" Up to 512 files can be open simultaneously at the [stdio level](../../c-runtime-library/stream-i-o.md) (that is, opened and accessed by means of the `fopen`, `fgetc`, `fputc`, and so forth family of functions)."},{"content":"The limit of 512 open files at the <ph id=\"ph1\">`stdio`</ph> level can be increased to a maximum of 2,048 by means of the <ph id=\"ph2\">`_setmaxstdio`</ph> function.","pos":[2585,2713],"source":" The limit of 512 open files at the `stdio` level can be increased to a maximum of 2,048 by means of the `_setmaxstdio` function."},{"pos":[2720,2940],"content":"Because <ph id=\"ph1\">`stdio`</ph>-level functions, such as <ph id=\"ph2\">`fopen`</ph>, are built on top of the <ph id=\"ph3\">`lowio`</ph> functions, the maximum of 2,048 is a hard upper limit for the number of simultaneously open files accessed through the C run-time library.","source":"Because `stdio`-level functions, such as `fopen`, are built on top of the `lowio` functions, the maximum of 2,048 is a hard upper limit for the number of simultaneously open files accessed through the C run-time library."},{"pos":[2948,3059],"content":"[!NOTE]\n This upper limit might be beyond what is supported by a particular Win32 platform and configuration.","leadings":["","> "],"nodes":[{"content":"This upper limit might be beyond what is supported by a particular Win32 platform and configuration.","pos":[9,109]}]},{"pos":[3068,3080],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[3087,3094]},{"content":"Required header","pos":[3095,3110]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt;","pos":[3170,3180],"source":"\\<stdio.h>"},{"pos":[3188,3306],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[3315,3322],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3326,3434],"content":"See <bpt id=\"p1\">[</bpt>_getmaxstdio<ept id=\"p1\">](../../c-runtime-library/reference/getmaxstdio.md)</ept> for an example of using <ph id=\"ph1\">`_setmaxstdio`</ph>.","source":"See [_getmaxstdio](../../c-runtime-library/reference/getmaxstdio.md) for an example of using `_setmaxstdio`."},{"pos":[3443,3468],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[3472,3487]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[3488,3535],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[3536,3661],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[3670,3678],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3682,3733],"content":"<bpt id=\"p1\">[</bpt>Stream I/O<ept id=\"p1\">](../../c-runtime-library/stream-i-o.md)</ept>","source":"[Stream I/O](../../c-runtime-library/stream-i-o.md)"}],"content":"---\ntitle: \"_setmaxstdio | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_setmaxstdio\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-stdio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"setmaxstdio\"\n  - \"_setmaxstdio\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"maximum open files\"\n  - \"_setmaxstdio function\"\n  - \"setmaxstdio function\"\n  - \"open files, maximum\"\nms.assetid: 9e966875-9ff5-47c4-9b5f-e79e83b70249\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _setmaxstdio\nSets a maximum for the number of simultaneously open files at the `stdio` level.  \n  \n## Syntax  \n  \n```  \nint _setmaxstdio(  \n   int newmax   \n);  \n```  \n  \n#### Parameters  \n `newmax`  \n New maximum for the number of simultaneously open files at the `stdio` level.  \n  \n## Return Value  \n Returns `newmax` if successful; –1 otherwise.  \n  \n If `newmax` is less than `_IOB_ENTRIES` or greater then the maximum number of handles available in the operating system, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, this function returns -1 and sets `errno` to `EINVAL`.  \n  \n For information about these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n The `_setmaxstdio` function changes the maximum value for the number of files that might be simultaneously open at the `stdio` level.  \n  \n C run-time I/O now supports many more open files on Win32 platforms than in previous versions. Up to 2,048 files can be open simultaneously at the [lowio level](../../c-runtime-library/low-level-i-o.md) (that is, opened and accessed by means of the `_open`, `_read`, `_write`, and so forth family of I/O functions). Up to 512 files can be open simultaneously at the [stdio level](../../c-runtime-library/stream-i-o.md) (that is, opened and accessed by means of the `fopen`, `fgetc`, `fputc`, and so forth family of functions). The limit of 512 open files at the `stdio` level can be increased to a maximum of 2,048 by means of the `_setmaxstdio` function.  \n  \n Because `stdio`-level functions, such as `fopen`, are built on top of the `lowio` functions, the maximum of 2,048 is a hard upper limit for the number of simultaneously open files accessed through the C run-time library.  \n  \n> [!NOTE]\n>  This upper limit might be beyond what is supported by a particular Win32 platform and configuration.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_setmaxstdio`|\\<stdio.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n See [_getmaxstdio](../../c-runtime-library/reference/getmaxstdio.md) for an example of using `_setmaxstdio`.  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)"}