{"nodes":[{"pos":[12,39],"content":"__restrict | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"__restrict | Microsoft Docs","pos":[0,27]}]},{"content":"__restrict","pos":[636,646]},{"content":"Like the <bpt id=\"p1\">**</bpt>__declspec ( <bpt id=\"p2\">[</bpt>restrict<ept id=\"p2\">](../cpp/restrict.md)</ept> )<ept id=\"p1\">**</ept> modifier, the <ph id=\"ph1\">`__restrict`</ph> keyword indicates that a symbol is not aliased in the current scope.","pos":[647,801],"source":"Like the **__declspec ( [restrict](../cpp/restrict.md) )** modifier, the `__restrict` keyword indicates that a symbol is not aliased in the current scope."},{"content":"The <ph id=\"ph1\">`__restrict`</ph> keyword differs from the <ph id=\"ph2\">`__declspec ( restrict )`</ph> modifier in the following ways:","pos":[802,901],"source":" The `__restrict` keyword differs from the `__declspec ( restrict )` modifier in the following ways:"},{"pos":[911,1049],"content":"The <ph id=\"ph1\">`__restrict`</ph> keyword is valid only on variables, and <ph id=\"ph2\">`__declspec ( restrict )`</ph> is only valid on function declarations and definitions.","source":"The `__restrict` keyword is valid only on variables, and `__declspec ( restrict )` is only valid on function declarations and definitions."},{"pos":[1072,1166],"content":"is similar to <ph id=\"ph1\">`restrict`</ph> from the C99 spec, but <ph id=\"ph2\">`__restrict`</ph> can be used in C++ or C programs.","source":" is similar to `restrict` from the C99 spec, but `__restrict` can be used in C++ or C programs."},{"content":"When <ph id=\"ph1\">`__restrict`</ph> is used, the compiler will not propagate the no-alias property of a variable.","pos":[1176,1271],"source":"When `__restrict` is used, the compiler will not propagate the no-alias property of a variable."},{"content":"That is, if you assign a <ph id=\"ph1\">`__restrict`</ph> variable to a non-<ph id=\"ph2\">`__restrict`</ph> variable, the compiler will still allow the non-__restrict variable to be aliased.","pos":[1272,1423],"source":" That is, if you assign a `__restrict` variable to a non-`__restrict` variable, the compiler will still allow the non-__restrict variable to be aliased."},{"content":"This is different from the behavior of the <ph id=\"ph1\">`restrict`</ph> keyword from the C99 specification.","pos":[1424,1513],"source":" This is different from the behavior of the `restrict` keyword from the C99 specification."},{"pos":[1520,1644],"content":"Generally, if you affect the behavior of an entire function, it is better to use <ph id=\"ph1\">`__declspec ( restrict )`</ph> than the keyword.","source":"Generally, if you affect the behavior of an entire function, it is better to use `__declspec ( restrict )` than the keyword."},{"pos":[1651,1727],"content":"In Visual Studio 2015 and later, <ph id=\"ph1\">`__restrict`</ph> can be used on C++ references.","source":"In Visual Studio 2015 and later, `__restrict` can be used on C++ references."},{"pos":[1735,1864],"content":"[!NOTE]\n When used on a variable that also has the [volatile](../cpp/volatile-cpp.md) keyword, `volatile` will take precedence.","leadings":["","> "],"nodes":[{"content":"When used on a variable that also has the <bpt id=\"p1\">[</bpt>volatile<ept id=\"p1\">](../cpp/volatile-cpp.md)</ept> keyword, <ph id=\"ph1\">`volatile`</ph> will take precedence.","pos":[9,127],"source":" When used on a variable that also has the [volatile](../cpp/volatile-cpp.md) keyword, `volatile` will take precedence."}]},{"content":"Example","pos":[1873,1880]},{"content":"See Also","pos":[2467,2475]},{"content":"Keywords","pos":[2480,2488]}],"content":"---\ntitle: \"__restrict | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"__restrict\"\n  - \"__restrict_cpp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"__restrict keyword [C++]\"\nms.assetid: 2d151b4d-f930-49df-bd16-d8757ec7fa83\ncaps.latest.revision: 13\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# __restrict\nLike the **__declspec ( [restrict](../cpp/restrict.md) )** modifier, the `__restrict` keyword indicates that a symbol is not aliased in the current scope. The `__restrict` keyword differs from the `__declspec ( restrict )` modifier in the following ways:  \n  \n-   The `__restrict` keyword is valid only on variables, and `__declspec ( restrict )` is only valid on function declarations and definitions.  \n  \n-   `__restrict` is similar to `restrict` from the C99 spec, but `__restrict` can be used in C++ or C programs.  \n  \n-   When `__restrict` is used, the compiler will not propagate the no-alias property of a variable. That is, if you assign a `__restrict` variable to a non-`__restrict` variable, the compiler will still allow the non-__restrict variable to be aliased. This is different from the behavior of the `restrict` keyword from the C99 specification.  \n  \n Generally, if you affect the behavior of an entire function, it is better to use `__declspec ( restrict )` than the keyword.  \n  \n In Visual Studio 2015 and later, `__restrict` can be used on C++ references.  \n  \n> [!NOTE]\n>  When used on a variable that also has the [volatile](../cpp/volatile-cpp.md) keyword, `volatile` will take precedence.  \n  \n## Example  \n  \n```  \n// __restrict_keyword.c  \n// compile with: /LD  \n// In the following function, declare a and b as disjoint arrays  \n// but do not have same assurance for c and d.  \nvoid sum2(int n, int * __restrict a, int * __restrict b,   \n          int * c, int * d) {  \n   int i;  \n   for (i = 0; i < n; i++) {  \n      a[i] = b[i] + c[i];  \n      c[i] = b[i] + d[i];  \n    }  \n}  \n  \n// By marking union members as __restrict, tell compiler that  \n// only z.x or z.y will be accessed in any given scope.  \nunion z {  \n   int * __restrict x;  \n   double * __restrict y;  \n};  \n```  \n  \n## See Also  \n [Keywords](../cpp/keywords-cpp.md)"}