{"nodes":[{"pos":[12,47],"content":"CTypedPtrMap Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CTypedPtrMap Class | Microsoft Docs","pos":[0,35]}]},{"pos":[711,729],"content":"CTypedPtrMap Class","linkify":"CTypedPtrMap Class","nodes":[{"content":"CTypedPtrMap Class","pos":[0,18]}]},{"pos":[730,872],"content":"Provides a type-safe \"wrapper\" for objects of the pointer-map classes <ph id=\"ph1\">`CMapPtrToPtr`</ph>, <ph id=\"ph2\">`CMapPtrToWord`</ph>, <ph id=\"ph3\">`CMapWordToPtr`</ph>, and <ph id=\"ph4\">`CMapStringToPtr`</ph>.","source":"Provides a type-safe \"wrapper\" for objects of the pointer-map classes `CMapPtrToPtr`, `CMapPtrToWord`, `CMapWordToPtr`, and `CMapStringToPtr`."},{"pos":[881,887],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1007,1017],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Base class of the typed pointer map class; must be a pointer map class ( <ph id=\"ph1\">`CMapPtrToPtr`</ph>, <ph id=\"ph2\">`CMapPtrToWord`</ph>, <ph id=\"ph3\">`CMapWordToPtr`</ph>, or <ph id=\"ph4\">`CMapStringToPtr`</ph>).","pos":[1037,1182],"source":" Base class of the typed pointer map class; must be a pointer map class ( `CMapPtrToPtr`, `CMapPtrToWord`, `CMapWordToPtr`, or `CMapStringToPtr`)."},{"content":"Class of the object used as the key to the map.","pos":[1198,1245]},{"content":"Class of the object stored in the map.","pos":[1263,1301]},{"pos":[1310,1317],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1327,1341],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1348,1352]},{"content":"Description","pos":[1353,1364]},{"pos":[1402,1459],"content":"<bpt id=\"p1\">[</bpt>CTypedPtrMap::GetNextAssoc<ept id=\"p1\">](#ctypedptrmap__getnextassoc)</ept>","source":"[CTypedPtrMap::GetNextAssoc](#ctypedptrmap__getnextassoc)"},{"content":"Gets the next element for iterating.","pos":[1460,1496]},{"pos":[1501,1546],"content":"<bpt id=\"p1\">[</bpt>CTypedPtrMap::Lookup<ept id=\"p1\">](#ctypedptrmap__lookup)</ept>","source":"[CTypedPtrMap::Lookup](#ctypedptrmap__lookup)"},{"pos":[1547,1582],"content":"Returns a <ph id=\"ph1\">`KEY`</ph> based on a <ph id=\"ph2\">`VALUE`</ph>.","source":"Returns a `KEY` based on a `VALUE`."},{"pos":[1587,1638],"content":"<bpt id=\"p1\">[</bpt>CTypedPtrMap::RemoveKey<ept id=\"p1\">](#ctypedptrmap__removekey)</ept>","source":"[CTypedPtrMap::RemoveKey](#ctypedptrmap__removekey)"},{"content":"Removes an element specified by a key.","pos":[1639,1677]},{"pos":[1682,1725],"content":"<bpt id=\"p1\">[</bpt>CTypedPtrMap::SetAt<ept id=\"p1\">](#ctypedptrmap__setat)</ept>","source":"[CTypedPtrMap::SetAt](#ctypedptrmap__setat)"},{"content":"Inserts an element into the map; replaces an existing element if a matching key is found.","pos":[1726,1815]},{"pos":[1826,1842],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[1849,1853]},{"content":"Description","pos":[1854,1865]},{"pos":[1903,1959],"content":"<bpt id=\"p1\">[</bpt>CTypedPtrMap::operator [ ]<ept id=\"p1\">](#ctypedptrmap__operator_at)</ept>","source":"[CTypedPtrMap::operator [ ]](#ctypedptrmap__operator_at)"},{"content":"Inserts an element into the map.","pos":[1960,1992]},{"pos":[2002,2009],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2013,2131],"content":"When you use <ph id=\"ph1\">`CTypedPtrMap`</ph>, the C++ type-checking facility helps eliminate errors caused by mismatched pointer types.","source":"When you use `CTypedPtrMap`, the C++ type-checking facility helps eliminate errors caused by mismatched pointer types."},{"pos":[2138,2269],"content":"Because all <ph id=\"ph1\">`CTypedPtrMap`</ph> functions are inline, use of this template does not significantly affect the size or speed of your code.","source":"Because all `CTypedPtrMap` functions are inline, use of this template does not significantly affect the size or speed of your code."},{"pos":[2276,2445],"content":"For more information on using <ph id=\"ph1\">`CTypedPtrMap`</ph>, see the articles <bpt id=\"p1\">[</bpt>Collections<ept id=\"p1\">](../../mfc/collections.md)</ept> and <bpt id=\"p2\">[</bpt>Template-Based Classes<ept id=\"p2\">](../../mfc/template-based-classes.md)</ept>.","source":"For more information on using `CTypedPtrMap`, see the articles [Collections](../../mfc/collections.md) and [Template-Based Classes](../../mfc/template-based-classes.md)."},{"pos":[2454,2475],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[2521,2533],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2537,2559],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxtempl.h","source":"**Header:** afxtempl.h"},{"pos":[2569,2638],"content":"<bpt id=\"p1\">&lt;a name=\"ctypedptrmap__getnextassoc\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTypedPtrMap::GetNextAssoc","linkify":"<a name=\"ctypedptrmap__getnextassoc\"></a>  CTypedPtrMap::GetNextAssoc","source":"<a name=\"ctypedptrmap__getnextassoc\"></a>  CTypedPtrMap::GetNextAssoc"},{"pos":[2642,2757],"content":"Retrieves the map element at <ph id=\"ph1\">`rNextPosition`</ph>, then updates <ph id=\"ph2\">`rNextPosition`</ph> to refer to the next element in the map.","source":"Retrieves the map element at `rNextPosition`, then updates `rNextPosition` to refer to the next element in the map."},{"pos":[2870,2880],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies a reference to a <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value returned by a previous <ph id=\"ph1\">`GetNextAssoc`</ph> or <ph id=\"ph2\">`BASE_CLASS`</ph><bpt id=\"p2\">**</bpt>::GetStartPosition<ept id=\"p2\">**</ept> call.","pos":[2899,3026],"source":" Specifies a reference to a **POSITION** value returned by a previous `GetNextAssoc` or `BASE_CLASS`**::GetStartPosition** call."},{"content":"<bpt id=\"p1\">*</bpt>KEY<ept id=\"p1\">*</ept>","pos":[3033,3038],"source":"*KEY*"},{"content":"Template parameter specifying the type of the map's keys.","pos":[3042,3099]},{"content":"Specifies the returned key of the retrieved element.","pos":[3116,3168]},{"content":"<bpt id=\"p1\">*</bpt>VALUE<ept id=\"p1\">*</ept>","pos":[3175,3182],"source":"*VALUE*"},{"content":"Template parameter specifying the type of the map's values.","pos":[3186,3245]},{"content":"Specifies the returned value of the retrieved element.","pos":[3264,3318]},{"pos":[3328,3335],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function is most useful for iterating through all the elements in the map.","pos":[3339,3418]},{"content":"Note that the position sequence is not necessarily the same as the key value sequence.","pos":[3419,3505]},{"pos":[3512,3618],"content":"If the retrieved element is the last in the map, then the new value of <ph id=\"ph1\">`rNextPosition`</ph> is set to <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"If the retrieved element is the last in the map, then the new value of `rNextPosition` is set to **NULL**."},{"pos":[3625,3683],"content":"This inline function calls <ph id=\"ph1\">`BASE_CLASS`</ph><bpt id=\"p1\">**</bpt>::GetNextAssoc<ept id=\"p1\">**</ept>.","source":"This inline function calls `BASE_CLASS`**::GetNextAssoc**."},{"pos":[3693,3750],"content":"<bpt id=\"p1\">&lt;a name=\"ctypedptrmap__lookup\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTypedPtrMap::Lookup","linkify":"<a name=\"ctypedptrmap__lookup\"></a>  CTypedPtrMap::Lookup","source":"<a name=\"ctypedptrmap__lookup\"></a>  CTypedPtrMap::Lookup"},{"pos":[3754,3852],"content":"<ph id=\"ph1\">`Lookup`</ph> uses a hashing algorithm to quickly find the map element with a key that matches exactly.","source":"`Lookup` uses a hashing algorithm to quickly find the map element with a key that matches exactly."},{"pos":[3950,3960],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Template parameter specifying the base class of this map's class.","pos":[3980,4045]},{"content":"The key of the element to be looked up.","pos":[4061,4100]},{"content":"<bpt id=\"p1\">*</bpt>VALUE<ept id=\"p1\">*</ept>","pos":[4107,4114],"source":"*VALUE*"},{"content":"Template parameter specifying the type of values stored in this map.","pos":[4118,4186]},{"content":"Specifies the returned value of the retrieved element.","pos":[4205,4259]},{"pos":[4269,4281],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the element was found; otherwise 0.","pos":[4285,4331]},{"pos":[4341,4348],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4352,4404],"content":"This inline function calls <ph id=\"ph1\">`BASE_CLASS`</ph><bpt id=\"p1\">**</bpt>::Lookup<ept id=\"p1\">**</ept>.","source":"This inline function calls `BASE_CLASS`**::Lookup**."},{"pos":[4414,4482],"content":"<bpt id=\"p1\">&lt;a name=\"ctypedptrmap__operator_at\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTypedPtrMap::operator [ ]","linkify":"<a name=\"ctypedptrmap__operator_at\"></a>  CTypedPtrMap::operator [ ]","source":"<a name=\"ctypedptrmap__operator_at\"></a>  CTypedPtrMap::operator [ ]"},{"content":"This operator can be used only on the left side of an assignment statement (an l-value).","pos":[4486,4574]},{"pos":[4650,4660],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>VALUE<ept id=\"p1\">*</ept>","pos":[4664,4671],"source":"*VALUE*"},{"content":"Template parameter specifying the type of values stored in this map.","pos":[4675,4743]},{"content":"Template parameter specifying the base class of this map's class.","pos":[4766,4831]},{"content":"The key of the element to be looked up or created in the map.","pos":[4847,4908]},{"pos":[4918,4925],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If there is no map element with the specified key, then a new element is created.","pos":[4929,5010]},{"content":"There is no \"right side\" (r-value) equivalent to this operator because there is a possibility that a key may not be found in the map.","pos":[5011,5144]},{"content":"Use the <ph id=\"ph1\">`Lookup`</ph> member function for element retrieval.","pos":[5145,5200],"source":" Use the `Lookup` member function for element retrieval."},{"pos":[5210,5273],"content":"<bpt id=\"p1\">&lt;a name=\"ctypedptrmap__removekey\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTypedPtrMap::RemoveKey","linkify":"<a name=\"ctypedptrmap__removekey\"></a>  CTypedPtrMap::RemoveKey","source":"<a name=\"ctypedptrmap__removekey\"></a>  CTypedPtrMap::RemoveKey"},{"pos":[5277,5332],"content":"This member function calls <ph id=\"ph1\">`BASE_CLASS`</ph><bpt id=\"p1\">**</bpt>::RemoveKey<ept id=\"p1\">**</ept>.","source":"This member function calls `BASE_CLASS`**::RemoveKey**."},{"pos":[5382,5392],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>KEY<ept id=\"p1\">*</ept>","pos":[5396,5401],"source":"*KEY*"},{"content":"Template parameter specifying the type of the map's keys.","pos":[5405,5462]},{"content":"Key for the element to be removed.","pos":[5478,5512]},{"pos":[5522,5534],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the entry was found and successfully removed; otherwise 0.","pos":[5538,5607]},{"pos":[5617,5624],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5628,5758],"content":"For more detailed remarks, see <bpt id=\"p1\">[</bpt>CMapStringToOb::RemoveKey<ept id=\"p1\">](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__removekey)</ept>.","source":"For more detailed remarks, see [CMapStringToOb::RemoveKey](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__removekey)."},{"pos":[5768,5823],"content":"<bpt id=\"p1\">&lt;a name=\"ctypedptrmap__setat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTypedPtrMap::SetAt","linkify":"<a name=\"ctypedptrmap__setat\"></a>  CTypedPtrMap::SetAt","source":"<a name=\"ctypedptrmap__setat\"></a>  CTypedPtrMap::SetAt"},{"pos":[5827,5878],"content":"This member function calls <ph id=\"ph1\">`BASE_CLASS`</ph><bpt id=\"p1\">**</bpt>::SetAt<ept id=\"p1\">**</ept>.","source":"This member function calls `BASE_CLASS`**::SetAt**."},{"pos":[5945,5955],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>KEY<ept id=\"p1\">*</ept>","pos":[5959,5964],"source":"*KEY*"},{"content":"Template parameter specifying the type of the map's keys.","pos":[5968,6025]},{"content":"Specifies the key value of the newValue.","pos":[6041,6081]},{"content":"Specifies the object pointer that is the value of the new element.","pos":[6102,6168]},{"pos":[6178,6185],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6189,6311],"content":"For more detailed remarks, see <bpt id=\"p1\">[</bpt>CMapStringToOb::SetAt<ept id=\"p1\">](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__setat)</ept>.","source":"For more detailed remarks, see [CMapStringToOb::SetAt](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__setat)."},{"pos":[6320,6328],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>MFC Sample COLLECT<ept id=\"p1\">](../../visual-cpp-samples.md)</ept><ph id=\"ph1\"> </ph>","pos":[6332,6382],"source":"[MFC Sample COLLECT](../../visual-cpp-samples.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[6385,6434],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CMapPtrToPtr Class<ept id=\"p1\">](../../mfc/reference/cmapptrtoptr-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[6437,6502],"source":" [CMapPtrToPtr Class](../../mfc/reference/cmapptrtoptr-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CMapPtrToWord Class<ept id=\"p1\">](../../mfc/reference/cmapptrtoword-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[6505,6572],"source":" [CMapPtrToWord Class](../../mfc/reference/cmapptrtoword-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CMapWordToPtr Class<ept id=\"p1\">](../../mfc/reference/cmapwordtoptr-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[6575,6642],"source":" [CMapWordToPtr Class](../../mfc/reference/cmapwordtoptr-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CMapStringToPtr Class<ept id=\"p1\">](../../mfc/reference/cmapstringtoptr-class.md)</ept>","pos":[6645,6715],"source":" [CMapStringToPtr Class](../../mfc/reference/cmapstringtoptr-class.md)"}],"content":"---\ntitle: \"CTypedPtrMap Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CTypedPtrMap\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"type-safe collections\"\n  - \"template classes, CTypedPtrMap class\"\n  - \"maps\"\n  - \"CTypedPtrMap class\"\n  - \"pointer maps\"\nms.assetid: 9f377385-c6e9-4471-8b40-8fe220c50164\ncaps.latest.revision: 23\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CTypedPtrMap Class\nProvides a type-safe \"wrapper\" for objects of the pointer-map classes `CMapPtrToPtr`, `CMapPtrToWord`, `CMapWordToPtr`, and `CMapStringToPtr`.  \n  \n## Syntax  \n  \n```  \ntemplate<class BASE_CLASS, class KEY, class VALUE>  \nclass CTypedPtrMap : public BASE_CLASS  \n```  \n  \n#### Parameters  \n `BASE_CLASS`  \n Base class of the typed pointer map class; must be a pointer map class ( `CMapPtrToPtr`, `CMapPtrToWord`, `CMapWordToPtr`, or `CMapStringToPtr`).  \n  \n `KEY`  \n Class of the object used as the key to the map.  \n  \n `VALUE`  \n Class of the object stored in the map.  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CTypedPtrMap::GetNextAssoc](#ctypedptrmap__getnextassoc)|Gets the next element for iterating.|  \n|[CTypedPtrMap::Lookup](#ctypedptrmap__lookup)|Returns a `KEY` based on a `VALUE`.|  \n|[CTypedPtrMap::RemoveKey](#ctypedptrmap__removekey)|Removes an element specified by a key.|  \n|[CTypedPtrMap::SetAt](#ctypedptrmap__setat)|Inserts an element into the map; replaces an existing element if a matching key is found.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CTypedPtrMap::operator [ ]](#ctypedptrmap__operator_at)|Inserts an element into the map.|  \n  \n## Remarks  \n When you use `CTypedPtrMap`, the C++ type-checking facility helps eliminate errors caused by mismatched pointer types.  \n  \n Because all `CTypedPtrMap` functions are inline, use of this template does not significantly affect the size or speed of your code.  \n  \n For more information on using `CTypedPtrMap`, see the articles [Collections](../../mfc/collections.md) and [Template-Based Classes](../../mfc/template-based-classes.md).  \n  \n## Inheritance Hierarchy  \n `BASE_CLASS`  \n  \n `CTypedPtrMap`  \n  \n## Requirements  \n **Header:** afxtempl.h  \n  \n##  <a name=\"ctypedptrmap__getnextassoc\"></a>  CTypedPtrMap::GetNextAssoc  \n Retrieves the map element at `rNextPosition`, then updates `rNextPosition` to refer to the next element in the map.  \n  \n```  \nvoid GetNextAssoc(\n    POSITION& rPosition,\n    KEY& rKey,\n    VALUE& rValue) const;\n\n \n```  \n  \n### Parameters  \n `rPosition`  \n Specifies a reference to a **POSITION** value returned by a previous `GetNextAssoc` or `BASE_CLASS`**::GetStartPosition** call.  \n  \n *KEY*  \n Template parameter specifying the type of the map's keys.  \n  \n `rKey`  \n Specifies the returned key of the retrieved element.  \n  \n *VALUE*  \n Template parameter specifying the type of the map's values.  \n  \n `rValue`  \n Specifies the returned value of the retrieved element.  \n  \n### Remarks  \n This function is most useful for iterating through all the elements in the map. Note that the position sequence is not necessarily the same as the key value sequence.  \n  \n If the retrieved element is the last in the map, then the new value of `rNextPosition` is set to **NULL**.  \n  \n This inline function calls `BASE_CLASS`**::GetNextAssoc**.  \n  \n##  <a name=\"ctypedptrmap__lookup\"></a>  CTypedPtrMap::Lookup  \n `Lookup` uses a hashing algorithm to quickly find the map element with a key that matches exactly.  \n  \n```  \nBOOL Lookup(\n    BASE_CLASS ::BASE_ARG_KEY key, VALUE& rValue) const;\n\n \n```  \n  \n### Parameters  \n `BASE_CLASS`  \n Template parameter specifying the base class of this map's class.  \n  \n `key`  \n The key of the element to be looked up.  \n  \n *VALUE*  \n Template parameter specifying the type of values stored in this map.  \n  \n `rValue`  \n Specifies the returned value of the retrieved element.  \n  \n### Return Value  \n Nonzero if the element was found; otherwise 0.  \n  \n### Remarks  \n This inline function calls `BASE_CLASS`**::Lookup**.  \n  \n##  <a name=\"ctypedptrmap__operator_at\"></a>  CTypedPtrMap::operator [ ]  \n This operator can be used only on the left side of an assignment statement (an l-value).  \n  \n```  \nVALUE& operator[ ](base_class ::base_arg_key key);\n```  \n  \n### Parameters  \n *VALUE*  \n Template parameter specifying the type of values stored in this map.  \n  \n `BASE_CLASS`  \n Template parameter specifying the base class of this map's class.  \n  \n `key`  \n The key of the element to be looked up or created in the map.  \n  \n### Remarks  \n If there is no map element with the specified key, then a new element is created. There is no \"right side\" (r-value) equivalent to this operator because there is a possibility that a key may not be found in the map. Use the `Lookup` member function for element retrieval.  \n  \n##  <a name=\"ctypedptrmap__removekey\"></a>  CTypedPtrMap::RemoveKey  \n This member function calls `BASE_CLASS`**::RemoveKey**.  \n  \n```  \nBOOL RemoveKey(KEY key);\n```  \n  \n### Parameters  \n *KEY*  \n Template parameter specifying the type of the map's keys.  \n  \n `key`  \n Key for the element to be removed.  \n  \n### Return Value  \n Nonzero if the entry was found and successfully removed; otherwise 0.  \n  \n### Remarks  \n For more detailed remarks, see [CMapStringToOb::RemoveKey](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__removekey).  \n  \n##  <a name=\"ctypedptrmap__setat\"></a>  CTypedPtrMap::SetAt  \n This member function calls `BASE_CLASS`**::SetAt**.  \n  \n```  \nvoid SetAt(\n    KEY key, VALUE newValue);\n```  \n  \n### Parameters  \n *KEY*  \n Template parameter specifying the type of the map's keys.  \n  \n `key`  \n Specifies the key value of the newValue.  \n  \n `newValue`  \n Specifies the object pointer that is the value of the new element.  \n  \n### Remarks  \n For more detailed remarks, see [CMapStringToOb::SetAt](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__setat).  \n  \n## See Also  \n [MFC Sample COLLECT](../../visual-cpp-samples.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CMapPtrToPtr Class](../../mfc/reference/cmapptrtoptr-class.md)   \n [CMapPtrToWord Class](../../mfc/reference/cmapptrtoword-class.md)   \n [CMapWordToPtr Class](../../mfc/reference/cmapwordtoptr-class.md)   \n [CMapStringToPtr Class](../../mfc/reference/cmapstringtoptr-class.md)\n"}