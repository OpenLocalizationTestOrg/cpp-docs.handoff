{"nodes":[{"pos":[12,62],"content":"ARM Assembler Diagnostic Messages | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ARM Assembler Diagnostic Messages | Microsoft Docs","pos":[0,50]}]},{"content":"ARM Assembler Diagnostic Messages","pos":[542,575]},{"content":"The Microsoft ARM assembler (<bpt id=\"p1\">*</bpt>armasm<ept id=\"p1\">*</ept>) emits diagnostic warnings and errors when it encounters them.","pos":[576,676],"source":"The Microsoft ARM assembler (*armasm*) emits diagnostic warnings and errors when it encounters them."},{"content":"This article describes the most commonly-encountered messages.","pos":[677,739]},{"content":"Syntax","pos":[748,754]},{"content":"Diagnostic Messages","pos":[832,851]},{"content":"Errors","pos":[861,867]},{"content":"A2193: this instruction generates unpredictable behavior","pos":[871,927]},{"content":"The ARM architecture cannot guarantee what happens when this instruction is executed.","pos":[931,1016]},{"content":"For details about the well-defined forms of this instruction, consult the <bpt id=\"p1\">[</bpt>ARM Architecture Reference Manual<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=246464)</ept>.","pos":[1018,1175],"source":"  For details about the well-defined forms of this instruction, consult the [ARM Architecture Reference Manual](http://go.microsoft.com/fwlink/?LinkId=246464)."},{"content":"A2196: instruction cannot be encoded in 16 bits","pos":[1287,1334]},{"content":"The specified instruction cannot be encoded as a 16-bit Thumb instruction.","pos":[1338,1412]},{"content":"Specify a 32-bit instruction, or rearrange code to bring the target label into the range of a 16-bit instruction.","pos":[1414,1527]},{"content":"The assembler may attempt to encode a branch in 16 bits and fail with this error, even though a 32-bit branch is encodable.","pos":[1534,1657]},{"content":"You can solve this problem by using the <ph id=\"ph1\">`.W`</ph> specifier to explicitly mark the branch as 32-bit.","pos":[1658,1753],"source":" You can solve this problem by using the `.W` specifier to explicitly mark the branch as 32-bit."},{"content":"A2202: Pre-UAL instruction syntax not allowed in THUMB region","pos":[1991,2052]},{"content":"Thumb code must use the Unified Assembler Language (UAL) syntax.","pos":[2056,2120]},{"content":"The old syntax is no longer accepted","pos":[2122,2158]},{"content":"A2513: Rotation must be even","pos":[2303,2331]},{"content":"In ARM mode, there is an alternate syntax for specifying constants.","pos":[2335,2402]},{"content":"Instead of writing <ph id=\"ph1\">`#&lt;const&gt;`</ph>, you can write <ph id=\"ph2\">`#&lt;byte&gt;,#&lt;rot&gt;`</ph>, which represents the constant value that is obtained by rotating the value <ph id=\"ph3\">`&lt;byte&gt;`</ph> right by <ph id=\"ph4\">`&lt;rot&gt;`</ph>.","pos":[2404,2568],"source":"  Instead of writing `#<const>`, you can write `#<byte>,#<rot>`, which represents the constant value that is obtained by rotating the value `<byte>` right by `<rot>`."},{"content":"When you use this syntax, you must make the value of <ph id=\"ph1\">`&lt;rot&gt;`</ph> even.","pos":[2570,2636],"source":"  When you use this syntax, you must make the value of `<rot>` even."},{"content":"A2557: Incorrect number of bytes to write back","pos":[2746,2792]},{"content":"On the NEON structure load and store instructions (<ph id=\"ph1\">`VLDn`</ph>, <ph id=\"ph2\">`VSTn`</ph>), there is an alternate syntax for specifying writeback to the base register.","pos":[2796,2939],"source":" On the NEON structure load and store instructions (`VLDn`, `VSTn`), there is an alternate syntax for specifying writeback to the base register."},{"content":"Instead of putting an exclamation point (!) after the address, you can specify an immediate value that indicates the offset to be added to the base register.","pos":[2941,3098]},{"content":"If you use this syntax, you must specify the exact number of bytes that were loaded or stored by the instruction.","pos":[3100,3213]},{"content":"Warnings","pos":[3399,3407]},{"content":"A4228: Alignment value exceeds AREA alignment; alignment not guaranteed","pos":[3411,3482]},{"content":"The alignment that is specified in an <ph id=\"ph1\">`ALIGN`</ph> directive is greater than the alignment of the enclosing <ph id=\"ph2\">`AREA`</ph>.","pos":[3486,3596],"source":" The alignment that is specified in an `ALIGN` directive is greater than the alignment of the enclosing `AREA`."},{"content":"As a result, the assembler cannot guarantee that the <ph id=\"ph1\">`ALIGN`</ph> directive will be honored.","pos":[3598,3685],"source":"  As a result, the assembler cannot guarantee that the `ALIGN` directive will be honored."},{"pos":[3692,3821],"content":"To fix this, you can specify on the <ph id=\"ph1\">`AREA`</ph> directive an <ph id=\"ph2\">`ALIGN`</ph> attribute that is equal to or greater than the desired alignment.","source":"To fix this, you can specify on the `AREA` directive an `ALIGN` attribute that is equal to or greater than the desired alignment."},{"content":"A4508: Use of this rotated constant is deprecated","pos":[4015,4064]},{"content":"In ARM mode, there is an alternate syntax for specifying constants.","pos":[4068,4135]},{"content":"Instead of writing <ph id=\"ph1\">`#&lt;const&gt;`</ph>, you can write <ph id=\"ph2\">`#&lt;byte&gt;,#&lt;rot&gt;`</ph>, which represents the constant value that is obtained by rotating the value <ph id=\"ph3\">`&lt;byte&gt;`</ph> right by <ph id=\"ph4\">`&lt;rot&gt;`</ph>.","pos":[4137,4301],"source":"  Instead of writing `#<const>`, you can write `#<byte>,#<rot>`, which represents the constant value that is obtained by rotating the value `<byte>` right by `<rot>`."},{"content":"In some contexts, ARM has deprecated the use of these rotated constants.","pos":[4303,4375]},{"content":"In these cases, use the basic <ph id=\"ph1\">`#&lt;const&gt;`</ph> syntax instead.","pos":[4376,4432],"source":" In these cases, use the basic `#<const>` syntax instead."},{"content":"A4509: This form of conditional instruction is deprecated","pos":[4583,4640]},{"content":"This form of conditional instruction has been deprecated by ARM in the ARMv8 architecture.","pos":[4644,4734]},{"content":"We recommend that you change the code to use conditional branches.","pos":[4735,4801]},{"content":"To see which conditional instructions are still supported, consult the <bpt id=\"p1\">[</bpt>ARM Architecture Reference Manual<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=246464)</ept>.","pos":[4802,4956],"source":" To see which conditional instructions are still supported, consult the [ARM Architecture Reference Manual](http://go.microsoft.com/fwlink/?LinkId=246464)."},{"pos":[4963,5037],"content":"This warning is not emitted when the <ph id=\"ph1\">`-oldit`</ph> command-line switch is used.","source":"This warning is not emitted when the `-oldit` command-line switch is used."},{"content":"See Also","pos":[5159,5167]},{"content":"ARM Assembler Command-Line Reference","pos":[5172,5208]},{"content":"ARM Assembler Directives","pos":[5276,5300]}],"content":"---\ntitle: \"ARM Assembler Diagnostic Messages | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: 52b38267-6023-4bdc-a0ef-863362f48eec\ncaps.latest.revision: 6\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ARM Assembler Diagnostic Messages\nThe Microsoft ARM assembler (*armasm*) emits diagnostic warnings and errors when it encounters them. This article describes the most commonly-encountered messages.  \n  \n## Syntax  \n  \n```  \n  \nfilename(lineno) : [error|warning] Anum: message  \n```  \n  \n## Diagnostic Messages  \n  \n### Errors  \n A2193: this instruction generates unpredictable behavior  \n The ARM architecture cannot guarantee what happens when this instruction is executed.  For details about the well-defined forms of this instruction, consult the [ARM Architecture Reference Manual](http://go.microsoft.com/fwlink/?LinkId=246464).  \n  \n```  \n  \nADD r0, r8, pc         ; A2193: this instruction generates unpredictable behavior  \n  \n```  \n  \n A2196: instruction cannot be encoded in 16 bits  \n The specified instruction cannot be encoded as a 16-bit Thumb instruction.  Specify a 32-bit instruction, or rearrange code to bring the target label into the range of a 16-bit instruction.  \n  \n The assembler may attempt to encode a branch in 16 bits and fail with this error, even though a 32-bit branch is encodable. You can solve this problem by using the `.W` specifier to explicitly mark the branch as 32-bit.  \n  \n```  \n  \n  ADD.N r0, r1, r2      ; A2196: instruction cannot be encoded in 16 bits  \n  \n  B.W label             ; OK  \n  B.N label             ; A2196: instruction cannot be encoded in 16 bits  \n  SPACE 10000  \nlabel  \n  \n```  \n  \n A2202: Pre-UAL instruction syntax not allowed in THUMB region  \n Thumb code must use the Unified Assembler Language (UAL) syntax.  The old syntax is no longer accepted  \n  \n```  \n  \nADDEQS r0, r1         ; A2202: Pre-UAL instruction syntax not allowed in THUMB region  \nADDSEQ r0, r1         ; OK  \n  \n```  \n  \n A2513: Rotation must be even  \n In ARM mode, there is an alternate syntax for specifying constants.  Instead of writing `#<const>`, you can write `#<byte>,#<rot>`, which represents the constant value that is obtained by rotating the value `<byte>` right by `<rot>`.  When you use this syntax, you must make the value of `<rot>` even.  \n  \n```  \n  \nMOV r0, #4, #2       ; OK  \nMOV r0, #4, #1       ; A2513: Rotation must be even  \n  \n```  \n  \n A2557: Incorrect number of bytes to write back  \n On the NEON structure load and store instructions (`VLDn`, `VSTn`), there is an alternate syntax for specifying writeback to the base register.  Instead of putting an exclamation point (!) after the address, you can specify an immediate value that indicates the offset to be added to the base register.  If you use this syntax, you must specify the exact number of bytes that were loaded or stored by the instruction.  \n  \n```  \n  \nVLD1.8 {d0-d3}, [r0]!         ; OK  \nVLD1.8 {d0-d3}, [r0], #32     ; OK  \nVLD1.8 {d0-d3}, [r0], #100    ; A2557: Incorrect number of bytes to write back  \n  \n```  \n  \n### Warnings  \n A4228: Alignment value exceeds AREA alignment; alignment not guaranteed  \n The alignment that is specified in an `ALIGN` directive is greater than the alignment of the enclosing `AREA`.  As a result, the assembler cannot guarantee that the `ALIGN` directive will be honored.  \n  \n To fix this, you can specify on the `AREA` directive an `ALIGN` attribute that is equal to or greater than the desired alignment.  \n  \n```  \n  \nAREA |.myarea1|  \nALIGN 8           ; A4228: Alignment value exceeds AREA alignment; alignment not guaranteed  \n  \nAREA |.myarea2|,ALIGN=3  \nALIGN 8           ; OK  \n  \n```  \n  \n A4508: Use of this rotated constant is deprecated  \n In ARM mode, there is an alternate syntax for specifying constants.  Instead of writing `#<const>`, you can write `#<byte>,#<rot>`, which represents the constant value that is obtained by rotating the value `<byte>` right by `<rot>`.  In some contexts, ARM has deprecated the use of these rotated constants. In these cases, use the basic `#<const>` syntax instead.  \n  \n```  \n  \nANDS r0, r0, #1                ; OK  \nANDS r0, r0, #4, #2            ; A4508: Use of this rotated constant is deprecated  \n  \n```  \n  \n A4509: This form of conditional instruction is deprecated  \n This form of conditional instruction has been deprecated by ARM in the ARMv8 architecture. We recommend that you change the code to use conditional branches. To see which conditional instructions are still supported, consult the [ARM Architecture Reference Manual](http://go.microsoft.com/fwlink/?LinkId=246464).  \n  \n This warning is not emitted when the `-oldit` command-line switch is used.  \n  \n```  \n  \nADDEQ r0, r1, r8              ; A4509: This form of conditional instruction is deprecated  \n  \n```  \n  \n## See Also  \n [ARM Assembler Command-Line Reference](../../assembler/arm/arm-assembler-command-line-reference.md)   \n [ARM Assembler Directives](../../assembler/arm/arm-assembler-directives.md)"}