{"nodes":[{"pos":[12,52],"content":"CMFCToolBarImages Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMFCToolBarImages Class | Microsoft Docs","pos":[0,40]}]},{"pos":[625,648],"content":"CMFCToolBarImages Class","linkify":"CMFCToolBarImages Class","nodes":[{"content":"CMFCToolBarImages Class","pos":[0,23]}]},{"content":"The images on a toolbar.","pos":[649,673]},{"content":"The <ph id=\"ph1\">`CMFCToolBarImages`</ph> class manages toolbar images loaded from application resources or from files.","pos":[674,775],"source":" The `CMFCToolBarImages` class manages toolbar images loaded from application resources or from files."},{"pos":[784,790],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[857,864],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[874,893],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[900,904]},{"content":"Description","pos":[905,916]},{"pos":[954,1031],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::CMFCToolBarImages<ept id=\"p1\">](#cmfctoolbarimages__cmfctoolbarimages)</ept>","source":"[CMFCToolBarImages::CMFCToolBarImages](#cmfctoolbarimages__cmfctoolbarimages)"},{"pos":[1032,1072],"content":"Constructs a <ph id=\"ph1\">`CMFCToolBarImages`</ph> object.","source":"Constructs a `CMFCToolBarImages` object."},{"pos":[1083,1097],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1104,1108]},{"content":"Description","pos":[1109,1120]},{"pos":[1158,1223],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::AdaptColors<ept id=\"p1\">](#cmfctoolbarimages__adaptcolors)</ept>","source":"[CMFCToolBarImages::AdaptColors](#cmfctoolbarimages__adaptcolors)"},{"pos":[1229,1286],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::AddIcon<ept id=\"p1\">](#cmfctoolbarimages__addicon)</ept>","source":"[CMFCToolBarImages::AddIcon](#cmfctoolbarimages__addicon)"},{"content":"Adds an icon to the toolbar images.","pos":[1287,1322]},{"pos":[1327,1386],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::AddImage<ept id=\"p1\">](#cmfctoolbarimages__addimage)</ept>","source":"[CMFCToolBarImages::AddImage](#cmfctoolbarimages__addimage)"},{"content":"Adds a bitmap to the toolbar images.","pos":[1387,1423]},{"pos":[1428,1485],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::CleanUp<ept id=\"p1\">](#cmfctoolbarimages__cleanup)</ept>","source":"[CMFCToolBarImages::CleanUp](#cmfctoolbarimages__cleanup)"},{"pos":[1491,1544],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::Clear<ept id=\"p1\">](#cmfctoolbarimages__clear)</ept>","source":"[CMFCToolBarImages::Clear](#cmfctoolbarimages__clear)"},{"content":"Frees the system resources that were allocated to this object.","pos":[1545,1607]},{"pos":[1612,1685],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::ConvertTo32Bits<ept id=\"p1\">](#cmfctoolbarimages__convertto32bits)</ept>","source":"[CMFCToolBarImages::ConvertTo32Bits](#cmfctoolbarimages__convertto32bits)"},{"content":"Converts underlined bitmaps to 32 bpp images.","pos":[1686,1731]},{"pos":[1736,1819],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::CopyImageToClipboard<ept id=\"p1\">](#cmfctoolbarimages__copyimagetoclipboard)</ept>","source":"[CMFCToolBarImages::CopyImageToClipboard](#cmfctoolbarimages__copyimagetoclipboard)"},{"pos":[1825,1880],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::CopyTo<ept id=\"p1\">](#cmfctoolbarimages__copyto)</ept>","source":"[CMFCToolBarImages::CopyTo](#cmfctoolbarimages__copyto)"},{"pos":[1886,1967],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::CreateFromImageList<ept id=\"p1\">](#cmfctoolbarimages__createfromimagelist)</ept>","source":"[CMFCToolBarImages::CreateFromImageList](#cmfctoolbarimages__createfromimagelist)"},{"pos":[1968,2081],"content":"Initializes the toolbar images from an image list ( <bpt id=\"p1\">[</bpt>CImageList Class<ept id=\"p1\">](../../mfc/reference/cimagelist-class.md)</ept>).","source":"Initializes the toolbar images from an image list ( [CImageList Class](../../mfc/reference/cimagelist-class.md))."},{"pos":[2086,2171],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::CreateRegionFromImage<ept id=\"p1\">](#cmfctoolbarimages__createregionfromimage)</ept>","source":"[CMFCToolBarImages::CreateRegionFromImage](#cmfctoolbarimages__createregionfromimage)"},{"pos":[2177,2242],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::DeleteImage<ept id=\"p1\">](#cmfctoolbarimages__deleteimage)</ept>","source":"[CMFCToolBarImages::DeleteImage](#cmfctoolbarimages__deleteimage)"},{"content":"Deletes the image that has a specified index from the toolbar images if this set of toolbar images contains user-defined images.","pos":[2243,2371]},{"pos":[2376,2427],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::Draw<ept id=\"p1\">](#cmfctoolbarimages__draw)</ept>","source":"[CMFCToolBarImages::Draw](#cmfctoolbarimages__draw)"},{"content":"Draws a single toolbar image (button).","pos":[2428,2466]},{"pos":[2471,2526],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::DrawEx<ept id=\"p1\">](#cmfctoolbarimages__drawex)</ept>","source":"[CMFCToolBarImages::DrawEx](#cmfctoolbarimages__drawex)"},{"pos":[2532,2593],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::EnableRTL<ept id=\"p1\">](#cmfctoolbarimages__enablertl)</ept>","source":"[CMFCToolBarImages::EnableRTL](#cmfctoolbarimages__enablertl)"},{"pos":[2599,2666],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::EndDrawImage<ept id=\"p1\">](#cmfctoolbarimages__enddrawimage)</ept>","source":"[CMFCToolBarImages::EndDrawImage](#cmfctoolbarimages__enddrawimage)"},{"content":"Frees system resources after a toolbar image is drawn.","pos":[2667,2721]},{"pos":[2726,2791],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::ExtractIcon<ept id=\"p1\">](#cmfctoolbarimages__extracticon)</ept>","source":"[CMFCToolBarImages::ExtractIcon](#cmfctoolbarimages__extracticon)"},{"content":"Returns the icon that has a specified image index from the toolbar images.","pos":[2792,2866]},{"pos":[2871,2946],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::FillDitheredRect<ept id=\"p1\">](#cmfctoolbarimages__fillditheredrect)</ept>","source":"[CMFCToolBarImages::FillDitheredRect](#cmfctoolbarimages__fillditheredrect)"},{"content":"Fills a rectangle by using a brush that has the toolbar background colors.","pos":[2947,3021]},{"pos":[3026,3097],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::GetAlwaysLight<ept id=\"p1\">](#cmfctoolbarimages__getalwayslight)</ept>","source":"[CMFCToolBarImages::GetAlwaysLight](#cmfctoolbarimages__getalwayslight)"},{"pos":[3103,3176],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::GetBitsPerPixel<ept id=\"p1\">](#cmfctoolbarimages__getbitsperpixel)</ept>","source":"[CMFCToolBarImages::GetBitsPerPixel](#cmfctoolbarimages__getbitsperpixel)"},{"content":"Returns current resolution of underlined images.","pos":[3177,3225]},{"pos":[3230,3289],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::GetCount<ept id=\"p1\">](#cmfctoolbarimages__getcount)</ept>","source":"[CMFCToolBarImages::GetCount](#cmfctoolbarimages__getcount)"},{"content":"Returns the number of images on the toolbar.","pos":[3290,3334]},{"pos":[3339,3424],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::GetDisabledImageAlpha<ept id=\"p1\">](#cmfctoolbarimages__getdisabledimagealpha)</ept>","source":"[CMFCToolBarImages::GetDisabledImageAlpha](#cmfctoolbarimages__getdisabledimagealpha)"},{"content":"Returns the alpha channel value that is used for disabled images.","pos":[3425,3490]},{"pos":[3495,3574],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::GetFadedImageAlpha<ept id=\"p1\">](#cmfctoolbarimages__getfadedimagealpha)</ept>","source":"[CMFCToolBarImages::GetFadedImageAlpha](#cmfctoolbarimages__getfadedimagealpha)"},{"pos":[3580,3647],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::GetImageSize<ept id=\"p1\">](#cmfctoolbarimages__getimagesize)</ept>","source":"[CMFCToolBarImages::GetImageSize](#cmfctoolbarimages__getimagesize)"},{"content":"Retrieves either the size of the toolbar images that are stored in memory (source size), or the size of the toolbar images that are drawn on the screen (destination size).","pos":[3648,3819]},{"pos":[3824,3891],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::GetImageWell<ept id=\"p1\">](#cmfctoolbarimages__getimagewell)</ept>","source":"[CMFCToolBarImages::GetImageWell](#cmfctoolbarimages__getimagewell)"},{"content":"Returns the handle to the bitmap that contains all the toolbar images.","pos":[3892,3962]},{"pos":[3967,4044],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::GetImageWellLight<ept id=\"p1\">](#cmfctoolbarimages__getimagewelllight)</ept>","source":"[CMFCToolBarImages::GetImageWellLight](#cmfctoolbarimages__getimagewelllight)"},{"pos":[4050,4125],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::GetLastImageRect<ept id=\"p1\">](#cmfctoolbarimages__getlastimagerect)</ept>","source":"[CMFCToolBarImages::GetLastImageRect](#cmfctoolbarimages__getlastimagerect)"},{"pos":[4131,4210],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::GetLightPercentage<ept id=\"p1\">](#cmfctoolbarimages__getlightpercentage)</ept>","source":"[CMFCToolBarImages::GetLightPercentage](#cmfctoolbarimages__getlightpercentage)"},{"pos":[4216,4291],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::GetMapTo3DColors<ept id=\"p1\">](#cmfctoolbarimages__getmapto3dcolors)</ept>","source":"[CMFCToolBarImages::GetMapTo3DColors](#cmfctoolbarimages__getmapto3dcolors)"},{"pos":[4297,4354],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::GetMask<ept id=\"p1\">](#cmfctoolbarimages__getmask)</ept>","source":"[CMFCToolBarImages::GetMask](#cmfctoolbarimages__getmask)"},{"pos":[4360,4437],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::GetResourceOffset<ept id=\"p1\">](#cmfctoolbarimages__getresourceoffset)</ept>","source":"[CMFCToolBarImages::GetResourceOffset](#cmfctoolbarimages__getresourceoffset)"},{"content":"Returns the image index for a specified resource ID.","pos":[4438,4490]},{"pos":[4495,4554],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::GetScale<ept id=\"p1\">](#cmfctoolbarimages__getscale)</ept>","source":"[CMFCToolBarImages::GetScale](#cmfctoolbarimages__getscale)"},{"content":"Returns current scale ratio of underlined images.","pos":[4555,4604]},{"pos":[4609,4690],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::GetTransparentColor<ept id=\"p1\">](#cmfctoolbarimages__gettransparentcolor)</ept>","source":"[CMFCToolBarImages::GetTransparentColor](#cmfctoolbarimages__gettransparentcolor)"},{"pos":[4696,4759],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::GrayImages<ept id=\"p1\">](#cmfctoolbarimages__grayimages)</ept>","source":"[CMFCToolBarImages::GrayImages](#cmfctoolbarimages__grayimages)"},{"content":"Grays the toolbar images to make them look disabled.","pos":[4760,4812]},{"pos":[4817,4916],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::Is32BitTransparencySupported<ept id=\"p1\">](#cmfctoolbarimages__is32bittransparencysupported)</ept>","source":"[CMFCToolBarImages::Is32BitTransparencySupported](#cmfctoolbarimages__is32bittransparencysupported)"},{"content":"Determines whether the operating system supports 32-bit alpha blending.","pos":[4917,4988]},{"pos":[4993,5080],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::IsPreMultiplyAutoCheck<ept id=\"p1\">](#cmfctoolbarimages__ispremultiplyautocheck)</ept>","source":"[CMFCToolBarImages::IsPreMultiplyAutoCheck](#cmfctoolbarimages__ispremultiplyautocheck)"},{"pos":[5086,5139],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::IsRTL<ept id=\"p1\">](#cmfctoolbarimages__isrtl)</ept>","source":"[CMFCToolBarImages::IsRTL](#cmfctoolbarimages__isrtl)"},{"content":"Determines whether right-to-left (RTL) support is enabled.","pos":[5140,5198]},{"pos":[5203,5266],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::IsReadOnly<ept id=\"p1\">](#cmfctoolbarimages__isreadonly)</ept>","source":"[CMFCToolBarImages::IsReadOnly](#cmfctoolbarimages__isreadonly)"},{"content":"Determines whether the toolbar images are read-only.","pos":[5267,5319]},{"pos":[5324,5383],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::IsScaled<ept id=\"p1\">](#cmfctoolbarimages__isscaled)</ept>","source":"[CMFCToolBarImages::IsScaled](#cmfctoolbarimages__isscaled)"},{"content":"Tells whether the underlined images are scaled or not.","pos":[5384,5438]},{"pos":[5443,5518],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::IsUserImagesList<ept id=\"p1\">](#cmfctoolbarimages__isuserimageslist)</ept>","source":"[CMFCToolBarImages::IsUserImagesList](#cmfctoolbarimages__isuserimageslist)"},{"content":"Determines whether this set of toolbar images contains user-defined images.","pos":[5519,5594]},{"pos":[5599,5656],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::IsValid<ept id=\"p1\">](#cmfctoolbarimages__isvalid)</ept>","source":"[CMFCToolBarImages::IsValid](#cmfctoolbarimages__isvalid)"},{"content":"Determines whether this set of toolbar images contains a valid toolbar image.","pos":[5657,5734]},{"pos":[5739,5790],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::Load<ept id=\"p1\">](#cmfctoolbarimages__load)</ept>","source":"[CMFCToolBarImages::Load](#cmfctoolbarimages__load)"},{"content":"Loads toolbar images from system resources or from a file.","pos":[5791,5849]},{"pos":[5854,5911],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::LoadStr<ept id=\"p1\">](#cmfctoolbarimages__loadstr)</ept>","source":"[CMFCToolBarImages::LoadStr](#cmfctoolbarimages__loadstr)"},{"pos":[5917,5990],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::MapFromSysColor<ept id=\"p1\">](#cmfctoolbarimages__mapfromsyscolor)</ept>","source":"[CMFCToolBarImages::MapFromSysColor](#cmfctoolbarimages__mapfromsyscolor)"},{"pos":[5996,6065],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::MapTo3dColors<ept id=\"p1\">](#cmfctoolbarimages__mapto3dcolors)</ept>","source":"[CMFCToolBarImages::MapTo3dColors](#cmfctoolbarimages__mapto3dcolors)"},{"pos":[6071,6140],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::MapToSysColor<ept id=\"p1\">](#cmfctoolbarimages__maptosyscolor)</ept>","source":"[CMFCToolBarImages::MapToSysColor](#cmfctoolbarimages__maptosyscolor)"},{"pos":[6146,6225],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::MapToSysColorAlpha<ept id=\"p1\">](#cmfctoolbarimages__maptosyscoloralpha)</ept>","source":"[CMFCToolBarImages::MapToSysColorAlpha](#cmfctoolbarimages__maptosyscoloralpha)"},{"pos":[6231,6286],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::Mirror<ept id=\"p1\">](#cmfctoolbarimages__mirror)</ept>","source":"[CMFCToolBarImages::Mirror](#cmfctoolbarimages__mirror)"},{"content":"Horizontally mirrors all of the toolbar images.","pos":[6287,6334]},{"pos":[6339,6406],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::MirrorBitmap<ept id=\"p1\">](#cmfctoolbarimages__mirrorbitmap)</ept>","source":"[CMFCToolBarImages::MirrorBitmap](#cmfctoolbarimages__mirrorbitmap)"},{"content":"Horizontally mirrors a bitmap.","pos":[6407,6437]},{"pos":[6442,6517],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::MirrorBitmapVert<ept id=\"p1\">](#cmfctoolbarimages__mirrorbitmapvert)</ept>","source":"[CMFCToolBarImages::MirrorBitmapVert](#cmfctoolbarimages__mirrorbitmapvert)"},{"pos":[6523,6586],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::MirrorVert<ept id=\"p1\">](#cmfctoolbarimages__mirrorvert)</ept>","source":"[CMFCToolBarImages::MirrorVert](#cmfctoolbarimages__mirrorvert)"},{"pos":[6592,6667],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::OnSysColorChange<ept id=\"p1\">](#cmfctoolbarimages__onsyscolorchange)</ept>","source":"[CMFCToolBarImages::OnSysColorChange](#cmfctoolbarimages__onsyscolorchange)"},{"pos":[6673,6748],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::PrepareDrawImage<ept id=\"p1\">](#cmfctoolbarimages__preparedrawimage)</ept>","source":"[CMFCToolBarImages::PrepareDrawImage](#cmfctoolbarimages__preparedrawimage)"},{"content":"Allocates the resources that are required to draw a toolbar image at a specified size.","pos":[6749,6835]},{"pos":[6840,6891],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::Save<ept id=\"p1\">](#cmfctoolbarimages__save)</ept>","source":"[CMFCToolBarImages::Save](#cmfctoolbarimages__save)"},{"content":"Stores the toolbar images in a file if this set of toolbar images contains user-defined images.","pos":[6892,6987]},{"pos":[6992,7063],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::SetAlwaysLight<ept id=\"p1\">](#cmfctoolbarimages__setalwayslight)</ept>","source":"[CMFCToolBarImages::SetAlwaysLight](#cmfctoolbarimages__setalwayslight)"},{"pos":[7069,7154],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::SetDisabledImageAlpha<ept id=\"p1\">](#cmfctoolbarimages__setdisabledimagealpha)</ept>","source":"[CMFCToolBarImages::SetDisabledImageAlpha](#cmfctoolbarimages__setdisabledimagealpha)"},{"content":"Sets the alpha channel value that is used for disabled images.","pos":[7155,7217]},{"pos":[7222,7301],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::SetFadedImageAlpha<ept id=\"p1\">](#cmfctoolbarimages__setfadedimagealpha)</ept>","source":"[CMFCToolBarImages::SetFadedImageAlpha](#cmfctoolbarimages__setfadedimagealpha)"},{"pos":[7307,7374],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::SetImageSize<ept id=\"p1\">](#cmfctoolbarimages__setimagesize)</ept>","source":"[CMFCToolBarImages::SetImageSize](#cmfctoolbarimages__setimagesize)"},{"content":"Sets the size of a toolbar image (source size).","pos":[7375,7422]},{"pos":[7427,7506],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::SetLightPercentage<ept id=\"p1\">](#cmfctoolbarimages__setlightpercentage)</ept>","source":"[CMFCToolBarImages::SetLightPercentage](#cmfctoolbarimages__setlightpercentage)"},{"pos":[7512,7587],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::SetMapTo3DColors<ept id=\"p1\">](#cmfctoolbarimages__setmapto3dcolors)</ept>","source":"[CMFCToolBarImages::SetMapTo3DColors](#cmfctoolbarimages__setmapto3dcolors)"},{"pos":[7593,7682],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::SetPreMultiplyAutoCheck<ept id=\"p1\">](#cmfctoolbarimages__setpremultiplyautocheck)</ept>","source":"[CMFCToolBarImages::SetPreMultiplyAutoCheck](#cmfctoolbarimages__setpremultiplyautocheck)"},{"pos":[7688,7759],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::SetSingleImage<ept id=\"p1\">](#cmfctoolbarimages__setsingleimage)</ept>","source":"[CMFCToolBarImages::SetSingleImage](#cmfctoolbarimages__setsingleimage)"},{"pos":[7765,7846],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::SetTransparentColor<ept id=\"p1\">](#cmfctoolbarimages__settransparentcolor)</ept>","source":"[CMFCToolBarImages::SetTransparentColor](#cmfctoolbarimages__settransparentcolor)"},{"content":"Sets the transparent color of the toolbar images.","pos":[7847,7896]},{"pos":[7901,7968],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::SmoothResize<ept id=\"p1\">](#cmfctoolbarimages__smoothresize)</ept>","source":"[CMFCToolBarImages::SmoothResize](#cmfctoolbarimages__smoothresize)"},{"content":"Smoothly resizes underlined images.","pos":[7969,8004]},{"pos":[8009,8074],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::UpdateImage<ept id=\"p1\">](#cmfctoolbarimages__updateimage)</ept>","source":"[CMFCToolBarImages::UpdateImage](#cmfctoolbarimages__updateimage)"},{"content":"Updates a user-defined toolbar image from a bitmap.","pos":[8075,8126]},{"pos":[8137,8154],"content":"Protected Methods","linkify":"Protected Methods","nodes":[{"content":"Protected Methods","pos":[0,17]}]},{"content":"Name","pos":[8161,8165]},{"content":"Description","pos":[8166,8177]},{"pos":[8215,8290],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::PreMultiplyAlpha<ept id=\"p1\">](#cmfctoolbarimages__premultiplyalpha)</ept>","source":"[CMFCToolBarImages::PreMultiplyAlpha](#cmfctoolbarimages__premultiplyalpha)"},{"pos":[8302,8314],"content":"Data Members","linkify":"Data Members","nodes":[{"content":"Data Members","pos":[0,12]}]},{"content":"Name","pos":[8321,8325]},{"content":"Description","pos":[8326,8337]},{"pos":[8375,8466],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages::m_bDisableTrueColorAlpha<ept id=\"p1\">](#cmfctoolbarimages__m_bdisabletruecoloralpha)</ept>","source":"[CMFCToolBarImages::m_bDisableTrueColorAlpha](#cmfctoolbarimages__m_bdisabletruecoloralpha)"},{"pos":[8467,8529],"content":"<ph id=\"ph1\">`TRUE`</ph> if truecolor alpha blending (32-bit color) is disabled.","source":"`TRUE` if truecolor alpha blending (32-bit color) is disabled."},{"pos":[8539,8546],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8550,8686],"content":"The full bitmap of toolbar images managed by <ph id=\"ph1\">`CMFCToolbarImages`</ph> consists of one or more small toolbar images (buttons) of a fixed size.","source":"The full bitmap of toolbar images managed by `CMFCToolbarImages` consists of one or more small toolbar images (buttons) of a fixed size."},{"pos":[8695,8702],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates how to configure a <ph id=\"ph1\">`CMFCToolBarImages`</ph> object by using various methods in the <ph id=\"ph2\">`CMFCToolBarImages`</ph> class.","pos":[8706,8845],"source":"The following example demonstrates how to configure a `CMFCToolBarImages` object by using various methods in the `CMFCToolBarImages` class."},{"content":"The example shows how to set the size of the toolbar image, load an image, and set the transparent color of the image.","pos":[8846,8964]},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>Visual Studio Demo sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[8965,9055],"source":" This code snippet is part of the [Visual Studio Demo sample](../../visual-cpp-samples.md)."},{"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_VisualStudioDemo#32<ept id=\"p2\">](../../mfc/codesnippet/cpp/cmfctoolbarimages-class_1.h)</ept><ept id=\"p1\">]</ept>","pos":[9062,9157],"source":"[!code-cpp[NVC_MFC_VisualStudioDemo#32](../../mfc/codesnippet/cpp/cmfctoolbarimages-class_1.h)]"},{"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_VisualStudioDemo#33<ept id=\"p2\">](../../mfc/codesnippet/cpp/cmfctoolbarimages-class_2.cpp)</ept><ept id=\"p1\">]</ept>","pos":[9160,9257],"source":"[!code-cpp[NVC_MFC_VisualStudioDemo#33](../../mfc/codesnippet/cpp/cmfctoolbarimages-class_2.cpp)]"},{"pos":[9266,9287],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[9291,9338],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[9345,9412],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBarImages<ept id=\"p1\">](../../mfc/reference/cmfctoolbarimages-class.md)</ept>","source":"[CMFCToolBarImages](../../mfc/reference/cmfctoolbarimages-class.md)"},{"pos":[9421,9433],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[9437,9467],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxtoolbarimages.h","source":"**Header:** afxtoolbarimages.h"},{"pos":[9477,9554],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__adaptcolors\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::AdaptColors","linkify":"<a name=\"cmfctoolbarimages__adaptcolors\"></a>  CMFCToolBarImages::AdaptColors","source":"<a name=\"cmfctoolbarimages__adaptcolors\"></a>  CMFCToolBarImages::AdaptColors"},{"pos":[9747,9757],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`clrBase`</ph>","pos":[9761,9775],"source":"[in] `clrBase`"},{"content":"[in] <ph id=\"ph1\">`clrTone`</ph>","pos":[9779,9793],"source":" [in] `clrTone`"},{"pos":[9803,9810],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9820,9889],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__addicon\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::AddIcon","linkify":"<a name=\"cmfctoolbarimages__addicon\"></a>  CMFCToolBarImages::AddIcon","source":"<a name=\"cmfctoolbarimages__addicon\"></a>  CMFCToolBarImages::AddIcon"},{"content":"Adds an icon to the list of toolbar images.","pos":[9893,9936]},{"pos":[10022,10032],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`hIcon`</ph>","pos":[10036,10048],"source":"[in] `hIcon`"},{"content":"A handle to the icon to be added.","pos":[10052,10085]},{"content":"[in] <ph id=\"ph1\">`bAlphaBlend`</ph>","pos":[10092,10110],"source":"[in] `bAlphaBlend`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if this icon is used with alpha blending; otherwise <ph id=\"ph2\">`FALSE`</ph>.","pos":[10113,10181],"source":" `TRUE` if this icon is used with alpha blending; otherwise `FALSE`."},{"pos":[10191,10203],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The zero-based index of the toolbar image that was added if the method is successful; otherwise -1.","pos":[10207,10306]},{"pos":[10316,10387],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__addimage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::AddImage","linkify":"<a name=\"cmfctoolbarimages__addimage\"></a>  CMFCToolBarImages::AddImage","source":"<a name=\"cmfctoolbarimages__addimage\"></a>  CMFCToolBarImages::AddImage"},{"content":"Adds a bitmap to the toolbar images.","pos":[10391,10427]},{"pos":[10593,10603],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`hbmp`</ph>","pos":[10607,10618],"source":"[in] `hbmp`"},{"content":"The handle to the bitmap to add.","pos":[10622,10654]},{"content":"[in] <ph id=\"ph1\">`bSetBitPerPixel`</ph>","pos":[10661,10683],"source":"[in] `bSetBitPerPixel`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if the <bpt id=\"p1\">[</bpt>CMFCToolBarImages<ept id=\"p1\">](../../mfc/reference/cmfctoolbarimages-class.md)</ept> object uses the color depth (bits per pixel) of the new image; <ph id=\"ph2\">`FALSE`</ph> if the <ph id=\"ph3\">`CMFCToolbarImages`</ph> object keeps the current color depth.","pos":[10686,10904],"source":" `TRUE` if the [CMFCToolBarImages](../../mfc/reference/cmfctoolbarimages-class.md) object uses the color depth (bits per pixel) of the new image; `FALSE` if the `CMFCToolbarImages` object keeps the current color depth."},{"content":"[in] <ph id=\"ph1\">`imageList`</ph>","pos":[10911,10927],"source":"[in] `imageList`"},{"content":"A reference to a <ph id=\"ph1\">`CMFCToolbarImages`</ph> object that contains the image to add.","pos":[10931,11006],"source":" A reference to a `CMFCToolbarImages` object that contains the image to add."},{"content":"[in] <ph id=\"ph1\">`nIndex`</ph>","pos":[11013,11026],"source":"[in] `nIndex`"},{"content":"The index in the source <ph id=\"ph1\">`CMFCToolbarImages`</ph> object of the image to add.","pos":[11030,11101],"source":" The index in the source `CMFCToolbarImages` object of the image to add."},{"pos":[11111,11123],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11127,11322],"content":"The number of toolbar images that the <bpt id=\"p1\">[</bpt>CMFCToolBarImages<ept id=\"p1\">](../../mfc/reference/cmfctoolbarimages-class.md)</ept> object maintains after the new bitmap was added successfully; -1 if the operation failed.","source":"The number of toolbar images that the [CMFCToolBarImages](../../mfc/reference/cmfctoolbarimages-class.md) object maintains after the new bitmap was added successfully; -1 if the operation failed."},{"pos":[11332,11401],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__cleanup\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::CleanUp","linkify":"<a name=\"cmfctoolbarimages__cleanup\"></a>  CMFCToolBarImages::CleanUp","source":"<a name=\"cmfctoolbarimages__cleanup\"></a>  CMFCToolBarImages::CleanUp"},{"pos":[11562,11569],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11579,11644],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__clear\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::Clear","linkify":"<a name=\"cmfctoolbarimages__clear\"></a>  CMFCToolBarImages::Clear","source":"<a name=\"cmfctoolbarimages__clear\"></a>  CMFCToolBarImages::Clear"},{"pos":[11648,11769],"content":"Frees the system resources that the <bpt id=\"p1\">[</bpt>CMFCToolbarImages<ept id=\"p1\">](../../mfc/reference/cmfctoolbarimages-class.md)</ept> object allocated.","source":"Frees the system resources that the [CMFCToolbarImages](../../mfc/reference/cmfctoolbarimages-class.md) object allocated."},{"pos":[11808,11897],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__cmfctoolbarimages\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::CMFCToolBarImages","linkify":"<a name=\"cmfctoolbarimages__cmfctoolbarimages\"></a>  CMFCToolBarImages::CMFCToolBarImages","source":"<a name=\"cmfctoolbarimages__cmfctoolbarimages\"></a>  CMFCToolBarImages::CMFCToolBarImages"},{"pos":[11901,11941],"content":"Constructs a <ph id=\"ph1\">`CMFCToolBarImages`</ph> object.","source":"Constructs a `CMFCToolBarImages` object."},{"pos":[11987,11994],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Constructs a <ph id=\"ph1\">`CMFCToolBarImages`</ph> object, initializes its rendering engine and sets the image size to its default value 16x15 pixels.","pos":[11998,12130],"source":"Constructs a `CMFCToolBarImages` object, initializes its rendering engine and sets the image size to its default value 16x15 pixels."},{"content":"Use <bpt id=\"p1\">[</bpt>CMFCToolBarImages::SetImageSize<ept id=\"p1\">](#cmfctoolbarimages__setimagesize)</ept> to change the image size before you add images.","pos":[12131,12250],"source":" Use [CMFCToolBarImages::SetImageSize](#cmfctoolbarimages__setimagesize) to change the image size before you add images."},{"pos":[12260,12355],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__copyimagetoclipboard\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::CopyImageToClipboard","linkify":"<a name=\"cmfctoolbarimages__copyimagetoclipboard\"></a>  CMFCToolBarImages::CopyImageToClipboard","source":"<a name=\"cmfctoolbarimages__copyimagetoclipboard\"></a>  CMFCToolBarImages::CopyImageToClipboard"},{"pos":[12522,12532],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[12536,12549],"content":"[in] <ph id=\"ph1\">`iImage`</ph>","source":"[in] `iImage`"},{"pos":[12559,12571],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12581,12588],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12598,12665],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__copyto\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::CopyTo","linkify":"<a name=\"cmfctoolbarimages__copyto\"></a>  CMFCToolBarImages::CopyTo","source":"<a name=\"cmfctoolbarimages__copyto\"></a>  CMFCToolBarImages::CopyTo"},{"pos":[12836,12846],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[12850,12866],"content":"[in] <ph id=\"ph1\">`imageList`</ph>","source":"[in] `imageList`"},{"pos":[12876,12888],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12898,12905],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12915,13008],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__createfromimagelist\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::CreateFromImageList","linkify":"<a name=\"cmfctoolbarimages__createfromimagelist\"></a>  CMFCToolBarImages::CreateFromImageList","source":"<a name=\"cmfctoolbarimages__createfromimagelist\"></a>  CMFCToolBarImages::CreateFromImageList"},{"pos":[13012,13117],"content":"Initializes the toolbar images from a <bpt id=\"p1\">[</bpt>CImageList Class<ept id=\"p1\">](../../mfc/reference/cimagelist-class.md)</ept> object.","source":"Initializes the toolbar images from a [CImageList Class](../../mfc/reference/cimagelist-class.md) object."},{"pos":[13197,13207],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`imageList`</ph>","pos":[13211,13227],"source":"[in] `imageList`"},{"content":"The image list to be used as a source for toolbar images.","pos":[13231,13288]},{"pos":[13298,13310],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[13314,13336],"content":"Always returns <ph id=\"ph1\">`TRUE`</ph>.","source":"Always returns `TRUE`."},{"pos":[13346,13353],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use this function to quickly initialize the toolbar images list from an external image list.","pos":[13357,13449]},{"pos":[13459,13556],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__createregionfromimage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::CreateRegionFromImage","linkify":"<a name=\"cmfctoolbarimages__createregionfromimage\"></a>  CMFCToolBarImages::CreateRegionFromImage","source":"<a name=\"cmfctoolbarimages__createregionfromimage\"></a>  CMFCToolBarImages::CreateRegionFromImage"},{"pos":[13778,13788],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bmp`</ph>","pos":[13792,13802],"source":"[in] `bmp`"},{"content":"[in] <ph id=\"ph1\">`clrTransparent`</ph>","pos":[13806,13827],"source":" [in] `clrTransparent`"},{"pos":[13837,13849],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[13859,13866],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[13876,13953],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__deleteimage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::DeleteImage","linkify":"<a name=\"cmfctoolbarimages__deleteimage\"></a>  CMFCToolBarImages::DeleteImage","source":"<a name=\"cmfctoolbarimages__deleteimage\"></a>  CMFCToolBarImages::DeleteImage"},{"content":"Deletes the user-defined image that has a specified index from the toolbar images.","pos":[13957,14039]},{"pos":[14094,14104],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iImage`</ph>","pos":[14108,14121],"source":"[in] `iImage`"},{"content":"Specifies the zero-based index of the image to delete.","pos":[14125,14179]},{"pos":[14189,14201],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[14205,14436],"content":"<ph id=\"ph1\">`TRUE`</ph> if the image was deleted successfully; <ph id=\"ph2\">`FALSE`</ph> if the image index is invalid, the <ph id=\"ph3\">`CMFCToolbarImages`</ph> object is temporary, the <ph id=\"ph4\">`CMFCToolbarImages`</ph> object does not contain user-defined images, or if some other error occurred.","source":"`TRUE` if the image was deleted successfully; `FALSE` if the image index is invalid, the `CMFCToolbarImages` object is temporary, the `CMFCToolbarImages` object does not contain user-defined images, or if some other error occurred."},{"pos":[14446,14509],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__draw\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::Draw","linkify":"<a name=\"cmfctoolbarimages__draw\"></a>  CMFCToolBarImages::Draw","source":"<a name=\"cmfctoolbarimages__draw\"></a>  CMFCToolBarImages::Draw"},{"content":"Draws a single toolbar image.","pos":[14513,14542]},{"pos":[14808,14818],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[14822,14832],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[14836,14866]},{"content":"[in] <ph id=\"ph1\">`x`</ph>","pos":[14873,14881],"source":"[in] `x`"},{"content":"The X coordinate of the left side of the rectangle where the image is to be drawn.","pos":[14885,14967]},{"content":"[in] <ph id=\"ph1\">`y`</ph>","pos":[14974,14982],"source":"[in] `y`"},{"content":"The Y coordinate of the top of the rectangle where the image is to be drawn.","pos":[14986,15062]},{"content":"[in] <ph id=\"ph1\">`iImageIndex`</ph>","pos":[15069,15087],"source":"[in] `iImageIndex`"},{"content":"The zero-based index of the image to be displayed.","pos":[15091,15141]},{"content":"[in] <ph id=\"ph1\">`bHilite`</ph>","pos":[15148,15162],"source":"[in] `bHilite`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if the image is to be highlighted; otherwise <ph id=\"ph2\">`FALSE`</ph>.","pos":[15165,15226],"source":" `TRUE` if the image is to be highlighted; otherwise `FALSE`."},{"content":"[in] <ph id=\"ph1\">`bDisabled`</ph>","pos":[15233,15249],"source":"[in] `bDisabled`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if the image is to be drawn in the disabled style; otherwise <ph id=\"ph2\">`FALSE`</ph>.","pos":[15252,15329],"source":" `TRUE` if the image is to be drawn in the disabled style; otherwise `FALSE`."},{"content":"[in] <ph id=\"ph1\">`bIndeterminate`</ph>","pos":[15336,15357],"source":"[in] `bIndeterminate`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if the image is to be drawn in the indeterminate state style; otherwise <ph id=\"ph2\">`FALSE`</ph>.","pos":[15360,15448],"source":" `TRUE` if the image is to be drawn in the indeterminate state style; otherwise `FALSE`."},{"content":"[in] <ph id=\"ph1\">`bShadow`</ph>","pos":[15455,15469],"source":"[in] `bShadow`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if the image is to be drawn with a drop shadow; otherwise <ph id=\"ph2\">`FALSE`</ph>.","pos":[15472,15546],"source":" `TRUE` if the image is to be drawn with a drop shadow; otherwise `FALSE`."},{"content":"[in] <ph id=\"ph1\">`bInactive`</ph>","pos":[15553,15569],"source":"[in] `bInactive`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if the image is to be drawn in the inactive state style; otherwise <ph id=\"ph2\">`FALSE`</ph>.","pos":[15572,15655],"source":" `TRUE` if the image is to be drawn in the inactive state style; otherwise `FALSE`."},{"content":"[in] <ph id=\"ph1\">`alphaSrc`</ph>","pos":[15662,15677],"source":"[in] `alphaSrc`"},{"content":"The alpha channel (opacity) value.","pos":[15681,15715]},{"content":"A value of 255 means the image is drawn opaque.","pos":[15716,15763]},{"content":"A value of 0 means the image is drawn transparent.","pos":[15764,15814]},{"content":"This value is used only for 32 bit color images and for images that displayed a Windows Vista glass style.","pos":[15815,15921]},{"pos":[15931,15943],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[15947,16073],"content":"<ph id=\"ph1\">`TRUE`</ph> if the specified image was displayed successfully; <ph id=\"ph2\">`FALSE`</ph> if the image index was invalid or some other error occurred.","source":"`TRUE` if the specified image was displayed successfully; `FALSE` if the image index was invalid or some other error occurred."},{"pos":[16083,16150],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__drawex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::DrawEx","linkify":"<a name=\"cmfctoolbarimages__drawex\"></a>  CMFCToolBarImages::DrawEx","source":"<a name=\"cmfctoolbarimages__drawex\"></a>  CMFCToolBarImages::DrawEx"},{"pos":[16532,16542],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[16546,16556],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[16560,16571],"source":" [in] `rect`"},{"content":"[in] <ph id=\"ph1\">`iImageIndex`</ph>","pos":[16575,16593],"source":" [in] `iImageIndex`"},{"content":"[in] <ph id=\"ph1\">`horzAlign`</ph>","pos":[16597,16613],"source":" [in] `horzAlign`"},{"content":"[in] <ph id=\"ph1\">`vertAlign`</ph>","pos":[16617,16633],"source":" [in] `vertAlign`"},{"content":"[in] <ph id=\"ph1\">`rectSrc`</ph>","pos":[16637,16651],"source":" [in] `rectSrc`"},{"content":"[in] <ph id=\"ph1\">`0`</ph>","pos":[16655,16663],"source":" [in] `0`"},{"content":"[in] <ph id=\"ph1\">`0)`</ph>","pos":[16667,16676],"source":" [in] `0)`"},{"content":"[in] <ph id=\"ph1\">`alphaSrc`</ph>","pos":[16680,16695],"source":" [in] `alphaSrc`"},{"pos":[16705,16717],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16727,16734],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[16744,16817],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__enablertl\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::EnableRTL","linkify":"<a name=\"cmfctoolbarimages__enablertl\"></a>  CMFCToolBarImages::EnableRTL","source":"<a name=\"cmfctoolbarimages__enablertl\"></a>  CMFCToolBarImages::EnableRTL"},{"pos":[16998,17008],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[17012,17025],"content":"[in] <ph id=\"ph1\">`bIsRTL`</ph>","source":"[in] `bIsRTL`"},{"pos":[17035,17042],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17052,17131],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__enddrawimage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::EndDrawImage","linkify":"<a name=\"cmfctoolbarimages__enddrawimage\"></a>  CMFCToolBarImages::EndDrawImage","source":"<a name=\"cmfctoolbarimages__enddrawimage\"></a>  CMFCToolBarImages::EndDrawImage"},{"pos":[17135,17343],"content":"Frees system resources that <bpt id=\"p1\">[</bpt>CMFCToolBarImages::PrepareDrawImage<ept id=\"p1\">](#cmfctoolbarimages__preparedrawimage)</ept> allocated after you draw a toolbar image by calling <bpt id=\"p2\">[</bpt>CMFCToolBarImages::Draw<ept id=\"p2\">](#cmfctoolbarimages__draw)</ept>.","source":"Frees system resources that [CMFCToolBarImages::PrepareDrawImage](#cmfctoolbarimages__preparedrawimage) allocated after you draw a toolbar image by calling [CMFCToolBarImages::Draw](#cmfctoolbarimages__draw)."},{"pos":[17406,17416],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`ds`</ph>","pos":[17420,17429],"source":"[in] `ds`"},{"content":"A reference to the <ph id=\"ph1\">`CAfxDrawState`</ph> object that was passed to the <ph id=\"ph2\">`PrepareDrawImage`</ph> method.","pos":[17433,17524],"source":" A reference to the `CAfxDrawState` object that was passed to the `PrepareDrawImage` method."},{"pos":[17534,17611],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__extracticon\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::ExtractIcon","linkify":"<a name=\"cmfctoolbarimages__extracticon\"></a>  CMFCToolBarImages::ExtractIcon","source":"<a name=\"cmfctoolbarimages__extracticon\"></a>  CMFCToolBarImages::ExtractIcon"},{"content":"Returns the icon that has a specified image index from the toolbar images.","pos":[17615,17689]},{"pos":[17745,17755],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nIndex`</ph>","pos":[17759,17772],"source":"[in] `nIndex`"},{"content":"The zero-based index in the image list at which the image to be extracted as an icon is located.","pos":[17776,17872]},{"pos":[17882,17894],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17898,17968],"content":"A handle to the extracted icon, or <ph id=\"ph1\">`NULL`</ph> if <ph id=\"ph2\">`nIndex`</ph> is out of range.","source":"A handle to the extracted icon, or `NULL` if `nIndex` is out of range."},{"pos":[17978,18065],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__fillditheredrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::FillDitheredRect","linkify":"<a name=\"cmfctoolbarimages__fillditheredrect\"></a>  CMFCToolBarImages::FillDitheredRect","source":"<a name=\"cmfctoolbarimages__fillditheredrect\"></a>  CMFCToolBarImages::FillDitheredRect"},{"content":"Fills a rectangle with the toolbar background colors.","pos":[18069,18122]},{"pos":[18217,18227],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[18231,18241],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[18245,18275]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[18282,18293],"source":"[in] `rect`"},{"content":"The coordinates of a rectangle to fill.","pos":[18297,18336]},{"pos":[18346,18353],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use this method to fill a rectangle with a color that is the average of the system colors COLOR_BTNFACE and COLOR_BTNHIGHLIGHT.","pos":[18357,18484]},{"content":"If the system is using 256 or fewer colors, the rectangle will be filled with a dithered pattern of those two colors instead.","pos":[18485,18610]},{"pos":[18620,18703],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__getalwayslight\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::GetAlwaysLight","linkify":"<a name=\"cmfctoolbarimages__getalwayslight\"></a>  CMFCToolBarImages::GetAlwaysLight","source":"<a name=\"cmfctoolbarimages__getalwayslight\"></a>  CMFCToolBarImages::GetAlwaysLight"},{"pos":[18863,18875],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[18885,18892],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[18902,18973],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__getcount\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::GetCount","linkify":"<a name=\"cmfctoolbarimages__getcount\"></a>  CMFCToolBarImages::GetCount","source":"<a name=\"cmfctoolbarimages__getcount\"></a>  CMFCToolBarImages::GetCount"},{"content":"Returns the number of images in the toolbar images list.","pos":[18977,19033]},{"pos":[19083,19095],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19099,19202],"content":"The number of images in the <bpt id=\"p1\">[</bpt>CMFCToolbarImages<ept id=\"p1\">](../../mfc/reference/cmfctoolbarimages-class.md)</ept> object.","source":"The number of images in the [CMFCToolbarImages](../../mfc/reference/cmfctoolbarimages-class.md) object."},{"pos":[19212,19309],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__getdisabledimagealpha\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::GetDisabledImageAlpha","linkify":"<a name=\"cmfctoolbarimages__getdisabledimagealpha\"></a>  CMFCToolBarImages::GetDisabledImageAlpha","source":"<a name=\"cmfctoolbarimages__getdisabledimagealpha\"></a>  CMFCToolBarImages::GetDisabledImageAlpha"},{"content":"Returns the alpha channel (opacity) value that is used for disabled images.","pos":[19313,19388]},{"pos":[19450,19462],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current alpha channel value.","pos":[19466,19498]},{"pos":[19508,19515],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[19519,19652],"content":"You can call <bpt id=\"p1\">[</bpt>CMFCToolBarImages::SetDisabledImageAlpha<ept id=\"p1\">](#cmfctoolbarimages__setdisabledimagealpha)</ept> to change the alpha channel value.","source":"You can call [CMFCToolBarImages::SetDisabledImageAlpha](#cmfctoolbarimages__setdisabledimagealpha) to change the alpha channel value."},{"pos":[19662,19753],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__getfadedimagealpha\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::GetFadedImageAlpha","linkify":"<a name=\"cmfctoolbarimages__getfadedimagealpha\"></a>  CMFCToolBarImages::GetFadedImageAlpha","source":"<a name=\"cmfctoolbarimages__getfadedimagealpha\"></a>  CMFCToolBarImages::GetFadedImageAlpha"},{"pos":[19925,19937],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19947,19954],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[19964,20043],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__getimagesize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::GetImageSize","linkify":"<a name=\"cmfctoolbarimages__getimagesize\"></a>  CMFCToolBarImages::GetImageSize","source":"<a name=\"cmfctoolbarimages__getimagesize\"></a>  CMFCToolBarImages::GetImageSize"},{"content":"Retrieves either the size of the toolbar images that are stored in memory (source size), or the size of the toolbar images that are drawn on the screen (destination size).","pos":[20047,20218]},{"pos":[20289,20299],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bDest`</ph>","pos":[20303,20315],"source":"[in] `bDest`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to retrieve the destination size; <ph id=\"ph2\">`FALSE`</ph> to retrieve the source image size.","pos":[20318,20402],"source":" `TRUE` to retrieve the destination size; `FALSE` to retrieve the source image size."},{"pos":[20412,20424],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20428,20495],"content":"A <ph id=\"ph1\">`SIZE`</ph> structure, which specifies the size of an image in pixels.","source":"A `SIZE` structure, which specifies the size of an image in pixels."},{"pos":[20505,20512],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The size of the source image is the size of the images that are stored in the <bpt id=\"p1\">[</bpt>CMFCToolbarImages<ept id=\"p1\">](../../mfc/reference/cmfctoolbarimages-class.md)</ept> object.","pos":[20516,20669],"source":"The size of the source image is the size of the images that are stored in the [CMFCToolbarImages](../../mfc/reference/cmfctoolbarimages-class.md) object."},{"content":"You can call <bpt id=\"p1\">[</bpt>CMFCToolBarImages::SetImageSize<ept id=\"p1\">](#cmfctoolbarimages__setimagesize)</ept> to set the source size.","pos":[20670,20774],"source":" You can call [CMFCToolBarImages::SetImageSize](#cmfctoolbarimages__setimagesize) to set the source size."},{"content":"The default value is 16x15 pixels.","pos":[20775,20809]},{"content":"By default, the destination image size is 0x0.","pos":[20816,20862]},{"content":"You specify the destination size when you call <bpt id=\"p1\">[</bpt>CMFCToolBarImages::PrepareDrawImage<ept id=\"p1\">](#cmfctoolbarimages__preparedrawimage)</ept>.","pos":[20863,20986],"source":" You specify the destination size when you call [CMFCToolBarImages::PrepareDrawImage](#cmfctoolbarimages__preparedrawimage)."},{"content":"The <bpt id=\"p1\">[</bpt>CMFCToolBarImages::EndDrawImage<ept id=\"p1\">](#cmfctoolbarimages__enddrawimage)</ept> method resets the destination size to the default value.","pos":[20987,21115],"source":" The [CMFCToolBarImages::EndDrawImage](#cmfctoolbarimages__enddrawimage) method resets the destination size to the default value."},{"pos":[21125,21204],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__getimagewell\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::GetImageWell","linkify":"<a name=\"cmfctoolbarimages__getimagewell\"></a>  CMFCToolBarImages::GetImageWell","source":"<a name=\"cmfctoolbarimages__getimagewell\"></a>  CMFCToolBarImages::GetImageWell"},{"content":"Returns the handle to the bitmap that contains all the toolbar images.","pos":[21208,21278]},{"pos":[21336,21348],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A handle to a bitmap that contains toolbar images.","pos":[21352,21402]},{"pos":[21412,21419],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The toolbar images are stored in a row in a single bitmap that is known as an <bpt id=\"p1\">*</bpt>image well<ept id=\"p1\">*</ept>.","pos":[21423,21514],"source":"The toolbar images are stored in a row in a single bitmap that is known as an *image well*."},{"content":"To find a toolbar image in the image well, multiply the index of the image by the width of the toolbar images (see <bpt id=\"p1\">[</bpt>CMFCToolBarImages::GetImageSize<ept id=\"p1\">](#cmfctoolbarimages__getimagesize)</ept>) to obtain the horizontal offset of the image inside the image well.","pos":[21515,21766],"source":" To find a toolbar image in the image well, multiply the index of the image by the width of the toolbar images (see [CMFCToolBarImages::GetImageSize](#cmfctoolbarimages__getimagesize)) to obtain the horizontal offset of the image inside the image well."},{"pos":[21776,21865],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__getimagewelllight\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::GetImageWellLight","linkify":"<a name=\"cmfctoolbarimages__getimagewelllight\"></a>  CMFCToolBarImages::GetImageWellLight","source":"<a name=\"cmfctoolbarimages__getimagewelllight\"></a>  CMFCToolBarImages::GetImageWellLight"},{"pos":[22031,22043],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22053,22060],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[22070,22157],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__getlastimagerect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::GetLastImageRect","linkify":"<a name=\"cmfctoolbarimages__getlastimagerect\"></a>  CMFCToolBarImages::GetLastImageRect","source":"<a name=\"cmfctoolbarimages__getlastimagerect\"></a>  CMFCToolBarImages::GetLastImageRect"},{"pos":[22320,22332],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22342,22349],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[22359,22450],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__getlightpercentage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::GetLightPercentage","linkify":"<a name=\"cmfctoolbarimages__getlightpercentage\"></a>  CMFCToolBarImages::GetLightPercentage","source":"<a name=\"cmfctoolbarimages__getlightpercentage\"></a>  CMFCToolBarImages::GetLightPercentage"},{"pos":[22613,22625],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22635,22642],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[22652,22739],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__getmapto3dcolors\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::GetMapTo3DColors","linkify":"<a name=\"cmfctoolbarimages__getmapto3dcolors\"></a>  CMFCToolBarImages::GetMapTo3DColors","source":"<a name=\"cmfctoolbarimages__getmapto3dcolors\"></a>  CMFCToolBarImages::GetMapTo3DColors"},{"pos":[22901,22913],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22923,22930],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[22940,23009],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__getmask\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::GetMask","linkify":"<a name=\"cmfctoolbarimages__getmask\"></a>  CMFCToolBarImages::GetMask","source":"<a name=\"cmfctoolbarimages__getmask\"></a>  CMFCToolBarImages::GetMask"},{"pos":[23166,23176],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[23180,23193],"content":"[in] <ph id=\"ph1\">`iImage`</ph>","source":"[in] `iImage`"},{"pos":[23203,23215],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23225,23232],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[23242,23331],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__getresourceoffset\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::GetResourceOffset","linkify":"<a name=\"cmfctoolbarimages__getresourceoffset\"></a>  CMFCToolBarImages::GetResourceOffset","source":"<a name=\"cmfctoolbarimages__getresourceoffset\"></a>  CMFCToolBarImages::GetResourceOffset"},{"content":"Returns the image index for a specified resource ID.","pos":[23335,23387]},{"pos":[23458,23468],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`uiResId`</ph>","pos":[23472,23486],"source":"[in] `uiResId`"},{"content":"An image resource ID.","pos":[23490,23511]},{"pos":[23521,23533],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An image index if the method was successful; -1 if the image with the specified resource ID does not exist.","pos":[23537,23644]},{"pos":[23654,23747],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__gettransparentcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::GetTransparentColor","linkify":"<a name=\"cmfctoolbarimages__gettransparentcolor\"></a>  CMFCToolBarImages::GetTransparentColor","source":"<a name=\"cmfctoolbarimages__gettransparentcolor\"></a>  CMFCToolBarImages::GetTransparentColor"},{"pos":[23916,23928],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23938,23945],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[23955,24030],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__grayimages\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::GrayImages","linkify":"<a name=\"cmfctoolbarimages__grayimages\"></a>  CMFCToolBarImages::GrayImages","source":"<a name=\"cmfctoolbarimages__grayimages\"></a>  CMFCToolBarImages::GrayImages"},{"content":"Grays the toolbar images to make them look disabled.","pos":[24034,24086]},{"pos":[24163,24173],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nGrayImageLuminancePercentage`</ph>","pos":[24177,24213],"source":"[in] `nGrayImageLuminancePercentage`"},{"content":"Luminance percentage.","pos":[24217,24238]},{"pos":[24248,24260],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24264,24343],"content":"<ph id=\"ph1\">`TRUE`</ph> if images in the collection were grayed successfully; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if images in the collection were grayed successfully; otherwise `FALSE`."},{"pos":[24353,24360],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method modifies the toolbar images by averaging the red, green, and blue components of each pixel and multiplying the result by <ph id=\"ph1\">`nGrayImageLuminancePercentage`</ph> divided by 100.","pos":[24364,24544],"source":"This method modifies the toolbar images by averaging the red, green, and blue components of each pixel and multiplying the result by `nGrayImageLuminancePercentage` divided by 100."},{"content":"If <ph id=\"ph1\">`nGrayImageLuminancePercentage`</ph> is zero or negative, the default value of 130 is used instead.","pos":[24545,24642],"source":" If `nGrayImageLuminancePercentage` is zero or negative, the default value of 130 is used instead."},{"pos":[24650,25145],"content":"[!NOTE]\n If you want to undo the change, you must reload the images from the source. You can do this by calling [CMFCToolBarImages::Load](#cmfctoolbarimages__load) or [CMFCToolBarImages::UpdateImage](#cmfctoolbarimages__updateimage) (only for user-defined images), or by calling [CMFCToolBarImages::Clear](#cmfctoolbarimages__clear) and adding the images again by calling [CMFCToolBarImages::AddIcon](#cmfctoolbarimages__addicon) or [CMFCToolBarImages::AddImage](#cmfctoolbarimages__addimage).","leadings":["","> "],"nodes":[{"content":" If you want to undo the change, you must reload the images from the source. You can do this by calling [CMFCToolBarImages::Load](#cmfctoolbarimages__load) or [CMFCToolBarImages::UpdateImage](#cmfctoolbarimages__updateimage) (only for user-defined images), or by calling [CMFCToolBarImages::Clear](#cmfctoolbarimages__clear) and adding the images again by calling [CMFCToolBarImages::AddIcon](#cmfctoolbarimages__addicon) or [CMFCToolBarImages::AddImage](#cmfctoolbarimages__addimage).","pos":[8,493],"nodes":[{"content":"If you want to undo the change, you must reload the images from the source.","pos":[1,76]},{"content":"You can do this by calling <bpt id=\"p1\">[</bpt>CMFCToolBarImages::Load<ept id=\"p1\">](#cmfctoolbarimages__load)</ept> or <bpt id=\"p2\">[</bpt>CMFCToolBarImages::UpdateImage<ept id=\"p2\">](#cmfctoolbarimages__updateimage)</ept> (only for user-defined images), or by calling <bpt id=\"p3\">[</bpt>CMFCToolBarImages::Clear<ept id=\"p3\">](#cmfctoolbarimages__clear)</ept> and adding the images again by calling <bpt id=\"p4\">[</bpt>CMFCToolBarImages::AddIcon<ept id=\"p4\">](#cmfctoolbarimages__addicon)</ept> or <bpt id=\"p5\">[</bpt>CMFCToolBarImages::AddImage<ept id=\"p5\">](#cmfctoolbarimages__addimage)</ept>.","pos":[77,485],"source":" You can do this by calling [CMFCToolBarImages::Load](#cmfctoolbarimages__load) or [CMFCToolBarImages::UpdateImage](#cmfctoolbarimages__updateimage) (only for user-defined images), or by calling [CMFCToolBarImages::Clear](#cmfctoolbarimages__clear) and adding the images again by calling [CMFCToolBarImages::AddIcon](#cmfctoolbarimages__addicon) or [CMFCToolBarImages::AddImage](#cmfctoolbarimages__addimage)."}]}]},{"pos":[25155,25266],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__is32bittransparencysupported\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::Is32BitTransparencySupported","linkify":"<a name=\"cmfctoolbarimages__is32bittransparencysupported\"></a>  CMFCToolBarImages::Is32BitTransparencySupported","source":"<a name=\"cmfctoolbarimages__is32bittransparencysupported\"></a>  CMFCToolBarImages::Is32BitTransparencySupported"},{"content":"Specifies whether the operating system supports 32-bit alpha blending.","pos":[25270,25340]},{"pos":[25409,25421],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[25425,25489],"content":"<ph id=\"ph1\">`TRUE`</ph> if 32-bit alpha blending is supported; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if 32-bit alpha blending is supported; otherwise `FALSE`."},{"pos":[25499,25506],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use this static method to determine at runtime whether the operating system supports 32-bit alpha blending.","pos":[25510,25617]},{"content":"This feature is supported on <ph id=\"ph1\">[!INCLUDE[Win2kFamily](../../c-runtime-library/includes/win2kfamily_md.md)]</ph> and later versions.","pos":[25618,25742],"source":" This feature is supported on [!INCLUDE[Win2kFamily](../../c-runtime-library/includes/win2kfamily_md.md)] and later versions."},{"pos":[25752,25851],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__ispremultiplyautocheck\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::IsPreMultiplyAutoCheck","linkify":"<a name=\"cmfctoolbarimages__ispremultiplyautocheck\"></a>  CMFCToolBarImages::IsPreMultiplyAutoCheck","source":"<a name=\"cmfctoolbarimages__ispremultiplyautocheck\"></a>  CMFCToolBarImages::IsPreMultiplyAutoCheck"},{"pos":[26019,26031],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[26041,26048],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[26058,26133],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__isreadonly\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::IsReadOnly","linkify":"<a name=\"cmfctoolbarimages__isreadonly\"></a>  CMFCToolBarImages::IsReadOnly","source":"<a name=\"cmfctoolbarimages__isreadonly\"></a>  CMFCToolBarImages::IsReadOnly"},{"content":"Specifies whether the toolbar images are read-only.","pos":[26137,26188]},{"pos":[26241,26253],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[26257,26319],"content":"<ph id=\"ph1\">`TRUE`</ph> if the toolbar images are read-only, otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the toolbar images are read-only, otherwise `FALSE`."},{"pos":[26329,26336],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[26340,26534],"content":"The <ph id=\"ph1\">`CMFCToolbarImages`</ph> object is read-only when the bitmap with toolbar images was loaded from a read-only file, or when the bitmap was copied in using the <ph id=\"ph2\">`CMFCToolBarImages::CopyTemp`</ph> method.","source":"The `CMFCToolbarImages` object is read-only when the bitmap with toolbar images was loaded from a read-only file, or when the bitmap was copied in using the `CMFCToolBarImages::CopyTemp` method."},{"pos":[26544,26609],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__isrtl\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::IsRTL","linkify":"<a name=\"cmfctoolbarimages__isrtl\"></a>  CMFCToolBarImages::IsRTL","source":"<a name=\"cmfctoolbarimages__isrtl\"></a>  CMFCToolBarImages::IsRTL"},{"content":"Specifies whether right-to-left (RTL) support is enabled.","pos":[26613,26670]},{"pos":[26716,26728],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[26732,26784],"content":"<ph id=\"ph1\">`TRUE`</ph> if RTL support is enabled; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if RTL support is enabled; otherwise `FALSE`."},{"pos":[26794,26801],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"RTL support is used when the application is localized to a language that is read from right to left, such as Arabic, Hebrew, Persian, or Urdu.","pos":[26805,26947]},{"pos":[26957,27044],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__isuserimageslist\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::IsUserImagesList","linkify":"<a name=\"cmfctoolbarimages__isuserimageslist\"></a>  CMFCToolBarImages::IsUserImagesList","source":"<a name=\"cmfctoolbarimages__isuserimageslist\"></a>  CMFCToolBarImages::IsUserImagesList"},{"content":"Specifies whether this set of toolbar images contains user-defined images.","pos":[27048,27122]},{"pos":[27181,27193],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[27197,27342],"content":"<ph id=\"ph1\">`TRUE`</ph> if the <bpt id=\"p1\">[</bpt>CMFCToolbarImages<ept id=\"p1\">](../../mfc/reference/cmfctoolbarimages-class.md)</ept> object contains user-defined toolbar images; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the [CMFCToolbarImages](../../mfc/reference/cmfctoolbarimages-class.md) object contains user-defined toolbar images; otherwise `FALSE`."},{"pos":[27352,27421],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__isvalid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::IsValid","linkify":"<a name=\"cmfctoolbarimages__isvalid\"></a>  CMFCToolBarImages::IsValid","source":"<a name=\"cmfctoolbarimages__isvalid\"></a>  CMFCToolBarImages::IsValid"},{"content":"Indicates whether this set of toolbar images contains a valid toolbar image.","pos":[27425,27501]},{"pos":[27551,27563],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[27567,27682],"content":"<ph id=\"ph1\">`TRUE`</ph> if a <bpt id=\"p1\">[</bpt>CMFCToolbarImages<ept id=\"p1\">](../../mfc/reference/cmfctoolbarimages-class.md)</ept> object is valid; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if a [CMFCToolbarImages](../../mfc/reference/cmfctoolbarimages-class.md) object is valid; otherwise `FALSE`."},{"pos":[27692,27699],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[27703,27805],"content":"The <ph id=\"ph1\">`CMFCToolBarImages`</ph> object is not valid when its handle to a bitmap with toolbar images is <ph id=\"ph2\">`NULL`</ph>.","source":"The `CMFCToolBarImages` object is not valid when its handle to a bitmap with toolbar images is `NULL`."},{"pos":[27815,27878],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__load\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::Load","linkify":"<a name=\"cmfctoolbarimages__load\"></a>  CMFCToolBarImages::Load","source":"<a name=\"cmfctoolbarimages__load\"></a>  CMFCToolBarImages::Load"},{"content":"Loads toolbar images from system resources or from a file.","pos":[27882,27940]},{"pos":[28127,28137],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`uiResID`</ph>","pos":[28141,28155],"source":"[in] `uiResID`"},{"content":"The ID of a bitmap resource.","pos":[28159,28187]},{"content":"[in] <ph id=\"ph1\">`hinstRes`</ph>","pos":[28194,28209],"source":"[in] `hinstRes`"},{"content":"An instance of the resource DLL.","pos":[28213,28245]},{"content":"[in] <ph id=\"ph1\">`bAdd`</ph>","pos":[28252,28263],"source":"[in] `bAdd`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to add the loaded bitmap to the existing bitmap, or <ph id=\"ph2\">`FALSE`</ph> to replace the existing bitmap.","pos":[28266,28365],"source":" `TRUE` to add the loaded bitmap to the existing bitmap, or `FALSE` to replace the existing bitmap."},{"content":"[in] <ph id=\"ph1\">`lpszBmpFileName`</ph>","pos":[28372,28394],"source":"[in] `lpszBmpFileName`"},{"content":"A path to a disk file from which to load the bitmap.","pos":[28398,28450]},{"content":"[in] <ph id=\"ph1\">`nMaxFileSize`</ph>","pos":[28457,28476],"source":"[in] `nMaxFileSize`"},{"content":"Maximum number of bytes in the bitmap file; or 0 to load the bitmap regardless of file size.","pos":[28480,28572]},{"content":"If the size of the file exceeds this maximum size, the method returns <ph id=\"ph1\">`FALSE`</ph> and does not load the bitmap.","pos":[28573,28680],"source":" If the size of the file exceeds this maximum size, the method returns `FALSE` and does not load the bitmap."},{"pos":[28690,28702],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[28706,28770],"content":"<ph id=\"ph1\">`TRUE`</ph> if the bitmap was loaded successfully; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the bitmap was loaded successfully; otherwise `FALSE`."},{"pos":[28780,28787],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the file has the read-only attribute, the image list is marked as read-only.","pos":[28791,28870]},{"pos":[28880,28949],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__loadstr\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::LoadStr","linkify":"<a name=\"cmfctoolbarimages__loadstr\"></a>  CMFCToolBarImages::LoadStr","source":"<a name=\"cmfctoolbarimages__loadstr\"></a>  CMFCToolBarImages::LoadStr"},{"pos":[29180,29190],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`lpszResourceName`</ph>","pos":[29194,29217],"source":"[in] `lpszResourceName`"},{"content":"[in] <ph id=\"ph1\">`hinstRes`</ph>","pos":[29221,29236],"source":" [in] `hinstRes`"},{"content":"[in] <ph id=\"ph1\">`bAdd`</ph>","pos":[29240,29251],"source":" [in] `bAdd`"},{"pos":[29261,29273],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[29283,29290],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[29300,29385],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__mapfromsyscolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::MapFromSysColor","linkify":"<a name=\"cmfctoolbarimages__mapfromsyscolor\"></a>  CMFCToolBarImages::MapFromSysColor","source":"<a name=\"cmfctoolbarimages__mapfromsyscolor\"></a>  CMFCToolBarImages::MapFromSysColor"},{"pos":[29608,29618],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`color`</ph>","pos":[29622,29634],"source":"[in] `color`"},{"content":"[in] <ph id=\"ph1\">`bUseRGBQUAD`</ph>","pos":[29638,29656],"source":" [in] `bUseRGBQUAD`"},{"pos":[29666,29678],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[29688,29695],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[29705,29786],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__mapto3dcolors\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::MapTo3dColors","linkify":"<a name=\"cmfctoolbarimages__mapto3dcolors\"></a>  CMFCToolBarImages::MapTo3dColors","source":"<a name=\"cmfctoolbarimages__mapto3dcolors\"></a>  CMFCToolBarImages::MapTo3dColors"},{"pos":[30041,30051],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bUseRGBQUAD`</ph>","pos":[30055,30073],"source":"[in] `bUseRGBQUAD`"},{"content":"[in] <ph id=\"ph1\">`clrSrc`</ph>","pos":[30077,30090],"source":" [in] `clrSrc`"},{"content":"[in] <ph id=\"ph1\">`clrDest`</ph>","pos":[30094,30108],"source":" [in] `clrDest`"},{"pos":[30118,30130],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[30140,30147],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[30157,30238],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__maptosyscolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::MapToSysColor","linkify":"<a name=\"cmfctoolbarimages__maptosyscolor\"></a>  CMFCToolBarImages::MapToSysColor","source":"<a name=\"cmfctoolbarimages__maptosyscolor\"></a>  CMFCToolBarImages::MapToSysColor"},{"pos":[30459,30469],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`color`</ph>","pos":[30473,30485],"source":"[in] `color`"},{"content":"[in] <ph id=\"ph1\">`bUseRGBQUAD`</ph>","pos":[30489,30507],"source":" [in] `bUseRGBQUAD`"},{"pos":[30517,30529],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[30539,30546],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[30556,30647],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__maptosyscoloralpha\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::MapToSysColorAlpha","linkify":"<a name=\"cmfctoolbarimages__maptosyscoloralpha\"></a>  CMFCToolBarImages::MapToSysColorAlpha","source":"<a name=\"cmfctoolbarimages__maptosyscoloralpha\"></a>  CMFCToolBarImages::MapToSysColorAlpha"},{"pos":[30837,30847],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[30851,30863],"content":"[in] <ph id=\"ph1\">`color`</ph>","source":"[in] `color`"},{"pos":[30873,30885],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[30895,30902],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[30912,30979],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__mirror\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::Mirror","linkify":"<a name=\"cmfctoolbarimages__mirror\"></a>  CMFCToolBarImages::Mirror","source":"<a name=\"cmfctoolbarimages__mirror\"></a>  CMFCToolBarImages::Mirror"},{"content":"Replaces the toolbar images with their horizontal mirror image.","pos":[30983,31046]},{"pos":[31086,31098],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[31102,31169],"content":"<ph id=\"ph1\">`TRUE`</ph> if the images were successfully mirrored; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the images were successfully mirrored; otherwise `FALSE`."},{"pos":[31179,31186],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used to support right-to-left writing systems.","pos":[31190,31251]},{"pos":[31261,31340],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__mirrorbitmap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::MirrorBitmap","linkify":"<a name=\"cmfctoolbarimages__mirrorbitmap\"></a>  CMFCToolBarImages::MirrorBitmap","source":"<a name=\"cmfctoolbarimages__mirrorbitmap\"></a>  CMFCToolBarImages::MirrorBitmap"},{"content":"Replaces a bitmap with its horizontal mirror image.","pos":[31344,31395]},{"pos":[31485,31495],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in, out] <ph id=\"ph1\">`hbmp`</ph>","pos":[31499,31515],"source":"[in, out] `hbmp`"},{"content":"A handle to bitmap to mirror.","pos":[31519,31548]},{"content":"[in] <ph id=\"ph1\">`cxImage`</ph>","pos":[31555,31569],"source":"[in] `cxImage`"},{"content":"Width of the image in pixels.","pos":[31573,31602]},{"pos":[31612,31624],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[31628,31693],"content":"<ph id=\"ph1\">`TRUE`</ph> if the image was successfully mirrored; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the image was successfully mirrored; otherwise `FALSE`."},{"pos":[31703,31710],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function is used to support right-to-left writing systems.","pos":[31714,31777]},{"pos":[31787,31874],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__mirrorbitmapvert\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::MirrorBitmapVert","linkify":"<a name=\"cmfctoolbarimages__mirrorbitmapvert\"></a>  CMFCToolBarImages::MirrorBitmapVert","source":"<a name=\"cmfctoolbarimages__mirrorbitmapvert\"></a>  CMFCToolBarImages::MirrorBitmapVert"},{"pos":[32081,32091],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`hbmp`</ph>","pos":[32095,32106],"source":"[in] `hbmp`"},{"content":"[in] <ph id=\"ph1\">`cyImage`</ph>","pos":[32110,32124],"source":" [in] `cyImage`"},{"pos":[32134,32146],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[32156,32163],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[32173,32248],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__mirrorvert\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::MirrorVert","linkify":"<a name=\"cmfctoolbarimages__mirrorvert\"></a>  CMFCToolBarImages::MirrorVert","source":"<a name=\"cmfctoolbarimages__mirrorvert\"></a>  CMFCToolBarImages::MirrorVert"},{"pos":[32395,32407],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[32417,32424],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[32434,32521],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__onsyscolorchange\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::OnSysColorChange","linkify":"<a name=\"cmfctoolbarimages__onsyscolorchange\"></a>  CMFCToolBarImages::OnSysColorChange","source":"<a name=\"cmfctoolbarimages__onsyscolorchange\"></a>  CMFCToolBarImages::OnSysColorChange"},{"pos":[32674,32681],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[32691,32778],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__premultiplyalpha\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::PreMultiplyAlpha","linkify":"<a name=\"cmfctoolbarimages__premultiplyalpha\"></a>  CMFCToolBarImages::PreMultiplyAlpha","source":"<a name=\"cmfctoolbarimages__premultiplyalpha\"></a>  CMFCToolBarImages::PreMultiplyAlpha"},{"pos":[33037,33047],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`hbmp`</ph>","pos":[33051,33062],"source":"[in] `hbmp`"},{"content":"[in] <ph id=\"ph1\">`bAutoCheckPremlt`</ph>","pos":[33066,33089],"source":" [in] `bAutoCheckPremlt`"},{"pos":[33099,33111],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[33121,33128],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[33138,33241],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__m_bdisabletruecoloralpha\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::m_bDisableTrueColorAlpha","linkify":"<a name=\"cmfctoolbarimages__m_bdisabletruecoloralpha\"></a>  CMFCToolBarImages::m_bDisableTrueColorAlpha","source":"<a name=\"cmfctoolbarimages__m_bdisabletruecoloralpha\"></a>  CMFCToolBarImages::m_bDisableTrueColorAlpha"},{"pos":[33245,33307],"content":"<ph id=\"ph1\">`TRUE`</ph> if truecolor alpha blending (32-bit color) is disabled.","source":"`TRUE` if truecolor alpha blending (32-bit color) is disabled."},{"pos":[33372,33379],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[33383,33473],"content":"Set this member variable to <ph id=\"ph1\">`FALSE`</ph> to enable truecolor alpha-blending for toolbar images.","source":"Set this member variable to `FALSE` to enable truecolor alpha-blending for toolbar images."},{"pos":[33480,33535],"content":"The default value is <ph id=\"ph1\">`TRUE`</ph> for backward compatibility.","source":"The default value is `TRUE` for backward compatibility."},{"pos":[33545,33632],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__preparedrawimage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::PrepareDrawImage","linkify":"<a name=\"cmfctoolbarimages__preparedrawimage\"></a>  CMFCToolBarImages::PrepareDrawImage","source":"<a name=\"cmfctoolbarimages__preparedrawimage\"></a>  CMFCToolBarImages::PrepareDrawImage"},{"content":"Allocates the resources that are required to draw a toolbar image at a specified size.","pos":[33636,33722]},{"pos":[33868,33878],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`ds`</ph>","pos":[33882,33891],"source":"[in] `ds`"},{"content":"A reference to <ph id=\"ph1\">`CAfxDrawState`</ph> structure, which stores the allocated resources between image rendering stages.","pos":[33895,34005],"source":" A reference to `CAfxDrawState` structure, which stores the allocated resources between image rendering stages."},{"content":"[in] <ph id=\"ph1\">`sizeImageDest`</ph>","pos":[34012,34032],"source":"[in] `sizeImageDest`"},{"content":"Specifies the size of a destination image.","pos":[34036,34078]},{"content":"[in] <ph id=\"ph1\">`bFadeInactive`</ph>","pos":[34085,34105],"source":"[in] `bFadeInactive`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if you want inactive images to be drawn faded.","pos":[34108,34162],"source":" `TRUE` if you want inactive images to be drawn faded."},{"pos":[34172,34184],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34188,34294],"content":"<ph id=\"ph1\">`TRUE`</ph> if the resources required to draw the toolbar image were allocated successfully, otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the resources required to draw the toolbar image were allocated successfully, otherwise `FALSE`."},{"pos":[34304,34311],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"After you call this method, you can call <bpt id=\"p1\">[</bpt>CMFCToolBarImages::Draw<ept id=\"p1\">](#cmfctoolbarimages__draw)</ept> any number of times.","pos":[34315,34428],"source":"After you call this method, you can call [CMFCToolBarImages::Draw](#cmfctoolbarimages__draw) any number of times."},{"content":"After you finished drawing, you must call <bpt id=\"p1\">[</bpt>CMFCToolBarImages::EndDrawImage<ept id=\"p1\">](#cmfctoolbarimages__enddrawimage)</ept> to release the resources allocated by <ph id=\"ph1\">`PrepareDrawImage`</ph>.","pos":[34429,34596],"source":" After you finished drawing, you must call [CMFCToolBarImages::EndDrawImage](#cmfctoolbarimages__enddrawimage) to release the resources allocated by `PrepareDrawImage`."},{"pos":[34606,34669],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__save\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::Save","linkify":"<a name=\"cmfctoolbarimages__save\"></a>  CMFCToolBarImages::Save","source":"<a name=\"cmfctoolbarimages__save\"></a>  CMFCToolBarImages::Save"},{"content":"Stores the toolbar images in a file if this set of toolbar images contains user-defined images.","pos":[34673,34768]},{"pos":[34834,34844],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A path to a disk file.","pos":[34869,34891]},{"pos":[34901,34913],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34917,34989],"content":"<ph id=\"ph1\">`TRUE`</ph> if the toolbar images were saved successfully; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the toolbar images were saved successfully; otherwise `FALSE`."},{"pos":[34999,35006],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to store the user-defined images into a disk file.","pos":[35010,35077]},{"content":"If <ph id=\"ph1\">`lpszBmpFileName`</ph> is <ph id=\"ph2\">`NULL`</ph>, the method stores the bitmap into the file from which the bitmap was loaded by the <bpt id=\"p1\">[</bpt>CMFCToolBarImages::Load<ept id=\"p1\">](#cmfctoolbarimages__load)</ept> method.","pos":[35078,35252],"source":" If `lpszBmpFileName` is `NULL`, the method stores the bitmap into the file from which the bitmap was loaded by the [CMFCToolBarImages::Load](#cmfctoolbarimages__load) method."},{"pos":[35262,35345],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__setalwayslight\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::SetAlwaysLight","linkify":"<a name=\"cmfctoolbarimages__setalwayslight\"></a>  CMFCToolBarImages::SetAlwaysLight","source":"<a name=\"cmfctoolbarimages__setalwayslight\"></a>  CMFCToolBarImages::SetAlwaysLight"},{"pos":[35520,35530],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[35534,35553],"content":"[in] <ph id=\"ph1\">`bAlwaysLight`</ph>","source":"[in] `bAlwaysLight`"},{"pos":[35563,35570],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[35580,35677],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__setdisabledimagealpha\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::SetDisabledImageAlpha","linkify":"<a name=\"cmfctoolbarimages__setdisabledimagealpha\"></a>  CMFCToolBarImages::SetDisabledImageAlpha","source":"<a name=\"cmfctoolbarimages__setdisabledimagealpha\"></a>  CMFCToolBarImages::SetDisabledImageAlpha"},{"content":"Sets the alpha channel (opacity) value that is used for disabled images.","pos":[35681,35753]},{"pos":[35826,35836],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nValue`</ph>","pos":[35840,35853],"source":"[in] `nValue`"},{"content":"The new value of the alpha channel.","pos":[35857,35892]},{"pos":[35902,35909],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use this method to set a custom alpha value for disabled images.","pos":[35913,35977]},{"content":"The default value is 127, which causes disabled button images to be semitransparent.","pos":[35978,36062]},{"content":"If you set a value of 0, disabled images will be completely transparent.","pos":[36063,36135]},{"content":"If you set a value of 255, disabled images will be completely opaque.","pos":[36136,36205]},{"pos":[36215,36306],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__setfadedimagealpha\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::SetFadedImageAlpha","linkify":"<a name=\"cmfctoolbarimages__setfadedimagealpha\"></a>  CMFCToolBarImages::SetFadedImageAlpha","source":"<a name=\"cmfctoolbarimages__setfadedimagealpha\"></a>  CMFCToolBarImages::SetFadedImageAlpha"},{"pos":[36489,36499],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[36503,36516],"content":"[in] <ph id=\"ph1\">`nValue`</ph>","source":"[in] `nValue`"},{"pos":[36526,36533],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[36543,36622],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__setimagesize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::SetImageSize","linkify":"<a name=\"cmfctoolbarimages__setimagesize\"></a>  CMFCToolBarImages::SetImageSize","source":"<a name=\"cmfctoolbarimages__setimagesize\"></a>  CMFCToolBarImages::SetImageSize"},{"content":"Sets the size of each toolbar image (source size).","pos":[36626,36676]},{"pos":[36772,36782],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`sizeImage`</ph>","pos":[36786,36802],"source":"[in] `sizeImage`"},{"content":"The new size of toolbar images.","pos":[36806,36837]},{"pos":[36847,36854],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default the size of the toolbar image is 16x15 pixels.","pos":[36858,36915]},{"content":"Call this method if you want to use toolbar images of a different size.","pos":[36916,36987]},{"pos":[36997,37088],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__setlightpercentage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::SetLightPercentage","linkify":"<a name=\"cmfctoolbarimages__setlightpercentage\"></a>  CMFCToolBarImages::SetLightPercentage","source":"<a name=\"cmfctoolbarimages__setlightpercentage\"></a>  CMFCToolBarImages::SetLightPercentage"},{"pos":[37253,37263],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[37267,37280],"content":"[in] <ph id=\"ph1\">`nValue`</ph>","source":"[in] `nValue`"},{"pos":[37290,37297],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[37307,37394],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__setmapto3dcolors\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::SetMapTo3DColors","linkify":"<a name=\"cmfctoolbarimages__setmapto3dcolors\"></a>  CMFCToolBarImages::SetMapTo3DColors","source":"<a name=\"cmfctoolbarimages__setmapto3dcolors\"></a>  CMFCToolBarImages::SetMapTo3DColors"},{"pos":[37566,37576],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[37580,37601],"content":"[in] <ph id=\"ph1\">`bMapTo3DColors`</ph>","source":"[in] `bMapTo3DColors`"},{"pos":[37611,37618],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[37628,37729],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__setpremultiplyautocheck\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::SetPreMultiplyAutoCheck","linkify":"<a name=\"cmfctoolbarimages__setpremultiplyautocheck\"></a>  CMFCToolBarImages::SetPreMultiplyAutoCheck","source":"<a name=\"cmfctoolbarimages__setpremultiplyautocheck\"></a>  CMFCToolBarImages::SetPreMultiplyAutoCheck"},{"pos":[37906,37916],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[37920,37932],"content":"[in] <ph id=\"ph1\">`bAuto`</ph>","source":"[in] `bAuto`"},{"pos":[37942,37949],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[37959,38042],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__setsingleimage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::SetSingleImage","linkify":"<a name=\"cmfctoolbarimages__setsingleimage\"></a>  CMFCToolBarImages::SetSingleImage","source":"<a name=\"cmfctoolbarimages__setsingleimage\"></a>  CMFCToolBarImages::SetSingleImage"},{"pos":[38193,38200],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[38210,38303],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__settransparentcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::SetTransparentColor","linkify":"<a name=\"cmfctoolbarimages__settransparentcolor\"></a>  CMFCToolBarImages::SetTransparentColor","source":"<a name=\"cmfctoolbarimages__settransparentcolor\"></a>  CMFCToolBarImages::SetTransparentColor"},{"content":"Sets the transparent color of the toolbar images.","pos":[38307,38356]},{"pos":[38436,38446],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`clrTransparent`</ph>","pos":[38450,38471],"source":"[in] `clrTransparent`"},{"content":"An RGB value.","pos":[38475,38488]},{"pos":[38498,38510],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The previous transparent color.","pos":[38514,38545]},{"pos":[38555,38562],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[38566,38738],"content":"When you or the framework call <bpt id=\"p1\">[</bpt>CMFCToolBarImages::Draw<ept id=\"p1\">](#cmfctoolbarimages__draw)</ept>, the method does not draw any pixel that matches the color specified by <ph id=\"ph1\">`clrTransparent`</ph>.","source":"When you or the framework call [CMFCToolBarImages::Draw](#cmfctoolbarimages__draw), the method does not draw any pixel that matches the color specified by `clrTransparent`."},{"pos":[38748,38825],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__updateimage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::UpdateImage","linkify":"<a name=\"cmfctoolbarimages__updateimage\"></a>  CMFCToolBarImages::UpdateImage","source":"<a name=\"cmfctoolbarimages__updateimage\"></a>  CMFCToolBarImages::UpdateImage"},{"content":"Updates a user-defined toolbar image from a bitmap.","pos":[38829,38880]},{"pos":[38960,38970],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iImage`</ph>","pos":[38974,38987],"source":"[in] `iImage`"},{"content":"The zero-based index of the image to update.","pos":[38991,39035]},{"content":"[in] <ph id=\"ph1\">`hbmp`</ph>","pos":[39042,39053],"source":"[in] `hbmp`"},{"content":"A handle to the bitmap from which to update the image.","pos":[39057,39111]},{"pos":[39121,39133],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39137,39242],"content":"<ph id=\"ph1\">`TRUE`</ph> if the image was updated successfully; <ph id=\"ph2\">`FALSE`</ph> if the image list is not user-defined or temporary.","source":"`TRUE` if the image was updated successfully; `FALSE` if the image list is not user-defined or temporary."},{"pos":[39252,39337],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__convertto32bits\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::ConvertTo32Bits","linkify":"<a name=\"cmfctoolbarimages__convertto32bits\"></a>  CMFCToolBarImages::ConvertTo32Bits","source":"<a name=\"cmfctoolbarimages__convertto32bits\"></a>  CMFCToolBarImages::ConvertTo32Bits"},{"content":"Converts underlined bitmaps to 32 bpp images.","pos":[39341,39386]},{"pos":[39473,39483],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies transparent color of underlined bitmaps.","pos":[39507,39557]},{"pos":[39567,39574],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[39584,39669],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__getbitsperpixel\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::GetBitsPerPixel","linkify":"<a name=\"cmfctoolbarimages__getbitsperpixel\"></a>  CMFCToolBarImages::GetBitsPerPixel","source":"<a name=\"cmfctoolbarimages__getbitsperpixel\"></a>  CMFCToolBarImages::GetBitsPerPixel"},{"content":"Returns current resolution of underlined images.","pos":[39673,39721]},{"pos":[39778,39790],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value representing the current resolution of underlined images, in bits per pixel (bpp).","pos":[39794,39893]},{"pos":[39903,39910],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[39920,39991],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__getscale\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::GetScale","linkify":"<a name=\"cmfctoolbarimages__getscale\"></a>  CMFCToolBarImages::GetScale","source":"<a name=\"cmfctoolbarimages__getscale\"></a>  CMFCToolBarImages::GetScale"},{"content":"Returns the current scale ratio of underlined images.","pos":[39995,40048]},{"pos":[40101,40113],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A value representing the current scale ratio.","pos":[40117,40162]},{"pos":[40172,40179],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[40189,40260],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__isscaled\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::IsScaled","linkify":"<a name=\"cmfctoolbarimages__isscaled\"></a>  CMFCToolBarImages::IsScaled","source":"<a name=\"cmfctoolbarimages__isscaled\"></a>  CMFCToolBarImages::IsScaled"},{"content":"Tells whether the underlined images are scaled or not.","pos":[40264,40318]},{"pos":[40370,40382],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[40386,40444],"content":"<ph id=\"ph1\">`TRUE`</ph> if underlined images are scaled; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if underlined images are scaled; otherwise `FALSE`."},{"pos":[40454,40461],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[40471,40550],"content":"<bpt id=\"p1\">&lt;a name=\"cmfctoolbarimages__smoothresize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCToolBarImages::SmoothResize","linkify":"<a name=\"cmfctoolbarimages__smoothresize\"></a>  CMFCToolBarImages::SmoothResize","source":"<a name=\"cmfctoolbarimages__smoothresize\"></a>  CMFCToolBarImages::SmoothResize"},{"content":"Smoothly resizes underlined images.","pos":[40554,40589]},{"pos":[40655,40665],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Scale ratio.","pos":[40688,40700]},{"pos":[40710,40722],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[40726,40771],"content":"<ph id=\"ph1\">`TRUE`</ph> if resize succeeds; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if resize succeeds; otherwise `FALSE`."},{"pos":[40781,40788],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[40797,40805],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[40809,40857],"source":"[Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Classes<ept id=\"p1\">](../../mfc/reference/mfc-classes.md)</ept><ph id=\"ph1\"> </ph>","pos":[40860,40907],"source":" [Classes](../../mfc/reference/mfc-classes.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CObject Class<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[40910,40965],"source":" [CObject Class](../../mfc/reference/cobject-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CMFCToolBar Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[40968,41031],"source":" [CMFCToolBar Class](../../mfc/reference/cmfctoolbar-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CMFCToolBarButton Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept>","pos":[41034,41108],"source":" [CMFCToolBarButton Class](../../mfc/reference/cmfctoolbarbutton-class.md)"}],"content":"---\ntitle: \"CMFCToolBarImages Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMFCToolBarImages\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CMFCToolBarImages class\"\nms.assetid: d4e50518-9ffc-406f-9996-f79e5cd38155\ncaps.latest.revision: 31\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMFCToolBarImages Class\nThe images on a toolbar. The `CMFCToolBarImages` class manages toolbar images loaded from application resources or from files.  \n  \n## Syntax  \n  \n```  \nclass CMFCToolBarImages : public CObject  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCToolBarImages::CMFCToolBarImages](#cmfctoolbarimages__cmfctoolbarimages)|Constructs a `CMFCToolBarImages` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCToolBarImages::AdaptColors](#cmfctoolbarimages__adaptcolors)||  \n|[CMFCToolBarImages::AddIcon](#cmfctoolbarimages__addicon)|Adds an icon to the toolbar images.|  \n|[CMFCToolBarImages::AddImage](#cmfctoolbarimages__addimage)|Adds a bitmap to the toolbar images.|  \n|[CMFCToolBarImages::CleanUp](#cmfctoolbarimages__cleanup)||  \n|[CMFCToolBarImages::Clear](#cmfctoolbarimages__clear)|Frees the system resources that were allocated to this object.|  \n|[CMFCToolBarImages::ConvertTo32Bits](#cmfctoolbarimages__convertto32bits)|Converts underlined bitmaps to 32 bpp images.|  \n|[CMFCToolBarImages::CopyImageToClipboard](#cmfctoolbarimages__copyimagetoclipboard)||  \n|[CMFCToolBarImages::CopyTo](#cmfctoolbarimages__copyto)||  \n|[CMFCToolBarImages::CreateFromImageList](#cmfctoolbarimages__createfromimagelist)|Initializes the toolbar images from an image list ( [CImageList Class](../../mfc/reference/cimagelist-class.md)).|  \n|[CMFCToolBarImages::CreateRegionFromImage](#cmfctoolbarimages__createregionfromimage)||  \n|[CMFCToolBarImages::DeleteImage](#cmfctoolbarimages__deleteimage)|Deletes the image that has a specified index from the toolbar images if this set of toolbar images contains user-defined images.|  \n|[CMFCToolBarImages::Draw](#cmfctoolbarimages__draw)|Draws a single toolbar image (button).|  \n|[CMFCToolBarImages::DrawEx](#cmfctoolbarimages__drawex)||  \n|[CMFCToolBarImages::EnableRTL](#cmfctoolbarimages__enablertl)||  \n|[CMFCToolBarImages::EndDrawImage](#cmfctoolbarimages__enddrawimage)|Frees system resources after a toolbar image is drawn.|  \n|[CMFCToolBarImages::ExtractIcon](#cmfctoolbarimages__extracticon)|Returns the icon that has a specified image index from the toolbar images.|  \n|[CMFCToolBarImages::FillDitheredRect](#cmfctoolbarimages__fillditheredrect)|Fills a rectangle by using a brush that has the toolbar background colors.|  \n|[CMFCToolBarImages::GetAlwaysLight](#cmfctoolbarimages__getalwayslight)||  \n|[CMFCToolBarImages::GetBitsPerPixel](#cmfctoolbarimages__getbitsperpixel)|Returns current resolution of underlined images.|  \n|[CMFCToolBarImages::GetCount](#cmfctoolbarimages__getcount)|Returns the number of images on the toolbar.|  \n|[CMFCToolBarImages::GetDisabledImageAlpha](#cmfctoolbarimages__getdisabledimagealpha)|Returns the alpha channel value that is used for disabled images.|  \n|[CMFCToolBarImages::GetFadedImageAlpha](#cmfctoolbarimages__getfadedimagealpha)||  \n|[CMFCToolBarImages::GetImageSize](#cmfctoolbarimages__getimagesize)|Retrieves either the size of the toolbar images that are stored in memory (source size), or the size of the toolbar images that are drawn on the screen (destination size).|  \n|[CMFCToolBarImages::GetImageWell](#cmfctoolbarimages__getimagewell)|Returns the handle to the bitmap that contains all the toolbar images.|  \n|[CMFCToolBarImages::GetImageWellLight](#cmfctoolbarimages__getimagewelllight)||  \n|[CMFCToolBarImages::GetLastImageRect](#cmfctoolbarimages__getlastimagerect)||  \n|[CMFCToolBarImages::GetLightPercentage](#cmfctoolbarimages__getlightpercentage)||  \n|[CMFCToolBarImages::GetMapTo3DColors](#cmfctoolbarimages__getmapto3dcolors)||  \n|[CMFCToolBarImages::GetMask](#cmfctoolbarimages__getmask)||  \n|[CMFCToolBarImages::GetResourceOffset](#cmfctoolbarimages__getresourceoffset)|Returns the image index for a specified resource ID.|  \n|[CMFCToolBarImages::GetScale](#cmfctoolbarimages__getscale)|Returns current scale ratio of underlined images.|  \n|[CMFCToolBarImages::GetTransparentColor](#cmfctoolbarimages__gettransparentcolor)||  \n|[CMFCToolBarImages::GrayImages](#cmfctoolbarimages__grayimages)|Grays the toolbar images to make them look disabled.|  \n|[CMFCToolBarImages::Is32BitTransparencySupported](#cmfctoolbarimages__is32bittransparencysupported)|Determines whether the operating system supports 32-bit alpha blending.|  \n|[CMFCToolBarImages::IsPreMultiplyAutoCheck](#cmfctoolbarimages__ispremultiplyautocheck)||  \n|[CMFCToolBarImages::IsRTL](#cmfctoolbarimages__isrtl)|Determines whether right-to-left (RTL) support is enabled.|  \n|[CMFCToolBarImages::IsReadOnly](#cmfctoolbarimages__isreadonly)|Determines whether the toolbar images are read-only.|  \n|[CMFCToolBarImages::IsScaled](#cmfctoolbarimages__isscaled)|Tells whether the underlined images are scaled or not.|  \n|[CMFCToolBarImages::IsUserImagesList](#cmfctoolbarimages__isuserimageslist)|Determines whether this set of toolbar images contains user-defined images.|  \n|[CMFCToolBarImages::IsValid](#cmfctoolbarimages__isvalid)|Determines whether this set of toolbar images contains a valid toolbar image.|  \n|[CMFCToolBarImages::Load](#cmfctoolbarimages__load)|Loads toolbar images from system resources or from a file.|  \n|[CMFCToolBarImages::LoadStr](#cmfctoolbarimages__loadstr)||  \n|[CMFCToolBarImages::MapFromSysColor](#cmfctoolbarimages__mapfromsyscolor)||  \n|[CMFCToolBarImages::MapTo3dColors](#cmfctoolbarimages__mapto3dcolors)||  \n|[CMFCToolBarImages::MapToSysColor](#cmfctoolbarimages__maptosyscolor)||  \n|[CMFCToolBarImages::MapToSysColorAlpha](#cmfctoolbarimages__maptosyscoloralpha)||  \n|[CMFCToolBarImages::Mirror](#cmfctoolbarimages__mirror)|Horizontally mirrors all of the toolbar images.|  \n|[CMFCToolBarImages::MirrorBitmap](#cmfctoolbarimages__mirrorbitmap)|Horizontally mirrors a bitmap.|  \n|[CMFCToolBarImages::MirrorBitmapVert](#cmfctoolbarimages__mirrorbitmapvert)||  \n|[CMFCToolBarImages::MirrorVert](#cmfctoolbarimages__mirrorvert)||  \n|[CMFCToolBarImages::OnSysColorChange](#cmfctoolbarimages__onsyscolorchange)||  \n|[CMFCToolBarImages::PrepareDrawImage](#cmfctoolbarimages__preparedrawimage)|Allocates the resources that are required to draw a toolbar image at a specified size.|  \n|[CMFCToolBarImages::Save](#cmfctoolbarimages__save)|Stores the toolbar images in a file if this set of toolbar images contains user-defined images.|  \n|[CMFCToolBarImages::SetAlwaysLight](#cmfctoolbarimages__setalwayslight)||  \n|[CMFCToolBarImages::SetDisabledImageAlpha](#cmfctoolbarimages__setdisabledimagealpha)|Sets the alpha channel value that is used for disabled images.|  \n|[CMFCToolBarImages::SetFadedImageAlpha](#cmfctoolbarimages__setfadedimagealpha)||  \n|[CMFCToolBarImages::SetImageSize](#cmfctoolbarimages__setimagesize)|Sets the size of a toolbar image (source size).|  \n|[CMFCToolBarImages::SetLightPercentage](#cmfctoolbarimages__setlightpercentage)||  \n|[CMFCToolBarImages::SetMapTo3DColors](#cmfctoolbarimages__setmapto3dcolors)||  \n|[CMFCToolBarImages::SetPreMultiplyAutoCheck](#cmfctoolbarimages__setpremultiplyautocheck)||  \n|[CMFCToolBarImages::SetSingleImage](#cmfctoolbarimages__setsingleimage)||  \n|[CMFCToolBarImages::SetTransparentColor](#cmfctoolbarimages__settransparentcolor)|Sets the transparent color of the toolbar images.|  \n|[CMFCToolBarImages::SmoothResize](#cmfctoolbarimages__smoothresize)|Smoothly resizes underlined images.|  \n|[CMFCToolBarImages::UpdateImage](#cmfctoolbarimages__updateimage)|Updates a user-defined toolbar image from a bitmap.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCToolBarImages::PreMultiplyAlpha](#cmfctoolbarimages__premultiplyalpha)||  \n  \n### Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCToolBarImages::m_bDisableTrueColorAlpha](#cmfctoolbarimages__m_bdisabletruecoloralpha)|`TRUE` if truecolor alpha blending (32-bit color) is disabled.|  \n  \n## Remarks  \n The full bitmap of toolbar images managed by `CMFCToolbarImages` consists of one or more small toolbar images (buttons) of a fixed size.  \n  \n## Example  \n The following example demonstrates how to configure a `CMFCToolBarImages` object by using various methods in the `CMFCToolBarImages` class. The example shows how to set the size of the toolbar image, load an image, and set the transparent color of the image. This code snippet is part of the [Visual Studio Demo sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_VisualStudioDemo#32](../../mfc/codesnippet/cpp/cmfctoolbarimages-class_1.h)]  \n[!code-cpp[NVC_MFC_VisualStudioDemo#33](../../mfc/codesnippet/cpp/cmfctoolbarimages-class_2.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CMFCToolBarImages](../../mfc/reference/cmfctoolbarimages-class.md)  \n  \n## Requirements  \n **Header:** afxtoolbarimages.h  \n  \n##  <a name=\"cmfctoolbarimages__adaptcolors\"></a>  CMFCToolBarImages::AdaptColors  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid AdaptColors(\n    COLORREF clrBase,  \n    COLORREF clrTone);\n```  \n  \n### Parameters  \n [in] `clrBase`  \n [in] `clrTone`  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__addicon\"></a>  CMFCToolBarImages::AddIcon  \n Adds an icon to the list of toolbar images.  \n  \n```  \nint AddIcon(\n    HICON hIcon,  \n    BOOL bAlphaBlend=FALSE);\n```  \n  \n### Parameters  \n [in] `hIcon`  \n A handle to the icon to be added.  \n  \n [in] `bAlphaBlend`  \n `TRUE` if this icon is used with alpha blending; otherwise `FALSE`.  \n  \n### Return Value  \n The zero-based index of the toolbar image that was added if the method is successful; otherwise -1.  \n  \n##  <a name=\"cmfctoolbarimages__addimage\"></a>  CMFCToolBarImages::AddImage  \n Adds a bitmap to the toolbar images.  \n  \n```  \nint AddImage(\n    HBITMAP hbmp,  \n    BOOL bSetBitPerPixel=FALSE);\n\nint AddImage(\n    const CMFCToolBarImages& imageList,  \n    int nIndex);\n```  \n  \n### Parameters  \n [in] `hbmp`  \n The handle to the bitmap to add.  \n  \n [in] `bSetBitPerPixel`  \n `TRUE` if the [CMFCToolBarImages](../../mfc/reference/cmfctoolbarimages-class.md) object uses the color depth (bits per pixel) of the new image; `FALSE` if the `CMFCToolbarImages` object keeps the current color depth.  \n  \n [in] `imageList`  \n A reference to a `CMFCToolbarImages` object that contains the image to add.  \n  \n [in] `nIndex`  \n The index in the source `CMFCToolbarImages` object of the image to add.  \n  \n### Return Value  \n The number of toolbar images that the [CMFCToolBarImages](../../mfc/reference/cmfctoolbarimages-class.md) object maintains after the new bitmap was added successfully; -1 if the operation failed.  \n  \n##  <a name=\"cmfctoolbarimages__cleanup\"></a>  CMFCToolBarImages::CleanUp  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nstatic void __stdcall CleanUp();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__clear\"></a>  CMFCToolBarImages::Clear  \n Frees the system resources that the [CMFCToolbarImages](../../mfc/reference/cmfctoolbarimages-class.md) object allocated.  \n  \n```  \nvoid Clear();\n```  \n  \n##  <a name=\"cmfctoolbarimages__cmfctoolbarimages\"></a>  CMFCToolBarImages::CMFCToolBarImages  \n Constructs a `CMFCToolBarImages` object.  \n  \n```  \nCMFCToolBarImages();\n```  \n  \n### Remarks  \n Constructs a `CMFCToolBarImages` object, initializes its rendering engine and sets the image size to its default value 16x15 pixels. Use [CMFCToolBarImages::SetImageSize](#cmfctoolbarimages__setimagesize) to change the image size before you add images.  \n  \n##  <a name=\"cmfctoolbarimages__copyimagetoclipboard\"></a>  CMFCToolBarImages::CopyImageToClipboard  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL CopyImageToClipboard(int iImage);\n```  \n  \n### Parameters  \n [in] `iImage`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__copyto\"></a>  CMFCToolBarImages::CopyTo  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL CopyTo(CMFCToolBarImages& imageList);\n```  \n  \n### Parameters  \n [in] `imageList`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__createfromimagelist\"></a>  CMFCToolBarImages::CreateFromImageList  \n Initializes the toolbar images from a [CImageList Class](../../mfc/reference/cimagelist-class.md) object.  \n  \n```  \nBOOL CreateFromImageList(const CImageList& imageList);\n```  \n  \n### Parameters  \n [in] `imageList`  \n The image list to be used as a source for toolbar images.  \n  \n### Return Value  \n Always returns `TRUE`.  \n  \n### Remarks  \n Use this function to quickly initialize the toolbar images list from an external image list.  \n  \n##  <a name=\"cmfctoolbarimages__createregionfromimage\"></a>  CMFCToolBarImages::CreateRegionFromImage  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nstatic HRGN __stdcall CreateRegionFromImage(\n    HBITMAP bmp,  \n    COLORREF clrTransparent);\n```  \n  \n### Parameters  \n [in] `bmp`  \n [in] `clrTransparent`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__deleteimage\"></a>  CMFCToolBarImages::DeleteImage  \n Deletes the user-defined image that has a specified index from the toolbar images.  \n  \n```  \nBOOL DeleteImage(int iImage);\n```  \n  \n### Parameters  \n [in] `iImage`  \n Specifies the zero-based index of the image to delete.  \n  \n### Return Value  \n `TRUE` if the image was deleted successfully; `FALSE` if the image index is invalid, the `CMFCToolbarImages` object is temporary, the `CMFCToolbarImages` object does not contain user-defined images, or if some other error occurred.  \n  \n##  <a name=\"cmfctoolbarimages__draw\"></a>  CMFCToolBarImages::Draw  \n Draws a single toolbar image.  \n  \n```  \nBOOL Draw(\n    CDC* pDC,  \n    int x,  \n    int y,  \n    int iImageIndex,  \n    BOOL bHilite=FALSE,  \n    BOOL bDisabled=FALSE,  \n    BOOL bIndeterminate=FALSE,  \n    BOOL bShadow=FALSE,  \n    BOOL bInactive=FALSE,  \n    BYTE alphaSrc=255);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `x`  \n The X coordinate of the left side of the rectangle where the image is to be drawn.  \n  \n [in] `y`  \n The Y coordinate of the top of the rectangle where the image is to be drawn.  \n  \n [in] `iImageIndex`  \n The zero-based index of the image to be displayed.  \n  \n [in] `bHilite`  \n `TRUE` if the image is to be highlighted; otherwise `FALSE`.  \n  \n [in] `bDisabled`  \n `TRUE` if the image is to be drawn in the disabled style; otherwise `FALSE`.  \n  \n [in] `bIndeterminate`  \n `TRUE` if the image is to be drawn in the indeterminate state style; otherwise `FALSE`.  \n  \n [in] `bShadow`  \n `TRUE` if the image is to be drawn with a drop shadow; otherwise `FALSE`.  \n  \n [in] `bInactive`  \n `TRUE` if the image is to be drawn in the inactive state style; otherwise `FALSE`.  \n  \n [in] `alphaSrc`  \n The alpha channel (opacity) value. A value of 255 means the image is drawn opaque. A value of 0 means the image is drawn transparent. This value is used only for 32 bit color images and for images that displayed a Windows Vista glass style.  \n  \n### Return Value  \n `TRUE` if the specified image was displayed successfully; `FALSE` if the image index was invalid or some other error occurred.  \n  \n##  <a name=\"cmfctoolbarimages__drawex\"></a>  CMFCToolBarImages::DrawEx  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL DrawEx(\n    CDC* pDC,  \n    CRect rect,  \n    int iImageIndex,  \n    ImageAlignHorz horzAlign = ImageAlignHorzLeft,  \n    ImageAlignVert vertAlign = ImageAlignVertTop,  \n    CRect rectSrc = CRect(0,\n    0,\n    0,\n    0),  \n    BYTE alphaSrc = 255);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `rect`  \n [in] `iImageIndex`  \n [in] `horzAlign`  \n [in] `vertAlign`  \n [in] `rectSrc`  \n [in] `0`  \n [in] `0)`  \n [in] `alphaSrc`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__enablertl\"></a>  CMFCToolBarImages::EnableRTL  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nstatic void __stdcall EnableRTL(BOOL bIsRTL = TRUE);\n```  \n  \n### Parameters  \n [in] `bIsRTL`  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__enddrawimage\"></a>  CMFCToolBarImages::EndDrawImage  \n Frees system resources that [CMFCToolBarImages::PrepareDrawImage](#cmfctoolbarimages__preparedrawimage) allocated after you draw a toolbar image by calling [CMFCToolBarImages::Draw](#cmfctoolbarimages__draw).  \n  \n```  \nvoid EndDrawImage(CAfxDrawState& ds);\n```  \n  \n### Parameters  \n [in] `ds`  \n A reference to the `CAfxDrawState` object that was passed to the `PrepareDrawImage` method.  \n  \n##  <a name=\"cmfctoolbarimages__extracticon\"></a>  CMFCToolBarImages::ExtractIcon  \n Returns the icon that has a specified image index from the toolbar images.  \n  \n```  \nHICON ExtractIcon(int nIndex);\n```  \n  \n### Parameters  \n [in] `nIndex`  \n The zero-based index in the image list at which the image to be extracted as an icon is located.  \n  \n### Return Value  \n A handle to the extracted icon, or `NULL` if `nIndex` is out of range.  \n  \n##  <a name=\"cmfctoolbarimages__fillditheredrect\"></a>  CMFCToolBarImages::FillDitheredRect  \n Fills a rectangle with the toolbar background colors.  \n  \n```  \nstatic void FillDitheredRect(\n    CDC* pDC,  \n    const CRect& rect);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n The coordinates of a rectangle to fill.  \n  \n### Remarks  \n Use this method to fill a rectangle with a color that is the average of the system colors COLOR_BTNFACE and COLOR_BTNHIGHLIGHT. If the system is using 256 or fewer colors, the rectangle will be filled with a dithered pattern of those two colors instead.  \n  \n##  <a name=\"cmfctoolbarimages__getalwayslight\"></a>  CMFCToolBarImages::GetAlwaysLight  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL GetAlwaysLight() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__getcount\"></a>  CMFCToolBarImages::GetCount  \n Returns the number of images in the toolbar images list.  \n  \n```  \nint GetCount() const;\n\n \n```  \n  \n### Return Value  \n The number of images in the [CMFCToolbarImages](../../mfc/reference/cmfctoolbarimages-class.md) object.  \n  \n##  <a name=\"cmfctoolbarimages__getdisabledimagealpha\"></a>  CMFCToolBarImages::GetDisabledImageAlpha  \n Returns the alpha channel (opacity) value that is used for disabled images.  \n  \n```  \nstatic BYTE GetDisabledImageAlpha();\n```  \n  \n### Return Value  \n The current alpha channel value.  \n  \n### Remarks  \n You can call [CMFCToolBarImages::SetDisabledImageAlpha](#cmfctoolbarimages__setdisabledimagealpha) to change the alpha channel value.  \n  \n##  <a name=\"cmfctoolbarimages__getfadedimagealpha\"></a>  CMFCToolBarImages::GetFadedImageAlpha  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nstatic BYTE __stdcall GetFadedImageAlpha();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__getimagesize\"></a>  CMFCToolBarImages::GetImageSize  \n Retrieves either the size of the toolbar images that are stored in memory (source size), or the size of the toolbar images that are drawn on the screen (destination size).  \n  \n```  \nSIZE GetImageSize(BOOL bDest=FALSE) const;\n\n \n```  \n  \n### Parameters  \n [in] `bDest`  \n `TRUE` to retrieve the destination size; `FALSE` to retrieve the source image size.  \n  \n### Return Value  \n A `SIZE` structure, which specifies the size of an image in pixels.  \n  \n### Remarks  \n The size of the source image is the size of the images that are stored in the [CMFCToolbarImages](../../mfc/reference/cmfctoolbarimages-class.md) object. You can call [CMFCToolBarImages::SetImageSize](#cmfctoolbarimages__setimagesize) to set the source size. The default value is 16x15 pixels.  \n  \n By default, the destination image size is 0x0. You specify the destination size when you call [CMFCToolBarImages::PrepareDrawImage](#cmfctoolbarimages__preparedrawimage). The [CMFCToolBarImages::EndDrawImage](#cmfctoolbarimages__enddrawimage) method resets the destination size to the default value.  \n  \n##  <a name=\"cmfctoolbarimages__getimagewell\"></a>  CMFCToolBarImages::GetImageWell  \n Returns the handle to the bitmap that contains all the toolbar images.  \n  \n```  \nHBITMAP GetImageWell() const;\n\n \n```  \n  \n### Return Value  \n A handle to a bitmap that contains toolbar images.  \n  \n### Remarks  \n The toolbar images are stored in a row in a single bitmap that is known as an *image well*. To find a toolbar image in the image well, multiply the index of the image by the width of the toolbar images (see [CMFCToolBarImages::GetImageSize](#cmfctoolbarimages__getimagesize)) to obtain the horizontal offset of the image inside the image well.  \n  \n##  <a name=\"cmfctoolbarimages__getimagewelllight\"></a>  CMFCToolBarImages::GetImageWellLight  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nHBITMAP GetImageWellLight() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__getlastimagerect\"></a>  CMFCToolBarImages::GetLastImageRect  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCRect GetLastImageRect() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__getlightpercentage\"></a>  CMFCToolBarImages::GetLightPercentage  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nint GetLightPercentage() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__getmapto3dcolors\"></a>  CMFCToolBarImages::GetMapTo3DColors  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL GetMapTo3DColors() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__getmask\"></a>  CMFCToolBarImages::GetMask  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nHBITMAP GetMask(int iImage);\n```  \n  \n### Parameters  \n [in] `iImage`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__getresourceoffset\"></a>  CMFCToolBarImages::GetResourceOffset  \n Returns the image index for a specified resource ID.  \n  \n```  \nint GetResourceOffset(UINT uiResId) const;\n\n \n```  \n  \n### Parameters  \n [in] `uiResId`  \n An image resource ID.  \n  \n### Return Value  \n An image index if the method was successful; -1 if the image with the specified resource ID does not exist.  \n  \n##  <a name=\"cmfctoolbarimages__gettransparentcolor\"></a>  CMFCToolBarImages::GetTransparentColor  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCOLORREF GetTransparentColor() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__grayimages\"></a>  CMFCToolBarImages::GrayImages  \n Grays the toolbar images to make them look disabled.  \n  \n```  \nBOOL GrayImages(int nGrayImageLuminancePercentage);\n```  \n  \n### Parameters  \n [in] `nGrayImageLuminancePercentage`  \n Luminance percentage.  \n  \n### Return Value  \n `TRUE` if images in the collection were grayed successfully; otherwise `FALSE`.  \n  \n### Remarks  \n This method modifies the toolbar images by averaging the red, green, and blue components of each pixel and multiplying the result by `nGrayImageLuminancePercentage` divided by 100. If `nGrayImageLuminancePercentage` is zero or negative, the default value of 130 is used instead.  \n  \n> [!NOTE]\n>  If you want to undo the change, you must reload the images from the source. You can do this by calling [CMFCToolBarImages::Load](#cmfctoolbarimages__load) or [CMFCToolBarImages::UpdateImage](#cmfctoolbarimages__updateimage) (only for user-defined images), or by calling [CMFCToolBarImages::Clear](#cmfctoolbarimages__clear) and adding the images again by calling [CMFCToolBarImages::AddIcon](#cmfctoolbarimages__addicon) or [CMFCToolBarImages::AddImage](#cmfctoolbarimages__addimage).  \n  \n##  <a name=\"cmfctoolbarimages__is32bittransparencysupported\"></a>  CMFCToolBarImages::Is32BitTransparencySupported  \n Specifies whether the operating system supports 32-bit alpha blending.  \n  \n```  \nstatic BOOL Is32BitTransparencySupported();\n```  \n  \n### Return Value  \n `TRUE` if 32-bit alpha blending is supported; otherwise `FALSE`.  \n  \n### Remarks  \n Use this static method to determine at runtime whether the operating system supports 32-bit alpha blending. This feature is supported on [!INCLUDE[Win2kFamily](../../c-runtime-library/includes/win2kfamily_md.md)] and later versions.  \n  \n##  <a name=\"cmfctoolbarimages__ispremultiplyautocheck\"></a>  CMFCToolBarImages::IsPreMultiplyAutoCheck  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsPreMultiplyAutoCheck() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__isreadonly\"></a>  CMFCToolBarImages::IsReadOnly  \n Specifies whether the toolbar images are read-only.  \n  \n```  \nBOOL IsReadOnly() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the toolbar images are read-only, otherwise `FALSE`.  \n  \n### Remarks  \n The `CMFCToolbarImages` object is read-only when the bitmap with toolbar images was loaded from a read-only file, or when the bitmap was copied in using the `CMFCToolBarImages::CopyTemp` method.  \n  \n##  <a name=\"cmfctoolbarimages__isrtl\"></a>  CMFCToolBarImages::IsRTL  \n Specifies whether right-to-left (RTL) support is enabled.  \n  \n```  \nstatic BOOL IsRTL();\n```  \n  \n### Return Value  \n `TRUE` if RTL support is enabled; otherwise `FALSE`.  \n  \n### Remarks  \n RTL support is used when the application is localized to a language that is read from right to left, such as Arabic, Hebrew, Persian, or Urdu.  \n  \n##  <a name=\"cmfctoolbarimages__isuserimageslist\"></a>  CMFCToolBarImages::IsUserImagesList  \n Specifies whether this set of toolbar images contains user-defined images.  \n  \n```  \nBOOL IsUserImagesList() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the [CMFCToolbarImages](../../mfc/reference/cmfctoolbarimages-class.md) object contains user-defined toolbar images; otherwise `FALSE`.  \n  \n##  <a name=\"cmfctoolbarimages__isvalid\"></a>  CMFCToolBarImages::IsValid  \n Indicates whether this set of toolbar images contains a valid toolbar image.  \n  \n```  \nBOOL IsValid() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if a [CMFCToolbarImages](../../mfc/reference/cmfctoolbarimages-class.md) object is valid; otherwise `FALSE`.  \n  \n### Remarks  \n The `CMFCToolBarImages` object is not valid when its handle to a bitmap with toolbar images is `NULL`.  \n  \n##  <a name=\"cmfctoolbarimages__load\"></a>  CMFCToolBarImages::Load  \n Loads toolbar images from system resources or from a file.  \n  \n```  \nBOOL Load(\n    UINT uiResID,  \n    HINSTANCE hinstRes=NULL,  \n    BOOL bAdd=FALSE);\n\nBOOL Load(\n    LPCTSTR lpszBmpFileName,   \n    DWORD nMaxFileSize = 819200);\n```  \n  \n### Parameters  \n [in] `uiResID`  \n The ID of a bitmap resource.  \n  \n [in] `hinstRes`  \n An instance of the resource DLL.  \n  \n [in] `bAdd`  \n `TRUE` to add the loaded bitmap to the existing bitmap, or `FALSE` to replace the existing bitmap.  \n  \n [in] `lpszBmpFileName`  \n A path to a disk file from which to load the bitmap.  \n  \n [in] `nMaxFileSize`  \n Maximum number of bytes in the bitmap file; or 0 to load the bitmap regardless of file size. If the size of the file exceeds this maximum size, the method returns `FALSE` and does not load the bitmap.  \n  \n### Return Value  \n `TRUE` if the bitmap was loaded successfully; otherwise `FALSE`.  \n  \n### Remarks  \n If the file has the read-only attribute, the image list is marked as read-only.  \n  \n##  <a name=\"cmfctoolbarimages__loadstr\"></a>  CMFCToolBarImages::LoadStr  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL LoadStr(\n    LPCTSTR lpszResourceName,  \n    HINSTANCE hinstRes = NULL,  \n    BOOL bAdd = FALSE);\n```  \n  \n### Parameters  \n [in] `lpszResourceName`  \n [in] `hinstRes`  \n [in] `bAdd`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__mapfromsyscolor\"></a>  CMFCToolBarImages::MapFromSysColor  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nstatic COLORREF __stdcall MapFromSysColor(\n    COLORREF color,  \n    BOOL bUseRGBQUAD = TRUE);\n```  \n  \n### Parameters  \n [in] `color`  \n [in] `bUseRGBQUAD`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__mapto3dcolors\"></a>  CMFCToolBarImages::MapTo3dColors  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL MapTo3dColors(\n    BOOL bUseRGBQUAD = TRUE,  \n    COLORREF clrSrc = (COLORREF)-1,  \n    COLORREF clrDest = (COLORREF)-1);\n```  \n  \n### Parameters  \n [in] `bUseRGBQUAD`  \n [in] `clrSrc`  \n [in] `clrDest`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__maptosyscolor\"></a>  CMFCToolBarImages::MapToSysColor  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nstatic COLORREF __stdcall MapToSysColor(\n    COLORREF color,  \n    BOOL bUseRGBQUAD = TRUE);\n```  \n  \n### Parameters  \n [in] `color`  \n [in] `bUseRGBQUAD`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__maptosyscoloralpha\"></a>  CMFCToolBarImages::MapToSysColorAlpha  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nstatic COLORREF __stdcall MapToSysColorAlpha(COLORREF color);\n```  \n  \n### Parameters  \n [in] `color`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__mirror\"></a>  CMFCToolBarImages::Mirror  \n Replaces the toolbar images with their horizontal mirror image.  \n  \n```  \nBOOL Mirror();\n```  \n  \n### Return Value  \n `TRUE` if the images were successfully mirrored; otherwise `FALSE`.  \n  \n### Remarks  \n This method is used to support right-to-left writing systems.  \n  \n##  <a name=\"cmfctoolbarimages__mirrorbitmap\"></a>  CMFCToolBarImages::MirrorBitmap  \n Replaces a bitmap with its horizontal mirror image.  \n  \n```  \nstatic BOOL MirrorBitmap(\n    HBITMAP& hbmp,  \n    int cxImage);\n```  \n  \n### Parameters  \n [in, out] `hbmp`  \n A handle to bitmap to mirror.  \n  \n [in] `cxImage`  \n Width of the image in pixels.  \n  \n### Return Value  \n `TRUE` if the image was successfully mirrored; otherwise `FALSE`.  \n  \n### Remarks  \n This function is used to support right-to-left writing systems.  \n  \n##  <a name=\"cmfctoolbarimages__mirrorbitmapvert\"></a>  CMFCToolBarImages::MirrorBitmapVert  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nstatic BOOL __stdcall MirrorBitmapVert(\n    HBITMAP& hbmp,  \n    int cyImage);\n```  \n  \n### Parameters  \n [in] `hbmp`  \n [in] `cyImage`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__mirrorvert\"></a>  CMFCToolBarImages::MirrorVert  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL MirrorVert();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__onsyscolorchange\"></a>  CMFCToolBarImages::OnSysColorChange  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid OnSysColorChange();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__premultiplyalpha\"></a>  CMFCToolBarImages::PreMultiplyAlpha  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nstatic BOOL __stdcall PreMultiplyAlpha(\n    HBITMAP hbmp,  \n    BOOL bAutoCheckPremlt);\n\nBOOL PreMultiplyAlpha(\n    HBITMAP hbmp);\n```  \n  \n### Parameters  \n [in] `hbmp`  \n [in] `bAutoCheckPremlt`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__m_bdisabletruecoloralpha\"></a>  CMFCToolBarImages::m_bDisableTrueColorAlpha  \n `TRUE` if truecolor alpha blending (32-bit color) is disabled.  \n  \n```  \nstatic BOOL m_bDisableTrueColorAlpha;  \n```  \n  \n### Remarks  \n Set this member variable to `FALSE` to enable truecolor alpha-blending for toolbar images.  \n  \n The default value is `TRUE` for backward compatibility.  \n  \n##  <a name=\"cmfctoolbarimages__preparedrawimage\"></a>  CMFCToolBarImages::PrepareDrawImage  \n Allocates the resources that are required to draw a toolbar image at a specified size.  \n  \n```  \nBOOL PrepareDrawImage(\n    CAfxDrawState& ds,  \n    CSize sizeImageDest=CSize(0,\n    0)  \n    BOOL bFadeInactive=FALSE);\n```  \n  \n### Parameters  \n [in] `ds`  \n A reference to `CAfxDrawState` structure, which stores the allocated resources between image rendering stages.  \n  \n [in] `sizeImageDest`  \n Specifies the size of a destination image.  \n  \n [in] `bFadeInactive`  \n `TRUE` if you want inactive images to be drawn faded.  \n  \n### Return Value  \n `TRUE` if the resources required to draw the toolbar image were allocated successfully, otherwise `FALSE`.  \n  \n### Remarks  \n After you call this method, you can call [CMFCToolBarImages::Draw](#cmfctoolbarimages__draw) any number of times. After you finished drawing, you must call [CMFCToolBarImages::EndDrawImage](#cmfctoolbarimages__enddrawimage) to release the resources allocated by `PrepareDrawImage`.  \n  \n##  <a name=\"cmfctoolbarimages__save\"></a>  CMFCToolBarImages::Save  \n Stores the toolbar images in a file if this set of toolbar images contains user-defined images.  \n  \n```  \nBOOL Save(LPCTSTR lpszBmpFileName=NULL);\n```  \n  \n### Parameters  \n `lpszBmpFileName`  \n A path to a disk file.  \n  \n### Return Value  \n `TRUE` if the toolbar images were saved successfully; otherwise `FALSE`.  \n  \n### Remarks  \n Call this method to store the user-defined images into a disk file. If `lpszBmpFileName` is `NULL`, the method stores the bitmap into the file from which the bitmap was loaded by the [CMFCToolBarImages::Load](#cmfctoolbarimages__load) method.  \n  \n##  <a name=\"cmfctoolbarimages__setalwayslight\"></a>  CMFCToolBarImages::SetAlwaysLight  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetAlwaysLight(BOOL bAlwaysLight = TRUE);\n```  \n  \n### Parameters  \n [in] `bAlwaysLight`  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__setdisabledimagealpha\"></a>  CMFCToolBarImages::SetDisabledImageAlpha  \n Sets the alpha channel (opacity) value that is used for disabled images.  \n  \n```  \nstatic void SetDisabledImageAlpha(BYTE nValue);\n```  \n  \n### Parameters  \n [in] `nValue`  \n The new value of the alpha channel.  \n  \n### Remarks  \n Use this method to set a custom alpha value for disabled images. The default value is 127, which causes disabled button images to be semitransparent. If you set a value of 0, disabled images will be completely transparent. If you set a value of 255, disabled images will be completely opaque.  \n  \n##  <a name=\"cmfctoolbarimages__setfadedimagealpha\"></a>  CMFCToolBarImages::SetFadedImageAlpha  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nstatic void __stdcall SetFadedImageAlpha(BYTE nValue);\n```  \n  \n### Parameters  \n [in] `nValue`  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__setimagesize\"></a>  CMFCToolBarImages::SetImageSize  \n Sets the size of each toolbar image (source size).  \n  \n```  \nvoid SetImageSize(\n    SIZE sizeImage,  \n    BOOL bUpdateCount=FALSE);\n```  \n  \n### Parameters  \n [in] `sizeImage`  \n The new size of toolbar images.  \n  \n### Remarks  \n By default the size of the toolbar image is 16x15 pixels. Call this method if you want to use toolbar images of a different size.  \n  \n##  <a name=\"cmfctoolbarimages__setlightpercentage\"></a>  CMFCToolBarImages::SetLightPercentage  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetLightPercentage(int nValue);\n```  \n  \n### Parameters  \n [in] `nValue`  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__setmapto3dcolors\"></a>  CMFCToolBarImages::SetMapTo3DColors  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetMapTo3DColors(BOOL bMapTo3DColors);\n```  \n  \n### Parameters  \n [in] `bMapTo3DColors`  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__setpremultiplyautocheck\"></a>  CMFCToolBarImages::SetPreMultiplyAutoCheck  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetPreMultiplyAutoCheck(BOOL bAuto = TRUE);\n```  \n  \n### Parameters  \n [in] `bAuto`  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__setsingleimage\"></a>  CMFCToolBarImages::SetSingleImage  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetSingleImage();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__settransparentcolor\"></a>  CMFCToolBarImages::SetTransparentColor  \n Sets the transparent color of the toolbar images.  \n  \n```  \nCOLORREF SetTransparentColor(COLORREF clrTransparent);\n```  \n  \n### Parameters  \n [in] `clrTransparent`  \n An RGB value.  \n  \n### Return Value  \n The previous transparent color.  \n  \n### Remarks  \n When you or the framework call [CMFCToolBarImages::Draw](#cmfctoolbarimages__draw), the method does not draw any pixel that matches the color specified by `clrTransparent`.  \n  \n##  <a name=\"cmfctoolbarimages__updateimage\"></a>  CMFCToolBarImages::UpdateImage  \n Updates a user-defined toolbar image from a bitmap.  \n  \n```  \nBOOL UpdateImage(\n    int iImage,  \n    HBITMAP hbmp);\n```  \n  \n### Parameters  \n [in] `iImage`  \n The zero-based index of the image to update.  \n  \n [in] `hbmp`  \n A handle to the bitmap from which to update the image.  \n  \n### Return Value  \n `TRUE` if the image was updated successfully; `FALSE` if the image list is not user-defined or temporary.  \n  \n##  <a name=\"cmfctoolbarimages__convertto32bits\"></a>  CMFCToolBarImages::ConvertTo32Bits  \n Converts underlined bitmaps to 32 bpp images.  \n  \n```  \nBOOL ConvertTo32Bits(COLORREF clrTransparent = (COLORREF)-1);\n```  \n  \n### Parameters  \n `clrTransparent`  \n Specifies transparent color of underlined bitmaps.  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__getbitsperpixel\"></a>  CMFCToolBarImages::GetBitsPerPixel  \n Returns current resolution of underlined images.  \n  \n```  \nint GetBitsPerPixel() const;\n\n \n```  \n  \n### Return Value  \n An integer value representing the current resolution of underlined images, in bits per pixel (bpp).  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__getscale\"></a>  CMFCToolBarImages::GetScale  \n Returns the current scale ratio of underlined images.  \n  \n```  \ndouble GetScale() const;\n\n \n```  \n  \n### Return Value  \n A value representing the current scale ratio.  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__isscaled\"></a>  CMFCToolBarImages::IsScaled  \n Tells whether the underlined images are scaled or not.  \n  \n```  \nBOOL IsScaled () const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if underlined images are scaled; otherwise `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarimages__smoothresize\"></a>  CMFCToolBarImages::SmoothResize  \n Smoothly resizes underlined images.  \n  \n```  \nBOOL SmoothResize(double dblImageScale);\n```  \n  \n### Parameters  \n `dblImageScale`  \n Scale ratio.  \n  \n### Return Value  \n `TRUE` if resize succeeds; otherwise `FALSE`.  \n  \n### Remarks  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CObject Class](../../mfc/reference/cobject-class.md)   \n [CMFCToolBar Class](../../mfc/reference/cmfctoolbar-class.md)   \n [CMFCToolBarButton Class](../../mfc/reference/cmfctoolbarbutton-class.md)\n"}