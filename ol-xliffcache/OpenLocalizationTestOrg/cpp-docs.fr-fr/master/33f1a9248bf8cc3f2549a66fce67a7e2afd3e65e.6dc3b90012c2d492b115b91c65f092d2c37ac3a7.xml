{"nodes":[{"pos":[12,70],"content":"Allocating and Deallocating Window Memory | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Allocating and Deallocating Window Memory | Microsoft Docs","pos":[0,58]}]},{"content":"Allocating and Deallocating Window Memory","pos":[803,844]},{"content":"Do not use the C++ <bpt id=\"p1\">**</bpt>delete<ept id=\"p1\">**</ept> operator to destroy a frame window or view.","pos":[845,918],"source":"Do not use the C++ **delete** operator to destroy a frame window or view."},{"content":"Instead, call the <ph id=\"ph1\">`CWnd`</ph> member function <ph id=\"ph2\">`DestroyWindow`</ph>.","pos":[919,976],"source":" Instead, call the `CWnd` member function `DestroyWindow`."},{"content":"Frame windows, therefore, should be allocated on the heap with operator <bpt id=\"p1\">**</bpt>new<ept id=\"p1\">**</ept>.","pos":[977,1057],"source":" Frame windows, therefore, should be allocated on the heap with operator **new**."},{"content":"Be careful when allocating frame windows on the stack frame or globally.","pos":[1058,1130]},{"content":"Other windows should be allocated on the stack frame whenever possible.","pos":[1131,1202]},{"content":"What do you want to know more about","pos":[1211,1246]},{"content":"Creating windows","pos":[1257,1273]},{"content":"Window destruction sequence","pos":[1313,1340]},{"content":"Detaching a CWnd from its HWND","pos":[1391,1421]},{"content":"See Also","pos":[1473,1481]},{"content":"Destroying Window Objects","pos":[1486,1511]}],"content":"---\ntitle: \"Allocating and Deallocating Window Memory | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"memory allocation, window objects\"\n  - \"memory deallocation\"\n  - \"storage for window objects\"\n  - \"memory deallocation, window memory\"\n  - \"window objects, deallocating memory for\"\n  - \"storage for window objects, allocating\"\nms.assetid: 7c962539-8461-4846-b5ca-fe3b15c313dc\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Allocating and Deallocating Window Memory\nDo not use the C++ **delete** operator to destroy a frame window or view. Instead, call the `CWnd` member function `DestroyWindow`. Frame windows, therefore, should be allocated on the heap with operator **new**. Be careful when allocating frame windows on the stack frame or globally. Other windows should be allocated on the stack frame whenever possible.  \n  \n## What do you want to know more about  \n  \n-   [Creating windows](../mfc/creating-windows.md)  \n  \n-   [Window destruction sequence](../mfc/window-destruction-sequence.md)  \n  \n-   [Detaching a CWnd from its HWND](../mfc/detaching-a-cwnd-from-its-hwnd.md)  \n  \n## See Also  \n [Destroying Window Objects](../mfc/destroying-window-objects.md)\n\n"}