{"nodes":[{"pos":[12,40],"content":".ALLOCSTACK | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":".ALLOCSTACK | Microsoft Docs","pos":[0,28]}]},{"content":".ALLOCSTACK","pos":[602,613]},{"pos":[614,736],"content":"Generates a <bpt id=\"p1\">**</bpt>UWOP_ALLOC_SMALL<ept id=\"p1\">**</ept> or a <bpt id=\"p2\">**</bpt>UWOP_ALLOC_LARGE<ept id=\"p2\">**</ept> with the specified size for the current offset in the prologue.","source":"Generates a **UWOP_ALLOC_SMALL** or a **UWOP_ALLOC_LARGE** with the specified size for the current offset in the prologue."},{"content":"Syntax","pos":[745,751]},{"content":"Remarks","pos":[794,801]},{"content":"MASM will choose the most efficient encoding for a given size.","pos":[805,867]},{"content":".ALLOCSTACK allows ml64.exe users to specify how a frame function unwinds and is only allowed within the prologue, which extends from the <bpt id=\"p1\">[</bpt>PROC<ept id=\"p1\">](../../assembler/masm/proc.md)</ept> FRAME declaration to the <bpt id=\"p2\">[</bpt>.ENDPROLOG<ept id=\"p2\">](../../assembler/masm/dot-endprolog.md)</ept> directive.","pos":[874,1136],"source":".ALLOCSTACK allows ml64.exe users to specify how a frame function unwinds and is only allowed within the prologue, which extends from the [PROC](../../assembler/masm/proc.md) FRAME declaration to the [.ENDPROLOG](../../assembler/masm/dot-endprolog.md) directive."},{"content":"These directives do not generate code; they only generate <ph id=\"ph1\">`.xdata`</ph> and <ph id=\"ph2\">`.pdata`</ph>.","pos":[1137,1217],"source":" These directives do not generate code; they only generate `.xdata` and `.pdata`."},{"content":".ALLOCSTACK should be preceded by instructions that actually implement the actions to be unwound.","pos":[1218,1315]},{"content":"It is a good practice to wrap both the unwind directives and the code they are meant to unwind in a macro to ensure agreement.","pos":[1316,1442]},{"pos":[1449,1492],"content":"The <ph id=\"ph1\">`size`</ph> operand must be a multiple of 8.","source":"The `size` operand must be a multiple of 8."},{"pos":[1499,1599],"content":"Fore more information, see <bpt id=\"p1\">[</bpt>MASM for x64 (ml64.exe)<ept id=\"p1\">](../../assembler/masm/masm-for-x64-ml64-exe.md)</ept>.","source":"Fore more information, see [MASM for x64 (ml64.exe)](../../assembler/masm/masm-for-x64-ml64-exe.md)."},{"content":"Sample","pos":[1608,1614]},{"content":"The following sample shows how to specify an unwind/exception handler:","pos":[1618,1688]},{"content":"See Also","pos":[2104,2112]},{"content":"Directives Reference","pos":[2117,2137]}],"content":"---\ntitle: \".ALLOCSTACK | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \".ALLOCSTACK\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \".ALLOCSTACK directive\"\nms.assetid: 9801594b-7ac2-4df2-a49d-07d9dd9af99e\ncaps.latest.revision: 9\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# .ALLOCSTACK\nGenerates a **UWOP_ALLOC_SMALL** or a **UWOP_ALLOC_LARGE** with the specified size for the current offset in the prologue.  \n  \n## Syntax  \n  \n```  \n.ALLOCSTACK size  \n```  \n  \n## Remarks  \n MASM will choose the most efficient encoding for a given size.  \n  \n .ALLOCSTACK allows ml64.exe users to specify how a frame function unwinds and is only allowed within the prologue, which extends from the [PROC](../../assembler/masm/proc.md) FRAME declaration to the [.ENDPROLOG](../../assembler/masm/dot-endprolog.md) directive. These directives do not generate code; they only generate `.xdata` and `.pdata`. .ALLOCSTACK should be preceded by instructions that actually implement the actions to be unwound. It is a good practice to wrap both the unwind directives and the code they are meant to unwind in a macro to ensure agreement.  \n  \n The `size` operand must be a multiple of 8.  \n  \n Fore more information, see [MASM for x64 (ml64.exe)](../../assembler/masm/masm-for-x64-ml64-exe.md).  \n  \n## Sample  \n The following sample shows how to specify an unwind/exception handler:  \n  \n```  \n; ml64 ex3.asm /link /entry:Example1  /SUBSYSTEM:Console  \ntext SEGMENT  \nPUBLIC Example3  \nPUBLIC Example3_UW  \nExample3_UW PROC NEAR  \n   ; exception/unwind handler body  \n  \n   ret 0  \n  \nExample3_UW ENDP  \n  \nExample3 PROC FRAME : Example3_UW  \n  \n   sub rsp, 16  \n.allocstack 16  \n  \n.endprolog  \n  \n   ; function body  \n    add rsp, 16  \n   ret 0  \n  \nExample3 ENDP  \ntext ENDS  \nEND  \n```  \n  \n## See Also  \n [Directives Reference](../../assembler/masm/directives-reference.md)"}