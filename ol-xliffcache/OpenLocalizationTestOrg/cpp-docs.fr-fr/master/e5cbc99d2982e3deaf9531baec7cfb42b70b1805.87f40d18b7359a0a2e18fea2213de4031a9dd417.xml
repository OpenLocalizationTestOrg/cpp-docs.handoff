{"nodes":[{"pos":[12,37],"content":"__unhook | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"__unhook | Microsoft Docs","pos":[0,25]}]},{"content":"__unhook","pos":[669,677]},{"content":"Dissociates a handler method from an event.","pos":[678,721]},{"content":"Syntax","pos":[730,736]},{"content":"Parameters","pos":[988,998]},{"content":"<bpt id=\"p1\">**</bpt><ph id=\"ph1\">&amp;</ph><ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>SourceClass<ept id=\"p2\">*</ept> <ph id=\"ph2\">`::`</ph> <bpt id=\"p3\">*</bpt>EventMethod<ept id=\"p3\">*</ept>","pos":[1002,1040],"source":"**&** *SourceClass* `::` *EventMethod*"},{"content":"A pointer to the event method from which you unhook the event handler method:","pos":[1044,1121]},{"pos":[1131,1221],"content":"Native C++ events: <bpt id=\"p1\">*</bpt>SourceClass<ept id=\"p1\">*</ept> is the event source class and <bpt id=\"p2\">*</bpt>EventMethod<ept id=\"p2\">*</ept> is the event.","source":"Native C++ events: *SourceClass* is the event source class and *EventMethod* is the event."},{"pos":[1231,1327],"content":"COM events: <bpt id=\"p1\">*</bpt>SourceClass<ept id=\"p1\">*</ept> is the event source interface and <bpt id=\"p2\">*</bpt>EventMethod<ept id=\"p2\">*</ept> is one of its methods.","source":"COM events: *SourceClass* is the event source interface and *EventMethod* is one of its methods."},{"pos":[1337,1424],"content":"Managed events: <bpt id=\"p1\">*</bpt>SourceClass<ept id=\"p1\">*</ept> is the event source class and <bpt id=\"p2\">*</bpt>EventMethod<ept id=\"p2\">*</ept> is the event.","source":"Managed events: *SourceClass* is the event source class and *EventMethod* is the event."},{"pos":[1431,1644],"content":"`interface`  \nThe interface name being unhooked from `receiver`, only for COM event receivers in which the *layout_dependent* parameter of the [event_receiver](../windows/event-receiver.md) attribute is **true**.","leadings":[""," "],"nodes":[{"content":"The interface name being unhooked from <ph id=\"ph1\">`receiver`</ph>, only for COM event receivers in which the <bpt id=\"p1\">*</bpt>layout_dependent<ept id=\"p1\">*</ept> parameter of the <bpt id=\"p2\">[</bpt>event_receiver<ept id=\"p2\">](../windows/event-receiver.md)</ept> attribute is <bpt id=\"p3\">**</bpt>true<ept id=\"p3\">**</ept>.","pos":[14,212],"source":"The interface name being unhooked from `receiver`, only for COM event receivers in which the *layout_dependent* parameter of the [event_receiver](../windows/event-receiver.md) attribute is **true**."}]},{"pos":[1651,1808],"content":"*source*  \nA pointer to an instance of the event source. Depending on the code `type` specified in **event_receiver**, *source* can be one of the following:","leadings":[""," "],"nodes":[{"content":"source","pos":[1,7]},{"content":"A pointer to an instance of the event source. Depending on the code `type` specified in **event_receiver**, *source* can be one of the following:","pos":[11,156],"nodes":[{"content":"A pointer to an instance of the event source.","pos":[0,45]},{"content":"Depending on the code <ph id=\"ph1\">`type`</ph> specified in <bpt id=\"p1\">**</bpt>event_receiver<ept id=\"p1\">**</ept>, <bpt id=\"p2\">*</bpt>source<ept id=\"p2\">*</ept> can be one of the following:","pos":[46,145],"source":" Depending on the code `type` specified in **event_receiver**, *source* can be one of the following:"}]}]},{"content":"A native event source object pointer.","pos":[1818,1855]},{"pos":[1865,1908],"content":"An <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept>-based pointer (COM source).","source":"An **IUnknown**-based pointer (COM source)."},{"content":"A managed object pointer (for managed events).","pos":[1918,1964]},{"pos":[1971,2261],"content":"**&** *ReceiverClass* `::` `HandlerMethod`  \nA pointer to the event handler method to be unhooked from an event. The handler is specified as a method of a class or a reference to the same; if you do not specify the class name, `__unhook` assumes the class to be that in which it is called.","leadings":[""," "],"nodes":[{"content":"<bpt id=\"p1\">**</bpt><ph id=\"ph1\">&amp;</ph><ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>ReceiverClass<ept id=\"p2\">*</ept>","pos":[0,21],"source":"**&** *ReceiverClass*"},{"content":"A pointer to the event handler method to be unhooked from an event. The handler is specified as a method of a class or a reference to the same; if you do not specify the class name, `__unhook` assumes the class to be that in which it is called.","pos":[45,289],"nodes":[{"content":"A pointer to the event handler method to be unhooked from an event.","pos":[0,67]},{"content":"The handler is specified as a method of a class or a reference to the same; if you do not specify the class name, <ph id=\"ph1\">`__unhook`</ph> assumes the class to be that in which it is called.","pos":[68,244],"source":" The handler is specified as a method of a class or a reference to the same; if you do not specify the class name, `__unhook` assumes the class to be that in which it is called."}]}]},{"pos":[2271,2369],"content":"Native C++ events: <bpt id=\"p1\">*</bpt>ReceiverClass<ept id=\"p1\">*</ept> is the event receiver class and <ph id=\"ph1\">`HandlerMethod`</ph> is the handler.","source":"Native C++ events: *ReceiverClass* is the event receiver class and `HandlerMethod` is the handler."},{"pos":[2379,2482],"content":"COM events: <bpt id=\"p1\">*</bpt>ReceiverClass<ept id=\"p1\">*</ept> is the event receiver interface and <ph id=\"ph1\">`HandlerMethod`</ph> is one of its handlers.","source":"COM events: *ReceiverClass* is the event receiver interface and `HandlerMethod` is one of its handlers."},{"pos":[2492,2587],"content":"Managed events: <bpt id=\"p1\">*</bpt>ReceiverClass<ept id=\"p1\">*</ept> is the event receiver class and <ph id=\"ph1\">`HandlerMethod`</ph> is the handler.","source":"Managed events: *ReceiverClass* is the event receiver class and `HandlerMethod` is the handler."},{"pos":[2594,2783],"content":"`receiver`(optional)  \nA pointer to an instance of the event receiver class. If you do not specify a receiver, the default is the receiver class or structure in which `__unhook` is called.","leadings":[""," "],"nodes":[{"content":"(optional)","pos":[10,20]},{"content":"A pointer to an instance of the event receiver class. If you do not specify a receiver, the default is the receiver class or structure in which `__unhook` is called.","pos":[23,188],"nodes":[{"content":"A pointer to an instance of the event receiver class.","pos":[0,53]},{"content":"If you do not specify a receiver, the default is the receiver class or structure in which <ph id=\"ph1\">`__unhook`</ph> is called.","pos":[54,165],"source":" If you do not specify a receiver, the default is the receiver class or structure in which `__unhook` is called."}]}]},{"content":"Usage","pos":[2792,2797]},{"content":"Can be use in any function scope, including main, outside the event receiver class.","pos":[2801,2884]},{"content":"Remarks","pos":[2893,2900]},{"pos":[2904,3027],"content":"Use the intrinsic function <ph id=\"ph1\">`__unhook`</ph> in an event receiver to dissociate or \"unhook\" a handler method from an event method.","source":"Use the intrinsic function `__unhook` in an event receiver to dissociate or \"unhook\" a handler method from an event method."},{"content":"There are three forms of <ph id=\"ph1\">`__unhook`</ph>.","pos":[3034,3070],"source":"There are three forms of `__unhook`."},{"content":"You can use the first (four-argument) form in most cases.","pos":[3071,3128]},{"content":"You can use the second (two-argument) form of <ph id=\"ph1\">`__unhook`</ph> only for a COM event receiver; this unhooks the entire event interface.","pos":[3129,3257],"source":" You can use the second (two-argument) form of `__unhook` only for a COM event receiver; this unhooks the entire event interface."},{"content":"You can use the third (one-argument) form to unhook all delegates from the specified source.","pos":[3258,3350]},{"content":"A nonzero return value indicates that an error has occurred (managed events will throw an exception).","pos":[3357,3458]},{"pos":[3465,3570],"content":"If you call <ph id=\"ph1\">`__unhook`</ph> on an event and event handler that are not already hooked, it will have no effect.","source":"If you call `__unhook` on an event and event handler that are not already hooked, it will have no effect."},{"content":"At compile time, the compiler verifies that the event exists and does parameter type checking with the specified handler.","pos":[3577,3698]},{"pos":[3705,3804],"content":"With the exception of COM events, <ph id=\"ph1\">`__hook`</ph> and <ph id=\"ph2\">`__unhook`</ph> can be called outside the event receiver.","source":"With the exception of COM events, `__hook` and `__unhook` can be called outside the event receiver."},{"pos":[3811,3872],"content":"An alternative to using <ph id=\"ph1\">`__unhook`</ph> is to use the -= operator.","source":"An alternative to using `__unhook` is to use the -= operator."},{"pos":[3879,3997],"content":"For information on coding managed events in the new syntax, see <bpt id=\"p1\">[</bpt>event<ept id=\"p1\">](../windows/event-cpp-component-extensions.md)</ept>.","source":"For information on coding managed events in the new syntax, see [event](../windows/event-cpp-component-extensions.md)."},{"pos":[4005,4066],"content":"[!NOTE]\n A templated class or struct cannot contain events.","leadings":["","> "],"nodes":[{"content":"A templated class or struct cannot contain events.","pos":[9,59]}]},{"content":"Example","pos":[4075,4082]},{"pos":[4086,4234],"content":"See <bpt id=\"p1\">[</bpt>Event Handling in Native C++<ept id=\"p1\">](../cpp/event-handling-in-native-cpp.md)</ept> and <bpt id=\"p2\">[</bpt>Event Handling in COM<ept id=\"p2\">](../cpp/event-handling-in-com.md)</ept> for samples.","source":"See [Event Handling in Native C++](../cpp/event-handling-in-native-cpp.md) and [Event Handling in COM](../cpp/event-handling-in-com.md) for samples."},{"content":"See Also","pos":[4243,4251]},{"content":"Keywords","pos":[4256,4264]},{"content":"event_source","pos":[4295,4307]},{"content":"event_receiver","pos":[4342,4356]},{"content":"__event","pos":[4393,4400]},{"content":"__hook","pos":[4424,4430]},{"content":"__raise","pos":[4453,4460]}],"content":"---\ntitle: \"__unhook | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"__unhook\"\n  - \"__unhook_cpp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"event handlers, dissociating events\"\n  - \"__unhook keyword [C++]\"\nms.assetid: 953a14f3-5199-459d-81e5-fcf015a19878\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# __unhook\nDissociates a handler method from an event.  \n  \n## Syntax  \n  \n```  \n  \n      long  __unhook(  \n   &SourceClass::EventMethod,  \n   source,  \n   &ReceiverClass::HandlerMethod  \n   [, receiver = this]   \n);  \nlong  __unhook(   \n   interface,  \n   source  \n);  \nlong  __unhook(  \n   source   \n);  \n```  \n  \n#### Parameters  \n **&** *SourceClass* `::` *EventMethod*  \n A pointer to the event method from which you unhook the event handler method:  \n  \n-   Native C++ events: *SourceClass* is the event source class and *EventMethod* is the event.  \n  \n-   COM events: *SourceClass* is the event source interface and *EventMethod* is one of its methods.  \n  \n-   Managed events: *SourceClass* is the event source class and *EventMethod* is the event.  \n  \n `interface`  \n The interface name being unhooked from `receiver`, only for COM event receivers in which the *layout_dependent* parameter of the [event_receiver](../windows/event-receiver.md) attribute is **true**.  \n  \n *source*  \n A pointer to an instance of the event source. Depending on the code `type` specified in **event_receiver**, *source* can be one of the following:  \n  \n-   A native event source object pointer.  \n  \n-   An **IUnknown**-based pointer (COM source).  \n  \n-   A managed object pointer (for managed events).  \n  \n **&** *ReceiverClass* `::` `HandlerMethod`  \n A pointer to the event handler method to be unhooked from an event. The handler is specified as a method of a class or a reference to the same; if you do not specify the class name, `__unhook` assumes the class to be that in which it is called.  \n  \n-   Native C++ events: *ReceiverClass* is the event receiver class and `HandlerMethod` is the handler.  \n  \n-   COM events: *ReceiverClass* is the event receiver interface and `HandlerMethod` is one of its handlers.  \n  \n-   Managed events: *ReceiverClass* is the event receiver class and `HandlerMethod` is the handler.  \n  \n `receiver`(optional)  \n A pointer to an instance of the event receiver class. If you do not specify a receiver, the default is the receiver class or structure in which `__unhook` is called.  \n  \n## Usage  \n Can be use in any function scope, including main, outside the event receiver class.  \n  \n## Remarks  \n Use the intrinsic function `__unhook` in an event receiver to dissociate or \"unhook\" a handler method from an event method.  \n  \n There are three forms of `__unhook`. You can use the first (four-argument) form in most cases. You can use the second (two-argument) form of `__unhook` only for a COM event receiver; this unhooks the entire event interface. You can use the third (one-argument) form to unhook all delegates from the specified source.  \n  \n A nonzero return value indicates that an error has occurred (managed events will throw an exception).  \n  \n If you call `__unhook` on an event and event handler that are not already hooked, it will have no effect.  \n  \n At compile time, the compiler verifies that the event exists and does parameter type checking with the specified handler.  \n  \n With the exception of COM events, `__hook` and `__unhook` can be called outside the event receiver.  \n  \n An alternative to using `__unhook` is to use the -= operator.  \n  \n For information on coding managed events in the new syntax, see [event](../windows/event-cpp-component-extensions.md).  \n  \n> [!NOTE]\n>  A templated class or struct cannot contain events.  \n  \n## Example  \n See [Event Handling in Native C++](../cpp/event-handling-in-native-cpp.md) and [Event Handling in COM](../cpp/event-handling-in-com.md) for samples.  \n  \n## See Also  \n [Keywords](../cpp/keywords-cpp.md)   \n [event_source](../windows/event-source.md)   \n [event_receiver](../windows/event-receiver.md)   \n [__event](../cpp/event.md)   \n [__hook](../cpp/hook.md)   \n [__raise](../cpp/raise.md)"}