{"nodes":[{"pos":[12,49],"content":"Compiler Error C3206 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Error C3206 | Microsoft Docs","pos":[0,37]}]},{"content":"Compiler Error C3206","pos":[619,639]},{"content":"'function' : invalid type argument for 'param', missing type argument list on class type 'typename'","pos":[640,739]},{"content":"A template function is defined as taking a template type argument.","pos":[746,812]},{"content":"However, a template template argument was passed.","pos":[813,862]},{"content":"The following sample generates C3206:","pos":[869,906]},{"content":"Possible resolution:","pos":[1123,1143]},{"content":"C3206 can also occur when using generics:","pos":[1317,1358]},{"content":"Possible resolution:","pos":[1550,1570]},{"content":"This error can also be generated as a result of compiler conformance work for Visual C++ .NET 2003, where class templates are not allowed as template type argument.","pos":[1757,1921]},{"content":"A class template is not allowed as a template type argument.","pos":[1928,1988]},{"content":"This worked in Visual C++ .NET 2003, but it is invalid C++.","pos":[1989,2048]},{"content":"The following sample compiles in Visual C++ .NET 2002 but will fail in Visual C++ .NET 2003:","pos":[2055,2147]},{"content":"Possible resolution:","pos":[2364,2384]},{"content":"If a template template parameter is necessary, then the resolution for the error that is valid in both the Visual C++ .NET 2003 and Visual C++ .NET 2002 versions require you to wrap the function in a template class that takes a template template parameter:","pos":[2574,2830]}],"content":"---\ntitle: \"Compiler Error C3206 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"C3206\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C3206\"\nms.assetid: d62995b5-e349-4418-bbe8-8a5e776ca7b0\ncaps.latest.revision: 10\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Compiler Error C3206\n'function' : invalid type argument for 'param', missing type argument list on class type 'typename'  \n  \n A template function is defined as taking a template type argument. However, a template template argument was passed.  \n  \n The following sample generates C3206:  \n  \n```  \n// C3206.cpp  \ntemplate <class T>  \nvoid f() {}  \n  \ntemplate <class T>  \nstruct S {};  \n  \nvoid f1() {  \n   f<S>();   // C3206  \n   // try the following line instead  \n   // f<S<int> >();  \n}  \n```  \n  \n Possible resolution:  \n  \n```  \n// C3206b.cpp  \n// compile with: /c  \ntemplate <class T>  \nvoid f() {}  \n  \ntemplate <class T>  \nstruct S {};  \n  \nvoid f1() {  \n   f<S<int> >();  \n}  \n```  \n  \n C3206 can also occur when using generics:  \n  \n```  \n// C3206c.cpp  \n// compile with: /clr  \ngeneric <class GT1>  \nvoid gf() {}  \n  \ngeneric <class T>  \nvalue struct GS {};  \n  \nint main() {  \n   gf<GS>();   // C3206  \n}  \n```  \n  \n Possible resolution:  \n  \n```  \n// C3206d.cpp  \n// compile with: /clr  \ngeneric <class GT1>  \nvoid gf() {}  \n  \ngeneric <class T>  \nvalue struct GS {};  \n  \nint main() {  \n   gf<GS<int> >();  \n}  \n```  \n  \n This error can also be generated as a result of compiler conformance work for Visual C++ .NET 2003, where class templates are not allowed as template type argument.  \n  \n A class template is not allowed as a template type argument. This worked in Visual C++ .NET 2003, but it is invalid C++.  \n  \n The following sample compiles in Visual C++ .NET 2002 but will fail in Visual C++ .NET 2003:  \n  \n```  \n// C3206e.cpp  \ntemplate <class T>  \nstruct S {};  \n  \ntemplate <class T>  \nvoid func() {   // takes a type  \n   T<int> t;  \n}  \n  \nint main() {  \n   func<S>();   // C3206 S is not a type.  \n}  \n```  \n  \n Possible resolution:  \n  \n```  \n// C3206f.cpp  \ntemplate <class T>  \nstruct S {};  \n  \ntemplate <class T>  \nvoid func() {   // takes a type  \n   T t;  \n}  \n  \nint main() {  \n   func<S<int> >();  \n}  \n```  \n  \n If a template template parameter is necessary, then the resolution for the error that is valid in both the Visual C++ .NET 2003 and Visual C++ .NET 2002 versions require you to wrap the function in a template class that takes a template template parameter:  \n  \n```  \n// C3206g.cpp  \ntemplate <class T>  \nstruct S {};  \n  \ntemplate<template<class> class TT>  \nstruct X {  \n   static void func() {  \n      TT<int> t1;  \n      TT<char> t2;  \n   }  \n};  \n  \nint main() {  \n   X<S>::func();  \n}  \n```"}