{"nodes":[{"pos":[12,81],"content":"_snscanf_s, _snscanf_s_l, _snwscanf_s, _snwscanf_s_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_snscanf_s, _snscanf_s_l, _snwscanf_s, _snwscanf_s_l | Microsoft Docs","pos":[0,69]}]},{"pos":[1575,1627],"content":"_snscanf_s, _snscanf_s_l, _snwscanf_s, _snwscanf_s_l","linkify":"_snscanf_s, _snscanf_s_l, _snwscanf_s, _snwscanf_s_l","nodes":[{"content":"_snscanf_s, _snscanf_s_l, _snwscanf_s, _snwscanf_s_l","pos":[0,52]}]},{"content":"Reads formatted data of a specified length from a string.","pos":[1628,1685]},{"content":"These are versions of <bpt id=\"p1\">[</bpt>_snscanf, _snscanf_l, _snwscanf, _snwscanf_l<ept id=\"p1\">](../../c-runtime-library/reference/snscanf-snscanf-l-snwscanf-snwscanf-l.md)</ept> with security enhancements as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1686,1962],"source":" These are versions of [_snscanf, _snscanf_l, _snwscanf, _snwscanf_l](../../c-runtime-library/reference/snscanf-snscanf-l-snwscanf-snwscanf-l.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"pos":[1971,1977],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[2507,2517],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Input string to examine.","pos":[2532,2556]},{"content":"Number of characters to examine in <ph id=\"ph1\">`input`</ph>.","pos":[2575,2618],"source":" Number of characters to examine in `input`."},{"content":"One or more format specifiers.","pos":[2637,2667]},{"content":"Variables that will be used to store the values extracted from the input string by the format specifiers in <ph id=\"ph1\">`format`</ph>.","pos":[2694,2811],"source":" Variables that will be used to store the values extracted from the input string by the format specifiers in `format`."},{"content":"The locale to use.","pos":[2830,2848]},{"pos":[2857,2869],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Both of these functions returns the number of fields successfully converted and assigned; the return value does not include fields that were read but not assigned.","pos":[2873,3036]},{"content":"A return value of 0 indicates that no fields were assigned.","pos":[3037,3096]},{"content":"The return value is <ph id=\"ph1\">`EOF`</ph> for an error or if the end of the string is reached before the first conversion.","pos":[3097,3203],"source":" The return value is `EOF` for an error or if the end of the string is reached before the first conversion."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>sscanf_s, _sscanf_s_l, swscanf_s, _swscanf_s_l<ept id=\"p1\">](../../c-runtime-library/reference/sscanf-s-sscanf-s-l-swscanf-s-swscanf-s-l.md)</ept>.","pos":[3204,3359],"source":" For more information, see [sscanf_s, _sscanf_s_l, swscanf_s, _swscanf_s_l](../../c-runtime-library/reference/sscanf-s-sscanf-s-l-swscanf-s-swscanf-s-l.md)."},{"content":"If <ph id=\"ph1\">`input`</ph> or <ph id=\"ph2\">`format`</ph> is a <ph id=\"ph3\">`NULL`</ph> pointer, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[3366,3540],"source":"If `input` or `format` is a `NULL` pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions return <ph id=\"ph1\">`EOF`</ph> and set <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`EINVAL`</ph>.","pos":[3541,3635],"source":" If execution is allowed to continue, these functions return `EOF` and set `errno` to `EINVAL`."},{"pos":[3642,3813],"content":"For information about these and other error codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For information about these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"pos":[3822,3829],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function is like <ph id=\"ph1\">`sscanf_s`</ph> except that it provides the ability to specify a fixed number of characters to examine from the input string.","pos":[3833,3975],"source":"This function is like `sscanf_s` except that it provides the ability to specify a fixed number of characters to examine from the input string."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>sscanf_s, _sscanf_s_l, swscanf_s, _swscanf_s_l<ept id=\"p1\">](../../c-runtime-library/reference/sscanf-s-sscanf-s-l-swscanf-s-swscanf-s-l.md)</ept>.","pos":[3976,4131],"source":" For more information, see [sscanf_s, _sscanf_s_l, swscanf_s, _swscanf_s_l](../../c-runtime-library/reference/sscanf-s-sscanf-s-l-swscanf-s-swscanf-s-l.md)."},{"content":"The buffer size parameter is required with the type field characters <ph id=\"ph1\">`c`</ph>, <ph id=\"ph2\">`C`</ph>, <ph id=\"ph3\">`s`</ph>, <ph id=\"ph4\">`S`</ph>, and <ph id=\"ph5\">`[`</ph>.","pos":[4138,4235],"source":"The buffer size parameter is required with the type field characters `c`, `C`, `s`, `S`, and `[`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>scanf Type Field Characters<ept id=\"p1\">](../../c-runtime-library/scanf-type-field-characters.md)</ept>.","pos":[4236,4348],"source":" For more information, see [scanf Type Field Characters](../../c-runtime-library/scanf-type-field-characters.md)."},{"pos":[4356,4422],"content":"[!NOTE]\n The size parameter is of type `unsigned`, not `size_t`.","leadings":["","> "],"nodes":[{"content":"The size parameter is of type <ph id=\"ph1\">`unsigned`</ph>, not <ph id=\"ph2\">`size_t`</ph>.","pos":[9,64],"source":" The size parameter is of type `unsigned`, not `size_t`."}]},{"pos":[4429,4585],"content":"The versions of these functions with the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current thread locale.","source":"The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale."},{"pos":[4595,4624],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"Tchar.h routine","pos":[4631,4646]},{"content":"_UNICODE and _MBCS not defined","pos":[4647,4677]},{"content":"_MBCS defined","pos":[4678,4691]},{"content":"_UNICODE defined","pos":[4692,4708]},{"pos":[4952,4964],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[4971,4978]},{"content":"Required header","pos":[4979,4994]},{"pos":[5039,5067],"content":"<ph id=\"ph1\">`_snscanf_s`</ph>, _<ph id=\"ph2\">`snscanf_s_l`</ph>","source":"`_snscanf_s`, _`snscanf_s_l`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt;","pos":[5068,5078],"source":"\\<stdio.h>"},{"pos":[5083,5113],"content":"<ph id=\"ph1\">`_snwscanf_s`</ph>, <ph id=\"ph2\">`_snwscanf_s_l`</ph>","source":"`_snwscanf_s`, `_snwscanf_s_l`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;","pos":[5114,5138],"source":"\\<stdio.h> or \\<wchar.h>"},{"pos":[5146,5264],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[5273,5280],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6129,6154],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[6158,6173]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[6174,6221],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[6222,6347],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[6356,6364],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[6368,6449],"content":"<bpt id=\"p1\">[</bpt>scanf Width Specification<ept id=\"p1\">](../../c-runtime-library/scanf-width-specification.md)</ept>","source":"[scanf Width Specification](../../c-runtime-library/scanf-width-specification.md)"}],"content":"---\ntitle: \"_snscanf_s, _snscanf_s_l, _snwscanf_s, _snwscanf_s_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_snwscanf_s_l\"\n  - \"_snwscanf_s\"\n  - \"_snscanf_s\"\n  - \"_snscanf_s_l\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_sntscanf_s\"\n  - \"snscanf_s\"\n  - \"_snwscanf_s_l\"\n  - \"sntscanf_s_l\"\n  - \"snwscanf_s_l\"\n  - \"snwscanf_s\"\n  - \"_snscanf_s\"\n  - \"_snwscanf_s\"\n  - \"snscanf_s_l\"\n  - \"_sntscanf_s_l\"\n  - \"_snscanf_s_l\"\n  - \"sntscanf_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_snscanf_s_l function\"\n  - \"snwscanf_s function\"\n  - \"_snwscanf_s function\"\n  - \"sntscanf_s_l function\"\n  - \"sntscanf_s function\"\n  - \"_snwscanf_s_l function\"\n  - \"_snscanf_s function\"\n  - \"snscanf_s_l function\"\n  - \"strings [C++], reading data from\"\n  - \"_sntscanf_s_l function\"\n  - \"reading data, strings\"\n  - \"snscanf_s function\"\n  - \"strings [C++], reading\"\n  - \"_sntscanf_s function\"\n  - \"snwscanf_s_l function\"\nms.assetid: 72356653-7362-461a-af73-597b9c0a8094\ncaps.latest.revision: 24\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _snscanf_s, _snscanf_s_l, _snwscanf_s, _snwscanf_s_l\nReads formatted data of a specified length from a string. These are versions of [_snscanf, _snscanf_l, _snwscanf, _snwscanf_l](../../c-runtime-library/reference/snscanf-snscanf-l-snwscanf-snwscanf-l.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nint __cdecl _snscanf_s(  \n   const char * input,  \n   size_t length,  \n   const char * format,  \n   ...  \n);  \nint __cdecl _snscanf_s_l(  \n   const char * input,  \n   size_t length,  \n   const char * format,  \n   locale_t locale,  \n   ...  \n);  \nint __cdecl _snwscanf_s(  \n   const wchar_t * input,  \n   size_t length,  \n   const wchar_t * format,  \n   ...  \n);  \nint __cdecl _snwscanf_s_l(  \n   const wchar_t * input,  \n   size_t length,  \n   const wchar_t * format,  \n   locale_t locale,  \n   …  \n);  \n```  \n  \n#### Parameters  \n `input`  \n Input string to examine.  \n  \n `length`  \n Number of characters to examine in `input`.  \n  \n `format`  \n One or more format specifiers.  \n  \n `... (optional)`  \n Variables that will be used to store the values extracted from the input string by the format specifiers in `format`.  \n  \n `locale`  \n The locale to use.  \n  \n## Return Value  \n Both of these functions returns the number of fields successfully converted and assigned; the return value does not include fields that were read but not assigned. A return value of 0 indicates that no fields were assigned. The return value is `EOF` for an error or if the end of the string is reached before the first conversion. For more information, see [sscanf_s, _sscanf_s_l, swscanf_s, _swscanf_s_l](../../c-runtime-library/reference/sscanf-s-sscanf-s-l-swscanf-s-swscanf-s-l.md).  \n  \n If `input` or `format` is a `NULL` pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions return `EOF` and set `errno` to `EINVAL`.  \n  \n For information about these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n This function is like `sscanf_s` except that it provides the ability to specify a fixed number of characters to examine from the input string. For more information, see [sscanf_s, _sscanf_s_l, swscanf_s, _swscanf_s_l](../../c-runtime-library/reference/sscanf-s-sscanf-s-l-swscanf-s-swscanf-s-l.md).  \n  \n The buffer size parameter is required with the type field characters `c`, `C`, `s`, `S`, and `[`. For more information, see [scanf Type Field Characters](../../c-runtime-library/scanf-type-field-characters.md).  \n  \n> [!NOTE]\n>  The size parameter is of type `unsigned`, not `size_t`.  \n  \n The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale.  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_sntscanf_s`|`_snscanf_s`|`_snscanf_s`|`_snwscanf_s`|  \n|`_sntscanf_s_l`|`_snscanf_s_l`|`_snscanf_s_l`|`_snwscanf_s_l`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_snscanf_s`, _`snscanf_s_l`|\\<stdio.h>|  \n|`_snwscanf_s`, `_snwscanf_s_l`|\\<stdio.h> or \\<wchar.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_snscanf_s.c  \n// This example scans a string of   \n// numbers, using both the character  \n// and wide character secure versions  \n// of the snscanf function.  \n  \n#include <stdio.h>  \n  \nint main( )  \n{  \n    char        str1[] = \"15 12 14...\";  \n    wchar_t     str2[] = L\"15 12 14...\";  \n    char        s1[3];  \n    wchar_t     s2[3];  \n    int         i;  \n    float       fp;  \n  \n    i = _snscanf_s( str1, 6,  \"%s %f\", s1, 3, &fp);  \n    printf_s(\"_snscanf_s converted %d fields: \", i);  \n    printf_s(\"%s and %f\\n\", s1, fp);  \n  \n    i = _snwscanf_s( str2, 6,  L\"%s %f\", s2, 3, &fp);  \n    wprintf_s(L\"_snwscanf_s converted %d fields: \", i);  \n    wprintf_s(L\"%s and %f\\n\", s2, fp);  \n}  \n```  \n  \n```Output  \n_snscanf_s converted 2 fields: 15 and 12.000000  \n_snwscanf_s converted 2 fields: 15 and 12.000000  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [scanf Width Specification](../../c-runtime-library/scanf-width-specification.md)"}