{"nodes":[{"pos":[12,66],"content":"piecewise_constant_distribution Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"piecewise_constant_distribution Class | Microsoft Docs","pos":[0,54]}]},{"pos":[899,936],"content":"piecewise_constant_distribution Class","linkify":"piecewise_constant_distribution Class","nodes":[{"content":"piecewise_constant_distribution Class","pos":[0,37]}]},{"content":"Generates a piecewise constant distribution that has varying-width intervals with uniform probability in each interval.","pos":[937,1056]},{"pos":[1065,1071],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[2261,2271],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The floating point result type, defaults to <ph id=\"ph1\">`double`</ph>.","pos":[2289,2342],"source":" The floating point result type, defaults to `double`."},{"content":"For possible types, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","pos":[2343,2410],"source":" For possible types, see [\\<random>](../standard-library/random.md)."},{"pos":[2419,2426],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This sampling distribution has varying-width intervals with uniform probability in each interval.","pos":[2430,2527]},{"content":"For information about other sampling distributions, see <bpt id=\"p1\">[</bpt>piecewise_linear_distribution Class<ept id=\"p1\">](../standard-library/piecewise-linear-distribution-class.md)</ept> and <bpt id=\"p2\">[</bpt>discrete_distribution<ept id=\"p2\">](../standard-library/discrete-distribution-class.md)</ept>.","pos":[2528,2762],"source":" For information about other sampling distributions, see [piecewise_linear_distribution Class](../standard-library/piecewise-linear-distribution-class.md) and [discrete_distribution](../standard-library/discrete-distribution-class.md)."},{"content":"The following table links to articles about individual members:","pos":[2769,2832]},{"pos":[2856,2989],"content":"<bpt id=\"p1\">[</bpt>piecewise_constant_distribution::piecewise_constant_distribution<ept id=\"p1\">](#piecewise_constant_distribution__piecewise_constant_distribution)</ept>","source":"[piecewise_constant_distribution::piecewise_constant_distribution](#piecewise_constant_distribution__piecewise_constant_distribution)"},{"pos":[3171,3262],"content":"<bpt id=\"p1\">[</bpt>piecewise_constant_distribution::param_type<ept id=\"p1\">](#piecewise_constant_distribution__param_type)</ept>","source":"[piecewise_constant_distribution::param_type](#piecewise_constant_distribution__param_type)"},{"pos":[3270,3388],"content":"The property function <ph id=\"ph1\">`intervals()`</ph> returns a <ph id=\"ph2\">`vector&lt;RealType&gt;`</ph> with the set of stored intervals of the distribution.","source":"The property function `intervals()` returns a `vector<RealType>` with the set of stored intervals of the distribution."},{"pos":[3395,3594],"content":"The property function <ph id=\"ph1\">`densities()`</ph> returns a <ph id=\"ph2\">`vector&lt;RealType&gt;`</ph> with the stored densities for each interval set, which are calculated according to the weights provided in the constructor parameters.","source":"The property function `densities()` returns a `vector<RealType>` with the stored densities for each interval set, which are calculated according to the weights provided in the constructor parameters."},{"pos":[3601,3715],"content":"For more information about distribution classes and their members, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","source":"For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md)."},{"pos":[3724,3731],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5826,5832],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[6494,6506],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[6510,6531],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>random&gt;","source":"**Header:** \\<random>"},{"pos":[6538,6556],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[6566,6711],"content":"<bpt id=\"p1\">&lt;a name=\"piecewise_constant_distribution__piecewise_constant_distribution\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  piecewise_constant_distribution::piecewise_constant_distribution","linkify":"<a name=\"piecewise_constant_distribution__piecewise_constant_distribution\"></a>  piecewise_constant_distribution::piecewise_constant_distribution","source":"<a name=\"piecewise_constant_distribution__piecewise_constant_distribution\"></a>  piecewise_constant_distribution::piecewise_constant_distribution"},{"content":"Constructs the distribution.","pos":[6715,6743]},{"pos":[7777,7787],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An input iterator of the first element in the distribution range.","pos":[7803,7868]},{"content":"An input iterator of the last element in the distribution range.","pos":[7886,7950]},{"content":"An input iterator of the first element in the weights range.","pos":[7969,8029]},{"content":"An <bpt id=\"p1\">[</bpt>initializer_list<ept id=\"p1\">](../cpp/initializers.md)</ept> with the intervals of the distribution.","pos":[8051,8136],"source":" An [initializer_list](../cpp/initializers.md) with the intervals of the distribution."},{"content":"The number of elements in the distribution range.","pos":[8154,8203]},{"content":"The lowest value in the distribution range.","pos":[8220,8263]},{"content":"The highest value in the distribution range.","pos":[8280,8324]},{"content":"Must be greater than <ph id=\"ph1\">`xmin`</ph>.","pos":[8325,8353],"source":" Must be greater than `xmin`."},{"content":"The object representing the probability function for the distribution.","pos":[8376,8446]},{"content":"Both the parameter and the return value must be convertible to <ph id=\"ph1\">`double`</ph>.","pos":[8447,8519],"source":" Both the parameter and the return value must be convertible to `double`."},{"content":"The parameter structure used to construct the distribution.","pos":[8536,8595]},{"pos":[8605,8612],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default constructor sets the stored parameters such that there is one interval, 0 to 1, with a probability density of 1.","pos":[8616,8740]},{"content":"The iterator range constructor","pos":[8747,8777]},{"pos":[8962,9116],"content":"constructs a distribution object with itnervals from iterators over the sequence [ <ph id=\"ph1\">`firstI`</ph>, <ph id=\"ph2\">`lastI`</ph>) and a matching weight sequence starting at <ph id=\"ph3\">`firstW`</ph>.","source":"constructs a distribution object with itnervals from iterators over the sequence [ `firstI`, `lastI`) and a matching weight sequence starting at `firstW`."},{"content":"The initializer list constructor","pos":[9123,9155]},{"pos":[9318,9456],"content":"constructs a distribution object with intervals from the intializer list <ph id=\"ph1\">`intervals`</ph> and weights generated from the function <ph id=\"ph2\">`weightfunc`</ph>.","source":"constructs a distribution object with intervals from the intializer list `intervals` and weights generated from the function `weightfunc`."},{"content":"The constructor defined as","pos":[9463,9489]},{"content":"constructs a distribution object with <ph id=\"ph1\">`count`</ph> intervals distributed uniformly over [ <ph id=\"ph2\">`xmin,xmax`</ph>], assigning each interval weights according to the function <ph id=\"ph3\">`weightfunc`</ph>, and <ph id=\"ph4\">`weightfunc`</ph> must accept one parameter and have a return value, both of which are convertible to <ph id=\"ph5\">`double`</ph>.","pos":[9655,9936],"source":"constructs a distribution object with `count` intervals distributed uniformly over [ `xmin,xmax`], assigning each interval weights according to the function `weightfunc`, and `weightfunc` must accept one parameter and have a return value, both of which are convertible to `double`."},{"content":"<bpt id=\"p1\">**</bpt>Precondition:<ept id=\"p1\">**</ept><ph id=\"ph1\">`xmin &lt; xmax`</ph>","pos":[9937,9967],"source":"**Precondition:**`xmin < xmax`"},{"content":"The constructor defined as","pos":[9974,10000]},{"pos":[10088,10168],"content":"constructs a distribution object using <ph id=\"ph1\">`parm`</ph> as the stored parameter structure.","source":"constructs a distribution object using `parm` as the stored parameter structure."},{"pos":[10178,10281],"content":"<bpt id=\"p1\">&lt;a name=\"piecewise_constant_distribution__param_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  piecewise_constant_distribution::param_type","linkify":"<a name=\"piecewise_constant_distribution__param_type\"></a>  piecewise_constant_distribution::param_type","source":"<a name=\"piecewise_constant_distribution__param_type\"></a>  piecewise_constant_distribution::param_type"},{"content":"Stores all the parameters of the distribution.","pos":[10285,10331]},{"pos":[10908,10918],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[10922,11041],"content":"See parent topic <bpt id=\"p1\">[</bpt>piecewise_constant_distribution Class<ept id=\"p1\">](../standard-library/piecewise-constant-distribution-class.md)</ept>.","source":"See parent topic [piecewise_constant_distribution Class](../standard-library/piecewise-constant-distribution-class.md)."},{"pos":[11051,11058],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11062,11093],"content":"<bpt id=\"p1\">**</bpt>Precondition:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`xmin &lt; xmax`</ph>","source":"**Precondition:** `xmin < xmax`"},{"pos":[11100,11343],"content":"This structure can be passed to the distribution's class constructor at instantiation, to the <ph id=\"ph1\">`param()`</ph> member function to set the stored parameters of an existing distribution, and to <ph id=\"ph2\">`operator()`</ph> to be used in place of the stored parameters.","source":"This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters."},{"pos":[11352,11360],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept><ph id=\"ph2\"> </ph>","pos":[11364,11407],"source":"[\\<random>](../standard-library/random.md) "},{"content":"<bpt id=\"p1\"> [</bpt>piecewise_linear_distribution<ept id=\"p1\">](../standard-library/piecewise-linear-distribution-class.md)</ept>","pos":[11410,11502],"source":" [piecewise_linear_distribution](../standard-library/piecewise-linear-distribution-class.md)"}],"content":"---\ntitle: \"piecewise_constant_distribution Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.tr1.piecewise_constant_distribution\"\n  - \"tr1.piecewise_constant_distribution\"\n  - \"tr1::piecewise_constant_distribution\"\n  - \"std::tr1::piecewise_constant_distribution\"\n  - \"random/std::tr1::piecewise_constant_distribution\"\n  - \"piecewise_constant_distribution\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"piecewise_constant_distribution class\"\nms.assetid: 2c9a21fa-623e-4d63-b827-3f1556b6dedb\ncaps.latest.revision: 23\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# piecewise_constant_distribution Class\nGenerates a piecewise constant distribution that has varying-width intervals with uniform probability in each interval.  \n  \n## Syntax  \n```  \nclass piecewise_constant_distribution  \n   {  \n   public:  // types  \n   typedef RealType result_type;  \n   struct param_type;  // constructor and reset functions  \n   piecewise_constant_distribution();\n   template <class InputIteratorI, class InputIteratorW>  \n   piecewise_constant_distribution(InputIteratorI firstI, InputIteratorI lastI, InputIteratorW firstW);\n   template <class UnaryOperation>  \n   piecewise_constant_distribution(initializer_list<RealType>  \n   intervals, UnaryOperation weightfunc);\n   template <class UnaryOperation>  \n   piecewise_constant_distribution(size_t count, RealType xmin, RealType xmax, UnaryOperation weightfunc);\n   explicit piecewise_constant_distribution(const param_type& parm);\n   void reset();\n   // generating functions  \n   template <class URNG>  \n   result_type operator()(URNG& gen);\n   template <class URNG>  \n   result_type operator()(URNG& gen, const param_type& parm);\n   // property functions  \n   vector<result_type>  \n   intervals() const;\n   vector<result_type> densities() const;\n   param_type param() const;\n   void param(const param_type& parm);\n   result_type min() const;\n   result_type max() const;\n   };  \n```  \n#### Parameters  \n `RealType`  \n The floating point result type, defaults to `double`. For possible types, see [\\<random>](../standard-library/random.md).  \n  \n## Remarks  \n This sampling distribution has varying-width intervals with uniform probability in each interval. For information about other sampling distributions, see [piecewise_linear_distribution Class](../standard-library/piecewise-linear-distribution-class.md) and [discrete_distribution](../standard-library/discrete-distribution-class.md).  \n  \n The following table links to articles about individual members:  \n  \n||||  \n|-|-|-|  \n|[piecewise_constant_distribution::piecewise_constant_distribution](#piecewise_constant_distribution__piecewise_constant_distribution)|`piecewise_constant_distribution::intervals`|`piecewise_constant_distribution::param`|  \n|`piecewise_constant_distribution::operator()`|`piecewise_constant_distribution::densities`|[piecewise_constant_distribution::param_type](#piecewise_constant_distribution__param_type)|  \n  \n The property function `intervals()` returns a `vector<RealType>` with the set of stored intervals of the distribution.  \n  \n The property function `densities()` returns a `vector<RealType>` with the stored densities for each interval set, which are calculated according to the weights provided in the constructor parameters.  \n  \n For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md).  \n  \n## Example  \n  \n```cpp  \n// compile with: /EHsc /W4  \n#include <random>   \n#include <iostream>  \n#include <iomanip>  \n#include <string>  \n#include <map>  \n  \nusing namespace std;  \n  \nvoid test(const int s) {  \n  \n    // uncomment to use a non-deterministic generator  \n    // random_device rd;  \n    // mt19937 gen(rd());  \n    mt19937 gen(1701);  \n  \n    // Three intervals, non-uniform: 0 to 1, 1 to 6, and 6 to 15  \n    vector<double> intervals{ 0, 1, 6, 15 };  \n    // weights determine the densities used by the distribution  \n    vector<double> weights{ 1, 5, 10 };  \n  \n    piecewise_constant_distribution<double> distr(intervals.begin(), intervals.end(), weights.begin());  \n  \n    cout << endl;  \n    cout << \"min() == \" << distr.min() << endl;  \n    cout << \"max() == \" << distr.max() << endl;  \n    cout << \"intervals (index: interval):\" << endl;  \n    vector<double> i = distr.intervals();  \n    int counter = 0;  \n    for (const auto& n : i) {  \n        cout << fixed << setw(11) << counter << \": \" << setw(14) << setprecision(10) << n << endl;  \n        ++counter;  \n    }  \n    cout << endl;  \n    cout << \"densities (index: density):\" << endl;  \n    vector<double> d = distr.densities();  \n    counter = 0;  \n    for (const auto& n : d) {  \n        cout << fixed << setw(11) << counter << \": \" << setw(14) << setprecision(10) << n << endl;  \n        ++counter;  \n    }  \n    cout << endl;  \n  \n    // generate the distribution as a histogram  \n    map<int, int> histogram;  \n    for (int i = 0; i < s; ++i) {  \n        ++histogram[distr(gen)];  \n    }  \n  \n    // print results  \n    cout << \"Distribution for \" << s << \" samples:\" << endl;  \n    for (const auto& elem : histogram) {  \n        cout << setw(5) << elem.first << '-' << elem.first+1 << ' ' << string(elem.second, ':') << endl;  \n    }  \n    cout << endl;  \n}  \n  \nint main()  \n{  \n    int samples = 100;  \n  \n    cout << \"Use CTRL-Z to bypass data entry and run using default values.\" << endl;  \n    cout << \"Enter an integer value for the sample count: \";  \n    cin >> samples;  \n  \n    test(samples);  \n}  \n  \n```  \n  \n## Output  \n  \n```Output  \nUse CTRL-Z to bypass data entry and run using default values.Enter an integer value for the sample count: 100min() == 0max() == 15intervals (index: interval):          0:   0.0000000000          1:   1.0000000000          2:   6.0000000000          3:  15.0000000000densities (index: density):          0:   0.0625000000          1:   0.0625000000          2:   0.0694444444Distribution for 100 samples:    0-1 :::::::    1-2 ::::::    2-3 :::::    3-4 ::::::    4-5 :::::::    5-6 ::::::    6-7 :::    7-8 ::::::::::    8-9 ::::::    9-10 ::::::::::::   10-11 :::::   11-12 ::::::   12-13 :::::::::   13-14 ::::   14-15 ::::::::  \n```  \n  \n## Requirements  \n **Header:** \\<random>  \n  \n **Namespace:** std  \n  \n##  <a name=\"piecewise_constant_distribution__piecewise_constant_distribution\"></a>  piecewise_constant_distribution::piecewise_constant_distribution  \n Constructs the distribution.  \n  \n```  \n \n// default constructor  \npiecewise_constant_distribution();\n\n \n// constructs using a range of intervals, [firstI, lastI), with  \n// matching weights starting at firstW  \ntemplate <class InputIteratorI, class InputIteratorW>  \npiecewise_constant_distribution(InputIteratorI firstI, InputIteratorI lastI, InputIteratorW firstW);\n\n \n// constructs using an initializer list for range of intervals,  \n// with weights generated by function weightfunc  \ntemplate <class UnaryOperation>  \npiecewise_constant_distribution(initializer_list<RealType>  \nintervals, UnaryOperation weightfunc);\n\n \n// constructs using an initializer list for range of count intervals,  \n// distributed uniformly over [xmin,xmax] with weights generated by function weightfunc  \ntemplate <class UnaryOperation>  \npiecewise_constant_distribution(size_t count, RealType xmin, RealType xmax, UnaryOperation weightfunc);\n\n \n// constructs from an existing param_type structure  \nexplicit piecewise_constant_distribution(const param_type& parm);\n```  \n  \n### Parameters  \n `firstI`  \n An input iterator of the first element in the distribution range.  \n  \n `lastI`  \n An input iterator of the last element in the distribution range.  \n  \n `firstW`  \n An input iterator of the first element in the weights range.  \n  \n `intervals`  \n An [initializer_list](../cpp/initializers.md) with the intervals of the distribution.  \n  \n `count`  \n The number of elements in the distribution range.  \n  \n `xmin`  \n The lowest value in the distribution range.  \n  \n `xmax`  \n The highest value in the distribution range. Must be greater than `xmin`.  \n  \n `weightfunc`  \n The object representing the probability function for the distribution. Both the parameter and the return value must be convertible to `double`.  \n  \n `parm`  \n The parameter structure used to construct the distribution.  \n  \n### Remarks  \n The default constructor sets the stored parameters such that there is one interval, 0 to 1, with a probability density of 1.  \n  \n The iterator range constructor  \n  \n```  \ntemplate <class InputIteratorI, class InputIteratorW>  \npiecewise_constant_distribution(InputIteratorI firstI, InputIteratorI lastI,  \n    InputIteratorW firstW);\n```  \n  \n constructs a distribution object with itnervals from iterators over the sequence [ `firstI`, `lastI`) and a matching weight sequence starting at `firstW`.  \n  \n The initializer list constructor  \n  \n```  \ntemplate <class UnaryOperation>  \npiecewise_constant_distribution(initializer_list<RealType>  \nintervals,   \n    UnaryOperation weightfunc);\n```  \n  \n constructs a distribution object with intervals from the intializer list `intervals` and weights generated from the function `weightfunc`.  \n  \n The constructor defined as  \n  \n```  \ntemplate <class UnaryOperation>  \npiecewise_constant_distribution(size_t count, RealType xmin, RealType xmax,  \n    UnaryOperation weightfunc);\n```  \n  \n constructs a distribution object with `count` intervals distributed uniformly over [ `xmin,xmax`], assigning each interval weights according to the function `weightfunc`, and `weightfunc` must accept one parameter and have a return value, both of which are convertible to `double`. **Precondition:**`xmin < xmax`  \n  \n The constructor defined as  \n  \n```  \nexplicit piecewise_constant_distribution(const param_type& parm);\n```  \n  \n constructs a distribution object using `parm` as the stored parameter structure.  \n  \n##  <a name=\"piecewise_constant_distribution__param_type\"></a>  piecewise_constant_distribution::param_type  \n Stores all the parameters of the distribution.  \n```cpp    \nstruct param_type {  \n   typedef piecewise_constant_distribution<RealType> distribution_type;  \n   param_type();\n   template <class IterI, class IterW>  \n   param_type(IterI firstI, IterI lastI, IterW firstW);\n   template <class UnaryOperation>  \n   param_type(size_t count, RealType xmin, RealType xmax,   \n   UnaryOperation weightfunc);\n   std::vector<RealType>  \n   densities() const;\n   std::vector<RealType> intervals() const;\n   .....  \n   bool operator==(const param_type& right) const;\n   bool operator!=(const param_type& right) const;\n   };  \n```  \n### Parameters  \n See parent topic [piecewise_constant_distribution Class](../standard-library/piecewise-constant-distribution-class.md).  \n  \n### Remarks  \n **Precondition:** `xmin < xmax`  \n  \n This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters.  \n  \n## See Also  \n [\\<random>](../standard-library/random.md)   \n [piecewise_linear_distribution](../standard-library/piecewise-linear-distribution-class.md)\n\n\n"}