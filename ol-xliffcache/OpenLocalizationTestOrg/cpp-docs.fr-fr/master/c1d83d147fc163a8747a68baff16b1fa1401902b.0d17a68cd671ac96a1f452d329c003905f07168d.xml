{"nodes":[{"pos":[12,49],"content":"max_fixed_size Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"max_fixed_size Class | Microsoft Docs","pos":[0,37]}]},{"pos":[711,731],"content":"max_fixed_size Class","linkify":"max_fixed_size Class","nodes":[{"content":"max_fixed_size Class","pos":[0,20]}]},{"pos":[732,902],"content":"Describes a <bpt id=\"p1\">[</bpt>max class<ept id=\"p1\">](../standard-library/allocators-header.md)</ept> object that limits a <bpt id=\"p2\">[</bpt>freelist<ept id=\"p2\">](../standard-library/freelist-class.md)</ept> object to a fixed maximum length.","source":"Describes a [max class](../standard-library/allocators-header.md) object that limits a [freelist](../standard-library/freelist-class.md) object to a fixed maximum length."},{"pos":[911,917],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[991,1001],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[1008,1017]},{"content":"Description","pos":[1018,1029]},{"pos":[1078,1166],"content":"The max class that determines the maximum number of elements to store in the <ph id=\"ph1\">`freelist`</ph>.","source":"The max class that determines the maximum number of elements to store in the `freelist`."},{"pos":[1177,1189],"content":"Constructors","linkify":"Constructors","nodes":[{"content":"Constructors","pos":[0,12]}]},{"pos":[1210,1259],"content":"<bpt id=\"p1\">[</bpt>max_fixed_size<ept id=\"p1\">](#max_fixed_size__max_fixed_size)</ept>","source":"[max_fixed_size](#max_fixed_size__max_fixed_size)"},{"pos":[1260,1306],"content":"Constructs an object of type <ph id=\"ph1\">`max_fixed_size`</ph>.","source":"Constructs an object of type `max_fixed_size`."},{"pos":[1317,1333],"content":"Member Functions","linkify":"Member Functions","nodes":[{"content":"Member Functions","pos":[0,16]}]},{"pos":[1354,1393],"content":"<bpt id=\"p1\">[</bpt>allocated<ept id=\"p1\">](#max_fixed_size__allocated)</ept>","source":"[allocated](#max_fixed_size__allocated)"},{"content":"Increments the count of allocated memory blocks.","pos":[1394,1442]},{"pos":[1447,1490],"content":"<bpt id=\"p1\">[</bpt>deallocated<ept id=\"p1\">](#max_fixed_size__deallocated)</ept>","source":"[deallocated](#max_fixed_size__deallocated)"},{"content":"Decrements the count of allocated memory blocks.","pos":[1491,1539]},{"pos":[1544,1573],"content":"<bpt id=\"p1\">[</bpt>full<ept id=\"p1\">](#max_fixed_size__full)</ept>","source":"[full](#max_fixed_size__full)"},{"content":"Returns a value that specifies whether more memory blocks should be added to the free list.","pos":[1574,1665]},{"pos":[1670,1707],"content":"<bpt id=\"p1\">[</bpt>released<ept id=\"p1\">](#max_fixed_size__released)</ept>","source":"[released](#max_fixed_size__released)"},{"content":"Decrements the count of memory blocks on the free list.","pos":[1708,1763]},{"pos":[1768,1799],"content":"<bpt id=\"p1\">[</bpt>saved<ept id=\"p1\">](#max_fixed_size__saved)</ept>","source":"[saved](#max_fixed_size__saved)"},{"content":"Increments the count of memory blocks on the free list.","pos":[1800,1855]},{"pos":[1865,1877],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1881,1906],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>allocators&gt;","source":"**Header:** \\<allocators>"},{"pos":[1913,1934],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> stdext","source":"**Namespace:** stdext"},{"pos":[1944,2011],"content":"<bpt id=\"p1\">&lt;a name=\"max_fixed_size__allocated\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  max_fixed_size::allocated","linkify":"<a name=\"max_fixed_size__allocated\"></a>  max_fixed_size::allocated","source":"<a name=\"max_fixed_size__allocated\"></a>  max_fixed_size::allocated"},{"content":"Increments the count of allocated memory blocks.","pos":[2015,2063]},{"pos":[2123,2133],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[2140,2149]},{"content":"Description","pos":[2150,2161]},{"content":"The increment value.","pos":[2210,2230]},{"pos":[2241,2248],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The member function does nothing.","pos":[2252,2285]},{"content":"This member function is called after each successful call by <ph id=\"ph1\">`cache_freelist::allocate`</ph> to operator <ph id=\"ph2\">`new`</ph>.","pos":[2286,2392],"source":" This member function is called after each successful call by `cache_freelist::allocate` to operator `new`."},{"content":"The argument <ph id=\"ph1\">`_Nx`</ph> is the number of memory blocks in the chunk allocated by operator <ph id=\"ph2\">`new`</ph>.","pos":[2393,2484],"source":" The argument `_Nx` is the number of memory blocks in the chunk allocated by operator `new`."},{"pos":[2494,2565],"content":"<bpt id=\"p1\">&lt;a name=\"max_fixed_size__deallocated\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  max_fixed_size::deallocated","linkify":"<a name=\"max_fixed_size__deallocated\"></a>  max_fixed_size::deallocated","source":"<a name=\"max_fixed_size__deallocated\"></a>  max_fixed_size::deallocated"},{"content":"Decrements the count of allocated memory blocks.","pos":[2569,2617]},{"pos":[2679,2689],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[2696,2705]},{"content":"Description","pos":[2706,2717]},{"content":"The increment value.","pos":[2766,2786]},{"pos":[2797,2804],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The member function does nothing.","pos":[2808,2841]},{"content":"This member function is called after each call by <ph id=\"ph1\">`cache_freelist::deallocate`</ph> to operator <ph id=\"ph2\">`delete`</ph>.","pos":[2842,2942],"source":" This member function is called after each call by `cache_freelist::deallocate` to operator `delete`."},{"content":"The argument <ph id=\"ph1\">`_Nx`</ph> is the number of memory blocks in the chunk deallocated by operator <ph id=\"ph2\">`delete`</ph>.","pos":[2943,3039],"source":" The argument `_Nx` is the number of memory blocks in the chunk deallocated by operator `delete`."},{"pos":[3049,3106],"content":"<bpt id=\"p1\">&lt;a name=\"max_fixed_size__full\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  max_fixed_size::full","linkify":"<a name=\"max_fixed_size__full\"></a>  max_fixed_size::full","source":"<a name=\"max_fixed_size__full\"></a>  max_fixed_size::full"},{"content":"Returns a value that specifies whether more memory blocks should be added to the free list.","pos":[3110,3201]},{"pos":[3237,3249],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3253,3301],"content":"<ph id=\"ph1\">`true`</ph> if <ph id=\"ph2\">`Max &lt;= _Nblocks`</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if `Max <= _Nblocks`; otherwise, `false`."},{"pos":[3311,3318],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This member function is called by <ph id=\"ph1\">`cache_freelist::deallocate`</ph>.","pos":[3322,3385],"source":"This member function is called by `cache_freelist::deallocate`."},{"content":"If the call returns <ph id=\"ph1\">`true`</ph>, <ph id=\"ph2\">`deallocate`</ph> puts the memory block on the free list; if it returns false, <ph id=\"ph3\">`deallocate`</ph> calls operator <ph id=\"ph4\">`delete`</ph> to deallocate the block.","pos":[3386,3549],"source":" If the call returns `true`, `deallocate` puts the memory block on the free list; if it returns false, `deallocate` calls operator `delete` to deallocate the block."},{"pos":[3559,3636],"content":"<bpt id=\"p1\">&lt;a name=\"max_fixed_size__max_fixed_size\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  max_fixed_size::max_fixed_size","linkify":"<a name=\"max_fixed_size__max_fixed_size\"></a>  max_fixed_size::max_fixed_size","source":"<a name=\"max_fixed_size__max_fixed_size\"></a>  max_fixed_size::max_fixed_size"},{"pos":[3640,3686],"content":"Constructs an object of type <ph id=\"ph1\">`max_fixed_size`</ph>.","source":"Constructs an object of type `max_fixed_size`."},{"pos":[3727,3734],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3738,3803],"content":"This constructor initializes the stored value <ph id=\"ph1\">`_Nblocks`</ph> to zero.","source":"This constructor initializes the stored value `_Nblocks` to zero."},{"pos":[3813,3878],"content":"<bpt id=\"p1\">&lt;a name=\"max_fixed_size__released\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  max_fixed_size::released","linkify":"<a name=\"max_fixed_size__released\"></a>  max_fixed_size::released","source":"<a name=\"max_fixed_size__released\"></a>  max_fixed_size::released"},{"content":"Decrements the count of memory blocks on the free list.","pos":[3882,3937]},{"pos":[3977,3984],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Decrements the stored value <ph id=\"ph1\">`_Nblocks`</ph>.","pos":[3988,4027],"source":"Decrements the stored value `_Nblocks`."},{"content":"The <ph id=\"ph1\">`released`</ph> member function of the current <bpt id=\"p1\">[</bpt>max class<ept id=\"p1\">](../standard-library/allocators-header.md)</ept> is called by <ph id=\"ph2\">`cache_freelist::allocate`</ph> whenever it removes a memory block from the free list.","pos":[4028,4222],"source":" The `released` member function of the current [max class](../standard-library/allocators-header.md) is called by `cache_freelist::allocate` whenever it removes a memory block from the free list."},{"pos":[4232,4291],"content":"<bpt id=\"p1\">&lt;a name=\"max_fixed_size__saved\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  max_fixed_size::saved","linkify":"<a name=\"max_fixed_size__saved\"></a>  max_fixed_size::saved","source":"<a name=\"max_fixed_size__saved\"></a>  max_fixed_size::saved"},{"content":"Increments the count of memory blocks on the free list.","pos":[4295,4350]},{"pos":[4387,4394],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This member function increments the stored value <ph id=\"ph1\">`_Nblocks`</ph>.","pos":[4398,4458],"source":"This member function increments the stored value `_Nblocks`."},{"content":"This member function is called by <ph id=\"ph1\">`cache_freelist::deallocate`</ph> whenever it puts a memory block on the free list.","pos":[4459,4571],"source":" This member function is called by `cache_freelist::deallocate` whenever it puts a memory block on the free list."},{"pos":[4580,4588],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[4592,4649],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>allocators&gt;<ept id=\"p1\">](../standard-library/allocators-header.md)</ept>","source":"[\\<allocators>](../standard-library/allocators-header.md)"}],"content":"---\ntitle: \"max_fixed_size Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"allocators/stdext::max_fixed_size\"\n  - \"max_fixed_size\"\n  - \"stdext::max_fixed_size\"\n  - \"stdext.max_fixed_size\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"max_fixed_size class\"\nms.assetid: 8c8f4588-37e9-4579-8168-ba3553800914\ncaps.latest.revision: 18\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# max_fixed_size Class\nDescribes a [max class](../standard-library/allocators-header.md) object that limits a [freelist](../standard-library/freelist-class.md) object to a fixed maximum length.  \n  \n## Syntax  \n  \n```\ntemplate <std::size_t Max>  \nclass max_fixed_size\n```  \n  \n#### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`Max`|The max class that determines the maximum number of elements to store in the `freelist`.|  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[max_fixed_size](#max_fixed_size__max_fixed_size)|Constructs an object of type `max_fixed_size`.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[allocated](#max_fixed_size__allocated)|Increments the count of allocated memory blocks.|  \n|[deallocated](#max_fixed_size__deallocated)|Decrements the count of allocated memory blocks.|  \n|[full](#max_fixed_size__full)|Returns a value that specifies whether more memory blocks should be added to the free list.|  \n|[released](#max_fixed_size__released)|Decrements the count of memory blocks on the free list.|  \n|[saved](#max_fixed_size__saved)|Increments the count of memory blocks on the free list.|  \n  \n## Requirements  \n **Header:** \\<allocators>  \n  \n **Namespace:** stdext  \n  \n##  <a name=\"max_fixed_size__allocated\"></a>  max_fixed_size::allocated  \n Increments the count of allocated memory blocks.  \n  \n```\nvoid allocated(std::size_t _Nx = 1);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`_Nx`|The increment value.|  \n  \n### Remarks  \n The member function does nothing. This member function is called after each successful call by `cache_freelist::allocate` to operator `new`. The argument `_Nx` is the number of memory blocks in the chunk allocated by operator `new`.  \n  \n##  <a name=\"max_fixed_size__deallocated\"></a>  max_fixed_size::deallocated  \n Decrements the count of allocated memory blocks.  \n  \n```\nvoid deallocated(std::size_t _Nx = 1);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`_Nx`|The increment value.|  \n  \n### Remarks  \n The member function does nothing. This member function is called after each call by `cache_freelist::deallocate` to operator `delete`. The argument `_Nx` is the number of memory blocks in the chunk deallocated by operator `delete`.  \n  \n##  <a name=\"max_fixed_size__full\"></a>  max_fixed_size::full  \n Returns a value that specifies whether more memory blocks should be added to the free list.  \n  \n```\nbool full();\n```  \n  \n### Return Value  \n `true` if `Max <= _Nblocks`; otherwise, `false`.  \n  \n### Remarks  \n This member function is called by `cache_freelist::deallocate`. If the call returns `true`, `deallocate` puts the memory block on the free list; if it returns false, `deallocate` calls operator `delete` to deallocate the block.  \n  \n##  <a name=\"max_fixed_size__max_fixed_size\"></a>  max_fixed_size::max_fixed_size  \n Constructs an object of type `max_fixed_size`.  \n  \n```\nmax_fixed_size();\n```  \n  \n### Remarks  \n This constructor initializes the stored value `_Nblocks` to zero.  \n  \n##  <a name=\"max_fixed_size__released\"></a>  max_fixed_size::released  \n Decrements the count of memory blocks on the free list.  \n  \n```\nvoid released();\n```  \n  \n### Remarks  \n Decrements the stored value `_Nblocks`. The `released` member function of the current [max class](../standard-library/allocators-header.md) is called by `cache_freelist::allocate` whenever it removes a memory block from the free list.  \n  \n##  <a name=\"max_fixed_size__saved\"></a>  max_fixed_size::saved  \n Increments the count of memory blocks on the free list.  \n  \n```\nvoid saved();\n```  \n  \n### Remarks  \n This member function increments the stored value `_Nblocks`. This member function is called by `cache_freelist::deallocate` whenever it puts a memory block on the free list.  \n  \n## See Also  \n [\\<allocators>](../standard-library/allocators-header.md)\n\n\n\n"}