{"nodes":[{"pos":[12,46],"content":"CMFCToolBar Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMFCToolBar Class | Microsoft Docs","pos":[0,34]}]},{"content":"CMFCToolBar Class","pos":[607,624]},{"content":"The <ph id=\"ph1\">`CMFCToolBar`</ph> class resembles <bpt id=\"p1\">[</bpt>CToolBar Class<ept id=\"p1\">](../../mfc/reference/ctoolbar-class.md)</ept>, but provides additional support for user interface features.","pos":[625,776],"source":"The `CMFCToolBar` class resembles [CToolBar Class](../../mfc/reference/ctoolbar-class.md), but provides additional support for user interface features."},{"content":"These include flat toolbars, toolbars with hot images, large icons, pager buttons, locked toolbars, rebar controls, text under images, background images, and tabbed toolbars.","pos":[777,951]},{"content":"The <ph id=\"ph1\">`CMFCToolBar`</ph> class also contains built-in support for user customization of toolbars and menus, drag-and-drop between toolbars and menus, combo box buttons, edit box buttons, color pickers, and roll-up buttons.","pos":[952,1167],"source":" The `CMFCToolBar` class also contains built-in support for user customization of toolbars and menus, drag-and-drop between toolbars and menus, combo box buttons, edit box buttons, color pickers, and roll-up buttons."},{"content":"Syntax","pos":[1176,1182]},{"content":"Members","pos":[1251,1258]},{"content":"Public Constructors","pos":[1268,1287]},{"content":"Name","pos":[1294,1298]},{"content":"Description","pos":[1299,1310]},{"content":"Default constructor.","pos":[1375,1395]},{"content":"Destructor.","pos":[1428,1439]},{"content":"Public Methods","pos":[1450,1464]},{"content":"Name","pos":[1471,1475]},{"content":"Description","pos":[1476,1487]},{"content":"CMFCToolBar::AddBasicCommand","pos":[1526,1554]},{"content":"Adds a menu command to the list of commands that are always displayed when a user opens a menu.","pos":[1587,1682]},{"content":"CMFCToolBar::AddCommandUsage","pos":[1688,1716]},{"content":"Increments by one the counter that is associated with the given command.","pos":[1749,1821]},{"content":"CMFCToolBar::AddToolBarForImageCollection","pos":[1827,1868]},{"content":"Adds images from the user interface resources to the collection of images in the application.","pos":[1914,2007]},{"content":"CMFCToolBar::AdjustLayout","pos":[2013,2038]},{"content":"Recalculates the size and position of a toolbar.","pos":[2068,2116]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CBasePane::AdjustLayout<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__adjustlayout)</ept>).","pos":[2117,2219],"source":" (Overrides [CBasePane::AdjustLayout](../../mfc/reference/cbasepane-class.md#cbasepane__adjustlayout))."},{"content":"CMFCToolBar::AdjustSize","pos":[2225,2248]},{"content":"Recalculates the size of the toolbar.","pos":[2276,2313]},{"content":"CMFCToolBar::AllowChangeTextLabels","pos":[2319,2353]},{"content":"Specifies whether text labels can be shown under images on the toolbar buttons.","pos":[2392,2471]},{"content":"CMFCToolBar::AreTextLabels","pos":[2477,2503]},{"content":"Specifies whether text labels under images are currently displayed on the toolbar buttons.","pos":[2534,2624]},{"content":"CMFCToolBar::AutoGrayInactiveImages","pos":[2630,2665]},{"content":"Enable or disables the automatic generation of inactive button images.","pos":[2705,2775]},{"content":"CMFCToolBar::ButtonToIndex","pos":[2781,2807]},{"pos":[2838,2968],"content":"Returns the index of a specified <bpt id=\"p1\">[</bpt>CMFCToolBarButton Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept> object in this toolbar.","source":"Returns the index of a specified [CMFCToolBarButton Class](../../mfc/reference/cmfctoolbarbutton-class.md) object in this toolbar."},{"content":"CMFCToolBar::CalcFixedLayout","pos":[2974,3002]},{"content":"Calculates the horizontal size of the toolbar.","pos":[3035,3081]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CBasePane::CalcFixedLayout<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__calcfixedlayout)</ept>.)","pos":[3082,3190],"source":" (Overrides [CBasePane::CalcFixedLayout](../../mfc/reference/cbasepane-class.md#cbasepane__calcfixedlayout).)"},{"content":"CMFCToolBar::CalcSize","pos":[3196,3217]},{"content":"Called by the framework as part of the layout calculation process.","pos":[3243,3309]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPane::CalcSize<ept id=\"p1\">](../../mfc/reference/cpane-class.md#cpane__calcsize)</ept>.)","pos":[3310,3392],"source":" (Overrides [CPane::CalcSize](../../mfc/reference/cpane-class.md#cpane__calcsize).)"},{"content":"CMFCToolBar::CanHandleSiblings","pos":[3398,3428]},{"content":"Determines whether the toolbar and its sibling are positioned on the same pane.","pos":[3463,3542]},{"content":"CMFCToolBar::CleanUpImages","pos":[3548,3574]},{"content":"Frees the system resources allocated for toolbar images.","pos":[3605,3661]},{"content":"CMFCToolBar::CleanUpLockedImages","pos":[3667,3699]},{"content":"Frees the system resources allocated for locked toolbar images.","pos":[3736,3799]},{"content":"CMFCToolBar::CanBeClosed","pos":[3805,3829]},{"content":"Specifies whether a user can close the toolbar.","pos":[3858,3905]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CBasePane::CanBeClosed<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__canbeclosed)</ept>.)","pos":[3906,4006],"source":" (Overrides [CBasePane::CanBeClosed](../../mfc/reference/cbasepane-class.md#cbasepane__canbeclosed).)"},{"content":"CMFCToolBar::CanBeRestored","pos":[4012,4038]},{"content":"Determines whether the system can restore a toolbar to its original state after customization.","pos":[4069,4163]},{"content":"CMFCToolBar::CanFocus","pos":[4169,4190]},{"content":"Specifies whether the pane can receive focus.","pos":[4216,4261]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CBasePane::CanFocus<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__canfocus)</ept>.)","pos":[4262,4356],"source":" (Overrides [CBasePane::CanFocus](../../mfc/reference/cbasepane-class.md#cbasepane__canfocus).)"},{"content":"CMFCToolBar::CanHandleSiblings","pos":[4362,4392]},{"content":"Determines whether the toolbar and its sibling are positioned on the same pane.","pos":[4427,4506]},{"content":"CMFCToolBar::CommandToIndex","pos":[4512,4539]},{"content":"Returns the index of the button in the toolbar with a specified command ID.","pos":[4571,4646]},{"content":"CMFCToolBar::Create","pos":[4652,4671]},{"pos":[4695,4726],"content":"Creates a <ph id=\"ph1\">`CMFCToolBar`</ph> object.","source":"Creates a `CMFCToolBar` object."},{"content":"CMFCToolBar::CreateEx","pos":[4732,4753]},{"pos":[4779,4866],"content":"Creates a <ph id=\"ph1\">`CMFCToolBar`</ph> object that uses additional style options, such as large icons.","source":"Creates a `CMFCToolBar` object that uses additional style options, such as large icons."},{"content":"CMFCToolBar::Deactivate","pos":[4872,4895]},{"content":"Deactivates the toolbar.","pos":[4923,4947]},{"content":"CMFCToolBar::EnableCustomizeButton","pos":[4953,4987]},{"pos":[5026,5122],"content":"Enables or disables the <bpt id=\"p1\">**</bpt>Add or Remove Buttons<ept id=\"p1\">**</ept> button that appears on the end of the toolbar.","source":"Enables or disables the **Add or Remove Buttons** button that appears on the end of the toolbar."},{"content":"CMFCToolBar::EnableDocking","pos":[5128,5154]},{"content":"Enables docking of the pane to the main frame.","pos":[5185,5231]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CBasePane::EnableDocking<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__enabledocking)</ept>.)","pos":[5232,5336],"source":" (Overrides [CBasePane::EnableDocking](../../mfc/reference/cbasepane-class.md#cbasepane__enabledocking).)"},{"content":"CMFCToolBar::EnableLargeIcons","pos":[5342,5371]},{"content":"Enables or disables large icons on toolbar buttons.","pos":[5405,5456]},{"content":"CMFCToolBar::EnableQuickCustomization","pos":[5462,5499]},{"pos":[5541,5676],"content":"Enables or disables the quick customization of toolbars so that the user can press the <bpt id=\"p1\">**</bpt>Alt<ept id=\"p1\">**</ept> key and drag a button to a new location.","source":"Enables or disables the quick customization of toolbars so that the user can press the **Alt** key and drag a button to a new location."},{"content":"CMFCToolBar::EnableReflections","pos":[5682,5712]},{"content":"Enables or disables command reflection.","pos":[5747,5786]},{"content":"CMFCToolBar::EnableTextLabels","pos":[5792,5821]},{"content":"Enables or disables text labels under toolbar button images.","pos":[5855,5915]},{"content":"CMFCToolBar::FromHandlePermanent","pos":[5921,5953]},{"pos":[5990,6076],"content":"Retrieves a pointer to the <ph id=\"ph1\">`CMFCToolBar`</ph> object that contains the given window handle.","source":"Retrieves a pointer to the `CMFCToolBar` object that contains the given window handle."},{"content":"CMFCToolBar::GetAllButtons","pos":[6082,6108]},{"content":"Returns a read-only list of buttons in a toolbar.","pos":[6139,6188]},{"content":"CMFCToolBar::GetAllToolbars","pos":[6194,6221]},{"content":"Returns a read-only list of all toolbars in the application.","pos":[6253,6313]},{"content":"CMFCToolBar::GetBasicCommands","pos":[6319,6348]},{"content":"Returns a read-only list of the basic commands defined in the application.","pos":[6382,6456]},{"content":"CMFCToolBar::GetButton","pos":[6462,6484]},{"pos":[6511,6605],"content":"Returns a pointer to the <ph id=\"ph1\">`CMFCToolBarButton`</ph> object that has a specified toolbar button index.","source":"Returns a pointer to the `CMFCToolBarButton` object that has a specified toolbar button index."},{"content":"CMFCToolBar::GetButtonInfo","pos":[6611,6637]},{"content":"Returns the command ID, style, and image index of the button at a specified index.","pos":[6668,6750]},{"content":"CMFCToolBar::GetButtonSize","pos":[6756,6782]},{"content":"Returns the dimensions of each button on the toolbar.","pos":[6813,6866]},{"content":"CMFCToolBar::GetButtonStyle","pos":[6872,6899]},{"content":"Returns the current style of the toolbar button that is located at the specified index.","pos":[6931,7018]},{"content":"CMFCToolBar::GetButtonText","pos":[7024,7050]},{"content":"Returns the text label of a button that has a specified index.","pos":[7081,7143]},{"content":"CMFCToolBar::GetColdImages","pos":[7149,7175]},{"content":"Returns a pointer to the collection of cold toolbar button images in the application.","pos":[7206,7291]},{"content":"CMFCToolBar::GetColumnWidth","pos":[7297,7324]},{"content":"Returns the width of the toolbar buttons.","pos":[7356,7397]},{"content":"CMFCToolBar::GetCommandButtons","pos":[7403,7433]},{"content":"Returns a list of buttons that have a specified command ID from all toolbars in the application.","pos":[7468,7564]},{"content":"CMFCToolBar::GetCount","pos":[7570,7591]},{"content":"Returns the number of buttons and separators on the toolbar.","pos":[7617,7677]},{"content":"CMFCToolBar::GetCustomizeButton","pos":[7683,7714]},{"pos":[7750,7842],"content":"Retrieves a pointer to the <ph id=\"ph1\">`CMFCCustomizeButton`</ph> object that is associated with the toolbar.","source":"Retrieves a pointer to the `CMFCCustomizeButton` object that is associated with the toolbar."},{"content":"CMFCToolBar::GetDefaultImage","pos":[7848,7876]},{"content":"Returns the index of the default image for a toolbar button with a specified command ID.","pos":[7909,7997]},{"content":"CMFCToolBar::GetDisabledImages","pos":[8003,8033]},{"content":"Returns a pointer to the collection of images that are used for disabled toolbar buttons in the application.","pos":[8068,8176]},{"content":"CMFCToolBar::GetDisabledMenuImages","pos":[8182,8216]},{"content":"Returns a pointer to the collection of images that are used for disabled menu buttons in the application.","pos":[8255,8360]},{"content":"CMFCToolBar::GetDroppedDownMenu","pos":[8366,8397]},{"content":"Retrieves a pointer to the menu button object that is currently displaying its sub-menu.","pos":[8433,8521]},{"content":"CMFCToolBar::GetGrayDisabledButtons","pos":[8527,8562]},{"content":"Specifies whether the images of disabled buttons are dimmed versions of the regular button images, or taken from the collection of disabled button images.","pos":[8602,8756]},{"content":"CMFCToolBar::GetHighlightedButton","pos":[8762,8795]},{"content":"Returns a pointer to the toolbar button that is currently highlighted.","pos":[8833,8903]},{"content":"CMFCToolBar::GetHotBorder","pos":[8909,8934]},{"content":"Determines whether the toolbar buttons are hot-tracked.","pos":[8964,9019]},{"content":"CMFCToolBar::GetHotTextColor","pos":[9025,9053]},{"content":"Returns the text color of the highlighted toolbar buttons.","pos":[9086,9144]},{"content":"CMFCToolBar::GetHwndLastFocus","pos":[9150,9179]},{"content":"Returns a handle to the window that had the input focus just before the toolbar did.","pos":[9213,9297]},{"content":"CMFCToolBar::GetIgnoreSetText","pos":[9303,9332]},{"content":"Specifies whether calls to set button labels are ignored.","pos":[9366,9423]},{"content":"CMFCToolBar::GetImageSize","pos":[9429,9454]},{"content":"Returns the current size of toolbar button images.","pos":[9484,9534]},{"content":"CMFCToolBar::GetImages","pos":[9540,9562]},{"content":"Returns a pointer to the collection of default button images in the application.","pos":[9589,9669]},{"content":"CMFCToolBar::GetImagesOffset","pos":[9675,9703]},{"content":"Returns the index offset used to find the toolbar button images for this toolbar in the global list of toolbar button images.","pos":[9736,9861]},{"content":"CMFCToolBar::GetInvalidateItemRect","pos":[9867,9901]},{"content":"Retrieves the region of the client area that must be redrawn for the button at the given index.","pos":[9940,10035]},{"content":"CMFCToolBar::GetItemID","pos":[10041,10063]},{"content":"Returns the command ID of the toolbar button at a specified index.","pos":[10090,10156]},{"content":"CMFCToolBar::GetItemRect","pos":[10162,10186]},{"content":"Returns the bounding rectangle of the button at a specified index.","pos":[10215,10281]},{"content":"CMFCToolBar::GetLargeColdImages","pos":[10287,10318]},{"content":"Returns a pointer to the collection of large cold toolbar button images in the application.","pos":[10354,10445]},{"content":"CMFCToolBar::GetLargeDisabledImages","pos":[10451,10486]},{"content":"Returns a pointer to the collection of large disabled toolbar button images in the application.","pos":[10526,10621]},{"content":"CMFCToolBar::GetLargeImages","pos":[10627,10654]},{"content":"Returns a pointer to the collection of large toolbar button images in the application.","pos":[10686,10772]},{"content":"CMFCToolBar::GetLockedColdImages","pos":[10778,10810]},{"content":"Returns a pointer to the collection of locked cold images in the toolbar.","pos":[10847,10920]},{"content":"CMFCToolBar::GetLockedDisabledImages","pos":[10926,10962]},{"content":"Returns a pointer to the collection of locked disabled images in the toolbar.","pos":[11003,11080]},{"content":"CMFCToolBar::GetLockedImages","pos":[11086,11114]},{"content":"Returns a pointer to the collection of locked button images in the toolbar.","pos":[11147,11222]},{"content":"CMFCToolBar::GetLockedImageSize","pos":[11228,11259]},{"content":"Returns the default size of locked toolbar images.","pos":[11295,11345]},{"content":"CMFCToolBar::GetLockedMenuImages","pos":[11351,11383]},{"content":"Returns a pointer to the collection of locked toolbar menu images in the toolbar.","pos":[11420,11501]},{"content":"CMFCToolBar::GetMenuButtonSize","pos":[11507,11537]},{"content":"Returns the size of menu buttons in the application.","pos":[11572,11624]},{"content":"CMFCToolBar::GetMenuImageSize","pos":[11630,11659]},{"content":"Returns the size of menu button images in the application.","pos":[11693,11751]},{"content":"CMFCToolBar::GetMenuImages","pos":[11757,11783]},{"content":"Returns a pointer to the collection of menu button images in the application.","pos":[11814,11891]},{"content":"CMFCToolBar::GetOrigButtons","pos":[11897,11924]},{"content":"Retrieves the collection of non-customized buttons of the toolbar.","pos":[11956,12022]},{"content":"CMFCToolBar::GetOrigResetButtons","pos":[12028,12060]},{"content":"Retrieves the collection of non-customized reset buttons of the toolbar.","pos":[12097,12169]},{"content":"CMFCToolBar::GetResourceID","pos":[12175,12201]},{"content":"Retrieves the resource ID of the toolbar.","pos":[12232,12273]},{"content":"CMFCToolBar::GetRouteCommandsViaFrame","pos":[12279,12316]},{"content":"Determines which object, the parent frame or the owner, sends commands to the toolbar.","pos":[12358,12444]},{"content":"CMFCToolBar::GetRowHeight","pos":[12450,12475]},{"content":"Returns the height of toolbar buttons.","pos":[12505,12543]},{"content":"CMFCToolBar::GetShowTooltips","pos":[12549,12577]},{"content":"Specifies whether tool tips are displayed for toolbar buttons.","pos":[12610,12672]},{"content":"CMFCToolBar::GetSiblingToolBar","pos":[12678,12708]},{"content":"Retrieves the sibling of the toolbar.","pos":[12743,12780]},{"content":"CMFCToolBar::GetUserImages","pos":[12786,12812]},{"content":"Returns a pointer to the collection of user-defined toolbar button images in the application.","pos":[12843,12936]},{"content":"CMFCToolBar::HitTest","pos":[12942,12962]},{"content":"Returns the index of the toolbar button that is located at the specified position.","pos":[12987,13069]},{"content":"CMFCToolBar::InsertButton","pos":[13075,13100]},{"content":"Inserts a button into the toolbar.","pos":[13130,13164]},{"content":"CMFCToolBar::InsertSeparator","pos":[13170,13198]},{"content":"Inserts a separator into the toolbar.","pos":[13231,13268]},{"content":"CMFCToolBar::InvalidateButton","pos":[13274,13303]},{"content":"Invalidates the client area of the toolbar button that exists at the provided index.","pos":[13337,13421]},{"content":"CMFCToolBar::IsAddRemoveQuickCustomize","pos":[13427,13465]},{"pos":[13508,13607],"content":"Determines whether a user can add or remove toolbar buttons by using the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> menu option.","source":"Determines whether a user can add or remove toolbar buttons by using the **Customize** menu option."},{"content":"CMFCToolBar::IsAltCustomizeMode","pos":[13613,13644]},{"pos":[13680,13751],"content":"Specifies whether <bpt id=\"p1\">*</bpt>quick customization<ept id=\"p1\">*</ept> is being used to drag a button.","source":"Specifies whether *quick customization* is being used to drag a button."},{"content":"CMFCToolBar::IsAutoGrayInactiveImages","pos":[13757,13794]},{"content":"Specifies whether the automatic generation of inactive (non-highlighted) button images is enabled.","pos":[13836,13934]},{"content":"CMFCToolBar::IsBasicCommand","pos":[13940,13967]},{"content":"Determines whether a command is on the list of basic commands.","pos":[13999,14061]},{"content":"CMFCToolBar::IsButtonExtraSizeAvailable","pos":[14067,14106]},{"content":"Determines whether the toolbar can display buttons that have extended borders.","pos":[14150,14228]},{"content":"CMFCToolBar::IsButtonHighlighted","pos":[14234,14266]},{"content":"Determines whether a button on the toolbar is highlighted.","pos":[14303,14361]},{"content":"CMFCToolBar::IsCommandPermitted","pos":[14367,14398]},{"content":"Determines whether a command is permitted.","pos":[14434,14476]},{"content":"CMFCToolBar::IsCommandRarelyUsed","pos":[14482,14514]},{"pos":[14551,14677],"content":"Determines whether a command is rarely used (see <bpt id=\"p1\">[</bpt>CMFCToolBar::SetCommandUsageOptions<ept id=\"p1\">](#cmfctoolbar__setcommandusageoptions)</ept>).","source":"Determines whether a command is rarely used (see [CMFCToolBar::SetCommandUsageOptions](#cmfctoolbar__setcommandusageoptions))."},{"content":"CMFCToolBar::IsCustomizeMode","pos":[14683,14711]},{"content":"Specifies whether the toolbar framework is in customization mode.","pos":[14744,14809]},{"content":"CMFCToolBar::IsDragButton","pos":[14815,14840]},{"content":"Determines whether a toolbar button is being dragged.","pos":[14870,14923]},{"content":"CMFCToolBar::IsExistCustomizeButton","pos":[14929,14964]},{"pos":[15004,15069],"content":"Determines whether the toolbar contains the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> button.","source":"Determines whether the toolbar contains the **Customize** button."},{"content":"CMFCToolBar::IsFloating","pos":[15075,15098]},{"content":"Determines whether the toolbar is floating.","pos":[15126,15169]},{"content":"CMFCToolBar::IsLargeIcons","pos":[15175,15200]},{"content":"Specifies whether toolbars in the application currently display large icons.","pos":[15230,15306]},{"content":"CMFCToolBar::IsLastCommandFromButton","pos":[15312,15348]},{"content":"Determines whether the most recently executed command was sent from the specified toolbar button.","pos":[15389,15486]},{"content":"CMFCToolBar::IsLocked","pos":[15492,15513]},{"content":"Determines whether the toolbar is locked.","pos":[15539,15580]},{"content":"CMFCToolBar::IsOneRowWithSibling","pos":[15586,15618]},{"content":"Determines whether the toolbar and its sibling toolbar are positioned on the same row.","pos":[15655,15741]},{"content":"CMFCToolBar::IsUserDefined","pos":[15747,15773]},{"content":"Specifies whether the toolbar is user-defined.","pos":[15804,15850]},{"content":"CMFCToolBar::LoadBitmap","pos":[15856,15879]},{"content":"Loads toolbar images from application resources.","pos":[15907,15955]},{"content":"CMFCToolBar::LoadBitmapEx","pos":[15961,15986]},{"content":"Loads toolbar images from application resources.","pos":[16016,16064]},{"content":"Includes large images.","pos":[16065,16087]},{"content":"CMFCToolBar::LoadParameters","pos":[16093,16120]},{"content":"Loads global toolbar options from the Windows registry.","pos":[16152,16207]},{"content":"CMFCToolBar::LoadState","pos":[16213,16235]},{"content":"Loads the toolbar state information from the Windows registry.","pos":[16262,16324]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPane::LoadState<ept id=\"p1\">](../../mfc/reference/cpane-class.md#cpane__loadstate)</ept>.)","pos":[16325,16409],"source":" (Overrides [CPane::LoadState](../../mfc/reference/cpane-class.md#cpane__loadstate).)"},{"content":"CMFCToolBar::LoadToolBar","pos":[16415,16439]},{"content":"Loads the toolbar from application resources.","pos":[16468,16513]},{"content":"CMFCToolBar::LoadToolBarEx","pos":[16519,16545]},{"pos":[16576,16711],"content":"Loads the toolbar from application resources by using the <ph id=\"ph1\">`CMFCToolBarInfo`</ph> helper class to enable the application to use large images.","source":"Loads the toolbar from application resources by using the `CMFCToolBarInfo` helper class to enable the application to use large images."},{"content":"CMFCToolBar::OnChangeHot","pos":[16717,16741]},{"content":"Called by the framework when a user selects a button on the toolbar.","pos":[16770,16838]},{"content":"CMFCToolBar::OnFillBackground","pos":[16844,16873]},{"pos":[16907,17047],"content":"Called by the framework from <bpt id=\"p1\">[</bpt>CBasePane::DoPaint<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__dopaint)</ept> to fill the toolbar background.","source":"Called by the framework from [CBasePane::DoPaint](../../mfc/reference/cbasepane-class.md#cbasepane__dopaint) to fill the toolbar background."},{"content":"CMFCToolBar::OnReset","pos":[17053,17073]},{"content":"Restores the toolbar to its original state.","pos":[17098,17141]},{"content":"CMFCToolBar::OnSetAccData","pos":[17147,17172]},{"pos":[17202,17304],"content":"(Overrides <bpt id=\"p1\">[</bpt>CBasePane::OnSetAccData<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__onsetaccdata)</ept>.)","source":"(Overrides [CBasePane::OnSetAccData](../../mfc/reference/cbasepane-class.md#cbasepane__onsetaccdata).)"},{"content":"CMFCToolBar::OnSetDefaultButtonText","pos":[17310,17345]},{"content":"Restores the text of a toolbar button to its default state.","pos":[17385,17444]},{"content":"Used internally.","pos":[17478,17494]},{"content":"CMFCToolBar::RemoveAllButtons","pos":[17500,17529]},{"content":"Removes all buttons from the toolbar.","pos":[17563,17600]},{"content":"CMFCToolBar::RemoveButton","pos":[17606,17631]},{"content":"Removes the button with the specified index from the toolbar.","pos":[17661,17722]},{"content":"CMFCToolBar::RemoveStateFromRegistry","pos":[17728,17764]},{"content":"Deletes the state information for the toolbar from the Windows registry.","pos":[17805,17877]},{"content":"CMFCToolBar::ReplaceButton","pos":[17883,17909]},{"content":"Replaces a toolbar button with another toolbar button.","pos":[17940,17994]},{"content":"CMFCToolBar::ResetAll","pos":[18000,18021]},{"content":"Restores all toolbars to their original states.","pos":[18047,18094]},{"content":"CMFCToolBar::ResetAllImages","pos":[18100,18127]},{"content":"Clears all toolbar image collections in the application.","pos":[18159,18215]},{"content":"CMFCToolBar::RestoreOriginalState","pos":[18221,18254]},{"content":"Restores the original state of a toolbar.","pos":[18292,18333]},{"content":"CMFCToolBar::SaveState","pos":[18339,18361]},{"content":"Saves the state information for the toolbar in the Windows registry.","pos":[18388,18456]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPane::SaveState<ept id=\"p1\">](../../mfc/reference/cpane-class.md#cpane__savestate)</ept>.)","pos":[18457,18541],"source":" (Overrides [CPane::SaveState](../../mfc/reference/cpane-class.md#cpane__savestate).)"},{"pos":[18571,18606],"content":"(Overrides <ph id=\"ph1\">`CBasePane::Serialize`</ph>.)","source":"(Overrides `CBasePane::Serialize`.)"},{"content":"CMFCToolBar::SetBasicCommands","pos":[18612,18641]},{"content":"Sets the list of commands that are always displayed when a user opens a menu.","pos":[18675,18752]},{"content":"CMFCToolBar::SetButtonInfo","pos":[18758,18784]},{"content":"Sets the command ID, style, and image ID of a toolbar button.","pos":[18815,18876]},{"content":"CMFCToolBar::SetButtonStyle","pos":[18882,18909]},{"content":"Sets the style of the toolbar button at the given index.","pos":[18941,18997]},{"content":"CMFCToolBar::SetButtonText","pos":[19003,19029]},{"content":"Sets the text label of a toolbar button.","pos":[19060,19100]},{"content":"CMFCToolBar::SetButtons","pos":[19106,19129]},{"content":"Sets the buttons for the toolbar.","pos":[19157,19190]},{"content":"CMFCToolBar::SetCommandUsageOptions","pos":[19196,19231]},{"content":"Specifies when rarely used commands do not appear in the menu of the application.","pos":[19271,19352]},{"content":"CMFCToolBar::SetCustomizeMode","pos":[19358,19387]},{"content":"Enables or disables customization mode for all toolbars in the application.","pos":[19421,19496]},{"content":"CMFCToolBar::SetGrayDisabledButtons","pos":[19502,19537]},{"content":"Specifies whether the disabled buttons on the toolbar are dimmed or if disabled images are used for the disabled buttons.","pos":[19577,19698]},{"content":"CMFCToolBar::SetHeight","pos":[19704,19726]},{"content":"Sets the height of the toolbar.","pos":[19753,19784]},{"content":"CMFCToolBar::SetHotBorder","pos":[19790,19815]},{"content":"Specifies whether toolbar buttons are hot-tracked.","pos":[19845,19895]},{"content":"CMFCToolBar::SetHotTextColor","pos":[19901,19929]},{"content":"Sets the text color for hot toolbar buttons.","pos":[19962,20006]},{"content":"CMFCToolBar::SetLargeIcons","pos":[20012,20038]},{"content":"Specifies whether toolbar buttons display large icons.","pos":[20069,20123]},{"content":"CMFCToolBar::SetLockedSizes","pos":[20129,20156]},{"content":"Sets the sizes of locked buttons and locked images on the toolbar.","pos":[20188,20254]},{"content":"CMFCToolBar::SetMenuSizes","pos":[20260,20285]},{"content":"Sets the size of toolbar menu buttons and their images.","pos":[20315,20370]},{"content":"CMFCToolBar::SetNonPermittedCommands","pos":[20376,20412]},{"content":"Sets the list of commands that cannot be executed by the user.","pos":[20453,20515]},{"content":"CMFCToolBar::SetOneRowWithSibling","pos":[20521,20554]},{"content":"Positions the toolbar and its sibling on the same row.","pos":[20592,20646]},{"content":"CMFCToolBar::SetPermament","pos":[20652,20677]},{"content":"Specifies whether a user can close the toolbar.","pos":[20707,20754]},{"content":"CMFCToolBar::SetRouteCommandsViaFrame","pos":[20760,20797]},{"content":"Specifies whether the parent frame or the owner sends commands to the toolbar.","pos":[20839,20917]},{"content":"CMFCToolBar::SetShowTooltips","pos":[20923,20951]},{"content":"Specifies whether the framework displays tool tips.","pos":[20984,21035]},{"content":"CMFCToolBar::SetSiblingToolBar","pos":[21041,21071]},{"content":"Specifies the sibling of the toolbar.","pos":[21106,21143]},{"content":"CMFCToolBar::SetSizes","pos":[21149,21170]},{"content":"Specifies the sizes of buttons and images on all toolbars.","pos":[21196,21254]},{"content":"CMFCToolBar::SetToolBarBtnText","pos":[21260,21290]},{"content":"Specifies properties of a button on the toolbar.","pos":[21325,21373]},{"content":"CMFCToolBar::SetTwoRowsWithSibling","pos":[21379,21413]},{"content":"Positions the toolbar and its sibling on separate rows.","pos":[21452,21507]},{"content":"CMFCToolBar::SetUserImages","pos":[21513,21539]},{"content":"Sets the collection of user-defined images in the application.","pos":[21570,21632]},{"content":"CMFCToolBar::StretchPane","pos":[21638,21662]},{"content":"Stretches the toolbar vertically or horizontally.","pos":[21691,21740]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CBasePane::StretchPane<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__stretchpane)</ept>.)","pos":[21741,21841],"source":" (Overrides [CBasePane::StretchPane](../../mfc/reference/cbasepane-class.md#cbasepane__stretchpane).)"},{"content":"CMFCToolBar::TranslateChar","pos":[21847,21873]},{"content":"Executes a button command if the specified key code corresponds to a valid keyboard shortcut.","pos":[21904,21997]},{"content":"CMFCToolBar::UpdateButton","pos":[22003,22028]},{"content":"Updates the state of the specified button.","pos":[22058,22100]},{"content":"CMFCToolBar::WrapToolBar","pos":[22106,22130]},{"content":"Repositions toolbar buttons within the given dimensions.","pos":[22159,22215]},{"content":"Protected Methods","pos":[22226,22243]},{"content":"Name","pos":[22250,22254]},{"content":"Description","pos":[22255,22266]},{"content":"CMFCToolBar::AllowShowOnList","pos":[22305,22333]},{"pos":[22366,22479],"content":"Determines whether the toolbar is displayed in the list on the <bpt id=\"p1\">**</bpt>Toolbars<ept id=\"p1\">**</ept> pane of the <bpt id=\"p2\">**</bpt>Customize<ept id=\"p2\">**</ept> dialog box.","source":"Determines whether the toolbar is displayed in the list on the **Toolbars** pane of the **Customize** dialog box."},{"content":"CMFCToolBar::CalcMaxButtonHeight","pos":[22485,22517]},{"content":"Calculates the maximum height of a button in the toolbar.","pos":[22554,22611]},{"content":"CMFCToolBar::DoPaint","pos":[22617,22637]},{"content":"Repaints a toolbar.","pos":[22662,22681]},{"content":"CMFCToolBar::DrawButton","pos":[22687,22710]},{"content":"Repaints a toolbar button.","pos":[22738,22764]},{"content":"CMFCToolBar::DrawSeparator","pos":[22770,22796]},{"content":"Repaints a separator on a toolbar.","pos":[22827,22861]},{"content":"CMFCToolBar::OnUserToolTip","pos":[22867,22893]},{"content":"Called by the framework when the tooltip for a button is about to be displayed.","pos":[22924,23003]},{"content":"Data Members","pos":[23014,23026]},{"content":"Name","pos":[23033,23037]},{"content":"Description","pos":[23038,23049]},{"content":"CMFCToolBar::m_bDontScaleImages","pos":[23088,23119]},{"content":"Specifies whether to scale or not toolbar images in high DPI mode.","pos":[23155,23221]},{"content":"CMFCToolBar::m_dblLargeImageRatio","pos":[23227,23260]},{"content":"Specifies the ratio between the dimension (height or width) of large images and the dimension of regular images.","pos":[23298,23410]},{"content":"Remarks","pos":[23420,23427]},{"pos":[23431,23511],"content":"To incorporate a <ph id=\"ph1\">`CMFCToolBar`</ph> object into your application, follow these steps:","source":"To incorporate a `CMFCToolBar` object into your application, follow these steps:"},{"pos":[23521,23573],"content":"Add a <ph id=\"ph1\">`CMFCToolBar`</ph> object to the main frame window.","source":"Add a `CMFCToolBar` object to the main frame window."},{"pos":[23583,23802],"content":"When you process the <ph id=\"ph1\">`WM_CREATE`</ph> message for the main frame window, call either <bpt id=\"p1\">[</bpt>CMFCToolBar::Create<ept id=\"p1\">](#cmfctoolbar__create)</ept> or <bpt id=\"p2\">[</bpt>CMFCToolBar::CreateEx<ept id=\"p2\">](#cmfctoolbar__createex)</ept> to create the toolbar and specify its style.","source":"When you process the `WM_CREATE` message for the main frame window, call either [CMFCToolBar::Create](#cmfctoolbar__create) or [CMFCToolBar::CreateEx](#cmfctoolbar__createex) to create the toolbar and specify its style."},{"pos":[23812,23938],"content":"Call <bpt id=\"p1\">[</bpt>CBasePane::EnableDocking<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__enabledocking)</ept> to specify the docking style.","source":"Call [CBasePane::EnableDocking](../../mfc/reference/cbasepane-class.md#cbasepane__enabledocking) to specify the docking style."},{"content":"To insert a special button, such as a combo box or drop-down toolbar, reserve a dummy button in the parent resource, and replace the dummy button at runtime by using <bpt id=\"p1\">[</bpt>CMFCToolBar::ReplaceButton<ept id=\"p1\">](#cmfctoolbar__replacebutton)</ept>.","pos":[23945,24169],"source":"To insert a special button, such as a combo box or drop-down toolbar, reserve a dummy button in the parent resource, and replace the dummy button at runtime by using [CMFCToolBar::ReplaceButton](#cmfctoolbar__replacebutton)."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Walkthrough: Putting Controls On Toolbars<ept id=\"p1\">](../walkthrough-putting-controls-on-toolbars.md)</ept>.","pos":[24170,24288],"source":" For more information, see [Walkthrough: Putting Controls On Toolbars](../walkthrough-putting-controls-on-toolbars.md)."},{"pos":[24309,24573],"content":"is the base class for the MFC Library classes <bpt id=\"p1\">[</bpt>CMFCMenuBar Class<ept id=\"p1\">](../../mfc/reference/cmfcmenubar-class.md)</ept>, <bpt id=\"p2\">[</bpt>CMFCPopupMenuBar Class<ept id=\"p2\">](../../mfc/reference/cmfcpopupmenubar-class.md)</ept>, and <bpt id=\"p3\">[</bpt>CMFCDropDownToolBar Class<ept id=\"p3\">](../../mfc/reference/cmfcdropdowntoolbar-class.md)</ept>.","source":" is the base class for the MFC Library classes [CMFCMenuBar Class](../../mfc/reference/cmfcmenubar-class.md), [CMFCPopupMenuBar Class](../../mfc/reference/cmfcpopupmenubar-class.md), and [CMFCDropDownToolBar Class](../../mfc/reference/cmfcdropdowntoolbar-class.md)."},{"content":"Example","pos":[24582,24589]},{"content":"The following example demonstrates how to use various methods in the <ph id=\"ph1\">`CMFCToolBar`</ph> class.","pos":[24593,24682],"source":"The following example demonstrates how to use various methods in the `CMFCToolBar` class."},{"content":"The example shows how to set the text of the window label of the tool bar, set the borders, set the style of the pane, and enable the <bpt id=\"p1\">**</bpt>Add or Remove Buttons<ept id=\"p1\">**</ept> button that appears on the end of the toolbar.","pos":[24683,24889],"source":" The example shows how to set the text of the window label of the tool bar, set the borders, set the style of the pane, and enable the **Add or Remove Buttons** button that appears on the end of the toolbar."},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>IE Demo sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[24890,24969],"source":" This code snippet is part of the [IE Demo sample](../../visual-cpp-samples.md)."},{"content":"NVC_MFC_IEDemo#6","pos":[24987,25003]},{"content":"NVC_MFC_IEDemo#8","pos":[25078,25094]},{"content":"Requirements","pos":[25166,25178]},{"pos":[25182,25206],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxtoolbar.h","source":"**Header:** afxtoolbar.h"},{"content":"Inheritance Hierarchy","pos":[25215,25236]},{"content":"CObject","pos":[25241,25248]},{"content":"CCmdTarget","pos":[25295,25305]},{"content":"CWnd","pos":[25355,25359]},{"content":"CBasePane","pos":[25403,25412]},{"content":"CPane","pos":[25461,25466]},{"content":"CMFCBaseToolBar","pos":[25511,25526]},{"content":"CMFCToolBar","pos":[25581,25592]},{"pos":[25690,25718],"content":"CMFCToolBar::AddBasicCommand"},{"content":"Adds a menu command to the list of commands that are always displayed when a user opens a menu.","pos":[25722,25817]},{"content":"Parameters","pos":[25893,25903]},{"content":"[in]","pos":[25907,25911]},{"content":"Specifies the command to add.","pos":[25923,25952]},{"content":"Remarks","pos":[25962,25969]},{"content":"A basic command is always displayed when the menu is opened.","pos":[25973,26033]},{"content":"This method is meaningful when the user chooses to view recently used commands.","pos":[26034,26113]},{"content":"Use the <bpt id=\"p1\">[</bpt>CMFCToolBar::SetBasicCommands<ept id=\"p1\">](#cmfctoolbar__setbasiccommands)</ept> method to set the list of commands that are always displayed when a user opens a menu.","pos":[26120,26278],"source":"Use the [CMFCToolBar::SetBasicCommands](#cmfctoolbar__setbasiccommands) method to set the list of commands that are always displayed when a user opens a menu."},{"content":"Use the <bpt id=\"p1\">[</bpt>CMFCToolBar::GetBasicCommands<ept id=\"p1\">](#cmfctoolbar__getbasiccommands)</ept> method to retrieve the list of basic commands that is used by your application.","pos":[26279,26430],"source":" Use the [CMFCToolBar::GetBasicCommands](#cmfctoolbar__getbasiccommands) method to retrieve the list of basic commands that is used by your application."},{"pos":[26485,26513],"content":"CMFCToolBar::AddCommandUsage"},{"content":"Increments by one the counter that is associated with the given command.","pos":[26517,26589]},{"content":"Parameters","pos":[26669,26679]},{"content":"[in]","pos":[26683,26687]},{"content":"Specifies the command counter to increment.","pos":[26703,26746]},{"content":"Remarks","pos":[26756,26763]},{"content":"The framework calls this method when the user selects a menu item.","pos":[26767,26833]},{"content":"The framework uses command counters to display recently used menu items.","pos":[26840,26912]},{"pos":[26919,27084],"content":"This method increments the command counter by using the <bpt id=\"p1\">[</bpt>CMFCCmdUsageCount::AddCmd<ept id=\"p1\">](../../mfc/reference/cmfccmdusagecount-class.md#cmfccmdusagecount__addcmd)</ept> method.","source":"This method increments the command counter by using the [CMFCCmdUsageCount::AddCmd](../../mfc/reference/cmfccmdusagecount-class.md#cmfccmdusagecount__addcmd) method."},{"pos":[27152,27193],"content":"CMFCToolBar::AddToolBarForImageCollection"},{"content":"Adds images from the user interface resources to the collection of images in the application.","pos":[27197,27290]},{"content":"Parameters","pos":[27527,27537]},{"content":"[in]","pos":[27541,27545]},{"content":"Resource ID of a toolbar with images to load.","pos":[27559,27604]},{"content":"[in]","pos":[27611,27615]},{"content":"Resource ID of a bitmap with toolbar images.","pos":[27632,27676]},{"content":"[in]","pos":[27683,27687]},{"content":"Resource ID of a bitmap with \"cold\" toolbar images.","pos":[27705,27756]},{"content":"[in]","pos":[27763,27767]},{"content":"Resource ID of a bitmap with menu images.","pos":[27785,27826]},{"content":"[in]","pos":[27833,27837]},{"content":"Resource ID of a bitmap with disabled toolbar images.","pos":[27859,27912]},{"content":"[in]","pos":[27919,27923]},{"content":"Resource ID of a bitmap with disabled menu images.","pos":[27949,27999]},{"content":"Return Value","pos":[28009,28021]},{"pos":[28032,28149],"content":"if the method succeeds; <ph id=\"ph1\">`FALSE`</ph> if <ph id=\"ph2\">`uiResID`</ph> or <ph id=\"ph3\">`uiBmpResID`</ph> do not specify valid resources, or another error occurs.","source":" if the method succeeds; `FALSE` if `uiResID` or `uiBmpResID` do not specify valid resources, or another error occurs."},{"content":"Remarks","pos":[28159,28166]},{"content":"Call this method to load a bitmap with toolbar images and add it to the collection of toolbar images.","pos":[28170,28271]},{"content":"This method creates a temporary toolbar object and calls <bpt id=\"p1\">[</bpt>CMFCToolBar::LoadToolBar<ept id=\"p1\">](#cmfctoolbar__loadtoolbar)</ept>.","pos":[28272,28383],"source":" This method creates a temporary toolbar object and calls [CMFCToolBar::LoadToolBar](#cmfctoolbar__loadtoolbar)."},{"pos":[28435,28460],"content":"CMFCToolBar::AdjustLayout"},{"content":"Recalculates the size and position of a toolbar.","pos":[28464,28512]},{"content":"Remarks","pos":[28566,28573]},{"content":"Call this method when the toolbar has been created to recalculate its size and position.","pos":[28577,28665]},{"content":"The framework calls this method every time that the layout of the toolbar must be changed.","pos":[28672,28762]},{"content":"For example, the layout must change when the user moves another control bar, resizes an application window, or customizes the toolbar.","pos":[28763,28897]},{"pos":[28904,29047],"content":"Override this method to provide your own dynamic layout in classes that you derive from <bpt id=\"p1\">[</bpt>CMFCToolar<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md)</ept>.","source":"Override this method to provide your own dynamic layout in classes that you derive from [CMFCToolar](../../mfc/reference/cmfctoolbar-class.md)."},{"pos":[29097,29120],"content":"CMFCToolBar::AdjustSize"},{"content":"Recalculates the size of the toolbar.","pos":[29124,29161]},{"content":"Remarks","pos":[29205,29212]},{"content":"This method makes sure that the toolbar fits in the bounds of the parent frame.","pos":[29216,29295]},{"content":"This method does nothing if the toolbar has no parent frame.","pos":[29296,29356]},{"pos":[29363,29529],"content":"The <bpt id=\"p1\">[</bpt>CMFCToolBar::AdjustLayout<ept id=\"p1\">](#cmfctoolbar__adjustlayout)</ept> method calls this method to recalculate the size if the parent of the toolbar is not a <ph id=\"ph1\">`CMFCReBar`</ph> object.","source":"The [CMFCToolBar::AdjustLayout](#cmfctoolbar__adjustlayout) method calls this method to recalculate the size if the parent of the toolbar is not a `CMFCReBar` object."},{"pos":[29590,29624],"content":"CMFCToolBar::AllowChangeTextLabels"},{"content":"Specifies whether text labels can be shown under images on the toolbar buttons.","pos":[29628,29707]},{"content":"Return Value","pos":[29779,29791]},{"pos":[29802,29874],"content":"if it is allowed to display text labels below images; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if it is allowed to display text labels below images; otherwise `FALSE`."},{"content":"Remarks","pos":[29884,29891]},{"pos":[29895,30063],"content":"This method is called by the customization dialog box to determine whether to enable a <bpt id=\"p1\">**</bpt>Show text labels<ept id=\"p1\">**</ept> check-box on the <bpt id=\"p2\">**</bpt>Toolbars<ept id=\"p2\">**</ept> page for the selected toolbar.","source":"This method is called by the customization dialog box to determine whether to enable a **Show text labels** check-box on the **Toolbars** page for the selected toolbar."},{"pos":[30070,30112],"content":"The default implementation returns <ph id=\"ph1\">`TRUE`</ph>.","source":"The default implementation returns `TRUE`."},{"pos":[30119,30351],"content":"Override this method in an object derived from <bpt id=\"p1\">[</bpt>CMFCToolBar<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md)</ept> and return <ph id=\"ph1\">`FALSE`</ph> when you do not want the user to decide whether text labels are displayed on toolbar buttons under the images.","source":"Override this method in an object derived from [CMFCToolBar](../../mfc/reference/cmfctoolbar-class.md) and return `FALSE` when you do not want the user to decide whether text labels are displayed on toolbar buttons under the images."},{"pos":[30406,30434],"content":"CMFCToolBar::AllowShowOnList"},{"pos":[30438,30563],"content":"Determines whether the toolbar is displayed in the list of toolbars on the <bpt id=\"p1\">**</bpt>Toolbars<ept id=\"p1\">**</ept> pane of the <bpt id=\"p2\">**</bpt>Customize<ept id=\"p2\">**</ept> dialog box.","source":"Determines whether the toolbar is displayed in the list of toolbars on the **Toolbars** pane of the **Customize** dialog box."},{"content":"Return Value","pos":[30629,30641]},{"pos":[30652,30760],"content":"if the toolbar object can be displayed in the list box on the toolbar customization page; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the toolbar object can be displayed in the list box on the toolbar customization page; otherwise `FALSE`."},{"content":"Remarks","pos":[30770,30777]},{"pos":[30781,30988],"content":"This method is called by the framework to determine whether the list on the toolbar customization page should include a particular object derived from <bpt id=\"p1\">[</bpt>CMFCToolBar<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md)</ept>.","source":"This method is called by the framework to determine whether the list on the toolbar customization page should include a particular object derived from [CMFCToolBar](../../mfc/reference/cmfctoolbar-class.md)."},{"content":"The default implementation always returns <ph id=\"ph1\">`TRUE`</ph>.","pos":[30995,31044],"source":"The default implementation always returns `TRUE`."},{"content":"Override this method when you do not want a toolbar to appear in the toolbars list in the customization dialog box.","pos":[31045,31160]},{"pos":[31213,31239],"content":"CMFCToolBar::AreTextLabels"},{"content":"Specifies whether text labels under images are currently displayed on the toolbar buttons.","pos":[31243,31333]},{"content":"Return Value","pos":[31389,31401]},{"pos":[31412,31487],"content":"if the toolbar buttons display text labels below images; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the toolbar buttons display text labels below images; otherwise `FALSE`."},{"content":"Remarks","pos":[31497,31504]},{"content":"Use <bpt id=\"p1\">[</bpt>CMFCToolBar::EnableTextLabels<ept id=\"p1\">](#cmfctoolbar__enabletextlabels)</ept> to specify whether the text is displayed.","pos":[31508,31617],"source":"Use [CMFCToolBar::EnableTextLabels](#cmfctoolbar__enabletextlabels) to specify whether the text is displayed."},{"content":"The default value is <ph id=\"ph1\">`FALSE`</ph>.","pos":[31618,31647],"source":" The default value is `FALSE`."},{"content":"Call <bpt id=\"p1\">[</bpt>CMFCToolBar::AllowChangeTextLabels<ept id=\"p1\">](#cmfctoolbar__allowchangetextlabels)</ept> to specify whether the user can change this setting in the customization dialog box.","pos":[31648,31811],"source":" Call [CMFCToolBar::AllowChangeTextLabels](#cmfctoolbar__allowchangetextlabels) to specify whether the user can change this setting in the customization dialog box."},{"pos":[31873,31908],"content":"CMFCToolBar::AutoGrayInactiveImages"},{"content":"Enable or disables the automatic generation of inactive button images.","pos":[31912,31982]},{"content":"Parameters","pos":[32137,32147]},{"content":"[in]","pos":[32151,32155]},{"content":"A Boolean value that specifies whether to dim inactive images.","pos":[32169,32231]},{"content":"If this parameter is <ph id=\"ph1\">`TRUE`</ph>, inactive images are dimmed.","pos":[32232,32288],"source":" If this parameter is `TRUE`, inactive images are dimmed."},{"content":"Otherwise, inactive images are not dimmed.","pos":[32289,32331]},{"content":"[in]","pos":[32338,32342]},{"content":"Specifies the luminance percentage for inactive images.","pos":[32369,32424]},{"content":"If <ph id=\"ph1\">`bEnable`</ph> is <ph id=\"ph2\">`FALSE`</ph>, this value is ignored.","pos":[32425,32472],"source":" If `bEnable` is `FALSE`, this value is ignored."},{"content":"[in]","pos":[32479,32483]},{"content":"A Boolean value that specifies whether to redraw all toolbars in the application.","pos":[32508,32589]},{"content":"If this parameter is <ph id=\"ph1\">`TRUE`</ph>, this method redraws all toolbars.","pos":[32590,32652],"source":" If this parameter is `TRUE`, this method redraws all toolbars."},{"content":"Remarks","pos":[32662,32669]},{"content":"If <ph id=\"ph1\">`bEnable`</ph> is <ph id=\"ph2\">`TRUE`</ph>, the framework uses <ph id=\"ph3\">`nGrayImagePercentage`</ph> to generate inactive images from the regular images.","pos":[32673,32791],"source":"If `bEnable` is `TRUE`, the framework uses `nGrayImagePercentage` to generate inactive images from the regular images."},{"content":"Otherwise, you must provide the set of inactive images by using the <bpt id=\"p1\">[</bpt>CMFCToolBar::GetColdImages<ept id=\"p1\">](#cmfctoolbar__getcoldimages)</ept> method.","pos":[32792,32925],"source":" Otherwise, you must provide the set of inactive images by using the [CMFCToolBar::GetColdImages](#cmfctoolbar__getcoldimages) method."},{"content":"By default, this option is disabled.","pos":[32926,32962]},{"pos":[32969,33148],"content":"For more information about the <ph id=\"ph1\">`nGrayImagePercentage`</ph> parameter, see <bpt id=\"p1\">[</bpt>CMFCToolBarImages::GrayImages<ept id=\"p1\">](../../mfc/reference/cmfctoolbarimages-class.md#cmfctoolbarimages__grayimages)</ept>.","source":"For more information about the `nGrayImagePercentage` parameter, see [CMFCToolBarImages::GrayImages](../../mfc/reference/cmfctoolbarimages-class.md#cmfctoolbarimages__grayimages)."},{"pos":[33201,33227],"content":"CMFCToolBar::ButtonToIndex"},{"pos":[33231,33361],"content":"Returns the index of a specified <bpt id=\"p1\">[</bpt>CMFCToolBarButton Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept> object in this toolbar.","source":"Returns the index of a specified [CMFCToolBarButton Class](../../mfc/reference/cmfctoolbarbutton-class.md) object in this toolbar."},{"content":"Parameters","pos":[33448,33458]},{"content":"[in]","pos":[33462,33466]},{"content":"A pointer to the toolbar button object.","pos":[33480,33519]},{"content":"Return Value","pos":[33529,33541]},{"pos":[33545,33658],"content":"Index of <ph id=\"ph1\">`pButton`</ph> in the internal list of toolbar buttons; or -1 if the specified button is not on this toolbar.","source":"Index of `pButton` in the internal list of toolbar buttons; or -1 if the specified button is not on this toolbar."},{"pos":[33713,33741],"content":"CMFCToolBar::CalcFixedLayout"},{"content":"Calculates the horizontal size of the toolbar.","pos":[33745,33791]},{"content":"Parameters","pos":[33885,33895]},{"content":"[in]","pos":[33899,33903]},{"content":"to stretch the toolbar to the size of the parent frame.","pos":[33925,33980]},{"content":"[in]","pos":[33987,33991]},{"content":"to orient the toolbar horizontally; <ph id=\"ph1\">`FALSE`</ph> to orient the toolbar vertically.","pos":[34010,34087],"source":" to orient the toolbar horizontally; `FALSE` to orient the toolbar vertically."},{"content":"Return Value","pos":[34097,34109]},{"pos":[34113,34169],"content":"A <ph id=\"ph1\">`CSize`</ph> object that specifies the size of the toolbar.","source":"A `CSize` object that specifies the size of the toolbar."},{"content":"Remarks","pos":[34179,34186]},{"content":"This method calculates the size of the toolbar by using the <ph id=\"ph1\">`CMFCToolBar::CalcLayout`</ph> method.","pos":[34190,34283],"source":"This method calculates the size of the toolbar by using the `CMFCToolBar::CalcLayout` method."},{"content":"It passes the <ph id=\"ph1\">`LM_STRETCH`</ph> flag for the <ph id=\"ph2\">`dwMode`</ph> parameter if <ph id=\"ph3\">`bStretch`</ph> is <ph id=\"ph4\">`TRUE`</ph>.","pos":[34284,34367],"source":" It passes the `LM_STRETCH` flag for the `dwMode` parameter if `bStretch` is `TRUE`."},{"content":"It passes the <ph id=\"ph1\">`LM_HORZ`</ph> flag if <ph id=\"ph2\">`bHorz`</ph> is <ph id=\"ph3\">`TRUE`</ph>.","pos":[34368,34418],"source":" It passes the `LM_HORZ` flag if `bHorz` is `TRUE`."},{"content":"See the VisualStudioDemo sample for an example that uses this method.","pos":[34425,34494]},{"pos":[34553,34585],"content":"CMFCToolBar::CalcMaxButtonHeight"},{"content":"Calculates the maximum height of buttons in the toolbar.","pos":[34589,34645]},{"content":"Return Value","pos":[34705,34717]},{"content":"The maximum height of buttons.","pos":[34721,34751]},{"content":"Remarks","pos":[34761,34768]},{"content":"This method calculates the maximum height among all toolbar buttons on the toolbar.","pos":[34772,34855]},{"content":"The height may vary depending on factors such as the current toolbar docking state.","pos":[34856,34939]},{"pos":[34946,35086],"content":"Override this method in a class derived from <bpt id=\"p1\">[</bpt>CMFCToolBar<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md)</ept> to provide your own height calculation.","source":"Override this method in a class derived from [CMFCToolBar](../../mfc/reference/cmfctoolbar-class.md) to provide your own height calculation."},{"pos":[35134,35155],"content":"CMFCToolBar::CalcSize"},{"content":"Called by the framework as part of the layout calculation process.","pos":[35159,35225]},{"content":"Parameters","pos":[35290,35300]},{"content":"[in]","pos":[35304,35308]},{"content":"to specify that the toolbar is docked vertically; <ph id=\"ph1\">`FALSE`</ph> to specify that the toolbar is docked horizontally.","pos":[35331,35440],"source":" to specify that the toolbar is docked vertically; `FALSE` to specify that the toolbar is docked horizontally."},{"content":"Return Value","pos":[35450,35462]},{"pos":[35466,35545],"content":"A <ph id=\"ph1\">`CSize`</ph> object that specifies the overall size of the buttons on the toolbar.","source":"A `CSize` object that specifies the overall size of the buttons on the toolbar."},{"content":"Remarks","pos":[35555,35562]},{"content":"This method considers the attributes that affect the size of each button, such as the area of the text label and the border size.","pos":[35566,35695]},{"pos":[35702,35873],"content":"If the toolbar contains no buttons, this method returns the reserved size of a single button by using the <bpt id=\"p1\">[</bpt>CMFCToolBar::GetButtonSize<ept id=\"p1\">](#cmfctoolbar__getbuttonsize)</ept> method.","source":"If the toolbar contains no buttons, this method returns the reserved size of a single button by using the [CMFCToolBar::GetButtonSize](#cmfctoolbar__getbuttonsize) method."},{"pos":[35924,35948],"content":"CMFCToolBar::CanBeClosed"},{"content":"Specifies whether a user can close the toolbar.","pos":[35952,35999]},{"content":"Return Value","pos":[36061,36073]},{"pos":[36084,36144],"content":"if the toolbar can be closed by the user; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the toolbar can be closed by the user; otherwise `FALSE`."},{"content":"Remarks","pos":[36154,36161]},{"content":"The framework calls this method to determine whether the user can close a toolbar.","pos":[36165,36247]},{"content":"If the method returns <ph id=\"ph1\">`TRUE`</ph>, the framework enables the SC_CLOSE command in the system menu of the toolbar and the user can close the toolbar by using a check box in the list of toolbars in the customization dialog box.","pos":[36248,36467],"source":" If the method returns `TRUE`, the framework enables the SC_CLOSE command in the system menu of the toolbar and the user can close the toolbar by using a check box in the list of toolbars in the customization dialog box."},{"content":"The default implementation returns <ph id=\"ph1\">`TRUE`</ph>.","pos":[36474,36516],"source":"The default implementation returns `TRUE`."},{"content":"Override this method in a class derived from <bpt id=\"p1\">[</bpt>CMFCToolBar<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md)</ept> to make toolbar objects that cannot be closed by the user.","pos":[36517,36676],"source":" Override this method in a class derived from [CMFCToolBar](../../mfc/reference/cmfctoolbar-class.md) to make toolbar objects that cannot be closed by the user."},{"pos":[36729,36755],"content":"CMFCToolBar::CanBeRestored"},{"content":"Determines whether the system can restore a toolbar to its original state after customization.","pos":[36759,36853]},{"content":"Return Value","pos":[36917,36929]},{"pos":[36940,37021],"content":"if the toolbar can be restored from the application resources; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the toolbar can be restored from the application resources; otherwise `FALSE`."},{"content":"Remarks","pos":[37031,37038]},{"content":"The framework calls this method to determine whether a toolbar can be returned to its original state after customization.","pos":[37042,37163]},{"content":"The original state is loaded from the application resources.","pos":[37164,37224]},{"pos":[37231,37374],"content":"If <ph id=\"ph1\">`CanBeRestored`</ph> returns <ph id=\"ph2\">`TRUE`</ph>, the <bpt id=\"p1\">**</bpt>Toolbars<ept id=\"p1\">**</ept> page of the customization dialog box enables the <bpt id=\"p2\">**</bpt>Reset<ept id=\"p2\">**</ept> button for the selected toolbar.","source":"If `CanBeRestored` returns `TRUE`, the **Toolbars** page of the customization dialog box enables the **Reset** button for the selected toolbar."},{"content":"The default implementation returns <ph id=\"ph1\">`TRUE`</ph> if the original resource ID of the toolbar when it was loaded is non-zero.","pos":[37381,37497],"source":"The default implementation returns `TRUE` if the original resource ID of the toolbar when it was loaded is non-zero."},{"content":"Usually, only user-defined toolbars cannot be restored.","pos":[37498,37553]},{"pos":[37560,37650],"content":"You can override the <ph id=\"ph1\">`CanBeRestored`</ph> method to customize this behavior in derived classes.","source":"You can override the `CanBeRestored` method to customize this behavior in derived classes."},{"pos":[37698,37719],"content":"CMFCToolBar::CanFocus"},{"content":"Specifies whether the pane can receive focus.","pos":[37723,37768]},{"content":"Return Value","pos":[37827,37839]},{"pos":[37843,37871],"content":"This method returns <ph id=\"ph1\">`FALSE`</ph>.","source":"This method returns `FALSE`."},{"content":"Remarks","pos":[37881,37888]},{"pos":[37892,38073],"content":"This method overrides the base class implementation, <bpt id=\"p1\">[</bpt>CBasePane::CanFocus<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__canfocus)</ept>, because toolbar objects cannot receive focus.","source":"This method overrides the base class implementation, [CBasePane::CanFocus](../../mfc/reference/cbasepane-class.md#cbasepane__canfocus), because toolbar objects cannot receive focus."},{"pos":[38130,38160],"content":"CMFCToolBar::CanHandleSiblings"},{"content":"Determines whether the toolbar and its sibling are positioned on the same pane.","pos":[38164,38243]},{"content":"Return Value","pos":[38294,38306]},{"pos":[38317,38429],"content":"if the toolbar has a sibling and the toolbar and its sibling are positioned on the same pane; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the toolbar has a sibling and the toolbar and its sibling are positioned on the same pane; otherwise `FALSE`."},{"content":"Remarks","pos":[38439,38446]},{"content":"The internal CMFCCustomizeButton::CreatePopupMenu method calls this method to determine how to show the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> pop-up menu.","pos":[38450,38580],"source":"The internal CMFCCustomizeButton::CreatePopupMenu method calls this method to determine how to show the **Customize** pop-up menu."},{"content":"If this method returns <ph id=\"ph1\">`TRUE`</ph>, the framework displays the <bpt id=\"p1\">**</bpt>Show Buttons on One Row<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Show Buttons on Two Rows<ept id=\"p2\">**</ept> buttons.","pos":[38581,38707],"source":" If this method returns `TRUE`, the framework displays the **Show Buttons on One Row** or **Show Buttons on Two Rows** buttons."},{"content":"You typically do not have to use this method.","pos":[38714,38759]},{"content":"To enable the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> button that appears on the toolbar, call the <bpt id=\"p2\">[</bpt>CMFCToolBar::EnableCustomizeButton<ept id=\"p2\">](#cmfctoolbar__enablecustomizebutton)</ept> method.","pos":[38760,38914],"source":" To enable the **Customize** button that appears on the toolbar, call the [CMFCToolBar::EnableCustomizeButton](#cmfctoolbar__enablecustomizebutton) method."},{"content":"To enable the <bpt id=\"p1\">**</bpt>Show Buttons on One Row<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Show Buttons on Two Rows<ept id=\"p2\">**</ept> buttons, call <bpt id=\"p3\">[</bpt>CMFCToolBar::SetSiblingToolBar<ept id=\"p3\">](#cmfctoolbar__setsiblingtoolbar)</ept>.","pos":[38915,39069],"source":" To enable the **Show Buttons on One Row** or **Show Buttons on Two Rows** buttons, call [CMFCToolBar::SetSiblingToolBar](#cmfctoolbar__setsiblingtoolbar)."},{"pos":[39122,39148],"content":"CMFCToolBar::CleanUpImages"},{"content":"Frees the system resources allocated for toolbar images.","pos":[39152,39208]},{"content":"Remarks","pos":[39275,39282]},{"content":"The framework calls this method when an application shuts down.","pos":[39286,39349]},{"pos":[39408,39440],"content":"CMFCToolBar::CleanUpLockedImages"},{"content":"Frees the system resources allocated for locked toolbar images.","pos":[39444,39507]},{"content":"Remarks","pos":[39560,39567]},{"content":"Call this method when the visual style of your application changes.","pos":[39571,39638]},{"content":"See the VisualStudioDemo sample for an example that uses this method.","pos":[39639,39708]},{"pos":[39762,39789],"content":"CMFCToolBar::CommandToIndex"},{"content":"Returns the index of the button in the toolbar with a specified command ID.","pos":[39793,39868]},{"content":"Parameters","pos":[39966,39976]},{"content":"[in]","pos":[39980,39984]},{"content":"Specifies the command ID.","pos":[39998,40023]},{"content":"[in]","pos":[40030,40034]},{"content":"Specifies the initial index to start from.","pos":[40052,40094]},{"content":"Return Value","pos":[40104,40116]},{"content":"Zero-based index of the toolbar button if the method was successful; -1 if there is no button with the specified ID.","pos":[40120,40236]},{"content":"Remarks","pos":[40246,40253]},{"content":"A <bpt id=\"p1\">[</bpt>CMFCToolBar<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md)</ept> object maintains an internal list of the buttons on the toolbar.","pos":[40257,40379],"source":"A [CMFCToolBar](../../mfc/reference/cmfctoolbar-class.md) object maintains an internal list of the buttons on the toolbar."},{"content":"Call this function to retrieve the index of a button in the list given the command ID of the button.","pos":[40380,40480]},{"pos":[40487,40601],"content":"If <ph id=\"ph1\">`iIndex`</ph> is greater than 0, this method ignores any button on the toolbar that has an index less than <ph id=\"ph2\">`iIndex`</ph>.","source":"If `iIndex` is greater than 0, this method ignores any button on the toolbar that has an index less than `iIndex`."},{"pos":[40647,40666],"content":"CMFCToolBar::Create"},{"pos":[40670,40701],"content":"Creates a <ph id=\"ph1\">`CMFCToolBar`</ph> object.","source":"Creates a `CMFCToolBar` object."},{"content":"Parameters","pos":[40849,40859]},{"content":"[in]","pos":[40863,40867]},{"content":"A pointer to the parent window of the toolbar.","pos":[40884,40930]},{"content":"[in]","pos":[40937,40941]},{"content":"The toolbar style.","pos":[40955,40973]},{"content":"See <bpt id=\"p1\">[</bpt>Toolbar Control and Button Styles<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb760439)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for the list of styles.","pos":[40974,41156],"source":" See [Toolbar Control and Button Styles](http://msdn.microsoft.com/library/windows/desktop/bb760439) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for the list of styles."},{"content":"[in]","pos":[41163,41167]},{"content":"The ID of the child window of the toolbar.","pos":[41177,41219]},{"content":"Return Value","pos":[41229,41241]},{"pos":[41252,41295],"content":"if this method succeeds; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if this method succeeds; otherwise `FALSE`."},{"content":"Remarks","pos":[41305,41312]},{"content":"This method creates a control bar and attaches it to the toolbar.","pos":[41316,41381]},{"content":"It creates the control bar with the <ph id=\"ph1\">`TBSTYLE_FLAT`</ph> style.","pos":[41382,41439],"source":" It creates the control bar with the `TBSTYLE_FLAT` style."},{"content":"Call <bpt id=\"p1\">[</bpt>CMFCToolBar::CreateEx<ept id=\"p1\">](#cmfctoolbar__createex)</ept> if you want a different control bar style.","pos":[41440,41535],"source":" Call [CMFCToolBar::CreateEx](#cmfctoolbar__createex) if you want a different control bar style."},{"pos":[41583,41604],"content":"CMFCToolBar::CreateEx"},{"pos":[41608,41695],"content":"Creates a <ph id=\"ph1\">`CMFCToolBar`</ph> object that uses additional style options, such as large icons.","source":"Creates a `CMFCToolBar` object that uses additional style options, such as large icons."},{"content":"Parameters","pos":[41936,41946]},{"content":"[in]","pos":[41950,41954]},{"content":"A pointer to the parent window of the toolbar.","pos":[41971,42017]},{"content":"[in]","pos":[42024,42028]},{"content":"Additional styles for creating the embedded control bar object.","pos":[42046,42109]},{"content":"[in]","pos":[42116,42120]},{"content":"The toolbar style.","pos":[42134,42152]},{"content":"See <bpt id=\"p1\">[</bpt>Toolbar Control and Button Styles<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb760439)</ept> for a list of appropriate styles.","pos":[42153,42286],"source":" See [Toolbar Control and Button Styles](http://msdn.microsoft.com/library/windows/desktop/bb760439) for a list of appropriate styles."},{"content":"[in]","pos":[42293,42297]},{"content":"A <ph id=\"ph1\">`CRect`</ph> object that specifies the widths of the toolbar window borders.","pos":[42313,42386],"source":" A `CRect` object that specifies the widths of the toolbar window borders."},{"content":"[in]","pos":[42393,42397]},{"content":"The ID of the child window of the toolbar.","pos":[42407,42449]},{"content":"Return Value","pos":[42459,42471]},{"content":"Nonzero if this method succeeds; otherwise 0.","pos":[42475,42520]},{"content":"Remarks","pos":[42530,42537]},{"content":"This method creates a control bar and attaches it to the toolbar.","pos":[42541,42606]},{"content":"Call this method instead of <bpt id=\"p1\">[</bpt>CMFCToolBar::Create<ept id=\"p1\">](#cmfctoolbar__create)</ept> when you want to provide specific styles.","pos":[42613,42726],"source":"Call this method instead of [CMFCToolBar::Create](#cmfctoolbar__create) when you want to provide specific styles."},{"content":"For example, set <ph id=\"ph1\">`dwCtrlStyle`</ph> to <ph id=\"ph2\">`TBSTYLE_FLAT | TBSTYLE_TRANSPARENT`</ph> to create a toolbar that resembles the toolbars that are used by Internet Explorer 4.","pos":[42727,42883],"source":" For example, set `dwCtrlStyle` to `TBSTYLE_FLAT | TBSTYLE_TRANSPARENT` to create a toolbar that resembles the toolbars that are used by Internet Explorer 4."},{"content":"Example","pos":[42893,42900]},{"content":"The following example demonstrates how to use the <ph id=\"ph1\">`CreateEx`</ph> method of the <ph id=\"ph2\">`CMFCToolBar`</ph> class.","pos":[42904,42999],"source":"The following example demonstrates how to use the `CreateEx` method of the `CMFCToolBar` class."},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>IE Demo sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[43000,43079],"source":" This code snippet is part of the [IE Demo sample](../../visual-cpp-samples.md)."},{"content":"NVC_MFC_IEDemo#6","pos":[43097,43113]},{"content":"NVC_MFC_IEDemo#7","pos":[43188,43204]},{"pos":[43317,43340],"content":"CMFCToolBar::Deactivate"},{"content":"Deactivates the toolbar.","pos":[43344,43368]},{"content":"Remarks","pos":[43420,43427]},{"content":"This method deactivates the toolbar by removing the focus from the highlighted toolbar button.","pos":[43431,43525]},{"content":"The framework calls this method when the toolbar loses focus or is destroyed.","pos":[43526,43603]},{"pos":[43650,43670],"content":"CMFCToolBar::DoPaint"},{"content":"Repaints a toolbar.","pos":[43674,43693]},{"content":"Parameters","pos":[43750,43760]},{"content":"[in]","pos":[43764,43768]},{"content":"A pointer to a device context.","pos":[43778,43808]},{"content":"Remarks","pos":[43818,43825]},{"content":"This method is called by the framework when a part of the toolbar must be repainted.","pos":[43829,43913]},{"pos":[43920,44051],"content":"Override this method to customize the appearance of an object derived from <bpt id=\"p1\">[</bpt>CMFCToolBar<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md)</ept>.","source":"Override this method to customize the appearance of an object derived from [CMFCToolBar](../../mfc/reference/cmfctoolbar-class.md)."},{"pos":[44101,44124],"content":"CMFCToolBar::DrawButton"},{"content":"Repaints a toolbar button.","pos":[44128,44154]},{"content":"Parameters","pos":[44344,44354]},{"content":"[in]","pos":[44358,44362]},{"content":"A pointer to a device context.","pos":[44372,44402]},{"content":"[in]","pos":[44409,44413]},{"content":"A pointer to a button to draw.","pos":[44427,44457]},{"content":"[in]","pos":[44464,44468]},{"content":"A pointer to the toolbar images.","pos":[44482,44514]},{"content":"[in]","pos":[44521,44525]},{"content":"if the button is highlighted; otherwise <ph id=\"ph1\">`FALSE`</ph>.","pos":[44551,44599],"source":" if the button is highlighted; otherwise `FALSE`."},{"content":"[in]","pos":[44606,44610]},{"content":"if disabled buttons are dimmed; otherwise <ph id=\"ph1\">`FALSE`</ph>.","pos":[44643,44693],"source":" if disabled buttons are dimmed; otherwise `FALSE`."},{"content":"Return Value","pos":[44703,44715]},{"pos":[44726,44787],"content":"if the button was repainted; <ph id=\"ph1\">`FALSE`</ph> if the button is hidden.","source":" if the button was repainted; `FALSE` if the button is hidden."},{"content":"Remarks","pos":[44797,44804]},{"pos":[44808,44929],"content":"The <bpt id=\"p1\">[</bpt>CMFCToolBar::DrawButton<ept id=\"p1\">](#cmfctoolbar__drawbutton)</ept> method calls this method when a toolbar button must be repainted.","source":"The [CMFCToolBar::DrawButton](#cmfctoolbar__drawbutton) method calls this method when a toolbar button must be repainted."},{"content":"Override this method if you want to customize the appearance of buttons on your toolbar.","pos":[44936,45024]},{"pos":[45077,45103],"content":"CMFCToolBar::DrawSeparator"},{"content":"Repaints a separator on a toolbar.","pos":[45107,45141]},{"content":"Parameters","pos":[45252,45262]},{"content":"[in]","pos":[45266,45270]},{"content":"A pointer to a device context.","pos":[45280,45310]},{"content":"[in]","pos":[45317,45321]},{"content":"The bounding rectangle of the location where the separator is drawn, in pixels.","pos":[45332,45411]},{"content":"[in]","pos":[45418,45422]},{"content":"if the separator is horizontal, <ph id=\"ph1\">`FALSE`</ph> if the separator is vertical.","pos":[45441,45510],"source":" if the separator is horizontal, `FALSE` if the separator is vertical."},{"content":"Remarks","pos":[45520,45527]},{"pos":[45531,45795],"content":"<bpt id=\"p1\">[</bpt>CMFCToolBar::DoPaint<ept id=\"p1\">](#cmfctoolbar__dopaint)</ept> calls this method for each <bpt id=\"p2\">[</bpt>CMFCToolBar::DrawSeparator<ept id=\"p2\">](#cmfctoolbar__drawseparator)</ept> object that has the <ph id=\"ph1\">`TBBS_SEPARATOR`</ph> style, instead of calling <bpt id=\"p3\">[</bpt>CMFCToolBar::DrawButton<ept id=\"p3\">](#cmfctoolbar__drawbutton)</ept> for those buttons.","source":"[CMFCToolBar::DoPaint](#cmfctoolbar__dopaint) calls this method for each [CMFCToolBar::DrawSeparator](#cmfctoolbar__drawseparator) object that has the `TBBS_SEPARATOR` style, instead of calling [CMFCToolBar::DrawButton](#cmfctoolbar__drawbutton) for those buttons."},{"content":"Override this method in a class derived from <bpt id=\"p1\">[</bpt>CMFCToolBar<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md)</ept> to customize the appearance of separators on the toolbar.","pos":[45802,45960],"source":"Override this method in a class derived from [CMFCToolBar](../../mfc/reference/cmfctoolbar-class.md) to customize the appearance of separators on the toolbar."},{"content":"The default implementation calls <bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawSeparator<ept id=\"p1\">](../../mfc/reference/cmfcvisualmanager-class.md#cmfcvisualmanager__ondrawseparator)</ept> to draw a separator whose appearance is determined by the current visual manager.","pos":[45961,46195],"source":" The default implementation calls [CMFCVisualManager::OnDrawSeparator](../../mfc/reference/cmfcvisualmanager-class.md#cmfcvisualmanager__ondrawseparator) to draw a separator whose appearance is determined by the current visual manager."},{"pos":[46256,46290],"content":"CMFCToolBar::EnableCustomizeButton"},{"content":"Enables or disables the Customize button that appears on the toolbar.","pos":[46294,46363]},{"content":"Parameters","pos":[46673,46683]},{"content":"[in]","pos":[46687,46691]},{"content":"Enables or disables the Customize button.","pos":[46705,46746]},{"content":"[in]","pos":[46753,46757]},{"content":"The command ID of the Customize button.","pos":[46777,46816]},{"content":"[in]","pos":[46823,46827]},{"content":"The text label of the Customize button.","pos":[46850,46889]},{"content":"[in]","pos":[46896,46900]},{"content":"The resource string ID of the Customize button label.","pos":[46927,46980]},{"content":"[in]","pos":[46987,46991]},{"content":"Enables or disables the <bpt id=\"p1\">**</bpt>Add or Remove Buttons<ept id=\"p1\">**</ept> option on the menu that drops down from the button.","pos":[47013,47114],"source":" Enables or disables the **Add or Remove Buttons** option on the menu that drops down from the button."},{"content":"Remarks","pos":[47124,47131]},{"content":"If <ph id=\"ph1\">`iCustomizeCmd`</ph> is -1, the framework displays the Customize button when multiple toolbar buttons do not fit in the toolbar area.","pos":[47135,47266],"source":"If `iCustomizeCmd` is -1, the framework displays the Customize button when multiple toolbar buttons do not fit in the toolbar area."},{"content":"The button displays a double left-pointing arrow, or chevron, which indicates that there are more buttons.","pos":[47267,47373]},{"content":"If <ph id=\"ph1\">`iCustomizeCmd`</ph> specifies a valid command ID, and <ph id=\"ph2\">`bEnable`</ph> is <ph id=\"ph3\">`TRUE`</ph>, the Customize button is always displayed.","pos":[47380,47495],"source":"If `iCustomizeCmd` specifies a valid command ID, and `bEnable` is `TRUE`, the Customize button is always displayed."},{"content":"The button has a small down arrow and opens a menu that contains a command.","pos":[47496,47571]},{"content":"This command uses the text label specified by <ph id=\"ph1\">`strCustomizeText`</ph>.","pos":[47572,47637],"source":" This command uses the text label specified by `strCustomizeText`."},{"content":"If <ph id=\"ph1\">`bQuickCustomize`</ph> is also <ph id=\"ph2\">`TRUE`</ph>, the menu displays the <bpt id=\"p1\">**</bpt>Add or Remove Buttons<ept id=\"p1\">**</ept> option.","pos":[47638,47730],"source":" If `bQuickCustomize` is also `TRUE`, the menu displays the **Add or Remove Buttons** option."},{"content":"The framework dynamically adds to the menu any buttons that do not fit in the toolbar area before the item that is specified by <ph id=\"ph1\">`iCustomizeCmd`</ph>.","pos":[47737,47881],"source":"The framework dynamically adds to the menu any buttons that do not fit in the toolbar area before the item that is specified by `iCustomizeCmd`."},{"content":"The chevron is displayed next to the down arrow.","pos":[47882,47930]},{"pos":[47983,48009],"content":"CMFCToolBar::EnableDocking"},{"content":"Enables docking of the pane to the main frame.","pos":[48013,48059]},{"content":"Parameters","pos":[48131,48141]},{"content":"[in]","pos":[48145,48149]},{"content":"Specifies the docking alignment to enable.","pos":[48167,48209]},{"content":"Remarks","pos":[48219,48226]},{"content":"This method extends the base class implementation, <bpt id=\"p1\">[</bpt>CBasePane::EnableDocking<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__enabledocking)</ept>, by setting the <ph id=\"ph1\">`CBasePane::m_dwControlBarStyle`</ph> data member to <ph id=\"ph2\">`AFX_CBRS_FLOAT`</ph>.","pos":[48230,48454],"source":"This method extends the base class implementation, [CBasePane::EnableDocking](../../mfc/reference/cbasepane-class.md#cbasepane__enabledocking), by setting the `CBasePane::m_dwControlBarStyle` data member to `AFX_CBRS_FLOAT`."},{"content":"This method then passes <ph id=\"ph1\">`dwAlignment`</ph> to the base class implementation.","pos":[48455,48526],"source":" This method then passes `dwAlignment` to the base class implementation."},{"pos":[48582,48611],"content":"CMFCToolBar::EnableLargeIcons"},{"content":"Enables or disables large icons on toolbar buttons.","pos":[48615,48666]},{"content":"Parameters","pos":[48728,48738]},{"content":"[in]","pos":[48742,48746]},{"content":"to enable large icons, <ph id=\"ph1\">`FALSE`</ph> to disable large icons.","pos":[48767,48821],"source":" to enable large icons, `FALSE` to disable large icons."},{"content":"Remarks","pos":[48831,48838]},{"content":"By default, large icons are enabled.","pos":[48842,48878]},{"pos":[48942,48979],"content":"CMFCToolBar::EnableQuickCustomization"},{"pos":[48983,49118],"content":"Enables or disables the quick customization of toolbars so that the user can press the <bpt id=\"p1\">**</bpt>Alt<ept id=\"p1\">**</ept> key and drag a button to a new location.","source":"Enables or disables the quick customization of toolbars so that the user can press the **Alt** key and drag a button to a new location."},{"content":"Parameters","pos":[49200,49210]},{"content":"[in]","pos":[49214,49218]},{"content":"to enable quick customization, <ph id=\"ph1\">`FALSE`</ph> to disable quick customization.","pos":[49239,49309],"source":" to enable quick customization, `FALSE` to disable quick customization."},{"pos":[49366,49396],"content":"CMFCToolBar::EnableReflections"},{"content":"Enables or disables command reflection.","pos":[49400,49439]},{"content":"Parameters","pos":[49509,49519]},{"content":"[in]","pos":[49523,49527]},{"content":"to enable command reflection; <ph id=\"ph1\">`FALSE`</ph> to disable command reflection.","pos":[49548,49616],"source":" to enable command reflection; `FALSE` to disable command reflection."},{"content":"Remarks","pos":[49626,49633]},{"content":"Call this method to enable command reflection for toolbar buttons that contain embedded controls, such as combo boxes.","pos":[49637,49755]},{"pos":[49762,49922],"content":"For more information about command reflection, see <bpt id=\"p1\">[</bpt>TN062: Message Reflection for Windows Controls<ept id=\"p1\">](../../mfc/tn062-message-reflection-for-windows-controls.md)</ept>.","source":"For more information about command reflection, see [TN062: Message Reflection for Windows Controls](../../mfc/tn062-message-reflection-for-windows-controls.md)."},{"pos":[49978,50007],"content":"CMFCToolBar::EnableTextLabels"},{"content":"Enables or disables text labels under toolbar button images.","pos":[50011,50071]},{"content":"Parameters","pos":[50138,50148]},{"content":"if text labels appear under toolbar button images; otherwise <ph id=\"ph1\">`FALSE`</ph>.","pos":[50172,50241],"source":" if text labels appear under toolbar button images; otherwise `FALSE`."},{"content":"Remarks","pos":[50251,50258]},{"content":"If text labels are enabled, all buttons on the toolbar are enlarged to provide space for the labels to be displayed under the images.","pos":[50262,50395]},{"content":"The customization dialog box has a <bpt id=\"p1\">**</bpt>Show text label<ept id=\"p1\">**</ept> check-box on the <bpt id=\"p2\">**</bpt>Toolbars<ept id=\"p2\">**</ept> page.","pos":[50396,50486],"source":" The customization dialog box has a **Show text label** check-box on the **Toolbars** page."},{"content":"When the user selects a toolbar and checks this option, the framework calls <ph id=\"ph1\">`EnableTextLabels`</ph> for the selected toolbar.","pos":[50487,50607],"source":" When the user selects a toolbar and checks this option, the framework calls `EnableTextLabels` for the selected toolbar."},{"content":"You can disable the check-box for an object derived from <bpt id=\"p1\">[</bpt>CMFCToolBar<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md)</ept> by returning <ph id=\"ph1\">`FALSE`</ph> from <bpt id=\"p2\">[</bpt>CMFCToolBar::AllowChangeTextLabels<ept id=\"p2\">](#cmfctoolbar__allowchangetextlabels)</ept> .","pos":[50608,50822],"source":" You can disable the check-box for an object derived from [CMFCToolBar](../../mfc/reference/cmfctoolbar-class.md) by returning `FALSE` from [CMFCToolBar::AllowChangeTextLabels](#cmfctoolbar__allowchangetextlabels) ."},{"pos":[50881,50913],"content":"CMFCToolBar::FromHandlePermanent"},{"pos":[50917,51003],"content":"Retrieves a pointer to the <ph id=\"ph1\">`CMFCToolBar`</ph> object that contains the given window handle.","source":"Retrieves a pointer to the `CMFCToolBar` object that contains the given window handle."},{"content":"Parameters","pos":[51090,51100]},{"content":"[in]","pos":[51104,51108]},{"content":"The window handle to look for.","pos":[51119,51149]},{"content":"Return Value","pos":[51159,51171]},{"pos":[51175,51310],"content":"A pointer to the <ph id=\"ph1\">`CMFCToolBar`</ph> object that contains the given window handle, or <ph id=\"ph2\">`NULL`</ph> if no corresponding <ph id=\"ph3\">`CMFCToolBar`</ph> object exists.","source":"A pointer to the `CMFCToolBar` object that contains the given window handle, or `NULL` if no corresponding `CMFCToolBar` object exists."},{"content":"Remarks","pos":[51320,51327]},{"pos":[51331,51458],"content":"This shared method examines each toolbar in the application for the <ph id=\"ph1\">`CMFCToolBar`</ph> object that contains the given window handle.","source":"This shared method examines each toolbar in the application for the `CMFCToolBar` object that contains the given window handle."},{"pos":[51511,51537],"content":"CMFCToolBar::GetAllButtons"},{"content":"Returns a read-only list of buttons in a toolbar.","pos":[51541,51590]},{"content":"Return Value","pos":[51656,51668]},{"pos":[51672,51873],"content":"A constant reference to a <bpt id=\"p1\">[</bpt>CObList Class<ept id=\"p1\">](../../mfc/reference/coblist-class.md)</ept> object, which contains a collection of <bpt id=\"p2\">[</bpt>CMFCToolBarButton Class<ept id=\"p2\">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept> objects.","source":"A constant reference to a [CObList Class](../../mfc/reference/coblist-class.md) object, which contains a collection of [CMFCToolBarButton Class](../../mfc/reference/cmfctoolbarbutton-class.md) objects."},{"pos":[51927,51954],"content":"CMFCToolBar::GetAllToolbars"},{"content":"Returns a read-only list of all toolbars in the application.","pos":[51958,52018]},{"content":"Return Value","pos":[52083,52095]},{"pos":[52099,52277],"content":"A const reference to a <bpt id=\"p1\">[</bpt>CObList Class<ept id=\"p1\">](../../mfc/reference/coblist-class.md)</ept> object that contains a collection of <bpt id=\"p2\">[</bpt>CMFCToolbar<ept id=\"p2\">](../../mfc/reference/cmfctoolbar-class.md)</ept> objects.","source":"A const reference to a [CObList Class](../../mfc/reference/coblist-class.md) object that contains a collection of [CMFCToolbar](../../mfc/reference/cmfctoolbar-class.md) objects."},{"pos":[52333,52362],"content":"CMFCToolBar::GetBasicCommands"},{"content":"Returns a read-only list of the basic commands defined in the application.","pos":[52366,52440]},{"content":"Return Value","pos":[52516,52528]},{"pos":[52532,52657],"content":"A const reference to a <bpt id=\"p1\">[</bpt>CList Class<ept id=\"p1\">](../../mfc/reference/clist-class.md)</ept> object that contains a collection of basic commands.","source":"A const reference to a [CList Class](../../mfc/reference/clist-class.md) object that contains a collection of basic commands."},{"content":"Remarks","pos":[52667,52674]},{"pos":[52678,52837],"content":"Add basic commands by calling <bpt id=\"p1\">[</bpt>CMFCToolBar::AddBasicCommand<ept id=\"p1\">](#cmfctoolbar__addbasiccommand)</ept> or <bpt id=\"p2\">[</bpt>CMFCToolBar::SetBasicCommands<ept id=\"p2\">](#cmfctoolbar__setbasiccommands)</ept>.","source":"Add basic commands by calling [CMFCToolBar::AddBasicCommand](#cmfctoolbar__addbasiccommand) or [CMFCToolBar::SetBasicCommands](#cmfctoolbar__setbasiccommands)."},{"pos":[52886,52908],"content":"CMFCToolBar::GetButton"},{"pos":[52912,53039],"content":"Returns a pointer to the <bpt id=\"p1\">[</bpt>CMFCToolBarButton Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept> object at a specified index.","source":"Returns a pointer to the [CMFCToolBarButton Class](../../mfc/reference/cmfctoolbarbutton-class.md) object at a specified index."},{"content":"Parameters","pos":[53115,53125]},{"content":"[in]","pos":[53129,53133]},{"content":"Specifies the index of the button to return.","pos":[53146,53190]},{"content":"Return Value","pos":[53200,53212]},{"pos":[53216,53299],"content":"A pointer to the toolbar button if it exists; or <ph id=\"ph1\">`NULL`</ph> if there is no such button.","source":"A pointer to the toolbar button if it exists; or `NULL` if there is no such button."},{"pos":[53352,53378],"content":"CMFCToolBar::GetButtonInfo"},{"content":"Returns the command ID, style, and image index of the button at a specified index.","pos":[53382,53464]},{"content":"Parameters","pos":[53591,53601]},{"content":"[in]","pos":[53605,53609]},{"content":"Specifies the index of the button in the list of buttons on the toolbar.","pos":[53622,53694]},{"content":"[out]","pos":[53701,53706]},{"content":"The command ID of a button.","pos":[53716,53743]},{"content":"[out]","pos":[53750,53755]},{"content":"The style of the button.","pos":[53768,53792]},{"content":"[out]","pos":[53799,53804]},{"content":"The index of the image for the button.","pos":[53817,53855]},{"content":"Remarks","pos":[53865,53872]},{"pos":[53876,54015],"content":"The <ph id=\"ph1\">`GetButtonInfo`</ph> method finds a toolbar button at the specified index and retrieves the command ID, style and image index of the button.","source":"The `GetButtonInfo` method finds a toolbar button at the specified index and retrieves the command ID, style and image index of the button."},{"pos":[54022,54162],"content":"If the button at the specified index does not exist, the framework sets <ph id=\"ph1\">`nID`</ph> and <ph id=\"ph2\">`nStyle`</ph> to 0, and <ph id=\"ph3\">`iImage`</ph> to -1 when the method returns.","source":"If the button at the specified index does not exist, the framework sets `nID` and `nStyle` to 0, and `iImage` to -1 when the method returns."},{"pos":[54215,54241],"content":"CMFCToolBar::GetButtonSize"},{"content":"Returns the dimensions of each button on the toolbar.","pos":[54245,54298]},{"content":"Return Value","pos":[54355,54367]},{"pos":[54371,54501],"content":"A <bpt id=\"p1\">[</bpt>CSize Class<ept id=\"p1\">](../../atl-mfc-shared/reference/csize-class.md)</ept> object that specifies the dimensions of each button on the toolbar.","source":"A [CSize Class](../../atl-mfc-shared/reference/csize-class.md) object that specifies the dimensions of each button on the toolbar."},{"content":"Remarks","pos":[54511,54518]},{"pos":[54522,54690],"content":"Call <bpt id=\"p1\">[</bpt>CMFCToolBar::SetSizes<ept id=\"p1\">](#cmfctoolbar__setsizes)</ept> or <bpt id=\"p2\">[</bpt>CMFCToolBar::SetLockedSizes<ept id=\"p2\">](#cmfctoolbar__setlockedsizes)</ept> to set the dimensions of each button on the toolbar.","source":"Call [CMFCToolBar::SetSizes](#cmfctoolbar__setsizes) or [CMFCToolBar::SetLockedSizes](#cmfctoolbar__setlockedsizes) to set the dimensions of each button on the toolbar."},{"pos":[54744,54771],"content":"CMFCToolBar::GetButtonStyle"},{"content":"Returns the current style of the toolbar button that is located at the specified index.","pos":[54775,54862]},{"content":"Parameters","pos":[54929,54939]},{"content":"[in]","pos":[54943,54947]},{"content":"Specifies the index of a toolbar button.","pos":[54960,55000]},{"content":"Return Value","pos":[55010,55022]},{"content":"A value that specifies the style of the toolbar button.","pos":[55026,55081]},{"content":".","pos":[55082,55083]},{"content":"See <bpt id=\"p1\">[</bpt>ToolBar Control Styles<ept id=\"p1\">](../../mfc/reference/toolbar-control-styles.md)</ept> for a list of possible styles.","pos":[55084,55190],"source":" See [ToolBar Control Styles](../../mfc/reference/toolbar-control-styles.md) for a list of possible styles."},{"content":"Remarks","pos":[55200,55207]},{"pos":[55211,55312],"content":"Call <bpt id=\"p1\">[</bpt>CMFCToolBar::SetButtonStyle<ept id=\"p1\">](#cmfctoolbar__setbuttonstyle)</ept> to set the style of a toolbar button","source":"Call [CMFCToolBar::SetButtonStyle](#cmfctoolbar__setbuttonstyle) to set the style of a toolbar button"},{"pos":[55365,55391],"content":"CMFCToolBar::GetButtonText"},{"content":"Returns the text label of a button that has a specified index.","pos":[55395,55457]},{"content":"Parameters","pos":[55601,55611]},{"content":"[in]","pos":[55615,55619]},{"content":"The index of a toolbar button.","pos":[55632,55662]},{"content":"[out]","pos":[55669,55674]},{"content":"The label text of the toolbar button.","pos":[55688,55725]},{"content":"Return Value","pos":[55735,55747]},{"content":"The label text of the toolbar button.","pos":[55751,55788]},{"content":"Remarks","pos":[55798,55805]},{"pos":[55809,55963],"content":"Call <bpt id=\"p1\">[</bpt>CMFCToolBar::SetButtonText<ept id=\"p1\">](#cmfctoolbar__setbuttontext)</ept> or <bpt id=\"p2\">[</bpt>CMFCToolBar::SetToolBarBtnText<ept id=\"p2\">](#cmfctoolbar__settoolbarbtntext)</ept> to set the text label.","source":"Call [CMFCToolBar::SetButtonText](#cmfctoolbar__setbuttontext) or [CMFCToolBar::SetToolBarBtnText](#cmfctoolbar__settoolbarbtntext) to set the text label."},{"pos":[56016,56042],"content":"CMFCToolBar::GetColdImages"},{"content":"Returns a pointer to the collection of cold toolbar button images in the application.","pos":[56046,56131]},{"content":"Return Value","pos":[56199,56211]},{"content":"A pointer to the collection of cold toolbar button images.","pos":[56215,56273]},{"content":"Remarks","pos":[56283,56290]},{"content":"Cold images are the images that are used when the user is not interacting with the toolbar buttons.","pos":[56294,56393]},{"content":"Call <bpt id=\"p1\">[</bpt>CMFCToolBar::LoadBitmapEx<ept id=\"p1\">](#cmfctoolbar__loadbitmapex)</ept> or <bpt id=\"p2\">[</bpt>CMFCToolBar::LoadBitmap<ept id=\"p2\">](#cmfctoolbar__loadbitmap)</ept> to load the cold images.","pos":[56394,56534],"source":" Call [CMFCToolBar::LoadBitmapEx](#cmfctoolbar__loadbitmapex) or [CMFCToolBar::LoadBitmap](#cmfctoolbar__loadbitmap) to load the cold images."},{"pos":[56588,56615],"content":"CMFCToolBar::GetColumnWidth"},{"content":"Returns the width of the toolbar buttons.","pos":[56619,56660]},{"content":"Return Value","pos":[56724,56736]},{"content":"A value that specifies the width of toolbar buttons.","pos":[56740,56792]},{"content":"Remarks","pos":[56802,56809]},{"content":"The framework calls this method to calculate toolbar layout.","pos":[56813,56873]},{"content":"Override this method in a derived class to specify a different column width for your toolbar.","pos":[56874,56967]},{"pos":[57024,57054],"content":"CMFCToolBar::GetCommandButtons"},{"content":"Returns a list of buttons that have a specified command ID from all toolbars in the application.","pos":[57058,57154]},{"content":"Parameters","pos":[57254,57264]},{"content":"[in]","pos":[57268,57272]},{"content":"The command ID of the buttons.","pos":[57284,57314]},{"content":"[out]","pos":[57321,57326]},{"content":"A reference to a <bpt id=\"p1\">[</bpt>CObList Class<ept id=\"p1\">](../../mfc/reference/coblist-class.md)</ept> object that receives the list of toolbar buttons.","pos":[57344,57464],"source":" A reference to a [CObList Class](../../mfc/reference/coblist-class.md) object that receives the list of toolbar buttons."},{"content":"Return Value","pos":[57474,57486]},{"content":"The number of buttons that have the specified command ID.","pos":[57490,57547]},{"pos":[57595,57616],"content":"CMFCToolBar::GetCount"},{"content":"Returns the number of buttons and separators on the toolbar.","pos":[57620,57680]},{"content":"Return Value","pos":[57730,57742]},{"content":"The number of buttons and separators on the toolbar.","pos":[57746,57798]},{"pos":[57856,57887],"content":"CMFCToolBar::GetCustomizeButton"},{"pos":[57891,57983],"content":"Retrieves a pointer to the <ph id=\"ph1\">`CMFCCustomizeButton`</ph> object that is associated with the toolbar.","source":"Retrieves a pointer to the `CMFCCustomizeButton` object that is associated with the toolbar."},{"content":"Return Value","pos":[58051,58063]},{"pos":[58067,58149],"content":"A pointer to the <ph id=\"ph1\">`CMFCCustomizeButton`</ph> object that is associated with the toolbar.","source":"A pointer to the `CMFCCustomizeButton` object that is associated with the toolbar."},{"content":"Remarks","pos":[58159,58166]},{"content":"This method retrieves the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> button that appears at the end of the toolbar.","pos":[58170,58256],"source":"This method retrieves the **Customize** button that appears at the end of the toolbar."},{"content":"Use the <bpt id=\"p1\">[</bpt>CMFCToolBar::EnableCustomizeButton<ept id=\"p1\">](#cmfctoolbar__enablecustomizebutton)</ept> method to add the <bpt id=\"p2\">**</bpt>Customize<ept id=\"p2\">**</ept> button to your toolbar.","pos":[58257,58394],"source":" Use the [CMFCToolBar::EnableCustomizeButton](#cmfctoolbar__enablecustomizebutton) method to add the **Customize** button to your toolbar."},{"pos":[58401,58580],"content":"You can call the <bpt id=\"p1\">[</bpt>CMFCToolBar::IsExistCustomizeButton<ept id=\"p1\">](#cmfctoolbar__isexistcustomizebutton)</ept> method to determine whether the toolbar contains a valid <ph id=\"ph1\">`CMFCCustomizeButton`</ph> object.","source":"You can call the [CMFCToolBar::IsExistCustomizeButton](#cmfctoolbar__isexistcustomizebutton) method to determine whether the toolbar contains a valid `CMFCCustomizeButton` object."},{"pos":[58635,58663],"content":"CMFCToolBar::GetDefaultImage"},{"content":"Returns the index of the default image for a toolbar button with a specified command ID.","pos":[58667,58755]},{"content":"Parameters","pos":[58819,58829]},{"content":"[in]","pos":[58833,58837]},{"content":"Specifies the command ID of the button.","pos":[58848,58887]},{"content":"Return Value","pos":[58897,58909]},{"content":"The index of the toolbar image in the shared list of images.","pos":[58913,58973]},{"content":"Remarks","pos":[58983,58990]},{"content":"Use this shared method to retrieve the index of the default image for a toolbar button with the specified command ID.","pos":[58994,59111]},{"content":"The return value is an index into the shared collection of toolbar button images for all toolbars in the application.","pos":[59112,59229]},{"content":"Call the <bpt id=\"p1\">[</bpt>CMFCToolBar::GetImages<ept id=\"p1\">](#cmfctoolbar__getimages)</ept> method to obtain a pointer to this collection.","pos":[59230,59335],"source":" Call the [CMFCToolBar::GetImages](#cmfctoolbar__getimages) method to obtain a pointer to this collection."},{"pos":[59392,59422],"content":"CMFCToolBar::GetDisabledImages"},{"content":"Returns a pointer to the collection of images that are used for disabled toolbar buttons in the application.","pos":[59426,59534]},{"content":"Return Value","pos":[59616,59628]},{"content":"A pointer to the collection of disabled toolbar button images.","pos":[59632,59694]},{"content":"Remarks","pos":[59704,59711]},{"pos":[59715,59920],"content":"Load the disabled toolbar button images by using the <bpt id=\"p1\">[</bpt>CMFCToolBarEditBoxButton Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbareditboxbutton-class.md)</ept> and <bpt id=\"p2\">[</bpt>CMFCToolBar::LoadBitmap<ept id=\"p2\">](#cmfctoolbar__loadbitmap)</ept> methods.","source":"Load the disabled toolbar button images by using the [CMFCToolBarEditBoxButton Class](../../mfc/reference/cmfctoolbareditboxbutton-class.md) and [CMFCToolBar::LoadBitmap](#cmfctoolbar__loadbitmap) methods."},{"pos":[59981,60015],"content":"CMFCToolBar::GetDisabledMenuImages"},{"content":"Returns a pointer to the collection of images that are used for disabled menu buttons in the application.","pos":[60019,60124]},{"content":"Return Value","pos":[60210,60222]},{"content":"A pointer to the collection of disabled menu images.","pos":[60226,60278]},{"content":"Remarks","pos":[60288,60295]},{"pos":[60299,60432],"content":"Load the disabled images by using the <bpt id=\"p1\">[</bpt>CMFCToolBarEditBoxButton Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbareditboxbutton-class.md)</ept> method.","source":"Load the disabled images by using the [CMFCToolBarEditBoxButton Class](../../mfc/reference/cmfctoolbareditboxbutton-class.md) method."},{"pos":[60490,60521],"content":"CMFCToolBar::GetDroppedDownMenu"},{"content":"Retrieves a pointer to the menu button object that is currently displaying its sub-menu.","pos":[60525,60613]},{"content":"Parameters","pos":[60710,60720]},{"content":"[out]","pos":[60724,60729]},{"content":"Receives the index of the button in the collection of toolbar buttons.","pos":[60742,60812]},{"content":"Return Value","pos":[60822,60834]},{"pos":[60838,60954],"content":"A pointer to the menu button object that is displaying its sub-menu or <ph id=\"ph1\">`NULL`</ph> if no menu is displaying its sub-menu.","source":"A pointer to the menu button object that is displaying its sub-menu or `NULL` if no menu is displaying its sub-menu."},{"content":"Remarks","pos":[60964,60971]},{"pos":[60975,61155],"content":"If this method returns a non- <ph id=\"ph1\">`NULL`</ph> value and <ph id=\"ph2\">`pIndex`</ph> is not <ph id=\"ph3\">`NULL`</ph>, the value pointed to by <ph id=\"ph4\">`pIndex`</ph> is set to the index of the menu button in the collection of toolbar buttons.","source":"If this method returns a non- `NULL` value and `pIndex` is not `NULL`, the value pointed to by `pIndex` is set to the index of the menu button in the collection of toolbar buttons."},{"pos":[61217,61252],"content":"CMFCToolBar::GetGrayDisabledButtons"},{"content":"Specifies whether the images of disabled buttons are dimmed versions of the regular button images, or taken from the collection of disabled button images.","pos":[61256,61410]},{"content":"Return Value","pos":[61475,61487]},{"pos":[61498,61600],"content":"to dim the images of disabled buttons; <ph id=\"ph1\">`FALSE`</ph>to obtain images from the collection of disabled images.","source":" to dim the images of disabled buttons; `FALSE`to obtain images from the collection of disabled images."},{"content":"Remarks","pos":[61610,61617]},{"pos":[61621,61787],"content":"Use <bpt id=\"p1\">[</bpt>CMFCToolBar::SetGrayDisabledButtons<ept id=\"p1\">](#cmfctoolbar__setgraydisabledbuttons)</ept> to switch between dimmed images and the images from the collection of disabled images.","source":"Use [CMFCToolBar::SetGrayDisabledButtons](#cmfctoolbar__setgraydisabledbuttons) to switch between dimmed images and the images from the collection of disabled images."},{"pos":[61847,61880],"content":"CMFCToolBar::GetHighlightedButton"},{"content":"Returns a pointer to the toolbar button that is currently highlighted.","pos":[61884,61954]},{"content":"Return Value","pos":[62031,62043]},{"pos":[62047,62123],"content":"A pointer to a toolbar button object; or <ph id=\"ph1\">`NULL`</ph> if no button is highlighted.","source":"A pointer to a toolbar button object; or `NULL` if no button is highlighted."},{"content":"Remarks","pos":[62133,62140]},{"content":"A toolbar button is highlighted if it has keyboard focus.","pos":[62144,62201]},{"content":"A toolbar button is also highlighted if the toolbar buttons are hot-tracked in this application (for more information, see <bpt id=\"p1\">[</bpt>CMFCToolBar::GetHotBorder<ept id=\"p1\">](#cmfctoolbar__gethotborder)</ept> and <bpt id=\"p2\">[</bpt>CMFCToolBar::SetHotBorder<ept id=\"p2\">](#cmfctoolbar__sethotborder)</ept>) and the mouse is pointing at it when no toolbar button or menu item has keyboard focus.","pos":[62202,62529],"source":" A toolbar button is also highlighted if the toolbar buttons are hot-tracked in this application (for more information, see [CMFCToolBar::GetHotBorder](#cmfctoolbar__gethotborder) and [CMFCToolBar::SetHotBorder](#cmfctoolbar__sethotborder)) and the mouse is pointing at it when no toolbar button or menu item has keyboard focus."},{"pos":[62581,62606],"content":"CMFCToolBar::GetHotBorder"},{"content":"Determines whether the toolbar buttons are <bpt id=\"p1\">*</bpt>hot-tracked<ept id=\"p1\">*</ept>.","pos":[62610,62667],"source":"Determines whether the toolbar buttons are *hot-tracked*."},{"content":"If a button is hot-tracked, it is highlighted when the mouse moves across it.","pos":[62668,62745]},{"content":"Return Value","pos":[62800,62812]},{"pos":[62823,62882],"content":"if the toolbar buttons are hot-tracked; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the toolbar buttons are hot-tracked; otherwise, `FALSE`."},{"content":"Remarks","pos":[62892,62899]},{"content":"By default, toolbar buttons are hot-tracked.","pos":[62903,62947]},{"pos":[63002,63030],"content":"CMFCToolBar::GetHotTextColor"},{"content":"Returns the text color of the highlighted toolbar buttons.","pos":[63034,63092]},{"content":"Return Value","pos":[63152,63164]},{"pos":[63168,63297],"content":"A <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> value that represent the current highlighted text color.","source":"A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) value that represent the current highlighted text color."},{"content":"Remarks","pos":[63307,63314]},{"pos":[63318,63441],"content":"Call <bpt id=\"p1\">[</bpt>CMFCToolBar::SetHotTextColor<ept id=\"p1\">](#cmfctoolbar__sethottextcolor)</ept> to set a new text color for highlighted toolbar buttons.","source":"Call [CMFCToolBar::SetHotTextColor](#cmfctoolbar__sethottextcolor) to set a new text color for highlighted toolbar buttons."},{"pos":[63497,63526],"content":"CMFCToolBar::GetHwndLastFocus"},{"content":"Returns a handle to the window that had the input focus just before the toolbar did.","pos":[63530,63614]},{"content":"Return Value","pos":[63673,63685]},{"pos":[63689,63879],"content":"A handle to window that is not derived from <bpt id=\"p1\">[</bpt>CMFCBaseToolBar Class<ept id=\"p1\">](../../mfc/reference/cmfcbasetoolbar-class.md)</ept>, which previously had the input focus; or <ph id=\"ph1\">`NULL`</ph> if there is no such window.","source":"A handle to window that is not derived from [CMFCBaseToolBar Class](../../mfc/reference/cmfcbasetoolbar-class.md), which previously had the input focus; or `NULL` if there is no such window."},{"content":"Remarks","pos":[63889,63896]},{"pos":[63900,64082],"content":"When a <bpt id=\"p1\">[</bpt>CMFCToolBar<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md)</ept> control receives the input focus, it stores a handle to the window that lost the focus so that it can restore it later.","source":"When a [CMFCToolBar](../../mfc/reference/cmfctoolbar-class.md) control receives the input focus, it stores a handle to the window that lost the focus so that it can restore it later."},{"pos":[64138,64167],"content":"CMFCToolBar::GetIgnoreSetText"},{"content":"Specifies whether calls to set button labels are ignored.","pos":[64171,64228]},{"content":"Return Value","pos":[64287,64299]},{"pos":[64310,64372],"content":"if calls to set button labels are ignored; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if calls to set button labels are ignored; otherwise, `FALSE`."},{"content":"Remarks","pos":[64382,64389]},{"pos":[64438,64460],"content":"CMFCToolBar::GetImages"},{"content":"Returns a pointer to the collection of default button images in the application.","pos":[64464,64544]},{"content":"Return Value","pos":[64608,64620]},{"pos":[64624,64805],"content":"A pointer to the <bpt id=\"p1\">[</bpt>CMFCToolBarImages Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbarimages-class.md)</ept> object that contains the collection of default images for all toolbars in the application.","source":"A pointer to the [CMFCToolBarImages Class](../../mfc/reference/cmfctoolbarimages-class.md) object that contains the collection of default images for all toolbars in the application."},{"content":"Remarks","pos":[64815,64822]},{"content":"This shared method provides access to the collection of all default toolbar images for the application.","pos":[64826,64929]},{"content":"Call the <bpt id=\"p1\">[</bpt>CMFCToolBar::LoadBitmap<ept id=\"p1\">](#cmfctoolbar__loadbitmap)</ept> method to add images to the collection.","pos":[64930,65030],"source":" Call the [CMFCToolBar::LoadBitmap](#cmfctoolbar__loadbitmap) method to add images to the collection."},{"pos":[65082,65107],"content":"CMFCToolBar::GetImageSize"},{"content":"Returns the current size of toolbar button images.","pos":[65111,65161]},{"content":"Return Value","pos":[65217,65229]},{"pos":[65233,65361],"content":"A <bpt id=\"p1\">[</bpt>CSize Class<ept id=\"p1\">](../../atl-mfc-shared/reference/csize-class.md)</ept> object that represents the current size of toolbar button images.","source":"A [CSize Class](../../atl-mfc-shared/reference/csize-class.md) object that represents the current size of toolbar button images."},{"pos":[65416,65444],"content":"CMFCToolBar::GetImagesOffset"},{"content":"Returns the index offset used to find the toolbar button images for this toolbar in the global list of toolbar button images.","pos":[65448,65573]},{"content":"Return Value","pos":[65630,65642]},{"content":"The index offset of the toolbar images.","pos":[65646,65685]},{"content":"Remarks","pos":[65695,65702]},{"content":"All toolbar default images are stored in the global <bpt id=\"p1\">[</bpt>CMFCToolBarImages Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbarimages-class.md)</ept> list.","pos":[65706,65837],"source":"All toolbar default images are stored in the global [CMFCToolBarImages Class](../../mfc/reference/cmfctoolbarimages-class.md) list."},{"content":"The images for each button in the toolbar are stored consecutively in that list.","pos":[65838,65918]},{"content":"To compute the index of the image, add the index of the button in the toolbar to the offset of the beginning of the list of images for that toolbar button.","pos":[65919,66074]},{"pos":[66081,66214],"content":"Call <bpt id=\"p1\">[</bpt>CMFCToolBar::ButtonToIndex<ept id=\"p1\">](#cmfctoolbar__buttontoindex)</ept> to obtain the index of a toolbar button given a pointer to the button.","source":"Call [CMFCToolBar::ButtonToIndex](#cmfctoolbar__buttontoindex) to obtain the index of a toolbar button given a pointer to the button."},{"pos":[66221,66332],"content":"Call <bpt id=\"p1\">[</bpt>CMFCToolBar::GetImages<ept id=\"p1\">](#cmfctoolbar__getimages)</ept> to obtain a pointer to the collection of toolbar images.","source":"Call [CMFCToolBar::GetImages](#cmfctoolbar__getimages) to obtain a pointer to the collection of toolbar images."},{"pos":[66393,66427],"content":"CMFCToolBar::GetInvalidateItemRect"},{"content":"Retrieves the region of the client area that must be redrawn for the button at the given index.","pos":[66431,66526]},{"content":"Parameters","pos":[66634,66644]},{"content":"[in]","pos":[66648,66652]},{"content":"The index of the button for which to retrieve the client area.","pos":[66665,66727]},{"content":"[out]","pos":[66734,66739]},{"content":"A pointer to a <ph id=\"ph1\">`RECT`</ph> object that receives the region of the client area.","pos":[66752,66825],"source":" A pointer to a `RECT` object that receives the region of the client area."},{"content":"Remarks","pos":[66835,66842]},{"content":"The <ph id=\"ph1\">`lpRect`</ph> parameter must not be <ph id=\"ph2\">`NULL`</ph>.","pos":[66846,66888],"source":"The `lpRect` parameter must not be `NULL`."},{"content":"If no button exists at the provided index, <ph id=\"ph1\">`lpRect`</ph> receives a <ph id=\"ph2\">`RECT`</ph> object that is initialized to zero.","pos":[66889,66994],"source":" If no button exists at the provided index, `lpRect` receives a `RECT` object that is initialized to zero."},{"pos":[67043,67065],"content":"CMFCToolBar::GetItemID"},{"content":"Returns the command ID of the toolbar button at a specified index.","pos":[67069,67135]},{"content":"Parameters","pos":[67197,67207]},{"content":"[in]","pos":[67211,67215]},{"content":"Specifies the index of the toolbar button.","pos":[67228,67270]},{"content":"Return Value","pos":[67280,67292]},{"content":"The command ID of the toolbar button; or zero if the button with the specified index does not exist.","pos":[67296,67396]},{"pos":[67447,67471],"content":"CMFCToolBar::GetItemRect"},{"content":"Returns the bounding rectangle of the button at a specified index.","pos":[67475,67541]},{"content":"Parameters","pos":[67639,67649]},{"content":"[in]","pos":[67653,67657]},{"content":"Specifies the index of a toolbar button.","pos":[67670,67710]},{"content":"[out]","pos":[67717,67722]},{"content":"A pointer to <ph id=\"ph1\">`CRect`</ph> object that receives the coordinates of the image bounding rectangle.","pos":[67735,67825],"source":" A pointer to `CRect` object that receives the coordinates of the image bounding rectangle."},{"content":"Remarks","pos":[67835,67842]},{"pos":[67846,67952],"content":"The <ph id=\"ph1\">`CRect`</ph> object to which <ph id=\"ph2\">`lpRect`</ph> points is set to 0 if a button at the specified index does not exist.","source":"The `CRect` object to which `lpRect` points is set to 0 if a button at the specified index does not exist."},{"content":"Example","pos":[67962,67969]},{"content":"The following example demonstrates how to use the <ph id=\"ph1\">`GetItemRect`</ph> method of the <ph id=\"ph2\">`CMFCToolBar`</ph> class.","pos":[67973,68071],"source":"The following example demonstrates how to use the `GetItemRect` method of the `CMFCToolBar` class."},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>IE Demo sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[68072,68151],"source":" This code snippet is part of the [IE Demo sample](../../visual-cpp-samples.md)."},{"content":"NVC_MFC_IEDemo#6","pos":[68169,68185]},{"content":"NVC_MFC_IEDemo#9","pos":[68260,68276]},{"pos":[68397,68428],"content":"CMFCToolBar::GetLargeColdImages"},{"content":"Returns a pointer to the collection of large cold toolbar button images in the application.","pos":[68432,68523]},{"content":"Return Value","pos":[68596,68608]},{"content":"A pointer to the collection of large cold images.","pos":[68612,68661]},{"content":"Remarks","pos":[68671,68678]},{"content":"Cold images are the images that are used when the user is not interacting with the toolbar buttons.","pos":[68682,68781]},{"content":"Call <bpt id=\"p1\">[</bpt>CMFCToolBar::LoadBitmapEx<ept id=\"p1\">](#cmfctoolbar__loadbitmapex)</ept> to load the large cold images.","pos":[68782,68873],"source":" Call [CMFCToolBar::LoadBitmapEx](#cmfctoolbar__loadbitmapex) to load the large cold images."},{"pos":[68935,68970],"content":"CMFCToolBar::GetLargeDisabledImages"},{"content":"Returns a pointer to the collection of large disabled toolbar button images in the application.","pos":[68974,69069]},{"content":"Return Value","pos":[69146,69158]},{"content":"A pointer to the collection of large disabled toolbar button images.","pos":[69162,69230]},{"content":"Remarks","pos":[69240,69247]},{"content":"Large images are large versions of the regular toolbar button images.","pos":[69251,69320]},{"content":"Call <bpt id=\"p1\">[</bpt>CMFCToolBar::LoadBitmapEx<ept id=\"p1\">](#cmfctoolbar__loadbitmapex)</ept> or <bpt id=\"p2\">[</bpt>CMFCToolBar::LoadBitmap<ept id=\"p2\">](#cmfctoolbar__loadbitmap)</ept> to load the large images.","pos":[69321,69462],"source":" Call [CMFCToolBar::LoadBitmapEx](#cmfctoolbar__loadbitmapex) or [CMFCToolBar::LoadBitmap](#cmfctoolbar__loadbitmap) to load the large images."},{"pos":[69516,69543],"content":"CMFCToolBar::GetLargeImages"},{"content":"Returns a pointer to the collection of large toolbar button images in the application.","pos":[69547,69633]},{"content":"Return Value","pos":[69702,69714]},{"content":"A pointer to the collection of large toolbar button images.","pos":[69718,69777]},{"content":"Remarks","pos":[69787,69794]},{"content":"Large images are large versions of the regular toolbar button images.","pos":[69798,69867]},{"content":"Call <bpt id=\"p1\">[</bpt>CMFCToolBar::LoadBitmapEx<ept id=\"p1\">](#cmfctoolbar__loadbitmapex)</ept> to load the large images.","pos":[69868,69954],"source":" Call [CMFCToolBar::LoadBitmapEx](#cmfctoolbar__loadbitmapex) to load the large images."},{"pos":[70013,70045],"content":"CMFCToolBar::GetLockedColdImages"},{"content":"Returns a pointer to the collection of locked cold images in the toolbar.","pos":[70049,70122]},{"content":"Return Value","pos":[70189,70201]},{"pos":[70205,70295],"content":"A pointer to the collection of locked cold images, or <ph id=\"ph1\">`NULL`</ph> if the toolbar is not locked.","source":"A pointer to the collection of locked cold images, or `NULL` if the toolbar is not locked."},{"content":"Remarks","pos":[70305,70312]},{"content":"Locked images are versions of the regular toolbar button images that the framework uses when the user cannot customize the toolbar.","pos":[70316,70447]},{"content":"Cold images are the images that are used when the user is not interacting with the toolbar buttons.","pos":[70448,70547]},{"content":"This method returns <ph id=\"ph1\">`NULL`</ph> if the toolbar is not locked.","pos":[70554,70610],"source":"This method returns `NULL` if the toolbar is not locked."},{"content":"This method also generates an assertion failure in Debug builds if the toolbar is not locked.","pos":[70611,70704]},{"content":"For more information about locked toolbars, see <bpt id=\"p1\">[</bpt>CMFCToolBar::IsLocked<ept id=\"p1\">](#cmfctoolbar__islocked)</ept>.","pos":[70705,70801],"source":" For more information about locked toolbars, see [CMFCToolBar::IsLocked](#cmfctoolbar__islocked)."},{"pos":[70808,70911],"content":"Call the <bpt id=\"p1\">[</bpt>CMFCToolBar::LoadBitmapEx<ept id=\"p1\">](#cmfctoolbar__loadbitmapex)</ept> method to load the locked cold images.","source":"Call the [CMFCToolBar::LoadBitmapEx](#cmfctoolbar__loadbitmapex) method to load the locked cold images."},{"pos":[70974,71010],"content":"CMFCToolBar::GetLockedDisabledImages"},{"content":"Returns a pointer to the collection of locked disabled images in the toolbar.","pos":[71014,71091]},{"content":"Return Value","pos":[71162,71174]},{"pos":[71178,71272],"content":"A pointer to the collection of locked disabled images, or <ph id=\"ph1\">`NULL`</ph> if the toolbar is not locked.","source":"A pointer to the collection of locked disabled images, or `NULL` if the toolbar is not locked."},{"content":"Remarks","pos":[71282,71289]},{"content":"Locked images are versions of the regular toolbar button images that the framework uses when the user cannot customize the toolbar.","pos":[71293,71424]},{"content":"Disabled images are the images that the framework uses when a button has the <ph id=\"ph1\">`TBBS_DISABLED`</ph> style.","pos":[71425,71524],"source":" Disabled images are the images that the framework uses when a button has the `TBBS_DISABLED` style."},{"content":"This method returns <ph id=\"ph1\">`NULL`</ph> if the toolbar is not locked.","pos":[71531,71587],"source":"This method returns `NULL` if the toolbar is not locked."},{"content":"This method also generates an assertion failure in Debug builds if the toolbar is not locked.","pos":[71588,71681]},{"content":"For more information about locked toolbars, see <bpt id=\"p1\">[</bpt>CMFCToolBar::IsLocked<ept id=\"p1\">](#cmfctoolbar__islocked)</ept>.","pos":[71682,71778],"source":" For more information about locked toolbars, see [CMFCToolBar::IsLocked](#cmfctoolbar__islocked)."},{"pos":[71785,71892],"content":"Call the <bpt id=\"p1\">[</bpt>CMFCToolBar::LoadBitmapEx<ept id=\"p1\">](#cmfctoolbar__loadbitmapex)</ept> method to load the locked disabled images.","source":"Call the [CMFCToolBar::LoadBitmapEx](#cmfctoolbar__loadbitmapex) method to load the locked disabled images."},{"pos":[71947,71975],"content":"CMFCToolBar::GetLockedImages"},{"content":"Returns a pointer to the collection of locked button images in the toolbar.","pos":[71979,72054]},{"content":"Return Value","pos":[72117,72129]},{"pos":[72133,72233],"content":"A pointer to the collection of locked toolbar button images, or <ph id=\"ph1\">`NULL`</ph> if the toolbar is not locked.","source":"A pointer to the collection of locked toolbar button images, or `NULL` if the toolbar is not locked."},{"content":"Remarks","pos":[72243,72250]},{"content":"Locked images are versions of the regular toolbar button images that the framework uses when the user cannot customize the toolbar.","pos":[72254,72385]},{"content":"This method returns <ph id=\"ph1\">`NULL`</ph> if the toolbar is not locked.","pos":[72392,72448],"source":"This method returns `NULL` if the toolbar is not locked."},{"content":"This method also generates an assertion failure in Debug builds if the toolbar is not locked.","pos":[72449,72542]},{"content":"For more information about locked toolbars, see <bpt id=\"p1\">[</bpt>CMFCToolBar::IsLocked<ept id=\"p1\">](#cmfctoolbar__islocked)</ept>.","pos":[72543,72639],"source":" For more information about locked toolbars, see [CMFCToolBar::IsLocked](#cmfctoolbar__islocked)."},{"pos":[72697,72728],"content":"CMFCToolBar::GetLockedImageSize"},{"content":"Returns the default size of locked toolbar images.","pos":[72732,72782]},{"content":"Return Value","pos":[72844,72856]},{"pos":[72860,72988],"content":"A <ph id=\"ph1\">`CSize`</ph> structure that specifies the size of locked toolbar images or an empty <ph id=\"ph2\">`CSize`</ph> structure if the toolbar is not locked.","source":"A `CSize` structure that specifies the size of locked toolbar images or an empty `CSize` structure if the toolbar is not locked."},{"content":"Remarks","pos":[72998,73005]},{"content":"Locked images are versions of the regular toolbar button images that the framework uses when the user cannot customize the toolbar.","pos":[73009,73140]},{"content":"This method returns a <ph id=\"ph1\">`CSize`</ph> structure with zero width and zero height if the toolbar is not locked.","pos":[73147,73248],"source":"This method returns a `CSize` structure with zero width and zero height if the toolbar is not locked."},{"content":"This method also generates an assertion failure in Debug builds if the toolbar is not locked.","pos":[73249,73342]},{"content":"For more information about locked toolbars, see <bpt id=\"p1\">[</bpt>CMFCToolBar::IsLocked<ept id=\"p1\">](#cmfctoolbar__islocked)</ept>.","pos":[73343,73439],"source":" For more information about locked toolbars, see [CMFCToolBar::IsLocked](#cmfctoolbar__islocked)."},{"pos":[73446,73555],"content":"Call the <bpt id=\"p1\">[</bpt>CMFCToolBar::SetLockedSizes<ept id=\"p1\">](#cmfctoolbar__setlockedsizes)</ept> method to specify the locked image size.","source":"Call the [CMFCToolBar::SetLockedSizes](#cmfctoolbar__setlockedsizes) method to specify the locked image size."},{"pos":[73614,73646],"content":"CMFCToolBar::GetLockedMenuImages"},{"content":"Returns a pointer to the collection of locked toolbar menu images in the toolbar.","pos":[73650,73731]},{"content":"Return Value","pos":[73798,73810]},{"pos":[73814,73912],"content":"A pointer to the collection of locked toolbar menu images, or <ph id=\"ph1\">`NULL`</ph> if the toolbar is not locked.","source":"A pointer to the collection of locked toolbar menu images, or `NULL` if the toolbar is not locked."},{"content":"Remarks","pos":[73922,73929]},{"content":"Locked images are versions of the regular toolbar menu images that the framework uses when the user cannot customize the toolbar.","pos":[73933,74062]},{"content":"This method returns <ph id=\"ph1\">`NULL`</ph> if the toolbar is not locked.","pos":[74069,74125],"source":"This method returns `NULL` if the toolbar is not locked."},{"content":"This method also generates an assertion failure in Debug builds if the toolbar is not locked.","pos":[74126,74219]},{"content":"For more information about locked toolbars, see <bpt id=\"p1\">[</bpt>CMFCToolBar::IsLocked<ept id=\"p1\">](#cmfctoolbar__islocked)</ept>.","pos":[74220,74316],"source":" For more information about locked toolbars, see [CMFCToolBar::IsLocked](#cmfctoolbar__islocked)."},{"pos":[74323,74426],"content":"Call the <bpt id=\"p1\">[</bpt>CMFCToolBar::LoadBitmapEx<ept id=\"p1\">](#cmfctoolbar__loadbitmapex)</ept> method to load the locked menu images.","source":"Call the [CMFCToolBar::LoadBitmapEx](#cmfctoolbar__loadbitmapex) method to load the locked menu images."},{"pos":[74483,74513],"content":"CMFCToolBar::GetMenuButtonSize"},{"content":"Returns the size of menu buttons in the application.","pos":[74517,74569]},{"content":"Return Value","pos":[74628,74640]},{"pos":[74644,74713],"content":"A <ph id=\"ph1\">`CSize`</ph> object that represents the size of menu buttons, in pixels.","source":"A `CSize` object that represents the size of menu buttons, in pixels."},{"content":"Remarks","pos":[74723,74730]},{"content":"The size of menu buttons on toolbars is maintained as a global variable and can be retrieved by this static method.","pos":[74734,74849]},{"pos":[74856,74945],"content":"Call <bpt id=\"p1\">[</bpt>CMFCToolBar::SetMenuSizes<ept id=\"p1\">](#cmfctoolbar__setmenusizes)</ept> to set this global variable.","source":"Call [CMFCToolBar::SetMenuSizes](#cmfctoolbar__setmenusizes) to set this global variable."},{"pos":[74998,75024],"content":"CMFCToolBar::GetMenuImages"},{"content":"Returns a pointer to the collection of menu button images in the application.","pos":[75028,75105]},{"content":"Return Value","pos":[75173,75185]},{"content":"A pointer to the collection of menu images.","pos":[75189,75232]},{"content":"Remarks","pos":[75242,75249]},{"pos":[75253,75349],"content":"Call the <bpt id=\"p1\">[</bpt>CMFCToolBar::LoadBitmapEx<ept id=\"p1\">](#cmfctoolbar__loadbitmapex)</ept> method to load the menu images.","source":"Call the [CMFCToolBar::LoadBitmapEx](#cmfctoolbar__loadbitmapex) method to load the menu images."},{"pos":[75356,75472],"content":"Call the <bpt id=\"p1\">[</bpt>CMFCToolBar::SetMenuSizes<ept id=\"p1\">](#cmfctoolbar__setmenusizes)</ept> method to set the size of buttons and their images.","source":"Call the [CMFCToolBar::SetMenuSizes](#cmfctoolbar__setmenusizes) method to set the size of buttons and their images."},{"pos":[75528,75557],"content":"CMFCToolBar::GetMenuImageSize"},{"content":"Returns the size of menu button images in the application.","pos":[75561,75619]},{"content":"Return Value","pos":[75677,75689]},{"pos":[75693,75750],"content":"A <ph id=\"ph1\">`CSize`</ph> object that represents the size of menu images.","source":"A `CSize` object that represents the size of menu images."},{"content":"Remarks","pos":[75760,75767]},{"content":"This method returns the size of images on toolbar menu buttons that is maintained as a global variable.","pos":[75771,75874]},{"content":"Call <bpt id=\"p1\">[</bpt>CMFCToolBar::SetMenuSizes<ept id=\"p1\">](#cmfctoolbar__setmenusizes)</ept> to set this global variable.","pos":[75875,75964],"source":" Call [CMFCToolBar::SetMenuSizes](#cmfctoolbar__setmenusizes) to set this global variable."},{"pos":[76018,76045],"content":"CMFCToolBar::GetOrigButtons"},{"content":"Retrieves the collection of non-customized buttons of the toolbar.","pos":[76049,76115]},{"content":"Return Value","pos":[76182,76194]},{"content":"A reference to the list of non-customized buttons of the toolbar.","pos":[76198,76263]},{"content":"Remarks","pos":[76273,76280]},{"content":"The framework creates a copy of toolbar buttons before they are customized by the user.","pos":[76284,76371]},{"content":"The <bpt id=\"p1\">[</bpt>CMFCToolBar::SetButtons<ept id=\"p1\">](#cmfctoolbar__setbuttons)</ept> method adds a copy of each button in the provided array to the list of original buttons.","pos":[76372,76516],"source":" The [CMFCToolBar::SetButtons](#cmfctoolbar__setbuttons) method adds a copy of each button in the provided array to the list of original buttons."},{"content":"The <bpt id=\"p1\">[</bpt>CMFCToolBar::RestoreOriginalState<ept id=\"p1\">](#cmfctoolbar__restoreoriginalstate)</ept> method restores the original state of the toolbar by loading it from the resource file.","pos":[76517,76680],"source":" The [CMFCToolBar::RestoreOriginalState](#cmfctoolbar__restoreoriginalstate) method restores the original state of the toolbar by loading it from the resource file."},{"pos":[76687,76817],"content":"To set the list of original buttons for your toolbar, call the <bpt id=\"p1\">[</bpt>CMFCToolBar::SetOrigButtons<ept id=\"p1\">](#cmfctoolbar__setorigbuttons)</ept> method.","source":"To set the list of original buttons for your toolbar, call the [CMFCToolBar::SetOrigButtons](#cmfctoolbar__setorigbuttons) method."},{"pos":[76876,76908],"content":"CMFCToolBar::GetOrigResetButtons"},{"content":"Retrieves the collection of non-customized reset buttons of the toolbar.","pos":[76912,76984]},{"content":"Return Value","pos":[77056,77068]},{"content":"A reference to the list of non-customized reset buttons of the toolbar.","pos":[77072,77143]},{"content":"Remarks","pos":[77153,77160]},{"pos":[77164,77318],"content":"When the user clicks the <bpt id=\"p1\">**</bpt>Reset<ept id=\"p1\">**</ept> button during customization mode, the framework uses this method to restore buttons that were removed from the toolbar.","source":"When the user clicks the **Reset** button during customization mode, the framework uses this method to restore buttons that were removed from the toolbar."},{"content":"The <bpt id=\"p1\">[</bpt>CMFCToolBar::SetButtons<ept id=\"p1\">](#cmfctoolbar__setbuttons)</ept> method adds a copy of each toolbar button to the list of original reset buttons after it calls the <bpt id=\"p2\">[</bpt>CMFCToolBar::OnReset<ept id=\"p2\">](#cmfctoolbar__onreset)</ept> method.","pos":[77325,77533],"source":"The [CMFCToolBar::SetButtons](#cmfctoolbar__setbuttons) method adds a copy of each toolbar button to the list of original reset buttons after it calls the [CMFCToolBar::OnReset](#cmfctoolbar__onreset) method."},{"content":"You can override the <bpt id=\"p1\">[</bpt>CMFCToolBar::OnReset<ept id=\"p1\">](#cmfctoolbar__onreset)</ept> method to customize the appearance of buttons after the user presses the <bpt id=\"p2\">**</bpt>Reset<ept id=\"p2\">**</ept> button.","pos":[77534,77691],"source":" You can override the [CMFCToolBar::OnReset](#cmfctoolbar__onreset) method to customize the appearance of buttons after the user presses the **Reset** button."},{"pos":[77744,77770],"content":"CMFCToolBar::GetResourceID"},{"content":"Retrieves the resource ID of the toolbar.","pos":[77774,77815]},{"content":"Return Value","pos":[77871,77883]},{"content":"The resource ID of the toolbar.","pos":[77887,77918]},{"content":"Remarks","pos":[77928,77935]},{"pos":[77939,78051],"content":"Call the <bpt id=\"p1\">[</bpt>CMFCToolBar::LoadToolBarEx<ept id=\"p1\">](#cmfctoolbar__loadtoolbarex)</ept> method to set the resource ID of the toolbar.","source":"Call the [CMFCToolBar::LoadToolBarEx](#cmfctoolbar__loadtoolbarex) method to set the resource ID of the toolbar."},{"pos":[78115,78152],"content":"CMFCToolBar::GetRouteCommandsViaFrame"},{"content":"Determines which object, the parent frame or the owner, sends commands to the toolbar.","pos":[78156,78242]},{"content":"Return Value","pos":[78300,78312]},{"content":"Nonzero if the parent frame sends commands to the toolbar; 0 if the owner sends commands to the toolbar.","pos":[78316,78420]},{"content":"Remarks","pos":[78430,78437]},{"content":"By default, the parent frame sends commands to the toolbar.","pos":[78441,78500]},{"content":"Call <bpt id=\"p1\">[</bpt>CMFCToolBar::SetRouteCommandsViaFrame<ept id=\"p1\">](#cmfctoolbar__setroutecommandsviaframe)</ept> to change this behavior.","pos":[78501,78610],"source":" Call [CMFCToolBar::SetRouteCommandsViaFrame](#cmfctoolbar__setroutecommandsviaframe) to change this behavior."},{"content":"If this method returns a nonzero value, you can retrieve a pointer to the parent frame object by using the <ph id=\"ph1\">`CMFCToolBar::GetCommandTarget`</ph> method.","pos":[78617,78763],"source":"If this method returns a nonzero value, you can retrieve a pointer to the parent frame object by using the `CMFCToolBar::GetCommandTarget` method."},{"content":"See the VisualStudioDemo sample for an example that uses this method.","pos":[78764,78833]},{"pos":[78885,78910],"content":"CMFCToolBar::GetRowHeight"},{"content":"Returns the height of toolbar buttons.","pos":[78914,78952]},{"content":"Return Value","pos":[79014,79026]},{"content":"The height of toolbar buttons, in pixels.","pos":[79030,79071]},{"content":"Remarks","pos":[79081,79088]},{"content":"The framework calls this method to calculate toolbar layout.","pos":[79092,79152]},{"content":"Override this method in a derived class to specify a different height for your toolbar.","pos":[79153,79240]},{"pos":[79295,79323],"content":"CMFCToolBar::GetShowTooltips"},{"content":"Specifies whether tool tips are displayed for toolbar buttons.","pos":[79327,79389]},{"content":"Return Value","pos":[79445,79457]},{"pos":[79468,79530],"content":"if tool tips are shown for toolbar buttons; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if tool tips are shown for toolbar buttons; otherwise `FALSE`."},{"content":"Remarks","pos":[79540,79547]},{"content":"By default tool tips are shown.","pos":[79551,79582]},{"content":"You can change this static flag by calling <bpt id=\"p1\">[</bpt>CMFCToolBar::SetShowTooltips<ept id=\"p1\">](#cmfctoolbar__setshowtooltips)</ept>.","pos":[79583,79688],"source":" You can change this static flag by calling [CMFCToolBar::SetShowTooltips](#cmfctoolbar__setshowtooltips)."},{"pos":[79745,79775],"content":"CMFCToolBar::GetSiblingToolBar"},{"content":"Retrieves the sibling of the toolbar.","pos":[79779,79816]},{"content":"Return Value","pos":[79875,79887]},{"content":"A pointer to the sibling toolbar.","pos":[79891,79924]},{"content":"Remarks","pos":[79934,79941]},{"pos":[79945,80130],"content":"For more information about how to enable the <bpt id=\"p1\">**</bpt>Show Buttons on One Row<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Show Buttons on Two Rows<ept id=\"p2\">**</ept> buttons, see <bpt id=\"p3\">[</bpt>CMFCToolBar::SetSiblingToolBar<ept id=\"p3\">](#cmfctoolbar__setsiblingtoolbar)</ept>.","source":"For more information about how to enable the **Show Buttons on One Row** and **Show Buttons on Two Rows** buttons, see [CMFCToolBar::SetSiblingToolBar](#cmfctoolbar__setsiblingtoolbar)."},{"pos":[80183,80209],"content":"CMFCToolBar::GetUserImages"},{"content":"Returns a pointer to the collection of user-defined toolbar button images in the application.","pos":[80213,80306]},{"content":"Return Value","pos":[80374,80386]},{"content":"A pointer to the collection of user-defined toolbar button images for all toolbars in the application.","pos":[80390,80492]},{"content":"Remarks","pos":[80502,80509]},{"pos":[80513,80651],"content":"Call the <bpt id=\"p1\">[</bpt>CMFCToolBar::SetUserImages<ept id=\"p1\">](#cmfctoolbar__setuserimages)</ept> method to set the collection of user-defined images in the application.","source":"Call the [CMFCToolBar::SetUserImages](#cmfctoolbar__setuserimages) method to set the collection of user-defined images in the application."},{"pos":[80698,80718],"content":"CMFCToolBar::HitTest"},{"content":"Returns the index of the toolbar button that is located at the specified position.","pos":[80722,80804]},{"content":"Parameters","pos":[80864,80874]},{"content":"[in]","pos":[80878,80882]},{"content":"The point to be tested, in client coordinates.","pos":[80894,80940]},{"content":"Return Value","pos":[80950,80962]},{"content":"The index of the button that is located at the specified position, or -1 if there is no such button or the button is a separator.","pos":[80966,81095]},{"pos":[81147,81172],"content":"CMFCToolBar::InsertButton"},{"content":"Inserts a button into the toolbar.","pos":[81176,81210]},{"content":"Parameters","pos":[81413,81423]},{"content":"[in]","pos":[81427,81431]},{"content":"Specifies the button to insert.","pos":[81444,81475]},{"content":"[in]","pos":[81482,81486]},{"content":"Specifies the zero-based position to insert the button at.","pos":[81502,81560]},{"content":"Return Value","pos":[81570,81582]},{"content":"The position at which the button was inserted or -1 if an error occurs.","pos":[81586,81657]},{"content":"Remarks","pos":[81667,81674]},{"pos":[81678,81770],"content":"If <ph id=\"ph1\">`iInsertAt`</ph> is -1, this method adds the button to the end of the list of toolbar buttons.","source":"If `iInsertAt` is -1, this method adds the button to the end of the list of toolbar buttons."},{"pos":[81777,81894],"content":"Call the <bpt id=\"p1\">[</bpt>CMFCToolBar::InsertSeparator<ept id=\"p1\">](#cmfctoolbar__insertseparator)</ept> method to insert a separator into the toolbar.","source":"Call the [CMFCToolBar::InsertSeparator](#cmfctoolbar__insertseparator) method to insert a separator into the toolbar."},{"pos":[81949,81977],"content":"CMFCToolBar::InsertSeparator"},{"content":"Inserts a separator into the toolbar.","pos":[81981,82018]},{"content":"Parameters","pos":[82094,82104]},{"content":"[in]","pos":[82108,82112]},{"content":"Specifies the zero-based position to insert the separator at.","pos":[82128,82189]},{"content":"This parameter must be larger than 0.","pos":[82190,82227]},{"content":"Return Value","pos":[82237,82249]},{"content":"The position at which the separator was inserted or -1 if an error occurs.","pos":[82253,82327]},{"content":"Remarks","pos":[82337,82344]},{"content":"Call this method to insert a separator between two existing buttons.","pos":[82348,82416]},{"content":"If <ph id=\"ph1\">`iInsertAt`</ph> is -1, this method adds the separator to the end of the list of toolbar buttons.","pos":[82417,82512],"source":" If `iInsertAt` is -1, this method adds the separator to the end of the list of toolbar buttons."},{"content":"You cannot use this method to add a separator to an empty toolbar.","pos":[82519,82585]},{"pos":[82592,82700],"content":"Call the <bpt id=\"p1\">[</bpt>CMFCToolBar::InsertButton<ept id=\"p1\">](#cmfctoolbar__insertbutton)</ept> method to insert a button into the toolbar.","source":"Call the [CMFCToolBar::InsertButton](#cmfctoolbar__insertbutton) method to insert a button into the toolbar."},{"pos":[82756,82785],"content":"CMFCToolBar::InvalidateButton"},{"content":"Invalidates the client area of the toolbar button that exists at the provided index.","pos":[82789,82873]},{"content":"Parameters","pos":[82947,82957]},{"content":"[in]","pos":[82961,82965]},{"content":"The zero-based index of the button in the toolbar.","pos":[82978,83028]},{"content":"Return Value","pos":[83038,83050]},{"pos":[83054,83167],"content":"A pointer to the <ph id=\"ph1\">`CMFCToolBarButton`</ph> object that exists at the provided index or <ph id=\"ph2\">`NULL`</ph> if no such object exists.","source":"A pointer to the `CMFCToolBarButton` object that exists at the provided index or `NULL` if no such object exists."},{"content":"Remarks","pos":[83177,83184]},{"content":"The framework calls this method when it updates the client area that is associated with a toolbar button.","pos":[83188,83293]},{"content":"It calls the <bpt id=\"p1\">[</bpt>CWnd::InvalidateRect<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__invalidaterect)</ept> method with the client rectangle of the <ph id=\"ph1\">`CMFCToolBarButton`</ph> object that exists at the provided index.","pos":[83294,83487],"source":" It calls the [CWnd::InvalidateRect](../../mfc/reference/cwnd-class.md#cwnd__invalidaterect) method with the client rectangle of the `CMFCToolBarButton` object that exists at the provided index."},{"pos":[83552,83590],"content":"CMFCToolBar::IsAddRemoveQuickCustomize"},{"pos":[83594,83693],"content":"Determines whether a user can add or remove toolbar buttons by using the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> menu option.","source":"Determines whether a user can add or remove toolbar buttons by using the **Customize** menu option."},{"content":"Return Value","pos":[83752,83764]},{"pos":[83775,83865],"content":"if a user can use the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> menu option to modify the toolbar; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if a user can use the **Customize** menu option to modify the toolbar; otherwise, `FALSE`."},{"content":"Remarks","pos":[83875,83882]},{"pos":[83940,83971],"content":"CMFCToolBar::IsAltCustomizeMode"},{"content":"Specifies whether <bpt id=\"p1\">*</bpt>quick customization<ept id=\"p1\">*</ept> is being used to drag a button.","pos":[83975,84046],"source":"Specifies whether *quick customization* is being used to drag a button."},{"content":"When quick customization is enabled, a user can press and hold the Alt key and drag a button to a new location.","pos":[84047,84158]},{"content":"Return Value","pos":[84227,84239]},{"pos":[84250,84324],"content":"if quick customization is being used to drag a button; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if quick customization is being used to drag a button; otherwise, `FALSE`."},{"content":"Remarks","pos":[84334,84341]},{"pos":[84405,84442],"content":"CMFCToolBar::IsAutoGrayInactiveImages"},{"content":"Specifies whether the automatic generation of inactive (non-highlighted) button images is enabled.","pos":[84446,84544]},{"content":"Return Value","pos":[84609,84621]},{"pos":[84632,84713],"content":"if the option to automatically dim inactive images is enabled; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the option to automatically dim inactive images is enabled; otherwise `FALSE`."},{"content":"Remarks","pos":[84723,84730]},{"pos":[84734,84884],"content":"You can enable or disable automatic dimming of inactive images by calling <bpt id=\"p1\">[</bpt>CMFCToolBar::AutoGrayInactiveImages<ept id=\"p1\">](#cmfctoolbar__autograyinactiveimages)</ept>.","source":"You can enable or disable automatic dimming of inactive images by calling [CMFCToolBar::AutoGrayInactiveImages](#cmfctoolbar__autograyinactiveimages)."},{"pos":[84938,84965],"content":"CMFCToolBar::IsBasicCommand"},{"content":"Determines whether a command is on the list of basic commands.","pos":[84969,85031]},{"content":"Parameters","pos":[85096,85106]},{"content":"[in]","pos":[85110,85114]},{"content":"Specifies the command to check.","pos":[85126,85157]},{"content":"Return Value","pos":[85167,85179]},{"pos":[85190,85272],"content":"if the specified command belongs to the list of basic commands; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the specified command belongs to the list of basic commands; otherwise `FALSE`."},{"content":"Remarks","pos":[85282,85289]},{"content":"This static method determines whether the command specified by <ph id=\"ph1\">`uiCmd`</ph> belongs to the global list of basic commands.","pos":[85293,85409],"source":"This static method determines whether the command specified by `uiCmd` belongs to the global list of basic commands."},{"content":"You can change the list of basic commands by calling <bpt id=\"p1\">[</bpt>CMFCToolBar::AddBasicCommand<ept id=\"p1\">](#cmfctoolbar__addbasiccommand)</ept> or <bpt id=\"p2\">[</bpt>CMFCToolBar::SetBasicCommands<ept id=\"p2\">](#cmfctoolbar__setbasiccommands)</ept>.","pos":[85410,85592],"source":" You can change the list of basic commands by calling [CMFCToolBar::AddBasicCommand](#cmfctoolbar__addbasiccommand) or [CMFCToolBar::SetBasicCommands](#cmfctoolbar__setbasiccommands)."},{"pos":[85658,85697],"content":"CMFCToolBar::IsButtonExtraSizeAvailable"},{"content":"Determines whether the toolbar can display buttons that have extended borders.","pos":[85701,85779]},{"content":"Return Value","pos":[85856,85868]},{"pos":[85879,85956],"content":"if the bar can display buttons with the extra border size; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the bar can display buttons with the extra border size; otherwise `FALSE`."},{"content":"Remarks","pos":[85966,85973]},{"content":"The toolbar object returns <ph id=\"ph1\">`TRUE`</ph> if it can display buttons that have extended borders.","pos":[85977,86064],"source":"The toolbar object returns `TRUE` if it can display buttons that have extended borders."},{"content":"A toolbar button calls this method when it handles the <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnChangeParentWnd<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onchangeparentwnd)</ept> notification and will set its internal extra border size flag accordingly.","pos":[86065,86318],"source":" A toolbar button calls this method when it handles the [CMFCToolBarButton::OnChangeParentWnd](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onchangeparentwnd) notification and will set its internal extra border size flag accordingly."},{"content":"This internal flag may be retrieved later by calling <bpt id=\"p1\">[</bpt>CMFCToolBarButton::IsExtraSize<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__isextrasize)</ept>.","pos":[86319,86484],"source":" This internal flag may be retrieved later by calling [CMFCToolBarButton::IsExtraSize](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__isextrasize)."},{"content":"Override this method in a class derived from <bpt id=\"p1\">[</bpt>CMFCToolBar<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md)</ept> and return <ph id=\"ph1\">`TRUE`</ph> if your bar can display the toolbar buttons with the extra border size and return <ph id=\"ph2\">`FALSE`</ph> otherwise.","pos":[86491,86710],"source":"Override this method in a class derived from [CMFCToolBar](../../mfc/reference/cmfctoolbar-class.md) and return `TRUE` if your bar can display the toolbar buttons with the extra border size and return `FALSE` otherwise."},{"content":"The default implementation returns <ph id=\"ph1\">`TRUE`</ph>.","pos":[86711,86753],"source":" The default implementation returns `TRUE`."},{"pos":[86812,86844],"content":"CMFCToolBar::IsButtonHighlighted"},{"content":"Determines whether the specified button is highlighted.","pos":[86848,86903]},{"content":"Parameters","pos":[86976,86986]},{"content":"[in]","pos":[86990,86994]},{"content":"Specifies the index of a toolbar button.","pos":[87008,87048]},{"content":"Return Value","pos":[87058,87070]},{"pos":[87081,87140],"content":"if the specified button is highlighted; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the specified button is highlighted; otherwise, `FALSE`."},{"content":"Remarks","pos":[87150,87157]},{"pos":[87215,87246],"content":"CMFCToolBar::IsCommandPermitted"},{"content":"Determines whether a command is permitted.","pos":[87250,87292]},{"content":"Parameters","pos":[87361,87371]},{"content":"[in]","pos":[87375,87379]},{"content":"Specifies the command to check.","pos":[87391,87422]},{"content":"Return Value","pos":[87432,87444]},{"pos":[87455,87512],"content":"if the specified command is permitted; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the specified command is permitted; otherwise `FALSE`."},{"content":"Remarks","pos":[87522,87529]},{"pos":[87533,87657],"content":"This static method determines whether the command specified by <ph id=\"ph1\">`uiCmd`</ph> belongs to the global list of non-permitted commands.","source":"This static method determines whether the command specified by `uiCmd` belongs to the global list of non-permitted commands."},{"pos":[87664,87803],"content":"You can change the list of non-permitted commands by calling <bpt id=\"p1\">[</bpt>CMFCToolBar::SetNonPermittedCommands<ept id=\"p1\">](#cmfctoolbar__setnonpermittedcommands)</ept>.","source":"You can change the list of non-permitted commands by calling [CMFCToolBar::SetNonPermittedCommands](#cmfctoolbar__setnonpermittedcommands)."},{"pos":[87862,87894],"content":"CMFCToolBar::IsCommandRarelyUsed"},{"content":"Determines whether a command is rarely used.","pos":[87898,87942]},{"content":"Parameters","pos":[88012,88022]},{"content":"[in]","pos":[88026,88030]},{"content":"Specifies the command to check.","pos":[88042,88073]},{"content":"Return Value","pos":[88083,88095]},{"pos":[88106,88165],"content":"if the specified command is rarely used; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the specified command is rarely used; otherwise `FALSE`."},{"content":"Remarks","pos":[88175,88182]},{"pos":[88186,88286],"content":"The <ph id=\"ph1\">`IsCommandRarelyUsed`</ph> method returns <ph id=\"ph2\">`FALSE`</ph> when one or more of the following conditions occur:","source":"The `IsCommandRarelyUsed` method returns `FALSE` when one or more of the following conditions occur:"},{"content":"The specified command belongs to the list of basic commands","pos":[88296,88355]},{"content":"The specified command is one of the standard commands","pos":[88365,88418]},{"content":"The framework is in customization mode","pos":[88428,88466]},{"content":"The list of basic commands is empty","pos":[88476,88511]},{"content":"More than 20% of command calls are calls to the specified command.","pos":[88521,88587]},{"pos":[88642,88670],"content":"CMFCToolBar::IsCustomizeMode"},{"content":"Specifies whether the toolbar framework is in customization mode.","pos":[88674,88739]},{"content":"Return Value","pos":[88795,88807]},{"pos":[88818,88879],"content":"if the framework is in customization mode; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the framework is in customization mode; otherwise `FALSE`."},{"content":"Remarks","pos":[88889,88896]},{"pos":[88900,89009],"content":"You can toggle customization mode by calling <bpt id=\"p1\">[</bpt>CMFCToolBar::SetCustomizeMode<ept id=\"p1\">](#cmfctoolbar__setcustomizemode)</ept>.","source":"You can toggle customization mode by calling [CMFCToolBar::SetCustomizeMode](#cmfctoolbar__setcustomizemode)."},{"pos":[89016,89195],"content":"The framework changes the mode when the user invokes the customization dialog box ( <bpt id=\"p1\">[</bpt>CMFCToolBarsCustomizeDialog Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbarscustomizedialog-class.md)</ept>).","source":"The framework changes the mode when the user invokes the customization dialog box ( [CMFCToolBarsCustomizeDialog Class](../../mfc/reference/cmfctoolbarscustomizedialog-class.md))."},{"pos":[89247,89272],"content":"CMFCToolBar::IsDragButton"},{"content":"Determines whether a toolbar button is being dragged.","pos":[89276,89329]},{"content":"Parameters","pos":[89416,89426]},{"content":"[in]","pos":[89430,89434]},{"content":"Pointer to a toolbar button.","pos":[89448,89476]},{"content":"Return Value","pos":[89486,89498]},{"pos":[89509,89570],"content":"if the specified button is being dragged; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the specified button is being dragged; otherwise, `FALSE`."},{"content":"Remarks","pos":[89580,89587]},{"pos":[89649,89684],"content":"CMFCToolBar::IsExistCustomizeButton"},{"pos":[89688,89753],"content":"Determines whether the toolbar contains the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> button.","source":"Determines whether the toolbar contains the **Customize** button."},{"content":"Return Value","pos":[89809,89821]},{"pos":[89832,89900],"content":"if the toolbar contains the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> button; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the toolbar contains the **Customize** button; otherwise `FALSE`."},{"content":"Remarks","pos":[89910,89917]},{"pos":[89921,90116],"content":"If this method returns <ph id=\"ph1\">`TRUE`</ph>, the <bpt id=\"p1\">[</bpt>CMFCToolBar::GetCustomizeButton<ept id=\"p1\">](#cmfctoolbar__getcustomizebutton)</ept> method returns a pointer to the <bpt id=\"p2\">**</bpt>Customize<ept id=\"p2\">**</ept> button that appears at the end of the toolbar.","source":"If this method returns `TRUE`, the [CMFCToolBar::GetCustomizeButton](#cmfctoolbar__getcustomizebutton) method returns a pointer to the **Customize** button that appears at the end of the toolbar."},{"pos":[90123,90260],"content":"Use the <bpt id=\"p1\">[</bpt>CMFCToolBar::EnableCustomizeButton<ept id=\"p1\">](#cmfctoolbar__enablecustomizebutton)</ept> method to add the <bpt id=\"p2\">**</bpt>Customize<ept id=\"p2\">**</ept> button to your toolbar.","source":"Use the [CMFCToolBar::EnableCustomizeButton](#cmfctoolbar__enablecustomizebutton) method to add the **Customize** button to your toolbar."},{"pos":[90310,90333],"content":"CMFCToolBar::IsFloating"},{"content":"Determines whether the toolbar is floating.","pos":[90337,90380]},{"content":"Return Value","pos":[90441,90453]},{"pos":[90464,90511],"content":"if the toolbar is floating; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the toolbar is floating; otherwise, `FALSE`."},{"pos":[90563,90588],"content":"CMFCToolBar::IsLargeIcons"},{"content":"Specifies whether toolbars in the application currently display large icons.","pos":[90592,90668]},{"content":"Return Value","pos":[90721,90733]},{"pos":[90744,90803],"content":"if the application is using large icons; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the application is using large icons; otherwise `FALSE`."},{"content":"Remarks","pos":[90813,90820]},{"pos":[90824,90935],"content":"Call <bpt id=\"p1\">[</bpt>CMFCToolBar::SetLargeIcons<ept id=\"p1\">](#cmfctoolbar__setlargeicons)</ept> to toggle between large icons and regular icons.","source":"Call [CMFCToolBar::SetLargeIcons](#cmfctoolbar__setlargeicons) to toggle between large icons and regular icons."},{"pos":[90942,91099],"content":"The framework automatically changes the mode when the user toggles the <bpt id=\"p1\">**</bpt>Large icons<ept id=\"p1\">**</ept> check-box on the <bpt id=\"p2\">**</bpt>Options<ept id=\"p2\">**</ept> page of the <bpt id=\"p3\">**</bpt>Customization<ept id=\"p3\">**</ept> dialog box.","source":"The framework automatically changes the mode when the user toggles the **Large icons** check-box on the **Options** page of the **Customization** dialog box."},{"pos":[91162,91198],"content":"CMFCToolBar::IsLastCommandFromButton"},{"content":"Determines whether the most recently executed command was sent from the specified toolbar button.","pos":[91202,91299]},{"content":"Parameters","pos":[91389,91399]},{"content":"[in]","pos":[91403,91407]},{"content":"Pointer to button.","pos":[91421,91439]},{"content":"Return Value","pos":[91449,91461]},{"pos":[91472,91561],"content":"if the last command was sent from the button that <ph id=\"ph1\">`pButton`</ph> specifies; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":" if the last command was sent from the button that `pButton` specifies; otherwise `FALSE`."},{"content":"Remarks","pos":[91571,91578]},{"content":"This method obtains a pointer to a <bpt id=\"p1\">[</bpt>MSG Structure<ept id=\"p1\">](../../mfc/reference/msg-structure1.md)</ept> by calling <ph id=\"ph1\">`CWnd::GetCurrentMessage`</ph>.","pos":[91582,91709],"source":"This method obtains a pointer to a [MSG Structure](../../mfc/reference/msg-structure1.md) by calling `CWnd::GetCurrentMessage`."},{"content":"It then compares the <ph id=\"ph1\">`HWND`</ph> of the button with the <ph id=\"ph2\">`MSG::lParam`</ph> and <ph id=\"ph3\">`MSG::hwnd`</ph> members to determine whether the button was the source of the command.","pos":[91710,91861],"source":" It then compares the `HWND` of the button with the `MSG::lParam` and `MSG::hwnd` members to determine whether the button was the source of the command."},{"pos":[91909,91930],"content":"CMFCToolBar::IsLocked"},{"content":"Determines whether the toolbar is locked.","pos":[91934,91975]},{"content":"Return Value","pos":[92026,92038]},{"pos":[92049,92094],"content":"if the toolbar is locked; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the toolbar is locked; otherwise, `FALSE`."},{"content":"Remarks","pos":[92104,92111]},{"pos":[92115,92229],"content":"This method returns <ph id=\"ph1\">`TRUE`</ph> when the user cannot perform customization tasks such as repositioning toolbar buttons.","source":"This method returns `TRUE` when the user cannot perform customization tasks such as repositioning toolbar buttons."},{"content":"Locked toolbars use separate image lists.","pos":[92236,92277]},{"content":"For more information about these image lists, see <bpt id=\"p1\">[</bpt>CMFCToolBar::LoadBitmapEx<ept id=\"p1\">](#cmfctoolbar__loadbitmapex)</ept>.","pos":[92278,92384],"source":" For more information about these image lists, see [CMFCToolBar::LoadBitmapEx](#cmfctoolbar__loadbitmapex)."},{"pos":[92443,92475],"content":"CMFCToolBar::IsOneRowWithSibling"},{"content":"Determines whether the toolbar and its sibling toolbar are positioned on the same row.","pos":[92479,92565]},{"content":"Return Value","pos":[92618,92630]},{"pos":[92641,92722],"content":"if the toolbar and its sibling are positioned on the same row; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the toolbar and its sibling are positioned on the same row; otherwise `FALSE`."},{"content":"Remarks","pos":[92732,92739]},{"content":"The <bpt id=\"p1\">[</bpt>CMFCCustomizeButton::CreatePopupMenu<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e501083e-f78e-4d8d-900c-40bd6e2bb7f8)</ept> method calls this method to determine how to show the <bpt id=\"p2\">**</bpt>Customize<ept id=\"p2\">**</ept> pop-up menu.","pos":[92743,92936],"source":"The [CMFCCustomizeButton::CreatePopupMenu](http://msdn.microsoft.com/en-us/e501083e-f78e-4d8d-900c-40bd6e2bb7f8) method calls this method to determine how to show the **Customize** pop-up menu."},{"content":"If this method returns <ph id=\"ph1\">`TRUE`</ph>, the framework displays the <bpt id=\"p1\">**</bpt>Show Buttons on One Row<ept id=\"p1\">**</ept> button.","pos":[92937,93030],"source":" If this method returns `TRUE`, the framework displays the **Show Buttons on One Row** button."},{"content":"Otherwise, the framework displays the <bpt id=\"p1\">**</bpt>Show Buttons on Two Rows<ept id=\"p1\">**</ept> button.","pos":[93031,93105],"source":" Otherwise, the framework displays the **Show Buttons on Two Rows** button."},{"content":"You typically do not have to use this method.","pos":[93112,93157]},{"content":"To enable the <bpt id=\"p1\">**</bpt>Show Buttons on One Row<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Show Buttons on Two Rows<ept id=\"p2\">**</ept> buttons, call <bpt id=\"p3\">[</bpt>CMFCToolBar::SetSiblingToolBar<ept id=\"p3\">](#cmfctoolbar__setsiblingtoolbar)</ept>.","pos":[93158,93312],"source":" To enable the **Show Buttons on One Row** or **Show Buttons on Two Rows** buttons, call [CMFCToolBar::SetSiblingToolBar](#cmfctoolbar__setsiblingtoolbar)."},{"pos":[93369,93399],"content":"CMFCToolBar::IsResourceChanged"},{"content":"Return Value","pos":[93570,93582]},{"content":"Remarks","pos":[93592,93599]},{"pos":[93648,93670],"content":"CMFCToolBar::IsSibling"},{"content":"Return Value","pos":[93816,93828]},{"content":"Remarks","pos":[93838,93845]},{"pos":[93898,93924],"content":"CMFCToolBar::IsUserDefined"},{"content":"Specifies whether the toolbar is user-defined.","pos":[93928,93974]},{"content":"Return Value","pos":[94030,94042]},{"pos":[94053,94111],"content":"if the toolbar was created by the user; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the toolbar was created by the user; otherwise `FALSE`."},{"pos":[94161,94184],"content":"CMFCToolBar::LoadBitmap"},{"content":"Loads toolbar images from application resources.","pos":[94188,94236]},{"content":"Parameters","pos":[94447,94457]},{"content":"[in]","pos":[94461,94465]},{"content":"The resource ID of the bitmap that refers to the hot toolbar images.","pos":[94479,94547]},{"content":"[in]","pos":[94554,94558]},{"content":"The resource ID of the bitmap that refers to the cold toolbar images.","pos":[94576,94645]},{"content":"[in]","pos":[94652,94656]},{"content":"The resource ID of the bitmap that refers to the regular menu images.","pos":[94674,94743]},{"content":"[in]","pos":[94750,94754]},{"content":"to lock the toolbar; otherwise <ph id=\"ph1\">`FALSE`</ph>.","pos":[94775,94814],"source":" to lock the toolbar; otherwise `FALSE`."},{"content":"[in]","pos":[94821,94825]},{"content":"The resource ID of the bitmap that refers to the disabled toolbar images.","pos":[94847,94920]},{"content":"[in]","pos":[94927,94931]},{"content":"The resource ID of the bitmap that refers to the disabled menu images.","pos":[94957,95027]},{"content":"Return Value","pos":[95037,95049]},{"content":"Nonzero if the method succeeds; otherwise 0.","pos":[95053,95097]},{"content":"Remarks","pos":[95107,95114]},{"content":"The <bpt id=\"p1\">[</bpt>CMFCToolBar::LoadToolBarEx<ept id=\"p1\">](#cmfctoolbar__loadtoolbarex)</ept> method calls this method to load the images that are associated with the toolbar.","pos":[95118,95261],"source":"The [CMFCToolBar::LoadToolBarEx](#cmfctoolbar__loadtoolbarex) method calls this method to load the images that are associated with the toolbar."},{"content":"Override this method to perform custom loading of image resources.","pos":[95262,95328]},{"pos":[95335,95421],"content":"Call the <ph id=\"ph1\">`LoadBitmapEx`</ph> method to load additional images after you create the toolbar.","source":"Call the `LoadBitmapEx` method to load additional images after you create the toolbar."},{"pos":[95473,95498],"content":"CMFCToolBar::LoadBitmapEx"},{"content":"Parameters","pos":[95711,95721]},{"content":"[in]","pos":[95725,95729]},{"content":"[in]","pos":[95742,95746]},{"content":"Return Value","pos":[95766,95778]},{"content":"Remarks","pos":[95788,95795]},{"pos":[95854,95886],"content":"CMFCToolBar::LoadLargeIconsState"},{"content":"Parameters","pos":[96089,96099]},{"pos":[96103,96107],"content":"[in]"},{"content":"Return Value","pos":[96135,96147]},{"content":"Remarks","pos":[96157,96164]},{"pos":[96218,96245],"content":"CMFCToolBar::LoadParameters"},{"content":"Loads global toolbar options from the Windows registry.","pos":[96249,96304]},{"content":"Parameters","pos":[96387,96397]},{"content":"[in]","pos":[96401,96405]},{"content":"Specifies the relative path of the Windows registry key.","pos":[96427,96483]},{"content":"Return Value","pos":[96493,96505]},{"content":"Nonzero if the method succeeds; otherwise 0.","pos":[96509,96553]},{"content":"Remarks","pos":[96563,96570]},{"content":"This method loads global parameters such as the menu animation type, the menu shadow style, and whether to display large icons from the Windows registry.","pos":[96574,96727]},{"pos":[96734,96906],"content":"The <bpt id=\"p1\">[</bpt>CWinAppEx::LoadState<ept id=\"p1\">](../../mfc/reference/cwinappex-class.md#cwinappex__loadstate)</ept> method calls this method as a part of the initialization process of the application.","source":"The [CWinAppEx::LoadState](../../mfc/reference/cwinappex-class.md#cwinappex__loadstate) method calls this method as a part of the initialization process of the application."},{"pos":[96955,96977],"content":"CMFCToolBar::LoadState"},{"content":"Loads the toolbar state information from the Windows registry.","pos":[96981,97043]},{"content":"Parameters","pos":[97174,97184]},{"content":"[in]","pos":[97188,97192]},{"content":"Specifies the relative path of the Windows registry key.","pos":[97214,97270]},{"content":"[in]","pos":[97277,97281]},{"content":"Specifies the control ID of the toolbar.","pos":[97294,97334]},{"content":"[in]","pos":[97341,97345]},{"content":"Specifies the resource ID of the toolbar.","pos":[97356,97397]},{"content":"Return Value","pos":[97407,97419]},{"content":"Nonzero if the method succeeds; otherwise 0.","pos":[97423,97467]},{"content":"Remarks","pos":[97477,97484]},{"content":"The framework calls this method as a part of the initialization process of the application.","pos":[97488,97579]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CWinAppEx::LoadState<ept id=\"p1\">](../../mfc/reference/cwinappex-class.md#cwinappex__loadstate)</ept>.","pos":[97580,97690],"source":" For more information, see [CWinAppEx::LoadState](../../mfc/reference/cwinappex-class.md#cwinappex__loadstate)."},{"pos":[97741,97765],"content":"CMFCToolBar::LoadToolBar"},{"content":"Loads the toolbar from application resources.","pos":[97769,97814]},{"content":"Parameters","pos":[98051,98061]},{"content":"[in]","pos":[98065,98069]},{"content":"The resource ID of the toolbar.","pos":[98083,98114]},{"content":"[in]","pos":[98121,98125]},{"content":"The resource ID of the bitmap that refers to the cold toolbar images.","pos":[98143,98212]},{"content":"[in]","pos":[98219,98223]},{"content":"The resource ID of the bitmap that refers to the regular menu images.","pos":[98241,98310]},{"content":"[in]","pos":[98317,98321]},{"content":"A Boolean value that specifies whether the toolbar is locked or not.","pos":[98335,98403]},{"content":"If this parameter is <ph id=\"ph1\">`TRUE`</ph>, the toolbar is locked.","pos":[98404,98455],"source":" If this parameter is `TRUE`, the toolbar is locked."},{"content":"Otherwise, the toolbar is not locked.","pos":[98456,98493]},{"content":"[in]","pos":[98500,98504]},{"content":"The resource ID of the bitmap that refers to the disabled toolbar images.","pos":[98526,98599]},{"content":"[in]","pos":[98606,98610]},{"content":"The resource ID of the bitmap that refers to the disabled menu images.","pos":[98636,98706]},{"content":"[in]","pos":[98713,98717]},{"content":"The resource ID of the bitmap that refers to the hot toolbar images.","pos":[98734,98802]},{"content":"Return Value","pos":[98812,98824]},{"content":"Nonzero if the method succeeds; otherwise 0.","pos":[98828,98872]},{"content":"Remarks","pos":[98882,98889]},{"content":"The framework calls this method during initialization to load the images that are associated with the toolbar.","pos":[98893,99003]},{"content":"Example","pos":[99013,99020]},{"content":"The following example demonstrates how to use the <ph id=\"ph1\">`LoadToolBar`</ph> method in the <ph id=\"ph2\">`CMFCToolBar`</ph> class.","pos":[99024,99122],"source":"The following example demonstrates how to use the `LoadToolBar` method in the `CMFCToolBar` class."},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>IE Demo sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[99123,99202],"source":" This code snippet is part of the [IE Demo sample](../../visual-cpp-samples.md)."},{"content":"NVC_MFC_IEDemo#6","pos":[99220,99236]},{"content":"NVC_MFC_IEDemo#7","pos":[99311,99327]},{"pos":[99443,99469],"content":"CMFCToolBar::LoadToolBarEx"},{"pos":[99473,99608],"content":"Loads the toolbar from application resources by using the <ph id=\"ph1\">`CMFCToolBarInfo`</ph> helper class to enable the application to use large images.","source":"Loads the toolbar from application resources by using the `CMFCToolBarInfo` helper class to enable the application to use large images."},{"content":"Parameters","pos":[99744,99754]},{"content":"[in]","pos":[99758,99762]},{"content":"The resource ID of the toolbar.","pos":[99783,99814]},{"content":"[in]","pos":[99821,99825]},{"content":"A reference to a <ph id=\"ph1\">`CMFCToolBarInfo`</ph> object that contains the resource IDs for the toolbar images.","pos":[99838,99934],"source":" A reference to a `CMFCToolBarInfo` object that contains the resource IDs for the toolbar images."},{"content":"[in]","pos":[99941,99945]},{"content":"A Boolean value that specifies whether the toolbar is locked or not.","pos":[99959,100027]},{"content":"If this parameter is <ph id=\"ph1\">`TRUE`</ph>, the toolbar is locked.","pos":[100028,100079],"source":" If this parameter is `TRUE`, the toolbar is locked."},{"content":"Otherwise, the toolbar is not locked.","pos":[100080,100117]},{"content":"Return Value","pos":[100127,100139]},{"content":"Nonzero if the method succeeds; otherwise 0.","pos":[100143,100187]},{"content":"Remarks","pos":[100197,100204]},{"content":"Call this method to load toolbar images from the application resources.","pos":[100208,100279]},{"pos":[100339,100372],"content":"CMFCToolBar::m_dblLargeImageRatio"},{"content":"Specifies the ratio between the dimension (height or width) of large images and the dimension of regular images.","pos":[100376,100488]},{"content":"Remarks","pos":[100567,100574]},{"content":"The default ratio is 2.","pos":[100578,100601]},{"content":"You can change this value to make large toolbar images larger or smaller.","pos":[100602,100675]},{"content":"The framework uses this data member when you do not specify a set of large images.","pos":[100682,100764]},{"content":"For example, if you provide only the set of small images with size 16x16 and want the large images to have the size 24x24, set this data member to 1.5.","pos":[100765,100916]},{"pos":[100964,100985],"content":"CMFCToolBar::NextMenu"},{"content":"Return Value","pos":[101138,101150]},{"content":"Remarks","pos":[101160,101167]},{"pos":[101227,101260],"content":"CMFCToolBar::OnBeforeRemoveButton"},{"content":"Parameters","pos":[101485,101495]},{"content":"[in]","pos":[101499,101503]},{"content":"Unused.","pos":[101517,101524]},{"content":"[in]","pos":[101531,101535]},{"content":"Unused.","pos":[101552,101559]},{"content":"Return Value","pos":[101569,101581]},{"content":"Remarks","pos":[101591,101598]},{"pos":[101649,101673],"content":"CMFCToolBar::OnChangeHot"},{"content":"Called by the framework when a user selects a button on the toolbar.","pos":[101677,101745]},{"content":"Parameters","pos":[101806,101816]},{"content":"[in]","pos":[101820,101824]},{"content":"Specifies the index of the toolbar button that is selected; or -1 if no toolbar button is selected.","pos":[101835,101934]},{"content":"Remarks","pos":[101944,101951]},{"content":"Override this method to process notifications that the user selected a button on a toolbar.","pos":[101955,102046]},{"pos":[102107,102141],"content":"CMFCToolBar::OnChangeVisualManager"},{"content":"Remarks","pos":[102307,102314]},{"pos":[102370,102399],"content":"CMFCToolBar::OnFillBackground"},{"pos":[102403,102543],"content":"Called by the framework from <bpt id=\"p1\">[</bpt>CBasePane::DoPaint<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__dopaint)</ept> to fill the toolbar background.","source":"Called by the framework from [CBasePane::DoPaint](../../mfc/reference/cbasepane-class.md#cbasepane__dopaint) to fill the toolbar background."},{"content":"Parameters","pos":[102609,102619]},{"content":"[in]","pos":[102623,102627]},{"content":"A pointer to a device context.","pos":[102637,102667]},{"content":"Remarks","pos":[102677,102684]},{"content":"<bpt id=\"p1\">[</bpt>CMFCToolBar::DoPaint<ept id=\"p1\">](#cmfctoolbar__dopaint)</ept> calls this method when the background of a toolbar has been filled.","pos":[102688,102801],"source":"[CMFCToolBar::DoPaint](#cmfctoolbar__dopaint) calls this method when the background of a toolbar has been filled."},{"content":"The default implementation does nothing.","pos":[102802,102842]},{"content":"Override this method to draw custom background in derived classes.","pos":[102849,102915]},{"pos":[102975,103008],"content":"CMFCToolBar::OnGlobalFontsChanged"},{"content":"Remarks","pos":[103173,103180]},{"pos":[103227,103247],"content":"CMFCToolBar::OnReset"},{"content":"Restores the toolbar to its original state.","pos":[103251,103294]},{"content":"Remarks","pos":[103343,103350]},{"content":"Override this method to handle notification about a toolbar reset.","pos":[103354,103420]},{"content":"The default implementation does nothing.","pos":[103427,103467]},{"content":"Override <ph id=\"ph1\">`OnReset`</ph> in a class derived from <bpt id=\"p1\">[</bpt>CMFCToolBar<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md)</ept> when the toolbar has dummy buttons that must be replaced when the toolbar returns to its original state.","pos":[103468,103671],"source":" Override `OnReset` in a class derived from [CMFCToolBar](../../mfc/reference/cmfctoolbar-class.md) when the toolbar has dummy buttons that must be replaced when the toolbar returns to its original state."},{"pos":[103723,103748],"content":"CMFCToolBar::OnSetAccData"},{"content":"Parameters","pos":[103914,103924]},{"pos":[103928,103932],"content":"[in]"},{"content":"Return Value","pos":[103949,103961]},{"content":"Remarks","pos":[103971,103978]},{"pos":[104040,104075],"content":"CMFCToolBar::OnSetDefaultButtonText"},{"content":"Restores the text of a toolbar button to its default state.","pos":[104079,104138]},{"content":"Parameters","pos":[104228,104238]},{"content":"[in]","pos":[104242,104246]},{"content":"Points to a button, whose text is being set.","pos":[104260,104304]},{"content":"Return Value","pos":[104314,104326]},{"pos":[104337,104393],"content":"ifthe text was successfully restored; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" ifthe text was successfully restored; otherwise `FALSE`."},{"content":"Remarks","pos":[104403,104410]},{"content":"Override this method to process notifications that the text of a toolbar button is being changed to its default.","pos":[104414,104526]},{"content":"The default implementation loads the text of a button from the application resources.","pos":[104533,104618]},{"pos":[104671,104697],"content":"CMFCToolBar::OnUserToolTip"},{"content":"Called by the framework when the tooltip for a button is about to be displayed.","pos":[104701,104780]},{"content":"Parameters","pos":[104901,104911]},{"content":"[in]","pos":[104915,104919]},{"content":"Points to a toolbar button for which a tooltip is to be displayed.","pos":[104933,104999]},{"content":"[out]","pos":[105006,105011]},{"content":"A reference to <ph id=\"ph1\">`CString`</ph> object that receives the text of the tooltip.","pos":[105027,105097],"source":" A reference to `CString` object that receives the text of the tooltip."},{"content":"Return Value","pos":[105107,105119]},{"pos":[105130,105196],"content":"if <ph id=\"ph1\">`strTTText`</ph> was populated with tooltip text; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":" if `strTTText` was populated with tooltip text; otherwise `FALSE`."},{"content":"Remarks","pos":[105206,105213]},{"content":"The framework calls this method when the tooltip for a toolbar button is about to be displayed.","pos":[105217,105312]},{"content":"If <ph id=\"ph1\">`OnUserToolTip`</ph> returns <ph id=\"ph2\">`TRUE`</ph>, the framework displays a tooltip which contains the text returned by <ph id=\"ph3\">`OnUserToolTip`</ph> in <ph id=\"ph4\">`strTTText`</ph>.","pos":[105313,105448],"source":" If `OnUserToolTip` returns `TRUE`, the framework displays a tooltip which contains the text returned by `OnUserToolTip` in `strTTText`."},{"content":"Otherwise, the tooltip contains the button text.","pos":[105449,105497]},{"content":"Override <ph id=\"ph1\">`OnUserToolTip`</ph> to customize tool tips of toolbar buttons.","pos":[105504,105571],"source":"Override `OnUserToolTip` to customize tool tips of toolbar buttons."},{"content":"The default implementation calls <bpt id=\"p1\">[</bpt>CMFCToolBar::OnUserToolTip<ept id=\"p1\">](#cmfctoolbar__onusertooltip)</ept> to obtain the tooltip text.","pos":[105572,105690],"source":" The default implementation calls [CMFCToolBar::OnUserToolTip](#cmfctoolbar__onusertooltip) to obtain the tooltip text."},{"pos":[105738,105759],"content":"CMFCToolBar::PrevMenu"},{"content":"Return Value","pos":[105912,105924]},{"content":"Remarks","pos":[105934,105941]},{"pos":[105995,106022],"content":"CMFCToolBar::ProcessCommand"},{"pos":[106026,106091],"content":"Posts a <ph id=\"ph1\">`WM_COMMAND`</ph> message to the window that owns the toolbar.","source":"Posts a `WM_COMMAND` message to the window that owns the toolbar."},{"content":"Parameters","pos":[106165,106175]},{"content":"[in]","pos":[106179,106183]},{"content":"Pointer to a button on the toolbar.","pos":[106197,106232]},{"content":"Return Value","pos":[106242,106254]},{"content":"This method should always return <ph id=\"ph1\">`TRUE`</ph>.","pos":[106258,106298],"source":"This method should always return `TRUE`."},{"content":"MFC uses <ph id=\"ph1\">`FALSE`</ph> values internally.","pos":[106299,106334],"source":" MFC uses `FALSE` values internally."},{"content":"Remarks","pos":[106344,106351]},{"pos":[106355,106593],"content":"This method posts a <ph id=\"ph1\">`WM_COMMAND`</ph> message to the window that owns the toolbar by calling <bpt id=\"p1\">[</bpt>CWnd::PostMessage<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__postmessage)</ept> and passing the command ID of the specified button as the <ph id=\"ph2\">`wParam`</ph> parameter.","source":"This method posts a `WM_COMMAND` message to the window that owns the toolbar by calling [CWnd::PostMessage](../../mfc/reference/cwnd-class.md#cwnd__postmessage) and passing the command ID of the specified button as the `wParam` parameter."},{"pos":[106600,106752],"content":"Use the <bpt id=\"p1\">[</bpt>ON_COMMAND<ept id=\"p1\">](http://msdn.microsoft.com/library/f24f8bda-2cf4-49d5-aa3d-6f2e6bb003f2)</ept> macro to map the <ph id=\"ph1\">`WM_COMMAND`</ph> message to a member function.","source":"Use the [ON_COMMAND](http://msdn.microsoft.com/library/f24f8bda-2cf4-49d5-aa3d-6f2e6bb003f2) macro to map the `WM_COMMAND` message to a member function."},{"pos":[106808,106837],"content":"CMFCToolBar::RemoveAllButtons"},{"content":"Removes all buttons and separators from the toolbar.","pos":[106841,106893]},{"content":"Remarks","pos":[106951,106958]},{"content":"The framework calls this method when it recreates or destroys a toolbar.","pos":[106962,107034]},{"pos":[107086,107111],"content":"CMFCToolBar::RemoveButton"},{"content":"Removes from the toolbar the button that has the specified index.","pos":[107115,107180]},{"content":"Parameters","pos":[107244,107254]},{"content":"[in]","pos":[107258,107262]},{"content":"Specifies the zero-based index of the button to remove.","pos":[107275,107330]},{"content":"Return Value","pos":[107340,107352]},{"pos":[107363,107480],"content":"if the method succeeds, or <ph id=\"ph1\">`FALSE`</ph> if the specified index is invalid or the index refers to the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> button.","source":" if the method succeeds, or `FALSE` if the specified index is invalid or the index refers to the **Customize** button."},{"content":"Remarks","pos":[107490,107497]},{"content":"This method updates additional toolbar attributes that are affected by the removal of the button.","pos":[107501,107598]},{"content":"For example, this method removes nonessential separators from the toolbar and rebuilds the table of shortcut keys.","pos":[107599,107713]},{"pos":[107720,107851],"content":"For more information about the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> button, see <bpt id=\"p2\">[</bpt>CMFCToolBar::EnableCustomizeButton<ept id=\"p2\">](#cmfctoolbar__enablecustomizebutton)</ept>.","source":"For more information about the **Customize** button, see [CMFCToolBar::EnableCustomizeButton](#cmfctoolbar__enablecustomizebutton)."},{"pos":[107914,107950],"content":"CMFCToolBar::RemoveStateFromRegistry"},{"content":"Deletes the state information for the toolbar from the Windows registry.","pos":[107954,108026]},{"content":"Parameters","pos":[108171,108181]},{"content":"[in]","pos":[108185,108189]},{"content":"Specifies the registry key where the state information is located.","pos":[108211,108277]},{"content":"[in]","pos":[108284,108288]},{"content":"The control ID of the toolbar.","pos":[108301,108331]},{"content":"[in]","pos":[108338,108342]},{"content":"The resource ID of the toolbar.","pos":[108353,108384]},{"content":"If this parameter is -1, this method uses the <bpt id=\"p1\">[</bpt>CWnd::GetDlgCtrlID<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__getdlgctrlid)</ept> method to retrieve the resource ID.","pos":[108385,108541],"source":" If this parameter is -1, this method uses the [CWnd::GetDlgCtrlID](../../mfc/reference/cwnd-class.md#cwnd__getdlgctrlid) method to retrieve the resource ID."},{"content":"Return Value","pos":[108551,108563]},{"content":"Nonzero if the method succeeds; otherwise 0.","pos":[108567,108611]},{"content":"Remarks","pos":[108621,108628]},{"content":"The framework calls this method when it deletes a user-defined toolbar.","pos":[108632,108703]},{"content":"Override this method if you store additional state information in the Windows registry.","pos":[108710,108797]},{"pos":[108850,108876],"content":"CMFCToolBar::ReplaceButton"},{"content":"Replaces a toolbar button with another toolbar button.","pos":[108880,108934]},{"content":"Parameters","pos":[109057,109067]},{"content":"[in]","pos":[109071,109075]},{"content":"The command ID of the button to replace.","pos":[109087,109127]},{"content":"[in]","pos":[109134,109138]},{"content":"A reference to the <ph id=\"ph1\">`CMFCToolBarButton`</ph> to insert.","pos":[109151,109200],"source":" A reference to the `CMFCToolBarButton` to insert."},{"content":"[in]","pos":[109207,109211]},{"content":"A Boolean value that specifies whether to replace all buttons that have the command ID specified by <ph id=\"ph1\">`uiCmd`</ph>.","pos":[109222,109330],"source":" A Boolean value that specifies whether to replace all buttons that have the command ID specified by `uiCmd`."},{"content":"If this parameter is <ph id=\"ph1\">`TRUE`</ph>, all buttons that have the specified command ID are replaced.","pos":[109331,109420],"source":" If this parameter is `TRUE`, all buttons that have the specified command ID are replaced."},{"content":"Otherwise, the first button is replaced.","pos":[109421,109461]},{"content":"Return Value","pos":[109471,109483]},{"content":"The number of buttons that are replaced.","pos":[109487,109527]},{"content":"This method returns 0 if a button with the specified command ID does not exist on the toolbar.","pos":[109528,109622]},{"content":"Remarks","pos":[109632,109639]},{"content":"Call this method when you want to add toolbar buttons that cannot be loaded from resources.","pos":[109643,109734]},{"content":"You can create a placeholder button at design-time and replace that button with a custom button when you initialize the toolbar.","pos":[109735,109863]},{"content":"See the VisualStudioDemo sample for an example that uses this method.","pos":[109864,109933]},{"content":"Example","pos":[109943,109950]},{"content":"The following example demonstrates how to use the <ph id=\"ph1\">`ReplaceButton`</ph> method in the <ph id=\"ph2\">`CMFCToolBar`</ph> class.","pos":[109954,110054],"source":"The following example demonstrates how to use the `ReplaceButton` method in the `CMFCToolBar` class."},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>IE Demo sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[110055,110134],"source":" This code snippet is part of the [IE Demo sample](../../visual-cpp-samples.md)."},{"content":"NVC_MFC_IEDemo#6","pos":[110152,110168]},{"content":"NVC_MFC_IEDemo#10","pos":[110243,110260]},{"pos":[110371,110392],"content":"CMFCToolBar::ResetAll"},{"content":"Restores all toolbars to their original states.","pos":[110396,110443]},{"content":"Remarks","pos":[110502,110509]},{"content":"This method calls the <bpt id=\"p1\">[</bpt>CMFCToolBar::RestoreOriginalState<ept id=\"p1\">](#cmfctoolbar__restoreoriginalstate)</ept> method on each toolbar in the application that can be restored.","pos":[110513,110670],"source":"This method calls the [CMFCToolBar::RestoreOriginalState](#cmfctoolbar__restoreoriginalstate) method on each toolbar in the application that can be restored."},{"content":"It uses the <bpt id=\"p1\">[</bpt>CMFCToolBar::CanBeRestored<ept id=\"p1\">](#cmfctoolbar__canberestored)</ept> method to determine whether a toolbar can be restored.","pos":[110671,110795],"source":" It uses the [CMFCToolBar::CanBeRestored](#cmfctoolbar__canberestored) method to determine whether a toolbar can be restored."},{"pos":[110849,110876],"content":"CMFCToolBar::ResetAllImages"},{"content":"Clears all toolbar image collections in the application.","pos":[110880,110936]},{"content":"Remarks","pos":[111001,111008]},{"pos":[111012,111199],"content":"This method clears the image collections that are initialized by the <bpt id=\"p1\">[</bpt>CMFCToolBar::LoadToolBar<ept id=\"p1\">](#cmfctoolbar__loadtoolbar)</ept> and <bpt id=\"p2\">[</bpt>CMFCToolBar::LoadBitmap<ept id=\"p2\">](#cmfctoolbar__loadbitmap)</ept> methods.","source":"This method clears the image collections that are initialized by the [CMFCToolBar::LoadToolBar](#cmfctoolbar__loadtoolbar) and [CMFCToolBar::LoadBitmap](#cmfctoolbar__loadbitmap) methods."},{"pos":[111250,111274],"content":"CMFCToolBar::ResetImages"},{"content":"Remarks","pos":[111430,111437]},{"pos":[111489,111514],"content":"CMFCToolBar::RestoreFocus"},{"content":"Remarks","pos":[111671,111678]},{"pos":[111738,111771],"content":"CMFCToolBar::RestoreOriginalState"},{"content":"Restores the original state of a toolbar.","pos":[111775,111816]},{"content":"Return Value","pos":[111878,111890]},{"pos":[111901,111987],"content":"if the method succeeds, or <ph id=\"ph1\">`FALSE`</ph> if the method fails or the toolbar is user-defined.","source":" if the method succeeds, or `FALSE` if the method fails or the toolbar is user-defined."},{"content":"Remarks","pos":[111997,112004]},{"pos":[112008,112135],"content":"This method loads the toolbar from the resource file by using the <bpt id=\"p1\">[</bpt>CMFCToolBar::LoadToolBar<ept id=\"p1\">](#cmfctoolbar__loadtoolbar)</ept> method.","source":"This method loads the toolbar from the resource file by using the [CMFCToolBar::LoadToolBar](#cmfctoolbar__loadtoolbar) method."},{"pos":[112142,112276],"content":"The framework calls this method when the user chooses the <bpt id=\"p1\">**</bpt>Reset All<ept id=\"p1\">**</ept> button on the <bpt id=\"p2\">**</bpt>Toolbars<ept id=\"p2\">**</ept> page of a customization dialog box.","source":"The framework calls this method when the user chooses the **Reset All** button on the **Toolbars** page of a customization dialog box."},{"pos":[112330,112357],"content":"CMFCToolBar::SaveParameters"},{"content":"Parameters","pos":[112555,112565]},{"pos":[112569,112573],"content":"[in]"},{"content":"Return Value","pos":[112601,112613]},{"content":"Remarks","pos":[112623,112630]},{"pos":[112679,112701],"content":"CMFCToolBar::SaveState"},{"content":"Saves the state information for the toolbar in the Windows registry.","pos":[112705,112773]},{"content":"Parameters","pos":[112904,112914]},{"content":"[in]","pos":[112918,112922]},{"content":"Specifies the relative path of the Windows registry key.","pos":[112944,113000]},{"content":"[in]","pos":[113007,113011]},{"content":"The control ID of the toolbar.","pos":[113024,113054]},{"content":"[in]","pos":[113061,113065]},{"content":"The resource ID of the toolbar.","pos":[113076,113107]},{"content":"Return Value","pos":[113117,113129]},{"content":"Nonzero if the method succeeds; otherwise 0.","pos":[113133,113177]},{"content":"Remarks","pos":[113187,113194]},{"content":"The framework calls this method when it saves the application state to the registry.","pos":[113198,113282]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CWinAppEx::SaveState<ept id=\"p1\">](../../mfc/reference/cwinappex-class.md#cwinappex__savestate)</ept>.","pos":[113283,113393],"source":" For more information, see [CWinAppEx::SaveState](../../mfc/reference/cwinappex-class.md#cwinappex__savestate)."},{"pos":[113449,113478],"content":"CMFCToolBar::SetBasicCommands"},{"content":"Sets the list of commands that are always displayed when a user opens a menu.","pos":[113482,113559]},{"content":"Parameters","pos":[113660,113670]},{"content":"[in]","pos":[113674,113678]},{"content":"A reference to a <ph id=\"ph1\">`CList`</ph> object that contains a collection of commands.","pos":[113696,113767],"source":" A reference to a `CList` object that contains a collection of commands."},{"content":"Remarks","pos":[113777,113784]},{"content":"A basic command is always displayed when the menu is opened.","pos":[113788,113848]},{"content":"This method is meaningful when the user chooses to view recently used commands.","pos":[113849,113928]},{"content":"Use the <bpt id=\"p1\">[</bpt>CMFCToolBar::AddBasicCommand<ept id=\"p1\">](#cmfctoolbar__addbasiccommand)</ept> method to add a command to the list of basic commands.","pos":[113935,114059],"source":"Use the [CMFCToolBar::AddBasicCommand](#cmfctoolbar__addbasiccommand) method to add a command to the list of basic commands."},{"content":"Use the <bpt id=\"p1\">[</bpt>CMFCToolBar::GetBasicCommands<ept id=\"p1\">](#cmfctoolbar__getbasiccommands)</ept> method to retrieve the list of basic commands that is used by your application.","pos":[114060,114211],"source":" Use the [CMFCToolBar::GetBasicCommands](#cmfctoolbar__getbasiccommands) method to retrieve the list of basic commands that is used by your application."},{"content":"See the Explorer sample for an example that uses this method.","pos":[114218,114279]},{"pos":[114332,114358],"content":"CMFCToolBar::SetButtonInfo"},{"content":"Sets the command ID, style, and image ID of a toolbar button.","pos":[114362,114423]},{"content":"Parameters","pos":[114538,114548]},{"content":"[in]","pos":[114552,114556]},{"content":"The zero-based index of the button whose properties are set.","pos":[114569,114629]},{"content":"[in]","pos":[114636,114640]},{"content":"The command ID of the button.","pos":[114650,114679]},{"content":"[in]","pos":[114686,114690]},{"content":"The style of the button.","pos":[114703,114727]},{"content":"See <bpt id=\"p1\">[</bpt>ToolBar Control Styles<ept id=\"p1\">](../../mfc/reference/toolbar-control-styles.md)</ept> for the list of available toolbar button styles.","pos":[114728,114852],"source":" See [ToolBar Control Styles](../../mfc/reference/toolbar-control-styles.md) for the list of available toolbar button styles."},{"content":"[in]","pos":[114859,114863]},{"content":"The zero-based image index of the button (that is, the index in the collection of toolbar images).","pos":[114876,114974]},{"content":"Remarks","pos":[114984,114991]},{"content":"Call this method to set the properties of a toolbar button.","pos":[114995,115054]},{"pos":[115061,115175],"content":"In Debug builds, this method generates an assertion failure if the index that is specified by <ph id=\"ph1\">`nIndex`</ph> is invalid.","source":"In Debug builds, this method generates an assertion failure if the index that is specified by `nIndex` is invalid."},{"pos":[115182,115294],"content":"Call the <bpt id=\"p1\">[</bpt>CMFCToolBar::SetButtonStyle<ept id=\"p1\">](#cmfctoolbar__setbuttonstyle)</ept> method to set only the style of the button.","source":"Call the [CMFCToolBar::SetButtonStyle](#cmfctoolbar__setbuttonstyle) method to set only the style of the button."},{"pos":[115344,115367],"content":"CMFCToolBar::SetButtons"},{"content":"Sets the buttons for the toolbar.","pos":[115371,115404]},{"content":"Parameters","pos":[115532,115542]},{"content":"[in]","pos":[115546,115550]},{"content":"A pointer to the array of command IDs of the buttons to insert.","pos":[115566,115629]},{"content":"[in]","pos":[115636,115640]},{"content":"The number of items in <ph id=\"ph1\">`lpIDArray`</ph>.","pos":[115655,115690],"source":" The number of items in `lpIDArray`."},{"content":"[in]","pos":[115697,115701]},{"content":"A Boolean value that specifies whether to associate the existing button images with the inserted buttons.","pos":[115720,115825]},{"content":"If this parameter is <ph id=\"ph1\">`TRUE`</ph>, the images are remapped.","pos":[115826,115879],"source":" If this parameter is `TRUE`, the images are remapped."},{"content":"Return Value","pos":[115889,115901]},{"content":"Nonzero if the method succeeds; otherwise 0.","pos":[115905,115949]},{"content":"Remarks","pos":[115959,115966]},{"content":"Call this method to remove existing buttons from a toolbar and insert a collection of new buttons.","pos":[115970,116068]},{"content":"This method adds the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> button to the toolbar and sends the <ph id=\"ph1\">`AFX_WM_RESETTOOLBAR`</ph> message to the parent window of the toolbar.","pos":[116075,116212],"source":"This method adds the **Customize** button to the toolbar and sends the `AFX_WM_RESETTOOLBAR` message to the parent window of the toolbar."},{"content":"For more information about the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> button, see <bpt id=\"p2\">[</bpt>CMFCToolBar::EnableCustomizeButton<ept id=\"p2\">](#cmfctoolbar__enablecustomizebutton)</ept>.","pos":[116213,116344],"source":" For more information about the **Customize** button, see [CMFCToolBar::EnableCustomizeButton](#cmfctoolbar__enablecustomizebutton)."},{"pos":[116398,116425],"content":"CMFCToolBar::SetButtonStyle"},{"content":"Sets the style of the toolbar button at the given index.","pos":[116429,116485]},{"content":"Parameters","pos":[116575,116585]},{"content":"[in]","pos":[116589,116593]},{"content":"The zero-based index of the toolbar button whose style is to be set.","pos":[116606,116674]},{"content":"[in]","pos":[116681,116685]},{"content":"The style of the button.","pos":[116698,116722]},{"content":"See <bpt id=\"p1\">[</bpt>ToolBar Control Styles<ept id=\"p1\">](../../mfc/reference/toolbar-control-styles.md)</ept> for the list of available toolbar button styles.","pos":[116723,116847],"source":" See [ToolBar Control Styles](../../mfc/reference/toolbar-control-styles.md) for the list of available toolbar button styles."},{"content":"Remarks","pos":[116857,116864]},{"pos":[116868,116992],"content":"This method removes the <ph id=\"ph1\">`TBBS_PRESSED`</ph> style if <ph id=\"ph2\">`nStyle`</ph> is <ph id=\"ph3\">`TBBS_DISABLED`</ph> because the user cannot click a disabled button.","source":"This method removes the `TBBS_PRESSED` style if `nStyle` is `TBBS_DISABLED` because the user cannot click a disabled button."},{"pos":[117045,117071],"content":"CMFCToolBar::SetButtonText"},{"content":"Sets the text label of a toolbar button.","pos":[117075,117115]},{"content":"Parameters","pos":[117201,117211]},{"content":"[in]","pos":[117215,117219]},{"content":"The index of the toolbar button.","pos":[117232,117264]},{"content":"[in]","pos":[117271,117275]},{"content":"The text label of the toolbar button.","pos":[117290,117327]},{"content":"Must be non- <ph id=\"ph1\">`NULL`</ph>.","pos":[117328,117348],"source":" Must be non- `NULL`."},{"content":"Return Value","pos":[117358,117370]},{"pos":[117381,117423],"content":"if the method succeeds; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the method succeeds; otherwise `FALSE`."},{"content":"Remarks","pos":[117433,117440]},{"pos":[117444,117535],"content":"This method returns <ph id=\"ph1\">`FALSE`</ph> if the provided index does not refer to a valid toolbar button.","source":"This method returns `FALSE` if the provided index does not refer to a valid toolbar button."},{"pos":[117597,117632],"content":"CMFCToolBar::SetCommandUsageOptions"},{"content":"Specifies when rarely used commands do not appear in the menu of the application.","pos":[117636,117717]},{"content":"Parameters","pos":[117835,117845]},{"content":"[in]","pos":[117849,117853]},{"content":"Specifies the number of times that commands must be executed before the framework shows only the basic and recently-used commands.","pos":[117871,118001]},{"content":"[in]","pos":[118008,118012]},{"content":"The percentage of times that a command must be executed to be considered a recently-used command.","pos":[118038,118135]},{"content":"Return Value","pos":[118145,118157]},{"pos":[118169,118243],"content":"if <ph id=\"ph1\">`nMinUsagePercentage`</ph> is equal to or larger than 100; otherwise <ph id=\"ph2\">`TRUE`</ph>.","source":" if `nMinUsagePercentage` is equal to or larger than 100; otherwise `TRUE`."},{"content":"Remarks","pos":[118253,118260]},{"content":"Call this method to customize the algorithm that the framework uses to determine how basic and recently used menu items appear.","pos":[118264,118391]},{"content":"For more information about basic commands, see <bpt id=\"p1\">[</bpt>CMFCToolBar::AddBasicCommand<ept id=\"p1\">](#cmfctoolbar__addbasiccommand)</ept>.","pos":[118392,118501],"source":" For more information about basic commands, see [CMFCToolBar::AddBasicCommand](#cmfctoolbar__addbasiccommand)."},{"content":"This class uses the <ph id=\"ph1\">`CMFCCmdUsageCount`</ph> class to track the usage count of commands.","pos":[118508,118591],"source":"This class uses the `CMFCCmdUsageCount` class to track the usage count of commands."},{"content":"For more information about this class, see <bpt id=\"p1\">[</bpt>CMFCCmdUsageCount Class<ept id=\"p1\">](../../mfc/reference/cmfccmdusagecount-class.md)</ept>.","pos":[118592,118709],"source":" For more information about this class, see [CMFCCmdUsageCount Class](../../mfc/reference/cmfccmdusagecount-class.md)."},{"pos":[118765,118794],"content":"CMFCToolBar::SetCustomizeMode"},{"content":"Enables or disables customization mode for all toolbars in the application.","pos":[118798,118873]},{"content":"Parameters","pos":[118954,118964]},{"content":"[in]","pos":[118968,118972]},{"content":"A Boolean value that specifies whether to enable or disable customization mode.","pos":[118983,119062]},{"content":"Set this parameter to <ph id=\"ph1\">`TRUE`</ph> to enable customization mode or <ph id=\"ph2\">`FALSE`</ph> to disable it.","pos":[119063,119146],"source":" Set this parameter to `TRUE` to enable customization mode or `FALSE` to disable it."},{"content":"Return Value","pos":[119156,119168]},{"pos":[119179,119252],"content":"if calling this method changes the customization mode; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if calling this method changes the customization mode; otherwise `FALSE`."},{"content":"Remarks","pos":[119262,119269]},{"content":"This method adjusts the layout of and redraws each toolbar in the application.","pos":[119273,119351]},{"content":"Call the <bpt id=\"p1\">[</bpt>CMFCToolBar::IsCustomizeMode<ept id=\"p1\">](#cmfctoolbar__iscustomizemode)</ept> method to determine whether the application is in customization mode,","pos":[119352,119492],"source":" Call the [CMFCToolBar::IsCustomizeMode](#cmfctoolbar__iscustomizemode) method to determine whether the application is in customization mode,"},{"pos":[119554,119589],"content":"CMFCToolBar::SetGrayDisabledButtons"},{"content":"Specifies whether unavailable buttons on the toolbar are dimmed, or whether button-unavailable images are used.","pos":[119593,119704]},{"content":"Parameters","pos":[119785,119795]},{"content":"[in]","pos":[119799,119803]},{"content":"A Boolean value that specifies how to display unavailable buttons.","pos":[119830,119896]},{"content":"If this parameter is <ph id=\"ph1\">`TRUE`</ph>, the framework dims the buttons.","pos":[119897,119957],"source":" If this parameter is `TRUE`, the framework dims the buttons."},{"content":"Otherwise, the framework uses the collection of button-unavailable images.","pos":[119958,120032]},{"content":"Remarks","pos":[120042,120049]},{"content":"By default, unavailable buttons are dimmed.","pos":[120053,120096]},{"pos":[120145,120167],"content":"CMFCToolBar::SetHeight"},{"content":"Sets the height of the toolbar.","pos":[120171,120202]},{"content":"Parameters","pos":[120257,120267]},{"content":"[in]","pos":[120271,120275]},{"content":"The height of the toolbar, in pixels.","pos":[120290,120327]},{"content":"Remarks","pos":[120337,120344]},{"content":"This method redraws the toolbar after it sets the height.","pos":[120348,120405]},{"pos":[120456,120480],"content":"CMFCToolBar::SetHelpMode"},{"content":"Parameters","pos":[120660,120670]},{"pos":[120674,120678],"content":"[in]"},{"content":"Remarks","pos":[120694,120701]},{"pos":[120747,120766],"content":"CMFCToolBar::SetHot"},{"content":"Parameters","pos":[120939,120949]},{"pos":[120953,120957],"content":"[in]"},{"content":"Return Value","pos":[120981,120993]},{"content":"Remarks","pos":[121003,121010]},{"pos":[121062,121087],"content":"CMFCToolBar::SetHotBorder"},{"content":"Specifies whether toolbar buttons are hot-tracked.","pos":[121091,121141]},{"content":"Parameters","pos":[121206,121216]},{"content":"[in]","pos":[121220,121224]},{"content":"A Boolean value that specifies whether to hot-track toolbar buttons.","pos":[121245,121313]},{"content":"If this parameter is <ph id=\"ph1\">`TRUE`</ph>, the toolbar hot-tracks its buttons.","pos":[121314,121378],"source":" If this parameter is `TRUE`, the toolbar hot-tracks its buttons."},{"content":"Otherwise, the toolbar does not hot-track its buttons.","pos":[121379,121433]},{"content":"Remarks","pos":[121443,121450]},{"content":"If a button is hot-tracked, the framework highlights the button when the mouse moves across it.","pos":[121454,121549]},{"content":"By default, each toolbar hot-tracks its buttons.","pos":[121550,121598]},{"pos":[121605,121733],"content":"Call the <bpt id=\"p1\">[</bpt>CMFCToolBar::GetHotBorder<ept id=\"p1\">](#cmfctoolbar__gethotborder)</ept> method to determine whether the toolbar hot-tracks its buttons.","source":"Call the [CMFCToolBar::GetHotBorder](#cmfctoolbar__gethotborder) method to determine whether the toolbar hot-tracks its buttons."},{"pos":[121788,121816],"content":"CMFCToolBar::SetHotTextColor"},{"content":"Sets the text color for hot toolbar buttons.","pos":[121820,121864]},{"content":"Parameters","pos":[121936,121946]},{"content":"[in]","pos":[121950,121954]},{"content":"Specifies the text color for toolbar buttons that are hot-tracked.","pos":[121968,122034]},{"content":"Remarks","pos":[122044,122051]},{"pos":[122055,122231],"content":"For more information about hot-tracked toolbar buttons, see <bpt id=\"p1\">[</bpt>CMFCToolBar::GetHotBorder<ept id=\"p1\">](#cmfctoolbar__gethotborder)</ept> and <bpt id=\"p2\">[</bpt>CMFCToolBar::SetHotBorder<ept id=\"p2\">](#cmfctoolbar__sethotborder)</ept>.","source":"For more information about hot-tracked toolbar buttons, see [CMFCToolBar::GetHotBorder](#cmfctoolbar__gethotborder) and [CMFCToolBar::SetHotBorder](#cmfctoolbar__sethotborder)."},{"pos":[122287,122316],"content":"CMFCToolBar::SetIgnoreSetText"},{"content":"Parameters","pos":[122480,122490]},{"pos":[122494,122498],"content":"[in]"},{"content":"Remarks","pos":[122517,122524]},{"pos":[122577,122603],"content":"CMFCToolBar::SetLargeIcons"},{"content":"Specifies whether toolbar buttons display large icons.","pos":[122607,122661]},{"content":"Parameters","pos":[122736,122746]},{"content":"[in]","pos":[122750,122754]},{"content":"A Boolean value that specifies which icons to use.","pos":[122772,122822]},{"content":"If this parameter is <ph id=\"ph1\">`TRUE`</ph>, the framework displays large icons.","pos":[122823,122887],"source":" If this parameter is `TRUE`, the framework displays large icons."},{"content":"Otherwise, the framework displays regular icons.","pos":[122888,122936]},{"content":"Remarks","pos":[122946,122953]},{"content":"The framework calls this method when the user changes the state of the <bpt id=\"p1\">**</bpt>Large Icons<ept id=\"p1\">**</ept> check box in the <bpt id=\"p2\">**</bpt>Options<ept id=\"p2\">**</ept> tab of the <bpt id=\"p3\">**</bpt>Customize<ept id=\"p3\">**</ept> dialog box.","pos":[122957,123109],"source":"The framework calls this method when the user changes the state of the **Large Icons** check box in the **Options** tab of the **Customize** dialog box."},{"content":"This method resizes all toolbars in the application.","pos":[123110,123162]},{"content":"By default, the framework displays regular icons.","pos":[123169,123218]},{"pos":[123225,123380],"content":"For more information about the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> dialog box, see <bpt id=\"p2\">[</bpt>CMFCToolBarsCustomizeDialog Class<ept id=\"p2\">](../../mfc/reference/cmfctoolbarscustomizedialog-class.md)</ept>.","source":"For more information about the **Customize** dialog box, see [CMFCToolBarsCustomizeDialog Class](../../mfc/reference/cmfctoolbarscustomizedialog-class.md)."},{"pos":[123434,123461],"content":"CMFCToolBar::SetLockedSizes"},{"content":"Sets the sizes of locked buttons and locked images on the toolbar.","pos":[123465,123531]},{"content":"Parameters","pos":[123652,123662]},{"content":"[in]","pos":[123666,123670]},{"content":"Specifies the size of locked toolbar buttons.","pos":[123687,123732]},{"content":"[in]","pos":[123739,123743]},{"content":"Specifies the size of locked toolbar images.","pos":[123759,123803]},{"content":"Specifies whether to scale or not locked toolbar images in high DPI mode.","pos":[123826,123899]},{"content":"Remarks","pos":[123909,123916]},{"content":"The default size of locked buttons is 23x22 pixels.","pos":[123920,123971]},{"content":"The default size of locked images is 16x15 pixels.","pos":[123972,124022]},{"content":"Call the <bpt id=\"p1\">[</bpt>CMFCToolBar::GetLockedImageSize<ept id=\"p1\">](#cmfctoolbar__getlockedimagesize)</ept> method to retrieve the size of locked images.","pos":[124029,124151],"source":"Call the [CMFCToolBar::GetLockedImageSize](#cmfctoolbar__getlockedimagesize) method to retrieve the size of locked images."},{"content":"Call the <bpt id=\"p1\">[</bpt>CMFCToolBar::GetButtonSize<ept id=\"p1\">](#cmfctoolbar__getbuttonsize)</ept> method to retrieve the size of locked toolbar buttons.","pos":[124152,124273],"source":" Call the [CMFCToolBar::GetButtonSize](#cmfctoolbar__getbuttonsize) method to retrieve the size of locked toolbar buttons."},{"pos":[124324,124348],"content":"CMFCToolBar::SetMaskMode"},{"content":"Parameters","pos":[124508,124518]},{"pos":[124522,124526],"content":"[in]"},{"content":"Remarks","pos":[124546,124553]},{"pos":[124605,124630],"content":"CMFCToolBar::SetMenuSizes"},{"content":"Sets the size of toolbar menu buttons and their images.","pos":[124634,124689]},{"content":"Parameters","pos":[124794,124804]},{"content":"[in]","pos":[124808,124812]},{"content":"Specifies the size of toolbar buttons, in pixels.","pos":[124829,124878]},{"content":"[in]","pos":[124885,124889]},{"content":"Specifies the size of toolbar images, in pixels.","pos":[124905,124953]},{"content":"Remarks","pos":[124963,124970]},{"content":"By default, menu buttons and their images have an undefined size.","pos":[124974,125039]},{"pos":[125046,125289],"content":"Call the <bpt id=\"p1\">[</bpt>CMFCToolBar::GetMenuButtonSize<ept id=\"p1\">](#cmfctoolbar__getmenubuttonsize)</ept> method to determine the size of menu buttons and the <bpt id=\"p2\">[</bpt>CMFCToolBar::GetMenuImageSize<ept id=\"p2\">](#cmfctoolbar__getmenuimagesize)</ept> method to determine the size of menu button images.","source":"Call the [CMFCToolBar::GetMenuButtonSize](#cmfctoolbar__getmenubuttonsize) method to determine the size of menu buttons and the [CMFCToolBar::GetMenuImageSize](#cmfctoolbar__getmenuimagesize) method to determine the size of menu button images."},{"content":"See the IEDemo and MSMoneyDemo samples for examples that use this method.","pos":[125296,125369]},{"pos":[125432,125468],"content":"CMFCToolBar::SetNonPermittedCommands"},{"content":"Sets the list of commands that cannot be executed by the user.","pos":[125472,125534]},{"content":"Parameters","pos":[125632,125642]},{"content":"[in]","pos":[125646,125650]},{"content":"A reference to a <ph id=\"ph1\">`CList`</ph> object that contains the commands that cannot be executed by the user.","pos":[125668,125763],"source":" A reference to a `CList` object that contains the commands that cannot be executed by the user."},{"content":"Remarks","pos":[125773,125780]},{"content":"Call this method to prevent the user from selecting certain commands.","pos":[125784,125853]},{"content":"For example, you might want to prevent the user from selecting certain commands for security reasons.","pos":[125854,125955]},{"content":"See the MDITabsDemo and MenuSubSet samples for examples that use this method.","pos":[125956,126033]},{"content":"This method clears the previous list of non-permitted commands.","pos":[126040,126103]},{"content":"By default, the list of non-permitted commands is empty.","pos":[126104,126160]},{"pos":[126220,126253],"content":"CMFCToolBar::SetOneRowWithSibling"},{"content":"Positions the toolbar and its sibling on the same row.","pos":[126257,126311]},{"content":"Remarks","pos":[126365,126372]},{"pos":[126376,126468],"content":"The framework calls this method when the user clicks the <bpt id=\"p1\">**</bpt>Show Buttons on One Row<ept id=\"p1\">**</ept> button.","source":"The framework calls this method when the user clicks the **Show Buttons on One Row** button."},{"content":"Call the <bpt id=\"p1\">[</bpt>CMFCToolBar::SetSiblingToolBar<ept id=\"p1\">](#cmfctoolbar__setsiblingtoolbar)</ept> method to enable the <bpt id=\"p2\">**</bpt>Show Buttons on One Row<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>Show Buttons on Two Rows<ept id=\"p3\">**</ept> buttons.","pos":[126475,126639],"source":"Call the [CMFCToolBar::SetSiblingToolBar](#cmfctoolbar__setsiblingtoolbar) method to enable the **Show Buttons on One Row** or **Show Buttons on Two Rows** buttons."},{"content":"If you call <bpt id=\"p1\">[</bpt>CMFCToolBar::SetSiblingToolBar<ept id=\"p1\">](#cmfctoolbar__setsiblingtoolbar)</ept> for this toolbar, the sibling toolbar is moved to the row of this toolbar.","pos":[126640,126792],"source":" If you call [CMFCToolBar::SetSiblingToolBar](#cmfctoolbar__setsiblingtoolbar) for this toolbar, the sibling toolbar is moved to the row of this toolbar."},{"content":"Otherwise, this toolbar is moved to the row of the sibling.","pos":[126793,126852]},{"pos":[126859,127025],"content":"The framework calls the <bpt id=\"p1\">[</bpt>CMFCToolBar::SetTwoRowsWithSibling<ept id=\"p1\">](#cmfctoolbar__settworowswithsibling)</ept> method when the user clicks the <bpt id=\"p2\">**</bpt>Show Buttons on Two Rows<ept id=\"p2\">**</ept> button.","source":"The framework calls the [CMFCToolBar::SetTwoRowsWithSibling](#cmfctoolbar__settworowswithsibling) method when the user clicks the **Show Buttons on Two Rows** button."},{"pos":[127079,127106],"content":"CMFCToolBar::SetOrigButtons"},{"content":"Parameters","pos":[127286,127296]},{"pos":[127300,127304],"content":"[in]"},{"content":"Remarks","pos":[127331,127338]},{"pos":[127390,127415],"content":"CMFCToolBar::SetPermament"},{"content":"Specifies whether a user can close the toolbar.","pos":[127419,127466]},{"content":"Parameters","pos":[127532,127542]},{"content":"[in]","pos":[127546,127550]},{"content":"A Boolean value that specifies whether a user can close the toolbar.","pos":[127567,127635]},{"content":"If this parameter is <ph id=\"ph1\">`TRUE`</ph>, a user cannot close the toolbar.","pos":[127636,127697],"source":" If this parameter is `TRUE`, a user cannot close the toolbar."},{"content":"Otherwise, a user can close the toolbar.","pos":[127698,127738]},{"content":"Remarks","pos":[127748,127755]},{"content":"By default, a user can close each toolbar.","pos":[127759,127801]},{"pos":[127808,127928],"content":"Call the <bpt id=\"p1\">[</bpt>CMFCToolBar::CanBeClosed<ept id=\"p1\">](#cmfctoolbar__canbeclosed)</ept> method to determine whether a user can close the toolbar.","source":"Call the [CMFCToolBar::CanBeClosed](#cmfctoolbar__canbeclosed) method to determine whether a user can close the toolbar."},{"pos":[127992,128029],"content":"CMFCToolBar::SetRouteCommandsViaFrame"},{"content":"Specifies whether the parent frame or the owner sends commands to the toolbar.","pos":[128033,128111]},{"content":"Parameters","pos":[128180,128190]},{"content":"[in]","pos":[128194,128198]},{"content":"If this parameter is <ph id=\"ph1\">`TRUE`</ph>, the parent frame sends commands to the toolbar.","pos":[128211,128287],"source":" If this parameter is `TRUE`, the parent frame sends commands to the toolbar."},{"content":"Otherwise, the owner sends commands to the toolbar.","pos":[128288,128339]},{"content":"Remarks","pos":[128349,128356]},{"content":"By default, the parent frame sends commands to the toolbar.","pos":[128360,128419]},{"content":"Call the <bpt id=\"p1\">[</bpt>CMFCToolBar::GetRouteCommandsViaFrame<ept id=\"p1\">](#cmfctoolbar__getroutecommandsviaframe)</ept> method to determine whether the parent frame or the owner sends commands to the toolbar.","pos":[128420,128597],"source":" Call the [CMFCToolBar::GetRouteCommandsViaFrame](#cmfctoolbar__getroutecommandsviaframe) method to determine whether the parent frame or the owner sends commands to the toolbar."},{"pos":[128652,128680],"content":"CMFCToolBar::SetShowTooltips"},{"content":"Specifies whether the framework displays tool tips.","pos":[128684,128735]},{"content":"Parameters","pos":[128802,128812]},{"content":"[in]","pos":[128816,128820]},{"content":"If this parameter is <ph id=\"ph1\">`TRUE`</ph>, the framework shows tool tips.","pos":[128833,128892],"source":" If this parameter is `TRUE`, the framework shows tool tips."},{"content":"Otherwise, the framework hides tool tips.","pos":[128893,128934]},{"content":"Remarks","pos":[128944,128951]},{"content":"By default, the framework shows tool tips.","pos":[128955,128997]},{"pos":[129004,129133],"content":"Call the <bpt id=\"p1\">[</bpt>CMFCToolBar::GetShowTooltips<ept id=\"p1\">](#cmfctoolbar__getshowtooltips)</ept> method to determine whether the framework shows tool tips.","source":"Call the [CMFCToolBar::GetShowTooltips](#cmfctoolbar__getshowtooltips) method to determine whether the framework shows tool tips."},{"pos":[129190,129220],"content":"CMFCToolBar::SetSiblingToolBar"},{"content":"Specifies the sibling of the toolbar.","pos":[129224,129261]},{"content":"Parameters","pos":[129340,129350]},{"content":"[in]","pos":[129354,129358]},{"content":"A pointer to the sibling toolbar.","pos":[129380,129413]},{"content":"Remarks","pos":[129423,129430]},{"content":"This method enables the <bpt id=\"p1\">**</bpt>Show Buttons on One Row<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Show Buttons on Two Rows<ept id=\"p2\">**</ept> buttons that are shown when the user displays the <bpt id=\"p3\">**</bpt>Customize<ept id=\"p3\">**</ept> pop-up menu.","pos":[129434,129594],"source":"This method enables the **Show Buttons on One Row** or **Show Buttons on Two Rows** buttons that are shown when the user displays the **Customize** pop-up menu."},{"content":"Call this method when you want to enable the user to specify whether related toolbars appear on the same row or on different rows.","pos":[129595,129725]},{"content":"Call this method after you enable the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> button that appears on the toolbar.","pos":[129732,129819],"source":"Call this method after you enable the **Customize** button that appears on the toolbar."},{"content":"To enable the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> button, call the <bpt id=\"p2\">[</bpt>CMFCToolBar::EnableCustomizeButton<ept id=\"p2\">](#cmfctoolbar__enablecustomizebutton)</ept> method.","pos":[129820,129946],"source":" To enable the **Customize** button, call the [CMFCToolBar::EnableCustomizeButton](#cmfctoolbar__enablecustomizebutton) method."},{"pos":[129953,130062],"content":"To retrieve the sibling of a toolbar, call <bpt id=\"p1\">[</bpt>CMFCToolBar::GetSiblingToolBar<ept id=\"p1\">](#cmfctoolbar__getsiblingtoolbar)</ept>.","source":"To retrieve the sibling of a toolbar, call [CMFCToolBar::GetSiblingToolBar](#cmfctoolbar__getsiblingtoolbar)."},{"pos":[130110,130131],"content":"CMFCToolBar::SetSizes"},{"content":"Specifies the sizes of buttons and images on all toolbars.","pos":[130135,130193]},{"content":"Parameters","pos":[130294,130304]},{"content":"[in]","pos":[130308,130312]},{"content":"The size of toolbar buttons, in pixels.","pos":[130329,130368]},{"content":"[in]","pos":[130375,130379]},{"content":"The size of toolbar button images, in pixels.","pos":[130395,130440]},{"content":"Remarks","pos":[130450,130457]},{"content":"The default size of toolbar buttons is 23x22 pixels.","pos":[130461,130513]},{"content":"The default size of toolbar button images is 16x15 pixels.","pos":[130514,130572]},{"content":"Call the <bpt id=\"p1\">[</bpt>CMFCToolBar::GetImageSize<ept id=\"p1\">](#cmfctoolbar__getimagesize)</ept> method to retrieve the size of toolbar button images.","pos":[130579,130697],"source":"Call the [CMFCToolBar::GetImageSize](#cmfctoolbar__getimagesize) method to retrieve the size of toolbar button images."},{"content":"Call the <bpt id=\"p1\">[</bpt>CMFCToolBar::GetButtonSize<ept id=\"p1\">](#cmfctoolbar__getbuttonsize)</ept> method to retrieve the size of toolbar buttons.","pos":[130698,130812],"source":" Call the [CMFCToolBar::GetButtonSize](#cmfctoolbar__getbuttonsize) method to retrieve the size of toolbar buttons."},{"pos":[130869,130899],"content":"CMFCToolBar::SetToolBarBtnText"},{"content":"Specifies properties of a button on the toolbar.","pos":[130903,130951]},{"content":"Parameters","pos":[131103,131113]},{"content":"[in]","pos":[131117,131121]},{"content":"The zero-based index of the toolbar button in the list of toolbar buttons.","pos":[131137,131211]},{"content":"[in]","pos":[131218,131222]},{"content":"Specifies the text label of the toolbar button.","pos":[131235,131282]},{"content":"[in]","pos":[131289,131293]},{"content":"If this parameter is <ph id=\"ph1\">`TRUE`</ph>, the framework shows the text label.","pos":[131309,131373],"source":" If this parameter is `TRUE`, the framework shows the text label."},{"content":"Otherwise, the framework hides the text label.","pos":[131374,131420]},{"content":"[in]","pos":[131427,131431]},{"content":"If this parameter is <ph id=\"ph1\">`TRUE`</ph>, the framework shows the toolbar button image.","pos":[131448,131522],"source":" If this parameter is `TRUE`, the framework shows the toolbar button image."},{"content":"Otherwise, the framework hides the toolbar button image.","pos":[131523,131579]},{"content":"Remarks","pos":[131589,131596]},{"content":"By default, the framework shows the images of toolbar buttons but does not show the text label of toolbar buttons.","pos":[131600,131714]},{"pos":[131721,131874],"content":"In Debug builds, this method generates an assertion failure if <ph id=\"ph1\">`nBtnIndex`</ph> does not refer to a valid toolbar button or the toolbar button is a separator.","source":"In Debug builds, this method generates an assertion failure if `nBtnIndex` does not refer to a valid toolbar button or the toolbar button is a separator."},{"pos":[131935,131969],"content":"CMFCToolBar::SetTwoRowsWithSibling"},{"content":"Positions the toolbar and its sibling on separate rows.","pos":[131973,132028]},{"content":"Remarks","pos":[132083,132090]},{"pos":[132094,132187],"content":"The framework calls this method when the user clicks the <bpt id=\"p1\">**</bpt>Show Buttons on Two Rows<ept id=\"p1\">**</ept> button.","source":"The framework calls this method when the user clicks the **Show Buttons on Two Rows** button."},{"content":"Call the <bpt id=\"p1\">[</bpt>CMFCToolBar::SetSiblingToolBar<ept id=\"p1\">](#cmfctoolbar__setsiblingtoolbar)</ept> method to enable the <bpt id=\"p2\">**</bpt>Show Buttons on One Row<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>Show Buttons on Two Rows<ept id=\"p3\">**</ept> buttons.","pos":[132194,132358],"source":"Call the [CMFCToolBar::SetSiblingToolBar](#cmfctoolbar__setsiblingtoolbar) method to enable the **Show Buttons on One Row** or **Show Buttons on Two Rows** buttons."},{"content":"If you call <bpt id=\"p1\">[</bpt>CMFCToolBar::SetSiblingToolBar<ept id=\"p1\">](#cmfctoolbar__setsiblingtoolbar)</ept> for this toolbar, the sibling toolbar is moved to a separate row.","pos":[132359,132502],"source":" If you call [CMFCToolBar::SetSiblingToolBar](#cmfctoolbar__setsiblingtoolbar) for this toolbar, the sibling toolbar is moved to a separate row."},{"content":"Otherwise, this toolbar is moved to a separate row.","pos":[132503,132554]},{"pos":[132561,132724],"content":"The framework calls the <bpt id=\"p1\">[</bpt>CMFCToolBar::SetOneRowWithSibling<ept id=\"p1\">](#cmfctoolbar__setonerowwithsibling)</ept> method when the user clicks the <bpt id=\"p2\">**</bpt>Show Buttons on One Row<ept id=\"p2\">**</ept> button.","source":"The framework calls the [CMFCToolBar::SetOneRowWithSibling](#cmfctoolbar__setonerowwithsibling) method when the user clicks the **Show Buttons on One Row** button."},{"pos":[132777,132803],"content":"CMFCToolBar::SetUserImages"},{"content":"Sets the collection of user-defined images in the application.","pos":[132807,132869]},{"content":"Parameters","pos":[132953,132963]},{"content":"[in]","pos":[132967,132971]},{"content":"A pointer to the collection of user-defined images.","pos":[132989,133040]},{"content":"Return Value","pos":[133050,133062]},{"pos":[133066,133244],"content":"Nonzero if the method succeeds; otherwise 0 if the specified <ph id=\"ph1\">`CMFCToolBarImages`</ph> object is not valid or has an image size that differs from the default image size of the toolbar.","source":"Nonzero if the method succeeds; otherwise 0 if the specified `CMFCToolBarImages` object is not valid or has an image size that differs from the default image size of the toolbar."},{"content":"Remarks","pos":[133254,133261]},{"content":"The framework uses user-defined images to draw toolbar buttons that are customized by the user.","pos":[133265,133360]},{"content":"The image list specified by <ph id=\"ph1\">`pUserImages`</ph> is shared among all toolbars in the application.","pos":[133361,133451],"source":" The image list specified by `pUserImages` is shared among all toolbars in the application."},{"pos":[133458,133651],"content":"This method generates an assertion failure in Debug builds if the specified <ph id=\"ph1\">`CMFCToolBarImages`</ph> object is not valid or has an image size that differs from the default image size of the toolbar.","source":"This method generates an assertion failure in Debug builds if the specified `CMFCToolBarImages` object is not valid or has an image size that differs from the default image size of the toolbar."},{"content":"The OutlookDemo, ToolTipDemo, and VisualStudioDemo samples use this method to set the global collection of user-defined images.","pos":[133658,133785]},{"content":"They load the file that is named UserImages.bmp, which is located in the working directory of the application.","pos":[133786,133896]},{"pos":[133903,134046],"content":"Call the <bpt id=\"p1\">[</bpt>CMFCToolBar::GetUserImages<ept id=\"p1\">](#cmfctoolbar__getuserimages)</ept> method to retrieve the collection of user-defined images in the application.","source":"Call the [CMFCToolBar::GetUserImages](#cmfctoolbar__getuserimages) method to retrieve the collection of user-defined images in the application."},{"pos":[134097,134121],"content":"CMFCToolBar::StretchPane"},{"content":"Stretches the toolbar vertically or horizontally, and repositions the buttons if necessary.","pos":[134125,134216]},{"content":"Parameters","pos":[134304,134314]},{"content":"[in]","pos":[134318,134322]},{"content":"The amount, in pixels, by which to stretch the pane.","pos":[134336,134388]},{"content":"[in]","pos":[134395,134399]},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, stretches the pane vertically.","pos":[134411,134452],"source":" If `TRUE`, stretches the pane vertically."},{"content":"If <ph id=\"ph1\">`FALSE`</ph>, stretches the pane horizontally.","pos":[134453,134497],"source":" If `FALSE`, stretches the pane horizontally."},{"content":"Return Value","pos":[134507,134519]},{"pos":[134523,134591],"content":"A <ph id=\"ph1\">`CSize`</ph> object that specifies the size of the toolbar client area.","source":"A `CSize` object that specifies the size of the toolbar client area."},{"content":"Remarks","pos":[134601,134608]},{"pos":[134612,134739],"content":"This method calls <bpt id=\"p1\">[</bpt>CMFCToolBar::WrapToolBar<ept id=\"p1\">](#cmfctoolbar__wraptoolbar)</ept> to reposition the buttons within the stretched toolbar.","source":"This method calls [CMFCToolBar::WrapToolBar](#cmfctoolbar__wraptoolbar) to reposition the buttons within the stretched toolbar."},{"pos":[134746,134836],"content":"The return value is determined by calling <bpt id=\"p1\">[</bpt>CMFCToolBar::CalcSize<ept id=\"p1\">](#cmfctoolbar__calcsize)</ept>.","source":"The return value is determined by calling [CMFCToolBar::CalcSize](#cmfctoolbar__calcsize)."},{"pos":[134889,134915],"content":"CMFCToolBar::TranslateChar"},{"content":"Executes a button command if the specified key code corresponds to a valid keyboard shortcut.","pos":[134919,135012]},{"content":"Parameters","pos":[135077,135087]},{"content":"[in]","pos":[135091,135095]},{"content":"Specifies a virtual key code.","pos":[135107,135136]},{"content":"For a list of standard virtual key codes, see Winuser.h","pos":[135137,135192]},{"content":"Return Value","pos":[135202,135214]},{"pos":[135226,135493],"content":"if the specified key code is either unprintable or does not correspond to a valid keyboard shortcut; <ph id=\"ph1\">`TRUE`</ph> if the specified key code corresponds to a drop-down menu option; otherwise, the return value from <bpt id=\"p1\">[</bpt>CMFCToolBar::ProcessCommand<ept id=\"p1\">](#cmfctoolbar__processcommand)</ept>.","source":" if the specified key code is either unprintable or does not correspond to a valid keyboard shortcut; `TRUE` if the specified key code corresponds to a drop-down menu option; otherwise, the return value from [CMFCToolBar::ProcessCommand](#cmfctoolbar__processcommand)."},{"content":"Remarks","pos":[135503,135510]},{"content":"The framework calls this method when a key is pressed together with the Alt key.","pos":[135514,135594]},{"pos":[135646,135671],"content":"CMFCToolBar::UpdateButton"},{"content":"Updates the state of the specified button.","pos":[135675,135717]},{"content":"Parameters","pos":[135773,135783]},{"content":"[in]","pos":[135787,135791]},{"content":"Specifies the zero-based index of the button to update.","pos":[135804,135859]},{"content":"Remarks","pos":[135869,135876]},{"pos":[135927,135951],"content":"CMFCToolBar::WrapToolBar"},{"content":"Repositions toolbar buttons within the given dimensions.","pos":[135955,136011]},{"content":"Parameters","pos":[136176,136186]},{"content":"[in]","pos":[136190,136194]},{"content":"Maximum width of the toolbar.","pos":[136207,136236]},{"content":"[in]","pos":[136243,136247]},{"content":"Maximum height of the toolbar.","pos":[136261,136291]},{"content":"Not used if the toolbar is floating.","pos":[136292,136328]},{"content":"[in]","pos":[136335,136339]},{"content":"Pointer to a device context.","pos":[136349,136377]},{"content":"If NULL, the device context for the toolbar is used.","pos":[136378,136430]},{"content":"[in]","pos":[136437,136441]},{"content":"Button width.","pos":[136460,136473]},{"content":"If -1, the current width is used.","pos":[136474,136507]},{"content":"[in] m","pos":[136514,136520]},{"content":"Button height.","pos":[136537,136551]},{"content":"If -1, the current height is used.","pos":[136552,136586]},{"content":"Return Value","pos":[136596,136608]},{"content":"The number of rows of buttons on the toolbar.","pos":[136612,136657]},{"content":"Remarks","pos":[136667,136674]},{"content":"This method repositions buttons within the toolbar, wrapping buttons to additional rows if necessary.","pos":[136678,136779]},{"pos":[136837,136868],"content":"CMFCToolBar::m_bDontScaleImages"},{"content":"Specifies whether or not to scale toolbar images in high DPI mode.","pos":[136872,136938]},{"content":"Remarks","pos":[137013,137020]},{"content":"See Also","pos":[137029,137037]},{"content":"Hierarchy Chart","pos":[137042,137057]},{"content":"Classes","pos":[137094,137101]},{"content":"CMFCMenuBar Class","pos":[137144,137161]},{"content":"CMFCPopupMenuBar Class","pos":[137210,137232]},{"content":"CMFCDropDownToolBar Class","pos":[137286,137311]},{"content":"Walkthrough: Putting Controls On Toolbars","pos":[137368,137409]}],"content":"---\ntitle: \"CMFCToolBar Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMFCToolBar\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CMFCToolBar class\"\nms.assetid: e7679c01-fb94-44c0-98c6-3af955292fb5\ncaps.latest.revision: 48\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMFCToolBar Class\nThe `CMFCToolBar` class resembles [CToolBar Class](../../mfc/reference/ctoolbar-class.md), but provides additional support for user interface features. These include flat toolbars, toolbars with hot images, large icons, pager buttons, locked toolbars, rebar controls, text under images, background images, and tabbed toolbars. The `CMFCToolBar` class also contains built-in support for user customization of toolbars and menus, drag-and-drop between toolbars and menus, combo box buttons, edit box buttons, color pickers, and roll-up buttons.  \n  \n## Syntax  \n  \n```  \nclass CMFCToolBar : public CMFCBaseToolBar  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`CMFCToolBar::CMFCToolBar`|Default constructor.|  \n|`CMFCToolBar::~CMFCToolBar`|Destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCToolBar::AddBasicCommand](#cmfctoolbar__addbasiccommand)|Adds a menu command to the list of commands that are always displayed when a user opens a menu.|  \n|[CMFCToolBar::AddCommandUsage](#cmfctoolbar__addcommandusage)|Increments by one the counter that is associated with the given command.|  \n|[CMFCToolBar::AddToolBarForImageCollection](#cmfctoolbar__addtoolbarforimagecollection)|Adds images from the user interface resources to the collection of images in the application.|  \n|[CMFCToolBar::AdjustLayout](#cmfctoolbar__adjustlayout)|Recalculates the size and position of a toolbar. (Overrides [CBasePane::AdjustLayout](../../mfc/reference/cbasepane-class.md#cbasepane__adjustlayout)).|  \n|[CMFCToolBar::AdjustSize](#cmfctoolbar__adjustsize)|Recalculates the size of the toolbar.|  \n|[CMFCToolBar::AllowChangeTextLabels](#cmfctoolbar__allowchangetextlabels)|Specifies whether text labels can be shown under images on the toolbar buttons.|  \n|[CMFCToolBar::AreTextLabels](#cmfctoolbar__aretextlabels)|Specifies whether text labels under images are currently displayed on the toolbar buttons.|  \n|[CMFCToolBar::AutoGrayInactiveImages](#cmfctoolbar__autograyinactiveimages)|Enable or disables the automatic generation of inactive button images.|  \n|[CMFCToolBar::ButtonToIndex](#cmfctoolbar__buttontoindex)|Returns the index of a specified [CMFCToolBarButton Class](../../mfc/reference/cmfctoolbarbutton-class.md) object in this toolbar.|  \n|[CMFCToolBar::CalcFixedLayout](#cmfctoolbar__calcfixedlayout)|Calculates the horizontal size of the toolbar. (Overrides [CBasePane::CalcFixedLayout](../../mfc/reference/cbasepane-class.md#cbasepane__calcfixedlayout).)|  \n|[CMFCToolBar::CalcSize](#cmfctoolbar__calcsize)|Called by the framework as part of the layout calculation process. (Overrides [CPane::CalcSize](../../mfc/reference/cpane-class.md#cpane__calcsize).)|  \n|[CMFCToolBar::CanHandleSiblings](#cmfctoolbar__canhandlesiblings)|Determines whether the toolbar and its sibling are positioned on the same pane.|  \n|[CMFCToolBar::CleanUpImages](#cmfctoolbar__cleanupimages)|Frees the system resources allocated for toolbar images.|  \n|[CMFCToolBar::CleanUpLockedImages](#cmfctoolbar__cleanuplockedimages)|Frees the system resources allocated for locked toolbar images.|  \n|[CMFCToolBar::CanBeClosed](#cmfctoolbar__canbeclosed)|Specifies whether a user can close the toolbar. (Overrides [CBasePane::CanBeClosed](../../mfc/reference/cbasepane-class.md#cbasepane__canbeclosed).)|  \n|[CMFCToolBar::CanBeRestored](#cmfctoolbar__canberestored)|Determines whether the system can restore a toolbar to its original state after customization.|  \n|[CMFCToolBar::CanFocus](#cmfctoolbar__canfocus)|Specifies whether the pane can receive focus. (Overrides [CBasePane::CanFocus](../../mfc/reference/cbasepane-class.md#cbasepane__canfocus).)|  \n|[CMFCToolBar::CanHandleSiblings](#cmfctoolbar__canhandlesiblings)|Determines whether the toolbar and its sibling are positioned on the same pane.|  \n|[CMFCToolBar::CommandToIndex](#cmfctoolbar__commandtoindex)|Returns the index of the button in the toolbar with a specified command ID.|  \n|[CMFCToolBar::Create](#cmfctoolbar__create)|Creates a `CMFCToolBar` object.|  \n|[CMFCToolBar::CreateEx](#cmfctoolbar__createex)|Creates a `CMFCToolBar` object that uses additional style options, such as large icons.|  \n|[CMFCToolBar::Deactivate](#cmfctoolbar__deactivate)|Deactivates the toolbar.|  \n|[CMFCToolBar::EnableCustomizeButton](#cmfctoolbar__enablecustomizebutton)|Enables or disables the **Add or Remove Buttons** button that appears on the end of the toolbar.|  \n|[CMFCToolBar::EnableDocking](#cmfctoolbar__enabledocking)|Enables docking of the pane to the main frame. (Overrides [CBasePane::EnableDocking](../../mfc/reference/cbasepane-class.md#cbasepane__enabledocking).)|  \n|[CMFCToolBar::EnableLargeIcons](#cmfctoolbar__enablelargeicons)|Enables or disables large icons on toolbar buttons.|  \n|[CMFCToolBar::EnableQuickCustomization](#cmfctoolbar__enablequickcustomization)|Enables or disables the quick customization of toolbars so that the user can press the **Alt** key and drag a button to a new location.|  \n|[CMFCToolBar::EnableReflections](#cmfctoolbar__enablereflections)|Enables or disables command reflection.|  \n|[CMFCToolBar::EnableTextLabels](#cmfctoolbar__enabletextlabels)|Enables or disables text labels under toolbar button images.|  \n|[CMFCToolBar::FromHandlePermanent](#cmfctoolbar__fromhandlepermanent)|Retrieves a pointer to the `CMFCToolBar` object that contains the given window handle.|  \n|[CMFCToolBar::GetAllButtons](#cmfctoolbar__getallbuttons)|Returns a read-only list of buttons in a toolbar.|  \n|[CMFCToolBar::GetAllToolbars](#cmfctoolbar__getalltoolbars)|Returns a read-only list of all toolbars in the application.|  \n|[CMFCToolBar::GetBasicCommands](#cmfctoolbar__getbasiccommands)|Returns a read-only list of the basic commands defined in the application.|  \n|[CMFCToolBar::GetButton](#cmfctoolbar__getbutton)|Returns a pointer to the `CMFCToolBarButton` object that has a specified toolbar button index.|  \n|[CMFCToolBar::GetButtonInfo](#cmfctoolbar__getbuttoninfo)|Returns the command ID, style, and image index of the button at a specified index.|  \n|[CMFCToolBar::GetButtonSize](#cmfctoolbar__getbuttonsize)|Returns the dimensions of each button on the toolbar.|  \n|[CMFCToolBar::GetButtonStyle](#cmfctoolbar__getbuttonstyle)|Returns the current style of the toolbar button that is located at the specified index.|  \n|[CMFCToolBar::GetButtonText](#cmfctoolbar__getbuttontext)|Returns the text label of a button that has a specified index.|  \n|[CMFCToolBar::GetColdImages](#cmfctoolbar__getcoldimages)|Returns a pointer to the collection of cold toolbar button images in the application.|  \n|[CMFCToolBar::GetColumnWidth](#cmfctoolbar__getcolumnwidth)|Returns the width of the toolbar buttons.|  \n|[CMFCToolBar::GetCommandButtons](#cmfctoolbar__getcommandbuttons)|Returns a list of buttons that have a specified command ID from all toolbars in the application.|  \n|[CMFCToolBar::GetCount](#cmfctoolbar__getcount)|Returns the number of buttons and separators on the toolbar.|  \n|[CMFCToolBar::GetCustomizeButton](#cmfctoolbar__getcustomizebutton)|Retrieves a pointer to the `CMFCCustomizeButton` object that is associated with the toolbar.|  \n|[CMFCToolBar::GetDefaultImage](#cmfctoolbar__getdefaultimage)|Returns the index of the default image for a toolbar button with a specified command ID.|  \n|[CMFCToolBar::GetDisabledImages](#cmfctoolbar__getdisabledimages)|Returns a pointer to the collection of images that are used for disabled toolbar buttons in the application.|  \n|[CMFCToolBar::GetDisabledMenuImages](#cmfctoolbar__getdisabledmenuimages)|Returns a pointer to the collection of images that are used for disabled menu buttons in the application.|  \n|[CMFCToolBar::GetDroppedDownMenu](#cmfctoolbar__getdroppeddownmenu)|Retrieves a pointer to the menu button object that is currently displaying its sub-menu.|  \n|[CMFCToolBar::GetGrayDisabledButtons](#cmfctoolbar__getgraydisabledbuttons)|Specifies whether the images of disabled buttons are dimmed versions of the regular button images, or taken from the collection of disabled button images.|  \n|[CMFCToolBar::GetHighlightedButton](#cmfctoolbar__gethighlightedbutton)|Returns a pointer to the toolbar button that is currently highlighted.|  \n|[CMFCToolBar::GetHotBorder](#cmfctoolbar__gethotborder)|Determines whether the toolbar buttons are hot-tracked.|  \n|[CMFCToolBar::GetHotTextColor](#cmfctoolbar__gethottextcolor)|Returns the text color of the highlighted toolbar buttons.|  \n|[CMFCToolBar::GetHwndLastFocus](#cmfctoolbar__gethwndlastfocus)|Returns a handle to the window that had the input focus just before the toolbar did.|  \n|[CMFCToolBar::GetIgnoreSetText](#cmfctoolbar__getignoresettext)|Specifies whether calls to set button labels are ignored.|  \n|[CMFCToolBar::GetImageSize](#cmfctoolbar__getimagesize)|Returns the current size of toolbar button images.|  \n|[CMFCToolBar::GetImages](#cmfctoolbar__getimages)|Returns a pointer to the collection of default button images in the application.|  \n|[CMFCToolBar::GetImagesOffset](#cmfctoolbar__getimagesoffset)|Returns the index offset used to find the toolbar button images for this toolbar in the global list of toolbar button images.|  \n|[CMFCToolBar::GetInvalidateItemRect](#cmfctoolbar__getinvalidateitemrect)|Retrieves the region of the client area that must be redrawn for the button at the given index.|  \n|[CMFCToolBar::GetItemID](#cmfctoolbar__getitemid)|Returns the command ID of the toolbar button at a specified index.|  \n|[CMFCToolBar::GetItemRect](#cmfctoolbar__getitemrect)|Returns the bounding rectangle of the button at a specified index.|  \n|[CMFCToolBar::GetLargeColdImages](#cmfctoolbar__getlargecoldimages)|Returns a pointer to the collection of large cold toolbar button images in the application.|  \n|[CMFCToolBar::GetLargeDisabledImages](#cmfctoolbar__getlargedisabledimages)|Returns a pointer to the collection of large disabled toolbar button images in the application.|  \n|[CMFCToolBar::GetLargeImages](#cmfctoolbar__getlargeimages)|Returns a pointer to the collection of large toolbar button images in the application.|  \n|[CMFCToolBar::GetLockedColdImages](#cmfctoolbar__getlockedcoldimages)|Returns a pointer to the collection of locked cold images in the toolbar.|  \n|[CMFCToolBar::GetLockedDisabledImages](#cmfctoolbar__getlockeddisabledimages)|Returns a pointer to the collection of locked disabled images in the toolbar.|  \n|[CMFCToolBar::GetLockedImages](#cmfctoolbar__getlockedimages)|Returns a pointer to the collection of locked button images in the toolbar.|  \n|[CMFCToolBar::GetLockedImageSize](#cmfctoolbar__getlockedimagesize)|Returns the default size of locked toolbar images.|  \n|[CMFCToolBar::GetLockedMenuImages](#cmfctoolbar__getlockedmenuimages)|Returns a pointer to the collection of locked toolbar menu images in the toolbar.|  \n|[CMFCToolBar::GetMenuButtonSize](#cmfctoolbar__getmenubuttonsize)|Returns the size of menu buttons in the application.|  \n|[CMFCToolBar::GetMenuImageSize](#cmfctoolbar__getmenuimagesize)|Returns the size of menu button images in the application.|  \n|[CMFCToolBar::GetMenuImages](#cmfctoolbar__getmenuimages)|Returns a pointer to the collection of menu button images in the application.|  \n|[CMFCToolBar::GetOrigButtons](#cmfctoolbar__getorigbuttons)|Retrieves the collection of non-customized buttons of the toolbar.|  \n|[CMFCToolBar::GetOrigResetButtons](#cmfctoolbar__getorigresetbuttons)|Retrieves the collection of non-customized reset buttons of the toolbar.|  \n|[CMFCToolBar::GetResourceID](#cmfctoolbar__getresourceid)|Retrieves the resource ID of the toolbar.|  \n|[CMFCToolBar::GetRouteCommandsViaFrame](#cmfctoolbar__getroutecommandsviaframe)|Determines which object, the parent frame or the owner, sends commands to the toolbar.|  \n|[CMFCToolBar::GetRowHeight](#cmfctoolbar__getrowheight)|Returns the height of toolbar buttons.|  \n|[CMFCToolBar::GetShowTooltips](#cmfctoolbar__getshowtooltips)|Specifies whether tool tips are displayed for toolbar buttons.|  \n|[CMFCToolBar::GetSiblingToolBar](#cmfctoolbar__getsiblingtoolbar)|Retrieves the sibling of the toolbar.|  \n|[CMFCToolBar::GetUserImages](#cmfctoolbar__getuserimages)|Returns a pointer to the collection of user-defined toolbar button images in the application.|  \n|[CMFCToolBar::HitTest](#cmfctoolbar__hittest)|Returns the index of the toolbar button that is located at the specified position.|  \n|[CMFCToolBar::InsertButton](#cmfctoolbar__insertbutton)|Inserts a button into the toolbar.|  \n|[CMFCToolBar::InsertSeparator](#cmfctoolbar__insertseparator)|Inserts a separator into the toolbar.|  \n|[CMFCToolBar::InvalidateButton](#cmfctoolbar__invalidatebutton)|Invalidates the client area of the toolbar button that exists at the provided index.|  \n|[CMFCToolBar::IsAddRemoveQuickCustomize](#cmfctoolbar__isaddremovequickcustomize)|Determines whether a user can add or remove toolbar buttons by using the **Customize** menu option.|  \n|[CMFCToolBar::IsAltCustomizeMode](#cmfctoolbar__isaltcustomizemode)|Specifies whether *quick customization* is being used to drag a button.|  \n|[CMFCToolBar::IsAutoGrayInactiveImages](#cmfctoolbar__isautograyinactiveimages)|Specifies whether the automatic generation of inactive (non-highlighted) button images is enabled.|  \n|[CMFCToolBar::IsBasicCommand](#cmfctoolbar__isbasiccommand)|Determines whether a command is on the list of basic commands.|  \n|[CMFCToolBar::IsButtonExtraSizeAvailable](#cmfctoolbar__isbuttonextrasizeavailable)|Determines whether the toolbar can display buttons that have extended borders.|  \n|[CMFCToolBar::IsButtonHighlighted](#cmfctoolbar__isbuttonhighlighted)|Determines whether a button on the toolbar is highlighted.|  \n|[CMFCToolBar::IsCommandPermitted](#cmfctoolbar__iscommandpermitted)|Determines whether a command is permitted.|  \n|[CMFCToolBar::IsCommandRarelyUsed](#cmfctoolbar__iscommandrarelyused)|Determines whether a command is rarely used (see [CMFCToolBar::SetCommandUsageOptions](#cmfctoolbar__setcommandusageoptions)).|  \n|[CMFCToolBar::IsCustomizeMode](#cmfctoolbar__iscustomizemode)|Specifies whether the toolbar framework is in customization mode.|  \n|[CMFCToolBar::IsDragButton](#cmfctoolbar__isdragbutton)|Determines whether a toolbar button is being dragged.|  \n|[CMFCToolBar::IsExistCustomizeButton](#cmfctoolbar__isexistcustomizebutton)|Determines whether the toolbar contains the **Customize** button.|  \n|[CMFCToolBar::IsFloating](#cmfctoolbar__isfloating)|Determines whether the toolbar is floating.|  \n|[CMFCToolBar::IsLargeIcons](#cmfctoolbar__islargeicons)|Specifies whether toolbars in the application currently display large icons.|  \n|[CMFCToolBar::IsLastCommandFromButton](#cmfctoolbar__islastcommandfrombutton)|Determines whether the most recently executed command was sent from the specified toolbar button.|  \n|[CMFCToolBar::IsLocked](#cmfctoolbar__islocked)|Determines whether the toolbar is locked.|  \n|[CMFCToolBar::IsOneRowWithSibling](#cmfctoolbar__isonerowwithsibling)|Determines whether the toolbar and its sibling toolbar are positioned on the same row.|  \n|[CMFCToolBar::IsUserDefined](#cmfctoolbar__isuserdefined)|Specifies whether the toolbar is user-defined.|  \n|[CMFCToolBar::LoadBitmap](#cmfctoolbar__loadbitmap)|Loads toolbar images from application resources.|  \n|[CMFCToolBar::LoadBitmapEx](#cmfctoolbar__loadbitmapex)|Loads toolbar images from application resources. Includes large images.|  \n|[CMFCToolBar::LoadParameters](#cmfctoolbar__loadparameters)|Loads global toolbar options from the Windows registry.|  \n|[CMFCToolBar::LoadState](#cmfctoolbar__loadstate)|Loads the toolbar state information from the Windows registry. (Overrides [CPane::LoadState](../../mfc/reference/cpane-class.md#cpane__loadstate).)|  \n|[CMFCToolBar::LoadToolBar](#cmfctoolbar__loadtoolbar)|Loads the toolbar from application resources.|  \n|[CMFCToolBar::LoadToolBarEx](#cmfctoolbar__loadtoolbarex)|Loads the toolbar from application resources by using the `CMFCToolBarInfo` helper class to enable the application to use large images.|  \n|[CMFCToolBar::OnChangeHot](#cmfctoolbar__onchangehot)|Called by the framework when a user selects a button on the toolbar.|  \n|[CMFCToolBar::OnFillBackground](#cmfctoolbar__onfillbackground)|Called by the framework from [CBasePane::DoPaint](../../mfc/reference/cbasepane-class.md#cbasepane__dopaint) to fill the toolbar background.|  \n|[CMFCToolBar::OnReset](#cmfctoolbar__onreset)|Restores the toolbar to its original state.|  \n|[CMFCToolBar::OnSetAccData](#cmfctoolbar__onsetaccdata)|(Overrides [CBasePane::OnSetAccData](../../mfc/reference/cbasepane-class.md#cbasepane__onsetaccdata).)|  \n|[CMFCToolBar::OnSetDefaultButtonText](#cmfctoolbar__onsetdefaultbuttontext)|Restores the text of a toolbar button to its default state.|  \n|`CMFCToolBar::OnUpdateCmdUI`|Used internally.|  \n|[CMFCToolBar::RemoveAllButtons](#cmfctoolbar__removeallbuttons)|Removes all buttons from the toolbar.|  \n|[CMFCToolBar::RemoveButton](#cmfctoolbar__removebutton)|Removes the button with the specified index from the toolbar.|  \n|[CMFCToolBar::RemoveStateFromRegistry](#cmfctoolbar__removestatefromregistry)|Deletes the state information for the toolbar from the Windows registry.|  \n|[CMFCToolBar::ReplaceButton](#cmfctoolbar__replacebutton)|Replaces a toolbar button with another toolbar button.|  \n|[CMFCToolBar::ResetAll](#cmfctoolbar__resetall)|Restores all toolbars to their original states.|  \n|[CMFCToolBar::ResetAllImages](#cmfctoolbar__resetallimages)|Clears all toolbar image collections in the application.|  \n|[CMFCToolBar::RestoreOriginalState](#cmfctoolbar__restoreoriginalstate)|Restores the original state of a toolbar.|  \n|[CMFCToolBar::SaveState](#cmfctoolbar__savestate)|Saves the state information for the toolbar in the Windows registry. (Overrides [CPane::SaveState](../../mfc/reference/cpane-class.md#cpane__savestate).)|  \n|`CMFCToolBar::Serialize`|(Overrides `CBasePane::Serialize`.)|  \n|[CMFCToolBar::SetBasicCommands](#cmfctoolbar__setbasiccommands)|Sets the list of commands that are always displayed when a user opens a menu.|  \n|[CMFCToolBar::SetButtonInfo](#cmfctoolbar__setbuttoninfo)|Sets the command ID, style, and image ID of a toolbar button.|  \n|[CMFCToolBar::SetButtonStyle](#cmfctoolbar__setbuttonstyle)|Sets the style of the toolbar button at the given index.|  \n|[CMFCToolBar::SetButtonText](#cmfctoolbar__setbuttontext)|Sets the text label of a toolbar button.|  \n|[CMFCToolBar::SetButtons](#cmfctoolbar__setbuttons)|Sets the buttons for the toolbar.|  \n|[CMFCToolBar::SetCommandUsageOptions](#cmfctoolbar__setcommandusageoptions)|Specifies when rarely used commands do not appear in the menu of the application.|  \n|[CMFCToolBar::SetCustomizeMode](#cmfctoolbar__setcustomizemode)|Enables or disables customization mode for all toolbars in the application.|  \n|[CMFCToolBar::SetGrayDisabledButtons](#cmfctoolbar__setgraydisabledbuttons)|Specifies whether the disabled buttons on the toolbar are dimmed or if disabled images are used for the disabled buttons.|  \n|[CMFCToolBar::SetHeight](#cmfctoolbar__setheight)|Sets the height of the toolbar.|  \n|[CMFCToolBar::SetHotBorder](#cmfctoolbar__sethotborder)|Specifies whether toolbar buttons are hot-tracked.|  \n|[CMFCToolBar::SetHotTextColor](#cmfctoolbar__sethottextcolor)|Sets the text color for hot toolbar buttons.|  \n|[CMFCToolBar::SetLargeIcons](#cmfctoolbar__setlargeicons)|Specifies whether toolbar buttons display large icons.|  \n|[CMFCToolBar::SetLockedSizes](#cmfctoolbar__setlockedsizes)|Sets the sizes of locked buttons and locked images on the toolbar.|  \n|[CMFCToolBar::SetMenuSizes](#cmfctoolbar__setmenusizes)|Sets the size of toolbar menu buttons and their images.|  \n|[CMFCToolBar::SetNonPermittedCommands](#cmfctoolbar__setnonpermittedcommands)|Sets the list of commands that cannot be executed by the user.|  \n|[CMFCToolBar::SetOneRowWithSibling](#cmfctoolbar__setonerowwithsibling)|Positions the toolbar and its sibling on the same row.|  \n|[CMFCToolBar::SetPermament](#cmfctoolbar__setpermament)|Specifies whether a user can close the toolbar.|  \n|[CMFCToolBar::SetRouteCommandsViaFrame](#cmfctoolbar__setroutecommandsviaframe)|Specifies whether the parent frame or the owner sends commands to the toolbar.|  \n|[CMFCToolBar::SetShowTooltips](#cmfctoolbar__setshowtooltips)|Specifies whether the framework displays tool tips.|  \n|[CMFCToolBar::SetSiblingToolBar](#cmfctoolbar__setsiblingtoolbar)|Specifies the sibling of the toolbar.|  \n|[CMFCToolBar::SetSizes](#cmfctoolbar__setsizes)|Specifies the sizes of buttons and images on all toolbars.|  \n|[CMFCToolBar::SetToolBarBtnText](#cmfctoolbar__settoolbarbtntext)|Specifies properties of a button on the toolbar.|  \n|[CMFCToolBar::SetTwoRowsWithSibling](#cmfctoolbar__settworowswithsibling)|Positions the toolbar and its sibling on separate rows.|  \n|[CMFCToolBar::SetUserImages](#cmfctoolbar__setuserimages)|Sets the collection of user-defined images in the application.|  \n|[CMFCToolBar::StretchPane](#cmfctoolbar__stretchpane)|Stretches the toolbar vertically or horizontally. (Overrides [CBasePane::StretchPane](../../mfc/reference/cbasepane-class.md#cbasepane__stretchpane).)|  \n|[CMFCToolBar::TranslateChar](#cmfctoolbar__translatechar)|Executes a button command if the specified key code corresponds to a valid keyboard shortcut.|  \n|[CMFCToolBar::UpdateButton](#cmfctoolbar__updatebutton)|Updates the state of the specified button.|  \n|[CMFCToolBar::WrapToolBar](#cmfctoolbar__wraptoolbar)|Repositions toolbar buttons within the given dimensions.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCToolBar::AllowShowOnList](#cmfctoolbar__allowshowonlist)|Determines whether the toolbar is displayed in the list on the **Toolbars** pane of the **Customize** dialog box.|  \n|[CMFCToolBar::CalcMaxButtonHeight](#cmfctoolbar__calcmaxbuttonheight)|Calculates the maximum height of a button in the toolbar.|  \n|[CMFCToolBar::DoPaint](#cmfctoolbar__dopaint)|Repaints a toolbar.|  \n|[CMFCToolBar::DrawButton](#cmfctoolbar__drawbutton)|Repaints a toolbar button.|  \n|[CMFCToolBar::DrawSeparator](#cmfctoolbar__drawseparator)|Repaints a separator on a toolbar.|  \n|[CMFCToolBar::OnUserToolTip](#cmfctoolbar__onusertooltip)|Called by the framework when the tooltip for a button is about to be displayed.|  \n  \n### Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCToolBar::m_bDontScaleImages](#cmfctoolbar__m_bdontscaleimages)|Specifies whether to scale or not toolbar images in high DPI mode.|  \n|[CMFCToolBar::m_dblLargeImageRatio](#cmfctoolbar__m_dbllargeimageratio)|Specifies the ratio between the dimension (height or width) of large images and the dimension of regular images.|  \n  \n## Remarks  \n To incorporate a `CMFCToolBar` object into your application, follow these steps:  \n  \n1.  Add a `CMFCToolBar` object to the main frame window.  \n  \n2.  When you process the `WM_CREATE` message for the main frame window, call either [CMFCToolBar::Create](#cmfctoolbar__create) or [CMFCToolBar::CreateEx](#cmfctoolbar__createex) to create the toolbar and specify its style.  \n  \n3.  Call [CBasePane::EnableDocking](../../mfc/reference/cbasepane-class.md#cbasepane__enabledocking) to specify the docking style.  \n  \n To insert a special button, such as a combo box or drop-down toolbar, reserve a dummy button in the parent resource, and replace the dummy button at runtime by using [CMFCToolBar::ReplaceButton](#cmfctoolbar__replacebutton). For more information, see [Walkthrough: Putting Controls On Toolbars](../walkthrough-putting-controls-on-toolbars.md).  \n  \n `CMFCToolBar` is the base class for the MFC Library classes [CMFCMenuBar Class](../../mfc/reference/cmfcmenubar-class.md), [CMFCPopupMenuBar Class](../../mfc/reference/cmfcpopupmenubar-class.md), and [CMFCDropDownToolBar Class](../../mfc/reference/cmfcdropdowntoolbar-class.md).  \n  \n## Example  \n The following example demonstrates how to use various methods in the `CMFCToolBar` class. The example shows how to set the text of the window label of the tool bar, set the borders, set the style of the pane, and enable the **Add or Remove Buttons** button that appears on the end of the toolbar. This code snippet is part of the [IE Demo sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_IEDemo#6](../../mfc/reference/codesnippet/cpp/cmfctoolbar-class_1.h)]  \n[!code-cpp[NVC_MFC_IEDemo#8](../../mfc/reference/codesnippet/cpp/cmfctoolbar-class_2.cpp)]  \n  \n## Requirements  \n **Header:** afxtoolbar.h  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n [CBasePane](../../mfc/reference/cbasepane-class.md)  \n  \n [CPane](../../mfc/reference/cpane-class.md)  \n  \n [CMFCBaseToolBar](../../mfc/reference/cmfcbasetoolbar-class.md)  \n  \n [CMFCToolBar](../../mfc/reference/cmfctoolbar-class.md)  \n  \n##  <a name=\"cmfctoolbar__addbasiccommand\"></a>  CMFCToolBar::AddBasicCommand  \n Adds a menu command to the list of commands that are always displayed when a user opens a menu.  \n  \n```  \nstatic void __stdcall AddBasicCommand(UINT uiCmd);\n```  \n  \n### Parameters  \n [in] `uiCmd`  \n Specifies the command to add.  \n  \n### Remarks  \n A basic command is always displayed when the menu is opened. This method is meaningful when the user chooses to view recently used commands.  \n  \n Use the [CMFCToolBar::SetBasicCommands](#cmfctoolbar__setbasiccommands) method to set the list of commands that are always displayed when a user opens a menu. Use the [CMFCToolBar::GetBasicCommands](#cmfctoolbar__getbasiccommands) method to retrieve the list of basic commands that is used by your application.  \n  \n##  <a name=\"cmfctoolbar__addcommandusage\"></a>  CMFCToolBar::AddCommandUsage  \n Increments by one the counter that is associated with the given command.  \n  \n```  \nstatic void __stdcall AddCommandUsage(UINT uiCommand);\n```  \n  \n### Parameters  \n [in] `uiCommand`  \n Specifies the command counter to increment.  \n  \n### Remarks  \n The framework calls this method when the user selects a menu item.  \n  \n The framework uses command counters to display recently used menu items.  \n  \n This method increments the command counter by using the [CMFCCmdUsageCount::AddCmd](../../mfc/reference/cmfccmdusagecount-class.md#cmfccmdusagecount__addcmd) method.  \n  \n##  <a name=\"cmfctoolbar__addtoolbarforimagecollection\"></a>  CMFCToolBar::AddToolBarForImageCollection  \n Adds images from the user interface resources to the collection of images in the application.  \n  \n```  \nstatic BOOL __stdcall AddToolBarForImageCollection(\n    UINT uiResID,  \n    UINT uiBmpResID=0,  \n    UINT uiColdResID=0,  \n    UINT uiMenuResID=0,  \n    UINT uiDisabledResID=0,  \n    UINT uiMenuDisabledResID=0);\n```  \n  \n### Parameters  \n [in] `uiResID`  \n Resource ID of a toolbar with images to load.  \n  \n [in] `uiBmpResID`  \n Resource ID of a bitmap with toolbar images.  \n  \n [in] `uiColdResID`  \n Resource ID of a bitmap with \"cold\" toolbar images.  \n  \n [in] `uiMenuResID`  \n Resource ID of a bitmap with menu images.  \n  \n [in] `uiDisabledResID`  \n Resource ID of a bitmap with disabled toolbar images.  \n  \n [in] `uiMenuDisabledResID`  \n Resource ID of a bitmap with disabled menu images.  \n  \n### Return Value  \n `TRUE` if the method succeeds; `FALSE` if `uiResID` or `uiBmpResID` do not specify valid resources, or another error occurs.  \n  \n### Remarks  \n Call this method to load a bitmap with toolbar images and add it to the collection of toolbar images. This method creates a temporary toolbar object and calls [CMFCToolBar::LoadToolBar](#cmfctoolbar__loadtoolbar).  \n  \n##  <a name=\"cmfctoolbar__adjustlayout\"></a>  CMFCToolBar::AdjustLayout  \n Recalculates the size and position of a toolbar.  \n  \n```  \nvirtual void AdjustLayout();\n```  \n  \n### Remarks  \n Call this method when the toolbar has been created to recalculate its size and position.  \n  \n The framework calls this method every time that the layout of the toolbar must be changed. For example, the layout must change when the user moves another control bar, resizes an application window, or customizes the toolbar.  \n  \n Override this method to provide your own dynamic layout in classes that you derive from [CMFCToolar](../../mfc/reference/cmfctoolbar-class.md).  \n  \n##  <a name=\"cmfctoolbar__adjustsize\"></a>  CMFCToolBar::AdjustSize  \n Recalculates the size of the toolbar.  \n  \n```  \nvoid AdjustSize();\n```  \n  \n### Remarks  \n This method makes sure that the toolbar fits in the bounds of the parent frame. This method does nothing if the toolbar has no parent frame.  \n  \n The [CMFCToolBar::AdjustLayout](#cmfctoolbar__adjustlayout) method calls this method to recalculate the size if the parent of the toolbar is not a `CMFCReBar` object.  \n  \n##  <a name=\"cmfctoolbar__allowchangetextlabels\"></a>  CMFCToolBar::AllowChangeTextLabels  \n Specifies whether text labels can be shown under images on the toolbar buttons.  \n  \n```  \nvirtual BOOL AllowChangeTextLabels() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if it is allowed to display text labels below images; otherwise `FALSE`.  \n  \n### Remarks  \n This method is called by the customization dialog box to determine whether to enable a **Show text labels** check-box on the **Toolbars** page for the selected toolbar.  \n  \n The default implementation returns `TRUE`.  \n  \n Override this method in an object derived from [CMFCToolBar](../../mfc/reference/cmfctoolbar-class.md) and return `FALSE` when you do not want the user to decide whether text labels are displayed on toolbar buttons under the images.  \n  \n##  <a name=\"cmfctoolbar__allowshowonlist\"></a>  CMFCToolBar::AllowShowOnList  \n Determines whether the toolbar is displayed in the list of toolbars on the **Toolbars** pane of the **Customize** dialog box.  \n  \n```  \nvirtual BOOL AllowShowOnList() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the toolbar object can be displayed in the list box on the toolbar customization page; otherwise `FALSE`.  \n  \n### Remarks  \n This method is called by the framework to determine whether the list on the toolbar customization page should include a particular object derived from [CMFCToolBar](../../mfc/reference/cmfctoolbar-class.md).  \n  \n The default implementation always returns `TRUE`. Override this method when you do not want a toolbar to appear in the toolbars list in the customization dialog box.  \n  \n##  <a name=\"cmfctoolbar__aretextlabels\"></a>  CMFCToolBar::AreTextLabels  \n Specifies whether text labels under images are currently displayed on the toolbar buttons.  \n  \n```  \nBOOL AreTextLabels() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the toolbar buttons display text labels below images; otherwise `FALSE`.  \n  \n### Remarks  \n Use [CMFCToolBar::EnableTextLabels](#cmfctoolbar__enabletextlabels) to specify whether the text is displayed. The default value is `FALSE`. Call [CMFCToolBar::AllowChangeTextLabels](#cmfctoolbar__allowchangetextlabels) to specify whether the user can change this setting in the customization dialog box.  \n  \n##  <a name=\"cmfctoolbar__autograyinactiveimages\"></a>  CMFCToolBar::AutoGrayInactiveImages  \n Enable or disables the automatic generation of inactive button images.  \n  \n```  \nstatic void AutoGrayInactiveImages(\n    BOOL bEnable=TRUE,  \n    int nGrayImagePercentage=0,  \n    BOOL bRedrawAllToolbars=TRUE);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n A Boolean value that specifies whether to dim inactive images. If this parameter is `TRUE`, inactive images are dimmed. Otherwise, inactive images are not dimmed.  \n  \n [in] `nGrayImagePercentage`  \n Specifies the luminance percentage for inactive images. If `bEnable` is `FALSE`, this value is ignored.  \n  \n [in] `bRedrawAllToolbars`  \n A Boolean value that specifies whether to redraw all toolbars in the application. If this parameter is `TRUE`, this method redraws all toolbars.  \n  \n### Remarks  \n If `bEnable` is `TRUE`, the framework uses `nGrayImagePercentage` to generate inactive images from the regular images. Otherwise, you must provide the set of inactive images by using the [CMFCToolBar::GetColdImages](#cmfctoolbar__getcoldimages) method. By default, this option is disabled.  \n  \n For more information about the `nGrayImagePercentage` parameter, see [CMFCToolBarImages::GrayImages](../../mfc/reference/cmfctoolbarimages-class.md#cmfctoolbarimages__grayimages).  \n  \n##  <a name=\"cmfctoolbar__buttontoindex\"></a>  CMFCToolBar::ButtonToIndex  \n Returns the index of a specified [CMFCToolBarButton Class](../../mfc/reference/cmfctoolbarbutton-class.md) object in this toolbar.  \n  \n```  \nint ButtonToIndex(const CMFCToolBarButton* pButton) const;\n\n \n```  \n  \n### Parameters  \n [in] `pButton`  \n A pointer to the toolbar button object.  \n  \n### Return Value  \n Index of `pButton` in the internal list of toolbar buttons; or -1 if the specified button is not on this toolbar.  \n  \n##  <a name=\"cmfctoolbar__calcfixedlayout\"></a>  CMFCToolBar::CalcFixedLayout  \n Calculates the horizontal size of the toolbar.  \n  \n```  \nvirtual CSize CalcFixedLayout(\n    BOOL bStretch,  \n    BOOL bHorz);\n```  \n  \n### Parameters  \n [in] `bStretch`  \n `TRUE` to stretch the toolbar to the size of the parent frame.  \n  \n [in] `bHorz`  \n `TRUE` to orient the toolbar horizontally; `FALSE` to orient the toolbar vertically.  \n  \n### Return Value  \n A `CSize` object that specifies the size of the toolbar.  \n  \n### Remarks  \n This method calculates the size of the toolbar by using the `CMFCToolBar::CalcLayout` method. It passes the `LM_STRETCH` flag for the `dwMode` parameter if `bStretch` is `TRUE`. It passes the `LM_HORZ` flag if `bHorz` is `TRUE`.  \n  \n See the VisualStudioDemo sample for an example that uses this method.  \n  \n##  <a name=\"cmfctoolbar__calcmaxbuttonheight\"></a>  CMFCToolBar::CalcMaxButtonHeight  \n Calculates the maximum height of buttons in the toolbar.  \n  \n```  \nvirtual int CalcMaxButtonHeight();\n```  \n  \n### Return Value  \n The maximum height of buttons.  \n  \n### Remarks  \n This method calculates the maximum height among all toolbar buttons on the toolbar. The height may vary depending on factors such as the current toolbar docking state.  \n  \n Override this method in a class derived from [CMFCToolBar](../../mfc/reference/cmfctoolbar-class.md) to provide your own height calculation.  \n  \n##  <a name=\"cmfctoolbar__calcsize\"></a>  CMFCToolBar::CalcSize  \n Called by the framework as part of the layout calculation process.  \n  \n```  \nvirtual CSize CalcSize(BOOL bVertDock);\n```  \n  \n### Parameters  \n [in] `bVertDock`  \n `TRUE` to specify that the toolbar is docked vertically; `FALSE` to specify that the toolbar is docked horizontally.  \n  \n### Return Value  \n A `CSize` object that specifies the overall size of the buttons on the toolbar.  \n  \n### Remarks  \n This method considers the attributes that affect the size of each button, such as the area of the text label and the border size.  \n  \n If the toolbar contains no buttons, this method returns the reserved size of a single button by using the [CMFCToolBar::GetButtonSize](#cmfctoolbar__getbuttonsize) method.  \n  \n##  <a name=\"cmfctoolbar__canbeclosed\"></a>  CMFCToolBar::CanBeClosed  \n Specifies whether a user can close the toolbar.  \n  \n```  \nvirtual BOOL CanBeClosed() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the toolbar can be closed by the user; otherwise `FALSE`.  \n  \n### Remarks  \n The framework calls this method to determine whether the user can close a toolbar. If the method returns `TRUE`, the framework enables the SC_CLOSE command in the system menu of the toolbar and the user can close the toolbar by using a check box in the list of toolbars in the customization dialog box.  \n  \n The default implementation returns `TRUE`. Override this method in a class derived from [CMFCToolBar](../../mfc/reference/cmfctoolbar-class.md) to make toolbar objects that cannot be closed by the user.  \n  \n##  <a name=\"cmfctoolbar__canberestored\"></a>  CMFCToolBar::CanBeRestored  \n Determines whether the system can restore a toolbar to its original state after customization.  \n  \n```  \nvirtual BOOL CanBeRestored() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the toolbar can be restored from the application resources; otherwise `FALSE`.  \n  \n### Remarks  \n The framework calls this method to determine whether a toolbar can be returned to its original state after customization. The original state is loaded from the application resources.  \n  \n If `CanBeRestored` returns `TRUE`, the **Toolbars** page of the customization dialog box enables the **Reset** button for the selected toolbar.  \n  \n The default implementation returns `TRUE` if the original resource ID of the toolbar when it was loaded is non-zero. Usually, only user-defined toolbars cannot be restored.  \n  \n You can override the `CanBeRestored` method to customize this behavior in derived classes.  \n  \n##  <a name=\"cmfctoolbar__canfocus\"></a>  CMFCToolBar::CanFocus  \n Specifies whether the pane can receive focus.  \n  \n```  \nvirtual BOOL CanFocus() const;\n\n \n```  \n  \n### Return Value  \n This method returns `FALSE`.  \n  \n### Remarks  \n This method overrides the base class implementation, [CBasePane::CanFocus](../../mfc/reference/cbasepane-class.md#cbasepane__canfocus), because toolbar objects cannot receive focus.  \n  \n##  <a name=\"cmfctoolbar__canhandlesiblings\"></a>  CMFCToolBar::CanHandleSiblings  \n Determines whether the toolbar and its sibling are positioned on the same pane.  \n  \n```  \nBOOL CanHandleSiblings();\n```  \n  \n### Return Value  \n `TRUE` if the toolbar has a sibling and the toolbar and its sibling are positioned on the same pane; otherwise `FALSE`.  \n  \n### Remarks  \n The internal CMFCCustomizeButton::CreatePopupMenu method calls this method to determine how to show the **Customize** pop-up menu. If this method returns `TRUE`, the framework displays the **Show Buttons on One Row** or **Show Buttons on Two Rows** buttons.  \n  \n You typically do not have to use this method. To enable the **Customize** button that appears on the toolbar, call the [CMFCToolBar::EnableCustomizeButton](#cmfctoolbar__enablecustomizebutton) method. To enable the **Show Buttons on One Row** or **Show Buttons on Two Rows** buttons, call [CMFCToolBar::SetSiblingToolBar](#cmfctoolbar__setsiblingtoolbar).  \n  \n##  <a name=\"cmfctoolbar__cleanupimages\"></a>  CMFCToolBar::CleanUpImages  \n Frees the system resources allocated for toolbar images.  \n  \n```  \nstatic void CMFCToolBar::CleanUpImages();\n```  \n  \n### Remarks  \n The framework calls this method when an application shuts down.  \n  \n##  <a name=\"cmfctoolbar__cleanuplockedimages\"></a>  CMFCToolBar::CleanUpLockedImages  \n Frees the system resources allocated for locked toolbar images.  \n  \n```  \nvoid CleanUpLockedImages();\n```  \n  \n### Remarks  \n Call this method when the visual style of your application changes. See the VisualStudioDemo sample for an example that uses this method.  \n  \n##  <a name=\"cmfctoolbar__commandtoindex\"></a>  CMFCToolBar::CommandToIndex  \n Returns the index of the button in the toolbar with a specified command ID.  \n  \n```  \nint CommandToIndex(\n    UINT nIDFind,  \n    int iIndexFirst=0) const;\n\n \n```  \n  \n### Parameters  \n [in] `nIDFind`  \n Specifies the command ID.  \n  \n [in] `iIndexFirst`  \n Specifies the initial index to start from.  \n  \n### Return Value  \n Zero-based index of the toolbar button if the method was successful; -1 if there is no button with the specified ID.  \n  \n### Remarks  \n A [CMFCToolBar](../../mfc/reference/cmfctoolbar-class.md) object maintains an internal list of the buttons on the toolbar. Call this function to retrieve the index of a button in the list given the command ID of the button.  \n  \n If `iIndex` is greater than 0, this method ignores any button on the toolbar that has an index less than `iIndex`.  \n  \n##  <a name=\"cmfctoolbar__create\"></a>  CMFCToolBar::Create  \n Creates a `CMFCToolBar` object.  \n  \n```  \nvirtual BOOL Create(\n    CWnd* pParentWnd,  \n    DWORD dwStyle=AFX_DEFAULT_TOOLBAR_STYLE,  \n    UINT nID=AFX_IDW_TOOLBAR);\n```  \n  \n### Parameters  \n [in] `pParentWnd`  \n A pointer to the parent window of the toolbar.  \n  \n [in] `dwStyle`  \n The toolbar style. See [Toolbar Control and Button Styles](http://msdn.microsoft.com/library/windows/desktop/bb760439) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for the list of styles.  \n  \n [in] `nID`  \n The ID of the child window of the toolbar.  \n  \n### Return Value  \n `TRUE` if this method succeeds; otherwise `FALSE`.  \n  \n### Remarks  \n This method creates a control bar and attaches it to the toolbar. It creates the control bar with the `TBSTYLE_FLAT` style. Call [CMFCToolBar::CreateEx](#cmfctoolbar__createex) if you want a different control bar style.  \n  \n##  <a name=\"cmfctoolbar__createex\"></a>  CMFCToolBar::CreateEx  \n Creates a `CMFCToolBar` object that uses additional style options, such as large icons.  \n  \n```  \nvirtual BOOL CreateEx(\n    CWnd* pParentWnd,  \n    DWORD dwCtrlStyle=TBSTYLE_FLAT,  \n    DWORD dwStyle=AFX_DEFAULT_TOOLBAR_STYLE,  \n    CRect rcBorders=CRect(1,\n    1,\n    1,\n    1),  \n    UINT nID=AFX_IDW_TOOLBAR);\n```  \n  \n### Parameters  \n [in] `pParentWnd`  \n A pointer to the parent window of the toolbar.  \n  \n [in] `dwCtrlStyle`  \n Additional styles for creating the embedded control bar object.  \n  \n [in] `dwStyle`  \n The toolbar style. See [Toolbar Control and Button Styles](http://msdn.microsoft.com/library/windows/desktop/bb760439) for a list of appropriate styles.  \n  \n [in] `rcBorders`  \n A `CRect` object that specifies the widths of the toolbar window borders.  \n  \n [in] `nID`  \n The ID of the child window of the toolbar.  \n  \n### Return Value  \n Nonzero if this method succeeds; otherwise 0.  \n  \n### Remarks  \n This method creates a control bar and attaches it to the toolbar.  \n  \n Call this method instead of [CMFCToolBar::Create](#cmfctoolbar__create) when you want to provide specific styles. For example, set `dwCtrlStyle` to `TBSTYLE_FLAT | TBSTYLE_TRANSPARENT` to create a toolbar that resembles the toolbars that are used by Internet Explorer 4.  \n  \n### Example  \n The following example demonstrates how to use the `CreateEx` method of the `CMFCToolBar` class. This code snippet is part of the [IE Demo sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_IEDemo#6](../../mfc/reference/codesnippet/cpp/cmfctoolbar-class_1.h)]  \n[!code-cpp[NVC_MFC_IEDemo#7](../../mfc/reference/codesnippet/cpp/cmfctoolbar-class_3.cpp)]  \n  \n##  <a name=\"cmfctoolbar__deactivate\"></a>  CMFCToolBar::Deactivate  \n Deactivates the toolbar.  \n  \n```  \nvirtual void Deactivate();\n```  \n  \n### Remarks  \n This method deactivates the toolbar by removing the focus from the highlighted toolbar button. The framework calls this method when the toolbar loses focus or is destroyed.  \n  \n##  <a name=\"cmfctoolbar__dopaint\"></a>  CMFCToolBar::DoPaint  \n Repaints a toolbar.  \n  \n```  \nvirtual void DoPaint(CDC* pDC);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n### Remarks  \n This method is called by the framework when a part of the toolbar must be repainted.  \n  \n Override this method to customize the appearance of an object derived from [CMFCToolBar](../../mfc/reference/cmfctoolbar-class.md).  \n  \n##  <a name=\"cmfctoolbar__drawbutton\"></a>  CMFCToolBar::DrawButton  \n Repaints a toolbar button.  \n  \n```  \nvirtual BOOL DrawButton(\n    CDC* pDC,  \n    CMFCToolBarButton* pButton,  \n    CMFCToolBarImages* pImages,  \n    BOOL bHighlighted,  \n    BOOL bDrawDisabledImages);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pButton`  \n A pointer to a button to draw.  \n  \n [in] `pImages`  \n A pointer to the toolbar images.  \n  \n [in] `bHighlighted`  \n `TRUE` if the button is highlighted; otherwise `FALSE`.  \n  \n [in] `bDrawDisabledImages`  \n `TRUE` if disabled buttons are dimmed; otherwise `FALSE`.  \n  \n### Return Value  \n `TRUE` if the button was repainted; `FALSE` if the button is hidden.  \n  \n### Remarks  \n The [CMFCToolBar::DrawButton](#cmfctoolbar__drawbutton) method calls this method when a toolbar button must be repainted.  \n  \n Override this method if you want to customize the appearance of buttons on your toolbar.  \n  \n##  <a name=\"cmfctoolbar__drawseparator\"></a>  CMFCToolBar::DrawSeparator  \n Repaints a separator on a toolbar.  \n  \n```  \nvirtual void DrawSeparator(\n    CDC* pDC,  \n    const CRect& rect,  \n    BOOL bHorz);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n The bounding rectangle of the location where the separator is drawn, in pixels.  \n  \n [in] `bHorz`  \n `TRUE` if the separator is horizontal, `FALSE` if the separator is vertical.  \n  \n### Remarks  \n [CMFCToolBar::DoPaint](#cmfctoolbar__dopaint) calls this method for each [CMFCToolBar::DrawSeparator](#cmfctoolbar__drawseparator) object that has the `TBBS_SEPARATOR` style, instead of calling [CMFCToolBar::DrawButton](#cmfctoolbar__drawbutton) for those buttons.  \n  \n Override this method in a class derived from [CMFCToolBar](../../mfc/reference/cmfctoolbar-class.md) to customize the appearance of separators on the toolbar. The default implementation calls [CMFCVisualManager::OnDrawSeparator](../../mfc/reference/cmfcvisualmanager-class.md#cmfcvisualmanager__ondrawseparator) to draw a separator whose appearance is determined by the current visual manager.  \n  \n##  <a name=\"cmfctoolbar__enablecustomizebutton\"></a>  CMFCToolBar::EnableCustomizeButton  \n Enables or disables the Customize button that appears on the toolbar.  \n  \n```  \nvoid EnableCustomizeButton(\n    BOOL bEnable,  \n    int iCustomizeCmd,  \n    const CString& strCustomizeText,  \n    BOOL bQuickCustomize=TRUE);\n\n \nvoid EnableCustomizeButton(\n    BOOL bEnable,  \n    int iCustomizeCmd,  \n    UINT uiCustomizeTextResId,  \n    BOOL bQuickCustomize=TRUE);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n Enables or disables the Customize button.  \n  \n [in] `iCustomizeCmd`  \n The command ID of the Customize button.  \n  \n [in] `strCustomizeText`  \n The text label of the Customize button.  \n  \n [in] `uiCustomizeTextResId`  \n The resource string ID of the Customize button label.  \n  \n [in] `bQuickCustomize`  \n Enables or disables the **Add or Remove Buttons** option on the menu that drops down from the button.  \n  \n### Remarks  \n If `iCustomizeCmd` is -1, the framework displays the Customize button when multiple toolbar buttons do not fit in the toolbar area. The button displays a double left-pointing arrow, or chevron, which indicates that there are more buttons.  \n  \n If `iCustomizeCmd` specifies a valid command ID, and `bEnable` is `TRUE`, the Customize button is always displayed. The button has a small down arrow and opens a menu that contains a command. This command uses the text label specified by `strCustomizeText`. If `bQuickCustomize` is also `TRUE`, the menu displays the **Add or Remove Buttons** option.  \n  \n The framework dynamically adds to the menu any buttons that do not fit in the toolbar area before the item that is specified by `iCustomizeCmd`. The chevron is displayed next to the down arrow.  \n  \n##  <a name=\"cmfctoolbar__enabledocking\"></a>  CMFCToolBar::EnableDocking  \n Enables docking of the pane to the main frame.  \n  \n```  \nvirtual void EnableDocking(DWORD dwAlignment);\n```  \n  \n### Parameters  \n [in] `dwAlignment`  \n Specifies the docking alignment to enable.  \n  \n### Remarks  \n This method extends the base class implementation, [CBasePane::EnableDocking](../../mfc/reference/cbasepane-class.md#cbasepane__enabledocking), by setting the `CBasePane::m_dwControlBarStyle` data member to `AFX_CBRS_FLOAT`. This method then passes `dwAlignment` to the base class implementation.  \n  \n##  <a name=\"cmfctoolbar__enablelargeicons\"></a>  CMFCToolBar::EnableLargeIcons  \n Enables or disables large icons on toolbar buttons.  \n  \n```  \nvoid EnableLargeIcons(BOOL bEnable);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n `TRUE` to enable large icons, `FALSE` to disable large icons.  \n  \n### Remarks  \n By default, large icons are enabled.  \n  \n##  <a name=\"cmfctoolbar__enablequickcustomization\"></a>  CMFCToolBar::EnableQuickCustomization  \n Enables or disables the quick customization of toolbars so that the user can press the **Alt** key and drag a button to a new location.  \n  \n```  \nstatic void EnableQuickCustomization(BOOL bEnable=TRUE);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n `TRUE` to enable quick customization, `FALSE` to disable quick customization.  \n  \n##  <a name=\"cmfctoolbar__enablereflections\"></a>  CMFCToolBar::EnableReflections  \n Enables or disables command reflection.  \n  \n```  \nvoid EnableReflections(BOOL bEnable = TRUE);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n `TRUE` to enable command reflection; `FALSE` to disable command reflection.  \n  \n### Remarks  \n Call this method to enable command reflection for toolbar buttons that contain embedded controls, such as combo boxes.  \n  \n For more information about command reflection, see [TN062: Message Reflection for Windows Controls](../../mfc/tn062-message-reflection-for-windows-controls.md).  \n  \n##  <a name=\"cmfctoolbar__enabletextlabels\"></a>  CMFCToolBar::EnableTextLabels  \n Enables or disables text labels under toolbar button images.  \n  \n```  \nvoid EnableTextLabels(BOOL bEnable=TRUE);\n```  \n  \n### Parameters  \n `bEnable`  \n `TRUE` if text labels appear under toolbar button images; otherwise `FALSE`.  \n  \n### Remarks  \n If text labels are enabled, all buttons on the toolbar are enlarged to provide space for the labels to be displayed under the images. The customization dialog box has a **Show text label** check-box on the **Toolbars** page. When the user selects a toolbar and checks this option, the framework calls `EnableTextLabels` for the selected toolbar. You can disable the check-box for an object derived from [CMFCToolBar](../../mfc/reference/cmfctoolbar-class.md) by returning `FALSE` from [CMFCToolBar::AllowChangeTextLabels](#cmfctoolbar__allowchangetextlabels) .  \n  \n##  <a name=\"cmfctoolbar__fromhandlepermanent\"></a>  CMFCToolBar::FromHandlePermanent  \n Retrieves a pointer to the `CMFCToolBar` object that contains the given window handle.  \n  \n```  \nstatic CMFCToolBar* __stdcall FromHandlePermanent(HWND hwnd);\n```  \n  \n### Parameters  \n [in] `hwnd`  \n The window handle to look for.  \n  \n### Return Value  \n A pointer to the `CMFCToolBar` object that contains the given window handle, or `NULL` if no corresponding `CMFCToolBar` object exists.  \n  \n### Remarks  \n This shared method examines each toolbar in the application for the `CMFCToolBar` object that contains the given window handle.  \n  \n##  <a name=\"cmfctoolbar__getallbuttons\"></a>  CMFCToolBar::GetAllButtons  \n Returns a read-only list of buttons in a toolbar.  \n  \n```  \nconst CObList& GetAllButtons() const;\n\n \n```  \n  \n### Return Value  \n A constant reference to a [CObList Class](../../mfc/reference/coblist-class.md) object, which contains a collection of [CMFCToolBarButton Class](../../mfc/reference/cmfctoolbarbutton-class.md) objects.  \n  \n##  <a name=\"cmfctoolbar__getalltoolbars\"></a>  CMFCToolBar::GetAllToolbars  \n Returns a read-only list of all toolbars in the application.  \n  \n```  \nstatic const CObList& GetAllToolbars();\n```  \n  \n### Return Value  \n A const reference to a [CObList Class](../../mfc/reference/coblist-class.md) object that contains a collection of [CMFCToolbar](../../mfc/reference/cmfctoolbar-class.md) objects.  \n  \n##  <a name=\"cmfctoolbar__getbasiccommands\"></a>  CMFCToolBar::GetBasicCommands  \n Returns a read-only list of the basic commands defined in the application.  \n  \n```  \nstatic const CList<UINT,UINT>& GetBasicCommands();\n```  \n  \n### Return Value  \n A const reference to a [CList Class](../../mfc/reference/clist-class.md) object that contains a collection of basic commands.  \n  \n### Remarks  \n Add basic commands by calling [CMFCToolBar::AddBasicCommand](#cmfctoolbar__addbasiccommand) or [CMFCToolBar::SetBasicCommands](#cmfctoolbar__setbasiccommands).  \n  \n##  <a name=\"cmfctoolbar__getbutton\"></a>  CMFCToolBar::GetButton  \n Returns a pointer to the [CMFCToolBarButton Class](../../mfc/reference/cmfctoolbarbutton-class.md) object at a specified index.  \n  \n```  \nCMFCToolBarButton* GetButton(int iIndex) const;\n\n \n```  \n  \n### Parameters  \n [in] `iIndex`  \n Specifies the index of the button to return.  \n  \n### Return Value  \n A pointer to the toolbar button if it exists; or `NULL` if there is no such button.  \n  \n##  <a name=\"cmfctoolbar__getbuttoninfo\"></a>  CMFCToolBar::GetButtonInfo  \n Returns the command ID, style, and image index of the button at a specified index.  \n  \n```  \nvoid GetButtonInfo(\n    int nIndex,  \n    UINT& nID,  \n    UINT& nStyle,  \n    int& iImage) const;\n\n \n```  \n  \n### Parameters  \n [in] `nIndex`  \n Specifies the index of the button in the list of buttons on the toolbar.  \n  \n [out] `nID`  \n The command ID of a button.  \n  \n [out] `nStyle`  \n The style of the button.  \n  \n [out] `iImage`  \n The index of the image for the button.  \n  \n### Remarks  \n The `GetButtonInfo` method finds a toolbar button at the specified index and retrieves the command ID, style and image index of the button.  \n  \n If the button at the specified index does not exist, the framework sets `nID` and `nStyle` to 0, and `iImage` to -1 when the method returns.  \n  \n##  <a name=\"cmfctoolbar__getbuttonsize\"></a>  CMFCToolBar::GetButtonSize  \n Returns the dimensions of each button on the toolbar.  \n  \n```  \nCSize GetButtonSize() const;\n\n \n```  \n  \n### Return Value  \n A [CSize Class](../../atl-mfc-shared/reference/csize-class.md) object that specifies the dimensions of each button on the toolbar.  \n  \n### Remarks  \n Call [CMFCToolBar::SetSizes](#cmfctoolbar__setsizes) or [CMFCToolBar::SetLockedSizes](#cmfctoolbar__setlockedsizes) to set the dimensions of each button on the toolbar.  \n  \n##  <a name=\"cmfctoolbar__getbuttonstyle\"></a>  CMFCToolBar::GetButtonStyle  \n Returns the current style of the toolbar button that is located at the specified index.  \n  \n```  \nUINT GetButtonStyle(int nIndex) const;\n\n \n```  \n  \n### Parameters  \n [in] `nIndex`  \n Specifies the index of a toolbar button.  \n  \n### Return Value  \n A value that specifies the style of the toolbar button. . See [ToolBar Control Styles](../../mfc/reference/toolbar-control-styles.md) for a list of possible styles.  \n  \n### Remarks  \n Call [CMFCToolBar::SetButtonStyle](#cmfctoolbar__setbuttonstyle) to set the style of a toolbar button  \n  \n##  <a name=\"cmfctoolbar__getbuttontext\"></a>  CMFCToolBar::GetButtonText  \n Returns the text label of a button that has a specified index.  \n  \n```  \nCString GetButtonText(\n    int nIndex) const;\n\n \nvoid GetButtonText(\n    int nIndex,  \n    CString& rString) const;\n\n \n```  \n  \n### Parameters  \n [in] `nIndex`  \n The index of a toolbar button.  \n  \n [out] `rString`  \n The label text of the toolbar button.  \n  \n### Return Value  \n The label text of the toolbar button.  \n  \n### Remarks  \n Call [CMFCToolBar::SetButtonText](#cmfctoolbar__setbuttontext) or [CMFCToolBar::SetToolBarBtnText](#cmfctoolbar__settoolbarbtntext) to set the text label.  \n  \n##  <a name=\"cmfctoolbar__getcoldimages\"></a>  CMFCToolBar::GetColdImages  \n Returns a pointer to the collection of cold toolbar button images in the application.  \n  \n```  \nstatic CMFCToolBarImages* GetColdImages();\n```  \n  \n### Return Value  \n A pointer to the collection of cold toolbar button images.  \n  \n### Remarks  \n Cold images are the images that are used when the user is not interacting with the toolbar buttons. Call [CMFCToolBar::LoadBitmapEx](#cmfctoolbar__loadbitmapex) or [CMFCToolBar::LoadBitmap](#cmfctoolbar__loadbitmap) to load the cold images.  \n  \n##  <a name=\"cmfctoolbar__getcolumnwidth\"></a>  CMFCToolBar::GetColumnWidth  \n Returns the width of the toolbar buttons.  \n  \n```  \nvirtual int GetColumnWidth() const;\n\n \n```  \n  \n### Return Value  \n A value that specifies the width of toolbar buttons.  \n  \n### Remarks  \n The framework calls this method to calculate toolbar layout. Override this method in a derived class to specify a different column width for your toolbar.  \n  \n##  <a name=\"cmfctoolbar__getcommandbuttons\"></a>  CMFCToolBar::GetCommandButtons  \n Returns a list of buttons that have a specified command ID from all toolbars in the application.  \n  \n```  \nstatic int GetCommandButtons(\n    UINT uiCmd,  \n    CObList& listButtons);\n```  \n  \n### Parameters  \n [in] `uiCmd`  \n The command ID of the buttons.  \n  \n [out] `listButtons`  \n A reference to a [CObList Class](../../mfc/reference/coblist-class.md) object that receives the list of toolbar buttons.  \n  \n### Return Value  \n The number of buttons that have the specified command ID.  \n  \n##  <a name=\"cmfctoolbar__getcount\"></a>  CMFCToolBar::GetCount  \n Returns the number of buttons and separators on the toolbar.  \n  \n```  \nint GetCount() const;\n\n \n```  \n  \n### Return Value  \n The number of buttons and separators on the toolbar.  \n  \n##  <a name=\"cmfctoolbar__getcustomizebutton\"></a>  CMFCToolBar::GetCustomizeButton  \n Retrieves a pointer to the `CMFCCustomizeButton` object that is associated with the toolbar.  \n  \n```  \nCMFCCustomizeButton* GetCustomizeButton();\n```  \n  \n### Return Value  \n A pointer to the `CMFCCustomizeButton` object that is associated with the toolbar.  \n  \n### Remarks  \n This method retrieves the **Customize** button that appears at the end of the toolbar. Use the [CMFCToolBar::EnableCustomizeButton](#cmfctoolbar__enablecustomizebutton) method to add the **Customize** button to your toolbar.  \n  \n You can call the [CMFCToolBar::IsExistCustomizeButton](#cmfctoolbar__isexistcustomizebutton) method to determine whether the toolbar contains a valid `CMFCCustomizeButton` object.  \n  \n##  <a name=\"cmfctoolbar__getdefaultimage\"></a>  CMFCToolBar::GetDefaultImage  \n Returns the index of the default image for a toolbar button with a specified command ID.  \n  \n```  \nstatic int GetDefaultImage(UINT uiID);\n```  \n  \n### Parameters  \n [in] `uiID`  \n Specifies the command ID of the button.  \n  \n### Return Value  \n The index of the toolbar image in the shared list of images.  \n  \n### Remarks  \n Use this shared method to retrieve the index of the default image for a toolbar button with the specified command ID. The return value is an index into the shared collection of toolbar button images for all toolbars in the application. Call the [CMFCToolBar::GetImages](#cmfctoolbar__getimages) method to obtain a pointer to this collection.  \n  \n##  <a name=\"cmfctoolbar__getdisabledimages\"></a>  CMFCToolBar::GetDisabledImages  \n Returns a pointer to the collection of images that are used for disabled toolbar buttons in the application.  \n  \n```  \nstatic CMFCToolBarImages* __stdcall GetDisabledImages();\n```  \n  \n### Return Value  \n A pointer to the collection of disabled toolbar button images.  \n  \n### Remarks  \n Load the disabled toolbar button images by using the [CMFCToolBarEditBoxButton Class](../../mfc/reference/cmfctoolbareditboxbutton-class.md) and [CMFCToolBar::LoadBitmap](#cmfctoolbar__loadbitmap) methods.  \n  \n##  <a name=\"cmfctoolbar__getdisabledmenuimages\"></a>  CMFCToolBar::GetDisabledMenuImages  \n Returns a pointer to the collection of images that are used for disabled menu buttons in the application.  \n  \n```  \nstatic CMFCToolBarImages* __stdcall GetDisabledMenuImages();\n```  \n  \n### Return Value  \n A pointer to the collection of disabled menu images.  \n  \n### Remarks  \n Load the disabled images by using the [CMFCToolBarEditBoxButton Class](../../mfc/reference/cmfctoolbareditboxbutton-class.md) method.  \n  \n##  <a name=\"cmfctoolbar__getdroppeddownmenu\"></a>  CMFCToolBar::GetDroppedDownMenu  \n Retrieves a pointer to the menu button object that is currently displaying its sub-menu.  \n  \n```  \nCMFCToolBarMenuButton* GetDroppedDownMenu(int* pIndex = NULL) const;\n\n \n```  \n  \n### Parameters  \n [out] `pIndex`  \n Receives the index of the button in the collection of toolbar buttons.  \n  \n### Return Value  \n A pointer to the menu button object that is displaying its sub-menu or `NULL` if no menu is displaying its sub-menu.  \n  \n### Remarks  \n If this method returns a non- `NULL` value and `pIndex` is not `NULL`, the value pointed to by `pIndex` is set to the index of the menu button in the collection of toolbar buttons.  \n  \n##  <a name=\"cmfctoolbar__getgraydisabledbuttons\"></a>  CMFCToolBar::GetGrayDisabledButtons  \n Specifies whether the images of disabled buttons are dimmed versions of the regular button images, or taken from the collection of disabled button images.  \n  \n```  \nBOOL GetGrayDisabledButtons() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` to dim the images of disabled buttons; `FALSE`to obtain images from the collection of disabled images.  \n  \n### Remarks  \n Use [CMFCToolBar::SetGrayDisabledButtons](#cmfctoolbar__setgraydisabledbuttons) to switch between dimmed images and the images from the collection of disabled images.  \n  \n##  <a name=\"cmfctoolbar__gethighlightedbutton\"></a>  CMFCToolBar::GetHighlightedButton  \n Returns a pointer to the toolbar button that is currently highlighted.  \n  \n```  \nCMFCToolBarButton* GetHighlightedButton() const;\n\n \n```  \n  \n### Return Value  \n A pointer to a toolbar button object; or `NULL` if no button is highlighted.  \n  \n### Remarks  \n A toolbar button is highlighted if it has keyboard focus. A toolbar button is also highlighted if the toolbar buttons are hot-tracked in this application (for more information, see [CMFCToolBar::GetHotBorder](#cmfctoolbar__gethotborder) and [CMFCToolBar::SetHotBorder](#cmfctoolbar__sethotborder)) and the mouse is pointing at it when no toolbar button or menu item has keyboard focus.  \n  \n##  <a name=\"cmfctoolbar__gethotborder\"></a>  CMFCToolBar::GetHotBorder  \n Determines whether the toolbar buttons are *hot-tracked*. If a button is hot-tracked, it is highlighted when the mouse moves across it.  \n  \n```  \nBOOL GetHotBorder() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the toolbar buttons are hot-tracked; otherwise, `FALSE`.  \n  \n### Remarks  \n By default, toolbar buttons are hot-tracked.  \n  \n##  <a name=\"cmfctoolbar__gethottextcolor\"></a>  CMFCToolBar::GetHotTextColor  \n Returns the text color of the highlighted toolbar buttons.  \n  \n```  \nstatic COLORREF GetHotTextColor();\n```  \n  \n### Return Value  \n A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) value that represent the current highlighted text color.  \n  \n### Remarks  \n Call [CMFCToolBar::SetHotTextColor](#cmfctoolbar__sethottextcolor) to set a new text color for highlighted toolbar buttons.  \n  \n##  <a name=\"cmfctoolbar__gethwndlastfocus\"></a>  CMFCToolBar::GetHwndLastFocus  \n Returns a handle to the window that had the input focus just before the toolbar did.  \n  \n```  \nHWND GetHwndLastFocus() const;\n\n \n```  \n  \n### Return Value  \n A handle to window that is not derived from [CMFCBaseToolBar Class](../../mfc/reference/cmfcbasetoolbar-class.md), which previously had the input focus; or `NULL` if there is no such window.  \n  \n### Remarks  \n When a [CMFCToolBar](../../mfc/reference/cmfctoolbar-class.md) control receives the input focus, it stores a handle to the window that lost the focus so that it can restore it later.  \n  \n##  <a name=\"cmfctoolbar__getignoresettext\"></a>  CMFCToolBar::GetIgnoreSetText  \n Specifies whether calls to set button labels are ignored.  \n  \n```  \nBOOL GetIgnoreSetText() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if calls to set button labels are ignored; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbar__getimages\"></a>  CMFCToolBar::GetImages  \n Returns a pointer to the collection of default button images in the application.  \n  \n```  \nstatic CMFCToolBarImages* GetImages();\n```  \n  \n### Return Value  \n A pointer to the [CMFCToolBarImages Class](../../mfc/reference/cmfctoolbarimages-class.md) object that contains the collection of default images for all toolbars in the application.  \n  \n### Remarks  \n This shared method provides access to the collection of all default toolbar images for the application. Call the [CMFCToolBar::LoadBitmap](#cmfctoolbar__loadbitmap) method to add images to the collection.  \n  \n##  <a name=\"cmfctoolbar__getimagesize\"></a>  CMFCToolBar::GetImageSize  \n Returns the current size of toolbar button images.  \n  \n```  \nCSize GetImageSize() const;\n\n \n```  \n  \n### Return Value  \n A [CSize Class](../../atl-mfc-shared/reference/csize-class.md) object that represents the current size of toolbar button images.  \n  \n##  <a name=\"cmfctoolbar__getimagesoffset\"></a>  CMFCToolBar::GetImagesOffset  \n Returns the index offset used to find the toolbar button images for this toolbar in the global list of toolbar button images.  \n  \n```  \nint GetImagesOffset() const;\n\n \n```  \n  \n### Return Value  \n The index offset of the toolbar images.  \n  \n### Remarks  \n All toolbar default images are stored in the global [CMFCToolBarImages Class](../../mfc/reference/cmfctoolbarimages-class.md) list. The images for each button in the toolbar are stored consecutively in that list. To compute the index of the image, add the index of the button in the toolbar to the offset of the beginning of the list of images for that toolbar button.  \n  \n Call [CMFCToolBar::ButtonToIndex](#cmfctoolbar__buttontoindex) to obtain the index of a toolbar button given a pointer to the button.  \n  \n Call [CMFCToolBar::GetImages](#cmfctoolbar__getimages) to obtain a pointer to the collection of toolbar images.  \n  \n##  <a name=\"cmfctoolbar__getinvalidateitemrect\"></a>  CMFCToolBar::GetInvalidateItemRect  \n Retrieves the region of the client area that must be redrawn for the button at the given index.  \n  \n```  \nvirtual void GetInvalidateItemRect(\n    int nIndex,  \n    LPRECT lpRect) const;\n\n \n```  \n  \n### Parameters  \n [in] `nIndex`  \n The index of the button for which to retrieve the client area.  \n  \n [out] `lpRect`  \n A pointer to a `RECT` object that receives the region of the client area.  \n  \n### Remarks  \n The `lpRect` parameter must not be `NULL`. If no button exists at the provided index, `lpRect` receives a `RECT` object that is initialized to zero.  \n  \n##  <a name=\"cmfctoolbar__getitemid\"></a>  CMFCToolBar::GetItemID  \n Returns the command ID of the toolbar button at a specified index.  \n  \n```  \nUINT GetItemID(int nIndex) const;\n\n \n```  \n  \n### Parameters  \n [in] `nIndex`  \n Specifies the index of the toolbar button.  \n  \n### Return Value  \n The command ID of the toolbar button; or zero if the button with the specified index does not exist.  \n  \n##  <a name=\"cmfctoolbar__getitemrect\"></a>  CMFCToolBar::GetItemRect  \n Returns the bounding rectangle of the button at a specified index.  \n  \n```  \nvirtual void GetItemRect(\n    int nIndex,  \n    LPRECT lpRect) const;\n\n \n```  \n  \n### Parameters  \n [in] `nIndex`  \n Specifies the index of a toolbar button.  \n  \n [out] `lpRect`  \n A pointer to `CRect` object that receives the coordinates of the image bounding rectangle.  \n  \n### Remarks  \n The `CRect` object to which `lpRect` points is set to 0 if a button at the specified index does not exist.  \n  \n### Example  \n The following example demonstrates how to use the `GetItemRect` method of the `CMFCToolBar` class. This code snippet is part of the [IE Demo sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_IEDemo#6](../../mfc/reference/codesnippet/cpp/cmfctoolbar-class_1.h)]  \n[!code-cpp[NVC_MFC_IEDemo#9](../../mfc/reference/codesnippet/cpp/cmfctoolbar-class_4.cpp)]  \n  \n##  <a name=\"cmfctoolbar__getlargecoldimages\"></a>  CMFCToolBar::GetLargeColdImages  \n Returns a pointer to the collection of large cold toolbar button images in the application.  \n  \n```  \nstatic CMFCToolBarImages* GetLargeColdImages();\n```  \n  \n### Return Value  \n A pointer to the collection of large cold images.  \n  \n### Remarks  \n Cold images are the images that are used when the user is not interacting with the toolbar buttons. Call [CMFCToolBar::LoadBitmapEx](#cmfctoolbar__loadbitmapex) to load the large cold images.  \n  \n##  <a name=\"cmfctoolbar__getlargedisabledimages\"></a>  CMFCToolBar::GetLargeDisabledImages  \n Returns a pointer to the collection of large disabled toolbar button images in the application.  \n  \n```  \nstatic CMFCToolBarImages* GetLargeDisabledImages();\n```  \n  \n### Return Value  \n A pointer to the collection of large disabled toolbar button images.  \n  \n### Remarks  \n Large images are large versions of the regular toolbar button images. Call [CMFCToolBar::LoadBitmapEx](#cmfctoolbar__loadbitmapex) or [CMFCToolBar::LoadBitmap](#cmfctoolbar__loadbitmap) to load the large images.  \n  \n##  <a name=\"cmfctoolbar__getlargeimages\"></a>  CMFCToolBar::GetLargeImages  \n Returns a pointer to the collection of large toolbar button images in the application.  \n  \n```  \nstatic CMFCToolBarImages* GetLargeImages();\n```  \n  \n### Return Value  \n A pointer to the collection of large toolbar button images.  \n  \n### Remarks  \n Large images are large versions of the regular toolbar button images. Call [CMFCToolBar::LoadBitmapEx](#cmfctoolbar__loadbitmapex) to load the large images.  \n  \n##  <a name=\"cmfctoolbar__getlockedcoldimages\"></a>  CMFCToolBar::GetLockedColdImages  \n Returns a pointer to the collection of locked cold images in the toolbar.  \n  \n```  \nCMFCToolBarImages* GetLockedColdImages();\n```  \n  \n### Return Value  \n A pointer to the collection of locked cold images, or `NULL` if the toolbar is not locked.  \n  \n### Remarks  \n Locked images are versions of the regular toolbar button images that the framework uses when the user cannot customize the toolbar. Cold images are the images that are used when the user is not interacting with the toolbar buttons.  \n  \n This method returns `NULL` if the toolbar is not locked. This method also generates an assertion failure in Debug builds if the toolbar is not locked. For more information about locked toolbars, see [CMFCToolBar::IsLocked](#cmfctoolbar__islocked).  \n  \n Call the [CMFCToolBar::LoadBitmapEx](#cmfctoolbar__loadbitmapex) method to load the locked cold images.  \n  \n##  <a name=\"cmfctoolbar__getlockeddisabledimages\"></a>  CMFCToolBar::GetLockedDisabledImages  \n Returns a pointer to the collection of locked disabled images in the toolbar.  \n  \n```  \nCMFCToolBarImages* GetLockedDisabledImages();\n```  \n  \n### Return Value  \n A pointer to the collection of locked disabled images, or `NULL` if the toolbar is not locked.  \n  \n### Remarks  \n Locked images are versions of the regular toolbar button images that the framework uses when the user cannot customize the toolbar. Disabled images are the images that the framework uses when a button has the `TBBS_DISABLED` style.  \n  \n This method returns `NULL` if the toolbar is not locked. This method also generates an assertion failure in Debug builds if the toolbar is not locked. For more information about locked toolbars, see [CMFCToolBar::IsLocked](#cmfctoolbar__islocked).  \n  \n Call the [CMFCToolBar::LoadBitmapEx](#cmfctoolbar__loadbitmapex) method to load the locked disabled images.  \n  \n##  <a name=\"cmfctoolbar__getlockedimages\"></a>  CMFCToolBar::GetLockedImages  \n Returns a pointer to the collection of locked button images in the toolbar.  \n  \n```  \nCMFCToolBarImages* GetLockedImages();\n```  \n  \n### Return Value  \n A pointer to the collection of locked toolbar button images, or `NULL` if the toolbar is not locked.  \n  \n### Remarks  \n Locked images are versions of the regular toolbar button images that the framework uses when the user cannot customize the toolbar.  \n  \n This method returns `NULL` if the toolbar is not locked. This method also generates an assertion failure in Debug builds if the toolbar is not locked. For more information about locked toolbars, see [CMFCToolBar::IsLocked](#cmfctoolbar__islocked).  \n  \n##  <a name=\"cmfctoolbar__getlockedimagesize\"></a>  CMFCToolBar::GetLockedImageSize  \n Returns the default size of locked toolbar images.  \n  \n```  \nCSize GetLockedImageSize() const;\n\n \n```  \n  \n### Return Value  \n A `CSize` structure that specifies the size of locked toolbar images or an empty `CSize` structure if the toolbar is not locked.  \n  \n### Remarks  \n Locked images are versions of the regular toolbar button images that the framework uses when the user cannot customize the toolbar.  \n  \n This method returns a `CSize` structure with zero width and zero height if the toolbar is not locked. This method also generates an assertion failure in Debug builds if the toolbar is not locked. For more information about locked toolbars, see [CMFCToolBar::IsLocked](#cmfctoolbar__islocked).  \n  \n Call the [CMFCToolBar::SetLockedSizes](#cmfctoolbar__setlockedsizes) method to specify the locked image size.  \n  \n##  <a name=\"cmfctoolbar__getlockedmenuimages\"></a>  CMFCToolBar::GetLockedMenuImages  \n Returns a pointer to the collection of locked toolbar menu images in the toolbar.  \n  \n```  \nCMFCToolBarImages* GetLockedMenuImages();\n```  \n  \n### Return Value  \n A pointer to the collection of locked toolbar menu images, or `NULL` if the toolbar is not locked.  \n  \n### Remarks  \n Locked images are versions of the regular toolbar menu images that the framework uses when the user cannot customize the toolbar.  \n  \n This method returns `NULL` if the toolbar is not locked. This method also generates an assertion failure in Debug builds if the toolbar is not locked. For more information about locked toolbars, see [CMFCToolBar::IsLocked](#cmfctoolbar__islocked).  \n  \n Call the [CMFCToolBar::LoadBitmapEx](#cmfctoolbar__loadbitmapex) method to load the locked menu images.  \n  \n##  <a name=\"cmfctoolbar__getmenubuttonsize\"></a>  CMFCToolBar::GetMenuButtonSize  \n Returns the size of menu buttons in the application.  \n  \n```  \nstatic CSize GetMenuButtonSize();\n```  \n  \n### Return Value  \n A `CSize` object that represents the size of menu buttons, in pixels.  \n  \n### Remarks  \n The size of menu buttons on toolbars is maintained as a global variable and can be retrieved by this static method.  \n  \n Call [CMFCToolBar::SetMenuSizes](#cmfctoolbar__setmenusizes) to set this global variable.  \n  \n##  <a name=\"cmfctoolbar__getmenuimages\"></a>  CMFCToolBar::GetMenuImages  \n Returns a pointer to the collection of menu button images in the application.  \n  \n```  \nstatic CMFCToolBarImages* GetMenuImages();\n```  \n  \n### Return Value  \n A pointer to the collection of menu images.  \n  \n### Remarks  \n Call the [CMFCToolBar::LoadBitmapEx](#cmfctoolbar__loadbitmapex) method to load the menu images.  \n  \n Call the [CMFCToolBar::SetMenuSizes](#cmfctoolbar__setmenusizes) method to set the size of buttons and their images.  \n  \n##  <a name=\"cmfctoolbar__getmenuimagesize\"></a>  CMFCToolBar::GetMenuImageSize  \n Returns the size of menu button images in the application.  \n  \n```  \nstatic CSize GetMenuImageSize();\n```  \n  \n### Return Value  \n A `CSize` object that represents the size of menu images.  \n  \n### Remarks  \n This method returns the size of images on toolbar menu buttons that is maintained as a global variable. Call [CMFCToolBar::SetMenuSizes](#cmfctoolbar__setmenusizes) to set this global variable.  \n  \n##  <a name=\"cmfctoolbar__getorigbuttons\"></a>  CMFCToolBar::GetOrigButtons  \n Retrieves the collection of non-customized buttons of the toolbar.  \n  \n```  \nconst CObList& GetOrigButtons() const;\n\n \n```  \n  \n### Return Value  \n A reference to the list of non-customized buttons of the toolbar.  \n  \n### Remarks  \n The framework creates a copy of toolbar buttons before they are customized by the user. The [CMFCToolBar::SetButtons](#cmfctoolbar__setbuttons) method adds a copy of each button in the provided array to the list of original buttons. The [CMFCToolBar::RestoreOriginalState](#cmfctoolbar__restoreoriginalstate) method restores the original state of the toolbar by loading it from the resource file.  \n  \n To set the list of original buttons for your toolbar, call the [CMFCToolBar::SetOrigButtons](#cmfctoolbar__setorigbuttons) method.  \n  \n##  <a name=\"cmfctoolbar__getorigresetbuttons\"></a>  CMFCToolBar::GetOrigResetButtons  \n Retrieves the collection of non-customized reset buttons of the toolbar.  \n  \n```  \nconst CObList& GetOrigResetButtons() const;\n\n \n```  \n  \n### Return Value  \n A reference to the list of non-customized reset buttons of the toolbar.  \n  \n### Remarks  \n When the user clicks the **Reset** button during customization mode, the framework uses this method to restore buttons that were removed from the toolbar.  \n  \n The [CMFCToolBar::SetButtons](#cmfctoolbar__setbuttons) method adds a copy of each toolbar button to the list of original reset buttons after it calls the [CMFCToolBar::OnReset](#cmfctoolbar__onreset) method. You can override the [CMFCToolBar::OnReset](#cmfctoolbar__onreset) method to customize the appearance of buttons after the user presses the **Reset** button.  \n  \n##  <a name=\"cmfctoolbar__getresourceid\"></a>  CMFCToolBar::GetResourceID  \n Retrieves the resource ID of the toolbar.  \n  \n```  \nUINT GetResourceID() const;\n\n \n```  \n  \n### Return Value  \n The resource ID of the toolbar.  \n  \n### Remarks  \n Call the [CMFCToolBar::LoadToolBarEx](#cmfctoolbar__loadtoolbarex) method to set the resource ID of the toolbar.  \n  \n##  <a name=\"cmfctoolbar__getroutecommandsviaframe\"></a>  CMFCToolBar::GetRouteCommandsViaFrame  \n Determines which object, the parent frame or the owner, sends commands to the toolbar.  \n  \n```  \nBOOL GetRouteCommandsViaFrame();\n```  \n  \n### Return Value  \n Nonzero if the parent frame sends commands to the toolbar; 0 if the owner sends commands to the toolbar.  \n  \n### Remarks  \n By default, the parent frame sends commands to the toolbar. Call [CMFCToolBar::SetRouteCommandsViaFrame](#cmfctoolbar__setroutecommandsviaframe) to change this behavior.  \n  \n If this method returns a nonzero value, you can retrieve a pointer to the parent frame object by using the `CMFCToolBar::GetCommandTarget` method. See the VisualStudioDemo sample for an example that uses this method.  \n  \n##  <a name=\"cmfctoolbar__getrowheight\"></a>  CMFCToolBar::GetRowHeight  \n Returns the height of toolbar buttons.  \n  \n```  \nvirtual int GetRowHeight() const;\n\n \n```  \n  \n### Return Value  \n The height of toolbar buttons, in pixels.  \n  \n### Remarks  \n The framework calls this method to calculate toolbar layout. Override this method in a derived class to specify a different height for your toolbar.  \n  \n##  <a name=\"cmfctoolbar__getshowtooltips\"></a>  CMFCToolBar::GetShowTooltips  \n Specifies whether tool tips are displayed for toolbar buttons.  \n  \n```  \nstatic BOOL GetShowTooltips();\n```  \n  \n### Return Value  \n `TRUE` if tool tips are shown for toolbar buttons; otherwise `FALSE`.  \n  \n### Remarks  \n By default tool tips are shown. You can change this static flag by calling [CMFCToolBar::SetShowTooltips](#cmfctoolbar__setshowtooltips).  \n  \n##  <a name=\"cmfctoolbar__getsiblingtoolbar\"></a>  CMFCToolBar::GetSiblingToolBar  \n Retrieves the sibling of the toolbar.  \n  \n```  \nCMFCToolBar* GetSiblingToolBar();\n```  \n  \n### Return Value  \n A pointer to the sibling toolbar.  \n  \n### Remarks  \n For more information about how to enable the **Show Buttons on One Row** and **Show Buttons on Two Rows** buttons, see [CMFCToolBar::SetSiblingToolBar](#cmfctoolbar__setsiblingtoolbar).  \n  \n##  <a name=\"cmfctoolbar__getuserimages\"></a>  CMFCToolBar::GetUserImages  \n Returns a pointer to the collection of user-defined toolbar button images in the application.  \n  \n```  \nstatic CMFCToolBarImages* GetUserImages();\n```  \n  \n### Return Value  \n A pointer to the collection of user-defined toolbar button images for all toolbars in the application.  \n  \n### Remarks  \n Call the [CMFCToolBar::SetUserImages](#cmfctoolbar__setuserimages) method to set the collection of user-defined images in the application.  \n  \n##  <a name=\"cmfctoolbar__hittest\"></a>  CMFCToolBar::HitTest  \n Returns the index of the toolbar button that is located at the specified position.  \n  \n```  \nvirtual int HitTest(CPoint point);\n```  \n  \n### Parameters  \n [in] `point`  \n The point to be tested, in client coordinates.  \n  \n### Return Value  \n The index of the button that is located at the specified position, or -1 if there is no such button or the button is a separator.  \n  \n##  <a name=\"cmfctoolbar__insertbutton\"></a>  CMFCToolBar::InsertButton  \n Inserts a button into the toolbar.  \n  \n```  \nvirtual int InsertButton(\n    const CMFCToolBarButton& button,  \n    INT_PTR iInsertAt=-1);\n\n \nvirtual int InsertButton(\n    CMFCToolBarButton* pButton,  \n    int iInsertAt=-1);\n```  \n  \n### Parameters  \n [in] `button`  \n Specifies the button to insert.  \n  \n [in] `iInsertAt`  \n Specifies the zero-based position to insert the button at.  \n  \n### Return Value  \n The position at which the button was inserted or -1 if an error occurs.  \n  \n### Remarks  \n If `iInsertAt` is -1, this method adds the button to the end of the list of toolbar buttons.  \n  \n Call the [CMFCToolBar::InsertSeparator](#cmfctoolbar__insertseparator) method to insert a separator into the toolbar.  \n  \n##  <a name=\"cmfctoolbar__insertseparator\"></a>  CMFCToolBar::InsertSeparator  \n Inserts a separator into the toolbar.  \n  \n```  \nvirtual int InsertSeparator(INT_PTR iInsertAt=-1);\n```  \n  \n### Parameters  \n [in] `iInsertAt`  \n Specifies the zero-based position to insert the separator at. This parameter must be larger than 0.  \n  \n### Return Value  \n The position at which the separator was inserted or -1 if an error occurs.  \n  \n### Remarks  \n Call this method to insert a separator between two existing buttons. If `iInsertAt` is -1, this method adds the separator to the end of the list of toolbar buttons.  \n  \n You cannot use this method to add a separator to an empty toolbar.  \n  \n Call the [CMFCToolBar::InsertButton](#cmfctoolbar__insertbutton) method to insert a button into the toolbar.  \n  \n##  <a name=\"cmfctoolbar__invalidatebutton\"></a>  CMFCToolBar::InvalidateButton  \n Invalidates the client area of the toolbar button that exists at the provided index.  \n  \n```  \nCMFCToolBarButton* InvalidateButton(int nIndex);\n```  \n  \n### Parameters  \n [in] `nIndex`  \n The zero-based index of the button in the toolbar.  \n  \n### Return Value  \n A pointer to the `CMFCToolBarButton` object that exists at the provided index or `NULL` if no such object exists.  \n  \n### Remarks  \n The framework calls this method when it updates the client area that is associated with a toolbar button. It calls the [CWnd::InvalidateRect](../../mfc/reference/cwnd-class.md#cwnd__invalidaterect) method with the client rectangle of the `CMFCToolBarButton` object that exists at the provided index.  \n  \n##  <a name=\"cmfctoolbar__isaddremovequickcustomize\"></a>  CMFCToolBar::IsAddRemoveQuickCustomize  \n Determines whether a user can add or remove toolbar buttons by using the **Customize** menu option.  \n  \n```  \nBOOL IsAddRemoveQuickCustomize();\n```  \n  \n### Return Value  \n `TRUE` if a user can use the **Customize** menu option to modify the toolbar; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbar__isaltcustomizemode\"></a>  CMFCToolBar::IsAltCustomizeMode  \n Specifies whether *quick customization* is being used to drag a button. When quick customization is enabled, a user can press and hold the Alt key and drag a button to a new location.  \n  \n```  \nstatic BOOL __stdcall IsAltCustomizeMode();\n```  \n  \n### Return Value  \n `TRUE` if quick customization is being used to drag a button; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbar__isautograyinactiveimages\"></a>  CMFCToolBar::IsAutoGrayInactiveImages  \n Specifies whether the automatic generation of inactive (non-highlighted) button images is enabled.  \n  \n```  \nstatic BOOL IsAutoGrayInactiveImages();\n```  \n  \n### Return Value  \n `TRUE` if the option to automatically dim inactive images is enabled; otherwise `FALSE`.  \n  \n### Remarks  \n You can enable or disable automatic dimming of inactive images by calling [CMFCToolBar::AutoGrayInactiveImages](#cmfctoolbar__autograyinactiveimages).  \n  \n##  <a name=\"cmfctoolbar__isbasiccommand\"></a>  CMFCToolBar::IsBasicCommand  \n Determines whether a command is on the list of basic commands.  \n  \n```  \nstatic BOOL IsBasicCommand(UINT uiCmd);\n```  \n  \n### Parameters  \n [in] `uiCmd`  \n Specifies the command to check.  \n  \n### Return Value  \n `TRUE` if the specified command belongs to the list of basic commands; otherwise `FALSE`.  \n  \n### Remarks  \n This static method determines whether the command specified by `uiCmd` belongs to the global list of basic commands. You can change the list of basic commands by calling [CMFCToolBar::AddBasicCommand](#cmfctoolbar__addbasiccommand) or [CMFCToolBar::SetBasicCommands](#cmfctoolbar__setbasiccommands).  \n  \n##  <a name=\"cmfctoolbar__isbuttonextrasizeavailable\"></a>  CMFCToolBar::IsButtonExtraSizeAvailable  \n Determines whether the toolbar can display buttons that have extended borders.  \n  \n```  \nvirtual BOOL IsButtonExtraSizeAvailable() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the bar can display buttons with the extra border size; otherwise `FALSE`.  \n  \n### Remarks  \n The toolbar object returns `TRUE` if it can display buttons that have extended borders. A toolbar button calls this method when it handles the [CMFCToolBarButton::OnChangeParentWnd](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onchangeparentwnd) notification and will set its internal extra border size flag accordingly. This internal flag may be retrieved later by calling [CMFCToolBarButton::IsExtraSize](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__isextrasize).  \n  \n Override this method in a class derived from [CMFCToolBar](../../mfc/reference/cmfctoolbar-class.md) and return `TRUE` if your bar can display the toolbar buttons with the extra border size and return `FALSE` otherwise. The default implementation returns `TRUE`.  \n  \n##  <a name=\"cmfctoolbar__isbuttonhighlighted\"></a>  CMFCToolBar::IsButtonHighlighted  \n Determines whether the specified button is highlighted.  \n  \n```  \nBOOL IsButtonHighlighted(int iButton) const;\n\n \n```  \n  \n### Parameters  \n [in] `iButton`  \n Specifies the index of a toolbar button.  \n  \n### Return Value  \n `TRUE` if the specified button is highlighted; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbar__iscommandpermitted\"></a>  CMFCToolBar::IsCommandPermitted  \n Determines whether a command is permitted.  \n  \n```  \nstatic BOOL IsCommandPermitted(UINT uiCmd);\n```  \n  \n### Parameters  \n [in] `uiCmd`  \n Specifies the command to check.  \n  \n### Return Value  \n `TRUE` if the specified command is permitted; otherwise `FALSE`.  \n  \n### Remarks  \n This static method determines whether the command specified by `uiCmd` belongs to the global list of non-permitted commands.  \n  \n You can change the list of non-permitted commands by calling [CMFCToolBar::SetNonPermittedCommands](#cmfctoolbar__setnonpermittedcommands).  \n  \n##  <a name=\"cmfctoolbar__iscommandrarelyused\"></a>  CMFCToolBar::IsCommandRarelyUsed  \n Determines whether a command is rarely used.  \n  \n```  \nstatic BOOL IsCommandRarelyUsed(UINT uiCmd);\n```  \n  \n### Parameters  \n [in] `uiCmd`  \n Specifies the command to check.  \n  \n### Return Value  \n `TRUE` if the specified command is rarely used; otherwise `FALSE`.  \n  \n### Remarks  \n The `IsCommandRarelyUsed` method returns `FALSE` when one or more of the following conditions occur:  \n  \n-   The specified command belongs to the list of basic commands  \n  \n-   The specified command is one of the standard commands  \n  \n-   The framework is in customization mode  \n  \n-   The list of basic commands is empty  \n  \n-   More than 20% of command calls are calls to the specified command.  \n  \n##  <a name=\"cmfctoolbar__iscustomizemode\"></a>  CMFCToolBar::IsCustomizeMode  \n Specifies whether the toolbar framework is in customization mode.  \n  \n```  \nstatic BOOL IsCustomizeMode();\n```  \n  \n### Return Value  \n `TRUE` if the framework is in customization mode; otherwise `FALSE`.  \n  \n### Remarks  \n You can toggle customization mode by calling [CMFCToolBar::SetCustomizeMode](#cmfctoolbar__setcustomizemode).  \n  \n The framework changes the mode when the user invokes the customization dialog box ( [CMFCToolBarsCustomizeDialog Class](../../mfc/reference/cmfctoolbarscustomizedialog-class.md)).  \n  \n##  <a name=\"cmfctoolbar__isdragbutton\"></a>  CMFCToolBar::IsDragButton  \n Determines whether a toolbar button is being dragged.  \n  \n```  \nBOOL IsDragButton(const CMFCToolBarButton* pButton) const;\n\n \n```  \n  \n### Parameters  \n [in] `pButton`  \n Pointer to a toolbar button.  \n  \n### Return Value  \n `TRUE` if the specified button is being dragged; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbar__isexistcustomizebutton\"></a>  CMFCToolBar::IsExistCustomizeButton  \n Determines whether the toolbar contains the **Customize** button.  \n  \n```  \nBOOL IsExistCustomizeButton();\n```  \n  \n### Return Value  \n `TRUE` if the toolbar contains the **Customize** button; otherwise `FALSE`.  \n  \n### Remarks  \n If this method returns `TRUE`, the [CMFCToolBar::GetCustomizeButton](#cmfctoolbar__getcustomizebutton) method returns a pointer to the **Customize** button that appears at the end of the toolbar.  \n  \n Use the [CMFCToolBar::EnableCustomizeButton](#cmfctoolbar__enablecustomizebutton) method to add the **Customize** button to your toolbar.  \n  \n##  <a name=\"cmfctoolbar__isfloating\"></a>  CMFCToolBar::IsFloating  \n Determines whether the toolbar is floating.  \n  \n```  \nvirtual BOOL IsFloating() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the toolbar is floating; otherwise, `FALSE`.  \n  \n##  <a name=\"cmfctoolbar__islargeicons\"></a>  CMFCToolBar::IsLargeIcons  \n Specifies whether toolbars in the application currently display large icons.  \n  \n```  \nstatic BOOL IsLargeIcons();\n```  \n  \n### Return Value  \n `TRUE` if the application is using large icons; otherwise `FALSE`.  \n  \n### Remarks  \n Call [CMFCToolBar::SetLargeIcons](#cmfctoolbar__setlargeicons) to toggle between large icons and regular icons.  \n  \n The framework automatically changes the mode when the user toggles the **Large icons** check-box on the **Options** page of the **Customization** dialog box.  \n  \n##  <a name=\"cmfctoolbar__islastcommandfrombutton\"></a>  CMFCToolBar::IsLastCommandFromButton  \n Determines whether the most recently executed command was sent from the specified toolbar button.  \n  \n```  \nstatic BOOL IsLastCommandFromButton(CMFCToolBarButton* pButton);\n```  \n  \n### Parameters  \n [in] `pButton`  \n Pointer to button.  \n  \n### Return Value  \n `TRUE` if the last command was sent from the button that `pButton` specifies; otherwise `FALSE`.  \n  \n### Remarks  \n This method obtains a pointer to a [MSG Structure](../../mfc/reference/msg-structure1.md) by calling `CWnd::GetCurrentMessage`. It then compares the `HWND` of the button with the `MSG::lParam` and `MSG::hwnd` members to determine whether the button was the source of the command.  \n  \n##  <a name=\"cmfctoolbar__islocked\"></a>  CMFCToolBar::IsLocked  \n Determines whether the toolbar is locked.  \n  \n```  \nBOOL IsLocked() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the toolbar is locked; otherwise, `FALSE`.  \n  \n### Remarks  \n This method returns `TRUE` when the user cannot perform customization tasks such as repositioning toolbar buttons.  \n  \n Locked toolbars use separate image lists. For more information about these image lists, see [CMFCToolBar::LoadBitmapEx](#cmfctoolbar__loadbitmapex).  \n  \n##  <a name=\"cmfctoolbar__isonerowwithsibling\"></a>  CMFCToolBar::IsOneRowWithSibling  \n Determines whether the toolbar and its sibling toolbar are positioned on the same row.  \n  \n```  \nBOOL IsOneRowWithSibling();\n```  \n  \n### Return Value  \n `TRUE` if the toolbar and its sibling are positioned on the same row; otherwise `FALSE`.  \n  \n### Remarks  \n The [CMFCCustomizeButton::CreatePopupMenu](http://msdn.microsoft.com/en-us/e501083e-f78e-4d8d-900c-40bd6e2bb7f8) method calls this method to determine how to show the **Customize** pop-up menu. If this method returns `TRUE`, the framework displays the **Show Buttons on One Row** button. Otherwise, the framework displays the **Show Buttons on Two Rows** button.  \n  \n You typically do not have to use this method. To enable the **Show Buttons on One Row** or **Show Buttons on Two Rows** buttons, call [CMFCToolBar::SetSiblingToolBar](#cmfctoolbar__setsiblingtoolbar).  \n  \n##  <a name=\"cmfctoolbar__isresourcechanged\"></a>  CMFCToolBar::IsResourceChanged  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL IsResourceChanged() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbar__issibling\"></a>  CMFCToolBar::IsSibling  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsSibling();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbar__isuserdefined\"></a>  CMFCToolBar::IsUserDefined  \n Specifies whether the toolbar is user-defined.  \n  \n```  \nBOOL IsUserDefined() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the toolbar was created by the user; otherwise `FALSE`.  \n  \n##  <a name=\"cmfctoolbar__loadbitmap\"></a>  CMFCToolBar::LoadBitmap  \n Loads toolbar images from application resources.  \n  \n```  \nvirtual BOOL LoadBitmap(\n    UINT uiResID,  \n    UINT uiColdResID=0,  \n    UINT uiMenuResID=0,  \n    BOOL bLocked=FALSE,  \n    UINT uiDisabledResID=0,  \n    UINT uiMenuDisabledResID=0);\n```  \n  \n### Parameters  \n [in] `uiResID`  \n The resource ID of the bitmap that refers to the hot toolbar images.  \n  \n [in] `uiColdResID`  \n The resource ID of the bitmap that refers to the cold toolbar images.  \n  \n [in] `uiMenuResID`  \n The resource ID of the bitmap that refers to the regular menu images.  \n  \n [in] `bLocked`  \n `TRUE` to lock the toolbar; otherwise `FALSE`.  \n  \n [in] `uiDisabledResID`  \n The resource ID of the bitmap that refers to the disabled toolbar images.  \n  \n [in] `uiMenuDisabledResID`  \n The resource ID of the bitmap that refers to the disabled menu images.  \n  \n### Return Value  \n Nonzero if the method succeeds; otherwise 0.  \n  \n### Remarks  \n The [CMFCToolBar::LoadToolBarEx](#cmfctoolbar__loadtoolbarex) method calls this method to load the images that are associated with the toolbar. Override this method to perform custom loading of image resources.  \n  \n Call the `LoadBitmapEx` method to load additional images after you create the toolbar.  \n  \n##  <a name=\"cmfctoolbar__loadbitmapex\"></a>  CMFCToolBar::LoadBitmapEx  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL LoadBitmapEx(\n    CMFCToolBarInfo& params,  \n    BOOL bLocked = FALSE);\n```  \n  \n### Parameters  \n [in] `params`  \n [in] `bLocked`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbar__loadlargeiconsstate\"></a>  CMFCToolBar::LoadLargeIconsState  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nstatic BOOL __stdcall LoadLargeIconsState(LPCTSTR lpszProfileName = NULL);\n```  \n  \n### Parameters  \n [in] `lpszProfileName`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbar__loadparameters\"></a>  CMFCToolBar::LoadParameters  \n Loads global toolbar options from the Windows registry.  \n  \n```  \nstatic BOOL LoadParameters(LPCTSTR lpszProfileName=NULL);\n```  \n  \n### Parameters  \n [in] `lpszProfileName`  \n Specifies the relative path of the Windows registry key.  \n  \n### Return Value  \n Nonzero if the method succeeds; otherwise 0.  \n  \n### Remarks  \n This method loads global parameters such as the menu animation type, the menu shadow style, and whether to display large icons from the Windows registry.  \n  \n The [CWinAppEx::LoadState](../../mfc/reference/cwinappex-class.md#cwinappex__loadstate) method calls this method as a part of the initialization process of the application.  \n  \n##  <a name=\"cmfctoolbar__loadstate\"></a>  CMFCToolBar::LoadState  \n Loads the toolbar state information from the Windows registry.  \n  \n```  \nvirtual BOOL LoadState(\n    LPCTSTR lpszProfileName=NULL,  \n    int nIndex=-1,  \n    UINT uiID=(UINT)-1);\n```  \n  \n### Parameters  \n [in] `lpszProfileName`  \n Specifies the relative path of the Windows registry key.  \n  \n [in] `nIndex`  \n Specifies the control ID of the toolbar.  \n  \n [in] `uiID`  \n Specifies the resource ID of the toolbar.  \n  \n### Return Value  \n Nonzero if the method succeeds; otherwise 0.  \n  \n### Remarks  \n The framework calls this method as a part of the initialization process of the application. For more information, see [CWinAppEx::LoadState](../../mfc/reference/cwinappex-class.md#cwinappex__loadstate).  \n  \n##  <a name=\"cmfctoolbar__loadtoolbar\"></a>  CMFCToolBar::LoadToolBar  \n Loads the toolbar from application resources.  \n  \n```  \nvirtual BOOL LoadToolBar(\n    UINT uiResID,  \n    UINT uiColdResID=0,  \n    UINT uiMenuResID=0,  \n    BOOL bLocked=FALSE,  \n    UINT uiDisabledResID=0,  \n    UINT uiMenuDisabledResID=0,  \n    UINT uiHotResID=0);\n```  \n  \n### Parameters  \n [in] `uiResID`  \n The resource ID of the toolbar.  \n  \n [in] `uiColdResID`  \n The resource ID of the bitmap that refers to the cold toolbar images.  \n  \n [in] `uiMenuResID`  \n The resource ID of the bitmap that refers to the regular menu images.  \n  \n [in] `bLocked`  \n A Boolean value that specifies whether the toolbar is locked or not. If this parameter is `TRUE`, the toolbar is locked. Otherwise, the toolbar is not locked.  \n  \n [in] `uiDisabledResID`  \n The resource ID of the bitmap that refers to the disabled toolbar images.  \n  \n [in] `uiMenuDisabledResID`  \n The resource ID of the bitmap that refers to the disabled menu images.  \n  \n [in] `uiHotResID`  \n The resource ID of the bitmap that refers to the hot toolbar images.  \n  \n### Return Value  \n Nonzero if the method succeeds; otherwise 0.  \n  \n### Remarks  \n The framework calls this method during initialization to load the images that are associated with the toolbar.  \n  \n### Example  \n The following example demonstrates how to use the `LoadToolBar` method in the `CMFCToolBar` class. This code snippet is part of the [IE Demo sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_IEDemo#6](../../mfc/reference/codesnippet/cpp/cmfctoolbar-class_1.h)]  \n[!code-cpp[NVC_MFC_IEDemo#7](../../mfc/reference/codesnippet/cpp/cmfctoolbar-class_3.cpp)]  \n  \n##  <a name=\"cmfctoolbar__loadtoolbarex\"></a>  CMFCToolBar::LoadToolBarEx  \n Loads the toolbar from application resources by using the `CMFCToolBarInfo` helper class to enable the application to use large images.  \n  \n```  \nvirtual BOOL LoadToolBarEx(\n    UINT uiToolbarResID,  \n    CMFCToolBarInfo& params,  \n    BOOL bLocked=FALSE);\n```  \n  \n### Parameters  \n [in] `uiToolbarResID`  \n The resource ID of the toolbar.  \n  \n [in] `params`  \n A reference to a `CMFCToolBarInfo` object that contains the resource IDs for the toolbar images.  \n  \n [in] `bLocked`  \n A Boolean value that specifies whether the toolbar is locked or not. If this parameter is `TRUE`, the toolbar is locked. Otherwise, the toolbar is not locked.  \n  \n### Return Value  \n Nonzero if the method succeeds; otherwise 0.  \n  \n### Remarks  \n Call this method to load toolbar images from the application resources.  \n  \n##  <a name=\"cmfctoolbar__m_dbllargeimageratio\"></a>  CMFCToolBar::m_dblLargeImageRatio  \n Specifies the ratio between the dimension (height or width) of large images and the dimension of regular images.  \n  \n```  \nAFX_IMPORT_DATA static double m_dblLargeImageRatio;  \n```  \n  \n### Remarks  \n The default ratio is 2. You can change this value to make large toolbar images larger or smaller.  \n  \n The framework uses this data member when you do not specify a set of large images. For example, if you provide only the set of small images with size 16x16 and want the large images to have the size 24x24, set this data member to 1.5.  \n  \n##  <a name=\"cmfctoolbar__nextmenu\"></a>  CMFCToolBar::NextMenu  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL NextMenu();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbar__onbeforeremovebutton\"></a>  CMFCToolBar::OnBeforeRemoveButton  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL OnBeforeRemoveButton(\n    CMFCToolBarButton* pButton,  \n    DROPEFFECT dropEffect);\n```  \n  \n### Parameters  \n [in] `pButton`  \n Unused.  \n  \n [in] `dropEffect`  \n Unused.  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbar__onchangehot\"></a>  CMFCToolBar::OnChangeHot  \n Called by the framework when a user selects a button on the toolbar.  \n  \n```  \nvirtual void OnChangeHot(int iHot);\n```  \n  \n### Parameters  \n [in] `iHot`  \n Specifies the index of the toolbar button that is selected; or -1 if no toolbar button is selected.  \n  \n### Remarks  \n Override this method to process notifications that the user selected a button on a toolbar.  \n  \n##  <a name=\"cmfctoolbar__onchangevisualmanager\"></a>  CMFCToolBar::OnChangeVisualManager  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnChangeVisualManager();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbar__onfillbackground\"></a>  CMFCToolBar::OnFillBackground  \n Called by the framework from [CBasePane::DoPaint](../../mfc/reference/cbasepane-class.md#cbasepane__dopaint) to fill the toolbar background.  \n  \n```  \nvirtual void OnFillBackground(CDC* pDC);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n### Remarks  \n [CMFCToolBar::DoPaint](#cmfctoolbar__dopaint) calls this method when the background of a toolbar has been filled. The default implementation does nothing.  \n  \n Override this method to draw custom background in derived classes.  \n  \n##  <a name=\"cmfctoolbar__onglobalfontschanged\"></a>  CMFCToolBar::OnGlobalFontsChanged  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnGlobalFontsChanged();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbar__onreset\"></a>  CMFCToolBar::OnReset  \n Restores the toolbar to its original state.  \n  \n```  \nvirtual void OnReset();\n```  \n  \n### Remarks  \n Override this method to handle notification about a toolbar reset.  \n  \n The default implementation does nothing. Override `OnReset` in a class derived from [CMFCToolBar](../../mfc/reference/cmfctoolbar-class.md) when the toolbar has dummy buttons that must be replaced when the toolbar returns to its original state.  \n  \n##  <a name=\"cmfctoolbar__onsetaccdata\"></a>  CMFCToolBar::OnSetAccData  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL OnSetAccData(long lVal);\n```  \n  \n### Parameters  \n [in] `lVal`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbar__onsetdefaultbuttontext\"></a>  CMFCToolBar::OnSetDefaultButtonText  \n Restores the text of a toolbar button to its default state.  \n  \n```  \nvirtual BOOL OnSetDefaultButtonText(CMFCToolBarButton* pButton);\n```  \n  \n### Parameters  \n [in] `pButton`  \n Points to a button, whose text is being set.  \n  \n### Return Value  \n `TRUE` ifthe text was successfully restored; otherwise `FALSE`.  \n  \n### Remarks  \n Override this method to process notifications that the text of a toolbar button is being changed to its default.  \n  \n The default implementation loads the text of a button from the application resources.  \n  \n##  <a name=\"cmfctoolbar__onusertooltip\"></a>  CMFCToolBar::OnUserToolTip  \n Called by the framework when the tooltip for a button is about to be displayed.  \n  \n```  \nvirtual BOOL OnUserToolTip(\n    CMFCToolBarButton* pButton,  \n    CString& strTTText) const;\n\n \n```  \n  \n### Parameters  \n [in] `pButton`  \n Points to a toolbar button for which a tooltip is to be displayed.  \n  \n [out] `strTTText`  \n A reference to `CString` object that receives the text of the tooltip.  \n  \n### Return Value  \n `TRUE` if `strTTText` was populated with tooltip text; otherwise `FALSE`.  \n  \n### Remarks  \n The framework calls this method when the tooltip for a toolbar button is about to be displayed. If `OnUserToolTip` returns `TRUE`, the framework displays a tooltip which contains the text returned by `OnUserToolTip` in `strTTText`. Otherwise, the tooltip contains the button text.  \n  \n Override `OnUserToolTip` to customize tool tips of toolbar buttons. The default implementation calls [CMFCToolBar::OnUserToolTip](#cmfctoolbar__onusertooltip) to obtain the tooltip text.  \n  \n##  <a name=\"cmfctoolbar__prevmenu\"></a>  CMFCToolBar::PrevMenu  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL PrevMenu();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbar__processcommand\"></a>  CMFCToolBar::ProcessCommand  \n Posts a `WM_COMMAND` message to the window that owns the toolbar.  \n  \n```  \nBOOL ProcessCommand(CMFCToolBarButton* pButton);\n```  \n  \n### Parameters  \n [in] `pButton`  \n Pointer to a button on the toolbar.  \n  \n### Return Value  \n This method should always return `TRUE`. MFC uses `FALSE` values internally.  \n  \n### Remarks  \n This method posts a `WM_COMMAND` message to the window that owns the toolbar by calling [CWnd::PostMessage](../../mfc/reference/cwnd-class.md#cwnd__postmessage) and passing the command ID of the specified button as the `wParam` parameter.  \n  \n Use the [ON_COMMAND](http://msdn.microsoft.com/library/f24f8bda-2cf4-49d5-aa3d-6f2e6bb003f2) macro to map the `WM_COMMAND` message to a member function.  \n  \n##  <a name=\"cmfctoolbar__removeallbuttons\"></a>  CMFCToolBar::RemoveAllButtons  \n Removes all buttons and separators from the toolbar.  \n  \n```  \nvirtual void RemoveAllButtons();\n```  \n  \n### Remarks  \n The framework calls this method when it recreates or destroys a toolbar.  \n  \n##  <a name=\"cmfctoolbar__removebutton\"></a>  CMFCToolBar::RemoveButton  \n Removes from the toolbar the button that has the specified index.  \n  \n```  \nvirtual BOOL RemoveButton(int iIndex);\n```  \n  \n### Parameters  \n [in] `iIndex`  \n Specifies the zero-based index of the button to remove.  \n  \n### Return Value  \n `TRUE` if the method succeeds, or `FALSE` if the specified index is invalid or the index refers to the **Customize** button.  \n  \n### Remarks  \n This method updates additional toolbar attributes that are affected by the removal of the button. For example, this method removes nonessential separators from the toolbar and rebuilds the table of shortcut keys.  \n  \n For more information about the **Customize** button, see [CMFCToolBar::EnableCustomizeButton](#cmfctoolbar__enablecustomizebutton).  \n  \n##  <a name=\"cmfctoolbar__removestatefromregistry\"></a>  CMFCToolBar::RemoveStateFromRegistry  \n Deletes the state information for the toolbar from the Windows registry.  \n  \n```  \nvirtual BOOL RemoveStateFromRegistry(\n    LPCTSTR lpszProfileName=NULL,  \n    int nIndex=-1,  \n    UINT uiID=(UINT)-1);\n```  \n  \n### Parameters  \n [in] `lpszProfileName`  \n Specifies the registry key where the state information is located.  \n  \n [in] `nIndex`  \n The control ID of the toolbar.  \n  \n [in] `uiID`  \n The resource ID of the toolbar. If this parameter is -1, this method uses the [CWnd::GetDlgCtrlID](../../mfc/reference/cwnd-class.md#cwnd__getdlgctrlid) method to retrieve the resource ID.  \n  \n### Return Value  \n Nonzero if the method succeeds; otherwise 0.  \n  \n### Remarks  \n The framework calls this method when it deletes a user-defined toolbar.  \n  \n Override this method if you store additional state information in the Windows registry.  \n  \n##  <a name=\"cmfctoolbar__replacebutton\"></a>  CMFCToolBar::ReplaceButton  \n Replaces a toolbar button with another toolbar button.  \n  \n```  \nint ReplaceButton(\n    UINT uiCmd,  \n    const CMFCToolBarButton& button,  \n    BOOL bAll=FALSE);\n```  \n  \n### Parameters  \n [in] `uiCmd`  \n The command ID of the button to replace.  \n  \n [in] `button`  \n A reference to the `CMFCToolBarButton` to insert.  \n  \n [in] `bAll`  \n A Boolean value that specifies whether to replace all buttons that have the command ID specified by `uiCmd`. If this parameter is `TRUE`, all buttons that have the specified command ID are replaced. Otherwise, the first button is replaced.  \n  \n### Return Value  \n The number of buttons that are replaced. This method returns 0 if a button with the specified command ID does not exist on the toolbar.  \n  \n### Remarks  \n Call this method when you want to add toolbar buttons that cannot be loaded from resources. You can create a placeholder button at design-time and replace that button with a custom button when you initialize the toolbar. See the VisualStudioDemo sample for an example that uses this method.  \n  \n### Example  \n The following example demonstrates how to use the `ReplaceButton` method in the `CMFCToolBar` class. This code snippet is part of the [IE Demo sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_IEDemo#6](../../mfc/reference/codesnippet/cpp/cmfctoolbar-class_1.h)]  \n[!code-cpp[NVC_MFC_IEDemo#10](../../mfc/reference/codesnippet/cpp/cmfctoolbar-class_5.cpp)]  \n  \n##  <a name=\"cmfctoolbar__resetall\"></a>  CMFCToolBar::ResetAll  \n Restores all toolbars to their original states.  \n  \n```  \nstatic void __stdcall ResetAll();\n```  \n  \n### Remarks  \n This method calls the [CMFCToolBar::RestoreOriginalState](#cmfctoolbar__restoreoriginalstate) method on each toolbar in the application that can be restored. It uses the [CMFCToolBar::CanBeRestored](#cmfctoolbar__canberestored) method to determine whether a toolbar can be restored.  \n  \n##  <a name=\"cmfctoolbar__resetallimages\"></a>  CMFCToolBar::ResetAllImages  \n Clears all toolbar image collections in the application.  \n  \n```  \nstatic void __stdcall ResetAllImages();\n```  \n  \n### Remarks  \n This method clears the image collections that are initialized by the [CMFCToolBar::LoadToolBar](#cmfctoolbar__loadtoolbar) and [CMFCToolBar::LoadBitmap](#cmfctoolbar__loadbitmap) methods.  \n  \n##  <a name=\"cmfctoolbar__resetimages\"></a>  CMFCToolBar::ResetImages  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void ResetImages();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbar__restorefocus\"></a>  CMFCToolBar::RestoreFocus  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void RestoreFocus();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbar__restoreoriginalstate\"></a>  CMFCToolBar::RestoreOriginalState  \n Restores the original state of a toolbar.  \n  \n```  \nvirtual BOOL RestoreOriginalState();\n```  \n  \n### Return Value  \n `TRUE` if the method succeeds, or `FALSE` if the method fails or the toolbar is user-defined.  \n  \n### Remarks  \n This method loads the toolbar from the resource file by using the [CMFCToolBar::LoadToolBar](#cmfctoolbar__loadtoolbar) method.  \n  \n The framework calls this method when the user chooses the **Reset All** button on the **Toolbars** page of a customization dialog box.  \n  \n##  <a name=\"cmfctoolbar__saveparameters\"></a>  CMFCToolBar::SaveParameters  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nstatic BOOL __stdcall SaveParameters(LPCTSTR lpszProfileName = NULL);\n```  \n  \n### Parameters  \n [in] `lpszProfileName`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbar__savestate\"></a>  CMFCToolBar::SaveState  \n Saves the state information for the toolbar in the Windows registry.  \n  \n```  \nvirtual BOOL SaveState(\n    LPCTSTR lpszProfileName=NULL,  \n    int nIndex=-1,  \n    UINT uiID=(UINT)-1);\n```  \n  \n### Parameters  \n [in] `lpszProfileName`  \n Specifies the relative path of the Windows registry key.  \n  \n [in] `nIndex`  \n The control ID of the toolbar.  \n  \n [in] `uiID`  \n The resource ID of the toolbar.  \n  \n### Return Value  \n Nonzero if the method succeeds; otherwise 0.  \n  \n### Remarks  \n The framework calls this method when it saves the application state to the registry. For more information, see [CWinAppEx::SaveState](../../mfc/reference/cwinappex-class.md#cwinappex__savestate).  \n  \n##  <a name=\"cmfctoolbar__setbasiccommands\"></a>  CMFCToolBar::SetBasicCommands  \n Sets the list of commands that are always displayed when a user opens a menu.  \n  \n```  \nstatic void __stdcall SetBasicCommands(\n    CList<UINT,UINT>& lstCommands);\n```  \n  \n### Parameters  \n [in] `lstCommands`  \n A reference to a `CList` object that contains a collection of commands.  \n  \n### Remarks  \n A basic command is always displayed when the menu is opened. This method is meaningful when the user chooses to view recently used commands.  \n  \n Use the [CMFCToolBar::AddBasicCommand](#cmfctoolbar__addbasiccommand) method to add a command to the list of basic commands. Use the [CMFCToolBar::GetBasicCommands](#cmfctoolbar__getbasiccommands) method to retrieve the list of basic commands that is used by your application.  \n  \n See the Explorer sample for an example that uses this method.  \n  \n##  <a name=\"cmfctoolbar__setbuttoninfo\"></a>  CMFCToolBar::SetButtonInfo  \n Sets the command ID, style, and image ID of a toolbar button.  \n  \n```  \nvoid SetButtonInfo(\n    int nIndex,  \n    UINT nID,  \n    UINT nStyle,  \n    int iImage);\n```  \n  \n### Parameters  \n [in] `nIndex`  \n The zero-based index of the button whose properties are set.  \n  \n [in] `nID`  \n The command ID of the button.  \n  \n [in] `nStyle`  \n The style of the button. See [ToolBar Control Styles](../../mfc/reference/toolbar-control-styles.md) for the list of available toolbar button styles.  \n  \n [in] `iImage`  \n The zero-based image index of the button (that is, the index in the collection of toolbar images).  \n  \n### Remarks  \n Call this method to set the properties of a toolbar button.  \n  \n In Debug builds, this method generates an assertion failure if the index that is specified by `nIndex` is invalid.  \n  \n Call the [CMFCToolBar::SetButtonStyle](#cmfctoolbar__setbuttonstyle) method to set only the style of the button.  \n  \n##  <a name=\"cmfctoolbar__setbuttons\"></a>  CMFCToolBar::SetButtons  \n Sets the buttons for the toolbar.  \n  \n```  \nvirtual BOOL SetButtons(\n    const UINT* lpIDArray,  \n    int nIDCount,  \n    BOOL bRemapImages=TRUE);\n```  \n  \n### Parameters  \n [in] `lpIDArray`  \n A pointer to the array of command IDs of the buttons to insert.  \n  \n [in] `nIDCount`  \n The number of items in `lpIDArray`.  \n  \n [in] `bRemapImages`  \n A Boolean value that specifies whether to associate the existing button images with the inserted buttons. If this parameter is `TRUE`, the images are remapped.  \n  \n### Return Value  \n Nonzero if the method succeeds; otherwise 0.  \n  \n### Remarks  \n Call this method to remove existing buttons from a toolbar and insert a collection of new buttons.  \n  \n This method adds the **Customize** button to the toolbar and sends the `AFX_WM_RESETTOOLBAR` message to the parent window of the toolbar. For more information about the **Customize** button, see [CMFCToolBar::EnableCustomizeButton](#cmfctoolbar__enablecustomizebutton).  \n  \n##  <a name=\"cmfctoolbar__setbuttonstyle\"></a>  CMFCToolBar::SetButtonStyle  \n Sets the style of the toolbar button at the given index.  \n  \n```  \nvirtual void SetButtonStyle(\n    int nIndex,  \n    UINT nStyle);\n```  \n  \n### Parameters  \n [in] `nIndex`  \n The zero-based index of the toolbar button whose style is to be set.  \n  \n [in] `nStyle`  \n The style of the button. See [ToolBar Control Styles](../../mfc/reference/toolbar-control-styles.md) for the list of available toolbar button styles.  \n  \n### Remarks  \n This method removes the `TBBS_PRESSED` style if `nStyle` is `TBBS_DISABLED` because the user cannot click a disabled button.  \n  \n##  <a name=\"cmfctoolbar__setbuttontext\"></a>  CMFCToolBar::SetButtonText  \n Sets the text label of a toolbar button.  \n  \n```  \nBOOL SetButtonText(\n    int nIndex,  \n    LPCTSTR lpszText);\n```  \n  \n### Parameters  \n [in] `nIndex`  \n The index of the toolbar button.  \n  \n [in] `lpszText`  \n The text label of the toolbar button. Must be non- `NULL`.  \n  \n### Return Value  \n `TRUE` if the method succeeds; otherwise `FALSE`.  \n  \n### Remarks  \n This method returns `FALSE` if the provided index does not refer to a valid toolbar button.  \n  \n##  <a name=\"cmfctoolbar__setcommandusageoptions\"></a>  CMFCToolBar::SetCommandUsageOptions  \n Specifies when rarely used commands do not appear in the menu of the application.  \n  \n```  \nstatic BOOL SetCommandUsageOptions(\n    UINT nStartCount,  \n    UINT nMinUsagePercentage=5);\n```  \n  \n### Parameters  \n [in] `nStartCount`  \n Specifies the number of times that commands must be executed before the framework shows only the basic and recently-used commands.  \n  \n [in] `nMinUsagePercentage`  \n The percentage of times that a command must be executed to be considered a recently-used command.  \n  \n### Return Value  \n `FALSE` if `nMinUsagePercentage` is equal to or larger than 100; otherwise `TRUE`.  \n  \n### Remarks  \n Call this method to customize the algorithm that the framework uses to determine how basic and recently used menu items appear. For more information about basic commands, see [CMFCToolBar::AddBasicCommand](#cmfctoolbar__addbasiccommand).  \n  \n This class uses the `CMFCCmdUsageCount` class to track the usage count of commands. For more information about this class, see [CMFCCmdUsageCount Class](../../mfc/reference/cmfccmdusagecount-class.md).  \n  \n##  <a name=\"cmfctoolbar__setcustomizemode\"></a>  CMFCToolBar::SetCustomizeMode  \n Enables or disables customization mode for all toolbars in the application.  \n  \n```  \nstatic BOOL __stdcall SetCustomizeMode(BOOL bSet=TRUE);\n```  \n  \n### Parameters  \n [in] `bSet`  \n A Boolean value that specifies whether to enable or disable customization mode. Set this parameter to `TRUE` to enable customization mode or `FALSE` to disable it.  \n  \n### Return Value  \n `TRUE` if calling this method changes the customization mode; otherwise `FALSE`.  \n  \n### Remarks  \n This method adjusts the layout of and redraws each toolbar in the application. Call the [CMFCToolBar::IsCustomizeMode](#cmfctoolbar__iscustomizemode) method to determine whether the application is in customization mode,  \n  \n##  <a name=\"cmfctoolbar__setgraydisabledbuttons\"></a>  CMFCToolBar::SetGrayDisabledButtons  \n Specifies whether unavailable buttons on the toolbar are dimmed, or whether button-unavailable images are used.  \n  \n```  \nvoid SetGrayDisabledButtons(BOOL bGrayDisabledButtons);\n```  \n  \n### Parameters  \n [in] `bGrayDisabledButtons`  \n A Boolean value that specifies how to display unavailable buttons. If this parameter is `TRUE`, the framework dims the buttons. Otherwise, the framework uses the collection of button-unavailable images.  \n  \n### Remarks  \n By default, unavailable buttons are dimmed.  \n  \n##  <a name=\"cmfctoolbar__setheight\"></a>  CMFCToolBar::SetHeight  \n Sets the height of the toolbar.  \n  \n```  \nvoid SetHeight(int cyHeight);\n```  \n  \n### Parameters  \n [in] `cyHeight`  \n The height of the toolbar, in pixels.  \n  \n### Remarks  \n This method redraws the toolbar after it sets the height.  \n  \n##  <a name=\"cmfctoolbar__sethelpmode\"></a>  CMFCToolBar::SetHelpMode  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nstatic void __stdcall SetHelpMode(BOOL bOn = TRUE);\n```  \n  \n### Parameters  \n [in] `bOn`  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbar__sethot\"></a>  CMFCToolBar::SetHot  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL SetHot(CMFCToolBarButton* pMenuButton);\n```  \n  \n### Parameters  \n [in] `pMenuButton`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbar__sethotborder\"></a>  CMFCToolBar::SetHotBorder  \n Specifies whether toolbar buttons are hot-tracked.  \n  \n```  \nvoid SetHotBorder(BOOL bShowHotBorder);\n```  \n  \n### Parameters  \n [in] `bShowHotBorder`  \n A Boolean value that specifies whether to hot-track toolbar buttons. If this parameter is `TRUE`, the toolbar hot-tracks its buttons. Otherwise, the toolbar does not hot-track its buttons.  \n  \n### Remarks  \n If a button is hot-tracked, the framework highlights the button when the mouse moves across it. By default, each toolbar hot-tracks its buttons.  \n  \n Call the [CMFCToolBar::GetHotBorder](#cmfctoolbar__gethotborder) method to determine whether the toolbar hot-tracks its buttons.  \n  \n##  <a name=\"cmfctoolbar__sethottextcolor\"></a>  CMFCToolBar::SetHotTextColor  \n Sets the text color for hot toolbar buttons.  \n  \n```  \nstatic void SetHotTextColor(COLORREF clrText);\n```  \n  \n### Parameters  \n [in] `clrText`  \n Specifies the text color for toolbar buttons that are hot-tracked.  \n  \n### Remarks  \n For more information about hot-tracked toolbar buttons, see [CMFCToolBar::GetHotBorder](#cmfctoolbar__gethotborder) and [CMFCToolBar::SetHotBorder](#cmfctoolbar__sethotborder).  \n  \n##  <a name=\"cmfctoolbar__setignoresettext\"></a>  CMFCToolBar::SetIgnoreSetText  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetIgnoreSetText(BOOL bValue);\n```  \n  \n### Parameters  \n [in] `bValue`  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbar__setlargeicons\"></a>  CMFCToolBar::SetLargeIcons  \n Specifies whether toolbar buttons display large icons.  \n  \n```  \nstatic void SetLargeIcons(BOOL bLargeIcons=TRUE);\n```  \n  \n### Parameters  \n [in] `bLargeIcons`  \n A Boolean value that specifies which icons to use. If this parameter is `TRUE`, the framework displays large icons. Otherwise, the framework displays regular icons.  \n  \n### Remarks  \n The framework calls this method when the user changes the state of the **Large Icons** check box in the **Options** tab of the **Customize** dialog box. This method resizes all toolbars in the application.  \n  \n By default, the framework displays regular icons.  \n  \n For more information about the **Customize** dialog box, see [CMFCToolBarsCustomizeDialog Class](../../mfc/reference/cmfctoolbarscustomizedialog-class.md).  \n  \n##  <a name=\"cmfctoolbar__setlockedsizes\"></a>  CMFCToolBar::SetLockedSizes  \n Sets the sizes of locked buttons and locked images on the toolbar.  \n  \n```  \nvoid SetLockedSizes(\n    SIZE sizeButton,  \n    SIZE sizeImage,  \n    BOOL bDontScale = FALSE);\n```  \n  \n### Parameters  \n [in] `sizeButton`  \n Specifies the size of locked toolbar buttons.  \n  \n [in] `sizeImage`  \n Specifies the size of locked toolbar images.  \n  \n `bDontScale`  \n Specifies whether to scale or not locked toolbar images in high DPI mode.  \n  \n### Remarks  \n The default size of locked buttons is 23x22 pixels. The default size of locked images is 16x15 pixels.  \n  \n Call the [CMFCToolBar::GetLockedImageSize](#cmfctoolbar__getlockedimagesize) method to retrieve the size of locked images. Call the [CMFCToolBar::GetButtonSize](#cmfctoolbar__getbuttonsize) method to retrieve the size of locked toolbar buttons.  \n  \n##  <a name=\"cmfctoolbar__setmaskmode\"></a>  CMFCToolBar::SetMaskMode  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetMaskMode(BOOL bMasked);\n```  \n  \n### Parameters  \n [in] `bMasked`  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbar__setmenusizes\"></a>  CMFCToolBar::SetMenuSizes  \n Sets the size of toolbar menu buttons and their images.  \n  \n```  \nstatic void __stdcall SetMenuSizes(\n    SIZE sizeButton,  \n    SIZE sizeImage);\n```  \n  \n### Parameters  \n [in] `sizeButton`  \n Specifies the size of toolbar buttons, in pixels.  \n  \n [in] `sizeImage`  \n Specifies the size of toolbar images, in pixels.  \n  \n### Remarks  \n By default, menu buttons and their images have an undefined size.  \n  \n Call the [CMFCToolBar::GetMenuButtonSize](#cmfctoolbar__getmenubuttonsize) method to determine the size of menu buttons and the [CMFCToolBar::GetMenuImageSize](#cmfctoolbar__getmenuimagesize) method to determine the size of menu button images.  \n  \n See the IEDemo and MSMoneyDemo samples for examples that use this method.  \n  \n##  <a name=\"cmfctoolbar__setnonpermittedcommands\"></a>  CMFCToolBar::SetNonPermittedCommands  \n Sets the list of commands that cannot be executed by the user.  \n  \n```  \nstatic void SetNonPermittedCommands(\n    CList<UINT,UINT>& lstCommands);\n```  \n  \n### Parameters  \n [in] `lstCommands`  \n A reference to a `CList` object that contains the commands that cannot be executed by the user.  \n  \n### Remarks  \n Call this method to prevent the user from selecting certain commands. For example, you might want to prevent the user from selecting certain commands for security reasons. See the MDITabsDemo and MenuSubSet samples for examples that use this method.  \n  \n This method clears the previous list of non-permitted commands. By default, the list of non-permitted commands is empty.  \n  \n##  <a name=\"cmfctoolbar__setonerowwithsibling\"></a>  CMFCToolBar::SetOneRowWithSibling  \n Positions the toolbar and its sibling on the same row.  \n  \n```  \nvoid SetOneRowWithSibling();\n```  \n  \n### Remarks  \n The framework calls this method when the user clicks the **Show Buttons on One Row** button.  \n  \n Call the [CMFCToolBar::SetSiblingToolBar](#cmfctoolbar__setsiblingtoolbar) method to enable the **Show Buttons on One Row** or **Show Buttons on Two Rows** buttons. If you call [CMFCToolBar::SetSiblingToolBar](#cmfctoolbar__setsiblingtoolbar) for this toolbar, the sibling toolbar is moved to the row of this toolbar. Otherwise, this toolbar is moved to the row of the sibling.  \n  \n The framework calls the [CMFCToolBar::SetTwoRowsWithSibling](#cmfctoolbar__settworowswithsibling) method when the user clicks the **Show Buttons on Two Rows** button.  \n  \n##  <a name=\"cmfctoolbar__setorigbuttons\"></a>  CMFCToolBar::SetOrigButtons  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetOrigButtons(const CObList& lstOrigButtons);\n```  \n  \n### Parameters  \n [in] `lstOrigButtons`  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbar__setpermament\"></a>  CMFCToolBar::SetPermament  \n Specifies whether a user can close the toolbar.  \n  \n```  \nvoid SetPermament(BOOL bPermament=TRUE);\n```  \n  \n### Parameters  \n [in] `bPermament`  \n A Boolean value that specifies whether a user can close the toolbar. If this parameter is `TRUE`, a user cannot close the toolbar. Otherwise, a user can close the toolbar.  \n  \n### Remarks  \n By default, a user can close each toolbar.  \n  \n Call the [CMFCToolBar::CanBeClosed](#cmfctoolbar__canbeclosed) method to determine whether a user can close the toolbar.  \n  \n##  <a name=\"cmfctoolbar__setroutecommandsviaframe\"></a>  CMFCToolBar::SetRouteCommandsViaFrame  \n Specifies whether the parent frame or the owner sends commands to the toolbar.  \n  \n```  \nvoid SetRouteCommandsViaFrame(BOOL bValue);\n```  \n  \n### Parameters  \n [in] `bValue`  \n If this parameter is `TRUE`, the parent frame sends commands to the toolbar. Otherwise, the owner sends commands to the toolbar.  \n  \n### Remarks  \n By default, the parent frame sends commands to the toolbar. Call the [CMFCToolBar::GetRouteCommandsViaFrame](#cmfctoolbar__getroutecommandsviaframe) method to determine whether the parent frame or the owner sends commands to the toolbar.  \n  \n##  <a name=\"cmfctoolbar__setshowtooltips\"></a>  CMFCToolBar::SetShowTooltips  \n Specifies whether the framework displays tool tips.  \n  \n```  \nstatic void SetShowTooltips(BOOL bValue);\n```  \n  \n### Parameters  \n [in] `bValue`  \n If this parameter is `TRUE`, the framework shows tool tips. Otherwise, the framework hides tool tips.  \n  \n### Remarks  \n By default, the framework shows tool tips.  \n  \n Call the [CMFCToolBar::GetShowTooltips](#cmfctoolbar__getshowtooltips) method to determine whether the framework shows tool tips.  \n  \n##  <a name=\"cmfctoolbar__setsiblingtoolbar\"></a>  CMFCToolBar::SetSiblingToolBar  \n Specifies the sibling of the toolbar.  \n  \n```  \nvoid SetSiblingToolBar(CMFCToolBar* pBrotherToolbar);\n```  \n  \n### Parameters  \n [in] `pBrotherToolbar`  \n A pointer to the sibling toolbar.  \n  \n### Remarks  \n This method enables the **Show Buttons on One Row** or **Show Buttons on Two Rows** buttons that are shown when the user displays the **Customize** pop-up menu. Call this method when you want to enable the user to specify whether related toolbars appear on the same row or on different rows.  \n  \n Call this method after you enable the **Customize** button that appears on the toolbar. To enable the **Customize** button, call the [CMFCToolBar::EnableCustomizeButton](#cmfctoolbar__enablecustomizebutton) method.  \n  \n To retrieve the sibling of a toolbar, call [CMFCToolBar::GetSiblingToolBar](#cmfctoolbar__getsiblingtoolbar).  \n  \n##  <a name=\"cmfctoolbar__setsizes\"></a>  CMFCToolBar::SetSizes  \n Specifies the sizes of buttons and images on all toolbars.  \n  \n```  \nstatic void __stdcall SetSizes(\n    SIZE sizeButton,  \n    SIZE sizeImage);\n```  \n  \n### Parameters  \n [in] `sizeButton`  \n The size of toolbar buttons, in pixels.  \n  \n [in] `sizeImage`  \n The size of toolbar button images, in pixels.  \n  \n### Remarks  \n The default size of toolbar buttons is 23x22 pixels. The default size of toolbar button images is 16x15 pixels.  \n  \n Call the [CMFCToolBar::GetImageSize](#cmfctoolbar__getimagesize) method to retrieve the size of toolbar button images. Call the [CMFCToolBar::GetButtonSize](#cmfctoolbar__getbuttonsize) method to retrieve the size of toolbar buttons.  \n  \n##  <a name=\"cmfctoolbar__settoolbarbtntext\"></a>  CMFCToolBar::SetToolBarBtnText  \n Specifies properties of a button on the toolbar.  \n  \n```  \nvoid SetToolBarBtnText(\n    UINT nBtnIndex,  \n    LPCTSTR szText=NULL,  \n    BOOL bShowText=TRUE,  \n    BOOL bShowImage=TRUE);\n```  \n  \n### Parameters  \n [in] `nBtnIndex`  \n The zero-based index of the toolbar button in the list of toolbar buttons.  \n  \n [in] `szText`  \n Specifies the text label of the toolbar button.  \n  \n [in] `bShowText`  \n If this parameter is `TRUE`, the framework shows the text label. Otherwise, the framework hides the text label.  \n  \n [in] `bShowImage`  \n If this parameter is `TRUE`, the framework shows the toolbar button image. Otherwise, the framework hides the toolbar button image.  \n  \n### Remarks  \n By default, the framework shows the images of toolbar buttons but does not show the text label of toolbar buttons.  \n  \n In Debug builds, this method generates an assertion failure if `nBtnIndex` does not refer to a valid toolbar button or the toolbar button is a separator.  \n  \n##  <a name=\"cmfctoolbar__settworowswithsibling\"></a>  CMFCToolBar::SetTwoRowsWithSibling  \n Positions the toolbar and its sibling on separate rows.  \n  \n```  \nvoid SetTwoRowsWithSibling();\n```  \n  \n### Remarks  \n The framework calls this method when the user clicks the **Show Buttons on Two Rows** button.  \n  \n Call the [CMFCToolBar::SetSiblingToolBar](#cmfctoolbar__setsiblingtoolbar) method to enable the **Show Buttons on One Row** or **Show Buttons on Two Rows** buttons. If you call [CMFCToolBar::SetSiblingToolBar](#cmfctoolbar__setsiblingtoolbar) for this toolbar, the sibling toolbar is moved to a separate row. Otherwise, this toolbar is moved to a separate row.  \n  \n The framework calls the [CMFCToolBar::SetOneRowWithSibling](#cmfctoolbar__setonerowwithsibling) method when the user clicks the **Show Buttons on One Row** button.  \n  \n##  <a name=\"cmfctoolbar__setuserimages\"></a>  CMFCToolBar::SetUserImages  \n Sets the collection of user-defined images in the application.  \n  \n```  \nstatic BOOL SetUserImages(CMFCToolBarImages* pUserImages);\n```  \n  \n### Parameters  \n [in] `pUserImages`  \n A pointer to the collection of user-defined images.  \n  \n### Return Value  \n Nonzero if the method succeeds; otherwise 0 if the specified `CMFCToolBarImages` object is not valid or has an image size that differs from the default image size of the toolbar.  \n  \n### Remarks  \n The framework uses user-defined images to draw toolbar buttons that are customized by the user. The image list specified by `pUserImages` is shared among all toolbars in the application.  \n  \n This method generates an assertion failure in Debug builds if the specified `CMFCToolBarImages` object is not valid or has an image size that differs from the default image size of the toolbar.  \n  \n The OutlookDemo, ToolTipDemo, and VisualStudioDemo samples use this method to set the global collection of user-defined images. They load the file that is named UserImages.bmp, which is located in the working directory of the application.  \n  \n Call the [CMFCToolBar::GetUserImages](#cmfctoolbar__getuserimages) method to retrieve the collection of user-defined images in the application.  \n  \n##  <a name=\"cmfctoolbar__stretchpane\"></a>  CMFCToolBar::StretchPane  \n Stretches the toolbar vertically or horizontally, and repositions the buttons if necessary.  \n  \n```  \nvirtual CSize StretchPane(\n    int nLength,  \n    BOOL bVert);\n```  \n  \n### Parameters  \n [in] `nLength`  \n The amount, in pixels, by which to stretch the pane.  \n  \n [in] `bVert`  \n If `TRUE`, stretches the pane vertically. If `FALSE`, stretches the pane horizontally.  \n  \n### Return Value  \n A `CSize` object that specifies the size of the toolbar client area.  \n  \n### Remarks  \n This method calls [CMFCToolBar::WrapToolBar](#cmfctoolbar__wraptoolbar) to reposition the buttons within the stretched toolbar.  \n  \n The return value is determined by calling [CMFCToolBar::CalcSize](#cmfctoolbar__calcsize).  \n  \n##  <a name=\"cmfctoolbar__translatechar\"></a>  CMFCToolBar::TranslateChar  \n Executes a button command if the specified key code corresponds to a valid keyboard shortcut.  \n  \n```  \nvirtual BOOL TranslateChar(UINT nChar);\n```  \n  \n### Parameters  \n [in] `nChar`  \n Specifies a virtual key code. For a list of standard virtual key codes, see Winuser.h  \n  \n### Return Value  \n `FALSE` if the specified key code is either unprintable or does not correspond to a valid keyboard shortcut; `TRUE` if the specified key code corresponds to a drop-down menu option; otherwise, the return value from [CMFCToolBar::ProcessCommand](#cmfctoolbar__processcommand).  \n  \n### Remarks  \n The framework calls this method when a key is pressed together with the Alt key.  \n  \n##  <a name=\"cmfctoolbar__updatebutton\"></a>  CMFCToolBar::UpdateButton  \n Updates the state of the specified button.  \n  \n```  \nvoid UpdateButton(int nIndex);\n```  \n  \n### Parameters  \n [in] `nIndex`  \n Specifies the zero-based index of the button to update.  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbar__wraptoolbar\"></a>  CMFCToolBar::WrapToolBar  \n Repositions toolbar buttons within the given dimensions.  \n  \n```  \nint WrapToolBar(\n    int nWidth,  \n    int nHeight = 32767,  \n    CDC* pDC = NULL,  \n    int nColumnWidth = -1,  \n    int nRowHeight = -1);\n```  \n  \n### Parameters  \n [in] `nWidth`  \n Maximum width of the toolbar.  \n  \n [in] `nHeight`  \n Maximum height of the toolbar. Not used if the toolbar is floating.  \n  \n [in] `pDC`  \n Pointer to a device context. If NULL, the device context for the toolbar is used.  \n  \n [in] `nColumnWidth`  \n Button width. If -1, the current width is used.  \n  \n [in] m `nRowHeight`  \n Button height. If -1, the current height is used.  \n  \n### Return Value  \n The number of rows of buttons on the toolbar.  \n  \n### Remarks  \n This method repositions buttons within the toolbar, wrapping buttons to additional rows if necessary.  \n  \n##  <a name=\"cmfctoolbar__m_bdontscaleimages\"></a>  CMFCToolBar::m_bDontScaleImages  \n Specifies whether or not to scale toolbar images in high DPI mode.  \n  \n```  \nAFX_IMPORT_DATA static BOOL m_bDontScaleImages;  \n```  \n  \n### Remarks  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CMFCMenuBar Class](../../mfc/reference/cmfcmenubar-class.md)   \n [CMFCPopupMenuBar Class](../../mfc/reference/cmfcpopupmenubar-class.md)   \n [CMFCDropDownToolBar Class](../../mfc/reference/cmfcdropdowntoolbar-class.md)   \n [Walkthrough: Putting Controls On Toolbars](../../mfc/walkthrough-putting-controls-on-toolbars.md)\n\n\n\n"}