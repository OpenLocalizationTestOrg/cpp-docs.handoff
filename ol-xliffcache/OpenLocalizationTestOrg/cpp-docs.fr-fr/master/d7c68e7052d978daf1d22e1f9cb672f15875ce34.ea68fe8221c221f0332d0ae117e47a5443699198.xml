{"nodes":[{"pos":[12,39],"content":"_set_fmode | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_set_fmode | Microsoft Docs","pos":[0,27]}]},{"content":"_set_fmode","pos":[1044,1054]},{"content":"Sets the default file translation mode for file I/O operations.","pos":[1055,1118]},{"content":"Syntax","pos":[1127,1133]},{"content":"Parameters","pos":[1202,1212]},{"content":"[in]","pos":[1216,1220]},{"content":"The file translation mode desired: <ph id=\"ph1\">`_O_TEXT`</ph> or <ph id=\"ph2\">`_O_BINARY`</ph>.","pos":[1231,1291],"source":" The file translation mode desired: `_O_TEXT` or `_O_BINARY`."},{"content":"Return Value","pos":[1300,1312]},{"content":"Returns zero if successful, an error code on failure.","pos":[1316,1369]},{"content":"If <ph id=\"ph1\">`mode`</ph> is not <ph id=\"ph2\">`_O_TEXT`</ph> or <ph id=\"ph3\">`_O_BINARY`</ph> or <ph id=\"ph4\">`_O_WTEXT`</ph>, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1370,1557],"source":" If `mode` is not `_O_TEXT` or `_O_BINARY` or `_O_WTEXT`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, this function sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and returns <ph id=\"ph3\">`EINVAL`</ph>.","pos":[1558,1655],"source":" If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns `EINVAL`."},{"content":"Remarks","pos":[1664,1671]},{"content":"The function sets the <bpt id=\"p1\">[</bpt>_fmode<ept id=\"p1\">](../../c-runtime-library/fmode.md)</ept> global variable.","pos":[1675,1756],"source":"The function sets the [_fmode](../../c-runtime-library/fmode.md) global variable."},{"content":"This variable specifies the default file translation mode for the file I/O operations <ph id=\"ph1\">`_open`</ph> and <ph id=\"ph2\">`_pipe`</ph>.","pos":[1757,1863],"source":" This variable specifies the default file translation mode for the file I/O operations `_open` and `_pipe`."},{"content":"and <ph id=\"ph1\">`_O_BINARY`</ph> are defined in Fcntl.h.","pos":[1880,1919],"source":" and `_O_BINARY` are defined in Fcntl.h."},{"content":"is defined in Errno.h.","pos":[1929,1951]},{"content":"Requirements","pos":[1960,1972]},{"content":"Routine","pos":[1979,1986]},{"content":"Required header","pos":[1987,2002]},{"content":"Optional header","pos":[2003,2018]},{"content":"stdlib.h&gt;","pos":[2100,2109],"source":"stdlib.h>"},{"content":"fcntl.h&gt;, <ph id=\"ph1\">\\&lt;</ph>errno.h&gt;","pos":[2112,2132],"source":"fcntl.h>, \\<errno.h>"},{"pos":[2140,2258],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[2267,2274]},{"content":"See Also","pos":[3772,3780]},{"content":"_fmode","pos":[3785,3791]},{"content":"_get_fmode","pos":[3832,3842]},{"content":"_setmode","pos":[3897,3905]},{"content":"Text and Binary Mode File I/O","pos":[3958,3987]}],"content":"---\ntitle: \"_set_fmode | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_set_fmode\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-stdio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_set_fmode\"\n  - \"set_fmode\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"file translation [C++], default mode\"\n  - \"_set_fmode function\"\n  - \"file translation [C++], setting mode\"\n  - \"set_fmode function\"\nms.assetid: f80eb9c7-733b-4652-a9bc-6b3790a35f12\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _set_fmode\nSets the default file translation mode for file I/O operations.  \n  \n## Syntax  \n  \n```  \nerrno_t _set_fmode(   \n   int mode   \n);  \n```  \n  \n#### Parameters  \n [in] `mode`  \n The file translation mode desired: `_O_TEXT` or `_O_BINARY`.  \n  \n## Return Value  \n Returns zero if successful, an error code on failure. If `mode` is not `_O_TEXT` or `_O_BINARY` or `_O_WTEXT`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns `EINVAL`.  \n  \n## Remarks  \n The function sets the [_fmode](../../c-runtime-library/fmode.md) global variable. This variable specifies the default file translation mode for the file I/O operations `_open` and `_pipe`.  \n  \n `_O_TEXT` and `_O_BINARY` are defined in Fcntl.h. `EINVAL` is defined in Errno.h.  \n  \n## Requirements  \n  \n|Routine|Required header|Optional header|  \n|-------------|---------------------|---------------------|  \n|`_set_fmode`|\\<stdlib.h>|\\<fcntl.h>, \\<errno.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_set_fmode.c  \n#include <stdlib.h>  \n#include <stdio.h>  \n#include <fcntl.h>     /* for _O_TEXT and _O_BINARY */  \n#include <errno.h>     /* for EINVAL */  \n#include <sys\\stat.h>  /* for _S_IWRITE */  \n#include <share.h>     /* for _SH_DENYNO */  \n  \nint main()  \n{  \n   int mode, fd, ret;  \n   errno_t err;  \n   int buf[12] = { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,  \n                   75, 76 };  \n   char * filename = \"fmode.out\";  \n  \n   err = _get_fmode(&mode);  \n   if (err == EINVAL)  \n   {  \n      printf( \"Invalid parameter: mode\\n\");  \n      return 1;  \n   }  \n   else  \n      printf( \"Default Mode is %s\\n\", mode == _O_TEXT ? \"text\" :  \n              \"binary\");  \n  \n   err = _set_fmode(_O_BINARY);  \n   if (err == EINVAL)  \n   {  \n      printf( \"Invalid mode.\\n\");  \n      return 1;  \n   }  \n  \n   if ( _sopen_s(&fd, filename, _O_RDWR | _O_CREAT, _SH_DENYNO, _S_IWRITE | _S_IREAD) != 0 )  \n   {  \n      printf( \"Error opening the file %s\\n\", filename);  \n      return 1;  \n   }  \n  \n   if (ret = _write(fd, buf, 12*sizeof(int)) < 12*sizeof(int))  \n   {  \n      printf( \"Problem writing to the file %s.\\n\", filename);  \n      printf( \"Number of bytes written: %d\\n\", ret);  \n   }  \n  \n   if (_close(fd) != 0)  \n   {  \n      printf(\"Error closing the file %s. Error code %d.\\n\",  \n             filename, errno);  \n   }  \n  \n   system(\"type fmode.out\");  \n}  \n```  \n  \n```Output  \nDefault Mode is binary  \nA   B   C   D   E   F   G   H   I   J   K   L     \n```  \n  \n## See Also  \n [_fmode](../../c-runtime-library/fmode.md)   \n [_get_fmode](../../c-runtime-library/reference/get-fmode.md)   \n [_setmode](../../c-runtime-library/reference/setmode.md)   \n [Text and Binary Mode File I/O](../../c-runtime-library/text-and-binary-mode-file-i-o.md)"}