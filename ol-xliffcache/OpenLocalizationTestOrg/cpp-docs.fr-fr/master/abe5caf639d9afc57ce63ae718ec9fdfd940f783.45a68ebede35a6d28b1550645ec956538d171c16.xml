{"nodes":[{"pos":[12,52],"content":"set::key_comp (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"set::key_comp (STL-CLR) | Microsoft Docs","pos":[0,40]}]},{"content":"set::key_comp (STL/CLR)","pos":[631,654]},{"content":"Copies the ordering delegate for two keys.","pos":[655,697]},{"content":"Syntax","pos":[706,712]},{"content":"Remarks","pos":[762,769]},{"content":"The member function returns the ordering delegate used to order the controlled sequence.","pos":[773,861]},{"content":"You use it to compare two keys.","pos":[862,893]},{"content":"Example","pos":[902,909]},{"content":"Requirements","pos":[2100,2112]},{"pos":[2116,2141],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/set&gt;","source":"**Header:** \\<cliext/set>"},{"pos":[2148,2169],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2178,2186]},{"content":"set (STL/CLR)","pos":[2191,2204]},{"content":"set::key_compare (STL/CLR)","pos":[2237,2263]},{"content":"set::key_type (STL/CLR)","pos":[2308,2331]}],"content":"---\ntitle: \"set::key_comp (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::set::key_comp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"key_comp member [STL/CLR]\"\nms.assetid: 245db5d0-0610-4c68-a708-9bb99e48325c\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# set::key_comp (STL/CLR)\nCopies the ordering delegate for two keys.  \n  \n## Syntax  \n  \n```  \nkey_compare^key_comp();  \n```  \n  \n## Remarks  \n The member function returns the ordering delegate used to order the controlled sequence. You use it to compare two keys.  \n  \n## Example  \n  \n```  \n// cliext_set_key_comp.cpp   \n// compile with: /clr   \n#include <cliext/set>   \n  \ntypedef cliext::set<wchar_t> Myset;   \nint main()   \n    {   \n    Myset c1;   \n    Myset::key_compare^ kcomp = c1.key_comp();   \n  \n    System::Console::WriteLine(\"compare(L'a', L'a') = {0}\",   \n        kcomp(L'a', L'a'));   \n    System::Console::WriteLine(\"compare(L'a', L'b') = {0}\",   \n        kcomp(L'a', L'b'));   \n    System::Console::WriteLine(\"compare(L'b', L'a') = {0}\",   \n        kcomp(L'b', L'a'));   \n    System::Console::WriteLine();   \n  \n// test a different ordering rule   \n    Myset c2 = cliext::greater<wchar_t>();   \n    kcomp = c2.key_comp();   \n  \n    System::Console::WriteLine(\"compare(L'a', L'a') = {0}\",   \n        kcomp(L'a', L'a'));   \n    System::Console::WriteLine(\"compare(L'a', L'b') = {0}\",   \n        kcomp(L'a', L'b'));   \n    System::Console::WriteLine(\"compare(L'b', L'a') = {0}\",   \n        kcomp(L'b', L'a'));   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \ncompare(L'a', L'a') = False  \ncompare(L'a', L'b') = True  \ncompare(L'b', L'a') = False  \n  \ncompare(L'a', L'a') = False  \ncompare(L'a', L'b') = False  \ncompare(L'b', L'a') = True  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/set>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [set (STL/CLR)](../dotnet/set-stl-clr.md)   \n [set::key_compare (STL/CLR)](../dotnet/set-key-compare-stl-clr.md)   \n [set::key_type (STL/CLR)](../dotnet/set-key-type-stl-clr.md)"}