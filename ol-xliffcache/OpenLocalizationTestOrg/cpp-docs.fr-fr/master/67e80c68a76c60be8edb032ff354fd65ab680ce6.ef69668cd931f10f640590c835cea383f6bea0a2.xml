{"nodes":[{"pos":[12,48],"content":"binder1st (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"binder1st (STL-CLR) | Microsoft Docs","pos":[0,36]}]},{"content":"binder1st (STL/CLR)","pos":[626,645]},{"content":"The template class describes a one-argument functor that, when called, returns its stored two-argument functor called with its stored first argument and the supplied second argument.","pos":[646,828]},{"content":"You use it specify a function object in terms of its stored functor.","pos":[829,897]},{"content":"Syntax","pos":[906,912]},{"content":"Parameters","pos":[1588,1598]},{"content":"Fun","pos":[1602,1605]},{"content":"The type of the stored functor.","pos":[1609,1640]},{"content":"Member Functions","pos":[1649,1665]},{"content":"Type Definition","pos":[1672,1687]},{"content":"Description","pos":[1688,1699]},{"content":"delegate_type","pos":[1748,1761]},{"content":"The type of the generic delegate.","pos":[1762,1795]},{"content":"first_argument_type","pos":[1800,1819]},{"content":"The type of the functor first argument.","pos":[1820,1859]},{"content":"result_type","pos":[1864,1875]},{"content":"The type of the functor result.","pos":[1876,1907]},{"content":"second_argument_type","pos":[1912,1932]},{"content":"The type of the functor second argument.","pos":[1933,1973]},{"content":"stored_function_type","pos":[1978,1998]},{"content":"The type of the functor.","pos":[1999,2023]},{"content":"Member","pos":[2031,2037]},{"content":"Description","pos":[2038,2049]},{"content":"binder1st","pos":[2089,2098]},{"content":"Constructs the functor.","pos":[2099,2122]},{"content":"Operator","pos":[2130,2138]},{"content":"Description","pos":[2139,2150]},{"content":"operator()","pos":[2192,2202]},{"content":"Computes the desired function.","pos":[2203,2233]},{"content":"operator delegate_type^()","pos":[2238,2263]},{"content":"Casts the functor to a delegate.","pos":[2264,2296]},{"content":"Remarks","pos":[2306,2313]},{"content":"The template class describes a one-argument functor that stores a two-argument functor and a first argument.","pos":[2317,2425]},{"content":"It defines the member operator <ph id=\"ph1\">`operator()`</ph> so that, when the object is called as a function, it returns the result of calling the stored functor with the stored first argument and the supplied second argument.","pos":[2426,2636],"source":" It defines the member operator `operator()` so that, when the object is called as a function, it returns the result of calling the stored functor with the stored first argument and the supplied second argument."},{"pos":[2643,2765],"content":"You can also pass the object as a function argument whose type is <ph id=\"ph1\">`delegate_type^`</ph> and it will be converted appropriately.","source":"You can also pass the object as a function argument whose type is `delegate_type^` and it will be converted appropriately."},{"content":"Example","pos":[2774,2781]},{"content":"Requirements","pos":[3942,3954]},{"pos":[3958,3990],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/functional&gt;","source":"**Header:** \\<cliext/functional>"},{"pos":[3997,4018],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[4027,4035]},{"content":"bind1st (STL/CLR)","pos":[4040,4057]}],"content":"---\ntitle: \"binder1st (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::binder1st\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"binder1st function [STL/CLR]\"\nms.assetid: a989c9cc-a485-45d9-bd19-519018e6974b\ncaps.latest.revision: 18\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# binder1st (STL/CLR)\nThe template class describes a one-argument functor that, when called, returns its stored two-argument functor called with its stored first argument and the supplied second argument. You use it specify a function object in terms of its stored functor.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Fun>  \n    ref class binder1st  \n    { // wrap operator()  \npublic:  \n    typedef Fun stored_function_type;  \n    typedef typename Fun::first_argument_type first_argument_type;  \n    typedef typename Fun::second_argument_type second_argument_type;  \n    typedef typename Fun:result_type result_type;  \n    typedef Microsoft::VisualC::StlClr::UnaryDelegate<  \n        second_argument_type, result_type>  \n        delegate_type;  \n  \n    binder1st(Fun% functor, first_argument_type left);  \n    binder1st(binder1st<Arg>% right);  \n  \n    result_type operator()(second_argument_type right);  \n    operator delegate_type^();  \n    };  \n```  \n  \n#### Parameters  \n Fun  \n The type of the stored functor.  \n  \n## Member Functions  \n  \n|Type Definition|Description|  \n|---------------------|-----------------|  \n|delegate_type|The type of the generic delegate.|  \n|first_argument_type|The type of the functor first argument.|  \n|result_type|The type of the functor result.|  \n|second_argument_type|The type of the functor second argument.|  \n|stored_function_type|The type of the functor.|  \n  \n|Member|Description|  \n|------------|-----------------|  \n|binder1st|Constructs the functor.|  \n  \n|Operator|Description|  \n|--------------|-----------------|  \n|operator()|Computes the desired function.|  \n|operator delegate_type^()|Casts the functor to a delegate.|  \n  \n## Remarks  \n The template class describes a one-argument functor that stores a two-argument functor and a first argument. It defines the member operator `operator()` so that, when the object is called as a function, it returns the result of calling the stored functor with the stored first argument and the supplied second argument.  \n  \n You can also pass the object as a function argument whose type is `delegate_type^` and it will be converted appropriately.  \n  \n## Example  \n  \n```  \n// cliext_binder1st.cpp   \n// compile with: /clr   \n#include <cliext/algorithm>   \n#include <cliext/functional>   \n#include <cliext/vector>   \n  \ntypedef cliext::vector<int> Myvector;   \nint main()   \n    {   \n    Myvector c1;   \n    c1.push_back(4);   \n    c1.push_back(3);   \n    Myvector c3(2, 0);   \n  \n// display initial contents \" 4 3\"   \n    for each (int elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// transform and display   \n    cliext::minus<int> sub_op;   \n    cliext::binder1st<cliext::minus<int> > subfrom3(sub_op, 3);   \n  \n    cliext::transform(c1.begin(), c1.begin() + 2, c3.begin(),   \n        subfrom3);   \n    for each (int elem in c3)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// transform and display with function   \n    cliext::transform(c1.begin(), c1.begin() + 2, c3.begin(),   \n        bind1st(sub_op, 3));   \n    for each (int elem in c3)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n4 3  \n-1 0  \n-1 0  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/functional>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [bind1st (STL/CLR)](../dotnet/bind1st-stl-clr.md)"}