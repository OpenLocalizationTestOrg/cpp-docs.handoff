{"nodes":[{"pos":[12,45],"content":"is_pointer Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"is_pointer Class | Microsoft Docs","pos":[0,33]}]},{"content":"is_pointer Class","pos":[754,770]},{"content":"Tests if type is a pointer.","pos":[771,798]},{"content":"Syntax","pos":[807,813]},{"content":"Parameters","pos":[882,892]},{"content":"The type to query.","pos":[904,922]},{"content":"Remarks","pos":[931,938]},{"content":"An instance of the type predicate holds true if the type <ph id=\"ph1\">`Ty`</ph> is a pointer to <ph id=\"ph2\">`void`</ph>, a pointer to an object, or a pointer to a function, or a <ph id=\"ph3\">`cv-qualified`</ph> form of one of them, otherwise it holds false.","pos":[942,1146],"source":"An instance of the type predicate holds true if the type `Ty` is a pointer to `void`, a pointer to an object, or a pointer to a function, or a `cv-qualified` form of one of them, otherwise it holds false."},{"content":"Note that <ph id=\"ph1\">`is_pointer`</ph> holds false if <ph id=\"ph2\">`Ty`</ph> is a pointer to member or a pointer to member function.","pos":[1147,1245],"source":" Note that `is_pointer` holds false if `Ty` is a pointer to member or a pointer to member function."},{"content":"Example","pos":[1254,1261]},{"content":"Requirements","pos":[2324,2336]},{"pos":[2340,2365],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> &lt;type_traits&gt;","source":"**Header:** <type_traits>"},{"pos":[2372,2390],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[2399,2407]},{"content":"&lt;type_traits&gt;","pos":[2412,2425],"source":"<type_traits>"},{"content":"is_member_pointer Class","pos":[2468,2491]},{"content":"is_reference Class","pos":[2546,2564]}],"content":"---\ntitle: \"is_pointer Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.tr1.is_pointer\"\n  - \"is_pointer\"\n  - \"std::tr1::is_pointer\"\n  - \"std.is_pointer\"\n  - \"std::is_pointer\"\n  - \"type_traits/std::is_pointer\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"is_pointer class [TR1]\"\n  - \"is_pointer\"\nms.assetid: 44e0a403-7241-4e0a-8922-32877bcb9a4c\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# is_pointer Class\nTests if type is a pointer.  \n  \n## Syntax  \n  \n```  \ntemplate <class Ty>  \nstruct is_pointer;  \n```  \n  \n#### Parameters  \n `Ty`  \n The type to query.  \n  \n## Remarks  \n An instance of the type predicate holds true if the type `Ty` is a pointer to `void`, a pointer to an object, or a pointer to a function, or a `cv-qualified` form of one of them, otherwise it holds false. Note that `is_pointer` holds false if `Ty` is a pointer to member or a pointer to member function.  \n  \n## Example  \n  \n```cpp  \n// std_tr1__type_traits__is_pointer.cpp   \n// compile with: /EHsc   \n#include <type_traits>   \n#include <iostream>   \n  \nstruct trivial   \n    {   \n    int val;   \n    };   \n  \nint main()   \n    {   \n    std::cout << \"is_pointer<trivial> == \" << std::boolalpha   \n        << std::is_pointer<trivial>::value << std::endl;   \n    std::cout << \"is_pointer<int trivial::*> == \" << std::boolalpha   \n        << std::is_pointer<int trivial::*>::value << std::endl;   \n    std::cout << \"is_pointer<trivial *> == \" << std::boolalpha   \n        << std::is_pointer<trivial *>::value << std::endl;   \n    std::cout << \"is_pointer<int> == \" << std::boolalpha   \n        << std::is_pointer<int>::value << std::endl;   \n    std::cout << \"is_pointer<int *> == \" << std::boolalpha   \n        << std::is_pointer<int *>::value << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \nis_pointer<trivial> == false  \nis_pointer<int trivial::*> == false  \nis_pointer<trivial *> == true  \nis_pointer<int> == false  \nis_pointer<int *> == true  \n```  \n  \n## Requirements  \n **Header:** <type_traits>  \n  \n **Namespace:** std  \n  \n## See Also  \n [<type_traits>](../standard-library/type-traits.md)   \n [is_member_pointer Class](../standard-library/is-member-pointer-class.md)   \n [is_reference Class](../standard-library/is-reference-class.md)\n"}