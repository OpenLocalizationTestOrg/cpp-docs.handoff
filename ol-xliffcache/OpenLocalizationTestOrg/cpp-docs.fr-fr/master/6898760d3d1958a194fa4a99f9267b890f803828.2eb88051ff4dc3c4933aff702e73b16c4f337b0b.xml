{"nodes":[{"pos":[12,37],"content":"_umask_s | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_umask_s | Microsoft Docs","pos":[0,25]}]},{"pos":[1073,1081],"content":"_umask_s","linkify":"_umask_s","nodes":[{"content":"_umask_s","pos":[0,8]}]},{"content":"Sets the default file-permission mask.","pos":[1082,1120]},{"content":"A version of <bpt id=\"p1\">[</bpt>_umask<ept id=\"p1\">](../../c-runtime-library/reference/umask.md)</ept> with security enhancements as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1121,1318],"source":" A version of [_umask](../../c-runtime-library/reference/umask.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"pos":[1327,1333],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1419,1429],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`mode`</ph>","pos":[1433,1444],"source":"[in] `mode`"},{"content":"Default permission setting.","pos":[1448,1475]},{"content":"[out] <ph id=\"ph1\">`oldMode`</ph>","pos":[1482,1497],"source":"[out] `oldMode`"},{"content":"The previous value of the permission setting.","pos":[1501,1546]},{"pos":[1555,1567],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1571,1669],"content":"Returns an error code if <ph id=\"ph1\">`Mode`</ph> does not specify a valid mode or the <ph id=\"ph2\">`pOldMode`</ph> pointer is <ph id=\"ph3\">`NULL`</ph>.","source":"Returns an error code if `Mode` does not specify a valid mode or the `pOldMode` pointer is `NULL`."},{"pos":[1679,1695],"content":"Error Conditions","linkify":"Error Conditions","nodes":[{"content":"Error Conditions","pos":[0,16]}]},{"pos":[1720,1736],"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","source":"**Return Value**"},{"pos":[1737,1763],"content":"<bpt id=\"p1\">**</bpt>Contents of<ept id=\"p1\">**</ept>  <ph id=\"ph1\">`oldMode`</ph>","source":"**Contents of**  `oldMode`"},{"content":"any","pos":[1858,1861]},{"content":"not modified","pos":[1878,1890]},{"content":"invalid mode","pos":[1895,1907]},{"content":"any","pos":[1908,1911]},{"content":"not modified","pos":[1921,1933]},{"content":"If one of the above conditions occurs, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1941,2110],"source":"If one of the above conditions occurs, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, <ph id=\"ph1\">`_umask_s`</ph> returns <ph id=\"ph2\">`EINVAL`</ph> and sets <ph id=\"ph3\">`errno`</ph> to <ph id=\"ph4\">`EINVAL`</ph>.","pos":[2111,2205],"source":" If execution is allowed to continue, `_umask_s` returns `EINVAL` and sets `errno` to `EINVAL`."},{"pos":[2214,2221],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_umask_s`</ph> function sets the file-permission mask of the current process to the mode specified by <ph id=\"ph2\">`mode`</ph><bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>","pos":[2225,2336],"source":"The `_umask_s` function sets the file-permission mask of the current process to the mode specified by `mode`*.*"},{"content":"The file-permission mask modifies the permission setting of new files created by <ph id=\"ph1\">`_creat`</ph>, <ph id=\"ph2\">`_open`</ph>, or <ph id=\"ph3\">`_sopen`</ph>.","pos":[2337,2449],"source":" The file-permission mask modifies the permission setting of new files created by `_creat`, `_open`, or `_sopen`."},{"content":"If a bit in the mask is 1, the corresponding bit in the file's requested permission value is set to 0 (disallowed).","pos":[2450,2565]},{"content":"If a bit in the mask is 0, the corresponding bit is left unchanged.","pos":[2566,2633]},{"content":"The permission setting for a new file is not set until the file is closed for the first time.","pos":[2634,2727]},{"pos":[2734,2845],"content":"The integer expression <ph id=\"ph1\">`pmode`</ph> contains one or both of the following manifest constants, defined in SYS\\STAT.H:","source":"The integer expression `pmode` contains one or both of the following manifest constants, defined in SYS\\STAT.H:"},{"content":"Writing permitted.","pos":[2867,2885]},{"content":"Reading permitted.","pos":[2906,2924]},{"content":"Reading and writing permitted.","pos":[2957,2987]},{"content":"When both constants are given, they are joined with the bitwise-OR operator ( <ph id=\"ph1\">`|`</ph> ).","pos":[2994,3078],"source":"When both constants are given, they are joined with the bitwise-OR operator ( `|` )."},{"content":"If the <ph id=\"ph1\">`mode`</ph> argument is <ph id=\"ph2\">`_S_IREAD`</ph>, reading is not allowed (the file is write-only).","pos":[3079,3165],"source":" If the `mode` argument is `_S_IREAD`, reading is not allowed (the file is write-only)."},{"content":"If the <ph id=\"ph1\">`mode`</ph> argument is <ph id=\"ph2\">`_S_IWRITE`</ph>, writing is not allowed (the file is read-only).","pos":[3166,3252],"source":" If the `mode` argument is `_S_IWRITE`, writing is not allowed (the file is read-only)."},{"content":"For example, if the write bit is set in the mask, any new files will be read-only.","pos":[3253,3335]},{"content":"Note that with MS-DOS and the Windows operating systems, all files are readable; it is not possible to give write-only permission.","pos":[3336,3466]},{"content":"Therefore, setting the read bit with <ph id=\"ph1\">`_umask_s`</ph> has no effect on the file's modes.","pos":[3467,3549],"source":" Therefore, setting the read bit with `_umask_s` has no effect on the file's modes."},{"pos":[3556,3706],"content":"If <ph id=\"ph1\">`pmode`</ph> is not a combination of one of the manifest constants or incorporates an alternate set of constants, the function will simply ignore those.","source":"If `pmode` is not a combination of one of the manifest constants or incorporates an alternate set of constants, the function will simply ignore those."},{"pos":[3715,3727],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[3734,3741]},{"content":"Required header","pos":[3742,3757]},{"content":"<ph id=\"ph1\">\\&lt;</ph>io.h&gt; and <ph id=\"ph2\">\\&lt;</ph>sys/stat.h&gt; and <ph id=\"ph3\">\\&lt;</ph>sys/types.h&gt;","pos":[3813,3857],"source":"\\<io.h> and \\<sys/stat.h> and \\<sys/types.h>"},{"pos":[3865,3989],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[3998,4005],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4628,4653],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[4657,4766],"content":"<bpt id=\"p1\">[</bpt>System::IO::File::SetAttributes<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.io.file.setattributes.aspx)</ept>","source":"[System::IO::File::SetAttributes](https://msdn.microsoft.com/en-us/library/system.io.file.setattributes.aspx)"},{"pos":[4775,4783],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>File Handling<ept id=\"p1\">](../../c-runtime-library/file-handling.md)</ept><ph id=\"ph1\"> </ph>","pos":[4787,4845],"source":"[File Handling](../../c-runtime-library/file-handling.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Low-Level I/O<ept id=\"p1\">](../../c-runtime-library/low-level-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[4848,4907],"source":" [Low-Level I/O](../../c-runtime-library/low-level-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_chmod, _wchmod<ept id=\"p1\">](../../c-runtime-library/reference/chmod-wchmod.md)</ept><ph id=\"ph1\"> </ph>","pos":[4910,4980],"source":" [_chmod, _wchmod](../../c-runtime-library/reference/chmod-wchmod.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_creat, _wcreat<ept id=\"p1\">](../../c-runtime-library/reference/creat-wcreat.md)</ept><ph id=\"ph1\"> </ph>","pos":[4983,5053],"source":" [_creat, _wcreat](../../c-runtime-library/reference/creat-wcreat.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_mkdir, _wmkdir<ept id=\"p1\">](../../c-runtime-library/reference/mkdir-wmkdir.md)</ept><ph id=\"ph1\"> </ph>","pos":[5056,5126],"source":" [_mkdir, _wmkdir](../../c-runtime-library/reference/mkdir-wmkdir.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_open, _wopen<ept id=\"p1\">](../../c-runtime-library/reference/open-wopen.md)</ept><ph id=\"ph1\"> </ph>","pos":[5129,5195],"source":" [_open, _wopen](../../c-runtime-library/reference/open-wopen.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_umask<ept id=\"p1\">](../../c-runtime-library/reference/umask.md)</ept>","pos":[5198,5251],"source":" [_umask](../../c-runtime-library/reference/umask.md)"}],"content":"---\ntitle: \"_umask_s | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_umask_s\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-filesystem-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"unmask_s\"\n  - \"_umask_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"masks, file-permission-setting\"\n  - \"_umask_s function\"\n  - \"masks\"\n  - \"file permissions [C++]\"\n  - \"umask_s function\"\n  - \"files [C++], permission settings for\"\nms.assetid: 70898f61-bf2b-4d8d-8291-0ccaa6d33145\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _umask_s\nSets the default file-permission mask. A version of [_umask](../../c-runtime-library/reference/umask.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nerrno_t _umask_s(  \n   int mode,  \n   int * pOldMode  \n);  \n```  \n  \n#### Parameters  \n [in] `mode`  \n Default permission setting.  \n  \n [out] `oldMode`  \n The previous value of the permission setting.  \n  \n## Return Value  \n Returns an error code if `Mode` does not specify a valid mode or the `pOldMode` pointer is `NULL`.  \n  \n### Error Conditions  \n  \n|`mode`|`pOldMode`|**Return Value**|**Contents of**  `oldMode`|  \n|------------|----------------|----------------------|--------------------------------|  \n|any|`NULL`|`EINVAL`|not modified|  \n|invalid mode|any|`EINVAL`|not modified|  \n  \n If one of the above conditions occurs, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, `_umask_s` returns `EINVAL` and sets `errno` to `EINVAL`.  \n  \n## Remarks  \n The `_umask_s` function sets the file-permission mask of the current process to the mode specified by `mode`*.* The file-permission mask modifies the permission setting of new files created by `_creat`, `_open`, or `_sopen`. If a bit in the mask is 1, the corresponding bit in the file's requested permission value is set to 0 (disallowed). If a bit in the mask is 0, the corresponding bit is left unchanged. The permission setting for a new file is not set until the file is closed for the first time.  \n  \n The integer expression `pmode` contains one or both of the following manifest constants, defined in SYS\\STAT.H:  \n  \n `_S_IWRITE`  \n Writing permitted.  \n  \n `_S_IREAD`  \n Reading permitted.  \n  \n `_S_IREAD | _S_IWRITE`  \n Reading and writing permitted.  \n  \n When both constants are given, they are joined with the bitwise-OR operator ( `|` ). If the `mode` argument is `_S_IREAD`, reading is not allowed (the file is write-only). If the `mode` argument is `_S_IWRITE`, writing is not allowed (the file is read-only). For example, if the write bit is set in the mask, any new files will be read-only. Note that with MS-DOS and the Windows operating systems, all files are readable; it is not possible to give write-only permission. Therefore, setting the read bit with `_umask_s` has no effect on the file's modes.  \n  \n If `pmode` is not a combination of one of the manifest constants or incorporates an alternate set of constants, the function will simply ignore those.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_umask_s`|\\<io.h> and \\<sys/stat.h> and \\<sys/types.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_umask_s.c  \n/* This program uses _umask_s to set  \n * the file-permission mask so that all future  \n * files will be created as read-only files.  \n * It also displays the old mask.  \n */  \n  \n#include <sys/stat.h>  \n#include <sys/types.h>  \n#include <io.h>  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   int oldmask, err;  \n  \n   /* Create read-only files: */  \n   err = _umask_s( _S_IWRITE, &oldmask );  \n   if (err)  \n   {  \n      printf(\"Error setting the umask.\\n\");  \n      exit(1);  \n   }  \n   printf( \"Oldmask = 0x%.4x\\n\", oldmask );  \n}  \n```  \n  \n```Output  \nOldmask = 0x0000  \n```  \n  \n## .NET Framework Equivalent  \n [System::IO::File::SetAttributes](https://msdn.microsoft.com/en-us/library/system.io.file.setattributes.aspx)  \n  \n## See Also  \n [File Handling](../../c-runtime-library/file-handling.md)   \n [Low-Level I/O](../../c-runtime-library/low-level-i-o.md)   \n [_chmod, _wchmod](../../c-runtime-library/reference/chmod-wchmod.md)   \n [_creat, _wcreat](../../c-runtime-library/reference/creat-wcreat.md)   \n [_mkdir, _wmkdir](../../c-runtime-library/reference/mkdir-wmkdir.md)   \n [_open, _wopen](../../c-runtime-library/reference/open-wopen.md)   \n [_umask](../../c-runtime-library/reference/umask.md)"}