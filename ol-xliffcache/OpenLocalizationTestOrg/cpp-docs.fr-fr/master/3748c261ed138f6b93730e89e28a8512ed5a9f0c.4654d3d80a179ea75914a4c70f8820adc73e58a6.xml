{"nodes":[{"pos":[12,77],"content":"_scprintf, _scprintf_l, _scwprintf, _scwprintf_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_scprintf, _scprintf_l, _scwprintf, _scwprintf_l | Microsoft Docs","pos":[0,65]}]},{"content":"_scprintf, _scprintf_l, _scwprintf, _scwprintf_l","pos":[1440,1488]},{"content":"Returns the number of characters in the formatted string.","pos":[1489,1546]},{"content":"Syntax","pos":[1555,1561]},{"content":"Parameters","pos":[1919,1929]},{"content":"Format-control string.","pos":[1945,1967]},{"content":"Optional arguments.","pos":[1988,2007]},{"content":"The locale to use.","pos":[2026,2044]},{"pos":[2051,2186],"content":"For more information, see <bpt id=\"p1\">[</bpt>Format Specifications<ept id=\"p1\">](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)</ept>.","source":"For more information, see [Format Specifications](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)."},{"content":"Return Value","pos":[2195,2207]},{"content":"Returns the number of characters that would be generated if the string were to be printed or sent to a file or buffer using the specified formatting codes.","pos":[2211,2366]},{"content":"The value returned does not include the terminating null character.","pos":[2367,2434]},{"content":"performs the same function for wide characters.","pos":[2448,2495]},{"content":"If <ph id=\"ph1\">`format`</ph> is a <ph id=\"ph2\">`NULL`</ph> pointer, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2502,2665],"source":"If `format` is a `NULL` pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions return -1 and set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[2666,2757],"source":" If execution is allowed to continue, these functions return -1 and set `errno` to `EINVAL`."},{"pos":[2764,2935],"content":"For information about these and other error codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For information about these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"Remarks","pos":[2944,2951]},{"content":"Each <ph id=\"ph1\">`argument`</ph> (if any) is converted according to the corresponding format specification in <ph id=\"ph2\">`format`</ph>.","pos":[2955,3057],"source":"Each `argument` (if any) is converted according to the corresponding format specification in `format`."},{"content":"The format consists of ordinary characters and has the same form and function as the <ph id=\"ph1\">`format`</ph> argument for <bpt id=\"p1\">[</bpt>printf<ept id=\"p1\">](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)</ept>.","pos":[3058,3246],"source":" The format consists of ordinary characters and has the same form and function as the `format` argument for [printf](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)."},{"pos":[3253,3409],"content":"The versions of these functions with the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current thread locale.","source":"The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale."},{"pos":[3417,3483],"content":"[!IMPORTANT]\n Ensure that `format` is not a user-defined string.","leadings":["","> "],"nodes":[{"content":"Ensure that <ph id=\"ph1\">`format`</ph> is not a user-defined string.","pos":[14,64],"source":" Ensure that `format` is not a user-defined string."}]},{"content":"Generic-Text Routine Mappings","pos":[3493,3522]},{"content":"Tchar.h routine","pos":[3529,3544]},{"content":"_UNICODE and _MBCS not defined","pos":[3545,3575]},{"content":"_MBCS defined","pos":[3576,3589]},{"content":"_UNICODE defined","pos":[3590,3606]},{"content":"Requirements","pos":[3842,3854]},{"content":"Routine","pos":[3861,3868]},{"content":"Required header","pos":[3869,3884]},{"pos":[3940,3941],"content":","},{"content":"stdio.h&gt;","pos":[3958,3966],"source":"stdio.h>"},{"pos":[3983,3984],"content":","},{"content":"stdio.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[4002,4024],"source":"stdio.h> or \\<wchar.h>"},{"pos":[4032,4150],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[4159,4166]},{"content":"See Also","pos":[4947,4955]},{"content":"Stream I/O","pos":[4960,4970]},{"content":"fprintf, _fprintf_l, fwprintf, _fwprintf_l","pos":[5016,5058]},{"content":"printf, _printf_l, wprintf, _wprintf_l","pos":[5141,5179]},{"content":"scanf, _scanf_l, wscanf, _wscanf_l","pos":[5258,5292]},{"content":"sscanf, _sscanf_l, swscanf, _swscanf_l","pos":[5367,5405]},{"content":"vprintf Functions","pos":[5484,5501]}],"content":"---\ntitle: \"_scprintf, _scprintf_l, _scwprintf, _scwprintf_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_scprintf_l\"\n  - \"_scwprintf\"\n  - \"_scwprintf_l\"\n  - \"_scprintf\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"scprintf\"\n  - \"_scprintf_l\"\n  - \"_scwprintf_l\"\n  - \"_scprintf\"\n  - \"scwprintf\"\n  - \"_scwprintf\"\n  - \"scprintf_l\"\n  - \"_sctprintf_l\"\n  - \"scwprintf_l\"\n  - \"_sctprintf\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"scprintf function\"\n  - \"sctprintf_l function\"\n  - \"scwprintf_l function\"\n  - \"_scwprintf_l function\"\n  - \"_sctprintf_l function\"\n  - \"sctprintf function\"\n  - \"_scwprintf function\"\n  - \"_scprintf_l function\"\n  - \"_sctprintf function\"\n  - \"scprintf_l function\"\n  - \"formatted text [C++]\"\n  - \"_scprintf function\"\n  - \"scwprintf function\"\nms.assetid: ecbb0ba6-5f4c-4ce6-a64b-144ad8b5fe92\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _scprintf, _scprintf_l, _scwprintf, _scwprintf_l\nReturns the number of characters in the formatted string.  \n  \n## Syntax  \n  \n```  \nint _scprintf(  \n   const char *format [,  \n   argument] ...   \n);  \nint _scprintf_l(  \n   const char *format,  \n   locale_t locale [,  \n   argument] ...   \n);  \nint _scwprintf(  \n   const wchar_t *format [,  \n   argument] ...   \n);  \nint _scwprintf_l(  \n   const wchar_t *format,  \n   locale_t locale [,  \n   argument] ...   \n);  \n```  \n  \n#### Parameters  \n `format`  \n Format-control string.  \n  \n `argument`  \n Optional arguments.  \n  \n `locale`  \n The locale to use.  \n  \n For more information, see [Format Specifications](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md).  \n  \n## Return Value  \n Returns the number of characters that would be generated if the string were to be printed or sent to a file or buffer using the specified formatting codes. The value returned does not include the terminating null character. `_scwprintf` performs the same function for wide characters.  \n  \n If `format` is a `NULL` pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions return -1 and set `errno` to `EINVAL`.  \n  \n For information about these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n Each `argument` (if any) is converted according to the corresponding format specification in `format`. The format consists of ordinary characters and has the same form and function as the `format` argument for [printf](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md).  \n  \n The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale.  \n  \n> [!IMPORTANT]\n>  Ensure that `format` is not a user-defined string.  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_sctprintf`|`_scprintf`|`_scprintf`|`_scwprintf`|  \n|`_sctprintf_l`|`_scprintf_l`|`_scprintf_l`|`_scwprintf_l`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_scprintf`, `_scprintf_l`|\\<stdio.h>|  \n|`_scwprintf`, `_scwprintf_l`|\\<stdio.h> or \\<wchar.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt__scprintf.c  \n  \n#define _USE_MATH_DEFINES  \n  \n#include <stdio.h>  \n#include <math.h>  \n#include <malloc.h>  \n  \nint main( void )  \n{  \n   int count;  \n   int size;  \n   char *s = NULL;  \n  \n   count = _scprintf( \"The value of Pi is calculated to be %f.\\n\",  \n                      M_PI);  \n  \n   size = count + 1; // the string will need one more char for the null terminator  \n   s = malloc(sizeof(char) * size);  \n   sprintf_s(s, size, \"The value of Pi is calculated to be %f.\\n\",  \n                      M_PI);  \n   printf(\"The length of the following string will be %i.\\n\", count);  \n   printf(\"%s\", s);  \n   free( s );  \n}  \n```  \n  \n```Output  \nThe length of the following string will be 46.  \nThe value of Pi is calculated to be 3.141593.  \n```  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [fprintf, _fprintf_l, fwprintf, _fwprintf_l](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)   \n [printf, _printf_l, wprintf, _wprintf_l](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)   \n [scanf, _scanf_l, wscanf, _wscanf_l](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)   \n [sscanf, _sscanf_l, swscanf, _swscanf_l](../../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md)   \n [vprintf Functions](../../c-runtime-library/vprintf-functions.md)"}