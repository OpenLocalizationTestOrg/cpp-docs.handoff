{"nodes":[{"pos":[12,42],"content":"promise Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"promise Class | Microsoft Docs","pos":[0,30]}]},{"pos":[563,576],"content":"promise Class","linkify":"promise Class","nodes":[{"content":"promise Class","pos":[0,13]}]},{"pos":[577,614],"content":"Describes an <bpt id=\"p1\">*</bpt>asynchronous provider<ept id=\"p1\">*</ept>.","source":"Describes an *asynchronous provider*."},{"pos":[623,629],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[686,693],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[703,722],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[729,733]},{"content":"Description","pos":[734,745]},{"pos":[783,844],"content":"<bpt id=\"p1\">[</bpt>promise::promise Constructor<ept id=\"p1\">](#promise__promise_constructor)</ept>","source":"[promise::promise Constructor](#promise__promise_constructor)"},{"pos":[845,875],"content":"Constructs a <ph id=\"ph1\">`promise`</ph> object.","source":"Constructs a `promise` object."},{"pos":[886,900],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[907,911]},{"content":"Description","pos":[912,923]},{"pos":[961,1011],"content":"<bpt id=\"p1\">[</bpt>promise::get_future<ept id=\"p1\">](#promise__get_future_method)</ept>","source":"[promise::get_future](#promise__get_future_method)"},{"pos":[1012,1097],"content":"Returns a <bpt id=\"p1\">[</bpt>future<ept id=\"p1\">](../standard-library/future-class.md)</ept> associated with this promise.","source":"Returns a [future](../standard-library/future-class.md) associated with this promise."},{"pos":[1102,1158],"content":"<bpt id=\"p1\">[</bpt>promise::set_exception<ept id=\"p1\">](#promise__set_exception_method)</ept>","source":"[promise::set_exception](#promise__set_exception_method)"},{"content":"Atomically sets the result of this promise to indicate an exception.","pos":[1159,1227]},{"pos":[1232,1318],"content":"<bpt id=\"p1\">[</bpt>promise::set_exception_at_thread_exit<ept id=\"p1\">](#promise__set_exception_at_thread_exit_method)</ept>","source":"[promise::set_exception_at_thread_exit](#promise__set_exception_at_thread_exit_method)"},{"content":"Atomically sets the result of this promise to indicate an exception, and delivers the notification only after all thread-local objects in the current thread have been destroyed (usually at thread exit).","pos":[1319,1521]},{"pos":[1526,1574],"content":"<bpt id=\"p1\">[</bpt>promise::set_value<ept id=\"p1\">](#promise__set_value_method)</ept>","source":"[promise::set_value](#promise__set_value_method)"},{"content":"Atomically sets the result of this promise to indicate a value.","pos":[1575,1638]},{"pos":[1643,1721],"content":"<bpt id=\"p1\">[</bpt>promise::set_value_at_thread_exit<ept id=\"p1\">](#promise__set_value_at_thread_exit_method)</ept>","source":"[promise::set_value_at_thread_exit](#promise__set_value_at_thread_exit_method)"},{"content":"Atomically sets the result of this promise to indicate a value, and delivers the notification only after all thread-local objects in the current thread have been destroyed (usually at thread exit).","pos":[1722,1919]},{"pos":[1924,1962],"content":"<bpt id=\"p1\">[</bpt>promise::swap<ept id=\"p1\">](#promise__swap_method)</ept>","source":"[promise::swap](#promise__swap_method)"},{"pos":[1963,2065],"content":"Exchanges the <bpt id=\"p1\">*</bpt>associated asynchronous state<ept id=\"p1\">*</ept> of this promise with that of a specified promise object.","source":"Exchanges the *associated asynchronous state* of this promise with that of a specified promise object."},{"pos":[2076,2092],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[2099,2103]},{"content":"Description","pos":[2104,2115]},{"pos":[2153,2196],"content":"<bpt id=\"p1\">[</bpt>promise::operator=<ept id=\"p1\">](#promise__operator_eq)</ept>","source":"[promise::operator=](#promise__operator_eq)"},{"content":"Assignment of the shared state of this promise object.","pos":[2197,2251]},{"pos":[2261,2282],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[2304,2316],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2320,2338],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> future","source":"**Header:** future"},{"pos":[2345,2363],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[2373,2435],"content":"<bpt id=\"p1\">&lt;a name=\"promise__get_future_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  promise::get_future","linkify":"<a name=\"promise__get_future_method\"></a>  promise::get_future","source":"<a name=\"promise__get_future_method\"></a>  promise::get_future"},{"pos":[2439,2568],"content":"Returns a <bpt id=\"p1\">[</bpt>future<ept id=\"p1\">](../standard-library/future-class.md)</ept> object that has the same <bpt id=\"p2\">*</bpt>associated asynchronous state<ept id=\"p2\">*</ept> as this promise.","source":"Returns a [future](../standard-library/future-class.md) object that has the same *associated asynchronous state* as this promise."},{"pos":[2616,2623],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2627,2818],"content":"If the promise object is empty, this method throws a <bpt id=\"p1\">[</bpt>future_error<ept id=\"p1\">](../standard-library/future-error-class.md)</ept> that has an <bpt id=\"p2\">[</bpt>error_code<ept id=\"p2\">](../standard-library/error-code-class.md)</ept> of <ph id=\"ph1\">`no_state`</ph>.","source":"If the promise object is empty, this method throws a [future_error](../standard-library/future-error-class.md) that has an [error_code](../standard-library/error-code-class.md) of `no_state`."},{"pos":[2825,3024],"content":"If this method has already been called for a promise object that has the same associated asynchronous state, the method throws a <ph id=\"ph1\">`future_error`</ph> that has an <ph id=\"ph2\">`error_code`</ph> of <ph id=\"ph3\">`future_already_retrieved`</ph>.","source":"If this method has already been called for a promise object that has the same associated asynchronous state, the method throws a `future_error` that has an `error_code` of `future_already_retrieved`."},{"pos":[3034,3089],"content":"<bpt id=\"p1\">&lt;a name=\"promise__operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  promise::operator=","linkify":"<a name=\"promise__operator_eq\"></a>  promise::operator=","source":"<a name=\"promise__operator_eq\"></a>  promise::operator="},{"pos":[3093,3173],"content":"Transfers the <bpt id=\"p1\">*</bpt>associated asynchronous state<ept id=\"p1\">*</ept> from a specified <ph id=\"ph1\">`promise`</ph> object.","source":"Transfers the *associated asynchronous state* from a specified `promise` object."},{"pos":[3242,3252],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <ph id=\"ph1\">`promise`</ph> object.","pos":[3267,3286],"source":" A `promise` object."},{"pos":[3296,3308],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3329,3336],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This operator transfers the associated asynchronous state from <ph id=\"ph1\">`Other`</ph>.","pos":[3340,3411],"source":"This operator transfers the associated asynchronous state from `Other`."},{"content":"After the transfer, <ph id=\"ph1\">`Other`</ph> is <bpt id=\"p1\">*</bpt>empty<ept id=\"p1\">*</ept>.","pos":[3412,3451],"source":" After the transfer, `Other` is *empty*."},{"pos":[3461,3534],"content":"<bpt id=\"p1\">&lt;a name=\"promise__promise_constructor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  promise::promise Constructor","linkify":"<a name=\"promise__promise_constructor\"></a>  promise::promise Constructor","source":"<a name=\"promise__promise_constructor\"></a>  promise::promise Constructor"},{"pos":[3538,3568],"content":"Constructs a <ph id=\"ph1\">`promise`</ph> object.","source":"Constructs a `promise` object."},{"pos":[3703,3713],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A memory allocator.","pos":[3725,3744]},{"content":"See <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>allocators&gt;<ept id=\"p1\">](../standard-library/allocators-header.md)</ept> for more information.","pos":[3745,3828],"source":" See [\\<allocators>](../standard-library/allocators-header.md) for more information."},{"content":"A <ph id=\"ph1\">`promise`</ph> object.","pos":[3846,3865],"source":" A `promise` object."},{"pos":[3875,3882],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3886,3946],"content":"The first constructor constructs an <bpt id=\"p1\">*</bpt>empty<ept id=\"p1\">*</ept><ph id=\"ph1\">`promise`</ph> object.","source":"The first constructor constructs an *empty*`promise` object."},{"pos":[3953,4049],"content":"The second constructor constructs an empty <ph id=\"ph1\">`promise`</ph> object and uses <ph id=\"ph2\">`Al`</ph> for memory allocation.","source":"The second constructor constructs an empty `promise` object and uses `Al` for memory allocation."},{"pos":[4056,4195],"content":"The third constructor constructs a <ph id=\"ph1\">`promise`</ph> object and transfers the associated asynchronous state from <ph id=\"ph2\">`Other`</ph>, and leaves <ph id=\"ph3\">`Other`</ph> empty.","source":"The third constructor constructs a `promise` object and transfers the associated asynchronous state from `Other`, and leaves `Other` empty."},{"pos":[4205,4273],"content":"<bpt id=\"p1\">&lt;a name=\"promise__set_exception_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  promise::set_exception","linkify":"<a name=\"promise__set_exception_method\"></a>  promise::set_exception","source":"<a name=\"promise__set_exception_method\"></a>  promise::set_exception"},{"pos":[4277,4403],"content":"Atomically stores an exception as the result of this <ph id=\"ph1\">`promise`</ph> object and sets the <bpt id=\"p1\">*</bpt>associated asynchronous state<ept id=\"p1\">*</ept> to <bpt id=\"p2\">*</bpt>ready<ept id=\"p2\">*</ept>.","source":"Atomically stores an exception as the result of this `promise` object and sets the *associated asynchronous state* to *ready*."},{"pos":[4465,4475],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An <bpt id=\"p1\">[</bpt>exception_ptr<ept id=\"p1\">](../standard-library/exception-typedefs.md#exception_ptr)</ept> that's stored by this method as the exception result.","pos":[4488,4617],"source":" An [exception_ptr](../standard-library/exception-typedefs.md#exception_ptr) that's stored by this method as the exception result."},{"pos":[4627,4634],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4638,4816],"content":"If the <ph id=\"ph1\">`promise`</ph> object has no associated asynchronous state, this method throws a <bpt id=\"p1\">[</bpt>future_error<ept id=\"p1\">](../standard-library/future-error-class.md)</ept> that has an error code of <ph id=\"ph2\">`no_state`</ph>.","source":"If the `promise` object has no associated asynchronous state, this method throws a [future_error](../standard-library/future-error-class.md) that has an error code of `no_state`."},{"pos":[4823,5222],"content":"If <ph id=\"ph1\">`set_exception`</ph>, <bpt id=\"p1\">[</bpt>set_exception_at_thread_exit<ept id=\"p1\">](#promise__set_exception_at_thread_exit_method)</ept>, <bpt id=\"p2\">[</bpt>set_value<ept id=\"p2\">](#promise__set_value_method)</ept>, or <bpt id=\"p3\">[</bpt>set_value_at_thread_exit<ept id=\"p3\">](#promise__set_value_at_thread_exit_method)</ept> has already been called for a <ph id=\"ph2\">`promise`</ph> object that has the same associated asynchronous state, this method throws a <ph id=\"ph3\">`future_error`</ph> that has an error code of <ph id=\"ph4\">`promise_already_satisfied`</ph>.","source":"If `set_exception`, [set_exception_at_thread_exit](#promise__set_exception_at_thread_exit_method), [set_value](#promise__set_value_method), or [set_value_at_thread_exit](#promise__set_value_at_thread_exit_method) has already been called for a `promise` object that has the same associated asynchronous state, this method throws a `future_error` that has an error code of `promise_already_satisfied`."},{"content":"As a result of this method, any threads that are blocked on the associated asynchronous state become unblocked.","pos":[5229,5340]},{"pos":[5350,5448],"content":"<bpt id=\"p1\">&lt;a name=\"promise__set_exception_at_thread_exit_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  promise::set_exception_at_thread_exit","linkify":"<a name=\"promise__set_exception_at_thread_exit_method\"></a>  promise::set_exception_at_thread_exit","source":"<a name=\"promise__set_exception_at_thread_exit_method\"></a>  promise::set_exception_at_thread_exit"},{"pos":[5452,5654],"content":"Atomically sets the result of this <ph id=\"ph1\">`promise`</ph> to indicate an exception, delivering the notification only after all thread-local objects in the current thread have been destroyed (usually at thread exit).","source":"Atomically sets the result of this `promise` to indicate an exception, delivering the notification only after all thread-local objects in the current thread have been destroyed (usually at thread exit)."},{"pos":[5731,5741],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An <bpt id=\"p1\">[</bpt>exception_ptr<ept id=\"p1\">](../standard-library/exception-typedefs.md#exception_ptr)</ept> that's stored by this method as the exception result.","pos":[5754,5883],"source":" An [exception_ptr](../standard-library/exception-typedefs.md#exception_ptr) that's stored by this method as the exception result."},{"pos":[5893,5900],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5904,6082],"content":"If the promise object has no <bpt id=\"p1\">*</bpt>associated asynchronous state<ept id=\"p1\">*</ept>, this method throws a <bpt id=\"p2\">[</bpt>future_error<ept id=\"p2\">](../standard-library/future-error-class.md)</ept> that has an error code of <ph id=\"ph1\">`no_state`</ph>.","source":"If the promise object has no *associated asynchronous state*, this method throws a [future_error](../standard-library/future-error-class.md) that has an error code of `no_state`."},{"pos":[6089,6473],"content":"If <bpt id=\"p1\">[</bpt>set_exception<ept id=\"p1\">](#promise__set_exception_method)</ept>, <ph id=\"ph1\">`set_exception_at_thread_exit`</ph>, <bpt id=\"p2\">[</bpt>set_value<ept id=\"p2\">](#promise__set_value_method)</ept>, or <bpt id=\"p3\">[</bpt>set_value_at_thread_exit<ept id=\"p3\">](#promise__set_value_at_thread_exit_method)</ept> has already been called for a <ph id=\"ph2\">`promise`</ph> object that has the same associated asynchronous state, this method throws a <ph id=\"ph3\">`future_error`</ph> that has an error code of <ph id=\"ph4\">`promise_already_satisfied`</ph>.","source":"If [set_exception](#promise__set_exception_method), `set_exception_at_thread_exit`, [set_value](#promise__set_value_method), or [set_value_at_thread_exit](#promise__set_value_at_thread_exit_method) has already been called for a `promise` object that has the same associated asynchronous state, this method throws a `future_error` that has an error code of `promise_already_satisfied`."},{"content":"In contrast to <bpt id=\"p1\">[</bpt>set_exception<ept id=\"p1\">](#promise__set_exception_method)</ept>, this method does not set the associated asynchronous state to ready until after all thread-local objects in the current thread have been destroyed.","pos":[6480,6691],"source":"In contrast to [set_exception](#promise__set_exception_method), this method does not set the associated asynchronous state to ready until after all thread-local objects in the current thread have been destroyed."},{"content":"Typically, threads that are blocked on the associated asynchronous state are not unblocked until the current thread exits.","pos":[6692,6814]},{"pos":[6824,6884],"content":"<bpt id=\"p1\">&lt;a name=\"promise__set_value_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  promise::set_value","linkify":"<a name=\"promise__set_value_method\"></a>  promise::set_value","source":"<a name=\"promise__set_value_method\"></a>  promise::set_value"},{"pos":[6888,7009],"content":"Atomically stores a value as the result of this <ph id=\"ph1\">`promise`</ph> object and sets the <bpt id=\"p1\">*</bpt>associated asynchronous state<ept id=\"p1\">*</ept> to <bpt id=\"p2\">*</bpt>ready<ept id=\"p2\">*</ept>.","source":"Atomically stores a value as the result of this `promise` object and sets the *associated asynchronous state* to *ready*."},{"pos":[7179,7189],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The value to be stored as the result.","pos":[7202,7239]},{"pos":[7249,7256],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7260,7438],"content":"If the <ph id=\"ph1\">`promise`</ph> object has no associated asynchronous state, this method throws a <bpt id=\"p1\">[</bpt>future_error<ept id=\"p1\">](../standard-library/future-error-class.md)</ept> that has an error code of <ph id=\"ph2\">`no_state`</ph>.","source":"If the `promise` object has no associated asynchronous state, this method throws a [future_error](../standard-library/future-error-class.md) that has an error code of `no_state`."},{"pos":[7445,7848],"content":"If <bpt id=\"p1\">[</bpt>set_exception<ept id=\"p1\">](#promise__set_exception_method)</ept>, <bpt id=\"p2\">[</bpt>set_exception_at_thread_exit<ept id=\"p2\">](#promise__set_exception_at_thread_exit_method)</ept>, <ph id=\"ph1\">`set_value`</ph>, or <bpt id=\"p3\">[</bpt>set_value_at_thread_exit<ept id=\"p3\">](#promise__set_value_at_thread_exit_method)</ept> has already been called for a <ph id=\"ph2\">`promise`</ph> object that has the same associated asynchronous state, this method throws a <ph id=\"ph3\">`future_error`</ph> that has an error code of <ph id=\"ph4\">`promise_already_satisfied`</ph>.","source":"If [set_exception](#promise__set_exception_method), [set_exception_at_thread_exit](#promise__set_exception_at_thread_exit_method), `set_value`, or [set_value_at_thread_exit](#promise__set_value_at_thread_exit_method) has already been called for a `promise` object that has the same associated asynchronous state, this method throws a `future_error` that has an error code of `promise_already_satisfied`."},{"content":"As a result of this method, any threads that are blocked on the associated asynchronous state become unblocked.","pos":[7855,7966]},{"content":"The first method also throws any exception that is thrown when <ph id=\"ph1\">`Val`</ph> is copied into the associated asynchronous state.","pos":[7973,8091],"source":"The first method also throws any exception that is thrown when `Val` is copied into the associated asynchronous state."},{"content":"In this situation, the associated asynchronous state is not set to ready.","pos":[8092,8165]},{"content":"The second method also throws any exception that is thrown when <ph id=\"ph1\">`Val`</ph> is moved into the associated asynchronous state.","pos":[8172,8290],"source":"The second method also throws any exception that is thrown when `Val` is moved into the associated asynchronous state."},{"content":"In this situation, the associated asynchronous state is not set to ready.","pos":[8291,8364]},{"pos":[8371,8469],"content":"For the partial specialization <ph id=\"ph1\">`promise&lt;Ty&amp;&gt;`</ph>, the stored value is in effect a reference to <ph id=\"ph2\">`Val`</ph>.","source":"For the partial specialization `promise<Ty&>`, the stored value is in effect a reference to `Val`."},{"pos":[8476,8539],"content":"For the specialization <ph id=\"ph1\">`promise&lt;void&gt;`</ph>, no stored value exists.","source":"For the specialization `promise<void>`, no stored value exists."},{"pos":[8549,8639],"content":"<bpt id=\"p1\">&lt;a name=\"promise__set_value_at_thread_exit_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  promise::set_value_at_thread_exit","linkify":"<a name=\"promise__set_value_at_thread_exit_method\"></a>  promise::set_value_at_thread_exit","source":"<a name=\"promise__set_value_at_thread_exit_method\"></a>  promise::set_value_at_thread_exit"},{"pos":[8643,8708],"content":"Atomically stores a value as the result of this <ph id=\"ph1\">`promise`</ph> object.","source":"Atomically stores a value as the result of this `promise` object."},{"pos":[8938,8948],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The value to be stored as the result.","pos":[8961,8998]},{"pos":[9008,9015],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9019,9197],"content":"If the promise object has no <bpt id=\"p1\">*</bpt>associated asynchronous state<ept id=\"p1\">*</ept>, this method throws a <bpt id=\"p2\">[</bpt>future_error<ept id=\"p2\">](../standard-library/future-error-class.md)</ept> that has an error code of <ph id=\"ph1\">`no_state`</ph>.","source":"If the promise object has no *associated asynchronous state*, this method throws a [future_error](../standard-library/future-error-class.md) that has an error code of `no_state`."},{"pos":[9204,9592],"content":"If <bpt id=\"p1\">[</bpt>set_exception<ept id=\"p1\">](#promise__set_exception_method)</ept>, <bpt id=\"p2\">[</bpt>set_exception_at_thread_exit<ept id=\"p2\">](#promise__set_exception_at_thread_exit_method)</ept>, <bpt id=\"p3\">[</bpt>set_value<ept id=\"p3\">](#promise__set_value_method)</ept>, or <ph id=\"ph1\">`set_value_at_thread_exit`</ph> has already been called for a <ph id=\"ph2\">`promise`</ph> object that has the same associated asynchronous state, this method throws a <ph id=\"ph3\">`future_error`</ph> that has an error code of <ph id=\"ph4\">`promise_already_satisfied`</ph>.","source":"If [set_exception](#promise__set_exception_method), [set_exception_at_thread_exit](#promise__set_exception_at_thread_exit_method), [set_value](#promise__set_value_method), or `set_value_at_thread_exit` has already been called for a `promise` object that has the same associated asynchronous state, this method throws a `future_error` that has an error code of `promise_already_satisfied`."},{"content":"In contrast to <ph id=\"ph1\">`set_value`</ph>, the associated asynchronous state is not set to ready until after all thread-local objects in the current thread have been destroyed.","pos":[9599,9760],"source":"In contrast to `set_value`, the associated asynchronous state is not set to ready until after all thread-local objects in the current thread have been destroyed."},{"content":"Typically, threads that are blocked on the associated asynchronous state are not unblocked until the current thread exits.","pos":[9761,9883]},{"pos":[9890,10008],"content":"The first method also throws any exception that is thrown when <ph id=\"ph1\">`Val`</ph> is copied into the associated asynchronous state.","source":"The first method also throws any exception that is thrown when `Val` is copied into the associated asynchronous state."},{"pos":[10015,10133],"content":"The second method also throws any exception that is thrown when <ph id=\"ph1\">`Val`</ph> is moved into the associated asynchronous state.","source":"The second method also throws any exception that is thrown when `Val` is moved into the associated asynchronous state."},{"pos":[10140,10240],"content":"For the partial specialization <ph id=\"ph1\">`promise&lt;Ty&amp;&gt;`</ph>, the stored value is effectively a reference to <ph id=\"ph2\">`Val`</ph>.","source":"For the partial specialization `promise<Ty&>`, the stored value is effectively a reference to `Val`."},{"pos":[10247,10310],"content":"For the specialization <ph id=\"ph1\">`promise&lt;void&gt;`</ph>, no stored value exists.","source":"For the specialization `promise<void>`, no stored value exists."},{"pos":[10320,10370],"content":"<bpt id=\"p1\">&lt;a name=\"promise__swap_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  promise::swap","linkify":"<a name=\"promise__swap_method\"></a>  promise::swap","source":"<a name=\"promise__swap_method\"></a>  promise::swap"},{"pos":[10374,10475],"content":"Exchanges the <bpt id=\"p1\">*</bpt>associated asynchronous state<ept id=\"p1\">*</ept> of this promise object with that of a specified object.","source":"Exchanges the *associated asynchronous state* of this promise object with that of a specified object."},{"pos":[10534,10544],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <ph id=\"ph1\">`promise`</ph> object.","pos":[10559,10578],"source":" A `promise` object."},{"pos":[10587,10595],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[10599,10681],"content":"<bpt id=\"p1\">[</bpt>Header Files Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-header-files.md)</ept>","source":"[Header Files Reference](../standard-library/cpp-standard-library-header-files.md)"}],"content":"---\ntitle: \"promise Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"future/std::promise\"\ndev_langs: \n  - \"C++\"\nms.assetid: 2931558c-d94a-4ba1-ac4f-20bf7b6e23f9\ncaps.latest.revision: 15\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# promise Class\nDescribes an *asynchronous provider*.  \n  \n## Syntax  \n  \n```\ntemplate <class Ty>\nclass promise;\n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[promise::promise Constructor](#promise__promise_constructor)|Constructs a `promise` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[promise::get_future](#promise__get_future_method)|Returns a [future](../standard-library/future-class.md) associated with this promise.|  \n|[promise::set_exception](#promise__set_exception_method)|Atomically sets the result of this promise to indicate an exception.|  \n|[promise::set_exception_at_thread_exit](#promise__set_exception_at_thread_exit_method)|Atomically sets the result of this promise to indicate an exception, and delivers the notification only after all thread-local objects in the current thread have been destroyed (usually at thread exit).|  \n|[promise::set_value](#promise__set_value_method)|Atomically sets the result of this promise to indicate a value.|  \n|[promise::set_value_at_thread_exit](#promise__set_value_at_thread_exit_method)|Atomically sets the result of this promise to indicate a value, and delivers the notification only after all thread-local objects in the current thread have been destroyed (usually at thread exit).|  \n|[promise::swap](#promise__swap_method)|Exchanges the *associated asynchronous state* of this promise with that of a specified promise object.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[promise::operator=](#promise__operator_eq)|Assignment of the shared state of this promise object.|  \n  \n## Inheritance Hierarchy  \n `promise`  \n  \n## Requirements  \n **Header:** future  \n  \n **Namespace:** std  \n  \n##  <a name=\"promise__get_future_method\"></a>  promise::get_future  \n Returns a [future](../standard-library/future-class.md) object that has the same *associated asynchronous state* as this promise.  \n  \n```\nfuture<Ty> get_future();\n```  \n  \n### Remarks  \n If the promise object is empty, this method throws a [future_error](../standard-library/future-error-class.md) that has an [error_code](../standard-library/error-code-class.md) of `no_state`.  \n  \n If this method has already been called for a promise object that has the same associated asynchronous state, the method throws a `future_error` that has an `error_code` of `future_already_retrieved`.  \n  \n##  <a name=\"promise__operator_eq\"></a>  promise::operator=  \n Transfers the *associated asynchronous state* from a specified `promise` object.  \n  \n```\npromise& operator=(promise&& Other) noexcept;\n```  \n  \n### Parameters  \n `Other`  \n A `promise` object.  \n  \n### Return Value  \n `*this`  \n  \n### Remarks  \n This operator transfers the associated asynchronous state from `Other`. After the transfer, `Other` is *empty*.  \n  \n##  <a name=\"promise__promise_constructor\"></a>  promise::promise Constructor  \n Constructs a `promise` object.  \n  \n```\npromise();\ntemplate <class Alloc>\npromise(allocator_arg_t, const Alloc& Al);\npromise(promise&& Other) noexcept;\n```  \n  \n### Parameters  \n `Al`  \n A memory allocator. See [\\<allocators>](../standard-library/allocators-header.md) for more information.  \n  \n `Other`  \n A `promise` object.  \n  \n### Remarks  \n The first constructor constructs an *empty*`promise` object.  \n  \n The second constructor constructs an empty `promise` object and uses `Al` for memory allocation.  \n  \n The third constructor constructs a `promise` object and transfers the associated asynchronous state from `Other`, and leaves `Other` empty.  \n  \n##  <a name=\"promise__set_exception_method\"></a>  promise::set_exception  \n Atomically stores an exception as the result of this `promise` object and sets the *associated asynchronous state* to *ready*.  \n  \n```\nvoid set_exception(exception_ptr Exc);\n```  \n  \n### Parameters  \n `Exc`  \n An [exception_ptr](../standard-library/exception-typedefs.md#exception_ptr) that's stored by this method as the exception result.  \n  \n### Remarks  \n If the `promise` object has no associated asynchronous state, this method throws a [future_error](../standard-library/future-error-class.md) that has an error code of `no_state`.  \n  \n If `set_exception`, [set_exception_at_thread_exit](#promise__set_exception_at_thread_exit_method), [set_value](#promise__set_value_method), or [set_value_at_thread_exit](#promise__set_value_at_thread_exit_method) has already been called for a `promise` object that has the same associated asynchronous state, this method throws a `future_error` that has an error code of `promise_already_satisfied`.  \n  \n As a result of this method, any threads that are blocked on the associated asynchronous state become unblocked.  \n  \n##  <a name=\"promise__set_exception_at_thread_exit_method\"></a>  promise::set_exception_at_thread_exit  \n Atomically sets the result of this `promise` to indicate an exception, delivering the notification only after all thread-local objects in the current thread have been destroyed (usually at thread exit).  \n  \n```\nvoid set_exception_at_thread_exit(exception_ptr Exc);\n```  \n  \n### Parameters  \n `Exc`  \n An [exception_ptr](../standard-library/exception-typedefs.md#exception_ptr) that's stored by this method as the exception result.  \n  \n### Remarks  \n If the promise object has no *associated asynchronous state*, this method throws a [future_error](../standard-library/future-error-class.md) that has an error code of `no_state`.  \n  \n If [set_exception](#promise__set_exception_method), `set_exception_at_thread_exit`, [set_value](#promise__set_value_method), or [set_value_at_thread_exit](#promise__set_value_at_thread_exit_method) has already been called for a `promise` object that has the same associated asynchronous state, this method throws a `future_error` that has an error code of `promise_already_satisfied`.  \n  \n In contrast to [set_exception](#promise__set_exception_method), this method does not set the associated asynchronous state to ready until after all thread-local objects in the current thread have been destroyed. Typically, threads that are blocked on the associated asynchronous state are not unblocked until the current thread exits.  \n  \n##  <a name=\"promise__set_value_method\"></a>  promise::set_value  \n Atomically stores a value as the result of this `promise` object and sets the *associated asynchronous state* to *ready*.  \n  \n```\nvoid promise::set_value(const Ty& Val);\nvoid promise::set_value(Ty&& Val);\nvoid promise<Ty&>::set_value(Ty& Val);\nvoid promise<void>::set_value();\n```  \n  \n### Parameters  \n `Val`  \n The value to be stored as the result.  \n  \n### Remarks  \n If the `promise` object has no associated asynchronous state, this method throws a [future_error](../standard-library/future-error-class.md) that has an error code of `no_state`.  \n  \n If [set_exception](#promise__set_exception_method), [set_exception_at_thread_exit](#promise__set_exception_at_thread_exit_method), `set_value`, or [set_value_at_thread_exit](#promise__set_value_at_thread_exit_method) has already been called for a `promise` object that has the same associated asynchronous state, this method throws a `future_error` that has an error code of `promise_already_satisfied`.  \n  \n As a result of this method, any threads that are blocked on the associated asynchronous state become unblocked.  \n  \n The first method also throws any exception that is thrown when `Val` is copied into the associated asynchronous state. In this situation, the associated asynchronous state is not set to ready.  \n  \n The second method also throws any exception that is thrown when `Val` is moved into the associated asynchronous state. In this situation, the associated asynchronous state is not set to ready.  \n  \n For the partial specialization `promise<Ty&>`, the stored value is in effect a reference to `Val`.  \n  \n For the specialization `promise<void>`, no stored value exists.  \n  \n##  <a name=\"promise__set_value_at_thread_exit_method\"></a>  promise::set_value_at_thread_exit  \n Atomically stores a value as the result of this `promise` object.  \n  \n```\nvoid promise::set_value_at_thread_exit(const Ty& Val);\nvoid promise::set_value_at_thread_exit(Ty&& Val);\nvoid promise<Ty&>::set_value_at_thread_exit(Ty& Val);\nvoid promise<void>::set_value_at_thread_exit();\n```  \n  \n### Parameters  \n `Val`  \n The value to be stored as the result.  \n  \n### Remarks  \n If the promise object has no *associated asynchronous state*, this method throws a [future_error](../standard-library/future-error-class.md) that has an error code of `no_state`.  \n  \n If [set_exception](#promise__set_exception_method), [set_exception_at_thread_exit](#promise__set_exception_at_thread_exit_method), [set_value](#promise__set_value_method), or `set_value_at_thread_exit` has already been called for a `promise` object that has the same associated asynchronous state, this method throws a `future_error` that has an error code of `promise_already_satisfied`.  \n  \n In contrast to `set_value`, the associated asynchronous state is not set to ready until after all thread-local objects in the current thread have been destroyed. Typically, threads that are blocked on the associated asynchronous state are not unblocked until the current thread exits.  \n  \n The first method also throws any exception that is thrown when `Val` is copied into the associated asynchronous state.  \n  \n The second method also throws any exception that is thrown when `Val` is moved into the associated asynchronous state.  \n  \n For the partial specialization `promise<Ty&>`, the stored value is effectively a reference to `Val`.  \n  \n For the specialization `promise<void>`, no stored value exists.  \n  \n##  <a name=\"promise__swap_method\"></a>  promise::swap  \n Exchanges the *associated asynchronous state* of this promise object with that of a specified object.  \n  \n```\nvoid swap(promise& Other) noexcept;\n```  \n  \n### Parameters  \n `Other`  \n A `promise` object.  \n  \n## See Also  \n [Header Files Reference](../standard-library/cpp-standard-library-header-files.md)\n\n\n\n\n \n\n"}