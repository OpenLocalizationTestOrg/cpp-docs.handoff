{"nodes":[{"pos":[12,40],"content":"const (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"const (C++) | Microsoft Docs","pos":[0,28]}]},{"content":"const (C++)","pos":[621,632]},{"pos":[633,746],"content":"When modifying a data declaration, the <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> keyword specifies that the object or variable is not modifiable.","source":"When modifying a data declaration, the **const** keyword specifies that the object or variable is not modifiable."},{"content":"Syntax","pos":[755,761]},{"content":"const values","pos":[842,854]},{"pos":[858,993],"content":"The <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> keyword specifies that a variable's value is constant and tells the compiler to prevent the programmer from modifying it.","source":"The **const** keyword specifies that a variable's value is constant and tells the compiler to prevent the programmer from modifying it."},{"content":"In C++, you can use the <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> keyword instead of the <bpt id=\"p2\">[</bpt>#define<ept id=\"p2\">](../preprocessor/hash-define-directive-c-cpp.md)</ept> preprocessor directive to define constant values.","pos":[1127,1291],"source":"In C++, you can use the **const** keyword instead of the [#define](../preprocessor/hash-define-directive-c-cpp.md) preprocessor directive to define constant values."},{"content":"Values defined with <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> are subject to type checking, and can be used in place of constant expressions.","pos":[1292,1401],"source":" Values defined with **const** are subject to type checking, and can be used in place of constant expressions."},{"content":"In C++, you can specify the size of an array with a <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> variable as follows:","pos":[1402,1484],"source":" In C++, you can specify the size of an array with a **const** variable as follows:"},{"content":"In C, constant values default to external linkage, so they can appear only in source files.","pos":[1648,1739]},{"content":"In C++, constant values default to internal linkage, which allows them to appear in header files.","pos":[1740,1837]},{"pos":[1844,1907],"content":"The <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> keyword can also be used in pointer declarations.","source":"The **const** keyword can also be used in pointer declarations."},{"pos":[2095,2210],"content":"A pointer to a variable declared as <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> can be assigned only to a pointer that is also declared as <bpt id=\"p2\">**</bpt>const<ept id=\"p2\">**</ept>.","source":"A pointer to a variable declared as **const** can be assigned only to a pointer that is also declared as **const**."},{"content":"You can use pointers to constant data as function parameters to prevent the function from modifying a parameter passed through a pointer.","pos":[2519,2656]},{"content":"For objects that are declared as <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept>, you can only call constant member functions.","pos":[2663,2751],"source":"For objects that are declared as **const**, you can only call constant member functions."},{"content":"This ensures that the constant object is never modified.","pos":[2752,2808]},{"content":"You can call either constant or nonconstant member functions for a nonconstant object.","pos":[2899,2985]},{"content":"You can also overload a member function using the <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> keyword; this allows a different version of the function to be called for constant and nonconstant objects.","pos":[2986,3153],"source":" You can also overload a member function using the **const** keyword; this allows a different version of the function to be called for constant and nonconstant objects."},{"pos":[3160,3234],"content":"You cannot declare constructors or destructors with the <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> keyword.","source":"You cannot declare constructors or destructors with the **const** keyword."},{"content":"const member functions","pos":[3243,3265]},{"content":"Declaring a member function with the <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> keyword specifies that the function is a \"read-only\" function that does not modify the object for which it is called.","pos":[3269,3433],"source":"Declaring a member function with the **const** keyword specifies that the function is a \"read-only\" function that does not modify the object for which it is called."},{"content":"A constant member function cannot modify any non-static data members or call any member functions that aren't constant.To declare a constant member function, place the <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> keyword after the closing parenthesis of the argument list.","pos":[3434,3671],"source":" A constant member function cannot modify any non-static data members or call any member functions that aren't constant.To declare a constant member function, place the **const** keyword after the closing parenthesis of the argument list."},{"content":"The <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> keyword is required in both the declaration and the definition.","pos":[3672,3749],"source":" The **const** keyword is required in both the declaration and the definition."},{"content":"C and C++ const Differences","pos":[4425,4452]},{"pos":[4456,4535],"content":"When you declare a variable as <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> in a C source code file, you do so as:","source":"When you declare a variable as **const** in a C source code file, you do so as:"},{"content":"You can then use this variable in another module as follows:","pos":[4576,4636]},{"pos":[4680,4761],"content":"But to get the same behavior in C++, you must declare your <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> variable as:","source":"But to get the same behavior in C++, you must declare your **const** variable as:"},{"pos":[4809,4916],"content":"If you wish to declare an <ph id=\"ph1\">`extern`</ph> variable in a C++ source code file for use in a C source code file, use:","source":"If you wish to declare an `extern` variable in a C++ source code file for use in a C source code file, use:"},{"content":"to prevent name mangling by the C++ compiler.","pos":[4967,5012]},{"content":"Remarks","pos":[5021,5028]},{"pos":[5032,5184],"content":"When following a member function's parameter list, the <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> keyword specifies that the function does not modify the object for which it is invoked.","source":"When following a member function's parameter list, the **const** keyword specifies that the function does not modify the object for which it is invoked."},{"pos":[5191,5251],"content":"For more information on <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept>, see the following topics:","source":"For more information on **const**, see the following topics:"},{"content":"const and volatile Pointers","pos":[5264,5291]},{"content":"Type Qualifiers (C Language Reference)","pos":[5342,5380]},{"content":"volatile","pos":[5426,5434]},{"pos":[5469,5527],"content":"<bpt id=\"p1\">[</bpt>#define<ept id=\"p1\">](../preprocessor/hash-define-directive-c-cpp.md)</ept>.","source":"[#define](../preprocessor/hash-define-directive-c-cpp.md)."},{"content":"See Also","pos":[5536,5544]},{"content":"Keywords","pos":[5549,5557]}],"content":"---\ntitle: \"const (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"const_cpp\"\n  - \"const\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"const keyword [C++]\"\nms.assetid: b21c0271-1ad0-40a0-b21c-5e812bba0318\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# const (C++)\nWhen modifying a data declaration, the **const** keyword specifies that the object or variable is not modifiable.  \n  \n## Syntax  \n  \n```  \n  \n      const declaration ;  \nmember-function const ;  \n```  \n  \n## const values  \n The **const** keyword specifies that a variable's value is constant and tells the compiler to prevent the programmer from modifying it.  \n  \n```  \n// constant_values1.cpp  \nint main() {  \n   const int i = 5;  \n   i = 10;   // C3892  \n   i++;   // C2105  \n}  \n```  \n  \n In C++, you can use the **const** keyword instead of the [#define](../preprocessor/hash-define-directive-c-cpp.md) preprocessor directive to define constant values. Values defined with **const** are subject to type checking, and can be used in place of constant expressions. In C++, you can specify the size of an array with a **const** variable as follows:  \n  \n```  \n// constant_values2.cpp  \n// compile with: /c  \nconst int maxarray = 255;  \nchar store_char[maxarray];  // allowed in C++; not allowed in C  \n```  \n  \n In C, constant values default to external linkage, so they can appear only in source files. In C++, constant values default to internal linkage, which allows them to appear in header files.  \n  \n The **const** keyword can also be used in pointer declarations.  \n  \n```  \n// constant_values3.cpp  \nint main() {  \n   char *mybuf = 0, *yourbuf;  \n   char *const aptr = mybuf;  \n   *aptr = 'a';   // OK  \n   aptr = yourbuf;   // C3892  \n}  \n```  \n  \n A pointer to a variable declared as **const** can be assigned only to a pointer that is also declared as **const**.  \n  \n```  \n// constant_values4.cpp  \n#include <stdio.h>  \nint main() {  \n   const char *mybuf = \"test\";  \n   char *yourbuf = \"test2\";  \n   printf_s(\"%s\\n\", mybuf);  \n  \n   const char *bptr = mybuf;   // Pointer to constant data  \n   printf_s(\"%s\\n\", bptr);  \n  \n   // *bptr = 'a';   // Error  \n}  \n```  \n  \n You can use pointers to constant data as function parameters to prevent the function from modifying a parameter passed through a pointer.  \n  \n For objects that are declared as **const**, you can only call constant member functions. This ensures that the constant object is never modified.  \n  \n```  \nbirthday.getMonth();    // Okay  \nbirthday.setMonth( 4 ); // Error  \n```  \n  \n You can call either constant or nonconstant member functions for a nonconstant object. You can also overload a member function using the **const** keyword; this allows a different version of the function to be called for constant and nonconstant objects.  \n  \n You cannot declare constructors or destructors with the **const** keyword.  \n  \n## const member functions  \n Declaring a member function with the **const** keyword specifies that the function is a \"read-only\" function that does not modify the object for which it is called. A constant member function cannot modify any non-static data members or call any member functions that aren't constant.To declare a constant member function, place the **const** keyword after the closing parenthesis of the argument list. The **const** keyword is required in both the declaration and the definition.  \n  \n```  \n// constant_member_function.cpp  \nclass Date  \n{  \npublic:  \n   Date( int mn, int dy, int yr );  \n   int getMonth() const;     // A read-only function  \n   void setMonth( int mn );   // A write function; can't be const  \nprivate:  \n   int month;  \n};  \n  \nint Date::getMonth() const  \n{  \n   return month;        // Doesn't modify anything  \n}  \nvoid Date::setMonth( int mn )  \n{  \n   month = mn;          // Modifies data member  \n}  \nint main()  \n{  \n   Date MyDate( 7, 4, 1998 );  \n   const Date BirthDate( 1, 18, 1953 );  \n   MyDate.setMonth( 4 );    // Okay  \n   BirthDate.getMonth();    // Okay  \n   BirthDate.setMonth( 4 ); // C2662 Error  \n}  \n```  \n  \n## C and C++ const Differences  \n When you declare a variable as **const** in a C source code file, you do so as:  \n  \n```  \nconst int i = 2;  \n```  \n  \n You can then use this variable in another module as follows:  \n  \n```  \nextern const int i;  \n```  \n  \n But to get the same behavior in C++, you must declare your **const** variable as:  \n  \n```  \nextern const int i = 2;  \n```  \n  \n If you wish to declare an `extern` variable in a C++ source code file for use in a C source code file, use:  \n  \n```  \nextern \"C\" const int x=10;  \n```  \n  \n to prevent name mangling by the C++ compiler.  \n  \n## Remarks  \n When following a member function's parameter list, the **const** keyword specifies that the function does not modify the object for which it is invoked.  \n  \n For more information on **const**, see the following topics:  \n    \n-   [const and volatile Pointers](../cpp/const-and-volatile-pointers.md)  \n  \n-   [Type Qualifiers (C Language Reference)](../c-language/type-qualifiers.md)  \n  \n-   [volatile](../cpp/volatile-cpp.md)  \n  \n-   [#define](../preprocessor/hash-define-directive-c-cpp.md).  \n  \n## See Also  \n [Keywords](../cpp/keywords-cpp.md)"}