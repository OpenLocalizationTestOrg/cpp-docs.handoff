{"nodes":[{"pos":[12,51],"content":"CDocObjectServer Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CDocObjectServer Class | Microsoft Docs","pos":[0,39]}]},{"pos":[793,815],"content":"CDocObjectServer Class","linkify":"CDocObjectServer Class","nodes":[{"content":"CDocObjectServer Class","pos":[0,22]}]},{"pos":[816,1003],"content":"Implements the additional OLE interfaces needed to make a normal <ph id=\"ph1\">`COleDocument`</ph> server into a full DocObject server: <ph id=\"ph2\">`IOleDocument`</ph>, <ph id=\"ph3\">`IOleDocumentView`</ph>, <ph id=\"ph4\">`IOleCommandTarget`</ph>, and <ph id=\"ph5\">`IPrint`</ph>.","source":"Implements the additional OLE interfaces needed to make a normal `COleDocument` server into a full DocObject server: `IOleDocument`, `IOleDocumentView`, `IOleCommandTarget`, and `IPrint`."},{"pos":[1012,1018],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1087,1094],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1104,1123],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1130,1134]},{"content":"Description","pos":[1135,1146]},{"pos":[1184,1257],"content":"<bpt id=\"p1\">[</bpt>CDocObjectServer::CDocObjectServer<ept id=\"p1\">](#cdocobjectserver__cdocobjectserver)</ept>","source":"[CDocObjectServer::CDocObjectServer](#cdocobjectserver__cdocobjectserver)"},{"pos":[1258,1297],"content":"Constructs a <ph id=\"ph1\">`CDocObjectServer`</ph> object.","source":"Constructs a `CDocObjectServer` object."},{"pos":[1308,1322],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1329,1333]},{"content":"Description","pos":[1334,1345]},{"pos":[1383,1458],"content":"<bpt id=\"p1\">[</bpt>CDocObjectServer::ActivateDocObject<ept id=\"p1\">](#cdocobjectserver__activatedocobject)</ept>","source":"[CDocObjectServer::ActivateDocObject](#cdocobjectserver__activatedocobject)"},{"content":"Activates the document object server, but does not show it.","pos":[1459,1518]},{"pos":[1529,1546],"content":"Protected Methods","linkify":"Protected Methods","nodes":[{"content":"Protected Methods","pos":[0,17]}]},{"content":"Name","pos":[1553,1557]},{"content":"Description","pos":[1558,1569]},{"pos":[1607,1676],"content":"<bpt id=\"p1\">[</bpt>CDocObjectServer::OnActivateView<ept id=\"p1\">](#cdocobjectserver__onactivateview)</ept>","source":"[CDocObjectServer::OnActivateView](#cdocobjectserver__onactivateview)"},{"content":"Displays the DocObject view.","pos":[1677,1705]},{"pos":[1710,1783],"content":"<bpt id=\"p1\">[</bpt>CDocObjectServer::OnApplyViewState<ept id=\"p1\">](#cdocobjectserver__onapplyviewstate)</ept>","source":"[CDocObjectServer::OnApplyViewState](#cdocobjectserver__onapplyviewstate)"},{"content":"Restores the state of the DocObject view.","pos":[1784,1825]},{"pos":[1830,1901],"content":"<bpt id=\"p1\">[</bpt>CDocObjectServer::OnSaveViewState<ept id=\"p1\">](#cdocobjectserver__onsaveviewstate)</ept>","source":"[CDocObjectServer::OnSaveViewState](#cdocobjectserver__onsaveviewstate)"},{"content":"Saves the state of the DocObject view.","pos":[1902,1940]},{"pos":[1950,1957],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1961,2073],"content":"<ph id=\"ph1\">`CDocObjectServer`</ph> is derived from <ph id=\"ph2\">`CCmdTarget`</ph> and works closely with <ph id=\"ph3\">`COleServerDoc`</ph> to expose the interfaces.","source":"`CDocObjectServer` is derived from `CCmdTarget` and works closely with `COleServerDoc` to expose the interfaces."},{"pos":[2080,2259],"content":"A DocObject server document can contain <bpt id=\"p1\">[</bpt>CDocObjectServerItem<ept id=\"p1\">](../../mfc/reference/cdocobjectserveritem-class.md)</ept> objects, which represent the server interface to DocObject items.","source":"A DocObject server document can contain [CDocObjectServerItem](../../mfc/reference/cdocobjectserveritem-class.md) objects, which represent the server interface to DocObject items."},{"content":"To customize your DocObject server, derive your own class from <ph id=\"ph1\">`CDocObjectServer`</ph> and override its view setup functions, <bpt id=\"p1\">[</bpt>OnActivateView<ept id=\"p1\">](#cdocobjectserver__onactivateview)</ept>, <bpt id=\"p2\">[</bpt>OnApplyViewState<ept id=\"p2\">](#cdocobjectserver__onapplyviewstate)</ept>, and <bpt id=\"p3\">[</bpt>OnSaveViewState<ept id=\"p3\">](#cdocobjectserver__onsaveviewstate)</ept>.","pos":[2266,2555],"source":"To customize your DocObject server, derive your own class from `CDocObjectServer` and override its view setup functions, [OnActivateView](#cdocobjectserver__onactivateview), [OnApplyViewState](#cdocobjectserver__onapplyviewstate), and [OnSaveViewState](#cdocobjectserver__onsaveviewstate)."},{"content":"You will need to provide a new instance of your class in response to framework calls.","pos":[2556,2641]},{"content":"For further information on DocObjects, see <bpt id=\"p1\">[</bpt>CDocObjectServerItem<ept id=\"p1\">](../../mfc/reference/cdocobjectserveritem-class.md)</ept> and <bpt id=\"p2\">[</bpt>COleCmdUI<ept id=\"p2\">](../../mfc/reference/colecmdui-class.md)</ept> in the <bpt id=\"p3\">*</bpt>MFC Reference<ept id=\"p3\">*</ept>.","pos":[2648,2844],"source":"For further information on DocObjects, see [CDocObjectServerItem](../../mfc/reference/cdocobjectserveritem-class.md) and [COleCmdUI](../../mfc/reference/colecmdui-class.md) in the *MFC Reference*."},{"content":"Also see <bpt id=\"p1\">[</bpt>Internet First Steps: Active Documents<ept id=\"p1\">](../../mfc/active-documents-on-the-internet.md)</ept> and <bpt id=\"p2\">[</bpt>Active Documents<ept id=\"p2\">](../../mfc/active-documents-on-the-internet.md)</ept>.","pos":[2845,3012],"source":" Also see [Internet First Steps: Active Documents](../../mfc/active-documents-on-the-internet.md) and [Active Documents](../../mfc/active-documents-on-the-internet.md)."},{"content":"Also see the following Knowledge Base article:","pos":[3019,3065]},{"content":"Q247382 : PRB: ToolTips for Controls in ActiveX Document Server Are Hidden by the ActiveX Document Container","pos":[3075,3183]},{"pos":[3192,3213],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[3217,3264],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[3271,3324],"content":"<bpt id=\"p1\">[</bpt>CCmdTarget<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept>","source":"[CCmdTarget](../../mfc/reference/ccmdtarget-class.md)"},{"pos":[3358,3370],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3374,3396],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxdocob.h","source":"**Header:** afxdocob.h"},{"pos":[3406,3493],"content":"<bpt id=\"p1\">&lt;a name=\"cdocobjectserver__activatedocobject\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDocObjectServer::ActivateDocObject","linkify":"<a name=\"cdocobjectserver__activatedocobject\"></a>  CDocObjectServer::ActivateDocObject","source":"<a name=\"cdocobjectserver__activatedocobject\"></a>  CDocObjectServer::ActivateDocObject"},{"content":"Call this function to activate (but not show) the document object server.","pos":[3497,3570]},{"pos":[3621,3628],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3632,3902],"content":"<ph id=\"ph1\">`ActivateDocObject`</ph> calls <ph id=\"ph2\">`IOleDocumentSite`</ph>'s <bpt id=\"p1\">**</bpt>ActivateMe<ept id=\"p1\">**</ept> method, but does not show the view because it waits for specific instructions on how to set up and display the view, given in the call to <bpt id=\"p2\">[</bpt>CDocObjectServer::OnActivateView<ept id=\"p2\">](#cdocobjectserver__onactivateview)</ept>.","source":"`ActivateDocObject` calls `IOleDocumentSite`'s **ActivateMe** method, but does not show the view because it waits for specific instructions on how to set up and display the view, given in the call to [CDocObjectServer::OnActivateView](#cdocobjectserver__onactivateview)."},{"content":"Together, <ph id=\"ph1\">`ActivateDocObject`</ph> and <ph id=\"ph2\">`OnActivateView`</ph> activate and display the DocObject view.","pos":[3909,4000],"source":"Together, `ActivateDocObject` and `OnActivateView` activate and display the DocObject view."},{"content":"DocObject activation differs from other kinds of OLE in-place activation.","pos":[4001,4074]},{"content":"DocObject activation bypasses displaying in-place hatch borders and object adornments (such as sizing handles), ignores object extent functions, and draws scroll bars within the view rectangle as opposed to drawing them outside that rectangle (as in normal in-place activation).","pos":[4075,4353]},{"pos":[4363,4448],"content":"<bpt id=\"p1\">&lt;a name=\"cdocobjectserver__cdocobjectserver\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDocObjectServer::CDocObjectServer","linkify":"<a name=\"cdocobjectserver__cdocobjectserver\"></a>  CDocObjectServer::CDocObjectServer","source":"<a name=\"cdocobjectserver__cdocobjectserver\"></a>  CDocObjectServer::CDocObjectServer"},{"pos":[4452,4507],"content":"Constructs and initializes a <ph id=\"ph1\">`CDocObjectServer`</ph> object.","source":"Constructs and initializes a `CDocObjectServer` object."},{"pos":[4628,4638],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>pOwner<ept id=\"p1\">*</ept>","pos":[4642,4650],"source":"*pOwner*"},{"content":"A pointer to the client site document that is the client for the DocObject server.","pos":[4654,4736]},{"content":"A pointer to the <ph id=\"ph1\">`IOleDocumentSite`</ph> interface implemented by the container.","pos":[4757,4832],"source":" A pointer to the `IOleDocumentSite` interface implemented by the container."},{"pos":[4842,4849],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When a DocObject is active, the client site OLE interface ( <ph id=\"ph1\">`IOleDocumentSite`</ph>) is what allows the DocObject server to communicate with its client (the container).","pos":[4853,5016],"source":"When a DocObject is active, the client site OLE interface ( `IOleDocumentSite`) is what allows the DocObject server to communicate with its client (the container)."},{"content":"When a DocObject server is activated, it first checks that the container implements the <ph id=\"ph1\">`IOleDocumentSite`</ph> interface.","pos":[5017,5134],"source":" When a DocObject server is activated, it first checks that the container implements the `IOleDocumentSite` interface."},{"content":"If so, <bpt id=\"p1\">[</bpt>COleServerDoc::GetDocObjectServer<ept id=\"p1\">](../../mfc/reference/coleserverdoc-class.md#coleserverdoc__getdocobjectserver)</ept> is called to see if the container supports DocObjects.","pos":[5135,5310],"source":" If so, [COleServerDoc::GetDocObjectServer](../../mfc/reference/coleserverdoc-class.md#coleserverdoc__getdocobjectserver) is called to see if the container supports DocObjects."},{"content":"By default, <ph id=\"ph1\">`GetDocObjectServer`</ph> returns <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[5311,5361],"source":" By default, `GetDocObjectServer` returns **NULL**."},{"content":"You must override <ph id=\"ph1\">`COleServerDoc::GetDocObjectServer`</ph> to construct a new <ph id=\"ph2\">`CDocObjectServer`</ph> object or a derived object of your own, with pointers to the <ph id=\"ph3\">`COleServerDoc`</ph> container and its <ph id=\"ph4\">`IOleDocumentSite`</ph> interface as arguments to the constructor.","pos":[5362,5610],"source":" You must override `COleServerDoc::GetDocObjectServer` to construct a new `CDocObjectServer` object or a derived object of your own, with pointers to the `COleServerDoc` container and its `IOleDocumentSite` interface as arguments to the constructor."},{"pos":[5620,5701],"content":"<bpt id=\"p1\">&lt;a name=\"cdocobjectserver__onactivateview\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDocObjectServer::OnActivateView","linkify":"<a name=\"cdocobjectserver__onactivateview\"></a>  CDocObjectServer::OnActivateView","source":"<a name=\"cdocobjectserver__onactivateview\"></a>  CDocObjectServer::OnActivateView"},{"content":"Call this function to display the DocObject view.","pos":[5705,5754]},{"pos":[5813,5825],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns an error or warning value.","pos":[5829,5863]},{"content":"By default, returns <bpt id=\"p1\">**</bpt>NOERROR<ept id=\"p1\">**</ept> if successful; otherwise, <bpt id=\"p2\">**</bpt>E_FAIL<ept id=\"p2\">**</ept>.","pos":[5864,5933],"source":" By default, returns **NOERROR** if successful; otherwise, **E_FAIL**."},{"pos":[5943,5950],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function creates an in-place frame window, draws scrollbars within the view, sets up the menus the server shares with its container, adds frame controls, sets the active object, then finally shows the in-place frame window and sets the focus.","pos":[5954,6201]},{"pos":[6211,6296],"content":"<bpt id=\"p1\">&lt;a name=\"cdocobjectserver__onapplyviewstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDocObjectServer::OnApplyViewState","linkify":"<a name=\"cdocobjectserver__onapplyviewstate\"></a>  CDocObjectServer::OnApplyViewState","source":"<a name=\"cdocobjectserver__onapplyviewstate\"></a>  CDocObjectServer::OnApplyViewState"},{"content":"Override this function to restore the state of the DocObject view.","pos":[6300,6366]},{"pos":[6436,6446],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <ph id=\"ph1\">`CArchive`</ph> object from which to serialize the view state.","pos":[6458,6517],"source":" A `CArchive` object from which to serialize the view state."},{"pos":[6527,6534],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function is called when the view is being displayed for the first time after its instantiation.","pos":[6538,6638]},{"content":"<ph id=\"ph1\">`OnApplyViewState`</ph> instructs a view to reinitialize itself according to the data in the <ph id=\"ph2\">`CArchive`</ph> object previously saved with <bpt id=\"p1\">[</bpt>OnSaveViewState<ept id=\"p1\">](#cdocobjectserver__onsaveviewstate)</ept>.","pos":[6639,6821],"source":"`OnApplyViewState` instructs a view to reinitialize itself according to the data in the `CArchive` object previously saved with [OnSaveViewState](#cdocobjectserver__onsaveviewstate)."},{"content":"The view must validate the data in the <ph id=\"ph1\">`CArchive`</ph> object because the container does not attempt to interpret the view state data in any way.","pos":[6822,6962],"source":" The view must validate the data in the `CArchive` object because the container does not attempt to interpret the view state data in any way."},{"content":"You can use <ph id=\"ph1\">`OnSaveViewState`</ph> to store persistent information specific to your view's state.","pos":[6969,7061],"source":"You can use `OnSaveViewState` to store persistent information specific to your view's state."},{"content":"If you override <ph id=\"ph1\">`OnSaveViewState`</ph> to store information, you will want to override <ph id=\"ph2\">`OnApplyViewState`</ph> to read that information and apply it to your view when it is newly activated.","pos":[7062,7241],"source":" If you override `OnSaveViewState` to store information, you will want to override `OnApplyViewState` to read that information and apply it to your view when it is newly activated."},{"pos":[7251,7334],"content":"<bpt id=\"p1\">&lt;a name=\"cdocobjectserver__onsaveviewstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDocObjectServer::OnSaveViewState","linkify":"<a name=\"cdocobjectserver__onsaveviewstate\"></a>  CDocObjectServer::OnSaveViewState","source":"<a name=\"cdocobjectserver__onsaveviewstate\"></a>  CDocObjectServer::OnSaveViewState"},{"content":"Override this function to save extra state information about your DocObject view.","pos":[7338,7419]},{"pos":[7488,7498],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <ph id=\"ph1\">`CArchive`</ph> object to which the view state is serialized.","pos":[7510,7568],"source":" A `CArchive` object to which the view state is serialized."},{"pos":[7578,7585],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Your state might include properties like the view type, zoom factor, insertion and selection point, and so on.","pos":[7589,7699]},{"content":"The container typically calls this function before deactivating the view.","pos":[7700,7773]},{"content":"The saved state can later be restored through <bpt id=\"p1\">[</bpt>OnApplyViewState<ept id=\"p1\">](#cdocobjectserver__onapplyviewstate)</ept>.","pos":[7774,7876],"source":" The saved state can later be restored through [OnApplyViewState](#cdocobjectserver__onapplyviewstate)."},{"content":"You can use <ph id=\"ph1\">`OnSaveViewState`</ph> to store persistent information specific to your view's state.","pos":[7883,7975],"source":"You can use `OnSaveViewState` to store persistent information specific to your view's state."},{"content":"If you override <ph id=\"ph1\">`OnSaveViewState`</ph> to store information, you will want to override <ph id=\"ph2\">`OnApplyViewState`</ph> to read that information and apply it to your view when it is newly activated.","pos":[7976,8155],"source":" If you override `OnSaveViewState` to store information, you will want to override `OnApplyViewState` to read that information and apply it to your view when it is newly activated."},{"pos":[8164,8172],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>CCmdTarget Class<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[8176,8236],"source":"[CCmdTarget Class](../../mfc/reference/ccmdtarget-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[8239,8288],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CDocObjectServerItem Class<ept id=\"p1\">](../../mfc/reference/cdocobjectserveritem-class.md)</ept>","pos":[8291,8371],"source":" [CDocObjectServerItem Class](../../mfc/reference/cdocobjectserveritem-class.md)"}],"content":"---\ntitle: \"CDocObjectServer Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CDocObjectServer\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"document object server\"\n  - \"CDocObjectServer class\"\n  - \"servers [C++], ActiveX documents\"\n  - \"docobject server\"\n  - \"servers [C++], doc objects\"\n  - \"ActiveX documents [C++], document server\"\nms.assetid: 18cd0dff-0616-4472-b8d9-66c081bc383a\ncaps.latest.revision: 23\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CDocObjectServer Class\nImplements the additional OLE interfaces needed to make a normal `COleDocument` server into a full DocObject server: `IOleDocument`, `IOleDocumentView`, `IOleCommandTarget`, and `IPrint`.  \n  \n## Syntax  \n  \n```  \nclass CDocObjectServer : public CCmdTarget  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CDocObjectServer::CDocObjectServer](#cdocobjectserver__cdocobjectserver)|Constructs a `CDocObjectServer` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CDocObjectServer::ActivateDocObject](#cdocobjectserver__activatedocobject)|Activates the document object server, but does not show it.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CDocObjectServer::OnActivateView](#cdocobjectserver__onactivateview)|Displays the DocObject view.|  \n|[CDocObjectServer::OnApplyViewState](#cdocobjectserver__onapplyviewstate)|Restores the state of the DocObject view.|  \n|[CDocObjectServer::OnSaveViewState](#cdocobjectserver__onsaveviewstate)|Saves the state of the DocObject view.|  \n  \n## Remarks  \n `CDocObjectServer` is derived from `CCmdTarget` and works closely with `COleServerDoc` to expose the interfaces.  \n  \n A DocObject server document can contain [CDocObjectServerItem](../../mfc/reference/cdocobjectserveritem-class.md) objects, which represent the server interface to DocObject items.  \n  \n To customize your DocObject server, derive your own class from `CDocObjectServer` and override its view setup functions, [OnActivateView](#cdocobjectserver__onactivateview), [OnApplyViewState](#cdocobjectserver__onapplyviewstate), and [OnSaveViewState](#cdocobjectserver__onsaveviewstate). You will need to provide a new instance of your class in response to framework calls.  \n  \n For further information on DocObjects, see [CDocObjectServerItem](../../mfc/reference/cdocobjectserveritem-class.md) and [COleCmdUI](../../mfc/reference/colecmdui-class.md) in the *MFC Reference*. Also see [Internet First Steps: Active Documents](../../mfc/active-documents-on-the-internet.md) and [Active Documents](../../mfc/active-documents-on-the-internet.md).  \n  \n Also see the following Knowledge Base article:  \n  \n-   Q247382 : PRB: ToolTips for Controls in ActiveX Document Server Are Hidden by the ActiveX Document Container  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n `CDocObjectServer`  \n  \n## Requirements  \n **Header:** afxdocob.h  \n  \n##  <a name=\"cdocobjectserver__activatedocobject\"></a>  CDocObjectServer::ActivateDocObject  \n Call this function to activate (but not show) the document object server.  \n  \n```  \nvoid ActivateDocObject();\n```  \n  \n### Remarks  \n `ActivateDocObject` calls `IOleDocumentSite`'s **ActivateMe** method, but does not show the view because it waits for specific instructions on how to set up and display the view, given in the call to [CDocObjectServer::OnActivateView](#cdocobjectserver__onactivateview).  \n  \n Together, `ActivateDocObject` and `OnActivateView` activate and display the DocObject view. DocObject activation differs from other kinds of OLE in-place activation. DocObject activation bypasses displaying in-place hatch borders and object adornments (such as sizing handles), ignores object extent functions, and draws scroll bars within the view rectangle as opposed to drawing them outside that rectangle (as in normal in-place activation).  \n  \n##  <a name=\"cdocobjectserver__cdocobjectserver\"></a>  CDocObjectServer::CDocObjectServer  \n Constructs and initializes a `CDocObjectServer` object.  \n  \n```  \nexplicit CDocObjectServer(\n    COleServerDoc* pOwner,  \n    LPOLEDOCUMENTSITE pDocSite = NULL);\n```  \n  \n### Parameters  \n *pOwner*  \n A pointer to the client site document that is the client for the DocObject server.  \n  \n `pDocSite`  \n A pointer to the `IOleDocumentSite` interface implemented by the container.  \n  \n### Remarks  \n When a DocObject is active, the client site OLE interface ( `IOleDocumentSite`) is what allows the DocObject server to communicate with its client (the container). When a DocObject server is activated, it first checks that the container implements the `IOleDocumentSite` interface. If so, [COleServerDoc::GetDocObjectServer](../../mfc/reference/coleserverdoc-class.md#coleserverdoc__getdocobjectserver) is called to see if the container supports DocObjects. By default, `GetDocObjectServer` returns **NULL**. You must override `COleServerDoc::GetDocObjectServer` to construct a new `CDocObjectServer` object or a derived object of your own, with pointers to the `COleServerDoc` container and its `IOleDocumentSite` interface as arguments to the constructor.  \n  \n##  <a name=\"cdocobjectserver__onactivateview\"></a>  CDocObjectServer::OnActivateView  \n Call this function to display the DocObject view.  \n  \n```  \nvirtual HRESULT OnActivateView();\n```  \n  \n### Return Value  \n Returns an error or warning value. By default, returns **NOERROR** if successful; otherwise, **E_FAIL**.  \n  \n### Remarks  \n This function creates an in-place frame window, draws scrollbars within the view, sets up the menus the server shares with its container, adds frame controls, sets the active object, then finally shows the in-place frame window and sets the focus.  \n  \n##  <a name=\"cdocobjectserver__onapplyviewstate\"></a>  CDocObjectServer::OnApplyViewState  \n Override this function to restore the state of the DocObject view.  \n  \n```  \nvirtual void OnApplyViewState(CArchive& ar);\n```  \n  \n### Parameters  \n `ar`  \n A `CArchive` object from which to serialize the view state.  \n  \n### Remarks  \n This function is called when the view is being displayed for the first time after its instantiation. `OnApplyViewState` instructs a view to reinitialize itself according to the data in the `CArchive` object previously saved with [OnSaveViewState](#cdocobjectserver__onsaveviewstate). The view must validate the data in the `CArchive` object because the container does not attempt to interpret the view state data in any way.  \n  \n You can use `OnSaveViewState` to store persistent information specific to your view's state. If you override `OnSaveViewState` to store information, you will want to override `OnApplyViewState` to read that information and apply it to your view when it is newly activated.  \n  \n##  <a name=\"cdocobjectserver__onsaveviewstate\"></a>  CDocObjectServer::OnSaveViewState  \n Override this function to save extra state information about your DocObject view.  \n  \n```  \nvirtual void OnSaveViewState(CArchive& ar);\n```  \n  \n### Parameters  \n `ar`  \n A `CArchive` object to which the view state is serialized.  \n  \n### Remarks  \n Your state might include properties like the view type, zoom factor, insertion and selection point, and so on. The container typically calls this function before deactivating the view. The saved state can later be restored through [OnApplyViewState](#cdocobjectserver__onapplyviewstate).  \n  \n You can use `OnSaveViewState` to store persistent information specific to your view's state. If you override `OnSaveViewState` to store information, you will want to override `OnApplyViewState` to read that information and apply it to your view when it is newly activated.  \n  \n## See Also  \n [CCmdTarget Class](../../mfc/reference/ccmdtarget-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CDocObjectServerItem Class](../../mfc/reference/cdocobjectserveritem-class.md)\n"}