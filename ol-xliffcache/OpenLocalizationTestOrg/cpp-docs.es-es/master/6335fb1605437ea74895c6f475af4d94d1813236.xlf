<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6335fb1605437ea74895c6f475af4d94d1813236</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\keywords-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa43b96b677dd9d5a85e7dc482fba4ac3b383a6a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cd0fd7559bf5e052a7b24a93bc6d711d3aaa0eda</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Keywords (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Keywords (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Keywords are predefined reserved identifiers that have special meanings.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>They cannot be used as identifiers in your program.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following keywords are reserved for Microsoft C++.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Names with leading underscores are Microsoft extensions.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>__abstract<ept id="p1">](../dotnet/declaration-of-a-managed-class-type.md)</ept> <ph id="ph1">&lt;sup&gt;</ph>2</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>__alignof Operator</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>__asm</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>__assume</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>__based</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>__box<ept id="p1">](../dotnet/value-type-semantics.md)</ept> <ph id="ph1">&lt;sup&gt;</ph>2</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>__cdecl</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>__declspec</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>__delegate<ept id="p1">](../dotnet/delegates-and-events.md)</ept> <ph id="ph1">&lt;sup&gt;</ph>2</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>__event</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>__except</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>__fastcall</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>__finally</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>__forceinline</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>__gc<ept id="p1">](../dotnet/declaration-of-a-clr-reference-class-object.md)</ept> <ph id="ph1">&lt;sup&gt;</ph>2</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>__hook<ept id="p1">](../cpp/hook.md)</ept> <ph id="ph1">&lt;sup&gt;</ph>3</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>__identifier</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>__if_exists</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>__if_not_exists</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>__inline</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>__int16</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>__int32</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>__int64</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>__int8</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>__interface</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>__leave</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>__m128</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>__m128d</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>__m128i</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>__m64</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>__multiple_inheritance</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>__nogc<ept id="p1">](../dotnet/declaration-of-a-clr-reference-class-object.md)</ept> <ph id="ph1">&lt;sup&gt;</ph>2</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>__noop</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>__raise</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>__single_inheritance</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>__stdcall</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>__super</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>__thiscall</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>__try/<ph id="ph1">\_</ph>_except<ept id="p1">](../cpp/try-except-statement.md)</ept>, <bpt id="p2">[</bpt>__try/<ph id="ph2">\_</ph>_finally<ept id="p2">](../cpp/try-finally-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>__try_cast<ept id="p1">](../dotnet/cast-notation-and-introduction-of-safe-cast-angles.md)</ept> <ph id="ph1">&lt;sup&gt;</ph>2</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>__unaligned</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>__unhook<ept id="p1">](../cpp/unhook.md)</ept> <ph id="ph1">&lt;sup&gt;</ph>3</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>__uuidof</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>__value<ept id="p1">](../dotnet/value-type-semantics.md)</ept> <ph id="ph1">&lt;sup&gt;</ph>2</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>__virtual_inheritance</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>__w64</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>__wchar_t, wchar_t</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>abstract</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>array</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>auto</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>bool</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>break</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>case</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>catch</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>char</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>class</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>const</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>const_cast</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>continue</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>decltype</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>default</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>delegate</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>delete</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>deprecated<ept id="p1">](../cpp/deprecated-cpp.md)</ept> <ph id="ph1">&lt;sup&gt;</ph>1</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>dllexport<ept id="p1">](../cpp/dllexport-dllimport.md)</ept> <ph id="ph1">&lt;sup&gt;</ph>1</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>dllimport<ept id="p1">](../cpp/dllexport-dllimport.md)</ept> <ph id="ph1">&lt;sup&gt;</ph>1</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>do</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>double</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>dynamic_cast</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>else</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>enum</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>enum class</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>enum struct</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>event</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>explicit</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>extern</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>false</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>finally</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>float</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>for</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>for each, in</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>friend</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>friend_as</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>gcnew</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>generic</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>goto</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>if</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>initonly</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>inline</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>int</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>interface class</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>interface struct</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>interior_ptr</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>literal</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>long</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>mutable</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>naked<ept id="p1">](../cpp/naked-cpp.md)</ept> <ph id="ph1">&lt;sup&gt;</ph>1</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>namespace</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>new</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>new</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>noinline<ept id="p1">](../cpp/noinline.md)</ept> <ph id="ph1">&lt;sup&gt;</ph>1</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>noreturn<ept id="p1">](../cpp/noreturn.md)</ept> <ph id="ph1">&lt;sup&gt;</ph>1</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>nothrow<ept id="p1">](../cpp/nothrow-cpp.md)</ept> <ph id="ph1">&lt;sup&gt;</ph>1</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>novtable<ept id="p1">](../cpp/novtable.md)</ept> <ph id="ph1">&lt;sup&gt;</ph>1</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>nullptr</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>operator</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>private</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>property</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>property<ept id="p1">](../cpp/property-cpp.md)</ept> <ph id="ph1">&lt;sup&gt;</ph>1</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>protected</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>public</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>ref class</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>ref struct</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>register</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>reinterpret_cast</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>return</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>safecast</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>sealed</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>selectany<ept id="p1">](../cpp/selectany.md)</ept> <ph id="ph1">&lt;sup&gt;</ph>1</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>short</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>signed</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>sizeof</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>static</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>static_assert</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>static_cast</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>struct</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>switch</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>template</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>this</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>thread<ept id="p1">](../cpp/thread.md)</ept> <ph id="ph1">&lt;sup&gt;</ph>1</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>throw</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>true</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>try</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>typedef</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>typeid</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>typeid</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>typename</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>union</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>unsigned</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>using<ept id="p1">](../cpp/using-declaration.md)</ept> declaration, <bpt id="p2">[</bpt>using<ept id="p2">](using-directive-cpp.md)</ept> directive</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>uuid<ept id="p1">](../cpp/uuid-cpp.md)</ept> <ph id="ph1">&lt;sup&gt;</ph>1</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>value class</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>value struct</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>virtual</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>void</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>volatile</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>while</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>1   Extended attributes for the <ph id="ph1">`__declspec`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>2   Applicable to Managed Extensions for C++ only.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>This syntax is now deprecated.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>3   Intrinsic function used in event handling.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Component Extensions for Runtime Platforms<ept id="p1">](../windows/component-extensions-for-runtime-platforms.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>In Microsoft C++, identifiers with two leading underscores are reserved for compiler implementations.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Therefore, the Microsoft convention is to precede Microsoft-specific keywords with double underscores.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>These words cannot be used as identifier names.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Microsoft extensions are enabled by default.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>To ensure that your programs are fully portable, you can disable Microsoft extensions by specifying the ANSI-compatible <bpt id="p1">[</bpt>/Za<ept id="p1">](../build/reference/za-ze-disable-language-extensions.md)</ept> command-line option (compile for ANSI compatibility) during compilation.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>When you do this, Microsoft-specific keywords are disabled.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>When Microsoft extensions are enabled, you can use the Microsoft-specific keywords in your programs.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>For ANSI compliance, these keywords are prefaced by a double underscore.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>For backward compatibility, single-underscore versions of all the double-underscored keywords except <ph id="ph1">`__except`</ph>, <ph id="ph2">`__finally`</ph>, <ph id="ph3">`__leave`</ph>, and <ph id="ph4">`__try`</ph> are supported.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>In addition, <ph id="ph1">`__cdecl`</ph> is available with no leading underscore.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`__asm`</ph> keyword replaces C++ <ph id="ph2">`asm`</ph> syntax.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>is reserved for compatibility with other C++ implementations, but not implemented.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`__asm`</ph>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`__based`</ph> keyword has limited uses for 32-bit and 64-bit target compilations.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Lexical Conventions</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>C++ Built-in Operators, Precedence and Associativity</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>