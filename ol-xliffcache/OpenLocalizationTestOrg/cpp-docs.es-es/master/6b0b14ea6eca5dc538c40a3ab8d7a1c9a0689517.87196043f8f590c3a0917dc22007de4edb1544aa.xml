{"nodes":[{"pos":[12,47],"content":"asctime, _wasctime | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"asctime, _wasctime | Microsoft Docs","pos":[0,35]}]},{"pos":[1116,1134],"content":"asctime, _wasctime","linkify":"asctime, _wasctime","nodes":[{"content":"asctime, _wasctime","pos":[0,18]}]},{"content":"Convert a <ph id=\"ph1\">`tm`</ph> time structure to a character string.","pos":[1135,1187],"source":"Convert a `tm` time structure to a character string."},{"content":"More secure versions of these functions are available; see <bpt id=\"p1\">[</bpt>asctime_s, _wasctime_s<ept id=\"p1\">](../../c-runtime-library/reference/asctime-s-wasctime-s.md)</ept>.","pos":[1188,1331],"source":" More secure versions of these functions are available; see [asctime_s, _wasctime_s](../../c-runtime-library/reference/asctime-s-wasctime-s.md)."},{"pos":[1340,1346],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1485,1495],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Time/date structure.","pos":[1512,1532]},{"pos":[1541,1553],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`asctime`</ph> returns a pointer to the character string result; <ph id=\"ph2\">`_wasctime`</ph> returns a pointer to the wide-character string result.","pos":[1557,1683],"source":"`asctime` returns a pointer to the character string result; `_wasctime` returns a pointer to the wide-character string result."},{"content":"There is no error return value.","pos":[1684,1715]},{"pos":[1724,1731],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1735,1878],"content":"More secure versions of these functions are available; see <bpt id=\"p1\">[</bpt>asctime_s, _wasctime_s<ept id=\"p1\">](../../c-runtime-library/reference/asctime-s-wasctime-s.md)</ept>.","source":"More secure versions of these functions are available; see [asctime_s, _wasctime_s](../../c-runtime-library/reference/asctime-s-wasctime-s.md)."},{"content":"The <ph id=\"ph1\">`asctime`</ph> function converts a time stored as a structure to a character string.","pos":[1885,1968],"source":"The `asctime` function converts a time stored as a structure to a character string."},{"content":"The <ph id=\"ph1\">`timeptr`</ph> value is usually obtained from a call to <ph id=\"ph2\">`gmtime`</ph> or <ph id=\"ph3\">`localtime`</ph>, which both return a pointer to a <ph id=\"ph4\">`tm`</ph> structure, defined in TIME.H.","pos":[1969,2116],"source":" The `timeptr` value is usually obtained from a call to `gmtime` or `localtime`, which both return a pointer to a `tm` structure, defined in TIME.H."},{"content":"timeptr member","pos":[2123,2137]},{"content":"Value","pos":[2138,2143]},{"content":"Hours since midnight (0–23)","pos":[2195,2222]},{"content":"Positive if daylight saving time is in effect; 0 if daylight saving time is not in effect; negative if status of daylight saving time is unknown.","pos":[2238,2383]},{"content":"The C run-time library assumes the United States' rules for implementing the calculation of Daylight Saving Time (DST).","pos":[2384,2503]},{"content":"Day of month (1–31)","pos":[2518,2537]},{"content":"Minutes after hour (0–59)","pos":[2551,2576]},{"content":"Month (0–11; January = 0)","pos":[2590,2615]},{"content":"Seconds after minute (0–59)","pos":[2629,2656]},{"content":"Day of week (0–6; Sunday = 0)","pos":[2671,2700]},{"content":"Day of year (0–365; January 1 = 0)","pos":[2715,2749]},{"content":"Year (current year minus 1900)","pos":[2764,2794]},{"content":"The converted character string is also adjusted according to the local time zone settings.","pos":[2802,2892]},{"content":"For information about configuring the local time, see the <bpt id=\"p1\">[</bpt>time<ept id=\"p1\">](../../c-runtime-library/reference/time-time32-time64.md)</ept>, <bpt id=\"p2\">[</bpt>_ftime<ept id=\"p2\">](../../c-runtime-library/reference/ftime-ftime32-ftime64.md)</ept>, and <bpt id=\"p3\">[</bpt>localtime<ept id=\"p3\">](../../c-runtime-library/reference/localtime-localtime32-localtime64.md)</ept> functions and the <bpt id=\"p4\">[</bpt>_tzset<ept id=\"p4\">](../../c-runtime-library/reference/tzset.md)</ept> function for information about defining the time zone environment and global variables.","pos":[2893,3332],"source":" For information about configuring the local time, see the [time](../../c-runtime-library/reference/time-time32-time64.md), [_ftime](../../c-runtime-library/reference/ftime-ftime32-ftime64.md), and [localtime](../../c-runtime-library/reference/localtime-localtime32-localtime64.md) functions and the [_tzset](../../c-runtime-library/reference/tzset.md) function for information about defining the time zone environment and global variables."},{"content":"The string result produced by <ph id=\"ph1\">`asctime`</ph> contains exactly 26 characters and has the form <ph id=\"ph2\">`Wed Jan 02 02:03:55 1980\\n\\0`</ph>.","pos":[3339,3458],"source":"The string result produced by `asctime` contains exactly 26 characters and has the form `Wed Jan 02 02:03:55 1980\\n\\0`."},{"content":"A 24-hour clock is used.","pos":[3459,3483]},{"content":"All fields have a constant width.","pos":[3484,3517]},{"content":"The newline character and the null character occupy the last two positions of the string.","pos":[3518,3607]},{"content":"<ph id=\"ph1\">`asctime`</ph> uses a single, statically allocated buffer to hold the return string.","pos":[3608,3687],"source":"`asctime` uses a single, statically allocated buffer to hold the return string."},{"content":"Each call to this function destroys the result of the previous call.","pos":[3688,3756]},{"content":"<ph id=\"ph1\">`_wasctime`</ph> is a wide-character version of <ph id=\"ph2\">`asctime`</ph>.","pos":[3763,3816],"source":"`_wasctime` is a wide-character version of `asctime`."},{"content":"<ph id=\"ph1\">`_wasctime`</ph> and <ph id=\"ph2\">`asctime`</ph> behave identically otherwise.","pos":[3817,3872],"source":"`_wasctime` and `asctime` behave identically otherwise."},{"content":"These functions validate their parameters.","pos":[3879,3921]},{"content":"If <ph id=\"ph1\">`timeptr`</ph> is a null pointer, or if it contains out-of-range values, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[3922,4123],"source":" If `timeptr` is a null pointer, or if it contains out-of-range values, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, the function returns <ph id=\"ph1\">`NULL`</ph> and sets <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`EINVAL`</ph>.","pos":[4124,4218],"source":" If execution is allowed to continue, the function returns `NULL` and sets `errno` to `EINVAL`."},{"pos":[4228,4256],"content":"Generic-Text Routine Mapping","linkify":"Generic-Text Routine Mapping","nodes":[{"content":"Generic-Text Routine Mapping","pos":[0,28]}]},{"content":"TCHAR.H routine","pos":[4263,4278]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[4279,4307],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[4308,4321]},{"content":"_UNICODE defined","pos":[4322,4338]},{"pos":[4504,4516],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[4523,4530]},{"content":"Required header","pos":[4531,4546]},{"content":"<ph id=\"ph1\">\\&lt;</ph>time.h&gt;","pos":[4601,4610],"source":"\\<time.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>time.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;","pos":[4627,4650],"source":"\\<time.h> or \\<wchar.h>"},{"pos":[4660,4667],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4671,4857],"content":"This program places the system time in the long integer <ph id=\"ph1\">`aclock`</ph>, translates it into the structure <ph id=\"ph2\">`newtime`</ph> and then converts it to string form for output, using the <ph id=\"ph3\">`asctime`</ph> function.","source":"This program places the system time in the long integer `aclock`, translates it into the structure `newtime` and then converts it to string form for output, using the `asctime` function."},{"pos":[5451,5476],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[5486,5602],"content":"<bpt id=\"p1\">[</bpt>System::DateTime::ToLongDateString<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.datetime.tolongdatestring.aspx)</ept>","source":"[System::DateTime::ToLongDateString](https://msdn.microsoft.com/en-us/library/system.datetime.tolongdatestring.aspx)"},{"pos":[5612,5728],"content":"<bpt id=\"p1\">[</bpt>System::DateTime::ToLongTimeString<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.datetime.tolongtimestring.aspx)</ept>","source":"[System::DateTime::ToLongTimeString](https://msdn.microsoft.com/en-us/library/system.datetime.tolongtimestring.aspx)"},{"pos":[5738,5856],"content":"<bpt id=\"p1\">[</bpt>System::DateTime::ToShortDateString<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.datetime.toshortdatestring.aspx)</ept>","source":"[System::DateTime::ToShortDateString](https://msdn.microsoft.com/en-us/library/system.datetime.toshortdatestring.aspx)"},{"pos":[5866,5984],"content":"<bpt id=\"p1\">[</bpt>System::DateTime::ToShortTimeString<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.datetime.toshorttimestring.aspx)</ept>","source":"[System::DateTime::ToShortTimeString](https://msdn.microsoft.com/en-us/library/system.datetime.toshorttimestring.aspx)"},{"pos":[5994,6094],"content":"<bpt id=\"p1\">[</bpt>System::DateTime::ToString<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.datetime.tostring.aspx)</ept>","source":"[System::DateTime::ToString](https://msdn.microsoft.com/en-us/library/system.datetime.tostring.aspx)"},{"pos":[6103,6111],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Time Management<ept id=\"p1\">](../../c-runtime-library/time-management.md)</ept><ph id=\"ph1\"> </ph>","pos":[6115,6177],"source":"[Time Management](../../c-runtime-library/time-management.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ctime, _ctime32, _ctime64, _wctime, _wctime32, _wctime64<ept id=\"p1\">](../../c-runtime-library/reference/ctime-ctime32-ctime64-wctime-wctime32-wctime64.md)</ept><ph id=\"ph1\"> </ph>","pos":[6180,6325],"source":" [ctime, _ctime32, _ctime64, _wctime, _wctime32, _wctime64](../../c-runtime-library/reference/ctime-ctime32-ctime64-wctime-wctime32-wctime64.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_ftime, _ftime32, _ftime64<ept id=\"p1\">](../../c-runtime-library/reference/ftime-ftime32-ftime64.md)</ept><ph id=\"ph1\"> </ph>","pos":[6328,6418],"source":" [_ftime, _ftime32, _ftime64](../../c-runtime-library/reference/ftime-ftime32-ftime64.md) "},{"content":"<bpt id=\"p1\"> [</bpt>gmtime, _gmtime32, _gmtime64<ept id=\"p1\">](../../c-runtime-library/reference/gmtime-gmtime32-gmtime64.md)</ept><ph id=\"ph1\"> </ph>","pos":[6421,6516],"source":" [gmtime, _gmtime32, _gmtime64](../../c-runtime-library/reference/gmtime-gmtime32-gmtime64.md) "},{"content":"<bpt id=\"p1\"> [</bpt>localtime, _localtime32, _localtime64<ept id=\"p1\">](../../c-runtime-library/reference/localtime-localtime32-localtime64.md)</ept><ph id=\"ph1\"> </ph>","pos":[6519,6632],"source":" [localtime, _localtime32, _localtime64](../../c-runtime-library/reference/localtime-localtime32-localtime64.md) "},{"content":"<bpt id=\"p1\"> [</bpt>time, _time32, _time64<ept id=\"p1\">](../../c-runtime-library/reference/time-time32-time64.md)</ept><ph id=\"ph1\"> </ph>","pos":[6635,6718],"source":" [time, _time32, _time64](../../c-runtime-library/reference/time-time32-time64.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_tzset<ept id=\"p1\">](../../c-runtime-library/reference/tzset.md)</ept><ph id=\"ph1\"> </ph>","pos":[6721,6775],"source":" [_tzset](../../c-runtime-library/reference/tzset.md) "},{"content":"<bpt id=\"p1\"> [</bpt>asctime_s, _wasctime_s<ept id=\"p1\">](../../c-runtime-library/reference/asctime-s-wasctime-s.md)</ept>","pos":[6778,6862],"source":" [asctime_s, _wasctime_s](../../c-runtime-library/reference/asctime-s-wasctime-s.md)"}],"content":"---\ntitle: \"asctime, _wasctime | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_wasctime\"\n  - \"asctime\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-time-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_tasctime\"\n  - \"asctime\"\n  - \"_wasctime\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"asctime function\"\n  - \"tasctime function\"\n  - \"wasctime function\"\n  - \"_tasctime function\"\n  - \"_wasctime function\"\n  - \"time structure conversion\"\n  - \"time, converting\"\nms.assetid: 974f1727-10ff-4ed4-8cac-2eb2d681f576\ncaps.latest.revision: 22\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# asctime, _wasctime\nConvert a `tm` time structure to a character string. More secure versions of these functions are available; see [asctime_s, _wasctime_s](../../c-runtime-library/reference/asctime-s-wasctime-s.md).  \n  \n## Syntax  \n  \n```  \nchar *asctime(   \n   const struct tm *timeptr   \n);  \nwchar_t *_wasctime(   \n   const struct tm *timeptr   \n);  \n```  \n  \n#### Parameters  \n `timeptr`  \n Time/date structure.  \n  \n## Return Value  \n `asctime` returns a pointer to the character string result; `_wasctime` returns a pointer to the wide-character string result. There is no error return value.  \n  \n## Remarks  \n More secure versions of these functions are available; see [asctime_s, _wasctime_s](../../c-runtime-library/reference/asctime-s-wasctime-s.md).  \n  \n The `asctime` function converts a time stored as a structure to a character string. The `timeptr` value is usually obtained from a call to `gmtime` or `localtime`, which both return a pointer to a `tm` structure, defined in TIME.H.  \n  \n|timeptr member|Value|  \n|--------------------|-----------|  \n|`tm_hour`|Hours since midnight (0–23)|  \n|`tm_isdst`|Positive if daylight saving time is in effect; 0 if daylight saving time is not in effect; negative if status of daylight saving time is unknown. The C run-time library assumes the United States' rules for implementing the calculation of Daylight Saving Time (DST).|  \n|`tm_mday`|Day of month (1–31)|  \n|`tm_min`|Minutes after hour (0–59)|  \n|`tm_mon`|Month (0–11; January = 0)|  \n|`tm_sec`|Seconds after minute (0–59)|  \n|`tm_wday`|Day of week (0–6; Sunday = 0)|  \n|`tm_yday`|Day of year (0–365; January 1 = 0)|  \n|`tm_year`|Year (current year minus 1900)|  \n  \n The converted character string is also adjusted according to the local time zone settings. For information about configuring the local time, see the [time](../../c-runtime-library/reference/time-time32-time64.md), [_ftime](../../c-runtime-library/reference/ftime-ftime32-ftime64.md), and [localtime](../../c-runtime-library/reference/localtime-localtime32-localtime64.md) functions and the [_tzset](../../c-runtime-library/reference/tzset.md) function for information about defining the time zone environment and global variables.  \n  \n The string result produced by `asctime` contains exactly 26 characters and has the form `Wed Jan 02 02:03:55 1980\\n\\0`. A 24-hour clock is used. All fields have a constant width. The newline character and the null character occupy the last two positions of the string. `asctime` uses a single, statically allocated buffer to hold the return string. Each call to this function destroys the result of the previous call.  \n  \n `_wasctime` is a wide-character version of `asctime`. `_wasctime` and `asctime` behave identically otherwise.  \n  \n These functions validate their parameters. If `timeptr` is a null pointer, or if it contains out-of-range values, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, the function returns `NULL` and sets `errno` to `EINVAL`.  \n  \n### Generic-Text Routine Mapping  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_tasctime`|`asctime`|`asctime`|`_wasctime`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`asctime`|\\<time.h>|  \n|`_wasctime`|\\<time.h> or \\<wchar.h>|  \n  \n## Example  \n This program places the system time in the long integer `aclock`, translates it into the structure `newtime` and then converts it to string form for output, using the `asctime` function.  \n  \n```  \n// crt_asctime.c  \n// compile with: /W3  \n  \n#include <time.h>  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n    struct tm   *newTime;  \n    time_t      szClock;  \n  \n    // Get time in seconds  \n    time( &szClock );  \n  \n    // Convert time to struct tm form   \n    newTime = localtime( &szClock );  \n  \n    // Print local time as a string.  \n    printf_s( \"Current date and time: %s\", asctime( newTime ) ); // C4996  \n    // Note: asctime is deprecated; consider using asctime_s instead  \n}  \n```  \n  \n```Output  \nCurrent date and time: Sun Feb 03 11:38:58 2002  \n```  \n  \n## .NET Framework Equivalent  \n  \n-   [System::DateTime::ToLongDateString](https://msdn.microsoft.com/en-us/library/system.datetime.tolongdatestring.aspx)  \n  \n-   [System::DateTime::ToLongTimeString](https://msdn.microsoft.com/en-us/library/system.datetime.tolongtimestring.aspx)  \n  \n-   [System::DateTime::ToShortDateString](https://msdn.microsoft.com/en-us/library/system.datetime.toshortdatestring.aspx)  \n  \n-   [System::DateTime::ToShortTimeString](https://msdn.microsoft.com/en-us/library/system.datetime.toshorttimestring.aspx)  \n  \n-   [System::DateTime::ToString](https://msdn.microsoft.com/en-us/library/system.datetime.tostring.aspx)  \n  \n## See Also  \n [Time Management](../../c-runtime-library/time-management.md)   \n [ctime, _ctime32, _ctime64, _wctime, _wctime32, _wctime64](../../c-runtime-library/reference/ctime-ctime32-ctime64-wctime-wctime32-wctime64.md)   \n [_ftime, _ftime32, _ftime64](../../c-runtime-library/reference/ftime-ftime32-ftime64.md)   \n [gmtime, _gmtime32, _gmtime64](../../c-runtime-library/reference/gmtime-gmtime32-gmtime64.md)   \n [localtime, _localtime32, _localtime64](../../c-runtime-library/reference/localtime-localtime32-localtime64.md)   \n [time, _time32, _time64](../../c-runtime-library/reference/time-time32-time64.md)   \n [_tzset](../../c-runtime-library/reference/tzset.md)   \n [asctime_s, _wasctime_s](../../c-runtime-library/reference/asctime-s-wasctime-s.md)"}