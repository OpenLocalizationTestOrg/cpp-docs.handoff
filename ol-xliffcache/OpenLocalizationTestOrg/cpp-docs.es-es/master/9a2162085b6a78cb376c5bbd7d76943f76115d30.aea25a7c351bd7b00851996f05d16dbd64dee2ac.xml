{"nodes":[{"pos":[12,74],"content":"Other One-Argument Output Stream Manipulators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Other One-Argument Output Stream Manipulators | Microsoft Docs","pos":[0,62]}]},{"content":"Other One-Argument Output Stream Manipulators","pos":[625,670]},{"content":"The following example uses a class <ph id=\"ph1\">`money`</ph>, which is a <ph id=\"ph2\">`long`</ph> type.","pos":[671,738],"source":"The following example uses a class `money`, which is a `long` type."},{"content":"The <ph id=\"ph1\">`setpic`</ph> manipulator attaches a formatting \"picture\" string to the class that can be used by the overloaded stream insertion operator of the class <ph id=\"ph2\">`money`</ph>.","pos":[739,898],"source":" The `setpic` manipulator attaches a formatting \"picture\" string to the class that can be used by the overloaded stream insertion operator of the class `money`."},{"content":"The picture string is stored as a static variable in the <ph id=\"ph1\">`money`</ph> class rather than as data member of a stream class, so you do not have to derive a new output stream class.","pos":[899,1071],"source":" The picture string is stored as a static variable in the `money` class rather than as data member of a stream class, so you do not have to derive a new output stream class."},{"content":"Example","pos":[1080,1087]},{"content":"See Also","pos":[2460,2468]},{"content":"Custom Manipulators with Arguments","pos":[2473,2507]}],"content":"---\ntitle: \"Other One-Argument Output Stream Manipulators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"output streams, one-argument manipulators\"\nms.assetid: e381dee8-6b16-4cef-805a-4a6a1d2b696b\ncaps.latest.revision: 11\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Other One-Argument Output Stream Manipulators\nThe following example uses a class `money`, which is a `long` type. The `setpic` manipulator attaches a formatting \"picture\" string to the class that can be used by the overloaded stream insertion operator of the class `money`. The picture string is stored as a static variable in the `money` class rather than as data member of a stream class, so you do not have to derive a new output stream class.  \n  \n## Example  \n  \n```cpp  \n// one_arg_output.cpp  \n// compile with: /GR /EHsc  \n#include <iostream>  \n#include <iomanip>  \n#include <string>  \nusing namespace std;  \n  \ntypedef char* charp;  \n  \nclass money   \n{  \nprivate:  \n    long value;  \n    static char *szCurrentPic;  \npublic:  \n    money( long val ) { value = val; }  \n    friend ostream& operator << ( ostream& os, money m ) {  \n        // A more complete function would merge the picture  \n        // with the value rather than simply appending it  \n        os << m.value << '[' << money::szCurrentPic << ']';  \n        return os;  \n    }  \n    static void setpic( char* szPic ) {  \n        money::szCurrentPic = new char[strlen( szPic ) + 1];  \n        strcpy_s( money::szCurrentPic, strlen( szPic ) + 1, szPic );  \n    }  \n};  \n  \nchar *money::szCurrentPic;  // Static pointer to picture  \n  \nvoid fb( ios_base& os, char * somename )  \n{  \n   money::setpic(somename);  \n/*  \n   ostream *pos = dynamic_cast<ostream*>(&os);  \n   if (pos)  \n   {  \n      for( int i=0; i < l; i++ )  \n      (*pos) << ' ';  \n   };  \n*/  \n}  \n  \n_Smanip<charp>  \n   __cdecl setpic(char * somename)  \n   {     \n   return (_Smanip<charp>(&fb, somename));  \n   }  \n  \nint main( )  \n{  \n    money amt = (long)35235.22;  \n    cout << setiosflags( ios::fixed );  \n    cout << setpic( \"###,###,###.##\" ) << \"amount = \" << amt << endl;  \n}  \n```  \n  \n## See Also  \n [Custom Manipulators with Arguments](../standard-library/custom-manipulators-with-arguments.md)\n\n"}