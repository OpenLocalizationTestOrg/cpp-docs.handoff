{"nodes":[{"pos":[12,61],"content":"_ftime_s, _ftime32_s, _ftime64_s | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_ftime_s, _ftime32_s, _ftime64_s | Microsoft Docs","pos":[0,49]}]},{"pos":[1218,1250],"content":"_ftime_s, _ftime32_s, _ftime64_s","linkify":"_ftime_s, _ftime32_s, _ftime64_s","nodes":[{"content":"_ftime_s, _ftime32_s, _ftime64_s","pos":[0,32]}]},{"content":"Gets the current time.","pos":[1251,1273]},{"content":"These are versions of <bpt id=\"p1\">[</bpt>_ftime, _ftime32, _ftime64<ept id=\"p1\">](../../c-runtime-library/reference/ftime-ftime32-ftime64.md)</ept> with security enhancements as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1274,1516],"source":" These are versions of [_ftime, _ftime32, _ftime64](../../c-runtime-library/reference/ftime-ftime32-ftime64.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"pos":[1525,1531],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1732,1742],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to a <ph id=\"ph1\">`_timeb,``__timeb32`</ph>, or <ph id=\"ph2\">`__timeb64`</ph> structure.","pos":[1759,1819],"source":" Pointer to a `_timeb,``__timeb32`, or `__timeb64` structure."},{"pos":[1828,1840],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Zero if successful, an error code on failure.","pos":[1844,1889]},{"content":"If <ph id=\"ph1\">`timeptr`</ph> is <ph id=\"ph2\">`NULL`</ph>, the return value is <ph id=\"ph3\">`EINVAL`</ph>.","pos":[1890,1943],"source":" If `timeptr` is `NULL`, the return value is `EINVAL`."},{"pos":[1952,1959],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_ftime_s`</ph> function gets the current local time and stores it in the structure pointed to by <ph id=\"ph2\">`timeptr`</ph><bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>","pos":[1963,2072],"source":"The `_ftime_s` function gets the current local time and stores it in the structure pointed to by `timeptr`*.*"},{"content":"The <ph id=\"ph1\">`_timeb,``__timeb32`</ph>,and<ph id=\"ph2\">`__timeb64`</ph> structures are defined in SYS\\Timeb.h.","pos":[2073,2151],"source":" The `_timeb,``__timeb32`,and`__timeb64` structures are defined in SYS\\Timeb.h."},{"content":"They contain four fields, which are listed in the following table.","pos":[2152,2218]},{"content":"Nonzero if daylight savings time is currently in effect for the local time zone.","pos":[2238,2318]},{"content":"(See <bpt id=\"p1\">[</bpt>_tzset<ept id=\"p1\">](../../c-runtime-library/reference/tzset.md)</ept> for an explanation of how daylight savings time is determined.)","pos":[2319,2440],"source":" (See [_tzset](../../c-runtime-library/reference/tzset.md) for an explanation of how daylight savings time is determined.)"},{"content":"Fraction of a second in milliseconds.","pos":[2460,2497]},{"content":"Time in seconds since midnight (00:00:00), January 1, 1970, coordinated universal time (UTC).","pos":[2514,2607]},{"content":"Difference in minutes, moving westward, between UTC and local time.","pos":[2628,2695]},{"content":"The value of <ph id=\"ph1\">`timezone`</ph> is set from the value of the global variable <ph id=\"ph2\">`_timezone`</ph> (see <ph id=\"ph3\">`_tzset`</ph>).","pos":[2696,2792],"source":" The value of `timezone` is set from the value of the global variable `_timezone` (see `_tzset`)."},{"content":"<ph id=\"ph1\">`_ftime64_s`</ph>, which uses the <ph id=\"ph2\">`__timeb64`</ph> structure, allows file-creation dates to be expressed up through 23:59:59, December 31, 3000, UTC; whereas <ph id=\"ph3\">`_ftime32_s`</ph> only represents dates through 23:59:59 January 18, 2038, UTC.","pos":[2799,3021],"source":"`_ftime64_s`, which uses the `__timeb64` structure, allows file-creation dates to be expressed up through 23:59:59, December 31, 3000, UTC; whereas `_ftime32_s` only represents dates through 23:59:59 January 18, 2038, UTC."},{"content":"Midnight, January 1, 1970, is the lower bound of the date range for all these functions.","pos":[3022,3110]},{"content":"<ph id=\"ph1\">`_ftime_s`</ph> is equivalent to <ph id=\"ph2\">`_ftime64_s`</ph> and <ph id=\"ph3\">`_timeb`</ph> contains a 64-bit time.","pos":[3117,3194],"source":"`_ftime_s` is equivalent to `_ftime64_s` and `_timeb` contains a 64-bit time."},{"content":"This is true unless _<ph id=\"ph1\">`USE_32BIT_TIME_T`</ph> is defined, in which case the old behavior is in effect; <ph id=\"ph2\">\\_</ph><ph id=\"ph3\">`ftime_s`</ph> uses a 32-bit time and <ph id=\"ph4\">`_timeb`</ph> contains a 32-bit time.","pos":[3195,3359],"source":" This is true unless _`USE_32BIT_TIME_T` is defined, in which case the old behavior is in effect; \\_`ftime_s` uses a 32-bit time and `_timeb` contains a 32-bit time."},{"content":"<ph id=\"ph1\">`_ftime_s`</ph> validates its parameters.","pos":[3366,3402],"source":"`_ftime_s` validates its parameters."},{"content":"If passed a null pointer as <ph id=\"ph1\">`timeptr`</ph>, the function invokes the invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[3403,3582],"source":" If passed a null pointer as `timeptr`, the function invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, the function sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[3583,3658],"source":" If execution is allowed to continue, the function sets `errno` to `EINVAL`."},{"pos":[3667,3679],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Function","pos":[3686,3694]},{"content":"Required header","pos":[3695,3710]},{"content":"<ph id=\"ph1\">\\&lt;</ph>sys/types.h&gt; and <ph id=\"ph2\">\\&lt;</ph>sys/timeb.h&gt;","pos":[3767,3800],"source":"\\<sys/types.h> and \\<sys/timeb.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>sys/types.h&gt; and <ph id=\"ph2\">\\&lt;</ph>sys/timeb.h&gt;","pos":[3818,3851],"source":"\\<sys/types.h> and \\<sys/timeb.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>sys/types.h&gt; and <ph id=\"ph2\">\\&lt;</ph>sys/timeb.h&gt;","pos":[3869,3902],"source":"\\<sys/types.h> and \\<sys/timeb.h>"},{"pos":[3910,4028],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[4037,4046],"content":"Libraries","linkify":"Libraries","nodes":[{"content":"Libraries","pos":[0,9]}]},{"pos":[4050,4142],"content":"All versions of the <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept>.","source":"All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md)."},{"pos":[4151,4158],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5569,5594],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[5598,5688],"content":"<bpt id=\"p1\">[</bpt>System::DateTime::Now<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.datetime.now.aspx)</ept>","source":"[System::DateTime::Now](https://msdn.microsoft.com/en-us/library/system.datetime.now.aspx)"},{"pos":[5697,5705],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Time Management<ept id=\"p1\">](../../c-runtime-library/time-management.md)</ept><ph id=\"ph1\"> </ph>","pos":[5709,5771],"source":"[Time Management](../../c-runtime-library/time-management.md) "},{"content":"<bpt id=\"p1\"> [</bpt>asctime, _wasctime<ept id=\"p1\">](../../c-runtime-library/reference/asctime-wasctime.md)</ept><ph id=\"ph1\"> </ph>","pos":[5774,5851],"source":" [asctime, _wasctime](../../c-runtime-library/reference/asctime-wasctime.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ctime, _ctime32, _ctime64, _wctime, _wctime32, _wctime64<ept id=\"p1\">](../../c-runtime-library/reference/ctime-ctime32-ctime64-wctime-wctime32-wctime64.md)</ept><ph id=\"ph1\"> </ph>","pos":[5854,5999],"source":" [ctime, _ctime32, _ctime64, _wctime, _wctime32, _wctime64](../../c-runtime-library/reference/ctime-ctime32-ctime64-wctime-wctime32-wctime64.md) "},{"content":"<bpt id=\"p1\"> [</bpt>gmtime, _gmtime32, _gmtime64<ept id=\"p1\">](../../c-runtime-library/reference/gmtime-gmtime32-gmtime64.md)</ept><ph id=\"ph1\"> </ph>","pos":[6002,6097],"source":" [gmtime, _gmtime32, _gmtime64](../../c-runtime-library/reference/gmtime-gmtime32-gmtime64.md) "},{"content":"<bpt id=\"p1\"> [</bpt>localtime, _localtime32, _localtime64<ept id=\"p1\">](../../c-runtime-library/reference/localtime-localtime32-localtime64.md)</ept><ph id=\"ph1\"> </ph>","pos":[6100,6213],"source":" [localtime, _localtime32, _localtime64](../../c-runtime-library/reference/localtime-localtime32-localtime64.md) "},{"content":"<bpt id=\"p1\"> [</bpt>time, _time32, _time64<ept id=\"p1\">](../../c-runtime-library/reference/time-time32-time64.md)</ept>","pos":[6216,6298],"source":" [time, _time32, _time64](../../c-runtime-library/reference/time-time32-time64.md)"}],"content":"---\ntitle: \"_ftime_s, _ftime32_s, _ftime64_s | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_ftime_s\"\n  - \"_ftime64_s\"\n  - \"_ftime32_s\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-time-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_ftime_s\"\n  - \"_ftime64_s\"\n  - \"ftime_s\"\n  - \"_ftime32_s\"\n  - \"ftime32_s\"\n  - \"ftime64_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"ftime32_s function\"\n  - \"ftime_s function\"\n  - \"_ftime64_s function\"\n  - \"current time\"\n  - \"ftime64_s function\"\n  - \"time, getting current\"\n  - \"_ftime_s function\"\n  - \"_ftime32_s function\"\nms.assetid: d03080d9-a520-45be-aa65-504bdb197e8b\ncaps.latest.revision: 24\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _ftime_s, _ftime32_s, _ftime64_s\nGets the current time. These are versions of [_ftime, _ftime32, _ftime64](../../c-runtime-library/reference/ftime-ftime32-ftime64.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nerrno_t _ftime_s(   \n   struct _timeb *timeptr   \n);  \nerrno_t _ftime32_s(   \n   struct __timeb32 *timeptr   \n);  \nerrno_t _ftime64_s(   \n   struct __timeb64 *timeptr   \n);  \n```  \n  \n#### Parameters  \n `timeptr`  \n Pointer to a `_timeb,``__timeb32`, or `__timeb64` structure.  \n  \n## Return Value  \n Zero if successful, an error code on failure. If `timeptr` is `NULL`, the return value is `EINVAL`.  \n  \n## Remarks  \n The `_ftime_s` function gets the current local time and stores it in the structure pointed to by `timeptr`*.* The `_timeb,``__timeb32`,and`__timeb64` structures are defined in SYS\\Timeb.h. They contain four fields, which are listed in the following table.  \n  \n `dstflag`  \n Nonzero if daylight savings time is currently in effect for the local time zone. (See [_tzset](../../c-runtime-library/reference/tzset.md) for an explanation of how daylight savings time is determined.)  \n  \n `millitm`  \n Fraction of a second in milliseconds.  \n  \n `time`  \n Time in seconds since midnight (00:00:00), January 1, 1970, coordinated universal time (UTC).  \n  \n `timezone`  \n Difference in minutes, moving westward, between UTC and local time. The value of `timezone` is set from the value of the global variable `_timezone` (see `_tzset`).  \n  \n `_ftime64_s`, which uses the `__timeb64` structure, allows file-creation dates to be expressed up through 23:59:59, December 31, 3000, UTC; whereas `_ftime32_s` only represents dates through 23:59:59 January 18, 2038, UTC. Midnight, January 1, 1970, is the lower bound of the date range for all these functions.  \n  \n `_ftime_s` is equivalent to `_ftime64_s` and `_timeb` contains a 64-bit time. This is true unless _`USE_32BIT_TIME_T` is defined, in which case the old behavior is in effect; \\_`ftime_s` uses a 32-bit time and `_timeb` contains a 32-bit time.  \n  \n `_ftime_s` validates its parameters. If passed a null pointer as `timeptr`, the function invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, the function sets `errno` to `EINVAL`.  \n  \n## Requirements  \n  \n|Function|Required header|  \n|--------------|---------------------|  \n|`_ftime_s`|\\<sys/types.h> and \\<sys/timeb.h>|  \n|`_ftime32_s`|\\<sys/types.h> and \\<sys/timeb.h>|  \n|`_ftime64_s`|\\<sys/types.h> and \\<sys/timeb.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Libraries  \n All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md).  \n  \n## Example  \n  \n```  \n// crt_ftime64_s.c  \n// This program uses _ftime64_s to obtain the current  \n// time and then stores this time in timebuffer.  \n  \n#include <stdio.h>  \n#include <sys/timeb.h>  \n#include <time.h>  \n  \nint main( void )  \n{  \n   struct _timeb timebuffer;  \n   char timeline[26];  \n   errno_t err;  \n   time_t time1;  \n   unsigned short millitm1;  \n   short timezone1;  \n   short dstflag1;  \n  \n   _ftime64_s( &timebuffer );  \n  \n    time1 = timebuffer.time;  \n    millitm1 = timebuffer.millitm;  \n    timezone1 = timebuffer.timezone;  \n    dstflag1 = timebuffer.dstflag;  \n  \n   printf( \"Seconds since midnight, January 1, 1970 (UTC): %I64d\\n\",   \n   time1);  \n   printf( \"Milliseconds: %d\\n\", millitm1);  \n   printf( \"Minutes between UTC and local time: %d\\n\", timezone1);  \n   printf( \"Daylight savings time flag (1 means Daylight time is in \"  \n           \"effect): %d\\n\", dstflag1);   \n  \n   err = ctime_s( timeline, 26, & ( timebuffer.time ) );  \n   if (err)  \n   {  \n       printf(\"Invalid argument to ctime_s. \");  \n   }  \n   printf( \"The time is %.19s.%hu %s\", timeline, timebuffer.millitm,  \n           &timeline[20] );  \n}  \n```  \n  \n```Output  \nSeconds since midnight, January 1, 1970 (UTC): 1051553334  \nMilliseconds: 230  \nMinutes between UTC and local time: 480  \nDaylight savings time flag (1 means Daylight time is in effect): 1  \nThe time is Mon Apr 28 11:08:54.230 2003  \n```  \n  \n## .NET Framework Equivalent  \n [System::DateTime::Now](https://msdn.microsoft.com/en-us/library/system.datetime.now.aspx)  \n  \n## See Also  \n [Time Management](../../c-runtime-library/time-management.md)   \n [asctime, _wasctime](../../c-runtime-library/reference/asctime-wasctime.md)   \n [ctime, _ctime32, _ctime64, _wctime, _wctime32, _wctime64](../../c-runtime-library/reference/ctime-ctime32-ctime64-wctime-wctime32-wctime64.md)   \n [gmtime, _gmtime32, _gmtime64](../../c-runtime-library/reference/gmtime-gmtime32-gmtime64.md)   \n [localtime, _localtime32, _localtime64](../../c-runtime-library/reference/localtime-localtime32-localtime64.md)   \n [time, _time32, _time64](../../c-runtime-library/reference/time-time32-time64.md)"}