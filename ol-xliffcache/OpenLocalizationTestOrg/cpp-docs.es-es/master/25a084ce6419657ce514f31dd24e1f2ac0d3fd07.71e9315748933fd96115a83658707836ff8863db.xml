{"nodes":[{"pos":[12,103],"content":"How to: Convert an OpenMP parallel for Loop to Use the Concurrency Runtime | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Convert an OpenMP parallel for Loop to Use the Concurrency Runtime | Microsoft Docs","pos":[0,91]}]},{"content":"How to: Convert an OpenMP parallel for Loop to Use the Concurrency Runtime","pos":[928,1002]},{"pos":[1004,1381],"content":"This example demonstrates how to convert a basic loop that uses the OpenMP <bpt id=\"p1\">[</bpt>parallel<ept id=\"p1\">](../../parallel/concrt/how-to-use-parallel-invoke-to-write-a-parallel-sort-routine.md#parallel)</ept> and <bpt id=\"p2\">[</bpt>for<ept id=\"p2\">](../../parallel/openmp/reference/for-openmp.md)</ept> directives to use the Concurrency Runtime <bpt id=\"p3\">[</bpt>concurrency::parallel_for<ept id=\"p3\">](reference/concurrency-namespace-functions.md#parallel_for)</ept> algorithm.","source":"This example demonstrates how to convert a basic loop that uses the OpenMP [parallel](../../parallel/concrt/how-to-use-parallel-invoke-to-write-a-parallel-sort-routine.md#parallel) and [for](../../parallel/openmp/reference/for-openmp.md) directives to use the Concurrency Runtime [concurrency::parallel_for](reference/concurrency-namespace-functions.md#parallel_for) algorithm."},{"content":"Example","pos":[1390,1397]},{"content":"This example uses both OpenMP and the Concurrency Runtime to compute the count of prime numbers in an array of random values.","pos":[1401,1526]},{"pos":[1544,1559],"content":"concrt-openmp#1"},{"content":"This example produces the following output.","pos":[1687,1730]},{"content":"The <ph id=\"ph1\">`parallel_for`</ph> algorithm and OpenMP 3.0 allow for the index type to be a signed integral type or an unsigned integral type.","pos":[1871,1998],"source":"The `parallel_for` algorithm and OpenMP 3.0 allow for the index type to be a signed integral type or an unsigned integral type."},{"content":"The <ph id=\"ph1\">`parallel_for`</ph> algorithm also makes sure that the specified range does not overflow a signed type.","pos":[1999,2101],"source":" The `parallel_for` algorithm also makes sure that the specified range does not overflow a signed type."},{"content":"OpenMP versions 2.0 and 2.5 allow for signed integral index types only.","pos":[2102,2173]},{"content":"OpenMP also does not validate the index range.","pos":[2174,2220]},{"pos":[2227,2530],"content":"The version of this example that uses the Concurrency Runtime also uses a <bpt id=\"p1\">[</bpt>concurrency::combinable<ept id=\"p1\">](../../parallel/concrt/reference/combinable-class.md)</ept> object in place of the <bpt id=\"p2\">[</bpt>atomic<ept id=\"p2\">](../../parallel/openmp/reference/atomic.md)</ept> directive to increment the counter value without requiring synchronization.","source":"The version of this example that uses the Concurrency Runtime also uses a [concurrency::combinable](../../parallel/concrt/reference/combinable-class.md) object in place of the [atomic](../../parallel/openmp/reference/atomic.md) directive to increment the counter value without requiring synchronization."},{"content":"For more information about <ph id=\"ph1\">`parallel_for`</ph> and other parallel algorithms, see <bpt id=\"p1\">[</bpt>Parallel Algorithms<ept id=\"p1\">](../../parallel/concrt/parallel-algorithms.md)</ept>.","pos":[2537,2682],"source":"For more information about `parallel_for` and other parallel algorithms, see [Parallel Algorithms](../../parallel/concrt/parallel-algorithms.md)."},{"content":"For more information about the <ph id=\"ph1\">`combinable`</ph> class, see <bpt id=\"p1\">[</bpt>Parallel Containers and Objects<ept id=\"p1\">](../../parallel/concrt/parallel-containers-and-objects.md)</ept>.","pos":[2683,2830],"source":" For more information about the `combinable` class, see [Parallel Containers and Objects](../../parallel/concrt/parallel-containers-and-objects.md)."},{"content":"Example","pos":[2839,2846]},{"content":"This example modifies the previous one to act on an <bpt id=\"p1\">[</bpt>std::array<ept id=\"p1\">](../../standard-library/array-class-stl.md)</ept> object instead of on a native array.","pos":[2851,2995],"source":"This example modifies the previous one to act on an [std::array](../../standard-library/array-class-stl.md) object instead of on a native array."},{"content":"Because OpenMP versions 2.0 and 2.5 allow for signed integral index types only in a <ph id=\"ph1\">`parallel``for`</ph> construct, you cannot use iterators to access the elements of a Standard Template Library (STL) container in parallel.","pos":[2996,3214],"source":" Because OpenMP versions 2.0 and 2.5 allow for signed integral index types only in a `parallel``for` construct, you cannot use iterators to access the elements of a Standard Template Library (STL) container in parallel."},{"content":"The Parallel Patterns Library (PPL) provides the <bpt id=\"p1\">[</bpt>concurrency::parallel_for_each<ept id=\"p1\">](reference/concurrency-namespace-functions.md#parallel_for_each)</ept> algorithm, which performs tasks, in parallel, on an iterative container such as those provided by the STL.","pos":[3215,3467],"source":" The Parallel Patterns Library (PPL) provides the [concurrency::parallel_for_each](reference/concurrency-namespace-functions.md#parallel_for_each) algorithm, which performs tasks, in parallel, on an iterative container such as those provided by the STL."},{"content":"It uses the same partitioning logic that the <ph id=\"ph1\">`parallel_for`</ph> algorithm uses.","pos":[3468,3543],"source":" It uses the same partitioning logic that the `parallel_for` algorithm uses."},{"content":"The <ph id=\"ph1\">`parallel_for_each`</ph> algorithm resembles the STL <bpt id=\"p1\">[</bpt>std::for_each<ept id=\"p1\">](http://msdn.microsoft.com/Library/8cb2ae72-bef6-488b-b011-0475c0787e33)</ept> algorithm, except that the <ph id=\"ph2\">`parallel_for_each`</ph> algorithm executes the tasks concurrently.","pos":[3544,3773],"source":" The `parallel_for_each` algorithm resembles the STL [std::for_each](http://msdn.microsoft.com/Library/8cb2ae72-bef6-488b-b011-0475c0787e33) algorithm, except that the `parallel_for_each` algorithm executes the tasks concurrently."},{"pos":[3791,3807],"content":"concrt-openmp#10"},{"content":"Compiling the Code","pos":[3937,3955]},{"pos":[3959,4164],"content":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id=\"ph1\">`concrt-omp-count-primes.cpp`</ph> and then run the following command in a Visual Studio Command Prompt window.","source":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `concrt-omp-count-primes.cpp` and then run the following command in a Visual Studio Command Prompt window."},{"content":"cl.exe /EHsc /openmp concrt-omp-count-primes.cpp","pos":[4173,4221]},{"content":"See Also","pos":[4232,4240]},{"content":"Migrating from OpenMP to the Concurrency Runtime","pos":[4245,4293]},{"content":"Parallel Algorithms","pos":[4375,4394]},{"content":"Parallel Containers and Objects","pos":[4447,4478]}],"content":"---\ntitle: \"How to: Convert an OpenMP parallel for Loop to Use the Concurrency Runtime | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"converting from OpenMP to the Concurrency Runtime, parallel for loops\"\n  - \"converting from OpenMP to the Concurrency Runtime, parallel loops\"\n  - \"parallel for loops, converting from OpenMP to the Concurrency Runtime\"\n  - \"parallel loops, converting from OpenMP to the Concurrency Runtime\"\nms.assetid: d8a7b656-f86c-456e-9c5d-a7d52f94646e\ncaps.latest.revision: 13\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# How to: Convert an OpenMP parallel for Loop to Use the Concurrency Runtime\n\nThis example demonstrates how to convert a basic loop that uses the OpenMP [parallel](../../parallel/concrt/how-to-use-parallel-invoke-to-write-a-parallel-sort-routine.md#parallel) and [for](../../parallel/openmp/reference/for-openmp.md) directives to use the Concurrency Runtime [concurrency::parallel_for](reference/concurrency-namespace-functions.md#parallel_for) algorithm.  \n  \n## Example  \n This example uses both OpenMP and the Concurrency Runtime to compute the count of prime numbers in an array of random values.  \n  \n [!code-cpp[concrt-openmp#1](../../parallel/concrt/codesnippet/cpp/how-to-convert-an-openmp-parallel-for-loop-to-use-the-concurrency-runtime_1.cpp)]  \n  \n This example produces the following output.  \n  \n```Output  \nUsing OpenMP...  \nfound 107254 prime numbers.  \nUsing the Concurrency Runtime...  \nfound 107254 prime numbers.  \n```  \n  \n The `parallel_for` algorithm and OpenMP 3.0 allow for the index type to be a signed integral type or an unsigned integral type. The `parallel_for` algorithm also makes sure that the specified range does not overflow a signed type. OpenMP versions 2.0 and 2.5 allow for signed integral index types only. OpenMP also does not validate the index range.  \n  \n The version of this example that uses the Concurrency Runtime also uses a [concurrency::combinable](../../parallel/concrt/reference/combinable-class.md) object in place of the [atomic](../../parallel/openmp/reference/atomic.md) directive to increment the counter value without requiring synchronization.  \n  \n For more information about `parallel_for` and other parallel algorithms, see [Parallel Algorithms](../../parallel/concrt/parallel-algorithms.md). For more information about the `combinable` class, see [Parallel Containers and Objects](../../parallel/concrt/parallel-containers-and-objects.md).  \n  \n## Example  \n\n This example modifies the previous one to act on an [std::array](../../standard-library/array-class-stl.md) object instead of on a native array. Because OpenMP versions 2.0 and 2.5 allow for signed integral index types only in a `parallel``for` construct, you cannot use iterators to access the elements of a Standard Template Library (STL) container in parallel. The Parallel Patterns Library (PPL) provides the [concurrency::parallel_for_each](reference/concurrency-namespace-functions.md#parallel_for_each) algorithm, which performs tasks, in parallel, on an iterative container such as those provided by the STL. It uses the same partitioning logic that the `parallel_for` algorithm uses. The `parallel_for_each` algorithm resembles the STL [std::for_each](http://msdn.microsoft.com/Library/8cb2ae72-bef6-488b-b011-0475c0787e33) algorithm, except that the `parallel_for_each` algorithm executes the tasks concurrently.  \n  \n [!code-cpp[concrt-openmp#10](../../parallel/concrt/codesnippet/cpp/how-to-convert-an-openmp-parallel-for-loop-to-use-the-concurrency-runtime_2.cpp)]  \n  \n## Compiling the Code  \n Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `concrt-omp-count-primes.cpp` and then run the following command in a Visual Studio Command Prompt window.  \n  \n **cl.exe /EHsc /openmp concrt-omp-count-primes.cpp**  \n  \n## See Also  \n [Migrating from OpenMP to the Concurrency Runtime](../../parallel/concrt/migrating-from-openmp-to-the-concurrency-runtime.md)   \n [Parallel Algorithms](../../parallel/concrt/parallel-algorithms.md)   \n [Parallel Containers and Objects](../../parallel/concrt/parallel-containers-and-objects.md)\n\n"}