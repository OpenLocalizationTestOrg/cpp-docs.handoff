{"nodes":[{"pos":[12,55],"content":"weibull_distribution Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"weibull_distribution Class | Microsoft Docs","pos":[0,43]}]},{"content":"weibull_distribution Class","pos":[811,837]},{"content":"Generates a Weibull distribution.","pos":[838,871]},{"content":"Syntax","pos":[880,886]},{"content":"Parameters","pos":[1607,1617]},{"content":"The floating-point result type, defaults to <ph id=\"ph1\">`double`</ph>.","pos":[1635,1688],"source":" The floating-point result type, defaults to `double`."},{"content":"For possible types, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","pos":[1689,1756],"source":" For possible types, see [\\<random>](../standard-library/random.md)."},{"content":"Remarks","pos":[1765,1772]},{"content":"The template class describes a distribution that produces values of a user-specified integral type, or type <ph id=\"ph1\">`double`</ph> if none is provided, distributed according to the Weibull Distribution.","pos":[1776,1964],"source":"The template class describes a distribution that produces values of a user-specified integral type, or type `double` if none is provided, distributed according to the Weibull Distribution."},{"content":"The following table links to articles about individual members.","pos":[1965,2028]},{"content":"weibull_distribution::weibull_distribution","pos":[2053,2095]},{"content":"weibull_distribution::param_type","pos":[2264,2296]},{"pos":[2340,2457],"content":"The property functions <ph id=\"ph1\">`a()`</ph> and <ph id=\"ph2\">`b()`</ph> return their respective values for stored distribution parameters <ph id=\"ph3\">`a`</ph> and <ph id=\"ph4\">`b`</ph>.","source":"The property functions `a()` and `b()` return their respective values for stored distribution parameters `a` and `b`."},{"pos":[2464,2578],"content":"For more information about distribution classes and their members, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","source":"For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md)."},{"pos":[2585,2745],"content":"For detailed information about the Weibull distribution, see the Wolfram MathWorld article <bpt id=\"p1\">[</bpt>Weibull Distribution<ept id=\"p1\">](http://go.microsoft.com/fwlink/LinkId=401115)</ept>.","source":"For detailed information about the Weibull distribution, see the Wolfram MathWorld article [Weibull Distribution](http://go.microsoft.com/fwlink/LinkId=401115)."},{"content":"Example","pos":[2754,2761]},{"content":"Output","pos":[4691,4697]},{"content":"First run:","pos":[4701,4711]},{"content":"Second run:","pos":[5376,5387]},{"content":"Requirements","pos":[6060,6072]},{"pos":[6076,6097],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>random&gt;","source":"**Header:** \\<random>"},{"pos":[6104,6122],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[6191,6233],"content":"weibull_distribution::weibull_distribution"},{"content":"Parameters","pos":[6383,6393]},{"content":"The <ph id=\"ph1\">`a`</ph> distribution parameter.","pos":[6404,6435],"source":" The `a` distribution parameter."},{"content":"The <ph id=\"ph1\">`b`</ph> distribution parameter.","pos":[6449,6480],"source":" The `b` distribution parameter."},{"content":"The parameter structure used to construct the distribution.","pos":[6497,6556]},{"content":"Remarks","pos":[6566,6573]},{"pos":[6577,6608],"content":"<bpt id=\"p1\">**</bpt>Precondition:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`0.0 &lt; a`</ph> and","source":"**Precondition:** `0.0 < a` and "},{"pos":[6625,6757],"content":"The first constructor constructs an object whose stored <ph id=\"ph1\">`a`</ph>value holds the value <ph id=\"ph2\">`a`</ph> and whose stored <ph id=\"ph3\">`b`</ph> value holds the value <ph id=\"ph4\">`b`</ph>.","source":"The first constructor constructs an object whose stored `a`value holds the value `a` and whose stored `b` value holds the value `b`."},{"content":"The second constructor constructs an object whose stored parameters are initialized from <ph id=\"ph1\">`parm`</ph>.","pos":[6764,6860],"source":"The second constructor constructs an object whose stored parameters are initialized from `parm`."},{"content":"You can obtain and set the current parameters of an existing distribution by calling the <ph id=\"ph1\">`param()`</ph> member function.","pos":[6861,6976],"source":" You can obtain and set the current parameters of an existing distribution by calling the `param()` member function."},{"pos":[7035,7067],"content":"weibull_distribution::param_type"},{"content":"Stores the parameters of the distribution.","pos":[7071,7113]},{"content":"Parameters","pos":[7436,7446]},{"pos":[7450,7547],"content":"See parent topic <bpt id=\"p1\">[</bpt>weibull_distribution Class<ept id=\"p1\">](../standard-library/weibull-distribution-class.md)</ept>.","source":"See parent topic [weibull_distribution Class](../standard-library/weibull-distribution-class.md)."},{"content":"Remarks","pos":[7557,7564]},{"pos":[7568,7599],"content":"<bpt id=\"p1\">**</bpt>Precondition:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`0.0 &lt; a`</ph> and","source":"**Precondition:** `0.0 < a` and "},{"pos":[7616,7859],"content":"This structure can be passed to the distribution's class constructor at instantiation, to the <ph id=\"ph1\">`param()`</ph> member function to set the stored parameters of an existing distribution, and to <ph id=\"ph2\">`operator()`</ph> to be used in place of the stored parameters.","source":"This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters."},{"content":"See Also","pos":[7868,7876]},{"content":"random&gt;","pos":[7883,7890],"source":"random>"}],"content":"---\ntitle: \"weibull_distribution Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.tr1.weibull_distribution\"\n  - \"weibull_distribution\"\n  - \"tr1::weibull_distribution\"\n  - \"std::tr1::weibull_distribution\"\n  - \"tr1.weibull_distribution\"\n  - \"random/std::tr1::weibull_distribution\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"weibull_distribution class\"\nms.assetid: f20b49d3-1b9a-41af-8db4-baf800eaa02b\ncaps.latest.revision: 15\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# weibull_distribution Class\nGenerates a Weibull distribution.  \n  \n## Syntax  \n```  \nclass weibull_distribution  \n   {  \n   public: \n    // types  \n   typedef RealType result_type;  \n   struct param_type; \n    // constructor and reset functions  \n   explicit weibull_distribution(RealType a = 1.0, RealType b = 1.0);\n   explicit weibull_distribution(const param_type& parm);\n   void reset();\n\n   // generating functions  \n   template <class URNG>  \n   result_type operator()(URNG& gen);\n   template <class URNG>  \n   result_type operator()(URNG& gen, const param_type& parm);\n   \n   // property functions  \n   RealType a() const;\n   RealType b() const;\n   param_type param() const;\n   void param(const param_type& parm);\n   result_type min() const;\n   result_type max() const;\n   };  \n```   \n#### Parameters  \n `RealType`  \n The floating-point result type, defaults to `double`. For possible types, see [\\<random>](../standard-library/random.md).  \n  \n## Remarks  \n The template class describes a distribution that produces values of a user-specified integral type, or type `double` if none is provided, distributed according to the Weibull Distribution. The following table links to articles about individual members.  \n  \n||||  \n|-|-|-|  \n|[weibull_distribution::weibull_distribution](#weibull_distribution__weibull_distribution)|`weibull_distribution::a`|`weibull_distribution::param`|  \n|`weibull_distribution::operator()`|`weibull_distribution::b`|[weibull_distribution::param_type](#weibull_distribution__param_type)|  \n  \n The property functions `a()` and `b()` return their respective values for stored distribution parameters `a` and `b`.  \n  \n For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md).  \n  \n For detailed information about the Weibull distribution, see the Wolfram MathWorld article [Weibull Distribution](http://go.microsoft.com/fwlink/LinkId=401115).  \n  \n## Example  \n  \n```cpp  \n// compile with: /EHsc /W4  \n#include <random>   \n#include <iostream>  \n#include <iomanip>  \n#include <string>  \n#include <map>  \n  \nvoid test(const double a, const double b, const int s) {  \n  \n    // uncomment to use a non-deterministic generator  \n    //    std::random_device gen;  \n    std::mt19937 gen(1701);  \n  \n    std::weibull_distribution<> distr(a, b);  \n  \n    std::cout << std::endl;  \n    std::cout << \"min() == \" << distr.min() << std::endl;  \n    std::cout << \"max() == \" << distr.max() << std::endl;  \n    std::cout << \"a() == \" << std::fixed << std::setw(11) << std::setprecision(10) << distr.a() << std::endl;  \n    std::cout << \"b() == \" << std::fixed << std::setw(11) << std::setprecision(10) << distr.b() << std::endl;  \n  \n    // generate the distribution as a histogram  \n    std::map<double, int> histogram;  \n    for (int i = 0; i < s; ++i) {  \n        ++histogram[distr(gen)];  \n    }  \n  \n    // print results  \n    std::cout << \"Distribution for \" << s << \" samples:\" << std::endl;  \n    int counter = 0;  \n    for (const auto& elem : histogram) {  \n        std::cout << std::fixed << std::setw(11) << ++counter << \": \"  \n            << std::setw(14) << std::setprecision(10) << elem.first << std::endl;  \n    }  \n    std::cout << std::endl;  \n}  \n  \nint main()  \n{  \n    double a_dist = 0.0;  \n    double b_dist = 1;  \n  \n    int samples = 10;  \n  \n    std::cout << \"Use CTRL-Z to bypass data entry and run using default values.\" << std::endl;  \n    std::cout << \"Enter a floating point value for the 'a' distribution parameter (must be greater than zero): \";  \n    std::cin >> a_dist;  \n    std::cout << \"Enter a floating point value for the 'b' distribution parameter (must be greater than zero): \";  \n    std::cin >> b_dist;  \n    std::cout << \"Enter an integer value for the sample count: \";  \n    std::cin >> samples;  \n  \n    test(a_dist, b_dist, samples);  \n}  \n  \n```  \n  \n## Output  \n First run:  \n  \n```  \nUse CTRL-Z to bypass data entry and run using default values.  \nEnter a floating point value for the 'a' distribution parameter (must be greater than zero): 1  \nEnter a floating point value for the 'b' distribution parameter (must be greater than zero): 1  \nEnter an integer value for the sample count: 10  \n \nmin() == 0  \nmax() == 1.79769e+308  \na() == 1.0000000000  \nb() == 1.0000000000  \nDistribution for 10 samples:  \n    1: 0.0936880533  \n    2: 0.1225944894  \n    3: 0.6443593183  \n    4: 0.6551171649  \n    5: 0.7313457551  \n    6: 0.7313557977  \n    7: 0.7590097389  \n    8: 1.4466885214  \n    9: 1.6434088411  \n    10: 2.1201210996  \n```  \n  \n Second run:  \n  \n```  \nUse CTRL-Z to bypass data entry and run using default values.  \nEnter a floating point value for the 'a' distribution parameter (must be greater than zero): .5  \nEnter a floating point value for the 'b' distribution parameter (must be greater than zero): 5.5  \nEnter an integer value for the sample count: 10  \n \nmin() == 0  \nmax() == 1.79769e+308  \na() == 0.5000000000  \nb() == 5.5000000000  \nDistribution for 10 samples:  \n    1: 0.0482759823  \n    2: 0.0826617486  \n    3: 2.2835941207  \n    4: 2.3604817485  \n    5: 2.9417663742  \n    6: 2.9418471657  \n    7: 3.1685268104  \n    8: 11.5109922290  \n    9: 14.8543594043  \n    10: 24.7220241239  \n```  \n  \n## Requirements  \n **Header:** \\<random>  \n  \n **Namespace:** std  \n  \n##  <a name=\"weibull_distribution__weibull_distribution\"></a>  weibull_distribution::weibull_distribution  \n  \n```  \nexplicit weibull_distribution(RealType a = 1.0, RealType b = 1.0);\n\n \nexplicit weibull_distribution(const param_type& parm);\n```  \n  \n### Parameters  \n `a`  \n The `a` distribution parameter.  \n  \n `b`  \n The `b` distribution parameter.  \n  \n `parm`  \n The parameter structure used to construct the distribution.  \n  \n### Remarks  \n **Precondition:** `0.0 < a` and `0.0 < b`  \n  \n The first constructor constructs an object whose stored `a`value holds the value `a` and whose stored `b` value holds the value `b`.  \n  \n The second constructor constructs an object whose stored parameters are initialized from `parm`. You can obtain and set the current parameters of an existing distribution by calling the `param()` member function.  \n  \n##  <a name=\"weibull_distribution__param_type\"></a>  weibull_distribution::param_type  \n Stores the parameters of the distribution.  \n```cpp  \nstruct param_type {  \n   typedef weibull_distribution<RealType> distribution_type;  \n   param_type(RealType a = 1.0, RealType b = 1.0);\n   RealType a() const;\n   RealType b() const;\n   .....  \n   bool operator==(const param_type& right) const;\n   bool operator!=(const param_type& right) const;\n   };  \n```\n### Parameters  \n See parent topic [weibull_distribution Class](../standard-library/weibull-distribution-class.md).  \n  \n### Remarks  \n **Precondition:** `0.0 < a` and `0.0 < b`  \n  \n This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters.  \n  \n## See Also  \n [\\<random>](../standard-library/random.md)\n\n\n\n"}