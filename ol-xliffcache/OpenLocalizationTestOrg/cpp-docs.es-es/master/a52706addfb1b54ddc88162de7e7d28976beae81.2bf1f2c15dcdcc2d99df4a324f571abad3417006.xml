{"nodes":[{"pos":[12,49],"content":"CIPAddressCtrl Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CIPAddressCtrl Class | Microsoft Docs","pos":[0,37]}]},{"pos":[798,818],"content":"CIPAddressCtrl Class","linkify":"CIPAddressCtrl Class","nodes":[{"content":"CIPAddressCtrl Class","pos":[0,20]}]},{"content":"Provides the functionality of the Windows common IP Address control.","pos":[819,887]},{"pos":[896,902],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[963,970],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[980,999],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1006,1010]},{"content":"Description","pos":[1011,1022]},{"pos":[1060,1125],"content":"<bpt id=\"p1\">[</bpt>CIPAddressCtrl::CIPAddressCtrl<ept id=\"p1\">](#cipaddressctrl__cipaddressctrl)</ept>","source":"[CIPAddressCtrl::CIPAddressCtrl](#cipaddressctrl__cipaddressctrl)"},{"pos":[1126,1163],"content":"Constructs a <ph id=\"ph1\">`CIPAddressCtrl`</ph> object.","source":"Constructs a `CIPAddressCtrl` object."},{"pos":[1174,1188],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1195,1199]},{"content":"Description","pos":[1200,1211]},{"pos":[1249,1310],"content":"<bpt id=\"p1\">[</bpt>CIPAddressCtrl::ClearAddress<ept id=\"p1\">](#cipaddressctrl__clearaddress)</ept>","source":"[CIPAddressCtrl::ClearAddress](#cipaddressctrl__clearaddress)"},{"content":"Clears the contents of the IP Address Control.","pos":[1311,1357]},{"pos":[1362,1411],"content":"<bpt id=\"p1\">[</bpt>CIPAddressCtrl::Create<ept id=\"p1\">](#cipaddressctrl__create)</ept>","source":"[CIPAddressCtrl::Create](#cipaddressctrl__create)"},{"pos":[1412,1487],"content":"Creates an IP Address Control and attaches it to a <ph id=\"ph1\">`CIPAddressCtrl`</ph> object.","source":"Creates an IP Address Control and attaches it to a `CIPAddressCtrl` object."},{"pos":[1492,1545],"content":"<bpt id=\"p1\">[</bpt>CIPAddressCtrl::CreateEx<ept id=\"p1\">](#cipaddressctrl__createex)</ept>","source":"[CIPAddressCtrl::CreateEx](#cipaddressctrl__createex)"},{"pos":[1546,1664],"content":"Creates an IP Address control with the specified Windows extended styles and attaches it to a <ph id=\"ph1\">`CIPAddressCtrl`</ph> object.","source":"Creates an IP Address control with the specified Windows extended styles and attaches it to a `CIPAddressCtrl` object."},{"pos":[1669,1726],"content":"<bpt id=\"p1\">[</bpt>CIPAddressCtrl::GetAddress<ept id=\"p1\">](#cipaddressctrl__getaddress)</ept>","source":"[CIPAddressCtrl::GetAddress](#cipaddressctrl__getaddress)"},{"content":"Retrieves the address values for all four fields in the IP Address Control.","pos":[1727,1802]},{"pos":[1807,1858],"content":"<bpt id=\"p1\">[</bpt>CIPAddressCtrl::IsBlank<ept id=\"p1\">](#cipaddressctrl__isblank)</ept>","source":"[CIPAddressCtrl::IsBlank](#cipaddressctrl__isblank)"},{"content":"Determines if all fields in the IP Address Control are empty.","pos":[1859,1920]},{"pos":[1925,1982],"content":"<bpt id=\"p1\">[</bpt>CIPAddressCtrl::SetAddress<ept id=\"p1\">](#cipaddressctrl__setaddress)</ept>","source":"[CIPAddressCtrl::SetAddress](#cipaddressctrl__setaddress)"},{"content":"Sets the address values for all four fields in the IP Address Control.","pos":[1983,2053]},{"pos":[2058,2121],"content":"<bpt id=\"p1\">[</bpt>CIPAddressCtrl::SetFieldFocus<ept id=\"p1\">](#cipaddressctrl__setfieldfocus)</ept>","source":"[CIPAddressCtrl::SetFieldFocus](#cipaddressctrl__setfieldfocus)"},{"content":"Sets the keyboard focus to the specified field in the IP Address Control.","pos":[2122,2195]},{"pos":[2200,2263],"content":"<bpt id=\"p1\">[</bpt>CIPAddressCtrl::SetFieldRange<ept id=\"p1\">](#cipaddressctrl__setfieldrange)</ept>","source":"[CIPAddressCtrl::SetFieldRange](#cipaddressctrl__setfieldrange)"},{"content":"Sets the range in the specified field in the IP Address Control.","pos":[2264,2328]},{"pos":[2338,2345],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An IP Address control, a control similar to an edit control, allows you to enter and manipulate a numerical address in Internet Protocol (IP) format.","pos":[2349,2498]},{"content":"This control (and therefore the <ph id=\"ph1\">`CIPAddressCtrl`</ph> class) is available only to programs running under Microsoft Internet Explorer 4.0 and later.","pos":[2505,2647],"source":"This control (and therefore the `CIPAddressCtrl` class) is available only to programs running under Microsoft Internet Explorer 4.0 and later."},{"content":"They will also be available under future versions of Windows and Windows NT.","pos":[2648,2724]},{"pos":[2731,2935],"content":"For more general information about the IP Address Control, see <bpt id=\"p1\">[</bpt>IP Address Controls<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761372)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more general information about the IP Address Control, see [IP Address Controls](http://msdn.microsoft.com/library/windows/desktop/bb761372) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[2944,2965],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[2969,3016],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[3023,3076],"content":"<bpt id=\"p1\">[</bpt>CCmdTarget<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept>","source":"[CCmdTarget](../../mfc/reference/ccmdtarget-class.md)"},{"pos":[3083,3124],"content":"<bpt id=\"p1\">[</bpt>CWnd<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept>","source":"[CWnd](../../mfc/reference/cwnd-class.md)"},{"pos":[3156,3168],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3172,3192],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxcmn.h","source":"**Header:** afxcmn.h"},{"pos":[3202,3279],"content":"<bpt id=\"p1\">&lt;a name=\"cipaddressctrl__cipaddressctrl\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CIPAddressCtrl::CIPAddressCtrl","linkify":"<a name=\"cipaddressctrl__cipaddressctrl\"></a>  CIPAddressCtrl::CIPAddressCtrl","source":"<a name=\"cipaddressctrl__cipaddressctrl\"></a>  CIPAddressCtrl::CIPAddressCtrl"},{"pos":[3283,3317],"content":"Creates a <ph id=\"ph1\">`CIPAddressCtrl`</ph> object.","source":"Creates a `CIPAddressCtrl` object."},{"pos":[3360,3433],"content":"<bpt id=\"p1\">&lt;a name=\"cipaddressctrl__clearaddress\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CIPAddressCtrl::ClearAddress","linkify":"<a name=\"cipaddressctrl__clearaddress\"></a>  CIPAddressCtrl::ClearAddress","source":"<a name=\"cipaddressctrl__clearaddress\"></a>  CIPAddressCtrl::ClearAddress"},{"content":"Clears the contents of the IP Address Control.","pos":[3437,3483]},{"pos":[3529,3536],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3540,3758],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>IPM_CLEARADDRESS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761377)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [IPM_CLEARADDRESS](http://msdn.microsoft.com/library/windows/desktop/bb761377), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[3768,3829],"content":"<bpt id=\"p1\">&lt;a name=\"cipaddressctrl__create\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CIPAddressCtrl::Create","linkify":"<a name=\"cipaddressctrl__create\"></a>  CIPAddressCtrl::Create","source":"<a name=\"cipaddressctrl__create\"></a>  CIPAddressCtrl::Create"},{"pos":[3833,3908],"content":"Creates an IP Address Control and attaches it to a <ph id=\"ph1\">`CIPAddressCtrl`</ph> object.","source":"Creates an IP Address Control and attaches it to a `CIPAddressCtrl` object."},{"pos":[4038,4048],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The IP Address control's style.","pos":[4065,4096]},{"content":"Apply a combination of window styles.","pos":[4097,4134]},{"content":"You must include the <bpt id=\"p1\">**</bpt>WS_CHILD<ept id=\"p1\">**</ept> style because the control must be a child window.","pos":[4135,4218],"source":" You must include the **WS_CHILD** style because the control must be a child window."},{"content":"See <bpt id=\"p1\">[</bpt>CreateWindow<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632679)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for a list of windows styles.","pos":[4219,4386],"source":" See [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for a list of windows styles."},{"content":"A reference to the IP Address Control's size and position.","pos":[4403,4461]},{"content":"It can be either a <bpt id=\"p1\">[</bpt>CRect<ept id=\"p1\">](../../atl-mfc-shared/reference/crect-class.md)</ept> object or a <bpt id=\"p2\">[</bpt>RECT<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure.","pos":[4462,4625],"source":" It can be either a [CRect](../../atl-mfc-shared/reference/crect-class.md) object or a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure."},{"content":"A pointer to the IP Address Control's parent window.","pos":[4648,4700]},{"content":"It must not be <bpt id=\"p1\">**</bpt>NULL.<ept id=\"p1\">**</ept>","pos":[4701,4725],"source":" It must not be **NULL.**"},{"content":"The IP Address Control's ID.","pos":[4741,4769]},{"pos":[4779,4791],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if initialization was successful; otherwise 0.","pos":[4795,4849]},{"pos":[4859,4866],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4870,4923],"content":"You construct a <ph id=\"ph1\">`CIPAddressCtrl`</ph> object in two steps.","source":"You construct a `CIPAddressCtrl` object in two steps."},{"pos":[4933,4997],"content":"Call the constructor, which creates the <ph id=\"ph1\">`CIPAddressCtrl`</ph> object.","source":"Call the constructor, which creates the `CIPAddressCtrl` object."},{"pos":[5007,5061],"content":"Call <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>, which creates the IP Address Control.","source":"Call **Create**, which creates the IP Address Control."},{"pos":[5068,5195],"content":"If you want to use extended windows styles with your control, call <bpt id=\"p1\">[</bpt>CreateEx<ept id=\"p1\">](#cipaddressctrl__createex)</ept> instead of <bpt id=\"p2\">**</bpt>Create<ept id=\"p2\">**</ept>.","source":"If you want to use extended windows styles with your control, call [CreateEx](#cipaddressctrl__createex) instead of **Create**."},{"pos":[5205,5270],"content":"<bpt id=\"p1\">&lt;a name=\"cipaddressctrl__createex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CIPAddressCtrl::CreateEx","linkify":"<a name=\"cipaddressctrl__createex\"></a>  CIPAddressCtrl::CreateEx","source":"<a name=\"cipaddressctrl__createex\"></a>  CIPAddressCtrl::CreateEx"},{"pos":[5274,5380],"content":"Call this function to create a control (a child window) and associate it with the <ph id=\"ph1\">`CIPAddressCtrl`</ph> object.","source":"Call this function to create a control (a child window) and associate it with the `CIPAddressCtrl` object."},{"pos":[5535,5545],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the extended style of the control being created.","pos":[5564,5622]},{"content":"For a list of extended Windows styles, see the <ph id=\"ph1\">`dwExStyle`</ph> parameter for <bpt id=\"p1\">[</bpt>CreateWindowEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632680)</ept> in the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[5623,5832],"source":" For a list of extended Windows styles, see the `dwExStyle` parameter for [CreateWindowEx](http://msdn.microsoft.com/library/windows/desktop/ms632680) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"The IP Address control's style.","pos":[5852,5883]},{"content":"Apply a combination of window styles.","pos":[5884,5921]},{"content":"You must include the <bpt id=\"p1\">**</bpt>WS_CHILD<ept id=\"p1\">**</ept> style because the control must be a child window.","pos":[5922,6005],"source":" You must include the **WS_CHILD** style because the control must be a child window."},{"content":"See <bpt id=\"p1\">[</bpt>CreateWindow<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632679)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for a list of windows styles.","pos":[6006,6173],"source":" See [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for a list of windows styles."},{"content":"A reference to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure describing the size and position of the window to be created, in client coordinates of <ph id=\"ph1\">`pParentWnd`</ph>.","pos":[6190,6384],"source":" A reference to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure describing the size and position of the window to be created, in client coordinates of `pParentWnd`."},{"content":"A pointer to the window that is the control's parent.","pos":[6407,6460]},{"content":"The control's child-window ID.","pos":[6476,6506]},{"pos":[6516,6528],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[6532,6567]},{"pos":[6577,6584],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6588,6741],"content":"Use <ph id=\"ph1\">`CreateEx`</ph> instead of <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](#cipaddressctrl__create)</ept> to apply extended Windows styles, specified by the Windows extended style preface <bpt id=\"p2\">**</bpt>WS_EX_<ept id=\"p2\">**</ept>.","source":"Use `CreateEx` instead of [Create](#cipaddressctrl__create) to apply extended Windows styles, specified by the Windows extended style preface **WS_EX_**."},{"pos":[6751,6820],"content":"<bpt id=\"p1\">&lt;a name=\"cipaddressctrl__getaddress\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CIPAddressCtrl::GetAddress","linkify":"<a name=\"cipaddressctrl__getaddress\"></a>  CIPAddressCtrl::GetAddress","source":"<a name=\"cipaddressctrl__getaddress\"></a>  CIPAddressCtrl::GetAddress"},{"content":"Retrieves the address values for all four fields in the IP Address Control.","pos":[6824,6899]},{"pos":[7065,7075],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to the field 0 value from a packed IP address.","pos":[7092,7150]},{"content":"A reference to the field 1 value from a packed IP address.","pos":[7170,7228]},{"content":"A reference to the field 2 value from a packed IP address.","pos":[7248,7306]},{"content":"A reference to the field 3 value from a packed IP address.","pos":[7326,7384]},{"content":"A reference to the address of a <ph id=\"ph1\">`DWORD`</ph> value that receives the IP address.","pos":[7406,7481],"source":" A reference to the address of a `DWORD` value that receives the IP address."},{"content":"See <bpt id=\"p1\">**</bpt>Remarks<ept id=\"p1\">**</ept> for a table that shows how <ph id=\"ph1\">`dwAddress`</ph> is filled.","pos":[7482,7547],"source":" See **Remarks** for a table that shows how `dwAddress` is filled."},{"pos":[7557,7569],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of non-blank fields in the IP Address Control.","pos":[7573,7630]},{"pos":[7640,7647],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>IPM_GETADDRESS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761378)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[7651,7867],"source":"This member function implements the behavior of the Win32 message [IPM_GETADDRESS](http://msdn.microsoft.com/library/windows/desktop/bb761378), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"In the first prototype above, the numbers in fields 0 through 3 of the control, read left to right respectively, populate the four parameters.","pos":[7868,8010]},{"content":"In the second prototype above, <ph id=\"ph1\">`dwAddress`</ph> is populated as follows.","pos":[8011,8078],"source":" In the second prototype above, `dwAddress` is populated as follows."},{"content":"Field","pos":[8085,8090]},{"content":"Bits containing the field value","pos":[8091,8122]},{"content":"0","pos":[8181,8182]},{"content":"24 through 31","pos":[8183,8196]},{"content":"1","pos":[8201,8202]},{"content":"16 through 23","pos":[8203,8216]},{"content":"2","pos":[8221,8222]},{"content":"8 through 15","pos":[8223,8235]},{"content":"3","pos":[8240,8241]},{"content":"0 through 7","pos":[8242,8253]},{"pos":[8264,8327],"content":"<bpt id=\"p1\">&lt;a name=\"cipaddressctrl__isblank\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CIPAddressCtrl::IsBlank","linkify":"<a name=\"cipaddressctrl__isblank\"></a>  CIPAddressCtrl::IsBlank","source":"<a name=\"cipaddressctrl__isblank\"></a>  CIPAddressCtrl::IsBlank"},{"content":"Determines if all fields in the IP Address Control are empty.","pos":[8331,8392]},{"pos":[8442,8454],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if all of the IP Address Control fields are empty; otherwise 0.","pos":[8458,8529]},{"pos":[8539,8546],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8550,8763],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>IPM_ISBLANK<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761379)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [IPM_ISBLANK](http://msdn.microsoft.com/library/windows/desktop/bb761379), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[8773,8842],"content":"<bpt id=\"p1\">&lt;a name=\"cipaddressctrl__setaddress\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CIPAddressCtrl::SetAddress","linkify":"<a name=\"cipaddressctrl__setaddress\"></a>  CIPAddressCtrl::SetAddress","source":"<a name=\"cipaddressctrl__setaddress\"></a>  CIPAddressCtrl::SetAddress"},{"content":"Sets the address values for all four fields in the IP Address Control.","pos":[8846,8916]},{"pos":[9079,9089],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The field 0 value from a packed IP address.","pos":[9106,9149]},{"content":"The field 1 value from a packed IP address.","pos":[9169,9212]},{"content":"The field 2 value from a packed IP address.","pos":[9232,9275]},{"content":"The field 3 value from a packed IP address.","pos":[9295,9338]},{"content":"A <ph id=\"ph1\">`DWORD`</ph> value that contains the new IP address.","pos":[9360,9409],"source":" A `DWORD` value that contains the new IP address."},{"content":"See <bpt id=\"p1\">**</bpt>Remarks<ept id=\"p1\">**</ept> for a table that shows how the <ph id=\"ph1\">`DWORD`</ph> value is filled.","pos":[9410,9481],"source":" See **Remarks** for a table that shows how the `DWORD` value is filled."},{"pos":[9491,9498],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>IPM_SETADDRESS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761380)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[9502,9718],"source":"This member function implements the behavior of the Win32 message [IPM_SETADDRESS](http://msdn.microsoft.com/library/windows/desktop/bb761380), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"In the first prototype above, the numbers in fields 0 through 3 of the control, read left to right respectively, populate the four parameters.","pos":[9719,9861]},{"content":"In the second prototype above, <ph id=\"ph1\">`dwAddress`</ph> is populated as follows.","pos":[9862,9929],"source":" In the second prototype above, `dwAddress` is populated as follows."},{"content":"Field","pos":[9936,9941]},{"content":"Bits containing the field value","pos":[9942,9973]},{"content":"0","pos":[10032,10033]},{"content":"24 through 31","pos":[10034,10047]},{"content":"1","pos":[10052,10053]},{"content":"16 through 23","pos":[10054,10067]},{"content":"2","pos":[10072,10073]},{"content":"8 through 15","pos":[10074,10086]},{"content":"3","pos":[10091,10092]},{"content":"0 through 7","pos":[10093,10104]},{"pos":[10115,10190],"content":"<bpt id=\"p1\">&lt;a name=\"cipaddressctrl__setfieldfocus\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CIPAddressCtrl::SetFieldFocus","linkify":"<a name=\"cipaddressctrl__setfieldfocus\"></a>  CIPAddressCtrl::SetFieldFocus","source":"<a name=\"cipaddressctrl__setfieldfocus\"></a>  CIPAddressCtrl::SetFieldFocus"},{"content":"Sets the keyboard focus to the specified field in the IP Address Control.","pos":[10194,10267]},{"pos":[10325,10335],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Zero-based field index to which the focus should be set.","pos":[10351,10407]},{"content":"If this value is greater than the number of fields, focus is set to the first blank field.","pos":[10408,10498]},{"content":"If all fields are non-blank, focus is set to the first field.","pos":[10499,10560]},{"pos":[10570,10577],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10581,10795],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>IPM_SETFOCUS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761381)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [IPM_SETFOCUS](http://msdn.microsoft.com/library/windows/desktop/bb761381), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[10805,10880],"content":"<bpt id=\"p1\">&lt;a name=\"cipaddressctrl__setfieldrange\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CIPAddressCtrl::SetFieldRange","linkify":"<a name=\"cipaddressctrl__setfieldrange\"></a>  CIPAddressCtrl::SetFieldRange","source":"<a name=\"cipaddressctrl__setfieldrange\"></a>  CIPAddressCtrl::SetFieldRange"},{"content":"Sets the range in the specified field in the IP Address Control.","pos":[10884,10948]},{"pos":[11048,11058],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Zero-based field index to which the range will be applied.","pos":[11074,11132]},{"content":"A reference to an integer receiving the lower limit of the specified field in this IP Address Control.","pos":[11151,11253]},{"content":"A reference to an integer receiving the upper limit of the specified field in this IP Address Control.","pos":[11272,11374]},{"pos":[11384,11391],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>IPM_SETRANGE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761382)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[11395,11609],"source":"This member function implements the behavior of the Win32 message [IPM_SETRANGE](http://msdn.microsoft.com/library/windows/desktop/bb761382), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Use the two parameters, <ph id=\"ph1\">`nLower`</ph> and <ph id=\"ph2\">`nUpper`</ph>, to indicate the lower and upper limits of the field, instead of the <bpt id=\"p1\">*</bpt>wRange<ept id=\"p1\">*</ept> parameter used with the Win32 message.","pos":[11610,11772],"source":" Use the two parameters, `nLower` and `nUpper`, to indicate the lower and upper limits of the field, instead of the *wRange* parameter used with the Win32 message."},{"pos":[11781,11789],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>CWnd Class<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[11793,11841],"source":"[CWnd Class](../../mfc/reference/cwnd-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept>","pos":[11844,11892],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md)"}],"content":"---\ntitle: \"CIPAddressCtrl Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CIPAddressCtrl\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"IP address control\"\n  - \"Internet address edit box\"\n  - \"CIPAddressCtrl class\"\n  - \"Internet protocol address box\"\n  - \"common controls, Internet Explorer 4.0\"\n  - \"Internet Explorer 4.0 common controls\"\nms.assetid: 9764d2f4-cb14-4ba8-b799-7f57a55a47c6\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CIPAddressCtrl Class\nProvides the functionality of the Windows common IP Address control.  \n  \n## Syntax  \n  \n```  \nclass CIPAddressCtrl : public CWnd  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CIPAddressCtrl::CIPAddressCtrl](#cipaddressctrl__cipaddressctrl)|Constructs a `CIPAddressCtrl` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CIPAddressCtrl::ClearAddress](#cipaddressctrl__clearaddress)|Clears the contents of the IP Address Control.|  \n|[CIPAddressCtrl::Create](#cipaddressctrl__create)|Creates an IP Address Control and attaches it to a `CIPAddressCtrl` object.|  \n|[CIPAddressCtrl::CreateEx](#cipaddressctrl__createex)|Creates an IP Address control with the specified Windows extended styles and attaches it to a `CIPAddressCtrl` object.|  \n|[CIPAddressCtrl::GetAddress](#cipaddressctrl__getaddress)|Retrieves the address values for all four fields in the IP Address Control.|  \n|[CIPAddressCtrl::IsBlank](#cipaddressctrl__isblank)|Determines if all fields in the IP Address Control are empty.|  \n|[CIPAddressCtrl::SetAddress](#cipaddressctrl__setaddress)|Sets the address values for all four fields in the IP Address Control.|  \n|[CIPAddressCtrl::SetFieldFocus](#cipaddressctrl__setfieldfocus)|Sets the keyboard focus to the specified field in the IP Address Control.|  \n|[CIPAddressCtrl::SetFieldRange](#cipaddressctrl__setfieldrange)|Sets the range in the specified field in the IP Address Control.|  \n  \n## Remarks  \n An IP Address control, a control similar to an edit control, allows you to enter and manipulate a numerical address in Internet Protocol (IP) format.  \n  \n This control (and therefore the `CIPAddressCtrl` class) is available only to programs running under Microsoft Internet Explorer 4.0 and later. They will also be available under future versions of Windows and Windows NT.  \n  \n For more general information about the IP Address Control, see [IP Address Controls](http://msdn.microsoft.com/library/windows/desktop/bb761372) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n `CIPAddressCtrl`  \n  \n## Requirements  \n **Header:** afxcmn.h  \n  \n##  <a name=\"cipaddressctrl__cipaddressctrl\"></a>  CIPAddressCtrl::CIPAddressCtrl  \n Creates a `CIPAddressCtrl` object.  \n  \n```  \nCIPAddressCtrl();\n```  \n  \n##  <a name=\"cipaddressctrl__clearaddress\"></a>  CIPAddressCtrl::ClearAddress  \n Clears the contents of the IP Address Control.  \n  \n```  \nvoid ClearAddress();\n```  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [IPM_CLEARADDRESS](http://msdn.microsoft.com/library/windows/desktop/bb761377), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cipaddressctrl__create\"></a>  CIPAddressCtrl::Create  \n Creates an IP Address Control and attaches it to a `CIPAddressCtrl` object.  \n  \n```  \nvirtual BOOL Create(\n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    UINT nID);\n```  \n  \n### Parameters  \n `dwStyle`  \n The IP Address control's style. Apply a combination of window styles. You must include the **WS_CHILD** style because the control must be a child window. See [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for a list of windows styles.  \n  \n `rect`  \n A reference to the IP Address Control's size and position. It can be either a [CRect](../../atl-mfc-shared/reference/crect-class.md) object or a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure.  \n  \n `pParentWnd`  \n A pointer to the IP Address Control's parent window. It must not be **NULL.**  \n  \n `nID`  \n The IP Address Control's ID.  \n  \n### Return Value  \n Nonzero if initialization was successful; otherwise 0.  \n  \n### Remarks  \n You construct a `CIPAddressCtrl` object in two steps.  \n  \n1.  Call the constructor, which creates the `CIPAddressCtrl` object.  \n  \n2.  Call **Create**, which creates the IP Address Control.  \n  \n If you want to use extended windows styles with your control, call [CreateEx](#cipaddressctrl__createex) instead of **Create**.  \n  \n##  <a name=\"cipaddressctrl__createex\"></a>  CIPAddressCtrl::CreateEx  \n Call this function to create a control (a child window) and associate it with the `CIPAddressCtrl` object.  \n  \n```  \nvirtual BOOL CreateEx(\n    DWORD dwExStyle,  \n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    UINT nID);\n```  \n  \n### Parameters  \n `dwExStyle`  \n Specifies the extended style of the control being created. For a list of extended Windows styles, see the `dwExStyle` parameter for [CreateWindowEx](http://msdn.microsoft.com/library/windows/desktop/ms632680) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `dwStyle`  \n The IP Address control's style. Apply a combination of window styles. You must include the **WS_CHILD** style because the control must be a child window. See [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for a list of windows styles.  \n  \n `rect`  \n A reference to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure describing the size and position of the window to be created, in client coordinates of `pParentWnd`.  \n  \n `pParentWnd`  \n A pointer to the window that is the control's parent.  \n  \n `nID`  \n The control's child-window ID.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n Use `CreateEx` instead of [Create](#cipaddressctrl__create) to apply extended Windows styles, specified by the Windows extended style preface **WS_EX_**.  \n  \n##  <a name=\"cipaddressctrl__getaddress\"></a>  CIPAddressCtrl::GetAddress  \n Retrieves the address values for all four fields in the IP Address Control.  \n  \n```  \nint GetAddress(\n    BYTE& nField0,  \n    BYTE& nField1,  \n    BYTE& nField2,  \n    BYTE& nField3);\n\n \nint GetAddress(\n    DWORD& dwAddress);\n```  \n  \n### Parameters  \n `nField0`  \n A reference to the field 0 value from a packed IP address.  \n  \n `nField1`  \n A reference to the field 1 value from a packed IP address.  \n  \n `nField2`  \n A reference to the field 2 value from a packed IP address.  \n  \n `nField3`  \n A reference to the field 3 value from a packed IP address.  \n  \n `dwAddress`  \n A reference to the address of a `DWORD` value that receives the IP address. See **Remarks** for a table that shows how `dwAddress` is filled.  \n  \n### Return Value  \n The number of non-blank fields in the IP Address Control.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [IPM_GETADDRESS](http://msdn.microsoft.com/library/windows/desktop/bb761378), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. In the first prototype above, the numbers in fields 0 through 3 of the control, read left to right respectively, populate the four parameters. In the second prototype above, `dwAddress` is populated as follows.  \n  \n|Field|Bits containing the field value|  \n|-----------|-------------------------------------|  \n|0|24 through 31|  \n|1|16 through 23|  \n|2|8 through 15|  \n|3|0 through 7|  \n  \n##  <a name=\"cipaddressctrl__isblank\"></a>  CIPAddressCtrl::IsBlank  \n Determines if all fields in the IP Address Control are empty.  \n  \n```  \nBOOL IsBlank() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if all of the IP Address Control fields are empty; otherwise 0.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [IPM_ISBLANK](http://msdn.microsoft.com/library/windows/desktop/bb761379), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cipaddressctrl__setaddress\"></a>  CIPAddressCtrl::SetAddress  \n Sets the address values for all four fields in the IP Address Control.  \n  \n```  \nvoid SetAddress(\n    BYTE nField0,  \n    BYTE nField1,  \n    BYTE nField2,  \n    BYTE nField3);\n\n \nvoid SetAddress(\n    DWORD dwAddress);\n```  \n  \n### Parameters  \n `nField0`  \n The field 0 value from a packed IP address.  \n  \n `nField1`  \n The field 1 value from a packed IP address.  \n  \n `nField2`  \n The field 2 value from a packed IP address.  \n  \n `nField3`  \n The field 3 value from a packed IP address.  \n  \n `dwAddress`  \n A `DWORD` value that contains the new IP address. See **Remarks** for a table that shows how the `DWORD` value is filled.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [IPM_SETADDRESS](http://msdn.microsoft.com/library/windows/desktop/bb761380), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. In the first prototype above, the numbers in fields 0 through 3 of the control, read left to right respectively, populate the four parameters. In the second prototype above, `dwAddress` is populated as follows.  \n  \n|Field|Bits containing the field value|  \n|-----------|-------------------------------------|  \n|0|24 through 31|  \n|1|16 through 23|  \n|2|8 through 15|  \n|3|0 through 7|  \n  \n##  <a name=\"cipaddressctrl__setfieldfocus\"></a>  CIPAddressCtrl::SetFieldFocus  \n Sets the keyboard focus to the specified field in the IP Address Control.  \n  \n```  \nvoid SetFieldFocus(WORD nField);\n```  \n  \n### Parameters  \n `nField`  \n Zero-based field index to which the focus should be set. If this value is greater than the number of fields, focus is set to the first blank field. If all fields are non-blank, focus is set to the first field.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [IPM_SETFOCUS](http://msdn.microsoft.com/library/windows/desktop/bb761381), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cipaddressctrl__setfieldrange\"></a>  CIPAddressCtrl::SetFieldRange  \n Sets the range in the specified field in the IP Address Control.  \n  \n```  \nvoid SetFieldRange(\n    int nField,  \n    BYTE nLower,  \n    BYTE nUpper);\n```  \n  \n### Parameters  \n `nField`  \n Zero-based field index to which the range will be applied.  \n  \n `nLower`  \n A reference to an integer receiving the lower limit of the specified field in this IP Address Control.  \n  \n `nUpper`  \n A reference to an integer receiving the upper limit of the specified field in this IP Address Control.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [IPM_SETRANGE](http://msdn.microsoft.com/library/windows/desktop/bb761382), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. Use the two parameters, `nLower` and `nUpper`, to indicate the lower and upper limits of the field, instead of the *wRange* parameter used with the Win32 message.  \n  \n## See Also  \n [CWnd Class](../../mfc/reference/cwnd-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)\n\n\n\n"}