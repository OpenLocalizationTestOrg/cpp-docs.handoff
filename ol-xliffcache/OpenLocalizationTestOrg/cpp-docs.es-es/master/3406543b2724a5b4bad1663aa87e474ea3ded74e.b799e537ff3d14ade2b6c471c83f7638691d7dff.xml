{"nodes":[{"pos":[12,33],"content":"rand | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"rand | Microsoft Docs","pos":[0,21]}]},{"content":"rand","pos":[1060,1064]},{"content":"Generates a pseudorandom number.","pos":[1065,1097]},{"content":"A more secure version of this function is available, see <bpt id=\"p1\">[</bpt>rand_s<ept id=\"p1\">](../../c-runtime-library/reference/rand-s.md)</ept>.","pos":[1098,1209],"source":" A more secure version of this function is available, see [rand_s](../../c-runtime-library/reference/rand-s.md)."},{"content":"Syntax","pos":[1218,1224]},{"content":"Return Value","pos":[1268,1280]},{"content":"returns a pseudorandom number, as described above.","pos":[1291,1341]},{"content":"There is no error return.","pos":[1342,1367]},{"content":"Remarks","pos":[1376,1383]},{"content":"The <ph id=\"ph1\">`rand`</ph> function returns a pseudorandom integer in the range 0 to <ph id=\"ph2\">`RAND_MAX`</ph> (32767).","pos":[1387,1475],"source":"The `rand` function returns a pseudorandom integer in the range 0 to `RAND_MAX` (32767)."},{"content":"Use the <bpt id=\"p1\">[</bpt>srand<ept id=\"p1\">](../../c-runtime-library/reference/srand.md)</ept> function to seed the pseudorandom-number generator before calling <ph id=\"ph1\">`rand`</ph>.","pos":[1476,1609],"source":" Use the [srand](../../c-runtime-library/reference/srand.md) function to seed the pseudorandom-number generator before calling `rand`."},{"content":"Requirements","pos":[1618,1630]},{"content":"Routine","pos":[1637,1644]},{"content":"Required header","pos":[1645,1660]},{"content":"stdlib.h&gt;","pos":[1714,1723],"source":"stdlib.h>"},{"pos":[1731,1855],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[1864,1871]},{"content":".NET Framework Equivalent","pos":[3124,3149]},{"content":"System::Random Class","pos":[3154,3174]},{"content":"See Also","pos":[3245,3253]},{"content":"Floating-Point Support","pos":[3258,3280]},{"content":"srand","pos":[3338,3343]},{"content":"rand_s","pos":[3394,3400]}],"content":"---\ntitle: \"rand | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"rand\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-utility-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"rand\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"generating pseudorandom numbers\"\n  - \"random numbers, generating\"\n  - \"numbers, pseudorandom\"\n  - \"rand function\"\n  - \"pseudorandom numbers\"\n  - \"numbers, generating pseudorandom\"\nms.assetid: 75d9df25-7aaf-4a88-b940-2775559634e8\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# rand\nGenerates a pseudorandom number. A more secure version of this function is available, see [rand_s](../../c-runtime-library/reference/rand-s.md).  \n  \n## Syntax  \n  \n```  \nint rand( void );  \n```  \n  \n## Return Value  \n `rand` returns a pseudorandom number, as described above. There is no error return.  \n  \n## Remarks  \n The `rand` function returns a pseudorandom integer in the range 0 to `RAND_MAX` (32767). Use the [srand](../../c-runtime-library/reference/srand.md) function to seed the pseudorandom-number generator before calling `rand`.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`rand`|\\<stdlib.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_rand.c  \n// This program seeds the random-number generator  \n// with the time, then exercises the rand function.  \n//  \n  \n#include <stdlib.h>  \n#include <stdio.h>  \n#include <time.h>  \n  \nvoid SimpleRandDemo( int n )  \n{  \n   // Print n random numbers.  \n   int i;  \n   for( i = 0; i < n; i++ )  \n      printf( \"  %6d\\n\", rand() );  \n}  \n  \nvoid RangedRandDemo( int range_min, int range_max, int n )  \n{  \n   // Generate random numbers in the half-closed interval  \n   // [range_min, range_max). In other words,  \n   // range_min <= random number < range_max  \n   int i;  \n   for ( i = 0; i < n; i++ )  \n   {  \n      int u = (double)rand() / (RAND_MAX + 1) * (range_max - range_min)  \n            + range_min;  \n      printf( \"  %6d\\n\", u);  \n   }  \n}  \n  \nint main( void )  \n{  \n   // Seed the random-number generator with the current time so that  \n   // the numbers will be different every time we run.  \n   srand( (unsigned)time( NULL ) );  \n  \n   SimpleRandDemo( 10 );  \n   printf(\"\\n\");  \n   RangedRandDemo( -100, 100, 10 );  \n}  \n```  \n  \n```Output  \n22036  \n18330  \n11651  \n27464  \n18093  \n 3284  \n11785  \n14686  \n11447  \n11285  \n  \n   74  \n   48  \n   27  \n   65  \n   96  \n   64  \n   -5  \n  -42  \n  -55  \n   66  \n```  \n  \n## .NET Framework Equivalent  \n [System::Random Class](https://msdn.microsoft.com/en-us/library/system.random.aspx)  \n  \n## See Also  \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [srand](../../c-runtime-library/reference/srand.md)   \n [rand_s](../../c-runtime-library/reference/rand-s.md)"}