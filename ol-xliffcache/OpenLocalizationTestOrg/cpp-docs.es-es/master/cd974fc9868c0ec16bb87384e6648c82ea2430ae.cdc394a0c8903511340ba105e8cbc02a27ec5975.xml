{"nodes":[{"pos":[12,50],"content":"_com_ptr_t Extractors | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_com_ptr_t Extractors | Microsoft Docs","pos":[0,38]}]},{"content":"_com_ptr_t Extractors","pos":[1184,1205]},{"content":"Microsoft Specific","pos":[1208,1226]},{"content":"Extract the encapsulated COM interface pointer.","pos":[1235,1282]},{"content":"Syntax","pos":[1291,1297]},{"content":"Remarks","pos":[1547,1554]},{"pos":[1564,1655],"content":"<bpt id=\"p1\">**</bpt>operator Interface<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> Returns the encapsulated interface pointer, which may be <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>.","source":"**operator Interface\\*** Returns the encapsulated interface pointer, which may be **NULL**."},{"pos":[1665,1795],"content":"<bpt id=\"p1\">**</bpt>operator Interface&amp;<ept id=\"p1\">**</ept> Returns a reference to the encapsulated interface pointer, and issues an error if the pointer is <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>.","source":"**operator Interface&** Returns a reference to the encapsulated interface pointer, and issues an error if the pointer is **NULL**."},{"pos":[1805,1927],"content":"<bpt id=\"p1\">**</bpt>operator<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> Allows a smart pointer object to act as though it were the actual encapsulated interface when dereferenced.","source":"**operator\\*** Allows a smart pointer object to act as though it were the actual encapsulated interface when dereferenced."},{"pos":[1937,2059],"content":"<bpt id=\"p1\">**</bpt>operator-&gt;<ept id=\"p1\">**</ept> Allows a smart pointer object to act as though it were the actual encapsulated interface when dereferenced.","source":"**operator->** Allows a smart pointer object to act as though it were the actual encapsulated interface when dereferenced."},{"content":"<bpt id=\"p1\">**</bpt>operator&amp;<ept id=\"p1\">**</ept> Releases any encapsulated interface pointer, replacing it with <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>, and returns the address of the encapsulated pointer.","pos":[2069,2208],"source":"**operator&** Releases any encapsulated interface pointer, replacing it with **NULL**, and returns the address of the encapsulated pointer."},{"content":"This allows the smart pointer to be passed by address to a function that has an <bpt id=\"p1\">**</bpt>out<ept id=\"p1\">**</ept> parameter through which it returns an interface pointer.","pos":[2209,2353],"source":" This allows the smart pointer to be passed by address to a function that has an **out** parameter through which it returns an interface pointer."},{"content":"<bpt id=\"p1\">**</bpt>operator bool<ept id=\"p1\">**</ept> Allows a smart pointer object to be used in a conditional expression.","pos":[2363,2450],"source":"**operator bool** Allows a smart pointer object to be used in a conditional expression."},{"content":"This operator returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the pointer is not <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>.","pos":[2451,2513],"source":" This operator returns **true** if the pointer is not **NULL**."},{"content":"END Microsoft Specific","pos":[2522,2544]},{"content":"See Also","pos":[2555,2563]},{"content":"_com_ptr_t Class","pos":[2568,2584]}],"content":"---\ntitle: \"_com_ptr_t Extractors | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"_com_ptr_t::operatorInterface&\"\n  - \"operatorInterface*\"\n  - \"operatorInterface&\"\n  - \"_com_ptr_t::operatorbool\"\n  - \"_com_ptr_t.operator->\"\n  - \"_com_ptr_t.operator*\"\n  - \"_com_ptr_t::operator->\"\n  - \"_com_ptr_t::operator*\"\n  - \"_com_ptr_t.operatorInterface&\"\n  - \"_com_ptr_t.operatorbool\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"operator Interface&\"\n  - \"* operator, with specific objects\"\n  - \"operator&\"\n  - \"operator*\"\n  - \"-> operator, with specific objects\"\n  - \"& operator, with specific objects\"\n  - \"operator Interface*\"\n  - \"operator *\"\n  - \"operator->\"\n  - \"operator bool\"\n  - \"extractors, _com_ptr_t class\"\n  - \"extractors\"\nms.assetid: 194b9e0e-123c-49ff-a187-0a7fcd68145a\ncaps.latest.revision: 6\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _com_ptr_t Extractors\n**Microsoft Specific**  \n  \n Extract the encapsulated COM interface pointer.  \n  \n## Syntax  \n  \n```  \n  \n      operator Interface*( ) const throw( );   \noperator Interface&( ) const;   \nInterface& operator*( ) const;   \nInterface* operator->( ) const;   \nInterface** operator&( ) throw( );   \noperator bool( ) const throw( );  \n```  \n  \n## Remarks  \n  \n-   **operator Interface\\*** Returns the encapsulated interface pointer, which may be **NULL**.  \n  \n-   **operator Interface&** Returns a reference to the encapsulated interface pointer, and issues an error if the pointer is **NULL**.  \n  \n-   **operator\\*** Allows a smart pointer object to act as though it were the actual encapsulated interface when dereferenced.  \n  \n-   **operator->** Allows a smart pointer object to act as though it were the actual encapsulated interface when dereferenced.  \n  \n-   **operator&** Releases any encapsulated interface pointer, replacing it with **NULL**, and returns the address of the encapsulated pointer. This allows the smart pointer to be passed by address to a function that has an **out** parameter through which it returns an interface pointer.  \n  \n-   **operator bool** Allows a smart pointer object to be used in a conditional expression. This operator returns **true** if the pointer is not **NULL**.  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [_com_ptr_t Class](../cpp/com-ptr-t-class.md)"}