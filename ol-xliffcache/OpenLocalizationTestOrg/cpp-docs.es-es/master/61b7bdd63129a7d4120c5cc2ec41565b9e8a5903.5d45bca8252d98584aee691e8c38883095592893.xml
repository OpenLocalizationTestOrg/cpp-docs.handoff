{"nodes":[{"pos":[12,40],"content":"MASM Macros | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"MASM Macros | Microsoft Docs","pos":[0,28]}]},{"content":"MASM Macros","pos":[520,531]},{"pos":[532,749],"content":"In order to simplify the use of the <bpt id=\"p1\">[</bpt>Raw Pseudo Operations<ept id=\"p1\">](../build/raw-pseudo-operations.md)</ept>, there are a set of macros, defined in ksamd64.inc, which can be used to create typical procedure prologues and epilogues.","source":"In order to simplify the use of the [Raw Pseudo Operations](../build/raw-pseudo-operations.md), there are a set of macros, defined in ksamd64.inc, which can be used to create typical procedure prologues and epilogues."},{"content":"Remarks","pos":[758,765]},{"content":"Macro","pos":[772,777]},{"content":"Description","pos":[778,789]},{"content":"alloc_stack(n)","pos":[828,842]},{"content":"Allocates a stack frame of n bytes (using sub rsp, n), and emits the appropriate unwind information (.allocstack n)","pos":[843,958]},{"content":"save_reg reg, loc","pos":[963,980]},{"content":"Saves a nonvolatile register reg on the stack at RSP offset loc, and emits the appropriate unwind information.","pos":[981,1091]},{"content":"(.savereg reg, loc)","pos":[1092,1111]},{"content":"push_reg reg","pos":[1116,1128]},{"content":"Pushes a nonvolatile register reg on the stack, and emits the appropriate unwind information.","pos":[1129,1222]},{"content":"(.pushreg reg)","pos":[1223,1237]},{"content":"rex_push_reg reg","pos":[1242,1258]},{"content":"Save a nonvolatile register on the stack using a 2 byte push, and emits the appropriate unwind information (.pushreg reg)  This should be used if the push is the first instruction in the function to ensure that the function is hot-patchable.","pos":[1259,1500]},{"content":"save_xmm128 reg, loc","pos":[1505,1525]},{"content":"Saves a nonvolatile XMM register reg on the stack at RSP offset loc, and emits the appropriate unwind information (.savexmm128 reg, loc)","pos":[1526,1662]},{"content":"set_frame reg, offset","pos":[1667,1688]},{"content":"Sets the frame register reg to be the RSP + offset (using a mov, or an lea), and emits the appropriate unwind information (.set_frame reg, offset)","pos":[1689,1835]},{"content":"push_eflags","pos":[1840,1851]},{"content":"Pushes the eflags with a pushfq instruction, and emits the appropriate unwind information (.alloc_stack 8)","pos":[1852,1958]},{"content":"Here is a sample function prolog with proper usage of the macros:","pos":[1966,2031]},{"content":"See Also","pos":[2672,2680]},{"content":"Unwind Helpers for MASM","pos":[2685,2708]}],"content":"---\ntitle: \"MASM Macros | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: 21410432-72fc-4795-bc93-e78123f9f14f\ncaps.latest.revision: 5\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# MASM Macros\nIn order to simplify the use of the [Raw Pseudo Operations](../build/raw-pseudo-operations.md), there are a set of macros, defined in ksamd64.inc, which can be used to create typical procedure prologues and epilogues.  \n  \n## Remarks  \n  \n|Macro|Description|  \n|-----------|-----------------|  \n|alloc_stack(n)|Allocates a stack frame of n bytes (using sub rsp, n), and emits the appropriate unwind information (.allocstack n)|  \n|save_reg reg, loc|Saves a nonvolatile register reg on the stack at RSP offset loc, and emits the appropriate unwind information. (.savereg reg, loc)|  \n|push_reg reg|Pushes a nonvolatile register reg on the stack, and emits the appropriate unwind information. (.pushreg reg)|  \n|rex_push_reg reg|Save a nonvolatile register on the stack using a 2 byte push, and emits the appropriate unwind information (.pushreg reg)  This should be used if the push is the first instruction in the function to ensure that the function is hot-patchable.|  \n|save_xmm128 reg, loc|Saves a nonvolatile XMM register reg on the stack at RSP offset loc, and emits the appropriate unwind information (.savexmm128 reg, loc)|  \n|set_frame reg, offset|Sets the frame register reg to be the RSP + offset (using a mov, or an lea), and emits the appropriate unwind information (.set_frame reg, offset)|  \n|push_eflags|Pushes the eflags with a pushfq instruction, and emits the appropriate unwind information (.alloc_stack 8)|  \n  \n Here is a sample function prolog with proper usage of the macros:  \n  \n```  \nSkFrame struct   \nFill    dq ?; fill to 8 mod 16   \nSavedRdi dq ?; saved register RDI   \nSavedRsi dq ?; saved register RSI   \nSkFrame ends  \n  \nsampleFrame struct  \nFilldq?; fill to 8 mod 16  \nSavedRdidq?; Saved Register RDI   \nSavedRsi  dq?; Saved Register RSI  \nsampleFrame ends  \n  \nsample2 PROC FRAME  \nalloc_stack(sizeof sampleFrame)  \nsave_reg rdi, sampleFrame.SavedRdi  \nsave_reg rsi, sampleFrame.SavedRsi  \n.end_prolog  \n  \n; function body  \n  \nmov rsi, sampleFrame.SavedRsi[rsp]  \nmov rdi, sampleFrame.SavedRdi[rsp]  \n  \n; Hereâ€™s the official epilog  \n  \nadd rsp, (sizeof sampleFrame)  \nret  \nsample2 ENDP  \n```  \n  \n## See Also  \n [Unwind Helpers for MASM](../build/unwind-helpers-for-masm.md)"}