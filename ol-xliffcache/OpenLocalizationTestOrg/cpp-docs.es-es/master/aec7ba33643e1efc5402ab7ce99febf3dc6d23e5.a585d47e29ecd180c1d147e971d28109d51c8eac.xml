{"nodes":[{"pos":[12,51],"content":"Porting Guide: COM Spy | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Porting Guide: COM Spy | Microsoft Docs","pos":[0,39]}]},{"content":"Porting Guide: COM Spy","pos":[532,554]},{"content":"This topic is the second in a series of articles that demonstrates the process of upgrading older Visual C++ projects to the latest version of Visual Studio.","pos":[555,712]},{"content":"The example code in this topic was last compiled with Visual Studio 2005.","pos":[713,786]},{"content":"COMSpy","pos":[795,801]},{"content":"COMSpy is a program that monitors and logs the activity of serviced components on a machine.","pos":[805,897]},{"content":"Serviced components are COM+ components that run on a system and can be used by computers on the same network.","pos":[898,1008]},{"content":"They're managed by the Component Services functionality in the Windows Control Panel.","pos":[1009,1094]},{"content":"Step 1.","pos":[1104,1111]},{"content":"Converting the project file.","pos":[1112,1140]},{"content":"The project file converts easily and produces a migration report.","pos":[1144,1209]},{"content":"There are a few entries in the report that let us know about issues we might need to deal with.","pos":[1210,1305]},{"content":"Here's one issue that is reported (note that throughout this topic, error messages are sometimes shortened for readability, for example to remove the full paths):","pos":[1306,1468]},{"content":"One of the frequent problems in upgrading projects is that the Linker OutputFile setting in the project properties dialog box might need to be reviewed.","pos":[2001,2153]},{"content":"For projects prior to Visual Studio 2010, the OutputFile is one setting that the automatic conversion wizard has trouble with, if it's set to a non-standard value.","pos":[2154,2317]},{"content":"In this case, the paths for the output files were set to a nonstandard folder, XP32_DEBUG.","pos":[2318,2408]},{"content":"To find out more about this error, we consulted a <bpt id=\"p1\">[</bpt>blog post<ept id=\"p1\">](http://blogs.msdn.com/b/vcblog/archive/2010/03/02/visual-studio-2010-c-project-upgrade-guide.aspx)</ept> related to the Visual C++ 2010 project upgrade, which was the upgrade that involved the change from vcbuild to msbuild, a significant change.","pos":[2409,2711],"source":" To find out more about this error, we consulted a [blog post](http://blogs.msdn.com/b/vcblog/archive/2010/03/02/visual-studio-2010-c-project-upgrade-guide.aspx) related to the Visual C++ 2010 project upgrade, which was the upgrade that involved the change from vcbuild to msbuild, a significant change."},{"content":"According to this information, the default value for the Output File setting when you create a new project is $(OutDir)$(TargetName)$(TargetExt), but this isn't set during conversion since it's not possible for converted projects to verify that everything is correct.","pos":[2712,2979]},{"content":"However, let's try putting that in for OutputFile and see if it works.","pos":[2981,3051]},{"content":"It does, so we can move on.","pos":[3053,3080]},{"content":"If there is no particular reason for using a nonstandard output folder, we recommend using the standard location.","pos":[3081,3194]},{"content":"In this case, we chose to leave the output location as the non-standard during the porting and upgrading process; $(OutDir) resolves to the XP32_DEBUG folder in the Debug configuration and the ReleaseU folder for the Release configuration.","pos":[3195,3434]},{"content":"Step 2.","pos":[3444,3451]},{"content":"Getting it to build","pos":[3452,3471]},{"content":"Building the ported project, a number of errors and warnings occur.","pos":[3475,3542]},{"content":"ComSpyCtl doesn't compile though due to this compiler error:","pos":[3549,3609]},{"content":"The error references the Save method on the IPersistStreamInitImpl class in atlcom.h.","pos":[4167,4252]},{"content":"The problem is that a conversion that an older version of the compiler accepted is no longer valid.","pos":[4541,4640]},{"content":"In order to conform with the C++ standard, some code that previously was allowed is no longer allowed.","pos":[4641,4743]},{"content":"In this case, it's not safe to pass a non-const pointer to a function that expects a const pointer.","pos":[4744,4843]},{"content":"The solution is to find the declaration of IPersistStreamInit_Save on the CComSpy class and add the const modifier to the third parameter.","pos":[4845,4983]},{"content":"And a similar change to IPersistStreamInit_Load.","pos":[5124,5172]},{"content":"The next error deals with registration.","pos":[5278,5317]},{"content":"We don't need this post-build registration command anymore.","pos":[5588,5647]},{"content":"Instead, we simply remove the custom build command, and specify in the Linker settings to register the output.","pos":[5648,5758]},{"content":"Dealing with warnings","pos":[5768,5789]},{"content":"The project produces the following linker warning.","pos":[5793,5843]},{"content":"The /SAFESEH compiler option is not useful in debug mode, which is when /EDITANDCONTINUE is useful, so the fix here is to disable /SAFESEH for Debug configurations only.","pos":[5950,6119]},{"content":"To do this in the property dialog, we open the property dialog for the project that produces this error, and we first set the Configuration to Debug (actually Debug Unicode), and then in the Linker Advanced section, reset the Image Has Safe Exception Handlers property to No (/SAFESEH:NO).","pos":[6120,6409]},{"content":"The compiler warns us that PROP_ENTRY_EX is deprecated.","pos":[6416,6471]},{"content":"It's not secure and the recommended substitute is PROP_ENTRY_TYPE_EX.","pos":[6472,6541]},{"content":"We change the code in ccomspy.h accordingly, adding COM types as appropriate.","pos":[6997,7074]},{"content":"We're getting down to the last few warnings, which are also caused by more strict compiler conformance checks:","pos":[7586,7696]},{"content":"Warning C4018 comes from this code:","pos":[8131,8166]},{"content":"The problem is that i is declared as UINT and lCount is declared as long, hence the signed/unsigned mismatch.","pos":[8247,8356]},{"content":"It would be inconvenient to change the type of lCount to UINT, since it gets its value from IMtsEventInfo::get_Count, which uses the type long, and is not in user code.","pos":[8357,8525]},{"content":"So we add a cast to the code.","pos":[8526,8555]},{"content":"A C-style cast would do for a numerical cast such as this, but static_cast is the recommended style.","pos":[8556,8656]},{"content":"Those warnings are cases where a variable was declared in a function that has a parameter with the same name, leading to potentially confusing code.","pos":[8756,8904]},{"content":"We fixed that by changing the names of the local variables.","pos":[8905,8964]},{"content":"Step 3.","pos":[8974,8981]},{"content":"Testing and debugging","pos":[8982,9003]},{"content":"We tested the app first by running through the various menus and commands, and then closing the application.","pos":[9007,9115]},{"content":"The only issue noted was a debug assertion upon closing down the app.","pos":[9116,9185]},{"content":"The problem appeared in the destructor for CWindowImpl, a base class of the CSpyCon object, the application's main COM component.","pos":[9186,9315]},{"content":"The assertion failure occurred in the following code in atlwin.h.","pos":[9316,9381]},{"content":"The hWnd is normally set to zero in the WindowProc function, but that didn't happen because instead of the default WindowProc, a custom handler is called for the Windows message (WM_SYSCOMMAND) that closes the window.","pos":[9699,9916]},{"content":"The custom handler was not setting the hWnd to zero.","pos":[9917,9969]},{"content":"A look at similar code in MFC's CWnd class, shows that when a window is being destroyed, OnNcDestroy is called, and in MFC, documentation advises that when overriding CWnd::OnNcDestroy, the base NcDestroy should be called to make sure that the right clean-up operations occur, including separating the window handle from the window, or in other words, setting the hWnd to zero.","pos":[9970,10347]},{"content":"This assert might have been triggered in the original version of the sample as well, since the same assertion code was present in the old version of atlwin.h.","pos":[10348,10506]},{"content":"To test the functionality of the app, we created a Serviced Component using the ATL project template, chose to add COM+ support in the ATL project wizard.","pos":[10513,10667]},{"content":"If you haven’t worked with serviced components before, it’s not difficult to create one and get one registered and available on the system or network for other apps to use.","pos":[10668,10840]},{"content":"The COM Spy app is designed to monitor the activity of serviced components as a diagnostic aid.","pos":[10841,10936]},{"content":"Then we added a class, chose ATL Object, and specified the object name as Dog.","pos":[10943,11021]},{"content":"Then in dog.h and dog.cpp, we added the implementation.","pos":[11022,11077]},{"content":"Next, we built and registered it (you’ll need to run Visual Studio as Administrator), and activated it using the Serviced Component application in the Windows Control Panel.","pos":[11245,11418]},{"content":"We created a C# Windows Forms project, dragged a button to the form from the toolbox, and double-clicked that to a click event handler.","pos":[11419,11554]},{"content":"We added the following code to instantiate the Dog component.","pos":[11555,11616]},{"content":"This ran without problems, and with COM Spy up and running and configured to monitor the Dog component, lots of data appears showing the activity.","pos":[11780,11926]},{"content":"See Also","pos":[11935,11943]},{"content":"Porting and Upgrading: Examples and Case Studies","pos":[11948,11996]},{"content":"Next Example: Spy++","pos":[12066,12085]},{"content":"Previous Example: MFC Scribble","pos":[12135,12165]}],"content":"---\ntitle: \"Porting Guide: COM Spy | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: 24aa0d52-4014-4acb-8052-f4e2e4bbc3bb\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Porting Guide: COM Spy\nThis topic is the second in a series of articles that demonstrates the process of upgrading older Visual C++ projects to the latest version of Visual Studio. The example code in this topic was last compiled with Visual Studio 2005.  \n  \n## COMSpy  \n COMSpy is a program that monitors and logs the activity of serviced components on a machine. Serviced components are COM+ components that run on a system and can be used by computers on the same network. They're managed by the Component Services functionality in the Windows Control Panel.  \n  \n### Step 1. Converting the project file.  \n The project file converts easily and produces a migration report. There are a few entries in the report that let us know about issues we might need to deal with. Here's one issue that is reported (note that throughout this topic, error messages are sometimes shortened for readability, for example to remove the full paths):  \n  \n```Output  \nComSpyAudit\\ComSpyAudit.vcproj: MSB8012: $(TargetPath) ('C:\\Users\\UserName\\Desktop\\spy\\spy\\ComSpyAudit\\.\\XP32_DEBUG\\ComSpyAudit.dll') does not match the Librarian's OutputFile property value '.\\XP32_DEBUG\\ComSpyAudit.dll' ('C:\\Users\\UserName\\Desktop\\spy\\spy\\XP32_DEBUG\\ComSpyAudit.dll') in project configuration 'Unicode Debug|Win32'. This may cause your project to build incorrectly. To correct this, please make sure that $(TargetPath) property value matches the value specified in %(Lib.OutputFile).  \n```  \n  \n One of the frequent problems in upgrading projects is that the Linker OutputFile setting in the project properties dialog box might need to be reviewed. For projects prior to Visual Studio 2010, the OutputFile is one setting that the automatic conversion wizard has trouble with, if it's set to a non-standard value. In this case, the paths for the output files were set to a nonstandard folder, XP32_DEBUG. To find out more about this error, we consulted a [blog post](http://blogs.msdn.com/b/vcblog/archive/2010/03/02/visual-studio-2010-c-project-upgrade-guide.aspx) related to the Visual C++ 2010 project upgrade, which was the upgrade that involved the change from vcbuild to msbuild, a significant change. According to this information, the default value for the Output File setting when you create a new project is $(OutDir)$(TargetName)$(TargetExt), but this isn't set during conversion since it's not possible for converted projects to verify that everything is correct.  However, let's try putting that in for OutputFile and see if it works.  It does, so we can move on. If there is no particular reason for using a nonstandard output folder, we recommend using the standard location. In this case, we chose to leave the output location as the non-standard during the porting and upgrading process; $(OutDir) resolves to the XP32_DEBUG folder in the Debug configuration and the ReleaseU folder for the Release configuration.  \n  \n### Step 2. Getting it to build  \n Building the ported project, a number of errors and warnings occur.  \n  \n ComSpyCtl doesn't compile though due to this compiler error:  \n  \n```Output  \natlcom.h(611): error C2664: 'HRESULT CComSpy::IPersistStreamInit_Save(LPSTREAM,BOOL,ATL::ATL_PROPMAP_ENTRY *)': cannot convert argument 3 from 'const ATL::ATL_PROPMAP_ENTRY *' to 'ATL::ATL_PROPMAP_ENTRY *'atlcom.h(611): note: Conversion loses qualifiersatlcom.h(608): note: while compiling class template member function 'HRESULT ATL::IPersistStreamInitImpl<CComSpy>::Save(LPSTREAM,BOOL)'\\spy\\spy\\comspyctl\\ccomspy.h(28): note: see reference to class template instantiation 'ATL::IPersistStreamInitImpl<CComSpy>' being compiled  \n```  \n  \n The error references the Save method on the IPersistStreamInitImpl class in atlcom.h.  \n  \n```cpp  \nSTDMETHOD(Save)(_Inout_ LPSTREAM pStm, _In_ BOOL fClearDirty)  \n{  \n     T* pT = static_cast<T*>(this);  \n     ATLTRACE(atlTraceCOM, 2, _T(\"IPersistStreamInitImpl::Save\\n\"));  \n     return pT->IPersistStreamInit_Save(pStm, fClearDirty, T::GetPropertyMap());  \n}  \n```  \n  \n The problem is that a conversion that an older version of the compiler accepted is no longer valid. In order to conform with the C++ standard, some code that previously was allowed is no longer allowed. In this case, it's not safe to pass a non-const pointer to a function that expects a const pointer.  The solution is to find the declaration of IPersistStreamInit_Save on the CComSpy class and add the const modifier to the third parameter.  \n  \n```cpp  \nHRESULT CComSpy::IPersistStreamInit_Save(LPSTREAM pStm, BOOL /* fClearDirty */, const ATL_PROPMAP_ENTRY* pMap)  \n  \n```  \n  \n And a similar change to IPersistStreamInit_Load.  \n  \n```cpp  \nHRESULT IPersistStreamInit_Load(LPSTREAM pStm, const ATL_PROPMAP_ENTRY* pMap);  \n```  \n  \n The next error deals with registration.  \n  \n```Output  \nerror MSB3073: The command \"regsvr32 /s /c \"C:\\Users\\username\\Desktop\\spy\\spy\\ComSpyCtl\\.\\XP32_DEBUG\\ComSpyCtl.lib\"error MSB3073: echo regsvr32 exec. time > \".\\XP32_DEBUG\\regsvr32.trg\"error MSB3073:error MSB3073: :VCEnd\" exited with code 3.  \n```  \n  \n We don't need this post-build registration command anymore. Instead, we simply remove the custom build command, and specify in the Linker settings to register the output.  \n  \n### Dealing with warnings  \n The project produces the following linker warning.  \n  \n```Output  \nwarning LNK4075: ignoring '/EDITANDCONTINUE' due to '/SAFESEH' specification  \n```  \n  \n The /SAFESEH compiler option is not useful in debug mode, which is when /EDITANDCONTINUE is useful, so the fix here is to disable /SAFESEH for Debug configurations only. To do this in the property dialog, we open the property dialog for the project that produces this error, and we first set the Configuration to Debug (actually Debug Unicode), and then in the Linker Advanced section, reset the Image Has Safe Exception Handlers property to No (/SAFESEH:NO).  \n  \n The compiler warns us that PROP_ENTRY_EX is deprecated. It's not secure and the recommended substitute is PROP_ENTRY_TYPE_EX.  \n  \n```cpp  \nBEGIN_PROPERTY_MAP(CComSpy)  \n     PROP_ENTRY_EX( \"LogFile\", DISPID_LOGFILE, CLSID_ComSpyPropPage, IID_IComSpy)  \n     PROP_ENTRY_EX( \"ShowGridLines\", DISPID_GRIDLINES, CLSID_ComSpyPropPage, IID_IComSpy)  \n     PROP_ENTRY_EX( \"Audit\", DISPID_AUDIT, CLSID_ComSpyPropPage, IID_IComSpy)  \n     PROP_ENTRY_EX( \"ColWidth\", DISPID_COLWIDTH, CLSID_ComSpyPropPage, IID_IComSpy)  \n     PROP_PAGE(CLSID_StockFontPage)  \nEND_PROPERTY_MAP()  \n```  \n  \n We change the code in ccomspy.h accordingly, adding COM types as appropriate.  \n  \n```cpp  \nBEGIN_PROPERTY_MAP(CComSpy)  \n     PROP_ENTRY_TYPE_EX( \"LogFile\", DISPID_LOGFILE, CLSID_ComSpyPropPage, IID_IComSpy, VT_BSTR)  \n     PROP_ENTRY_TYPE_EX( \"ShowGridLines\", DISPID_GRIDLINES, CLSID_ComSpyPropPage, IID_IComSpy, VT_BOOL)  \n     PROP_ENTRY_TYPE_EX( \"Audit\", DISPID_AUDIT, CLSID_ComSpyPropPage, IID_IComSpy, VT_BOOL)  \n     PROP_ENTRY_TYPE_EX( \"ColWidth\", DISPID_COLWIDTH, CLSID_ComSpyPropPage, IID_IComSpy, VT_UINT)  \n     PROP_PAGE(CLSID_StockFontPage)  \nEND_PROPERTY_MAP()  \n```  \n  \n We're getting down to the last few warnings, which are also caused by more strict compiler conformance checks:  \n  \n```Output  \n\\spy\\comspyctl\\usersub.h(70): warning C4457: declaration of 'var' hides function parameter\\spy\\comspyctl\\usersub.h(48): note: see declaration of 'var'\\spy\\comspyctl\\usersub.h(94): warning C4018: '<': signed/unsigned mismatch  ComSpy.cpp\\spy\\comspyctl\\comspy.cpp(186): warning C4457: declaration of 'bHandled' hides function parameter\\spy\\spy\\comspyctl\\comspy.cpp(177): note: see declaration of 'bHandled'  \n```  \n  \n Warning C4018 comes from this code:  \n  \n```cpp  \nfor (i=0;i<lCount;i++)  \n    CoTaskMemFree(pKeys[i]);  \n```  \n  \n The problem is that i is declared as UINT and lCount is declared as long, hence the signed/unsigned mismatch. It would be inconvenient to change the type of lCount to UINT, since it gets its value from IMtsEventInfo::get_Count, which uses the type long, and is not in user code. So we add a cast to the code. A C-style cast would do for a numerical cast such as this, but static_cast is the recommended style.  \n  \n```cpp  \nfor (i=0;i<static_cast<UINT>(lCount);i++)  \n    CoTaskMemFree(pKeys[i]);  \n```  \n  \n Those warnings are cases where a variable was declared in a function that has a parameter with the same name, leading to potentially confusing code. We fixed that by changing the names of the local variables.  \n  \n### Step 3. Testing and debugging  \n We tested the app first by running through the various menus and commands, and then closing the application. The only issue noted was a debug assertion upon closing down the app. The problem appeared in the destructor for CWindowImpl, a base class of the CSpyCon object, the application's main COM component. The assertion failure occurred in the following code in atlwin.h.  \n  \n```cpp  \nvirtual ~CWindowImplRoot()  \n{  \n     #ifdef _DEBUG  \n     if(m_hWnd != NULL)// should be cleared in WindowProc  \n     {  \n          ATLTRACE(atlTraceWindowing, 0, _T(\"ERROR - Object deleted before window was destroyed\\n\"));  \n          ATLASSERT(FALSE);  \n     }  \n     #endif //_DEBUG  \n}  \n```  \n  \n The hWnd is normally set to zero in the WindowProc function, but that didn't happen because instead of the default WindowProc, a custom handler is called for the Windows message (WM_SYSCOMMAND) that closes the window. The custom handler was not setting the hWnd to zero. A look at similar code in MFC's CWnd class, shows that when a window is being destroyed, OnNcDestroy is called, and in MFC, documentation advises that when overriding CWnd::OnNcDestroy, the base NcDestroy should be called to make sure that the right clean-up operations occur, including separating the window handle from the window, or in other words, setting the hWnd to zero. This assert might have been triggered in the original version of the sample as well, since the same assertion code was present in the old version of atlwin.h.  \n  \n To test the functionality of the app, we created a Serviced Component using the ATL project template, chose to add COM+ support in the ATL project wizard. If you haven’t worked with serviced components before, it’s not difficult to create one and get one registered and available on the system or network for other apps to use. The COM Spy app is designed to monitor the activity of serviced components as a diagnostic aid.  \n  \n Then we added a class, chose ATL Object, and specified the object name as Dog. Then in dog.h and dog.cpp, we added the implementation.  \n  \n```cpp  \nSTDMETHODIMP CDog::Wag(LONG* lDuration)  \n{  \n    // TODO: Add your implementation code here  \n    *lDuration = 100l;  \n    return S_OK;  \n}  \n```  \n  \n Next, we built and registered it (you’ll need to run Visual Studio as Administrator), and activated it using the Serviced Component application in the Windows Control Panel. We created a C# Windows Forms project, dragged a button to the form from the toolbox, and double-clicked that to a click event handler. We added the following code to instantiate the Dog component.  \n  \n```cpp  \nprivate void button1_Click(object sender, EventArgs e)  \n{  \n    ATLProjectLib.Dog dog1 = new ATLProjectLib.Dog();  \n    dog1.Wag();  \n}  \n```  \n  \n This ran without problems, and with COM Spy up and running and configured to monitor the Dog component, lots of data appears showing the activity.  \n  \n## See Also  \n [Porting and Upgrading: Examples and Case Studies](../porting/porting-and-upgrading-examples-and-case-studies.md)   \n [Next Example: Spy++](../porting/porting-guide-spy-increment.md)   \n [Previous Example: MFC Scribble](../porting/porting-guide-mfc-scribble.md)"}