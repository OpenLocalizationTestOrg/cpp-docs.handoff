{"nodes":[{"pos":[12,52],"content":"max_variable_size Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"max_variable_size Class | Microsoft Docs","pos":[0,40]}]},{"content":"max_variable_size Class","pos":[729,752]},{"pos":[753,987],"content":"Describes a <bpt id=\"p1\">[</bpt>max class<ept id=\"p1\">](../standard-library/allocators-header.md)</ept> object that limits a <bpt id=\"p2\">[</bpt>freelist<ept id=\"p2\">](../standard-library/freelist-class.md)</ept> object to a maximum length that is roughly proportional to the number of allocated memory blocks.","source":"Describes a [max class](../standard-library/allocators-header.md) object that limits a [freelist](../standard-library/freelist-class.md) object to a maximum length that is roughly proportional to the number of allocated memory blocks."},{"content":"Syntax","pos":[996,1002]},{"content":"Constructors","pos":[1049,1061]},{"content":"max_variable_size","pos":[1083,1100]},{"pos":[1141,1190],"content":"Constructs an object of type <ph id=\"ph1\">`max_variable_size`</ph>.","source":"Constructs an object of type `max_variable_size`."},{"content":"Member Functions","pos":[1201,1217]},{"content":"allocated","pos":[1239,1248]},{"content":"Increments the count of allocated memory blocks.","pos":[1281,1329]},{"content":"deallocated","pos":[1335,1346]},{"content":"Decrements the count of allocated memory blocks.","pos":[1381,1429]},{"content":"full","pos":[1435,1439]},{"content":"Returns a value that specifies whether more memory blocks should be added to the free list.","pos":[1467,1558]},{"content":"released","pos":[1564,1572]},{"content":"Decrements the count of memory blocks on the free list.","pos":[1604,1659]},{"content":"saved","pos":[1665,1670]},{"content":"Increments the count of memory blocks on the free list.","pos":[1699,1754]},{"content":"Requirements","pos":[1764,1776]},{"pos":[1780,1805],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>allocators&gt;","source":"**Header:** \\<allocators>"},{"pos":[1812,1833],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> stdext","source":"**Namespace:** stdext"},{"pos":[1888,1916],"content":"max_variable_size::allocated"},{"content":"Increments the count of allocated memory blocks.","pos":[1920,1968]},{"content":"Parameters","pos":[2028,2038]},{"content":"Parameter","pos":[2045,2054]},{"content":"Description","pos":[2055,2066]},{"content":"The increment value.","pos":[2115,2135]},{"content":"Remarks","pos":[2146,2153]},{"content":"This member function adds <ph id=\"ph1\">`_Nx`</ph> to the stored value <ph id=\"ph2\">`_Nallocs`</ph>.","pos":[2157,2220],"source":"This member function adds `_Nx` to the stored value `_Nallocs`."},{"content":"This member function is called after each successful call by <ph id=\"ph1\">`cache_freelist::allocate`</ph> to operator <ph id=\"ph2\">`new`</ph>.","pos":[2221,2327],"source":" This member function is called after each successful call by `cache_freelist::allocate` to operator `new`."},{"content":"The argument <ph id=\"ph1\">`_Nx`</ph> is the number of memory blocks in the chunk allocated by operator <ph id=\"ph2\">`new`</ph>.","pos":[2328,2419],"source":" The argument `_Nx` is the number of memory blocks in the chunk allocated by operator `new`."},{"pos":[2476,2506],"content":"max_variable_size::deallocated"},{"content":"Decrements the count of allocated memory blocks.","pos":[2510,2558]},{"content":"Parameters","pos":[2620,2630]},{"content":"Parameter","pos":[2637,2646]},{"content":"Description","pos":[2647,2658]},{"content":"The increment value.","pos":[2707,2727]},{"content":"Remarks","pos":[2738,2745]},{"content":"The member function subtracts <ph id=\"ph1\">`_Nx`</ph> from the stored value <ph id=\"ph2\">`_Nallocs`</ph>.","pos":[2749,2818],"source":"The member function subtracts `_Nx` from the stored value `_Nallocs`."},{"content":"This member function is called after each call by <ph id=\"ph1\">`cache_freelist::deallocate`</ph> to operator <ph id=\"ph2\">`delete`</ph>.","pos":[2819,2919],"source":" This member function is called after each call by `cache_freelist::deallocate` to operator `delete`."},{"content":"The argument <ph id=\"ph1\">`_Nx`</ph> is the number of memory blocks in the chunk deallocated by operator <ph id=\"ph2\">`delete`</ph>.","pos":[2920,3016],"source":" The argument `_Nx` is the number of memory blocks in the chunk deallocated by operator `delete`."},{"pos":[3066,3089],"content":"max_variable_size::full"},{"content":"Returns a value that specifies whether more memory blocks should be added to the free list.","pos":[3093,3184]},{"content":"Return Value","pos":[3220,3232]},{"pos":[3243,3279],"content":"if <ph id=\"ph1\">`_Nallocs / 16 + 16 &lt;= _Nblocks`</ph>.","source":" if `_Nallocs / 16 + 16 <= _Nblocks`."},{"content":"Remarks","pos":[3289,3296]},{"content":"This member function is called by <ph id=\"ph1\">`cache_freelist::deallocate`</ph>.","pos":[3300,3363],"source":"This member function is called by `cache_freelist::deallocate`."},{"content":"If the call returns <ph id=\"ph1\">`true`</ph>, <ph id=\"ph2\">`deallocate`</ph> puts the memory block on the free list; if it returns false, <ph id=\"ph3\">`deallocate`</ph> calls operator <ph id=\"ph4\">`delete`</ph> to deallocate the block.","pos":[3364,3527],"source":" If the call returns `true`, `deallocate` puts the memory block on the free list; if it returns false, `deallocate` calls operator `delete` to deallocate the block."},{"pos":[3590,3626],"content":"max_variable_size::max_variable_size"},{"pos":[3630,3679],"content":"Constructs an object of type <ph id=\"ph1\">`max_variable_size`</ph>.","source":"Constructs an object of type `max_variable_size`."},{"content":"Remarks","pos":[3723,3730]},{"pos":[3734,3814],"content":"The constructor initializes the stored values <ph id=\"ph1\">`_Nblocks`</ph> and <ph id=\"ph2\">`_Nallocs`</ph> to zero.","source":"The constructor initializes the stored values `_Nblocks` and `_Nallocs` to zero."},{"pos":[3868,3895],"content":"max_variable_size::released"},{"content":"Decrements the count of memory blocks on the free list.","pos":[3899,3954]},{"content":"Remarks","pos":[3994,4001]},{"content":"This member function decrements the stored value <ph id=\"ph1\">`_Nblocks`</ph>.","pos":[4005,4065],"source":"This member function decrements the stored value `_Nblocks`."},{"content":"The <ph id=\"ph1\">`released`</ph> member function of the current max class is called by <ph id=\"ph2\">`cache_freelist::allocate`</ph> whenever it removes a memory block from the free list.","pos":[4066,4216],"source":" The `released` member function of the current max class is called by `cache_freelist::allocate` whenever it removes a memory block from the free list."},{"pos":[4267,4291],"content":"max_variable_size::saved"},{"content":"Increments the count of memory blocks on the free list.","pos":[4295,4350]},{"content":"Remarks","pos":[4387,4394]},{"content":"This member function increments the stored value <ph id=\"ph1\">`_Nblocks`</ph>.","pos":[4398,4458],"source":"This member function increments the stored value `_Nblocks`."},{"content":"This member function is called by <ph id=\"ph1\">`cache_freelist::deallocate`</ph> whenever it puts a memory block on the free list.","pos":[4459,4571],"source":" This member function is called by `cache_freelist::deallocate` whenever it puts a memory block on the free list."},{"content":"See Also","pos":[4580,4588]},{"content":"allocators&gt;","pos":[4595,4606],"source":"allocators>"}],"content":"---\ntitle: \"max_variable_size Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"stdext::max_variable_size\"\n  - \"allocators/stdext::max_variable_size\"\n  - \"stdext.max_variable_size\"\n  - \"max_variable_size\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"max_variable_size class\"\nms.assetid: 9f2e9df0-4148-4b37-bc30-f8eca0ef86ae\ncaps.latest.revision: 18\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# max_variable_size Class\nDescribes a [max class](../standard-library/allocators-header.md) object that limits a [freelist](../standard-library/freelist-class.md) object to a maximum length that is roughly proportional to the number of allocated memory blocks.  \n  \n## Syntax  \n  \n```\nclass max_variable_size\n```  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[max_variable_size](#max_variable_size__max_variable_size)|Constructs an object of type `max_variable_size`.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[allocated](#max_variable_size__allocated)|Increments the count of allocated memory blocks.|  \n|[deallocated](#max_variable_size__deallocated)|Decrements the count of allocated memory blocks.|  \n|[full](#max_variable_size__full)|Returns a value that specifies whether more memory blocks should be added to the free list.|  \n|[released](#max_variable_size__released)|Decrements the count of memory blocks on the free list.|  \n|[saved](#max_variable_size__saved)|Increments the count of memory blocks on the free list.|  \n  \n## Requirements  \n **Header:** \\<allocators>  \n  \n **Namespace:** stdext  \n  \n##  <a name=\"max_variable_size__allocated\"></a>  max_variable_size::allocated  \n Increments the count of allocated memory blocks.  \n  \n```\nvoid allocated(std::size_t _Nx = 1);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`_Nx`|The increment value.|  \n  \n### Remarks  \n This member function adds `_Nx` to the stored value `_Nallocs`. This member function is called after each successful call by `cache_freelist::allocate` to operator `new`. The argument `_Nx` is the number of memory blocks in the chunk allocated by operator `new`.  \n  \n##  <a name=\"max_variable_size__deallocated\"></a>  max_variable_size::deallocated  \n Decrements the count of allocated memory blocks.  \n  \n```\nvoid deallocated(std::size_t _Nx = 1);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`_Nx`|The increment value.|  \n  \n### Remarks  \n The member function subtracts `_Nx` from the stored value `_Nallocs`. This member function is called after each call by `cache_freelist::deallocate` to operator `delete`. The argument `_Nx` is the number of memory blocks in the chunk deallocated by operator `delete`.  \n  \n##  <a name=\"max_variable_size__full\"></a>  max_variable_size::full  \n Returns a value that specifies whether more memory blocks should be added to the free list.  \n  \n```\nbool full();\n```  \n  \n### Return Value  \n `true` if `_Nallocs / 16 + 16 <= _Nblocks`.  \n  \n### Remarks  \n This member function is called by `cache_freelist::deallocate`. If the call returns `true`, `deallocate` puts the memory block on the free list; if it returns false, `deallocate` calls operator `delete` to deallocate the block.  \n  \n##  <a name=\"max_variable_size__max_variable_size\"></a>  max_variable_size::max_variable_size  \n Constructs an object of type `max_variable_size`.  \n  \n```\nmax_variable_size();\n```  \n  \n### Remarks  \n The constructor initializes the stored values `_Nblocks` and `_Nallocs` to zero.  \n  \n##  <a name=\"max_variable_size__released\"></a>  max_variable_size::released  \n Decrements the count of memory blocks on the free list.  \n  \n```\nvoid released();\n```  \n  \n### Remarks  \n This member function decrements the stored value `_Nblocks`. The `released` member function of the current max class is called by `cache_freelist::allocate` whenever it removes a memory block from the free list.  \n  \n##  <a name=\"max_variable_size__saved\"></a>  max_variable_size::saved  \n Increments the count of memory blocks on the free list.  \n  \n```\nvoid saved();\n```  \n  \n### Remarks  \n This member function increments the stored value `_Nblocks`. This member function is called by `cache_freelist::deallocate` whenever it puts a memory block on the free list.  \n  \n## See Also  \n [\\<allocators>](../standard-library/allocators-header.md)\n\n\n\n"}