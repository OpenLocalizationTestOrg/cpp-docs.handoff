{"nodes":[{"pos":[12,49],"content":"&lt;atomic&gt; enums | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>atomic<ph id=\"ph2\">&amp;gt;</ph> enums | Microsoft Docs","pos":[0,37],"source":"&lt;atomic&gt; enums | Microsoft Docs"}]},{"pos":[252,272],"content":"&lt;atomic&gt; enums","linkify":"&lt;atomic&gt; enums","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>atomic<ph id=\"ph2\">&amp;gt;</ph> enums","pos":[0,20],"source":"&lt;atomic&gt; enums"}]},{"pos":[280,331],"content":"<bpt id=\"p1\">&lt;a name=\"memory_order_enum\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  memory_order Enum","linkify":"<a name=\"memory_order_enum\"></a>  memory_order Enum","source":"<a name=\"memory_order_enum\"></a>  memory_order Enum"},{"content":"Supplies symbolic names for synchronization operations on memory locations.","pos":[335,410]},{"content":"These operations affect how assignments in one thread become visible in another.","pos":[411,491]},{"pos":[714,721],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"No ordering required.","pos":[765,786]},{"content":"A load operation acts as a consume operation on the memory location.","pos":[814,882]},{"content":"A load operation acts as an acquire operation on the memory location.","pos":[910,979]},{"content":"A store operation acts as a release operation on the memory location.","pos":[1007,1076]},{"pos":[1104,1163],"content":"Combines <ph id=\"ph1\">`memory_order_acquire`</ph> and <ph id=\"ph2\">`memory_order_release`</ph>.","source":"Combines `memory_order_acquire` and `memory_order_release`."},{"content":"Combines <ph id=\"ph1\">`memory_order_acquire`</ph> and <ph id=\"ph2\">`memory_order_release`</ph>.","pos":[1191,1250],"source":"Combines `memory_order_acquire` and `memory_order_release`."},{"content":"Memory accesses that are marked as <ph id=\"ph1\">`memory_order_seq_cst`</ph> must be sequentially consistent.","pos":[1251,1341],"source":" Memory accesses that are marked as `memory_order_seq_cst` must be sequentially consistent."},{"pos":[1351,1359],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[1363,1405],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>atomic&gt;<ept id=\"p1\">](../standard-library/atomic.md)</ept>","source":"[\\<atomic>](../standard-library/atomic.md)"}],"content":"---\ntitle: \"&lt;atomic&gt; enums | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: cd3a81c5-a19e-448f-952a-c34c717f21a9\ncaps.latest.revision: 11\nmanager: \"ghogen\"\n---\n# &lt;atomic&gt; enums\n  \n##  <a name=\"memory_order_enum\"></a>  memory_order Enum  \n Supplies symbolic names for synchronization operations on memory locations. These operations affect how assignments in one thread become visible in another.  \n  \n```\ntypedef enum memory_order {\n    memory_order_relaxed,\n    memory_order_consume,\n    memory_order_acquire,\n    memory_order_release,\n    memory_order_acq_rel,\n    memory_order_seq_cst,\n} memory_order;\n```  \n  \n### Remarks  \n  \n|||  \n|-|-|  \n|`memory_order_relaxed`|No ordering required.|  \n|`memory_order_consume`|A load operation acts as a consume operation on the memory location.|  \n|`memory_order_acquire`|A load operation acts as an acquire operation on the memory location.|  \n|`memory_order_release`|A store operation acts as a release operation on the memory location.|  \n|`memory_order_acq_rel`|Combines `memory_order_acquire` and `memory_order_release`.|  \n|`memory_order_seq_cst`|Combines `memory_order_acquire` and `memory_order_release`. Memory accesses that are marked as `memory_order_seq_cst` must be sequentially consistent.|  \n  \n## See Also  \n [\\<atomic>](../standard-library/atomic.md)\n\n\n\n"}