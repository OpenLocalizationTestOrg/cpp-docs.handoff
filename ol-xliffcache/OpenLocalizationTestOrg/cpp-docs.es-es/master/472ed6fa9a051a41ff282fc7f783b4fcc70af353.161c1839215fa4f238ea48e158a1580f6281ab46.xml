{"nodes":[{"pos":[12,58],"content":"3.1.9 omp_set_nested Function | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"3.1.9 omp_set_nested Function | Microsoft Docs","pos":[0,46]}]},{"content":"3.1.9 omp_set_nested Function","pos":[538,567]},{"content":"The <bpt id=\"p1\">**</bpt>omp_set_nested<ept id=\"p1\">**</ept> function enables or disables nested parallelism.","pos":[568,639],"source":"The **omp_set_nested** function enables or disables nested parallelism."},{"content":"The format is as follows:","pos":[640,665]},{"content":"If <bpt id=\"p1\">*</bpt>nested<ept id=\"p1\">*</ept> evaluates to 0, nested parallelism is disabled, which is the default, and nested parallel regions are serialized and executed by the current thread.","pos":[741,901],"source":"If *nested* evaluates to 0, nested parallelism is disabled, which is the default, and nested parallel regions are serialized and executed by the current thread."},{"content":"If <bpt id=\"p1\">*</bpt>nested<ept id=\"p1\">*</ept> evaluates to a nonzero value, nested parallelism is enabled, and parallel regions that are nested may deploy additional threads to form nested teams.","pos":[902,1063],"source":" If *nested* evaluates to a nonzero value, nested parallelism is enabled, and parallel regions that are nested may deploy additional threads to form nested teams."},{"content":"This function has the effects described above when called from a portion of the program where the <bpt id=\"p1\">**</bpt>omp_in_parallel<ept id=\"p1\">**</ept> function returns zero.","pos":[1070,1210],"source":"This function has the effects described above when called from a portion of the program where the **omp_in_parallel** function returns zero."},{"content":"If it is called from a portion of the program where the <bpt id=\"p1\">**</bpt>omp_in_parallel<ept id=\"p1\">**</ept> function returns a nonzero value, the behavior of this function is undefined.","pos":[1211,1364],"source":" If it is called from a portion of the program where the **omp_in_parallel** function returns a nonzero value, the behavior of this function is undefined."},{"pos":[1371,1441],"content":"This call has precedence over the <bpt id=\"p1\">**</bpt>OMP_NESTED<ept id=\"p1\">**</ept> environment variable.","source":"This call has precedence over the **OMP_NESTED** environment variable."},{"content":"When nested parallelism is enabled, the number of threads used to execute nested parallel regions is implementation-defined.","pos":[1448,1572]},{"content":"As a result, OpenMP-compliant implementations are allowed to serialize nested parallel regions even when nested parallelism is enabled.","pos":[1573,1708]},{"content":"Cross References:","pos":[1717,1734]},{"pos":[1744,1851],"content":"<bpt id=\"p1\">**</bpt>OMP_NESTED<ept id=\"p1\">**</ept> environment variable, see <bpt id=\"p2\">[</bpt>Section 4.4<ept id=\"p2\">](../../parallel/openmp/4-4-omp-nested.md)</ept> on page 49.","source":"**OMP_NESTED** environment variable, see [Section 4.4](../../parallel/openmp/4-4-omp-nested.md) on page 49."},{"pos":[1861,1979],"content":"<bpt id=\"p1\">**</bpt>omp_in_parallel<ept id=\"p1\">**</ept> function, see <bpt id=\"p2\">[</bpt>Section 3.1.6<ept id=\"p2\">](../../parallel/openmp/3-1-6-omp-in-parallel-function.md)</ept> on page 38.","source":"**omp_in_parallel** function, see [Section 3.1.6](../../parallel/openmp/3-1-6-omp-in-parallel-function.md) on page 38."}],"content":"---\ntitle: \"3.1.9 omp_set_nested Function | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: e4afc3aa-bb96-4314-9849-fd5df5f437d9\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# 3.1.9 omp_set_nested Function\nThe **omp_set_nested** function enables or disables nested parallelism. The format is as follows:  \n  \n```  \n#include <omp.h>  \nvoid omp_set_nested(int nested);  \n```  \n  \n If *nested* evaluates to 0, nested parallelism is disabled, which is the default, and nested parallel regions are serialized and executed by the current thread. If *nested* evaluates to a nonzero value, nested parallelism is enabled, and parallel regions that are nested may deploy additional threads to form nested teams.  \n  \n This function has the effects described above when called from a portion of the program where the **omp_in_parallel** function returns zero. If it is called from a portion of the program where the **omp_in_parallel** function returns a nonzero value, the behavior of this function is undefined.  \n  \n This call has precedence over the **OMP_NESTED** environment variable.  \n  \n When nested parallelism is enabled, the number of threads used to execute nested parallel regions is implementation-defined. As a result, OpenMP-compliant implementations are allowed to serialize nested parallel regions even when nested parallelism is enabled.  \n  \n## Cross References:  \n  \n-   **OMP_NESTED** environment variable, see [Section 4.4](../../parallel/openmp/4-4-omp-nested.md) on page 49.  \n  \n-   **omp_in_parallel** function, see [Section 3.1.6](../../parallel/openmp/3-1-6-omp-in-parallel-function.md) on page 38."}