{"nodes":[{"pos":[12,56],"content":"hash_map::operator(STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"hash_map::operator(STL-CLR) | Microsoft Docs","pos":[0,44]}]},{"content":"hash_map::operator(STL/CLR)","pos":[644,671]},{"content":"Maps a key to its associated mapped value.","pos":[672,714]},{"content":"Syntax","pos":[723,729]},{"content":"Parameters","pos":[795,805]},{"content":"key","pos":[809,812]},{"content":"Key value to search for.","pos":[816,840]},{"content":"Remarks","pos":[849,856]},{"content":"The member functions endeavors to find an element with equivalent ordering to <ph id=\"ph1\">`key`</ph>.","pos":[860,944],"source":"The member functions endeavors to find an element with equivalent ordering to `key`."},{"content":"If it finds one, it returns the associated mapped value; otherwise, it inserts <ph id=\"ph1\">`value_type(``key``, mapped_type())`</ph> and returns the associated (default) mapped value.","pos":[945,1111],"source":" If it finds one, it returns the associated mapped value; otherwise, it inserts `value_type(``key``, mapped_type())` and returns the associated (default) mapped value."},{"content":"You use it to look up a mapped value given its associated key, or to ensure that an entry exists for the key if none is found.","pos":[1112,1238]},{"content":"Example","pos":[1247,1254]},{"content":"Requirements","pos":[2605,2617]},{"pos":[2621,2651],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/hash_map&gt;","source":"**Header:** \\<cliext/hash_map>"},{"pos":[2658,2679],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2688,2696]},{"content":"hash_map (STL/CLR)","pos":[2701,2719]},{"content":"hash_map::find (STL/CLR)","pos":[2757,2781]},{"content":"hash_map::insert (STL/CLR)","pos":[2824,2850]}],"content":"---\ntitle: \"hash_map::operator(STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::hash_map::operator[]\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"operator[] member [STL/CLR]\"\nms.assetid: b0b8c1bd-4250-447d-9c69-3f8c34e9b6af\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# hash_map::operator(STL/CLR)\nMaps a key to its associated mapped value.  \n  \n## Syntax  \n  \n```  \nmapped_type operator[](key_type key);  \n```  \n  \n#### Parameters  \n key  \n Key value to search for.  \n  \n## Remarks  \n The member functions endeavors to find an element with equivalent ordering to `key`. If it finds one, it returns the associated mapped value; otherwise, it inserts `value_type(``key``, mapped_type())` and returns the associated (default) mapped value. You use it to look up a mapped value given its associated key, or to ensure that an entry exists for the key if none is found.  \n  \n## Example  \n  \n```  \n// cliext_hash_map_operator_sub.cpp   \n// compile with: /clr   \n#include <cliext/hash_map>   \n  \ntypedef cliext::hash_map<wchar_t, int> Myhash_map;   \nint main()   \n    {   \n    Myhash_map c1;   \n    c1.insert(Myhash_map::make_value(L'a', 1));   \n    c1.insert(Myhash_map::make_value(L'b', 2));   \n    c1.insert(Myhash_map::make_value(L'c', 3));   \n  \n// display contents \" [a 1] [b 2] [c 3]\"   \n    for each (Myhash_map::value_type elem in c1)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n    System::Console::WriteLine(\"c1[{0}] = {1}\",   \n        L'A', c1[L'A']);   \n    System::Console::WriteLine(\"c1[{0}] = {1}\",   \n        L'b', c1[L'b']);   \n  \n// redisplay altered contents   \n    for each (Myhash_map::value_type elem in c1)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n// alter mapped values and redisplay   \n    c1[L'A'] = 10;   \n    c1[L'c'] = 13;   \n    for each (Myhash_map::value_type elem in c1)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n [a 1] [b 2] [c 3]  \nc1[A] = 0  \nc1[b] = 2  \n [a 1] [A 0] [b 2] [c 3]  \n [a 1] [A 10] [b 2] [c 13]  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/hash_map>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [hash_map (STL/CLR)](../dotnet/hash-map-stl-clr.md)   \n [hash_map::find (STL/CLR)](../dotnet/hash-map-find-stl-clr.md)   \n [hash_map::insert (STL/CLR)](../dotnet/hash-map-insert-stl-clr.md)"}