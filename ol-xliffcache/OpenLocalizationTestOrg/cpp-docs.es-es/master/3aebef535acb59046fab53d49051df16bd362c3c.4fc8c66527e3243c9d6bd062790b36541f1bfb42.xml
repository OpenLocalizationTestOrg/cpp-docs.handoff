{"nodes":[{"pos":[12,53],"content":"&lt;random&gt; functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>random<ph id=\"ph2\">&amp;gt;</ph> functions | Microsoft Docs","pos":[0,41],"source":"&lt;random&gt; functions | Microsoft Docs"}]},{"pos":[256,280],"content":"&lt;random&gt; functions","linkify":"&lt;random&gt; functions","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>random<ph id=\"ph2\">&amp;gt;</ph> functions","pos":[0,24],"source":"&lt;random&gt; functions"}]},{"pos":[288,341],"content":"<bpt id=\"p1\">&lt;a name=\"generate_canonical\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  generate_canonical","linkify":"<a name=\"generate_canonical\"></a>  generate_canonical","source":"<a name=\"generate_canonical\"></a>  generate_canonical"},{"content":"Returns a floating-point value from a random sequence.","pos":[345,399]},{"pos":[407,707],"content":"[!NOTE]\n The ISO C++ Standard states that this function should return values in the range [ `0`, `1`). Visual Studio is not yet compliant with this constraint. As a workaround to generate values in this range, use [uniform_real_distribution](../standard-library/uniform-real-distribution-class.md).","leadings":["","> "],"nodes":[{"content":" The ISO C++ Standard states that this function should return values in the range [ `0`, `1`). Visual Studio is not yet compliant with this constraint. As a workaround to generate values in this range, use [uniform_real_distribution](../standard-library/uniform-real-distribution-class.md).","pos":[8,298],"nodes":[{"content":"The ISO C++ Standard states that this function should return values in the range [ <ph id=\"ph1\">`0`</ph>, <ph id=\"ph2\">`1`</ph>).","pos":[1,94],"source":" The ISO C++ Standard states that this function should return values in the range [ `0`, `1`)."},{"content":"Visual Studio is not yet compliant with this constraint.","pos":[95,151]},{"content":"As a workaround to generate values in this range, use <bpt id=\"p1\">[</bpt>uniform_real_distribution<ept id=\"p1\">](../standard-library/uniform-real-distribution-class.md)</ept>.","pos":[152,290],"source":" As a workaround to generate values in this range, use [uniform_real_distribution](../standard-library/uniform-real-distribution-class.md)."}]}]},{"pos":[835,845],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The floating point integral type.","pos":[863,896]},{"content":"For possible types, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","pos":[897,964],"source":" For possible types, see [\\<random>](../standard-library/random.md)."},{"content":"The random number generator.","pos":[981,1009]},{"content":"The random number generator.","pos":[1025,1053]},{"pos":[1063,1070],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template function calls <ph id=\"ph1\">`operator()`</ph> of <ph id=\"ph2\">`Gen`</ph> repeatedly and packs the returned values into a floating-point value <ph id=\"ph3\">`x`</ph> of type <ph id=\"ph4\">`RealType`</ph> until it has gathered the specified number of mantissa bits in <ph id=\"ph5\">`x`</ph>.","pos":[1074,1283],"source":"The template function calls `operator()` of `Gen` repeatedly and packs the returned values into a floating-point value `x` of type `RealType` until it has gathered the specified number of mantissa bits in `x`."},{"content":"The specified number is the smaller of <ph id=\"ph1\">`Bits`</ph> (which must be nonzero) and the full number of mantissa bits in <ph id=\"ph2\">`RealType`</ph>.","pos":[1284,1405],"source":" The specified number is the smaller of `Bits` (which must be nonzero) and the full number of mantissa bits in `RealType`."},{"content":"The first call supplies the lowest-order bits.","pos":[1406,1452]},{"content":"The function returns <ph id=\"ph1\">`x`</ph>.","pos":[1453,1478],"source":" The function returns `x`."},{"pos":[1487,1495],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[1499,1541],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>","source":"[\\<random>](../standard-library/random.md)"}],"content":"---\ntitle: \"&lt;random&gt; functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 2ac9ec59-619b-4b85-a425-f729277c1bc8\ncaps.latest.revision: 10\nmanager: \"ghogen\"\n---\n# &lt;random&gt; functions\n  \n##  <a name=\"generate_canonical\"></a>  generate_canonical  \n Returns a floating-point value from a random sequence.  \n  \n> [!NOTE]\n>  The ISO C++ Standard states that this function should return values in the range [ `0`, `1`). Visual Studio is not yet compliant with this constraint. As a workaround to generate values in this range, use [uniform_real_distribution](../standard-library/uniform-real-distribution-class.md).  \n  \n```  \ntemplate <class RealType, size_t Bits, class Generator>  \nRealType generate_canonical(Generator& Gen);\n```  \n  \n### Parameters  \n `RealType`  \n The floating point integral type. For possible types, see [\\<random>](../standard-library/random.md).  \n  \n `Bits`  \n The random number generator.  \n  \n `Gen`  \n The random number generator.  \n  \n### Remarks  \n The template function calls `operator()` of `Gen` repeatedly and packs the returned values into a floating-point value `x` of type `RealType` until it has gathered the specified number of mantissa bits in `x`. The specified number is the smaller of `Bits` (which must be nonzero) and the full number of mantissa bits in `RealType`. The first call supplies the lowest-order bits. The function returns `x`.  \n  \n## See Also  \n [\\<random>](../standard-library/random.md)\n\n"}