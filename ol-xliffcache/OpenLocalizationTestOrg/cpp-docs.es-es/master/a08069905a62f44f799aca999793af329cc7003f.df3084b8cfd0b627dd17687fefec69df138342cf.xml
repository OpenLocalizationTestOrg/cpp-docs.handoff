{"nodes":[{"pos":[12,63],"content":"sealed  (C++ Component Extensions) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"sealed  (C++ Component Extensions) | Microsoft Docs","pos":[0,51]}]},{"content":"sealed  (C++ Component Extensions)","pos":[648,682]},{"pos":[692,843],"content":"is a context-sensitive keyword for ref classes that indicates that a virtual member cannot be overridden, or that a type cannot be used as a base type."},{"pos":[851,1044],"content":"[!NOTE]\n The ISO C++11 Standard language has the [final](../cpp/final-specifier.md) keyword, which is supported in Visual Studio. Use `final` on standard classes, and `sealed` on ref classes.","leadings":["","> "],"nodes":[{"content":" The ISO C++11 Standard language has the [final](../cpp/final-specifier.md) keyword, which is supported in Visual Studio. Use `final` on standard classes, and `sealed` on ref classes.","pos":[8,191],"nodes":[{"content":"The ISO C++11 Standard language has the <bpt id=\"p1\">[</bpt>final<ept id=\"p1\">](../cpp/final-specifier.md)</ept> keyword, which is supported in Visual Studio.","pos":[1,121],"source":" The ISO C++11 Standard language has the [final](../cpp/final-specifier.md) keyword, which is supported in Visual Studio."},{"content":"Use <ph id=\"ph1\">`final`</ph> on standard classes, and <ph id=\"ph2\">`sealed`</ph> on ref classes.","pos":[122,183],"source":" Use `final` on standard classes, and `sealed` on ref classes."}]}]},{"content":"All Runtimes","pos":[1053,1065]},{"content":"Syntax","pos":[1071,1077]},{"content":"Parameters","pos":[1215,1225]},{"content":"identifier","pos":[1235,1245]},{"content":"The name of the function or class.","pos":[1250,1284]},{"content":"return-type","pos":[1292,1303]},{"content":"The type that's returned by a function.","pos":[1308,1347]},{"content":"Remarks","pos":[1356,1363]},{"content":"In the first syntax example, a class is sealed.","pos":[1372,1419]},{"content":"In the second example, a virtual function is sealed.","pos":[1420,1472]},{"content":"The <ph id=\"ph1\">`sealed`</ph> keyword is valid for native targets, and also for the <ph id=\"ph2\">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph> and the common language runtime (CLR).","pos":[1479,1637],"source":"The `sealed` keyword is valid for native targets, and also for the [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)] and the common language runtime (CLR)."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Override Specifiers and Native Compilations<ept id=\"p1\">](../dotnet/how-to-declare-override-specifiers-in-native-compilations-cpp-cli.md)</ept>.","pos":[1638,1790],"source":" For more information, see [Override Specifiers and Native Compilations](../dotnet/how-to-declare-override-specifiers-in-native-compilations-cpp-cli.md)."},{"content":"You can detect at compile time whether a type is sealed by using the <ph id=\"ph1\">`__is_sealed (``type``)`</ph> type trait.","pos":[1797,1902],"source":"You can detect at compile time whether a type is sealed by using the `__is_sealed (``type``)` type trait."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Compiler Support for Type Traits<ept id=\"p1\">](../windows/compiler-support-for-type-traits-cpp-component-extensions.md)</ept>.","pos":[1903,2037],"source":" For more information, see [Compiler Support for Type Traits](../windows/compiler-support-for-type-traits-cpp-component-extensions.md)."},{"content":"is a context-sensitive keyword.","pos":[2053,2084]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Context-Sensitive Keywords<ept id=\"p1\">](../windows/context-sensitive-keywords-cpp-component-extensions.md)</ept>.","pos":[2086,2208],"source":"  For more information, see [Context-Sensitive Keywords](../windows/context-sensitive-keywords-cpp-component-extensions.md)."},{"pos":[2273,2365],"content":"See <bpt id=\"p1\">[</bpt>Ref classes and structs<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/hh699870.aspx)</ept>.","source":"See [Ref classes and structs](http://msdn.microsoft.com/library/windows/apps/hh699870.aspx)."},{"content":"Requirements","pos":[2375,2387]},{"pos":[2391,2415],"content":"Compiler option: <bpt id=\"p1\">**</bpt>/ZW<ept id=\"p1\">**</ept>","source":"Compiler option: **/ZW**"},{"content":"Common Language Runtime","pos":[2424,2447]},{"content":"(There are no remarks for this language feature that apply to only the common language runtime.)","pos":[2451,2547]},{"content":"Requirements","pos":[2557,2569]},{"pos":[2573,2598],"content":"Compiler option: <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept>","source":"Compiler option: **/clr**"},{"content":"Examples","pos":[2608,2616]},{"pos":[2620,2697],"content":"This following code example shows the effect of <ph id=\"ph1\">`sealed`</ph> on a virtual member.","source":"This following code example shows the effect of `sealed` on a virtual member."},{"content":"Output","pos":[3547,3553]},{"content":"The next code example shows how to mark a class as sealed.","pos":[3658,3716]},{"content":"See Also","pos":[4038,4046]},{"content":"Component Extensions for Runtime Platforms","pos":[4051,4093]}],"content":"---\ntitle: \"sealed  (C++ Component Extensions) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"sealed_cpp\"\n  - \"sealed\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"sealed keyword [C++]\"\nms.assetid: 3d0d688a-41aa-45f5-a25a-65c44206521e\ncaps.latest.revision: 26\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# sealed  (C++ Component Extensions)\n`sealed` is a context-sensitive keyword for ref classes that indicates that a virtual member cannot be overridden, or that a type cannot be used as a base type.  \n  \n> [!NOTE]\n>  The ISO C++11 Standard language has the [final](../cpp/final-specifier.md) keyword, which is supported in Visual Studio. Use `final` on standard classes, and `sealed` on ref classes.  \n  \n## All Runtimes  \n **Syntax**  \n  \n```  \n  \n      ref class  \n      identifier  \n      sealed {...};  \nvirtualreturn-typeidentifier() sealed {...};  \n  \n```  \n  \n **Parameters**  \n  \n *identifier*  \n The name of the function or class.  \n  \n *return-type*  \n The type that's returned by a function.  \n  \n **Remarks**  \n  \n In the first syntax example, a class is sealed. In the second example, a virtual function is sealed.  \n  \n The `sealed` keyword is valid for native targets, and also for the [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)] and the common language runtime (CLR). For more information, see [Override Specifiers and Native Compilations](../dotnet/how-to-declare-override-specifiers-in-native-compilations-cpp-cli.md).  \n  \n You can detect at compile time whether a type is sealed by using the `__is_sealed (``type``)` type trait. For more information, see [Compiler Support for Type Traits](../windows/compiler-support-for-type-traits-cpp-component-extensions.md).  \n  \n `sealed` is a context-sensitive keyword.  For more information, see [Context-Sensitive Keywords](../windows/context-sensitive-keywords-cpp-component-extensions.md).  \n  \n## [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]  \n See [Ref classes and structs](http://msdn.microsoft.com/library/windows/apps/hh699870.aspx).  \n  \n### Requirements  \n Compiler option: **/ZW**  \n  \n## Common Language Runtime  \n (There are no remarks for this language feature that apply to only the common language runtime.)  \n  \n### Requirements  \n Compiler option: **/clr**  \n  \n### Examples  \n This following code example shows the effect of `sealed` on a virtual member.  \n  \n```cpp  \n  \n      // sealed_keyword.cpp  \n// compile with: /clr  \ninterface struct I1 {  \n   virtual void f();  \n   virtual void g();  \n};  \n  \nref class X : I1 {  \npublic:  \n   virtual void f() {  \n      System::Console::WriteLine(\"X::f override of I1::f\");  \n   }  \n  \n   virtual void g() sealed {  \n      System::Console::WriteLine(\"X::f override of I1::g\");  \n   }  \n};  \n  \nref class Y : public X {  \npublic:  \n   virtual void f() override {  \n      System::Console::WriteLine(\"Y::f override of I1::f\");  \n   }  \n  \n   /*  \n   // the following override generates a compiler error  \n   virtual void g() override {  \n      System::Console::WriteLine(\"Y::g override of I1::g\");  \n   }    \n   */  \n};  \n  \nint main() {  \n   I1 ^ MyI = gcnew X;  \n   MyI -> f();  \n   MyI -> g();  \n  \n   I1 ^ MyI2 = gcnew Y;  \n   MyI2 -> f();  \n}  \n```  \n  \n **Output**  \n  \n```Output  \nX::f override of I1::f  \nX::f override of I1::g  \nY::f override of I1::f  \n```  \n  \n The next code example shows how to mark a class as sealed.  \n  \n```cpp  \n// sealed_keyword_2.cpp  \n// compile with: /clr  \ninterface struct I1 {  \n   virtual void f();  \n};  \n  \nref class X sealed : I1 {  \npublic:  \n   virtual void f() override {}  \n};  \n  \nref class Y : public X {   // C3246 base class X is sealed  \npublic:  \n   virtual void f() override {}  \n};  \n```  \n  \n## See Also  \n [Component Extensions for Runtime Platforms](../windows/component-extensions-for-runtime-platforms.md)"}