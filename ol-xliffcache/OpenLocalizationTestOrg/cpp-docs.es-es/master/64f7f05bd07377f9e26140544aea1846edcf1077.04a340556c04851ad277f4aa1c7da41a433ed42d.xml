{"nodes":[{"pos":[12,48],"content":"_spawnve, _wspawnve | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_spawnve, _wspawnve | Microsoft Docs","pos":[0,36]}]},{"pos":[1135,1154],"content":"_spawnve, _wspawnve","linkify":"_spawnve, _wspawnve","nodes":[{"content":"_spawnve, _wspawnve","pos":[0,19]}]},{"content":"Creates and executes a new process.","pos":[1155,1190]},{"pos":[1198,1418],"content":"[!IMPORTANT]\n This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[13,218],"nodes":[{"content":"This API cannot be used in applications that execute in the Windows Runtime.","pos":[1,77]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[78,205],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"pos":[1427,1433],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1723,1733],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Execution mode for a calling process.","pos":[1747,1784]},{"content":"Path of the file to be executed.","pos":[1804,1836]},{"content":"Array of pointers to arguments.","pos":[1853,1884]},{"content":"The argument <ph id=\"ph1\">`argv`</ph>[0] is usually a pointer to a path in real mode or to the program name in protected mode, and <ph id=\"ph2\">`argv`</ph>[1] through <ph id=\"ph3\">`argv`</ph>[<ph id=\"ph4\">`n`</ph>] are pointers to the character strings forming the new argument list.","pos":[1885,2096],"source":" The argument `argv`[0] is usually a pointer to a path in real mode or to the program name in protected mode, and `argv`[1] through `argv`[`n`] are pointers to the character strings forming the new argument list."},{"content":"The argument <ph id=\"ph1\">`argv`</ph>[<ph id=\"ph2\">`n`</ph> +1] must be a <ph id=\"ph3\">`NULL`</ph> pointer to mark the end of the argument list.","pos":[2097,2187],"source":" The argument `argv`[`n` +1] must be a `NULL` pointer to mark the end of the argument list."},{"content":"Array of pointers to environment settings.","pos":[2204,2246]},{"pos":[2255,2267],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The return value from a synchronous <ph id=\"ph1\">`_spawnve`</ph> or <ph id=\"ph2\">`_wspawnve`</ph> (<ph id=\"ph3\">`_P_WAIT`</ph> specified for <ph id=\"ph4\">`mode`</ph>) is the exit status of the new process.","pos":[2271,2404],"source":"The return value from a synchronous `_spawnve` or `_wspawnve` (`_P_WAIT` specified for `mode`) is the exit status of the new process."},{"content":"The return value from an asynchronous <ph id=\"ph1\">`_spawnve`</ph> or <ph id=\"ph2\">`_wspawnve`</ph> (<ph id=\"ph3\">`_P_NOWAIT`</ph> or <ph id=\"ph4\">`_P_NOWAITO`</ph> specified for <ph id=\"ph5\">`mode`</ph>) is the process handle.","pos":[2405,2542],"source":" The return value from an asynchronous `_spawnve` or `_wspawnve` (`_P_NOWAIT` or `_P_NOWAITO` specified for `mode`) is the process handle."},{"content":"The exit status is 0 if the process terminated normally.","pos":[2543,2599]},{"content":"You can set the exit status to a nonzero value if the spawned process specifically calls the <ph id=\"ph1\">`exit`</ph> routine with a nonzero argument.","pos":[2600,2732],"source":" You can set the exit status to a nonzero value if the spawned process specifically calls the `exit` routine with a nonzero argument."},{"content":"If the new process did not explicitly set a positive exit status, a positive exit status indicates an abnormal exit with an abort or an interrupt.","pos":[2733,2879]},{"content":"A return value of â€“1 indicates an error (the new process is not started).","pos":[2880,2953]},{"content":"In this case, <ph id=\"ph1\">`errno`</ph> is set to one of the following values.","pos":[2954,3014],"source":" In this case, `errno` is set to one of the following values."},{"content":"Argument list exceeds 1024 bytes.","pos":[3032,3065]},{"content":"<ph id=\"ph1\"> `mode`</ph> argument is invalid.","pos":[3083,3111],"source":" `mode` argument is invalid."},{"content":"File or path is not found.","pos":[3130,3156]},{"content":"Specified file is not executable or has invalid executable-file format.","pos":[3176,3247]},{"content":"Not enough memory is available to execute the new process.","pos":[3266,3324]},{"pos":[3331,3508],"content":"For more information about these and other return codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For more information about these and other return codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"pos":[3517,3524],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Each of these functions creates and executes a new process, passing an array of pointers to command-line arguments and an array of pointers to environment settings.","pos":[3528,3692]},{"content":"These functions validate their parameters.","pos":[3699,3741]},{"content":"If either <ph id=\"ph1\">`cmdname`</ph> or <ph id=\"ph2\">`argv`</ph> is a null pointer, or if <ph id=\"ph3\">`argv`</ph> points to null pointer, or <ph id=\"ph4\">`argv[0]`</ph> is an empty string, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[3742,3991],"source":" If either `cmdname` or `argv` is a null pointer, or if `argv` points to null pointer, or `argv[0]` is an empty string, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>, and return -1.","pos":[3992,4084],"source":" If execution is allowed to continue, these functions set `errno` to `EINVAL`, and return -1."},{"content":"No new process is spawned.","pos":[4085,4111]},{"pos":[4120,4132],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[4139,4146]},{"content":"Required header","pos":[4147,4162]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt; or <ph id=\"ph2\">\\&lt;</ph>process.h&gt;","pos":[4218,4244],"source":"\\<stdio.h> or \\<process.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;","pos":[4261,4285],"source":"\\<stdio.h> or \\<wchar.h>"},{"pos":[4293,4391],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[4400,4407],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4411,4509],"content":"See the example in <bpt id=\"p1\">[</bpt>_spawn, _wspawn Functions<ept id=\"p1\">](../../c-runtime-library/spawn-wspawn-functions.md)</ept>.","source":"See the example in [_spawn, _wspawn Functions](../../c-runtime-library/spawn-wspawn-functions.md)."},{"pos":[4518,4543],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[4553,4663],"content":"<bpt id=\"p1\">[</bpt>System::Diagnostics::Process Class<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)</ept>","source":"[System::Diagnostics::Process Class](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)"},{"pos":[4673,4801],"content":"<bpt id=\"p1\">[</bpt>System::Diagnostics::ProcessStartInfo Class<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)</ept>","source":"[System::Diagnostics::ProcessStartInfo Class](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)"},{"pos":[4810,4818],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Process and Environment Control<ept id=\"p1\">](../../c-runtime-library/process-and-environment-control.md)</ept><ph id=\"ph1\"> </ph>","pos":[4822,4916],"source":"[Process and Environment Control](../../c-runtime-library/process-and-environment-control.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_spawn, _wspawn Functions<ept id=\"p1\">](../../c-runtime-library/spawn-wspawn-functions.md)</ept><ph id=\"ph1\"> </ph>","pos":[4919,4999],"source":" [_spawn, _wspawn Functions](../../c-runtime-library/spawn-wspawn-functions.md) "},{"content":"<bpt id=\"p1\"> [</bpt>abort<ept id=\"p1\">](../../c-runtime-library/reference/abort.md)</ept><ph id=\"ph1\"> </ph>","pos":[5002,5055],"source":" [abort](../../c-runtime-library/reference/abort.md) "},{"content":"<bpt id=\"p1\"> [</bpt>atexit<ept id=\"p1\">](../../c-runtime-library/reference/atexit.md)</ept><ph id=\"ph1\"> </ph>","pos":[5058,5113],"source":" [atexit](../../c-runtime-library/reference/atexit.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_exec, _wexec Functions<ept id=\"p1\">](../../c-runtime-library/exec-wexec-functions.md)</ept><ph id=\"ph1\"> </ph>","pos":[5116,5192],"source":" [_exec, _wexec Functions](../../c-runtime-library/exec-wexec-functions.md) "},{"content":"<bpt id=\"p1\"> [</bpt>exit, _Exit, _exit<ept id=\"p1\">](../../c-runtime-library/reference/exit-exit-exit.md)</ept><ph id=\"ph1\"> </ph>","pos":[5195,5270],"source":" [exit, _Exit, _exit](../../c-runtime-library/reference/exit-exit-exit.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_flushall<ept id=\"p1\">](../../c-runtime-library/reference/flushall.md)</ept><ph id=\"ph1\"> </ph>","pos":[5273,5333],"source":" [_flushall](../../c-runtime-library/reference/flushall.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_getmbcp<ept id=\"p1\">](../../c-runtime-library/reference/getmbcp.md)</ept><ph id=\"ph1\"> </ph>","pos":[5336,5394],"source":" [_getmbcp](../../c-runtime-library/reference/getmbcp.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_onexit, _onexit_m<ept id=\"p1\">](../../c-runtime-library/reference/onexit-onexit-m.md)</ept><ph id=\"ph1\"> </ph>","pos":[5397,5473],"source":" [_onexit, _onexit_m](../../c-runtime-library/reference/onexit-onexit-m.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_setmbcp<ept id=\"p1\">](../../c-runtime-library/reference/setmbcp.md)</ept><ph id=\"ph1\"> </ph>","pos":[5476,5534],"source":" [_setmbcp](../../c-runtime-library/reference/setmbcp.md) "},{"content":"<bpt id=\"p1\"> [</bpt>system, _wsystem<ept id=\"p1\">](../../c-runtime-library/reference/system-wsystem.md)</ept>","pos":[5537,5609],"source":" [system, _wsystem](../../c-runtime-library/reference/system-wsystem.md)"}],"content":"---\ntitle: \"_spawnve, _wspawnve | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_spawnve\"\n  - \"_wspawnve\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-process-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"wspawnve\"\n  - \"_spawnve\"\n  - \"_wspawnve\"\n  - \"spawnve\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_spawnve function\"\n  - \"spawnve function\"\n  - \"wspawnve function\"\n  - \"processes, creating\"\n  - \"_wspawnve function\"\n  - \"processes, executing new\"\n  - \"process creation\"\nms.assetid: 26d1713d-b551-4f21-a07b-e9891a2ae6cf\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _spawnve, _wspawnve\nCreates and executes a new process.  \n  \n> [!IMPORTANT]\n>  This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \nintptr_t _spawnve(  \n   int mode,  \n   const char *cmdname,  \n   const char *const *argv,  \n   const char *const *envp   \n);  \nintptr_t _wspawnve(  \n   int mode,  \n   const wchar_t *cmdname,  \n   const wchar_t *const *argv,  \n   const wchar_t *const *envp   \n);  \n```  \n  \n#### Parameters  \n `mode`  \n Execution mode for a calling process.  \n  \n `cmdname`  \n Path of the file to be executed.  \n  \n `argv`  \n Array of pointers to arguments. The argument `argv`[0] is usually a pointer to a path in real mode or to the program name in protected mode, and `argv`[1] through `argv`[`n`] are pointers to the character strings forming the new argument list. The argument `argv`[`n` +1] must be a `NULL` pointer to mark the end of the argument list.  \n  \n `envp`  \n Array of pointers to environment settings.  \n  \n## Return Value  \n The return value from a synchronous `_spawnve` or `_wspawnve` (`_P_WAIT` specified for `mode`) is the exit status of the new process. The return value from an asynchronous `_spawnve` or `_wspawnve` (`_P_NOWAIT` or `_P_NOWAITO` specified for `mode`) is the process handle. The exit status is 0 if the process terminated normally. You can set the exit status to a nonzero value if the spawned process specifically calls the `exit` routine with a nonzero argument. If the new process did not explicitly set a positive exit status, a positive exit status indicates an abnormal exit with an abort or an interrupt. A return value of â€“1 indicates an error (the new process is not started). In this case, `errno` is set to one of the following values.  \n  \n `E2BIG`  \n Argument list exceeds 1024 bytes.  \n  \n `EINVAL`  \n `mode` argument is invalid.  \n  \n `ENOENT`  \n File or path is not found.  \n  \n `ENOEXEC`  \n Specified file is not executable or has invalid executable-file format.  \n  \n `ENOMEM`  \n Not enough memory is available to execute the new process.  \n  \n For more information about these and other return codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n Each of these functions creates and executes a new process, passing an array of pointers to command-line arguments and an array of pointers to environment settings.  \n  \n These functions validate their parameters. If either `cmdname` or `argv` is a null pointer, or if `argv` points to null pointer, or `argv[0]` is an empty string, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions set `errno` to `EINVAL`, and return -1. No new process is spawned.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_spawnve`|\\<stdio.h> or \\<process.h>|  \n|`_wspawnve`|\\<stdio.h> or \\<wchar.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n See the example in [_spawn, _wspawn Functions](../../c-runtime-library/spawn-wspawn-functions.md).  \n  \n## .NET Framework Equivalent  \n  \n-   [System::Diagnostics::Process Class](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)  \n  \n-   [System::Diagnostics::ProcessStartInfo Class](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)  \n  \n## See Also  \n [Process and Environment Control](../../c-runtime-library/process-and-environment-control.md)   \n [_spawn, _wspawn Functions](../../c-runtime-library/spawn-wspawn-functions.md)   \n [abort](../../c-runtime-library/reference/abort.md)   \n [atexit](../../c-runtime-library/reference/atexit.md)   \n [_exec, _wexec Functions](../../c-runtime-library/exec-wexec-functions.md)   \n [exit, _Exit, _exit](../../c-runtime-library/reference/exit-exit-exit.md)   \n [_flushall](../../c-runtime-library/reference/flushall.md)   \n [_getmbcp](../../c-runtime-library/reference/getmbcp.md)   \n [_onexit, _onexit_m](../../c-runtime-library/reference/onexit-onexit-m.md)   \n [_setmbcp](../../c-runtime-library/reference/setmbcp.md)   \n [system, _wsystem](../../c-runtime-library/reference/system-wsystem.md)"}