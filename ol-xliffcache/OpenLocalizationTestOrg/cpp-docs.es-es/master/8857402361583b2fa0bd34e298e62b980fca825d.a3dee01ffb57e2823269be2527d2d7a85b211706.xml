{"nodes":[{"pos":[12,54],"content":"AFX_GLOBAL_DATA Structure | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"AFX_GLOBAL_DATA Structure | Microsoft Docs","pos":[0,42]}]},{"content":"AFX_GLOBAL_DATA Structure","pos":[681,706]},{"pos":[707,866],"content":"The <ph id=\"ph1\">`AFX_GLOBAL_DATA`</ph> structure contains fields and methods that are used to manage the framework or customize the appearance and behavior of your application.","source":"The `AFX_GLOBAL_DATA` structure contains fields and methods that are used to manage the framework or customize the appearance and behavior of your application."},{"content":"Syntax","pos":[875,881]},{"content":"Members","pos":[930,937]},{"content":"Public Constructors","pos":[947,966]},{"content":"Name","pos":[973,977]},{"content":"Description","pos":[978,989]},{"pos":[1062,1103],"content":"Constructs a <ph id=\"ph1\">`AFX_GLOBAL_DATA`</ph> structure.","source":"Constructs a `AFX_GLOBAL_DATA` structure."},{"content":"Destructor.","pos":[1144,1155]},{"content":"Public Methods","pos":[1166,1180]},{"content":"Name","pos":[1187,1191]},{"content":"Description","pos":[1192,1203]},{"content":"AFX_GLOBAL_DATA::CleanUp","pos":[1242,1266]},{"content":"Releases resources that are allocated by the framework, such as brushes, fonts, and DLLs.","pos":[1295,1384]},{"content":"AFX_GLOBAL_DATA::D2D1MakeRotateMatrix","pos":[1390,1427]},{"content":"Creates a rotation transformation that rotates by a specified angle around a specified point.","pos":[1469,1562]},{"content":"AFX_GLOBAL_DATA::DrawParentBackground","pos":[1568,1605]},{"content":"Draws the background of a control's parent in the specified area.","pos":[1647,1712]},{"content":"AFX_GLOBAL_DATA::DrawTextOnGlass","pos":[1718,1750]},{"content":"Draws the specified text in the visual style of the specified theme.","pos":[1787,1855]},{"content":"AFX_GLOBAL_DATA::ExcludeTag","pos":[1861,1888]},{"content":"Removes the specified XML tag pair from a specified buffer.","pos":[1920,1979]},{"content":"AFX_GLOBAL_DATA::GetColor","pos":[1985,2010]},{"content":"Retrieves the current color of the specified user interface element.","pos":[2040,2108]},{"content":"AFX_GLOBAL_DATA::GetDirect2dFactory","pos":[2114,2149]},{"content":"Returns a pointer to the <ph id=\"ph1\">`ID2D1Factory`</ph> interface that is stored in the global data.","pos":[2189,2273],"source":"Returns a pointer to the `ID2D1Factory` interface that is stored in the global data."},{"content":"If the interface is not initialized, it is created and has the default parameters.","pos":[2274,2356]},{"content":"AFX_GLOBAL_DATA::GetHandCursor","pos":[2362,2392]},{"pos":[2427,2516],"content":"Retrieves the predefined cursor that resembles a hand and whose identifier is <ph id=\"ph1\">`IDC_HAND`</ph>.","source":"Retrieves the predefined cursor that resembles a hand and whose identifier is `IDC_HAND`."},{"content":"AFX_GLOBAL_DATA::GetITaskbarList","pos":[2522,2554]},{"content":"Creates and stores in the global data a pointer to ITaskBarList interface.","pos":[2591,2665]},{"content":"AFX_GLOBAL_DATA::GetITaskbarList3","pos":[2671,2704]},{"content":"Creates and stores in the global data a pointer to ITaskBarList3 interface.","pos":[2742,2817]},{"content":"AFX_GLOBAL_DATA::GetNonClientMetrics","pos":[2823,2859]},{"content":"Retrieves the metrics associated with the nonclient area of nonminimized windows.","pos":[2900,2981]},{"content":"AFX_GLOBAL_DATA::GetShellAutohideBars","pos":[2987,3024]},{"content":"Determines positions of Shell auto hide bars.","pos":[3066,3111]},{"content":"AFX_GLOBAL_DATA::GetTextHeight","pos":[3117,3147]},{"content":"Retrieves the height of text characters in the current font.","pos":[3182,3242]},{"content":"AFX_GLOBAL_DATA::GetWICFactory","pos":[3248,3278]},{"content":"Returns a pointer to the <ph id=\"ph1\">`IWICImagingFactory`</ph> interface that is stored in the global data.","pos":[3313,3403],"source":"Returns a pointer to the `IWICImagingFactory` interface that is stored in the global data."},{"content":"If the interface is not initialized, it is created and has the default parameters.","pos":[3404,3486]},{"content":"AFX_GLOBAL_DATA::GetWriteFactory","pos":[3492,3524]},{"content":"Returns a pointer to the <ph id=\"ph1\">`IDWriteFactory`</ph> interface that is stored in the global data.","pos":[3561,3647],"source":"Returns a pointer to the `IDWriteFactory` interface that is stored in the global data."},{"content":"If the interface is not initialized, it is created and has the default parameters.","pos":[3648,3730]},{"content":"AFX_GLOBAL_DATA::IsD2DInitialized","pos":[3736,3769]},{"content":"Initializes <ph id=\"ph1\">`D2D`</ph>, <ph id=\"ph2\">`DirectWrite`</ph>, and <ph id=\"ph3\">`WIC`</ph> factories.","pos":[3807,3861],"source":"Initializes `D2D`, `DirectWrite`, and `WIC` factories."},{"content":"Call this method before the main window is initialized.","pos":[3862,3917]},{"content":"AFX_GLOBAL_DATA::Is32BitIcons","pos":[3923,3952]},{"content":"Indicates whether predefined 32-bit icons are supported.","pos":[3986,4042]},{"content":"AFX_GLOBAL_DATA::IsD2DInitialized","pos":[4048,4081]},{"pos":[4119,4164],"content":"Determines whether the <ph id=\"ph1\">`D2D`</ph> was initialized.","source":"Determines whether the `D2D` was initialized."},{"content":"AFX_GLOBAL_DATA::IsDwmCompositionEnabled","pos":[4170,4210]},{"pos":[4255,4390],"content":"Provides a simple way to call the Windows <bpt id=\"p1\">[</bpt>DwmIsCompositionEnabled<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa969518)</ept> method.","source":"Provides a simple way to call the Windows [DwmIsCompositionEnabled](http://msdn.microsoft.com/library/windows/desktop/aa969518) method."},{"content":"AFX_GLOBAL_DATA::IsHighContrastMode","pos":[4396,4431]},{"content":"Indicates whether images are currently displayed in high contrast.","pos":[4471,4537]},{"content":"AFX_GLOBAL_DATA::OnSettingChange","pos":[4543,4575]},{"content":"Detects the current state of the desktop's menu animation and taskbar autohide features.","pos":[4612,4700]},{"content":"AFX_GLOBAL_DATA::RegisterWindowClass","pos":[4706,4742]},{"content":"Registers the specified MFC window class.","pos":[4783,4824]},{"content":"AFX_GLOBAL_DATA::ReleaseTaskBarRefs","pos":[4830,4865]},{"content":"Releases interfaces obtained through GetITaskbarList and GetITaskbarList3 methods.","pos":[4905,4987]},{"content":"AFX_GLOBAL_DATA::Resume","pos":[4993,5016]},{"pos":[5044,5219],"content":"Reinitializes internal function pointers that access methods that support Windows <bpt id=\"p1\">[</bpt>themes and visual styles<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/desktop/hh270423.aspx)</ept>.","source":"Reinitializes internal function pointers that access methods that support Windows [themes and visual styles](https://msdn.microsoft.com/library/windows/desktop/hh270423.aspx)."},{"content":"AFX_GLOBAL_DATA::SetLayeredAttrib","pos":[5225,5258]},{"pos":[5296,5434],"content":"Provides a simple way to call the Windows <bpt id=\"p1\">[</bpt>SetLayeredWindowAttributes<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633540)</ept> method.","source":"Provides a simple way to call the Windows [SetLayeredWindowAttributes](http://msdn.microsoft.com/library/windows/desktop/ms633540) method."},{"content":"AFX_GLOBAL_DATA::SetMenuFont","pos":[5440,5468]},{"content":"Creates the specified logical font.","pos":[5501,5536]},{"content":"AFX_GLOBAL_DATA::ShellCreateItemFromParsingName","pos":[5542,5589]},{"content":"Creates and initializes a Shell item object from a parsing name.","pos":[5641,5705]},{"content":"AFX_GLOBAL_DATA::UpdateFonts","pos":[5711,5739]},{"content":"Reintializes the logical fonts that are used by the framework.","pos":[5772,5834]},{"content":"AFX_GLOBAL_DATA::UpdateSysColors","pos":[5840,5872]},{"content":"Initializes the colors, color depth, brushes, pens, and images that are used by the framework.","pos":[5909,6003]},{"content":"Protected Methods","pos":[6014,6031]},{"content":"Name","pos":[6038,6042]},{"content":"Description","pos":[6043,6054]},{"content":"AFX_GLOBAL_DATA::EnableAccessibilitySupport","pos":[6093,6136]},{"content":"Enables or disables Microsoft Active Accessibility support.","pos":[6184,6243]},{"content":"Active Accessibility provides reliable methods for exposing information about user interface elements.","pos":[6244,6346]},{"content":"AFX_GLOBAL_DATA::IsAccessibilitySupport","pos":[6352,6391]},{"content":"Indicates whether Microsoft Active Accessibility support is enabled.","pos":[6435,6503]},{"content":"AFX_GLOBAL_DATA::IsWindowsLayerSupportAvailable","pos":[6509,6556]},{"content":"Indicates whether the operating system supports layered windows.","pos":[6608,6672]},{"content":"Data Members","pos":[6683,6695]},{"content":"Name","pos":[6702,6706]},{"content":"Description","pos":[6707,6718]},{"content":"AFX_GLOBAL_DATA::bIsOSAlphaBlendingSupport","pos":[6757,6799]},{"content":"Indicates whether the current operating system supports alpha blending.","pos":[6846,6917]},{"content":"AFX_GLOBAL_DATA::bIsWindows7","pos":[6923,6951]},{"content":"Indicates whether the application is being executed under Windows 7 OS or higher","pos":[6984,7064]},{"content":"AFX_GLOBAL_DATA::clrActiveCaptionGradient","pos":[7070,7111]},{"content":"Specifies gradient color of active caption.","pos":[7157,7200]},{"content":"Generally used for docking panes.","pos":[7201,7234]},{"content":"AFX_GLOBAL_DATA::clrInactiveCaptionGradient","pos":[7240,7283]},{"content":"Specifies gradient color of inactive active caption.","pos":[7331,7383]},{"content":"Generally used for docking panes.","pos":[7384,7417]},{"content":"AFX_GLOBAL_DATA::m_bUseBuiltIn32BitIcons","pos":[7423,7463]},{"content":"Indicates whether the framework uses predefined 32-bit color icons or icons of a lower resolution.","pos":[7508,7606]},{"content":"AFX_GLOBAL_DATA::m_bUseSystemFont","pos":[7612,7645]},{"content":"Indicates whether a system font is used for menus, toolbars, and ribbons.","pos":[7683,7756]},{"content":"AFX_GLOBAL_DATA::m_hcurHand","pos":[7762,7789]},{"content":"Stores the handle for the hand cursor.","pos":[7821,7859]},{"content":"AFX_GLOBAL_DATA::m_hcurStretch","pos":[7865,7895]},{"content":"Stores the handle for the horizontal stretch cursor.","pos":[7930,7982]},{"content":"AFX_GLOBAL_DATA::m_hcurStretchVert","pos":[7988,8022]},{"content":"Stores the handle for the vertical stretch cursor.","pos":[8061,8111]},{"content":"AFX_GLOBAL_DATA::m_hiconTool","pos":[8117,8145]},{"content":"Stores the handle for the tool icon.","pos":[8178,8214]},{"content":"AFX_GLOBAL_DATA::m_nAutoHideToolBarMargin","pos":[8220,8261]},{"content":"Specifies the offset from the leftmost autohide toolbar to the left side of the docking bar.","pos":[8307,8399]},{"content":"AFX_GLOBAL_DATA::m_nAutoHideToolBarSpacing","pos":[8405,8447]},{"content":"Specifies the gap between autohide toolbars.","pos":[8494,8538]},{"content":"AFX_GLOBAL_DATA::m_nDragFrameThicknessDock","pos":[8544,8586]},{"content":"Specifies the thickness of the drag frame that is used to communicate the docked state.","pos":[8633,8720]},{"content":"AFX_GLOBAL_DATA::m_nDragFrameThicknessFloat","pos":[8726,8769]},{"content":"Specifies the thickness of the drag frame that is used to communicate the floating state.","pos":[8817,8906]},{"content":"Remarks","pos":[8917,8924]},{"pos":[8928,9024],"content":"Most of the data in the <ph id=\"ph1\">`AFX_GLOBAL_DATA`</ph> structure is initialized when your application starts.","source":"Most of the data in the `AFX_GLOBAL_DATA` structure is initialized when your application starts."},{"content":"Inheritance Hierarchy","pos":[9034,9055]},{"content":"AFX_GLOBAL_DATA","pos":[9060,9075]},{"content":"Requirements","pos":[9136,9148]},{"pos":[9152,9176],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxglobals.h","source":"**Header:** afxglobals.h"},{"content":"See Also","pos":[9186,9194]},{"content":"Hierarchy Chart","pos":[9199,9214]},{"content":"Structures, Styles, Callbacks, and Message Maps","pos":[9251,9298]},{"pos":[9432,9474],"content":"AFX_GLOBAL_DATA::bIsOSAlphaBlendingSupport"},{"content":"Indicates whether the operating system supports alpha blending.","pos":[9475,9538]},{"content":"Remarks","pos":[9601,9608]},{"pos":[9619,9677],"content":"indicates alpha blending is supported; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" indicates alpha blending is supported; otherwise, `FALSE`."},{"pos":[9727,9751],"content":"AFX_GLOBAL_DATA::CleanUp"},{"content":"Releases resources that are allocated by the framework, such as brushes, fonts, and DLLs.","pos":[9752,9841]},{"pos":[9934,9971],"content":"AFX_GLOBAL_DATA::D2D1MakeRotateMatrix"},{"content":"Creates a rotation transformation that rotates by a specified angle around a specified point.","pos":[9972,10065]},{"content":"Parameters","pos":[10202,10212]},{"content":"The clockwise rotation angle, in degrees.","pos":[10228,10269]},{"content":"The point about which to rotate.","pos":[10288,10320]},{"content":"When this method returns, contains the new rotation transformation.","pos":[10339,10406]},{"content":"You must allocate storage for this parameter.","pos":[10407,10452]},{"content":"Return Value","pos":[10462,10474]},{"content":"Returns S_OK if successful, or an error value otherwise.","pos":[10478,10534]},{"pos":[10596,10633],"content":"AFX_GLOBAL_DATA::DrawParentBackground"},{"content":"Draws the background of a control's parent in the specified area.","pos":[10634,10699]},{"content":"Parameters","pos":[10817,10827]},{"content":"[in]","pos":[10832,10836]},{"content":"Pointer to a control's window.","pos":[10847,10877]},{"content":"[in]","pos":[10884,10888]},{"content":"Pointer to a device context.","pos":[10898,10926]},{"content":"[in]","pos":[10933,10937]},{"content":"Pointer to a rectangle that bounds the area to draw.","pos":[10950,11002]},{"content":"The default value is <ph id=\"ph1\">`NULL`</ph>.","pos":[11003,11031],"source":" The default value is `NULL`."},{"content":"Return Value","pos":[11041,11053]},{"pos":[11064,11113],"content":"if this method is successful; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if this method is successful; otherwise, `FALSE`."},{"pos":[11170,11202],"content":"AFX_GLOBAL_DATA::DrawTextOnGlass"},{"content":"Draws the specified text in the visual style of the specified theme.","pos":[11203,11271]},{"content":"Parameters","pos":[11530,11540]},{"content":"[in]","pos":[11545,11549]},{"content":"Handle to the theme data of a window, or <ph id=\"ph1\">`NULL`</ph>.","pos":[11562,11610],"source":" Handle to the theme data of a window, or `NULL`."},{"content":"The framework uses the specified theme to draw the text if this parameter is not <ph id=\"ph1\">`NULL`</ph> and themes are supported.","pos":[11611,11724],"source":" The framework uses the specified theme to draw the text if this parameter is not `NULL` and themes are supported."},{"content":"Otherwise, the framework does not use a theme to draw the text.","pos":[11725,11788]},{"pos":[11795,11908],"content":"Use the <bpt id=\"p1\">[</bpt>OpenThemeData<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb759821)</ept> method to create an <ph id=\"ph1\">`HTHEME`</ph>.","source":"Use the [OpenThemeData](http://msdn.microsoft.com/library/windows/desktop/bb759821) method to create an `HTHEME`."},{"content":"[in]","pos":[11915,11919]},{"content":"Pointer to a device context.","pos":[11929,11957]},{"content":"[in]","pos":[11964,11968]},{"content":"The control part that has the desired text appearance.","pos":[11982,12036]},{"content":"For more information, see the Parts column of the table in <bpt id=\"p1\">[</bpt>Parts and States<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773210)</ept>.","pos":[12037,12175],"source":" For more information, see the Parts column of the table in [Parts and States](http://msdn.microsoft.com/library/windows/desktop/bb773210)."},{"content":"If this value is 0, the text is drawn in the default font, or a font selected into the device context.","pos":[12176,12278]},{"content":"[in]","pos":[12285,12289]},{"content":"The control state that has the desired text appearance.","pos":[12304,12359]},{"content":"For more information, see the States column of the table in <bpt id=\"p1\">[</bpt>Parts and States<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773210)</ept>.","pos":[12360,12499],"source":" For more information, see the States column of the table in [Parts and States](http://msdn.microsoft.com/library/windows/desktop/bb773210)."},{"content":"[in]","pos":[12506,12510]},{"content":"The text to draw.","pos":[12524,12541]},{"content":"[in]","pos":[12548,12552]},{"content":"The boundary of the area in which the specified text is drawn.","pos":[12563,12625]},{"content":"[in]","pos":[12632,12636]},{"content":"A bitwise combination (OR) of flags that specify how the specified text is drawn.","pos":[12650,12731]},{"content":"If the <ph id=\"ph1\">`hTheme`</ph> parameter is <ph id=\"ph2\">`NULL`</ph> or if themes are not supported and enabled, the <ph id=\"ph3\">`nFormat`</ph> parameter of the <bpt id=\"p1\">[</bpt>CDC::DrawText<ept id=\"p1\">](../../mfc/reference/cdc-class.md#cdc__drawtext)</ept> method describes the valid flags.","pos":[12738,12946],"source":"If the `hTheme` parameter is `NULL` or if themes are not supported and enabled, the `nFormat` parameter of the [CDC::DrawText](../../mfc/reference/cdc-class.md#cdc__drawtext) method describes the valid flags."},{"content":"If themes are supported, the <ph id=\"ph1\">`dwFlags`</ph> parameter of the <bpt id=\"p1\">[</bpt>DrawThemeTextEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773317)</ept> method describes the valid flags.","pos":[12947,13114],"source":" If themes are supported, the `dwFlags` parameter of the [DrawThemeTextEx](http://msdn.microsoft.com/library/windows/desktop/bb773317) method describes the valid flags."},{"content":"[in]","pos":[13121,13125]},{"content":"The size of a glow effect that is drawn on the background before drawing the specified text.","pos":[13141,13233]},{"content":"The default value is 0.","pos":[13234,13257]},{"content":"[in]","pos":[13264,13268]},{"content":"The color in which the specified text is drawn.","pos":[13282,13329]},{"content":"The default value is the default color.","pos":[13330,13369]},{"content":"Return Value","pos":[13379,13391]},{"pos":[13402,13468],"content":"if a theme is used to draw the specified text; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if a theme is used to draw the specified text; otherwise, `FALSE`."},{"content":"Remarks","pos":[13478,13485]},{"content":"A theme defines the visual style of an application.","pos":[13489,13540]},{"content":"A theme is not used to draw the text if the <ph id=\"ph1\">`hTheme`</ph> parameter is <ph id=\"ph2\">`NULL`</ph>, or if the <bpt id=\"p1\">[</bpt>DrawThemeTextEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773317)</ept> method is not supported, or if <bpt id=\"p2\">[</bpt>Desktop Window Manager<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/aa969540)</ept> (DWM) composition is disabled.","pos":[13541,13849],"source":" A theme is not used to draw the text if the `hTheme` parameter is `NULL`, or if the [DrawThemeTextEx](http://msdn.microsoft.com/library/windows/desktop/bb773317) method is not supported, or if [Desktop Window Manager](http://msdn.microsoft.com/library/windows/desktop/aa969540) (DWM) composition is disabled."},{"content":"See Also","pos":[13860,13868]},{"content":"AFX_GLOBAL_DATA Structure","pos":[13873,13898]},{"content":"Hierarchy Chart","pos":[13955,13970]},{"content":"COLORREF","pos":[14007,14015]},{"content":"Parts and States","pos":[14082,14098]},{"content":"CDC::DrawText","pos":[14165,14178]},{"content":"DrawThemeTextEx","pos":[14233,14248]},{"content":"Desktop Window Manager","pos":[14315,14337]},{"content":"Enable and Control DWM Composition","pos":[14404,14438]},{"pos":[14563,14606],"content":"AFX_GLOBAL_DATA::EnableAccessibilitySupport"},{"content":"Enables or disables Microsoft Active Accessibility support.","pos":[14607,14666]},{"content":"Parameters","pos":[14746,14756]},{"content":"[in]","pos":[14761,14765]},{"content":"to enable accessibility support; <ph id=\"ph1\">`FALSE`</ph> to disable accessibility support.","pos":[14786,14860],"source":" to enable accessibility support; `FALSE` to disable accessibility support."},{"content":"The default value is <ph id=\"ph1\">`TRUE`</ph>.","pos":[14861,14889],"source":" The default value is `TRUE`."},{"content":"Remarks","pos":[14899,14906]},{"content":"Active Accessibility is a COM-based technology that improves the way programs and the Windows operating system work together with assistive technology products.","pos":[14910,15070]},{"content":"It provides reliable methods for exposing information about user interface elements.","pos":[15071,15155]},{"content":"However, a newer accessibility model called Microsoft UI Automation is now available.","pos":[15156,15241]},{"content":"For a comparison of the two technologies, see <bpt id=\"p1\">[</bpt>UI Automation and Microsoft Active Accessibility<ept id=\"p1\">](http://msdn.microsoft.com/library/87bee662-0a3e-4232-a421-20e7a5968321)</ept>.","pos":[15242,15411],"source":" For a comparison of the two technologies, see [UI Automation and Microsoft Active Accessibility](http://msdn.microsoft.com/library/87bee662-0a3e-4232-a421-20e7a5968321)."},{"pos":[15418,15588],"content":"Use the <bpt id=\"p1\">[</bpt>AFX_GLOBAL_DATA::IsAccessibilitySupport<ept id=\"p1\">](#afx_global_data__isaccessibilitysupport)</ept> method to determine whether Microsoft Active Accessibility support is enabled.","source":"Use the [AFX_GLOBAL_DATA::IsAccessibilitySupport](#afx_global_data__isaccessibilitysupport) method to determine whether Microsoft Active Accessibility support is enabled."},{"content":"See Also","pos":[15599,15607]},{"content":"UI Automation and Microsoft Active Accessibility","pos":[15612,15660]},{"content":"AFX_GLOBAL_DATA::IsAccessibilitySupport","pos":[15739,15778]},{"pos":[15869,15896],"content":"AFX_GLOBAL_DATA::ExcludeTag"},{"content":"Removes the specified XML tag pair from a specified buffer.","pos":[15897,15956]},{"content":"Parameters","pos":[16105,16115]},{"content":"[in]","pos":[16120,16124]},{"content":"A buffer of text.","pos":[16140,16157]},{"content":"[in]","pos":[16164,16168]},{"content":"The name of a pair of opening and closing XML tags.","pos":[16182,16233]},{"content":"[out]","pos":[16240,16245]},{"content":"When this method returns, the <ph id=\"ph1\">`strTag`</ph> parameter contains the text that is between the opening and closing XML tags that are named by the <ph id=\"ph2\">`lpszTag`</ph> parameter.","pos":[16258,16416],"source":" When this method returns, the `strTag` parameter contains the text that is between the opening and closing XML tags that are named by the `lpszTag` parameter."},{"content":"Any leading or trailing whitespace is trimmed from the result.","pos":[16417,16479]},{"content":"[in]","pos":[16486,16490]},{"content":"to convert symbols for escape characters in the <ph id=\"ph1\">`strTag`</ph> parameter into actual escape characters; <ph id=\"ph2\">`FALSE`</ph> not to perform the conversion.The default value is <ph id=\"ph3\">`FALSE`</ph>.","pos":[16516,16681],"source":" to convert symbols for escape characters in the `strTag` parameter into actual escape characters; `FALSE` not to perform the conversion.The default value is `FALSE`."},{"content":"For more information, see Remarks.","pos":[16682,16716]},{"content":"Return Value","pos":[16726,16738]},{"pos":[16749,16798],"content":"if this method is successful; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if this method is successful; otherwise, `FALSE`."},{"content":"Remarks","pos":[16808,16815]},{"content":"An XML tag pair consists of named opening and closing tags that indicate the start and end of a run of text in the specified buffer.","pos":[16819,16951]},{"content":"The <ph id=\"ph1\">`strBuffer`</ph> parameter specifies the buffer, and the <ph id=\"ph2\">`lpszTag`</ph> parameter specifies the name of the XML tags.","pos":[16952,17063],"source":" The `strBuffer` parameter specifies the buffer, and the `lpszTag` parameter specifies the name of the XML tags."},{"content":"Use the symbols in the following table to encode a set of escape characters in the specified buffer.","pos":[17070,17170]},{"content":"Specify <ph id=\"ph1\">`TRUE`</ph> for the <ph id=\"ph2\">`bIsCharsList`</ph> parameter to convert the symbols in the <ph id=\"ph3\">`strTag`</ph> parameter into actual escape characters.","pos":[17171,17298],"source":" Specify `TRUE` for the `bIsCharsList` parameter to convert the symbols in the `strTag` parameter into actual escape characters."},{"content":"The following table uses the <bpt id=\"p1\">[</bpt>_T()<ept id=\"p1\">](../../c-runtime-library/data-type-mappings.md)</ept> macro to specify the symbol and escape character strings.","pos":[17299,17439],"source":" The following table uses the [_T()](../../c-runtime-library/data-type-mappings.md) macro to specify the symbol and escape character strings."},{"content":"Symbol","pos":[17446,17452]},{"content":"Escape character","pos":[17453,17469]},{"content":"_T(\"<ph id=\"ph1\">\\\\</ph>\\t\")","pos":[17514,17524],"source":"_T(\"\\\\\\t\")"},{"content":"_T(\"\\t\")","pos":[17525,17533]},{"content":"_T(\"<ph id=\"ph1\">\\\\</ph>\\n\")","pos":[17538,17548],"source":"_T(\"\\\\\\n\")"},{"content":"_T(\"\\n\")","pos":[17549,17557]},{"content":"_T(\"<ph id=\"ph1\">\\\\</ph>\\r\")","pos":[17562,17572],"source":"_T(\"\\\\\\r\")"},{"content":"_T(\"\\r\")","pos":[17573,17581]},{"content":"_T(\"<ph id=\"ph1\">\\\\</ph>\\b\")","pos":[17586,17596],"source":"_T(\"\\\\\\b\")"},{"content":"_T(\"\\b\")","pos":[17597,17605]},{"content":"_T(\"LT\")","pos":[17610,17618]},{"content":"_T(\"<ph id=\"ph1\">\\&lt;</ph>\")","pos":[17619,17627],"source":"_T(\"\\<\")"},{"content":"_T(\"GT\")","pos":[17632,17640]},{"content":"_T(\"&gt;\")","pos":[17641,17648],"source":"_T(\">\")"},{"content":"_T(\"AMP\")","pos":[17653,17662]},{"content":"_T(\"&amp;\")","pos":[17663,17670],"source":"_T(\"&\")"},{"pos":[17721,17746],"content":"AFX_GLOBAL_DATA::GetColor"},{"content":"Retrieves the current color of the specified user interface element.","pos":[17747,17815]},{"content":"Parameters","pos":[17874,17884]},{"content":"[in]","pos":[17889,17893]},{"content":"A value that specifies a user interface element whose color is retrieved.","pos":[17906,17979]},{"content":"For a list of valid values, see the <ph id=\"ph1\">`nIndex`</ph> parameter of the <bpt id=\"p1\">[</bpt>GetSysColor<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms724371)</ept> method.","pos":[17980,18123],"source":" For a list of valid values, see the `nIndex` parameter of the [GetSysColor](http://msdn.microsoft.com/library/windows/desktop/ms724371) method."},{"content":"Return Value","pos":[18133,18145]},{"content":"The RGB color value of the specified user interface element.","pos":[18149,18209]},{"content":"For more information, see Remarks.","pos":[18210,18244]},{"content":"Remarks","pos":[18254,18261]},{"content":"If the <ph id=\"ph1\">`nColor`</ph> parameter is out of range, the return value is zero.","pos":[18265,18333],"source":"If the `nColor` parameter is out of range, the return value is zero."},{"content":"Because zero is also a valid RGB value, you cannot use this method to determine whether a system color is supported by the current operating system.","pos":[18334,18482]},{"content":"Instead, use the <bpt id=\"p1\">[</bpt>GetSysColorBrush<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd144927)</ept> method, which returns <ph id=\"ph1\">`NULL`</ph> if the color is not supported.","pos":[18483,18638],"source":" Instead, use the [GetSysColorBrush](http://msdn.microsoft.com/library/windows/desktop/dd144927) method, which returns `NULL` if the color is not supported."},{"content":"See Also","pos":[18647,18655]},{"content":"GetSysColor Function","pos":[18661,18681]},{"content":"COLORREF","pos":[18748,18756]},{"content":"GetSysColorBrush","pos":[18823,18839]},{"pos":[18956,18991],"content":"AFX_GLOBAL_DATA::GetDirect2dFactory"},{"content":"Returns a pointer to the ID2D1Factory interface that is stored in the global data.","pos":[18993,19075]},{"content":"If the interface is not initialized, it is created and has the default parameters.","pos":[19076,19158]},{"content":"Return Value","pos":[19222,19234]},{"content":"A pointer to ID2D1Factory interface if creation of a factory succeeds, or NULL if creation fails or current Operation System don't have D2D support.","pos":[19238,19386]},{"pos":[19442,19472],"content":"AFX_GLOBAL_DATA::GetHandCursor"},{"pos":[19473,19562],"content":"Retrieves the predefined cursor that resembles a hand and whose identifier is <ph id=\"ph1\">`IDC_HAND`</ph>.","source":"Retrieves the predefined cursor that resembles a hand and whose identifier is `IDC_HAND`."},{"content":"Return Value","pos":[19615,19627]},{"content":"The handle of the hand cursor.","pos":[19631,19661]},{"pos":[19720,19756],"content":"AFX_GLOBAL_DATA::GetNonClientMetrics"},{"content":"Retrieves the metrics associated with the nonclient area of nonminimized windows.","pos":[19757,19838]},{"content":"Parameters","pos":[19916,19926]},{"content":"[in, out]","pos":[19931,19940]},{"content":"A <bpt id=\"p1\">[</bpt>NONCLIENTMETRICS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ff729175)</ept> structure that contains the scalable metrics associated with the nonclient area of a nonminimized window.","pos":[19951,20137],"source":" A [NONCLIENTMETRICS](http://msdn.microsoft.com/library/windows/desktop/ff729175) structure that contains the scalable metrics associated with the nonclient area of a nonminimized window."},{"content":"Return Value","pos":[20147,20159]},{"pos":[20170,20214],"content":"if this method succeeds; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if this method succeeds; otherwise, `FALSE`."},{"content":"See Also","pos":[20225,20233]},{"content":"NONCLIENTMETRICS Structure","pos":[20239,20265]},{"pos":[20377,20407],"content":"AFX_GLOBAL_DATA::GetTextHeight"},{"content":"Retrieves the height of text characters in the current font.","pos":[20409,20469]},{"content":"Parameters","pos":[20535,20545]},{"content":"[in]","pos":[20550,20554]},{"content":"to retrieve the height of characters when text runs horizontally; <ph id=\"ph1\">`FALSE`</ph> to retrieve the height of characters when text runs vertically.","pos":[20573,20710],"source":" to retrieve the height of characters when text runs horizontally; `FALSE` to retrieve the height of characters when text runs vertically."},{"content":"The default value is <ph id=\"ph1\">`TRUE`</ph>.","pos":[20711,20739],"source":" The default value is `TRUE`."},{"content":"Return Value","pos":[20749,20761]},{"content":"The height of the current font, which is measured from its ascender to its descender.","pos":[20765,20850]},{"pos":[20905,20935],"content":"AFX_GLOBAL_DATA::GetWICFactory"},{"content":"Returns a pointer to the IWICImagingFactory interface that is stored in the global data.","pos":[20936,21024]},{"content":"If the interface is not initialized, it is created and has the default parameters.","pos":[21025,21107]},{"content":"Return Value","pos":[21172,21184]},{"content":"A pointer to IWICImagingFactory interface if creation of a factory succeeds, or NULL if creation fails or current Operation System don't have WIC support.","pos":[21188,21342]},{"pos":[21399,21431],"content":"AFX_GLOBAL_DATA::GetWriteFactory"},{"content":"Returns a pointer to the IDWriteFactory interface that is stored in the global data.","pos":[21432,21516]},{"content":"If the interface is not initialized, it is created and has the default parameters.","pos":[21517,21599]},{"content":"Return Value","pos":[21662,21674]},{"content":"A pointer to IDWriteFactory interface if creation of a factory succeeds, or NULL if creation fails or current Operation System don't have DirectWrite support.","pos":[21678,21836]},{"pos":[21884,21908],"content":"AFX_GLOBAL_DATA::InitD2D"},{"content":"Initializes D2D, DirectWrite, and WIC factories.","pos":[21909,21957]},{"content":"Call this method before the main window is initialized.","pos":[21958,22013]},{"content":"Parameters","pos":[22203,22213]},{"content":"The threading model of the D2D factory and the resources it creates.","pos":[22238,22306]},{"content":"A value that specifies whether the write factory object will be shared or isolated","pos":[22335,22417]},{"content":"Return Value","pos":[22427,22439]},{"content":"Returns TRUE if the factories were intilalizrd, FALSE - otherwise","pos":[22443,22508]},{"pos":[22562,22591],"content":"AFX_GLOBAL_DATA::Is32BitIcons"},{"content":"Indicates whether predefined 32-bit icons are supported.","pos":[22592,22648]},{"content":"Return Value","pos":[22706,22718]},{"pos":[22729,22790],"content":"if predefined 32-bit icons are supported; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if predefined 32-bit icons are supported; otherwise, `FALSE`."},{"content":"Remarks","pos":[22800,22807]},{"pos":[22811,23000],"content":"This method returns <ph id=\"ph1\">`TRUE`</ph> if the framework supports 32-bit built-in icons, and if the operating system supports 16 bits per pixel or more, and if images are not displayed in high contrast.","source":"This method returns `TRUE` if the framework supports 32-bit built-in icons, and if the operating system supports 16 bits per pixel or more, and if images are not displayed in high contrast."},{"pos":[23064,23103],"content":"AFX_GLOBAL_DATA::IsAccessibilitySupport"},{"content":"Indicates whether Microsoft Active Accessibility support is enabled.","pos":[23104,23172]},{"content":"Return Value","pos":[23238,23250]},{"pos":[23261,23317],"content":"if accessibility support is enabled; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if accessibility support is enabled; otherwise, `FALSE`."},{"content":"Remarks","pos":[23327,23334]},{"content":"Microsoft Active Accessibility was the earlier solution for making applications accessible.","pos":[23338,23429]},{"content":"Microsoft UI Automation is the new accessibility model for Microsoft Windows and is intended to address the needs of assistive technology products and automated testing tools.","pos":[23430,23605]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>UI Automation and Microsoft Active Accessibility<ept id=\"p1\">](http://msdn.microsoft.com/library/87bee662-0a3e-4232-a421-20e7a5968321)</ept>.","pos":[23606,23755],"source":" For more information, see [UI Automation and Microsoft Active Accessibility](http://msdn.microsoft.com/library/87bee662-0a3e-4232-a421-20e7a5968321)."},{"pos":[23762,23919],"content":"Use the <bpt id=\"p1\">[</bpt>AFX_GLOBAL_DATA::EnableAccessibilitySupport<ept id=\"p1\">](#afx_global_data__enableaccessibilitysupport)</ept> method to enable or disable Active Accessibility support.","source":"Use the [AFX_GLOBAL_DATA::EnableAccessibilitySupport](#afx_global_data__enableaccessibilitysupport) method to enable or disable Active Accessibility support."},{"content":"See Also","pos":[23929,23937]},{"content":"UI Automation and Microsoft Active Accessibility","pos":[23942,23990]},{"pos":[24117,24150],"content":"AFX_GLOBAL_DATA::IsD2DInitialized"},{"content":"Determines whether the D2D was initialized","pos":[24152,24194]},{"content":"Return Value","pos":[24254,24266]},{"content":"TRUE if D2D was initialized; otherwise FALSE.","pos":[24270,24315]},{"pos":[24380,24420],"content":"AFX_GLOBAL_DATA::IsDwmCompositionEnabled"},{"pos":[24421,24556],"content":"Provides a simple way to call the Windows <bpt id=\"p1\">[</bpt>DwmIsCompositionEnabled<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa969518)</ept> method.","source":"Provides a simple way to call the Windows [DwmIsCompositionEnabled](http://msdn.microsoft.com/library/windows/desktop/aa969518) method."},{"content":"Return Value","pos":[24616,24628]},{"pos":[24639,24776],"content":"if <bpt id=\"p1\">[</bpt>Desktop Window Manager<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa969540)</ept> (DWM) composition is enabled; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if [Desktop Window Manager](http://msdn.microsoft.com/library/windows/desktop/aa969540) (DWM) composition is enabled; otherwise, `FALSE`."},{"content":"See Also","pos":[24785,24793]},{"content":"Desktop Window Manager","pos":[24800,24822]},{"content":"Enable and Control DWM Composition","pos":[24889,24923]},{"pos":[25040,25075],"content":"AFX_GLOBAL_DATA::IsHighContrastMode"},{"content":"Indicates whether images are currently displayed in high contrast.","pos":[25077,25143]},{"content":"Return Value","pos":[25201,25213]},{"pos":[25224,25315],"content":"if images are currently displayed in black or white high contrast mode; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if images are currently displayed in black or white high contrast mode; otherwise, `FALSE`."},{"content":"Remarks","pos":[25325,25332]},{"content":"In black high contrast mode, edges facing the light are white and the background is black.","pos":[25336,25426]},{"content":"In white high contrast mode, edges facing the light are black and the background is white.","pos":[25427,25517]},{"pos":[25589,25636],"content":"AFX_GLOBAL_DATA::IsWindowsLayerSupportAvailable"},{"content":"Indicates whether the operating system supports layered windows.","pos":[25637,25701]},{"content":"Return Value","pos":[25775,25787]},{"pos":[25798,25851],"content":"if layered windows are supported; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if layered windows are supported; otherwise, `FALSE`."},{"content":"Remarks","pos":[25861,25868]},{"pos":[25872,25950],"content":"If layered windows are supported, <bpt id=\"p1\">*</bpt>smart docking<ept id=\"p1\">*</ept> markers use layered windows.","source":"If layered windows are supported, *smart docking* markers use layered windows."},{"pos":[26015,26055],"content":"AFX_GLOBAL_DATA::m_bUseBuiltIn32BitIcons"},{"content":"Indicates whether the framework uses predefined 32-bit color icons or icons of a lower resolution.","pos":[26056,26154]},{"content":"Remarks","pos":[26215,26222]},{"content":"specifies that the framework use 32-bit color icons; <ph id=\"ph1\">`FALSE`</ph> specifies lower resolution icons.","pos":[26233,26327],"source":" specifies that the framework use 32-bit color icons; `FALSE` specifies lower resolution icons."},{"content":"The <ph id=\"ph1\">`AFX_GLOBAL_DATA::AFX_GLOBAL_DATA`</ph> constructor initializes this member to <ph id=\"ph2\">`TRUE`</ph>.","pos":[26328,26413],"source":" The `AFX_GLOBAL_DATA::AFX_GLOBAL_DATA` constructor initializes this member to `TRUE`."},{"content":"This member must be set at application startup.","pos":[26420,26467]},{"pos":[26525,26558],"content":"AFX_GLOBAL_DATA::m_bUseSystemFont"},{"content":"Indicates whether a system font is used for menus, toolbars, and ribbons.","pos":[26559,26632]},{"content":"Remarks","pos":[26685,26692]},{"content":"specifies to use a system font; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","pos":[26703,26754],"source":" specifies to use a system font; otherwise, `FALSE`."},{"content":"The <ph id=\"ph1\">`AFX_GLOBAL_DATA::AFX_GLOBAL_DATA`</ph> constructor initializes this member to <ph id=\"ph2\">`FALSE`</ph>.","pos":[26755,26841],"source":" The `AFX_GLOBAL_DATA::AFX_GLOBAL_DATA` constructor initializes this member to `FALSE`."},{"content":"Testing this member is not the only way for the framework to determine the font to use.","pos":[26848,26935]},{"content":"The <ph id=\"ph1\">`AFX_GLOBAL_DATA::UpdateFonts`</ph> method also tests default and alternative fonts to determine what visual styles are available to be applied to menus, toolbars, and ribbons.","pos":[26936,27111],"source":" The `AFX_GLOBAL_DATA::UpdateFonts` method also tests default and alternative fonts to determine what visual styles are available to be applied to menus, toolbars, and ribbons."},{"pos":[27163,27190],"content":"AFX_GLOBAL_DATA::m_hcurHand"},{"content":"Stores the handle for the hand cursor.","pos":[27191,27229]},{"pos":[27324,27354],"content":"AFX_GLOBAL_DATA::m_hcurStretch"},{"content":"Stores the handle for the horizontal stretch cursor.","pos":[27355,27407]},{"pos":[27507,27541],"content":"AFX_GLOBAL_DATA::m_hcurStretchVert"},{"content":"Stores the handle for the vertical stretch cursor.","pos":[27542,27592]},{"pos":[27692,27720],"content":"AFX_GLOBAL_DATA::m_hiconTool"},{"content":"Stores the handle for the tool icon.","pos":[27721,27757]},{"pos":[27859,27900],"content":"AFX_GLOBAL_DATA::m_nAutoHideToolBarMargin"},{"content":"Specifies the offset from the leftmost autohide toolbar to the left side of the dock bar.","pos":[27901,27990]},{"content":"Remarks","pos":[28051,28058]},{"pos":[28062,28149],"content":"The <ph id=\"ph1\">`AFX_GLOBAL_DATA::AFX_GLOBAL_DATA`</ph> constructor initializes this member to 4 pixels.","source":"The `AFX_GLOBAL_DATA::AFX_GLOBAL_DATA` constructor initializes this member to 4 pixels."},{"pos":[28216,28258],"content":"AFX_GLOBAL_DATA::m_nAutoHideToolBarSpacing"},{"content":"Specifies the gap between autohide toolbars.","pos":[28259,28303]},{"content":"Remarks","pos":[28366,28373]},{"pos":[28377,28465],"content":"The <ph id=\"ph1\">`AFX_GLOBAL_DATA::AFX_GLOBAL_DATA`</ph> constructor initializes this member to 14 pixels.","source":"The `AFX_GLOBAL_DATA::AFX_GLOBAL_DATA` constructor initializes this member to 14 pixels."},{"pos":[28532,28574],"content":"AFX_GLOBAL_DATA::m_nDragFrameThicknessDock"},{"content":"Specifies the thickness of the drag frame that is used to indicate the docked state.","pos":[28576,28660]},{"content":"Remarks","pos":[28722,28729]},{"pos":[28733,28820],"content":"The <ph id=\"ph1\">`AFX_GLOBAL_DATA::AFX_GLOBAL_DATA`</ph> constructor initializes this member to 3 pixels.","source":"The `AFX_GLOBAL_DATA::AFX_GLOBAL_DATA` constructor initializes this member to 3 pixels."},{"pos":[28888,28931],"content":"AFX_GLOBAL_DATA::m_nDragFrameThicknessFloat"},{"content":"Specifies the thickness of the drag frame that is used to indicate the floating state.","pos":[28932,29018]},{"content":"Remarks","pos":[29081,29088]},{"pos":[29092,29179],"content":"The <ph id=\"ph1\">`AFX_GLOBAL_DATA::AFX_GLOBAL_DATA`</ph> constructor initializes this member to 4 pixels.","source":"The `AFX_GLOBAL_DATA::AFX_GLOBAL_DATA` constructor initializes this member to 4 pixels."},{"pos":[29236,29268],"content":"AFX_GLOBAL_DATA::OnSettingChange"},{"content":"Detects the current state of the desktop's menu animation and taskbar autohide features.","pos":[29269,29357]},{"content":"Remarks","pos":[29409,29416]},{"content":"This method sets framework variables to the state of certain attributes of the user's desktop.","pos":[29420,29514]},{"content":"This method detects the current state of the menu animation, menu fade, and task bar autohide features.","pos":[29515,29618]},{"pos":[29679,29715],"content":"AFX_GLOBAL_DATA::RegisterWindowClass"},{"content":"Registers the specified MFC window class.","pos":[29716,29757]},{"content":"Parameters","pos":[29843,29853]},{"content":"[in]","pos":[29858,29862]},{"content":"The name of the window class to register.","pos":[29888,29929]},{"content":"Return Value","pos":[29939,29951]},{"pos":[29955,30129],"content":"The qualified name of the registered class if this method succeeds; otherwise, a <bpt id=\"p1\">[</bpt>resource exception<ept id=\"p1\">](http://msdn.microsoft.com/library/ddd99292-819b-4fa4-8371-b1954ed5856d)</ept>.","source":"The qualified name of the registered class if this method succeeds; otherwise, a [resource exception](http://msdn.microsoft.com/library/ddd99292-819b-4fa4-8371-b1954ed5856d)."},{"content":"Remarks","pos":[30139,30146]},{"content":"The return value is a colon-delimited list of the <ph id=\"ph1\">`lpszClassNamePrefix`</ph> parameter string, and the hexadecimal text representations of the handles of the current application instance; the application cursor, which is the arrow cursor whose identifier is IDC_ARROW; and the background brush.","pos":[30150,30439],"source":"The return value is a colon-delimited list of the `lpszClassNamePrefix` parameter string, and the hexadecimal text representations of the handles of the current application instance; the application cursor, which is the arrow cursor whose identifier is IDC_ARROW; and the background brush."},{"content":"For more information about registering MFC window classes, see <bpt id=\"p1\">[</bpt>AfxRegisterClass<ept id=\"p1\">](../../mfc/reference/application-information-and-management.md#afxregisterclass)</ept>.","pos":[30440,30602],"source":" For more information about registering MFC window classes, see [AfxRegisterClass](../../mfc/reference/application-information-and-management.md#afxregisterclass)."},{"content":"See Also","pos":[30611,30619]},{"content":"AfxRegisterClass","pos":[30626,30642]},{"content":"AfxThrowResourceException","pos":[30729,30754]},{"pos":[30870,30893],"content":"AFX_GLOBAL_DATA::Resume"},{"content":"Reinitializes internal function pointers that access methods that support Windows themes and visual styles.","pos":[30895,31002]},{"content":"Return Value","pos":[31044,31056]},{"content":"if this method succeeds; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","pos":[31067,31111],"source":" if this method succeeds; otherwise, `FALSE`."},{"content":"In debug mode, this method asserts if this method is unsuccessful.","pos":[31112,31178]},{"content":"Remarks","pos":[31188,31195]},{"pos":[31199,31341],"content":"This method is called when the framework receives the <bpt id=\"p1\">[</bpt>WM_POWERBROADCAST<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa373247)</ept> message.","source":"This method is called when the framework receives the [WM_POWERBROADCAST](http://msdn.microsoft.com/library/windows/desktop/aa373247) message."},{"pos":[31399,31432],"content":"AFX_GLOBAL_DATA::SetLayeredAttrib"},{"pos":[31433,31571],"content":"Provides a simple way to call the Windows <bpt id=\"p1\">[</bpt>SetLayeredWindowAttributes<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633540)</ept> method.","source":"Provides a simple way to call the Windows [SetLayeredWindowAttributes](http://msdn.microsoft.com/library/windows/desktop/ms633540) method."},{"content":"Parameters","pos":[31700,31710]},{"content":"[in]","pos":[31715,31719]},{"content":"Handle to the layered window.","pos":[31730,31759]},{"content":"[in]","pos":[31766,31770]},{"content":"The transparency color key that the <bpt id=\"p1\">[</bpt>Desktop Window Manager<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa969540)</ept> uses to compose the layered window.","pos":[31782,31938],"source":" The transparency color key that the [Desktop Window Manager](http://msdn.microsoft.com/library/windows/desktop/aa969540) uses to compose the layered window."},{"content":"[in]","pos":[31945,31949]},{"content":"The alpha value that is used to describe the opacity of the layered window.","pos":[31962,32037]},{"content":"[in]","pos":[32044,32048]},{"content":"A bitwise combination (OR) of flags that specify which method parameters to use.","pos":[32062,32142]},{"content":"Specify LWA_COLORKEY to use the <ph id=\"ph1\">`crKey`</ph> parameter as the transparency color.","pos":[32143,32219],"source":" Specify LWA_COLORKEY to use the `crKey` parameter as the transparency color."},{"content":"Specify LWA_ALPHA to use the <ph id=\"ph1\">`bAlpha`</ph> parameter to determine the opacity of the layered window.","pos":[32220,32315],"source":" Specify LWA_ALPHA to use the `bAlpha` parameter to determine the opacity of the layered window."},{"content":"Return Value","pos":[32325,32337]},{"pos":[32348,32392],"content":"if this method succeeds; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if this method succeeds; otherwise, `FALSE`."},{"content":"See Also","pos":[32401,32409]},{"content":"COLORREF","pos":[32415,32423]},{"content":"SetLayeredWindowAttributes","pos":[32490,32516]},{"pos":[32626,32654],"content":"AFX_GLOBAL_DATA::SetMenuFont"},{"content":"Creates the specified logical font.","pos":[32655,32690]},{"content":"Parameters","pos":[32780,32790]},{"content":"[in]","pos":[32795,32799]},{"content":"Pointer to a structure that contains the attributes of a font.","pos":[32815,32877]},{"content":"[in]","pos":[32884,32888]},{"content":"to specify that the text runs horizontally; <ph id=\"ph1\">`FALSE`</ph> to specify that the text runs vertically.","pos":[32907,33000],"source":" to specify that the text runs horizontally; `FALSE` to specify that the text runs vertically."},{"content":"Return Value","pos":[33010,33022]},{"content":"if this method succeeds; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","pos":[33033,33077],"source":" if this method succeeds; otherwise, `FALSE`."},{"content":"In debug mode, this method asserts if this method is unsuccessful.","pos":[33078,33144]},{"content":"Remarks","pos":[33154,33161]},{"content":"This method creates a horizontal regular font, an underlined font, and a bold font that is used in default menu items.","pos":[33165,33283]},{"content":"This method optionally creates a regular vertical font.","pos":[33284,33339]},{"content":"For more information about logical fonts, see <bpt id=\"p1\">[</bpt>CFont::CreateFontIndirect<ept id=\"p1\">](../../mfc/reference/cfont-class.md#cfont__createfontindirect)</ept>.","pos":[33340,33476],"source":" For more information about logical fonts, see [CFont::CreateFontIndirect](../../mfc/reference/cfont-class.md#cfont__createfontindirect)."},{"pos":[33529,33557],"content":"AFX_GLOBAL_DATA::UpdateFonts"},{"content":"Reintializes the logical fonts that are used by the framework.","pos":[33558,33620]},{"content":"Remarks","pos":[33668,33675]},{"pos":[33679,33753],"content":"For more information about logical fonts, see <ph id=\"ph1\">`CFont::CreateFontIndirect`</ph>.","source":"For more information about logical fonts, see `CFont::CreateFontIndirect`."},{"pos":[33810,33842],"content":"AFX_GLOBAL_DATA::UpdateSysColors"},{"content":"Initializes the colors, color depth, brushes, pens, and images that are used by the framework.","pos":[33843,33937]},{"pos":[34032,34060],"content":"AFX_GLOBAL_DATA::bIsWindows7"},{"content":"Indicates whether the application is being executed under Windows 7 or higher.","pos":[34061,34139]},{"pos":[34243,34284],"content":"AFX_GLOBAL_DATA::clrActiveCaptionGradient"},{"content":"Specifies the gradient color of the active caption.","pos":[34285,34336]},{"content":"Generally used for docking panes.","pos":[34337,34370]},{"pos":[34493,34536],"content":"AFX_GLOBAL_DATA::clrInactiveCaptionGradient"},{"content":"Specifies the gradient color of the inactive caption.","pos":[34537,34590]},{"content":"Generally used for docking panes.","pos":[34591,34624]},{"pos":[34738,34770],"content":"AFX_GLOBAL_DATA::GetITaskbarList"},{"pos":[34771,34851],"content":"Creates and stores in the global data a pointer to the <ph id=\"ph1\">`ITaskBarList`</ph> interface.","source":"Creates and stores in the global data a pointer to the `ITaskBarList` interface."},{"content":"Return Value","pos":[34912,34924]},{"pos":[34928,35101],"content":"A pointer to the <ph id=\"ph1\">`ITaskbarList`</ph> interface if creation of a task bar list object succeeds; <ph id=\"ph2\">`NULL`</ph> if creation fails or if the current Operation System is less than Windows 7.","source":"A pointer to the `ITaskbarList` interface if creation of a task bar list object succeeds; `NULL` if creation fails or if the current Operation System is less than Windows 7."},{"pos":[35159,35192],"content":"AFX_GLOBAL_DATA::GetITaskbarList3"},{"pos":[35193,35274],"content":"Creates and stores in the global data a pointer to the <ph id=\"ph1\">`ITaskBarList3`</ph> interface.","source":"Creates and stores in the global data a pointer to the `ITaskBarList3` interface."},{"content":"Return Value","pos":[35337,35349]},{"pos":[35353,35527],"content":"A pointer to the <ph id=\"ph1\">`ITaskbarList3`</ph> interface if creation of a task bar list object succeeds; <ph id=\"ph2\">`NULL`</ph> if creation fails or if the current Operation System is less than Windows 7.","source":"A pointer to the `ITaskbarList3` interface if creation of a task bar list object succeeds; `NULL` if creation fails or if the current Operation System is less than Windows 7."},{"pos":[35589,35626],"content":"AFX_GLOBAL_DATA::GetShellAutohideBars"},{"content":"Determines positions of Shell auto hide bars.","pos":[35627,35672]},{"content":"Return Value","pos":[35728,35740]},{"content":"An integer value with encoded flags that specify positions of auto hide bars.","pos":[35744,35821]},{"content":"It may combine the following values: AFX_AUTOHIDE_BOTTOM, AFX_AUTOHIDE_TOP, AFX_AUTOHIDE_LEFT, AFX_AUTOHIDE_RIGHT.","pos":[35822,35936]},{"pos":[35996,36031],"content":"AFX_GLOBAL_DATA::ReleaseTaskBarRefs"},{"pos":[36032,36122],"content":"Releases interfaces obtained through the <ph id=\"ph1\">`GetITaskbarList`</ph> and <ph id=\"ph2\">`GetITaskbarList3`</ph> methods.","source":"Releases interfaces obtained through the `GetITaskbarList` and `GetITaskbarList3` methods."},{"pos":[36239,36286],"content":"AFX_GLOBAL_DATA::ShellCreateItemFromParsingName"},{"content":"Creates and initializes a Shell item object from a parsing name.","pos":[36287,36351]},{"content":"Parameters","pos":[36498,36508]},{"content":"[in] A pointer to a display name.","pos":[36526,36559]},{"content":"A pointer to a bind context that controls the parsing operation.","pos":[36575,36639]},{"content":"A reference to an interface ID.","pos":[36656,36687]},{"content":"[out] When this function returns, contains the interface pointer requested in <ph id=\"ph1\">`riid`</ph>.","pos":[36703,36788],"source":" [out] When this function returns, contains the interface pointer requested in `riid`."},{"content":"This will typically be <ph id=\"ph1\">`IShellItem`</ph> or <ph id=\"ph2\">`IShellItem2`</ph>.","pos":[36789,36842],"source":" This will typically be `IShellItem` or `IShellItem2`."},{"content":"Return Value","pos":[36852,36864]},{"content":"Returns S_OK if successful; an error value otherwise.","pos":[36868,36921]}],"content":"---\ntitle: \"AFX_GLOBAL_DATA Structure | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"GLOBAL_DATA\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"AFX_GLOBAL_DATA structure\"\n  - \"AFX_GLOBAL_DATA constructor\"\nms.assetid: c7abf2fb-ad5e-4336-a01d-260c29ed53a2\ncaps.latest.revision: 30\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# AFX_GLOBAL_DATA Structure\nThe `AFX_GLOBAL_DATA` structure contains fields and methods that are used to manage the framework or customize the appearance and behavior of your application.  \n  \n## Syntax  \n  \n```  \nstruct AFX_GLOBAL_DATA  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`AFX_GLOBAL_DATA::AFX_GLOBAL_DATA`|Constructs a `AFX_GLOBAL_DATA` structure.|  \n|`AFX_GLOBAL_DATA::~AFX_GLOBAL_DATA`|Destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[AFX_GLOBAL_DATA::CleanUp](#afx_global_data__cleanup)|Releases resources that are allocated by the framework, such as brushes, fonts, and DLLs.|  \n|[AFX_GLOBAL_DATA::D2D1MakeRotateMatrix](#afx_global_data__d2d1makerotatematrix)|Creates a rotation transformation that rotates by a specified angle around a specified point.|  \n|[AFX_GLOBAL_DATA::DrawParentBackground](#afx_global_data__drawparentbackground)|Draws the background of a control's parent in the specified area.|  \n|[AFX_GLOBAL_DATA::DrawTextOnGlass](#afx_global_data__drawtextonglass)|Draws the specified text in the visual style of the specified theme.|  \n|[AFX_GLOBAL_DATA::ExcludeTag](#afx_global_data__excludetag)|Removes the specified XML tag pair from a specified buffer.|  \n|[AFX_GLOBAL_DATA::GetColor](#afx_global_data__getcolor)|Retrieves the current color of the specified user interface element.|  \n|[AFX_GLOBAL_DATA::GetDirect2dFactory](#afx_global_data__getdirect2dfactory)|Returns a pointer to the `ID2D1Factory` interface that is stored in the global data. If the interface is not initialized, it is created and has the default parameters.|  \n|[AFX_GLOBAL_DATA::GetHandCursor](#afx_global_data__gethandcursor)|Retrieves the predefined cursor that resembles a hand and whose identifier is `IDC_HAND`.|  \n|[AFX_GLOBAL_DATA::GetITaskbarList](#afx_global_data__getitaskbarlist)|Creates and stores in the global data a pointer to ITaskBarList interface.|  \n|[AFX_GLOBAL_DATA::GetITaskbarList3](#afx_global_data__getitaskbarlist3)|Creates and stores in the global data a pointer to ITaskBarList3 interface.|  \n|[AFX_GLOBAL_DATA::GetNonClientMetrics](#afx_global_data__getnonclientmetrics)|Retrieves the metrics associated with the nonclient area of nonminimized windows.|  \n|[AFX_GLOBAL_DATA::GetShellAutohideBars](#afx_global_data__getshellautohidebars)|Determines positions of Shell auto hide bars.|  \n|[AFX_GLOBAL_DATA::GetTextHeight](#afx_global_data__gettextheight)|Retrieves the height of text characters in the current font.|  \n|[AFX_GLOBAL_DATA::GetWICFactory](#afx_global_data__getwicfactory)|Returns a pointer to the `IWICImagingFactory` interface that is stored in the global data. If the interface is not initialized, it is created and has the default parameters.|  \n|[AFX_GLOBAL_DATA::GetWriteFactory](#afx_global_data__getwritefactory)|Returns a pointer to the `IDWriteFactory` interface that is stored in the global data. If the interface is not initialized, it is created and has the default parameters.|  \n|[AFX_GLOBAL_DATA::IsD2DInitialized](#afx_global_data__isd2dinitialized)|Initializes `D2D`, `DirectWrite`, and `WIC` factories. Call this method before the main window is initialized.|  \n|[AFX_GLOBAL_DATA::Is32BitIcons](#afx_global_data__is32biticons)|Indicates whether predefined 32-bit icons are supported.|  \n|[AFX_GLOBAL_DATA::IsD2DInitialized](#afx_global_data__isd2dinitialized)|Determines whether the `D2D` was initialized.|  \n|[AFX_GLOBAL_DATA::IsDwmCompositionEnabled](#afx_global_data__isdwmcompositionenabled)|Provides a simple way to call the Windows [DwmIsCompositionEnabled](http://msdn.microsoft.com/library/windows/desktop/aa969518) method.|  \n|[AFX_GLOBAL_DATA::IsHighContrastMode](#afx_global_data__ishighcontrastmode)|Indicates whether images are currently displayed in high contrast.|  \n|[AFX_GLOBAL_DATA::OnSettingChange](#afx_global_data__onsettingchange)|Detects the current state of the desktop's menu animation and taskbar autohide features.|  \n|[AFX_GLOBAL_DATA::RegisterWindowClass](#afx_global_data__registerwindowclass)|Registers the specified MFC window class.|  \n|[AFX_GLOBAL_DATA::ReleaseTaskBarRefs](#afx_global_data__releasetaskbarrefs)|Releases interfaces obtained through GetITaskbarList and GetITaskbarList3 methods.|  \n|[AFX_GLOBAL_DATA::Resume](#afx_global_data__resume)|Reinitializes internal function pointers that access methods that support Windows [themes and visual styles](https://msdn.microsoft.com/library/windows/desktop/hh270423.aspx).|  \n|[AFX_GLOBAL_DATA::SetLayeredAttrib](#afx_global_data__setlayeredattrib)|Provides a simple way to call the Windows [SetLayeredWindowAttributes](http://msdn.microsoft.com/library/windows/desktop/ms633540) method.|  \n|[AFX_GLOBAL_DATA::SetMenuFont](#afx_global_data__setmenufont)|Creates the specified logical font.|  \n|[AFX_GLOBAL_DATA::ShellCreateItemFromParsingName](#afx_global_data__shellcreateitemfromparsingname)|Creates and initializes a Shell item object from a parsing name.|  \n|[AFX_GLOBAL_DATA::UpdateFonts](#afx_global_data__updatefonts)|Reintializes the logical fonts that are used by the framework.|  \n|[AFX_GLOBAL_DATA::UpdateSysColors](#afx_global_data__updatesyscolors)|Initializes the colors, color depth, brushes, pens, and images that are used by the framework.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[AFX_GLOBAL_DATA::EnableAccessibilitySupport](#afx_global_data__enableaccessibilitysupport)|Enables or disables Microsoft Active Accessibility support. Active Accessibility provides reliable methods for exposing information about user interface elements.|  \n|[AFX_GLOBAL_DATA::IsAccessibilitySupport](#afx_global_data__isaccessibilitysupport)|Indicates whether Microsoft Active Accessibility support is enabled.|  \n|[AFX_GLOBAL_DATA::IsWindowsLayerSupportAvailable](#afx_global_data__iswindowslayersupportavailable)|Indicates whether the operating system supports layered windows.|  \n  \n### Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[AFX_GLOBAL_DATA::bIsOSAlphaBlendingSupport](#afx_global_data__bisosalphablendingsupport)|Indicates whether the current operating system supports alpha blending.|  \n|[AFX_GLOBAL_DATA::bIsWindows7](#afx_global_data__biswindows7)|Indicates whether the application is being executed under Windows 7 OS or higher|  \n|[AFX_GLOBAL_DATA::clrActiveCaptionGradient](#afx_global_data__clractivecaptiongradient)|Specifies gradient color of active caption. Generally used for docking panes.|  \n|[AFX_GLOBAL_DATA::clrInactiveCaptionGradient](#afx_global_data__clrinactivecaptiongradient)|Specifies gradient color of inactive active caption. Generally used for docking panes.|  \n|[AFX_GLOBAL_DATA::m_bUseBuiltIn32BitIcons](#afx_global_data__m_busebuiltin32biticons)|Indicates whether the framework uses predefined 32-bit color icons or icons of a lower resolution.|  \n|[AFX_GLOBAL_DATA::m_bUseSystemFont](#afx_global_data__m_busesystemfont)|Indicates whether a system font is used for menus, toolbars, and ribbons.|  \n|[AFX_GLOBAL_DATA::m_hcurHand](#afx_global_data__m_hcurhand)|Stores the handle for the hand cursor.|  \n|[AFX_GLOBAL_DATA::m_hcurStretch](#afx_global_data__m_hcurstretch)|Stores the handle for the horizontal stretch cursor.|  \n|[AFX_GLOBAL_DATA::m_hcurStretchVert](#afx_global_data__m_hcurstretchvert)|Stores the handle for the vertical stretch cursor.|  \n|[AFX_GLOBAL_DATA::m_hiconTool](#afx_global_data__m_hicontool)|Stores the handle for the tool icon.|  \n|[AFX_GLOBAL_DATA::m_nAutoHideToolBarMargin](#afx_global_data__m_nautohidetoolbarmargin)|Specifies the offset from the leftmost autohide toolbar to the left side of the docking bar.|  \n|[AFX_GLOBAL_DATA::m_nAutoHideToolBarSpacing](#afx_global_data__m_nautohidetoolbarspacing)|Specifies the gap between autohide toolbars.|  \n|[AFX_GLOBAL_DATA::m_nDragFrameThicknessDock](#afx_global_data__m_ndragframethicknessdock)|Specifies the thickness of the drag frame that is used to communicate the docked state.|  \n|[AFX_GLOBAL_DATA::m_nDragFrameThicknessFloat](#afx_global_data__m_ndragframethicknessfloat)|Specifies the thickness of the drag frame that is used to communicate the floating state.|  \n  \n### Remarks  \n Most of the data in the `AFX_GLOBAL_DATA` structure is initialized when your application starts.  \n  \n### Inheritance Hierarchy  \n [AFX_GLOBAL_DATA](../../mfc/reference/afx-global-data-structure.md)  \n  \n### Requirements  \n **Header:** afxglobals.h  \n  \n### See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Structures, Styles, Callbacks, and Message Maps](../../mfc/reference/structures-styles-callbacks-and-message-maps.md)\n\n\n## <a name=\"afx_global_data__bisosalphablendingsupport\"></a> AFX_GLOBAL_DATA::bIsOSAlphaBlendingSupport\nIndicates whether the operating system supports alpha blending.  \n  \n  \n```  \nBOOL  bIsOSAlphaBlendingSupport;  \n```  \n  \n### Remarks  \n `TRUE` indicates alpha blending is supported; otherwise, `FALSE`.  \n  \n\n## <a name=\"afx_global_data__cleanup\"></a> AFX_GLOBAL_DATA::CleanUp\nReleases resources that are allocated by the framework, such as brushes, fonts, and DLLs.  \n  \n  \n```  \nvoid CleanUp();\n```  \n## <a name=\"afx_global_data__d2d1makerotatematrix\"></a> AFX_GLOBAL_DATA::D2D1MakeRotateMatrix\nCreates a rotation transformation that rotates by a specified angle around a specified point.  \n  \n  \n```  \nHRESULT D2D1MakeRotateMatrix(\n    FLOAT angle,  \n    D2D1_POINT_2F center,  \n    D2D1_MATRIX_3X2_F *matrix);\n```  \n  \n### Parameters   \n `angle`  \n The clockwise rotation angle, in degrees.  \n  \n `center`  \n The point about which to rotate.  \n  \n `matrix`  \n When this method returns, contains the new rotation transformation. You must allocate storage for this parameter.  \n  \n### Return Value  \n Returns S_OK if successful, or an error value otherwise.  \n  \n## <a name=\"afx_global_data__drawparentbackground\"></a> AFX_GLOBAL_DATA::DrawParentBackground\nDraws the background of a control's parent in the specified area.  \n  \n  \n```  \nBOOL DrawParentBackground(\n    CWnd* pWnd,   \n    CDC* pDC,   \n    LPRECT lpRect = NULL);\n```  \n  \n### Parameters   \n [in] `pWnd`  \n Pointer to a control's window.  \n  \n [in] `pDC`  \n Pointer to a device context.  \n  \n [in] `lpRect`  \n Pointer to a rectangle that bounds the area to draw. The default value is `NULL`.  \n  \n### Return Value  \n `TRUE` if this method is successful; otherwise, `FALSE`.  \n  \n## <a name=\"afx_global_data__drawtextonglass\"></a> AFX_GLOBAL_DATA::DrawTextOnGlass\nDraws the specified text in the visual style of the specified theme.  \n  \n  \n```  \nBOOL DrawTextOnGlass(\n    HTHEME hTheme,   \n    CDC* pDC,   \n    int iPartId,   \n    int iStateId,   \n    CString strText,   \n    CRect rect,   \n    DWORD dwFlags,   \n    int nGlowSize = 0,   \n    COLORREF clrText = (COLORREF)-1);\n```  \n  \n### Parameters   \n [in] `hTheme`  \n Handle to the theme data of a window, or `NULL`. The framework uses the specified theme to draw the text if this parameter is not `NULL` and themes are supported. Otherwise, the framework does not use a theme to draw the text.  \n  \n Use the [OpenThemeData](http://msdn.microsoft.com/library/windows/desktop/bb759821) method to create an `HTHEME`.  \n  \n [in] `pDC`  \n Pointer to a device context.  \n  \n [in] `iPartId`  \n The control part that has the desired text appearance. For more information, see the Parts column of the table in [Parts and States](http://msdn.microsoft.com/library/windows/desktop/bb773210). If this value is 0, the text is drawn in the default font, or a font selected into the device context.  \n  \n [in] `iStateId`  \n The control state that has the desired text appearance. For more information, see the States column of the table in [Parts and States](http://msdn.microsoft.com/library/windows/desktop/bb773210).  \n  \n [in] `strText`  \n The text to draw.  \n  \n [in] `rect`  \n The boundary of the area in which the specified text is drawn.  \n  \n [in] `dwFlags`  \n A bitwise combination (OR) of flags that specify how the specified text is drawn.  \n  \n If the `hTheme` parameter is `NULL` or if themes are not supported and enabled, the `nFormat` parameter of the [CDC::DrawText](../../mfc/reference/cdc-class.md#cdc__drawtext) method describes the valid flags. If themes are supported, the `dwFlags` parameter of the [DrawThemeTextEx](http://msdn.microsoft.com/library/windows/desktop/bb773317) method describes the valid flags.  \n  \n [in] `nGlowSize`  \n The size of a glow effect that is drawn on the background before drawing the specified text. The default value is 0.  \n  \n [in] `clrText`  \n The color in which the specified text is drawn. The default value is the default color.  \n  \n### Return Value  \n `TRUE` if a theme is used to draw the specified text; otherwise, `FALSE`.  \n  \n### Remarks  \n A theme defines the visual style of an application. A theme is not used to draw the text if the `hTheme` parameter is `NULL`, or if the [DrawThemeTextEx](http://msdn.microsoft.com/library/windows/desktop/bb773317) method is not supported, or if [Desktop Window Manager](http://msdn.microsoft.com/library/windows/desktop/aa969540) (DWM) composition is disabled.  \n  \n \n## See Also  \n [AFX_GLOBAL_DATA Structure](../../mfc/reference/afx-global-data-structure.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449)   \n [Parts and States](http://msdn.microsoft.com/library/windows/desktop/bb773210)   \n [CDC::DrawText](../../mfc/reference/cdc-class.md#cdc__drawtext)   \n [DrawThemeTextEx](http://msdn.microsoft.com/library/windows/desktop/bb773317)   \n [Desktop Window Manager](http://msdn.microsoft.com/library/windows/desktop/aa969540)   \n [Enable and Control DWM Composition](http://msdn.microsoft.com/library/windows/desktop/aa969538)\n\n## <a name=\"afx_global_data__enableaccessibilitysupport\"></a> AFX_GLOBAL_DATA::EnableAccessibilitySupport\nEnables or disables Microsoft Active Accessibility support.  \n  \n  \n```  \nvoid EnableAccessibilitySupport(BOOL bEnable=TRUE);\n```  \n  \n### Parameters   \n [in] `bEnable`  \n `TRUE` to enable accessibility support; `FALSE` to disable accessibility support. The default value is `TRUE`.  \n  \n### Remarks  \n Active Accessibility is a COM-based technology that improves the way programs and the Windows operating system work together with assistive technology products. It provides reliable methods for exposing information about user interface elements. However, a newer accessibility model called Microsoft UI Automation is now available. For a comparison of the two technologies, see [UI Automation and Microsoft Active Accessibility](http://msdn.microsoft.com/library/87bee662-0a3e-4232-a421-20e7a5968321).  \n  \n Use the [AFX_GLOBAL_DATA::IsAccessibilitySupport](#afx_global_data__isaccessibilitysupport) method to determine whether Microsoft Active Accessibility support is enabled.  \n  \n \n## See Also  \n [UI Automation and Microsoft Active Accessibility](http://msdn.microsoft.com/library/87bee662-0a3e-4232-a421-20e7a5968321)   \n [AFX_GLOBAL_DATA::IsAccessibilitySupport](#afx_global_data__isaccessibilitysupport)\n\n## <a name=\"afx_global_data__excludetag\"></a> AFX_GLOBAL_DATA::ExcludeTag\nRemoves the specified XML tag pair from a specified buffer.  \n  \n  \n```  \nBOOL ExcludeTag(\n    CString& strBuffer,  \n    LPCTSTR lpszTag,  \n    CString& strTag,  \n    BOOL bIsCharsList = FALSE);\n```  \n  \n### Parameters   \n [in] `strBuffer`  \n A buffer of text.  \n  \n [in] `lpszTag`  \n The name of a pair of opening and closing XML tags.  \n  \n [out] `strTag`  \n When this method returns, the `strTag` parameter contains the text that is between the opening and closing XML tags that are named by the `lpszTag` parameter. Any leading or trailing whitespace is trimmed from the result.  \n  \n [in] `bIsCharsList`  \n `TRUE` to convert symbols for escape characters in the `strTag` parameter into actual escape characters; `FALSE` not to perform the conversion.The default value is `FALSE`. For more information, see Remarks.  \n  \n### Return Value  \n `TRUE` if this method is successful; otherwise, `FALSE`.  \n  \n### Remarks  \n An XML tag pair consists of named opening and closing tags that indicate the start and end of a run of text in the specified buffer. The `strBuffer` parameter specifies the buffer, and the `lpszTag` parameter specifies the name of the XML tags.  \n  \n Use the symbols in the following table to encode a set of escape characters in the specified buffer. Specify `TRUE` for the `bIsCharsList` parameter to convert the symbols in the `strTag` parameter into actual escape characters. The following table uses the [_T()](../../c-runtime-library/data-type-mappings.md) macro to specify the symbol and escape character strings.  \n  \n|Symbol|Escape character|  \n|------------|----------------------|  \n|_T(\"\\\\\\t\")|_T(\"\\t\")|  \n|_T(\"\\\\\\n\")|_T(\"\\n\")|  \n|_T(\"\\\\\\r\")|_T(\"\\r\")|  \n|_T(\"\\\\\\b\")|_T(\"\\b\")|  \n|_T(\"LT\")|_T(\"\\<\")|  \n|_T(\"GT\")|_T(\">\")|  \n|_T(\"AMP\")|_T(\"&\")|  \n  \n## <a name=\"afx_global_data__getcolor\"></a> AFX_GLOBAL_DATA::GetColor\nRetrieves the current color of the specified user interface element.  \n  \n  \n```  \nCOLORREF GetColor(int nColor);\n```  \n  \n### Parameters   \n [in] `nColor`  \n A value that specifies a user interface element whose color is retrieved. For a list of valid values, see the `nIndex` parameter of the [GetSysColor](http://msdn.microsoft.com/library/windows/desktop/ms724371) method.  \n  \n### Return Value  \n The RGB color value of the specified user interface element. For more information, see Remarks.  \n  \n### Remarks  \n If the `nColor` parameter is out of range, the return value is zero. Because zero is also a valid RGB value, you cannot use this method to determine whether a system color is supported by the current operating system. Instead, use the [GetSysColorBrush](http://msdn.microsoft.com/library/windows/desktop/dd144927) method, which returns `NULL` if the color is not supported.  \n  \n## See Also  \n\n [GetSysColor Function](http://msdn.microsoft.com/library/windows/desktop/ms724371)   \n [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449)   \n [GetSysColorBrush](http://msdn.microsoft.com/library/windows/desktop/dd144927)\n\n## <a name=\"afx_global_data__getdirect2dfactory\"></a> AFX_GLOBAL_DATA::GetDirect2dFactory\n Returns a pointer to the ID2D1Factory interface that is stored in the global data. If the interface is not initialized, it is created and has the default parameters.  \n  \n  \n```  \nID2D1Factory* GetDirect2dFactory();\n```  \n  \n### Return Value  \n A pointer to ID2D1Factory interface if creation of a factory succeeds, or NULL if creation fails or current Operation System don't have D2D support.  \n  \n## <a name=\"afx_global_data__gethandcursor\"></a>  AFX_GLOBAL_DATA::GetHandCursor\nRetrieves the predefined cursor that resembles a hand and whose identifier is `IDC_HAND`.  \n  \n  \n```  \nHCURSOR GetHandCursor();\n```  \n  \n### Return Value  \n The handle of the hand cursor.  \n\n## <a name=\"afx_global_data__getnonclientmetrics\"></a> AFX_GLOBAL_DATA::GetNonClientMetrics\nRetrieves the metrics associated with the nonclient area of nonminimized windows.  \n  \n  \n```  \nBOOL GetNonClientMetrics(NONCLIENTMETRICS& info);\n```  \n  \n### Parameters   \n [in, out] `info`  \n A [NONCLIENTMETRICS](http://msdn.microsoft.com/library/windows/desktop/ff729175) structure that contains the scalable metrics associated with the nonclient area of a nonminimized window.  \n  \n### Return Value  \n `TRUE` if this method succeeds; otherwise, `FALSE`.  \n \n  \n## See Also   \n [NONCLIENTMETRICS Structure](http://msdn.microsoft.com/library/windows/desktop/ff729175)\n\n## <a name=\"afx_global_data__gettextheight\"></a> AFX_GLOBAL_DATA::GetTextHeight\n Retrieves the height of text characters in the current font.  \n  \n  \n```  \nint GetTextHeight(BOOL bHorz = TRUE);\n```  \n  \n### Parameters   \n [in] `bHorz`  \n `TRUE` to retrieve the height of characters when text runs horizontally; `FALSE` to retrieve the height of characters when text runs vertically. The default value is `TRUE`.  \n  \n### Return Value  \n The height of the current font, which is measured from its ascender to its descender.  \n  \n## <a name=\"afx_global_data__getwicfactory\"></a> AFX_GLOBAL_DATA::GetWICFactory\nReturns a pointer to the IWICImagingFactory interface that is stored in the global data. If the interface is not initialized, it is created and has the default parameters.  \n  \n  \n```  \nIWICImagingFactory* GetWICFactory();\n```  \n  \n### Return Value  \n A pointer to IWICImagingFactory interface if creation of a factory succeeds, or NULL if creation fails or current Operation System don't have WIC support.  \n  \n## <a name=\"afx_global_data__getwritefactory\"></a> AFX_GLOBAL_DATA::GetWriteFactory\nReturns a pointer to the IDWriteFactory interface that is stored in the global data. If the interface is not initialized, it is created and has the default parameters.  \n  \n  \n```  \nIDWriteFactory* GetWriteFactory();\n```  \n  \n### Return Value  \n A pointer to IDWriteFactory interface if creation of a factory succeeds, or NULL if creation fails or current Operation System don't have DirectWrite support.  \n \n## <a name=\"afx_global_data__initd2d\"></a> AFX_GLOBAL_DATA::InitD2D\nInitializes D2D, DirectWrite, and WIC factories. Call this method before the main window is initialized.  \n  \n  \n```  \nBOOL InitD2D(\n    D2D1_FACTORY_TYPE d2dFactoryType = D2D1_FACTORY_TYPE_SINGLE_THREADED,  \n    DWRITE_FACTORY_TYPE writeFactoryType = DWRITE_FACTORY_TYPE_SHARED);\n```  \n  \n### Parameters   \n `d2dFactoryType`  \n The threading model of the D2D factory and the resources it creates.  \n  \n `writeFactoryType`  \n A value that specifies whether the write factory object will be shared or isolated  \n  \n### Return Value  \n Returns TRUE if the factories were intilalizrd, FALSE - otherwise  \n  \n## <a name=\"afx_global_data__is32biticons\"></a> AFX_GLOBAL_DATA::Is32BitIcons\nIndicates whether predefined 32-bit icons are supported.  \n  \n  \n```  \nBOOL Is32BitIcons() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if predefined 32-bit icons are supported; otherwise, `FALSE`.  \n  \n### Remarks  \n This method returns `TRUE` if the framework supports 32-bit built-in icons, and if the operating system supports 16 bits per pixel or more, and if images are not displayed in high contrast.  \n  \n## <a name=\"afx_global_data__isaccessibilitysupport\"></a> AFX_GLOBAL_DATA::IsAccessibilitySupport\nIndicates whether Microsoft Active Accessibility support is enabled.  \n  \n  \n```  \nBOOL IsAccessibilitySupport() const; \n```  \n  \n### Return Value  \n `TRUE` if accessibility support is enabled; otherwise, `FALSE`.  \n  \n### Remarks  \n Microsoft Active Accessibility was the earlier solution for making applications accessible. Microsoft UI Automation is the new accessibility model for Microsoft Windows and is intended to address the needs of assistive technology products and automated testing tools. For more information, see [UI Automation and Microsoft Active Accessibility](http://msdn.microsoft.com/library/87bee662-0a3e-4232-a421-20e7a5968321).  \n  \n Use the [AFX_GLOBAL_DATA::EnableAccessibilitySupport](#afx_global_data__enableaccessibilitysupport) method to enable or disable Active Accessibility support.  \n  \n\n## See Also  \n [UI Automation and Microsoft Active Accessibility](http://msdn.microsoft.com/library/87bee662-0a3e-4232-a421-20e7a5968321)\n\n## <a name=\"afx_global_data__isd2dinitialized\"></a> AFX_GLOBAL_DATA::IsD2DInitialized\n Determines whether the D2D was initialized  \n  \n  \n```  \nBOOL IsD2DInitialized() const; \n```  \n  \n### Return Value  \n TRUE if D2D was initialized; otherwise FALSE.  \n  \n## <a name=\"afx_global_data__isdwmcompositionenabled\"></a> AFX_GLOBAL_DATA::IsDwmCompositionEnabled\nProvides a simple way to call the Windows [DwmIsCompositionEnabled](http://msdn.microsoft.com/library/windows/desktop/aa969518) method.  \n  \n  \n```  \nBOOL IsDwmCompositionEnabled();\n```  \n  \n### Return Value  \n `TRUE` if [Desktop Window Manager](http://msdn.microsoft.com/library/windows/desktop/aa969540) (DWM) composition is enabled; otherwise, `FALSE`.  \n  \n## See Also    \n [Desktop Window Manager](http://msdn.microsoft.com/library/windows/desktop/aa969540)   \n [Enable and Control DWM Composition](http://msdn.microsoft.com/library/windows/desktop/aa969538)\n\n## <a name=\"afx_global_data__ishighcontrastmode\"></a> AFX_GLOBAL_DATA::IsHighContrastMode\n Indicates whether images are currently displayed in high contrast.    \n```  \nBOOL IsHighContrastMode() const; \n```  \n  \n### Return Value  \n `TRUE` if images are currently displayed in black or white high contrast mode; otherwise, `FALSE`.  \n  \n### Remarks  \n In black high contrast mode, edges facing the light are white and the background is black. In white high contrast mode, edges facing the light are black and the background is white.  \n  \n## <a name=\"afx_global_data__iswindowslayersupportavailable\"></a> AFX_GLOBAL_DATA::IsWindowsLayerSupportAvailable\nIndicates whether the operating system supports layered windows.  \n  \n  \n```  \nBOOL IsWindowsLayerSupportAvailable() const; \n```  \n  \n### Return Value  \n `TRUE` if layered windows are supported; otherwise, `FALSE`.  \n  \n### Remarks  \n If layered windows are supported, *smart docking* markers use layered windows.  \n  \n## <a name=\"afx_global_data__m_busebuiltin32biticons\"></a> AFX_GLOBAL_DATA::m_bUseBuiltIn32BitIcons\nIndicates whether the framework uses predefined 32-bit color icons or icons of a lower resolution.  \n  \n  \n```  \nBOOL  m_bUseBuiltIn32BitIcons;  \n```  \n  \n### Remarks  \n `TRUE` specifies that the framework use 32-bit color icons; `FALSE` specifies lower resolution icons. The `AFX_GLOBAL_DATA::AFX_GLOBAL_DATA` constructor initializes this member to `TRUE`.  \n  \n This member must be set at application startup.  \n  \n## <a name=\"afx_global_data__m_busesystemfont\"></a> AFX_GLOBAL_DATA::m_bUseSystemFont\nIndicates whether a system font is used for menus, toolbars, and ribbons.  \n  \n  \n```  \nBOOL m_bUseSystemFont;  \n```  \n  \n### Remarks  \n `TRUE` specifies to use a system font; otherwise, `FALSE`. The `AFX_GLOBAL_DATA::AFX_GLOBAL_DATA` constructor initializes this member to `FALSE`.  \n  \n Testing this member is not the only way for the framework to determine the font to use. The `AFX_GLOBAL_DATA::UpdateFonts` method also tests default and alternative fonts to determine what visual styles are available to be applied to menus, toolbars, and ribbons.  \n  \n## <a name=\"afx_global_data__m_hcurhand\"></a> AFX_GLOBAL_DATA::m_hcurHand\nStores the handle for the hand cursor.  \n  \n  \n```  \nHCURSOR m_hcurHand;  \n```  \n  \n## <a name=\"afx_global_data__m_hcurstretch\"></a> AFX_GLOBAL_DATA::m_hcurStretch\nStores the handle for the horizontal stretch cursor.  \n  \n  \n```  \nHCURSOR m_hcurStretch;  \n```  \n\n## <a name=\"afx_global_data__m_hcurstretchvert\"></a> AFX_GLOBAL_DATA::m_hcurStretchVert\nStores the handle for the vertical stretch cursor.  \n  \n  \n```  \nHCURSOR m_hcurStretchVert;  \n```  \n  \n## <a name=\"afx_global_data__m_hicontool\"></a> AFX_GLOBAL_DATA::m_hiconTool\nStores the handle for the tool icon.  \n  \n  \n```  \nHICON m_hiconTool;  \n```  \n## <a name=\"afx_global_data__m_nautohidetoolbarmargin\"></a> AFX_GLOBAL_DATA::m_nAutoHideToolBarMargin\nSpecifies the offset from the leftmost autohide toolbar to the left side of the dock bar.  \n  \n  \n```  \nint  m_nAutoHideToolBarMargin;  \n```  \n  \n### Remarks  \n The `AFX_GLOBAL_DATA::AFX_GLOBAL_DATA` constructor initializes this member to 4 pixels.  \n  \n## <a name=\"afx_global_data__m_nautohidetoolbarspacing\"></a> AFX_GLOBAL_DATA::m_nAutoHideToolBarSpacing\nSpecifies the gap between autohide toolbars.  \n  \n  \n```  \nint   m_nAutoHideToolBarSpacing;  \n```  \n  \n### Remarks  \n The `AFX_GLOBAL_DATA::AFX_GLOBAL_DATA` constructor initializes this member to 14 pixels.  \n  \n## <a name=\"afx_global_data__m_ndragframethicknessdock\"></a> AFX_GLOBAL_DATA::m_nDragFrameThicknessDock\n\nSpecifies the thickness of the drag frame that is used to indicate the docked state.  \n  \n  \n```  \nint  m_nDragFrameThicknessDock;  \n```  \n  \n### Remarks  \n The `AFX_GLOBAL_DATA::AFX_GLOBAL_DATA` constructor initializes this member to 3 pixels.  \n  \n## <a name=\"afx_global_data__m_ndragframethicknessfloat\"></a> AFX_GLOBAL_DATA::m_nDragFrameThicknessFloat\nSpecifies the thickness of the drag frame that is used to indicate the floating state.  \n  \n  \n```  \nint  m_nDragFrameThicknessFloat;  \n```  \n  \n### Remarks  \n The `AFX_GLOBAL_DATA::AFX_GLOBAL_DATA` constructor initializes this member to 4 pixels.  \n  \n## <a name=\"afx_global_data__onsettingchange\"></a> AFX_GLOBAL_DATA::OnSettingChange\nDetects the current state of the desktop's menu animation and taskbar autohide features.  \n  \n  \n```  \nvoid OnSettingChange();\n```  \n  \n### Remarks  \n This method sets framework variables to the state of certain attributes of the user's desktop. This method detects the current state of the menu animation, menu fade, and task bar autohide features.  \n  \n## <a name=\"afx_global_data__registerwindowclass\"></a> AFX_GLOBAL_DATA::RegisterWindowClass\nRegisters the specified MFC window class.  \n  \n  \n```  \nCString RegisterWindowClass(LPCTSTR lpszClassNamePrefix);\n```  \n  \n### Parameters   \n [in] `lpszClassNamePrefix`  \n The name of the window class to register.  \n  \n### Return Value  \n The qualified name of the registered class if this method succeeds; otherwise, a [resource exception](http://msdn.microsoft.com/library/ddd99292-819b-4fa4-8371-b1954ed5856d).  \n  \n### Remarks  \n The return value is a colon-delimited list of the `lpszClassNamePrefix` parameter string, and the hexadecimal text representations of the handles of the current application instance; the application cursor, which is the arrow cursor whose identifier is IDC_ARROW; and the background brush. For more information about registering MFC window classes, see [AfxRegisterClass](../../mfc/reference/application-information-and-management.md#afxregisterclass).  \n  \n## See Also    \n [AfxRegisterClass](../../mfc/reference/application-information-and-management.md#afxregisterclass)   \n [AfxThrowResourceException](../../mfc/reference/exception-processing.md#afxthrowresourceexception)\n\n## <a name=\"afx_global_data__resume\"></a> AFX_GLOBAL_DATA::Resume\n Reinitializes internal function pointers that access methods that support Windows themes and visual styles. \n  \n  \n```  \nBOOL Resume();\n```  \n  \n### Return Value  \n `TRUE` if this method succeeds; otherwise, `FALSE`. In debug mode, this method asserts if this method is unsuccessful.  \n  \n### Remarks  \n This method is called when the framework receives the [WM_POWERBROADCAST](http://msdn.microsoft.com/library/windows/desktop/aa373247) message.  \n  \n## <a name=\"afx_global_data__setlayeredattrib\"></a> AFX_GLOBAL_DATA::SetLayeredAttrib\nProvides a simple way to call the Windows [SetLayeredWindowAttributes](http://msdn.microsoft.com/library/windows/desktop/ms633540) method.  \n  \n  \n```  \nBOOL SetLayeredAttrib(\n    HWND hwnd,  \n    COLORREF crKey,  \n    BYTE bAlpha,  \n    DWORD dwFlags);\n```  \n  \n### Parameters   \n [in] `hwnd`  \n Handle to the layered window.  \n  \n [in] `crKey`  \n The transparency color key that the [Desktop Window Manager](http://msdn.microsoft.com/library/windows/desktop/aa969540) uses to compose the layered window.  \n  \n [in] `bAlpha`  \n The alpha value that is used to describe the opacity of the layered window.  \n  \n [in] `dwFlags`  \n A bitwise combination (OR) of flags that specify which method parameters to use. Specify LWA_COLORKEY to use the `crKey` parameter as the transparency color. Specify LWA_ALPHA to use the `bAlpha` parameter to determine the opacity of the layered window.  \n  \n### Return Value  \n `TRUE` if this method succeeds; otherwise, `FALSE`.   \n \n## See Also   \n [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449)   \n [SetLayeredWindowAttributes](http://msdn.microsoft.com/library/windows/desktop/ms633540)\n\n## <a name=\"afx_global_data__setmenufont\"></a> AFX_GLOBAL_DATA::SetMenuFont\nCreates the specified logical font.  \n  \n  \n```  \nBOOL SetMenuFont(\n    LPLOGFONT lpLogFont,  \n    BOOL bHorz);\n```  \n  \n### Parameters   \n [in] `lpLogFont`  \n Pointer to a structure that contains the attributes of a font.  \n  \n [in] `bHorz`  \n `TRUE` to specify that the text runs horizontally; `FALSE` to specify that the text runs vertically.  \n  \n### Return Value  \n `TRUE` if this method succeeds; otherwise, `FALSE`. In debug mode, this method asserts if this method is unsuccessful.  \n  \n### Remarks  \n This method creates a horizontal regular font, an underlined font, and a bold font that is used in default menu items. This method optionally creates a regular vertical font. For more information about logical fonts, see [CFont::CreateFontIndirect](../../mfc/reference/cfont-class.md#cfont__createfontindirect).  \n  \n## <a name=\"afx_global_data__updatefonts\"></a> AFX_GLOBAL_DATA::UpdateFonts\nReintializes the logical fonts that are used by the framework.  \n  \n  \n```  \nvoid UpdateFonts();\n```  \n  \n### Remarks  \n For more information about logical fonts, see `CFont::CreateFontIndirect`.  \n  \n## <a name=\"afx_global_data__updatesyscolors\"></a> AFX_GLOBAL_DATA::UpdateSysColors\nInitializes the colors, color depth, brushes, pens, and images that are used by the framework.  \n  \n  \n```  \nvoid UpdateSysColors();\n```  \n  \n## <a name=\"afx_global_data__biswindows7\"></a> AFX_GLOBAL_DATA::bIsWindows7\nIndicates whether the application is being executed under Windows 7 or higher.  \n  \n  \n```  \nBOOL bIsWindows7;  \n```  \n  \n## <a name=\"afx_global_data__clractivecaptiongradient\"></a> AFX_GLOBAL_DATA::clrActiveCaptionGradient\nSpecifies the gradient color of the active caption. Generally used for docking panes.  \n  \n  \n```  \nCOLORREF clrActiveCaptionGradient;  \n```  \n  \n## <a name=\"afx_global_data__clrinactivecaptiongradient\"></a> AFX_GLOBAL_DATA::clrInactiveCaptionGradient\nSpecifies the gradient color of the inactive caption. Generally used for docking panes.  \n  \n  \n```  \nCOLORREF clrInactiveCaptionGradient;  \n```  \n  \n## <a name=\"afx_global_data__getitaskbarlist\"></a> AFX_GLOBAL_DATA::GetITaskbarList\nCreates and stores in the global data a pointer to the `ITaskBarList` interface.  \n  \n  \n```  \nITaskbarList *GetITaskbarList();\n```  \n  \n### Return Value  \n A pointer to the `ITaskbarList` interface if creation of a task bar list object succeeds; `NULL` if creation fails or if the current Operation System is less than Windows 7.  \n  \n## <a name=\"afx_global_data__getitaskbarlist3\"></a> AFX_GLOBAL_DATA::GetITaskbarList3\nCreates and stores in the global data a pointer to the `ITaskBarList3` interface.  \n  \n  \n```  \nITaskbarList3 *GetITaskbarList3();\n```  \n  \n### Return Value  \n A pointer to the `ITaskbarList3` interface if creation of a task bar list object succeeds; `NULL` if creation fails or if the current Operation System is less than Windows 7.  \n  \n## <a name=\"afx_global_data__getshellautohidebars\"></a> AFX_GLOBAL_DATA::GetShellAutohideBars\nDetermines positions of Shell auto hide bars.  \n  \n  \n```  \nint GetShellAutohideBars();\n```  \n  \n### Return Value  \n An integer value with encoded flags that specify positions of auto hide bars. It may combine the following values: AFX_AUTOHIDE_BOTTOM, AFX_AUTOHIDE_TOP, AFX_AUTOHIDE_LEFT, AFX_AUTOHIDE_RIGHT.  \n  \n## <a name=\"afx_global_data__releasetaskbarrefs\"></a> AFX_GLOBAL_DATA::ReleaseTaskBarRefs\nReleases interfaces obtained through the `GetITaskbarList` and `GetITaskbarList3` methods.  \n  \n  \n```  \nvoid ReleaseTaskBarRefs();\n```  \n  \n## <a name=\"afx_global_data__shellcreateitemfromparsingname\"></a> AFX_GLOBAL_DATA::ShellCreateItemFromParsingName\nCreates and initializes a Shell item object from a parsing name.  \n  \n  \n```  \nHRESULT ShellCreateItemFromParsingName(\n    PCWSTR pszPath,  \n    IBindCtx *pbc,  \n    REFIID riid,  \n    void **ppv);\n```  \n  \n### Parameters   \n `pszPath`  \n [in] A pointer to a display name.  \n  \n `pbc`  \n A pointer to a bind context that controls the parsing operation.  \n  \n `riid`  \n A reference to an interface ID.  \n  \n `ppv`  \n [out] When this function returns, contains the interface pointer requested in `riid`. This will typically be `IShellItem` or `IShellItem2`.  \n  \n### Return Value  \n Returns S_OK if successful; an error value otherwise.  \n\n"}