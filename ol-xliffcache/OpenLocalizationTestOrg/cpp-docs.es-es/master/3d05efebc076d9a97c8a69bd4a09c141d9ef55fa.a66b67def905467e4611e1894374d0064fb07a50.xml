{"nodes":[{"pos":[12,37],"content":"ptr::ptr | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ptr::ptr | Microsoft Docs","pos":[0,25]}]},{"content":"ptr::ptr","pos":[650,658]},{"pos":[659,704],"content":"Constructs a <ph id=\"ph1\">`com::ptr`</ph> to wrap a COM object.","source":"Constructs a `com::ptr` to wrap a COM object."},{"content":"Syntax","pos":[713,719]},{"content":"Parameters","pos":[791,801]},{"content":"A COM interface pointer.","pos":[812,836]},{"content":"Remarks","pos":[845,852]},{"content":"The no-argument constructor assigns <ph id=\"ph1\">`nullptr`</ph> to the underlying object handle.","pos":[856,934],"source":"The no-argument constructor assigns `nullptr` to the underlying object handle."},{"content":"Subsequent calls to the <ph id=\"ph1\">`com::ptr`</ph> will validate the internal object and silently fail until an object is actually created or attached.","pos":[935,1070],"source":" Subsequent calls to the `com::ptr` will validate the internal object and silently fail until an object is actually created or attached."},{"content":"The one-argument constructor adds a reference to the COM object but does not release the caller's reference, so the caller must call <ph id=\"ph1\">`Release`</ph> on the COM object to truly give up control.","pos":[1077,1263],"source":"The one-argument constructor adds a reference to the COM object but does not release the caller's reference, so the caller must call `Release` on the COM object to truly give up control."},{"content":"When the <ph id=\"ph1\">`com::ptr`</ph>'s destructor is called it will automatically release its references on the COM object.","pos":[1264,1370],"source":" When the `com::ptr`'s destructor is called it will automatically release its references on the COM object."},{"pos":[1377,1459],"content":"Passing <ph id=\"ph1\">`NULL`</ph> to this constructor is the same as calling the no-argument version.","source":"Passing `NULL` to this constructor is the same as calling the no-argument version."},{"content":"Example","pos":[1468,1475]},{"content":"This example implements a CLR class that uses a <ph id=\"ph1\">`com::ptr`</ph> to wrap its private member <ph id=\"ph2\">`IXMLDOMDocument`</ph> object.","pos":[1479,1590],"source":"This example implements a CLR class that uses a `com::ptr` to wrap its private member `IXMLDOMDocument` object."},{"content":"It demonstrates usage of both versions of the constructor.","pos":[1591,1649]},{"content":"Requirements","pos":[3393,3405]},{"pos":[3409,3443],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>msclr\\com\\ptr.h&gt;","source":"**Header file** \\<msclr\\com\\ptr.h>"},{"pos":[3450,3474],"content":"<bpt id=\"p1\">**</bpt>Namespace<ept id=\"p1\">**</ept> msclr::com","source":"**Namespace** msclr::com"},{"content":"See Also","pos":[3483,3491]},{"content":"ptr Members","pos":[3496,3507]},{"content":"ptr::CreateInstance","pos":[3540,3559]},{"content":"ptr::~ptr","pos":[3599,3608]}],"content":"---\ntitle: \"ptr::ptr | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ptr::ptr\"\n  - \"ptr.ptr\"\n  - \"msclr.com.ptr.ptr\"\n  - \"msclr::com::ptr::ptr\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ptr::ptr\"\nms.assetid: 4f5883b4-7c0a-46c6-aa9f-4e49eed463eb\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ptr::ptr\nConstructs a `com::ptr` to wrap a COM object.  \n  \n## Syntax  \n  \n```  \nptr();  \nptr(  \n   _interface_type * p  \n);  \n```  \n  \n#### Parameters  \n `P`  \n A COM interface pointer.  \n  \n## Remarks  \n The no-argument constructor assigns `nullptr` to the underlying object handle. Subsequent calls to the `com::ptr` will validate the internal object and silently fail until an object is actually created or attached.  \n  \n The one-argument constructor adds a reference to the COM object but does not release the caller's reference, so the caller must call `Release` on the COM object to truly give up control. When the `com::ptr`'s destructor is called it will automatically release its references on the COM object.  \n  \n Passing `NULL` to this constructor is the same as calling the no-argument version.  \n  \n## Example  \n This example implements a CLR class that uses a `com::ptr` to wrap its private member `IXMLDOMDocument` object. It demonstrates usage of both versions of the constructor.  \n  \n```  \n// comptr_ptr.cpp  \n// compile with: /clr /link msxml2.lib  \n#include <msxml2.h>  \n#include <msclr\\com\\ptr.h>  \n  \n#import <msxml3.dll> raw_interfaces_only  \n  \nusing namespace System;  \nusing namespace System::Runtime::InteropServices;  \nusing namespace msclr;  \n  \n// a ref class that uses a com::ptr to contain an   \n// IXMLDOMDocument object  \nref class XmlDocument {  \npublic:  \n   // construct the internal com::ptr with a null interface  \n   // and use CreateInstance to fill it  \n   XmlDocument(String^ progid) {  \n      m_ptrDoc.CreateInstance(progid);     \n   }  \n  \n   // construct the internal com::ptr with a COM object  \n   XmlDocument(IXMLDOMDocument* pDoc) : m_ptrDoc(pDoc) {}  \n  \n   // note that the destructor will call the com::ptr destructor  \n   // and automatically release the reference to the COM object  \n  \nprivate:  \n   com::ptr<IXMLDOMDocument> m_ptrDoc;  \n};  \n  \n// use the ref class to handle an XML DOM Document object  \nint main() {  \n   IXMLDOMDocument* pDoc = NULL;  \n  \n   try {  \n      // create an XML DOM document object  \n      Marshal::ThrowExceptionForHR(CoCreateInstance(CLSID_DOMDocument30, NULL,   \n         CLSCTX_ALL, IID_IXMLDOMDocument, (void**)&pDoc));  \n      // construct the ref class with the COM object  \n      XmlDocument doc1(pDoc);  \n  \n      // or create the class from a progid string  \n      XmlDocument doc2(\"Msxml2.DOMDocument.3.0\");  \n   }  \n   // doc1 and doc2 destructors are called when they go out of scope  \n   // and the internal com::ptr releases its reference to the COM object  \n   catch (Exception^ e) {  \n      Console::WriteLine(e);     \n   }  \n   finally {  \n      if (NULL != pDoc) {  \n         pDoc->Release();        \n      }  \n   }  \n}  \n```  \n  \n## Requirements  \n **Header file** \\<msclr\\com\\ptr.h>  \n  \n **Namespace** msclr::com  \n  \n## See Also  \n [ptr Members](../dotnet/ptr-members.md)   \n [ptr::CreateInstance](../dotnet/ptr-createinstance.md)   \n [ptr::~ptr](../dotnet/ptr-tilde-ptr.md)"}