{"nodes":[{"pos":[12,41],"content":"gets, _getws | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"gets, _getws | Microsoft Docs","pos":[0,29]}]},{"content":"gets, _getws","pos":[1026,1038]},{"content":"Gets a line from the <ph id=\"ph1\">`stdin`</ph> stream.","pos":[1039,1075],"source":"Gets a line from the `stdin` stream."},{"content":"More secure versions of these functions are available; see <bpt id=\"p1\">[</bpt>gets_s, _getws_s<ept id=\"p1\">](../c-runtime-library/reference/gets-s-getws-s.md)</ept>.","pos":[1076,1204],"source":" More secure versions of these functions are available; see [gets_s, _getws_s](../c-runtime-library/reference/gets-s-getws-s.md)."},{"pos":[1212,1530],"content":"[!IMPORTANT]\n These functions are obsolete. Beginning in Visual Studio 2015, they are not available in the CRT. The secure versions of these functions,  gets_s and _getws_s, are still available. For information on these alternative functions, see [gets_s, _getws_s](../c-runtime-library/reference/gets-s-getws-s.md).","leadings":["","> "],"nodes":[{"content":" These functions are obsolete. Beginning in Visual Studio 2015, they are not available in the CRT. The secure versions of these functions,  gets_s and _getws_s, are still available. For information on these alternative functions, see [gets_s, _getws_s](../c-runtime-library/reference/gets-s-getws-s.md).","pos":[13,316],"nodes":[{"content":"These functions are obsolete.","pos":[1,30]},{"content":"Beginning in Visual Studio 2015, they are not available in the CRT.","pos":[31,98]},{"content":"The secure versions of these functions,  gets_s and _getws_s, are still available.","pos":[99,181]},{"content":"For information on these alternative functions, see <bpt id=\"p1\">[</bpt>gets_s, _getws_s<ept id=\"p1\">](../c-runtime-library/reference/gets-s-getws-s.md)</ept>.","pos":[182,303],"source":" For information on these alternative functions, see [gets_s, _getws_s](../c-runtime-library/reference/gets-s-getws-s.md)."}]}]},{"pos":[1538,1758],"content":"[!IMPORTANT]\n This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[13,218],"nodes":[{"content":"This API cannot be used in applications that execute in the Windows Runtime.","pos":[1,77]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[78,205],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"content":"Syntax","pos":[1767,1773]},{"content":"Parameters","pos":[2059,2069]},{"content":"Storage location for input string.","pos":[2085,2119]},{"content":"Return Value","pos":[2128,2140]},{"content":"Returns its argument if successful.","pos":[2144,2179]},{"content":"A <ph id=\"ph1\">`NULL`</ph> pointer indicates an error or end-of-file condition.","pos":[2180,2241],"source":" A `NULL` pointer indicates an error or end-of-file condition."},{"content":"Use <bpt id=\"p1\">[</bpt>ferror<ept id=\"p1\">](../c-runtime-library/reference/ferror.md)</ept> or <bpt id=\"p2\">[</bpt>feof<ept id=\"p2\">](../c-runtime-library/reference/feof.md)</ept> to determine which one has occurred.","pos":[2242,2383],"source":" Use [ferror](../c-runtime-library/reference/ferror.md) or [feof](../c-runtime-library/reference/feof.md) to determine which one has occurred."},{"content":"If <ph id=\"ph1\">`buffer`</ph> is <ph id=\"ph2\">`NULL`</ph>, these functions invoke an invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../c-runtime-library/parameter-validation.md)</ept>.","pos":[2384,2545],"source":" If `buffer` is `NULL`, these functions invoke an invalid parameter handler, as described in [Parameter Validation](../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions return <ph id=\"ph1\">`NULL`</ph> and set errno to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[2546,2639],"source":" If execution is allowed to continue, these functions return `NULL` and set errno to `EINVAL`."},{"content":"Remarks","pos":[2648,2655]},{"content":"The <ph id=\"ph1\">`gets`</ph> function reads a line from the standard input stream <ph id=\"ph2\">`stdin`</ph> and stores it in <ph id=\"ph3\">`buffer`</ph>.","pos":[2659,2757],"source":"The `gets` function reads a line from the standard input stream `stdin` and stores it in `buffer`."},{"content":"The line consists of all characters up to and including the first newline character ('\\n').","pos":[2758,2849]},{"content":"then replaces the newline character with a null character ('\\0') before returning the line.","pos":[2857,2948]},{"content":"In contrast, the <ph id=\"ph1\">`fgets`</ph> function retains the newline character.","pos":[2949,3013],"source":" In contrast, the `fgets` function retains the newline character."},{"content":"is a wide-character version of <ph id=\"ph1\">`gets`</ph>; its argument and return value are wide-character strings.","pos":[3023,3119],"source":" is a wide-character version of `gets`; its argument and return value are wide-character strings."},{"pos":[3127,3285],"content":"[!IMPORTANT]\n Because there is no way to limit the number of characters read by gets, untrusted input can easily cause buffer overruns. Use `fgets` instead.","leadings":["","> "],"nodes":[{"content":" Because there is no way to limit the number of characters read by gets, untrusted input can easily cause buffer overruns. Use `fgets` instead.","pos":[13,156],"nodes":[{"content":"Because there is no way to limit the number of characters read by gets, untrusted input can easily cause buffer overruns.","pos":[1,122]},{"content":"Use <ph id=\"ph1\">`fgets`</ph> instead.","pos":[123,143],"source":" Use `fgets` instead."}]}]},{"content":"In C++, these functions have template overloads that invoke the newer, secure counterparts of these functions.","pos":[3292,3402]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[3403,3508],"source":" For more information, see [Secure Template Overloads](../c-runtime-library/secure-template-overloads.md)."},{"content":"Generic-Text Routine Mappings","pos":[3518,3547]},{"content":"TCHAR.H routine","pos":[3554,3569]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[3570,3598],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[3599,3612]},{"content":"_UNICODE defined","pos":[3613,3629]},{"content":"Requirements","pos":[3783,3795]},{"content":"Routine","pos":[3802,3809]},{"content":"Required header","pos":[3810,3825]},{"content":"stdio.h&gt;","pos":[3879,3887],"source":"stdio.h>"},{"content":"stdio.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[3903,3925],"source":"stdio.h> or \\<wchar.h>"},{"pos":[3933,4034],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../c-runtime-library/compatibility.md)."},{"content":"Example","pos":[4043,4050]},{"content":"Note that input longer than 20 characters will overrun the line buffer and almost certainly cause the program to crash.","pos":[4387,4506]},{"content":".NET Framework Equivalent","pos":[4588,4613]},{"content":"System::Console::Read","pos":[4618,4639]},{"content":"See Also","pos":[4716,4724]},{"content":"Stream I/O","pos":[4729,4739]},{"content":"fgets, fgetws","pos":[4782,4795]},{"content":"fputs, fputws","pos":[4850,4863]},{"content":"puts, _putws","pos":[4918,4930]}],"content":"---\ntitle: \"gets, _getws | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_getws\"\n  - \"gets\"\napilocation: \n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcrt.dll\"\n  - \"msvcr100.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_getts\"\n  - \"gets\"\n  - \"_getws\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"getws function\"\n  - \"getts function\"\n  - \"_getws function\"\n  - \"lines, getting\"\n  - \"streams, getting lines\"\n  - \"_getts function\"\n  - \"gets function\"\n  - \"standard input, reading from\"\nms.assetid: 1ec2dd4b-f801-48ea-97c2-892590f16024\ncaps.latest.revision: 32\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# gets, _getws\nGets a line from the `stdin` stream. More secure versions of these functions are available; see [gets_s, _getws_s](../c-runtime-library/reference/gets-s-getws-s.md).  \n  \n> [!IMPORTANT]\n>  These functions are obsolete. Beginning in Visual Studio 2015, they are not available in the CRT. The secure versions of these functions,  gets_s and _getws_s, are still available. For information on these alternative functions, see [gets_s, _getws_s](../c-runtime-library/reference/gets-s-getws-s.md).  \n  \n> [!IMPORTANT]\n>  This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \nchar *gets(   \n   char *buffer   \n);  \nwchar_t *_getws(   \n   wchar_t *buffer   \n);  \ntemplate <size_t size>  \nchar *gets(   \n   char (&buffer)[size]  \n); // C++ only  \ntemplate <size_t size>  \nwchar_t *_getws(   \n   wchar_t (&buffer)[size]  \n); // C++ only  \n```  \n  \n#### Parameters  \n `buffer`  \n Storage location for input string.  \n  \n## Return Value  \n Returns its argument if successful. A `NULL` pointer indicates an error or end-of-file condition. Use [ferror](../c-runtime-library/reference/ferror.md) or [feof](../c-runtime-library/reference/feof.md) to determine which one has occurred. If `buffer` is `NULL`, these functions invoke an invalid parameter handler, as described in [Parameter Validation](../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions return `NULL` and set errno to `EINVAL`.  \n  \n## Remarks  \n The `gets` function reads a line from the standard input stream `stdin` and stores it in `buffer`. The line consists of all characters up to and including the first newline character ('\\n'). `gets` then replaces the newline character with a null character ('\\0') before returning the line. In contrast, the `fgets` function retains the newline character. `_getws` is a wide-character version of `gets`; its argument and return value are wide-character strings.  \n  \n> [!IMPORTANT]\n>  Because there is no way to limit the number of characters read by gets, untrusted input can easily cause buffer overruns. Use `fgets` instead.  \n  \n In C++, these functions have template overloads that invoke the newer, secure counterparts of these functions. For more information, see [Secure Template Overloads](../c-runtime-library/secure-template-overloads.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_getts`|`gets`|`gets`|`_getws`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`gets`|\\<stdio.h>|  \n|`_getws`|\\<stdio.h> or \\<wchar.h>|  \n  \n For additional compatibility information, see [Compatibility](../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n// crt_gets.c  \n// compile with: /WX /W3  \n  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   char line[21]; // room for 20 chars + '\\0'  \n   gets( line );  // C4996  \n   // Danger: No way to limit input to 20 chars.  \n   // Consider using gets_s instead.  \n   printf( \"The line entered was: %s\\n\", line );  \n}  \n```  \n  \n Note that input longer than 20 characters will overrun the line buffer and almost certainly cause the program to crash.  \n  \n```Output  \n  \nHello there!The line entered was: Hello there!  \n```  \n  \n## .NET Framework Equivalent  \n [System::Console::Read](https://msdn.microsoft.com/en-us/library/system.console.read.aspx)  \n  \n## See Also  \n [Stream I/O](../c-runtime-library/stream-i-o.md)   \n [fgets, fgetws](../c-runtime-library/reference/fgets-fgetws.md)   \n [fputs, fputws](../c-runtime-library/reference/fputs-fputws.md)   \n [puts, _putws](../c-runtime-library/reference/puts-putws.md)"}