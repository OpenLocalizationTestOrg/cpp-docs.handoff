{"nodes":[{"pos":[12,59],"content":"chi_squared_distribution Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"chi_squared_distribution Class | Microsoft Docs","pos":[0,47]}]},{"pos":[843,873],"content":"chi_squared_distribution Class","linkify":"chi_squared_distribution Class","nodes":[{"content":"chi_squared_distribution Class","pos":[0,30]}]},{"content":"Generates a chi-squared distribution.","pos":[874,911]},{"pos":[920,926],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1603,1613],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The floating-point result type, defaults to <ph id=\"ph1\">`double`</ph>.","pos":[1631,1684],"source":" The floating-point result type, defaults to `double`."},{"content":"For possible types, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","pos":[1685,1752],"source":" For possible types, see [\\<random>](../standard-library/random.md)."},{"pos":[1761,1768],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template class describes a distribution that produces values of a user-specified integral type, or type <ph id=\"ph1\">`double`</ph> if none is provided, distributed according to the Chi-Squared Distribution.","pos":[1772,1964],"source":"The template class describes a distribution that produces values of a user-specified integral type, or type `double` if none is provided, distributed according to the Chi-Squared Distribution."},{"content":"The following table links to articles about individual members.","pos":[1965,2028]},{"pos":[2052,2159],"content":"<bpt id=\"p1\">[</bpt>chi_squared_distribution::chi_squared_distribution<ept id=\"p1\">](../standard-library/chi-squared-distribution-class.md)</ept>","source":"[chi_squared_distribution::chi_squared_distribution](../standard-library/chi-squared-distribution-class.md)"},{"pos":[2268,2345],"content":"<bpt id=\"p1\">[</bpt>chi_squared_distribution::param_type<ept id=\"p1\">](#chi_squared_distribution__param_type)</ept>","source":"[chi_squared_distribution::param_type](#chi_squared_distribution__param_type)"},{"pos":[2353,2441],"content":"The property function <ph id=\"ph1\">`n()`</ph> returns the value for the stored distribution parameter <ph id=\"ph2\">`n`</ph>.","source":"The property function `n()` returns the value for the stored distribution parameter `n`."},{"pos":[2448,2562],"content":"For more information about distribution classes and their members, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","source":"For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md)."},{"pos":[2569,2737],"content":"For detailed information about the chi-squared distribution, see the Wolfram MathWorld article <bpt id=\"p1\">[</bpt>Chi-Squared Distribution<ept id=\"p1\">](http://go.microsoft.com/fwlink/LinkId=400528)</ept>.","source":"For detailed information about the chi-squared distribution, see the Wolfram MathWorld article [Chi-Squared Distribution](http://go.microsoft.com/fwlink/LinkId=400528)."},{"pos":[2746,2753],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4380,4386],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"content":"First run:","pos":[4390,4400]},{"content":"Second run:","pos":[4958,4969]},{"content":"Third run:","pos":[5530,5540]},{"pos":[6131,6143],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[6147,6168],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>random&gt;","source":"**Header:** \\<random>"},{"pos":[6175,6193],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[6203,6320],"content":"<bpt id=\"p1\">&lt;a name=\"chi_squared_distribution__chi_squared_distribution\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  chi_squared_distribution::chi_squared_distribution","linkify":"<a name=\"chi_squared_distribution__chi_squared_distribution\"></a>  chi_squared_distribution::chi_squared_distribution","source":"<a name=\"chi_squared_distribution__chi_squared_distribution\"></a>  chi_squared_distribution::chi_squared_distribution"},{"content":"Constructs the distribution.","pos":[6324,6352]},{"pos":[6492,6502],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`n`</ph> distribution parameter.","pos":[6513,6544],"source":" The `n` distribution parameter."},{"content":"The parameter structure used to construct the distribution.","pos":[6561,6620]},{"pos":[6630,6637],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6641,6668],"content":"<bpt id=\"p1\">**</bpt>Precondition:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`0.0 &lt; n`</ph>","source":"**Precondition:** `0.0 < n`"},{"pos":[6675,6761],"content":"The first constructor constructs an object whose stored <ph id=\"ph1\">`n`</ph> value holds the value <ph id=\"ph2\">`n`</ph>.","source":"The first constructor constructs an object whose stored `n` value holds the value `n`."},{"content":"The second constructor constructs an object whose stored parameters are initialized from <ph id=\"ph1\">`parm`</ph>.","pos":[6768,6864],"source":"The second constructor constructs an object whose stored parameters are initialized from `parm`."},{"content":"You can obtain and set the current parameters of an existing distribution by calling the <ph id=\"ph1\">`param()`</ph> member function.","pos":[6865,6980],"source":" You can obtain and set the current parameters of an existing distribution by calling the `param()` member function."},{"pos":[6990,7079],"content":"<bpt id=\"p1\">&lt;a name=\"chi_squared_distribution__param_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  chi_squared_distribution::param_type","linkify":"<a name=\"chi_squared_distribution__param_type\"></a>  chi_squared_distribution::param_type","source":"<a name=\"chi_squared_distribution__param_type\"></a>  chi_squared_distribution::param_type"},{"content":"Stores the parameters of the distribution.","pos":[7083,7125]},{"pos":[7415,7425],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[7429,7534],"content":"See parent topic <bpt id=\"p1\">[</bpt>chi_squared_distribution Class<ept id=\"p1\">](../standard-library/chi-squared-distribution-class.md)</ept>.","source":"See parent topic [chi_squared_distribution Class](../standard-library/chi-squared-distribution-class.md)."},{"pos":[7544,7551],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7555,7582],"content":"<bpt id=\"p1\">**</bpt>Precondition:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`0.0 &lt; n`</ph>","source":"**Precondition:** `0.0 < n`"},{"pos":[7589,7832],"content":"This structure can be passed to the distribution's class constructor at instantiation, to the <ph id=\"ph1\">`param()`</ph> member function to set the stored parameters of an existing distribution, and to <ph id=\"ph2\">`operator()`</ph> to be used in place of the stored parameters.","source":"This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters."},{"pos":[7841,7849],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[7853,7895],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>","source":"[\\<random>](../standard-library/random.md)"}],"content":"---\ntitle: \"chi_squared_distribution Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std::tr1::chi_squared_distribution\"\n  - \"chi_squared_distribution\"\n  - \"random/std::tr1::chi_squared_distribution\"\n  - \"std.tr1.chi_squared_distribution\"\n  - \"tr1.chi_squared_distribution\"\n  - \"tr1::chi_squared_distribution\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"chi_squared_distribution class\"\nms.assetid: 9b603fbe-cafd-4a92-b8c5-a434d60b8122\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# chi_squared_distribution Class\nGenerates a chi-squared distribution.  \n  \n## Syntax  \n```  \nclass chi_squared_distribution {\npublic:    \n    // types \n    typedef RealType result_type;    \n    struct param_type;    \n    // constructor and reset functions \n    explicit chi_squared_distribution(RealType n = 1);\n    explicit chi_squared_distribution(const param_type& parm);\n    void reset();\n    // generating functions template <class URNG>  \n    result_type operator()(URNG& gen);\n    template <class URNG>\n    result_type operator()(URNG& gen, const param_type& parm);\n    // property functions RealType n() const;\n    param_type param() const;\n    void param(const param_type& parm);\n    result_type min() const;\n    result_type max() const;\n};\n```  \n#### Parameters  \n `RealType`  \n The floating-point result type, defaults to `double`. For possible types, see [\\<random>](../standard-library/random.md).  \n  \n## Remarks  \n The template class describes a distribution that produces values of a user-specified integral type, or type `double` if none is provided, distributed according to the Chi-Squared Distribution. The following table links to articles about individual members.  \n  \n||||  \n|-|-|-|  \n|[chi_squared_distribution::chi_squared_distribution](../standard-library/chi-squared-distribution-class.md)|`chi_squared_distribution::n`|`chi_squared_distribution::param`|  \n|`chi_squared_distribution::operator()`||[chi_squared_distribution::param_type](#chi_squared_distribution__param_type)|  \n  \n The property function `n()` returns the value for the stored distribution parameter `n`.  \n  \n For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md).  \n  \n For detailed information about the chi-squared distribution, see the Wolfram MathWorld article [Chi-Squared Distribution](http://go.microsoft.com/fwlink/LinkId=400528).  \n  \n## Example  \n  \n```cpp  \n// compile with: /EHsc /W4  \n#include <random>   \n#include <iostream>  \n#include <iomanip>  \n#include <string>  \n#include <map>  \n  \nvoid test(const double n, const int s) {  \n  \n    // uncomment to use a non-deterministic generator  \n    //    std::random_device gen;  \n    std::mt19937 gen(1701);  \n  \n    std::chi_squared_distribution<> distr(n);  \n  \n    std::cout << std::endl;  \n    std::cout << \"min() == \" << distr.min() << std::endl;  \n    std::cout << \"max() == \" << distr.max() << std::endl;  \n    std::cout << \"n() == \" << std::fixed << std::setw(11) << std::setprecision(10) << distr.n() << std::endl;  \n  \n    // generate the distribution as a histogram  \n    std::map<double, int> histogram;  \n    for (int i = 0; i < s; ++i) {  \n        ++histogram[distr(gen)];  \n    }  \n  \n    // print results  \n    std::cout << \"Distribution for \" << s << \" samples:\" << std::endl;  \n    int counter = 0;  \n    for (const auto& elem : histogram) {  \n        std::cout << std::fixed << std::setw(11) << ++counter << \": \"  \n            << std::setw(14) << std::setprecision(10) << elem.first << std::endl;  \n    }  \n    std::cout << std::endl;  \n}  \n  \nint main()  \n{  \n    double n_dist = 0.5;  \n    int samples = 10;  \n  \n    std::cout << \"Use CTRL-Z to bypass data entry and run using default values.\" << std::endl;  \n    std::cout << \"Enter a floating point value for the \\'n\\' distribution parameter (must be greater than zero): \";  \n    std::cin >> n_dist;  \n    std::cout << \"Enter an integer value for the sample count: \";  \n    std::cin >> samples;  \n  \n    test(n_dist, samples);  \n}  \n  \n```  \n  \n## Output  \n First run:  \n  \n```  \nUse CTRL-Z to bypass data entry and run using default values.  \nEnter a floating point value for the 'n' distribution parameter (must be greater than zero): .5  \nEnter an integer value for the sample count: 10  \n \nmin() == 4.94066e-324  \nmax() == 1.79769e+308  \nn() == 0.5000000000  \nDistribution for 10 samples:  \n    1: 0.0007625595  \n    2: 0.0016895062  \n    3: 0.0058683478  \n    4: 0.0189647765  \n    5: 0.0556619371  \n    6: 0.1448191353  \n    7: 0.1448245325  \n    8: 0.1903494379  \n    9: 0.9267525768  \n    10: 1.5429743723  \n```  \n  \n Second run:  \n  \n```  \nUse CTRL-Z to bypass data entry and run using default values.  \nEnter a floating point value for the 'n' distribution parameter (must be greater than zero): .3333  \nEnter an integer value for the sample count: 10  \n \nmin() == 4.94066e-324  \nmax() == 1.79769e+308  \nn() == 0.3333000000  \nDistribution for 10 samples:  \n    1: 0.0000148725  \n    2: 0.0000490528  \n    3: 0.0003175988  \n    4: 0.0018454535  \n    5: 0.0092808795  \n    6: 0.0389540735  \n    7: 0.0389562514  \n    8: 0.0587028468  \n    9: 0.6183666639  \n    10: 1.3552086624  \n```  \n  \n Third run:  \n  \n```  \nUse CTRL-Z to bypass data entry and run using default values.  \nEnter a floating point value for the 'n' distribution parameter (must be greater than zero): 1000  \nEnter an integer value for the sample count: 10  \n \nmin() == 4.94066e-324  \nmax() == 1.79769e+308  \nn() == 1000.0000000000  \nDistribution for 10 samples:  \n    1: 958.5284624473  \n    2: 958.7882787809  \n    3: 963.0667684792  \n    4: 987.9638091514  \n    5: 1016.2433493745  \n    6: 1021.9337111110  \n    7: 1021.9723046240  \n    8: 1035.7622110505  \n    9: 1043.8725156645  \n    10: 1054.7051509381  \n```  \n  \n## Requirements  \n **Header:** \\<random>  \n  \n **Namespace:** std  \n  \n##  <a name=\"chi_squared_distribution__chi_squared_distribution\"></a>  chi_squared_distribution::chi_squared_distribution  \n Constructs the distribution.  \n  \n```  \nexplicit chi_squared_distribution(RealType n = 1.0);\n\n \nexplicit chi_squared_distribution(const param_type& parm);\n```  \n  \n### Parameters  \n `n`  \n The `n` distribution parameter.  \n  \n `parm`  \n The parameter structure used to construct the distribution.  \n  \n### Remarks  \n **Precondition:** `0.0 < n`  \n  \n The first constructor constructs an object whose stored `n` value holds the value `n`.  \n  \n The second constructor constructs an object whose stored parameters are initialized from `parm`. You can obtain and set the current parameters of an existing distribution by calling the `param()` member function.  \n  \n##  <a name=\"chi_squared_distribution__param_type\"></a>  chi_squared_distribution::param_type  \n Stores the parameters of the distribution.  \n```cpp    \nstruct param_type {  \n   typedef chi_squared_distribution<RealType> distribution_type;  \n   param_type(RealType n = 1.0);\n   RealType n() const;\n   .....  \n   bool operator==(const param_type& right) const;\n   bool operator!=(const param_type& right) const;\n   };  \n```  \n### Parameters  \n See parent topic [chi_squared_distribution Class](../standard-library/chi-squared-distribution-class.md).  \n  \n### Remarks  \n **Precondition:** `0.0 < n`  \n  \n This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters.  \n  \n## See Also  \n [\\<random>](../standard-library/random.md)\n\n\n\n"}