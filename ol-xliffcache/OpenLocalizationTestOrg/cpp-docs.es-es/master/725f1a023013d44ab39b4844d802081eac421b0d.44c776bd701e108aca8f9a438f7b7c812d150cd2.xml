{"nodes":[{"pos":[12,62],"content":"atoll, _atoll_l, _wtoll, _wtoll_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"atoll, _atoll_l, _wtoll, _wtoll_l | Microsoft Docs","pos":[0,50]}]},{"content":"atoll, _atoll_l, _wtoll, _wtoll_l","pos":[1117,1150]},{"pos":[1151,1194],"content":"Converts a string to a <ph id=\"ph1\">`long long`</ph> integer.","source":"Converts a string to a `long long` integer."},{"content":"Syntax","pos":[1203,1209]},{"content":"Parameters","pos":[1476,1486]},{"content":"String to be converted.","pos":[1499,1522]},{"content":"Locale to use.","pos":[1541,1555]},{"content":"Return Value","pos":[1564,1576]},{"content":"Each function returns the <ph id=\"ph1\">`long long`</ph> value that's produced by interpreting the input characters as a number.","pos":[1580,1689],"source":"Each function returns the `long long` value that's produced by interpreting the input characters as a number."},{"content":"The return value for <ph id=\"ph1\">`atoll`</ph> is 0 if the input cannot be converted to a value of that type.","pos":[1690,1781],"source":" The return value for `atoll` is 0 if the input cannot be converted to a value of that type."},{"pos":[1788,1944],"content":"For overflow with large positive integral values, <ph id=\"ph1\">`atoll`</ph> returns <ph id=\"ph2\">`LLONG_MAX`</ph>, and for overflow with large negative integral values, it returns <ph id=\"ph3\">`LLONG_MIN`</ph>.","source":"For overflow with large positive integral values, `atoll` returns `LLONG_MAX`, and for overflow with large negative integral values, it returns `LLONG_MIN`."},{"content":"In all out-of-range cases, <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`ERANGE`</ph>.","pos":[1951,2005],"source":"In all out-of-range cases, `errno` is set to `ERANGE`."},{"content":"If the parameter that's passed in is <ph id=\"ph1\">`NULL`</ph>, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2006,2181],"source":" If the parameter that's passed in is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and return 0.","pos":[2182,2272],"source":" If execution is allowed to continue, these functions set `errno` to `EINVAL` and return 0."},{"content":"Remarks","pos":[2281,2288]},{"pos":[2292,2366],"content":"These functions convert a character string to a <ph id=\"ph1\">`long long`</ph> integer value.","source":"These functions convert a character string to a `long long` integer value."},{"content":"The input string is a sequence of characters that can be interpreted as a numerical value of the specified type.","pos":[2373,2485]},{"content":"The function stops reading the input string at the first character that it cannot recognize as part of a number.","pos":[2486,2598]},{"content":"This character might be the null character ('\\0' or L'\\0') that terminates the string.","pos":[2599,2685]},{"pos":[2692,2745],"content":"The <ph id=\"ph1\">`str`</ph> argument to <ph id=\"ph2\">`atoll`</ph> has the following form:","source":"The `str` argument to `atoll` has the following form:"},{"pos":[2798,2945],"content":"A <ph id=\"ph1\">`whitespace`</ph> consists of space or tab characters, which are ignored; <ph id=\"ph2\">`sign`</ph> is either plus (+) or minus (–); and <ph id=\"ph3\">`digits`</ph> are one or more digits.","source":"A `whitespace` consists of space or tab characters, which are ignored; `sign` is either plus (+) or minus (–); and `digits` are one or more digits."},{"pos":[2961,3045],"content":"is identical to <ph id=\"ph1\">`atoll`</ph> except that it takes a wide character string as a parameter.","source":" is identical to `atoll` except that it takes a wide character string as a parameter."},{"content":"The versions of these functions that have the <ph id=\"ph1\">`_l`</ph> suffix are identical to the versions that don't have it, except that they use the locale parameter that's passed in instead of the current locale.","pos":[3052,3249],"source":"The versions of these functions that have the `_l` suffix are identical to the versions that don't have it, except that they use the locale parameter that's passed in instead of the current locale."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Locale<ept id=\"p1\">](../../c-runtime-library/locale.md)</ept>.","pos":[3250,3320],"source":" For more information, see [Locale](../../c-runtime-library/locale.md)."},{"content":"Generic-Text Routine Mappings","pos":[3330,3359]},{"content":"Tchar.h routine","pos":[3366,3381]},{"content":"_UNICODE and _MBCS not defined","pos":[3382,3412]},{"content":"_MBCS defined","pos":[3413,3426]},{"content":"_UNICODE defined","pos":[3427,3443]},{"content":"Requirements","pos":[3691,3703]},{"content":"Routines","pos":[3710,3718]},{"content":"Required header","pos":[3719,3734]},{"pos":[3787,3788],"content":","},{"content":"stdlib.h&gt;","pos":[3802,3811],"source":"stdlib.h>"},{"pos":[3824,3825],"content":","},{"content":"stdlib.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[3839,3862],"source":"stdlib.h> or \\<wchar.h>"},{"content":"Example","pos":[3872,3879]},{"pos":[3883,3990],"content":"This program shows how to use the <ph id=\"ph1\">`atoll`</ph> functions to convert numbers stored as strings to numeric values.","source":"This program shows how to use the `atoll` functions to convert numbers stored as strings to numeric values."},{"content":".NET Framework Equivalent","pos":[5286,5311]},{"content":"System::Convert::ToInt64","pos":[5322,5346]},{"content":"System::Convert::ToUInt64","pos":[5428,5453]},{"content":"See Also","pos":[5534,5542]},{"content":"Data Conversion","pos":[5547,5562]},{"content":"Floating-Point Support","pos":[5613,5635]},{"content":"Locale","pos":[5693,5699]},{"content":"_ecvt","pos":[5741,5746]},{"content":"_fcvt","pos":[5796,5801]},{"content":"_gcvt","pos":[5851,5856]},{"content":"setlocale, _wsetlocale","pos":[5906,5928]},{"content":"_atodbl, _atodbl_l, _atoldbl, _atoldbl_l, _atoflt, _atoflt_l","pos":[5994,6054]}],"content":"---\ntitle: \"atoll, _atoll_l, _wtoll, _wtoll_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_wtoll\"\n  - \"_atoll_l\"\n  - \"_wtoll_l\"\n  - \"atoll\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-convert-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_tstoll_l\"\n  - \"_wtoll\"\n  - \"_atoll_l\"\n  - \"_ttoll\"\n  - \"_tstoll\"\n  - \"_wtoll_l\"\n  - \"atoll\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"atoll function\"\n  - \"_wtoll_l function\"\n  - \"_wtoll function\"\n  - \"_atoll_l function\"\nms.assetid: 5e85fcac-b351-4882-bff2-6e7c469b7fa8\ncaps.latest.revision: 7\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# atoll, _atoll_l, _wtoll, _wtoll_l\nConverts a string to a `long long` integer.  \n  \n## Syntax  \n  \n```  \nlong long atoll(  \n   const char *str   \n);  \nlong long _wtoll(  \n   const wchar_t *str   \n);  \nlong long _atoll_l(  \n   const char *str,  \n   _locale_t locale  \n);  \nlong long _wtoll_l(  \n   const wchar_t *str,  \n   _locale_t locale  \n);  \n```  \n  \n#### Parameters  \n `str`  \n String to be converted.  \n  \n `locale`  \n Locale to use.  \n  \n## Return Value  \n Each function returns the `long long` value that's produced by interpreting the input characters as a number. The return value for `atoll` is 0 if the input cannot be converted to a value of that type.  \n  \n For overflow with large positive integral values, `atoll` returns `LLONG_MAX`, and for overflow with large negative integral values, it returns `LLONG_MIN`.  \n  \n In all out-of-range cases, `errno` is set to `ERANGE`. If the parameter that's passed in is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions set `errno` to `EINVAL` and return 0.  \n  \n## Remarks  \n These functions convert a character string to a `long long` integer value.  \n  \n The input string is a sequence of characters that can be interpreted as a numerical value of the specified type. The function stops reading the input string at the first character that it cannot recognize as part of a number. This character might be the null character ('\\0' or L'\\0') that terminates the string.  \n  \n The `str` argument to `atoll` has the following form:  \n  \n```  \n[whitespace] [sign] [digits]  \n```  \n  \n A `whitespace` consists of space or tab characters, which are ignored; `sign` is either plus (+) or minus (–); and `digits` are one or more digits.  \n  \n `_wtoll` is identical to `atoll` except that it takes a wide character string as a parameter.  \n  \n The versions of these functions that have the `_l` suffix are identical to the versions that don't have it, except that they use the locale parameter that's passed in instead of the current locale. For more information, see [Locale](../../c-runtime-library/locale.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_tstoll`|`atoll`|`atoll`|`_wtoll`|  \n|`_tstoll_l`|`_atoll_l`|`_atoll_l`|`_wtoll_l`|  \n|`_ttoll`|`_atoll`|`_atoll`|`_wtoll`|  \n  \n## Requirements  \n  \n|Routines|Required header|  \n|--------------|---------------------|  \n|`atoll`, `_atoll_l`|\\<stdlib.h>|  \n|`_wtoll`, `_wtoll_l`|\\<stdlib.h> or \\<wchar.h>|  \n  \n## Example  \n This program shows how to use the `atoll` functions to convert numbers stored as strings to numeric values.  \n  \n```  \n// crt_atoll.c  \n// Build with: cl /W4 /Tc crt_atoll.c  \n// This program shows how to use the atoll   \n// functions to convert numbers stored as   \n// strings to numeric values.  \n#include <stdlib.h>  \n#include <stdio.h>  \n#include <errno.h>  \n  \nint main(void)  \n{  \n    char *str = NULL;  \n    long long value = 0;  \n  \n    // An example of the atoll function  \n    // with leading and trailing white spaces.  \n    str = \"  -27182818284 \";  \n    value = atoll(str);  \n    printf(\"Function: atoll(\\\"%s\\\") = %lld\\n\", str, value);  \n  \n    // Another example of the atoll function   \n    // with an arbitrary decimal point.  \n    str = \"314127.64\";  \n    value = atoll(str);  \n    printf(\"Function: atoll(\\\"%s\\\") = %lld\\n\", str, value);  \n  \n    // Another example of the atoll function  \n    // with an overflow condition occurring.  \n    str = \"3336402735171707160320\";  \n    value = atoll(str);  \n    printf(\"Function: atoll(\\\"%s\\\") = %lld\\n\", str, value);  \n    if (errno == ERANGE)  \n    {  \n       printf(\"Overflow condition occurred.\\n\");  \n    }  \n}  \n```  \n  \n```Output  \nFunction: atoll(\"  -27182818284 \") = -27182818284  \nFunction: atoll(\"314127.64\") = 314127  \nFunction: atoll(\"3336402735171707160320\") = 9223372036854775807  \nOverflow condition occurred.  \n  \n```  \n  \n## .NET Framework Equivalent  \n  \n-   [System::Convert::ToInt64](https://msdn.microsoft.com/en-us/library/system.convert.toint64.aspx)  \n  \n-   [System::Convert::ToUInt64](https://msdn.microsoft.com/en-us/library/system.convert.touint64.aspx)  \n  \n## See Also  \n [Data Conversion](../../c-runtime-library/data-conversion.md)   \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [Locale](../../c-runtime-library/locale.md)   \n [_ecvt](../../c-runtime-library/reference/ecvt.md)   \n [_fcvt](../../c-runtime-library/reference/fcvt.md)   \n [_gcvt](../../c-runtime-library/reference/gcvt.md)   \n [setlocale, _wsetlocale](../../c-runtime-library/reference/setlocale-wsetlocale.md)   \n [_atodbl, _atodbl_l, _atoldbl, _atoldbl_l, _atoflt, _atoflt_l](../../c-runtime-library/reference/atodbl-atodbl-l-atoldbl-atoldbl-l-atoflt-atoflt-l.md)"}