{"nodes":[{"pos":[12,33],"content":"feof | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"feof | Microsoft Docs","pos":[0,21]}]},{"pos":[924,928],"content":"feof","linkify":"feof","nodes":[{"content":"feof","pos":[0,4]}]},{"content":"Tests for end-of-file on a stream.","pos":[929,963]},{"pos":[972,978],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1041,1051],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to <ph id=\"ph1\">`FILE`</ph> structure.","pos":[1067,1095],"source":" Pointer to `FILE` structure."},{"pos":[1104,1116],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The <ph id=\"ph1\">`feof`</ph> function returns a nonzero value if a read operation has attempted to read past the end of the file; it returns 0 otherwise.","pos":[1120,1255],"source":"The `feof` function returns a nonzero value if a read operation has attempted to read past the end of the file; it returns 0 otherwise."},{"content":"If the stream pointer is <ph id=\"ph1\">`NULL`</ph>, the function invokes the invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1256,1429],"source":" If the stream pointer is `NULL`, the function invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`EINVAL`</ph> and the <ph id=\"ph3\">`feof`</ph> returns 0.","pos":[1430,1519],"source":" If execution is allowed to continue, `errno` is set to `EINVAL` and the `feof` returns 0."},{"pos":[1526,1700],"content":"See <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept> for more information on these, and other, error codes.","source":"See [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) for more information on these, and other, error codes."},{"pos":[1709,1716],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`feof`</ph> routine (implemented both as a function and as a macro) determines whether the end of <ph id=\"ph2\">`stream`</ph> has been passed.","pos":[1720,1842],"source":"The `feof` routine (implemented both as a function and as a macro) determines whether the end of `stream` has been passed."},{"content":"When the end of file is passed, read operations return an end-of-file indicator until the stream is closed or until <ph id=\"ph1\">`rewind`</ph>, <ph id=\"ph2\">`fsetpos`</ph>, <ph id=\"ph3\">`fseek`</ph>, or <ph id=\"ph4\">`clearerr`</ph> is called against it.","pos":[1843,2024],"source":" When the end of file is passed, read operations return an end-of-file indicator until the stream is closed or until `rewind`, `fsetpos`, `fseek`, or `clearerr` is called against it."},{"content":"For example, if a file contains 10 bytes and you read 10 bytes from the file, <ph id=\"ph1\">`feof`</ph> will return 0 because, even though the file pointer is at the end of the file, you have not attempted to read beyond the end.","pos":[2031,2241],"source":"For example, if a file contains 10 bytes and you read 10 bytes from the file, `feof` will return 0 because, even though the file pointer is at the end of the file, you have not attempted to read beyond the end."},{"content":"Only after you try to read an 11th byte will <ph id=\"ph1\">`feof`</ph> return a nonzero value.","pos":[2242,2317],"source":" Only after you try to read an 11th byte will `feof` return a nonzero value."},{"pos":[2326,2338],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Function","pos":[2345,2353]},{"content":"Required header","pos":[2354,2369]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt;","pos":[2422,2432],"source":"\\<stdio.h>"},{"pos":[2440,2564],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[2573,2580],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3437,3456],"content":"Input: crt_feof.txt","linkify":"Input: crt_feof.txt","nodes":[{"content":"Input: crt_feof.txt","pos":[0,19]}]},{"pos":[3505,3511],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[3563,3588],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[3592,3607]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[3608,3655],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[3656,3781],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[3790,3798],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Error Handling<ept id=\"p1\">](../../c-runtime-library/error-handling-crt.md)</ept><ph id=\"ph1\"> </ph>","pos":[3802,3866],"source":"[Error Handling](../../c-runtime-library/error-handling-crt.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Stream I/O<ept id=\"p1\">](../../c-runtime-library/stream-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[3869,3922],"source":" [Stream I/O](../../c-runtime-library/stream-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>clearerr<ept id=\"p1\">](../../c-runtime-library/reference/clearerr.md)</ept><ph id=\"ph1\"> </ph>","pos":[3925,3984],"source":" [clearerr](../../c-runtime-library/reference/clearerr.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_eof<ept id=\"p1\">](../../c-runtime-library/reference/eof.md)</ept><ph id=\"ph1\"> </ph>","pos":[3987,4037],"source":" [_eof](../../c-runtime-library/reference/eof.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ferror<ept id=\"p1\">](../../c-runtime-library/reference/ferror.md)</ept><ph id=\"ph1\"> </ph>","pos":[4040,4095],"source":" [ferror](../../c-runtime-library/reference/ferror.md) "},{"content":"<bpt id=\"p1\"> [</bpt>perror, _wperror<ept id=\"p1\">](../../c-runtime-library/reference/perror-wperror.md)</ept>","pos":[4098,4170],"source":" [perror, _wperror](../../c-runtime-library/reference/perror-wperror.md)"}],"content":"---\ntitle: \"feof | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"feof\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-stdio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"feof\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"end of file, testing for\"\n  - \"feof function\"\nms.assetid: 09081eee-7c4b-4189-861f-2fad95d3ec6d\ncaps.latest.revision: 15\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# feof\nTests for end-of-file on a stream.  \n  \n## Syntax  \n  \n```  \nint feof(   \n   FILE *stream   \n);  \n```  \n  \n#### Parameters  \n `stream`  \n Pointer to `FILE` structure.  \n  \n## Return Value  \n The `feof` function returns a nonzero value if a read operation has attempted to read past the end of the file; it returns 0 otherwise. If the stream pointer is `NULL`, the function invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, `errno` is set to `EINVAL` and the `feof` returns 0.  \n  \n See [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) for more information on these, and other, error codes.  \n  \n## Remarks  \n The `feof` routine (implemented both as a function and as a macro) determines whether the end of `stream` has been passed. When the end of file is passed, read operations return an end-of-file indicator until the stream is closed or until `rewind`, `fsetpos`, `fseek`, or `clearerr` is called against it.  \n  \n For example, if a file contains 10 bytes and you read 10 bytes from the file, `feof` will return 0 because, even though the file pointer is at the end of the file, you have not attempted to read beyond the end. Only after you try to read an 11th byte will `feof` return a nonzero value.  \n  \n## Requirements  \n  \n|Function|Required header|  \n|--------------|---------------------|  \n|`feof`|\\<stdio.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_feof.c  \n// This program uses feof to indicate when  \n// it reaches the end of the file CRT_FEOF.TXT. It also  \n// checks for errors with ferror.  \n//  \n  \n#include <stdio.h>  \n#include <stdlib.h>  \n  \nint main( void )  \n{  \n   int  count, total = 0;  \n   char buffer[100];  \n   FILE *stream;  \n  \n   fopen_s( &stream, \"crt_feof.txt\", \"r\" );  \n   if( stream == NULL )  \n      exit( 1 );  \n  \n   // Cycle until end of file reached:  \n   while( !feof( stream ) )  \n   {  \n      // Attempt to read in 100 bytes:  \n      count = fread( buffer, sizeof( char ), 100, stream );  \n      if( ferror( stream ) )      {  \n         perror( \"Read error\" );  \n         break;  \n      }  \n  \n      // Total up actual bytes read  \n      total += count;  \n   }  \n   printf( \"Number of bytes read = %d\\n\", total );  \n   fclose( stream );  \n}  \n```  \n  \n## Input: crt_feof.txt  \n  \n```  \nLine one.  \nLine two.  \n```  \n  \n### Output  \n  \n```  \nNumber of bytes read = 19  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Error Handling](../../c-runtime-library/error-handling-crt.md)   \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [clearerr](../../c-runtime-library/reference/clearerr.md)   \n [_eof](../../c-runtime-library/reference/eof.md)   \n [ferror](../../c-runtime-library/reference/ferror.md)   \n [perror, _wperror](../../c-runtime-library/reference/perror-wperror.md)"}