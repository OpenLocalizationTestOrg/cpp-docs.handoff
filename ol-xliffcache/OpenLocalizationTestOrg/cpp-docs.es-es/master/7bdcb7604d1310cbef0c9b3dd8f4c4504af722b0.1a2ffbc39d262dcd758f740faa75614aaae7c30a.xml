{"nodes":[{"pos":[12,54],"content":"auto_handle::~auto_handle | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"auto_handle::~auto_handle | Microsoft Docs","pos":[0,42]}]},{"content":"auto_handle::~auto_handle","pos":[762,787]},{"pos":[788,817],"content":"The <ph id=\"ph1\">`auto_handle`</ph> destructor.","source":"The `auto_handle` destructor."},{"content":"Syntax","pos":[826,832]},{"content":"Remarks","pos":[874,881]},{"content":"The destructor also destructs the owned object.","pos":[885,932]},{"content":"Example","pos":[941,948]},{"content":"Requirements","pos":[1611,1623]},{"pos":[1627,1665],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>msclr\\auto_handle.h&gt;","source":"**Header file** \\<msclr\\auto_handle.h>"},{"pos":[1672,1691],"content":"<bpt id=\"p1\">**</bpt>Namespace<ept id=\"p1\">**</ept> msclr","source":"**Namespace** msclr"},{"content":"See Also","pos":[1700,1708]},{"content":"auto_handle Members","pos":[1713,1732]},{"content":"auto_handle::release","pos":[1773,1793]},{"content":"auto_handle::auto_handle","pos":[1834,1858]}],"content":"---\ntitle: \"auto_handle::~auto_handle | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"auto_handle.~auto_handle\"\n  - \"msclr.auto_handle.~auto_handle\"\n  - \"auto_handle::~auto_handle\"\n  - \"~auto_handle\"\n  - \"msclr::auto_handle::~auto_handle\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"auto_handle::~auto_handle\"\nms.assetid: e83e95a8-015b-4f27-ad63-70efb3690726\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# auto_handle::~auto_handle\nThe `auto_handle` destructor.  \n  \n## Syntax  \n  \n```  \n~auto_handle();  \n```  \n  \n## Remarks  \n The destructor also destructs the owned object.  \n  \n## Example  \n  \n```  \n// msl_auto_handle_dtor.cpp  \n// compile with: /clr  \n#include \"msclr\\auto_handle.h\"  \n  \nusing namespace System;  \nusing namespace msclr;  \n  \nref class ClassA {  \npublic:  \n   ClassA() { Console::WriteLine( \"ClassA constructor\" ); }  \n   ~ClassA() { Console::WriteLine( \"ClassA destructor\" ); }  \n};  \n  \nint main()  \n{  \n   // create a new scope for a:  \n   {  \n      auto_handle<ClassA> a = gcnew ClassA;  \n   }  \n   // a goes out of scope here, invoking its destructor  \n   // which in turns destructs the ClassA object.  \n  \n   Console::WriteLine( \"done\" );  \n}  \n```  \n  \n```Output  \nClassA constructor  \nClassA destructor  \ndone  \n```  \n  \n## Requirements  \n **Header file** \\<msclr\\auto_handle.h>  \n  \n **Namespace** msclr  \n  \n## See Also  \n [auto_handle Members](../dotnet/auto-handle-members.md)   \n [auto_handle::release](../dotnet/auto-handle-release.md)   \n [auto_handle::auto_handle](../dotnet/auto-handle-auto-handle.md)"}