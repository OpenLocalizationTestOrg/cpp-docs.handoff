{"nodes":[{"pos":[12,52],"content":"2.6.3 barrier Directive | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"2.6.3 barrier Directive | Microsoft Docs","pos":[0,40]}]},{"content":"2.6.3 barrier Directive","pos":[532,555]},{"content":"The <bpt id=\"p1\">**</bpt>barrier<ept id=\"p1\">**</ept> directive synchronizes all the threads in a team.","pos":[556,621],"source":"The **barrier** directive synchronizes all the threads in a team."},{"content":"When encountered, each thread in the team waits until all of the others have reached this point.","pos":[622,718]},{"content":"The syntax of the <bpt id=\"p1\">**</bpt>barrier<ept id=\"p1\">**</ept> directive is as follows:","pos":[719,773],"source":" The syntax of the **barrier** directive is as follows:"},{"content":"After all threads in the team have encountered the barrier, each thread in the team begins executing the statements after the barrier directive in parallel.","pos":[826,982]},{"content":"Note that because the <bpt id=\"p1\">**</bpt>barrier<ept id=\"p1\">**</ept> directive does not have a C language statement as part of its syntax, there are some restrictions on its placement within a program.","pos":[983,1149],"source":" Note that because the **barrier** directive does not have a C language statement as part of its syntax, there are some restrictions on its placement within a program."},{"content":"See <bpt id=\"p1\">[</bpt>Appendix C<ept id=\"p1\">](../../parallel/openmp/c-openmp-c-and-cpp-grammar.md)</ept> for the formal grammar.","pos":[1150,1243],"source":" See [Appendix C](../../parallel/openmp/c-openmp-c-and-cpp-grammar.md) for the formal grammar."},{"content":"The example below illustrates these restrictions.","pos":[1244,1293]}],"content":"---\ntitle: \"2.6.3 barrier Directive | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: 4485a3d7-533f-4fec-8128-a131bec7fa16\ncaps.latest.revision: 6\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# 2.6.3 barrier Directive\nThe **barrier** directive synchronizes all the threads in a team. When encountered, each thread in the team waits until all of the others have reached this point. The syntax of the **barrier** directive is as follows:  \n  \n```  \n#pragma omp barrier new-line  \n```  \n  \n After all threads in the team have encountered the barrier, each thread in the team begins executing the statements after the barrier directive in parallel. Note that because the **barrier** directive does not have a C language statement as part of its syntax, there are some restrictions on its placement within a program. See [Appendix C](../../parallel/openmp/c-openmp-c-and-cpp-grammar.md) for the formal grammar. The example below illustrates these restrictions.  \n  \n```  \n/* ERROR - The barrier directive cannot be the immediate  \n*          substatement of an if statement  \n*/  \nif (x!=0)  \n   #pragma omp barrier  \n...  \n  \n/* OK - The barrier directive is enclosed in a  \n*      compound statement.  \n*/  \nif (x!=0) {  \n   #pragma omp barrier  \n}  \n```"}