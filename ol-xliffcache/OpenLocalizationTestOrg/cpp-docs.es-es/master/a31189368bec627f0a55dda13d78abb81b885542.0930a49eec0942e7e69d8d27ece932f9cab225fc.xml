{"nodes":[{"pos":[12,35],"content":"fwrite | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"fwrite | Microsoft Docs","pos":[0,23]}]},{"pos":[932,938],"content":"fwrite","linkify":"fwrite","nodes":[{"content":"fwrite","pos":[0,6]}]},{"content":"Writes data to a stream.","pos":[939,963]},{"pos":[972,978],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1107,1117],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to data to be written.","pos":[1133,1163]},{"content":"Item size, in bytes.","pos":[1180,1200]},{"content":"Maximum number of items to be written.","pos":[1218,1256]},{"content":"Pointer to <ph id=\"ph1\">`FILE`</ph> structure.","pos":[1275,1303],"source":" Pointer to `FILE` structure."},{"pos":[1312,1324],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`fwrite`</ph> returns the number of full items actually written, which may be less than <ph id=\"ph2\">`count`</ph> if an error occurs.","pos":[1328,1438],"source":"`fwrite` returns the number of full items actually written, which may be less than `count` if an error occurs."},{"content":"Also, if an error occurs, the file-position indicator cannot be determined.","pos":[1439,1514]},{"content":"If either <ph id=\"ph1\">`stream`</ph> or <ph id=\"ph2\">`buffer`</ph> is a null pointer, or if an odd number of bytes to be written is specified in Unicode mode, the function invokes the invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1515,1778],"source":" If either `stream` or `buffer` is a null pointer, or if an odd number of bytes to be written is specified in Unicode mode, the function invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, this function sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and returns 0.","pos":[1779,1869],"source":" If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns 0."},{"pos":[1878,1885],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`fwrite`</ph> function writes up to <ph id=\"ph2\">`count`</ph> items, of <ph id=\"ph3\">`size`</ph> length each, from <ph id=\"ph4\">`buffer`</ph> to the output <ph id=\"ph5\">`stream`</ph>.","pos":[1889,1999],"source":"The `fwrite` function writes up to `count` items, of `size` length each, from `buffer` to the output `stream`."},{"content":"The file pointer associated with <ph id=\"ph1\">`stream`</ph> (if there is one) is incremented by the number of bytes actually written.","pos":[2000,2115],"source":" The file pointer associated with `stream` (if there is one) is incremented by the number of bytes actually written."},{"content":"If <ph id=\"ph1\">`stream`</ph> is opened in text mode, each linefeed is replaced with a carriage-return – linefeed pair.","pos":[2116,2217],"source":" If `stream` is opened in text mode, each linefeed is replaced with a carriage-return – linefeed pair."},{"content":"The replacement has no effect on the return value.","pos":[2218,2268]},{"content":"When <ph id=\"ph1\">`stream`</ph> is opened in Unicode translation mode—for example, if <ph id=\"ph2\">`stream`</ph> is opened by calling <ph id=\"ph3\">`fopen`</ph> and using a mode parameter that includes <ph id=\"ph4\">`ccs=UNICODE`</ph>, <ph id=\"ph5\">`ccs=UTF-16LE`</ph>, or <ph id=\"ph6\">`ccs=UTF-8`</ph>, or if the mode is changed to a Unicode translation mode by using <ph id=\"ph7\">`_setmode`</ph> and a mode parameter that includes <ph id=\"ph8\">`_O_WTEXT`</ph>, <ph id=\"ph9\">`_O_U16TEXT`</ph>, or <ph id=\"ph10\">`_O_U8TEXT`</ph>—<ph id=\"ph11\">`buffer`</ph> is interpreted as a pointer to an array of <ph id=\"ph12\">`wchar_t`</ph> that contains UTF-16 data.","pos":[2275,2709],"source":"When `stream` is opened in Unicode translation mode—for example, if `stream` is opened by calling `fopen` and using a mode parameter that includes `ccs=UNICODE`, `ccs=UTF-16LE`, or `ccs=UTF-8`, or if the mode is changed to a Unicode translation mode by using `_setmode` and a mode parameter that includes `_O_WTEXT`, `_O_U16TEXT`, or `_O_U8TEXT`—`buffer` is interpreted as a pointer to an array of `wchar_t` that contains UTF-16 data."},{"content":"An attempt to write an odd number of bytes in this mode causes a parameter validation error.","pos":[2710,2802]},{"content":"Because this function locks the calling thread, it is thread-safe.","pos":[2809,2875]},{"content":"For a non-locking version, see <ph id=\"ph1\">`_fwrite_nolock`</ph>.","pos":[2876,2924],"source":" For a non-locking version, see `_fwrite_nolock`."},{"pos":[2933,2945],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Function","pos":[2952,2960]},{"content":"Required header","pos":[2961,2976]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt;","pos":[3031,3041],"source":"\\<stdio.h>"},{"pos":[3049,3153],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[3162,3169],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3173,3245],"content":"See the example for <bpt id=\"p1\">[</bpt>fread<ept id=\"p1\">](../../c-runtime-library/reference/fread.md)</ept>.","source":"See the example for [fread](../../c-runtime-library/reference/fread.md)."},{"pos":[3254,3279],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[3283,3388],"content":"<bpt id=\"p1\">[</bpt>System::IO::FileStream::Write<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.io.filestream.write.aspx)</ept>","source":"[System::IO::FileStream::Write](https://msdn.microsoft.com/en-us/library/system.io.filestream.write.aspx)"},{"pos":[3397,3405],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Stream I/O<ept id=\"p1\">](../../c-runtime-library/stream-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[3409,3461],"source":"[Stream I/O](../../c-runtime-library/stream-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_setmode<ept id=\"p1\">](../../c-runtime-library/reference/setmode.md)</ept><ph id=\"ph1\"> </ph>","pos":[3464,3522],"source":" [_setmode](../../c-runtime-library/reference/setmode.md) "},{"content":"<bpt id=\"p1\"> [</bpt>fread<ept id=\"p1\">](../../c-runtime-library/reference/fread.md)</ept><ph id=\"ph1\"> </ph>","pos":[3525,3578],"source":" [fread](../../c-runtime-library/reference/fread.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_fwrite_nolock<ept id=\"p1\">](../../c-runtime-library/reference/fwrite-nolock.md)</ept><ph id=\"ph1\"> </ph>","pos":[3581,3651],"source":" [_fwrite_nolock](../../c-runtime-library/reference/fwrite-nolock.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_write<ept id=\"p1\">](../../c-runtime-library/reference/write.md)</ept>","pos":[3654,3707],"source":" [_write](../../c-runtime-library/reference/write.md)"}],"content":"---\ntitle: \"fwrite | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"fwrite\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-stdio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"fwrite\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"streams, writing data to\"\n  - \"fwrite function\"\nms.assetid: 7afacf3a-72d7-4a50-ba2e-bea1ab9f4124\ncaps.latest.revision: 18\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# fwrite\nWrites data to a stream.  \n  \n## Syntax  \n  \n```  \nsize_t fwrite(  \n   const void *buffer,  \n   size_t size,  \n   size_t count,  \n   FILE *stream   \n);  \n```  \n  \n#### Parameters  \n `buffer`  \n Pointer to data to be written.  \n  \n `size`  \n Item size, in bytes.  \n  \n `count`  \n Maximum number of items to be written.  \n  \n `stream`  \n Pointer to `FILE` structure.  \n  \n## Return Value  \n `fwrite` returns the number of full items actually written, which may be less than `count` if an error occurs. Also, if an error occurs, the file-position indicator cannot be determined. If either `stream` or `buffer` is a null pointer, or if an odd number of bytes to be written is specified in Unicode mode, the function invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns 0.  \n  \n## Remarks  \n The `fwrite` function writes up to `count` items, of `size` length each, from `buffer` to the output `stream`. The file pointer associated with `stream` (if there is one) is incremented by the number of bytes actually written. If `stream` is opened in text mode, each linefeed is replaced with a carriage-return – linefeed pair. The replacement has no effect on the return value.  \n  \n When `stream` is opened in Unicode translation mode—for example, if `stream` is opened by calling `fopen` and using a mode parameter that includes `ccs=UNICODE`, `ccs=UTF-16LE`, or `ccs=UTF-8`, or if the mode is changed to a Unicode translation mode by using `_setmode` and a mode parameter that includes `_O_WTEXT`, `_O_U16TEXT`, or `_O_U8TEXT`—`buffer` is interpreted as a pointer to an array of `wchar_t` that contains UTF-16 data. An attempt to write an odd number of bytes in this mode causes a parameter validation error.  \n  \n Because this function locks the calling thread, it is thread-safe. For a non-locking version, see `_fwrite_nolock`.  \n  \n## Requirements  \n  \n|Function|Required header|  \n|--------------|---------------------|  \n|`fwrite`|\\<stdio.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n See the example for [fread](../../c-runtime-library/reference/fread.md).  \n  \n## .NET Framework Equivalent  \n [System::IO::FileStream::Write](https://msdn.microsoft.com/en-us/library/system.io.filestream.write.aspx)  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [_setmode](../../c-runtime-library/reference/setmode.md)   \n [fread](../../c-runtime-library/reference/fread.md)   \n [_fwrite_nolock](../../c-runtime-library/reference/fwrite-nolock.md)   \n [_write](../../c-runtime-library/reference/write.md)"}