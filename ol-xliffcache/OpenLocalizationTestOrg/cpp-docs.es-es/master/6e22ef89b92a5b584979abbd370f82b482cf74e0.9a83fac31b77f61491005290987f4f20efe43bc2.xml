{"nodes":[{"pos":[12,61],"content":"Compiler Warning (level 1) C4750 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Warning (level 1) C4750 | Microsoft Docs","pos":[0,49]}]},{"pos":[630,662],"content":"Compiler Warning (level 1) C4750","linkify":"Compiler Warning (level 1) C4750","nodes":[{"content":"Compiler Warning (level 1) C4750","pos":[0,32]}]},{"content":"'identifier': function with _alloca() inlined into a loop","pos":[663,720]},{"pos":[727,924],"content":"The 'identifier' function forces inline expansion of the <bpt id=\"p1\">[</bpt>_alloca<ept id=\"p1\">](../../c-runtime-library/reference/alloca.md)</ept> function within a loop, which might cause a stack overflow when the loop is executed.","source":"The 'identifier' function forces inline expansion of the [_alloca](../../c-runtime-library/reference/alloca.md) function within a loop, which might cause a stack overflow when the loop is executed."},{"pos":[934,955],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"pos":[965,1089],"content":"Ensure that the 'identifier' function is not modified with the <bpt id=\"p1\">[</bpt>__forceinline<ept id=\"p1\">](../../cpp/inline-functions-cpp.md)</ept> specifier.","source":"Ensure that the 'identifier' function is not modified with the [__forceinline](../../cpp/inline-functions-cpp.md) specifier."},{"pos":[1099,1248],"content":"Ensure that the 'identifier' function does not contain a <bpt id=\"p1\">[</bpt>_alloca<ept id=\"p1\">](../../c-runtime-library/reference/alloca.md)</ept> function that is contained in a loop.","source":"Ensure that the 'identifier' function does not contain a [_alloca](../../c-runtime-library/reference/alloca.md) function that is contained in a loop."},{"pos":[1258,1545],"content":"Do not specify the <bpt id=\"p1\">[</bpt>/O1<ept id=\"p1\">](../../build/reference/o1-o2-minimize-size-maximize-speed.md)</ept>, <bpt id=\"p2\">[</bpt>/O2<ept id=\"p2\">](../../build/reference/o1-o2-minimize-size-maximize-speed.md)</ept>, <bpt id=\"p3\">[</bpt>/Ox<ept id=\"p3\">](../../build/reference/ox-full-optimization.md)</ept>, or <bpt id=\"p4\">[</bpt>/Og<ept id=\"p4\">](../../build/reference/og-global-optimizations.md)</ept> compilation switch.","source":"Do not specify the [/O1](../../build/reference/o1-o2-minimize-size-maximize-speed.md), [/O2](../../build/reference/o1-o2-minimize-size-maximize-speed.md), [/Ox](../../build/reference/ox-full-optimization.md), or [/Og](../../build/reference/og-global-optimizations.md) compilation switch."},{"pos":[1555,1725],"content":"Place the <bpt id=\"p1\">[</bpt>_alloca<ept id=\"p1\">](../../c-runtime-library/reference/alloca.md)</ept> function in a <bpt id=\"p2\">[</bpt>try-except statement<ept id=\"p2\">](../../cpp/try-except-statement.md)</ept> that will catch a stack overflow.","source":"Place the [_alloca](../../c-runtime-library/reference/alloca.md) function in a [try-except statement](../../cpp/try-except-statement.md) that will catch a stack overflow."},{"pos":[1734,1741],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example calls <ph id=\"ph1\">`MyFunction`</ph> in a loop, and <ph id=\"ph2\">`MyFunction`</ph> calls the <ph id=\"ph3\">`_alloca`</ph> function.","pos":[1745,1848],"source":"The following code example calls `MyFunction` in a loop, and `MyFunction` calls the `_alloca` function."},{"content":"The <ph id=\"ph1\">`__forceinline`</ph> modifier causes the inline expansion of the <ph id=\"ph2\">`_alloca`</ph> function.","pos":[1849,1932],"source":" The `__forceinline` modifier causes the inline expansion of the `_alloca` function."},{"pos":[2384,2392],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2396,2450],"content":"<bpt id=\"p1\">[</bpt>_alloca<ept id=\"p1\">](../../c-runtime-library/reference/alloca.md)</ept>","source":"[_alloca](../../c-runtime-library/reference/alloca.md)"}],"content":"---\ntitle: \"Compiler Warning (level 1) C4750 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"C4750\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C4750\"\nms.assetid: b0b2c938-7d2a-4c36-8270-7daee15ffee3\ncaps.latest.revision: 5\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Compiler Warning (level 1) C4750\n'identifier': function with _alloca() inlined into a loop  \n  \n The 'identifier' function forces inline expansion of the [_alloca](../../c-runtime-library/reference/alloca.md) function within a loop, which might cause a stack overflow when the loop is executed.  \n  \n### To correct this error  \n  \n1.  Ensure that the 'identifier' function is not modified with the [__forceinline](../../cpp/inline-functions-cpp.md) specifier.  \n  \n2.  Ensure that the 'identifier' function does not contain a [_alloca](../../c-runtime-library/reference/alloca.md) function that is contained in a loop.  \n  \n3.  Do not specify the [/O1](../../build/reference/o1-o2-minimize-size-maximize-speed.md), [/O2](../../build/reference/o1-o2-minimize-size-maximize-speed.md), [/Ox](../../build/reference/ox-full-optimization.md), or [/Og](../../build/reference/og-global-optimizations.md) compilation switch.  \n  \n4.  Place the [_alloca](../../c-runtime-library/reference/alloca.md) function in a [try-except statement](../../cpp/try-except-statement.md) that will catch a stack overflow.  \n  \n## Example  \n The following code example calls `MyFunction` in a loop, and `MyFunction` calls the `_alloca` function. The `__forceinline` modifier causes the inline expansion of the `_alloca` function.  \n  \n```  \n// c4750.cpp  \n// compile with: /O2 /W1 /c  \n#include <intrin.h>  \n  \nchar * volatile newstr;  \n  \n__forceinline void myFunction(void) // C4750 warning  \n{  \n// The _alloca function does not require a __try/__except   \n// block because the example uses compiler option /c.  \n    newstr = (char * volatile) _alloca(1000);  \n}  \n  \nint main(void)  \n{  \n    for (int i=0; i<50000; i++)  \n       myFunction();  \n    return 0;  \n}  \n```  \n  \n## See Also  \n [_alloca](../../c-runtime-library/reference/alloca.md)"}