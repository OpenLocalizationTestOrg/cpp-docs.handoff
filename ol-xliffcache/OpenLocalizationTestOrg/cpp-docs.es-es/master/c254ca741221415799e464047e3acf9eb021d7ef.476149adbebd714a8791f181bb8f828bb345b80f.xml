{"nodes":[{"pos":[12,52],"content":"reference_wrapper Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"reference_wrapper Class | Microsoft Docs","pos":[0,40]}]},{"content":"reference_wrapper Class","pos":[825,848]},{"content":"Wraps a reference.","pos":[849,867]},{"content":"Syntax","pos":[876,882]},{"content":"Remarks","pos":[1410,1417]},{"pos":[1421,1543],"content":"A <ph id=\"ph1\">`reference_wrapper&lt;Ty&gt;`</ph> is copy constructible and assignable, and holds a pointer that points to an object of type <ph id=\"ph2\">`Ty`</ph>.","source":"A `reference_wrapper<Ty>` is copy constructible and assignable, and holds a pointer that points to an object of type `Ty`."},{"pos":[1550,1791],"content":"A specialization <ph id=\"ph1\">`reference_wrapper&lt;Ty&gt;`</ph> is derived from <ph id=\"ph2\">`std::unary_function&lt;T1, Ret&gt;`</ph> (hence defining the nested type <ph id=\"ph3\">`result_type`</ph> as a synonym for <ph id=\"ph4\">`Ret`</ph> and the nested type <ph id=\"ph5\">`argument_type`</ph> as a synonym for <ph id=\"ph6\">`T1`</ph>) only if the type <ph id=\"ph7\">`Ty`</ph> is:","source":"A specialization `reference_wrapper<Ty>` is derived from `std::unary_function<T1, Ret>` (hence defining the nested type `result_type` as a synonym for `Ret` and the nested type `argument_type` as a synonym for `T1`) only if the type `Ty` is:"},{"pos":[1798,1898],"content":"a function type or pointer to function type taking one argument of type <ph id=\"ph1\">`T1`</ph> and returning <ph id=\"ph2\">`Ret`</ph>; or","source":"a function type or pointer to function type taking one argument of type `T1` and returning `Ret`; or"},{"pos":[1905,2041],"content":"a pointer to a member function <ph id=\"ph1\">`Ret T::f() cv`</ph>, where <ph id=\"ph2\">`cv`</ph> represents the member function's cv-qualifiers; the type <ph id=\"ph3\">`T1`</ph> is <ph id=\"ph4\">`cv``T*`</ph>; or","source":"a pointer to a member function `Ret T::f() cv`, where `cv` represents the member function's cv-qualifiers; the type `T1` is `cv``T*`; or"},{"pos":[2048,2108],"content":"a class type that is derived from <ph id=\"ph1\">`unary_function&lt;T1, Ret&gt;`</ph>.","source":"a class type that is derived from `unary_function<T1, Ret>`."},{"pos":[2115,2430],"content":"A specialization <ph id=\"ph1\">`reference_wrapper&lt;Ty&gt;`</ph> is derived from <ph id=\"ph2\">`std::binary_function&lt;T1, T2, Ret&gt;`</ph> (hence defining the nested type <ph id=\"ph3\">`result_type`</ph> as a synonym for <ph id=\"ph4\">`Ret`</ph>, the nested type <ph id=\"ph5\">`first_argument_type`</ph> as a synonym for <ph id=\"ph6\">`T1`</ph>, and the nested type <ph id=\"ph7\">`second_argument_type`</ph> as a synonym for <ph id=\"ph8\">`T2`</ph>) only if the type <ph id=\"ph9\">`Ty`</ph> is:","source":"A specialization `reference_wrapper<Ty>` is derived from `std::binary_function<T1, T2, Ret>` (hence defining the nested type `result_type` as a synonym for `Ret`, the nested type `first_argument_type` as a synonym for `T1`, and the nested type `second_argument_type` as a synonym for `T2`) only if the type `Ty` is:"},{"pos":[2437,2548],"content":"a function type or pointer to function type taking two arguments of types <ph id=\"ph1\">`T1`</ph> and <ph id=\"ph2\">`T2`</ph> and returning <ph id=\"ph3\">`Ret`</ph>; or","source":"a function type or pointer to function type taking two arguments of types `T1` and `T2` and returning `Ret`; or"},{"pos":[2555,2693],"content":"a pointer to a member function <ph id=\"ph1\">`Ret T::f(T2) cv`</ph>, where <ph id=\"ph2\">`cv`</ph> represents the member function's cv-qualifiers; the type <ph id=\"ph3\">`T1`</ph> is <ph id=\"ph4\">`cv``T*`</ph>; or","source":"a pointer to a member function `Ret T::f(T2) cv`, where `cv` represents the member function's cv-qualifiers; the type `T1` is `cv``T*`; or"},{"pos":[2700,2765],"content":"a class type that is derived from <ph id=\"ph1\">`binary_function&lt;T1, T2, Ret&gt;`</ph>.","source":"a class type that is derived from `binary_function<T1, T2, Ret>`."},{"content":"Constructors","pos":[2775,2787]},{"content":"reference_wrapper::reference_wrapper","pos":[2809,2845]},{"pos":[2886,2919],"content":"Constructs a <ph id=\"ph1\">`reference_wrapper`</ph>.","source":"Constructs a `reference_wrapper`."},{"content":"Typedefs","pos":[2930,2938]},{"content":"reference_wrapper::result_type","pos":[2960,2990]},{"content":"The weak result type of the wrapped reference.","pos":[3025,3071]},{"content":"reference_wrapper::type","pos":[3077,3100]},{"content":"The type of the wrapped reference.","pos":[3128,3162]},{"content":"Member Functions","pos":[3173,3189]},{"content":"reference_wrapper::get","pos":[3211,3233]},{"content":"Obtains the wrapped reference.","pos":[3260,3290]},{"content":"Operators","pos":[3301,3310]},{"content":"reference_wrapper::operator Ty","pos":[3332,3362]},{"content":"Gets a pointer to the wrapped reference.","pos":[3407,3447]},{"content":"reference_wrapper::operator()","pos":[3453,3482]},{"content":"Calls the wrapped reference.","pos":[3516,3544]},{"content":"Requirements","pos":[3554,3566]},{"pos":[3570,3595],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>functional&gt;","source":"**Header:** \\<functional>"},{"pos":[3602,3620],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[3669,3691],"content":"reference_wrapper::get"},{"content":"Obtains the wrapped reference.","pos":[3695,3725]},{"content":"Remarks","pos":[3767,3774]},{"pos":[3778,3839],"content":"The member function returns <ph id=\"ph1\">`INVOKE(get(), t1, t2, ..., tN)`</ph>.","source":"The member function returns `INVOKE(get(), t1, t2, ..., tN)`."},{"content":"Example","pos":[3849,3856]},{"pos":[4399,4429],"content":"reference_wrapper::operator Ty"},{"content":"Gets a pointer to the wrapped reference.","pos":[4438,4478]},{"content":"```  operator Ty&amp;() const;","pos":[4484,4510],"source":"```  operator Ty&() const;"},{"pos":[5091,5120],"content":"reference_wrapper::operator()"},{"content":"Calls the wrapped reference.","pos":[5124,5152]},{"content":"Parameters","pos":[5310,5320]},{"content":"The type of the Nth call argument.","pos":[5332,5366]},{"content":"The Nth call argument.","pos":[5381,5403]},{"content":"Remarks","pos":[5413,5420]},{"pos":[5424,5494],"content":"The template member operator returns <ph id=\"ph1\">`INVOKE(get(), t1, t2, ..., tN)`</ph>.","source":"The template member operator returns `INVOKE(get(), t1, t2, ..., tN)`."},{"content":"Example","pos":[5504,5511]},{"pos":[5996,6032],"content":"reference_wrapper::reference_wrapper"},{"pos":[6036,6069],"content":"Constructs a <ph id=\"ph1\">`reference_wrapper`</ph>.","source":"Constructs a `reference_wrapper`."},{"content":"Parameters","pos":[6131,6141]},{"content":"The type to wrap.","pos":[6153,6170]},{"content":"The value to wrap.","pos":[6186,6204]},{"content":"Remarks","pos":[6214,6221]},{"pos":[6225,6279],"content":"The constructor sets the stored value <ph id=\"ph1\">`ptr`</ph> to <ph id=\"ph2\">`&amp;val`</ph>.","source":"The constructor sets the stored value `ptr` to `&val`."},{"content":"Example","pos":[6289,6296]},{"pos":[6911,6941],"content":"reference_wrapper::result_type"},{"content":"The weak result type of the wrapped reference.","pos":[6945,6991]},{"content":"Remarks","pos":[7042,7049]},{"content":"The typedef is a synonym for the weak result type of a wrapped function.","pos":[7053,7125]},{"content":"Example","pos":[7135,7142]},{"pos":[7683,7706],"content":"reference_wrapper::type"},{"content":"The type of the wrapped reference.","pos":[7710,7744]},{"content":"Remarks","pos":[7788,7795]},{"pos":[7799,7855],"content":"The typedef is a synonym for the template argument <ph id=\"ph1\">`Ty`</ph>.","source":"The typedef is a synonym for the template argument `Ty`."},{"content":"Example","pos":[7865,7872]},{"content":"See Also","pos":[8424,8432]},{"content":"cref Function","pos":[8437,8450]},{"content":"ref Function","pos":[8516,8528]}],"content":"---\ntitle: \"reference_wrapper Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.tr1.reference_wrapper\"\n  - \"tr1.reference_wrapper\"\n  - \"reference_wrapper\"\n  - \"tr1::reference_wrapper\"\n  - \"xrefwrap/std::tr1::reference_wrapper\"\n  - \"std::tr1::reference_wrapper\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"reference_wrapper class\"\n  - \"reference_wrapper class [TR1]\"\nms.assetid: 90b8ed62-e6f1-44ed-acc7-9619bd58865a\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# reference_wrapper Class\nWraps a reference.  \n  \n## Syntax  \n  \n```  \ntemplate <class Ty>  \nclass reference_wrapper  \n : public unary_function<T1, Ret>        // see below  \n : public binary_function<T1, T2, Ret>   // see below  \n {  \npublic:  \n    typedef Ty type;  \n    typedef T0 result_type; // see below  \n \n    reference_wrapper(Ty&);\n\n \n    Ty& get() const;\n\n operator Ty&() const;\n\n \n    template <class T1, class T2, ..., class TN>  \ntypename result_of<T(T1, T2, ..., TN)>::type operator()(T1&, T2&, ..., TN&);\n\n \nprivate:  \n    Ty *ptr; // exposition only  \n };  \n```  \n  \n## Remarks  \n A `reference_wrapper<Ty>` is copy constructible and assignable, and holds a pointer that points to an object of type `Ty`.  \n  \n A specialization `reference_wrapper<Ty>` is derived from `std::unary_function<T1, Ret>` (hence defining the nested type `result_type` as a synonym for `Ret` and the nested type `argument_type` as a synonym for `T1`) only if the type `Ty` is:  \n  \n a function type or pointer to function type taking one argument of type `T1` and returning `Ret`; or  \n  \n a pointer to a member function `Ret T::f() cv`, where `cv` represents the member function's cv-qualifiers; the type `T1` is `cv``T*`; or  \n  \n a class type that is derived from `unary_function<T1, Ret>`.  \n  \n A specialization `reference_wrapper<Ty>` is derived from `std::binary_function<T1, T2, Ret>` (hence defining the nested type `result_type` as a synonym for `Ret`, the nested type `first_argument_type` as a synonym for `T1`, and the nested type `second_argument_type` as a synonym for `T2`) only if the type `Ty` is:  \n  \n a function type or pointer to function type taking two arguments of types `T1` and `T2` and returning `Ret`; or  \n  \n a pointer to a member function `Ret T::f(T2) cv`, where `cv` represents the member function's cv-qualifiers; the type `T1` is `cv``T*`; or  \n  \n a class type that is derived from `binary_function<T1, T2, Ret>`.  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[reference_wrapper::reference_wrapper](#reference_wrapper__reference_wrapper)|Constructs a `reference_wrapper`.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[reference_wrapper::result_type](#reference_wrapper__result_type)|The weak result type of the wrapped reference.|  \n|[reference_wrapper::type](#reference_wrapper__type)|The type of the wrapped reference.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[reference_wrapper::get](#reference_wrapper__get)|Obtains the wrapped reference.|  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[reference_wrapper::operator Ty&amp;](#reference_wrapper__operator_ty_amp_)|Gets a pointer to the wrapped reference.|  \n|[reference_wrapper::operator()](#reference_wrapper__operator__)|Calls the wrapped reference.|  \n  \n## Requirements  \n **Header:** \\<functional>  \n  \n **Namespace:** std  \n  \n##  <a name=\"reference_wrapper__get\"></a>  reference_wrapper::get  \n Obtains the wrapped reference.  \n  \n```  \nTy& get() const;\n```  \n  \n### Remarks  \n The member function returns `INVOKE(get(), t1, t2, ..., tN)`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__functional__reference_wrapper_get.cpp   \n// compile with: /EHsc   \n#include <functional>   \n#include <iostream>   \n  \nint main()   \n    {   \n    int i = 1;   \n    std::reference_wrapper<int> rwi(i);   \n  \n    std::cout << \"i = \" << i << std::endl;   \n    std::cout << \"rwi = \" << rwi << std::endl;   \n    rwi.get() = -1;   \n    std::cout << \"i = \" << i << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \ni = 1  \nrwi = 1  \ni = -1  \n```  \n  \n##  <a name=\"reference_wrapper__operator_ty_amp_\"></a>  reference_wrapper::operator Ty&amp;  \n Gets a pointer to the wrapped reference.  \n  \n```  operator Ty&() const;\n```  \n  \n### Parameters  \n  \n### Remarks  \n The member operator returns `*ptr`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__functional__reference_wrapper_operator_cast.cpp   \n// compile with: /EHsc   \n#include <functional>   \n#include <iostream>   \n  \nint main()   \n    {   \n    int i = 1;   \n    std::reference_wrapper<int> rwi(i);   \n  \n    std::cout << \"i = \" << i << std::endl;   \n    std::cout << \"(int)rwi = \" << (int)rwi << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \ni = 1  \n(int)rwi = 1  \n```  \n  \n##  <a name=\"reference_wrapper__operator__\"></a>  reference_wrapper::operator()  \n Calls the wrapped reference.  \n  \n```  \ntemplate <class T1, class T2, ..., class TN>  \ntypename result_of<T(T1, T2, ..., TN)>::type operator()(T1& t1, T2& t2, ..., TN& tN);\n```  \n  \n### Parameters  \n `TN`  \n The type of the Nth call argument.  \n  \n `tN`  \n The Nth call argument.  \n  \n### Remarks  \n The template member operator returns `INVOKE(get(), t1, t2, ..., tN)`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__functional__reference_wrapper_operator_call.cpp   \n// compile with: /EHsc   \n#include <functional>   \n#include <iostream>   \n  \nint neg(int val)   \n    {   \n    return (-val);   \n    }   \n  \nint main()   \n    {   \n    std::reference_wrapper<int (int)> rwi(neg);   \n  \n    std::cout << \"rwi(3) = \" << rwi(3) << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \nrwi(3) = -3  \n```  \n  \n##  <a name=\"reference_wrapper__reference_wrapper\"></a>  reference_wrapper::reference_wrapper  \n Constructs a `reference_wrapper`.  \n  \n```  \nexplicit reference_wrapper(Ty& val);\n```  \n  \n### Parameters  \n `Ty`  \n The type to wrap.  \n  \n `val`  \n The value to wrap.  \n  \n### Remarks  \n The constructor sets the stored value `ptr` to `&val`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__functional__reference_wrapper_reference_wrapper.cpp   \n// compile with: /EHsc   \n#include <functional>   \n#include <iostream>   \n  \nint neg(int val)   \n    {   \n    return (-val);   \n    }   \n  \nint main()   \n    {   \n    int i = 1;   \n    std::reference_wrapper<int> rwi(i);   \n  \n    std::cout << \"i = \" << i << std::endl;   \n    std::cout << \"rwi = \" << rwi << std::endl;   \n    rwi.get() = -1;   \n    std::cout << \"i = \" << i << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \ni = 1  \nrwi = 1  \ni = -1  \n```  \n  \n##  <a name=\"reference_wrapper__result_type\"></a>  reference_wrapper::result_type  \n The weak result type of the wrapped reference.  \n  \n```  \ntypedef T0 result_type;  \n```  \n  \n### Remarks  \n The typedef is a synonym for the weak result type of a wrapped function.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__functional__reference_wrapper_result_type.cpp   \n// compile with: /EHsc   \n#include <functional>   \n#include <iostream>   \n  \nint neg(int val)   \n    {   \n    return (-val);   \n    }   \n  \nint main()   \n    {   \n    typedef std::reference_wrapper<int (int)> Mywrapper;   \n    Mywrapper rwi(neg);   \n    Mywrapper::result_type val = rwi(3);   \n  \n    std::cout << \"val = \" << val << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \nval = -3  \n```  \n  \n##  <a name=\"reference_wrapper__type\"></a>  reference_wrapper::type  \n The type of the wrapped reference.  \n  \n```  \ntypedef Ty type;  \n```  \n  \n### Remarks  \n The typedef is a synonym for the template argument `Ty`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__functional__reference_wrapper_type.cpp   \n// compile with: /EHsc   \n#include <functional>   \n#include <iostream>   \n  \nint neg(int val)   \n    {   \n    return (-val);   \n    }   \n  \nint main()   \n    {   \n    int i = 1;   \n    typedef std::reference_wrapper<int> Mywrapper;   \n    Mywrapper rwi(i);   \n    Mywrapper::type val = rwi.get();   \n  \n    std::cout << \"i = \" << i << std::endl;   \n    std::cout << \"rwi = \" << val << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \ni = 1  \nrwi = 1  \n```  \n  \n## See Also  \n [cref Function](../standard-library/functional-functions.md#cref_function)   \n [ref Function](../standard-library/functional-functions.md#ref_function)\n\n"}