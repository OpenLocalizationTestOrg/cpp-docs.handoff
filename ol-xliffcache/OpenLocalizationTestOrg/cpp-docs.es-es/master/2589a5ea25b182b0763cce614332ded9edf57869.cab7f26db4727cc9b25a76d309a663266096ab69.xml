{"nodes":[{"pos":[12,94],"content":"Walkthrough: Creating a Basic Windows Runtime Component Using WRL | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Walkthrough: Creating a Basic Windows Runtime Component Using WRL | Microsoft Docs","pos":[0,82]}]},{"content":"Walkthrough: Creating a Basic Windows Runtime Component Using WRL","pos":[576,641]},{"content":"This document shows how to use the <ph id=\"ph1\">[!INCLUDE[cppwrl](../windows/includes/cppwrl_md.md)]</ph> (<ph id=\"ph2\">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph>) to create a basic <ph id=\"ph3\">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph> component.","pos":[642,878],"source":"This document shows how to use the [!INCLUDE[cppwrl](../windows/includes/cppwrl_md.md)] ([!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]) to create a basic [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)] component."},{"content":"The component adds two numbers and raises an event when the result is prime.","pos":[879,955]},{"content":"This document also demonstrates how to use the component from a <ph id=\"ph1\">[!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)]</ph> app that uses JavaScript.","pos":[956,1118],"source":" This document also demonstrates how to use the component from a [!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)] app that uses JavaScript."},{"content":"Prerequisites","pos":[1127,1140]},{"pos":[1150,1250],"content":"Experience with the <bpt id=\"p1\">[</bpt>Windows Runtime<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/br211377.aspx)</ept>.","source":"Experience with the [Windows Runtime](http://msdn.microsoft.com/library/windows/apps/br211377.aspx)."},{"content":"Experience with COM.","pos":[1260,1280]},{"pos":[1290,1392],"content":"To create a basic <ph id=\"ph1\">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph> component that adds two numbers","source":"To create a basic [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)] component that adds two numbers"},{"content":"In Visual Studio, create a Visual C++ <ph id=\"ph1\">`WRLClassLibrary`</ph> project.","pos":[1402,1466],"source":"In Visual Studio, create a Visual C++ `WRLClassLibrary` project."},{"content":"The document <bpt id=\"p1\">[</bpt>Class Library Project Template<ept id=\"p1\">](../windows/wrl-class-library-project-template.md)</ept> describes how to download this template.","pos":[1467,1603],"source":" The document [Class Library Project Template](../windows/wrl-class-library-project-template.md) describes how to download this template."},{"content":"Name the project <ph id=\"ph1\">`Contoso`</ph>.","pos":[1604,1631],"source":" Name the project `Contoso`."},{"content":"In Contoso.cpp and Contoso.idl, replace all instances of \"WinRTClass\" with \"Calculator\".","pos":[1641,1729]},{"pos":[1739,1807],"content":"In Contoso.idl, add the <ph id=\"ph1\">`Add`</ph> method to the <ph id=\"ph2\">`ICalculator`</ph> interface.","source":"In Contoso.idl, add the `Add` method to the `ICalculator` interface."},{"pos":[1829,1850],"content":"wrl-basic-component#1"},{"pos":[1961,2048],"content":"In Contoso.cpp, add the <ph id=\"ph1\">`Add`</ph> method to the <ph id=\"ph2\">`public`</ph> section of the <ph id=\"ph3\">`Calculator`</ph> class.","source":"In Contoso.cpp, add the `Add` method to the `public` section of the `Calculator` class."},{"pos":[2070,2091],"content":"wrl-basic-component#2"},{"pos":[2204,2316],"content":"[!IMPORTANT]\n Because you’re creating a COM component, remember to use the `__stdcall` calling convention.","leadings":["","    > "],"nodes":[{"content":"Because you’re creating a COM component, remember to use the <ph id=\"ph1\">`__stdcall`</ph> calling convention.","pos":[14,106],"source":" Because you’re creating a COM component, remember to use the `__stdcall` calling convention."}]},{"content":"We recommend that you use <ph id=\"ph1\">`_Out_`</ph> and other source annotation language (SAL) annotations to describe how a function uses its parameters.","pos":[2327,2463],"source":"We recommend that you use `_Out_` and other source annotation language (SAL) annotations to describe how a function uses its parameters."},{"content":"SAL annotations also describe return values.","pos":[2464,2508]},{"content":"SAL annotations work with the <bpt id=\"p1\">[</bpt>C/C++ Code Analysis tool<ept id=\"p1\">](/visualstudio/code-quality/code-analysis-for-c-cpp-overview)</ept> to discover possible defects in C and C++ source code.","pos":[2509,2681],"source":" SAL annotations work with the [C/C++ Code Analysis tool](/visualstudio/code-quality/code-analysis-for-c-cpp-overview) to discover possible defects in C and C++ source code."},{"content":"Common coding errors that are reported by the tool include buffer overruns, uninitialized memory, null pointer dereferences, and memory and resource leaks.","pos":[2682,2837]},{"pos":[2847,2972],"content":"To use the component from a <ph id=\"ph1\">[!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)]</ph> app that uses JavaScript","source":"To use the component from a [!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)] app that uses JavaScript"},{"content":"In Visual Studio, add a new JavaScript <ph id=\"ph1\">`Blank App`</ph> project to the <ph id=\"ph2\">`Contoso`</ph> solution.","pos":[2982,3067],"source":"In Visual Studio, add a new JavaScript `Blank App` project to the `Contoso` solution."},{"content":"Name the project <ph id=\"ph1\">`CalculatorJS`</ph>.","pos":[3068,3100],"source":" Name the project `CalculatorJS`."},{"pos":[3110,3182],"content":"In the <ph id=\"ph1\">`CalculatorJS`</ph> project, add a reference to the <ph id=\"ph2\">`Contoso`</ph> project.","source":"In the `CalculatorJS` project, add a reference to the `Contoso` project."},{"pos":[3192,3259],"content":"In default.html, replace the <ph id=\"ph1\">`body`</ph> section with these UI elements:","source":"In default.html, replace the `body` section with these UI elements:"},{"pos":[3282,3303],"content":"wrl-basic-component#3"},{"pos":[3416,3464],"content":"In default.js, implement the <ph id=\"ph1\">`OnClick`</ph> function.","source":"In default.js, implement the `OnClick` function."},{"pos":[3493,3514],"content":"wrl-basic-component#4"},{"pos":[3633,3762],"content":"[!NOTE]\n In JavaScript, the first letter of a method name is changed to lowercase to match the standard naming conventions.","leadings":["","    > "],"nodes":[{"content":"In JavaScript, the first letter of a method name is changed to lowercase to match the standard naming conventions.","pos":[9,123]}]},{"content":"To add an event that fires when a prime number is calculated","pos":[3772,3832]},{"pos":[3842,3978],"content":"In Contoso.idl, before the declaration of <ph id=\"ph1\">`ICalculator`</ph>, define the delegate type, <ph id=\"ph2\">`PrimeNumberEvent`</ph>, which provides an <ph id=\"ph3\">`int`</ph> argument.","source":"In Contoso.idl, before the declaration of `ICalculator`, define the delegate type, `PrimeNumberEvent`, which provides an `int` argument."},{"pos":[4000,4021],"content":"wrl-basic-component#5"},{"content":"When you use the <ph id=\"ph1\">`delegate`</ph> keyword, the MIDL compiler creates an interface that contains an <ph id=\"ph2\">`Invoke`</ph> method that matches that delegate's signature.","pos":[4133,4281],"source":"When you use the `delegate` keyword, the MIDL compiler creates an interface that contains an `Invoke` method that matches that delegate's signature."},{"content":"In this example, the generated file Contoso_h.h defines the <ph id=\"ph1\">`IPrimeNumberEvent`</ph> interface, which is used later in this procedure.","pos":[4282,4411],"source":" In this example, the generated file Contoso_h.h defines the `IPrimeNumberEvent` interface, which is used later in this procedure."},{"pos":[4433,4455],"content":"wrl-basic-component#13"},{"content":"In the <ph id=\"ph1\">`ICalculator`</ph> interface, define the <ph id=\"ph2\">`PrimeNumberFound`</ph> event.","pos":[4566,4634],"source":"In the `ICalculator` interface, define the `PrimeNumberFound` event."},{"content":"The <ph id=\"ph1\">`eventadd`</ph> and <ph id=\"ph2\">`eventremove`</ph> attributes specify that the consumer of the <ph id=\"ph3\">`ICalculator`</ph> interface can both subscribe to and unsubscribe from this event.","pos":[4635,4790],"source":" The `eventadd` and `eventremove` attributes specify that the consumer of the `ICalculator` interface can both subscribe to and unsubscribe from this event."},{"pos":[4812,4833],"content":"wrl-basic-component#6"},{"pos":[4944,5116],"content":"In Contoso.cpp, add a <ph id=\"ph1\">`private`</ph> <bpt id=\"p1\">[</bpt>Microsoft::WRL::EventSource<ept id=\"p1\">](../windows/eventsource-class.md)</ept> member variable to manage the event subscribers and invoke the event handler.","source":"In Contoso.cpp, add a `private` [Microsoft::WRL::EventSource](../windows/eventsource-class.md) member variable to manage the event subscribers and invoke the event handler."},{"pos":[5138,5159],"content":"wrl-basic-component#7"},{"pos":[5270,5361],"content":"In Contoso.cpp, implement the <ph id=\"ph1\">`add_PrimeNumberFound`</ph> and <ph id=\"ph2\">`remove_PrimeNumberFound`</ph> methods.","source":"In Contoso.cpp, implement the `add_PrimeNumberFound` and `remove_PrimeNumberFound` methods."},{"pos":[5383,5404],"content":"wrl-basic-component#8"},{"content":"To raise the event when a prime number is calculated","pos":[5515,5567]},{"pos":[5577,5669],"content":"In Contoso.cpp, add the <ph id=\"ph1\">`IsPrime`</ph> method to the <ph id=\"ph2\">`private`</ph> section of the <ph id=\"ph3\">`Calculator`</ph> class.","source":"In Contoso.cpp, add the `IsPrime` method to the `private` section of the `Calculator` class."},{"pos":[5691,5713],"content":"wrl-basic-component#12"},{"pos":[5825,6002],"content":"Modify the <ph id=\"ph1\">`Calculator`</ph>’s <ph id=\"ph2\">`Add`</ph> method to call the <bpt id=\"p1\">[</bpt>Microsoft::WRL::EventSource::InvokeAll<ept id=\"p1\">](../windows/eventsource-invokeall-method.md)</ept> method when a prime number is calculated.","source":"Modify the `Calculator`’s `Add` method to call the [Microsoft::WRL::EventSource::InvokeAll](../windows/eventsource-invokeall-method.md) method when a prime number is calculated."},{"pos":[6024,6046],"content":"wrl-basic-component#11"},{"content":"To handle the event from JavaScript","pos":[6158,6193]},{"pos":[6203,6297],"content":"In default.html, modify the <ph id=\"ph1\">`body`</ph> section to include a text area that contains prime numbers.","source":"In default.html, modify the `body` section to include a text area that contains prime numbers."},{"pos":[6320,6341],"content":"wrl-basic-component#9"},{"content":"In default.js, modify the <ph id=\"ph1\">`Add`</ph> function to handle the <ph id=\"ph2\">`PrimeNumberFound`</ph> event.","pos":[6455,6535],"source":"In default.js, modify the `Add` function to handle the `PrimeNumberFound` event."},{"content":"The event handler appends the prime number to the text area that was defined by the previous step.","pos":[6536,6634]},{"pos":[6663,6685],"content":"wrl-basic-component#10"},{"pos":[6805,6946],"content":"[!NOTE]\n In JavaScript, the event names are changed to lower-case and are prepended with \"on\" to match the standard naming conventions.","leadings":["","    > "],"nodes":[{"content":"In JavaScript, the event names are changed to lower-case and are prepended with \"on\" to match the standard naming conventions.","pos":[9,135]}]},{"content":"The following illustration shows the basic Calculator app.","pos":[6953,7011]},{"content":"Basic calculator app using JavaScript","pos":[7020,7057]},{"content":"Next Steps","pos":[7131,7141]},{"content":"See Also","pos":[7150,7158]},{"content":"Windows Runtime C++ Template Library (WRL)","pos":[7163,7205]},{"content":"Class Library Project Template","pos":[7268,7298]},{"content":"C/C++ Code Analysis tool","pos":[7355,7379]}],"content":"---\ntitle: \"Walkthrough: Creating a Basic Windows Runtime Component Using WRL | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\ndev_langs: \n  - \"C++\"\nms.assetid: 6e3f0986-7905-4f94-90e5-22c2ebfc8cd0\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Walkthrough: Creating a Basic Windows Runtime Component Using WRL\nThis document shows how to use the [!INCLUDE[cppwrl](../windows/includes/cppwrl_md.md)] ([!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]) to create a basic [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)] component. The component adds two numbers and raises an event when the result is prime. This document also demonstrates how to use the component from a [!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)] app that uses JavaScript.  \n  \n## Prerequisites  \n  \n-   Experience with the [Windows Runtime](http://msdn.microsoft.com/library/windows/apps/br211377.aspx).  \n  \n-   Experience with COM.  \n  \n### To create a basic [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)] component that adds two numbers  \n  \n1.  In Visual Studio, create a Visual C++ `WRLClassLibrary` project. The document [Class Library Project Template](../windows/wrl-class-library-project-template.md) describes how to download this template. Name the project `Contoso`.  \n  \n2.  In Contoso.cpp and Contoso.idl, replace all instances of \"WinRTClass\" with \"Calculator\".  \n  \n3.  In Contoso.idl, add the `Add` method to the `ICalculator` interface.  \n  \n     [!code-cpp[wrl-basic-component#1](../windows/codesnippet/CPP/walkthrough-creating-a-basic-windows-runtime-component-using-wrl_1.idl)]  \n  \n4.  In Contoso.cpp, add the `Add` method to the `public` section of the `Calculator` class.  \n  \n     [!code-cpp[wrl-basic-component#2](../windows/codesnippet/CPP/walkthrough-creating-a-basic-windows-runtime-component-using-wrl_2.cpp)]  \n  \n    > [!IMPORTANT]\n    >  Because you’re creating a COM component, remember to use the `__stdcall` calling convention.  \n  \n     We recommend that you use `_Out_` and other source annotation language (SAL) annotations to describe how a function uses its parameters. SAL annotations also describe return values. SAL annotations work with the [C/C++ Code Analysis tool](/visualstudio/code-quality/code-analysis-for-c-cpp-overview) to discover possible defects in C and C++ source code. Common coding errors that are reported by the tool include buffer overruns, uninitialized memory, null pointer dereferences, and memory and resource leaks.  \n  \n### To use the component from a [!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)] app that uses JavaScript  \n  \n1.  In Visual Studio, add a new JavaScript `Blank App` project to the `Contoso` solution. Name the project `CalculatorJS`.  \n  \n2.  In the `CalculatorJS` project, add a reference to the `Contoso` project.  \n  \n3.  In default.html, replace the `body` section with these UI elements:  \n  \n     [!code-html[wrl-basic-component#3](../windows/codesnippet/Html/walkthrough-creating-a-basic-windows-runtime-component-using-wrl_3.html)]  \n  \n4.  In default.js, implement the `OnClick` function.  \n  \n     [!code-javascript[wrl-basic-component#4](../windows/codesnippet/JavaScript/walkthrough-creating-a-basic-windows-runtime-component-using-wrl_4.js)]  \n  \n    > [!NOTE]\n    >  In JavaScript, the first letter of a method name is changed to lowercase to match the standard naming conventions.  \n  \n### To add an event that fires when a prime number is calculated  \n  \n1.  In Contoso.idl, before the declaration of `ICalculator`, define the delegate type, `PrimeNumberEvent`, which provides an `int` argument.  \n  \n     [!code-cpp[wrl-basic-component#5](../windows/codesnippet/CPP/walkthrough-creating-a-basic-windows-runtime-component-using-wrl_5.idl)]  \n  \n     When you use the `delegate` keyword, the MIDL compiler creates an interface that contains an `Invoke` method that matches that delegate's signature. In this example, the generated file Contoso_h.h defines the `IPrimeNumberEvent` interface, which is used later in this procedure.  \n  \n     [!code-cpp[wrl-basic-component#13](../windows/codesnippet/CPP/walkthrough-creating-a-basic-windows-runtime-component-using-wrl_6.cpp)]  \n  \n2.  In the `ICalculator` interface, define the `PrimeNumberFound` event. The `eventadd` and `eventremove` attributes specify that the consumer of the `ICalculator` interface can both subscribe to and unsubscribe from this event.  \n  \n     [!code-cpp[wrl-basic-component#6](../windows/codesnippet/CPP/walkthrough-creating-a-basic-windows-runtime-component-using-wrl_7.idl)]  \n  \n3.  In Contoso.cpp, add a `private` [Microsoft::WRL::EventSource](../windows/eventsource-class.md) member variable to manage the event subscribers and invoke the event handler.  \n  \n     [!code-cpp[wrl-basic-component#7](../windows/codesnippet/CPP/walkthrough-creating-a-basic-windows-runtime-component-using-wrl_8.cpp)]  \n  \n4.  In Contoso.cpp, implement the `add_PrimeNumberFound` and `remove_PrimeNumberFound` methods.  \n  \n     [!code-cpp[wrl-basic-component#8](../windows/codesnippet/CPP/walkthrough-creating-a-basic-windows-runtime-component-using-wrl_9.cpp)]  \n  \n### To raise the event when a prime number is calculated  \n  \n1.  In Contoso.cpp, add the `IsPrime` method to the `private` section of the `Calculator` class.  \n  \n     [!code-cpp[wrl-basic-component#12](../windows/codesnippet/CPP/walkthrough-creating-a-basic-windows-runtime-component-using-wrl_10.cpp)]  \n  \n2.  Modify the `Calculator`’s `Add` method to call the [Microsoft::WRL::EventSource::InvokeAll](../windows/eventsource-invokeall-method.md) method when a prime number is calculated.  \n  \n     [!code-cpp[wrl-basic-component#11](../windows/codesnippet/CPP/walkthrough-creating-a-basic-windows-runtime-component-using-wrl_11.cpp)]  \n  \n### To handle the event from JavaScript  \n  \n1.  In default.html, modify the `body` section to include a text area that contains prime numbers.  \n  \n     [!code-html[wrl-basic-component#9](../windows/codesnippet/Html/walkthrough-creating-a-basic-windows-runtime-component-using-wrl_12.html)]  \n  \n2.  In default.js, modify the `Add` function to handle the `PrimeNumberFound` event. The event handler appends the prime number to the text area that was defined by the previous step.  \n  \n     [!code-javascript[wrl-basic-component#10](../windows/codesnippet/JavaScript/walkthrough-creating-a-basic-windows-runtime-component-using-wrl_13.js)]  \n  \n    > [!NOTE]\n    >  In JavaScript, the event names are changed to lower-case and are prepended with \"on\" to match the standard naming conventions.  \n  \n The following illustration shows the basic Calculator app.  \n  \n ![Basic calculator app using JavaScript](../windows/media/wrl_basic_component.png \"WRL_Basic_Component\")  \n  \n## Next Steps  \n  \n## See Also  \n [Windows Runtime C++ Template Library (WRL)](../windows/windows-runtime-cpp-template-library-wrl.md)   \n [Class Library Project Template](../windows/wrl-class-library-project-template.md)   \n [C/C++ Code Analysis tool](/visualstudio/code-quality/code-analysis-for-c-cpp-overview)"}