{"nodes":[{"pos":[12,57],"content":"condition_variable_any Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"condition_variable_any Class | Microsoft Docs","pos":[0,45]}]},{"pos":[605,633],"content":"condition_variable_any Class","linkify":"condition_variable_any Class","nodes":[{"content":"condition_variable_any Class","pos":[0,28]}]},{"pos":[634,720],"content":"Use the class <ph id=\"ph1\">`condition_variable_any`</ph> to wait for an event that has any <ph id=\"ph2\">`mutex`</ph> type.","source":"Use the class `condition_variable_any` to wait for an event that has any `mutex` type."},{"pos":[729,735],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[787,794],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[804,823],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[830,834]},{"content":"Description","pos":[835,846]},{"pos":[884,1005],"content":"<bpt id=\"p1\">[</bpt>condition_variable_any::condition_variable_any Constructor<ept id=\"p1\">](#condition_variable_any__condition_variable_any_constructor)</ept>","source":"[condition_variable_any::condition_variable_any Constructor](#condition_variable_any__condition_variable_any_constructor)"},{"pos":[1006,1051],"content":"Constructs a <ph id=\"ph1\">`condition_variable_any`</ph> object.","source":"Constructs a `condition_variable_any` object."},{"pos":[1062,1076],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1083,1087]},{"content":"Description","pos":[1088,1099]},{"pos":[1137,1217],"content":"<bpt id=\"p1\">[</bpt>condition_variable_any::notify_all<ept id=\"p1\">](#condition_variable_any__notify_all_method)</ept>","source":"[condition_variable_any::notify_all](#condition_variable_any__notify_all_method)"},{"pos":[1218,1296],"content":"Unblocks all threads that are waiting for the <ph id=\"ph1\">`condition_variable_any`</ph> object.","source":"Unblocks all threads that are waiting for the `condition_variable_any` object."},{"pos":[1301,1381],"content":"<bpt id=\"p1\">[</bpt>condition_variable_any::notify_one<ept id=\"p1\">](#condition_variable_any__notify_one_method)</ept>","source":"[condition_variable_any::notify_one](#condition_variable_any__notify_one_method)"},{"pos":[1382,1467],"content":"Unblocks one of the threads that are waiting for the <ph id=\"ph1\">`condition_variable_any`</ph> object.","source":"Unblocks one of the threads that are waiting for the `condition_variable_any` object."},{"pos":[1472,1540],"content":"<bpt id=\"p1\">[</bpt>condition_variable_any::wait<ept id=\"p1\">](#condition_variable_any__wait_method)</ept>","source":"[condition_variable_any::wait](#condition_variable_any__wait_method)"},{"content":"Blocks a thread.","pos":[1541,1557]},{"pos":[1562,1638],"content":"<bpt id=\"p1\">[</bpt>condition_variable_any::wait_for<ept id=\"p1\">](#condition_variable_any__wait_for_method)</ept>","source":"[condition_variable_any::wait_for](#condition_variable_any__wait_for_method)"},{"content":"Blocks a thread, and sets a time interval after which the thread unblocks.","pos":[1639,1713]},{"pos":[1718,1798],"content":"<bpt id=\"p1\">[</bpt>condition_variable_any::wait_until<ept id=\"p1\">](#condition_variable_any__wait_until_method)</ept>","source":"[condition_variable_any::wait_until](#condition_variable_any__wait_until_method)"},{"content":"Blocks a thread, and sets a maximum point in time at which the thread unblocks.","pos":[1799,1878]},{"pos":[1888,1900],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1904,1934],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> condition_variable","source":"**Header:** condition_variable"},{"pos":[1941,1959],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[1969,2102],"content":"<bpt id=\"p1\">&lt;a name=\"condition_variable_any__condition_variable_any_constructor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  condition_variable_any::condition_variable_any Constructor","linkify":"<a name=\"condition_variable_any__condition_variable_any_constructor\"></a>  condition_variable_any::condition_variable_any Constructor","source":"<a name=\"condition_variable_any__condition_variable_any_constructor\"></a>  condition_variable_any::condition_variable_any Constructor"},{"pos":[2106,2151],"content":"Constructs a <ph id=\"ph1\">`condition_variable_any`</ph> object.","source":"Constructs a `condition_variable_any` object."},{"pos":[2200,2207],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If not enough memory is available, the constructor throws a <bpt id=\"p1\">[</bpt>system_error<ept id=\"p1\">](../standard-library/system-error-class.md)</ept> object that has a <ph id=\"ph1\">`not_enough_memory`</ph> error code.","pos":[2211,2378],"source":"If not enough memory is available, the constructor throws a [system_error](../standard-library/system-error-class.md) object that has a `not_enough_memory` error code."},{"content":"If the object cannot be constructed because some other resource is not available, the constructor throws a <ph id=\"ph1\">`system_error`</ph> object that has a <ph id=\"ph2\">`resource_unavailable_try_again`</ph> error code.","pos":[2379,2563],"source":" If the object cannot be constructed because some other resource is not available, the constructor throws a `system_error` object that has a `resource_unavailable_try_again` error code."},{"pos":[2573,2665],"content":"<bpt id=\"p1\">&lt;a name=\"condition_variable_any__notify_all_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  condition_variable_any::notify_all","linkify":"<a name=\"condition_variable_any__notify_all_method\"></a>  condition_variable_any::notify_all","source":"<a name=\"condition_variable_any__notify_all_method\"></a>  condition_variable_any::notify_all"},{"pos":[2669,2747],"content":"Unblocks all threads that are waiting for the <ph id=\"ph1\">`condition_variable_any`</ph> object.","source":"Unblocks all threads that are waiting for the `condition_variable_any` object."},{"pos":[2798,2890],"content":"<bpt id=\"p1\">&lt;a name=\"condition_variable_any__notify_one_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  condition_variable_any::notify_one","linkify":"<a name=\"condition_variable_any__notify_one_method\"></a>  condition_variable_any::notify_one","source":"<a name=\"condition_variable_any__notify_one_method\"></a>  condition_variable_any::notify_one"},{"pos":[2894,2978],"content":"Unblocks one of the threads that are waiting on the <ph id=\"ph1\">`condition_variable_any`</ph> object.","source":"Unblocks one of the threads that are waiting on the `condition_variable_any` object."},{"pos":[3029,3109],"content":"<bpt id=\"p1\">&lt;a name=\"condition_variable_any__wait_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  condition_variable_any::wait","linkify":"<a name=\"condition_variable_any__wait_method\"></a>  condition_variable_any::wait","source":"<a name=\"condition_variable_any__wait_method\"></a>  condition_variable_any::wait"},{"content":"Blocks a thread.","pos":[3113,3129]},{"pos":[3276,3286],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <ph id=\"ph1\">`mutex`</ph> object of any type.","pos":[3299,3328],"source":" A `mutex` object of any type."},{"content":"Any expression that returns <ph id=\"ph1\">`true`</ph> or <ph id=\"ph2\">`false`</ph>.","pos":[3345,3391],"source":" Any expression that returns `true` or `false`."},{"pos":[3401,3408],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The first method blocks until the <ph id=\"ph1\">`condition_variable_any`</ph> object is signaled by a call to <bpt id=\"p1\">[</bpt>notify_one<ept id=\"p1\">](../standard-library/condition-variable-class.md#condition_variable__notify_one_method)</ept> or <bpt id=\"p2\">[</bpt>notify_all<ept id=\"p2\">](../standard-library/condition-variable-class.md#condition_variable__notify_all_method)</ept>.","pos":[3412,3706],"source":"The first method blocks until the `condition_variable_any` object is signaled by a call to [notify_one](../standard-library/condition-variable-class.md#condition_variable__notify_one_method) or [notify_all](../standard-library/condition-variable-class.md#condition_variable__notify_all_method)."},{"content":"It can also wake up spuriously.","pos":[3707,3738]},{"content":"The second method in effect executes the following code.","pos":[3745,3801]},{"pos":[3857,3945],"content":"<bpt id=\"p1\">&lt;a name=\"condition_variable_any__wait_for_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  condition_variable_any::wait_for","linkify":"<a name=\"condition_variable_any__wait_for_method\"></a>  condition_variable_any::wait_for","source":"<a name=\"condition_variable_any__wait_for_method\"></a>  condition_variable_any::wait_for"},{"content":"Blocks a thread, and sets a time interval after which the thread unblocks.","pos":[3949,4023]},{"pos":[4320,4330],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <ph id=\"ph1\">`mutex`</ph> object of any type.","pos":[4343,4372],"source":" A `mutex` object of any type."},{"content":"A <ph id=\"ph1\">`chrono::duration`</ph> object that specifies the amount of time before the thread wakes up.","pos":[4393,4482],"source":" A `chrono::duration` object that specifies the amount of time before the thread wakes up."},{"content":"Any expression that returns <ph id=\"ph1\">`true`</ph> or <ph id=\"ph2\">`false`</ph>.","pos":[4499,4545],"source":" Any expression that returns `true` or `false`."},{"pos":[4555,4567],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The first method returns <ph id=\"ph1\">`cv_status::timeout`</ph> if the wait terminates when <ph id=\"ph2\">`Rel_time`</ph> has elapsed.","pos":[4571,4668],"source":"The first method returns `cv_status::timeout` if the wait terminates when `Rel_time` has elapsed."},{"content":"Otherwise, the method returns <ph id=\"ph1\">`cv_status::no_timeout`</ph>.","pos":[4669,4723],"source":" Otherwise, the method returns `cv_status::no_timeout`."},{"pos":[4730,4776],"content":"The second method returns the value of <ph id=\"ph1\">`Pred`</ph>.","source":"The second method returns the value of `Pred`."},{"pos":[4786,4793],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The first method blocks until the <ph id=\"ph1\">`condition_variable_any`</ph> object is signaled by a call to <bpt id=\"p1\">[</bpt>notify_one<ept id=\"p1\">](../standard-library/condition-variable-class.md#condition_variable__notify_one_method)</ept> or <bpt id=\"p2\">[</bpt>notify_all<ept id=\"p2\">](../standard-library/condition-variable-class.md#condition_variable__notify_all_method)</ept>, or until the time interval <ph id=\"ph2\">`Rel_time`</ph> has elapsed.","pos":[4797,5142],"source":"The first method blocks until the `condition_variable_any` object is signaled by a call to [notify_one](../standard-library/condition-variable-class.md#condition_variable__notify_one_method) or [notify_all](../standard-library/condition-variable-class.md#condition_variable__notify_all_method), or until the time interval `Rel_time` has elapsed."},{"content":"It can also wake up spuriously.","pos":[5143,5174]},{"content":"The second method in effect executes the following code.","pos":[5181,5237]},{"pos":[5365,5457],"content":"<bpt id=\"p1\">&lt;a name=\"condition_variable_any__wait_until_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  condition_variable_any::wait_until","linkify":"<a name=\"condition_variable_any__wait_until_method\"></a>  condition_variable_any::wait_until","source":"<a name=\"condition_variable_any__wait_until_method\"></a>  condition_variable_any::wait_until"},{"content":"Blocks a thread, and sets a maximum point in time at which the thread unblocks.","pos":[5461,5540]},{"pos":[6066,6076],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A mutex object.","pos":[6089,6104]},{"content":"A <bpt id=\"p1\">[</bpt>chrono::time_point<ept id=\"p1\">](../standard-library/time-point-class.md)</ept> object.","pos":[6125,6196],"source":" A [chrono::time_point](../standard-library/time-point-class.md) object."},{"content":"Any expression that returns <ph id=\"ph1\">`true`</ph> or <ph id=\"ph2\">`false`</ph>.","pos":[6213,6259],"source":" Any expression that returns `true` or `false`."},{"pos":[6269,6281],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Methods that return a <ph id=\"ph1\">`cv_status`</ph> type return <ph id=\"ph2\">`cv_status::timeout`</ph> if the wait terminates when <ph id=\"ph3\">`Abs_time`</ph> elapses.","pos":[6285,6399],"source":"Methods that return a `cv_status` type return `cv_status::timeout` if the wait terminates when `Abs_time` elapses."},{"content":"Otherwise, the methods return <ph id=\"ph1\">`cv_status::no_timeout`</ph>.","pos":[6400,6454],"source":" Otherwise, the methods return `cv_status::no_timeout`."},{"pos":[6461,6517],"content":"Methods that return a <ph id=\"ph1\">`bool`</ph> return the value of <ph id=\"ph2\">`Pred`</ph>.","source":"Methods that return a `bool` return the value of `Pred`."},{"pos":[6527,6534],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The first method blocks until the <ph id=\"ph1\">`condition_variable`</ph> object is signaled by a call to <bpt id=\"p1\">[</bpt>notify_one<ept id=\"p1\">](../standard-library/condition-variable-class.md#condition_variable__notify_one_method)</ept> or <bpt id=\"p2\">[</bpt>notify_all<ept id=\"p2\">](../standard-library/condition-variable-class.md#condition_variable__notify_all_method)</ept>, or until <ph id=\"ph2\">`Abs_time`</ph>.","pos":[6538,6849],"source":"The first method blocks until the `condition_variable` object is signaled by a call to [notify_one](../standard-library/condition-variable-class.md#condition_variable__notify_one_method) or [notify_all](../standard-library/condition-variable-class.md#condition_variable__notify_all_method), or until `Abs_time`."},{"content":"It can also wake up spuriously.","pos":[6850,6881]},{"content":"The second method in effect executes the following code.","pos":[6888,6944]},{"content":"The third and fourth methods use a pointer to an object of type <ph id=\"ph1\">`xtime`</ph> to replace the <ph id=\"ph2\">`chrono::time_point`</ph> object.","pos":[7068,7183],"source":"The third and fourth methods use a pointer to an object of type `xtime` to replace the `chrono::time_point` object."},{"content":"The <ph id=\"ph1\">`xtime`</ph> object specifies the maximum amount of time to wait for a signal.","pos":[7184,7261],"source":" The `xtime` object specifies the maximum amount of time to wait for a signal."},{"pos":[7270,7278],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Header Files Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-header-files.md)</ept><ph id=\"ph1\"> </ph>","pos":[7282,7365],"source":"[Header Files Reference](../standard-library/cpp-standard-library-header-files.md) "},{"content":"<bpt id=\"p1\"> [</bpt>&lt;condition_variable&gt;<ept id=\"p1\">](../standard-library/condition-variable.md)</ept>","pos":[7368,7434],"source":" [<condition_variable>](../standard-library/condition-variable.md)"}],"content":"---\ntitle: \"condition_variable_any Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"condition_variable/std::condition_variable_any\"\ndev_langs: \n  - \"C++\"\nms.assetid: d8afe5db-1561-4ec2-8e85-21ea03ee4321\ncaps.latest.revision: 15\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# condition_variable_any Class\nUse the class `condition_variable_any` to wait for an event that has any `mutex` type.  \n  \n## Syntax  \n  \n```\nclass condition_variable_any;\n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[condition_variable_any::condition_variable_any Constructor](#condition_variable_any__condition_variable_any_constructor)|Constructs a `condition_variable_any` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[condition_variable_any::notify_all](#condition_variable_any__notify_all_method)|Unblocks all threads that are waiting for the `condition_variable_any` object.|  \n|[condition_variable_any::notify_one](#condition_variable_any__notify_one_method)|Unblocks one of the threads that are waiting for the `condition_variable_any` object.|  \n|[condition_variable_any::wait](#condition_variable_any__wait_method)|Blocks a thread.|  \n|[condition_variable_any::wait_for](#condition_variable_any__wait_for_method)|Blocks a thread, and sets a time interval after which the thread unblocks.|  \n|[condition_variable_any::wait_until](#condition_variable_any__wait_until_method)|Blocks a thread, and sets a maximum point in time at which the thread unblocks.|  \n  \n## Requirements  \n **Header:** condition_variable  \n  \n **Namespace:** std  \n  \n##  <a name=\"condition_variable_any__condition_variable_any_constructor\"></a>  condition_variable_any::condition_variable_any Constructor  \n Constructs a `condition_variable_any` object.  \n  \n```\ncondition_variable_any();\n```  \n  \n### Remarks  \n If not enough memory is available, the constructor throws a [system_error](../standard-library/system-error-class.md) object that has a `not_enough_memory` error code. If the object cannot be constructed because some other resource is not available, the constructor throws a `system_error` object that has a `resource_unavailable_try_again` error code.  \n  \n##  <a name=\"condition_variable_any__notify_all_method\"></a>  condition_variable_any::notify_all  \n Unblocks all threads that are waiting for the `condition_variable_any` object.  \n  \n```\nvoid notify_all() noexcept;\n```  \n  \n##  <a name=\"condition_variable_any__notify_one_method\"></a>  condition_variable_any::notify_one  \n Unblocks one of the threads that are waiting on the `condition_variable_any` object.  \n  \n```\nvoid notify_one() noexcept;\n```  \n  \n##  <a name=\"condition_variable_any__wait_method\"></a>  condition_variable_any::wait  \n Blocks a thread.  \n  \n```\ntemplate <class Lock>  \nvoid wait(Lock& Lck);\n\ntemplate <class Lock, class Predicate>\nvoid wait(Lock& Lck, Predicate Pred);\n```  \n  \n### Parameters  \n `Lck`  \n A `mutex` object of any type.  \n  \n `Pred`  \n Any expression that returns `true` or `false`.  \n  \n### Remarks  \n The first method blocks until the `condition_variable_any` object is signaled by a call to [notify_one](../standard-library/condition-variable-class.md#condition_variable__notify_one_method) or [notify_all](../standard-library/condition-variable-class.md#condition_variable__notify_all_method). It can also wake up spuriously.  \n  \n The second method in effect executes the following code.  \n  \n```\nwhile (!Pred())\n    wait(Lck);\n```    \n  \n##  <a name=\"condition_variable_any__wait_for_method\"></a>  condition_variable_any::wait_for  \n Blocks a thread, and sets a time interval after which the thread unblocks.  \n  \n```\ntemplate <class Lock, class Rep, class Period>\nbool wait_for(Lock& Lck, const chrono::duration<Rep, Period>& Rel_time);\n\ntemplate <class Lock, class Rep, class Period, class Predicate>\nbool wait_for(Lock& Lck, const chrono::duration<Rep, Period>& Rel_time, Predicate Pred);\n```  \n  \n### Parameters  \n `Lck`  \n A `mutex` object of any type.  \n  \n `Rel_time`  \n A `chrono::duration` object that specifies the amount of time before the thread wakes up.  \n  \n `Pred`  \n Any expression that returns `true` or `false`.  \n  \n### Return Value  \n The first method returns `cv_status::timeout` if the wait terminates when `Rel_time` has elapsed. Otherwise, the method returns `cv_status::no_timeout`.  \n  \n The second method returns the value of `Pred`.  \n  \n### Remarks  \n The first method blocks until the `condition_variable_any` object is signaled by a call to [notify_one](../standard-library/condition-variable-class.md#condition_variable__notify_one_method) or [notify_all](../standard-library/condition-variable-class.md#condition_variable__notify_all_method), or until the time interval `Rel_time` has elapsed. It can also wake up spuriously.  \n  \n The second method in effect executes the following code.  \n  \n```cpp\nwhile(!Pred())\n    if(wait_for(Lck, Rel_time) == cv_status::timeout)\n    return Pred();\n\nreturn true;\n```  \n  \n##  <a name=\"condition_variable_any__wait_until_method\"></a>  condition_variable_any::wait_until  \n Blocks a thread, and sets a maximum point in time at which the thread unblocks.  \n  \n```\ntemplate <class Lock, class Clock, class Duration>\nvoid wait_until(Lock& Lck, const chrono::time_point<Clock, Duration>& Abs_time);\n\ntemplate <class Lock, class Clock, class Duration, class Predicate>\nvoid wait_until(\n    Lock& Lck,\n    const chrono::time_point<Clock, Duration>& Abs_time,\n    Predicate Pred);\n\ntemplate <class Lock>\nvoid wait_until(Lock Lck, const xtime* Abs_time);\n\ntemplate <class Lock, class Predicate>\nvoid wait_until(\n    Lock Lck,\n    const xtime* Abs_time,\n    Predicate Pred);\n```  \n  \n### Parameters  \n `Lck`  \n A mutex object.  \n  \n `Abs_time`  \n A [chrono::time_point](../standard-library/time-point-class.md) object.  \n  \n `Pred`  \n Any expression that returns `true` or `false`.  \n  \n### Return Value  \n Methods that return a `cv_status` type return `cv_status::timeout` if the wait terminates when `Abs_time` elapses. Otherwise, the methods return `cv_status::no_timeout`.  \n  \n Methods that return a `bool` return the value of `Pred`.  \n  \n### Remarks  \n The first method blocks until the `condition_variable` object is signaled by a call to [notify_one](../standard-library/condition-variable-class.md#condition_variable__notify_one_method) or [notify_all](../standard-library/condition-variable-class.md#condition_variable__notify_all_method), or until `Abs_time`. It can also wake up spuriously.  \n  \n The second method in effect executes the following code.  \n  \n```\nwhile(!Pred())\n    if(wait_until(Lck, Abs_time) == cv_status::timeout)\n    return Pred();\n\nreturn true;\n```  \n  \n The third and fourth methods use a pointer to an object of type `xtime` to replace the `chrono::time_point` object. The `xtime` object specifies the maximum amount of time to wait for a signal.  \n  \n## See Also  \n [Header Files Reference](../standard-library/cpp-standard-library-header-files.md)   \n [<condition_variable>](../standard-library/condition-variable.md)\n\n\n\n"}