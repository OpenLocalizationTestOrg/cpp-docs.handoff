{"nodes":[{"pos":[12,52],"content":"ctype&lt;char&gt; Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ctype<ph id=\"ph1\">&amp;lt;</ph>char<ph id=\"ph2\">&amp;gt;</ph> Class | Microsoft Docs","pos":[0,40],"source":"ctype&lt;char&gt; Class | Microsoft Docs"}]},{"pos":[686,709],"content":"ctype&lt;char&gt; Class","linkify":"ctype&lt;char&gt; Class","nodes":[{"content":"ctype<ph id=\"ph1\">&amp;lt;</ph>char<ph id=\"ph2\">&amp;gt;</ph> Class","pos":[0,23],"source":"ctype&lt;char&gt; Class"}]},{"pos":[710,924],"content":"The class is an explicit specialization of template class <bpt id=\"p1\">**</bpt>ctype<ph id=\"ph1\">\\&lt;</ph>CharType<ept id=\"p1\">**</ept>&gt; to type <ph id=\"ph2\">`char`</ph>, describing an object that can serve as a locale facet to characterize various properties of a character of type <ph id=\"ph3\">`char`</ph>.","source":"The class is an explicit specialization of template class **ctype\\<CharType**> to type `char`, describing an object that can serve as a locale facet to characterize various properties of a character of type `char`."},{"pos":[933,939],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[2515,2522],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The explicit specialization differs from the template class in several ways:","pos":[2526,2602]},{"content":"An object of class ctype&lt; <ph id=\"ph1\">`char`</ph>&gt; stores a pointer to the first element of a ctype mask table, an array of UCHAR_MAX + 1 elements of type <bpt id=\"p1\">**</bpt>ctype_base::mask<ept id=\"p1\">**</ept>.","pos":[2612,2771],"source":"An object of class ctype< `char`> stores a pointer to the first element of a ctype mask table, an array of UCHAR_MAX + 1 elements of type **ctype_base::mask**."},{"content":"It also stores a Boolean object that indicates whether the array should be deleted (using <ph id=\"ph1\">`operator delete[]`</ph>) when the ctype<ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p1\">**</bpt>Elem<ept id=\"p1\">**</ept>&gt; object is destroyed.","pos":[2772,2930],"source":" It also stores a Boolean object that indicates whether the array should be deleted (using `operator delete[]`) when the ctype\\< **Elem**> object is destroyed."},{"pos":[2940,3183],"content":"Its sole public constructor lets you specify <bpt id=\"p1\">**</bpt>tab<ept id=\"p1\">**</ept>, the ctype mask table, and <bpt id=\"p2\">**</bpt>del<ept id=\"p2\">**</ept>, the Boolean object that is true if the array should be deleted when the ctype&lt; <ph id=\"ph1\">`char`</ph>&gt; object is destroyed, as well as the reference-count parameter refs.","source":"Its sole public constructor lets you specify **tab**, the ctype mask table, and **del**, the Boolean object that is true if the array should be deleted when the ctype< `char`> object is destroyed, as well as the reference-count parameter refs."},{"pos":[3193,3269],"content":"The protected member function <bpt id=\"p1\">**</bpt>table<ept id=\"p1\">**</ept> returns the stored ctype mask table.","source":"The protected member function **table** returns the stored ctype mask table."},{"pos":[3279,3382],"content":"The static member object <bpt id=\"p1\">**</bpt>table_size<ept id=\"p1\">**</ept> specifies the minimum number of elements in a ctype mask table.","source":"The static member object **table_size** specifies the minimum number of elements in a ctype mask table."},{"pos":[3392,3507],"content":"The protected static member function <bpt id=\"p1\">**</bpt>classic_table<ept id=\"p1\">**</ept>( returns the ctype mask table appropriate to the \"C\" locale.","source":"The protected static member function **classic_table**( returns the ctype mask table appropriate to the \"C\" locale."},{"content":"There are no protected virtual member functions <bpt id=\"p1\">[</bpt>do_is<ept id=\"p1\">](../standard-library/ctype-class.md#ctype__do_is)</ept>, <bpt id=\"p2\">[</bpt>do_scan_is<ept id=\"p2\">](../standard-library/ctype-class.md#ctype__do_scan_is)</ept>, or <bpt id=\"p3\">[</bpt>do_scan_not<ept id=\"p3\">](../standard-library/ctype-class.md#ctype__do_scan_not)</ept>.","pos":[3517,3763],"source":"There are no protected virtual member functions [do_is](../standard-library/ctype-class.md#ctype__do_is), [do_scan_is](../standard-library/ctype-class.md#ctype__do_scan_is), or [do_scan_not](../standard-library/ctype-class.md#ctype__do_scan_not)."},{"content":"The corresponding public member functions perform the equivalent operations themselves.","pos":[3764,3851]},{"pos":[3858,4035],"content":"The member functions <bpt id=\"p1\">[</bpt>do_narrow<ept id=\"p1\">](../standard-library/ctype-class.md#ctype__do_narrow)</ept> and <bpt id=\"p2\">[</bpt>do_widen<ept id=\"p2\">](../standard-library/ctype-class.md#ctype__do_widen)</ept> copy elements unaltered.","source":"The member functions [do_narrow](../standard-library/ctype-class.md#ctype__do_narrow) and [do_widen](../standard-library/ctype-class.md#ctype__do_widen) copy elements unaltered."},{"pos":[4044,4056],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4060,4081],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>locale&gt;","source":"**Header:** \\<locale>"},{"pos":[4088,4106],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[4115,4123],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>facet Class<ept id=\"p1\">](http://msdn.microsoft.com/Library/dd4f12f5-cb1b-457f-af56-2fb204216ec1)</ept><ph id=\"ph1\"> </ph>","pos":[4127,4213],"source":"[facet Class](http://msdn.microsoft.com/Library/dd4f12f5-cb1b-457f-af56-2fb204216ec1) "},{"content":"<bpt id=\"p1\"> [</bpt>ctype_base Class<ept id=\"p1\">](../standard-library/ctype-base-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[4216,4277],"source":" [ctype_base Class](../standard-library/ctype-base-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept>","pos":[4280,4390],"source":" [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)"}],"content":"---\ntitle: \"ctype&lt;char&gt; Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"ctype<char>\"\n  - \"locale/std::ctype<char>\"\n  - \"std::ctype<char>\"\n  - \"std.ctype<char>\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ctype<char> class\"\nms.assetid: ee30acb4-a743-405e-b3d4-13602092da84\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ctype&lt;char&gt; Class\nThe class is an explicit specialization of template class **ctype\\<CharType**> to type `char`, describing an object that can serve as a locale facet to characterize various properties of a character of type `char`.  \n  \n## Syntax  \n  \n```  \ntemplate <>  \nclass ctype<char>  \n: public ctype_base  \n{  \npublic:  \n    typedef char _Elem;  \n    typedef _Elem char_type;  \n    bool is(\n    mask _Maskval,  \n    _Elem _Ch) const;\n\n \n    const _Elem* is(\n    const _Elem* first,  \n    const _Elem* last,  \n    mask* dest) const;\n\n \n    const _Elem* scan_is(\n    mask _Maskval,  \n    const _Elem* first,  \n    const _Elem* last) const;\n\n \n    const _Elem* scan_not(\n    mask _Maskval,  \n    const _Elem* first,  \n    const _Elem* last) const;\n\n \n    _Elem tolower(\n    _Elem _Ch) const;\n\n \n    const _Elem* tolower(\n    _Elem* first,  \n    const _Elem* last) const;\n\n \n    _Elem toupper(\n    _Elem _Ch) const;\n\n \n    const _Elem* toupper(\n    _Elem* first,  \n    const _Elem* last) const;\n\n \n    _Elem widen(\n    char _Byte) const;\n\n \n    const _Elem* widen(\n    const char* first,  \n    const char* last,  \n    _Elem* dest) const;\n\n \n    const _Elem* _Widen_s(\n    const char* first,  \n    const char* last,  \n    _Elem* dest,  \n    size_t dest_size) const;\n\n \n    _Elem narrow(\n    _Elem _Ch,  \n    char _Dflt = '\\0') const;\n\n \n    const _Elem* narrow(\n    const _Elem* first,  \n    const _Elem* last,  \n    char _Dflt,  \n    char* dest) const;\n\n \n    const _Elem* _Narrow_s(\n    const _Elem* first,  \n    const _Elem* last,  \n    char _Dflt,  \n    char* dest,  \n    size_t dest_size) const;\n\n \n    static locale::id& id;  \n    explicit ctype(\n    const mask* _Table = 0,  \n    bool _Deletetable = false,  \n    size_t _Refs = 0);\n\nprotected:  \n    virtual ~ctype();\n//other protected members  \n};  \n```  \n  \n## Remarks  \n The explicit specialization differs from the template class in several ways:  \n  \n-   An object of class ctype< `char`> stores a pointer to the first element of a ctype mask table, an array of UCHAR_MAX + 1 elements of type **ctype_base::mask**. It also stores a Boolean object that indicates whether the array should be deleted (using `operator delete[]`) when the ctype\\< **Elem**> object is destroyed.  \n  \n-   Its sole public constructor lets you specify **tab**, the ctype mask table, and **del**, the Boolean object that is true if the array should be deleted when the ctype< `char`> object is destroyed, as well as the reference-count parameter refs.  \n  \n-   The protected member function **table** returns the stored ctype mask table.  \n  \n-   The static member object **table_size** specifies the minimum number of elements in a ctype mask table.  \n  \n-   The protected static member function **classic_table**( returns the ctype mask table appropriate to the \"C\" locale.  \n  \n-   There are no protected virtual member functions [do_is](../standard-library/ctype-class.md#ctype__do_is), [do_scan_is](../standard-library/ctype-class.md#ctype__do_scan_is), or [do_scan_not](../standard-library/ctype-class.md#ctype__do_scan_not). The corresponding public member functions perform the equivalent operations themselves.  \n  \n The member functions [do_narrow](../standard-library/ctype-class.md#ctype__do_narrow) and [do_widen](../standard-library/ctype-class.md#ctype__do_widen) copy elements unaltered.  \n  \n## Requirements  \n **Header:** \\<locale>  \n  \n **Namespace:** std  \n  \n## See Also  \n [facet Class](http://msdn.microsoft.com/Library/dd4f12f5-cb1b-457f-af56-2fb204216ec1)   \n [ctype_base Class](../standard-library/ctype-base-class.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)\n\n"}