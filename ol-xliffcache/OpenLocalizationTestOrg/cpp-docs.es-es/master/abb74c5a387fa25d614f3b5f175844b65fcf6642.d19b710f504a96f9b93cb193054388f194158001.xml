{"nodes":[{"pos":[12,58],"content":"Overriding a Dynamic Accessor | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Overriding a Dynamic Accessor | Microsoft Docs","pos":[0,46]}]},{"content":"Overriding a Dynamic Accessor","pos":[651,680]},{"content":"When you use a dynamic accessor such as <ph id=\"ph1\">`CDynamicAccessor`</ph>, the command <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> method creates an accessor for you automatically, based on the column information of the opened rowset.","pos":[681,865],"source":"When you use a dynamic accessor such as `CDynamicAccessor`, the command **Open** method creates an accessor for you automatically, based on the column information of the opened rowset."},{"content":"You can override the dynamic accessor to control exactly how the columns are bound.","pos":[866,949]},{"content":"To override the dynamic accessor, pass <bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept> as the last parameter to the <ph id=\"ph1\">`CCommand::Open`</ph> method.","pos":[956,1058],"source":"To override the dynamic accessor, pass **false** as the last parameter to the `CCommand::Open` method."},{"content":"This prevents <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> from creating an accessor automatically.","pos":[1059,1122],"source":" This prevents **Open** from creating an accessor automatically."},{"content":"You can then call <ph id=\"ph1\">`GetColumnInfo`</ph> and call <ph id=\"ph2\">`AddBindEntry`</ph> for each column that you want to bind.","pos":[1123,1219],"source":" You can then call `GetColumnInfo` and call `AddBindEntry` for each column that you want to bind."},{"content":"The following code shows how to do it:","pos":[1220,1258]},{"content":"See Also","pos":[2770,2778]},{"content":"Using Accessors","pos":[2783,2798]}],"content":"---\ntitle: \"Overriding a Dynamic Accessor | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"accessors [C++], dynamic\"\n  - \"dynamic accessors\"\n  - \"overriding, dynamic accessors\"\nms.assetid: cbefd156-6da5-490d-b795-c2d7d874f7ce\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Overriding a Dynamic Accessor\nWhen you use a dynamic accessor such as `CDynamicAccessor`, the command **Open** method creates an accessor for you automatically, based on the column information of the opened rowset. You can override the dynamic accessor to control exactly how the columns are bound.  \n  \n To override the dynamic accessor, pass **false** as the last parameter to the `CCommand::Open` method. This prevents **Open** from creating an accessor automatically. You can then call `GetColumnInfo` and call `AddBindEntry` for each column that you want to bind. The following code shows how to do it:  \n  \n```  \nUSES_CONVERSION;  \ndouble   dblProductID;  \n  \nCCommand<CDynamicAccessor> product;  \n// Open the table, passing false to prevent automatic binding   \nproduct.Open(session, _T(\"Select * FROM Products\"), NULL, NULL, DBGUID_DEFAULT, false);  \n  \nULONG         nColumns;  \nDBCOLUMNINFO*   pColumnInfo;  \n// Get the column information from the opened rowset.  \nproduct.GetColumnInfo(&nColumns, &pColumnInfo);  \n  \n// Bind the product ID as a double.  \npColumnInfo[0].wType          = DBTYPE_R8;  \npColumnInfo[0].ulColumnSize = 8;  \nproduct.AddBindEntry(pColumnInfo[0]);  \n  \n// Bind the product name as it is.  \nproduct.AddBindEntry(pColumnInfo[1]);  \n  \n// Bind the reorder level as a string.  \npColumnInfo[8].wType          = DBTYPE_STR;  \npColumnInfo[8].ulColumnSize = 10;  \nproduct.AddBindEntry(pColumnInfo[8]);  \n  \n// You have finished specifying the bindings. Go ahead and bind.  \nproduct.Bind();  \n// Free the memory for the column information that was retrieved in   \n// previous call to GetColumnInfo.  \nCoTaskMemFree(pColumnInfo);  \n  \nchar*   pszProductName;  \nchar*   pszReorderLevel;  \nbool   bRC;  \n  \n// Loop through the records tracing out the information.  \nwhile (product.MoveNext() == S_OK)  \n{  \n   bRC = product.GetValue(1, &dblProductID);  \n   pszProductName   = (char*)product.GetValue(2);  \n   pszReorderLevel  = (char*)product.GetValue(9);  \n  \n   ATLTRACE(_T(\"Override = %lf \\\"%s\\\" \\\"%s\\\"\\n\"), dblProductID,  \n      A2T(pszProductName), A2T(pszReorderLevel));  \n}  \n```  \n  \n## See Also  \n [Using Accessors](../../data/oledb/using-accessors.md)"}