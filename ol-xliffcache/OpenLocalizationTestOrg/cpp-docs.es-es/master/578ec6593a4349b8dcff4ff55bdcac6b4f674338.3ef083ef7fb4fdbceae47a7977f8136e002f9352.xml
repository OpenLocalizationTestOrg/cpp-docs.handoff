{"nodes":[{"pos":[12,39],"content":"_lsearch_s | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_lsearch_s | Microsoft Docs","pos":[0,27]}]},{"content":"_lsearch_s","pos":[1095,1105]},{"content":"Performs a linear search for a value.","pos":[1106,1143]},{"content":"A version of <bpt id=\"p1\">[</bpt>_lsearch<ept id=\"p1\">](../../c-runtime-library/reference/lsearch.md)</ept> with security enhancements as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1144,1345],"source":" A version of [_lsearch](../../c-runtime-library/reference/lsearch.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"content":"Syntax","pos":[1354,1360]},{"content":"Parameters","pos":[1577,1587]},{"content":"Object to search for.","pos":[1600,1621]},{"content":"Pointer to the base of array to be searched.","pos":[1638,1682]},{"content":"Number of elements.","pos":[1698,1717]},{"content":"Size of each array element in bytes.","pos":[1734,1770]},{"content":"Pointer to the comparison routine.","pos":[1790,1824]},{"content":"The second parameter is a pointer to the key for search.","pos":[1825,1881]},{"content":"The third parameter is a pointer to an array element to be compared with the key.","pos":[1882,1963]},{"content":"A pointer to an object that might be accessed in the comparison function.","pos":[1983,2056]},{"content":"Return Value","pos":[2065,2077]},{"content":"If <ph id=\"ph1\">`key`</ph> is found, <ph id=\"ph2\">`_lsearch_s`</ph> returns a pointer to the element of the array at <ph id=\"ph3\">`base`</ph> that matches <ph id=\"ph4\">`key`</ph>.","pos":[2081,2188],"source":"If `key` is found, `_lsearch_s` returns a pointer to the element of the array at `base` that matches `key`."},{"content":"If <ph id=\"ph1\">`key`</ph> is not found, <ph id=\"ph2\">`_lsearch_s`</ph> returns a pointer to the newly added item at the end of the array.","pos":[2189,2291],"source":" If `key` is not found, `_lsearch_s` returns a pointer to the newly added item at the end of the array."},{"content":"If invalid parameters are passed to the function, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2298,2478],"source":"If invalid parameters are passed to the function, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, then <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`EINVAL`</ph> and the function returns <ph id=\"ph3\">`NULL`</ph>.","pos":[2479,2580],"source":" If execution is allowed to continue, then `errno` is set to `EINVAL` and the function returns `NULL`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","pos":[2581,2723],"source":" For more information, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"Error Conditions","pos":[2733,2749]},{"content":"any","pos":[2895,2898]},{"content":"any","pos":[2899,2902]},{"content":"any","pos":[2903,2906]},{"content":"any","pos":[2907,2910]},{"content":"any","pos":[2924,2927]},{"content":"any","pos":[2935,2938]},{"content":"!= 0","pos":[2939,2943]},{"content":"any","pos":[2944,2947]},{"content":"any","pos":[2961,2964]},{"content":"any","pos":[2965,2968]},{"content":"any","pos":[2969,2972]},{"content":"any","pos":[2973,2976]},{"content":"zero","pos":[2977,2981]},{"content":"any","pos":[2995,2998]},{"content":"any","pos":[2999,3002]},{"content":"an","pos":[3010,3012]},{"content":"any","pos":[3013,3016]},{"content":"Remarks","pos":[3035,3042]},{"content":"The <ph id=\"ph1\">`_lsearch_s`</ph> function performs a linear search for the value <ph id=\"ph2\">`key`</ph> in an array of <ph id=\"ph3\">`num`</ph> elements, each of <ph id=\"ph4\">`width`</ph> bytes.","pos":[3046,3170],"source":"The `_lsearch_s` function performs a linear search for the value `key` in an array of `num` elements, each of `width` bytes."},{"content":"Unlike <ph id=\"ph1\">`bsearch_s`</ph>, <ph id=\"ph2\">`_lsearch_s`</ph> does not require the array to be sorted.","pos":[3171,3244],"source":" Unlike `bsearch_s`, `_lsearch_s` does not require the array to be sorted."},{"content":"If <ph id=\"ph1\">`key`</ph> is not found, then <ph id=\"ph2\">`_lsearch_s`</ph> adds it to the end of the array and increments <ph id=\"ph3\">`num`</ph>.","pos":[3245,3339],"source":" If `key` is not found, then `_lsearch_s` adds it to the end of the array and increments `num`."},{"content":"The <ph id=\"ph1\">`compare`</ph> function is a pointer to a user-supplied routine that compares two array elements and returns a value specifying their relationship.","pos":[3346,3492],"source":"The `compare` function is a pointer to a user-supplied routine that compares two array elements and returns a value specifying their relationship."},{"content":"The <ph id=\"ph1\">`compare`</ph> function also takes the pointer to the context as the first argument.","pos":[3493,3576],"source":" The `compare` function also takes the pointer to the context as the first argument."},{"content":"calls <ph id=\"ph1\">`compare`</ph> one or more times during the search, passing pointers to two array elements on each call.","pos":[3590,3695],"source":" calls `compare` one or more times during the search, passing pointers to two array elements on each call."},{"content":"must compare the elements and then return either nonzero (meaning the elements are different) or 0 (meaning the elements are identical).","pos":[3706,3842]},{"content":"The <ph id=\"ph1\">`context`</ph> pointer can be useful if the searched data structure is part of an object and the <ph id=\"ph2\">`compare`</ph> function needs to access members of the object.","pos":[3849,4002],"source":"The `context` pointer can be useful if the searched data structure is part of an object and the `compare` function needs to access members of the object."},{"content":"For example, code in the <ph id=\"ph1\">`compare`</ph> function can cast the void pointer into the appropriate object type and access members of that object.","pos":[4003,4140],"source":" For example, code in the `compare` function can cast the void pointer into the appropriate object type and access members of that object."},{"content":"The addition of the <ph id=\"ph1\">`context`</ph> pointer makes <ph id=\"ph2\">`_lsearch_s`</ph> more secure because additional context can be used to avoid reentrancy bugs associated with using static variables to make data available to the <ph id=\"ph3\">`compare`</ph> function.","pos":[4141,4362],"source":" The addition of the `context` pointer makes `_lsearch_s` more secure because additional context can be used to avoid reentrancy bugs associated with using static variables to make data available to the `compare` function."},{"content":"Requirements","pos":[4371,4383]},{"content":"Routine","pos":[4390,4397]},{"content":"Required header","pos":[4398,4413]},{"content":"search.h&gt;","pos":[4473,4482],"source":"search.h>"},{"pos":[4490,4608],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":".NET Framework Equivalent","pos":[4617,4642]},{"content":"Not applicable.","pos":[4646,4661]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[4662,4709],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[4710,4835],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[4844,4852]},{"content":"Searching and Sorting","pos":[4857,4878]},{"content":"bsearch_s","pos":[4935,4944]},{"content":"_lfind_s","pos":[4999,5007]},{"content":"_lsearch","pos":[5060,5068]}],"content":"---\ntitle: \"_lsearch_s | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_lsearch_s\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-utility-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_lsearch_s\"\n  - \"lsearch_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"linear searching\"\n  - \"values, searching for\"\n  - \"keys, finding in arrays\"\n  - \"arrays [CRT], searching\"\n  - \"searching, linear\"\n  - \"_lsearch_s function\"\n  - \"lsearch_s function\"\nms.assetid: d2db0635-be7a-4799-8660-255f14450882\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _lsearch_s\nPerforms a linear search for a value. A version of [_lsearch](../../c-runtime-library/reference/lsearch.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nvoid *_lsearch_s(  \n   const void *key,  \n   void *base,  \n   unsigned int *num,  \n   size_t size,  \n   int (__cdecl *compare)(void *, const void *, const void *),  \n   void * context  \n);  \n```  \n  \n#### Parameters  \n `key`  \n Object to search for.  \n  \n `base`  \n Pointer to the base of array to be searched.  \n  \n `num`  \n Number of elements.  \n  \n `size`  \n Size of each array element in bytes.  \n  \n `compare`  \n Pointer to the comparison routine. The second parameter is a pointer to the key for search. The third parameter is a pointer to an array element to be compared with the key.  \n  \n `context`  \n A pointer to an object that might be accessed in the comparison function.  \n  \n## Return Value  \n If `key` is found, `_lsearch_s` returns a pointer to the element of the array at `base` that matches `key`. If `key` is not found, `_lsearch_s` returns a pointer to the newly added item at the end of the array.  \n  \n If invalid parameters are passed to the function, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, then `errno` is set to `EINVAL` and the function returns `NULL`. For more information, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n### Error Conditions  \n  \n|`key`|`base`|`compare`|`num`|`size`|`errno`|  \n|-----------|------------|---------------|-----------|------------|-------------|  \n|`NULL`|any|any|any|any|`EINVAL`|  \n|any|`NULL`|any|!= 0|any|`EINVAL`|  \n|any|any|any|any|zero|`EINVAL`|  \n|any|any|`NULL`|an|any|`EINVAL`|  \n  \n## Remarks  \n The `_lsearch_s` function performs a linear search for the value `key` in an array of `num` elements, each of `width` bytes. Unlike `bsearch_s`, `_lsearch_s` does not require the array to be sorted. If `key` is not found, then `_lsearch_s` adds it to the end of the array and increments `num`.  \n  \n The `compare` function is a pointer to a user-supplied routine that compares two array elements and returns a value specifying their relationship. The `compare` function also takes the pointer to the context as the first argument. `_lsearch_s` calls `compare` one or more times during the search, passing pointers to two array elements on each call. `compare` must compare the elements and then return either nonzero (meaning the elements are different) or 0 (meaning the elements are identical).  \n  \n The `context` pointer can be useful if the searched data structure is part of an object and the `compare` function needs to access members of the object. For example, code in the `compare` function can cast the void pointer into the appropriate object type and access members of that object. The addition of the `context` pointer makes `_lsearch_s` more secure because additional context can be used to avoid reentrancy bugs associated with using static variables to make data available to the `compare` function.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_lsearch_s`|\\<search.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Searching and Sorting](../../c-runtime-library/searching-and-sorting.md)   \n [bsearch_s](../../c-runtime-library/reference/bsearch-s.md)   \n [_lfind_s](../../c-runtime-library/reference/lfind-s.md)   \n [_lsearch](../../c-runtime-library/reference/lsearch.md)"}