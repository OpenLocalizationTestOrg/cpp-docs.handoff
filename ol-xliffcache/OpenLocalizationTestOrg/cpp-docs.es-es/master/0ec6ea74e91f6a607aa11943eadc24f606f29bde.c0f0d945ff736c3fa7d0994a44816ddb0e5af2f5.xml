{"nodes":[{"pos":[12,46],"content":"ComPtr::As Method | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ComPtr::As Method | Microsoft Docs","pos":[0,34]}]},{"content":"ComPtr::As Method","pos":[646,663]},{"content":"Returns a ComPtr object that represents the interface identified by the specified template parameter.","pos":[664,765]},{"content":"Syntax","pos":[774,780]},{"content":"Parameters","pos":[996,1006]},{"content":"The interface to be represented by parameter <ph id=\"ph1\">`p`</ph>.","pos":[1017,1066],"source":" The interface to be represented by parameter `p`."},{"content":"A ComPtr object that represents the interface specified by parameter <ph id=\"ph1\">`U`</ph>.","pos":[1080,1153],"source":" A ComPtr object that represents the interface specified by parameter `U`."},{"content":"Parameter <ph id=\"ph1\">`p`</ph> must not refer to the current ComPtr object.","pos":[1154,1212],"source":" Parameter `p` must not refer to the current ComPtr object."},{"content":"Remarks","pos":[1221,1228]},{"content":"The first template is the form that you should use in your code.","pos":[1232,1296]},{"content":"The second template is an internal, helper specialization that supports C++ language features such as the <bpt id=\"p1\">[</bpt>auto<ept id=\"p1\">](../cpp/auto-cpp.md)</ept> type deduction keyword.","pos":[1297,1453],"source":" The second template is an internal, helper specialization that supports C++ language features such as the [auto](../cpp/auto-cpp.md) type deduction keyword."},{"content":"Return Value","pos":[1462,1474]},{"content":"S_OK if successful; otherwise, an HRESULT that indicates the error.","pos":[1478,1545]},{"content":"Requirements","pos":[1554,1566]},{"pos":[1570,1590],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> client.h","source":"**Header:** client.h"},{"pos":[1597,1626],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> Microsoft::WRL","source":"**Namespace:** Microsoft::WRL"},{"content":"See Also","pos":[1635,1643]},{"content":"ComPtr Class","pos":[1648,1660]}],"content":"---\ntitle: \"ComPtr::As Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"client/Microsoft::WRL::ComPtr::As\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"As method\"\nms.assetid: 2ad6c262-9bdb-4c59-a330-1af8bcd445cc\ncaps.latest.revision: 5\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# ComPtr::As Method\nReturns a ComPtr object that represents the interface identified by the specified template parameter.  \n  \n## Syntax  \n  \n```  \n  \ntemplate<  \n   typename U  \n>  \nHRESULT As(  \n   _Out_ ComPtr<U>* p  \n) const;  \n  \ntemplate<  \n   typename U  \n>  \nHRESULT As(  \n   _Out_ Details::ComPtrRef<ComPtr<U>> p  \n) const;  \n  \n```  \n  \n#### Parameters  \n `U`  \n The interface to be represented by parameter `p`.  \n  \n `p`  \n A ComPtr object that represents the interface specified by parameter `U`. Parameter `p` must not refer to the current ComPtr object.  \n  \n## Remarks  \n The first template is the form that you should use in your code. The second template is an internal, helper specialization that supports C++ language features such as the [auto](../cpp/auto-cpp.md) type deduction keyword.  \n  \n## Return Value  \n S_OK if successful; otherwise, an HRESULT that indicates the error.  \n  \n## Requirements  \n **Header:** client.h  \n  \n **Namespace:** Microsoft::WRL  \n  \n## See Also  \n [ComPtr Class](../windows/comptr-class.md)"}