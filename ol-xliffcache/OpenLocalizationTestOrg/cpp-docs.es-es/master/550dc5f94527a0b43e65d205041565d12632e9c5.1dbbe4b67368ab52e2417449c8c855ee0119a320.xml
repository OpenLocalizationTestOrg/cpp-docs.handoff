{"nodes":[{"pos":[12,52],"content":"COleMessageFilter Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"COleMessageFilter Class | Microsoft Docs","pos":[0,40]}]},{"pos":[836,859],"content":"COleMessageFilter Class","linkify":"COleMessageFilter Class","nodes":[{"content":"COleMessageFilter Class","pos":[0,23]}]},{"content":"Manages the concurrency required by the interaction of OLE applications.","pos":[860,932]},{"pos":[941,947],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1017,1024],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1034,1053],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1060,1064]},{"content":"Description","pos":[1065,1076]},{"pos":[1114,1191],"content":"<bpt id=\"p1\">[</bpt>COleMessageFilter::COleMessageFilter<ept id=\"p1\">](#colemessagefilter__colemessagefilter)</ept>","source":"[COleMessageFilter::COleMessageFilter](#colemessagefilter__colemessagefilter)"},{"pos":[1192,1232],"content":"Constructs a <ph id=\"ph1\">`COleMessageFilter`</ph> object.","source":"Constructs a `COleMessageFilter` object."},{"pos":[1243,1257],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1264,1268]},{"content":"Description","pos":[1269,1280]},{"pos":[1318,1389],"content":"<bpt id=\"p1\">[</bpt>COleMessageFilter::BeginBusyState<ept id=\"p1\">](#colemessagefilter__beginbusystate)</ept>","source":"[COleMessageFilter::BeginBusyState](#colemessagefilter__beginbusystate)"},{"content":"Puts the application in the busy state.","pos":[1390,1429]},{"pos":[1434,1509],"content":"<bpt id=\"p1\">[</bpt>COleMessageFilter::EnableBusyDialog<ept id=\"p1\">](#colemessagefilter__enablebusydialog)</ept>","source":"[COleMessageFilter::EnableBusyDialog](#colemessagefilter__enablebusydialog)"},{"content":"Enables and disables the dialog box that appears when a called application is busy.","pos":[1510,1593]},{"pos":[1598,1691],"content":"<bpt id=\"p1\">[</bpt>COleMessageFilter::EnableNotRespondingDialog<ept id=\"p1\">](#colemessagefilter__enablenotrespondingdialog)</ept>","source":"[COleMessageFilter::EnableNotRespondingDialog](#colemessagefilter__enablenotrespondingdialog)"},{"content":"Enables and disables the dialog box that appears when a called application is not responding.","pos":[1692,1785]},{"pos":[1790,1857],"content":"<bpt id=\"p1\">[</bpt>COleMessageFilter::EndBusyState<ept id=\"p1\">](#colemessagefilter__endbusystate)</ept>","source":"[COleMessageFilter::EndBusyState](#colemessagefilter__endbusystate)"},{"content":"Terminates the application's busy state.","pos":[1858,1898]},{"pos":[1903,1978],"content":"<bpt id=\"p1\">[</bpt>COleMessageFilter::OnMessagePending<ept id=\"p1\">](#colemessagefilter__onmessagepending)</ept>","source":"[COleMessageFilter::OnMessagePending](#colemessagefilter__onmessagepending)"},{"content":"Called by the framework to process messages while an OLE call is in progress.","pos":[1979,2056]},{"pos":[2061,2120],"content":"<bpt id=\"p1\">[</bpt>COleMessageFilter::Register<ept id=\"p1\">](#colemessagefilter__register)</ept>","source":"[COleMessageFilter::Register](#colemessagefilter__register)"},{"content":"Registers the message filter with the OLE system DLLs.","pos":[2121,2175]},{"pos":[2180,2235],"content":"<bpt id=\"p1\">[</bpt>COleMessageFilter::Revoke<ept id=\"p1\">](#colemessagefilter__revoke)</ept>","source":"[COleMessageFilter::Revoke](#colemessagefilter__revoke)"},{"content":"Revokes the message filter's registration with the OLE system DLLs.","pos":[2236,2303]},{"pos":[2308,2375],"content":"<bpt id=\"p1\">[</bpt>COleMessageFilter::SetBusyReply<ept id=\"p1\">](#colemessagefilter__setbusyreply)</ept>","source":"[COleMessageFilter::SetBusyReply](#colemessagefilter__setbusyreply)"},{"content":"Determines the busy application's reply to an OLE call.","pos":[2376,2431]},{"pos":[2436,2523],"content":"<bpt id=\"p1\">[</bpt>COleMessageFilter::SetMessagePendingDelay<ept id=\"p1\">](#colemessagefilter__setmessagependingdelay)</ept>","source":"[COleMessageFilter::SetMessagePendingDelay](#colemessagefilter__setmessagependingdelay)"},{"content":"Determines how long the application waits for a response to an OLE call.","pos":[2524,2596]},{"pos":[2601,2670],"content":"<bpt id=\"p1\">[</bpt>COleMessageFilter::SetRetryReply<ept id=\"p1\">](#colemessagefilter__setretryreply)</ept>","source":"[COleMessageFilter::SetRetryReply](#colemessagefilter__setretryreply)"},{"content":"Determines the calling application's reply to a busy application.","pos":[2671,2736]},{"pos":[2746,2753],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`COleMessageFilter`</ph> class is useful in visual editing server and container applications, as well as OLE automation applications.","pos":[2757,2889],"source":"The `COleMessageFilter` class is useful in visual editing server and container applications, as well as OLE automation applications."},{"content":"For server applications that are being called, this class can be used to make the application \"busy\" so that incoming calls from other container applications are either canceled or retried later.","pos":[2890,3085]},{"content":"This class can also be used to determine the action to be taken by a calling application when the called application is busy.","pos":[3086,3211]},{"content":"Common usage is for a server application to call <bpt id=\"p1\">[</bpt>BeginBusyState<ept id=\"p1\">](#colemessagefilter__beginbusystate)</ept> and <bpt id=\"p2\">[</bpt>EndBusyState<ept id=\"p2\">](#colemessagefilter__endbusystate)</ept> when it would be dangerous for a document or other OLE accessible object to be destroyed.","pos":[3218,3462],"source":"Common usage is for a server application to call [BeginBusyState](#colemessagefilter__beginbusystate) and [EndBusyState](#colemessagefilter__endbusystate) when it would be dangerous for a document or other OLE accessible object to be destroyed."},{"content":"These calls are made in <bpt id=\"p1\">[</bpt>CWinApp::OnIdle<ept id=\"p1\">](../../mfc/reference/cwinapp-class.md#cwinapp__onidle)</ept> during user-interface updates.","pos":[3463,3589],"source":" These calls are made in [CWinApp::OnIdle](../../mfc/reference/cwinapp-class.md#cwinapp__onidle) during user-interface updates."},{"content":"By default, a <ph id=\"ph1\">`COleMessageFilter`</ph> object is allocated when the application is initialized.","pos":[3596,3686],"source":"By default, a `COleMessageFilter` object is allocated when the application is initialized."},{"content":"It can be retrieved with <bpt id=\"p1\">[</bpt>AfxOleGetMessageFilter<ept id=\"p1\">](application-control.md#afxolegetmessagefilter)</ept>.","pos":[3687,3784],"source":" It can be retrieved with [AfxOleGetMessageFilter](application-control.md#afxolegetmessagefilter)."},{"content":"This is an advanced class; you seldom need to work with it directly.","pos":[3791,3859]},{"pos":[3866,3981],"content":"For more information, see the article <bpt id=\"p1\">[</bpt>Servers: Implementing a Server<ept id=\"p1\">](../../mfc/servers-implementing-a-server.md)</ept>.","source":"For more information, see the article [Servers: Implementing a Server](../../mfc/servers-implementing-a-server.md)."},{"pos":[3990,4011],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[4015,4062],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[4069,4122],"content":"<bpt id=\"p1\">[</bpt>CCmdTarget<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept>","source":"[CCmdTarget](../../mfc/reference/ccmdtarget-class.md)"},{"pos":[4157,4169],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4173,4193],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxole.h","source":"**Header:** afxole.h"},{"pos":[4203,4286],"content":"<bpt id=\"p1\">&lt;a name=\"colemessagefilter__beginbusystate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleMessageFilter::BeginBusyState","linkify":"<a name=\"colemessagefilter__beginbusystate\"></a>  COleMessageFilter::BeginBusyState","source":"<a name=\"colemessagefilter__beginbusystate\"></a>  COleMessageFilter::BeginBusyState"},{"content":"Call this function to begin a busy state.","pos":[4290,4331]},{"pos":[4387,4394],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"It works in conjunction with <bpt id=\"p1\">[</bpt>EndBusyState<ept id=\"p1\">](#colemessagefilter__endbusystate)</ept> to control the application's busy state.","pos":[4398,4516],"source":"It works in conjunction with [EndBusyState](#colemessagefilter__endbusystate) to control the application's busy state."},{"content":"The function <bpt id=\"p1\">[</bpt>SetBusyReply<ept id=\"p1\">](#colemessagefilter__setbusyreply)</ept> determines the application's reply to calling applications when it is busy.","pos":[4517,4654],"source":" The function [SetBusyReply](#colemessagefilter__setbusyreply) determines the application's reply to calling applications when it is busy."},{"content":"The <ph id=\"ph1\">`BeginBusyState`</ph> and <ph id=\"ph2\">`EndBusyState`</ph> calls increment and decrement, respectively, a counter that determines whether the application is busy.","pos":[4661,4804],"source":"The `BeginBusyState` and `EndBusyState` calls increment and decrement, respectively, a counter that determines whether the application is busy."},{"content":"For example, two calls to <ph id=\"ph1\">`BeginBusyState`</ph> and one call to <ph id=\"ph2\">`EndBusyState`</ph> still result in a busy state.","pos":[4805,4908],"source":" For example, two calls to `BeginBusyState` and one call to `EndBusyState` still result in a busy state."},{"content":"To cancel a busy state it is necessary to call <ph id=\"ph1\">`EndBusyState`</ph> the same number of times <ph id=\"ph2\">`BeginBusyState`</ph> has been called.","pos":[4909,5029],"source":" To cancel a busy state it is necessary to call `EndBusyState` the same number of times `BeginBusyState` has been called."},{"content":"By default, the framework enters the busy state during idle processing, which is performed by <bpt id=\"p1\">[</bpt>CWinApp::OnIdle<ept id=\"p1\">](../../mfc/reference/cwinapp-class.md#cwinapp__onidle)</ept>.","pos":[5036,5202],"source":"By default, the framework enters the busy state during idle processing, which is performed by [CWinApp::OnIdle](../../mfc/reference/cwinapp-class.md#cwinapp__onidle)."},{"content":"While the application is handling <bpt id=\"p1\">**</bpt>ON_COMMANDUPDATEUI<ept id=\"p1\">**</ept> notifications, incoming calls are handled later, after idle processing is complete.","pos":[5203,5343],"source":" While the application is handling **ON_COMMANDUPDATEUI** notifications, incoming calls are handled later, after idle processing is complete."},{"pos":[5353,5442],"content":"<bpt id=\"p1\">&lt;a name=\"colemessagefilter__colemessagefilter\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleMessageFilter::COleMessageFilter","linkify":"<a name=\"colemessagefilter__colemessagefilter\"></a>  COleMessageFilter::COleMessageFilter","source":"<a name=\"colemessagefilter__colemessagefilter\"></a>  COleMessageFilter::COleMessageFilter"},{"pos":[5446,5483],"content":"Creates a <ph id=\"ph1\">`COleMessageFilter`</ph> object.","source":"Creates a `COleMessageFilter` object."},{"pos":[5529,5616],"content":"<bpt id=\"p1\">&lt;a name=\"colemessagefilter__enablebusydialog\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleMessageFilter::EnableBusyDialog","linkify":"<a name=\"colemessagefilter__enablebusydialog\"></a>  COleMessageFilter::EnableBusyDialog","source":"<a name=\"colemessagefilter__enablebusydialog\"></a>  COleMessageFilter::EnableBusyDialog"},{"pos":[5620,5796],"content":"Enables and disables the busy dialog box, which is displayed when the message-pending delay expires (see <bpt id=\"p1\">[</bpt>SetRetryReply<ept id=\"p1\">](#colemessagefilter__setretryreply)</ept>) during an OLE call.","source":"Enables and disables the busy dialog box, which is displayed when the message-pending delay expires (see [SetRetryReply](#colemessagefilter__setretryreply)) during an OLE call."},{"pos":[5869,5879],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>bEnableBusy<ept id=\"p1\">*</ept>","pos":[5883,5896],"source":"*bEnableBusy*"},{"content":"Specifies whether the \"busy\" dialog box is enabled or disabled.","pos":[5900,5963]},{"pos":[5973,6078],"content":"<bpt id=\"p1\">&lt;a name=\"colemessagefilter__enablenotrespondingdialog\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleMessageFilter::EnableNotRespondingDialog","linkify":"<a name=\"colemessagefilter__enablenotrespondingdialog\"></a>  COleMessageFilter::EnableNotRespondingDialog","source":"<a name=\"colemessagefilter__enablenotrespondingdialog\"></a>  COleMessageFilter::EnableNotRespondingDialog"},{"content":"Enables and disables the \"not responding\" dialog box, which is displayed if a keyboard or mouse message is pending during an OLE call and the call has timed out.","pos":[6082,6243]},{"pos":[6334,6344],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>bEnableNotResponding<ept id=\"p1\">*</ept>","pos":[6348,6370],"source":"*bEnableNotResponding*"},{"content":"Specifies whether the \"not responding\" dialog box is enabled or disabled.","pos":[6374,6447]},{"pos":[6457,6536],"content":"<bpt id=\"p1\">&lt;a name=\"colemessagefilter__endbusystate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleMessageFilter::EndBusyState","linkify":"<a name=\"colemessagefilter__endbusystate\"></a>  COleMessageFilter::EndBusyState","source":"<a name=\"colemessagefilter__endbusystate\"></a>  COleMessageFilter::EndBusyState"},{"content":"Call this function to end a busy state.","pos":[6540,6579]},{"pos":[6633,6640],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"It works in conjunction with <bpt id=\"p1\">[</bpt>BeginBusyState<ept id=\"p1\">](#colemessagefilter__beginbusystate)</ept> to control the application's busy state.","pos":[6644,6766],"source":"It works in conjunction with [BeginBusyState](#colemessagefilter__beginbusystate) to control the application's busy state."},{"content":"The function <bpt id=\"p1\">[</bpt>SetBusyReply<ept id=\"p1\">](#colemessagefilter__setbusyreply)</ept> determines the application's reply to calling applications when it is busy.","pos":[6767,6904],"source":" The function [SetBusyReply](#colemessagefilter__setbusyreply) determines the application's reply to calling applications when it is busy."},{"content":"The <ph id=\"ph1\">`BeginBusyState`</ph> and <ph id=\"ph2\">`EndBusyState`</ph> calls increment and decrement, respectively, a counter that determines whether the application is busy.","pos":[6911,7054],"source":"The `BeginBusyState` and `EndBusyState` calls increment and decrement, respectively, a counter that determines whether the application is busy."},{"content":"For example, two calls to <ph id=\"ph1\">`BeginBusyState`</ph> and one call to <ph id=\"ph2\">`EndBusyState`</ph> still result in a busy state.","pos":[7055,7158],"source":" For example, two calls to `BeginBusyState` and one call to `EndBusyState` still result in a busy state."},{"content":"To cancel a busy state it is necessary to call <ph id=\"ph1\">`EndBusyState`</ph> the same number of times <ph id=\"ph2\">`BeginBusyState`</ph> has been called.","pos":[7159,7279],"source":" To cancel a busy state it is necessary to call `EndBusyState` the same number of times `BeginBusyState` has been called."},{"content":"By default, the framework enters the busy state during idle processing, which is performed by <bpt id=\"p1\">[</bpt>CWinApp::OnIdle<ept id=\"p1\">](../../mfc/reference/cwinapp-class.md#cwinapp__onidle)</ept>.","pos":[7286,7452],"source":"By default, the framework enters the busy state during idle processing, which is performed by [CWinApp::OnIdle](../../mfc/reference/cwinapp-class.md#cwinapp__onidle)."},{"content":"While the application is handling <ph id=\"ph1\">`ON_UPDATE_COMMAND_UI`</ph> notifications, incoming calls are handled after idle processing is complete.","pos":[7453,7586],"source":" While the application is handling `ON_UPDATE_COMMAND_UI` notifications, incoming calls are handled after idle processing is complete."},{"pos":[7596,7683],"content":"<bpt id=\"p1\">&lt;a name=\"colemessagefilter__onmessagepending\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleMessageFilter::OnMessagePending","linkify":"<a name=\"colemessagefilter__onmessagepending\"></a>  COleMessageFilter::OnMessagePending","source":"<a name=\"colemessagefilter__onmessagepending\"></a>  COleMessageFilter::OnMessagePending"},{"content":"Called by the framework to process messages while an OLE call is in progress.","pos":[7687,7764]},{"pos":[7837,7847],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to the pending message.","pos":[7861,7892]},{"pos":[7902,7914],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero on success; otherwise 0.","pos":[7918,7950]},{"pos":[7960,7967],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When a calling application is waiting for a call to be completed, the framework calls <ph id=\"ph1\">`OnMessagePending`</ph> with a pointer to the pending message.","pos":[7971,8114],"source":"When a calling application is waiting for a call to be completed, the framework calls `OnMessagePending` with a pointer to the pending message."},{"content":"By default, the framework dispatches <ph id=\"ph1\">`WM_PAINT`</ph> messages, so that window updates can occur during a call that is taking a long time.","pos":[8115,8247],"source":" By default, the framework dispatches `WM_PAINT` messages, so that window updates can occur during a call that is taking a long time."},{"pos":[8254,8383],"content":"You must register your message filter by means of a call to <bpt id=\"p1\">[</bpt>Register<ept id=\"p1\">](#colemessagefilter__register)</ept> before it can become active.","source":"You must register your message filter by means of a call to [Register](#colemessagefilter__register) before it can become active."},{"pos":[8393,8464],"content":"<bpt id=\"p1\">&lt;a name=\"colemessagefilter__register\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleMessageFilter::Register","linkify":"<a name=\"colemessagefilter__register\"></a>  COleMessageFilter::Register","source":"<a name=\"colemessagefilter__register\"></a>  COleMessageFilter::Register"},{"content":"Registers the message filter with the OLE system DLLs.","pos":[8468,8522]},{"pos":[8564,8576],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero on success; otherwise 0.","pos":[8580,8612]},{"pos":[8622,8629],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A message filter has no effect unless it is registered with the system DLLs.","pos":[8633,8709]},{"content":"Usually your application's initialization code registers the application's message filter.","pos":[8710,8800]},{"content":"Any other message filter registered by your application should be revoked before the program terminates by a call to <bpt id=\"p1\">[</bpt>Revoke<ept id=\"p1\">](#colemessagefilter__revoke)</ept>.","pos":[8801,8955],"source":" Any other message filter registered by your application should be revoked before the program terminates by a call to [Revoke](#colemessagefilter__revoke)."},{"content":"The framework's default message filter is automatically registered during initialization and revoked at termination.","pos":[8962,9078]},{"pos":[9088,9155],"content":"<bpt id=\"p1\">&lt;a name=\"colemessagefilter__revoke\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleMessageFilter::Revoke","linkify":"<a name=\"colemessagefilter__revoke\"></a>  COleMessageFilter::Revoke","source":"<a name=\"colemessagefilter__revoke\"></a>  COleMessageFilter::Revoke"},{"pos":[9159,9255],"content":"Revokes a previous registration performed by a call to <bpt id=\"p1\">[</bpt>Register<ept id=\"p1\">](#colemessagefilter__register)</ept>.","source":"Revokes a previous registration performed by a call to [Register](#colemessagefilter__register)."},{"pos":[9295,9302],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A message filter should be revoked before the program terminates.","pos":[9306,9371]},{"content":"The default message filter, which is created and registered automatically by the framework, is also automatically revoked.","pos":[9378,9500]},{"pos":[9510,9589],"content":"<bpt id=\"p1\">&lt;a name=\"colemessagefilter__setbusyreply\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleMessageFilter::SetBusyReply","linkify":"<a name=\"colemessagefilter__setbusyreply\"></a>  COleMessageFilter::SetBusyReply","source":"<a name=\"colemessagefilter__setbusyreply\"></a>  COleMessageFilter::SetBusyReply"},{"content":"This function sets the application's \"busy reply.\"","pos":[9593,9643]},{"pos":[9710,9720],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>nBusyReply<ept id=\"p1\">*</ept>","pos":[9724,9736],"source":"*nBusyReply*"},{"content":"A value from the <ph id=\"ph1\">`SERVERCALL`</ph> enumeration, which is defined in COMPOBJ.H.","pos":[9740,9813],"source":" A value from the `SERVERCALL` enumeration, which is defined in COMPOBJ.H."},{"content":"It can have any one of the following values:","pos":[9814,9858]},{"pos":[9866,9969],"content":"<bpt id=\"p1\">**</bpt>SERVERCALL_ISHANDLED<ept id=\"p1\">**</ept> The application can accept calls but may fail in processing a particular call.","source":"**SERVERCALL_ISHANDLED** The application can accept calls but may fail in processing a particular call."},{"pos":[9977,10063],"content":"<bpt id=\"p1\">**</bpt>SERVERCALL_REJECTED<ept id=\"p1\">**</ept> The application probably will never be able to process a call.","source":"**SERVERCALL_REJECTED** The application probably will never be able to process a call."},{"pos":[10071,10173],"content":"<bpt id=\"p1\">**</bpt>SERVERCALL_RETRYLATER<ept id=\"p1\">**</ept> The application is temporarily in a state in which it cannot process a call.","source":"**SERVERCALL_RETRYLATER** The application is temporarily in a state in which it cannot process a call."},{"pos":[10183,10190],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10194,10351],"content":"The <bpt id=\"p1\">[</bpt>BeginBusyState<ept id=\"p1\">](#colemessagefilter__beginbusystate)</ept> and <bpt id=\"p2\">[</bpt>EndBusyState<ept id=\"p2\">](#colemessagefilter__endbusystate)</ept> functions control the application's busy state.","source":"The [BeginBusyState](#colemessagefilter__beginbusystate) and [EndBusyState](#colemessagefilter__endbusystate) functions control the application's busy state."},{"content":"When an application has been made busy with a call to <ph id=\"ph1\">`BeginBusyState`</ph>, it responds to calls from the OLE system DLLs with a value determined by the last setting of <ph id=\"ph2\">`SetBusyReply`</ph>.","pos":[10358,10538],"source":"When an application has been made busy with a call to `BeginBusyState`, it responds to calls from the OLE system DLLs with a value determined by the last setting of `SetBusyReply`."},{"content":"The calling application uses this busy reply to determine what action to take.","pos":[10539,10617]},{"content":"By default, the busy reply is <bpt id=\"p1\">**</bpt>SERVERCALL_RETRYLATER<ept id=\"p1\">**</ept>.","pos":[10624,10680],"source":"By default, the busy reply is **SERVERCALL_RETRYLATER**."},{"content":"This reply causes the calling application to retry the call as soon as possible.","pos":[10681,10761]},{"pos":[10771,10870],"content":"<bpt id=\"p1\">&lt;a name=\"colemessagefilter__setmessagependingdelay\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleMessageFilter::SetMessagePendingDelay","linkify":"<a name=\"colemessagefilter__setmessagependingdelay\"></a>  COleMessageFilter::SetMessagePendingDelay","source":"<a name=\"colemessagefilter__setmessagependingdelay\"></a>  COleMessageFilter::SetMessagePendingDelay"},{"content":"Determines how long the calling application waits for a response from the called application before taking further action.","pos":[10874,10996]},{"pos":[11073,11083],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Number of milliseconds for the message-pending delay.","pos":[11101,11154]},{"pos":[11164,11171],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11175,11262],"content":"This function works in concert with <bpt id=\"p1\">[</bpt>SetRetryReply<ept id=\"p1\">](#colemessagefilter__setretryreply)</ept>.","source":"This function works in concert with [SetRetryReply](#colemessagefilter__setretryreply)."},{"pos":[11272,11353],"content":"<bpt id=\"p1\">&lt;a name=\"colemessagefilter__setretryreply\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleMessageFilter::SetRetryReply","linkify":"<a name=\"colemessagefilter__setretryreply\"></a>  COleMessageFilter::SetRetryReply","source":"<a name=\"colemessagefilter__setretryreply\"></a>  COleMessageFilter::SetRetryReply"},{"content":"Determines the calling application's action when it receives a busy response from a called application.","pos":[11357,11460]},{"pos":[11528,11538],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Number of milliseconds between retries.","pos":[11559,11598]},{"pos":[11608,11615],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When a called application indicates that it is busy, the calling application may decide to wait until the server is no longer busy, to retry right away, or to retry after a specified interval.","pos":[11619,11811]},{"content":"It may also decide to cancel the call altogether.","pos":[11812,11861]},{"content":"The caller's response is controlled by the functions <ph id=\"ph1\">`SetRetryReply`</ph> and <bpt id=\"p1\">[</bpt>SetMessagePendingDelay<ept id=\"p1\">](#colemessagefilter__setmessagependingdelay)</ept>.","pos":[11868,12010],"source":"The caller's response is controlled by the functions `SetRetryReply` and [SetMessagePendingDelay](#colemessagefilter__setmessagependingdelay)."},{"content":"<ph id=\"ph1\">`SetRetryReply`</ph> determines how long the calling application should wait between retries for a given call.","pos":[12011,12116],"source":"`SetRetryReply` determines how long the calling application should wait between retries for a given call."},{"content":"<ph id=\"ph1\">`SetMessagePendingDelay`</ph> determines how long the calling application waits for a response from the server before taking further action.","pos":[12117,12252],"source":"`SetMessagePendingDelay` determines how long the calling application waits for a response from the server before taking further action."},{"content":"Usually the defaults are acceptable and do not need to be changed.","pos":[12259,12325]},{"content":"The framework retries the call every <ph id=\"ph1\">`nRetryReply`</ph> milliseconds until the call goes through or the message-pending delay has expired.","pos":[12326,12459],"source":" The framework retries the call every `nRetryReply` milliseconds until the call goes through or the message-pending delay has expired."},{"content":"A value of 0 for <ph id=\"ph1\">`nRetryReply`</ph> specifies an immediate retry, and – 1 specifies cancellation of the call.","pos":[12460,12564],"source":" A value of 0 for `nRetryReply` specifies an immediate retry, and – 1 specifies cancellation of the call."},{"content":"When the message-pending delay has expired, the OLE \"busy dialog box\" (see <bpt id=\"p1\">[</bpt>COleBusyDialog<ept id=\"p1\">](../../mfc/reference/colebusydialog-class.md)</ept>) is displayed so that the user can choose to cancel or retry the call.","pos":[12571,12778],"source":"When the message-pending delay has expired, the OLE \"busy dialog box\" (see [COleBusyDialog](../../mfc/reference/colebusydialog-class.md)) is displayed so that the user can choose to cancel or retry the call."},{"content":"Call <bpt id=\"p1\">[</bpt>EnableBusyDialog<ept id=\"p1\">](#colemessagefilter__enablebusydialog)</ept> to enable or disable this dialog box.","pos":[12779,12878],"source":" Call [EnableBusyDialog](#colemessagefilter__enablebusydialog) to enable or disable this dialog box."},{"content":"When a keyboard or mouse message is pending during a call and the call has timed out (exceeded the message-pending delay), the \"not responding\" dialog box is displayed.","pos":[12885,13053]},{"content":"Call <bpt id=\"p1\">[</bpt>EnableNotRespondingDialog<ept id=\"p1\">](#colemessagefilter__enablenotrespondingdialog)</ept> to enable or disable this dialog box.","pos":[13054,13171],"source":" Call [EnableNotRespondingDialog](#colemessagefilter__enablenotrespondingdialog) to enable or disable this dialog box."},{"content":"Usually this state of affairs indicates that something has gone wrong and the user is getting impatient.","pos":[13172,13276]},{"content":"When the dialogs are disabled, the current \"retry reply\" is always used for calls to busy applications.","pos":[13283,13386]},{"pos":[13395,13403],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>CCmdTarget Class<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[13407,13467],"source":"[CCmdTarget Class](../../mfc/reference/ccmdtarget-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[13470,13519],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CCmdTarget Class<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept>","pos":[13522,13582],"source":" [CCmdTarget Class](../../mfc/reference/ccmdtarget-class.md)"}],"content":"---\ntitle: \"COleMessageFilter Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"COleMessageFilter\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"COleMessageFilter class\"\n  - \"OLE [C++], managing concurrency\"\n  - \"message filters [C++]\"\n  - \"OLE applications [C++], managing interactions\"\n  - \"OLE messages\"\n  - \"applications [OLE], managing interactions\"\n  - \"messages [C++], OLE\"\nms.assetid: b1fd1639-fac4-4fd0-bf17-15172deba13c\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# COleMessageFilter Class\nManages the concurrency required by the interaction of OLE applications.  \n  \n## Syntax  \n  \n```  \nclass COleMessageFilter : public CCmdTarget  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[COleMessageFilter::COleMessageFilter](#colemessagefilter__colemessagefilter)|Constructs a `COleMessageFilter` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[COleMessageFilter::BeginBusyState](#colemessagefilter__beginbusystate)|Puts the application in the busy state.|  \n|[COleMessageFilter::EnableBusyDialog](#colemessagefilter__enablebusydialog)|Enables and disables the dialog box that appears when a called application is busy.|  \n|[COleMessageFilter::EnableNotRespondingDialog](#colemessagefilter__enablenotrespondingdialog)|Enables and disables the dialog box that appears when a called application is not responding.|  \n|[COleMessageFilter::EndBusyState](#colemessagefilter__endbusystate)|Terminates the application's busy state.|  \n|[COleMessageFilter::OnMessagePending](#colemessagefilter__onmessagepending)|Called by the framework to process messages while an OLE call is in progress.|  \n|[COleMessageFilter::Register](#colemessagefilter__register)|Registers the message filter with the OLE system DLLs.|  \n|[COleMessageFilter::Revoke](#colemessagefilter__revoke)|Revokes the message filter's registration with the OLE system DLLs.|  \n|[COleMessageFilter::SetBusyReply](#colemessagefilter__setbusyreply)|Determines the busy application's reply to an OLE call.|  \n|[COleMessageFilter::SetMessagePendingDelay](#colemessagefilter__setmessagependingdelay)|Determines how long the application waits for a response to an OLE call.|  \n|[COleMessageFilter::SetRetryReply](#colemessagefilter__setretryreply)|Determines the calling application's reply to a busy application.|  \n  \n## Remarks  \n The `COleMessageFilter` class is useful in visual editing server and container applications, as well as OLE automation applications. For server applications that are being called, this class can be used to make the application \"busy\" so that incoming calls from other container applications are either canceled or retried later. This class can also be used to determine the action to be taken by a calling application when the called application is busy.  \n  \n Common usage is for a server application to call [BeginBusyState](#colemessagefilter__beginbusystate) and [EndBusyState](#colemessagefilter__endbusystate) when it would be dangerous for a document or other OLE accessible object to be destroyed. These calls are made in [CWinApp::OnIdle](../../mfc/reference/cwinapp-class.md#cwinapp__onidle) during user-interface updates.  \n  \n By default, a `COleMessageFilter` object is allocated when the application is initialized. It can be retrieved with [AfxOleGetMessageFilter](application-control.md#afxolegetmessagefilter).  \n  \n This is an advanced class; you seldom need to work with it directly.  \n  \n For more information, see the article [Servers: Implementing a Server](../../mfc/servers-implementing-a-server.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n `COleMessageFilter`  \n  \n## Requirements  \n **Header:** afxole.h  \n  \n##  <a name=\"colemessagefilter__beginbusystate\"></a>  COleMessageFilter::BeginBusyState  \n Call this function to begin a busy state.  \n  \n```  \nvirtual void BeginBusyState();\n```  \n  \n### Remarks  \n It works in conjunction with [EndBusyState](#colemessagefilter__endbusystate) to control the application's busy state. The function [SetBusyReply](#colemessagefilter__setbusyreply) determines the application's reply to calling applications when it is busy.  \n  \n The `BeginBusyState` and `EndBusyState` calls increment and decrement, respectively, a counter that determines whether the application is busy. For example, two calls to `BeginBusyState` and one call to `EndBusyState` still result in a busy state. To cancel a busy state it is necessary to call `EndBusyState` the same number of times `BeginBusyState` has been called.  \n  \n By default, the framework enters the busy state during idle processing, which is performed by [CWinApp::OnIdle](../../mfc/reference/cwinapp-class.md#cwinapp__onidle). While the application is handling **ON_COMMANDUPDATEUI** notifications, incoming calls are handled later, after idle processing is complete.  \n  \n##  <a name=\"colemessagefilter__colemessagefilter\"></a>  COleMessageFilter::COleMessageFilter  \n Creates a `COleMessageFilter` object.  \n  \n```  \nCOleMessageFilter();\n```  \n  \n##  <a name=\"colemessagefilter__enablebusydialog\"></a>  COleMessageFilter::EnableBusyDialog  \n Enables and disables the busy dialog box, which is displayed when the message-pending delay expires (see [SetRetryReply](#colemessagefilter__setretryreply)) during an OLE call.  \n  \n```  \nvoid EnableBusyDialog(BOOL bEnableBusy = TRUE);\n```  \n  \n### Parameters  \n *bEnableBusy*  \n Specifies whether the \"busy\" dialog box is enabled or disabled.  \n  \n##  <a name=\"colemessagefilter__enablenotrespondingdialog\"></a>  COleMessageFilter::EnableNotRespondingDialog  \n Enables and disables the \"not responding\" dialog box, which is displayed if a keyboard or mouse message is pending during an OLE call and the call has timed out.  \n  \n```  \nvoid EnableNotRespondingDialog(BOOL bEnableNotResponding = TRUE);\n```  \n  \n### Parameters  \n *bEnableNotResponding*  \n Specifies whether the \"not responding\" dialog box is enabled or disabled.  \n  \n##  <a name=\"colemessagefilter__endbusystate\"></a>  COleMessageFilter::EndBusyState  \n Call this function to end a busy state.  \n  \n```  \nvirtual void EndBusyState();\n```  \n  \n### Remarks  \n It works in conjunction with [BeginBusyState](#colemessagefilter__beginbusystate) to control the application's busy state. The function [SetBusyReply](#colemessagefilter__setbusyreply) determines the application's reply to calling applications when it is busy.  \n  \n The `BeginBusyState` and `EndBusyState` calls increment and decrement, respectively, a counter that determines whether the application is busy. For example, two calls to `BeginBusyState` and one call to `EndBusyState` still result in a busy state. To cancel a busy state it is necessary to call `EndBusyState` the same number of times `BeginBusyState` has been called.  \n  \n By default, the framework enters the busy state during idle processing, which is performed by [CWinApp::OnIdle](../../mfc/reference/cwinapp-class.md#cwinapp__onidle). While the application is handling `ON_UPDATE_COMMAND_UI` notifications, incoming calls are handled after idle processing is complete.  \n  \n##  <a name=\"colemessagefilter__onmessagepending\"></a>  COleMessageFilter::OnMessagePending  \n Called by the framework to process messages while an OLE call is in progress.  \n  \n```  \nvirtual BOOL OnMessagePending(const MSG* pMsg);\n```  \n  \n### Parameters  \n `pMsg`  \n Pointer to the pending message.  \n  \n### Return Value  \n Nonzero on success; otherwise 0.  \n  \n### Remarks  \n When a calling application is waiting for a call to be completed, the framework calls `OnMessagePending` with a pointer to the pending message. By default, the framework dispatches `WM_PAINT` messages, so that window updates can occur during a call that is taking a long time.  \n  \n You must register your message filter by means of a call to [Register](#colemessagefilter__register) before it can become active.  \n  \n##  <a name=\"colemessagefilter__register\"></a>  COleMessageFilter::Register  \n Registers the message filter with the OLE system DLLs.  \n  \n```  \nBOOL Register();\n```  \n  \n### Return Value  \n Nonzero on success; otherwise 0.  \n  \n### Remarks  \n A message filter has no effect unless it is registered with the system DLLs. Usually your application's initialization code registers the application's message filter. Any other message filter registered by your application should be revoked before the program terminates by a call to [Revoke](#colemessagefilter__revoke).  \n  \n The framework's default message filter is automatically registered during initialization and revoked at termination.  \n  \n##  <a name=\"colemessagefilter__revoke\"></a>  COleMessageFilter::Revoke  \n Revokes a previous registration performed by a call to [Register](#colemessagefilter__register).  \n  \n```  \nvoid Revoke();\n```  \n  \n### Remarks  \n A message filter should be revoked before the program terminates.  \n  \n The default message filter, which is created and registered automatically by the framework, is also automatically revoked.  \n  \n##  <a name=\"colemessagefilter__setbusyreply\"></a>  COleMessageFilter::SetBusyReply  \n This function sets the application's \"busy reply.\"  \n  \n```  \nvoid SetBusyReply(SERVERCALL nBusyReply);\n```  \n  \n### Parameters  \n *nBusyReply*  \n A value from the `SERVERCALL` enumeration, which is defined in COMPOBJ.H. It can have any one of the following values:  \n  \n- **SERVERCALL_ISHANDLED** The application can accept calls but may fail in processing a particular call.  \n  \n- **SERVERCALL_REJECTED** The application probably will never be able to process a call.  \n  \n- **SERVERCALL_RETRYLATER** The application is temporarily in a state in which it cannot process a call.  \n  \n### Remarks  \n The [BeginBusyState](#colemessagefilter__beginbusystate) and [EndBusyState](#colemessagefilter__endbusystate) functions control the application's busy state.  \n  \n When an application has been made busy with a call to `BeginBusyState`, it responds to calls from the OLE system DLLs with a value determined by the last setting of `SetBusyReply`. The calling application uses this busy reply to determine what action to take.  \n  \n By default, the busy reply is **SERVERCALL_RETRYLATER**. This reply causes the calling application to retry the call as soon as possible.  \n  \n##  <a name=\"colemessagefilter__setmessagependingdelay\"></a>  COleMessageFilter::SetMessagePendingDelay  \n Determines how long the calling application waits for a response from the called application before taking further action.  \n  \n```  \nvoid SetMessagePendingDelay(DWORD nTimeout = 5000);\n```  \n  \n### Parameters  \n `nTimeout`  \n Number of milliseconds for the message-pending delay.  \n  \n### Remarks  \n This function works in concert with [SetRetryReply](#colemessagefilter__setretryreply).  \n  \n##  <a name=\"colemessagefilter__setretryreply\"></a>  COleMessageFilter::SetRetryReply  \n Determines the calling application's action when it receives a busy response from a called application.  \n  \n```  \nvoid SetRetryReply(DWORD nRetryReply = 0);\n```  \n  \n### Parameters  \n `nRetryReply`  \n Number of milliseconds between retries.  \n  \n### Remarks  \n When a called application indicates that it is busy, the calling application may decide to wait until the server is no longer busy, to retry right away, or to retry after a specified interval. It may also decide to cancel the call altogether.  \n  \n The caller's response is controlled by the functions `SetRetryReply` and [SetMessagePendingDelay](#colemessagefilter__setmessagependingdelay). `SetRetryReply` determines how long the calling application should wait between retries for a given call. `SetMessagePendingDelay` determines how long the calling application waits for a response from the server before taking further action.  \n  \n Usually the defaults are acceptable and do not need to be changed. The framework retries the call every `nRetryReply` milliseconds until the call goes through or the message-pending delay has expired. A value of 0 for `nRetryReply` specifies an immediate retry, and – 1 specifies cancellation of the call.  \n  \n When the message-pending delay has expired, the OLE \"busy dialog box\" (see [COleBusyDialog](../../mfc/reference/colebusydialog-class.md)) is displayed so that the user can choose to cancel or retry the call. Call [EnableBusyDialog](#colemessagefilter__enablebusydialog) to enable or disable this dialog box.  \n  \n When a keyboard or mouse message is pending during a call and the call has timed out (exceeded the message-pending delay), the \"not responding\" dialog box is displayed. Call [EnableNotRespondingDialog](#colemessagefilter__enablenotrespondingdialog) to enable or disable this dialog box. Usually this state of affairs indicates that something has gone wrong and the user is getting impatient.  \n  \n When the dialogs are disabled, the current \"retry reply\" is always used for calls to busy applications.  \n  \n## See Also  \n [CCmdTarget Class](../../mfc/reference/ccmdtarget-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CCmdTarget Class](../../mfc/reference/ccmdtarget-class.md)\n"}