{"nodes":[{"pos":[12,34],"content":"MxCsr | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"MxCsr | Microsoft Docs","pos":[0,22]}]},{"content":"MxCsr","pos":[514,519]},{"content":"The register state also includes MxCsr.","pos":[520,559]},{"content":"The calling convention divides this register into a volatile portion and a nonvolatile portion.","pos":[560,655]},{"content":"The volatile portion consists of the 6 status flags, MXCSR[0:5], while the remainder of the register, MXCSR[6:15], is considered nonvolatile.","pos":[656,797]},{"content":"The nonvolatile portion is set to the following standard values at the start of program execution:","pos":[804,902]},{"content":"A callee that modifies any of the nonvolatile fields within MXCSR must restore them before returning to its caller.","pos":[1162,1277]},{"content":"Furthermore, a caller that has modified any of these fields must restore them to their standard values before invoking a callee unless by agreement the callee expects the modified values.","pos":[1278,1465]},{"content":"There are two exceptions to the rules regarding the non-volatility of the control flags:","pos":[1472,1560]},{"content":"In functions where the documented purpose of the given function is to modify the nonvolatile MxCsr flags.","pos":[1570,1675]},{"content":"When it is provably correct that the violation of these rules results in a programs that behaves/means the same as a program where these rules are not violated, for example, through whole-program analysis.","pos":[1685,1890]},{"content":"No assumptions can be made about the state of the volatile portion of MXCSR across a function boundary, unless specifically described in a function's documentation.","pos":[1897,2061]},{"content":"See Also","pos":[2070,2078]},{"content":"Calling Convention","pos":[2083,2101]}],"content":"---\ntitle: \"MxCsr | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: 4f3c229d-0862-4733-acc7-9ed7a0b870ce\ncaps.latest.revision: 7\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# MxCsr\nThe register state also includes MxCsr. The calling convention divides this register into a volatile portion and a nonvolatile portion. The volatile portion consists of the 6 status flags, MXCSR[0:5], while the remainder of the register, MXCSR[6:15], is considered nonvolatile.  \n  \n The nonvolatile portion is set to the following standard values at the start of program execution:  \n  \n```  \nMXCSR[6]         : Denormals are zeros - 0  \nMXCSR[7:12]      : Exception masks all 1's (all exceptions masked)  \nMXCSR[13:14]   : Rounding  control - 0 (round to nearest)  \nMXCSR[15]      : Flush to zero for masked underflow - 0 (off)  \n```  \n  \n A callee that modifies any of the nonvolatile fields within MXCSR must restore them before returning to its caller. Furthermore, a caller that has modified any of these fields must restore them to their standard values before invoking a callee unless by agreement the callee expects the modified values.  \n  \n There are two exceptions to the rules regarding the non-volatility of the control flags:  \n  \n-   In functions where the documented purpose of the given function is to modify the nonvolatile MxCsr flags.  \n  \n-   When it is provably correct that the violation of these rules results in a programs that behaves/means the same as a program where these rules are not violated, for example, through whole-program analysis.  \n  \n No assumptions can be made about the state of the volatile portion of MXCSR across a function boundary, unless specifically described in a function's documentation.  \n  \n## See Also  \n [Calling Convention](../build/calling-convention.md)"}