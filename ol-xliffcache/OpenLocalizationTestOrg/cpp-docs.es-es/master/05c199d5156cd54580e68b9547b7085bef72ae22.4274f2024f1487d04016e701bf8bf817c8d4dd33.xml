{"nodes":[{"pos":[12,64],"content":"Storage and Alignment of Structures | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Storage and Alignment of Structures | Microsoft Docs","pos":[0,52]}]},{"content":"Storage and Alignment of Structures","pos":[678,713]},{"content":"Microsoft Specific","pos":[716,734]},{"content":"Structure members are stored sequentially in the order in which they are declared: the first member has the lowest memory address and the last member the highest.","pos":[743,905]},{"content":"Every data object has an <bpt id=\"p1\">*</bpt>alignment-requirement<ept id=\"p1\">*</ept>.","pos":[912,961],"source":"Every data object has an *alignment-requirement*."},{"content":"For structures, the requirement is the largest of its members.","pos":[962,1024]},{"content":"Every object is allocated an <bpt id=\"p1\">*</bpt>offset<ept id=\"p1\">*</ept> so that","pos":[1025,1070],"source":" Every object is allocated an *offset* so that"},{"pos":[1077,1120],"content":"<bpt id=\"p1\">*</bpt>offset<ept id=\"p1\">*</ept> <ph id=\"ph1\">`%`</ph> <bpt id=\"p2\">*</bpt>alignment-requirement<ept id=\"p2\">*</ept> <ph id=\"ph2\">`==`</ph> 0","source":"*offset* `%` *alignment-requirement* `==` 0"},{"content":"Adjacent bit fields are packed into the same 1-, 2-, or 4-byte allocation unit if the integral types are the same size and if the next bit field fits into the current allocation unit without crossing the boundary imposed by the common alignment requirements of the bit fields.","pos":[1127,1403]},{"content":"To conserve space or to conform to existing data structures, you may want to store structures more or less compactly.","pos":[1410,1527]},{"content":"The <bpt id=\"p1\">[</bpt>/Zp<ept id=\"p1\">](../build/reference/zp-struct-member-alignment.md)</ept>[<bpt id=\"p2\">*</bpt>n<ept id=\"p2\">*</ept>] compiler option and the <bpt id=\"p3\">[</bpt>#pragma pack<ept id=\"p3\">](../preprocessor/pack.md)</ept> control how structure data is \"packed\" into memory.","pos":[1528,1708],"source":" The [/Zp](../build/reference/zp-struct-member-alignment.md)[*n*] compiler option and the [#pragma pack](../preprocessor/pack.md) control how structure data is \"packed\" into memory."},{"content":"When you use the /Zp[<bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept>] option, where <bpt id=\"p2\">*</bpt>n<ept id=\"p2\">*</ept> is 1, 2, 4, 8, or 16, each structure member after the first is stored on byte boundaries that are either the alignment requirement of the field or the packing size (<bpt id=\"p3\">*</bpt>n<ept id=\"p3\">*</ept>), whichever is smaller.","pos":[1709,1945],"source":" When you use the /Zp[*n*] option, where *n* is 1, 2, 4, 8, or 16, each structure member after the first is stored on byte boundaries that are either the alignment requirement of the field or the packing size (*n*), whichever is smaller."},{"content":"Expressed as a formula, the byte boundaries are the","pos":[1946,1997]},{"content":"where <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept> is the packing size expressed with the /Zp[<bpt id=\"p2\">*</bpt>n<ept id=\"p2\">*</ept>] option and <bpt id=\"p3\">*</bpt>item<ept id=\"p3\">*</ept> is the structure member.","pos":[2046,2146],"source":"where *n* is the packing size expressed with the /Zp[*n*] option and *item* is the structure member."},{"content":"The default packing size is /Zp8.","pos":[2147,2180]},{"content":"To use the <ph id=\"ph1\">`pack`</ph> pragma to specify packing other than the packing specified on the command line for a particular structure, give the <ph id=\"ph2\">`pack`</ph> pragma, where the packing size is 1, 2, 4, 8, or 16, before the structure.","pos":[2187,2402],"source":"To use the `pack` pragma to specify packing other than the packing specified on the command line for a particular structure, give the `pack` pragma, where the packing size is 1, 2, 4, 8, or 16, before the structure."},{"content":"To reinstate the packing given on the command line, specify the <ph id=\"ph1\">`pack`</ph> pragma with no arguments.","pos":[2403,2499],"source":" To reinstate the packing given on the command line, specify the `pack` pragma with no arguments."},{"content":"Bit fields default to size <bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept> for the Microsoft C compiler.","pos":[2506,2571],"source":"Bit fields default to size **long** for the Microsoft C compiler."},{"content":"Structure members are aligned on the size of the type or the /Zp[<bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept>] size, whichever is smaller.","pos":[2572,2669],"source":" Structure members are aligned on the size of the type or the /Zp[*n*] size, whichever is smaller."},{"content":"The default size is 4.","pos":[2670,2692]},{"content":"END Microsoft Specific","pos":[2701,2723]},{"content":"See Also","pos":[2734,2742]},{"content":"Structure Declarations","pos":[2747,2769]}],"content":"---\ntitle: \"Storage and Alignment of Structures | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"alignment of structures\"\n  - \"structure storage\"\n  - \"storing structures\"\n  - \"packing structures\"\nms.assetid: 60ff292f-2595-4f37-ae00-4c4b4f047196\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Storage and Alignment of Structures\n**Microsoft Specific**  \n  \n Structure members are stored sequentially in the order in which they are declared: the first member has the lowest memory address and the last member the highest.  \n  \n Every data object has an *alignment-requirement*. For structures, the requirement is the largest of its members. Every object is allocated an *offset* so that  \n  \n *offset* `%` *alignment-requirement* `==` 0  \n  \n Adjacent bit fields are packed into the same 1-, 2-, or 4-byte allocation unit if the integral types are the same size and if the next bit field fits into the current allocation unit without crossing the boundary imposed by the common alignment requirements of the bit fields.  \n  \n To conserve space or to conform to existing data structures, you may want to store structures more or less compactly. The [/Zp](../build/reference/zp-struct-member-alignment.md)[*n*] compiler option and the [#pragma pack](../preprocessor/pack.md) control how structure data is \"packed\" into memory. When you use the /Zp[*n*] option, where *n* is 1, 2, 4, 8, or 16, each structure member after the first is stored on byte boundaries that are either the alignment requirement of the field or the packing size (*n*), whichever is smaller. Expressed as a formula, the byte boundaries are the  \n  \n```  \nmin( n, sizeof( item ) )  \n```  \n  \n where *n* is the packing size expressed with the /Zp[*n*] option and *item* is the structure member. The default packing size is /Zp8.  \n  \n To use the `pack` pragma to specify packing other than the packing specified on the command line for a particular structure, give the `pack` pragma, where the packing size is 1, 2, 4, 8, or 16, before the structure. To reinstate the packing given on the command line, specify the `pack` pragma with no arguments.  \n  \n Bit fields default to size **long** for the Microsoft C compiler. Structure members are aligned on the size of the type or the /Zp[*n*] size, whichever is smaller. The default size is 4.  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [Structure Declarations](../c-language/structure-declarations.md)"}