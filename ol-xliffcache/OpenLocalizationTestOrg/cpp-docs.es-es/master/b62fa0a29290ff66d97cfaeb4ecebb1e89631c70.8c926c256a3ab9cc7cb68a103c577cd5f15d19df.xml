{"nodes":[{"pos":[12,62],"content":"C-Style Casts with -clr (C++-CLI) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"C-Style Casts with -clr (C++-CLI) | Microsoft Docs","pos":[0,50]}]},{"content":"C-Style Casts with /clr (C++/CLI)","pos":[605,638]},{"content":"The following topic applies only to the Common Language Runtime.","pos":[639,703]},{"content":"When used with CLR types, the compiler attempts to map C-style cast to one of the casts listed below, in the following order:","pos":[710,835]},{"content":"const_cast","pos":[845,855]},{"content":"safe_cast","pos":[865,874]},{"content":"safe_cast plus const_cast","pos":[884,909]},{"content":"static_cast","pos":[919,930]},{"content":"static_cast plus const_cast","pos":[940,967]},{"content":"If none of the casts listed above is valid, and if the type of the expression and the target type are CLR reference types, C-style cast maps to a runtime-check (castclass MSIL instruction).","pos":[974,1163]},{"content":"Otherwise, a C-style cast is considered invalid and the compiler issues an error.","pos":[1164,1245]},{"content":"Remarks","pos":[1254,1261]},{"content":"A C-style cast is not recommended.","pos":[1265,1299]},{"content":"When compiling with <bpt id=\"p1\">[</bpt>/clr (Common Language Runtime Compilation)<ept id=\"p1\">](../build/reference/clr-common-language-runtime-compilation.md)</ept>, use <bpt id=\"p2\">[</bpt>safe_cast<ept id=\"p2\">](../windows/safe-cast-cpp-component-extensions.md)</ept>.","pos":[1300,1495],"source":" When compiling with [/clr (Common Language Runtime Compilation)](../build/reference/clr-common-language-runtime-compilation.md), use [safe_cast](../windows/safe-cast-cpp-component-extensions.md)."},{"pos":[1502,1572],"content":"The following sample shows a C-style cast that maps to a <ph id=\"ph1\">`const_cast`</ph>.","source":"The following sample shows a C-style cast that maps to a `const_cast`."},{"pos":[1784,1853],"content":"The following sample shows a C-style cast that maps to a <ph id=\"ph1\">`safe_cast`</ph>.","source":"The following sample shows a C-style cast that maps to a `safe_cast`."},{"pos":[2025,2112],"content":"The following sample shows a C-style cast that maps to a <ph id=\"ph1\">`safe_cast`</ph> plus <ph id=\"ph2\">`const_cast`</ph>.","source":"The following sample shows a C-style cast that maps to a `safe_cast` plus `const_cast`."},{"pos":[2471,2542],"content":"The following sample shows a C-style cast that maps to a <ph id=\"ph1\">`static_cast`</ph>.","source":"The following sample shows a C-style cast that maps to a `static_cast`."},{"pos":[2790,2879],"content":"The following sample shows a C-style cast that maps to a <ph id=\"ph1\">`static_cast`</ph> plus <ph id=\"ph2\">`const_cast`</ph>.","source":"The following sample shows a C-style cast that maps to a `static_cast` plus `const_cast`."},{"content":"The following sample shows a C-style cast that maps to a run-time check.","pos":[3194,3266]},{"content":"The following sample shows an invalid C-style cast, which causes the compiler to issue an error.","pos":[3607,3703]},{"content":"Requirements","pos":[3878,3890]},{"pos":[3894,3919],"content":"Compiler option: <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept>","source":"Compiler option: **/clr**"},{"content":"See Also","pos":[3928,3936]},{"content":"Component Extensions for Runtime Platforms","pos":[3941,3983]}],"content":"---\ntitle: \"C-Style Casts with -clr (C++-CLI) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C-style casts and /clr\"\nms.assetid: d2a4401a-156a-4da9-8d12-923743e26913\ncaps.latest.revision: 13\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# C-Style Casts with /clr (C++/CLI)\nThe following topic applies only to the Common Language Runtime.  \n  \n When used with CLR types, the compiler attempts to map C-style cast to one of the casts listed below, in the following order:  \n  \n1.  const_cast  \n  \n2.  safe_cast  \n  \n3.  safe_cast plus const_cast  \n  \n4.  static_cast  \n  \n5.  static_cast plus const_cast  \n  \n If none of the casts listed above is valid, and if the type of the expression and the target type are CLR reference types, C-style cast maps to a runtime-check (castclass MSIL instruction). Otherwise, a C-style cast is considered invalid and the compiler issues an error.  \n  \n## Remarks  \n A C-style cast is not recommended. When compiling with [/clr (Common Language Runtime Compilation)](../build/reference/clr-common-language-runtime-compilation.md), use [safe_cast](../windows/safe-cast-cpp-component-extensions.md).  \n  \n The following sample shows a C-style cast that maps to a `const_cast`.  \n  \n```  \n// cstyle_casts_1.cpp  \n// compile with: /clr  \nusing namespace System;  \n  \nref struct R {};  \nint main() {  \n   const R^ constrefR = gcnew R();  \n   R^ nonconstR = (R^)(constrefR);   \n}  \n```  \n  \n The following sample shows a C-style cast that maps to a `safe_cast`.  \n  \n```  \n// cstyle_casts_2.cpp  \n// compile with: /clr  \nusing namespace System;  \nint main() {  \n   Object ^ o = \"hello\";  \n   String ^ s = (String^)o;  \n}  \n```  \n  \n The following sample shows a C-style cast that maps to a `safe_cast` plus `const_cast`.  \n  \n```  \n// cstyle_casts_3.cpp  \n// compile with: /clr  \nusing namespace System;  \n  \nref struct R {};  \nref struct R2 : public R {};  \n  \nint main() {  \n   const R^ constR2 = gcnew R2();  \n   try {  \n   R2^ b2DR = (R2^)(constR2);  \n   }  \n   catch(InvalidCastException^ e) {  \n      System::Console::WriteLine(\"Invalid Exception\");  \n   }  \n}  \n```  \n  \n The following sample shows a C-style cast that maps to a `static_cast`.  \n  \n```  \n// cstyle_casts_4.cpp  \n// compile with: /clr  \nusing namespace System;  \n  \nstruct N1 {};  \nstruct N2 {  \n   operator N1() {  \n      return N1();  \n   }  \n};  \n  \nint main() {  \n   N2 n2;  \n   N1 n1 ;  \n   n1 = (N1)n2;  \n}  \n```  \n  \n The following sample shows a C-style cast that maps to a `static_cast` plus `const_cast`.  \n  \n```  \n// cstyle_casts_5.cpp  \n// compile with: /clr  \nusing namespace System;  \nstruct N1 {};  \n  \nstruct N2 {  \n   operator const N1*() {  \n      static const N1 n1;  \n      return &n1;  \n   }  \n};  \n  \nint main() {  \n   N2 n2;  \n   N1* n1 = (N1*)(const N1*)n2;   // const_cast + static_cast  \n}  \n```  \n  \n The following sample shows a C-style cast that maps to a run-time check.  \n  \n```  \n// cstyle_casts_6.cpp  \n// compile with: /clr  \nusing namespace System;  \n  \nref class R1 {};  \nref class R2 {};  \n  \nint main() {  \n   R1^ r  = gcnew R1();  \n   try {  \n      R2^ rr = ( R2^)(r);  \n   }  \n   catch(System::InvalidCastException^ e) {  \n      Console::WriteLine(\"Caught expected exception\");  \n   }  \n}  \n```  \n  \n The following sample shows an invalid C-style cast, which causes the compiler to issue an error.  \n  \n```  \n// cstyle_casts_7.cpp  \n// compile with: /clr  \nusing namespace System;  \nint main() {  \n   String^s = S\"hello\";  \n   int i = (int)s;   // C2440  \n}  \n```  \n  \n## Requirements  \n Compiler option: **/clr**  \n  \n## See Also  \n [Component Extensions for Runtime Platforms](../windows/component-extensions-for-runtime-platforms.md)"}