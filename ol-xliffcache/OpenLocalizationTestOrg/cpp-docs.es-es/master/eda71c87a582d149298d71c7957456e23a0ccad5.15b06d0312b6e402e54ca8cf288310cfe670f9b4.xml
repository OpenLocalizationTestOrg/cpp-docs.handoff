{"nodes":[{"pos":[12,69],"content":"-vd (Disable Construction Displacements) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"-vd (Disable Construction Displacements) | Microsoft Docs","pos":[0,57]}]},{"content":"/vd (Disable Construction Displacements)","pos":[1002,1042]},{"content":"Syntax","pos":[1046,1052]},{"content":"Arguments","pos":[1083,1092]},{"content":"Suppresses the vtordisp constructor/destructor displacement member.","pos":[1103,1170]},{"content":"Choose this option only if you are certain that all class constructors and destructors call virtual functions virtually.","pos":[1171,1291]},{"content":"Enables the creation of hidden vtordisp constructor/destructor displacement members.","pos":[1305,1389]},{"content":"This choice is the default.","pos":[1390,1417]},{"content":"Allows you to use <bpt id=\"p1\">[</bpt>dynamic_cast Operator<ept id=\"p1\">](../../cpp/dynamic-cast-operator.md)</ept> on an object being constructed.","pos":[1431,1540],"source":" Allows you to use [dynamic_cast Operator](../../cpp/dynamic-cast-operator.md) on an object being constructed."},{"content":"For example, a dynamic_cast from a virtual base class to a derived class.","pos":[1541,1614]},{"content":"<bpt id=\"p1\">**</bpt>/vd2<ept id=\"p1\">**</ept> adds a vtordisp field when you have a virtual base with virtual functions.","pos":[1621,1704],"source":"**/vd2** adds a vtordisp field when you have a virtual base with virtual functions."},{"content":"<bpt id=\"p1\">**</bpt>/vd1<ept id=\"p1\">**</ept> should be sufficient.","pos":[1705,1735],"source":"**/vd1** should be sufficient."},{"content":"The most common case where <bpt id=\"p1\">**</bpt>/vd2<ept id=\"p1\">**</ept> is necessary is when the only virtual function in your virtual base is a destructor.","pos":[1736,1856],"source":" The most common case where **/vd2** is necessary is when the only virtual function in your virtual base is a destructor."},{"content":"Remarks","pos":[1865,1872]},{"content":"These options apply only to C++ code that uses virtual bases.","pos":[1876,1937]},{"content":"implements C++ construction displacement support in situations where virtual inheritance is used.","pos":[1998,2095]},{"content":"Construction displacements solve the problem created when a virtual function, declared in a virtual base and overridden in a derived class, is called from a constructor during construction of a further derived class.","pos":[2096,2312]},{"content":"The problem is that the virtual function may be passed an incorrect <ph id=\"ph1\">`this`</ph> pointer as a result of discrepancies between the displacements to the virtual bases of a class and the displacements to its derived classes.","pos":[2319,2534],"source":"The problem is that the virtual function may be passed an incorrect `this` pointer as a result of discrepancies between the displacements to the virtual bases of a class and the displacements to its derived classes."},{"content":"The solution provides a single construction displacement adjustment, called a vtordisp field, for each virtual base of a class.","pos":[2535,2662]},{"content":"By default, vtordisp fields are introduced whenever the code defines user-defined constructors and destructors and also overrides virtual functions of virtual bases.","pos":[2669,2834]},{"content":"These options affect entire source files.","pos":[2841,2882]},{"content":"Use <bpt id=\"p1\">[</bpt>vtordisp<ept id=\"p1\">](../../preprocessor/vtordisp.md)</ept> to suppress and then re-enable vtordisp fields on a class-by-class basis.","pos":[2883,3003],"source":" Use [vtordisp](../../preprocessor/vtordisp.md) to suppress and then re-enable vtordisp fields on a class-by-class basis."},{"content":"To set this compiler option in the Visual Studio development environment","pos":[3013,3085]},{"content":"Open the project's <bpt id=\"p1\">**</bpt>Property Pages<ept id=\"p1\">**</ept> dialog box.","pos":[3095,3144],"source":"Open the project's **Property Pages** dialog box."},{"content":"For details, see <bpt id=\"p1\">[</bpt>Working with Project Properties<ept id=\"p1\">](../../ide/working-with-project-properties.md)</ept>.","pos":[3145,3242],"source":" For details, see [Working with Project Properties](../../ide/working-with-project-properties.md)."},{"pos":[3252,3279],"content":"Click the <bpt id=\"p1\">**</bpt>C/C++<ept id=\"p1\">**</ept> folder.","source":"Click the **C/C++** folder."},{"pos":[3289,3330],"content":"Click the <bpt id=\"p1\">**</bpt>Command Line<ept id=\"p1\">**</ept> property page.","source":"Click the **Command Line** property page."},{"pos":[3340,3399],"content":"Type the compiler option in the <bpt id=\"p1\">**</bpt>Additional Options<ept id=\"p1\">**</ept> box.","source":"Type the compiler option in the **Additional Options** box."},{"content":"To set this compiler option programmatically","pos":[3409,3453]},{"content":"See &lt;xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.AdditionalOptions%2A&gt;.","pos":[3463,3551],"source":"See <xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.AdditionalOptions%2A>."},{"content":"See Also","pos":[3560,3568]},{"content":"Compiler Options","pos":[3573,3589]},{"content":"Setting Compiler Options","pos":[3639,3663]}],"content":"---\ntitle: \"-vd (Disable Construction Displacements) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"/vd\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"-vd0 compiler option [C++]\"\n  - \"vd1 compiler option [C++]\"\n  - \"/vdn (Disable Construction Displacement) compiler option\"\n  - \"constructor displacements\"\n  - \"vtordisp fields\"\n  - \"/vd0 compiler option [C++]\"\n  - \"-vd1 compiler option [C++]\"\n  - \"/vd1 compiler option [C++]\"\n  - \"displacements compiler option\"\n  - \"vd0 compiler option [C++]\"\n  - \"Disable Construction Displacements compiler option\"\nms.assetid: 93258964-14d7-4b1c-9cbc-d6f4d74eab69\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# /vd (Disable Construction Displacements)\n## Syntax  \n  \n```  \n/vdn  \n```  \n  \n## Arguments  \n `0`  \n Suppresses the vtordisp constructor/destructor displacement member. Choose this option only if you are certain that all class constructors and destructors call virtual functions virtually.  \n  \n `1`  \n Enables the creation of hidden vtordisp constructor/destructor displacement members. This choice is the default.  \n  \n `2`  \n Allows you to use [dynamic_cast Operator](../../cpp/dynamic-cast-operator.md) on an object being constructed. For example, a dynamic_cast from a virtual base class to a derived class.  \n  \n **/vd2** adds a vtordisp field when you have a virtual base with virtual functions. **/vd1** should be sufficient. The most common case where **/vd2** is necessary is when the only virtual function in your virtual base is a destructor.  \n  \n## Remarks  \n These options apply only to C++ code that uses virtual bases.  \n  \n [!INCLUDE[vcprvc](../../build/includes/vcprvc_md.md)] implements C++ construction displacement support in situations where virtual inheritance is used. Construction displacements solve the problem created when a virtual function, declared in a virtual base and overridden in a derived class, is called from a constructor during construction of a further derived class.  \n  \n The problem is that the virtual function may be passed an incorrect `this` pointer as a result of discrepancies between the displacements to the virtual bases of a class and the displacements to its derived classes. The solution provides a single construction displacement adjustment, called a vtordisp field, for each virtual base of a class.  \n  \n By default, vtordisp fields are introduced whenever the code defines user-defined constructors and destructors and also overrides virtual functions of virtual bases.  \n  \n These options affect entire source files. Use [vtordisp](../../preprocessor/vtordisp.md) to suppress and then re-enable vtordisp fields on a class-by-class basis.  \n  \n### To set this compiler option in the Visual Studio development environment  \n  \n1.  Open the project's **Property Pages** dialog box. For details, see [Working with Project Properties](../../ide/working-with-project-properties.md).  \n  \n2.  Click the **C/C++** folder.  \n  \n3.  Click the **Command Line** property page.  \n  \n4.  Type the compiler option in the **Additional Options** box.  \n  \n### To set this compiler option programmatically  \n  \n-   See <xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.AdditionalOptions%2A>.  \n  \n## See Also  \n [Compiler Options](../../build/reference/compiler-options.md)   \n [Setting Compiler Options](../../build/reference/setting-compiler-options.md)"}