{"nodes":[{"pos":[12,50],"content":"_CrtMemDumpStatistics | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_CrtMemDumpStatistics | Microsoft Docs","pos":[0,38]}]},{"pos":[986,1007],"content":"_CrtMemDumpStatistics","linkify":"_CrtMemDumpStatistics","nodes":[{"content":"_CrtMemDumpStatistics","pos":[0,21]}]},{"content":"Dumps the debug header information for a specified heap state in a user-readable form (debug version only).","pos":[1008,1115]},{"pos":[1124,1130],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1224,1234],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to the heap state to dump.","pos":[1249,1283]},{"pos":[1292,1299],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_CrtMemDumpStatistics`</ph> function dumps the debug header information for a specified state of the heap in a user-readable form.","pos":[1303,1433],"source":"The `_CrtMemDumpStatistics` function dumps the debug header information for a specified state of the heap in a user-readable form."},{"content":"The dump statistics can be used by the application to track allocations and detect memory problems.","pos":[1434,1533]},{"content":"The memory state can contain a specific heap state or the difference between two states.","pos":[1534,1622]},{"content":"When <bpt id=\"p1\">[</bpt>_DEBUG<ept id=\"p1\">](../../c-runtime-library/debug.md)</ept> is not defined, calls to <ph id=\"ph1\">`_CrtMemDumpStatistics`</ph> are removed during preprocessing.","pos":[1623,1753],"source":" When [_DEBUG](../../c-runtime-library/debug.md) is not defined, calls to `_CrtMemDumpStatistics` are removed during preprocessing."},{"content":"The <ph id=\"ph1\">`state`</ph> parameter must be a pointer to a <ph id=\"ph2\">`_CrtMemState`</ph> structure that has been filled in by <bpt id=\"p1\">[</bpt>_CrtMemCheckpoint<ept id=\"p1\">](../../c-runtime-library/reference/crtmemcheckpoint.md)</ept> or returned by <bpt id=\"p2\">[</bpt>_CrtMemDifference<ept id=\"p2\">](../../c-runtime-library/reference/crtmemdifference.md)</ept> before <ph id=\"ph3\">`_CrtMemDumpStatistics`</ph> is called.","pos":[1760,2063],"source":"The `state` parameter must be a pointer to a `_CrtMemState` structure that has been filled in by [_CrtMemCheckpoint](../../c-runtime-library/reference/crtmemcheckpoint.md) or returned by [_CrtMemDifference](../../c-runtime-library/reference/crtmemdifference.md) before `_CrtMemDumpStatistics` is called."},{"content":"If <ph id=\"ph1\">`state`</ph> is <ph id=\"ph2\">`NULL`</ph>, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2064,2216],"source":" If `state` is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`EINVAL`</ph> and no action is taken.","pos":[2217,2304],"source":" If execution is allowed to continue, `errno` is set to `EINVAL` and no action is taken."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","pos":[2305,2447],"source":" For more information, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"For more information about heap state functions and the <ph id=\"ph1\">`_CrtMemState`</ph> structure, see <bpt id=\"p1\">[</bpt>Heap State Reporting Functions<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[2454,2620],"source":"For more information about heap state functions and the `_CrtMemState` structure, see [Heap State Reporting Functions](/visualstudio/debugger/crt-debug-heap-details)."},{"content":"For more information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see <bpt id=\"p1\">[</bpt>CRT Debug Heap Details<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[2621,2821],"source":" For more information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see [CRT Debug Heap Details](/visualstudio/debugger/crt-debug-heap-details)."},{"pos":[2830,2842],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[2849,2856]},{"content":"Required header","pos":[2857,2872]},{"content":"Optional headers","pos":[2873,2889]},{"content":"<ph id=\"ph1\">\\&lt;</ph>crtdbg.h&gt;","pos":[2981,2992],"source":"\\<crtdbg.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>errno.h&gt;","pos":[2993,3003],"source":"\\<errno.h>"},{"pos":[3011,3129],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[3136,3246],"content":"<bpt id=\"p1\">**</bpt>Libraries:<ept id=\"p1\">**</ept> Debug versions of <bpt id=\"p2\">[</bpt>CRT Library Features<ept id=\"p2\">](../../c-runtime-library/crt-library-features.md)</ept> only.","source":"**Libraries:** Debug versions of [CRT Library Features](../../c-runtime-library/crt-library-features.md) only."},{"pos":[3255,3280],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"&lt;xref:System.Diagnostics.PerformanceCounter?displayProperty=fullName&gt;","pos":[3284,3353],"source":"<xref:System.Diagnostics.PerformanceCounter?displayProperty=fullName>"},{"pos":[3362,3370],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3374,3433],"content":"<bpt id=\"p1\">[</bpt>Debug Routines<ept id=\"p1\">](../../c-runtime-library/debug-routines.md)</ept>","source":"[Debug Routines](../../c-runtime-library/debug-routines.md)"}],"content":"---\ntitle: \"_CrtMemDumpStatistics | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_CrtMemDumpStatistics\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"CrtMemDumpStatistics\"\n  - \"_CrtMemDumpStatistics\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_CrtMemDumpStatistics function\"\n  - \"CrtMemDumpStatistics function\"\nms.assetid: 27b9d731-3184-4a2d-b9a7-6566ab28a9fe\ncaps.latest.revision: 15\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _CrtMemDumpStatistics\nDumps the debug header information for a specified heap state in a user-readable form (debug version only).  \n  \n## Syntax  \n  \n```  \nvoid _CrtMemDumpStatistics(   \n   const _CrtMemState *state   \n);  \n```  \n  \n#### Parameters  \n `state`  \n Pointer to the heap state to dump.  \n  \n## Remarks  \n The `_CrtMemDumpStatistics` function dumps the debug header information for a specified state of the heap in a user-readable form. The dump statistics can be used by the application to track allocations and detect memory problems. The memory state can contain a specific heap state or the difference between two states. When [_DEBUG](../../c-runtime-library/debug.md) is not defined, calls to `_CrtMemDumpStatistics` are removed during preprocessing.  \n  \n The `state` parameter must be a pointer to a `_CrtMemState` structure that has been filled in by [_CrtMemCheckpoint](../../c-runtime-library/reference/crtmemcheckpoint.md) or returned by [_CrtMemDifference](../../c-runtime-library/reference/crtmemdifference.md) before `_CrtMemDumpStatistics` is called. If `state` is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, `errno` is set to `EINVAL` and no action is taken. For more information, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n For more information about heap state functions and the `_CrtMemState` structure, see [Heap State Reporting Functions](/visualstudio/debugger/crt-debug-heap-details). For more information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see [CRT Debug Heap Details](/visualstudio/debugger/crt-debug-heap-details).  \n  \n## Requirements  \n  \n|Routine|Required header|Optional headers|  \n|-------------|---------------------|----------------------|  \n|`_CrtMemDumpStatistics`|\\<crtdbg.h>|\\<errno.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n **Libraries:** Debug versions of [CRT Library Features](../../c-runtime-library/crt-library-features.md) only.  \n  \n## .NET Framework Equivalent  \n <xref:System.Diagnostics.PerformanceCounter?displayProperty=fullName>  \n  \n## See Also  \n [Debug Routines](../../c-runtime-library/debug-routines.md)"}