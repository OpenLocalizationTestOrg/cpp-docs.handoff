{"nodes":[{"pos":[12,49],"content":"Compiler Error C3020 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Error C3020 | Microsoft Docs","pos":[0,37]}]},{"pos":[598,618],"content":"Compiler Error C3020","linkify":"Compiler Error C3020","nodes":[{"content":"Compiler Error C3020","pos":[0,20]}]},{"content":"'var' : index variable of OpenMP 'for' loop cannot be modified in loop body","pos":[619,694]},{"pos":[701,792],"content":"An OpenMP <ph id=\"ph1\">`for`</ph> loop may not modify the index (loop counter) in the body of the <ph id=\"ph2\">`for`</ph> loop.","source":"An OpenMP `for` loop may not modify the index (loop counter) in the body of the `for` loop."},{"content":"The following sample generates C3020:","pos":[799,836]},{"pos":[1139,1281],"content":"A variable declared with <bpt id=\"p1\">[</bpt>lastprivate<ept id=\"p1\">](../../parallel/openmp/reference/lastprivate.md)</ept> cannot be used as the index inside a parallelized loop.","source":"A variable declared with [lastprivate](../../parallel/openmp/reference/lastprivate.md) cannot be used as the index inside a parallelized loop."},{"content":"The following sample will give C3020 for the second lastprivate because that lastprivate will trigger a write to idx_a within the outermost for loop.","pos":[1288,1437]},{"content":"The first lastprivate doesn't give an error because that lastprivate triggers a write to idx_a outside the outermost for loop (technically, at the very end of the last iteration).","pos":[1438,1617]},{"content":"The following sample generates C3020.","pos":[1618,1655]},{"content":"The following sample demonstrates a possible resolution:","pos":[2075,2131]}],"content":"---\ntitle: \"Compiler Error C3020 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"C3020\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C3020\"\nms.assetid: f625c7a3-afaa-4bd8-9c1b-51891b832f36\ncaps.latest.revision: 10\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compiler Error C3020\n'var' : index variable of OpenMP 'for' loop cannot be modified in loop body  \n  \n An OpenMP `for` loop may not modify the index (loop counter) in the body of the `for` loop.  \n  \n The following sample generates C3020:  \n  \n```  \n// C3020.cpp  \n// compile with: /openmp  \nint main() {  \n   int i = 0, n = 3;  \n  \n   #pragma omp parallel  \n   {  \n      #pragma omp for  \n      for (i = 0; i < 10; i += n)  \n         i *= 2;   // C3020  \n         // try the following line instead  \n         // n++;  \n   }  \n}  \n```  \n  \n A variable declared with [lastprivate](../../parallel/openmp/reference/lastprivate.md) cannot be used as the index inside a parallelized loop.  \n  \n The following sample will give C3020 for the second lastprivate because that lastprivate will trigger a write to idx_a within the outermost for loop. The first lastprivate doesn't give an error because that lastprivate triggers a write to idx_a outside the outermost for loop (technically, at the very end of the last iteration). The following sample generates C3020.  \n  \n```  \n// C3020b.cpp  \n// compile with: /openmp /c  \nfloat a[100][100];  \nint idx_a, idx_b;  \nvoid test(int first, int last)  \n{  \n   #pragma omp parallel for lastprivate(idx_a)  \n   for (idx_a = first; idx_a <= last; ++idx_a) {  \n      #pragma omp parallel for lastprivate(idx_a)   // C3020  \n      for (idx_b = first; idx_b <= last; ++idx_b) {  \n         a[idx_a][idx_b] += 1.0f;  \n      }  \n   }  \n}  \n```  \n  \n The following sample demonstrates a possible resolution:  \n  \n```  \n// C3020c.cpp  \n// compile with: /openmp /c  \nfloat a[100][100];  \nint idx_a, idx_b;  \nvoid test(int first, int last)  \n{  \n   #pragma omp parallel for lastprivate(idx_a)  \n   for (idx_a = first; idx_a <= last; ++idx_a) {  \n      #pragma omp parallel for lastprivate(idx_b)  \n      for (idx_b = first; idx_b <= last; ++idx_b) {  \n         a[idx_a][idx_b] += 1.0f;  \n      }  \n   }  \n}  \n```"}