{"nodes":[{"pos":[12,37],"content":"clearerr | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"clearerr | Microsoft Docs","pos":[0,25]}]},{"content":"clearerr","pos":[982,990]},{"content":"Resets the error indicator for a stream.","pos":[991,1031]},{"content":"A more secure version of this function is available; see <bpt id=\"p1\">[</bpt>clearerr_s<ept id=\"p1\">](../../c-runtime-library/reference/clearerr-s.md)</ept>.","pos":[1032,1151],"source":" A more secure version of this function is available; see [clearerr_s](../../c-runtime-library/reference/clearerr-s.md)."},{"content":"Syntax","pos":[1160,1166]},{"content":"Parameters","pos":[1233,1243]},{"content":"Pointer to <ph id=\"ph1\">`FILE`</ph> structure.","pos":[1259,1287],"source":" Pointer to `FILE` structure."},{"content":"Remarks","pos":[1296,1303]},{"content":"The <ph id=\"ph1\">`clearerr`</ph> function resets the error indicator and end-of-file indicator for <ph id=\"ph2\">`stream`</ph>.","pos":[1307,1397],"source":"The `clearerr` function resets the error indicator and end-of-file indicator for `stream`."},{"content":"Error indicators are not automatically cleared; once the error indicator for a specified stream is set, operations on that stream continue to return an error value until <ph id=\"ph1\">`clearerr`</ph>, <ph id=\"ph2\">`fseek`</ph>, <ph id=\"ph3\">`fsetpos`</ph>, or <ph id=\"ph4\">`rewind`</ph> is called.","pos":[1398,1622],"source":" Error indicators are not automatically cleared; once the error indicator for a specified stream is set, operations on that stream continue to return an error value until `clearerr`, `fseek`, `fsetpos`, or `rewind` is called."},{"content":"If <ph id=\"ph1\">`stream`</ph> is <ph id=\"ph2\">`NULL`</ph>, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1629,1782],"source":"If `stream` is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, this function sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and returns.","pos":[1783,1871],"source":" If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns."},{"content":"For more information on <ph id=\"ph1\">`errno`</ph> and error codes, see <bpt id=\"p1\">[</bpt>errno Constants<ept id=\"p1\">](../../c-runtime-library/errno-constants.md)</ept>.","pos":[1872,1987],"source":" For more information on `errno` and error codes, see [errno Constants](../../c-runtime-library/errno-constants.md)."},{"pos":[1994,2113],"content":"A more secure version of this function is available; see <bpt id=\"p1\">[</bpt>clearerr_s<ept id=\"p1\">](../../c-runtime-library/reference/clearerr-s.md)</ept>.","source":"A more secure version of this function is available; see [clearerr_s](../../c-runtime-library/reference/clearerr-s.md)."},{"content":"Requirements","pos":[2122,2134]},{"content":"Routine","pos":[2141,2148]},{"content":"Required header","pos":[2149,2164]},{"content":"stdio.h&gt;","pos":[2222,2230],"source":"stdio.h>"},{"pos":[2238,2362],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[2371,2378]},{"content":".NET Framework Equivalent","pos":[3181,3206]},{"content":"Not applicable.","pos":[3210,3225]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[3226,3273],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[3274,3399],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[3408,3416]},{"content":"Error Handling","pos":[3421,3435]},{"content":"Stream I/O","pos":[3489,3499]},{"content":"_eof","pos":[3545,3549]},{"content":"feof","pos":[3598,3602]},{"content":"ferror","pos":[3652,3658]},{"content":"perror, _wperror","pos":[3710,3726]}],"content":"---\ntitle: \"clearerr | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"clearerr\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-stdio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"clearerr\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"error indicator for streams\"\n  - \"resetting stream error indicator\"\n  - \"clearerr function\"\nms.assetid: a9711cd4-3335-43d4-a018-87bbac5b3bac\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# clearerr\nResets the error indicator for a stream. A more secure version of this function is available; see [clearerr_s](../../c-runtime-library/reference/clearerr-s.md).  \n  \n## Syntax  \n  \n```  \nvoid clearerr(  \n   FILE *stream   \n);  \n```  \n  \n#### Parameters  \n `stream`  \n Pointer to `FILE` structure.  \n  \n## Remarks  \n The `clearerr` function resets the error indicator and end-of-file indicator for `stream`. Error indicators are not automatically cleared; once the error indicator for a specified stream is set, operations on that stream continue to return an error value until `clearerr`, `fseek`, `fsetpos`, or `rewind` is called.  \n  \n If `stream` is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns. For more information on `errno` and error codes, see [errno Constants](../../c-runtime-library/errno-constants.md).  \n  \n A more secure version of this function is available; see [clearerr_s](../../c-runtime-library/reference/clearerr-s.md).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`clearerr`|\\<stdio.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_clearerr.c  \n// This program creates an error  \n// on the standard input stream, then clears  \n// it so that future reads won't fail.  \n  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   int c;  \n   // Create an error by writing to standard input.  \n   putc( 'c', stdin );  \n   if( ferror( stdin ) )  \n   {  \n      perror( \"Write error\" );  \n      clearerr( stdin );  \n   }  \n  \n   // See if read causes an error.  \n   printf( \"Will input cause an error? \" );  \n   c = getc( stdin );  \n   if( ferror( stdin ) )  \n   {  \n      perror( \"Read error\" );  \n      clearerr( stdin );  \n   }  \n   else  \n      printf( \"No read error\\n\" );  \n}  \n```  \n  \n```Output  \n  \nn  \n  \n```  \n  \n```Output  \n  \n      nWrite error: No error  \nWill input cause an error? n  \nNo read error  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Error Handling](../../c-runtime-library/error-handling-crt.md)   \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [_eof](../../c-runtime-library/reference/eof.md)   \n [feof](../../c-runtime-library/reference/feof.md)   \n [ferror](../../c-runtime-library/reference/ferror.md)   \n [perror, _wperror](../../c-runtime-library/reference/perror-wperror.md)"}