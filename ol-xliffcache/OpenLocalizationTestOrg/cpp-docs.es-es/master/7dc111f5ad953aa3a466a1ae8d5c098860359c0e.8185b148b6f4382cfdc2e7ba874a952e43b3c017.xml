{"nodes":[{"pos":[12,45],"content":"private (OpenMP) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"private (OpenMP) | Microsoft Docs","pos":[0,33]}]},{"pos":[604,620],"content":"private (OpenMP)","linkify":"private (OpenMP)","nodes":[{"content":"private (OpenMP)","pos":[0,16]}]},{"content":"Specifies that each thread should have its own instance of a variable.","pos":[621,691]},{"pos":[700,706],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[745,752],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"where,","pos":[756,762]},{"content":"The variable to have instances in each thread.","pos":[778,824]},{"pos":[833,840],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[844,892],"content":"<bpt id=\"p1\">**</bpt>private<ept id=\"p1\">**</ept> applies to the following directives:","source":"**private** applies to the following directives:"},{"pos":[902,957],"content":"<bpt id=\"p1\">[</bpt>for<ept id=\"p1\">](../../../parallel/openmp/reference/for-openmp.md)</ept>","source":"[for](../../../parallel/openmp/reference/for-openmp.md)"},{"pos":[967,1025],"content":"<bpt id=\"p1\">[</bpt>parallel<ept id=\"p1\">](../../../parallel/openmp/reference/parallel.md)</ept>","source":"[parallel](../../../parallel/openmp/reference/parallel.md)"},{"pos":[1035,1100],"content":"<bpt id=\"p1\">[</bpt>sections<ept id=\"p1\">](../../../parallel/openmp/reference/sections-openmp.md)</ept>","source":"[sections](../../../parallel/openmp/reference/sections-openmp.md)"},{"pos":[1110,1164],"content":"<bpt id=\"p1\">[</bpt>single<ept id=\"p1\">](../../../parallel/openmp/reference/single.md)</ept>","source":"[single](../../../parallel/openmp/reference/single.md)"},{"pos":[1171,1260],"content":"For more information, see <bpt id=\"p1\">[</bpt>2.7.2.1 private<ept id=\"p1\">](../../../parallel/openmp/2-7-2-1-private.md)</ept>.","source":"For more information, see [2.7.2.1 private](../../../parallel/openmp/2-7-2-1-private.md)."},{"pos":[1269,1276],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6755,6763],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[6767,6830],"content":"<bpt id=\"p1\">[</bpt>Clauses<ept id=\"p1\">](../../../parallel/openmp/reference/openmp-clauses.md)</ept>","source":"[Clauses](../../../parallel/openmp/reference/openmp-clauses.md)"}],"content":"---\ntitle: \"private (OpenMP) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"private\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"private OpenMP clause\"\nms.assetid: 772904a2-1345-4562-90e6-eb4dc85aea1a\ncaps.latest.revision: 12\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# private (OpenMP)\nSpecifies that each thread should have its own instance of a variable.  \n  \n## Syntax  \n  \n```  \nprivate(var)  \n```  \n  \n## Remarks  \n where,  \n  \n `var`  \n The variable to have instances in each thread.  \n  \n## Remarks  \n **private** applies to the following directives:  \n  \n-   [for](../../../parallel/openmp/reference/for-openmp.md)  \n  \n-   [parallel](../../../parallel/openmp/reference/parallel.md)  \n  \n-   [sections](../../../parallel/openmp/reference/sections-openmp.md)  \n  \n-   [single](../../../parallel/openmp/reference/single.md)  \n  \n For more information, see [2.7.2.1 private](../../../parallel/openmp/2-7-2-1-private.md).  \n  \n## Example  \n  \n```  \n// openmp_private.c  \n// compile with: /openmp  \n#include <windows.h>  \n#include <assert.h>  \n#include <stdio.h>  \n#include <omp.h>  \n  \n#define NUM_THREADS 4  \n#define SLEEP_THREAD 1  \n#define NUM_LOOPS 2  \n  \nenum Types {  \n   ThreadPrivate,  \n   Private,  \n   FirstPrivate,  \n   LastPrivate,  \n   Shared,  \n   MAX_TYPES  \n};  \n  \nint nSave[NUM_THREADS][MAX_TYPES][NUM_LOOPS] = {{0}};  \nint nThreadPrivate;  \n  \n#pragma omp threadprivate(nThreadPrivate)  \n#pragma warning(disable:4700)  \n  \nint main() {  \n   int nPrivate = NUM_THREADS;  \n   int nFirstPrivate = NUM_THREADS;  \n   int nLastPrivate = NUM_THREADS;  \n   int nShared = NUM_THREADS;  \n   int nRet = 0;  \n   int i;  \n   int j;  \n   int nLoop = 0;  \n  \n   nThreadPrivate = NUM_THREADS;  \n   printf_s(\"These are the variables before entry \"  \n           \"into the parallel region.\\n\");  \n   printf_s(\"nThreadPrivate = %d\\n\", nThreadPrivate);  \n   printf_s(\"      nPrivate = %d\\n\", nPrivate);  \n   printf_s(\" nFirstPrivate = %d\\n\", nFirstPrivate);  \n   printf_s(\"  nLastPrivate = %d\\n\", nLastPrivate);  \n   printf_s(\"       nShared = %d\\n\\n\", nShared);  \n   omp_set_num_threads(NUM_THREADS);  \n  \n   #pragma omp parallel copyin(nThreadPrivate) private(nPrivate) shared(nShared) firstprivate(nFirstPrivate)  \n   {  \n      #pragma omp for schedule(static) lastprivate(nLastPrivate)  \n      for (i = 0 ; i < NUM_THREADS ; ++i) {  \n         for (j = 0 ; j < NUM_LOOPS ; ++j) {  \n            int nThread = omp_get_thread_num();  \n            assert(nThread < NUM_THREADS);  \n  \n            if (nThread == SLEEP_THREAD)  \n               Sleep(100);  \n            nSave[nThread][ThreadPrivate][j] = nThreadPrivate;  \n            nSave[nThread][Private][j] = nPrivate;  \n            nSave[nThread][Shared][j] = nShared;  \n            nSave[nThread][FirstPrivate][j] = nFirstPrivate;  \n            nSave[nThread][LastPrivate][j] = nLastPrivate;  \n            nThreadPrivate = nThread;  \n            nPrivate = nThread;  \n            nShared = nThread;  \n            nLastPrivate = nThread;  \n            --nFirstPrivate;  \n         }  \n      }  \n   }  \n  \n   for (i = 0 ; i < NUM_LOOPS ; ++i) {  \n      for (j = 0 ; j < NUM_THREADS ; ++j) {  \n         printf_s(\"These are the variables at entry of \"  \n                  \"loop %d of thread %d.\\n\", i + 1, j);  \n         printf_s(\"nThreadPrivate = %d\\n\",  \n                  nSave[j][ThreadPrivate][i]);  \n         printf_s(\"      nPrivate = %d\\n\",  \n                  nSave[j][Private][i]);  \n         printf_s(\" nFirstPrivate = %d\\n\",  \n                  nSave[j][FirstPrivate][i]);  \n         printf_s(\"  nLastPrivate = %d\\n\",  \n                  nSave[j][LastPrivate][i]);  \n         printf_s(\"       nShared = %d\\n\\n\",  \n                  nSave[j][Shared][i]);  \n      }  \n   }  \n  \n   printf_s(\"These are the variables after exit from \"  \n            \"the parallel region.\\n\");  \n   printf_s(\"nThreadPrivate = %d (The last value in the \"  \n            \"master thread)\\n\", nThreadPrivate);  \n   printf_s(\"      nPrivate = %d (The value prior to \"  \n            \"entering parallel region)\\n\", nPrivate);  \n   printf_s(\" nFirstPrivate = %d (The value prior to \"  \n            \"entering parallel region)\\n\", nFirstPrivate);  \n   printf_s(\"  nLastPrivate = %d (The value from the \"  \n            \"last iteration of the loop)\\n\", nLastPrivate);  \n   printf_s(\"       nShared = %d (The value assigned, \"  \n            \"from the delayed thread, %d)\\n\\n\",  \n            nShared, SLEEP_THREAD);  \n}  \n```  \n  \n```Output  \nThese are the variables before entry into the parallel region.  \nnThreadPrivate = 4  \n      nPrivate = 4  \n nFirstPrivate = 4  \n  nLastPrivate = 4  \n       nShared = 4  \n  \nThese are the variables at entry of loop 1 of thread 0.  \nnThreadPrivate = 4  \n      nPrivate = 1310720  \n nFirstPrivate = 4  \n  nLastPrivate = 1245104  \n       nShared = 3  \n  \nThese are the variables at entry of loop 1 of thread 1.  \nnThreadPrivate = 4  \n      nPrivate = 4488  \n nFirstPrivate = 4  \n  nLastPrivate = 19748  \n       nShared = 0  \n  \nThese are the variables at entry of loop 1 of thread 2.  \nnThreadPrivate = 4  \n      nPrivate = -132514848  \n nFirstPrivate = 4  \n  nLastPrivate = -513199792  \n       nShared = 4  \n  \nThese are the variables at entry of loop 1 of thread 3.  \nnThreadPrivate = 4  \n      nPrivate = 1206  \n nFirstPrivate = 4  \n  nLastPrivate = 1204  \n       nShared = 2  \n  \nThese are the variables at entry of loop 2 of thread 0.  \nnThreadPrivate = 0  \n      nPrivate = 0  \n nFirstPrivate = 3  \n  nLastPrivate = 0  \n       nShared = 0  \n  \nThese are the variables at entry of loop 2 of thread 1.  \nnThreadPrivate = 1  \n      nPrivate = 1  \n nFirstPrivate = 3  \n  nLastPrivate = 1  \n       nShared = 1  \n  \nThese are the variables at entry of loop 2 of thread 2.  \nnThreadPrivate = 2  \n      nPrivate = 2  \n nFirstPrivate = 3  \n  nLastPrivate = 2  \n       nShared = 2  \n  \nThese are the variables at entry of loop 2 of thread 3.  \nnThreadPrivate = 3  \n      nPrivate = 3  \n nFirstPrivate = 3  \n  nLastPrivate = 3  \n       nShared = 3  \n  \nThese are the variables after exit from the parallel region.  \nnThreadPrivate = 0 (The last value in the master thread)  \n      nPrivate = 4 (The value prior to entering parallel region)  \n nFirstPrivate = 4 (The value prior to entering parallel region)  \n  nLastPrivate = 3 (The value from the last iteration of the loop)  \n       nShared = 1 (The value assigned, from the delayed thread, 1)  \n```  \n  \n## See Also  \n [Clauses](../../../parallel/openmp/reference/openmp-clauses.md)"}