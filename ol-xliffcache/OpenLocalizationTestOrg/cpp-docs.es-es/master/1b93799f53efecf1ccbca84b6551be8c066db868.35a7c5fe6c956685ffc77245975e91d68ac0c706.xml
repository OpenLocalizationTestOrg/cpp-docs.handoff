{"nodes":[{"pos":[12,61],"content":"linear_congruential_engine Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"linear_congruential_engine Class | Microsoft Docs","pos":[0,49]}]},{"pos":[859,891],"content":"linear_congruential_engine Class","linkify":"linear_congruential_engine Class","nodes":[{"content":"linear_congruential_engine Class","pos":[0,32]}]},{"content":"Generates a random sequence by the linear congruential algorithm.","pos":[892,957]},{"pos":[966,972],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1831,1841],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The unsigned integer result type.","pos":[1859,1892]},{"content":"For possible types, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","pos":[1893,1960],"source":" For possible types, see [\\<random>](../standard-library/random.md)."},{"content":"<bpt id=\"p1\"> **</bpt>Multiplier<ept id=\"p1\">**</ept>.","pos":[1973,1989],"source":" **Multiplier**."},{"content":"<bpt id=\"p1\">**</bpt>Precondition<ept id=\"p1\">**</ept>: See Remarks section.","pos":[1990,2028],"source":"**Precondition**: See Remarks section."},{"content":"<bpt id=\"p1\"> **</bpt>Increment<ept id=\"p1\">**</ept>.","pos":[2041,2056],"source":" **Increment**."},{"content":"<bpt id=\"p1\">**</bpt>Precondition<ept id=\"p1\">**</ept>: See Remarks section.","pos":[2057,2095],"source":"**Precondition**: See Remarks section."},{"content":"<bpt id=\"p1\"> **</bpt>Modulus<ept id=\"p1\">**</ept>.","pos":[2108,2121],"source":" **Modulus**."},{"content":"<bpt id=\"p1\">**</bpt>Precondition<ept id=\"p1\">**</ept>: See remarks.","pos":[2122,2152],"source":"**Precondition**: See remarks."},{"pos":[2161,2168],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[2442,2604],"content":"<ph id=\"ph1\">`default_seed`</ph> is a member constant, defined as <ph id=\"ph2\">`1u`</ph>, used as the default parameter value for <ph id=\"ph3\">`linear_congruential_engine::seed`</ph> and the single value constructor.","source":"`default_seed` is a member constant, defined as `1u`, used as the default parameter value for `linear_congruential_engine::seed` and the single value constructor."},{"pos":[2611,2701],"content":"For more information about engine members, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","source":"For more information about engine members, see [\\<random>](../standard-library/random.md)."},{"pos":[2710,2717],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`linear_congruential_engine`</ph> template class is the simplest generator engine, but not the fastest or highest quality.","pos":[2721,2842],"source":"The `linear_congruential_engine` template class is the simplest generator engine, but not the fastest or highest quality."},{"content":"An improvement over this engine is the <bpt id=\"p1\">[</bpt>substract_with_carry_engine<ept id=\"p1\">](../standard-library/subtract-with-carry-engine-class.md)</ept>.","pos":[2843,2969],"source":" An improvement over this engine is the [substract_with_carry_engine](../standard-library/subtract-with-carry-engine-class.md)."},{"content":"Neither of these engines is as fast or with as high quality results as the <bpt id=\"p1\">[</bpt>mersenne_twister_engine<ept id=\"p1\">](../standard-library/mersenne-twister-engine-class.md)</ept>.","pos":[2970,3125],"source":" Neither of these engines is as fast or with as high quality results as the [mersenne_twister_engine](../standard-library/mersenne-twister-engine-class.md)."},{"pos":[3132,3277],"content":"This engine produces values of a user-specified unsigned integral type using the recurrence relation ( <bpt id=\"p1\">*</bpt>period<ept id=\"p1\">*</ept>) <ph id=\"ph1\">`x(i) = (A * x(i-1) + C) mod M`</ph>.","source":"This engine produces values of a user-specified unsigned integral type using the recurrence relation ( *period*) `x(i) = (A * x(i-1) + C) mod M`."},{"content":"If <ph id=\"ph1\">`M`</ph> is zero, the value used for this modulus operation is <ph id=\"ph2\">`numeric_limits&lt;result_type&gt;::max() + 1`</ph>.","pos":[3284,3386],"source":"If `M` is zero, the value used for this modulus operation is `numeric_limits<result_type>::max() + 1`."},{"content":"The engine's state is the last value returned, or the seed value if no call has been made to <ph id=\"ph1\">`operator()`</ph>.","pos":[3387,3493],"source":" The engine's state is the last value returned, or the seed value if no call has been made to `operator()`."},{"pos":[3500,3591],"content":"If <ph id=\"ph1\">`M`</ph> is not zero, the values of the template arguments <ph id=\"ph2\">`A`</ph> and <ph id=\"ph3\">`C`</ph> must be less than <ph id=\"ph4\">`M`</ph>.","source":"If `M` is not zero, the values of the template arguments `A` and `C` must be less than `M`."},{"content":"Although you can construct a generator from this engine directly, you can also use one of these predefined typedefs.","pos":[3598,3714]},{"pos":[3721,3801],"content":"<ph id=\"ph1\">`minstd_rand0`</ph>: 1988 minimal standard engine (Lewis, Goodman, and Miller, 1969).","source":"`minstd_rand0`: 1988 minimal standard engine (Lewis, Goodman, and Miller, 1969)."},{"pos":[3910,4009],"content":"<ph id=\"ph1\">`minstd_rand`</ph>: Updated minimal standard engine <ph id=\"ph2\">`minstd_rand0`</ph> (Park, Miller, and Stockmeyer, 1993).","source":"`minstd_rand`: Updated minimal standard engine `minstd_rand0` (Park, Miller, and Stockmeyer, 1993)."},{"pos":[4117,4294],"content":"For detailed information about the linear congruential engine algorithm, see the Wikipedia article <bpt id=\"p1\">[</bpt>Linear congruential generator<ept id=\"p1\">](http://go.microsoft.com/fwlink/LinkId=402446)</ept>.","source":"For detailed information about the linear congruential engine algorithm, see the Wikipedia article [Linear congruential generator](http://go.microsoft.com/fwlink/LinkId=402446)."},{"pos":[4303,4315],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4319,4340],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>random&gt;","source":"**Header:** \\<random>"},{"pos":[4347,4365],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[4374,4382],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[4386,4428],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>","source":"[\\<random>](../standard-library/random.md)"}],"content":"---\ntitle: \"linear_congruential_engine Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.tr1.linear_congruential_engine\"\n  - \"random/std::tr1::linear_congruential_engine\"\n  - \"linear_congruential_engine\"\n  - \"std::tr1::linear_congruential_engine\"\n  - \"tr1.linear_congruential_engine\"\n  - \"tr1::linear_congruential_engine\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"linear_congruential_engine class\"\nms.assetid: 30e00ca6-1933-4701-9561-54f3e810a5a1\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# linear_congruential_engine Class\nGenerates a random sequence by the linear congruential algorithm.  \n  \n## Syntax  \n```  \nclass linear_congruential_engine{  \n   public:  // types  \n   typedef UIntType result_type;  \n   // engine characteristics  \n   static constexpr result_type multiplier = a;  \n   static constexpr result_type increment = c;  \n   static constexpr result_type modulus = m;  \n   static constexpr result_type min() { return c == 0u  1u: 0u; }  \n   static constexpr result_type max() { return m - 1u; }  \n   static constexpr result_type default_seed = 1u;  \n   // constructors and seeding functions  \n   explicit linear_congruential_engine(result_type s = default_seed);\n   template <class Sseq>  \n   explicit linear_congruential_engine(Sseq& q);\n   void seed(result_type s = default_seed);\n   template <class Sseq>  \n   void seed(Sseq& q);\n   // generating functions  \n   result_type operator()();\n   void discard(unsigned long long z);\n   };  \n```  \n#### Parameters  \n `UIntType`  \n The unsigned integer result type. For possible types, see [\\<random>](../standard-library/random.md).  \n  \n `A`  \n **Multiplier**. **Precondition**: See Remarks section.  \n  \n `C`  \n **Increment**. **Precondition**: See Remarks section.  \n  \n `M`  \n **Modulus**. **Precondition**: See remarks.  \n  \n## Members  \n  \n||||  \n|-|-|-|  \n|`linear_congruential_engine::linear_congruential_engine`|`linear_congruential_engine::min`|`linear_congruential_engine::discard`|  \n|`linear_congruential_engine::operator()`|`linear_congruential_engine::max`|`linear_congruential_engine::seed`|  \n  \n `default_seed` is a member constant, defined as `1u`, used as the default parameter value for `linear_congruential_engine::seed` and the single value constructor.  \n  \n For more information about engine members, see [\\<random>](../standard-library/random.md).  \n  \n## Remarks  \n The `linear_congruential_engine` template class is the simplest generator engine, but not the fastest or highest quality. An improvement over this engine is the [substract_with_carry_engine](../standard-library/subtract-with-carry-engine-class.md). Neither of these engines is as fast or with as high quality results as the [mersenne_twister_engine](../standard-library/mersenne-twister-engine-class.md).  \n  \n This engine produces values of a user-specified unsigned integral type using the recurrence relation ( *period*) `x(i) = (A * x(i-1) + C) mod M`.  \n  \n If `M` is zero, the value used for this modulus operation is `numeric_limits<result_type>::max() + 1`. The engine's state is the last value returned, or the seed value if no call has been made to `operator()`.  \n  \n If `M` is not zero, the values of the template arguments `A` and `C` must be less than `M`.  \n  \n Although you can construct a generator from this engine directly, you can also use one of these predefined typedefs.  \n  \n `minstd_rand0`: 1988 minimal standard engine (Lewis, Goodman, and Miller, 1969).  \n  \n```  \ntypedef linear_congruential_engine<unsigned int, 16807, 0, 2147483647> minstd_rand0;  \n```  \n  \n `minstd_rand`: Updated minimal standard engine `minstd_rand0` (Park, Miller, and Stockmeyer, 1993).  \n  \n```  \ntypedef linear_congruential_engine<unsigned int, 48271, 0, 2147483647> minstd_rand;  \n```  \n  \n For detailed information about the linear congruential engine algorithm, see the Wikipedia article [Linear congruential generator](http://go.microsoft.com/fwlink/LinkId=402446).  \n  \n## Requirements  \n **Header:** \\<random>  \n  \n **Namespace:** std  \n  \n## See Also  \n [\\<random>](../standard-library/random.md)\n\n\n"}