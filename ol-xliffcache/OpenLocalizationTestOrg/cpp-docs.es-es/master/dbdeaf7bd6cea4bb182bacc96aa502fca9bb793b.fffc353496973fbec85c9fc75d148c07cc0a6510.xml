{"nodes":[{"pos":[12,51],"content":"Compound Statement (C) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compound Statement (C) | Microsoft Docs","pos":[0,39]}]},{"content":"Compound Statement (C)","pos":[614,636]},{"content":"A compound statement (also called a \"block\") typically appears as the body of another statement, such as the <bpt id=\"p1\">**</bpt>if<ept id=\"p1\">**</ept> statement.","pos":[637,763],"source":"A compound statement (also called a \"block\") typically appears as the body of another statement, such as the **if** statement."},{"content":"<bpt id=\"p1\">[</bpt>Declarations and Types<ept id=\"p1\">](../c-language/declarations-and-types.md)</ept> describes the form and meaning of the declarations that can appear at the head of a compound statement.","pos":[764,933],"source":"[Declarations and Types](../c-language/declarations-and-types.md) describes the form and meaning of the declarations that can appear at the head of a compound statement."},{"content":"Syntax","pos":[942,948]},{"content":"<bpt id=\"p1\">*</bpt>compound-statement<ept id=\"p1\">*</ept>:","pos":[952,973],"source":"*compound-statement*:"},{"content":"<bpt id=\"p1\"> **</bpt>{<ept id=\"p1\">**</ept>  <bpt id=\"p2\">*</bpt>declaration-list<ept id=\"p2\">*</ept> opt<bpt id=\"p3\">*</bpt>statement-list<ept id=\"p3\">*</ept>opt<bpt id=\"p4\">**</bpt>}<ept id=\"p4\">**</ept>","pos":[976,1030],"source":" **{**  *declaration-list* opt*statement-list*opt**}**"},{"content":"<bpt id=\"p1\">*</bpt>declaration-list<ept id=\"p1\">*</ept>:","pos":[1037,1056],"source":"*declaration-list*:"},{"content":"declaration","pos":[1061,1072]},{"content":"declaration-list declaration","pos":[1081,1109]},{"content":"<bpt id=\"p1\">*</bpt>statement-list<ept id=\"p1\">*</ept>:","pos":[1117,1134],"source":"*statement-list*:"},{"content":"s<bpt id=\"p1\">*</bpt>tatement<ept id=\"p1\">*</ept>","pos":[1138,1149],"source":" s*tatement*"},{"content":"statement-list statement","pos":[1157,1181]},{"content":"If there are declarations, they must come before any statements.","pos":[1189,1253]},{"content":"The scope of each identifier declared at the beginning of a compound statement extends from its declaration point to the end of the block.","pos":[1254,1392]},{"content":"It is visible throughout the block unless a declaration of the same identifier exists in an inner block.","pos":[1393,1497]},{"content":"Identifiers in a compound statement are presumed <bpt id=\"p1\">**</bpt>auto<ept id=\"p1\">**</ept> unless explicitly declared otherwise with <bpt id=\"p2\">**</bpt>register<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>static<ept id=\"p3\">**</ept>, or <ph id=\"ph1\">`extern`</ph>, except functions, which can only be <ph id=\"ph2\">`extern`</ph>.","pos":[1504,1688],"source":"Identifiers in a compound statement are presumed **auto** unless explicitly declared otherwise with **register**, **static**, or `extern`, except functions, which can only be `extern`."},{"content":"You can leave off the <ph id=\"ph1\">`extern`</ph> specifier in function declarations and the function will still be <ph id=\"ph2\">`extern`</ph>.","pos":[1689,1795],"source":" You can leave off the `extern` specifier in function declarations and the function will still be `extern`."},{"content":"Storage is not allocated and initialization is not permitted if a variable or function is declared in a compound statement with storage class <ph id=\"ph1\">`extern`</ph>.","pos":[1802,1953],"source":"Storage is not allocated and initialization is not permitted if a variable or function is declared in a compound statement with storage class `extern`."},{"content":"The declaration refers to an external variable or function defined elsewhere.","pos":[1954,2031]},{"content":"Variables declared in a block with the <bpt id=\"p1\">**</bpt>auto<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>register<ept id=\"p2\">**</ept> keyword are reallocated and, if necessary, initialized each time the compound statement is entered.","pos":[2038,2201],"source":"Variables declared in a block with the **auto** or **register** keyword are reallocated and, if necessary, initialized each time the compound statement is entered."},{"content":"These variables are not defined after the compound statement is exited.","pos":[2202,2273]},{"content":"If a variable declared inside a block has the <bpt id=\"p1\">**</bpt>static<ept id=\"p1\">**</ept> attribute, the variable is initialized when program execution begins and keeps its value throughout the program.","pos":[2274,2443],"source":" If a variable declared inside a block has the **static** attribute, the variable is initialized when program execution begins and keeps its value throughout the program."},{"content":"See <bpt id=\"p1\">[</bpt>Storage Classes<ept id=\"p1\">](../c-language/c-storage-classes.md)</ept> for information about <bpt id=\"p2\">**</bpt>static<ept id=\"p2\">**</ept>.","pos":[2444,2535],"source":" See [Storage Classes](../c-language/c-storage-classes.md) for information about **static**."},{"content":"This example illustrates a compound statement:","pos":[2542,2588]},{"pos":[2675,2785],"content":"In this example, if <ph id=\"ph1\">`i`</ph> is greater than 0, all statements inside the compound statement are executed in order.","source":"In this example, if `i` is greater than 0, all statements inside the compound statement are executed in order."},{"content":"See Also","pos":[2794,2802]},{"content":"Statements","pos":[2807,2817]}],"content":"---\ntitle: \"Compound Statement (C) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"compound statements\"\n  - \"statements, compound\"\nms.assetid: 32d1bf86-cbbc-42a9-ba3a-1be1c6c7754c\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compound Statement (C)\nA compound statement (also called a \"block\") typically appears as the body of another statement, such as the **if** statement. [Declarations and Types](../c-language/declarations-and-types.md) describes the form and meaning of the declarations that can appear at the head of a compound statement.  \n  \n## Syntax  \n *compound-statement*:  \n **{**  *declaration-list* opt*statement-list*opt**}**  \n  \n *declaration-list*:  \n *declaration*  \n  \n *declaration-list declaration*  \n  \n *statement-list*:  \n s*tatement*  \n  \n *statement-list statement*  \n  \n If there are declarations, they must come before any statements. The scope of each identifier declared at the beginning of a compound statement extends from its declaration point to the end of the block. It is visible throughout the block unless a declaration of the same identifier exists in an inner block.  \n  \n Identifiers in a compound statement are presumed **auto** unless explicitly declared otherwise with **register**, **static**, or `extern`, except functions, which can only be `extern`. You can leave off the `extern` specifier in function declarations and the function will still be `extern`.  \n  \n Storage is not allocated and initialization is not permitted if a variable or function is declared in a compound statement with storage class `extern`. The declaration refers to an external variable or function defined elsewhere.  \n  \n Variables declared in a block with the **auto** or **register** keyword are reallocated and, if necessary, initialized each time the compound statement is entered. These variables are not defined after the compound statement is exited. If a variable declared inside a block has the **static** attribute, the variable is initialized when program execution begins and keeps its value throughout the program. See [Storage Classes](../c-language/c-storage-classes.md) for information about **static**.  \n  \n This example illustrates a compound statement:  \n  \n```  \nif ( i > 0 )   \n{  \n    line[i] = x;  \n    x++;  \n    i--;  \n}  \n```  \n  \n In this example, if `i` is greater than 0, all statements inside the compound statement are executed in order.  \n  \n## See Also  \n [Statements](../c-language/statements-c.md)"}