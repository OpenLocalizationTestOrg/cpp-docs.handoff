{"nodes":[{"pos":[12,52],"content":"CAtlTemporaryFile Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CAtlTemporaryFile Class | Microsoft Docs","pos":[0,40]}]},{"pos":[682,705],"content":"CAtlTemporaryFile Class","linkify":"CAtlTemporaryFile Class","nodes":[{"content":"CAtlTemporaryFile Class","pos":[0,23]}]},{"content":"This class provides methods for the creation and use of a temporary file.","pos":[706,779]},{"pos":[787,897],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the Windows Runtime.","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the Windows Runtime.","pos":[14,108]}]},{"pos":[906,912],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[958,965],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[975,994],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1001,1005]},{"content":"Description","pos":[1006,1017]},{"pos":[1055,1132],"content":"<bpt id=\"p1\">[</bpt>CAtlTemporaryFile::CAtlTemporaryFile<ept id=\"p1\">](#catltemporaryfile__catltemporaryfile)</ept>","source":"[CAtlTemporaryFile::CAtlTemporaryFile](#catltemporaryfile__catltemporaryfile)"},{"content":"The constructor.","pos":[1133,1149]},{"pos":[1154,1237],"content":"<bpt id=\"p1\">[</bpt>CAtlTemporaryFile::~CAtlTemporaryFile<ept id=\"p1\">](#catltemporaryfile___dtorcatltemporaryfile)</ept>","source":"[CAtlTemporaryFile::~CAtlTemporaryFile](#catltemporaryfile___dtorcatltemporaryfile)"},{"content":"The destructor.","pos":[1238,1253]},{"pos":[1264,1278],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1285,1289]},{"content":"Description","pos":[1290,1301]},{"pos":[1339,1392],"content":"<bpt id=\"p1\">[</bpt>CAtlTemporaryFile::Close<ept id=\"p1\">](#catltemporaryfile__close)</ept>","source":"[CAtlTemporaryFile::Close](#catltemporaryfile__close)"},{"content":"Call this method to close a temporary file and either delete its contents or store them under the specified file name.","pos":[1393,1511]},{"pos":[1516,1571],"content":"<bpt id=\"p1\">[</bpt>CAtlTemporaryFile::Create<ept id=\"p1\">](#catltemporaryfile__create)</ept>","source":"[CAtlTemporaryFile::Create](#catltemporaryfile__create)"},{"content":"Call this method to create a temporary file.","pos":[1572,1616]},{"pos":[1621,1674],"content":"<bpt id=\"p1\">[</bpt>CAtlTemporaryFile::Flush<ept id=\"p1\">](#catltemporaryfile__flush)</ept>","source":"[CAtlTemporaryFile::Flush](#catltemporaryfile__flush)"},{"content":"Call this method to force any data remaining in the file buffer to be written to the temporary file.","pos":[1675,1775]},{"pos":[1780,1845],"content":"<bpt id=\"p1\">[</bpt>CAtlTemporaryFile::GetPosition<ept id=\"p1\">](#catltemporaryfile__getposition)</ept>","source":"[CAtlTemporaryFile::GetPosition](#catltemporaryfile__getposition)"},{"content":"Call this method to get the current file pointer position.","pos":[1846,1904]},{"pos":[1909,1966],"content":"<bpt id=\"p1\">[</bpt>CAtlTemporaryFile::GetSize<ept id=\"p1\">](#catltemporaryfile__getsize)</ept>","source":"[CAtlTemporaryFile::GetSize](#catltemporaryfile__getsize)"},{"content":"Call this method to get the size in bytes of the temporary file.","pos":[1967,2031]},{"pos":[2036,2095],"content":"<bpt id=\"p1\">[</bpt>CAtlTemporaryFile::HandsOff<ept id=\"p1\">](#catltemporaryfile__handsoff)</ept>","source":"[CAtlTemporaryFile::HandsOff](#catltemporaryfile__handsoff)"},{"pos":[2096,2174],"content":"Call this method to disassociate the file from the <ph id=\"ph1\">`CAtlTemporaryFile`</ph> object.","source":"Call this method to disassociate the file from the `CAtlTemporaryFile` object."},{"pos":[2179,2236],"content":"<bpt id=\"p1\">[</bpt>CAtlTemporaryFile::HandsOn<ept id=\"p1\">](#catltemporaryfile__handson)</ept>","source":"[CAtlTemporaryFile::HandsOn](#catltemporaryfile__handson)"},{"content":"Call this method to open an existing temporary file and position the pointer at the end of the file.","pos":[2237,2337]},{"pos":[2342,2403],"content":"<bpt id=\"p1\">[</bpt>CAtlTemporaryFile::LockRange<ept id=\"p1\">](#catltemporaryfile__lockrange)</ept>","source":"[CAtlTemporaryFile::LockRange](#catltemporaryfile__lockrange)"},{"content":"Call this method to lock a region in the file to prevent other processes from accessing it.","pos":[2404,2495]},{"pos":[2500,2551],"content":"<bpt id=\"p1\">[</bpt>CAtlTemporaryFile::Read<ept id=\"p1\">](#catltemporaryfile__read)</ept>","source":"[CAtlTemporaryFile::Read](#catltemporaryfile__read)"},{"content":"Call this method to read data from the temporary file starting at the position indicated by the file pointer.","pos":[2552,2661]},{"pos":[2666,2717],"content":"<bpt id=\"p1\">[</bpt>CAtlTemporaryFile::Seek<ept id=\"p1\">](#catltemporaryfile__seek)</ept>","source":"[CAtlTemporaryFile::Seek](#catltemporaryfile__seek)"},{"content":"Call this method to move the file pointer of the temporary file.","pos":[2718,2782]},{"pos":[2787,2844],"content":"<bpt id=\"p1\">[</bpt>CAtlTemporaryFile::SetSize<ept id=\"p1\">](#catltemporaryfile__setsize)</ept>","source":"[CAtlTemporaryFile::SetSize](#catltemporaryfile__setsize)"},{"content":"Call this method to set the size of the temporary file.","pos":[2845,2900]},{"pos":[2905,2972],"content":"<bpt id=\"p1\">[</bpt>CAtlTemporaryFile::TempFileName<ept id=\"p1\">](#catltemporaryfile__tempfilename)</ept>","source":"[CAtlTemporaryFile::TempFileName](#catltemporaryfile__tempfilename)"},{"content":"Call this method to return the name of the temporary file.","pos":[2973,3031]},{"pos":[3036,3101],"content":"<bpt id=\"p1\">[</bpt>CAtlTemporaryFile::UnlockRange<ept id=\"p1\">](#catltemporaryfile__unlockrange)</ept>","source":"[CAtlTemporaryFile::UnlockRange](#catltemporaryfile__unlockrange)"},{"content":"Call this method to unlock a region of the temporary file.","pos":[3102,3160]},{"pos":[3165,3218],"content":"<bpt id=\"p1\">[</bpt>CAtlTemporaryFile::Write<ept id=\"p1\">](#catltemporaryfile__write)</ept>","source":"[CAtlTemporaryFile::Write](#catltemporaryfile__write)"},{"content":"Call this method to write data to the temporary file starting at the position indicated by the file pointer.","pos":[3219,3327]},{"pos":[3338,3354],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[3361,3365]},{"content":"Description","pos":[3366,3377]},{"pos":[3415,3488],"content":"<bpt id=\"p1\">[</bpt>CAtlTemporaryFile::operator HANDLE<ept id=\"p1\">](#catltemporaryfile__operator_handle)</ept>","source":"[CAtlTemporaryFile::operator HANDLE](#catltemporaryfile__operator_handle)"},{"content":"Returns a handle to the temporary file.","pos":[3489,3528]},{"pos":[3538,3545],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`CAtlTemporaryFile`</ph> makes it easy to create and use a temporary file.","pos":[3549,3618],"source":"`CAtlTemporaryFile` makes it easy to create and use a temporary file."},{"content":"The file is automatically named, opened, closed, and deleted.","pos":[3619,3680]},{"content":"If the file contents are required after the file is closed, they can be saved to a new file with a specified name.","pos":[3681,3795]},{"pos":[3804,3816],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3820,3841],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlfile.h","source":"**Header:** atlfile.h"},{"pos":[3850,3857],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3861,3959],"content":"See the example for <bpt id=\"p1\">[</bpt>CAtlTemporaryFile::CAtlTemporaryFile<ept id=\"p1\">](#catltemporaryfile__catltemporaryfile)</ept>.","source":"See the example for [CAtlTemporaryFile::CAtlTemporaryFile](#catltemporaryfile__catltemporaryfile)."},{"pos":[3969,4058],"content":"<bpt id=\"p1\">&lt;a name=\"catltemporaryfile__catltemporaryfile\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTemporaryFile::CAtlTemporaryFile","linkify":"<a name=\"catltemporaryfile__catltemporaryfile\"></a>  CAtlTemporaryFile::CAtlTemporaryFile","source":"<a name=\"catltemporaryfile__catltemporaryfile\"></a>  CAtlTemporaryFile::CAtlTemporaryFile"},{"content":"The constructor.","pos":[4062,4078]},{"pos":[4130,4137],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4141,4251],"content":"A file is not actually opened until a call is made to <bpt id=\"p1\">[</bpt>CAtlTemporaryFile::Create<ept id=\"p1\">](#catltemporaryfile__create)</ept>.","source":"A file is not actually opened until a call is made to [CAtlTemporaryFile::Create](#catltemporaryfile__create)."},{"pos":[4261,4268],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4272,4362],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#73<ept id=\"p2\">](../../atl/codesnippet/cpp/catltemporaryfile-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#73](../../atl/codesnippet/cpp/catltemporaryfile-class_1.cpp)]"},{"pos":[4372,4467],"content":"<bpt id=\"p1\">&lt;a name=\"catltemporaryfile___dtorcatltemporaryfile\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTemporaryFile::~CAtlTemporaryFile","linkify":"<a name=\"catltemporaryfile___dtorcatltemporaryfile\"></a>  CAtlTemporaryFile::~CAtlTemporaryFile","source":"<a name=\"catltemporaryfile___dtorcatltemporaryfile\"></a>  CAtlTemporaryFile::~CAtlTemporaryFile"},{"content":"The destructor.","pos":[4471,4486]},{"pos":[4539,4546],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4550,4625],"content":"The destructor calls <bpt id=\"p1\">[</bpt>CAtlTemporaryFile::Close<ept id=\"p1\">](#catltemporaryfile__close)</ept>.","source":"The destructor calls [CAtlTemporaryFile::Close](#catltemporaryfile__close)."},{"pos":[4635,4700],"content":"<bpt id=\"p1\">&lt;a name=\"catltemporaryfile__close\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTemporaryFile::Close","linkify":"<a name=\"catltemporaryfile__close\"></a>  CAtlTemporaryFile::Close","source":"<a name=\"catltemporaryfile__close\"></a>  CAtlTemporaryFile::Close"},{"content":"Call this method to close a temporary file and either delete its contents or store them under the specified file name.","pos":[4704,4822]},{"pos":[4894,4904],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>szNewName<ept id=\"p1\">*</ept>","pos":[4908,4919],"source":"*szNewName*"},{"content":"The name for the new file to store the contents of the temporary file in.","pos":[4923,4996]},{"content":"If this argument is NULL, the contents of the temporary file are deleted.","pos":[4997,5070]},{"pos":[5080,5092],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5096,5156],"content":"Returns <ph id=\"ph1\">`S_OK`</ph> on success, or an error <ph id=\"ph2\">`HRESULT`</ph> on failure.","source":"Returns `S_OK` on success, or an error `HRESULT` on failure."},{"pos":[5166,5173],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5177,5275],"content":"See the example for <bpt id=\"p1\">[</bpt>CAtlTemporaryFile::CAtlTemporaryFile<ept id=\"p1\">](#catltemporaryfile__catltemporaryfile)</ept>.","source":"See the example for [CAtlTemporaryFile::CAtlTemporaryFile](#catltemporaryfile__catltemporaryfile)."},{"pos":[5285,5352],"content":"<bpt id=\"p1\">&lt;a name=\"catltemporaryfile__create\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTemporaryFile::Create","linkify":"<a name=\"catltemporaryfile__create\"></a>  CAtlTemporaryFile::Create","source":"<a name=\"catltemporaryfile__create\"></a>  CAtlTemporaryFile::Create"},{"content":"Call this method to create a temporary file.","pos":[5356,5400]},{"pos":[5510,5520],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The path for the temporary file.","pos":[5536,5568]},{"content":"If this is NULL, <bpt id=\"p1\">[</bpt>GetTempPath<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa364992)</ept> will be called to assign a path.","pos":[5569,5692],"source":" If this is NULL, [GetTempPath](http://msdn.microsoft.com/library/windows/desktop/aa364992) will be called to assign a path."},{"content":"The desired access.","pos":[5720,5739]},{"content":"See <ph id=\"ph1\">`dwDesiredAccess`</ph> in <bpt id=\"p1\">[</bpt>CreateFile<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa363858)</ept> in the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[5740,5897],"source":" See `dwDesiredAccess` in [CreateFile](http://msdn.microsoft.com/library/windows/desktop/aa363858) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[5907,5919],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5923,5983],"content":"Returns <ph id=\"ph1\">`S_OK`</ph> on success, or an error <ph id=\"ph2\">`HRESULT`</ph> on failure.","source":"Returns `S_OK` on success, or an error `HRESULT` on failure."},{"pos":[5993,6000],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6004,6102],"content":"See the example for <bpt id=\"p1\">[</bpt>CAtlTemporaryFile::CAtlTemporaryFile<ept id=\"p1\">](#catltemporaryfile__catltemporaryfile)</ept>.","source":"See the example for [CAtlTemporaryFile::CAtlTemporaryFile](#catltemporaryfile__catltemporaryfile)."},{"pos":[6112,6177],"content":"<bpt id=\"p1\">&lt;a name=\"catltemporaryfile__flush\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTemporaryFile::Flush","linkify":"<a name=\"catltemporaryfile__flush\"></a>  CAtlTemporaryFile::Flush","source":"<a name=\"catltemporaryfile__flush\"></a>  CAtlTemporaryFile::Flush"},{"content":"Call this method to force any data remaining in the file buffer to be written to the temporary file.","pos":[6181,6281]},{"pos":[6329,6341],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6345,6405],"content":"Returns <ph id=\"ph1\">`S_OK`</ph> on success, or an error <ph id=\"ph2\">`HRESULT`</ph> on failure.","source":"Returns `S_OK` on success, or an error `HRESULT` on failure."},{"pos":[6415,6422],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6426,6533],"content":"Similar to <bpt id=\"p1\">[</bpt>CAtlTemporaryFile::HandsOff<ept id=\"p1\">](#catltemporaryfile__handsoff)</ept>, except that the file is not closed.","source":"Similar to [CAtlTemporaryFile::HandsOff](#catltemporaryfile__handsoff), except that the file is not closed."},{"pos":[6543,6550],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6554,6652],"content":"See the example for <bpt id=\"p1\">[</bpt>CAtlTemporaryFile::CAtlTemporaryFile<ept id=\"p1\">](#catltemporaryfile__catltemporaryfile)</ept>.","source":"See the example for [CAtlTemporaryFile::CAtlTemporaryFile](#catltemporaryfile__catltemporaryfile)."},{"pos":[6662,6739],"content":"<bpt id=\"p1\">&lt;a name=\"catltemporaryfile__getposition\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTemporaryFile::GetPosition","linkify":"<a name=\"catltemporaryfile__getposition\"></a>  CAtlTemporaryFile::GetPosition","source":"<a name=\"catltemporaryfile__getposition\"></a>  CAtlTemporaryFile::GetPosition"},{"content":"Call this method to get the current file pointer position.","pos":[6743,6801]},{"pos":[6876,6886],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The position in bytes.","pos":[6900,6922]},{"pos":[6932,6944],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6948,7008],"content":"Returns <ph id=\"ph1\">`S_OK`</ph> on success, or an error <ph id=\"ph2\">`HRESULT`</ph> on failure.","source":"Returns `S_OK` on success, or an error `HRESULT` on failure."},{"pos":[7018,7025],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7029,7122],"content":"To change the file pointer position, use <bpt id=\"p1\">[</bpt>CAtlTemporaryFile::Seek<ept id=\"p1\">](#catltemporaryfile__seek)</ept>.","source":"To change the file pointer position, use [CAtlTemporaryFile::Seek](#catltemporaryfile__seek)."},{"pos":[7132,7201],"content":"<bpt id=\"p1\">&lt;a name=\"catltemporaryfile__getsize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTemporaryFile::GetSize","linkify":"<a name=\"catltemporaryfile__getsize\"></a>  CAtlTemporaryFile::GetSize","source":"<a name=\"catltemporaryfile__getsize\"></a>  CAtlTemporaryFile::GetSize"},{"content":"Call this method to get the size in bytes of the temporary file.","pos":[7205,7269]},{"pos":[7340,7350],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of bytes in the file.","pos":[7364,7396]},{"pos":[7406,7418],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7422,7482],"content":"Returns <ph id=\"ph1\">`S_OK`</ph> on success, or an error <ph id=\"ph2\">`HRESULT`</ph> on failure.","source":"Returns `S_OK` on success, or an error `HRESULT` on failure."},{"pos":[7492,7563],"content":"<bpt id=\"p1\">&lt;a name=\"catltemporaryfile__handsoff\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTemporaryFile::HandsOff","linkify":"<a name=\"catltemporaryfile__handsoff\"></a>  CAtlTemporaryFile::HandsOff","source":"<a name=\"catltemporaryfile__handsoff\"></a>  CAtlTemporaryFile::HandsOff"},{"pos":[7567,7645],"content":"Call this method to disassociate the file from the <ph id=\"ph1\">`CAtlTemporaryFile`</ph> object.","source":"Call this method to disassociate the file from the `CAtlTemporaryFile` object."},{"pos":[7696,7708],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7712,7772],"content":"Returns <ph id=\"ph1\">`S_OK`</ph> on success, or an error <ph id=\"ph2\">`HRESULT`</ph> on failure.","source":"Returns `S_OK` on success, or an error `HRESULT` on failure."},{"pos":[7782,7789],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`HandsOff`</ph> and <bpt id=\"p1\">[</bpt>CAtlTemporaryFile::HandsOn<ept id=\"p1\">](#catltemporaryfile__handson)</ept> are used to disassociate the file from the object, and reattach it if needed.","pos":[7793,7943],"source":"`HandsOff` and [CAtlTemporaryFile::HandsOn](#catltemporaryfile__handson) are used to disassociate the file from the object, and reattach it if needed."},{"content":"<ph id=\"ph1\">`HandsOff`</ph> will force any data remaining in the file buffer to be written to the temporary file, and then close the file.","pos":[7944,8065],"source":"`HandsOff` will force any data remaining in the file buffer to be written to the temporary file, and then close the file."},{"content":"If you want to close and delete the file permanently, or if you want to close and retain the contents of the file with a given name, use <bpt id=\"p1\">[</bpt>CAtlTemporaryFile::Close<ept id=\"p1\">](#catltemporaryfile__close)</ept>.","pos":[8066,8257],"source":" If you want to close and delete the file permanently, or if you want to close and retain the contents of the file with a given name, use [CAtlTemporaryFile::Close](#catltemporaryfile__close)."},{"pos":[8267,8336],"content":"<bpt id=\"p1\">&lt;a name=\"catltemporaryfile__handson\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTemporaryFile::HandsOn","linkify":"<a name=\"catltemporaryfile__handson\"></a>  CAtlTemporaryFile::HandsOn","source":"<a name=\"catltemporaryfile__handson\"></a>  CAtlTemporaryFile::HandsOn"},{"content":"Call this method to open an existing temporary file and position the pointer at the end of the file.","pos":[8340,8440]},{"pos":[8490,8502],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8506,8566],"content":"Returns <ph id=\"ph1\">`S_OK`</ph> on success, or an error <ph id=\"ph2\">`HRESULT`</ph> on failure.","source":"Returns `S_OK` on success, or an error `HRESULT` on failure."},{"pos":[8576,8583],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8587,8738],"content":"<bpt id=\"p1\">[</bpt>CAtlTemporaryFile::HandsOff<ept id=\"p1\">](#catltemporaryfile__handsoff)</ept> and <ph id=\"ph1\">`HandsOn`</ph> are used to disassociate the file from the object, and reattach it if needed.","source":"[CAtlTemporaryFile::HandsOff](#catltemporaryfile__handsoff) and `HandsOn` are used to disassociate the file from the object, and reattach it if needed."},{"pos":[8748,8821],"content":"<bpt id=\"p1\">&lt;a name=\"catltemporaryfile__lockrange\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTemporaryFile::LockRange","linkify":"<a name=\"catltemporaryfile__lockrange\"></a>  CAtlTemporaryFile::LockRange","source":"<a name=\"catltemporaryfile__lockrange\"></a>  CAtlTemporaryFile::LockRange"},{"content":"Call this method to lock a region in the temporary file to prevent other processes from accessing it.","pos":[8825,8926]},{"pos":[9011,9021],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The position in the file where the lock should begin.","pos":[9035,9088]},{"content":"The length of the byte range to be locked.","pos":[9107,9149]},{"pos":[9159,9171],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9175,9235],"content":"Returns <ph id=\"ph1\">`S_OK`</ph> on success, or an error <ph id=\"ph2\">`HRESULT`</ph> on failure.","source":"Returns `S_OK` on success, or an error `HRESULT` on failure."},{"pos":[9245,9252],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Locking bytes in a file prevents access to those bytes by other processes.","pos":[9256,9330]},{"content":"You can lock more than one region of a file, but no overlapping regions are allowed.","pos":[9331,9415]},{"content":"To successfully unlock a region, use <bpt id=\"p1\">[</bpt>CAtlTemporaryFile::UnlockRange<ept id=\"p1\">](#catltemporaryfile__unlockrange)</ept>, ensuring the byte range corresponds exactly to the region that was previously locked.","pos":[9416,9605],"source":" To successfully unlock a region, use [CAtlTemporaryFile::UnlockRange](#catltemporaryfile__unlockrange), ensuring the byte range corresponds exactly to the region that was previously locked."},{"content":"<ph id=\"ph1\">`LockRange`</ph> does not merge adjacent regions; if two locked regions are adjacent, you must unlock each separately.","pos":[9606,9719],"source":"`LockRange` does not merge adjacent regions; if two locked regions are adjacent, you must unlock each separately."},{"pos":[9729,9814],"content":"<bpt id=\"p1\">&lt;a name=\"catltemporaryfile__operator_handle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTemporaryFile::operator HANDLE","linkify":"<a name=\"catltemporaryfile__operator_handle\"></a>  CAtlTemporaryFile::operator HANDLE","source":"<a name=\"catltemporaryfile__operator_handle\"></a>  CAtlTemporaryFile::operator HANDLE"},{"content":"Returns a handle to the temporary file.","pos":[9818,9857]},{"content":"```operator HANDLE() throw();","pos":[9863,9892]},{"pos":[10092,10172],"content":"HRESULT Read(LPVOID pBuffer, DWORD nBufSize, DWORD&amp; nBytesRead) throw();","source":"HRESULT Read(LPVOID pBuffer,\n    DWORD nBufSize,\n    DWORD& nBytesRead) throw();"},{"content":"HRESULT Seek(LONGLONG nOffset,  DWORD dwFrom = FILE_CURRENT) throw();","pos":[10931,11000]},{"content":"HRESULT SetSize(ULONGLONG nNewLen) throw();","pos":[11751,11794]},{"content":"LPCTSTR TempFileName() throw();","pos":[12284,12315]},{"content":"HRESULT UnlockRange(ULONGLONG nPos,  ULONGLONG nCount) throw();","pos":[12898,12961]},{"pos":[13512,13605],"content":"HRESULT Write(LPCVOID pBuffer, DWORD nBufSize, DWORD* pnBytesWritten = NULL) throw();","source":"HRESULT Write(LPCVOID pBuffer,\n    DWORD nBufSize,\n    DWORD* pnBytesWritten = NULL) throw();"}],"content":"---\ntitle: \"CAtlTemporaryFile Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CAtlTemporaryFile\"\n  - \"ATL.CAtlTemporaryFile\"\n  - \"ATL::CAtlTemporaryFile\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CAtlTemporaryFile class\"\nms.assetid: 05f0f2a5-94f6-4594-8dae-b114292ff5f9\ncaps.latest.revision: 18\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CAtlTemporaryFile Class\nThis class provides methods for the creation and use of a temporary file.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the Windows Runtime.  \n  \n## Syntax  \n  \n```\nclass CAtlTemporaryFile\n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAtlTemporaryFile::CAtlTemporaryFile](#catltemporaryfile__catltemporaryfile)|The constructor.|  \n|[CAtlTemporaryFile::~CAtlTemporaryFile](#catltemporaryfile___dtorcatltemporaryfile)|The destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAtlTemporaryFile::Close](#catltemporaryfile__close)|Call this method to close a temporary file and either delete its contents or store them under the specified file name.|  \n|[CAtlTemporaryFile::Create](#catltemporaryfile__create)|Call this method to create a temporary file.|  \n|[CAtlTemporaryFile::Flush](#catltemporaryfile__flush)|Call this method to force any data remaining in the file buffer to be written to the temporary file.|  \n|[CAtlTemporaryFile::GetPosition](#catltemporaryfile__getposition)|Call this method to get the current file pointer position.|  \n|[CAtlTemporaryFile::GetSize](#catltemporaryfile__getsize)|Call this method to get the size in bytes of the temporary file.|  \n|[CAtlTemporaryFile::HandsOff](#catltemporaryfile__handsoff)|Call this method to disassociate the file from the `CAtlTemporaryFile` object.|  \n|[CAtlTemporaryFile::HandsOn](#catltemporaryfile__handson)|Call this method to open an existing temporary file and position the pointer at the end of the file.|  \n|[CAtlTemporaryFile::LockRange](#catltemporaryfile__lockrange)|Call this method to lock a region in the file to prevent other processes from accessing it.|  \n|[CAtlTemporaryFile::Read](#catltemporaryfile__read)|Call this method to read data from the temporary file starting at the position indicated by the file pointer.|  \n|[CAtlTemporaryFile::Seek](#catltemporaryfile__seek)|Call this method to move the file pointer of the temporary file.|  \n|[CAtlTemporaryFile::SetSize](#catltemporaryfile__setsize)|Call this method to set the size of the temporary file.|  \n|[CAtlTemporaryFile::TempFileName](#catltemporaryfile__tempfilename)|Call this method to return the name of the temporary file.|  \n|[CAtlTemporaryFile::UnlockRange](#catltemporaryfile__unlockrange)|Call this method to unlock a region of the temporary file.|  \n|[CAtlTemporaryFile::Write](#catltemporaryfile__write)|Call this method to write data to the temporary file starting at the position indicated by the file pointer.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAtlTemporaryFile::operator HANDLE](#catltemporaryfile__operator_handle)|Returns a handle to the temporary file.|  \n  \n## Remarks  \n `CAtlTemporaryFile` makes it easy to create and use a temporary file. The file is automatically named, opened, closed, and deleted. If the file contents are required after the file is closed, they can be saved to a new file with a specified name.  \n  \n## Requirements  \n **Header:** atlfile.h  \n  \n## Example  \n See the example for [CAtlTemporaryFile::CAtlTemporaryFile](#catltemporaryfile__catltemporaryfile).  \n  \n##  <a name=\"catltemporaryfile__catltemporaryfile\"></a>  CAtlTemporaryFile::CAtlTemporaryFile  \n The constructor.  \n  \n```\nCAtlTemporaryFile() throw();\n```  \n  \n### Remarks  \n A file is not actually opened until a call is made to [CAtlTemporaryFile::Create](#catltemporaryfile__create).  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#73](../../atl/codesnippet/cpp/catltemporaryfile-class_1.cpp)]  \n  \n##  <a name=\"catltemporaryfile___dtorcatltemporaryfile\"></a>  CAtlTemporaryFile::~CAtlTemporaryFile  \n The destructor.  \n  \n```\n~CAtlTemporaryFile() throw();\n```  \n  \n### Remarks  \n The destructor calls [CAtlTemporaryFile::Close](#catltemporaryfile__close).  \n  \n##  <a name=\"catltemporaryfile__close\"></a>  CAtlTemporaryFile::Close  \n Call this method to close a temporary file and either delete its contents or store them under the specified file name.  \n  \n```\nHRESULT Close(LPCTSTR szNewName = NULL) throw();\n```  \n  \n### Parameters  \n *szNewName*  \n The name for the new file to store the contents of the temporary file in. If this argument is NULL, the contents of the temporary file are deleted.  \n  \n### Return Value  \n Returns `S_OK` on success, or an error `HRESULT` on failure.  \n  \n### Example  \n See the example for [CAtlTemporaryFile::CAtlTemporaryFile](#catltemporaryfile__catltemporaryfile).  \n  \n##  <a name=\"catltemporaryfile__create\"></a>  CAtlTemporaryFile::Create  \n Call this method to create a temporary file.  \n  \n```\nHRESULT Create(LPCTSTR pszDir = NULL,  DWORD dwDesiredAccess = GENERIC_WRITE) throw();\n```  \n  \n### Parameters  \n `pszDir`  \n The path for the temporary file. If this is NULL, [GetTempPath](http://msdn.microsoft.com/library/windows/desktop/aa364992) will be called to assign a path.  \n  \n `dwDesiredAccess`  \n The desired access. See `dwDesiredAccess` in [CreateFile](http://msdn.microsoft.com/library/windows/desktop/aa363858) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Return Value  \n Returns `S_OK` on success, or an error `HRESULT` on failure.  \n  \n### Example  \n See the example for [CAtlTemporaryFile::CAtlTemporaryFile](#catltemporaryfile__catltemporaryfile).  \n  \n##  <a name=\"catltemporaryfile__flush\"></a>  CAtlTemporaryFile::Flush  \n Call this method to force any data remaining in the file buffer to be written to the temporary file.  \n  \n```\nHRESULT Flush() throw();\n```  \n  \n### Return Value  \n Returns `S_OK` on success, or an error `HRESULT` on failure.  \n  \n### Remarks  \n Similar to [CAtlTemporaryFile::HandsOff](#catltemporaryfile__handsoff), except that the file is not closed.  \n  \n### Example  \n See the example for [CAtlTemporaryFile::CAtlTemporaryFile](#catltemporaryfile__catltemporaryfile).  \n  \n##  <a name=\"catltemporaryfile__getposition\"></a>  CAtlTemporaryFile::GetPosition  \n Call this method to get the current file pointer position.  \n  \n```\nHRESULT GetPosition(ULONGLONG& nPos) const throw();\n```  \n  \n### Parameters  \n `nPos`  \n The position in bytes.  \n  \n### Return Value  \n Returns `S_OK` on success, or an error `HRESULT` on failure.  \n  \n### Remarks  \n To change the file pointer position, use [CAtlTemporaryFile::Seek](#catltemporaryfile__seek).  \n  \n##  <a name=\"catltemporaryfile__getsize\"></a>  CAtlTemporaryFile::GetSize  \n Call this method to get the size in bytes of the temporary file.  \n  \n```\nHRESULT GetSize(ULONGLONG& nLen) const throw();\n```  \n  \n### Parameters  \n `nLen`  \n The number of bytes in the file.  \n  \n### Return Value  \n Returns `S_OK` on success, or an error `HRESULT` on failure.  \n  \n##  <a name=\"catltemporaryfile__handsoff\"></a>  CAtlTemporaryFile::HandsOff  \n Call this method to disassociate the file from the `CAtlTemporaryFile` object.  \n  \n```\nHRESULT HandsOff() throw();\n```  \n  \n### Return Value  \n Returns `S_OK` on success, or an error `HRESULT` on failure.  \n  \n### Remarks  \n `HandsOff` and [CAtlTemporaryFile::HandsOn](#catltemporaryfile__handson) are used to disassociate the file from the object, and reattach it if needed. `HandsOff` will force any data remaining in the file buffer to be written to the temporary file, and then close the file. If you want to close and delete the file permanently, or if you want to close and retain the contents of the file with a given name, use [CAtlTemporaryFile::Close](#catltemporaryfile__close).  \n  \n##  <a name=\"catltemporaryfile__handson\"></a>  CAtlTemporaryFile::HandsOn  \n Call this method to open an existing temporary file and position the pointer at the end of the file.  \n  \n```\nHRESULT HandsOn() throw();\n```  \n  \n### Return Value  \n Returns `S_OK` on success, or an error `HRESULT` on failure.  \n  \n### Remarks  \n [CAtlTemporaryFile::HandsOff](#catltemporaryfile__handsoff) and `HandsOn` are used to disassociate the file from the object, and reattach it if needed.  \n  \n##  <a name=\"catltemporaryfile__lockrange\"></a>  CAtlTemporaryFile::LockRange  \n Call this method to lock a region in the temporary file to prevent other processes from accessing it.  \n  \n```\nHRESULT LockRange(ULONGLONG nPos,  ULONGLONG nCount) throw();\n```  \n  \n### Parameters  \n `nPos`  \n The position in the file where the lock should begin.  \n  \n `nCount`  \n The length of the byte range to be locked.  \n  \n### Return Value  \n Returns `S_OK` on success, or an error `HRESULT` on failure.  \n  \n### Remarks  \n Locking bytes in a file prevents access to those bytes by other processes. You can lock more than one region of a file, but no overlapping regions are allowed. To successfully unlock a region, use [CAtlTemporaryFile::UnlockRange](#catltemporaryfile__unlockrange), ensuring the byte range corresponds exactly to the region that was previously locked. `LockRange` does not merge adjacent regions; if two locked regions are adjacent, you must unlock each separately.  \n  \n##  <a name=\"catltemporaryfile__operator_handle\"></a>  CAtlTemporaryFile::operator HANDLE  \n Returns a handle to the temporary file.  \n  \n```operator HANDLE() throw();\n```  \n  \n##  <a name=\"catltemporaryfile__read\"></a>  CAtlTemporaryFile::Read  \n Call this method to read data from the temporary file starting at the position indicated by the file pointer.  \n  \n```\nHRESULT Read(LPVOID pBuffer,\n    DWORD nBufSize,\n    DWORD& nBytesRead) throw();\n```  \n  \n### Parameters  \n `pBuffer`  \n Pointer to the buffer that will receive the data read from the file.  \n  \n `nBufSize`  \n The buffer size in bytes.  \n  \n `nBytesRead`  \n The number of bytes read.  \n  \n### Return Value  \n Returns `S_OK` on success, or an error `HRESULT` on failure.  \n  \n### Remarks  \n Calls [CAtlFile::Read](../../atl/reference/catlfile-class.md#catlfile__read). To change the position of the file pointer, call [CAtlTemporaryFile::Seek](#catltemporaryfile__seek).  \n  \n### Example  \n See the example for [CAtlTemporaryFile::CAtlTemporaryFile](#catltemporaryfile__catltemporaryfile).  \n  \n##  <a name=\"catltemporaryfile__seek\"></a>  CAtlTemporaryFile::Seek  \n Call this method to move the file pointer of the temporary file.  \n  \n```\nHRESULT Seek(LONGLONG nOffset,  DWORD dwFrom = FILE_CURRENT) throw();\n```  \n  \n### Parameters  \n `nOffset`  \n The offset, in bytes, from the starting point given by *dwFrom.*  \n  \n `dwFrom`  \n The starting point (FILE_BEGIN, FILE_CURRENT, or FILE_END).  \n  \n### Return Value  \n Returns `S_OK` on success, or an error `HRESULT` on failure.  \n  \n### Remarks  \n Calls [CAtlFile::Seek](../../atl/reference/catlfile-class.md#catlfile__seek). To obtain the current file pointer position, call [CAtlTemporaryFile::GetPosition](#catltemporaryfile__getposition).  \n  \n### Example  \n See the example for [CAtlTemporaryFile::CAtlTemporaryFile](#catltemporaryfile__catltemporaryfile).  \n  \n##  <a name=\"catltemporaryfile__setsize\"></a>  CAtlTemporaryFile::SetSize  \n Call this method to set the size of the temporary file.  \n  \n```\nHRESULT SetSize(ULONGLONG nNewLen) throw();\n```  \n  \n### Parameters  \n `nNewLen`  \n The new length of the file in bytes.  \n  \n### Return Value  \n Returns `S_OK` on success, or an error `HRESULT` on failure.  \n  \n### Remarks  \n Calls [CAtlFile::SetSize](../../atl/reference/catlfile-class.md#catlfile__setsize). On return, the file pointer is positioned at the end of the file.  \n  \n##  <a name=\"catltemporaryfile__tempfilename\"></a>  CAtlTemporaryFile::TempFileName  \n Call this method to return the name of temporary file.  \n  \n```\nLPCTSTR TempFileName() throw();\n```  \n  \n### Return Value  \n Returns the `LPCTSTR` pointing to the file name.  \n  \n### Remarks  \n The file name is generated in [CAtlTemporaryFile::CAtlTemporaryFile](#catltemporaryfile__catltemporaryfile) with a call to the [GetTempFile](http://msdn.microsoft.com/library/windows/desktop/aa364991)[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] function. The file extension will always be \"TFR\" for the temporary file.  \n  \n##  <a name=\"catltemporaryfile__unlockrange\"></a>  CAtlTemporaryFile::UnlockRange  \n Call this method to unlock a region of the temporary file.  \n  \n```\nHRESULT UnlockRange(ULONGLONG nPos,  ULONGLONG nCount) throw();\n```  \n  \n### Parameters  \n `nPos`  \n The position in the file where the unlock should begin.  \n  \n `nCount`  \n The length of the byte range to be unlocked.  \n  \n### Return Value  \n Returns `S_OK` on success, or an error `HRESULT` on failure.  \n  \n### Remarks  \n Calls [CAtlFile::UnlockRange](../../atl/reference/catlfile-class.md#catlfile__unlockrange).  \n  \n##  <a name=\"catltemporaryfile__write\"></a>  CAtlTemporaryFile::Write  \n Call this method to write data to the temporary file starting at the position indicated by the file pointer.  \n  \n```\nHRESULT Write(LPCVOID pBuffer,\n    DWORD nBufSize,\n    DWORD* pnBytesWritten = NULL) throw();\n```  \n  \n### Parameters  \n `pBuffer`  \n The buffer containing the data to be written to the file.  \n  \n `nBufSize`  \n The number of bytes to be transferred from the buffer.  \n  \n `pnBytesWritten`  \n The number of bytes written.  \n  \n### Return Value  \n Returns `S_OK` on success, or an error `HRESULT` on failure.  \n  \n### Remarks  \n Calls [CAtlFile::Write](../../atl/reference/catlfile-class.md#catlfile__write).  \n  \n### Example  \n See the example for [CAtlTemporaryFile::CAtlTemporaryFile](#catltemporaryfile__catltemporaryfile).  \n  \n## See Also  \n [Class Overview](../../atl/atl-class-overview.md)   \n [CAtlFile Class](../../atl/reference/catlfile-class.md)\n"}