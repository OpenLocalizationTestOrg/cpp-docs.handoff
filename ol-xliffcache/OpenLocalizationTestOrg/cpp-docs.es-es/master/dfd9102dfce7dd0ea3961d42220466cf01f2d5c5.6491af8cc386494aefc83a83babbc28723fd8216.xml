{"nodes":[{"pos":[12,57],"content":"-RTC (Run-Time Error Checks) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"-RTC (Run-Time Error Checks) | Microsoft Docs","pos":[0,45]}]},{"content":"/RTC (Run-Time Error Checks)","pos":[1350,1378]},{"pos":[1379,1527],"content":"Used to enable and disable the run-time error checks feature, in conjunction with the <bpt id=\"p1\">[</bpt>runtime_checks<ept id=\"p1\">](../../preprocessor/runtime-checks.md)</ept> pragma.","source":"Used to enable and disable the run-time error checks feature, in conjunction with the [runtime_checks](../../preprocessor/runtime-checks.md) pragma."},{"content":"Syntax","pos":[1536,1542]},{"content":"Arguments","pos":[1598,1607]},{"content":"Equivalent of <bpt id=\"p1\">**</bpt>/RTC<ept id=\"p1\">**</ept><ph id=\"ph1\">`su`</ph>.","pos":[1618,1645],"source":" Equivalent of **/RTC**`su`."},{"content":"Reports when a value is assigned to a smaller data type and results in a data loss.","pos":[1659,1742]},{"content":"For example, if a value of type <ph id=\"ph1\">`short 0x101`</ph> is assigned to a variable of type <ph id=\"ph2\">`char`</ph>.","pos":[1743,1830],"source":" For example, if a value of type `short 0x101` is assigned to a variable of type `char`."},{"content":"This option reports situations in which you intend to truncate, for example, if you want the first eight bits of an <ph id=\"ph1\">`int`</ph> returned as a <ph id=\"ph2\">`char`</ph>.","pos":[1837,1980],"source":"This option reports situations in which you intend to truncate, for example, if you want the first eight bits of an `int` returned as a `char`."},{"content":"Because <bpt id=\"p1\">**</bpt>/RTC<ept id=\"p1\">**</ept><ph id=\"ph1\">`c`</ph> causes a run-time error if any information is lost as a result of the assignment, you can mask off the information you need to avoid a run-time error as a result of <bpt id=\"p2\">**</bpt>/RTC<ept id=\"p2\">**</ept><ph id=\"ph2\">`c`</ph>.","pos":[1981,2178],"source":" Because **/RTC**`c` causes a run-time error if any information is lost as a result of the assignment, you can mask off the information you need to avoid a run-time error as a result of **/RTC**`c`."},{"content":"For example:","pos":[2179,2191]},{"content":"Enables stack frame run-time error checking, as follows:","pos":[2500,2556]},{"content":"Initialization of local variables to a nonzero value.","pos":[2566,2619]},{"content":"This helps identify bugs that do not appear when running in debug mode.","pos":[2620,2691]},{"content":"There is a greater chance that stack variables will still be zero in a debug build compared to a release build because of compiler optimizations of stack variables in a release build.","pos":[2692,2875]},{"content":"Once a program has used an area of its stack, it is never reset to 0 by the compiler.","pos":[2876,2961]},{"content":"Therefore, subsequent, uninitialized stack variables that happen to use the same stack area can return values left over from the prior use of this stack memory.","pos":[2962,3122]},{"content":"Detection of overruns and underruns of local variables such as arrays.","pos":[3132,3202]},{"content":"<bpt id=\"p1\">**</bpt>/RTC<ept id=\"p1\">**</ept><ph id=\"ph1\">`s`</ph> will not detect overruns when accessing memory that results from compiler padding within a structure.","pos":[3203,3316],"source":"**/RTC**`s` will not detect overruns when accessing memory that results from compiler padding within a structure."},{"content":"Padding could occur by using <bpt id=\"p1\">[</bpt>align<ept id=\"p1\">](../../cpp/align-cpp.md)</ept>, <bpt id=\"p2\">[</bpt>/Zp (Struct Member Alignment)<ept id=\"p2\">](../../build/reference/zp-struct-member-alignment.md)</ept>, or <bpt id=\"p3\">[</bpt>pack<ept id=\"p3\">](../../preprocessor/pack.md)</ept>, or if you order structure elements in such a way as to require the compiler to add padding.","pos":[3317,3595],"source":" Padding could occur by using [align](../../cpp/align-cpp.md), [/Zp (Struct Member Alignment)](../../build/reference/zp-struct-member-alignment.md), or [pack](../../preprocessor/pack.md), or if you order structure elements in such a way as to require the compiler to add padding."},{"content":"Stack pointer verification, which detects stack pointer corruption.","pos":[3605,3672]},{"content":"Stack pointer corruption can be caused by a calling convention mismatch.","pos":[3673,3745]},{"content":"For example, using a function pointer, you call a function in a DLL that is exported as <bpt id=\"p1\">[</bpt>__stdcall<ept id=\"p1\">](../../cpp/stdcall.md)</ept> but you declare the pointer to the function as <bpt id=\"p2\">[</bpt>__cdecl<ept id=\"p2\">](../../cpp/cdecl.md)</ept>.","pos":[3746,3945],"source":" For example, using a function pointer, you call a function in a DLL that is exported as [__stdcall](../../cpp/stdcall.md) but you declare the pointer to the function as [__cdecl](../../cpp/cdecl.md)."},{"pos":[3952,4342],"content":"`u`  \nReports when a variable is used without having been initialized. For example, an instruction that generates `C4701` may also generate a run-time error under **/RTC**`u`. Any instruction that generates [Compiler Warning (level 1 and level 4) C4700](../../error-messages/compiler-warnings/compiler-warning-level-1-and-level-4-c4700.md) will generate a run-time error under **/RTC**`u`.","leadings":[""," "],"nodes":[{"content":"Reports when a variable is used without having been initialized. For example, an instruction that generates `C4701` may also generate a run-time error under **/RTC**`u`. Any instruction that generates [Compiler Warning (level 1 and level 4) C4700](../../error-messages/compiler-warnings/compiler-warning-level-1-and-level-4-c4700.md) will generate a run-time error under **/RTC**`u`.","pos":[6,389],"nodes":[{"content":"Reports when a variable is used without having been initialized.","pos":[0,64]},{"content":"For example, an instruction that generates <ph id=\"ph1\">`C4701`</ph> may also generate a run-time error under <bpt id=\"p1\">**</bpt>/RTC<ept id=\"p1\">**</ept><ph id=\"ph2\">`u`</ph>.","pos":[65,169],"source":" For example, an instruction that generates `C4701` may also generate a run-time error under **/RTC**`u`."},{"content":"Any instruction that generates <bpt id=\"p1\">[</bpt>Compiler Warning (level 1 and level 4) C4700<ept id=\"p1\">](../../error-messages/compiler-warnings/compiler-warning-level-1-and-level-4-c4700.md)</ept> will generate a run-time error under <bpt id=\"p2\">**</bpt>/RTC<ept id=\"p2\">**</ept><ph id=\"ph1\">`u`</ph>.","pos":[170,383],"source":" Any instruction that generates [Compiler Warning (level 1 and level 4) C4700](../../error-messages/compiler-warnings/compiler-warning-level-1-and-level-4-c4700.md) will generate a run-time error under **/RTC**`u`."}]}]},{"content":"However, consider the following code fragment:","pos":[4349,4395]},{"content":"If a variable could have been initialized, it will not be reported at run time by <bpt id=\"p1\">**</bpt>/RTC<ept id=\"p1\">**</ept><ph id=\"ph1\">`u`</ph>.","pos":[4496,4590],"source":"If a variable could have been initialized, it will not be reported at run time by **/RTC**`u`."},{"content":"For example, after a variable is aliased through a pointer, the compiler will not track the variable and report uninitialized uses.","pos":[4591,4722]},{"content":"In effect, you can initialize a variable by taking its address.","pos":[4723,4786]},{"content":"The &amp; operator works like an assignment operator in this situation.","pos":[4787,4854],"source":" The & operator works like an assignment operator in this situation."},{"content":"Remarks","pos":[4863,4870]},{"pos":[4874,5088],"content":"Run-time error checks are a way for you to find problems in your running code; for more information, see <bpt id=\"p1\">[</bpt>How to: Use Native Run-Time Checks<ept id=\"p1\">](http://msdn.microsoft.com/Library/dc7b2f1e-5ff6-42e0-89b3-dc9dead83ee1)</ept>.","source":"Run-time error checks are a way for you to find problems in your running code; for more information, see [How to: Use Native Run-Time Checks](http://msdn.microsoft.com/Library/dc7b2f1e-5ff6-42e0-89b3-dc9dead83ee1)."},{"content":"If you compile your program at the command line using any of the <bpt id=\"p1\">**</bpt>/RTC<ept id=\"p1\">**</ept> compiler options, any pragma <bpt id=\"p2\">[</bpt>optimize<ept id=\"p2\">](../../preprocessor/optimize.md)</ept> instructions in your code will silently fail.","pos":[5095,5286],"source":"If you compile your program at the command line using any of the **/RTC** compiler options, any pragma [optimize](../../preprocessor/optimize.md) instructions in your code will silently fail."},{"content":"This is because run-time error checks are not valid in a release (optimized) build.","pos":[5287,5370]},{"content":"You should use <bpt id=\"p1\">**</bpt>/RTC<ept id=\"p1\">**</ept> for development builds; <bpt id=\"p2\">**</bpt>/RTC<ept id=\"p2\">**</ept> should not be used for a retail build.","pos":[5377,5472],"source":"You should use **/RTC** for development builds; **/RTC** should not be used for a retail build."},{"content":"<bpt id=\"p1\">**</bpt>/RTC<ept id=\"p1\">**</ept> cannot be used with compiler optimizations (<bpt id=\"p2\">[</bpt>/O Options (Optimize Code)<ept id=\"p2\">](../../build/reference/o-options-optimize-code.md)</ept>).","pos":[5473,5606],"source":"**/RTC** cannot be used with compiler optimizations ([/O Options (Optimize Code)](../../build/reference/o-options-optimize-code.md))."},{"content":"A program image built with <bpt id=\"p1\">**</bpt>/RTC<ept id=\"p1\">**</ept> will be slightly larger and slightly slower than an image built with <bpt id=\"p2\">**</bpt>/Od<ept id=\"p2\">**</ept> (up to 5 percent slower than an <bpt id=\"p3\">**</bpt>/Od<ept id=\"p3\">**</ept> build).","pos":[5607,5767],"source":" A program image built with **/RTC** will be slightly larger and slightly slower than an image built with **/Od** (up to 5 percent slower than an **/Od** build)."},{"pos":[5774,5953],"content":"The __MSVC_RUNTIME_CHECKS preprocessor directive will be defined when you use any <bpt id=\"p1\">**</bpt>/RTC<ept id=\"p1\">**</ept> option or <bpt id=\"p2\">[</bpt>/GZ<ept id=\"p2\">](../../build/reference/gz-enable-stack-frame-run-time-error-checking.md)</ept>.","source":"The __MSVC_RUNTIME_CHECKS preprocessor directive will be defined when you use any **/RTC** option or [/GZ](../../build/reference/gz-enable-stack-frame-run-time-error-checking.md)."},{"content":"To set this compiler option in the Visual Studio development environment","pos":[5963,6035]},{"content":"Open the project's <bpt id=\"p1\">**</bpt>Property Pages<ept id=\"p1\">**</ept> dialog box.","pos":[6045,6094],"source":"Open the project's **Property Pages** dialog box."},{"content":"For details, see <bpt id=\"p1\">[</bpt>Working with Project Properties<ept id=\"p1\">](../../ide/working-with-project-properties.md)</ept>.","pos":[6095,6192],"source":" For details, see [Working with Project Properties](../../ide/working-with-project-properties.md)."},{"pos":[6202,6229],"content":"Click the <bpt id=\"p1\">**</bpt>C/C++<ept id=\"p1\">**</ept> folder.","source":"Click the **C/C++** folder."},{"pos":[6239,6283],"content":"Click the <bpt id=\"p1\">**</bpt>Code Generation<ept id=\"p1\">**</ept> property page.","source":"Click the **Code Generation** property page."},{"pos":[6293,6392],"content":"Modify one or both of the following properties: <bpt id=\"p1\">**</bpt>Basic Runtime Checks<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Smaller Type Check<ept id=\"p2\">**</ept>.","source":"Modify one or both of the following properties: **Basic Runtime Checks** or **Smaller Type Check**."},{"content":"To set this compiler option programmatically","pos":[6402,6446]},{"content":"See &lt;xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.BasicRuntimeChecks%2A&gt; and &lt;xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.SmallerTypeCheck%2A&gt; properties.","pos":[6456,6643],"source":"See <xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.BasicRuntimeChecks%2A> and <xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.SmallerTypeCheck%2A> properties."},{"content":"See Also","pos":[6652,6660]},{"content":"Compiler Options","pos":[6665,6681]},{"content":"Setting Compiler Options","pos":[6731,6755]},{"content":"How to: Use Native Run-Time Checks","pos":[6813,6847]}],"content":"---\ntitle: \"-RTC (Run-Time Error Checks) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"/rtc\"\n  - \"VC.Project.VCCLCompilerTool.SmallerTypeCheck\"\n  - \"VC.Project.VCCLCompilerTool.UninitializedVariableCheck\"\n  - \"VC.Project.VCCLCompilerTool.StackFrameCheck\"\n  - \"VC.Project.VCCLCompilerTool.BasicRuntimeChecks\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"/RTCs compiler option [C++]\"\n  - \"-RTC1 compiler option [C++]\"\n  - \"run-time errors, error checks\"\n  - \"-RTCu compiler option [C++]\"\n  - \"/RTC1 compiler option [C++]\"\n  - \"/RTCc compiler option [C++]\"\n  - \"/RTCu compiler option [C++]\"\n  - \"__MSVC_RUNTIME_CHECKS macro\"\n  - \"-RTCs compiler option [C++]\"\n  - \"RTCs compiler option\"\n  - \"RTC1 compiler option\"\n  - \"run-time errors, run-time checks\"\n  - \"run-time checks, /RTC option\"\n  - \"RTCu compiler option\"\n  - \"RTCc compiler option\"\n  - \"-RTCc compiler option [C++]\"\nms.assetid: 9702c558-412c-4004-acd5-80761f589368\ncaps.latest.revision: 18\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# /RTC (Run-Time Error Checks)\nUsed to enable and disable the run-time error checks feature, in conjunction with the [runtime_checks](../../preprocessor/runtime-checks.md) pragma.  \n  \n## Syntax  \n  \n```  \n/RTC1  \n/RTCc  \n/RTCs  \n/RTCu  \n```  \n  \n## Arguments  \n `1`  \n Equivalent of **/RTC**`su`.  \n  \n `c`  \n Reports when a value is assigned to a smaller data type and results in a data loss. For example, if a value of type `short 0x101` is assigned to a variable of type `char`.  \n  \n This option reports situations in which you intend to truncate, for example, if you want the first eight bits of an `int` returned as a `char`. Because **/RTC**`c` causes a run-time error if any information is lost as a result of the assignment, you can mask off the information you need to avoid a run-time error as a result of **/RTC**`c`. For example:  \n  \n```  \n#include <crtdbg.h>  \n  \nchar get8bits(int value, int position) {  \n   _ASSERT(position < 32);  \n   return (char)(value >> position);  \n   // Try the following line instead:  \n   // return (char)((value >> position) & 0xff);  \n}  \n  \nint main() {  \n   get8bits(12341235,3);  \n}  \n```  \n  \n `s`  \n Enables stack frame run-time error checking, as follows:  \n  \n-   Initialization of local variables to a nonzero value. This helps identify bugs that do not appear when running in debug mode. There is a greater chance that stack variables will still be zero in a debug build compared to a release build because of compiler optimizations of stack variables in a release build. Once a program has used an area of its stack, it is never reset to 0 by the compiler. Therefore, subsequent, uninitialized stack variables that happen to use the same stack area can return values left over from the prior use of this stack memory.  \n  \n-   Detection of overruns and underruns of local variables such as arrays. **/RTC**`s` will not detect overruns when accessing memory that results from compiler padding within a structure. Padding could occur by using [align](../../cpp/align-cpp.md), [/Zp (Struct Member Alignment)](../../build/reference/zp-struct-member-alignment.md), or [pack](../../preprocessor/pack.md), or if you order structure elements in such a way as to require the compiler to add padding.  \n  \n-   Stack pointer verification, which detects stack pointer corruption. Stack pointer corruption can be caused by a calling convention mismatch. For example, using a function pointer, you call a function in a DLL that is exported as [__stdcall](../../cpp/stdcall.md) but you declare the pointer to the function as [__cdecl](../../cpp/cdecl.md).  \n  \n `u`  \n Reports when a variable is used without having been initialized. For example, an instruction that generates `C4701` may also generate a run-time error under **/RTC**`u`. Any instruction that generates [Compiler Warning (level 1 and level 4) C4700](../../error-messages/compiler-warnings/compiler-warning-level-1-and-level-4-c4700.md) will generate a run-time error under **/RTC**`u`.  \n  \n However, consider the following code fragment:  \n  \n```  \nint a, *b, c;  \nif ( 1 )  \nb = &a;  \nc = a;  // No run-time error with /RTCu  \n```  \n  \n If a variable could have been initialized, it will not be reported at run time by **/RTC**`u`. For example, after a variable is aliased through a pointer, the compiler will not track the variable and report uninitialized uses. In effect, you can initialize a variable by taking its address. The & operator works like an assignment operator in this situation.  \n  \n## Remarks  \n Run-time error checks are a way for you to find problems in your running code; for more information, see [How to: Use Native Run-Time Checks](http://msdn.microsoft.com/Library/dc7b2f1e-5ff6-42e0-89b3-dc9dead83ee1).  \n  \n If you compile your program at the command line using any of the **/RTC** compiler options, any pragma [optimize](../../preprocessor/optimize.md) instructions in your code will silently fail. This is because run-time error checks are not valid in a release (optimized) build.  \n  \n You should use **/RTC** for development builds; **/RTC** should not be used for a retail build. **/RTC** cannot be used with compiler optimizations ([/O Options (Optimize Code)](../../build/reference/o-options-optimize-code.md)). A program image built with **/RTC** will be slightly larger and slightly slower than an image built with **/Od** (up to 5 percent slower than an **/Od** build).  \n  \n The __MSVC_RUNTIME_CHECKS preprocessor directive will be defined when you use any **/RTC** option or [/GZ](../../build/reference/gz-enable-stack-frame-run-time-error-checking.md).  \n  \n### To set this compiler option in the Visual Studio development environment  \n  \n1.  Open the project's **Property Pages** dialog box. For details, see [Working with Project Properties](../../ide/working-with-project-properties.md).  \n  \n2.  Click the **C/C++** folder.  \n  \n3.  Click the **Code Generation** property page.  \n  \n4.  Modify one or both of the following properties: **Basic Runtime Checks** or **Smaller Type Check**.  \n  \n### To set this compiler option programmatically  \n  \n-   See <xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.BasicRuntimeChecks%2A> and <xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.SmallerTypeCheck%2A> properties.  \n  \n## See Also  \n [Compiler Options](../../build/reference/compiler-options.md)   \n [Setting Compiler Options](../../build/reference/setting-compiler-options.md)   \n [How to: Use Native Run-Time Checks](http://msdn.microsoft.com/Library/dc7b2f1e-5ff6-42e0-89b3-dc9dead83ee1)"}