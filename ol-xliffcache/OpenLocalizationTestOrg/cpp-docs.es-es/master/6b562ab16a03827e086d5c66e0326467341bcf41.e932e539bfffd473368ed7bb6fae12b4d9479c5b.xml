{"nodes":[{"pos":[12,34],"content":"__m64 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"__m64 | Microsoft Docs","pos":[0,22]}]},{"content":"__m64","pos":[615,620]},{"content":"Microsoft Specific","pos":[624,642]},{"content":"The <ph id=\"ph1\">`__m64`</ph> data type is for use with the MMX and 3DNow!","pos":[646,702],"source":"The `__m64` data type is for use with the MMX and 3DNow!"},{"content":"intrinsics, and is defined in xmmintrin.h.","pos":[703,745]},{"content":"Remarks","pos":[854,861]},{"content":"You should not access the <ph id=\"ph1\">`__m64`</ph> fields directly.","pos":[865,915],"source":"You should not access the `__m64` fields directly."},{"content":"You can, however, see these types in the debugger.","pos":[916,966]},{"content":"A variable of type <ph id=\"ph1\">`__m64`</ph> maps to the MM[0-7] registers.","pos":[967,1024],"source":" A variable of type `__m64` maps to the MM[0-7] registers."},{"pos":[1031,1105],"content":"Variables of type <bpt id=\"p1\">**</bpt>_m64<ept id=\"p1\">**</ept> are automatically aligned on 8-byte boundaries.","source":"Variables of type **_m64** are automatically aligned on 8-byte boundaries."},{"content":"The <ph id=\"ph1\">`__m64`</ph> data type is not supported on <ph id=\"ph2\">[!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]</ph> processors.","pos":[1112,1229],"source":"The `__m64` data type is not supported on [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)] processors."},{"content":"Applications that use __m64 as part of MMX intrinsics must be rewritten to use equivalent SSE and SSE2 intrinsics.","pos":[1230,1344]},{"content":"END Microsoft Specific","pos":[1353,1375]},{"content":"See Also","pos":[1384,1392]},{"content":"Keywords","pos":[1397,1405]},{"content":"Fundamental Types","pos":[1436,1453]},{"content":"Data Type Ranges","pos":[1493,1509]}],"content":"---\ntitle: \"__m64 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"__m64\"\n  - \"__m64_cpp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"__m64 keyword [C++]\"\nms.assetid: df0410e8-67c9-4954-88c8-fe2653575252\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# __m64\n## Microsoft Specific  \n The `__m64` data type is for use with the MMX and 3DNow! intrinsics, and is defined in xmmintrin.h.  \n  \n```  \n// data_types__m64.cpp  \n#include <xmmintrin.h>  \nint main()  \n{  \n   __m64 x;  \n}  \n```  \n  \n## Remarks  \n You should not access the `__m64` fields directly. You can, however, see these types in the debugger. A variable of type `__m64` maps to the MM[0-7] registers.  \n  \n Variables of type **_m64** are automatically aligned on 8-byte boundaries.  \n  \n The `__m64` data type is not supported on [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)] processors. Applications that use __m64 as part of MMX intrinsics must be rewritten to use equivalent SSE and SSE2 intrinsics.  \n  \n## END Microsoft Specific  \n  \n## See Also  \n [Keywords](../cpp/keywords-cpp.md)   \n [Fundamental Types](../cpp/fundamental-types-cpp.md)   \n [Data Type Ranges](../cpp/data-type-ranges.md)"}