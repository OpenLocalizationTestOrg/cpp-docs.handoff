{"nodes":[{"pos":[12,54],"content":"&lt;ostream&gt; operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ostream<ph id=\"ph1\">&amp;gt;</ph> operators | Microsoft Docs","pos":[4,42],"source":"ostream&gt; operators | Microsoft Docs"}]},{"content":"ostream<ph id=\"ph1\">&amp;gt;</ph> operators","pos":[301,322],"source":"ostream&gt; operators"},{"content":"operator","pos":[336,344]},{"pos":[416,424],"content":"operator"},{"content":"Writes various types to the stream.","pos":[436,471]},{"content":"Parameters","pos":[1876,1886]},{"content":"A character.","pos":[1899,1911]},{"content":"The element type.","pos":[1929,1946]},{"content":"A <ph id=\"ph1\">`basic_ostream`</ph> object.","pos":[1964,1989],"source":" A `basic_ostream` object."},{"content":"A character string.","pos":[2005,2024]},{"content":"Character traits.","pos":[2040,2057]},{"content":"The type","pos":[2073,2081]},{"content":"Return Value","pos":[2091,2103]},{"content":"The stream.","pos":[2107,2118]},{"content":"Remarks","pos":[2128,2135]},{"content":"The <ph id=\"ph1\">`basic_ostream`</ph> class also defines several insertion operators.","pos":[2139,2206],"source":"The `basic_ostream` class also defines several insertion operators."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>basic_ostream::operator<ph id=\"ph1\">&amp;lt;&amp;lt;</ph><ept id=\"p1\">](../standard-library/basic-ostream-class.md#basic_ostream_operator_lt_lt_)</ept>.","pos":[2207,2341],"source":" For more information, see [basic_ostream::operator&lt;&lt;](../standard-library/basic-ostream-class.md#basic_ostream_operator_lt_lt_)."},{"content":"The template function","pos":[2348,2369]},{"content":"determines the length N = <ph id=\"ph1\">`traits_type::`</ph><bpt id=\"p1\">[</bpt>length<ept id=\"p1\">](../standard-library/char-traits-struct.md#char_traits__length)</ept>( <ph id=\"ph2\">`str`</ph>) of the sequence beginning at <ph id=\"ph3\">`str`</ph>, and inserts the sequence.","pos":[2523,2705],"source":"determines the length N = `traits_type::`[length](../standard-library/char-traits-struct.md#char_traits__length)( `str`) of the sequence beginning at `str`, and inserts the sequence."},{"content":"If N &lt; <ph id=\"ph1\">`_Ostr.`</ph><bpt id=\"p1\">[</bpt>width<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__width)</ept>, then the function also inserts a repetition of <ph id=\"ph2\">`_Ostr.``width`</ph> - N fill characters.","pos":[2706,2868],"source":" If N < `_Ostr.`[width](../standard-library/ios-base-class.md#ios_base__width), then the function also inserts a repetition of `_Ostr.``width` - N fill characters."},{"content":"The repetition precedes the sequence if ( <ph id=\"ph1\">`_Ostr`</ph>.","pos":[2869,2919],"source":" The repetition precedes the sequence if ( `_Ostr`."},{"content":"<bpt id=\"p1\">[</bpt>flags<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__flags)</ept><ph id=\"ph1\"> &amp; `adjustfield`</ph> != <bpt id=\"p2\">[</bpt>left<ept id=\"p2\">](../standard-library/ios-functions.md#left)</ept>.","pos":[2920,3052],"source":"[flags](../standard-library/ios-base-class.md#ios_base__flags) & `adjustfield` != [left](../standard-library/ios-functions.md#left)."},{"content":"Otherwise, the repetition follows the sequence.","pos":[3053,3100]},{"content":"The function returns <ph id=\"ph1\">`_Ostr`</ph>.","pos":[3101,3130],"source":" The function returns `_Ostr`."},{"content":"The template function","pos":[3137,3158]},{"content":"inserts the element <ph id=\"ph1\">`_Ch`</ph>.","pos":[3305,3331],"source":"inserts the element `_Ch`."},{"content":"If 1 &lt; <ph id=\"ph1\">`_Ostr.width`</ph>, then the function also inserts a repetition of <ph id=\"ph2\">`_Ostr.width`</ph> - 1 fill characters.","pos":[3332,3435],"source":" If 1 < `_Ostr.width`, then the function also inserts a repetition of `_Ostr.width` - 1 fill characters."},{"content":"The repetition precedes the sequence if <ph id=\"ph1\">`_Ostr.flags &amp; adjustfield != left`</ph>.","pos":[3436,3512],"source":" The repetition precedes the sequence if `_Ostr.flags & adjustfield != left`."},{"content":"Otherwise, the repetition follows the sequence.","pos":[3513,3560]},{"content":"It returns <ph id=\"ph1\">`_Ostr`</ph>.","pos":[3561,3580],"source":" It returns `_Ostr`."},{"content":"The template function","pos":[3587,3608]},{"content":"behaves the same as","pos":[3762,3781]},{"pos":[3935,4213],"content":"except that each element <ph id=\"ph1\">`_Ch`</ph> of the sequence beginning at <ph id=\"ph2\">`str`</ph> is converted to an object of type <ph id=\"ph3\">`Elem`</ph> by calling <ph id=\"ph4\">`_Ostr.`</ph><bpt id=\"p1\">[</bpt>put<ept id=\"p1\">](../standard-library/basic-ostream-class.md#basic_ostream__put)</ept>( <ph id=\"ph5\">`_Ostr.`</ph><bpt id=\"p2\">[</bpt>widen<ept id=\"p2\">](../standard-library/basic-ios-class.md#basic_ios__widen)</ept>( <ph id=\"ph6\">`_Ch`</ph>)).","source":"except that each element `_Ch` of the sequence beginning at `str` is converted to an object of type `Elem` by calling `_Ostr.`[put](../standard-library/basic-ostream-class.md#basic_ostream__put)( `_Ostr.`[widen](../standard-library/basic-ios-class.md#basic_ios__widen)( `_Ch`))."},{"content":"The template function","pos":[4220,4241]},{"pos":[4247,4376],"content":"``cpp template &lt;class _Elem, class _Tr&gt; basic_ostream&lt;Elem, _Tr&gt;&amp; operator&lt;&lt;( basic_ostream&lt;Elem, _Tr&gt;&amp; _Ostr, char _Ch);","source":"``cpp\ntemplate <class _Elem, class _Tr>\nbasic_ostream<Elem, _Tr>& operator<<(\n    basic_ostream<Elem, _Tr>& _Ostr,\n    char _Ch);"},{"pos":[4553,4659],"content":"except that <ph id=\"ph1\">`_Ch`</ph> is converted to an object of type <ph id=\"ph2\">`Elem`</ph> by calling <ph id=\"ph3\">`_Ostr.put`</ph>( <ph id=\"ph4\">`_Ostr.widen`</ph>( <ph id=\"ph5\">`_Ch`</ph>)).","source":"except that `_Ch` is converted to an object of type `Elem` by calling `_Ostr.put`( `_Ostr.widen`( `_Ch`))."},{"content":"The template function","pos":[4666,4687]},{"content":"behaves the same as","pos":[4828,4847]},{"content":"(It does not have to widen the elements before inserting them.)","pos":[5001,5064]},{"content":"The template function","pos":[5071,5092]},{"content":"behaves the same as","pos":[5225,5244]},{"pos":[5391,5445],"content":"(It does not have to widen <ph id=\"ph1\">`_Ch`</ph> before inserting it.)","source":"(It does not have to widen `_Ch` before inserting it.)"},{"content":"The template function","pos":[5452,5473]},{"pos":[5621,5664],"content":"returns <ph id=\"ph1\">`_Ostr`</ph> &lt;&lt; ( <ph id=\"ph2\">`const char *`</ph>) <ph id=\"ph3\">`str`</ph>.","source":"returns `_Ostr` << ( `const char *`) `str`."},{"content":"The template function","pos":[5671,5692]},{"pos":[5833,5868],"content":"returns <ph id=\"ph1\">`_Ostr`</ph> &lt;&lt; ( <ph id=\"ph2\">`char`</ph>) <ph id=\"ph3\">`_Ch`</ph>.","source":"returns `_Ostr` << ( `char`) `_Ch`."},{"content":"The template function:","pos":[5875,5897]},{"pos":[6047,6090],"content":"returns <ph id=\"ph1\">`_Ostr`</ph> &lt;&lt; ( <ph id=\"ph2\">`const char *`</ph>) <ph id=\"ph3\">`str`</ph>.","source":"returns `_Ostr` << ( `const char *`) `str`."},{"content":"The template function:","pos":[6097,6119]},{"pos":[6262,6297],"content":"returns <ph id=\"ph1\">`_Ostr`</ph> &lt;&lt; ( <ph id=\"ph2\">`char`</ph>) <ph id=\"ph3\">`_Ch`</ph>.","source":"returns `_Ostr` << ( `char`) `_Ch`."},{"content":"The template function:","pos":[6304,6326]},{"pos":[6481,6630],"content":"returns <ph id=\"ph1\">`_Ostr`</ph> <ph id=\"ph2\">`&lt;&lt;`</ph> <ph id=\"ph3\">`val`</ph> (and converts a <bpt id=\"p1\">[</bpt>RValue Reference<ept id=\"p1\">](../cpp/rvalue-reference-declarator-amp-amp.md)</ept> to <ph id=\"ph4\">`_Ostr`</ph> to an lvalue in the process).","source":"returns `_Ostr` `<<` `val` (and converts a [RValue Reference](../cpp/rvalue-reference-declarator-amp-amp.md) to `_Ostr` to an lvalue in the process)."},{"content":"Example","pos":[6640,6647]},{"pos":[6652,6746],"content":"See <bpt id=\"p1\">[</bpt>flush<ept id=\"p1\">](../standard-library/ostream-functions.md#flush)</ept> for an example using <ph id=\"ph1\">`operator&lt;&lt;`</ph>.","source":"See [flush](../standard-library/ostream-functions.md#flush) for an example using `operator<<`."},{"content":"See Also","pos":[6755,6763]},{"content":"ostream&gt;","pos":[6770,6778],"source":"ostream>"}],"content":"---\ntitle: \"&lt;ostream&gt; operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 9282a62e-a3d1-4371-a284-fbc9515bb9a2\ncaps.latest.revision: 10\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\n---\n# &lt;ostream&gt; operators\n||  \n|-|  \n|[operator&lt;&lt;](#operator_lt__lt_)|  \n  \n##  <a name=\"operator_lt__lt_\"></a>  operator&lt;&lt;  \n Writes various types to the stream.  \n  \n```\ntemplate <class _Elem, class _Tr>\nbasic_ostream<_Elem, _Tr>& operator<<(\n    basic_ostream<_Elem, _Tr>& _Ostr,\n    const Elem* str);\n\ntemplate <class _Elem, class _Tr>\nbasic_ostream<_Elem, _Tr>& operator<<(\n    basic_ostream<_Elem, _Tr>& _Ostr,\n    Elem _Ch);\n\ntemplate <class _Elem, class _Tr>\nbasic_ostream<_Elem, _Tr>& operator<<(\n    basic_ostream<_Elem, _Tr>& _Ostr,\n    const char* str);\n\ntemplate <class _Elem, class _Tr>\nbasic_ostream<_Elem, _Tr>& operator<<(\n    basic_ostream<_Elem, _Tr>& _Ostr,\n    char _Ch);\n\ntemplate <class _Tr>\nbasic_ostream<char, _Tr>& operator<<(\n    basic_ostream<char, _Tr>& _Ostr,\n    const char* str);\n\ntemplate <class _Tr>\nbasic_ostream<char, _Tr>& operator<<(\n    basic_ostream<char, _Tr>& _ostr,\n    char _Ch);\n\ntemplate <class _Tr>\nbasic_ostream<char, _Tr>& operator<<(\n    basic_ostream<char, _Tr>& _Ostr,\n    const signed char* str);\n\ntemplate <class _Tr>\nbasic_ostream<char, _Tr>& operator<<(\n    basic_ostream<char, _Tr>& _Ostr,\n    signed char _Ch);\n\ntemplate <class _Tr>\nbasic_ostream<char, _Tr>& operator<<(\n    basic_ostream<char, _Tr>& _Ostr,\n    const unsigned char* str);\n\ntemplate <class _Tr>\nbasic_ostream<char, _Tr>& operator<<(\n    basic_ostream<char, _Tr>& _Ostr,\n    unsigned char _Ch);\n\ntemplate <class _Elem, class _Tr, class T>\nbasic_ostream <_Elem, _Tr>& operator<<(\n    basic_ostream<_Elem, _Tr>&& _Ostr,\n    Ty val);\n```  \n  \n### Parameters  \n `_Ch`  \n A character.  \n  \n `_Elem`  \n The element type.  \n  \n `_Ostr`  \n A `basic_ostream` object.  \n  \n `str`  \n A character string.  \n  \n `_Tr`  \n Character traits.  \n  \n `val`  \n The type  \n  \n### Return Value  \n The stream.  \n  \n### Remarks  \n The `basic_ostream` class also defines several insertion operators. For more information, see [basic_ostream::operator&lt;&lt;](../standard-library/basic-ostream-class.md#basic_ostream_operator_lt_lt_).  \n  \n The template function  \n  \n```cpp\ntemplate <class _Elem, class _Tr>\nbasic_ostream<Elem, _Tr>& operator<<(\n    basic_ostream<Elem, _Tr>& _ostr,\n    const Elem *str);\n```  \n  \n determines the length N = `traits_type::`[length](../standard-library/char-traits-struct.md#char_traits__length)( `str`) of the sequence beginning at `str`, and inserts the sequence. If N < `_Ostr.`[width](../standard-library/ios-base-class.md#ios_base__width), then the function also inserts a repetition of `_Ostr.``width` - N fill characters. The repetition precedes the sequence if ( `_Ostr`. [flags](../standard-library/ios-base-class.md#ios_base__flags) & `adjustfield` != [left](../standard-library/ios-functions.md#left). Otherwise, the repetition follows the sequence. The function returns `_Ostr`.  \n  \n The template function  \n  \n```cpp\ntemplate <class _Elem, class _Tr>\nbasic_ostream<Elem, _Tr>& operator<<(\n    basic_ostream<Elem, _Tr>& _Ostr,\n    Elem _Ch);\n```  \n  \n inserts the element `_Ch`. If 1 < `_Ostr.width`, then the function also inserts a repetition of `_Ostr.width` - 1 fill characters. The repetition precedes the sequence if `_Ostr.flags & adjustfield != left`. Otherwise, the repetition follows the sequence. It returns `_Ostr`.  \n  \n The template function  \n  \n```cpp\ntemplate <class _Elem, class _Tr>\nbasic_ostream<Elem, _Tr>& operator<<(\n    basic_ostream<Elem, _Tr>& _Ostr,\n    const char *str);\n```  \n  \n behaves the same as  \n  \n```cpp\ntemplate <class _Elem, class _Tr>\nbasic_ostream<Elem, _Tr>& operator<<(\n    basic_ostream<Elem, _Tr>& _Ostr,\n    const Elem *str);\n```  \n  \n except that each element `_Ch` of the sequence beginning at `str` is converted to an object of type `Elem` by calling `_Ostr.`[put](../standard-library/basic-ostream-class.md#basic_ostream__put)( `_Ostr.`[widen](../standard-library/basic-ios-class.md#basic_ios__widen)( `_Ch`)).  \n  \n The template function  \n  \n``cpp\ntemplate <class _Elem, class _Tr>\nbasic_ostream<Elem, _Tr>& operator<<(\n    basic_ostream<Elem, _Tr>& _Ostr,\n    char _Ch);\n```  \n  \n behaves the same as  \n  \n```cpp\ntemplate <class _Elem, class _Tr>\nbasic_ostream<Elem, _Tr>& operator<<(\n    basic_ostream<Elem, _Tr>& _Ostr,\n    Elem _Ch);\n```  \n  \n except that `_Ch` is converted to an object of type `Elem` by calling `_Ostr.put`( `_Ostr.widen`( `_Ch`)).  \n  \n The template function  \n  \n```cpp\ntemplate <class _Tr>\nbasic_ostream<char, _Tr>& operator<<(\n    basic_ostream<char, _Tr>& _Ostr,\n    const char *str);\n```  \n  \n behaves the same as  \n  \n```cpp\ntemplate <class _Elem, class _Tr>\nbasic_ostream<Elem, _Tr>& operator<<(\n    basic_ostream<Elem, _Tr>& _Ostr,\n    const Elem *str);\n```  \n  \n (It does not have to widen the elements before inserting them.)  \n  \n The template function  \n  \n```cpp\ntemplate <class _Tr>\nbasic_ostream<char, Tr>& operator<<(\n    basic_ostream<char, _Tr>& _Ostr,\n    char _Ch);\n```  \n  \n behaves the same as  \n  \n```cpp\ntemplate <class _Elem, class _Tr>\nbasic_ostream<Elem, _Tr>& operator<<(\n    basic_ostream<Elem, _Tr>& _Ostr,\n    Elem _Ch);\n```  \n  \n (It does not have to widen `_Ch` before inserting it.)  \n  \n The template function  \n  \n```cpp\ntemplate <class _Tr>\nbasic_ostream<char, _Tr>& operator<<(\n    basic_ostream<char, _Tr>& _Ostr,\n    const signed char *str);\n```  \n  \n returns `_Ostr` << ( `const char *`) `str`.  \n  \n The template function  \n  \n```cpp\ntemplate <class _Tr>\nbasic_ostream<char, _Tr>& operator<<(\n    basic_ostream<char, _Tr>& _Ostr,\n    signed char _Ch);\n```  \n  \n returns `_Ostr` << ( `char`) `_Ch`.  \n  \n The template function:  \n  \n```cpp\ntemplate <class _Tr>\nbasic_ostream<char, _Tr>& operator<<(\n    basic_ostream<char, _Tr>& _Ostr,\n    const unsigned char *str);\n```  \n  \n returns `_Ostr` << ( `const char *`) `str`.  \n  \n The template function:  \n  \n```cpp\ntemplate <class _Tr>\nbasic_ostream<char, _Tr>& operator<<(\n    basic_ostream<char, _Tr>& _Ostr,\n    unsigned char _Ch);\n```  \n  \n returns `_Ostr` << ( `char`) `_Ch`.  \n  \n The template function:  \n  \n```cpp\ntemplate <class _Elem, class _Tr, class T>\nbasic_ostream<_Elem, _Tr>& operator<<(\n    basic_ostream<char, _Tr>&& _Ostr,\n    T val);\n```  \n  \n returns `_Ostr` `<<` `val` (and converts a [RValue Reference](../cpp/rvalue-reference-declarator-amp-amp.md) to `_Ostr` to an lvalue in the process).  \n  \n### Example  \n  See [flush](../standard-library/ostream-functions.md#flush) for an example using `operator<<`.  \n  \n## See Also  \n [\\<ostream>](../standard-library/ostream.md)\n\n\n\n"}