<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2af028fed0eb7e520bebe41bad8bc0cfbc24433c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\data\oledb\supporting-schema-rowsets.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6999885b21bd75698919e6e8b87f6b3b8aea1bd1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8efd9fd1bd75496ad5ab13625cdb4aa6d70ecb18</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Supporting Schema Rowsets | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Supporting Schema Rowsets</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Schema rowsets allow consumers to obtain information about a data store without knowing its underlying structure, or schema.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, a data store might have tables organized into a user-defined hierarchy, so there would be no way to ensure knowledge of the schema except by reading it.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>(As another example, note that the Visual C++ wizards use schema rowsets to generate accessors for the consumer.) To allow the consumer to do this, the provider's session object exposes methods on the <bpt id="p1">[</bpt>IDBSchemaRowset<ept id="p1">](https://msdn.microsoft.com/en-us/library/ms713686.aspx)</ept> interface.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In Visual C++ applications, you use the <bpt id="p1">[</bpt>IDBSchemaRowsetImpl<ept id="p1">](../../data/oledb/idbschemarowsetimpl-class.md)</ept> class to implement <bpt id="p2">**</bpt>IDBSchemaRowset<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>supports the following methods:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CheckRestrictions<ept id="p1">](../../data/oledb/idbschemarowsetimpl-checkrestrictions.md)</ept> checks the validity of restrictions against a schema rowset.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CreateSchemaRowset<ept id="p1">](../../data/oledb/idbschemarowsetimpl-createschemarowset.md)</ept> implements a COM object creator function for the object specified by the template parameter.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SetRestrictions<ept id="p1">](../../data/oledb/idbschemarowsetimpl-setrestrictions.md)</ept> specifies which restrictions you support on a particular schema rowset.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IDBSchemaRowset::GetRowset<ept id="p1">](../../data/oledb/idbschemarowsetimpl-getrowset.md)</ept> returns a schema rowset (inherited from interface).</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GetSchemas<ept id="p1">](../../data/oledb/idbschemarowsetimpl-getschemas.md)</ept> returns a list of schema rowsets accessible by <ph id="ph1">`IDBSchemaRowsetImpl::GetRowset`</ph> (inherited from interface).</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>ATL OLE DB Provider Wizard Support</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The ATL OLE DB Provider Wizard creates three schema classes in the session header file:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>C<ept id="p1">**</ept> <bpt id="p2">*</bpt>ShortName<ept id="p2">*</ept> <bpt id="p3">**</bpt>SessionTRSchemaRowset<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>C<ept id="p1">**</ept> <bpt id="p2">*</bpt>ShortName<ept id="p2">*</ept> <bpt id="p3">**</bpt>SessionColSchemaRowset<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>C<ept id="p1">**</ept> <bpt id="p2">*</bpt>ShortName<ept id="p2">*</ept> <bpt id="p3">**</bpt>SessionPTSchemaRowset<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>These classes respond to consumer requests for schema information; note that the OLE DB specification requires that these three schema rowsets be supported:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>C<ept id="p1">**</ept> <bpt id="p2">*</bpt>ShortName<ept id="p2">*</ept> <bpt id="p3">**</bpt>SessionTRSchemaRowset<ept id="p3">**</ept> handles requests for table information (the <ph id="ph1">`DBSCHEMA_TABLES`</ph> schema rowset).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>C<ept id="p1">**</ept> <bpt id="p2">*</bpt>ShortName<ept id="p2">*</ept> <bpt id="p3">**</bpt>SessionColSchemaRowset<ept id="p3">**</ept> handles requests for column information (the <bpt id="p4">**</bpt>DBSCHEMA_COLUMNS<ept id="p4">**</ept> schema rowset).</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The wizard supplies sample implementations for these classes, which return schema information for a DOS provider.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>C<ept id="p1">**</ept> <bpt id="p2">*</bpt>ShortName<ept id="p2">*</ept> <bpt id="p3">**</bpt>SessionPTSchemaRowset<ept id="p3">**</ept> handles requests for schema information about the provider type (the <bpt id="p4">**</bpt>DBSCHEMA_PROVIDER_TYPES<ept id="p4">**</ept> schema rowset).</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The default implementation provided by the wizard returns <ph id="ph1">`S_OK`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can customize these classes to handle schema information appropriate to your provider:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>C<ept id="p1">**</ept><bpt id="p2">*</bpt>ShortName<ept id="p2">*</ept><bpt id="p3">**</bpt>SessionTRSchemaRowset<ept id="p3">**</ept>, you must fill out the catalog, table, and description fields (<bpt id="p4">**</bpt>trData.m_szType<ept id="p4">**</ept>, <bpt id="p5">**</bpt>trData.m_szTable<ept id="p5">**</ept>, and <bpt id="p6">**</bpt>trData.m_szDesc<ept id="p6">**</ept>).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The wizard-generated example uses only one row (table).</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Other providers might return more than one table.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>C<ept id="p1">**</ept><bpt id="p2">*</bpt>ShortName<ept id="p2">*</ept><bpt id="p3">**</bpt>SessionColSchemaRowset<ept id="p3">**</ept>, you pass the name of the table as a <bpt id="p4">**</bpt>DBID<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Setting Restrictions</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>An important concept in schema rowset support is setting restrictions, which you do using <ph id="ph1">`SetRestrictions`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Restrictions allow consumers to fetch only matching rows (for example, find all the columns in the table "MyTable").</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Restrictions are optional, and in the case in which none are supported (the default), all data is always returned.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For an example of a provider that does support restrictions, see the <bpt id="p1">[</bpt>UpdatePV<ept id="p1">](http://msdn.microsoft.com/en-us/c8bed873-223c-4a7d-af55-f90138c6f38f)</ept> sample.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Setting up the Schema Map</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Set up a schema map such as this one in Session.h in UpdatePV:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To support <bpt id="p1">**</bpt>IDBSchemaRowset<ept id="p1">**</ept>, you must support <ph id="ph1">`DBSCHEMA_TABLES`</ph>, <bpt id="p2">**</bpt>DBSCHEMA_COLUMNS<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>DBSCHEMA_PROVIDER_TYPES<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can add additional schema rowsets at your discretion.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Declare a schema rowset class with an <ph id="ph1">`Execute`</ph> method such as <ph id="ph2">`CUpdateSessionTRSchemaRowset`</ph> in UpdatePV:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">`CUpdateSession`</ph> inherits from <ph id="ph2">`IDBSchemaRowsetImpl`</ph>, so it has all the restriction handling methods.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`CSchemaRowsetImpl`</ph>, declare three child classes (listed in the schema map above): <ph id="ph2">`CUpdateSessionTRSchemaRowset`</ph>, <ph id="ph3">`CUpdateSessionColSchemaRowset`</ph>, and <ph id="ph4">`CUpdateSessionPTSchemaRowset`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Each of these child classes has an <ph id="ph1">`Execute`</ph> method that handles its respective set of restrictions (search criteria).</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`Execute`</ph> method compares the values of the <ph id="ph2">`cRestrictions`</ph> and <ph id="ph3">`rgRestrictions`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>See the description of these parameters in <bpt id="p1">[</bpt>SetRestrictions<ept id="p1">](../../data/oledb/idbschemarowsetimpl-setrestrictions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For more information about which restrictions correspond to a particular schema rowset, consult the table of schema rowset GUIDs in <bpt id="p1">[</bpt>IDBSchemaRowset<ept id="p1">](https://msdn.microsoft.com/en-us/library/ms713686.aspx)</ept> in the <bpt id="p2">*</bpt>OLE DB Programmer's Reference<ept id="p2">*</ept> in the <ph id="ph1">[!INCLUDE[winsdkshort](../../atl-mfc-shared/reference/includes/winsdkshort_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For example, if you supported the <bpt id="p1">**</bpt>TABLE_NAME<ept id="p1">**</ept> restriction on <ph id="ph1">`DBSCHEMA_TABLES`</ph>, you would do the following:</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>First, look up <ph id="ph1">`DBSCHEMA_TABLES`</ph> and see that it supports four restrictions (in order).</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Schema rowset restriction</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Restriction value</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>TABLE_CATALOG</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>0x1 (binary 1)</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>TABLE_SCHEMA</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>0x2 (binary 10)</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>TABLE_NAME</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>0x4 (binary 100)</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>TABLE_TYPE</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>0x8 (binary 1000)</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Next, note that there is one bit for each restriction.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Because you want to support <bpt id="p1">**</bpt>TABLE_NAME<ept id="p1">**</ept> only, you would return 0x4 in the <ph id="ph1">`rgRestrictions`</ph> element.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If you supported <bpt id="p1">**</bpt>TABLE_CATALOG<ept id="p1">**</ept> and <bpt id="p2">**</bpt>TABLE_NAME<ept id="p2">**</ept>, you would return 0x5 (binary 101).</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>By default, the implementation returns 0 (does not support any restrictions) for any request.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>UpdatePV is an example of a provider that does support restrictions.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This code is taken from the <bpt id="p1">[</bpt>UpdatePV<ept id="p1">](http://msdn.microsoft.com/en-us/c8bed873-223c-4a7d-af55-f90138c6f38f)</ept> sample.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>UpdatePv supports the three required schema rowsets: <ph id="ph1">`DBSCHEMA_TABLES`</ph>, <bpt id="p1">**</bpt>DBSCHEMA_COLUMNS<ept id="p1">**</ept>, and <bpt id="p2">**</bpt>DBSCHEMA_PROVIDER_TYPES<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>As an example of how to implement schema support in your provider, this topic takes you through implementing the <bpt id="p1">**</bpt>DBSCHEMA_TABLE<ept id="p1">**</ept> rowset.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The sample code might differ from what is listed here; you should regard the sample code as the more up-to-date version.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The first step in adding schema support is to determine which restrictions you are going to support.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>To determine which restrictions are available for your schema rowset, look at the OLE DB specification for the definition of <bpt id="p1">**</bpt>IDBSchemaRowset<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Following the main definition, you see a table containing the schema rowset name, the number of restrictions, and the restriction columns.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Select the schema rowset you want to support and make a note of the number of restrictions and restriction columns.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`DBSCHEMA_TABLES`</ph> supports four restrictions (<bpt id="p1">**</bpt>TABLE_CATALOG<ept id="p1">**</ept>, <bpt id="p2">**</bpt>TABLE_SCHEMA<ept id="p2">**</ept>, <bpt id="p3">**</bpt>TABLE_NAME<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>TABLE_TYPE<ept id="p4">**</ept>):</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A bit represents each restriction column.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If you want to support a restriction (that is, you can query by it), set that bit to a 1.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If you do not want to support a restriction, set that bit to zero.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>From the line of code above, UpdatePV supports the <bpt id="p1">**</bpt>TABLE_NAME<ept id="p1">**</ept> and <bpt id="p2">**</bpt>TABLE_TYPE<ept id="p2">**</ept> restrictions on the <ph id="ph1">`DBSCHEMA_TABLES`</ph> rowset.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>These are the third (bit mask 100) and fourth (bit mask 1000) restrictions.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Therefore, the bitmask for UpdatePv is 1100 (or 0x0C):</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The following <ph id="ph1">`Execute`</ph> function is similar to those in regular rowsets.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You have three arguments: <ph id="ph1">`pcRowsAffected`</ph>, <ph id="ph2">`cRestrictions`</ph>, and <ph id="ph3">`rgRestrictions`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`pcRowsAffected`</ph> variable is an output parameter that the provider can return the count of rows in the schema rowset.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`cRestrictions`</ph> parameter is an input parameter containing the number of restrictions passed by the consumer to the provider.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`rgRestrictions`</ph> parameter is an array of <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> values that contain the restriction values.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`cRestrictions`</ph> variable is based on the total number of restrictions for a schema rowset, regardless of whether the provider supports them.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Because UpdatePv supports two restrictions (the third and fourth), this code only looks for a <ph id="ph1">`cRestrictions`</ph> value greater than or equal to three.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The value for the <bpt id="p1">**</bpt>TABLE_NAME<ept id="p1">**</ept> restriction is stored in <ph id="ph1">`rgRestrictions[2]`</ph> (again, the third restriction in a zero-based array is 2).</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>You need to check that the restriction is not <ph id="ph1">`VT_EMPTY`</ph> to actually support it.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Note that <bpt id="p1">**</bpt>VT_NULL<ept id="p1">**</ept> is not equal to <ph id="ph1">`VT_EMPTY`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_NULL<ept id="p1">**</ept> specifies a valid restriction value.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The UpdatePv definition of a table name is a fully qualified path name to a text file.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Extract the restriction value and then attempt to open the file to ensure that the file does actually exist.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If the file does not exist, return <ph id="ph1">`S_OK`</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This might seem a bit backwards but what the code is really telling the consumer is that there were no supported tables by the name specified.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`S_OK`</ph> return means that the code executed correctly.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Supporting the fourth restriction (<bpt id="p1">**</bpt>TABLE_TYPE<ept id="p1">**</ept>) is similar to the third restriction.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Check to see that the value is not <ph id="ph1">`VT_EMPTY`</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This restriction only returns the table type, <bpt id="p1">**</bpt>TABLE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To determine the valid values for the <ph id="ph1">`DBSCHEMA_TABLES`</ph>, look in Appendix B of the <bpt id="p1">*</bpt>OLE DB Programmer's Reference<ept id="p1">*</ept> in the <bpt id="p2">**</bpt>TABLES<ept id="p2">**</ept> rowset section.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>This is where you actually create a row entry for the rowset.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The variable <ph id="ph1">`trData`</ph> corresponds to <bpt id="p1">**</bpt>CTABLESRow<ept id="p1">**</ept>, a structure defined in the OLE DB provider templates.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CTABLESRow<ept id="p1">**</ept> corresponds to the <bpt id="p2">**</bpt>TABLES<ept id="p2">**</ept> rowset definition in Appendix B of the OLE DB specification.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You only have one row to add because you can only support one table at a time.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>UpdatePV sets only three columns: <bpt id="p1">**</bpt>TABLE_NAME<ept id="p1">**</ept>, <bpt id="p2">**</bpt>TABLE_TYPE<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>DESCRIPTION<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>You should make a note of the columns for which you return information, because you need this information when you implement <ph id="ph1">`GetDBStatus`</ph>:</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GetDBStatus`</ph> function is very important to the correct operation of the schema rowset.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Because you do not return data for every column in the <bpt id="p1">**</bpt>TABLES<ept id="p1">**</ept> rowset, you need to specify which columns you return data for and which you do not.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Because your <ph id="ph1">`Execute`</ph> function returns data for the <bpt id="p1">**</bpt>TABLE_NAME<ept id="p1">**</ept>, <bpt id="p2">**</bpt>TABLE_TYPE<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>DESCRIPTION<ept id="p3">**</ept> fields from the <bpt id="p4">**</bpt>TABLES<ept id="p4">**</ept> rowset, you can look in Appendix B of the OLE DB specification and determine (by counting from the top down) that they are ordinals 3, 4, and 6.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For each of those columns, return <bpt id="p1">**</bpt>DBSTATUS_S_OK<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>For all the other columns, return <bpt id="p1">**</bpt>DBSTATUS_S_ISNULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>It is important to return this status, because a consumer might not understand that the value you return is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> or something else.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Again, note that <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> is not equivalent to empty.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For more information about the OLE DB schema rowset interface, see the <bpt id="p1">[</bpt>IDBSchemaRowset<ept id="p1">](../../data/oledb/idbschemarowsetimpl-class.md)</ept> interface in the OLE DB Programmer's Reference.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>For information about how consumers can use <bpt id="p1">**</bpt>IDBSchemaRowset<ept id="p1">**</ept> methods, see <bpt id="p2">[</bpt>Obtaining Metadata with Schema Rowsets<ept id="p2">](../../data/oledb/obtaining-metadata-with-schema-rowsets.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>For an example of an provider that supports schema rowsets, see the <bpt id="p1">[</bpt>UpdatePV<ept id="p1">](http://msdn.microsoft.com/en-us/c8bed873-223c-4a7d-af55-f90138c6f38f)</ept> sample.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Advanced Provider Techniques</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>