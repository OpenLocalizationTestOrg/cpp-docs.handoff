{"nodes":[{"pos":[12,53],"content":"unordered_multimap Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"unordered_multimap Class | Microsoft Docs","pos":[0,41]}]},{"content":"unordered_multimap Class","pos":[839,863]},{"content":"The template class describes an object that controls a varying-length sequence of elements of type <ph id=\"ph1\">`std::pair&lt;const Key, Ty&gt;`</ph>.","pos":[864,990],"source":"The template class describes an object that controls a varying-length sequence of elements of type `std::pair<const Key, Ty>`."},{"content":"The sequence is weakly ordered by a hash function, which partitions the sequence into an ordered set of subsequences called buckets.","pos":[991,1123]},{"content":"Within each bucket a comparison function determines whether any pair of elements has equivalent ordering.","pos":[1124,1229]},{"content":"Each element stores two objects, a sort key and a value.","pos":[1230,1286]},{"content":"The sequence is represented in a way that permits lookup, insertion, and removal of an arbitrary element with a number of operations that can be independent of the number of elements in the sequence (constant time), at least when all buckets are of roughly equal length.","pos":[1287,1557]},{"content":"In the worst case, when all of the elements are in one bucket, the number of operations is proportional to the number of elements in the sequence (linear time).","pos":[1558,1718]},{"content":"Moreover, inserting an element invalidates no iterators, and removing an element invalidates only those iterators which point at the removed element.","pos":[1719,1868]},{"content":"Syntax","pos":[1877,1883]},{"content":"Parameters","pos":[2091,2101]},{"content":"Parameter","pos":[2122,2131]},{"content":"Description","pos":[2132,2143]},{"content":"The key type.","pos":[2154,2167]},{"content":"The mapped type.","pos":[2177,2193]},{"content":"The hash function object type.","pos":[2205,2235]},{"content":"The equality comparison function object type.","pos":[2247,2292]},{"content":"The allocator class.","pos":[2305,2325]},{"content":"Members","pos":[2335,2342]},{"content":"Type Definition","pos":[2363,2378]},{"content":"Description","pos":[2379,2390]},{"content":"unordered_multimap::allocator_type","pos":[2396,2430]},{"content":"The type of an allocator for managing storage.","pos":[2469,2515]},{"content":"unordered_multimap::const_iterator","pos":[2521,2555]},{"content":"The type of a constant iterator for the controlled sequence.","pos":[2594,2654]},{"content":"unordered_multimap::const_local_iterator","pos":[2660,2700]},{"content":"The type of a constant bucket iterator for the controlled sequence.","pos":[2745,2812]},{"content":"unordered_multimap::const_pointer","pos":[2818,2851]},{"content":"The type of a constant pointer to an element.","pos":[2889,2934]},{"content":"unordered_multimap::const_reference","pos":[2940,2975]},{"content":"The type of a constant reference to an element.","pos":[3015,3062]},{"content":"unordered_multimap::difference_type","pos":[3068,3103]},{"content":"The type of a signed distance between two elements.","pos":[3143,3194]},{"content":"unordered_multimap::hasher","pos":[3200,3226]},{"content":"The type of the hash function.","pos":[3257,3287]},{"content":"unordered_multimap::iterator","pos":[3293,3321]},{"content":"The type of an iterator for the controlled sequence.","pos":[3354,3406]},{"content":"unordered_multimap::key_equal","pos":[3412,3441]},{"content":"The type of the comparison function.","pos":[3475,3511]},{"content":"unordered_multimap::key_type","pos":[3517,3545]},{"content":"The type of an ordering key.","pos":[3578,3606]},{"content":"unordered_multimap::local_iterator","pos":[3612,3646]},{"content":"The type of a bucket iterator for the controlled sequence.","pos":[3685,3743]},{"content":"unordered_multimap::mapped_type","pos":[3749,3780]},{"content":"The type of a mapped value associated with each key.","pos":[3816,3868]},{"content":"unordered_multimap::pointer","pos":[3874,3901]},{"content":"The type of a pointer to an element.","pos":[3933,3969]},{"content":"unordered_multimap::reference","pos":[3975,4004]},{"content":"The type of a reference to an element.","pos":[4038,4076]},{"content":"unordered_multimap::size_type","pos":[4082,4111]},{"content":"The type of an unsigned distance between two elements.","pos":[4145,4199]},{"content":"unordered_multimap::value_type","pos":[4205,4235]},{"content":"The type of an element.","pos":[4270,4293]},{"content":"Member Function","pos":[4315,4330]},{"content":"Description","pos":[4331,4342]},{"content":"unordered_multimap::begin","pos":[4348,4373]},{"content":"Designates the beginning of the controlled sequence.","pos":[4403,4455]},{"content":"unordered_multimap::bucket","pos":[4461,4487]},{"content":"Gets the bucket number for a key value.","pos":[4518,4557]},{"content":"unordered_multimap::bucket_count","pos":[4563,4595]},{"content":"Gets the number of buckets.","pos":[4632,4659]},{"content":"unordered_multimap::bucket_size","pos":[4665,4696]},{"content":"Gets the size of a bucket.","pos":[4732,4758]},{"content":"unordered_multimap::cbegin","pos":[4764,4790]},{"content":"Designates the beginning of the controlled sequence.","pos":[4821,4873]},{"content":"unordered_multimap::cend","pos":[4879,4903]},{"content":"Designates the end of the controlled sequence.","pos":[4932,4978]},{"content":"unordered_multimap::clear","pos":[4984,5009]},{"content":"Removes all elements.","pos":[5039,5060]},{"content":"unordered_multimap::count","pos":[5066,5091]},{"content":"Finds the number of elements matching a specified key.","pos":[5121,5175]},{"content":"unordered_multimap::emplace","pos":[5181,5208]},{"content":"Adds an element constructed in place.","pos":[5240,5277]},{"content":"unordered_multimap::emplace_hint","pos":[5283,5315]},{"content":"Adds an element constructed in place, with hint.","pos":[5352,5400]},{"content":"unordered_multimap::empty","pos":[5406,5431]},{"content":"Tests whether no elements are present.","pos":[5461,5499]},{"content":"unordered_multimap::end","pos":[5505,5528]},{"content":"Designates the end of the controlled sequence.","pos":[5556,5602]},{"content":"unordered_multimap::equal_range","pos":[5608,5639]},{"content":"Finds range that matches a specified key.","pos":[5675,5716]},{"content":"unordered_multimap::erase","pos":[5722,5747]},{"content":"Removes elements at specified positions.","pos":[5777,5817]},{"content":"unordered_multimap::find","pos":[5823,5847]},{"content":"Finds an element that matches a specified key.","pos":[5876,5922]},{"content":"unordered_multimap::get_allocator","pos":[5928,5961]},{"content":"Gets the stored allocator object.","pos":[5999,6032]},{"content":"unordered_multimap::hash_function","pos":[6038,6071]},{"content":"Gets the stored hash function object.","pos":[6109,6146]},{"content":"unordered_multimap::insert","pos":[6152,6178]},{"content":"Adds elements.","pos":[6209,6223]},{"content":"unordered_multimap::key_eq","pos":[6229,6255]},{"content":"Gets the stored comparison function object.","pos":[6286,6329]},{"content":"unordered_multimap::load_factor","pos":[6335,6366]},{"content":"Counts the average elements per bucket.","pos":[6402,6441]},{"content":"unordered_multimap::max_bucket_count","pos":[6447,6483]},{"content":"Gets the maximum number of buckets.","pos":[6524,6559]},{"content":"unordered_multimap::max_load_factor","pos":[6565,6600]},{"content":"Gets or sets the maximum elements per bucket.","pos":[6640,6685]},{"content":"unordered_multimap::max_size","pos":[6691,6719]},{"content":"Gets the maximum size of the controlled sequence.","pos":[6752,6801]},{"content":"unordered_multimap::rehash","pos":[6807,6833]},{"content":"Rebuilds the hash table.","pos":[6864,6888]},{"content":"unordered_multimap::size","pos":[6894,6918]},{"content":"Counts the number of elements.","pos":[6947,6977]},{"content":"unordered_multimap::swap","pos":[6983,7007]},{"content":"Swaps the contents of two containers.","pos":[7036,7073]},{"content":"unordered_multimap::unordered_multimap","pos":[7079,7117]},{"content":"Constructs a container object.","pos":[7160,7190]},{"content":"Operator","pos":[7212,7220]},{"content":"Description","pos":[7221,7232]},{"content":"unordered_multimap::operator=","pos":[7238,7267]},{"content":"Copies a hash table.","pos":[7303,7323]},{"content":"Remarks","pos":[7333,7340]},{"content":"The object orders the sequence it controls by calling two stored objects, a comparison function object of type <bpt id=\"p1\">[</bpt>unordered_multimap::key_equal<ept id=\"p1\">](#unordered_multimap__key_equal)</ept> and a hash function object of type <bpt id=\"p2\">[</bpt>unordered_multimap::hasher<ept id=\"p2\">](#unordered_multimap__hasher)</ept>.","pos":[7344,7612],"source":"The object orders the sequence it controls by calling two stored objects, a comparison function object of type [unordered_multimap::key_equal](#unordered_multimap__key_equal) and a hash function object of type [unordered_multimap::hasher](#unordered_multimap__hasher)."},{"content":"You access the first stored object by calling the member function <bpt id=\"p1\">[</bpt>unordered_multimap::key_eq<ept id=\"p1\">](#unordered_multimap__key_eq)</ept><ph id=\"ph1\">`()`</ph>; and you access the second stored object by calling the member function <bpt id=\"p2\">[</bpt>unordered_multimap::hash_function<ept id=\"p2\">](#unordered_multimap__hash_function)</ept><ph id=\"ph2\">`()`</ph>.","pos":[7613,7889],"source":" You access the first stored object by calling the member function [unordered_multimap::key_eq](#unordered_multimap__key_eq)`()`; and you access the second stored object by calling the member function [unordered_multimap::hash_function](#unordered_multimap__hash_function)`()`."},{"content":"Specifically, for all values <ph id=\"ph1\">`X`</ph> and <ph id=\"ph2\">`Y`</ph> of type <ph id=\"ph3\">`Key`</ph>, the call <ph id=\"ph4\">`key_eq()(X, Y)`</ph> returns true only if the two argument values have equivalent ordering; the call <ph id=\"ph5\">`hash_function()(keyval)`</ph> yields a distribution of values of type <ph id=\"ph6\">`size_t`</ph>.","pos":[7890,8127],"source":" Specifically, for all values `X` and `Y` of type `Key`, the call `key_eq()(X, Y)` returns true only if the two argument values have equivalent ordering; the call `hash_function()(keyval)` yields a distribution of values of type `size_t`."},{"content":"Unlike template class <bpt id=\"p1\">[</bpt>unordered_map Class<ept id=\"p1\">](../standard-library/unordered-map-class.md)</ept>, an object of template class <ph id=\"ph1\">`unordered_multimap`</ph> does not ensure that <ph id=\"ph2\">`key_eq()(X, Y)`</ph> is always false for any two elements of the controlled sequence.","pos":[8128,8368],"source":" Unlike template class [unordered_map Class](../standard-library/unordered-map-class.md), an object of template class `unordered_multimap` does not ensure that `key_eq()(X, Y)` is always false for any two elements of the controlled sequence."},{"content":"(Keys need not be unique.)","pos":[8369,8395]},{"content":"The object also stores a maximum load factor, which specifies the maximum desired average number of elements per bucket.","pos":[8402,8522]},{"content":"If inserting an element causes <bpt id=\"p1\">[</bpt>unordered_multimap::load_factor<ept id=\"p1\">](#unordered_multimap__load_factor)</ept><ph id=\"ph1\">`()`</ph> to exceed the maximum load factor, the container increases the number of buckets and rebuilds the hash table as needed.","pos":[8523,8745],"source":" If inserting an element causes [unordered_multimap::load_factor](#unordered_multimap__load_factor)`()` to exceed the maximum load factor, the container increases the number of buckets and rebuilds the hash table as needed."},{"content":"The actual order of elements in the controlled sequence depends on the hash function, the comparison function, the order of insertion, the maximum load factor, and the current number of buckets.","pos":[8752,8946]},{"content":"You cannot in general predict the order of elements in the controlled sequence.","pos":[8947,9026]},{"content":"You can always be assured, however, that any subset of elements that have equivalent ordering are adjacent in the controlled sequence.","pos":[9027,9161]},{"content":"The object allocates and frees storage for the sequence it controls through a stored allocator object of type <bpt id=\"p1\">[</bpt>unordered_multimap::allocator_type<ept id=\"p1\">](#unordered_multimap__allocator_type)</ept>.","pos":[9168,9352],"source":"The object allocates and frees storage for the sequence it controls through a stored allocator object of type [unordered_multimap::allocator_type](#unordered_multimap__allocator_type)."},{"content":"Such an allocator object must have the same external interface as an object of template class <ph id=\"ph1\">`allocator`</ph>.","pos":[9353,9459],"source":" Such an allocator object must have the same external interface as an object of template class `allocator`."},{"content":"Note that the stored allocator object is not copied when the container object is assigned.","pos":[9460,9550]},{"content":"Requirements","pos":[9559,9571]},{"pos":[9575,9602],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> &lt;unordered_map&gt;","source":"**Header:** <unordered_map>"},{"pos":[9609,9627],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[9688,9722],"content":"unordered_multimap::allocator_type"},{"content":"The type of an allocator for managing storage.","pos":[9726,9772]},{"content":"Remarks","pos":[9829,9836]},{"pos":[9840,9897],"content":"The type is a synonym for the template parameter <ph id=\"ph1\">`Alloc`</ph>.","source":"The type is a synonym for the template parameter `Alloc`."},{"content":"Example","pos":[9907,9914]},{"pos":[10546,10571],"content":"unordered_multimap::begin"},{"content":"Designates the beginning of the controlled sequence or a bucket.","pos":[10575,10639]},{"content":"Parameters","pos":[10811,10821]},{"content":"Parameter","pos":[10842,10851]},{"content":"Description","pos":[10852,10863]},{"content":"The bucket number.","pos":[10878,10896]},{"content":"Remarks","pos":[10907,10914]},{"content":"The first two member functions return a forward iterator that points at the first element of the sequence (or just beyond the end of an empty sequence).","pos":[10918,11070]},{"content":"The last two member functions return a forward iterator that points at the first element of bucket <ph id=\"ph1\">`nbucket`</ph> (or just beyond the end of an empty bucket).","pos":[11071,11224],"source":" The last two member functions return a forward iterator that points at the first element of bucket `nbucket` (or just beyond the end of an empty bucket)."},{"content":"Example","pos":[11234,11241]},{"pos":[12468,12494],"content":"unordered_multimap::bucket"},{"content":"Gets the bucket number for a key value.","pos":[12498,12537]},{"content":"Parameters","pos":[12605,12615]},{"content":"The key value to map.","pos":[12631,12652]},{"content":"Remarks","pos":[12662,12669]},{"pos":[12673,12769],"content":"The member function returns the bucket number currently corresponding to the key value <ph id=\"ph1\">`keyval`</ph>.","source":"The member function returns the bucket number currently corresponding to the key value `keyval`."},{"content":"Example","pos":[12779,12786]},{"pos":[13823,13855],"content":"unordered_multimap::bucket_count"},{"content":"Gets the number of buckets.","pos":[13859,13886]},{"content":"Remarks","pos":[13943,13950]},{"content":"The member function returns the current number of buckets.","pos":[13954,14012]},{"content":"Example","pos":[14022,14029]},{"pos":[16385,16416],"content":"unordered_multimap::bucket_size"},{"content":"Gets the size of a bucket","pos":[16420,16445]},{"content":"Parameters","pos":[16518,16528]},{"content":"The bucket number.","pos":[16545,16563]},{"content":"Remarks","pos":[16573,16580]},{"pos":[16584,16649],"content":"The member functions returns the size of bucket number <ph id=\"ph1\">`nbucket`</ph>.","source":"The member functions returns the size of bucket number `nbucket`."},{"content":"Example","pos":[16659,16666]},{"pos":[17702,17728],"content":"unordered_multimap::cbegin"},{"pos":[17732,17805],"content":"Returns a <ph id=\"ph1\">`const`</ph> iterator that addresses the first element in the range.","source":"Returns a `const` iterator that addresses the first element in the range."},{"content":"Return Value","pos":[17861,17873]},{"pos":[17877,18055],"content":"A <ph id=\"ph1\">`const`</ph> forward-access iterator that points at the first element of the range, or the location just beyond the end of an empty range (for an empty range, <ph id=\"ph2\">`cbegin() == cend()`</ph>).","source":"A `const` forward-access iterator that points at the first element of the range, or the location just beyond the end of an empty range (for an empty range, `cbegin() == cend()`)."},{"content":"Remarks","pos":[18065,18072]},{"pos":[18076,18156],"content":"With the return value of <ph id=\"ph1\">`cbegin`</ph>, the elements in the range cannot be modified.","source":"With the return value of `cbegin`, the elements in the range cannot be modified."},{"content":"You can use this member function in place of the <ph id=\"ph1\">`begin()`</ph> member function to guarantee that the return value is <ph id=\"ph2\">`const_iterator`</ph>.","pos":[18163,18293],"source":"You can use this member function in place of the `begin()` member function to guarantee that the return value is `const_iterator`."},{"content":"Typically, it's used in conjunction with the <bpt id=\"p1\">[</bpt>auto<ept id=\"p1\">](../cpp/auto-cpp.md)</ept> type deduction keyword, as shown in the following example.","pos":[18294,18424],"source":" Typically, it's used in conjunction with the [auto](../cpp/auto-cpp.md) type deduction keyword, as shown in the following example."},{"content":"In the example, consider <ph id=\"ph1\">`Container`</ph> to be a modifiable (non- <ph id=\"ph2\">`const`</ph>) container of any kind that supports <ph id=\"ph3\">`begin()`</ph> and <ph id=\"ph4\">`cbegin()`</ph>.","pos":[18425,18557],"source":" In the example, consider `Container` to be a modifiable (non- `const`) container of any kind that supports `begin()` and `cbegin()`."},{"pos":[18763,18787],"content":"unordered_multimap::cend"},{"pos":[18791,18886],"content":"Returns a <ph id=\"ph1\">`const`</ph> iterator that addresses the location just beyond the last element in a range.","source":"Returns a `const` iterator that addresses the location just beyond the last element in a range."},{"content":"Return Value","pos":[18940,18952]},{"pos":[18956,19035],"content":"A <ph id=\"ph1\">`const`</ph> forward-access iterator that points just beyond the end of the range.","source":"A `const` forward-access iterator that points just beyond the end of the range."},{"content":"Remarks","pos":[19045,19052]},{"pos":[19063,19131],"content":"is used to test whether an iterator has passed the end of its range."},{"content":"You can use this member function in place of the <ph id=\"ph1\">`end()`</ph> member function to guarantee that the return value is <ph id=\"ph2\">`const_iterator`</ph>.","pos":[19138,19266],"source":"You can use this member function in place of the `end()` member function to guarantee that the return value is `const_iterator`."},{"content":"Typically, it's used in conjunction with the <bpt id=\"p1\">[</bpt>auto<ept id=\"p1\">](../cpp/auto-cpp.md)</ept> type deduction keyword, as shown in the following example.","pos":[19267,19397],"source":" Typically, it's used in conjunction with the [auto](../cpp/auto-cpp.md) type deduction keyword, as shown in the following example."},{"content":"In the example, consider <ph id=\"ph1\">`Container`</ph> to be a modifiable (non- <ph id=\"ph2\">`const`</ph>) container of any kind that supports <ph id=\"ph3\">`end()`</ph> and <ph id=\"ph4\">`cend()`</ph>.","pos":[19398,19526],"source":" In the example, consider `Container` to be a modifiable (non- `const`) container of any kind that supports `end()` and `cend()`."},{"pos":[19684,19740],"content":"The value returned by <ph id=\"ph1\">`cend`</ph> should not be dereferenced.","source":"The value returned by `cend` should not be dereferenced."},{"pos":[19792,19817],"content":"unordered_multimap::clear"},{"content":"Removes all elements.","pos":[19821,19842]},{"content":"Remarks","pos":[19881,19888]},{"pos":[19892,20095],"content":"The member function calls <bpt id=\"p1\">[</bpt>unordered_multimap::erase<ept id=\"p1\">](#unordered_multimap__erase)</ept><ph id=\"ph1\">`(`</ph> <bpt id=\"p2\">[</bpt>unordered_multimap::begin<ept id=\"p2\">](#unordered_multimap__begin)</ept><ph id=\"ph2\">`(),`</ph> <bpt id=\"p3\">[</bpt>unordered_multimap::end<ept id=\"p3\">](#unordered_multimap__end)</ept><ph id=\"ph3\">`())`</ph>.","source":"The member function calls [unordered_multimap::erase](#unordered_multimap__erase)`(` [unordered_multimap::begin](#unordered_multimap__begin)`(),` [unordered_multimap::end](#unordered_multimap__end)`())`."},{"content":"Example","pos":[20105,20112]},{"pos":[21647,21681],"content":"unordered_multimap::const_iterator"},{"content":"The type of a constant iterator for the controlled sequence.","pos":[21685,21745]},{"content":"Remarks","pos":[21799,21806]},{"content":"The type describes an object that can serve as a constant forward iterator for the controlled sequence.","pos":[21810,21913]},{"content":"It is described here as a synonym for the implementation-defined type <ph id=\"ph1\">`T1`</ph>.","pos":[21914,21989],"source":" It is described here as a synonym for the implementation-defined type `T1`."},{"content":"Example","pos":[21999,22006]},{"pos":[22781,22821],"content":"unordered_multimap::const_local_iterator"},{"content":"The type of a constant bucket iterator for the controlled sequence.","pos":[22825,22892]},{"content":"Remarks","pos":[22952,22959]},{"content":"The type describes an object that can serve as a constant forward iterator for a bucket.","pos":[22963,23051]},{"content":"It is described here as a synonym for the implementation-defined type <ph id=\"ph1\">`T5`</ph>.","pos":[23052,23127],"source":" It is described here as a synonym for the implementation-defined type `T5`."},{"content":"Example","pos":[23137,23144]},{"pos":[24103,24136],"content":"unordered_multimap::const_pointer"},{"content":"The type of a constant pointer to an element.","pos":[24140,24185]},{"content":"Remarks","pos":[24256,24263]},{"content":"The type describes an object that can serve as a constant pointer to an element of the controlled sequence.","pos":[24267,24374]},{"content":"Example","pos":[24384,24391]},{"pos":[25220,25255],"content":"unordered_multimap::const_reference"},{"content":"The type of a constant reference to an element.","pos":[25259,25306]},{"content":"Remarks","pos":[25381,25388]},{"content":"The type describes an object that can serve as a constant reference to an element of the controlled sequence.","pos":[25392,25501]},{"content":"Example","pos":[25511,25518]},{"pos":[26344,26369],"content":"unordered_multimap::count"},{"content":"Finds the number of elements matching a specified key.","pos":[26373,26427]},{"content":"Parameters","pos":[26494,26504]},{"content":"Key value to search for.","pos":[26520,26544]},{"content":"Remarks","pos":[26554,26561]},{"pos":[26565,26720],"content":"The member function returns the number of elements in the range delimited by <bpt id=\"p1\">[</bpt>unordered_multimap::equal_range<ept id=\"p1\">](#unordered_multimap__equal_range)</ept><ph id=\"ph1\">`(keyval)`</ph>.","source":"The member function returns the number of elements in the range delimited by [unordered_multimap::equal_range](#unordered_multimap__equal_range)`(keyval)`."},{"content":"Example","pos":[26730,26737]},{"pos":[27760,27795],"content":"unordered_multimap::difference_type"},{"content":"The type of a signed distance between two elements.","pos":[27799,27850]},{"content":"Remarks","pos":[27905,27912]},{"content":"The signed integer type describes an object that can represent the difference between the addresses of any two elements in the controlled sequence.","pos":[27916,28063]},{"content":"It is described here as a synonym for the implementation-defined type <ph id=\"ph1\">`T3`</ph>.","pos":[28064,28139],"source":" It is described here as a synonym for the implementation-defined type `T3`."},{"content":"Example","pos":[28149,28156]},{"pos":[29424,29451],"content":"unordered_multimap::emplace"},{"content":"Inserts an element constructed in place (no copy or move operations are performed), with a placement hint.","pos":[29455,29561]},{"content":"Parameters","pos":[29647,29657]},{"content":"Parameter","pos":[29678,29687]},{"content":"Description","pos":[29688,29699]},{"content":"The arguments forwarded to construct an element to be inserted into the unordered_multimap.","pos":[29711,29802]},{"content":"Return Value","pos":[29813,29825]},{"content":"An iterator to the newly inserted element.","pos":[29829,29871]},{"content":"Remarks","pos":[29881,29888]},{"content":"No references to container elements are invalidated by this function, but it may invalidate all iterators to the container.","pos":[29892,30015]},{"pos":[30022,30282],"content":"The <bpt id=\"p1\">[</bpt>value_type<ept id=\"p1\">](../standard-library/map-class.md#map__value_type)</ept> of an element is a pair, so that the value of an element will be an ordered pair with the first component equal to the key value and the second component equal to the data value of the element.","source":"The [value_type](../standard-library/map-class.md#map__value_type) of an element is a pair, so that the value of an element will be an ordered pair with the first component equal to the key value and the second component equal to the data value of the element."},{"content":"During the insertion, if an exception is thrown but does not occur in the container's hash function, the container is not modified.","pos":[30289,30420]},{"content":"If the exception is thrown in the hash function, the result is undefined.","pos":[30421,30494]},{"pos":[30501,30602],"content":"For a code example, see <bpt id=\"p1\">[</bpt>multimap::emplace<ept id=\"p1\">](../standard-library/multimap-class.md#multimap__emplace)</ept>.","source":"For a code example, see [multimap::emplace](../standard-library/multimap-class.md#multimap__emplace)."},{"pos":[30661,30693],"content":"unordered_multimap::emplace_hint"},{"content":"Inserts an element constructed in place (no copy or move operations are performed), with a placement hint.","pos":[30697,30803]},{"content":"Parameters","pos":[30927,30937]},{"content":"Parameter","pos":[30958,30967]},{"content":"Description","pos":[30968,30979]},{"content":"The arguments forwarded to construct an element to be inserted into the unordered.","pos":[30991,31073]},{"content":"A hint regarding the place to start searching for the correct point of insertion.","pos":[31086,31167]},{"content":"Return Value","pos":[31178,31190]},{"content":"An iterator to the newly inserted element.","pos":[31194,31236]},{"content":"Remarks","pos":[31246,31253]},{"content":"No references to container elements are invalidated by this function, but it may invalidate all iterators to the container.","pos":[31257,31380]},{"content":"During the insertion, if an exception is thrown but does not occur in the container's hash function, the container is not modified.","pos":[31387,31518]},{"content":"If the exception is thrown in the hash function, the result is undefined.","pos":[31519,31592]},{"pos":[31599,31859],"content":"The <bpt id=\"p1\">[</bpt>value_type<ept id=\"p1\">](../standard-library/map-class.md#map__value_type)</ept> of an element is a pair, so that the value of an element will be an ordered pair with the first component equal to the key value and the second component equal to the data value of the element.","source":"The [value_type](../standard-library/map-class.md#map__value_type) of an element is a pair, so that the value of an element will be an ordered pair with the first component equal to the key value and the second component equal to the data value of the element."},{"pos":[31866,31962],"content":"For a code example, see <bpt id=\"p1\">[</bpt>map::emplace_hint<ept id=\"p1\">](../standard-library/map-class.md#map__emplace_hint)</ept>.","source":"For a code example, see [map::emplace_hint](../standard-library/map-class.md#map__emplace_hint)."},{"pos":[32014,32039],"content":"unordered_multimap::empty"},{"content":"Tests whether no elements are present.","pos":[32043,32081]},{"content":"Remarks","pos":[32126,32133]},{"content":"The member function returns true for an empty controlled sequence.","pos":[32137,32203]},{"content":"Example","pos":[32213,32220]},{"pos":[33744,33767],"content":"unordered_multimap::end"},{"content":"Designates the end of the controlled sequence.","pos":[33771,33817]},{"content":"Parameters","pos":[33981,33991]},{"content":"Parameter","pos":[34012,34021]},{"content":"Description","pos":[34022,34033]},{"content":"The bucket number.","pos":[34048,34066]},{"content":"Remarks","pos":[34077,34084]},{"content":"The first two member functions return a forward iterator that points just beyond the end of the sequence.","pos":[34088,34193]},{"content":"The last two member functions return a forward iterator that points just beyond the end of bucket <ph id=\"ph1\">`nbucket`</ph>.","pos":[34194,34302],"source":" The last two member functions return a forward iterator that points just beyond the end of bucket `nbucket`."},{"content":"Example","pos":[34312,34319]},{"pos":[35572,35603],"content":"unordered_multimap::equal_range"},{"content":"Finds range that matches a specified key.","pos":[35607,35648]},{"content":"Parameters","pos":[35828,35838]},{"content":"Key value to search for.","pos":[35854,35878]},{"content":"Remarks","pos":[35888,35895]},{"content":"The member function returns a pair of iterators <ph id=\"ph1\">`X`</ph> such that <ph id=\"ph2\">`[X.first, X.second)`</ph> delimits just those elements of the controlled sequence that have equivalent ordering with <ph id=\"ph3\">`keyval`</ph>.","pos":[35899,36083],"source":"The member function returns a pair of iterators `X` such that `[X.first, X.second)` delimits just those elements of the controlled sequence that have equivalent ordering with `keyval`."},{"content":"If no such elements exist, both iterators are <ph id=\"ph1\">`end()`</ph>.","pos":[36084,36138],"source":" If no such elements exist, both iterators are `end()`."},{"content":"Example","pos":[36148,36155]},{"pos":[37645,37670],"content":"unordered_multimap::erase"},{"content":"Removes an element or a range of elements in a unordered_multimap from specified positions or removes elements that match a specified key.","pos":[37674,37812]},{"content":"Parameters","pos":[37995,38005]},{"content":"Position of the element to be removed.","pos":[38020,38058]},{"content":"Position of the first element to be removed.","pos":[38076,38120]},{"content":"Position just beyond the last element to be removed.","pos":[38137,38189]},{"content":"The key value of the elements to be removed.","pos":[38205,38249]},{"content":"Return Value","pos":[38259,38271]},{"content":"For the first two member functions, a bidirectional iterator that designates the first element remaining beyond any elements removed, or an element that is the end of the map if no such element exists.","pos":[38275,38476]},{"content":"For the third member function, returns the number of elements that have been removed from the unordered_multimap.","pos":[38483,38596]},{"content":"Remarks","pos":[38606,38613]},{"pos":[38617,38699],"content":"For a code example, see <bpt id=\"p1\">[</bpt>map::erase<ept id=\"p1\">](../standard-library/map-class.md#map__erase)</ept>.","source":"For a code example, see [map::erase](../standard-library/map-class.md#map__erase)."},{"pos":[38750,38774],"content":"unordered_multimap::find"},{"content":"Finds an element that matches a specified key.","pos":[38778,38824]},{"content":"Parameters","pos":[38895,38905]},{"content":"Key value to search for.","pos":[38921,38945]},{"content":"Remarks","pos":[38955,38962]},{"pos":[38966,39078],"content":"The member function returns <bpt id=\"p1\">[</bpt>unordered_multimap::equal_range<ept id=\"p1\">](#unordered_multimap__equal_range)</ept><ph id=\"ph1\">`(keyval).first`</ph>.","source":"The member function returns [unordered_multimap::equal_range](#unordered_multimap__equal_range)`(keyval).first`."},{"content":"Example","pos":[39088,39095]},{"pos":[40278,40311],"content":"unordered_multimap::get_allocator"},{"content":"Gets the stored allocator object.","pos":[40315,40348]},{"content":"Remarks","pos":[40402,40409]},{"content":"The member function returns the stored allocator object.","pos":[40413,40469]},{"content":"Example","pos":[40479,40486]},{"pos":[41125,41158],"content":"unordered_multimap::hash_function"},{"content":"Gets the stored hash function object.","pos":[41162,41199]},{"content":"Remarks","pos":[41252,41259]},{"content":"The member function returns the stored hash function object.","pos":[41263,41323]},{"content":"Example","pos":[41333,41340]},{"pos":[41921,41947],"content":"unordered_multimap::hasher"},{"content":"The type of the hash function.","pos":[41951,41981]},{"content":"Remarks","pos":[42029,42036]},{"pos":[42040,42096],"content":"The type is a synonym for the template parameter <ph id=\"ph1\">`Hash`</ph>.","source":"The type is a synonym for the template parameter `Hash`."},{"content":"Example","pos":[42106,42113]},{"pos":[42687,42713],"content":"unordered_multimap::insert"},{"content":"Inserts an element or a range of elements into an unordered_multimap.","pos":[42717,42786]},{"content":"Parameters","pos":[43470,43480]},{"content":"Parameter","pos":[43501,43510]},{"content":"Description","pos":[43511,43522]},{"content":"The value of an element to be inserted into the unordered_multimap.","pos":[43533,43600]},{"content":"The place to start searching for the correct point of insertion.","pos":[43613,43677]},{"pos":[43690,43911],"content":"Template parameter that specifies the argument type that the unordered_multimap can use to construct an element of <bpt id=\"p1\">[</bpt>value_type<ept id=\"p1\">](../standard-library/map-class.md#map__value_type)</ept>, and perfect-forwards <ph id=\"ph1\">`Val`</ph> as an argument.","source":"Template parameter that specifies the argument type that the unordered_multimap can use to construct an element of [value_type](../standard-library/map-class.md#map__value_type), and perfect-forwards `Val` as an argument."},{"content":"The position of the first element to be copied.","pos":[43924,43971]},{"content":"The position just beyond the last element to be copied.","pos":[43983,44038]},{"pos":[44059,44322],"content":"Template function argument that meets the requirements of an <bpt id=\"p1\">[</bpt>input iterator<ept id=\"p1\">](../standard-library/input-iterator-tag-struct.md)</ept> that points to elements of a type that can be used to construct <bpt id=\"p2\">[</bpt>value_type<ept id=\"p2\">](../standard-library/map-class.md#map__value_type)</ept> objects.","source":"Template function argument that meets the requirements of an [input iterator](../standard-library/input-iterator-tag-struct.md) that points to elements of a type that can be used to construct [value_type](../standard-library/map-class.md#map__value_type) objects."},{"pos":[44335,44431],"content":"The <bpt id=\"p1\">[</bpt>initializer_list<ept id=\"p1\">](../standard-library/initializer-list.md)</ept> from which to copy the elements.","source":"The [initializer_list](../standard-library/initializer-list.md) from which to copy the elements."},{"content":"Return Value","pos":[44442,44454]},{"content":"The single-element-insert member functions, (1) and (2), return an iterator to the position where the new element was inserted into the unordered_multimap.","pos":[44458,44613]},{"content":"The single-element-with-hint member functions, (3) and (4), return an iterator that points to the position where the new element was inserted into the unordered_multimap.","pos":[44620,44790]},{"content":"Remarks","pos":[44800,44807]},{"content":"No pointers or references are invalidated by this function, but it may invalidate all iterators to the container.","pos":[44811,44924]},{"content":"During the insertion of just one element, if an exception is thrown but does not occur in the container's hash function, the container's state is not modified.","pos":[44931,45090]},{"content":"If the exception is thrown in the hash function, the result is undefined.","pos":[45091,45164]},{"content":"During the insertion of multiple elements, if an exception is thrown, the container is left in an unspecified but valid state.","pos":[45165,45291]},{"content":"The <bpt id=\"p1\">[</bpt>value_type<ept id=\"p1\">](../standard-library/map-class.md#map__value_type)</ept> of a container is a typedef that belongs to the container, and for map, <ph id=\"ph1\">`map&lt;K, V&gt;::value_type`</ph> is <ph id=\"ph2\">`pair&lt;const K, V&gt;`</ph>.","pos":[45298,45483],"source":"The [value_type](../standard-library/map-class.md#map__value_type) of a container is a typedef that belongs to the container, and for map, `map<K, V>::value_type` is `pair<const K, V>`."},{"content":"The value of an element is an ordered pair in which the first component is equal to the key value and the second component is equal to the data value of the element.","pos":[45484,45649]},{"content":"The range member function (5) inserts the sequence of element values into an unordered_multimap that corresponds to each element addressed by an iterator in the range <ph id=\"ph1\">`[First, Last)`</ph>; therefore, <ph id=\"ph2\">`Last`</ph> does not get inserted.","pos":[45656,45880],"source":"The range member function (5) inserts the sequence of element values into an unordered_multimap that corresponds to each element addressed by an iterator in the range `[First, Last)`; therefore, `Last` does not get inserted."},{"content":"The container member function <ph id=\"ph1\">`end()`</ph> refers to the position just after the last element in the container—for example, the statement <ph id=\"ph2\">`m.insert(v.begin(), v.end());`</ph> inserts all elements of <ph id=\"ph3\">`v`</ph> into <ph id=\"ph4\">`m`</ph>.","pos":[45881,46083],"source":" The container member function `end()` refers to the position just after the last element in the container—for example, the statement `m.insert(v.begin(), v.end());` inserts all elements of `v` into `m`."},{"pos":[46090,46244],"content":"The initializer list member function (6) uses an <bpt id=\"p1\">[</bpt>initializer_list<ept id=\"p1\">](../standard-library/initializer-list.md)</ept> to copy elements into the unordered_multimap.","source":"The initializer list member function (6) uses an [initializer_list](../standard-library/initializer-list.md) to copy elements into the unordered_multimap."},{"pos":[46251,46488],"content":"For insertion of an element constructed in place—that is, no copy or move operations are performed—see <bpt id=\"p1\">[</bpt>unordered_multimap::emplace<ept id=\"p1\">](#unordered_multimap__emplace)</ept> and <bpt id=\"p2\">[</bpt>unordered_multimap::emplace_hint<ept id=\"p2\">](#unordered_multimap__emplace_hint)</ept>.","source":"For insertion of an element constructed in place—that is, no copy or move operations are performed—see [unordered_multimap::emplace](#unordered_multimap__emplace) and [unordered_multimap::emplace_hint](#unordered_multimap__emplace_hint)."},{"pos":[46495,46594],"content":"For a code example, see <bpt id=\"p1\">[</bpt>multimap::insert<ept id=\"p1\">](../standard-library/multiset-class.md#multiset__insert)</ept>.","source":"For a code example, see [multimap::insert](../standard-library/multiset-class.md#multiset__insert)."},{"pos":[46649,46677],"content":"unordered_multimap::iterator"},{"content":"The type of an iterator for the controlled sequence.","pos":[46681,46733]},{"content":"Remarks","pos":[46781,46788]},{"content":"The type describes an object that can serve as a forward iterator for the controlled sequence.","pos":[46792,46886]},{"content":"It is described here as a synonym for the implementation-defined type <ph id=\"ph1\">`T0`</ph>.","pos":[46887,46962],"source":" It is described here as a synonym for the implementation-defined type `T0`."},{"content":"Example","pos":[46972,46979]},{"pos":[47728,47754],"content":"unordered_multimap::key_eq"},{"content":"Gets the stored comparison function object.","pos":[47758,47801]},{"content":"Remarks","pos":[47847,47854]},{"content":"The member function returns the stored comparison function object.","pos":[47858,47924]},{"content":"Example","pos":[47934,47941]},{"pos":[48611,48640],"content":"unordered_multimap::key_equal"},{"content":"The type of the comparison function.","pos":[48644,48680]},{"content":"Remarks","pos":[48731,48738]},{"pos":[48742,48798],"content":"The type is a synonym for the template parameter <ph id=\"ph1\">`Pred`</ph>.","source":"The type is a synonym for the template parameter `Pred`."},{"content":"Example","pos":[48808,48815]},{"pos":[49487,49515],"content":"unordered_multimap::key_type"},{"content":"The type of an ordering key.","pos":[49519,49547]},{"content":"Remarks","pos":[49596,49603]},{"pos":[49607,49662],"content":"The type is a synonym for the template parameter <ph id=\"ph1\">`Key`</ph>.","source":"The type is a synonym for the template parameter `Key`."},{"content":"Example","pos":[49672,49679]},{"pos":[50852,50883],"content":"unordered_multimap::load_factor"},{"content":"Counts the average elements per bucket.","pos":[50887,50926]},{"content":"Remarks","pos":[50978,50985]},{"pos":[50989,51210],"content":"The member function returns <ph id=\"ph1\">`(float)`</ph><bpt id=\"p1\">[</bpt>unordered_multimap::size<ept id=\"p1\">](#unordered_multimap__size)</ept><ph id=\"ph2\">`() / (float)`</ph><bpt id=\"p2\">[</bpt>unordered_multimap::bucket_count<ept id=\"p2\">](#unordered_multimap__bucket_count)</ept><ph id=\"ph3\">`()`</ph>, the average number of elements per bucket.","source":"The member function returns `(float)`[unordered_multimap::size](#unordered_multimap__size)`() / (float)`[unordered_multimap::bucket_count](#unordered_multimap__bucket_count)`()`, the average number of elements per bucket."},{"content":"Example","pos":[51220,51227]},{"pos":[53225,53259],"content":"unordered_multimap::local_iterator"},{"content":"The type of a bucket iterator.","pos":[53263,53293]},{"content":"Remarks","pos":[53347,53354]},{"content":"The type describes an object that can serve as a forward iterator for a bucket.","pos":[53358,53437]},{"content":"It is described here as a synonym for the implementation-defined type <ph id=\"ph1\">`T4`</ph>.","pos":[53438,53513],"source":" It is described here as a synonym for the implementation-defined type `T4`."},{"content":"Example","pos":[53523,53530]},{"pos":[54475,54506],"content":"unordered_multimap::mapped_type"},{"content":"The type of a mapped value associated with each key.","pos":[54510,54562]},{"content":"Remarks","pos":[54613,54620]},{"pos":[54624,54678],"content":"The type is a synonym for the template parameter <ph id=\"ph1\">`Ty`</ph>.","source":"The type is a synonym for the template parameter `Ty`."},{"content":"Example","pos":[54688,54695]},{"pos":[55876,55912],"content":"unordered_multimap::max_bucket_count"},{"content":"Gets the maximum number of buckets.","pos":[55916,55951]},{"content":"Remarks","pos":[56012,56019]},{"content":"The member function returns the maximum number of buckets currently permitted.","pos":[56023,56101]},{"content":"Example","pos":[56111,56118]},{"pos":[58482,58517],"content":"unordered_multimap::max_load_factor"},{"content":"Gets or sets the maximum elements per bucket.","pos":[58521,58566]},{"content":"Parameters","pos":[58661,58671]},{"content":"The new maximum load factor.","pos":[58687,58715]},{"content":"Remarks","pos":[58725,58732]},{"content":"The first member function returns the stored maximum load factor.","pos":[58736,58801]},{"content":"The second member function replaces the stored maximum load factor with <ph id=\"ph1\">`factor`</ph>.","pos":[58802,58883],"source":" The second member function replaces the stored maximum load factor with `factor`."},{"content":"Example","pos":[58893,58900]},{"pos":[61256,61284],"content":"unordered_multimap::max_size"},{"content":"Gets the maximum size of the controlled sequence.","pos":[61288,61337]},{"content":"Remarks","pos":[61390,61397]},{"content":"The member function returns the length of the longest sequence that the object can control.","pos":[61401,61492]},{"content":"Example","pos":[61502,61509]},{"pos":[61971,62000],"content":"unordered_multimap::operator="},{"content":"Copies a hash table.","pos":[62004,62024]},{"content":"Parameters","pos":[62173,62183]},{"content":"Parameter","pos":[62204,62213]},{"content":"Description","pos":[62214,62225]},{"content":"The unordered_multimap being copied into the unordered_multimap.","pos":[62239,62303]},{"content":"Remarks","pos":[62314,62321]},{"pos":[62325,62474],"content":"After erasing any existing elements in a unordered_multimap, <ph id=\"ph1\">`operator=`</ph> either copies or moves the contents of <ph id=\"ph2\">` right`</ph> into the unordered_multimap.","source":"After erasing any existing elements in a unordered_multimap, `operator=` either copies or moves the contents of ` right` into the unordered_multimap."},{"content":"Example","pos":[62484,62491]},{"pos":[63358,63385],"content":"unordered_multimap::pointer"},{"content":"The type of a pointer to an element.","pos":[63389,63425]},{"content":"Remarks","pos":[63484,63491]},{"content":"The type describes an object that can serve as a pointer to an element of the controlled sequence.","pos":[63495,63593]},{"content":"Example","pos":[63603,63610]},{"pos":[64421,64450],"content":"unordered_multimap::reference"},{"content":"The type of a reference to an element.","pos":[64454,64492]},{"content":"Remarks","pos":[64555,64562]},{"content":"The type describes an object that can serve as a reference to an element of the controlled sequence.","pos":[64566,64666]},{"content":"Example","pos":[64676,64683]},{"pos":[65498,65524],"content":"unordered_multimap::rehash"},{"content":"Rebuilds the hash table.","pos":[65528,65552]},{"content":"Parameters","pos":[65610,65620]},{"content":"The requested number of buckets.","pos":[65638,65670]},{"content":"Remarks","pos":[65680,65687]},{"pos":[65691,65804],"content":"The member function alters the number of buckets to be at least <ph id=\"ph1\">`nbuckets`</ph> and rebuilds the hash table as needed.","source":"The member function alters the number of buckets to be at least `nbuckets` and rebuilds the hash table as needed."},{"content":"Example","pos":[65814,65821]},{"pos":[67732,67756],"content":"unordered_multimap::size"},{"content":"Counts the number of elements.","pos":[67760,67790]},{"content":"Remarks","pos":[67839,67846]},{"content":"The member function returns the length of the controlled sequence.","pos":[67850,67916]},{"content":"Example","pos":[67926,67933]},{"pos":[69462,69491],"content":"unordered_multimap::size_type"},{"content":"The type of an unsigned distance between two elements.","pos":[69495,69549]},{"content":"Remarks","pos":[69598,69605]},{"content":"The unsigned integer type describes an object that can represent the length of any controlled sequence.","pos":[69609,69712]},{"content":"It is described here as a synonym for the implementation-defined type <ph id=\"ph1\">`T2`</ph>.","pos":[69713,69788],"source":" It is described here as a synonym for the implementation-defined type `T2`."},{"content":"Example","pos":[69798,69805]},{"pos":[70270,70294],"content":"unordered_multimap::swap"},{"content":"Swaps the contents of two containers.","pos":[70298,70335]},{"content":"Parameters","pos":[70398,70408]},{"content":"The container to swap with.","pos":[70423,70450]},{"content":"Remarks","pos":[70460,70467]},{"content":"The member function swaps the controlled sequences between <ph id=\"ph1\">`*this`</ph> and <ph id=\"ph2\">`right`</ph>.","pos":[70471,70550],"source":"The member function swaps the controlled sequences between `*this` and `right`."},{"content":"If <bpt id=\"p1\">[</bpt>unordered_multimap::get_allocator<ept id=\"p1\">](#unordered_multimap__get_allocator)</ept><ph id=\"ph1\">`() == right.get_allocator()`</ph>, it does so in constant time, it throws an exception only as a result of copying the stored traits object of type <ph id=\"ph2\">`Tr`</ph>, and it invalidates no references, pointers, or iterators that designate elements in the two controlled sequences.","pos":[70551,70888],"source":" If [unordered_multimap::get_allocator](#unordered_multimap__get_allocator)`() == right.get_allocator()`, it does so in constant time, it throws an exception only as a result of copying the stored traits object of type `Tr`, and it invalidates no references, pointers, or iterators that designate elements in the two controlled sequences."},{"content":"Otherwise, it performs a number of element assignments and constructor calls proportional to the number of elements in the two controlled sequences.","pos":[70889,71037]},{"content":"Example","pos":[71047,71054]},{"pos":[72536,72574],"content":"unordered_multimap::unordered_multimap"},{"content":"Constructs a container object.","pos":[72578,72608]},{"content":"Parameters","pos":[73694,73704]},{"content":"Parameter","pos":[73725,73734]},{"content":"Description","pos":[73735,73746]},{"content":"The iterator type.","pos":[73767,73785]},{"content":"The allocator object to store.","pos":[73795,73825]},{"content":"The comparison function object to store.","pos":[73837,73877]},{"content":"The hash function object to store.","pos":[73889,73923]},{"content":"The minimum number of buckets.","pos":[73943,73973]},{"content":"The container to copy.","pos":[73986,74008]},{"content":"The initializer_list from which to copy the elements.","pos":[74021,74074]},{"content":"Remarks","pos":[74085,74092]},{"content":"The first constructor specifies a copy of the sequence controlled by <ph id=\"ph1\">`Right`</ph>.","pos":[74096,74173],"source":"The first constructor specifies a copy of the sequence controlled by `Right`."},{"content":"The second constructor specifies an empty controlled sequence.","pos":[74174,74236]},{"content":"The third constructor.","pos":[74237,74259]},{"content":"specifies a copy of the sequence by moving <ph id=\"ph1\">`Right`</ph>.","pos":[74260,74311],"source":" specifies a copy of the sequence by moving `Right`."},{"content":"The fourth, fifth, sixth, seventh, and eighth constructors use an initializer_list for the members.","pos":[74312,74411]},{"content":"The ninth constructor inserts the sequence of element values <ph id=\"ph1\">`[First, Last)`</ph>.","pos":[74412,74489],"source":" The ninth constructor inserts the sequence of element values `[First, Last)`."},{"content":"All constructors also initialize several stored values.","pos":[74496,74551]},{"content":"For the copy constructor, the values are obtained from <ph id=\"ph1\">`Right`</ph>.","pos":[74552,74615],"source":" For the copy constructor, the values are obtained from `Right`."},{"content":"Otherwise:","pos":[74616,74626]},{"pos":[74633,74795],"content":"The minimum number of buckets is the argument <ph id=\"ph1\">`Bucket_count`</ph>, if present; otherwise it is a default value described here as the implementation-defined value <ph id=\"ph2\">`N0`</ph>.","source":"The minimum number of buckets is the argument `Bucket_count`, if present; otherwise it is a default value described here as the implementation-defined value `N0`."},{"pos":[74802,74888],"content":"The hash function object is the argument <ph id=\"ph1\">`Hash`</ph>, if present; otherwise it is <ph id=\"ph2\">`Hash()`</ph>.","source":"The hash function object is the argument `Hash`, if present; otherwise it is `Hash()`."},{"pos":[74895,74987],"content":"The comparison function object is the argument <ph id=\"ph1\">`Comp`</ph>, if present; otherwise it is <ph id=\"ph2\">`Pred()`</ph>.","source":"The comparison function object is the argument `Comp`, if present; otherwise it is `Pred()`."},{"pos":[74994,75076],"content":"The allocator object is the argument <ph id=\"ph1\">`Al`</ph>, if present; otherwise, it is <ph id=\"ph2\">`Alloc()`</ph>.","source":"The allocator object is the argument `Al`, if present; otherwise, it is `Alloc()`."},{"content":"Example","pos":[75086,75093]},{"pos":[78731,78761],"content":"unordered_multimap::value_type"},{"content":"The type of an element.","pos":[78765,78788]},{"content":"Remarks","pos":[78860,78867]},{"content":"The type describes an element of the controlled sequence.","pos":[78871,78928]},{"content":"Example","pos":[78938,78945]},{"content":"See Also","pos":[80071,80079]},{"content":"&lt;unordered_map&gt;","pos":[80084,80099],"source":"<unordered_map>"},{"content":"Containers","pos":[80144,80154]},{"content":"Thread Safety in the C++ Standard Library","pos":[80194,80235]},{"content":"C++ Standard Library Reference","pos":[80308,80338]}],"content":"---\ntitle: \"unordered_multimap Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"unordered_map/std::tr1::unordered_multimap\"\n  - \"tr1.unordered_multimap\"\n  - \"unordered_multimap\"\n  - \"std.tr1.unordered_multimap\"\n  - \"tr1::unordered_multimap\"\n  - \"std::tr1::unordered_multimap\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"unordered_multimap class [TR1]\"\n  - \"unordered_multimap class\"\nms.assetid: 4baead6c-5870-4b85-940f-a47d6b891c27\ncaps.latest.revision: 28\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# unordered_multimap Class\nThe template class describes an object that controls a varying-length sequence of elements of type `std::pair<const Key, Ty>`. The sequence is weakly ordered by a hash function, which partitions the sequence into an ordered set of subsequences called buckets. Within each bucket a comparison function determines whether any pair of elements has equivalent ordering. Each element stores two objects, a sort key and a value. The sequence is represented in a way that permits lookup, insertion, and removal of an arbitrary element with a number of operations that can be independent of the number of elements in the sequence (constant time), at least when all buckets are of roughly equal length. In the worst case, when all of the elements are in one bucket, the number of operations is proportional to the number of elements in the sequence (linear time). Moreover, inserting an element invalidates no iterators, and removing an element invalidates only those iterators which point at the removed element.  \n  \n## Syntax  \n  \n```  \ntemplate <class Key,  \n    class Ty,  \n    class Hash = std::hash<Key>,  \n    class Pred = std::equal_to<Key>,  \n    class Alloc = std::allocator<Key>>  \nclass unordered_multimap;  \n```  \n  \n#### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|`Key`|The key type.|  \n|`Ty`|The mapped type.|  \n|`Hash`|The hash function object type.|  \n|`Pred`|The equality comparison function object type.|  \n|`Alloc`|The allocator class.|  \n  \n## Members  \n  \n|||  \n|-|-|  \n|Type Definition|Description|  \n|[unordered_multimap::allocator_type](#unordered_multimap__allocator_type)|The type of an allocator for managing storage.|  \n|[unordered_multimap::const_iterator](#unordered_multimap__const_iterator)|The type of a constant iterator for the controlled sequence.|  \n|[unordered_multimap::const_local_iterator](#unordered_multimap__const_local_iterator)|The type of a constant bucket iterator for the controlled sequence.|  \n|[unordered_multimap::const_pointer](#unordered_multimap__const_pointer)|The type of a constant pointer to an element.|  \n|[unordered_multimap::const_reference](#unordered_multimap__const_reference)|The type of a constant reference to an element.|  \n|[unordered_multimap::difference_type](#unordered_multimap__difference_type)|The type of a signed distance between two elements.|  \n|[unordered_multimap::hasher](#unordered_multimap__hasher)|The type of the hash function.|  \n|[unordered_multimap::iterator](#unordered_multimap__iterator)|The type of an iterator for the controlled sequence.|  \n|[unordered_multimap::key_equal](#unordered_multimap__key_equal)|The type of the comparison function.|  \n|[unordered_multimap::key_type](#unordered_multimap__key_type)|The type of an ordering key.|  \n|[unordered_multimap::local_iterator](#unordered_multimap__local_iterator)|The type of a bucket iterator for the controlled sequence.|  \n|[unordered_multimap::mapped_type](#unordered_multimap__mapped_type)|The type of a mapped value associated with each key.|  \n|[unordered_multimap::pointer](#unordered_multimap__pointer)|The type of a pointer to an element.|  \n|[unordered_multimap::reference](#unordered_multimap__reference)|The type of a reference to an element.|  \n|[unordered_multimap::size_type](#unordered_multimap__size_type)|The type of an unsigned distance between two elements.|  \n|[unordered_multimap::value_type](#unordered_multimap__value_type)|The type of an element.|  \n  \n|||  \n|-|-|  \n|Member Function|Description|  \n|[unordered_multimap::begin](#unordered_multimap__begin)|Designates the beginning of the controlled sequence.|  \n|[unordered_multimap::bucket](#unordered_multimap__bucket)|Gets the bucket number for a key value.|  \n|[unordered_multimap::bucket_count](#unordered_multimap__bucket_count)|Gets the number of buckets.|  \n|[unordered_multimap::bucket_size](#unordered_multimap__bucket_size)|Gets the size of a bucket.|  \n|[unordered_multimap::cbegin](#unordered_multimap__cbegin)|Designates the beginning of the controlled sequence.|  \n|[unordered_multimap::cend](#unordered_multimap__cend)|Designates the end of the controlled sequence.|  \n|[unordered_multimap::clear](#unordered_multimap__clear)|Removes all elements.|  \n|[unordered_multimap::count](#unordered_multimap__count)|Finds the number of elements matching a specified key.|  \n|[unordered_multimap::emplace](#unordered_multimap__emplace)|Adds an element constructed in place.|  \n|[unordered_multimap::emplace_hint](#unordered_multimap__emplace_hint)|Adds an element constructed in place, with hint.|  \n|[unordered_multimap::empty](#unordered_multimap__empty)|Tests whether no elements are present.|  \n|[unordered_multimap::end](#unordered_multimap__end)|Designates the end of the controlled sequence.|  \n|[unordered_multimap::equal_range](#unordered_multimap__equal_range)|Finds range that matches a specified key.|  \n|[unordered_multimap::erase](#unordered_multimap__erase)|Removes elements at specified positions.|  \n|[unordered_multimap::find](#unordered_multimap__find)|Finds an element that matches a specified key.|  \n|[unordered_multimap::get_allocator](#unordered_multimap__get_allocator)|Gets the stored allocator object.|  \n|[unordered_multimap::hash_function](#unordered_multimap__hash_function)|Gets the stored hash function object.|  \n|[unordered_multimap::insert](#unordered_multimap__insert)|Adds elements.|  \n|[unordered_multimap::key_eq](#unordered_multimap__key_eq)|Gets the stored comparison function object.|  \n|[unordered_multimap::load_factor](#unordered_multimap__load_factor)|Counts the average elements per bucket.|  \n|[unordered_multimap::max_bucket_count](#unordered_multimap__max_bucket_count)|Gets the maximum number of buckets.|  \n|[unordered_multimap::max_load_factor](#unordered_multimap__max_load_factor)|Gets or sets the maximum elements per bucket.|  \n|[unordered_multimap::max_size](#unordered_multimap__max_size)|Gets the maximum size of the controlled sequence.|  \n|[unordered_multimap::rehash](#unordered_multimap__rehash)|Rebuilds the hash table.|  \n|[unordered_multimap::size](#unordered_multimap__size)|Counts the number of elements.|  \n|[unordered_multimap::swap](#unordered_multimap__swap)|Swaps the contents of two containers.|  \n|[unordered_multimap::unordered_multimap](#unordered_multimap__unordered_multimap)|Constructs a container object.|  \n  \n|||  \n|-|-|  \n|Operator|Description|  \n|[unordered_multimap::operator=](#unordered_multimap__operator_eq)|Copies a hash table.|  \n  \n## Remarks  \n The object orders the sequence it controls by calling two stored objects, a comparison function object of type [unordered_multimap::key_equal](#unordered_multimap__key_equal) and a hash function object of type [unordered_multimap::hasher](#unordered_multimap__hasher). You access the first stored object by calling the member function [unordered_multimap::key_eq](#unordered_multimap__key_eq)`()`; and you access the second stored object by calling the member function [unordered_multimap::hash_function](#unordered_multimap__hash_function)`()`. Specifically, for all values `X` and `Y` of type `Key`, the call `key_eq()(X, Y)` returns true only if the two argument values have equivalent ordering; the call `hash_function()(keyval)` yields a distribution of values of type `size_t`. Unlike template class [unordered_map Class](../standard-library/unordered-map-class.md), an object of template class `unordered_multimap` does not ensure that `key_eq()(X, Y)` is always false for any two elements of the controlled sequence. (Keys need not be unique.)  \n  \n The object also stores a maximum load factor, which specifies the maximum desired average number of elements per bucket. If inserting an element causes [unordered_multimap::load_factor](#unordered_multimap__load_factor)`()` to exceed the maximum load factor, the container increases the number of buckets and rebuilds the hash table as needed.  \n  \n The actual order of elements in the controlled sequence depends on the hash function, the comparison function, the order of insertion, the maximum load factor, and the current number of buckets. You cannot in general predict the order of elements in the controlled sequence. You can always be assured, however, that any subset of elements that have equivalent ordering are adjacent in the controlled sequence.  \n  \n The object allocates and frees storage for the sequence it controls through a stored allocator object of type [unordered_multimap::allocator_type](#unordered_multimap__allocator_type). Such an allocator object must have the same external interface as an object of template class `allocator`. Note that the stored allocator object is not copied when the container object is assigned.  \n  \n## Requirements  \n **Header:** <unordered_map>  \n  \n **Namespace:** std  \n  \n##  <a name=\"unordered_multimap__allocator_type\"></a>  unordered_multimap::allocator_type  \n The type of an allocator for managing storage.  \n  \n```  \ntypedef Alloc allocator_type;  \n```  \n  \n### Remarks  \n The type is a synonym for the template parameter `Alloc`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_allocator_type.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \ntypedef std::allocator<std::pair<const char, int> > Myalloc;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    Mymap::allocator_type al = c1.get_allocator();   \n    std::cout << \"al == std::allocator() is \"   \n        << std::boolalpha << (al == Myalloc()) << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \nal == std::allocator() is true  \n```  \n  \n##  <a name=\"unordered_multimap__begin\"></a>  unordered_multimap::begin  \n Designates the beginning of the controlled sequence or a bucket.  \n  \n```  \niterator begin();\n\nconst_iterator begin() const;\n\n \nlocal_iterator begin(size_type nbucket);\n\nconst_local_iterator begin(size_type nbucket) const;\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|`nbucket`|The bucket number.|  \n  \n### Remarks  \n The first two member functions return a forward iterator that points at the first element of the sequence (or just beyond the end of an empty sequence). The last two member functions return a forward iterator that points at the first element of bucket `nbucket` (or just beyond the end of an empty bucket).  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_begin.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n// inspect first two items \" [c 3] [b 2]\"   \n    Mymap::iterator it2 = c1.begin();   \n    std::cout << \" [\" << it2->first << \", \" << it2->second << \"]\";   \n    ++it2;   \n    std::cout << \" [\" << it2->first << \", \" << it2->second << \"]\";   \n    std::cout << std::endl;   \n  \n// inspect bucket containing 'a'   \n    Mymap::const_local_iterator lit = c1.begin(c1.bucket('a'));   \n    std::cout << \" [\" << lit->first << \", \" << lit->second << \"]\";   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n[c, 3] [b, 2] [a, 1]  \n[c, 3] [b, 2]  \n[a, 1]  \n```  \n  \n##  <a name=\"unordered_multimap__bucket\"></a>  unordered_multimap::bucket  \n Gets the bucket number for a key value.  \n  \n```  \nsize_type bucket(const Key& keyval) const;\n```  \n  \n### Parameters  \n `keyval`  \n The key value to map.  \n  \n### Remarks  \n The member function returns the bucket number currently corresponding to the key value `keyval`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_bucket.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n// display buckets for keys   \n    Mymap::size_type bs = c1.bucket('a');   \n    std::cout << \"bucket('a') == \" << bs << std::endl;   \n    std::cout << \"bucket_size(\" << bs << \") == \" << c1.bucket_size(bs)   \n        << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n [c, 3] [b, 2] [a, 1]  \nbucket('a') == 7  \nbucket_size(7) == 1  \n```  \n  \n##  <a name=\"unordered_multimap__bucket_count\"></a>  unordered_multimap::bucket_count  \n Gets the number of buckets.  \n  \n```  \nsize_type bucket_count() const;\n```  \n  \n### Remarks  \n The member function returns the current number of buckets.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_bucket_count.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n// inspect current parameters   \n    std::cout << \"bucket_count() == \" << c1.bucket_count() << std::endl;   \n    std::cout << \"load_factor() == \" << c1.load_factor() << std::endl;   \n    std::cout << \"max_bucket_count() == \"   \n        << c1.max_bucket_count() << std::endl;   \n    std::cout << \"max_load_factor() == \"   \n        << c1.max_load_factor() << std::endl;   \n    std::cout << std::endl;   \n  \n// change max_load_factor and redisplay   \n    c1.max_load_factor(0.10f);   \n    std::cout << \"bucket_count() == \" << c1.bucket_count() << std::endl;   \n    std::cout << \"load_factor() == \" << c1.load_factor() << std::endl;   \n    std::cout << \"max_bucket_count() == \"   \n        << c1.max_bucket_count() << std::endl;   \n    std::cout << \"max_load_factor() == \"   \n        << c1.max_load_factor() << std::endl;   \n    std::cout << std::endl;   \n  \n// rehash and redisplay   \n    c1.rehash(100);   \n    std::cout << \"bucket_count() == \" << c1.bucket_count() << std::endl;   \n    std::cout << \"load_factor() == \" << c1.load_factor() << std::endl;   \n    std::cout << \"max_bucket_count() == \"   \n        << c1.max_bucket_count() << std::endl;   \n    std::cout << \"max_load_factor() == \"   \n        << c1.max_load_factor() << std::endl;   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n [c, 3] [b, 2] [a, 1]  \nbucket_count() == 8  \nload_factor() == 0.375  \nmax_bucket_count() == 8  \nmax_load_factor() == 4  \n  \nbucket_count() == 8  \nload_factor() == 0.375  \nmax_bucket_count() == 8  \nmax_load_factor() == 0.1  \n  \nbucket_count() == 128  \nload_factor() == 0.0234375  \nmax_bucket_count() == 128  \nmax_load_factor() == 0.1  \n  \n```  \n  \n##  <a name=\"unordered_multimap__bucket_size\"></a>  unordered_multimap::bucket_size  \n Gets the size of a bucket  \n  \n```  \nsize_type bucket_size(size_type nbucket) const;\n```  \n  \n### Parameters  \n `nbucket`  \n The bucket number.  \n  \n### Remarks  \n The member functions returns the size of bucket number `nbucket`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_bucket_size.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n// display buckets for keys   \n    Mymap::size_type bs = c1.bucket('a');   \n    std::cout << \"bucket('a') == \" << bs << std::endl;   \n    std::cout << \"bucket_size(\" << bs << \") == \" << c1.bucket_size(bs)   \n        << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n [c, 3] [b, 2] [a, 1]  \nbucket('a') == 7  \nbucket_size(7) == 1  \n```  \n  \n##  <a name=\"unordered_multimap__cbegin\"></a>  unordered_multimap::cbegin  \n Returns a `const` iterator that addresses the first element in the range.  \n  \n```  \nconst_iterator cbegin() const;\n```  \n  \n### Return Value  \n A `const` forward-access iterator that points at the first element of the range, or the location just beyond the end of an empty range (for an empty range, `cbegin() == cend()`).  \n  \n### Remarks  \n With the return value of `cbegin`, the elements in the range cannot be modified.  \n  \n You can use this member function in place of the `begin()` member function to guarantee that the return value is `const_iterator`. Typically, it's used in conjunction with the [auto](../cpp/auto-cpp.md) type deduction keyword, as shown in the following example. In the example, consider `Container` to be a modifiable (non- `const`) container of any kind that supports `begin()` and `cbegin()`.  \n  \n```cpp  \n \nauto i1 = Container.begin();\n// i1 is Container<T>::iterator   \nauto i2 = Container.cbegin();\n\n// i2 is Container<T>::const_iterator  \n```  \n  \n##  <a name=\"unordered_multimap__cend\"></a>  unordered_multimap::cend  \n Returns a `const` iterator that addresses the location just beyond the last element in a range.  \n  \n```  \nconst_iterator cend() const;\n```  \n  \n### Return Value  \n A `const` forward-access iterator that points just beyond the end of the range.  \n  \n### Remarks  \n `cend` is used to test whether an iterator has passed the end of its range.  \n  \n You can use this member function in place of the `end()` member function to guarantee that the return value is `const_iterator`. Typically, it's used in conjunction with the [auto](../cpp/auto-cpp.md) type deduction keyword, as shown in the following example. In the example, consider `Container` to be a modifiable (non- `const`) container of any kind that supports `end()` and `cend()`.  \n  \n```cpp  \n \nauto i1 = Container.end();\n// i1 is Container<T>::iterator   \nauto i2 = Container.cend();\n\n// i2 is Container<T>::const_iterator  \n```  \n  \n The value returned by `cend` should not be dereferenced.  \n  \n##  <a name=\"unordered_multimap__clear\"></a>  unordered_multimap::clear  \n Removes all elements.  \n  \n```  \nvoid clear();\n```  \n  \n### Remarks  \n The member function calls [unordered_multimap::erase](#unordered_multimap__erase)`(` [unordered_multimap::begin](#unordered_multimap__begin)`(),` [unordered_multimap::end](#unordered_multimap__end)`())`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_clear.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n// clear the container and reinspect   \n    c1.clear();   \n    std::cout << \"size == \" << c1.size() << std::endl;   \n    std::cout << \"empty() == \" << std::boolalpha << c1.empty() << std::endl;   \n    std::cout << std::endl;   \n  \n    c1.insert(Mymap::value_type('d', 4));   \n    c1.insert(Mymap::value_type('e', 5));   \n  \n// display contents \" [e 5] [d 4]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n    std::cout << \"size == \" << c1.size() << std::endl;   \n    std::cout << \"empty() == \" << std::boolalpha << c1.empty() << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n [c, 3] [b, 2] [a, 1]  \nsize == 0  \nempty() == true  \n  \n [e, 5] [d, 4]  \nsize == 2  \nempty() == false  \n```  \n  \n##  <a name=\"unordered_multimap__const_iterator\"></a>  unordered_multimap::const_iterator  \n The type of a constant iterator for the controlled sequence.  \n  \n```  \ntypedef T1 const_iterator;  \n```  \n  \n### Remarks  \n The type describes an object that can serve as a constant forward iterator for the controlled sequence. It is described here as a synonym for the implementation-defined type `T1`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_const_iterator.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n[c, 3] [b, 2] [a, 1]  \n```  \n  \n##  <a name=\"unordered_multimap__const_local_iterator\"></a>  unordered_multimap::const_local_iterator  \n The type of a constant bucket iterator for the controlled sequence.  \n  \n```  \ntypedef T5 const_local_iterator;  \n```  \n  \n### Remarks  \n The type describes an object that can serve as a constant forward iterator for a bucket. It is described here as a synonym for the implementation-defined type `T5`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_const_local_iterator.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n// inspect bucket containing 'a'   \n    Mymap::const_local_iterator lit = c1.begin(c1.bucket('a'));   \n    std::cout << \" [\" << lit->first << \", \" << lit->second << \"]\";   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n[c, 3] [b, 2] [a, 1]  \n[a, 1]  \n```  \n  \n##  <a name=\"unordered_multimap__const_pointer\"></a>  unordered_multimap::const_pointer  \n The type of a constant pointer to an element.  \n  \n```  \ntypedef Alloc::const_pointer const_pointer;  \n```  \n  \n### Remarks  \n The type describes an object that can serve as a constant pointer to an element of the controlled sequence.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_const_pointer.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        {   \n        Mymap::const_pointer p = &*it;   \n        std::cout << \" [\" << p->first << \", \" << p->second << \"]\";   \n        }   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n[c, 3] [b, 2] [a, 1]  \n```  \n  \n##  <a name=\"unordered_multimap__const_reference\"></a>  unordered_multimap::const_reference  \n The type of a constant reference to an element.  \n  \n```  \ntypedef Alloc::const_reference const_reference;  \n```  \n  \n### Remarks  \n The type describes an object that can serve as a constant reference to an element of the controlled sequence.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_const_reference.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        {   \n        Mymap::const_reference ref = *it;   \n        std::cout << \" [\" << ref.first << \", \" << ref.second << \"]\";   \n        }   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n[c, 3] [b, 2] [a, 1]  \n```  \n  \n##  <a name=\"unordered_multimap__count\"></a>  unordered_multimap::count  \n Finds the number of elements matching a specified key.  \n  \n```  \nsize_type count(const Key& keyval) const;\n```  \n  \n### Parameters  \n `keyval`  \n Key value to search for.  \n  \n### Remarks  \n The member function returns the number of elements in the range delimited by [unordered_multimap::equal_range](#unordered_multimap__equal_range)`(keyval)`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_count.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n    std::cout << \"count('A') == \" << c1.count('A') << std::endl;   \n    std::cout << \"count('b') == \" << c1.count('b') << std::endl;   \n    std::cout << \"count('C') == \" << c1.count('C') << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n [c, 3] [b, 2] [a, 1]  \ncount('A') == 0  \ncount('b') == 1  \ncount('C') == 0  \n```  \n  \n##  <a name=\"unordered_multimap__difference_type\"></a>  unordered_multimap::difference_type  \n The type of a signed distance between two elements.  \n  \n```  \ntypedef T3 difference_type;  \n```  \n  \n### Remarks  \n The signed integer type describes an object that can represent the difference between the addresses of any two elements in the controlled sequence. It is described here as a synonym for the implementation-defined type `T3`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_difference_type.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n// compute positive difference   \n    Mymap::difference_type diff = 0;   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        ++diff;   \n    std::cout << \"end()-begin() == \" << diff << std::endl;   \n  \n// compute negative difference   \n    diff = 0;   \n    for (Mymap::const_iterator it = c1.end();   \n        it != c1.begin(); --it)   \n        --diff;   \n    std::cout << \"begin()-end() == \" << diff << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n [c, 3] [b, 2] [a, 1]  \nend()-begin() == 3  \nbegin()-end() == -3  \n```  \n  \n##  <a name=\"unordered_multimap__emplace\"></a>  unordered_multimap::emplace  \n Inserts an element constructed in place (no copy or move operations are performed), with a placement hint.  \n  \n```  \ntemplate <class... Args>  \niterator emplace(Args&&... args);\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|`args`|The arguments forwarded to construct an element to be inserted into the unordered_multimap.|  \n  \n### Return Value  \n An iterator to the newly inserted element.  \n  \n### Remarks  \n No references to container elements are invalidated by this function, but it may invalidate all iterators to the container.  \n  \n The [value_type](../standard-library/map-class.md#map__value_type) of an element is a pair, so that the value of an element will be an ordered pair with the first component equal to the key value and the second component equal to the data value of the element.  \n  \n During the insertion, if an exception is thrown but does not occur in the container's hash function, the container is not modified. If the exception is thrown in the hash function, the result is undefined.  \n  \n For a code example, see [multimap::emplace](../standard-library/multimap-class.md#multimap__emplace).  \n  \n##  <a name=\"unordered_multimap__emplace_hint\"></a>  unordered_multimap::emplace_hint  \n Inserts an element constructed in place (no copy or move operations are performed), with a placement hint.  \n  \n```  \ntemplate <class... Args>  \niterator emplace_hint(\n    const_iterator where,  \n    Args&&... args);\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|`args`|The arguments forwarded to construct an element to be inserted into the unordered.|  \n|`where`|A hint regarding the place to start searching for the correct point of insertion.|  \n  \n### Return Value  \n An iterator to the newly inserted element.  \n  \n### Remarks  \n No references to container elements are invalidated by this function, but it may invalidate all iterators to the container.  \n  \n During the insertion, if an exception is thrown but does not occur in the container's hash function, the container is not modified. If the exception is thrown in the hash function, the result is undefined.  \n  \n The [value_type](../standard-library/map-class.md#map__value_type) of an element is a pair, so that the value of an element will be an ordered pair with the first component equal to the key value and the second component equal to the data value of the element.  \n  \n For a code example, see [map::emplace_hint](../standard-library/map-class.md#map__emplace_hint).  \n  \n##  <a name=\"unordered_multimap__empty\"></a>  unordered_multimap::empty  \n Tests whether no elements are present.  \n  \n```  \nbool empty() const;\n```  \n  \n### Remarks  \n The member function returns true for an empty controlled sequence.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_empty.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n// clear the container and reinspect   \n    c1.clear();   \n    std::cout << \"size == \" << c1.size() << std::endl;   \n    std::cout << \"empty() == \" << std::boolalpha << c1.empty() << std::endl;   \n    std::cout << std::endl;   \n  \n    c1.insert(Mymap::value_type('d', 4));   \n    c1.insert(Mymap::value_type('e', 5));   \n  \n// display contents \" [e 5] [d 4]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n    std::cout << \"size == \" << c1.size() << std::endl;   \n    std::cout << \"empty() == \" << std::boolalpha << c1.empty() << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n [c, 3] [b, 2] [a, 1]  \nsize == 0  \nempty() == true  \n  \n [e, 5] [d, 4]  \nsize == 2  \nempty() == false  \n```  \n  \n##  <a name=\"unordered_multimap__end\"></a>  unordered_multimap::end  \n Designates the end of the controlled sequence.  \n  \n```  \niterator end();\n\nconst_iterator end() const;\n\n \nlocal_iterator end(size_type nbucket);\n\nconst_local_iterator end(size_type nbucket) const;\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|`nbucket`|The bucket number.|  \n  \n### Remarks  \n The first two member functions return a forward iterator that points just beyond the end of the sequence. The last two member functions return a forward iterator that points just beyond the end of bucket `nbucket`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_end.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n// inspect last two items \" [a 1] [b 2]\"   \n    Mymap::iterator it2 = c1.end();   \n    --it2;   \n    std::cout << \" [\" << it2->first << \", \" << it2->second << \"]\";   \n    --it2;   \n    std::cout << \" [\" << it2->first << \", \" << it2->second << \"]\";   \n    std::cout << std::endl;   \n  \n// inspect bucket containing 'a'   \n    Mymap::const_local_iterator lit = c1.end(c1.bucket('a'));   \n    --lit;   \n    std::cout << \" [\" << lit->first << \", \" << lit->second << \"]\";   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n[c, 3] [b, 2] [a, 1]  \n[a, 1] [b, 2]  \n[a, 1]  \n```  \n  \n##  <a name=\"unordered_multimap__equal_range\"></a>  unordered_multimap::equal_range  \n Finds range that matches a specified key.  \n  \n```  \nstd::pair<iterator, iterator>  \n    equal_range(const Key& keyval);\n\nstd::pair<const_iterator, const_iterator>  \n    equal_range(const Key& keyval) const;\n```  \n  \n### Parameters  \n `keyval`  \n Key value to search for.  \n  \n### Remarks  \n The member function returns a pair of iterators `X` such that `[X.first, X.second)` delimits just those elements of the controlled sequence that have equivalent ordering with `keyval`. If no such elements exist, both iterators are `end()`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_equal_range.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n// display results of failed search   \n    std::pair<Mymap::iterator, Mymap::iterator> pair1 =   \n        c1.equal_range('x');   \n    std::cout << \"equal_range('x'):\";   \n    for (; pair1.first != pair1.second; ++pair1.first)   \n        std::cout << \" [\" << pair1.first->first   \n            << \", \" << pair1.first->second << \"]\";   \n    std::cout << std::endl;   \n  \n// display results of successful search   \n    pair1 = c1.equal_range('b');   \n    std::cout << \"equal_range('b'):\";   \n    for (; pair1.first != pair1.second; ++pair1.first)   \n        std::cout << \" [\" << pair1.first->first   \n            << \", \" << pair1.first->second << \"]\";   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n [c, 3] [b, 2] [a, 1]  \nequal_range('x'):  \nequal_range('b'): [b, 2]  \n```  \n  \n##  <a name=\"unordered_multimap__erase\"></a>  unordered_multimap::erase  \n Removes an element or a range of elements in a unordered_multimap from specified positions or removes elements that match a specified key.  \n  \n```  \niterator erase(\n    const_iterator Where);\n\niterator erase(\n    const_iterator First,  \n    const_iterator Last);\n\nsize_type erase(\n    const key_type& Key);\n```  \n  \n### Parameters  \n `Where`  \n Position of the element to be removed.  \n  \n `First`  \n Position of the first element to be removed.  \n  \n `Last`  \n Position just beyond the last element to be removed.  \n  \n `Key`  \n The key value of the elements to be removed.  \n  \n### Return Value  \n For the first two member functions, a bidirectional iterator that designates the first element remaining beyond any elements removed, or an element that is the end of the map if no such element exists.  \n  \n For the third member function, returns the number of elements that have been removed from the unordered_multimap.  \n  \n### Remarks  \n For a code example, see [map::erase](../standard-library/map-class.md#map__erase).  \n  \n##  <a name=\"unordered_multimap__find\"></a>  unordered_multimap::find  \n Finds an element that matches a specified key.  \n  \n```  \nconst_iterator find(const Key& keyval) const;\n```  \n  \n### Parameters  \n `keyval`  \n Key value to search for.  \n  \n### Remarks  \n The member function returns [unordered_multimap::equal_range](#unordered_multimap__equal_range)`(keyval).first`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_find.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n// try to find and fail   \n    std::cout << \"find('A') == \"   \n        << std::boolalpha << (c1.find('A') != c1.end()) << std::endl;   \n  \n// try to find and succeed   \n    Mymap::iterator it = c1.find('b');   \n    std::cout << \"find('b') == \"   \n        << std::boolalpha << (it != c1.end())   \n        << \": [\" << it->first << \", \" << it->second << \"]\" << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n [c, 3] [b, 2] [a, 1]  \nfind('A') == false  \nfind('b') == true: [b, 2]  \n```  \n  \n##  <a name=\"unordered_multimap__get_allocator\"></a>  unordered_multimap::get_allocator  \n Gets the stored allocator object.  \n  \n```  \nAlloc get_allocator() const;\n```  \n  \n### Remarks  \n The member function returns the stored allocator object.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_get_allocator.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \ntypedef std::allocator<std::pair<const char, int> > Myalloc;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    Mymap::allocator_type al = c1.get_allocator();   \n    std::cout << \"al == std::allocator() is \"   \n        << std::boolalpha << (al == Myalloc()) << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \nal == std::allocator() is true  \n```  \n  \n##  <a name=\"unordered_multimap__hash_function\"></a>  unordered_multimap::hash_function  \n Gets the stored hash function object.  \n  \n```  \nHash hash_function() const;\n```  \n  \n### Remarks  \n The member function returns the stored hash function object.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_hash_function.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    Mymap::hasher hfn = c1.hash_function();   \n    std::cout << \"hfn('a') == \" << hfn('a') << std::endl;   \n    std::cout << \"hfn('b') == \" << hfn('b') << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \nhfn('a') == 1630279  \nhfn('b') == 1647086  \n```  \n  \n##  <a name=\"unordered_multimap__hasher\"></a>  unordered_multimap::hasher  \n The type of the hash function.  \n  \n```  \ntypedef Hash hasher;  \n```  \n  \n### Remarks  \n The type is a synonym for the template parameter `Hash`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_hasher.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    Mymap::hasher hfn = c1.hash_function();   \n    std::cout << \"hfn('a') == \" << hfn('a') << std::endl;   \n    std::cout << \"hfn('b') == \" << hfn('b') << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \nhfn('a') == 1630279  \nhfn('b') == 1647086  \n```  \n  \n##  <a name=\"unordered_multimap__insert\"></a>  unordered_multimap::insert  \n Inserts an element or a range of elements into an unordered_multimap.  \n  \n```  \n// (1) single element  \npair<iterator, bool> insert(\n    const value_type& Val);\n\n \n// (2) single element, perfect forwarded  \ntemplate <class ValTy>  \npair<iterator, bool>  \ninsert(\n    ValTy&& Val);\n\n \n// (3) single element with hint  \niterator insert(\n    const_iterator Where,  \n    const value_type& Val);\n\n \n// (4) single element, perfect forwarded, with hint  \ntemplate <class ValTy>  \niterator insert(\n    const_iterator Where,  \n    ValTy&& Val);\n\n \n// (5) range   \ntemplate <class InputIterator>   \nvoid insert(\n    InputIterator First,  \n    InputIterator Last);\n\n \n// (6) initializer list  \nvoid insert(\n    initializer_list<value_type>  \nIList);\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|`Val`|The value of an element to be inserted into the unordered_multimap.|  \n|`Where`|The place to start searching for the correct point of insertion.|  \n|`ValTy`|Template parameter that specifies the argument type that the unordered_multimap can use to construct an element of [value_type](../standard-library/map-class.md#map__value_type), and perfect-forwards `Val` as an argument.|  \n|`First`|The position of the first element to be copied.|  \n|`Last`|The position just beyond the last element to be copied.|  \n|`InputIterator`|Template function argument that meets the requirements of an [input iterator](../standard-library/input-iterator-tag-struct.md) that points to elements of a type that can be used to construct [value_type](../standard-library/map-class.md#map__value_type) objects.|  \n|`IList`|The [initializer_list](../standard-library/initializer-list.md) from which to copy the elements.|  \n  \n### Return Value  \n The single-element-insert member functions, (1) and (2), return an iterator to the position where the new element was inserted into the unordered_multimap.  \n  \n The single-element-with-hint member functions, (3) and (4), return an iterator that points to the position where the new element was inserted into the unordered_multimap.  \n  \n### Remarks  \n No pointers or references are invalidated by this function, but it may invalidate all iterators to the container.  \n  \n During the insertion of just one element, if an exception is thrown but does not occur in the container's hash function, the container's state is not modified. If the exception is thrown in the hash function, the result is undefined. During the insertion of multiple elements, if an exception is thrown, the container is left in an unspecified but valid state.  \n  \n The [value_type](../standard-library/map-class.md#map__value_type) of a container is a typedef that belongs to the container, and for map, `map<K, V>::value_type` is `pair<const K, V>`. The value of an element is an ordered pair in which the first component is equal to the key value and the second component is equal to the data value of the element.  \n  \n The range member function (5) inserts the sequence of element values into an unordered_multimap that corresponds to each element addressed by an iterator in the range `[First, Last)`; therefore, `Last` does not get inserted. The container member function `end()` refers to the position just after the last element in the container—for example, the statement `m.insert(v.begin(), v.end());` inserts all elements of `v` into `m`.  \n  \n The initializer list member function (6) uses an [initializer_list](../standard-library/initializer-list.md) to copy elements into the unordered_multimap.  \n  \n For insertion of an element constructed in place—that is, no copy or move operations are performed—see [unordered_multimap::emplace](#unordered_multimap__emplace) and [unordered_multimap::emplace_hint](#unordered_multimap__emplace_hint).  \n  \n For a code example, see [multimap::insert](../standard-library/multiset-class.md#multiset__insert).  \n  \n##  <a name=\"unordered_multimap__iterator\"></a>  unordered_multimap::iterator  \n The type of an iterator for the controlled sequence.  \n  \n```  \ntypedef T0 iterator;  \n```  \n  \n### Remarks  \n The type describes an object that can serve as a forward iterator for the controlled sequence. It is described here as a synonym for the implementation-defined type `T0`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_iterator.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n[c, 3] [b, 2] [a, 1]  \n```  \n  \n##  <a name=\"unordered_multimap__key_eq\"></a>  unordered_multimap::key_eq  \n Gets the stored comparison function object.  \n  \n```  \nPred key_eq() const;\n```  \n  \n### Remarks  \n The member function returns the stored comparison function object.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_key_eq.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    Mymap::key_equal cmpfn = c1.key_eq();   \n    std::cout << \"cmpfn('a', 'a') == \"   \n        << std::boolalpha << cmpfn('a', 'a') << std::endl;   \n    std::cout << \"cmpfn('a', 'b') == \"   \n        << std::boolalpha << cmpfn('a', 'b') << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \ncmpfn('a', 'a') == true  \ncmpfn('a', 'b') == false  \n```  \n  \n##  <a name=\"unordered_multimap__key_equal\"></a>  unordered_multimap::key_equal  \n The type of the comparison function.  \n  \n```  \ntypedef Pred key_equal;  \n```  \n  \n### Remarks  \n The type is a synonym for the template parameter `Pred`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_key_equal.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    Mymap::key_equal cmpfn = c1.key_eq();   \n    std::cout << \"cmpfn('a', 'a') == \"   \n        << std::boolalpha << cmpfn('a', 'a') << std::endl;   \n    std::cout << \"cmpfn('a', 'b') == \"   \n        << std::boolalpha << cmpfn('a', 'b') << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \ncmpfn('a', 'a') == true  \ncmpfn('a', 'b') == false  \n```  \n  \n##  <a name=\"unordered_multimap__key_type\"></a>  unordered_multimap::key_type  \n The type of an ordering key.  \n  \n```  \ntypedef Key key_type;  \n```  \n  \n### Remarks  \n The type is a synonym for the template parameter `Key`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_key_type.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n// add a value and reinspect   \n    Mymap::key_type key = 'd';   \n    Mymap::mapped_type mapped = 4;   \n    Mymap::value_type val = Mymap::value_type(key, mapped);   \n    c1.insert(val);   \n  \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n[c, 3] [b, 2] [a, 1]  \n[d, 4] [c, 3] [b, 2] [a, 1]  \n```  \n  \n##  <a name=\"unordered_multimap__load_factor\"></a>  unordered_multimap::load_factor  \n Counts the average elements per bucket.  \n  \n```  \nfloat load_factor() const;\n```  \n  \n### Remarks  \n The member function returns `(float)`[unordered_multimap::size](#unordered_multimap__size)`() / (float)`[unordered_multimap::bucket_count](#unordered_multimap__bucket_count)`()`, the average number of elements per bucket.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_load_factor.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n// inspect current parameters   \n    std::cout << \"bucket_count() == \" << c1.bucket_count() << std::endl;   \n    std::cout << \"load_factor() == \" << c1.load_factor() << std::endl;   \n    std::cout << \"max_bucket_count() == \"   \n        << c1.max_bucket_count() << std::endl;   \n    std::cout << \"max_load_factor() == \"   \n        << c1.max_load_factor() << std::endl;   \n    std::cout << std::endl;   \n  \n// change max_load_factor and redisplay   \n    c1.max_load_factor(0.10f);   \n    std::cout << \"bucket_count() == \" << c1.bucket_count() << std::endl;   \n    std::cout << \"load_factor() == \" << c1.load_factor() << std::endl;   \n    std::cout << \"max_bucket_count() == \"   \n        << c1.max_bucket_count() << std::endl;   \n    std::cout << \"max_load_factor() == \"   \n        << c1.max_load_factor() << std::endl;   \n    std::cout << std::endl;   \n  \n// rehash and redisplay   \n    c1.rehash(100);   \n    std::cout << \"bucket_count() == \" << c1.bucket_count() << std::endl;   \n    std::cout << \"load_factor() == \" << c1.load_factor() << std::endl;   \n    std::cout << \"max_bucket_count() == \"   \n        << c1.max_bucket_count() << std::endl;   \n    std::cout << \"max_load_factor() == \"   \n        << c1.max_load_factor() << std::endl;   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n##  <a name=\"unordered_multimap__local_iterator\"></a>  unordered_multimap::local_iterator  \n The type of a bucket iterator.  \n  \n```  \ntypedef T4 local_iterator;  \n```  \n  \n### Remarks  \n The type describes an object that can serve as a forward iterator for a bucket. It is described here as a synonym for the implementation-defined type `T4`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_local_iterator.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n// inspect bucket containing 'a'   \n    Mymap::local_iterator lit = c1.begin(c1.bucket('a'));   \n    std::cout << \" [\" << lit->first << \", \" << lit->second << \"]\";   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n[c, 3] [b, 2] [a, 1]  \n[a, 1]  \n```  \n  \n##  <a name=\"unordered_multimap__mapped_type\"></a>  unordered_multimap::mapped_type  \n The type of a mapped value associated with each key.  \n  \n```  \ntypedef Ty mapped_type;  \n```  \n  \n### Remarks  \n The type is a synonym for the template parameter `Ty`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_mapped_type.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n// add a value and reinspect   \n    Mymap::key_type key = 'd';   \n    Mymap::mapped_type mapped = 4;   \n    Mymap::value_type val = Mymap::value_type(key, mapped);   \n    c1.insert(val);   \n  \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n[c, 3] [b, 2] [a, 1]  \n[d, 4] [c, 3] [b, 2] [a, 1]  \n```  \n  \n##  <a name=\"unordered_multimap__max_bucket_count\"></a>  unordered_multimap::max_bucket_count  \n Gets the maximum number of buckets.  \n  \n```  \nsize_type max_bucket_count() const;\n```  \n  \n### Remarks  \n The member function returns the maximum number of buckets currently permitted.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_max_bucket_count.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n// inspect current parameters   \n    std::cout << \"bucket_count() == \" << c1.bucket_count() << std::endl;   \n    std::cout << \"load_factor() == \" << c1.load_factor() << std::endl;   \n    std::cout << \"max_bucket_count() == \"   \n        << c1.max_bucket_count() << std::endl;   \n    std::cout << \"max_load_factor() == \"   \n        << c1.max_load_factor() << std::endl;   \n    std::cout << std::endl;   \n  \n// change max_load_factor and redisplay   \n    c1.max_load_factor(0.10f);   \n    std::cout << \"bucket_count() == \" << c1.bucket_count() << std::endl;   \n    std::cout << \"load_factor() == \" << c1.load_factor() << std::endl;   \n    std::cout << \"max_bucket_count() == \"   \n        << c1.max_bucket_count() << std::endl;   \n    std::cout << \"max_load_factor() == \"   \n        << c1.max_load_factor() << std::endl;   \n    std::cout << std::endl;   \n  \n// rehash and redisplay   \n    c1.rehash(100);   \n    std::cout << \"bucket_count() == \" << c1.bucket_count() << std::endl;   \n    std::cout << \"load_factor() == \" << c1.load_factor() << std::endl;   \n    std::cout << \"max_bucket_count() == \"   \n        << c1.max_bucket_count() << std::endl;   \n    std::cout << \"max_load_factor() == \"   \n        << c1.max_load_factor() << std::endl;   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n [c, 3] [b, 2] [a, 1]  \nbucket_count() == 8  \nload_factor() == 0.375  \nmax_bucket_count() == 8  \nmax_load_factor() == 4  \n  \nbucket_count() == 8  \nload_factor() == 0.375  \nmax_bucket_count() == 8  \nmax_load_factor() == 0.1  \n  \nbucket_count() == 128  \nload_factor() == 0.0234375  \nmax_bucket_count() == 128  \nmax_load_factor() == 0.1  \n  \n```  \n  \n##  <a name=\"unordered_multimap__max_load_factor\"></a>  unordered_multimap::max_load_factor  \n Gets or sets the maximum elements per bucket.  \n  \n```  \nfloat max_load_factor() const;\n\n \nvoid max_load_factor(float factor);\n```  \n  \n### Parameters  \n `factor`  \n The new maximum load factor.  \n  \n### Remarks  \n The first member function returns the stored maximum load factor. The second member function replaces the stored maximum load factor with `factor`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_max_load_factor.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n// inspect current parameters   \n    std::cout << \"bucket_count() == \" << c1.bucket_count() << std::endl;   \n    std::cout << \"load_factor() == \" << c1.load_factor() << std::endl;   \n    std::cout << \"max_bucket_count() == \"   \n        << c1.max_bucket_count() << std::endl;   \n    std::cout << \"max_load_factor() == \"   \n        << c1.max_load_factor() << std::endl;   \n    std::cout << std::endl;   \n  \n// change max_load_factor and redisplay   \n    c1.max_load_factor(0.10f);   \n    std::cout << \"bucket_count() == \" << c1.bucket_count() << std::endl;   \n    std::cout << \"load_factor() == \" << c1.load_factor() << std::endl;   \n    std::cout << \"max_bucket_count() == \"   \n        << c1.max_bucket_count() << std::endl;   \n    std::cout << \"max_load_factor() == \"   \n        << c1.max_load_factor() << std::endl;   \n    std::cout << std::endl;   \n  \n// rehash and redisplay   \n    c1.rehash(100);   \n    std::cout << \"bucket_count() == \" << c1.bucket_count() << std::endl;   \n    std::cout << \"load_factor() == \" << c1.load_factor() << std::endl;   \n    std::cout << \"max_bucket_count() == \"   \n        << c1.max_bucket_count() << std::endl;   \n    std::cout << \"max_load_factor() == \"   \n        << c1.max_load_factor() << std::endl;   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n [c, 3] [b, 2] [a, 1]  \nbucket_count() == 8  \nload_factor() == 0.375  \nmax_bucket_count() == 8  \nmax_load_factor() == 4  \n  \nbucket_count() == 8  \nload_factor() == 0.375  \nmax_bucket_count() == 8  \nmax_load_factor() == 0.1  \n  \nbucket_count() == 128  \nload_factor() == 0.0234375  \nmax_bucket_count() == 128  \nmax_load_factor() == 0.1  \n  \n```  \n  \n##  <a name=\"unordered_multimap__max_size\"></a>  unordered_multimap::max_size  \n Gets the maximum size of the controlled sequence.  \n  \n```  \nsize_type max_size() const;\n```  \n  \n### Remarks  \n The member function returns the length of the longest sequence that the object can control.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_max_size.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    std::cout << \"max_size() == \" << c1.max_size() << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \nmax_size() == 536870911  \n```  \n  \n##  <a name=\"unordered_multimap__operator_eq\"></a>  unordered_multimap::operator=  \n Copies a hash table.  \n  \n```  \nunordered_multimap& operator=(const unordered_multimap& right);\n\nunordered_multimap& operator=(unordered_multimap&& right);\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|` right`|The unordered_multimap being copied into the unordered_multimap.|  \n  \n### Remarks  \n After erasing any existing elements in a unordered_multimap, `operator=` either copies or moves the contents of ` right` into the unordered_multimap.  \n  \n### Example  \n  \n```cpp  \n// unordered_multimap_operator_as.cpp  \n// compile with: /EHsc  \n#include <unordered_multimap>  \n#include <iostream>  \n  \nint main( )  \n   {  \n   using namespace std;  \n   unordered_multimap<int, int> v1, v2, v3;  \n   unordered_multimap<int, int>::iterator iter;  \n  \n   v1.insert(pair<int, int>(1, 10));  \n  \n   cout << \"v1 = \" ;  \n   for (iter = v1.begin(); iter != v1.end(); iter++)  \n      cout << iter->second << \" \";  \n   cout << endl;  \n  \n   v2 = v1;  \n   cout << \"v2 = \";  \n   for (iter = v2.begin(); iter != v2.end(); iter++)  \n      cout << iter->second << \" \";  \n   cout << endl;  \n  \n// move v1 into v2  \n   v2.clear();  \n   v2 = move(v1);  \n   cout << \"v2 = \";  \n   for (iter = v2.begin(); iter != v2.end(); iter++)  \n      cout << iter->second << \" \";  \n   cout << endl;  \n   }  \n```  \n  \n##  <a name=\"unordered_multimap__pointer\"></a>  unordered_multimap::pointer  \n The type of a pointer to an element.  \n  \n```  \ntypedef Alloc::pointer pointer;  \n```  \n  \n### Remarks  \n The type describes an object that can serve as a pointer to an element of the controlled sequence.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_pointer.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        {   \n        Mymap::pointer p = &*it;   \n        std::cout << \" [\" << p->first << \", \" << p->second << \"]\";   \n        }   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n[c, 3] [b, 2] [a, 1]  \n```  \n  \n##  <a name=\"unordered_multimap__reference\"></a>  unordered_multimap::reference  \n The type of a reference to an element.  \n  \n```  \ntypedef Alloc::reference reference;  \n```  \n  \n### Remarks  \n The type describes an object that can serve as a reference to an element of the controlled sequence.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_reference.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        {   \n        Mymap::reference ref = *it;   \n        std::cout << \" [\" << ref.first << \", \" << ref.second << \"]\";   \n        }   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n[c, 3] [b, 2] [a, 1]  \n```  \n  \n##  <a name=\"unordered_multimap__rehash\"></a>  unordered_multimap::rehash  \n Rebuilds the hash table.  \n  \n```  \nvoid rehash(size_type nbuckets);\n```  \n  \n### Parameters  \n `nbuckets`  \n The requested number of buckets.  \n  \n### Remarks  \n The member function alters the number of buckets to be at least `nbuckets` and rebuilds the hash table as needed.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_rehash.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n// inspect current parameters   \n    std::cout << \"bucket_count() == \" << c1.bucket_count() << std::endl;   \n    std::cout << \"load_factor() == \" << c1.load_factor() << std::endl;   \n    std::cout << \"max_load_factor() == \" << c1.max_load_factor() << std::endl;   \n    std::cout << std::endl;   \n  \n// change max_load_factor and redisplay   \n    c1.max_load_factor(0.10f);   \n    std::cout << \"bucket_count() == \" << c1.bucket_count() << std::endl;   \n    std::cout << \"load_factor() == \" << c1.load_factor() << std::endl;   \n    std::cout << \"max_load_factor() == \" << c1.max_load_factor() << std::endl;   \n    std::cout << std::endl;   \n  \n// rehash and redisplay   \n    c1.rehash(100);   \n    std::cout << \"bucket_count() == \" << c1.bucket_count() << std::endl;   \n    std::cout << \"load_factor() == \" << c1.load_factor() << std::endl;   \n    std::cout << \"max_load_factor() == \" << c1.max_load_factor() << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n [c, 3] [b, 2] [a, 1]  \nbucket_count() == 8  \nload_factor() == 0.375  \nmax_load_factor() == 4  \n  \nbucket_count() == 8  \nload_factor() == 0.375  \nmax_load_factor() == 0.1  \n  \nbucket_count() == 128  \nload_factor() == 0.0234375  \nmax_load_factor() == 0.1  \n```  \n  \n##  <a name=\"unordered_multimap__size\"></a>  unordered_multimap::size  \n Counts the number of elements.  \n  \n```  \nsize_type size() const;\n```  \n  \n### Remarks  \n The member function returns the length of the controlled sequence.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_size.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n// clear the container and reinspect   \n    c1.clear();   \n    std::cout << \"size == \" << c1.size() << std::endl;   \n    std::cout << \"empty() == \" << std::boolalpha << c1.empty() << std::endl;   \n    std::cout << std::endl;   \n  \n    c1.insert(Mymap::value_type('d', 4));   \n    c1.insert(Mymap::value_type('e', 5));   \n  \n// display contents \" [e 5] [d 4]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n    std::cout << \"size == \" << c1.size() << std::endl;   \n    std::cout << \"empty() == \" << std::boolalpha << c1.empty() << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n [c, 3] [b, 2] [a, 1]  \nsize == 0  \nempty() == true  \n  \n [e, 5] [d, 4]  \nsize == 2  \nempty() == false  \n```  \n  \n##  <a name=\"unordered_multimap__size_type\"></a>  unordered_multimap::size_type  \n The type of an unsigned distance between two elements.  \n  \n```  \ntypedef T2 size_type;  \n```  \n  \n### Remarks  \n The unsigned integer type describes an object that can represent the length of any controlled sequence. It is described here as a synonym for the implementation-defined type `T2`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_size_type.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n    Mymap::size_type sz = c1.size();   \n  \n    std::cout << \"size == \" << sz << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \nsize == 0  \n```  \n  \n##  <a name=\"unordered_multimap__swap\"></a>  unordered_multimap::swap  \n Swaps the contents of two containers.  \n  \n```  \nvoid swap(unordered_multimap& right);\n```  \n  \n### Parameters  \n `right`  \n The container to swap with.  \n  \n### Remarks  \n The member function swaps the controlled sequences between `*this` and `right`. If [unordered_multimap::get_allocator](#unordered_multimap__get_allocator)`() == right.get_allocator()`, it does so in constant time, it throws an exception only as a result of copying the stored traits object of type `Tr`, and it invalidates no references, pointers, or iterators that designate elements in the two controlled sequences. Otherwise, it performs a number of element assignments and constructor calls proportional to the number of elements in the two controlled sequences.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_swap.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n    Mymap c2;   \n  \n    c2.insert(Mymap::value_type('d', 4));   \n    c2.insert(Mymap::value_type('e', 5));   \n    c2.insert(Mymap::value_type('f', 6));   \n  \n    c1.swap(c2);   \n  \n// display contents \" [f 6] [e 5] [d 4]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n    swap(c1, c2);   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n[c, 3] [b, 2] [a, 1]  \n[f, 6] [e, 5] [d, 4]  \n[c, 3] [b, 2] [a, 1]  \n```  \n  \n##  <a name=\"unordered_multimap__unordered_multimap\"></a>  unordered_multimap::unordered_multimap  \n Constructs a container object.  \n  \n```  \nunordered_multimap(\n    const unordered_multimap& Right);\n\nexplicit unordered_multimap(\n    size_type Bucket_count = N0,  \n    const Hash& Hash = Hash(),  \n    const Comp& Comp = Pred(),  \n    const Allocator& Al = Alloc());\n\nunordered_multimap(\n    unordered_multimap&& Right);\n\nunordered_multimap(\n    initializer_list<Type> IList);\n\nunordered_multimap(\n    initializer_list<Type> IList,  \n    size_type Bucket_count);\n\nunordered_multimap(\n    initializer_list<Type> IList,  \n    size_type Bucket_count,   \n    const Hash& Hash);\n\nunordered_multimap(\n    initializer_list<Type> IList,  \n    size_type Bucket_count,   \n    const Hash& Hash,  \n    const Key& Key);\n\nunordered_multimap(\n    initializer_list<Type> IList,  \n    size_type Bucket_count,   \n    const Hash& Hash,  \n    const Key& Key,   \n    const Allocator& Al);\n\ntemplate <class InputIterator>  \nunordered_multimap(\n InputIterator first, InputIterator last,  \n    size_type Bucket_count = N0,  \n    const Hash& Hash = Hash(),  \n    const Comp& Comp = Pred(),  \n    const Allocator& Al = Alloc());\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|`InputIterator`|The iterator type.|  \n|`Al`|The allocator object to store.|  \n|`Comp`|The comparison function object to store.|  \n|`Hash`|The hash function object to store.|  \n|`Bucket_count`|The minimum number of buckets.|  \n|`Right`|The container to copy.|  \n|`IList`|The initializer_list from which to copy the elements.|  \n  \n### Remarks  \n The first constructor specifies a copy of the sequence controlled by `Right`. The second constructor specifies an empty controlled sequence. The third constructor. specifies a copy of the sequence by moving `Right`. The fourth, fifth, sixth, seventh, and eighth constructors use an initializer_list for the members. The ninth constructor inserts the sequence of element values `[First, Last)`.  \n  \n All constructors also initialize several stored values. For the copy constructor, the values are obtained from `Right`. Otherwise:  \n  \n The minimum number of buckets is the argument `Bucket_count`, if present; otherwise it is a default value described here as the implementation-defined value `N0`.  \n  \n The hash function object is the argument `Hash`, if present; otherwise it is `Hash()`.  \n  \n The comparison function object is the argument `Comp`, if present; otherwise it is `Pred()`.  \n  \n The allocator object is the argument `Al`, if present; otherwise, it is `Alloc()`.  \n  \n### Example  \n  \n```cpp  \n// std__unordered_map__unordered_multimap_construct.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \nusing namespace std;  \n  \nusing  Mymap = unordered_multimap<char, int> ;  \nint main()  \n{  \n    Mymap c1;  \n  \n    c1.insert(Mymap::value_type('a', 1));  \n    c1.insert(Mymap::value_type('b', 2));  \n    c1.insert(Mymap::value_type('c', 3));  \n  \n    // display contents \" [c 3] [b 2] [a 1]\"   \n    for (const auto& c : c1) {  \n        cout << \" [\" << c.first << \", \" << c.second << \"]\";  \n    }  \n    cout << endl;  \n  \n    Mymap c2(8,  \n        hash<char>(),  \n        equal_to<char>(),  \n        allocator<pair<const char, int> >());  \n  \n    c2.insert(Mymap::value_type('d', 4));  \n    c2.insert(Mymap::value_type('e', 5));  \n    c2.insert(Mymap::value_type('f', 6));  \n  \n    // display contents \" [f 6] [e 5] [d 4]\"   \n    for (const auto& c : c2) {  \n        cout << \" [\" << c.first << \", \" << c.second << \"]\";  \n    }  \n    cout << endl;  \n  \n    Mymap c3(c1.begin(),  \n        c1.end(),  \n        8,  \n        hash<char>(),  \n        equal_to<char>(),  \n        allocator<pair<const char, int> >());  \n  \n    // display contents \" [c 3] [b 2] [a 1]\"   \n    for (const auto& c : c3) {  \n        cout << \" [\" << c.first << \", \" << c.second << \"]\";  \n    }  \n    cout << endl;  \n  \n    Mymap c4(move(c3));  \n  \n    // display contents \" [c 3] [b 2] [a 1]\"   \n    for (const auto& c : c4) {  \n        cout << \" [\" << c.first << \", \" << c.second << \"]\";  \n    }  \n    cout << endl;  \n  \n    // Construct with an initializer_list  \n    unordered_multimap<int, char> c5({ { 5, 'g' }, { 6, 'h' }, { 7, 'i' }, { 8, 'j' } });  \n    for (const auto& c : c5) {  \n        cout << \" [\" << c.first << \", \" << c.second << \"]\";  \n    }  \n    cout << endl;  \n  \n    // Initializer_list plus size  \n    unordered_multimap<int, char> c6({ { 5, 'g' }, { 6, 'h' }, { 7, 'i' }, { 8, 'j' } }, 4);  \n    for (const auto& c : c1) {  \n        cout << \" [\" << c.first << \", \" << c.second << \"]\";  \n    }  \n    cout << endl;  \n  \n    // Initializer_list plus size and hash  \n    unordered_multimap<int, char, tr1::hash<char>> c7(  \n        { { 5, 'g' }, { 6, 'h' }, { 7, 'i' }, { 8, 'j' } },  \n        4,  \n        tr1::hash<char>()  \n    );  \n  \n    for (const auto& c : c1) {  \n        cout << \" [\" << c.first << \", \" << c.second << \"]\";  \n    }  \n    cout << endl;  \n  \n    // Initializer_list plus size, hash, and key_equal  \n    unordered_multimap<int, char, tr1::hash<char>, equal_to<char>> c8(  \n        { { 5, 'g' }, { 6, 'h' }, { 7, 'i' }, { 8, 'j' } },  \n        4,  \n        tr1::hash<char>(),  \n        equal_to<char>()  \n    );  \n  \n    for (const auto& c : c1) {  \n        cout << \" [\" << c.first << \", \" << c.second << \"]\";  \n    }  \n    cout << endl;  \n  \n    // Initializer_list plus size, hash, key_equal, and allocator  \n    unordered_multimap<int, char, tr1::hash<char>, equal_to<char>> c9(  \n        { { 5, 'g' }, { 6, 'h' }, { 7, 'i' }, { 8, 'j' } },  \n        4,  \n        tr1::hash<char>(),  \n        equal_to<char>(),  \n        allocator<pair<const char, int> >()  \n    );  \n  \n    for (const auto& c : c1) {  \n        cout << \" [\" << c.first << \", \" << c.second << \"]\";  \n    }  \n    cout << endl;  \n}  \n  \n```  \n  \n```Output  \n[a, 1] [b, 2] [c, 3] [d, 4] [e, 5] [f, 6] [a, 1] [b, 2] [c, 3] [a, 1] [b, 2] [c, 3] [5, g] [6, h] [7, i] [8, j] [a, 1] [b, 2] [c, 3] [a, 1] [b, 2] [c, 3] [a, 1] [b, 2] [c, 3] [a, 1] [b, 2] [c, 3] [c, 3] [b, 2] [a, 1]  \n [f, 6] [e, 5] [d, 4]  \n [c, 3] [b, 2] [a, 1]  \n [c, 3] [b, 2] [a, 1]  \n```  \n  \n##  <a name=\"unordered_multimap__value_type\"></a>  unordered_multimap::value_type  \n The type of an element.  \n  \n```  \ntypedef std::pair<const Key, Ty> value_type;  \n```  \n  \n### Remarks  \n The type describes an element of the controlled sequence.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__unordered_multimap_value_type.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n// add a value and reinspect   \n    Mymap::key_type key = 'd';   \n    Mymap::mapped_type mapped = 4;   \n    Mymap::value_type val = Mymap::value_type(key, mapped);   \n    c1.insert(val);   \n  \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n[c, 3] [b, 2] [a, 1]  \n[d, 4] [c, 3] [b, 2] [a, 1]  \n```  \n  \n## See Also  \n [<unordered_map>](../standard-library/unordered-map.md)   \n [Containers](../cpp/containers-modern-cpp.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n"}