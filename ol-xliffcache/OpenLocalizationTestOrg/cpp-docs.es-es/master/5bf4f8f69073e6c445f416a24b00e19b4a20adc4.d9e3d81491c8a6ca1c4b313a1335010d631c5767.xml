{"nodes":[{"pos":[12,45],"content":"moneypunct Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"moneypunct Class | Microsoft Docs","pos":[0,33]}]},{"content":"moneypunct Class","pos":[675,691]},{"content":"The template class describes an object that can serve as a locale facet to describe the sequences of type <ph id=\"ph1\">`CharType`</ph> used to represent a monetary input field or a monetary output field.","pos":[692,877],"source":"The template class describes an object that can serve as a locale facet to describe the sequences of type `CharType` used to represent a monetary input field or a monetary output field."},{"content":"If the template parameter <ph id=\"ph1\">`Intl`</ph> is <ph id=\"ph2\">`true`</ph>, international conventions are observed.","pos":[878,961],"source":" If the template parameter `Intl` is `true`, international conventions are observed."},{"content":"Syntax","pos":[970,976]},{"content":"Parameters","pos":[1061,1071]},{"content":"The type used within a program to encode characters.","pos":[1089,1141]},{"content":"A flag specifying whether international conventions are to be observed.","pos":[1158,1229]},{"content":"Remarks","pos":[1238,1245]},{"content":"As with any locale facet, the static object ID has an initial stored value of zero.","pos":[1249,1332]},{"content":"The first attempt to access its stored value stores a unique positive value in <bpt id=\"p1\">**</bpt>id.<ept id=\"p1\">**</ept>","pos":[1333,1419],"source":" The first attempt to access its stored value stores a unique positive value in **id.**"},{"pos":[1426,1507],"content":"The const static object intl stores the value of the template parameter <bpt id=\"p1\">**</bpt>Intl<ept id=\"p1\">**</ept>.","source":"The const static object intl stores the value of the template parameter **Intl**."},{"content":"Constructors","pos":[1517,1529]},{"content":"moneypunct","pos":[1551,1561]},{"pos":[1588,1632],"content":"Constructor of objects of type <ph id=\"ph1\">`moneypunct`</ph>.","source":"Constructor of objects of type `moneypunct`."},{"content":"Typedefs","pos":[1643,1651]},{"content":"char_type","pos":[1673,1682]},{"content":"A type that is used to describe a character used by a locale.","pos":[1708,1769]},{"content":"string_type","pos":[1775,1786]},{"pos":[1814,1886],"content":"A type that describes a string containing characters of type <ph id=\"ph1\">`CharType`</ph>.","source":"A type that describes a string containing characters of type `CharType`."},{"content":"Member Functions","pos":[1897,1913]},{"content":"curr_symbol","pos":[1935,1946]},{"content":"Returns a locale-specific sequence of elements to use as a currency symbol.","pos":[1974,2049]},{"content":"decimal_point","pos":[2055,2068]},{"content":"Returns a locale-specific sequence of elements to use as a decimal point symbol.","pos":[2098,2178]},{"content":"do_curr_symbol","pos":[2184,2198]},{"content":"A protected virtual member function that returns a locale-specific sequence of elements to use as a currency symbol.","pos":[2229,2345]},{"content":"do_decimal_point","pos":[2351,2367]},{"content":"A protected virtual member function that is called to return a locale-specific sequence of elements to use as a decimal point symbol.","pos":[2400,2533]},{"content":"do_frac_digits","pos":[2539,2553]},{"content":"The protected virtual member function returns a locale-specific count of the number of digits to display to the right of any decimal point.","pos":[2584,2723]},{"content":"do_grouping","pos":[2729,2740]},{"content":"The protected virtual member function returns a locale-specific rule for determining how digits are grouped to the left of any decimal point.","pos":[2768,2909]},{"content":"do_neg_format","pos":[2915,2928]},{"content":"A protected virtual member function that is called to return a locale-specific rule for formatting outputs with negative amounts.","pos":[2958,3087]},{"content":"do_negative_sign","pos":[3093,3109]},{"content":"A protected virtual member function that is called to return a locale-specific sequence of elements to use as a negative sign symbol.","pos":[3142,3275]},{"content":"do_pos_format","pos":[3281,3294]},{"content":"A protected virtual member function that is called to return a locale-specific rule for formatting outputs with positive amounts.","pos":[3324,3453]},{"content":"do_positive_sign","pos":[3459,3475]},{"content":"A protected virtual member function that is called to return a locale-specific sequence of elements to use as a positive sign symbol.","pos":[3508,3641]},{"content":"do_thousands_sep","pos":[3647,3663]},{"content":"A protected virtual member function that is called to return a locale-specific sequence of elements to use as a thousands separator symbol.","pos":[3696,3835]},{"content":"frac_digits","pos":[3841,3852]},{"content":"Returns a locale-specific count of the number of digits to display to the right of any decimal point.","pos":[3880,3981]},{"content":"grouping","pos":[3987,3995]},{"content":"Returns a locale-specific rule for determining how digits are grouped to the left of any decimal point.","pos":[4020,4123]},{"content":"neg_format","pos":[4129,4139]},{"content":"Returns a locale-specific rule for formatting outputs with negative amounts.","pos":[4166,4242]},{"content":"negative_sign","pos":[4248,4261]},{"content":"Returns a locale-specific sequence of elements to use as a negative sign symbol.","pos":[4291,4371]},{"content":"pos_format","pos":[4377,4387]},{"content":"Returns a locale-specific rule for formatting outputs with positive amounts.","pos":[4414,4490]},{"content":"positive_sign","pos":[4496,4509]},{"content":"Returns a locale-specific sequence of elements to use as a positive sign symbol.","pos":[4539,4619]},{"content":"thousands_sep","pos":[4625,4638]},{"content":"Returns a locale-specific sequence of elements to use as a thousands separator symbol.","pos":[4668,4754]},{"content":"Requirements","pos":[4764,4776]},{"pos":[4780,4801],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>locale&gt;","source":"**Header:** \\<locale>"},{"pos":[4808,4826],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[4874,4895],"content":"moneypunct::char_type"},{"content":"A type that is used to describe a character used by a locale.","pos":[4899,4960]},{"content":"Remarks","pos":[5015,5022]},{"pos":[5026,5088],"content":"The type is a synonym for the template parameter <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>.","source":"The type is a synonym for the template parameter **CharType**."},{"pos":[5138,5161],"content":"moneypunct::curr_symbol"},{"content":"Returns a locale-specific sequence of elements to use as a currency symbol.","pos":[5165,5240]},{"content":"Return Value","pos":[5298,5310]},{"content":"A string containing the currency symbol.","pos":[5314,5354]},{"content":"Remarks","pos":[5364,5371]},{"pos":[5375,5449],"content":"The member function returns <bpt id=\"p1\">[</bpt>do_curr_symbol<ept id=\"p1\">](#moneypunct__do_curr_symbol)</ept>.","source":"The member function returns [do_curr_symbol](#moneypunct__do_curr_symbol)."},{"content":"Example","pos":[5459,5466]},{"pos":[6120,6145],"content":"moneypunct::decimal_point"},{"content":"Returns a locale-specific sequence of elements to use as a decimal point symbol.","pos":[6149,6229]},{"content":"Return Value","pos":[6286,6298]},{"content":"A locale-specific sequence of elements to use as a decimal point symbol.","pos":[6302,6374]},{"content":"Remarks","pos":[6384,6391]},{"pos":[6395,6473],"content":"The member function returns <bpt id=\"p1\">[</bpt>do_decimal_point<ept id=\"p1\">](#moneypunct__do_decimal_point)</ept>.","source":"The member function returns [do_decimal_point](#moneypunct__do_decimal_point)."},{"content":"Example","pos":[6483,6490]},{"pos":[7299,7325],"content":"moneypunct::do_curr_symbol"},{"content":"A protected virtual member function that returns a locale-specific sequence of elements to use as a currency symbol.","pos":[7329,7445]},{"content":"Return Value","pos":[7514,7526]},{"content":"A locale-specific sequence of elements to use as a decimal point symbol.","pos":[7530,7602]},{"content":"Example","pos":[7612,7619]},{"pos":[7624,7746],"content":"See the example for <bpt id=\"p1\">[</bpt>curr_symbol<ept id=\"p1\">](#moneypunct__curr_symbol)</ept>, where the virtual member function is called by <ph id=\"ph1\">`curr_symbol`</ph>.","source":"See the example for [curr_symbol](#moneypunct__curr_symbol), where the virtual member function is called by `curr_symbol`."},{"pos":[7801,7829],"content":"moneypunct::do_decimal_point"},{"content":"A protected virtual member function that returns a locale-specific sequence of elements to use as a decimal point symbol.","pos":[7833,7954]},{"content":"Return Value","pos":[8022,8034]},{"content":"A locale-specific sequence of elements to use as a decimal point symbol.","pos":[8038,8110]},{"content":"Example","pos":[8120,8127]},{"pos":[8132,8260],"content":"See the example for <bpt id=\"p1\">[</bpt>decimal_point<ept id=\"p1\">](#moneypunct__decimal_point)</ept>, where the virtual member function is called by <ph id=\"ph1\">`decimal_point`</ph>.","source":"See the example for [decimal_point](#moneypunct__decimal_point), where the virtual member function is called by `decimal_point`."},{"pos":[8313,8339],"content":"moneypunct::do_frac_digits"},{"content":"A protected virtual member function that returns a locale-specific count of the number of digits to display to the right of any decimal point.","pos":[8343,8485]},{"content":"Return Value","pos":[8546,8558]},{"content":"A locale-specific count of the number of digits to display to the right of any decimal point.","pos":[8562,8655]},{"content":"Example","pos":[8665,8672]},{"pos":[8677,8799],"content":"See the example for <bpt id=\"p1\">[</bpt>frac_digits<ept id=\"p1\">](#moneypunct__frac_digits)</ept>, where the virtual member function is called by <ph id=\"ph1\">`frac_digits`</ph>.","source":"See the example for [frac_digits](#moneypunct__frac_digits), where the virtual member function is called by `frac_digits`."},{"pos":[8849,8872],"content":"moneypunct::do_grouping"},{"content":"A protected virtual member function that returns a locale-specific rule for determining how digits are grouped to the left of any decimal point.","pos":[8876,9020]},{"content":"Return Value","pos":[9081,9093]},{"content":"A locale-specific rule for determining how digits are grouped to the left of any decimal point.","pos":[9097,9192]},{"content":"Example","pos":[9202,9209]},{"pos":[9214,9329],"content":"See the example for <bpt id=\"p1\">[</bpt>grouping<ept id=\"p1\">](#moneypunct__grouping)</ept>, where the virtual member function is called by <bpt id=\"p2\">**</bpt>grouping<ept id=\"p2\">**</ept>.","source":"See the example for [grouping](#moneypunct__grouping), where the virtual member function is called by **grouping**."},{"pos":[9381,9406],"content":"moneypunct::do_neg_format"},{"content":"A protected virtual member function that is called to return a locale-specific rule for formatting outputs with negative amounts.","pos":[9410,9539]},{"content":"Return Value","pos":[9603,9615]},{"content":"The protected virtual member function returns a locale-specific rule for determining how to generate a monetary output field for a negative amount.","pos":[9619,9766]},{"content":"Each of the four elements of <bpt id=\"p1\">**</bpt>pattern::field<ept id=\"p1\">**</ept> can have the values:","pos":[9767,9835],"source":" Each of the four elements of **pattern::field** can have the values:"},{"pos":[9843,9901],"content":"<bpt id=\"p1\">**</bpt>none<ept id=\"p1\">**</ept> to match zero or more spaces or generate nothing.","source":"**none** to match zero or more spaces or generate nothing."},{"pos":[9909,9967],"content":"<bpt id=\"p1\">**</bpt>sign<ept id=\"p1\">**</ept> to match or generate a positive or negative sign.","source":"**sign** to match or generate a positive or negative sign."},{"pos":[9975,10034],"content":"<bpt id=\"p1\">**</bpt>space<ept id=\"p1\">**</ept> to match zero or more spaces or generate a space.","source":"**space** to match zero or more spaces or generate a space."},{"pos":[10042,10092],"content":"<bpt id=\"p1\">**</bpt>symbol<ept id=\"p1\">**</ept> to match or generate a currency symbol.","source":"**symbol** to match or generate a currency symbol."},{"pos":[10100,10148],"content":"<bpt id=\"p1\">**</bpt>value<ept id=\"p1\">**</ept> to match or generate a monetary value.","source":"**value** to match or generate a monetary value."},{"content":"Components of a monetary output field are generated and components of a monetary input field are matched in the order in which these elements appear in <bpt id=\"p1\">**</bpt>pattern::field<ept id=\"p1\">**</ept>.","pos":[10155,10326],"source":"Components of a monetary output field are generated and components of a monetary input field are matched in the order in which these elements appear in **pattern::field**."},{"content":"Each of the values <bpt id=\"p1\">**</bpt>sign<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>symbol<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>value<ept id=\"p3\">**</ept>, and either <bpt id=\"p4\">**</bpt>none<ept id=\"p4\">**</ept> or <bpt id=\"p5\">**</bpt>space<ept id=\"p5\">**</ept> must appear exactly once.","pos":[10327,10437],"source":" Each of the values **sign**, **symbol**, **value**, and either **none** or **space** must appear exactly once."},{"content":"The value <bpt id=\"p1\">**</bpt>none<ept id=\"p1\">**</ept> must not appear first.","pos":[10438,10479],"source":" The value **none** must not appear first."},{"content":"The value space <bpt id=\"p1\">**</bpt>must<ept id=\"p1\">**</ept> not appear first or last.","pos":[10480,10530],"source":" The value space **must** not appear first or last."},{"content":"If <bpt id=\"p1\">**</bpt>Intl<ept id=\"p1\">**</ept> is true, the order is <bpt id=\"p2\">**</bpt>symbol<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>sign<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>none<ept id=\"p4\">**</ept>, then <bpt id=\"p5\">**</bpt>value<ept id=\"p5\">**</ept>.","pos":[10531,10612],"source":" If **Intl** is true, the order is **symbol**, **sign**, **none**, then **value**."},{"pos":[10619,10786],"content":"The template version of <ph id=\"ph1\">`moneypunct`\\&lt;</ph> <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Intl<ept id=\"p2\">**</ept>&gt; returns <ph id=\"ph2\">`{`</ph><bpt id=\"p3\">**</bpt>money_base::symbol<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>money_base::sign<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>money_base::value<ept id=\"p5\">**</ept>, <bpt id=\"p6\">**</bpt>money_base::none<ept id=\"p6\">**</ept><ph id=\"ph3\">`}`</ph>.","source":"The template version of `moneypunct`\\< **CharType**, **Intl**> returns `{`**money_base::symbol**, **money_base::sign**, **money_base::value**, **money_base::none**`}`."},{"content":"Example","pos":[10796,10803]},{"pos":[10808,10927],"content":"See the example for <bpt id=\"p1\">[</bpt>neg_format<ept id=\"p1\">](#moneypunct__neg_format)</ept>, where the virtual member function is called by <ph id=\"ph1\">`neg_format`</ph>.","source":"See the example for [neg_format](#moneypunct__neg_format), where the virtual member function is called by `neg_format`."},{"pos":[10982,11010],"content":"moneypunct::do_negative_sign"},{"content":"A protected virtual member function that is called to return a locale-specific sequence of elements to use as a negative sign symbol.","pos":[11014,11147]},{"content":"Return Value","pos":[11218,11230]},{"content":"A locale-specific sequence of elements to use as a negative sign.","pos":[11234,11299]},{"content":"Example","pos":[11309,11316]},{"pos":[11321,11449],"content":"See the example for <bpt id=\"p1\">[</bpt>negative_sign<ept id=\"p1\">](#moneypunct__negative_sign)</ept>, where the virtual member function is called by <ph id=\"ph1\">`negative_sign`</ph>.","source":"See the example for [negative_sign](#moneypunct__negative_sign), where the virtual member function is called by `negative_sign`."},{"pos":[11501,11526],"content":"moneypunct::do_pos_format"},{"content":"A protected virtual member function that is called to return a locale-specific rule for formatting outputs with positive amounts.","pos":[11530,11659]},{"content":"Return Value","pos":[11723,11735]},{"content":"The protected virtual member function returns a locale-specific rule for determining how to generate a monetary output field for a positive amount.","pos":[11739,11886]},{"content":"(It also determines how to match the components of a monetary input field.) The encoding is the same as for <bpt id=\"p1\">[</bpt>do_neg_format<ept id=\"p1\">](#moneypunct__do_neg_format)</ept>.","pos":[11887,12039],"source":" (It also determines how to match the components of a monetary input field.) The encoding is the same as for [do_neg_format](#moneypunct__do_neg_format)."},{"pos":[12046,12220],"content":"The template version of moneypunct<ph id=\"ph1\">\\&lt;</ph> <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Inputlterator<ept id=\"p2\">**</ept>&gt; returns <ph id=\"ph2\">`{`</ph><bpt id=\"p3\">**</bpt>money_base::symbol<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>money_base::sign<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>money_base::value<ept id=\"p5\">**</ept>, <bpt id=\"p6\">**</bpt>money_base::none<ept id=\"p6\">**</ept><ph id=\"ph3\">`}`</ph>.","source":"The template version of moneypunct\\< **CharType**, **Inputlterator**> returns `{`**money_base::symbol**, **money_base::sign**, **money_base::value**, **money_base::none**`}`."},{"content":"Example","pos":[12230,12237]},{"pos":[12242,12361],"content":"See the example for <bpt id=\"p1\">[</bpt>pos_format<ept id=\"p1\">](#moneypunct__pos_format)</ept>, where the virtual member function is called by <ph id=\"ph1\">`pos_format`</ph>.","source":"See the example for [pos_format](#moneypunct__pos_format), where the virtual member function is called by `pos_format`."},{"pos":[12416,12444],"content":"moneypunct::do_positive_sign"},{"content":"A protected virtual member function that returns a locale-specific sequence of elements to use as a positive sign.","pos":[12448,12562]},{"content":"Return Value","pos":[12633,12645]},{"content":"A locale-specific sequence of elements to use as a positive sign.","pos":[12649,12714]},{"content":"Example","pos":[12724,12731]},{"pos":[12736,12864],"content":"See the example for <bpt id=\"p1\">[</bpt>positive_sign<ept id=\"p1\">](#moneypunct__positive_sign)</ept>, where the virtual member function is called by <ph id=\"ph1\">`positive_sign`</ph>.","source":"See the example for [positive_sign](#moneypunct__positive_sign), where the virtual member function is called by `positive_sign`."},{"pos":[12919,12947],"content":"moneypunct::do_thousands_sep"},{"content":"A protected virtual member function that returns a locale-specific element to use as a group separator to the left of any decimal point.","pos":[12951,13087]},{"content":"Return Value","pos":[13155,13167]},{"content":"A locale-specific element to use as a group separator to the left of any decimal point.","pos":[13171,13258]},{"content":"Example","pos":[13268,13275]},{"pos":[13280,13408],"content":"See the example for <bpt id=\"p1\">[</bpt>thousands_sep<ept id=\"p1\">](#moneypunct__thousands_sep)</ept>, where the virtual member function is called by <ph id=\"ph1\">`thousands_sep`</ph>.","source":"See the example for [thousands_sep](#moneypunct__thousands_sep), where the virtual member function is called by `thousands_sep`."},{"pos":[13458,13481],"content":"moneypunct::frac_digits"},{"content":"Returns a locale-specific count of the number of digits to display to the right of any decimal point.","pos":[13485,13586]},{"content":"Return Value","pos":[13636,13648]},{"content":"A locale-specific count of the number of digits to display to the right of any decimal point.","pos":[13652,13745]},{"content":"Remarks","pos":[13755,13762]},{"pos":[13766,13840],"content":"The member function returns <bpt id=\"p1\">[</bpt>do_frac_digits<ept id=\"p1\">](#moneypunct__do_frac_digits)</ept>.","source":"The member function returns [do_frac_digits](#moneypunct__do_frac_digits)."},{"content":"Example","pos":[13850,13857]},{"pos":[15672,15692],"content":"moneypunct::grouping"},{"content":"Returns a locale-specific rule for determining how digits are grouped to the left of any decimal point.","pos":[15696,15799]},{"content":"Return Value","pos":[15849,15861]},{"content":"A locale-specific rule for determining how digits are grouped to the left of any decimal point.","pos":[15865,15960]},{"content":"Remarks","pos":[15970,15977]},{"pos":[15981,16049],"content":"The member function returns <bpt id=\"p1\">[</bpt>do_grouping<ept id=\"p1\">](#moneypunct__do_grouping)</ept>.","source":"The member function returns [do_grouping](#moneypunct__do_grouping)."},{"content":"Example","pos":[16059,16066]},{"pos":[17884,17906],"content":"moneypunct::moneypunct"},{"pos":[17910,17954],"content":"Constructor of objects of type <ph id=\"ph1\">`moneypunct`</ph>.","source":"Constructor of objects of type `moneypunct`."},{"content":"Parameters","pos":[18018,18028]},{"content":"Integer value used to specify the type of memory management for the object.","pos":[18043,18118]},{"content":"Remarks","pos":[18128,18135]},{"pos":[18139,18212],"content":"The possible values for the <ph id=\"ph1\">`_Refs`</ph> parameter and their significance are:","source":"The possible values for the `_Refs` parameter and their significance are:"},{"content":"0: The lifetime of the object is managed by the locales that contain it.","pos":[18222,18294]},{"content":"1: The lifetime of the object must be manually managed.","pos":[18304,18359]},{"content":"0: These values are not defined.","pos":[18372,18404]},{"content":"No direct examples are possible, because the destructor is protected.","pos":[18411,18480]},{"pos":[18487,18611],"content":"The constructor initializes its base object with <bpt id=\"p1\">[</bpt>locale::facet<ept id=\"p1\">](../standard-library/locale-class.md#facet_class)</ept>(_ <bpt id=\"p2\">*</bpt>Refs<ept id=\"p2\">*</ept>).","source":"The constructor initializes its base object with [locale::facet](../standard-library/locale-class.md#facet_class)(_ *Refs*)."},{"pos":[18660,18682],"content":"moneypunct::neg_format"},{"content":"Returns a locale-specific rule for formatting outputs with negative amounts.","pos":[18686,18762]},{"content":"Return Value","pos":[18815,18827]},{"content":"A locale-specific rule for formatting outputs with negative amounts.","pos":[18831,18899]},{"content":"Remarks","pos":[18909,18916]},{"pos":[18920,18992],"content":"The member function returns <bpt id=\"p1\">[</bpt>do_neg_format<ept id=\"p1\">](#moneypunct__do_neg_format)</ept>.","source":"The member function returns [do_neg_format](#moneypunct__do_neg_format)."},{"content":"Example","pos":[19002,19009]},{"pos":[19995,20020],"content":"moneypunct::negative_sign"},{"content":"Returns a locale-specific sequence of elements to use as a negative sign symbol.","pos":[20024,20104]},{"content":"Return Value","pos":[20164,20176]},{"content":"Returns a locale-specific sequence of elements to use as a negative sign symbol.","pos":[20180,20260]},{"content":"Remarks","pos":[20270,20277]},{"pos":[20281,20359],"content":"The member function returns <bpt id=\"p1\">[</bpt>do_negative_sign<ept id=\"p1\">](#moneypunct__do_negative_sign)</ept>.","source":"The member function returns [do_negative_sign](#moneypunct__do_negative_sign)."},{"content":"Example","pos":[20369,20376]},{"pos":[21735,21757],"content":"moneypunct::pos_format"},{"content":"Returns a locale-specific rule for formatting outputs with positive amounts.","pos":[21761,21837]},{"content":"Return Value","pos":[21890,21902]},{"content":"A locale-specific rule for formatting outputs with positive amounts.","pos":[21906,21974]},{"content":"Remarks","pos":[21984,21991]},{"pos":[21995,22067],"content":"The member function returns <bpt id=\"p1\">[</bpt>do_pos_format<ept id=\"p1\">](#moneypunct__do_pos_format)</ept>.","source":"The member function returns [do_pos_format](#moneypunct__do_pos_format)."},{"content":"Example","pos":[22077,22084]},{"pos":[23068,23093],"content":"moneypunct::positive_sign"},{"content":"Returns a locale-specific sequence of elements to use as a positive sign symbol.","pos":[23097,23177]},{"content":"Return Value","pos":[23237,23249]},{"content":"A locale-specific sequence of elements to use as a positive sign symbol.","pos":[23253,23325]},{"content":"Remarks","pos":[23335,23342]},{"pos":[23346,23424],"content":"The member function returns <bpt id=\"p1\">[</bpt>do_positive_sign<ept id=\"p1\">](#moneypunct__do_positive_sign)</ept>.","source":"The member function returns [do_positive_sign](#moneypunct__do_positive_sign)."},{"content":"Example","pos":[23434,23441]},{"pos":[24790,24813],"content":"moneypunct::string_type"},{"pos":[24817,24891],"content":"A type that describes a string containing characters of type <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>.","source":"A type that describes a string containing characters of type **CharType**."},{"content":"Remarks","pos":[24981,24988]},{"pos":[24992,25164],"content":"The type describes a specialization of template class <bpt id=\"p1\">[</bpt>basic_string<ept id=\"p1\">](../standard-library/basic-string-class.md)</ept> whose objects can store copies of the punctuation sequences.","source":"The type describes a specialization of template class [basic_string](../standard-library/basic-string-class.md) whose objects can store copies of the punctuation sequences."},{"pos":[25216,25241],"content":"moneypunct::thousands_sep"},{"content":"Returns a locale-specific sequence of elements to use as a thousands separator symbol.","pos":[25245,25331]},{"content":"Return Value","pos":[25388,25400]},{"content":"A locale-specific sequence of elements to use as a thousands separator","pos":[25404,25474]},{"content":"Remarks","pos":[25484,25491]},{"pos":[25495,25573],"content":"The member function returns <bpt id=\"p1\">[</bpt>do_thousands_sep<ept id=\"p1\">](#moneypunct__do_thousands_sep)</ept>.","source":"The member function returns [do_thousands_sep](#moneypunct__do_thousands_sep)."},{"content":"Example","pos":[25583,25590]},{"content":"See Also","pos":[26974,26982]},{"content":"locale&gt;","pos":[26989,26996],"source":"locale>"},{"content":"Thread Safety in the C++ Standard Library","pos":[27034,27075]}],"content":"---\ntitle: \"moneypunct Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"moneypunct\"\n  - \"std.moneypunct\"\n  - \"xlocmon/std::moneypunct\"\n  - \"std::moneypunct\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"moneypunct class\"\nms.assetid: cf2650da-3e6f-491c-95d5-23e57f582ee6\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# moneypunct Class\nThe template class describes an object that can serve as a locale facet to describe the sequences of type `CharType` used to represent a monetary input field or a monetary output field. If the template parameter `Intl` is `true`, international conventions are observed.  \n  \n## Syntax  \n  \n```  \ntemplate <class CharType, bool Intl>  \nclass moneypunct;  \n```  \n  \n#### Parameters  \n `CharType`  \n The type used within a program to encode characters.  \n  \n `Intl`  \n A flag specifying whether international conventions are to be observed.  \n  \n## Remarks  \n As with any locale facet, the static object ID has an initial stored value of zero. The first attempt to access its stored value stores a unique positive value in **id.**  \n  \n The const static object intl stores the value of the template parameter **Intl**.  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[moneypunct](#moneypunct__moneypunct)|Constructor of objects of type `moneypunct`.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[char_type](#moneypunct__char_type)|A type that is used to describe a character used by a locale.|  \n|[string_type](#moneypunct__string_type)|A type that describes a string containing characters of type `CharType`.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[curr_symbol](#moneypunct__curr_symbol)|Returns a locale-specific sequence of elements to use as a currency symbol.|  \n|[decimal_point](#moneypunct__decimal_point)|Returns a locale-specific sequence of elements to use as a decimal point symbol.|  \n|[do_curr_symbol](#moneypunct__do_curr_symbol)|A protected virtual member function that returns a locale-specific sequence of elements to use as a currency symbol.|  \n|[do_decimal_point](#moneypunct__do_decimal_point)|A protected virtual member function that is called to return a locale-specific sequence of elements to use as a decimal point symbol.|  \n|[do_frac_digits](#moneypunct__do_frac_digits)|The protected virtual member function returns a locale-specific count of the number of digits to display to the right of any decimal point.|  \n|[do_grouping](#moneypunct__do_grouping)|The protected virtual member function returns a locale-specific rule for determining how digits are grouped to the left of any decimal point.|  \n|[do_neg_format](#moneypunct__do_neg_format)|A protected virtual member function that is called to return a locale-specific rule for formatting outputs with negative amounts.|  \n|[do_negative_sign](#moneypunct__do_negative_sign)|A protected virtual member function that is called to return a locale-specific sequence of elements to use as a negative sign symbol.|  \n|[do_pos_format](#moneypunct__do_pos_format)|A protected virtual member function that is called to return a locale-specific rule for formatting outputs with positive amounts.|  \n|[do_positive_sign](#moneypunct__do_positive_sign)|A protected virtual member function that is called to return a locale-specific sequence of elements to use as a positive sign symbol.|  \n|[do_thousands_sep](#moneypunct__do_thousands_sep)|A protected virtual member function that is called to return a locale-specific sequence of elements to use as a thousands separator symbol.|  \n|[frac_digits](#moneypunct__frac_digits)|Returns a locale-specific count of the number of digits to display to the right of any decimal point.|  \n|[grouping](#moneypunct__grouping)|Returns a locale-specific rule for determining how digits are grouped to the left of any decimal point.|  \n|[neg_format](#moneypunct__neg_format)|Returns a locale-specific rule for formatting outputs with negative amounts.|  \n|[negative_sign](#moneypunct__negative_sign)|Returns a locale-specific sequence of elements to use as a negative sign symbol.|  \n|[pos_format](#moneypunct__pos_format)|Returns a locale-specific rule for formatting outputs with positive amounts.|  \n|[positive_sign](#moneypunct__positive_sign)|Returns a locale-specific sequence of elements to use as a positive sign symbol.|  \n|[thousands_sep](#moneypunct__thousands_sep)|Returns a locale-specific sequence of elements to use as a thousands separator symbol.|  \n  \n## Requirements  \n **Header:** \\<locale>  \n  \n **Namespace:** std  \n  \n##  <a name=\"moneypunct__char_type\"></a>  moneypunct::char_type  \n A type that is used to describe a character used by a locale.  \n  \n```  \ntypedef CharType char_type;  \n```  \n  \n### Remarks  \n The type is a synonym for the template parameter **CharType**.  \n  \n##  <a name=\"moneypunct__curr_symbol\"></a>  moneypunct::curr_symbol  \n Returns a locale-specific sequence of elements to use as a currency symbol.  \n  \n```  \nstring_type curr_symbol() const;\n```  \n  \n### Return Value  \n A string containing the currency symbol.  \n  \n### Remarks  \n The member function returns [do_curr_symbol](#moneypunct__do_curr_symbol).  \n  \n### Example  \n  \n```cpp  \n// moneypunct_curr_symbol.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n#include <sstream>  \nusing namespace std;  \nint main( )  \n{  \n   locale loc( \"german_germany\" );  \n  \n   const moneypunct < char, true > &mpunct = use_facet < moneypunct < char, true > >(loc);  \n   cout << loc.name( ) << \" international currency symbol \"<<  mpunct.curr_symbol( ) << endl;  \n  \n   const moneypunct < char, false> &mpunct2 = use_facet < moneypunct < char, false> >(loc);  \n   cout << loc.name( ) << \" domestic currency symbol \"<<  mpunct2.curr_symbol( ) << endl;  \n};  \n```  \n  \n##  <a name=\"moneypunct__decimal_point\"></a>  moneypunct::decimal_point  \n Returns a locale-specific sequence of elements to use as a decimal point symbol.  \n  \n```  \nCharType decimal_point() const;\n```  \n  \n### Return Value  \n A locale-specific sequence of elements to use as a decimal point symbol.  \n  \n### Remarks  \n The member function returns [do_decimal_point](#moneypunct__do_decimal_point).  \n  \n### Example  \n  \n```cpp  \n// moneypunct_decimal_pt.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n#include <sstream>  \nusing namespace std;  \nint main( )  \n{  \n   locale loc(\"german_germany\");  \n  \n   const moneypunct < char, true > &mpunct = use_facet   \n      < moneypunct < char, true > >(loc);  \n   cout << loc.name( ) << \" international decimal point \"  \n        << mpunct.decimal_point( ) << endl;  \n  \n   const moneypunct < char, false> &mpunct2 = use_facet   \n      < moneypunct < char, false> >(loc);  \n   cout << loc.name( ) << \" domestic decimal point \"  \n        << mpunct2.decimal_point( ) << endl;  \n}  \n```  \n  \n```Output  \nGerman_Germany.1252 international decimal point ,  \nGerman_Germany.1252 domestic decimal point ,  \n```  \n  \n##  <a name=\"moneypunct__do_curr_symbol\"></a>  moneypunct::do_curr_symbol  \n A protected virtual member function that returns a locale-specific sequence of elements to use as a currency symbol.  \n  \n```  \nvirtual string_type do_curr_symbol() const;\n```  \n  \n### Return Value  \n A locale-specific sequence of elements to use as a decimal point symbol.  \n  \n### Example  \n  See the example for [curr_symbol](#moneypunct__curr_symbol), where the virtual member function is called by `curr_symbol`.  \n  \n##  <a name=\"moneypunct__do_decimal_point\"></a>  moneypunct::do_decimal_point  \n A protected virtual member function that returns a locale-specific sequence of elements to use as a decimal point symbol.  \n  \n```  \nvirtual CharType do_decimal_point() const;\n```  \n  \n### Return Value  \n A locale-specific sequence of elements to use as a decimal point symbol.  \n  \n### Example  \n  See the example for [decimal_point](#moneypunct__decimal_point), where the virtual member function is called by `decimal_point`.  \n  \n##  <a name=\"moneypunct__do_frac_digits\"></a>  moneypunct::do_frac_digits  \n A protected virtual member function that returns a locale-specific count of the number of digits to display to the right of any decimal point.  \n  \n```  \nvirtual int do_frac_digits() const;\n```  \n  \n### Return Value  \n A locale-specific count of the number of digits to display to the right of any decimal point.  \n  \n### Example  \n  See the example for [frac_digits](#moneypunct__frac_digits), where the virtual member function is called by `frac_digits`.  \n  \n##  <a name=\"moneypunct__do_grouping\"></a>  moneypunct::do_grouping  \n A protected virtual member function that returns a locale-specific rule for determining how digits are grouped to the left of any decimal point.  \n  \n```  \nvirtual string do_grouping() const;\n```  \n  \n### Return Value  \n A locale-specific rule for determining how digits are grouped to the left of any decimal point.  \n  \n### Example  \n  See the example for [grouping](#moneypunct__grouping), where the virtual member function is called by **grouping**.  \n  \n##  <a name=\"moneypunct__do_neg_format\"></a>  moneypunct::do_neg_format  \n A protected virtual member function that is called to return a locale-specific rule for formatting outputs with negative amounts.  \n  \n```  \nvirtual pattern do_neg_format() const;\n```  \n  \n### Return Value  \n The protected virtual member function returns a locale-specific rule for determining how to generate a monetary output field for a negative amount. Each of the four elements of **pattern::field** can have the values:  \n  \n- **none** to match zero or more spaces or generate nothing.  \n  \n- **sign** to match or generate a positive or negative sign.  \n  \n- **space** to match zero or more spaces or generate a space.  \n  \n- **symbol** to match or generate a currency symbol.  \n  \n- **value** to match or generate a monetary value.  \n  \n Components of a monetary output field are generated and components of a monetary input field are matched in the order in which these elements appear in **pattern::field**. Each of the values **sign**, **symbol**, **value**, and either **none** or **space** must appear exactly once. The value **none** must not appear first. The value space **must** not appear first or last. If **Intl** is true, the order is **symbol**, **sign**, **none**, then **value**.  \n  \n The template version of `moneypunct`\\< **CharType**, **Intl**> returns `{`**money_base::symbol**, **money_base::sign**, **money_base::value**, **money_base::none**`}`.  \n  \n### Example  \n  See the example for [neg_format](#moneypunct__neg_format), where the virtual member function is called by `neg_format`.  \n  \n##  <a name=\"moneypunct__do_negative_sign\"></a>  moneypunct::do_negative_sign  \n A protected virtual member function that is called to return a locale-specific sequence of elements to use as a negative sign symbol.  \n  \n```  \nvirtual string_type do_negative_sign() const;\n```  \n  \n### Return Value  \n A locale-specific sequence of elements to use as a negative sign.  \n  \n### Example  \n  See the example for [negative_sign](#moneypunct__negative_sign), where the virtual member function is called by `negative_sign`.  \n  \n##  <a name=\"moneypunct__do_pos_format\"></a>  moneypunct::do_pos_format  \n A protected virtual member function that is called to return a locale-specific rule for formatting outputs with positive amounts.  \n  \n```  \nvirtual pattern do_pos_format() const;\n```  \n  \n### Return Value  \n The protected virtual member function returns a locale-specific rule for determining how to generate a monetary output field for a positive amount. (It also determines how to match the components of a monetary input field.) The encoding is the same as for [do_neg_format](#moneypunct__do_neg_format).  \n  \n The template version of moneypunct\\< **CharType**, **Inputlterator**> returns `{`**money_base::symbol**, **money_base::sign**, **money_base::value**, **money_base::none**`}`.  \n  \n### Example  \n  See the example for [pos_format](#moneypunct__pos_format), where the virtual member function is called by `pos_format`.  \n  \n##  <a name=\"moneypunct__do_positive_sign\"></a>  moneypunct::do_positive_sign  \n A protected virtual member function that returns a locale-specific sequence of elements to use as a positive sign.  \n  \n```  \nvirtual string_type do_positive_sign() const;\n```  \n  \n### Return Value  \n A locale-specific sequence of elements to use as a positive sign.  \n  \n### Example  \n  See the example for [positive_sign](#moneypunct__positive_sign), where the virtual member function is called by `positive_sign`.  \n  \n##  <a name=\"moneypunct__do_thousands_sep\"></a>  moneypunct::do_thousands_sep  \n A protected virtual member function that returns a locale-specific element to use as a group separator to the left of any decimal point.  \n  \n```  \nvirtual CharType do_thousands_sep() const;\n```  \n  \n### Return Value  \n A locale-specific element to use as a group separator to the left of any decimal point.  \n  \n### Example  \n  See the example for [thousands_sep](#moneypunct__thousands_sep), where the virtual member function is called by `thousands_sep`.  \n  \n##  <a name=\"moneypunct__frac_digits\"></a>  moneypunct::frac_digits  \n Returns a locale-specific count of the number of digits to display to the right of any decimal point.  \n  \n```  \nint frac_digits() const;\n```  \n  \n### Return Value  \n A locale-specific count of the number of digits to display to the right of any decimal point.  \n  \n### Remarks  \n The member function returns [do_frac_digits](#moneypunct__do_frac_digits).  \n  \n### Example  \n  \n```cpp  \n// moneypunct_frac_digits.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n#include <sstream>  \nusing namespace std;  \nint main( )  \n{  \n   locale loc( \"german_germany\" );  \n  \n   const moneypunct <char, true> &mpunct =   \n       use_facet <moneypunct <char, true> >(loc);  \n   for (unsigned int i = 0; i <mpunct.grouping( ).length( ); i++ )  \n   {  \n      cout << loc.name( ) << \" international grouping:\\n the \"  \n           << i <<\"th group to the left of the radix character \"  \n           << \"is of size \" << (int)(mpunct.grouping ( )[i])   \n           << endl;  \n   }  \n   cout << loc.name( ) << \" international frac_digits\\n to the right\"  \n        << \" of the radix character: \"  \n        << mpunct.frac_digits ( ) << endl << endl;  \n  \n   const moneypunct <char, false> &mpunct2 =   \n       use_facet <moneypunct <char, false> >(loc);  \n   for (unsigned int i = 0; i <mpunct2.grouping( ).length( ); i++ )  \n   {  \n      cout << loc.name( ) << \" domestic grouping:\\n the \"  \n           << i <<\"th group to the left of the radix character \"  \n           << \"is of size \" << (int)(mpunct2.grouping ( )[i])   \n           << endl;  \n   }  \n   cout << loc.name( ) << \" domestic frac_digits\\n to the right\"  \n        << \" of the radix character: \"  \n        << mpunct2.frac_digits ( ) << endl << endl;  \n}  \n```  \n  \n```Output  \nGerman_Germany.1252 international grouping:  \n the 0th group to the left of the radix character is of size 3  \nGerman_Germany.1252 international frac_digits  \n to the right of the radix character: 2  \n  \nGerman_Germany.1252 domestic grouping:  \n the 0th group to the left of the radix character is of size 3  \nGerman_Germany.1252 domestic frac_digits  \n to the right of the radix character: 2  \n```  \n  \n##  <a name=\"moneypunct__grouping\"></a>  moneypunct::grouping  \n Returns a locale-specific rule for determining how digits are grouped to the left of any decimal point.  \n  \n```  \nstring grouping() const;\n```  \n  \n### Return Value  \n A locale-specific rule for determining how digits are grouped to the left of any decimal point.  \n  \n### Remarks  \n The member function returns [do_grouping](#moneypunct__do_grouping).  \n  \n### Example  \n  \n```cpp  \n// moneypunct_grouping.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n#include <sstream>  \nusing namespace std;  \nint main( )  \n{  \n   locale loc( \"german_germany\" );  \n  \n   const moneypunct <char, true> &mpunct =   \n       use_facet <moneypunct <char, true> >( loc );  \n   for (unsigned int i = 0; i <mpunct.grouping( ).length( ); i++ )  \n   {  \n      cout << loc.name( ) << \" international grouping:\\n the \"  \n           << i <<\"th group to the left of the radix character \"  \n           << \"is of size \" << (int)(mpunct.grouping ( )[i])   \n           << endl;  \n   }  \n   cout << loc.name( ) << \" international frac_digits\\n to the right\"  \n        << \" of the radix character: \"  \n        << mpunct.frac_digits ( ) << endl << endl;  \n  \n   const moneypunct <char, false> &mpunct2 =   \n       use_facet <moneypunct <char, false> >( loc );  \n   for (unsigned int i = 0; i <mpunct2.grouping( ).length( ); i++ )  \n   {  \n      cout << loc.name( ) << \" domestic grouping:\\n the \"  \n           << i <<\"th group to the left of the radix character \"  \n           << \"is of size \" << (int)(mpunct2.grouping ( )[i])   \n           << endl;  \n   }  \n   cout << loc.name( ) << \" domestic frac_digits\\n to the right\"  \n        << \" of the radix character: \"  \n        << mpunct2.frac_digits ( ) << endl << endl;  \n}  \n```  \n  \n```Output  \nGerman_Germany.1252 international grouping:  \n the 0th group to the left of the radix character is of size 3  \nGerman_Germany.1252 international frac_digits  \n to the right of the radix character: 2  \n  \nGerman_Germany.1252 domestic grouping:  \n the 0th group to the left of the radix character is of size 3  \nGerman_Germany.1252 domestic frac_digits  \n to the right of the radix character: 2  \n```  \n  \n##  <a name=\"moneypunct__moneypunct\"></a>  moneypunct::moneypunct  \n Constructor of objects of type `moneypunct`.  \n  \n```  \nexplicit moneypunct(size_t _Refs = 0);\n```  \n  \n### Parameters  \n `_Refs`  \n Integer value used to specify the type of memory management for the object.  \n  \n### Remarks  \n The possible values for the `_Refs` parameter and their significance are:  \n  \n-   0: The lifetime of the object is managed by the locales that contain it.  \n  \n-   1: The lifetime of the object must be manually managed.  \n  \n-   \\> 0: These values are not defined.  \n  \n No direct examples are possible, because the destructor is protected.  \n  \n The constructor initializes its base object with [locale::facet](../standard-library/locale-class.md#facet_class)(_ *Refs*).  \n  \n##  <a name=\"moneypunct__neg_format\"></a>  moneypunct::neg_format  \n Returns a locale-specific rule for formatting outputs with negative amounts.  \n  \n```  \npattern neg_format() const;\n```  \n  \n### Return Value  \n A locale-specific rule for formatting outputs with negative amounts.  \n  \n### Remarks  \n The member function returns [do_neg_format](#moneypunct__do_neg_format).  \n  \n### Example  \n  \n```cpp  \n// moneypunct_neg_format.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n#include <sstream>  \n  \nusing namespace std;  \n  \nint main( ) {  \n   locale loc( \"german_germany\" );  \n  \n   const moneypunct <char, true> &mpunct =   \n      use_facet <moneypunct <char, true > >(loc);  \n   cout << loc.name( ) << \" international negative number format: \"  \n        << mpunct.neg_format( ).field[0]   \n        << mpunct.neg_format( ).field[1]   \n        << mpunct.neg_format( ).field[2]   \n        << mpunct.neg_format( ).field[3] << endl;  \n  \n   const moneypunct <char, false> &mpunct2 =   \n      use_facet <moneypunct <char, false> >(loc);  \n   cout << loc.name( ) << \" domestic negative number format: \"  \n        << mpunct2.neg_format( ).field[0]   \n        << mpunct2.neg_format( ).field[1]   \n        << mpunct2.neg_format( ).field[2]   \n        << mpunct2.neg_format( ).field[3] << endl;  \n}  \n```  \n  \n##  <a name=\"moneypunct__negative_sign\"></a>  moneypunct::negative_sign  \n Returns a locale-specific sequence of elements to use as a negative sign symbol.  \n  \n```  \nstring_type negative_sign() const;\n```  \n  \n### Return Value  \n Returns a locale-specific sequence of elements to use as a negative sign symbol.  \n  \n### Remarks  \n The member function returns [do_negative_sign](#moneypunct__do_negative_sign).  \n  \n### Example  \n  \n```cpp  \n// moneypunct_neg_sign.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n#include <sstream>  \n  \nusing namespace std;  \n  \nint main( )  \n{  \n   locale loc( \"german_germany\" );  \n  \n   const moneypunct <char, true> &mpunct =   \n      use_facet <moneypunct <char, true> >(loc);  \n   cout << loc.name( ) << \" international negative sign: \"  \n        << mpunct.negative_sign( ) << endl;  \n  \n   const moneypunct <char, false> &mpunct2 =   \n      use_facet <moneypunct <char, false> >(loc);  \n   cout << loc.name( ) << \" domestic negative sign: \"  \n        << mpunct2.negative_sign( ) << endl;  \n  \n   locale loc2( \"French\" );  \n  \n   const moneypunct <char, true> &mpunct3 =   \n      use_facet <moneypunct <char, true> >(loc2);  \n   cout << loc2.name( ) << \" international negative sign: \"  \n        << mpunct3.negative_sign( ) << endl;  \n  \n   const moneypunct <char, false> &mpunct4 =   \n      use_facet <moneypunct <char, false> >(loc2);  \n   cout << loc2.name( ) << \" domestic negative sign: \"  \n        << mpunct4.negative_sign( ) << endl;  \n};  \n```  \n  \n```Output  \nGerman_Germany.1252 international negative sign: -  \nGerman_Germany.1252 domestic negative sign: -  \nFrench_France.1252 international negative sign: -  \nFrench_France.1252 domestic negative sign: -  \n```  \n  \n##  <a name=\"moneypunct__pos_format\"></a>  moneypunct::pos_format  \n Returns a locale-specific rule for formatting outputs with positive amounts.  \n  \n```  \npattern pos_format() const;\n```  \n  \n### Return Value  \n A locale-specific rule for formatting outputs with positive amounts.  \n  \n### Remarks  \n The member function returns [do_pos_format](#moneypunct__do_pos_format).  \n  \n### Example  \n  \n```cpp  \n// moneypunct_pos_format.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n#include <sstream>  \n  \nusing namespace std;  \n  \nint main() {  \n   locale loc( \"german_germany\" );  \n  \n   const moneypunct <char, true> &mpunct =   \n      use_facet <moneypunct <char, true> >(loc);  \n   cout << loc.name( ) << \" international positive number format: \"  \n        << mpunct.pos_format( ).field[0]   \n        << mpunct.pos_format( ).field[1]   \n        << mpunct.pos_format( ).field[2]   \n        << mpunct.pos_format( ).field[3] << endl;  \n  \n   const moneypunct <char, false> &mpunct2 =   \n      use_facet <moneypunct <char, false> >(loc);  \n   cout << loc.name( ) << \" domestic positive number format: \"  \n        << mpunct2.pos_format( ).field[0]   \n        << mpunct2.pos_format( ).field[1]   \n        << mpunct2.pos_format( ).field[2]   \n        << mpunct2.pos_format( ).field[3] << endl;  \n}  \n```  \n  \n##  <a name=\"moneypunct__positive_sign\"></a>  moneypunct::positive_sign  \n Returns a locale-specific sequence of elements to use as a positive sign symbol.  \n  \n```  \nstring_type positive_sign() const;\n```  \n  \n### Return Value  \n A locale-specific sequence of elements to use as a positive sign symbol.  \n  \n### Remarks  \n The member function returns [do_positive_sign](#moneypunct__do_positive_sign).  \n  \n### Example  \n  \n```cpp  \n// moneypunct_pos_sign.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n#include <sstream>  \n  \nusing namespace std;  \n  \nint main( )  \n{  \n   locale loc( \"german_germany\" );  \n  \n   const moneypunct <char, true> &mpunct =   \n      use_facet <moneypunct <char, true > >(loc);  \n   cout << loc.name( ) << \" international positive sign:\"  \n        << mpunct.positive_sign( ) << endl;  \n  \n   const moneypunct <char, false> &mpunct2 =   \n      use_facet <moneypunct <char, false> >(loc);  \n   cout << loc.name( ) << \" domestic positive sign:\"  \n        << mpunct2.positive_sign( ) << endl;  \n  \n   locale loc2( \"French\" );  \n  \n   const moneypunct <char, true> &mpunct3 =   \n      use_facet <moneypunct <char, true> >(loc2);  \n   cout << loc2.name( ) << \" international positive sign:\"  \n        << mpunct3.positive_sign( ) << endl;  \n  \n   const moneypunct <char, false> &mpunct4 =   \n      use_facet <moneypunct <char, false> >(loc2);  \n   cout << loc2.name( ) << \" domestic positive sign:\"  \n        << mpunct4.positive_sign( ) << endl;  \n};  \n```  \n  \n```Output  \nGerman_Germany.1252 international positive sign:  \nGerman_Germany.1252 domestic positive sign:  \nFrench_France.1252 international positive sign:  \nFrench_France.1252 domestic positive sign:  \n```  \n  \n##  <a name=\"moneypunct__string_type\"></a>  moneypunct::string_type  \n A type that describes a string containing characters of type **CharType**.  \n  \n```  \ntypedef basic_string<CharType, Traits, Allocator> string_type;  \n```  \n  \n### Remarks  \n The type describes a specialization of template class [basic_string](../standard-library/basic-string-class.md) whose objects can store copies of the punctuation sequences.  \n  \n##  <a name=\"moneypunct__thousands_sep\"></a>  moneypunct::thousands_sep  \n Returns a locale-specific sequence of elements to use as a thousands separator symbol.  \n  \n```  \nCharType thousands_sep() const;\n```  \n  \n### Return Value  \n A locale-specific sequence of elements to use as a thousands separator  \n  \n### Remarks  \n The member function returns [do_thousands_sep](#moneypunct__do_thousands_sep).  \n  \n### Example  \n  \n```cpp  \n// moneypunct_thou_sep.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n#include <sstream>  \nusing namespace std;  \nint main( )  \n{  \n   locale loc( \"german_germany\" );  \n  \n   const moneypunct <char, true> &mpunct =   \n       use_facet <moneypunct <char, true > >(loc);  \n   cout << loc.name( ) << \" international thousands separator: \"  \n        << mpunct.thousands_sep( ) << endl;  \n  \n   const moneypunct <char, false> &mpunct2 =   \n      use_facet <moneypunct <char, false> >(loc);  \n   cout << loc.name( ) << \" domestic thousands separator: \"  \n        << mpunct2.thousands_sep( ) << endl << endl;  \n  \n   locale loc2( \"english_canada\" );  \n  \n   const moneypunct <char, true> &mpunct3 =   \n       use_facet <moneypunct <char, true> >(loc2);  \n   cout << loc2.name( ) << \" international thousands separator: \"  \n        << mpunct3.thousands_sep( ) << endl;  \n  \n   const moneypunct <char, false> &mpunct4 =   \n      use_facet <moneypunct <char, false> >(loc2);  \n   cout << loc2.name( ) << \" domestic thousands separator: \"  \n        << mpunct4.thousands_sep( ) << endl;  \n}  \n```  \n  \n```Output  \nGerman_Germany.1252 international thousands separator: .  \nGerman_Germany.1252 domestic thousands separator: .  \n  \nEnglish_Canada.1252 international thousands separator: ,  \nEnglish_Canada.1252 domestic thousands separator: ,  \n```  \n  \n## See Also  \n [\\<locale>](../standard-library/locale.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)\n\n"}