<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">60c9d8d084cf49c09a410be2e47ada0dd2d32b97</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\declarators-and-variable-declarations.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6480cf8485b1dae913d36084fc5296f4926a63fc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">539e610180a8713bd80b1c99915eb6d3556c5134</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Declarators and Variable Declarations | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Declarators and Variable Declarations</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The rest of this section describes the form and meaning of declarations for variable types summarized in this list.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In particular, the remaining sections explain how to declare the following:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Type of Variable</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Simple variables</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Single-value variables with integral or floating-point type</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Arrays</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Variables composed of a collection of elements with the same type</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Pointers</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Variables that point to other variables and contain variable locations (in the form of addresses) instead of values</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Enumeration variables</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Simple variables with integral type that hold one value from a set of named integer constants</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Structures</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Variables composed of a collection of values that can have different types</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Unions</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Variables composed of several values of different types that occupy the same storage space</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A declarator is the part of a declaration that specifies the name that is to be introduced into the program.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It can include modifiers such as <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> (pointer-to) and any of the Microsoft calling-convention keywords.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the declarator</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>is the type specifier, <ph id="ph1">`__declspec(thread)`</ph> and <ph id="ph2">`*`</ph> are the modifiers, and <ph id="ph3">`var`</ph> is the identifier's name.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You use declarators to declare arrays of values, pointers to values, and functions returning values of a specified type.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Declarators appear in the array and pointer declarations described later in this section.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>pointer<ept id="p1">*</ept> opt<bpt id="p2">*</bpt>direct-declarator<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>direct-declarator<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>identifier</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>(<ept id="p1">**</ept>  <bpt id="p2">*</bpt>declarator<ept id="p2">*</ept>  <bpt id="p3">**</bpt>)<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>direct-declarator<ept id="p1">*</ept>  <bpt id="p2">**</bpt>[<ept id="p2">**</ept>  <bpt id="p3">*</bpt>constant-expression<ept id="p3">*</ept> opt<bpt id="p4">**</bpt>]<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>direct-declarator<ept id="p1">*</ept>  <bpt id="p2">**</bpt>(<ept id="p2">**</ept>  <bpt id="p3">*</bpt>parameter-type-list<ept id="p3">*</ept>  <bpt id="p4">**</bpt>)<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>direct-declarator<ept id="p1">*</ept>  <bpt id="p2">**</bpt>(<ept id="p2">**</ept>  <bpt id="p3">*</bpt>identifier-list<ept id="p3">*</ept> opt<bpt id="p4">**</bpt>)<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> <bpt id="p2">*</bpt>type-qualifier-list<ept id="p2">*</ept> opt</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> <bpt id="p2">*</bpt>type-qualifier-list<ept id="p2">*</ept> opt</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>type-qualifier-list<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>type-qualifier</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>type-qualifier-list type-qualifier</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>See the syntax for <ph id="ph1">`declaration`</ph> in <bpt id="p1">[</bpt>Overview of Declarations<ept id="p1">](../c-language/overview-of-declarations.md)</ept> or <bpt id="p2">[</bpt>C Language Syntax Summary<ept id="p2">](../c-language/c-language-syntax-summary.md)</ept> for the syntax that references a <ph id="ph2">`declarator`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>When a declarator consists of an unmodified identifier, the item being declared has a base type.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If an asterisk (<bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept>) appears to the left of an identifier, the type is modified to a pointer type.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If the identifier is followed by brackets (<bpt id="p1">**</bpt>[ ]<ept id="p1">**</ept>), the type is modified to an array type.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If the identifier is followed by parentheses, the type is modified to a function type.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information about interpreting precedence within declarations, see <bpt id="p1">[</bpt>Interpreting More Complex Declarators<ept id="p1">](../c-language/interpreting-more-complex-declarators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Each declarator declares at least one identifier.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A declarator must include a type specifier to be a complete declaration.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The type specifier gives the type of the elements of an array type, the type of object addressed by a pointer type, or the return type of a function.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Array<ept id="p1">](../c-language/array-declarations.md)</ept> and <bpt id="p2">[</bpt>pointer<ept id="p2">](../c-language/pointer-declarations.md)</ept> declarations are discussed in more detail later in this section.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following examples illustrate a few simple forms of declarators:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The Microsoft C compiler does not limit the number of declarators that can modify an arithmetic, structure, or union type.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The number is limited only by available memory.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Declarations and Types</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>