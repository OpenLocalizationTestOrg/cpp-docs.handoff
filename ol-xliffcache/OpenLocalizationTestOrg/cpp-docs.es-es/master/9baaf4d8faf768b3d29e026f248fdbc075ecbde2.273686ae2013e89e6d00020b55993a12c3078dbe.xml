{"nodes":[{"pos":[12,46],"content":"CFrameWndEx Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CFrameWndEx Class | Microsoft Docs","pos":[0,34]}]},{"pos":[607,624],"content":"CFrameWndEx Class","linkify":"CFrameWndEx Class","nodes":[{"content":"CFrameWndEx Class","pos":[0,17]}]},{"content":"Implements the functionality of a Windows single document interface (SDI) overlapped or popup frame window, and provides members for managing the window.","pos":[625,778]},{"content":"It extends the <bpt id=\"p1\">[</bpt>CFrameWnd<ept id=\"p1\">](../../mfc/reference/cframewnd-class.md)</ept> class.","pos":[779,852],"source":" It extends the [CFrameWnd](../../mfc/reference/cframewnd-class.md) class."},{"pos":[861,867],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[930,937],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[947,961],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[968,972]},{"content":"Description","pos":[973,984]},{"pos":[1022,1097],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::ActiveItemRecalcLayout<ept id=\"p1\">](#cframewndex__activeitemrecalclayout)</ept>","source":"[CFrameWndEx::ActiveItemRecalcLayout](#cframewndex__activeitemrecalclayout)"},{"content":"Adjusts the layout of the OLE client item and the frame's client area.","pos":[1098,1168]},{"content":"This method is not used.","pos":[1200,1224]},{"pos":[1229,1274],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::AddPane<ept id=\"p1\">](#cframewndex__addpane)</ept>","source":"[CFrameWndEx::AddPane](#cframewndex__addpane)"},{"content":"Registers a control bar with the docking manager.","pos":[1275,1324]},{"pos":[1329,1398],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::AdjustDockingLayout<ept id=\"p1\">](#cframewndex__adjustdockinglayout)</ept>","source":"[CFrameWndEx::AdjustDockingLayout](#cframewndex__adjustdockinglayout)"},{"content":"Recalculates the layout of all panes that are docked to the frame window.","pos":[1399,1472]},{"pos":[1477,1548],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::DelayUpdateFrameMenu<ept id=\"p1\">](#cframewndex__delayupdateframemenu)</ept>","source":"[CFrameWndEx::DelayUpdateFrameMenu](#cframewndex__delayupdateframemenu)"},{"content":"Sets the frame menu and then updates it when command processing is idle.","pos":[1549,1621]},{"pos":[1626,1673],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::DockPane<ept id=\"p1\">](#cframewndex__dockpane)</ept>","source":"[CFrameWndEx::DockPane](#cframewndex__dockpane)"},{"content":"Docks the specified pane to the frame window.","pos":[1674,1719]},{"pos":[1724,1783],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::DockPaneLeftOf<ept id=\"p1\">](#cframewndex__dockpaneleftof)</ept>","source":"[CFrameWndEx::DockPaneLeftOf](#cframewndex__dockpaneleftof)"},{"content":"Docks one pane to the left of another pane.","pos":[1784,1827]},{"pos":[1832,1901],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::EnableAutoHidePanes<ept id=\"p1\">](#cframewndex__enableautohidepanes)</ept>","source":"[CFrameWndEx::EnableAutoHidePanes](#cframewndex__enableautohidepanes)"},{"content":"Enables the auto-hide mode for the panes when they are docked to the specified sides of the main frame window.","pos":[1902,2012]},{"pos":[2017,2074],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::EnableDocking<ept id=\"p1\">](#cframewndex__enabledocking)</ept>","source":"[CFrameWndEx::EnableDocking](#cframewndex__enabledocking)"},{"content":"Enables the docking of the panes that belong to the frame window.","pos":[2075,2140]},{"pos":[2145,2224],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::EnableFullScreenMainMenu<ept id=\"p1\">](#cframewndex__enablefullscreenmainmenu)</ept>","source":"[CFrameWndEx::EnableFullScreenMainMenu](#cframewndex__enablefullscreenmainmenu)"},{"content":"Shows or hides the main menu in a full screen mode.","pos":[2225,2276]},{"pos":[2281,2352],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::EnableFullScreenMode<ept id=\"p1\">](#cframewndex__enablefullscreenmode)</ept>","source":"[CFrameWndEx::EnableFullScreenMode](#cframewndex__enablefullscreenmode)"},{"content":"Enables the full screen mode for the frame window.","pos":[2353,2403]},{"pos":[2408,2477],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::EnableLoadDockState<ept id=\"p1\">](#cframewndex__enableloaddockstate)</ept>","source":"[CFrameWndEx::EnableLoadDockState](#cframewndex__enableloaddockstate)"},{"content":"Enables or disables the loading of the docking state.","pos":[2478,2531]},{"pos":[2536,2595],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::EnablePaneMenu<ept id=\"p1\">](#cframewndex__enablepanemenu)</ept>","source":"[CFrameWndEx::EnablePaneMenu](#cframewndex__enablepanemenu)"},{"content":"Enables or disables the automatic handling of the pane menu.","pos":[2596,2656]},{"pos":[2661,2720],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::GetActivePopup<ept id=\"p1\">](#cframewndex__getactivepopup)</ept>","source":"[CFrameWndEx::GetActivePopup](#cframewndex__getactivepopup)"},{"content":"Returns a pointer to the currently displayed pop-up menu.","pos":[2721,2778]},{"pos":[2783,2844],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::GetDefaultResId<ept id=\"p1\">](#cframewndex__getdefaultresid)</ept>","source":"[CFrameWndEx::GetDefaultResId](#cframewndex__getdefaultresid)"},{"content":"Returns the resource ID that you specified when the framework loaded the frame window.","pos":[2845,2931]},{"pos":[2936,3001],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::GetDockingManager<ept id=\"p1\">](#cframewndex__getdockingmanager)</ept>","source":"[CFrameWndEx::GetDockingManager](#cframewndex__getdockingmanager)"},{"pos":[3002,3114],"content":"Retrieves the <bpt id=\"p1\">[</bpt>CDockingManager Class<ept id=\"p1\">](../../mfc/reference/cdockingmanager-class.md)</ept> object for the frame window.","source":"Retrieves the [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md) object for the frame window."},{"pos":[3119,3170],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::GetMenuBar<ept id=\"p1\">](#cframewndex__getmenubar)</ept>","source":"[CFrameWndEx::GetMenuBar](#cframewndex__getmenubar)"},{"content":"Returns a pointer to the menu bar object attached to the frame window.","pos":[3171,3241]},{"pos":[3246,3291],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::GetPane<ept id=\"p1\">](#cframewndex__getpane)</ept>","source":"[CFrameWndEx::GetPane](#cframewndex__getpane)"},{"content":"Returns a pointer to the pane that has the specified ID.","pos":[3292,3348]},{"pos":[3353,3408],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::GetRibbonBar<ept id=\"p1\">](#cframewndex__getribbonbar)</ept>","source":"[CFrameWndEx::GetRibbonBar](#cframewndex__getribbonbar)"},{"content":"Retrieves the ribbon bar control for the frame.","pos":[3409,3456]},{"pos":[3461,3520],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::GetTearOffBars<ept id=\"p1\">](#cframewndex__gettearoffbars)</ept>","source":"[CFrameWndEx::GetTearOffBars](#cframewndex__gettearoffbars)"},{"content":"Returns a list of pane objects that are in a tear-off state.","pos":[3521,3581]},{"pos":[3586,3671],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::GetToolbarButtonToolTipText<ept id=\"p1\">](#cframewndex__gettoolbarbuttontooltiptext)</ept>","source":"[CFrameWndEx::GetToolbarButtonToolTipText](#cframewndex__gettoolbarbuttontooltiptext)"},{"content":"Called by the framework when the application displays the tooltip for a toolbar button.","pos":[3672,3759]},{"pos":[3764,3815],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::InsertPane<ept id=\"p1\">](#cframewndex__insertpane)</ept>","source":"[CFrameWndEx::InsertPane](#cframewndex__insertpane)"},{"content":"Registers a pane with the docking manager.","pos":[3816,3858]},{"pos":[3863,3918],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::IsFullScreen<ept id=\"p1\">](#cframewndex__isfullscreen)</ept>","source":"[CFrameWndEx::IsFullScreen](#cframewndex__isfullscreen)"},{"content":"Determines whether the frame window is in full screen mode.","pos":[3919,3978]},{"pos":[3983,4050],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::IsMenuBarAvailable<ept id=\"p1\">](#cframewndex__ismenubaravailable)</ept>","source":"[CFrameWndEx::IsMenuBarAvailable](#cframewndex__ismenubaravailable)"},{"content":"Determines whether the pointer to the menu bar object is valid.","pos":[4051,4114]},{"pos":[4119,4188],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::IsPointNearDockSite<ept id=\"p1\">](#cframewndex__ispointneardocksite)</ept>","source":"[CFrameWndEx::IsPointNearDockSite](#cframewndex__ispointneardocksite)"},{"content":"Indicates whether the point is located in an alignment zone.","pos":[4189,4249]},{"pos":[4254,4313],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::IsPrintPreview<ept id=\"p1\">](#cframewndex__isprintpreview)</ept>","source":"[CFrameWndEx::IsPrintPreview](#cframewndex__isprintpreview)"},{"content":"Indicates whether the frame window is in print preview mode.","pos":[4314,4374]},{"pos":[4379,4428],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::LoadFrame<ept id=\"p1\">](#cframewndex__loadframe)</ept>","source":"[CFrameWndEx::LoadFrame](#cframewndex__loadframe)"},{"content":"This method is called after construction to create the frame window and load its resources.","pos":[4429,4520]},{"pos":[4525,4596],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::NegotiateBorderSpace<ept id=\"p1\">](#cframewndex__negotiateborderspace)</ept>","source":"[CFrameWndEx::NegotiateBorderSpace](#cframewndex__negotiateborderspace)"},{"content":"Implements OLE client border negotiation.","pos":[4597,4638]},{"pos":[4643,4694],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnActivate<ept id=\"p1\">](#cframewndex__onactivate)</ept>","source":"[CFrameWndEx::OnActivate](#cframewndex__onactivate)"},{"content":"The framework calls this method when user input is switched to or away from the frame.","pos":[4695,4781]},{"pos":[4786,4843],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnActivateApp<ept id=\"p1\">](#cframewndex__onactivateapp)</ept>","source":"[CFrameWndEx::OnActivateApp](#cframewndex__onactivateapp)"},{"content":"Called by the framework when the application is either selected or deselected.","pos":[4844,4922]},{"pos":[4927,5000],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnChangeVisualManager<ept id=\"p1\">](#cframewndex__onchangevisualmanager)</ept>","source":"[CFrameWndEx::OnChangeVisualManager](#cframewndex__onchangevisualmanager)"},{"content":"Called by the framework when a change to the frame requires a change to the visual manager.","pos":[5001,5092]},{"pos":[5097,5142],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnClose<ept id=\"p1\">](#cframewndex__onclose)</ept>","source":"[CFrameWndEx::OnClose](#cframewndex__onclose)"},{"content":"The framework calls this method to close the frame.","pos":[5143,5194]},{"pos":[5199,5266],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnCloseDockingPane<ept id=\"p1\">](#cframewndex__onclosedockingpane)</ept>","source":"[CFrameWndEx::OnCloseDockingPane](#cframewndex__onclosedockingpane)"},{"pos":[5267,5351],"content":"Called by the framework when the user clicks the <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> button on a docking pane.","source":"Called by the framework when the user clicks the **Close** button on a docking pane."},{"pos":[5356,5419],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnCloseMiniFrame<ept id=\"p1\">](#cframewndex__oncloseminiframe)</ept>","source":"[CFrameWndEx::OnCloseMiniFrame](#cframewndex__oncloseminiframe)"},{"pos":[5420,5518],"content":"Called by the framework when the user clicks the <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> button on a floating mini frame window.","source":"Called by the framework when the user clicks the **Close** button on a floating mini frame window."},{"pos":[5523,5586],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnClosePopupMenu<ept id=\"p1\">](#cframewndex__onclosepopupmenu)</ept>","source":"[CFrameWndEx::OnClosePopupMenu](#cframewndex__onclosepopupmenu)"},{"content":"Called by the framework when an active pop-up menu processes a WM_DESTROY message.","pos":[5587,5669]},{"pos":[5674,5721],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnCmdMsg<ept id=\"p1\">](#cframewndex__oncmdmsg)</ept>","source":"[CFrameWndEx::OnCmdMsg](#cframewndex__oncmdmsg)"},{"content":"Dispatches command messages.","pos":[5722,5750]},{"pos":[5755,5812],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnContextHelp<ept id=\"p1\">](#cframewndex__oncontexthelp)</ept>","source":"[CFrameWndEx::OnContextHelp](#cframewndex__oncontexthelp)"},{"content":"Called by the framework to display context related help.","pos":[5813,5869]},{"pos":[5874,5921],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnCreate<ept id=\"p1\">](#cframewndex__oncreate)</ept>","source":"[CFrameWndEx::OnCreate](#cframewndex__oncreate)"},{"content":"Called by the framework after the frame is created.","pos":[5922,5973]},{"pos":[5978,6027],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnDestroy<ept id=\"p1\">](#cframewndex__ondestroy)</ept>","source":"[CFrameWndEx::OnDestroy](#cframewndex__ondestroy)"},{"content":"Called by the framework when the frame is destroyed.","pos":[6028,6080]},{"pos":[6085,6146],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnDrawMenuImage<ept id=\"p1\">](#cframewndex__ondrawmenuimage)</ept>","source":"[CFrameWndEx::OnDrawMenuImage](#cframewndex__ondrawmenuimage)"},{"content":"Called by the framework when the application draws the image associated with a menu item.","pos":[6147,6236]},{"pos":[6241,6300],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnDrawMenuLogo<ept id=\"p1\">](#cframewndex__ondrawmenulogo)</ept>","source":"[CFrameWndEx::OnDrawMenuLogo](#cframewndex__ondrawmenulogo)"},{"pos":[6301,6446],"content":"Called by the framework when a <ph id=\"ph1\">`CMFCPopupMenu`</ph> object processes a <bpt id=\"p1\">[</bpt>WM_PAINT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145213)</ept> message.","source":"Called by the framework when a `CMFCPopupMenu` object processes a [WM_PAINT](http://msdn.microsoft.com/library/windows/desktop/dd145213) message."},{"pos":[6451,6528],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnDWMCompositionChanged<ept id=\"p1\">](#cframewndex__ondwmcompositionchanged)</ept>","source":"[CFrameWndEx::OnDWMCompositionChanged](#cframewndex__ondwmcompositionchanged)"},{"content":"Called by the framework when Desktop Window Manager (DWM) composition has been enabled or disabled.","pos":[6529,6628]},{"pos":[6633,6692],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnExitSizeMove<ept id=\"p1\">](#cframewndex__onexitsizemove)</ept>","source":"[CFrameWndEx::OnExitSizeMove](#cframewndex__onexitsizemove)"},{"content":"Called by the framework when the frame stops moving or resizing.","pos":[6693,6757]},{"pos":[6762,6823],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnGetMinMaxInfo<ept id=\"p1\">](#cframewndex__ongetminmaxinfo)</ept>","source":"[CFrameWndEx::OnGetMinMaxInfo](#cframewndex__ongetminmaxinfo)"},{"content":"Called by the framework when the frame is resized to set window dimension limits.","pos":[6824,6905]},{"pos":[6910,6975],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnIdleUpdateCmdUI<ept id=\"p1\">](#cframewndex__onidleupdatecmdui)</ept>","source":"[CFrameWndEx::OnIdleUpdateCmdUI](#cframewndex__onidleupdatecmdui)"},{"content":"Called by the framework to update the frame display when command processing is idle.","pos":[6976,7060]},{"pos":[7065,7122],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnLButtonDown<ept id=\"p1\">](#cframewndex__onlbuttondown)</ept>","source":"[CFrameWndEx::OnLButtonDown](#cframewndex__onlbuttondown)"},{"content":"The framework calls this method when the user presses the left mouse button.","pos":[7123,7199]},{"pos":[7204,7257],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnLButtonUp<ept id=\"p1\">](#cframewndex__onlbuttonup)</ept>","source":"[CFrameWndEx::OnLButtonUp](#cframewndex__onlbuttonup)"},{"content":"The framework calls this method when the user releases the left mouse button.","pos":[7258,7335]},{"pos":[7340,7417],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnMenuButtonToolHitTest<ept id=\"p1\">](#cframewndex__onmenubuttontoolhittest)</ept>","source":"[CFrameWndEx::OnMenuButtonToolHitTest](#cframewndex__onmenubuttontoolhittest)"},{"pos":[7418,7511],"content":"Called by the framework when a <ph id=\"ph1\">`CMFCToolBarButton`</ph> object processes a <ph id=\"ph2\">`WM_NCHITTEST`</ph> message.","source":"Called by the framework when a `CMFCToolBarButton` object processes a `WM_NCHITTEST` message."},{"pos":[7516,7567],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnMenuChar<ept id=\"p1\">](#cframewndex__onmenuchar)</ept>","source":"[CFrameWndEx::OnMenuChar](#cframewndex__onmenuchar)"},{"content":"Called by the framework when a menu is displayed and the user presses a key that does not correspond to a command.","pos":[7568,7682]},{"pos":[7687,7740],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnMouseMove<ept id=\"p1\">](#cframewndex__onmousemove)</ept>","source":"[CFrameWndEx::OnMouseMove](#cframewndex__onmousemove)"},{"content":"The framework calls this method when the pointer moves.","pos":[7741,7796]},{"pos":[7801,7862],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnMoveMiniFrame<ept id=\"p1\">](#cframewndex__onmoveminiframe)</ept>","source":"[CFrameWndEx::OnMoveMiniFrame](#cframewndex__onmoveminiframe)"},{"content":"Called by the framework when a pane window moves.","pos":[7863,7912]},{"pos":[7917,7972],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnNcActivate<ept id=\"p1\">](#cframewndex__onncactivate)</ept>","source":"[CFrameWndEx::OnNcActivate](#cframewndex__onncactivate)"},{"content":"Called by the framework when the non-client area of the frame must be redrawn to indicate a change in the active state.","pos":[7973,8092]},{"pos":[8097,8152],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnNcCalcSize<ept id=\"p1\">](#cframewndex__onnccalcsize)</ept>","source":"[CFrameWndEx::OnNcCalcSize](#cframewndex__onnccalcsize)"},{"content":"Called by the framework when the size and position of the client area must be calculated.","pos":[8153,8242]},{"pos":[8247,8300],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnNcHitTest<ept id=\"p1\">](#cframewndex__onnchittest)</ept>","source":"[CFrameWndEx::OnNcHitTest](#cframewndex__onnchittest)"},{"content":"Called by the framework when the pointer moves or when a mouse button is pressed or released.","pos":[8301,8394]},{"pos":[8399,8456],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnNcMouseMove<ept id=\"p1\">](#cframewndex__onncmousemove)</ept>","source":"[CFrameWndEx::OnNcMouseMove](#cframewndex__onncmousemove)"},{"content":"Called by the framework when the pointer moves in a non-client area.","pos":[8457,8525]},{"pos":[8530,8579],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnNcPaint<ept id=\"p1\">](#cframewndex__onncpaint)</ept>","source":"[CFrameWndEx::OnNcPaint](#cframewndex__onncpaint)"},{"content":"Called by the framework when the non-client area must be painted.","pos":[8580,8645]},{"pos":[8650,8703],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnPaneCheck<ept id=\"p1\">](#cframewndex__onpanecheck)</ept>","source":"[CFrameWndEx::OnPaneCheck](#cframewndex__onpanecheck)"},{"content":"Called by the framework to control the visibility of a pane.","pos":[8704,8764]},{"pos":[8769,8836],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnPostPreviewFrame<ept id=\"p1\">](#cframewndex__onpostpreviewframe)</ept>","source":"[CFrameWndEx::OnPostPreviewFrame](#cframewndex__onpostpreviewframe)"},{"content":"Called by the framework when the user has changed the print preview mode.","pos":[8837,8910]},{"pos":[8915,8978],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnPowerBroadcast<ept id=\"p1\">](#cframewndex__onpowerbroadcast)</ept>","source":"[CFrameWndEx::OnPowerBroadcast](#cframewndex__onpowerbroadcast)"},{"content":"Called by the framework when a power management event occurs.","pos":[8979,9040]},{"pos":[9045,9094],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnSetMenu<ept id=\"p1\">](#cframewndex__onsetmenu)</ept>","source":"[CFrameWndEx::OnSetMenu](#cframewndex__onsetmenu)"},{"content":"Called by the framework to replace the frame window menu.","pos":[9095,9152]},{"pos":[9157,9220],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnSetPreviewMode<ept id=\"p1\">](#cframewndex__onsetpreviewmode)</ept>","source":"[CFrameWndEx::OnSetPreviewMode](#cframewndex__onsetpreviewmode)"},{"content":"Called by the framework to set the print preview mode for the frame.","pos":[9221,9289]},{"pos":[9294,9343],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnSetText<ept id=\"p1\">](#cframewndex__onsettext)</ept>","source":"[CFrameWndEx::OnSetText](#cframewndex__onsettext)"},{"content":"Called by the framework to set the text of a window.","pos":[9344,9396]},{"pos":[9401,9470],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnShowCustomizePane<ept id=\"p1\">](#cframewndex__onshowcustomizepane)</ept>","source":"[CFrameWndEx::OnShowCustomizePane](#cframewndex__onshowcustomizepane)"},{"content":"Called by the framework when a quick customize pane is enabled.","pos":[9471,9534]},{"pos":[9539,9592],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnShowPanes<ept id=\"p1\">](#cframewndex__onshowpanes)</ept>","source":"[CFrameWndEx::OnShowPanes](#cframewndex__onshowpanes)"},{"content":"Called by the framework to show or hide panes.","pos":[9593,9639]},{"pos":[9644,9705],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnShowPopupMenu<ept id=\"p1\">](#cframewndex__onshowpopupmenu)</ept>","source":"[CFrameWndEx::OnShowPopupMenu](#cframewndex__onshowpopupmenu)"},{"content":"Called by the framework when a pop-up menu is enabled.","pos":[9706,9760]},{"pos":[9765,9808],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnSize<ept id=\"p1\">](#cframewndex__onsize)</ept>","source":"[CFrameWndEx::OnSize](#cframewndex__onsize)"},{"content":"The framework calls this method after the frame's size changes.","pos":[9809,9872]},{"pos":[9877,9924],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnSizing<ept id=\"p1\">](#cframewndex__onsizing)</ept>","source":"[CFrameWndEx::OnSizing](#cframewndex__onsizing)"},{"content":"The framework calls this method when the user resizes the frame.","pos":[9925,9989]},{"pos":[9994,10057],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnSysColorChange<ept id=\"p1\">](#cframewndex__onsyscolorchange)</ept>","source":"[CFrameWndEx::OnSysColorChange](#cframewndex__onsyscolorchange)"},{"content":"Called by the framework when the system colors change.","pos":[10058,10112]},{"pos":[10117,10174],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnTearOffMenu<ept id=\"p1\">](#cframewndex__ontearoffmenu)</ept>","source":"[CFrameWndEx::OnTearOffMenu](#cframewndex__ontearoffmenu)"},{"content":"Called by the framework when a menu that has a tear-off bar is enabled.","pos":[10175,10246]},{"pos":[10251,10322],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnToolbarContextMenu<ept id=\"p1\">](#cframewndex__ontoolbarcontextmenu)</ept>","source":"[CFrameWndEx::OnToolbarContextMenu](#cframewndex__ontoolbarcontextmenu)"},{"content":"Called by the framework to build a toolbar context menu.","pos":[10323,10379]},{"pos":[10384,10451],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnToolbarCreateNew<ept id=\"p1\">](#cframewndex__ontoolbarcreatenew)</ept>","source":"[CFrameWndEx::OnToolbarCreateNew](#cframewndex__ontoolbarcreatenew)"},{"content":"The framework calls this method to create a new toolbar.","pos":[10452,10508]},{"pos":[10513,10574],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnToolbarDelete<ept id=\"p1\">](#cframewndex__ontoolbardelete)</ept>","source":"[CFrameWndEx::OnToolbarDelete](#cframewndex__ontoolbardelete)"},{"content":"Called by the framework when a toolbar is deleted.","pos":[10575,10625]},{"pos":[10630,10695],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnUpdateFrameMenu<ept id=\"p1\">](#cframewndex__onupdateframemenu)</ept>","source":"[CFrameWndEx::OnUpdateFrameMenu](#cframewndex__onupdateframemenu)"},{"content":"Called by the framework to set the frame menu.","pos":[10696,10742]},{"pos":[10747,10814],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnUpdateFrameTitle<ept id=\"p1\">](#cframewndex__onupdateframetitle)</ept>","source":"[CFrameWndEx::OnUpdateFrameTitle](#cframewndex__onupdateframetitle)"},{"content":"The framework calls this method to update the title bar of the frame window.","pos":[10815,10891]},{"pos":[10896,10959],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnUpdatePaneMenu<ept id=\"p1\">](#cframewndex__onupdatepanemenu)</ept>","source":"[CFrameWndEx::OnUpdatePaneMenu](#cframewndex__onupdatepanemenu)"},{"content":"Called by the framework to update the pane menu.","pos":[10960,11008]},{"pos":[11013,11080],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::OnWindowPosChanged<ept id=\"p1\">](#cframewndex__onwindowposchanged)</ept>","source":"[CFrameWndEx::OnWindowPosChanged](#cframewndex__onwindowposchanged)"},{"content":"Called by the framework when the frame size, position, or z-order has changed because of a call to a window management method.","pos":[11081,11207]},{"pos":[11212,11269],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::PaneFromPoint<ept id=\"p1\">](#cframewndex__panefrompoint)</ept>","source":"[CFrameWndEx::PaneFromPoint](#cframewndex__panefrompoint)"},{"content":"Returns the docking pane that contains the specified point.","pos":[11270,11329]},{"pos":[11334,11403],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::PreTranslateMessage<ept id=\"p1\">](#cframewndex__pretranslatemessage)</ept>","source":"[CFrameWndEx::PreTranslateMessage](#cframewndex__pretranslatemessage)"},{"content":"Handles specific window messages before they are dispatched.","pos":[11404,11464]},{"pos":[11469,11524],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::RecalcLayout<ept id=\"p1\">](#cframewndex__recalclayout)</ept>","source":"[CFrameWndEx::RecalcLayout](#cframewndex__recalclayout)"},{"content":"Adjusts the layout of the frame and its child windows.","pos":[11525,11579]},{"pos":[11584,11665],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::RemovePaneFromDockManager<ept id=\"p1\">](#cframewndex__removepanefromdockmanager)</ept>","source":"[CFrameWndEx::RemovePaneFromDockManager](#cframewndex__removepanefromdockmanager)"},{"content":"Unregisters a pane and removes it from the internal list in the docking manager.","pos":[11666,11746]},{"pos":[11751,11806],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::SetDockState<ept id=\"p1\">](#cframewndex__setdockstate)</ept>","source":"[CFrameWndEx::SetDockState](#cframewndex__setdockstate)"},{"content":"Restores the docking layout to the docking state stored in the registry.","pos":[11807,11879]},{"pos":[11884,11955],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::SetPrintPreviewFrame<ept id=\"p1\">](#cframewndex__setprintpreviewframe)</ept>","source":"[CFrameWndEx::SetPrintPreviewFrame](#cframewndex__setprintpreviewframe)"},{"content":"Sets the print preview frame window.","pos":[11956,11992]},{"pos":[11997,12060],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::SetupToolbarMenu<ept id=\"p1\">](#cframewndex__setuptoolbarmenu)</ept>","source":"[CFrameWndEx::SetupToolbarMenu](#cframewndex__setuptoolbarmenu)"},{"content":"Inserts user-defined commands into a toolbar menu.","pos":[12061,12111]},{"pos":[12116,12175],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::ShowFullScreen<ept id=\"p1\">](#cframewndex__showfullscreen)</ept>","source":"[CFrameWndEx::ShowFullScreen](#cframewndex__showfullscreen)"},{"content":"Switches the main frame between the full screen and the regular modes.","pos":[12176,12246]},{"pos":[12251,12298],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::ShowPane<ept id=\"p1\">](#cframewndex__showpane)</ept>","source":"[CFrameWndEx::ShowPane](#cframewndex__showpane)"},{"content":"Shows or hides the specified pane.","pos":[12299,12333]},{"pos":[12338,12395],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::UpdateCaption<ept id=\"p1\">](#cframewndex__updatecaption)</ept>","source":"[CFrameWndEx::UpdateCaption](#cframewndex__updatecaption)"},{"content":"Called by the framework to update the window frame caption.","pos":[12396,12455]},{"pos":[12460,12505],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx::WinHelp<ept id=\"p1\">](#cframewndex__winhelp)</ept>","source":"[CFrameWndEx::WinHelp](#cframewndex__winhelp)"},{"pos":[12506,12571],"content":"Invokes either the <ph id=\"ph1\">`WinHelp`</ph> application or context related help.","source":"Invokes either the `WinHelp` application or context related help."},{"pos":[12581,12588],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates how to inherit a class from the <ph id=\"ph1\">`CFrameWndEx`</ph> class.","pos":[12592,12679],"source":"The following example demonstrates how to inherit a class from the `CFrameWndEx` class."},{"content":"The example illustrates the method signatures in the subclass, and how to override the <ph id=\"ph1\">`OnShowPopupMenu`</ph> method.","pos":[12680,12792],"source":" The example illustrates the method signatures in the subclass, and how to override the `OnShowPopupMenu` method."},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>Word Pad sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[12793,12873],"source":" This code snippet is part of the [Word Pad sample](../../visual-cpp-samples.md)."},{"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_WordPad#3<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cframewndex-class_1.h)</ept><ept id=\"p1\">]</ept>","pos":[12880,12969],"source":"[!code-cpp[NVC_MFC_WordPad#3](../../mfc/reference/codesnippet/cpp/cframewndex-class_1.h)]"},{"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_WordPad#4<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cframewndex-class_2.cpp)</ept><ept id=\"p1\">]</ept>","pos":[12972,13063],"source":"[!code-cpp[NVC_MFC_WordPad#4](../../mfc/reference/codesnippet/cpp/cframewndex-class_2.cpp)]"},{"pos":[13072,13093],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[13097,13144],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[13151,13204],"content":"<bpt id=\"p1\">[</bpt>CCmdTarget<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept>","source":"[CCmdTarget](../../mfc/reference/ccmdtarget-class.md)"},{"pos":[13211,13252],"content":"<bpt id=\"p1\">[</bpt>CWnd<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept>","source":"[CWnd](../../mfc/reference/cwnd-class.md)"},{"pos":[13259,13310],"content":"<bpt id=\"p1\">[</bpt>CFrameWnd<ept id=\"p1\">](../../mfc/reference/cframewnd-class.md)</ept>","source":"[CFrameWnd](../../mfc/reference/cframewnd-class.md)"},{"pos":[13317,13372],"content":"<bpt id=\"p1\">[</bpt>CFrameWndEx<ept id=\"p1\">](../../mfc/reference/cframewndex-class.md)</ept>","source":"[CFrameWndEx](../../mfc/reference/cframewndex-class.md)"},{"pos":[13381,13393],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[13397,13424],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxframewndex.h","source":"**Header:** afxframewndex.h"},{"pos":[13434,13521],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__activeitemrecalclayout\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::ActiveItemRecalcLayout","linkify":"<a name=\"cframewndex__activeitemrecalclayout\"></a>  CFrameWndEx::ActiveItemRecalcLayout","source":"<a name=\"cframewndex__activeitemrecalclayout\"></a>  CFrameWndEx::ActiveItemRecalcLayout"},{"content":"Adjusts the layout of the OLE client item and the frame's client area.","pos":[13525,13595]},{"pos":[13651,13658],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[13668,13725],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__addpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::AddPane","linkify":"<a name=\"cframewndex__addpane\"></a>  CFrameWndEx::AddPane","source":"<a name=\"cframewndex__addpane\"></a>  CFrameWndEx::AddPane"},{"content":"Registers a control bar with the docking manager.","pos":[13729,13778]},{"pos":[13869,13879],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pControlBar`</ph>","pos":[13883,13901],"source":"[in] `pControlBar`"},{"content":"A control bar pane to register.","pos":[13905,13936]},{"content":"[in] <ph id=\"ph1\">`bTail`</ph>","pos":[13943,13955],"source":"[in] `bTail`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if you want to add the control bar pane to the end of the list; <ph id=\"ph2\">`FALSE`</ph> otherwise.","pos":[13958,14048],"source":" `TRUE` if you want to add the control bar pane to the end of the list; `FALSE` otherwise."},{"pos":[14058,14070],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[14074,14147],"content":"<ph id=\"ph1\">`TRUE`</ph> if the control bar was successfully registered; <ph id=\"ph2\">`FALSE`</ph> otherwise.","source":"`TRUE` if the control bar was successfully registered; `FALSE` otherwise."},{"pos":[14157,14238],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__adjustdockinglayout\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::AdjustDockingLayout","linkify":"<a name=\"cframewndex__adjustdockinglayout\"></a>  CFrameWndEx::AdjustDockingLayout","source":"<a name=\"cframewndex__adjustdockinglayout\"></a>  CFrameWndEx::AdjustDockingLayout"},{"content":"Recalculates the layout of all panes that are docked to the frame window.","pos":[14242,14315]},{"pos":[14390,14400],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A handle to a structure that contains the positions of multiple windows.","pos":[14414,14486]},{"content":".","pos":[14487,14488]},{"pos":[14498,14505],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14509,14639],"content":"The hdwp structure is initialized by the <bpt id=\"p1\">[</bpt>BeginDeferWindowPos<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632672)</ept> method.","source":"The hdwp structure is initialized by the [BeginDeferWindowPos](http://msdn.microsoft.com/library/windows/desktop/ms632672) method."},{"pos":[14649,14732],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__delayupdateframemenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::DelayUpdateFrameMenu","linkify":"<a name=\"cframewndex__delayupdateframemenu\"></a>  CFrameWndEx::DelayUpdateFrameMenu","source":"<a name=\"cframewndex__delayupdateframemenu\"></a>  CFrameWndEx::DelayUpdateFrameMenu"},{"content":"Sets the frame menu and then updates it when command processing is idle.","pos":[14736,14808]},{"pos":[14884,14894],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`hMenuAlt`</ph>","pos":[14898,14913],"source":"[in] `hMenuAlt`"},{"content":"Handle to an alternative menu.","pos":[14917,14947]},{"pos":[14957,14964],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14974,15033],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__dockpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::DockPane","linkify":"<a name=\"cframewndex__dockpane\"></a>  CFrameWndEx::DockPane","source":"<a name=\"cframewndex__dockpane\"></a>  CFrameWndEx::DockPane"},{"content":"Docks the specified pane to the frame window.","pos":[15037,15082]},{"pos":[15196,15206],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pBar`</ph>","pos":[15210,15221],"source":"[in] `pBar`"},{"content":"A pointer to the control bar to be docked.","pos":[15225,15267]},{"content":"[in] <ph id=\"ph1\">`nDockBarID`</ph>","pos":[15274,15291],"source":"[in] `nDockBarID`"},{"content":"The ID of the side of the frame window to dock to.","pos":[15295,15345]},{"content":"[in] <ph id=\"ph1\">`lpRect`</ph>","pos":[15352,15365],"source":"[in] `lpRect`"},{"content":"A pointer to a constant Rect structure that specifies the window's screen position and size.","pos":[15369,15461]},{"pos":[15471,15478],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[15482,15546],"content":"The <ph id=\"ph1\">`nDockBarID`</ph> parameter can have one of the following values:","source":"The `nDockBarID` parameter can have one of the following values:"},{"content":"AFX_IDW_DOCKBAR_TOP","pos":[15556,15575]},{"content":"AFX_IDW_DOCKBAR_BOTTOM","pos":[15585,15607]},{"content":"AFX_IDW_DOCKBAR_LEFT","pos":[15617,15637]},{"content":"AFX_IDW_DOCKBAR_RIGHT","pos":[15647,15668]},{"pos":[15678,15749],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__dockpaneleftof\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::DockPaneLeftOf","linkify":"<a name=\"cframewndex__dockpaneleftof\"></a>  CFrameWndEx::DockPaneLeftOf","source":"<a name=\"cframewndex__dockpaneleftof\"></a>  CFrameWndEx::DockPaneLeftOf"},{"content":"Docks the specified pane to the left of another pane.","pos":[15753,15806]},{"pos":[15892,15902],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pBar`</ph>","pos":[15906,15917],"source":"[in] `pBar`"},{"content":"A pointer to the pane object to be docked.","pos":[15921,15963]},{"content":"[in] <ph id=\"ph1\">`pLeftOf`</ph>","pos":[15970,15984],"source":"[in] `pLeftOf`"},{"content":"A pointer to the pane to the left of which to dock the pane specified by <ph id=\"ph1\">`pBar`</ph>.","pos":[15988,16068],"source":" A pointer to the pane to the left of which to dock the pane specified by `pBar`."},{"pos":[16078,16090],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`TRUE`</ph> if <ph id=\"ph2\">`pBar`</ph> is docked successfully.","pos":[16094,16134],"source":"`TRUE` if `pBar` is docked successfully."},{"content":"<ph id=\"ph1\">`FALSE`</ph> otherwise.","pos":[16135,16153],"source":"`FALSE` otherwise."},{"pos":[16163,16170],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[16174,16315],"content":"The method takes the toolbar specified by the <ph id=\"ph1\">`pBar`</ph> parameter and docks it at the left side of the toolbar specified by <ph id=\"ph2\">`pLeftOf`</ph> parameter.","source":"The method takes the toolbar specified by the `pBar` parameter and docks it at the left side of the toolbar specified by `pLeftOf` parameter."},{"pos":[16325,16406],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__enableautohidepanes\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::EnableAutoHidePanes","linkify":"<a name=\"cframewndex__enableautohidepanes\"></a>  CFrameWndEx::EnableAutoHidePanes","source":"<a name=\"cframewndex__enableautohidepanes\"></a>  CFrameWndEx::EnableAutoHidePanes"},{"content":"Enables auto-hide mode for the pane when it is docked to the specified side of the main frame window.","pos":[16410,16511]},{"pos":[16581,16591],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`dwDockStyle`</ph>","pos":[16595,16613],"source":"[in] `dwDockStyle`"},{"content":"Specifies the side of the main frame window to which to dock the pane.","pos":[16617,16687]},{"pos":[16697,16709],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16713,16836],"content":"<ph id=\"ph1\">`TRUE`</ph> if a bar pane is successfully docked to the frame window side that is specified by <ph id=\"ph2\">`dwDockStyle`</ph>, <ph id=\"ph3\">`FALSE`</ph> otherwise.","source":"`TRUE` if a bar pane is successfully docked to the frame window side that is specified by `dwDockStyle`, `FALSE` otherwise."},{"pos":[16846,16853],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[16857,16908],"content":"<ph id=\"ph1\">`dwDockStyle`</ph> can have one of the following values:","source":"`dwDockStyle` can have one of the following values:"},{"content":"CBRS_ALIGN_TOP: allows the control bar to be docked to the top of the client area of a frame window.","pos":[16918,17018]},{"content":"CBRS_ALIGN_BOTTOM: allows the control bar to be docked to the bottom of the client area of a frame window.","pos":[17028,17134]},{"content":"CBRS_ALIGN_LEFT: allows the control bar to be docked to the left side of the client area of a frame window.","pos":[17144,17251]},{"content":"CBRS_ALIGN_RIGHT: allows the control bar to be docked to the right side of the client area of a frame window.","pos":[17261,17370]},{"pos":[17380,17449],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__enabledocking\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::EnableDocking","linkify":"<a name=\"cframewndex__enabledocking\"></a>  CFrameWndEx::EnableDocking","source":"<a name=\"cframewndex__enabledocking\"></a>  CFrameWndEx::EnableDocking"},{"content":"Enables the docking of the panes of the frame window.","pos":[17453,17506]},{"pos":[17570,17580],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`dwDockStyle`</ph>","pos":[17584,17602],"source":"[in] `dwDockStyle`"},{"content":"Specifies the side of the main frame window where the pane bar docks.","pos":[17606,17675]},{"pos":[17685,17697],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`TRUE`</ph> if a bar pane can be successfully docked at the specified side.","pos":[17701,17771],"source":"`TRUE` if a bar pane can be successfully docked at the specified side."},{"content":"<ph id=\"ph1\">`FALSE`</ph> otherwise.","pos":[17772,17790],"source":"`FALSE` otherwise."},{"pos":[17800,17807],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17811,17876],"content":"The <ph id=\"ph1\">`dwDockStyle`</ph> parameter can have one of the following values:","source":"The `dwDockStyle` parameter can have one of the following values:"},{"content":"CBRS_ALIGN_TOP","pos":[17886,17900]},{"content":"CBRS_ALIGN_BOTTOM","pos":[17910,17927]},{"content":"CBRS_ALIGN_LEFT","pos":[17937,17952]},{"content":"CBRS_ALIGN_RIGHT","pos":[17962,17978]},{"pos":[17988,18079],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__enablefullscreenmainmenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::EnableFullScreenMainMenu","linkify":"<a name=\"cframewndex__enablefullscreenmainmenu\"></a>  CFrameWndEx::EnableFullScreenMainMenu","source":"<a name=\"cframewndex__enablefullscreenmainmenu\"></a>  CFrameWndEx::EnableFullScreenMainMenu"},{"content":"Shows or hides the main menu in a full screen mode.","pos":[18083,18134]},{"pos":[18208,18218],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bEnableMenu`</ph>","pos":[18222,18240],"source":"[in] `bEnableMenu`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to show the main menu in a full screen mode, <ph id=\"ph2\">`FALSE`</ph> otherwise.","pos":[18243,18314],"source":" `TRUE` to show the main menu in a full screen mode, `FALSE` otherwise."},{"pos":[18324,18407],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__enablefullscreenmode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::EnableFullScreenMode","linkify":"<a name=\"cframewndex__enablefullscreenmode\"></a>  CFrameWndEx::EnableFullScreenMode","source":"<a name=\"cframewndex__enablefullscreenmode\"></a>  CFrameWndEx::EnableFullScreenMode"},{"content":"Enables the full-screen mode for the frame window.","pos":[18411,18461]},{"pos":[18535,18545],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`uiFullScreenCmd`</ph>","pos":[18549,18571],"source":"[in] `uiFullScreenCmd`"},{"content":"The ID of a command that enables and disables the full screen mode.","pos":[18575,18642]},{"pos":[18652,18659],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In the full-screen mode, all docking control bars, toolbars and menu are hidden and the active view is resized to occupy the full-screen.","pos":[18663,18800]},{"content":"When you enable the full-screen mode, you must specify an ID of the command that enables or disables the full-screen mode.","pos":[18807,18929]},{"content":"You can call <ph id=\"ph1\">`EnableFullScreenMode`</ph> from the main frame's <ph id=\"ph2\">`OnCreate`</ph> function.","pos":[18930,19008],"source":" You can call `EnableFullScreenMode` from the main frame's `OnCreate` function."},{"content":"When a frame window is being switched to a full-screen mode, the framework creates a floating toolbar with one button that has the specified command ID.","pos":[19009,19161]},{"pos":[19168,19302],"content":"If you want to keep the main menu on the screen, call <bpt id=\"p1\">[</bpt>CFrameWndEx::EnableFullScreenMainMenu<ept id=\"p1\">](#cframewndex__enablefullscreenmainmenu)</ept>.","source":"If you want to keep the main menu on the screen, call [CFrameWndEx::EnableFullScreenMainMenu](#cframewndex__enablefullscreenmainmenu)."},{"pos":[19312,19393],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__enableloaddockstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::EnableLoadDockState","linkify":"<a name=\"cframewndex__enableloaddockstate\"></a>  CFrameWndEx::EnableLoadDockState","source":"<a name=\"cframewndex__enableloaddockstate\"></a>  CFrameWndEx::EnableLoadDockState"},{"content":"Enables or disables the loading of the docking state.","pos":[19397,19450]},{"pos":[19520,19530],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bEnable`</ph>","pos":[19534,19548],"source":"[in] `bEnable`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to enable the loading of the docking state, <ph id=\"ph2\">`FALSE`</ph> to disable the loading of the docking state.","pos":[19551,19655],"source":" `TRUE` to enable the loading of the docking state, `FALSE` to disable the loading of the docking state."},{"pos":[19665,19736],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__enablepanemenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::EnablePaneMenu","linkify":"<a name=\"cframewndex__enablepanemenu\"></a>  CFrameWndEx::EnablePaneMenu","source":"<a name=\"cframewndex__enablepanemenu\"></a>  CFrameWndEx::EnablePaneMenu"},{"content":"Enables or disables the automatic handling of the pane menu.","pos":[19740,19800]},{"pos":[20063,20073],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bEnable`</ph>","pos":[20077,20091],"source":"[in] `bEnable`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to enable the automatic handling of the control bar pop-up menus; <ph id=\"ph2\">`FALSE`</ph> to disable the automatic handling of the control bar pop-up menus.","pos":[20094,20242],"source":" `TRUE` to enable the automatic handling of the control bar pop-up menus; `FALSE` to disable the automatic handling of the control bar pop-up menus."},{"content":"[in] <ph id=\"ph1\">`uiCustomizeCmd`</ph>","pos":[20249,20270],"source":"[in] `uiCustomizeCmd`"},{"content":"The command ID of the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> menu item.","pos":[20274,20320],"source":" The command ID of the **Customize** menu item."},{"content":"[in] <ph id=\"ph1\">`strCustomizeLabel`</ph>","pos":[20327,20351],"source":"[in] `strCustomizeLabel`"},{"content":"The label to be displayed for the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> menu item","pos":[20355,20412],"source":" The label to be displayed for the **Customize** menu item"},{"content":"[in] <ph id=\"ph1\">`uiViewToolbarsMenuEntryID`</ph>","pos":[20419,20451],"source":"[in] `uiViewToolbarsMenuEntryID`"},{"content":"The ID of a toolbar menu item that opens the pop-up menu in the control bar.","pos":[20455,20531]},{"content":"[in] <ph id=\"ph1\">`bContextMenuShowsToolbarsOnly`</ph>","pos":[20538,20574],"source":"[in] `bContextMenuShowsToolbarsOnly`"},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, the control bar context menu displays the list of toolbars only.","pos":[20578,20653],"source":" If `TRUE`, the control bar context menu displays the list of toolbars only."},{"content":"If <ph id=\"ph1\">`FALSE`</ph>, the menu displays the list of the toolbars and the docking bars.","pos":[20654,20730],"source":" If `FALSE`, the menu displays the list of the toolbars and the docking bars."},{"content":"[in] <ph id=\"ph1\">`bViewMenuShowsToolbarsOnly`</ph>","pos":[20737,20770],"source":"[in] `bViewMenuShowsToolbarsOnly`"},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, the control bar menu displays the list of the toolbars only.","pos":[20774,20845],"source":" If `TRUE`, the control bar menu displays the list of the toolbars only."},{"content":"If <ph id=\"ph1\">`FALSE`</ph>, the menu displays the list of the toolbars and the docking bars.","pos":[20846,20922],"source":" If `FALSE`, the menu displays the list of the toolbars and the docking bars."},{"pos":[20932,21003],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__getactivepopup\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::GetActivePopup","linkify":"<a name=\"cframewndex__getactivepopup\"></a>  CFrameWndEx::GetActivePopup","source":"<a name=\"cframewndex__getactivepopup\"></a>  CFrameWndEx::GetActivePopup"},{"content":"Returns a pointer to the currently displayed pop-up menu.","pos":[21007,21064]},{"pos":[21131,21143],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[21147,21214],"content":"A pointer to the currently displayed pop-up menu; otherwise <ph id=\"ph1\">`NULL`</ph>.","source":"A pointer to the currently displayed pop-up menu; otherwise `NULL`."},{"pos":[21224,21297],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__getdefaultresid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::GetDefaultResId","linkify":"<a name=\"cframewndex__getdefaultresid\"></a>  CFrameWndEx::GetDefaultResId","source":"<a name=\"cframewndex__getdefaultresid\"></a>  CFrameWndEx::GetDefaultResId"},{"content":"Returns the resource ID that you specified when the framework loaded the frame window.","pos":[21301,21387]},{"pos":[21445,21457],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The resource ID value that the user specified when the framework loaded the frame window.","pos":[21461,21550]},{"content":"Zero if the frame window does not have a menu bar.","pos":[21551,21601]},{"pos":[21611,21688],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__getdockingmanager\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::GetDockingManager","linkify":"<a name=\"cframewndex__getdockingmanager\"></a>  CFrameWndEx::GetDockingManager","source":"<a name=\"cframewndex__getdockingmanager\"></a>  CFrameWndEx::GetDockingManager"},{"pos":[21692,21804],"content":"Retrieves the <bpt id=\"p1\">[</bpt>CDockingManager Class<ept id=\"p1\">](../../mfc/reference/cdockingmanager-class.md)</ept> object for the frame window.","source":"Retrieves the [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md) object for the frame window."},{"pos":[21867,21879],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[21883,21970],"content":"A pointer to the <bpt id=\"p1\">[</bpt>CDockingManager Class<ept id=\"p1\">](../../mfc/reference/cdockingmanager-class.md)</ept>.","source":"A pointer to the [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md)."},{"pos":[21980,21987],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[21991,22135],"content":"The frame window creates and uses a <bpt id=\"p1\">[</bpt>CDockingManager Class<ept id=\"p1\">](../../mfc/reference/cdockingmanager-class.md)</ept> object to manage child window docking.","source":"The frame window creates and uses a [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md) object to manage child window docking."},{"pos":[22145,22208],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__getmenubar\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::GetMenuBar","linkify":"<a name=\"cframewndex__getmenubar\"></a>  CFrameWndEx::GetMenuBar","source":"<a name=\"cframewndex__getmenubar\"></a>  CFrameWndEx::GetMenuBar"},{"content":"Returns a pointer to the menu bar object attached to the frame window.","pos":[22212,22282]},{"pos":[22349,22361],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the menu bar object attached to the frame window.","pos":[22365,22427]},{"pos":[22437,22494],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__getpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::GetPane","linkify":"<a name=\"cframewndex__getpane\"></a>  CFrameWndEx::GetPane","source":"<a name=\"cframewndex__getpane\"></a>  CFrameWndEx::GetPane"},{"content":"Returns a pointer to the pane that has the specified ID.","pos":[22498,22554]},{"pos":[22609,22619],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nID`</ph>","pos":[22623,22633],"source":"[in] `nID`"},{"content":"The control ID.","pos":[22637,22652]},{"pos":[22662,22674],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the pane that has the specified ID.","pos":[22678,22726]},{"content":"<ph id=\"ph1\">`NULL`</ph> if no such pane exists.","pos":[22727,22757],"source":"`NULL` if no such pane exists."},{"pos":[22767,22834],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__getribbonbar\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::GetRibbonBar","linkify":"<a name=\"cframewndex__getribbonbar\"></a>  CFrameWndEx::GetRibbonBar","source":"<a name=\"cframewndex__getribbonbar\"></a>  CFrameWndEx::GetRibbonBar"},{"content":"Retrieves the ribbon bar control for the frame.","pos":[22838,22885]},{"pos":[22941,22953],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22957,23052],"content":"Pointer to the <bpt id=\"p1\">[</bpt>CMFCRibbonBar Class<ept id=\"p1\">](../../mfc/reference/cmfcribbonbar-class.md)</ept> for the frame.","source":"Pointer to the [CMFCRibbonBar Class](../../mfc/reference/cmfcribbonbar-class.md) for the frame."},{"pos":[23062,23069],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[23079,23150],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__gettearoffbars\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::GetTearOffBars","linkify":"<a name=\"cframewndex__gettearoffbars\"></a>  CFrameWndEx::GetTearOffBars","source":"<a name=\"cframewndex__gettearoffbars\"></a>  CFrameWndEx::GetTearOffBars"},{"content":"Returns a list of pane objects that are in a tear-off state.","pos":[23154,23214]},{"pos":[23281,23293],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23297,23417],"content":"A reference to <ph id=\"ph1\">`CObList`</ph> object that contains a collection of pointers to the pane objects that are in a tear-off state.","source":"A reference to `CObList` object that contains a collection of pointers to the pane objects that are in a tear-off state."},{"pos":[23427,23524],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__gettoolbarbuttontooltiptext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::GetToolbarButtonToolTipText","linkify":"<a name=\"cframewndex__gettoolbarbuttontooltiptext\"></a>  CFrameWndEx::GetToolbarButtonToolTipText","source":"<a name=\"cframewndex__gettoolbarbuttontooltiptext\"></a>  CFrameWndEx::GetToolbarButtonToolTipText"},{"content":"Called by the framework when the application displays the tooltip for a toolbar button.","pos":[23528,23615]},{"pos":[23741,23751],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[23755,23769],"source":"[in] `pButton`"},{"content":"A pointer to a toolbar button.","pos":[23773,23803]},{"content":"[in] <ph id=\"ph1\">`strTTText`</ph>","pos":[23810,23826],"source":"[in] `strTTText`"},{"content":"The tooltip text to display for the button.","pos":[23830,23873]},{"pos":[23883,23895],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`TRUE`</ph> if the tooltip has been displayed.","pos":[23899,23940],"source":"`TRUE` if the tooltip has been displayed."},{"content":"<ph id=\"ph1\">`FALSE`</ph> otherwise.","pos":[23941,23959],"source":"`FALSE` otherwise."},{"pos":[23969,23976],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, this method does nothing.","pos":[23980,24017]},{"content":"Override this method if you want to display the tooltip for the toolbar button.","pos":[24018,24097]},{"pos":[24107,24170],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__insertpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::InsertPane","linkify":"<a name=\"cframewndex__insertpane\"></a>  CFrameWndEx::InsertPane","source":"<a name=\"cframewndex__insertpane\"></a>  CFrameWndEx::InsertPane"},{"content":"Inserts a pane into a list of control bars and registers it with the docking manager.","pos":[24174,24259]},{"pos":[24380,24390],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a control bar to be inserted into the list of control bars and registered with the docking manager.","pos":[24411,24523]},{"content":"A pointer to a control bar before or after which to insert the pane.","pos":[24543,24611]},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if you want to insert <ph id=\"ph2\">`pControlBar`</ph> after <ph id=\"ph3\">`pTarget`</ph>, <ph id=\"ph4\">`FALSE`</ph> otherwise.","pos":[24629,24708],"source":" `TRUE` if you want to insert `pControlBar` after `pTarget`, `FALSE` otherwise."},{"pos":[24718,24730],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24734,24820],"content":"<ph id=\"ph1\">`TRUE`</ph> if the control bar was successfully inserted and registered, <ph id=\"ph2\">`FALSE`</ph> otherwise.","source":"`TRUE` if the control bar was successfully inserted and registered, `FALSE` otherwise."},{"pos":[24830,24837],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[24841,24996],"content":"You must register each control bar by using the <bpt id=\"p1\">[</bpt>CDockingManager Class<ept id=\"p1\">](../../mfc/reference/cdockingmanager-class.md)</ept> to take a part in the docking layout.","source":"You must register each control bar by using the [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md) to take a part in the docking layout."},{"pos":[25006,25073],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__isfullscreen\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::IsFullScreen","linkify":"<a name=\"cframewndex__isfullscreen\"></a>  CFrameWndEx::IsFullScreen","source":"<a name=\"cframewndex__isfullscreen\"></a>  CFrameWndEx::IsFullScreen"},{"content":"Determines whether the frame window is in full screen mode.","pos":[25077,25136]},{"pos":[25191,25203],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[25207,25276],"content":"<ph id=\"ph1\">`TRUE`</ph> if the frame window is in full screen mode; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the frame window is in full screen mode; otherwise `FALSE`."},{"pos":[25286,25293],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[25297,25424],"content":"You can set the full screen mode by calling the <bpt id=\"p1\">[</bpt>CFrameWndEx::EnableFullScreenMode<ept id=\"p1\">](#cframewndex__enablefullscreenmode)</ept> method.","source":"You can set the full screen mode by calling the [CFrameWndEx::EnableFullScreenMode](#cframewndex__enablefullscreenmode) method."},{"pos":[25434,25513],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__ismenubaravailable\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::IsMenuBarAvailable","linkify":"<a name=\"cframewndex__ismenubaravailable\"></a>  CFrameWndEx::IsMenuBarAvailable","source":"<a name=\"cframewndex__ismenubaravailable\"></a>  CFrameWndEx::IsMenuBarAvailable"},{"content":"Determines whether the pointer to the menu bar object is valid.","pos":[25517,25580]},{"pos":[25641,25653],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[25657,25718],"content":"<ph id=\"ph1\">`TRUE`</ph> if the frame window has a menu bar; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the frame window has a menu bar; otherwise `FALSE`."},{"pos":[25728,25809],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__ispointneardocksite\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::IsPointNearDockSite","linkify":"<a name=\"cframewndex__ispointneardocksite\"></a>  CFrameWndEx::IsPointNearDockSite","source":"<a name=\"cframewndex__ispointneardocksite\"></a>  CFrameWndEx::IsPointNearDockSite"},{"content":"Determines whether the point is located in an alignment zone.","pos":[25813,25874]},{"pos":[26006,26016],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`point`</ph>","pos":[26020,26032],"source":"[in] `point`"},{"content":"The position of the point.","pos":[26036,26062]},{"content":"[out] <ph id=\"ph1\">`dwBarAlignment`</ph>","pos":[26069,26091],"source":"[out] `dwBarAlignment`"},{"content":"Where the point is aligned.","pos":[26095,26122]},{"content":"See the table in the Remarks section for possible values.","pos":[26123,26180]},{"content":"[out] <ph id=\"ph1\">`bOuterEdge`</ph>","pos":[26187,26205],"source":"[out] `bOuterEdge`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if the point is located close to the frame border; <ph id=\"ph2\">`FALSE`</ph> if the point is located in a client area.","pos":[26208,26316],"source":" `TRUE` if the point is located close to the frame border; `FALSE` if the point is located in a client area."},{"pos":[26326,26338],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[26342,26414],"content":"<ph id=\"ph1\">`TRUE`</ph> if the point is located in an alignment zone; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the point is located in an alignment zone; otherwise, `FALSE`."},{"pos":[26424,26431],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[26435,26516],"content":"The following table lists the possible values for the <ph id=\"ph1\">`dwBarAlignment`</ph> parameter.","source":"The following table lists the possible values for the `dwBarAlignment` parameter."},{"content":"Aligned to the top.","pos":[26543,26562]},{"content":"Aligned to the right.","pos":[26591,26612]},{"content":"Aligned to the bottom.","pos":[26642,26664]},{"content":"Aligned to the left.","pos":[26692,26712]},{"pos":[26722,26793],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__isprintpreview\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::IsPrintPreview","linkify":"<a name=\"cframewndex__isprintpreview\"></a>  CFrameWndEx::IsPrintPreview","source":"<a name=\"cframewndex__isprintpreview\"></a>  CFrameWndEx::IsPrintPreview"},{"content":"Determines whether the frame window is in print preview mode.","pos":[26797,26858]},{"pos":[26906,26918],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[26922,26994],"content":"<ph id=\"ph1\">`TRUE`</ph> if the frame window is in print preview mode; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the frame window is in print preview mode; otherwise, `FALSE`."},{"pos":[27004,27011],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[27021,27082],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__loadframe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::LoadFrame","linkify":"<a name=\"cframewndex__loadframe\"></a>  CFrameWndEx::LoadFrame","source":"<a name=\"cframewndex__loadframe\"></a>  CFrameWndEx::LoadFrame"},{"content":"This method is called after construction to create the frame window and load its resources.","pos":[27086,27177]},{"pos":[27386,27396],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nIDResource`</ph>","pos":[27400,27418],"source":"[in] `nIDResource`"},{"content":"The resource ID that is used to load all frame resources.","pos":[27422,27479]},{"content":"[in] <ph id=\"ph1\">`dwDefaultStyle`</ph>","pos":[27486,27507],"source":"[in] `dwDefaultStyle`"},{"content":"The default frame window style.","pos":[27511,27542]},{"content":"[in] <ph id=\"ph1\">`pParentWnd`</ph>","pos":[27549,27566],"source":"[in] `pParentWnd`"},{"content":"Pointer to the parent window of the frame.","pos":[27570,27612]},{"content":"[in] <ph id=\"ph1\">`pContext`</ph>","pos":[27619,27634],"source":"[in] `pContext`"},{"content":"Pointer to a <bpt id=\"p1\">[</bpt>CCreateContext Structure<ept id=\"p1\">](../../mfc/reference/ccreatecontext-structure.md)</ept> class that is used by the framework during application creation.","pos":[27638,27791],"source":" Pointer to a [CCreateContext Structure](../../mfc/reference/ccreatecontext-structure.md) class that is used by the framework during application creation."},{"pos":[27801,27813],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[27817,27873],"content":"<ph id=\"ph1\">`TRUE`</ph> if the method was successful; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the method was successful; otherwise, `FALSE`."},{"pos":[27883,27890],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[27900,27983],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__negotiateborderspace\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::NegotiateBorderSpace","linkify":"<a name=\"cframewndex__negotiateborderspace\"></a>  CFrameWndEx::NegotiateBorderSpace","source":"<a name=\"cframewndex__negotiateborderspace\"></a>  CFrameWndEx::NegotiateBorderSpace"},{"content":"Implements OLE client border negotiation.","pos":[27987,28028]},{"pos":[28137,28147],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nBorderCmd`</ph>","pos":[28151,28168],"source":"[in] `nBorderCmd`"},{"content":"The border negotiation command.","pos":[28172,28203]},{"content":"See the Remarks section for possible values.","pos":[28204,28248]},{"content":"[in, out] <ph id=\"ph1\">`lpRectBorder`</ph>","pos":[28255,28279],"source":"[in, out] `lpRectBorder`"},{"content":"Dimensions of the border.","pos":[28283,28308]},{"pos":[28318,28330],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[28334,28396],"content":"<ph id=\"ph1\">`TRUE`</ph> if the layout must be recalculated; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the layout must be recalculated; otherwise, `FALSE`."},{"pos":[28406,28413],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[28417,28494],"content":"The following table lists the possible values for the <ph id=\"ph1\">`nBorderCmd`</ph> parameter.","source":"The following table lists the possible values for the `nBorderCmd` parameter."},{"content":"Get available OLE client space.","pos":[28516,28547]},{"content":"Request OLE client space.","pos":[28573,28598]},{"content":"Set OLE client space.","pos":[28620,28641]},{"pos":[28651,28714],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onactivate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnActivate","linkify":"<a name=\"cframewndex__onactivate\"></a>  CFrameWndEx::OnActivate","source":"<a name=\"cframewndex__onactivate\"></a>  CFrameWndEx::OnActivate"},{"content":"The framework calls this method when user input is switched to or away from the frame.","pos":[28718,28804]},{"pos":[28918,28928],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nState`</ph>","pos":[28932,28945],"source":"[in] `nState`"},{"content":"Whether the frame is active or inactive.","pos":[28949,28989]},{"content":"See the table in the Remarks section for possible values.","pos":[28990,29047]},{"content":"[in] <ph id=\"ph1\">`pWndOther`</ph>","pos":[29054,29070],"source":"[in] `pWndOther`"},{"content":"Pointer to another window that is switching user input with the current one.","pos":[29074,29150]},{"content":"[in] <ph id=\"ph1\">`bMinimized`</ph>","pos":[29157,29174],"source":"[in] `bMinimized`"},{"content":"The minimized state of the frame.","pos":[29178,29211]},{"content":"<ph id=\"ph1\">`TRUE`</ph> if the frame is minimized; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[29212,29265],"source":"`TRUE` if the frame is minimized; otherwise, `FALSE`."},{"pos":[29275,29282],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[29286,29359],"content":"The following table lists the possible values for the <ph id=\"ph1\">`nState`</ph> parameter.","source":"The following table lists the possible values for the `nState` parameter."},{"content":"The frame is selected by a method other than a mouse click.","pos":[29381,29440]},{"content":"The frame is selected by a mouse click.","pos":[29467,29506]},{"content":"The frame is not selected.","pos":[29530,29556]},{"pos":[29566,29635],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onactivateapp\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnActivateApp","linkify":"<a name=\"cframewndex__onactivateapp\"></a>  CFrameWndEx::OnActivateApp","source":"<a name=\"cframewndex__onactivateapp\"></a>  CFrameWndEx::OnActivateApp"},{"content":"Called by the framework when the application is either selected or deselected.","pos":[29639,29717]},{"pos":[29813,29823],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bActive`</ph>","pos":[29827,29841],"source":"[in] `bActive`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if the application is selected; <ph id=\"ph2\">`FALSE`</ph> if the application is not selected.","pos":[29844,29927],"source":" `TRUE` if the application is selected; `FALSE` if the application is not selected."},{"content":"[in] <ph id=\"ph1\">`dwThreadID`</ph>","pos":[29934,29951],"source":"[in] `dwThreadID`"},{"content":"This parameter is not used.","pos":[29955,29982]},{"pos":[29992,29999],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[30009,30094],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onchangevisualmanager\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnChangeVisualManager","linkify":"<a name=\"cframewndex__onchangevisualmanager\"></a>  CFrameWndEx::OnChangeVisualManager","source":"<a name=\"cframewndex__onchangevisualmanager\"></a>  CFrameWndEx::OnChangeVisualManager"},{"content":"Called by the framework when a change to the frame requires a change to the visual manager.","pos":[30098,30189]},{"pos":[30294,30304],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`wParam`</ph>","pos":[30308,30321],"source":"[in] `wParam`"},{"content":"This parameter is not used.","pos":[30325,30352]},{"content":"[in] <ph id=\"ph1\">`lParam`</ph>","pos":[30359,30372],"source":"[in] `lParam`"},{"content":"This parameter is not used.","pos":[30376,30403]},{"pos":[30413,30425],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Always returns 0.","pos":[30429,30446]},{"pos":[30456,30463],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[30473,30530],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onclose\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnClose","linkify":"<a name=\"cframewndex__onclose\"></a>  CFrameWndEx::OnClose","source":"<a name=\"cframewndex__onclose\"></a>  CFrameWndEx::OnClose"},{"content":"The framework calls this method to close the frame.","pos":[30534,30585]},{"pos":[30634,30641],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the frame is in print preview mode, it sends a Windows message to close the print preview; otherwise, if the frame hosts an OLE client, the client is deactivated.","pos":[30645,30810]},{"pos":[30820,30899],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onclosedockingpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnCloseDockingPane","linkify":"<a name=\"cframewndex__onclosedockingpane\"></a>  CFrameWndEx::OnCloseDockingPane","source":"<a name=\"cframewndex__onclosedockingpane\"></a>  CFrameWndEx::OnCloseDockingPane"},{"pos":[30903,30987],"content":"Called by the framework when the user clicks the <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> button on a docking pane.","source":"Called by the framework when the user clicks the **Close** button on a docking pane."},{"pos":[31067,31079],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`TRUE`</ph> if the docking bar can be closed.","pos":[31083,31123],"source":"`TRUE` if the docking bar can be closed."},{"content":"<ph id=\"ph1\">`FALSE`</ph> otherwise","pos":[31124,31141],"source":"`FALSE` otherwise"},{"pos":[31151,31158],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implement does nothing.","pos":[31162,31197]},{"content":"Override this method if you want to handle the hiding of the docking bar.","pos":[31198,31271]},{"pos":[31281,31356],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__oncloseminiframe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnCloseMiniFrame","linkify":"<a name=\"cframewndex__oncloseminiframe\"></a>  CFrameWndEx::OnCloseMiniFrame","source":"<a name=\"cframewndex__oncloseminiframe\"></a>  CFrameWndEx::OnCloseMiniFrame"},{"pos":[31360,31458],"content":"Called by the framework when the user clicks the <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> button on a floating mini frame window.","source":"Called by the framework when the user clicks the **Close** button on a floating mini frame window."},{"pos":[31535,31547],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`TRUE`</ph> if a floating mini frame window can be closed.","pos":[31551,31604],"source":"`TRUE` if a floating mini frame window can be closed."},{"content":"<ph id=\"ph1\">`FALSE`</ph> otherwise.","pos":[31605,31623],"source":"`FALSE` otherwise."},{"pos":[31633,31640],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation does nothing.","pos":[31644,31684]},{"content":"Override this method if you want to process the hiding of a floating mini frame window.","pos":[31685,31772]},{"pos":[31782,31857],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onclosepopupmenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnClosePopupMenu","linkify":"<a name=\"cframewndex__onclosepopupmenu\"></a>  CFrameWndEx::OnClosePopupMenu","source":"<a name=\"cframewndex__onclosepopupmenu\"></a>  CFrameWndEx::OnClosePopupMenu"},{"content":"Called by the framework when an active pop-up menu processes a WM_DESTROY message.","pos":[31861,31943]},{"pos":[32026,32036],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a pop-up menu.","pos":[32056,32083]},{"pos":[32093,32100],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework sends a WM_DESTROY message when it is about to close the window.","pos":[32104,32182]},{"content":"Override this method if you want to handle notifications from <ph id=\"ph1\">`CMFCPopupMenu`</ph> objects that belong to the frame window when a <ph id=\"ph2\">`CMFCPopupMenu`</ph> object is processing a <ph id=\"ph3\">`WM_DESTROY`</ph> message sent by the framework when the window is being closed.","pos":[32183,32422],"source":" Override this method if you want to handle notifications from `CMFCPopupMenu` objects that belong to the frame window when a `CMFCPopupMenu` object is processing a `WM_DESTROY` message sent by the framework when the window is being closed."},{"pos":[32432,32491],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__oncmdmsg\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnCmdMsg","linkify":"<a name=\"cframewndex__oncmdmsg\"></a>  CFrameWndEx::OnCmdMsg","source":"<a name=\"cframewndex__oncmdmsg\"></a>  CFrameWndEx::OnCmdMsg"},{"content":"Dispatches command messages.","pos":[32495,32523]},{"pos":[32663,32673],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nID`</ph>","pos":[32677,32687],"source":"[in] `nID`"},{"content":"The command ID.","pos":[32691,32706]},{"content":"[in] <ph id=\"ph1\">`nCode`</ph>","pos":[32713,32725],"source":"[in] `nCode`"},{"content":"Command message category.","pos":[32729,32754]},{"content":"[in, out] <ph id=\"ph1\">`pExtra`</ph>","pos":[32761,32779],"source":"[in, out] `pExtra`"},{"content":"Pointer to a command object.","pos":[32783,32811]},{"content":"[in, out] <ph id=\"ph1\">`pHandlerInfo`</ph>","pos":[32818,32842],"source":"[in, out] `pHandlerInfo`"},{"content":"Pointer to a command handler structure.","pos":[32846,32885]},{"pos":[32895,32907],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[32911,32973],"content":"<ph id=\"ph1\">`TRUE`</ph> if the command message was handled; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the command message was handled; otherwise, `FALSE`."},{"pos":[32983,32990],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[33000,33069],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__oncontexthelp\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnContextHelp","linkify":"<a name=\"cframewndex__oncontexthelp\"></a>  CFrameWndEx::OnContextHelp","source":"<a name=\"cframewndex__oncontexthelp\"></a>  CFrameWndEx::OnContextHelp"},{"content":"Called by the framework to display context-related help.","pos":[33073,33129]},{"pos":[33184,33191],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[33201,33260],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__oncreate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnCreate","linkify":"<a name=\"cframewndex__oncreate\"></a>  CFrameWndEx::OnCreate","source":"<a name=\"cframewndex__oncreate\"></a>  CFrameWndEx::OnCreate"},{"content":"Called by the framework after the frame is created.","pos":[33264,33315]},{"pos":[33393,33403],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`lpCreateStruct`</ph>","pos":[33407,33428],"source":"[in] `lpCreateStruct`"},{"content":"A pointer to the <bpt id=\"p1\">[</bpt>CREATESTRUCT Structure<ept id=\"p1\">](../../mfc/reference/createstruct-structure.md)</ept> for the new frame.","pos":[33432,33539],"source":" A pointer to the [CREATESTRUCT Structure](../../mfc/reference/createstruct-structure.md) for the new frame."},{"pos":[33549,33561],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 to continue with the frame creation; -1 to destroy the frame.","pos":[33565,33628]},{"pos":[33638,33645],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[33655,33716],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__ondestroy\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnDestroy","linkify":"<a name=\"cframewndex__ondestroy\"></a>  CFrameWndEx::OnDestroy","source":"<a name=\"cframewndex__ondestroy\"></a>  CFrameWndEx::OnDestroy"},{"content":"Called by the framework when the frame is destroyed.","pos":[33720,33772]},{"pos":[33823,33830],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The accelerator table and all windows are destroyed.","pos":[33834,33886]},{"pos":[33896,33969],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__ondrawmenuimage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnDrawMenuImage","linkify":"<a name=\"cframewndex__ondrawmenuimage\"></a>  CFrameWndEx::OnDrawMenuImage","source":"<a name=\"cframewndex__ondrawmenuimage\"></a>  CFrameWndEx::OnDrawMenuImage"},{"content":"Called by the framework when the application draws the image associated with a menu item.","pos":[33973,34062]},{"pos":[34210,34220],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[34224,34234],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[34238,34268]},{"content":"[in] <ph id=\"ph1\">`pMenuButton`</ph>","pos":[34275,34293],"source":"[in] `pMenuButton`"},{"content":"A pointer to a menu button whose image is being rendered.","pos":[34297,34354]},{"content":"[in] <ph id=\"ph1\">`rectImage`</ph>","pos":[34361,34377],"source":"[in] `rectImage`"},{"content":"A pointer to a <ph id=\"ph1\">`Rect`</ph> structure that specifies the screen position and size of the image.","pos":[34381,34470],"source":" A pointer to a `Rect` structure that specifies the screen position and size of the image."},{"pos":[34480,34492],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34496,34570],"content":"<ph id=\"ph1\">`TRUE`</ph> if the framework successfully renders the image; <ph id=\"ph2\">`FALSE`</ph> otherwise.","source":"`TRUE` if the framework successfully renders the image; `FALSE` otherwise."},{"pos":[34580,34587],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[34591,34746],"content":"Override this method if you want to customize the image rendering for the menu items that belong to the menu bar owned by the <ph id=\"ph1\">`CFrameWndEx`</ph> derived object.","source":"Override this method if you want to customize the image rendering for the menu items that belong to the menu bar owned by the `CFrameWndEx` derived object."},{"pos":[34756,34827],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__ondrawmenulogo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnDrawMenuLogo","linkify":"<a name=\"cframewndex__ondrawmenulogo\"></a>  CFrameWndEx::OnDrawMenuLogo","source":"<a name=\"cframewndex__ondrawmenulogo\"></a>  CFrameWndEx::OnDrawMenuLogo"},{"pos":[34831,34914],"content":"Called by the framework when a <ph id=\"ph1\">`CMFCPopupMenu`</ph> object processes a WM_PAINT message.","source":"Called by the framework when a `CMFCPopupMenu` object processes a WM_PAINT message."},{"pos":[35040,35050],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[35054,35064],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[35068,35098]},{"content":"[in] <ph id=\"ph1\">`pMenu`</ph>","pos":[35105,35117],"source":"[in] `pMenu`"},{"content":"A pointer to the menu item.","pos":[35121,35148]},{"content":"[in] <ph id=\"ph1\">`rectLogo`</ph>","pos":[35155,35170],"source":"[in] `rectLogo`"},{"content":"A reference to a constant <ph id=\"ph1\">`CRect`</ph> structure that specifies the screen position and size of the menu logo.","pos":[35174,35279],"source":" A reference to a constant `CRect` structure that specifies the screen position and size of the menu logo."},{"pos":[35289,35296],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[35300,35443],"content":"Override this function if you want to display a logo on the pop-up menu that belongs to the menu bar owned by the <ph id=\"ph1\">`CFrameWndEx`</ph> derived object.","source":"Override this function if you want to display a logo on the pop-up menu that belongs to the menu bar owned by the `CFrameWndEx` derived object."},{"pos":[35453,35542],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__ondwmcompositionchanged\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnDWMCompositionChanged","linkify":"<a name=\"cframewndex__ondwmcompositionchanged\"></a>  CFrameWndEx::OnDWMCompositionChanged","source":"<a name=\"cframewndex__ondwmcompositionchanged\"></a>  CFrameWndEx::OnDWMCompositionChanged"},{"content":"Called by the framework when Desktop Window Manager (DWM) composition has been enabled or disabled.","pos":[35546,35645]},{"pos":[35744,35754],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`wp`</ph>","pos":[35758,35767],"source":"[in] `wp`"},{"content":"This parameter is not used.","pos":[35771,35798]},{"content":"[in] <ph id=\"ph1\">`lp`</ph>","pos":[35805,35814],"source":"[in] `lp`"},{"content":"This parameter is not used.","pos":[35818,35845]},{"pos":[35855,35867],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Always returns 0.","pos":[35871,35888]},{"pos":[35898,35905],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[35915,35986],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onexitsizemove\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnExitSizeMove","linkify":"<a name=\"cframewndex__onexitsizemove\"></a>  CFrameWndEx::OnExitSizeMove","source":"<a name=\"cframewndex__onexitsizemove\"></a>  CFrameWndEx::OnExitSizeMove"},{"content":"Called by the framework when the frame stops moving or resizing.","pos":[35990,36054]},{"pos":[36136,36146],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`wp`</ph>","pos":[36150,36159],"source":"[in] `wp`"},{"content":"This parameter is not used.","pos":[36163,36190]},{"content":"[in] <ph id=\"ph1\">`lp`</ph>","pos":[36197,36206],"source":"[in] `lp`"},{"content":"This parameter is not used.","pos":[36210,36237]},{"pos":[36247,36259],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Always returns 0.","pos":[36263,36280]},{"pos":[36290,36297],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[36307,36380],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__ongetminmaxinfo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnGetMinMaxInfo","linkify":"<a name=\"cframewndex__ongetminmaxinfo\"></a>  CFrameWndEx::OnGetMinMaxInfo","source":"<a name=\"cframewndex__ongetminmaxinfo\"></a>  CFrameWndEx::OnGetMinMaxInfo"},{"content":"Called by the framework when the frame is resized to set window dimension limits.","pos":[36384,36465]},{"pos":[36543,36553],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`lpMMI`</ph>","pos":[36557,36569],"source":"[in] `lpMMI`"},{"content":"Pointer to a <bpt id=\"p1\">[</bpt>MINMAXINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632605)</ept> structure.","pos":[36573,36669],"source":" Pointer to a [MINMAXINFO](http://msdn.microsoft.com/library/windows/desktop/ms632605) structure."},{"pos":[36679,36686],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[36696,36773],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onidleupdatecmdui\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnIdleUpdateCmdUI","linkify":"<a name=\"cframewndex__onidleupdatecmdui\"></a>  CFrameWndEx::OnIdleUpdateCmdUI","source":"<a name=\"cframewndex__onidleupdatecmdui\"></a>  CFrameWndEx::OnIdleUpdateCmdUI"},{"content":"Called by the framework to update the frame display when command processing is idle.","pos":[36777,36861]},{"pos":[36970,36980],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`wParam`</ph>","pos":[36984,36997],"source":"[in] `wParam`"},{"content":"This parameter is not used.","pos":[37001,37028]},{"content":"[in] <ph id=\"ph1\">`lParam`</ph>","pos":[37035,37048],"source":"[in] `lParam`"},{"content":"This parameter is not used.","pos":[37052,37079]},{"pos":[37089,37101],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Always returns 0.","pos":[37105,37122]},{"pos":[37132,37139],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[37149,37218],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onlbuttondown\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnLButtonDown","linkify":"<a name=\"cframewndex__onlbuttondown\"></a>  CFrameWndEx::OnLButtonDown","source":"<a name=\"cframewndex__onlbuttondown\"></a>  CFrameWndEx::OnLButtonDown"},{"content":"The framework calls this method when the user presses the left mouse button.","pos":[37222,37298]},{"pos":[37389,37399],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nFlags`</ph>","pos":[37403,37416],"source":"[in] `nFlags`"},{"content":"Indicates whether the user pressed modifier keys.","pos":[37420,37469]},{"content":"For possible values see the parameter <ph id=\"ph1\">`wParam`</ph> in <bpt id=\"p1\">[</bpt>WM_LBUTTONDOWN Notification<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645607)</ept>.","pos":[37470,37610],"source":" For possible values see the parameter `wParam` in [WM_LBUTTONDOWN Notification](http://msdn.microsoft.com/library/windows/desktop/ms645607)."},{"content":"[in] <ph id=\"ph1\">`point`</ph>","pos":[37617,37629],"source":"[in] `point`"},{"content":"Specifies the x and y coordinates of the pointer, relative to the upper-left corner of the window.","pos":[37633,37731]},{"pos":[37741,37748],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[37758,37823],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onlbuttonup\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnLButtonUp","linkify":"<a name=\"cframewndex__onlbuttonup\"></a>  CFrameWndEx::OnLButtonUp","source":"<a name=\"cframewndex__onlbuttonup\"></a>  CFrameWndEx::OnLButtonUp"},{"content":"The framework calls this method when the user releases the left mouse button.","pos":[37827,37904]},{"pos":[37993,38003],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nFlags`</ph>","pos":[38007,38020],"source":"[in] `nFlags`"},{"content":"Indicates whether the user pressed modifier keys.","pos":[38024,38073]},{"content":"For possible values see the parameter <ph id=\"ph1\">`wParam`</ph> in <bpt id=\"p1\">[</bpt>WM_LBUTTONUP Notification<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645608)</ept>.","pos":[38074,38212],"source":" For possible values see the parameter `wParam` in [WM_LBUTTONUP Notification](http://msdn.microsoft.com/library/windows/desktop/ms645608)."},{"content":"[in] <ph id=\"ph1\">`point`</ph>","pos":[38219,38231],"source":"[in] `point`"},{"content":"Specifies the x and y coordinates of the pointer, relative to the upper-left corner of the window.","pos":[38235,38333]},{"pos":[38343,38350],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[38360,38449],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onmenubuttontoolhittest\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnMenuButtonToolHitTest","linkify":"<a name=\"cframewndex__onmenubuttontoolhittest\"></a>  CFrameWndEx::OnMenuButtonToolHitTest","source":"<a name=\"cframewndex__onmenubuttontoolhittest\"></a>  CFrameWndEx::OnMenuButtonToolHitTest"},{"pos":[38453,38546],"content":"Called by the framework when a <ph id=\"ph1\">`CMFCToolBarButton`</ph> object processes a <ph id=\"ph2\">`WM_NCHITTEST`</ph> message.","source":"Called by the framework when a `CMFCToolBarButton` object processes a `WM_NCHITTEST` message."},{"pos":[38663,38673],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[38677,38691],"source":"[in] `pButton`"},{"content":"A pointer to the tool bar button.","pos":[38695,38728]},{"content":"[out] <ph id=\"ph1\">`pTI`</ph>","pos":[38735,38746],"source":"[out] `pTI`"},{"content":"A pointer to a tool information structure.","pos":[38750,38792]},{"pos":[38802,38814],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`TRUE`</ph> if the application fills the <ph id=\"ph2\">`pTI`</ph> parameter.","pos":[38818,38870],"source":"`TRUE` if the application fills the `pTI` parameter."},{"content":"<ph id=\"ph1\">`FALSE`</ph> otherwise.","pos":[38871,38889],"source":"`FALSE` otherwise."},{"pos":[38899,38906],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method if you want to provide a tooltip information about a specific menu item.","pos":[38910,39003]},{"pos":[39013,39076],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onmenuchar\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnMenuChar","linkify":"<a name=\"cframewndex__onmenuchar\"></a>  CFrameWndEx::OnMenuChar","source":"<a name=\"cframewndex__onmenuchar\"></a>  CFrameWndEx::OnMenuChar"},{"content":"Called by the framework when a menu is displayed and the user presses a key that does not correspond to a command.","pos":[39080,39194]},{"pos":[39303,39313],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nChar`</ph>","pos":[39317,39329],"source":"[in] `nChar`"},{"content":"Character code of the pressed key.","pos":[39333,39367]},{"content":"[in] <ph id=\"ph1\">`nFlags`</ph>","pos":[39374,39387],"source":"[in] `nFlags`"},{"content":"Contains the <ph id=\"ph1\">`MF_POPUP`</ph> flag if the menu displayed is a submenu; contains the <ph id=\"ph2\">`MF_SYSMENU`</ph> flag if the menu displayed is a control menu.","pos":[39391,39527],"source":" Contains the `MF_POPUP` flag if the menu displayed is a submenu; contains the `MF_SYSMENU` flag if the menu displayed is a control menu."},{"content":"[in] <ph id=\"ph1\">`pMenu`</ph>","pos":[39534,39546],"source":"[in] `pMenu`"},{"content":"Pointer to a menu.","pos":[39550,39568]},{"pos":[39578,39590],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The high-order word must be one of the following values.","pos":[39594,39650]},{"content":"The framework should ignore the keystroke.","pos":[39664,39706]},{"content":"The framework should close the menu.","pos":[39720,39756]},{"content":"The framework should select one of the items displayed in the menu.","pos":[39770,39837]},{"content":"The low-order word contains the ID of the command to select.","pos":[39838,39898]},{"pos":[39908,39915],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[39925,39990],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onmousemove\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnMouseMove","linkify":"<a name=\"cframewndex__onmousemove\"></a>  CFrameWndEx::OnMouseMove","source":"<a name=\"cframewndex__onmousemove\"></a>  CFrameWndEx::OnMouseMove"},{"content":"The framework calls this method when the pointer moves.","pos":[39994,40049]},{"pos":[40138,40148],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nFlags`</ph>","pos":[40152,40165],"source":"[in] `nFlags`"},{"content":"Indicates whether a user pressed modifier keys.","pos":[40169,40216]},{"content":"For possible values see the parameter <ph id=\"ph1\">`wParam`</ph> in <bpt id=\"p1\">[</bpt>WM_MOUSEMOVE Notification<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645616)</ept>.","pos":[40217,40355],"source":" For possible values see the parameter `wParam` in [WM_MOUSEMOVE Notification](http://msdn.microsoft.com/library/windows/desktop/ms645616)."},{"content":"[in] <ph id=\"ph1\">`point`</ph>","pos":[40362,40374],"source":"[in] `point`"},{"content":"Specifies the x and y coordinates of the pointer relative to the upper-left corner of the window.","pos":[40378,40475]},{"pos":[40485,40492],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[40502,40575],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onmoveminiframe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnMoveMiniFrame","linkify":"<a name=\"cframewndex__onmoveminiframe\"></a>  CFrameWndEx::OnMoveMiniFrame","source":"<a name=\"cframewndex__onmoveminiframe\"></a>  CFrameWndEx::OnMoveMiniFrame"},{"content":"Called by the framework when a pane window moves.","pos":[40579,40628]},{"pos":[40697,40707],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pFrame`</ph>","pos":[40711,40724],"source":"[in] `pFrame`"},{"content":"Pointer to the <bpt id=\"p1\">[</bpt>CPaneFrameWnd Class<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md)</ept> pane window.","pos":[40728,40821],"source":" Pointer to the [CPaneFrameWnd Class](../../mfc/reference/cpaneframewnd-class.md) pane window."},{"pos":[40831,40843],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[40847,40927],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane window was not docked; <ph id=\"ph2\">`FALSE`</ph> if the pane window was docked.","source":"`TRUE` if the pane window was not docked; `FALSE` if the pane window was docked."},{"pos":[40937,40944],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[40954,41021],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onncactivate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnNcActivate","linkify":"<a name=\"cframewndex__onncactivate\"></a>  CFrameWndEx::OnNcActivate","source":"<a name=\"cframewndex__onncactivate\"></a>  CFrameWndEx::OnNcActivate"},{"content":"Called by the framework when the non-client area of the frame must be redrawn to indicate a change in the active state.","pos":[41025,41144]},{"pos":[41210,41220],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bActive`</ph>","pos":[41224,41238],"source":"[in] `bActive`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to draw the frame active; <ph id=\"ph2\">`FALSE`</ph> to draw the frame inactive.","pos":[41241,41310],"source":" `TRUE` to draw the frame active; `FALSE` to draw the frame inactive."},{"pos":[41320,41332],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero to continue with default processing; 0 to prevent the non-client area from being deactivated.","pos":[41336,41437]},{"pos":[41447,41454],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[41464,41531],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onnccalcsize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnNcCalcSize","linkify":"<a name=\"cframewndex__onnccalcsize\"></a>  CFrameWndEx::OnNcCalcSize","source":"<a name=\"cframewndex__onnccalcsize\"></a>  CFrameWndEx::OnNcCalcSize"},{"content":"Called by the framework when the size and position of the client area must be calculated.","pos":[41535,41624]},{"pos":[41740,41750],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bCalcValidRects`</ph>","pos":[41754,41776],"source":"[in] `bCalcValidRects`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> when the application must specify a valid client area; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[41779,41861],"source":" `TRUE` when the application must specify a valid client area; otherwise, `FALSE`."},{"content":"[in] <ph id=\"ph1\">`lpncsp`</ph>","pos":[41868,41881],"source":"[in] `lpncsp`"},{"content":"Pointer to a <ph id=\"ph1\">`NCCALCSIZE_PARAMS`</ph> structure that contains frame dimension changes.","pos":[41885,41966],"source":" Pointer to a `NCCALCSIZE_PARAMS` structure that contains frame dimension changes."},{"pos":[41976,41983],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[41993,42058],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onnchittest\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnNcHitTest","linkify":"<a name=\"cframewndex__onnchittest\"></a>  CFrameWndEx::OnNcHitTest","source":"<a name=\"cframewndex__onnchittest\"></a>  CFrameWndEx::OnNcHitTest"},{"content":"Called by the framework when the pointer moves or when a mouse button is pressed or released.","pos":[42062,42155]},{"pos":[42223,42233],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`point`</ph>","pos":[42237,42249],"source":"[in] `point`"},{"content":"The location of the pointer in screen coordinates.","pos":[42253,42303]},{"pos":[42313,42325],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer hit enumerated value.","pos":[42329,42360]},{"content":"For a list of possible values see <bpt id=\"p1\">[</bpt>WM_NCHITTEST Notification<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645618)</ept>.","pos":[42361,42483],"source":" For a list of possible values see [WM_NCHITTEST Notification](http://msdn.microsoft.com/library/windows/desktop/ms645618)."},{"pos":[42493,42500],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[42510,42579],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onncmousemove\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnNcMouseMove","linkify":"<a name=\"cframewndex__onncmousemove\"></a>  CFrameWndEx::OnNcMouseMove","source":"<a name=\"cframewndex__onncmousemove\"></a>  CFrameWndEx::OnNcMouseMove"},{"content":"Called by the framework when the pointer moves in a non-client area.","pos":[42583,42651]},{"pos":[42744,42754],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nHitTest`</ph>","pos":[42758,42773],"source":"[in] `nHitTest`"},{"content":"A pointer hit enumerated value.","pos":[42777,42808]},{"content":"For a list of possible values see <bpt id=\"p1\">[</bpt>WM_NCHITTEST Notification<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms645618)</ept>.","pos":[42809,42931],"source":" For a list of possible values see [WM_NCHITTEST Notification](http://msdn.microsoft.com/library/windows/desktop/ms645618)."},{"content":"[in] <ph id=\"ph1\">`point`</ph>","pos":[42938,42950],"source":"[in] `point`"},{"content":"The location of the pointer in screen coordinates.","pos":[42954,43004]},{"pos":[43014,43021],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[43031,43092],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onncpaint\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnNcPaint","linkify":"<a name=\"cframewndex__onncpaint\"></a>  CFrameWndEx::OnNcPaint","source":"<a name=\"cframewndex__onncpaint\"></a>  CFrameWndEx::OnNcPaint"},{"content":"Called by the framework when the non-client area must be painted.","pos":[43096,43161]},{"pos":[43212,43219],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[43229,43294],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onpanecheck\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnPaneCheck","linkify":"<a name=\"cframewndex__onpanecheck\"></a>  CFrameWndEx::OnPaneCheck","source":"<a name=\"cframewndex__onpanecheck\"></a>  CFrameWndEx::OnPaneCheck"},{"content":"Called by the framework to control the visibility of a pane.","pos":[43298,43358]},{"pos":[43419,43429],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nID`</ph>","pos":[43433,43443],"source":"[in] `nID`"},{"content":"Control ID of a pane.","pos":[43447,43468]},{"pos":[43478,43490],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[43494,43573],"content":"<ph id=\"ph1\">`TRUE`</ph> if the command was handled; <ph id=\"ph2\">`FALSE`</ph> to continue with command processing.","source":"`TRUE` if the command was handled; `FALSE` to continue with command processing."},{"pos":[43583,43590],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[43600,43679],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onpostpreviewframe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnPostPreviewFrame","linkify":"<a name=\"cframewndex__onpostpreviewframe\"></a>  CFrameWndEx::OnPostPreviewFrame","source":"<a name=\"cframewndex__onpostpreviewframe\"></a>  CFrameWndEx::OnPostPreviewFrame"},{"content":"Called by the framework when the user changes the print preview mode.","pos":[43683,43752]},{"pos":[43854,43864],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`wParam`</ph>","pos":[43868,43881],"source":"[in] `wParam`"},{"content":"This parameter is not used.","pos":[43885,43912]},{"content":"[in] <ph id=\"ph1\">`lParam`</ph>","pos":[43919,43932],"source":"[in] `lParam`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> when the frame is in print preview mode; <ph id=\"ph2\">`FALSE`</ph> when print preview mode is off.","pos":[43935,44023],"source":" `TRUE` when the frame is in print preview mode; `FALSE` when print preview mode is off."},{"pos":[44033,44045],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Always returns 0.","pos":[44049,44066]},{"pos":[44076,44083],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[44093,44168],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onpowerbroadcast\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnPowerBroadcast","linkify":"<a name=\"cframewndex__onpowerbroadcast\"></a>  CFrameWndEx::OnPowerBroadcast","source":"<a name=\"cframewndex__onpowerbroadcast\"></a>  CFrameWndEx::OnPowerBroadcast"},{"content":"Called by the framework when a power management event occurs.","pos":[44172,44233]},{"pos":[44325,44335],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`wp`</ph>","pos":[44339,44348],"source":"[in] `wp`"},{"content":"The power management event.","pos":[44352,44379]},{"content":"For a list of possible values see <bpt id=\"p1\">[</bpt>WM_POWERBROADCAST Message<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa373247)</ept>.","pos":[44380,44502],"source":" For a list of possible values see [WM_POWERBROADCAST Message](http://msdn.microsoft.com/library/windows/desktop/aa373247)."},{"content":"[in] <ph id=\"ph1\">`lp`</ph>","pos":[44509,44518],"source":"[in] `lp`"},{"content":"This parameter is not used.","pos":[44522,44549]},{"pos":[44559,44571],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Result from calling the default window procedure.","pos":[44575,44624]},{"pos":[44634,44641],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[44651,44712],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onsetmenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnSetMenu","linkify":"<a name=\"cframewndex__onsetmenu\"></a>  CFrameWndEx::OnSetMenu","source":"<a name=\"cframewndex__onsetmenu\"></a>  CFrameWndEx::OnSetMenu"},{"content":"Called by the framework to replace the frame window menu.","pos":[44716,44773]},{"pos":[44895,44905],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`wp`</ph>","pos":[44909,44918],"source":"[in] `wp`"},{"content":"Handle to the new frame window menu.","pos":[44922,44958]},{"content":"[in] <ph id=\"ph1\">`lp`</ph>","pos":[44965,44974],"source":"[in] `lp`"},{"content":"Handle to the new window menu.","pos":[44978,45008]},{"content":"[in] <ph id=\"ph1\">`hmenu`</ph>","pos":[45015,45027],"source":"[in] `hmenu`"},{"content":"Handle to the new frame window menu.","pos":[45031,45067]},{"pos":[45077,45089],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[45093,45159],"content":"<ph id=\"ph1\">`LRESULT`</ph> is the result from calling the default window procedure.","source":"`LRESULT` is the result from calling the default window procedure."},{"pos":[45166,45228],"content":"<ph id=\"ph1\">`BOOL`</ph> is <ph id=\"ph2\">`TRUE`</ph> if the event was handled; otherwise, <ph id=\"ph3\">`FALSE`</ph>.","source":"`BOOL` is `TRUE` if the event was handled; otherwise, `FALSE`."},{"pos":[45238,45245],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[45255,45330],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onsetpreviewmode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnSetPreviewMode","linkify":"<a name=\"cframewndex__onsetpreviewmode\"></a>  CFrameWndEx::OnSetPreviewMode","source":"<a name=\"cframewndex__onsetpreviewmode\"></a>  CFrameWndEx::OnSetPreviewMode"},{"content":"Called by the framework to set the print preview mode for the frame.","pos":[45334,45402]},{"pos":[45512,45522],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bPreview`</ph>","pos":[45526,45541],"source":"[in] `bPreview`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to enable print preview; <ph id=\"ph2\">`FALSE`</ph> to disable print preview.","pos":[45544,45610],"source":" `TRUE` to enable print preview; `FALSE` to disable print preview."},{"content":"[in] <ph id=\"ph1\">`pState`</ph>","pos":[45617,45630],"source":"[in] `pState`"},{"content":"Pointer to a <ph id=\"ph1\">`CPrintPreviewState`</ph> frame state structure.","pos":[45634,45690],"source":" Pointer to a `CPrintPreviewState` frame state structure."},{"pos":[45700,45707],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[45717,45778],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onsettext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnSetText","linkify":"<a name=\"cframewndex__onsettext\"></a>  CFrameWndEx::OnSetText","source":"<a name=\"cframewndex__onsettext\"></a>  CFrameWndEx::OnSetText"},{"content":"Called by the framework to set the text of a window.","pos":[45782,45834]},{"pos":[45927,45937],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`wParam`</ph>","pos":[45941,45954],"source":"[in] `wParam`"},{"content":"This parameter is not used.","pos":[45958,45985]},{"content":"[in] <ph id=\"ph1\">`lParam`</ph>","pos":[45992,46005],"source":"[in] `lParam`"},{"content":"Pointer to the text for the window.","pos":[46009,46044]},{"pos":[46054,46066],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[46070,46174],"content":"Return value from a call to <bpt id=\"p1\">[</bpt>DefWindowProc<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633572)</ept>.","source":"Return value from a call to [DefWindowProc](http://msdn.microsoft.com/library/windows/desktop/ms633572)."},{"pos":[46184,46191],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[46201,46282],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onshowcustomizepane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnShowCustomizePane","linkify":"<a name=\"cframewndex__onshowcustomizepane\"></a>  CFrameWndEx::OnShowCustomizePane","source":"<a name=\"cframewndex__onshowcustomizepane\"></a>  CFrameWndEx::OnShowCustomizePane"},{"pos":[46286,46350],"content":"Called by the framework when it displays a <ph id=\"ph1\">`QuickCustomizePane`</ph>.","source":"Called by the framework when it displays a `QuickCustomizePane`."},{"pos":[46464,46474],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pMenuPane`</ph>","pos":[46478,46494],"source":"[in] `pMenuPane`"},{"content":"A pointer to the quick customize pane.","pos":[46498,46536]},{"content":"[in] <ph id=\"ph1\">`uiToolbarID`</ph>","pos":[46543,46561],"source":"[in] `uiToolbarID`"},{"content":"The control ID of the toolbar to customize.","pos":[46565,46608]},{"pos":[46618,46630],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[46634,46667],"content":"This method always return <ph id=\"ph1\">`TRUE`</ph>.","source":"This method always return `TRUE`."},{"pos":[46677,46684],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The quick customize menu is a pop-up menu that appears when you click the toolbar’s customize button","pos":[46688,46788]},{"pos":[46798,46863],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onshowpanes\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnShowPanes","linkify":"<a name=\"cframewndex__onshowpanes\"></a>  CFrameWndEx::OnShowPanes","source":"<a name=\"cframewndex__onshowpanes\"></a>  CFrameWndEx::OnShowPanes"},{"content":"Called by the framework to show or hide panes.","pos":[46867,46913]},{"pos":[46976,46986],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bShow`</ph>","pos":[46990,47002],"source":"[in] `bShow`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if the application shows the panes; <ph id=\"ph2\">`FALSE`</ph> otherwise.","pos":[47005,47067],"source":" `TRUE` if the application shows the panes; `FALSE` otherwise."},{"pos":[47077,47089],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[47093,47127],"content":"This method always return <ph id=\"ph1\">`FALSE`</ph>.","source":"This method always return `FALSE`."},{"pos":[47137,47144],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[47148,47290],"content":"The default implementation shows the panes if <ph id=\"ph1\">`bShow`</ph> is <ph id=\"ph2\">`TRUE`</ph> and the panes are hidden or when <ph id=\"ph3\">`bShow`</ph> is <ph id=\"ph4\">`FALSE`</ph> and the panes are visible.","source":"The default implementation shows the panes if `bShow` is `TRUE` and the panes are hidden or when `bShow` is `FALSE` and the panes are visible."},{"pos":[47297,47439],"content":"The default implementation hides the panes if <ph id=\"ph1\">`bShow`</ph> is <ph id=\"ph2\">`TRUE`</ph> and the panes are visible or when <ph id=\"ph3\">`bShow`</ph> is <ph id=\"ph4\">`FALSE`</ph> and the panes are hidden.","source":"The default implementation hides the panes if `bShow` is `TRUE` and the panes are visible or when `bShow` is `FALSE` and the panes are hidden."},{"content":"Override this method in a derived class to execute custom code when the framework shows or hides panes.","pos":[47446,47549]},{"pos":[47559,47632],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onshowpopupmenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnShowPopupMenu","linkify":"<a name=\"cframewndex__onshowpopupmenu\"></a>  CFrameWndEx::OnShowPopupMenu","source":"<a name=\"cframewndex__onshowpopupmenu\"></a>  CFrameWndEx::OnShowPopupMenu"},{"content":"Called by the framework when it displays a pop-up menu.","pos":[47636,47691]},{"pos":[47768,47778],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pMenu`</ph>","pos":[47782,47794],"source":"[in] `pMenu`"},{"content":"A pointer to a pop-up menu.","pos":[47798,47825]},{"pos":[47835,47847],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[47851,47907],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pop-up menu is visible; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the pop-up menu is visible; otherwise `FALSE`."},{"pos":[47917,47924],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived class to execute custom code when the framework displays a pop-up menu.","pos":[47928,48033]},{"content":"For example, override this method to change the background color of the commands in a pop-up menu.","pos":[48034,48132]},{"pos":[48142,48197],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onsize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnSize","linkify":"<a name=\"cframewndex__onsize\"></a>  CFrameWndEx::OnSize","source":"<a name=\"cframewndex__onsize\"></a>  CFrameWndEx::OnSize"},{"content":"Called by the framework after the frame's size changes.","pos":[48201,48256]},{"pos":[48347,48357],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nType`</ph>","pos":[48361,48373],"source":"[in] `nType`"},{"content":"The type of resizing.","pos":[48377,48398]},{"content":"For possible values see the parameter <ph id=\"ph1\">`wParam`</ph> in <bpt id=\"p1\">[</bpt>WM_SIZE Notification<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632646)</ept>.","pos":[48399,48532],"source":" For possible values see the parameter `wParam` in [WM_SIZE Notification](http://msdn.microsoft.com/library/windows/desktop/ms632646)."},{"content":"[in] <ph id=\"ph1\">`cx`</ph>","pos":[48539,48548],"source":"[in] `cx`"},{"content":"New width of the frame in pixels.","pos":[48552,48585]},{"content":"[in] <ph id=\"ph1\">`cy`</ph>","pos":[48592,48601],"source":"[in] `cy`"},{"content":"New height of the frame in pixels.","pos":[48605,48639]},{"pos":[48649,48656],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[48666,48725],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onsizing\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnSizing","linkify":"<a name=\"cframewndex__onsizing\"></a>  CFrameWndEx::OnSizing","source":"<a name=\"cframewndex__onsizing\"></a>  CFrameWndEx::OnSizing"},{"content":"Called by the framework when the user resizes the frame.","pos":[48729,48785]},{"pos":[48871,48881],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`fwSide`</ph>","pos":[48885,48898],"source":"[in] `fwSide`"},{"content":"The edge of the frame that is moved.","pos":[48902,48938]},{"content":"See the parameter <ph id=\"ph1\">`wParam`</ph> in <bpt id=\"p1\">[</bpt>WM_SIZING Notification<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632647)</ept>.","pos":[48939,49054],"source":" See the parameter `wParam` in [WM_SIZING Notification](http://msdn.microsoft.com/library/windows/desktop/ms632647)."},{"content":"[in, out] <ph id=\"ph1\">`pRect`</ph>","pos":[49061,49078],"source":"[in, out] `pRect`"},{"content":"Pointer to a <bpt id=\"p1\">[</bpt>CRect<ept id=\"p1\">](../../atl-mfc-shared/reference/crect-class.md)</ept> or <bpt id=\"p2\">[</bpt>RECT<ept id=\"p2\">](../../mfc/reference/rect-structure1.md)</ept> structure that contains the frame's coordinates.","pos":[49082,49248],"source":" Pointer to a [CRect](../../atl-mfc-shared/reference/crect-class.md) or [RECT](../../mfc/reference/rect-structure1.md) structure that contains the frame's coordinates."},{"pos":[49258,49265],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[49275,49350],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onsyscolorchange\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnSysColorChange","linkify":"<a name=\"cframewndex__onsyscolorchange\"></a>  CFrameWndEx::OnSysColorChange","source":"<a name=\"cframewndex__onsyscolorchange\"></a>  CFrameWndEx::OnSysColorChange"},{"content":"Called by the framework when the system colors change.","pos":[49354,49408]},{"pos":[49458,49465],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[49475,49544],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__ontearoffmenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnTearOffMenu","linkify":"<a name=\"cframewndex__ontearoffmenu\"></a>  CFrameWndEx::OnTearOffMenu","source":"<a name=\"cframewndex__ontearoffmenu\"></a>  CFrameWndEx::OnTearOffMenu"},{"content":"Called by the framework when the application displays a menu that has a tear-off bar.","pos":[49548,49633]},{"pos":[49737,49747],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pMenuPopup`</ph>","pos":[49751,49768],"source":"[in] `pMenuPopup`"},{"content":"A pointer to a pop-up menu.","pos":[49772,49799]},{"content":"[in] <ph id=\"ph1\">`pBar`</ph>","pos":[49806,49817],"source":"[in] `pBar`"},{"content":"A pointer to a tear-off bar.","pos":[49821,49849]},{"pos":[49859,49871],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[49875,49953],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pop-up menu with the tear-off bar is enabled; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the pop-up menu with the tear-off bar is enabled; otherwise `FALSE`."},{"pos":[49963,49970],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived class to execute custom code when the framework displays a control bar.","pos":[49974,50079]},{"pos":[50086,50145],"content":"The default implementation does nothing and returns <ph id=\"ph1\">`TRUE`</ph>.","source":"The default implementation does nothing and returns `TRUE`."},{"pos":[50155,50238],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__ontoolbarcontextmenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnToolbarContextMenu","linkify":"<a name=\"cframewndex__ontoolbarcontextmenu\"></a>  CFrameWndEx::OnToolbarContextMenu","source":"<a name=\"cframewndex__ontoolbarcontextmenu\"></a>  CFrameWndEx::OnToolbarContextMenu"},{"content":"Called by the framework to build a toolbar pop-up menu.","pos":[50242,50297]},{"pos":[50393,50403],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`wp`</ph>","pos":[50407,50416],"source":"[in] `wp`"},{"content":"This parameter is not used.","pos":[50420,50447]},{"content":"[in] <ph id=\"ph1\">`lp`</ph>","pos":[50454,50463],"source":"[in] `lp`"},{"content":"This parameter is not used.","pos":[50467,50494]},{"pos":[50504,50516],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Always returns 1.","pos":[50520,50537]},{"pos":[50547,50554],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[50564,50643],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__ontoolbarcreatenew\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnToolbarCreateNew","linkify":"<a name=\"cframewndex__ontoolbarcreatenew\"></a>  CFrameWndEx::OnToolbarCreateNew","source":"<a name=\"cframewndex__ontoolbarcreatenew\"></a>  CFrameWndEx::OnToolbarCreateNew"},{"content":"The framework calls this method to create a new toolbar.","pos":[50647,50703]},{"pos":[50797,50807],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`wp`</ph>","pos":[50811,50820],"source":"[in] `wp`"},{"content":"This parameter is not used.","pos":[50824,50851]},{"content":"[in] <ph id=\"ph1\">`lp`</ph>","pos":[50858,50867],"source":"[in] `lp`"},{"content":"Pointer to the text for the title bar of the toolbar.","pos":[50871,50924]},{"pos":[50934,50946],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[50950,51017],"content":"Pointer to the new toolbar; or <ph id=\"ph1\">`NULL`</ph> if a toolbar was not created.","source":"Pointer to the new toolbar; or `NULL` if a toolbar was not created."},{"pos":[51027,51034],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[51044,51117],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__ontoolbardelete\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnToolbarDelete","linkify":"<a name=\"cframewndex__ontoolbardelete\"></a>  CFrameWndEx::OnToolbarDelete","source":"<a name=\"cframewndex__ontoolbardelete\"></a>  CFrameWndEx::OnToolbarDelete"},{"content":"Called by the framework when a toolbar is deleted.","pos":[51121,51171]},{"pos":[51258,51268],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in]","pos":[51272,51276]},{"content":"This parameter is not used.","pos":[51280,51307]},{"content":"[in] <ph id=\"ph1\">`lp`</ph>","pos":[51314,51323],"source":"[in] `lp`"},{"content":"Pointer to a toolbar.","pos":[51327,51348]},{"pos":[51358,51370],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[51374,51428],"content":"<ph id=\"ph1\">`TRUE`</ph> if the toolbar was deleted; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the toolbar was deleted; otherwise, `FALSE`."},{"pos":[51438,51445],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[51455,51532],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onupdateframemenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnUpdateFrameMenu","linkify":"<a name=\"cframewndex__onupdateframemenu\"></a>  CFrameWndEx::OnUpdateFrameMenu","source":"<a name=\"cframewndex__onupdateframemenu\"></a>  CFrameWndEx::OnUpdateFrameMenu"},{"content":"Called by the framework to set the frame menu.","pos":[51536,51582]},{"pos":[51655,51665],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`hMenuAlt`</ph>","pos":[51669,51684],"source":"[in] `hMenuAlt`"},{"content":"Handle to the alternative menu.","pos":[51688,51719]},{"pos":[51729,51736],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[51746,51825],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onupdateframetitle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnUpdateFrameTitle","linkify":"<a name=\"cframewndex__onupdateframetitle\"></a>  CFrameWndEx::OnUpdateFrameTitle","source":"<a name=\"cframewndex__onupdateframetitle\"></a>  CFrameWndEx::OnUpdateFrameTitle"},{"content":"The framework calls this method to update the title bar of the frame window.","pos":[51829,51905]},{"pos":[51981,51991],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bAddToTitle`</ph>","pos":[51995,52013],"source":"[in] `bAddToTitle`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to add the active document title to the frame window title bar; otherwise <ph id=\"ph2\">`FALSE.`</ph>","pos":[52016,52106],"source":" `TRUE` to add the active document title to the frame window title bar; otherwise `FALSE.`"},{"pos":[52116,52123],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[52133,52208],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onupdatepanemenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnUpdatePaneMenu","linkify":"<a name=\"cframewndex__onupdatepanemenu\"></a>  CFrameWndEx::OnUpdatePaneMenu","source":"<a name=\"cframewndex__onupdatepanemenu\"></a>  CFrameWndEx::OnUpdatePaneMenu"},{"content":"Called by the framework to update the pane menu.","pos":[52212,52260]},{"pos":[52332,52342],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pCmdUI`</ph>","pos":[52346,52359],"source":"[in] `pCmdUI`"},{"content":"Pointer to the pane user interface object.","pos":[52363,52405]},{"pos":[52415,52422],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[52432,52511],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__onwindowposchanged\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::OnWindowPosChanged","linkify":"<a name=\"cframewndex__onwindowposchanged\"></a>  CFrameWndEx::OnWindowPosChanged","source":"<a name=\"cframewndex__onwindowposchanged\"></a>  CFrameWndEx::OnWindowPosChanged"},{"content":"Called by the framework when the frame size, position, or z-order has changed because of a call to a window management method.","pos":[52515,52641]},{"pos":[52724,52734],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`lpwndpos`</ph>","pos":[52738,52753],"source":"[in] `lpwndpos`"},{"content":"Pointer to a <bpt id=\"p1\">[</bpt>WINDOWPOS<ept id=\"p1\">](../../mfc/reference/windowpos-structure1.md)</ept> structure that contains the new size and position.","pos":[52757,52877],"source":" Pointer to a [WINDOWPOS](../../mfc/reference/windowpos-structure1.md) structure that contains the new size and position."},{"pos":[52887,52894],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[52904,52973],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__panefrompoint\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::PaneFromPoint","linkify":"<a name=\"cframewndex__panefrompoint\"></a>  CFrameWndEx::PaneFromPoint","source":"<a name=\"cframewndex__panefrompoint\"></a>  CFrameWndEx::PaneFromPoint"},{"content":"Searches each pane for the given point.","pos":[52977,53016]},{"pos":[53313,53323],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`point`</ph>","pos":[53327,53339],"source":"[in] `point`"},{"content":"The screen coordinates of the point to check.","pos":[53343,53388]},{"content":"[in] <ph id=\"ph1\">`nSensitivity`</ph>","pos":[53395,53414],"source":"[in] `nSensitivity`"},{"content":"Expand the bounding rectangle of each control bar by this amount when searching for point.","pos":[53418,53508]},{"content":"[in] <ph id=\"ph1\">`bExactBar`</ph>","pos":[53515,53531],"source":"[in] `bExactBar`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to ignore the <ph id=\"ph2\">`nSensitivity`</ph> parameter; otherwise, <ph id=\"ph3\">`FALSE`</ph>.","pos":[53534,53601],"source":" `TRUE` to ignore the `nSensitivity` parameter; otherwise, `FALSE`."},{"content":"[in] <ph id=\"ph1\">`pRTCBarType`</ph>","pos":[53608,53626],"source":"[in] `pRTCBarType`"},{"content":"If not <ph id=\"ph1\">`NULL`</ph>, the method searches only the control bars of the specified type.","pos":[53630,53709],"source":" If not `NULL`, the method searches only the control bars of the specified type."},{"content":"[out] <ph id=\"ph1\">`dwAlignment`</ph>","pos":[53716,53735],"source":"[out] `dwAlignment`"},{"content":"If successful, this parameter contains the side of the control bar that is closest to the specified point.","pos":[53739,53845]},{"content":"Otherwise, this parameter is not initialized.","pos":[53846,53891]},{"pos":[53901,53913],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[53917,54001],"content":"A pointer to a control bar that contains the <ph id=\"ph1\">`point`</ph>; <ph id=\"ph2\">`NULL`</ph> if no control is found.","source":"A pointer to a control bar that contains the `point`; `NULL` if no control is found."},{"pos":[54011,54018],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[54022,54098],"content":"This method searches all the control bars in your application for a <ph id=\"ph1\">`point`</ph>.","source":"This method searches all the control bars in your application for a `point`."},{"content":"Use <ph id=\"ph1\">`nSensitivity`</ph> to increase the size of the search area.","pos":[54105,54164],"source":"Use `nSensitivity` to increase the size of the search area."},{"content":"Use <ph id=\"ph1\">`pRTCBarType`</ph> to restrict the types of control bars that the method searches.","pos":[54165,54246],"source":" Use `pRTCBarType` to restrict the types of control bars that the method searches."},{"pos":[54256,54337],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__pretranslatemessage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::PreTranslateMessage","linkify":"<a name=\"cframewndex__pretranslatemessage\"></a>  CFrameWndEx::PreTranslateMessage","source":"<a name=\"cframewndex__pretranslatemessage\"></a>  CFrameWndEx::PreTranslateMessage"},{"content":"Handles specific window messages before they are dispatched.","pos":[54341,54401]},{"pos":[54471,54481],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pMsg`</ph>","pos":[54485,54496],"source":"[in] `pMsg`"},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>MSG<ept id=\"p1\">](../../mfc/reference/msg-structure1.md)</ept> structure that contains the message to process.","pos":[54500,54607],"source":" A pointer to a [MSG](../../mfc/reference/msg-structure1.md) structure that contains the message to process."},{"pos":[54617,54629],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Non-zero if the message was handled and should not be dispatched; 0 if the message was not handled and should be dispatched.","pos":[54633,54757]},{"pos":[54767,54774],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[54784,54851],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__recalclayout\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::RecalcLayout","linkify":"<a name=\"cframewndex__recalclayout\"></a>  CFrameWndEx::RecalcLayout","source":"<a name=\"cframewndex__recalclayout\"></a>  CFrameWndEx::RecalcLayout"},{"content":"Adjusts the layout of the frame and its child windows.","pos":[54855,54909]},{"pos":[54982,54992],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bNotify`</ph>","pos":[54996,55010],"source":"[in] `bNotify`"},{"content":"Specifies whether to notify the OLE client item about the layout change.","pos":[55014,55086]},{"pos":[55096,55103],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called when the size of the frame window has changed or when control bars are displayed or hidden.","pos":[55107,55220]},{"pos":[55230,55323],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__removepanefromdockmanager\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::RemovePaneFromDockManager","linkify":"<a name=\"cframewndex__removepanefromdockmanager\"></a>  CFrameWndEx::RemovePaneFromDockManager","source":"<a name=\"cframewndex__removepanefromdockmanager\"></a>  CFrameWndEx::RemovePaneFromDockManager"},{"content":"Unregisters a pane and removes it from the docking manager.","pos":[55327,55386]},{"pos":[55575,55585],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pControlBar`</ph>","pos":[55589,55607],"source":"[in] `pControlBar`"},{"content":"A pointer to the control bar pane to remove.","pos":[55611,55655]},{"content":"[in] <ph id=\"ph1\">`bDestroy`</ph>","pos":[55662,55677],"source":"[in] `bDestroy`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to destroy the control bar after removing it; <ph id=\"ph2\">`FALSE`</ph> otherwise.","pos":[55680,55752],"source":" `TRUE` to destroy the control bar after removing it; `FALSE` otherwise."},{"content":"[in] <ph id=\"ph1\">`bAdjustLayout`</ph>","pos":[55759,55779],"source":"[in] `bAdjustLayout`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to adjust the docking layout; <ph id=\"ph2\">`FALSE`</ph> otherwise.","pos":[55782,55838],"source":" `TRUE` to adjust the docking layout; `FALSE` otherwise."},{"content":"[in] <ph id=\"ph1\">`bAutoHide`</ph>","pos":[55845,55861],"source":"[in] `bAutoHide`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if the control bar is in auto-hide mode; <ph id=\"ph2\">`FALSE`</ph> otherwise.","pos":[55864,55931],"source":" `TRUE` if the control bar is in auto-hide mode; `FALSE` otherwise."},{"content":"[in] <ph id=\"ph1\">`pBarReplacement`</ph>","pos":[55938,55960],"source":"[in] `pBarReplacement`"},{"content":"A pointer to a pane that replaces the removed pane.","pos":[55964,56015]},{"pos":[56025,56032],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use this method to remove a control bar from the docking layout of the frame window.","pos":[56036,56120]},{"content":"The <bpt id=\"p1\">[</bpt>CDockingManager Class<ept id=\"p1\">](../../mfc/reference/cdockingmanager-class.md)</ept> handles the layout of control bars.","pos":[56127,56236],"source":"The [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md) handles the layout of control bars."},{"content":"You must register each control bar with the docking manager by using the <bpt id=\"p1\">[</bpt>CFrameWndEx::AddPane<ept id=\"p1\">](#cframewndex__addpane)</ept> method or the <bpt id=\"p2\">[</bpt>CFrameWndEx::InsertPane<ept id=\"p2\">](#cframewndex__insertpane)</ept> method.","pos":[56237,56429],"source":" You must register each control bar with the docking manager by using the [CFrameWndEx::AddPane](#cframewndex__addpane) method or the [CFrameWndEx::InsertPane](#cframewndex__insertpane) method."},{"pos":[56439,56506],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__setdockstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::SetDockState","linkify":"<a name=\"cframewndex__setdockstate\"></a>  CFrameWndEx::SetDockState","source":"<a name=\"cframewndex__setdockstate\"></a>  CFrameWndEx::SetDockState"},{"content":"Restores the docking layout to the docking state stored in the registry.","pos":[56510,56582]},{"pos":[56651,56661],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The docking state.","pos":[56676,56694]},{"content":"This parameter is ignored.","pos":[56695,56721]},{"pos":[56731,56814],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__setprintpreviewframe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::SetPrintPreviewFrame","linkify":"<a name=\"cframewndex__setprintpreviewframe\"></a>  CFrameWndEx::SetPrintPreviewFrame","source":"<a name=\"cframewndex__setprintpreviewframe\"></a>  CFrameWndEx::SetPrintPreviewFrame"},{"content":"Sets the print preview frame window.","pos":[56818,56854]},{"pos":[56923,56933],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pWnd`</ph>","pos":[56937,56948],"source":"[in] `pWnd`"},{"content":"Pointer to a print preview frame window.","pos":[56952,56992]},{"pos":[57002,57009],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[57019,57094],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__setuptoolbarmenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::SetupToolbarMenu","linkify":"<a name=\"cframewndex__setuptoolbarmenu\"></a>  CFrameWndEx::SetupToolbarMenu","source":"<a name=\"cframewndex__setuptoolbarmenu\"></a>  CFrameWndEx::SetupToolbarMenu"},{"content":"Inserts user-defined commands into a toolbar menu.","pos":[57098,57148]},{"pos":[57301,57311],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`menu`</ph>","pos":[57315,57326],"source":"[in] `menu`"},{"content":"A <ph id=\"ph1\">`CMenu`</ph> object to be modified.","pos":[57330,57362],"source":" A `CMenu` object to be modified."},{"content":"[in] <ph id=\"ph1\">`uiViewUserToolbarCmdFirst`</ph>","pos":[57369,57401],"source":"[in] `uiViewUserToolbarCmdFirst`"},{"content":"The first user-defined command.","pos":[57405,57436]},{"content":"[in] <ph id=\"ph1\">`uiViewUserToolbarCmdLast`</ph>","pos":[57443,57474],"source":"[in] `uiViewUserToolbarCmdLast`"},{"content":"The last user-defined command.","pos":[57478,57508]},{"pos":[57518,57525],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework stores user-defined commands in a list.","pos":[57529,57582]},{"content":"Use <ph id=\"ph1\">`uiViewUserToolbarCmdFirst`</ph> and <ph id=\"ph2\">`uiViewUserToolbarCmdList`</ph> to specify the indexes of the commands to insert.","pos":[57583,57695],"source":" Use `uiViewUserToolbarCmdFirst` and `uiViewUserToolbarCmdList` to specify the indexes of the commands to insert."},{"pos":[57705,57776],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__showfullscreen\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::ShowFullScreen","linkify":"<a name=\"cframewndex__showfullscreen\"></a>  CFrameWndEx::ShowFullScreen","source":"<a name=\"cframewndex__showfullscreen\"></a>  CFrameWndEx::ShowFullScreen"},{"content":"Switches the main frame between full-screen mode and regular mode.","pos":[57780,57846]},{"pos":[57894,57953],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__showpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::ShowPane","linkify":"<a name=\"cframewndex__showpane\"></a>  CFrameWndEx::ShowPane","source":"<a name=\"cframewndex__showpane\"></a>  CFrameWndEx::ShowPane"},{"content":"Shows or hides the specified pane.","pos":[57957,57991]},{"pos":[58112,58122],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pBar`</ph>","pos":[58126,58137],"source":"[in] `pBar`"},{"content":"A pointer to the control bar to show or hide.","pos":[58141,58186]},{"content":"[in] <ph id=\"ph1\">`bShow`</ph>","pos":[58193,58205],"source":"[in] `bShow`"},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, the application shows the control bar.","pos":[58209,58258],"source":" If `TRUE`, the application shows the control bar."},{"content":"Otherwise, the application hides the control bar.","pos":[58259,58308]},{"content":"[in] <ph id=\"ph1\">`bDelay`</ph>","pos":[58315,58328],"source":"[in] `bDelay`"},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, delay the adjustment of the docking layout until the framework calls <bpt id=\"p1\">[</bpt>CFrameWndEx::AdjustDockingLayout<ept id=\"p1\">](#cframewndex__adjustdockinglayout)</ept>.","pos":[58332,58482],"source":" If `TRUE`, delay the adjustment of the docking layout until the framework calls [CFrameWndEx::AdjustDockingLayout](#cframewndex__adjustdockinglayout)."},{"content":"Otherwise, recalculate the docking layout immediately.","pos":[58483,58537]},{"content":"[in] <ph id=\"ph1\">`bActivate`</ph>","pos":[58544,58560],"source":"[in] `bActivate`"},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, make the control bar active.","pos":[58564,58603],"source":" If `TRUE`, make the control bar active."},{"content":"Otherwise, display the control bar in an inactive state.","pos":[58604,58660]},{"pos":[58670,58739],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__updatecaption\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::UpdateCaption","linkify":"<a name=\"cframewndex__updatecaption\"></a>  CFrameWndEx::UpdateCaption","source":"<a name=\"cframewndex__updatecaption\"></a>  CFrameWndEx::UpdateCaption"},{"content":"Called by the framework to update the window frame caption.","pos":[58743,58802]},{"pos":[58849,58856],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[58866,58923],"content":"<bpt id=\"p1\">&lt;a name=\"cframewndex__winhelp\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFrameWndEx::WinHelp","linkify":"<a name=\"cframewndex__winhelp\"></a>  CFrameWndEx::WinHelp","source":"<a name=\"cframewndex__winhelp\"></a>  CFrameWndEx::WinHelp"},{"content":"Invokes either the WinHelp application or context related help.","pos":[58927,58990]},{"pos":[59088,59098],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Data that depends on the <ph id=\"ph1\">`nCmd`</ph> parameter.","pos":[59114,59156],"source":" Data that depends on the `nCmd` parameter."},{"content":"For a list of possible values see <bpt id=\"p1\">[</bpt>WinHelp<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb762267)</ept>.","pos":[59157,59261],"source":" For a list of possible values see [WinHelp](http://msdn.microsoft.com/library/windows/desktop/bb762267)."},{"content":"The help command.","pos":[59278,59295]},{"content":"For a list of possible values see <bpt id=\"p1\">[</bpt>WinHelp<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb762267)</ept>.","pos":[59296,59400],"source":" For a list of possible values see [WinHelp](http://msdn.microsoft.com/library/windows/desktop/bb762267)."},{"pos":[59410,59417],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[59426,59434],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[59438,59486],"source":"[Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Classes<ept id=\"p1\">](../../mfc/reference/mfc-classes.md)</ept><ph id=\"ph1\"> </ph>","pos":[59489,59536],"source":" [Classes](../../mfc/reference/mfc-classes.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CFrameWnd<ept id=\"p1\">](../../mfc/reference/cframewnd-class.md)</ept>","pos":[59539,59591],"source":" [CFrameWnd](../../mfc/reference/cframewnd-class.md)"}],"content":"---\ntitle: \"CFrameWndEx Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CFrameWndEx\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CFrameWndEx class\"\nms.assetid: 5830aca8-4a21-4f31-91f1-dd5477ffcc8d\ncaps.latest.revision: 39\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CFrameWndEx Class\nImplements the functionality of a Windows single document interface (SDI) overlapped or popup frame window, and provides members for managing the window. It extends the [CFrameWnd](../../mfc/reference/cframewnd-class.md) class.  \n  \n## Syntax  \n  \n```  \nclass CFrameWndEx : public CFrameWnd  \n```  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CFrameWndEx::ActiveItemRecalcLayout](#cframewndex__activeitemrecalclayout)|Adjusts the layout of the OLE client item and the frame's client area.|  \n|`CFrameWndEx::AddDockSite`|This method is not used.|  \n|[CFrameWndEx::AddPane](#cframewndex__addpane)|Registers a control bar with the docking manager.|  \n|[CFrameWndEx::AdjustDockingLayout](#cframewndex__adjustdockinglayout)|Recalculates the layout of all panes that are docked to the frame window.|  \n|[CFrameWndEx::DelayUpdateFrameMenu](#cframewndex__delayupdateframemenu)|Sets the frame menu and then updates it when command processing is idle.|  \n|[CFrameWndEx::DockPane](#cframewndex__dockpane)|Docks the specified pane to the frame window.|  \n|[CFrameWndEx::DockPaneLeftOf](#cframewndex__dockpaneleftof)|Docks one pane to the left of another pane.|  \n|[CFrameWndEx::EnableAutoHidePanes](#cframewndex__enableautohidepanes)|Enables the auto-hide mode for the panes when they are docked to the specified sides of the main frame window.|  \n|[CFrameWndEx::EnableDocking](#cframewndex__enabledocking)|Enables the docking of the panes that belong to the frame window.|  \n|[CFrameWndEx::EnableFullScreenMainMenu](#cframewndex__enablefullscreenmainmenu)|Shows or hides the main menu in a full screen mode.|  \n|[CFrameWndEx::EnableFullScreenMode](#cframewndex__enablefullscreenmode)|Enables the full screen mode for the frame window.|  \n|[CFrameWndEx::EnableLoadDockState](#cframewndex__enableloaddockstate)|Enables or disables the loading of the docking state.|  \n|[CFrameWndEx::EnablePaneMenu](#cframewndex__enablepanemenu)|Enables or disables the automatic handling of the pane menu.|  \n|[CFrameWndEx::GetActivePopup](#cframewndex__getactivepopup)|Returns a pointer to the currently displayed pop-up menu.|  \n|[CFrameWndEx::GetDefaultResId](#cframewndex__getdefaultresid)|Returns the resource ID that you specified when the framework loaded the frame window.|  \n|[CFrameWndEx::GetDockingManager](#cframewndex__getdockingmanager)|Retrieves the [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md) object for the frame window.|  \n|[CFrameWndEx::GetMenuBar](#cframewndex__getmenubar)|Returns a pointer to the menu bar object attached to the frame window.|  \n|[CFrameWndEx::GetPane](#cframewndex__getpane)|Returns a pointer to the pane that has the specified ID.|  \n|[CFrameWndEx::GetRibbonBar](#cframewndex__getribbonbar)|Retrieves the ribbon bar control for the frame.|  \n|[CFrameWndEx::GetTearOffBars](#cframewndex__gettearoffbars)|Returns a list of pane objects that are in a tear-off state.|  \n|[CFrameWndEx::GetToolbarButtonToolTipText](#cframewndex__gettoolbarbuttontooltiptext)|Called by the framework when the application displays the tooltip for a toolbar button.|  \n|[CFrameWndEx::InsertPane](#cframewndex__insertpane)|Registers a pane with the docking manager.|  \n|[CFrameWndEx::IsFullScreen](#cframewndex__isfullscreen)|Determines whether the frame window is in full screen mode.|  \n|[CFrameWndEx::IsMenuBarAvailable](#cframewndex__ismenubaravailable)|Determines whether the pointer to the menu bar object is valid.|  \n|[CFrameWndEx::IsPointNearDockSite](#cframewndex__ispointneardocksite)|Indicates whether the point is located in an alignment zone.|  \n|[CFrameWndEx::IsPrintPreview](#cframewndex__isprintpreview)|Indicates whether the frame window is in print preview mode.|  \n|[CFrameWndEx::LoadFrame](#cframewndex__loadframe)|This method is called after construction to create the frame window and load its resources.|  \n|[CFrameWndEx::NegotiateBorderSpace](#cframewndex__negotiateborderspace)|Implements OLE client border negotiation.|  \n|[CFrameWndEx::OnActivate](#cframewndex__onactivate)|The framework calls this method when user input is switched to or away from the frame.|  \n|[CFrameWndEx::OnActivateApp](#cframewndex__onactivateapp)|Called by the framework when the application is either selected or deselected.|  \n|[CFrameWndEx::OnChangeVisualManager](#cframewndex__onchangevisualmanager)|Called by the framework when a change to the frame requires a change to the visual manager.|  \n|[CFrameWndEx::OnClose](#cframewndex__onclose)|The framework calls this method to close the frame.|  \n|[CFrameWndEx::OnCloseDockingPane](#cframewndex__onclosedockingpane)|Called by the framework when the user clicks the **Close** button on a docking pane.|  \n|[CFrameWndEx::OnCloseMiniFrame](#cframewndex__oncloseminiframe)|Called by the framework when the user clicks the **Close** button on a floating mini frame window.|  \n|[CFrameWndEx::OnClosePopupMenu](#cframewndex__onclosepopupmenu)|Called by the framework when an active pop-up menu processes a WM_DESTROY message.|  \n|[CFrameWndEx::OnCmdMsg](#cframewndex__oncmdmsg)|Dispatches command messages.|  \n|[CFrameWndEx::OnContextHelp](#cframewndex__oncontexthelp)|Called by the framework to display context related help.|  \n|[CFrameWndEx::OnCreate](#cframewndex__oncreate)|Called by the framework after the frame is created.|  \n|[CFrameWndEx::OnDestroy](#cframewndex__ondestroy)|Called by the framework when the frame is destroyed.|  \n|[CFrameWndEx::OnDrawMenuImage](#cframewndex__ondrawmenuimage)|Called by the framework when the application draws the image associated with a menu item.|  \n|[CFrameWndEx::OnDrawMenuLogo](#cframewndex__ondrawmenulogo)|Called by the framework when a `CMFCPopupMenu` object processes a [WM_PAINT](http://msdn.microsoft.com/library/windows/desktop/dd145213) message.|  \n|[CFrameWndEx::OnDWMCompositionChanged](#cframewndex__ondwmcompositionchanged)|Called by the framework when Desktop Window Manager (DWM) composition has been enabled or disabled.|  \n|[CFrameWndEx::OnExitSizeMove](#cframewndex__onexitsizemove)|Called by the framework when the frame stops moving or resizing.|  \n|[CFrameWndEx::OnGetMinMaxInfo](#cframewndex__ongetminmaxinfo)|Called by the framework when the frame is resized to set window dimension limits.|  \n|[CFrameWndEx::OnIdleUpdateCmdUI](#cframewndex__onidleupdatecmdui)|Called by the framework to update the frame display when command processing is idle.|  \n|[CFrameWndEx::OnLButtonDown](#cframewndex__onlbuttondown)|The framework calls this method when the user presses the left mouse button.|  \n|[CFrameWndEx::OnLButtonUp](#cframewndex__onlbuttonup)|The framework calls this method when the user releases the left mouse button.|  \n|[CFrameWndEx::OnMenuButtonToolHitTest](#cframewndex__onmenubuttontoolhittest)|Called by the framework when a `CMFCToolBarButton` object processes a `WM_NCHITTEST` message.|  \n|[CFrameWndEx::OnMenuChar](#cframewndex__onmenuchar)|Called by the framework when a menu is displayed and the user presses a key that does not correspond to a command.|  \n|[CFrameWndEx::OnMouseMove](#cframewndex__onmousemove)|The framework calls this method when the pointer moves.|  \n|[CFrameWndEx::OnMoveMiniFrame](#cframewndex__onmoveminiframe)|Called by the framework when a pane window moves.|  \n|[CFrameWndEx::OnNcActivate](#cframewndex__onncactivate)|Called by the framework when the non-client area of the frame must be redrawn to indicate a change in the active state.|  \n|[CFrameWndEx::OnNcCalcSize](#cframewndex__onnccalcsize)|Called by the framework when the size and position of the client area must be calculated.|  \n|[CFrameWndEx::OnNcHitTest](#cframewndex__onnchittest)|Called by the framework when the pointer moves or when a mouse button is pressed or released.|  \n|[CFrameWndEx::OnNcMouseMove](#cframewndex__onncmousemove)|Called by the framework when the pointer moves in a non-client area.|  \n|[CFrameWndEx::OnNcPaint](#cframewndex__onncpaint)|Called by the framework when the non-client area must be painted.|  \n|[CFrameWndEx::OnPaneCheck](#cframewndex__onpanecheck)|Called by the framework to control the visibility of a pane.|  \n|[CFrameWndEx::OnPostPreviewFrame](#cframewndex__onpostpreviewframe)|Called by the framework when the user has changed the print preview mode.|  \n|[CFrameWndEx::OnPowerBroadcast](#cframewndex__onpowerbroadcast)|Called by the framework when a power management event occurs.|  \n|[CFrameWndEx::OnSetMenu](#cframewndex__onsetmenu)|Called by the framework to replace the frame window menu.|  \n|[CFrameWndEx::OnSetPreviewMode](#cframewndex__onsetpreviewmode)|Called by the framework to set the print preview mode for the frame.|  \n|[CFrameWndEx::OnSetText](#cframewndex__onsettext)|Called by the framework to set the text of a window.|  \n|[CFrameWndEx::OnShowCustomizePane](#cframewndex__onshowcustomizepane)|Called by the framework when a quick customize pane is enabled.|  \n|[CFrameWndEx::OnShowPanes](#cframewndex__onshowpanes)|Called by the framework to show or hide panes.|  \n|[CFrameWndEx::OnShowPopupMenu](#cframewndex__onshowpopupmenu)|Called by the framework when a pop-up menu is enabled.|  \n|[CFrameWndEx::OnSize](#cframewndex__onsize)|The framework calls this method after the frame's size changes.|  \n|[CFrameWndEx::OnSizing](#cframewndex__onsizing)|The framework calls this method when the user resizes the frame.|  \n|[CFrameWndEx::OnSysColorChange](#cframewndex__onsyscolorchange)|Called by the framework when the system colors change.|  \n|[CFrameWndEx::OnTearOffMenu](#cframewndex__ontearoffmenu)|Called by the framework when a menu that has a tear-off bar is enabled.|  \n|[CFrameWndEx::OnToolbarContextMenu](#cframewndex__ontoolbarcontextmenu)|Called by the framework to build a toolbar context menu.|  \n|[CFrameWndEx::OnToolbarCreateNew](#cframewndex__ontoolbarcreatenew)|The framework calls this method to create a new toolbar.|  \n|[CFrameWndEx::OnToolbarDelete](#cframewndex__ontoolbardelete)|Called by the framework when a toolbar is deleted.|  \n|[CFrameWndEx::OnUpdateFrameMenu](#cframewndex__onupdateframemenu)|Called by the framework to set the frame menu.|  \n|[CFrameWndEx::OnUpdateFrameTitle](#cframewndex__onupdateframetitle)|The framework calls this method to update the title bar of the frame window.|  \n|[CFrameWndEx::OnUpdatePaneMenu](#cframewndex__onupdatepanemenu)|Called by the framework to update the pane menu.|  \n|[CFrameWndEx::OnWindowPosChanged](#cframewndex__onwindowposchanged)|Called by the framework when the frame size, position, or z-order has changed because of a call to a window management method.|  \n|[CFrameWndEx::PaneFromPoint](#cframewndex__panefrompoint)|Returns the docking pane that contains the specified point.|  \n|[CFrameWndEx::PreTranslateMessage](#cframewndex__pretranslatemessage)|Handles specific window messages before they are dispatched.|  \n|[CFrameWndEx::RecalcLayout](#cframewndex__recalclayout)|Adjusts the layout of the frame and its child windows.|  \n|[CFrameWndEx::RemovePaneFromDockManager](#cframewndex__removepanefromdockmanager)|Unregisters a pane and removes it from the internal list in the docking manager.|  \n|[CFrameWndEx::SetDockState](#cframewndex__setdockstate)|Restores the docking layout to the docking state stored in the registry.|  \n|[CFrameWndEx::SetPrintPreviewFrame](#cframewndex__setprintpreviewframe)|Sets the print preview frame window.|  \n|[CFrameWndEx::SetupToolbarMenu](#cframewndex__setuptoolbarmenu)|Inserts user-defined commands into a toolbar menu.|  \n|[CFrameWndEx::ShowFullScreen](#cframewndex__showfullscreen)|Switches the main frame between the full screen and the regular modes.|  \n|[CFrameWndEx::ShowPane](#cframewndex__showpane)|Shows or hides the specified pane.|  \n|[CFrameWndEx::UpdateCaption](#cframewndex__updatecaption)|Called by the framework to update the window frame caption.|  \n|[CFrameWndEx::WinHelp](#cframewndex__winhelp)|Invokes either the `WinHelp` application or context related help.|  \n  \n## Example  \n The following example demonstrates how to inherit a class from the `CFrameWndEx` class. The example illustrates the method signatures in the subclass, and how to override the `OnShowPopupMenu` method. This code snippet is part of the [Word Pad sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_WordPad#3](../../mfc/reference/codesnippet/cpp/cframewndex-class_1.h)]  \n[!code-cpp[NVC_MFC_WordPad#4](../../mfc/reference/codesnippet/cpp/cframewndex-class_2.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n [CFrameWnd](../../mfc/reference/cframewnd-class.md)  \n  \n [CFrameWndEx](../../mfc/reference/cframewndex-class.md)  \n  \n## Requirements  \n **Header:** afxframewndex.h  \n  \n##  <a name=\"cframewndex__activeitemrecalclayout\"></a>  CFrameWndEx::ActiveItemRecalcLayout  \n Adjusts the layout of the OLE client item and the frame's client area.  \n  \n```  \nvoid ActiveItemRecalcLayout();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__addpane\"></a>  CFrameWndEx::AddPane  \n Registers a control bar with the docking manager.  \n  \n```  \nBOOL AddPane(\n    CBasePane* pControlBar,  \n    BOOL bTail=TRUE);\n```  \n  \n### Parameters  \n [in] `pControlBar`  \n A control bar pane to register.  \n  \n [in] `bTail`  \n `TRUE` if you want to add the control bar pane to the end of the list; `FALSE` otherwise.  \n  \n### Return Value  \n `TRUE` if the control bar was successfully registered; `FALSE` otherwise.  \n  \n##  <a name=\"cframewndex__adjustdockinglayout\"></a>  CFrameWndEx::AdjustDockingLayout  \n Recalculates the layout of all panes that are docked to the frame window.  \n  \n```  \nvirtual void AdjustDockingLayout(HDWP hdwp=NULL);\n```  \n  \n### Parameters  \n `hdwp`  \n A handle to a structure that contains the positions of multiple windows. .  \n  \n### Remarks  \n The hdwp structure is initialized by the [BeginDeferWindowPos](http://msdn.microsoft.com/library/windows/desktop/ms632672) method.  \n  \n##  <a name=\"cframewndex__delayupdateframemenu\"></a>  CFrameWndEx::DelayUpdateFrameMenu  \n Sets the frame menu and then updates it when command processing is idle.  \n  \n```  \nvirtual void DelayUpdateFrameMenu(HMENU hMenuAlt);\n```  \n  \n### Parameters  \n [in] `hMenuAlt`  \n Handle to an alternative menu.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__dockpane\"></a>  CFrameWndEx::DockPane  \n Docks the specified pane to the frame window.  \n  \n```  \nvoid DockPane(\n    CBasePane* pBar,  \n    UINT nDockBarID=0,  \n    LPCRECT lpRect=NULL);\n```  \n  \n### Parameters  \n [in] `pBar`  \n A pointer to the control bar to be docked.  \n  \n [in] `nDockBarID`  \n The ID of the side of the frame window to dock to.  \n  \n [in] `lpRect`  \n A pointer to a constant Rect structure that specifies the window's screen position and size.  \n  \n### Remarks  \n The `nDockBarID` parameter can have one of the following values:  \n  \n-   AFX_IDW_DOCKBAR_TOP  \n  \n-   AFX_IDW_DOCKBAR_BOTTOM  \n  \n-   AFX_IDW_DOCKBAR_LEFT  \n  \n-   AFX_IDW_DOCKBAR_RIGHT  \n  \n##  <a name=\"cframewndex__dockpaneleftof\"></a>  CFrameWndEx::DockPaneLeftOf  \n Docks the specified pane to the left of another pane.  \n  \n```  \nBOOL DockPaneLeftOf(\n    CPane* pBar,  \n    CPane* pLeftOf);\n```  \n  \n### Parameters  \n [in] `pBar`  \n A pointer to the pane object to be docked.  \n  \n [in] `pLeftOf`  \n A pointer to the pane to the left of which to dock the pane specified by `pBar`.  \n  \n### Return Value  \n `TRUE` if `pBar` is docked successfully. `FALSE` otherwise.  \n  \n### Remarks  \n The method takes the toolbar specified by the `pBar` parameter and docks it at the left side of the toolbar specified by `pLeftOf` parameter.  \n  \n##  <a name=\"cframewndex__enableautohidepanes\"></a>  CFrameWndEx::EnableAutoHidePanes  \n Enables auto-hide mode for the pane when it is docked to the specified side of the main frame window.  \n  \n```  \nBOOL EnableAutoHidePanes(DWORD dwDockStyle);\n```  \n  \n### Parameters  \n [in] `dwDockStyle`  \n Specifies the side of the main frame window to which to dock the pane.  \n  \n### Return Value  \n `TRUE` if a bar pane is successfully docked to the frame window side that is specified by `dwDockStyle`, `FALSE` otherwise.  \n  \n### Remarks  \n `dwDockStyle` can have one of the following values:  \n  \n-   CBRS_ALIGN_TOP: allows the control bar to be docked to the top of the client area of a frame window.  \n  \n-   CBRS_ALIGN_BOTTOM: allows the control bar to be docked to the bottom of the client area of a frame window.  \n  \n-   CBRS_ALIGN_LEFT: allows the control bar to be docked to the left side of the client area of a frame window.  \n  \n-   CBRS_ALIGN_RIGHT: allows the control bar to be docked to the right side of the client area of a frame window.  \n  \n##  <a name=\"cframewndex__enabledocking\"></a>  CFrameWndEx::EnableDocking  \n Enables the docking of the panes of the frame window.  \n  \n```  \nBOOL EnableDocking(DWORD dwDockStyle);\n```  \n  \n### Parameters  \n [in] `dwDockStyle`  \n Specifies the side of the main frame window where the pane bar docks.  \n  \n### Return Value  \n `TRUE` if a bar pane can be successfully docked at the specified side. `FALSE` otherwise.  \n  \n### Remarks  \n The `dwDockStyle` parameter can have one of the following values:  \n  \n-   CBRS_ALIGN_TOP  \n  \n-   CBRS_ALIGN_BOTTOM  \n  \n-   CBRS_ALIGN_LEFT  \n  \n-   CBRS_ALIGN_RIGHT  \n  \n##  <a name=\"cframewndex__enablefullscreenmainmenu\"></a>  CFrameWndEx::EnableFullScreenMainMenu  \n Shows or hides the main menu in a full screen mode.  \n  \n```  \nvoid EnableFullScreenMainMenu(BOOL bEnableMenu);\n```  \n  \n### Parameters  \n [in] `bEnableMenu`  \n `TRUE` to show the main menu in a full screen mode, `FALSE` otherwise.  \n  \n##  <a name=\"cframewndex__enablefullscreenmode\"></a>  CFrameWndEx::EnableFullScreenMode  \n Enables the full-screen mode for the frame window.  \n  \n```  \nvoid EnableFullScreenMode(UINT uiFullScreenCmd);\n```  \n  \n### Parameters  \n [in] `uiFullScreenCmd`  \n The ID of a command that enables and disables the full screen mode.  \n  \n### Remarks  \n In the full-screen mode, all docking control bars, toolbars and menu are hidden and the active view is resized to occupy the full-screen.  \n  \n When you enable the full-screen mode, you must specify an ID of the command that enables or disables the full-screen mode. You can call `EnableFullScreenMode` from the main frame's `OnCreate` function. When a frame window is being switched to a full-screen mode, the framework creates a floating toolbar with one button that has the specified command ID.  \n  \n If you want to keep the main menu on the screen, call [CFrameWndEx::EnableFullScreenMainMenu](#cframewndex__enablefullscreenmainmenu).  \n  \n##  <a name=\"cframewndex__enableloaddockstate\"></a>  CFrameWndEx::EnableLoadDockState  \n Enables or disables the loading of the docking state.  \n  \n```  \nvoid EnableLoadDockState(BOOL bEnable=TRUE);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n `TRUE` to enable the loading of the docking state, `FALSE` to disable the loading of the docking state.  \n  \n##  <a name=\"cframewndex__enablepanemenu\"></a>  CFrameWndEx::EnablePaneMenu  \n Enables or disables the automatic handling of the pane menu.  \n  \n```  \nvoid EnablePaneMenu(\n    BOOL bEnable,  \n    UINT uiCustomizeCmd,  \n    const CString& strCustomizeLabel,  \n    UINT uiViewToolbarsMenuEntryID,  \n    BOOL bContextMenuShowsToolbarsOnly=FALSE,  \n    BOOL bViewMenuShowsToolbarsOnly=FALSE);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n `TRUE` to enable the automatic handling of the control bar pop-up menus; `FALSE` to disable the automatic handling of the control bar pop-up menus.  \n  \n [in] `uiCustomizeCmd`  \n The command ID of the **Customize** menu item.  \n  \n [in] `strCustomizeLabel`  \n The label to be displayed for the **Customize** menu item  \n  \n [in] `uiViewToolbarsMenuEntryID`  \n The ID of a toolbar menu item that opens the pop-up menu in the control bar.  \n  \n [in] `bContextMenuShowsToolbarsOnly`  \n If `TRUE`, the control bar context menu displays the list of toolbars only. If `FALSE`, the menu displays the list of the toolbars and the docking bars.  \n  \n [in] `bViewMenuShowsToolbarsOnly`  \n If `TRUE`, the control bar menu displays the list of the toolbars only. If `FALSE`, the menu displays the list of the toolbars and the docking bars.  \n  \n##  <a name=\"cframewndex__getactivepopup\"></a>  CFrameWndEx::GetActivePopup  \n Returns a pointer to the currently displayed pop-up menu.  \n  \n```  \nCMFCPopupMenu* GetActivePopup() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the currently displayed pop-up menu; otherwise `NULL`.  \n  \n##  <a name=\"cframewndex__getdefaultresid\"></a>  CFrameWndEx::GetDefaultResId  \n Returns the resource ID that you specified when the framework loaded the frame window.  \n  \n```  \nUINT GetDefaultResId() const;\n\n \n```  \n  \n### Return Value  \n The resource ID value that the user specified when the framework loaded the frame window. Zero if the frame window does not have a menu bar.  \n  \n##  <a name=\"cframewndex__getdockingmanager\"></a>  CFrameWndEx::GetDockingManager  \n Retrieves the [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md) object for the frame window.  \n  \n```  \nCDockingManager* GetDockingManager();\n```  \n  \n### Return Value  \n A pointer to the [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md).  \n  \n### Remarks  \n The frame window creates and uses a [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md) object to manage child window docking.  \n  \n##  <a name=\"cframewndex__getmenubar\"></a>  CFrameWndEx::GetMenuBar  \n Returns a pointer to the menu bar object attached to the frame window.  \n  \n```  \nconst CMFCMenuBar* GetMenuBar() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the menu bar object attached to the frame window.  \n  \n##  <a name=\"cframewndex__getpane\"></a>  CFrameWndEx::GetPane  \n Returns a pointer to the pane that has the specified ID.  \n  \n```  \nCBasePane* GetPane(UINT nID);\n```  \n  \n### Parameters  \n [in] `nID`  \n The control ID.  \n  \n### Return Value  \n A pointer to the pane that has the specified ID. `NULL` if no such pane exists.  \n  \n##  <a name=\"cframewndex__getribbonbar\"></a>  CFrameWndEx::GetRibbonBar  \n Retrieves the ribbon bar control for the frame.  \n  \n```  \nCMFCRibbonBar* GetRibbonBar();\n```  \n  \n### Return Value  \n Pointer to the [CMFCRibbonBar Class](../../mfc/reference/cmfcribbonbar-class.md) for the frame.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__gettearoffbars\"></a>  CFrameWndEx::GetTearOffBars  \n Returns a list of pane objects that are in a tear-off state.  \n  \n```  \nconst CObList& GetTearOffBars() const;\n\n \n```  \n  \n### Return Value  \n A reference to `CObList` object that contains a collection of pointers to the pane objects that are in a tear-off state.  \n  \n##  <a name=\"cframewndex__gettoolbarbuttontooltiptext\"></a>  CFrameWndEx::GetToolbarButtonToolTipText  \n Called by the framework when the application displays the tooltip for a toolbar button.  \n  \n```  \nvirtual BOOL GetToolbarButtonToolTipText(\n    CMFCToolBarButton* pButton,  \n    CString& strTTText);\n```  \n  \n### Parameters  \n [in] `pButton`  \n A pointer to a toolbar button.  \n  \n [in] `strTTText`  \n The tooltip text to display for the button.  \n  \n### Return Value  \n `TRUE` if the tooltip has been displayed. `FALSE` otherwise.  \n  \n### Remarks  \n By default, this method does nothing. Override this method if you want to display the tooltip for the toolbar button.  \n  \n##  <a name=\"cframewndex__insertpane\"></a>  CFrameWndEx::InsertPane  \n Inserts a pane into a list of control bars and registers it with the docking manager.  \n  \n```  \nBOOL InsertPane(\n    CBasePane* pControlBar,  \n    CBasePane* pTarget,  \n    BOOL bAfter=TRUE);\n```  \n  \n### Parameters  \n `pControlBar`  \n A pointer to a control bar to be inserted into the list of control bars and registered with the docking manager.  \n  \n `pTarget`  \n A pointer to a control bar before or after which to insert the pane.  \n  \n `bAfter`  \n `TRUE` if you want to insert `pControlBar` after `pTarget`, `FALSE` otherwise.  \n  \n### Return Value  \n `TRUE` if the control bar was successfully inserted and registered, `FALSE` otherwise.  \n  \n### Remarks  \n You must register each control bar by using the [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md) to take a part in the docking layout.  \n  \n##  <a name=\"cframewndex__isfullscreen\"></a>  CFrameWndEx::IsFullScreen  \n Determines whether the frame window is in full screen mode.  \n  \n```  \nBOOL IsFullScreen() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the frame window is in full screen mode; otherwise `FALSE`.  \n  \n### Remarks  \n You can set the full screen mode by calling the [CFrameWndEx::EnableFullScreenMode](#cframewndex__enablefullscreenmode) method.  \n  \n##  <a name=\"cframewndex__ismenubaravailable\"></a>  CFrameWndEx::IsMenuBarAvailable  \n Determines whether the pointer to the menu bar object is valid.  \n  \n```  \nBOOL IsMenuBarAvailable() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the frame window has a menu bar; otherwise `FALSE`.  \n  \n##  <a name=\"cframewndex__ispointneardocksite\"></a>  CFrameWndEx::IsPointNearDockSite  \n Determines whether the point is located in an alignment zone.  \n  \n```  \nBOOL IsPointNearDockSite(\n    CPoint point,  \n    DWORD& dwBarAlignment,  \n    BOOL& bOuterEdge) const;\n\n \n```  \n  \n### Parameters  \n [in] `point`  \n The position of the point.  \n  \n [out] `dwBarAlignment`  \n Where the point is aligned. See the table in the Remarks section for possible values.  \n  \n [out] `bOuterEdge`  \n `TRUE` if the point is located close to the frame border; `FALSE` if the point is located in a client area.  \n  \n### Return Value  \n `TRUE` if the point is located in an alignment zone; otherwise, `FALSE`.  \n  \n### Remarks  \n The following table lists the possible values for the `dwBarAlignment` parameter.  \n  \n `CBRS_ALIGN_TOP`  \n Aligned to the top.  \n  \n `CBRS_ALIGN_RIGHT`  \n Aligned to the right.  \n  \n `CBRS_ALIGN_BOTTOM`  \n Aligned to the bottom.  \n  \n `CBRS_ALIGN_LEFT`  \n Aligned to the left.  \n  \n##  <a name=\"cframewndex__isprintpreview\"></a>  CFrameWndEx::IsPrintPreview  \n Determines whether the frame window is in print preview mode.  \n  \n```  \nBOOL IsPrintPreview();\n```  \n  \n### Return Value  \n `TRUE` if the frame window is in print preview mode; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__loadframe\"></a>  CFrameWndEx::LoadFrame  \n This method is called after construction to create the frame window and load its resources.  \n  \n```  \nvirtual BOOL LoadFrame(\n    UINT nIDResource,  \n    DWORD dwDefaultStyle = WS_OVERLAPPEDWINDOW | FWS_ADDTOTITLE,  \n    CWnd* pParentWnd = NULL,  \n    CCreateContext* pContext = NULL);\n```  \n  \n### Parameters  \n [in] `nIDResource`  \n The resource ID that is used to load all frame resources.  \n  \n [in] `dwDefaultStyle`  \n The default frame window style.  \n  \n [in] `pParentWnd`  \n Pointer to the parent window of the frame.  \n  \n [in] `pContext`  \n Pointer to a [CCreateContext Structure](../../mfc/reference/ccreatecontext-structure.md) class that is used by the framework during application creation.  \n  \n### Return Value  \n `TRUE` if the method was successful; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__negotiateborderspace\"></a>  CFrameWndEx::NegotiateBorderSpace  \n Implements OLE client border negotiation.  \n  \n```  \nvirtual BOOL NegotiateBorderSpace(\n    UINT nBorderCmd,  \n    LPRECT lpRectBorder);\n```  \n  \n### Parameters  \n [in] `nBorderCmd`  \n The border negotiation command. See the Remarks section for possible values.  \n  \n [in, out] `lpRectBorder`  \n Dimensions of the border.  \n  \n### Return Value  \n `TRUE` if the layout must be recalculated; otherwise, `FALSE`.  \n  \n### Remarks  \n The following table lists the possible values for the `nBorderCmd` parameter.  \n  \n `borderGet`  \n Get available OLE client space.  \n  \n `borderRequest`  \n Request OLE client space.  \n  \n `borderSet`  \n Set OLE client space.  \n  \n##  <a name=\"cframewndex__onactivate\"></a>  CFrameWndEx::OnActivate  \n The framework calls this method when user input is switched to or away from the frame.  \n  \n```  \nafx_msg void OnActivate(\n    UINT nState,  \n    CWnd* pWndOther,  \n    BOOL bMinimized);\n```  \n  \n### Parameters  \n [in] `nState`  \n Whether the frame is active or inactive. See the table in the Remarks section for possible values.  \n  \n [in] `pWndOther`  \n Pointer to another window that is switching user input with the current one.  \n  \n [in] `bMinimized`  \n The minimized state of the frame. `TRUE` if the frame is minimized; otherwise, `FALSE`.  \n  \n### Remarks  \n The following table lists the possible values for the `nState` parameter.  \n  \n `WA_ACTIVE`  \n The frame is selected by a method other than a mouse click.  \n  \n `WA_CLICKACTIVE`  \n The frame is selected by a mouse click.  \n  \n `WA_INACTIVE`  \n The frame is not selected.  \n  \n##  <a name=\"cframewndex__onactivateapp\"></a>  CFrameWndEx::OnActivateApp  \n Called by the framework when the application is either selected or deselected.  \n  \n```  \nafx_msg void OnActivateApp(\n    BOOL bActive,  \n    DWORD dwThreadID);\n```  \n  \n### Parameters  \n [in] `bActive`  \n `TRUE` if the application is selected; `FALSE` if the application is not selected.  \n  \n [in] `dwThreadID`  \n This parameter is not used.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onchangevisualmanager\"></a>  CFrameWndEx::OnChangeVisualManager  \n Called by the framework when a change to the frame requires a change to the visual manager.  \n  \n```  \nafx_msg LRESULT OnChangeVisualManager(\n    WPARAM wParam,  \n    LPARAM lParam);\n```  \n  \n### Parameters  \n [in] `wParam`  \n This parameter is not used.  \n  \n [in] `lParam`  \n This parameter is not used.  \n  \n### Return Value  \n Always returns 0.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onclose\"></a>  CFrameWndEx::OnClose  \n The framework calls this method to close the frame.  \n  \n```  \nafx_msg void OnClose();\n```  \n  \n### Remarks  \n If the frame is in print preview mode, it sends a Windows message to close the print preview; otherwise, if the frame hosts an OLE client, the client is deactivated.  \n  \n##  <a name=\"cframewndex__onclosedockingpane\"></a>  CFrameWndEx::OnCloseDockingPane  \n Called by the framework when the user clicks the **Close** button on a docking pane.  \n  \n```  \nvirtual BOOL OnCloseDockingPane(CDockablePane* pPane);\n```  \n  \n### Return Value  \n `TRUE` if the docking bar can be closed. `FALSE` otherwise  \n  \n### Remarks  \n The default implement does nothing. Override this method if you want to handle the hiding of the docking bar.  \n  \n##  <a name=\"cframewndex__oncloseminiframe\"></a>  CFrameWndEx::OnCloseMiniFrame  \n Called by the framework when the user clicks the **Close** button on a floating mini frame window.  \n  \n```  \nvirtual BOOL OnCloseMiniFrame(CPaneFrameWnd* pWnd);\n```  \n  \n### Return Value  \n `TRUE` if a floating mini frame window can be closed. `FALSE` otherwise.  \n  \n### Remarks  \n The default implementation does nothing. Override this method if you want to process the hiding of a floating mini frame window.  \n  \n##  <a name=\"cframewndex__onclosepopupmenu\"></a>  CFrameWndEx::OnClosePopupMenu  \n Called by the framework when an active pop-up menu processes a WM_DESTROY message.  \n  \n```  \nvirtual void OnClosePopupMenu(CMFCPopupMenu* pMenuPopup);\n```  \n  \n### Parameters  \n `pMenuPopup`  \n A pointer to a pop-up menu.  \n  \n### Remarks  \n The framework sends a WM_DESTROY message when it is about to close the window. Override this method if you want to handle notifications from `CMFCPopupMenu` objects that belong to the frame window when a `CMFCPopupMenu` object is processing a `WM_DESTROY` message sent by the framework when the window is being closed.  \n  \n##  <a name=\"cframewndex__oncmdmsg\"></a>  CFrameWndEx::OnCmdMsg  \n Dispatches command messages.  \n  \n```  \nvirtual BOOL OnCmdMsg(\n    UINT nID,  \n    int nCode,  \n    void* pExtra,  \n    AFX_CMDHANDLERINFO* pHandlerInfo);\n```  \n  \n### Parameters  \n [in] `nID`  \n The command ID.  \n  \n [in] `nCode`  \n Command message category.  \n  \n [in, out] `pExtra`  \n Pointer to a command object.  \n  \n [in, out] `pHandlerInfo`  \n Pointer to a command handler structure.  \n  \n### Return Value  \n `TRUE` if the command message was handled; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__oncontexthelp\"></a>  CFrameWndEx::OnContextHelp  \n Called by the framework to display context-related help.  \n  \n```  \nafx_msg void OnContextHelp();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__oncreate\"></a>  CFrameWndEx::OnCreate  \n Called by the framework after the frame is created.  \n  \n```  \nafx_msg int OnCreate(LPCREATESTRUCT lpCreateStruct);\n```  \n  \n### Parameters  \n [in] `lpCreateStruct`  \n A pointer to the [CREATESTRUCT Structure](../../mfc/reference/createstruct-structure.md) for the new frame.  \n  \n### Return Value  \n 0 to continue with the frame creation; -1 to destroy the frame.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__ondestroy\"></a>  CFrameWndEx::OnDestroy  \n Called by the framework when the frame is destroyed.  \n  \n```  \nafx_msg void OnDestroy();\n```  \n  \n### Remarks  \n The accelerator table and all windows are destroyed.  \n  \n##  <a name=\"cframewndex__ondrawmenuimage\"></a>  CFrameWndEx::OnDrawMenuImage  \n Called by the framework when the application draws the image associated with a menu item.  \n  \n```  \nvirtual BOOL OnDrawMenuImage(\n    CDC* pDC,  \n    const CMFCToolBarMenuButton* pMenuButton,  \n    const CRect& rectImage);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pMenuButton`  \n A pointer to a menu button whose image is being rendered.  \n  \n [in] `rectImage`  \n A pointer to a `Rect` structure that specifies the screen position and size of the image.  \n  \n### Return Value  \n `TRUE` if the framework successfully renders the image; `FALSE` otherwise.  \n  \n### Remarks  \n Override this method if you want to customize the image rendering for the menu items that belong to the menu bar owned by the `CFrameWndEx` derived object.  \n  \n##  <a name=\"cframewndex__ondrawmenulogo\"></a>  CFrameWndEx::OnDrawMenuLogo  \n Called by the framework when a `CMFCPopupMenu` object processes a WM_PAINT message.  \n  \n```  \nvirtual void OnDrawMenuLogo(\n    CDC* pDC,  \n    CMFCPopupMenu* pMenu,  \n    const CRect& rectLogo);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pMenu`  \n A pointer to the menu item.  \n  \n [in] `rectLogo`  \n A reference to a constant `CRect` structure that specifies the screen position and size of the menu logo.  \n  \n### Remarks  \n Override this function if you want to display a logo on the pop-up menu that belongs to the menu bar owned by the `CFrameWndEx` derived object.  \n  \n##  <a name=\"cframewndex__ondwmcompositionchanged\"></a>  CFrameWndEx::OnDWMCompositionChanged  \n Called by the framework when Desktop Window Manager (DWM) composition has been enabled or disabled.  \n  \n```  \nafx_msg LRESULT OnDWMCompositionChanged(\n    WPARAM wp,  \n    LPARAM lp);\n```  \n  \n### Parameters  \n [in] `wp`  \n This parameter is not used.  \n  \n [in] `lp`  \n This parameter is not used.  \n  \n### Return Value  \n Always returns 0.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onexitsizemove\"></a>  CFrameWndEx::OnExitSizeMove  \n Called by the framework when the frame stops moving or resizing.  \n  \n```  \nLRESULT OnExitSizeMove(\n    WPARAM wp,  \n    LPARAM lp);\n```  \n  \n### Parameters  \n [in] `wp`  \n This parameter is not used.  \n  \n [in] `lp`  \n This parameter is not used.  \n  \n### Return Value  \n Always returns 0.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__ongetminmaxinfo\"></a>  CFrameWndEx::OnGetMinMaxInfo  \n Called by the framework when the frame is resized to set window dimension limits.  \n  \n```  \nafx_msg void OnGetMinMaxInfo(MINMAXINFO FAR* lpMMI);\n```  \n  \n### Parameters  \n [in] `lpMMI`  \n Pointer to a [MINMAXINFO](http://msdn.microsoft.com/library/windows/desktop/ms632605) structure.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onidleupdatecmdui\"></a>  CFrameWndEx::OnIdleUpdateCmdUI  \n Called by the framework to update the frame display when command processing is idle.  \n  \n```  \nafx_msg LRESULT OnIdleUpdateCmdUI(\n    WPARAM wParam = 0,  \n    LPARAM lParam = 0);\n```  \n  \n### Parameters  \n [in] `wParam`  \n This parameter is not used.  \n  \n [in] `lParam`  \n This parameter is not used.  \n  \n### Return Value  \n Always returns 0.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onlbuttondown\"></a>  CFrameWndEx::OnLButtonDown  \n The framework calls this method when the user presses the left mouse button.  \n  \n```  \nafx_msg void OnLButtonDown(\n    UINT nFlags,  \n    CPoint point);\n```  \n  \n### Parameters  \n [in] `nFlags`  \n Indicates whether the user pressed modifier keys. For possible values see the parameter `wParam` in [WM_LBUTTONDOWN Notification](http://msdn.microsoft.com/library/windows/desktop/ms645607).  \n  \n [in] `point`  \n Specifies the x and y coordinates of the pointer, relative to the upper-left corner of the window.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onlbuttonup\"></a>  CFrameWndEx::OnLButtonUp  \n The framework calls this method when the user releases the left mouse button.  \n  \n```  \nafx_msg void OnLButtonUp(\n    UINT nFlags,  \n    CPoint point);\n```  \n  \n### Parameters  \n [in] `nFlags`  \n Indicates whether the user pressed modifier keys. For possible values see the parameter `wParam` in [WM_LBUTTONUP Notification](http://msdn.microsoft.com/library/windows/desktop/ms645608).  \n  \n [in] `point`  \n Specifies the x and y coordinates of the pointer, relative to the upper-left corner of the window.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onmenubuttontoolhittest\"></a>  CFrameWndEx::OnMenuButtonToolHitTest  \n Called by the framework when a `CMFCToolBarButton` object processes a `WM_NCHITTEST` message.  \n  \n```  \nvirtual BOOL OnMenuButtonToolHitTest(\n    CMFCToolBarButton* pButton,  \n    TOOLINFO* pTI);\n```  \n  \n### Parameters  \n [in] `pButton`  \n A pointer to the tool bar button.  \n  \n [out] `pTI`  \n A pointer to a tool information structure.  \n  \n### Return Value  \n `TRUE` if the application fills the `pTI` parameter. `FALSE` otherwise.  \n  \n### Remarks  \n Override this method if you want to provide a tooltip information about a specific menu item.  \n  \n##  <a name=\"cframewndex__onmenuchar\"></a>  CFrameWndEx::OnMenuChar  \n Called by the framework when a menu is displayed and the user presses a key that does not correspond to a command.  \n  \n```  \nafx_msg LRESULT OnMenuChar(\n    UINT nChar,  \n    UINT nFlags,  \n    CMenu* pMenu);\n```  \n  \n### Parameters  \n [in] `nChar`  \n Character code of the pressed key.  \n  \n [in] `nFlags`  \n Contains the `MF_POPUP` flag if the menu displayed is a submenu; contains the `MF_SYSMENU` flag if the menu displayed is a control menu.  \n  \n [in] `pMenu`  \n Pointer to a menu.  \n  \n### Return Value  \n The high-order word must be one of the following values.  \n  \n `0`  \n The framework should ignore the keystroke.  \n  \n `1`  \n The framework should close the menu.  \n  \n `2`  \n The framework should select one of the items displayed in the menu. The low-order word contains the ID of the command to select.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onmousemove\"></a>  CFrameWndEx::OnMouseMove  \n The framework calls this method when the pointer moves.  \n  \n```  \nafx_msg void OnMouseMove(\n    UINT nFlags,  \n    CPoint point);\n```  \n  \n### Parameters  \n [in] `nFlags`  \n Indicates whether a user pressed modifier keys. For possible values see the parameter `wParam` in [WM_MOUSEMOVE Notification](http://msdn.microsoft.com/library/windows/desktop/ms645616).  \n  \n [in] `point`  \n Specifies the x and y coordinates of the pointer relative to the upper-left corner of the window.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onmoveminiframe\"></a>  CFrameWndEx::OnMoveMiniFrame  \n Called by the framework when a pane window moves.  \n  \n```  \nvirtual BOOL OnMoveMiniFrame(CWnd* pFrame);\n```  \n  \n### Parameters  \n [in] `pFrame`  \n Pointer to the [CPaneFrameWnd Class](../../mfc/reference/cpaneframewnd-class.md) pane window.  \n  \n### Return Value  \n `TRUE` if the pane window was not docked; `FALSE` if the pane window was docked.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onncactivate\"></a>  CFrameWndEx::OnNcActivate  \n Called by the framework when the non-client area of the frame must be redrawn to indicate a change in the active state.  \n  \n```  \nafx_msg BOOL OnNcActivate(BOOL bActive);\n```  \n  \n### Parameters  \n [in] `bActive`  \n `TRUE` to draw the frame active; `FALSE` to draw the frame inactive.  \n  \n### Return Value  \n Nonzero to continue with default processing; 0 to prevent the non-client area from being deactivated.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onnccalcsize\"></a>  CFrameWndEx::OnNcCalcSize  \n Called by the framework when the size and position of the client area must be calculated.  \n  \n```  \nafx_msg void OnNcCalcSize(\n    BOOL bCalcValidRects,  \n    NCCALCSIZE_PARAMS FAR* lpncsp);\n```  \n  \n### Parameters  \n [in] `bCalcValidRects`  \n `TRUE` when the application must specify a valid client area; otherwise, `FALSE`.  \n  \n [in] `lpncsp`  \n Pointer to a `NCCALCSIZE_PARAMS` structure that contains frame dimension changes.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onnchittest\"></a>  CFrameWndEx::OnNcHitTest  \n Called by the framework when the pointer moves or when a mouse button is pressed or released.  \n  \n```  \nafx_msg LRESULT OnNcHitTest(CPoint point);\n```  \n  \n### Parameters  \n [in] `point`  \n The location of the pointer in screen coordinates.  \n  \n### Return Value  \n A pointer hit enumerated value. For a list of possible values see [WM_NCHITTEST Notification](http://msdn.microsoft.com/library/windows/desktop/ms645618).  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onncmousemove\"></a>  CFrameWndEx::OnNcMouseMove  \n Called by the framework when the pointer moves in a non-client area.  \n  \n```  \nafx_msg void OnNcMouseMove(\n    UINT nHitTest,  \n    CPoint point);\n```  \n  \n### Parameters  \n [in] `nHitTest`  \n A pointer hit enumerated value. For a list of possible values see [WM_NCHITTEST Notification](http://msdn.microsoft.com/library/windows/desktop/ms645618).  \n  \n [in] `point`  \n The location of the pointer in screen coordinates.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onncpaint\"></a>  CFrameWndEx::OnNcPaint  \n Called by the framework when the non-client area must be painted.  \n  \n```  \nafx_msg void OnNcPaint();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onpanecheck\"></a>  CFrameWndEx::OnPaneCheck  \n Called by the framework to control the visibility of a pane.  \n  \n```  \nafx_msg BOOL OnPaneCheck(UINT nID);\n```  \n  \n### Parameters  \n [in] `nID`  \n Control ID of a pane.  \n  \n### Return Value  \n `TRUE` if the command was handled; `FALSE` to continue with command processing.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onpostpreviewframe\"></a>  CFrameWndEx::OnPostPreviewFrame  \n Called by the framework when the user changes the print preview mode.  \n  \n```  \nafx_msg LRESULT OnPostPreviewFrame(\n    WPARAM wParam,  \n    LPARAM lParam);\n```  \n  \n### Parameters  \n [in] `wParam`  \n This parameter is not used.  \n  \n [in] `lParam`  \n `TRUE` when the frame is in print preview mode; `FALSE` when print preview mode is off.  \n  \n### Return Value  \n Always returns 0.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onpowerbroadcast\"></a>  CFrameWndEx::OnPowerBroadcast  \n Called by the framework when a power management event occurs.  \n  \n```  \nafx_msg LRESULT OnPowerBroadcast(\n    WPARAM wp,  \n    LPARAM lp);\n```  \n  \n### Parameters  \n [in] `wp`  \n The power management event. For a list of possible values see [WM_POWERBROADCAST Message](http://msdn.microsoft.com/library/windows/desktop/aa373247).  \n  \n [in] `lp`  \n This parameter is not used.  \n  \n### Return Value  \n Result from calling the default window procedure.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onsetmenu\"></a>  CFrameWndEx::OnSetMenu  \n Called by the framework to replace the frame window menu.  \n  \n```  \nafx_msg LRESULT OnSetMenu(\n    WPARAM wp,  \n    LPARAM lp);\n\n \nBOOL OnSetMenu(\n    HMENU hmenu);\n```  \n  \n### Parameters  \n [in] `wp`  \n Handle to the new frame window menu.  \n  \n [in] `lp`  \n Handle to the new window menu.  \n  \n [in] `hmenu`  \n Handle to the new frame window menu.  \n  \n### Return Value  \n `LRESULT` is the result from calling the default window procedure.  \n  \n `BOOL` is `TRUE` if the event was handled; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onsetpreviewmode\"></a>  CFrameWndEx::OnSetPreviewMode  \n Called by the framework to set the print preview mode for the frame.  \n  \n```  \nvirtual void OnSetPreviewMode(\n    BOOL bPreview,  \n    CPrintPreviewState* pState);\n```  \n  \n### Parameters  \n [in] `bPreview`  \n `TRUE` to enable print preview; `FALSE` to disable print preview.  \n  \n [in] `pState`  \n Pointer to a `CPrintPreviewState` frame state structure.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onsettext\"></a>  CFrameWndEx::OnSetText  \n Called by the framework to set the text of a window.  \n  \n```  \nafx_msg LRESULT OnSetText(\n    WPARAM wParam,  \n    LPARAM lParam);\n```  \n  \n### Parameters  \n [in] `wParam`  \n This parameter is not used.  \n  \n [in] `lParam`  \n Pointer to the text for the window.  \n  \n### Return Value  \n Return value from a call to [DefWindowProc](http://msdn.microsoft.com/library/windows/desktop/ms633572).  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onshowcustomizepane\"></a>  CFrameWndEx::OnShowCustomizePane  \n Called by the framework when it displays a `QuickCustomizePane`.  \n  \n```  \nvirtual BOOL OnShowCustomizePane(\n    CMFCPopupMenu* pMenuPane,  \n    UINT uiToolbarID);\n```  \n  \n### Parameters  \n [in] `pMenuPane`  \n A pointer to the quick customize pane.  \n  \n [in] `uiToolbarID`  \n The control ID of the toolbar to customize.  \n  \n### Return Value  \n This method always return `TRUE`.  \n  \n### Remarks  \n The quick customize menu is a pop-up menu that appears when you click the toolbar’s customize button  \n  \n##  <a name=\"cframewndex__onshowpanes\"></a>  CFrameWndEx::OnShowPanes  \n Called by the framework to show or hide panes.  \n  \n```  \nvirtual BOOL OnShowPanes(BOOL bShow);\n```  \n  \n### Parameters  \n [in] `bShow`  \n `TRUE` if the application shows the panes; `FALSE` otherwise.  \n  \n### Return Value  \n This method always return `FALSE`.  \n  \n### Remarks  \n The default implementation shows the panes if `bShow` is `TRUE` and the panes are hidden or when `bShow` is `FALSE` and the panes are visible.  \n  \n The default implementation hides the panes if `bShow` is `TRUE` and the panes are visible or when `bShow` is `FALSE` and the panes are hidden.  \n  \n Override this method in a derived class to execute custom code when the framework shows or hides panes.  \n  \n##  <a name=\"cframewndex__onshowpopupmenu\"></a>  CFrameWndEx::OnShowPopupMenu  \n Called by the framework when it displays a pop-up menu.  \n  \n```  \nvirtual BOOL OnShowPopupMenu(CMFCPopupMenu* pMenu);\n```  \n  \n### Parameters  \n [in] `pMenu`  \n A pointer to a pop-up menu.  \n  \n### Return Value  \n `TRUE` if the pop-up menu is visible; otherwise `FALSE`.  \n  \n### Remarks  \n Override this method in a derived class to execute custom code when the framework displays a pop-up menu. For example, override this method to change the background color of the commands in a pop-up menu.  \n  \n##  <a name=\"cframewndex__onsize\"></a>  CFrameWndEx::OnSize  \n Called by the framework after the frame's size changes.  \n  \n```  \nafx_msg void OnSize(\n    UINT nType,  \n    int cx,  \n    int cy);\n```  \n  \n### Parameters  \n [in] `nType`  \n The type of resizing. For possible values see the parameter `wParam` in [WM_SIZE Notification](http://msdn.microsoft.com/library/windows/desktop/ms632646).  \n  \n [in] `cx`  \n New width of the frame in pixels.  \n  \n [in] `cy`  \n New height of the frame in pixels.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onsizing\"></a>  CFrameWndEx::OnSizing  \n Called by the framework when the user resizes the frame.  \n  \n```  \nafx_msg void OnSizing(\n    UINT fwSide,  \n    LPRECT pRect);\n```  \n  \n### Parameters  \n [in] `fwSide`  \n The edge of the frame that is moved. See the parameter `wParam` in [WM_SIZING Notification](http://msdn.microsoft.com/library/windows/desktop/ms632647).  \n  \n [in, out] `pRect`  \n Pointer to a [CRect](../../atl-mfc-shared/reference/crect-class.md) or [RECT](../../mfc/reference/rect-structure1.md) structure that contains the frame's coordinates.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onsyscolorchange\"></a>  CFrameWndEx::OnSysColorChange  \n Called by the framework when the system colors change.  \n  \n```  \nvoid OnSysColorChange();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__ontearoffmenu\"></a>  CFrameWndEx::OnTearOffMenu  \n Called by the framework when the application displays a menu that has a tear-off bar.  \n  \n```  \nvirtual BOOL OnTearOffMenu(\n    CMFCPopupMenu* pMenuPopup,  \n    CPane* pBar);\n```  \n  \n### Parameters  \n [in] `pMenuPopup`  \n A pointer to a pop-up menu.  \n  \n [in] `pBar`  \n A pointer to a tear-off bar.  \n  \n### Return Value  \n `TRUE` if the pop-up menu with the tear-off bar is enabled; otherwise `FALSE`.  \n  \n### Remarks  \n Override this method in a derived class to execute custom code when the framework displays a control bar.  \n  \n The default implementation does nothing and returns `TRUE`.  \n  \n##  <a name=\"cframewndex__ontoolbarcontextmenu\"></a>  CFrameWndEx::OnToolbarContextMenu  \n Called by the framework to build a toolbar pop-up menu.  \n  \n```  \nafx_msg LRESULT OnToolbarContextMenu(\n    WPARAM wp,  \n    LPARAM lp);\n```  \n  \n### Parameters  \n [in] `wp`  \n This parameter is not used.  \n  \n [in] `lp`  \n This parameter is not used.  \n  \n### Return Value  \n Always returns 1.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__ontoolbarcreatenew\"></a>  CFrameWndEx::OnToolbarCreateNew  \n The framework calls this method to create a new toolbar.  \n  \n```  \nafx_msg LRESULT OnToolbarCreateNew(\n    WPARAM wp,  \n    LPARAM lp);\n```  \n  \n### Parameters  \n [in] `wp`  \n This parameter is not used.  \n  \n [in] `lp`  \n Pointer to the text for the title bar of the toolbar.  \n  \n### Return Value  \n Pointer to the new toolbar; or `NULL` if a toolbar was not created.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__ontoolbardelete\"></a>  CFrameWndEx::OnToolbarDelete  \n Called by the framework when a toolbar is deleted.  \n  \n```  \nafx_msg LRESULT OnToolbarDelete(\n    WPARAM, \n    LPARAM lp);\n```  \n  \n### Parameters  \n [in]  \n This parameter is not used.  \n  \n [in] `lp`  \n Pointer to a toolbar.  \n  \n### Return Value  \n `TRUE` if the toolbar was deleted; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onupdateframemenu\"></a>  CFrameWndEx::OnUpdateFrameMenu  \n Called by the framework to set the frame menu.  \n  \n```  \nvirtual void OnUpdateFrameMenu(HMENU hMenuAlt);\n```  \n  \n### Parameters  \n [in] `hMenuAlt`  \n Handle to the alternative menu.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onupdateframetitle\"></a>  CFrameWndEx::OnUpdateFrameTitle  \n The framework calls this method to update the title bar of the frame window.  \n  \n```  \nvirtual void OnUpdateFrameTitle(BOOL bAddToTitle);\n```  \n  \n### Parameters  \n [in] `bAddToTitle`  \n `TRUE` to add the active document title to the frame window title bar; otherwise `FALSE.`  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onupdatepanemenu\"></a>  CFrameWndEx::OnUpdatePaneMenu  \n Called by the framework to update the pane menu.  \n  \n```  \nafx_msg void OnUpdatePaneMenu(CCmdUI* pCmdUI);\n```  \n  \n### Parameters  \n [in] `pCmdUI`  \n Pointer to the pane user interface object.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__onwindowposchanged\"></a>  CFrameWndEx::OnWindowPosChanged  \n Called by the framework when the frame size, position, or z-order has changed because of a call to a window management method.  \n  \n```  \nafx_msg void OnWindowPosChanged(WINDOWPOS FAR* lpwndpos);\n```  \n  \n### Parameters  \n [in] `lpwndpos`  \n Pointer to a [WINDOWPOS](../../mfc/reference/windowpos-structure1.md) structure that contains the new size and position.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__panefrompoint\"></a>  CFrameWndEx::PaneFromPoint  \n Searches each pane for the given point.  \n  \n```  \nCBasePane* PaneFromPoint(\n    CPoint point,  \n    int nSensitivity,  \n    bool bExactBar,  \n    CRuntimeClass* pRTCBarType) const;\n\n \nCBasePane* PaneFromPoint(\n    CPoint point,  \n    int nSensitivity,  \n    DWORD& dwAlignment,  \n    CRuntimeClass* pRTCBarType) const;\n\n \n```  \n  \n### Parameters  \n [in] `point`  \n The screen coordinates of the point to check.  \n  \n [in] `nSensitivity`  \n Expand the bounding rectangle of each control bar by this amount when searching for point.  \n  \n [in] `bExactBar`  \n `TRUE` to ignore the `nSensitivity` parameter; otherwise, `FALSE`.  \n  \n [in] `pRTCBarType`  \n If not `NULL`, the method searches only the control bars of the specified type.  \n  \n [out] `dwAlignment`  \n If successful, this parameter contains the side of the control bar that is closest to the specified point. Otherwise, this parameter is not initialized.  \n  \n### Return Value  \n A pointer to a control bar that contains the `point`; `NULL` if no control is found.  \n  \n### Remarks  \n This method searches all the control bars in your application for a `point`.  \n  \n Use `nSensitivity` to increase the size of the search area. Use `pRTCBarType` to restrict the types of control bars that the method searches.  \n  \n##  <a name=\"cframewndex__pretranslatemessage\"></a>  CFrameWndEx::PreTranslateMessage  \n Handles specific window messages before they are dispatched.  \n  \n```  \nvirtual BOOL PreTranslateMessage(MSG* pMsg);\n```  \n  \n### Parameters  \n [in] `pMsg`  \n A pointer to a [MSG](../../mfc/reference/msg-structure1.md) structure that contains the message to process.  \n  \n### Return Value  \n Non-zero if the message was handled and should not be dispatched; 0 if the message was not handled and should be dispatched.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__recalclayout\"></a>  CFrameWndEx::RecalcLayout  \n Adjusts the layout of the frame and its child windows.  \n  \n```  \nvirtual void RecalcLayout(BOOL bNotify = TRUE);\n```  \n  \n### Parameters  \n [in] `bNotify`  \n Specifies whether to notify the OLE client item about the layout change.  \n  \n### Remarks  \n This method is called when the size of the frame window has changed or when control bars are displayed or hidden.  \n  \n##  <a name=\"cframewndex__removepanefromdockmanager\"></a>  CFrameWndEx::RemovePaneFromDockManager  \n Unregisters a pane and removes it from the docking manager.  \n  \n```  \nvoid RemovePaneFromDockManager(\n    CBasePane* pControlBar,  \n    BOOL bDestroy,  \n    BOOL bAdjustLayout,  \n    BOOL bAutoHide,  \n    CBasePane* pBarReplacement);\n```  \n  \n### Parameters  \n [in] `pControlBar`  \n A pointer to the control bar pane to remove.  \n  \n [in] `bDestroy`  \n `TRUE` to destroy the control bar after removing it; `FALSE` otherwise.  \n  \n [in] `bAdjustLayout`  \n `TRUE` to adjust the docking layout; `FALSE` otherwise.  \n  \n [in] `bAutoHide`  \n `TRUE` if the control bar is in auto-hide mode; `FALSE` otherwise.  \n  \n [in] `pBarReplacement`  \n A pointer to a pane that replaces the removed pane.  \n  \n### Remarks  \n Use this method to remove a control bar from the docking layout of the frame window.  \n  \n The [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md) handles the layout of control bars. You must register each control bar with the docking manager by using the [CFrameWndEx::AddPane](#cframewndex__addpane) method or the [CFrameWndEx::InsertPane](#cframewndex__insertpane) method.  \n  \n##  <a name=\"cframewndex__setdockstate\"></a>  CFrameWndEx::SetDockState  \n Restores the docking layout to the docking state stored in the registry.  \n  \n```  \nvoid SetDockState(const CDockState& state);\n```  \n  \n### Parameters  \n `state`  \n The docking state. This parameter is ignored.  \n  \n##  <a name=\"cframewndex__setprintpreviewframe\"></a>  CFrameWndEx::SetPrintPreviewFrame  \n Sets the print preview frame window.  \n  \n```  \nvoid SetPrintPreviewFrame(CFrameWnd* pWnd);\n```  \n  \n### Parameters  \n [in] `pWnd`  \n Pointer to a print preview frame window.  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__setuptoolbarmenu\"></a>  CFrameWndEx::SetupToolbarMenu  \n Inserts user-defined commands into a toolbar menu.  \n  \n```  \nvoid SetupToolbarMenu(\n    CMenu& menu,  \n    const UINT uiViewUserToolbarCmdFirst,  \n    const UINT uiViewUserToolbarCmdLast);\n```  \n  \n### Parameters  \n [in] `menu`  \n A `CMenu` object to be modified.  \n  \n [in] `uiViewUserToolbarCmdFirst`  \n The first user-defined command.  \n  \n [in] `uiViewUserToolbarCmdLast`  \n The last user-defined command.  \n  \n### Remarks  \n The framework stores user-defined commands in a list. Use `uiViewUserToolbarCmdFirst` and `uiViewUserToolbarCmdList` to specify the indexes of the commands to insert.  \n  \n##  <a name=\"cframewndex__showfullscreen\"></a>  CFrameWndEx::ShowFullScreen  \n Switches the main frame between full-screen mode and regular mode.  \n  \n```  \nvoid ShowFullScreen();\n```  \n  \n##  <a name=\"cframewndex__showpane\"></a>  CFrameWndEx::ShowPane  \n Shows or hides the specified pane.  \n  \n```  \nvoid ShowPane(\n    CBasePane* pBar,  \n    BOOL bShow,  \n    BOOL bDelay,  \n    BOOL bActivate);\n```  \n  \n### Parameters  \n [in] `pBar`  \n A pointer to the control bar to show or hide.  \n  \n [in] `bShow`  \n If `TRUE`, the application shows the control bar. Otherwise, the application hides the control bar.  \n  \n [in] `bDelay`  \n If `TRUE`, delay the adjustment of the docking layout until the framework calls [CFrameWndEx::AdjustDockingLayout](#cframewndex__adjustdockinglayout). Otherwise, recalculate the docking layout immediately.  \n  \n [in] `bActivate`  \n If `TRUE`, make the control bar active. Otherwise, display the control bar in an inactive state.  \n  \n##  <a name=\"cframewndex__updatecaption\"></a>  CFrameWndEx::UpdateCaption  \n Called by the framework to update the window frame caption.  \n  \n```  \nvoid UpdateCaption();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cframewndex__winhelp\"></a>  CFrameWndEx::WinHelp  \n Invokes either the WinHelp application or context related help.  \n  \n```  \nvirtual void WinHelp(\n    DWORD dwData,  \n    UINT nCmd = HELP_CONTEXT);\n```  \n  \n### Parameters  \n `dwData`  \n Data that depends on the `nCmd` parameter. For a list of possible values see [WinHelp](http://msdn.microsoft.com/library/windows/desktop/bb762267).  \n  \n `nCmd`  \n The help command. For a list of possible values see [WinHelp](http://msdn.microsoft.com/library/windows/desktop/bb762267).  \n  \n### Remarks  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CFrameWnd](../../mfc/reference/cframewnd-class.md)\n"}