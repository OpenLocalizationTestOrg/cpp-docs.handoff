{"nodes":[{"pos":[12,42],"content":"Dispatch Maps | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Dispatch Maps | Microsoft Docs","pos":[0,30]}]},{"pos":[658,671],"content":"Dispatch Maps","linkify":"Dispatch Maps","nodes":[{"content":"Dispatch Maps","pos":[0,13]}]},{"content":"OLE Automation provides ways to call methods and to access properties across applications.","pos":[672,762]},{"content":"The mechanism supplied by the Microsoft Foundation Class Library for dispatching these requests is the \"dispatch map,\" which designates the internal and external names of object functions and properties, as well as the data types of the properties themselves and of function arguments.","pos":[763,1048]},{"pos":[1058,1071],"content":"Dispatch Maps","linkify":"Dispatch Maps","nodes":[{"content":"Dispatch Maps","pos":[0,13]}]},{"pos":[1092,1137],"content":"<bpt id=\"p1\">[</bpt>DECLARE_DISPATCH_MAP<ept id=\"p1\">](#declare_dispatch_map)</ept>","source":"[DECLARE_DISPATCH_MAP](#declare_dispatch_map)"},{"content":"Declares that a dispatch map will be used to expose a class's methods and properties (must be used in the class declaration).","pos":[1138,1263]},{"pos":[1268,1309],"content":"<bpt id=\"p1\">[</bpt>BEGIN_DISPATCH_MAP<ept id=\"p1\">](#begin_dispatch_map)</ept>","source":"[BEGIN_DISPATCH_MAP](#begin_dispatch_map)"},{"content":"Starts the definition of a dispatch map.","pos":[1310,1350]},{"pos":[1355,1392],"content":"<bpt id=\"p1\">[</bpt>END_DISPATCH_MAP<ept id=\"p1\">](#end_dispatch_map)</ept>","source":"[END_DISPATCH_MAP](#end_dispatch_map)"},{"content":"Ends the definition of a dispatch map.","pos":[1393,1431]},{"pos":[1436,1467],"content":"<bpt id=\"p1\">[</bpt>DISP_FUNCTION<ept id=\"p1\">](#disp_function)</ept>","source":"[DISP_FUNCTION](#disp_function)"},{"content":"Used in a dispatch map to define an OLE automation function.","pos":[1468,1528]},{"pos":[1533,1564],"content":"<bpt id=\"p1\">[</bpt>DISP_PROPERTY<ept id=\"p1\">](#disp_property)</ept>","source":"[DISP_PROPERTY](#disp_property)"},{"content":"Defines an OLE automation property.","pos":[1565,1600]},{"pos":[1605,1642],"content":"<bpt id=\"p1\">[</bpt>DISP_PROPERTY_EX<ept id=\"p1\">](#disp_property_ex)</ept>","source":"[DISP_PROPERTY_EX](#disp_property_ex)"},{"content":"Defines an OLE automation property and names the Get and Set functions.","pos":[1643,1714]},{"pos":[1719,1764],"content":"<bpt id=\"p1\">[</bpt>DISP_PROPERTY_NOTIFY<ept id=\"p1\">](#disp_property_notify)</ept>","source":"[DISP_PROPERTY_NOTIFY](#disp_property_notify)"},{"content":"Defines an OLE automation property with notification.","pos":[1765,1818]},{"pos":[1823,1866],"content":"<bpt id=\"p1\">[</bpt>DISP_PROPERTY_PARAM<ept id=\"p1\">](#disp_property_param)</ept>","source":"[DISP_PROPERTY_PARAM](#disp_property_param)"},{"content":"Defines an OLE automation property that takes parameters and names the Get and Set functions.","pos":[1867,1960]},{"pos":[1965,1996],"content":"<bpt id=\"p1\">[</bpt>DISP_DEFVALUE<ept id=\"p1\">](#disp_defvalue)</ept>","source":"[DISP_DEFVALUE](#disp_defvalue)"},{"content":"Makes an existing property the default value of an object.","pos":[1997,2055]},{"pos":[2066,2123],"content":"<bpt id=\"p1\">&lt;a name=\"declare_dispatch_map\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  DECLARE_DISPATCH_MAP","linkify":"<a name=\"declare_dispatch_map\"></a>  DECLARE_DISPATCH_MAP","source":"<a name=\"declare_dispatch_map\"></a>  DECLARE_DISPATCH_MAP"},{"pos":[2127,2276],"content":"If a <ph id=\"ph1\">`CCmdTarget`</ph>-derived class in your program supports OLE Automation, that class must provide a dispatch map to expose its methods and properties.","source":"If a `CCmdTarget`-derived class in your program supports OLE Automation, that class must provide a dispatch map to expose its methods and properties."},{"pos":[2327,2334],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the <ph id=\"ph1\">`DECLARE_DISPATCH_MAP`</ph> macro at the end of your class declaration.","pos":[2338,2412],"source":"Use the `DECLARE_DISPATCH_MAP` macro at the end of your class declaration."},{"content":"Then, in the .CPP file that defines the member functions for the class, use the <ph id=\"ph1\">`BEGIN_DISPATCH_MAP`</ph> macro.","pos":[2413,2520],"source":" Then, in the .CPP file that defines the member functions for the class, use the `BEGIN_DISPATCH_MAP` macro."},{"content":"Then include macro entries for each of your class's exposed methods and properties ( <ph id=\"ph1\">`DISP_FUNCTION`</ph>, <ph id=\"ph2\">`DISP_PROPERTY`</ph>, and so on).","pos":[2521,2651],"source":" Then include macro entries for each of your class's exposed methods and properties ( `DISP_FUNCTION`, `DISP_PROPERTY`, and so on)."},{"content":"Finally, use the <ph id=\"ph1\">`END_DISPATCH_MAP`</ph> macro.","pos":[2652,2694],"source":" Finally, use the `END_DISPATCH_MAP` macro."},{"pos":[2702,2855],"content":"[!NOTE]\n If you declare any members after `DECLARE_DISPATCH_MAP`, you must specify a new access type ( **public**, `private`, or `protected`) for them.","leadings":["","> "],"nodes":[{"content":"If you declare any members after <ph id=\"ph1\">`DECLARE_DISPATCH_MAP`</ph>, you must specify a new access type ( <bpt id=\"p1\">**</bpt>public<ept id=\"p1\">**</ept>, <ph id=\"ph2\">`private`</ph>, or <ph id=\"ph3\">`protected`</ph>) for them.","pos":[9,151],"source":" If you declare any members after `DECLARE_DISPATCH_MAP`, you must specify a new access type ( **public**, `private`, or `protected`) for them."}]},{"content":"The Application Wizard and code wizards assist in creating Automation classes and in maintaining dispatch maps.","pos":[2862,2973]},{"content":"For more information on dispatch maps, see <bpt id=\"p1\">[</bpt>Automation Servers<ept id=\"p1\">](../../mfc/automation-servers.md)</ept>.","pos":[2974,3071],"source":" For more information on dispatch maps, see [Automation Servers](../../mfc/automation-servers.md)."},{"pos":[3081,3088],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3092,3170],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCAutomation#10<ept id=\"p2\">](../../mfc/codesnippet/cpp/dispatch-maps_1.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCAutomation#10](../../mfc/codesnippet/cpp/dispatch-maps_1.h)]"},{"pos":[3180,3233],"content":"<bpt id=\"p1\">&lt;a name=\"begin_dispatch_map\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  BEGIN_DISPATCH_MAP","linkify":"<a name=\"begin_dispatch_map\"></a>  BEGIN_DISPATCH_MAP","source":"<a name=\"begin_dispatch_map\"></a>  BEGIN_DISPATCH_MAP"},{"content":"Declares the definition of your dispatch map.","pos":[3237,3282]},{"pos":[3350,3360],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the name of the class that owns this dispatch map.","pos":[3378,3438]},{"content":"Specifies the base class name of <ph id=\"ph1\">`theClass`</ph>.","pos":[3460,3504],"source":" Specifies the base class name of `theClass`."},{"pos":[3514,3521],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3525,3803],"content":"In the implementation (.cpp) file that defines the member functions for your class, start the dispatch map with the <ph id=\"ph1\">`BEGIN_DISPATCH_MAP`</ph> macro, add macro entries for each of your dispatch functions and properties, and complete the dispatch map with the <ph id=\"ph2\">`END_DISPATCH_MAP`</ph> macro.","source":"In the implementation (.cpp) file that defines the member functions for your class, start the dispatch map with the `BEGIN_DISPATCH_MAP` macro, add macro entries for each of your dispatch functions and properties, and complete the dispatch map with the `END_DISPATCH_MAP` macro."},{"pos":[3813,3862],"content":"<bpt id=\"p1\">&lt;a name=\"end_dispatch_map\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  END_DISPATCH_MAP","linkify":"<a name=\"end_dispatch_map\"></a>  END_DISPATCH_MAP","source":"<a name=\"end_dispatch_map\"></a>  END_DISPATCH_MAP"},{"content":"Ends the definition of your dispatch map.","pos":[3866,3907]},{"pos":[3954,3961],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3965,4022],"content":"It must be used in conjunction with <ph id=\"ph1\">`BEGIN_DISPATCH_MAP`</ph>.","source":"It must be used in conjunction with `BEGIN_DISPATCH_MAP`."},{"pos":[4032,4075],"content":"<bpt id=\"p1\">&lt;a name=\"disp_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  DISP_FUNCTION","linkify":"<a name=\"disp_function\"></a>  DISP_FUNCTION","source":"<a name=\"disp_function\"></a>  DISP_FUNCTION"},{"content":"Defines an OLE automation function in a dispatch map.","pos":[4079,4132]},{"pos":[4226,4236],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Name of the class.","pos":[4254,4272]},{"content":"External name of the function.","pos":[4292,4322]},{"content":"Name of the member function.","pos":[4344,4372]},{"content":"A value specifying the function's return type.","pos":[4393,4439]},{"content":"A space-separated list of one or more constants specifying the function's parameter list.","pos":[4461,4550]},{"pos":[4560,4567],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`vtRetVal`</ph> argument is of type <bpt id=\"p1\">**</bpt>VARTYPE<ept id=\"p1\">**</ept>.","pos":[4571,4618],"source":"The `vtRetVal` argument is of type **VARTYPE**."},{"content":"The following possible values for this argument are taken from the <ph id=\"ph1\">`VARENUM`</ph> enumeration:","pos":[4619,4708],"source":" The following possible values for this argument are taken from the `VARENUM` enumeration:"},{"content":"Symbol","pos":[4715,4721]},{"content":"Return type","pos":[4722,4733]},{"pos":[4803,4812],"content":"<bpt id=\"p1\">**</bpt>short<ept id=\"p1\">**</ept>","source":"**short**"},{"pos":[4825,4833],"content":"<bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept>","source":"**long**"},{"pos":[4846,4855],"content":"<bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept>","source":"**float**"},{"pos":[4868,4878],"content":"<bpt id=\"p1\">**</bpt>double<ept id=\"p1\">**</ept>","source":"**double**"},{"pos":[4891,4897],"content":"<bpt id=\"p1\">**</bpt>CY<ept id=\"p1\">**</ept>","source":"**CY**"},{"pos":[4912,4920],"content":"<bpt id=\"p1\">**</bpt>DATE<ept id=\"p1\">**</ept>","source":"**DATE**"},{"pos":[4946,4961],"content":"<bpt id=\"p1\">**</bpt>VT_DISPATCH<ept id=\"p1\">**</ept>","source":"**VT_DISPATCH**"},{"pos":[5012,5020],"content":"<bpt id=\"p1\">**</bpt>BOOL<ept id=\"p1\">**</ept>","source":"**BOOL**"},{"pos":[5025,5039],"content":"<bpt id=\"p1\">**</bpt>VT_VARIANT<ept id=\"p1\">**</ept>","source":"**VT_VARIANT**"},{"pos":[5040,5051],"content":"<bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept>","source":"**VARIANT**"},{"pos":[5056,5070],"content":"<bpt id=\"p1\">**</bpt>VT_UNKNOWN<ept id=\"p1\">**</ept>","source":"**VT_UNKNOWN**"},{"content":"The <ph id=\"ph1\">`vtsParams`</ph> argument is a space-separated list of values from the <bpt id=\"p1\">**</bpt>VTS_<ept id=\"p1\">**</ept> constants.","pos":[5090,5179],"source":"The `vtsParams` argument is a space-separated list of values from the **VTS_** constants."},{"content":"One or more of these values separated by spaces (not commas) specifies the function's parameter list.","pos":[5180,5281]},{"content":"For example,","pos":[5282,5294]},{"pos":[5300,5380],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCAutomation#14<ept id=\"p2\">](../../mfc/codesnippet/cpp/dispatch-maps_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCAutomation#14](../../mfc/codesnippet/cpp/dispatch-maps_2.cpp)]"},{"content":"specifies a list containing a short integer followed by a pointer to a short integer.","pos":[5387,5472]},{"pos":[5479,5536],"content":"The <bpt id=\"p1\">**</bpt>VTS_<ept id=\"p1\">**</ept> constants and their meanings are as follows:","source":"The **VTS_** constants and their meanings are as follows:"},{"content":"Symbol","pos":[5543,5549]},{"content":"Parameter type","pos":[5550,5564]},{"pos":[5607,5617],"content":"<bpt id=\"p1\">**</bpt>VTS_I2<ept id=\"p1\">**</ept>","source":"**VTS_I2**"},{"pos":[5630,5640],"content":"<bpt id=\"p1\">**</bpt>VTS_I4<ept id=\"p1\">**</ept>","source":"**VTS_I4**"},{"pos":[5652,5662],"content":"<bpt id=\"p1\">**</bpt>VTS_R4<ept id=\"p1\">**</ept>","source":"**VTS_R4**"},{"pos":[5663,5672],"content":"<bpt id=\"p1\">**</bpt>Float<ept id=\"p1\">**</ept>","source":"**Float**"},{"pos":[5677,5687],"content":"<bpt id=\"p1\">**</bpt>VTS_R8<ept id=\"p1\">**</ept>","source":"**VTS_R8**"},{"pos":[5701,5711],"content":"<bpt id=\"p1\">**</bpt>VTS_CY<ept id=\"p1\">**</ept>","source":"**VTS_CY**"},{"pos":[5712,5736],"content":"<bpt id=\"p1\">**</bpt>const CY<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>CY<ph id=\"ph1\">\\*</ph><ept id=\"p2\">**</ept>","source":"**const CY** or **CY\\***"},{"pos":[5741,5753],"content":"<bpt id=\"p1\">**</bpt>VTS_DATE<ept id=\"p1\">**</ept>","source":"**VTS_DATE**"},{"pos":[5754,5762],"content":"<bpt id=\"p1\">**</bpt>DATE<ept id=\"p1\">**</ept>","source":"**DATE**"},{"pos":[5767,5779],"content":"<bpt id=\"p1\">**</bpt>VTS_BSTR<ept id=\"p1\">**</ept>","source":"**VTS_BSTR**"},{"pos":[5793,5809],"content":"<bpt id=\"p1\">**</bpt>VTS_DISPATCH<ept id=\"p1\">**</ept>","source":"**VTS_DISPATCH**"},{"pos":[5827,5840],"content":"<bpt id=\"p1\">**</bpt>VTS_SCODE<ept id=\"p1\">**</ept>","source":"**VTS_SCODE**"},{"pos":[5853,5865],"content":"<bpt id=\"p1\">**</bpt>VTS_BOOL<ept id=\"p1\">**</ept>","source":"**VTS_BOOL**"},{"pos":[5866,5874],"content":"<bpt id=\"p1\">**</bpt>BOOL<ept id=\"p1\">**</ept>","source":"**BOOL**"},{"pos":[5879,5894],"content":"<bpt id=\"p1\">**</bpt>VTS_VARIANT<ept id=\"p1\">**</ept>","source":"**VTS_VARIANT**"},{"pos":[5895,5930],"content":"<bpt id=\"p1\">**</bpt>const VARIANT<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>VARIANT&amp;<ept id=\"p2\">**</ept>","source":"**const VARIANT\\*** or **VARIANT&**"},{"pos":[5935,5950],"content":"<bpt id=\"p1\">**</bpt>VTS_UNKNOWN<ept id=\"p1\">**</ept>","source":"**VTS_UNKNOWN**"},{"pos":[5967,5978],"content":"<bpt id=\"p1\">**</bpt>VTS_PI2<ept id=\"p1\">**</ept>","source":"**VTS_PI2**"},{"pos":[5979,5990],"content":"<bpt id=\"p1\">**</bpt>short<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>","source":"**short\\***"},{"pos":[5995,6006],"content":"<bpt id=\"p1\">**</bpt>VTS_PI4<ept id=\"p1\">**</ept>","source":"**VTS_PI4**"},{"pos":[6007,6017],"content":"<bpt id=\"p1\">**</bpt>long<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>","source":"**long\\***"},{"pos":[6022,6033],"content":"<bpt id=\"p1\">**</bpt>VTS_PR4<ept id=\"p1\">**</ept>","source":"**VTS_PR4**"},{"pos":[6034,6045],"content":"<bpt id=\"p1\">**</bpt>float<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>","source":"**float\\***"},{"pos":[6050,6061],"content":"<bpt id=\"p1\">**</bpt>VTS_PR8<ept id=\"p1\">**</ept>","source":"**VTS_PR8**"},{"pos":[6062,6074],"content":"<bpt id=\"p1\">**</bpt>double<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>","source":"**double\\***"},{"pos":[6079,6090],"content":"<bpt id=\"p1\">**</bpt>VTS_PCY<ept id=\"p1\">**</ept>","source":"**VTS_PCY**"},{"pos":[6091,6099],"content":"<bpt id=\"p1\">**</bpt>CY<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>","source":"**CY\\***"},{"pos":[6104,6117],"content":"<bpt id=\"p1\">**</bpt>VTS_PDATE<ept id=\"p1\">**</ept>","source":"**VTS_PDATE**"},{"pos":[6118,6128],"content":"<bpt id=\"p1\">**</bpt>DATE<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>","source":"**DATE\\***"},{"pos":[6133,6146],"content":"<bpt id=\"p1\">**</bpt>VTS_PBSTR<ept id=\"p1\">**</ept>","source":"**VTS_PBSTR**"},{"pos":[6147,6157],"content":"<bpt id=\"p1\">**</bpt>BSTR<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>","source":"**BSTR\\***"},{"pos":[6162,6179],"content":"<bpt id=\"p1\">**</bpt>VTS_PDISPATCH<ept id=\"p1\">**</ept>","source":"**VTS_PDISPATCH**"},{"pos":[6180,6196],"content":"<bpt id=\"p1\">**</bpt>LPDISPATCH<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>","source":"**LPDISPATCH\\***"},{"pos":[6201,6215],"content":"<bpt id=\"p1\">**</bpt>VTS_PSCODE<ept id=\"p1\">**</ept>","source":"**VTS_PSCODE**"},{"pos":[6216,6227],"content":"<bpt id=\"p1\">**</bpt>SCODE<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>","source":"**SCODE\\***"},{"pos":[6232,6245],"content":"<bpt id=\"p1\">**</bpt>VTS_PBOOL<ept id=\"p1\">**</ept>","source":"**VTS_PBOOL**"},{"pos":[6246,6256],"content":"<bpt id=\"p1\">**</bpt>BOOL<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>","source":"**BOOL\\***"},{"pos":[6261,6277],"content":"<bpt id=\"p1\">**</bpt>VTS_PVARIANT<ept id=\"p1\">**</ept>","source":"**VTS_PVARIANT**"},{"pos":[6278,6291],"content":"<bpt id=\"p1\">**</bpt>VARIANT<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>","source":"**VARIANT\\***"},{"pos":[6296,6312],"content":"<bpt id=\"p1\">**</bpt>VTS_PUNKNOWN<ept id=\"p1\">**</ept>","source":"**VTS_PUNKNOWN**"},{"pos":[6313,6328],"content":"<bpt id=\"p1\">**</bpt>LPUNKNOWN<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>","source":"**LPUNKNOWN\\***"},{"pos":[6333,6345],"content":"<bpt id=\"p1\">**</bpt>VTS_NONE<ept id=\"p1\">**</ept>","source":"**VTS_NONE**"},{"content":"No parameters","pos":[6346,6359]},{"pos":[6370,6413],"content":"<bpt id=\"p1\">&lt;a name=\"disp_property\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  DISP_PROPERTY","linkify":"<a name=\"disp_property\"></a>  DISP_PROPERTY","source":"<a name=\"disp_property\"></a>  DISP_PROPERTY"},{"content":"Defines an OLE automation property in a dispatch map.","pos":[6417,6470]},{"pos":[6556,6566],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Name of the class.","pos":[6584,6602]},{"content":"External name of the property.","pos":[6622,6652]},{"content":"Name of the member variable in which the property is stored.","pos":[6675,6735]},{"content":"A value specifying the property's type.","pos":[6758,6797]},{"pos":[6807,6814],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`vtPropType`</ph> argument is of type <bpt id=\"p1\">**</bpt>VARTYPE<ept id=\"p1\">**</ept>.","pos":[6818,6867],"source":"The `vtPropType` argument is of type **VARTYPE**."},{"content":"Possible values for this argument are taken from the <ph id=\"ph1\">`VARENUM`</ph> enumeration:","pos":[6868,6943],"source":" Possible values for this argument are taken from the `VARENUM` enumeration:"},{"content":"Symbol","pos":[6950,6956]},{"pos":[6957,6974],"content":"<bpt id=\"p1\">**</bpt>Property type<ept id=\"p1\">**</ept>","source":"**Property type**"},{"pos":[7028,7037],"content":"<bpt id=\"p1\">**</bpt>short<ept id=\"p1\">**</ept>","source":"**short**"},{"pos":[7050,7058],"content":"<bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept>","source":"**long**"},{"pos":[7071,7080],"content":"<bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept>","source":"**float**"},{"pos":[7093,7103],"content":"<bpt id=\"p1\">**</bpt>double<ept id=\"p1\">**</ept>","source":"**double**"},{"pos":[7116,7122],"content":"<bpt id=\"p1\">**</bpt>CY<ept id=\"p1\">**</ept>","source":"**CY**"},{"pos":[7137,7145],"content":"<bpt id=\"p1\">**</bpt>DATE<ept id=\"p1\">**</ept>","source":"**DATE**"},{"pos":[7174,7189],"content":"<bpt id=\"p1\">**</bpt>VT_DISPATCH<ept id=\"p1\">**</ept>","source":"**VT_DISPATCH**"},{"pos":[7240,7248],"content":"<bpt id=\"p1\">**</bpt>BOOL<ept id=\"p1\">**</ept>","source":"**BOOL**"},{"pos":[7253,7267],"content":"<bpt id=\"p1\">**</bpt>VT_VARIANT<ept id=\"p1\">**</ept>","source":"**VT_VARIANT**"},{"pos":[7268,7279],"content":"<bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept>","source":"**VARIANT**"},{"pos":[7284,7298],"content":"<bpt id=\"p1\">**</bpt>VT_UNKNOWN<ept id=\"p1\">**</ept>","source":"**VT_UNKNOWN**"},{"pos":[7318,7471],"content":"When an external client changes the property, the value of the member variable specified by <ph id=\"ph1\">`memberName`</ph> changes; there is no notification of the change.","source":"When an external client changes the property, the value of the member variable specified by `memberName` changes; there is no notification of the change."},{"pos":[7481,7530],"content":"<bpt id=\"p1\">&lt;a name=\"disp_property_ex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  DISP_PROPERTY_EX","linkify":"<a name=\"disp_property_ex\"></a>  DISP_PROPERTY_EX","source":"<a name=\"disp_property_ex\"></a>  DISP_PROPERTY_EX"},{"content":"Defines an OLE automation property and name the functions used to get and set the property's value in a dispatch map.","pos":[7534,7651]},{"pos":[7750,7760],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Name of the class.","pos":[7778,7796]},{"content":"External name of the property.","pos":[7816,7846]},{"content":"Name of the member function used to get the property.","pos":[7868,7921]},{"content":"Name of the member function used to set the property.","pos":[7943,7996]},{"content":"A value specifying the property's type.","pos":[8019,8058]},{"pos":[8068,8075],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`memberGet`</ph> and <ph id=\"ph2\">`memberSet`</ph> functions have signatures determined by the <ph id=\"ph3\">`vtPropType`</ph> argument.","pos":[8079,8177],"source":"The `memberGet` and `memberSet` functions have signatures determined by the `vtPropType` argument."},{"content":"The <ph id=\"ph1\">`memberGet`</ph> function takes no arguments and returns a value of the type specified by <ph id=\"ph2\">`vtPropType`</ph>.","pos":[8178,8280],"source":" The `memberGet` function takes no arguments and returns a value of the type specified by `vtPropType`."},{"content":"The <ph id=\"ph1\">`memberSet`</ph> function takes an argument of the type specified by <ph id=\"ph2\">`vtPropType`</ph> and returns nothing.","pos":[8281,8382],"source":" The `memberSet` function takes an argument of the type specified by `vtPropType` and returns nothing."},{"content":"The <ph id=\"ph1\">`vtPropType`</ph> argument is of type <bpt id=\"p1\">**</bpt>VARTYPE<ept id=\"p1\">**</ept>.","pos":[8389,8438],"source":"The `vtPropType` argument is of type **VARTYPE**."},{"content":"Possible values for this argument are taken from the <ph id=\"ph1\">`VARENUM`</ph> enumeration.","pos":[8439,8514],"source":" Possible values for this argument are taken from the `VARENUM` enumeration."},{"content":"For a list of these values, see the Remarks for the <ph id=\"ph1\">`vtRetVal`</ph> parameter in <bpt id=\"p1\">[</bpt>DISP_FUNCTION<ept id=\"p1\">](#disp_function)</ept>.","pos":[8515,8623],"source":" For a list of these values, see the Remarks for the `vtRetVal` parameter in [DISP_FUNCTION](#disp_function)."},{"content":"Note that <ph id=\"ph1\">`VT_EMPTY`</ph>, listed in the <ph id=\"ph2\">`DISP_FUNCTION`</ph> remarks, is not permitted as a property data type.","pos":[8624,8726],"source":" Note that `VT_EMPTY`, listed in the `DISP_FUNCTION` remarks, is not permitted as a property data type."},{"pos":[8736,8793],"content":"<bpt id=\"p1\">&lt;a name=\"disp_property_notify\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  DISP_PROPERTY_NOTIFY","linkify":"<a name=\"disp_property_notify\"></a>  DISP_PROPERTY_NOTIFY","source":"<a name=\"disp_property_notify\"></a>  DISP_PROPERTY_NOTIFY"},{"content":"Defines an OLE automation property with notification in a dispatch map.","pos":[8797,8868]},{"pos":[8981,8991],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Name of the class.","pos":[9009,9027]},{"content":"External name of the property.","pos":[9054,9084]},{"content":"Name of the member variable in which the property is stored.","pos":[9107,9167]},{"content":"Name of the notification function for <ph id=\"ph1\">`szExternalName`</ph>.","pos":[9191,9246],"source":" Name of the notification function for `szExternalName`."},{"content":"A value specifying the property's type.","pos":[9269,9308]},{"pos":[9318,9325],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9329,9517],"content":"Unlike properties defined with <ph id=\"ph1\">`DISP_PROPERTY`</ph>, a property defined with <ph id=\"ph2\">`DISP_PROPERTY_NOTIFY`</ph> will automatically call the function specified by <ph id=\"ph3\">`pfnAfterSet`</ph> when the property is changed.","source":"Unlike properties defined with `DISP_PROPERTY`, a property defined with `DISP_PROPERTY_NOTIFY` will automatically call the function specified by `pfnAfterSet` when the property is changed."},{"content":"The <ph id=\"ph1\">`vtPropType`</ph> argument is of type <bpt id=\"p1\">**</bpt>VARTYPE<ept id=\"p1\">**</ept>.","pos":[9524,9573],"source":"The `vtPropType` argument is of type **VARTYPE**."},{"content":"Possible values for this argument are taken from the <ph id=\"ph1\">`VARENUM`</ph> enumeration:","pos":[9574,9649],"source":" Possible values for this argument are taken from the `VARENUM` enumeration:"},{"content":"Symbol","pos":[9656,9662]},{"pos":[9663,9680],"content":"<bpt id=\"p1\">**</bpt>Property type<ept id=\"p1\">**</ept>","source":"**Property type**"},{"pos":[9734,9743],"content":"<bpt id=\"p1\">**</bpt>short<ept id=\"p1\">**</ept>","source":"**short**"},{"pos":[9756,9764],"content":"<bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept>","source":"**long**"},{"pos":[9777,9786],"content":"<bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept>","source":"**float**"},{"pos":[9799,9809],"content":"<bpt id=\"p1\">**</bpt>double<ept id=\"p1\">**</ept>","source":"**double**"},{"pos":[9822,9828],"content":"<bpt id=\"p1\">**</bpt>CY<ept id=\"p1\">**</ept>","source":"**CY**"},{"pos":[9843,9851],"content":"<bpt id=\"p1\">**</bpt>DATE<ept id=\"p1\">**</ept>","source":"**DATE**"},{"pos":[9880,9895],"content":"<bpt id=\"p1\">**</bpt>VT_DISPATCH<ept id=\"p1\">**</ept>","source":"**VT_DISPATCH**"},{"pos":[9946,9954],"content":"<bpt id=\"p1\">**</bpt>BOOL<ept id=\"p1\">**</ept>","source":"**BOOL**"},{"pos":[9959,9973],"content":"<bpt id=\"p1\">**</bpt>VT_VARIANT<ept id=\"p1\">**</ept>","source":"**VT_VARIANT**"},{"pos":[9974,9985],"content":"<bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept>","source":"**VARIANT**"},{"pos":[9990,10004],"content":"<bpt id=\"p1\">**</bpt>VT_UNKNOWN<ept id=\"p1\">**</ept>","source":"**VT_UNKNOWN**"},{"pos":[10027,10082],"content":"<bpt id=\"p1\">&lt;a name=\"disp_property_param\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  DISP_PROPERTY_PARAM","linkify":"<a name=\"disp_property_param\"></a>  DISP_PROPERTY_PARAM","source":"<a name=\"disp_property_param\"></a>  DISP_PROPERTY_PARAM"},{"pos":[10086,10163],"content":"Defines a property accessed with separate <bpt id=\"p1\">**</bpt>Get<ept id=\"p1\">**</ept> and <ph id=\"ph1\">`Set`</ph> member functions.","source":"Defines a property accessed with separate **Get** and `Set` member functions."},{"pos":[10278,10288],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Name of the class.","pos":[10306,10324]},{"content":"<bpt id=\"p1\">*</bpt>pszExternalName<ept id=\"p1\">*</ept>","pos":[10331,10348],"source":"*pszExternalName*"},{"content":"External name of the property.","pos":[10352,10382]},{"content":"Name of the member function used to get the property.","pos":[10401,10454]},{"content":"Name of the member function used to set the property.","pos":[10473,10526]},{"content":"A value specifying the property's type.","pos":[10549,10588]},{"content":"A string of space-separated <bpt id=\"p1\">**</bpt>VTS_<ept id=\"p1\">**</ept> variant parameter types, one for each parameter.","pos":[10610,10695],"source":" A string of space-separated **VTS_** variant parameter types, one for each parameter."},{"pos":[10705,10712],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Unlike the <ph id=\"ph1\">`DISP_PROPERTY_EX`</ph> macro, this macro allows you to specify a parameter list for the property.","pos":[10716,10820],"source":"Unlike the `DISP_PROPERTY_EX` macro, this macro allows you to specify a parameter list for the property."},{"content":"This is useful for implementing properties that are indexed or parameterized.","pos":[10821,10898]},{"pos":[10908,10915],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"Consider the following declaration of get and set member functions that allow the user to request a specific row and column when accessing the property:","pos":[10919,11071]},{"pos":[11078,11159],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCActiveXControl#9<ept id=\"p2\">](../../mfc/codesnippet/cpp/dispatch-maps_3.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCActiveXControl#9](../../mfc/codesnippet/cpp/dispatch-maps_3.h)]"},{"pos":[11166,11256],"content":"These correspond to the following <ph id=\"ph1\">`DISP_PROPERTY_PARAM`</ph> macro in the control dispatch map:","source":"These correspond to the following `DISP_PROPERTY_PARAM` macro in the control dispatch map:"},{"pos":[11263,11347],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCActiveXControl#10<ept id=\"p2\">](../../mfc/codesnippet/cpp/dispatch-maps_4.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCActiveXControl#10](../../mfc/codesnippet/cpp/dispatch-maps_4.cpp)]"},{"content":"As another example, consider the following get and set member functions:","pos":[11354,11426]},{"pos":[11433,11515],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCActiveXControl#11<ept id=\"p2\">](../../mfc/codesnippet/cpp/dispatch-maps_5.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCActiveXControl#11](../../mfc/codesnippet/cpp/dispatch-maps_5.h)]"},{"pos":[11522,11612],"content":"These correspond to the following <ph id=\"ph1\">`DISP_PROPERTY_PARAM`</ph> macro in the control dispatch map:","source":"These correspond to the following `DISP_PROPERTY_PARAM` macro in the control dispatch map:"},{"pos":[11619,11703],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCActiveXControl#12<ept id=\"p2\">](../../mfc/codesnippet/cpp/dispatch-maps_6.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCActiveXControl#12](../../mfc/codesnippet/cpp/dispatch-maps_6.cpp)]"},{"pos":[11713,11756],"content":"<bpt id=\"p1\">&lt;a name=\"disp_defvalue\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  DISP_DEFVALUE","linkify":"<a name=\"disp_defvalue\"></a>  DISP_DEFVALUE","source":"<a name=\"disp_defvalue\"></a>  DISP_DEFVALUE"},{"content":"Makes an existing property the default value of an object.","pos":[11760,11818]},{"pos":[11880,11890],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Name of the class.","pos":[11908,11926]},{"content":"External name of the property that represents the \"value\" of the object.","pos":[11946,12018]},{"pos":[12028,12035],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Using a default value can make programming your automation object simpler for Visual Basic applications.","pos":[12039,12143]},{"content":"The \"default value\" of your object is the property that is retrieved or set when a reference to an object does not specify a property or member function.","pos":[12150,12303]},{"pos":[12312,12320],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[12324,12391],"content":"<bpt id=\"p1\">[</bpt>Macros and Globals<ept id=\"p1\">](../../mfc/reference/mfc-macros-and-globals.md)</ept>","source":"[Macros and Globals](../../mfc/reference/mfc-macros-and-globals.md)"}],"content":"---\ntitle: \"Dispatch Maps | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"vc.mfc.macros.maps\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"dispatch maps. macros\"\n  - \"dispatch maps\"\n  - \"dispatch map macros\"\nms.assetid: bef9d08b-ad35-4c3a-99d8-04150c7c04e2\ncaps.latest.revision: 14\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Dispatch Maps\nOLE Automation provides ways to call methods and to access properties across applications. The mechanism supplied by the Microsoft Foundation Class Library for dispatching these requests is the \"dispatch map,\" which designates the internal and external names of object functions and properties, as well as the data types of the properties themselves and of function arguments.  \n  \n### Dispatch Maps  \n  \n|||  \n|-|-|  \n|[DECLARE_DISPATCH_MAP](#declare_dispatch_map)|Declares that a dispatch map will be used to expose a class's methods and properties (must be used in the class declaration).|  \n|[BEGIN_DISPATCH_MAP](#begin_dispatch_map)|Starts the definition of a dispatch map.|  \n|[END_DISPATCH_MAP](#end_dispatch_map)|Ends the definition of a dispatch map.|  \n|[DISP_FUNCTION](#disp_function)|Used in a dispatch map to define an OLE automation function.|  \n|[DISP_PROPERTY](#disp_property)|Defines an OLE automation property.|  \n|[DISP_PROPERTY_EX](#disp_property_ex)|Defines an OLE automation property and names the Get and Set functions.|  \n|[DISP_PROPERTY_NOTIFY](#disp_property_notify)|Defines an OLE automation property with notification.|  \n|[DISP_PROPERTY_PARAM](#disp_property_param)|Defines an OLE automation property that takes parameters and names the Get and Set functions.|  \n|[DISP_DEFVALUE](#disp_defvalue)|Makes an existing property the default value of an object.|  \n  \n##  <a name=\"declare_dispatch_map\"></a>  DECLARE_DISPATCH_MAP  \n If a `CCmdTarget`-derived class in your program supports OLE Automation, that class must provide a dispatch map to expose its methods and properties.  \n  \n```   \nDECLARE_DISPATCH_MAP()  \n```  \n  \n### Remarks  \n Use the `DECLARE_DISPATCH_MAP` macro at the end of your class declaration. Then, in the .CPP file that defines the member functions for the class, use the `BEGIN_DISPATCH_MAP` macro. Then include macro entries for each of your class's exposed methods and properties ( `DISP_FUNCTION`, `DISP_PROPERTY`, and so on). Finally, use the `END_DISPATCH_MAP` macro.  \n  \n> [!NOTE]\n>  If you declare any members after `DECLARE_DISPATCH_MAP`, you must specify a new access type ( **public**, `private`, or `protected`) for them.  \n  \n The Application Wizard and code wizards assist in creating Automation classes and in maintaining dispatch maps. For more information on dispatch maps, see [Automation Servers](../../mfc/automation-servers.md).  \n  \n### Example  \n [!code-cpp[NVC_MFCAutomation#10](../../mfc/codesnippet/cpp/dispatch-maps_1.h)]  \n  \n##  <a name=\"begin_dispatch_map\"></a>  BEGIN_DISPATCH_MAP  \n Declares the definition of your dispatch map.  \n  \n```  \nBEGIN_DISPATCH_MAP(theClass, baseClass)   \n```  \n  \n### Parameters  \n `theClass`  \n Specifies the name of the class that owns this dispatch map.  \n  \n `baseClass`  \n Specifies the base class name of `theClass`.  \n  \n### Remarks  \n In the implementation (.cpp) file that defines the member functions for your class, start the dispatch map with the `BEGIN_DISPATCH_MAP` macro, add macro entries for each of your dispatch functions and properties, and complete the dispatch map with the `END_DISPATCH_MAP` macro.  \n  \n##  <a name=\"end_dispatch_map\"></a>  END_DISPATCH_MAP  \n Ends the definition of your dispatch map.  \n  \n```   \nEND_DISPATCH_MAP()  \n```  \n  \n### Remarks  \n It must be used in conjunction with `BEGIN_DISPATCH_MAP`.  \n  \n##  <a name=\"disp_function\"></a>  DISP_FUNCTION  \n Defines an OLE automation function in a dispatch map.  \n  \n```   \nDISP_FUNCTION(theClass, pszName, pfnMember, vtRetVal, vtsParams)   \n```  \n  \n### Parameters  \n `theClass`  \n Name of the class.  \n  \n `pszName`  \n External name of the function.  \n  \n `pfnMember`  \n Name of the member function.  \n  \n `vtRetVal`  \n A value specifying the function's return type.  \n  \n `vtsParams`  \n A space-separated list of one or more constants specifying the function's parameter list.  \n  \n### Remarks  \n The `vtRetVal` argument is of type **VARTYPE**. The following possible values for this argument are taken from the `VARENUM` enumeration:  \n  \n|Symbol|Return type|  \n|------------|-----------------|  \n|`VT_EMPTY`|`void`|  \n|`VT_I2`|**short**|  \n|`VT_I4`|**long**|  \n|`VT_R4`|**float**|  \n|`VT_R8`|**double**|  \n|`VT_CY`|**CY**|  \n|`VT_DATE`|**DATE**|  \n|`VT_BSTR`|`BSTR`|  \n|**VT_DISPATCH**|`LPDISPATCH`|  \n|`VT_ERROR`|`SCODE`|  \n|`VT_BOOL`|**BOOL**|  \n|**VT_VARIANT**|**VARIANT**|  \n|**VT_UNKNOWN**|`LPUNKNOWN`|  \n  \n The `vtsParams` argument is a space-separated list of values from the **VTS_** constants. One or more of these values separated by spaces (not commas) specifies the function's parameter list. For example, \n  \n [!code-cpp[NVC_MFCAutomation#14](../../mfc/codesnippet/cpp/dispatch-maps_2.cpp)]  \n  \n specifies a list containing a short integer followed by a pointer to a short integer.  \n  \n The **VTS_** constants and their meanings are as follows:  \n  \n|Symbol|Parameter type|  \n|------------|--------------------|  \n|**VTS_I2**|`Short`|  \n|**VTS_I4**|`Long`|  \n|**VTS_R4**|**Float**|  \n|**VTS_R8**|`Double`|  \n|**VTS_CY**|**const CY** or **CY\\***|  \n|**VTS_DATE**|**DATE**|  \n|**VTS_BSTR**|`LPCSTR`|  \n|**VTS_DISPATCH**|`LPDISPATCH`|  \n|**VTS_SCODE**|`SCODE`|  \n|**VTS_BOOL**|**BOOL**|  \n|**VTS_VARIANT**|**const VARIANT\\*** or **VARIANT&**|  \n|**VTS_UNKNOWN**|`LPUNKNOWN`|  \n|**VTS_PI2**|**short\\***|  \n|**VTS_PI4**|**long\\***|  \n|**VTS_PR4**|**float\\***|  \n|**VTS_PR8**|**double\\***|  \n|**VTS_PCY**|**CY\\***|  \n|**VTS_PDATE**|**DATE\\***|  \n|**VTS_PBSTR**|**BSTR\\***|  \n|**VTS_PDISPATCH**|**LPDISPATCH\\***|  \n|**VTS_PSCODE**|**SCODE\\***|  \n|**VTS_PBOOL**|**BOOL\\***|  \n|**VTS_PVARIANT**|**VARIANT\\***|  \n|**VTS_PUNKNOWN**|**LPUNKNOWN\\***|  \n|**VTS_NONE**|No parameters|  \n  \n##  <a name=\"disp_property\"></a>  DISP_PROPERTY  \n Defines an OLE automation property in a dispatch map.  \n  \n```   \nDISP_PROPERTY(theClass, pszName, memberName, vtPropType)   \n```  \n  \n### Parameters  \n `theClass`  \n Name of the class.  \n  \n `pszName`  \n External name of the property.  \n  \n `memberName`  \n Name of the member variable in which the property is stored.  \n  \n `vtPropType`  \n A value specifying the property's type.  \n  \n### Remarks  \n The `vtPropType` argument is of type **VARTYPE**. Possible values for this argument are taken from the `VARENUM` enumeration:  \n  \n|Symbol|**Property type**|  \n|------------|-----------------------|  \n|`VT_I2`|**short**|  \n|`VT_I4`|**long**|  \n|`VT_R4`|**float**|  \n|`VT_R8`|**double**|  \n|`VT_CY`|**CY**|  \n|`VT_DATE`|**DATE**|  \n|`VT_BSTR`|`CString`|  \n|**VT_DISPATCH**|`LPDISPATCH`|  \n|`VT_ERROR`|`SCODE`|  \n|`VT_BOOL`|**BOOL**|  \n|**VT_VARIANT**|**VARIANT**|  \n|**VT_UNKNOWN**|`LPUNKNOWN`|  \n  \n When an external client changes the property, the value of the member variable specified by `memberName` changes; there is no notification of the change.  \n  \n##  <a name=\"disp_property_ex\"></a>  DISP_PROPERTY_EX  \n Defines an OLE automation property and name the functions used to get and set the property's value in a dispatch map.  \n  \n```   \nDISP_PROPERTY_EX(theClass, pszName, memberGet, memberSet, vtPropType)   \n```  \n  \n### Parameters  \n `theClass`  \n Name of the class.  \n  \n `pszName`  \n External name of the property.  \n  \n `memberGet`  \n Name of the member function used to get the property.  \n  \n `memberSet`  \n Name of the member function used to set the property.  \n  \n `vtPropType`  \n A value specifying the property's type.  \n  \n### Remarks  \n The `memberGet` and `memberSet` functions have signatures determined by the `vtPropType` argument. The `memberGet` function takes no arguments and returns a value of the type specified by `vtPropType`. The `memberSet` function takes an argument of the type specified by `vtPropType` and returns nothing.  \n  \n The `vtPropType` argument is of type **VARTYPE**. Possible values for this argument are taken from the `VARENUM` enumeration. For a list of these values, see the Remarks for the `vtRetVal` parameter in [DISP_FUNCTION](#disp_function). Note that `VT_EMPTY`, listed in the `DISP_FUNCTION` remarks, is not permitted as a property data type.  \n  \n##  <a name=\"disp_property_notify\"></a>  DISP_PROPERTY_NOTIFY  \n Defines an OLE automation property with notification in a dispatch map.  \n  \n```   \nDISP_PROPERTY_NOTIFY(theClass, szExternalName, memberName, pfnAfterSet, vtPropType)   \n```  \n  \n### Parameters  \n `theClass`  \n Name of the class.  \n  \n `szExternalName`  \n External name of the property.  \n  \n `memberName`  \n Name of the member variable in which the property is stored.  \n  \n `pfnAfterSet`  \n Name of the notification function for `szExternalName`.  \n  \n `vtPropType`  \n A value specifying the property's type.  \n  \n### Remarks  \n Unlike properties defined with `DISP_PROPERTY`, a property defined with `DISP_PROPERTY_NOTIFY` will automatically call the function specified by `pfnAfterSet` when the property is changed.  \n  \n The `vtPropType` argument is of type **VARTYPE**. Possible values for this argument are taken from the `VARENUM` enumeration:  \n  \n|Symbol|**Property type**|  \n|------------|-----------------------|  \n|`VT_I2`|**short**|  \n|`VT_I4`|**long**|  \n|`VT_R4`|**float**|  \n|`VT_R8`|**double**|  \n|`VT_CY`|**CY**|  \n|`VT_DATE`|**DATE**|  \n|`VT_BSTR`|`CString`|  \n|**VT_DISPATCH**|`LPDISPATCH`|  \n|`VT_ERROR`|`SCODE`|  \n|`VT_BOOL`|**BOOL**|  \n|**VT_VARIANT**|**VARIANT**|  \n|**VT_UNKNOWN**|`LPUNKNOWN`|  \n  \n##  <a name=\"disp_property_param\"></a>  DISP_PROPERTY_PARAM  \n Defines a property accessed with separate **Get** and `Set` member functions.  \n  \n```   \nDISP_PROPERTY_PARAM(theClass, pszExternalName, pfnGet, pfnSet, vtPropType, vtsParams)   \n```  \n  \n### Parameters  \n `theClass`  \n Name of the class.  \n  \n *pszExternalName*  \n External name of the property.  \n  \n `pfnGet`  \n Name of the member function used to get the property.  \n  \n `pfnSet`  \n Name of the member function used to set the property.  \n  \n `vtPropType`  \n A value specifying the property's type.  \n  \n `vtsParams`  \n A string of space-separated **VTS_** variant parameter types, one for each parameter.  \n  \n### Remarks  \n Unlike the `DISP_PROPERTY_EX` macro, this macro allows you to specify a parameter list for the property. This is useful for implementing properties that are indexed or parameterized.  \n  \n### Example  \n Consider the following declaration of get and set member functions that allow the user to request a specific row and column when accessing the property:  \n  \n [!code-cpp[NVC_MFCActiveXControl#9](../../mfc/codesnippet/cpp/dispatch-maps_3.h)]  \n  \n These correspond to the following `DISP_PROPERTY_PARAM` macro in the control dispatch map:  \n  \n [!code-cpp[NVC_MFCActiveXControl#10](../../mfc/codesnippet/cpp/dispatch-maps_4.cpp)]  \n  \n As another example, consider the following get and set member functions:  \n  \n [!code-cpp[NVC_MFCActiveXControl#11](../../mfc/codesnippet/cpp/dispatch-maps_5.h)]  \n  \n These correspond to the following `DISP_PROPERTY_PARAM` macro in the control dispatch map:  \n  \n [!code-cpp[NVC_MFCActiveXControl#12](../../mfc/codesnippet/cpp/dispatch-maps_6.cpp)]  \n  \n##  <a name=\"disp_defvalue\"></a>  DISP_DEFVALUE  \n Makes an existing property the default value of an object.  \n  \n```   \nDISP_DEFVALUE(theClass, pszName)   \n```  \n  \n### Parameters  \n `theClass`  \n Name of the class.  \n  \n `pszName`  \n External name of the property that represents the \"value\" of the object.  \n  \n### Remarks  \n Using a default value can make programming your automation object simpler for Visual Basic applications.  \n  \n The \"default value\" of your object is the property that is retrieved or set when a reference to an object does not specify a property or member function.  \n  \n## See Also  \n [Macros and Globals](../../mfc/reference/mfc-macros-and-globals.md)\n"}