{"nodes":[{"pos":[12,61],"content":"extreme_value_distribution Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"extreme_value_distribution Class | Microsoft Docs","pos":[0,49]}]},{"pos":[859,891],"content":"extreme_value_distribution Class","linkify":"extreme_value_distribution Class","nodes":[{"content":"extreme_value_distribution Class","pos":[0,32]}]},{"content":"Generates an extreme value distribution.","pos":[892,932]},{"pos":[941,947],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1674,1684],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The floating-point result type, defaults to <ph id=\"ph1\">`double`</ph>.","pos":[1702,1755],"source":" The floating-point result type, defaults to `double`."},{"content":"For possible types, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","pos":[1756,1823],"source":" For possible types, see [\\<random>](../standard-library/random.md)."},{"pos":[1832,1839],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template class describes a distribution that produces values of a user-specified integral type, or type <ph id=\"ph1\">`double`</ph> if none is provided, distributed according to the Extreme Value Distribution.","pos":[1843,2037],"source":"The template class describes a distribution that produces values of a user-specified integral type, or type `double` if none is provided, distributed according to the Extreme Value Distribution."},{"content":"The following table links to articles about individual members.","pos":[2038,2101]},{"pos":[2125,2238],"content":"<bpt id=\"p1\">[</bpt>extreme_value_distribution::extreme_value_distribution<ept id=\"p1\">](#extreme_value_distribution__extreme_value_distribution)</ept>","source":"[extreme_value_distribution::extreme_value_distribution](#extreme_value_distribution__extreme_value_distribution)"},{"pos":[2384,2465],"content":"<bpt id=\"p1\">[</bpt>extreme_value_distribution::param_type<ept id=\"p1\">](#extreme_value_distribution__param_type)</ept>","source":"[extreme_value_distribution::param_type](#extreme_value_distribution__param_type)"},{"pos":[2473,2590],"content":"The property functions <ph id=\"ph1\">`a()`</ph> and <ph id=\"ph2\">`b()`</ph> return their respective values for stored distribution parameters <ph id=\"ph3\">`a`</ph> and <ph id=\"ph4\">`b`</ph>.","source":"The property functions `a()` and `b()` return their respective values for stored distribution parameters `a` and `b`."},{"pos":[2597,2711],"content":"For more information about distribution classes and their members, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","source":"For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md)."},{"pos":[2718,2890],"content":"For detailed information about the extreme value distribution, see the Wolfram MathWorld article <bpt id=\"p1\">[</bpt>Extreme Value Distribution<ept id=\"p1\">](http://go.microsoft.com/fwlink/LinkId=401110)</ept>.","source":"For detailed information about the extreme value distribution, see the Wolfram MathWorld article [Extreme Value Distribution](http://go.microsoft.com/fwlink/LinkId=401110)."},{"pos":[2899,2906],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4821,4827],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[5480,5492],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[5496,5517],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>random&gt;","source":"**Header:** \\<random>"},{"pos":[5524,5542],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[5552,5677],"content":"<bpt id=\"p1\">&lt;a name=\"extreme_value_distribution__extreme_value_distribution\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  extreme_value_distribution::extreme_value_distribution","linkify":"<a name=\"extreme_value_distribution__extreme_value_distribution\"></a>  extreme_value_distribution::extreme_value_distribution","source":"<a name=\"extreme_value_distribution__extreme_value_distribution\"></a>  extreme_value_distribution::extreme_value_distribution"},{"content":"Constructs the distribution.","pos":[5681,5709]},{"pos":[5871,5881],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`a`</ph> distribution parameter.","pos":[5892,5923],"source":" The `a` distribution parameter."},{"content":"The <ph id=\"ph1\">`b`</ph> distribution parameter.","pos":[5937,5968],"source":" The `b` distribution parameter."},{"content":"The parameter structure used to construct the distribution.","pos":[5985,6044]},{"pos":[6054,6061],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6065,6092],"content":"<bpt id=\"p1\">**</bpt>Precondition:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`0.0 &lt; b`</ph>","source":"**Precondition:** `0.0 < b`"},{"pos":[6099,6232],"content":"The first constructor constructs an object whose stored <ph id=\"ph1\">`a`</ph> value holds the value <ph id=\"ph2\">`a`</ph> and whose stored <ph id=\"ph3\">`b`</ph> value holds the value <ph id=\"ph4\">`b`</ph>.","source":"The first constructor constructs an object whose stored `a` value holds the value `a` and whose stored `b` value holds the value `b`."},{"content":"The second constructor constructs an object whose stored parameters are initialized from <ph id=\"ph1\">`parm`</ph>.","pos":[6239,6335],"source":"The second constructor constructs an object whose stored parameters are initialized from `parm`."},{"content":"You can obtain and set the current parameters of an existing distribution by calling the <ph id=\"ph1\">`param()`</ph> member function.","pos":[6336,6451],"source":" You can obtain and set the current parameters of an existing distribution by calling the `param()` member function."},{"pos":[6461,6554],"content":"<bpt id=\"p1\">&lt;a name=\"extreme_value_distribution__param_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  extreme_value_distribution::param_type","linkify":"<a name=\"extreme_value_distribution__param_type\"></a>  extreme_value_distribution::param_type","source":"<a name=\"extreme_value_distribution__param_type\"></a>  extreme_value_distribution::param_type"},{"content":"Stores the parameters of the distribution.","pos":[6558,6600]},{"pos":[6931,6941],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[6945,7054],"content":"See parent topic <bpt id=\"p1\">[</bpt>extreme_value_distribution Class<ept id=\"p1\">](../standard-library/extreme-value-distribution-class.md)</ept>.","source":"See parent topic [extreme_value_distribution Class](../standard-library/extreme-value-distribution-class.md)."},{"pos":[7064,7071],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7075,7102],"content":"<bpt id=\"p1\">**</bpt>Precondition:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`0.0 &lt; b`</ph>","source":"**Precondition:** `0.0 < b`"},{"pos":[7109,7352],"content":"This structure can be passed to the distribution's class constructor at instantiation, to the <ph id=\"ph1\">`param()`</ph> member function to set the stored parameters of an existing distribution, and to <ph id=\"ph2\">`operator()`</ph> to be used in place of the stored parameters.","source":"This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters."},{"pos":[7361,7369],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[7373,7415],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>","source":"[\\<random>](../standard-library/random.md)"}],"content":"---\ntitle: \"extreme_value_distribution Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.tr1.extreme_value_distribution\"\n  - \"tr1::extreme_value_distribution\"\n  - \"tr1.extreme_value_distribution\"\n  - \"std::tr1::extreme_value_distribution\"\n  - \"random/std::tr1::extreme_value_distribution\"\n  - \"extreme_value_distribution\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"extreme_value_distribution class\"\nms.assetid: a0cd8370-0a54-4e26-9388-8b9678fb57da\ncaps.latest.revision: 16\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# extreme_value_distribution Class\nGenerates an extreme value distribution.  \n  \n## Syntax  \n```  \nclass extreme_value_distribution  \n   {  \n   public:  // types  \n   typedef RealType result_type;  \n   struct param_type;  // constructor and reset functions  \n   explicit extreme_value_distribution(RealType a = 0.0, RealType b = 1.0);\n   explicit extreme_value_distribution(const param_type& parm);\n   void reset();\n   // generating functions  \n   template <class URNG>  \n   result_type operator()(URNG& gen);\n   template <class URNG>  \n   result_type operator()(URNG& gen, const param_type& parm);\n   // property functions  \n   RealType a() const;\n   RealType b() const;\n   param_type param() const;\n   void param(const param_type& parm);\n   result_type min() const;\n   result_type max() const;\n   };  \n```    \n#### Parameters  \n `RealType`  \n The floating-point result type, defaults to `double`. For possible types, see [\\<random>](../standard-library/random.md).  \n  \n## Remarks  \n The template class describes a distribution that produces values of a user-specified integral type, or type `double` if none is provided, distributed according to the Extreme Value Distribution. The following table links to articles about individual members.  \n  \n||||  \n|-|-|-|  \n|[extreme_value_distribution::extreme_value_distribution](#extreme_value_distribution__extreme_value_distribution)|`extreme_value_distribution::a`|`extreme_value_distribution::param`|  \n|`extreme_value_distribution::operator()`|`extreme_value_distribution::b`|[extreme_value_distribution::param_type](#extreme_value_distribution__param_type)|  \n  \n The property functions `a()` and `b()` return their respective values for stored distribution parameters `a` and `b`.  \n  \n For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md).  \n  \n For detailed information about the extreme value distribution, see the Wolfram MathWorld article [Extreme Value Distribution](http://go.microsoft.com/fwlink/LinkId=401110).  \n  \n## Example  \n  \n```cpp  \n// compile with: /EHsc /W4  \n#include <random>   \n#include <iostream>  \n#include <iomanip>  \n#include <string>  \n#include <map>  \n  \nvoid test(const double a, const double b, const int s) {  \n  \n    // uncomment to use a non-deterministic generator  \n    //    std::random_device gen;  \n  \n    std::mt19937 gen(1701);  \n  \n    std::extreme_value_distribution<> distr(a, b);  \n  \n    std::cout << std::endl;  \n    std::cout << \"min() == \" << distr.min() << std::endl;  \n    std::cout << \"max() == \" << distr.max() << std::endl;  \n    std::cout << \"a() == \" << std::fixed << std::setw(11) << std::setprecision(10) << distr.a() << std::endl;  \n    std::cout << \"b() == \" << std::fixed << std::setw(11) << std::setprecision(10) << distr.b() << std::endl;  \n  \n    // generate the distribution as a histogram  \n    std::map<double, int> histogram;  \n    for (int i = 0; i < s; ++i) {  \n        ++histogram[distr(gen)];  \n    }  \n  \n    // print results  \n    std::cout << \"Distribution for \" << s << \" samples:\" << std::endl;  \n    int counter = 0;  \n    for (const auto& elem : histogram) {  \n        std::cout << std::fixed << std::setw(11) << ++counter << \": \"  \n            << std::setw(14) << std::setprecision(10) << elem.first << std::endl;  \n    }  \n    std::cout << std::endl;  \n}  \n  \nint main()  \n{  \n    double a_dist = 0.0;  \n    double b_dist = 1;  \n  \n    int samples = 10;  \n  \n    std::cout << \"Use CTRL-Z to bypass data entry and run using default values.\" << std::endl;  \n    std::cout << \"Enter a floating point value for the \\'a\\' distribution parameter: \";  \n    std::cin >> a_dist;  \n    std::cout << \"Enter a floating point value for the \\'b\\' distribution parameter (must be greater than zero): \";  \n    std::cin >> b_dist;  \n    std::cout << \"Enter an integer value for the sample count: \";  \n    std::cin >> samples;  \n  \n    test(a_dist, b_dist, samples);  \n}  \n  \n```  \n  \n## Output  \n  \n```  \nUse CTRL-Z to bypass data entry and run using default values.  \nEnter a floating point value for the 'a' distribution parameter: 0  \nEnter a floating point value for the 'b' distribution parameter (must be greater than zero): 1  \nEnter an integer value for the sample count: 10  \n \nmin() == -1.79769e+308  \nmax() == 1.79769e+308  \na() == 0.0000000000  \nb() == 1.0000000000  \nDistribution for 10 samples:  \n    1: -0.8813940331  \n    2: -0.7698972281  \n    3: 0.2951258007  \n    4: 0.3110450734  \n    5: 0.4210546820  \n    6: 0.4210688771  \n    7: 0.4598857960  \n    8: 1.3155194200  \n    9: 1.5379170046  \n    10: 2.0568757061  \n```  \n  \n## Requirements  \n **Header:** \\<random>  \n  \n **Namespace:** std  \n  \n##  <a name=\"extreme_value_distribution__extreme_value_distribution\"></a>  extreme_value_distribution::extreme_value_distribution  \n Constructs the distribution.  \n  \n```  \nexplicit extreme_value_distribution(RealType a = 0.0, RealType b = 1.0);\n\n \nexplicit extreme_value_distribution(const param_type& parm);\n```  \n  \n### Parameters  \n `a`  \n The `a` distribution parameter.  \n  \n `b`  \n The `b` distribution parameter.  \n  \n `parm`  \n The parameter structure used to construct the distribution.  \n  \n### Remarks  \n **Precondition:** `0.0 < b`  \n  \n The first constructor constructs an object whose stored `a` value holds the value `a` and whose stored `b` value holds the value `b`.  \n  \n The second constructor constructs an object whose stored parameters are initialized from `parm`. You can obtain and set the current parameters of an existing distribution by calling the `param()` member function.  \n  \n##  <a name=\"extreme_value_distribution__param_type\"></a>  extreme_value_distribution::param_type  \n Stores the parameters of the distribution.  \n```cpp  \nstruct param_type {  \n   typedef extreme_value_distribution<RealType> distribution_type;  \n   param_type(RealType a = 0.0, RealType b = 1.0);\n   RealType a() const;\n   RealType b() const;\n   .....  \n   bool operator==(const param_type& right) const;\n   bool operator!=(const param_type& right) const;\n   };  \n```  \n### Parameters  \n See parent topic [extreme_value_distribution Class](../standard-library/extreme-value-distribution-class.md).  \n  \n### Remarks  \n **Precondition:** `0.0 < b`  \n  \n This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters.  \n  \n## See Also  \n [\\<random>](../standard-library/random.md)\n\n\n\n"}