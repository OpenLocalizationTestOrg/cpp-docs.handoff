{"nodes":[{"pos":[12,42],"content":"texture Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"texture Class | Microsoft Docs","pos":[0,30]}]},{"pos":[586,599],"content":"texture Class","linkify":"texture Class","nodes":[{"content":"texture Class","pos":[0,13]}]},{"content":"A texture is a data aggregate on an <ph id=\"ph1\">`accelerator_view`</ph> in the extent domain.","pos":[600,676],"source":"A texture is a data aggregate on an `accelerator_view` in the extent domain."},{"content":"It is a collection of variables, one for each element in an extent domain.","pos":[677,751]},{"content":"Each variable holds a value corresponding to C++ primitive type ( <ph id=\"ph1\">`unsigned int`</ph>, <ph id=\"ph2\">`int`</ph>, <ph id=\"ph3\">`float`</ph>, <ph id=\"ph4\">`double`</ph>), a scalar type ( <ph id=\"ph5\">`norm`</ph>, or <ph id=\"ph6\">`unorm`</ph>), or a short vector type.","pos":[752,921],"source":" Each variable holds a value corresponding to C++ primitive type ( `unsigned int`, `int`, `float`, `double`), a scalar type ( `norm`, or `unorm`), or a short vector type."},{"pos":[930,936],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1037,1047],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type of the elements in the texture.","pos":[1067,1107]},{"content":"The rank of the texture.","pos":[1125,1149]},{"pos":[1158,1165],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1175,1190],"content":"Public Typedefs","linkify":"Public Typedefs","nodes":[{"content":"Public Typedefs","pos":[0,15]}]},{"content":"Name","pos":[1197,1201]},{"content":"Description","pos":[1202,1213]},{"content":"Scalar types.","pos":[1265,1278]},{"content":"Value types.","pos":[1296,1308]},{"pos":[1319,1338],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1345,1349]},{"content":"Description","pos":[1350,1361]},{"pos":[1399,1436],"content":"<bpt id=\"p1\">[</bpt>texture::texture Constructor<ept id=\"p1\">](#ctor)</ept>","source":"[texture::texture Constructor](#ctor)"},{"pos":[1437,1505],"content":"Initializes a new instance of the <bpt id=\"p1\">[</bpt>texture<ept id=\"p1\">](texture-class.md)</ept> class.","source":"Initializes a new instance of the [texture](texture-class.md) class."},{"pos":[1510,1547],"content":"<bpt id=\"p1\">[</bpt>texture::~texture Destructor<ept id=\"p1\">](#ctor)</ept>","source":"[texture::~texture Destructor](#ctor)"},{"pos":[1548,1596],"content":"Destroys the <bpt id=\"p1\">[</bpt>texture<ept id=\"p1\">](texture-class.md)</ept> object.","source":"Destroys the [texture](texture-class.md) object."},{"pos":[1607,1621],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1628,1632]},{"content":"Description","pos":[1633,1644]},{"pos":[1682,1717],"content":"<bpt id=\"p1\">[</bpt>texture::copy_to Method<ept id=\"p1\">](#copy_to)</ept>","source":"[texture::copy_to Method](#copy_to)"},{"pos":[1718,1805],"content":"Copies the <bpt id=\"p1\">[</bpt>texture<ept id=\"p1\">](texture-class.md)</ept> object to the destination, by doing a deep copy.","source":"Copies the [texture](texture-class.md) object to the destination, by doing a deep copy."},{"pos":[1810,1839],"content":"<bpt id=\"p1\">[</bpt>texture::data Method<ept id=\"p1\">](#data)</ept>","source":"[texture::data Method](#data)"},{"content":"Returns a CPU pointer to the raw data of this texture.","pos":[1840,1894]},{"pos":[1899,1926],"content":"<bpt id=\"p1\">[</bpt>texture::get Method<ept id=\"p1\">](#get)</ept>","source":"[texture::get Method](#get)"},{"content":"Returns the value of the element at the specified index.","pos":[1927,1983]},{"pos":[1988,2071],"content":"<bpt id=\"p1\">[</bpt>texture::get_associated_accelerator_view Method<ept id=\"p1\">](#get_associated_accelerator_view)</ept>","source":"[texture::get_associated_accelerator_view Method](#get_associated_accelerator_view)"},{"pos":[2072,2192],"content":"Returns the <bpt id=\"p1\">[</bpt>accelerator_view<ept id=\"p1\">](accelerator-view-class.md)</ept> that is the preferred target for this texture to be copied to.","source":"Returns the [accelerator_view](accelerator-view-class.md) that is the preferred target for this texture to be copied to."},{"pos":[2197,2248],"content":"<bpt id=\"p1\">[</bpt>texture::get_depth_pitch Method<ept id=\"p1\">](#get_depth_pitch)</ept>","source":"[texture::get_depth_pitch Method](#get_depth_pitch)"},{"content":"Returns the number of bytes between each depth slice in a 3D staging texture on the CPU.","pos":[2249,2337]},{"pos":[2342,2389],"content":"<bpt id=\"p1\">[</bpt>texture::get_row_pitch Method<ept id=\"p1\">](#get_row_pitch)</ept>","source":"[texture::get_row_pitch Method](#get_row_pitch)"},{"content":"Returns the number of bytes between each row in a 2D or 3D staging texture on the CPU.","pos":[2390,2476]},{"pos":[2481,2508],"content":"<bpt id=\"p1\">[</bpt>texture::set Method<ept id=\"p1\">](#set)</ept>","source":"[texture::set Method](#set)"},{"content":"Sets the value of the element at the specified index.","pos":[2509,2562]},{"pos":[2573,2589],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[2596,2600]},{"content":"Description","pos":[2601,2612]},{"pos":[2650,2705],"content":"<bpt id=\"p1\">[</bpt>texture::operator() Operator<ept id=\"p1\">](#texture__operator_call)</ept>","source":"[texture::operator() Operator](#texture__operator_call)"},{"content":"Returns the element value that is specified by the parameters.","pos":[2706,2768]},{"pos":[2773,2826],"content":"<bpt id=\"p1\">[</bpt>texture::operator[] Operator<ept id=\"p1\">](#texture__operator_at)</ept>","source":"[texture::operator[] Operator](#texture__operator_at)"},{"content":"Returns the element that is at the specified index.","pos":[2827,2878]},{"pos":[2883,2935],"content":"<bpt id=\"p1\">[</bpt>texture::operator= Operator<ept id=\"p1\">](#texture__operator_eq)</ept>","source":"[texture::operator= Operator](#texture__operator_eq)"},{"pos":[2936,3004],"content":"Copies the specified <bpt id=\"p1\">[</bpt>texture<ept id=\"p1\">](texture-class.md)</ept> object to this one.","source":"Copies the specified [texture](texture-class.md) object to this one."},{"pos":[3015,3031],"content":"Public Constants","linkify":"Public Constants","nodes":[{"content":"Public Constants","pos":[0,16]}]},{"content":"Name","pos":[3038,3042]},{"content":"Description","pos":[3043,3054]},{"pos":[3092,3123],"content":"<bpt id=\"p1\">[</bpt>texture::rank Constant<ept id=\"p1\">](#rank)</ept>","source":"[texture::rank Constant](#rank)"},{"pos":[3124,3180],"content":"Gets the rank of the <bpt id=\"p1\">[</bpt>texture<ept id=\"p1\">](texture-class.md)</ept> object.","source":"Gets the rank of the [texture](texture-class.md) object."},{"pos":[3191,3210],"content":"Public Data Members","linkify":"Public Data Members","nodes":[{"content":"Public Data Members","pos":[0,19]}]},{"content":"Name","pos":[3217,3221]},{"content":"Description","pos":[3222,3233]},{"pos":[3271,3351],"content":"<bpt id=\"p1\">[</bpt>texture::associated_accelerator_view Data Member<ept id=\"p1\">](#associated_accelerator_view)</ept>","source":"[texture::associated_accelerator_view Data Member](#associated_accelerator_view)"},{"pos":[3352,3469],"content":"Gets the <bpt id=\"p1\">[</bpt>accelerator_view<ept id=\"p1\">](accelerator-view-class.md)</ept> that is the preferred target for this texture to be copied to.","source":"Gets the [accelerator_view](accelerator-view-class.md) that is the preferred target for this texture to be copied to."},{"pos":[3474,3522],"content":"<bpt id=\"p1\">[</bpt>texture::depth_pitch Data Member<ept id=\"p1\">](#depth_pitch)</ept>","source":"[texture::depth_pitch Data Member](#depth_pitch)"},{"content":"Gets the number of bytes between each depth slice in a 3D staging texture on the CPU.","pos":[3523,3608]},{"pos":[3613,3657],"content":"<bpt id=\"p1\">[</bpt>texture::row_pitch Data Member<ept id=\"p1\">](#row_pitch)</ept>","source":"[texture::row_pitch Data Member](#row_pitch)"},{"content":"Gets the number of bytes between each row in a 2D or 3D staging texture on the CPU.","pos":[3658,3741]},{"pos":[3751,3772],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[3816,3828],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3832,3858],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> amp_graphics.h","source":"**Header:** amp_graphics.h"},{"pos":[3865,3901],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> Concurrency::graphics","source":"**Namespace:** Concurrency::graphics"},{"pos":[3911,3960],"content":"<bpt id=\"p1\">&lt;a name=\"dtor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  texture::~texture Destructor","linkify":"<a name=\"dtor\"></a>  texture::~texture Destructor","source":"<a name=\"dtor\"></a>  texture::~texture Destructor"},{"pos":[3964,4012],"content":"Destroys the <bpt id=\"p1\">[</bpt>texture<ept id=\"p1\">](texture-class.md)</ept> object.","source":"Destroys the [texture](texture-class.md) object."},{"pos":[4063,4155],"content":"<bpt id=\"p1\">&lt;a name=\"associated_accelerator_view\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  texture::associated_accelerator_view Data Member","linkify":"<a name=\"associated_accelerator_view\"></a>  texture::associated_accelerator_view Data Member","source":"<a name=\"associated_accelerator_view\"></a>  texture::associated_accelerator_view Data Member"},{"pos":[4159,4276],"content":"Gets the <bpt id=\"p1\">[</bpt>accelerator_view<ept id=\"p1\">](accelerator-view-class.md)</ept> that is the preferred target for this texture to be copied to.","source":"Gets the [accelerator_view](accelerator-view-class.md) that is the preferred target for this texture to be copied to."},{"pos":[4421,4468],"content":"<bpt id=\"p1\">&lt;a name=\"copy_to\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  texture::copy_to Method","linkify":"<a name=\"copy_to\"></a>  texture::copy_to Method","source":"<a name=\"copy_to\"></a>  texture::copy_to Method"},{"pos":[4472,4559],"content":"Copies the <bpt id=\"p1\">[</bpt>texture<ept id=\"p1\">](texture-class.md)</ept> object to the destination, by doing a deep copy.","source":"Copies the [texture](texture-class.md) object to the destination, by doing a deep copy."},{"pos":[4708,4718],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The object to copy to.","pos":[4733,4755]},{"content":"The rank of the texture.","pos":[4773,4797]},{"content":"The type of the elements in the texture.","pos":[4820,4860]},{"pos":[4870,4911],"content":"<bpt id=\"p1\">&lt;a name=\"data\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  texture::data Method","linkify":"<a name=\"data\"></a>  texture::data Method","source":"<a name=\"data\"></a>  texture::data Method"},{"content":"Returns a CPU pointer to the raw data of this texture.","pos":[4915,4969]},{"pos":[5065,5077],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the raw data of the texture.","pos":[5081,5122]},{"pos":[5132,5192],"content":"<bpt id=\"p1\">&lt;a name=\"depth_pitch\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  texture::depth_pitch Data Member","linkify":"<a name=\"depth_pitch\"></a>  texture::depth_pitch Data Member","source":"<a name=\"depth_pitch\"></a>  texture::depth_pitch Data Member"},{"content":"Gets the number of bytes between each depth slice in a 3D staging texture on the CPU.","pos":[5196,5281]},{"pos":[5377,5416],"content":"<bpt id=\"p1\">&lt;a name=\"get\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  texture::get Method","linkify":"<a name=\"get\"></a>  texture::get Method","source":"<a name=\"get\"></a>  texture::get Method"},{"content":"Returns the value of the element at the specified index.","pos":[5420,5476]},{"pos":[5571,5581],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The index of the element.","pos":[5597,5622]},{"pos":[5632,5644],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value of the element at the specified index.","pos":[5648,5696]},{"pos":[5706,5801],"content":"<bpt id=\"p1\">&lt;a name=\"get_associated_accelerator_view\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  texture::get_associated_accelerator_view Method","linkify":"<a name=\"get_associated_accelerator_view\"></a>  texture::get_associated_accelerator_view Method","source":"<a name=\"get_associated_accelerator_view\"></a>  texture::get_associated_accelerator_view Method"},{"content":"Returns the accelerator_view that is the preferred target for this texture to be copied to.","pos":[5805,5896]},{"pos":[6006,6018],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6022,6134],"content":"The <bpt id=\"p1\">[</bpt>accelerator_view<ept id=\"p1\">](accelerator-view-class.md)</ept> that is the preferred target for this texture to be copied to.","source":"The [accelerator_view](accelerator-view-class.md) that is the preferred target for this texture to be copied to."},{"pos":[6144,6207],"content":"<bpt id=\"p1\">&lt;a name=\"get_depth_pitch\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  texture::get_depth_pitch Method","linkify":"<a name=\"get_depth_pitch\"></a>  texture::get_depth_pitch Method","source":"<a name=\"get_depth_pitch\"></a>  texture::get_depth_pitch Method"},{"content":"Returns the number of bytes between each depth slice in a 3D staging texture on the CPU.","pos":[6211,6299]},{"pos":[6376,6388],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of bytes between each depth slice in a 3D staging texture on the CPU.","pos":[6392,6472]},{"pos":[6482,6541],"content":"<bpt id=\"p1\">&lt;a name=\"get_row_pitch\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  texture::get_row_pitch Method","linkify":"<a name=\"get_row_pitch\"></a>  texture::get_row_pitch Method","source":"<a name=\"get_row_pitch\"></a>  texture::get_row_pitch Method"},{"content":"Returns the number of bytes between each row in a 2-dimensional staging texture, or between each row of a depth slice in 3-dimensional staging texture.","pos":[6545,6696]},{"pos":[6771,6783],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of bytes between each row in a 2-dimensional staging texture, or between each row of a depth slice in 3-dimensional staging texture.","pos":[6787,6930]},{"pos":[6940,7007],"content":"<bpt id=\"p1\">&lt;a name=\"texture__operator_call\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  texture::operator() Operator","linkify":"<a name=\"texture__operator_call\"></a>  texture::operator() Operator","source":"<a name=\"texture__operator_call\"></a>  texture::operator() Operator"},{"content":"Returns the element value that is specified by the parameters.","pos":[7011,7073]},{"pos":[7427,7437],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The index.","pos":[7453,7463]},{"content":"The most-significant component of the index.","pos":[7479,7523]},{"content":"The next-to-most-significant component of the index.","pos":[7539,7591]},{"content":"The least-significant component of the index.","pos":[7607,7652]},{"content":"The rank of the index.","pos":[7670,7692]},{"pos":[7702,7714],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The element value that is specified by the parameters.","pos":[7718,7772]},{"pos":[7782,7847],"content":"<bpt id=\"p1\">&lt;a name=\"texture__operator_at\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  texture::operator[] Operator","linkify":"<a name=\"texture__operator_at\"></a>  texture::operator[] Operator","source":"<a name=\"texture__operator_at\"></a>  texture::operator[] Operator"},{"content":"Returns the element that is at the specified index.","pos":[7851,7902]},{"pos":[8067,8077],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The index.","pos":[8093,8103]},{"content":"The index.","pos":[8119,8129]},{"pos":[8139,8151],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The element that is at the specified index.","pos":[8155,8198]},{"pos":[8208,8272],"content":"<bpt id=\"p1\">&lt;a name=\"texture__operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  texture::operator= Operator","linkify":"<a name=\"texture__operator_eq\"></a>  texture::operator= Operator","source":"<a name=\"texture__operator_eq\"></a>  texture::operator= Operator"},{"pos":[8276,8344],"content":"Copies the specified <bpt id=\"p1\">[</bpt>texture<ept id=\"p1\">](texture-class.md)</ept> object to this one.","source":"Copies the specified [texture](texture-class.md) object to this one."},{"pos":[8484,8494],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <bpt id=\"p1\">[</bpt>texture<ept id=\"p1\">](texture-class.md)</ept> object to copy from.","pos":[8510,8562],"source":" The [texture](texture-class.md) object to copy from."},{"pos":[8572,8584],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8588,8643],"content":"A reference to this <bpt id=\"p1\">[</bpt>texture<ept id=\"p1\">](texture-class.md)</ept> object.","source":"A reference to this [texture](texture-class.md) object."},{"pos":[8653,8696],"content":"<bpt id=\"p1\">&lt;a name=\"rank\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  texture::rank Constant","linkify":"<a name=\"rank\"></a>  texture::rank Constant","source":"<a name=\"rank\"></a>  texture::rank Constant"},{"pos":[8700,8756],"content":"Gets the rank of the <bpt id=\"p1\">[</bpt>texture<ept id=\"p1\">](texture-class.md)</ept> object.","source":"Gets the rank of the [texture](texture-class.md) object."},{"pos":[8814,8870],"content":"<bpt id=\"p1\">&lt;a name=\"row_pitch\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  texture::row_pitch Data Member","linkify":"<a name=\"row_pitch\"></a>  texture::row_pitch Data Member","source":"<a name=\"row_pitch\"></a>  texture::row_pitch Data Member"},{"content":"Gets the number of bytes between each row in a 2D or 3D staging texture on the CPU.","pos":[8874,8957]},{"pos":[9049,9088],"content":"<bpt id=\"p1\">&lt;a name=\"set\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  texture::set Method","linkify":"<a name=\"set\"></a>  texture::set Method","source":"<a name=\"set\"></a>  texture::set Method"},{"content":"Sets the value of the element at the specified index.","pos":[9092,9145]},{"pos":[9258,9268],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The index of the element.","pos":[9284,9309]},{"content":"The rank of the index.","pos":[9327,9349]},{"content":"The new value of the element.","pos":[9367,9396]},{"pos":[9406,9455],"content":"<bpt id=\"p1\">&lt;a name=\"ctor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  texture::texture Constructor","linkify":"<a name=\"ctor\"></a>  texture::texture Constructor","source":"<a name=\"ctor\"></a>  texture::texture Constructor"},{"pos":[9459,9527],"content":"Initializes a new instance of the <bpt id=\"p1\">[</bpt>texture<ept id=\"p1\">](texture-class.md)</ept> class.","source":"Initializes a new instance of the [texture](texture-class.md) class."},{"pos":[14396,14406],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <bpt id=\"p1\">[</bpt>accelerator_view<ept id=\"p1\">](accelerator-view-class.md)</ept> that specifies the location of the texture.","pos":[14425,14518],"source":" The [accelerator_view](accelerator-view-class.md) that specifies the location of the texture."},{"content":"The <bpt id=\"p1\">[</bpt>accelerator_view<ept id=\"p1\">](accelerator-view-class.md)</ept> that specifies the location of the texture.","pos":[14534,14627],"source":" The [accelerator_view](accelerator-view-class.md) that specifies the location of the texture."},{"content":"An accelerator_view that specifies the preferred target for copies to or from this texture.","pos":[14654,14745]},{"content":"The number of bits per each scalar element in the underlying scalar type of the texture.","pos":[14782,14870]},{"content":"In general, supported value are 8, 16, 32, and 64.","pos":[14871,14921]},{"content":"If 0 is specified, the number of bits is the same as the underlying scalar_type.","pos":[14922,15002]},{"content":"64 is only valid for double-based textures.","pos":[15003,15046]},{"content":"The extent in each dimension of the texture.","pos":[15063,15107]},{"content":"The most significant component of the texture.","pos":[15123,15169]},{"content":"The next-to-most-significant component of the texture.","pos":[15185,15239]},{"content":"The least significant component of the extent of the texture.","pos":[15255,15316]},{"content":"The type of the input interator.","pos":[15344,15376]},{"content":"The number of mipmap levels in the underlying texture.","pos":[15403,15457]},{"content":"If 0 is specified, the texture will have the full range of mipmap levels down to the smallest possible size for the specified extent.","pos":[15458,15591]},{"content":"The rank of the extent.","pos":[15609,15632]},{"content":"A pointer to a host buffer.","pos":[15652,15679]},{"content":"To texture to copy.","pos":[15696,15715]},{"content":"The number of bytes in the source buffer.","pos":[15742,15783]},{"content":"A beginning iterator into the source container.","pos":[15806,15853]},{"content":"An ending iterator into the source container.","pos":[15875,15920]},{"content":"Other data source.","pos":[15939,15957]},{"content":"The rank of the section.","pos":[15975,15999]},{"pos":[16008,16016],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[16020,16088],"content":"<bpt id=\"p1\">[</bpt>Concurrency::graphics Namespace<ept id=\"p1\">](concurrency-graphics-namespace.md)</ept>","source":"[Concurrency::graphics Namespace](concurrency-graphics-namespace.md)"}],"content":"---\ntitle: \"texture Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"amp_graphics/Concurrency::graphics::texture\"\ndev_langs: \n  - \"C++\"\nms.assetid: 16e85d4d-e80a-474a-995d-8bf63fbdf34c\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# texture Class\nA texture is a data aggregate on an `accelerator_view` in the extent domain. It is a collection of variables, one for each element in an extent domain. Each variable holds a value corresponding to C++ primitive type ( `unsigned int`, `int`, `float`, `double`), a scalar type ( `norm`, or `unorm`), or a short vector type.  \n  \n## Syntax  \n  \n```  \ntemplate <\n    typename value_type,  \n    int _Rank  \n>  \nclass texture;  \n```  \n  \n#### Parameters  \n `value_type`  \n The type of the elements in the texture.  \n  \n `_Rank`  \n The rank of the texture.  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`scalar_type`|Scalar types.|  \n|`value_type`|Value types.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[texture::texture Constructor](#ctor)|Initializes a new instance of the [texture](texture-class.md) class.|  \n|[texture::~texture Destructor](#ctor)|Destroys the [texture](texture-class.md) object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[texture::copy_to Method](#copy_to)|Copies the [texture](texture-class.md) object to the destination, by doing a deep copy.|  \n|[texture::data Method](#data)|Returns a CPU pointer to the raw data of this texture.|  \n|[texture::get Method](#get)|Returns the value of the element at the specified index.|  \n|[texture::get_associated_accelerator_view Method](#get_associated_accelerator_view)|Returns the [accelerator_view](accelerator-view-class.md) that is the preferred target for this texture to be copied to.|  \n|[texture::get_depth_pitch Method](#get_depth_pitch)|Returns the number of bytes between each depth slice in a 3D staging texture on the CPU.|  \n|[texture::get_row_pitch Method](#get_row_pitch)|Returns the number of bytes between each row in a 2D or 3D staging texture on the CPU.|  \n|[texture::set Method](#set)|Sets the value of the element at the specified index.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[texture::operator() Operator](#texture__operator_call)|Returns the element value that is specified by the parameters.|  \n|[texture::operator[] Operator](#texture__operator_at)|Returns the element that is at the specified index.|  \n|[texture::operator= Operator](#texture__operator_eq)|Copies the specified [texture](texture-class.md) object to this one.|  \n  \n### Public Constants  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[texture::rank Constant](#rank)|Gets the rank of the [texture](texture-class.md) object.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[texture::associated_accelerator_view Data Member](#associated_accelerator_view)|Gets the [accelerator_view](accelerator-view-class.md) that is the preferred target for this texture to be copied to.|  \n|[texture::depth_pitch Data Member](#depth_pitch)|Gets the number of bytes between each depth slice in a 3D staging texture on the CPU.|  \n|[texture::row_pitch Data Member](#row_pitch)|Gets the number of bytes between each row in a 2D or 3D staging texture on the CPU.|  \n  \n## Inheritance Hierarchy  \n `_Texture_base`  \n  \n `texture`  \n  \n## Requirements  \n **Header:** amp_graphics.h  \n  \n **Namespace:** Concurrency::graphics  \n  \n##  <a name=\"dtor\"></a>  texture::~texture Destructor  \n Destroys the [texture](texture-class.md) object.  \n  \n```  \n~texture() restrict(cpu);\n```  \n  \n##  <a name=\"associated_accelerator_view\"></a>  texture::associated_accelerator_view Data Member  \n Gets the [accelerator_view](accelerator-view-class.md) that is the preferred target for this texture to be copied to.  \n  \n```  \n__declspec(property(get= get_associated_accelerator_view)) Concurrency::accelerator_view associated_accelerator_view;  \n```  \n  \n##  <a name=\"copy_to\"></a>  texture::copy_to Method  \n Copies the [texture](texture-class.md) object to the destination, by doing a deep copy.  \n  \n```  \nvoid copy_to(\n    texture& _Dest) const;\n\n \n \nvoid copy_to(\n    writeonly_texture_view<value_type, _Rank>& _Dest) const;\n\n \n```  \n  \n### Parameters  \n `_Dest`  \n The object to copy to.  \n  \n `_Rank`  \n The rank of the texture.  \n  \n `value_type`  \n The type of the elements in the texture.  \n  \n##  <a name=\"data\"></a>  texture::data Method  \n Returns a CPU pointer to the raw data of this texture.  \n  \n```  \nvoid* data() restrict(cpu);\n\n \nconst void* data() const restrict(cpu);\n```  \n  \n### Return Value  \n A pointer to the raw data of the texture.  \n  \n##  <a name=\"depth_pitch\"></a>  texture::depth_pitch Data Member  \n Gets the number of bytes between each depth slice in a 3D staging texture on the CPU.  \n  \n```  \n__declspec(property(get= get_depth_pitch)) unsigned int depth_pitch;  \n```  \n  \n##  <a name=\"get\"></a>  texture::get Method  \n Returns the value of the element at the specified index.  \n  \n```  \nconst value_type get(const index<_Rank>& _Index) const restrict(amp);\n```  \n  \n### Parameters  \n `_Index`  \n The index of the element.  \n  \n### Return Value  \n The value of the element at the specified index.  \n  \n##  <a name=\"get_associated_accelerator_view\"></a>  texture::get_associated_accelerator_view Method  \n Returns the accelerator_view that is the preferred target for this texture to be copied to.  \n  \n```  \nConcurrency::accelerator_view get_associated_accelerator_view() const restrict(cpu);\n```  \n  \n### Return Value  \n The [accelerator_view](accelerator-view-class.md) that is the preferred target for this texture to be copied to.  \n  \n##  <a name=\"get_depth_pitch\"></a>  texture::get_depth_pitch Method  \n Returns the number of bytes between each depth slice in a 3D staging texture on the CPU.  \n  \n```  \nunsigned int get_depth_pitch() const restrict(cpu);\n```  \n  \n### Return Value  \n The number of bytes between each depth slice in a 3D staging texture on the CPU.  \n  \n##  <a name=\"get_row_pitch\"></a>  texture::get_row_pitch Method  \n Returns the number of bytes between each row in a 2-dimensional staging texture, or between each row of a depth slice in 3-dimensional staging texture.  \n  \n```  \nunsigned int get_row_pitch() const restrict(cpu);\n```  \n  \n### Return Value  \n The number of bytes between each row in a 2-dimensional staging texture, or between each row of a depth slice in 3-dimensional staging texture.  \n  \n##  <a name=\"texture__operator_call\"></a>  texture::operator() Operator  \n Returns the element value that is specified by the parameters.  \n  \n```  \nconst value_type operator() (\n    const index<_Rank>& _Index) const restrict(amp);\n\n \nconst value_type operator() (\n    int _I0) const restrict(amp);\n\n \nconst value_type operator() (\n    int _I0,  \n    int _I1) const restrict(amp);\n\n \nconst value_type operator() (\n    int _I0,  \n    int _I1,  \n    int _I2) const restrict(amp);\n```  \n  \n### Parameters  \n `_Index`  \n The index.  \n  \n `_I0`  \n The most-significant component of the index.  \n  \n `_I1`  \n The next-to-most-significant component of the index.  \n  \n `_I2`  \n The least-significant component of the index.  \n  \n `_Rank`  \n The rank of the index.  \n  \n### Return Value  \n The element value that is specified by the parameters.  \n  \n##  <a name=\"texture__operator_at\"></a>  texture::operator[] Operator  \n Returns the element that is at the specified index.  \n  \n```  \nconst value_type operator[] (const index<_Rank>& _Index) const restrict(amp);\n\n \nconst value_type operator[] (int _I0) const restrict(amp);\n```  \n  \n### Parameters  \n `_Index`  \n The index.  \n  \n `_I0`  \n The index.  \n  \n### Return Value  \n The element that is at the specified index.  \n  \n##  <a name=\"texture__operator_eq\"></a>  texture::operator= Operator  \n Copies the specified [texture](texture-class.md) object to this one.  \n  \n```  \ntexture& operator= (\n    const texture& _Other);\n\n \ntexture& operator= (\n    texture<value_type, _Rank>&& _Other);\n```  \n  \n### Parameters  \n `_Other`  \n The [texture](texture-class.md) object to copy from.  \n  \n### Return Value  \n A reference to this [texture](texture-class.md) object.  \n  \n##  <a name=\"rank\"></a>  texture::rank Constant  \n Gets the rank of the [texture](texture-class.md) object.  \n  \n```  \nstatic const int rank = _Rank;  \n```  \n  \n##  <a name=\"row_pitch\"></a>  texture::row_pitch Data Member  \n Gets the number of bytes between each row in a 2D or 3D staging texture on the CPU.  \n  \n```  \n__declspec(property(get= get_row_pitch)) unsigned int row_pitch;  \n```  \n  \n##  <a name=\"set\"></a>  texture::set Method  \n Sets the value of the element at the specified index.  \n  \n```  \nvoid set(\n    const index<_Rank>& _Index,  \n    const value_type& value) restrict(amp);\n```  \n  \n### Parameters  \n `_Index`  \n The index of the element.  \n  \n `_Rank`  \n The rank of the index.  \n  \n `value`  \n The new value of the element.  \n  \n##  <a name=\"ctor\"></a>  texture::texture Constructor  \n Initializes a new instance of the [texture](texture-class.md) class.  \n  \n```  \ntexture(\n    const Concurrency::extent<_Rank>& _Ext) restrict(cpu);\n\n \ntexture(\n    int _E0) restrict(cpu);\n\n \ntexture(\n    int _E0,  \n    int _E1) restrict(cpu);\n\n \ntexture(\n    int _E0,  \n    int _E1,  \n    int _E2) restrict(cpu);\n\n \ntexture(\n    const Concurrency::extent<_Rank>& _Ext,  \n    const Concurrency::accelerator_view& _Av) restrict(cpu);\n\n \ntexture(\n    int _E0,  \n    const Concurrency::accelerator_view& _Av) restrict(cpu);\n\n \ntexture(\n    int _E0,  \n    int _E1,  \n    const Concurrency::accelerator_view& _Av) restrict(cpu);\n\n \ntexture(\n    int _E0,  \n    int _E1,  \n    int _E2,  \n    const Concurrency::accelerator_view& _Av) restrict(cpu);\n\n \ntemplate<\n    typename _Input_iterator  \n>  \ntexture(\n    const Concurrency::extent<_Rank>& _Ext, _Input_iterator _Src_first, _Input_iterator _Src_last) restrict(cpu);\n\n \ntemplate<\n    typename _Input_iterator  \n>  \ntexture(\n    int _E0, _Input_iterator _Src_first, _Input_iterator _Src_last) restrict(cpu);\n\n \ntemplate<\n    typename _Input_iterator  \n>  \ntexture(\n    int _E0,  \n    int _E1, _Input_iterator _Src_first, _Input_iterator _Src_last) restrict(cpu);\n\n \ntemplate<\n    typename _Input_iterator  \n>  \ntexture(\n    int _E0,  \n    int _E1,  \n    int _E2, _Input_iterator _Src_first, _Input_iterator _Src_last) restrict(cpu);\n\n \ntemplate<\n    typename _Input_iterator  \n>  \ntexture(\n    const Concurrency::extent<_Rank>& _Ext, _Input_iterator _Src_first, _Input_iterator _Src_last,  \n    const Concurrency::accelerator_view& _Av) restrict(cpu);\n\n \ntemplate<\n    typename _Input_iterator  \n>  \ntexture(\n    int _E0, _Input_iterator _Src_first, _Input_iterator _Src_last,  \n    const Concurrency::accelerator_view& _Av) restrict(cpu);\n\n \ntemplate<\n    typename _Input_iterator  \n>  \ntexture(\n    int _E0,  \n    int _E1, _Input_iterator _Src_first, _Input_iterator _Src_last,  \n    const Concurrency::accelerator_view& _Av) restrict(cpu);\n\n \ntemplate<\n    typename _Input_iterator  \n>  \ntexture(\n    int _E0,  \n    int _E1,  \n    int _E2, _Input_iterator _Src_first, _Input_iterator _Src_last,  \n    const Concurrency::accelerator_view& _Av) restrict(cpu))  ;  \n \ntexture(\n    int _E0,  \n    unsigned int _Bits_per_scalar_element) restrict(cpu);\n\n \ntexture(\n    int _E0,  \n    int _E1,  \n    unsigned int _Bits_per_scalar_element) restrict(cpu);\n\n \ntexture(\n    int _E0,  \n    int _E1,  \n    int _E2,  \n    unsigned int _Bits_per_scalar_element) restrict(cpu);\n\n \ntexture(\n    const Concurrency::extent<_Rank>& _Ext,  \n    unsigned int _Bits_per_scalar_element,  \n    const Concurrency::accelerator_view& _Av) restrict(cpu);\n\n \ntexture(\n    int _E0,  \n    unsigned int _Bits_per_scalar_element,  \n    const Concurrency::accelerator_view& _Av)  ;  \n \ntexture(\n    int _E0,  \n    int _E1,  \n    unsigned int _Bits_per_scalar_element,  \n    const Concurrency::accelerator_view& _Av) restrict(cpu);\n\n \ntexture(\n    int _E0,  \n    int _E1,  \n    int _E2,  \n    unsigned int _Bits_per_scalar_element,  \n    const Concurrency::accelerator_view& _Av) restrict(cpu);\n\n \ntexture(\n    const Concurrency::extent<_Rank>& _Ext,  \n    _In_ void* _Source,  \n    unsigned int _Src_byte_size,  \n    unsigned int _Bits_per_scalar_element) restrict(cpu);\n\n \ntexture(\n    int _E0,  \n    _In_ void* _Source,  \n    unsigned int _Src_byte_size,  \n    unsigned int _Bits_per_scalar_element) restrict(cpu);\n\n \ntexture(\n    int _E0,  \n    int _E1,  \n    _In_ void* _Source,  \n    unsigned int _Src_byte_size,  \n    unsigned int _Bits_per_scalar_element) restrict(cpu);\n\n \ntexture(\n    int _E0,  \n    int _E1,  \n    int _E2,  \n    _In_ void* _Source,  \n    unsigned int _Src_byte_size,  \n    unsigned int _Bits_per_scalar_element) restrict(cpu);\n\n \ntexture(\n    const Concurrency::extent<_Rank>& _Ext,  \n    _In_ void* _Source,  \n    unsigned int _Src_byte_size,  \n    unsigned int _Bits_per_scalar_element,  \n    const Concurrency::accelerator_view& _Av)  ;  \n \ntexture(\n    int _E0,  \n    _In_ void* _Source,  \n    unsigned int _Src_byte_size,  \n    unsigned int _Bits_per_scalar_element,  \n    const Concurrency::accelerator_view& _Av) restrict(cpu);\n\n \ntexture(\n    int _E0,  \n    int _E1,  \n    _In_ void* _Source,  \n    unsigned int _Src_byte_size,  \n    unsigned int _Bits_per_scalar_element,  \n    const Concurrency::accelerator_view& _Av) restrict(cpu);\n\n \ntexture(\n    int _E0,  \n    int _E1,  \n    int _E2,  \n    _In_ void* _Source,  \n    unsigned int _Src_byte_size,  \n    unsigned int _Bits_per_scalar_element,  \n    const Concurrency::accelerator_view& _Av) restrict(cpu);\n\n \ntexture(\n    const texture& _Src,  \n    const Concurrency::accelerator_view& _Acc_view);\n\n \ntexture(\n    texture&& _Other);\n\n \ntexture(\n    const Concurrency::extent<_Rank>& _Ext,   \n    unsigned int _Bits_per_scalar_element,   \n    const Concurrency::accelerator_view& _Av);\n\n \ntexture(\n    const texture& _Src);\n```  \n  \n### Parameters  \n `_Acc_view`  \n The [accelerator_view](accelerator-view-class.md) that specifies the location of the texture.  \n  \n `_Av`  \n The [accelerator_view](accelerator-view-class.md) that specifies the location of the texture.  \n  \n `_Associated_av`  \n An accelerator_view that specifies the preferred target for copies to or from this texture.  \n  \n `_Bits_per_scalar_element`  \n The number of bits per each scalar element in the underlying scalar type of the texture. In general, supported value are 8, 16, 32, and 64. If 0 is specified, the number of bits is the same as the underlying scalar_type. 64 is only valid for double-based textures.  \n  \n `_Ext`  \n The extent in each dimension of the texture.  \n  \n `_E0`  \n The most significant component of the texture.  \n  \n `_E1`  \n The next-to-most-significant component of the texture.  \n  \n `_E2`  \n The least significant component of the extent of the texture.  \n  \n `_Input_iterator`  \n The type of the input interator.  \n  \n `_Mipmap_levels`  \n The number of mipmap levels in the underlying texture. If 0 is specified, the texture will have the full range of mipmap levels down to the smallest possible size for the specified extent.  \n  \n `_Rank`  \n The rank of the extent.  \n  \n `_Source`  \n A pointer to a host buffer.  \n  \n `_Src`  \n To texture to copy.  \n  \n `_Src_byte_size`  \n The number of bytes in the source buffer.  \n  \n `_Src_first`  \n A beginning iterator into the source container.  \n  \n `_Src_last`  \n An ending iterator into the source container.  \n  \n `_Other`  \n Other data source.  \n  \n `_Rank`  \n The rank of the section.  \n  \n## See Also  \n [Concurrency::graphics Namespace](concurrency-graphics-namespace.md)\n"}