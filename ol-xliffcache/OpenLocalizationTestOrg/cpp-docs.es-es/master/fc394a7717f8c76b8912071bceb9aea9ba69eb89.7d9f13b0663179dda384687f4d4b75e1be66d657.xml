{"nodes":[{"pos":[12,39],"content":"lock::lock | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"lock::lock | Microsoft Docs","pos":[0,27]}]},{"content":"lock::lock","pos":[660,670]},{"pos":[671,793],"content":"Constructs a <ph id=\"ph1\">`lock`</ph> object, optionally waiting to acquire the lock forever, for a specified amount of time, or not at all.","source":"Constructs a `lock` object, optionally waiting to acquire the lock forever, for a specified amount of time, or not at all."},{"content":"Syntax","pos":[802,808]},{"content":"Parameters","pos":[1094,1104]},{"content":"The object to be locked.","pos":[1121,1145]},{"content":"Timeout value in milliseconds or as a &lt;xref:System.TimeSpan&gt;.","pos":[1166,1227],"source":" Timeout value in milliseconds or as a <xref:System.TimeSpan>."},{"content":"Exceptions","pos":[1236,1246]},{"content":"Throws &lt;xref:System.ApplicationException&gt; if lock acquisition does not occur before timeout.","pos":[1250,1342],"source":"Throws <xref:System.ApplicationException> if lock acquisition does not occur before timeout."},{"content":"Remarks","pos":[1351,1358]},{"pos":[1362,1545],"content":"The first three forms of the constructor attempt to acquire a lock on <ph id=\"ph1\">`_object`</ph> within the specified timeout period (or &lt;xref:System.Threading.Timeout.Infinite&gt; if none is specified).","source":"The first three forms of the constructor attempt to acquire a lock on `_object` within the specified timeout period (or <xref:System.Threading.Timeout.Infinite> if none is specified)."},{"content":"The fourth form of the constructor does not acquire a lock on <ph id=\"ph1\">`_object`</ph>.","pos":[1552,1624],"source":"The fourth form of the constructor does not acquire a lock on `_object`."},{"content":"is a member of the <bpt id=\"p1\">[</bpt>lock_when Enum<ept id=\"p1\">](../dotnet/lock-when-enum.md)</ept>.","pos":[1638,1703],"source":" is a member of the [lock_when Enum](../dotnet/lock-when-enum.md)."},{"content":"Use <bpt id=\"p1\">[</bpt>lock::acquire<ept id=\"p1\">](../dotnet/lock-acquire.md)</ept> or <bpt id=\"p2\">[</bpt>lock::try_acquire<ept id=\"p2\">](../dotnet/lock-try-acquire.md)</ept> to acquire the lock in this case.","pos":[1704,1838],"source":" Use [lock::acquire](../dotnet/lock-acquire.md) or [lock::try_acquire](../dotnet/lock-try-acquire.md) to acquire the lock in this case."},{"content":"The lock will automatically be released when the destructor is called.","pos":[1845,1915]},{"content":"cannot be &lt;xref:System.Threading.ReaderWriterLock&gt;.","pos":[1932,1983],"source":" cannot be <xref:System.Threading.ReaderWriterLock>."},{"content":"If it is, a compiler error will result.","pos":[1985,2024]},{"content":"Example","pos":[2033,2040]},{"content":"This example uses a single instance of a class across multiple threads.","pos":[2044,2115]},{"content":"The class uses a lock on itself to ensure that accesses to its internal data are consistent for each thread.","pos":[2117,2225]},{"content":"The main application thread uses a lock on the same instance of the class to periodically check to see if any worker threads still exist, and waits to exit until all worker threads have completed their tasks.","pos":[2227,2435]},{"content":"Requirements","pos":[4950,4962]},{"pos":[4966,4997],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>msclr\\lock.h&gt;","source":"**Header file** \\<msclr\\lock.h>"},{"pos":[5004,5023],"content":"<bpt id=\"p1\">**</bpt>Namespace<ept id=\"p1\">**</ept> msclr","source":"**Namespace** msclr"},{"content":"See Also","pos":[5032,5040]},{"content":"lock Members","pos":[5045,5057]},{"content":"lock::~lock","pos":[5091,5102]},{"content":"lock::acquire","pos":[5139,5152]},{"content":"lock::try_acquire","pos":[5186,5203]}],"content":"---\ntitle: \"lock::lock | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"lock::lock\"\n  - \"lock.lock\"\n  - \"msclr.lock.lock\"\n  - \"msclr::lock::lock\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"lock constructor\"\nms.assetid: c9ad6c71-36ec-49c5-8ebd-f5c3a0cc94f0\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# lock::lock\nConstructs a `lock` object, optionally waiting to acquire the lock forever, for a specified amount of time, or not at all.  \n  \n## Syntax  \n  \n```  \ntemplate<class T> lock(  \n   T ^ _object  \n);  \ntemplate<class T> lock(  \n   T ^ _object,  \n   int _timeout  \n);  \ntemplate<class T> lock(  \n   T ^ _object,  \n   System::TimeSpan _timeout  \n);  \ntemplate<class T> lock(  \n   T ^ _object,  \n   lock_later  \n);  \n```  \n  \n#### Parameters  \n `_object`  \n The object to be locked.  \n  \n `_timeout`  \n Timeout value in milliseconds or as a <xref:System.TimeSpan>.  \n  \n## Exceptions  \n Throws <xref:System.ApplicationException> if lock acquisition does not occur before timeout.  \n  \n## Remarks  \n The first three forms of the constructor attempt to acquire a lock on `_object` within the specified timeout period (or <xref:System.Threading.Timeout.Infinite> if none is specified).  \n  \n The fourth form of the constructor does not acquire a lock on `_object`. `lock_later` is a member of the [lock_when Enum](../dotnet/lock-when-enum.md). Use [lock::acquire](../dotnet/lock-acquire.md) or [lock::try_acquire](../dotnet/lock-try-acquire.md) to acquire the lock in this case.  \n  \n The lock will automatically be released when the destructor is called.  \n  \n `_object` cannot be <xref:System.Threading.ReaderWriterLock>.  If it is, a compiler error will result.  \n  \n## Example  \n This example uses a single instance of a class across multiple threads.  The class uses a lock on itself to ensure that accesses to its internal data are consistent for each thread.  The main application thread uses a lock on the same instance of the class to periodically check to see if any worker threads still exist, and waits to exit until all worker threads have completed their tasks.  \n  \n```  \n// msl_lock_lock.cpp  \n// compile with: /clr  \n#include <msclr/lock.h>  \n  \nusing namespace System;  \nusing namespace System::Threading;  \nusing namespace msclr;  \n  \nref class CounterClass {  \nprivate:  \n   int Counter;     \n  \npublic:  \n   property int ThreadCount;  \n  \n   // function called by multiple threads, use lock to keep Counter consistent  \n   // for each thread  \n   void UseCounter() {  \n      try {  \n         lock l(this); // wait infinitely  \n  \n         Console::WriteLine(\"In thread {0}, Counter = {1}\", Thread::CurrentThread->ManagedThreadId,   \n            Counter);  \n  \n         for (int i = 0; i < 10; i++) {  \n            Counter++;  \n            Thread::Sleep(10);  \n         }  \n  \n         Console::WriteLine(\"In thread {0}, Counter = {1}\", Thread::CurrentThread->ManagedThreadId,   \n            Counter);  \n  \n         Counter = 0;  \n         // lock is automatically released when it goes out of scope and its destructor is called  \n      }  \n      catch (...) {  \n         Console::WriteLine(\"Couldn't acquire lock!\");  \n      }  \n  \n      ThreadCount--;  \n   }  \n};  \n  \nint main() {  \n   // create a few threads to contend for access to the shared data  \n   CounterClass^ cc = gcnew CounterClass;  \n   array<Thread^>^ tarr = gcnew array<Thread^>(5);  \n   ThreadStart^ startDelegate = gcnew ThreadStart(cc, &CounterClass::UseCounter);  \n   for (int i = 0; i < tarr->Length; i++) {  \n      tarr[i] = gcnew Thread(startDelegate);  \n      cc->ThreadCount++;  \n      tarr[i]->Start();  \n   }  \n  \n   // keep our main thread alive until all worker threads have completed  \n   lock l(cc, lock_later); // don't lock now, just create the object  \n   while (true) {  \n      if (l.try_acquire(50)) { // try to acquire lock, don't throw an exception if can't  \n         if (0 == cc->ThreadCount) {  \n            Console::WriteLine(\"All threads completed.\");  \n            break; // all threads are gone, exit while  \n         }  \n         else {  \n            Console::WriteLine(\"{0} threads exist, continue waiting...\", cc->ThreadCount);  \n            l.release(); // some threads exist, let them do their work  \n         }  \n      }  \n   }  \n}  \n```  \n  \n```Output  \nIn thread 3, Counter = 0  \nIn thread 3, Counter = 10  \nIn thread 5, Counter = 0  \nIn thread 5, Counter = 10  \nIn thread 7, Counter = 0  \nIn thread 7, Counter = 10  \nIn thread 4, Counter = 0  \nIn thread 4, Counter = 10  \nIn thread 6, Counter = 0  \nIn thread 6, Counter = 10  \nAll threads completed.  \n```  \n  \n## Requirements  \n **Header file** \\<msclr\\lock.h>  \n  \n **Namespace** msclr  \n  \n## See Also  \n [lock Members](../dotnet/lock-members.md)   \n [lock::~lock](../dotnet/lock-tilde-lock.md)   \n [lock::acquire](../dotnet/lock-acquire.md)   \n [lock::try_acquire](../dotnet/lock-try-acquire.md)"}