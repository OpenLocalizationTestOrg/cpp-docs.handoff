<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b4bc46a5514373dc1b0ef9ea6618419d435827ce</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\dotnet\how-to-convert-from-a-dotnet-collection-to-a-stl-clr-container.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5fe0603aef0d21b761a77fe172ef366a73882a82</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">058d09f51bd3f31313a96e14caec672aa1539ee5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Convert from a .NET Collection to a STL-CLR Container | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Convert from a .NET Collection to a STL/CLR Container</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic shows how to convert .NET collections to their equivalent STL/CLR containers.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>As an example we show how to convert a .NET &lt;xref:System.Collections.Generic.List%601&gt; to a STL/CLR <bpt id="p1">[</bpt>vector<ept id="p1">](../dotnet/vector-stl-clr.md)</ept> and how to convert a .NET &lt;xref:System.Collections.Generic.Dictionary%602&gt; to a STL/CLR <bpt id="p2">[</bpt>map<ept id="p2">](../dotnet/map-stl-clr.md)</ept>, but the procedure is similar for all collections and containers.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To create a container from a collection</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To convert an entire collection, create a STL/CLR container and pass the collection to the constructor.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The first example demonstrates this procedure.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>-OR-</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Create a generic STL/CLR container by creating a <bpt id="p1">[</bpt>collection_adapter<ept id="p1">](../dotnet/collection-adapter-stl-clr.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This template class takes a .NET collection interface as an argument.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To verify which interfaces are supported, see <bpt id="p1">[</bpt>collection_adapter (STL/CLR)<ept id="p1">](../dotnet/collection-adapter-stl-clr.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Copy the contents of the .NET collection to the container.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This can be done by using a STL/CLR <bpt id="p1">[</bpt>algorithm<ept id="p1">](../dotnet/algorithm-stl-clr.md)</ept>, or by iterating over the .NET collection and inserting a copy of each element into the STL/CLR container.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The second example demonstrates this procedure.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In this example, we create a generic &lt;xref:System.Collections.Generic.List%601&gt; and add 5 elements to it.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Then, we create a <ph id="ph1">`vector`</ph> using the constructor that takes a &lt;xref:System.Collections.Generic.IEnumerable%601&gt; as an argument.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In this example, we create a generic &lt;xref:System.Collections.Generic.Dictionary%602&gt; and add 5 elements to it.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Then, we create a <ph id="ph1">`collection_adapter`</ph> to wrap the &lt;xref:System.Collections.Generic.Dictionary%602&gt; as a simple STL/CLR container.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Finally, we create a <ph id="ph1">`map`</ph> and copy the contents of the &lt;xref:System.Collections.Generic.Dictionary%602&gt; to the <ph id="ph2">`map`</ph> by iterating over the <ph id="ph3">`collection_adapter`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>During this process, we create a new pair by using the <ph id="ph1">`make_pair`</ph> function, and insert the new pair directly into the <ph id="ph2">`map`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>STL/CLR Library Reference</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>adapter (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>How to: Convert from a STL/CLR Container to a .NET Collection</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>