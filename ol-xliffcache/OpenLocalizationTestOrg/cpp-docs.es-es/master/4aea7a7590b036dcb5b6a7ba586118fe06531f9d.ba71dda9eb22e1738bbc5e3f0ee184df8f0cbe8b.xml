{"nodes":[{"pos":[12,34],"content":"_read | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_read | Microsoft Docs","pos":[0,22]}]},{"pos":[1012,1017],"content":"_read","linkify":"_read","nodes":[{"content":"_read","pos":[0,5]}]},{"content":"Reads data from a file.","pos":[1018,1041]},{"pos":[1050,1056],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1166,1176],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"File descriptor referring to the open file.","pos":[1188,1231]},{"content":"<bpt id=\"p1\">*</bpt>buffer<ept id=\"p1\">*</ept>","pos":[1238,1246],"source":"*buffer*"},{"content":"Storage location for data.","pos":[1250,1276]},{"content":"<bpt id=\"p1\">*</bpt>count<ept id=\"p1\">*</ept>","pos":[1283,1290],"source":"*count*"},{"content":"Maximum number of bytes.","pos":[1294,1318]},{"pos":[1327,1339],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"_<bpt id=\"p1\">**</bpt>read<ept id=\"p1\">**</ept> returns the number of bytes read, which might be less than <bpt id=\"p2\">*</bpt>count<ept id=\"p2\">*</ept> if there are fewer than <bpt id=\"p3\">*</bpt>count<ept id=\"p3\">*</ept> bytes left in the file or if the file was opened in text mode, in which case each carriage return–line feed (CR-LF) pair is replaced with a single linefeed character.","pos":[1343,1618],"source":"_**read** returns the number of bytes read, which might be less than *count* if there are fewer than *count* bytes left in the file or if the file was opened in text mode, in which case each carriage return–line feed (CR-LF) pair is replaced with a single linefeed character."},{"content":"Only the single linefeed character is counted in the return value.","pos":[1619,1685]},{"content":"The replacement does not affect the file pointer.","pos":[1686,1735]},{"content":"If the function tries to read at end of file, it returns 0.","pos":[1742,1801]},{"content":"If <ph id=\"ph1\">`fd`</ph> is invalid, the file is not open for reading, or the file is locked, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1802,2009],"source":" If `fd` is invalid, the file is not open for reading, or the file is locked, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, the function returns –1 and sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EBADF`</ph>.","pos":[2010,2099],"source":" If execution is allowed to continue, the function returns –1 and sets `errno` to `EBADF`."},{"content":"If <bpt id=\"p1\">*</bpt>buffer<ept id=\"p1\">*</ept> is <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>, the invalid parameter handler is invoked.","pos":[2106,2172],"source":"If *buffer* is **NULL**, the invalid parameter handler is invoked."},{"content":"If execution is allowed to continue, the function returns -1 and <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[2173,2265],"source":" If execution is allowed to continue, the function returns -1 and `errno` is set to `EINVAL`."},{"pos":[2272,2448],"content":"For more information about this and other return codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For more information about this and other return codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"pos":[2457,2464],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_read`</ph> function reads a maximum of <bpt id=\"p1\">*</bpt>count<ept id=\"p1\">*</ept> bytes into <bpt id=\"p2\">*</bpt>buffer<ept id=\"p2\">*</ept> from the file associated with <ph id=\"ph2\">`fd`</ph>.","pos":[2468,2571],"source":"The `_read` function reads a maximum of *count* bytes into *buffer* from the file associated with `fd`."},{"content":"The read operation begins at the current position of the file pointer associated with the given file.","pos":[2572,2673]},{"content":"After the read operation, the file pointer points to the next unread character.","pos":[2674,2753]},{"content":"If the file was opened in text mode, the read terminates when <ph id=\"ph1\">`_read`</ph> encounters a CTRL+Z character, which is treated as an end-of-file indicator.","pos":[2760,2906],"source":"If the file was opened in text mode, the read terminates when `_read` encounters a CTRL+Z character, which is treated as an end-of-file indicator."},{"content":"Use <bpt id=\"p1\">[</bpt>_lseek<ept id=\"p1\">](../../c-runtime-library/reference/lseek-lseeki64.md)</ept> to clear the end-of-file indicator.","pos":[2907,3008],"source":" Use [_lseek](../../c-runtime-library/reference/lseek-lseeki64.md) to clear the end-of-file indicator."},{"pos":[3017,3029],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[3036,3043]},{"content":"Required header","pos":[3044,3059]},{"content":"<ph id=\"ph1\">\\&lt;</ph>io.h&gt;","pos":[3112,3119],"source":"\\<io.h>"},{"pos":[3127,3245],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[3254,3263],"content":"Libraries","linkify":"Libraries","nodes":[{"content":"Libraries","pos":[0,9]}]},{"pos":[3267,3359],"content":"All versions of the <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept>.","source":"All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md)."},{"pos":[3368,3375],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4265,4284],"content":"Input: crt_read.txt","linkify":"Input: crt_read.txt","nodes":[{"content":"Input: crt_read.txt","pos":[0,19]}]},{"pos":[4332,4338],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[4388,4396],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Low-Level I/O<ept id=\"p1\">](../../c-runtime-library/low-level-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[4400,4458],"source":"[Low-Level I/O](../../c-runtime-library/low-level-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_creat, _wcreat<ept id=\"p1\">](../../c-runtime-library/reference/creat-wcreat.md)</ept><ph id=\"ph1\"> </ph>","pos":[4461,4531],"source":" [_creat, _wcreat](../../c-runtime-library/reference/creat-wcreat.md) "},{"content":"<bpt id=\"p1\"> [</bpt>fread<ept id=\"p1\">](../../c-runtime-library/reference/fread.md)</ept><ph id=\"ph1\"> </ph>","pos":[4534,4587],"source":" [fread](../../c-runtime-library/reference/fread.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_open, _wopen<ept id=\"p1\">](../../c-runtime-library/reference/open-wopen.md)</ept><ph id=\"ph1\"> </ph>","pos":[4590,4656],"source":" [_open, _wopen](../../c-runtime-library/reference/open-wopen.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_write<ept id=\"p1\">](../../c-runtime-library/reference/write.md)</ept>","pos":[4659,4712],"source":" [_write](../../c-runtime-library/reference/write.md)"}],"content":"---\ntitle: \"_read | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_read\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-stdio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_read\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"data [CRT]\"\n  - \"_read function\"\n  - \"read function\"\n  - \"data [C++], reading\"\n  - \"reading data [C++]\"\n  - \"files [C++], reading\"\nms.assetid: 2ce9c433-57ad-47fe-9ac1-4a7d4c883d30\ncaps.latest.revision: 15\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _read\nReads data from a file.  \n  \n## Syntax  \n  \n```  \n  \n      int _read(  \n   int fd,  \n   void *buffer,  \n   unsigned int count   \n);  \n```  \n  \n#### Parameters  \n `fd`  \n File descriptor referring to the open file.  \n  \n *buffer*  \n Storage location for data.  \n  \n *count*  \n Maximum number of bytes.  \n  \n## Return Value  \n _**read** returns the number of bytes read, which might be less than *count* if there are fewer than *count* bytes left in the file or if the file was opened in text mode, in which case each carriage return–line feed (CR-LF) pair is replaced with a single linefeed character. Only the single linefeed character is counted in the return value. The replacement does not affect the file pointer.  \n  \n If the function tries to read at end of file, it returns 0. If `fd` is invalid, the file is not open for reading, or the file is locked, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, the function returns –1 and sets `errno` to `EBADF`.  \n  \n If *buffer* is **NULL**, the invalid parameter handler is invoked. If execution is allowed to continue, the function returns -1 and `errno` is set to `EINVAL`.  \n  \n For more information about this and other return codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n The `_read` function reads a maximum of *count* bytes into *buffer* from the file associated with `fd`. The read operation begins at the current position of the file pointer associated with the given file. After the read operation, the file pointer points to the next unread character.  \n  \n If the file was opened in text mode, the read terminates when `_read` encounters a CTRL+Z character, which is treated as an end-of-file indicator. Use [_lseek](../../c-runtime-library/reference/lseek-lseeki64.md) to clear the end-of-file indicator.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_read`|\\<io.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Libraries  \n All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md).  \n  \n## Example  \n  \n```  \n// crt_read.c  \n/* This program opens a file named crt_read.txt  \n * and tries to read 60,000 bytes from  \n * that file using _read. It then displays the  \n * actual number of bytes read.  \n */  \n  \n#include <fcntl.h>      /* Needed only for _O_RDWR definition */  \n#include <io.h>  \n#include <stdlib.h>  \n#include <stdio.h>  \n#include <share.h>  \n  \nchar buffer[60000];  \n  \nint main( void )  \n{  \n   int fh;  \n   unsigned int nbytes = 60000, bytesread;  \n  \n   /* Open file for input: */  \n   if( _sopen_s( &fh, \"crt_read.txt\", _O_RDONLY, _SH_DENYNO, 0 ) )  \n   {  \n      perror( \"open failed on input file\" );  \n      exit( 1 );  \n   }  \n  \n   /* Read in input: */  \n   if( ( bytesread = _read( fh, buffer, nbytes ) ) <= 0 )  \n      perror( \"Problem reading file\" );  \n   else  \n      printf( \"Read %u bytes from file\\n\", bytesread );  \n  \n   _close( fh );  \n}  \n```  \n  \n## Input: crt_read.txt  \n  \n```  \nLine one.  \nLine two.  \n```  \n  \n## Output  \n  \n```  \nRead 19 bytes from file  \n```  \n  \n## See Also  \n [Low-Level I/O](../../c-runtime-library/low-level-i-o.md)   \n [_creat, _wcreat](../../c-runtime-library/reference/creat-wcreat.md)   \n [fread](../../c-runtime-library/reference/fread.md)   \n [_open, _wopen](../../c-runtime-library/reference/open-wopen.md)   \n [_write](../../c-runtime-library/reference/write.md)"}