<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c09eed58d2ac7b1869c7f5ea58bafafaaee11925</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\porting\porting-to-the-universal-windows-platform-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cd922a78f2d44a542c0c7c65f07e0f19ab6c88bf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01f7c8f162353b41aa589e4aad82ba0c8f930348</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Porting to the Universal Windows Platform (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Porting to the Universal Windows Platform (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In this topic, you can find information on how to port existing C++ code to the Windows 10 app platform, the Universal Windows Platform.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>What is meant by the term <bpt id="p1">*</bpt>universal<ept id="p1">*</ept> is that your code can run on any of the devices that run Windows 10, including desktop, phone, tablets, and future devices that run Windows 10.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>With Windows 8.1, you created an app that targeted both Windows 8.1 and Windows Phone 8.1 by using a special project system feature called a shared project.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Universal Windows Apps do not use this mechanism, but instead you use a single project and a single XAML that works well on any device that runs Windows 10.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can use dynamic layout features in XAML to allow the app's UI to adapt to different display sizes.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The Windows Dev Center documentation contains a guide for porting Windows 8.1 apps to the Universal Windows Platform.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Move from Windows Runtime 8 to UWP<ept id="p1">](https://msdn.microsoft.com/windows/uwp/porting/w8x-to-uwp-root)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Although the guide focused mostly on C# code, most of the guidance is applicable to C++.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following procedures contain more detailed information.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This topic contains the following procedures for porting code to the UWP.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Porting a Windows 8.1 Store App to the UWP</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Porting a Windows 8.1 Runtime Component to the UWP</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If you have a classic desktop Win32 DLL and you want to call it from a UWP application, you can do that as well.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Using such procedures, you can create a UWP user interface layer for an existing classic Windows desktop C++ application, or your cross-platform standard C++ code.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>How to: Use Existing C++ Code in a Universal Windows Platform App<ept id="p1">](../porting/how-to-use-existing-cpp-code-in-a-universal-windows-platform-app.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Porting a Windows 8.1 Store App to the UWP</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you have a Windows 8.1 Store App, you can use this procedure to get it working on the UWP and any device that runs Windows 10.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It's a good idea to first build the project with <ph id="ph1">[!INCLUDE[vs_dev14](../ide/includes/vs_dev14_md.md)]</ph> as a Windows 8.1 project, to first eliminate any issues that arise from changes in the compiler and libraries.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Once you've done that, there are two ways to convert this to a Windows 10 UWP project.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The easiest way (as explained in the following procedure) is to create a Universal Windows project, and copy your existing code into it.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you were using a Universal project for Windows 8.1 desktop and Windows 8.1 Phone, your project will start with two different layouts in XAML but end with a single dynamic layout that adjusts to the display size.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To port a Windows 8.1 Store App to the UWP</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you have not already done so, open your Windows 8.1 App project in <ph id="ph1">[!INCLUDE[vs_dev14](../ide/includes/vs_dev14_md.md)]</ph>, and follow the instructions to upgrade the project file.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You need to have installed the Windows 8.1 Tools in Visual Studio setup.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If you don't have those tools installed, start Visual Studio setup from the Programs and Features window, choose <ph id="ph1">[!INCLUDE[vs_dev14](../ide/includes/vs_dev14_md.md)]</ph>, and in the setup window, choose <bpt id="p1">**</bpt>Modify<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Locate Windows 8.1 Tools, make sure it is selected, and choose OK.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Open the Project Properties window, and under C++, General, set the Platform Toolset to v140, the build tools for <ph id="ph1">[!INCLUDE[vs_dev14](../ide/includes/vs_dev14_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Build the project as a Windows 8.1 project, and address any build errors.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Any errors at this stage are probably due to breaking changes in the build tools and libraries.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Visual C++ change history 2003 - 2015<ept id="p1">](../porting/visual-cpp-change-history-2003-2015.md)</ept> for a detailed explanation of the changes that might affect your code.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Once your project builds cleanly, you are ready to port to Universal Windows (Windows 10).</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Create a new Universal Windows App project using the Blank template.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You might want to give it the same name as your existing project, although to do that the projects must be in different directories.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Close the solution, and then using Windows Explorer or the command line, copy the code files (with extensions .cpp, .h, and .xaml) from your Windows 8.1 project into the same folder as the project file (.vcxproj) for the project you created in step 1.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Do not copy the Package.appxmanifest file, and if you have separate code for Windows 8.1 desktop and phone, choose one of them to port first (you'll have to do some work later to adapt to the other).</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Be sure to copy and subfolders and their contents.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If prompted, choose to replace any files with duplicate names.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Reopen the solution, and choose <bpt id="p1">**</bpt>Add, Existing Item<ept id="p1">**</ept> from the shortcut menu for the project node.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Select all the files you copied, except any that are already part of the project.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Check any subfolders and make sure to add the files in them as well.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If you are not using the same project name as your old project, open the Package.appxmanifest file and update the Entry Point to reflect the namespace name for the App class.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Entry Point<ept id="p1">**</ept> field in the Package.appxmanifest file contains a scoped name for the App class, which includes the namespace that contains the App class.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When you create a Universal Windows project, the namespace is set to the name of the project.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If this is different from what's in the files you copied in from your old project, you must update one or the other to make them match.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Build the project, and address any build errors due to breaking changes between the different versions of the Windows SDK.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Run the project on the Local Desktop.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Verify that there are no deployment errors, and that the layout of the app looks reasonable and that it functions correctly on the desktop.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If you had separate code files and .xaml for another device, such as Windows Phone 8.1, examine this code and identify where it differs from the standard device.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If the difference is only in the layout, you might be able to use a Visual State Manager in the xaml to customize the display depending on the size of the screen.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For other differences, you can use conditions sections in your code using the following #if statements.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>These statements respectively apply to Windows Store apps, Windows Phone Store apps, both, or neither (classic Win32 desktop only).</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>These macros are only available in Windows SDK 8.1 and later, so if your code needs to compile with earlier versions of the Windows SDK or for other platforms besides Windows, then you should also consider the case that none of them are defined.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Run and debug the app on an emulator or physical device, for each type of device that your app supports.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To run an emulator, you need to run Visual Studio on a physical computer, not a virtual machine.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Porting a Windows 8.1 Runtime Component to the UWP</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If you have a DLL or a Windows Runtime Component that already works with Windows 8.1 Store apps, you can use this procedure to get the component or DLL working with the UWP and Windows 10.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The basic procedure is to create a new project and copy your code into it.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To port a Windows 8.1 Runtime Component to the UWP</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog in <ph id="ph1">[!INCLUDE[vs_dev14](../ide/includes/vs_dev14_md.md)]</ph>, locate the <bpt id="p2">**</bpt>Windows Universal<ept id="p2">**</ept> node.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If you don't see this node, install the <bpt id="p1">[</bpt>Tools for Windows 10<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkID=617903)</ept> first.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Choose the <bpt id="p1">**</bpt>Windows Runtime Component<ept id="p1">**</ept> template, give a name for your component, and choose the <bpt id="p2">**</bpt>OK<ept id="p2">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The component name will be used as the namespace name, so you might want to use the same name as your old projects' namespace.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This requires that you create the project in a different folder from the old one.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If you choose a different name, you can update the namespace name in the generated code files.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Close the project.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Copy all the code files (.cpp, .h, .xaml, etc.) from your Windows 8.1 component into your newly created project.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Do not copy the Package.appxmanifest file.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Build, and resolve any errors due to breaking changes between different versions of the Windows SDK.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You might encounter various errors during the process of porting code to the Universal Windows Platform.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Here are some of the possible problems you might encounter.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Project Configuration Issues</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You might receive the error:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If this happens, the project is not building as a Windows Universal project.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Check the project file and make sure it has the correct XML elements that identify a project as a Windows Universal Project.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The following elements should be present (the version number of the target platform might be different):</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If you created a new Universal Windows Platform project using Visual Studio, you should not see this error.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Visual C++ Porting Guide</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Develop apps for the Universal Windows Platform (UWP)</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>