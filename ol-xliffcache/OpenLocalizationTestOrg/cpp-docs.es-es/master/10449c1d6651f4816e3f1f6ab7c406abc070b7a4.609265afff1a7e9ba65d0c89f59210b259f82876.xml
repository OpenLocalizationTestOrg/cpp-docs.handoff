{"nodes":[{"pos":[12,47],"content":"_aligned_msize_dbg | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_aligned_msize_dbg | Microsoft Docs","pos":[0,35]}]},{"pos":[919,937],"content":"_aligned_msize_dbg","linkify":"_aligned_msize_dbg","nodes":[{"content":"_aligned_msize_dbg","pos":[0,18]}]},{"content":"Returns the size of a memory block allocated in the heap (debug version only).","pos":[938,1016]},{"pos":[1025,1031],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1154,1164],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`memblock`</ph>","pos":[1168,1183],"source":"[in] `memblock`"},{"content":"Pointer to the memory block.","pos":[1187,1215]},{"content":"[in] <ph id=\"ph1\">`alignment`</ph>","pos":[1222,1238],"source":"[in] `alignment`"},{"content":"The alignment value, which must be an integer power of 2.","pos":[1242,1299]},{"content":"[in] <ph id=\"ph1\">`offset`</ph>","pos":[1306,1319],"source":"[in] `offset`"},{"content":"The offset into the memory allocation to force the alignment.","pos":[1323,1384]},{"pos":[1393,1405],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the size (in bytes) as an unsigned integer.","pos":[1409,1460]},{"pos":[1469,1476],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1480,1595],"content":"The <ph id=\"ph1\">`alignment`</ph> and <ph id=\"ph2\">`offset`</ph> values must be the same as the values passed to the function that allocated the block.","source":"The `alignment` and `offset` values must be the same as the values passed to the function that allocated the block."},{"content":"<ph id=\"ph1\">`_aligned_msize_dbg`</ph> is a debug version of the <bpt id=\"p1\">[</bpt>_aligned_msize<ept id=\"p1\">](../../c-runtime-library/reference/aligned-msize.md)</ept> function.","pos":[1602,1727],"source":"`_aligned_msize_dbg` is a debug version of the [_aligned_msize](../../c-runtime-library/reference/aligned-msize.md) function."},{"content":"When <bpt id=\"p1\">[</bpt>_DEBUG<ept id=\"p1\">](../../c-runtime-library/debug.md)</ept> is not defined, each call to <ph id=\"ph1\">`_aligned_msize_dbg`</ph> is reduced to a call to <ph id=\"ph2\">`_aligned_msize`</ph>.","pos":[1728,1867],"source":" When [_DEBUG](../../c-runtime-library/debug.md) is not defined, each call to `_aligned_msize_dbg` is reduced to a call to `_aligned_msize`."},{"content":"Both <ph id=\"ph1\">`_aligned_msize`</ph> and <ph id=\"ph2\">`_aligned_msize_dbg`</ph> calculate the size of a memory block in the base heap, but <ph id=\"ph3\">`_aligned_msize_dbg`</ph> adds a debugging feature: It includes the buffers on either side of the user portion of the memory block in the returned size.","pos":[1868,2121],"source":" Both `_aligned_msize` and `_aligned_msize_dbg` calculate the size of a memory block in the base heap, but `_aligned_msize_dbg` adds a debugging feature: It includes the buffers on either side of the user portion of the memory block in the returned size."},{"content":"This function validates its parameter.","pos":[2128,2166]},{"content":"If <ph id=\"ph1\">`memblock`</ph> is a null pointer or <ph id=\"ph2\">`alignment`</ph> is not a power of 2, <ph id=\"ph3\">`_msize`</ph> invokes an invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2167,2370],"source":" If `memblock` is a null pointer or `alignment` is not a power of 2, `_msize` invokes an invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If the error is handled, the function sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and returns -1.","pos":[2371,2449],"source":" If the error is handled, the function sets `errno` to `EINVAL` and returns -1."},{"content":"For information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see <bpt id=\"p1\">[</bpt>CRT Debug Heap Details<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[2456,2651],"source":"For information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see [CRT Debug Heap Details](/visualstudio/debugger/crt-debug-heap-details)."},{"content":"For information about the allocation block types and how they are used, see <bpt id=\"p1\">[</bpt>Types of blocks on the debug heap<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[2652,2811],"source":" For information about the allocation block types and how they are used, see [Types of blocks on the debug heap](/visualstudio/debugger/crt-debug-heap-details)."},{"content":"For information about the differences between calling a standard heap function and its debug version in a debug build of an application, see <bpt id=\"p1\">[</bpt>Debug Versions of Heap Allocation Functions<ept id=\"p1\">](/visualstudio/debugger/debug-versions-of-heap-allocation-functions)</ept>.","pos":[2812,3067],"source":" For information about the differences between calling a standard heap function and its debug version in a debug build of an application, see [Debug Versions of Heap Allocation Functions](/visualstudio/debugger/debug-versions-of-heap-allocation-functions)."},{"pos":[3076,3088],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[3095,3102]},{"content":"Required header","pos":[3103,3118]},{"content":"<ph id=\"ph1\">\\&lt;</ph>crtdbg.h&gt;","pos":[3184,3195],"source":"\\<crtdbg.h>"},{"pos":[3203,3321],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[3330,3339],"content":"Libraries","linkify":"Libraries","nodes":[{"content":"Libraries","pos":[0,9]}]},{"pos":[3343,3438],"content":"Debug versions of <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept> only.","source":"Debug versions of [C run-time libraries](../../c-runtime-library/crt-library-features.md) only."},{"pos":[3447,3472],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[3476,3491]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[3492,3539],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[3540,3665],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[3674,3682],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3686,3751],"content":"<bpt id=\"p1\">[</bpt>Memory Allocation<ept id=\"p1\">](../../c-runtime-library/memory-allocation.md)</ept>","source":"[Memory Allocation](../../c-runtime-library/memory-allocation.md)"}],"content":"---\ntitle: \"_aligned_msize_dbg | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_aligned_msize_dbg\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_aligned_msize_dbg\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"_aligned_msize_dbg\"\nms.assetid: f1c44af0-3f66-4033-81d1-d71d3afecba0\ncaps.latest.revision: 8\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _aligned_msize_dbg\nReturns the size of a memory block allocated in the heap (debug version only).  \n  \n## Syntax  \n  \n```  \nsize_t _aligned_msize_dbg(  \n   void *memblock,  \n   size_t alignment,  \n   size_t offset  \n);  \n```  \n  \n#### Parameters  \n [in] `memblock`  \n Pointer to the memory block.  \n  \n [in] `alignment`  \n The alignment value, which must be an integer power of 2.  \n  \n [in] `offset`  \n The offset into the memory allocation to force the alignment.  \n  \n## Return Value  \n Returns the size (in bytes) as an unsigned integer.  \n  \n## Remarks  \n The `alignment` and `offset` values must be the same as the values passed to the function that allocated the block.  \n  \n `_aligned_msize_dbg` is a debug version of the [_aligned_msize](../../c-runtime-library/reference/aligned-msize.md) function. When [_DEBUG](../../c-runtime-library/debug.md) is not defined, each call to `_aligned_msize_dbg` is reduced to a call to `_aligned_msize`. Both `_aligned_msize` and `_aligned_msize_dbg` calculate the size of a memory block in the base heap, but `_aligned_msize_dbg` adds a debugging feature: It includes the buffers on either side of the user portion of the memory block in the returned size.  \n  \n This function validates its parameter. If `memblock` is a null pointer or `alignment` is not a power of 2, `_msize` invokes an invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If the error is handled, the function sets `errno` to `EINVAL` and returns -1.  \n  \n For information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see [CRT Debug Heap Details](/visualstudio/debugger/crt-debug-heap-details). For information about the allocation block types and how they are used, see [Types of blocks on the debug heap](/visualstudio/debugger/crt-debug-heap-details). For information about the differences between calling a standard heap function and its debug version in a debug build of an application, see [Debug Versions of Heap Allocation Functions](/visualstudio/debugger/debug-versions-of-heap-allocation-functions).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_aligned_msize_dbg`|\\<crtdbg.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Libraries  \n Debug versions of [C run-time libraries](../../c-runtime-library/crt-library-features.md) only.  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Memory Allocation](../../c-runtime-library/memory-allocation.md)"}