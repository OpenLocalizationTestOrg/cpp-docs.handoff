{"nodes":[{"pos":[12,42],"content":"Using CString | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Using CString | Microsoft Docs","pos":[0,30]}]},{"content":"Using CString","pos":[669,682]},{"content":"The topics in this section describe how to program with <ph id=\"ph1\">`CString`</ph>.","pos":[683,749],"source":"The topics in this section describe how to program with `CString`."},{"content":"For reference documentation about the <ph id=\"ph1\">`CString`</ph> class, see the documentation for <bpt id=\"p1\">[</bpt>CStringT<ept id=\"p1\">](../atl-mfc-shared/reference/cstringt-class.md)</ept>.","pos":[750,889],"source":" For reference documentation about the `CString` class, see the documentation for [CStringT](../atl-mfc-shared/reference/cstringt-class.md)."},{"pos":[896,944],"content":"To use <ph id=\"ph1\">`CString`</ph>, include the <ph id=\"ph2\">`atlstr.h`</ph> header.","source":"To use `CString`, include the `atlstr.h` header."},{"pos":[951,1155],"content":"The <ph id=\"ph1\">`CString`</ph>, <ph id=\"ph2\">`CStringA`</ph>, and <ph id=\"ph3\">`CStringW`</ph> classes are specializations of a class template called <bpt id=\"p1\">[</bpt>CStringT<ept id=\"p1\">](../atl-mfc-shared/reference/cstringt-class.md)</ept> based on the type of character data they support.","source":"The `CString`, `CStringA`, and `CStringW` classes are specializations of a class template called [CStringT](../atl-mfc-shared/reference/cstringt-class.md) based on the type of character data they support."},{"content":"A <ph id=\"ph1\">`CStringW`</ph> object contains the <ph id=\"ph2\">`wchar_t`</ph> type and supports Unicode strings.","pos":[1162,1239],"source":"A `CStringW` object contains the `wchar_t` type and supports Unicode strings."},{"content":"A <ph id=\"ph1\">`CStringA`</ph> object contains the <ph id=\"ph2\">`char`</ph> type, and supports single-byte and multi-byte (MBCS) strings.","pos":[1240,1341],"source":" A `CStringA` object contains the `char` type, and supports single-byte and multi-byte (MBCS) strings."},{"content":"A <ph id=\"ph1\">`CString`</ph> object supports either the <ph id=\"ph2\">`char`</ph> type or the <ph id=\"ph3\">`wchar_t`</ph> type, depending on whether the <ph id=\"ph4\">`MBCS`</ph> symbol or the <ph id=\"ph5\">`UNICODE`</ph> symbol is defined at compile time.","pos":[1342,1506],"source":" A `CString` object supports either the `char` type or the `wchar_t` type, depending on whether the `MBCS` symbol or the `UNICODE` symbol is defined at compile time."},{"content":"A <ph id=\"ph1\">`CString`</ph> object keeps character data in a <ph id=\"ph2\">`CStringData`</ph> object.","pos":[1513,1579],"source":"A `CString` object keeps character data in a `CStringData` object."},{"content":"accepts <ph id=\"ph1\">`null`</ph>-terminated C-style strings, but does not retain the <ph id=\"ph2\">`null`</ph> character in the stored character data.","pos":[1590,1703],"source":" accepts `null`-terminated C-style strings, but does not retain the `null` character in the stored character data."},{"content":"Instead, <ph id=\"ph1\">`CString`</ph> tracks string length.","pos":[1704,1744],"source":" Instead, `CString` tracks string length."},{"content":"does provide a null terminator when it exports a C-style string.","pos":[1755,1819]},{"content":"You can insert a <ph id=\"ph1\">`null`</ph> in a <ph id=\"ph2\">`CString`</ph>, but it may produce unexpected results.","pos":[1820,1898],"source":" You can insert a `null` in a `CString`, but it may produce unexpected results."},{"pos":[1905,2061],"content":"The following set of string classes can be used without linking an MFC library, with or without CRT support: <ph id=\"ph1\">`CAtlString`</ph>, <ph id=\"ph2\">`CAtlStringA`</ph>, and <ph id=\"ph3\">`CAtlStringW`</ph>.","source":"The following set of string classes can be used without linking an MFC library, with or without CRT support: `CAtlString`, `CAtlStringA`, and `CAtlStringW`."},{"content":"is used in native projects.","pos":[2078,2105]},{"content":"For managed-code (C++/CLI) projects, use <ph id=\"ph1\">`System::String`</ph>.","pos":[2106,2164],"source":" For managed-code (C++/CLI) projects, use `System::String`."},{"pos":[2171,2336],"content":"To add more capabilities than <ph id=\"ph1\">`CString`</ph>, <ph id=\"ph2\">`CStringA`</ph>, or <ph id=\"ph3\">`CStringW`</ph> currently offer, you should create a subclass of <ph id=\"ph4\">`CStringT`</ph> that contains the additional features.","source":"To add more capabilities than `CString`, `CStringA`, or `CStringW` currently offer, you should create a subclass of `CStringT` that contains the additional features."},{"pos":[2343,2426],"content":"The following code shows how to create a <ph id=\"ph1\">`CString`</ph> and print it to standard output:","source":"The following code shows how to create a `CString` and print it to standard output:"},{"content":"In This Section","pos":[2593,2608]},{"content":"Basic CString Operations","pos":[2613,2637]},{"content":"Describes basic <ph id=\"ph1\">`CString`</ph> operations, including creating objects from C literal strings, accessing individual characters in a <ph id=\"ph2\">`CString`</ph>, concatenating two objects, and comparing <ph id=\"ph3\">`CString`</ph> objects.","pos":[2689,2885],"source":" Describes basic `CString` operations, including creating objects from C literal strings, accessing individual characters in a `CString`, concatenating two objects, and comparing `CString` objects."},{"content":"String Data Management","pos":[2893,2915]},{"content":"Discusses using Unicode and MBCS with <ph id=\"ph1\">`CString`</ph>.","pos":[2965,3013],"source":" Discusses using Unicode and MBCS with `CString`."},{"content":"CString Semantics","pos":[3021,3038]},{"content":"Explains how <ph id=\"ph1\">`CString`</ph> objects are used.","pos":[3083,3123],"source":" Explains how `CString` objects are used."},{"content":"CString Operations Relating to C-Style Strings","pos":[3131,3177]},{"content":"Describes manipulating the contents of a <ph id=\"ph1\">`CString`</ph> object like a C-style null-terminated string.","pos":[3251,3347],"source":" Describes manipulating the contents of a `CString` object like a C-style null-terminated string."},{"content":"Allocating and Releasing Memory for a BSTR","pos":[3355,3397]},{"content":"Discusses using memory for a <ph id=\"ph1\">`BSTR`</ph> and COM objects.","pos":[3467,3519],"source":" Discusses using memory for a `BSTR` and COM objects."},{"content":"CString Exception Cleanup","pos":[3527,3552]},{"content":"Explains that explicit cleanup in MFC 3.0 and later is no longer necessary.","pos":[3605,3680]},{"content":"CString Argument Passing","pos":[3688,3712]},{"content":"Explains how to pass CString objects to functions and how to return <ph id=\"ph1\">`CString`</ph> objects from functions.","pos":[3764,3865],"source":" Explains how to pass CString objects to functions and how to return `CString` objects from functions."},{"content":"Unicode and Multibyte Character Set (MBCS) Support","pos":[3873,3923]},{"content":"Discusses how MFC is enabled for Unicode and MBCS support.","pos":[3999,4057]},{"content":"Reference","pos":[4066,4075]},{"content":"CStringT","pos":[4080,4088]},{"content":"Provides reference information about the <ph id=\"ph1\">`CStringT`</ph> class.","pos":[4140,4198],"source":" Provides reference information about the `CStringT` class."},{"content":"CSimpleStringT Class","pos":[4206,4226]},{"content":"Provides reference information about the <ph id=\"ph1\">`CSimpleStringT`</ph> class.","pos":[4284,4348],"source":" Provides reference information about the `CSimpleStringT` class."},{"content":"Related Sections","pos":[4357,4373]},{"content":"Strings (ATL/MFC)","pos":[4378,4395]},{"content":"Contains links to topics that describe several ways to manage string data.","pos":[4438,4512]},{"content":"Strings (ATL/MFC)","pos":[4520,4537]}],"content":"---\ntitle: \"Using CString | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CString objects, C++ string manipulation\"\n  - \"CString objects, reference counting\"\n  - \"CString class (Visual C++)\"\nms.assetid: ed018aaf-8b10-46f9-828c-f9c092dc7609\ncaps.latest.revision: 11\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Using CString\nThe topics in this section describe how to program with `CString`. For reference documentation about the `CString` class, see the documentation for [CStringT](../atl-mfc-shared/reference/cstringt-class.md).  \n  \n To use `CString`, include the `atlstr.h` header.  \n  \n The `CString`, `CStringA`, and `CStringW` classes are specializations of a class template called [CStringT](../atl-mfc-shared/reference/cstringt-class.md) based on the type of character data they support.  \n  \n A `CStringW` object contains the `wchar_t` type and supports Unicode strings. A `CStringA` object contains the `char` type, and supports single-byte and multi-byte (MBCS) strings. A `CString` object supports either the `char` type or the `wchar_t` type, depending on whether the `MBCS` symbol or the `UNICODE` symbol is defined at compile time.  \n  \n A `CString` object keeps character data in a `CStringData` object. `CString` accepts `null`-terminated C-style strings, but does not retain the `null` character in the stored character data. Instead, `CString` tracks string length. `CString` does provide a null terminator when it exports a C-style string. You can insert a `null` in a `CString`, but it may produce unexpected results.  \n  \n The following set of string classes can be used without linking an MFC library, with or without CRT support: `CAtlString`, `CAtlStringA`, and `CAtlStringW`.  \n  \n `CString` is used in native projects. For managed-code (C++/CLI) projects, use `System::String`.  \n  \n To add more capabilities than `CString`, `CStringA`, or `CStringW` currently offer, you should create a subclass of `CStringT` that contains the additional features.  \n  \n The following code shows how to create a `CString` and print it to standard output:  \n  \n```cpp  \n#include <atlstr.h>  \n  \nint main() {  \n    CString aCString = CString(_T(\"A string\"));  \n    _tprintf(_T(\"%s\"), (LPCTSTR) aCString);  \n}  \n```  \n  \n## In This Section  \n [Basic CString Operations](../atl-mfc-shared/basic-cstring-operations.md)  \n Describes basic `CString` operations, including creating objects from C literal strings, accessing individual characters in a `CString`, concatenating two objects, and comparing `CString` objects.  \n  \n [String Data Management](../atl-mfc-shared/string-data-management.md)  \n Discusses using Unicode and MBCS with `CString`.  \n  \n [CString Semantics](../atl-mfc-shared/cstring-semantics.md)  \n Explains how `CString` objects are used.  \n  \n [CString Operations Relating to C-Style Strings](../atl-mfc-shared/cstring-operations-relating-to-c-style-strings.md)  \n Describes manipulating the contents of a `CString` object like a C-style null-terminated string.  \n  \n [Allocating and Releasing Memory for a BSTR](../atl-mfc-shared/allocating-and-releasing-memory-for-a-bstr.md)  \n Discusses using memory for a `BSTR` and COM objects.  \n  \n [CString Exception Cleanup](../atl-mfc-shared/cstring-exception-cleanup.md)  \n Explains that explicit cleanup in MFC 3.0 and later is no longer necessary.  \n  \n [CString Argument Passing](../atl-mfc-shared/cstring-argument-passing.md)  \n Explains how to pass CString objects to functions and how to return `CString` objects from functions.  \n  \n [Unicode and Multibyte Character Set (MBCS) Support](../atl-mfc-shared/unicode-and-multibyte-character-set-mbcs-support.md)  \n Discusses how MFC is enabled for Unicode and MBCS support.  \n  \n## Reference  \n [CStringT](../atl-mfc-shared/reference/cstringt-class.md)  \n Provides reference information about the `CStringT` class.  \n  \n [CSimpleStringT Class](../atl-mfc-shared/reference/csimplestringt-class.md)  \n Provides reference information about the `CSimpleStringT` class.  \n  \n## Related Sections  \n [Strings (ATL/MFC)](../atl-mfc-shared/strings-atl-mfc.md)  \n Contains links to topics that describe several ways to manage string data.  \n  \n [Strings (ATL/MFC)](../atl-mfc-shared/strings-atl-mfc.md)\n\n"}