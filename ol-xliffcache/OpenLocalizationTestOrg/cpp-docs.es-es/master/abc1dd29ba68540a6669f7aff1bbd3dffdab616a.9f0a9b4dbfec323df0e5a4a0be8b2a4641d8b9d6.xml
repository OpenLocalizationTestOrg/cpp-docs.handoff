{"nodes":[{"pos":[12,54],"content":"&lt;allocators&gt; macros | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"allocators<ph id=\"ph1\">&amp;gt;</ph> macros | Microsoft Docs","pos":[4,42],"source":"allocators&gt; macros | Microsoft Docs"}]},{"content":"allocators<ph id=\"ph1\">&amp;gt;</ph> macros","pos":[261,282],"source":"allocators&gt; macros"},{"content":"ALLOCATOR_DECL","pos":[302,316]},{"content":"CACHE_CHUNKLIST","pos":[336,351]},{"content":"CACHE_FREELIST","pos":[372,386]},{"content":"CACHE_SUBALLOC","pos":[410,424]},{"content":"SYNC_DEFAULT","pos":[444,456]},{"pos":[514,528],"content":"ALLOCATOR_DECL"},{"content":"Yields an allocator template class.","pos":[532,567]},{"content":"Remarks","pos":[649,656]},{"pos":[660,924],"content":"The macro yields a template definition <ph id=\"ph1\">`template &lt;class Type&gt; class name {.....}`</ph> and a specialization <ph id=\"ph2\">`template &lt;&gt; class name&lt;void&gt; {.....}`</ph> which together define an allocator template class that uses the synchronization filter <ph id=\"ph3\">`sync`</ph> and a cache of type <ph id=\"ph4\">`cache`</ph>.","source":"The macro yields a template definition `template <class Type> class name {.....}` and a specialization `template <> class name<void> {.....}` which together define an allocator template class that uses the synchronization filter `sync` and a cache of type `cache`."},{"content":"For compilers that can compile rebind, the resulting template definition looks like this:","pos":[931,1020]},{"content":"For compilers that cannot compile rebind the resulting template definition looks like this:","pos":[1141,1232]},{"pos":[1609,1624],"content":"CACHE_CHUNKLIST"},{"pos":[1628,1687],"content":"Yields <ph id=\"ph1\">`stdext::allocators::cache_chunklist&lt;sizeof(Type)&gt;`</ph>.","source":"Yields `stdext::allocators::cache_chunklist<sizeof(Type)>`."},{"content":"Remarks","pos":[1748,1755]},{"pos":[1796,1810],"content":"CACHE_FREELIST"},{"pos":[1814,1877],"content":"Yields <ph id=\"ph1\">`stdext::allocators::cache_freelist&lt;sizeof(Type), max&gt;`</ph>.","source":"Yields `stdext::allocators::cache_freelist<sizeof(Type), max>`."},{"content":"Remarks","pos":[1942,1949]},{"pos":[1990,2004],"content":"CACHE_SUBALLOC"},{"pos":[2008,2066],"content":"Yields <ph id=\"ph1\">`stdext::allocators::cache_suballoc&lt;sizeof(Type)&gt;`</ph>.","source":"Yields `stdext::allocators::cache_suballoc<sizeof(Type)>`."},{"content":"Remarks","pos":[2126,2133]},{"pos":[2172,2184],"content":"SYNC_DEFAULT"},{"content":"Yields a synchronization filter.","pos":[2188,2220]},{"content":"Remarks","pos":[2280,2287]},{"pos":[2291,2524],"content":"If a compiler supports compiling both single-threaded and multi-threaded applications, for single-threaded applications the macro yields <ph id=\"ph1\">`stdext::allocators::sync_none`</ph>; in all other cases it yields <ph id=\"ph2\">`stdext::allocators::sync_shared`</ph>.","source":"If a compiler supports compiling both single-threaded and multi-threaded applications, for single-threaded applications the macro yields `stdext::allocators::sync_none`; in all other cases it yields `stdext::allocators::sync_shared`."},{"content":"See Also","pos":[2533,2541]},{"content":"allocators&gt;","pos":[2548,2559],"source":"allocators>"}],"content":"---\ntitle: \"&lt;allocators&gt; macros | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 9cb5ee07-1ff9-4594-ae32-3c8c6efb511a\ncaps.latest.revision: 12\nmanager: \"ghogen\"\n---\n# &lt;allocators&gt; macros\n||||  \n|-|-|-|  \n|[ALLOCATOR_DECL](#allocator_decl)|[CACHE_CHUNKLIST](#cache_chunklist)|[CACHE_FREELIST](#cache_freelist)|  \n|[CACHE_SUBALLOC](#cache_suballoc)|[SYNC_DEFAULT](#sync_default)|  \n  \n##  <a name=\"allocator_decl\"></a>  ALLOCATOR_DECL  \n Yields an allocator template class.  \n  \n```\n#define ALLOCATOR_DECL(cache, sync, name) <alloc_template>\n```  \n  \n### Remarks  \n The macro yields a template definition `template <class Type> class name {.....}` and a specialization `template <> class name<void> {.....}` which together define an allocator template class that uses the synchronization filter `sync` and a cache of type `cache`.  \n  \n For compilers that can compile rebind, the resulting template definition looks like this:  \n```  \nstruct rebind\n   {    /* convert a name<Type> to a name<Other> */\n   typedef name<Other> other;\n   };  \n ```  \n For compilers that cannot compile rebind the resulting template definition looks like this:  \n  \n```\ntemplate <class Type<class name\n    : public stdext::allocators::allocator_base<Type,\n    sync<stdext::allocators::rts_alloc<cache>>>\n{\npublic:\n    name() {}\n    template <class Other>\n    name(const name<Other>&) {}\n    template <class Other>\n    name& operator= (const name<Other>&)\n    {\n        return *this;\n    }\n};\n```  \n  \n##  <a name=\"cache_chunklist\"></a>  CACHE_CHUNKLIST  \n Yields `stdext::allocators::cache_chunklist<sizeof(Type)>`.  \n  \n```\n#define CACHE_CHUNKLIST <cache_class>\n```  \n  \n### Remarks  \n  \n##  <a name=\"cache_freelist\"></a>  CACHE_FREELIST  \n Yields `stdext::allocators::cache_freelist<sizeof(Type), max>`.  \n  \n```\n#define CACHE_FREELIST(max) <cache_class>\n```  \n  \n### Remarks  \n  \n##  <a name=\"cache_suballoc\"></a>  CACHE_SUBALLOC  \n Yields `stdext::allocators::cache_suballoc<sizeof(Type)>`.  \n  \n```\n#define CACHE_SUBALLOC <cache_class>\n```  \n  \n### Remarks  \n  \n##  <a name=\"sync_default\"></a>  SYNC_DEFAULT  \n Yields a synchronization filter.  \n  \n```\n#define SYNC_DEFAULT <sync_template>\n```  \n  \n### Remarks  \n If a compiler supports compiling both single-threaded and multi-threaded applications, for single-threaded applications the macro yields `stdext::allocators::sync_none`; in all other cases it yields `stdext::allocators::sync_shared`.  \n  \n## See Also  \n [\\<allocators>](../standard-library/allocators-header.md)\n\n\n\n\n"}