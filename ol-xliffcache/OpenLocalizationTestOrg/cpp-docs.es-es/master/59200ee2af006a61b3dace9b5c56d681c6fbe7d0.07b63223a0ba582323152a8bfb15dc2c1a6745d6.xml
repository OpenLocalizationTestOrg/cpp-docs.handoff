{"nodes":[{"pos":[12,68],"content":"-Zc:inline (Remove unreferenced COMDAT) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"-Zc:inline (Remove unreferenced COMDAT) | Microsoft Docs","pos":[0,56]}]},{"content":"/Zc:inline (Remove unreferenced COMDAT)","pos":[777,816]},{"content":"Removes unreferenced functions or data that are COMDATs or only have internal linkage.","pos":[817,903]},{"content":"When <bpt id=\"p1\">**</bpt>/Zc:inline<ept id=\"p1\">**</ept> is specified, the compiler requires that translation units that use inline data or inline functions must also include the definitions for the data or functions.","pos":[904,1084],"source":" When **/Zc:inline** is specified, the compiler requires that translation units that use inline data or inline functions must also include the definitions for the data or functions."},{"content":"Syntax","pos":[1093,1099]},{"content":"Remarks","pos":[1139,1146]},{"content":"When <bpt id=\"p1\">**</bpt>/Zc:inline<ept id=\"p1\">**</ept> is specified, the compiler does not emit symbol information for unreferenced COMDAT functions or data, or for functions or data that have internal linkage only.","pos":[1150,1330],"source":"When **/Zc:inline** is specified, the compiler does not emit symbol information for unreferenced COMDAT functions or data, or for functions or data that have internal linkage only."},{"content":"By default, this option is off (<bpt id=\"p1\">**</bpt>/Zc:inline-<ept id=\"p1\">**</ept>).","pos":[1331,1380],"source":" By default, this option is off (**/Zc:inline-**)."},{"content":"This optimization simplifies some of the work performed by the linker in release builds or when the linker option <bpt id=\"p1\">[</bpt>/OPT:REF<ept id=\"p1\">](../../build/reference/opt-optimizations.md)</ept> is specified.","pos":[1381,1563],"source":" This optimization simplifies some of the work performed by the linker in release builds or when the linker option [/OPT:REF](../../build/reference/opt-optimizations.md) is specified."},{"content":"When the compiler performs this optimization, it can significantly reduce .obj file size and improve linker speeds.","pos":[1564,1679]},{"content":"This compiler option is not enabled when optimizations are disabled (<bpt id=\"p1\">[</bpt>/Od<ept id=\"p1\">](../../build/reference/od-disable-debug.md)</ept>) or when <bpt id=\"p2\">[</bpt>/GL (Whole Program Optimization)<ept id=\"p2\">](../../build/reference/gl-whole-program-optimization.md)</ept> is specified.","pos":[1680,1911],"source":" This compiler option is not enabled when optimizations are disabled ([/Od](../../build/reference/od-disable-debug.md)) or when [/GL (Whole Program Optimization)](../../build/reference/gl-whole-program-optimization.md) is specified."},{"content":"If <bpt id=\"p1\">**</bpt>/Zc:inline<ept id=\"p1\">**</ept> is specified, the compiler enforces the C++11 requirement that all functions declared <ph id=\"ph1\">`inline`</ph> must have a definition available in the same translation unit if they are used.","pos":[1918,2110],"source":"If **/Zc:inline** is specified, the compiler enforces the C++11 requirement that all functions declared `inline` must have a definition available in the same translation unit if they are used."},{"content":"When the option is not specified, <ph id=\"ph1\">[!INCLUDE[vcprvc](../../build/includes/vcprvc_md.md)]</ph> allows non-conformant code that invokes functions declared <ph id=\"ph2\">`inline`</ph> even if no definition is visible.","pos":[2111,2300],"source":" When the option is not specified, [!INCLUDE[vcprvc](../../build/includes/vcprvc_md.md)] allows non-conformant code that invokes functions declared `inline` even if no definition is visible."},{"content":"For more information, see the C++11 standard, in section 3.2 and section 7.1.2.","pos":[2301,2380]},{"content":"This compiler option was introduced in Visual Studio 2013 Update 2.","pos":[2381,2448]},{"content":"To use the <bpt id=\"p1\">**</bpt>/Zc:inline<ept id=\"p1\">**</ept> option, update non-compliant code.","pos":[2455,2515],"source":"To use the **/Zc:inline** option, update non-compliant code."},{"content":"This example shows how the non-compliant use of an inline function declaration without a definition still compiles and links when the default <bpt id=\"p1\">**</bpt>/Zc:inline-<ept id=\"p1\">**</ept> option is used:","pos":[2516,2689],"source":" This example shows how the non-compliant use of an inline function declaration without a definition still compiles and links when the default **/Zc:inline-** option is used:"},{"content":"When <bpt id=\"p1\">**</bpt>/Zc:inline<ept id=\"p1\">**</ept> is enabled, the same code causes a <bpt id=\"p2\">[</bpt>LNK2019<ept id=\"p2\">](../../error-messages/tool-errors/linker-tools-error-lnk2019.md)</ept> error, because the compiler does not emit a non-inlined code body for <ph id=\"ph1\">`Example::inline_call`</ph> in example.obj.","pos":[3579,3816],"source":"When **/Zc:inline** is enabled, the same code causes a [LNK2019](../../error-messages/tool-errors/linker-tools-error-lnk2019.md) error, because the compiler does not emit a non-inlined code body for `Example::inline_call` in example.obj."},{"content":"This causes the non-inlined call in <ph id=\"ph1\">`main`</ph> to reference an undefined external symbol.","pos":[3817,3902],"source":" This causes the non-inlined call in `main` to reference an undefined external symbol."},{"content":"To resolve this error, you can remove the <ph id=\"ph1\">`inline`</ph> keyword from the declaration of <ph id=\"ph2\">`Example::inline_call`</ph>, move the definition of <ph id=\"ph3\">`Example::inline_call`</ph> into the header file, or move the implementation of <ph id=\"ph4\">`Example`</ph> into main.cpp.","pos":[3909,4138],"source":"To resolve this error, you can remove the `inline` keyword from the declaration of `Example::inline_call`, move the definition of `Example::inline_call` into the header file, or move the implementation of `Example` into main.cpp."},{"content":"The next example moves the definition into the header file, where it is visible to any caller that includes the header.","pos":[4139,4258]},{"pos":[5048,5171],"content":"For more information about conformance issues in Visual C++, see <bpt id=\"p1\">[</bpt>Nonstandard Behavior<ept id=\"p1\">](../../cpp/nonstandard-behavior.md)</ept>.","source":"For more information about conformance issues in Visual C++, see [Nonstandard Behavior](../../cpp/nonstandard-behavior.md)."},{"content":"To set this compiler option in the Visual Studio development environment","pos":[5181,5253]},{"content":"Open the project's <bpt id=\"p1\">**</bpt>Property Pages<ept id=\"p1\">**</ept> dialog box.","pos":[5263,5312],"source":"Open the project's **Property Pages** dialog box."},{"content":"For details, see <bpt id=\"p1\">[</bpt>Working with Project Properties<ept id=\"p1\">](../../ide/working-with-project-properties.md)</ept>.","pos":[5313,5410],"source":" For details, see [Working with Project Properties](../../ide/working-with-project-properties.md)."},{"pos":[5420,5448],"content":"Select the <bpt id=\"p1\">**</bpt>C/C++<ept id=\"p1\">**</ept> folder.","source":"Select the **C/C++** folder."},{"pos":[5458,5500],"content":"Select the <bpt id=\"p1\">**</bpt>Command Line<ept id=\"p1\">**</ept> property page.","source":"Select the **Command Line** property page."},{"pos":[5510,5600],"content":"Modify the <bpt id=\"p1\">**</bpt>Additional Options<ept id=\"p1\">**</ept> property to include <ph id=\"ph1\">`/Zc:inline`</ph> and then choose <bpt id=\"p2\">**</bpt>OK<ept id=\"p2\">**</ept>.","source":"Modify the **Additional Options** property to include `/Zc:inline` and then choose **OK**."},{"content":"See Also","pos":[5609,5617]},{"content":"/Zc (Conformance)","pos":[5622,5639]}],"content":"---\ntitle: \"-Zc:inline (Remove unreferenced COMDAT) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"/Zc:inline\"\n  - \"VC.Project.VCCLCompilerTool.RemoveUnreferencedCodeData\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"-Zc compiler options (C++)\"\n  - \"/Zc compiler options (C++)\"\n  - \"Zc compiler options (C++)\"\n  - \"/Zc:inline\"\nms.assetid: a4c94224-1d73-4bea-a9d5-4fa73dc924df\ncaps.latest.revision: 7\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# /Zc:inline (Remove unreferenced COMDAT)\nRemoves unreferenced functions or data that are COMDATs or only have internal linkage. When **/Zc:inline** is specified, the compiler requires that translation units that use inline data or inline functions must also include the definitions for the data or functions.  \n  \n## Syntax  \n  \n```  \n/Zc:inline[-]  \n```  \n  \n## Remarks  \n When **/Zc:inline** is specified, the compiler does not emit symbol information for unreferenced COMDAT functions or data, or for functions or data that have internal linkage only. By default, this option is off (**/Zc:inline-**). This optimization simplifies some of the work performed by the linker in release builds or when the linker option [/OPT:REF](../../build/reference/opt-optimizations.md) is specified. When the compiler performs this optimization, it can significantly reduce .obj file size and improve linker speeds. This compiler option is not enabled when optimizations are disabled ([/Od](../../build/reference/od-disable-debug.md)) or when [/GL (Whole Program Optimization)](../../build/reference/gl-whole-program-optimization.md) is specified.  \n  \n If **/Zc:inline** is specified, the compiler enforces the C++11 requirement that all functions declared `inline` must have a definition available in the same translation unit if they are used. When the option is not specified, [!INCLUDE[vcprvc](../../build/includes/vcprvc_md.md)] allows non-conformant code that invokes functions declared `inline` even if no definition is visible. For more information, see the C++11 standard, in section 3.2 and section 7.1.2. This compiler option was introduced in Visual Studio 2013 Update 2.  \n  \n To use the **/Zc:inline** option, update non-compliant code. This example shows how the non-compliant use of an inline function declaration without a definition still compiles and links when the default **/Zc:inline-** option is used:  \n  \n```cpp  \n// example.h  \n// Compile by using: cl /W4 /EHsc /O2 zcinline.cpp example.cpp  \n#pragma once  \n  \nclass Example {  \npublic:  \n   inline void inline_call(); // declared but not defined inline  \n   void normal_call();  \n   Example() {};  \n};  \n```  \n  \n```cpp  \n// example.cpp  \n// Compile by using: cl /W4 /EHsc /O2 zcinline.cpp example.cpp  \n#include <stdio.h>  \n#include \"example.h\"  \n  \nvoid Example::inline_call() {  \n   printf(\"inline_call was called.\\n\");   \n}  \n  \nvoid Example::normal_call() {  \n   printf(\"normal_call was called.\\n\");   \n   inline_call(); // with /Zc:inline-, inline_call forced into .obj file  \n}  \n```  \n  \n```cpp  \n// zcinline.cpp  \n// Compile by using: cl /W4 /EHsc /O2 zcinline.cpp example.cpp  \n#include \"example.h\"  \n  \nvoid main() {  \n   Example example;  \n   example.inline_call(); // normal call when definition unavailable  \n}  \n```  \n  \n When **/Zc:inline** is enabled, the same code causes a [LNK2019](../../error-messages/tool-errors/linker-tools-error-lnk2019.md) error, because the compiler does not emit a non-inlined code body for `Example::inline_call` in example.obj. This causes the non-inlined call in `main` to reference an undefined external symbol.  \n  \n To resolve this error, you can remove the `inline` keyword from the declaration of `Example::inline_call`, move the definition of `Example::inline_call` into the header file, or move the implementation of `Example` into main.cpp. The next example moves the definition into the header file, where it is visible to any caller that includes the header.  \n  \n```cpp  \n// example2.h  \n// Compile by using: cl /W4 /EHsc /O2 zcinline2.cpp example2.cpp  \n#pragma once  \n#include <stdio.h>  \n  \nclass Example2 {  \npublic:  \n   inline void inline_call() {  \n      printf(\"inline_call was called.\\n\");   \n   }  \n   void normal_call();  \n   Example2() {};  \n};  \n```  \n  \n```cpp  \n// example2.cpp  \n// Compile by using: cl /W4 /EHsc /O2 zcinline2.cpp example2.cpp  \n#include \"example2.h\"  \n  \nvoid Example2::normal_call() {  \n   printf(\"normal_call was called.\\n\");   \n   inline_call();   \n}  \n```  \n  \n```cpp  \n// zcinline2.cpp  \n// Compile by using: cl /W4 /EHsc /O2 zcinline2.cpp example2.cpp  \n#include \"example2.h\"  \n  \nvoid main() {  \n   Example2 example2;  \n   example2.inline_call(); // normal call when definition unavailable  \n}  \n```  \n  \n For more information about conformance issues in Visual C++, see [Nonstandard Behavior](../../cpp/nonstandard-behavior.md).  \n  \n### To set this compiler option in the Visual Studio development environment  \n  \n1.  Open the project's **Property Pages** dialog box. For details, see [Working with Project Properties](../../ide/working-with-project-properties.md).  \n  \n2.  Select the **C/C++** folder.  \n  \n3.  Select the **Command Line** property page.  \n  \n4.  Modify the **Additional Options** property to include `/Zc:inline` and then choose **OK**.  \n  \n## See Also  \n [/Zc (Conformance)](../../build/reference/zc-conformance.md)"}