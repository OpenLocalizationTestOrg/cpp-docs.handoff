{"nodes":[{"pos":[12,70],"content":"_InterlockedIncrement Intrinsic Functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_InterlockedIncrement Intrinsic Functions | Microsoft Docs","pos":[0,58]}]},{"content":"_InterlockedIncrement Intrinsic Functions","pos":[2084,2125]},{"content":"Microsoft Specific","pos":[2128,2146]},{"pos":[2155,2365],"content":"Provide compiler intrinsic support for the Win32 <ph id=\"ph1\">[!INCLUDE[winsdkshort](../atl-mfc-shared/reference/includes/winsdkshort_md.md)]</ph> <bpt id=\"p1\">[</bpt>InterlockedIncrement<ept id=\"p1\">](http://msdn.microsoft.com/library/ms683614.aspx)</ept> function.","source":"Provide compiler intrinsic support for the Win32 [!INCLUDE[winsdkshort](../atl-mfc-shared/reference/includes/winsdkshort_md.md)] [InterlockedIncrement](http://msdn.microsoft.com/library/ms683614.aspx) function."},{"content":"Syntax","pos":[2374,2380]},{"content":"Parameters","pos":[3161,3171]},{"content":"[in, out]","pos":[3175,3184]},{"content":"Pointer to the variable to be incremented.","pos":[3199,3241]},{"content":"Return Value","pos":[3250,3262]},{"content":"The return value is the resulting incremented value.","pos":[3266,3318]},{"content":"Requirements","pos":[3327,3339]},{"content":"Intrinsic","pos":[3346,3355]},{"content":"Architecture","pos":[3356,3368]},{"content":"Header","pos":[3369,3375]},{"pos":[3455,3483],"content":", <ph id=\"ph1\">`_InterlockedIncrement16`</ph>,","source":", `_InterlockedIncrement16`, "},{"pos":[3510,3519],"content":"x86, ARM,"},{"content":"intrin.h&gt;","pos":[3586,3595],"source":"intrin.h>"},{"pos":[3627,3839],"content":", <ph id=\"ph1\">`_InterlockedIncrement_rel`</ph>, <ph id=\"ph2\">`_InterlockedIncrement_nf`</ph>, <ph id=\"ph3\">`_InterlockedIncrement16_acq`</ph>, <ph id=\"ph4\">`_InterlockedIncrement16_rel`</ph>, <ph id=\"ph5\">`_InterlockedIncrement16_nf`</ph>, <ph id=\"ph6\">`_InterlockedIncrement64_acq`</ph>, <ph id=\"ph7\">`_InterlockedIncrement64_rel`</ph>,","source":", `_InterlockedIncrement_rel`, `_InterlockedIncrement_nf`, `_InterlockedIncrement16_acq`, `_InterlockedIncrement16_rel`, `_InterlockedIncrement16_nf`, `_InterlockedIncrement64_acq`, `_InterlockedIncrement64_rel`, "},{"content":"ARM","pos":[3869,3872]},{"content":"intrin.h&gt;","pos":[3875,3884],"source":"intrin.h>"},{"content":"Remarks","pos":[3894,3901]},{"pos":[3905,4076],"content":"There are several variations on <ph id=\"ph1\">`_InterlockedIncrement`</ph> that vary based on the data types they involve and whether processor-specific acquire or release semantics is used.","source":"There are several variations on `_InterlockedIncrement` that vary based on the data types they involve and whether processor-specific acquire or release semantics is used."},{"pos":[4083,4285],"content":"While the <ph id=\"ph1\">`_InterlockedIncrement`</ph> function operates on 32-bit integer values, <ph id=\"ph2\">`_InterlockedIncrement16`</ph> operates on 16-bit integer values and <ph id=\"ph3\">`_InterlockedIncrement64`</ph> operates on 64-bit integer values.","source":"While the `_InterlockedIncrement` function operates on 32-bit integer values, `_InterlockedIncrement16` operates on 16-bit integer values and `_InterlockedIncrement64` operates on 64-bit integer values."},{"content":"On ARM platforms, use the intrinsics with <ph id=\"ph1\">`_acq`</ph> and <ph id=\"ph2\">`_rel`</ph> suffixes if you need acquire and release semantics, such as at the beginning and end of a critical section.","pos":[4292,4459],"source":"On ARM platforms, use the intrinsics with `_acq` and `_rel` suffixes if you need acquire and release semantics, such as at the beginning and end of a critical section."},{"content":"The intrinsic with an <ph id=\"ph1\">`_nf`</ph> (\"no fence\") suffix does not act as a memory barrier.","pos":[4460,4541],"source":" The intrinsic with an `_nf` (\"no fence\") suffix does not act as a memory barrier."},{"content":"The variable pointed to by the <ph id=\"ph1\">`lpAddend`</ph> parameter must be aligned on a 32-bit boundary; otherwise, this function fails on multiprocessor x86 systems and any non-x86 systems.","pos":[4548,4723],"source":"The variable pointed to by the `lpAddend` parameter must be aligned on a 32-bit boundary; otherwise, this function fails on multiprocessor x86 systems and any non-x86 systems."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>align<ept id=\"p1\">](../cpp/align-cpp.md)</ept>.","pos":[4724,4779],"source":" For more information, see [align](../cpp/align-cpp.md)."},{"pos":[4786,4841],"content":"The Win32 function is declared in <ph id=\"ph1\">`Wdm.h`</ph> or <ph id=\"ph2\">`Ntddk.h`</ph>.","source":"The Win32 function is declared in `Wdm.h` or `Ntddk.h`."},{"content":"These routines are only available as intrinsics.","pos":[4848,4896]},{"content":"Example","pos":[4905,4912]},{"pos":[4916,5055],"content":"For a sample of how to use <ph id=\"ph1\">`_InterlockedIncrement`</ph>, see <bpt id=\"p1\">[</bpt>_InterlockedDecrement<ept id=\"p1\">](../intrinsics/interlockeddecrement-intrinsic-functions.md)</ept>.","source":"For a sample of how to use `_InterlockedIncrement`, see [_InterlockedDecrement](../intrinsics/interlockeddecrement-intrinsic-functions.md)."},{"content":"END Microsoft Specific","pos":[5064,5086]},{"content":"See Also","pos":[5095,5103]},{"content":"Compiler Intrinsics","pos":[5108,5127]},{"content":"Keywords","pos":[5172,5180]},{"content":"Conflicts with the x86 Compiler","pos":[5211,5242]}],"content":"---\ntitle: \"_InterlockedIncrement Intrinsic Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"_InterlockedIncrement_acq\"\n  - \"_InterlockedIncrement16_rel_cpp\"\n  - \"_InterlockedIncrement16_cpp\"\n  - \"_InterlockedIncrement64_rel\"\n  - \"_InterlockedIncrement_rel\"\n  - \"_InterlockedIncrement64_nf\"\n  - \"_InterlockedIncrement16_acq_cpp\"\n  - \"_InterlockedIncrement_rel_cpp\"\n  - \"_InterlockedIncrement64\"\n  - \"_InterlockedIncrement64_rel_cpp\"\n  - \"_InterlockedIncrement16_nf\"\n  - \"_InterlockedIncrement16_rel\"\n  - \"_InterlockedIncrement16_acq\"\n  - \"_InterlockedIncrement_nf\"\n  - \"_InterlockedIncrement_acq_cpp\"\n  - \"_InterlockedIncrement64_cpp\"\n  - \"_InterlockedIncrement64_acq_cpp\"\n  - \"_InterlockedIncrement\"\n  - \"_InterlockedIncrement_cpp\"\n  - \"_InterlockedIncrement64_acq\"\n  - \"_InterlockedIncrement16\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"_InterlockedIncrement64_rel intrinsic\"\n  - \"_InterlockedIncrement16_rel intrinsic\"\n  - \"InterlockedIncrement64_acq intrinsic\"\n  - \"_InterlockedIncrement16 intrinsic\"\n  - \"_InterlockedIncrement16_acq intrinsic\"\n  - \"_InterlockedIncrement_nf intrinsic\"\n  - \"_InterlockedIncrement_rel intrinsic\"\n  - \"_InterlockedIncrement64_nf intrinsic\"\n  - \"InterlockedIncrement_rel intrinsic\"\n  - \"InterlockedIncrement_acq intrinsic\"\n  - \"_InterlockedIncrement64_acq intrinsic\"\n  - \"_InterlockedIncrement16_nf intrinsic\"\n  - \"_InterlockedIncrement intrinsic\"\n  - \"_InterlockedIncrement64 intrinsic\"\n  - \"InterlockedIncrement64_rel intrinsic\"\n  - \"InterlockedIncrement64 intrinsic\"\n  - \"InterlockedIncrement16 intrinsic\"\n  - \"_InterlockedIncrement_acq intrinsic\"\n  - \"InterlockedIncrement intrinsic\"\nms.assetid: 37700615-f372-438b-bcef-d76e11839482\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _InterlockedIncrement Intrinsic Functions\n**Microsoft Specific**  \n  \n Provide compiler intrinsic support for the Win32 [!INCLUDE[winsdkshort](../atl-mfc-shared/reference/includes/winsdkshort_md.md)] [InterlockedIncrement](http://msdn.microsoft.com/library/ms683614.aspx) function.  \n  \n## Syntax  \n  \n```  \nlong _InterlockedIncrement(  \n   long * lpAddend  \n);  \nlong _InterlockedIncrement_acq(  \n   long * lpAddend  \n);  \nlong _InterlockedIncrement_rel(  \n   long * lpAddend  \n);  \nlong _InterlockedIncrement_nf(  \n   long * lpAddend  \n);  \nshort _InterlockedIncrement16(  \n   short * lpAddend  \n);  \nshort _InterlockedIncrement16_acq(  \n   short * lpAddend  \n);  \nshort _InterlockedIncrement16_rel(  \n   short * lpAddend  \n);  \nshort _InterlockedIncrement16_nf (  \n   short * lpAddend  \n);  \n__int64 _InterlockedIncrement64(  \n   __int64 * lpAddend  \n);  \n__int64 _InterlockedIncrement64_acq(  \n   __int64 * lpAddend  \n);  \n__int64 _InterlockedIncrement64_rel(  \n   __int64 * lpAddend  \n);   \n__int64 _InterlockedIncrement64_nf(  \n   __int64 * lpAddend  \n);  \n```  \n  \n#### Parameters  \n [in, out] `lpAddend`  \n Pointer to the variable to be incremented.  \n  \n## Return Value  \n The return value is the resulting incremented value.  \n  \n## Requirements  \n  \n|Intrinsic|Architecture|Header|  \n|---------------|------------------|------------|  \n|`_InterlockedIncrement`, `_InterlockedIncrement16`, `_InterlockedIncrement64`|x86, ARM, [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]|\\<intrin.h>|  \n|`_InterlockedIncrement_acq`, `_InterlockedIncrement_rel`, `_InterlockedIncrement_nf`, `_InterlockedIncrement16_acq`, `_InterlockedIncrement16_rel`, `_InterlockedIncrement16_nf`, `_InterlockedIncrement64_acq`, `_InterlockedIncrement64_rel`, `_InterlockedIncrement64_nf`|ARM|\\<intrin.h>|  \n  \n## Remarks  \n There are several variations on `_InterlockedIncrement` that vary based on the data types they involve and whether processor-specific acquire or release semantics is used.  \n  \n While the `_InterlockedIncrement` function operates on 32-bit integer values, `_InterlockedIncrement16` operates on 16-bit integer values and `_InterlockedIncrement64` operates on 64-bit integer values.  \n  \n On ARM platforms, use the intrinsics with `_acq` and `_rel` suffixes if you need acquire and release semantics, such as at the beginning and end of a critical section. The intrinsic with an `_nf` (\"no fence\") suffix does not act as a memory barrier.  \n  \n The variable pointed to by the `lpAddend` parameter must be aligned on a 32-bit boundary; otherwise, this function fails on multiprocessor x86 systems and any non-x86 systems. For more information, see [align](../cpp/align-cpp.md).  \n  \n The Win32 function is declared in `Wdm.h` or `Ntddk.h`.  \n  \n These routines are only available as intrinsics.  \n  \n## Example  \n For a sample of how to use `_InterlockedIncrement`, see [_InterlockedDecrement](../intrinsics/interlockeddecrement-intrinsic-functions.md).  \n  \n## END Microsoft Specific  \n  \n## See Also  \n [Compiler Intrinsics](../intrinsics/compiler-intrinsics.md)   \n [Keywords](../cpp/keywords-cpp.md)   \n [Conflicts with the x86 Compiler](../build/conflicts-with-the-x86-compiler.md)"}