{"nodes":[{"pos":[12,52],"content":"Logical OR Operator: || | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Logical OR Operator: || | Microsoft Docs","pos":[0,40]}]},{"content":"Logical OR Operator: ||","pos":[677,700]},{"content":"Syntax","pos":[704,710]},{"content":"Remarks","pos":[796,803]},{"content":"The logical OR operator (<ph id=\"ph1\">`||`</ph>) returns the boolean value <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if either or both operands is <bpt id=\"p2\">**</bpt>true<ept id=\"p2\">**</ept> and returns <bpt id=\"p3\">**</bpt>false<ept id=\"p3\">**</ept> otherwise.","pos":[807,944],"source":"The logical OR operator (`||`) returns the boolean value **true** if either or both operands is **true** and returns **false** otherwise."},{"content":"The operands are implicitly converted to type <ph id=\"ph1\">`bool`</ph> prior to evaluation, and the result is of type <ph id=\"ph2\">`bool`</ph>.","pos":[945,1052],"source":" The operands are implicitly converted to type `bool` prior to evaluation, and the result is of type `bool`."},{"content":"Logical OR has left-to-right associativity.","pos":[1053,1096]},{"content":"The operands to the logical OR operator need not be of the same type, but they must be of integral or pointer type.","pos":[1103,1218]},{"content":"The operands are commonly relational or equality expressions.","pos":[1219,1280]},{"content":"The first operand is completely evaluated and all side effects are completed before continuing evaluation of the logical OR expression.","pos":[1287,1422]},{"content":"The second operand is evaluated only if the first operand evaluates to false (0).","pos":[1429,1510]},{"content":"This eliminates needless evaluation of the second operand when the logical OR expression is true.","pos":[1511,1608]},{"content":"In the above example, if <ph id=\"ph1\">`x`</ph> is equal to either <ph id=\"ph2\">`w`</ph>, <ph id=\"ph3\">`y`</ph>, or <ph id=\"ph4\">`z`</ph>, the second argument to the <ph id=\"ph5\">`printf`</ph> function evaluates to true and the value 1 is printed.","pos":[1679,1835],"source":"In the above example, if `x` is equal to either `w`, `y`, or `z`, the second argument to the `printf` function evaluates to true and the value 1 is printed."},{"content":"Otherwise, it evaluates to false and the value 0 is printed.","pos":[1836,1896]},{"content":"As soon as one of the conditions evaluates to true, evaluation ceases.","pos":[1897,1967]},{"content":"Operator Keyword for &amp;#124;&amp;#124;","pos":[1976,2009],"source":"Operator Keyword for &#124;&#124;"},{"content":"The <bpt id=\"p1\">**</bpt>or<ept id=\"p1\">**</ept> operator is the text equivalent of <ph id=\"ph1\">`||`</ph>.","pos":[2013,2064],"source":"The **or** operator is the text equivalent of `||`."},{"content":"There are two ways to access the <bpt id=\"p1\">**</bpt>or<ept id=\"p1\">**</ept> operator in your programs: include the header file <ph id=\"ph1\">`iso646.h`</ph>, or compile with the <bpt id=\"p2\">[</bpt>/Za<ept id=\"p2\">](../build/reference/za-ze-disable-language-extensions.md)</ept> (Disable language extensions) compiler option.","pos":[2065,2297],"source":" There are two ways to access the **or** operator in your programs: include the header file `iso646.h`, or compile with the [/Za](../build/reference/za-ze-disable-language-extensions.md) (Disable language extensions) compiler option."},{"content":"Example","pos":[2306,2313]},{"content":"See Also","pos":[2777,2785]},{"content":"<bpt id=\"p1\">[</bpt>C++ Built-in Operators Precedence and Associativity<ept id=\"p1\">](cpp-built-in-operators-precedence-and-associativity.md)</ept><ph id=\"ph1\">\n</ph><bpt id=\"p2\"> [</bpt>C++ Built-in Operators, Precedence and Associativity<ept id=\"p2\">](../cpp/cpp-built-in-operators-precedence-and-associativity.md)</ept>","pos":[2788,3016],"source":"[C++ Built-in Operators Precedence and Associativity](cpp-built-in-operators-precedence-and-associativity.md)\n [C++ Built-in Operators, Precedence and Associativity](../cpp/cpp-built-in-operators-precedence-and-associativity.md)"},{"content":"C Logical Operators","pos":[3022,3041]}],"content":"---\ntitle: \"Logical OR Operator: || | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"||\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"OR operator, logical\"\n  - \"|| operator\"\n  - \"OR operator\"\n  - \"logical OR operator\"\nms.assetid: 31837c99-2655-4bf3-8ded-f13b7a9dc533\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Logical OR Operator: ||\n## Syntax  \n  \n```  \n  \nlogical-or-expression   \n||  \n logical-and-expression  \n  \n```  \n  \n## Remarks  \n The logical OR operator (`||`) returns the boolean value **true** if either or both operands is **true** and returns **false** otherwise. The operands are implicitly converted to type `bool` prior to evaluation, and the result is of type `bool`. Logical OR has left-to-right associativity.  \n  \n The operands to the logical OR operator need not be of the same type, but they must be of integral or pointer type. The operands are commonly relational or equality expressions.  \n  \n The first operand is completely evaluated and all side effects are completed before continuing evaluation of the logical OR expression.  \n  \n The second operand is evaluated only if the first operand evaluates to false (0). This eliminates needless evaluation of the second operand when the logical OR expression is true.  \n  \n```  \nprintf( \"%d\" , (x == w || x == y || x == z) );  \n```  \n  \n In the above example, if `x` is equal to either `w`, `y`, or `z`, the second argument to the `printf` function evaluates to true and the value 1 is printed. Otherwise, it evaluates to false and the value 0 is printed. As soon as one of the conditions evaluates to true, evaluation ceases.  \n  \n## Operator Keyword for &#124;&#124;  \n The **or** operator is the text equivalent of `||`. There are two ways to access the **or** operator in your programs: include the header file `iso646.h`, or compile with the [/Za](../build/reference/za-ze-disable-language-extensions.md) (Disable language extensions) compiler option.  \n  \n## Example  \n  \n```  \n// expre_Logical_OR_Operator.cpp  \n// compile with: /EHsc  \n// Demonstrate logical OR  \n#include <iostream>  \nusing namespace std;  \nint main() {  \n   int a = 5, b = 10, c = 15;  \n   cout  << boolalpha  \n         << \"The true expression \"  \n         << \"a < b || b > c yields \"  \n         << (a < b || b > c) << endl  \n         << \"The false expression \"  \n         << \"a > b || b > c yields \"  \n         << (a > b || b > c) << endl;  \n}  \n```  \n  \n## See Also  \n[C++ Built-in Operators Precedence and Associativity](cpp-built-in-operators-precedence-and-associativity.md)\n [C++ Built-in Operators, Precedence and Associativity](../cpp/cpp-built-in-operators-precedence-and-associativity.md)   \n [C Logical Operators](../c-language/c-logical-operators.md)"}