{"nodes":[{"pos":[12,48],"content":"make_pair (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"make_pair (STL-CLR) | Microsoft Docs","pos":[0,36]}]},{"content":"make_pair (STL/CLR)","pos":[625,644]},{"pos":[645,681],"content":"Make a <ph id=\"ph1\">`pair`</ph> from a pair of values.","source":"Make a `pair` from a pair of values."},{"content":"Syntax","pos":[690,696]},{"content":"Parameters","pos":[840,850]},{"content":"Value1","pos":[854,860]},{"content":"The type of the first wrapped value.","pos":[864,900]},{"content":"Value2","pos":[907,913]},{"content":"The type of the second wrapped value.","pos":[917,954]},{"content":"first","pos":[961,966]},{"content":"First value to wrap.","pos":[970,990]},{"content":"second","pos":[997,1003]},{"content":"Second value to wrap.","pos":[1007,1028]},{"content":"Remarks","pos":[1037,1044]},{"content":"The template function returns <ph id=\"ph1\">`pair&lt;``Value1``,`</ph> <ph id=\"ph2\">`Value2``&gt;(``first``,`</ph> <ph id=\"ph3\">`second``)`</ph>.","pos":[1048,1132],"source":"The template function returns `pair<``Value1``,` `Value2``>(``first``,` `second``)`."},{"content":"You use it to construct a <ph id=\"ph1\">`pair``&lt;``Value1``,`</ph> <ph id=\"ph2\">`Value2``&gt;`</ph> object from a pair of values.","pos":[1133,1221],"source":" You use it to construct a `pair``<``Value1``,` `Value2``>` object from a pair of values."},{"content":"Example","pos":[1230,1237]},{"content":"Requirements","pos":[1667,1679]},{"pos":[1683,1712],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/utility&gt;","source":"**Header:** \\<cliext/utility>"},{"pos":[1719,1740],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[1749,1757]},{"content":"range_adapter (STL/CLR)","pos":[1762,1785]}],"content":"---\ntitle: \"make_pair (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::make_pair\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"make_pair function [STL/CLR]\"\nms.assetid: 74733f2c-97b0-4d69-b431-5ab8f0de9e3e\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# make_pair (STL/CLR)\nMake a `pair` from a pair of values.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Value1,  \n    typename Value2>  \n    pair<Value1, Value2> make_pair(Value1 first, Value2 second);  \n```  \n  \n#### Parameters  \n Value1  \n The type of the first wrapped value.  \n  \n Value2  \n The type of the second wrapped value.  \n  \n first  \n First value to wrap.  \n  \n second  \n Second value to wrap.  \n  \n## Remarks  \n The template function returns `pair<``Value1``,` `Value2``>(``first``,` `second``)`. You use it to construct a `pair``<``Value1``,` `Value2``>` object from a pair of values.  \n  \n## Example  \n  \n```  \n// cliext_make_pair.cpp   \n// compile with: /clr   \n#include <cliext/utility>   \n  \nint main()   \n    {   \n    cliext::pair<wchar_t, int> c1(L'x', 3);   \n    System::Console::WriteLine(\"[{0}, {1}]\", c1.first, c1.second);   \n  \n    c1 = cliext::make_pair(L'y', 4);   \n    System::Console::WriteLine(\"[{0}, {1}]\", c1.first, c1.second);   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n[x, 3]  \n[y, 4]  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/utility>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [range_adapter (STL/CLR)](../dotnet/range-adapter-stl-clr.md)"}