<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">476424aa6058560f29495ee5262e199ab367dafd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\how-to-create-and-use-ccomptr-and-ccomqiptr-instances.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ce69cc96f954541e4fe2eccdadd6c1b2b5caf5ee</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">33c6f4d3240126d788cbc873e932dd22e3372bac</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Create and Use CComPtr and CComQIPtr Instances | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Create and Use CComPtr and CComQIPtr Instances</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In classic Windows programming, libraries are often implemented as COM objects (or more precisely, as COM servers).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Many Windows operating system components are implemented as COM servers, and many contributors provide libraries in this form.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For information about the basics of COM, see <bpt id="p1">[</bpt>Component Object Model (COM)<ept id="p1">](http://msdn.microsoft.com/en-us/3578ca42-a4b6-44b3-ad5b-aeb5fa61f3f4)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When you instantiate a Component Object Model (COM) object, store the interface pointer in a COM smart pointer, which performs the reference counting by using calls to <ph id="ph1">`AddRef`</ph> and <ph id="ph2">`Release`</ph> in the destructor.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you are using the Active Template Library (ATL) or the Microsoft Foundation Class Library (MFC), then use the <ph id="ph1">`CComPtr`</ph> smart pointer.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If you are not using ATL or MFC, then use <ph id="ph1">`_com_ptr_t`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Because there is no COM equivalent to <ph id="ph1">`std::unique_ptr`</ph>, use these smart pointers for both single-owner and multiple-owner scenarios.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Both <ph id="ph1">`CComPtr`</ph> and <ph id="ph2">`ComQIPtr`</ph> support move operations that have rvalue references.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following example shows how to use <ph id="ph1">`CComPtr`</ph> to instantiate a COM object and obtain pointers to its interfaces.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Notice that the <ph id="ph1">`CComPtr::CoCreateInstance`</ph> member function is used to create the COM object, instead of the Win32 function that has the same name.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>COM_smart_pointers#01</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>and its relatives are part of the ATL and are defined in atlcomcli.h.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>is declared in comip.h.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The compiler creates specializations of <ph id="ph1">`_com_ptr_t`</ph> when it generates wrapper classes for type libraries.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>ATL also provides <ph id="ph1">`CComQIPtr`</ph>, which has a simpler syntax for querying a COM object to retrieve an additional interface.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>However, we recommend <ph id="ph1">`CComPtr`</ph> because it does everything that <ph id="ph2">`CComQIPtr`</ph> can do and is semantically more consistent with raw COM interface pointers.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you use a <ph id="ph1">`CComPtr`</ph> to query for an interface, the new interface pointer is placed in an out parameter.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If the call fails, an HRESULT is returned, which is the typical COM pattern.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">`CComQIPtr`</ph>, the return value is the pointer itself, and if the call fails, the internal HRESULT return value cannot be accessed.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following two lines show how the error handling mechanisms in <ph id="ph1">`CComPtr`</ph> and <ph id="ph2">`CComQIPtr`</ph> differ.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>COM_smart_pointers#02</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>provides a specialization for IDispatch that enables it to store pointers to COM automation components and invoke the methods on the interface by using late binding.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>is a typedef for <ph id="ph1">`CComQIPtr&lt;IDispatch, &amp;IIDIDispatch&gt;`</ph>, which is implicitly convertible to <ph id="ph2">`CComPtr&lt;IDispatch&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Therefore, when any of these three names appears in code, it is equivalent to <ph id="ph1">`CComPtr&lt;IDispatch&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following example shows how to obtain a pointer to the Microsoft Word object model by using a <ph id="ph1">`CComPtr&lt;IDispatch&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>COM_smart_pointers#03</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Smart Pointers</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>