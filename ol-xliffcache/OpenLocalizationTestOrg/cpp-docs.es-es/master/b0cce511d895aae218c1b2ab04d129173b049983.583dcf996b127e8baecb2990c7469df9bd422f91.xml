{"nodes":[{"pos":[12,49],"content":"Compiler Error C3767 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Error C3767 | Microsoft Docs","pos":[0,37]}]},{"pos":[624,644],"content":"Compiler Error C3767","linkify":"Compiler Error C3767","nodes":[{"content":"Compiler Error C3767","pos":[0,20]}]},{"content":"'function' candidate function(s) not accessible","pos":[645,692]},{"content":"A friend function defined in a class is not supposed to be treated as if it were defined and declared in the global namespace scope.","pos":[699,831]},{"content":"It can, however, be found by argument-dependent lookup.","pos":[832,887]},{"pos":[894,1143],"content":"C3767 may also be caused by a breaking change: native types are now private by default in a <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept> compilation; see <bpt id=\"p2\">[</bpt>Type visibility<ept id=\"p2\">](../../dotnet/how-to-define-and-consume-classes-and-structs-cpp-cli.md#BKMK_Type_visibility)</ept> for more information.","source":"C3767 may also be caused by a breaking change: native types are now private by default in a **/clr** compilation; see [Type visibility](../../dotnet/how-to-define-and-consume-classes-and-structs-cpp-cli.md#BKMK_Type_visibility) for more information."},{"pos":[1152,1159],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following sample generates C3767:","pos":[1163,1200]},{"content":"The following sample generates C3767:","pos":[1738,1775]},{"content":"In Visual C++ .NET 2002, the compiler changed the way it looked up symbols.","pos":[2139,2214]},{"content":"In some cases, it would have automatically looked for symbols in a specified namespace.","pos":[2215,2302]},{"content":"Now, it uses argument-dependent lookup.","pos":[2303,2342]},{"content":"The following sample generates C3767:","pos":[2349,2386]},{"content":"For code that is valid in Visual C++ .NET 2003 and Visual C++ .NET 2002, declare the friend in class scope and define it in namespace scope:","pos":[2723,2863]}],"content":"---\ntitle: \"Compiler Error C3767 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"C3767\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C3767\"\nms.assetid: 5247cdcd-639c-4527-bd37-37e74c4e8fab\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Compiler Error C3767\n'function' candidate function(s) not accessible  \n  \n A friend function defined in a class is not supposed to be treated as if it were defined and declared in the global namespace scope. It can, however, be found by argument-dependent lookup.  \n  \n C3767 may also be caused by a breaking change: native types are now private by default in a **/clr** compilation; see [Type visibility](../../dotnet/how-to-define-and-consume-classes-and-structs-cpp-cli.md#BKMK_Type_visibility) for more information.  \n  \n## Example  \n The following sample generates C3767:  \n  \n```  \n// C3767a.cpp  \n// compile with: /clr  \nusing namespace System;  \npublic delegate void TestDel();  \n  \npublic ref class MyClass {  \npublic:  \n   static event TestDel^ MyClass_Event;  \n};  \n  \npublic ref class MyClass2 : public MyClass {  \npublic:  \n   void Test() {  \n      MyClass^ patient = gcnew MyClass;  \n      patient->MyClass_Event();  \n    }  \n};  \n  \nint main() {  \n   MyClass^ x = gcnew MyClass;  \n   x->MyClass_Event();   // C3767  \n  \n   // OK  \n   MyClass2^ y = gcnew MyClass2();  \n   y->Test();  \n};  \n```  \n  \n The following sample generates C3767:  \n  \n```  \n// C3767c.cpp  \n// compile with: /clr /c  \n  \nref class Base  {  \nprotected:  \n   void Method() {  \n      System::Console::WriteLine(\"protected\");  \n   }  \n};  \n  \nref class Der : public Base {  \n   void Method() {  \n      ((Base^)this)->Method();   // C3767  \n      // try the following line instead  \n      // Base::Method();  \n   }  \n};  \n```  \n  \n In Visual C++ .NET 2002, the compiler changed the way it looked up symbols. In some cases, it would have automatically looked for symbols in a specified namespace. Now, it uses argument-dependent lookup.  \n  \n The following sample generates C3767:  \n  \n```  \n// C3767e.cpp  \nnamespace N {  \n   class C {  \n      friend void FriendFunc() {}  \n      friend void AnotherFriendFunc(C* c) {}  \n   };  \n}  \n  \nint main() {  \n   using namespace N;  \n   FriendFunc();   // C3767 error  \n   C* pC = new C();  \n   AnotherFriendFunc(pC);   // found via argument-dependent lookup  \n}  \n```  \n  \n For code that is valid in Visual C++ .NET 2003 and Visual C++ .NET 2002, declare the friend in class scope and define it in namespace scope:  \n  \n```  \n// C3767f.cpp  \nclass MyClass {  \n   int m_private;  \n   friend void func();  \n};  \n  \nvoid func() {  \n   MyClass s;  \n   s.m_private = 0;  \n}  \n  \nint main() {  \n   func();  \n}  \n```"}