{"nodes":[{"pos":[12,91],"content":"How to: Enable a 64-Bit Visual C++ Toolset on the Command Line | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Enable a 64-Bit Visual C++ Toolset on the Command Line | Microsoft Docs","pos":[0,79]}]},{"content":"How to: Enable a 64-Bit Visual C++ Toolset on the Command Line","pos":[907,969]},{"content":"Visual C++ includes compilers that you can use to create apps that can run on a 32-bit, 64-bit, or ARM-based Windows operating system.","pos":[970,1104]},{"pos":[1112,1341],"content":"[!NOTE]\n For information about the specific tools that are included with each Visual C++ edition, see [Visual C++ Tools and Features in Visual Studio Editions](../ide/visual-cpp-tools-and-features-in-visual-studio-editions.md).","leadings":["","> "],"nodes":[{"content":"For information about the specific tools that are included with each Visual C++ edition, see <bpt id=\"p1\">[</bpt>Visual C++ Tools and Features in Visual Studio Editions<ept id=\"p1\">](../ide/visual-cpp-tools-and-features-in-visual-studio-editions.md)</ept>.","pos":[9,227],"source":" For information about the specific tools that are included with each Visual C++ edition, see [Visual C++ Tools and Features in Visual Studio Editions](../ide/visual-cpp-tools-and-features-in-visual-studio-editions.md)."}]},{"pos":[1352,1586],"content":"For information about how to use the Visual Studio IDE to create 64-bit applications, see <bpt id=\"p1\">[</bpt>How to: Configure Visual C++ Projects to Target 64-Bit Platforms<ept id=\"p1\">](../build/how-to-configure-visual-cpp-projects-to-target-64-bit-platforms.md)</ept>.","source":"For information about how to use the Visual Studio IDE to create 64-bit applications, see [How to: Configure Visual C++ Projects to Target 64-Bit Platforms](../build/how-to-configure-visual-cpp-projects-to-target-64-bit-platforms.md)."},{"content":"includes 32-bit, x86-hosted, native and cross compilers for x86, <ph id=\"ph1\">[!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]</ph>, and ARM targets.","pos":[1653,1799],"source":" includes 32-bit, x86-hosted, native and cross compilers for x86, [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)], and ARM targets."},{"content":"When <ph id=\"ph1\">[!INCLUDE[vsprvs](../assembler/masm/includes/vsprvs_md.md)]</ph> is installed on a 64-bit Windows operating system, 32-bit, x86-hosted native and cross compilers, and also 64-bit, <ph id=\"ph2\">[!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]</ph>-hosted native and cross compilers, are installed for each target (x86, <ph id=\"ph3\">[!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]</ph>, and ARM).","pos":[1800,2189],"source":" When [!INCLUDE[vsprvs](../assembler/masm/includes/vsprvs_md.md)] is installed on a 64-bit Windows operating system, 32-bit, x86-hosted native and cross compilers, and also 64-bit, [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]-hosted native and cross compilers, are installed for each target (x86, [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)], and ARM)."},{"content":"The 32-bit and 64-bit compilers for each target generate identical code, but the 64-bit compilers support more memory for precompiled header symbols and the Whole Program Optimization (<bpt id=\"p1\">[</bpt>/GL<ept id=\"p1\">](../build/reference/gl-whole-program-optimization.md)</ept>, <bpt id=\"p2\">[</bpt>/LTCG<ept id=\"p2\">](../build/reference/ltcg-link-time-code-generation.md)</ept>) options.","pos":[2190,2506],"source":" The 32-bit and 64-bit compilers for each target generate identical code, but the 64-bit compilers support more memory for precompiled header symbols and the Whole Program Optimization ([/GL](../build/reference/gl-whole-program-optimization.md), [/LTCG](../build/reference/ltcg-link-time-code-generation.md)) options."},{"content":"If you run into memory limits when you use a 32-bit compiler, try the 64-bit compiler.","pos":[2507,2593]},{"content":"When Visual Studio is installed on a 64-bit Windows operating system, additional Command Prompt shortcuts for the 64-bit <ph id=\"ph1\">[!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]</ph>-native and x86 cross compilers are available.","pos":[2600,2830],"source":"When Visual Studio is installed on a 64-bit Windows operating system, additional Command Prompt shortcuts for the 64-bit [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]-native and x86 cross compilers are available."},{"content":"To access these command prompts on Windows 8, on the <bpt id=\"p1\">**</bpt>Start<ept id=\"p1\">**</ept> screen, open <bpt id=\"p2\">**</bpt>All apps<ept id=\"p2\">**</ept>.","pos":[2831,2920],"source":" To access these command prompts on Windows 8, on the **Start** screen, open **All apps**."},{"content":"Under the installed version of <bpt id=\"p1\">**</bpt><ph id=\"ph1\">[!INCLUDE[vsprvs](../assembler/masm/includes/vsprvs_md.md)]</ph><ept id=\"p1\">**</ept>, open <bpt id=\"p2\">**</bpt>Visual Studio Tools<ept id=\"p2\">**</ept>, and then choose one of the native-tool or cross-tool command prompts.","pos":[2921,3116],"source":" Under the installed version of **[!INCLUDE[vsprvs](../assembler/masm/includes/vsprvs_md.md)]**, open **Visual Studio Tools**, and then choose one of the native-tool or cross-tool command prompts."},{"content":"On earlier versions of Windows, choose <bpt id=\"p1\">**</bpt>Start<ept id=\"p1\">**</ept>, expand <bpt id=\"p2\">**</bpt>All Programs<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt><ph id=\"ph1\">[!INCLUDE[vsprvs](../assembler/masm/includes/vsprvs_md.md)]</ph><ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>Visual Studio Tools<ept id=\"p4\">**</ept>, and then choose a command prompt.","pos":[3117,3315],"source":" On earlier versions of Windows, choose **Start**, expand **All Programs**, **[!INCLUDE[vsprvs](../assembler/masm/includes/vsprvs_md.md)]**, **Visual Studio Tools**, and then choose a command prompt."},{"content":"Vcvarsall.bat","pos":[3324,3337]},{"content":"Any of the compilers can be used on the command line by running the vcvarsall.bat command file to configure the path and environment variables that enable the compiler toolset.","pos":[3341,3517]},{"content":"Because there are no Command Prompt shortcuts to enable a 64-bit toolset to target x86 or ARM platforms, use vcvarsall.bat in a Command Prompt window to use the 64-bit toolset instead.","pos":[3518,3702]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Setting the Path and Environment Variables for Command-Line Builds<ept id=\"p1\">](../build/setting-the-path-and-environment-variables-for-command-line-builds.md)</ept>.","pos":[3703,3878],"source":" For more information, see [Setting the Path and Environment Variables for Command-Line Builds](../build/setting-the-path-and-environment-variables-for-command-line-builds.md)."},{"content":"The following steps show how to configure a Command Prompt to use the 64-bit native toolset to target x86, x64, and ARM platforms.","pos":[3885,4015]},{"content":"To run vcvarsall.bat to use a 64-bit toolset","pos":[4026,4070]},{"content":"At the command prompt, change to the <ph id=\"ph1\">[!INCLUDE[vcprvc](../build/includes/vcprvc_md.md)]</ph> installation directory.","pos":[4080,4191],"source":"At the command prompt, change to the [!INCLUDE[vcprvc](../build/includes/vcprvc_md.md)] installation directory."},{"content":"(The location depends on the system and the <ph id=\"ph1\">[!INCLUDE[vsprvs](../assembler/masm/includes/vsprvs_md.md)]</ph> installation, but a typical location is C:\\Program Files (x86)\\Microsoft Visual Studio <bpt id=\"p1\">*</bpt>version<ept id=\"p1\">*</ept>\\VC<ph id=\"ph2\">\\\\</ph>.) For example, enter:","pos":[4192,4419],"source":" (The location depends on the system and the [!INCLUDE[vsprvs](../assembler/masm/includes/vsprvs_md.md)] installation, but a typical location is C:\\Program Files (x86)\\Microsoft Visual Studio *version*\\VC\\\\.) For example, enter:"},{"content":"cd \"Program Files (x86)Microsoft Visual Studio 12.0VC\"","pos":[4432,4486]},{"content":"To configure this Command Prompt window for 64-bit command-line builds that target x64 platforms, at the command prompt, enter:","pos":[4498,4625]},{"content":"To configure this Command Prompt window for 64-bit command-line builds that target x86 platforms, at the command prompt, enter:","pos":[4663,4790]},{"content":"To configure this Command Prompt window for 64-bit command-line builds that target ARM platforms, at the command prompt, enter:","pos":[4832,4959]},{"content":"See Also","pos":[5000,5008]},{"content":"Configuring Programs for 64-Bit","pos":[5013,5044]}],"content":"---\ntitle: \"How to: Enable a 64-Bit Visual C++ Toolset on the Command Line | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"x64 [C++]\"\n  - \"64-bit compiler [C++], command line usage\"\n  - \"64-bit compiler [C++], toolset enabling at command line\"\n  - \"command line [C++], 64-bit compiler\"\n  - \"Itanium [C++], command-line compiler\"\n  - \"IPF\"\n  - \"Itanium [C++]\"\n  - \"IPF, command-line compiler\"\n  - \"x64 [C++], command-line compiler\"\nms.assetid: 4da93a19-e20d-4778-902a-5eee9a6a90b5\ncaps.latest.revision: 30\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Enable a 64-Bit Visual C++ Toolset on the Command Line\nVisual C++ includes compilers that you can use to create apps that can run on a 32-bit, 64-bit, or ARM-based Windows operating system.  \n  \n> [!NOTE]\n>  For information about the specific tools that are included with each Visual C++ edition, see [Visual C++ Tools and Features in Visual Studio Editions](../ide/visual-cpp-tools-and-features-in-visual-studio-editions.md).  \n>   \n>  For information about how to use the Visual Studio IDE to create 64-bit applications, see [How to: Configure Visual C++ Projects to Target 64-Bit Platforms](../build/how-to-configure-visual-cpp-projects-to-target-64-bit-platforms.md).  \n  \n [!INCLUDE[vsprvs](../assembler/masm/includes/vsprvs_md.md)] includes 32-bit, x86-hosted, native and cross compilers for x86, [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)], and ARM targets. When [!INCLUDE[vsprvs](../assembler/masm/includes/vsprvs_md.md)] is installed on a 64-bit Windows operating system, 32-bit, x86-hosted native and cross compilers, and also 64-bit, [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]-hosted native and cross compilers, are installed for each target (x86, [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)], and ARM). The 32-bit and 64-bit compilers for each target generate identical code, but the 64-bit compilers support more memory for precompiled header symbols and the Whole Program Optimization ([/GL](../build/reference/gl-whole-program-optimization.md), [/LTCG](../build/reference/ltcg-link-time-code-generation.md)) options. If you run into memory limits when you use a 32-bit compiler, try the 64-bit compiler.  \n  \n When Visual Studio is installed on a 64-bit Windows operating system, additional Command Prompt shortcuts for the 64-bit [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]-native and x86 cross compilers are available. To access these command prompts on Windows 8, on the **Start** screen, open **All apps**. Under the installed version of **[!INCLUDE[vsprvs](../assembler/masm/includes/vsprvs_md.md)]**, open **Visual Studio Tools**, and then choose one of the native-tool or cross-tool command prompts. On earlier versions of Windows, choose **Start**, expand **All Programs**, **[!INCLUDE[vsprvs](../assembler/masm/includes/vsprvs_md.md)]**, **Visual Studio Tools**, and then choose a command prompt.  \n  \n## Vcvarsall.bat  \n Any of the compilers can be used on the command line by running the vcvarsall.bat command file to configure the path and environment variables that enable the compiler toolset. Because there are no Command Prompt shortcuts to enable a 64-bit toolset to target x86 or ARM platforms, use vcvarsall.bat in a Command Prompt window to use the 64-bit toolset instead. For more information, see [Setting the Path and Environment Variables for Command-Line Builds](../build/setting-the-path-and-environment-variables-for-command-line-builds.md).  \n  \n The following steps show how to configure a Command Prompt to use the 64-bit native toolset to target x86, x64, and ARM platforms.  \n  \n#### To run vcvarsall.bat to use a 64-bit toolset  \n  \n1.  At the command prompt, change to the [!INCLUDE[vcprvc](../build/includes/vcprvc_md.md)] installation directory. (The location depends on the system and the [!INCLUDE[vsprvs](../assembler/masm/includes/vsprvs_md.md)] installation, but a typical location is C:\\Program Files (x86)\\Microsoft Visual Studio *version*\\VC\\\\.) For example, enter:  \n  \n     **cd \"Program Files (x86)Microsoft Visual Studio 12.0VC\"**  \n  \n2.  To configure this Command Prompt window for 64-bit command-line builds that target x64 platforms, at the command prompt, enter:  \n  \n     `vcvarsall amd64`  \n  \n3.  To configure this Command Prompt window for 64-bit command-line builds that target x86 platforms, at the command prompt, enter:  \n  \n     `vcvarsall amd64_x86`  \n  \n4.  To configure this Command Prompt window for 64-bit command-line builds that target ARM platforms, at the command prompt, enter:  \n  \n     `vcvarsall amd64_arm`  \n  \n## See Also  \n [Configuring Programs for 64-Bit](../build/configuring-programs-for-64-bit-visual-cpp.md)"}