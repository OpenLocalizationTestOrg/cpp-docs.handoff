{"nodes":[{"pos":[12,83],"content":"_InterlockedCompareExchangePointer Intrinsic Functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_InterlockedCompareExchangePointer Intrinsic Functions | Microsoft Docs","pos":[0,71]}]},{"content":"_InterlockedCompareExchangePointer Intrinsic Functions","pos":[1617,1671]},{"content":"Microsoft Specific","pos":[1674,1692]},{"pos":[1701,1853],"content":"Performs an atomic operation that stores the <ph id=\"ph1\">`Exchange`</ph> address in the <ph id=\"ph2\">`Destination`</ph> address if the <ph id=\"ph3\">`Comparand`</ph> and the <ph id=\"ph4\">`Destination`</ph> address are equal.","source":"Performs an atomic operation that stores the `Exchange` address in the `Destination` address if the `Comparand` and the `Destination` address are equal."},{"content":"Syntax","pos":[1862,1868]},{"content":"Parameters","pos":[2845,2855]},{"content":"[in, out]","pos":[2859,2868]},{"content":"Pointer to a pointer to the destination value.","pos":[2886,2932]},{"content":"The sign is ignored.","pos":[2933,2953]},{"content":"[in]","pos":[2960,2964]},{"content":"Exchange pointer.","pos":[2979,2996]},{"content":"The sign is ignored.","pos":[2997,3017]},{"content":"[in]","pos":[3024,3028]},{"content":"Pointer to compare to destination.","pos":[3044,3078]},{"content":"The sign is ignored.","pos":[3079,3099]},{"content":"Return Value","pos":[3108,3120]},{"content":"The return value is the initial value of the destination.","pos":[3124,3181]},{"content":"Requirements","pos":[3190,3202]},{"content":"Intrinsic","pos":[3209,3218]},{"content":"Architecture","pos":[3219,3231]},{"content":"Header","pos":[3232,3238]},{"pos":[3332,3341],"content":"x86, ARM,"},{"content":"intrin.h&gt;","pos":[3408,3417],"source":"intrin.h>"},{"pos":[3462,3504],"content":", <ph id=\"ph1\">`_InterlockedCompareExchangePointer_nf`</ph>,","source":", `_InterlockedCompareExchangePointer_nf`, "},{"content":"ARM","pos":[3546,3549]},{"content":"iiintrin.h&gt;","pos":[3552,3563],"source":"iiintrin.h>"},{"pos":[3615,3616],"content":","},{"pos":[3665,3669],"content":"x86,"},{"content":"immintrin.h&gt;","pos":[3736,3748],"source":"immintrin.h>"},{"content":"Remarks","pos":[3758,3765]},{"content":"performs an atomic comparison of the <ph id=\"ph1\">`Destination`</ph> address with the <ph id=\"ph2\">`Comparand`</ph> address.","pos":[3806,3894],"source":" performs an atomic comparison of the `Destination` address with the `Comparand` address."},{"content":"If the <ph id=\"ph1\">`Destination`</ph> address is equal to the <ph id=\"ph2\">`Comparand`</ph> address, the <ph id=\"ph3\">`Exchange`</ph> address is stored in the address specified by <ph id=\"ph4\">`Destination`</ph>.","pos":[3895,4036],"source":" If the `Destination` address is equal to the `Comparand` address, the `Exchange` address is stored in the address specified by `Destination`."},{"content":"Otherwise, no operation is performed.","pos":[4037,4074]},{"pos":[4118,4343],"content":"provides compiler intrinsic support for the Win32 <ph id=\"ph1\">[!INCLUDE[winsdkshort](../atl-mfc-shared/reference/includes/winsdkshort_md.md)]</ph> <bpt id=\"p1\">[</bpt>_InterlockedCompareExchangePointer<ept id=\"p1\">](http://msdn.microsoft.com/library/ff547863.aspx)</ept> function.","source":" provides compiler intrinsic support for the Win32 [!INCLUDE[winsdkshort](../atl-mfc-shared/reference/includes/winsdkshort_md.md)] [_InterlockedCompareExchangePointer](http://msdn.microsoft.com/library/ff547863.aspx) function."},{"pos":[4350,4503],"content":"For a example of how to use <ph id=\"ph1\">`_InterlockedCompareExchangePointer`</ph>, see <bpt id=\"p1\">[</bpt>_InterlockedDecrement<ept id=\"p1\">](../intrinsics/interlockeddecrement-intrinsic-functions.md)</ept>.","source":"For a example of how to use `_InterlockedCompareExchangePointer`, see [_InterlockedDecrement](../intrinsics/interlockeddecrement-intrinsic-functions.md)."},{"content":"On ARM platforms, use the intrinsics with <ph id=\"ph1\">`_acq`</ph> and <ph id=\"ph2\">`_rel`</ph> suffixes if you need acquire and release semantics, such as at the beginning and end of a critical section.","pos":[4510,4677],"source":"On ARM platforms, use the intrinsics with `_acq` and `_rel` suffixes if you need acquire and release semantics, such as at the beginning and end of a critical section."},{"content":"ARM intrinsics with an <ph id=\"ph1\">`_nf`</ph> (\"no fence\") suffix do not act as a memory barrier.","pos":[4678,4758],"source":" ARM intrinsics with an `_nf` (\"no fence\") suffix do not act as a memory barrier."},{"pos":[4765,4891],"content":"The intrinsics with an <ph id=\"ph1\">`_np`</ph> (\"no prefetch\") suffix prevent a possible prefetch operation from being inserted by the compiler.","source":"The intrinsics with an `_np` (\"no prefetch\") suffix prevent a possible prefetch operation from being inserted by the compiler."},{"content":"On Intel platforms that support Hardware Lock Elision (HLE) instructions, the intrinsics with <ph id=\"ph1\">`_HLEAcquire`</ph> and <ph id=\"ph2\">`_HLERelease`</ph> suffixes include a hint to the processor that can accelerate performance by eliminating a lock write step in hardware.","pos":[4898,5142],"source":"On Intel platforms that support Hardware Lock Elision (HLE) instructions, the intrinsics with `_HLEAcquire` and `_HLERelease` suffixes include a hint to the processor that can accelerate performance by eliminating a lock write step in hardware."},{"content":"If these intrinsics are called on platforms that do not support HLE, the hint is ignored.","pos":[5143,5232]},{"content":"These routines are only available as intrinsics.","pos":[5239,5287]},{"content":"END Microsoft Specific","pos":[5296,5318]},{"content":"See Also","pos":[5327,5335]},{"content":"Compiler Intrinsics","pos":[5340,5359]},{"content":"Keywords","pos":[5404,5412]}],"content":"---\ntitle: \"_InterlockedCompareExchangePointer Intrinsic Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"_InterlockedCompareExchangePointer_HLERelease\"\n  - \"_InterlockedCompareExchangePointer_rel\"\n  - \"_InterlockedCompareExchangePointer_acq_cpp\"\n  - \"_InterlockedCompareExchangePointer\"\n  - \"_InterlockedCompareExchangePointer_cpp\"\n  - \"_InterlockedCompareExchangePointer_np\"\n  - \"_InterlockedCompareExchangePointer_rel_cpp\"\n  - \"_InterlockedCompareExchangePointer_HLEAcquire\"\n  - \"_InterlockedCompareExchangePointer_acq\"\n  - \"_InterlockedCompareExchangePointer_nf\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"InterlockedCompareExchangePointer_acq intrinsic\"\n  - \"_InterlockedCompareExchangePointer_rel intrinsic\"\n  - \"_InterlockedCompareExchangePointer_acq intrinsic\"\n  - \"InterlockedCompareExchangePointer_rel intrinsic\"\n  - \"InterlockedCompareExchangePointer intrinsic\"\n  - \"_InterlockedCompareExchangePointer_HLERelease intrinsic\"\n  - \"_InterlockedCompareExchangePointer_HLEAcquire intrinsic\"\n  - \"_InterlockedCompareExchangePointer intrinsic\"\n  - \"_InterlockedCompareExchangePointer_nf intrinsic\"\n  - \"_InterlockedCompareExchangePointer_np intrinsic\"\nms.assetid: 97fde59d-2bf9-42aa-a0fe-a5b6befdd44b\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _InterlockedCompareExchangePointer Intrinsic Functions\n**Microsoft Specific**  \n  \n Performs an atomic operation that stores the `Exchange` address in the `Destination` address if the `Comparand` and the `Destination` address are equal.  \n  \n## Syntax  \n  \n```  \nvoid * _InterlockedCompareExchangePointer (  \n   void * volatile * Destination,  \n   void * Exchange,  \n   void * Comparand  \n);  \nvoid * _InterlockedCompareExchangePointer_acq (  \n   void * volatile * Destination,  \n   void * Exchange,  \n   void * Comparand  \n);  \nvoid * _InterlockedCompareExchangePointer_HLEAcquire (  \n   void * volatile * Destination,  \n   void * Exchange,  \n   void * Comparand  \n);  \nvoid * _InterlockedCompareExchangePointer_HLERelease (  \n   void * volatile * Destination,  \n   void * Exchange,  \n   void * Comparand  \n);  \nvoid * _InterlockedCompareExchangePointer_nf (  \n   void * volatile * Destination,  \n   void * Exchange,  \n   void * Comparand  \n);  \nvoid * _InterlockedCompareExchangePointer_np (  \n   void * volatile * Destination,  \n   void * Exchange,  \n   void * Comparand  \n);  \nlong _InterlockedCompareExchangePointer_rel (  \n   void * volatile * Destination,  \n   void * Exchange,  \n   void * Comparand  \n);  \n```  \n  \n#### Parameters  \n [in, out] `Destination`  \n Pointer to a pointer to the destination value. The sign is ignored.  \n  \n [in] `Exchange`  \n Exchange pointer. The sign is ignored.  \n  \n [in] `Comparand`  \n Pointer to compare to destination. The sign is ignored.  \n  \n## Return Value  \n The return value is the initial value of the destination.  \n  \n## Requirements  \n  \n|Intrinsic|Architecture|Header|  \n|---------------|------------------|------------|  \n|`_InterlockedCompareExchangePointer`|x86, ARM, [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]|\\<intrin.h>|  \n|`_InterlockedCompareExchangePointer_acq`, `_InterlockedCompareExchangePointer_nf`, `_InterlockedCompareExchangePointer_rel`|ARM|\\<iiintrin.h>|  \n|`_InterlockedCompareExchangePointer_HLEAcquire`, `_InterlockedCompareExchangePointer_HLERelease`|x86, [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]|\\<immintrin.h>|  \n  \n## Remarks  \n `_InterlockedCompareExchangePointer` performs an atomic comparison of the `Destination` address with the `Comparand` address. If the `Destination` address is equal to the `Comparand` address, the `Exchange` address is stored in the address specified by `Destination`. Otherwise, no operation is performed.  \n  \n `_InterlockedCompareExchangePointer` provides compiler intrinsic support for the Win32 [!INCLUDE[winsdkshort](../atl-mfc-shared/reference/includes/winsdkshort_md.md)] [_InterlockedCompareExchangePointer](http://msdn.microsoft.com/library/ff547863.aspx) function.  \n  \n For a example of how to use `_InterlockedCompareExchangePointer`, see [_InterlockedDecrement](../intrinsics/interlockeddecrement-intrinsic-functions.md).  \n  \n On ARM platforms, use the intrinsics with `_acq` and `_rel` suffixes if you need acquire and release semantics, such as at the beginning and end of a critical section. ARM intrinsics with an `_nf` (\"no fence\") suffix do not act as a memory barrier.  \n  \n The intrinsics with an `_np` (\"no prefetch\") suffix prevent a possible prefetch operation from being inserted by the compiler.  \n  \n On Intel platforms that support Hardware Lock Elision (HLE) instructions, the intrinsics with `_HLEAcquire` and `_HLERelease` suffixes include a hint to the processor that can accelerate performance by eliminating a lock write step in hardware. If these intrinsics are called on platforms that do not support HLE, the hint is ignored.  \n  \n These routines are only available as intrinsics.  \n  \n## END Microsoft Specific  \n  \n## See Also  \n [Compiler Intrinsics](../intrinsics/compiler-intrinsics.md)   \n [Keywords](../cpp/keywords-cpp.md)"}