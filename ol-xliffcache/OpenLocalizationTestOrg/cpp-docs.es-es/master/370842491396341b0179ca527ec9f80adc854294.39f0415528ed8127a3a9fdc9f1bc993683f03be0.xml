{"nodes":[{"pos":[12,50],"content":"Storage of Bit Fields | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Storage of Bit Fields | Microsoft Docs","pos":[0,38]}]},{"content":"Storage of Bit Fields","pos":[538,559]},{"pos":[560,628],"content":"<bpt id=\"p1\">**</bpt>ANSI 3.5.2.1<ept id=\"p1\">**</ept> The order of allocation of bit fields within an int","source":"**ANSI 3.5.2.1** The order of allocation of bit fields within an int"},{"content":"Bit fields are allocated within an integer from least-significant to most-significant bit.","pos":[635,725]},{"content":"In the following code","pos":[726,747]},{"content":"the bits would be arranged as follows:","pos":[949,987]},{"content":"Since the 80x86 processors store the low byte of integer values before the high byte, the integer 0x01F2 above would be stored in physical memory as 0xF2 followed by 0x01.","pos":[1049,1220]},{"content":"See Also","pos":[1229,1237]},{"content":"Structures, Unions, Enumerations, and Bit Fields","pos":[1242,1290]}],"content":"---\ntitle: \"Storage of Bit Fields | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nms.assetid: 4816a241-1580-4d1c-82ed-13d359733959\ncaps.latest.revision: 6\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Storage of Bit Fields\n**ANSI 3.5.2.1** The order of allocation of bit fields within an int  \n  \n Bit fields are allocated within an integer from least-significant to most-significant bit. In the following code  \n  \n```  \nstruct mybitfields  \n{  \n   unsigned a : 4;  \n   unsigned b : 5;  \n   unsigned c : 7;  \n} test;  \n  \nint main( void )  \n{  \n   test.a = 2;  \n   test.b = 31;  \n   test.c = 0;  \n}  \n```  \n  \n the bits would be arranged as follows:  \n  \n```  \n00000001 11110010  \ncccccccb bbbbaaaa  \n```  \n  \n Since the 80x86 processors store the low byte of integer values before the high byte, the integer 0x01F2 above would be stored in physical memory as 0xF2 followed by 0x01.  \n  \n## See Also  \n [Structures, Unions, Enumerations, and Bit Fields](../c-language/structures-unions-enumerations-and-bit-fields.md)"}