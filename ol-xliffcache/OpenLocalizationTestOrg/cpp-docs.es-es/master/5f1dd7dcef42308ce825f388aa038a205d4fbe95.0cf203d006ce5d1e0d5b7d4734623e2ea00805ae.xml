{"nodes":[{"pos":[12,91],"content":"MFC ActiveX Controls: Using Data Binding in an ActiveX Control | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"MFC ActiveX Controls: Using Data Binding in an ActiveX Control | Microsoft Docs","pos":[0,79]}]},{"content":"MFC ActiveX Controls: Using Data Binding in an ActiveX Control","pos":[907,969]},{"content":"One of the more powerful uses of ActiveX controls is data binding, which allows a property of the control to bind with a specific field in a database.","pos":[970,1120]},{"content":"When a user modifies data in this bound property, the control notifies the database and requests that the record field be updated.","pos":[1121,1251]},{"content":"The database then notifies the control of the success or failure of the request.","pos":[1252,1332]},{"content":"This article covers the control side of your task.","pos":[1339,1389]},{"content":"Implementing the data binding interactions with the database is the responsibility of the control container.","pos":[1390,1498]},{"content":"How you manage the database interactions in your container is beyond the scope of this documentation.","pos":[1499,1600]},{"content":"How you prepare the control for data binding is explained in the rest of this article.","pos":[1601,1687]},{"content":"Conceptual diagram of a data&amp;#45;bound control","pos":[1696,1742],"source":"Conceptual diagram of a data&#45;bound control"},{"content":"Conceptual Diagram of a Data-Bound Control","pos":[1782,1824]},{"content":"The <ph id=\"ph1\">`COleControl`</ph> class provides two member functions that make data binding an easy process to implement.","pos":[1831,1937],"source":"The `COleControl` class provides two member functions that make data binding an easy process to implement."},{"content":"The first function, <bpt id=\"p1\">[</bpt>BoundPropertyRequestEdit<ept id=\"p1\">](../mfc/reference/colecontrol-class.md#colecontrol__boundpropertyrequestedit)</ept>, is used to request permission to change the property value.","pos":[1938,2122],"source":" The first function, [BoundPropertyRequestEdit](../mfc/reference/colecontrol-class.md#colecontrol__boundpropertyrequestedit), is used to request permission to change the property value."},{"content":"<bpt id=\"p1\">[</bpt>BoundPropertyChanged<ept id=\"p1\">](../mfc/reference/colecontrol-class.md#colecontrol__boundpropertychanged)</ept>, the second function, is called after the property value has been successfully changed.","pos":[2123,2306],"source":"[BoundPropertyChanged](../mfc/reference/colecontrol-class.md#colecontrol__boundpropertychanged), the second function, is called after the property value has been successfully changed."},{"content":"This article covers the following topics:","pos":[2313,2354]},{"content":"Creating a Bindable Stock Property","pos":[2365,2399]},{"content":"Creating a Bindable Get/Set Method","pos":[2448,2482]},{"pos":[2579,2613],"content":"Creating a Bindable Stock Property"},{"pos":[2617,2781],"content":"It is possible to create a data-bound stock property, although it is more likely that you will want a <bpt id=\"p1\">[</bpt>bindable get/set method<ept id=\"p1\">](#vchowcreatingbindablegetsetmethod)</ept>.","source":"It is possible to create a data-bound stock property, although it is more likely that you will want a [bindable get/set method](#vchowcreatingbindablegetsetmethod)."},{"pos":[2789,2881],"content":"[!NOTE]\n Stock properties have the **bindable** and **requestedit** attributes by default.","leadings":["","> "],"nodes":[{"content":"Stock properties have the <bpt id=\"p1\">**</bpt>bindable<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>requestedit<ept id=\"p2\">**</ept> attributes by default.","pos":[9,90],"source":" Stock properties have the **bindable** and **requestedit** attributes by default."}]},{"content":"To add a bindable stock property using the Add Property Wizard","pos":[2892,2954]},{"pos":[2964,3067],"content":"Begin a project using the <bpt id=\"p1\">[</bpt>MFC ActiveX Control Wizard<ept id=\"p1\">](../mfc/reference/mfc-activex-control-wizard.md)</ept>.","source":"Begin a project using the [MFC ActiveX Control Wizard](../mfc/reference/mfc-activex-control-wizard.md)."},{"content":"Right-click the interface node for your control.","pos":[3077,3125]},{"content":"This opens the shortcut menu.","pos":[3136,3165]},{"pos":[3175,3245],"content":"From the shortcut menu, click <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept> and then click <bpt id=\"p2\">**</bpt>Add Property<ept id=\"p2\">**</ept>.","source":"From the shortcut menu, click **Add** and then click **Add Property**."},{"content":"Select one of the entries from the <bpt id=\"p1\">**</bpt>Property Name<ept id=\"p1\">**</ept> drop-down list.","pos":[3255,3323],"source":"Select one of the entries from the **Property Name** drop-down list."},{"content":"For example, you can select <bpt id=\"p1\">**</bpt>Text<ept id=\"p1\">**</ept>.","pos":[3324,3361],"source":" For example, you can select **Text**."},{"pos":[3372,3478],"content":"Because <bpt id=\"p1\">**</bpt>Text<ept id=\"p1\">**</ept> is a stock property, the <bpt id=\"p2\">**</bpt>bindable<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>requestedit<ept id=\"p3\">**</ept> attributes are already checked.","source":"Because **Text** is a stock property, the **bindable** and **requestedit** attributes are already checked."},{"content":"Select the following check boxes from the <bpt id=\"p1\">**</bpt>IDL Attributes<ept id=\"p1\">**</ept> tab: <bpt id=\"p2\">**</bpt>displaybind<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>defaultbind<ept id=\"p3\">**</ept> to add the attributes to the property definition in the project's .IDL file.","pos":[3488,3666],"source":"Select the following check boxes from the **IDL Attributes** tab: **displaybind** and **defaultbind** to add the attributes to the property definition in the project's .IDL file."},{"content":"These attributes make the control visible to the user and make the stock property the default bindable property.","pos":[3667,3779]},{"content":"At this point, your control can display data from a data source, but the user will not be able to update data fields.","pos":[3786,3903]},{"content":"If you want your control to also be able to update data, change the <ph id=\"ph1\">`OnOcmCommand`</ph> <bpt id=\"p1\">[</bpt>OnOcmCommand<ept id=\"p1\">](../mfc/mfc-activex-controls-subclassing-a-windows-control.md)</ept> function to look as follows:","pos":[3904,4092],"source":" If you want your control to also be able to update data, change the `OnOcmCommand` [OnOcmCommand](../mfc/mfc-activex-controls-subclassing-a-windows-control.md) function to look as follows:"},{"pos":[4110,4126],"content":"NVC_MFC_AxData#1"},{"content":"You can now build the project, which will register the control.","pos":[4227,4290]},{"content":"When you insert the control in a dialog box, the <bpt id=\"p1\">**</bpt>Data Field<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Data Source<ept id=\"p2\">**</ept> properties will have been added and you can now select a data source and field to display in the control.","pos":[4291,4480],"source":" When you insert the control in a dialog box, the **Data Field** and **Data Source** properties will have been added and you can now select a data source and field to display in the control."},{"pos":[4539,4573],"content":"Creating a Bindable Get/Set Method"},{"pos":[4577,4706],"content":"In addition to a data-bound get/set method, you can also create a <bpt id=\"p1\">[</bpt>bindable stock property<ept id=\"p1\">](#vchowcreatingbindablestockproperty)</ept>.","source":"In addition to a data-bound get/set method, you can also create a [bindable stock property](#vchowcreatingbindablestockproperty)."},{"pos":[4714,4818],"content":"[!NOTE]\n This procedure assumes you have an ActiveX control project that subclasses a Windows control.","leadings":["","> "],"nodes":[{"content":"This procedure assumes you have an ActiveX control project that subclasses a Windows control.","pos":[9,102]}]},{"content":"To add a bindable get/set method using the Add Property Wizard","pos":[4829,4891]},{"content":"Load your control's project.","pos":[4901,4929]},{"content":"On the <bpt id=\"p1\">**</bpt>Control Settings<ept id=\"p1\">**</ept> page, select a window class for the control to subclass.","pos":[4939,5023],"source":"On the **Control Settings** page, select a window class for the control to subclass."},{"content":"For example, you may want to subclass an EDIT control.","pos":[5024,5078]},{"content":"Load your control's project.","pos":[5088,5116]},{"content":"Right-click the interface node for your control.","pos":[5126,5174]},{"content":"This opens the shortcut menu.","pos":[5185,5214]},{"pos":[5224,5294],"content":"From the shortcut menu, click <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept> and then click <bpt id=\"p2\">**</bpt>Add Property<ept id=\"p2\">**</ept>.","source":"From the shortcut menu, click **Add** and then click **Add Property**."},{"content":"Type the property name in the <bpt id=\"p1\">**</bpt>Property Name<ept id=\"p1\">**</ept> box.","pos":[5304,5356],"source":"Type the property name in the **Property Name** box."},{"content":"Use <ph id=\"ph1\">`MyProp`</ph> for this example.","pos":[5357,5387],"source":" Use `MyProp` for this example."},{"content":"Select a data type from the <bpt id=\"p1\">**</bpt>Property Type<ept id=\"p1\">**</ept> drop-down list box.","pos":[5397,5462],"source":"Select a data type from the **Property Type** drop-down list box."},{"content":"Use <bpt id=\"p1\">**</bpt>short<ept id=\"p1\">**</ept> for this example.","pos":[5463,5494],"source":" Use **short** for this example."},{"pos":[5504,5559],"content":"For <bpt id=\"p1\">**</bpt>Implementation Type<ept id=\"p1\">**</ept>, click <bpt id=\"p2\">**</bpt>Get/Set Methods<ept id=\"p2\">**</ept>.","source":"For **Implementation Type**, click **Get/Set Methods**."},{"content":"Select the following check boxes from the IDL Attributes tab: <bpt id=\"p1\">**</bpt>bindable<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>requestedit<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>displaybind<ept id=\"p3\">**</ept>, and <bpt id=\"p4\">**</bpt>defaultbind<ept id=\"p4\">**</ept> to add the attributes to the property definition in the project's .IDL file.","pos":[5568,5774],"source":"Select the following check boxes from the IDL Attributes tab: **bindable**, **requestedit**, **displaybind**, and **defaultbind** to add the attributes to the property definition in the project's .IDL file."},{"content":"These attributes make the control visible to the user and make the stock property the default bindable property.","pos":[5775,5887]},{"pos":[5897,5914],"content":"Click <bpt id=\"p1\">**</bpt>Finish<ept id=\"p1\">**</ept>.","source":"Click **Finish**."},{"pos":[5924,6007],"content":"Modify the body of the <ph id=\"ph1\">`SetMyProp`</ph> function so that it contains the following code:","source":"Modify the body of the `SetMyProp` function so that it contains the following code:"},{"pos":[6029,6045],"content":"NVC_MFC_AxData#2"},{"pos":[6149,6358],"content":"The parameter passed to the <ph id=\"ph1\">`BoundPropertyChanged`</ph> and <ph id=\"ph2\">`BoundPropertyRequestEdit`</ph> functions is the dispid of the property, which is the parameter passed to the id() attribute for the property in the .IDL file.","source":"The parameter passed to the `BoundPropertyChanged` and `BoundPropertyRequestEdit` functions is the dispid of the property, which is the parameter passed to the id() attribute for the property in the .IDL file."},{"pos":[6368,6499],"content":"Modify the <bpt id=\"p1\">[</bpt>OnOcmCommand<ept id=\"p1\">](../mfc/mfc-activex-controls-subclassing-a-windows-control.md)</ept> function so it contains the following code:","source":"Modify the [OnOcmCommand](../mfc/mfc-activex-controls-subclassing-a-windows-control.md) function so it contains the following code:"},{"pos":[6521,6537],"content":"NVC_MFC_AxData#1"},{"pos":[6641,6709],"content":"Modify the <ph id=\"ph1\">`OnDraw`</ph> function so that it contains the following code:","source":"Modify the `OnDraw` function so that it contains the following code:"},{"pos":[6731,6747],"content":"NVC_MFC_AxData#3"},{"content":"To the public section of the header file the header file for your control class, add the following definitions (constructors) for member variables:","pos":[6851,6998]},{"pos":[7020,7036],"content":"NVC_MFC_AxData#4"},{"pos":[7138,7209],"content":"Make the following line the last line in the <ph id=\"ph1\">`DoPropExchange`</ph> function:","source":"Make the following line the last line in the `DoPropExchange` function:"},{"pos":[7231,7247],"content":"NVC_MFC_AxData#5"},{"pos":[7351,7425],"content":"Modify the <ph id=\"ph1\">`OnResetState`</ph> function so that it contains the following code:","source":"Modify the `OnResetState` function so that it contains the following code:"},{"pos":[7447,7463],"content":"NVC_MFC_AxData#6"},{"pos":[7567,7638],"content":"Modify the <ph id=\"ph1\">`GetMyProp`</ph> function so that it contains the following code:","source":"Modify the `GetMyProp` function so that it contains the following code:"},{"pos":[7660,7676],"content":"NVC_MFC_AxData#7"},{"content":"You can now build the project, which will register the control.","pos":[7777,7840]},{"content":"When you insert the control in a dialog box, the <bpt id=\"p1\">**</bpt>Data Field<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Data Source<ept id=\"p2\">**</ept> properties will have been added and you can now select a data source and field to display in the control.","pos":[7841,8030],"source":" When you insert the control in a dialog box, the **Data Field** and **Data Source** properties will have been added and you can now select a data source and field to display in the control."},{"content":"See Also","pos":[8039,8047]},{"content":"MFC ActiveX Controls","pos":[8052,8072]},{"content":"Data-Bound Controls (ADO and RDO)","pos":[8111,8144]}],"content":"---\ntitle: \"MFC ActiveX Controls: Using Data Binding in an ActiveX Control | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"bindable\"\n  - \"requestedit\"\n  - \"defaultbind\"\n  - \"displaybind\"\n  - \"dispid\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"MFC ActiveX controls, data binding\"\n  - \"data binding [C++], MFC ActiveX controls\"\n  - \"data-bound controls [C++], MFC ActiveX controls\"\n  - \"controls [MFC], data binding\"\n  - \"bound controls [C++], MFC ActiveX\"\nms.assetid: 476b590a-bf2a-498a-81b7-dd476bd346f1\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# MFC ActiveX Controls: Using Data Binding in an ActiveX Control\nOne of the more powerful uses of ActiveX controls is data binding, which allows a property of the control to bind with a specific field in a database. When a user modifies data in this bound property, the control notifies the database and requests that the record field be updated. The database then notifies the control of the success or failure of the request.  \n  \n This article covers the control side of your task. Implementing the data binding interactions with the database is the responsibility of the control container. How you manage the database interactions in your container is beyond the scope of this documentation. How you prepare the control for data binding is explained in the rest of this article.  \n  \n ![Conceptual diagram of a data&#45;bound control](../mfc/media/vc374v1.gif \"vc374v1\")  \nConceptual Diagram of a Data-Bound Control  \n  \n The `COleControl` class provides two member functions that make data binding an easy process to implement. The first function, [BoundPropertyRequestEdit](../mfc/reference/colecontrol-class.md#colecontrol__boundpropertyrequestedit), is used to request permission to change the property value. [BoundPropertyChanged](../mfc/reference/colecontrol-class.md#colecontrol__boundpropertychanged), the second function, is called after the property value has been successfully changed.  \n  \n This article covers the following topics:  \n  \n-   [Creating a Bindable Stock Property](#vchowcreatingbindablestockproperty)  \n  \n-   [Creating a Bindable Get/Set Method](#vchowcreatingbindablegetsetmethod)  \n  \n##  <a name=\"vchowcreatingbindablestockproperty\"></a> Creating a Bindable Stock Property  \n It is possible to create a data-bound stock property, although it is more likely that you will want a [bindable get/set method](#vchowcreatingbindablegetsetmethod).  \n  \n> [!NOTE]\n>  Stock properties have the **bindable** and **requestedit** attributes by default.  \n  \n#### To add a bindable stock property using the Add Property Wizard  \n  \n1.  Begin a project using the [MFC ActiveX Control Wizard](../mfc/reference/mfc-activex-control-wizard.md).  \n  \n2.  Right-click the interface node for your control.  \n  \n     This opens the shortcut menu.  \n  \n3.  From the shortcut menu, click **Add** and then click **Add Property**.  \n  \n4.  Select one of the entries from the **Property Name** drop-down list. For example, you can select **Text**.  \n  \n     Because **Text** is a stock property, the **bindable** and **requestedit** attributes are already checked.  \n  \n5.  Select the following check boxes from the **IDL Attributes** tab: **displaybind** and **defaultbind** to add the attributes to the property definition in the project's .IDL file. These attributes make the control visible to the user and make the stock property the default bindable property.  \n  \n At this point, your control can display data from a data source, but the user will not be able to update data fields. If you want your control to also be able to update data, change the `OnOcmCommand` [OnOcmCommand](../mfc/mfc-activex-controls-subclassing-a-windows-control.md) function to look as follows:  \n  \n [!code-cpp[NVC_MFC_AxData#1](../mfc/codesnippet/cpp/mfc-activex-controls-using-data-binding-in-an-activex-control_1.cpp)]  \n  \n You can now build the project, which will register the control. When you insert the control in a dialog box, the **Data Field** and **Data Source** properties will have been added and you can now select a data source and field to display in the control.  \n  \n##  <a name=\"vchowcreatingbindablegetsetmethod\"></a> Creating a Bindable Get/Set Method  \n In addition to a data-bound get/set method, you can also create a [bindable stock property](#vchowcreatingbindablestockproperty).  \n  \n> [!NOTE]\n>  This procedure assumes you have an ActiveX control project that subclasses a Windows control.  \n  \n#### To add a bindable get/set method using the Add Property Wizard  \n  \n1.  Load your control's project.  \n  \n2.  On the **Control Settings** page, select a window class for the control to subclass. For example, you may want to subclass an EDIT control.  \n  \n3.  Load your control's project.  \n  \n4.  Right-click the interface node for your control.  \n  \n     This opens the shortcut menu.  \n  \n5.  From the shortcut menu, click **Add** and then click **Add Property**.  \n  \n6.  Type the property name in the **Property Name** box. Use `MyProp` for this example.  \n  \n7.  Select a data type from the **Property Type** drop-down list box. Use **short** for this example.  \n  \n8.  For **Implementation Type**, click **Get/Set Methods**.  \n  \n9. Select the following check boxes from the IDL Attributes tab: **bindable**, **requestedit**, **displaybind**, and **defaultbind** to add the attributes to the property definition in the project's .IDL file. These attributes make the control visible to the user and make the stock property the default bindable property.  \n  \n10. Click **Finish**.  \n  \n11. Modify the body of the `SetMyProp` function so that it contains the following code:  \n  \n     [!code-cpp[NVC_MFC_AxData#2](../mfc/codesnippet/cpp/mfc-activex-controls-using-data-binding-in-an-activex-control_2.cpp)]  \n  \n12. The parameter passed to the `BoundPropertyChanged` and `BoundPropertyRequestEdit` functions is the dispid of the property, which is the parameter passed to the id() attribute for the property in the .IDL file.  \n  \n13. Modify the [OnOcmCommand](../mfc/mfc-activex-controls-subclassing-a-windows-control.md) function so it contains the following code:  \n  \n     [!code-cpp[NVC_MFC_AxData#1](../mfc/codesnippet/cpp/mfc-activex-controls-using-data-binding-in-an-activex-control_1.cpp)]  \n  \n14. Modify the `OnDraw` function so that it contains the following code:  \n  \n     [!code-cpp[NVC_MFC_AxData#3](../mfc/codesnippet/cpp/mfc-activex-controls-using-data-binding-in-an-activex-control_3.cpp)]  \n  \n15. To the public section of the header file the header file for your control class, add the following definitions (constructors) for member variables:  \n  \n     [!code-cpp[NVC_MFC_AxData#4](../mfc/codesnippet/cpp/mfc-activex-controls-using-data-binding-in-an-activex-control_4.h)]  \n  \n16. Make the following line the last line in the `DoPropExchange` function:  \n  \n     [!code-cpp[NVC_MFC_AxData#5](../mfc/codesnippet/cpp/mfc-activex-controls-using-data-binding-in-an-activex-control_5.cpp)]  \n  \n17. Modify the `OnResetState` function so that it contains the following code:  \n  \n     [!code-cpp[NVC_MFC_AxData#6](../mfc/codesnippet/cpp/mfc-activex-controls-using-data-binding-in-an-activex-control_6.cpp)]  \n  \n18. Modify the `GetMyProp` function so that it contains the following code:  \n  \n     [!code-cpp[NVC_MFC_AxData#7](../mfc/codesnippet/cpp/mfc-activex-controls-using-data-binding-in-an-activex-control_7.cpp)]  \n  \n You can now build the project, which will register the control. When you insert the control in a dialog box, the **Data Field** and **Data Source** properties will have been added and you can now select a data source and field to display in the control.  \n  \n## See Also  \n [MFC ActiveX Controls](../mfc/mfc-activex-controls.md)   \n [Data-Bound Controls (ADO and RDO)](../data/ado-rdo/data-bound-controls-ado-and-rdo.md)\n\n"}