{"nodes":[{"pos":[12,42],"content":"CWinApp Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CWinApp Class | Microsoft Docs","pos":[0,30]}]},{"content":"CWinApp Class","pos":[677,690]},{"content":"The base class from which you derive a Windows application object.","pos":[691,757]},{"content":"Syntax","pos":[766,772]},{"content":"Members","pos":[832,839]},{"content":"Public Constructors","pos":[849,868]},{"content":"Name","pos":[875,879]},{"content":"Description","pos":[880,891]},{"content":"CWinApp::CWinApp","pos":[930,946]},{"pos":[967,997],"content":"Constructs a <ph id=\"ph1\">`CWinApp`</ph> object.","source":"Constructs a `CWinApp` object."},{"content":"Public Methods","pos":[1008,1022]},{"content":"Name","pos":[1029,1033]},{"content":"Description","pos":[1034,1045]},{"content":"CWinApp::AddDocTemplate","pos":[1084,1107]},{"content":"Adds a document template to the application's list of available document templates.","pos":[1135,1218]},{"content":"CWinApp::AddToRecentFileList","pos":[1224,1252]},{"content":"Adds a filename to the most recently used (MRU) file list.","pos":[1285,1343]},{"content":"CWinApp::ApplicationRecoveryCallback","pos":[1349,1385]},{"content":"Called by the framework when the application unexpectedly exits.","pos":[1426,1490]},{"content":"CWinApp::CloseAllDocuments","pos":[1496,1522]},{"content":"Closes all open documents.","pos":[1553,1579]},{"content":"CWinApp::CreatePrinterDC","pos":[1585,1609]},{"content":"Creates a printer device context.","pos":[1638,1671]},{"content":"CWinApp::DelRegTree","pos":[1677,1696]},{"content":"Deletes a specified key and all its subkeys.","pos":[1720,1764]},{"content":"CWinApp::DoMessageBox","pos":[1770,1791]},{"pos":[1817,1925],"content":"Implements <bpt id=\"p1\">[</bpt>AfxMessageBox<ept id=\"p1\">](cstring-formatting-and-message-box-display.md#afxmessagebox)</ept> for the application.","source":"Implements [AfxMessageBox](cstring-formatting-and-message-box-display.md#afxmessagebox) for the application."},{"content":"CWinApp::DoWaitCursor","pos":[1931,1952]},{"content":"Turns the wait cursor on and off.","pos":[1978,2011]},{"content":"CWinApp::EnableD2DSupport","pos":[2017,2042]},{"content":"Enables application <ph id=\"ph1\">`D2D`</ph> support.","pos":[2072,2106],"source":"Enables application `D2D` support."},{"content":"Call this method before the main window is initialized.","pos":[2107,2162]},{"content":"CWinApp::EnableHtmlHelp","pos":[2168,2191]},{"content":"Implements HTMLHelp for the application, rather than WinHelp.","pos":[2219,2280]},{"content":"CWinApp::EnableTaskbarInteraction","pos":[2286,2319]},{"content":"Enables Taskbar interaction.","pos":[2357,2385]},{"content":"CWinApp::ExitInstance","pos":[2391,2412]},{"content":"Override to clean up when your application terminates.","pos":[2438,2492]},{"content":"CWinApp::GetApplicationRecoveryParameter","pos":[2498,2538]},{"content":"Retrieves the input parameter for the application recovery method.","pos":[2583,2649]},{"content":"CWinApp::GetApplicationRecoveryPingInterval","pos":[2655,2698]},{"content":"Returns the length of time that the restart manager waits for the recovery callback function to return.","pos":[2746,2849]},{"content":"CWinApp::GetApplicationRestartFlags","pos":[2855,2890]},{"content":"Returns the flags for the restart manager.","pos":[2930,2972]},{"content":"CWinApp::GetAppRegistryKey","pos":[2978,3004]},{"content":"Returns key for HKEY_CURRENT_USER<ph id=\"ph1\">\\\\</ph>\"Software\"\\RegistryKey\\ProfileName.","pos":[3035,3105],"source":"Returns key for HKEY_CURRENT_USER\\\\\"Software\"\\RegistryKey\\ProfileName."},{"content":"CWinApp::GetDataRecoveryHandler","pos":[3111,3142]},{"content":"Gets the data recovery handler for this instance of the application.","pos":[3178,3246]},{"content":"CWinApp::GetFirstDocTemplatePosition","pos":[3252,3288]},{"content":"Retrieves the position of the first document template.","pos":[3329,3383]},{"content":"CWinApp::GetHelpMode","pos":[3389,3409]},{"content":"Retrieves the type of help used by the application.","pos":[3434,3485]},{"content":"CWinApp::GetNextDocTemplate","pos":[3491,3518]},{"content":"Retrieves the position of a document template.","pos":[3550,3596]},{"content":"Can be used recursively.","pos":[3597,3621]},{"content":"CWinApp::GetPrinterDeviceDefaults","pos":[3627,3660]},{"content":"Retrieves the printer device defaults.","pos":[3698,3736]},{"content":"CWinApp::GetProfileBinary","pos":[3742,3767]},{"content":"Retrieves binary data from an entry in the application's .INI file.","pos":[3797,3864]},{"content":"CWinApp::GetProfileInt","pos":[3870,3892]},{"content":"Retrieves an integer from an entry in the application's .INI file.","pos":[3919,3985]},{"content":"CWinApp::GetProfileString","pos":[3991,4016]},{"content":"Retrieves a string from an entry in the application's .INI file.","pos":[4046,4110]},{"content":"CWinApp::GetSectionKey","pos":[4116,4138]},{"content":"Returns key for HKEY_CURRENT_USER<ph id=\"ph1\">\\\\</ph>\"Software\"\\RegistryKey\\AppName\\lpszSection.","pos":[4165,4243],"source":"Returns key for HKEY_CURRENT_USER\\\\\"Software\"\\RegistryKey\\AppName\\lpszSection."},{"content":"CWinApp::HideApplication","pos":[4249,4273]},{"content":"Hides the application before closing all documents.","pos":[4302,4353]},{"content":"CWinApp::HtmlHelp","pos":[4359,4376]},{"pos":[4398,4436],"content":"Calls the <ph id=\"ph1\">`HTMLHelp`</ph> Windows function.","source":"Calls the `HTMLHelp` Windows function."},{"content":"CWinApp::InitInstance","pos":[4442,4463]},{"content":"Override to perform Windows instance initialization, such as creating your window objects.","pos":[4489,4579]},{"content":"CWinApp::IsTaskbarInteractionEnabled","pos":[4585,4621]},{"content":"Tells whether Windows 7 Taskbar interaction is enabled.","pos":[4662,4717]},{"content":"CWinApp::LoadCursor","pos":[4723,4742]},{"content":"Loads a cursor resource.","pos":[4766,4790]},{"content":"CWinApp::LoadIcon","pos":[4796,4813]},{"content":"Loads an icon resource.","pos":[4835,4858]},{"content":"CWinApp::LoadOEMCursor","pos":[4864,4886]},{"pos":[4913,5000],"content":"Loads a Windows OEM predefined cursor that the <bpt id=\"p1\">**</bpt>OCR_<ept id=\"p1\">**</ept> constants specify in WINDOWS.H.","source":"Loads a Windows OEM predefined cursor that the **OCR_** constants specify in WINDOWS.H."},{"content":"CWinApp::LoadOEMIcon","pos":[5006,5026]},{"pos":[5051,5136],"content":"Loads a Windows OEM predefined icon that the <bpt id=\"p1\">**</bpt>OIC_<ept id=\"p1\">**</ept> constants specify in WINDOWS.H.","source":"Loads a Windows OEM predefined icon that the **OIC_** constants specify in WINDOWS.H."},{"content":"CWinApp::LoadStandardCursor","pos":[5142,5169]},{"pos":[5201,5284],"content":"Loads a Windows predefined cursor that the <bpt id=\"p1\">**</bpt>IDC_<ept id=\"p1\">**</ept> constants specify in WINDOWS.H.","source":"Loads a Windows predefined cursor that the **IDC_** constants specify in WINDOWS.H."},{"content":"CWinApp::LoadStandardIcon","pos":[5290,5315]},{"pos":[5345,5426],"content":"Loads a Windows predefined icon that the <bpt id=\"p1\">**</bpt>IDI_<ept id=\"p1\">**</ept> constants specify in WINDOWS.H.","source":"Loads a Windows predefined icon that the **IDI_** constants specify in WINDOWS.H."},{"content":"CWinApp::OnDDECommand","pos":[5432,5453]},{"content":"Called by the framework in response to a dynamic data exchange (DDE) execute command.","pos":[5479,5564]},{"content":"CWinApp::OnIdle","pos":[5570,5585]},{"content":"Override to perform application-specific idle-time processing.","pos":[5605,5667]},{"content":"CWinApp::OpenDocumentFile","pos":[5673,5698]},{"content":"Called by the framework to open a document from a file.","pos":[5728,5783]},{"content":"CWinApp::ParseCommandLine","pos":[5789,5814]},{"content":"Parses individual parameters and flags in the command line.","pos":[5844,5903]},{"content":"CWinApp::PreTranslateMessage","pos":[5909,5937]},{"pos":[5970,6200],"content":"Filters messages before they are dispatched to the Windows functions <bpt id=\"p1\">[</bpt>TranslateMessage<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms644955)</ept> and <bpt id=\"p2\">[</bpt>DispatchMessage<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms644934)</ept>.","source":"Filters messages before they are dispatched to the Windows functions [TranslateMessage](http://msdn.microsoft.com/library/windows/desktop/ms644955) and [DispatchMessage](http://msdn.microsoft.com/library/windows/desktop/ms644934)."},{"content":"CWinApp::ProcessMessageFilter","pos":[6206,6235]},{"content":"Intercepts certain messages before they reach the application.","pos":[6269,6331]},{"content":"CWinApp::ProcessShellCommand","pos":[6337,6365]},{"content":"Handles command-line arguments and flags.","pos":[6398,6439]},{"content":"CWinApp::ProcessWndProcException","pos":[6445,6477]},{"content":"Intercepts all unhandled exceptions thrown by the application's message and command handlers.","pos":[6514,6607]},{"content":"CWinApp::Register","pos":[6613,6630]},{"content":"Performs customized registration.","pos":[6652,6685]},{"content":"CWinApp::RegisterWithRestartManager","pos":[6691,6726]},{"content":"Registers the application with the restart manager.","pos":[6766,6817]},{"content":"CWinApp::ReopenPreviousFilesAtRestart","pos":[6823,6860]},{"content":"Determines whether the restart manager reopens the files that were open when the application exited unexpectedly.","pos":[6902,7015]},{"content":"CWinApp::RestartInstance","pos":[7021,7045]},{"content":"Handles an application restart initiated by the restart manager.","pos":[7074,7138]},{"content":"CWinApp::RestoreAutosavedFilesAtRestart","pos":[7144,7183]},{"content":"Determines whether the restart manager restores the autosaved files when it restarts the application.","pos":[7227,7328]},{"content":"CWinApp::Run","pos":[7334,7346]},{"content":"Runs the default message loop.","pos":[7363,7393]},{"content":"Override to customize the message loop.","pos":[7394,7433]},{"content":"CWinApp::RunAutomated","pos":[7439,7460]},{"content":"Tests the application's command line for the <bpt id=\"p1\">**</bpt>/Automation<ept id=\"p1\">**</ept> option.","pos":[7486,7554],"source":"Tests the application's command line for the **/Automation** option."},{"content":"Obsolete.","pos":[7555,7564]},{"content":"Instead, use the value in <bpt id=\"p1\">[</bpt>CCommandLineInfo::m_bRunAutomated<ept id=\"p1\">](../../mfc/reference/ccommandlineinfo-class.md#ccommandlineinfo__m_brunautomated)</ept> after calling <bpt id=\"p2\">[</bpt>ParseCommandLine<ept id=\"p2\">](#cwinapp__parsecommandline)</ept>.","pos":[7565,7769],"source":" Instead, use the value in [CCommandLineInfo::m_bRunAutomated](../../mfc/reference/ccommandlineinfo-class.md#ccommandlineinfo__m_brunautomated) after calling [ParseCommandLine](#cwinapp__parsecommandline)."},{"content":"CWinApp::RunEmbedded","pos":[7775,7795]},{"content":"Tests the application's command line for the <bpt id=\"p1\">**</bpt>/Embedding<ept id=\"p1\">**</ept> option.","pos":[7820,7887],"source":"Tests the application's command line for the **/Embedding** option."},{"content":"Obsolete.","pos":[7888,7897]},{"content":"Instead, use the value in <bpt id=\"p1\">[</bpt>CCommandLineInfo::m_bRunEmbedded<ept id=\"p1\">](../../mfc/reference/ccommandlineinfo-class.md#ccommandlineinfo__m_brunembedded)</ept> after calling <bpt id=\"p2\">[</bpt>ParseCommandLine<ept id=\"p2\">](#cwinapp__parsecommandline)</ept>.","pos":[7898,8100],"source":" Instead, use the value in [CCommandLineInfo::m_bRunEmbedded](../../mfc/reference/ccommandlineinfo-class.md#ccommandlineinfo__m_brunembedded) after calling [ParseCommandLine](#cwinapp__parsecommandline)."},{"content":"CWinApp::SaveAllModified","pos":[8106,8130]},{"content":"Prompts the user to save all modified documents.","pos":[8159,8207]},{"content":"CWinApp::SelectPrinter","pos":[8213,8235]},{"content":"Selects a printer previously indicated by a user through a print dialog box.","pos":[8262,8338]},{"content":"CWinApp::SetHelpMode","pos":[8344,8364]},{"content":"Sets and initializes the type of help used by the application.","pos":[8389,8451]},{"content":"CWinApp::SupportsApplicationRecovery","pos":[8457,8493]},{"content":"Determines whether the restart manager recovers an application that exited unexpectedly.","pos":[8534,8622]},{"content":"CWinApp::SupportsAutosaveAtInterval","pos":[8628,8663]},{"content":"Determines whether the restart manager autosaves open documents at a regular interval.","pos":[8703,8789]},{"content":"CWinApp::SupportsAutosaveAtRestart","pos":[8795,8829]},{"content":"Determines whether the restart manager autosaves any open documents when the application restarts.","pos":[8868,8966]},{"content":"CWinApp::SupportsRestartManager","pos":[8972,9003]},{"content":"Determines whether the application supports the restart manager.","pos":[9039,9103]},{"content":"CWinApp::Unregister","pos":[9109,9128]},{"pos":[9152,9222],"content":"Unregisters everything known to be registered by the <ph id=\"ph1\">`CWinApp`</ph> object.","source":"Unregisters everything known to be registered by the `CWinApp` object."},{"content":"CWinApp::WinHelp","pos":[9228,9244]},{"pos":[9265,9302],"content":"Calls the <ph id=\"ph1\">`WinHelp`</ph> Windows function.","source":"Calls the `WinHelp` Windows function."},{"content":"CWinApp::WriteProfileBinary","pos":[9308,9335]},{"content":"Writes binary data to an entry in the application's .INI file.","pos":[9367,9429]},{"content":"CWinApp::WriteProfileInt","pos":[9435,9459]},{"content":"Writes an integer to an entry in the application's .INI file.","pos":[9488,9549]},{"content":"CWinApp::WriteProfileString","pos":[9555,9582]},{"content":"Writes a string to an entry in the application's .INI file.","pos":[9614,9673]},{"content":"Protected Methods","pos":[9684,9701]},{"content":"Name","pos":[9708,9712]},{"content":"Description","pos":[9713,9724]},{"content":"CWinApp::EnableShellOpen","pos":[9763,9787]},{"content":"Allows the user to open data files from the Windows File Manager.","pos":[9816,9881]},{"content":"CWinApp::LoadStdProfileSettings","pos":[9887,9918]},{"content":"Loads standard .INI file settings and enables the MRU file list feature.","pos":[9954,10026]},{"content":"CWinApp::OnContextHelp","pos":[10032,10054]},{"content":"Handles SHIFT+F1 Help within the application.","pos":[10081,10126]},{"content":"CWinApp::OnFileNew","pos":[10132,10150]},{"pos":[10173,10210],"content":"Implements the <ph id=\"ph1\">`ID_FILE_NEW`</ph> command.","source":"Implements the `ID_FILE_NEW` command."},{"content":"CWinApp::OnFileOpen","pos":[10216,10235]},{"pos":[10259,10297],"content":"Implements the <ph id=\"ph1\">`ID_FILE_OPEN`</ph> command.","source":"Implements the `ID_FILE_OPEN` command."},{"content":"CWinApp::OnFilePrintSetup","pos":[10303,10328]},{"pos":[10358,10403],"content":"Implements the <ph id=\"ph1\">`ID_FILE_PRINT_SETUP`</ph> command.","source":"Implements the `ID_FILE_PRINT_SETUP` command."},{"content":"CWinApp::OnHelp","pos":[10409,10424]},{"content":"Handles F1 Help within the application (using the current context).","pos":[10444,10511]},{"content":"CWinApp::OnHelpFinder","pos":[10517,10538]},{"pos":[10564,10624],"content":"Handles the <ph id=\"ph1\">`ID_HELP_FINDER`</ph> and <ph id=\"ph2\">`ID_DEFAULT_HELP`</ph> commands.","source":"Handles the `ID_HELP_FINDER` and `ID_DEFAULT_HELP` commands."},{"content":"CWinApp::OnHelpIndex","pos":[10630,10650]},{"pos":[10675,10745],"content":"Handles the <ph id=\"ph1\">`ID_HELP_INDEX`</ph> command and provides a default Help topic.","source":"Handles the `ID_HELP_INDEX` command and provides a default Help topic."},{"content":"CWinApp::OnHelpUsing","pos":[10751,10771]},{"pos":[10796,10832],"content":"Handles the <ph id=\"ph1\">`ID_HELP_USING`</ph> command.","source":"Handles the `ID_HELP_USING` command."},{"content":"CWinApp::RegisterShellFileTypes","pos":[10838,10869]},{"content":"Registers all the application's document types with the Windows File Manager.","pos":[10905,10982]},{"content":"CWinApp::SetAppID","pos":[10988,11005]},{"content":"Explicitly sets Application User Model ID for the application.","pos":[11027,11089]},{"content":"This method should be called before any user interface is presented to user (the best place is the application constructor).","pos":[11090,11214]},{"content":"CWinApp::SetRegistryKey","pos":[11220,11243]},{"content":"Causes application settings to be stored in the registry instead of .INI files.","pos":[11271,11350]},{"content":"CWinApp::UnregisterShellFileTypes","pos":[11356,11389]},{"content":"Unregisters all the application's document types with the Windows File Manager.","pos":[11427,11506]},{"content":"Public Data Members","pos":[11517,11536]},{"content":"Name","pos":[11543,11547]},{"content":"Description","pos":[11548,11559]},{"content":"CWinApp::m_bHelpMode","pos":[11598,11618]},{"content":"Indicates if the user is in Help context mode (typically invoked with SHIFT+F1).","pos":[11643,11723]},{"content":"CWinApp::m_eHelpType","pos":[11729,11749]},{"content":"Specifies the type of help used by the application.","pos":[11774,11825]},{"content":"CWinApp::m_hInstance","pos":[11831,11851]},{"content":"Identifies the current instance of the application.","pos":[11876,11927]},{"content":"CWinApp::m_lpCmdLine","pos":[11933,11953]},{"content":"Points to a null-terminated string that specifies the command line for the application.","pos":[11978,12065]},{"content":"CWinApp::m_nCmdShow","pos":[12071,12090]},{"content":"Specifies how the window is to be shown initially.","pos":[12114,12164]},{"content":"CWinApp::m_pActiveWnd","pos":[12170,12191]},{"content":"Pointer to the main window of the container application when an OLE server is in-place active.","pos":[12217,12311]},{"content":"CWinApp::m_pszAppID","pos":[12317,12336]},{"content":"Application User Model ID.","pos":[12360,12386]},{"content":"CWinApp::m_pszAppName","pos":[12392,12413]},{"content":"Specifies the name of the application.","pos":[12439,12477]},{"content":"CWinApp::m_pszExeName","pos":[12483,12504]},{"content":"The module name of the application.","pos":[12530,12565]},{"content":"CWinApp::m_pszHelpFilePath","pos":[12571,12597]},{"content":"The path to the application's Help file.","pos":[12628,12668]},{"content":"CWinApp::m_pszProfileName","pos":[12674,12699]},{"content":"The application's .INI filename.","pos":[12729,12761]},{"content":"CWinApp::m_pszRegistryKey","pos":[12767,12792]},{"content":"Used to determine the full registry key for storing application profile settings.","pos":[12822,12903]},{"content":"Protected Data Members","pos":[12914,12936]},{"content":"Name","pos":[12943,12947]},{"content":"Description","pos":[12948,12959]},{"content":"CWinApp::m_dwRestartManagerSupportFlags","pos":[12998,13037]},{"content":"Flags that determine how the restart manager behaves.","pos":[13081,13134]},{"content":"CWinApp::m_nAutosaveInterval","pos":[13140,13168]},{"content":"The length of time in milliseconds between autosaves.","pos":[13201,13254]},{"content":"CWinApp::m_pDataRecoveryHandler","pos":[13260,13291]},{"content":"Pointer to the data recovery handler for the application.","pos":[13327,13384]},{"content":"Remarks","pos":[13394,13401]},{"content":"An application object provides member functions for initializing your application (and each instance of it) and for running the application.","pos":[13405,13545]},{"content":"Each application that uses the Microsoft Foundation classes can only contain one object derived from <ph id=\"ph1\">`CWinApp`</ph>.","pos":[13552,13663],"source":"Each application that uses the Microsoft Foundation classes can only contain one object derived from `CWinApp`."},{"content":"This object is constructed when other C++ global objects are constructed and is already available when Windows calls the <ph id=\"ph1\">`WinMain`</ph> function, which is supplied by the Microsoft Foundation Class Library.","pos":[13664,13865],"source":" This object is constructed when other C++ global objects are constructed and is already available when Windows calls the `WinMain` function, which is supplied by the Microsoft Foundation Class Library."},{"content":"Declare your derived <ph id=\"ph1\">`CWinApp`</ph> object at the global level.","pos":[13866,13924],"source":" Declare your derived `CWinApp` object at the global level."},{"pos":[13931,14100],"content":"When you derive an application class from <ph id=\"ph1\">`CWinApp`</ph>, override the <bpt id=\"p1\">[</bpt>InitInstance<ept id=\"p1\">](#cwinapp__initinstance)</ept> member function to create your application's main window object.","source":"When you derive an application class from `CWinApp`, override the [InitInstance](#cwinapp__initinstance) member function to create your application's main window object."},{"pos":[14107,14294],"content":"In addition to the <ph id=\"ph1\">`CWinApp`</ph> member functions, the Microsoft Foundation Class Library provides the following global functions to access your <ph id=\"ph2\">`CWinApp`</ph> object and other global information:","source":"In addition to the `CWinApp` member functions, the Microsoft Foundation Class Library provides the following global functions to access your `CWinApp` object and other global information:"},{"pos":[14302,14409],"content":"<bpt id=\"p1\">[</bpt>AfxGetApp<ept id=\"p1\">](application-information-and-management.md#afxgetapp)</ept> Obtains a pointer to the <ph id=\"ph1\">`CWinApp`</ph> object.","source":"[AfxGetApp](application-information-and-management.md#afxgetapp) Obtains a pointer to the `CWinApp` object."},{"pos":[14417,14557],"content":"<bpt id=\"p1\">[</bpt>AfxGetInstanceHandle<ept id=\"p1\">](application-information-and-management.md#afxgetinstancehandle)</ept> Obtains a handle to the current application instance.","source":"[AfxGetInstanceHandle](application-information-and-management.md#afxgetinstancehandle) Obtains a handle to the current application instance."},{"pos":[14565,14700],"content":"<bpt id=\"p1\">[</bpt>AfxGetResourceHandle<ept id=\"p1\">](application-information-and-management.md#afxgetresourcehandle)</ept> Obtains a handle to the application's resources.","source":"[AfxGetResourceHandle](application-information-and-management.md#afxgetresourcehandle) Obtains a handle to the application's resources."},{"content":"<bpt id=\"p1\">[</bpt>AfxGetAppName<ept id=\"p1\">](application-information-and-management.md#afxgetappname)</ept> Obtains a pointer to a string containing the application's name.","pos":[14708,14845],"source":"[AfxGetAppName](application-information-and-management.md#afxgetappname) Obtains a pointer to a string containing the application's name."},{"content":"Alternately, if you have a pointer to the <ph id=\"ph1\">`CWinApp`</ph> object, use <ph id=\"ph2\">`m_pszExeName`</ph> to get the application's name.","pos":[14846,14955],"source":" Alternately, if you have a pointer to the `CWinApp` object, use `m_pszExeName` to get the application's name."},{"pos":[14962,15115],"content":"See <bpt id=\"p1\">[</bpt>CWinApp: The Application Class<ept id=\"p1\">](../../mfc/cwinapp-the-application-class.md)</ept> for more on the <ph id=\"ph1\">`CWinApp`</ph> class, including an overview of the following:","source":"See [CWinApp: The Application Class](../../mfc/cwinapp-the-application-class.md) for more on the `CWinApp` class, including an overview of the following:"},{"pos":[15132,15180],"content":"-derived code written by the Application Wizard."},{"pos":[15197,15251],"content":"'s role in the execution sequence of your application."},{"pos":[15268,15311],"content":"'s default member function implementations."},{"pos":[15328,15348],"content":"'s key overridables."},{"content":"The <bpt id=\"p1\">**</bpt>m_hPrevInstance<ept id=\"p1\">**</ept> data member no longer exists.","pos":[15355,15408],"source":"The **m_hPrevInstance** data member no longer exists."},{"content":"For information on detecting a previous instance of <ph id=\"ph1\">`CWinApp`</ph>, see the Knowledge Base article \"How To Identify a Previous Instance of an Application\" (KB106385) at <bpt id=\"p1\">[</bpt>http://support.microsoft.com/default.aspxscid=kb;en-us;106385<ept id=\"p1\">](http://support.microsoft.com/default.aspxscid=kb;en-us;106385)</ept>.","pos":[15409,15700],"source":" For information on detecting a previous instance of `CWinApp`, see the Knowledge Base article \"How To Identify a Previous Instance of an Application\" (KB106385) at [http://support.microsoft.com/default.aspxscid=kb;en-us;106385](http://support.microsoft.com/default.aspxscid=kb;en-us;106385)."},{"content":"Inheritance Hierarchy","pos":[15709,15730]},{"content":"CObject","pos":[15735,15742]},{"content":"CCmdTarget","pos":[15789,15799]},{"content":"CWinThread","pos":[15849,15859]},{"content":"Requirements","pos":[15926,15938]},{"pos":[15942,15962],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxwin.h","source":"**Header:** afxwin.h"},{"pos":[16012,16035],"content":"CWinApp::AddDocTemplate"},{"content":"Call this member function to add a document template to the list of available document templates that the application maintains.","pos":[16039,16167]},{"content":"Parameters","pos":[16238,16248]},{"content":"A pointer to the <ph id=\"ph1\">`CDocTemplate`</ph> to be added.","pos":[16267,16311],"source":" A pointer to the `CDocTemplate` to be added."},{"content":"Remarks","pos":[16321,16328]},{"pos":[16332,16463],"content":"You should add all document templates to an application before you call <bpt id=\"p1\">[</bpt>RegisterShellFileTypes<ept id=\"p1\">](#cwinapp__registershellfiletypes)</ept>.","source":"You should add all document templates to an application before you call [RegisterShellFileTypes](#cwinapp__registershellfiletypes)."},{"content":"Example","pos":[16473,16480]},{"pos":[16495,16514],"content":"NVC_MFCWindowing#35"},{"pos":[16628,16656],"content":"CWinApp::AddToRecentFileList"},{"pos":[16660,16729],"content":"Call this member function to add <ph id=\"ph1\">`lpszPathName`</ph> to the MRU file list.","source":"Call this member function to add `lpszPathName` to the MRU file list."},{"content":"Parameters","pos":[16810,16820]},{"content":"The path of the file.","pos":[16842,16863]},{"content":"Remarks","pos":[16873,16880]},{"pos":[16884,17049],"content":"You should call the <bpt id=\"p1\">[</bpt>LoadStdProfileSettings<ept id=\"p1\">](#cwinapp__loadstdprofilesettings)</ept> member function to load the current MRU file list before you use this member function.","source":"You should call the [LoadStdProfileSettings](#cwinapp__loadstdprofilesettings) member function to load the current MRU file list before you use this member function."},{"content":"The framework calls this member function when it opens a file or executes the Save As command to save a file with a new name.","pos":[17056,17181]},{"content":"Example","pos":[17191,17198]},{"pos":[17213,17232],"content":"NVC_MFCWindowing#36"},{"pos":[17354,17390],"content":"CWinApp::ApplicationRecoveryCallback"},{"content":"Called by the framework when the application unexpectedly exits.","pos":[17394,17458]},{"content":"Parameters","pos":[17546,17556]},{"content":"[in]","pos":[17560,17564]},{"content":"Reserved for future use.","pos":[17579,17603]},{"content":"Return Value","pos":[17613,17625]},{"content":"0 if this method is successful; nonzero if an error occurs.","pos":[17629,17688]},{"content":"Remarks","pos":[17698,17705]},{"content":"If your application supports the restart manager, the framework calls this function when your application unexpectedly exits.","pos":[17709,17834]},{"content":"The default implementation of <ph id=\"ph1\">`ApplicationRecoveryCallback`</ph> uses the <ph id=\"ph2\">`CDataRecoveryHandler`</ph> to save the list of currently open documents to the registry.","pos":[17841,17994],"source":"The default implementation of `ApplicationRecoveryCallback` uses the `CDataRecoveryHandler` to save the list of currently open documents to the registry."},{"content":"This method does not autosave any files.","pos":[17995,18035]},{"pos":[18042,18298],"content":"To customize the behavior, override this function in a derived <bpt id=\"p1\">[</bpt>CWinApp Class<ept id=\"p1\">](../../mfc/reference/cwinapp-class.md)</ept> or pass your own application recovery method as a parameter to <bpt id=\"p2\">[</bpt>CWinApp::RegisterWithRestartManager<ept id=\"p2\">](#cwinapp__registerwithrestartmanager)</ept>.","source":"To customize the behavior, override this function in a derived [CWinApp Class](../../mfc/reference/cwinapp-class.md) or pass your own application recovery method as a parameter to [CWinApp::RegisterWithRestartManager](#cwinapp__registerwithrestartmanager)."},{"pos":[18351,18377],"content":"CWinApp::CloseAllDocuments"},{"content":"Call this member function to close all open documents before exiting.","pos":[18381,18450]},{"content":"Parameters","pos":[18517,18527]},{"content":"Specifies whether or not the Windows session is being ended.","pos":[18548,18608]},{"content":"It is <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if the session is being ended; otherwise <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","pos":[18609,18675],"source":" It is **TRUE** if the session is being ended; otherwise **FALSE**."},{"content":"Remarks","pos":[18685,18692]},{"pos":[18696,18781],"content":"Call <bpt id=\"p1\">[</bpt>HideApplication<ept id=\"p1\">](#cwinapp__hideapplication)</ept> before calling <ph id=\"ph1\">`CloseAllDocuments`</ph>.","source":"Call [HideApplication](#cwinapp__hideapplication) before calling `CloseAllDocuments`."},{"pos":[18832,18856],"content":"CWinApp::CreatePrinterDC"},{"content":"Call this member function to create a printer device context (DC) from the selected printer.","pos":[18860,18952]},{"content":"Parameters","pos":[19008,19018]},{"content":"A reference to a printer device context.","pos":[19030,19070]},{"content":"Return Value","pos":[19080,19092]},{"content":"Nonzero if the printer device context is created successfully; otherwise 0.","pos":[19096,19171]},{"content":"Remarks","pos":[19181,19188]},{"pos":[19210,19299],"content":"initializes the device context that you pass in by reference, so you can use it to print."},{"content":"If the function is successful, when you have finished printing, you must destroy the device context.","pos":[19306,19406]},{"content":"You can let the destructor of the <bpt id=\"p1\">[</bpt>CDC<ept id=\"p1\">](../../mfc/reference/cdc-class.md)</ept> object do it, or you can do it explicitly by calling <bpt id=\"p2\">[</bpt>CDC::DeleteDC<ept id=\"p2\">](../../mfc/reference/cdc-class.md#cdc__deletedc)</ept>.","pos":[19407,19598],"source":" You can let the destructor of the [CDC](../../mfc/reference/cdc-class.md) object do it, or you can do it explicitly by calling [CDC::DeleteDC](../../mfc/reference/cdc-class.md#cdc__deletedc)."},{"pos":[19641,19657],"content":"CWinApp::CWinApp"},{"pos":[19661,19753],"content":"Constructs a <ph id=\"ph1\">`CWinApp`</ph> object and passes <ph id=\"ph2\">`lpszAppName`</ph> to be stored as the application name.","source":"Constructs a `CWinApp` object and passes `lpszAppName` to be stored as the application name."},{"content":"Parameters","pos":[19815,19825]},{"content":"A null-terminated string that contains the application name that Windows uses.","pos":[19846,19924]},{"content":"If this argument is not supplied or is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`CWinApp`</ph> uses the resource string <bpt id=\"p2\">**</bpt>AFX_IDS_APP_TITLE<ept id=\"p2\">**</ept> or the filename of the executable file.","pos":[19925,20070],"source":" If this argument is not supplied or is **NULL**, `CWinApp` uses the resource string **AFX_IDS_APP_TITLE** or the filename of the executable file."},{"content":"Remarks","pos":[20080,20087]},{"content":"You should construct one global object of your <ph id=\"ph1\">`CWinApp`</ph>-derived class.","pos":[20091,20162],"source":"You should construct one global object of your `CWinApp`-derived class."},{"content":"You can have only one <ph id=\"ph1\">`CWinApp`</ph> object in your application.","pos":[20163,20222],"source":" You can have only one `CWinApp` object in your application."},{"content":"The constructor stores a pointer to the <ph id=\"ph1\">`CWinApp`</ph> object so that <ph id=\"ph2\">`WinMain`</ph> can call the object's member functions to initialize and run the application.","pos":[20223,20375],"source":" The constructor stores a pointer to the `CWinApp` object so that `WinMain` can call the object's member functions to initialize and run the application."},{"pos":[20421,20440],"content":"CWinApp::DelRegTree"},{"content":"Deletes a specific registry key and all its subkeys.","pos":[20444,20496]},{"content":"Parameters","pos":[20706,20716]},{"content":"hParentKey","pos":[20721,20731]},{"content":"Handle to a registry key.","pos":[20736,20761]},{"content":"strKeyName","pos":[20769,20779]},{"content":"The name of the registry key to be deleted.","pos":[20784,20827]},{"content":"pTM","pos":[20835,20838]},{"content":"Pointer to CAtlTransactionManager object.","pos":[20843,20884]},{"content":"Return Value","pos":[20894,20906]},{"content":"If the function succeeds, the return value is ERROR_SUCCESS.","pos":[20910,20970]},{"content":"If the function fails, the return value is a nonzero error code defined in Winerror.h.","pos":[20971,21057]},{"content":"Remarks","pos":[21067,21074]},{"content":"Call this function to delete the specified key and its subkeys.","pos":[21078,21141]},{"pos":[21189,21210],"content":"CWinApp::DoMessageBox"},{"pos":[21214,21383],"content":"The framework calls this member function to implement a message box for the global function <bpt id=\"p1\">[</bpt>AfxMessageBox<ept id=\"p1\">](cstring-formatting-and-message-box-display.md#afxmessagebox)</ept>.","source":"The framework calls this member function to implement a message box for the global function [AfxMessageBox](cstring-formatting-and-message-box-display.md#afxmessagebox)."},{"content":"Parameters","pos":[21499,21509]},{"content":"lpszPrompt","pos":[21514,21524]},{"content":"Address of text in the message box.","pos":[21529,21564]},{"content":"The message box <bpt id=\"p1\">[</bpt>style<ept id=\"p1\">](../../mfc/reference/message-box-styles.md)</ept>.","pos":[21582,21649],"source":" The message box [style](../../mfc/reference/message-box-styles.md)."},{"content":"An index to a Help context string.","pos":[21671,21705]},{"content":"Return Value","pos":[21715,21727]},{"pos":[21731,21774],"content":"Returns the same values as <ph id=\"ph1\">`AfxMessageBox`</ph>.","source":"Returns the same values as `AfxMessageBox`."},{"content":"Remarks","pos":[21784,21791]},{"pos":[21795,21879],"content":"Do not call this member function to open a message box; use <ph id=\"ph1\">`AfxMessageBox`</ph> instead.","source":"Do not call this member function to open a message box; use `AfxMessageBox` instead."},{"pos":[21886,21987],"content":"Override this member function to customize your application-wide processing of <ph id=\"ph1\">`AfxMessageBox`</ph> calls.","source":"Override this member function to customize your application-wide processing of `AfxMessageBox` calls."},{"pos":[22035,22056],"content":"CWinApp::DoWaitCursor"},{"pos":[22060,22481],"content":"This member function is called by the framework to implement <bpt id=\"p1\">[</bpt>CWaitCursor<ept id=\"p1\">](../../mfc/reference/cwaitcursor-class.md)</ept>, <bpt id=\"p2\">[</bpt>CCmdTarget::BeginWaitCursor<ept id=\"p2\">](../../mfc/reference/ccmdtarget-class.md#ccmdtarget__beginwaitcursor)</ept>, <bpt id=\"p3\">[</bpt>CCmdTarget::EndWaitCursor<ept id=\"p3\">](../../mfc/reference/ccmdtarget-class.md#ccmdtarget__endwaitcursor)</ept>, and <bpt id=\"p4\">[</bpt>CCmdTarget::RestoreWaitCursor<ept id=\"p4\">](../../mfc/reference/ccmdtarget-class.md#ccmdtarget__restorewaitcursor)</ept>.","source":"This member function is called by the framework to implement [CWaitCursor](../../mfc/reference/cwaitcursor-class.md), [CCmdTarget::BeginWaitCursor](../../mfc/reference/ccmdtarget-class.md#ccmdtarget__beginwaitcursor), [CCmdTarget::EndWaitCursor](../../mfc/reference/ccmdtarget-class.md#ccmdtarget__endwaitcursor), and [CCmdTarget::RestoreWaitCursor](../../mfc/reference/ccmdtarget-class.md#ccmdtarget__restorewaitcursor)."},{"content":"Parameters","pos":[22544,22554]},{"content":"If this parameter is 1, a wait cursor appears.","pos":[22569,22615]},{"content":"If 0, the wait cursor is restored without incrementing the reference count.","pos":[22616,22691]},{"content":"If –1, the wait cursor ends.","pos":[22692,22720]},{"content":"Remarks","pos":[22730,22737]},{"content":"The default implements an hourglass cursor.","pos":[22741,22784]},{"content":"maintains a reference count.","pos":[22800,22828]},{"content":"When positive, the hourglass cursor is displayed.","pos":[22829,22878]},{"pos":[22885,23076],"content":"While you would not normally call <ph id=\"ph1\">`DoWaitCursor`</ph> directly, you could override this member function to change the wait cursor or to do additional processing while the wait cursor is displayed.","source":"While you would not normally call `DoWaitCursor` directly, you could override this member function to change the wait cursor or to do additional processing while the wait cursor is displayed."},{"pos":[23083,23165],"content":"For an easier, more streamlined way to implement a wait cursor, use <ph id=\"ph1\">`CWaitCursor`</ph>.","source":"For an easier, more streamlined way to implement a wait cursor, use `CWaitCursor`."},{"content":"Example","pos":[23175,23182]},{"pos":[23197,23216],"content":"NVC_MFCWindowing#37"},{"pos":[23327,23352],"content":"CWinApp::EnableD2DSupport"},{"content":"Enables application D2D support.","pos":[23446,23478]},{"content":"Call this method before the main window is initialized.","pos":[23479,23534]},{"content":"Parameters","pos":[23724,23734]},{"content":"The threading model of the D2D factory and the resources it creates.","pos":[23758,23826]},{"content":"A value that specifies whether the write factory object will be shared or isolated","pos":[23855,23937]},{"content":"Return Value","pos":[23947,23959]},{"content":"Returns TRUE if D2D support was enabled, FALSE - otherwise","pos":[23963,24021]},{"pos":[24071,24094],"content":"CWinApp::EnableHtmlHelp"},{"pos":[24098,24228],"content":"Call this member function from within the constructor of your <ph id=\"ph1\">`CWinApp`</ph>-derived class to use HTMLHelp for your application's help.","source":"Call this member function from within the constructor of your `CWinApp`-derived class to use HTMLHelp for your application's help."},{"content":"Remarks","pos":[24276,24283]},{"pos":[24334,24358],"content":"CWinApp::EnableShellOpen"},{"pos":[24362,24551],"content":"Call this function, typically from your <ph id=\"ph1\">`InitInstance`</ph> override, to enable your application's users to open data files when they double-click the files from within the Windows File Manager.","source":"Call this function, typically from your `InitInstance` override, to enable your application's users to open data files when they double-click the files from within the Windows File Manager."},{"content":"Remarks","pos":[24600,24607]},{"pos":[24611,24783],"content":"Call the <ph id=\"ph1\">`RegisterShellFileTypes`</ph> member function in conjunction with this function, or provide a .REG file with your application for manual registration of document types.","source":"Call the `RegisterShellFileTypes` member function in conjunction with this function, or provide a .REG file with your application for manual registration of document types."},{"content":"Example","pos":[24793,24800]},{"pos":[24815,24834],"content":"NVC_MFCWindowing#38"},{"pos":[24953,24986],"content":"CWinApp::EnableTaskbarInteraction"},{"content":"Enables Taskbar interaction.","pos":[24990,25018]},{"content":"Parameters","pos":[25098,25108]},{"content":"Specifies whether interaction with Windows 7 taskbar should be enabled ( <ph id=\"ph1\">`TRUE`</ph>), or disabled ( <ph id=\"ph2\">`FALSE`</ph>).","pos":[25125,25230],"source":" Specifies whether interaction with Windows 7 taskbar should be enabled ( `TRUE`), or disabled ( `FALSE`)."},{"content":"Return Value","pos":[25240,25252]},{"pos":[25256,25321],"content":"Returns <ph id=\"ph1\">`TRUE`</ph> if taskbar interaction can be enabled or disabled.","source":"Returns `TRUE` if taskbar interaction can be enabled or disabled."},{"content":"Remarks","pos":[25331,25338]},{"pos":[25342,25442],"content":"This method must be called before creation of main window, otherwise it asserts and returns <ph id=\"ph1\">`FALSE`</ph>.","source":"This method must be called before creation of main window, otherwise it asserts and returns `FALSE`."},{"pos":[25490,25511],"content":"CWinApp::ExitInstance"},{"pos":[25515,25620],"content":"Called by the framework from within the <bpt id=\"p1\">**</bpt>Run<ept id=\"p1\">**</ept> member function to exit this instance of the application.","source":"Called by the framework from within the **Run** member function to exit this instance of the application."},{"content":"Return Value","pos":[25673,25685]},{"content":"The application's exit code; 0 indicates no errors, and values greater than 0 indicate an error.","pos":[25689,25785]},{"content":"This value is used as the return value from <ph id=\"ph1\">`WinMain`</ph>.","pos":[25786,25840],"source":" This value is used as the return value from `WinMain`."},{"content":"Remarks","pos":[25850,25857]},{"pos":[25861,25947],"content":"Do not call this member function from anywhere but within the <bpt id=\"p1\">**</bpt>Run<ept id=\"p1\">**</ept> member function.","source":"Do not call this member function from anywhere but within the **Run** member function."},{"content":"The default implementation of this function writes framework options to the application's .INI file.","pos":[25954,26054]},{"content":"Override this function to clean up when your application terminates.","pos":[26055,26123]},{"content":"Example","pos":[26133,26140]},{"pos":[26155,26174],"content":"NVC_MFCWindowing#39"},{"pos":[26300,26340],"content":"CWinApp::GetApplicationRecoveryParameter"},{"content":"Retrieves the input parameter for the application recovery method.","pos":[26344,26410]},{"content":"Return Value","pos":[26485,26497]},{"content":"The default input parameter for the application recovery method.","pos":[26501,26565]},{"content":"Remarks","pos":[26575,26582]},{"pos":[26586,26639],"content":"The default behavior of this function returns <ph id=\"ph1\">`NULL`</ph>.","source":"The default behavior of this function returns `NULL`."},{"pos":[26646,26750],"content":"For more information, see <bpt id=\"p1\">[</bpt>CWinApp::ApplicationRecoveryCallback<ept id=\"p1\">](#cwinapp__applicationrecoverycallback)</ept>.","source":"For more information, see [CWinApp::ApplicationRecoveryCallback](#cwinapp__applicationrecoverycallback)."},{"pos":[26820,26863],"content":"CWinApp::GetApplicationRecoveryPingInterval"},{"content":"Returns the length of time that the restart manager waits for the recovery callback function to return.","pos":[26867,26970]},{"content":"Return Value","pos":[27047,27059]},{"content":"The length of time in milliseconds.","pos":[27063,27098]},{"content":"Remarks","pos":[27108,27115]},{"content":"When an application that is registered with the restart manager exits unexpectedly, the application tries to save open documents and calls the recovery callback function.","pos":[27119,27289]},{"content":"The default recovery callback function is <bpt id=\"p1\">[</bpt>CWinApp::ApplicationRecoveryCallback<ept id=\"p1\">](#cwinapp__applicationrecoverycallback)</ept>.","pos":[27290,27410],"source":" The default recovery callback function is [CWinApp::ApplicationRecoveryCallback](#cwinapp__applicationrecoverycallback)."},{"content":"The length of time that the framework waits for the recovery callback function to return is the ping interval.","pos":[27417,27527]},{"content":"You can customize the ping interval by overriding <ph id=\"ph1\">`CWinApp::GetApplicationRecoveryPingInterval`</ph> or by providing a custom value to <ph id=\"ph2\">`RegisterWithRestartManager`</ph>.","pos":[27528,27687],"source":" You can customize the ping interval by overriding `CWinApp::GetApplicationRecoveryPingInterval` or by providing a custom value to `RegisterWithRestartManager`."},{"pos":[27749,27784],"content":"CWinApp::GetApplicationRestartFlags"},{"content":"Returns the flags for the restart manager.","pos":[27788,27830]},{"content":"Return Value","pos":[27899,27911]},{"content":"The flags for the restart manager.","pos":[27915,27949]},{"content":"The default implementation returns 0.","pos":[27950,27987]},{"content":"Remarks","pos":[27997,28004]},{"content":"The flags for the restart manager have no effect with the default implementation.","pos":[28008,28089]},{"content":"They are provided for future use.","pos":[28090,28123]},{"pos":[28130,28292],"content":"You set the flags when you register the application with the restart manager by using <bpt id=\"p1\">[</bpt>CWinApp::RegisterWithRestartManager<ept id=\"p1\">](#cwinapp__registerwithrestartmanager)</ept>.","source":"You set the flags when you register the application with the restart manager by using [CWinApp::RegisterWithRestartManager](#cwinapp__registerwithrestartmanager)."},{"content":"The possible values for the restart manager flags are as follows:","pos":[28299,28364]},{"pos":[28521,28547],"content":"CWinApp::GetAppRegistryKey"},{"content":"Returns the key for HKEY_CURRENT_USER<ph id=\"ph1\">\\\\</ph>\"Software\"\\RegistryKey\\ProfileName.","pos":[28551,28625],"source":"Returns the key for HKEY_CURRENT_USER\\\\\"Software\"\\RegistryKey\\ProfileName."},{"content":"Parameters","pos":[28713,28723]},{"content":"Pointer to a <ph id=\"ph1\">`CAtlTransactionManager`</ph> object.","pos":[28736,28781],"source":" Pointer to a `CAtlTransactionManager` object."},{"content":"Return Value","pos":[28791,28803]},{"pos":[28807,28866],"content":"Application key if the function succeeds; otherwise <ph id=\"ph1\">`NULL`</ph>.","source":"Application key if the function succeeds; otherwise `NULL`."},{"content":"Remarks","pos":[28876,28883]},{"pos":[28941,28972],"content":"CWinApp::GetDataRecoveryHandler"},{"content":"Gets the data recovery handler for this instance of the application.","pos":[28976,29044]},{"content":"Return Value","pos":[29125,29137]},{"content":"The data recovery handler for this instance of the application.","pos":[29141,29204]},{"content":"Remarks","pos":[29214,29221]},{"content":"Each application that uses the restart manager must have one instance of the <bpt id=\"p1\">[</bpt>CDataRecoveryHandler Class<ept id=\"p1\">](../../mfc/reference/cdatarecoveryhandler-class.md)</ept>.","pos":[29225,29382],"source":"Each application that uses the restart manager must have one instance of the [CDataRecoveryHandler Class](../../mfc/reference/cdatarecoveryhandler-class.md)."},{"content":"This class is responsible for monitoring open documents and autosaving files.","pos":[29383,29460]},{"content":"The behavior of the <ph id=\"ph1\">`CDataRecoveryHandler`</ph> depends on the configuration of the restart manager.","pos":[29461,29556],"source":" The behavior of the `CDataRecoveryHandler` depends on the configuration of the restart manager."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CDataRecoveryHandler Class<ept id=\"p1\">](../../mfc/reference/cdatarecoveryhandler-class.md)</ept>.","pos":[29557,29663],"source":" For more information, see [CDataRecoveryHandler Class](../../mfc/reference/cdatarecoveryhandler-class.md)."},{"content":"This method returns <ph id=\"ph1\">`NULL`</ph> on operating systems earlier than <ph id=\"ph2\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>.","pos":[29670,29813],"source":"This method returns `NULL` on operating systems earlier than [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]."},{"content":"The restart manager is not supported on operating systems earlier than <ph id=\"ph1\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>.","pos":[29814,29967],"source":" The restart manager is not supported on operating systems earlier than [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]."},{"content":"If the application does not currently have a data recovery handler, this method creates one and returns a pointer to it.","pos":[29974,30094]},{"pos":[30157,30193],"content":"CWinApp::GetFirstDocTemplatePosition"},{"content":"Gets the position of the first document template in the application.","pos":[30197,30265]},{"content":"Return Value","pos":[30339,30351]},{"pos":[30355,30466],"content":"A <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value that can be used for iteration or object pointer retrieval; <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept> if the list is empty.","source":"A **POSITION** value that can be used for iteration or object pointer retrieval; **NULL** if the list is empty."},{"content":"Remarks","pos":[30476,30483]},{"pos":[30487,30669],"content":"Use the <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value returned in a call to <bpt id=\"p2\">[</bpt>GetNextDocTemplate<ept id=\"p2\">](#cwinapp__getnextdoctemplate)</ept> to get the first <bpt id=\"p3\">[</bpt>CDocTemplate<ept id=\"p3\">](../../mfc/reference/cdoctemplate-class.md)</ept> object.","source":"Use the **POSITION** value returned in a call to [GetNextDocTemplate](#cwinapp__getnextdoctemplate) to get the first [CDocTemplate](../../mfc/reference/cdoctemplate-class.md) object."},{"pos":[30716,30736],"content":"CWinApp::GetHelpMode"},{"content":"Retrieves the type of help used by the application.","pos":[30740,30791]},{"content":"Return Value","pos":[30845,30857]},{"content":"The help type used by the application.","pos":[30861,30899]},{"content":"See <bpt id=\"p1\">[</bpt>CWinApp::m_eHelpType<ept id=\"p1\">](#cwinapp__m_ehelptype)</ept> for more information.","pos":[30900,30971],"source":" See [CWinApp::m_eHelpType](#cwinapp__m_ehelptype) for more information."},{"pos":[31025,31052],"content":"CWinApp::GetNextDocTemplate"},{"pos":[31056,31146],"content":"Gets the document template identified by <ph id=\"ph1\">`pos`</ph>, then sets <ph id=\"ph2\">`pos`</ph> to the <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value.","source":"Gets the document template identified by `pos`, then sets `pos` to the **POSITION** value."},{"content":"Parameters","pos":[31229,31239]},{"content":"A reference to a <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value returned by a previous call to <ph id=\"ph1\">`GetNextDocTemplate`</ph> or <bpt id=\"p2\">[</bpt>GetFirstDocTemplatePosition<ept id=\"p2\">](#cwinapp__getfirstdoctemplateposition)</ept>.","pos":[31252,31412],"source":" A reference to a **POSITION** value returned by a previous call to `GetNextDocTemplate` or [GetFirstDocTemplatePosition](#cwinapp__getfirstdoctemplateposition)."},{"content":"The value is updated to the next position by this call.","pos":[31413,31468]},{"content":"Return Value","pos":[31478,31490]},{"pos":[31494,31574],"content":"A pointer to a <bpt id=\"p1\">[</bpt>CDocTemplate<ept id=\"p1\">](../../mfc/reference/cdoctemplate-class.md)</ept> object.","source":"A pointer to a [CDocTemplate](../../mfc/reference/cdoctemplate-class.md) object."},{"content":"Remarks","pos":[31584,31591]},{"pos":[31595,31739],"content":"You can use <ph id=\"ph1\">`GetNextDocTemplate`</ph> in a forward iteration loop if you establish the initial position with a call to <ph id=\"ph2\">`GetFirstDocTemplatePosition`</ph>.","source":"You can use `GetNextDocTemplate` in a forward iteration loop if you establish the initial position with a call to `GetFirstDocTemplatePosition`."},{"content":"You must ensure that your <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value is valid.","pos":[31746,31800],"source":"You must ensure that your **POSITION** value is valid."},{"content":"If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.","pos":[31801,31892]},{"pos":[31899,32004],"content":"If the retrieved document template is the last available, then the new value of <ph id=\"ph1\">`pos`</ph> is set to <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"If the retrieved document template is the last available, then the new value of `pos` is set to **NULL**."},{"pos":[32064,32097],"content":"CWinApp::GetPrinterDeviceDefaults"},{"content":"Call this member function to prepare a printer device context for printing.","pos":[32101,32176]},{"content":"Parameters","pos":[32258,32268]},{"content":"pPrintDlg","pos":[32273,32282]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>PRINTDLG<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms646843)</ept> structure.","pos":[32287,32383],"source":" A pointer to a [PRINTDLG](http://msdn.microsoft.com/library/windows/desktop/ms646843) structure."},{"content":"Return Value","pos":[32393,32405]},{"content":"Nonzero if successful; otherwise 0.","pos":[32409,32444]},{"content":"Remarks","pos":[32454,32461]},{"content":"Retrieves the current printer defaults from the Windows .INI file as necessary, or uses the last printer configuration set by the user in Print Setup.","pos":[32465,32615]},{"content":"Example","pos":[32625,32632]},{"pos":[32647,32666],"content":"NVC_MFCWindowing#40"},{"pos":[32777,32802],"content":"CWinApp::GetProfileBinary"},{"content":"Call this member function to retrieve binary data from an entry within a specified section of the application's registry or .INI file.","pos":[32806,32940]},{"content":"Parameters","pos":[33081,33091]},{"content":"lpszSection","pos":[33096,33107]},{"content":"Points to a null-terminated string that specifies the section containing the entry.","pos":[33112,33195]},{"content":"lpszEntry","pos":[33203,33212]},{"content":"Points to a null-terminated string that contains the entry whose value is to be retrieved.","pos":[33217,33307]},{"content":"ppData","pos":[33315,33321]},{"content":"Points to a pointer that will receive the address of the data.","pos":[33326,33388]},{"content":"pBytes","pos":[33396,33402]},{"content":"Points to a UINT that will receive the size of the data (in bytes).","pos":[33407,33474]},{"content":"Return Value","pos":[33484,33496]},{"content":"Nonzero if successful; otherwise 0.","pos":[33500,33535]},{"content":"Remarks","pos":[33545,33552]},{"pos":[33556,33682],"content":"This member function is not case sensitive, so the strings in the <bpt id=\"p1\">*</bpt>lpszSection<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>lpszEntry<ept id=\"p2\">*</ept> parameters may differ in case.","source":"This member function is not case sensitive, so the strings in the *lpszSection* and *lpszEntry* parameters may differ in case."},{"pos":[33690,33849],"content":"[!NOTE]\n**GetProfileBinary** allocates a buffer and returns its address in \\* *ppData*. The caller is responsible for freeing the buffer using **delete []**.","leadings":["","> "],"nodes":[{"content":"**GetProfileBinary** allocates a buffer and returns its address in \\* *ppData*. The caller is responsible for freeing the buffer using **delete []**.","pos":[8,157],"nodes":[{"content":"<bpt id=\"p1\">**</bpt>GetProfileBinary<ept id=\"p1\">**</ept> allocates a buffer and returns its address in <ph id=\"ph1\">\\*</ph> <bpt id=\"p2\">*</bpt>ppData<ept id=\"p2\">*</ept>.","pos":[0,79],"source":"**GetProfileBinary** allocates a buffer and returns its address in \\* *ppData*."},{"content":"The caller is responsible for freeing the buffer using <bpt id=\"p1\">**</bpt>delete []<ept id=\"p1\">**</ept>.","pos":[80,149],"source":" The caller is responsible for freeing the buffer using **delete []**."}]}]},{"pos":[33857,34097],"content":"[!IMPORTANT]\n The data returned by this function is not necessarily NULL terminated, and the caller must perform validation. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).","leadings":["","> "],"nodes":[{"content":" The data returned by this function is not necessarily NULL terminated, and the caller must perform validation. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).","pos":[13,238],"nodes":[{"content":"The data returned by this function is not necessarily NULL terminated, and the caller must perform validation.","pos":[1,111]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Avoiding Buffer Overruns<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms717795)</ept>.","pos":[112,225],"source":" For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795)."}]}]},{"content":"Example","pos":[34107,34114]},{"pos":[34129,34148],"content":"NVC_MFCWindowing#41"},{"pos":[34214,34305],"content":"For an additional example, see <bpt id=\"p1\">[</bpt>CWinApp::WriteProfileBinary<ept id=\"p1\">](#cwinapp__writeprofilebinary)</ept>.","source":"For an additional example, see [CWinApp::WriteProfileBinary](#cwinapp__writeprofilebinary)."},{"pos":[34354,34376],"content":"CWinApp::GetProfileInt"},{"content":"Call this member function to retrieve the value of an integer from an entry within a specified section of the application's registry or .INI file.","pos":[34380,34526]},{"content":"Parameters","pos":[34642,34652]},{"content":"Points to a null-terminated string that specifies the section containing the entry.","pos":[34673,34756]},{"content":"Points to a null-terminated string that contains the entry whose value is to be retrieved.","pos":[34778,34868]},{"content":"Specifies the default value to return if the framework cannot find the entry.","pos":[34889,34966]},{"content":"Return Value","pos":[34976,34988]},{"content":"The integer value of the string that follows the specified entry if the function is successful.","pos":[34992,35087]},{"content":"The return value is the value of the <ph id=\"ph1\">`nDefault`</ph> parameter if the function does not find the entry.","pos":[35088,35186],"source":" The return value is the value of the `nDefault` parameter if the function does not find the entry."},{"content":"The return value is 0 if the value that corresponds to the specified entry is not an integer.","pos":[35187,35280]},{"content":"This member function supports hexadecimal notation for the value in the .INI file.","pos":[35287,35369]},{"content":"When you retrieve a signed integer, you should cast the value into an <ph id=\"ph1\">`int`</ph>.","pos":[35370,35446],"source":" When you retrieve a signed integer, you should cast the value into an `int`."},{"content":"Remarks","pos":[35456,35463]},{"pos":[35467,35593],"content":"This member function is not case sensitive, so the strings in the <ph id=\"ph1\">`lpszSection`</ph> and <ph id=\"ph2\">`lpszEntry`</ph> parameters may differ in case.","source":"This member function is not case sensitive, so the strings in the `lpszSection` and `lpszEntry` parameters may differ in case."},{"pos":[35601,35841],"content":"[!IMPORTANT]\n The data returned by this function is not necessarily NULL terminated, and the caller must perform validation. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).","leadings":["","> "],"nodes":[{"content":" The data returned by this function is not necessarily NULL terminated, and the caller must perform validation. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).","pos":[13,238],"nodes":[{"content":"The data returned by this function is not necessarily NULL terminated, and the caller must perform validation.","pos":[1,111]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Avoiding Buffer Overruns<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms717795)</ept>.","pos":[112,225],"source":" For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795)."}]}]},{"content":"Example","pos":[35851,35858]},{"pos":[35873,35892],"content":"NVC_MFCWindowing#42"},{"pos":[35958,36043],"content":"For an additional example, see <bpt id=\"p1\">[</bpt>CWinApp::WriteProfileInt<ept id=\"p1\">](#cwinapp__writeprofileint)</ept>.","source":"For an additional example, see [CWinApp::WriteProfileInt](#cwinapp__writeprofileint)."},{"pos":[36095,36120],"content":"CWinApp::GetProfileString"},{"content":"Call this member function to retrieve the string associated with an entry within the specified section in the application's registry or .INI file.","pos":[36124,36270]},{"content":"Parameters","pos":[36406,36416]},{"content":"Points to a null-terminated string that specifies the section containing the entry.","pos":[36437,36520]},{"content":"Points to a null-terminated string that contains the entry whose string is to be retrieved.","pos":[36542,36633]},{"content":"This value must not be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[36634,36666],"source":" This value must not be **NULL**."},{"content":"Points to the default string value for the given entry if the entry cannot be found in the initialization file.","pos":[36690,36801]},{"content":"Return Value","pos":[36811,36823]},{"content":"The return value is the string from the application's .INI file or <ph id=\"ph1\">`lpszDefault`</ph> if the string cannot be found.","pos":[36827,36938],"source":"The return value is the string from the application's .INI file or `lpszDefault` if the string cannot be found."},{"content":"The maximum string length supported by the framework is <ph id=\"ph1\">`_MAX_PATH`</ph>.","pos":[36939,37007],"source":" The maximum string length supported by the framework is `_MAX_PATH`."},{"content":"If <ph id=\"ph1\">`lpszDefault`</ph> is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the return value is an empty string.","pos":[37008,37074],"source":" If `lpszDefault` is **NULL**, the return value is an empty string."},{"content":"Remarks","pos":[37084,37091]},{"pos":[37099,37339],"content":"[!IMPORTANT]\n The data returned by this function is not necessarily NULL terminated, and the caller must perform validation. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).","leadings":["","> "],"nodes":[{"content":" The data returned by this function is not necessarily NULL terminated, and the caller must perform validation. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).","pos":[13,238],"nodes":[{"content":"The data returned by this function is not necessarily NULL terminated, and the caller must perform validation.","pos":[1,111]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Avoiding Buffer Overruns<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms717795)</ept>.","pos":[112,225],"source":" For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795)."}]}]},{"content":"Example","pos":[37349,37356]},{"pos":[37371,37390],"content":"NVC_MFCWindowing#43"},{"pos":[37456,37547],"content":"For another example, see the example for <bpt id=\"p1\">[</bpt>CWinApp::GetProfileInt<ept id=\"p1\">](#cwinapp__getprofileint)</ept>.","source":"For another example, see the example for [CWinApp::GetProfileInt](#cwinapp__getprofileint)."},{"pos":[37596,37618],"content":"CWinApp::GetSectionKey"},{"content":"Returns the key for HKEY_CURRENT_USER<ph id=\"ph1\">\\\\</ph>\"Software\"\\RegistryKey\\AppName\\lpszSection.","pos":[37622,37704],"source":"Returns the key for HKEY_CURRENT_USER\\\\\"Software\"\\RegistryKey\\AppName\\lpszSection."},{"content":"Parameters","pos":[37811,37821]},{"content":"The name of the key to be obtained.","pos":[37842,37877]},{"content":"Pointer to a <ph id=\"ph1\">`CAtlTransactionManager`</ph> object.","pos":[37893,37938],"source":" Pointer to a `CAtlTransactionManager` object."},{"content":"Return Value","pos":[37948,37960]},{"pos":[37964,38019],"content":"Section key if the function succeeds; otherwise <ph id=\"ph1\">`NULL`</ph>.","source":"Section key if the function succeeds; otherwise `NULL`."},{"content":"Remarks","pos":[38029,38036]},{"pos":[38087,38111],"content":"CWinApp::HideApplication"},{"content":"Call this member function to hide an application before closing the open documents.","pos":[38115,38198]},{"pos":[38281,38298],"content":"CWinApp::HtmlHelp"},{"content":"Call this member function to invoke the HTMLHelp application.","pos":[38302,38363]},{"content":"Parameters","pos":[38460,38470]},{"content":"Specifies additional data.","pos":[38486,38512]},{"content":"The value used depends on the value of the <ph id=\"ph1\">`nCmd`</ph> parameter.","pos":[38513,38573],"source":" The value used depends on the value of the `nCmd` parameter."},{"content":"Specifies the type of help requested.","pos":[38590,38627]},{"content":"For a list of possible values and how they affect the <ph id=\"ph1\">`dwData`</ph> parameter, see the <ph id=\"ph2\">`uCommand`</ph> parameter described in About the HTMLHelp API Function in the <ph id=\"ph3\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[38628,38835],"source":" For a list of possible values and how they affect the `dwData` parameter, see the `uCommand` parameter described in About the HTMLHelp API Function in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Remarks","pos":[38845,38852]},{"content":"The framework also calls this function to invoke the HTMLHelp application.","pos":[38856,38930]},{"content":"The framework will automatically close the HTMLHelp application when your application terminates.","pos":[38937,39034]},{"pos":[39082,39103],"content":"CWinApp::InitInstance"},{"content":"Windows allows several copies of the same program to run at the same time.","pos":[39107,39181]},{"content":"Return Value","pos":[39235,39247]},{"content":"Nonzero if initialization is successful; otherwise 0.","pos":[39251,39304]},{"content":"Remarks","pos":[39314,39321]},{"content":"Application initialization is conceptually divided into two sections: one-time application initialization that is done the first time the program runs, and instance initialization that runs each time a copy of the program runs, including the first time.","pos":[39325,39578]},{"content":"The framework's implementation of <ph id=\"ph1\">`WinMain`</ph> calls this function.","pos":[39579,39643],"source":" The framework's implementation of `WinMain` calls this function."},{"content":"Override <ph id=\"ph1\">`InitInstance`</ph> to initialize each new instance of your application running under Windows.","pos":[39650,39748],"source":"Override `InitInstance` to initialize each new instance of your application running under Windows."},{"content":"Typically, you override <ph id=\"ph1\">`InitInstance`</ph> to construct your main window object and set the <ph id=\"ph2\">`CWinThread::m_pMainWnd`</ph> data member to point to that window.","pos":[39749,39898],"source":" Typically, you override `InitInstance` to construct your main window object and set the `CWinThread::m_pMainWnd` data member to point to that window."},{"content":"For more information on overriding this member function, see <bpt id=\"p1\">[</bpt>CWinApp: The Application Class<ept id=\"p1\">](../../mfc/cwinapp-the-application-class.md)</ept>.","pos":[39899,40037],"source":" For more information on overriding this member function, see [CWinApp: The Application Class](../../mfc/cwinapp-the-application-class.md)."},{"pos":[40045,40592],"content":"[!NOTE]\n MFC applications must be initialized as single threaded apartment (STA). If you call [CoInitializeEx](http://msdn.microsoft.com/library/windows/desktop/ms695279) in your `InitInstance` override, specify `COINIT_APARTMENTTHREADED` (rather than `COINIT_MULTITHREADED`). For more information, see PRB: MFC Application Stops Responding When You Initialize the Application as a Multithreaded Apartment (828643) at [http://support.microsoft.com/default.aspxscid=kb;en-us;828643](http://support.microsoft.com/default.aspxscid=kb;en-us;828643).","leadings":["","> "],"nodes":[{"content":" MFC applications must be initialized as single threaded apartment (STA). If you call [CoInitializeEx](http://msdn.microsoft.com/library/windows/desktop/ms695279) in your `InitInstance` override, specify `COINIT_APARTMENTTHREADED` (rather than `COINIT_MULTITHREADED`). For more information, see PRB: MFC Application Stops Responding When You Initialize the Application as a Multithreaded Apartment (828643) at [http://support.microsoft.com/default.aspxscid=kb;en-us;828643](http://support.microsoft.com/default.aspxscid=kb;en-us;828643).","pos":[8,545],"nodes":[{"content":"MFC applications must be initialized as single threaded apartment (STA).","pos":[1,73]},{"content":"If you call <bpt id=\"p1\">[</bpt>CoInitializeEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms695279)</ept> in your <ph id=\"ph1\">`InitInstance`</ph> override, specify <ph id=\"ph2\">`COINIT_APARTMENTTHREADED`</ph> (rather than <ph id=\"ph3\">`COINIT_MULTITHREADED`</ph>).","pos":[74,268],"source":" If you call [CoInitializeEx](http://msdn.microsoft.com/library/windows/desktop/ms695279) in your `InitInstance` override, specify `COINIT_APARTMENTTHREADED` (rather than `COINIT_MULTITHREADED`)."},{"content":"For more information, see PRB: MFC Application Stops Responding When You Initialize the Application as a Multithreaded Apartment (828643) at <bpt id=\"p1\">[</bpt>http://support.microsoft.com/default.aspxscid=kb;en-us;828643<ept id=\"p1\">](http://support.microsoft.com/default.aspxscid=kb;en-us;828643)</ept>.","pos":[269,537],"source":" For more information, see PRB: MFC Application Stops Responding When You Initialize the Application as a Multithreaded Apartment (828643) at [http://support.microsoft.com/default.aspxscid=kb;en-us;828643](http://support.microsoft.com/default.aspxscid=kb;en-us;828643)."}]}]},{"content":"Example","pos":[40602,40609]},{"pos":[40624,40641],"content":"NVC_MFCListView#9"},{"pos":[40764,40800],"content":"CWinApp::IsTaskbarInteractionEnabled"},{"content":"Tells whether Windows 7 Taskbar interaction is enabled.","pos":[40804,40859]},{"content":"Return Value","pos":[40928,40940]},{"pos":[40944,41053],"content":"Returns <ph id=\"ph1\">`TRUE`</ph> if <ph id=\"ph2\">`EnableTaskbarInteraction`</ph> has been called and the Operating System is Windows 7 or higher.","source":"Returns `TRUE` if `EnableTaskbarInteraction` has been called and the Operating System is Windows 7 or higher."},{"content":"Remarks","pos":[41063,41070]},{"content":"Taskbar interaction means that MDI application displays the content of MDI children in separate tabbed thumbnails that appear when the mouse pointer is over the application taskbar button.","pos":[41074,41262]},{"pos":[41308,41327],"content":"CWinApp::LoadCursor"},{"pos":[41331,41448],"content":"Loads the cursor resource named by <ph id=\"ph1\">`lpszResourceName`</ph> or specified by <ph id=\"ph2\">`nIDResource`</ph> from the current executable file.","source":"Loads the cursor resource named by `lpszResourceName` or specified by `nIDResource` from the current executable file."},{"content":"Parameters","pos":[41577,41587]},{"content":"Points to a null-terminated string that contains the name of the cursor resource.","pos":[41613,41694]},{"content":"You can use a <ph id=\"ph1\">`CString`</ph> for this argument.","pos":[41695,41737],"source":" You can use a `CString` for this argument."},{"content":"ID of the cursor resource.","pos":[41761,41787]},{"content":"For a list of resources, see <bpt id=\"p1\">[</bpt>LoadCursor<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms648391)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[41788,41949],"source":" For a list of resources, see [LoadCursor](http://msdn.microsoft.com/library/windows/desktop/ms648391) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Return Value","pos":[41959,41971]},{"pos":[41975,42030],"content":"A handle to a cursor if successful; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"A handle to a cursor if successful; otherwise **NULL**."},{"content":"Remarks","pos":[42040,42047]},{"pos":[42064,42194],"content":"loads the cursor into memory only if it has not been previously loaded; otherwise, it retrieves a handle of the existing resource."},{"pos":[42201,42361],"content":"Use the <bpt id=\"p1\">[</bpt>LoadStandardCursor<ept id=\"p1\">](#cwinapp__loadstandardcursor)</ept> or <bpt id=\"p2\">[</bpt>LoadOEMCursor<ept id=\"p2\">](#cwinapp__loadoemcursor)</ept> member function to access the predefined Windows cursors.","source":"Use the [LoadStandardCursor](#cwinapp__loadstandardcursor) or [LoadOEMCursor](#cwinapp__loadoemcursor) member function to access the predefined Windows cursors."},{"content":"Example","pos":[42371,42378]},{"pos":[42393,42412],"content":"NVC_MFCWindowing#44"},{"pos":[42516,42533],"content":"CWinApp::LoadIcon"},{"pos":[42537,42644],"content":"Loads the icon resource named by <ph id=\"ph1\">`lpszResourceName`</ph> or specified by <ph id=\"ph2\">`nIDResource`</ph> from the executable file.","source":"Loads the icon resource named by `lpszResourceName` or specified by `nIDResource` from the executable file."},{"content":"Parameters","pos":[42765,42775]},{"content":"Points to a null-terminated string that contains the name of the icon resource.","pos":[42801,42880]},{"content":"You can also use a <ph id=\"ph1\">`CString`</ph> for this argument.","pos":[42881,42928],"source":" You can also use a `CString` for this argument."},{"content":"ID number of the icon resource.","pos":[42952,42983]},{"content":"Return Value","pos":[42993,43005]},{"pos":[43009,43063],"content":"A handle to an icon if successful; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"A handle to an icon if successful; otherwise **NULL**."},{"content":"Remarks","pos":[43073,43080]},{"pos":[43095,43211],"content":"loads the icon only if it has not been previously loaded; otherwise, it retrieves a handle of the existing resource."},{"pos":[43218,43376],"content":"You can use the <bpt id=\"p1\">[</bpt>LoadStandardIcon<ept id=\"p1\">](#cwinapp__loadstandardicon)</ept> or <bpt id=\"p2\">[</bpt>LoadOEMIcon<ept id=\"p2\">](#cwinapp__loadoemicon)</ept> member function to access the predefined Windows icons.","source":"You can use the [LoadStandardIcon](#cwinapp__loadstandardicon) or [LoadOEMIcon](#cwinapp__loadoemicon) member function to access the predefined Windows icons."},{"pos":[43384,43625],"content":"[!NOTE]\n This member function calls the Win32 API function [LoadIcon](http://msdn.microsoft.com/library/windows/desktop/ms648072), which can only load an icon whose size conforms to the **SM_CXICON** and **SM_CYICON** system metric values.","leadings":["","> "],"nodes":[{"content":"This member function calls the Win32 API function <bpt id=\"p1\">[</bpt>LoadIcon<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms648072)</ept>, which can only load an icon whose size conforms to the <bpt id=\"p2\">**</bpt>SM_CXICON<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>SM_CYICON<ept id=\"p3\">**</ept> system metric values.","pos":[9,239],"source":" This member function calls the Win32 API function [LoadIcon](http://msdn.microsoft.com/library/windows/desktop/ms648072), which can only load an icon whose size conforms to the **SM_CXICON** and **SM_CYICON** system metric values."}]},{"pos":[43674,43696],"content":"CWinApp::LoadOEMCursor"},{"pos":[43700,43770],"content":"Loads the Windows predefined cursor resource specified by <ph id=\"ph1\">`nIDCursor`</ph>.","source":"Loads the Windows predefined cursor resource specified by `nIDCursor`."},{"content":"Parameters","pos":[43843,43853]},{"content":"An <bpt id=\"p1\">**</bpt>OCR_<ept id=\"p1\">**</ept> manifest constant identifier that specifies a predefined Windows cursor.","pos":[43872,43956],"source":" An **OCR_** manifest constant identifier that specifies a predefined Windows cursor."},{"content":"You must have <bpt id=\"p1\">**</bpt>#define OEMRESOURCE<ept id=\"p1\">**</ept> before <bpt id=\"p2\">**</bpt>#include <ph id=\"ph1\">\\&lt;</ph>afxwin.h&gt;<ept id=\"p2\">**</ept> to gain access to the <bpt id=\"p3\">**</bpt>OCR_<ept id=\"p3\">**</ept> constants in WINDOWS.H.","pos":[43957,44081],"source":" You must have **#define OEMRESOURCE** before **#include \\<afxwin.h>** to gain access to the **OCR_** constants in WINDOWS.H."},{"content":"Return Value","pos":[44091,44103]},{"pos":[44107,44162],"content":"A handle to a cursor if successful; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"A handle to a cursor if successful; otherwise **NULL**."},{"content":"Remarks","pos":[44172,44179]},{"pos":[44183,44318],"content":"Use the <ph id=\"ph1\">`LoadOEMCursor`</ph> or <bpt id=\"p1\">[</bpt>LoadStandardCursor<ept id=\"p1\">](#cwinapp__loadstandardcursor)</ept> member function to access the predefined Windows cursors.","source":"Use the `LoadOEMCursor` or [LoadStandardCursor](#cwinapp__loadstandardcursor) member function to access the predefined Windows cursors."},{"content":"Example","pos":[44328,44335]},{"pos":[44350,44369],"content":"NVC_MFCWindowing#45"},{"pos":[44445,44464],"content":"NVC_MFCWindowing#46"},{"pos":[44571,44591],"content":"CWinApp::LoadOEMIcon"},{"pos":[44595,44661],"content":"Loads the Windows predefined icon resource specified by <ph id=\"ph1\">`nIDIcon`</ph>.","source":"Loads the Windows predefined icon resource specified by `nIDIcon`."},{"content":"Parameters","pos":[44728,44738]},{"content":"An <bpt id=\"p1\">**</bpt>OIC_<ept id=\"p1\">**</ept> manifest constant identifier that specifies a predefined Windows icon.","pos":[44755,44837],"source":" An **OIC_** manifest constant identifier that specifies a predefined Windows icon."},{"content":"You must have <bpt id=\"p1\">**</bpt>#define OEMRESOURCE<ept id=\"p1\">**</ept> before <bpt id=\"p2\">**</bpt>#include <ph id=\"ph1\">\\&lt;</ph>afxwin.h&gt;<ept id=\"p2\">**</ept> to access the <bpt id=\"p3\">**</bpt>OIC_<ept id=\"p3\">**</ept> constants in WINDOWS.H.","pos":[44838,44954],"source":" You must have **#define OEMRESOURCE** before **#include \\<afxwin.h>** to access the **OIC_** constants in WINDOWS.H."},{"content":"Return Value","pos":[44964,44976]},{"pos":[44980,45034],"content":"A handle to an icon if successful; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"A handle to an icon if successful; otherwise **NULL**."},{"content":"Remarks","pos":[45044,45051]},{"pos":[45055,45182],"content":"Use the <ph id=\"ph1\">`LoadOEMIcon`</ph> or <bpt id=\"p1\">[</bpt>LoadStandardIcon<ept id=\"p1\">](#cwinapp__loadstandardicon)</ept> member function to access the predefined Windows icons.","source":"Use the `LoadOEMIcon` or [LoadStandardIcon](#cwinapp__loadstandardicon) member function to access the predefined Windows icons."},{"pos":[45236,45263],"content":"CWinApp::LoadStandardCursor"},{"pos":[45267,45344],"content":"Loads the Windows predefined cursor resource that <ph id=\"ph1\">`lpszCursorName`</ph> specifies.","source":"Loads the Windows predefined cursor resource that `lpszCursorName` specifies."},{"content":"Parameters","pos":[45430,45440]},{"content":"An <bpt id=\"p1\">**</bpt>IDC_<ept id=\"p1\">**</ept> manifest constant identifier that specifies a predefined Windows cursor.","pos":[45464,45548],"source":" An **IDC_** manifest constant identifier that specifies a predefined Windows cursor."},{"content":"These identifiers are defined in WINDOWS.H.","pos":[45549,45592]},{"content":"The following list shows the possible predefined values and meanings for <ph id=\"ph1\">`lpszCursorName`</ph>:","pos":[45593,45683],"source":" The following list shows the possible predefined values and meanings for `lpszCursorName`:"},{"pos":[45691,45726],"content":"<bpt id=\"p1\">**</bpt>IDC_ARROW<ept id=\"p1\">**</ept> Standard arrow cursor","source":"**IDC_ARROW** Standard arrow cursor"},{"pos":[45734,45778],"content":"<bpt id=\"p1\">**</bpt>IDC_IBEAM<ept id=\"p1\">**</ept> Standard text-insertion cursor","source":"**IDC_IBEAM** Standard text-insertion cursor"},{"pos":[45786,45864],"content":"<bpt id=\"p1\">**</bpt>IDC_WAIT<ept id=\"p1\">**</ept> Hourglass cursor used when Windows performs a time-consuming task","source":"**IDC_WAIT** Hourglass cursor used when Windows performs a time-consuming task"},{"pos":[45872,45917],"content":"<bpt id=\"p1\">**</bpt>IDC_CROSS<ept id=\"p1\">**</ept> Cross-hair cursor for selection","source":"**IDC_CROSS** Cross-hair cursor for selection"},{"pos":[45925,45970],"content":"<bpt id=\"p1\">**</bpt>IDC_UPARROW<ept id=\"p1\">**</ept> Arrow that points straight up","source":"**IDC_UPARROW** Arrow that points straight up"},{"pos":[45978,46036],"content":"<bpt id=\"p1\">**</bpt>IDC_SIZE<ept id=\"p1\">**</ept> Obsolete and unsupported; use <bpt id=\"p2\">**</bpt>IDC_SIZEALL<ept id=\"p2\">**</ept>","source":"**IDC_SIZE** Obsolete and unsupported; use **IDC_SIZEALL**"},{"content":"<bpt id=\"p1\">**</bpt>IDC_SIZEALL<ept id=\"p1\">**</ept> A four-pointed arrow.","pos":[46044,46081],"source":"**IDC_SIZEALL** A four-pointed arrow."},{"content":"The cursor to use to resize a window.","pos":[46082,46119]},{"content":"<bpt id=\"p1\">**</bpt>IDC_ICON<ept id=\"p1\">**</ept> Obsolete and unsupported.","pos":[46127,46165],"source":"**IDC_ICON** Obsolete and unsupported."},{"content":"Use <bpt id=\"p1\">**</bpt>IDC_ARROW<ept id=\"p1\">**</ept>.","pos":[46166,46184],"source":" Use **IDC_ARROW**."},{"pos":[46192,46265],"content":"<bpt id=\"p1\">**</bpt>IDC_SIZENWSE<ept id=\"p1\">**</ept> Two-headed arrow with ends at upper left and lower right","source":"**IDC_SIZENWSE** Two-headed arrow with ends at upper left and lower right"},{"pos":[46273,46346],"content":"<bpt id=\"p1\">**</bpt>IDC_SIZENESW<ept id=\"p1\">**</ept> Two-headed arrow with ends at upper right and lower left","source":"**IDC_SIZENESW** Two-headed arrow with ends at upper right and lower left"},{"pos":[46354,46396],"content":"<bpt id=\"p1\">**</bpt>IDC_SIZEWE<ept id=\"p1\">**</ept> Horizontal two-headed arrow","source":"**IDC_SIZEWE** Horizontal two-headed arrow"},{"pos":[46404,46444],"content":"<bpt id=\"p1\">**</bpt>IDC_SIZENS<ept id=\"p1\">**</ept> Vertical two-headed arrow","source":"**IDC_SIZENS** Vertical two-headed arrow"},{"content":"Return Value","pos":[46454,46466]},{"pos":[46470,46525],"content":"A handle to a cursor if successful; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"A handle to a cursor if successful; otherwise **NULL**."},{"content":"Remarks","pos":[46535,46542]},{"pos":[46546,46676],"content":"Use the <ph id=\"ph1\">`LoadStandardCursor`</ph> or <bpt id=\"p1\">[</bpt>LoadOEMCursor<ept id=\"p1\">](#cwinapp__loadoemcursor)</ept> member function to access the predefined Windows cursors.","source":"Use the `LoadStandardCursor` or [LoadOEMCursor](#cwinapp__loadoemcursor) member function to access the predefined Windows cursors."},{"content":"Example","pos":[46686,46693]},{"pos":[46708,46727],"content":"NVC_MFCWindowing#47"},{"pos":[46839,46864],"content":"CWinApp::LoadStandardIcon"},{"pos":[46868,46941],"content":"Loads the Windows predefined icon resource that <ph id=\"ph1\">`lpszIconName`</ph> specifies.","source":"Loads the Windows predefined icon resource that `lpszIconName` specifies."},{"content":"Parameters","pos":[47021,47031]},{"content":"A manifest constant identifier that specifies a predefined Windows icon.","pos":[47053,47125]},{"content":"These identifiers are defined in WINDOWS.H.","pos":[47126,47169]},{"content":"For a list of the possible predefined values and their descriptions, see the <bpt id=\"p1\">*</bpt>lpIconName<ept id=\"p1\">*</ept> parameter in <bpt id=\"p2\">[</bpt>LoadIcon<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms648072)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[47170,47403],"source":" For a list of the possible predefined values and their descriptions, see the *lpIconName* parameter in [LoadIcon](http://msdn.microsoft.com/library/windows/desktop/ms648072) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Return Value","pos":[47413,47425]},{"pos":[47429,47483],"content":"A handle to an icon if successful; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"A handle to an icon if successful; otherwise **NULL**."},{"content":"Remarks","pos":[47493,47500]},{"pos":[47504,47626],"content":"Use the <ph id=\"ph1\">`LoadStandardIcon`</ph> or <bpt id=\"p1\">[</bpt>LoadOEMIcon<ept id=\"p1\">](#cwinapp__loadoemicon)</ept> member function to access the predefined Windows icons.","source":"Use the `LoadStandardIcon` or [LoadOEMIcon](#cwinapp__loadoemicon) member function to access the predefined Windows icons."},{"pos":[47684,47715],"content":"CWinApp::LoadStdProfileSettings"},{"pos":[47719,47901],"content":"Call this member function from within the <bpt id=\"p1\">[</bpt>InitInstance<ept id=\"p1\">](#cwinapp__initinstance)</ept> member function to enable and load the list of most recently used (MRU) files and last preview state.","source":"Call this member function from within the [InitInstance](#cwinapp__initinstance) member function to enable and load the list of most recently used (MRU) files and last preview state."},{"content":"Parameters","pos":[47986,47996]},{"content":"The number of recently used files to track.","pos":[48013,48056]},{"content":"Remarks","pos":[48066,48073]},{"pos":[48077,48127],"content":"If <ph id=\"ph1\">`nMaxMRU`</ph> is 0, no MRU list will be maintained.","source":"If `nMaxMRU` is 0, no MRU list will be maintained."},{"pos":[48174,48194],"content":"CWinApp::m_bHelpMode"},{"pos":[48198,48312],"content":"<bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if the application is in Help context mode (conventionally invoked with SHIFT + F1); otherwise <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","source":"**TRUE** if the application is in Help context mode (conventionally invoked with SHIFT + F1); otherwise **FALSE**."},{"content":"Remarks","pos":[48357,48364]},{"content":"In Help context mode, the cursor becomes a question mark and the user can move it about the screen.","pos":[48368,48467]},{"content":"Examine this flag if you want to implement special handling when in the Help mode.","pos":[48468,48550]},{"content":"is a public variable of type <bpt id=\"p1\">**</bpt>BOOL<ept id=\"p1\">**</ept>.","pos":[48565,48603],"source":" is a public variable of type **BOOL**."},{"pos":[48669,48708],"content":"CWinApp::m_dwRestartManagerSupportFlags"},{"content":"Flags that determine how the restart manager behaves.","pos":[48712,48765]},{"content":"Remarks","pos":[48830,48837]},{"content":"To enable the restart manager, set <ph id=\"ph1\">`m_dwRestartManagerSupportFlags`</ph> to the behavior that you want.","pos":[48841,48939],"source":"To enable the restart manager, set `m_dwRestartManagerSupportFlags` to the behavior that you want."},{"content":"The following table shows the flags that are available.","pos":[48940,48995]},{"content":"Flag","pos":[49016,49020]},{"content":"Description","pos":[49021,49032]},{"content":"The application is registered by using <bpt id=\"p1\">[</bpt>CWinApp::RegisterWithRestartManager<ept id=\"p1\">](#cwinapp__registerwithrestartmanager)</ept>.","pos":[49075,49190],"source":"The application is registered by using [CWinApp::RegisterWithRestartManager](#cwinapp__registerwithrestartmanager)."},{"content":"The restart manager is responsible for restarting the application if it unexpectedly exits.","pos":[49191,49282]},{"content":"The application is registered with the restart manager and the restart manager calls the recovery callback function when it restarts the application.","pos":[49328,49477]},{"content":"The default recovery callback function is <bpt id=\"p1\">[</bpt>CWinApp::ApplicationRecoveryCallback<ept id=\"p1\">](#cwinapp__applicationrecoverycallback)</ept>.","pos":[49478,49598],"source":" The default recovery callback function is [CWinApp::ApplicationRecoveryCallback](#cwinapp__applicationrecoverycallback)."},{"content":"Autosave is enabled and the restart manager autosaves any open documents when the application restarts.","pos":[49647,49750]},{"content":"Autosave is enabled and the restart manager autosaves any open documents at a regular interval.","pos":[49800,49895]},{"content":"The interval is defined by <bpt id=\"p1\">[</bpt>CWinApp::m_nAutosaveInterval<ept id=\"p1\">](#cwinapp__m_nautosaveinterval)</ept>.","pos":[49896,49985],"source":" The interval is defined by [CWinApp::m_nAutosaveInterval](#cwinapp__m_nautosaveinterval)."},{"content":"The restart manager opens previously open documents after restarting the application from an unexpected exit.","pos":[50036,50145]},{"content":"The <bpt id=\"p1\">[</bpt>CDataRecoveryHandler Class<ept id=\"p1\">](../../mfc/reference/cdatarecoveryhandler-class.md)</ept> handles storing the list of open documents and restoring them.","pos":[50146,50292],"source":" The [CDataRecoveryHandler Class](../../mfc/reference/cdatarecoveryhandler-class.md) handles storing the list of open documents and restoring them."},{"content":"The restart manager prompts the user to restore autosaved files after restarting the application.","pos":[50345,50442]},{"content":"The <ph id=\"ph1\">`CDataRecoveryHandler`</ph> class queries the user.","pos":[50443,50493],"source":" The `CDataRecoveryHandler` class queries the user."},{"pos":[50542,50681],"content":"The union of <ph id=\"ph1\">`AFX_RESTART_MANAGER_SUPPORT_RESTART`</ph>, <ph id=\"ph2\">`AFX_RESTART_MANAGER_SUPPORT_RECOVER`</ph>, and <ph id=\"ph3\">`AFX_RESTART_MANAGER_REOPEN_PREVIOUS_FILES`</ph>.","source":"The union of `AFX_RESTART_MANAGER_SUPPORT_RESTART`, `AFX_RESTART_MANAGER_SUPPORT_RECOVER`, and `AFX_RESTART_MANAGER_REOPEN_PREVIOUS_FILES`."},{"pos":[50730,50923],"content":"The union of <ph id=\"ph1\">`AFX_RESTART_MANAGER_SUPPORT_NO_AUTOSAVE`</ph>, <ph id=\"ph2\">`AFX_RESTART_MANAGER_AUTOSAVE_AT_RESTART`</ph>, <ph id=\"ph3\">`AFX_RESTART_MANAGER_AUTOSAVE_AT_INTERVAL`</ph>, and <ph id=\"ph4\">`AFX_RESTART_MANAGER_RESTORE_AUTOSAVED_FILES`</ph>.","source":"The union of `AFX_RESTART_MANAGER_SUPPORT_NO_AUTOSAVE`, `AFX_RESTART_MANAGER_AUTOSAVE_AT_RESTART`, `AFX_RESTART_MANAGER_AUTOSAVE_AT_INTERVAL`, and `AFX_RESTART_MANAGER_RESTORE_AUTOSAVED_FILES`."},{"pos":[50976,51166],"content":"The union of <ph id=\"ph1\">`AFX_RESTART_MANAGER_SUPPORT_RESTART`</ph>, <ph id=\"ph2\">`AFX_RESTART_MANAGER_AUTOSAVE_AT_RESTART`</ph>, <ph id=\"ph3\">`AFX_RESTART_MANAGER_REOPEN_PREVIOUS_FILES`</ph>, and <ph id=\"ph4\">`AFX_RESTART_MANAGER_RESTORE_AUTOSAVED_FILES`</ph>.","source":"The union of `AFX_RESTART_MANAGER_SUPPORT_RESTART`, `AFX_RESTART_MANAGER_AUTOSAVE_AT_RESTART`, `AFX_RESTART_MANAGER_REOPEN_PREVIOUS_FILES`, and `AFX_RESTART_MANAGER_RESTORE_AUTOSAVED_FILES`."},{"pos":[51220,51412],"content":"The union of <ph id=\"ph1\">`AFX_RESTART_MANAGER_SUPPORT_RECOVERY`</ph>, <ph id=\"ph2\">`AFX_RESTART_MANAGER_AUTOSAVE_AT_INTERVAL`</ph>, <ph id=\"ph3\">`AFX_RESTART_MANAGER_REOPEN_PREVIOUS_FILES`</ph>, and <ph id=\"ph4\">`AFX_RESTART_MANAGER_RESTORE_AUTOSAVED_FILES`</ph>.","source":"The union of `AFX_RESTART_MANAGER_SUPPORT_RECOVERY`, `AFX_RESTART_MANAGER_AUTOSAVE_AT_INTERVAL`, `AFX_RESTART_MANAGER_REOPEN_PREVIOUS_FILES`, and `AFX_RESTART_MANAGER_RESTORE_AUTOSAVED_FILES`."},{"pos":[51460,51480],"content":"CWinApp::m_eHelpType"},{"pos":[51484,51599],"content":"The type of this data member is the enumerated type <bpt id=\"p1\">**</bpt>AFX_HELP_TYPE<ept id=\"p1\">**</ept>, which is defined within the <ph id=\"ph1\">`CWinApp`</ph> class.","source":"The type of this data member is the enumerated type **AFX_HELP_TYPE**, which is defined within the `CWinApp` class."},{"content":"Remarks","pos":[51653,51660]},{"pos":[51664,51720],"content":"The <bpt id=\"p1\">**</bpt>AFX_HELP_TYPE<ept id=\"p1\">**</ept> enumeration is defined as follows:","source":"The **AFX_HELP_TYPE** enumeration is defined as follows:"},{"pos":[51826,51940],"content":"To set the application's help to HTML Help, call <bpt id=\"p1\">[</bpt>SetHelpMode<ept id=\"p1\">](#cwinapp__sethelpmode)</ept> and specify <bpt id=\"p2\">**</bpt>afxHTMLHelp<ept id=\"p2\">**</ept>.","source":"To set the application's help to HTML Help, call [SetHelpMode](#cwinapp__sethelpmode) and specify **afxHTMLHelp**."},{"pos":[51950,52038],"content":"To set the application's help to WinHelp, call <ph id=\"ph1\">`SetHelpMode`</ph> and specify <bpt id=\"p1\">**</bpt>afxWinHelp<ept id=\"p1\">**</ept>.","source":"To set the application's help to WinHelp, call `SetHelpMode` and specify **afxWinHelp**."},{"pos":[52085,52105],"content":"CWinApp::m_hInstance"},{"pos":[52109,52181],"content":"Corresponds to the <ph id=\"ph1\">`hInstance`</ph> parameter passed by Windows to <ph id=\"ph2\">`WinMain`</ph>.","source":"Corresponds to the `hInstance` parameter passed by Windows to `WinMain`."},{"content":"Remarks","pos":[52231,52238]},{"content":"The <ph id=\"ph1\">`m_hInstance`</ph> data member is a handle to the current instance of the application running under Windows.","pos":[52242,52349],"source":"The `m_hInstance` data member is a handle to the current instance of the application running under Windows."},{"content":"This is returned by the global function <bpt id=\"p1\">[</bpt>AfxGetInstanceHandle<ept id=\"p1\">](application-information-and-management.md#afxgetinstancehandle)</ept>.","pos":[52350,52477],"source":" This is returned by the global function [AfxGetInstanceHandle](application-information-and-management.md#afxgetinstancehandle)."},{"content":"is a public variable of type <ph id=\"ph1\">`HINSTANCE`</ph>.","pos":[52492,52533],"source":" is a public variable of type `HINSTANCE`."},{"content":"Example","pos":[52543,52550]},{"pos":[52565,52584],"content":"NVC_MFCWindowing#55"},{"pos":[52691,52711],"content":"CWinApp::m_lpCmdLine"},{"pos":[52715,52787],"content":"Corresponds to the <ph id=\"ph1\">`lpCmdLine`</ph> parameter passed by Windows to <ph id=\"ph2\">`WinMain`</ph>.","source":"Corresponds to the `lpCmdLine` parameter passed by Windows to `WinMain`."},{"content":"Remarks","pos":[52834,52841]},{"content":"Points to a null-terminated string that specifies the command line for the application.","pos":[52845,52932]},{"content":"Use <ph id=\"ph1\">`m_lpCmdLine`</ph> to access any command-line arguments the user entered when the application was started.","pos":[52933,53038],"source":" Use `m_lpCmdLine` to access any command-line arguments the user entered when the application was started."},{"content":"is a public variable of type <ph id=\"ph1\">`LPTSTR`</ph>.","pos":[53053,53091],"source":" is a public variable of type `LPTSTR`."},{"content":"Example","pos":[53101,53108]},{"pos":[53123,53142],"content":"NVC_MFCWindowing#52"},{"pos":[53257,53285],"content":"CWinApp::m_nAutosaveInterval"},{"content":"The length of time in milliseconds between autosaves.","pos":[53289,53342]},{"content":"Remarks","pos":[53394,53401]},{"content":"You can configure the restart manager to autosave open documents at set intervals.","pos":[53405,53487]},{"content":"If your application does not autosave files, this parameter has no effect.","pos":[53488,53562]},{"pos":[53608,53627],"content":"CWinApp::m_nCmdShow"},{"pos":[53631,53702],"content":"Corresponds to the <ph id=\"ph1\">`nCmdShow`</ph> parameter passed by Windows to <ph id=\"ph2\">`WinMain`</ph>.","source":"Corresponds to the `nCmdShow` parameter passed by Windows to `WinMain`."},{"content":"Remarks","pos":[53745,53752]},{"content":"You should pass <ph id=\"ph1\">`m_nCmdShow`</ph> as an argument when you call <bpt id=\"p1\">[</bpt>CWnd::ShowWindow<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__showwindow)</ept> for your application's main window.","pos":[53756,53920],"source":"You should pass `m_nCmdShow` as an argument when you call [CWnd::ShowWindow](../../mfc/reference/cwnd-class.md#cwnd__showwindow) for your application's main window."},{"content":"is a public variable of type <ph id=\"ph1\">`int`</ph>.","pos":[53934,53969],"source":" is a public variable of type `int`."},{"content":"Example","pos":[53979,53986]},{"pos":[54001,54020],"content":"NVC_MFCWindowing#56"},{"pos":[54128,54149],"content":"CWinApp::m_pActiveWnd"},{"content":"Use this data member to store a pointer to the main window of the OLE container application that has your OLE server application in-place activated.","pos":[54153,54301]},{"content":"Remarks","pos":[54311,54318]},{"pos":[54322,54394],"content":"If this data member is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the application is not in-place active.","source":"If this data member is **NULL**, the application is not in-place active."},{"content":"The framework sets this member variable when the frame window is in-place activated by an OLE container application.","pos":[54401,54517]},{"pos":[54575,54606],"content":"CWinApp::m_pDataRecoveryHandler"},{"content":"Pointer to the data recovery handler for the application.","pos":[54610,54667]},{"content":"Remarks","pos":[54740,54747]},{"content":"The data recovery handler of an application monitors open documents and autosaves them.","pos":[54751,54838]},{"content":"The framework uses the data recovery handler to restore autosaved files when an application restarts after it exits unexpectedly.","pos":[54839,54968]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CDataRecoveryHandler Class<ept id=\"p1\">](../../mfc/reference/cdatarecoveryhandler-class.md)</ept>.","pos":[54969,55075],"source":" For more information, see [CDataRecoveryHandler Class](../../mfc/reference/cdatarecoveryhandler-class.md)."},{"pos":[55123,55144],"content":"CWinApp::m_pszAppName"},{"content":"Specifies the name of the application.","pos":[55148,55186]},{"content":"Remarks","pos":[55235,55242]},{"content":"The application name can come from the parameter passed to the <bpt id=\"p1\">[</bpt>CWinApp<ept id=\"p1\">](#cwinapp__cwinapp)</ept> constructor, or, if not specified, to the resource string with the ID of <bpt id=\"p2\">**</bpt>AFX_IDS_APP_TITLE<ept id=\"p2\">**</ept>.","pos":[55246,55433],"source":"The application name can come from the parameter passed to the [CWinApp](#cwinapp__cwinapp) constructor, or, if not specified, to the resource string with the ID of **AFX_IDS_APP_TITLE**."},{"content":"If the application name is not found in the resource, it comes from the program's .EXE filename.","pos":[55434,55530]},{"content":"Returned by the global function <bpt id=\"p1\">[</bpt>AfxGetAppName<ept id=\"p1\">](application-information-and-management.md#afxgetappname)</ept>.","pos":[55537,55642],"source":"Returned by the global function [AfxGetAppName](application-information-and-management.md#afxgetappname)."},{"content":"is a public variable of type <bpt id=\"p1\">**</bpt>const char<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>.","pos":[55658,55704],"source":" is a public variable of type **const char\\***."},{"pos":[55712,56058],"content":"[!NOTE]\n If you assign a value to `m_pszAppName`, it must be dynamically allocated on the heap. The `CWinApp` destructor calls **free**( ) with this pointer. You many want to use the `_tcsdup`( ) run-time library function to do the allocating. Also, free the memory associated with the current pointer before assigning a new value. For example:","leadings":["","> "],"nodes":[{"content":" If you assign a value to `m_pszAppName`, it must be dynamically allocated on the heap. The `CWinApp` destructor calls **free**( ) with this pointer. You many want to use the `_tcsdup`( ) run-time library function to do the allocating. Also, free the memory associated with the current pointer before assigning a new value. For example:","pos":[8,344],"nodes":[{"content":"If you assign a value to <ph id=\"ph1\">`m_pszAppName`</ph>, it must be dynamically allocated on the heap.","pos":[1,87],"source":" If you assign a value to `m_pszAppName`, it must be dynamically allocated on the heap."},{"content":"The <ph id=\"ph1\">`CWinApp`</ph> destructor calls <bpt id=\"p1\">**</bpt>free<ept id=\"p1\">**</ept>( ) with this pointer.","pos":[88,149],"source":" The `CWinApp` destructor calls **free**( ) with this pointer."},{"content":"You many want to use the <ph id=\"ph1\">`_tcsdup`</ph>( ) run-time library function to do the allocating.","pos":[150,235],"source":" You many want to use the `_tcsdup`( ) run-time library function to do the allocating."},{"content":"Also, free the memory associated with the current pointer before assigning a new value.","pos":[236,323]},{"content":"For example:","pos":[324,336]}]}]},{"pos":[56076,56095],"content":"NVC_MFCWindowing#57"},{"content":"Example","pos":[56165,56172]},{"pos":[56187,56206],"content":"NVC_MFCWindowing#65"},{"pos":[56314,56335],"content":"CWinApp::m_pszExeName"},{"content":"Contains the name of the application's executable file without an extension.","pos":[56339,56415]},{"content":"Remarks","pos":[56464,56471]},{"content":"Unlike <bpt id=\"p1\">[</bpt>m_pszAppName<ept id=\"p1\">](#cwinapp__m_pszappname)</ept>, this name cannot contain blanks.","pos":[56475,56554],"source":"Unlike [m_pszAppName](#cwinapp__m_pszappname), this name cannot contain blanks."},{"content":"is a public variable of type <bpt id=\"p1\">**</bpt>const char<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>.","pos":[56570,56616],"source":" is a public variable of type **const char\\***."},{"pos":[56624,56970],"content":"[!NOTE]\n If you assign a value to `m_pszExeName`, it must be dynamically allocated on the heap. The `CWinApp` destructor calls **free**( ) with this pointer. You many want to use the `_tcsdup`( ) run-time library function to do the allocating. Also, free the memory associated with the current pointer before assigning a new value. For example:","leadings":["","> "],"nodes":[{"content":" If you assign a value to `m_pszExeName`, it must be dynamically allocated on the heap. The `CWinApp` destructor calls **free**( ) with this pointer. You many want to use the `_tcsdup`( ) run-time library function to do the allocating. Also, free the memory associated with the current pointer before assigning a new value. For example:","pos":[8,344],"nodes":[{"content":"If you assign a value to <ph id=\"ph1\">`m_pszExeName`</ph>, it must be dynamically allocated on the heap.","pos":[1,87],"source":" If you assign a value to `m_pszExeName`, it must be dynamically allocated on the heap."},{"content":"The <ph id=\"ph1\">`CWinApp`</ph> destructor calls <bpt id=\"p1\">**</bpt>free<ept id=\"p1\">**</ept>( ) with this pointer.","pos":[88,149],"source":" The `CWinApp` destructor calls **free**( ) with this pointer."},{"content":"You many want to use the <ph id=\"ph1\">`_tcsdup`</ph>( ) run-time library function to do the allocating.","pos":[150,235],"source":" You many want to use the `_tcsdup`( ) run-time library function to do the allocating."},{"content":"Also, free the memory associated with the current pointer before assigning a new value.","pos":[236,323]},{"content":"For example:","pos":[324,336]}]}]},{"pos":[56988,57007],"content":"NVC_MFCWindowing#58"},{"pos":[57120,57146],"content":"CWinApp::m_pszHelpFilePath"},{"content":"Contains the path to the application's Help file.","pos":[57150,57199]},{"content":"Remarks","pos":[57253,57260]},{"content":"By default, the framework initializes <ph id=\"ph1\">`m_pszHelpFilePath`</ph> to the name of the application with \".HLP\" appended.","pos":[57264,57374],"source":"By default, the framework initializes `m_pszHelpFilePath` to the name of the application with \".HLP\" appended."},{"content":"To change the name of the help file, set <ph id=\"ph1\">`m_pszHelpFilePath`</ph> to point to a string that contains the complete name of the desired help file.","pos":[57375,57514],"source":" To change the name of the help file, set `m_pszHelpFilePath` to point to a string that contains the complete name of the desired help file."},{"content":"A convenient place to do this is in the application's <bpt id=\"p1\">[</bpt>InitInstance<ept id=\"p1\">](#cwinapp__initinstance)</ept> function.","pos":[57515,57617],"source":" A convenient place to do this is in the application's [InitInstance](#cwinapp__initinstance) function."},{"content":"is a public variable of type <bpt id=\"p1\">**</bpt>const char<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>.","pos":[57638,57684],"source":" is a public variable of type **const char\\***."},{"pos":[57692,58043],"content":"[!NOTE]\n If you assign a value to `m_pszHelpFilePath`, it must be dynamically allocated on the heap. The `CWinApp` destructor calls **free**( ) with this pointer. You many want to use the `_tcsdup`( ) run-time library function to do the allocating. Also, free the memory associated with the current pointer before assigning a new value. For example:","leadings":["","> "],"nodes":[{"content":" If you assign a value to `m_pszHelpFilePath`, it must be dynamically allocated on the heap. The `CWinApp` destructor calls **free**( ) with this pointer. You many want to use the `_tcsdup`( ) run-time library function to do the allocating. Also, free the memory associated with the current pointer before assigning a new value. For example:","pos":[8,349],"nodes":[{"content":"If you assign a value to <ph id=\"ph1\">`m_pszHelpFilePath`</ph>, it must be dynamically allocated on the heap.","pos":[1,92],"source":" If you assign a value to `m_pszHelpFilePath`, it must be dynamically allocated on the heap."},{"content":"The <ph id=\"ph1\">`CWinApp`</ph> destructor calls <bpt id=\"p1\">**</bpt>free<ept id=\"p1\">**</ept>( ) with this pointer.","pos":[93,154],"source":" The `CWinApp` destructor calls **free**( ) with this pointer."},{"content":"You many want to use the <ph id=\"ph1\">`_tcsdup`</ph>( ) run-time library function to do the allocating.","pos":[155,240],"source":" You many want to use the `_tcsdup`( ) run-time library function to do the allocating."},{"content":"Also, free the memory associated with the current pointer before assigning a new value.","pos":[241,328]},{"content":"For example:","pos":[329,341]}]}]},{"pos":[58061,58080],"content":"NVC_MFCWindowing#59"},{"pos":[58192,58217],"content":"CWinApp::m_pszProfileName"},{"content":"Contains the name of the application's .INI file.","pos":[58221,58270]},{"content":"Remarks","pos":[58323,58330]},{"pos":[58353,58399],"content":"is a public variable of type <bpt id=\"p1\">**</bpt>const char<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>.","source":" is a public variable of type **const char\\***."},{"pos":[58407,58757],"content":"[!NOTE]\n If you assign a value to `m_pszProfileName`, it must be dynamically allocated on the heap. The `CWinApp` destructor calls **free**( ) with this pointer. You many want to use the `_tcsdup`( ) run-time library function to do the allocating. Also, free the memory associated with the current pointer before assigning a new value. For example:","leadings":["","> "],"nodes":[{"content":" If you assign a value to `m_pszProfileName`, it must be dynamically allocated on the heap. The `CWinApp` destructor calls **free**( ) with this pointer. You many want to use the `_tcsdup`( ) run-time library function to do the allocating. Also, free the memory associated with the current pointer before assigning a new value. For example:","pos":[8,348],"nodes":[{"content":"If you assign a value to <ph id=\"ph1\">`m_pszProfileName`</ph>, it must be dynamically allocated on the heap.","pos":[1,91],"source":" If you assign a value to `m_pszProfileName`, it must be dynamically allocated on the heap."},{"content":"The <ph id=\"ph1\">`CWinApp`</ph> destructor calls <bpt id=\"p1\">**</bpt>free<ept id=\"p1\">**</ept>( ) with this pointer.","pos":[92,153],"source":" The `CWinApp` destructor calls **free**( ) with this pointer."},{"content":"You many want to use the <ph id=\"ph1\">`_tcsdup`</ph>( ) run-time library function to do the allocating.","pos":[154,239],"source":" You many want to use the `_tcsdup`( ) run-time library function to do the allocating."},{"content":"Also, free the memory associated with the current pointer before assigning a new value.","pos":[240,327]},{"content":"For example:","pos":[328,340]}]}]},{"pos":[58775,58794],"content":"NVC_MFCWindowing#60"},{"pos":[58906,58931],"content":"CWinApp::m_pszRegistryKey"},{"content":"Used to determine where, in the registry or INI file, application profile settings are stored.","pos":[58935,59029]},{"content":"Remarks","pos":[59082,59089]},{"content":"Normally, this data member is treated as read-only.","pos":[59093,59144]},{"content":"The value is stored to a registry key.","pos":[59154,59192]},{"content":"The name for the application profile setting is appended to the following registry key: HKEY_CURRENT_USER/Software/LocalAppWizard-Generated/.","pos":[59193,59334]},{"content":"If you assign a value to <ph id=\"ph1\">`m_pszRegistryKey`</ph>, it must be dynamically allocated on the heap.","pos":[59341,59431],"source":"If you assign a value to `m_pszRegistryKey`, it must be dynamically allocated on the heap."},{"content":"The <ph id=\"ph1\">`CWinApp`</ph> destructor calls <bpt id=\"p1\">**</bpt>free<ept id=\"p1\">**</ept>( ) with this pointer.","pos":[59432,59493],"source":" The `CWinApp` destructor calls **free**( ) with this pointer."},{"content":"You many want to use the <ph id=\"ph1\">`_tcsdup`</ph>( ) run-time library function to do the allocating.","pos":[59494,59579],"source":" You many want to use the `_tcsdup`( ) run-time library function to do the allocating."},{"content":"Also, free the memory associated with the current pointer before assigning a new value.","pos":[59580,59667]},{"content":"For example:","pos":[59668,59680]},{"pos":[59698,59717],"content":"NVC_MFCWindowing#61"},{"pos":[59823,59842],"content":"CWinApp::m_pszAppID"},{"content":"Application User Model ID.","pos":[59846,59872]},{"content":"Remarks","pos":[59919,59926]},{"pos":[59975,59997],"content":"CWinApp::OnContextHelp"},{"content":"Handles SHIFT+F1 Help within the application.","pos":[60001,60046]},{"content":"Remarks","pos":[60101,60108]},{"pos":[60112,60313],"content":"You must add an <ph id=\"ph1\">`ON_COMMAND( ID_CONTEXT_HELP, OnContextHelp )`</ph> statement to your <ph id=\"ph2\">`CWinApp`</ph> class message map and also add an accelerator table entry, typically SHIFT+F1, to enable this member function.","source":"You must add an `ON_COMMAND( ID_CONTEXT_HELP, OnContextHelp )` statement to your `CWinApp` class message map and also add an accelerator table entry, typically SHIFT+F1, to enable this member function."},{"content":"puts the application into Help mode.","pos":[60336,60372]},{"content":"The cursor changes to an arrow and a question mark, and the user can then move the mouse pointer and press the left mouse button to select a dialog box, window, menu, or command button.","pos":[60373,60558]},{"content":"This member function retrieves the Help context of the object under the cursor and calls the Windows function WinHelp with that Help context.","pos":[60559,60700]},{"pos":[60748,60769],"content":"CWinApp::OnDDECommand"},{"content":"Called by the framework when the main frame window receives a DDE execute message.","pos":[60773,60855]},{"content":"Parameters","pos":[60927,60937]},{"content":"lpszCommand","pos":[60942,60953]},{"content":"Points to a DDE command string received by the application.","pos":[60958,61017]},{"content":"Return Value","pos":[61027,61039]},{"content":"Nonzero if the command is handled; otherwise 0.","pos":[61043,61090]},{"content":"Remarks","pos":[61100,61107]},{"content":"The default implementation checks whether the command is a request to open a document and, if so, opens the specified document.","pos":[61111,61238]},{"content":"The Windows File Manager usually sends such DDE command strings when the user double-clicks a data file.","pos":[61239,61343]},{"content":"Override this function to handle other DDE execute commands, such as the command to print.","pos":[61344,61434]},{"content":"Example","pos":[61444,61451]},{"pos":[61466,61485],"content":"NVC_MFCWindowing#48"},{"pos":[61590,61608],"content":"CWinApp::OnFileNew"},{"pos":[61612,61649],"content":"Implements the <ph id=\"ph1\">`ID_FILE_NEW`</ph> command.","source":"Implements the `ID_FILE_NEW` command."},{"content":"Remarks","pos":[61700,61707]},{"content":"You must add an <ph id=\"ph1\">`ON_COMMAND( ID_FILE_NEW, OnFileNew )`</ph> statement to your <ph id=\"ph2\">`CWinApp`</ph> class message map to enable this member function.","pos":[61711,61843],"source":"You must add an `ON_COMMAND( ID_FILE_NEW, OnFileNew )` statement to your `CWinApp` class message map to enable this member function."},{"content":"If enabled, this function handles execution of the File New command.","pos":[61844,61912]},{"pos":[61919,62085],"content":"See <bpt id=\"p1\">[</bpt>Technical Note 22<ept id=\"p1\">](../../mfc/tn022-standard-commands-implementation.md)</ept> for information on default behavior and guidance on how to override this member function.","source":"See [Technical Note 22](../../mfc/tn022-standard-commands-implementation.md) for information on default behavior and guidance on how to override this member function."},{"content":"Example","pos":[62095,62102]},{"pos":[62117,62136],"content":"NVC_MFCWindowing#49"},{"pos":[62214,62233],"content":"NVC_MFCWindowing#50"},{"pos":[62339,62358],"content":"CWinApp::OnFileOpen"},{"pos":[62362,62400],"content":"Implements the <ph id=\"ph1\">`ID_FILE_OPEN`</ph> command.","source":"Implements the `ID_FILE_OPEN` command."},{"content":"Remarks","pos":[62452,62459]},{"content":"You must add an <ph id=\"ph1\">`ON_COMMAND( ID_FILE_OPEN, OnFileOpen )`</ph> statement to your <ph id=\"ph2\">`CWinApp`</ph> class message map to enable this member function.","pos":[62463,62597],"source":"You must add an `ON_COMMAND( ID_FILE_OPEN, OnFileOpen )` statement to your `CWinApp` class message map to enable this member function."},{"content":"If enabled, this function handles execution of the File Open command.","pos":[62598,62667]},{"pos":[62674,62841],"content":"For information on default behavior and guidance on how to override this member function, see <bpt id=\"p1\">[</bpt>Technical Note 22<ept id=\"p1\">](../../mfc/tn022-standard-commands-implementation.md)</ept>.","source":"For information on default behavior and guidance on how to override this member function, see [Technical Note 22](../../mfc/tn022-standard-commands-implementation.md)."},{"content":"Example","pos":[62851,62858]},{"pos":[62873,62892],"content":"NVC_MFCWindowing#49"},{"pos":[62970,62989],"content":"NVC_MFCWindowing#50"},{"pos":[63101,63126],"content":"CWinApp::OnFilePrintSetup"},{"pos":[63130,63177],"content":"Implements the <bpt id=\"p1\">**</bpt>ID_FILE_PRINT_SETUP<ept id=\"p1\">**</ept> command.","source":"Implements the **ID_FILE_PRINT_SETUP** command."},{"content":"Remarks","pos":[63235,63242]},{"content":"You must add an <ph id=\"ph1\">`ON_COMMAND( ID_FILE_PRINT_SETUP, OnFilePrintSetup )`</ph> statement to your <ph id=\"ph2\">`CWinApp`</ph> class message map to enable this member function.","pos":[63246,63393],"source":"You must add an `ON_COMMAND( ID_FILE_PRINT_SETUP, OnFilePrintSetup )` statement to your `CWinApp` class message map to enable this member function."},{"content":"If enabled, this function handles execution of the File Print command.","pos":[63394,63464]},{"pos":[63471,63638],"content":"For information on default behavior and guidance on how to override this member function, see <bpt id=\"p1\">[</bpt>Technical Note 22<ept id=\"p1\">](../../mfc/tn022-standard-commands-implementation.md)</ept>.","source":"For information on default behavior and guidance on how to override this member function, see [Technical Note 22](../../mfc/tn022-standard-commands-implementation.md)."},{"content":"Example","pos":[63648,63655]},{"pos":[63670,63689],"content":"NVC_MFCWindowing#49"},{"pos":[63767,63786],"content":"NVC_MFCWindowing#50"},{"pos":[63888,63903],"content":"CWinApp::OnHelp"},{"content":"Handles F1 Help within the application (using the current context).","pos":[63907,63974]},{"content":"Remarks","pos":[64022,64029]},{"content":"Usually you will also add an accelerator-key entry for the F1 key.","pos":[64033,64099]},{"content":"Enabling the F1 key is only a convention, not a requirement.","pos":[64100,64160]},{"content":"You must add an <ph id=\"ph1\">`ON_COMMAND( ID_HELP, OnHelp )`</ph> statement to your <ph id=\"ph2\">`CWinApp`</ph> class message map to enable this member function.","pos":[64167,64292],"source":"You must add an `ON_COMMAND( ID_HELP, OnHelp )` statement to your `CWinApp` class message map to enable this member function."},{"content":"If enabled, called by the framework when the user presses the F1 key.","pos":[64293,64362]},{"content":"The default implementation of this message-handler function determines the Help context that corresponds to the current window, dialog box, or menu item and then calls WINHELP.EXE.","pos":[64369,64549]},{"content":"If no context is currently available, the function uses the default context.","pos":[64550,64626]},{"content":"Override this member function to set the Help context to something other than the window, dialog box, menu item, or toolbar button that currently has the focus.","pos":[64633,64793]},{"content":"Call <ph id=\"ph1\">`WinHelp`</ph> with the desired Help context ID.","pos":[64794,64842],"source":" Call `WinHelp` with the desired Help context ID."},{"pos":[64890,64911],"content":"CWinApp::OnHelpFinder"},{"pos":[64915,64979],"content":"Handles the <bpt id=\"p1\">**</bpt>ID_HELP_FINDER<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>ID_DEFAULT_HELP<ept id=\"p2\">**</ept> commands.","source":"Handles the **ID_HELP_FINDER** and **ID_DEFAULT_HELP** commands."},{"content":"Remarks","pos":[65033,65040]},{"content":"You must add an <ph id=\"ph1\">`ON_COMMAND( ID_HELP_FINDER, OnHelpFinder )`</ph> statement to your <ph id=\"ph2\">`CWinApp`</ph> class message map to enable this member function.","pos":[65044,65182],"source":"You must add an `ON_COMMAND( ID_HELP_FINDER, OnHelpFinder )` statement to your `CWinApp` class message map to enable this member function."},{"content":"If enabled, the framework calls this message-handler function when the user of your application selects the Help Finder command to invoke <ph id=\"ph1\">`WinHelp`</ph> with the standard <bpt id=\"p1\">**</bpt>HELP_FINDER<ept id=\"p1\">**</ept> topic.","pos":[65183,65371],"source":" If enabled, the framework calls this message-handler function when the user of your application selects the Help Finder command to invoke `WinHelp` with the standard **HELP_FINDER** topic."},{"pos":[65418,65438],"content":"CWinApp::OnHelpIndex"},{"pos":[65442,65514],"content":"Handles the <bpt id=\"p1\">**</bpt>ID_HELP_INDEX<ept id=\"p1\">**</ept> command and provides a default Help topic.","source":"Handles the **ID_HELP_INDEX** command and provides a default Help topic."},{"content":"Remarks","pos":[65567,65574]},{"content":"You must add an <ph id=\"ph1\">`ON_COMMAND( ID_HELP_INDEX, OnHelpIndex )`</ph> statement to your <ph id=\"ph2\">`CWinApp`</ph> class message map to enable this member function.","pos":[65578,65714],"source":"You must add an `ON_COMMAND( ID_HELP_INDEX, OnHelpIndex )` statement to your `CWinApp` class message map to enable this member function."},{"content":"If enabled, the framework calls this message-handler function when the user of your application selects the Help Index command to invoke <ph id=\"ph1\">`WinHelp`</ph> with the standard <bpt id=\"p1\">**</bpt>HELP_INDEX<ept id=\"p1\">**</ept> topic.","pos":[65715,65901],"source":" If enabled, the framework calls this message-handler function when the user of your application selects the Help Index command to invoke `WinHelp` with the standard **HELP_INDEX** topic."},{"pos":[65948,65968],"content":"CWinApp::OnHelpUsing"},{"pos":[65972,66010],"content":"Handles the <bpt id=\"p1\">**</bpt>ID_HELP_USING<ept id=\"p1\">**</ept> command.","source":"Handles the **ID_HELP_USING** command."},{"content":"Remarks","pos":[66063,66070]},{"content":"You must add an <ph id=\"ph1\">`ON_COMMAND( ID_HELP_USING, OnHelpUsing )`</ph> statement to your <ph id=\"ph2\">`CWinApp`</ph> class message map to enable this member function.","pos":[66074,66210],"source":"You must add an `ON_COMMAND( ID_HELP_USING, OnHelpUsing )` statement to your `CWinApp` class message map to enable this member function."},{"content":"The framework calls this message-handler function when the user of your application selects the Help Using command to invoke the <ph id=\"ph1\">`WinHelp`</ph> application with the standard <bpt id=\"p1\">**</bpt>HELP_HELPONHELP<ept id=\"p1\">**</ept> topic.","pos":[66211,66406],"source":" The framework calls this message-handler function when the user of your application selects the Help Using command to invoke the `WinHelp` application with the standard **HELP_HELPONHELP** topic."},{"pos":[66448,66463],"content":"CWinApp::OnIdle"},{"content":"Override this member function to perform idle-time processing.","pos":[66467,66529]},{"content":"Parameters","pos":[66588,66598]},{"content":"A counter incremented each time <ph id=\"ph1\">`OnIdle`</ph> is called when the application's message queue is empty.","pos":[66614,66711],"source":" A counter incremented each time `OnIdle` is called when the application's message queue is empty."},{"content":"This count is reset to 0 each time a new message is processed.","pos":[66712,66774]},{"content":"You can use the <ph id=\"ph1\">`lCount`</ph> parameter to determine the relative length of time the application has been idle without processing a message.","pos":[66775,66910],"source":" You can use the `lCount` parameter to determine the relative length of time the application has been idle without processing a message."},{"content":"Return Value","pos":[66920,66932]},{"content":"Nonzero to receive more idle processing time; 0 if no more idle time is needed.","pos":[66936,67015]},{"content":"Remarks","pos":[67025,67032]},{"content":"is called in the default message loop when the application's message queue is empty.","pos":[67045,67129]},{"content":"Use your override to call your own background idle-handler tasks.","pos":[67130,67195]},{"content":"should return 0 to indicate that no idle processing time is required.","pos":[67211,67280]},{"content":"The <ph id=\"ph1\">`lCount`</ph> parameter is incremented each time <ph id=\"ph2\">`OnIdle`</ph> is called when the message queue is empty and resets to 0 each time a new message is processed.","pos":[67281,67433],"source":" The `lCount` parameter is incremented each time `OnIdle` is called when the message queue is empty and resets to 0 each time a new message is processed."},{"content":"You can call your different idle routines based on this count.","pos":[67434,67496]},{"content":"The following summarizes idle loop processing:","pos":[67503,67549]},{"pos":[67559,67762],"content":"If the message loop in the Microsoft Foundation Class Library checks the message queue and finds no pending messages, it calls <ph id=\"ph1\">`OnIdle`</ph> for the application object and supplies 0 as the <ph id=\"ph2\">`lCount`</ph> argument.","source":"If the message loop in the Microsoft Foundation Class Library checks the message queue and finds no pending messages, it calls `OnIdle` for the application object and supplies 0 as the `lCount` argument."},{"pos":[67780,67896],"content":"performs some processing and returns a nonzero value to indicate it should be called again to do further processing."},{"content":"The message loop checks the message queue again.","pos":[67906,67954]},{"content":"If no messages are pending, it calls <ph id=\"ph1\">`OnIdle`</ph> again, incrementing the <ph id=\"ph2\">`lCount`</ph> argument.","pos":[67955,68043],"source":" If no messages are pending, it calls `OnIdle` again, incrementing the `lCount` argument."},{"content":"Eventually, <ph id=\"ph1\">`OnIdle`</ph> finishes processing all its idle tasks and returns 0.","pos":[68053,68127],"source":"Eventually, `OnIdle` finishes processing all its idle tasks and returns 0."},{"content":"This tells the message loop to stop calling <ph id=\"ph1\">`OnIdle`</ph> until the next message is received from the message queue, at which point the idle cycle restarts with the argument set to 0.","pos":[68128,68306],"source":" This tells the message loop to stop calling `OnIdle` until the next message is received from the message queue, at which point the idle cycle restarts with the argument set to 0."},{"pos":[68313,68432],"content":"Do not perform lengthy tasks during <ph id=\"ph1\">`OnIdle`</ph> because your application cannot process user input until <ph id=\"ph2\">`OnIdle`</ph> returns.","source":"Do not perform lengthy tasks during `OnIdle` because your application cannot process user input until `OnIdle` returns."},{"pos":[68440,68995],"content":"[!NOTE]\n The default implementation of `OnIdle` updates command user-interface objects such as menu items and toolbar buttons, and it performs internal data structure cleanup. Therefore, if you override `OnIdle`, you must call `CWinApp::OnIdle` with the `lCount` in your overridden version. First call all base-class idle processing (that is, until the base class `OnIdle` returns 0). If you need to perform work before the base-class processing completes, review the base-class implementation to select the proper `lCount` during which to do your work.","leadings":["","> "],"nodes":[{"content":" The default implementation of `OnIdle` updates command user-interface objects such as menu items and toolbar buttons, and it performs internal data structure cleanup. Therefore, if you override `OnIdle`, you must call `CWinApp::OnIdle` with the `lCount` in your overridden version. First call all base-class idle processing (that is, until the base class `OnIdle` returns 0). If you need to perform work before the base-class processing completes, review the base-class implementation to select the proper `lCount` during which to do your work.","pos":[8,553],"nodes":[{"content":"The default implementation of <ph id=\"ph1\">`OnIdle`</ph> updates command user-interface objects such as menu items and toolbar buttons, and it performs internal data structure cleanup.","pos":[1,167],"source":" The default implementation of `OnIdle` updates command user-interface objects such as menu items and toolbar buttons, and it performs internal data structure cleanup."},{"content":"Therefore, if you override <ph id=\"ph1\">`OnIdle`</ph>, you must call <ph id=\"ph2\">`CWinApp::OnIdle`</ph> with the <ph id=\"ph3\">`lCount`</ph> in your overridden version.","pos":[168,282],"source":" Therefore, if you override `OnIdle`, you must call `CWinApp::OnIdle` with the `lCount` in your overridden version."},{"content":"First call all base-class idle processing (that is, until the base class <ph id=\"ph1\">`OnIdle`</ph> returns 0).","pos":[283,376],"source":" First call all base-class idle processing (that is, until the base class `OnIdle` returns 0)."},{"content":"If you need to perform work before the base-class processing completes, review the base-class implementation to select the proper <ph id=\"ph1\">`lCount`</ph> during which to do your work.","pos":[377,545],"source":" If you need to perform work before the base-class processing completes, review the base-class implementation to select the proper `lCount` during which to do your work."}]}]},{"content":"If you do not want <ph id=\"ph1\">`OnIdle`</ph> to be called whenever a message is retrieved from the message queue, you can override the <bpt id=\"p1\">[</bpt>CWinThreadIsIdleMessage<ept id=\"p1\">](../../mfc/reference/cwinthread-class.md#cwinthread__isidlemessage)</ept>.","pos":[69002,69213],"source":"If you do not want `OnIdle` to be called whenever a message is retrieved from the message queue, you can override the [CWinThreadIsIdleMessage](../../mfc/reference/cwinthread-class.md#cwinthread__isidlemessage)."},{"content":"If an application has set a very short timer, or if the system is sending the <bpt id=\"p1\">**</bpt>WM_SYSTIMER<ept id=\"p1\">**</ept> message, then <ph id=\"ph1\">`OnIdle`</ph> will be called repeatedly, and degrade performance.","pos":[69214,69382],"source":" If an application has set a very short timer, or if the system is sending the **WM_SYSTIMER** message, then `OnIdle` will be called repeatedly, and degrade performance."},{"content":"Example","pos":[69392,69399]},{"content":"The following two examples show how to use <ph id=\"ph1\">`OnIdle`</ph>.","pos":[69403,69455],"source":"The following two examples show how to use `OnIdle`."},{"content":"The first example processes two idle tasks using the <ph id=\"ph1\">`lCount`</ph> argument to prioritize the tasks.","pos":[69456,69551],"source":" The first example processes two idle tasks using the `lCount` argument to prioritize the tasks."},{"content":"The first task is high priority, and you should do it whenever possible.","pos":[69552,69624]},{"content":"The second task is less important and should be done only when there is a long pause in user input.","pos":[69625,69724]},{"content":"Note the call to the base-class version of <ph id=\"ph1\">`OnIdle`</ph>.","pos":[69725,69777],"source":" Note the call to the base-class version of `OnIdle`."},{"content":"The second example manages a group of idle tasks with different priorities.","pos":[69778,69853]},{"pos":[69871,69890],"content":"NVC_MFCWindowing#51"},{"pos":[70002,70027],"content":"CWinApp::OpenDocumentFile"},{"pos":[70031,70158],"content":"The framework calls this method to open the named <bpt id=\"p1\">[</bpt>CDocument<ept id=\"p1\">](../../mfc/reference/cdocument-class.md)</ept> file for the application.","source":"The framework calls this method to open the named [CDocument](../../mfc/reference/cdocument-class.md) file for the application."},{"content":"Parameters","pos":[70269,70279]},{"content":"[in]","pos":[70283,70287]},{"content":"The name of the file to be opened.","pos":[70306,70340]},{"content":"[in]","pos":[70347,70351]},{"content":"indicates the document is one of the most recent files; <ph id=\"ph1\">`FALSE`</ph> indicates the document is not one of the most recent files.","pos":[70374,70497],"source":" indicates the document is one of the most recent files; `FALSE` indicates the document is not one of the most recent files."},{"content":"Return Value","pos":[70507,70519]},{"pos":[70523,70582],"content":"A pointer to a <ph id=\"ph1\">`CDocument`</ph> if successful; otherwise <ph id=\"ph2\">`NULL`</ph>.","source":"A pointer to a `CDocument` if successful; otherwise `NULL`."},{"content":"Remarks","pos":[70592,70599]},{"content":"If a document that has that name is already open, the first frame window that contains that document will get the focus.","pos":[70603,70723]},{"content":"If an application supports multiple document templates, the framework uses the file name extension to find the appropriate document template to try to load the document.","pos":[70724,70893]},{"content":"If successful, the document template then creates a frame window and view for the document.","pos":[70894,70985]},{"content":"Example","pos":[70995,71002]},{"pos":[71017,71036],"content":"NVC_MFCWindowing#52"},{"pos":[71148,71173],"content":"CWinApp::ParseCommandLine"},{"pos":[71177,71379],"content":"Call this member function to parse the command line and send the parameters, one at a time, to <bpt id=\"p1\">[</bpt>CCommandLineInfo::ParseParam<ept id=\"p1\">](../../mfc/reference/ccommandlineinfo-class.md#ccommandlineinfo__parseparam)</ept>.","source":"Call this member function to parse the command line and send the parameters, one at a time, to [CCommandLineInfo::ParseParam](../../mfc/reference/ccommandlineinfo-class.md#ccommandlineinfo__parseparam)."},{"content":"Parameters","pos":[71455,71465]},{"content":"A reference to a <bpt id=\"p1\">[</bpt>CCommandLineInfo<ept id=\"p1\">](../../mfc/reference/ccommandlineinfo-class.md)</ept> object.","pos":[71483,71573],"source":" A reference to a [CCommandLineInfo](../../mfc/reference/ccommandlineinfo-class.md) object."},{"content":"Remarks","pos":[71583,71590]},{"content":"When you start a new MFC project using the Application Wizard, the Application Wizard will create a local instance of <ph id=\"ph1\">`CCommandLineInfo`</ph>, and then call <ph id=\"ph2\">`ProcessShellCommand`</ph> and <ph id=\"ph3\">`ParseCommandLine`</ph> in the <bpt id=\"p1\">[</bpt>InitInstance<ept id=\"p1\">](#cwinapp__initinstance)</ept> member function.","pos":[71594,71853],"source":"When you start a new MFC project using the Application Wizard, the Application Wizard will create a local instance of `CCommandLineInfo`, and then call `ProcessShellCommand` and `ParseCommandLine` in the [InitInstance](#cwinapp__initinstance) member function."},{"content":"A command line follows the route described below:","pos":[71854,71903]},{"pos":[71913,72014],"content":"After being created in <ph id=\"ph1\">`InitInstance`</ph>, the <ph id=\"ph2\">`CCommandLineInfo`</ph> object is passed to <ph id=\"ph3\">`ParseCommandLine`</ph>.","source":"After being created in `InitInstance`, the `CCommandLineInfo` object is passed to `ParseCommandLine`."},{"pos":[72042,72120],"content":"then calls <ph id=\"ph1\">`CCommandLineInfo::ParseParam`</ph> repeatedly, once for each parameter.","source":" then calls `CCommandLineInfo::ParseParam` repeatedly, once for each parameter."},{"pos":[72142,72256],"content":"fills the <ph id=\"ph1\">`CCommandLineInfo`</ph> object, which is then passed to <bpt id=\"p1\">[</bpt>ProcessShellCommand<ept id=\"p1\">](#cwinapp__processshellcommand)</ept>.","source":" fills the `CCommandLineInfo` object, which is then passed to [ProcessShellCommand](#cwinapp__processshellcommand)."},{"pos":[72287,72332],"content":"handles the command-line arguments and flags."},{"pos":[72339,72400],"content":"Note that you can call <ph id=\"ph1\">`ParseCommandLine`</ph> directly as needed.","source":"Note that you can call `ParseCommandLine` directly as needed."},{"pos":[72407,72573],"content":"For a description of the command-line flags, see <bpt id=\"p1\">[</bpt>CCommandLineInfo::m_nShellCommand<ept id=\"p1\">](../../mfc/reference/ccommandlineinfo-class.md#ccommandlineinfo__m_nshellcommand)</ept>.","source":"For a description of the command-line flags, see [CCommandLineInfo::m_nShellCommand](../../mfc/reference/ccommandlineinfo-class.md#ccommandlineinfo__m_nshellcommand)."},{"pos":[72628,72656],"content":"CWinApp::PreTranslateMessage"},{"pos":[72660,73082],"content":"Override this function to filter window messages before they are dispatched to the Windows functions <bpt id=\"p1\">[</bpt>TranslateMessage<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms644955)</ept> and <bpt id=\"p2\">[</bpt>DispatchMessage<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms644934)</ept> The default implementation performs accelerator-key translation, so you must call the <ph id=\"ph1\">`CWinApp::PreTranslateMessage`</ph> member function in your overridden version.","source":"Override this function to filter window messages before they are dispatched to the Windows functions [TranslateMessage](http://msdn.microsoft.com/library/windows/desktop/ms644955) and [DispatchMessage](http://msdn.microsoft.com/library/windows/desktop/ms644934) The default implementation performs accelerator-key translation, so you must call the `CWinApp::PreTranslateMessage` member function in your overridden version."},{"content":"Parameters","pos":[73152,73162]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>MSG<ept id=\"p1\">](../../mfc/reference/msg-structure1.md)</ept> structure that contains the message to process.","pos":[73176,73283],"source":" A pointer to a [MSG](../../mfc/reference/msg-structure1.md) structure that contains the message to process."},{"content":"Return Value","pos":[73293,73305]},{"content":"Nonzero if the message was fully processed in <ph id=\"ph1\">`PreTranslateMessage`</ph> and should not be processed further.","pos":[73309,73413],"source":"Nonzero if the message was fully processed in `PreTranslateMessage` and should not be processed further."},{"content":"Zero if the message should be processed in the normal way.","pos":[73414,73472]},{"pos":[73528,73557],"content":"CWinApp::ProcessMessageFilter"},{"content":"The framework's hook function calls this member function to filter and respond to certain Windows messages.","pos":[73561,73668]},{"content":"Parameters","pos":[73762,73772]},{"content":"Specifies a hook code.","pos":[73786,73808]},{"content":"This member function uses the code to determine how to process","pos":[73809,73871]},{"content":"A pointer to a Windows <bpt id=\"p1\">[</bpt>MSG<ept id=\"p1\">](../../mfc/reference/msg-structure1.md)</ept> structure.","pos":[73898,73976],"source":" A pointer to a Windows [MSG](../../mfc/reference/msg-structure1.md) structure."},{"content":"Return Value","pos":[73986,73998]},{"content":"Nonzero if the message is processed; otherwise 0.","pos":[74002,74051]},{"content":"Remarks","pos":[74061,74068]},{"content":"A hook function processes events before they are sent to the application's normal message processing.","pos":[74072,74173]},{"content":"If you override this advanced feature, be sure to call the base-class version to maintain the framework's hook processing.","pos":[74180,74302]},{"pos":[74357,74385],"content":"CWinApp::ProcessShellCommand"},{"pos":[74389,74588],"content":"This member function is called by <bpt id=\"p1\">[</bpt>InitInstance<ept id=\"p1\">](#cwinapp__initinstance)</ept> to accept the parameters passed from the <ph id=\"ph1\">`CCommandLineInfo`</ph> object identified by <ph id=\"ph2\">`rCmdInfo`</ph>, and perform the indicated action.","source":"This member function is called by [InitInstance](#cwinapp__initinstance) to accept the parameters passed from the `CCommandLineInfo` object identified by `rCmdInfo`, and perform the indicated action."},{"content":"Parameters","pos":[74667,74677]},{"content":"A reference to a <bpt id=\"p1\">[</bpt>CCommandLineInfo<ept id=\"p1\">](../../mfc/reference/ccommandlineinfo-class.md)</ept> object.","pos":[74695,74785],"source":" A reference to a [CCommandLineInfo](../../mfc/reference/ccommandlineinfo-class.md) object."},{"content":"Return Value","pos":[74795,74807]},{"content":"Nonzero if the shell command is processed successfully.","pos":[74811,74866]},{"content":"If 0, return <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept> from <bpt id=\"p2\">[</bpt>InitInstance<ept id=\"p2\">](#cwinapp__initinstance)</ept>.","pos":[74867,74934],"source":" If 0, return **FALSE** from [InitInstance](#cwinapp__initinstance)."},{"content":"Remarks","pos":[74944,74951]},{"content":"When you start a new MFC project using the Application Wizard, the Application Wizard will create a local instance of <ph id=\"ph1\">`CCommandLineInfo`</ph>, and then call <ph id=\"ph2\">`ProcessShellCommand`</ph> and <bpt id=\"p1\">[</bpt>ParseCommandLine<ept id=\"p1\">](#cwinapp__parsecommandline)</ept> in the <ph id=\"ph3\">`InitInstance`</ph> member function.","pos":[74955,75218],"source":"When you start a new MFC project using the Application Wizard, the Application Wizard will create a local instance of `CCommandLineInfo`, and then call `ProcessShellCommand` and [ParseCommandLine](#cwinapp__parsecommandline) in the `InitInstance` member function."},{"content":"A command line follows the route described below:","pos":[75219,75268]},{"pos":[75278,75379],"content":"After being created in <ph id=\"ph1\">`InitInstance`</ph>, the <ph id=\"ph2\">`CCommandLineInfo`</ph> object is passed to <ph id=\"ph3\">`ParseCommandLine`</ph>.","source":"After being created in `InitInstance`, the `CCommandLineInfo` object is passed to `ParseCommandLine`."},{"pos":[75407,75561],"content":"then calls <bpt id=\"p1\">[</bpt>CCommandLineInfo::ParseParam<ept id=\"p1\">](../../mfc/reference/ccommandlineinfo-class.md#ccommandlineinfo__parseparam)</ept> repeatedly, once for each parameter.","source":" then calls [CCommandLineInfo::ParseParam](../../mfc/reference/ccommandlineinfo-class.md#ccommandlineinfo__parseparam) repeatedly, once for each parameter."},{"pos":[75583,75666],"content":"fills the <ph id=\"ph1\">`CCommandLineInfo`</ph> object, which is then passed to <ph id=\"ph2\">`ProcessShellCommand`</ph>.","source":" fills the `CCommandLineInfo` object, which is then passed to `ProcessShellCommand`."},{"pos":[75697,75742],"content":"handles the command-line arguments and flags."},{"pos":[75749,76023],"content":"The data members of the <ph id=\"ph1\">`CCommandLineInfo`</ph> object, identified by <bpt id=\"p1\">[</bpt>CCommandLineInfo::m_nShellCommand<ept id=\"p1\">](../../mfc/reference/ccommandlineinfo-class.md#ccommandlineinfo__m_nshellcommand)</ept>, are of the following enumerated type, which is defined within the <ph id=\"ph2\">`CCommandLineInfo`</ph> class.","source":"The data members of the `CCommandLineInfo` object, identified by [CCommandLineInfo::m_nShellCommand](../../mfc/reference/ccommandlineinfo-class.md#ccommandlineinfo__m_nshellcommand), are of the following enumerated type, which is defined within the `CCommandLineInfo` class."},{"pos":[76148,76237],"content":"For a brief description of each of these values, see <ph id=\"ph1\">`CCommandLineInfo::m_nShellCommand`</ph>.","source":"For a brief description of each of these values, see `CCommandLineInfo::m_nShellCommand`."},{"pos":[76296,76328],"content":"CWinApp::ProcessWndProcException"},{"content":"The framework calls this member function whenever the handler does not catch an exception thrown in one of your application's message or command handlers.","pos":[76332,76486]},{"content":"Parameters","pos":[76595,76605]},{"content":"e","pos":[76610,76611]},{"content":"A pointer to an uncaught exception.","pos":[76616,76651]},{"content":"A <bpt id=\"p1\">[</bpt>MSG<ept id=\"p1\">](../../mfc/reference/msg-structure1.md)</ept> structure that contains information about the windows message that caused the framework to throw an exception.","pos":[76668,76825],"source":" A [MSG](../../mfc/reference/msg-structure1.md) structure that contains information about the windows message that caused the framework to throw an exception."},{"content":"Return Value","pos":[76835,76847]},{"content":"The value that should be returned to Windows.","pos":[76851,76896]},{"content":"Normally this is 0L for windows messages, 1L ( <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>) for command messages.","pos":[76897,76975],"source":" Normally this is 0L for windows messages, 1L ( **TRUE**) for command messages."},{"content":"Remarks","pos":[76985,76992]},{"content":"Do not call this member function directly.","pos":[76996,77038]},{"content":"The default implementation of this member function creates a message box.","pos":[77045,77118]},{"content":"If the uncaught exception originates with a menu, toolbar, or accelerator command failure, the message box displays a \"Command failed\" message; otherwise, it displays an \"Internal application error\" message.","pos":[77119,77326]},{"content":"Override this member function to provide global handling of your exceptions.","pos":[77333,77409]},{"content":"Only call the base functionality if you wish the message box to be displayed.","pos":[77410,77487]},{"pos":[77531,77548],"content":"CWinApp::Register"},{"pos":[77552,77624],"content":"Performs any registration tasks not handled by <ph id=\"ph1\">`RegisterShellFileTypes`</ph>.","source":"Performs any registration tasks not handled by `RegisterShellFileTypes`."},{"content":"Return Value","pos":[77674,77686]},{"content":"Nonzero on success; otherwise 0.","pos":[77690,77722]},{"content":"Remarks","pos":[77732,77739]},{"content":"The default implementation simply returns TRUE.","pos":[77743,77790]},{"content":"Override this function to provide any customized registration steps.","pos":[77791,77859]},{"pos":[77917,77948],"content":"CWinApp::RegisterShellFileTypes"},{"content":"Call this member function to register all of your application's document types with the Windows File Manager.","pos":[77952,78061]},{"content":"Parameters","pos":[78140,78150]},{"content":"[in]","pos":[78154,78158]},{"content":"adds registration entries for shell commands Print and Print To, allowing a user to print files directly from the shell, or by dragging the file to a printer object.","pos":[78179,78344]},{"content":"It also adds a DefaultIcon key.","pos":[78345,78376]},{"content":"By default, this parameter is <ph id=\"ph1\">`FALSE`</ph> for backward compatibility.","pos":[78377,78442],"source":" By default, this parameter is `FALSE` for backward compatibility."},{"content":"Remarks","pos":[78452,78459]},{"content":"This allows the user to open a data file created by your application by double-clicking it from within File Manager.","pos":[78463,78579]},{"content":"Call <ph id=\"ph1\">`RegisterShellFileTypes`</ph> after you call <bpt id=\"p1\">[</bpt>AddDocTemplate<ept id=\"p1\">](#cwinapp__adddoctemplate)</ept> for each of the document templates in your application.","pos":[78580,78723],"source":" Call `RegisterShellFileTypes` after you call [AddDocTemplate](#cwinapp__adddoctemplate) for each of the document templates in your application."},{"content":"Also call the <bpt id=\"p1\">[</bpt>EnableShellOpen<ept id=\"p1\">](#cwinapp__enableshellopen)</ept> member function when you call <ph id=\"ph1\">`RegisterShellFileTypes`</ph>.","pos":[78724,78838],"source":" Also call the [EnableShellOpen](#cwinapp__enableshellopen) member function when you call `RegisterShellFileTypes`."},{"content":"iterates through the list of <bpt id=\"p1\">[</bpt>CDocTemplate<ept id=\"p1\">](../../mfc/reference/cdoctemplate-class.md)</ept> objects that the application maintains and, for each document template, adds entries to the registration database that Windows maintains for file associations.","pos":[78870,79116],"source":" iterates through the list of [CDocTemplate](../../mfc/reference/cdoctemplate-class.md) objects that the application maintains and, for each document template, adds entries to the registration database that Windows maintains for file associations."},{"content":"File Manager uses these entries to open a data file when the user double-clicks it.","pos":[79117,79200]},{"content":"This eliminates the need to ship a .REG file with your application.","pos":[79201,79268]},{"pos":[79276,79459],"content":"[!NOTE]\n`RegisterShellFileTypes` only works if the user runs the program with administrator rights. If the program does not have administrator rights, it cannot alter registry keys.","leadings":["","> "],"nodes":[{"content":" only works if the user runs the program with administrator rights. If the program does not have administrator rights, it cannot alter registry keys.","pos":[32,181],"nodes":[{"content":"only works if the user runs the program with administrator rights.","pos":[1,67]},{"content":"If the program does not have administrator rights, it cannot alter registry keys.","pos":[68,149]}]}]},{"content":"If the registration database already associates a given filename extension with another file type, no new association is created.","pos":[79466,79595]},{"content":"See the <ph id=\"ph1\">`CDocTemplate`</ph> class for the format of strings necessary to register this information.","pos":[79596,79690],"source":" See the `CDocTemplate` class for the format of strings necessary to register this information."},{"pos":[79752,79787],"content":"CWinApp::RegisterWithRestartManager"},{"content":"Registers the application with the restart manager.","pos":[79791,79842]},{"content":"Parameters","pos":[80204,80214]},{"content":"Parameter","pos":[80235,80244]},{"content":"Description","pos":[80245,80256]},{"pos":[80261,80265],"content":"[in]"},{"content":"indicates that this instance of the application uses a recovery callback function; <ph id=\"ph1\">`FALSE`</ph> indicates that it does not.","pos":[80301,80419],"source":" indicates that this instance of the application uses a recovery callback function; `FALSE` indicates that it does not."},{"content":"The framework calls the recovery callback function when the application exits unexpectedly.","pos":[80420,80511]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CWinApp::ApplicationRecoveryCallback<ept id=\"p1\">](#cwinapp__applicationrecoverycallback)</ept>.","pos":[80512,80616],"source":" For more information, see [CWinApp::ApplicationRecoveryCallback](#cwinapp__applicationrecoverycallback)."},{"pos":[80621,80625],"content":"[in]"},{"content":"The unique string that identifies this instance of the restart manager.","pos":[80649,80720]},{"content":"The restart manager identifier is unique for each instance of an application.","pos":[80721,80798]},{"pos":[80803,80807],"content":"[in]"},{"content":"A string that contains any extra arguments from the command line.","pos":[80829,80894]},{"pos":[80899,80903],"content":"[in]"},{"content":"Optional flags for the restart manager.","pos":[80921,80960]},{"content":"For more information, see the Remarks section.","pos":[80961,81007]},{"pos":[81012,81016],"content":"[in]"},{"content":"The recovery callback function.","pos":[81037,81068]},{"content":"This function must take a <ph id=\"ph1\">`LPVOID`</ph> parameter as input and return a <ph id=\"ph2\">`DWORD`</ph>.","pos":[81069,81144],"source":" This function must take a `LPVOID` parameter as input and return a `DWORD`."},{"content":"The default recovery callback function is <ph id=\"ph1\">`CWinApp::ApplicationRecoveryCallback`</ph>.","pos":[81145,81226],"source":" The default recovery callback function is `CWinApp::ApplicationRecoveryCallback`."},{"pos":[81231,81235],"content":"[in]"},{"content":"The input parameter for the recovery callback function.","pos":[81247,81302]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CWinApp::ApplicationRecoveryCallback<ept id=\"p1\">](#cwinapp__applicationrecoverycallback)</ept>.","pos":[81303,81407],"source":" For more information, see [CWinApp::ApplicationRecoveryCallback](#cwinapp__applicationrecoverycallback)."},{"pos":[81412,81416],"content":"[in]"},{"content":"The length of time that the restart manager waits for the recovery callback function to return.","pos":[81434,81529]},{"content":"This parameter is in milliseconds.","pos":[81530,81564]},{"pos":[81569,81573],"content":"[in]"},{"content":"Flags passed to the recovery callback function.","pos":[81592,81639]},{"content":"Reserved for future use.","pos":[81640,81664]},{"content":"Return Value","pos":[81675,81687]},{"pos":[81698,81751],"content":"if the method is successful; otherwise an error code."},{"content":"Remarks","pos":[81761,81768]},{"content":"If your application uses the default MFC implementation for autosaving files, you should use the simple version of <ph id=\"ph1\">`RegisterWithRestartManager`</ph>.","pos":[81772,81916],"source":"If your application uses the default MFC implementation for autosaving files, you should use the simple version of `RegisterWithRestartManager`."},{"content":"Use the complex version of <ph id=\"ph1\">`RegisterWithRestartManager`</ph> if you want to customize the autosave behavior of your application.","pos":[81917,82040],"source":" Use the complex version of `RegisterWithRestartManager` if you want to customize the autosave behavior of your application."},{"pos":[82047,82225],"content":"If you call this method with an empty string for <ph id=\"ph1\">`strRestartIdentifier`</ph>, <ph id=\"ph2\">`RegisterWithRestartManager`</ph> creates a unique identifier string for this instance of the restart manager.","source":"If you call this method with an empty string for `strRestartIdentifier`, `RegisterWithRestartManager` creates a unique identifier string for this instance of the restart manager."},{"content":"When an application exits unexpectedly, the restart manager restarts the application from the command line and provides the unique restart identifier as an optional argument.","pos":[82232,82406]},{"content":"In this scenario, the framework calls <ph id=\"ph1\">`RegisterWithRestartManager`</ph> two times.","pos":[82407,82484],"source":" In this scenario, the framework calls `RegisterWithRestartManager` two times."},{"content":"The first call comes from <bpt id=\"p1\">[</bpt>CWinApp::InitInstance<ept id=\"p1\">](#cwinapp__initinstance)</ept> with an empty string for the string identifier.","pos":[82485,82606],"source":" The first call comes from [CWinApp::InitInstance](#cwinapp__initinstance) with an empty string for the string identifier."},{"content":"Then, the method <bpt id=\"p1\">[</bpt>CWinApp::ProcessShellCommand<ept id=\"p1\">](#cwinapp__processshellcommand)</ept> calls <ph id=\"ph1\">`RegisterWithRestartManager`</ph> with the unique restart identifier.","pos":[82607,82756],"source":" Then, the method [CWinApp::ProcessShellCommand](#cwinapp__processshellcommand) calls `RegisterWithRestartManager` with the unique restart identifier."},{"content":"After you register an application with the restart manager, the restart manager monitors the application.","pos":[82763,82868]},{"content":"If the application exits unexpectedly, the restart manager calls the recovery callback function during the shut down process.","pos":[82869,82994]},{"content":"The restart manager waits the <ph id=\"ph1\">`dwPingInterval`</ph> for a response from the recovery callback function.","pos":[82995,83093],"source":" The restart manager waits the `dwPingInterval` for a response from the recovery callback function."},{"content":"If the recovery callback function does not respond within this time, the application exits without executing the recovery callback function.","pos":[83094,83234]},{"content":"By default, the dwRestartFlags are not supported but are provided for future use.","pos":[83241,83322]},{"content":"The possible values for <ph id=\"ph1\">`dwRestartFlags`</ph> are as follows:","pos":[83323,83379],"source":" The possible values for `dwRestartFlags` are as follows:"},{"pos":[83547,83584],"content":"CWinApp::ReopenPreviousFilesAtRestart"},{"content":"Determines whether the restart manager reopens the files that were open when the application exited unexpectedly.","pos":[83588,83701]},{"content":"Return Value","pos":[83780,83792]},{"pos":[83803,83915],"content":"indicates the restart manager reopens the previously open files; <ph id=\"ph1\">`FALSE`</ph> indicates the restart manager does not.","source":" indicates the restart manager reopens the previously open files; `FALSE` indicates the restart manager does not."},{"pos":[83966,83990],"content":"CWinApp::RestartInstance"},{"content":"Handles an application restart initiated by the restart manager.","pos":[83994,84058]},{"content":"Return Value","pos":[84124,84136]},{"pos":[84147,84304],"content":"if the data recovery handler opens previously open documents; <ph id=\"ph1\">`FALSE`</ph> if the data recovery handler has an error or if there are no previously open documents.","source":" if the data recovery handler opens previously open documents; `FALSE` if the data recovery handler has an error or if there are no previously open documents."},{"content":"Remarks","pos":[84314,84321]},{"content":"When the restart manager restarts an application, the framework calls this method.","pos":[84325,84407]},{"content":"This method retrieves the data recovery handler and restores the autosaved files.","pos":[84408,84489]},{"content":"This method calls <bpt id=\"p1\">[</bpt>CDataRecoveryHandler::RestoreAutosavedDocuments<ept id=\"p1\">](../../mfc/reference/cdatarecoveryhandler-class.md#cdatarecoveryhandler__restoreautosaveddocuments)</ept> to determine whether the user wants to restore the autosaved files.","pos":[84490,84724],"source":" This method calls [CDataRecoveryHandler::RestoreAutosavedDocuments](../../mfc/reference/cdatarecoveryhandler-class.md#cdatarecoveryhandler__restoreautosaveddocuments) to determine whether the user wants to restore the autosaved files."},{"content":"This method returns <ph id=\"ph1\">`FALSE`</ph> if the <bpt id=\"p1\">[</bpt>CDataRecoveryHandler<ept id=\"p1\">](../../mfc/reference/cdatarecoveryhandler-class.md)</ept> determines that there were no open documents.","pos":[84731,84885],"source":"This method returns `FALSE` if the [CDataRecoveryHandler](../../mfc/reference/cdatarecoveryhandler-class.md) determines that there were no open documents."},{"content":"If there were no open documents, the application starts ordinarily.","pos":[84886,84953]},{"pos":[85019,85058],"content":"CWinApp::RestoreAutosavedFilesAtRestart"},{"content":"Determines whether the restart manager restores the autosaved files when it restarts the application.","pos":[85062,85163]},{"content":"Return Value","pos":[85244,85256]},{"pos":[85267,85370],"content":"indicates the restart manager restores autosaved files; <ph id=\"ph1\">`FALSE`</ph> indicates the restart manager does not.","source":" indicates the restart manager restores autosaved files; `FALSE` indicates the restart manager does not."},{"pos":[85409,85421],"content":"CWinApp::Run"},{"content":"Provides a default message loop.","pos":[85425,85457]},{"content":"Return Value","pos":[85501,85513]},{"pos":[85517,85562],"content":"An <ph id=\"ph1\">`int`</ph> value that is returned by <ph id=\"ph2\">`WinMain`</ph>.","source":"An `int` value that is returned by `WinMain`."},{"content":"Remarks","pos":[85572,85579]},{"content":"<bpt id=\"p1\">**</bpt>Run<ept id=\"p1\">**</ept> acquires and dispatches Windows messages until the application receives a <bpt id=\"p2\">**</bpt>WM_QUIT<ept id=\"p2\">**</ept> message.","pos":[85583,85685],"source":"**Run** acquires and dispatches Windows messages until the application receives a **WM_QUIT** message."},{"content":"If the application's message queue currently contains no messages, <bpt id=\"p1\">**</bpt>Run<ept id=\"p1\">**</ept> calls <bpt id=\"p2\">[</bpt>OnIdle<ept id=\"p2\">](#cwinapp__onidle)</ept> to perform idle-time processing.","pos":[85686,85826],"source":" If the application's message queue currently contains no messages, **Run** calls [OnIdle](#cwinapp__onidle) to perform idle-time processing."},{"content":"Incoming messages go to the <bpt id=\"p1\">[</bpt>PreTranslateMessage<ept id=\"p1\">](#cwinapp__pretranslatemessage)</ept> member function for special processing and then to the Windows function <bpt id=\"p2\">**</bpt>TranslateMessage<ept id=\"p2\">**</ept> for standard keyboard translation; finally, the <bpt id=\"p3\">**</bpt>DispatchMessage<ept id=\"p3\">**</ept> Windows function is called.","pos":[85827,86096],"source":" Incoming messages go to the [PreTranslateMessage](#cwinapp__pretranslatemessage) member function for special processing and then to the Windows function **TranslateMessage** for standard keyboard translation; finally, the **DispatchMessage** Windows function is called."},{"pos":[86103,86185],"content":"<bpt id=\"p1\">**</bpt>Run<ept id=\"p1\">**</ept> is rarely overridden, but you can override it to provide special behavior.","source":"**Run** is rarely overridden, but you can override it to provide special behavior."},{"pos":[86233,86254],"content":"CWinApp::RunAutomated"},{"pos":[86258,86446],"content":"Call this function to determine whether the \" <bpt id=\"p1\">**</bpt>/Automation<ept id=\"p1\">**</ept>\" or \" <bpt id=\"p2\">**</bpt>-Automation<ept id=\"p2\">**</ept>\" option is present, which indicates whether the server application was launched by a client application.","source":"Call this function to determine whether the \" **/Automation**\" or \" **-Automation**\" option is present, which indicates whether the server application was launched by a client application."},{"content":"Return Value","pos":[86492,86504]},{"content":"Nonzero if the option was found; otherwise 0.","pos":[86508,86553]},{"content":"Remarks","pos":[86563,86570]},{"content":"If present, the option is removed from the command line.","pos":[86574,86630]},{"content":"For more information on OLE Automation, see the article <bpt id=\"p1\">[</bpt>Automation Servers<ept id=\"p1\">](../../mfc/automation-servers.md)</ept>.","pos":[86631,86741],"source":" For more information on OLE Automation, see the article [Automation Servers](../../mfc/automation-servers.md)."},{"pos":[86788,86808],"content":"CWinApp::RunEmbedded"},{"pos":[86812,86998],"content":"Call this function to determine whether the \" <bpt id=\"p1\">**</bpt>/Embedding<ept id=\"p1\">**</ept>\" or \" <bpt id=\"p2\">**</bpt>-Embedding<ept id=\"p2\">**</ept>\" option is present, which indicates whether the server application was launched by a client application.","source":"Call this function to determine whether the \" **/Embedding**\" or \" **-Embedding**\" option is present, which indicates whether the server application was launched by a client application."},{"content":"Return Value","pos":[87043,87055]},{"content":"Nonzero if the option was found; otherwise 0.","pos":[87059,87104]},{"content":"Remarks","pos":[87114,87121]},{"content":"If present, the option is removed from the command line.","pos":[87125,87181]},{"content":"For more information on embedding, see the article <bpt id=\"p1\">[</bpt>Servers: Implementing a Server<ept id=\"p1\">](../../mfc/servers-implementing-a-server.md)</ept>.","pos":[87182,87310],"source":" For more information on embedding, see the article [Servers: Implementing a Server](../../mfc/servers-implementing-a-server.md)."},{"pos":[87361,87385],"content":"CWinApp::SaveAllModified"},{"pos":[87389,87535],"content":"Called by the framework to save all documents when the application's main frame window is to be closed, or through a <ph id=\"ph1\">`WM_QUERYENDSESSION`</ph> message.","source":"Called by the framework to save all documents when the application's main frame window is to be closed, or through a `WM_QUERYENDSESSION` message."},{"content":"Return Value","pos":[87592,87604]},{"content":"Nonzero if safe to terminate the application; 0 if not safe to terminate the application.","pos":[87608,87697]},{"content":"Remarks","pos":[87707,87714]},{"pos":[87718,87943],"content":"The default implementation of this member function calls the <bpt id=\"p1\">[</bpt>CDocument::SaveModified<ept id=\"p1\">](../../mfc/reference/cdocument-class.md#cdocument__savemodified)</ept> member function in turn for all modified documents within the application.","source":"The default implementation of this member function calls the [CDocument::SaveModified](../../mfc/reference/cdocument-class.md#cdocument__savemodified) member function in turn for all modified documents within the application."},{"pos":[87992,88014],"content":"CWinApp::SelectPrinter"},{"content":"Call this member function to select a specific printer, and release the printer that was previously selected in the Print Dialog box.","pos":[88018,88151]},{"content":"Parameters","pos":[88270,88280]},{"content":"A handle to a <bpt id=\"p1\">[</bpt>DEVNAMES<ept id=\"p1\">](../../mfc/reference/devnames-structure.md)</ept> structure that identifies the driver, device, and output port names of a specific printer.","pos":[88299,88457],"source":" A handle to a [DEVNAMES](../../mfc/reference/devnames-structure.md) structure that identifies the driver, device, and output port names of a specific printer."},{"content":"A handle to a <bpt id=\"p1\">[</bpt>DEVMODE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183565)</ept> structure that specifies information about the device initialization and environment of a printer.","pos":[88478,88660],"source":" A handle to a [DEVMODE](http://msdn.microsoft.com/library/windows/desktop/dd183565) structure that specifies information about the device initialization and environment of a printer."},{"content":"bFreeOld","pos":[88668,88676]},{"content":"Frees the previously-selected printer.","pos":[88681,88719]},{"content":"Remarks","pos":[88729,88736]},{"pos":[88740,88838],"content":"If both <ph id=\"ph1\">`hDevMode`</ph> and <ph id=\"ph2\">`hDevNames`</ph> are <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, <ph id=\"ph3\">`SelectPrinter`</ph> uses the current default printer.","source":"If both `hDevMode` and `hDevNames` are **NULL**, `SelectPrinter` uses the current default printer."},{"pos":[88885,88905],"content":"CWinApp::SetHelpMode"},{"content":"Sets the application's help type.","pos":[88909,88942]},{"content":"Parameters","pos":[89010,89020]},{"content":"Specifies the type of help to use.","pos":[89039,89073]},{"content":"See <bpt id=\"p1\">[</bpt>CWinApp::m_eHelpType<ept id=\"p1\">](#cwinapp__m_ehelptype)</ept> for more information.","pos":[89074,89145],"source":" See [CWinApp::m_eHelpType](#cwinapp__m_ehelptype) for more information."},{"content":"Remarks","pos":[89155,89162]},{"content":"Sets the application's Help type.","pos":[89166,89199]},{"content":"To set your application's Help type to HTMLHelp, you can call <bpt id=\"p1\">[</bpt>EnableHTMLHelp<ept id=\"p1\">](#cwinapp__enablehtmlhelp)</ept>.","pos":[89206,89311],"source":"To set your application's Help type to HTMLHelp, you can call [EnableHTMLHelp](#cwinapp__enablehtmlhelp)."},{"content":"Once you call <ph id=\"ph1\">`EnableHTMLHelp`</ph>, your application must use HTMLHelp as its help application.","pos":[89312,89403],"source":" Once you call `EnableHTMLHelp`, your application must use HTMLHelp as its help application."},{"content":"If you want to change to use WinHelp, you can call <ph id=\"ph1\">`SetHelpMode`</ph> and set <ph id=\"ph2\">`eHelpType`</ph> to <bpt id=\"p1\">**</bpt>afxWinHelp<ept id=\"p1\">**</ept>.","pos":[89404,89507],"source":" If you want to change to use WinHelp, you can call `SetHelpMode` and set `eHelpType` to **afxWinHelp**."},{"pos":[89557,89580],"content":"CWinApp::SetRegistryKey"},{"content":"Causes application settings to be stored in the registry instead of INI files.","pos":[89584,89662]},{"content":"Parameters","pos":[89778,89788]},{"content":"lpszRegistryKey","pos":[89793,89808]},{"content":"Pointer to a string containing the name of the key.","pos":[89813,89864]},{"content":"nIDRegistryKey","pos":[89872,89886]},{"content":"ID of a string resource containing the name of the registry key.","pos":[89891,89955]},{"content":"Remarks","pos":[89965,89972]},{"content":"This function sets <bpt id=\"p1\">*</bpt>m_pszRegistryKey<ept id=\"p1\">*</ept>, which is then used by the <ph id=\"ph1\">`GetProfileInt`</ph>, <ph id=\"ph2\">`GetProfileString`</ph>, <ph id=\"ph3\">`WriteProfileInt`</ph>, and <ph id=\"ph4\">`WriteProfileString`</ph> member functions of <ph id=\"ph5\">`CWinApp`</ph>.","pos":[89976,90152],"source":"This function sets *m_pszRegistryKey*, which is then used by the `GetProfileInt`, `GetProfileString`, `WriteProfileInt`, and `WriteProfileString` member functions of `CWinApp`."},{"content":"If this function has been called, the list of most recently-used (MRU) files is also stored in the registry.","pos":[90153,90261]},{"content":"The registry key is usually the name of a company.","pos":[90262,90312]},{"content":"It is stored in a key of the following form: HKEY_CURRENT_USER\\Software<ph id=\"ph1\">\\\\</ph>&lt;company name<ph id=\"ph2\">\\&gt;\\\\</ph>&lt;application name<ph id=\"ph3\">\\&gt;\\\\</ph>&lt;section name<ph id=\"ph4\">\\&gt;\\\\</ph>&lt;value name<ph id=\"ph5\">\\&gt;</ph>.","pos":[90313,90455],"source":" It is stored in a key of the following form: HKEY_CURRENT_USER\\Software\\\\<company name\\>\\\\<application name\\>\\\\<section name\\>\\\\<value name\\>."},{"pos":[90518,90554],"content":"CWinApp::SupportsApplicationRecovery"},{"content":"Determines whether the restart manager recovers an application that exited unexpectedly.","pos":[90558,90646]},{"content":"Return Value","pos":[90724,90736]},{"pos":[90747,90850],"content":"indicates the restart manager recovers the application; <ph id=\"ph1\">`FALSE`</ph> indicates the restart manager does not.","source":" indicates the restart manager recovers the application; `FALSE` indicates the restart manager does not."},{"pos":[90912,90947],"content":"CWinApp::SupportsAutosaveAtInterval"},{"content":"Determines whether the restart manager autosaves open documents at a regular interval.","pos":[90951,91037]},{"content":"Return Value","pos":[91114,91126]},{"pos":[91137,91240],"content":"indicates the restart manager autosaves open documents; <ph id=\"ph1\">`FALSE`</ph> indicates the restart manager does not.","source":" indicates the restart manager autosaves open documents; `FALSE` indicates the restart manager does not."},{"pos":[91301,91335],"content":"CWinApp::SupportsAutosaveAtRestart"},{"content":"Determines whether the restart manager autosaves any open documents when the application restarts.","pos":[91339,91437]},{"content":"Return Value","pos":[91513,91525]},{"pos":[91536,91669],"content":"indicates the restart manager autosaves open documents when the application restarts; <ph id=\"ph1\">`FALSE`</ph> indicates the restart manager does not.","source":" indicates the restart manager autosaves open documents when the application restarts; `FALSE` indicates the restart manager does not."},{"pos":[91727,91758],"content":"CWinApp::SupportsRestartManager"},{"content":"Determines whether the application supports the restart manager.","pos":[91762,91826]},{"content":"Return Value","pos":[91899,91911]},{"pos":[91922,92021],"content":"indicates the application supports the restart manager; <ph id=\"ph1\">`FALSE`</ph> indicates the application does not.","source":" indicates the application supports the restart manager; `FALSE` indicates the application does not."},{"pos":[92067,92086],"content":"CWinApp::Unregister"},{"content":"Unregisters all files registered by the application object.","pos":[92090,92149]},{"content":"Return Value","pos":[92201,92213]},{"content":"Nonzero on success; otherwise 0.","pos":[92217,92249]},{"content":"Remarks","pos":[92259,92266]},{"content":"The <ph id=\"ph1\">`Unregister`</ph> function undoes the registration performed by the application object and the <bpt id=\"p1\">[</bpt>Register<ept id=\"p1\">](#cwinapp__register)</ept> function.","pos":[92270,92404],"source":"The `Unregister` function undoes the registration performed by the application object and the [Register](#cwinapp__register) function."},{"content":"Normally, both functions are called implicitly by MFC and therefore will not appear in your code.","pos":[92405,92502]},{"content":"Override this function to perform custom unregistration steps.","pos":[92509,92571]},{"pos":[92631,92664],"content":"CWinApp::UnregisterShellFileTypes"},{"content":"Call this member function to unregister all of your application's document types with the Windows File Manager.","pos":[92668,92779]},{"pos":[92870,92886],"content":"CWinApp::WinHelp"},{"content":"Call this member function to invoke the WinHelp application.","pos":[92890,92950]},{"content":"Parameters","pos":[93052,93062]},{"content":"Specifies additional data.","pos":[93078,93104]},{"content":"The value used depends on the value of the <ph id=\"ph1\">`nCmd`</ph> parameter.","pos":[93105,93165],"source":" The value used depends on the value of the `nCmd` parameter."},{"content":"Specifies the type of help requested.","pos":[93182,93219]},{"content":"For a list of possible values and how they affect the <ph id=\"ph1\">`dwData`</ph> parameter, see the <bpt id=\"p1\">[</bpt>WinHelp<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb762267)</ept> Windows function.","pos":[93220,93389],"source":" For a list of possible values and how they affect the `dwData` parameter, see the [WinHelp](http://msdn.microsoft.com/library/windows/desktop/bb762267) Windows function."},{"content":"Remarks","pos":[93399,93406]},{"content":"The framework also calls this function to invoke the WinHelp application.","pos":[93410,93483]},{"content":"The framework will automatically close the WinHelp application when your application terminates.","pos":[93490,93586]},{"content":"Example","pos":[93596,93603]},{"pos":[93618,93637],"content":"NVC_MFCWindowing#53"},{"pos":[93751,93778],"content":"CWinApp::WriteProfileBinary"},{"content":"Call this member function to write binary data into the specified section of the application's registry or .INI file.","pos":[93782,93899]},{"content":"Parameters","pos":[94039,94049]},{"content":"Points to a null-terminated string that specifies the section containing the entry.","pos":[94070,94153]},{"content":"If the section does not exist, it is created.","pos":[94154,94199]},{"content":"The name of the section is case independent; the string may be any combination of uppercase and lowercase letters.","pos":[94200,94314]},{"content":"Points to a null-terminated string that contains the entry into which the value is to be written.","pos":[94336,94433]},{"content":"If the entry does not exist in the specified section, it is created.","pos":[94434,94502]},{"content":"Points to the data to be written.","pos":[94520,94553]},{"content":"Contains the number of bytes to be written.","pos":[94572,94615]},{"content":"Return Value","pos":[94625,94637]},{"content":"Nonzero if successful; otherwise 0.","pos":[94641,94676]},{"content":"Example","pos":[94686,94693]},{"pos":[94697,94894],"content":"This example uses <ph id=\"ph1\">`CWinApp* pApp = AfxGetApp();`</ph> to get at the CWinApp class illustrating a way that <ph id=\"ph2\">`WriteProfileBinary`</ph> and <ph id=\"ph3\">`GetProfileBinary`</ph> can be used from any function in an MFC application.","source":"This example uses `CWinApp* pApp = AfxGetApp();` to get at the CWinApp class illustrating a way that `WriteProfileBinary` and `GetProfileBinary` can be used from any function in an MFC application."},{"pos":[94912,94931],"content":"NVC_MFCWindowing#54"},{"pos":[94998,95095],"content":"For another example, see the example for <bpt id=\"p1\">[</bpt>CWinApp::GetProfileBinary<ept id=\"p1\">](#cwinapp__getprofilebinary)</ept>.","source":"For another example, see the example for [CWinApp::GetProfileBinary](#cwinapp__getprofilebinary)."},{"pos":[95146,95170],"content":"CWinApp::WriteProfileInt"},{"content":"Call this member function to write the specified value into the specified section of the application's registry or .INI file.","pos":[95174,95299]},{"content":"Parameters","pos":[95415,95425]},{"content":"Points to a null-terminated string that specifies the section containing the entry.","pos":[95446,95529]},{"content":"If the section does not exist, it is created.","pos":[95530,95575]},{"content":"The name of the section is case independent; the string may be any combination of uppercase and lowercase letters.","pos":[95576,95690]},{"content":"Points to a null-terminated string that contains the entry into which the value is to be written.","pos":[95712,95809]},{"content":"If the entry does not exist in the specified section, it is created.","pos":[95810,95878]},{"content":"Contains the value to be written.","pos":[95897,95930]},{"content":"Return Value","pos":[95940,95952]},{"content":"Nonzero if successful; otherwise 0.","pos":[95956,95991]},{"content":"Example","pos":[96001,96008]},{"pos":[96012,96246],"content":"This example uses <ph id=\"ph1\">`CWinApp* pApp = AfxGetApp();`</ph> to get at the CWinApp class illustrating a way that <ph id=\"ph2\">`WriteProfileString`</ph>, <ph id=\"ph3\">`WriteProfileInt`</ph>, <ph id=\"ph4\">`GetProfileString`</ph>, and <ph id=\"ph5\">`GetProfileInt`</ph> can be used from any function in an MFC application.","source":"This example uses `CWinApp* pApp = AfxGetApp();` to get at the CWinApp class illustrating a way that `WriteProfileString`, `WriteProfileInt`, `GetProfileString`, and `GetProfileInt` can be used from any function in an MFC application."},{"pos":[96264,96283],"content":"NVC_MFCWindowing#43"},{"pos":[96349,96440],"content":"For another example, see the example for <bpt id=\"p1\">[</bpt>CWinApp::GetProfileInt<ept id=\"p1\">](#cwinapp__getprofileint)</ept>.","source":"For another example, see the example for [CWinApp::GetProfileInt](#cwinapp__getprofileint)."},{"pos":[96494,96521],"content":"CWinApp::WriteProfileString"},{"content":"Call this member function to write the specified string into the specified section of the application's registry or .INI file.","pos":[96525,96651]},{"content":"Parameters","pos":[96777,96787]},{"content":"Points to a null-terminated string that specifies the section containing the entry.","pos":[96808,96891]},{"content":"If the section does not exist, it is created.","pos":[96892,96937]},{"content":"The name of the section is case independent; the string may be any combination of uppercase and lowercase letters.","pos":[96938,97052]},{"content":"Points to a null-terminated string that contains the entry into which the value is to be written.","pos":[97074,97171]},{"content":"If the entry does not exist in the specified section, it is created.","pos":[97172,97240]},{"content":"If this parameter is <ph id=\"ph1\">`NULL`</ph>, the section specified by <ph id=\"ph2\">`lpszSection`</ph> is deleted.","pos":[97241,97320],"source":" If this parameter is `NULL`, the section specified by `lpszSection` is deleted."},{"content":"Points to the string to be written.","pos":[97342,97377]},{"content":"If this parameter is <ph id=\"ph1\">`NULL`</ph>, the entry specified by the <ph id=\"ph2\">`lpszEntry`</ph> parameter is deleted.","pos":[97378,97467],"source":" If this parameter is `NULL`, the entry specified by the `lpszEntry` parameter is deleted."},{"content":"Return Value","pos":[97477,97489]},{"content":"Nonzero if successful; otherwise 0.","pos":[97493,97528]},{"content":"Example","pos":[97538,97545]},{"pos":[97560,97579],"content":"NVC_MFCWindowing#43"},{"pos":[97645,97736],"content":"For another example, see the example for <bpt id=\"p1\">[</bpt>CWinApp::GetProfileInt<ept id=\"p1\">](#cwinapp__getprofileint)</ept>.","source":"For another example, see the example for [CWinApp::GetProfileInt](#cwinapp__getprofileint)."},{"pos":[97780,97797],"content":"CWinApp::SetAppID"},{"content":"Explicitly sets Application User Model ID for the application.","pos":[97801,97863]},{"content":"This method should be called before any user interface is presented to the user (the best place is the application constructor).","pos":[97864,97992]},{"content":"Parameters","pos":[98055,98065]},{"content":"Specifies the Application User Model ID.","pos":[98085,98125]},{"content":"Remarks","pos":[98135,98142]},{"content":"See Also","pos":[98151,98159]},{"content":"CWinThread Class","pos":[98164,98180]},{"content":"Hierarchy Chart","pos":[98228,98243]},{"content":"How to: Add Restart Manager Support","pos":[98280,98315]}],"content":"---\ntitle: \"CWinApp Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CWinApp\"\n  - \"hInstance\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CWinApp class\"\n  - \"application objects [C++]\"\n  - \"HINSTANCE\"\n  - \"main object\"\nms.assetid: e426a3cd-0d15-40d6-bd55-beaa5feb2343\ncaps.latest.revision: 27\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CWinApp Class\nThe base class from which you derive a Windows application object.  \n  \n## Syntax  \n  \n```  \nclass CWinApp : public CWinThread  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CWinApp::CWinApp](#cwinapp__cwinapp)|Constructs a `CWinApp` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CWinApp::AddDocTemplate](#cwinapp__adddoctemplate)|Adds a document template to the application's list of available document templates.|  \n|[CWinApp::AddToRecentFileList](#cwinapp__addtorecentfilelist)|Adds a filename to the most recently used (MRU) file list.|  \n|[CWinApp::ApplicationRecoveryCallback](#cwinapp__applicationrecoverycallback)|Called by the framework when the application unexpectedly exits.|  \n|[CWinApp::CloseAllDocuments](#cwinapp__closealldocuments)|Closes all open documents.|  \n|[CWinApp::CreatePrinterDC](#cwinapp__createprinterdc)|Creates a printer device context.|  \n|[CWinApp::DelRegTree](#cwinapp__delregtree)|Deletes a specified key and all its subkeys.|  \n|[CWinApp::DoMessageBox](#cwinapp__domessagebox)|Implements [AfxMessageBox](cstring-formatting-and-message-box-display.md#afxmessagebox) for the application.|  \n|[CWinApp::DoWaitCursor](#cwinapp__dowaitcursor)|Turns the wait cursor on and off.|  \n|[CWinApp::EnableD2DSupport](#cwinapp__enabled2dsupport)|Enables application `D2D` support. Call this method before the main window is initialized.|  \n|[CWinApp::EnableHtmlHelp](#cwinapp__enablehtmlhelp)|Implements HTMLHelp for the application, rather than WinHelp.|  \n|[CWinApp::EnableTaskbarInteraction](#cwinapp__enabletaskbarinteraction)|Enables Taskbar interaction.|  \n|[CWinApp::ExitInstance](#cwinapp__exitinstance)|Override to clean up when your application terminates.|  \n|[CWinApp::GetApplicationRecoveryParameter](#cwinapp__getapplicationrecoveryparameter)|Retrieves the input parameter for the application recovery method.|  \n|[CWinApp::GetApplicationRecoveryPingInterval](#cwinapp__getapplicationrecoverypinginterval)|Returns the length of time that the restart manager waits for the recovery callback function to return.|  \n|[CWinApp::GetApplicationRestartFlags](#cwinapp__getapplicationrestartflags)|Returns the flags for the restart manager.|  \n|[CWinApp::GetAppRegistryKey](#cwinapp__getappregistrykey)|Returns key for HKEY_CURRENT_USER\\\\\"Software\"\\RegistryKey\\ProfileName.|  \n|[CWinApp::GetDataRecoveryHandler](#cwinapp__getdatarecoveryhandler)|Gets the data recovery handler for this instance of the application.|  \n|[CWinApp::GetFirstDocTemplatePosition](#cwinapp__getfirstdoctemplateposition)|Retrieves the position of the first document template.|  \n|[CWinApp::GetHelpMode](#cwinapp__gethelpmode)|Retrieves the type of help used by the application.|  \n|[CWinApp::GetNextDocTemplate](#cwinapp__getnextdoctemplate)|Retrieves the position of a document template. Can be used recursively.|  \n|[CWinApp::GetPrinterDeviceDefaults](#cwinapp__getprinterdevicedefaults)|Retrieves the printer device defaults.|  \n|[CWinApp::GetProfileBinary](#cwinapp__getprofilebinary)|Retrieves binary data from an entry in the application's .INI file.|  \n|[CWinApp::GetProfileInt](#cwinapp__getprofileint)|Retrieves an integer from an entry in the application's .INI file.|  \n|[CWinApp::GetProfileString](#cwinapp__getprofilestring)|Retrieves a string from an entry in the application's .INI file.|  \n|[CWinApp::GetSectionKey](#cwinapp__getsectionkey)|Returns key for HKEY_CURRENT_USER\\\\\"Software\"\\RegistryKey\\AppName\\lpszSection.|  \n|[CWinApp::HideApplication](#cwinapp__hideapplication)|Hides the application before closing all documents.|  \n|[CWinApp::HtmlHelp](#cwinapp__htmlhelp)|Calls the `HTMLHelp` Windows function.|  \n|[CWinApp::InitInstance](#cwinapp__initinstance)|Override to perform Windows instance initialization, such as creating your window objects.|  \n|[CWinApp::IsTaskbarInteractionEnabled](#cwinapp__istaskbarinteractionenabled)|Tells whether Windows 7 Taskbar interaction is enabled.|  \n|[CWinApp::LoadCursor](#cwinapp__loadcursor)|Loads a cursor resource.|  \n|[CWinApp::LoadIcon](#cwinapp__loadicon)|Loads an icon resource.|  \n|[CWinApp::LoadOEMCursor](#cwinapp__loadoemcursor)|Loads a Windows OEM predefined cursor that the **OCR_** constants specify in WINDOWS.H.|  \n|[CWinApp::LoadOEMIcon](#cwinapp__loadoemicon)|Loads a Windows OEM predefined icon that the **OIC_** constants specify in WINDOWS.H.|  \n|[CWinApp::LoadStandardCursor](#cwinapp__loadstandardcursor)|Loads a Windows predefined cursor that the **IDC_** constants specify in WINDOWS.H.|  \n|[CWinApp::LoadStandardIcon](#cwinapp__loadstandardicon)|Loads a Windows predefined icon that the **IDI_** constants specify in WINDOWS.H.|  \n|[CWinApp::OnDDECommand](#cwinapp__onddecommand)|Called by the framework in response to a dynamic data exchange (DDE) execute command.|  \n|[CWinApp::OnIdle](#cwinapp__onidle)|Override to perform application-specific idle-time processing.|  \n|[CWinApp::OpenDocumentFile](#cwinapp__opendocumentfile)|Called by the framework to open a document from a file.|  \n|[CWinApp::ParseCommandLine](#cwinapp__parsecommandline)|Parses individual parameters and flags in the command line.|  \n|[CWinApp::PreTranslateMessage](#cwinapp__pretranslatemessage)|Filters messages before they are dispatched to the Windows functions [TranslateMessage](http://msdn.microsoft.com/library/windows/desktop/ms644955) and [DispatchMessage](http://msdn.microsoft.com/library/windows/desktop/ms644934).|  \n|[CWinApp::ProcessMessageFilter](#cwinapp__processmessagefilter)|Intercepts certain messages before they reach the application.|  \n|[CWinApp::ProcessShellCommand](#cwinapp__processshellcommand)|Handles command-line arguments and flags.|  \n|[CWinApp::ProcessWndProcException](#cwinapp__processwndprocexception)|Intercepts all unhandled exceptions thrown by the application's message and command handlers.|  \n|[CWinApp::Register](#cwinapp__register)|Performs customized registration.|  \n|[CWinApp::RegisterWithRestartManager](#cwinapp__registerwithrestartmanager)|Registers the application with the restart manager.|  \n|[CWinApp::ReopenPreviousFilesAtRestart](#cwinapp__reopenpreviousfilesatrestart)|Determines whether the restart manager reopens the files that were open when the application exited unexpectedly.|  \n|[CWinApp::RestartInstance](#cwinapp__restartinstance)|Handles an application restart initiated by the restart manager.|  \n|[CWinApp::RestoreAutosavedFilesAtRestart](#cwinapp__restoreautosavedfilesatrestart)|Determines whether the restart manager restores the autosaved files when it restarts the application.|  \n|[CWinApp::Run](#cwinapp__run)|Runs the default message loop. Override to customize the message loop.|  \n|[CWinApp::RunAutomated](#cwinapp__runautomated)|Tests the application's command line for the **/Automation** option. Obsolete. Instead, use the value in [CCommandLineInfo::m_bRunAutomated](../../mfc/reference/ccommandlineinfo-class.md#ccommandlineinfo__m_brunautomated) after calling [ParseCommandLine](#cwinapp__parsecommandline).|  \n|[CWinApp::RunEmbedded](#cwinapp__runembedded)|Tests the application's command line for the **/Embedding** option. Obsolete. Instead, use the value in [CCommandLineInfo::m_bRunEmbedded](../../mfc/reference/ccommandlineinfo-class.md#ccommandlineinfo__m_brunembedded) after calling [ParseCommandLine](#cwinapp__parsecommandline).|  \n|[CWinApp::SaveAllModified](#cwinapp__saveallmodified)|Prompts the user to save all modified documents.|  \n|[CWinApp::SelectPrinter](#cwinapp__selectprinter)|Selects a printer previously indicated by a user through a print dialog box.|  \n|[CWinApp::SetHelpMode](#cwinapp__sethelpmode)|Sets and initializes the type of help used by the application.|  \n|[CWinApp::SupportsApplicationRecovery](#cwinapp__supportsapplicationrecovery)|Determines whether the restart manager recovers an application that exited unexpectedly.|  \n|[CWinApp::SupportsAutosaveAtInterval](#cwinapp__supportsautosaveatinterval)|Determines whether the restart manager autosaves open documents at a regular interval.|  \n|[CWinApp::SupportsAutosaveAtRestart](#cwinapp__supportsautosaveatrestart)|Determines whether the restart manager autosaves any open documents when the application restarts.|  \n|[CWinApp::SupportsRestartManager](#cwinapp__supportsrestartmanager)|Determines whether the application supports the restart manager.|  \n|[CWinApp::Unregister](#cwinapp__unregister)|Unregisters everything known to be registered by the `CWinApp` object.|  \n|[CWinApp::WinHelp](#cwinapp__winhelp)|Calls the `WinHelp` Windows function.|  \n|[CWinApp::WriteProfileBinary](#cwinapp__writeprofilebinary)|Writes binary data to an entry in the application's .INI file.|  \n|[CWinApp::WriteProfileInt](#cwinapp__writeprofileint)|Writes an integer to an entry in the application's .INI file.|  \n|[CWinApp::WriteProfileString](#cwinapp__writeprofilestring)|Writes a string to an entry in the application's .INI file.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CWinApp::EnableShellOpen](#cwinapp__enableshellopen)|Allows the user to open data files from the Windows File Manager.|  \n|[CWinApp::LoadStdProfileSettings](#cwinapp__loadstdprofilesettings)|Loads standard .INI file settings and enables the MRU file list feature.|  \n|[CWinApp::OnContextHelp](#cwinapp__oncontexthelp)|Handles SHIFT+F1 Help within the application.|  \n|[CWinApp::OnFileNew](#cwinapp__onfilenew)|Implements the `ID_FILE_NEW` command.|  \n|[CWinApp::OnFileOpen](#cwinapp__onfileopen)|Implements the `ID_FILE_OPEN` command.|  \n|[CWinApp::OnFilePrintSetup](#cwinapp__onfileprintsetup)|Implements the `ID_FILE_PRINT_SETUP` command.|  \n|[CWinApp::OnHelp](#cwinapp__onhelp)|Handles F1 Help within the application (using the current context).|  \n|[CWinApp::OnHelpFinder](#cwinapp__onhelpfinder)|Handles the `ID_HELP_FINDER` and `ID_DEFAULT_HELP` commands.|  \n|[CWinApp::OnHelpIndex](#cwinapp__onhelpindex)|Handles the `ID_HELP_INDEX` command and provides a default Help topic.|  \n|[CWinApp::OnHelpUsing](#cwinapp__onhelpusing)|Handles the `ID_HELP_USING` command.|  \n|[CWinApp::RegisterShellFileTypes](#cwinapp__registershellfiletypes)|Registers all the application's document types with the Windows File Manager.|  \n|[CWinApp::SetAppID](#cwinapp__setappid)|Explicitly sets Application User Model ID for the application. This method should be called before any user interface is presented to user (the best place is the application constructor).|  \n|[CWinApp::SetRegistryKey](#cwinapp__setregistrykey)|Causes application settings to be stored in the registry instead of .INI files.|  \n|[CWinApp::UnregisterShellFileTypes](#cwinapp__unregistershellfiletypes)|Unregisters all the application's document types with the Windows File Manager.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CWinApp::m_bHelpMode](#cwinapp__m_bhelpmode)|Indicates if the user is in Help context mode (typically invoked with SHIFT+F1).|  \n|[CWinApp::m_eHelpType](#cwinapp__m_ehelptype)|Specifies the type of help used by the application.|  \n|[CWinApp::m_hInstance](#cwinapp__m_hinstance)|Identifies the current instance of the application.|  \n|[CWinApp::m_lpCmdLine](#cwinapp__m_lpcmdline)|Points to a null-terminated string that specifies the command line for the application.|  \n|[CWinApp::m_nCmdShow](#cwinapp__m_ncmdshow)|Specifies how the window is to be shown initially.|  \n|[CWinApp::m_pActiveWnd](#cwinapp__m_pactivewnd)|Pointer to the main window of the container application when an OLE server is in-place active.|  \n|[CWinApp::m_pszAppID](#cwinapp__m_pszappid)|Application User Model ID.|  \n|[CWinApp::m_pszAppName](#cwinapp__m_pszappname)|Specifies the name of the application.|  \n|[CWinApp::m_pszExeName](#cwinapp__m_pszexename)|The module name of the application.|  \n|[CWinApp::m_pszHelpFilePath](#cwinapp__m_pszhelpfilepath)|The path to the application's Help file.|  \n|[CWinApp::m_pszProfileName](#cwinapp__m_pszprofilename)|The application's .INI filename.|  \n|[CWinApp::m_pszRegistryKey](#cwinapp__m_pszregistrykey)|Used to determine the full registry key for storing application profile settings.|  \n  \n### Protected Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CWinApp::m_dwRestartManagerSupportFlags](#cwinapp__m_dwrestartmanagersupportflags)|Flags that determine how the restart manager behaves.|  \n|[CWinApp::m_nAutosaveInterval](#cwinapp__m_nautosaveinterval)|The length of time in milliseconds between autosaves.|  \n|[CWinApp::m_pDataRecoveryHandler](#cwinapp__m_pdatarecoveryhandler)|Pointer to the data recovery handler for the application.|  \n  \n## Remarks  \n An application object provides member functions for initializing your application (and each instance of it) and for running the application.  \n  \n Each application that uses the Microsoft Foundation classes can only contain one object derived from `CWinApp`. This object is constructed when other C++ global objects are constructed and is already available when Windows calls the `WinMain` function, which is supplied by the Microsoft Foundation Class Library. Declare your derived `CWinApp` object at the global level.  \n  \n When you derive an application class from `CWinApp`, override the [InitInstance](#cwinapp__initinstance) member function to create your application's main window object.  \n  \n In addition to the `CWinApp` member functions, the Microsoft Foundation Class Library provides the following global functions to access your `CWinApp` object and other global information:  \n  \n- [AfxGetApp](application-information-and-management.md#afxgetapp) Obtains a pointer to the `CWinApp` object.  \n  \n- [AfxGetInstanceHandle](application-information-and-management.md#afxgetinstancehandle) Obtains a handle to the current application instance.  \n  \n- [AfxGetResourceHandle](application-information-and-management.md#afxgetresourcehandle) Obtains a handle to the application's resources.  \n  \n- [AfxGetAppName](application-information-and-management.md#afxgetappname) Obtains a pointer to a string containing the application's name. Alternately, if you have a pointer to the `CWinApp` object, use `m_pszExeName` to get the application's name.  \n  \n See [CWinApp: The Application Class](../../mfc/cwinapp-the-application-class.md) for more on the `CWinApp` class, including an overview of the following:  \n  \n- `CWinApp`-derived code written by the Application Wizard.  \n  \n- `CWinApp`'s role in the execution sequence of your application.  \n  \n- `CWinApp`'s default member function implementations.  \n  \n- `CWinApp`'s key overridables.  \n  \n The **m_hPrevInstance** data member no longer exists. For information on detecting a previous instance of `CWinApp`, see the Knowledge Base article \"How To Identify a Previous Instance of an Application\" (KB106385) at [http://support.microsoft.com/default.aspxscid=kb;en-us;106385](http://support.microsoft.com/default.aspxscid=kb;en-us;106385).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWinThread](../../mfc/reference/cwinthread-class.md)  \n  \n `CWinApp`  \n  \n## Requirements  \n **Header:** afxwin.h  \n  \n##  <a name=\"cwinapp__adddoctemplate\"></a>  CWinApp::AddDocTemplate  \n Call this member function to add a document template to the list of available document templates that the application maintains.  \n  \n```  \nvoid AddDocTemplate(CDocTemplate* pTemplate);\n```  \n  \n### Parameters  \n `pTemplate`  \n A pointer to the `CDocTemplate` to be added.  \n  \n### Remarks  \n You should add all document templates to an application before you call [RegisterShellFileTypes](#cwinapp__registershellfiletypes).  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#35](../../mfc/reference/codesnippet/cpp/cwinapp-class_1.cpp)]  \n  \n##  <a name=\"cwinapp__addtorecentfilelist\"></a>  CWinApp::AddToRecentFileList  \n Call this member function to add `lpszPathName` to the MRU file list.  \n  \n```  \nvirtual void AddToRecentFileList(LPCTSTR lpszPathName);\n```  \n  \n### Parameters  \n `lpszPathName`  \n The path of the file.  \n  \n### Remarks  \n You should call the [LoadStdProfileSettings](#cwinapp__loadstdprofilesettings) member function to load the current MRU file list before you use this member function.  \n  \n The framework calls this member function when it opens a file or executes the Save As command to save a file with a new name.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#36](../../mfc/reference/codesnippet/cpp/cwinapp-class_2.cpp)]  \n  \n##  <a name=\"cwinapp__applicationrecoverycallback\"></a>  CWinApp::ApplicationRecoveryCallback  \n Called by the framework when the application unexpectedly exits.  \n  \n```  \n \nvirtual DWORD ApplicationRecoveryCallback(\nLPVOID lpvParam);\n```  \n  \n### Parameters  \n [in] `lpvParam`  \n Reserved for future use.  \n  \n### Return Value  \n 0 if this method is successful; nonzero if an error occurs.  \n  \n### Remarks  \n If your application supports the restart manager, the framework calls this function when your application unexpectedly exits.  \n  \n The default implementation of `ApplicationRecoveryCallback` uses the `CDataRecoveryHandler` to save the list of currently open documents to the registry. This method does not autosave any files.  \n  \n To customize the behavior, override this function in a derived [CWinApp Class](../../mfc/reference/cwinapp-class.md) or pass your own application recovery method as a parameter to [CWinApp::RegisterWithRestartManager](#cwinapp__registerwithrestartmanager).  \n  \n##  <a name=\"cwinapp__closealldocuments\"></a>  CWinApp::CloseAllDocuments  \n Call this member function to close all open documents before exiting.  \n  \n```  \nvoid CloseAllDocuments(BOOL bEndSession);\n```  \n  \n### Parameters  \n `bEndSession`  \n Specifies whether or not the Windows session is being ended. It is **TRUE** if the session is being ended; otherwise **FALSE**.  \n  \n### Remarks  \n Call [HideApplication](#cwinapp__hideapplication) before calling `CloseAllDocuments`.  \n  \n##  <a name=\"cwinapp__createprinterdc\"></a>  CWinApp::CreatePrinterDC  \n Call this member function to create a printer device context (DC) from the selected printer.  \n  \n```  \nBOOL CreatePrinterDC(CDC& dc);\n```  \n  \n### Parameters  \n `dc`  \n A reference to a printer device context.  \n  \n### Return Value  \n Nonzero if the printer device context is created successfully; otherwise 0.  \n  \n### Remarks  \n `CreatePrinterDC` initializes the device context that you pass in by reference, so you can use it to print.  \n  \n If the function is successful, when you have finished printing, you must destroy the device context. You can let the destructor of the [CDC](../../mfc/reference/cdc-class.md) object do it, or you can do it explicitly by calling [CDC::DeleteDC](../../mfc/reference/cdc-class.md#cdc__deletedc).  \n  \n##  <a name=\"cwinapp__cwinapp\"></a>  CWinApp::CWinApp  \n Constructs a `CWinApp` object and passes `lpszAppName` to be stored as the application name.  \n  \n```  \nCWinApp(LPCTSTR lpszAppName = NULL);\n```  \n  \n### Parameters  \n `lpszAppName`  \n A null-terminated string that contains the application name that Windows uses. If this argument is not supplied or is **NULL**, `CWinApp` uses the resource string **AFX_IDS_APP_TITLE** or the filename of the executable file.  \n  \n### Remarks  \n You should construct one global object of your `CWinApp`-derived class. You can have only one `CWinApp` object in your application. The constructor stores a pointer to the `CWinApp` object so that `WinMain` can call the object's member functions to initialize and run the application.  \n  \n##  <a name=\"cwinapp__delregtree\"></a>  CWinApp::DelRegTree  \n Deletes a specific registry key and all its subkeys.  \n  \n```  \nLONG DelRegTree(\n    HKEY hParentKey,  \n    const CString& strKeyName);\n\n \nLONG DelRegTree(\n    HKEY hParentKey,\n    const CString& strKeyName,\n    CAtlTransactionManager* pTM = NULL);\n```  \n  \n### Parameters  \n *hParentKey*  \n Handle to a registry key.  \n  \n *strKeyName*  \n The name of the registry key to be deleted.  \n  \n *pTM*  \n Pointer to CAtlTransactionManager object.  \n  \n### Return Value  \n If the function succeeds, the return value is ERROR_SUCCESS. If the function fails, the return value is a nonzero error code defined in Winerror.h.  \n  \n### Remarks  \n Call this function to delete the specified key and its subkeys.  \n  \n##  <a name=\"cwinapp__domessagebox\"></a>  CWinApp::DoMessageBox  \n The framework calls this member function to implement a message box for the global function [AfxMessageBox](cstring-formatting-and-message-box-display.md#afxmessagebox).  \n  \n```  \nvirtual int DoMessageBox(\n    LPCTSTR lpszPrompt,  \n    UINT nType,  \n    UINT nIDPrompt);\n```  \n  \n### Parameters  \n *lpszPrompt*  \n Address of text in the message box.  \n  \n `nType`  \n The message box [style](../../mfc/reference/message-box-styles.md).  \n  \n `nIDPrompt`  \n An index to a Help context string.  \n  \n### Return Value  \n Returns the same values as `AfxMessageBox`.  \n  \n### Remarks  \n Do not call this member function to open a message box; use `AfxMessageBox` instead.  \n  \n Override this member function to customize your application-wide processing of `AfxMessageBox` calls.  \n  \n##  <a name=\"cwinapp__dowaitcursor\"></a>  CWinApp::DoWaitCursor  \n This member function is called by the framework to implement [CWaitCursor](../../mfc/reference/cwaitcursor-class.md), [CCmdTarget::BeginWaitCursor](../../mfc/reference/ccmdtarget-class.md#ccmdtarget__beginwaitcursor), [CCmdTarget::EndWaitCursor](../../mfc/reference/ccmdtarget-class.md#ccmdtarget__endwaitcursor), and [CCmdTarget::RestoreWaitCursor](../../mfc/reference/ccmdtarget-class.md#ccmdtarget__restorewaitcursor).  \n  \n```  \nvirtual void DoWaitCursor(int nCode);\n```  \n  \n### Parameters  \n `nCode`  \n If this parameter is 1, a wait cursor appears. If 0, the wait cursor is restored without incrementing the reference count. If –1, the wait cursor ends.  \n  \n### Remarks  \n The default implements an hourglass cursor. `DoWaitCursor` maintains a reference count. When positive, the hourglass cursor is displayed.  \n  \n While you would not normally call `DoWaitCursor` directly, you could override this member function to change the wait cursor or to do additional processing while the wait cursor is displayed.  \n  \n For an easier, more streamlined way to implement a wait cursor, use `CWaitCursor`.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#37](../../mfc/reference/codesnippet/cpp/cwinapp-class_3.cpp)]  \n  \n##  <a name=\"cwinapp__enabled2dsupport\"></a>  CWinApp::EnableD2DSupport  \n [!INCLUDE[dev10_sp1required](../../mfc/reference/includes/dev10_sp1required_md.md)]  \n  \n Enables application D2D support. Call this method before the main window is initialized.  \n  \n```  \n \nBOOL EnableD2DSupport(\nD2D1_FACTORY_TYPE d2dFactoryType = D2D1_FACTORY_TYPE_SINGLE_THREADED,  \nDWRITE_FACTORY_TYPE writeFactoryType = DWRITE_FACTORY_TYPE_SHARED);\n```  \n  \n### Parameters  \n `d2dFactoryType`  \n The threading model of the D2D factory and the resources it creates.  \n  \n `writeFactoryType`  \n A value that specifies whether the write factory object will be shared or isolated  \n  \n### Return Value  \n Returns TRUE if D2D support was enabled, FALSE - otherwise  \n  \n##  <a name=\"cwinapp__enablehtmlhelp\"></a>  CWinApp::EnableHtmlHelp  \n Call this member function from within the constructor of your `CWinApp`-derived class to use HTMLHelp for your application's help.  \n  \n```  \nvoid EnableHtmlHelp();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cwinapp__enableshellopen\"></a>  CWinApp::EnableShellOpen  \n Call this function, typically from your `InitInstance` override, to enable your application's users to open data files when they double-click the files from within the Windows File Manager.  \n  \n```  \nvoid EnableShellOpen();\n```  \n  \n### Remarks  \n Call the `RegisterShellFileTypes` member function in conjunction with this function, or provide a .REG file with your application for manual registration of document types.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#38](../../mfc/reference/codesnippet/cpp/cwinapp-class_4.cpp)]  \n  \n##  <a name=\"cwinapp__enabletaskbarinteraction\"></a>  CWinApp::EnableTaskbarInteraction  \n Enables Taskbar interaction.  \n  \n```  \n \nBOOL EnableTaskbarInteraction(\nBOOL bEnable = TRUE);\n```  \n  \n### Parameters  \n `bEnable`  \n Specifies whether interaction with Windows 7 taskbar should be enabled ( `TRUE`), or disabled ( `FALSE`).  \n  \n### Return Value  \n Returns `TRUE` if taskbar interaction can be enabled or disabled.  \n  \n### Remarks  \n This method must be called before creation of main window, otherwise it asserts and returns `FALSE`.  \n  \n##  <a name=\"cwinapp__exitinstance\"></a>  CWinApp::ExitInstance  \n Called by the framework from within the **Run** member function to exit this instance of the application.  \n  \n```  \nvirtual int ExitInstance();\n```  \n  \n### Return Value  \n The application's exit code; 0 indicates no errors, and values greater than 0 indicate an error. This value is used as the return value from `WinMain`.  \n  \n### Remarks  \n Do not call this member function from anywhere but within the **Run** member function.  \n  \n The default implementation of this function writes framework options to the application's .INI file. Override this function to clean up when your application terminates.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#39](../../mfc/reference/codesnippet/cpp/cwinapp-class_5.cpp)]  \n  \n##  <a name=\"cwinapp__getapplicationrecoveryparameter\"></a>  CWinApp::GetApplicationRecoveryParameter  \n Retrieves the input parameter for the application recovery method.  \n  \n```  \nvirtual LPVOID GetApplicationRecoveryParameter();\n```  \n  \n### Return Value  \n The default input parameter for the application recovery method.  \n  \n### Remarks  \n The default behavior of this function returns `NULL`.  \n  \n For more information, see [CWinApp::ApplicationRecoveryCallback](#cwinapp__applicationrecoverycallback).  \n  \n##  <a name=\"cwinapp__getapplicationrecoverypinginterval\"></a>  CWinApp::GetApplicationRecoveryPingInterval  \n Returns the length of time that the restart manager waits for the recovery callback function to return.  \n  \n```  \nvirtual DWORD GetApplicationRecoveryPingInterval();\n```  \n  \n### Return Value  \n The length of time in milliseconds.  \n  \n### Remarks  \n When an application that is registered with the restart manager exits unexpectedly, the application tries to save open documents and calls the recovery callback function. The default recovery callback function is [CWinApp::ApplicationRecoveryCallback](#cwinapp__applicationrecoverycallback).  \n  \n The length of time that the framework waits for the recovery callback function to return is the ping interval. You can customize the ping interval by overriding `CWinApp::GetApplicationRecoveryPingInterval` or by providing a custom value to `RegisterWithRestartManager`.  \n  \n##  <a name=\"cwinapp__getapplicationrestartflags\"></a>  CWinApp::GetApplicationRestartFlags  \n Returns the flags for the restart manager.  \n  \n```  \nvirtual DWORD GetApplicationRestartFlags();\n```  \n  \n### Return Value  \n The flags for the restart manager. The default implementation returns 0.  \n  \n### Remarks  \n The flags for the restart manager have no effect with the default implementation. They are provided for future use.  \n  \n You set the flags when you register the application with the restart manager by using [CWinApp::RegisterWithRestartManager](#cwinapp__registerwithrestartmanager).  \n  \n The possible values for the restart manager flags are as follows:  \n  \n- `RESTART_NO_CRASH`  \n  \n- `RESTART_NO_HANG`  \n  \n- `RESTART_NO_PATCH`  \n  \n- `RESTART_NO_REBOOT`  \n  \n##  <a name=\"cwinapp__getappregistrykey\"></a>  CWinApp::GetAppRegistryKey  \n Returns the key for HKEY_CURRENT_USER\\\\\"Software\"\\RegistryKey\\ProfileName.  \n  \n```  \n \nHKEY GetAppRegistryKey(\nCAtlTransactionManager* pTM = NULL);\n```  \n  \n### Parameters  \n `pTM`  \n Pointer to a `CAtlTransactionManager` object.  \n  \n### Return Value  \n Application key if the function succeeds; otherwise `NULL`.  \n  \n### Remarks  \n  \n##  <a name=\"cwinapp__getdatarecoveryhandler\"></a>  CWinApp::GetDataRecoveryHandler  \n Gets the data recovery handler for this instance of the application.  \n  \n```  \nvirtual CDataRecoveryHandler *GetDataRecoveryHandler();\n```  \n  \n### Return Value  \n The data recovery handler for this instance of the application.  \n  \n### Remarks  \n Each application that uses the restart manager must have one instance of the [CDataRecoveryHandler Class](../../mfc/reference/cdatarecoveryhandler-class.md). This class is responsible for monitoring open documents and autosaving files. The behavior of the `CDataRecoveryHandler` depends on the configuration of the restart manager. For more information, see [CDataRecoveryHandler Class](../../mfc/reference/cdatarecoveryhandler-class.md).  \n  \n This method returns `NULL` on operating systems earlier than [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]. The restart manager is not supported on operating systems earlier than [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)].  \n  \n If the application does not currently have a data recovery handler, this method creates one and returns a pointer to it.  \n  \n##  <a name=\"cwinapp__getfirstdoctemplateposition\"></a>  CWinApp::GetFirstDocTemplatePosition  \n Gets the position of the first document template in the application.  \n  \n```  \nPOSITION GetFirstDocTemplatePosition() const;\n\n \n```  \n  \n### Return Value  \n A **POSITION** value that can be used for iteration or object pointer retrieval; **NULL** if the list is empty.  \n  \n### Remarks  \n Use the **POSITION** value returned in a call to [GetNextDocTemplate](#cwinapp__getnextdoctemplate) to get the first [CDocTemplate](../../mfc/reference/cdoctemplate-class.md) object.  \n  \n##  <a name=\"cwinapp__gethelpmode\"></a>  CWinApp::GetHelpMode  \n Retrieves the type of help used by the application.  \n  \n```  \nAFX_HELP_TYPE GetHelpMode();\n```  \n  \n### Return Value  \n The help type used by the application. See [CWinApp::m_eHelpType](#cwinapp__m_ehelptype) for more information.  \n  \n##  <a name=\"cwinapp__getnextdoctemplate\"></a>  CWinApp::GetNextDocTemplate  \n Gets the document template identified by `pos`, then sets `pos` to the **POSITION** value.  \n  \n```  \nCDocTemplate* GetNextDocTemplate(POSITION& pos) const;\n\n \n```  \n  \n### Parameters  \n `pos`  \n A reference to a **POSITION** value returned by a previous call to `GetNextDocTemplate` or [GetFirstDocTemplatePosition](#cwinapp__getfirstdoctemplateposition). The value is updated to the next position by this call.  \n  \n### Return Value  \n A pointer to a [CDocTemplate](../../mfc/reference/cdoctemplate-class.md) object.  \n  \n### Remarks  \n You can use `GetNextDocTemplate` in a forward iteration loop if you establish the initial position with a call to `GetFirstDocTemplatePosition`.  \n  \n You must ensure that your **POSITION** value is valid. If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.  \n  \n If the retrieved document template is the last available, then the new value of `pos` is set to **NULL**.  \n  \n##  <a name=\"cwinapp__getprinterdevicedefaults\"></a>  CWinApp::GetPrinterDeviceDefaults  \n Call this member function to prepare a printer device context for printing.  \n  \n```  \nBOOL GetPrinterDeviceDefaults(struct tagPDA* pPrintDlg);\n```  \n  \n### Parameters  \n *pPrintDlg*  \n A pointer to a [PRINTDLG](http://msdn.microsoft.com/library/windows/desktop/ms646843) structure.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n Retrieves the current printer defaults from the Windows .INI file as necessary, or uses the last printer configuration set by the user in Print Setup.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#40](../../mfc/reference/codesnippet/cpp/cwinapp-class_6.cpp)]  \n  \n##  <a name=\"cwinapp__getprofilebinary\"></a>  CWinApp::GetProfileBinary  \n Call this member function to retrieve binary data from an entry within a specified section of the application's registry or .INI file.  \n  \n```  \nBOOL GetProfileBinary(\n    LPCTSTR lpszSection,  \n    LPCTSTR lpszEntry,  \n    LPBYTE* ppData,  \n    UINT* pBytes);\n```  \n  \n### Parameters  \n *lpszSection*  \n Points to a null-terminated string that specifies the section containing the entry.  \n  \n *lpszEntry*  \n Points to a null-terminated string that contains the entry whose value is to be retrieved.  \n  \n *ppData*  \n Points to a pointer that will receive the address of the data.  \n  \n *pBytes*  \n Points to a UINT that will receive the size of the data (in bytes).  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n This member function is not case sensitive, so the strings in the *lpszSection* and *lpszEntry* parameters may differ in case.  \n  \n> [!NOTE]\n> **GetProfileBinary** allocates a buffer and returns its address in \\* *ppData*. The caller is responsible for freeing the buffer using **delete []**.  \n  \n> [!IMPORTANT]\n>  The data returned by this function is not necessarily NULL terminated, and the caller must perform validation. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#41](../../mfc/reference/codesnippet/cpp/cwinapp-class_7.cpp)]  \n  \n For an additional example, see [CWinApp::WriteProfileBinary](#cwinapp__writeprofilebinary).  \n  \n##  <a name=\"cwinapp__getprofileint\"></a>  CWinApp::GetProfileInt  \n Call this member function to retrieve the value of an integer from an entry within a specified section of the application's registry or .INI file.  \n  \n```  \nUINT GetProfileInt(\n    LPCTSTR lpszSection,  \n    LPCTSTR lpszEntry,  \n    int nDefault);\n```  \n  \n### Parameters  \n `lpszSection`  \n Points to a null-terminated string that specifies the section containing the entry.  \n  \n `lpszEntry`  \n Points to a null-terminated string that contains the entry whose value is to be retrieved.  \n  \n `nDefault`  \n Specifies the default value to return if the framework cannot find the entry.  \n  \n### Return Value  \n The integer value of the string that follows the specified entry if the function is successful. The return value is the value of the `nDefault` parameter if the function does not find the entry. The return value is 0 if the value that corresponds to the specified entry is not an integer.  \n  \n This member function supports hexadecimal notation for the value in the .INI file. When you retrieve a signed integer, you should cast the value into an `int`.  \n  \n### Remarks  \n This member function is not case sensitive, so the strings in the `lpszSection` and `lpszEntry` parameters may differ in case.  \n  \n> [!IMPORTANT]\n>  The data returned by this function is not necessarily NULL terminated, and the caller must perform validation. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#42](../../mfc/reference/codesnippet/cpp/cwinapp-class_8.cpp)]  \n  \n For an additional example, see [CWinApp::WriteProfileInt](#cwinapp__writeprofileint).  \n  \n##  <a name=\"cwinapp__getprofilestring\"></a>  CWinApp::GetProfileString  \n Call this member function to retrieve the string associated with an entry within the specified section in the application's registry or .INI file.  \n  \n```  \nCString GetProfileString(\n    LPCTSTR lpszSection,  \n    LPCTSTR lpszEntry,  \n    LPCTSTR lpszDefault = NULL);\n```  \n  \n### Parameters  \n `lpszSection`  \n Points to a null-terminated string that specifies the section containing the entry.  \n  \n `lpszEntry`  \n Points to a null-terminated string that contains the entry whose string is to be retrieved. This value must not be **NULL**.  \n  \n `lpszDefault`  \n Points to the default string value for the given entry if the entry cannot be found in the initialization file.  \n  \n### Return Value  \n The return value is the string from the application's .INI file or `lpszDefault` if the string cannot be found. The maximum string length supported by the framework is `_MAX_PATH`. If `lpszDefault` is **NULL**, the return value is an empty string.  \n  \n### Remarks  \n  \n> [!IMPORTANT]\n>  The data returned by this function is not necessarily NULL terminated, and the caller must perform validation. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#43](../../mfc/reference/codesnippet/cpp/cwinapp-class_9.cpp)]  \n  \n For another example, see the example for [CWinApp::GetProfileInt](#cwinapp__getprofileint).  \n  \n##  <a name=\"cwinapp__getsectionkey\"></a>  CWinApp::GetSectionKey  \n Returns the key for HKEY_CURRENT_USER\\\\\"Software\"\\RegistryKey\\AppName\\lpszSection.  \n  \n```  \n \nHKEY GetSectionKey(\nLPCTSTR lpszSection,  \nCAtlTransactionManager* pTM = NULL);\n```  \n  \n### Parameters  \n `lpszSection`  \n The name of the key to be obtained.  \n  \n `pTM`  \n Pointer to a `CAtlTransactionManager` object.  \n  \n### Return Value  \n Section key if the function succeeds; otherwise `NULL`.  \n  \n### Remarks  \n  \n##  <a name=\"cwinapp__hideapplication\"></a>  CWinApp::HideApplication  \n Call this member function to hide an application before closing the open documents.  \n  \n```  \nvoid HideApplication();\n```  \n  \n##  <a name=\"cwinapp__htmlhelp\"></a>  CWinApp::HtmlHelp  \n Call this member function to invoke the HTMLHelp application.  \n  \n```  \nvirtual void HtmlHelp(\n    DWORD_PTR dwData,  \n    UINT nCmd = 0x000F);\n```  \n  \n### Parameters  \n `dwData`  \n Specifies additional data. The value used depends on the value of the `nCmd` parameter.  \n  \n `nCmd`  \n Specifies the type of help requested. For a list of possible values and how they affect the `dwData` parameter, see the `uCommand` parameter described in About the HTMLHelp API Function in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Remarks  \n The framework also calls this function to invoke the HTMLHelp application.  \n  \n The framework will automatically close the HTMLHelp application when your application terminates.  \n  \n##  <a name=\"cwinapp__initinstance\"></a>  CWinApp::InitInstance  \n Windows allows several copies of the same program to run at the same time.  \n  \n```  \nvirtual BOOL InitInstance();\n```  \n  \n### Return Value  \n Nonzero if initialization is successful; otherwise 0.  \n  \n### Remarks  \n Application initialization is conceptually divided into two sections: one-time application initialization that is done the first time the program runs, and instance initialization that runs each time a copy of the program runs, including the first time. The framework's implementation of `WinMain` calls this function.  \n  \n Override `InitInstance` to initialize each new instance of your application running under Windows. Typically, you override `InitInstance` to construct your main window object and set the `CWinThread::m_pMainWnd` data member to point to that window. For more information on overriding this member function, see [CWinApp: The Application Class](../../mfc/cwinapp-the-application-class.md).  \n  \n> [!NOTE]\n>  MFC applications must be initialized as single threaded apartment (STA). If you call [CoInitializeEx](http://msdn.microsoft.com/library/windows/desktop/ms695279) in your `InitInstance` override, specify `COINIT_APARTMENTTHREADED` (rather than `COINIT_MULTITHREADED`). For more information, see PRB: MFC Application Stops Responding When You Initialize the Application as a Multithreaded Apartment (828643) at [http://support.microsoft.com/default.aspxscid=kb;en-us;828643](http://support.microsoft.com/default.aspxscid=kb;en-us;828643).  \n  \n### Example  \n [!code-cpp[NVC_MFCListView#9](../../atl/reference/codesnippet/cpp/cwinapp-class_10.cpp)]  \n  \n##  <a name=\"cwinapp__istaskbarinteractionenabled\"></a>  CWinApp::IsTaskbarInteractionEnabled  \n Tells whether Windows 7 Taskbar interaction is enabled.  \n  \n```  \nvirtual BOOL IsTaskbarInteractionEnabled();\n```  \n  \n### Return Value  \n Returns `TRUE` if `EnableTaskbarInteraction` has been called and the Operating System is Windows 7 or higher.  \n  \n### Remarks  \n Taskbar interaction means that MDI application displays the content of MDI children in separate tabbed thumbnails that appear when the mouse pointer is over the application taskbar button.  \n  \n##  <a name=\"cwinapp__loadcursor\"></a>  CWinApp::LoadCursor  \n Loads the cursor resource named by `lpszResourceName` or specified by `nIDResource` from the current executable file.  \n  \n```  \nHCURSOR LoadCursor(LPCTSTR lpszResourceName) const;\n\n \n \nHCURSOR LoadCursor(UINT nIDResource) const;\n\n \n```  \n  \n### Parameters  \n `lpszResourceName`  \n Points to a null-terminated string that contains the name of the cursor resource. You can use a `CString` for this argument.  \n  \n `nIDResource`  \n ID of the cursor resource. For a list of resources, see [LoadCursor](http://msdn.microsoft.com/library/windows/desktop/ms648391) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Return Value  \n A handle to a cursor if successful; otherwise **NULL**.  \n  \n### Remarks  \n `LoadCursor` loads the cursor into memory only if it has not been previously loaded; otherwise, it retrieves a handle of the existing resource.  \n  \n Use the [LoadStandardCursor](#cwinapp__loadstandardcursor) or [LoadOEMCursor](#cwinapp__loadoemcursor) member function to access the predefined Windows cursors.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#44](../../mfc/reference/codesnippet/cpp/cwinapp-class_11.cpp)]  \n  \n##  <a name=\"cwinapp__loadicon\"></a>  CWinApp::LoadIcon  \n Loads the icon resource named by `lpszResourceName` or specified by `nIDResource` from the executable file.  \n  \n```  \nHICON LoadIcon(LPCTSTR lpszResourceName) const;\n\n \n \nHICON LoadIcon(UINT nIDResource) const;\n\n \n```  \n  \n### Parameters  \n `lpszResourceName`  \n Points to a null-terminated string that contains the name of the icon resource. You can also use a `CString` for this argument.  \n  \n `nIDResource`  \n ID number of the icon resource.  \n  \n### Return Value  \n A handle to an icon if successful; otherwise **NULL**.  \n  \n### Remarks  \n `LoadIcon` loads the icon only if it has not been previously loaded; otherwise, it retrieves a handle of the existing resource.  \n  \n You can use the [LoadStandardIcon](#cwinapp__loadstandardicon) or [LoadOEMIcon](#cwinapp__loadoemicon) member function to access the predefined Windows icons.  \n  \n> [!NOTE]\n>  This member function calls the Win32 API function [LoadIcon](http://msdn.microsoft.com/library/windows/desktop/ms648072), which can only load an icon whose size conforms to the **SM_CXICON** and **SM_CYICON** system metric values.  \n  \n##  <a name=\"cwinapp__loadoemcursor\"></a>  CWinApp::LoadOEMCursor  \n Loads the Windows predefined cursor resource specified by `nIDCursor`.  \n  \n```  \nHCURSOR LoadOEMCursor(UINT nIDCursor) const;\n\n \n```  \n  \n### Parameters  \n `nIDCursor`  \n An **OCR_** manifest constant identifier that specifies a predefined Windows cursor. You must have **#define OEMRESOURCE** before **#include \\<afxwin.h>** to gain access to the **OCR_** constants in WINDOWS.H.  \n  \n### Return Value  \n A handle to a cursor if successful; otherwise **NULL**.  \n  \n### Remarks  \n Use the `LoadOEMCursor` or [LoadStandardCursor](#cwinapp__loadstandardcursor) member function to access the predefined Windows cursors.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#45](../../mfc/reference/codesnippet/cpp/cwinapp-class_12.h)]  \n  \n [!code-cpp[NVC_MFCWindowing#46](../../mfc/reference/codesnippet/cpp/cwinapp-class_13.cpp)]  \n  \n##  <a name=\"cwinapp__loadoemicon\"></a>  CWinApp::LoadOEMIcon  \n Loads the Windows predefined icon resource specified by `nIDIcon`.  \n  \n```  \nHICON LoadOEMIcon(UINT nIDIcon) const;\n\n \n```  \n  \n### Parameters  \n `nIDIcon`  \n An **OIC_** manifest constant identifier that specifies a predefined Windows icon. You must have **#define OEMRESOURCE** before **#include \\<afxwin.h>** to access the **OIC_** constants in WINDOWS.H.  \n  \n### Return Value  \n A handle to an icon if successful; otherwise **NULL**.  \n  \n### Remarks  \n Use the `LoadOEMIcon` or [LoadStandardIcon](#cwinapp__loadstandardicon) member function to access the predefined Windows icons.  \n  \n##  <a name=\"cwinapp__loadstandardcursor\"></a>  CWinApp::LoadStandardCursor  \n Loads the Windows predefined cursor resource that `lpszCursorName` specifies.  \n  \n```  \nHCURSOR LoadStandardCursor(LPCTSTR lpszCursorName) const;\n\n \n```  \n  \n### Parameters  \n `lpszCursorName`  \n An **IDC_** manifest constant identifier that specifies a predefined Windows cursor. These identifiers are defined in WINDOWS.H. The following list shows the possible predefined values and meanings for `lpszCursorName`:  \n  \n- **IDC_ARROW** Standard arrow cursor  \n  \n- **IDC_IBEAM** Standard text-insertion cursor  \n  \n- **IDC_WAIT** Hourglass cursor used when Windows performs a time-consuming task  \n  \n- **IDC_CROSS** Cross-hair cursor for selection  \n  \n- **IDC_UPARROW** Arrow that points straight up  \n  \n- **IDC_SIZE** Obsolete and unsupported; use **IDC_SIZEALL**  \n  \n- **IDC_SIZEALL** A four-pointed arrow. The cursor to use to resize a window.  \n  \n- **IDC_ICON** Obsolete and unsupported. Use **IDC_ARROW**.  \n  \n- **IDC_SIZENWSE** Two-headed arrow with ends at upper left and lower right  \n  \n- **IDC_SIZENESW** Two-headed arrow with ends at upper right and lower left  \n  \n- **IDC_SIZEWE** Horizontal two-headed arrow  \n  \n- **IDC_SIZENS** Vertical two-headed arrow  \n  \n### Return Value  \n A handle to a cursor if successful; otherwise **NULL**.  \n  \n### Remarks  \n Use the `LoadStandardCursor` or [LoadOEMCursor](#cwinapp__loadoemcursor) member function to access the predefined Windows cursors.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#47](../../mfc/reference/codesnippet/cpp/cwinapp-class_14.cpp)]  \n  \n##  <a name=\"cwinapp__loadstandardicon\"></a>  CWinApp::LoadStandardIcon  \n Loads the Windows predefined icon resource that `lpszIconName` specifies.  \n  \n```  \nHICON LoadStandardIcon(LPCTSTR lpszIconName) const;\n\n \n```  \n  \n### Parameters  \n `lpszIconName`  \n A manifest constant identifier that specifies a predefined Windows icon. These identifiers are defined in WINDOWS.H. For a list of the possible predefined values and their descriptions, see the *lpIconName* parameter in [LoadIcon](http://msdn.microsoft.com/library/windows/desktop/ms648072) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Return Value  \n A handle to an icon if successful; otherwise **NULL**.  \n  \n### Remarks  \n Use the `LoadStandardIcon` or [LoadOEMIcon](#cwinapp__loadoemicon) member function to access the predefined Windows icons.  \n  \n##  <a name=\"cwinapp__loadstdprofilesettings\"></a>  CWinApp::LoadStdProfileSettings  \n Call this member function from within the [InitInstance](#cwinapp__initinstance) member function to enable and load the list of most recently used (MRU) files and last preview state.  \n  \n```  \nvoid LoadStdProfileSettings(UINT nMaxMRU = _AFX_MRU_COUNT);\n```  \n  \n### Parameters  \n `nMaxMRU`  \n The number of recently used files to track.  \n  \n### Remarks  \n If `nMaxMRU` is 0, no MRU list will be maintained.  \n  \n##  <a name=\"cwinapp__m_bhelpmode\"></a>  CWinApp::m_bHelpMode  \n **TRUE** if the application is in Help context mode (conventionally invoked with SHIFT + F1); otherwise **FALSE**.  \n  \n```  \nBOOL m_bHelpMode;  \n```  \n  \n### Remarks  \n In Help context mode, the cursor becomes a question mark and the user can move it about the screen. Examine this flag if you want to implement special handling when in the Help mode. `m_bHelpMode` is a public variable of type **BOOL**.  \n  \n##  <a name=\"cwinapp__m_dwrestartmanagersupportflags\"></a>  CWinApp::m_dwRestartManagerSupportFlags  \n Flags that determine how the restart manager behaves.  \n  \n```  \nDWORD m_dwRestartManagerSupportFlags;  \n```  \n  \n### Remarks  \n To enable the restart manager, set `m_dwRestartManagerSupportFlags` to the behavior that you want. The following table shows the flags that are available.  \n  \n|||  \n|-|-|  \n|Flag|Description|  \n|`AFX_RESTART_MANAGER_SUPPORT_RESTART`|The application is registered by using [CWinApp::RegisterWithRestartManager](#cwinapp__registerwithrestartmanager). The restart manager is responsible for restarting the application if it unexpectedly exits.|  \n|- `AFX_RESTART_MANAGER_SUPPORT_RECOVERY`|The application is registered with the restart manager and the restart manager calls the recovery callback function when it restarts the application. The default recovery callback function is [CWinApp::ApplicationRecoveryCallback](#cwinapp__applicationrecoverycallback).|  \n|- `AFX_RESTART_MANAGER_AUTOSAVE_AT_RESTART`|Autosave is enabled and the restart manager autosaves any open documents when the application restarts.|  \n|- `AFX_RESTART_MANAGER_AUTOSAVE_AT_INTERVAL`|Autosave is enabled and the restart manager autosaves any open documents at a regular interval. The interval is defined by [CWinApp::m_nAutosaveInterval](#cwinapp__m_nautosaveinterval).|  \n|- `AFX_RESTART_MANAGER_REOPEN_PREVIOUS_FILES`|The restart manager opens previously open documents after restarting the application from an unexpected exit. The [CDataRecoveryHandler Class](../../mfc/reference/cdatarecoveryhandler-class.md) handles storing the list of open documents and restoring them.|  \n|- `AFX_RESTART_MANAGER_RESTORE_AUTOSAVED_FILES`|The restart manager prompts the user to restore autosaved files after restarting the application. The `CDataRecoveryHandler` class queries the user.|  \n|- `AFX_RESTART_MANAGER_SUPPORT_NO_AUTOSAVE`|The union of `AFX_RESTART_MANAGER_SUPPORT_RESTART`, `AFX_RESTART_MANAGER_SUPPORT_RECOVER`, and `AFX_RESTART_MANAGER_REOPEN_PREVIOUS_FILES`.|  \n|- `AFX_RESTART_MANAGER_SUPPORT_ALL_ASPECTS`|The union of `AFX_RESTART_MANAGER_SUPPORT_NO_AUTOSAVE`, `AFX_RESTART_MANAGER_AUTOSAVE_AT_RESTART`, `AFX_RESTART_MANAGER_AUTOSAVE_AT_INTERVAL`, and `AFX_RESTART_MANAGER_RESTORE_AUTOSAVED_FILES`.|  \n|- `AFX_RESTART_MANAGER_SUPPORT_RESTART_ASPECTS`|The union of `AFX_RESTART_MANAGER_SUPPORT_RESTART`, `AFX_RESTART_MANAGER_AUTOSAVE_AT_RESTART`, `AFX_RESTART_MANAGER_REOPEN_PREVIOUS_FILES`, and `AFX_RESTART_MANAGER_RESTORE_AUTOSAVED_FILES`.|  \n|- `AFX_RESTART_MANAGER_SUPPORT_RECOVERY_ASPECTS`|The union of `AFX_RESTART_MANAGER_SUPPORT_RECOVERY`, `AFX_RESTART_MANAGER_AUTOSAVE_AT_INTERVAL`, `AFX_RESTART_MANAGER_REOPEN_PREVIOUS_FILES`, and `AFX_RESTART_MANAGER_RESTORE_AUTOSAVED_FILES`.|  \n  \n##  <a name=\"cwinapp__m_ehelptype\"></a>  CWinApp::m_eHelpType  \n The type of this data member is the enumerated type **AFX_HELP_TYPE**, which is defined within the `CWinApp` class.  \n  \n```  \nAFX_HELP_TYPE m_eHelpType;  \n```  \n  \n### Remarks  \n The **AFX_HELP_TYPE** enumeration is defined as follows:  \n  \n `enum AFX_HELP_TYPE`  \n  \n `{`  \n  \n `afxWinHelp = 0,`  \n  \n `afxHTMLHelp = 1`  \n  \n `};`  \n  \n-   To set the application's help to HTML Help, call [SetHelpMode](#cwinapp__sethelpmode) and specify **afxHTMLHelp**.  \n  \n-   To set the application's help to WinHelp, call `SetHelpMode` and specify **afxWinHelp**.  \n  \n##  <a name=\"cwinapp__m_hinstance\"></a>  CWinApp::m_hInstance  \n Corresponds to the `hInstance` parameter passed by Windows to `WinMain`.  \n  \n```  \nHINSTANCE m_hInstance;  \n```  \n  \n### Remarks  \n The `m_hInstance` data member is a handle to the current instance of the application running under Windows. This is returned by the global function [AfxGetInstanceHandle](application-information-and-management.md#afxgetinstancehandle). `m_hInstance` is a public variable of type `HINSTANCE`.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#55](../../mfc/reference/codesnippet/cpp/cwinapp-class_15.cpp)]  \n  \n##  <a name=\"cwinapp__m_lpcmdline\"></a>  CWinApp::m_lpCmdLine  \n Corresponds to the `lpCmdLine` parameter passed by Windows to `WinMain`.  \n  \n```  \nLPTSTR m_lpCmdLine;  \n```  \n  \n### Remarks  \n Points to a null-terminated string that specifies the command line for the application. Use `m_lpCmdLine` to access any command-line arguments the user entered when the application was started. `m_lpCmdLine` is a public variable of type `LPTSTR`.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#52](../../mfc/reference/codesnippet/cpp/cwinapp-class_16.cpp)]  \n  \n##  <a name=\"cwinapp__m_nautosaveinterval\"></a>  CWinApp::m_nAutosaveInterval  \n The length of time in milliseconds between autosaves.  \n  \n```  \nint m_nAutosaveInterval;  \n```  \n  \n### Remarks  \n You can configure the restart manager to autosave open documents at set intervals. If your application does not autosave files, this parameter has no effect.  \n  \n##  <a name=\"cwinapp__m_ncmdshow\"></a>  CWinApp::m_nCmdShow  \n Corresponds to the `nCmdShow` parameter passed by Windows to `WinMain`.  \n  \n```  \nint m_nCmdShow;  \n```  \n  \n### Remarks  \n You should pass `m_nCmdShow` as an argument when you call [CWnd::ShowWindow](../../mfc/reference/cwnd-class.md#cwnd__showwindow) for your application's main window. `m_nCmdShow` is a public variable of type `int`.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#56](../../mfc/reference/codesnippet/cpp/cwinapp-class_17.cpp)]  \n  \n##  <a name=\"cwinapp__m_pactivewnd\"></a>  CWinApp::m_pActiveWnd  \n Use this data member to store a pointer to the main window of the OLE container application that has your OLE server application in-place activated.  \n  \n### Remarks  \n If this data member is **NULL**, the application is not in-place active.  \n  \n The framework sets this member variable when the frame window is in-place activated by an OLE container application.  \n  \n##  <a name=\"cwinapp__m_pdatarecoveryhandler\"></a>  CWinApp::m_pDataRecoveryHandler  \n Pointer to the data recovery handler for the application.  \n  \n```  \nCDataRecoveryHandler* m_pDataRecoveryHandler;  \n```  \n  \n### Remarks  \n The data recovery handler of an application monitors open documents and autosaves them. The framework uses the data recovery handler to restore autosaved files when an application restarts after it exits unexpectedly. For more information, see [CDataRecoveryHandler Class](../../mfc/reference/cdatarecoveryhandler-class.md).  \n  \n##  <a name=\"cwinapp__m_pszappname\"></a>  CWinApp::m_pszAppName  \n Specifies the name of the application.  \n  \n```  \nLPCTSTR m_pszAppName;  \n```  \n  \n### Remarks  \n The application name can come from the parameter passed to the [CWinApp](#cwinapp__cwinapp) constructor, or, if not specified, to the resource string with the ID of **AFX_IDS_APP_TITLE**. If the application name is not found in the resource, it comes from the program's .EXE filename.  \n  \n Returned by the global function [AfxGetAppName](application-information-and-management.md#afxgetappname). `m_pszAppName` is a public variable of type **const char\\***.  \n  \n> [!NOTE]\n>  If you assign a value to `m_pszAppName`, it must be dynamically allocated on the heap. The `CWinApp` destructor calls **free**( ) with this pointer. You many want to use the `_tcsdup`( ) run-time library function to do the allocating. Also, free the memory associated with the current pointer before assigning a new value. For example:  \n  \n [!code-cpp[NVC_MFCWindowing#57](../../mfc/reference/codesnippet/cpp/cwinapp-class_18.cpp)]  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#65](../../mfc/reference/codesnippet/cpp/cwinapp-class_19.cpp)]  \n  \n##  <a name=\"cwinapp__m_pszexename\"></a>  CWinApp::m_pszExeName  \n Contains the name of the application's executable file without an extension.  \n  \n```  \nLPCTSTR m_pszExeName;  \n```  \n  \n### Remarks  \n Unlike [m_pszAppName](#cwinapp__m_pszappname), this name cannot contain blanks. `m_pszExeName` is a public variable of type **const char\\***.  \n  \n> [!NOTE]\n>  If you assign a value to `m_pszExeName`, it must be dynamically allocated on the heap. The `CWinApp` destructor calls **free**( ) with this pointer. You many want to use the `_tcsdup`( ) run-time library function to do the allocating. Also, free the memory associated with the current pointer before assigning a new value. For example:  \n  \n [!code-cpp[NVC_MFCWindowing#58](../../mfc/reference/codesnippet/cpp/cwinapp-class_20.cpp)]  \n  \n##  <a name=\"cwinapp__m_pszhelpfilepath\"></a>  CWinApp::m_pszHelpFilePath  \n Contains the path to the application's Help file.  \n  \n```  \nLPCTSTR m_pszHelpFilePath;  \n```  \n  \n### Remarks  \n By default, the framework initializes `m_pszHelpFilePath` to the name of the application with \".HLP\" appended. To change the name of the help file, set `m_pszHelpFilePath` to point to a string that contains the complete name of the desired help file. A convenient place to do this is in the application's [InitInstance](#cwinapp__initinstance) function. `m_pszHelpFilePath` is a public variable of type **const char\\***.  \n  \n> [!NOTE]\n>  If you assign a value to `m_pszHelpFilePath`, it must be dynamically allocated on the heap. The `CWinApp` destructor calls **free**( ) with this pointer. You many want to use the `_tcsdup`( ) run-time library function to do the allocating. Also, free the memory associated with the current pointer before assigning a new value. For example:  \n  \n [!code-cpp[NVC_MFCWindowing#59](../../mfc/reference/codesnippet/cpp/cwinapp-class_21.cpp)]  \n  \n##  <a name=\"cwinapp__m_pszprofilename\"></a>  CWinApp::m_pszProfileName  \n Contains the name of the application's .INI file.  \n  \n```  \nLPCTSTR m_pszProfileName;  \n```  \n  \n### Remarks  \n `m_pszProfileName` is a public variable of type **const char\\***.  \n  \n> [!NOTE]\n>  If you assign a value to `m_pszProfileName`, it must be dynamically allocated on the heap. The `CWinApp` destructor calls **free**( ) with this pointer. You many want to use the `_tcsdup`( ) run-time library function to do the allocating. Also, free the memory associated with the current pointer before assigning a new value. For example:  \n  \n [!code-cpp[NVC_MFCWindowing#60](../../mfc/reference/codesnippet/cpp/cwinapp-class_22.cpp)]  \n  \n##  <a name=\"cwinapp__m_pszregistrykey\"></a>  CWinApp::m_pszRegistryKey  \n Used to determine where, in the registry or INI file, application profile settings are stored.  \n  \n```  \nLPCTSTR m_pszRegistryKey;  \n```  \n  \n### Remarks  \n Normally, this data member is treated as read-only.  \n  \n-   The value is stored to a registry key. The name for the application profile setting is appended to the following registry key: HKEY_CURRENT_USER/Software/LocalAppWizard-Generated/.  \n  \n If you assign a value to `m_pszRegistryKey`, it must be dynamically allocated on the heap. The `CWinApp` destructor calls **free**( ) with this pointer. You many want to use the `_tcsdup`( ) run-time library function to do the allocating. Also, free the memory associated with the current pointer before assigning a new value. For example:  \n  \n [!code-cpp[NVC_MFCWindowing#61](../../mfc/reference/codesnippet/cpp/cwinapp-class_23.cpp)]  \n  \n##  <a name=\"cwinapp__m_pszappid\"></a>  CWinApp::m_pszAppID  \n Application User Model ID.  \n  \n```  \nLPCTSTR m_pszAppID;  \n```  \n  \n### Remarks  \n  \n##  <a name=\"cwinapp__oncontexthelp\"></a>  CWinApp::OnContextHelp  \n Handles SHIFT+F1 Help within the application.  \n  \n```  \nafx_msg void OnContextHelp();\n```  \n  \n### Remarks  \n You must add an `ON_COMMAND( ID_CONTEXT_HELP, OnContextHelp )` statement to your `CWinApp` class message map and also add an accelerator table entry, typically SHIFT+F1, to enable this member function.  \n  \n `OnContextHelp` puts the application into Help mode. The cursor changes to an arrow and a question mark, and the user can then move the mouse pointer and press the left mouse button to select a dialog box, window, menu, or command button. This member function retrieves the Help context of the object under the cursor and calls the Windows function WinHelp with that Help context.  \n  \n##  <a name=\"cwinapp__onddecommand\"></a>  CWinApp::OnDDECommand  \n Called by the framework when the main frame window receives a DDE execute message.  \n  \n```  \nvirtual BOOL OnDDECommand(LPTSTR lpszCommand);\n```  \n  \n### Parameters  \n *lpszCommand*  \n Points to a DDE command string received by the application.  \n  \n### Return Value  \n Nonzero if the command is handled; otherwise 0.  \n  \n### Remarks  \n The default implementation checks whether the command is a request to open a document and, if so, opens the specified document. The Windows File Manager usually sends such DDE command strings when the user double-clicks a data file. Override this function to handle other DDE execute commands, such as the command to print.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#48](../../mfc/reference/codesnippet/cpp/cwinapp-class_24.cpp)]  \n  \n##  <a name=\"cwinapp__onfilenew\"></a>  CWinApp::OnFileNew  \n Implements the `ID_FILE_NEW` command.  \n  \n```  \nafx_msg void OnFileNew();\n```  \n  \n### Remarks  \n You must add an `ON_COMMAND( ID_FILE_NEW, OnFileNew )` statement to your `CWinApp` class message map to enable this member function. If enabled, this function handles execution of the File New command.  \n  \n See [Technical Note 22](../../mfc/tn022-standard-commands-implementation.md) for information on default behavior and guidance on how to override this member function.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#49](../../mfc/reference/codesnippet/cpp/cwinapp-class_25.cpp)]  \n  \n [!code-cpp[NVC_MFCWindowing#50](../../mfc/reference/codesnippet/cpp/cwinapp-class_26.cpp)]  \n  \n##  <a name=\"cwinapp__onfileopen\"></a>  CWinApp::OnFileOpen  \n Implements the `ID_FILE_OPEN` command.  \n  \n```  \nafx_msg void OnFileOpen();\n```  \n  \n### Remarks  \n You must add an `ON_COMMAND( ID_FILE_OPEN, OnFileOpen )` statement to your `CWinApp` class message map to enable this member function. If enabled, this function handles execution of the File Open command.  \n  \n For information on default behavior and guidance on how to override this member function, see [Technical Note 22](../../mfc/tn022-standard-commands-implementation.md).  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#49](../../mfc/reference/codesnippet/cpp/cwinapp-class_25.cpp)]  \n  \n [!code-cpp[NVC_MFCWindowing#50](../../mfc/reference/codesnippet/cpp/cwinapp-class_26.cpp)]  \n  \n##  <a name=\"cwinapp__onfileprintsetup\"></a>  CWinApp::OnFilePrintSetup  \n Implements the **ID_FILE_PRINT_SETUP** command.  \n  \n```  \nafx_msg void OnFilePrintSetup();\n```  \n  \n### Remarks  \n You must add an `ON_COMMAND( ID_FILE_PRINT_SETUP, OnFilePrintSetup )` statement to your `CWinApp` class message map to enable this member function. If enabled, this function handles execution of the File Print command.  \n  \n For information on default behavior and guidance on how to override this member function, see [Technical Note 22](../../mfc/tn022-standard-commands-implementation.md).  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#49](../../mfc/reference/codesnippet/cpp/cwinapp-class_25.cpp)]  \n  \n [!code-cpp[NVC_MFCWindowing#50](../../mfc/reference/codesnippet/cpp/cwinapp-class_26.cpp)]  \n  \n##  <a name=\"cwinapp__onhelp\"></a>  CWinApp::OnHelp  \n Handles F1 Help within the application (using the current context).  \n  \n```  \nafx_msg void OnHelp();\n```  \n  \n### Remarks  \n Usually you will also add an accelerator-key entry for the F1 key. Enabling the F1 key is only a convention, not a requirement.  \n  \n You must add an `ON_COMMAND( ID_HELP, OnHelp )` statement to your `CWinApp` class message map to enable this member function. If enabled, called by the framework when the user presses the F1 key.  \n  \n The default implementation of this message-handler function determines the Help context that corresponds to the current window, dialog box, or menu item and then calls WINHELP.EXE. If no context is currently available, the function uses the default context.  \n  \n Override this member function to set the Help context to something other than the window, dialog box, menu item, or toolbar button that currently has the focus. Call `WinHelp` with the desired Help context ID.  \n  \n##  <a name=\"cwinapp__onhelpfinder\"></a>  CWinApp::OnHelpFinder  \n Handles the **ID_HELP_FINDER** and **ID_DEFAULT_HELP** commands.  \n  \n```  \nafx_msg void OnHelpFinder();\n```  \n  \n### Remarks  \n You must add an `ON_COMMAND( ID_HELP_FINDER, OnHelpFinder )` statement to your `CWinApp` class message map to enable this member function. If enabled, the framework calls this message-handler function when the user of your application selects the Help Finder command to invoke `WinHelp` with the standard **HELP_FINDER** topic.  \n  \n##  <a name=\"cwinapp__onhelpindex\"></a>  CWinApp::OnHelpIndex  \n Handles the **ID_HELP_INDEX** command and provides a default Help topic.  \n  \n```  \nafx_msg void OnHelpIndex();\n```  \n  \n### Remarks  \n You must add an `ON_COMMAND( ID_HELP_INDEX, OnHelpIndex )` statement to your `CWinApp` class message map to enable this member function. If enabled, the framework calls this message-handler function when the user of your application selects the Help Index command to invoke `WinHelp` with the standard **HELP_INDEX** topic.  \n  \n##  <a name=\"cwinapp__onhelpusing\"></a>  CWinApp::OnHelpUsing  \n Handles the **ID_HELP_USING** command.  \n  \n```  \nafx_msg void OnHelpUsing();\n```  \n  \n### Remarks  \n You must add an `ON_COMMAND( ID_HELP_USING, OnHelpUsing )` statement to your `CWinApp` class message map to enable this member function. The framework calls this message-handler function when the user of your application selects the Help Using command to invoke the `WinHelp` application with the standard **HELP_HELPONHELP** topic.  \n  \n##  <a name=\"cwinapp__onidle\"></a>  CWinApp::OnIdle  \n Override this member function to perform idle-time processing.  \n  \n```  \nvirtual BOOL OnIdle(LONG lCount);\n```  \n  \n### Parameters  \n `lCount`  \n A counter incremented each time `OnIdle` is called when the application's message queue is empty. This count is reset to 0 each time a new message is processed. You can use the `lCount` parameter to determine the relative length of time the application has been idle without processing a message.  \n  \n### Return Value  \n Nonzero to receive more idle processing time; 0 if no more idle time is needed.  \n  \n### Remarks  \n `OnIdle` is called in the default message loop when the application's message queue is empty. Use your override to call your own background idle-handler tasks.  \n  \n `OnIdle` should return 0 to indicate that no idle processing time is required. The `lCount` parameter is incremented each time `OnIdle` is called when the message queue is empty and resets to 0 each time a new message is processed. You can call your different idle routines based on this count.  \n  \n The following summarizes idle loop processing:  \n  \n1.  If the message loop in the Microsoft Foundation Class Library checks the message queue and finds no pending messages, it calls `OnIdle` for the application object and supplies 0 as the `lCount` argument.  \n  \n2. `OnIdle` performs some processing and returns a nonzero value to indicate it should be called again to do further processing.  \n  \n3.  The message loop checks the message queue again. If no messages are pending, it calls `OnIdle` again, incrementing the `lCount` argument.  \n  \n4.  Eventually, `OnIdle` finishes processing all its idle tasks and returns 0. This tells the message loop to stop calling `OnIdle` until the next message is received from the message queue, at which point the idle cycle restarts with the argument set to 0.  \n  \n Do not perform lengthy tasks during `OnIdle` because your application cannot process user input until `OnIdle` returns.  \n  \n> [!NOTE]\n>  The default implementation of `OnIdle` updates command user-interface objects such as menu items and toolbar buttons, and it performs internal data structure cleanup. Therefore, if you override `OnIdle`, you must call `CWinApp::OnIdle` with the `lCount` in your overridden version. First call all base-class idle processing (that is, until the base class `OnIdle` returns 0). If you need to perform work before the base-class processing completes, review the base-class implementation to select the proper `lCount` during which to do your work.  \n  \n If you do not want `OnIdle` to be called whenever a message is retrieved from the message queue, you can override the [CWinThreadIsIdleMessage](../../mfc/reference/cwinthread-class.md#cwinthread__isidlemessage). If an application has set a very short timer, or if the system is sending the **WM_SYSTIMER** message, then `OnIdle` will be called repeatedly, and degrade performance.  \n  \n### Example  \n The following two examples show how to use `OnIdle`. The first example processes two idle tasks using the `lCount` argument to prioritize the tasks. The first task is high priority, and you should do it whenever possible. The second task is less important and should be done only when there is a long pause in user input. Note the call to the base-class version of `OnIdle`. The second example manages a group of idle tasks with different priorities.  \n  \n [!code-cpp[NVC_MFCWindowing#51](../../mfc/reference/codesnippet/cpp/cwinapp-class_27.cpp)]  \n  \n##  <a name=\"cwinapp__opendocumentfile\"></a>  CWinApp::OpenDocumentFile  \n The framework calls this method to open the named [CDocument](../../mfc/reference/cdocument-class.md) file for the application.  \n  \n```  \n \nvirtual CDocument* OpenDocumentFile(\nLPCTSTR lpszFileName  \nBOOL bAddToMRU = TRUE);\n```  \n  \n### Parameters  \n [in] `lpszFileName`  \n The name of the file to be opened.  \n  \n [in] `bAddToMRU`  \n `TRUE` indicates the document is one of the most recent files; `FALSE` indicates the document is not one of the most recent files.  \n  \n### Return Value  \n A pointer to a `CDocument` if successful; otherwise `NULL`.  \n  \n### Remarks  \n If a document that has that name is already open, the first frame window that contains that document will get the focus. If an application supports multiple document templates, the framework uses the file name extension to find the appropriate document template to try to load the document. If successful, the document template then creates a frame window and view for the document.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#52](../../mfc/reference/codesnippet/cpp/cwinapp-class_16.cpp)]  \n  \n##  <a name=\"cwinapp__parsecommandline\"></a>  CWinApp::ParseCommandLine  \n Call this member function to parse the command line and send the parameters, one at a time, to [CCommandLineInfo::ParseParam](../../mfc/reference/ccommandlineinfo-class.md#ccommandlineinfo__parseparam).  \n  \n```  \nvoid ParseCommandLine(CCommandLineInfo& rCmdInfo);\n```  \n  \n### Parameters  \n `rCmdInfo`  \n A reference to a [CCommandLineInfo](../../mfc/reference/ccommandlineinfo-class.md) object.  \n  \n### Remarks  \n When you start a new MFC project using the Application Wizard, the Application Wizard will create a local instance of `CCommandLineInfo`, and then call `ProcessShellCommand` and `ParseCommandLine` in the [InitInstance](#cwinapp__initinstance) member function. A command line follows the route described below:  \n  \n1.  After being created in `InitInstance`, the `CCommandLineInfo` object is passed to `ParseCommandLine`.  \n  \n2. `ParseCommandLine` then calls `CCommandLineInfo::ParseParam` repeatedly, once for each parameter.  \n  \n3. `ParseParam` fills the `CCommandLineInfo` object, which is then passed to [ProcessShellCommand](#cwinapp__processshellcommand).  \n  \n4. `ProcessShellCommand` handles the command-line arguments and flags.  \n  \n Note that you can call `ParseCommandLine` directly as needed.  \n  \n For a description of the command-line flags, see [CCommandLineInfo::m_nShellCommand](../../mfc/reference/ccommandlineinfo-class.md#ccommandlineinfo__m_nshellcommand).  \n  \n##  <a name=\"cwinapp__pretranslatemessage\"></a>  CWinApp::PreTranslateMessage  \n Override this function to filter window messages before they are dispatched to the Windows functions [TranslateMessage](http://msdn.microsoft.com/library/windows/desktop/ms644955) and [DispatchMessage](http://msdn.microsoft.com/library/windows/desktop/ms644934) The default implementation performs accelerator-key translation, so you must call the `CWinApp::PreTranslateMessage` member function in your overridden version.  \n  \n```  \nvirtual BOOL PreTranslateMessage(MSG* pMsg);\n```  \n  \n### Parameters  \n `pMsg`  \n A pointer to a [MSG](../../mfc/reference/msg-structure1.md) structure that contains the message to process.  \n  \n### Return Value  \n Nonzero if the message was fully processed in `PreTranslateMessage` and should not be processed further. Zero if the message should be processed in the normal way.  \n  \n##  <a name=\"cwinapp__processmessagefilter\"></a>  CWinApp::ProcessMessageFilter  \n The framework's hook function calls this member function to filter and respond to certain Windows messages.  \n  \n```  \nvirtual BOOL ProcessMessageFilter(\n    int code,  \n    LPMSG lpMsg);\n```  \n  \n### Parameters  \n `code`  \n Specifies a hook code. This member function uses the code to determine how to process `lpMsg.`  \n  \n `lpMsg`  \n A pointer to a Windows [MSG](../../mfc/reference/msg-structure1.md) structure.  \n  \n### Return Value  \n Nonzero if the message is processed; otherwise 0.  \n  \n### Remarks  \n A hook function processes events before they are sent to the application's normal message processing.  \n  \n If you override this advanced feature, be sure to call the base-class version to maintain the framework's hook processing.  \n  \n##  <a name=\"cwinapp__processshellcommand\"></a>  CWinApp::ProcessShellCommand  \n This member function is called by [InitInstance](#cwinapp__initinstance) to accept the parameters passed from the `CCommandLineInfo` object identified by `rCmdInfo`, and perform the indicated action.  \n  \n```  \nBOOL ProcessShellCommand(CCommandLineInfo& rCmdInfo);\n```  \n  \n### Parameters  \n `rCmdInfo`  \n A reference to a [CCommandLineInfo](../../mfc/reference/ccommandlineinfo-class.md) object.  \n  \n### Return Value  \n Nonzero if the shell command is processed successfully. If 0, return **FALSE** from [InitInstance](#cwinapp__initinstance).  \n  \n### Remarks  \n When you start a new MFC project using the Application Wizard, the Application Wizard will create a local instance of `CCommandLineInfo`, and then call `ProcessShellCommand` and [ParseCommandLine](#cwinapp__parsecommandline) in the `InitInstance` member function. A command line follows the route described below:  \n  \n1.  After being created in `InitInstance`, the `CCommandLineInfo` object is passed to `ParseCommandLine`.  \n  \n2. `ParseCommandLine` then calls [CCommandLineInfo::ParseParam](../../mfc/reference/ccommandlineinfo-class.md#ccommandlineinfo__parseparam) repeatedly, once for each parameter.  \n  \n3. `ParseParam` fills the `CCommandLineInfo` object, which is then passed to `ProcessShellCommand`.  \n  \n4. `ProcessShellCommand` handles the command-line arguments and flags.  \n  \n The data members of the `CCommandLineInfo` object, identified by [CCommandLineInfo::m_nShellCommand](../../mfc/reference/ccommandlineinfo-class.md#ccommandlineinfo__m_nshellcommand), are of the following enumerated type, which is defined within the `CCommandLineInfo` class.  \n  \n `enum {`  \n  \n `FileNew,`  \n  \n `FileOpen,`  \n  \n `FilePrint,`  \n  \n `FilePrintTo,`  \n  \n `FileDDE,`  \n  \n `};`  \n  \n For a brief description of each of these values, see `CCommandLineInfo::m_nShellCommand`.  \n  \n##  <a name=\"cwinapp__processwndprocexception\"></a>  CWinApp::ProcessWndProcException  \n The framework calls this member function whenever the handler does not catch an exception thrown in one of your application's message or command handlers.  \n  \n```  \nvirtual LRESULT ProcessWndProcException(\n    CException* e,  \n    const MSG* pMsg);\n```  \n  \n### Parameters  \n *e*  \n A pointer to an uncaught exception.  \n  \n `pMsg`  \n A [MSG](../../mfc/reference/msg-structure1.md) structure that contains information about the windows message that caused the framework to throw an exception.  \n  \n### Return Value  \n The value that should be returned to Windows. Normally this is 0L for windows messages, 1L ( **TRUE**) for command messages.  \n  \n### Remarks  \n Do not call this member function directly.  \n  \n The default implementation of this member function creates a message box. If the uncaught exception originates with a menu, toolbar, or accelerator command failure, the message box displays a \"Command failed\" message; otherwise, it displays an \"Internal application error\" message.  \n  \n Override this member function to provide global handling of your exceptions. Only call the base functionality if you wish the message box to be displayed.  \n  \n##  <a name=\"cwinapp__register\"></a>  CWinApp::Register  \n Performs any registration tasks not handled by `RegisterShellFileTypes`.  \n  \n```  \nvirtual BOOL Register();\n```  \n  \n### Return Value  \n Nonzero on success; otherwise 0.  \n  \n### Remarks  \n The default implementation simply returns TRUE. Override this function to provide any customized registration steps.  \n  \n##  <a name=\"cwinapp__registershellfiletypes\"></a>  CWinApp::RegisterShellFileTypes  \n Call this member function to register all of your application's document types with the Windows File Manager.  \n  \n```  \n \nvoid RegisterShellFileTypes(\nBOOL bCompat = FALSE);\n```  \n  \n### Parameters  \n [in] `bCompat`  \n `TRUE` adds registration entries for shell commands Print and Print To, allowing a user to print files directly from the shell, or by dragging the file to a printer object. It also adds a DefaultIcon key. By default, this parameter is `FALSE` for backward compatibility.  \n  \n### Remarks  \n This allows the user to open a data file created by your application by double-clicking it from within File Manager. Call `RegisterShellFileTypes` after you call [AddDocTemplate](#cwinapp__adddoctemplate) for each of the document templates in your application. Also call the [EnableShellOpen](#cwinapp__enableshellopen) member function when you call `RegisterShellFileTypes`.  \n  \n `RegisterShellFileTypes` iterates through the list of [CDocTemplate](../../mfc/reference/cdoctemplate-class.md) objects that the application maintains and, for each document template, adds entries to the registration database that Windows maintains for file associations. File Manager uses these entries to open a data file when the user double-clicks it. This eliminates the need to ship a .REG file with your application.  \n  \n> [!NOTE]\n> `RegisterShellFileTypes` only works if the user runs the program with administrator rights. If the program does not have administrator rights, it cannot alter registry keys.  \n  \n If the registration database already associates a given filename extension with another file type, no new association is created. See the `CDocTemplate` class for the format of strings necessary to register this information.  \n  \n##  <a name=\"cwinapp__registerwithrestartmanager\"></a>  CWinApp::RegisterWithRestartManager  \n Registers the application with the restart manager.  \n  \n```  \n \nvirtual HRESULT RegisterWithRestartManager(\nBOOL bRegisterRecoveryCallback,  \nconst CString& strRestartIdentifier);\n\n \nvirtual HRESULT RegisterWithRestartManager(\nLPCWSTR pwzCommandLineArgs,  \nDWORD dwRestartFlags,  \nAPPLICATION_RECOVERY_CALLBACK pRecoveryCallback,  \nLPVOID lpvParam,  \nDWORD dwPingInterval,  \nDWORD dwCallbackFlags);\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|[in] `bRegisterRecoveryCallback`|`TRUE` indicates that this instance of the application uses a recovery callback function; `FALSE` indicates that it does not. The framework calls the recovery callback function when the application exits unexpectedly. For more information, see [CWinApp::ApplicationRecoveryCallback](#cwinapp__applicationrecoverycallback).|  \n|[in] `strRestartIdentifier`|The unique string that identifies this instance of the restart manager. The restart manager identifier is unique for each instance of an application.|  \n|[in] `pwzCommandLineArgs`|A string that contains any extra arguments from the command line.|  \n|[in] `dwRestartFlags`|Optional flags for the restart manager. For more information, see the Remarks section.|  \n|[in] `pRecoveryCallback`|The recovery callback function. This function must take a `LPVOID` parameter as input and return a `DWORD`. The default recovery callback function is `CWinApp::ApplicationRecoveryCallback`.|  \n|[in] `lpvParam`|The input parameter for the recovery callback function. For more information, see [CWinApp::ApplicationRecoveryCallback](#cwinapp__applicationrecoverycallback).|  \n|[in] `dwPingInterval`|The length of time that the restart manager waits for the recovery callback function to return. This parameter is in milliseconds.|  \n|[in] `dwCallbackFlags`|Flags passed to the recovery callback function. Reserved for future use.|  \n  \n### Return Value  \n `S_OK` if the method is successful; otherwise an error code.  \n  \n### Remarks  \n If your application uses the default MFC implementation for autosaving files, you should use the simple version of `RegisterWithRestartManager`. Use the complex version of `RegisterWithRestartManager` if you want to customize the autosave behavior of your application.  \n  \n If you call this method with an empty string for `strRestartIdentifier`, `RegisterWithRestartManager` creates a unique identifier string for this instance of the restart manager.  \n  \n When an application exits unexpectedly, the restart manager restarts the application from the command line and provides the unique restart identifier as an optional argument. In this scenario, the framework calls `RegisterWithRestartManager` two times. The first call comes from [CWinApp::InitInstance](#cwinapp__initinstance) with an empty string for the string identifier. Then, the method [CWinApp::ProcessShellCommand](#cwinapp__processshellcommand) calls `RegisterWithRestartManager` with the unique restart identifier.  \n  \n After you register an application with the restart manager, the restart manager monitors the application. If the application exits unexpectedly, the restart manager calls the recovery callback function during the shut down process. The restart manager waits the `dwPingInterval` for a response from the recovery callback function. If the recovery callback function does not respond within this time, the application exits without executing the recovery callback function.  \n  \n By default, the dwRestartFlags are not supported but are provided for future use. The possible values for `dwRestartFlags` are as follows:  \n  \n- `RESTART_NO_CRASH`  \n  \n- `RESTART_NO_HANG`  \n  \n- `RESTART_NO_PATCH`  \n  \n- `RESTART_NO_REBOOT`  \n  \n##  <a name=\"cwinapp__reopenpreviousfilesatrestart\"></a>  CWinApp::ReopenPreviousFilesAtRestart  \n Determines whether the restart manager reopens the files that were open when the application exited unexpectedly.  \n  \n```  \nvirtual BOOL ReopenPreviousFilesAtRestart() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` indicates the restart manager reopens the previously open files; `FALSE` indicates the restart manager does not.  \n  \n##  <a name=\"cwinapp__restartinstance\"></a>  CWinApp::RestartInstance  \n Handles an application restart initiated by the restart manager.  \n  \n```  \nvirtual BOOL CWinApp::RestartInstance();\n```  \n  \n### Return Value  \n `TRUE` if the data recovery handler opens previously open documents; `FALSE` if the data recovery handler has an error or if there are no previously open documents.  \n  \n### Remarks  \n When the restart manager restarts an application, the framework calls this method. This method retrieves the data recovery handler and restores the autosaved files. This method calls [CDataRecoveryHandler::RestoreAutosavedDocuments](../../mfc/reference/cdatarecoveryhandler-class.md#cdatarecoveryhandler__restoreautosaveddocuments) to determine whether the user wants to restore the autosaved files.  \n  \n This method returns `FALSE` if the [CDataRecoveryHandler](../../mfc/reference/cdatarecoveryhandler-class.md) determines that there were no open documents. If there were no open documents, the application starts ordinarily.  \n  \n##  <a name=\"cwinapp__restoreautosavedfilesatrestart\"></a>  CWinApp::RestoreAutosavedFilesAtRestart  \n Determines whether the restart manager restores the autosaved files when it restarts the application.  \n  \n```  \nvirtual BOOL RestoreAutosavedFilesAtRestart() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` indicates the restart manager restores autosaved files; `FALSE` indicates the restart manager does not.  \n  \n##  <a name=\"cwinapp__run\"></a>  CWinApp::Run  \n Provides a default message loop.  \n  \n```  \nvirtual int Run();\n```  \n  \n### Return Value  \n An `int` value that is returned by `WinMain`.  \n  \n### Remarks  \n **Run** acquires and dispatches Windows messages until the application receives a **WM_QUIT** message. If the application's message queue currently contains no messages, **Run** calls [OnIdle](#cwinapp__onidle) to perform idle-time processing. Incoming messages go to the [PreTranslateMessage](#cwinapp__pretranslatemessage) member function for special processing and then to the Windows function **TranslateMessage** for standard keyboard translation; finally, the **DispatchMessage** Windows function is called.  \n  \n **Run** is rarely overridden, but you can override it to provide special behavior.  \n  \n##  <a name=\"cwinapp__runautomated\"></a>  CWinApp::RunAutomated  \n Call this function to determine whether the \" **/Automation**\" or \" **-Automation**\" option is present, which indicates whether the server application was launched by a client application.  \n  \n```  \nBOOL RunAutomated();\n```  \n  \n### Return Value  \n Nonzero if the option was found; otherwise 0.  \n  \n### Remarks  \n If present, the option is removed from the command line. For more information on OLE Automation, see the article [Automation Servers](../../mfc/automation-servers.md).  \n  \n##  <a name=\"cwinapp__runembedded\"></a>  CWinApp::RunEmbedded  \n Call this function to determine whether the \" **/Embedding**\" or \" **-Embedding**\" option is present, which indicates whether the server application was launched by a client application.  \n  \n```  \nBOOL RunEmbedded();\n```  \n  \n### Return Value  \n Nonzero if the option was found; otherwise 0.  \n  \n### Remarks  \n If present, the option is removed from the command line. For more information on embedding, see the article [Servers: Implementing a Server](../../mfc/servers-implementing-a-server.md).  \n  \n##  <a name=\"cwinapp__saveallmodified\"></a>  CWinApp::SaveAllModified  \n Called by the framework to save all documents when the application's main frame window is to be closed, or through a `WM_QUERYENDSESSION` message.  \n  \n```  \nvirtual BOOL SaveAllModified();\n```  \n  \n### Return Value  \n Nonzero if safe to terminate the application; 0 if not safe to terminate the application.  \n  \n### Remarks  \n The default implementation of this member function calls the [CDocument::SaveModified](../../mfc/reference/cdocument-class.md#cdocument__savemodified) member function in turn for all modified documents within the application.  \n  \n##  <a name=\"cwinapp__selectprinter\"></a>  CWinApp::SelectPrinter  \n Call this member function to select a specific printer, and release the printer that was previously selected in the Print Dialog box.  \n  \n```  \nvoid SelectPrinter(\n    HANDLE hDevNames,  \n    HANDLE hDevMode,  \n    BOOL bFreeOld = TRUE);\n```  \n  \n### Parameters  \n `hDevNames`  \n A handle to a [DEVNAMES](../../mfc/reference/devnames-structure.md) structure that identifies the driver, device, and output port names of a specific printer.  \n  \n `hDevMode`  \n A handle to a [DEVMODE](http://msdn.microsoft.com/library/windows/desktop/dd183565) structure that specifies information about the device initialization and environment of a printer.  \n  \n *bFreeOld*  \n Frees the previously-selected printer.  \n  \n### Remarks  \n If both `hDevMode` and `hDevNames` are **NULL**, `SelectPrinter` uses the current default printer.  \n  \n##  <a name=\"cwinapp__sethelpmode\"></a>  CWinApp::SetHelpMode  \n Sets the application's help type.  \n  \n```  \nvoid SetHelpMode(AFX_HELP_TYPE eHelpType);\n```  \n  \n### Parameters  \n `eHelpType`  \n Specifies the type of help to use. See [CWinApp::m_eHelpType](#cwinapp__m_ehelptype) for more information.  \n  \n### Remarks  \n Sets the application's Help type.  \n  \n To set your application's Help type to HTMLHelp, you can call [EnableHTMLHelp](#cwinapp__enablehtmlhelp). Once you call `EnableHTMLHelp`, your application must use HTMLHelp as its help application. If you want to change to use WinHelp, you can call `SetHelpMode` and set `eHelpType` to **afxWinHelp**.  \n  \n##  <a name=\"cwinapp__setregistrykey\"></a>  CWinApp::SetRegistryKey  \n Causes application settings to be stored in the registry instead of INI files.  \n  \n```  \nvoid SetRegistryKey(LPCTSTR lpszRegistryKey);\n\n \nvoid SetRegistryKey(UINT nIDRegistryKey);\n```  \n  \n### Parameters  \n *lpszRegistryKey*  \n Pointer to a string containing the name of the key.  \n  \n *nIDRegistryKey*  \n ID of a string resource containing the name of the registry key.  \n  \n### Remarks  \n This function sets *m_pszRegistryKey*, which is then used by the `GetProfileInt`, `GetProfileString`, `WriteProfileInt`, and `WriteProfileString` member functions of `CWinApp`. If this function has been called, the list of most recently-used (MRU) files is also stored in the registry. The registry key is usually the name of a company. It is stored in a key of the following form: HKEY_CURRENT_USER\\Software\\\\<company name\\>\\\\<application name\\>\\\\<section name\\>\\\\<value name\\>.  \n  \n##  <a name=\"cwinapp__supportsapplicationrecovery\"></a>  CWinApp::SupportsApplicationRecovery  \n Determines whether the restart manager recovers an application that exited unexpectedly.  \n  \n```  \nvirtual BOOL SupportsApplicationRecovery() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` indicates the restart manager recovers the application; `FALSE` indicates the restart manager does not.  \n  \n##  <a name=\"cwinapp__supportsautosaveatinterval\"></a>  CWinApp::SupportsAutosaveAtInterval  \n Determines whether the restart manager autosaves open documents at a regular interval.  \n  \n```  \nvirtual BOOL SupportsAutosaveAtInterval() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` indicates the restart manager autosaves open documents; `FALSE` indicates the restart manager does not.  \n  \n##  <a name=\"cwinapp__supportsautosaveatrestart\"></a>  CWinApp::SupportsAutosaveAtRestart  \n Determines whether the restart manager autosaves any open documents when the application restarts.  \n  \n```  \nvirtual BOOL SupportsAutosaveAtRestart() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` indicates the restart manager autosaves open documents when the application restarts; `FALSE` indicates the restart manager does not.  \n  \n##  <a name=\"cwinapp__supportsrestartmanager\"></a>  CWinApp::SupportsRestartManager  \n Determines whether the application supports the restart manager.  \n  \n```  \nvirtual BOOL SupportsRestartManager() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` indicates the application supports the restart manager; `FALSE` indicates the application does not.  \n  \n##  <a name=\"cwinapp__unregister\"></a>  CWinApp::Unregister  \n Unregisters all files registered by the application object.  \n  \n```  \nvirtual BOOL Unregister();\n```  \n  \n### Return Value  \n Nonzero on success; otherwise 0.  \n  \n### Remarks  \n The `Unregister` function undoes the registration performed by the application object and the [Register](#cwinapp__register) function. Normally, both functions are called implicitly by MFC and therefore will not appear in your code.  \n  \n Override this function to perform custom unregistration steps.  \n  \n##  <a name=\"cwinapp__unregistershellfiletypes\"></a>  CWinApp::UnregisterShellFileTypes  \n Call this member function to unregister all of your application's document types with the Windows File Manager.  \n  \n```  \nvoid UnregisterShellFileTypes();\n```  \n  \n##  <a name=\"cwinapp__winhelp\"></a>  CWinApp::WinHelp  \n Call this member function to invoke the WinHelp application.  \n  \n```  \nvirtual void WinHelp(\n    DWORD_PTR dwData,  \n    UINT nCmd = HELP_CONTEXT);\n```  \n  \n### Parameters  \n `dwData`  \n Specifies additional data. The value used depends on the value of the `nCmd` parameter.  \n  \n `nCmd`  \n Specifies the type of help requested. For a list of possible values and how they affect the `dwData` parameter, see the [WinHelp](http://msdn.microsoft.com/library/windows/desktop/bb762267) Windows function.  \n  \n### Remarks  \n The framework also calls this function to invoke the WinHelp application.  \n  \n The framework will automatically close the WinHelp application when your application terminates.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#53](../../mfc/reference/codesnippet/cpp/cwinapp-class_28.cpp)]  \n  \n##  <a name=\"cwinapp__writeprofilebinary\"></a>  CWinApp::WriteProfileBinary  \n Call this member function to write binary data into the specified section of the application's registry or .INI file.  \n  \n```  \nBOOL WriteProfileBinary(\n    LPCTSTR lpszSection,  \n    LPCTSTR lpszEntry,  \n    LPBYTE pData,  \n    UINT nBytes);\n```  \n  \n### Parameters  \n `lpszSection`  \n Points to a null-terminated string that specifies the section containing the entry. If the section does not exist, it is created. The name of the section is case independent; the string may be any combination of uppercase and lowercase letters.  \n  \n `lpszEntry`  \n Points to a null-terminated string that contains the entry into which the value is to be written. If the entry does not exist in the specified section, it is created.  \n  \n `pData`  \n Points to the data to be written.  \n  \n `nBytes`  \n Contains the number of bytes to be written.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Example  \n This example uses `CWinApp* pApp = AfxGetApp();` to get at the CWinApp class illustrating a way that `WriteProfileBinary` and `GetProfileBinary` can be used from any function in an MFC application.  \n  \n [!code-cpp[NVC_MFCWindowing#54](../../mfc/reference/codesnippet/cpp/cwinapp-class_29.cpp)]  \n  \n For another example, see the example for [CWinApp::GetProfileBinary](#cwinapp__getprofilebinary).  \n  \n##  <a name=\"cwinapp__writeprofileint\"></a>  CWinApp::WriteProfileInt  \n Call this member function to write the specified value into the specified section of the application's registry or .INI file.  \n  \n```  \nBOOL WriteProfileInt(\n    LPCTSTR lpszSection,  \n    LPCTSTR lpszEntry,  \n    int nValue);\n```  \n  \n### Parameters  \n `lpszSection`  \n Points to a null-terminated string that specifies the section containing the entry. If the section does not exist, it is created. The name of the section is case independent; the string may be any combination of uppercase and lowercase letters.  \n  \n `lpszEntry`  \n Points to a null-terminated string that contains the entry into which the value is to be written. If the entry does not exist in the specified section, it is created.  \n  \n `nValue`  \n Contains the value to be written.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Example  \n This example uses `CWinApp* pApp = AfxGetApp();` to get at the CWinApp class illustrating a way that `WriteProfileString`, `WriteProfileInt`, `GetProfileString`, and `GetProfileInt` can be used from any function in an MFC application.  \n  \n [!code-cpp[NVC_MFCWindowing#43](../../mfc/reference/codesnippet/cpp/cwinapp-class_9.cpp)]  \n  \n For another example, see the example for [CWinApp::GetProfileInt](#cwinapp__getprofileint).  \n  \n##  <a name=\"cwinapp__writeprofilestring\"></a>  CWinApp::WriteProfileString  \n Call this member function to write the specified string into the specified section of the application's registry or .INI file.  \n  \n```  \nBOOL WriteProfileString(\n    LPCTSTR lpszSection,  \n    LPCTSTR lpszEntry,  \n    LPCTSTR lpszValue);\n```  \n  \n### Parameters  \n `lpszSection`  \n Points to a null-terminated string that specifies the section containing the entry. If the section does not exist, it is created. The name of the section is case independent; the string may be any combination of uppercase and lowercase letters.  \n  \n `lpszEntry`  \n Points to a null-terminated string that contains the entry into which the value is to be written. If the entry does not exist in the specified section, it is created. If this parameter is `NULL`, the section specified by `lpszSection` is deleted.  \n  \n `lpszValue`  \n Points to the string to be written. If this parameter is `NULL`, the entry specified by the `lpszEntry` parameter is deleted.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#43](../../mfc/reference/codesnippet/cpp/cwinapp-class_9.cpp)]  \n  \n For another example, see the example for [CWinApp::GetProfileInt](#cwinapp__getprofileint).  \n  \n##  <a name=\"cwinapp__setappid\"></a>  CWinApp::SetAppID  \n Explicitly sets Application User Model ID for the application. This method should be called before any user interface is presented to the user (the best place is the application constructor).  \n  \n```  \n \nvoid SetAppID(\nLPCTSTR lpcszAppID);\n```  \n  \n### Parameters  \n `lpcszAppID`  \n Specifies the Application User Model ID.  \n  \n### Remarks  \n  \n## See Also  \n [CWinThread Class](../../mfc/reference/cwinthread-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [How to: Add Restart Manager Support](../../mfc/how-to-add-restart-manager-support.md)\n\n\n\n"}