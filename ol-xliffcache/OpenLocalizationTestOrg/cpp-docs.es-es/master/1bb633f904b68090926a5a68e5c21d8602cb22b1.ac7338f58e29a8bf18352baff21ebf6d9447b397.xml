{"nodes":[{"pos":[12,60],"content":"multimap::upper_bound (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"multimap::upper_bound (STL-CLR) | Microsoft Docs","pos":[0,48]}]},{"content":"multimap::upper_bound (STL/CLR)","pos":[650,681]},{"content":"Finds end of range that matches a specified key.","pos":[682,730]},{"content":"Syntax","pos":[739,745]},{"content":"Parameters","pos":[809,819]},{"content":"key","pos":[823,826]},{"content":"Key value to search for.","pos":[830,854]},{"content":"Remarks","pos":[863,870]},{"content":"The member function determines the last element <ph id=\"ph1\">`X`</ph> in the controlled sequence that has equivalent ordering to <ph id=\"ph2\">`key`</ph>.","pos":[874,991],"source":"The member function determines the last element `X` in the controlled sequence that has equivalent ordering to `key`."},{"content":"If no such element exists, or if <ph id=\"ph1\">`X`</ph> is the last element in the controlled sequence, it returns <bpt id=\"p1\">[</bpt>multimap::end (STL/CLR)<ept id=\"p1\">](../dotnet/multimap-end-stl-clr.md)</ept><ph id=\"ph2\">`()`</ph>; otherwise it returns an iterator that designates the first element beyond <ph id=\"ph3\">`X`</ph>.","pos":[992,1232],"source":" If no such element exists, or if `X` is the last element in the controlled sequence, it returns [multimap::end (STL/CLR)](../dotnet/multimap-end-stl-clr.md)`()`; otherwise it returns an iterator that designates the first element beyond `X`."},{"content":"You use it to locate the end of a sequence of elements currently in the controlled sequence that match a specified key.","pos":[1233,1352]},{"content":"Example","pos":[1361,1368]},{"content":"Requirements","pos":[2526,2538]},{"pos":[2542,2567],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/map&gt;","source":"**Header:** \\<cliext/map>"},{"pos":[2574,2595],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2604,2612]},{"content":"multimap (STL/CLR)","pos":[2617,2635]},{"content":"multimap::count (STL/CLR)","pos":[2673,2698]},{"content":"multimap::equal_range (STL/CLR)","pos":[2742,2773]},{"content":"multimap::find (STL/CLR)","pos":[2823,2847]},{"content":"multimap::lower_bound (STL/CLR)","pos":[2890,2921]}],"content":"---\ntitle: \"multimap::upper_bound (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::multimap::upper_bound\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"upper_bound member [STL/CLR]\"\nms.assetid: bfb8cf64-cecf-4685-8ac9-e7228ecee809\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# multimap::upper_bound (STL/CLR)\nFinds end of range that matches a specified key.  \n  \n## Syntax  \n  \n```  \niterator upper_bound(key_type key);  \n```  \n  \n#### Parameters  \n key  \n Key value to search for.  \n  \n## Remarks  \n The member function determines the last element `X` in the controlled sequence that has equivalent ordering to `key`. If no such element exists, or if `X` is the last element in the controlled sequence, it returns [multimap::end (STL/CLR)](../dotnet/multimap-end-stl-clr.md)`()`; otherwise it returns an iterator that designates the first element beyond `X`. You use it to locate the end of a sequence of elements currently in the controlled sequence that match a specified key.  \n  \n## Example  \n  \n```  \n// cliext_multimap_upper_bound.cpp   \n// compile with: /clr   \n#include <cliext/map>   \n  \ntypedef cliext::multimap<wchar_t, int> Mymultimap;   \nint main()   \n    {   \n    Mymultimap c1;   \n    c1.insert(Mymultimap::make_value(L'a', 1));   \n    c1.insert(Mymultimap::make_value(L'b', 2));   \n    c1.insert(Mymultimap::make_value(L'c', 3));   \n  \n// display contents \" [a 1] [b 2] [c 3]\"   \n    for each (Mymultimap::value_type elem in c1)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n    System::Console::WriteLine(\"upper_bound(L'x')==end() = {0}\",   \n        c1.upper_bound(L'x') == c1.end());   \n  \n    Mymultimap::iterator it = c1.upper_bound(L'a');   \n    System::Console::WriteLine(\"*upper_bound(L'a') = [{0} {1}]\",   \n        it->first, it->second);   \n    it = c1.upper_bound(L'b');   \n    System::Console::WriteLine(\"*upper_bound(L'b') = [{0} {1}]\",   \n        it->first, it->second);   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n [a 1] [b 2] [c 3]  \nupper_bound(L'x')==end() = True  \n*upper_bound(L'a') = [b 2]  \n*upper_bound(L'b') = [c 3]  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/map>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [multimap (STL/CLR)](../dotnet/multimap-stl-clr.md)   \n [multimap::count (STL/CLR)](../dotnet/multimap-count-stl-clr.md)   \n [multimap::equal_range (STL/CLR)](../dotnet/multimap-equal-range-stl-clr.md)   \n [multimap::find (STL/CLR)](../dotnet/multimap-find-stl-clr.md)   \n [multimap::lower_bound (STL/CLR)](../dotnet/multimap-lower-bound-stl-clr.md)"}