<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">894ae1d1b117bad3b956192c5d5cf2c9a05f77f4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\preprocessor\const-seg.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">520d7990e9e057dbee1da3375b74b82c5bfd4289</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">130df17cbea26bfeee8b54bd1ac073d7417bf44d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>const_seg | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>const_seg</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Specifies the segment where <bpt id="p1">[</bpt>const<ept id="p1">](../cpp/const-cpp.md)</ept> variables are stored in the .obj file.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The meaning of the terms <bpt id="p1">*</bpt>segment<ept id="p1">*</ept> and <bpt id="p2">*</bpt>section<ept id="p2">*</ept> are interchangeable in this topic.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>OBJ files can be viewed with the <bpt id="p1">[</bpt>dumpbin<ept id="p1">](../build/reference/dumpbin-command-line.md)</ept> application.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The default segment in the .obj file for <ph id="ph1">`const`</ph> variables is .rdata.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Some <ph id="ph1">`const`</ph> variables, such as scalars, are automatically inlined into the code stream.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Inlined code will not appear in .rdata.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Defining an object requiring dynamic initialization in a <ph id="ph1">`const_seg`</ph> results in undefined behavior.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>with no parameters resets the segment to .rdata.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>(optional)</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Puts a record on the internal compiler stack.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`push`</ph> can have an <ph id="ph2">`identifier`</ph> and <ph id="ph3">`segment-name`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>(optional)</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Removes a record from the top of the internal compiler stack.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>(optional)</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When used with <ph id="ph1">`push`</ph>, assigns a name to the record on the internal compiler stack.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When used with <ph id="ph1">`pop`</ph>, pops records off the internal stack until <ph id="ph2">`identifier`</ph> is removed; if <ph id="ph3">`identifier`</ph> is not found on the internal stack, nothing is popped.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`identifier`</ph> enables multiple records to be popped with a single <ph id="ph2">`pop`</ph> command.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>"<ph id="ph1">`segment-name`</ph>" (optional)</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The name of a segment.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When used with <ph id="ph1">`pop`</ph>, the stack is popped and <ph id="ph2">`segment-name`</ph> becomes the active segment name.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>"<ph id="ph1">`segment-class`</ph>" (optional)</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Included for compatibility with C++ prior to version 2.0.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It is ignored.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Comments</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>/SECTION<ept id="p1">](../build/reference/section-specify-section-attributes.md)</ept> for a list of names you should not use when creating a section.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can also specify sections for initialized data (<bpt id="p1">[</bpt>data_seg<ept id="p1">](../preprocessor/data-seg.md)</ept>), uninitialized data (<bpt id="p2">[</bpt>bss_seg<ept id="p2">](../preprocessor/bss-seg.md)</ept>), and functions (<bpt id="p3">[</bpt>code_seg<ept id="p3">](../preprocessor/code-seg.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Pragma Directives and the __Pragma Keyword</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>